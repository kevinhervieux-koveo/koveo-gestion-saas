# Performance-Specific Semgrep Rules
rules:
  - id: koveo.performance.inefficient-rerenders
    pattern-either:
      - pattern: |
          const $COMPONENT = ({ $PROPS }) => {
            ...
            return <div>{$DATA.map($CALLBACK)}</div>
          }
      - pattern: |
          function $COMPONENT({ $PROPS }) {
            return <div>{$EXPENSIVE_OPERATION}</div>
          }
    message: "Potential inefficient re-render - consider memoization"
    languages: [typescript, javascript]
    severity: INFO

  - id: koveo.performance.missing-usememo
    pattern: |
      const $RESULT = $DATA.filter($PREDICATE).map($TRANSFORM).sort($COMPARE)
    message: "Expensive calculation should use useMemo"
    languages: [typescript, javascript]
    severity: INFO

  - id: koveo.performance.missing-usecallback
    pattern-either:
      - pattern: |
          onClick={() => $HANDLER($ARGS)}
      - pattern: |
          onChange={($EVENT) => $HANDLER($EVENT)}
    message: "Event handler could benefit from useCallback"
    languages: [typescript, javascript]
    severity: INFO

  - id: koveo.performance.n1-query-pattern
    pattern: |
      for (const $ITEM of $ITEMS) {
        await $DB.select().where(eq($TABLE.id, $ITEM.id))
      }
    message: "Potential N+1 query - consider batch loading"
    languages: [typescript, javascript]
    severity: WARNING

  - id: koveo.performance.inefficient-db-operations
    pattern-either:
      - pattern: |
          await $DB.select().from($TABLE)
      - pattern: |
          SELECT * FROM $TABLE
    message: "Selecting all columns may be inefficient"
    languages: [typescript, javascript, sql]
    severity: INFO

  - id: koveo.performance.missing-request-caching
    pattern: |
      useQuery({
        queryKey: [$KEY],
        queryFn: $FN
      })
    pattern-not: |
      useQuery({
        queryKey: [$KEY],
        queryFn: $FN,
        staleTime: $TIME
      })
    message: "API request could benefit from caching strategy"
    languages: [typescript, javascript]
    severity: INFO

  - id: koveo.performance.potential-memory-leaks
    pattern-either:
      - pattern: |
          useEffect(() => {
            $SUBSCRIPTION
          }, [])
      - pattern: |
          setInterval($CALLBACK, $INTERVAL)
    pattern-not: |
      useEffect(() => {
        $SUBSCRIPTION
        return () => $CLEANUP
      }, [])
    message: "Potential memory leak - missing cleanup"
    languages: [typescript, javascript]
    severity: WARNING

  - id: koveo.performance.inefficient-string-operations
    pattern-either:
      - pattern: |
          $STR += $OTHER
      - pattern: |
          $STRINGS.join("")
    message: "Inefficient string concatenation"
    languages: [typescript, javascript]
    severity: INFO

  - id: koveo.performance.large-imports
    pattern-either:
      - pattern: |
          import * as $LIB from "$PACKAGE"
      - pattern: |
          import $DEFAULT from "lodash"
    message: "Large import may increase bundle size"
    languages: [typescript, javascript]
    severity: INFO
