# Extended Semgrep Rules for Koveo Gestion
# Additional rules for translation coverage, performance, React best practices,
# and property management domain-specific patterns

rules:
  # Translation and Internationalization Rules
  - id: koveo.i18n.hardcoded-french-text
    pattern-either:
      - pattern: '"Tableau de bord"'
      - pattern: '"Bâtiments"'
      - pattern: '"Résidences"'
      - pattern: '"Demandes"'
      - pattern: '"Documents"'
      - pattern: '"Utilisateurs"'
      - pattern: '"Gestionnaire"'
      - pattern: '"Administrateur"'
      - pattern: '"Locataire"'
      - pattern: '"Résident"'
    message: "Hardcoded French text detected - consider using translation keys for i18n support"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: i18n
      domain: translation-coverage

  - id: koveo.i18n.hardcoded-english-text
    pattern-either:
      - pattern: '"Dashboard"'
      - pattern: '"Buildings"'
      - pattern: '"Residences"'
      - pattern: '"Demands"'
      - pattern: '"Documents"'
      - pattern: '"Users"'
      - pattern: '"Manager"'
      - pattern: '"Admin"'
      - pattern: '"Tenant"'
      - pattern: '"Resident"'
      - pattern: '"Logout"'
      - pattern: '"Login"'
      - pattern: '"Settings"'
    message: "Hardcoded English text detected - consider using translation keys for i18n support"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: i18n
      domain: translation-coverage

  - id: koveo.i18n.missing-translation-usage
    pattern-either:
      - pattern: |
          export function $COMPONENT($PROPS) {
            ...
            return <$TAG>$TEXT</$TAG>
          }
      - pattern: |
          export default function $COMPONENT($PROPS) {
            ...
            return <$TAG>$TEXT</$TAG>
          }
    pattern-not:
      - pattern: |
          export function $COMPONENT($PROPS) {
            const { t } = useLanguage();
            ...
          }
      - pattern: |
          export default function $COMPONENT($PROPS) {
            const { t } = useLanguage();
            ...
          }
    message: "Component may need translation support - consider using useLanguage hook"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: i18n
      domain: translation-coverage

  - id: koveo.i18n.quebec-french-terms
    pattern-either:
      - pattern: '"email"'
      - pattern: '"Email"'
      - pattern: '"e-mail"'
    message: "Use Quebec French term 'courriel' instead of 'email' for better localization"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: i18n
      domain: quebec-compliance

  # Performance and Code Quality Rules
  - id: koveo.performance.expensive-render-operations
    pattern-either:
      - pattern: |
          return (
            <$TAG>
              {$DATA.map($CALLBACK).filter($FILTER)}
            </$TAG>
          )
      - pattern: |
          return (
            <$TAG>
              {$DATA.sort($CALLBACK)}
            </$TAG>
          )
      - pattern: |
          return (
            <$TAG>
              {JSON.parse($DATA)}
            </$TAG>
          )
    message: "Expensive operation in render - consider memoization or moving to useEffect"
    languages: [typescript, javascript]
    severity: WARNING
    metadata:
      category: performance
      domain: react-optimization

  - id: koveo.performance.missing-react-memo
    pattern: |
      export function $COMPONENT($PROPS) {
        ...
        return <$ELEMENT>...</$ELEMENT>
      }
    pattern-not:
      - pattern: |
          export function $COMPONENT($PROPS) {
            const [...] = useState(...);
            ...
          }
      - pattern: |
          export function $COMPONENT($PROPS) {
            const [...] = useEffect(...);
            ...
          }
    message: "Consider wrapping with React.memo for performance optimization"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: performance
      domain: react-optimization

  - id: koveo.performance.large-bundle-imports
    pattern-either:
      - pattern: |
          import * as $LIB from '$PACKAGE'
      - pattern: |
          import $LIB from 'lodash'
      - pattern: |
          import $LIB from 'moment'
    message: "Large library import detected - consider tree shaking or alternatives"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: performance
      domain: bundle-optimization

  - id: koveo.react.missing-error-boundary
    pattern-either:
      - pattern: |
          async function $FUNC() {
            ...
            const $RESULT = await $API_CALL
            ...
          }
      - pattern: |
          $PROMISE.then($CALLBACK).catch($ERROR_HANDLER)
    pattern-not:
      - pattern: |
          try {
            ...
            const $RESULT = await $API_CALL
            ...
          } catch ($ERROR) {
            ...
          }
    message: "Async operation may need error boundary or proper error handling"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: react
      domain: error-handling

  # React and TypeScript Best Practices
  - id: koveo.react.missing-prop-types
    pattern: |
      export function $COMPONENT($PROPS) {
        ...
      }
    pattern-not:
      - pattern: |
          export function $COMPONENT($PROPS: $TYPE) {
            ...
          }
    message: "Component missing TypeScript prop types - add interface for better type safety"
    languages: [typescript]
    severity: INFO
    metadata:
      category: typescript
      domain: type-safety

  - id: koveo.react.improper-hook-usage
    pattern-either:
      - pattern: |
          if ($CONDITION) {
            const [$STATE, $SETTER] = useState($INITIAL);
          }
      - pattern: |
          if ($CONDITION) {
            useEffect($CALLBACK, $DEPS);
          }
      - pattern: |
          for ($ITEM in $ITEMS) {
            const [$STATE, $SETTER] = useState($INITIAL);
          }
    message: "Hooks must be called at the top level - not inside loops, conditions, or nested functions"
    languages: [typescript, javascript]
    severity: ERROR
    metadata:
      category: react
      domain: hooks-rules

  - id: koveo.accessibility.missing-attributes
    pattern-either:
      - pattern: |
          <button>$TEXT</button>
      - pattern: |
          <input />
      - pattern: |
          <img src="$SRC" />
    pattern-not:
      - pattern: |
          <button aria-label="$LABEL">$TEXT</button>
      - pattern: |
          <input aria-label="$LABEL" />
      - pattern: |
          <img src="$SRC" alt="$ALT" />
    message: "Missing accessibility attributes - add aria-label, alt text, or other a11y attributes"
    languages: [typescript, javascript]
    severity: WARNING
    metadata:
      category: accessibility
      domain: a11y-compliance

  - id: koveo.code-quality.unused-imports
    pattern-either:
      - pattern: |
          import { $IMPORT } from '$MODULE';
          ...
    pattern-not:
      - pattern: |
          import { $IMPORT } from '$MODULE';
          ...
          $IMPORT
    message: "Potentially unused import detected - remove to reduce bundle size"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: code-quality
      domain: cleanup

  # Property Management Domain-Specific Rules
  - id: koveo.property.missing-tenant-validation
    pattern-either:
      - pattern: |
          const tenant = { ..., email: $EMAIL, ... }
      - pattern: |
          $TENANT_DB.insert({ ..., phone: $PHONE, ... })
      - pattern: |
          createTenant({ ..., socialInsuranceNumber: $SIN, ... })
    pattern-not:
      - pattern: |
          z.object({ ..., email: z.string().email(), ... })
      - pattern: |
          if (validateEmail($EMAIL)) { ... }
    message: "Tenant data operations require validation for Law 25 compliance"
    languages: [typescript, javascript]
    severity: WARNING
    metadata:
      category: property-management
      domain: data-validation

  - id: koveo.property.insecure-access-codes
    pattern-either:
      - pattern: |
          const accessCode = Math.random().toString()
      - pattern: |
          building.keyCode = $USER_INPUT
      - pattern: |
          console.log("Access code:", $CODE)
    message: "Building access codes must be generated securely and never logged"
    languages: [typescript, javascript]
    severity: ERROR
    metadata:
      category: security
      domain: property-management

  - id: koveo.property.maintenance-validation
    pattern-either:
      - pattern: |
          maintenanceRequest.create({ description: $DESC, ... })
      - pattern: |
          updateMaintenanceStatus($ID, $STATUS)
    pattern-not:
      - pattern: |
          z.object({ description: z.string().min(10), ... })
      - pattern: |
          if ($DESC && $DESC.length > 10) { ... }
    message: "Maintenance operations should validate input data for data integrity"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: property-management
      domain: data-validation

  - id: koveo.property.financial-data-exposure
    pattern-either:
      - pattern: |
          console.log($...ARGS)
      - pattern: |
          alert($MESSAGE)
      - pattern: |
          JSON.stringify($OBJECT)
    metavariable-pattern:
      metavariable: $...ARGS
      patterns:
        - pattern-regex: '.*(?i)(rent|amount|balance|payment|bank|account).*'
    message: "Potential financial data exposure in client-side code or logs"
    languages: [typescript, javascript]
    severity: ERROR
    metadata:
      category: financial-privacy
      domain: property-management

  # Custom Business Logic Rules
  - id: koveo.rbac.improper-access-control
    pattern-either:
      - pattern: |
          if ($USER.role === "admin") { ... }
      - pattern: |
          $USER.role === "manager" && $ACTION
    pattern-not:
      - pattern: |
          hasRoleOrHigher($USER.role, "admin")
      - pattern: |
          checkPermission($USER, $RESOURCE, $ACTION)
    message: "Use proper RBAC functions instead of direct role comparison for security"
    languages: [typescript, javascript]
    severity: WARNING
    metadata:
      category: rbac
      domain: access-control

  - id: koveo.audit.missing-logging
    pattern-either:
      - pattern: |
          deleteUser($ID)
      - pattern: |
          updateBillingInfo($DATA)
      - pattern: |
          changeUserRole($USER, $ROLE)
      - pattern: |
          deleteBuilding($ID)
    pattern-not:
      - pattern: |
          auditLog.record($ACTION, $USER, $DATA)
      - pattern: |
          logger.audit($MESSAGE, $CONTEXT)
    message: "Critical operations should include audit logging for compliance"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: audit
      domain: compliance

  - id: koveo.database.optimization-opportunity
    pattern-either:
      - pattern: |
          $DB.select().from($TABLE).where(eq($TABLE.id, $ID))
      - pattern: |
          await Promise.all($ARRAY.map(async $ITEM => $DB_CALL))
    message: "Database query optimization opportunity - consider indexing or batching"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: database
      domain: performance

  # Law 25 Extended Compliance
  - id: koveo.law25.privacy-policy-reference
    pattern-either:
      - pattern: |
          <a href="/privacy">$TEXT</a>
      - pattern: |
          "privacy policy"
      - pattern: |
          "politique de confidentialité"
      - pattern: |
          "/privacy-policy"
    message: "Privacy policy reference detected - ensure it's up-to-date with Law 25"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: privacy
      law25: privacy-policy

  - id: koveo.law25.consent-collection
    pattern-either:
      - pattern: |
          <input type="checkbox" ... />
      - pattern: |
          consent: true
      - pattern: |
          acceptsTerms: $VALUE
    message: "Consent collection mechanism - ensure Law 25 compliance requirements are met"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: privacy
      law25: consent-management

  # Additional Security Rules
  - id: koveo.security.client-side-secrets
    pattern-either:
      - pattern: |
          const API_KEY = "$KEY"
      - pattern: |
          process.env.SECRET_KEY
      - pattern: |
          localStorage.setItem("token", $TOKEN)
    message: "Potential secret exposure in client-side code - move to server-side"
    languages: [typescript, javascript]
    severity: ERROR
    metadata:
      category: security
      domain: secret-management

  - id: koveo.security.unsafe-eval
    pattern-either:
      - pattern: |
          eval($CODE)
      - pattern: |
          Function($CODE)
      - pattern: |
          setTimeout($STRING, $DELAY)
      - pattern: |
          setInterval($STRING, $DELAY)
    message: "Unsafe eval-like function usage - potential XSS/injection risk"
    languages: [typescript, javascript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-95: Code Injection"

  # Database Security
  - id: koveo.database.missing-sanitization
    pattern-either:
      - pattern: |
          sql`SELECT * FROM users WHERE name = ${$USER_INPUT}`
      - pattern: |
          db.query("SELECT * FROM " + $TABLE)
      - pattern: |
          `INSERT INTO ${$TABLE} VALUES (${$VALUES})`
    message: "Database query with potential injection risk - use parameterized queries"
    languages: [typescript, javascript]
    severity: ERROR
    metadata:
      category: security
      domain: database-security

  # API Security
  - id: koveo.api.missing-rate-limiting
    pattern-either:
      - pattern: |
          app.post("/api/$ENDPOINT", async ($REQ, $RES) => { ... })
      - pattern: |
          router.post("/$ENDPOINT", async ($REQ, $RES) => { ... })
    pattern-not:
      - pattern: |
          app.post("/api/$ENDPOINT", rateLimit(), async ($REQ, $RES) => { ... })
      - pattern: |
          router.post("/$ENDPOINT", rateLimit(), async ($REQ, $RES) => { ... })
    message: "API endpoint may need rate limiting for DoS protection"
    languages: [typescript, javascript]
    severity: INFO
    metadata:
      category: security
      domain: api-security

  - id: koveo.api.missing-input-validation
    pattern: |
      app.$METHOD("/api/$ENDPOINT", async (req, res) => {
        const $DATA = req.body;
        ...
      })
    pattern-not:
      - pattern: |
          app.$METHOD("/api/$ENDPOINT", async (req, res) => {
            const $DATA = $SCHEMA.parse(req.body);
            ...
          })
      - pattern: |
          app.$METHOD("/api/$ENDPOINT", validateInput, async (req, res) => {
            ...
          })
    message: "API endpoint should validate input data with Zod schema or middleware"
    languages: [typescript, javascript]
    severity: WARNING
    metadata:
      category: security
      domain: api-security