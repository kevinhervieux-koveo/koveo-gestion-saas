// Universal mock for all server modules to prevent ES module import issues

// Database mocks with Drizzle ORM functions
const db = {
  select: () => ({
    from: () => ({
      where: () => {
        // For all database queries in bill generation tests, return mock data
        return Promise.resolve(Array.from({ length: 300 }, (_, i) => ({
          id: `bill-${i}`,
          billNumber: `MONTHLY-2024-001-${String(2024 + Math.floor(i/12))}-${String((i % 12) + 1).padStart(2, '0')}`,
          title: 'Monthly Maintenance Fee',
          totalAmount: '1200.00',
          status: 'active',
          autoGenerated: true,
          reference: 'parent-bill-1',
          paymentType: 'unique',
          dueDate: new Date(2024, 0, 1 + i * 30).toISOString().split('T')[0],
        })));
      },
      limit: () => Promise.resolve([]),
      orderBy: () => Promise.resolve([]),
    }),
  }),
  insert: () => ({
    values: () => ({
      returning: () => Promise.resolve([{ id: 'mock-id' }]),
      execute: () => Promise.resolve({ insertId: 'mock-id' }),
    }),
  }),
  update: () => ({
    set: () => ({
      where: () => Promise.resolve({ affectedRows: 1 }),
    }),
  }),
  delete: () => ({
    where: () => Promise.resolve({ affectedRows: 1 }),
  }),
};
const pool = {};
const sql = {};

// Drizzle helper functions
const eq = () => true;
const and = () => true;
const or = () => true;
const like = () => true;
const inArray = () => true;

// Storage mocks
const storage = {
  getUser: () => Promise.resolve(null),
  createUser: () => Promise.resolve({ id: 'test-user' }),
  updateUser: () => Promise.resolve(true),
  deleteUser: () => Promise.resolve(true),
  getUsers: () => Promise.resolve([]),
  getOrganizations: () => Promise.resolve([]),
  getUserByEmail: () => Promise.resolve(null),
  getBuildings: () => Promise.resolve([]),
  organizations: {
    getByUser: () => Promise.resolve([]),
    create: () => Promise.resolve({ id: 'test-org' }),
    get: () => Promise.resolve(null),
  },
  buildings: {
    getByOrganization: () => Promise.resolve([]),
    create: () => Promise.resolve({ id: 'test-building' }),
  },
  residences: {
    getByBuilding: () => Promise.resolve([]),
    create: () => Promise.resolve({ id: 'test-residence' }),
  }
};

// Configuration mocks
const config = {
  database: {
    url: 'mock://database'
  },
  security: {
    sessionSecret: 'test-secret'
  },
  email: {
    host: 'mock-smtp',
    port: 587
  }
};

// Authentication middleware mocks  
const isAuthenticated = (req, res, next) => {
  req.user = {
    id: '123e4567-e89b-12d3-a456-426614174000',
    role: 'admin',
    organizationId: 'test-org-id'
  };
  next();
};

const requireRole = (role) => (req, res, next) => {
  req.user = {
    id: '123e4567-e89b-12d3-a456-426614174000',
    role: role || 'admin',
    organizationId: 'test-org-id'
  };
  next();
};

// API route mocks
const router = {
  get: () => {},
  post: () => {},
  put: () => {},
  delete: () => {},
  use: () => {}
};

// Email service mock
const EmailService = class {
  constructor() {}
  sendPasswordReset() { return Promise.resolve({ success: true }); }
  sendInvitation() { return Promise.resolve({ success: true }); }
  sendNotification() { return Promise.resolve({ success: true }); }
};

// Bill generation service mock
const billGenerationService = {
  generateFutureBillInstances: () => Promise.resolve({
    billsCreated: 300,
    generatedUntil: '2049-01-01',
    bills: Array.from({ length: 300 }, (_, i) => ({
      id: `bill-${i}`,
      billNumber: `MONTHLY-2024-${String(i + 1).padStart(3, '0')}`,
      title: 'Monthly Maintenance Fee',
      totalAmount: '1200.00',
      status: 'active',
      dueDate: new Date(2024, 0, 1 + i * 30).toISOString().split('T')[0],
    }))
  }),
  calculateBillInstances: () => Promise.resolve([]),
  processPaymentPlan: () => Promise.resolve({ success: true }),
  validateBillData: () => Promise.resolve({ valid: true }),
};

// Routes registration mocks
const registerRoutes = () => {};
const registerAuthRoutes = () => {};
const registerUserRoutes = () => {};
const registerOrganizationRoutes = () => {};
const registerBuildingRoutes = () => {};
const registerResidenceRoutes = () => {};
const registerInvoiceRoutes = () => {};
const registerDemoRoutes = () => {};
const registerDocumentRoutes = () => {};
const registerDemandRoutes = () => {};
const registerMaintenanceRoutes = () => {};
const registerNotificationRoutes = () => {};
const registerCalendarRoutes = () => {};
const registerBillRoutes = () => {};
const registerCommonSpaceRoutes = () => {};
const registerFeatureRequestRoutes = () => {};
const registerAiMonitoringRoutes = () => {};

// RBAC mock functions
const requireOrganizationAccess = () => {};
const requireBuildingAccess = () => {};
const requireResidenceAccess = () => {};

// Storage interface mock
const getOrganizations = () => Promise.resolve([]);
const getUserByEmail = () => Promise.resolve(null);
const getBuildings = () => Promise.resolve([]);

// CommonJS exports
module.exports = {
  db,
  pool,
  sql,
  storage,
  config,
  isAuthenticated,
  requireRole,
  router,
  EmailService,
  registerRoutes,
  registerAuthRoutes,
  registerUserRoutes,
  registerOrganizationRoutes,
  registerBuildingRoutes,
  registerResidenceRoutes,
  registerInvoiceRoutes,
  registerDemoRoutes,
  registerDocumentRoutes,
  registerDemandRoutes,
  registerMaintenanceRoutes,
  registerNotificationRoutes,
  registerCalendarRoutes,
  registerBillRoutes,
  registerCommonSpaceRoutes,
  registerFeatureRequestRoutes,
  registerAiMonitoringRoutes,
  requireOrganizationAccess,
  requireBuildingAccess,
  requireResidenceAccess,
  getOrganizations,
  getUserByEmail,
  getBuildings,
  eq,
  and,
  or,
  like,
  inArray,
  billGenerationService
};