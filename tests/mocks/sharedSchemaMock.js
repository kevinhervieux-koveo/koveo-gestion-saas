// Comprehensive mock for shared schema modules

// Mock pgEnum function - central definition
const pgEnum = (name, values) => ({
  enumName: name,
  enumValues: values,
  _: {
    brand: 'PgEnum',
    baseType: 'string',
  },
});

// Mock all common PostgreSQL functions from drizzle-orm/pg-core
const varchar = (name, config = {}) => ({ 
  name, 
  dataType: 'varchar', 
  ...config,
  primaryKey: function() { return { ...this, isPrimaryKey: true }; },
  notNull: function() { return { ...this, isNotNull: true }; },
  unique: function() { return { ...this, isUnique: true }; },
});

const text = (name, config = {}) => ({ 
  name, 
  dataType: 'text', 
  ...config,
  primaryKey: function() { return { ...this, isPrimaryKey: true }; },
  notNull: function() { return { ...this, isNotNull: true }; },
  unique: function() { return { ...this, isUnique: true }; },
});

const pgTable = (name, columns) => ({
  _: {
    name,
    brand: 'PgTable',
    columns,
  },
  [name]: columns,
});

// Mock schema objects
const organizations = { id: { name: 'id' }, name: { name: 'name' } };
const users = { id: { name: 'id' }, email: { name: 'email' }, role: { name: 'role' } };
const buildings = { id: { name: 'id' }, organizationId: { name: 'organizationId' }, name: { name: 'name' } };
const residences = { id: { name: 'id' }, buildingId: { name: 'buildingId' }, unitNumber: { name: 'unitNumber' } };
const documents = { id: { name: 'id' }, title: { name: 'title' }, category: { name: 'category' } };
const demands = { id: { name: 'id' }, type: { name: 'type' }, status: { name: 'status' } };
const bills = { id: { name: 'id' }, buildingId: { name: 'buildingId' }, reference: { name: 'reference' }, autoGenerated: { name: 'autoGenerated' } };

// Mock enums
const userRoleEnum = pgEnum('user_role', ['admin', 'manager', 'tenant', 'resident']);

// Mock insert schemas with .extend() method
const insertOrganizationSchema = { 
  parse: jest.fn(), 
  safeParse: jest.fn().mockReturnValue({ success: true, data: {} }), 
  omit: jest.fn().mockReturnThis(),
  extend: jest.fn().mockReturnThis()
};
const insertUserSchema = { 
  parse: jest.fn(), 
  safeParse: jest.fn().mockReturnValue({ success: true, data: {} }), 
  omit: jest.fn().mockReturnThis(),
  extend: jest.fn().mockReturnThis()
};
const insertBuildingSchema = { 
  parse: jest.fn(), 
  safeParse: jest.fn().mockReturnValue({ success: true, data: {} }), 
  omit: jest.fn().mockReturnThis(),
  extend: jest.fn().mockReturnThis()
};
const insertDocumentSchema = { 
  parse: jest.fn(), 
  safeParse: jest.fn().mockReturnValue({ success: true, data: {} }), 
  omit: jest.fn().mockReturnThis(),
  extend: jest.fn().mockReturnThis()
};
const insertDemandSchema = { 
  parse: jest.fn(), 
  safeParse: jest.fn().mockReturnValue({ success: true, data: {} }), 
  omit: jest.fn().mockReturnThis(),
  extend: jest.fn().mockReturnThis()
};
const insertResidenceSchema = { 
  parse: jest.fn(), 
  safeParse: jest.fn().mockReturnValue({ success: true, data: {} }), 
  omit: jest.fn().mockReturnThis(),
  extend: jest.fn().mockReturnThis()
};

module.exports = {
  // Schema objects
  organizations,
  users,
  buildings,
  residences,
  documents,
  demands,
  bills,
  
  // Enums
  userRoleEnum,
  
  // Insert schemas
  insertOrganizationSchema,
  insertUserSchema,
  insertBuildingSchema,
  insertDocumentSchema,
  insertDemandSchema,
  insertResidenceSchema,
  
  // PostgreSQL functions
  pgEnum,
  pgTable,
  varchar,
  text,
  
  // Default export support
  __esModule: true,
  default: {}
};