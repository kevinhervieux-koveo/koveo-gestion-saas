{"file":"/home/runner/workspace/tests/security/comprehensive-demo-user-security.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/security/comprehensive-demo-user-security.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\n\n// Mock WebSocket constructor for Jest environment\njest.mock('ws', () => ({\n  __esModule: true,\n  default: class MockWebSocket {}\n}));\n\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n/**\n * Demo User Security Restrictions Test Suite\n * \n * Validates that demo users have proper security restrictions:\n * - Cannot modify critical data\n * - Have read-only access to most features  \n * - Cannot access sensitive information\n * - Cannot perform administrative actions\n */\n\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('Demo User Security Restrictions', () => {\n  let app: express.Application;\n  let demoUser: any;\n  let demoOrg: any;\n  let normalUser: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean up test data\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-security@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'normal-security@example.com'));\n\n    // Create demo organization\n    [demoOrg] = await db.insert(schema.organizations).values({\n      name: 'Demo Organization',\n      type: 'syndicate',\n      address: '123 Demo St',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n    }).returning();\n\n    // Create demo user with demo prefix\n    [demoUser] = await db.insert(schema.users).values({\n      username: 'demo-user-security',\n      email: 'demo-security@example.com',\n      firstName: 'Demo',\n      lastName: 'User',\n      password: '$2b$12$demo.password.hash',\n      role: 'manager',\n    }).returning();\n\n    // Create normal user for comparison\n    [normalUser] = await db.insert(schema.users).values({\n      username: 'normal-user-security',\n      email: 'normal-security@example.com',\n      firstName: 'Normal',\n      lastName: 'User', \n      password: '$2b$12$normal.password.hash',\n      role: 'manager',\n    }).returning();\n\n    // Link users to demo organization\n    await db.insert(schema.userOrganizations).values([\n      { userId: demoUser[0].id, organizationId: demoOrg.id, organizationRole: 'manager' },\n      { userId: normalUser[0].id, organizationId: demoOrg.id, organizationRole: 'manager' },\n    ]);\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-security@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'normal-security@example.com'));\n    if (demoOrg?.id) await db.delete(schema.organizations).where(eq(schema.organizations.id, demoOrg.id));\n  });\n\n  describe('Write Operation Restrictions', () => {\n    it('should prevent demo users from creating new users', async () => {\n      // Mock login session for demo user\n      const agent = request.agent(app);\n      \n      // Set up demo user session\n      const sessionData = {\n        userId: demoUser.id,\n        role: demoUser.role,\n        organizationId: demoUser.organizationId,\n      };\n\n      // Try to create new user\n      const createUserResponse = await agent\n        .post('/api/users')\n        .send({\n          username: 'newuser',\n          email: 'newuser@example.com',\n          firstName: 'New',\n          lastName: 'User',\n          password: 'password123',\n          role: 'resident',\n        });\n\n      // Demo users should not be able to create users\n      expect(createUserResponse.status).toBe(403);\n      expect(createUserResponse.body.error).toContain('Demo users cannot perform this action');\n    });\n\n    it('should prevent demo users from deleting data', async () => {\n      // Create test building\n      const [testBuilding] = await db.insert(schema.buildings).values({\n        name: 'Test Building for Demo',\n        address: '456 Test Ave',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1B 1B1',\n        organizationId: demoOrg.id,\n        buildingType: 'apartment',\n        totalUnits: 10,\n      }).returning();\n\n      const agent = request.agent(app);\n\n      // Try to delete building as demo user\n      const deleteResponse = await agent\n        .delete(`/api/buildings/${testBuilding.id}`);\n\n      expect(deleteResponse.status).toBe(403);\n      expect(deleteResponse.body.error).toContain('Demo users cannot perform this action');\n\n      // Clean up\n      await db.delete(schema.buildings).where(eq(schema.buildings.id, testBuilding.id));\n    });\n\n    it('should prevent demo users from modifying financial data', async () => {\n      const agent = request.agent(app);\n\n      // Try to create/modify financial records\n      const billResponse = await agent\n        .post('/api/bills')\n        .send({\n          organizationId: demoOrg.id,\n          name: 'Test Bill',\n          amount: 100.00,\n          dueDate: new Date(),\n        });\n\n      expect(billResponse.status).toBe(403);\n    });\n  });\n\n  describe('Read Access Validation', () => {\n    it('should allow demo users to read non-sensitive data', async () => {\n      const agent = request.agent(app);\n\n      // Demo users should be able to read buildings\n      const buildingsResponse = await agent\n        .get('/api/buildings');\n\n      expect(buildingsResponse.status).toBe(200);\n    });\n\n    it('should restrict demo users from accessing sensitive reports', async () => {\n      const agent = request.agent(app);\n\n      // Try to access financial reports\n      const reportsResponse = await agent\n        .get('/api/reports/financial');\n\n      expect(reportsResponse.status).toBe(403);\n    });\n  });\n\n  describe('Demo User Identification', () => {\n    it('should properly identify demo users by username prefix', async () => {\n      // Test the demo user detection logic\n      const isDemoUser = demoUser.username.startsWith('demo-');\n      expect(isDemoUser).toBe(true);\n\n      const isNormalUser = normalUser.username.startsWith('demo-');\n      expect(isNormalUser).toBe(false);\n    });\n\n    it('should apply demo restrictions consistently across all endpoints', async () => {\n      const restrictedEndpoints = [\n        { method: 'post', path: '/api/users' },\n        { method: 'put', path: '/api/organizations/1' },\n        { method: 'delete', path: '/api/buildings/1' },\n        { method: 'post', path: '/api/bills' },\n        { method: 'delete', path: '/api/documents/1' },\n      ];\n\n      const agent = request.agent(app);\n\n      for (const endpoint of restrictedEndpoints) {\n        let response;\n        switch (endpoint.method) {\n          case 'post':\n            response = await agent.post(endpoint.path).send({});\n            break;\n          case 'put':\n            response = await agent.put(endpoint.path).send({});\n            break;\n          case 'delete':\n            response = await agent.delete(endpoint.path);\n            break;\n          default:\n            response = await agent.get(endpoint.path);\n        }\n\n        // All should be restricted for demo users\n        expect(response.status).toBe(403);\n      }\n    });\n  });\n\n  describe('Security Edge Cases', () => {\n    it('should prevent demo users from changing their own permissions', async () => {\n      const agent = request.agent(app);\n\n      // Try to update own user role\n      const updateResponse = await agent\n        .put(`/api/users/${demoUser.id}`)\n        .send({\n          role: 'admin'\n        });\n\n      expect(updateResponse.status).toBe(403);\n    });\n\n    it('should prevent demo users from accessing user management features', async () => {\n      const agent = request.agent(app);\n\n      // Try to access user management endpoints\n      const inviteResponse = await agent\n        .post('/api/invitations')\n        .send({\n          email: 'test@example.com',\n          role: 'resident',\n        });\n\n      expect(inviteResponse.status).toBe(403);\n    });\n  });\n});"],"version":3}