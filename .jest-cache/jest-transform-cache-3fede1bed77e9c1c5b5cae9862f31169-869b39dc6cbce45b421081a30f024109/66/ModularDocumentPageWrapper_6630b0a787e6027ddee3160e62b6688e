b1103680d8432cbf6e826060a7fc5222
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModularDocumentPageWrapper;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const lucide_react_1 = require("lucide-react");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const select_1 = require("@/components/ui/select");
const dialog_1 = require("@/components/ui/dialog");
const label_1 = require("@/components/ui/label");
const collapsible_1 = require("@/components/ui/collapsible");
const header_1 = require("@/components/layout/header");
const queryClient_1 = require("@/lib/queryClient");
const use_language_1 = require("@/hooks/use-language");
const document_management_1 = require("@/components/document-management");
const DocumentCreateForm_1 = require("@/components/document-management/DocumentCreateForm");
const lucide_react_2 = require("lucide-react");
function DocumentViewDialog({ documentId, isOpen, onClose, onEdit, canEdit }) {
    const { data: document, isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/documents', documentId],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', `/api/documents/${documentId}`);
            return response.json();
        },
        enabled: isOpen && !!documentId,
    });
    const handleDownload = async () => {
        console.log('[DOWNLOAD] Starting download for document:', documentId);
        try {
            // Use fetch with credentials to ensure authentication
            const response = await fetch(`/api/documents/${documentId}/file?download=true`, {
                method: 'GET',
                credentials: 'include', // Include authentication cookies
            });
            if (!response.ok) {
                throw new Error(`Download failed: ${response.status} ${response.statusText}`);
            }
            // Get the filename from Content-Disposition header or use document name
            const contentDisposition = response.headers.get('Content-Disposition');
            let fileName = document?.name || 'document';
            if (contentDisposition) {
                const fileNameMatch = contentDisposition.match(/filename="([^"]+)"/);
                if (fileNameMatch) {
                    fileName = fileNameMatch[1];
                }
            }
            // Convert response to blob and create download
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            // Clean up
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
            console.log('[DOWNLOAD] Download completed successfully');
        }
        catch (error) {
            console.error('[DOWNLOAD] Download failed:', error);
            // You might want to show a toast notification here
        }
    };
    const handleView = () => {
        if (document?.filePath) {
            // Open document in new tab for viewing
            window.open(`/api/documents/${documentId}/file`, '_blank');
        }
    };
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isOpen, onOpenChange: onClose, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-2xl max-h-[95vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Document Details" }) }), isLoading ? ((0, jsx_runtime_1.jsxs)("div", { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Loading document..." })] })) : document ? ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Document Name" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: document.name })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Category" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 capitalize", children: document.category || document.documentType || 'Other' })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Upload Date" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: new Date(document.createdAt).toLocaleDateString() })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Visible to Tenants" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: document.isVisibleToTenants ? 'Yes' : 'No' })] })] }), document.description && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: document.description })] })), document.filePath && ((0, jsx_runtime_1.jsx)("div", { className: "border rounded-lg p-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3", children: [(0, jsx_runtime_1.jsx)(lucide_react_2.FileText, { className: "w-5 h-5 text-gray-500" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium", children: document.fileName || document.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500", children: "Document attachment" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", onClick: handleView, className: "flex items-center gap-1", "data-testid": "button-view-document-file", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: "w-3 h-3" }), "View"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", onClick: handleDownload, className: "flex items-center gap-1", "data-testid": "button-download-document-file", children: [(0, jsx_runtime_1.jsx)(lucide_react_2.Download, { className: "w-3 h-3" }), "Download"] })] })] }) })), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2 justify-end pt-4 border-t", children: [canEdit && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: onEdit, children: "Edit Document" })), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "default", onClick: onClose, children: "Close" })] })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Document not found" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: onClose, className: "mt-4", children: "Close" })] }))] }) }));
}
function DocumentEditDialog({ documentId, isOpen, onClose, onSuccess }) {
    const { data: document, isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/documents', documentId],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', `/api/documents/${documentId}`);
            return response.json();
        },
        enabled: isOpen && !!documentId,
    });
    const handleSuccess = () => {
        onSuccess();
        onClose();
    };
    const handleDelete = () => {
        onSuccess(); // Refresh the document list
        onClose();
    };
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isOpen, onOpenChange: onClose, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-4xl max-h-[95vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Edit Document" }) }), isLoading ? ((0, jsx_runtime_1.jsxs)("div", { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Loading document..." })] })) : document ? ((0, jsx_runtime_1.jsx)("div", { className: "p-6", children: (0, jsx_runtime_1.jsx)(document_management_1.DocumentEditForm, { document: document, onSuccess: handleSuccess, onCancel: onClose, onDelete: handleDelete }) })) : ((0, jsx_runtime_1.jsxs)("div", { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Document not found" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: onClose, className: "mt-4", children: "Close" })] }))] }) }));
}
// Document categories for filtering
const DOCUMENT_CATEGORIES = [
    { value: 'all', label: 'All Categories' },
    { value: 'bylaw', label: 'Bylaws' },
    { value: 'financial', label: 'Financial' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'legal', label: 'Legal' },
    { value: 'meeting_minutes', label: 'Meeting Minutes' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'contracts', label: 'Contracts' },
    { value: 'permits', label: 'Permits' },
    { value: 'inspection', label: 'Inspection' },
    { value: 'other', label: 'Other' },
];
function ModularDocumentPageWrapper({ type, userRole, backPath, backLabel, entityIdParam, }) {
    const [, navigate] = (0, wouter_1.useLocation)();
    const params = (0, wouter_1.useParams)();
    const { t } = (0, use_language_1.useLanguage)();
    // State for document interactions
    const [isCreateDialogOpen, setIsCreateDialogOpen] = (0, react_1.useState)(false);
    // State for filtering and search
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [selectedCategory, setSelectedCategory] = (0, react_1.useState)('all');
    const [viewMode, setViewMode] = (0, react_1.useState)('grid');
    // State for collapsible categories (start with all categories expanded)
    const [expandedCategories, setExpandedCategories] = (0, react_1.useState)(() => {
        // Initialize with all possible categories expanded
        return new Set(DOCUMENT_CATEGORIES.map(cat => cat.value).filter(val => val !== 'all'));
    });
    // Toggle category expansion
    const toggleCategory = (category) => {
        const newExpanded = new Set(expandedCategories);
        if (newExpanded.has(category)) {
            newExpanded.delete(category);
        }
        else {
            newExpanded.add(category);
        }
        setExpandedCategories(newExpanded);
    };
    // Get entityId from URL (both path param and query param)
    const urlParams = new URLSearchParams(window.location.search);
    const entityId = params[entityIdParam] || urlParams.get(entityIdParam);
    // Get current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Get entity info based on type
    const entityApiPath = type === 'building' ? '/api/manager/buildings' : '/api/residences';
    const { data: entity, isError: entityError, error } = (0, react_query_1.useQuery)({
        queryKey: [entityApiPath, entityId],
        queryFn: async () => {
            if (type === 'residence') {
                const response = await fetch(`/api/residences/${entityId}`, {
                    credentials: 'include',
                });
                if (!response.ok) {
                    if (response.status === 404) {
                        throw new Error('ENTITY_NOT_FOUND');
                    }
                    throw new Error(`Failed to fetch ${type}`);
                }
                return response.json();
            }
            else {
                return (0, queryClient_1.apiRequest)('GET', `${entityApiPath}/${entityId}`);
            }
        },
        enabled: !!entityId,
        retry: false, // Don't retry on 404s
    });
    // Fetch documents for this entity
    const { data: documentResponse, isLoading, error: documentsError } = (0, react_query_1.useQuery)({
        queryKey: ['/api/documents', type, entityId],
        queryFn: async () => {
            const param = type === 'building' ? 'buildingId' : 'residenceId';
            const response = await (0, queryClient_1.apiRequest)('GET', `/api/documents?${param}=${entityId}`);
            return response.json();
        },
        enabled: !!entityId,
        staleTime: 0, // Always refetch
        cacheTime: 0, // Don't cache
    });
    // Extract documents array from API response
    const documents = Array.isArray(documentResponse?.documents) ? documentResponse.documents : [];
    // Determine permissions based on user role and type
    const isUserTenant = user?.role === 'tenant';
    const isManager = user?.role === 'manager' || user?.role === 'admin';
    const userPermissions = userRole === 'manager'
        ? {
            canView: true,
            canDownload: true,
            canEdit: isManager,
            canDelete: isManager,
            canCreate: isManager,
        }
        : {
            canView: true,
            canDownload: !isUserTenant,
            canEdit: !isUserTenant,
            canDelete: !isUserTenant,
            canCreate: !isUserTenant,
        };
    // Filter and search documents
    const filteredDocuments = Array.isArray(documents) ? documents.filter(doc => {
        const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            doc.description?.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = selectedCategory === 'all' || doc.category === selectedCategory || doc.documentType === selectedCategory;
        return matchesSearch && matchesCategory;
    }) : [];
    // Group documents by category
    const groupedDocuments = filteredDocuments.reduce((groups, doc) => {
        const category = doc.category || doc.documentType || 'other';
        if (!groups[category]) {
            groups[category] = [];
        }
        groups[category].push(doc);
        return groups;
    }, {});
    // Get category display name
    const getCategoryDisplayName = (category) => {
        const categoryLabels = {
            bylaw: 'Bylaws',
            financial: 'Financial Documents',
            maintenance: 'Maintenance Records',
            legal: 'Legal Documents',
            meeting_minutes: 'Meeting Minutes',
            insurance: 'Insurance Documents',
            contracts: 'Contracts',
            permits: 'Permits',
            inspection: 'Inspection Reports',
            other: 'Other Documents',
        };
        return categoryLabels[category] || category.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
    };
    // Generate entity name based on type
    const entityName = type === 'residence'
        ? (entity?.unitNumber || entity?.unit_number ? `Unit ${entity.unitNumber || entity.unit_number}` : 'Residence')
        : entity?.name;
    const defaultBackLabel = backLabel || (type === 'building' ? 'Back to Buildings' : t('backToResidences'));
    // State for document view and edit dialogs
    const [selectedDocumentId, setSelectedDocumentId] = (0, react_1.useState)(null);
    const [isViewDialogOpen, setIsViewDialogOpen] = (0, react_1.useState)(false);
    const [isEditDialogOpen, setIsEditDialogOpen] = (0, react_1.useState)(false);
    // Handle document interactions
    const handleDocumentView = (documentId) => {
        setSelectedDocumentId(documentId);
        setIsViewDialogOpen(true);
    };
    const handleDocumentEdit = (documentId) => {
        setSelectedDocumentId(documentId);
        setIsEditDialogOpen(true);
    };
    const handleCreateDocument = () => {
        setIsCreateDialogOpen(true);
    };
    const handleDocumentSuccess = (documentId) => {
        console.log(`Document created:`, documentId);
        // Refresh documents list will be handled by the DocumentCreateForm's cache invalidation
    };
    const clearFilters = () => {
        setSearchTerm('');
        setSelectedCategory('all');
    };
    if (!entityId) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex flex-col overflow-hidden", children: (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("p", { className: "text-gray-500 mb-4", children: [type, " ID is required"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: () => navigate(backPath), "data-testid": "button-back-to-list", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), defaultBackLabel] })] }) }) }));
    }
    // Handle entity not found (specific to residence pages that had this logic)
    if (entityError && error?.message === 'ENTITY_NOT_FOUND' && type === 'residence') {
        return ((0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex flex-col overflow-hidden", children: (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center max-w-md", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-semibold mb-4", children: "Residence Not Found" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-gray-500 mb-4", children: ["The residence ID \"", entityId, "\" doesn't exist in the development database."] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-400 mb-6", children: "This might be a production database ID. Please use a valid development residence ID." }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "default", onClick: () => navigate(backPath), "data-testid": "button-back-to-list", className: "w-full", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), backLabel || 'Back to Residences'] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: () => navigate('/residents/residences/e27ac924-8120-4904-a791-d1e9db544d58/documents'), "data-testid": "button-go-to-valid-residence", className: "w-full", children: "Go to Unit 101 (Test Residence)" })] })] }) }) }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden", children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: entityName, subtitle: type === 'building' ? 'Building Documents' : 'Residence Documents' }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 overflow-auto p-6", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-7xl mx-auto space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: () => navigate(backPath), "data-testid": "button-back", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), defaultBackLabel] }), (0, jsx_runtime_1.jsx)("div", {})] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: "w-5 h-5" }), "Search & Filters"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium", children: "Search" }), (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Search documents...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "pl-10", "data-testid": "input-search-documents" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium", children: "Category" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedCategory, onValueChange: setSelectedCategory, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-category-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "All Categories" }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: DOCUMENT_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium", children: "View & Actions" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex gap-1", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: viewMode === 'grid' ? 'default' : 'outline', size: "sm", onClick: () => setViewMode('grid'), "data-testid": "button-grid-view", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Grid, { className: "w-4 h-4" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: viewMode === 'list' ? 'default' : 'outline', size: "sm", onClick: () => setViewMode('list'), "data-testid": "button-list-view", children: (0, jsx_runtime_1.jsx)(lucide_react_1.List, { className: "w-4 h-4" }) })] }), userPermissions.canCreate && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCreateDocument, size: "sm", "data-testid": "button-create-document", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Create"] })), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: clearFilters, "data-testid": "button-clear-filters", children: "Clear" })] })] })] }) })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex justify-between items-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)("span", { className: "text-sm text-muted-foreground", children: [filteredDocuments.length, " document", filteredDocuments.length !== 1 ? 's' : '', " found"] }), (searchTerm || selectedCategory !== 'all') && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", children: "Filtered" }))] }) }), isLoading ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Loading documents..." })] }) })) : filteredDocuments.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "p-8 text-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-16 h-16 mx-auto mb-4 bg-muted rounded-full flex items-center justify-center", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: "w-8 h-8 text-muted-foreground" }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-600 mb-2", children: "No Documents Found" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500 mb-4", children: searchTerm || selectedCategory !== 'all'
                                                ? "No documents match your current filters. Try adjusting your search criteria."
                                                : `No documents have been uploaded for this ${type} yet. Create your first document to get started.` }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2 justify-center", children: [(searchTerm || selectedCategory !== 'all') && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: clearFilters, children: "Clear Filters" })), userPermissions.canCreate && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCreateDocument, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Create Document"] }))] })] }) }) })) : ((0, jsx_runtime_1.jsx)("div", { className: "space-y-6", children: Object.entries(groupedDocuments).map(([category, categoryDocuments]) => {
                                const isExpanded = expandedCategories.has(category);
                                return ((0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: (0, jsx_runtime_1.jsxs)(collapsible_1.Collapsible, { open: isExpanded, onOpenChange: () => toggleCategory(category), children: [(0, jsx_runtime_1.jsxs)(collapsible_1.CollapsibleTrigger, { className: "flex items-center gap-2 p-2 w-full text-left hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg transition-colors", children: [isExpanded ? ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: "h-4 w-4" })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: "h-4 w-4" })), (0, jsx_runtime_1.jsx)("span", { className: "text-lg font-semibold", children: getCategoryDisplayName(category) }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: "ml-2", children: categoryDocuments.length })] }), (0, jsx_runtime_1.jsx)(collapsible_1.CollapsibleContent, { className: "space-y-3", children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "pt-6", children: (0, jsx_runtime_1.jsx)("div", { className: `grid gap-4 ${viewMode === 'grid'
                                                                ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
                                                                : 'grid-cols-1'}`, children: categoryDocuments.map((document) => ((0, jsx_runtime_1.jsx)(document_management_1.DocumentCard, { documentId: document.id, title: document.name, documentType: document.category || document.documentType, createdAt: document.createdAt, onViewClick: handleDocumentView, compact: viewMode === 'list' }, document.id))) }) }) }) })] }) }, category));
                            }) })), (0, jsx_runtime_1.jsx)(DocumentCreateForm_1.DocumentCreateForm, { isOpen: isCreateDialogOpen, onClose: () => setIsCreateDialogOpen(false), onSuccess: handleDocumentSuccess, entityType: type, entityId: entityId, entityName: entityName }), selectedDocumentId && ((0, jsx_runtime_1.jsx)(DocumentViewDialog, { documentId: selectedDocumentId, isOpen: isViewDialogOpen, onClose: () => {
                                setIsViewDialogOpen(false);
                                setSelectedDocumentId(null);
                            }, onEdit: () => {
                                setIsViewDialogOpen(false);
                                setIsEditDialogOpen(true);
                            }, canEdit: userPermissions.canEdit })), selectedDocumentId && ((0, jsx_runtime_1.jsx)(DocumentEditDialog, { documentId: selectedDocumentId, isOpen: isEditDialogOpen, onClose: () => {
                                setIsEditDialogOpen(false);
                                setSelectedDocumentId(null);
                            }, onSuccess: () => {
                                setIsEditDialogOpen(false);
                                setSelectedDocumentId(null);
                                // Refresh documents list
                                queryClient_1.queryClient.invalidateQueries({
                                    queryKey: ['/api/documents', type, entityId],
                                });
                            } }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,