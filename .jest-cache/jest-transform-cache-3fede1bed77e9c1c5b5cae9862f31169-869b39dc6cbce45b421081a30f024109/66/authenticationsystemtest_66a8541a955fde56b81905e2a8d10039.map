{"file":"/home/runner/workspace/tests/integration/authentication-system.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/authentication-system.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport { db } from '../../server/db';\nimport { users } from '../../shared/schema';\nimport { eq, count } from 'drizzle-orm';\nimport * as bcrypt from 'bcryptjs';\n\n/**\n * Authentication System Integration Test\n * \n * This test ensures the authentication system works end-to-end and catches\n * critical issues like:\n * - Missing users in database  \n * - Login endpoint failures\n * - Session management problems\n * - Demo user accessibility issues\n */\n\ndescribe('Authentication System', () => {\n  const testUser = {\n    username: 'isolated-auth-test',\n    email: 'isolated-auth-test@test-only.com',\n    password: 'test123',\n    firstName: 'Isolated',\n    lastName: 'AuthTest',\n    role: 'manager' as const,\n    language: 'en',\n    isActive: true\n  };\n\n  beforeAll(async () => {\n    // Clean up any existing test user\n    await db.delete(users).where(eq(users.email, testUser.email));\n    \n    // Create test user with proper bcrypt hash\n    const hashedPassword = await bcrypt.hash(testUser.password, 10);\n    \n    await db.insert(users).values({\n      username: testUser.username,\n      email: testUser.email,\n      password: hashedPassword,\n      firstName: testUser.firstName,\n      lastName: testUser.lastName,\n      role: testUser.role,\n      language: testUser.language,\n      isActive: testUser.isActive\n    });\n  });\n\n  afterAll(async () => {\n    // Clean up test user\n    await db.delete(users).where(eq(users.email, testUser.email));\n  });\n\n  describe('Database User Existence', () => {\n    it('should have at least one active user in the database', async () => {\n      const userCount = await db\n        .select({ count: count() })\n        .from(users)\n        .where(eq(users.isActive, true))\n        .then(result => result[0]?.count || 0);\n\n      expect(userCount).toBeGreaterThan(0);\n    });\n\n    it('should find created test user in database', async () => {\n      const user = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testUser.email))\n        .then(results => results[0]);\n\n      expect(user).toBeDefined();\n      expect(user.email).toBe(testUser.email);\n      expect(user.isActive).toBe(true);\n      expect(user.role).toBe(testUser.role);\n    });\n  });\n\n  describe('Authentication Endpoints', () => {\n    it('should reject login with invalid credentials', async () => {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: testUser.email,\n          password: 'wrongpassword'\n        })\n      });\n\n      expect(response.status).toBe(401);\n      \n      const data = await response.json();\n      expect(data.code).toBe('INVALID_CREDENTIALS');\n    });\n\n    it('should accept login with valid credentials', async () => {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: testUser.email,\n          password: testUser.password\n        })\n      });\n\n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data.message).toBe('Login successful');\n      expect(data.user).toBeDefined();\n      expect(data.user.email).toBe(testUser.email);\n      expect(data.user.password).toBeUndefined(); // Password should not be returned\n    });\n\n    it('should handle missing credentials', async () => {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: testUser.email\n          // Missing password\n        })\n      });\n\n      expect(response.status).toBe(400);\n      \n      const data = await response.json();\n      expect(data.code).toBe('MISSING_CREDENTIALS');\n    });\n\n    it('should return 401 for user endpoint without authentication', async () => {\n      const response = await fetch('http://localhost:5000/api/auth/user');\n\n      expect(response.status).toBe(401);\n      \n      const data = await response.json();\n      expect(data.code).toBe('NOT_AUTHENTICATED');\n    });\n  });\n\n  describe('Demo User Issues', () => {\n    it('should not have any demo users in database', async () => {\n      const demoUsers = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, 'demo@koveo.com'));\n\n      expect(demoUsers).toHaveLength(0);\n    });\n\n    it('should fail login for non-existent demo users', async () => {\n      const demoEmails = [\n        'demo@koveo.com',\n        'marc.gauthier@demo.com', \n        'sophie.tremblay@demo.com'\n      ];\n\n      for (const email of demoEmails) {\n        const response = await fetch('http://localhost:5000/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: email,\n            password: 'demo123'\n          })\n        });\n\n        expect(response.status).toBe(401);\n        \n        const data = await response.json();\n        expect(data.code).toBe('INVALID_CREDENTIALS');\n      }\n    });\n  });\n\n  describe('Password Security', () => {\n    it('should properly hash passwords', async () => {\n      const user = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testUser.email))\n        .then(results => results[0]);\n\n      expect(user.password).toBeDefined();\n      expect(user.password).not.toBe(testUser.password); // Should be hashed\n      expect(user.password.startsWith('$2')).toBe(true); // bcrypt hash format\n    });\n\n    it('should verify password correctly', async () => {\n      const user = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testUser.email))\n        .then(results => results[0]);\n\n      const isValid = await bcrypt.compare(testUser.password, user.password);\n      expect(isValid).toBe(true);\n\n      const isInvalid = await bcrypt.compare('wrongpassword', user.password);\n      expect(isInvalid).toBe(false);\n    });\n  });\n\n  describe('Critical Authentication Issues', () => {\n    it('should detect if no users exist in system', async () => {\n      const totalUsers = await db\n        .select({ count: count() })\n        .from(users)\n        .then(result => result[0]?.count || 0);\n\n      // This test will fail if the database has no users, alerting us to the issue\n      expect(totalUsers).toBeGreaterThan(0);\n      \n      if (totalUsers === 0) {\n        throw new Error('CRITICAL: No users found in database. Authentication system unusable.');\n      }\n    });\n\n    it('should ensure authentication endpoints are accessible', async () => {\n      // Test that endpoints exist and respond (not 404)\n      const endpoints = [\n        'http://localhost:5000/api/auth/login',\n        'http://localhost:5000/api/auth/user'\n      ];\n\n      for (const endpoint of endpoints) {\n        const response = await fetch(endpoint, {\n          method: endpoint.includes('login') ? 'POST' : 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          ...(endpoint.includes('login') && {\n            body: JSON.stringify({ email: 'test', password: 'test' })\n          })\n        });\n\n        // Should not return 404 (endpoint exists)\n        expect(response.status).not.toBe(404);\n        \n        // Should return JSON response (API working)\n        const contentType = response.headers.get('content-type');\n        expect(contentType).toContain('application/json');\n      }\n    });\n  });\n});"],"version":3}