d8a734967afb0f5dccd16ac7fe2d1905
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerPermissionsRoutes = registerPermissionsRoutes;
// Database-based permissions system - no config files needed
const auth_1 = require("../auth");
const storage_1 = require("../storage");
/**
 * Transform a permission string into a structured permission object.
 * @param permission - Permission string in format "action:resource".
 * @returns Structured permission object with metadata.
 */
/**
 * TransformPermission function.
 * @param permission
 * @returns Function result.
 */
function transformPermission(permission) {
    const [action, resource] = permission.split(':');
    const resourceType = resource.replace(/_/g, ' ');
    // Determine category based on resource type
    let category = 'Other';
    const categoryMap = {
        users: 'User Management',
        organizations: 'Organization Management',
        buildings: 'Building Management',
        residences: 'Residence Management',
        bills: 'Financial Management',
        budgets: 'Financial Management',
        maintenance_requests: 'Maintenance Management',
        documents: 'Document Management',
        notifications: 'Communication',
        features: 'System Features',
        reports: 'Reports & Analytics',
    };
    category = categoryMap[resource] || 'Other';
    return {
        id: permission,
        name: permission,
        displayName: `${action.charAt(0).toUpperCase() + action.slice(1).replace(/_/g, ' ')} ${resourceType.charAt(0).toUpperCase() + resourceType.slice(1)}`,
        description: `Permission to ${action.replace(/_/g, ' ')} ${resourceType} resources`,
        resourceType: resource,
        action: action,
        category: category,
        isActive: true,
        createdAt: new Date().toISOString(),
    };
}
/**
 * Register all RBAC permissions management API routes.
 * @param app - Express application instance.
 */
/**
 * RegisterPermissionsRoutes function.
 * @param app
 * @returns Function result.
 */
function registerPermissionsRoutes(app) {
    // Get all system permissions from database
    app.get('/api/permissions', auth_1.requireAuth, (0, auth_1.authorize)('read:users'), async (req, res) => {
        try {
            const permissions = await storage_1.storage.getPermissions();
            res.json(permissions);
        }
        catch (error) {
            console.error('❌ Error fetching permissions:', error);
            res.status(500).json({ message: 'Failed to fetch permissions' });
        }
    });
    // Get role-based permissions from database
    app.get('/api/role-permissions', auth_1.requireAuth, (0, auth_1.authorize)('read:users'), async (req, res) => {
        try {
            const rolePermissions = await storage_1.storage.getRolePermissions();
            res.json(rolePermissions);
        }
        catch (error) {
            console.error('❌ Error fetching role permissions:', error);
            res.status(500).json({ message: 'Failed to fetch role permissions' });
        }
    });
    // Get permissions matrix for admin dashboard
    app.get('/api/permissions-matrix', auth_1.requireAuth, (0, auth_1.authorize)('read:users'), async (req, res) => {
        try {
            const permissions = await storage_1.storage.getPermissions();
            const rolePermissions = await storage_1.storage.getRolePermissions();
            // Group permissions by resource type
            const permissionsByResource = permissions.reduce((acc, permission) => {
                if (!acc[permission.resourceType]) {
                    acc[permission.resourceType] = [];
                }
                acc[permission.resourceType].push(permission);
                return acc;
            }, {});
            // Create role matrix (correct hierarchy: admin-manager-resident-tenant)
            const roleMatrix = ['admin', 'manager', 'resident', 'tenant'].reduce((acc, role) => {
                acc[role] = rolePermissions
                    .filter((rp) => rp.role === role)
                    .map((rp) => rp.permissionId);
                return acc;
            }, {});
            res.json({
                permissionsByResource,
                roleMatrix,
                permissions,
                rolePermissions,
            });
        }
        catch (error) {
            console.error('❌ Error fetching permissions matrix:', error);
            res.status(500).json({ message: 'Failed to fetch permissions matrix' });
        }
    });
    // Get user-specific permissions (overrides)
    app.get('/api/user-permissions', auth_1.requireAuth, (0, auth_1.authorize)('read:users'), async (req, res) => {
        try {
            const userPermissions = await storage_1.storage.getUserPermissions();
            res.json(userPermissions);
        }
        catch (error) {
            console.error('❌ Error fetching user permissions:', error);
            res.status(500).json({ message: 'Failed to fetch user permissions' });
        }
    });
    // Grant permission to user
    app.post('/api/user-permissions', auth_1.requireAuth, (0, auth_1.authorize)('manage_permissions:users'), async (req, res) => {
        try {
            const { userId, permissionId, reason } = req.body;
            if (!userId || !permissionId) {
                return res.status(400).json({
                    message: 'userId and permissionId are required',
                });
            }
            // Validate that the permission exists in database
            const permission = await storage_1.storage
                .getPermissions()
                .then((perms) => perms.find((p) => p.id === permissionId || p.name === permissionId));
            if (!permission) {
                return res.status(400).json({
                    message: 'Invalid permission',
                });
            }
            // TODO: Implement user permission override in database
            // For now, return success but note that this would need database schema changes
            res.status(501).json({
                message: 'User permission overrides not yet implemented',
                note: 'This feature requires additional database schema for user_permission_overrides table',
            });
        }
        catch (error) {
            console.error('❌ Error granting user permission:', error);
            res.status(500).json({ message: 'Failed to grant user permission' });
        }
    });
    // Revoke permission from user
    app.delete('/api/user-permissions/:userId/:permissionId', auth_1.requireAuth, (0, auth_1.authorize)('manage:user_roles'), async (req, res) => {
        try {
            const { userId, permissionId } = req.params;
            // TODO: Implement user permission revocation in database
            res.status(501).json({
                message: 'User permission overrides not yet implemented',
                note: 'This feature requires additional database schema for user_permission_overrides table',
            });
        }
        catch (error) {
            console.error('❌ Error revoking user permission:', error);
            res.status(500).json({ message: 'Failed to revoke user permission' });
        }
    });
    // Update role permissions (admin only)
    app.patch('/api/role-permissions/:role', auth_1.requireAuth, (0, auth_1.authorize)('manage:user_roles'), async (req, res) => {
        try {
            const { role } = req.params;
            const { permissions } = req.body;
            if (!['admin', 'manager', 'tenant', 'resident'].includes(role)) {
                return res.status(400).json({ message: 'Invalid role' });
            }
            if (!Array.isArray(permissions)) {
                return res.status(400).json({ message: 'Permissions must be an array' });
            }
            // TODO: Implement role permission updates
            // This would require updating the permissions.json file or moving to database
            res.status(501).json({
                message: 'Role permission updates not yet implemented',
                note: 'This feature requires implementing a mechanism to update permissions.json or move permissions to database',
            });
        }
        catch (error) {
            console.error('❌ Error updating role permissions:', error);
            res.status(500).json({ message: 'Failed to update role permissions' });
        }
    });
    // Get permission categories for organization
    app.get('/api/permission-categories', auth_1.requireAuth, (0, auth_1.authorize)('read:users'), async (req, res) => {
        try {
            // Generate categories based on database permissions
            const permissions = await storage_1.storage.getPermissions();
            const categoryMap = {};
            permissions.forEach((permission) => {
                const categoryName = {
                    users: 'User Management',
                    organizations: 'Organization Management',
                    buildings: 'Building Management',
                    residences: 'Residence Management',
                    bills: 'Financial Management',
                    budgets: 'Financial Management',
                    maintenance_requests: 'Maintenance Management',
                    documents: 'Document Management',
                    notifications: 'Communication',
                    features: 'System Features',
                    reports: 'Reports & Analytics',
                }[permission.resourceType] || 'Other';
                if (!categoryMap[categoryName]) {
                    categoryMap[categoryName] = [];
                }
                categoryMap[categoryName].push(permission);
            });
            const categories = Object.entries(categoryMap).map(([name, perms]) => ({
                id: name.toLowerCase().replace(/\s+/g, '-'),
                name,
                permissions: perms,
                count: perms.length,
            }));
            res.json(categories);
        }
        catch (error) {
            console.error('❌ Error fetching permission categories:', error);
            res.status(500).json({ message: 'Failed to fetch permission categories' });
        }
    });
    // Validate user has specific permission
    app.post('/api/permissions/validate', auth_1.requireAuth, async (req, res) => {
        try {
            const { permission } = req.body;
            if (!permission) {
                return res.status(400).json({ message: 'Permission is required' });
            }
            // Check permission via database
            const rolePermissions = await storage_1.storage.getRolePermissions();
            const hasPermission = rolePermissions.some((rp) => rp.role === req.user.role && rp.permission && rp.permission.name === permission);
            res.json({
                hasPermission,
                role: req.user.role,
                permission,
                message: hasPermission ? 'Permission granted' : 'Permission denied',
            });
        }
        catch (error) {
            console.error('❌ Error validating permission:', error);
            res.status(500).json({ message: 'Failed to validate permission' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,