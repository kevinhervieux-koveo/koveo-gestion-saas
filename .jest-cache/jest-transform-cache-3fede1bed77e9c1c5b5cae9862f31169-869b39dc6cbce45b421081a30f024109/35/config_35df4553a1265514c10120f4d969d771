2b92c7560787b39132136b4932804506
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.configure = configure;
exports.getConfig = getConfig;
exports.runWithExpensiveErrorDiagnosticsDisabled = runWithExpensiveErrorDiagnosticsDisabled;
var _prettyDom = require("./pretty-dom");
// It would be cleaner for this to live inside './queries', but
// other parts of the code assume that all exports from
// './queries' are query functions.
let config = {
    testIdAttribute: 'data-testid',
    asyncUtilTimeout: 1000,
    // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.
    // forcing react-testing-library to wrap all async functions would've been
    // a total nightmare (consider wrapping every findBy* query and then also
    // updating `within` so those would be wrapped too. Total nightmare).
    // so we have this config option that's really only intended for
    // react-testing-library to use. For that reason, this feature will remain
    // undocumented.
    asyncWrapper: cb => cb(),
    unstable_advanceTimersWrapper: cb => cb(),
    eventWrapper: cb => cb(),
    // default value for the `hidden` option in `ByRole` queries
    defaultHidden: false,
    // default value for the `ignore` option in `ByText` queries
    defaultIgnore: 'script, style',
    // showOriginalStackTrace flag to show the full error stack traces for async errors
    showOriginalStackTrace: false,
    // throw errors w/ suggestions for better queries. Opt in so off by default.
    throwSuggestions: false,
    // called when getBy* queries fail. (message, container) => Error
    getElementError(message, container) {
        const prettifiedDOM = (0, _prettyDom.prettyDOM)(container);
        const error = new Error([message, `Ignored nodes: comments, ${config.defaultIgnore}\n${prettifiedDOM}`].filter(Boolean).join('\n\n'));
        error.name = 'TestingLibraryElementError';
        return error;
    },
    _disableExpensiveErrorDiagnostics: false,
    computedStyleSupportsPseudoElements: false
};
function runWithExpensiveErrorDiagnosticsDisabled(callback) {
    try {
        config._disableExpensiveErrorDiagnostics = true;
        return callback();
    }
    finally {
        config._disableExpensiveErrorDiagnostics = false;
    }
}
function configure(newConfig) {
    if (typeof newConfig === 'function') {
        // Pass the existing config out to the provided function
        // and accept a delta in return
        newConfig = newConfig(config);
    }
    // Merge the incoming config delta
    config = {
        ...config,
        ...newConfig
    };
}
function getConfig() {
    return config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDOUIsT0FBTyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDOUIsT0FBTyxDQUFDLHdDQUF3QyxHQUFHLHdDQUF3QyxDQUFDO0FBQzVGLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN6QywrREFBK0Q7QUFDL0QsdURBQXVEO0FBQ3ZELG1DQUFtQztBQUNuQyxJQUFJLE1BQU0sR0FBRztJQUNYLGVBQWUsRUFBRSxhQUFhO0lBQzlCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsb0ZBQW9GO0lBQ3BGLDBFQUEwRTtJQUMxRSx5RUFBeUU7SUFDekUscUVBQXFFO0lBQ3JFLGdFQUFnRTtJQUNoRSwwRUFBMEU7SUFDMUUsZ0JBQWdCO0lBQ2hCLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN4Qiw2QkFBNkIsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN6QyxZQUFZLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDeEIsNERBQTREO0lBQzVELGFBQWEsRUFBRSxLQUFLO0lBQ3BCLDREQUE0RDtJQUM1RCxhQUFhLEVBQUUsZUFBZTtJQUM5QixtRkFBbUY7SUFDbkYsc0JBQXNCLEVBQUUsS0FBSztJQUM3Qiw0RUFBNEU7SUFDNUUsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixpRUFBaUU7SUFDakUsZUFBZSxDQUFDLE9BQU8sRUFBRSxTQUFTO1FBQ2hDLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMzRCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSw0QkFBNEIsTUFBTSxDQUFDLGFBQWEsS0FBSyxhQUFhLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN0SSxLQUFLLENBQUMsSUFBSSxHQUFHLDRCQUE0QixDQUFDO1FBQzFDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUNELGlDQUFpQyxFQUFFLEtBQUs7SUFDeEMsbUNBQW1DLEVBQUUsS0FBSztDQUMzQyxDQUFDO0FBQ0YsU0FBUyx3Q0FBd0MsQ0FBQyxRQUFRO0lBQ3hELElBQUksQ0FBQztRQUNILE1BQU0sQ0FBQyxpQ0FBaUMsR0FBRyxJQUFJLENBQUM7UUFDaEQsT0FBTyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO1lBQVMsQ0FBQztRQUNULE1BQU0sQ0FBQyxpQ0FBaUMsR0FBRyxLQUFLLENBQUM7SUFDbkQsQ0FBQztBQUNILENBQUM7QUFDRCxTQUFTLFNBQVMsQ0FBQyxTQUFTO0lBQzFCLElBQUksT0FBTyxTQUFTLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDcEMsd0RBQXdEO1FBQ3hELCtCQUErQjtRQUMvQixTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxrQ0FBa0M7SUFDbEMsTUFBTSxHQUFHO1FBQ1AsR0FBRyxNQUFNO1FBQ1QsR0FBRyxTQUFTO0tBQ2IsQ0FBQztBQUNKLENBQUM7QUFDRCxTQUFTLFNBQVM7SUFDaEIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L2NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY29uZmlndXJlID0gY29uZmlndXJlO1xuZXhwb3J0cy5nZXRDb25maWcgPSBnZXRDb25maWc7XG5leHBvcnRzLnJ1bldpdGhFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzRGlzYWJsZWQgPSBydW5XaXRoRXhwZW5zaXZlRXJyb3JEaWFnbm9zdGljc0Rpc2FibGVkO1xudmFyIF9wcmV0dHlEb20gPSByZXF1aXJlKFwiLi9wcmV0dHktZG9tXCIpO1xuLy8gSXQgd291bGQgYmUgY2xlYW5lciBmb3IgdGhpcyB0byBsaXZlIGluc2lkZSAnLi9xdWVyaWVzJywgYnV0XG4vLyBvdGhlciBwYXJ0cyBvZiB0aGUgY29kZSBhc3N1bWUgdGhhdCBhbGwgZXhwb3J0cyBmcm9tXG4vLyAnLi9xdWVyaWVzJyBhcmUgcXVlcnkgZnVuY3Rpb25zLlxubGV0IGNvbmZpZyA9IHtcbiAgdGVzdElkQXR0cmlidXRlOiAnZGF0YS10ZXN0aWQnLFxuICBhc3luY1V0aWxUaW1lb3V0OiAxMDAwLFxuICAvLyBhc3luY1dyYXBwZXIgYW5kIGFkdmFuY2VUaW1lcnNXcmFwcGVyIGlzIHRvIHN1cHBvcnQgUmVhY3QncyBhc3luYyBgYWN0YCBmdW5jdGlvbi5cbiAgLy8gZm9yY2luZyByZWFjdC10ZXN0aW5nLWxpYnJhcnkgdG8gd3JhcCBhbGwgYXN5bmMgZnVuY3Rpb25zIHdvdWxkJ3ZlIGJlZW5cbiAgLy8gYSB0b3RhbCBuaWdodG1hcmUgKGNvbnNpZGVyIHdyYXBwaW5nIGV2ZXJ5IGZpbmRCeSogcXVlcnkgYW5kIHRoZW4gYWxzb1xuICAvLyB1cGRhdGluZyBgd2l0aGluYCBzbyB0aG9zZSB3b3VsZCBiZSB3cmFwcGVkIHRvby4gVG90YWwgbmlnaHRtYXJlKS5cbiAgLy8gc28gd2UgaGF2ZSB0aGlzIGNvbmZpZyBvcHRpb24gdGhhdCdzIHJlYWxseSBvbmx5IGludGVuZGVkIGZvclxuICAvLyByZWFjdC10ZXN0aW5nLWxpYnJhcnkgdG8gdXNlLiBGb3IgdGhhdCByZWFzb24sIHRoaXMgZmVhdHVyZSB3aWxsIHJlbWFpblxuICAvLyB1bmRvY3VtZW50ZWQuXG4gIGFzeW5jV3JhcHBlcjogY2IgPT4gY2IoKSxcbiAgdW5zdGFibGVfYWR2YW5jZVRpbWVyc1dyYXBwZXI6IGNiID0+IGNiKCksXG4gIGV2ZW50V3JhcHBlcjogY2IgPT4gY2IoKSxcbiAgLy8gZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGBoaWRkZW5gIG9wdGlvbiBpbiBgQnlSb2xlYCBxdWVyaWVzXG4gIGRlZmF1bHRIaWRkZW46IGZhbHNlLFxuICAvLyBkZWZhdWx0IHZhbHVlIGZvciB0aGUgYGlnbm9yZWAgb3B0aW9uIGluIGBCeVRleHRgIHF1ZXJpZXNcbiAgZGVmYXVsdElnbm9yZTogJ3NjcmlwdCwgc3R5bGUnLFxuICAvLyBzaG93T3JpZ2luYWxTdGFja1RyYWNlIGZsYWcgdG8gc2hvdyB0aGUgZnVsbCBlcnJvciBzdGFjayB0cmFjZXMgZm9yIGFzeW5jIGVycm9yc1xuICBzaG93T3JpZ2luYWxTdGFja1RyYWNlOiBmYWxzZSxcbiAgLy8gdGhyb3cgZXJyb3JzIHcvIHN1Z2dlc3Rpb25zIGZvciBiZXR0ZXIgcXVlcmllcy4gT3B0IGluIHNvIG9mZiBieSBkZWZhdWx0LlxuICB0aHJvd1N1Z2dlc3Rpb25zOiBmYWxzZSxcbiAgLy8gY2FsbGVkIHdoZW4gZ2V0QnkqIHF1ZXJpZXMgZmFpbC4gKG1lc3NhZ2UsIGNvbnRhaW5lcikgPT4gRXJyb3JcbiAgZ2V0RWxlbWVudEVycm9yKG1lc3NhZ2UsIGNvbnRhaW5lcikge1xuICAgIGNvbnN0IHByZXR0aWZpZWRET00gPSAoMCwgX3ByZXR0eURvbS5wcmV0dHlET00pKGNvbnRhaW5lcik7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoW21lc3NhZ2UsIGBJZ25vcmVkIG5vZGVzOiBjb21tZW50cywgJHtjb25maWcuZGVmYXVsdElnbm9yZX1cXG4ke3ByZXR0aWZpZWRET019YF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcblxcbicpKTtcbiAgICBlcnJvci5uYW1lID0gJ1Rlc3RpbmdMaWJyYXJ5RWxlbWVudEVycm9yJztcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0sXG4gIF9kaXNhYmxlRXhwZW5zaXZlRXJyb3JEaWFnbm9zdGljczogZmFsc2UsXG4gIGNvbXB1dGVkU3R5bGVTdXBwb3J0c1BzZXVkb0VsZW1lbnRzOiBmYWxzZVxufTtcbmZ1bmN0aW9uIHJ1bldpdGhFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzRGlzYWJsZWQoY2FsbGJhY2spIHtcbiAgdHJ5IHtcbiAgICBjb25maWcuX2Rpc2FibGVFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzID0gdHJ1ZTtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjb25maWcuX2Rpc2FibGVFeHBlbnNpdmVFcnJvckRpYWdub3N0aWNzID0gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbmZpZ3VyZShuZXdDb25maWcpIHtcbiAgaWYgKHR5cGVvZiBuZXdDb25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBQYXNzIHRoZSBleGlzdGluZyBjb25maWcgb3V0IHRvIHRoZSBwcm92aWRlZCBmdW5jdGlvblxuICAgIC8vIGFuZCBhY2NlcHQgYSBkZWx0YSBpbiByZXR1cm5cbiAgICBuZXdDb25maWcgPSBuZXdDb25maWcoY29uZmlnKTtcbiAgfVxuXG4gIC8vIE1lcmdlIHRoZSBpbmNvbWluZyBjb25maWcgZGVsdGFcbiAgY29uZmlnID0ge1xuICAgIC4uLmNvbmZpZyxcbiAgICAuLi5uZXdDb25maWdcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgcmV0dXJuIGNvbmZpZztcbn0iXSwidmVyc2lvbiI6M30=