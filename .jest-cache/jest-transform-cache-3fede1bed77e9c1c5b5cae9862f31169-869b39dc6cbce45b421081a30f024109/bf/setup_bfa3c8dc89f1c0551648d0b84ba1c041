e3299d643dd60793f677d878f33728c9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Import jest-dom matchers for React Testing Library
require("@testing-library/jest-dom");
// React 19 compatibility - configure React testing environment
const react_1 = require("@testing-library/react");
(0, react_1.configure)({
    // React 19 uses concurrent rendering by default
    // Adjust testing library to work better with React 19's concurrent features
    asyncUtilTimeout: 10000,
    // Make testing more stable
    testIdAttribute: 'data-testid',
});
// MSW Server setup - try different import methods for better compatibility
let server;
try {
    // Try different import methods for MSW server
    try {
        const mswModule = require('./mocks/server');
        server = mswModule.server;
    }
    catch (requireError) {
        // MSW server not available - tests will run without API mocking
        console.warn('MSW server setup skipped, tests will run without API mocking');
    }
}
catch (_error) {
    console.warn('MSW server setup failed, tests will run without API mocking');
}
(0, globals_1.beforeAll)(() => {
    server?.listen();
});
(0, globals_1.afterEach)(() => {
    server?.resetHandlers();
});
(0, globals_1.afterAll)(() => {
    server?.close();
});
// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: globals_1.jest.fn().mockImplementation((query) => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: globals_1.jest.fn(), // deprecated
        removeListener: globals_1.jest.fn(), // deprecated
        addEventListener: globals_1.jest.fn(),
        removeEventListener: globals_1.jest.fn(),
        dispatchEvent: globals_1.jest.fn(),
    })),
});
// Mock ResizeObserver
global.ResizeObserver = globals_1.jest.fn().mockImplementation(() => ({
    observe: globals_1.jest.fn(),
    unobserve: globals_1.jest.fn(),
    disconnect: globals_1.jest.fn(),
}));
// Mock IntersectionObserver
global.IntersectionObserver = globals_1.jest.fn().mockImplementation(() => ({
    observe: globals_1.jest.fn(),
    unobserve: globals_1.jest.fn(),
    disconnect: globals_1.jest.fn(),
    root: null,
    rootMargin: '',
    thresholds: [],
}));
// Global test configuration for DOM APIs
Object.defineProperty(global, 'performance', {
    value: {
        now: () => Date.now(),
        mark: () => { },
        measure: () => { },
        getEntriesByName: () => [],
        getEntriesByType: () => [],
    },
    writable: true,
});
// Mock DOM APIs that may be missing in test environment
Object.defineProperty(global, 'File', {
    value: class MockFile {
        constructor(chunks, filename, options) {
            this.name = filename;
            this.size = 0;
            this.type = options?.type || '';
        }
    },
    writable: true,
});
Object.defineProperty(global, 'FormData', {
    value: class MockFormData {
        constructor() {
            this.data = new Map();
        }
        append(name, _value) {
            this.data.set(name, _value);
        }
        get(name) {
            return this.data.get(name);
        }
    },
    writable: true,
});
// Mock Node and Element for DOM testing
Object.defineProperty(global, 'Node', {
    value: {
        ELEMENT_NODE: 1,
        TEXT_NODE: 3,
        COMMENT_NODE: 8,
    },
    writable: true,
});
Object.defineProperty(global, 'Element', {
    value: class MockElement {
        constructor() {
            this.tagName = '';
            this.nodeType = 1;
        }
    },
    writable: true,
});
// Global error handling for tests
global.error = globals_1.jest.fn();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,