6288b4bbdff4d68bdbab8c002e9e380e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PillarFramework = PillarFramework;
const jsx_runtime_1 = require("react/jsx-runtime");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const progress_1 = require("@/components/ui/progress");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const react_query_1 = require("@tanstack/react-query");
/**
 * Enhanced Pillar framework component that displays all five core development pillars
 * of the Koveo Gestion methodology with real-time status, metrics, and improvement suggestions.
 * @returns JSX element displaying the comprehensive pillar framework interface.
 */
function PillarFramework() {
    const { t } = (0, use_language_1.useLanguage)();
    // Fetch real-time pillar data and improvement suggestions
    const { data: suggestions, isLoading: suggestionsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/pillars/suggestions'],
        refetchInterval: 30000, // Refresh every 30 seconds for continuous monitoring
    });
    const { data: qualityMetrics } = (0, react_query_1.useQuery)({
        queryKey: ['/api/quality-metrics'],
        refetchInterval: 60000, // Refresh every minute
    });
    // Calculate completion percentages and health scores
    const calculatePillarHealth = (pillarName) => {
        if (!suggestions)
            return { health: 85, suggestions: 0, completedToday: 0 };
        const pillarSuggestions = Array.isArray(suggestions)
            ? suggestions.filter((s) => s.category?.toLowerCase().includes(pillarName.toLowerCase()))
            : [];
        const completedSuggestions = pillarSuggestions.filter((s) => s.status === 'Done');
        return {
            health: pillarSuggestions.length > 0
                ? Math.round((completedSuggestions.length / pillarSuggestions.length) * 100)
                : 85,
            suggestions: pillarSuggestions.length,
            completedToday: completedSuggestions.filter((s) => {
                const completedDate = new Date(s.completedAt || s.updatedAt);
                const today = new Date();
                return completedDate.toDateString() === today.toDateString();
            }).length,
        };
    };
    // Enhanced pillar configuration with all 5 pillars and real-time data
    const pillars = [
        {
            id: 1,
            title: t('validationQAPillar') || 'Validation & QA',
            description: t('coreQualityAssurance') || 'Core quality assurance and validation framework',
            status: 'in-progress',
            statusText: t('inProgress') || 'In Progress',
            icon: lucide_react_1.CheckCircle2,
            bgColor: 'bg-blue-50 dark:bg-blue-950',
            borderColor: 'border-blue-200 dark:border-blue-800',
            iconColor: 'text-blue-600 dark:text-blue-400',
            statusColor: 'text-orange-600 dark:text-orange-400',
            ...calculatePillarHealth('Quality'),
        },
        {
            id: 2,
            title: t('testingPillar') || 'Testing Framework',
            description: t('automatedTestingFramework') || 'Automated testing and validation system',
            status: 'in-progress',
            statusText: t('inProgress') || 'In Progress',
            icon: lucide_react_1.TestTube,
            bgColor: 'bg-green-50 dark:bg-green-950',
            borderColor: 'border-green-200 dark:border-green-800',
            iconColor: 'text-green-600 dark:text-green-400',
            statusColor: 'text-orange-600 dark:text-orange-400',
            ...calculatePillarHealth('Testing'),
        },
        {
            id: 3,
            title: t('securityPillar') || 'Security & Compliance',
            description: t('law25ComplianceFramework') || 'Quebec Law 25 compliance and security framework',
            status: 'in-progress',
            statusText: t('inProgress') || 'In Progress',
            icon: lucide_react_1.Shield,
            bgColor: 'bg-purple-50 dark:bg-purple-950',
            borderColor: 'border-purple-200 dark:border-purple-800',
            iconColor: 'text-purple-600 dark:text-purple-400',
            statusColor: 'text-orange-600 dark:text-orange-400',
            ...calculatePillarHealth('Security'),
        },
        {
            id: 4,
            title: t('continuousImprovementPillar') || 'Continuous Improvement',
            description: t('continuousImprovementDescription') ||
                'AI-driven metrics, analytics, and automated improvement suggestions',
            status: 'active',
            statusText: t('activePillar') || 'Active',
            icon: lucide_react_1.TrendingUp,
            bgColor: 'bg-indigo-50 dark:bg-indigo-950',
            borderColor: 'border-indigo-200 dark:border-indigo-800',
            iconColor: 'text-indigo-600 dark:text-indigo-400',
            statusColor: 'text-green-600 dark:text-green-400',
            ...calculatePillarHealth('Continuous Improvement'),
        },
        {
            id: 5,
            title: t('documentationPillar') || 'Documentation & Knowledge',
            description: t('documentationDescription') ||
                'Comprehensive documentation and knowledge management system',
            status: 'in-progress',
            statusText: t('inProgress') || 'In Progress',
            icon: lucide_react_1.FileText,
            bgColor: 'bg-amber-50 dark:bg-amber-950',
            borderColor: 'border-amber-200 dark:border-amber-800',
            iconColor: 'text-amber-600 dark:text-amber-400',
            statusColor: 'text-orange-600 dark:text-orange-400',
            ...calculatePillarHealth('Documentation'),
        },
    ];
    const overallHealth = Math.round(pillars.reduce((acc, pillar) => acc + pillar.health, 0) / pillars.length);
    const totalSuggestions = pillars.reduce((acc, pillar) => acc + pillar.suggestions, 0);
    const completedToday = pillars.reduce((acc, pillar) => acc + pillar.completedToday, 0);
    if (suggestionsLoading) {
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Columns, { className: 'text-koveo-navy', size: 20 }), t('pillarMethodology') || 'Pillar Methodology'] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: 'animate-pulse space-y-4', children: [1, 2, 3, 4, 5].map((i) => ((0, jsx_runtime_1.jsx)("div", { className: 'h-16 bg-gray-200 dark:bg-gray-700 rounded-lg' }, i))) }) })] }));
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Columns, { className: 'text-koveo-navy', size: 20 }), t('pillarMethodology') || 'Pillar Methodology Framework'] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: overallHealth >= 80 ? 'default' : overallHealth >= 60 ? 'secondary' : 'destructive', children: [overallHealth, "% Health"] })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-4 mb-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'bg-blue-50 dark:bg-blue-950 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.TrendingUp, { className: 'text-blue-600 dark:text-blue-400', size: 16 }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-blue-900 dark:text-blue-100', children: "System Health" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-2xl font-bold text-blue-600 dark:text-blue-400', children: [overallHealth, "%"] }), (0, jsx_runtime_1.jsx)(progress_1.Progress, { value: overallHealth, className: 'mt-2' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-green-50 dark:bg-green-950 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle2, { className: 'text-green-600 dark:text-green-400', size: 16 }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-green-900 dark:text-green-100', children: "Completed Today" })] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-green-600 dark:text-green-400', children: completedToday })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-purple-50 dark:bg-purple-950 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: 'text-purple-600 dark:text-purple-400', size: 16 }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-purple-900 dark:text-purple-100', children: "Active Suggestions" })] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-purple-600 dark:text-purple-400', children: totalSuggestions })] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-4', children: pillars.map((pillar) => {
                                const Icon = pillar.icon;
                                return ((0, jsx_runtime_1.jsxs)("div", { className: `${pillar.bgColor} border ${pillar.borderColor} rounded-lg p-4 transition-all hover:shadow-md`, "data-testid": `pillar-card-${pillar.id}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between mb-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(Icon, { className: pillar.iconColor, size: 20 }), (0, jsx_runtime_1.jsxs)("span", { className: 'font-bold text-gray-500 dark:text-gray-400', children: ["#", pillar.id] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: 'font-semibold text-gray-900 dark:text-gray-100', children: pillar.title }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 dark:text-gray-400', children: pillar.description })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-right', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { className: pillar.statusColor, children: pillar.statusText }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-gray-500 dark:text-gray-400 mt-1', children: [pillar.health, "% healthy"] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex-1 mr-4', children: (0, jsx_runtime_1.jsx)(progress_1.Progress, { value: pillar.health, className: 'h-2' }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { size: 14 }), pillar.suggestions, " suggestions"] }), pillar.completedToday > 0 && ((0, jsx_runtime_1.jsxs)("span", { className: 'flex items-center gap-1 text-green-600 dark:text-green-400', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle2, { size: 14 }), pillar.completedToday, " completed today"] }))] })] })] }, pillar.id));
                            }) })] })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,