614f21f010c95e52dae685a248f61708
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DemandDetailsPopup;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const dialog_1 = require("@/components/ui/dialog");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const label_1 = require("@/components/ui/label");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const form_1 = require("@/components/ui/form");
const card_1 = require("@/components/ui/card");
const separator_1 = require("@/components/ui/separator");
const lucide_react_1 = require("lucide-react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
// Form schemas
const editDemandSchema = zod_2.z.object({
    type: zod_2.z.enum(['maintenance', 'complaint', 'information', 'other']),
    description: zod_2.z.string().min(10, 'Description must be at least 10 characters long (example: Faucet in kitchen sink is leaking and needs repair)').max(2000, 'Description must be less than 2000 characters'),
    status: zod_2.z
        .enum([
        'submitted',
        'under_review',
        'approved',
        'rejected',
        'in_progress',
        'completed',
        'cancelled',
    ])
        .optional(),
    reviewNotes: zod_2.z.string().max(1000, 'Review notes must be less than 1000 characters').optional(),
});
const _commentSchema = zod_2.z.object({
    comment: zod_2.z.string().min(1, 'Comment text is required (minimum 1 character)').max(1000, 'Comment must be less than 1000 characters'),
});
const statusColors = {
    submitted: 'bg-blue-100 text-blue-800',
    under_review: 'bg-yellow-100 text-yellow-800',
    approved: 'bg-green-100 text-green-800',
    rejected: 'bg-red-100 text-red-800',
    in_progress: 'bg-purple-100 text-purple-800',
    completed: 'bg-emerald-100 text-emerald-800',
    cancelled: 'bg-gray-100 text-gray-800',
};
const typeLabels = {
    maintenance: 'Maintenance',
    complaint: 'Complaint',
    information: 'Information',
    other: 'Other',
};
const statusLabels = {
    submitted: 'Submitted',
    under_review: 'Under Review',
    approved: 'Approved',
    rejected: 'Rejected',
    in_progress: 'In Progress',
    completed: 'Completed',
    cancelled: 'Cancelled',
};
/**
 * Displays detailed information about a demand in a popup dialog with edit functionality.
 *
 * @param root0 - The props object.
 * @param root0.demand - The demand object to display.
 * @param root0.isOpen - Whether the popup is open.
 * @param root0.onClose - Function to close the popup.
 * @param root0.user - The current user object.
 * @param root0.onDemandUpdated - Callback when demand is updated.
 * @returns JSX element for the demand details popup.
 */
function DemandDetailsPopup({ demand, isOpen, onClose, user, onDemandUpdated, }) {
    const { toast } = (0, use_toast_1.useToast)();
    const [isEditing, setIsEditing] = (0, react_1.useState)(false);
    const [newComment, setNewComment] = (0, react_1.useState)('');
    // Check permissions
    // Nobody can edit demands (as requested)
    const canEdit = false;
    const canDelete = demand &&
        user &&
        (user.role === 'admin' ||
            user.role === 'manager');
    const canChangeStatus = demand &&
        user &&
        (user.role === 'admin' ||
            user.role === 'manager');
    const canEscalate = demand &&
        user &&
        user.role === 'resident' &&
        demand.submitterId !== user.id &&
        !['completed', 'cancelled'].includes(demand.status);
    // Fetch comments
    const { data: comments = [], refetch: refetchComments } = (0, react_query_1.useQuery)({
        queryKey: ['/api/demands', demand?.id, 'comments'],
        enabled: !!demand?.id && isOpen,
    });
    // Edit form
    const editForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(editDemandSchema),
        defaultValues: {
            type: demand?.type || 'maintenance',
            description: demand?.description || '',
            status: demand?.status || 'submitted',
            reviewNotes: demand?.reviewNotes || '',
        },
    });
    // Update demand mutation
    const updateDemandMutation = (0, react_query_1.useMutation)({
        mutationFn: async (demandData) => {
            const response = await fetch(`/api/demands/${demand?.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(demandData),
            });
            if (!response.ok) {
                throw new Error('Failed to update demand');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/demands'] });
            setIsEditing(false);
            onDemandUpdated?.();
            toast({
                title: 'Success',
                description: 'Demand updated successfully',
            });
        },
        onError: () => {
            toast({
                title: 'Error',
                description: 'Failed to update demand',
                variant: 'destructive',
            });
        },
    });
    // Delete demand mutation
    const deleteDemandMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            const response = await fetch(`/api/demands/${demand?.id}`, {
                method: 'DELETE',
            });
            if (!response.ok) {
                throw new Error('Failed to delete demand');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/demands'] });
            onClose();
            onDemandUpdated?.();
            toast({
                title: 'Success',
                description: 'Demand deleted successfully',
            });
        },
        onError: () => {
            toast({
                title: 'Error',
                description: 'Failed to delete demand',
                variant: 'destructive',
            });
        },
    });
    // Add comment mutation
    const addCommentMutation = (0, react_query_1.useMutation)({
        mutationFn: async (comment) => {
            const response = await fetch(`/api/demands/${demand?.id}/comments`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ commentText: comment }),
            });
            if (!response.ok) {
                throw new Error('Failed to add comment');
            }
            return response.json();
        },
        onSuccess: () => {
            refetchComments();
            setNewComment('');
            toast({
                title: 'Success',
                description: 'Comment added successfully',
            });
        },
        onError: () => {
            toast({
                title: 'Error',
                description: 'Failed to add comment',
                variant: 'destructive',
            });
        },
    });
    const handleSave = (_data) => {
        updateDemandMutation.mutate(_data);
    };
    const handleDelete = () => {
        if (window.confirm('Are you sure you want to delete this demand?')) {
            deleteDemandMutation.mutate();
        }
    };
    const handleStatusChange = (newStatus) => {
        if (demand) {
            updateDemandMutation.mutate({
                type: demand.type,
                description: demand.description,
                status: newStatus,
                reviewNotes: demand.reviewNotes,
            });
        }
    };
    const handleEscalate = () => {
        if (demand) {
            updateDemandMutation.mutate({
                type: demand.type,
                description: demand.description,
                status: 'submitted',
                reviewNotes: demand.reviewNotes,
            });
        }
    };
    const handleAddComment = () => {
        if (newComment.trim()) {
            addCommentMutation.mutate(newComment);
        }
    };
    if (!demand) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isOpen, onOpenChange: onClose, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-4xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogTitle, { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsx)("span", { children: "Demand Details" }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [canEdit && !isEditing && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setIsEditing(true), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit2, { className: 'h-4 w-4 mr-1' }), "Edit"] })), canDelete && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handleDelete, disabled: deleteDemandMutation.isPending, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'h-4 w-4 mr-1' }), "Delete"] })), canEscalate && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handleEscalate, disabled: updateDemandMutation.isPending, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowUp, { className: 'h-4 w-4 mr-1' }), "Escalate to Manager"] }))] })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', children: typeLabels[demand.type] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[demand.status], children: statusLabels[demand.status] })] }), canChangeStatus && !isEditing && ((0, jsx_runtime_1.jsxs)(select_1.Select, { value: demand.status, onValueChange: handleStatusChange, disabled: updateDemandMutation.isPending, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: user?.role === 'resident' ? (
                                                        // Residents can only change status to submitted or cancelled
                                                        (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'submitted', children: "Submitted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cancelled', children: "Cancelled" })] })) : (
                                                        // Managers and admins can change to any status (except draft)
                                                        (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'submitted', children: "Submitted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'under_review', children: "Under Review" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'approved', children: "Approved" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'rejected', children: "Rejected" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in_progress', children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'completed', children: "Completed" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cancelled', children: "Cancelled" })] })) })] }))] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'space-y-4', children: isEditing ? ((0, jsx_runtime_1.jsx)(form_1.Form, { ...editForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: editForm.handleSubmit(handleSave), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'type', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Type" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'maintenance', children: "Maintenance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'complaint', children: "Complaint" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'information', children: "Information" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'other', children: "Other" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { className: 'min-h-[120px]', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), user?.role === 'manager' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'reviewNotes', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Review Notes" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: 'Add review notes...', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'submit', disabled: updateDemandMutation.isPending, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: 'h-4 w-4 mr-1' }), updateDemandMutation.isPending ? 'Saving...' : 'Save'] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setIsEditing(false), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: 'h-4 w-4 mr-1' }), "Cancel"] })] })] }) })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: 'mt-1 text-sm whitespace-pre-wrap', children: demand.description })] }), demand.filePath && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'h-4 w-4' }), "File Attachment"] }), (0, jsx_runtime_1.jsx)("div", { className: 'mt-2 space-y-2', children: demand.fileName && (() => {
                                                            const filename = demand.fileName;
                                                            const isImage = /\.(jpg|jpeg|png|gif|webp)$/i.test(filename);
                                                            return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 p-2 bg-gray-50 rounded-md', children: [isImage ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Image, { className: 'h-4 w-4 text-blue-500' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'h-4 w-4 text-gray-500' })), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm flex-1', children: filename }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => window.open(demand.filePath, '_blank'), "data-testid": 'button-view-attachment-0', children: [isImage ? 'View' : 'Download', (0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: 'h-3 w-3 ml-1' })] })] }));
                                                        })() })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4 text-sm', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: "Submitted by" }), (0, jsx_runtime_1.jsxs)("p", { className: 'mt-1', children: [demand.submitter?.firstName, " ", demand.submitter?.lastName, (0, jsx_runtime_1.jsx)("br", {}), (0, jsx_runtime_1.jsx)("span", { className: 'text-muted-foreground', children: demand.submitter?.email })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: "Location" }), (0, jsx_runtime_1.jsxs)("p", { className: 'mt-1', children: [demand.building?.name, demand.residence && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("br", {}), (0, jsx_runtime_1.jsxs)("span", { className: 'text-muted-foreground', children: ["Unit: ", demand.residence.unitNumber] })] }))] })] })] }), demand.reviewNotes && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: "Review Notes" }), (0, jsx_runtime_1.jsx)("p", { className: 'mt-1 text-sm text-muted-foreground whitespace-pre-wrap', children: demand.reviewNotes })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-muted-foreground', children: [(0, jsx_runtime_1.jsxs)("p", { children: ["Created: ", new Date(demand.createdAt).toLocaleString()] }), (0, jsx_runtime_1.jsxs)("p", { children: ["Updated: ", new Date(demand.updatedAt).toLocaleString()] })] })] })) })] }), (0, jsx_runtime_1.jsx)(separator_1.Separator, {}), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("h3", { className: 'font-semibold', children: ["Comments (", comments.length, ")"] }), demand && !['cancelled', 'completed', 'rejected'].includes(demand.status) && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: 'Add a comment...', value: newComment, onChange: (e) => setNewComment(e.target.value), rows: 3 }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleAddComment, disabled: !newComment.trim() || addCommentMutation.isPending, size: 'sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Send, { className: 'h-4 w-4 mr-1' }), addCommentMutation.isPending ? 'Adding...' : 'Add Comment'] })] })), demand && ['cancelled', 'completed', 'rejected'].includes(demand.status) && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-muted-foreground bg-gray-50 p-3 rounded', children: ["Comments are disabled for ", demand.status, " demands."] })), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3 max-h-60 overflow-y-auto', children: [comments.map((comment) => ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between items-start mb-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'font-medium text-sm', children: [comment.author.firstName, " ", comment.author.lastName] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-xs text-muted-foreground', children: new Date(comment.createdAt).toLocaleString() })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm whitespace-pre-wrap', children: comment.commentText })] }) }, comment.id))), comments.length === 0 && ((0, jsx_runtime_1.jsx)("p", { className: 'text-center text-muted-foreground py-4', children: "No comments yet" }))] })] })] })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,