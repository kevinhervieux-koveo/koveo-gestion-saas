c8c1ef0db1efca444ce907493acf27a6
"use strict";
/**
 * Fast in-memory database mock for unit tests
 * Provides instant responses without network calls
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockSql = exports.mockDb = exports.createMockDatabase = void 0;
const createMockDatabase = () => {
    const mockData = new Map();
    return {
        // Mock query function that returns immediately
        query: jest.fn().mockImplementation(async (sql) => {
            // Return empty results for test queries
            if (sql.includes('SELECT version()')) {
                return [{ version: 'PostgreSQL 15.0 (Mock)' }];
            }
            return [];
        }),
        // Mock insert operations - proper Drizzle ORM structure
        insert: jest.fn().mockImplementation((table) => {
            const insertChain = {
                values: jest.fn().mockImplementation(async (data) => {
                    const id = Math.random().toString(36).substr(2, 9);
                    const result = Array.isArray(data)
                        ? data.map(item => ({ ...item, id: Math.random().toString(36).substr(2, 9) }))
                        : [{ ...data, id }];
                    mockData.set(id, data);
                    return result;
                }),
                returning: jest.fn().mockImplementation(async () => {
                    const id = Math.random().toString(36).substr(2, 9);
                    return [{ id }];
                })
            };
            // Make returning() chainable with values()
            insertChain.returning = jest.fn().mockImplementation(() => insertChain);
            insertChain.values = jest.fn().mockImplementation(async (data) => {
                const id = Math.random().toString(36).substr(2, 9);
                const result = Array.isArray(data)
                    ? data.map(item => ({ ...item, id: Math.random().toString(36).substr(2, 9) }))
                    : [{ ...data, id }];
                mockData.set(id, data);
                return result;
            });
            return insertChain;
        }),
        // Mock select operations
        select: jest.fn().mockImplementation(() => ({
            from: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockImplementation(() => ({
                    limit: jest.fn().mockImplementation(async () => []),
                    orderBy: jest.fn().mockImplementation(async () => []),
                })),
                leftJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockImplementation(() => ({
                        limit: jest.fn().mockImplementation(async () => []),
                    })),
                })),
                innerJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockImplementation(() => ({
                        limit: jest.fn().mockImplementation(async () => []),
                    })),
                })),
                limit: jest.fn().mockImplementation(async () => []),
                orderBy: jest.fn().mockImplementation(async () => []),
            })),
        })),
        // Mock delete operations - proper Drizzle ORM structure
        delete: jest.fn().mockImplementation((table) => ({
            where: jest.fn().mockImplementation(async () => ({ affectedRows: 0 })),
        })),
        // Mock update operations
        update: jest.fn().mockImplementation((table) => ({
            set: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockImplementation(async () => ({ affectedRows: 0 })),
            })),
        })),
    };
};
exports.createMockDatabase = createMockDatabase;
// Global mock instance
exports.mockDb = (0, exports.createMockDatabase)();
// Mock SQL template function
exports.mockSql = jest.fn().mockImplementation(async (strings, ...values) => {
    const query = strings.join('?');
    if (query.includes('SELECT version()')) {
        return [{ version: 'PostgreSQL 15.0 (Mock)' }];
    }
    return [];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,