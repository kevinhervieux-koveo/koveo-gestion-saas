7b34ed53c4895434d32b98a0178ed7d4
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentFormBase = DocumentFormBase;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const button_1 = require("@/components/ui/button");
const tabs_1 = require("@/components/ui/tabs");
const form_1 = require("@/components/ui/form");
const standard_card_1 = require("@/components/ui/standard-card");
const use_standard_form_1 = require("@/hooks/use-standard-form");
const document_management_1 = require("@/components/document-management");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
/**
 * Base component for document-based forms (Bills, Invoices, etc.).
 * Provides common structure including AI extraction, file upload, and form submission.
 * Consolidates patterns from ModularBillForm and InvoiceForm.
 *
 * @param props - Configuration and render props for the document form
 * @returns Standardized document form with consistent UX patterns
 */
function DocumentFormBase({ title, schema, defaultValues, apiEndpoint, queryKey, mode = 'create', itemId, buildingId, residenceId, onSuccess, onCancel, successMessages, children, aiExtractorComponent, uploadContext, showTabs = true, 'data-testid': testId, }) {
    const { t } = (0, use_language_1.useLanguage)();
    const [uploadedDocument, setUploadedDocument] = (0, react_1.useState)(null);
    const [isAiProcessing, setIsAiProcessing] = (0, react_1.useState)(false);
    // Initialize form with standard patterns
    const formControls = (0, use_standard_form_1.useStandardForm)({
        schema,
        defaultValues,
        apiEndpoint,
        queryKey,
        mode,
        itemId,
        onSuccess,
        successMessages,
    });
    const handleDocumentUpload = (documentId, file) => {
        setUploadedDocument(documentId);
        // Trigger AI processing if available
        if (file.type === 'application/pdf' && aiExtractorComponent) {
            setIsAiProcessing(true);
        }
    };
    const handleDocumentRemove = () => {
        setUploadedDocument(null);
        setIsAiProcessing(false);
    };
    const onSubmit = (data) => {
        const formData = {
            ...data,
            buildingId,
            residenceId,
            documentId: uploadedDocument || undefined,
        };
        formControls.submitMutation.mutate(formData);
    };
    const formContent = ((0, jsx_runtime_1.jsx)("div", { className: "space-y-6", children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...formControls.form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: formControls.handleSubmit(onSubmit), className: "space-y-6", children: [children(formControls), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end space-x-3 pt-6 border-t", children: [onCancel && ((0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", onClick: onCancel, "data-testid": "button-cancel", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4 mr-2" }), "Cancel"] })), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "submit", disabled: formControls.isSubmitting, "data-testid": "button-submit", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: "w-4 h-4 mr-2" }), formControls.isSubmitting
                                        ? (mode === 'create' ? 'Creating...' : 'Updating...')
                                        : (mode === 'create' ? 'Create' : 'Update')] })] })] }) }) }));
    if (!showTabs) {
        return ((0, jsx_runtime_1.jsx)(standard_card_1.StandardCard, { title: title, className: "max-w-4xl mx-auto", "data-testid": testId, children: formContent }));
    }
    return ((0, jsx_runtime_1.jsxs)(standard_card_1.StandardCard, { title: title, className: "max-w-4xl mx-auto", "data-testid": testId, children: [(0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: "form", className: "w-full", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: "grid w-full grid-cols-2", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: "form", "data-testid": "tab-form", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-4 h-4 mr-2" }), "Form Entry"] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: "ai", disabled: !aiExtractorComponent, "data-testid": "tab-ai", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-4 h-4 mr-2" }), "AI Extract"] })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "form", className: "mt-6", children: formContent }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "ai", className: "mt-6", children: aiExtractorComponent && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [aiExtractorComponent, isAiProcessing && ((0, jsx_runtime_1.jsxs)("div", { className: "text-center py-8", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-2 text-sm text-gray-600", children: "Processing document..." })] }))] })) })] }), uploadContext && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-6 pt-6 border-t", children: [(0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: (file, text) => {
                            if (file) {
                                handleDocumentUpload(file.name, file);
                            }
                        }, allowedFileTypes: ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg'], maxFileSize: 10, className: "mt-4" }), uploadedDocument && ((0, jsx_runtime_1.jsx)("div", { className: "mt-4 p-4 bg-gray-50 rounded-lg", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium", children: "Document uploaded" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: handleDocumentRemove, "data-testid": "button-remove-document", children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4" }) })] }) }))] }))] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2NvbXBvbmVudHMvZm9ybXMvRG9jdW1lbnRGb3JtQmFzZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Q0EsNENBK0tDOztBQTNORCwrQ0FBbUQ7QUFFbkQsbURBQWdEO0FBQ2hELCtDQUFnRjtBQUNoRiwrQ0FBNEM7QUFDNUMsaUVBQTZEO0FBQzdELGlFQUE0RDtBQUM1RCwwRUFBa0U7QUFDbEUsK0NBQTJEO0FBRTNELHVEQUFtRDtBQTBCbkQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLGdCQUFnQixDQUFxQyxFQUNuRSxLQUFLLEVBQ0wsTUFBTSxFQUNOLGFBQWEsRUFDYixXQUFXLEVBQ1gsUUFBUSxFQUNSLElBQUksR0FBRyxRQUFRLEVBQ2YsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsU0FBUyxFQUNULFFBQVEsRUFDUixlQUFlLEVBQ2YsUUFBUSxFQUNSLG9CQUFvQixFQUNwQixhQUFhLEVBQ2IsUUFBUSxHQUFHLElBQUksRUFDZixhQUFhLEVBQUUsTUFBTSxHQUNJO0lBQ3pCLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFBLDBCQUFXLEdBQUUsQ0FBQztJQUM1QixNQUFNLENBQUMsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQWdCLElBQUksQ0FBQyxDQUFDO0lBQzlFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQUMsS0FBSyxDQUFDLENBQUM7SUFFNUQseUNBQXlDO0lBQ3pDLE1BQU0sWUFBWSxHQUFHLElBQUEsbUNBQWUsRUFBQztRQUNuQyxNQUFNO1FBQ04sYUFBYTtRQUNiLFdBQVc7UUFDWCxRQUFRO1FBQ1IsSUFBSTtRQUNKLE1BQU07UUFDTixTQUFTO1FBQ1QsZUFBZTtLQUNoQixDQUFDLENBQUM7SUFFSCxNQUFNLG9CQUFvQixHQUFHLENBQUMsVUFBa0IsRUFBRSxJ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QUNZLENBQ2hCLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvY2xpZW50L3NyYy9jb21wb25lbnRzL2Zvcm1zL0RvY3VtZW50Rm9ybUJhc2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBSZWFjdE5vZGUsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcbmltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XG5pbXBvcnQgeyBGb3JtIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2Zvcm0nO1xuaW1wb3J0IHsgU3RhbmRhcmRDYXJkIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3N0YW5kYXJkLWNhcmQnO1xuaW1wb3J0IHsgdXNlU3RhbmRhcmRGb3JtIH0gZnJvbSAnQC9ob29rcy91c2Utc3RhbmRhcmQtZm9ybSc7XG5pbXBvcnQgeyBTaGFyZWRVcGxvYWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9kb2N1bWVudC1tYW5hZ2VtZW50JztcbmltcG9ydCB7IEZpbGVUZXh0LCBTcGFya2xlcywgU2F2ZSwgWCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG5pbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJztcbmltcG9ydCB7IHVzZUxhbmd1YWdlIH0gZnJvbSAnQC9ob29rcy91c2UtbGFuZ3VhZ2UnO1xuaW1wb3J0IHR5cGUgeyBVcGxvYWRDb250ZXh0IH0gZnJvbSAnQHNoYXJlZC9jb25maWcvdXBsb2FkLWNvbmZpZyc7XG5cbmludGVyZmFjZSBEb2N1bWVudEZvcm1CYXNlUHJvcHM8VCBleHRlbmRzIHouWm9kVHlwZTxhbnksIGFueSwgYW55Pj4ge1xuICB0aXRsZTogc3RyaW5nO1xuICBzY2hlbWE6IFQ7XG4gIGRlZmF1bHRWYWx1ZXM6IFBhcnRpYWw8ei5pbmZlcjxUPj47XG4gIGFwaUVuZHBvaW50OiBzdHJpbmc7XG4gIHF1ZXJ5S2V5OiBzdHJpbmdbXTtcbiAgbW9kZT86ICdjcmVhdGUnIHwgJ2VkaXQnO1xuICBpdGVtSWQ/OiBzdHJpbmc7XG4gIGJ1aWxkaW5nSWQ/OiBzdHJpbmc7XG4gIHJlc2lkZW5jZUlkPzogc3RyaW5nO1xuICBvblN1Y2Nlc3M/OiAoKSA9PiB2b2lkO1xuICBvbkNhbmNlbD86ICgpID0+IHZvaWQ7XG4gIHN1Y2Nlc3NNZXNzYWdlcz86IHtcbiAgICBjcmVhdGU/OiBzdHJpbmc7XG4gICAgdXBkYXRlPzogc3RyaW5nO1xuICB9O1xuICBjaGlsZHJlbjogKGZvcm1Db250cm9sczogUmV0dXJuVHlwZTx0eXBlb2YgdXNlU3RhbmRhcmRGb3JtPFQ+PikgPT4gUmVhY3ROb2RlO1xuICBhaUV4dHJhY3RvckNvbXBvbmVudD86IFJlYWN0Tm9kZTtcbiAgdXBsb2FkQ29udGV4dD86IFVwbG9hZENvbnRleHQ7XG4gIHNob3dUYWJzPzogYm9vbGVhbjtcbiAgJ2RhdGEtdGVzdGlkJz86IHN0cmluZztcbn1cblxuLyoqXG4gKiBCYXNlIGNvbXBvbmVudCBmb3IgZG9jdW1lbnQtYmFzZWQgZm9ybXMgKEJpbGxzLCBJbnZvaWNlcywgZXRjLikuXG4gKiBQcm92aWRlcyBjb21tb24gc3RydWN0dXJlIGluY2x1ZGluZyBBSSBleHRyYWN0aW9uLCBmaWxlIHVwbG9hZCwgYW5kIGZvcm0gc3VibWlzc2lvbi5cbiAqIENvbnNvbGlkYXRlcyBwYXR0ZXJucyBmcm9tIE1vZHVsYXJCaWxsRm9ybSBhbmQgSW52b2ljZUZvcm0uXG4gKiBcbiAqIEBwYXJhbSBwcm9wcyAtIENvbmZpZ3VyYXRpb24gYW5kIHJlbmRlciBwcm9wcyBmb3IgdGhlIGRvY3VtZW50IGZvcm1cbiAqIEByZXR1cm5zIFN0YW5kYXJkaXplZCBkb2N1bWVudCBmb3JtIHdpdGggY29uc2lzdGVudCBVWCBwYXR0ZXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gRG9jdW1lbnRGb3JtQmFzZTxUIGV4dGVuZHMgei5ab2RUeXBlPGFueSwgYW55LCBhbnk+Pih7XG4gIHRpdGxlLFxuICBzY2hlbWEsXG4gIGRlZmF1bHRWYWx1ZXMsXG4gIGFwaUVuZHBvaW50LFxuICBxdWVyeUtleSxcbiAgbW9kZSA9ICdjcmVhdGUnLFxuICBpdGVtSWQsXG4gIGJ1aWxkaW5nSWQsXG4gIHJlc2lkZW5jZUlkLFxuICBvblN1Y2Nlc3MsXG4gIG9uQ2FuY2VsLFxuICBzdWNjZXNzTWVzc2FnZXMsXG4gIGNoaWxkcmVuLFxuICBhaUV4dHJhY3RvckNvbXBvbmVudCxcbiAgdXBsb2FkQ29udGV4dCxcbiAgc2hvd1RhYnMgPSB0cnVlLFxuICAnZGF0YS10ZXN0aWQnOiB0ZXN0SWQsXG59OiBEb2N1bWVudEZvcm1CYXNlUHJvcHM8VD4pIHtcbiAgY29uc3QgeyB0IH0gPSB1c2VMYW5ndWFnZSgpO1xuICBjb25zdCBbdXBsb2FkZWREb2N1bWVudCwgc2V0VXBsb2FkZWREb2N1bWVudF0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lzQWlQcm9jZXNzaW5nLCBzZXRJc0FpUHJvY2Vzc2luZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBmb3JtIHdpdGggc3RhbmRhcmQgcGF0dGVybnNcbiAgY29uc3QgZm9ybUNvbnRyb2xzID0gdXNlU3RhbmRhcmRGb3JtKHtcbiAgICBzY2hlbWEsXG4gICAgZGVmYXVsdFZhbHVlcyxcbiAgICBhcGlFbmRwb2ludCxcbiAgICBxdWVyeUtleSxcbiAgICBtb2RlLFxuICAgIGl0ZW1JZCxcbiAgICBvblN1Y2Nlc3MsXG4gICAgc3VjY2Vzc01lc3NhZ2VzLFxuICB9KTtcblxuICBjb25zdCBoYW5kbGVEb2N1bWVudFVwbG9hZCA9IChkb2N1bWVudElkOiBzdHJpbmcsIGZpbGU6IEZpbGUpID0+IHtcbiAgICBzZXRVcGxvYWRlZERvY3VtZW50KGRvY3VtZW50SWQpO1xuICAgIFxuICAgIC8vIFRyaWdnZXIgQUkgcHJvY2Vzc2luZyBpZiBhdmFpbGFibGVcbiAgICBpZiAoZmlsZS50eXBlID09PSAnYXBwbGljYXRpb24vcGRmJyAmJiBhaUV4dHJhY3RvckNvbXBvbmVudCkge1xuICAgICAgc2V0SXNBaVByb2Nlc3NpbmcodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURvY3VtZW50UmVtb3ZlID0gKCkgPT4ge1xuICAgIHNldFVwbG9hZGVkRG9jdW1lbnQobnVsbCk7XG4gICAgc2V0SXNBaVByb2Nlc3NpbmcoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gKGRhdGE6IHouaW5mZXI8VD4pID0+IHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBidWlsZGluZ0lkLFxuICAgICAgcmVzaWRlbmNlSWQsXG4gICAgICBkb2N1bWVudElkOiB1cGxvYWRlZERvY3VtZW50IHx8IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgIGZvcm1Db250cm9scy5zdWJtaXRNdXRhdGlvbi5tdXRhdGUoZm9ybURhdGEpO1xuICB9O1xuXG4gIGNvbnN0IGZvcm1Db250ZW50ID0gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS02XCI+XG4gICAgICA8Rm9ybSB7Li4uZm9ybUNvbnRyb2xzLmZvcm19PlxuICAgICAgICA8Zm9ybSBvblN1Ym1pdD17Zm9ybUNvbnRyb2xzLmhhbmRsZVN1Ym1pdChvblN1Ym1pdCl9IGNsYXNzTmFtZT1cInNwYWNlLXktNlwiPlxuICAgICAgICAgIHtjaGlsZHJlbihmb3JtQ29udHJvbHMpfVxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWVuZCBzcGFjZS14LTMgcHQtNiBib3JkZXItdFwiPlxuICAgICAgICAgICAge29uQ2FuY2VsICYmIChcbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJvdXRsaW5lXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkNhbmNlbH1cbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImJ1dHRvbi1jYW5jZWxcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFggY2xhc3NOYW1lPVwidy00IGgtNCBtci0yXCIgLz5cbiAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Zvcm1Db250cm9scy5pc1N1Ym1pdHRpbmd9XG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLXN1Ym1pdFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxTYXZlIGNsYXNzTmFtZT1cInctNCBoLTQgbXItMlwiIC8+XG4gICAgICAgICAgICAgIHtmb3JtQ29udHJvbHMuaXNTdWJtaXR0aW5nIFxuICAgICAgICAgICAgICAgID8gKG1vZGUgPT09ICdjcmVhdGUnID8gJ0NyZWF0aW5nLi4uJyA6ICdVcGRhdGluZy4uLicpIFxuICAgICAgICAgICAgICAgIDogKG1vZGUgPT09ICdjcmVhdGUnID8gJ0NyZWF0ZScgOiAnVXBkYXRlJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgIDwvRm9ybT5cbiAgICA8L2Rpdj5cbiAgKTtcblxuICBpZiAoIXNob3dUYWJzKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTdGFuZGFyZENhcmRcbiAgICAgICAgdGl0bGU9e3RpdGxlfVxuICAgICAgICBjbGFzc05hbWU9XCJtYXgtdy00eGwgbXgtYXV0b1wiXG4gICAgICAgIGRhdGEtdGVzdGlkPXt0ZXN0SWR9XG4gICAgICA+XG4gICAgICAgIHtmb3JtQ29udGVudH1cbiAgICAgIDwvU3RhbmRhcmRDYXJkPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxTdGFuZGFyZENhcmRcbiAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgIGNsYXNzTmFtZT1cIm1heC13LTR4bCBteC1hdXRvXCJcbiAgICAgIGRhdGEtdGVzdGlkPXt0ZXN0SWR9XG4gICAgPlxuICAgICAgPFRhYnMgZGVmYXVsdFZhbHVlPVwiZm9ybVwiIGNsYXNzTmFtZT1cInctZnVsbFwiPlxuICAgICAgICA8VGFic0xpc3QgY2xhc3NOYW1lPVwiZ3JpZCB3LWZ1bGwgZ3JpZC1jb2xzLTJcIj5cbiAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJmb3JtXCIgZGF0YS10ZXN0aWQ9XCJ0YWItZm9ybVwiPlxuICAgICAgICAgICAgPEZpbGVUZXh0IGNsYXNzTmFtZT1cInctNCBoLTQgbXItMlwiIC8+XG4gICAgICAgICAgICBGb3JtIEVudHJ5XG4gICAgICAgICAgPC9UYWJzVHJpZ2dlcj5cbiAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJhaVwiIGRpc2FibGVkPXshYWlFeHRyYWN0b3JDb21wb25lbnR9IGRhdGEtdGVzdGlkPVwidGFiLWFpXCI+XG4gICAgICAgICAgICA8U3BhcmtsZXMgY2xhc3NOYW1lPVwidy00IGgtNCBtci0yXCIgLz5cbiAgICAgICAgICAgIEFJIEV4dHJhY3RcbiAgICAgICAgICA8L1RhYnNUcmlnZ2VyPlxuICAgICAgICA8L1RhYnNMaXN0PlxuICAgICAgICBcbiAgICAgICAgPFRhYnNDb250ZW50IHZhbHVlPVwiZm9ybVwiIGNsYXNzTmFtZT1cIm10LTZcIj5cbiAgICAgICAgICB7Zm9ybUNvbnRlbnR9XG4gICAgICAgIDwvVGFic0NvbnRlbnQ+XG4gICAgICAgIFxuICAgICAgICA8VGFic0NvbnRlbnQgdmFsdWU9XCJhaVwiIGNsYXNzTmFtZT1cIm10LTZcIj5cbiAgICAgICAgICB7YWlFeHRyYWN0b3JDb21wb25lbnQgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTZcIj5cbiAgICAgICAgICAgICAge2FpRXh0cmFjdG9yQ29tcG9uZW50fVxuICAgICAgICAgICAgICB7aXNBaVByb2Nlc3NpbmcgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXIgcHktOFwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtOCB3LTggYm9yZGVyLWItMiBib3JkZXItYmx1ZS02MDAgbXgtYXV0b1wiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibXQtMiB0ZXh0LXNtIHRleHQtZ3JheS02MDBcIj5Qcm9jZXNzaW5nIGRvY3VtZW50Li4uPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9UYWJzQ29udGVudD5cbiAgICAgIDwvVGFicz5cbiAgICAgIFxuICAgICAge3VwbG9hZENvbnRleHQgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTYgcHQtNiBib3JkZXItdFwiPlxuICAgICAgICAgIDxTaGFyZWRVcGxvYWRlclxuICAgICAgICAgICAgb25Eb2N1bWVudENoYW5nZT17KGZpbGUsIHRleHQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVEb2N1bWVudFVwbG9hZChmaWxlLm5hbWUsIGZpbGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgYWxsb3dlZEZpbGVUeXBlcz17WydhcHBsaWNhdGlvbi9wZGYnLCAnaW1hZ2UvanBlZycsICdpbWFnZS9wbmcnLCAnaW1hZ2UvanBnJ119XG4gICAgICAgICAgICBtYXhGaWxlU2l6ZT17MTB9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJtdC00XCJcbiAgICAgICAgICAvPlxuICAgICAgICAgIFxuICAgICAgICAgIHt1cGxvYWRlZERvY3VtZW50ICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNCBwLTQgYmctZ3JheS01MCByb3VuZGVkLWxnXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bVwiPkRvY3VtZW50IHVwbG9hZGVkPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJnaG9zdFwiXG4gICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRG9jdW1lbnRSZW1vdmV9XG4gICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImJ1dHRvbi1yZW1vdmUtZG9jdW1lbnRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxYIGNsYXNzTmFtZT1cInctNCBoLTRcIiAvPlxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L1N0YW5kYXJkQ2FyZD5cbiAgKTtcbn0iXSwidmVyc2lvbiI6M30=