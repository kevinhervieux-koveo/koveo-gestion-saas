85a56dd6343e760ff6a8d43df5a0757f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Comprehensive test suite to ensure all pages in the app work correctly
 * and prevent issues like missing imports and authentication failures
 */
const react_1 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
const memory_location_1 = require("wouter/memory-location");
const use_auth_1 = require("@/hooks/use-auth");
const use_language_1 = require("@/hooks/use-language");
require("@testing-library/jest-dom");
// Mock the auth API responses
global.fetch = jest.fn();
// Test data - all pages in the app
const allPages = [
    // Public pages
    { path: '/', name: 'Home' },
    { path: '/features', name: 'Features' },
    { path: '/pricing', name: 'Pricing' },
    { path: '/security', name: 'Security' },
    { path: '/story', name: 'Story' },
    { path: '/privacy-policy', name: 'Privacy Policy' },
    { path: '/terms-of-service', name: 'Terms of Service' },
    // Auth pages
    { path: '/login', name: 'Login' },
    { path: '/forgot-password', name: 'Forgot Password' },
    { path: '/reset-password', name: 'Reset Password' },
    // Dashboard pages (require auth)
    { path: '/dashboard', name: 'Dashboard' },
    { path: '/dashboard/calendar', name: 'Calendar' },
    // Admin pages (require admin role)
    { path: '/admin/organizations', name: 'Admin Organizations' },
    { path: '/admin/compliance', name: 'Admin Compliance' },
    { path: '/admin/documentation', name: 'Admin Documentation' },
    { path: '/admin/permissions', name: 'Admin Permissions' },
    { path: '/admin/pillars', name: 'Admin Pillars' },
    { path: '/admin/quality', name: 'Admin Quality' },
    { path: '/admin/roadmap', name: 'Admin Roadmap' },
    { path: '/admin/suggestions', name: 'Admin Suggestions' },
    // Manager pages (require manager role)
    { path: '/manager/bills', name: 'Manager Bills' },
    { path: '/manager/budget', name: 'Manager Budget' },
    { path: '/manager/buildings', name: 'Manager Buildings' },
    { path: '/manager/common-spaces-stats', name: 'Manager Common Spaces Stats' },
    { path: '/manager/demands', name: 'Manager Demands' },
    { path: '/manager/invoices', name: 'Manager Invoices' },
    { path: '/manager/residences', name: 'Manager Residences' },
    { path: '/manager/user-management', name: 'Manager User Management' },
    // Resident pages (require resident role)
    { path: '/residents/dashboard', name: 'Residents Dashboard' },
    { path: '/residents/building', name: 'Residents Building' },
    { path: '/residents/common-spaces', name: 'Residents Common Spaces' },
    { path: '/residents/my-calendar', name: 'Residents My Calendar' },
    { path: '/residents/residence', name: 'Residents Residence' },
    // Settings pages
    { path: '/settings/settings', name: 'Settings' },
    { path: '/settings/bug-reports', name: 'Bug Reports' },
    { path: '/settings/idea-box', name: 'Idea Box' },
];
// Import all page components dynamically
const pageComponents = {
    '/': () => Promise.resolve().then(() => __importStar(require('@/pages/home'))),
    '/features': () => Promise.resolve().then(() => __importStar(require('@/pages/features'))),
    '/pricing': () => Promise.resolve().then(() => __importStar(require('@/pages/pricing'))),
    '/security': () => Promise.resolve().then(() => __importStar(require('@/pages/security'))),
    '/story': () => Promise.resolve().then(() => __importStar(require('@/pages/story'))),
    '/privacy-policy': () => Promise.resolve().then(() => __importStar(require('@/pages/privacy-policy'))),
    '/terms-of-service': () => Promise.resolve().then(() => __importStar(require('@/pages/terms-of-service'))),
    '/login': () => Promise.resolve().then(() => __importStar(require('@/pages/auth/login'))),
    '/forgot-password': () => Promise.resolve().then(() => __importStar(require('@/pages/auth/forgot-password'))),
    '/reset-password': () => Promise.resolve().then(() => __importStar(require('@/pages/auth/reset-password'))),
    '/dashboard': () => Promise.resolve().then(() => __importStar(require('@/pages/dashboard'))),
    '/dashboard/calendar': () => Promise.resolve().then(() => __importStar(require('@/pages/dashboard/calendar'))),
    '/admin/organizations': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/organizations'))),
    '/admin/compliance': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/compliance'))),
    '/admin/documentation': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/documentation'))),
    '/admin/permissions': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/permissions'))),
    '/admin/pillars': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/pillars'))),
    '/admin/quality': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/quality'))),
    '/admin/roadmap': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/roadmap'))),
    '/admin/suggestions': () => Promise.resolve().then(() => __importStar(require('@/pages/admin/suggestions'))),
    '/manager/bills': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/bills'))),
    '/manager/budget': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/budget'))),
    '/manager/buildings': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/buildings'))),
    '/manager/common-spaces-stats': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/common-spaces-stats'))),
    '/manager/demands': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/demands'))),
    '/manager/invoices': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/invoices'))),
    '/manager/residences': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/residences'))),
    '/manager/user-management': () => Promise.resolve().then(() => __importStar(require('@/pages/manager/user-management'))),
    '/residents/dashboard': () => Promise.resolve().then(() => __importStar(require('@/pages/residents/dashboard'))),
    '/residents/building': () => Promise.resolve().then(() => __importStar(require('@/pages/residents/building'))),
    '/residents/common-spaces': () => Promise.resolve().then(() => __importStar(require('@/pages/residents/common-spaces'))),
    '/residents/my-calendar': () => Promise.resolve().then(() => __importStar(require('@/pages/residents/my-calendar'))),
    '/residents/residence': () => Promise.resolve().then(() => __importStar(require('@/pages/residents/residence'))),
    '/settings/settings': () => Promise.resolve().then(() => __importStar(require('@/pages/settings/settings'))),
    '/settings/bug-reports': () => Promise.resolve().then(() => __importStar(require('@/pages/settings/bug-reports'))),
    '/settings/idea-box': () => Promise.resolve().then(() => __importStar(require('@/pages/settings/idea-box'))),
};
// Helper to create test providers
const TestWrapper = ({ children, mockUser = null }) => {
    const queryClient = new react_query_1.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                gcTime: 0,
            },
        },
    });
    // Mock auth API response
    const mockFetch = global.fetch;
    if (mockUser) {
        mockFetch.mockResolvedValueOnce({
            ok: true,
            status: 200,
            json: () => Promise.resolve(mockUser),
        });
    }
    else {
        mockFetch.mockResolvedValueOnce({
            ok: false,
            status: 401,
            statusText: 'Unauthorized',
            json: () => Promise.resolve({ error: 'Unauthorized' }),
        });
    }
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: (0, jsx_runtime_1.jsx)(use_language_1.LanguageProvider, { children: (0, jsx_runtime_1.jsx)(use_auth_1.AuthProvider, { children: (0, jsx_runtime_1.jsx)(memory_location_1.MemoryRouter, { children: children }) }) }) }));
};
describe('All Pages Integrity Tests', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Reset console.error to catch React errors
        jest.spyOn(console, 'error').mockImplementation(() => { });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    describe('Public Pages', () => {
        const publicPages = allPages.filter(page => ['/', '/features', '/pricing', '/security', '/story', '/privacy-policy', '/terms-of-service'].includes(page.path));
        it.each(publicPages)('should render $name page without errors', async ({ path, name }) => {
            const mockFetch = global.fetch;
            mockFetch.mockResolvedValue({
                ok: false,
                status: 401,
                statusText: 'Unauthorized',
                json: () => Promise.resolve({ error: 'Unauthorized' }),
            });
            let Component;
            try {
                const module = await pageComponents[path]?.();
                Component = module?.default;
            }
            catch (error) {
                throw new Error(`Failed to import component for ${name} (${path}): ${error}`);
            }
            if (!Component) {
                throw new Error(`No component found for ${name} (${path})`);
            }
            let renderError;
            try {
                (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(Component, {}) }));
            }
            catch (error) {
                renderError = error;
            }
            // Check for render errors
            expect(renderError).toBeUndefined();
            // Check for console errors (like missing imports)
            const consoleSpy = jest.spyOn(console, 'error');
            expect(consoleSpy).not.toHaveBeenCalledWith(expect.stringMatching(/ReferenceError.*is not defined/));
        });
    });
    describe('Authentication Pages', () => {
        const authPages = allPages.filter(page => ['/login', '/forgot-password', '/reset-password'].includes(page.path));
        it.each(authPages)('should render $name page without errors', async ({ path, name }) => {
            const mockFetch = global.fetch;
            mockFetch.mockResolvedValue({
                ok: false,
                status: 401,
                statusText: 'Unauthorized',
                json: () => Promise.resolve({ error: 'Unauthorized' }),
            });
            let Component;
            try {
                const module = await pageComponents[path]?.();
                Component = module?.default;
            }
            catch (error) {
                throw new Error(`Failed to import component for ${name} (${path}): ${error}`);
            }
            if (!Component) {
                throw new Error(`No component found for ${name} (${path})`);
            }
            expect(() => {
                (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(Component, {}) }));
            }).not.toThrow();
        });
    });
    describe('Protected Pages with Authentication', () => {
        const protectedPages = allPages.filter(page => page.path.startsWith('/dashboard') ||
            page.path.startsWith('/admin') ||
            page.path.startsWith('/manager') ||
            page.path.startsWith('/residents') ||
            page.path.startsWith('/settings'));
        const mockUsers = {
            admin: { id: '1', email: 'admin@test.com', role: 'admin', firstName: 'Admin', lastName: 'User' },
            manager: { id: '2', email: 'manager@test.com', role: 'manager', firstName: 'Manager', lastName: 'User' },
            resident: { id: '3', email: 'resident@test.com', role: 'resident', firstName: 'Resident', lastName: 'User' }
        };
        it.each(protectedPages)('should render $name page with proper authentication', async ({ path, name }) => {
            // Determine required role based on path
            let mockUser = mockUsers.admin; // Default to admin
            if (path.startsWith('/manager'))
                mockUser = mockUsers.manager;
            if (path.startsWith('/residents'))
                mockUser = mockUsers.resident;
            let Component;
            try {
                const module = await pageComponents[path]?.();
                Component = module?.default;
            }
            catch (error) {
                throw new Error(`Failed to import component for ${name} (${path}): ${error}`);
            }
            if (!Component) {
                throw new Error(`No component found for ${name} (${path})`);
            }
            expect(() => {
                (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { mockUser: mockUser, children: (0, jsx_runtime_1.jsx)(Component, {}) }));
            }).not.toThrow();
        });
    });
    describe('Import Validation', () => {
        it('should not have missing lucide-react imports', async () => {
            const pages = [
                '/privacy-policy',
                '/home',
                '/features',
                '/pricing',
                '/security',
                '/story',
                '/terms-of-service'
            ];
            for (const path of pages) {
                let Component;
                try {
                    const module = await pageComponents[path]?.();
                    Component = module?.default;
                }
                catch (error) {
                    throw new Error(`Failed to import component for ${path}: ${error}`);
                }
                if (Component) {
                    // Test that component can be rendered without import errors
                    expect(() => {
                        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(Component, {}) }));
                    }).not.toThrow();
                    // Check that no ReferenceError is thrown for missing lucide icons
                    const consoleSpy = jest.spyOn(console, 'error');
                    expect(consoleSpy).not.toHaveBeenCalledWith(expect.stringMatching(/ReferenceError.*ArrowRight is not defined/));
                    expect(consoleSpy).not.toHaveBeenCalledWith(expect.stringMatching(/ReferenceError.*ArrowLeft is not defined/));
                }
            }
        });
    });
    describe('API Integration', () => {
        it('should handle 401 responses gracefully on public pages', async () => {
            const publicPages = ['/', '/features', '/privacy-policy'];
            for (const path of publicPages) {
                const mockFetch = global.fetch;
                mockFetch.mockClear();
                // Mock 401 response
                mockFetch.mockResolvedValue({
                    ok: false,
                    status: 401,
                    statusText: 'Unauthorized',
                    json: () => Promise.resolve({ error: 'Unauthorized' }),
                });
                let Component;
                try {
                    const module = await pageComponents[path]?.();
                    Component = module?.default;
                }
                catch (error) {
                    continue; // Skip if component doesn't exist
                }
                if (Component) {
                    expect(() => {
                        (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(Component, {}) }));
                    }).not.toThrow();
                    // Wait for auth check to complete
                    await (0, react_1.waitFor)(() => {
                        expect(mockFetch).toHaveBeenCalledWith('/api/auth/user', {
                            credentials: 'include',
                        });
                    });
                }
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,