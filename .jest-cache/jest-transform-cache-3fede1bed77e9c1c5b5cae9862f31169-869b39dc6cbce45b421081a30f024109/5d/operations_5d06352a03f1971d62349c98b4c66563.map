{"file":"/home/runner/workspace/shared/schemas/operations.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/shared/schemas/operations.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  timestamp,\n  jsonb,\n  uuid,\n  pgEnum,\n  boolean,\n  decimal,\n  integer,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\nimport { users } from './core';\nimport { residences, buildings } from './property';\n\n// Operations enums\nexport const maintenanceStatusEnum = pgEnum('maintenance_status', [\n  'submitted',\n  'acknowledged',\n  'in_progress',\n  'completed',\n  'cancelled',\n]);\n\nexport const maintenancePriorityEnum = pgEnum('maintenance_priority', [\n  'low',\n  'medium',\n  'high',\n  'urgent',\n  'emergency',\n]);\n\nexport const notificationTypeEnum = pgEnum('notification_type', [\n  'bill_reminder',\n  'maintenance_update',\n  'announcement',\n  'system',\n  'emergency',\n]);\n\nexport const demandTypeEnum = pgEnum('demand_type', [\n  'maintenance',\n  'complaint',\n  'information',\n  'other',\n]);\n\nexport const demandStatusEnum = pgEnum('demand_status', [\n  'draft',\n  'submitted',\n  'under_review',\n  'approved',\n  'in_progress',\n  'completed',\n  'rejected',\n  'cancelled',\n]);\n\nexport const bugStatusEnum = pgEnum('bug_status', [\n  'new',\n  'acknowledged',\n  'in_progress',\n  'resolved',\n  'closed',\n]);\n\nexport const bugPriorityEnum = pgEnum('bug_priority', ['low', 'medium', 'high', 'critical']);\n\nexport const bugCategoryEnum = pgEnum('bug_category', [\n  'ui_ux',\n  'functionality',\n  'performance',\n  'data',\n  'security',\n  'integration',\n  'other',\n]);\n\nexport const featureRequestStatusEnum = pgEnum('feature_request_status', [\n  'submitted',\n  'under_review',\n  'planned',\n  'in_progress',\n  'completed',\n  'rejected',\n]);\n\nexport const featureRequestCategoryEnum = pgEnum('feature_request_category', [\n  'dashboard',\n  'property_management',\n  'resident_management',\n  'financial_management',\n  'maintenance',\n  'document_management',\n  'communication',\n  'reports',\n  'mobile_app',\n  'integrations',\n  'security',\n  'performance',\n  'other',\n]);\n\n// Operations tables\n/**\n * Maintenance requests table for tracking property maintenance and repairs.\n * Supports prioritization, assignment, and cost tracking.\n */\nexport const maintenanceRequests = pgTable('maintenance_requests', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  residenceId: uuid('residence_id')\n    .notNull()\n    .references(() => residences.id),\n  submittedBy: uuid('submitted_by')\n    .notNull()\n    .references(() => users.id),\n  assignedTo: uuid('assigned_to').references(() => users.id),\n  title: text('title').notNull(),\n  description: text('description').notNull(),\n  category: text('category').notNull(), // 'plumbing', 'electrical', 'hvac', 'general', etc.\n  priority: maintenancePriorityEnum('priority').notNull().default('medium'),\n  status: maintenanceStatusEnum('status').notNull().default('submitted'),\n  estimatedCost: decimal('estimated_cost', { precision: 10, scale: 2 }),\n  actualCost: decimal('actual_cost', { precision: 10, scale: 2 }),\n  scheduledDate: timestamp('scheduled_date'),\n  completedDate: timestamp('completed_date'),\n  notes: text('notes'),\n  images: jsonb('images'), // Array of image URLs\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Notifications table for system-wide user communication.\n * Supports various notification types with read tracking.\n */\nexport const notifications = pgTable('notifications', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: uuid('user_id')\n    .notNull()\n    .references(() => users.id),\n  type: notificationTypeEnum('type').notNull(),\n  title: text('title').notNull(),\n  message: text('message').notNull(),\n  relatedEntityId: uuid('related_entity_id'), // ID of related bill, maintenance request, etc.\n  relatedEntityType: text('related_entity_type'), // 'bill', 'maintenance_request', etc.\n  isRead: boolean('is_read').notNull().default(false),\n  readAt: timestamp('read_at'),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n/**\n * Demands table for tracking resident requests and complaints.\n * Supports various demand types with approval workflow.\n */\nexport const demands = pgTable('demands', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  submitterId: uuid('submitter_id')\n    .notNull()\n    .references(() => users.id),\n  type: demandTypeEnum('type').notNull(),\n  assignationResidenceId: uuid('assignation_residence_id').references(() => residences.id),\n  assignationBuildingId: uuid('assignation_building_id').references(() => buildings.id),\n  description: text('description').notNull(),\n  residenceId: uuid('residence_id')\n    .notNull()\n    .references(() => residences.id),\n  buildingId: uuid('building_id')\n    .notNull()\n    .references(() => buildings.id),\n  status: demandStatusEnum('status').notNull().default('draft'),\n  reviewedBy: uuid('reviewed_by').references(() => users.id),\n  reviewedAt: timestamp('reviewed_at'),\n  reviewNotes: text('review_notes'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Demand comments table for tracking communication on demands.\n * Supports threaded conversations on demand requests.\n */\nexport const demandComments = pgTable('demands_comments', {\n  id: text('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  demandId: uuid('demand_id')\n    .notNull()\n    .references(() => demands.id),\n  commenterId: text('commenter_id')\n    .notNull()\n    .references(() => users.id),\n  commentText: text('comment_text').notNull(),\n  commentType: text('comment_type'),\n  isInternal: boolean('is_internal').default(false),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Bugs table for tracking application issues and bug reports.\n * All users can create bugs with category and page assignments.\n */\nexport const bugs = pgTable('bugs', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  createdBy: uuid('created_by')\n    .notNull()\n    .references(() => users.id),\n  title: text('title').notNull(),\n  description: text('description').notNull(),\n  category: bugCategoryEnum('category').notNull(),\n  page: text('page').notNull(), // The page where the bug was found\n  priority: bugPriorityEnum('priority').notNull().default('medium'),\n  status: bugStatusEnum('status').notNull().default('new'),\n  assignedTo: uuid('assigned_to').references(() => users.id),\n  resolvedAt: timestamp('resolved_at'),\n  resolvedBy: uuid('resolved_by').references(() => users.id),\n  notes: text('notes'), // Internal notes for resolution\n  reproductionSteps: text('reproduction_steps'), // Steps to reproduce the bug\n  environment: text('environment'), // Browser, OS, device info\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Feature requests table for collecting user suggestions and ideas.\n * All users can submit feature requests with category and page assignments.\n * Supports upvoting and merging similar requests.\n */\nexport const featureRequests = pgTable('feature_requests', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  createdBy: uuid('created_by')\n    .notNull()\n    .references(() => users.id),\n  title: text('title').notNull(),\n  description: text('description').notNull(),\n  need: text('need').notNull(), // The specific need this feature addresses\n  category: featureRequestCategoryEnum('category').notNull(),\n  page: text('page').notNull(), // The page/section where this feature should be added\n  status: featureRequestStatusEnum('status').notNull().default('submitted'),\n  upvoteCount: integer('upvote_count').notNull().default(0),\n  assignedTo: uuid('assigned_to').references(() => users.id),\n  reviewedBy: uuid('reviewed_by').references(() => users.id),\n  reviewedAt: timestamp('reviewed_at'),\n  adminNotes: text('admin_notes'), // Internal notes for admins only\n  mergedIntoId: uuid('merged_into_id').references(() => featureRequests.id), // If merged into another request\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Feature request upvotes table for tracking user votes on feature requests.\n * Each user can only upvote a feature request once.\n */\nexport const featureRequestUpvotes = pgTable('feature_request_upvotes', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  featureRequestId: uuid('feature_request_id')\n    .notNull()\n    .references(() => featureRequests.id),\n  userId: uuid('user_id')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n// Insert schemas\nexport const insertMaintenanceRequestSchema = z.object({\n  residenceId: z.string().uuid(),\n  submittedBy: z.string().uuid(),\n  assignedTo: z.string().uuid().optional(),\n  title: z.string(),\n  description: z.string(),\n  category: z.string(),\n  priority: z.string().default('medium'),\n  estimatedCost: z.number().optional(),\n  scheduledDate: z.date().optional(),\n  notes: z.string().optional(),\n  images: z.array(z.string()).optional(),\n});\n\nexport const insertNotificationSchema = z.object({\n  userId: z.string().uuid(),\n  type: z.enum(['bill_reminder', 'maintenance_update', 'announcement', 'system', 'emergency']),\n  title: z.string(),\n  message: z.string(),\n  relatedEntityId: z.string().uuid().optional(),\n  relatedEntityType: z.string().optional(),\n});\n\nexport const insertDemandSchema = z.object({\n  submitterId: z.string().uuid(),\n  type: z.enum(['maintenance', 'complaint', 'information', 'other']),\n  assignationResidenceId: z.string().uuid().optional(),\n  assignationBuildingId: z.string().uuid().optional(),\n  description: z\n    .string()\n    .min(10, 'Description must be at least 10 characters')\n    .max(2000, 'Description must not exceed 2000 characters'),\n  residenceId: z.string().uuid().optional(),\n  buildingId: z.string().uuid().optional(),\n  status: z.string().default('draft'),\n  reviewNotes: z.string().optional(),\n});\n\nexport const insertDemandCommentSchema = z.object({\n  demandId: z.string().uuid(),\n  commenterId: z.string().uuid(),\n  commentText: z\n    .string()\n    .min(1, 'Comment content is required')\n    .max(1000, 'Comment must not exceed 1000 characters'),\n  commentType: z.string().optional(),\n  isInternal: z.boolean().default(false),\n});\n\nexport const insertBugSchema = z.object({\n  createdBy: z.string().uuid(),\n  title: z.string().min(1, 'Title is required').max(200, 'Title must not exceed 200 characters'),\n  description: z\n    .string()\n    .min(10, 'Description must be at least 10 characters')\n    .max(2000, 'Description must not exceed 2000 characters'),\n  category: z.enum([\n    'ui_ux',\n    'functionality',\n    'performance',\n    'data',\n    'security',\n    'integration',\n    'other',\n  ]),\n  page: z.string().min(1, 'Page is required'),\n  priority: z.enum(['low', 'medium', 'high', 'critical']).default('medium'),\n  reproductionSteps: z.string().optional(),\n  environment: z.string().optional(),\n});\n\nexport const insertFeatureRequestSchema = z.object({\n  createdBy: z.string().uuid(),\n  title: z.string().min(1, 'Title is required').max(200, 'Title must not exceed 200 characters'),\n  description: z\n    .string()\n    .min(10, 'Description must be at least 10 characters')\n    .max(2000, 'Description must not exceed 2000 characters'),\n  need: z\n    .string()\n    .min(5, 'Need must be at least 5 characters')\n    .max(500, 'Need must not exceed 500 characters'),\n  category: z.enum([\n    'dashboard',\n    'property_management',\n    'resident_management',\n    'financial_management',\n    'maintenance',\n    'document_management',\n    'communication',\n    'reports',\n    'mobile_app',\n    'integrations',\n    'security',\n    'performance',\n    'other',\n  ]),\n  page: z.string().min(1, 'Page is required'),\n});\n\nexport const insertFeatureRequestUpvoteSchema = z.object({\n  featureRequestId: z.string().uuid(),\n  userId: z.string().uuid(),\n});\n\n// Types\n/**\n *\n */\nexport type InsertMaintenanceRequest = z.infer<typeof insertMaintenanceRequestSchema>;\n/**\n *\n */\nexport type MaintenanceRequest = typeof maintenanceRequests.$inferSelect;\n\n/**\n *\n */\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n/**\n *\n */\nexport type Notification = typeof notifications.$inferSelect;\n\n/**\n *\n */\nexport type InsertDemand = z.infer<typeof insertDemandSchema>;\n/**\n *\n */\nexport type Demand = typeof demands.$inferSelect;\n\n/**\n *\n */\nexport type InsertDemandComment = z.infer<typeof insertDemandCommentSchema>;\n/**\n *\n */\nexport type DemandComment = typeof demandComments.$inferSelect;\n\n/**\n *\n */\nexport type InsertBug = z.infer<typeof insertBugSchema>;\n/**\n *\n */\nexport type Bug = typeof bugs.$inferSelect;\n\n/**\n *\n */\nexport type InsertFeatureRequest = z.infer<typeof insertFeatureRequestSchema>;\n/**\n *\n */\nexport type FeatureRequest = typeof featureRequests.$inferSelect;\n\n/**\n *\n */\nexport type InsertFeatureRequestUpvote = z.infer<typeof insertFeatureRequestUpvoteSchema>;\n/**\n *\n */\nexport type FeatureRequestUpvote = typeof featureRequestUpvotes.$inferSelect;\n\n// Relations\n// Relations - temporarily commented out due to drizzle-orm version compatibility\n// export const maintenanceRequestsRelations = relations(maintenanceRequests, ({ one }) => ({\n//   residence: one(residences, {\n//     fields: [maintenanceRequests.residenceId],\n//     references: [residences.id],\n//   }),\n//   submittedBy: one(users, {\n//     fields: [maintenanceRequests.submittedBy],\n//     references: [users.id],\n//     relationName: 'submittedBy',\n//   }),\n//   assignedTo: one(users, {\n//     fields: [maintenanceRequests.assignedTo],\n//     references: [users.id],\n//     relationName: 'assignedTo',\n//   }),\n// }));\n\n// export const notificationsRelations = relations(notifications, ({ one }) => ({\n//   user: one(users, {\n//     fields: [notifications.userId],\n//     references: [users.id],\n//   }),\n// }));\n\n// export const demandsRelations = relations(demands, ({ one, many }) => ({\n//   submitter: one(users, {\n//     fields: [demands.submitterId],\n//     references: [users.id],\n//     relationName: 'submitter',\n//   }),\n//   assignationResidence: one(residences, {\n//     fields: [demands.assignationResidenceId],\n//     references: [residences.id],\n//     relationName: 'assignationResidence',\n//   }),\n//   assignationBuilding: one(buildings, {\n//     fields: [demands.assignationBuildingId],\n//     references: [buildings.id],\n//     relationName: 'assignationBuilding',\n//   }),\n//   residence: one(residences, {\n//     fields: [demands.residenceId],\n//     references: [residences.id],\n//     relationName: 'residence',\n//   }),\n//   building: one(buildings, {\n//     fields: [demands.buildingId],\n//     references: [buildings.id],\n//     relationName: 'building',\n//   }),\n//   reviewedBy: one(users, {\n//     fields: [demands.reviewedBy],\n//     references: [users.id],\n//     relationName: 'reviewedBy',\n//   }),\n//   comments: many(demandComments),\n// }));\n\n// export const demandCommentsRelations = relations(demandComments, ({ one }) => ({\n//   demand: one(demands, {\n//     fields: [demandComments.demandId],\n//     references: [demands.id],\n//   }),\n//   createdBy: one(users, {\n//     fields: [demandComments.createdBy],\n//     references: [users.id],\n//   }),\n// }));\n"],"version":3}