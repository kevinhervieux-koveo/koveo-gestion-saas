6f144d62119fad7b9b1f32a5b378de9a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const bcrypt = __importStar(require("bcryptjs"));
/**
 * Authentication System Integration Test
 *
 * This test ensures the authentication system works end-to-end and catches
 * critical issues like:
 * - Missing users in database
 * - Login endpoint failures
 * - Session management problems
 * - Demo user accessibility issues
 */
(0, globals_1.describe)('Authentication System', () => {
    const testUser = {
        username: 'isolated-auth-test',
        email: 'isolated-auth-test@test-only.com',
        password: 'test123',
        firstName: 'Isolated',
        lastName: 'AuthTest',
        role: 'manager',
        language: 'en',
        isActive: true
    };
    (0, globals_1.beforeAll)(async () => {
        // Clean up any existing test user
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.email, testUser.email));
        // Create test user with proper bcrypt hash
        const hashedPassword = await bcrypt.hash(testUser.password, 10);
        await db_1.db.insert(schema_1.users).values({
            username: testUser.username,
            email: testUser.email,
            password: hashedPassword,
            firstName: testUser.firstName,
            lastName: testUser.lastName,
            role: testUser.role,
            language: testUser.language,
            isActive: testUser.isActive
        });
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test user
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.email, testUser.email));
    });
    (0, globals_1.describe)('Database User Existence', () => {
        (0, globals_1.it)('should have at least one active user in the database', async () => {
            const userCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.count)() })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.isActive, true))
                .then(result => result[0]?.count || 0);
            (0, globals_1.expect)(userCount).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should find created test user in database', async () => {
            const user = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testUser.email))
                .then(results => results[0]);
            (0, globals_1.expect)(user).toBeDefined();
            (0, globals_1.expect)(user.email).toBe(testUser.email);
            (0, globals_1.expect)(user.isActive).toBe(true);
            (0, globals_1.expect)(user.role).toBe(testUser.role);
        });
    });
    (0, globals_1.describe)('Authentication Endpoints', () => {
        (0, globals_1.it)('should reject login with invalid credentials', async () => {
            const response = await fetch('http://localhost:5000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: testUser.email,
                    password: 'wrongpassword'
                })
            });
            (0, globals_1.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, globals_1.expect)(data.code).toBe('INVALID_CREDENTIALS');
        });
        (0, globals_1.it)('should accept login with valid credentials', async () => {
            const response = await fetch('http://localhost:5000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: testUser.email,
                    password: testUser.password
                })
            });
            (0, globals_1.expect)(response.status).toBe(200);
            const data = await response.json();
            (0, globals_1.expect)(data.message).toBe('Login successful');
            (0, globals_1.expect)(data.user).toBeDefined();
            (0, globals_1.expect)(data.user.email).toBe(testUser.email);
            (0, globals_1.expect)(data.user.password).toBeUndefined(); // Password should not be returned
        });
        (0, globals_1.it)('should handle missing credentials', async () => {
            const response = await fetch('http://localhost:5000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: testUser.email
                    // Missing password
                })
            });
            (0, globals_1.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, globals_1.expect)(data.code).toBe('MISSING_CREDENTIALS');
        });
        (0, globals_1.it)('should return 401 for user endpoint without authentication', async () => {
            const response = await fetch('http://localhost:5000/api/auth/user');
            (0, globals_1.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, globals_1.expect)(data.code).toBe('NOT_AUTHENTICATED');
        });
    });
    (0, globals_1.describe)('Demo User Issues', () => {
        (0, globals_1.it)('should not have any demo users in database', async () => {
            const demoUsers = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, 'demo@koveo.com'));
            (0, globals_1.expect)(demoUsers).toHaveLength(0);
        });
        (0, globals_1.it)('should fail login for non-existent demo users', async () => {
            const demoEmails = [
                'demo@koveo.com',
                'marc.gauthier@demo.com',
                'sophie.tremblay@demo.com'
            ];
            for (const email of demoEmails) {
                const response = await fetch('http://localhost:5000/api/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: email,
                        password: 'demo123'
                    })
                });
                (0, globals_1.expect)(response.status).toBe(401);
                const data = await response.json();
                (0, globals_1.expect)(data.code).toBe('INVALID_CREDENTIALS');
            }
        });
    });
    (0, globals_1.describe)('Password Security', () => {
        (0, globals_1.it)('should properly hash passwords', async () => {
            const user = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testUser.email))
                .then(results => results[0]);
            (0, globals_1.expect)(user.password).toBeDefined();
            (0, globals_1.expect)(user.password).not.toBe(testUser.password); // Should be hashed
            (0, globals_1.expect)(user.password.startsWith('$2')).toBe(true); // bcrypt hash format
        });
        (0, globals_1.it)('should verify password correctly', async () => {
            const user = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testUser.email))
                .then(results => results[0]);
            const isValid = await bcrypt.compare(testUser.password, user.password);
            (0, globals_1.expect)(isValid).toBe(true);
            const isInvalid = await bcrypt.compare('wrongpassword', user.password);
            (0, globals_1.expect)(isInvalid).toBe(false);
        });
    });
    (0, globals_1.describe)('Critical Authentication Issues', () => {
        (0, globals_1.it)('should detect if no users exist in system', async () => {
            const totalUsers = await db_1.db
                .select({ count: (0, drizzle_orm_1.count)() })
                .from(schema_1.users)
                .then(result => result[0]?.count || 0);
            // This test will fail if the database has no users, alerting us to the issue
            (0, globals_1.expect)(totalUsers).toBeGreaterThan(0);
            if (totalUsers === 0) {
                throw new Error('CRITICAL: No users found in database. Authentication system unusable.');
            }
        });
        (0, globals_1.it)('should ensure authentication endpoints are accessible', async () => {
            // Test that endpoints exist and respond (not 404)
            const endpoints = [
                'http://localhost:5000/api/auth/login',
                'http://localhost:5000/api/auth/user'
            ];
            for (const endpoint of endpoints) {
                const response = await fetch(endpoint, {
                    method: endpoint.includes('login') ? 'POST' : 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    ...(endpoint.includes('login') && {
                        body: JSON.stringify({ email: 'test', password: 'test' })
                    })
                });
                // Should not return 404 (endpoint exists)
                (0, globals_1.expect)(response.status).not.toBe(404);
                // Should return JSON response (API working)
                const contentType = response.headers.get('content-type');
                (0, globals_1.expect)(contentType).toContain('application/json');
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,