8b5285f6b893bdaa7f39a9d55e81f8b2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ATTACHABLE_ENTITY_TYPES = exports.DOCUMENT_TYPES = exports.attachDocumentSchema = exports.insertDocumentSchema = exports.documents = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const property_1 = require("./property");
// Unified documents table
/**
 * Unified documents table for all document types across the system.
 * Stores documents that can be associated with either residences, buildings, or neither.
 * Enhanced with file metadata, content type, and attachment relationships.
 */
exports.documents = (0, pg_core_1.pgTable)('documents', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    documentType: (0, pg_core_1.text)('document_type').notNull(),
    filePath: (0, pg_core_1.text)('file_path').notNull().unique(),
    fileName: (0, pg_core_1.text)('file_name'), // Original filename
    fileSize: (0, pg_core_1.varchar)('file_size'), // File size in bytes
    mimeType: (0, pg_core_1.text)('mime_type'), // MIME type for proper handling
    isVisibleToTenants: (0, pg_core_1.boolean)('is_visible_to_tenants').default(false).notNull(),
    residenceId: (0, pg_core_1.varchar)('residence_id').references(() => property_1.residences.id),
    buildingId: (0, pg_core_1.varchar)('building_id').references(() => property_1.buildings.id),
    uploadedById: (0, pg_core_1.varchar)('uploaded_by_id').notNull(),
    // Support for document attachments to forms
    attachedToType: (0, pg_core_1.text)('attached_to_type'), // 'bill', 'feature_request', 'bug_report', etc.
    attachedToId: (0, pg_core_1.varchar)('attached_to_id'), // ID of the entity this document is attached to
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow().notNull(),
});
// Enhanced document schema with file metadata
exports.insertDocumentSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Document name is required'),
    description: zod_1.z.string().optional(),
    documentType: zod_1.z.string().min(1, 'Document type is required'),
    filePath: zod_1.z.string().min(1, 'File path is required'),
    fileName: zod_1.z.string().optional(),
    fileSize: zod_1.z.string().optional(),
    mimeType: zod_1.z.string().optional(),
    isVisibleToTenants: zod_1.z.boolean().default(false),
    residenceId: zod_1.z.string().uuid().optional(),
    buildingId: zod_1.z.string().uuid().optional(),
    uploadedById: zod_1.z.string().uuid().min(1, 'Uploaded by user ID is required'),
    attachedToType: zod_1.z.string().optional(),
    attachedToId: zod_1.z.string().uuid().optional(),
});
// Schema for form-attached documents
exports.attachDocumentSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Document name is required'),
    description: zod_1.z.string().optional(),
    documentType: zod_1.z.enum(['attachment', 'screenshot', 'evidence', 'supporting_document']).default('attachment'),
    fileName: zod_1.z.string().min(1, 'File name is required'),
    fileSize: zod_1.z.string().optional(),
    mimeType: zod_1.z.string().optional(),
    attachedToType: zod_1.z.enum(['bill', 'feature_request', 'bug_report', 'maintenance_request']),
    attachedToId: zod_1.z.string().uuid().min(1, 'Attached entity ID is required'),
    uploadedById: zod_1.z.string().uuid().min(1, 'Uploaded by user ID is required'),
});
// Document type constants for consistency
exports.DOCUMENT_TYPES = {
    // Building/Residence documents
    BYLAW: 'bylaw',
    FINANCIAL: 'financial',
    MAINTENANCE: 'maintenance',
    LEGAL: 'legal',
    MEETING_MINUTES: 'meeting_minutes',
    INSURANCE: 'insurance',
    CONTRACTS: 'contracts',
    PERMITS: 'permits',
    INSPECTION: 'inspection',
    LEASE: 'lease',
    CORRESPONDENCE: 'correspondence',
    UTILITIES: 'utilities',
    OTHER: 'other',
    // Form attachments
    ATTACHMENT: 'attachment',
    SCREENSHOT: 'screenshot',
    EVIDENCE: 'evidence',
    SUPPORTING_DOCUMENT: 'supporting_document'
};
// Entity types that can have attached documents
exports.ATTACHABLE_ENTITY_TYPES = {
    BILL: 'bill',
    FEATURE_REQUEST: 'feature_request',
    BUG_REPORT: 'bug_report',
    MAINTENANCE_REQUEST: 'maintenance_request'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,