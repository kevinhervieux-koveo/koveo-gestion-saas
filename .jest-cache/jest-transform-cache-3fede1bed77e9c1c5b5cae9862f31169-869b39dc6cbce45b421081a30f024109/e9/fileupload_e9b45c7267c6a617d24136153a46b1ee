7cb6f88c54527b4eeb39ea44491fdc9d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUpload = FileUpload;
exports.CompactFileUpload = CompactFileUpload;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const lucide_react_1 = require("lucide-react");
const utils_1 = require("@/lib/utils");
function FileUpload({ onFilesSelect, onFilesRemove, maxFiles = 5, maxSize = 50, acceptedTypes = [
    'image/*',
    '.pdf',
    '.doc',
    '.docx',
    '.txt',
    '.xls',
    '.xlsx',
    '.ppt',
    '.pptx'
], className, disabled = false, allowPaste = true, children }) {
    const [isDragOver, setIsDragOver] = (0, react_1.useState)(false);
    const [files, setFiles] = (0, react_1.useState)([]);
    const fileInputRef = (0, react_1.useRef)(null);
    const uploadAreaRef = (0, react_1.useRef)(null);
    // Convert File to FilePreview
    const processFile = (0, react_1.useCallback)((file) => {
        const isImage = file.type.startsWith('image/');
        const filePreview = {
            file,
            type: isImage ? 'image' : 'document'
        };
        if (isImage) {
            filePreview.preview = URL.createObjectURL(file);
        }
        return filePreview;
    }, []);
    // Validate file size and type
    const validateFile = (0, react_1.useCallback)((file) => {
        // Check file size
        if (file.size > maxSize * 1024 * 1024) {
            return `File "${file.name}" is too large. Maximum size is ${maxSize}MB.`;
        }
        // Check file type
        const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
        const mimeType = file.type;
        const isAccepted = acceptedTypes.some(type => {
            if (type.includes('*')) {
                return mimeType.startsWith(type.replace('*', ''));
            }
            return type === fileExtension || type === mimeType;
        });
        if (!isAccepted) {
            return `File type "${fileExtension}" is not allowed.`;
        }
        return null;
    }, [acceptedTypes, maxSize]);
    // Handle file selection
    const handleFiles = (0, react_1.useCallback)((newFiles) => {
        const fileArray = Array.from(newFiles);
        const validFiles = [];
        const errors = [];
        // Check if adding these files would exceed maxFiles
        if (files.length + fileArray.length > maxFiles) {
            errors.push(`Cannot add ${fileArray.length} files. Maximum ${maxFiles} files allowed.`);
            return;
        }
        fileArray.forEach(file => {
            const error = validateFile(file);
            if (error) {
                errors.push(error);
            }
            else {
                validFiles.push(file);
            }
        });
        if (errors.length > 0) {
            // In a real app, you'd want to show these errors to the user
            console.error('File validation errors:', errors);
            return;
        }
        if (validFiles.length > 0) {
            const newFilePreviews = validFiles.map(processFile);
            setFiles(prev => [...prev, ...newFilePreviews]);
            onFilesSelect(validFiles);
        }
    }, [files.length, maxFiles, validateFile, processFile, onFilesSelect]);
    // Handle drag and drop
    const handleDragOver = (0, react_1.useCallback)((e) => {
        e.preventDefault();
        e.stopPropagation();
        if (!disabled) {
            setIsDragOver(true);
        }
    }, [disabled]);
    const handleDragLeave = (0, react_1.useCallback)((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(false);
    }, []);
    const handleDrop = (0, react_1.useCallback)((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(false);
        if (disabled)
            return;
        const droppedFiles = e.dataTransfer.files;
        if (droppedFiles.length > 0) {
            handleFiles(droppedFiles);
        }
    }, [disabled, handleFiles]);
    // Handle file input change
    const handleFileInputChange = (0, react_1.useCallback)((e) => {
        const selectedFiles = e.target.files;
        if (selectedFiles && selectedFiles.length > 0) {
            handleFiles(selectedFiles);
        }
        // Reset input value to allow selecting the same file again
        e.target.value = '';
    }, [handleFiles]);
    // Handle paste events for screenshots
    const handlePaste = (0, react_1.useCallback)((e) => {
        if (!allowPaste || disabled)
            return;
        const items = e.clipboardData?.items;
        if (!items)
            return;
        const imageFiles = [];
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (item.type.indexOf('image') !== -1) {
                const blob = item.getAsFile();
                if (blob) {
                    // Create a filename for pasted images
                    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                    // Use object spread to create file with proper properties
                    const file = Object.assign(blob, {
                        name: `screenshot-${timestamp}.png`
                    });
                    imageFiles.push(file);
                }
            }
        }
        if (imageFiles.length > 0) {
            e.preventDefault();
            handleFiles(imageFiles);
        }
    }, [allowPaste, disabled, handleFiles]);
    // Set up paste event listener
    (0, react_1.useEffect)(() => {
        if (allowPaste && !disabled) {
            document.addEventListener('paste', handlePaste);
            return () => document.removeEventListener('paste', handlePaste);
        }
    }, [allowPaste, disabled, handlePaste]);
    // Remove file
    const handleRemoveFile = (0, react_1.useCallback)((index) => {
        setFiles(prev => {
            const newFiles = [...prev];
            // Clean up preview URL if it exists
            if (newFiles[index].preview) {
                URL.revokeObjectURL(newFiles[index].preview);
            }
            newFiles.splice(index, 1);
            return newFiles;
        });
        if (onFilesRemove) {
            onFilesRemove(index);
        }
    }, [onFilesRemove]);
    // Clean up preview URLs on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            files.forEach(file => {
                if (file.preview) {
                    URL.revokeObjectURL(file.preview);
                }
            });
        };
    }, [files]);
    const openFileDialog = () => {
        if (!disabled && fileInputRef.current) {
            fileInputRef.current.click();
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("w-full", className), children: [(0, jsx_runtime_1.jsx)("input", { ref: fileInputRef, type: "file", multiple: true, accept: acceptedTypes.join(','), onChange: handleFileInputChange, className: "hidden", disabled: disabled, "data-testid": "file-input" }), (0, jsx_runtime_1.jsx)("div", { ref: uploadAreaRef, onDragOver: handleDragOver, onDragLeave: handleDragLeave, onDrop: handleDrop, onClick: openFileDialog, className: (0, utils_1.cn)("relative border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors", isDragOver
                    ? "border-blue-500 bg-blue-50"
                    : "border-gray-300 hover:border-gray-400", disabled && "cursor-not-allowed opacity-50", className), "data-testid": "upload-area", children: children ? (children) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "mx-auto h-12 w-12 text-gray-400 mb-4" }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-lg font-medium text-gray-900", children: "Drop files here or click to browse" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-gray-500", children: [allowPaste && "You can also paste screenshots (Ctrl+V). ", "Maximum ", maxFiles, " files, up to ", maxSize, "MB each"] }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-400", children: ["Supported: ", acceptedTypes.join(', ')] })] })] })) }), files.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-4 space-y-2", children: [(0, jsx_runtime_1.jsxs)("h4", { className: "text-sm font-medium text-gray-900", children: ["Selected Files (", files.length, "/", maxFiles, ")"] }), (0, jsx_runtime_1.jsx)("div", { className: "space-y-2", children: files.map((filePreview, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3 p-3 bg-gray-50 rounded-lg", "data-testid": `file-preview-${index}`, children: [filePreview.type === 'image' && filePreview.preview ? ((0, jsx_runtime_1.jsx)("img", { src: filePreview.preview, alt: "Preview", className: "w-10 h-10 object-cover rounded" })) : filePreview.type === 'image' ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Image, { className: "w-10 h-10 text-gray-400" })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.File, { className: "w-10 h-10 text-gray-400" })), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 min-w-0", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium text-gray-900 truncate", children: filePreview.file.name }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-500", children: [(filePreview.file.size / 1024 / 1024).toFixed(2), " MB"] })] }), (0, jsx_runtime_1.jsx)("button", { onClick: (e) => {
                                        e.stopPropagation();
                                        handleRemoveFile(index);
                                    }, className: "p-1 hover:bg-gray-200 rounded", disabled: disabled, "data-testid": `remove-file-${index}`, children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4 text-gray-500" }) })] }, index))) })] }))] }));
}
// Compact version for inline use
function CompactFileUpload({ onFilesSelect, maxFiles = 3, acceptedTypes = ['image/*', '.pdf', '.doc', '.docx'], disabled = false, className }) {
    const fileInputRef = (0, react_1.useRef)(null);
    const handleFileChange = (0, react_1.useCallback)((e) => {
        const files = e.target.files;
        if (files && files.length > 0) {
            onFilesSelect(Array.from(files));
        }
        e.target.value = '';
    }, [onFilesSelect]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("inline-block", className), children: [(0, jsx_runtime_1.jsx)("input", { ref: fileInputRef, type: "file", multiple: true, accept: acceptedTypes.join(','), onChange: handleFileChange, className: "hidden", disabled: disabled, "data-testid": "compact-file-input" }), (0, jsx_runtime_1.jsxs)("button", { type: "button", onClick: () => fileInputRef.current?.click(), disabled: disabled, className: (0, utils_1.cn)("inline-flex items-center gap-2 px-3 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500", disabled && "cursor-not-allowed opacity-50"), "data-testid": "compact-upload-button", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: "w-4 h-4" }), "Attach Files"] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,