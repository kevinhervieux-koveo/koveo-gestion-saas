d46f8fd34ee2bf81db622747a1a96259
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureForm = FeatureForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const select_1 = require("@/components/ui/select");
const switch_1 = require("@/components/ui/switch");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const react_query_1 = require("@tanstack/react-query");
const document_management_1 = require("@/components/document-management");
/**
 * Reusable form dialog component for planning feature development.
 * Collects detailed requirements and generates development prompts.
 * Located in forms directory for easy reuse across the application.
 * @param root0 - Component props.
 * @param root0.feature - The feature to edit, null for new features.
 * @param root0.open - Dialog open state.
 * @param root0.onOpenChange - Callback to handle dialog open state changes.
 * @returns Feature form dialog component.
 */
/**
 * FeatureForm function.
 * @param root0
 * @param root0.feature
 * @param root0.open
 * @param root0.onOpenChange
 * @returns Function result.
 */
function FeatureForm({ feature, open, onOpenChange }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // Mutation to create feature in roadmap
    const createFeatureMutation = (0, react_query_1.useMutation)({
        mutationFn: async (featureData) => {
            const response = await fetch('/api/features', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(featureData),
            });
            if (!response.ok) {
                throw new Error('Failed to create feature');
            }
            return response.json();
        },
        onSuccess: (newFeature) => {
            // Invalidate queries to refresh roadmap data
            queryClient.invalidateQueries({ queryKey: ['/api/features'] });
            toast({
                title: 'Feature Integrated',
                description: `"${newFeature.name}" has been successfully added to the roadmap.`,
            });
            // Close the dialog
            handleClose(false);
        },
        onError: () => {
            toast({
                title: 'Integration Failed',
                description: 'Failed to add the feature to the roadmap. Please try again.',
                variant: 'destructive',
            });
        },
    });
    // Mutation to save generated prompt as actionable item
    const savePromptMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ featureId, prompt, title, }) => {
            const response = await fetch(`/api/features/${featureId}/actionable-items/from-prompt`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    prompt,
                    title,
                    description: 'AI-generated development prompt',
                }),
            });
            if (!response.ok) {
                throw new Error('Failed to save prompt as actionable item');
            }
            return response.json();
        },
        onSuccess: () => {
            // Invalidate queries to refresh data
            if (feature?.id) {
                queryClient.invalidateQueries({
                    queryKey: [`/api/features/${feature.id}/actionable-items`],
                });
            }
            toast({
                title: 'Prompt Saved',
                description: 'The development prompt has been saved as an actionable item.',
            });
        },
        onError: () => {
            toast({
                title: 'Save Failed',
                description: 'Failed to save the prompt as an actionable item.',
                variant: 'destructive',
            });
        },
    });
    const [formData, setFormData] = (0, react_1.useState)({
        // New feature fields
        featureName: '',
        featureCategory: 'Compliance & Security', // Default to a valid category
        featureDescription: '',
        isStrategicPath: false,
        // General questions
        businessObjective: '',
        targetUsers: '',
        successMetrics: '',
        priority: '',
        timeline: '',
        // Technical questions
        complexity: '',
        dependencies: '',
        dataRequirements: '',
        integrationNeeds: '',
        securityConsiderations: '',
        // User experience questions
        userFlow: '',
        uiRequirements: '',
        accessibilityNeeds: '',
        // Additional requirements
        performanceRequirements: '',
        testingStrategy: '',
        additionalNotes: '',
        // RBAC requirements
        rbacRequired: false,
        rbacRoles: {
            admin: { read: true, write: true, organizationalLimitation: '' },
            manager: { read: true, write: true, organizationalLimitation: '' },
            owner: { read: true, write: false, organizationalLimitation: '' },
            tenant: { read: false, write: false, organizationalLimitation: '' },
        },
    });
    const [step, setStep] = (0, react_1.useState)('form');
    const [generatedPrompt, setGeneratedPrompt] = (0, react_1.useState)('');
    const [lastSaved, setLastSaved] = (0, react_1.useState)(null);
    const [isDirty, setIsDirty] = (0, react_1.useState)(false);
    const [attachedFiles, setAttachedFiles] = (0, react_1.useState)([]);
    /**
     * Gets the localStorage key for drafts.
     * @returns The localStorage key for feature drafts.
     */
    const getDraftKey = (0, react_1.useCallback)(() => {
        const baseKey = 'koveo-feature-draft';
        return feature?.id ? `${baseKey}-${feature.id}` : `${baseKey}-new`;
    }, [feature?.id]);
    /**
     * Saves form data to localStorage.
     */
    const saveDraft = (0, react_1.useCallback)(() => {
        try {
            const draftData = {
                formData,
                timestamp: new Date().toISOString(),
                featureId: feature?.id || null,
            };
            window.localStorage.setItem(getDraftKey(), JSON.stringify(draftData));
            setLastSaved(new Date());
            setIsDirty(false);
            toast({
                title: 'Draft Saved',
                description: 'Your progress has been automatically saved.',
                duration: 2000,
            });
        }
        catch (error) {
            // Error saving draft
        }
    }, [formData, feature?.id, toast, getDraftKey]);
    /**
     * Loads draft from localStorage.
     */
    const loadDraft = (0, react_1.useCallback)(() => {
        try {
            const savedDraft = window.localStorage.getItem(getDraftKey());
            if (savedDraft) {
                const draftData = JSON.parse(savedDraft);
                const formData = draftData.formData;
                // Fix invalid category if it exists
                if (formData.featureCategory === 'Strategic Path') {
                    formData.featureCategory = 'Compliance & Security';
                }
                setFormData(formData);
                setLastSaved(new Date(draftData.timestamp));
                setIsDirty(false);
            }
        }
        catch (error) {
            // Error loading draft
        }
    }, [feature?.id, getDraftKey]);
    /**
     * Clears the saved draft.
     */
    const clearDraft = (0, react_1.useCallback)(() => {
        try {
            window.localStorage.removeItem(getDraftKey());
            setLastSaved(null);
            setIsDirty(false);
            toast({
                title: 'Draft Cleared',
                description: 'Saved draft has been removed.',
            });
        }
        catch (error) {
            // Error clearing draft
        }
    }, [feature?.id, toast, getDraftKey]);
    /**
     * Updates form data when input values change.
     * @param field - The form field to update.
     * @param value - The new value for the field.
     * @param _value
     */
    const updateFormData = (field, value) => {
        setFormData((prev) => ({ ...prev, [field]: value }));
        setIsDirty(true);
    };
    /**
     * Handle file attachments for mockups, wireframes, or supporting documents.
     */
    const handleFilesSelect = (0, react_1.useCallback)((files) => {
        setAttachedFiles(prev => [...prev, ...files]);
        setIsDirty(true);
    }, []);
    /**
     * Generates a comprehensive development prompt based on the collected requirements.
     */
    const generatePrompt = () => {
        const featureName = feature?.name || formData.featureName || 'New Feature';
        const featureCategory = feature?.category || formData.featureCategory || 'Not specified';
        const featureStatus = feature?.status || 'submitted';
        const featurePriority = formData.priority || feature?.priority || 'Medium';
        const featureDescription = feature?.description || formData.featureDescription || 'Feature description not provided';
        const prompt = `# Feature Development Request: ${featureName}

## 🎯 Overview
**Category:** ${featureCategory}
**Current Status:** ${featureStatus}
**Priority:** ${featurePriority}
**Description:** ${featureDescription}

## 📋 Business Requirements

### Business Objective
${formData.businessObjective || 'Not specified'}

### Target Users
${formData.targetUsers || 'All system users'}

### Success Metrics
${formData.successMetrics || 'Feature completion and user adoption'}

### Timeline
${formData.timeline || 'Standard development timeline'}

## 🔧 Technical Requirements

### Complexity Assessment
${formData.complexity || 'Medium complexity'}

### Dependencies
${formData.dependencies || 'None specified'}

### Data Requirements
${formData.dataRequirements || 'Standard data handling'}

### Integration Needs
${formData.integrationNeeds || 'Standard system integration'}

### Security Considerations
${formData.securityConsiderations || 'Follow standard security practices'}

${formData.rbacRequired
            ? `
### Role-Based Access Control (RBAC)
**RBAC Required:** Yes

**Role Permissions:**
${Object.entries(formData.rbacRoles)
                .filter(([_, permissions]) => permissions.read || permissions.write)
                .map(([role, permissions]) => {
                const accessTypes = [];
                if (permissions.read) {
                    accessTypes.push('Read');
                }
                if (permissions.write) {
                    accessTypes.push('Write');
                }
                const orgLimit = permissions.organizationalLimitation
                    ? ` (${permissions.organizationalLimitation})`
                    : '';
                return `- **${role.replace('_', ' ').toUpperCase()}**: ${accessTypes.join(', ')} access${orgLimit}`;
            })
                .join('\n')}

**Implementation Notes:**
- Use the existing RBAC system in server/auth.ts with requireAuth and authorize middleware
- Apply role-based query scoping using the functions in server/db/queries/scope-query.ts
- Ensure all API endpoints check permissions using the authorize('permission:action') middleware
- Follow the established patterns in config/permissions.json for permission naming
`
            : ''}

## 👤 User Experience Requirements

### User Flow
${formData.userFlow || 'Standard user interaction pattern'}

### UI Requirements
${formData.uiRequirements || 'Follow existing design system (shadcn/ui)'}

### Accessibility Needs
${formData.accessibilityNeeds || 'WCAG 2.1 AA compliance required'}

## ⚡ Performance & Quality Requirements

### Performance Requirements
${formData.performanceRequirements || 'Standard performance expectations'}

### Testing Strategy
${formData.testingStrategy || 'Unit tests, integration tests, and manual testing'}

## 📝 Implementation Guidelines

**CRITICAL: This feature must be implemented with the highest standards of quality, maintainability, and best practices.**

### Code Quality Standards
- Follow TypeScript strict mode and maintain 100% type safety
- Implement comprehensive error handling and user feedback
- Use consistent naming conventions and clear, self-documenting code
- Add thorough JSDoc comments for all exported functions and interfaces
- Maintain test coverage above 90% for all new code

### Architecture & Design Patterns
- Follow the existing project architecture (React + Express + PostgreSQL + Drizzle ORM)
- Use established patterns: React Query for data fetching, Zod for validation
- Implement proper separation of concerns (UI components, business logic, data layer)
- Follow SOLID principles and avoid code duplication
- Use composition over inheritance where applicable

### User Interface Standards
- Use the established shadcn/ui component system exclusively
- Ensure responsive design works on all screen sizes (mobile, tablet, desktop)
- Follow the existing design tokens and color scheme
- Implement proper loading states, error states, and empty states
- Add appropriate micro-interactions and transitions

### Database & Backend Standards
- Create proper database migrations using Drizzle Kit
- Implement input validation on both client and server sides using Zod schemas
- Follow RESTful API conventions and proper HTTP status codes
- Add comprehensive error handling and logging
- Ensure proper data relationships and foreign key constraints

### Security & Performance
- Implement proper authentication and authorization checks
- Sanitize all user inputs to prevent XSS and injection attacks
- Use prepared statements and parameterized queries
- Optimize database queries and add proper indexing
- Implement caching strategies where appropriate

### Testing Requirements
- Write unit tests for all business logic and utility functions
- Add integration tests for API endpoints and database operations
- Include component tests for React components with user interactions
- Test error scenarios and edge cases thoroughly
- Add end-to-end tests for critical user flows

### Documentation & Maintenance
- Update the project's replit.md file with any architectural changes
- Add inline comments explaining complex business logic
- Create clear commit messages following conventional commit format
- Ensure backward compatibility unless explicitly requested otherwise

## 🚀 Additional Notes
${formData.additionalNotes || 'No additional notes'}

## ✅ Definition of Done
- [ ] Feature implemented following all quality standards above
- [ ] All tests pass with >90% coverage for new code
- [ ] Code review completed and approved
- [ ] Documentation updated (JSDoc, inline comments, replit.md if needed)
- [ ] Manual testing completed across different devices and browsers
- [ ] Performance benchmarks meet requirements
- [ ] Security review completed
- [ ] Feature deployed and working in production environment

**Remember: Quality and maintainability are more important than speed. Take the time to implement this feature properly, following all established patterns and best practices in the Koveo Gestion codebase.**`;
        setGeneratedPrompt(prompt);
        setStep('prompt');
        // Save prompt as actionable item if we have a feature ID
        if (feature?.id) {
            savePromptMutation.mutate({
                featureId: feature.id,
                prompt,
                title: `Development Prompt: ${featureName}`,
            });
        }
    };
    /**
     * Copies the generated prompt to clipboard.
     */
    const copyPrompt = async () => {
        try {
            await navigator.clipboard.writeText(generatedPrompt);
            toast({
                title: 'Prompt Copied',
                description: 'The development prompt has been copied to your clipboard.',
            });
        }
        catch (error) {
            console.error('Error copying prompt:', error);
            toast({
                title: 'Copy Failed',
                description: 'Failed to copy prompt to clipboard.',
                variant: 'destructive',
            });
        }
    };
    /**
     * Handles integrating the feature into the roadmap.
     */
    const integrateToRoadmap = () => {
        if (isNewFeature) {
            // For new features, create them in the roadmap with minimal required data
            const featureData = {
                name: formData.featureName,
                description: formData.featureDescription || `Feature: ${formData.featureName}`, // Default description
                category: formData.featureCategory || 'Compliance & Security', // Default category
                status: 'submitted',
                priority: (formData.priority || 'medium'),
                businessObjective: formData.businessObjective || undefined,
                targetUsers: formData.targetUsers || undefined,
                successMetrics: formData.successMetrics || undefined,
                technicalComplexity: formData.complexity || undefined,
                dependencies: formData.dependencies || undefined,
                userFlow: formData.userFlow || undefined,
                isStrategicPath: formData.isStrategicPath,
            };
            createFeatureMutation.mutate(featureData);
        }
        else {
            // For existing features, just close the dialog
            // (they're already in the roadmap)
            toast({
                title: 'Feature Already in Roadmap',
                description: 'This feature is already part of the roadmap.',
            });
            handleClose(false);
        }
    };
    /**
     * Resets the dialog to initial state.
     */
    const resetDialog = () => {
        setStep('form');
        setFormData({
            featureName: '',
            featureCategory: 'Compliance & Security', // Default to a valid category
            featureDescription: '',
            isStrategicPath: false,
            businessObjective: '',
            targetUsers: '',
            successMetrics: '',
            priority: '',
            timeline: '',
            complexity: '',
            dependencies: '',
            dataRequirements: '',
            integrationNeeds: '',
            securityConsiderations: '',
            userFlow: '',
            uiRequirements: '',
            accessibilityNeeds: '',
            performanceRequirements: '',
            testingStrategy: '',
            additionalNotes: '',
            rbacRequired: false,
            rbacRoles: {
                admin: { read: true, write: true, organizationalLimitation: '' },
                manager: { read: true, write: true, organizationalLimitation: '' },
                owner: { read: true, write: false, organizationalLimitation: '' },
                tenant: { read: false, write: false, organizationalLimitation: '' },
            },
        });
        setGeneratedPrompt('');
    };
    const handleClose = (open) => {
        if (!open) {
            if (isDirty) {
                // Save draft before closing if there are unsaved changes
                saveDraft();
            }
            resetDialog();
        }
        onOpenChange(open);
    };
    // Auto-save effect - saves after 3 seconds of inactivity
    (0, react_1.useEffect)(() => {
        if (!isDirty) {
            return;
        }
        const timer = setTimeout(() => {
            saveDraft();
        }, 3000);
        return () => clearTimeout(timer);
    }, [formData, isDirty, saveDraft]);
    // Clear invalid drafts and load draft when form opens
    (0, react_1.useEffect)(() => {
        if (open) {
            // Clear any drafts with invalid "Strategic Path" category
            try {
                const allKeys = Object.keys(window.localStorage);
                const draftKeys = allKeys.filter((key) => key.startsWith('koveo-feature-draft'));
                draftKeys.forEach((key) => {
                    try {
                        const draftData = JSON.parse(window.localStorage.getItem(key) || '{}');
                        if (draftData.formData?.featureCategory === 'Strategic Path') {
                            window.localStorage.removeItem(key);
                        }
                    }
                    catch (error) {
                        // Invalid JSON, remove it
                        window.localStorage.removeItem(key);
                    }
                });
            }
            catch (error) {
                console.error('Error clearing invalid drafts:', error);
            }
            loadDraft();
        }
    }, [open, loadDraft]);
    const isNewFeature = !feature;
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: open, onOpenChange: handleClose, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-4xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'h-5 w-5' }), step === 'form'
                                            ? isNewFeature
                                                ? 'Create New Feature'
                                                : 'Plan Feature Development'
                                            : 'Generated Development Prompt'] }), step === 'form' && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [lastSaved && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1 text-xs text-gray-500', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'h-3 w-3' }), "Saved ", lastSaved.toLocaleTimeString()] })), lastSaved && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'ghost', size: 'sm', onClick: clearDraft, className: 'text-xs text-red-600 hover:text-red-700', children: (0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'h-3 w-3' }) }))] }))] }), isDirty && step === 'form' && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1 text-xs text-amber-600 mt-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'h-3 w-3' }), "Auto-saving in progress..."] }))] }), step === 'form' ? ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6', children: [!isNewFeature && ((0, jsx_runtime_1.jsxs)("div", { className: 'bg-gray-50 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'font-semibold text-lg mb-2', children: feature.name }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 mb-2', children: feature.description }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', children: feature.category }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: feature.status === 'completed' ? 'default' : 'secondary', children: feature.status }), feature.priority && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: feature.priority === 'high' ? 'destructive' : 'secondary', children: feature.priority }))] })] })), isNewFeature && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4 bg-blue-50 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', children: "New Feature Details" }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'featureName', children: "Feature Name *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'featureName', placeholder: 'Enter feature name', value: formData.featureName || '', onChange: (e) => updateFormData('featureName', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'featureCategory', children: "Category" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: formData.featureCategory || '', onValueChange: (_value) => updateFormData('featureCategory', _value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Dashboard & Home', children: "Dashboard & Home" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Property Management', children: "Property Management" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Resident Management', children: "Resident Management" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Financial Management', children: "Financial Management" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Maintenance & Requests', children: "Maintenance & Requests" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Document Management', children: "Document Management" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Communication', children: "Communication" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'AI & Automation', children: "AI & Automation" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Compliance & Security', children: "Compliance & Security" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Analytics & Reporting', children: "Analytics & Reporting" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Integration & API', children: "Integration & API" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Infrastructure & Performance', children: "Infrastructure & Performance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Website', children: "Website" })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'featureDescription', children: "Feature Description" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'featureDescription', placeholder: 'Describe what this feature will do', value: formData.featureDescription || '', onChange: (e) => updateFormData('featureDescription', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3 pt-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'strategic-path', className: 'text-sm font-medium', children: "Strategic Path:" }), (0, jsx_runtime_1.jsx)(switch_1.Switch, { id: 'strategic-path', checked: formData.isStrategicPath, onCheckedChange: (checked) => updateFormData('isStrategicPath', checked), className: 'scale-90' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-gray-500', children: "Mark this feature as part of the strategic roadmap" })] })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', children: "Business Requirements" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'businessObjective', children: "Business Objective *" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'businessObjective', placeholder: 'What problem does this feature solve? What business value does it provide?', value: formData.businessObjective, onChange: (e) => updateFormData('businessObjective', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'targetUsers', children: "Target Users *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'targetUsers', placeholder: 'e.g., Property managers, Tenants, Owners', value: formData.targetUsers, onChange: (e) => updateFormData('targetUsers', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'successMetrics', children: "Success Metrics" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'successMetrics', placeholder: 'How will we measure success? What are the KPIs?', value: formData.successMetrics, onChange: (e) => updateFormData('successMetrics', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'priority', children: "Development Priority" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: formData.priority, onValueChange: (_value) => updateFormData('priority', _value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select priority level' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'critical', children: "Critical" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'high', children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'medium', children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'low', children: "Low" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'timeline', children: "Expected Timeline" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'timeline', placeholder: 'e.g., 2 weeks, 1 month, Next sprint', value: formData.timeline, onChange: (e) => updateFormData('timeline', e.target.value) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', children: "Technical Requirements" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'complexity', children: "Complexity Assessment" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: formData.complexity, onValueChange: (_value) => updateFormData('complexity', _value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Assess technical complexity' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'simple', children: "Simple (1-3 days)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'medium', children: "Medium (1-2 weeks)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'complex', children: "Complex (2-4 weeks)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'very-complex', children: "Very Complex (1+ months)" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'dependencies', children: "Dependencies" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'dependencies', placeholder: 'What other features, APIs, or systems does this depend on?', value: formData.dependencies, onChange: (e) => updateFormData('dependencies', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'dataRequirements', children: "Data Requirements" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'dataRequirements', placeholder: 'What data needs to be stored, modified, or accessed?', value: formData.dataRequirements, onChange: (e) => updateFormData('dataRequirements', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'integrationNeeds', children: "Integration Needs" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'integrationNeeds', placeholder: 'External APIs, services, or third-party integrations needed', value: formData.integrationNeeds, onChange: (e) => updateFormData('integrationNeeds', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'securityConsiderations', children: "Security Considerations" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'securityConsiderations', placeholder: 'Authentication, authorization, data privacy concerns', value: formData.securityConsiderations, onChange: (e) => updateFormData('securityConsiderations', e.target.value) })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', children: "User Experience" }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'userFlow', children: "User Flow *" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'userFlow', placeholder: 'Describe the step-by-step user interaction with this feature', value: formData.userFlow, onChange: (e) => updateFormData('userFlow', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'uiRequirements', children: "UI Requirements" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'uiRequirements', placeholder: 'Specific UI components, layouts, or visual requirements', value: formData.uiRequirements, onChange: (e) => updateFormData('uiRequirements', e.target.value) })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'accessibilityNeeds', children: "Accessibility Needs" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'accessibilityNeeds', placeholder: 'Screen reader support, keyboard navigation, color contrast', value: formData.accessibilityNeeds, onChange: (e) => updateFormData('accessibilityNeeds', e.target.value) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', children: "Quality & Performance" }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'performanceRequirements', children: "Performance Requirements" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'performanceRequirements', placeholder: 'Load times, data processing speed, scalability needs', value: formData.performanceRequirements, onChange: (e) => updateFormData('performanceRequirements', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'testingStrategy', children: "Testing Strategy" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'testingStrategy', placeholder: 'Unit tests, integration tests, user acceptance criteria', value: formData.testingStrategy, onChange: (e) => updateFormData('testingStrategy', e.target.value) })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', children: "Role-Based Access Control (RBAC)" }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'rbacRequired', className: 'text-sm font-medium', children: "Does this feature require RBAC?" }), (0, jsx_runtime_1.jsx)(switch_1.Switch, { id: 'rbacRequired', checked: formData.rbacRequired, onCheckedChange: (checked) => updateFormData('rbacRequired', checked) }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-gray-500', children: "Enable role-based access control for this feature" })] }), formData.rbacRequired && ((0, jsx_runtime_1.jsxs)("div", { className: 'bg-yellow-50 p-4 rounded-lg space-y-4', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-medium text-yellow-800', children: "Configure Role Permissions" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-yellow-700', children: "For each role, specify read/write permissions and organizational limitations." }), Object.entries(formData.rbacRoles).map(([role, permissions]) => ((0, jsx_runtime_1.jsxs)("div", { className: 'bg-white p-3 rounded border', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-between mb-2', children: (0, jsx_runtime_1.jsx)("h5", { className: 'font-medium capitalize text-gray-900', children: role.replace('_', ' ') }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("input", { type: 'checkbox', id: `${role}-read`, checked: permissions.read, onChange: (e) => {
                                                                        const newRoles = { ...formData.rbacRoles };
                                                                        newRoles[role].read =
                                                                            e.target.checked;
                                                                        updateFormData('rbacRoles', newRoles);
                                                                    }, className: 'rounded' }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `${role}-read`, className: 'text-sm', children: "Read Access" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("input", { type: 'checkbox', id: `${role}-write`, checked: permissions.write, onChange: (e) => {
                                                                        const newRoles = { ...formData.rbacRoles };
                                                                        newRoles[role].write =
                                                                            e.target.checked;
                                                                        updateFormData('rbacRoles', newRoles);
                                                                    }, className: 'rounded' }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `${role}-write`, className: 'text-sm', children: "Write Access" })] }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Organizational limitations', value: permissions.organizationalLimitation, onChange: (e) => {
                                                                    const newRoles = { ...formData.rbacRoles };
                                                                    newRoles[role].organizationalLimitation = e.target.value;
                                                                    updateFormData('rbacRoles', newRoles);
                                                                }, className: 'text-xs' }) })] })] }, role)))] }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'additionalNotes', children: "Additional Notes" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'additionalNotes', placeholder: 'Any other requirements, constraints, or considerations', value: formData.additionalNotes, onChange: (e) => updateFormData('additionalNotes', e.target.value) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-3 border-t pt-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: "w-4 h-4 text-gray-500" }), (0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Supporting Documents" }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: "(Optional - Mockups, wireframes, screenshots, requirements docs)" })] }), (0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: (file, extractedText) => {
                                                if (file) {
                                                    handleFilesSelect([file]);
                                                }
                                            }, allowedFileTypes: ['image/*', 'application/pdf', '.doc', '.docx', '.txt', '.fig', '.sketch'], maxFileSize: 25, showCamera: true, compact: true, placeholder: "Upload wireframes, mockups, or requirements" })] }), attachedFiles.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600", children: ["Selected files (", attachedFiles.length, "):"] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-2", children: attachedFiles.map((file, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1 px-2 py-1 bg-gray-100 rounded text-xs", children: [(0, jsx_runtime_1.jsx)("span", { className: "truncate max-w-[100px]", children: file.name }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setAttachedFiles(prev => prev.filter((_, i) => i !== index)), className: "text-gray-500 hover:text-red-500", type: "button", children: "\u00D7" })] }, index))) })] }))] })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'bg-gray-50 p-4 rounded-lg', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between mb-2', children: [(0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600', children: ["Generated development prompt for", ' ', (0, jsx_runtime_1.jsx)("strong", { children: feature?.name || formData.featureName || 'New Feature' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: copyPrompt, size: 'sm', variant: 'outline', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Copy, { className: 'h-4 w-4 mr-1' }), "Copy Prompt"] }), feature?.id && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => savePromptMutation.mutate({
                                                    featureId: feature.id,
                                                    prompt: generatedPrompt,
                                                    title: `Development Prompt: ${feature.name}`,
                                                }), size: 'sm', variant: 'outline', disabled: savePromptMutation.isPending, className: 'bg-green-50 border-green-200 text-green-700 hover:bg-green-100', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: 'h-4 w-4 mr-1' }), savePromptMutation.isPending ? 'Saving...' : 'Save as Task'] }))] })] }) }), (0, jsx_runtime_1.jsx)("div", { className: 'bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-y-auto', children: (0, jsx_runtime_1.jsx)("pre", { className: 'whitespace-pre-wrap', children: generatedPrompt }) })] })), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: integrateToRoadmap, disabled: createFeatureMutation.isPending || (isNewFeature && !formData.featureName.trim()), className: 'bg-blue-50 border-blue-200 text-blue-700 hover:bg-blue-100', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'h-4 w-4 mr-2' }), createFeatureMutation.isPending ? 'Integrating...' : 'Integrate to Roadmap'] }), lastSaved && step === 'form' && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', onClick: clearDraft, className: 'text-red-600 hover:text-red-700', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'h-4 w-4 mr-1' }), "Clear Draft"] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [step === 'form' && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: saveDraft, variant: 'outline', className: 'bg-green-50 border-green-200 text-green-700 hover:bg-green-100', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: 'h-4 w-4 mr-2' }), "Save Progress"] })), step === 'prompt' && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => setStep('form'), children: "Back to Form" })), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: generatePrompt, disabled: !formData.businessObjective ||
                                        !formData.targetUsers ||
                                        !formData.userFlow ||
                                        (isNewFeature && !formData.featureName.trim()), className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Zap, { className: 'h-4 w-4' }), step === 'form' ? 'Generate Prompt' : 'Regenerate'] })] })] })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,