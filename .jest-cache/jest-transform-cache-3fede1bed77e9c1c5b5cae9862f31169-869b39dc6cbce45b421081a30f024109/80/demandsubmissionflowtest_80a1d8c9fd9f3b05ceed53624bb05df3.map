{"file":"/home/runner/workspace/tests/integration/demand-submission-flow.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/demand-submission-flow.test.ts"],"sourcesContent":["/**\n * @file Demand Submission Integration Tests\n * @description Comprehensive tests for the entire demand submission workflow\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport { db } from '../../server/db';\nimport { demands, users, residences, buildings, organizations, userResidences } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Create test app instance\nfunction createTestApp() {\n  const express = require('express');\n  const app = express();\n  \n  // Apply middleware\n  app.use(express.json());\n  \n  // Import and setup routes\n  const { registerRoutes } = require('../../server/routes');\n  registerRoutes(app);\n  \n  return app;\n}\n\ndescribe('Demand Submission Integration Tests', () => {\n  let app: any;\n  let testUser: any;\n  let testBuilding: any;\n  let testResidence: any;\n  let testOrganization: any;\n  let authCookie: string;\n\n  beforeEach(async () => {\n    app = createTestApp();\n\n    // Create test organization\n    const orgResult = await db.insert(organizations).values({\n      name: 'Test Organization',\n      type: 'residential',\n      address: '123 Test St',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H1H 1H1',\n      isActive: true,\n    }).returning();\n    testOrganization = orgResult[0];\n\n    // Create test building\n    const buildingResult = await db.insert(buildings).values({\n      name: 'Test Building',\n      address: '456 Test Ave',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H2H 2H2',\n      buildingType: 'condo',\n      organizationId: testOrganization.id,\n      totalUnits: 10,\n      isActive: true,\n    }).returning();\n    testBuilding = buildingResult[0];\n\n    // Create test residence\n    const residenceResult = await db.insert(residences).values({\n      buildingId: testBuilding.id,\n      unitNumber: '101',\n      floor: 1,\n      squareFootage: '1000',\n      bedrooms: 2,\n      bathrooms: '1',\n      balcony: false,\n      isActive: true,\n    }).returning();\n    testResidence = residenceResult[0];\n\n    // Create test user\n    const userResult = await db.insert(users).values({\n      username: 'testuser',\n      firstName: 'Test',\n      lastName: 'User',\n      email: 'test@example.com',\n      password: 'hashed_password',\n      role: 'resident',\n      isActive: true,\n    }).returning();\n    testUser = userResult[0];\n\n    // Associate user with residence\n    await db.insert(userResidences).values({\n      userId: testUser.id,\n      residenceId: testResidence.id,\n      relationshipType: 'resident',\n      startDate: new Date().toISOString().split('T')[0],\n      isActive: true,\n    });\n\n    // Mock authentication\n    authCookie = 'test-session-cookie';\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    try {\n      await db.delete(userResidences).where(eq(userResidences.userId, testUser.id));\n      await db.delete(demands).where(eq(demands.submitterId, testUser.id));\n      await db.delete(users).where(eq(users.id, testUser.id));\n      await db.delete(residences).where(eq(residences.id, testResidence.id));\n      await db.delete(buildings).where(eq(buildings.id, testBuilding.id));\n      await db.delete(organizations).where(eq(organizations.id, testOrganization.id));\n    } catch (error) {\n      console.error('Cleanup error:', error);\n    }\n  });\n\n  describe('POST /api/demands', () => {\n    it('should successfully create a demand with all fields provided', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Water leak in bathroom ceiling',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        status: 'submitted',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        type: 'maintenance',\n        description: 'Water leak in bathroom ceiling',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        submitterId: testUser.id,\n        status: 'submitted',\n      });\n\n      expect(response.body.id).toBeDefined();\n      expect(response.body.createdAt).toBeDefined();\n    });\n\n    it('should auto-populate building and residence from user data when not provided', async () => {\n      const demandData = {\n        type: 'complaint',\n        description: 'Noise complaint from upstairs neighbor',\n        status: 'submitted',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        type: 'complaint',\n        description: 'Noise complaint from upstairs neighbor',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        submitterId: testUser.id,\n        status: 'submitted',\n      });\n    });\n\n    it('should accept only buildingId and auto-populate residenceId', async () => {\n      const demandData = {\n        type: 'information',\n        description: 'Question about building policies',\n        buildingId: testBuilding.id,\n        status: 'submitted',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        type: 'information',\n        description: 'Question about building policies',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        submitterId: testUser.id,\n        status: 'submitted',\n      });\n    });\n\n    it('should accept only residenceId and auto-populate buildingId', async () => {\n      const demandData = {\n        type: 'other',\n        description: 'General inquiry about residence',\n        residenceId: testResidence.id,\n        status: 'submitted',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        type: 'other',\n        description: 'General inquiry about residence',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        submitterId: testUser.id,\n        status: 'submitted',\n      });\n    });\n\n    it('should require authentication', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test demand without auth',\n      };\n\n      await request(app)\n        .post('/api/demands')\n        .send(demandData)\n        .expect(401);\n    });\n\n    it('should validate required fields', async () => {\n      const invalidDemands = [\n        { type: 'maintenance' }, // Missing description\n        { description: 'Test' }, // Missing type\n        { type: 'invalid_type', description: 'Test' }, // Invalid type\n        { type: 'maintenance', description: 'Short' }, // Description too short\n      ];\n\n      for (const invalidDemand of invalidDemands) {\n        await request(app)\n          .post('/api/demands')\n          .set('Cookie', authCookie)\n          .send(invalidDemand)\n          .expect(400);\n      }\n    });\n\n    it('should handle assignation fields properly', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Maintenance request with assignation',\n        assignationBuildingId: testBuilding.id,\n        assignationResidenceId: testResidence.id,\n        status: 'submitted',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        type: 'maintenance',\n        description: 'Maintenance request with assignation',\n        assignationBuildingId: testBuilding.id,\n        assignationResidenceId: testResidence.id,\n        submitterId: testUser.id,\n        status: 'submitted',\n      });\n    });\n\n    it('should handle special characters in description', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Réparation nécessaire avec caractères spéciaux: éàùç! 🏠',\n        status: 'submitted',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body.description).toBe('Réparation nécessaire avec caractères spéciaux: éàùç! 🏠');\n    });\n\n    it('should default to submitted status when not provided', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test demand without status',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body.status).toBe('submitted');\n    });\n\n    it('should validate description length boundaries', async () => {\n      const validMinDescription = 'a'.repeat(10); // Minimum valid\n      const validMaxDescription = 'a'.repeat(2000); // Maximum valid\n      const invalidShortDescription = 'a'.repeat(9); // Too short\n      const invalidLongDescription = 'a'.repeat(2001); // Too long\n\n      // Valid cases\n      for (const description of [validMinDescription, validMaxDescription]) {\n        await request(app)\n          .post('/api/demands')\n          .set('Cookie', authCookie)\n          .send({\n            type: 'maintenance',\n            description,\n          })\n          .expect(201);\n      }\n\n      // Invalid cases\n      for (const description of [invalidShortDescription, invalidLongDescription]) {\n        await request(app)\n          .post('/api/demands')\n          .set('Cookie', authCookie)\n          .send({\n            type: 'maintenance',\n            description,\n          })\n          .expect(400);\n      }\n    });\n  });\n\n  describe('GET /api/demands', () => {\n    it('should retrieve user demands after creation', async () => {\n      // Create a demand first\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test demand for retrieval',\n        status: 'submitted',\n      };\n\n      const createResponse = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      // Retrieve demands\n      const getResponse = await request(app)\n        .get('/api/demands')\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(getResponse.body).toBeInstanceOf(Array);\n      expect(getResponse.body.length).toBeGreaterThan(0);\n      \n      const retrievedDemand = getResponse.body.find((d: any) => d.id === createResponse.body.id);\n      expect(retrievedDemand).toMatchObject({\n        type: 'maintenance',\n        description: 'Test demand for retrieval',\n        submitterId: testUser.id,\n        status: 'submitted',\n      });\n    });\n\n    it('should include related data in demand retrieval', async () => {\n      // Create a demand\n      await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send({\n          type: 'maintenance',\n          description: 'Test demand with relations',\n        })\n        .expect(201);\n\n      // Retrieve demands\n      const response = await request(app)\n        .get('/api/demands')\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body.length).toBeGreaterThan(0);\n      const demand = response.body[0];\n\n      // Check related data is included\n      expect(demand.submitter).toBeDefined();\n      expect(demand.submitter.email).toBe(testUser.email);\n      expect(demand.building).toBeDefined();\n      expect(demand.building.name).toBe(testBuilding.name);\n      expect(demand.residence).toBeDefined();\n      expect(demand.residence.unitNumber).toBe(testResidence.unitNumber);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database errors gracefully', async () => {\n      // Test with invalid UUID format\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test with invalid UUID',\n        buildingId: 'invalid-uuid',\n      };\n\n      await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(400);\n    });\n\n    it('should handle user without residence assignment', async () => {\n      // Remove user-residence association\n      await db.delete(userResidences).where(eq(userResidences.userId, testUser.id));\n\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test without residence',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(400);\n\n      expect(response.body.message).toContain('residence');\n    });\n  });\n\n  describe('Frontend Form Compatibility', () => {\n    it('should handle empty string fields like frontend forms', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test with empty string fields',\n        buildingId: '', // Empty string should be treated as undefined\n        residenceId: '',\n        assignationBuildingId: '',\n        assignationResidenceId: '',\n        status: 'submitted',\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      // Should auto-populate building and residence\n      expect(response.body.buildingId).toBe(testBuilding.id);\n      expect(response.body.residenceId).toBe(testResidence.id);\n    });\n\n    it('should handle undefined optional fields', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test with undefined fields',\n        buildingId: undefined,\n        residenceId: undefined,\n        assignationBuildingId: undefined,\n        assignationResidenceId: undefined,\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body.buildingId).toBe(testBuilding.id);\n      expect(response.body.residenceId).toBe(testResidence.id);\n    });\n  });\n});"],"version":3}