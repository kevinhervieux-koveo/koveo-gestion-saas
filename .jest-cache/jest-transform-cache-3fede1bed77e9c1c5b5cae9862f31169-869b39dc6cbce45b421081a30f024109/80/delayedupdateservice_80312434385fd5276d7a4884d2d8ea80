079e0de5ecc8051e747d346e90d4e44f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.delayedUpdateService = void 0;
const money_flow_automation_1 = require("./money-flow-automation");
const monthly_budget_service_1 = require("./monthly-budget-service");
/**
 * Service to handle delayed updates to money_flow and budget tables.
 * Waits 15 minutes after a dependency update before triggering regeneration.
 */
class DelayedUpdateService {
    static instance;
    DELAY_MINUTES = 15;
    DELAY_MS = this.DELAY_MINUTES * 60 * 1000; // 15 minutes in milliseconds
    // Track pending updates to avoid duplicates
    pendingBillUpdates = new Set();
    pendingResidenceUpdates = new Set();
    pendingBuildingBudgetUpdates = new Set();
    /**
     *
     */
    constructor() {
    }
    /**
     *
     */
    static getInstance() {
        if (!DelayedUpdateService.instance) {
            DelayedUpdateService.instance = new DelayedUpdateService();
        }
        return DelayedUpdateService.instance;
    }
    /**
     * Schedule money flow update for a bill after 15-minute delay.
     * @param billId
     */
    scheduleBillUpdate(billId) {
        // Avoid duplicate updates for the same bill
        if (this.pendingBillUpdates.has(billId)) {
            return;
        }
        this.pendingBillUpdates.add(billId);
        console.log(`‚è∞ Scheduling money flow update for bill ${billId} in ${this.DELAY_MINUTES} minutes`);
        setTimeout(async () => {
            try {
                // Generate money flow entries for the bill
                const moneyFlowEntries = await money_flow_automation_1.moneyFlowAutomationService.generateForBill(billId);
                // Get the building ID from the bill to update budgets
                const buildingId = await this.getBuildingIdFromBill(billId);
                if (buildingId) {
                    await this.scheduleBudgetUpdate(buildingId);
                }
            }
            finally {
                this.pendingBillUpdates.delete(billId);
            }
        }, this.DELAY_MS);
    }
    /**
     * Schedule money flow update for a residence after 15-minute delay.
     * @param residenceId
     */
    scheduleResidenceUpdate(residenceId) {
        // Avoid duplicate updates for the same residence
        if (this.pendingResidenceUpdates.has(residenceId)) {
            return;
        }
        this.pendingResidenceUpdates.add(residenceId);
        console.log(`‚è∞ Scheduling money flow update for residence ${residenceId} in ${this.DELAY_MINUTES} minutes`);
        setTimeout(async () => {
            try {
                // Generate money flow entries for the residence
                const moneyFlowEntries = await money_flow_automation_1.moneyFlowAutomationService.generateForResidence(residenceId);
                console.log(`üí∞ Generated ${moneyFlowEntries} money flow entries for residence ${residenceId}`);
                // Get the building ID from the residence to update budgets
                const buildingId = await this.getBuildingIdFromResidence(residenceId);
                if (buildingId) {
                    await this.scheduleBudgetUpdate(buildingId);
                }
            }
            finally {
                this.pendingResidenceUpdates.delete(residenceId);
            }
        }, this.DELAY_MS);
    }
    /**
     * Schedule budget update for a building after money flow changes.
     * This is called internally after money flow updates complete.
     * @param buildingId
     */
    async scheduleBudgetUpdate(buildingId) {
        // Avoid duplicate updates for the same building
        if (this.pendingBuildingBudgetUpdates.has(buildingId)) {
            console.log(`üè¢ Building ${buildingId} already has a pending budget update, skipping duplicate`);
            return;
        }
        this.pendingBuildingBudgetUpdates.add(buildingId);
        console.log(`‚è∞ Scheduling budget update for building ${buildingId} in ${this.DELAY_MINUTES} minutes`);
        setTimeout(async () => {
            try {
                // Repopulate budget entries for the building
                const budgetEntries = await monthly_budget_service_1.monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);
            }
            finally {
                this.pendingBuildingBudgetUpdates.delete(buildingId);
            }
        }, this.DELAY_MS);
    }
    /**
     * Get building ID from bill ID.
     * @param billId
     */
    async getBuildingIdFromBill(billId) {
        try {
            const { db } = await Promise.resolve().then(() => __importStar(require('../db')));
            const { bills } = await Promise.resolve().then(() => __importStar(require('@shared/schema')));
            const { eq } = await Promise.resolve().then(() => __importStar(require('drizzle-orm')));
            const result = await db
                .select({ buildingId: bills.buildingId })
                .from(bills)
                .where(eq(bills.id, billId))
                .limit(1);
            return result.length > 0 ? result[0].buildingId : null;
        }
        catch (error) {
            console.error('‚ùå Error getting building ID:', error);
            return null;
        }
    }
    /**
     * Get building ID from residence ID.
     * @param residenceId
     */
    async getBuildingIdFromResidence(residenceId) {
        try {
            const { db } = await Promise.resolve().then(() => __importStar(require('../db')));
            const { residences } = await Promise.resolve().then(() => __importStar(require('@shared/schema')));
            const { eq } = await Promise.resolve().then(() => __importStar(require('drizzle-orm')));
            const result = await db
                .select({ buildingId: residences.buildingId })
                .from(residences)
                .where(eq(residences.id, residenceId))
                .limit(1);
            return result.length > 0 ? result[0].buildingId : null;
        }
        catch (error) {
            console.error('‚ùå Error getting building ID:', error);
            return null;
        }
    }
    /**
     * Force immediate update (for testing or urgent updates).
     * @param billId
     */
    async forceImmediateBillUpdate(billId) {
        // Generate money flow entries for the bill
        const moneyFlowEntries = await money_flow_automation_1.moneyFlowAutomationService.generateForBill(billId);
        // Update budget immediately
        const buildingId = await this.getBuildingIdFromBill(billId);
        if (buildingId) {
            const budgetEntries = await monthly_budget_service_1.monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);
        }
    }
    /**
     * Force immediate update (for testing or urgent updates).
     * @param residenceId
     */
    async forceImmediateResidenceUpdate(residenceId) {
        // Generate money flow entries for the residence
        const moneyFlowEntries = await money_flow_automation_1.moneyFlowAutomationService.generateForResidence(residenceId);
        console.log(`üí∞ Generated ${moneyFlowEntries} money flow entries for residence ${residenceId}`);
        // Update budget immediately
        const buildingId = await this.getBuildingIdFromResidence(residenceId);
        if (buildingId) {
            const budgetEntries = await monthly_budget_service_1.monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);
        }
    }
    /**
     * Get current status of pending updates.
     */
    getStatus() {
        return {
            delayMinutes: this.DELAY_MINUTES,
            pendingBillUpdates: this.pendingBillUpdates.size,
            pendingResidenceUpdates: this.pendingResidenceUpdates.size,
            pendingBudgetUpdates: this.pendingBuildingBudgetUpdates.size,
        };
    }
}
// Export singleton instance
exports.delayedUpdateService = DelayedUpdateService.getInstance();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,