0d47f57db6673a41c3cb693c9117e523
"use strict";
/**
 * @file Demand Submission Integration Tests
 * @description Comprehensive tests for the entire demand submission workflow
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
// Create test app instance
function createTestApp() {
    const express = require('express');
    const app = express();
    // Apply middleware
    app.use(express.json());
    // Import and setup routes
    const { registerRoutes } = require('../../server/routes');
    registerRoutes(app);
    return app;
}
(0, globals_1.describe)('Demand Submission Integration Tests', () => {
    let app;
    let testUser;
    let testBuilding;
    let testResidence;
    let testOrganization;
    let authCookie;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Create test organization
        const orgResult = await db_1.db.insert(schema_1.organizations).values({
            name: 'Test Organization',
            type: 'residential',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            isActive: true,
        }).returning();
        testOrganization = orgResult[0];
        // Create test building
        const buildingResult = await db_1.db.insert(schema_1.buildings).values({
            name: 'Test Building',
            address: '456 Test Ave',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H2H 2H2',
            buildingType: 'condo',
            organizationId: testOrganization.id,
            totalUnits: 10,
            isActive: true,
        }).returning();
        testBuilding = buildingResult[0];
        // Create test residence
        const residenceResult = await db_1.db.insert(schema_1.residences).values({
            buildingId: testBuilding.id,
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1',
            balcony: false,
            isActive: true,
        }).returning();
        testResidence = residenceResult[0];
        // Create test user
        const userResult = await db_1.db.insert(schema_1.users).values({
            username: 'testuser',
            firstName: 'Test',
            lastName: 'User',
            email: 'test@example.com',
            password: 'hashed_password',
            role: 'resident',
            isActive: true,
        }).returning();
        testUser = userResult[0];
        // Associate user with residence
        await db_1.db.insert(schema_1.userResidences).values({
            userId: testUser.id,
            residenceId: testResidence.id,
            relationshipType: 'resident',
            startDate: new Date().toISOString().split('T')[0],
            isActive: true,
        });
        // Mock authentication
        authCookie = 'test-session-cookie';
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        try {
            await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testUser.id));
            await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.submitterId, testUser.id));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, testUser.id));
            await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidence.id));
            await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, testBuilding.id));
            await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testOrganization.id));
        }
        catch (error) {
            console.error('Cleanup error:', error);
        }
    });
    (0, globals_1.describe)('POST /api/demands', () => {
        (0, globals_1.it)('should successfully create a demand with all fields provided', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Water leak in bathroom ceiling',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                status: 'submitted',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                type: 'maintenance',
                description: 'Water leak in bathroom ceiling',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                submitterId: testUser.id,
                status: 'submitted',
            });
            (0, globals_1.expect)(response.body.id).toBeDefined();
            (0, globals_1.expect)(response.body.createdAt).toBeDefined();
        });
        (0, globals_1.it)('should auto-populate building and residence from user data when not provided', async () => {
            const demandData = {
                type: 'complaint',
                description: 'Noise complaint from upstairs neighbor',
                status: 'submitted',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                type: 'complaint',
                description: 'Noise complaint from upstairs neighbor',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                submitterId: testUser.id,
                status: 'submitted',
            });
        });
        (0, globals_1.it)('should accept only buildingId and auto-populate residenceId', async () => {
            const demandData = {
                type: 'information',
                description: 'Question about building policies',
                buildingId: testBuilding.id,
                status: 'submitted',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                type: 'information',
                description: 'Question about building policies',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                submitterId: testUser.id,
                status: 'submitted',
            });
        });
        (0, globals_1.it)('should accept only residenceId and auto-populate buildingId', async () => {
            const demandData = {
                type: 'other',
                description: 'General inquiry about residence',
                residenceId: testResidence.id,
                status: 'submitted',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                type: 'other',
                description: 'General inquiry about residence',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                submitterId: testUser.id,
                status: 'submitted',
            });
        });
        (0, globals_1.it)('should require authentication', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Test demand without auth',
            };
            await (0, supertest_1.default)(app)
                .post('/api/demands')
                .send(demandData)
                .expect(401);
        });
        (0, globals_1.it)('should validate required fields', async () => {
            const invalidDemands = [
                { type: 'maintenance' }, // Missing description
                { description: 'Test' }, // Missing type
                { type: 'invalid_type', description: 'Test' }, // Invalid type
                { type: 'maintenance', description: 'Short' }, // Description too short
            ];
            for (const invalidDemand of invalidDemands) {
                await (0, supertest_1.default)(app)
                    .post('/api/demands')
                    .set('Cookie', authCookie)
                    .send(invalidDemand)
                    .expect(400);
            }
        });
        (0, globals_1.it)('should handle assignation fields properly', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Maintenance request with assignation',
                assignationBuildingId: testBuilding.id,
                assignationResidenceId: testResidence.id,
                status: 'submitted',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                type: 'maintenance',
                description: 'Maintenance request with assignation',
                assignationBuildingId: testBuilding.id,
                assignationResidenceId: testResidence.id,
                submitterId: testUser.id,
                status: 'submitted',
            });
        });
        (0, globals_1.it)('should handle special characters in description', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Réparation nécessaire avec caractères spéciaux: éàùç! 🏠',
                status: 'submitted',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body.description).toBe('Réparation nécessaire avec caractères spéciaux: éàùç! 🏠');
        });
        (0, globals_1.it)('should default to submitted status when not provided', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Test demand without status',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body.status).toBe('submitted');
        });
        (0, globals_1.it)('should validate description length boundaries', async () => {
            const validMinDescription = 'a'.repeat(10); // Minimum valid
            const validMaxDescription = 'a'.repeat(2000); // Maximum valid
            const invalidShortDescription = 'a'.repeat(9); // Too short
            const invalidLongDescription = 'a'.repeat(2001); // Too long
            // Valid cases
            for (const description of [validMinDescription, validMaxDescription]) {
                await (0, supertest_1.default)(app)
                    .post('/api/demands')
                    .set('Cookie', authCookie)
                    .send({
                    type: 'maintenance',
                    description,
                })
                    .expect(201);
            }
            // Invalid cases
            for (const description of [invalidShortDescription, invalidLongDescription]) {
                await (0, supertest_1.default)(app)
                    .post('/api/demands')
                    .set('Cookie', authCookie)
                    .send({
                    type: 'maintenance',
                    description,
                })
                    .expect(400);
            }
        });
    });
    (0, globals_1.describe)('GET /api/demands', () => {
        (0, globals_1.it)('should retrieve user demands after creation', async () => {
            // Create a demand first
            const demandData = {
                type: 'maintenance',
                description: 'Test demand for retrieval',
                status: 'submitted',
            };
            const createResponse = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            // Retrieve demands
            const getResponse = await (0, supertest_1.default)(app)
                .get('/api/demands')
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(getResponse.body).toBeInstanceOf(Array);
            (0, globals_1.expect)(getResponse.body.length).toBeGreaterThan(0);
            const retrievedDemand = getResponse.body.find((d) => d.id === createResponse.body.id);
            (0, globals_1.expect)(retrievedDemand).toMatchObject({
                type: 'maintenance',
                description: 'Test demand for retrieval',
                submitterId: testUser.id,
                status: 'submitted',
            });
        });
        (0, globals_1.it)('should include related data in demand retrieval', async () => {
            // Create a demand
            await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send({
                type: 'maintenance',
                description: 'Test demand with relations',
            })
                .expect(201);
            // Retrieve demands
            const response = await (0, supertest_1.default)(app)
                .get('/api/demands')
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
            const demand = response.body[0];
            // Check related data is included
            (0, globals_1.expect)(demand.submitter).toBeDefined();
            (0, globals_1.expect)(demand.submitter.email).toBe(testUser.email);
            (0, globals_1.expect)(demand.building).toBeDefined();
            (0, globals_1.expect)(demand.building.name).toBe(testBuilding.name);
            (0, globals_1.expect)(demand.residence).toBeDefined();
            (0, globals_1.expect)(demand.residence.unitNumber).toBe(testResidence.unitNumber);
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle database errors gracefully', async () => {
            // Test with invalid UUID format
            const demandData = {
                type: 'maintenance',
                description: 'Test with invalid UUID',
                buildingId: 'invalid-uuid',
            };
            await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(400);
        });
        (0, globals_1.it)('should handle user without residence assignment', async () => {
            // Remove user-residence association
            await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testUser.id));
            const demandData = {
                type: 'maintenance',
                description: 'Test without residence',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(400);
            (0, globals_1.expect)(response.body.message).toContain('residence');
        });
    });
    (0, globals_1.describe)('Frontend Form Compatibility', () => {
        (0, globals_1.it)('should handle empty string fields like frontend forms', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Test with empty string fields',
                buildingId: '', // Empty string should be treated as undefined
                residenceId: '',
                assignationBuildingId: '',
                assignationResidenceId: '',
                status: 'submitted',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            // Should auto-populate building and residence
            (0, globals_1.expect)(response.body.buildingId).toBe(testBuilding.id);
            (0, globals_1.expect)(response.body.residenceId).toBe(testResidence.id);
        });
        (0, globals_1.it)('should handle undefined optional fields', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Test with undefined fields',
                buildingId: undefined,
                residenceId: undefined,
                assignationBuildingId: undefined,
                assignationResidenceId: undefined,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body.buildingId).toBe(testBuilding.id);
            (0, globals_1.expect)(response.body.residenceId).toBe(testResidence.id);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,