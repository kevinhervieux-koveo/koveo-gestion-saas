bfdb2acfe1e12ed0c03f05f825559dcb
"use strict";
/**
 * @file Demand Comment Schema Unit Tests
 * @description Comprehensive tests for demand comment validation schemas and business logic
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const operations_test_1 = require("../../../shared/schemas/operations-test");
(0, globals_1.describe)('Demand Comment Schema Validation Tests', () => {
    (0, globals_1.describe)('insertDemandCommentSchema', () => {
        (0, globals_1.it)('should accept valid comment data', () => {
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'This is a valid comment on the demand.',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should require demandId field', () => {
            const invalidComment = {
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Comment without demand ID',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should require commenterId field', () => {
            const invalidComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commentText: 'Comment without commenter ID',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should require commentText field', () => {
            const invalidComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should validate UUID format for demandId', () => {
            const invalidComment = {
                demandId: 'invalid-uuid',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Valid comment text',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should validate UUID format for commenterId', () => {
            const invalidComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: 'invalid-uuid',
                commentText: 'Valid comment text',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should reject empty comment text', () => {
            const invalidComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: '',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should accept minimum length comment text', () => {
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'A',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should accept maximum length comment text', () => {
            const longText = 'A'.repeat(1000);
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: longText,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should reject comment text exceeding maximum length', () => {
            const tooLongText = 'A'.repeat(1001);
            const invalidComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: tooLongText,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should accept optional commentType field', () => {
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Comment with type',
                commentType: 'update',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should accept optional isInternal field', () => {
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Internal comment',
                isInternal: true,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should default isInternal to false when not provided', () => {
            const comment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Public comment',
            };
            const parsed = operations_test_1.insertDemandCommentSchema.parse(comment);
            (0, globals_1.expect)(parsed.isInternal).toBe(false);
        });
        (0, globals_1.it)('should handle French characters in comment text', () => {
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Réparation nécessaire avec caractères spéciaux: éàùç!',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should handle emojis and special characters', () => {
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Great work! 👍 Thanks for fixing this issue @#$%^&*()',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should handle multiline comment text', () => {
            const multilineComment = `This is a multiline comment.
      
      It contains multiple paragraphs and should be accepted.
      
      End of comment.`;
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: multilineComment,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should validate complete comment with all optional fields', () => {
            const completeComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Complete comment with all fields',
                commentType: 'status_update',
                isInternal: false,
            };
            const parsed = operations_test_1.insertDemandCommentSchema.parse(completeComment);
            (0, globals_1.expect)(parsed.demandId).toBe(completeComment.demandId);
            (0, globals_1.expect)(parsed.commenterId).toBe(completeComment.commenterId);
            (0, globals_1.expect)(parsed.commentText).toBe(completeComment.commentText);
            (0, globals_1.expect)(parsed.commentType).toBe(completeComment.commentType);
            (0, globals_1.expect)(parsed.isInternal).toBe(completeComment.isInternal);
        });
        (0, globals_1.it)('should handle whitespace in comment text', () => {
            const commentWithWhitespace = '   This comment has leading and trailing spaces   ';
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: commentWithWhitespace,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should accept whitespace in comment text', () => {
            const whitespaceComment = '   \n\t   This has whitespace   \r\n   ';
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: whitespaceComment,
            };
            // Schema validation allows whitespace as long as there's content
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should validate different comment types', () => {
            const commentTypes = ['update', 'question', 'answer', 'status_change', 'internal_note'];
            commentTypes.forEach(type => {
                const validComment = {
                    demandId: '123e4567-e89b-12d3-a456-426614174000',
                    commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                    commentText: `Comment of type ${type}`,
                    commentType: type,
                };
                (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
            });
        });
        (0, globals_1.it)('should handle edge cases for boolean isInternal field', () => {
            const testCases = [
                { isInternal: true, expected: true },
                { isInternal: false, expected: false },
                { isInternal: 'true', expected: true }, // String coercion
                { isInternal: 'false', expected: false }, // String coercion
                { isInternal: 1, expected: true }, // Number coercion
                { isInternal: 0, expected: false }, // Number coercion
            ];
            testCases.forEach(({ isInternal, expected }) => {
                const comment = {
                    demandId: '123e4567-e89b-12d3-a456-426614174000',
                    commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                    commentText: 'Test comment',
                    isInternal,
                };
                try {
                    const parsed = operations_test_1.insertDemandCommentSchema.parse(comment);
                    (0, globals_1.expect)(parsed.isInternal).toBe(expected);
                }
                catch (error) {
                    // Some coercions might not be supported by Zod, that's acceptable
                }
            });
        });
        (0, globals_1.it)('should preserve comment text exactly as provided', () => {
            const originalText = 'This comment has "quotes" and \'apostrophes\' and $pecial characters!';
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: originalText,
            };
            const parsed = operations_test_1.insertDemandCommentSchema.parse(validComment);
            (0, globals_1.expect)(parsed.commentText).toBe(originalText);
        });
        (0, globals_1.it)('should handle very long comment type strings', () => {
            const longCommentType = 'very_long_comment_type_name_that_might_be_used_in_some_cases';
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Comment with long type',
                commentType: longCommentType,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
    });
    (0, globals_1.describe)('Comment Business Logic Validation', () => {
        (0, globals_1.it)('should validate that demandId corresponds to existing demand', () => {
            // This would typically be handled at the database/API level, but we can test the schema validation
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Comment for existing demand',
            };
            const parsed = operations_test_1.insertDemandCommentSchema.parse(validComment);
            (0, globals_1.expect)(parsed.demandId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
        });
        (0, globals_1.it)('should validate that commenterId corresponds to authenticated user', () => {
            // Schema validation for user ID format
            const validComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Comment from authenticated user',
            };
            const parsed = operations_test_1.insertDemandCommentSchema.parse(validComment);
            (0, globals_1.expect)(parsed.commenterId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);
        });
        (0, globals_1.it)('should handle comments with Quebec-specific formatting requirements', () => {
            const quebecComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Commentaire en français avec numéro de téléphone (514) 555-1234 et code postal H3H 2Y7',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(quebecComment)).not.toThrow();
        });
        (0, globals_1.it)('should validate internal vs external comment permissions', () => {
            // Test both internal and external comments
            const externalComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'External comment visible to all',
                isInternal: false,
            };
            const internalComment = {
                demandId: '123e4567-e89b-12d3-a456-426614174000',
                commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                commentText: 'Internal comment for staff only',
                isInternal: true,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(externalComment)).not.toThrow();
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(internalComment)).not.toThrow();
        });
    });
    (0, globals_1.describe)('Comment Error Message Quality', () => {
        (0, globals_1.it)('should provide helpful error messages for validation failures', () => {
            const testCases = [
                {
                    data: { commentText: 'Missing required fields' },
                    shouldFail: true,
                    expectedField: 'demandId',
                },
                {
                    data: {
                        demandId: 'invalid-uuid',
                        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                        commentText: 'Valid text',
                    },
                    shouldFail: true,
                    expectedField: 'demandId',
                },
                {
                    data: {
                        demandId: '123e4567-e89b-12d3-a456-426614174000',
                        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                        commentText: '',
                    },
                    shouldFail: true,
                    expectedField: 'commentText',
                },
                {
                    data: {
                        demandId: '123e4567-e89b-12d3-a456-426614174000',
                        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',
                        commentText: 'A'.repeat(1001),
                    },
                    shouldFail: true,
                    expectedField: 'commentText',
                },
            ];
            testCases.forEach(({ data, shouldFail, expectedField }) => {
                if (shouldFail) {
                    try {
                        operations_test_1.insertDemandCommentSchema.parse(data);
                        fail(`Expected validation to fail for field: ${expectedField}`);
                    }
                    catch (error) {
                        (0, globals_1.expect)(error).toBeDefined();
                        // Check that it's a Zod error and has the expected structure
                        if (error.issues) {
                            (0, globals_1.expect)(error.issues.length).toBeGreaterThan(0);
                        }
                    }
                }
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,