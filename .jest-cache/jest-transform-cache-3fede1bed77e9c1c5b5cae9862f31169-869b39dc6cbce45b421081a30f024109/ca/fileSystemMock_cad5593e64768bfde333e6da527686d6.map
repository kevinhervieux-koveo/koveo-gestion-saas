{"file":"/home/runner/workspace/tests/mocks/fileSystemMock.js","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/mocks/fileSystemMock.js"],"sourcesContent":["/**\n * Mock for file system operations to prevent hanging during tests\n */\n\nconst mockStats = {\n  isFile: jest.fn().mockReturnValue(true),\n  isDirectory: jest.fn().mockReturnValue(false),\n  size: 1024,\n  mtime: new Date(),\n  ctime: new Date(),\n  atime: new Date()\n};\n\nconst mockFs = {\n  // File operations\n  readFileSync: jest.fn().mockReturnValue('mock file content'),\n  writeFileSync: jest.fn(),\n  readFile: jest.fn().mockImplementation((path, callback) => {\n    if (typeof callback === 'function') {\n      callback(null, 'mock file content');\n    }\n  }),\n  writeFile: jest.fn().mockImplementation((path, data, callback) => {\n    if (typeof callback === 'function') {\n      callback(null);\n    }\n  }),\n  \n  // Directory operations\n  mkdirSync: jest.fn(),\n  mkdir: jest.fn().mockImplementation((path, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n    if (typeof callback === 'function') {\n      callback(null);\n    }\n  }),\n  readdirSync: jest.fn().mockReturnValue(['file1.txt', 'file2.txt']),\n  readdir: jest.fn().mockImplementation((path, callback) => {\n    callback(null, ['file1.txt', 'file2.txt']);\n  }),\n  \n  // File existence and stats\n  existsSync: jest.fn().mockReturnValue(true),\n  exists: jest.fn().mockImplementation((path, callback) => {\n    callback(true);\n  }),\n  statSync: jest.fn().mockReturnValue(mockStats),\n  stat: jest.fn().mockImplementation((path, callback) => {\n    callback(null, mockStats);\n  }),\n  lstatSync: jest.fn().mockReturnValue(mockStats),\n  lstat: jest.fn().mockImplementation((path, callback) => {\n    callback(null, mockStats);\n  }),\n  \n  // File removal\n  unlinkSync: jest.fn(),\n  unlink: jest.fn().mockImplementation((path, callback) => {\n    if (typeof callback === 'function') {\n      callback(null);\n    }\n  }),\n  rmSync: jest.fn(),\n  rmdirSync: jest.fn(),\n  rmdir: jest.fn().mockImplementation((path, callback) => {\n    callback(null);\n  }),\n  \n  // File access\n  accessSync: jest.fn(),\n  access: jest.fn().mockImplementation((path, mode, callback) => {\n    if (typeof mode === 'function') {\n      callback = mode;\n    }\n    callback(null);\n  }),\n  \n  // Copy operations\n  copyFileSync: jest.fn(),\n  copyFile: jest.fn().mockImplementation((src, dest, callback) => {\n    callback(null);\n  }),\n  \n  // Constants\n  constants: {\n    F_OK: 0,\n    R_OK: 4,\n    W_OK: 2,\n    X_OK: 1\n  },\n  \n  // Streams\n  createReadStream: jest.fn().mockReturnValue({\n    pipe: jest.fn(),\n    on: jest.fn(),\n    once: jest.fn(),\n    emit: jest.fn(),\n    read: jest.fn(),\n    destroy: jest.fn()\n  }),\n  createWriteStream: jest.fn().mockReturnValue({\n    write: jest.fn(),\n    end: jest.fn(),\n    on: jest.fn(),\n    once: jest.fn(),\n    emit: jest.fn(),\n    destroy: jest.fn()\n  })\n};\n\n// Import real path to avoid breaking Jest internals\nconst realPath = require.cache[require.resolve('path')] ? require.cache[require.resolve('path')].exports : require('path');\n\n// Create a more robust path mock that preserves core functionality\nconst mockPath = {\n  // Use real implementations for core functions to avoid breaking Jest\n  join: realPath.join,\n  resolve: realPath.resolve,\n  dirname: realPath.dirname,\n  basename: realPath.basename,\n  extname: realPath.extname,\n  parse: realPath.parse,\n  sep: realPath.sep,\n  delimiter: realPath.delimiter,\n  posix: realPath.posix,\n  win32: realPath.win32,\n  \n  // Add any additional mock functionality if needed\n  _isMocked: true\n};\n\n// Mock multer for file uploads\nconst mockMulter = jest.fn().mockImplementation((options = {}) => {\n  const storage = options.storage || {};\n  \n  return {\n    single: jest.fn().mockImplementation((fieldName) => (req, res, next) => {\n      req.file = {\n        fieldname: fieldName,\n        originalname: 'test-file.txt',\n        encoding: '7bit',\n        mimetype: 'text/plain',\n        buffer: Buffer.from('test content'),\n        size: 12,\n        filename: 'test-file.txt',\n        path: '/mock/uploads/test-file.txt'\n      };\n      next();\n    }),\n    \n    array: jest.fn().mockImplementation((fieldName, maxCount) => (req, res, next) => {\n      req.files = [\n        {\n          fieldname: fieldName,\n          originalname: 'test-file-1.txt',\n          encoding: '7bit',\n          mimetype: 'text/plain',\n          buffer: Buffer.from('test content 1'),\n          size: 14,\n          filename: 'test-file-1.txt',\n          path: '/mock/uploads/test-file-1.txt'\n        }\n      ];\n      next();\n    }),\n    \n    fields: jest.fn().mockImplementation((fields) => (req, res, next) => {\n      req.files = {};\n      fields.forEach(field => {\n        req.files[field.name] = [{\n          fieldname: field.name,\n          originalname: `test-${field.name}.txt`,\n          encoding: '7bit',\n          mimetype: 'text/plain',\n          buffer: Buffer.from(`test content for ${field.name}`),\n          size: 20,\n          filename: `test-${field.name}.txt`,\n          path: `/mock/uploads/test-${field.name}.txt`\n        }];\n      });\n      next();\n    }),\n    \n    any: jest.fn().mockImplementation(() => (req, res, next) => {\n      req.files = [\n        {\n          fieldname: 'files',\n          originalname: 'test-any.txt',\n          encoding: '7bit',\n          mimetype: 'text/plain',\n          buffer: Buffer.from('test any content'),\n          size: 16,\n          filename: 'test-any.txt',\n          path: '/mock/uploads/test-any.txt'\n        }\n      ];\n      next();\n    })\n  };\n});\n\n// Mock multer storage engines\nmockMulter.diskStorage = jest.fn().mockImplementation((options = {}) => ({\n  _handleFile: jest.fn(),\n  _removeFile: jest.fn()\n}));\n\nmockMulter.memoryStorage = jest.fn().mockImplementation(() => ({\n  _handleFile: jest.fn(),\n  _removeFile: jest.fn()\n}));\n\nmodule.exports = {\n  fs: mockFs,\n  path: mockPath,\n  multer: mockMulter,\n  default: mockFs\n};"],"version":3}