7907da01f1661529bedcbcbd0f818f33
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedUploader = SharedUploader;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const lucide_react_1 = require("lucide-react");
const utils_1 = require("@/lib/utils");
const tabs_1 = require("@/components/ui/tabs");
const textarea_1 = require("@/components/ui/textarea");
const label_1 = require("@/components/ui/label");
const switch_1 = require("@/components/ui/switch");
const badge_1 = require("@/components/ui/badge");
const upload_config_1 = require("@shared/config/upload-config");
const DEFAULT_ALLOWED_TYPES = [
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'image/jpeg',
    'image/jpg',
    'image/png'
];
/**
 * SharedUploader - A reusable component for file uploads and text creation
 * Features mobile camera integration, drag-and-drop, clipboard paste, and text input
 */
function SharedUploader({ onDocumentChange, allowedFileTypes, maxFileSize, disabled = false, className, defaultTab = 'file', 
// AI Enhancement Props
formType = 'documents', uploadContext, aiAnalysisEnabled: propAiEnabled, onAiToggle, onAiAnalysisComplete, showAiToggle = true, contextFields }) {
    // Get configuration from upload config
    const config = (0, upload_config_1.getUploadConfig)(formType);
    const finalAllowedTypes = allowedFileTypes || config.allowedFileTypes;
    const finalMaxFileSize = maxFileSize || config.maxFileSize;
    const finalAiEnabled = propAiEnabled ?? config.aiAnalysisEnabled;
    // State management
    const [activeTab, setActiveTab] = (0, react_1.useState)(defaultTab);
    const [isDragOver, setIsDragOver] = (0, react_1.useState)(false);
    const [selectedFile, setSelectedFile] = (0, react_1.useState)(null);
    const [textContent, setTextContent] = (0, react_1.useState)('');
    const [validationError, setValidationError] = (0, react_1.useState)(null);
    const [aiEnabled, setAiEnabled] = (0, react_1.useState)(finalAiEnabled);
    const [isAnalyzing, setIsAnalyzing] = (0, react_1.useState)(false);
    // Refs
    const fileInputRef = (0, react_1.useRef)(null);
    const uploadAreaRef = (0, react_1.useRef)(null);
    // Handle AI toggle
    const handleAiToggle = (0, react_1.useCallback)((enabled) => {
        setAiEnabled(enabled);
        onAiToggle?.(enabled);
    }, [onAiToggle]);
    // File validation function
    const validateFile = (0, react_1.useCallback)((file) => {
        // Check file size
        if (file.size > finalMaxFileSize * 1024 * 1024) {
            return `File size exceeds ${finalMaxFileSize}MB limit`;
        }
        // Check file type
        const isAllowed = finalAllowedTypes.some(type => {
            if (type.includes('*')) {
                return file.type.startsWith(type.replace('*', ''));
            }
            return file.type === type;
        });
        if (!isAllowed) {
            return `File type "${file.type}" is not supported`;
        }
        // Check filename for security
        if (file.name.includes('..') || file.name.includes('/') || file.name.includes('\\')) {
            return 'Invalid filename detected';
        }
        return null;
    }, [finalAllowedTypes, finalMaxFileSize]);
    // AI Analysis function
    const performAiAnalysis = (0, react_1.useCallback)(async (file) => {
        if (!aiEnabled || !onAiAnalysisComplete)
            return;
        setIsAnalyzing(true);
        try {
            // Create FormData for AI analysis
            const formData = new FormData();
            formData.append('document', file);
            formData.append('formType', formType);
            if (uploadContext) {
                formData.append('uploadContext', JSON.stringify(uploadContext));
            }
            // Make AI analysis request
            const response = await fetch('/api/ai/analyze-document', {
                method: 'POST',
                body: formData,
                credentials: 'include'
            });
            if (response.ok) {
                const result = await response.json();
                onAiAnalysisComplete(result);
            }
        }
        catch (error) {
            console.error('AI analysis failed:', error);
        }
        finally {
            setIsAnalyzing(false);
        }
    }, [aiEnabled, onAiAnalysisComplete, formType, uploadContext]);
    // Process and validate file
    const processFile = (0, react_1.useCallback)((file) => {
        const error = validateFile(file);
        if (error) {
            setValidationError(error);
            return;
        }
        setValidationError(null);
        const isImage = file.type.startsWith('image/');
        const filePreview = {
            file,
            type: isImage ? 'image' : 'document'
        };
        if (isImage) {
            filePreview.preview = URL.createObjectURL(file);
        }
        setSelectedFile(filePreview);
        onDocumentChange(file, null);
        // Trigger AI analysis if enabled
        if (aiEnabled) {
            performAiAnalysis(file);
        }
    }, [validateFile, onDocumentChange, aiEnabled, performAiAnalysis]);
    // Handle file selection from input
    const handleFileSelect = (0, react_1.useCallback)((e) => {
        const file = e.target.files?.[0];
        if (file) {
            processFile(file);
        }
        // Reset input to allow selecting the same file again
        e.target.value = '';
    }, [processFile]);
    // Handle drag and drop
    const handleDragOver = (0, react_1.useCallback)((e) => {
        e.preventDefault();
        e.stopPropagation();
        if (!disabled) {
            setIsDragOver(true);
        }
    }, [disabled]);
    const handleDragLeave = (0, react_1.useCallback)((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(false);
    }, []);
    const handleDrop = (0, react_1.useCallback)((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(false);
        if (disabled)
            return;
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            processFile(files[0]); // Only handle first file
        }
    }, [disabled, processFile]);
    // Handle clipboard paste for screenshots
    const handlePaste = (0, react_1.useCallback)((e) => {
        if (disabled || activeTab !== 'file')
            return;
        const items = e.clipboardData?.items;
        if (!items)
            return;
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            if (item.type.indexOf('image') !== -1) {
                const blob = item.getAsFile();
                if (blob) {
                    e.preventDefault();
                    // Create proper File object for pasted images
                    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                    const file = new lucide_react_1.File([blob], `screenshot-${timestamp}.png`, {
                        type: 'image/png'
                    });
                    processFile(file);
                    break;
                }
            }
        }
    }, [disabled, activeTab, processFile]);
    // Set up paste event listener
    (0, react_1.useEffect)(() => {
        if (activeTab === 'file' && !disabled) {
            document.addEventListener('paste', handlePaste);
            return () => document.removeEventListener('paste', handlePaste);
        }
    }, [activeTab, disabled, handlePaste]);
    // Handle text content changes
    const handleTextChange = (0, react_1.useCallback)((e) => {
        const text = e.target.value;
        setTextContent(text);
        onDocumentChange(null, text || null);
    }, [onDocumentChange]);
    // Remove selected file
    const handleRemoveFile = (0, react_1.useCallback)(() => {
        if (selectedFile?.preview) {
            URL.revokeObjectURL(selectedFile.preview);
        }
        setSelectedFile(null);
        setValidationError(null);
        onDocumentChange(null, null);
    }, [selectedFile, onDocumentChange]);
    // Open file dialog
    const openFileDialog = (0, react_1.useCallback)(() => {
        if (!disabled && fileInputRef.current) {
            fileInputRef.current.click();
        }
    }, [disabled]);
    // Tab change handler
    const handleTabChange = (0, react_1.useCallback)((value) => {
        setActiveTab(value);
        // Clear current selection when switching tabs
        if (selectedFile) {
            handleRemoveFile();
        }
        if (textContent) {
            setTextContent('');
            onDocumentChange(null, null);
        }
    }, [selectedFile, textContent, handleRemoveFile, onDocumentChange]);
    // Clean up preview URLs on unmount
    (0, react_1.useEffect)(() => {
        return () => {
            if (selectedFile?.preview) {
                URL.revokeObjectURL(selectedFile.preview);
            }
        };
    }, [selectedFile]);
    const formatFileSize = (bytes) => {
        const kb = bytes / 1024;
        if (kb < 1024)
            return `${kb.toFixed(1)} KB`;
        const mb = kb / 1024;
        return `${mb.toFixed(1)} MB`;
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)("w-full", className), children: [showAiToggle && config.aiAnalysisEnabled !== undefined && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg mb-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-4 h-4 text-purple-500" }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "ai-toggle", className: "text-sm font-medium", children: "AI Analysis" }), aiEnabled && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: "text-xs", children: "Enabled" }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(switch_1.Switch, { id: "ai-toggle", checked: aiEnabled, onCheckedChange: handleAiToggle, disabled: disabled, "data-testid": "switch-ai-analysis" }), isAnalyzing && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1 text-sm text-blue-600 dark:text-blue-400", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-3 w-3 border-b-2 border-blue-600" }), "Analyzing..."] }))] })] })), (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { value: activeTab, onValueChange: handleTabChange, className: "w-full", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: "grid w-full grid-cols-2", children: [(0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: "file", "data-testid": "tab-upload-file", children: "\uD83D\uDCC1 Upload File" }), (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: "text", "data-testid": "tab-text-document", children: "\uD83D\uDCDD Text Document" })] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsContent, { value: "file", className: "space-y-4", children: [(0, jsx_runtime_1.jsx)("input", { ref: fileInputRef, type: "file", accept: finalAllowedTypes.join(','), capture: "environment" // Mobile camera integration for rear camera
                                , onChange: handleFileSelect, className: "hidden", disabled: disabled, "data-testid": "file-input-mobile" }), (0, jsx_runtime_1.jsx)("div", { ref: uploadAreaRef, onDragOver: handleDragOver, onDragLeave: handleDragLeave, onDrop: handleDrop, onClick: openFileDialog, className: (0, utils_1.cn)("relative border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors min-h-[120px] flex flex-col justify-center items-center", isDragOver
                                    ? "border-blue-500 bg-blue-50 dark:bg-blue-950"
                                    : "border-gray-300 hover:border-gray-400 dark:border-gray-600 dark:hover:border-gray-500", disabled && "cursor-not-allowed opacity-50"), "data-testid": "upload-area", children: selectedFile ? (
                                // File preview
                                (0, jsx_runtime_1.jsxs)("div", { className: "w-full space-y-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg", children: [selectedFile.type === 'image' && selectedFile.preview ? ((0, jsx_runtime_1.jsx)("img", { src: selectedFile.preview, alt: "Preview", className: "w-12 h-12 object-cover rounded" })) : selectedFile.type === 'image' ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Image, { className: "w-12 h-12 text-gray-400" })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.File, { className: "w-12 h-12 text-gray-400" })), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 min-w-0 text-left", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-gray-100 truncate", children: selectedFile.file.name }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: formatFileSize(selectedFile.file.size) })] }), (0, jsx_runtime_1.jsx)("button", { onClick: (e) => {
                                                        e.stopPropagation();
                                                        handleRemoveFile();
                                                    }, className: "p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded", disabled: disabled, "data-testid": "remove-file-button", children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4 text-gray-500" }) })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-green-600 dark:text-green-400", children: "\u2713 File ready for upload" })] })) : (
                                // Upload prompt
                                (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-center space-x-2 mb-3", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "h-8 w-8 text-gray-400" }), (0, jsx_runtime_1.jsx)(lucide_react_1.Camera, { className: "h-6 w-6 text-blue-500" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-lg font-medium text-gray-900 dark:text-gray-100", children: "Drop files here or click to browse" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "\uD83D\uDCF1 On mobile: Tap to use camera or select from gallery" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: "\uD83D\uDCBB On desktop: Drag & drop, click to browse, or paste screenshots (Ctrl+V)" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-400 dark:text-gray-500", children: ["Maximum ", finalMaxFileSize, "MB \u2022 ", finalAllowedTypes.map(type => {
                                                            if (type.includes('image'))
                                                                return 'Images';
                                                            if (type.includes('pdf'))
                                                                return 'PDF';
                                                            if (type.includes('word'))
                                                                return 'DOCX';
                                                            if (type.includes('excel') || type.includes('sheet'))
                                                                return 'XLSX';
                                                            return type.split('/').pop()?.toUpperCase();
                                                        }).filter(Boolean).join(', ')] }), aiEnabled && ((0, jsx_runtime_1.jsx)("p", { className: "text-xs text-purple-500 dark:text-purple-400 mt-1", children: "\u2728 AI analysis will extract key information automatically" }))] })] })) }), validationError && ((0, jsx_runtime_1.jsx)("div", { className: "p-3 bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg", children: (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-red-600 dark:text-red-400", children: ["\u274C ", validationError] }) }))] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "text", className: "space-y-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "text-content", className: "text-sm font-medium", children: "Document Content" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "text-content", placeholder: "Enter your document content here...", value: textContent, onChange: handleTextChange, disabled: disabled, rows: 8, className: "resize-none", "data-testid": "textarea-document-content" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: "Create a text-only document entry. You can add formatting and additional details later." })] }) })] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,