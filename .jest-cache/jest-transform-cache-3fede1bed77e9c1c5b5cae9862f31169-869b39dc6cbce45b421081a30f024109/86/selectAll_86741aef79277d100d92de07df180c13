67e894713d906408cd30a31e05c67309
'use strict';
var UI = require('../../document/UI.js');
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
var selection = require('../../utils/focus/selection.js');
var setSelection = require('./setSelection.js');
/**
 * Expand a selection like the browser does when pressing Ctrl+A.
 */ function selectAll(target) {
    if (selection.hasOwnSelection(target)) {
        return setSelection.setSelection({
            focusNode: target,
            anchorOffset: 0,
            focusOffset: UI.getUIValue(target).length
        });
    }
    var _getContentEditable;
    const focusNode = (_getContentEditable = isContentEditable.getContentEditable(target)) !== null && _getContentEditable !== undefined ? _getContentEditable : target.ownerDocument.body;
    setSelection.setSelection({
        focusNode,
        anchorOffset: 0,
        focusOffset: focusNode.childNodes.length
    });
}
function isAllSelected(target) {
    if (selection.hasOwnSelection(target)) {
        return UI.getUISelection(target).startOffset === 0 && UI.getUISelection(target).endOffset === UI.getUIValue(target).length;
    }
    var _getContentEditable;
    const focusNode = (_getContentEditable = isContentEditable.getContentEditable(target)) !== null && _getContentEditable !== undefined ? _getContentEditable : target.ownerDocument.body;
    const selection$1 = target.ownerDocument.getSelection();
    return (selection$1 === null || selection$1 === undefined ? undefined : selection$1.anchorNode) === focusNode && selection$1.focusNode === focusNode && selection$1.anchorOffset === 0 && selection$1.focusOffset === focusNode.childNodes.length;
}
exports.isAllSelected = isAllSelected;
exports.selectAll = selectAll;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDekMsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDakQsSUFBSSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUN6RSxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUMxRCxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUVoRDs7R0FFRyxDQUFDLFNBQVMsU0FBUyxDQUFDLE1BQU07SUFDekIsSUFBSSxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDcEMsT0FBTyxZQUFZLENBQUMsWUFBWSxDQUFDO1lBQzdCLFNBQVMsRUFBRSxNQUFNO1lBQ2pCLFlBQVksRUFBRSxDQUFDO1lBQ2YsV0FBVyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTTtTQUM1QyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsSUFBSSxtQkFBbUIsQ0FBQztJQUN4QixNQUFNLFNBQVMsR0FBRyxDQUFDLG1CQUFtQixHQUFHLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLG1CQUFtQixLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ3ZMLFlBQVksQ0FBQyxZQUFZLENBQUM7UUFDdEIsU0FBUztRQUNULFlBQVksRUFBRSxDQUFDO1FBQ2YsV0FBVyxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTTtLQUMzQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBQ0QsU0FBUyxhQUFhLENBQUMsTUFBTTtJQUN6QixJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNwQyxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMvSCxDQUFDO0lBQ0QsSUFBSSxtQkFBbUIsQ0FBQztJQUN4QixNQUFNLFNBQVMsR0FBRyxDQUFDLG1CQUFtQixHQUFHLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLG1CQUFtQixLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ3ZMLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEQsT0FBTyxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEtBQUssU0FBUyxJQUFJLFdBQVcsQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLFdBQVcsQ0FBQyxZQUFZLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBQyxXQUFXLEtBQUssU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7QUFDdFAsQ0FBQztBQUVELE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudC9kaXN0L2Nqcy9ldmVudC9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFVJID0gcmVxdWlyZSgnLi4vLi4vZG9jdW1lbnQvVUkuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciBpc0NvbnRlbnRFZGl0YWJsZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvaXNDb250ZW50RWRpdGFibGUuanMnKTtcbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlscy9mb2N1cy9zZWxlY3Rpb24uanMnKTtcbnZhciBzZXRTZWxlY3Rpb24gPSByZXF1aXJlKCcuL3NldFNlbGVjdGlvbi5qcycpO1xuXG4vKipcbiAqIEV4cGFuZCBhIHNlbGVjdGlvbiBsaWtlIHRoZSBicm93c2VyIGRvZXMgd2hlbiBwcmVzc2luZyBDdHJsK0EuXG4gKi8gZnVuY3Rpb24gc2VsZWN0QWxsKHRhcmdldCkge1xuICAgIGlmIChzZWxlY3Rpb24uaGFzT3duU2VsZWN0aW9uKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHNldFNlbGVjdGlvbi5zZXRTZWxlY3Rpb24oe1xuICAgICAgICAgICAgZm9jdXNOb2RlOiB0YXJnZXQsXG4gICAgICAgICAgICBhbmNob3JPZmZzZXQ6IDAsXG4gICAgICAgICAgICBmb2N1c09mZnNldDogVUkuZ2V0VUlWYWx1ZSh0YXJnZXQpLmxlbmd0aFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdmFyIF9nZXRDb250ZW50RWRpdGFibGU7XG4gICAgY29uc3QgZm9jdXNOb2RlID0gKF9nZXRDb250ZW50RWRpdGFibGUgPSBpc0NvbnRlbnRFZGl0YWJsZS5nZXRDb250ZW50RWRpdGFibGUodGFyZ2V0KSkgIT09IG51bGwgJiYgX2dldENvbnRlbnRFZGl0YWJsZSAhPT0gdW5kZWZpbmVkID8gX2dldENvbnRlbnRFZGl0YWJsZSA6IHRhcmdldC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgc2V0U2VsZWN0aW9uLnNldFNlbGVjdGlvbih7XG4gICAgICAgIGZvY3VzTm9kZSxcbiAgICAgICAgYW5jaG9yT2Zmc2V0OiAwLFxuICAgICAgICBmb2N1c09mZnNldDogZm9jdXNOb2RlLmNoaWxkTm9kZXMubGVuZ3RoXG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc0FsbFNlbGVjdGVkKHRhcmdldCkge1xuICAgIGlmIChzZWxlY3Rpb24uaGFzT3duU2VsZWN0aW9uKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIFVJLmdldFVJU2VsZWN0aW9uKHRhcmdldCkuc3RhcnRPZmZzZXQgPT09IDAgJiYgVUkuZ2V0VUlTZWxlY3Rpb24odGFyZ2V0KS5lbmRPZmZzZXQgPT09IFVJLmdldFVJVmFsdWUodGFyZ2V0KS5sZW5ndGg7XG4gICAgfVxuICAgIHZhciBfZ2V0Q29udGVudEVkaXRhYmxlO1xuICAgIGNvbnN0IGZvY3VzTm9kZSA9IChfZ2V0Q29udGVudEVkaXRhYmxlID0gaXNDb250ZW50RWRpdGFibGUuZ2V0Q29udGVudEVkaXRhYmxlKHRhcmdldCkpICE9PSBudWxsICYmIF9nZXRDb250ZW50RWRpdGFibGUgIT09IHVuZGVmaW5lZCA/IF9nZXRDb250ZW50RWRpdGFibGUgOiB0YXJnZXQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNvbnN0IHNlbGVjdGlvbiQxID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIChzZWxlY3Rpb24kMSA9PT0gbnVsbCB8fCBzZWxlY3Rpb24kMSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VsZWN0aW9uJDEuYW5jaG9yTm9kZSkgPT09IGZvY3VzTm9kZSAmJiBzZWxlY3Rpb24kMS5mb2N1c05vZGUgPT09IGZvY3VzTm9kZSAmJiBzZWxlY3Rpb24kMS5hbmNob3JPZmZzZXQgPT09IDAgJiYgc2VsZWN0aW9uJDEuZm9jdXNPZmZzZXQgPT09IGZvY3VzTm9kZS5jaGlsZE5vZGVzLmxlbmd0aDtcbn1cblxuZXhwb3J0cy5pc0FsbFNlbGVjdGVkID0gaXNBbGxTZWxlY3RlZDtcbmV4cG9ydHMuc2VsZWN0QWxsID0gc2VsZWN0QWxsO1xuIl0sInZlcnNpb24iOjN9