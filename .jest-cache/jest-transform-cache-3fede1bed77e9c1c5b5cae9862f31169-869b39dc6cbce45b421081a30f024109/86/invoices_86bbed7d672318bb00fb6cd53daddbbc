104e4abcf20daf99950813ce8d4df4fa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aiExtractionResponseSchema = exports.invoiceFormSchema = exports.baseInvoiceInsertSchema = exports.insertInvoiceSchema = exports.invoices = exports.invoiceFrequencyEnum = exports.invoicePaymentTypeEnum = void 0;
exports.convertAiResponseToFormData = convertAiResponseToFormData;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const drizzle_zod_1 = require("drizzle-zod");
const zod_1 = require("zod");
const core_1 = require("./core");
const property_1 = require("./property");
const documents_1 = require("./documents");
// Invoice-specific enums following exact requirements
exports.invoicePaymentTypeEnum = (0, pg_core_1.pgEnum)('invoice_payment_type', [
    'one-time',
    'recurring'
]);
exports.invoiceFrequencyEnum = (0, pg_core_1.pgEnum)('invoice_frequency', [
    'monthly',
    'quarterly',
    'annually',
    'custom'
]);
/**
 * Invoices table for AI-powered invoice management.
 * Integrates with document management system and supports recurring payments
 * with standard frequencies (monthly, quarterly, annually) and custom scheduling.
 */
exports.invoices = (0, pg_core_1.pgTable)('invoices', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    // Core invoice fields as specified in requirements
    vendorName: (0, pg_core_1.text)('vendor_name').notNull(),
    invoiceNumber: (0, pg_core_1.text)('invoice_number').notNull(),
    totalAmount: (0, pg_core_1.decimal)('total_amount', { precision: 12, scale: 2 }).notNull(),
    dueDate: (0, pg_core_1.date)('due_date').notNull(),
    // Payment structure fields
    paymentType: (0, exports.invoicePaymentTypeEnum)('payment_type').notNull(),
    // Recurring payment fields (conditional based on paymentType)
    frequency: (0, exports.invoiceFrequencyEnum)('frequency'), // Only for recurring payments
    startDate: (0, pg_core_1.date)('start_date'), // For standard frequencies (not custom)
    customPaymentDates: (0, pg_core_1.date)('custom_payment_dates').array(), // Only for custom frequency
    // Document integration - links to uploaded invoice file (optional for testing)
    documentId: (0, pg_core_1.varchar)('document_id')
        .references(() => documents_1.documents.id),
    // AI extraction tracking
    isAiExtracted: (0, pg_core_1.boolean)('is_ai_extracted').default(false).notNull(),
    aiExtractionData: (0, pg_core_1.jsonb)('ai_extraction_data'), // Raw AI response for debugging
    extractionConfidence: (0, pg_core_1.decimal)('extraction_confidence', { precision: 5, scale: 4 }), // AI confidence score
    // Building/residence association
    buildingId: (0, pg_core_1.varchar)('building_id').references(() => property_1.buildings.id),
    residenceId: (0, pg_core_1.varchar)('residence_id').references(() => property_1.residences.id),
    // Audit fields
    createdBy: (0, pg_core_1.varchar)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow().notNull(),
});
// Zod validation schemas with conditional logic for recurring payments
exports.insertInvoiceSchema = (0, drizzle_zod_1.createInsertSchema)(exports.invoices, {
    // Core field validations
    vendorName: zod_1.z.string().min(1, 'Vendor name is required').max(255, 'Vendor name too long'),
    invoiceNumber: zod_1.z.string().min(1, 'Invoice number is required').max(100, 'Invoice number too long'),
    totalAmount: zod_1.z.coerce.number().positive('Total amount must be positive'),
    dueDate: zod_1.z.coerce.date(),
    // Payment type validation
    paymentType: zod_1.z.enum(['one-time', 'recurring']),
    // Frequency validation (only for recurring)
    frequency: zod_1.z.enum(['monthly', 'quarterly', 'annually', 'custom']).optional(),
    // Start date validation (for standard frequencies)
    startDate: zod_1.z.coerce.date().optional(),
    // Custom dates validation (only for custom frequency)
    customPaymentDates: zod_1.z.array(zod_1.z.coerce.date()).optional().refine((dates) => !dates || dates.length === 0 || dates.every(date => date instanceof Date && !isNaN(date.getTime())), "All custom payment dates must be valid dates"),
    // Document reference (optional for testing)
    documentId: zod_1.z.string().uuid('Invalid document ID').optional(),
    // Optional associations
    buildingId: zod_1.z.string().uuid().optional(),
    residenceId: zod_1.z.string().uuid().optional(),
    // AI fields
    isAiExtracted: zod_1.z.boolean().default(false),
    extractionConfidence: zod_1.z.coerce.number().min(0).max(1).optional(),
}).omit({
    id: true,
    createdAt: true,
    updatedAt: true
});
// Base insert schema without refinements
exports.baseInvoiceInsertSchema = exports.insertInvoiceSchema;
// Enhanced validation with conditional logic for recurring payments
exports.invoiceFormSchema = zod_1.z.object({
    title: zod_1.z.string().min(1, 'Title is required'),
    description: zod_1.z.string().optional(),
    amount: zod_1.z.string().min(1, 'Amount is required'),
    dueDate: zod_1.z.coerce.date(),
    category: zod_1.z.string().min(1, 'Category is required'),
    paymentType: zod_1.z.enum(['one-time', 'recurring']),
    frequency: zod_1.z.enum(['monthly', 'quarterly', 'annually', 'custom']).optional(),
    startDate: zod_1.z.coerce.date().optional(),
    customPaymentDates: zod_1.z.array(zod_1.z.coerce.date()).optional(),
    documentId: zod_1.z.string().uuid('Invalid document ID').optional(),
    buildingId: zod_1.z.string().uuid().optional(),
    residenceId: zod_1.z.string().uuid().optional(),
    isAiExtracted: zod_1.z.boolean().default(false),
    extractionConfidence: zod_1.z.coerce.number().min(0).max(1).optional(),
}).superRefine((data, ctx) => {
    // Recurring payment validation
    if (data.paymentType === 'recurring') {
        if (!data.frequency) {
            ctx.addIssue({
                code: zod_1.z.ZodIssueCode.custom,
                message: 'Frequency is required for recurring payments',
                path: ['frequency'],
            });
        }
        // Standard frequency validation (monthly, quarterly, annually)
        if (data.frequency && ['monthly', 'quarterly', 'annually'].includes(data.frequency)) {
            if (!data.startDate) {
                ctx.addIssue({
                    code: zod_1.z.ZodIssueCode.custom,
                    message: 'Start date is required for standard recurring frequencies',
                    path: ['startDate'],
                });
            }
            // Ensure custom dates are not set for standard frequencies
            if (data.customPaymentDates && data.customPaymentDates.length > 0) {
                ctx.addIssue({
                    code: zod_1.z.ZodIssueCode.custom,
                    message: 'Custom payment dates should not be set for standard frequencies',
                    path: ['customPaymentDates'],
                });
            }
        }
        // Custom frequency validation
        if (data.frequency === 'custom') {
            if (!data.customPaymentDates || data.customPaymentDates.length === 0) {
                ctx.addIssue({
                    code: zod_1.z.ZodIssueCode.custom,
                    message: 'At least one custom payment date is required for custom frequency',
                    path: ['customPaymentDates'],
                });
            }
            // Ensure start date is not set for custom frequency
            if (data.startDate) {
                ctx.addIssue({
                    code: zod_1.z.ZodIssueCode.custom,
                    message: 'Start date should not be set for custom frequency',
                    path: ['startDate'],
                });
            }
            // Validate custom dates are in the future and sorted
            if (data.customPaymentDates && data.customPaymentDates.length > 0) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                const sortedDates = [...data.customPaymentDates].sort((a, b) => a.getTime() - b.getTime());
                // Check if dates are in chronological order
                if (JSON.stringify(data.customPaymentDates) !== JSON.stringify(sortedDates)) {
                    ctx.addIssue({
                        code: zod_1.z.ZodIssueCode.custom,
                        message: 'Custom payment dates must be in chronological order',
                        path: ['customPaymentDates'],
                    });
                }
                // Check for duplicate dates
                const uniqueDates = new Set(data.customPaymentDates.map(d => d.toISOString()));
                if (uniqueDates.size !== data.customPaymentDates.length) {
                    ctx.addIssue({
                        code: zod_1.z.ZodIssueCode.custom,
                        message: 'Custom payment dates must be unique',
                        path: ['customPaymentDates'],
                    });
                }
            }
        }
    }
    else {
        // One-time payment validation - ensure recurring fields are not set
        if (data.frequency || data.startDate || (data.customPaymentDates && data.customPaymentDates.length > 0)) {
            ctx.addIssue({
                code: zod_1.z.ZodIssueCode.custom,
                message: 'Recurring payment fields should not be set for one-time payments',
                path: ['paymentType'],
            });
        }
    }
});
// AI extraction response schema for Gemini API
exports.aiExtractionResponseSchema = zod_1.z.object({
    vendorName: zod_1.z.string().nullable(),
    invoiceNumber: zod_1.z.string().nullable(),
    totalAmount: zod_1.z.number().nullable(),
    dueDate: zod_1.z.string().nullable(), // Will be converted to Date
    paymentType: zod_1.z.enum(['one-time', 'recurring']).nullable(),
    frequency: zod_1.z.enum(['monthly', 'quarterly', 'annually', 'custom']).nullable(),
    startDate: zod_1.z.string().nullable(), // Will be converted to Date
    customPaymentDates: zod_1.z.array(zod_1.z.string()).nullable(), // Will be converted to Date[]
});
// Helper function to convert AI response to form data
function convertAiResponseToFormData(aiResponse) {
    return {
        vendorName: aiResponse.vendorName || '',
        invoiceNumber: aiResponse.invoiceNumber || '',
        totalAmount: aiResponse.totalAmount || 0,
        dueDate: aiResponse.dueDate ? new Date(aiResponse.dueDate) : new Date(),
        paymentType: aiResponse.paymentType || 'one-time',
        frequency: aiResponse.frequency || undefined,
        startDate: aiResponse.startDate ? new Date(aiResponse.startDate) : undefined,
        customPaymentDates: aiResponse.customPaymentDates
            ? aiResponse.customPaymentDates.map(date => new Date(date))
            : undefined,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,