{"file":"/home/runner/workspace/tests/mocks/database.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/mocks/database.ts"],"sourcesContent":["/**\n * Fast in-memory database mock for unit tests\n * Provides instant responses without network calls\n */\n\nexport const createMockDatabase = () => {\n  const mockData = new Map();\n  \n  return {\n    // Mock query function that returns immediately\n    query: jest.fn().mockImplementation(async (sql: string) => {\n      // Return empty results for test queries\n      if (sql.includes('SELECT version()')) {\n        return [{ version: 'PostgreSQL 15.0 (Mock)' }];\n      }\n      return [];\n    }),\n    \n    // Mock insert operations - proper Drizzle ORM structure\n    insert: jest.fn().mockImplementation((table: any) => {\n      const insertChain = {\n        values: jest.fn().mockImplementation(async (data: any) => {\n          const id = Math.random().toString(36).substr(2, 9);\n          const result = Array.isArray(data) \n            ? data.map(item => ({ ...item, id: Math.random().toString(36).substr(2, 9) }))\n            : [{ ...data, id }];\n          mockData.set(id, data);\n          return result;\n        }),\n        returning: jest.fn().mockImplementation(async () => {\n          const id = Math.random().toString(36).substr(2, 9);\n          return [{ id }];\n        })\n      };\n      \n      // Create chainable methods that return properly structured objects\n      const createValuesChain = (data: any) => {\n        const id = Math.random().toString(36).substr(2, 9);\n        const result = Array.isArray(data) \n          ? data.map(item => ({ ...item, id: Math.random().toString(36).substr(2, 9) }))\n          : [{ ...data, id }];\n        mockData.set(id, data);\n        \n        return {\n          returning: jest.fn().mockImplementation(async () => result)\n        };\n      };\n      \n      insertChain.values = jest.fn().mockImplementation((data: any) => createValuesChain(data));\n      insertChain.returning = jest.fn().mockImplementation(() => insertChain);\n      \n      return insertChain;\n    }),\n    \n    // Mock select operations\n    select: jest.fn().mockImplementation(() => ({\n      from: jest.fn().mockImplementation(() => ({\n        where: jest.fn().mockImplementation(() => ({\n          limit: jest.fn().mockImplementation(async () => []),\n          orderBy: jest.fn().mockImplementation(async () => []),\n        })),\n        leftJoin: jest.fn().mockImplementation(() => ({\n          where: jest.fn().mockImplementation(() => ({\n            limit: jest.fn().mockImplementation(async () => []),\n          })),\n        })),\n        innerJoin: jest.fn().mockImplementation(() => ({\n          where: jest.fn().mockImplementation(() => ({\n            limit: jest.fn().mockImplementation(async () => []),\n          })),\n        })),\n        limit: jest.fn().mockImplementation(async () => []),\n        orderBy: jest.fn().mockImplementation(async () => []),\n      })),\n    })),\n    \n    // Mock delete operations - proper Drizzle ORM structure\n    delete: jest.fn().mockImplementation((table: any) => ({\n      where: jest.fn().mockImplementation(async () => {\n        return Promise.resolve({ affectedRows: 0 });\n      }),\n    })),\n    \n    // Mock update operations\n    update: jest.fn().mockImplementation((table: any) => ({\n      set: jest.fn().mockImplementation(() => ({\n        where: jest.fn().mockImplementation(async () => {\n          return Promise.resolve({ affectedRows: 0 });\n        }),\n      })),\n    })),\n  };\n};\n\n// Global mock instance\nexport const mockDb = createMockDatabase();\n\n// Mock SQL template function\nexport const mockSql = jest.fn().mockImplementation(async (strings: TemplateStringsArray, ...values: any[]) => {\n  const query = strings.join('?');\n  if (query.includes('SELECT version()')) {\n    return [{ version: 'PostgreSQL 15.0 (Mock)' }];\n  }\n  return [];\n});"],"version":3}