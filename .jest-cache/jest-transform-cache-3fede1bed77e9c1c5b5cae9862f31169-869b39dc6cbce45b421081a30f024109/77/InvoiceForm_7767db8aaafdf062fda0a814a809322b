48b3687d730b32ca6c6d49862ee4431c
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceForm = InvoiceForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const badge_1 = require("@/components/ui/badge");
const tabs_1 = require("@/components/ui/tabs");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const calendar_1 = require("@/components/ui/calendar");
const popover_1 = require("@/components/ui/popover");
const lucide_react_1 = require("lucide-react");
const date_fns_1 = require("date-fns");
const utils_1 = require("@/lib/utils");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
// Import new modular components
const SharedUploader_1 = require("@/components/document-management/SharedUploader");
const DocumentCard_1 = require("@/components/document-management/DocumentCard");
// Import invoice schemas
const invoices_1 = require("@shared/schemas/invoices");
function InvoiceForm({ mode, invoice, buildingId, residenceId, onSuccess, onCancel, }) {
    const [uploadedDocument, setUploadedDocument] = (0, react_1.useState)(invoice?.documentId || null);
    const [isAiProcessing, setIsAiProcessing] = (0, react_1.useState)(false);
    const queryClient = (0, react_query_1.useQueryClient)();
    const { toast } = (0, use_toast_1.useToast)();
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(invoices_1.invoiceFormSchema),
        defaultValues: {
            vendorName: invoice?.vendorName || '',
            invoiceNumber: invoice?.invoiceNumber || '',
            totalAmount: invoice?.totalAmount ? parseFloat(invoice.totalAmount.toString()) : 0,
            dueDate: invoice?.dueDate || new Date(),
            paymentType: invoice?.paymentType || 'one-time',
            frequency: invoice?.frequency || undefined,
            startDate: invoice?.startDate || undefined,
            customPaymentDates: invoice?.customPaymentDates || undefined,
            buildingId: buildingId || invoice?.buildingId || undefined,
            residenceId: residenceId || invoice?.residenceId || undefined,
            documentId: invoice?.documentId || undefined,
            isAiExtracted: invoice?.isAiExtracted || false,
            extractionConfidence: invoice?.extractionConfidence ? parseFloat(invoice.extractionConfidence.toString()) : undefined,
        },
    });
    const createMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const response = await (0, queryClient_1.apiRequest)('POST', '/api/invoices', data);
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to create invoice');
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: 'Invoice created successfully',
            });
            queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });
            onSuccess();
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    const updateMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            if (!invoice?.id)
                throw new Error('Invoice ID is required for update');
            const response = await (0, queryClient_1.apiRequest)('PUT', `/api/invoices/${invoice.id}`, data);
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to update invoice');
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: 'Invoice updated successfully',
            });
            queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });
            onSuccess();
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (0, react_1.useCallback)((data) => {
        const invoiceData = {
            ...data,
            documentId: uploadedDocument || undefined,
        };
        if (mode === 'create') {
            createMutation.mutate(invoiceData);
        }
        else {
            updateMutation.mutate(invoiceData);
        }
    }, [mode, uploadedDocument, createMutation, updateMutation]);
    const handleDocumentUpload = (0, react_1.useCallback)((documentId, file) => {
        setUploadedDocument(documentId);
        // Trigger AI extraction if it's a PDF
        if (file.type === 'application/pdf') {
            setIsAiProcessing(true);
            // TODO: Implement AI extraction API call
            setTimeout(() => {
                setIsAiProcessing(false);
                toast({
                    title: 'AI Processing Complete',
                    description: 'Invoice data extracted successfully',
                });
            }, 2000);
        }
    }, [toast]);
    const handleDocumentRemove = (0, react_1.useCallback)(() => {
        setUploadedDocument(null);
        form.setValue('documentId', undefined);
    }, [form]);
    const paymentType = form.watch('paymentType');
    const frequency = form.watch('frequency');
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold", children: mode === 'create' ? 'Create New Invoice' : 'Edit Invoice' }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-muted-foreground", children: mode === 'create'
                                    ? 'Add a new invoice to the system'
                                    : 'Update invoice information' })] }), isAiProcessing && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "secondary", className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-4 h-4 animate-pulse" }), "AI Processing..."] }))] }), (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: "basic", className: "w-full", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: "grid w-full grid-cols-3", children: [(0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: "basic", children: "Basic Information" }), (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: "payment", children: "Payment Details" }), (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: "documents", children: "Documents" })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsContent, { value: "basic", className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "vendorName", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Vendor Name" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "e.g., Hydro-Quebec", ...field, "data-testid": "input-vendor-name" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "invoiceNumber", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Invoice Number" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "e.g., INV-2024-001", ...field, "data-testid": "input-invoice-number" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "totalAmount", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Total Amount ($)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: "number", step: "0.01", min: "0", placeholder: "0.00", ...field, onChange: (e) => field.onChange(parseFloat(e.target.value) || 0), "data-testid": "input-total-amount" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "dueDate", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-col", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Due Date" }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: (0, utils_1.cn)('w-full pl-3 text-left font-normal', !field.value && 'text-muted-foreground'), "data-testid": "input-due-date", children: [field.value ? ((0, date_fns_1.format)(field.value, 'PPP')) : ((0, jsx_runtime_1.jsx)("span", { children: "Pick a date" })), (0, jsx_runtime_1.jsx)(lucide_react_1.CalendarIcon, { className: "ml-auto h-4 w-4 opacity-50" })] }) }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-auto p-0", align: "start", children: (0, jsx_runtime_1.jsx)(calendar_1.Calendar, { mode: "single", selected: field.value, onSelect: field.onChange, disabled: (date) => date < new Date(), initialFocus: true }) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] })] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsContent, { value: "payment", className: "space-y-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "paymentType", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Type" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: field.value, onValueChange: field.onChange, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-payment-type", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select payment type" }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "one-time", children: "One-time Payment" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "recurring", children: "Recurring Payment" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), paymentType === 'recurring' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4 p-4 border rounded-lg bg-muted/50", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium", children: "Recurring Payment Settings" }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "frequency", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Frequency" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: field.value, onValueChange: field.onChange, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-frequency", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select frequency" }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "monthly", children: "Monthly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "quarterly", children: "Quarterly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "annually", children: "Annually" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "custom", children: "Custom" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), frequency && frequency !== 'custom' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "startDate", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-col", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Start Date" }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: (0, utils_1.cn)('w-full pl-3 text-left font-normal', !field.value && 'text-muted-foreground'), "data-testid": "input-start-date", children: [field.value ? ((0, date_fns_1.format)(field.value, 'PPP')) : ((0, jsx_runtime_1.jsx)("span", { children: "Pick start date" })), (0, jsx_runtime_1.jsx)(lucide_react_1.CalendarIcon, { className: "ml-auto h-4 w-4 opacity-50" })] }) }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-auto p-0", align: "start", children: (0, jsx_runtime_1.jsx)(calendar_1.Calendar, { mode: "single", selected: field.value, onSelect: field.onChange, disabled: (date) => date < new Date(), initialFocus: true }) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), frequency === 'custom' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Custom Payment Dates" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-muted-foreground", children: "Custom date scheduling coming soon..." })] }))] }))] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "documents", className: "space-y-4", children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium mb-4", children: "Invoice Document" }), uploadedDocument ? ((0, jsx_runtime_1.jsx)(DocumentCard_1.DocumentCard, { documentId: uploadedDocument, onRemove: handleDocumentRemove, showRemove: true })) : ((0, jsx_runtime_1.jsx)(SharedUploader_1.SharedUploader, { onUploadComplete: handleDocumentUpload, accept: {
                                                    'application/pdf': ['.pdf'],
                                                    'image/*': ['.png', '.jpg', '.jpeg'],
                                                }, maxSizeMB: 10, className: "border-2 border-dashed border-muted-foreground/25 rounded-lg p-8", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "w-8 h-8 mx-auto mb-4 text-muted-foreground" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium", children: "Upload Invoice Document" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-muted-foreground mt-1", children: "PDF, PNG, JPG up to 10MB" })] }) }))] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end gap-3 pt-6 border-t", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", onClick: onCancel, "data-testid": "button-cancel", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4 mr-2" }), "Cancel"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "submit", disabled: createMutation.isPending || updateMutation.isPending, "data-testid": "button-save-invoice", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: "w-4 h-4 mr-2" }), mode === 'create' ? 'Create Invoice' : 'Update Invoice'] })] })] }) })] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,