1aa31ab0b63f5d6f1332d28057911ca2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClassNamesForModifiers = getClassNamesForModifiers;
const UI_js_1 = require("../UI.js");
/**
 * Returns the class names for a day based on its modifiers.
 *
 * This function combines the base class name for the day with any class names
 * associated with active modifiers.
 *
 * @param modifiers The modifiers applied to the day.
 * @param classNames The base class names for the calendar elements.
 * @param modifiersClassNames The class names associated with specific
 *   modifiers.
 * @returns An array of class names for the day.
 */
function getClassNamesForModifiers(modifiers, classNames, modifiersClassNames = {}) {
    const modifierClassNames = Object.entries(modifiers)
        .filter(([, active]) => active === true)
        .reduce((previousValue, [key]) => {
        if (modifiersClassNames[key]) {
            previousValue.push(modifiersClassNames[key]);
        }
        else if (classNames[UI_js_1.DayFlag[key]]) {
            previousValue.push(classNames[UI_js_1.DayFlag[key]]);
        }
        else if (classNames[UI_js_1.SelectionState[key]]) {
            previousValue.push(classNames[UI_js_1.SelectionState[key]]);
        }
        return previousValue;
    }, [classNames[UI_js_1.UI.Day]]);
    return modifierClassNames;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldENsYXNzTmFtZXNGb3JNb2RpZmllcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTyxDQUFDLHlCQUF5QixHQUFHLHlCQUF5QixDQUFDO0FBQzlELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQzs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQVMseUJBQXlCLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsR0FBRyxFQUFFO0lBQzlFLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7U0FDL0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDO1NBQ3ZDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7UUFDakMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzNCLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNqRCxDQUFDO2FBQ0ksSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDeEMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQzthQUNJLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9DLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLENBQUM7UUFDRCxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsT0FBTyxrQkFBa0IsQ0FBQztBQUM5QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL3JlYWN0LWRheS1waWNrZXIvZGlzdC9janMvaGVscGVycy9nZXRDbGFzc05hbWVzRm9yTW9kaWZpZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRDbGFzc05hbWVzRm9yTW9kaWZpZXJzID0gZ2V0Q2xhc3NOYW1lc0Zvck1vZGlmaWVycztcbmNvbnN0IFVJX2pzXzEgPSByZXF1aXJlKFwiLi4vVUkuanNcIik7XG4vKipcbiAqIFJldHVybnMgdGhlIGNsYXNzIG5hbWVzIGZvciBhIGRheSBiYXNlZCBvbiBpdHMgbW9kaWZpZXJzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gY29tYmluZXMgdGhlIGJhc2UgY2xhc3MgbmFtZSBmb3IgdGhlIGRheSB3aXRoIGFueSBjbGFzcyBuYW1lc1xuICogYXNzb2NpYXRlZCB3aXRoIGFjdGl2ZSBtb2RpZmllcnMuXG4gKlxuICogQHBhcmFtIG1vZGlmaWVycyBUaGUgbW9kaWZpZXJzIGFwcGxpZWQgdG8gdGhlIGRheS5cbiAqIEBwYXJhbSBjbGFzc05hbWVzIFRoZSBiYXNlIGNsYXNzIG5hbWVzIGZvciB0aGUgY2FsZW5kYXIgZWxlbWVudHMuXG4gKiBAcGFyYW0gbW9kaWZpZXJzQ2xhc3NOYW1lcyBUaGUgY2xhc3MgbmFtZXMgYXNzb2NpYXRlZCB3aXRoIHNwZWNpZmljXG4gKiAgIG1vZGlmaWVycy5cbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGNsYXNzIG5hbWVzIGZvciB0aGUgZGF5LlxuICovXG5mdW5jdGlvbiBnZXRDbGFzc05hbWVzRm9yTW9kaWZpZXJzKG1vZGlmaWVycywgY2xhc3NOYW1lcywgbW9kaWZpZXJzQ2xhc3NOYW1lcyA9IHt9KSB7XG4gICAgY29uc3QgbW9kaWZpZXJDbGFzc05hbWVzID0gT2JqZWN0LmVudHJpZXMobW9kaWZpZXJzKVxuICAgICAgICAuZmlsdGVyKChbLCBhY3RpdmVdKSA9PiBhY3RpdmUgPT09IHRydWUpXG4gICAgICAgIC5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIFtrZXldKSA9PiB7XG4gICAgICAgIGlmIChtb2RpZmllcnNDbGFzc05hbWVzW2tleV0pIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUucHVzaChtb2RpZmllcnNDbGFzc05hbWVzW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzTmFtZXNbVUlfanNfMS5EYXlGbGFnW2tleV1dKSB7XG4gICAgICAgICAgICBwcmV2aW91c1ZhbHVlLnB1c2goY2xhc3NOYW1lc1tVSV9qc18xLkRheUZsYWdba2V5XV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzTmFtZXNbVUlfanNfMS5TZWxlY3Rpb25TdGF0ZVtrZXldXSkge1xuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZS5wdXNoKGNsYXNzTmFtZXNbVUlfanNfMS5TZWxlY3Rpb25TdGF0ZVtrZXldXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG4gICAgfSwgW2NsYXNzTmFtZXNbVUlfanNfMS5VSS5EYXldXSk7XG4gICAgcmV0dXJuIG1vZGlmaWVyQ2xhc3NOYW1lcztcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==