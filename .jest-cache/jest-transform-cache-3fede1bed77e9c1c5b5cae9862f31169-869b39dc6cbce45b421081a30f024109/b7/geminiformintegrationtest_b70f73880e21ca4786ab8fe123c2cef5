c10a30b040c00e1c1f04f5d27347ea50
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock the hooks and utils
globals_1.jest.mock('@/hooks/use-language', () => ({
    useLanguage: () => ({
        t: (key) => key,
    }),
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({
        toast: globals_1.jest.fn(),
    }),
}));
/**
 * @file Gemini Integration Form Fill Test Suite
 * @description Comprehensive tests for AI-powered form filling functionality
 * Tests the integration between Gemini AI bill analysis and form auto-population
 * Designed to identify potential issues in the AI form filling workflow
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
// Mock fetch with proper typing
const mockFetch = globals_1.jest.fn();
global.fetch = mockFetch;
const createMockQueryClient = () => new react_query_1.QueryClient({
    defaultOptions: {
        queries: {
            retry: false,
        },
        mutations: {
            retry: false,
        }
    },
});
// Mock bill analysis responses - testing various scenarios
const mockAnalysisResponses = {
    successful: {
        title: "Hydro-Québec Electricity Bill",
        vendor: "Hydro-Québec",
        totalAmount: "245.67",
        category: "utilities",
        description: "Monthly electricity consumption",
        dueDate: "2025-01-31",
        issueDate: "2025-01-01",
        billNumber: "HQ-2025-001234",
        confidence: 0.95
    },
    lowConfidence: {
        title: "Unclear Insurance Document",
        vendor: "Unknown Provider",
        totalAmount: "0.00",
        category: "other",
        description: "",
        confidence: 0.25
    },
    invalidData: {
        title: "",
        vendor: "Valid Vendor",
        totalAmount: "invalid-amount",
        category: "invalid-category",
        confidence: 1.5 // Invalid confidence > 1.0
    },
    partialData: {
        title: "Property Maintenance Bill",
        vendor: "ABC Maintenance",
        totalAmount: "1250.00",
        category: "maintenance"
        // Missing other fields to test partial filling
    },
    frenchContent: {
        title: "Facture d'Assurance Habitation",
        vendor: "Assurances Desjardins",
        totalAmount: "2400.00",
        category: "insurance",
        description: "Prime annuelle d'assurance habitation",
        dueDate: "2025-12-31",
        confidence: 0.88
    }
};
// Test component that simulates the BillForm AI integration
const TestBillFormWithAI = () => {
    const [uploadedFile, setUploadedFile] = react_1.default.useState(null);
    const [isAnalyzing, setIsAnalyzing] = react_1.default.useState(false);
    const [aiAnalysisData, setAiAnalysisData] = react_1.default.useState(null);
    const [formData, setFormData] = react_1.default.useState({
        title: '',
        vendor: '',
        category: 'other',
        totalAmount: '',
        description: '',
        startDate: new Date().toISOString().split('T')[0],
        paymentType: 'unique',
        notes: ''
    });
    const handleFileUpload = (event) => {
        const file = event.target.files?.[0];
        if (file) {
            setUploadedFile(file);
        }
    };
    const analyzeDocument = async () => {
        if (!uploadedFile)
            return;
        setIsAnalyzing(true);
        try {
            const formData = new FormData();
            formData.append('document', uploadedFile);
            const response = await fetch('/api/bills/analyze-document', {
                method: 'POST',
                credentials: 'include',
                body: formData,
            });
            if (!response.ok) {
                throw new Error('Failed to analyze document');
            }
            const result = await response.json();
            setAiAnalysisData(result);
            // Simulate the smart form filling logic from BillForm.tsx
            if (result) {
                setFormData(current => {
                    const updated = { ...current };
                    // Only fill empty fields (simulating the smart logic)
                    if (!current.title) {
                        updated.title = result.title || '';
                    }
                    if (!current.vendor) {
                        updated.vendor = result.vendor || '';
                    }
                    if (current.category === 'other') {
                        updated.category = result.category || 'other';
                    }
                    if (!current.totalAmount) {
                        updated.totalAmount = result.totalAmount || '';
                    }
                    if (!current.description) {
                        updated.description = result.description || '';
                    }
                    // Add AI analysis info to notes
                    const aiNotes = [];
                    if (result.billNumber) {
                        aiNotes.push(`Bill Number: ${result.billNumber}`);
                    }
                    if (result.dueDate) {
                        aiNotes.push(`Due Date: ${result.dueDate}`);
                    }
                    aiNotes.push(`AI Analysis Confidence: ${(result.confidence * 100).toFixed(1)}%`);
                    if (aiNotes.length > 0) {
                        const aiNotesText = aiNotes.join('\n');
                        updated.notes = current.notes ?
                            `${current.notes}\n\n--- AI Analysis ---\n${aiNotesText}` :
                            aiNotesText;
                    }
                    return updated;
                });
            }
        }
        catch (error) {
            console.error('Analysis failed:', error);
        }
        finally {
            setIsAnalyzing(false);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "ai-bill-form", children: [(0, jsx_runtime_1.jsxs)("div", { "data-testid": "file-upload-section", children: [(0, jsx_runtime_1.jsx)("input", { type: "file", accept: ".pdf,.jpg,.jpeg,.png,.gif", onChange: handleFileUpload, "data-testid": "file-input" }), (0, jsx_runtime_1.jsx)("button", { onClick: analyzeDocument, disabled: !uploadedFile || isAnalyzing, "data-testid": "analyze-button", children: isAnalyzing ? 'Analyzing...' : 'Upload & Analyze' })] }), (0, jsx_runtime_1.jsx)("form", { "data-testid": "bill-form", children: (0, jsx_runtime_1.jsxs)("div", { "data-testid": "form-fields", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "input-title", type: "text", placeholder: "Bill Title", value: formData.title, onChange: (e) => setFormData(prev => ({ ...prev, title: e.target.value })) }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "input-vendor", type: "text", placeholder: "Vendor", value: formData.vendor, onChange: (e) => setFormData(prev => ({ ...prev, vendor: e.target.value })) }), (0, jsx_runtime_1.jsxs)("select", { "data-testid": "select-category", value: formData.category, onChange: (e) => setFormData(prev => ({ ...prev, category: e.target.value })), children: [(0, jsx_runtime_1.jsx)("option", { value: "other", children: "Other" }), (0, jsx_runtime_1.jsx)("option", { value: "utilities", children: "Utilities" }), (0, jsx_runtime_1.jsx)("option", { value: "maintenance", children: "Maintenance" }), (0, jsx_runtime_1.jsx)("option", { value: "insurance", children: "Insurance" })] }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "input-amount", type: "text", placeholder: "Total Amount", value: formData.totalAmount, onChange: (e) => setFormData(prev => ({ ...prev, totalAmount: e.target.value })) }), (0, jsx_runtime_1.jsx)("textarea", { "data-testid": "input-description", placeholder: "Description", value: formData.description, onChange: (e) => setFormData(prev => ({ ...prev, description: e.target.value })) }), (0, jsx_runtime_1.jsx)("textarea", { "data-testid": "input-notes", placeholder: "Notes", value: formData.notes, onChange: (e) => setFormData(prev => ({ ...prev, notes: e.target.value })) })] }) }), aiAnalysisData && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "analysis-result", children: [(0, jsx_runtime_1.jsxs)("div", { "data-testid": "analysis-confidence", children: ["Confidence: ", (aiAnalysisData.confidence * 100).toFixed(1), "%"] }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "analysis-data", children: JSON.stringify(aiAnalysisData) })] }))] }));
};
const TestWrapper = ({ children }) => {
    const queryClient = createMockQueryClient();
    return (0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: children });
};
(0, globals_1.describe)('Gemini Form Integration Tests', () => {
    // Mock console.error to avoid test output pollution
    const originalConsoleError = console.error;
    (0, globals_1.beforeEach)(() => {
        mockFetch.mockClear();
        console.error = globals_1.jest.fn();
    });
    (0, globals_1.afterAll)(() => {
        console.error = originalConsoleError;
    });
    (0, globals_1.describe)('Successful AI Analysis Scenarios', () => {
        (0, globals_1.it)('should successfully analyze a clear utility bill and fill form correctly', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockAnalysisResponses.successful,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            // Upload a file
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'hydro-bill.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            // Click analyze button
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            // Wait for analysis to complete
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bills/analyze-document', globals_1.expect.any(Object));
            });
            await (0, react_2.waitFor)(() => {
                // Verify form fields were populated correctly
                const titleInput = react_2.screen.getByTestId('input-title');
                const vendorInput = react_2.screen.getByTestId('input-vendor');
                const categorySelect = react_2.screen.getByTestId('select-category');
                const amountInput = react_2.screen.getByTestId('input-amount');
                const descriptionInput = react_2.screen.getByTestId('input-description');
                const notesInput = react_2.screen.getByTestId('input-notes');
                (0, globals_1.expect)(titleInput.value).toBe('Hydro-Québec Electricity Bill');
                (0, globals_1.expect)(vendorInput.value).toBe('Hydro-Québec');
                (0, globals_1.expect)(categorySelect.value).toBe('utilities');
                (0, globals_1.expect)(amountInput.value).toBe('245.67');
                (0, globals_1.expect)(descriptionInput.value).toBe('Monthly electricity consumption');
                (0, globals_1.expect)(notesInput.value).toContain('Bill Number: HQ-2025-001234');
                (0, globals_1.expect)(notesInput.value).toContain('Due Date: 2025-01-31');
                (0, globals_1.expect)(notesInput.value).toContain('AI Analysis Confidence: 95.0%');
            });
            // Verify confidence is displayed
            const confidenceDisplay = react_2.screen.getByTestId('analysis-confidence');
            (0, globals_1.expect)(confidenceDisplay).toHaveTextContent('95.0%');
        });
        (0, globals_1.it)('should handle French language bills correctly', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockAnalysisResponses.frenchContent,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['contenu français'], 'facture-assurance.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                const titleInput = react_2.screen.getByTestId('input-title');
                const vendorInput = react_2.screen.getByTestId('input-vendor');
                const categorySelect = react_2.screen.getByTestId('select-category');
                (0, globals_1.expect)(titleInput.value).toBe("Facture d'Assurance Habitation");
                (0, globals_1.expect)(vendorInput.value).toBe('Assurances Desjardins');
                (0, globals_1.expect)(categorySelect.value).toBe('insurance');
            });
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Scenarios', () => {
        (0, globals_1.it)('should handle low confidence analysis results appropriately', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockAnalysisResponses.lowConfidence,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['unclear content'], 'blurry-document.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                const confidenceDisplay = react_2.screen.getByTestId('analysis-confidence');
                (0, globals_1.expect)(confidenceDisplay).toHaveTextContent('25.0%');
                // With low confidence, title should still be filled but amount should be empty or 0
                const titleInput = react_2.screen.getByTestId('input-title');
                const amountInput = react_2.screen.getByTestId('input-amount');
                (0, globals_1.expect)(titleInput.value).toBe('Unclear Insurance Document');
                (0, globals_1.expect)(amountInput.value).toBe('0.00');
            });
        });
        (0, globals_1.it)('should handle invalid data from AI analysis gracefully', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockAnalysisResponses.invalidData,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['corrupted data'], 'corrupted.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                // Check that invalid data is handled
                const titleInput = react_2.screen.getByTestId('input-title');
                const vendorInput = react_2.screen.getByTestId('input-vendor');
                const amountInput = react_2.screen.getByTestId('input-amount');
                const categorySelect = react_2.screen.getByTestId('select-category');
                // Empty title should not be filled
                (0, globals_1.expect)(titleInput.value).toBe('');
                // Valid vendor should be filled  
                (0, globals_1.expect)(vendorInput.value).toBe('Valid Vendor');
                // Invalid amount should not crash the form
                (0, globals_1.expect)(amountInput.value).toBe('invalid-amount'); // This might be a bug!
                // Invalid category should fall back to 'other'
                (0, globals_1.expect)(categorySelect.value).toBe('other');
            });
        });
        (0, globals_1.it)('should handle network errors during analysis', async () => {
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                // Form should remain empty after error
                const titleInput = react_2.screen.getByTestId('input-title');
                (0, globals_1.expect)(titleInput.value).toBe('');
                // Analysis button should be enabled again
                (0, globals_1.expect)(analyzeButton).not.toBeDisabled();
            });
        });
        (0, globals_1.it)('should handle server errors (500) appropriately', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                json: async () => ({ error: 'Internal server error' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                // Should handle server error gracefully
                const titleInput = react_2.screen.getByTestId('input-title');
                (0, globals_1.expect)(titleInput.value).toBe('');
            });
        });
    });
    (0, globals_1.describe)('User Interaction and Data Preservation', () => {
        (0, globals_1.it)('should preserve user-entered data when AI analysis completes', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockAnalysisResponses.successful,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            // User fills some fields manually first
            const titleInput = react_2.screen.getByTestId('input-title');
            const vendorInput = react_2.screen.getByTestId('input-vendor');
            const notesInput = react_2.screen.getByTestId('input-notes');
            await user_event_1.default.type(titleInput, 'My Custom Title');
            await user_event_1.default.type(vendorInput, 'My Custom Vendor');
            await user_event_1.default.type(notesInput, 'User notes here');
            // Then user uploads and analyzes
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                // User data should be preserved
                const titleInputAfter = react_2.screen.getByTestId('input-title');
                const vendorInputAfter = react_2.screen.getByTestId('input-vendor');
                const notesInputAfter = react_2.screen.getByTestId('input-notes');
                (0, globals_1.expect)(titleInputAfter.value).toBe('My Custom Title'); // Preserved
                (0, globals_1.expect)(vendorInputAfter.value).toBe('My Custom Vendor'); // Preserved
                (0, globals_1.expect)(notesInputAfter.value).toContain('User notes here'); // Preserved
                (0, globals_1.expect)(notesInputAfter.value).toContain('AI Analysis'); // AI info added
            });
        });
        (0, globals_1.it)('should only fill empty fields, not overwrite user input', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockAnalysisResponses.successful,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            // Pre-fill amount field with user data
            const amountInput = react_2.screen.getByTestId('input-amount');
            await user_event_1.default.type(amountInput, '999.99');
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                const amountInputAfter = react_2.screen.getByTestId('input-amount');
                const titleInputAfter = react_2.screen.getByTestId('input-title');
                // User amount should be preserved
                (0, globals_1.expect)(amountInputAfter.value).toBe('999.99');
                // Empty title should be filled by AI
                (0, globals_1.expect)(titleInputAfter.value).toBe('Hydro-Québec Electricity Bill');
            });
        });
    });
    (0, globals_1.describe)('File Type and Content Validation', () => {
        (0, globals_1.it)('should handle different file types appropriately', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockAnalysisResponses.successful,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            // Test with image file
            const fileInput = react_2.screen.getByTestId('file-input');
            const imageFile = new File(['image data'], 'bill-scan.jpg', { type: 'image/jpeg' });
            await user_event_1.default.upload(fileInput, imageFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bills/analyze-document', globals_1.expect.objectContaining({
                    method: 'POST',
                    body: globals_1.expect.any(FormData),
                }));
            });
        });
        (0, globals_1.it)('should disable analyze button when no file is selected', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            (0, globals_1.expect)(analyzeButton).toBeDisabled();
        });
        (0, globals_1.it)('should show analyzing state while processing', async () => {
            let resolvePromise;
            const delayedPromise = new Promise((resolve) => {
                resolvePromise = resolve;
            });
            mockFetch.mockReturnValueOnce(delayedPromise);
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            // Button should show analyzing state
            (0, globals_1.expect)(analyzeButton).toHaveTextContent('Analyzing...');
            (0, globals_1.expect)(analyzeButton).toBeDisabled();
            // Resolve the promise
            resolvePromise({
                ok: true,
                json: async () => mockAnalysisResponses.successful,
            });
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(analyzeButton).toHaveTextContent('Upload & Analyze');
                (0, globals_1.expect)(analyzeButton).not.toBeDisabled();
            });
        });
    });
    (0, globals_1.describe)('Data Integrity and Security Issues', () => {
        (0, globals_1.it)('should sanitize and validate AI response data', async () => {
            // Mock response with potential security issues
            const maliciousResponse = {
                title: '<script>alert("xss")</script>Legitimate Title',
                vendor: 'javascript:void(0)',
                totalAmount: 'SELECT * FROM users; --',
                category: 'utilities',
                confidence: 0.95,
                billNumber: '"><img src=x onerror=alert(1)>',
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => maliciousResponse,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                const titleInput = react_2.screen.getByTestId('input-title');
                const vendorInput = react_2.screen.getByTestId('input-vendor');
                const amountInput = react_2.screen.getByTestId('input-amount');
                const notesInput = react_2.screen.getByTestId('input-notes');
                // Values should be filled (this test reveals potential XSS vulnerability)
                (0, globals_1.expect)(titleInput.value).toContain('<script>');
                (0, globals_1.expect)(vendorInput.value).toBe('javascript:void(0)');
                (0, globals_1.expect)(amountInput.value).toContain('SELECT');
                (0, globals_1.expect)(notesInput.value).toContain('onerror=alert(1)');
            });
        });
        (0, globals_1.it)('should validate amount field format after AI analysis', async () => {
            const invalidAmountResponse = {
                ...mockAnalysisResponses.successful,
                totalAmount: '999,999.999', // Too many decimal places
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => invalidAmountResponse,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                const amountInput = react_2.screen.getByTestId('input-amount');
                // Should the app validate and fix this format? This test will reveal the behavior
                (0, globals_1.expect)(amountInput.value).toBe('999,999.999');
            });
        });
        (0, globals_1.it)('should handle confidence values outside valid range', async () => {
            const invalidConfidenceResponse = {
                ...mockAnalysisResponses.successful,
                confidence: 1.5, // Invalid: > 1.0
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => invalidConfidenceResponse,
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestBillFormWithAI, {}) }));
            const fileInput = react_2.screen.getByTestId('file-input');
            const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });
            await user_event_1.default.upload(fileInput, testFile);
            const analyzeButton = react_2.screen.getByTestId('analyze-button');
            await user_event_1.default.click(analyzeButton);
            await (0, react_2.waitFor)(() => {
                const confidenceDisplay = react_2.screen.getByTestId('analysis-confidence');
                // Should be clamped to 100% or show error?
                (0, globals_1.expect)(confidenceDisplay).toHaveTextContent('150.0%'); // This reveals the issue
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,