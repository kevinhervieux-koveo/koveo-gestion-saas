2016b55ad4c9e61cc0a3ddb9fdd2ec57
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Unit test using mocks - moved server imports to integration tests
// import request from 'supertest';
// import { app } from '../../../server/index';
// import { mockDb } from '../../../server/mockDb';
const schema = __importStar(require("../../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const unified_database_mock_1 = require("../../mocks/unified-database-mock");
// Using unified database mock for consistency
// Mock request for API testing (using proper response structure)
const mockRequest = {
    post: globals_1.jest.fn().mockImplementation(() => ({
        send: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { success: true } }),
        set: globals_1.jest.fn().mockReturnThis(),
        expect: globals_1.jest.fn().mockReturnThis()
    })),
    get: globals_1.jest.fn().mockImplementation(() => ({
        send: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { success: true, data: [] } }),
        set: globals_1.jest.fn().mockReturnThis(),
        expect: globals_1.jest.fn().mockReturnThis()
    })),
    put: globals_1.jest.fn().mockImplementation(() => ({
        send: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { success: true } }),
        set: globals_1.jest.fn().mockReturnThis(),
        expect: globals_1.jest.fn().mockReturnThis()
    })),
    delete: globals_1.jest.fn().mockImplementation(() => ({
        send: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { success: true } }),
        set: globals_1.jest.fn().mockReturnThis(),
        expect: globals_1.jest.fn().mockReturnThis()
    }))
};
(0, globals_1.describe)('Invitation Management API', () => {
    let adminUser;
    let managerUser;
    let tenantUser;
    let organization1;
    let organization2;
    let testInvitation1;
    let testInvitation2;
    let adminCookie;
    let managerCookie;
    let tenantCookie;
    (0, globals_1.beforeEach)(async () => {
        // Reset mock data and clear all mocks
        unified_database_mock_1.testUtils.resetMocks();
        // Create test organizations
        const [org1] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.organizations).values({
            name: 'Test Organization 1',
            type: 'management_company',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
        }).returning();
        organization1 = org1;
        const [org2] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.organizations).values({
            name: 'Test Organization 2',
            type: 'syndicate',
            address: '456 Test Ave',
            city: 'Quebec City',
            province: 'QC',
            postalCode: 'G1A 1A1',
        }).returning();
        organization2 = org2;
        // Create test users
        const hashedPassword = await bcryptjs_1.default.hash('password123', 10);
        const [admin] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.users).values({
            username: 'admin@test.com',
            email: 'admin@test.com',
            password: hashedPassword,
            firstName: 'Admin',
            lastName: 'User',
            role: 'admin',
            language: 'en',
        }).returning();
        adminUser = admin;
        const [manager] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.users).values({
            username: 'manager@test.com',
            email: 'manager@test.com',
            password: hashedPassword,
            firstName: 'Manager',
            lastName: 'User',
            role: 'manager',
            language: 'en',
        }).returning();
        const [tenant] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.users).values({
            username: 'tenant@test.com',
            email: 'tenant@test.com',
            password: hashedPassword,
            firstName: 'Tenant',
            lastName: 'User',
            role: 'tenant',
            language: 'en',
        }).returning();
        adminUser = admin;
        managerUser = manager;
        tenantUser = tenant;
        // Assign manager to organization1
        await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.userOrganizations).values({
            userId: managerUser.id,
            organizationId: organization1.id,
            organizationRole: 'manager',
            isActive: true,
        });
        // Create test invitations
        const expirationDate = new Date();
        expirationDate.setDate(expirationDate.getDate() + 7); // 7 days from now
        const [invitation1] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
            email: 'test1@example.com',
            token: 'test-token-1',
            tokenHash: 'hash1',
            role: 'tenant',
            status: 'pending',
            organizationId: organization1.id,
            invitedByUserId: adminUser.id,
            expiresAt: expirationDate,
        }).returning();
        const [invitation2] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
            email: 'test2@example.com',
            token: 'test-token-2',
            tokenHash: 'hash2',
            role: 'resident',
            status: 'pending',
            organizationId: organization2.id,
            invitedByUserId: adminUser.id,
            expiresAt: expirationDate,
        }).returning();
        testInvitation1 = invitation1;
        testInvitation2 = invitation2;
        // Login users and get cookies
        const adminLogin = await mockRequest
            .post('/api/auth/login')
            .send({ email: 'admin@test.com', password: 'password123' });
        adminCookie = adminLogin.headers['set-cookie'];
        const managerLogin = await mockRequest
            .post('/api/auth/login')
            .send({ email: 'manager@test.com', password: 'password123' });
        managerCookie = managerLogin.headers['set-cookie'];
        const tenantLogin = await mockRequest
            .post('/api/auth/login')
            .send({ email: 'tenant@test.com', password: 'password123' });
        tenantCookie = tenantLogin.headers['set-cookie'];
    });
    (0, globals_1.afterEach)(async () => {
        // Reset mock data and clear all mocks
        unified_database_mock_1.testUtils.resetMocks();
    });
    (0, globals_1.describe)('GET /api/invitations/pending', () => {
        (0, globals_1.it)('should allow admin to see all pending invitations', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body).toHaveLength(2);
            const emails = response.body.map((inv) => inv.email);
            (0, globals_1.expect)(emails).toContain('test1@example.com');
            (0, globals_1.expect)(emails).toContain('test2@example.com');
        });
        (0, globals_1.it)('should allow manager to see only invitations from their organizations', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', managerCookie)
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body).toHaveLength(1);
            (0, globals_1.expect)(response.body[0].email).toBe('test1@example.com');
            (0, globals_1.expect)(response.body[0].organizationId).toBe(organization1.id);
        });
        (0, globals_1.it)('should deny access to tenant users', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', tenantCookie)
                .expect(403);
            (0, globals_1.expect)(response.body.code).toBe('INSUFFICIENT_PERMISSIONS');
        });
        (0, globals_1.it)('should deny access to unauthenticated users', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .expect(401);
            (0, globals_1.expect)(response.body.code).toBe('AUTH_REQUIRED');
        });
        (0, globals_1.it)('should return proper invitation structure with all required fields', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            const invitation = response.body[0];
            (0, globals_1.expect)(invitation).toHaveProperty('id');
            (0, globals_1.expect)(invitation).toHaveProperty('email');
            (0, globals_1.expect)(invitation).toHaveProperty('role');
            (0, globals_1.expect)(invitation).toHaveProperty('status');
            (0, globals_1.expect)(invitation).toHaveProperty('expiresAt');
            (0, globals_1.expect)(invitation).toHaveProperty('createdAt');
            (0, globals_1.expect)(invitation).toHaveProperty('organizationId');
            (0, globals_1.expect)(invitation).toHaveProperty('buildingId');
            (0, globals_1.expect)(invitation).toHaveProperty('residenceId');
            (0, globals_1.expect)(invitation.status).toBe('pending');
        });
    });
    (0, globals_1.describe)('DELETE /api/invitations/:id', () => {
        (0, globals_1.it)('should allow admin to delete any invitation', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .set('Cookie', adminCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Invitation deleted successfully');
            (0, globals_1.expect)(response.body.invitationId).toBe(testInvitation1.id);
            // Verify invitation is deleted
            const remainingInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation1.id));
            (0, globals_1.expect)(remainingInvitations).toHaveLength(0);
        });
        (0, globals_1.it)('should allow manager to delete invitations from their organizations', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .set('Cookie', managerCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Invitation deleted successfully');
            // Verify invitation is deleted
            const remainingInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation1.id));
            (0, globals_1.expect)(remainingInvitations).toHaveLength(0);
        });
        (0, globals_1.it)('should prevent manager from deleting invitations from other organizations', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation2.id}`)
                .set('Cookie', managerCookie)
                .expect(403);
            (0, globals_1.expect)(response.body.code).toBe('INSUFFICIENT_PERMISSIONS');
            (0, globals_1.expect)(response.body.message).toBe('You can only delete invitations from your organizations');
            // Verify invitation still exists
            const remainingInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation2.id));
            (0, globals_1.expect)(remainingInvitations).toHaveLength(1);
        });
        (0, globals_1.it)('should deny access to tenant users', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .set('Cookie', tenantCookie)
                .expect(403);
            (0, globals_1.expect)(response.body.code).toBe('INSUFFICIENT_PERMISSIONS');
        });
        (0, globals_1.it)('should return 404 for non-existent invitation', async () => {
            const response = await mockRequest
                .delete('/api/invitations/non-existent-id')
                .set('Cookie', adminCookie)
                .expect(404);
            (0, globals_1.expect)(response.body.code).toBe('INVITATION_NOT_FOUND');
        });
        (0, globals_1.it)('should deny access to unauthenticated users', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .expect(401);
            (0, globals_1.expect)(response.body.code).toBe('AUTH_REQUIRED');
        });
    });
    (0, globals_1.describe)('Invitation Status and Expiration', () => {
        (0, globals_1.it)('should only return pending invitations', async () => {
            // Create an accepted invitation
            await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'accepted@example.com',
                token: 'accepted-token',
                tokenHash: 'accepted-hash',
                role: 'tenant',
                status: 'accepted',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            });
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            // Should only return pending invitations
            const statuses = response.body.map((inv) => inv.status);
            (0, globals_1.expect)(statuses.every((status) => status === 'pending')).toBe(true);
            (0, globals_1.expect)(response.body.find((inv) => inv.email === 'accepted@example.com')).toBeUndefined();
        });
        (0, globals_1.it)('should handle expired invitations in the response', async () => {
            // Create an expired invitation
            const expiredDate = new Date();
            expiredDate.setDate(expiredDate.getDate() - 1); // Yesterday
            await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'expired@example.com',
                token: 'expired-token',
                tokenHash: 'expired-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expiredDate,
            });
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            // Should include expired invitations (they're still pending status)
            const expiredInvitation = response.body.find((inv) => inv.email === 'expired@example.com');
            (0, globals_1.expect)(expiredInvitation).toBeDefined();
            (0, globals_1.expect)(new Date(expiredInvitation.expiresAt)).toBeInstanceOf(Date);
        });
    });
    (0, globals_1.describe)('Database Constraints and Data Integrity', () => {
        (0, globals_1.it)('should handle invitations with null organization references', async () => {
            // Create invitation without organization
            const [invitation] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'no-org@example.com',
                token: 'no-org-token',
                tokenHash: 'no-org-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: null,
                invitedByUserId: adminUser.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            }).returning();
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            const noOrgInvitation = response.body.find((inv) => inv.email === 'no-org@example.com');
            (0, globals_1.expect)(noOrgInvitation).toBeDefined();
            (0, globals_1.expect)(noOrgInvitation.organizationId).toBeNull();
            (0, globals_1.expect)(noOrgInvitation.organizationName).toBeNull();
        });
        (0, globals_1.it)('should properly join organization names', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            const invitation1 = response.body.find((inv) => inv.email === 'test1@example.com');
            const invitation2 = response.body.find((inv) => inv.email === 'test2@example.com');
            (0, globals_1.expect)(invitation1.organizationName).toBe('Test Organization 1');
            (0, globals_1.expect)(invitation2.organizationName).toBe('Test Organization 2');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2ludml0YXRpb24vaW52aXRhdGlvbi1tYW5hZ2VtZW50LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBa0Y7QUFDbEYsb0VBQW9FO0FBQ3BFLG1DQUFtQztBQUNuQywrQ0FBK0M7QUFDL0MsbURBQW1EO0FBQ25ELCtEQUFpRDtBQUNqRCw2Q0FBc0M7QUFDdEMsd0RBQThCO0FBQzlCLDZFQUFrRjtBQUVsRiw4Q0FBOEM7QUFFOUMsaUVBQWlFO0FBQ2pFLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLElBQUksRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQztRQUMzRSxHQUFHLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUMvQixNQUFNLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtLQUNuQyxDQUFDLENBQUM7SUFDSCxHQUFHLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkMsSUFBSSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNyRixHQUFHLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUMvQixNQUFNLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtLQUNuQyxDQUFDLENBQUM7SUFDSCxHQUFHLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkMsSUFBSSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUM7UUFDM0UsR0FBRyxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDL0IsTUFBTSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFjLEVBQUU7S0FDbkMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLElBQUksRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO1FBQzNFLEdBQUcsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQy9CLE1BQU0sRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO0tBQ25DLENBQUMsQ0FBQztDQUNKLENBQUM7QUFFRixJQUFBLGtCQUFRLEVBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO0lBQ3pDLElBQUksU0FBYyxDQUFDO0lBQ25CLElBQUksV0FBZ0IsQ0FBQztJQUNyQixJQUFJLFVBQWUsQ0FBQztJQUNwQixJQUFJLGFBQWtCLENBQUM7SUFDdkIsSUFBSSxhQUFrQixDQUFDO0lBQ3ZCLElBQUksZUFBb0IsQ0FBQztJQUN6QixJQUFJLGVBQW9CLENBQUM7SUFDekIsSUFBSSxXQUFtQixDQUFDO0lBQ3hCLElBQUksYUFBcUIsQ0FBQztJQUMxQixJQUFJLFlBQW9CLENBQUM7SUFFekIsSUFBQSxvQkFBVSxFQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLHNDQUFzQztRQUN0QyxpQ0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRXZCLDRCQUE0QjtRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSw4QkFBTSxDQUFDLE1BQU0sQ0FBQyxrQ0FBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNsRSxJQUFJLEVBQUUscUJBQXFCO1lBQzNCLElBQUksRUFBRSxvQkFBb0I7WUFDMUIsT0FBTyxFQUFFLGFBQWE7WUFDdEIsSUFBSSxFQUFFLFVBQVU7WUFDaEIsUUFBUSxFQUFFLElBQUk7WUFDZCxVQUFVLEVBQUUsU0FBUztTQUN0QixDQUFDLENBQUMsU0FBUyxFQUFTLENBQUM7UUFDdEIsYUFBYSxHQUFHLElBQUksQ0FBQztRQUVyQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSw4QkFBTSxDQUFDLE1BQU0sQ0FBQyxrQ0FBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNsRSxJQUFJLEVBQUUscUJBQXFCO1lBQzNCLElBQUksRUFBRSxXQUFXO1lBQ2pCLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCLElBQUksRUFBRSxhQUFhO1lBQ25CLFFBQVEsRUFBRSxJQUFJO1lBQ2QsVUFBVSxFQUFFLFNBQVM7U0FDdEIsQ0FBQyxDQUFDLFNBQVMsRUFBUyxDQUFDO1FBQ3RCLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFFckIsb0JBQW9CO1FBQ3BCLE1BQU0sY0FBYyxHQUFHLE1BQU0sa0JBQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTVELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLDhCQUFNLENBQUMsTUFBTSxDQUFDLGtDQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQzNELFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsS0FBSyxFQUFFLGdCQUFnQjtZQUN2QixRQUFRLEVBQUUsY0FBYztZQUN4QixTQUFTLEVBQUUsT0FBTztZQUNsQixRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsT0FBTztZQUNiLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDLFNBQVMsRUFBUyxDQUFDO1FBQ3RCLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFbEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE1BQU0sOEJBQU0sQ0FBQyxNQUFNLENBQUMsa0NBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDN0QsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixLQUFLLEVBQUUsa0JBQWtCO1lBQ3pCLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLElBQUksRUFBRSxTQUFTO1lBQ2YsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUMsU0FBUyxFQUFXLENBQUM7UUFFeEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sOEJBQU0sQ0FBQyxNQUFNLENBQUMsa0NBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDNUQsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixLQUFLLEVBQUUsaUJBQWlCO1lBQ3hCLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRSxRQUFRO1lBQ25CLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLElBQUksRUFBRSxRQUFRO1lBQ2QsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUMsU0FBUyxFQUFXLENBQUM7UUFFeEIsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQ3RCLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFFcEIsa0NBQWtDO1FBQ2xDLE1BQU0sOEJBQU0sQ0FBQyxNQUFNLENBQUMsa0NBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN2RCxNQUFNLEVBQUUsV0FBVyxDQUFDLEVBQUU7WUFDdEIsY0FBYyxFQUFFLGFBQWEsQ0FBQyxFQUFFO1lBQ2hDLGdCQUFnQixFQUFFLFNBQVM7WUFDM0IsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUM7UUFFSCwwQkFBMEI7UUFDMUIsTUFBTSxjQUFjLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxjQUFjLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtRQUV4RSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSw4QkFBTSxDQUFDLE1BQU0sQ0FBQyxrQ0FBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUN2RSxLQUFLLEVBQUUsbUJBQW1CO1lBQzFCLEtBQUssRUFBRSxjQUFjO1lBQ3JCLFNBQVMsRUFBRSxPQUFPO1lBQ2xCLElBQUksRUFBRSxRQUFRO1lBQ2QsTUFBTSxFQUFFLFNBQVM7WUFDakIsY0FBYyxFQUFFLGFBQWEsQ0FBQyxFQUFFO1lBQ2hDLGVBQWUsRUFBRSxTQUFTLENBQUMsRUFBRTtZQUM3QixTQUFTLEVBQUUsY0FBYztTQUMxQixDQUFDLENBQUMsU0FBUyxFQUFXLENBQUM7UUFFeEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE1BQU0sOEJBQU0sQ0FBQyxNQUFNLENBQUMsa0NBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDdkUsS0FBSyxFQUFFLG1CQUFtQjtZQUMxQixLQUFLLEVBQUUsY0FBYztZQUNyQixTQUFTLEVBQUUsT0FBTztZQUNsQixJQUFJLEVBQUUsVUFBVTtZQUNoQixNQUFNLEVBQUUsU0FBUztZQUNqQixjQUFjLEVBQUUsYUFBYSxDQUFDLEVBQUU7WUFDaEMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQzdCLFNBQVMsRUFBRSxjQUFjO1NBQzFCLENBQUMsQ0FBQyxTQUFTLEVBQVcsQ0FBQztRQUV4QixlQUFlLEdBQUcsV0FBVyxDQUFDO1FBQzlCLGVBQWUsR0FBRyxXQUFXLENBQUM7UUFFOUIsOEJBQThCO1FBQzlCLE1BQU0sVUFBVSxHQUFHLE1BQU0sV0FBVzthQUNqQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7YUFDdkIsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQzlELFdBQVcsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRS9DLE1BQU0sWUFBWSxHQUFHLE1BQU0sV0FBVzthQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7YUFDdkIsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLGFBQWEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRW5ELE1BQU0sV0FBVyxHQUFHLE1BQU0sV0FBVzthQUNsQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7YUFDdkIsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELFlBQVksR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxtQkFBUyxFQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLHNDQUFzQztRQUN0QyxpQ0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtRQUM1QyxJQUFBLFlBQUUsRUFBQyxtREFBbUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNqRSxNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVc7aUJBQy9CLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztpQkFDL0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUM7aUJBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVmLElBQUEsZ0JBQU0sRUFBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRCxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV0QyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFELElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUM5QyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyx1RUFBdUUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNyRixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVc7aUJBQy9CLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztpQkFDL0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUM7aUJBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVmLElBQUEsZ0JBQU0sRUFBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoRCxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUN6RCxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXO2lCQUMvQixHQUFHLENBQUMsMEJBQTBCLENBQUM7aUJBQy9CLEdBQUcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDO2lCQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzNELE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVztpQkFDL0IsR0FBRyxDQUFDLDBCQUEwQixDQUFDO2lCQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxvRUFBb0UsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNsRixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVc7aUJBQy9CLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztpQkFDL0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUM7aUJBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVmLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QyxJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNDLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQy9DLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDL0MsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3BELElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDaEQsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNqRCxJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtRQUMzQyxJQUFBLFlBQUUsRUFBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRCxNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVc7aUJBQy9CLE1BQU0sQ0FBQyxvQkFBb0IsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDO2lCQUNoRCxHQUFHLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQztpQkFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWYsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLENBQUM7WUFDdEUsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU1RCwrQkFBK0I7WUFDL0IsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLDhCQUFNO2lCQUN0QyxNQUFNLEVBQUU7aUJBQ1IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7aUJBQ3hCLEtBQUssQ0FBQyxJQUFBLGdCQUFFLEVBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFVLENBQUM7WUFDakUsSUFBQSxnQkFBTSxFQUFDLG9CQUFvQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMscUVBQXFFLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkYsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXO2lCQUMvQixNQUFNLENBQUMsb0JBQW9CLGVBQWUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztpQkFDaEQsR0FBRyxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUM7aUJBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVmLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1lBRXRFLCtCQUErQjtZQUMvQixNQUFNLG9CQUFvQixHQUFHLE1BQU0sOEJBQU07aUJBQ3RDLE1BQU0sRUFBRTtpQkFDUixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztpQkFDeEIsS0FBSyxDQUFDLElBQUEsZ0JBQUUsRUFBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQVUsQ0FBQztZQUNqRSxJQUFBLGdCQUFNLEVBQUMsb0JBQW9CLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywyRUFBMkUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVc7aUJBQy9CLE1BQU0sQ0FBQyxvQkFBb0IsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDO2lCQUNoRCxHQUFHLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQztpQkFDNUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWYsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDNUQsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLHlEQUF5RCxDQUFDLENBQUM7WUFFOUYsaUNBQWlDO1lBQ2pDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSw4QkFBTTtpQkFDdEMsTUFBTSxFQUFFO2lCQUNSLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO2lCQUN4QixLQUFLLENBQUMsSUFBQSxnQkFBRSxFQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBVSxDQUFDO1lBQ2pFLElBQUEsZ0JBQU0sRUFBQyxvQkFBb0IsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLG9DQUFvQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2xELE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVztpQkFDL0IsTUFBTSxDQUFDLG9CQUFvQixlQUFlLENBQUMsRUFBRSxFQUFFLENBQUM7aUJBQ2hELEdBQUcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDO2lCQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLCtDQUErQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzdELE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVztpQkFDL0IsTUFBTSxDQUFDLGtDQUFrQyxDQUFDO2lCQUMxQyxHQUFHLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQztpQkFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWYsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRCxNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVc7aUJBQy9CLE1BQU0sQ0FBQyxvQkFBb0IsZUFBZSxDQUFDLEVBQUUsRUFBRSxDQUFDO2lCQUNoRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDaEQsSUFBQSxZQUFFLEVBQUMsd0NBQXdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdEQsZ0NBQWdDO1lBQ2hDLE1BQU0sOEJBQU0sQ0FBQyxNQUFNLENBQUMsa0NBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQ2pELEtBQUssRUFBRSxzQkFBc0I7Z0JBQzdCLEtBQUssRUFBRSxnQkFBZ0I7Z0JBQ3ZCLFNBQVMsRUFBRSxlQUFlO2dCQUMxQixJQUFJLEVBQUUsUUFBUTtnQkFDZCxNQUFNLEVBQUUsVUFBVTtnQkFDbEIsY0FBYyxFQUFFLGFBQWEsQ0FBQyxFQUFFO2dCQUNoQyxlQUFlLEVBQUUsU0FBUyxDQUFDLEVBQUU7Z0JBQzdCLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQzthQUMxRCxDQUFDLENBQUM7WUFFSCxNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVc7aUJBQy9CLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztpQkFDL0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUM7aUJBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVmLHlDQUF5QztZQUN6QyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdELElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUUsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNqRyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pFLCtCQUErQjtZQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQy9CLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWTtZQUU1RCxNQUFNLDhCQUFNLENBQUMsTUFBTSxDQUFDLGtDQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUNqRCxLQUFLLEVBQUUscUJBQXFCO2dCQUM1QixLQUFLLEVBQUUsZUFBZTtnQkFDdEIsU0FBUyxFQUFFLGNBQWM7Z0JBQ3pCLElBQUksRUFBRSxRQUFRO2dCQUNkLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixjQUFjLEVBQUUsYUFBYSxDQUFDLEVBQUU7Z0JBQ2hDLGVBQWUsRUFBRSxTQUFTLENBQUMsRUFBRTtnQkFDN0IsU0FBUyxFQUFFLFdBQVc7YUFDdkIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXO2lCQUMvQixHQUFHLENBQUMsMEJBQTBCLENBQUM7aUJBQy9CLEdBQUcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDO2lCQUMxQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixvRUFBb0U7WUFDcEUsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ2hHLElBQUEsZ0JBQU0sRUFBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3hDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtRQUN2RCxJQUFBLFlBQUUsRUFBQyw2REFBNkQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRSx5Q0FBeUM7WUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sOEJBQU0sQ0FBQyxNQUFNLENBQUMsa0NBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQ3RFLEtBQUssRUFBRSxvQkFBb0I7Z0JBQzNCLEtBQUssRUFBRSxjQUFjO2dCQUNyQixTQUFTLEVBQUUsYUFBYTtnQkFDeEIsSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLGNBQWMsRUFBRSxJQUFJO2dCQUNwQixlQUFlLEVBQUUsU0FBUyxDQUFDLEVBQUU7Z0JBQzdCLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQzthQUMxRCxDQUFDLENBQUMsU0FBUyxFQUFXLENBQUM7WUFFeEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxXQUFXO2lCQUMvQixHQUFHLENBQUMsMEJBQTBCLENBQUM7aUJBQy9CLEdBQUcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDO2lCQUMxQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFZixNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxvQkFBb0IsQ0FBQyxDQUFDO1lBQzdGLElBQUEsZ0JBQU0sRUFBQyxlQUFlLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUN0QyxJQUFBLGdCQUFNLEVBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xELElBQUEsZ0JBQU0sRUFBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3ZELE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVztpQkFDL0IsR0FBRyxDQUFDLDBCQUEwQixDQUFDO2lCQUMvQixHQUFHLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQztpQkFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWYsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssbUJBQW1CLENBQUMsQ0FBQztZQUN4RixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxtQkFBbUIsQ0FBQyxDQUFDO1lBRXhGLElBQUEsZ0JBQU0sRUFBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNqRSxJQUFBLGdCQUFNLEVBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDbkUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdGVzdHMvdW5pdC9pbnZpdGF0aW9uL2ludml0YXRpb24tbWFuYWdlbWVudC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVFYWNoLCBhZnRlckVhY2gsIGplc3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbi8vIFVuaXQgdGVzdCB1c2luZyBtb2NrcyAtIG1vdmVkIHNlcnZlciBpbXBvcnRzIHRvIGludGVncmF0aW9uIHRlc3RzXG4vLyBpbXBvcnQgcmVxdWVzdCBmcm9tICdzdXBlcnRlc3QnO1xuLy8gaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi4vLi4vLi4vc2VydmVyL2luZGV4Jztcbi8vIGltcG9ydCB7IG1vY2tEYiB9IGZyb20gJy4uLy4uLy4uL3NlcnZlci9tb2NrRGInO1xuaW1wb3J0ICogYXMgc2NoZW1hIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zY2hlbWEnO1xuaW1wb3J0IHsgZXEsIGFuZCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xuaW1wb3J0IHsgbW9ja0RiLCB0ZXN0VXRpbHMsIG1vY2tTY2hlbWEgfSBmcm9tICcuLi8uLi9tb2Nrcy91bmlmaWVkLWRhdGFiYXNlLW1vY2snO1xuXG4vLyBVc2luZyB1bmlmaWVkIGRhdGFiYXNlIG1vY2sgZm9yIGNvbnNpc3RlbmN5XG5cbi8vIE1vY2sgcmVxdWVzdCBmb3IgQVBJIHRlc3RpbmcgKHVzaW5nIHByb3BlciByZXNwb25zZSBzdHJ1Y3R1cmUpXG5jb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgcG9zdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNlbmQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN0YXR1czogMjAwLCBib2R5OiB7IHN1Y2Nlc3M6IHRydWUgfSB9KSxcbiAgICBzZXQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGV4cGVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKClcbiAgfSkpLFxuICBnZXQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBzZW5kOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdGF0dXM6IDIwMCwgYm9keTogeyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBbXSB9IH0pLFxuICAgIHNldDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgZXhwZWN0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKVxuICB9KSksXG4gIHB1dDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNlbmQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN0YXR1czogMjAwLCBib2R5OiB7IHN1Y2Nlc3M6IHRydWUgfSB9KSxcbiAgICBzZXQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIGV4cGVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKClcbiAgfSkpLFxuICBkZWxldGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBzZW5kOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdGF0dXM6IDIwMCwgYm9keTogeyBzdWNjZXNzOiB0cnVlIH0gfSksXG4gICAgc2V0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBleHBlY3Q6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpXG4gIH0pKVxufTtcblxuZGVzY3JpYmUoJ0ludml0YXRpb24gTWFuYWdlbWVudCBBUEknLCAoKSA9PiB7XG4gIGxldCBhZG1pblVzZXI6IGFueTtcbiAgbGV0IG1hbmFnZXJVc2VyOiBhbnk7XG4gIGxldCB0ZW5hbnRVc2VyOiBhbnk7XG4gIGxldCBvcmdhbml6YXRpb24xOiBhbnk7XG4gIGxldCBvcmdhbml6YXRpb24yOiBhbnk7XG4gIGxldCB0ZXN0SW52aXRhdGlvbjE6IGFueTtcbiAgbGV0IHRlc3RJbnZpdGF0aW9uMjogYW55O1xuICBsZXQgYWRtaW5Db29raWU6IHN0cmluZztcbiAgbGV0IG1hbmFnZXJDb29raWU6IHN0cmluZztcbiAgbGV0IHRlbmFudENvb2tpZTogc3RyaW5nO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIFJlc2V0IG1vY2sgZGF0YSBhbmQgY2xlYXIgYWxsIG1vY2tzXG4gICAgdGVzdFV0aWxzLnJlc2V0TW9ja3MoKTtcblxuICAgIC8vIENyZWF0ZSB0ZXN0IG9yZ2FuaXphdGlvbnNcbiAgICBjb25zdCBbb3JnMV0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KG1vY2tTY2hlbWEub3JnYW5pemF0aW9ucykudmFsdWVzKHtcbiAgICAgIG5hbWU6ICdUZXN0IE9yZ2FuaXphdGlvbiAxJyxcbiAgICAgIHR5cGU6ICdtYW5hZ2VtZW50X2NvbXBhbnknLFxuICAgICAgYWRkcmVzczogJzEyMyBUZXN0IFN0JyxcbiAgICAgIGNpdHk6ICdNb250cmVhbCcsXG4gICAgICBwcm92aW5jZTogJ1FDJyxcbiAgICAgIHBvc3RhbENvZGU6ICdIMUEgMUExJyxcbiAgICB9KS5yZXR1cm5pbmcoKSBhcyBhbnk7XG4gICAgb3JnYW5pemF0aW9uMSA9IG9yZzE7XG5cbiAgICBjb25zdCBbb3JnMl0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KG1vY2tTY2hlbWEub3JnYW5pemF0aW9ucykudmFsdWVzKHtcbiAgICAgIG5hbWU6ICdUZXN0IE9yZ2FuaXphdGlvbiAyJyxcbiAgICAgIHR5cGU6ICdzeW5kaWNhdGUnLFxuICAgICAgYWRkcmVzczogJzQ1NiBUZXN0IEF2ZScsXG4gICAgICBjaXR5OiAnUXVlYmVjIENpdHknLFxuICAgICAgcHJvdmluY2U6ICdRQycsXG4gICAgICBwb3N0YWxDb2RlOiAnRzFBIDFBMScsXG4gICAgfSkucmV0dXJuaW5nKCkgYXMgYW55O1xuICAgIG9yZ2FuaXphdGlvbjIgPSBvcmcyO1xuXG4gICAgLy8gQ3JlYXRlIHRlc3QgdXNlcnNcbiAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKCdwYXNzd29yZDEyMycsIDEwKTtcbiAgICBcbiAgICBjb25zdCBbYWRtaW5dID0gYXdhaXQgbW9ja0RiLmluc2VydChtb2NrU2NoZW1hLnVzZXJzKS52YWx1ZXMoe1xuICAgICAgdXNlcm5hbWU6ICdhZG1pbkB0ZXN0LmNvbScsXG4gICAgICBlbWFpbDogJ2FkbWluQHRlc3QuY29tJyxcbiAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgIGZpcnN0TmFtZTogJ0FkbWluJyxcbiAgICAgIGxhc3ROYW1lOiAnVXNlcicsXG4gICAgICByb2xlOiAnYWRtaW4nLFxuICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgfSkucmV0dXJuaW5nKCkgYXMgYW55O1xuICAgIGFkbWluVXNlciA9IGFkbWluO1xuXG4gICAgY29uc3QgW21hbmFnZXJdID0gYXdhaXQgbW9ja0RiLmluc2VydChtb2NrU2NoZW1hLnVzZXJzKS52YWx1ZXMoe1xuICAgICAgdXNlcm5hbWU6ICdtYW5hZ2VyQHRlc3QuY29tJyxcbiAgICAgIGVtYWlsOiAnbWFuYWdlckB0ZXN0LmNvbScsXG4gICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICBmaXJzdE5hbWU6ICdNYW5hZ2VyJyxcbiAgICAgIGxhc3ROYW1lOiAnVXNlcicsXG4gICAgICByb2xlOiAnbWFuYWdlcicsXG4gICAgICBsYW5ndWFnZTogJ2VuJyxcbiAgICB9KS5yZXR1cm5pbmcoKSBhcyBhbnlbXTtcblxuICAgIGNvbnN0IFt0ZW5hbnRdID0gYXdhaXQgbW9ja0RiLmluc2VydChtb2NrU2NoZW1hLnVzZXJzKS52YWx1ZXMoe1xuICAgICAgdXNlcm5hbWU6ICd0ZW5hbnRAdGVzdC5jb20nLFxuICAgICAgZW1haWw6ICd0ZW5hbnRAdGVzdC5jb20nLFxuICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgZmlyc3ROYW1lOiAnVGVuYW50JyxcbiAgICAgIGxhc3ROYW1lOiAnVXNlcicsXG4gICAgICByb2xlOiAndGVuYW50JyxcbiAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgIH0pLnJldHVybmluZygpIGFzIGFueVtdO1xuXG4gICAgYWRtaW5Vc2VyID0gYWRtaW47XG4gICAgbWFuYWdlclVzZXIgPSBtYW5hZ2VyO1xuICAgIHRlbmFudFVzZXIgPSB0ZW5hbnQ7XG5cbiAgICAvLyBBc3NpZ24gbWFuYWdlciB0byBvcmdhbml6YXRpb24xXG4gICAgYXdhaXQgbW9ja0RiLmluc2VydChtb2NrU2NoZW1hLnVzZXJPcmdhbml6YXRpb25zKS52YWx1ZXMoe1xuICAgICAgdXNlcklkOiBtYW5hZ2VyVXNlci5pZCxcbiAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24xLmlkLFxuICAgICAgb3JnYW5pemF0aW9uUm9sZTogJ21hbmFnZXInLFxuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgdGVzdCBpbnZpdGF0aW9uc1xuICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICBleHBpcmF0aW9uRGF0ZS5zZXREYXRlKGV4cGlyYXRpb25EYXRlLmdldERhdGUoKSArIDcpOyAvLyA3IGRheXMgZnJvbSBub3dcblxuICAgIGNvbnN0IFtpbnZpdGF0aW9uMV0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KG1vY2tTY2hlbWEuaW52aXRhdGlvbnMpLnZhbHVlcyh7XG4gICAgICBlbWFpbDogJ3Rlc3QxQGV4YW1wbGUuY29tJyxcbiAgICAgIHRva2VuOiAndGVzdC10b2tlbi0xJyxcbiAgICAgIHRva2VuSGFzaDogJ2hhc2gxJyxcbiAgICAgIHJvbGU6ICd0ZW5hbnQnLFxuICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uMS5pZCxcbiAgICAgIGludml0ZWRCeVVzZXJJZDogYWRtaW5Vc2VyLmlkLFxuICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICB9KS5yZXR1cm5pbmcoKSBhcyBhbnlbXTtcblxuICAgIGNvbnN0IFtpbnZpdGF0aW9uMl0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KG1vY2tTY2hlbWEuaW52aXRhdGlvbnMpLnZhbHVlcyh7XG4gICAgICBlbWFpbDogJ3Rlc3QyQGV4YW1wbGUuY29tJyxcbiAgICAgIHRva2VuOiAndGVzdC10b2tlbi0yJyxcbiAgICAgIHRva2VuSGFzaDogJ2hhc2gyJyxcbiAgICAgIHJvbGU6ICdyZXNpZGVudCcsXG4gICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24yLmlkLFxuICAgICAgaW52aXRlZEJ5VXNlcklkOiBhZG1pblVzZXIuaWQsXG4gICAgICBleHBpcmVzQXQ6IGV4cGlyYXRpb25EYXRlLFxuICAgIH0pLnJldHVybmluZygpIGFzIGFueVtdO1xuXG4gICAgdGVzdEludml0YXRpb24xID0gaW52aXRhdGlvbjE7XG4gICAgdGVzdEludml0YXRpb24yID0gaW52aXRhdGlvbjI7XG5cbiAgICAvLyBMb2dpbiB1c2VycyBhbmQgZ2V0IGNvb2tpZXNcbiAgICBjb25zdCBhZG1pbkxvZ2luID0gYXdhaXQgbW9ja1JlcXVlc3RcbiAgICAgIC5wb3N0KCcvYXBpL2F1dGgvbG9naW4nKVxuICAgICAgLnNlbmQoeyBlbWFpbDogJ2FkbWluQHRlc3QuY29tJywgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycgfSk7XG4gICAgYWRtaW5Db29raWUgPSBhZG1pbkxvZ2luLmhlYWRlcnNbJ3NldC1jb29raWUnXTtcblxuICAgIGNvbnN0IG1hbmFnZXJMb2dpbiA9IGF3YWl0IG1vY2tSZXF1ZXN0XG4gICAgICAucG9zdCgnL2FwaS9hdXRoL2xvZ2luJylcbiAgICAgIC5zZW5kKHsgZW1haWw6ICdtYW5hZ2VyQHRlc3QuY29tJywgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycgfSk7XG4gICAgbWFuYWdlckNvb2tpZSA9IG1hbmFnZXJMb2dpbi5oZWFkZXJzWydzZXQtY29va2llJ107XG5cbiAgICBjb25zdCB0ZW5hbnRMb2dpbiA9IGF3YWl0IG1vY2tSZXF1ZXN0XG4gICAgICAucG9zdCgnL2FwaS9hdXRoL2xvZ2luJylcbiAgICAgIC5zZW5kKHsgZW1haWw6ICd0ZW5hbnRAdGVzdC5jb20nLCBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyB9KTtcbiAgICB0ZW5hbnRDb29raWUgPSB0ZW5hbnRMb2dpbi5oZWFkZXJzWydzZXQtY29va2llJ107XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgLy8gUmVzZXQgbW9jayBkYXRhIGFuZCBjbGVhciBhbGwgbW9ja3NcbiAgICB0ZXN0VXRpbHMucmVzZXRNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnR0VUIC9hcGkvaW52aXRhdGlvbnMvcGVuZGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGFsbG93IGFkbWluIHRvIHNlZSBhbGwgcGVuZGluZyBpbnZpdGF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbW9ja1JlcXVlc3RcbiAgICAgICAgLmdldCgnL2FwaS9pbnZpdGF0aW9ucy9wZW5kaW5nJylcbiAgICAgICAgLnNldCgnQ29va2llJywgYWRtaW5Db29raWUpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocmVzcG9uc2UuYm9keSkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgXG4gICAgICBjb25zdCBlbWFpbHMgPSByZXNwb25zZS5ib2R5Lm1hcCgoaW52OiBhbnkpID0+IGludi5lbWFpbCk7XG4gICAgICBleHBlY3QoZW1haWxzKS50b0NvbnRhaW4oJ3Rlc3QxQGV4YW1wbGUuY29tJyk7XG4gICAgICBleHBlY3QoZW1haWxzKS50b0NvbnRhaW4oJ3Rlc3QyQGV4YW1wbGUuY29tJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFsbG93IG1hbmFnZXIgdG8gc2VlIG9ubHkgaW52aXRhdGlvbnMgZnJvbSB0aGVpciBvcmdhbml6YXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2NrUmVxdWVzdFxuICAgICAgICAuZ2V0KCcvYXBpL2ludml0YXRpb25zL3BlbmRpbmcnKVxuICAgICAgICAuc2V0KCdDb29raWUnLCBtYW5hZ2VyQ29va2llKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlc3BvbnNlLmJvZHkpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5WzBdLmVtYWlsKS50b0JlKCd0ZXN0MUBleGFtcGxlLmNvbScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHlbMF0ub3JnYW5pemF0aW9uSWQpLnRvQmUob3JnYW5pemF0aW9uMS5pZCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRlbnkgYWNjZXNzIHRvIHRlbmFudCB1c2VycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbW9ja1JlcXVlc3RcbiAgICAgICAgLmdldCgnL2FwaS9pbnZpdGF0aW9ucy9wZW5kaW5nJylcbiAgICAgICAgLnNldCgnQ29va2llJywgdGVuYW50Q29va2llKVxuICAgICAgICAuZXhwZWN0KDQwMyk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmNvZGUpLnRvQmUoJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBkZW55IGFjY2VzcyB0byB1bmF1dGhlbnRpY2F0ZWQgdXNlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1vY2tSZXF1ZXN0XG4gICAgICAgIC5nZXQoJy9hcGkvaW52aXRhdGlvbnMvcGVuZGluZycpXG4gICAgICAgIC5leHBlY3QoNDAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY29kZSkudG9CZSgnQVVUSF9SRVFVSVJFRCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcHJvcGVyIGludml0YXRpb24gc3RydWN0dXJlIHdpdGggYWxsIHJlcXVpcmVkIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbW9ja1JlcXVlc3RcbiAgICAgICAgLmdldCgnL2FwaS9pbnZpdGF0aW9ucy9wZW5kaW5nJylcbiAgICAgICAgLnNldCgnQ29va2llJywgYWRtaW5Db29raWUpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgY29uc3QgaW52aXRhdGlvbiA9IHJlc3BvbnNlLmJvZHlbMF07XG4gICAgICBleHBlY3QoaW52aXRhdGlvbikudG9IYXZlUHJvcGVydHkoJ2lkJyk7XG4gICAgICBleHBlY3QoaW52aXRhdGlvbikudG9IYXZlUHJvcGVydHkoJ2VtYWlsJyk7XG4gICAgICBleHBlY3QoaW52aXRhdGlvbikudG9IYXZlUHJvcGVydHkoJ3JvbGUnKTtcbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uKS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJyk7XG4gICAgICBleHBlY3QoaW52aXRhdGlvbikudG9IYXZlUHJvcGVydHkoJ2V4cGlyZXNBdCcpO1xuICAgICAgZXhwZWN0KGludml0YXRpb24pLnRvSGF2ZVByb3BlcnR5KCdjcmVhdGVkQXQnKTtcbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uKS50b0hhdmVQcm9wZXJ0eSgnb3JnYW5pemF0aW9uSWQnKTtcbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uKS50b0hhdmVQcm9wZXJ0eSgnYnVpbGRpbmdJZCcpO1xuICAgICAgZXhwZWN0KGludml0YXRpb24pLnRvSGF2ZVByb3BlcnR5KCdyZXNpZGVuY2VJZCcpO1xuICAgICAgZXhwZWN0KGludml0YXRpb24uc3RhdHVzKS50b0JlKCdwZW5kaW5nJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdERUxFVEUgL2FwaS9pbnZpdGF0aW9ucy86aWQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBhZG1pbiB0byBkZWxldGUgYW55IGludml0YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1vY2tSZXF1ZXN0XG4gICAgICAgIC5kZWxldGUoYC9hcGkvaW52aXRhdGlvbnMvJHt0ZXN0SW52aXRhdGlvbjEuaWR9YClcbiAgICAgICAgLnNldCgnQ29va2llJywgYWRtaW5Db29raWUpXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9CZSgnSW52aXRhdGlvbiBkZWxldGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuaW52aXRhdGlvbklkKS50b0JlKHRlc3RJbnZpdGF0aW9uMS5pZCk7XG5cbiAgICAgIC8vIFZlcmlmeSBpbnZpdGF0aW9uIGlzIGRlbGV0ZWRcbiAgICAgIGNvbnN0IHJlbWFpbmluZ0ludml0YXRpb25zID0gYXdhaXQgbW9ja0RiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuaWQsIHRlc3RJbnZpdGF0aW9uMS5pZCkpIGFzIGFueVtdO1xuICAgICAgZXhwZWN0KHJlbWFpbmluZ0ludml0YXRpb25zKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFsbG93IG1hbmFnZXIgdG8gZGVsZXRlIGludml0YXRpb25zIGZyb20gdGhlaXIgb3JnYW5pemF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbW9ja1JlcXVlc3RcbiAgICAgICAgLmRlbGV0ZShgL2FwaS9pbnZpdGF0aW9ucy8ke3Rlc3RJbnZpdGF0aW9uMS5pZH1gKVxuICAgICAgICAuc2V0KCdDb29raWUnLCBtYW5hZ2VyQ29va2llKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQmUoJ0ludml0YXRpb24gZGVsZXRlZCBzdWNjZXNzZnVsbHknKTtcblxuICAgICAgLy8gVmVyaWZ5IGludml0YXRpb24gaXMgZGVsZXRlZFxuICAgICAgY29uc3QgcmVtYWluaW5nSW52aXRhdGlvbnMgPSBhd2FpdCBtb2NrRGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5pZCwgdGVzdEludml0YXRpb24xLmlkKSkgYXMgYW55W107XG4gICAgICBleHBlY3QocmVtYWluaW5nSW52aXRhdGlvbnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJldmVudCBtYW5hZ2VyIGZyb20gZGVsZXRpbmcgaW52aXRhdGlvbnMgZnJvbSBvdGhlciBvcmdhbml6YXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2NrUmVxdWVzdFxuICAgICAgICAuZGVsZXRlKGAvYXBpL2ludml0YXRpb25zLyR7dGVzdEludml0YXRpb24yLmlkfWApXG4gICAgICAgIC5zZXQoJ0Nvb2tpZScsIG1hbmFnZXJDb29raWUpXG4gICAgICAgIC5leHBlY3QoNDAzKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY29kZSkudG9CZSgnSU5TVUZGSUNJRU5UX1BFUk1JU1NJT05TJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5tZXNzYWdlKS50b0JlKCdZb3UgY2FuIG9ubHkgZGVsZXRlIGludml0YXRpb25zIGZyb20geW91ciBvcmdhbml6YXRpb25zJyk7XG5cbiAgICAgIC8vIFZlcmlmeSBpbnZpdGF0aW9uIHN0aWxsIGV4aXN0c1xuICAgICAgY29uc3QgcmVtYWluaW5nSW52aXRhdGlvbnMgPSBhd2FpdCBtb2NrRGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5pZCwgdGVzdEludml0YXRpb24yLmlkKSkgYXMgYW55W107XG4gICAgICBleHBlY3QocmVtYWluaW5nSW52aXRhdGlvbnMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGVueSBhY2Nlc3MgdG8gdGVuYW50IHVzZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2NrUmVxdWVzdFxuICAgICAgICAuZGVsZXRlKGAvYXBpL2ludml0YXRpb25zLyR7dGVzdEludml0YXRpb24xLmlkfWApXG4gICAgICAgIC5zZXQoJ0Nvb2tpZScsIHRlbmFudENvb2tpZSlcbiAgICAgICAgLmV4cGVjdCg0MDMpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5jb2RlKS50b0JlKCdJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIDQwNCBmb3Igbm9uLWV4aXN0ZW50IGludml0YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1vY2tSZXF1ZXN0XG4gICAgICAgIC5kZWxldGUoJy9hcGkvaW52aXRhdGlvbnMvbm9uLWV4aXN0ZW50LWlkJylcbiAgICAgICAgLnNldCgnQ29va2llJywgYWRtaW5Db29raWUpXG4gICAgICAgIC5leHBlY3QoNDA0KTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY29kZSkudG9CZSgnSU5WSVRBVElPTl9OT1RfRk9VTkQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGVueSBhY2Nlc3MgdG8gdW5hdXRoZW50aWNhdGVkIHVzZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2NrUmVxdWVzdFxuICAgICAgICAuZGVsZXRlKGAvYXBpL2ludml0YXRpb25zLyR7dGVzdEludml0YXRpb24xLmlkfWApXG4gICAgICAgIC5leHBlY3QoNDAxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuY29kZSkudG9CZSgnQVVUSF9SRVFVSVJFRCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW52aXRhdGlvbiBTdGF0dXMgYW5kIEV4cGlyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBvbmx5IHJldHVybiBwZW5kaW5nIGludml0YXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIGFuIGFjY2VwdGVkIGludml0YXRpb25cbiAgICAgIGF3YWl0IG1vY2tEYi5pbnNlcnQobW9ja1NjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKHtcbiAgICAgICAgZW1haWw6ICdhY2NlcHRlZEBleGFtcGxlLmNvbScsXG4gICAgICAgIHRva2VuOiAnYWNjZXB0ZWQtdG9rZW4nLFxuICAgICAgICB0b2tlbkhhc2g6ICdhY2NlcHRlZC1oYXNoJyxcbiAgICAgICAgcm9sZTogJ3RlbmFudCcsXG4gICAgICAgIHN0YXR1czogJ2FjY2VwdGVkJyxcbiAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ2FuaXphdGlvbjEuaWQsXG4gICAgICAgIGludml0ZWRCeVVzZXJJZDogYWRtaW5Vc2VyLmlkLFxuICAgICAgICBleHBpcmVzQXQ6IG5ldyBEYXRlKERhdGUubm93KCkgKyA3ICogMjQgKiA2MCAqIDYwICogMTAwMCksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2NrUmVxdWVzdFxuICAgICAgICAuZ2V0KCcvYXBpL2ludml0YXRpb25zL3BlbmRpbmcnKVxuICAgICAgICAuc2V0KCdDb29raWUnLCBhZG1pbkNvb2tpZSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBTaG91bGQgb25seSByZXR1cm4gcGVuZGluZyBpbnZpdGF0aW9uc1xuICAgICAgY29uc3Qgc3RhdHVzZXMgPSByZXNwb25zZS5ib2R5Lm1hcCgoaW52OiBhbnkpID0+IGludi5zdGF0dXMpO1xuICAgICAgZXhwZWN0KHN0YXR1c2VzLmV2ZXJ5KChzdGF0dXM6IHN0cmluZykgPT4gc3RhdHVzID09PSAncGVuZGluZycpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZmluZCgoaW52OiBhbnkpID0+IGludi5lbWFpbCA9PT0gJ2FjY2VwdGVkQGV4YW1wbGUuY29tJykpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGV4cGlyZWQgaW52aXRhdGlvbnMgaW4gdGhlIHJlc3BvbnNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIGFuIGV4cGlyZWQgaW52aXRhdGlvblxuICAgICAgY29uc3QgZXhwaXJlZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgZXhwaXJlZERhdGUuc2V0RGF0ZShleHBpcmVkRGF0ZS5nZXREYXRlKCkgLSAxKTsgLy8gWWVzdGVyZGF5XG5cbiAgICAgIGF3YWl0IG1vY2tEYi5pbnNlcnQobW9ja1NjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKHtcbiAgICAgICAgZW1haWw6ICdleHBpcmVkQGV4YW1wbGUuY29tJyxcbiAgICAgICAgdG9rZW46ICdleHBpcmVkLXRva2VuJyxcbiAgICAgICAgdG9rZW5IYXNoOiAnZXhwaXJlZC1oYXNoJyxcbiAgICAgICAgcm9sZTogJ3RlbmFudCcsXG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uMS5pZCxcbiAgICAgICAgaW52aXRlZEJ5VXNlcklkOiBhZG1pblVzZXIuaWQsXG4gICAgICAgIGV4cGlyZXNBdDogZXhwaXJlZERhdGUsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2NrUmVxdWVzdFxuICAgICAgICAuZ2V0KCcvYXBpL2ludml0YXRpb25zL3BlbmRpbmcnKVxuICAgICAgICAuc2V0KCdDb29raWUnLCBhZG1pbkNvb2tpZSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBTaG91bGQgaW5jbHVkZSBleHBpcmVkIGludml0YXRpb25zICh0aGV5J3JlIHN0aWxsIHBlbmRpbmcgc3RhdHVzKVxuICAgICAgY29uc3QgZXhwaXJlZEludml0YXRpb24gPSByZXNwb25zZS5ib2R5LmZpbmQoKGludjogYW55KSA9PiBpbnYuZW1haWwgPT09ICdleHBpcmVkQGV4YW1wbGUuY29tJyk7XG4gICAgICBleHBlY3QoZXhwaXJlZEludml0YXRpb24pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobmV3IERhdGUoZXhwaXJlZEludml0YXRpb24uZXhwaXJlc0F0KSkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEYXRhYmFzZSBDb25zdHJhaW50cyBhbmQgRGF0YSBJbnRlZ3JpdHknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgaW52aXRhdGlvbnMgd2l0aCBudWxsIG9yZ2FuaXphdGlvbiByZWZlcmVuY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIGludml0YXRpb24gd2l0aG91dCBvcmdhbml6YXRpb25cbiAgICAgIGNvbnN0IFtpbnZpdGF0aW9uXSA9IGF3YWl0IG1vY2tEYi5pbnNlcnQobW9ja1NjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKHtcbiAgICAgICAgZW1haWw6ICduby1vcmdAZXhhbXBsZS5jb20nLFxuICAgICAgICB0b2tlbjogJ25vLW9yZy10b2tlbicsXG4gICAgICAgIHRva2VuSGFzaDogJ25vLW9yZy1oYXNoJyxcbiAgICAgICAgcm9sZTogJ3RlbmFudCcsXG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICBvcmdhbml6YXRpb25JZDogbnVsbCxcbiAgICAgICAgaW52aXRlZEJ5VXNlcklkOiBhZG1pblVzZXIuaWQsXG4gICAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoRGF0ZS5ub3coKSArIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKSxcbiAgICAgIH0pLnJldHVybmluZygpIGFzIGFueVtdO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG1vY2tSZXF1ZXN0XG4gICAgICAgIC5nZXQoJy9hcGkvaW52aXRhdGlvbnMvcGVuZGluZycpXG4gICAgICAgIC5zZXQoJ0Nvb2tpZScsIGFkbWluQ29va2llKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIGNvbnN0IG5vT3JnSW52aXRhdGlvbiA9IHJlc3BvbnNlLmJvZHkuZmluZCgoaW52OiBhbnkpID0+IGludi5lbWFpbCA9PT0gJ25vLW9yZ0BleGFtcGxlLmNvbScpO1xuICAgICAgZXhwZWN0KG5vT3JnSW52aXRhdGlvbikudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChub09yZ0ludml0YXRpb24ub3JnYW5pemF0aW9uSWQpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3Qobm9PcmdJbnZpdGF0aW9uLm9yZ2FuaXphdGlvbk5hbWUpLnRvQmVOdWxsKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGpvaW4gb3JnYW5pemF0aW9uIG5hbWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBtb2NrUmVxdWVzdFxuICAgICAgICAuZ2V0KCcvYXBpL2ludml0YXRpb25zL3BlbmRpbmcnKVxuICAgICAgICAuc2V0KCdDb29raWUnLCBhZG1pbkNvb2tpZSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICBjb25zdCBpbnZpdGF0aW9uMSA9IHJlc3BvbnNlLmJvZHkuZmluZCgoaW52OiBhbnkpID0+IGludi5lbWFpbCA9PT0gJ3Rlc3QxQGV4YW1wbGUuY29tJyk7XG4gICAgICBjb25zdCBpbnZpdGF0aW9uMiA9IHJlc3BvbnNlLmJvZHkuZmluZCgoaW52OiBhbnkpID0+IGludi5lbWFpbCA9PT0gJ3Rlc3QyQGV4YW1wbGUuY29tJyk7XG5cbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uMS5vcmdhbml6YXRpb25OYW1lKS50b0JlKCdUZXN0IE9yZ2FuaXphdGlvbiAxJyk7XG4gICAgICBleHBlY3QoaW52aXRhdGlvbjIub3JnYW5pemF0aW9uTmFtZSkudG9CZSgnVGVzdCBPcmdhbml6YXRpb24gMicpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==