{"version":3,"names":["cov_1zktl5d63o","actualCoverage","exports","StandardFormField","s","StandardSubmitButton","FormSection","react_1","__importDefault","require","form_1","input_1","textarea_1","select_1","checkbox_1","utils_1","form_validation_helpers_1","control","name","label","type","b","placeholder","description","required","disabled","className","options","rows","formName","autoComplete","min","max","step","f","testId","FormQuality","generateTestId","includes","renderInput","field","baseProps","cn","error","jsx_runtime_1","jsx","Textarea","jsxs","Select","onValueChange","onChange","defaultValue","value","children","SelectTrigger","SelectValue","toLowerCase","SelectContent","map","option","SelectItem","Checkbox","checked","onCheckedChange","Input","FormField","render","fieldState","FormItem","FormLabel","FormControl","FormDescription","FormMessage","isLoading","loadingText","variant","Fragment","viewBox","cx","cy","r","stroke","strokeWidth","fill","d","title","collapsible","defaultOpen","isOpen","setIsOpen","default","useState","toggleSection","onClick","strokeLinecap","strokeLinejoin"],"sources":["/home/runner/workspace/client/src/components/forms/StandardFormField.tsx"],"sourcesContent":["import React from 'react';\nimport { Control, FieldPath, FieldValues } from 'react-hook-form';\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage, FormDescription } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { cn } from '@/lib/utils';\nimport { FormQuality } from '@/utils/form-validation-helpers';\n\n/**\n * Standardized form field types for consistent form building\n */\nexport type StandardFieldType = \n  | 'text' \n  | 'email' \n  | 'password' \n  | 'textarea' \n  | 'select' \n  | 'checkbox' \n  | 'number'\n  | 'tel'\n  | 'url'\n  | 'date';\n\n/**\n * Option interface for select fields\n */\nexport interface FieldOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\n/**\n * Props for the standardized form field component\n */\ninterface StandardFormFieldProps<T extends FieldValues> {\n  control: Control<T>;\n  name: FieldPath<T>;\n  label: string;\n  type?: StandardFieldType;\n  placeholder?: string;\n  description?: string;\n  required?: boolean;\n  disabled?: boolean;\n  className?: string;\n  options?: FieldOption[]; // For select fields\n  rows?: number; // For textarea fields\n  formName?: string; // For auto-generating test IDs\n  autoComplete?: string;\n  min?: string | number;\n  max?: string | number;\n  step?: string | number;\n}\n\n/**\n * Standardized form field component that follows all Quebec compliance \n * and accessibility standards. Automatically generates test IDs and \n * applies consistent styling patterns.\n * \n * @param props - Configuration for the form field\n */\nexport function StandardFormField<T extends FieldValues>({\n  control,\n  name,\n  label,\n  type = 'text',\n  placeholder,\n  description,\n  required = false,\n  disabled = false,\n  className = '',\n  options = [],\n  rows = 3,\n  formName = 'form',\n  autoComplete,\n  min,\n  max,\n  step,\n}: StandardFormFieldProps<T>) {\n  // Auto-generate test ID following standards\n  const testId = FormQuality.generateTestId(formName, name as string, \n    ['select'].includes(type) ? 'select' : 'input');\n\n  // Render the appropriate input component based on type\n  const renderInput = (field: any) => {\n    const baseProps = {\n      ...field,\n      placeholder,\n      disabled,\n      autoComplete,\n      'data-testid': testId,\n      className: cn(\n        // Standard styling for all inputs\n        'transition-colors focus:ring-2 focus:ring-blue-500',\n        // Error state styling  \n        field.error && 'border-red-500 focus:border-red-500',\n        className\n      ),\n    };\n\n    switch (type) {\n      case 'textarea':\n        return (\n          <Textarea\n            {...baseProps}\n            rows={rows}\n            className={cn(\n              'min-h-[80px] resize-y',\n              baseProps.className\n            )}\n          />\n        );\n\n      case 'select':\n        return (\n          <Select\n            onValueChange={field.onChange}\n            defaultValue={field.value}\n            disabled={disabled}\n          >\n            <SelectTrigger data-testid={testId} className={baseProps.className}>\n              <SelectValue placeholder={placeholder || `Select ${label.toLowerCase()}`} />\n            </SelectTrigger>\n            <SelectContent>\n              {options.map((option) => (\n                <SelectItem\n                  key={option.value}\n                  value={option.value}\n                  disabled={option.disabled}\n                  data-testid={`${testId}-option-${option.value}`}\n                >\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n\n      case 'checkbox':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              checked={field.value}\n              onCheckedChange={field.onChange}\n              disabled={disabled}\n              data-testid={testId}\n              className={baseProps.className}\n            />\n            <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n              {label}\n            </span>\n          </div>\n        );\n\n      case 'number':\n        return (\n          <Input\n            {...baseProps}\n            type=\"number\"\n            min={min}\n            max={max}\n            step={step}\n          />\n        );\n\n      default:\n        return (\n          <Input\n            {...baseProps}\n            type={type}\n            min={min}\n            max={max}\n            step={step}\n          />\n        );\n    }\n  };\n\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field, fieldState }) => (\n        <FormItem className={cn('space-y-2', className)}>\n          {type !== 'checkbox' && (\n            <FormLabel className={cn(\n              'text-sm font-medium leading-none',\n              required && 'after:content-[\"*\"] after:ml-0.5 after:text-red-500',\n              fieldState.error && 'text-red-600'\n            )}>\n              {label}\n            </FormLabel>\n          )}\n          \n          <FormControl>\n            {renderInput({ ...field, error: fieldState.error })}\n          </FormControl>\n          \n          {description && (\n            <FormDescription className=\"text-sm text-muted-foreground\">\n              {description}\n            </FormDescription>\n          )}\n          \n          <FormMessage className=\"text-sm text-red-600\" />\n        </FormItem>\n      )}\n    />\n  );\n}\n\n/**\n * Standard form submit button with consistent styling and test ID\n */\ninterface StandardSubmitButtonProps {\n  isLoading?: boolean;\n  loadingText?: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n  formName?: string;\n  className?: string;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n}\n\nexport function StandardSubmitButton({\n  isLoading = false,\n  loadingText = 'Submitting...',\n  children,\n  disabled = false,\n  formName = 'form',\n  className = '',\n  variant = 'default',\n}: StandardSubmitButtonProps) {\n  const testId = FormQuality.generateTestId(formName, 'submit', 'button');\n\n  return (\n    <button\n      type=\"submit\"\n      disabled={disabled || isLoading}\n      data-testid={testId}\n      className={cn(\n        'inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md',\n        'transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2',\n        variant === 'default' && 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n        variant === 'destructive' && 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n        variant === 'outline' && 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500',\n        (disabled || isLoading) && 'opacity-50 cursor-not-allowed',\n        className\n      )}\n    >\n      {isLoading ? (\n        <>\n          <svg className=\"w-4 h-4 mr-2 animate-spin\" viewBox=\"0 0 24 24\">\n            <circle \n              className=\"opacity-25\" \n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              strokeWidth=\"4\"\n              fill=\"none\"\n            />\n            <path \n              className=\"opacity-75\" \n              fill=\"currentColor\" \n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            />\n          </svg>\n          {loadingText}\n        </>\n      ) : (\n        children\n      )}\n    </button>\n  );\n}\n\n/**\n * Form section wrapper for organizing complex forms\n */\ninterface FormSectionProps {\n  title?: string;\n  description?: string;\n  children: React.ReactNode;\n  className?: string;\n  collapsible?: boolean;\n  defaultOpen?: boolean;\n}\n\nexport function FormSection({\n  title,\n  description,\n  children,\n  className = '',\n  collapsible = false,\n  defaultOpen = true,\n}: FormSectionProps) {\n  const [isOpen, setIsOpen] = React.useState(defaultOpen);\n\n  const toggleSection = () => {\n    if (collapsible) {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {title && (\n        <div className=\"border-b border-gray-200 pb-2\">\n          <div \n            className={cn(\n              'flex items-center justify-between',\n              collapsible && 'cursor-pointer hover:text-blue-600'\n            )}\n            onClick={toggleSection}\n          >\n            <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n            {collapsible && (\n              <svg \n                className={cn('w-5 h-5 transition-transform', isOpen && 'rotate-180')}\n                fill=\"none\" \n                stroke=\"currentColor\" \n                viewBox=\"0 0 24 24\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            )}\n          </div>\n          {description && (\n            <p className=\"mt-1 text-sm text-gray-600\">{description}</p>\n          )}\n        </div>\n      )}\n      \n      {(!collapsible || isOpen) && (\n        <div className=\"space-y-4\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}"],"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","ignoreList":[]}