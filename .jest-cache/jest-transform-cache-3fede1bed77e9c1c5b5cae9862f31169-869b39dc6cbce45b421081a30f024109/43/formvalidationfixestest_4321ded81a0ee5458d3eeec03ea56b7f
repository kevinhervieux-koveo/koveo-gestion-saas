9150563223c14681ce6c26eb2ff48b91
"use strict";
/**
 * Form Validation Fixes Test Suite
 *
 * This test suite identifies and validates fixes for form submission issues
 * including UUID handling, empty field validation, and data transformation.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const operations_1 = require("../../shared/schemas/operations");
const validations_1 = require("../../client/src/lib/validations");
(0, globals_1.describe)('Form Validation Fixes', () => {
    (0, globals_1.describe)('Demand Schema Validation', () => {
        (0, globals_1.it)('should handle empty string UUIDs correctly', () => {
            const testData = {
                type: 'maintenance',
                description: 'Test description for validation',
                buildingId: '',
                residenceId: '',
                assignationBuildingId: '',
                assignationResidenceId: ''
            };
            // Transform empty strings to undefined for optional fields
            const transformedData = {
                ...testData,
                buildingId: testData.buildingId || undefined,
                residenceId: testData.residenceId || undefined,
                assignationBuildingId: testData.assignationBuildingId || undefined,
                assignationResidenceId: testData.assignationResidenceId || undefined
            };
            // Create a validation schema that omits submitterId (auto-populated)
            const validationSchema = operations_1.insertDemandSchema.omit({ submitterId: true });
            // This should not throw validation errors
            (0, globals_1.expect)(() => {
                validationSchema.parse(transformedData);
            }).not.toThrow();
        });
        (0, globals_1.it)('should validate required description field', () => {
            const testData = {
                type: 'maintenance',
                description: '', // Empty description should fail
                buildingId: 'valid-uuid-string'
            };
            const validationSchema = operations_1.insertDemandSchema.omit({ submitterId: true });
            (0, globals_1.expect)(() => {
                validationSchema.parse(testData);
            }).toThrow();
        });
        (0, globals_1.it)('should validate description length limits', () => {
            const testData = {
                type: 'maintenance',
                description: 'A'.repeat(2001), // Too long
                buildingId: 'valid-uuid-string'
            };
            const validationSchema = operations_1.insertDemandSchema.omit({ submitterId: true });
            (0, globals_1.expect)(() => {
                validationSchema.parse(testData);
            }).toThrow();
        });
        (0, globals_1.it)('should validate minimum description length', () => {
            const testData = {
                type: 'maintenance',
                description: 'Short', // Too short (less than 10 chars)
                buildingId: 'valid-uuid-string'
            };
            const validationSchema = operations_1.insertDemandSchema.omit({ submitterId: true });
            (0, globals_1.expect)(() => {
                validationSchema.parse(testData);
            }).toThrow();
        });
        (0, globals_1.it)('should validate valid UUIDs when provided', () => {
            const testData = {
                type: 'maintenance',
                description: 'Valid description with proper length',
                buildingId: 'not-a-valid-uuid',
                residenceId: 'also-not-valid'
            };
            const validationSchema = operations_1.insertDemandSchema.omit({ submitterId: true });
            (0, globals_1.expect)(() => {
                validationSchema.parse(testData);
            }).toThrow();
        });
    });
    (0, globals_1.describe)('Frontend Form Validation', () => {
        (0, globals_1.it)('should validate demand form with proper schema', () => {
            const demandSchema = validations_1.schemas.demand;
            const validData = {
                type: 'maintenance',
                description: 'This is a valid description with proper length',
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                residenceId: undefined,
                assignationBuildingId: undefined,
                assignationResidenceId: undefined
            };
            (0, globals_1.expect)(() => {
                demandSchema.parse(validData);
            }).not.toThrow();
        });
        (0, globals_1.it)('should handle optional fields correctly', () => {
            const demandSchema = validations_1.schemas.demand;
            const dataWithOptionalFields = {
                type: 'complaint',
                description: 'This complaint has all optional fields populated',
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                residenceId: '123e4567-e89b-12d3-a456-426614174001',
                assignationBuildingId: '123e4567-e89b-12d3-a456-426614174002',
                assignationResidenceId: '123e4567-e89b-12d3-a456-426614174003'
            };
            (0, globals_1.expect)(() => {
                demandSchema.parse(dataWithOptionalFields);
            }).not.toThrow();
        });
    });
    (0, globals_1.describe)('Form Data Transformation', () => {
        (0, globals_1.it)('should transform form data correctly for API submission', () => {
            const formData = {
                type: 'maintenance',
                description: 'Test maintenance request',
                buildingId: '',
                residenceId: '',
                assignationBuildingId: '',
                assignationResidenceId: ''
            };
            // This is the transformation logic from ResidentDemandsPage
            const transformedData = {
                ...formData,
                status: 'submitted',
                residenceId: formData.residenceId || undefined,
                assignationBuildingId: formData.assignationBuildingId || undefined,
                assignationResidenceId: formData.assignationResidenceId || undefined
            };
            (0, globals_1.expect)(transformedData.residenceId).toBeUndefined();
            (0, globals_1.expect)(transformedData.assignationBuildingId).toBeUndefined();
            (0, globals_1.expect)(transformedData.assignationResidenceId).toBeUndefined();
            (0, globals_1.expect)(transformedData.status).toBe('submitted');
        });
        (0, globals_1.it)('should preserve valid UUID values', () => {
            const formData = {
                type: 'information',
                description: 'Test information request',
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                residenceId: '123e4567-e89b-12d3-a456-426614174001',
                assignationBuildingId: '123e4567-e89b-12d3-a456-426614174002',
                assignationResidenceId: '123e4567-e89b-12d3-a456-426614174003'
            };
            const transformedData = {
                ...formData,
                status: 'submitted',
                residenceId: formData.residenceId || undefined,
                assignationBuildingId: formData.assignationBuildingId || undefined,
                assignationResidenceId: formData.assignationResidenceId || undefined
            };
            (0, globals_1.expect)(transformedData.residenceId).toBe('123e4567-e89b-12d3-a456-426614174001');
            (0, globals_1.expect)(transformedData.assignationBuildingId).toBe('123e4567-e89b-12d3-a456-426614174002');
            (0, globals_1.expect)(transformedData.assignationResidenceId).toBe('123e4567-e89b-12d3-a456-426614174003');
        });
    });
    (0, globals_1.describe)('Error Message Validation', () => {
        (0, globals_1.it)('should provide helpful error messages for validation failures', () => {
            const demandSchema = validations_1.schemas.demand;
            const invalidData = {
                type: 'maintenance',
                description: 'Short', // Too short
                buildingId: 'invalid-uuid'
            };
            try {
                demandSchema.parse(invalidData);
                fail('Should have thrown validation error');
            }
            catch (error) {
                (0, globals_1.expect)(error.errors).toBeDefined();
                (0, globals_1.expect)(error.errors.length).toBeGreaterThan(0);
                // Should have specific error messages
                const descriptionError = error.errors.find((e) => e.path.includes('description'));
                (0, globals_1.expect)(descriptionError).toBeDefined();
                (0, globals_1.expect)(descriptionError.message).toContain('at least');
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,