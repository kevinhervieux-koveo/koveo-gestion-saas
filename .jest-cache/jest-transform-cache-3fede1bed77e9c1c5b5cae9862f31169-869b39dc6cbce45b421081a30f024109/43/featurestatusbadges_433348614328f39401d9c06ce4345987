cda47aca0d4edd7adebb9e34933672d9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatusIcon = getStatusIcon;
exports.getStatusBadge = getStatusBadge;
exports.getPriorityBadge = getPriorityBadge;
exports.getActionableItemStatusIcon = getActionableItemStatusIcon;
exports.getActionableItemStatusBadge = getActionableItemStatusBadge;
const jsx_runtime_1 = require("react/jsx-runtime");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
/**
 * Gets status icon for a feature.
 * @param status
 */
/**
 * GetStatusIcon function.
 * @param status
 * @returns Function result.
 */
function getStatusIcon(status) {
    switch (status) {
        case 'completed':
            return (0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle2, { className: 'w-4 h-4 text-green-600' });
        case 'in-progress':
            return (0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'w-4 h-4 text-blue-600' });
        case 'planned':
            return (0, jsx_runtime_1.jsx)(lucide_react_1.Circle, { className: 'w-4 h-4 text-gray-400' });
        default:
            return null;
    }
}
/**
 * Gets status badge for a feature.
 * @param status
 */
/**
 * GetStatusBadge function.
 * @param status
 * @returns Function result.
 */
function getStatusBadge(status) {
    switch (status) {
        case 'completed':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-green-100 text-green-800 hover:bg-green-100', children: "Completed" });
        case 'in-progress':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-blue-100 text-blue-800 hover:bg-blue-100', children: "In Progress" });
        case 'planned':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-gray-100 text-gray-800 hover:bg-gray-100', children: "Planned" });
        default:
            return null;
    }
}
/**
 * Gets priority badge for a feature.
 * @param priority
 */
/**
 * GetPriorityBadge function.
 * @param priority
 * @returns Function result.
 */
function getPriorityBadge(priority) {
    if (!priority) {
        return null;
    }
    switch (priority) {
        case 'high':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-red-100 text-red-800 hover:bg-red-100 ml-2', children: "High Priority" });
        case 'medium':
            return ((0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-100 ml-2', children: "Medium" }));
        case 'low':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-gray-100 text-gray-600 hover:bg-gray-100 ml-2', children: "Low" });
        default:
            return null;
    }
}
/**
 * Gets status icon for actionable items.
 * @param status
 */
/**
 * GetActionableItemStatusIcon function.
 * @param status
 * @returns Function result.
 */
function getActionableItemStatusIcon(status) {
    switch (status) {
        case 'completed':
            return (0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle2, { className: 'w-3 h-3 text-green-600' });
        case 'in-progress':
            return (0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'w-3 h-3 text-blue-600' });
        case 'blocked':
            return (0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { className: 'w-3 h-3 text-red-600' });
        case 'pending':
        default:
            return (0, jsx_runtime_1.jsx)(lucide_react_1.Circle, { className: 'w-3 h-3 text-gray-400' });
    }
}
/**
 * Gets status badge for actionable items.
 * @param status
 */
/**
 * GetActionableItemStatusBadge function.
 * @param status
 * @returns Function result.
 */
function getActionableItemStatusBadge(status) {
    switch (status) {
        case 'completed':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-green-100 text-green-800 hover:bg-green-100 text-xs', children: "Done" });
        case 'in-progress':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-blue-100 text-blue-800 hover:bg-blue-100 text-xs', children: "Working" });
        case 'blocked':
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-red-100 text-red-800 hover:bg-red-100 text-xs', children: "Blocked" });
        case 'pending':
        default:
            return (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: 'bg-gray-100 text-gray-600 hover:bg-gray-100 text-xs', children: "Pending" });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2NvbXBvbmVudHMvcm9hZG1hcC9mZWF0dXJlLXN0YXR1cy1iYWRnZXMudHN4IiwibWFwcGluZ3MiOiI7O0FBWUEsc0NBV0M7QUFXRCx3Q0FXQztBQVdELDRDQWdCQztBQVdELGtFQVlDO0FBV0Qsb0VBWUM7O0FBdEhELGlEQUE4QztBQUM5QywrQ0FBMEU7QUFFMUU7OztHQUdHO0FBQ0g7Ozs7R0FJRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxNQUFjO0lBQzFDLFFBQVEsTUFBTSxFQUFFLENBQUM7UUFDZixLQUFLLFdBQVc7WUFDZCxPQUFPLHVCQUFDLDJCQUFZLElBQUMsU0FBUyxFQUFDLHdCQUF3QixHQUFHLENBQUM7UUFDN0QsS0FBSyxhQUFhO1lBQ2hCLE9BQU8sdUJBQUMsb0JBQUssSUFBQyxTQUFTLEVBQUMsdUJBQXVCLEdBQUcsQ0FBQztRQUNyRCxLQUFLLFNBQVM7WUFDWixPQUFPLHVCQUFDLHFCQUFNLElBQUMsU0FBUyxFQUFDLHVCQUF1QixHQUFHLENBQUM7UUFDdEQ7WUFDRSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0FBQ0gsQ0FBQztBQUVEOzs7R0FHRztBQUNIOzs7O0dBSUc7QUFDSCxTQUFnQixjQUFjLENBQUMsTUFBYztJQUMzQyxRQUFRLE1BQU0sRUFBRSxDQUFDO1FBQ2YsS0FBSyxXQUFXO1lBQ2QsT0FBTyx1QkFBQyxhQUFLLElBQUMsU0FBUyxFQUFDLGdEQUFnRCwwQkFBa0IsQ0FBQztRQUM3RixLQUFLLGFBQWE7WUFDaEIsT0FBTyx1QkFBQyxhQUFLLElBQUMsU0FBUyxFQUFDLDZDQUE2Qyw0QkFBb0IsQ0FBQztRQUM1RixLQUFLLFNBQVM7WUFDWixPQUFPLHVCQUFDLGFBQUssSUFBQyxTQUFTLEVBQUMsNkNBQTZDLHdCQUFnQixDQUFDO1FBQ3hGO1lBQ0UsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztBQUNILENBQUM7QUFFRDs7O0dBR0c7QUFDSDs7OztHQUlHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsUUFBaUI7SUFDaEQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsUUFBUSxRQUFRLEVBQUUsQ0FBQztRQUNqQixLQUFLLE1BQU07WUFDVCxPQUFPLHVCQUFDLGFBQUssSUFBQyxTQUFTLEVBQUMsK0NBQStDLDhCQUFzQixDQUFDO1FBQ2hHLEtBQUssUUFBUTtZQUNYLE9BQU8sQ0FDTCx1QkFBQyxhQUFLLElBQUMsU0FBUyxFQUFDLHdEQUF3RCx1QkFBZSxDQUN6RixDQUFDO1FBQ0osS0FBSyxLQUFLO1lBQ1IsT0FBTyx1QkFBQyxhQUFLLElBQUMsU0FBUyxFQUFDLGtEQUFrRCxvQkFBWSxDQUFDO1FBQ3pGO1lBQ0UsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztBQUNILENBQUM7QUFFRDs7O0dBR0c7QUFDSDs7OztHQUlHO0FBQ0gsU0FBZ0IsMkJBQTJCLENBQUMsTUFBYztJQUN4RCxRQUFRLE1BQU0sRUFBRSxDQUFDO1FBQ2YsS0FBSyxXQUFXO1lBQ2QsT0FBTyx1QkFBQywyQkFBWSxJQUFDLFNBQVMsRUFBQyx3QkFBd0IsR0FBRyxDQUFDO1FBQzdELEtBQUssYUFBYTtZQUNoQixPQUFPLHVCQUFDLG9CQUFLLElBQUMsU0FBUyxFQUFDLHVCQUF1QixHQUFHLENBQUM7UUFDckQsS0FBSyxTQUFTO1lBQ1osT0FBTyx1QkFBQyw0QkFBYSxJQUFDLFNBQVMsRUFBQyxzQkFBc0IsR0FBRyxDQUFDO1FBQzVELEtBQUssU0FBUyxDQUFDO1FBQ2Y7WUFDRSxPQUFPLHVCQUFDLHFCQUFNLElBQUMsU0FBUyxFQUFDLHVCQUF1QixHQUFHLENBQUM7SUFDeEQsQ0FBQztBQUNILENBQUM7QUFFRDs7O0dBR0c7QUFDSDs7OztHQUlHO0FBQ0gsU0FBZ0IsNEJBQTRCLENBQUMsTUFBYztJQUN6RCxRQUFRLE1BQU0sRUFBRSxDQUFDO1FBQ2YsS0FBSyxXQUFXO1lBQ2QsT0FBTyx1QkFBQyxhQUFLLElBQUMsU0FBUyxFQUFDLHdEQUF3RCxxQkFBYSxDQUFDO1FBQ2hHLEtBQUssYUFBYTtZQUNoQixPQUFPLHVCQUFDLGFBQUssSUFBQyxTQUFTLEVBQUMscURBQXFELHdCQUFnQixDQUFDO1FBQ2hHLEtBQUssU0FBUztZQUNaLE9BQU8sdUJBQUMsYUFBSyxJQUFDLFNBQVMsRUFBQyxrREFBa0Qsd0JBQWdCLENBQUM7UUFDN0YsS0FBSyxTQUFTLENBQUM7UUFDZjtZQUNFLE9BQU8sdUJBQUMsYUFBSyxJQUFDLFNBQVMsRUFBQyxxREFBcUQsd0JBQWdCLENBQUM7SUFDbEcsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2NvbXBvbmVudHMvcm9hZG1hcC9mZWF0dXJlLXN0YXR1cy1iYWRnZXMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhZGdlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2JhZGdlJztcbmltcG9ydCB7IENoZWNrQ2lyY2xlMiwgQ2xvY2ssIENpcmNsZSwgQWxlcnRUcmlhbmdsZSB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG5cbi8qKlxuICogR2V0cyBzdGF0dXMgaWNvbiBmb3IgYSBmZWF0dXJlLlxuICogQHBhcmFtIHN0YXR1c1xuICovXG4vKipcbiAqIEdldFN0YXR1c0ljb24gZnVuY3Rpb24uXG4gKiBAcGFyYW0gc3RhdHVzXG4gKiBAcmV0dXJucyBGdW5jdGlvbiByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0dXNJY29uKHN0YXR1czogc3RyaW5nKSB7XG4gIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgIHJldHVybiA8Q2hlY2tDaXJjbGUyIGNsYXNzTmFtZT0ndy00IGgtNCB0ZXh0LWdyZWVuLTYwMCcgLz47XG4gICAgY2FzZSAnaW4tcHJvZ3Jlc3MnOlxuICAgICAgcmV0dXJuIDxDbG9jayBjbGFzc05hbWU9J3ctNCBoLTQgdGV4dC1ibHVlLTYwMCcgLz47XG4gICAgY2FzZSAncGxhbm5lZCc6XG4gICAgICByZXR1cm4gPENpcmNsZSBjbGFzc05hbWU9J3ctNCBoLTQgdGV4dC1ncmF5LTQwMCcgLz47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyBzdGF0dXMgYmFkZ2UgZm9yIGEgZmVhdHVyZS5cbiAqIEBwYXJhbSBzdGF0dXNcbiAqL1xuLyoqXG4gKiBHZXRTdGF0dXNCYWRnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSBzdGF0dXNcbiAqIEByZXR1cm5zIEZ1bmN0aW9uIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXR1c0JhZGdlKHN0YXR1czogc3RyaW5nKSB7XG4gIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgIHJldHVybiA8QmFkZ2UgY2xhc3NOYW1lPSdiZy1ncmVlbi0xMDAgdGV4dC1ncmVlbi04MDAgaG92ZXI6YmctZ3JlZW4tMTAwJz5Db21wbGV0ZWQ8L0JhZGdlPjtcbiAgICBjYXNlICdpbi1wcm9ncmVzcyc6XG4gICAgICByZXR1cm4gPEJhZGdlIGNsYXNzTmFtZT0nYmctYmx1ZS0xMDAgdGV4dC1ibHVlLTgwMCBob3ZlcjpiZy1ibHVlLTEwMCc+SW4gUHJvZ3Jlc3M8L0JhZGdlPjtcbiAgICBjYXNlICdwbGFubmVkJzpcbiAgICAgIHJldHVybiA8QmFkZ2UgY2xhc3NOYW1lPSdiZy1ncmF5LTEwMCB0ZXh0LWdyYXktODAwIGhvdmVyOmJnLWdyYXktMTAwJz5QbGFubmVkPC9CYWRnZT47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyBwcmlvcml0eSBiYWRnZSBmb3IgYSBmZWF0dXJlLlxuICogQHBhcmFtIHByaW9yaXR5XG4gKi9cbi8qKlxuICogR2V0UHJpb3JpdHlCYWRnZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSBwcmlvcml0eVxuICogQHJldHVybnMgRnVuY3Rpb24gcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJpb3JpdHlCYWRnZShwcmlvcml0eT86IHN0cmluZykge1xuICBpZiAoIXByaW9yaXR5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3dpdGNoIChwcmlvcml0eSkge1xuICAgIGNhc2UgJ2hpZ2gnOlxuICAgICAgcmV0dXJuIDxCYWRnZSBjbGFzc05hbWU9J2JnLXJlZC0xMDAgdGV4dC1yZWQtODAwIGhvdmVyOmJnLXJlZC0xMDAgbWwtMic+SGlnaCBQcmlvcml0eTwvQmFkZ2U+O1xuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QmFkZ2UgY2xhc3NOYW1lPSdiZy15ZWxsb3ctMTAwIHRleHQteWVsbG93LTgwMCBob3ZlcjpiZy15ZWxsb3ctMTAwIG1sLTInPk1lZGl1bTwvQmFkZ2U+XG4gICAgICApO1xuICAgIGNhc2UgJ2xvdyc6XG4gICAgICByZXR1cm4gPEJhZGdlIGNsYXNzTmFtZT0nYmctZ3JheS0xMDAgdGV4dC1ncmF5LTYwMCBob3ZlcjpiZy1ncmF5LTEwMCBtbC0yJz5Mb3c8L0JhZGdlPjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHN0YXR1cyBpY29uIGZvciBhY3Rpb25hYmxlIGl0ZW1zLlxuICogQHBhcmFtIHN0YXR1c1xuICovXG4vKipcbiAqIEdldEFjdGlvbmFibGVJdGVtU3RhdHVzSWNvbiBmdW5jdGlvbi5cbiAqIEBwYXJhbSBzdGF0dXNcbiAqIEByZXR1cm5zIEZ1bmN0aW9uIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGlvbmFibGVJdGVtU3RhdHVzSWNvbihzdGF0dXM6IHN0cmluZykge1xuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICByZXR1cm4gPENoZWNrQ2lyY2xlMiBjbGFzc05hbWU9J3ctMyBoLTMgdGV4dC1ncmVlbi02MDAnIC8+O1xuICAgIGNhc2UgJ2luLXByb2dyZXNzJzpcbiAgICAgIHJldHVybiA8Q2xvY2sgY2xhc3NOYW1lPSd3LTMgaC0zIHRleHQtYmx1ZS02MDAnIC8+O1xuICAgIGNhc2UgJ2Jsb2NrZWQnOlxuICAgICAgcmV0dXJuIDxBbGVydFRyaWFuZ2xlIGNsYXNzTmFtZT0ndy0zIGgtMyB0ZXh0LXJlZC02MDAnIC8+O1xuICAgIGNhc2UgJ3BlbmRpbmcnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gPENpcmNsZSBjbGFzc05hbWU9J3ctMyBoLTMgdGV4dC1ncmF5LTQwMCcgLz47XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHN0YXR1cyBiYWRnZSBmb3IgYWN0aW9uYWJsZSBpdGVtcy5cbiAqIEBwYXJhbSBzdGF0dXNcbiAqL1xuLyoqXG4gKiBHZXRBY3Rpb25hYmxlSXRlbVN0YXR1c0JhZGdlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHN0YXR1c1xuICogQHJldHVybnMgRnVuY3Rpb24gcmVzdWx0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aW9uYWJsZUl0ZW1TdGF0dXNCYWRnZShzdGF0dXM6IHN0cmluZykge1xuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgJ2NvbXBsZXRlZCc6XG4gICAgICByZXR1cm4gPEJhZGdlIGNsYXNzTmFtZT0nYmctZ3JlZW4tMTAwIHRleHQtZ3JlZW4tODAwIGhvdmVyOmJnLWdyZWVuLTEwMCB0ZXh0LXhzJz5Eb25lPC9CYWRnZT47XG4gICAgY2FzZSAnaW4tcHJvZ3Jlc3MnOlxuICAgICAgcmV0dXJuIDxCYWRnZSBjbGFzc05hbWU9J2JnLWJsdWUtMTAwIHRleHQtYmx1ZS04MDAgaG92ZXI6YmctYmx1ZS0xMDAgdGV4dC14cyc+V29ya2luZzwvQmFkZ2U+O1xuICAgIGNhc2UgJ2Jsb2NrZWQnOlxuICAgICAgcmV0dXJuIDxCYWRnZSBjbGFzc05hbWU9J2JnLXJlZC0xMDAgdGV4dC1yZWQtODAwIGhvdmVyOmJnLXJlZC0xMDAgdGV4dC14cyc+QmxvY2tlZDwvQmFkZ2U+O1xuICAgIGNhc2UgJ3BlbmRpbmcnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gPEJhZGdlIGNsYXNzTmFtZT0nYmctZ3JheS0xMDAgdGV4dC1ncmF5LTYwMCBob3ZlcjpiZy1ncmF5LTEwMCB0ZXh0LXhzJz5QZW5kaW5nPC9CYWRnZT47XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==