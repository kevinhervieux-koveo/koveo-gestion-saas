60196d6501beeec69da0fba79828c059
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getLabelContent = getLabelContent;
exports.getLabels = getLabels;
exports.getRealLabels = getRealLabels;
var _helpers = require("./helpers");
const labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];
function getTextContent(node) {
    if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {
        return '';
    }
    if (node.nodeType === _helpers.TEXT_NODE)
        return node.textContent;
    return Array.from(node.childNodes).map(childNode => getTextContent(childNode)).join('');
}
function getLabelContent(element) {
    let textContent;
    if (element.tagName.toLowerCase() === 'label') {
        textContent = getTextContent(element);
    }
    else {
        textContent = element.value || element.textContent;
    }
    return textContent;
}
// Based on https://github.com/eps1lon/dom-accessibility-api/pull/352
function getRealLabels(element) {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types are not aware of older browsers that don't implement `labels`
    if (element.labels !== undefined) {
        return element.labels ?? [];
    }
    if (!isLabelable(element))
        return [];
    const labels = element.ownerDocument.querySelectorAll('label');
    return Array.from(labels).filter(label => label.control === element);
}
function isLabelable(element) {
    return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';
}
function getLabels(container, element, { selector = '*' } = {}) {
    const ariaLabelledBy = element.getAttribute('aria-labelledby');
    const labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];
    return labelsId.length ? labelsId.map(labelId => {
        const labellingElement = container.querySelector(`[id="${labelId}"]`);
        return labellingElement ? {
            content: getLabelContent(labellingElement),
            formControl: null
        } : {
            content: '',
            formControl: null
        };
    }) : Array.from(getRealLabels(element)).map(label => {
        const textToMatch = getLabelContent(label);
        const formControlSelector = 'button, input, meter, output, progress, select, textarea';
        const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(formControlElement => formControlElement.matches(selector))[0];
        return {
            content: textToMatch,
            formControl: labelledFormControl
        };
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9sYWJlbC1oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQzFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQzlCLE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbkcsU0FBUyxjQUFjLENBQUMsSUFBSTtJQUMxQixJQUFJLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM1RCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLFNBQVM7UUFBRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDbEUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUYsQ0FBQztBQUNELFNBQVMsZUFBZSxDQUFDLE9BQU87SUFDOUIsSUFBSSxXQUFXLENBQUM7SUFDaEIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFB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ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvbGFiZWwtaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0TGFiZWxDb250ZW50ID0gZ2V0TGFiZWxDb250ZW50O1xuZXhwb3J0cy5nZXRMYWJlbHMgPSBnZXRMYWJlbHM7XG5leHBvcnRzLmdldFJlYWxMYWJlbHMgPSBnZXRSZWFsTGFiZWxzO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbmNvbnN0IGxhYmVsbGVkTm9kZU5hbWVzID0gWydidXR0b24nLCAnbWV0ZXInLCAnb3V0cHV0JywgJ3Byb2dyZXNzJywgJ3NlbGVjdCcsICd0ZXh0YXJlYScsICdpbnB1dCddO1xuZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnQobm9kZSkge1xuICBpZiAobGFiZWxsZWROb2RlTmFtZXMuaW5jbHVkZXMobm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gX2hlbHBlcnMuVEVYVF9OT0RFKSByZXR1cm4gbm9kZS50ZXh0Q29udGVudDtcbiAgcmV0dXJuIEFycmF5LmZyb20obm9kZS5jaGlsZE5vZGVzKS5tYXAoY2hpbGROb2RlID0+IGdldFRleHRDb250ZW50KGNoaWxkTm9kZSkpLmpvaW4oJycpO1xufVxuZnVuY3Rpb24gZ2V0TGFiZWxDb250ZW50KGVsZW1lbnQpIHtcbiAgbGV0IHRleHRDb250ZW50O1xuICBpZiAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdsYWJlbCcpIHtcbiAgICB0ZXh0Q29udGVudCA9IGdldFRleHRDb250ZW50KGVsZW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIHRleHRDb250ZW50ID0gZWxlbWVudC52YWx1ZSB8fCBlbGVtZW50LnRleHRDb250ZW50O1xuICB9XG4gIHJldHVybiB0ZXh0Q29udGVudDtcbn1cblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2VwczFsb24vZG9tLWFjY2Vzc2liaWxpdHktYXBpL3B1bGwvMzUyXG5mdW5jdGlvbiBnZXRSZWFsTGFiZWxzKGVsZW1lbnQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24gLS0gdHlwZXMgYXJlIG5vdCBhd2FyZSBvZiBvbGRlciBicm93c2VycyB0aGF0IGRvbid0IGltcGxlbWVudCBgbGFiZWxzYFxuICBpZiAoZWxlbWVudC5sYWJlbHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlbGVtZW50LmxhYmVscyA/PyBbXTtcbiAgfVxuICBpZiAoIWlzTGFiZWxhYmxlKGVsZW1lbnQpKSByZXR1cm4gW107XG4gIGNvbnN0IGxhYmVscyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsYWJlbCcpO1xuICByZXR1cm4gQXJyYXkuZnJvbShsYWJlbHMpLmZpbHRlcihsYWJlbCA9PiBsYWJlbC5jb250cm9sID09PSBlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGlzTGFiZWxhYmxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIC9CVVRUT058TUVURVJ8T1VUUFVUfFBST0dSRVNTfFNFTEVDVHxURVhUQVJFQS8udGVzdChlbGVtZW50LnRhZ05hbWUpIHx8IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpICE9PSAnaGlkZGVuJztcbn1cbmZ1bmN0aW9uIGdldExhYmVscyhjb250YWluZXIsIGVsZW1lbnQsIHtcbiAgc2VsZWN0b3IgPSAnKidcbn0gPSB7fSkge1xuICBjb25zdCBhcmlhTGFiZWxsZWRCeSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgY29uc3QgbGFiZWxzSWQgPSBhcmlhTGFiZWxsZWRCeSA/IGFyaWFMYWJlbGxlZEJ5LnNwbGl0KCcgJykgOiBbXTtcbiAgcmV0dXJuIGxhYmVsc0lkLmxlbmd0aCA/IGxhYmVsc0lkLm1hcChsYWJlbElkID0+IHtcbiAgICBjb25zdCBsYWJlbGxpbmdFbGVtZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7bGFiZWxJZH1cIl1gKTtcbiAgICByZXR1cm4gbGFiZWxsaW5nRWxlbWVudCA/IHtcbiAgICAgIGNvbnRlbnQ6IGdldExhYmVsQ29udGVudChsYWJlbGxpbmdFbGVtZW50KSxcbiAgICAgIGZvcm1Db250cm9sOiBudWxsXG4gICAgfSA6IHtcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgZm9ybUNvbnRyb2w6IG51bGxcbiAgICB9O1xuICB9KSA6IEFycmF5LmZyb20oZ2V0UmVhbExhYmVscyhlbGVtZW50KSkubWFwKGxhYmVsID0+IHtcbiAgICBjb25zdCB0ZXh0VG9NYXRjaCA9IGdldExhYmVsQ29udGVudChsYWJlbCk7XG4gICAgY29uc3QgZm9ybUNvbnRyb2xTZWxlY3RvciA9ICdidXR0b24sIGlucHV0LCBtZXRlciwgb3V0cHV0LCBwcm9ncmVzcywgc2VsZWN0LCB0ZXh0YXJlYSc7XG4gICAgY29uc3QgbGFiZWxsZWRGb3JtQ29udHJvbCA9IEFycmF5LmZyb20obGFiZWwucXVlcnlTZWxlY3RvckFsbChmb3JtQ29udHJvbFNlbGVjdG9yKSkuZmlsdGVyKGZvcm1Db250cm9sRWxlbWVudCA9PiBmb3JtQ29udHJvbEVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcikpWzBdO1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiB0ZXh0VG9NYXRjaCxcbiAgICAgIGZvcm1Db250cm9sOiBsYWJlbGxlZEZvcm1Db250cm9sXG4gICAgfTtcbiAgfSk7XG59Il0sInZlcnNpb24iOjN9