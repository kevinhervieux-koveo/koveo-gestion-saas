dc4ae6427ec75d450076c70708ef39aa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getSuggestedQuery = getSuggestedQuery;
var _domAccessibilityApi = require("dom-accessibility-api");
var _matches = require("./matches");
var _getNodeText = require("./get-node-text");
var _config = require("./config");
var _roleHelpers = require("./role-helpers");
var _labelHelpers = require("./label-helpers");
const normalize = (0, _matches.getDefaultNormalizer)();
function escapeRegExp(string) {
    return string.replace(/[.*+\-?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}
function getRegExpMatcher(string) {
    return new RegExp(escapeRegExp(string.toLowerCase()), 'i');
}
function makeSuggestion(queryName, element, content, { variant, name }) {
    let warning = '';
    const queryOptions = {};
    const queryArgs = [['Role', 'TestId'].includes(queryName) ? content : getRegExpMatcher(content)];
    if (name) {
        queryOptions.name = getRegExpMatcher(name);
    }
    if (queryName === 'Role' && (0, _roleHelpers.isInaccessible)(element)) {
        queryOptions.hidden = true;
        warning = `Element is inaccessible. This means that the element and all its children are invisible to screen readers.
    If you are using the aria-hidden prop, make sure this is the right choice for your case.
    `;
    }
    if (Object.keys(queryOptions).length > 0) {
        queryArgs.push(queryOptions);
    }
    const queryMethod = `${variant}By${queryName}`;
    return {
        queryName,
        queryMethod,
        queryArgs,
        variant,
        warning,
        toString() {
            if (warning) {
                console.warn(warning);
            }
            let [text, options] = queryArgs;
            text = typeof text === 'string' ? `'${text}'` : text;
            options = options ? `, { ${Object.entries(options).map(([k, v]) => `${k}: ${v}`).join(', ')} }` : '';
            return `${queryMethod}(${text}${options})`;
        }
    };
}
function canSuggest(currentMethod, requestedMethod, data) {
    return data && (!requestedMethod || requestedMethod.toLowerCase() === currentMethod.toLowerCase());
}
function getSuggestedQuery(element, variant = 'get', method) {
    // don't create suggestions for script and style elements
    if (element.matches((0, _config.getConfig)().defaultIgnore)) {
        return undefined;
    }
    //We prefer to suggest something else if the role is generic
    const role = element.getAttribute('role') ?? (0, _roleHelpers.getImplicitAriaRoles)(element)?.[0];
    if (role !== 'generic' && canSuggest('Role', method, role)) {
        return makeSuggestion('Role', element, role, {
            variant,
            name: (0, _domAccessibilityApi.computeAccessibleName)(element, {
                computedStyleSupportsPseudoElements: (0, _config.getConfig)().computedStyleSupportsPseudoElements
            })
        });
    }
    const labelText = (0, _labelHelpers.getLabels)(document, element).map(label => label.content).join(' ');
    if (canSuggest('LabelText', method, labelText)) {
        return makeSuggestion('LabelText', element, labelText, {
            variant
        });
    }
    const placeholderText = element.getAttribute('placeholder');
    if (canSuggest('PlaceholderText', method, placeholderText)) {
        return makeSuggestion('PlaceholderText', element, placeholderText, {
            variant
        });
    }
    const textContent = normalize((0, _getNodeText.getNodeText)(element));
    if (canSuggest('Text', method, textContent)) {
        return makeSuggestion('Text', element, textContent, {
            variant
        });
    }
    if (canSuggest('DisplayValue', method, element.value)) {
        return makeSuggestion('DisplayValue', element, normalize(element.value), {
            variant
        });
    }
    const alt = element.getAttribute('alt');
    if (canSuggest('AltText', method, alt)) {
        return makeSuggestion('AltText', element, alt, {
            variant
        });
    }
    const title = element.getAttribute('title');
    if (canSuggest('Title', method, title)) {
        return makeSuggestion('Title', element, title, {
            variant
        });
    }
    const testId = element.getAttribute((0, _config.getConfig)().testIdAttribute);
    if (canSuggest('TestId', method, testId)) {
        return makeSuggestion('TestId', element, testId, {
            variant
        });
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9zdWdnZXN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7SUFDM0MsS0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDLENBQUM7QUFDSCxPQUFPLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFDOUMsSUFBSSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUM1RCxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDcEMsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDOUMsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzdDLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQy9DLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUM7QUFDdkQsU0FBUyxZQUFZLENBQUMsTUFBTTtJQUMxQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxvQ0FBb0M7QUFDOUYsQ0FBQztBQUNELFNBQVMsZ0JBQWdCLENBQUMsTUFBTTtJQUM5QixPQUFPLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBQ0QsU0FBUyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFDbkQsT0FBTyxFQUNQLElBQUksRUFDTDtJQUNDLElBQUks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QUM7SUFDTCxDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L3N1Z2dlc3Rpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRTdWdnZXN0ZWRRdWVyeSA9IGdldFN1Z2dlc3RlZFF1ZXJ5O1xudmFyIF9kb21BY2Nlc3NpYmlsaXR5QXBpID0gcmVxdWlyZShcImRvbS1hY2Nlc3NpYmlsaXR5LWFwaVwiKTtcbnZhciBfbWF0Y2hlcyA9IHJlcXVpcmUoXCIuL21hdGNoZXNcIik7XG52YXIgX2dldE5vZGVUZXh0ID0gcmVxdWlyZShcIi4vZ2V0LW5vZGUtdGV4dFwiKTtcbnZhciBfY29uZmlnID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xudmFyIF9yb2xlSGVscGVycyA9IHJlcXVpcmUoXCIuL3JvbGUtaGVscGVyc1wiKTtcbnZhciBfbGFiZWxIZWxwZXJzID0gcmVxdWlyZShcIi4vbGFiZWwtaGVscGVyc1wiKTtcbmNvbnN0IG5vcm1hbGl6ZSA9ICgwLCBfbWF0Y2hlcy5nZXREZWZhdWx0Tm9ybWFsaXplcikoKTtcbmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorXFwtP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpOyAvLyAkJiBtZWFucyB0aGUgd2hvbGUgbWF0Y2hlZCBzdHJpbmdcbn1cbmZ1bmN0aW9uIGdldFJlZ0V4cE1hdGNoZXIoc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4cChzdHJpbmcudG9Mb3dlckNhc2UoKSksICdpJyk7XG59XG5mdW5jdGlvbiBtYWtlU3VnZ2VzdGlvbihxdWVyeU5hbWUsIGVsZW1lbnQsIGNvbnRlbnQsIHtcbiAgdmFyaWFudCxcbiAgbmFtZVxufSkge1xuICBsZXQgd2FybmluZyA9ICcnO1xuICBjb25zdCBxdWVyeU9wdGlvbnMgPSB7fTtcbiAgY29uc3QgcXVlcnlBcmdzID0gW1snUm9sZScsICdUZXN0SWQnXS5pbmNsdWRlcyhxdWVyeU5hbWUpID8gY29udGVudCA6IGdldFJlZ0V4cE1hdGNoZXIoY29udGVudCldO1xuICBpZiAobmFtZSkge1xuICAgIHF1ZXJ5T3B0aW9ucy5uYW1lID0gZ2V0UmVnRXhwTWF0Y2hlcihuYW1lKTtcbiAgfVxuICBpZiAocXVlcnlOYW1lID09PSAnUm9sZScgJiYgKDAsIF9yb2xlSGVscGVycy5pc0luYWNjZXNzaWJsZSkoZWxlbWVudCkpIHtcbiAgICBxdWVyeU9wdGlvbnMuaGlkZGVuID0gdHJ1ZTtcbiAgICB3YXJuaW5nID0gYEVsZW1lbnQgaXMgaW5hY2Nlc3NpYmxlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGVsZW1lbnQgYW5kIGFsbCBpdHMgY2hpbGRyZW4gYXJlIGludmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycy5cbiAgICBJZiB5b3UgYXJlIHVzaW5nIHRoZSBhcmlhLWhpZGRlbiBwcm9wLCBtYWtlIHN1cmUgdGhpcyBpcyB0aGUgcmlnaHQgY2hvaWNlIGZvciB5b3VyIGNhc2UuXG4gICAgYDtcbiAgfVxuICBpZiAoT2JqZWN0LmtleXMocXVlcnlPcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgcXVlcnlBcmdzLnB1c2gocXVlcnlPcHRpb25zKTtcbiAgfVxuICBjb25zdCBxdWVyeU1ldGhvZCA9IGAke3ZhcmlhbnR9Qnkke3F1ZXJ5TmFtZX1gO1xuICByZXR1cm4ge1xuICAgIHF1ZXJ5TmFtZSxcbiAgICBxdWVyeU1ldGhvZCxcbiAgICBxdWVyeUFyZ3MsXG4gICAgdmFyaWFudCxcbiAgICB3YXJuaW5nLFxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgaWYgKHdhcm5pbmcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgICAgfVxuICAgICAgbGV0IFt0ZXh0LCBvcHRpb25zXSA9IHF1ZXJ5QXJncztcbiAgICAgIHRleHQgPSB0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycgPyBgJyR7dGV4dH0nYCA6IHRleHQ7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IGAsIHsgJHtPYmplY3QuZW50cmllcyhvcHRpb25zKS5tYXAoKFtrLCB2XSkgPT4gYCR7a306ICR7dn1gKS5qb2luKCcsICcpfSB9YCA6ICcnO1xuICAgICAgcmV0dXJuIGAke3F1ZXJ5TWV0aG9kfSgke3RleHR9JHtvcHRpb25zfSlgO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNhblN1Z2dlc3QoY3VycmVudE1ldGhvZCwgcmVxdWVzdGVkTWV0aG9kLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhICYmICghcmVxdWVzdGVkTWV0aG9kIHx8IHJlcXVlc3RlZE1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBjdXJyZW50TWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkUXVlcnkoZWxlbWVudCwgdmFyaWFudCA9ICdnZXQnLCBtZXRob2QpIHtcbiAgLy8gZG9uJ3QgY3JlYXRlIHN1Z2dlc3Rpb25zIGZvciBzY3JpcHQgYW5kIHN0eWxlIGVsZW1lbnRzXG4gIGlmIChlbGVtZW50Lm1hdGNoZXMoKDAsIF9jb25maWcuZ2V0Q29uZmlnKSgpLmRlZmF1bHRJZ25vcmUpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vV2UgcHJlZmVyIHRvIHN1Z2dlc3Qgc29tZXRoaW5nIGVsc2UgaWYgdGhlIHJvbGUgaXMgZ2VuZXJpY1xuICBjb25zdCByb2xlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA/PyAoMCwgX3JvbGVIZWxwZXJzLmdldEltcGxpY2l0QXJpYVJvbGVzKShlbGVtZW50KT8uWzBdO1xuICBpZiAocm9sZSAhPT0gJ2dlbmVyaWMnICYmIGNhblN1Z2dlc3QoJ1JvbGUnLCBtZXRob2QsIHJvbGUpKSB7XG4gICAgcmV0dXJuIG1ha2VTdWdnZXN0aW9uKCdSb2xlJywgZWxlbWVudCwgcm9sZSwge1xuICAgICAgdmFyaWFudCxcbiAgICAgIG5hbWU6ICgwLCBfZG9tQWNjZXNzaWJpbGl0eUFwaS5jb21wdXRlQWNjZXNzaWJsZU5hbWUpKGVsZW1lbnQsIHtcbiAgICAgICAgY29tcHV0ZWRTdHlsZVN1cHBvcnRzUHNldWRvRWxlbWVudHM6ICgwLCBfY29uZmlnLmdldENvbmZpZykoKS5jb21wdXRlZFN0eWxlU3VwcG9ydHNQc2V1ZG9FbGVtZW50c1xuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuICBjb25zdCBsYWJlbFRleHQgPSAoMCwgX2xhYmVsSGVscGVycy5nZXRMYWJlbHMpKGRvY3VtZW50LCBlbGVtZW50KS5tYXAobGFiZWwgPT4gbGFiZWwuY29udGVudCkuam9pbignICcpO1xuICBpZiAoY2FuU3VnZ2VzdCgnTGFiZWxUZXh0JywgbWV0aG9kLCBsYWJlbFRleHQpKSB7XG4gICAgcmV0dXJuIG1ha2VTdWdnZXN0aW9uKCdMYWJlbFRleHQnLCBlbGVtZW50LCBsYWJlbFRleHQsIHtcbiAgICAgIHZhcmlhbnRcbiAgICB9KTtcbiAgfVxuICBjb25zdCBwbGFjZWhvbGRlclRleHQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgncGxhY2Vob2xkZXInKTtcbiAgaWYgKGNhblN1Z2dlc3QoJ1BsYWNlaG9sZGVyVGV4dCcsIG1ldGhvZCwgcGxhY2Vob2xkZXJUZXh0KSkge1xuICAgIHJldHVybiBtYWtlU3VnZ2VzdGlvbignUGxhY2Vob2xkZXJUZXh0JywgZWxlbWVudCwgcGxhY2Vob2xkZXJUZXh0LCB7XG4gICAgICB2YXJpYW50XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgdGV4dENvbnRlbnQgPSBub3JtYWxpemUoKDAsIF9nZXROb2RlVGV4dC5nZXROb2RlVGV4dCkoZWxlbWVudCkpO1xuICBpZiAoY2FuU3VnZ2VzdCgnVGV4dCcsIG1ldGhvZCwgdGV4dENvbnRlbnQpKSB7XG4gICAgcmV0dXJuIG1ha2VTdWdnZXN0aW9uKCdUZXh0JywgZWxlbWVudCwgdGV4dENvbnRlbnQsIHtcbiAgICAgIHZhcmlhbnRcbiAgICB9KTtcbiAgfVxuICBpZiAoY2FuU3VnZ2VzdCgnRGlzcGxheVZhbHVlJywgbWV0aG9kLCBlbGVtZW50LnZhbHVlKSkge1xuICAgIHJldHVybiBtYWtlU3VnZ2VzdGlvbignRGlzcGxheVZhbHVlJywgZWxlbWVudCwgbm9ybWFsaXplKGVsZW1lbnQudmFsdWUpLCB7XG4gICAgICB2YXJpYW50XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgYWx0ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FsdCcpO1xuICBpZiAoY2FuU3VnZ2VzdCgnQWx0VGV4dCcsIG1ldGhvZCwgYWx0KSkge1xuICAgIHJldHVybiBtYWtlU3VnZ2VzdGlvbignQWx0VGV4dCcsIGVsZW1lbnQsIGFsdCwge1xuICAgICAgdmFyaWFudFxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHRpdGxlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gIGlmIChjYW5TdWdnZXN0KCdUaXRsZScsIG1ldGhvZCwgdGl0bGUpKSB7XG4gICAgcmV0dXJuIG1ha2VTdWdnZXN0aW9uKCdUaXRsZScsIGVsZW1lbnQsIHRpdGxlLCB7XG4gICAgICB2YXJpYW50XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgdGVzdElkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoKDAsIF9jb25maWcuZ2V0Q29uZmlnKSgpLnRlc3RJZEF0dHJpYnV0ZSk7XG4gIGlmIChjYW5TdWdnZXN0KCdUZXN0SWQnLCBtZXRob2QsIHRlc3RJZCkpIHtcbiAgICByZXR1cm4gbWFrZVN1Z2dlc3Rpb24oJ1Rlc3RJZCcsIGVsZW1lbnQsIHRlc3RJZCwge1xuICAgICAgdmFyaWFudFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59Il0sInZlcnNpb24iOjN9