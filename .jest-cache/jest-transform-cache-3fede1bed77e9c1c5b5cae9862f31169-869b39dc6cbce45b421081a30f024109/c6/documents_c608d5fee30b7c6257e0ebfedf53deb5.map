{"file":"/home/runner/workspace/shared/schemas/documents.ts","mappings":";;;AAAA,6CAAkC;AAClC,iDAAiF;AAEjF,6BAAwB;AACxB,yCAAmD;AAGnD,0BAA0B;AAC1B;;;GAGG;AACU,QAAA,SAAS,GAAG,IAAA,iBAAO,EAAC,WAAW,EAAE;IAC5C,EAAE,EAAE,IAAA,iBAAO,EAAC,IAAI,CAAC;SACd,UAAU,EAAE;SACZ,OAAO,CAAC,IAAA,iBAAG,EAAA,mBAAmB,CAAC;IAClC,IAAI,EAAE,IAAA,cAAI,EAAC,MAAM,CAAC,CAAC,OAAO,EAAE;IAC5B,WAAW,EAAE,IAAA,cAAI,EAAC,aAAa,CAAC;IAChC,YAAY,EAAE,IAAA,cAAI,EAAC,eAAe,CAAC,CAAC,OAAO,EAAE;IAC7C,QAAQ,EAAE,IAAA,cAAI,EAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE;IAC9C,kBAAkB,EAAE,IAAA,iBAAO,EAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE;IAC7E,WAAW,EAAE,IAAA,iBAAO,EAAC,cAAc,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,qBAAU,CAAC,EAAE,CAAC;IACpE,UAAU,EAAE,IAAA,iBAAO,EAAC,aAAa,CAAC,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,oBAAS,CAAC,EAAE,CAAC;IACjE,YAAY,EAAE,IAAA,iBAAO,EAAC,gBAAgB,CAAC,CAAC,OAAO,EAAE;IACjD,SAAS,EAAE,IAAA,mBAAS,EAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE;IACzD,SAAS,EAAE,IAAA,mBAAS,EAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE;CAC1D,CAAC,CAAC;AAEH,0BAA0B;AACb,QAAA,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3C,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,2BAA2B,CAAC;IACpD,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAClC,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,2BAA2B,CAAC;IAC5D,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;IACpD,kBAAkB,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;IAC9C,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACzC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACxC,YAAY,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,iCAAiC,CAAC;CAC1E,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/shared/schemas/documents.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport { pgTable, text, timestamp, boolean, varchar } from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { buildings, residences } from './property';\n\n\n// Unified documents table\n/**\n * Unified documents table for all document types across the system.\n * Stores documents that can be associated with either residences, buildings, or neither.\n */\nexport const documents = pgTable('documents', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  name: text('name').notNull(),\n  description: text('description'),\n  documentType: text('document_type').notNull(),\n  filePath: text('file_path').notNull().unique(),\n  isVisibleToTenants: boolean('is_visible_to_tenants').default(false).notNull(),\n  residenceId: varchar('residence_id').references(() => residences.id),\n  buildingId: varchar('building_id').references(() => buildings.id),\n  uploadedById: varchar('uploaded_by_id').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Unified document schema\nexport const insertDocumentSchema = z.object({\n  name: z.string().min(1, 'Document name is required'),\n  description: z.string().optional(),\n  documentType: z.string().min(1, 'Document type is required'),\n  filePath: z.string().min(1, 'File path is required'),\n  isVisibleToTenants: z.boolean().default(false),\n  residenceId: z.string().uuid().optional(),\n  buildingId: z.string().uuid().optional(),\n  uploadedById: z.string().uuid().min(1, 'Uploaded by user ID is required'),\n});\n\n/**\n * Insert type for unified documents\n */\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\n\n/**\n * Select type for unified documents\n */\nexport type Document = typeof documents.$inferSelect;\n"],"version":3}