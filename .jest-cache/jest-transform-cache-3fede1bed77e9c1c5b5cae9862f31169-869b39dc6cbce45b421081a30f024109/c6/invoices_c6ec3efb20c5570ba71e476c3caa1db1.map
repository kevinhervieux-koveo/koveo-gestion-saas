{"version":3,"names":["cov_jom25c7op","actualCoverage","s","exports","convertAiResponseToFormData","drizzle_orm_1","require","pg_core_1","drizzle_zod_1","zod_1","core_1","property_1","documents_1","invoicePaymentTypeEnum","pgEnum","invoiceFrequencyEnum","invoices","pgTable","id","varchar","primaryKey","default","sql","vendorName","text","notNull","invoiceNumber","totalAmount","decimal","precision","scale","dueDate","date","paymentType","frequency","startDate","customPaymentDates","array","documentId","references","f","documents","isAiExtracted","boolean","aiExtractionData","jsonb","extractionConfidence","buildingId","buildings","residenceId","residences","createdBy","users","createdAt","timestamp","defaultNow","updatedAt","insertInvoiceSchema","createInsertSchema","z","string","min","max","coerce","number","positive","enum","optional","refine","dates","b","length","every","Date","isNaN","getTime","uuid","omit","baseInvoiceInsertSchema","invoiceFormSchema","object","title","description","amount","category","superRefine","data","ctx","addIssue","code","ZodIssueCode","custom","message","path","includes","today","setHours","sortedDates","sort","a","JSON","stringify","uniqueDates","Set","map","d","toISOString","size","aiExtractionResponseSchema","nullable","aiResponse","undefined"],"sources":["/home/runner/workspace/shared/schemas/invoices.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  decimal,\n  date,\n  jsonb,\n  boolean,\n  pgEnum,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { users } from './core';\nimport { buildings, residences } from './property';\nimport { documents } from './documents';\n\n// Invoice-specific enums following exact requirements\nexport const invoicePaymentTypeEnum = pgEnum('invoice_payment_type', [\n  'one-time',\n  'recurring'\n]);\n\nexport const invoiceFrequencyEnum = pgEnum('invoice_frequency', [\n  'monthly',\n  'quarterly', \n  'annually',\n  'custom'\n]);\n\n/**\n * Invoices table for AI-powered invoice management.\n * Integrates with document management system and supports recurring payments\n * with standard frequencies (monthly, quarterly, annually) and custom scheduling.\n */\nexport const invoices = pgTable('invoices', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  \n  // Core invoice fields as specified in requirements\n  vendorName: text('vendor_name').notNull(),\n  invoiceNumber: text('invoice_number').notNull(),\n  totalAmount: decimal('total_amount', { precision: 12, scale: 2 }).notNull(),\n  dueDate: date('due_date').notNull(),\n  \n  // Payment structure fields\n  paymentType: invoicePaymentTypeEnum('payment_type').notNull(),\n  \n  // Recurring payment fields (conditional based on paymentType)\n  frequency: invoiceFrequencyEnum('frequency'), // Only for recurring payments\n  startDate: date('start_date'), // For standard frequencies (not custom)\n  customPaymentDates: date('custom_payment_dates').array(), // Only for custom frequency\n  \n  // Document integration - links to uploaded invoice file (optional for testing)\n  documentId: varchar('document_id')\n    .references(() => documents.id),\n  \n  // AI extraction tracking\n  isAiExtracted: boolean('is_ai_extracted').default(false).notNull(),\n  aiExtractionData: jsonb('ai_extraction_data'), // Raw AI response for debugging\n  extractionConfidence: decimal('extraction_confidence', { precision: 5, scale: 4 }), // AI confidence score\n  \n  // Building/residence association\n  buildingId: varchar('building_id').references(() => buildings.id),\n  residenceId: varchar('residence_id').references(() => residences.id),\n  \n  // Audit fields\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Zod validation schemas with conditional logic for recurring payments\nexport const insertInvoiceSchema = createInsertSchema(invoices, {\n  // Core field validations\n  vendorName: z.string().min(1, 'Vendor name is required').max(255, 'Vendor name too long'),\n  invoiceNumber: z.string().min(1, 'Invoice number is required').max(100, 'Invoice number too long'),\n  totalAmount: z.coerce.number().positive('Total amount must be positive'),\n  dueDate: z.coerce.date(),\n  \n  // Payment type validation\n  paymentType: z.enum(['one-time', 'recurring']),\n  \n  // Frequency validation (only for recurring)\n  frequency: z.enum(['monthly', 'quarterly', 'annually', 'custom']).optional(),\n  \n  // Start date validation (for standard frequencies)\n  startDate: z.coerce.date().optional(),\n  \n  // Custom dates validation (only for custom frequency)\n  customPaymentDates: z.array(z.coerce.date()).optional().refine(\n    (dates) => !dates || dates.length === 0 || dates.every(date => date instanceof Date && !isNaN(date.getTime())),\n    \"All custom payment dates must be valid dates\"\n  ),\n  \n  // Document reference (optional for testing)\n  documentId: z.string().uuid('Invalid document ID').optional(),\n  \n  // Optional associations\n  buildingId: z.string().uuid().optional(),\n  residenceId: z.string().uuid().optional(),\n  \n  // AI fields\n  isAiExtracted: z.boolean().default(false),\n  extractionConfidence: z.coerce.number().min(0).max(1).optional(),\n}).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\n// Base insert schema without refinements\nexport const baseInvoiceInsertSchema = insertInvoiceSchema;\n\n// Enhanced validation with conditional logic for recurring payments\nexport const invoiceFormSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  amount: z.string().min(1, 'Amount is required'),\n  dueDate: z.coerce.date(),\n  category: z.string().min(1, 'Category is required'),\n  paymentType: z.enum(['one-time', 'recurring']),\n  frequency: z.enum(['monthly', 'quarterly', 'annually', 'custom']).optional(),\n  startDate: z.coerce.date().optional(),\n  customPaymentDates: z.array(z.coerce.date()).optional(),\n  documentId: z.string().uuid('Invalid document ID').optional(),\n  buildingId: z.string().uuid().optional(),\n  residenceId: z.string().uuid().optional(),\n  isAiExtracted: z.boolean().default(false),\n  extractionConfidence: z.coerce.number().min(0).max(1).optional(),\n}).superRefine((data, ctx) => {\n  // Recurring payment validation\n  if (data.paymentType === 'recurring') {\n    if (!data.frequency) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'Frequency is required for recurring payments',\n        path: ['frequency'],\n      });\n    }\n    \n    // Standard frequency validation (monthly, quarterly, annually)\n    if (data.frequency && ['monthly', 'quarterly', 'annually'].includes(data.frequency)) {\n      if (!data.startDate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Start date is required for standard recurring frequencies',\n          path: ['startDate'],\n        });\n      }\n      \n      // Ensure custom dates are not set for standard frequencies\n      if (data.customPaymentDates && data.customPaymentDates.length > 0) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Custom payment dates should not be set for standard frequencies',\n          path: ['customPaymentDates'],\n        });\n      }\n    }\n    \n    // Custom frequency validation\n    if (data.frequency === 'custom') {\n      if (!data.customPaymentDates || data.customPaymentDates.length === 0) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'At least one custom payment date is required for custom frequency',\n          path: ['customPaymentDates'],\n        });\n      }\n      \n      // Ensure start date is not set for custom frequency\n      if (data.startDate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Start date should not be set for custom frequency',\n          path: ['startDate'],\n        });\n      }\n      \n      // Validate custom dates are in the future and sorted\n      if (data.customPaymentDates && data.customPaymentDates.length > 0) {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        const sortedDates = [...data.customPaymentDates].sort((a, b) => a.getTime() - b.getTime());\n        \n        // Check if dates are in chronological order\n        if (JSON.stringify(data.customPaymentDates) !== JSON.stringify(sortedDates)) {\n          ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: 'Custom payment dates must be in chronological order',\n            path: ['customPaymentDates'],\n          });\n        }\n        \n        // Check for duplicate dates\n        const uniqueDates = new Set(data.customPaymentDates.map(d => d.toISOString()));\n        if (uniqueDates.size !== data.customPaymentDates.length) {\n          ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: 'Custom payment dates must be unique',\n            path: ['customPaymentDates'],\n          });\n        }\n      }\n    }\n  } else {\n    // One-time payment validation - ensure recurring fields are not set\n    if (data.frequency || data.startDate || (data.customPaymentDates && data.customPaymentDates.length > 0)) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'Recurring payment fields should not be set for one-time payments',\n        path: ['paymentType'],\n      });\n    }\n  }\n});\n\n// AI extraction response schema for Gemini API\nexport const aiExtractionResponseSchema = z.object({\n  vendorName: z.string().nullable(),\n  invoiceNumber: z.string().nullable(),\n  totalAmount: z.number().nullable(),\n  dueDate: z.string().nullable(), // Will be converted to Date\n  paymentType: z.enum(['one-time', 'recurring']).nullable(),\n  frequency: z.enum(['monthly', 'quarterly', 'annually', 'custom']).nullable(),\n  startDate: z.string().nullable(), // Will be converted to Date\n  customPaymentDates: z.array(z.string()).nullable(), // Will be converted to Date[]\n});\n\n// Types\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InvoiceFormData = z.infer<typeof invoiceFormSchema>;\nexport type AiExtractionResponse = z.infer<typeof aiExtractionResponseSchema>;\n\n// Helper function to convert AI response to form data\nexport function convertAiResponseToFormData(aiResponse: AiExtractionResponse): Partial<InvoiceFormData> {\n  return {\n    vendorName: aiResponse.vendorName || '',\n    invoiceNumber: aiResponse.invoiceNumber || '',\n    totalAmount: aiResponse.totalAmount || 0,\n    dueDate: aiResponse.dueDate ? new Date(aiResponse.dueDate) : new Date(),\n    paymentType: aiResponse.paymentType || 'one-time',\n    frequency: aiResponse.frequency || undefined,\n    startDate: aiResponse.startDate ? new Date(aiResponse.startDate) : undefined,\n    customPaymentDates: aiResponse.customPaymentDates \n      ? aiResponse.customPaymentDates.map(date => new Date(date))\n      : undefined,\n  };\n}"],"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","ignoreList":[]}