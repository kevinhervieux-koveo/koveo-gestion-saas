10064a19226e176b513be9f6ac1beaaa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertFeatureRequestUpvoteSchema = exports.insertFeatureRequestSchema = exports.insertBugSchema = exports.insertDemandCommentSchema = exports.insertDemandSchema = exports.insertNotificationSchema = exports.insertMaintenanceRequestSchema = exports.featureRequestUpvotes = exports.featureRequests = exports.bugs = exports.demandComments = exports.demands = exports.notifications = exports.maintenanceRequests = exports.featureRequestCategoryEnum = exports.featureRequestStatusEnum = exports.bugCategoryEnum = exports.bugPriorityEnum = exports.bugStatusEnum = exports.demandStatusEnum = exports.demandTypeEnum = exports.notificationTypeEnum = exports.maintenancePriorityEnum = exports.maintenanceStatusEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const core_1 = require("./core");
const property_1 = require("./property");
// Operations enums
exports.maintenanceStatusEnum = (0, pg_core_1.pgEnum)('maintenance_status', [
    'submitted',
    'acknowledged',
    'in_progress',
    'completed',
    'cancelled',
]);
exports.maintenancePriorityEnum = (0, pg_core_1.pgEnum)('maintenance_priority', [
    'low',
    'medium',
    'high',
    'urgent',
    'emergency',
]);
exports.notificationTypeEnum = (0, pg_core_1.pgEnum)('notification_type', [
    'bill_reminder',
    'maintenance_update',
    'announcement',
    'system',
    'emergency',
]);
exports.demandTypeEnum = (0, pg_core_1.pgEnum)('demand_type', [
    'maintenance',
    'complaint',
    'information',
    'other',
]);
exports.demandStatusEnum = (0, pg_core_1.pgEnum)('demand_status', [
    'draft',
    'submitted',
    'under_review',
    'approved',
    'in_progress',
    'completed',
    'rejected',
    'cancelled',
]);
exports.bugStatusEnum = (0, pg_core_1.pgEnum)('bug_status', [
    'new',
    'acknowledged',
    'in_progress',
    'resolved',
    'closed',
]);
exports.bugPriorityEnum = (0, pg_core_1.pgEnum)('bug_priority', ['low', 'medium', 'high', 'critical']);
exports.bugCategoryEnum = (0, pg_core_1.pgEnum)('bug_category', [
    'ui_ux',
    'functionality',
    'performance',
    'data',
    'security',
    'integration',
    'other',
]);
exports.featureRequestStatusEnum = (0, pg_core_1.pgEnum)('feature_request_status', [
    'submitted',
    'under_review',
    'planned',
    'in_progress',
    'completed',
    'rejected',
]);
exports.featureRequestCategoryEnum = (0, pg_core_1.pgEnum)('feature_request_category', [
    'dashboard',
    'property_management',
    'resident_management',
    'financial_management',
    'maintenance',
    'document_management',
    'communication',
    'reports',
    'mobile_app',
    'integrations',
    'security',
    'performance',
    'other',
]);
// Operations tables
/**
 * Maintenance requests table for tracking property maintenance and repairs.
 * Supports prioritization, assignment, and cost tracking.
 */
exports.maintenanceRequests = (0, pg_core_1.pgTable)('maintenance_requests', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    residenceId: (0, pg_core_1.varchar)('residence_id')
        .notNull()
        .references(() => property_1.residences.id),
    submittedBy: (0, pg_core_1.varchar)('submitted_by')
        .notNull()
        .references(() => core_1.users.id),
    assignedTo: (0, pg_core_1.varchar)('assigned_to').references(() => core_1.users.id),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    category: (0, pg_core_1.text)('category').notNull(), // 'plumbing', 'electrical', 'hvac', 'general', etc.
    priority: (0, exports.maintenancePriorityEnum)('priority').notNull().default('medium'),
    status: (0, exports.maintenanceStatusEnum)('status').notNull().default('submitted'),
    estimatedCost: (0, pg_core_1.decimal)('estimated_cost', { precision: 10, scale: 2 }),
    actualCost: (0, pg_core_1.decimal)('actual_cost', { precision: 10, scale: 2 }),
    scheduledDate: (0, pg_core_1.timestamp)('scheduled_date'),
    completedDate: (0, pg_core_1.timestamp)('completed_date'),
    notes: (0, pg_core_1.text)('notes'),
    images: (0, pg_core_1.jsonb)('images'), // Array of image URLs
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Notifications table for system-wide user communication.
 * Supports various notification types with read tracking.
 */
exports.notifications = (0, pg_core_1.pgTable)('notifications', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => core_1.users.id),
    type: (0, exports.notificationTypeEnum)('type').notNull(),
    title: (0, pg_core_1.text)('title').notNull(),
    message: (0, pg_core_1.text)('message').notNull(),
    relatedEntityId: (0, pg_core_1.varchar)('related_entity_id'), // ID of related bill, maintenance request, etc.
    relatedEntityType: (0, pg_core_1.text)('related_entity_type'), // 'bill', 'maintenance_request', etc.
    isRead: (0, pg_core_1.boolean)('is_read').notNull().default(false),
    readAt: (0, pg_core_1.timestamp)('read_at'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
/**
 * Demands table for tracking resident requests and complaints.
 * Supports various demand types with approval workflow.
 */
exports.demands = (0, pg_core_1.pgTable)('demands', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    submitterId: (0, pg_core_1.varchar)('submitter_id')
        .notNull()
        .references(() => core_1.users.id),
    type: (0, exports.demandTypeEnum)('type').notNull(),
    assignationResidenceId: (0, pg_core_1.varchar)('assignation_residence_id').references(() => property_1.residences.id),
    assignationBuildingId: (0, pg_core_1.varchar)('assignation_building_id').references(() => property_1.buildings.id),
    description: (0, pg_core_1.text)('description').notNull(),
    attachments: (0, pg_core_1.text)('attachments').array(), // Array of file URLs/paths for uploaded documents and images
    residenceId: (0, pg_core_1.varchar)('residence_id')
        .references(() => property_1.residences.id),
    buildingId: (0, pg_core_1.varchar)('building_id')
        .notNull()
        .references(() => property_1.buildings.id),
    status: (0, exports.demandStatusEnum)('status').notNull().default('draft'),
    reviewedBy: (0, pg_core_1.varchar)('reviewed_by').references(() => core_1.users.id),
    reviewedAt: (0, pg_core_1.timestamp)('reviewed_at'),
    reviewNotes: (0, pg_core_1.text)('review_notes'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Demand comments table for tracking communication on demands.
 * Supports threaded conversations on demand requests.
 */
exports.demandComments = (0, pg_core_1.pgTable)('demands_comments', {
    id: (0, pg_core_1.text)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    demandId: (0, pg_core_1.uuid)('demand_id')
        .notNull()
        .references(() => exports.demands.id),
    commenterId: (0, pg_core_1.text)('commenter_id')
        .notNull()
        .references(() => core_1.users.id),
    commentText: (0, pg_core_1.text)('comment_text').notNull(),
    commentType: (0, pg_core_1.text)('comment_type'),
    isInternal: (0, pg_core_1.boolean)('is_internal').default(false),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Bugs table for tracking application issues and bug reports.
 * All users can create bugs with category and page assignments.
 * Now supports single file attachment per bug like document management.
 */
exports.bugs = (0, pg_core_1.pgTable)('bugs', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    createdBy: (0, pg_core_1.varchar)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    category: (0, exports.bugCategoryEnum)('category').notNull(),
    page: (0, pg_core_1.text)('page').notNull(), // The page where the bug was found
    priority: (0, exports.bugPriorityEnum)('priority').notNull().default('medium'),
    status: (0, exports.bugStatusEnum)('status').notNull().default('new'),
    assignedTo: (0, pg_core_1.varchar)('assigned_to').references(() => core_1.users.id),
    resolvedAt: (0, pg_core_1.timestamp)('resolved_at'),
    resolvedBy: (0, pg_core_1.varchar)('resolved_by').references(() => core_1.users.id),
    notes: (0, pg_core_1.text)('notes'), // Internal notes for resolution
    reproductionSteps: (0, pg_core_1.text)('reproduction_steps'), // Steps to reproduce the bug
    environment: (0, pg_core_1.text)('environment'), // Browser, OS, device info
    // File attachment fields (single file per bug like documents)
    filePath: (0, pg_core_1.text)('file_path'), // Path to the uploaded file
    fileName: (0, pg_core_1.text)('file_name'), // Original file name
    fileSize: (0, pg_core_1.integer)('file_size'), // File size in bytes
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Feature requests table for collecting user suggestions and ideas.
 * All users can submit feature requests with category and page assignments.
 * Supports upvoting and merging similar requests.
 */
exports.featureRequests = (0, pg_core_1.pgTable)('feature_requests', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    createdBy: (0, pg_core_1.varchar)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    need: (0, pg_core_1.text)('need').notNull(), // The specific need this feature addresses
    category: (0, exports.featureRequestCategoryEnum)('category').notNull(),
    page: (0, pg_core_1.text)('page').notNull(), // The page/section where this feature should be added
    status: (0, exports.featureRequestStatusEnum)('status').notNull().default('submitted'),
    upvoteCount: (0, pg_core_1.integer)('upvote_count').notNull().default(0),
    assignedTo: (0, pg_core_1.varchar)('assigned_to').references(() => core_1.users.id),
    reviewedBy: (0, pg_core_1.varchar)('reviewed_by').references(() => core_1.users.id),
    reviewedAt: (0, pg_core_1.timestamp)('reviewed_at'),
    adminNotes: (0, pg_core_1.text)('admin_notes'), // Internal notes for admins only
    mergedIntoId: (0, pg_core_1.varchar)('merged_into_id'), // If merged into another request
    // File attachment fields (single file per feature request like documents)
    filePath: (0, pg_core_1.text)('file_path'), // Path to the uploaded file
    fileName: (0, pg_core_1.text)('file_name'), // Original file name
    fileSize: (0, pg_core_1.integer)('file_size'), // File size in bytes
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Feature request upvotes table for tracking user votes on feature requests.
 * Each user can only upvote a feature request once.
 */
exports.featureRequestUpvotes = (0, pg_core_1.pgTable)('feature_request_upvotes', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    featureRequestId: (0, pg_core_1.varchar)('feature_request_id')
        .notNull()
        .references(() => exports.featureRequests.id),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
// Insert schemas
exports.insertMaintenanceRequestSchema = zod_1.z.object({
    residenceId: zod_1.z.string().uuid(),
    submittedBy: zod_1.z.string().uuid(),
    assignedTo: zod_1.z.string().uuid().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    category: zod_1.z.string(),
    priority: zod_1.z.string().default('medium'),
    estimatedCost: zod_1.z.number().optional(),
    scheduledDate: zod_1.z.date().optional(),
    notes: zod_1.z.string().optional(),
    images: zod_1.z.array(zod_1.z.string()).optional(),
});
exports.insertNotificationSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    type: zod_1.z.enum(['bill_reminder', 'maintenance_update', 'announcement', 'system', 'emergency']),
    title: zod_1.z.string(),
    message: zod_1.z.string(),
    relatedEntityId: zod_1.z.string().uuid().optional(),
    relatedEntityType: zod_1.z.string().optional(),
});
exports.insertDemandSchema = zod_1.z.object({
    submitterId: zod_1.z.string().uuid(),
    type: zod_1.z.enum(['maintenance', 'complaint', 'information', 'other']),
    assignationResidenceId: zod_1.z.string().uuid().optional(),
    assignationBuildingId: zod_1.z.string().uuid().optional(),
    description: zod_1.z
        .string()
        .min(10, 'Description must be at least 10 characters')
        .max(2000, 'Description must not exceed 2000 characters'),
    attachments: zod_1.z.array(zod_1.z.string()).optional(), // Array of file URLs/paths
    residenceId: zod_1.z.string().uuid().optional(),
    buildingId: zod_1.z.string().uuid().optional(),
    status: zod_1.z.string().default('submitted'),
    reviewNotes: zod_1.z.string().optional(),
});
exports.insertDemandCommentSchema = zod_1.z.object({
    demandId: zod_1.z.string().uuid(),
    commenterId: zod_1.z.string().uuid(),
    commentText: zod_1.z
        .string()
        .min(1, 'Comment content is required')
        .max(1000, 'Comment must not exceed 1000 characters'),
    commentType: zod_1.z.string().optional(),
    isInternal: zod_1.z.boolean().default(false),
});
exports.insertBugSchema = zod_1.z.object({
    createdBy: zod_1.z.string().uuid(),
    title: zod_1.z.string().min(1, 'Title is required').max(200, 'Title must not exceed 200 characters'),
    description: zod_1.z
        .string()
        .min(10, 'Description must be at least 10 characters')
        .max(2000, 'Description must not exceed 2000 characters'),
    category: zod_1.z.enum([
        'ui_ux',
        'functionality',
        'performance',
        'data',
        'security',
        'integration',
        'other',
    ]),
    page: zod_1.z.string().min(1, 'Page is required'),
    priority: zod_1.z.enum(['low', 'medium', 'high', 'critical']).default('medium'),
    reproductionSteps: zod_1.z.string().optional(),
    environment: zod_1.z.string().optional(),
});
exports.insertFeatureRequestSchema = zod_1.z.object({
    createdBy: zod_1.z.string().uuid(),
    title: zod_1.z.string().min(1, 'Title is required').max(200, 'Title must not exceed 200 characters'),
    description: zod_1.z
        .string()
        .min(10, 'Description must be at least 10 characters')
        .max(2000, 'Description must not exceed 2000 characters'),
    need: zod_1.z
        .string()
        .min(5, 'Need must be at least 5 characters')
        .max(500, 'Need must not exceed 500 characters'),
    category: zod_1.z.enum([
        'dashboard',
        'property_management',
        'resident_management',
        'financial_management',
        'maintenance',
        'document_management',
        'communication',
        'reports',
        'mobile_app',
        'integrations',
        'security',
        'performance',
        'other',
    ]),
    page: zod_1.z.string().min(1, 'Page is required'),
});
exports.insertFeatureRequestUpvoteSchema = zod_1.z.object({
    featureRequestId: zod_1.z.string().uuid(),
    userId: zod_1.z.string().uuid(),
});
// Relations
// Relations - temporarily commented out due to drizzle-orm version compatibility
// export const maintenanceRequestsRelations = relations(maintenanceRequests, ({ one }) => ({
//   residence: one(residences, {
//     fields: [maintenanceRequests.residenceId],
//     references: [residences.id],
//   }),
//   submittedBy: one(users, {
//     fields: [maintenanceRequests.submittedBy],
//     references: [users.id],
//     relationName: 'submittedBy',
//   }),
//   assignedTo: one(users, {
//     fields: [maintenanceRequests.assignedTo],
//     references: [users.id],
//     relationName: 'assignedTo',
//   }),
// }));
// export const notificationsRelations = relations(notifications, ({ one }) => ({
//   user: one(users, {
//     fields: [notifications.userId],
//     references: [users.id],
//   }),
// }));
// export const demandsRelations = relations(demands, ({ one, many }) => ({
//   submitter: one(users, {
//     fields: [demands.submitterId],
//     references: [users.id],
//     relationName: 'submitter',
//   }),
//   assignationResidence: one(residences, {
//     fields: [demands.assignationResidenceId],
//     references: [residences.id],
//     relationName: 'assignationResidence',
//   }),
//   assignationBuilding: one(buildings, {
//     fields: [demands.assignationBuildingId],
//     references: [buildings.id],
//     relationName: 'assignationBuilding',
//   }),
//   residence: one(residences, {
//     fields: [demands.residenceId],
//     references: [residences.id],
//     relationName: 'residence',
//   }),
//   building: one(buildings, {
//     fields: [demands.buildingId],
//     references: [buildings.id],
//     relationName: 'building',
//   }),
//   reviewedBy: one(users, {
//     fields: [demands.reviewedBy],
//     references: [users.id],
//     relationName: 'reviewedBy',
//   }),
//   comments: many(demandComments),
// }));
// export const demandCommentsRelations = relations(demandComments, ({ one }) => ({
//   demand: one(demands, {
//     fields: [demandComments.demandId],
//     references: [demands.id],
//   }),
//   createdBy: one(users, {
//     fields: [demandComments.createdBy],
//     references: [users.id],
//   }),
// }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBRVAsaUZBQWlGO0FBQ2pGLHVCQUF1QjtBQUN2QixzQ0FBc0M7QUFDdEMsOEJBQThCO0FBQzlCLFFBQVE7QUFDUixPQUFPO0FBRVAsMkVBQTJFO0FBQzNFLDRCQUE0QjtBQUM1QixxQ0FBcUM7QUFDckMsOEJBQThCO0FBQzlCLGlDQUFpQztBQUNqQyxRQUFRO0FBQ1IsNENBQTRDO0FBQzVDLGdEQUFnRDtBQUNoRCxtQ0FBbUM7QUFDbkMsNENBQTRDO0FBQzVDLFFBQVE7QUFDUiwwQ0FBMEM7QUFDMUMsK0NBQStDO0FBQy9DLGtDQUFrQztBQUNsQywyQ0FBMkM7QUFDM0MsUUFBUTtBQUNSLGlDQUFpQztBQUNqQyxxQ0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLGlDQUFpQztBQUNqQyxRQUFRO0FBQ1IsK0JBQStCO0FBQy9CLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEMsZ0NBQWdDO0FBQ2hDLFFBQVE7QUFDUiw2QkFBNkI7QUFDN0Isb0NBQW9DO0FBQ3BDLDhCQUE4QjtBQUM5QixrQ0FBa0M7QUFDbEMsUUFBUTtBQUNSLG9DQUFvQztBQUNwQyxPQUFPO0FBRVAsbUZBQW1GO0FBQ25GLDJCQUEyQjtBQUMzQix5Q0FBeUM7QUFDekMsZ0NBQWdDO0FBQ2hDLFFBQVE7QUFDUiw0QkFBNEI7QUFDNUIsMENBQTBDO0FBQzFDLDhCQUE4QjtBQUM5QixRQUFRO0FBQ1IsT0FBTyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NoYXJlZC9zY2hlbWFzL29wZXJhdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3FsIH0gZnJvbSAnZHJpenpsZS1vcm0nO1xuaW1wb3J0IHtcbiAgcGdUYWJsZSxcbiAgdGV4dCxcbiAgdGltZXN0YW1wLFxuICBqc29uYixcbiAgdXVpZCxcbiAgcGdFbnVtLFxuICBib29sZWFuLFxuICBkZWNpbWFsLFxuICBpbnRlZ2VyLFxuICB2YXJjaGFyLFxufSBmcm9tICdkcml6emxlLW9ybS9wZy1jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUluc2VydFNjaGVtYSB9IGZyb20gJ2RyaXp6bGUtem9kJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgcmVsYXRpb25zIH0gZnJvbSAnZHJpenpsZS1vcm0nO1xuaW1wb3J0IHsgdXNlcnMgfSBmcm9tICcuL2NvcmUnO1xuaW1wb3J0IHsgcmVzaWRlbmNlcywgYnVpbGRpbmdzIH0gZnJvbSAnLi9wcm9wZXJ0eSc7XG5cbi8vIE9wZXJhdGlvbnMgZW51bXNcbmV4cG9ydCBjb25zdCBtYWludGVuYW5jZVN0YXR1c0VudW0gPSBwZ0VudW0oJ21haW50ZW5hbmNlX3N0YXR1cycsIFtcbiAgJ3N1Ym1pdHRlZCcsXG4gICdhY2tub3dsZWRnZWQnLFxuICAnaW5fcHJvZ3Jlc3MnLFxuICAnY29tcGxldGVkJyxcbiAgJ2NhbmNlbGxlZCcsXG5dKTtcblxuZXhwb3J0IGNvbnN0IG1haW50ZW5hbmNlUHJpb3JpdHlFbnVtID0gcGdFbnVtKCdtYWludGVuYW5jZV9wcmlvcml0eScsIFtcbiAgJ2xvdycsXG4gICdtZWRpdW0nLFxuICAnaGlnaCcsXG4gICd1cmdlbnQnLFxuICAnZW1lcmdlbmN5Jyxcbl0pO1xuXG5leHBvcnQgY29uc3Qgbm90aWZpY2F0aW9uVHlwZUVudW0gPSBwZ0VudW0oJ25vdGlmaWNhdGlvbl90eXBlJywgW1xuICAnYmlsbF9yZW1pbmRlcicsXG4gICdtYWludGVuYW5jZV91cGRhdGUnLFxuICAnYW5ub3VuY2VtZW50JyxcbiAgJ3N5c3RlbScsXG4gICdlbWVyZ2VuY3knLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBkZW1hbmRUeXBlRW51bSA9IHBnRW51bSgnZGVtYW5kX3R5cGUnLCBbXG4gICdtYWludGVuYW5jZScsXG4gICdjb21wbGFpbnQnLFxuICAnaW5mb3JtYXRpb24nLFxuICAnb3RoZXInLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBkZW1hbmRTdGF0dXNFbnVtID0gcGdFbnVtKCdkZW1hbmRfc3RhdHVzJywgW1xuICAnZHJhZnQnLFxuICAnc3VibWl0dGVkJyxcbiAgJ3VuZGVyX3JldmlldycsXG4gICdhcHByb3ZlZCcsXG4gICdpbl9wcm9ncmVzcycsXG4gICdjb21wbGV0ZWQnLFxuICAncmVqZWN0ZWQnLFxuICAnY2FuY2VsbGVkJyxcbl0pO1xuXG5leHBvcnQgY29uc3QgYnVnU3RhdHVzRW51bSA9IHBnRW51bSgnYnVnX3N0YXR1cycsIFtcbiAgJ25ldycsXG4gICdhY2tub3dsZWRnZWQnLFxuICAnaW5fcHJvZ3Jlc3MnLFxuICAncmVzb2x2ZWQnLFxuICAnY2xvc2VkJyxcbl0pO1xuXG5leHBvcnQgY29uc3QgYnVnUHJpb3JpdHlFbnVtID0gcGdFbnVtKCdidWdfcHJpb3JpdHknLCBbJ2xvdycsICdtZWRpdW0nLCAnaGlnaCcsICdjcml0aWNhbCddKTtcblxuZXhwb3J0IGNvbnN0IGJ1Z0NhdGVnb3J5RW51bSA9IHBnRW51bSgnYnVnX2NhdGVnb3J5JywgW1xuICAndWlfdXgnLFxuICAnZnVuY3Rpb25hbGl0eScsXG4gICdwZXJmb3JtYW5jZScsXG4gICdkYXRhJyxcbiAgJ3NlY3VyaXR5JyxcbiAgJ2ludGVncmF0aW9uJyxcbiAgJ290aGVyJyxcbl0pO1xuXG5leHBvcnQgY29uc3QgZmVhdHVyZVJlcXVlc3RTdGF0dXNFbnVtID0gcGdFbnVtKCdmZWF0dXJlX3JlcXVlc3Rfc3RhdHVzJywgW1xuICAnc3VibWl0dGVkJyxcbiAgJ3VuZGVyX3JldmlldycsXG4gICdwbGFubmVkJyxcbiAgJ2luX3Byb2dyZXNzJyxcbiAgJ2NvbXBsZXRlZCcsXG4gICdyZWplY3RlZCcsXG5dKTtcblxuZXhwb3J0IGNvbnN0IGZlYXR1cmVSZXF1ZXN0Q2F0ZWdvcnlFbnVtID0gcGdFbnVtKCdmZWF0dXJlX3JlcXVlc3RfY2F0ZWdvcnknLCBbXG4gICdkYXNoYm9hcmQnLFxuICAncHJvcGVydHlfbWFuYWdlbWVudCcsXG4gICdyZXNpZGVudF9tYW5hZ2VtZW50JyxcbiAgJ2ZpbmFuY2lhbF9tYW5hZ2VtZW50JyxcbiAgJ21haW50ZW5hbmNlJyxcbiAgJ2RvY3VtZW50X21hbmFnZW1lbnQnLFxuICAnY29tbXVuaWNhdGlvbicsXG4gICdyZXBvcnRzJyxcbiAgJ21vYmlsZV9hcHAnLFxuICAnaW50ZWdyYXRpb25zJyxcbiAgJ3NlY3VyaXR5JyxcbiAgJ3BlcmZvcm1hbmNlJyxcbiAgJ290aGVyJyxcbl0pO1xuXG4vLyBPcGVyYXRpb25zIHRhYmxlc1xuLyoqXG4gKiBNYWludGVuYW5jZSByZXF1ZXN0cyB0YWJsZSBmb3IgdHJhY2tpbmcgcHJvcGVydHkgbWFpbnRlbmFuY2UgYW5kIHJlcGFpcnMuXG4gKiBTdXBwb3J0cyBwcmlvcml0aXphdGlvbiwgYXNzaWdubWVudCwgYW5kIGNvc3QgdHJhY2tpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBtYWludGVuYW5jZVJlcXVlc3RzID0gcGdUYWJsZSgnbWFpbnRlbmFuY2VfcmVxdWVzdHMnLCB7XG4gIGlkOiB1dWlkKCdpZCcpXG4gICAgLnByaW1hcnlLZXkoKVxuICAgIC5kZWZhdWx0KHNxbGBnZW5fcmFuZG9tX3V1aWQoKWApLFxuICByZXNpZGVuY2VJZDogdmFyY2hhcigncmVzaWRlbmNlX2lkJylcbiAgICAubm90TnVsbCgpXG4gICAgLnJlZmVyZW5jZXMoKCkgPT4gcmVzaWRlbmNlcy5pZCksXG4gIHN1Ym1pdHRlZEJ5OiB2YXJjaGFyKCdzdWJtaXR0ZWRfYnknKVxuICAgIC5ub3ROdWxsKClcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZCksXG4gIGFzc2lnbmVkVG86IHZhcmNoYXIoJ2Fzc2lnbmVkX3RvJykucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZCksXG4gIHRpdGxlOiB0ZXh0KCd0aXRsZScpLm5vdE51bGwoKSxcbiAgZGVzY3JpcHRpb246IHRleHQoJ2Rlc2NyaXB0aW9uJykubm90TnVsbCgpLFxuICBjYXRlZ29yeTogdGV4dCgnY2F0ZWdvcnknKS5ub3ROdWxsKCksIC8vICdwbHVtYmluZycsICdlbGVjdHJpY2FsJywgJ2h2YWMnLCAnZ2VuZXJhbCcsIGV0Yy5cbiAgcHJpb3JpdHk6IG1haW50ZW5hbmNlUHJpb3JpdHlFbnVtKCdwcmlvcml0eScpLm5vdE51bGwoKS5kZWZhdWx0KCdtZWRpdW0nKSxcbiAgc3RhdHVzOiBtYWludGVuYW5jZVN0YXR1c0VudW0oJ3N0YXR1cycpLm5vdE51bGwoKS5kZWZhdWx0KCdzdWJtaXR0ZWQnKSxcbiAgZXN0aW1hdGVkQ29zdDogZGVjaW1hbCgnZXN0aW1hdGVkX2Nvc3QnLCB7IHByZWNpc2lvbjogMTAsIHNjYWxlOiAyIH0pLFxuICBhY3R1YWxDb3N0OiBkZWNpbWFsKCdhY3R1YWxfY29zdCcsIHsgcHJlY2lzaW9uOiAxMCwgc2NhbGU6IDIgfSksXG4gIHNjaGVkdWxlZERhdGU6IHRpbWVzdGFtcCgnc2NoZWR1bGVkX2RhdGUnKSxcbiAgY29tcGxldGVkRGF0ZTogdGltZXN0YW1wKCdjb21wbGV0ZWRfZGF0ZScpLFxuICBub3RlczogdGV4dCgnbm90ZXMnKSxcbiAgaW1hZ2VzOiBqc29uYignaW1hZ2VzJyksIC8vIEFycmF5IG9mIGltYWdlIFVSTHNcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnKS5kZWZhdWx0Tm93KCksXG4gIHVwZGF0ZWRBdDogdGltZXN0YW1wKCd1cGRhdGVkX2F0JykuZGVmYXVsdE5vdygpLFxufSk7XG5cbi8qKlxuICogTm90aWZpY2F0aW9ucyB0YWJsZSBmb3Igc3lzdGVtLXdpZGUgdXNlciBjb21tdW5pY2F0aW9uLlxuICogU3VwcG9ydHMgdmFyaW91cyBub3RpZmljYXRpb24gdHlwZXMgd2l0aCByZWFkIHRyYWNraW5nLlxuICovXG5leHBvcnQgY29uc3Qgbm90aWZpY2F0aW9ucyA9IHBnVGFibGUoJ25vdGlmaWNhdGlvbnMnLCB7XG4gIGlkOiB2YXJjaGFyKCdpZCcpXG4gICAgLnByaW1hcnlLZXkoKVxuICAgIC5kZWZhdWx0KHNxbGBnZW5fcmFuZG9tX3V1aWQoKWApLFxuICB1c2VySWQ6IHZhcmNoYXIoJ3VzZXJfaWQnKVxuICAgIC5ub3ROdWxsKClcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZCksXG4gIHR5cGU6IG5vdGlmaWNhdGlvblR5cGVFbnVtKCd0eXBlJykubm90TnVsbCgpLFxuICB0aXRsZTogdGV4dCgndGl0bGUnKS5ub3ROdWxsKCksXG4gIG1lc3NhZ2U6IHRleHQoJ21lc3NhZ2UnKS5ub3ROdWxsKCksXG4gIHJlbGF0ZWRFbnRpdHlJZDogdmFyY2hhcigncmVsYXRlZF9lbnRpdHlfaWQnKSwgLy8gSUQgb2YgcmVsYXRlZCBiaWxsLCBtYWludGVuYW5jZSByZXF1ZXN0LCBldGMuXG4gIHJlbGF0ZWRFbnRpdHlUeXBlOiB0ZXh0KCdyZWxhdGVkX2VudGl0eV90eXBlJyksIC8vICdiaWxsJywgJ21haW50ZW5hbmNlX3JlcXVlc3QnLCBldGMuXG4gIGlzUmVhZDogYm9vbGVhbignaXNfcmVhZCcpLm5vdE51bGwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgcmVhZEF0OiB0aW1lc3RhbXAoJ3JlYWRfYXQnKSxcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnKS5kZWZhdWx0Tm93KCksXG59KTtcblxuLyoqXG4gKiBEZW1hbmRzIHRhYmxlIGZvciB0cmFja2luZyByZXNpZGVudCByZXF1ZXN0cyBhbmQgY29tcGxhaW50cy5cbiAqIFN1cHBvcnRzIHZhcmlvdXMgZGVtYW5kIHR5cGVzIHdpdGggYXBwcm92YWwgd29ya2Zsb3cuXG4gKi9cbmV4cG9ydCBjb25zdCBkZW1hbmRzID0gcGdUYWJsZSgnZGVtYW5kcycsIHtcbiAgaWQ6IHV1aWQoJ2lkJylcbiAgICAucHJpbWFyeUtleSgpXG4gICAgLmRlZmF1bHQoc3FsYGdlbl9yYW5kb21fdXVpZCgpYCksXG4gIHN1Ym1pdHRlcklkOiB2YXJjaGFyKCdzdWJtaXR0ZXJfaWQnKVxuICAgIC5ub3ROdWxsKClcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZCksXG4gIHR5cGU6IGRlbWFuZFR5cGVFbnVtKCd0eXBlJykubm90TnVsbCgpLFxuICBhc3NpZ25hdGlvblJlc2lkZW5jZUlkOiB2YXJjaGFyKCdhc3NpZ25hdGlvbl9yZXNpZGVuY2VfaWQnKS5yZWZlcmVuY2VzKCgpID0+IHJlc2lkZW5jZXMuaWQpLFxuICBhc3NpZ25hdGlvbkJ1aWxkaW5nSWQ6IHZhcmNoYXIoJ2Fzc2lnbmF0aW9uX2J1aWxkaW5nX2lkJykucmVmZXJlbmNlcygoKSA9PiBidWlsZGluZ3MuaWQpLFxuICBkZXNjcmlwdGlvbjogdGV4dCgnZGVzY3JpcHRpb24nKS5ub3ROdWxsKCksXG4gIGF0dGFjaG1lbnRzOiB0ZXh0KCdhdHRhY2htZW50cycpLmFycmF5KCksIC8vIEFycmF5IG9mIGZpbGUgVVJMcy9wYXRocyBmb3IgdXBsb2FkZWQgZG9jdW1lbnRzIGFuZCBpbWFnZXNcbiAgcmVzaWRlbmNlSWQ6IHZhcmNoYXIoJ3Jlc2lkZW5jZV9pZCcpXG4gICAgLnJlZmVyZW5jZXMoKCkgPT4gcmVzaWRlbmNlcy5pZCksXG4gIGJ1aWxkaW5nSWQ6IHZhcmNoYXIoJ2J1aWxkaW5nX2lkJylcbiAgICAubm90TnVsbCgpXG4gICAgLnJlZmVyZW5jZXMoKCkgPT4gYnVpbGRpbmdzLmlkKSxcbiAgc3RhdHVzOiBkZW1hbmRTdGF0dXNFbnVtKCdzdGF0dXMnKS5ub3ROdWxsKCkuZGVmYXVsdCgnZHJhZnQnKSxcbiAgcmV2aWV3ZWRCeTogdmFyY2hhcigncmV2aWV3ZWRfYnknKS5yZWZlcmVuY2VzKCgpID0+IHVzZXJzLmlkKSxcbiAgcmV2aWV3ZWRBdDogdGltZXN0YW1wKCdyZXZpZXdlZF9hdCcpLFxuICByZXZpZXdOb3RlczogdGV4dCgncmV2aWV3X25vdGVzJyksXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JykuZGVmYXVsdE5vdygpLFxuICB1cGRhdGVkQXQ6IHRpbWVzdGFtcCgndXBkYXRlZF9hdCcpLmRlZmF1bHROb3coKSxcbn0pO1xuXG4vKipcbiAqIERlbWFuZCBjb21tZW50cyB0YWJsZSBmb3IgdHJhY2tpbmcgY29tbXVuaWNhdGlvbiBvbiBkZW1hbmRzLlxuICogU3VwcG9ydHMgdGhyZWFkZWQgY29udmVyc2F0aW9ucyBvbiBkZW1hbmQgcmVxdWVzdHMuXG4gKi9cbmV4cG9ydCBjb25zdCBkZW1hbmRDb21tZW50cyA9IHBnVGFibGUoJ2RlbWFuZHNfY29tbWVudHMnLCB7XG4gIGlkOiB0ZXh0KCdpZCcpXG4gICAgLnByaW1hcnlLZXkoKVxuICAgIC5kZWZhdWx0KHNxbGBnZW5fcmFuZG9tX3V1aWQoKWApLFxuICBkZW1hbmRJZDogdXVpZCgnZGVtYW5kX2lkJylcbiAgICAubm90TnVsbCgpXG4gICAgLnJlZmVyZW5jZXMoKCkgPT4gZGVtYW5kcy5pZCksXG4gIGNvbW1lbnRlcklkOiB0ZXh0KCdjb21tZW50ZXJfaWQnKVxuICAgIC5ub3ROdWxsKClcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZCksXG4gIGNvbW1lbnRUZXh0OiB0ZXh0KCdjb21tZW50X3RleHQnKS5ub3ROdWxsKCksXG4gIGNvbW1lbnRUeXBlOiB0ZXh0KCdjb21tZW50X3R5cGUnKSxcbiAgaXNJbnRlcm5hbDogYm9vbGVhbignaXNfaW50ZXJuYWwnKS5kZWZhdWx0KGZhbHNlKSxcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnKS5kZWZhdWx0Tm93KCksXG4gIHVwZGF0ZWRBdDogdGltZXN0YW1wKCd1cGRhdGVkX2F0JykuZGVmYXVsdE5vdygpLFxufSk7XG5cbi8qKlxuICogQnVncyB0YWJsZSBmb3IgdHJhY2tpbmcgYXBwbGljYXRpb24gaXNzdWVzIGFuZCBidWcgcmVwb3J0cy5cbiAqIEFsbCB1c2VycyBjYW4gY3JlYXRlIGJ1Z3Mgd2l0aCBjYXRlZ29yeSBhbmQgcGFnZSBhc3NpZ25tZW50cy5cbiAqIE5vdyBzdXBwb3J0cyBzaW5nbGUgZmlsZSBhdHRhY2htZW50IHBlciBidWcgbGlrZSBkb2N1bWVudCBtYW5hZ2VtZW50LlxuICovXG5leHBvcnQgY29uc3QgYnVncyA9IHBnVGFibGUoJ2J1Z3MnLCB7XG4gIGlkOiB2YXJjaGFyKCdpZCcpXG4gICAgLnByaW1hcnlLZXkoKVxuICAgIC5kZWZhdWx0KHNxbGBnZW5fcmFuZG9tX3V1aWQoKWApLFxuICBjcmVhdGVkQnk6IHZhcmNoYXIoJ2NyZWF0ZWRfYnknKVxuICAgIC5ub3ROdWxsKClcbiAgICAucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZCksXG4gIHRpdGxlOiB0ZXh0KCd0aXRsZScpLm5vdE51bGwoKSxcbiAgZGVzY3JpcHRpb246IHRleHQoJ2Rlc2NyaXB0aW9uJykubm90TnVsbCgpLFxuICBjYXRlZ29yeTogYnVnQ2F0ZWdvcnlFbnVtKCdjYXRlZ29yeScpLm5vdE51bGwoKSxcbiAgcGFnZTogdGV4dCgncGFnZScpLm5vdE51bGwoKSwgLy8gVGhlIHBhZ2Ugd2hlcmUgdGhlIGJ1ZyB3YXMgZm91bmRcbiAgcHJpb3JpdHk6IGJ1Z1ByaW9yaXR5RW51bSgncHJpb3JpdHknKS5ub3ROdWxsKCkuZGVmYXVsdCgnbWVkaXVtJyksXG4gIHN0YXR1czogYnVnU3RhdHVzRW51bSgnc3RhdHVzJykubm90TnVsbCgpLmRlZmF1bHQoJ25ldycpLFxuICBhc3NpZ25lZFRvOiB2YXJjaGFyKCdhc3NpZ25lZF90bycpLnJlZmVyZW5jZXMoKCkgPT4gdXNlcnMuaWQpLFxuICByZXNvbHZlZEF0OiB0aW1lc3RhbXAoJ3Jlc29sdmVkX2F0JyksXG4gIHJlc29sdmVkQnk6IHZhcmNoYXIoJ3Jlc29sdmVkX2J5JykucmVmZXJlbmNlcygoKSA9PiB1c2Vycy5pZCksXG4gIG5vdGVzOiB0ZXh0KCdub3RlcycpLCAvLyBJbnRlcm5hbCBub3RlcyBmb3IgcmVzb2x1dGlvblxuICByZXByb2R1Y3Rpb25TdGVwczogdGV4dCgncmVwcm9kdWN0aW9uX3N0ZXBzJyksIC8vIFN0ZXBzIHRvIHJlcHJvZHVjZSB0aGUgYnVnXG4gIGVudmlyb25tZW50OiB0ZXh0KCdlbnZpcm9ubWVudCcpLCAvLyBCcm93c2VyLCBPUywgZGV2aWNlIGluZm9cbiAgLy8gRmlsZSBhdHRhY2htZW50IGZpZWxkcyAoc2luZ2xlIGZpbGUgcGVyIGJ1ZyBsaWtlIGRvY3VtZW50cylcbiAgZmlsZVBhdGg6IHRleHQoJ2ZpbGVfcGF0aCcpLCAvLyBQYXRoIHRvIHRoZSB1cGxvYWRlZCBmaWxlXG4gIGZpbGVOYW1lOiB0ZXh0KCdmaWxlX25hbWUnKSwgLy8gT3JpZ2luYWwgZmlsZSBuYW1lXG4gIGZpbGVTaXplOiBpbnRlZ2VyKCdmaWxlX3NpemUnKSwgLy8gRmlsZSBzaXplIGluIGJ5dGVzXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JykuZGVmYXVsdE5vdygpLFxuICB1cGRhdGVkQXQ6IHRpbWVzdGFtcCgndXBkYXRlZF9hdCcpLmRlZmF1bHROb3coKSxcbn0pO1xuXG4vKipcbiAqIEZlYXR1cmUgcmVxdWVzdHMgdGFibGUgZm9yIGNvbGxlY3RpbmcgdXNlciBzdWdnZXN0aW9ucyBhbmQgaWRlYXMuXG4gKiBBbGwgdXNlcnMgY2FuIHN1Ym1pdCBmZWF0dXJlIHJlcXVlc3RzIHdpdGggY2F0ZWdvcnkgYW5kIHBhZ2UgYXNzaWdubWVudHMuXG4gKiBTdXBwb3J0cyB1cHZvdGluZyBhbmQgbWVyZ2luZyBzaW1pbGFyIHJlcXVlc3RzLlxuICovXG5leHBvcnQgY29uc3QgZmVhdHVyZVJlcXVlc3RzID0gcGdUYWJsZSgnZmVhdHVyZV9yZXF1ZXN0cycsIHtcbiAgaWQ6IHZhcmNoYXIoJ2lkJylcbiAgICAucHJpbWFyeUtleSgpXG4gICAgLmRlZmF1bHQoc3FsYGdlbl9yYW5kb21fdXVpZCgpYCksXG4gIGNyZWF0ZWRCeTogdmFyY2hhcignY3JlYXRlZF9ieScpXG4gICAgLm5vdE51bGwoKVxuICAgIC5yZWZlcmVuY2VzKCgpID0+IHVzZXJzLmlkKSxcbiAgdGl0bGU6IHRleHQoJ3RpdGxlJykubm90TnVsbCgpLFxuICBkZXNjcmlwdGlvbjogdGV4dCgnZGVzY3JpcHRpb24nKS5ub3ROdWxsKCksXG4gIG5lZWQ6IHRleHQoJ25lZWQnKS5ub3ROdWxsKCksIC8vIFRoZSBzcGVjaWZpYyBuZWVkIHRoaXMgZmVhdHVyZSBhZGRyZXNzZXNcbiAgY2F0ZWdvcnk6IGZlYXR1cmVSZXF1ZXN0Q2F0ZWdvcnlFbnVtKCdjYXRlZ29yeScpLm5vdE51bGwoKSxcbiAgcGFnZTogdGV4dCgncGFnZScpLm5vdE51bGwoKSwgLy8gVGhlIHBhZ2Uvc2VjdGlvbiB3aGVyZSB0aGlzIGZlYXR1cmUgc2hvdWxkIGJlIGFkZGVkXG4gIHN0YXR1czogZmVhdHVyZVJlcXVlc3RTdGF0dXNFbnVtKCdzdGF0dXMnKS5ub3ROdWxsKCkuZGVmYXVsdCgnc3VibWl0dGVkJyksXG4gIHVwdm90ZUNvdW50OiBpbnRlZ2VyKCd1cHZvdGVfY291bnQnKS5ub3ROdWxsKCkuZGVmYXVsdCgwKSxcbiAgYXNzaWduZWRUbzogdmFyY2hhcignYXNzaWduZWRfdG8nKS5yZWZlcmVuY2VzKCgpID0+IHVzZXJzLmlkKSxcbiAgcmV2aWV3ZWRCeTogdmFyY2hhcigncmV2aWV3ZWRfYnknKS5yZWZlcmVuY2VzKCgpID0+IHVzZXJzLmlkKSxcbiAgcmV2aWV3ZWRBdDogdGltZXN0YW1wKCdyZXZpZXdlZF9hdCcpLFxuICBhZG1pbk5vdGVzOiB0ZXh0KCdhZG1pbl9ub3RlcycpLCAvLyBJbnRlcm5hbCBub3RlcyBmb3IgYWRtaW5zIG9ubHlcbiAgbWVyZ2VkSW50b0lkOiB2YXJjaGFyKCdtZXJnZWRfaW50b19pZCcpLCAvLyBJZiBtZXJnZWQgaW50byBhbm90aGVyIHJlcXVlc3RcbiAgLy8gRmlsZSBhdHRhY2htZW50IGZpZWxkcyAoc2luZ2xlIGZpbGUgcGVyIGZlYXR1cmUgcmVxdWVzdCBsaWtlIGRvY3VtZW50cylcbiAgZmlsZVBhdGg6IHRleHQoJ2ZpbGVfcGF0aCcpLCAvLyBQYXRoIHRvIHRoZSB1cGxvYWRlZCBmaWxlXG4gIGZpbGVOYW1lOiB0ZXh0KCdmaWxlX25hbWUnKSwgLy8gT3JpZ2luYWwgZmlsZSBuYW1lXG4gIGZpbGVTaXplOiBpbnRlZ2VyKCdmaWxlX3NpemUnKSwgLy8gRmlsZSBzaXplIGluIGJ5dGVzXG4gIGNyZWF0ZWRBdDogdGltZXN0YW1wKCdjcmVhdGVkX2F0JykuZGVmYXVsdE5vdygpLFxuICB1cGRhdGVkQXQ6IHRpbWVzdGFtcCgndXBkYXRlZF9hdCcpLmRlZmF1bHROb3coKSxcbn0pO1xuXG4vKipcbiAqIEZlYXR1cmUgcmVxdWVzdCB1cHZvdGVzIHRhYmxlIGZvciB0cmFja2luZyB1c2VyIHZvdGVzIG9uIGZlYXR1cmUgcmVxdWVzdHMuXG4gKiBFYWNoIHVzZXIgY2FuIG9ubHkgdXB2b3RlIGEgZmVhdHVyZSByZXF1ZXN0IG9uY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBmZWF0dXJlUmVxdWVzdFVwdm90ZXMgPSBwZ1RhYmxlKCdmZWF0dXJlX3JlcXVlc3RfdXB2b3RlcycsIHtcbiAgaWQ6IHZhcmNoYXIoJ2lkJylcbiAgICAucHJpbWFyeUtleSgpXG4gICAgLmRlZmF1bHQoc3FsYGdlbl9yYW5kb21fdXVpZCgpYCksXG4gIGZlYXR1cmVSZXF1ZXN0SWQ6IHZhcmNoYXIoJ2ZlYXR1cmVfcmVxdWVzdF9pZCcpXG4gICAgLm5vdE51bGwoKVxuICAgIC5yZWZlcmVuY2VzKCgpID0+IGZlYXR1cmVSZXF1ZXN0cy5pZCksXG4gIHVzZXJJZDogdmFyY2hhcigndXNlcl9pZCcpXG4gICAgLm5vdE51bGwoKVxuICAgIC5yZWZlcmVuY2VzKCgpID0+IHVzZXJzLmlkKSxcbiAgY3JlYXRlZEF0OiB0aW1lc3RhbXAoJ2NyZWF0ZWRfYXQnKS5kZWZhdWx0Tm93KCksXG59KTtcblxuLy8gSW5zZXJ0IHNjaGVtYXNcbmV4cG9ydCBjb25zdCBpbnNlcnRNYWludGVuYW5jZVJlcXVlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHJlc2lkZW5jZUlkOiB6LnN0cmluZygpLnV1aWQoKSxcbiAgc3VibWl0dGVkQnk6IHouc3RyaW5nKCkudXVpZCgpLFxuICBhc3NpZ25lZFRvOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICB0aXRsZTogei5zdHJpbmcoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCksXG4gIGNhdGVnb3J5OiB6LnN0cmluZygpLFxuICBwcmlvcml0eTogei5zdHJpbmcoKS5kZWZhdWx0KCdtZWRpdW0nKSxcbiAgZXN0aW1hdGVkQ29zdDogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBzY2hlZHVsZWREYXRlOiB6LmRhdGUoKS5vcHRpb25hbCgpLFxuICBub3Rlczogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBpbWFnZXM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgaW5zZXJ0Tm90aWZpY2F0aW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICB1c2VySWQ6IHouc3RyaW5nKCkudXVpZCgpLFxuICB0eXBlOiB6LmVudW0oWydiaWxsX3JlbWluZGVyJywgJ21haW50ZW5hbmNlX3VwZGF0ZScsICdhbm5vdW5jZW1lbnQnLCAnc3lzdGVtJywgJ2VtZXJnZW5jeSddKSxcbiAgdGl0bGU6IHouc3RyaW5nKCksXG4gIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gIHJlbGF0ZWRFbnRpdHlJZDogei5zdHJpbmcoKS51dWlkKCkub3B0aW9uYWwoKSxcbiAgcmVsYXRlZEVudGl0eVR5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgaW5zZXJ0RGVtYW5kU2NoZW1hID0gei5vYmplY3Qoe1xuICBzdWJtaXR0ZXJJZDogei5zdHJpbmcoKS51dWlkKCksXG4gIHR5cGU6IHouZW51bShbJ21haW50ZW5hbmNlJywgJ2NvbXBsYWludCcsICdpbmZvcm1hdGlvbicsICdvdGhlciddKSxcbiAgYXNzaWduYXRpb25SZXNpZGVuY2VJZDogei5zdHJpbmcoKS51dWlkKCkub3B0aW9uYWwoKSxcbiAgYXNzaWduYXRpb25CdWlsZGluZ0lkOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICBkZXNjcmlwdGlvbjogelxuICAgIC5zdHJpbmcoKVxuICAgIC5taW4oMTAsICdEZXNjcmlwdGlvbiBtdXN0IGJlIGF0IGxlYXN0IDEwIGNoYXJhY3RlcnMnKVxuICAgIC5tYXgoMjAwMCwgJ0Rlc2NyaXB0aW9uIG11c3Qgbm90IGV4Y2VlZCAyMDAwIGNoYXJhY3RlcnMnKSxcbiAgYXR0YWNobWVudHM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSwgLy8gQXJyYXkgb2YgZmlsZSBVUkxzL3BhdGhzXG4gIHJlc2lkZW5jZUlkOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICBidWlsZGluZ0lkOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICBzdGF0dXM6IHouc3RyaW5nKCkuZGVmYXVsdCgnc3VibWl0dGVkJyksXG4gIHJldmlld05vdGVzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IGluc2VydERlbWFuZENvbW1lbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGRlbWFuZElkOiB6LnN0cmluZygpLnV1aWQoKSxcbiAgY29tbWVudGVySWQ6IHouc3RyaW5nKCkudXVpZCgpLFxuICBjb21tZW50VGV4dDogelxuICAgIC5zdHJpbmcoKVxuICAgIC5taW4oMSwgJ0NvbW1lbnQgY29udGVudCBpcyByZXF1aXJlZCcpXG4gICAgLm1heCgxMDAwLCAnQ29tbWVudCBtdXN0IG5vdCBleGNlZWQgMTAwMCBjaGFyYWN0ZXJzJyksXG4gIGNvbW1lbnRUeXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGlzSW50ZXJuYWw6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxufSk7XG5cbmV4cG9ydCBjb25zdCBpbnNlcnRCdWdTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGNyZWF0ZWRCeTogei5zdHJpbmcoKS51dWlkKCksXG4gIHRpdGxlOiB6LnN0cmluZygpLm1pbigxLCAnVGl0bGUgaXMgcmVxdWlyZWQnKS5tYXgoMjAwLCAnVGl0bGUgbXVzdCBub3QgZXhjZWVkIDIwMCBjaGFyYWN0ZXJzJyksXG4gIGRlc2NyaXB0aW9uOiB6XG4gICAgLnN0cmluZygpXG4gICAgLm1pbigxMCwgJ0Rlc2NyaXB0aW9uIG11c3QgYmUgYXQgbGVhc3QgMTAgY2hhcmFjdGVycycpXG4gICAgLm1heCgyMDAwLCAnRGVzY3JpcHRpb24gbXVzdCBub3QgZXhjZWVkIDIwMDAgY2hhcmFjdGVycycpLFxuICBjYXRlZ29yeTogei5lbnVtKFtcbiAgICAndWlfdXgnLFxuICAgICdmdW5jdGlvbmFsaXR5JyxcbiAgICAncGVyZm9ybWFuY2UnLFxuICAgICdkYXRhJyxcbiAgICAnc2VjdXJpdHknLFxuICAgICdpbnRlZ3JhdGlvbicsXG4gICAgJ290aGVyJyxcbiAgXSksXG4gIHBhZ2U6IHouc3RyaW5nKCkubWluKDEsICdQYWdlIGlzIHJlcXVpcmVkJyksXG4gIHByaW9yaXR5OiB6LmVudW0oWydsb3cnLCAnbWVkaXVtJywgJ2hpZ2gnLCAnY3JpdGljYWwnXSkuZGVmYXVsdCgnbWVkaXVtJyksXG4gIHJlcHJvZHVjdGlvblN0ZXBzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGVudmlyb25tZW50OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IGluc2VydEZlYXR1cmVSZXF1ZXN0U2NoZW1hID0gei5vYmplY3Qoe1xuICBjcmVhdGVkQnk6IHouc3RyaW5nKCkudXVpZCgpLFxuICB0aXRsZTogei5zdHJpbmcoKS5taW4oMSwgJ1RpdGxlIGlzIHJlcXVpcmVkJykubWF4KDIwMCwgJ1RpdGxlIG11c3Qgbm90IGV4Y2VlZCAyMDAgY2hhcmFjdGVycycpLFxuICBkZXNjcmlwdGlvbjogelxuICAgIC5zdHJpbmcoKVxuICAgIC5taW4oMTAsICdEZXNjcmlwdGlvbiBtdXN0IGJlIGF0IGxlYXN0IDEwIGNoYXJhY3RlcnMnKVxuICAgIC5tYXgoMjAwMCwgJ0Rlc2NyaXB0aW9uIG11c3Qgbm90IGV4Y2VlZCAyMDAwIGNoYXJhY3RlcnMnKSxcbiAgbmVlZDogelxuICAgIC5zdHJpbmcoKVxuICAgIC5taW4oNSwgJ05lZWQgbXVzdCBiZSBhdCBsZWFzdCA1IGNoYXJhY3RlcnMnKVxuICAgIC5tYXgoNTAwLCAnTmVlZCBtdXN0IG5vdCBleGNlZWQgNTAwIGNoYXJhY3RlcnMnKSxcbiAgY2F0ZWdvcnk6IHouZW51bShbXG4gICAgJ2Rhc2hib2FyZCcsXG4gICAgJ3Byb3BlcnR5X21hbmFnZW1lbnQnLFxuICAgICdyZXNpZGVudF9tYW5hZ2VtZW50JyxcbiAgICAnZmluYW5jaWFsX21hbmFnZW1lbnQnLFxuICAgICdtYWludGVuYW5jZScsXG4gICAgJ2RvY3VtZW50X21hbmFnZW1lbnQnLFxuICAgICdjb21tdW5pY2F0aW9uJyxcbiAgICAncmVwb3J0cycsXG4gICAgJ21vYmlsZV9hcHAnLFxuICAgICdpbnRlZ3JhdGlvbnMnLFxuICAgICdzZWN1cml0eScsXG4gICAgJ3BlcmZvcm1hbmNlJyxcbiAgICAnb3RoZXInLFxuICBdKSxcbiAgcGFnZTogei5zdHJpbmcoKS5taW4oMSwgJ1BhZ2UgaXMgcmVxdWlyZWQnKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgaW5zZXJ0RmVhdHVyZVJlcXVlc3RVcHZvdGVTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGZlYXR1cmVSZXF1ZXN0SWQ6IHouc3RyaW5nKCkudXVpZCgpLFxuICB1c2VySWQ6IHouc3RyaW5nKCkudXVpZCgpLFxufSk7XG5cbi8vIFR5cGVzXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEluc2VydE1haW50ZW5hbmNlUmVxdWVzdCA9IHouaW5mZXI8dHlwZW9mIGluc2VydE1haW50ZW5hbmNlUmVxdWVzdFNjaGVtYT47XG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIE1haW50ZW5hbmNlUmVxdWVzdCA9IHR5cGVvZiBtYWludGVuYW5jZVJlcXVlc3RzLiRpbmZlclNlbGVjdDtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBJbnNlcnROb3RpZmljYXRpb24gPSB6LmluZmVyPHR5cGVvZiBpbnNlcnROb3RpZmljYXRpb25TY2hlbWE+O1xuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBOb3RpZmljYXRpb24gPSB0eXBlb2Ygbm90aWZpY2F0aW9ucy4kaW5mZXJTZWxlY3Q7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgSW5zZXJ0RGVtYW5kID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0RGVtYW5kU2NoZW1hPjtcbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgRGVtYW5kID0gdHlwZW9mIGRlbWFuZHMuJGluZmVyU2VsZWN0O1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEluc2VydERlbWFuZENvbW1lbnQgPSB6LmluZmVyPHR5cGVvZiBpbnNlcnREZW1hbmRDb21tZW50U2NoZW1hPjtcbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgRGVtYW5kQ29tbWVudCA9IHR5cGVvZiBkZW1hbmRDb21tZW50cy4kaW5mZXJTZWxlY3Q7XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgSW5zZXJ0QnVnID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0QnVnU2NoZW1hPjtcbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgQnVnID0gdHlwZW9mIGJ1Z3MuJGluZmVyU2VsZWN0O1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEluc2VydEZlYXR1cmVSZXF1ZXN0ID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0RmVhdHVyZVJlcXVlc3RTY2hlbWE+O1xuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBGZWF0dXJlUmVxdWVzdCA9IHR5cGVvZiBmZWF0dXJlUmVxdWVzdHMuJGluZmVyU2VsZWN0O1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEluc2VydEZlYXR1cmVSZXF1ZXN0VXB2b3RlID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0RmVhdHVyZVJlcXVlc3RVcHZvdGVTY2hlbWE+O1xuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBGZWF0dXJlUmVxdWVzdFVwdm90ZSA9IHR5cGVvZiBmZWF0dXJlUmVxdWVzdFVwdm90ZXMuJGluZmVyU2VsZWN0O1xuXG4vLyBSZWxhdGlvbnNcbi8vIFJlbGF0aW9ucyAtIHRlbXBvcmFyaWx5IGNvbW1lbnRlZCBvdXQgZHVlIHRvIGRyaXp6bGUtb3JtIHZlcnNpb24gY29tcGF0aWJpbGl0eVxuLy8gZXhwb3J0IGNvbnN0IG1haW50ZW5hbmNlUmVxdWVzdHNSZWxhdGlvbnMgPSByZWxhdGlvbnMobWFpbnRlbmFuY2VSZXF1ZXN0cywgKHsgb25lIH0pID0+ICh7XG4vLyAgIHJlc2lkZW5jZTogb25lKHJlc2lkZW5jZXMsIHtcbi8vICAgICBmaWVsZHM6IFttYWludGVuYW5jZVJlcXVlc3RzLnJlc2lkZW5jZUlkXSxcbi8vICAgICByZWZlcmVuY2VzOiBbcmVzaWRlbmNlcy5pZF0sXG4vLyAgIH0pLFxuLy8gICBzdWJtaXR0ZWRCeTogb25lKHVzZXJzLCB7XG4vLyAgICAgZmllbGRzOiBbbWFpbnRlbmFuY2VSZXF1ZXN0cy5zdWJtaXR0ZWRCeV0sXG4vLyAgICAgcmVmZXJlbmNlczogW3VzZXJzLmlkXSxcbi8vICAgICByZWxhdGlvbk5hbWU6ICdzdWJtaXR0ZWRCeScsXG4vLyAgIH0pLFxuLy8gICBhc3NpZ25lZFRvOiBvbmUodXNlcnMsIHtcbi8vICAgICBmaWVsZHM6IFttYWludGVuYW5jZVJlcXVlc3RzLmFzc2lnbmVkVG9dLFxuLy8gICAgIHJlZmVyZW5jZXM6IFt1c2Vycy5pZF0sXG4vLyAgICAgcmVsYXRpb25OYW1lOiAnYXNzaWduZWRUbycsXG4vLyAgIH0pLFxuLy8gfSkpO1xuXG4vLyBleHBvcnQgY29uc3Qgbm90aWZpY2F0aW9uc1JlbGF0aW9ucyA9IHJlbGF0aW9ucyhub3RpZmljYXRpb25zLCAoeyBvbmUgfSkgPT4gKHtcbi8vICAgdXNlcjogb25lKHVzZXJzLCB7XG4vLyAgICAgZmllbGRzOiBbbm90aWZpY2F0aW9ucy51c2VySWRdLFxuLy8gICAgIHJlZmVyZW5jZXM6IFt1c2Vycy5pZF0sXG4vLyAgIH0pLFxuLy8gfSkpO1xuXG4vLyBleHBvcnQgY29uc3QgZGVtYW5kc1JlbGF0aW9ucyA9IHJlbGF0aW9ucyhkZW1hbmRzLCAoeyBvbmUsIG1hbnkgfSkgPT4gKHtcbi8vICAgc3VibWl0dGVyOiBvbmUodXNlcnMsIHtcbi8vICAgICBmaWVsZHM6IFtkZW1hbmRzLnN1Ym1pdHRlcklkXSxcbi8vICAgICByZWZlcmVuY2VzOiBbdXNlcnMuaWRdLFxuLy8gICAgIHJlbGF0aW9uTmFtZTogJ3N1Ym1pdHRlcicsXG4vLyAgIH0pLFxuLy8gICBhc3NpZ25hdGlvblJlc2lkZW5jZTogb25lKHJlc2lkZW5jZXMsIHtcbi8vICAgICBmaWVsZHM6IFtkZW1hbmRzLmFzc2lnbmF0aW9uUmVzaWRlbmNlSWRdLFxuLy8gICAgIHJlZmVyZW5jZXM6IFtyZXNpZGVuY2VzLmlkXSxcbi8vICAgICByZWxhdGlvbk5hbWU6ICdhc3NpZ25hdGlvblJlc2lkZW5jZScsXG4vLyAgIH0pLFxuLy8gICBhc3NpZ25hdGlvbkJ1aWxkaW5nOiBvbmUoYnVpbGRpbmdzLCB7XG4vLyAgICAgZmllbGRzOiBbZGVtYW5kcy5hc3NpZ25hdGlvbkJ1aWxkaW5nSWRdLFxuLy8gICAgIHJlZmVyZW5jZXM6IFtidWlsZGluZ3MuaWRdLFxuLy8gICAgIHJlbGF0aW9uTmFtZTogJ2Fzc2lnbmF0aW9uQnVpbGRpbmcnLFxuLy8gICB9KSxcbi8vICAgcmVzaWRlbmNlOiBvbmUocmVzaWRlbmNlcywge1xuLy8gICAgIGZpZWxkczogW2RlbWFuZHMucmVzaWRlbmNlSWRdLFxuLy8gICAgIHJlZmVyZW5jZXM6IFtyZXNpZGVuY2VzLmlkXSxcbi8vICAgICByZWxhdGlvbk5hbWU6ICdyZXNpZGVuY2UnLFxuLy8gICB9KSxcbi8vICAgYnVpbGRpbmc6IG9uZShidWlsZGluZ3MsIHtcbi8vICAgICBmaWVsZHM6IFtkZW1hbmRzLmJ1aWxkaW5nSWRdLFxuLy8gICAgIHJlZmVyZW5jZXM6IFtidWlsZGluZ3MuaWRdLFxuLy8gICAgIHJlbGF0aW9uTmFtZTogJ2J1aWxkaW5nJyxcbi8vICAgfSksXG4vLyAgIHJldmlld2VkQnk6IG9uZSh1c2Vycywge1xuLy8gICAgIGZpZWxkczogW2RlbWFuZHMucmV2aWV3ZWRCeV0sXG4vLyAgICAgcmVmZXJlbmNlczogW3VzZXJzLmlkXSxcbi8vICAgICByZWxhdGlvbk5hbWU6ICdyZXZpZXdlZEJ5Jyxcbi8vICAgfSksXG4vLyAgIGNvbW1lbnRzOiBtYW55KGRlbWFuZENvbW1lbnRzKSxcbi8vIH0pKTtcblxuLy8gZXhwb3J0IGNvbnN0IGRlbWFuZENvbW1lbnRzUmVsYXRpb25zID0gcmVsYXRpb25zKGRlbWFuZENvbW1lbnRzLCAoeyBvbmUgfSkgPT4gKHtcbi8vICAgZGVtYW5kOiBvbmUoZGVtYW5kcywge1xuLy8gICAgIGZpZWxkczogW2RlbWFuZENvbW1lbnRzLmRlbWFuZElkXSxcbi8vICAgICByZWZlcmVuY2VzOiBbZGVtYW5kcy5pZF0sXG4vLyAgIH0pLFxuLy8gICBjcmVhdGVkQnk6IG9uZSh1c2Vycywge1xuLy8gICAgIGZpZWxkczogW2RlbWFuZENvbW1lbnRzLmNyZWF0ZWRCeV0sXG4vLyAgICAgcmVmZXJlbmNlczogW3VzZXJzLmlkXSxcbi8vICAgfSksXG4vLyB9KSk7XG4iXSwidmVyc2lvbiI6M30=