f05a8318458a90367098f29894144e21
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNavMonths = getNavMonths;
/**
 * Returns the start and end months for calendar navigation.
 *
 * @param props The DayPicker props, including navigation and layout options.
 * @param dateLib The date library to use for date manipulation.
 * @returns A tuple containing the start and end months for navigation.
 */
function getNavMonths(props, dateLib) {
    let { startMonth, endMonth } = props;
    const { startOfYear, startOfDay, startOfMonth, endOfMonth, addYears, endOfYear, newDate, today, } = dateLib;
    // Handle deprecated code
    const { fromYear, toYear, fromMonth, toMonth } = props;
    if (!startMonth && fromMonth) {
        startMonth = fromMonth;
    }
    if (!startMonth && fromYear) {
        startMonth = dateLib.newDate(fromYear, 0, 1);
    }
    if (!endMonth && toMonth) {
        endMonth = toMonth;
    }
    if (!endMonth && toYear) {
        endMonth = newDate(toYear, 11, 31);
    }
    const hasYearDropdown = props.captionLayout === "dropdown" ||
        props.captionLayout === "dropdown-years";
    if (startMonth) {
        startMonth = startOfMonth(startMonth);
    }
    else if (fromYear) {
        startMonth = newDate(fromYear, 0, 1);
    }
    else if (!startMonth && hasYearDropdown) {
        startMonth = startOfYear(addYears(props.today ?? today(), -100));
    }
    if (endMonth) {
        endMonth = endOfMonth(endMonth);
    }
    else if (toYear) {
        endMonth = newDate(toYear, 11, 31);
    }
    else if (!endMonth && hasYearDropdown) {
        endMonth = endOfYear(props.today ?? today());
    }
    return [
        startMonth ? startOfDay(startMonth) : startMonth,
        endMonth ? startOfDay(endMonth) : endMonth,
    ];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE5hdk1vbnRoLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBQ3BDOzs7Ozs7R0FNRztBQUNILFNBQVMsWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPO0lBQ2hDLElBQUksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3JDLE1BQU0sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsS0FBSyxHQUFHLEdBQUcsT0FBTyxDQUFDO0lBQzVHLHlCQUF5QjtJQUN6QixNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3ZELElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFLENBQUM7UUFDM0IsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUMzQixDQUFDO0lBQ0QsSUFBSSxDQUFDLFVBQVUsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUMxQixVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDRCxJQUFJLENBQUMsUUFBUSxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3ZCLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDdkIsQ0FBQztJQUNELElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxFQUFFLENBQUM7UUFDdEIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsYUFBYSxLQUFLLFVBQVU7UUFDdEQsS0FBSyxDQUFDLGFBQWEsS0FBSyxnQkFBZ0IsQ0FBQztJQUM3QyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ2IsVUFBVSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUMxQyxDQUFDO1NBQ0ksSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNoQixVQUFVLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekMsQ0FBQztTQUNJLElBQUksQ0FBQyxVQUFVLElBQUksZUFBZSxFQUFFLENBQUM7UUFDdEMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUNELElBQUksUUFBUSxFQUFFLENBQUM7UUFDWCxRQUFRLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7U0FDSSxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQ2QsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7U0FDSSxJQUFJLENBQUMsUUFBUSxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3BDLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDRCxPQUFPO1FBQ0gsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVU7UUFDaEQsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7S0FDN0MsQ0FBQztBQUNOLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE5hdk1vbnRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXROYXZNb250aHMgPSBnZXROYXZNb250aHM7XG4vKipcbiAqIFJldHVybnMgdGhlIHN0YXJ0IGFuZCBlbmQgbW9udGhzIGZvciBjYWxlbmRhciBuYXZpZ2F0aW9uLlxuICpcbiAqIEBwYXJhbSBwcm9wcyBUaGUgRGF5UGlja2VyIHByb3BzLCBpbmNsdWRpbmcgbmF2aWdhdGlvbiBhbmQgbGF5b3V0IG9wdGlvbnMuXG4gKiBAcGFyYW0gZGF0ZUxpYiBUaGUgZGF0ZSBsaWJyYXJ5IHRvIHVzZSBmb3IgZGF0ZSBtYW5pcHVsYXRpb24uXG4gKiBAcmV0dXJucyBBIHR1cGxlIGNvbnRhaW5pbmcgdGhlIHN0YXJ0IGFuZCBlbmQgbW9udGhzIGZvciBuYXZpZ2F0aW9uLlxuICovXG5mdW5jdGlvbiBnZXROYXZNb250aHMocHJvcHMsIGRhdGVMaWIpIHtcbiAgICBsZXQgeyBzdGFydE1vbnRoLCBlbmRNb250aCB9ID0gcHJvcHM7XG4gICAgY29uc3QgeyBzdGFydE9mWWVhciwgc3RhcnRPZkRheSwgc3RhcnRPZk1vbnRoLCBlbmRPZk1vbnRoLCBhZGRZZWFycywgZW5kT2ZZZWFyLCBuZXdEYXRlLCB0b2RheSwgfSA9IGRhdGVMaWI7XG4gICAgLy8gSGFuZGxlIGRlcHJlY2F0ZWQgY29kZVxuICAgIGNvbnN0IHsgZnJvbVllYXIsIHRvWWVhciwgZnJvbU1vbnRoLCB0b01vbnRoIH0gPSBwcm9wcztcbiAgICBpZiAoIXN0YXJ0TW9udGggJiYgZnJvbU1vbnRoKSB7XG4gICAgICAgIHN0YXJ0TW9udGggPSBmcm9tTW9udGg7XG4gICAgfVxuICAgIGlmICghc3RhcnRNb250aCAmJiBmcm9tWWVhcikge1xuICAgICAgICBzdGFydE1vbnRoID0gZGF0ZUxpYi5uZXdEYXRlKGZyb21ZZWFyLCAwLCAxKTtcbiAgICB9XG4gICAgaWYgKCFlbmRNb250aCAmJiB0b01vbnRoKSB7XG4gICAgICAgIGVuZE1vbnRoID0gdG9Nb250aDtcbiAgICB9XG4gICAgaWYgKCFlbmRNb250aCAmJiB0b1llYXIpIHtcbiAgICAgICAgZW5kTW9udGggPSBuZXdEYXRlKHRvWWVhciwgMTEsIDMxKTtcbiAgICB9XG4gICAgY29uc3QgaGFzWWVhckRyb3Bkb3duID0gcHJvcHMuY2FwdGlvbkxheW91dCA9PT0gXCJkcm9wZG93blwiIHx8XG4gICAgICAgIHByb3BzLmNhcHRpb25MYXlvdXQgPT09IFwiZHJvcGRvd24teWVhcnNcIjtcbiAgICBpZiAoc3RhcnRNb250aCkge1xuICAgICAgICBzdGFydE1vbnRoID0gc3RhcnRPZk1vbnRoKHN0YXJ0TW9udGgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChmcm9tWWVhcikge1xuICAgICAgICBzdGFydE1vbnRoID0gbmV3RGF0ZShmcm9tWWVhciwgMCwgMSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFzdGFydE1vbnRoICYmIGhhc1llYXJEcm9wZG93bikge1xuICAgICAgICBzdGFydE1vbnRoID0gc3RhcnRPZlllYXIoYWRkWWVhcnMocHJvcHMudG9kYXkgPz8gdG9kYXkoKSwgLTEwMCkpO1xuICAgIH1cbiAgICBpZiAoZW5kTW9udGgpIHtcbiAgICAgICAgZW5kTW9udGggPSBlbmRPZk1vbnRoKGVuZE1vbnRoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9ZZWFyKSB7XG4gICAgICAgIGVuZE1vbnRoID0gbmV3RGF0ZSh0b1llYXIsIDExLCAzMSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFlbmRNb250aCAmJiBoYXNZZWFyRHJvcGRvd24pIHtcbiAgICAgICAgZW5kTW9udGggPSBlbmRPZlllYXIocHJvcHMudG9kYXkgPz8gdG9kYXkoKSk7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgIHN0YXJ0TW9udGggPyBzdGFydE9mRGF5KHN0YXJ0TW9udGgpIDogc3RhcnRNb250aCxcbiAgICAgICAgZW5kTW9udGggPyBzdGFydE9mRGF5KGVuZE1vbnRoKSA6IGVuZE1vbnRoLFxuICAgIF07XG59XG4iXSwidmVyc2lvbiI6M30=