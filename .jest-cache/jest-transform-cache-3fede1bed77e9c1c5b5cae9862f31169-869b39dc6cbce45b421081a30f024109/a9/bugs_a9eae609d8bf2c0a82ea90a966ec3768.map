{"file":"/home/runner/workspace/server/api/bugs.ts","mappings":";;;;;AAkCA,8CAoRC;AArTD,wCAAqC;AACrC,2CAA2E;AAC3E,6BAAwB;AACxB,kCAAsC;AACtC,oDAA4B;AAC5B,gDAAwB;AACxB,4CAAoB;AACpB,+BAAoC;AAEpC,oCAAoC;AACpC,MAAM,cAAc,GAAG,gBAAM,CAAC,WAAW,CAAC;IACxC,WAAW,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;QAC7B,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QACjE,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YAC9B,YAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/C,CAAC;QACD,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACtB,CAAC;IACD,QAAQ,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;QAC1B,MAAM,QAAQ,GAAG,IAAA,SAAM,GAAE,CAAC;QAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,GAAG,QAAQ,IAAI,YAAY,EAAE,CAAC;QAC/C,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACrB,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,MAAM,GAAG,IAAA,gBAAM,EAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;AAEnD;;;;GAIG;AACH,SAAgB,iBAAiB,CAAC,GAAY;IAC5C;;OAEG;IACH,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;QACxD,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAClD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,6BAA6B,WAAW,CAAC,EAAE,cAAc,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;YAEzF,MAAM,IAAI,GAAG,MAAM,iBAAO,CAAC,cAAc,CACvC,WAAW,CAAC,EAAE,EACd,WAAW,CAAC,IAAI,EAChB,WAAW,CAAC,cAAc,CAC3B,CAAC;YAEF,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,MAAM,kBAAkB,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YACtE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,sBAAsB;aAChC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;QAC5D,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAElD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,aAAa;oBACpB,OAAO,EAAE,oBAAoB;iBAC9B,CAAC,CAAC;YACL,CAAC;YAED,MAAM,GAAG,GAAG,MAAM,iBAAO,CAAC,MAAM,CAC9B,EAAE,EACF,WAAW,CAAC,EAAE,EACd,WAAW,CAAC,IAAI,EAChB,WAAW,CAAC,cAAc,CAC3B,CAAC;YAEF,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,gCAAgC;iBAC1C,CAAC,CAAC;YACL,CAAC;YAED,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,qBAAqB;aAC/B,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,kBAAW,EAAE,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;QAC1F,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAClD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,4BAA4B;YAC5B,MAAM,UAAU,GAAG,wBAAe,CAAC,SAAS,CAAC;gBAC3C,GAAG,GAAG,CAAC,IAAI;gBACX,SAAS,EAAE,WAAW,CAAC,EAAE;aAC1B,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,mBAAmB;oBAC1B,OAAO,EAAE,kBAAkB;oBAC3B,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC;YAChC,MAAM,GAAG,GAAG,MAAM,iBAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAE7C,qCAAqC;YACrC,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,CAAC,KAAK,CAAC,MAAM,wBAAwB,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;gBAE/E,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;oBAC7B,6CAA6C;oBAC7C,MAAM,YAAY,GAAG;wBACnB,IAAI,EAAE,IAAI,CAAC,YAAY;wBACvB,WAAW,EAAE,uBAAuB,GAAG,CAAC,KAAK,EAAE;wBAC/C,YAAY,EAAE,YAAY;wBAC1B,QAAQ,EAAE,WAAW,IAAI,CAAC,QAAQ,EAAE;wBACpC,QAAQ,EAAE,IAAI,CAAC,YAAY;wBAC3B,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;wBAC9B,cAAc,EAAE,KAAc;wBAC9B,YAAY,EAAE,GAAG,CAAC,EAAE;wBACpB,YAAY,EAAE,WAAW,CAAC,EAAE;qBAC7B,CAAC;oBAGF,MAAM,iBAAO,CAAC,cAAc,CAAC;wBAC3B,GAAG,YAAY;wBACf,kBAAkB,EAAE,KAAK;qBAC1B,CAAC,CAAC;oBACH,OAAO,CAAC,GAAG,CAAC,0CAA0C,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;gBACxF,CAAC;YACH,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,CAAC,EAAE,YAAY,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YACtE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,sBAAsB;aAChC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;;OAGG;IACH,GAAG,CAAC,KAAK,CAAC,eAAe,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;QAC9D,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAElD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,aAAa;oBACpB,OAAO,EAAE,oBAAoB;iBAC9B,CAAC,CAAC;YACL,CAAC;YAED,4BAA4B;YAC5B,MAAM,YAAY,GAAG,OAAC,CAAC,MAAM,CAAC;gBAC5B,KAAK,EAAE,OAAC;qBACL,MAAM,EAAE;qBACR,GAAG,CAAC,CAAC,EAAE,mBAAmB,CAAC;qBAC3B,GAAG,CAAC,GAAG,EAAE,sCAAsC,CAAC;qBAChD,QAAQ,EAAE;gBACb,WAAW,EAAE,OAAC;qBACX,MAAM,EAAE;qBACR,GAAG,CAAC,EAAE,EAAE,4CAA4C,CAAC;qBACrD,GAAG,CAAC,IAAI,EAAE,6CAA6C,CAAC;qBACxD,QAAQ,EAAE;gBACb,QAAQ,EAAE,OAAC;qBACR,IAAI,CAAC;oBACJ,OAAO;oBACP,eAAe;oBACf,aAAa;oBACb,MAAM;oBACN,UAAU;oBACV,aAAa;oBACb,OAAO;iBACR,CAAC;qBACD,QAAQ,EAAE;gBACb,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC,QAAQ,EAAE;gBACtD,QAAQ,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,QAAQ,EAAE;gBAClE,iBAAiB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBACxC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBAClC,MAAM,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,cAAc,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE;gBACvF,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;gBACnD,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBAC5B,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;gBACnD,UAAU,EAAE,OAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;aAC3C,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACpD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;gBACxB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,mBAAmB;oBAC1B,OAAO,EAAE,qBAAqB;oBAC9B,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,MAAM;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC;YAChC,MAAM,GAAG,GAAG,MAAM,iBAAO,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;YAEnF,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,gCAAgC;iBAC1C,CAAC,CAAC;YACL,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,YAAY,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9D,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,sBAAsB;aAChC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;;OAGG;IACH,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAG,EAAE,EAAE;QAC/D,IAAI,CAAC;YACH,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAElD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,IAAI,CAAC,EAAE,EAAE,CAAC;gBACR,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,aAAa;oBACpB,OAAO,EAAE,oBAAoB;iBAC9B,CAAC,CAAC;YACL,CAAC;YAED,MAAM,OAAO,GAAG,MAAM,iBAAO,CAAC,SAAS,CAAC,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;YAE9E,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,gCAAgC;iBAC1C,CAAC,CAAC;YACL,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,YAAY,WAAW,CAAC,EAAE,EAAE,CAAC,CAAC;YAC/D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;YAC9C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,KAAK,EAAE,uBAAuB;gBAC9B,OAAO,EAAE,sBAAsB;aAChC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC","names":[],"sources":["/home/runner/workspace/server/api/bugs.ts"],"sourcesContent":["import type { Express } from 'express';\nimport { storage } from '../storage';\nimport { insertBugSchema, type Bug, type InsertBug } from '@shared/schema';\nimport { z } from 'zod';\nimport { requireAuth } from '../auth';\nimport multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Configure multer for file uploads\nconst storage_config = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = path.join(process.cwd(), 'uploads', 'general');\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueId = uuidv4();\n    const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');\n    const fileName = `${uniqueId}-${originalName}`;\n    cb(null, fileName);\n  },\n});\n\nconst upload = multer({ storage: storage_config });\n\n/**\n * Registers all bug-related API endpoints.\n *\n * @param app - Express application instance.\n */\nexport function registerBugRoutes(app: Express): void {\n  /**\n   * GET /api/bugs - Retrieves bugs based on current user's role and access.\n   */\n  app.get('/api/bugs', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      console.log(`📋 Fetching bugs for user ${currentUser.id} with role ${currentUser.role}`);\n\n      const bugs = await storage.getBugsForUser(\n        currentUser.id,\n        currentUser.role,\n        currentUser.organizationId\n      );\n\n      console.log(`✅ Found ${bugs.length} bugs for user ${currentUser.id}`);\n      res.json(bugs);\n    } catch (error: any) {\n      console.error('❌ Error fetching bugs:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch bugs',\n      });\n    }\n  });\n\n  /**\n   * GET /api/bugs/:id - Retrieves a specific bug by ID.\n   */\n  app.get('/api/bugs/:id', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Bug ID is required',\n        });\n      }\n\n      const bug = await storage.getBug(\n        id,\n        currentUser.id,\n        currentUser.role,\n        currentUser.organizationId\n      );\n\n      if (!bug) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'Bug not found or access denied',\n        });\n      }\n\n      res.json(bug);\n    } catch (error: any) {\n      console.error('❌ Error fetching bug:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch bug',\n      });\n    }\n  });\n\n  /**\n   * POST /api/bugs - Creates a new bug report with optional file attachments.\n   */\n  app.post('/api/bugs', requireAuth, upload.array('attachments', 10), async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Validate the request body\n      const validation = insertBugSchema.safeParse({\n        ...req.body,\n        createdBy: currentUser.id,\n      });\n\n      if (!validation.success) {\n        return res.status(400).json({\n          error: 'Validation failed',\n          message: 'Invalid bug data',\n          details: validation.error.issues,\n        });\n      }\n\n      const bugData = validation.data;\n      const bug = await storage.createBug(bugData);\n\n      // Handle file attachments if present\n      if (req.files && req.files.length > 0) {\n        console.log(`📎 Processing ${req.files.length} attachments for bug ${bug.id}`);\n\n        for (const file of req.files) {\n          // Create document record for each attachment\n          const documentData = {\n            name: file.originalname,\n            description: `Attachment for bug: ${bug.title}`,\n            documentType: 'attachment',\n            filePath: `general/${file.filename}`,\n            fileName: file.originalname,\n            fileSize: file.size.toString(),\n            attachedToType: 'bug' as const,\n            attachedToId: bug.id,\n            uploadedById: currentUser.id,\n          };\n\n\n          await storage.createDocument({\n            ...documentData,\n            isVisibleToTenants: false\n          });\n          console.log(`📄 Created attachment document for bug ${bug.id}: ${file.originalname}`);\n        }\n      }\n\n      console.log(`🐛 Created new bug ${bug.id} by user ${currentUser.id}`);\n      res.status(201).json(bug);\n    } catch (error: any) {\n      console.error('❌ Error creating bug:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to create bug',\n      });\n    }\n  });\n\n  /**\n   * PATCH /api/bugs/:id - Updates an existing bug.\n   * Users can edit their own bugs, admins and managers can edit any bug.\n   */\n  app.patch('/api/bugs/:id', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Bug ID is required',\n        });\n      }\n\n      // Validate the request body\n      const updateSchema = z.object({\n        title: z\n          .string()\n          .min(1, 'Title is required')\n          .max(200, 'Title must not exceed 200 characters')\n          .optional(),\n        description: z\n          .string()\n          .min(10, 'Description must be at least 10 characters')\n          .max(2000, 'Description must not exceed 2000 characters')\n          .optional(),\n        category: z\n          .enum([\n            'ui_ux',\n            'functionality',\n            'performance',\n            'data',\n            'security',\n            'integration',\n            'other',\n          ])\n          .optional(),\n        page: z.string().min(1, 'Page is required').optional(),\n        priority: z.enum(['low', 'medium', 'high', 'critical']).optional(),\n        reproductionSteps: z.string().optional(),\n        environment: z.string().optional(),\n        status: z.enum(['new', 'acknowledged', 'in_progress', 'resolved', 'closed']).optional(),\n        assignedTo: z.string().uuid().nullable().optional(),\n        notes: z.string().optional(),\n        resolvedBy: z.string().uuid().nullable().optional(),\n        resolvedAt: z.date().nullable().optional(),\n      });\n\n      const validation = updateSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({\n          error: 'Validation failed',\n          message: 'Invalid update data',\n          details: validation.error.issues,\n        });\n      }\n\n      const updates = validation.data;\n      const bug = await storage.updateBug(id, updates, currentUser.id, currentUser.role);\n\n      if (!bug) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'Bug not found or access denied',\n        });\n      }\n\n      console.log(`📝 Updated bug ${id} by user ${currentUser.id}`);\n      res.json(bug);\n    } catch (error: any) {\n      console.error('❌ Error updating bug:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update bug',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/bugs/:id - Deletes a bug.\n   * Only admins can delete bugs.\n   */\n  app.delete('/api/bugs/:id', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Bug ID is required',\n        });\n      }\n\n      const deleted = await storage.deleteBug(id, currentUser.id, currentUser.role);\n\n      if (!deleted) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'Bug not found or access denied',\n        });\n      }\n\n      console.log(`🗑️ Deleted bug ${id} by user ${currentUser.id}`);\n      res.status(204).send();\n    } catch (error: any) {\n      console.error('❌ Error deleting bug:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to delete bug',\n      });\n    }\n  });\n}\n"],"version":3}