3afe9e74ec6c03dd0ba1060731f54939
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerBugRoutes = registerBugRoutes;
const storage_1 = require("../storage");
const schema_1 = require("@shared/schema");
const zod_1 = require("zod");
const auth_1 = require("../auth");
const multer_1 = __importDefault(require("multer"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const uuid_1 = require("uuid");
// Configure multer for file uploads
const storage_config = multer_1.default.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path_1.default.join(process.cwd(), 'uploads', 'general');
        if (!fs_1.default.existsSync(uploadDir)) {
            fs_1.default.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueId = (0, uuid_1.v4)();
        const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');
        const fileName = `${uniqueId}-${originalName}`;
        cb(null, fileName);
    },
});
const upload = (0, multer_1.default)({ storage: storage_config });
/**
 * Registers all bug-related API endpoints.
 *
 * @param app - Express application instance.
 */
function registerBugRoutes(app) {
    /**
     * GET /api/bugs - Retrieves bugs based on current user's role and access.
     */
    app.get('/api/bugs', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            console.log(`📋 Fetching bugs for user ${currentUser.id} with role ${currentUser.role}`);
            const bugs = await storage_1.storage.getBugsForUser(currentUser.id, currentUser.role, currentUser.organizationId);
            console.log(`✅ Found ${bugs.length} bugs for user ${currentUser.id}`);
            res.json(bugs);
        }
        catch (error) {
            console.error('❌ Error fetching bugs:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch bugs',
            });
        }
    });
    /**
     * GET /api/bugs/:id - Retrieves a specific bug by ID.
     */
    app.get('/api/bugs/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: 'Bad request',
                    message: 'Bug ID is required',
                });
            }
            const bug = await storage_1.storage.getBug(id, currentUser.id, currentUser.role, currentUser.organizationId);
            if (!bug) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'Bug not found or access denied',
                });
            }
            res.json(bug);
        }
        catch (error) {
            console.error('❌ Error fetching bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch bug',
            });
        }
    });
    /**
     * POST /api/bugs - Creates a new bug report with optional file attachments.
     */
    app.post('/api/bugs', auth_1.requireAuth, upload.array('attachments', 10), async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate the request body
            const validation = schema_1.insertBugSchema.safeParse({
                ...req.body,
                createdBy: currentUser.id,
            });
            if (!validation.success) {
                return res.status(400).json({
                    error: 'Validation failed',
                    message: 'Invalid bug data',
                    details: validation.error.issues,
                });
            }
            const bugData = validation.data;
            const bug = await storage_1.storage.createBug(bugData);
            // Handle file attachments if present
            if (req.files && req.files.length > 0) {
                console.log(`📎 Processing ${req.files.length} attachments for bug ${bug.id}`);
                for (const file of req.files) {
                    // Create document record for each attachment
                    const documentData = {
                        name: file.originalname,
                        description: `Attachment for bug: ${bug.title}`,
                        documentType: 'attachment',
                        filePath: `general/${file.filename}`,
                        fileName: file.originalname,
                        fileSize: file.size.toString(),
                        attachedToType: 'bug',
                        attachedToId: bug.id,
                        uploadedById: currentUser.id,
                    };
                    await storage_1.storage.createDocument({
                        ...documentData,
                        isVisibleToTenants: false
                    });
                    console.log(`📄 Created attachment document for bug ${bug.id}: ${file.originalname}`);
                }
            }
            console.log(`🐛 Created new bug ${bug.id} by user ${currentUser.id}`);
            res.status(201).json(bug);
        }
        catch (error) {
            console.error('❌ Error creating bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create bug',
            });
        }
    });
    /**
     * PATCH /api/bugs/:id - Updates an existing bug.
     * Users can edit their own bugs, admins and managers can edit any bug.
     */
    app.patch('/api/bugs/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: 'Bad request',
                    message: 'Bug ID is required',
                });
            }
            // Validate the request body
            const updateSchema = zod_1.z.object({
                title: zod_1.z
                    .string()
                    .min(1, 'Title is required')
                    .max(200, 'Title must not exceed 200 characters')
                    .optional(),
                description: zod_1.z
                    .string()
                    .min(10, 'Description must be at least 10 characters')
                    .max(2000, 'Description must not exceed 2000 characters')
                    .optional(),
                category: zod_1.z
                    .enum([
                    'ui_ux',
                    'functionality',
                    'performance',
                    'data',
                    'security',
                    'integration',
                    'other',
                ])
                    .optional(),
                page: zod_1.z.string().min(1, 'Page is required').optional(),
                priority: zod_1.z.enum(['low', 'medium', 'high', 'critical']).optional(),
                reproductionSteps: zod_1.z.string().optional(),
                environment: zod_1.z.string().optional(),
                status: zod_1.z.enum(['new', 'acknowledged', 'in_progress', 'resolved', 'closed']).optional(),
                assignedTo: zod_1.z.string().uuid().nullable().optional(),
                notes: zod_1.z.string().optional(),
                resolvedBy: zod_1.z.string().uuid().nullable().optional(),
                resolvedAt: zod_1.z.date().nullable().optional(),
            });
            const validation = updateSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    error: 'Validation failed',
                    message: 'Invalid update data',
                    details: validation.error.issues,
                });
            }
            const updates = validation.data;
            const bug = await storage_1.storage.updateBug(id, updates, currentUser.id, currentUser.role);
            if (!bug) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'Bug not found or access denied',
                });
            }
            console.log(`📝 Updated bug ${id} by user ${currentUser.id}`);
            res.json(bug);
        }
        catch (error) {
            console.error('❌ Error updating bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update bug',
            });
        }
    });
    /**
     * DELETE /api/bugs/:id - Deletes a bug.
     * Only admins can delete bugs.
     */
    app.delete('/api/bugs/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: 'Bad request',
                    message: 'Bug ID is required',
                });
            }
            const deleted = await storage_1.storage.deleteBug(id, currentUser.id, currentUser.role);
            if (!deleted) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'Bug not found or access denied',
                });
            }
            console.log(`🗑️ Deleted bug ${id} by user ${currentUser.id}`);
            res.status(204).send();
        }
        catch (error) {
            console.error('❌ Error deleting bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to delete bug',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,