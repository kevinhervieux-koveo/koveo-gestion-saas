f7ac3b2cf15cb1c1758cb43a5db6d003
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDateInRange = void 0;
exports.rangeIncludesDate = rangeIncludesDate;
const index_js_1 = require("../classes/index.js");
/**
 * Checks if a given date is within a specified date range.
 *
 * @since 9.0.0
 * @param range - The date range to check against.
 * @param date - The date to check.
 * @param excludeEnds - If `true`, the range's start and end dates are excluded.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the date is within the range, otherwise `false`.
 * @group Utilities
 */
function rangeIncludesDate(range, date, excludeEnds = false, dateLib = index_js_1.defaultDateLib) {
    let { from, to } = range;
    const { differenceInCalendarDays, isSameDay } = dateLib;
    if (from && to) {
        const isRangeInverted = differenceInCalendarDays(to, from) < 0;
        if (isRangeInverted) {
            [from, to] = [to, from];
        }
        const isInRange = differenceInCalendarDays(date, from) >= (excludeEnds ? 1 : 0) &&
            differenceInCalendarDays(to, date) >= (excludeEnds ? 1 : 0);
        return isInRange;
    }
    if (!excludeEnds && to) {
        return isSameDay(to, date);
    }
    if (!excludeEnds && from) {
        return isSameDay(from, date);
    }
    return false;
}
/**
 * @private
 * @deprecated Use {@link rangeIncludesDate} instead.
 */
const isDateInRange = (range, date) => rangeIncludesDate(range, date, false, index_js_1.defaultDateLib);
exports.isDateInRange = isDateInRange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy91dGlscy9yYW5nZUluY2x1ZGVzRGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQy9CLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztBQUM5QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNsRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBUyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFdBQVcsR0FBRyxLQUFLLEVBQUUsT0FBTyxHQUFHLFVBQVUsQ0FBQyxjQUFjO0lBQzVGLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLE1BQU0sRUFBRSx3QkFBd0IsRUFBRSxTQUFTLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDeEQsSUFBSSxJQUFJLElBQUksRUFBRSxFQUFFLENBQUM7UUFDYixNQUFNLGVBQWUsR0FBRyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQy9ELElBQUksZUFBZSxFQUFFLENBQUM7WUFDbEIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELE1BQU0sU0FBUyxHQUFHLHdCQUF3QixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0Usd0JBQXdCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFDRCxJQUFJLENBQUMsV0FBVyxJQUFJLEVBQUUsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sU0FBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0QsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN2QixPQUFPLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFDRDs7O0dBR0c7QUFDSCxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN4RyxPQUFPLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9yZWFjdC1kYXktcGlja2VyL2Rpc3QvY2pzL3V0aWxzL3JhbmdlSW5jbHVkZXNEYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0RhdGVJblJhbmdlID0gdm9pZCAwO1xuZXhwb3J0cy5yYW5nZUluY2x1ZGVzRGF0ZSA9IHJhbmdlSW5jbHVkZXNEYXRlO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9jbGFzc2VzL2luZGV4LmpzXCIpO1xuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBkYXRlIGlzIHdpdGhpbiBhIHNwZWNpZmllZCBkYXRlIHJhbmdlLlxuICpcbiAqIEBzaW5jZSA5LjAuMFxuICogQHBhcmFtIHJhbmdlIC0gVGhlIGRhdGUgcmFuZ2UgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdG8gY2hlY2suXG4gKiBAcGFyYW0gZXhjbHVkZUVuZHMgLSBJZiBgdHJ1ZWAsIHRoZSByYW5nZSdzIHN0YXJ0IGFuZCBlbmQgZGF0ZXMgYXJlIGV4Y2x1ZGVkLlxuICogQHBhcmFtIGRhdGVMaWIgLSBUaGUgZGF0ZSB1dGlsaXR5IGxpYnJhcnkgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGRhdGUgaXMgd2l0aGluIHRoZSByYW5nZSwgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKiBAZ3JvdXAgVXRpbGl0aWVzXG4gKi9cbmZ1bmN0aW9uIHJhbmdlSW5jbHVkZXNEYXRlKHJhbmdlLCBkYXRlLCBleGNsdWRlRW5kcyA9IGZhbHNlLCBkYXRlTGliID0gaW5kZXhfanNfMS5kZWZhdWx0RGF0ZUxpYikge1xuICAgIGxldCB7IGZyb20sIHRvIH0gPSByYW5nZTtcbiAgICBjb25zdCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cywgaXNTYW1lRGF5IH0gPSBkYXRlTGliO1xuICAgIGlmIChmcm9tICYmIHRvKSB7XG4gICAgICAgIGNvbnN0IGlzUmFuZ2VJbnZlcnRlZCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyh0bywgZnJvbSkgPCAwO1xuICAgICAgICBpZiAoaXNSYW5nZUludmVydGVkKSB7XG4gICAgICAgICAgICBbZnJvbSwgdG9dID0gW3RvLCBmcm9tXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0luUmFuZ2UgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGF0ZSwgZnJvbSkgPj0gKGV4Y2x1ZGVFbmRzID8gMSA6IDApICYmXG4gICAgICAgICAgICBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXModG8sIGRhdGUpID49IChleGNsdWRlRW5kcyA/IDEgOiAwKTtcbiAgICAgICAgcmV0dXJuIGlzSW5SYW5nZTtcbiAgICB9XG4gICAgaWYgKCFleGNsdWRlRW5kcyAmJiB0bykge1xuICAgICAgICByZXR1cm4gaXNTYW1lRGF5KHRvLCBkYXRlKTtcbiAgICB9XG4gICAgaWYgKCFleGNsdWRlRW5kcyAmJiBmcm9tKSB7XG4gICAgICAgIHJldHVybiBpc1NhbWVEYXkoZnJvbSwgZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgcmFuZ2VJbmNsdWRlc0RhdGV9IGluc3RlYWQuXG4gKi9cbmNvbnN0IGlzRGF0ZUluUmFuZ2UgPSAocmFuZ2UsIGRhdGUpID0+IHJhbmdlSW5jbHVkZXNEYXRlKHJhbmdlLCBkYXRlLCBmYWxzZSwgaW5kZXhfanNfMS5kZWZhdWx0RGF0ZUxpYik7XG5leHBvcnRzLmlzRGF0ZUluUmFuZ2UgPSBpc0RhdGVJblJhbmdlO1xuIl0sInZlcnNpb24iOjN9