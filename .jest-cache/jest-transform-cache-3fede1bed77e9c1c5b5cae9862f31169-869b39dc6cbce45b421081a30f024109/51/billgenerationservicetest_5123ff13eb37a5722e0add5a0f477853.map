{"file":"/home/runner/workspace/tests/unit/bill-generation-service.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/bill-generation-service.test.ts"],"sourcesContent":["import {\n  describe,\n  it,\n  expect,\n  beforeEach as _beforeEach,\n  afterEach as _afterEach,\n  jest as _jest,\n  beforeAll,\n  afterAll,\n} from '@jest/globals';\nimport { billGenerationService } from '../../server/services/bill-generation-service';\nimport { db } from '../../server/db';\nimport { bills, users as _users } from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\n/**\n * Comprehensive test suite for the Bill Generation Service\n * Tests all aspects of sophisticated bill management including:\n * - Future bill instance generation\n * - Complex payment scenarios (60% now, 40% later)\n * - Multiple payment plans and installments\n * - Parent-child bill relationships\n * - 25-year projection capabilities\n * - Auto-generated bill management.\n */\n\ndescribe('BillGenerationService', () => {\n  const mockSystemUser = {\n    id: 'test-user-123',\n    email: 'system@test.com',\n    role: 'admin',\n  };\n\n  const mockBuilding = {\n    id: 'building-123',\n    organizationId: 'org-123',\n  };\n\n  beforeAll(async () => {\n    // Clean up any existing test data\n    await db.delete(bills).where(eq(bills.buildingId, mockBuilding.id));\n  });\n\n  afterAll(async () => {\n    // Clean up test data\n    await db.delete(bills).where(eq(bills.buildingId, mockBuilding.id));\n  });\n\n  describe('generateFutureBillInstances', () => {\n    it('should generate monthly recurring bill instances for 25 years', async () => {\n      const parentBill = {\n        id: 'parent-bill-1',\n        buildingId: mockBuilding.id,\n        billNumber: 'MONTHLY-2024-001',\n        title: 'Monthly Maintenance Fee',\n        description: 'Regular building maintenance',\n        category: 'maintenance',\n        vendor: 'Maintenance Corp',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        scheduleCustom: null,\n        costs: ['1200.00'],\n        totalAmount: '1200.00',\n        startDate: '2024-01-01',\n        endDate: null,\n        status: 'active',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const result = await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      // Should generate approximately 300 bills (25 years * 12 months)\n      expect(result.billsCreated).toBeGreaterThan(250);\n      expect(result.billsCreated).toBeLessThan(350);\n      expect(result.generatedUntil).toBeDefined();\n\n      // Verify bills were actually created in database\n      const generatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      expect(generatedBills.length).toBe(result.billsCreated);\n\n      // Check first generated bill properties\n      const firstBill = generatedBills[0];\n      expect(firstBill.title).toContain('Monthly Maintenance Fee');\n      expect(firstBill.paymentType).toBe('unique');\n      expect(firstBill.autoGenerated).toBe(true);\n      expect(firstBill.reference).toBe(parentBill.id);\n      expect(firstBill.billNumber).toMatch(/MONTHLY-2024-001-\\d{4}-\\d{2}/);\n    });\n\n    it('should handle complex payment scenarios - 60% now, 40% in 2 months', async () => {\n      const parentBill = {\n        id: 'parent-bill-complex',\n        buildingId: mockBuilding.id,\n        billNumber: 'COMPLEX-2024-001',\n        title: 'Annual Insurance Premium',\n        description: 'Split payment insurance',\n        category: 'insurance',\n        vendor: 'Insurance Corp',\n        paymentType: 'recurrent',\n        schedulePayment: 'yearly',\n        scheduleCustom: null,\n        costs: ['6000.00', '4000.00'], // 60% now, 40% later\n        totalAmount: '10000.00',\n        startDate: '2024-01-01',\n        endDate: '2029-01-01', // 5 years\n        status: 'active',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const result = await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      // Should generate 10 bills (5 years * 2 payments per year)\n      expect(result.billsCreated).toBe(10);\n\n      const generatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)))\n        .orderBy(bills.startDate);\n\n      // Verify payment amounts and timing\n      expect(parseFloat(generatedBills[0].totalAmount)).toBe(6000); // First payment 60%\n      expect(parseFloat(generatedBills[1].totalAmount)).toBe(4000); // Second payment 40%\n\n      // Verify payment dates are 1 month apart\n      const firstDate = new Date(generatedBills[0].startDate);\n      const secondDate = new Date(generatedBills[1].startDate);\n      const monthsDiff =\n        (secondDate.getFullYear() - firstDate.getFullYear()) * 12 +\n        (secondDate.getMonth() - firstDate.getMonth());\n      expect(monthsDiff).toBe(1);\n\n      // Verify bill titles indicate payment parts\n      expect(generatedBills[0].title).toContain('Part 1/2');\n      expect(generatedBills[1].title).toContain('Part 2/2');\n    });\n\n    it('should handle quarterly payments with custom dates', async () => {\n      const parentBill = {\n        id: 'parent-bill-quarterly',\n        buildingId: mockBuilding.id,\n        billNumber: 'QUARTERLY-2024-001',\n        title: 'Quarterly Utilities',\n        description: 'Seasonal utility payments',\n        category: 'utilities',\n        vendor: 'Utility Corp',\n        paymentType: 'recurrent',\n        schedulePayment: 'custom',\n        scheduleCustom: ['2024-03-15', '2024-06-15', '2024-09-15', '2024-12-15'],\n        costs: ['800.00'],\n        totalAmount: '800.00',\n        startDate: '2024-01-01',\n        endDate: '2026-12-31', // 3 years\n        status: 'active',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const result = await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      // Should generate 12 bills (3 years * 4 quarters)\n      expect(result.billsCreated).toBe(12);\n\n      const generatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)))\n        .orderBy(bills.startDate);\n\n      // Verify custom dates are respected\n      expect(generatedBills[0].startDate).toBe('2024-03-15');\n      expect(generatedBills[1].startDate).toBe('2024-06-15');\n      expect(generatedBills[2].startDate).toBe('2024-09-15');\n      expect(generatedBills[3].startDate).toBe('2024-12-15');\n    });\n\n    it('should handle weekly recurring payments', async () => {\n      const parentBill = {\n        id: 'parent-bill-weekly',\n        buildingId: mockBuilding.id,\n        billNumber: 'WEEKLY-2024-001',\n        title: 'Weekly Cleaning Service',\n        description: 'Regular cleaning',\n        category: 'cleaning',\n        vendor: 'Clean Corp',\n        paymentType: 'recurrent',\n        schedulePayment: 'weekly',\n        scheduleCustom: null,\n        costs: ['150.00'],\n        totalAmount: '150.00',\n        startDate: '2024-01-01',\n        endDate: '2024-03-31', // 3 months to limit test data\n        status: 'active',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const result = await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      // Should generate approximately 13 bills (3 months * 4.33 weeks per month)\n      expect(result.billsCreated).toBeGreaterThan(10);\n      expect(result.billsCreated).toBeLessThan(16);\n\n      const generatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)))\n        .orderBy(bills.startDate);\n\n      // Verify weekly intervals\n      const firstDate = new Date(generatedBills[0].startDate);\n      const secondDate = new Date(generatedBills[1].startDate);\n      const daysDiff = (secondDate.getTime() - firstDate.getTime()) / (1000 * 60 * 60 * 24);\n      expect(daysDiff).toBe(7);\n    });\n\n    it('should reject non-recurrent bills', async () => {\n      const uniqueBill = {\n        id: 'unique-bill-1',\n        buildingId: mockBuilding.id,\n        paymentType: 'unique',\n        schedulePayment: null,\n        title: 'One-time bill',\n      };\n\n      await expect(\n        billGenerationService.generateFutureBillInstances(uniqueBill as any)\n      ).rejects.toThrow('Only recurrent bills can generate future instances');\n    });\n\n    it('should clean up existing generated bills before creating new ones', async () => {\n      const parentBill = {\n        id: 'parent-bill-cleanup',\n        buildingId: mockBuilding.id,\n        billNumber: 'CLEANUP-2024-001',\n        title: 'Test Cleanup Bill',\n        description: 'Testing cleanup',\n        category: 'maintenance',\n        vendor: 'Test Corp',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        scheduleCustom: null,\n        costs: ['500.00'],\n        totalAmount: '500.00',\n        startDate: '2024-01-01',\n        endDate: '2024-06-30', // 6 months\n        status: 'active',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Generate bills first time\n      const firstResult = await billGenerationService.generateFutureBillInstances(\n        parentBill as any\n      );\n      expect(firstResult.billsCreated).toBe(6);\n\n      // Generate again - should clean up and recreate\n      const secondResult = await billGenerationService.generateFutureBillInstances(\n        parentBill as any\n      );\n      expect(secondResult.billsCreated).toBe(6);\n\n      // Should still only have 6 bills total, not 12\n      const finalBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      expect(finalBills.length).toBe(6);\n    });\n  });\n\n  describe('updateGeneratedBillsFromParent', () => {\n    it('should update all generated bills when parent is modified', async () => {\n      const parentBill = {\n        id: 'parent-bill-update',\n        buildingId: mockBuilding.id,\n        billNumber: 'UPDATE-2024-001',\n        title: 'Original Title',\n        description: 'Original description',\n        category: 'maintenance',\n        vendor: 'Original Vendor',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        scheduleCustom: null,\n        costs: ['300.00'],\n        totalAmount: '300.00',\n        startDate: '2024-01-01',\n        endDate: '2024-04-30', // 4 months\n        status: 'active',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Generate initial bills\n      await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      // Update parent bill information\n      const updates = {\n        title: 'Updated Title',\n        category: 'utilities',\n        vendor: 'New Vendor Corp',\n        notes: 'Updated via cascade',\n      };\n\n      const result = await billGenerationService.updateGeneratedBillsFromParent(\n        parentBill.id,\n        updates\n      );\n\n      expect(result.billsUpdated).toBe(4);\n\n      // Verify bills were updated\n      const updatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      updatedBills.forEach((bill) => {\n        expect(bill.title).toContain('Updated Title');\n        expect(bill.category).toBe('utilities');\n        expect(bill.vendor).toBe('New Vendor Corp');\n        expect(bill.notes).toContain('Updated via cascade');\n      });\n    });\n\n    it('should preserve date and part information in titles when updating', async () => {\n      const parentBill = {\n        id: 'parent-bill-title-preserve',\n        buildingId: mockBuilding.id,\n        billNumber: 'PRESERVE-2024-001',\n        title: 'Original Complex Bill',\n        category: 'utilities',\n        vendor: 'Test Vendor',\n        paymentType: 'recurrent',\n        schedulePayment: 'yearly',\n        costs: ['2000.00', '1000.00'], // Two payments\n        totalAmount: '3000.00',\n        startDate: '2024-01-01',\n        endDate: '2025-01-01',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n      };\n\n      await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      const updates = { title: 'Updated Complex Bill' };\n      await billGenerationService.updateGeneratedBillsFromParent(parentBill.id, updates);\n\n      const updatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)))\n        .orderBy(bills.startDate);\n\n      // Should preserve the date and part information\n      expect(updatedBills[0].title).toMatch(/Updated Complex Bill - .* \\(Part 1\\/2\\)/);\n      expect(updatedBills[1].title).toMatch(/Updated Complex Bill - .* \\(Part 2\\/2\\)/);\n    });\n  });\n\n  describe('markBillAsPaid', () => {\n    it('should mark a bill as paid with payment date', async () => {\n      const testBill = {\n        id: 'test-bill-paid',\n        buildingId: mockBuilding.id,\n        billNumber: 'PAID-2024-001',\n        title: 'Test Payment Bill',\n        status: 'sent',\n        totalAmount: '500.00',\n        autoGenerated: true,\n        reference: 'parent-bill-id',\n        createdBy: mockSystemUser.id,\n      };\n\n      // Insert test bill\n      await db.insert(bills).values(testBill as any);\n\n      const paymentDate = new Date('2024-02-15');\n      await billGenerationService.markBillAsPaid(testBill.id, paymentDate);\n\n      // Verify bill was marked as paid\n      const [updatedBill] = await db.select().from(bills).where(eq(bills.id, testBill.id));\n\n      expect(updatedBill.status).toBe('paid');\n      expect(updatedBill.notes).toContain('Payment confirmed on 2/15/2024');\n    });\n\n    it('should use current date when no payment date provided', async () => {\n      const testBill = {\n        id: 'test-bill-paid-auto',\n        buildingId: mockBuilding.id,\n        billNumber: 'PAID-AUTO-2024-001',\n        title: 'Auto Date Payment Bill',\n        status: 'sent',\n        totalAmount: '750.00',\n        autoGenerated: true,\n        reference: 'parent-bill-id',\n        createdBy: mockSystemUser.id,\n      };\n\n      await db.insert(bills).values(testBill as any);\n\n      await billGenerationService.markBillAsPaid(testBill.id);\n\n      const [updatedBill] = await db.select().from(bills).where(eq(bills.id, testBill.id));\n\n      expect(updatedBill.status).toBe('paid');\n      expect(updatedBill.notes).toContain('Payment confirmed on');\n    });\n  });\n\n  describe('getGeneratedBillsStats', () => {\n    it('should return comprehensive statistics for generated bills', async () => {\n      const parentBill = {\n        id: 'parent-bill-stats',\n        buildingId: mockBuilding.id,\n        billNumber: 'STATS-2024-001',\n        title: 'Statistics Test Bill',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        costs: ['400.00'],\n        totalAmount: '400.00',\n        startDate: '2024-01-01',\n        endDate: '2024-06-30', // 6 months\n        createdBy: mockSystemUser.id,\n      };\n\n      await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      // Mark some bills as paid\n      const generatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      // Mark first 2 bills as paid\n      for (let i = 0; i < 2; i++) {\n        await billGenerationService.markBillAsPaid(generatedBills[i].id);\n      }\n\n      const stats = await billGenerationService.getGeneratedBillsStats(parentBill.id);\n\n      expect(stats.totalGenerated).toBe(6);\n      expect(stats.paidBills).toBe(2);\n      expect(stats.pendingBills).toBeGreaterThan(0);\n      expect(stats.futureBills).toBeGreaterThan(0);\n      expect(stats.totalAmount).toBe(2400); // 6 bills * $400\n      expect(stats.paidAmount).toBe(800); // 2 bills * $400\n    });\n\n    it('should categorize bills by date correctly', async () => {\n      const today = new Date();\n      const pastDate = new Date(today);\n      pastDate.setMonth(pastDate.getMonth() - 1);\n      const futureDate = new Date(today);\n      futureDate.setMonth(futureDate.getMonth() + 1);\n\n      const parentBill = {\n        id: 'parent-bill-date-stats',\n        buildingId: mockBuilding.id,\n        billNumber: 'DATE-STATS-2024-001',\n        title: 'Date Statistics Test',\n        paymentType: 'recurrent',\n        schedulePayment: 'custom',\n        scheduleCustom: [\n          pastDate.toISOString().split('T')[0],\n          today.toISOString().split('T')[0],\n          futureDate.toISOString().split('T')[0],\n        ],\n        costs: ['200.00'],\n        totalAmount: '200.00',\n        startDate: pastDate.toISOString().split('T')[0],\n        endDate: futureDate.toISOString().split('T')[0],\n        createdBy: mockSystemUser.id,\n      };\n\n      await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      const stats = await billGenerationService.getGeneratedBillsStats(parentBill.id);\n\n      expect(stats.totalGenerated).toBe(3);\n      expect(stats.futureBills).toBe(1); // Only future date bill\n      expect(stats.pendingBills).toBe(2); // Past and today bills\n    });\n  });\n\n  describe('deleteGeneratedBills', () => {\n    it('should delete only unpaid bills by default', async () => {\n      const parentBill = {\n        id: 'parent-bill-delete',\n        buildingId: mockBuilding.id,\n        billNumber: 'DELETE-2024-001',\n        title: 'Delete Test Bill',\n        category: 'maintenance',\n        vendor: 'Test Vendor',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        costs: ['350.00'],\n        totalAmount: '350.00',\n        startDate: '2024-01-01',\n        endDate: '2024-05-31', // 5 months\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n      };\n\n      await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      const generatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      // Mark first bill as paid\n      await billGenerationService.markBillAsPaid(generatedBills[0].id);\n\n      const result = await billGenerationService.deleteGeneratedBills(parentBill.id, false);\n\n      // Should delete 4 unpaid bills, keep 1 paid bill\n      expect(result.billsDeleted).toBe(4);\n\n      const remainingBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      expect(remainingBills.length).toBe(1);\n      expect(remainingBills[0].status).toBe('paid');\n    });\n\n    it('should delete all future bills when deleteAllFuture is true', async () => {\n      const parentBill = {\n        id: 'parent-bill-delete-all',\n        buildingId: mockBuilding.id,\n        billNumber: 'DELETE-ALL-2024-001',\n        title: 'Delete All Test Bill',\n        category: 'maintenance',\n        vendor: 'Test Vendor',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        costs: ['250.00'],\n        totalAmount: '250.00',\n        startDate: '2024-06-01', // Future date\n        endDate: '2024-10-31', // 5 months in future\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n      };\n\n      await billGenerationService.generateFutureBillInstances(parentBill as any);\n\n      const generatedBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      // Mark first bill as paid\n      await billGenerationService.markBillAsPaid(generatedBills[0].id);\n\n      const result = await billGenerationService.deleteGeneratedBills(parentBill.id, true);\n\n      // Should delete all bills including paid ones (since they're in the future)\n      expect(result.billsDeleted).toBe(5);\n\n      const remainingBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      expect(remainingBills.length).toBe(0);\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle bills with no costs array', async () => {\n      const invalidBill = {\n        id: 'invalid-bill-1',\n        buildingId: mockBuilding.id,\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        costs: [], // Empty costs array\n        startDate: '2024-01-01',\n        endDate: '2024-03-31',\n        createdBy: mockSystemUser.id,\n      };\n\n      await expect(\n        billGenerationService.generateFutureBillInstances(invalidBill as any)\n      ).rejects.toThrow();\n    });\n\n    it('should handle very long projection periods safely', async () => {\n      const longTermBill = {\n        id: 'long-term-bill',\n        buildingId: mockBuilding.id,\n        billNumber: 'LONG-2024-001',\n        title: 'Long Term Bill',\n        paymentType: 'recurrent',\n        schedulePayment: 'weekly',\n        costs: ['50.00'],\n        totalAmount: '50.00',\n        startDate: '2024-01-01',\n        endDate: null, // No end date - should limit to 25 years\n        createdBy: mockSystemUser.id,\n      };\n\n      const result = await billGenerationService.generateFutureBillInstances(longTermBill as any);\n\n      // Should not generate more than 10,000 bills (safety limit)\n      expect(result.billsCreated).toBeLessThan(10000);\n      expect(result.billsCreated).toBeGreaterThan(1000); // But should generate many for 25 years\n    });\n\n    it('should handle invalid schedule types gracefully', async () => {\n      const invalidScheduleBill = {\n        id: 'invalid-schedule-bill',\n        buildingId: mockBuilding.id,\n        paymentType: 'recurrent',\n        schedulePayment: 'invalid-schedule',\n        costs: ['100.00'],\n        startDate: '2024-01-01',\n        endDate: '2024-12-31',\n        createdBy: mockSystemUser.id,\n      };\n\n      await expect(\n        billGenerationService.generateFutureBillInstances(invalidScheduleBill as any)\n      ).rejects.toThrow('Unknown schedule type: invalid-schedule');\n    });\n\n    it('should handle concurrent generation requests', async () => {\n      const parentBill = {\n        id: 'concurrent-bill',\n        buildingId: mockBuilding.id,\n        billNumber: 'CONCURRENT-2024-001',\n        title: 'Concurrent Test Bill',\n        category: 'utilities',\n        vendor: 'Test Vendor',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        costs: ['100.00'],\n        totalAmount: '100.00',\n        startDate: '2024-01-01',\n        endDate: '2024-06-30',\n        autoGenerated: false,\n        reference: null,\n        createdBy: mockSystemUser.id,\n      };\n\n      // Run generation concurrently\n      const [result1, result2] = await Promise.all([\n        billGenerationService.generateFutureBillInstances(parentBill as any),\n        billGenerationService.generateFutureBillInstances(parentBill as any),\n      ]);\n\n      // Both should succeed, but only one set of bills should exist\n      expect(result1.billsCreated).toBe(6);\n      expect(result2.billsCreated).toBe(6);\n\n      const finalBills = await db\n        .select()\n        .from(bills)\n        .where(and(eq(bills.reference, parentBill.id), eq(bills.autoGenerated, true)));\n\n      // Should not have duplicates\n      expect(finalBills.length).toBe(6);\n    });\n  });\n});\n"],"version":3}