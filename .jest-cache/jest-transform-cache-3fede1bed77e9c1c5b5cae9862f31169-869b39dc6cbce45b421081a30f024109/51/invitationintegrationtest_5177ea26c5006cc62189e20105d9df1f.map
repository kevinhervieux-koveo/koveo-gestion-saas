{"file":"/home/runner/workspace/tests/unit/invitation/invitation-integration.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/invitation/invitation-integration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport * as schema from '../../../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { mockDb, testUtils, mockSchema } from '../../mocks/unified-database-mock';\n\ndescribe('Invitation Table Integration Tests', () => {\n  let adminUser: any;\n  let managerUser: any;\n  let organization1: any;\n  let organization2: any;\n\n  beforeEach(async () => {\n    // Reset mock data and clear all mocks\n    testUtils.resetMocks();\n\n    // Create test organizations\n    const [org1] = await mockDb.insert(mockSchema.organizations).values({\n      name: 'Test Organization 1',\n      type: 'management_company',\n      address: '123 Test St',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n    } as any).returning() as any[];\n\n    const [org2] = await mockDb.insert(mockSchema.organizations).values({\n      name: 'Test Organization 2',\n      type: 'syndicate',\n      address: '456 Test Ave',\n      city: 'Quebec City',\n      province: 'QC',\n      postalCode: 'G1A 1A1',\n    } as any).returning() as any[];\n\n    organization1 = org1;\n    organization2 = org2;\n\n    // Create test users\n    const hashedPassword = await bcrypt.hash('password123', 10);\n    \n    const [admin] = await mockDb.insert(mockSchema.users).values({\n      username: 'admin@test.com',\n      email: 'admin@test.com',\n      password: hashedPassword,\n      firstName: 'Admin',\n      lastName: 'User',\n      role: 'admin',\n    } as any).returning() as any[];\n\n    const [manager] = await mockDb.insert(mockSchema.users).values({\n      username: 'manager@test.com',\n      email: 'manager@test.com',\n      password: hashedPassword,\n      firstName: 'Manager',\n      lastName: 'User',\n      role: 'manager',\n    } as any).returning() as any[];\n\n    adminUser = admin;\n    managerUser = manager;\n\n    // Assign manager to organization1\n    await mockDb.insert(mockSchema.userOrganizations).values({\n      userId: managerUser.id,\n      organizationId: organization1.id,\n      organizationRole: 'manager',\n      isActive: true,\n    } as any) as any;\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    await mockDb.delete(mockSchema.invitations) as any;\n    await mockDb.delete(mockSchema.userOrganizations) as any;\n    await mockDb.delete(mockSchema.users) as any;\n    await mockDb.delete(mockSchema.organizations) as any;\n  });\n\n  describe('Invitation Data Validation', () => {\n    it('should create invitations with required fields', async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      const [invitation] = await mockDb.insert(mockSchema.invitations).values({\n        email: 'test@example.com',\n        token: 'test-token',\n        tokenHash: 'test-hash',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: organization1.id,\n        invitedByUserId: adminUser.id,\n        expiresAt: expirationDate,\n      } as any).returning() as any[];\n\n      expect(invitation).toBeDefined();\n      expect(invitation.id).toBeDefined();\n      expect(invitation.email).toBe('test@example.com');\n      expect(invitation.role).toBe('tenant');\n      expect(invitation.status).toBe('pending');\n      expect(invitation.organizationId).toBe(organization1.id);\n    });\n\n    it('should handle invitations with null building and residence references', async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      const [invitation] = await mockDb.insert(mockSchema.invitations).values({\n        email: 'test@example.com',\n        token: 'test-token',\n        tokenHash: 'test-hash',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: organization1.id,\n        buildingId: null,\n        residenceId: null,\n        invitedByUserId: adminUser.id,\n        expiresAt: expirationDate,\n      } as any).returning() as any[];\n\n      expect(invitation.buildingId).toBeNull();\n      expect(invitation.residenceId).toBeNull();\n    });\n\n    it('should validate invitation roles', async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      const validRoles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];\n\n      for (const role of validRoles) {\n        const [invitation] = await mockDb.insert(mockSchema.invitations).values({\n          email: `test-${role}@example.com`,\n          token: `test-token-${role}`,\n          tokenHash: `test-hash-${role}`,\n          role: role as any,\n          status: 'pending',\n          organizationId: organization1.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: expirationDate,\n        } as any).returning() as any[];\n\n        expect(invitation.role).toBe(role);\n      }\n    });\n\n    it('should validate invitation status values', async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      const validStatuses = ['pending', 'accepted', 'expired', 'cancelled'];\n\n      for (const status of validStatuses) {\n        const [invitation] = await mockDb.insert(mockSchema.invitations).values({\n          email: `test-${status}@example.com`,\n          token: `test-token-${status}`,\n          tokenHash: `test-hash-${status}`,\n          role: 'tenant',\n          status: status as any,\n          organizationId: organization1.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: expirationDate,\n        } as any).returning() as any[];\n\n        expect(invitation.status).toBe(status);\n      }\n    });\n  });\n\n  describe('Invitation Queries and Filtering', () => {\n    beforeEach(async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      // Create test invitations\n      await mockDb.insert(mockSchema.invitations).values([\n        {\n          email: 'pending1@example.com',\n          token: 'token1',\n          tokenHash: 'hash1',\n          role: 'tenant',\n          status: 'pending',\n          organizationId: organization1.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: expirationDate,\n        },\n        {\n          email: 'pending2@example.com',\n          token: 'token2',\n          tokenHash: 'hash2',\n          role: 'resident',\n          status: 'pending',\n          organizationId: organization2.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: expirationDate,\n        },\n        {\n          email: 'accepted@example.com',\n          token: 'token3',\n          tokenHash: 'hash3',\n          role: 'tenant',\n          status: 'accepted',\n          organizationId: organization1.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: expirationDate,\n        },\n      ] as any) as any;\n    });\n\n    it('should filter pending invitations correctly', async () => {\n      const pendingInvitations = await mockDb\n        .select()\n        .from(mockSchema.invitations)\n        .where(eq(mockSchema.invitations.status, 'pending')) as any[];\n\n      expect(pendingInvitations).toHaveLength(2);\n      expect(pendingInvitations.every(inv => inv.status === 'pending')).toBe(true);\n    });\n\n    it('should join with organizations table for admin view', async () => {\n      const invitationsWithOrgs = await mockDb\n        .select({\n          id: schema.invitations.id,\n          email: schema.invitations.email,\n          role: schema.invitations.role,\n          status: schema.invitations.status,\n          organizationName: schema.organizations.name,\n        })\n        .from(schema.invitations)\n        .leftJoin(schema.organizations, eq(schema.invitations.organizationId, schema.organizations.id))\n        .where(eq(schema.invitations.status, 'pending')) as any[];\n\n      expect(invitationsWithOrgs).toHaveLength(2);\n      \n      const org1Invitation = invitationsWithOrgs.find(inv => inv.email === 'pending1@example.com');\n      const org2Invitation = invitationsWithOrgs.find(inv => inv.email === 'pending2@example.com');\n\n      expect(org1Invitation?.organizationName).toBe('Test Organization 1');\n      expect(org2Invitation?.organizationName).toBe('Test Organization 2');\n    });\n\n    it('should filter invitations by organization for manager view', async () => {\n      const managerInvitations = await mockDb\n        .select()\n        .from(mockSchema.invitations)\n        .where(\n          eq(mockSchema.invitations.organizationId, organization1.id)\n        ) as any[];\n\n      expect(managerInvitations).toHaveLength(2); // 1 pending + 1 accepted from org1\n      expect(managerInvitations.every(inv => inv.organizationId === organization1.id)).toBe(true);\n    });\n  });\n\n  describe('Invitation Deletion', () => {\n    let testInvitation: any;\n\n    beforeEach(async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      const [invitation] = await mockDb.insert(mockSchema.invitations).values({\n        email: 'delete-test@example.com',\n        token: 'delete-token',\n        tokenHash: 'delete-hash',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: organization1.id,\n        invitedByUserId: adminUser.id,\n        expiresAt: expirationDate,\n      } as any).returning() as any[];\n\n      testInvitation = invitation;\n    });\n\n    it('should successfully delete invitation', async () => {\n      // Verify invitation exists\n      const beforeDelete = await mockDb\n        .select()\n        .from(mockSchema.invitations)\n        .where(eq(mockSchema.invitations.id, testInvitation.id)) as any[];\n\n      expect(beforeDelete).toHaveLength(1);\n\n      // Delete invitation\n      await mockDb\n        .delete(mockSchema.invitations)\n        .where(eq(mockSchema.invitations.id, testInvitation.id)) as any;\n\n      // Verify invitation is deleted\n      const afterDelete = await mockDb\n        .select()\n        .from(mockSchema.invitations)\n        .where(eq(mockSchema.invitations.id, testInvitation.id)) as any[];\n\n      expect(afterDelete).toHaveLength(0);\n    });\n\n    it('should handle deletion of non-existent invitation', async () => {\n      // Try to delete non-existent invitation\n      const result = await mockDb\n        .delete(mockSchema.invitations)\n        .where(eq(mockSchema.invitations.id, 'non-existent-id')) as any;\n\n      // Should not throw error, just return 0 affected rows\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('Invitation Expiration', () => {\n    it('should handle expired invitations', async () => {\n      const expiredDate = new Date();\n      expiredDate.setDate(expiredDate.getDate() - 1); // Yesterday\n\n      const futureDate = new Date();\n      futureDate.setDate(futureDate.getDate() + 7); // Next week\n\n      await mockDb.insert(mockSchema.invitations).values([\n        {\n          email: 'expired@example.com',\n          token: 'expired-token',\n          tokenHash: 'expired-hash',\n          role: 'tenant',\n          status: 'pending',\n          organizationId: organization1.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: expiredDate,\n        },\n        {\n          email: 'valid@example.com',\n          token: 'valid-token',\n          tokenHash: 'valid-hash',\n          role: 'tenant',\n          status: 'pending',\n          organizationId: organization1.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: futureDate,\n        },\n      ] as any) as any;\n\n      // Get all pending invitations\n      const allPending = await mockDb\n        .select()\n        .from(mockSchema.invitations)\n        .where(eq(mockSchema.invitations.status, 'pending')) as any[];\n\n      expect(allPending).toHaveLength(2);\n\n      // Check expiration dates\n      const expiredInvitation = allPending.find(inv => inv.email === 'expired@example.com');\n      const validInvitation = allPending.find(inv => inv.email === 'valid@example.com');\n\n      expect(expiredInvitation?.expiresAt).toBeInstanceOf(Date);\n      expect(validInvitation?.expiresAt).toBeInstanceOf(Date);\n      expect(expiredInvitation!.expiresAt < new Date()).toBe(true);\n      expect(validInvitation!.expiresAt > new Date()).toBe(true);\n    });\n  });\n\n  describe('Database Constraints', () => {\n    it('should enforce unique token constraint', async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      // Create first invitation\n      await mockDb.insert(mockSchema.invitations).values({\n        email: 'first@example.com',\n        token: 'unique-token',\n        tokenHash: 'hash1',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: organization1.id,\n        invitedByUserId: adminUser.id,\n        expiresAt: expirationDate,\n      } as any) as any;\n\n      // Try to create second invitation with same token\n      await expect(async () => {\n        await mockDb.insert(mockSchema.invitations).values({\n          email: 'second@example.com',\n          token: 'unique-token', // Same token\n          tokenHash: 'hash2',\n          role: 'tenant',\n          status: 'pending',\n          organizationId: organization1.id,\n          invitedByUserId: adminUser.id,\n          expiresAt: expirationDate,\n        } as any) as any;\n      }).rejects.toThrow();\n    });\n\n    it('should allow null values for optional fields', async () => {\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 7);\n\n      const [invitation] = await mockDb.insert(mockSchema.invitations).values({\n        email: 'null-test@example.com',\n        token: 'null-token',\n        tokenHash: 'null-hash',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: null, // Allow null\n        buildingId: null,     // Allow null\n        residenceId: null,    // Allow null\n        invitedByUserId: adminUser.id,\n        expiresAt: expirationDate,\n      } as any).returning() as any[];\n\n      expect(invitation.organizationId).toBeNull();\n      expect(invitation.buildingId).toBeNull();\n      expect(invitation.residenceId).toBeNull();\n    });\n  });\n});"],"version":3}