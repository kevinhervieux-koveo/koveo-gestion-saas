{"file":"/home/runner/workspace/tests/unit/comprehensive-form-submission-tests.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/comprehensive-form-submission-tests.test.tsx"],"sourcesContent":["/**\n * Comprehensive Form Submission Test Suite\n * \n * This test suite validates that ALL forms in the Koveo Gestion application\n * submit correctly with proper data handling, error management, and API integration.\n * \n * Forms tested for actual submission behavior:\n * 1. Authentication Forms (login, password reset)\n * 2. User Management Forms (invitations, profile updates)\n * 3. Property Management Forms (buildings, residences)\n * 4. Financial Forms (bills, payments)\n * 5. Document Forms (upload, categorization)\n * 6. Maintenance Forms (demands, bug reports)\n */\n\nimport { describe, it, expect, jest, beforeEach } from '@jest/globals';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport React from 'react';\n\n// Test utilities\nconst createTestQueryClient = () => {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n  });\n};\n\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = createTestQueryClient();\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\n// Mock API request function\nconst mockApiRequest = jest.fn();\njest.mock('@/lib/queryClient', () => ({\n  apiRequest: mockApiRequest,\n}));\n\n// Mock authentication hook\nconst mockAuth = {\n  user: {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    email: 'test@example.com',\n    role: 'admin',\n    organizationId: '123e4567-e89b-12d3-a456-426614174001'\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n};\n\njest.mock('@/hooks/use-auth', () => ({\n  useAuth: () => mockAuth,\n}));\n\n// Mock toast hook\nconst mockToast = jest.fn();\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({ toast: mockToast }),\n}));\n\n// Mock useLocation hook\njest.mock('wouter', () => ({\n  useLocation: () => ['/', jest.fn()],\n  Link: ({ children, href }: { children: React.ReactNode; href: string }) => (\n    <a href={href}>{children}</a>\n  ),\n}));\n\n// Mock language hook\njest.mock('@/hooks/use-language', () => ({\n  useLanguage: () => ({\n    language: 'en',\n    t: (key: string) => key,\n    changeLanguage: jest.fn(),\n  }),\n}));\n\ndescribe('Comprehensive Form Submission Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockApiRequest.mockResolvedValue({ success: true });\n  });\n\n  describe('Authentication Form Submissions', () => {\n    it('should submit login form with correct credentials', async () => {\n      // Mock login component\n      const LoginForm = () => {\n        const [email, setEmail] = React.useState('');\n        const [password, setPassword] = React.useState('');\n        const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          setIsSubmitting(true);\n          try {\n            await mockApiRequest('POST', '/api/auth/login', { email, password });\n            mockAuth.login({ email, password });\n          } finally {\n            setIsSubmitting(false);\n          }\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"login-form\">\n            <input\n              data-testid=\"email-input\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n            />\n            <input\n              data-testid=\"password-input\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Password\"\n            />\n            <button\n              data-testid=\"login-submit\"\n              type=\"submit\"\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Logging in...' : 'Login'}\n            </button>\n          </form>\n        );\n      };\n\n      render(<LoginForm />, { wrapper: TestWrapper });\n\n      const emailInput = screen.getByTestId('email-input');\n      const passwordInput = screen.getByTestId('password-input');\n      const submitButton = screen.getByTestId('login-submit');\n\n      await userEvent.type(emailInput, 'test@example.com');\n      await userEvent.type(passwordInput, 'validPassword123');\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/auth/login', {\n          email: 'test@example.com',\n          password: 'validPassword123'\n        });\n      });\n\n      expect(mockAuth.login).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'validPassword123'\n      });\n    });\n\n    it('should handle login form validation errors', async () => {\n      mockApiRequest.mockRejectedValue(new Error('Invalid credentials'));\n\n      const LoginForm = () => {\n        const [email, setEmail] = React.useState('');\n        const [password, setPassword] = React.useState('');\n        const [error, setError] = React.useState('');\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          try {\n            await mockApiRequest('POST', '/api/auth/login', { email, password });\n          } catch (err: any) {\n            setError(err.message);\n          }\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"login-form\">\n            <input\n              data-testid=\"email-input\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <input\n              data-testid=\"password-input\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <button data-testid=\"login-submit\" type=\"submit\">\n              Login\n            </button>\n            {error && <div data-testid=\"error-message\">{error}</div>}\n          </form>\n        );\n      };\n\n      render(<LoginForm />, { wrapper: TestWrapper });\n\n      const emailInput = screen.getByTestId('email-input');\n      const passwordInput = screen.getByTestId('password-input');\n      const submitButton = screen.getByTestId('login-submit');\n\n      await userEvent.type(emailInput, 'wrong@example.com');\n      await userEvent.type(passwordInput, 'wrongpassword');\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Invalid credentials');\n      });\n    });\n  });\n\n  describe('Property Management Form Submissions', () => {\n    it('should submit building creation form with valid data', async () => {\n      const BuildingForm = () => {\n        const [formData, setFormData] = React.useState({\n          name: '',\n          organizationId: '',\n          address: '',\n          city: '',\n          province: 'QC',\n          postalCode: '',\n          buildingType: 'condo',\n          totalUnits: 0\n        });\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          await mockApiRequest('POST', '/api/buildings', formData);\n          mockToast({ title: 'Building created successfully' });\n        };\n\n        const handleChange = (field: string, value: any) => {\n          setFormData(prev => ({ ...prev, [field]: value }));\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"building-form\">\n            <input\n              data-testid=\"building-name\"\n              value={formData.name}\n              onChange={(e) => handleChange('name', e.target.value)}\n              placeholder=\"Building Name\"\n            />\n            <select\n              data-testid=\"organization-select\"\n              value={formData.organizationId}\n              onChange={(e) => handleChange('organizationId', e.target.value)}\n            >\n              <option value=\"\">Select Organization</option>\n              <option value=\"123e4567-e89b-12d3-a456-426614174001\">Test Org</option>\n            </select>\n            <input\n              data-testid=\"building-address\"\n              value={formData.address}\n              onChange={(e) => handleChange('address', e.target.value)}\n              placeholder=\"Address\"\n            />\n            <input\n              data-testid=\"building-city\"\n              value={formData.city}\n              onChange={(e) => handleChange('city', e.target.value)}\n              placeholder=\"City\"\n            />\n            <input\n              data-testid=\"building-postalcode\"\n              value={formData.postalCode}\n              onChange={(e) => handleChange('postalCode', e.target.value)}\n              placeholder=\"Postal Code\"\n            />\n            <input\n              data-testid=\"building-units\"\n              type=\"number\"\n              value={formData.totalUnits}\n              onChange={(e) => handleChange('totalUnits', parseInt(e.target.value) || 0)}\n              placeholder=\"Total Units\"\n            />\n            <button data-testid=\"building-submit\" type=\"submit\">\n              Create Building\n            </button>\n          </form>\n        );\n      };\n\n      render(<BuildingForm />, { wrapper: TestWrapper });\n\n      // Fill out the form\n      await userEvent.type(screen.getByTestId('building-name'), 'Sunset Towers');\n      await userEvent.selectOptions(screen.getByTestId('organization-select'), '123e4567-e89b-12d3-a456-426614174001');\n      await userEvent.type(screen.getByTestId('building-address'), '456 Main Street');\n      await userEvent.type(screen.getByTestId('building-city'), 'Montreal');\n      await userEvent.type(screen.getByTestId('building-postalcode'), 'H3A 1B1');\n      await userEvent.clear(screen.getByTestId('building-units'));\n      await userEvent.type(screen.getByTestId('building-units'), '50');\n\n      await userEvent.click(screen.getByTestId('building-submit'));\n\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/buildings', {\n          name: 'Sunset Towers',\n          organizationId: '123e4567-e89b-12d3-a456-426614174001',\n          address: '456 Main Street',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H3A 1B1',\n          buildingType: 'condo',\n          totalUnits: 50\n        });\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({ title: 'Building created successfully' });\n    });\n  });\n\n  describe('Financial Form Submissions', () => {\n    it('should submit bill creation form with proper amount validation', async () => {\n      const BillForm = () => {\n        const [formData, setFormData] = React.useState({\n          title: '',\n          category: 'utilities',\n          paymentType: 'unique',\n          totalAmount: '',\n          startDate: '',\n          status: 'draft'\n        });\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          \n          // Validate amount\n          const amount = parseFloat(formData.totalAmount);\n          if (isNaN(amount) || amount <= 0) {\n            mockToast({ title: 'Invalid amount', variant: 'destructive' });\n            return;\n          }\n\n          await mockApiRequest('POST', '/api/bills', formData);\n          mockToast({ title: 'Bill created successfully' });\n        };\n\n        const handleChange = (field: string, value: any) => {\n          setFormData(prev => ({ ...prev, [field]: value }));\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"bill-form\">\n            <input\n              data-testid=\"bill-title\"\n              value={formData.title}\n              onChange={(e) => handleChange('title', e.target.value)}\n              placeholder=\"Bill Title\"\n            />\n            <input\n              data-testid=\"bill-amount\"\n              value={formData.totalAmount}\n              onChange={(e) => handleChange('totalAmount', e.target.value)}\n              placeholder=\"Amount\"\n            />\n            <input\n              data-testid=\"bill-date\"\n              type=\"date\"\n              value={formData.startDate}\n              onChange={(e) => handleChange('startDate', e.target.value)}\n            />\n            <button data-testid=\"bill-submit\" type=\"submit\">\n              Create Bill\n            </button>\n          </form>\n        );\n      };\n\n      render(<BillForm />, { wrapper: TestWrapper });\n\n      // Test valid submission\n      await userEvent.type(screen.getByTestId('bill-title'), 'Monthly Electricity');\n      await userEvent.type(screen.getByTestId('bill-amount'), '150.75');\n      await userEvent.type(screen.getByTestId('bill-date'), '2025-01-01');\n\n      await userEvent.click(screen.getByTestId('bill-submit'));\n\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/bills', {\n          title: 'Monthly Electricity',\n          category: 'utilities',\n          paymentType: 'unique',\n          totalAmount: '150.75',\n          startDate: '2025-01-01',\n          status: 'draft'\n        });\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({ title: 'Bill created successfully' });\n    });\n\n    it('should handle invalid bill amount submission', async () => {\n      const BillForm = () => {\n        const [formData, setFormData] = React.useState({\n          title: 'Test Bill',\n          totalAmount: ''\n        });\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          \n          const amount = parseFloat(formData.totalAmount);\n          if (isNaN(amount) || amount <= 0) {\n            mockToast({ title: 'Invalid amount', variant: 'destructive' });\n            return;\n          }\n\n          await mockApiRequest('POST', '/api/bills', formData);\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"bill-form\">\n            <input\n              data-testid=\"bill-amount\"\n              value={formData.totalAmount}\n              onChange={(e) => setFormData(prev => ({ ...prev, totalAmount: e.target.value }))}\n              placeholder=\"Amount\"\n            />\n            <button data-testid=\"bill-submit\" type=\"submit\">\n              Create Bill\n            </button>\n          </form>\n        );\n      };\n\n      render(<BillForm />, { wrapper: TestWrapper });\n\n      // Test invalid amount\n      await userEvent.type(screen.getByTestId('bill-amount'), '-50');\n      await userEvent.click(screen.getByTestId('bill-submit'));\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith({ \n          title: 'Invalid amount', \n          variant: 'destructive' \n        });\n      });\n\n      expect(mockApiRequest).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Maintenance Form Submissions', () => {\n    it('should submit demand creation form with UUID handling', async () => {\n      const DemandForm = () => {\n        const [formData, setFormData] = React.useState({\n          type: 'maintenance',\n          description: '',\n          buildingId: '',\n          residenceId: ''\n        });\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          \n          // Convert empty strings to undefined for optional UUID fields\n          const submissionData = {\n            ...formData,\n            buildingId: formData.buildingId || undefined,\n            residenceId: formData.residenceId || undefined\n          };\n\n          await mockApiRequest('POST', '/api/demands', submissionData);\n          mockToast({ title: 'Demand created successfully' });\n        };\n\n        const handleChange = (field: string, value: any) => {\n          setFormData(prev => ({ ...prev, [field]: value }));\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"demand-form\">\n            <select\n              data-testid=\"demand-type\"\n              value={formData.type}\n              onChange={(e) => handleChange('type', e.target.value)}\n            >\n              <option value=\"maintenance\">Maintenance</option>\n              <option value=\"complaint\">Complaint</option>\n              <option value=\"information\">Information</option>\n              <option value=\"other\">Other</option>\n            </select>\n            <textarea\n              data-testid=\"demand-description\"\n              value={formData.description}\n              onChange={(e) => handleChange('description', e.target.value)}\n              placeholder=\"Description\"\n            />\n            <select\n              data-testid=\"demand-building\"\n              value={formData.buildingId}\n              onChange={(e) => handleChange('buildingId', e.target.value)}\n            >\n              <option value=\"\">Select Building (Optional)</option>\n              <option value=\"123e4567-e89b-12d3-a456-426614174000\">Building A</option>\n            </select>\n            <button data-testid=\"demand-submit\" type=\"submit\">\n              Submit Demand\n            </button>\n          </form>\n        );\n      };\n\n      render(<DemandForm />, { wrapper: TestWrapper });\n\n      // Fill out form with optional building ID\n      await userEvent.selectOptions(screen.getByTestId('demand-type'), 'maintenance');\n      await userEvent.type(screen.getByTestId('demand-description'), 'The heating system needs repair urgently.');\n      await userEvent.selectOptions(screen.getByTestId('demand-building'), '123e4567-e89b-12d3-a456-426614174000');\n\n      await userEvent.click(screen.getByTestId('demand-submit'));\n\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/demands', {\n          type: 'maintenance',\n          description: 'The heating system needs repair urgently.',\n          buildingId: '123e4567-e89b-12d3-a456-426614174000',\n          residenceId: undefined\n        });\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({ title: 'Demand created successfully' });\n    });\n\n    it('should submit demand without optional UUID fields', async () => {\n      const DemandForm = () => {\n        const [formData, setFormData] = React.useState({\n          type: 'information',\n          description: 'General inquiry about building policies.'\n        });\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          await mockApiRequest('POST', '/api/demands', formData);\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"demand-form\">\n            <textarea\n              data-testid=\"demand-description\"\n              value={formData.description}\n              readOnly\n            />\n            <button data-testid=\"demand-submit\" type=\"submit\">\n              Submit\n            </button>\n          </form>\n        );\n      };\n\n      render(<DemandForm />, { wrapper: TestWrapper });\n\n      await userEvent.click(screen.getByTestId('demand-submit'));\n\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/demands', {\n          type: 'information',\n          description: 'General inquiry about building policies.'\n        });\n      });\n    });\n  });\n\n  describe('Document Management Form Submissions', () => {\n    it('should submit document upload form with file handling', async () => {\n      const DocumentForm = () => {\n        const [formData, setFormData] = React.useState({\n          name: '',\n          type: 'financial',\n          dateReference: '',\n          isVisibleToTenants: true\n        });\n        const [file, setFile] = React.useState<File | null>(null);\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          \n          if (!file) {\n            mockToast({ title: 'Please select a file', variant: 'destructive' });\n            return;\n          }\n\n          const formDataWithFile = new FormData();\n          Object.entries(formData).forEach(([key, value]) => {\n            formDataWithFile.append(key, value.toString());\n          });\n          formDataWithFile.append('file', file);\n\n          await mockApiRequest('POST', '/api/documents', formDataWithFile);\n          mockToast({ title: 'Document uploaded successfully' });\n        };\n\n        const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n          const selectedFile = e.target.files?.[0] || null;\n          setFile(selectedFile);\n        };\n\n        const handleChange = (field: string, value: any) => {\n          setFormData(prev => ({ ...prev, [field]: value }));\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"document-form\">\n            <input\n              data-testid=\"document-name\"\n              value={formData.name}\n              onChange={(e) => handleChange('name', e.target.value)}\n              placeholder=\"Document Name\"\n            />\n            <input\n              data-testid=\"document-date\"\n              type=\"date\"\n              value={formData.dateReference}\n              onChange={(e) => handleChange('dateReference', e.target.value)}\n            />\n            <input\n              data-testid=\"document-file\"\n              type=\"file\"\n              onChange={handleFileChange}\n              accept=\".pdf,.doc,.docx,.jpg,.png\"\n            />\n            <button data-testid=\"document-submit\" type=\"submit\">\n              Upload Document\n            </button>\n          </form>\n        );\n      };\n\n      render(<DocumentForm />, { wrapper: TestWrapper });\n\n      const file = new File(['dummy content'], 'test-document.pdf', { type: 'application/pdf' });\n\n      await userEvent.type(screen.getByTestId('document-name'), 'Annual Financial Report');\n      await userEvent.type(screen.getByTestId('document-date'), '2024-12-31');\n      await userEvent.upload(screen.getByTestId('document-file'), file);\n\n      await userEvent.click(screen.getByTestId('document-submit'));\n\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/documents', expect.any(FormData));\n      });\n\n      expect(mockToast).toHaveBeenCalledWith({ title: 'Document uploaded successfully' });\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle network errors gracefully', async () => {\n      mockApiRequest.mockRejectedValue(new Error('Network error'));\n\n      const TestForm = () => {\n        const [error, setError] = React.useState('');\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          try {\n            await mockApiRequest('POST', '/api/test', { data: 'test' });\n          } catch (err: any) {\n            setError(err.message);\n          }\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"test-form\">\n            <button data-testid=\"submit-button\" type=\"submit\">\n              Submit\n            </button>\n            {error && <div data-testid=\"error-display\">{error}</div>}\n          </form>\n        );\n      };\n\n      render(<TestForm />, { wrapper: TestWrapper });\n\n      await userEvent.click(screen.getByTestId('submit-button'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-display')).toHaveTextContent('Network error');\n      });\n    });\n\n    it('should prevent multiple submissions', async () => {\n      let submitCount = 0;\n      mockApiRequest.mockImplementation(() => {\n        submitCount++;\n        return new Promise(resolve => setTimeout(resolve, 100));\n      });\n\n      const TestForm = () => {\n        const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          if (isSubmitting) return;\n          \n          setIsSubmitting(true);\n          try {\n            await mockApiRequest('POST', '/api/test', { data: 'test' });\n          } finally {\n            setIsSubmitting(false);\n          }\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"test-form\">\n            <button\n              data-testid=\"submit-button\"\n              type=\"submit\"\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Submitting...' : 'Submit'}\n            </button>\n          </form>\n        );\n      };\n\n      render(<TestForm />, { wrapper: TestWrapper });\n\n      const submitButton = screen.getByTestId('submit-button');\n      \n      // Click multiple times rapidly\n      await userEvent.click(submitButton);\n      await userEvent.click(submitButton);\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(submitCount).toBe(1);\n      });\n    });\n\n    it('should handle form reset after successful submission', async () => {\n      const TestForm = () => {\n        const [value, setValue] = React.useState('');\n        const [submitted, setSubmitted] = React.useState(false);\n\n        const handleSubmit = async (e: React.FormEvent) => {\n          e.preventDefault();\n          await mockApiRequest('POST', '/api/test', { value });\n          setValue(''); // Reset form\n          setSubmitted(true);\n        };\n\n        return (\n          <form onSubmit={handleSubmit} data-testid=\"test-form\">\n            <input\n              data-testid=\"test-input\"\n              value={value}\n              onChange={(e) => setValue(e.target.value)}\n            />\n            <button data-testid=\"submit-button\" type=\"submit\">\n              Submit\n            </button>\n            {submitted && <div data-testid=\"success-message\">Form submitted!</div>}\n          </form>\n        );\n      };\n\n      render(<TestForm />, { wrapper: TestWrapper });\n\n      const input = screen.getByTestId('test-input');\n      const submitButton = screen.getByTestId('submit-button');\n\n      await userEvent.type(input, 'test value');\n      expect(input).toHaveValue('test value');\n\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('success-message')).toBeInTheDocument();\n        expect(input).toHaveValue(''); // Form should be reset\n      });\n    });\n  });\n});\n"],"version":3}