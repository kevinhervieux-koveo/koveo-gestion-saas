{"file":"/home/runner/workspace/server/routes.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/routes.ts"],"sourcesContent":["// Main routes file that loads route definitions\nimport express, { Express } from 'express';\nimport { setupAuthRoutes, sessionConfig } from './auth';\nimport path from 'path';\nimport fs from 'fs';\n\n// Import API route registration functions\nimport { registerOrganizationRoutes } from './api/organizations';\nimport { registerUserRoutes } from './api/users';\nimport { registerBuildingRoutes } from './api/buildings';\nimport { registerDocumentRoutes } from './api/documents';\nimport { registerBugRoutes } from './api/bugs';\nimport { registerBillRoutes } from './api/bills';\nimport { registerResidenceRoutes } from './api/residences';\nimport { registerDemandRoutes } from './api/demands';\nimport { registerFeatureRequestRoutes } from './api/feature-requests';\nimport { registerContactRoutes } from './api/contacts';\nimport { registerCommonSpacesRoutes } from './api/common-spaces';\nimport { registerPermissionsRoutes } from './api/permissions';\nimport { registerDemoManagementRoutes } from './api/demo-management';\n\nexport async function registerRoutes(app: Express) {\n  console.log('🔄 Setting up session middleware...');\n  \n  // CRITICAL: Apply session middleware BEFORE authentication routes\n  app.use(sessionConfig);\n  console.log('✅ Session middleware configured');\n  \n  console.log('🔄 Loading authentication routes...');\n  \n  // Setup authentication routes - session middleware must be applied first\n  setupAuthRoutes(app);\n  console.log('✅ Authentication routes loaded on /api/auth/');\n  \n  // Register all API routes\n  console.log('🔄 Loading API routes...');\n  registerOrganizationRoutes(app);\n  registerUserRoutes(app);\n  registerBuildingRoutes(app);\n  registerDocumentRoutes(app);\n  registerBugRoutes(app);\n  registerBillRoutes(app);\n  registerResidenceRoutes(app);\n  registerDemandRoutes(app);\n  registerFeatureRequestRoutes(app);\n  registerContactRoutes(app);\n  registerCommonSpacesRoutes(app);\n  registerPermissionsRoutes(app);\n  registerDemoManagementRoutes(app);\n  console.log('✅ All API routes registered');\n  \n  // Basic API routes\n  app.get('/api/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n  \n  app.post('/api/test', (req, res) => {\n    res.json({ message: 'API working', body: req.body });\n  });\n\n  // Simple production diagnostic endpoint\n  app.get('/api/debug/simple', (req, res) => {\n    console.log('🔍 Simple debug endpoint called');\n    res.json({ \n      status: 'working',\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'unknown',\n      databaseUrl: process.env.DATABASE_URL ? 'present' : 'missing'\n    });\n  });\n\n  // Complex storage test endpoint  \n  app.get('/api/debug/storage', async (req, res) => {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] 🔍 Storage debug endpoint called`);\n    \n    try {\n      console.log(`[${timestamp}] 📦 Testing storage import...`);\n      const { storage } = await import('./storage');\n      console.log(`[${timestamp}] ✅ Storage imported successfully`);\n      \n      console.log(`[${timestamp}] 🧪 Testing basic storage method...`);\n      const testResult = await storage.getDocuments({ residenceId: 'e27ac924-8120-4904-a791-d1e9db544d58' });\n      console.log(`[${timestamp}] ✅ Storage test successful`);\n      \n      res.json({ \n        success: true,\n        timestamp,\n        documentsCount: testResult.length,\n        storageType: storage.constructor.name\n      });\n    } catch (error: any) {\n      res.status(500).json({ \n        success: false,\n        timestamp,\n        error: error.message,\n        stack: error.stack\n      });\n    }\n  });\n\n  // User info debug endpoint\n  app.get('/api/debug/user-info', async (req: any, res) => {\n    try {\n      if (!req.session?.userId && !req.session?.user) {\n        return res.status(401).json({\n          message: 'No session found',\n          session: req.session\n        });\n      }\n\n      const user = req.user || req.session?.user;\n      const userId = req.session?.userId;\n\n      // Get user from database directly\n      const { db } = await import('./db');\n      const { users, userOrganizations, organizations } = await import('../shared/schema');\n      const { eq } = await import('drizzle-orm');\n\n      const userFromDb = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, userId));\n\n      const userOrgs = await db\n        .select({\n          organizationId: userOrganizations.organizationId,\n          organizationName: organizations.name,\n          canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,\n          isActive: userOrganizations.isActive,\n        })\n        .from(userOrganizations)\n        .innerJoin(organizations, eq(userOrganizations.organizationId, organizations.id))\n        .where(eq(userOrganizations.userId, userId));\n\n      res.json({\n        session: {\n          userId: req.session?.userId,\n          hasUser: !!user,\n          userRole: req.session?.userRole,\n        },\n        userFromMiddleware: user,\n        userFromDatabase: userFromDb[0],\n        userOrganizations: userOrgs,\n        rawSession: req.session\n      });\n    } catch (error: any) {\n      res.status(500).json({\n        error: error.message,\n        stack: error.stack\n      });\n    }\n  });\n  \n  // Static file serving - MUST come after API routes to prevent conflicts\n  const distPath = path.resolve(process.cwd(), 'dist', 'public');\n  \n  if (fs.existsSync(distPath)) {\n    console.log('✅ Setting up static file serving from', distPath);\n    \n    // Serve static assets with appropriate cache headers\n    app.use(express.static(distPath, {\n      // Disable caching for development to ensure fresh files\n      setHeaders: (res, path) => {\n        if (process.env.NODE_ENV === 'development') {\n          // Development: disable all caching for immediate updates\n          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n          res.setHeader('Pragma', 'no-cache');\n          res.setHeader('Expires', '0');\n        } else {\n          // Production: cache assets but allow revalidation\n          if (path.endsWith('.html')) {\n            // HTML files should not be cached to ensure routing works\n            res.setHeader('Cache-Control', 'no-cache, must-revalidate');\n          } else {\n            // Other assets can be cached with revalidation\n            res.setHeader('Cache-Control', 'public, max-age=300, must-revalidate');\n          }\n        }\n      }\n    }));\n    \n    // SPA fallback - serve index.html for non-API routes\n    app.get('*', (req, res) => {\n      // Don't serve index.html for API routes\n      if (req.path.startsWith('/api/')) {\n        return res.status(404).json({ message: 'API endpoint not found', error: 'API endpoint not found' });\n      }\n      \n      const indexPath = path.join(distPath, 'index.html');\n      if (fs.existsSync(indexPath)) {\n        // Ensure index.html is never cached\n        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n        res.setHeader('Pragma', 'no-cache');\n        res.setHeader('Expires', '0');\n        res.sendFile(indexPath);\n      } else {\n        res.status(404).send('Application not found - build missing');\n      }\n    });\n  } else {\n    console.log('⚠️ Static files not found, only API routes available');\n    \n    // Fallback for missing static files\n    app.get('*', (req, res) => {\n      if (req.path.startsWith('/api/')) {\n        return res.status(404).json({ message: 'API endpoint not found', error: 'API endpoint not found' });\n      }\n      res.status(503).send('Application is starting up...');\n    });\n  }\n  \n  console.log('✅ All routes registered successfully');\n}"],"version":3}