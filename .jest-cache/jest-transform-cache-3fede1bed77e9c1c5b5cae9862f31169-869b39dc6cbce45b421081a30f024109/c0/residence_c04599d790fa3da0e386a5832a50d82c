528dd7e443ef4248699790e9a0d52a29
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const no_data_card_1 = require("@/components/ui/no-data-card");
const button_1 = require("@/components/ui/button");
const label_1 = require("@/components/ui/label");
const select_1 = require("@/components/ui/select");
const lucide_react_1 = require("lucide-react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const use_toast_1 = require("@/hooks/use-toast");
const use_language_1 = require("@/hooks/use-language");
const queryClient_1 = require("@/lib/queryClient");
const wouter_1 = require("wouter");
const withHierarchicalSelection_1 = require("@/components/hoc/withHierarchicalSelection");
const use_auth_1 = require("@/hooks/use-auth");
// Contact form schema
const contactFormSchema = zod_2.z.object({
    firstName: zod_2.z.string().min(1, 'First name is required'),
    lastName: zod_2.z.string().min(1, 'Last name is required'),
    email: zod_2.z.string().email('Invalid email address'),
    phone: zod_2.z.string().optional(),
    type: zod_2.z.enum(['primary', 'emergency', 'other']),
});
/**
 * Residence page component for residents.
 */
function ResidencePageInner({ buildingId, showBackButton, backButtonLabel, onBack }) {
    const { user } = (0, use_auth_1.useAuth)();
    const { toast } = (0, use_toast_1.useToast)();
    const { t } = (0, use_language_1.useLanguage)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [, navigate] = (0, wouter_1.useLocation)();
    const [selectedResidenceId, setSelectedResidenceId] = (0, react_1.useState)('');
    const [isContactDialogOpen, setIsContactDialogOpen] = (0, react_1.useState)(false);
    const [editingContact, setEditingContact] = (0, react_1.useState)(null);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const itemsPerPage = 10;
    const handleBackToBuilding = () => {
        navigate('/residents/residence');
    };
    // Form for contact management
    const contactForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(contactFormSchema),
        defaultValues: {
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            type: 'primary',
        },
    });
    // Fetch residences for the selected building
    const { data: accessibleResidences = [], isLoading, error: residencesError, refetch: refetchResidences, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/users/residences', user?.id, buildingId],
        queryFn: async () => {
            if (!user?.id) {
                return [];
            }
            // Get all user's residences first
            const response = await fetch(`/api/users/${user.id}/residences`, {
                credentials: 'include',
                headers: {
                    'Cache-Control': 'no-cache',
                },
            });
            if (!response.ok) {
                throw new Error('Failed to fetch residences');
            }
            const allResidences = await response.json();
            // Filter by building if buildingId is provided
            if (buildingId) {
                return allResidences.filter((residence) => residence.buildingId === buildingId);
            }
            return allResidences;
        },
        enabled: !!user?.id && !!buildingId,
        refetchOnMount: true,
        staleTime: 0,
    });
    // Ensure accessibleResidences is always an array
    const safeAccessibleResidences = Array.isArray(accessibleResidences) ? accessibleResidences : [];
    // Show all residences for the selected building
    const filteredResidences = safeAccessibleResidences;
    // Pagination calculations
    const totalPages = Math.ceil(filteredResidences.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentResidences = filteredResidences.slice(startIndex, endIndex);
    const handlePreviousPage = () => {
        setCurrentPage((prev) => Math.max(1, prev - 1));
    };
    const handleNextPage = () => {
        setCurrentPage((prev) => Math.min(totalPages, prev + 1));
    };
    const handlePageClick = (page) => {
        setCurrentPage(page);
    };
    // Select first residence by default
    const selectedResidence = (0, react_1.useMemo)(() => {
        if (!selectedResidenceId && filteredResidences.length > 0) {
            setSelectedResidenceId(filteredResidences[0].id);
            return filteredResidences[0];
        }
        return filteredResidences.find((r) => r.id === selectedResidenceId) || null;
    }, [selectedResidenceId, filteredResidences]);
    // Fetch contacts for selected residence
    const { data: contacts = [], isLoading: contactsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/contacts', selectedResidenceId],
        queryFn: async () => {
            if (!selectedResidenceId) {
                return [];
            }
            const response = await fetch(`/api/residences/${selectedResidenceId}/contacts`);
            if (!response.ok) {
                return [];
            }
            return response.json();
        },
        enabled: !!selectedResidenceId,
    });
    // Mutations for contact management
    const addContactMutation = (0, react_query_1.useMutation)({
        mutationFn: async (contactData) => {
            return (0, queryClient_1.apiRequest)('POST', `/api/residences/${selectedResidenceId}/contacts`, contactData);
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('contactAddedSuccessfully'),
            });
            queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });
            setIsContactDialogOpen(false);
            contactForm.reset();
            setEditingContact(null);
        },
        onError: (error) => {
            toast({
                title: t('error'),
                description: error?.message || t('failedToAddContact'),
                variant: 'destructive',
            });
        },
    });
    const updateContactMutation = (0, react_query_1.useMutation)({
        mutationFn: async (contactData) => {
            return (0, queryClient_1.apiRequest)('PUT', `/api/contacts/${editingContact?.id}`, contactData);
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('contactUpdatedSuccessfully'),
            });
            queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });
            setIsContactDialogOpen(false);
            contactForm.reset();
            setEditingContact(null);
        },
        onError: (error) => {
            toast({
                title: t('error'),
                description: error?.message || t('failedToUpdateContact'),
                variant: 'destructive',
            });
        },
    });
    const deleteContactMutation = (0, react_query_1.useMutation)({
        mutationFn: async (contactId) => {
            return (0, queryClient_1.apiRequest)('DELETE', `/api/contacts/${contactId}`);
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('contactDeletedSuccessfully'),
            });
            queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });
        },
        onError: (error) => {
            toast({
                title: t('error'),
                description: error?.message || t('failedToDeleteContact'),
                variant: 'destructive',
            });
        },
    });
    const handleSubmitContact = (data) => {
        if (editingContact) {
            updateContactMutation.mutate(data);
        }
        else {
            addContactMutation.mutate(data);
        }
    };
    const handleEditContact = (contact) => {
        setEditingContact(contact);
        contactForm.reset({
            firstName: contact.firstName,
            lastName: contact.lastName,
            email: contact.email,
            phone: contact.phone || '',
            type: contact.type,
        });
        setIsContactDialogOpen(true);
    };
    const handleDeleteContact = (contact) => {
        if (confirm('Are you sure you want to delete this contact?')) {
            deleteContactMutation.mutate(contact.id);
        }
    };
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myResidence'), subtitle: t('viewResidenceInfo') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600', children: t('loading') })] }) })] }));
    }
    if (filteredResidences.length === 0) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myResidence'), subtitle: t('viewResidenceInfo') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center p-6', children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Home, titleKey: "noResidencesFound", descriptionKey: user?.role && ['admin', 'manager'].includes(user.role)
                            ? 'noResidencesFoundOrg'
                            : 'notAssignedResidences', testId: "no-residences-message" }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myResidence'), subtitle: t('myResidenceInfo') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [showBackButton && onBack && ((0, jsx_runtime_1.jsx)("div", { className: "mb-6", children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: onBack, className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4" }), backButtonLabel] }) })), filteredResidences.length > 1 && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-5 h-5' }), "Select Residence"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: 'flex flex-col md:flex-row gap-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium mb-2 block', children: t('selectResidence') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedResidenceId, onValueChange: setSelectedResidenceId, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectAResidence') }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: filteredResidences.map((residence) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: residence.id, children: [t('unit'), " ", residence.unitNumber, " - ", residence.building?.name || 'N/A'] }, residence.id))) })] })] }) }) })] })), currentResidences.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6', children: currentResidences.map((residence) => ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'hover:shadow-lg transition-shadow', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-5 h-5' }), t('unit'), " ", residence.unitNumber] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: residence.building?.name || t('buildingInfoUnavailable') })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 gap-3', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('address') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: residence.building?.address || t('addressUnavailable') }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-700', children: [residence.building?.city || 'N/A', ",", ' ', residence.building?.province || 'N/A', ' ', residence.building?.postalCode || ''] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-3', children: [residence.floor && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('floor') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: residence.floor })] })), residence.squareFootage && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('squareFootage') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: residence.squareFootage })] })), residence.bedrooms && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('bedrooms') }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-700 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bed, { className: 'w-4 h-4' }), residence.bedrooms] })] })), residence.bathrooms && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('bathrooms') }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-700 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bath, { className: 'w-4 h-4' }), residence.bathrooms] })] }))] }), residence.balcony && ((0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-2', children: (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: t('balcony') }) })), residence.parkingSpaceNumbers && residence.parkingSpaceNumbers.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('parking') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex flex-wrap gap-1 mt-1', children: residence.parkingSpaceNumbers.map((space, index) => ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Car, { className: 'w-3 h-3' }), space] }, index))) })] })), residence.storageSpaceNumbers && residence.storageSpaceNumbers.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('storage') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex flex-wrap gap-1 mt-1', children: residence.storageSpaceNumbers.map((space, index) => ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Package, { className: 'w-3 h-3' }), space] }, index))) })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'pt-3 border-t space-y-2', children: [(0, jsx_runtime_1.jsx)(wouter_1.Link, { href: `/residents/residences/${residence.id}/documents`, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'w-full justify-start', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 mr-2' }), t('documents')] }) }), (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: `/residents/buildings/${residence.buildingId}/documents`, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'w-full justify-start', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-4 h-4 mr-2' }), t('buildingDocuments')] }) })] })] })] }, residence.id))) })), totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-center items-center space-x-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handlePreviousPage, disabled: currentPage === 1, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeft, { className: 'h-4 w-4' }), t('previous')] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center space-x-1', children: Array.from({ length: Math.min(5, totalPages) }).map((_, i) => {
                                        let pageNum;
                                        if (totalPages <= 5) {
                                            pageNum = i + 1;
                                        }
                                        else if (currentPage <= 3) {
                                            pageNum = i + 1;
                                        }
                                        else if (currentPage >= totalPages - 2) {
                                            pageNum = totalPages - 4 + i;
                                        }
                                        else {
                                            pageNum = currentPage - 2 + i;
                                        }
                                        return ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: currentPage === pageNum ? 'default' : 'outline', size: 'sm', onClick: () => handlePageClick(pageNum), children: pageNum }, pageNum));
                                    }) }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handleNextPage, disabled: currentPage === totalPages, children: [t('next'), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: 'h-4 w-4' })] })] })), filteredResidences.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center text-sm text-muted-foreground mt-4', children: [t('showing'), " ", startIndex + 1, " to ", Math.min(endIndex, filteredResidences.length), " of", ' ', filteredResidences.length, " ", t('residences')] }))] }) })] }));
}
// Wrap with hierarchical selection HOC using building hierarchy (residents only see buildings they have residences in)
const ResidencePage = (0, withHierarchicalSelection_1.withHierarchicalSelection)(ResidencePageInner, {
    hierarchy: ['building']
});
exports.default = ResidencePage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL3BhZ2VzL3Jlc2lkZW50cy9yZXNpZGVuY2UudHN4IiwibWFwcGluZ3MiOiI7OztBQUFBLGlDQUEwQztBQUMxQyx1REFBOEU7QUFDOUUsdURBQW9EO0FBQ3BELCtDQUFnRjtBQUNoRixpREFBOEM7QUFDOUMsK0RBQTBEO0FBQzFELG1EQUFnRDtBQUVoRCxpREFBOEM7QUFDOUMsbURBTWdDO0FBa0JoQywrQ0FvQnNCO0FBQ3RCLHFEQUEwQztBQUMxQyxpREFBc0Q7QUFDdEQsNkJBQXdCO0FBQ3hCLGlEQUE2QztBQUM3Qyx1REFBbUQ7QUFDbkQsbURBQStDO0FBQy9DLG1DQUEyQztBQUMzQywwRkFBdUY7QUFDdkYsK0NBQTJDO0FBdUMzQyxzQkFBc0I7QUFDdEIsTUFBTSxpQkFBaUIsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2pDLFNBQVMsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSx3QkFBd0IsQ0FBQztJQUN0RCxRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsdUJBQXVCLENBQUM7SUFDcEQsS0FBSyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUM7SUFDaEQsS0FBSyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDNUIsSUFBSSxFQUFFLE9BQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0NBQ2hELENBQUMsQ0FBQztBQWNIOztHQUVHO0FBQ0gsU0FBUyxrQkFBa0IsQ0FBQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBa0I7SUFDakcsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUEsa0JBQU8sR0FBRSxDQUFDO0lBQzNCLE1BQU0sRUFBRSxLQUFLLEVB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QUF5QixFQUFDLGtCQUFrQixFQUFFO0lBQ2xFLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQztDQUN4QixDQUFDLENBQUM7QUFFSCxrQkFBZSxhQUFhLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL3BhZ2VzL3Jlc2lkZW50cy9yZXNpZGVuY2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUXVlcnksIHVzZU11dGF0aW9uLCB1c2VRdWVyeUNsaWVudCB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvbGF5b3V0L2hlYWRlcic7XG5pbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2NhcmQnO1xuaW1wb3J0IHsgQmFkZ2UgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYmFkZ2UnO1xuaW1wb3J0IHsgTm9EYXRhQ2FyZCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9uby1kYXRhLWNhcmQnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2J1dHRvbic7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9pbnB1dCc7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9sYWJlbCc7XG5pbXBvcnQge1xuICBTZWxlY3QsXG4gIFNlbGVjdENvbnRlbnQsXG4gIFNlbGVjdEl0ZW0sXG4gIFNlbGVjdFRyaWdnZXIsXG4gIFNlbGVjdFZhbHVlLFxufSBmcm9tICdAL2NvbXBvbmVudHMvdWkvc2VsZWN0JztcbmltcG9ydCB7XG4gIERpYWxvZyxcbiAgRGlhbG9nQ29udGVudCxcbiAgRGlhbG9nSGVhZGVyLFxuICBEaWFsb2dUaXRsZSxcbiAgRGlhbG9nVHJpZ2dlcixcbiAgRGlhbG9nRGVzY3JpcHRpb24sXG4gIERpYWxvZ0Zvb3Rlcixcbn0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2RpYWxvZyc7XG5pbXBvcnQge1xuICBGb3JtLFxuICBGb3JtQ29udHJvbCxcbiAgRm9ybUZpZWxkLFxuICBGb3JtSXRlbSxcbiAgRm9ybUxhYmVsLFxuICBGb3JtTWVzc2FnZSxcbn0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2Zvcm0nO1xuaW1wb3J0IHtcbiAgSG9tZSxcbiAgQnVpbGRpbmcsXG4gIE1hcFBpbixcbiAgQmVkLFxuICBCYXRoLFxuICBDYXIsXG4gIFBhY2thZ2UsXG4gIFBob25lLFxuICBNYWlsLFxuICBVc2VyLFxuICBFZGl0LFxuICBQbHVzLFxuICBUcmFzaDIsXG4gIEZpbGVUZXh0LFxuICBEb3dubG9hZCxcbiAgQ2FsZW5kYXIsXG4gIENoZXZyb25MZWZ0LFxuICBDaGV2cm9uUmlnaHQsXG4gIEFycm93TGVmdCxcbn0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuaW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnQC9ob29rcy91c2UtdG9hc3QnO1xuaW1wb3J0IHsgdXNlTGFuZ3VhZ2UgfSBmcm9tICdAL2hvb2tzL3VzZS1sYW5ndWFnZSc7XG5pbXBvcnQgeyBhcGlSZXF1ZXN0IH0gZnJvbSAnQC9saWIvcXVlcnlDbGllbnQnO1xuaW1wb3J0IHsgTGluaywgdXNlTG9jYXRpb24gfSBmcm9tICd3b3V0ZXInO1xuaW1wb3J0IHsgd2l0aEhpZXJhcmNoaWNhbFNlbGVjdGlvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9ob2Mvd2l0aEhpZXJhcmNoaWNhbFNlbGVjdGlvbic7XG5pbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnQC9ob29rcy91c2UtYXV0aCc7XG5cbi8qKlxuICogUmVzaWRlbmNlIGRhdGEgc3RydWN0dXJlXG4gKi9cbmludGVyZmFjZSBSZXNpZGVuY2Uge1xuICBpZDogc3RyaW5nO1xuICB1bml0TnVtYmVyOiBzdHJpbmc7XG4gIGZsb29yPzogbnVtYmVyO1xuICBzcXVhcmVGb290YWdlPzogc3RyaW5nO1xuICBiZWRyb29tcz86IG51bWJlcjtcbiAgYmF0aHJvb21zPzogc3RyaW5nO1xuICBiYWxjb255PzogYm9vbGVhbjtcbiAgcGFya2luZ1NwYWNlTnVtYmVycz86IHN0cmluZ1tdO1xuICBzdG9yYWdlU3BhY2VOdW1iZXJzPzogc3RyaW5nW107XG4gIGlzQWN0aXZlOiBib29sZWFuO1xuICBidWlsZGluZ0lkOiBzdHJpbmc7XG4gIGJ1aWxkaW5nOiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYWRkcmVzczogc3RyaW5nO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBwcm92aW5jZTogc3RyaW5nO1xuICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgfTtcbn1cblxuLyoqXG4gKiBDb250YWN0IGRhdGEgc3RydWN0dXJlXG4gKi9cbmludGVyZmFjZSBDb250YWN0IHtcbiAgaWQ6IHN0cmluZztcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBob25lPzogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG59XG5cbi8vIENvbnRhY3QgZm9ybSBzY2hlbWFcbmNvbnN0IGNvbnRhY3RGb3JtU2NoZW1hID0gei5vYmplY3Qoe1xuICBmaXJzdE5hbWU6IHouc3RyaW5nKCkubWluKDEsICdGaXJzdCBuYW1lIGlzIHJlcXVpcmVkJyksXG4gIGxhc3ROYW1lOiB6LnN0cmluZygpLm1pbigxLCAnTGFzdCBuYW1lIGlzIHJlcXVpcmVkJyksXG4gIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKCdJbnZhbGlkIGVtYWlsIGFkZHJlc3MnKSxcbiAgcGhvbmU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgdHlwZTogei5lbnVtKFsncHJpbWFyeScsICdlbWVyZ2VuY3knLCAnb3RoZXInXSksXG59KTtcblxudHlwZSBDb250YWN0Rm9ybURhdGEgPSB6LmluZmVyPHR5cGVvZiBjb250YWN0Rm9ybVNjaGVtYT47XG5cbi8qKlxuICogUHJvcHMgZm9yIHRoZSByZXNpZGVuY2UgcGFnZSBpbm5lciBjb21wb25lbnRcbiAqL1xuaW50ZXJmYWNlIFJlc2lkZW5jZVByb3BzIHtcbiAgYnVpbGRpbmdJZD86IHN0cmluZztcbiAgc2hvd0JhY2tCdXR0b24/OiBib29sZWFuO1xuICBiYWNrQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG4gIG9uQmFjaz86ICgpID0+IHZvaWQ7XG59XG5cbi8qKlxuICogUmVzaWRlbmNlIHBhZ2UgY29tcG9uZW50IGZvciByZXNpZGVudHMuXG4gKi9cbmZ1bmN0aW9uIFJlc2lkZW5jZVBhZ2VJbm5lcih7IGJ1aWxkaW5nSWQsIHNob3dCYWNrQnV0dG9uLCBiYWNrQnV0dG9uTGFiZWwsIG9uQmFjayB9OiBSZXNpZGVuY2VQcm9wcykge1xuICBjb25zdCB7IHVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgY29uc3QgeyB0b2FzdCB9ID0gdXNlVG9hc3QoKTtcbiAgY29uc3QgeyB0IH0gPSB1c2VMYW5ndWFnZSgpO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIGNvbnN0IFssIG5hdmlnYXRlXSA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgY29uc3QgW3NlbGVjdGVkUmVzaWRlbmNlSWQsIHNldFNlbGVjdGVkUmVzaWRlbmNlSWRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IFtpc0NvbnRhY3REaWFsb2dPcGVuLCBzZXRJc0NvbnRhY3REaWFsb2dPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2VkaXRpbmdDb250YWN0LCBzZXRFZGl0aW5nQ29udGFjdF0gPSB1c2VTdGF0ZTxDb250YWN0IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtjdXJyZW50UGFnZSwgc2V0Q3VycmVudFBhZ2VdID0gdXNlU3RhdGUoMSk7XG4gIGNvbnN0IGl0ZW1zUGVyUGFnZSA9IDEwO1xuXG4gIGNvbnN0IGhhbmRsZUJhY2tUb0J1aWxkaW5nID0gKCkgPT4ge1xuICAgIG5hdmlnYXRlKCcvcmVzaWRlbnRzL3Jlc2lkZW5jZScpO1xuICB9O1xuXG4gIC8vIEZvcm0gZm9yIGNvbnRhY3QgbWFuYWdlbWVudFxuICBjb25zdCBjb250YWN0Rm9ybSA9IHVzZUZvcm08Q29udGFjdEZvcm1EYXRhPih7XG4gICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKGNvbnRhY3RGb3JtU2NoZW1hKSxcbiAgICBkZWZhdWx0VmFsdWVzOiB7XG4gICAgICBmaXJzdE5hbWU6ICcnLFxuICAgICAgbGFzdE5hbWU6ICcnLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgcGhvbmU6ICcnLFxuICAgICAgdHlwZTogJ3ByaW1hcnknLFxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIEZldGNoIHJlc2lkZW5jZXMgZm9yIHRoZSBzZWxlY3RlZCBidWlsZGluZ1xuICBjb25zdCB7XG4gICAgZGF0YTogYWNjZXNzaWJsZVJlc2lkZW5jZXMgPSBbXSxcbiAgICBpc0xvYWRpbmcsXG4gICAgZXJyb3I6IHJlc2lkZW5jZXNFcnJvcixcbiAgICByZWZldGNoOiByZWZldGNoUmVzaWRlbmNlcyxcbiAgfSA9IHVzZVF1ZXJ5KHtcbiAgICBxdWVyeUtleTogWycvYXBpL3VzZXJzL3Jlc2lkZW5jZXMnLCB1c2VyPy5pZCwgYnVpbGRpbmdJZF0sXG4gICAgcXVlcnlGbjogYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCF1c2VyPy5pZCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBhbGwgdXNlcidzIHJlc2lkZW5jZXMgZmlyc3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvdXNlcnMvJHt1c2VyLmlkfS9yZXNpZGVuY2VzYCwge1xuICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggcmVzaWRlbmNlcycpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBhbGxSZXNpZGVuY2VzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgXG4gICAgICAvLyBGaWx0ZXIgYnkgYnVpbGRpbmcgaWYgYnVpbGRpbmdJZCBpcyBwcm92aWRlZFxuICAgICAgaWYgKGJ1aWxkaW5nSWQpIHtcbiAgICAgICAgcmV0dXJuIGFsbFJlc2lkZW5jZXMuZmlsdGVyKChyZXNpZGVuY2U6IFJlc2lkZW5jZSkgPT4gcmVzaWRlbmNlLmJ1aWxkaW5nSWQgPT09IGJ1aWxkaW5nSWQpO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gYWxsUmVzaWRlbmNlcztcbiAgICB9LFxuICAgIGVuYWJsZWQ6ICEhdXNlcj8uaWQgJiYgISFidWlsZGluZ0lkLFxuICAgIHJlZmV0Y2hPbk1vdW50OiB0cnVlLFxuICAgIHN0YWxlVGltZTogMCxcbiAgfSk7XG5cbiAgLy8gRW5zdXJlIGFjY2Vzc2libGVSZXNpZGVuY2VzIGlzIGFsd2F5cyBhbiBhcnJheVxuICBjb25zdCBzYWZlQWNjZXNzaWJsZVJlc2lkZW5jZXMgPSBBcnJheS5pc0FycmF5KGFjY2Vzc2libGVSZXNpZGVuY2VzKSA/IGFjY2Vzc2libGVSZXNpZGVuY2VzIDogW107XG5cbiAgLy8gU2hvdyBhbGwgcmVzaWRlbmNlcyBmb3IgdGhlIHNlbGVjdGVkIGJ1aWxkaW5nXG4gIGNvbnN0IGZpbHRlcmVkUmVzaWRlbmNlcyA9IHNhZmVBY2Nlc3NpYmxlUmVzaWRlbmNlcztcblxuICAvLyBQYWdpbmF0aW9uIGNhbGN1bGF0aW9uc1xuICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKGZpbHRlcmVkUmVzaWRlbmNlcy5sZW5ndGggLyBpdGVtc1BlclBhZ2UpO1xuICBjb25zdCBzdGFydEluZGV4ID0gKGN1cnJlbnRQYWdlIC0gMSkgKiBpdGVtc1BlclBhZ2U7XG4gIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIGl0ZW1zUGVyUGFnZTtcbiAgY29uc3QgY3VycmVudFJlc2lkZW5jZXMgPSBmaWx0ZXJlZFJlc2lkZW5jZXMuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuXG4gIGNvbnN0IGhhbmRsZVByZXZpb3VzUGFnZSA9ICgpID0+IHtcbiAgICBzZXRDdXJyZW50UGFnZSgocHJldikgPT4gTWF0aC5tYXgoMSwgcHJldiAtIDEpKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVOZXh0UGFnZSA9ICgpID0+IHtcbiAgICBzZXRDdXJyZW50UGFnZSgocHJldikgPT4gTWF0aC5taW4odG90YWxQYWdlcywgcHJldiArIDEpKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVQYWdlQ2xpY2sgPSAocGFnZTogbnVtYmVyKSA9PiB7XG4gICAgc2V0Q3VycmVudFBhZ2UocGFnZSk7XG4gIH07XG5cbiAgLy8gU2VsZWN0IGZpcnN0IHJlc2lkZW5jZSBieSBkZWZhdWx0XG4gIGNvbnN0IHNlbGVjdGVkUmVzaWRlbmNlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFzZWxlY3RlZFJlc2lkZW5jZUlkICYmIGZpbHRlcmVkUmVzaWRlbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBzZXRTZWxlY3RlZFJlc2lkZW5jZUlkKGZpbHRlcmVkUmVzaWRlbmNlc1swXS5pZCk7XG4gICAgICByZXR1cm4gZmlsdGVyZWRSZXNpZGVuY2VzWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRSZXNpZGVuY2VzLmZpbmQoKHIpID0+IHIuaWQgPT09IHNlbGVjdGVkUmVzaWRlbmNlSWQpIHx8IG51bGw7XG4gIH0sIFtzZWxlY3RlZFJlc2lkZW5jZUlkLCBmaWx0ZXJlZFJlc2lkZW5jZXNdKTtcblxuICAvLyBGZXRjaCBjb250YWN0cyBmb3Igc2VsZWN0ZWQgcmVzaWRlbmNlXG4gIGNvbnN0IHsgZGF0YTogY29udGFjdHMgPSBbXSwgaXNMb2FkaW5nOiBjb250YWN0c0xvYWRpbmcgfSA9IHVzZVF1ZXJ5KHtcbiAgICBxdWVyeUtleTogWycvYXBpL2NvbnRhY3RzJywgc2VsZWN0ZWRSZXNpZGVuY2VJZF0sXG4gICAgcXVlcnlGbjogYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCFzZWxlY3RlZFJlc2lkZW5jZUlkKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvcmVzaWRlbmNlcy8ke3NlbGVjdGVkUmVzaWRlbmNlSWR9L2NvbnRhY3RzYCk7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfSxcbiAgICBlbmFibGVkOiAhIXNlbGVjdGVkUmVzaWRlbmNlSWQsXG4gIH0pO1xuXG4gIC8vIE11dGF0aW9ucyBmb3IgY29udGFjdCBtYW5hZ2VtZW50XG4gIGNvbnN0IGFkZENvbnRhY3RNdXRhdGlvbiA9IHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiBhc3luYyAoY29udGFjdERhdGE6IENvbnRhY3RGb3JtRGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIGFwaVJlcXVlc3QoJ1BPU1QnLCBgL2FwaS9yZXNpZGVuY2VzLyR7c2VsZWN0ZWRSZXNpZGVuY2VJZH0vY29udGFjdHNgLCBjb250YWN0RGF0YSk7XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6IHQoJ3N1Y2Nlc3MnKSxcbiAgICAgICAgZGVzY3JpcHRpb246IHQoJ2NvbnRhY3RBZGRlZFN1Y2Nlc3NmdWxseScpLFxuICAgICAgfSk7XG4gICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbJy9hcGkvY29udGFjdHMnXSB9KTtcbiAgICAgIHNldElzQ29udGFjdERpYWxvZ09wZW4oZmFsc2UpO1xuICAgICAgY29udGFjdEZvcm0ucmVzZXQoKTtcbiAgICAgIHNldEVkaXRpbmdDb250YWN0KG51bGwpO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycm9yOiBhbnkpID0+IHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6IHQoJ2Vycm9yJyksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBlcnJvcj8ubWVzc2FnZSB8fCB0KCdmYWlsZWRUb0FkZENvbnRhY3QnKSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHVwZGF0ZUNvbnRhY3RNdXRhdGlvbiA9IHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbkZuOiBhc3luYyAoY29udGFjdERhdGE6IENvbnRhY3RGb3JtRGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIGFwaVJlcXVlc3QoJ1BVVCcsIGAvYXBpL2NvbnRhY3RzLyR7ZWRpdGluZ0NvbnRhY3Q/LmlkfWAsIGNvbnRhY3REYXRhKTtcbiAgICB9LFxuICAgIG9uU3VjY2VzczogKCkgPT4ge1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogdCgnc3VjY2VzcycpLFxuICAgICAgICBkZXNjcmlwdGlvbjogdCgnY29udGFjdFVwZGF0ZWRTdWNjZXNzZnVsbHknKSxcbiAgICAgIH0pO1xuICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoeyBxdWVyeUtleTogWycvYXBpL2NvbnRhY3RzJ10gfSk7XG4gICAgICBzZXRJc0NvbnRhY3REaWFsb2dPcGVuKGZhbHNlKTtcbiAgICAgIGNvbnRhY3RGb3JtLnJlc2V0KCk7XG4gICAgICBzZXRFZGl0aW5nQ29udGFjdChudWxsKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiB0KCdlcnJvcicpLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3I/Lm1lc3NhZ2UgfHwgdCgnZmFpbGVkVG9VcGRhdGVDb250YWN0JyksXG4gICAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBkZWxldGVDb250YWN0TXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKGNvbnRhY3RJZDogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gYXBpUmVxdWVzdCgnREVMRVRFJywgYC9hcGkvY29udGFjdHMvJHtjb250YWN0SWR9YCk7XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6ICgpID0+IHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6IHQoJ3N1Y2Nlc3MnKSxcbiAgICAgICAgZGVzY3JpcHRpb246IHQoJ2NvbnRhY3REZWxldGVkU3VjY2Vzc2Z1bGx5JyksXG4gICAgICB9KTtcbiAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHsgcXVlcnlLZXk6IFsnL2FwaS9jb250YWN0cyddIH0pO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycm9yOiBhbnkpID0+IHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6IHQoJ2Vycm9yJyksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBlcnJvcj8ubWVzc2FnZSB8fCB0KCdmYWlsZWRUb0RlbGV0ZUNvbnRhY3QnKSxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdENvbnRhY3QgPSAoZGF0YTogQ29udGFjdEZvcm1EYXRhKSA9PiB7XG4gICAgaWYgKGVkaXRpbmdDb250YWN0KSB7XG4gICAgICB1cGRhdGVDb250YWN0TXV0YXRpb24ubXV0YXRlKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZGRDb250YWN0TXV0YXRpb24ubXV0YXRlKGRhdGEpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVFZGl0Q29udGFjdCA9IChjb250YWN0OiBDb250YWN0KSA9PiB7XG4gICAgc2V0RWRpdGluZ0NvbnRhY3QoY29udGFjdCk7XG4gICAgY29udGFjdEZvcm0ucmVzZXQoe1xuICAgICAgZmlyc3ROYW1lOiBjb250YWN0LmZpcnN0TmFtZSxcbiAgICAgIGxhc3ROYW1lOiBjb250YWN0Lmxhc3ROYW1lLFxuICAgICAgZW1haWw6IGNvbnRhY3QuZW1haWwsXG4gICAgICBwaG9uZTogY29udGFjdC5waG9uZSB8fCAnJyxcbiAgICAgIHR5cGU6IGNvbnRhY3QudHlwZSBhcyBhbnksXG4gICAgfSk7XG4gICAgc2V0SXNDb250YWN0RGlhbG9nT3Blbih0cnVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVEZWxldGVDb250YWN0ID0gKGNvbnRhY3Q6IENvbnRhY3QpID0+IHtcbiAgICBpZiAoY29uZmlybSgnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIGNvbnRhY3Q/JykpIHtcbiAgICAgIGRlbGV0ZUNvbnRhY3RNdXRhdGlvbi5tdXRhdGUoY29udGFjdC5pZCk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChpc0xvYWRpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtMSBmbGV4IGZsZXgtY29sIG92ZXJmbG93LWhpZGRlbic+XG4gICAgICAgIDxIZWFkZXJcbiAgICAgICAgICB0aXRsZT17dCgnbXlSZXNpZGVuY2UnKX1cbiAgICAgICAgICBzdWJ0aXRsZT17dCgndmlld1Jlc2lkZW5jZUluZm8nKX1cbiAgICAgICAgLz5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC0xIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyJz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGV4dC1jZW50ZXInPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FuaW1hdGUtc3BpbiByb3VuZGVkLWZ1bGwgaC04IHctOCBib3JkZXItYi0yIGJvcmRlci1ncmF5LTkwMCBteC1hdXRvIG1iLTQnPjwvZGl2PlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSd0ZXh0LWdyYXktNjAwJz57dCgnbG9hZGluZycpfTwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaWYgKGZpbHRlcmVkUmVzaWRlbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtMSBmbGV4IGZsZXgtY29sIG92ZXJmbG93LWhpZGRlbic+XG4gICAgICAgIDxIZWFkZXJcbiAgICAgICAgICB0aXRsZT17dCgnbXlSZXNpZGVuY2UnKX1cbiAgICAgICAgICBzdWJ0aXRsZT17dCgndmlld1Jlc2lkZW5jZUluZm8nKX1cbiAgICAgICAgLz5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC0xIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNic+XG4gICAgICAgICAgPE5vRGF0YUNhcmRcbiAgICAgICAgICAgIGljb249e0hvbWV9XG4gICAgICAgICAgICB0aXRsZUtleT1cIm5vUmVzaWRlbmNlc0ZvdW5kXCJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uS2V5PXt1c2VyPy5yb2xlICYmIFsnYWRtaW4nLCAnbWFuYWdlciddLmluY2x1ZGVzKHVzZXIucm9sZSlcbiAgICAgICAgICAgICAgPyAnbm9SZXNpZGVuY2VzRm91bmRPcmcnXG4gICAgICAgICAgICAgIDogJ25vdEFzc2lnbmVkUmVzaWRlbmNlcyd9XG4gICAgICAgICAgICB0ZXN0SWQ9XCJuby1yZXNpZGVuY2VzLW1lc3NhZ2VcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtMSBmbGV4IGZsZXgtY29sIG92ZXJmbG93LWhpZGRlbic+XG4gICAgICA8SGVhZGVyXG4gICAgICAgIHRpdGxlPXt0KCdteVJlc2lkZW5jZScpfVxuICAgICAgICBzdWJ0aXRsZT17dCgnbXlSZXNpZGVuY2VJbmZvJyl9XG4gICAgICAvPlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC0xIG92ZXJmbG93LWF1dG8gcC02Jz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J21heC13LTd4bCBteC1hdXRvIHNwYWNlLXktNic+XG4gICAgICAgICAgey8qIEJhY2sgTmF2aWdhdGlvbiAqL31cbiAgICAgICAgICB7c2hvd0JhY2tCdXR0b24gJiYgb25CYWNrICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWItNlwiPlxuICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJvdXRsaW5lXCIgb25DbGljaz17b25CYWNrfSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICAgICAgICAgIDxBcnJvd0xlZnQgY2xhc3NOYW1lPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICAgICAge2JhY2tCdXR0b25MYWJlbH1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuXG4gICAgICAgICAgey8qIFJlc2lkZW5jZSBTZWxlY3Rpb24gKi99XG4gICAgICAgICAge2ZpbHRlcmVkUmVzaWRlbmNlcy5sZW5ndGggPiAxICYmIChcbiAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgICA8Q2FyZFRpdGxlIGNsYXNzTmFtZT0nZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTInPlxuICAgICAgICAgICAgICAgICAgPEhvbWUgY2xhc3NOYW1lPSd3LTUgaC01JyAvPlxuICAgICAgICAgICAgICAgICAgU2VsZWN0IFJlc2lkZW5jZVxuICAgICAgICAgICAgICAgIDwvQ2FyZFRpdGxlPlxuICAgICAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleCBmbGV4LWNvbCBtZDpmbGV4LXJvdyBnYXAtNCc+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC0xJz5cbiAgICAgICAgICAgICAgICAgICAgPExhYmVsIGNsYXNzTmFtZT0ndGV4dC1zbSBmb250LW1lZGl1bSBtYi0yIGJsb2NrJz5cbiAgICAgICAgICAgICAgICAgICAgICB7dCgnc2VsZWN0UmVzaWRlbmNlJyl9XG4gICAgICAgICAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3QgdmFsdWU9e3NlbGVjdGVkUmVzaWRlbmNlSWR9IG9uVmFsdWVDaGFuZ2U9e3NldFNlbGVjdGVkUmVzaWRlbmNlSWR9PlxuICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RUcmlnZ2VyIGNsYXNzTmFtZT0ndy1mdWxsJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RWYWx1ZSBwbGFjZWhvbGRlcj17dCgnc2VsZWN0QVJlc2lkZW5jZScpfSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0VHJpZ2dlcj5cbiAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtmaWx0ZXJlZFJlc2lkZW5jZXMubWFwKChyZXNpZGVuY2UpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdEl0ZW0ga2V5PXtyZXNpZGVuY2UuaWR9IHZhbHVlPXtyZXNpZGVuY2UuaWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0KCd1bml0Jyl9IHtyZXNpZGVuY2UudW5pdE51bWJlcn0gLSB7cmVzaWRlbmNlLmJ1aWxkaW5nPy5uYW1lIHx8ICdOL0EnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIHsvKiBSZXNpZGVuY2UgQ2FyZHMgKi99XG4gICAgICAgICAge2N1cnJlbnRSZXNpZGVuY2VzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2dyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgbGc6Z3JpZC1jb2xzLTMgZ2FwLTYnPlxuICAgICAgICAgICAgICB7Y3VycmVudFJlc2lkZW5jZXMubWFwKChyZXNpZGVuY2UpID0+IChcbiAgICAgICAgICAgICAgICA8Q2FyZCBrZXk9e3Jlc2lkZW5jZS5pZH0gY2xhc3NOYW1lPSdob3ZlcjpzaGFkb3ctbGcgdHJhbnNpdGlvbi1zaGFkb3cnPlxuICAgICAgICAgICAgICAgICAgPENhcmRIZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgIDxDYXJkVGl0bGUgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMic+XG4gICAgICAgICAgICAgICAgICAgICAgPEhvbWUgY2xhc3NOYW1lPSd3LTUgaC01JyAvPlxuICAgICAgICAgICAgICAgICAgICAgIHt0KCd1bml0Jyl9IHtyZXNpZGVuY2UudW5pdE51bWJlcn1cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0ZXh0LXNtIHRleHQtZ3JheS02MDAnPlxuICAgICAgICAgICAgICAgICAgICAgIHtyZXNpZGVuY2UuYnVpbGRpbmc/Lm5hbWUgfHwgdCgnYnVpbGRpbmdJbmZvVW5hdmFpbGFibGUnKX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPSdzcGFjZS15LTQnPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZ3JpZCBncmlkLWNvbHMtMSBnYXAtMyc+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzc05hbWU9J3RleHQteHMgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTUwMCc+e3QoJ2FkZHJlc3MnKX08L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSd0ZXh0LXNtIHRleHQtZ3JheS03MDAnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVzaWRlbmNlLmJ1aWxkaW5nPy5hZGRyZXNzIHx8IHQoJ2FkZHJlc3NVbmF2YWlsYWJsZScpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSd0ZXh0LXNtIHRleHQtZ3JheS03MDAnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVzaWRlbmNlLmJ1aWxkaW5nPy5jaXR5IHx8ICdOL0EnfSx7JyAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVzaWRlbmNlLmJ1aWxkaW5nPy5wcm92aW5jZSB8fCAnTi9BJ317JyAnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVzaWRlbmNlLmJ1aWxkaW5nPy5wb3N0YWxDb2RlIHx8ICcnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2dyaWQgZ3JpZC1jb2xzLTIgZ2FwLTMnPlxuICAgICAgICAgICAgICAgICAgICAgICAge3Jlc2lkZW5jZS5mbG9vciAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsIGNsYXNzTmFtZT0ndGV4dC14cyBmb250LW1lZGl1bSB0ZXh0LWdyYXktNTAwJz57dCgnZmxvb3InKX08L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC1zbSB0ZXh0LWdyYXktNzAwJz57cmVzaWRlbmNlLmZsb29yfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVzaWRlbmNlLnNxdWFyZUZvb3RhZ2UgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzc05hbWU9J3RleHQteHMgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTUwMCc+e3QoJ3NxdWFyZUZvb3RhZ2UnKX08L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC1zbSB0ZXh0LWdyYXktNzAwJz57cmVzaWRlbmNlLnNxdWFyZUZvb3RhZ2V9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNpZGVuY2UuYmVkcm9vbXMgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzc05hbWU9J3RleHQteHMgZm9udC1tZWRpdW0gdGV4dC1ncmF5LTUwMCc+e3QoJ2JlZHJvb21zJyl9PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J3RleHQtc20gdGV4dC1ncmF5LTcwMCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QmVkIGNsYXNzTmFtZT0ndy00IGgtNCcgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNpZGVuY2UuYmVkcm9vbXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNpZGVuY2UuYmF0aHJvb21zICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWwgY2xhc3NOYW1lPSd0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAnPnt0KCdiYXRocm9vbXMnKX08L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC1zbSB0ZXh0LWdyYXktNzAwIGZsZXggaXRlbXMtY2VudGVyIGdhcC0xJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCYXRoIGNsYXNzTmFtZT0ndy00IGgtNCcgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNpZGVuY2UuYmF0aHJvb21zfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAge3Jlc2lkZW5jZS5iYWxjb255ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxCYWRnZSB2YXJpYW50PSdzZWNvbmRhcnknIGNsYXNzTmFtZT0ndGV4dC14cyc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3QoJ2JhbGNvbnknKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CYWRnZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgICB7cmVzaWRlbmNlLnBhcmtpbmdTcGFjZU51bWJlcnMgJiYgcmVzaWRlbmNlLnBhcmtpbmdTcGFjZU51bWJlcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWwgY2xhc3NOYW1lPSd0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAnPnt0KCdwYXJraW5nJyl9PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXggZmxleC13cmFwIGdhcC0xIG10LTEnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNpZGVuY2UucGFya2luZ1NwYWNlTnVtYmVycy5tYXAoKHNwYWNlLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJhZGdlIGtleT17aW5kZXh9IHZhcmlhbnQ9J291dGxpbmUnIGNsYXNzTmFtZT0ndGV4dC14cyBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXIgY2xhc3NOYW1lPSd3LTMgaC0zJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3BhY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0JhZGdlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgICAgICAgICB7cmVzaWRlbmNlLnN0b3JhZ2VTcGFjZU51bWJlcnMgJiYgcmVzaWRlbmNlLnN0b3JhZ2VTcGFjZU51bWJlcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWwgY2xhc3NOYW1lPSd0ZXh0LXhzIGZvbnQtbWVkaXVtIHRleHQtZ3JheS01MDAnPnt0KCdzdG9yYWdlJyl9PC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXggZmxleC13cmFwIGdhcC0xIG10LTEnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNpZGVuY2Uuc3RvcmFnZVNwYWNlTnVtYmVycy5tYXAoKHNwYWNlLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJhZGdlIGtleT17aW5kZXh9IHZhcmlhbnQ9J291dGxpbmUnIGNsYXNzTmFtZT0ndGV4dC14cyBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQYWNrYWdlIGNsYXNzTmFtZT0ndy0zIGgtMycgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3NwYWNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CYWRnZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncHQtMyBib3JkZXItdCBzcGFjZS15LTInPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9e2AvcmVzaWRlbnRzL3Jlc2lkZW5jZXMvJHtyZXNpZGVuY2UuaWR9L2RvY3VtZW50c2B9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB2YXJpYW50PSdvdXRsaW5lJyBzaXplPSdzbScgY2xhc3NOYW1lPSd3LWZ1bGwganVzdGlmeS1zdGFydCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxGaWxlVGV4dCBjbGFzc05hbWU9J3ctNCBoLTQgbXItMicgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge3QoJ2RvY3VtZW50cycpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIGhyZWY9e2AvcmVzaWRlbnRzL2J1aWxkaW5ncy8ke3Jlc2lkZW5jZS5idWlsZGluZ0lkfS9kb2N1bWVudHNgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0nb3V0bGluZScgc2l6ZT0nc20nIGNsYXNzTmFtZT0ndy1mdWxsIGp1c3RpZnktc3RhcnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnVpbGRpbmcgY2xhc3NOYW1lPSd3LTQgaC00IG1yLTInIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt0KCdidWlsZGluZ0RvY3VtZW50cycpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG5cbiAgICAgICAgICB7LyogUGFnaW5hdGlvbiAqL31cbiAgICAgICAgICB7dG90YWxQYWdlcyA+IDEgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIHNwYWNlLXgtMic+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICB2YXJpYW50PSdvdXRsaW5lJ1xuICAgICAgICAgICAgICAgIHNpemU9J3NtJ1xuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVByZXZpb3VzUGFnZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17Y3VycmVudFBhZ2UgPT09IDF9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8Q2hldnJvbkxlZnQgY2xhc3NOYW1lPSdoLTQgdy00JyAvPlxuICAgICAgICAgICAgICAgIHt0KCdwcmV2aW91cycpfVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0xJz5cbiAgICAgICAgICAgICAgICB7QXJyYXkuZnJvbSh7IGxlbmd0aDogTWF0aC5taW4oNSwgdG90YWxQYWdlcykgfSkubWFwKChfLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICBsZXQgcGFnZU51bTtcbiAgICAgICAgICAgICAgICAgIGlmICh0b3RhbFBhZ2VzIDw9IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZU51bSA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZSA8PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VOdW0gPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBhZ2UgPj0gdG90YWxQYWdlcyAtIDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZU51bSA9IHRvdGFsUGFnZXMgLSA0ICsgaTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2VOdW0gPSBjdXJyZW50UGFnZSAtIDIgKyBpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtwYWdlTnVtfVxuICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9e2N1cnJlbnRQYWdlID09PSBwYWdlTnVtID8gJ2RlZmF1bHQnIDogJ291dGxpbmUnfVxuICAgICAgICAgICAgICAgICAgICAgIHNpemU9J3NtJ1xuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVBhZ2VDbGljayhwYWdlTnVtKX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHtwYWdlTnVtfVxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICB2YXJpYW50PSdvdXRsaW5lJ1xuICAgICAgICAgICAgICAgIHNpemU9J3NtJ1xuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZU5leHRQYWdlfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtjdXJyZW50UGFnZSA9PT0gdG90YWxQYWdlc31cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0KCduZXh0Jyl9XG4gICAgICAgICAgICAgICAgPENoZXZyb25SaWdodCBjbGFzc05hbWU9J2gtNCB3LTQnIC8+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIHsvKiBQYWdlIGluZm8gKi99XG4gICAgICAgICAge2ZpbHRlcmVkUmVzaWRlbmNlcy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0ZXh0LWNlbnRlciB0ZXh0LXNtIHRleHQtbXV0ZWQtZm9yZWdyb3VuZCBtdC00Jz5cbiAgICAgICAgICAgICAge3QoJ3Nob3dpbmcnKX0ge3N0YXJ0SW5kZXggKyAxfSB0byB7TWF0aC5taW4oZW5kSW5kZXgsIGZpbHRlcmVkUmVzaWRlbmNlcy5sZW5ndGgpfSBvZnsnICd9XG4gICAgICAgICAgICAgIHtmaWx0ZXJlZFJlc2lkZW5jZXMubGVuZ3RofSB7dCgncmVzaWRlbmNlcycpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuLy8gV3JhcCB3aXRoIGhpZXJhcmNoaWNhbCBzZWxlY3Rpb24gSE9DIHVzaW5nIGJ1aWxkaW5nIGhpZXJhcmNoeSAocmVzaWRlbnRzIG9ubHkgc2VlIGJ1aWxkaW5ncyB0aGV5IGhhdmUgcmVzaWRlbmNlcyBpbilcbmNvbnN0IFJlc2lkZW5jZVBhZ2UgPSB3aXRoSGllcmFyY2hpY2FsU2VsZWN0aW9uKFJlc2lkZW5jZVBhZ2VJbm5lciwge1xuICBoaWVyYXJjaHk6IFsnYnVpbGRpbmcnXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJlc2lkZW5jZVBhZ2U7Il0sInZlcnNpb24iOjN9