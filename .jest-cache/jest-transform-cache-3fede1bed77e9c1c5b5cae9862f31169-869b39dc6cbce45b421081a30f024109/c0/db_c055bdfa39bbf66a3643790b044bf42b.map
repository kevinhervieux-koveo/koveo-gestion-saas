{"file":"/home/runner/workspace/server/db.ts","mappings":";;;AAAA,yDAAgD;AAChD,qDAAgD;AAChD,0CAAwC;AAExC,iGAAiG;AACjG,2CAmBwB;AAExB,qFAAqF;AACrF,MAAM,WAAW,GAAG,cAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;AAExC,IAAI,CAAC,WAAW,EAAE,CAAC;IACjB,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;AACvF,CAAC;AAED,MAAM,cAAc,GAAG,WAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAM,CAAC,MAAM,CAAC,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AACpI,OAAO,CAAC,GAAG,CAAC,qCAAqC,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;AACzF,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,cAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtD,OAAO,CAAC,GAAG,CAAC,sBAAsB,cAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,4BAA4B,WAAW,CAAC,CAAC;AAE5I;;;;GAIG;AACU,QAAA,GAAG,GAAG,IAAA,iBAAI,EAAC,WAAW,CAAC,CAAC;AAErC,kBAAkB;AAClB,CAAC,KAAK,IAAI,EAAE;IACV,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,IAAA,WAAG,EAAA,kBAAkB,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;IAC/F,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAChE,CAAC;AACH,CAAC,CAAC,EAAE,CAAC;AAEL,kFAAkF;AAClF,MAAM,MAAM,GAAG;IACb,KAAK,EAAL,cAAK;IACL,aAAa,EAAb,sBAAa;IACb,SAAS,EAAT,kBAAS;IACT,UAAU,EAAV,mBAAU;IACV,iBAAiB,EAAjB,0BAAiB;IACjB,cAAc,EAAd,uBAAc;IACd,WAAW,EAAX,oBAAW;IACX,SAAS,EAAT,kBAAS;IACT,KAAK,EAAL,cAAK;IACL,OAAO,EAAP,gBAAO;IACP,YAAY,EAAZ,qBAAY;IACZ,mBAAmB,EAAnB,4BAAmB;IACnB,mBAAmB,EAAnB,4BAAmB;IACnB,WAAW,EAAX,oBAAW;IACX,eAAe,EAAf,wBAAe;IACf,eAAe,EAAf,wBAAe;IACf,OAAO,EAAP,gBAAO;IACP,cAAc,EAAd,uBAAc;CACf,CAAC;AAEF;;;;GAIG;AACU,QAAA,EAAE,GAAG,IAAA,mBAAO,EAAC,WAAG,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;AAE3C,qBAAqB;AACrB,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAElF,0DAA0D;AAC7C,QAAA,IAAI,GAAG,WAAG,CAAC","names":[],"sources":["/home/runner/workspace/server/db.ts"],"sourcesContent":["import { neon } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { config } from './config/index';\n\n// Import only tables that exist, not relations to avoid circular dependency issues in production\nimport {\n  users,\n  organizations,\n  buildings,\n  residences,\n  userOrganizations,\n  userResidences,\n  invitations,\n  documents,\n  bills,\n  demands,\n  commonSpaces,\n  passwordResetTokens,\n  maintenanceRequests,\n  permissions,\n  userPermissions,\n  rolePermissions,\n  budgets,\n  monthlyBudgets,\n} from '@shared/schema';\n\n// Use correct database URL based on environment (production uses DATABASE_URL_KOVEO)\nconst databaseUrl = config.database.url;\n\nif (!databaseUrl) {\n  throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');\n}\n\nconst isUsingKoveoDb = databaseUrl.includes('DATABASE_URL_KOVEO') || (config.server.isProduction && process.env.DATABASE_URL_KOVEO);\nconsole.log('üîó Connecting to database with URL:', databaseUrl.substring(0, 50) + '...');\nconsole.log('üåç Environment:', config.server.nodeEnv);\nconsole.log(`üìä Database: Using ${config.server.isProduction ? 'PRODUCTION (DATABASE_URL_KOVEO)' : 'DEVELOPMENT (DATABASE_URL)'} database`);\n\n/**\n * Neon serverless database connection using HTTP.\n * Uses the same pattern as your successful test code.\n * Optimized for serverless environments like Replit deployments.\n */\nexport const sql = neon(databaseUrl);\n\n// Test connection\n(async () => {\n  try {\n    const result = await sql`SELECT version()`;\n    console.log('‚úÖ Database connection successful:', result[0].version.substring(0, 50) + '...');\n  } catch (error: any) {\n    console.error('‚ùå Database connection failed:', error.message);\n  }\n})();\n\n// Create schema object with only tables (no relations to avoid production errors)\nconst schema = {\n  users,\n  organizations,\n  buildings,\n  residences,\n  userOrganizations,\n  userResidences,\n  invitations,\n  documents,\n  bills,\n  demands,\n  commonSpaces,\n  passwordResetTokens,\n  maintenanceRequests,\n  permissions,\n  userPermissions,\n  rolePermissions,\n  budgets,\n  monthlyBudgets,\n};\n\n/**\n * Drizzle ORM database instance with table definitions only.\n * Provides type-safe database operations for the Quebec property management system.\n * Uses HTTP connection for better compatibility with serverless environments.\n */\nexport const db = drizzle(sql, { schema });\n\n// Log schema loading\nconsole.log('üìä Database initialized with', Object.keys(schema).length, 'tables');\n\n// For compatibility, export sql as pool for session store\nexport const pool = sql;\n"],"version":3}