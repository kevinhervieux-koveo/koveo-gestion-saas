{"file":"/home/runner/workspace/server/api/contacts.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/contacts.ts"],"sourcesContent":["import { Express } from 'express';\nimport { db } from '../db';\nimport {\n  contacts,\n  residences,\n  buildings,\n  organizations,\n  insertContactSchema,\n} from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport { requireAuth } from '../auth/index';\n\n/**\n * Register contact routes for managing entity contacts.\n *\n * @param app - Express application instance.\n */\n/**\n * RegisterContactRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerContactRoutes(app: Express) {\n  // Get contacts for a specific entity\n  app.get('/api/contacts/:entity/:entityId', requireAuth, async (req: any, res: any) => {\n    try {\n      const { entity, entityId } = req.params;\n      const user = req.user;\n\n      // Validate entity type\n      if (!['organization', 'building', 'residence'].includes(entity)) {\n        return res.status(400).json({ message: 'Invalid entity type' });\n      }\n\n      // Get contacts\n      const entityContacts = await db\n        .select()\n        .from(contacts)\n        .where(\n          and(\n            eq(contacts.entity, entity as any),\n            eq(contacts.entityId, entityId),\n            eq(contacts.isActive, true)\n          )\n        );\n\n      res.json(entityContacts);\n    } catch (error: any) {\n      console.error('‚ùå Error fetching entity contacts:', error);\n      res.status(500).json({ message: 'Failed to fetch contacts' });\n    }\n  });\n\n  // Get contacts for a residence with access control\n  app.get('/api/residences/:residenceId/contacts', requireAuth, async (req: any, res: any) => {\n    try {\n      const { residenceId } = req.params;\n      const user = req.user;\n\n      // Check if user has access to this residence\n      if (user.role !== 'admin') {\n        const hasAccess = await db\n          .select()\n          .from(residences)\n          .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n          .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n          .where(and(eq(residences.id, residenceId), eq(residences.isActive, true)));\n\n        if (hasAccess.length === 0) {\n          return res.status(403).json({ message: 'Access denied' });\n        }\n      }\n\n      // Get contacts for the residence\n      const residenceContacts = await db\n        .select()\n        .from(contacts)\n        .where(\n          and(\n            eq(contacts.entity, 'residence'),\n            eq(contacts.entityId, residenceId),\n            eq(contacts.isActive, true)\n          )\n        );\n\n      res.json(residenceContacts);\n    } catch (error: any) {\n      console.error('‚ùå Error fetching residence contacts:', error);\n      res.status(500).json({ message: 'Failed to fetch residence contacts' });\n    }\n  });\n\n  // Get contacts with filtering by entity and entityId\n  app.get('/api/contacts', requireAuth, async (req: any, res: any) => {\n    try {\n      const { entity, entityId } = req.query;\n      const user = req.user;\n\n      if (!entity || !entityId) {\n        // Return empty array instead of error for missing parameters\n        return res.json([]);\n      }\n\n      // Check permissions for building contacts\n      if (entity === 'building') {\n        // Anyone can view building contacts for buildings they have access to\n        const hasAccess = await db\n          .select()\n          .from(buildings)\n          .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n          .where(and(eq(buildings.id, entityId), eq(buildings.isActive, true)));\n\n        if (hasAccess.length === 0) {\n          return res.status(404).json({ message: 'Building not found' });\n        }\n      }\n\n      // Get contacts for the specified entity\n      const entityContacts = await db\n        .select()\n        .from(contacts)\n        .where(\n          and(\n            eq(contacts.entity, entity as 'building' | 'residence' | 'organization'),\n            eq(contacts.entityId, entityId),\n            eq(contacts.isActive, true)\n          )\n        );\n\n      res.json(entityContacts);\n    } catch (error: any) {\n      console.error('‚ùå Error fetching contacts:', error);\n      res.status(500).json({ message: 'Failed to fetch contacts' });\n    }\n  });\n\n  // Create a new contact\n  app.post('/api/contacts', requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user;\n      const validatedData = insertContactSchema.parse(req.body);\n\n      // Check permissions based on user role and entity\n      const { entity, entityId, name, email, phone, contactCategory } = validatedData;\n\n      // Only managers and admins can add building contacts\n      if (entity === 'building' && user.role !== 'admin' && user.role !== 'manager') {\n        return res\n          .status(403)\n          .json({ message: 'Only managers and admins can add building contacts' });\n      }\n\n      // Verify entity exists based on type\n      if (entity === 'residence') {\n        const residence = await db\n          .select()\n          .from(residences)\n          .where(eq(residences.id, entityId))\n          .limit(1);\n\n        if (residence.length === 0) {\n          return res.status(400).json({ message: 'Residence not found' });\n        }\n      } else if (entity === 'building') {\n        const building = await db\n          .select()\n          .from(buildings)\n          .where(eq(buildings.id, entityId))\n          .limit(1);\n\n        if (building.length === 0) {\n          return res.status(400).json({ message: 'Building not found' });\n        }\n      }\n\n      // Create the contact\n      const [newContact] = await db\n        .insert(contacts)\n        .values([\n          {\n            ...validatedData,\n            entity: validatedData.entity as 'organization' | 'building' | 'residence',\n            contactCategory: validatedData.contactCategory as\n              | 'resident'\n              | 'manager'\n              | 'tenant'\n              | 'maintenance'\n              | 'other',\n          },\n        ])\n        .returning();\n\n      res.status(201).json(newContact);\n    } catch (error: any) {\n      console.error('‚ùå Error creating contact:', error);\n      res.status(500).json({ message: 'Failed to create contact' });\n    }\n  });\n\n  // Update a contact\n  app.patch('/api/contacts/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n      const updates = req.body;\n\n      // Get the existing contact\n      const existing = await db.select().from(contacts).where(eq(contacts.id, id)).limit(1);\n\n      if (existing.length === 0) {\n        return res.status(404).json({ message: 'Contact not found' });\n      }\n\n      const contact = existing[0];\n\n      // Check permissions - only managers and admins can edit contacts\n      if (user.role !== 'admin' && user.role !== 'manager') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Update the contact\n      const [updatedContact] = await db\n        .update(contacts)\n        .set({\n          ...updates,\n          updatedAt: new Date(),\n        })\n        .where(eq(contacts.id, id))\n        .returning();\n\n      res.json(updatedContact);\n    } catch (error: any) {\n      console.error('‚ùå Error updating contact:', error);\n      res.status(500).json({ message: 'Failed to update contact' });\n    }\n  });\n\n  // Delete a contact\n  app.delete('/api/contacts/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n\n      // Get the existing contact\n      const existing = await db.select().from(contacts).where(eq(contacts.id, id)).limit(1);\n\n      if (existing.length === 0) {\n        return res.status(404).json({ message: 'Contact not found' });\n      }\n\n      const contact = existing[0];\n\n      // Check permissions - residents, managers and admins can delete contacts\n      if (user.role !== 'admin' && user.role !== 'manager' && user.role !== 'resident') {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Soft delete the contact\n      await db\n        .update(contacts)\n        .set({\n          isActive: false,\n          updatedAt: new Date(),\n        })\n        .where(eq(contacts.id, id));\n\n      res.json({ message: 'Contact deleted successfully' });\n    } catch (error: any) {\n      console.error('‚ùå Error deleting contact:', error);\n      res.status(500).json({ message: 'Failed to delete contact' });\n    }\n  });\n}\n"],"version":3}