ccbc6e5285109179a2aba6da3c196fd3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("@shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const operations_1 = require("../../server/api/buildings/operations");
(0, globals_1.describe)('Residence Count Adjustment Features', () => {
    let testOrganizationId;
    let testBuildingId;
    let testUserId;
    let createdResidenceIds = [];
    let createdDocumentIds = [];
    (0, globals_1.beforeEach)(async () => {
        // Clean up previous test data
        await cleanup();
        // Create test organization
        const org = await db_1.db
            .insert(schema_1.organizations)
            .values({
            name: 'Test Residence Adjustment Org',
            type: 'association',
            address: '123 Test Ave',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1H 1H1',
            phone: '514-555-0123',
            email: 'test@example.com',
            isActive: true,
        })
            .returning();
        testOrganizationId = org[0].id;
        // Create test user
        const user = await db_1.db
            .insert(schema_1.users)
            .values({
            username: `test.residenceadj.${Date.now()}`,
            email: `test.residenceadj.${Date.now()}@example.com`,
            password: 'hashedpassword123',
            firstName: 'Test',
            lastName: 'User',
            role: 'admin',
            isActive: true,
        })
            .returning();
        testUserId = user[0].id;
        // Create test building
        const building = await db_1.db
            .insert(schema_1.buildings)
            .values({
            name: 'Test Residence Adjustment Building',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1H 1H1',
            buildingType: 'condo',
            totalUnits: 5,
            totalFloors: 2,
            organizationId: testOrganizationId,
            isActive: true,
        })
            .returning();
        testBuildingId = building[0].id;
        // Create initial residences
        const initialResidences = await db_1.db
            .insert(schema_1.residences)
            .values([
            { buildingId: testBuildingId, unitNumber: '101', floor: 1, isActive: true },
            { buildingId: testBuildingId, unitNumber: '102', floor: 1, isActive: true },
            { buildingId: testBuildingId, unitNumber: '201', floor: 2, isActive: true },
            { buildingId: testBuildingId, unitNumber: '202', floor: 2, isActive: true },
            { buildingId: testBuildingId, unitNumber: '203', floor: 2, isActive: true },
        ])
            .returning();
        createdResidenceIds = initialResidences.map(r => r.id);
    });
    (0, globals_1.afterEach)(async () => {
        await cleanup();
    });
    async function cleanup() {
        // Clean up test data
        if (createdDocumentIds.length > 0) {
            await db_1.db.delete(schema_1.documents).where((0, drizzle_orm_1.eq)(schema_1.documents.id, createdDocumentIds[0]));
            createdDocumentIds = [];
        }
        if (createdResidenceIds.length > 0) {
            await db_1.db.update(schema_1.residences)
                .set({ isActive: false })
                .where((0, drizzle_orm_1.eq)(schema_1.residences.id, createdResidenceIds[0]));
            createdResidenceIds = [];
        }
        if (testBuildingId) {
            await db_1.db.update(schema_1.buildings)
                .set({ isActive: false })
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, testBuildingId));
        }
        if (testUserId) {
            await db_1.db.update(schema_1.users)
                .set({ isActive: false })
                .where((0, drizzle_orm_1.eq)(schema_1.users.id, testUserId));
        }
        if (testOrganizationId) {
            await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testOrganizationId));
        }
    }
    (0, globals_1.describe)('Automatic Residence Addition', () => {
        (0, globals_1.it)('should automatically add residences when building count increases', async () => {
            // Increase from 5 to 8 units
            const result = await (0, operations_1.adjustResidenceCount)(testBuildingId, testOrganizationId, 8, // new count
            5, // current count
            2 // floors
            );
            (0, globals_1.expect)(result.action).toBe('increased');
            (0, globals_1.expect)(result.residencesToSelect).toBeUndefined();
            // Check that 3 new residences were created
            const allResidences = await db_1.db
                .select()
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, testBuildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
            (0, globals_1.expect)(allResidences).toHaveLength(8);
            // Verify new residences have proper unit numbers (algorithm distributes across floors)
            const unitNumbers = allResidences.map(r => r.unitNumber).sort();
            (0, globals_1.expect)(unitNumbers).toEqual(['101', '102', '103', '104', '201', '202', '203', '204']);
        });
        (0, globals_1.it)('should generate proper unit numbers following floor pattern', async () => {
            // Create building with 3 floors and increase units
            await (0, operations_1.addResidencesAutomatically)(testBuildingId, 4, // add 4 units
            3, // 3 floors 
            createdResidenceIds.map(id => ({ id, unitNumber: '999' })) // existing residences
            );
            const newResidences = await db_1.db
                .select({ unitNumber: schema_1.residences.unitNumber, floor: schema_1.residences.floor })
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, testBuildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)))
                .orderBy(schema_1.residences.unitNumber);
            // Should have generated logical unit numbers
            (0, globals_1.expect)(newResidences.length).toBeGreaterThan(5);
        });
    });
    (0, globals_1.describe)('Residence Selection for Deletion', () => {
        (0, globals_1.it)('should return list of residences prioritizing empty ones', async () => {
            // Create a document for one residence to make it "occupied"
            const testDocument = await db_1.db
                .insert(schema_1.documents)
                .values({
                name: 'Test Document',
                documentType: 'lease',
                filePath: '/test/document.pdf',
                residenceId: createdResidenceIds[0],
                buildingId: testBuildingId,
                uploadedById: testUserId,
            })
                .returning();
            createdDocumentIds.push(testDocument[0].id);
            // Create user-residence relationship for another residence
            await db_1.db
                .insert(schema_1.userResidences)
                .values({
                userId: testUserId,
                residenceId: createdResidenceIds[1],
                relationshipType: 'owner',
                isActive: true,
            });
            const residencesToSelect = await (0, operations_1.getResidencesForSelection)(testBuildingId, 3);
            (0, globals_1.expect)(residencesToSelect).toHaveLength(5);
            // Should prioritize empty residences (no documents or users)
            const emptyResidences = residencesToSelect.filter(r => !r.hasDocuments && !r.hasUsers);
            const occupiedResidences = residencesToSelect.filter(r => r.hasDocuments || r.hasUsers);
            (0, globals_1.expect)(emptyResidences.length).toBeGreaterThan(0);
            (0, globals_1.expect)(occupiedResidences.length).toBe(2); // One with document, one with user
            // Empty residences should appear first in the sorted list
            (0, globals_1.expect)(residencesToSelect[0].hasDocuments).toBe(false);
            (0, globals_1.expect)(residencesToSelect[0].hasUsers).toBe(false);
        });
        (0, globals_1.it)('should correctly identify residences with documents and user relationships', async () => {
            // Add document to first residence
            const testDocument = await db_1.db
                .insert(schema_1.documents)
                .values({
                name: 'Lease Agreement',
                documentType: 'lease',
                filePath: '/test/lease.pdf',
                residenceId: createdResidenceIds[0],
                buildingId: testBuildingId,
                uploadedById: testUserId,
            })
                .returning();
            createdDocumentIds.push(testDocument[0].id);
            const residencesToSelect = await (0, operations_1.getResidencesForSelection)(testBuildingId, 5);
            const residenceWithDoc = residencesToSelect.find(r => r.id === createdResidenceIds[0]);
            (0, globals_1.expect)(residenceWithDoc).toBeDefined();
            (0, globals_1.expect)(residenceWithDoc?.hasDocuments).toBe(true);
            (0, globals_1.expect)(residenceWithDoc?.hasUsers).toBe(false);
        });
    });
    (0, globals_1.describe)('Admin-Only Residence Deletion', () => {
        (0, globals_1.it)('should successfully delete selected residences for admin users', async () => {
            // Create a test document
            const testDocument = await db_1.db
                .insert(schema_1.documents)
                .values({
                name: 'Document to Delete',
                documentType: 'lease',
                filePath: '/test/delete.pdf',
                residenceId: createdResidenceIds[0],
                buildingId: testBuildingId,
                uploadedById: testUserId,
            })
                .returning();
            createdDocumentIds.push(testDocument[0].id);
            const residencesToDelete = [createdResidenceIds[0], createdResidenceIds[1]];
            const result = await (0, operations_1.deleteSelectedResidences)(testBuildingId, residencesToDelete, 'admin');
            (0, globals_1.expect)(result.deletedCount).toBe(2);
            (0, globals_1.expect)(result.documentsDeleted).toBe(1);
            // Verify residences are soft-deleted
            const deletedResidences = await db_1.db
                .select()
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, testBuildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, false)));
            (0, globals_1.expect)(deletedResidences).toHaveLength(2);
            // Verify document is deleted
            const remainingDocs = await db_1.db
                .select()
                .from(schema_1.documents)
                .where((0, drizzle_orm_1.eq)(schema_1.documents.id, testDocument[0].id));
            (0, globals_1.expect)(remainingDocs).toHaveLength(0);
        });
        (0, globals_1.it)('should reject deletion attempts from non-admin users', async () => {
            await (0, globals_1.expect)((0, operations_1.deleteSelectedResidences)(testBuildingId, [createdResidenceIds[0]], 'manager')).rejects.toThrow('Only admins can delete residences');
            await (0, globals_1.expect)((0, operations_1.deleteSelectedResidences)(testBuildingId, [createdResidenceIds[0]], 'tenant')).rejects.toThrow('Only admins can delete residences');
        });
    });
    (0, globals_1.describe)('Complete Residence Adjustment Flow', () => {
        (0, globals_1.it)('should handle residence count decrease requiring user selection', async () => {
            // Simulate decreasing from 5 to 3 units
            const result = await (0, operations_1.adjustResidenceCount)(testBuildingId, testOrganizationId, 3, // new count 
            5, // current count
            2 // floors
            );
            (0, globals_1.expect)(result.action).toBe('decreased');
            (0, globals_1.expect)(result.residencesToSelect).toBeDefined();
            (0, globals_1.expect)(result.residencesToSelect).toHaveLength(5); // All residences for selection
        });
        (0, globals_1.it)('should return no action when residence count is unchanged', async () => {
            const result = await (0, operations_1.adjustResidenceCount)(testBuildingId, testOrganizationId, 5, // same count
            5, // current count  
            2 // floors
            );
            (0, globals_1.expect)(result.action).toBe('none');
            (0, globals_1.expect)(result.residencesToSelect).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,