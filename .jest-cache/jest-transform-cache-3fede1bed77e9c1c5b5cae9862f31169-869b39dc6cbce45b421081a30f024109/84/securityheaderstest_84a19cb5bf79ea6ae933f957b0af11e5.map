{"file":"/home/runner/workspace/tests/unit/security/security-headers.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/security/security-headers.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\n\n// Mock WebSocket constructor for Jest environment\njest.mock('ws', () => ({\n  __esModule: true,\n  default: class MockWebSocket {}\n}));\n\nimport { registerRoutes } from '../../../server/routes';\n\n/**\n * Security Headers Validation Test Suite\n * \n * Validates that proper security headers are set:\n * - Content Security Policy (CSP)\n * - X-Content-Type-Options\n * - X-Frame-Options\n * - X-XSS-Protection\n * - Strict-Transport-Security\n * - Referrer-Policy\n */\n\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('Security Headers Validation', () => {\n  let app: express.Application;\n\n  beforeEach(async () => {\n    app = createTestApp();\n  });\n\n  describe('Essential Security Headers', () => {\n    it('should set X-Content-Type-Options header', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      expect(response.headers['x-content-type-options']).toBe('nosniff');\n    });\n\n    it('should set X-Frame-Options header', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      expect(response.headers['x-frame-options']).toMatch(/^(DENY|SAMEORIGIN)$/);\n    });\n\n    it('should set X-XSS-Protection header', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      expect(response.headers['x-xss-protection']).toBe('1; mode=block');\n    });\n\n    it('should set Referrer-Policy header', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      expect(response.headers['referrer-policy']).toBeDefined();\n      expect(response.headers['referrer-policy']).toMatch(/^(strict-origin-when-cross-origin|same-origin|no-referrer)$/);\n    });\n  });\n\n  describe('Content Security Policy', () => {\n    it('should set Content-Security-Policy header', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      const csp = response.headers['content-security-policy'];\n      expect(csp).toBeDefined();\n      \n      // Should contain basic CSP directives\n      if (csp) {\n        expect(csp).toContain('default-src');\n      }\n    });\n\n    it('should prevent inline script execution via CSP', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      const csp = response.headers['content-security-policy'];\n      if (csp) {\n        // Should not allow unsafe-inline for scripts\n        expect(csp).not.toContain(\"script-src 'unsafe-inline'\");\n      }\n    });\n  });\n\n  describe('HTTPS Security Headers', () => {\n    it('should set Strict-Transport-Security when using HTTPS', async () => {\n      // Test with HTTPS simulation\n      const response = await request(app)\n        .get('/api/health')\n        .set('X-Forwarded-Proto', 'https');\n\n      // In production, should have HSTS header\n      if (process.env.NODE_ENV === 'production') {\n        expect(response.headers['strict-transport-security']).toBeDefined();\n      }\n    });\n  });\n\n  describe('API-Specific Security Headers', () => {\n    it('should set proper CORS headers for API endpoints', async () => {\n      const response = await request(app)\n        .options('/api/users');\n\n      // Should handle CORS preflight properly\n      expect(response.headers['access-control-allow-methods']).toBeDefined();\n    });\n\n    it('should set Cache-Control headers for sensitive endpoints', async () => {\n      const response = await request(app)\n        .get('/api/auth/profile');\n\n      // Sensitive endpoints should have no-cache directive\n      const cacheControl = response.headers['cache-control'];\n      if (cacheControl) {\n        expect(cacheControl).toMatch(/(no-cache|no-store|private)/);\n      }\n    });\n\n    it('should not expose server information', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      // Should not expose Express version or server details\n      expect(response.headers['x-powered-by']).toBeUndefined();\n      expect(response.headers['server']).not.toContain('Express');\n    });\n  });\n\n  describe('Error Response Security', () => {\n    it('should not leak sensitive information in error messages', async () => {\n      // Try to trigger various error conditions\n      const responses = await Promise.all([\n        request(app).get('/api/nonexistent').expect(404),\n        request(app).post('/api/users').send({ invalid: 'data' }).expect(400),\n        request(app).get('/api/buildings/999999').expect(404),\n      ]);\n\n      responses.forEach(response => {\n        const body = response.body;\n        const errorText = JSON.stringify(body).toLowerCase();\n        \n        // Should not contain internal paths, stack traces, or database info\n        expect(errorText).not.toContain('/home/runner');\n        expect(errorText).not.toContain('node_modules');\n        expect(errorText).not.toContain('postgresql');\n        expect(errorText).not.toContain('stack trace');\n        expect(errorText).not.toContain('at object.');\n      });\n    });\n\n    it('should set appropriate status codes for security violations', async () => {\n      // Test unauthorized access\n      const unauthorizedResponse = await request(app)\n        .get('/api/auth/profile');\n      expect(unauthorizedResponse.status).toBe(401);\n\n      // Test forbidden access (would need proper auth setup for realistic test)\n      const forbiddenResponse = await request(app)\n        .delete('/api/users/1');\n      expect([401, 403]).toContain(forbiddenResponse.status);\n    });\n  });\n\n  describe('Input Validation Security', () => {\n    it('should handle malicious input safely', async () => {\n      const maliciousInputs = [\n        '<script>alert(\"xss\")</script>',\n        \"'; DROP TABLE users; --\",\n        '../../../etc/passwd',\n        '{{constructor.constructor(\"return process\")().env}}',\n        '\\x00\\x01\\x02', // Binary data\n      ];\n\n      for (const maliciousInput of maliciousInputs) {\n        const response = await request(app)\n          .post('/api/organizations')\n          .send({\n            name: maliciousInput,\n            type: 'syndicate',\n            address: '123 Test St',\n            city: 'Montreal',\n            province: 'QC',\n            postalCode: 'H1A 1A1',\n          });\n\n        // Should either reject the input or sanitize it properly\n        expect([400, 401, 403]).toContain(response.status);\n        \n        if (response.body.error) {\n          // Error message should not echo back the malicious input\n          expect(response.body.error).not.toContain('<script>');\n          expect(response.body.error).not.toContain('DROP TABLE');\n        }\n      }\n    });\n\n    it('should enforce request size limits', async () => {\n      // Create oversized payload\n      const largePayload = 'a'.repeat(10 * 1024 * 1024); // 10MB\n\n      const response = await request(app)\n        .post('/api/organizations')\n        .send({\n          name: largePayload,\n          type: 'syndicate',\n          address: '123 Test St',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H1A 1A1',\n        });\n\n      // Should reject oversized requests\n      expect(response.status).toBe(413);\n    });\n  });\n\n  describe('Authentication Security', () => {\n    it('should handle authentication bypass attempts', async () => {\n      const bypassAttempts = [\n        { 'x-user-id': '1' },\n        { 'x-role': 'admin' },\n        { 'authorization': 'Bearer fake-token' },\n        { 'x-forwarded-user': 'admin' },\n      ];\n\n      for (const headers of bypassAttempts) {\n        const response = await request(app)\n          .get('/api/auth/profile')\n          .set(headers);\n\n        // Should not bypass authentication\n        expect(response.status).toBe(401);\n      }\n    });\n\n    it('should handle session manipulation attempts', async () => {\n      const manipulationAttempts = [\n        'admin-session-id',\n        '../admin-session',\n        'null',\n        'undefined',\n        JSON.stringify({ userId: 1, role: 'admin' }),\n      ];\n\n      for (const sessionId of manipulationAttempts) {\n        const response = await request(app)\n          .get('/api/auth/profile')\n          .set('Cookie', `koveo.sid=${sessionId}`);\n\n        // Should not accept manipulated sessions\n        expect(response.status).toBe(401);\n      }\n    });\n  });\n});"],"version":3}