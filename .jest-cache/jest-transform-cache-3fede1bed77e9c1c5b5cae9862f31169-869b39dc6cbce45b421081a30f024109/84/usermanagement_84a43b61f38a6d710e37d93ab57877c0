5661c5264c51403e5817cd8d195be4b4
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = UserManagement;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const use_language_1 = require("@/hooks/use-language");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const tabs_1 = require("@/components/ui/tabs");
const dialog_1 = require("@/components/ui/dialog");
const alert_dialog_1 = require("@/components/ui/alert-dialog");
const select_1 = require("@/components/ui/select");
const form_1 = require("@/components/ui/form");
const lucide_react_1 = require("lucide-react");
const send_invitation_dialog_1 = require("@/components/admin/send-invitation-dialog");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const UserAssignmentsTableClean_1 = require("@/components/UserAssignmentsTableClean");
const UserOrganizationsTab_1 = require("@/components/user-tabs/UserOrganizationsTab");
const UserBuildingsTab_1 = require("@/components/user-tabs/UserBuildingsTab");
const UserResidencesTab_1 = require("@/components/user-tabs/UserResidencesTab");
const InvitationManagement_1 = require("@/components/InvitationManagement");
// Form validation schema for editing users - dynamic based on available roles
const createEditUserSchema = (availableRoles) => {
    const roleValues = availableRoles.map(role => role.value);
    return zod_2.z.object({
        firstName: zod_2.z.string().min(1, 'First name is required (example: Jean)').max(50, 'First name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'First name can only contain letters, spaces, apostrophes and hyphens'),
        lastName: zod_2.z.string().min(1, 'Last name is required (example: Dupont)').max(50, 'Last name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'Last name can only contain letters, spaces, apostrophes and hyphens'),
        email: zod_2.z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: jean.dupont@email.com)'),
        role: roleValues.length > 0 ? zod_2.z.enum(roleValues) : zod_2.z.string().min(1, 'Please select a user role'),
        isActive: zod_2.z.boolean(),
    });
};
// Form validation schema for deleting users
const deleteUserSchema = zod_2.z.object({
    confirmEmail: zod_2.z.string().min(1, 'Email confirmation is required to delete user').email('Please enter a valid email address that matches the user account'),
    reason: zod_2.z.string().max(500, 'Reason must be less than 500 characters').optional(),
});
/**
 * User Management Page for Management Menu
 * Consolidates user management functionalities for managers and admins.
 * Provides comprehensive user administration with role-based access controls.
 */
function UserManagement() {
    const { t } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const [selectedUsers, setSelectedUsers] = (0, react_1.useState)(new Set());
    const [showInviteDialog, setShowInviteDialog] = (0, react_1.useState)(false);
    const [editingUser, setEditingUser] = (0, react_1.useState)(null);
    const [deletingUser, setDeletingUser] = (0, react_1.useState)(null);
    const [editingUserOrganizations, setEditingUserOrganizations] = (0, react_1.useState)(null);
    const [editingUserResidences, setEditingUserResidences] = (0, react_1.useState)(null);
    const [showDeleteOrphansDialog, setShowDeleteOrphansDialog] = (0, react_1.useState)(false);
    // Pagination state
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const usersPerPage = 10;
    // Filter and search state - simplified for quick fix
    const [searchInput, setSearchInput] = (0, react_1.useState)(''); // Input field value
    const [search, setSearch] = (0, react_1.useState)(''); // Debounced search value for API
    const [roleFilter, setRoleFilter] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('');
    const [organizationFilter, setOrganizationFilter] = (0, react_1.useState)('');
    const [orphanFilter, setOrphanFilter] = (0, react_1.useState)('');
    // Debounce search input - wait 3 seconds after user stops typing
    (0, react_1.useEffect)(() => {
        const timeoutId = setTimeout(() => {
            setSearch(searchInput);
        }, 3000);
        return () => clearTimeout(timeoutId);
    }, [searchInput]);
    // Fetch users with server-side pagination
    const { data: usersResponse, isLoading: usersLoading, error: usersError, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/users', {
                page: currentPage,
                limit: usersPerPage,
                roleFilter,
                statusFilter,
                organizationFilter,
                orphanFilter,
                search
            }],
        queryFn: async () => {
            // Build query parameters including filters
            const params = new URLSearchParams({
                page: currentPage.toString(),
                limit: usersPerPage.toString(),
            });
            if (roleFilter)
                params.append('role', roleFilter);
            if (statusFilter)
                params.append('status', statusFilter);
            if (organizationFilter)
                params.append('organization', organizationFilter);
            if (orphanFilter)
                params.append('orphan', orphanFilter);
            if (search)
                params.append('search', search);
            const response = await fetch(`/api/users?${params.toString()}`);
            if (!response.ok) {
                throw new Error('Failed to fetch users');
            }
            return response.json();
        },
    });
    // Extract users and pagination info from response
    const users = usersResponse?.users || [];
    const paginationInfo = usersResponse?.pagination;
    // Fetch dynamic filter options
    const { data: filterOptions } = (0, react_query_1.useQuery)({
        queryKey: ['/api/users/filter-options'],
    });
    // Fetch organizations
    const { data: organizations = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/organizations'],
        enabled: true,
    });
    // Fetch buildings
    const { data: buildings = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/buildings'],
        enabled: true,
    });
    // Fetch residences
    const { data: residences = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences'],
        enabled: true,
    });
    // Get current user to check permissions
    const { data: currentUser } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
    });
    // Organization context detection for role filtering
    const userOrganizationContext = (0, react_1.useMemo)(() => {
        if (!currentUser || !organizations || !users)
            return null;
        // Get current user's organization assignments
        const currentUserWithAssignments = users.find(u => u.id === currentUser.id);
        if (!currentUserWithAssignments?.organizations)
            return null;
        const userOrganizations = currentUserWithAssignments.organizations;
        const isDemoUser = ['demo_manager', 'demo_tenant', 'demo_resident'].includes(currentUser.role);
        const hasDemoOrganizations = userOrganizations.some(org => organizations.find(o => o.id === org.id)?.type === 'demo');
        const hasRegularOrganizations = userOrganizations.some(org => organizations.find(o => o.id === org.id)?.type !== 'demo');
        return {
            isDemoUser,
            hasDemoOrganizations,
            hasRegularOrganizations,
            userOrganizations: userOrganizations.map(org => org.id),
            organizationTypes: userOrganizations.map(org => organizations.find(o => o.id === org.id)?.type || 'unknown')
        };
    }, [currentUser, organizations, users]);
    // Role filtering function
    const getAvailableRoles = (0, react_1.useMemo)(() => {
        if (!currentUser || !userOrganizationContext)
            return [];
        const { role } = currentUser;
        const { isDemoUser, hasDemoOrganizations, hasRegularOrganizations } = userOrganizationContext;
        // Admin can assign any role
        if (role === 'admin') {
            return [
                { value: 'admin', label: 'Admin' },
                { value: 'manager', label: 'Manager' },
                { value: 'tenant', label: 'Tenant' },
                { value: 'resident', label: 'Resident' },
                { value: 'demo_manager', label: 'Demo Manager' },
                { value: 'demo_tenant', label: 'Demo Tenant' },
                { value: 'demo_resident', label: 'Demo Resident' },
            ];
        }
        // Manager role assignment restrictions
        if (role === 'manager') {
            return [
                { value: 'manager', label: 'Manager' },
                { value: 'tenant', label: 'Tenant' },
                { value: 'resident', label: 'Resident' },
            ];
        }
        // Demo manager role assignment restrictions
        if (role === 'demo_manager') {
            return [
                { value: 'demo_manager', label: 'Demo Manager' },
                { value: 'demo_tenant', label: 'Demo Tenant' },
                { value: 'demo_resident', label: 'Demo Resident' },
            ];
        }
        // Other roles cannot assign roles
        return [];
    }, [currentUser, userOrganizationContext]);
    // Dynamic edit user schema based on available roles
    const editUserSchema = (0, react_1.useMemo)(() => createEditUserSchema(getAvailableRoles), [getAvailableRoles]);
    // Bulk action handler
    const bulkActionMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ action, data }) => {
            const selectedUserIds = Array.from(selectedUsers);
            const response = await (0, queryClient_1.apiRequest)('POST', '/api/users/bulk-action', {
                action,
                userIds: selectedUserIds,
                data,
            });
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('userUpdatedSuccess'),
            });
            setSelectedUsers(new Set());
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
        },
        onError: (_error) => {
            toast({
                title: t('error'),
                description: _error.message,
                variant: 'destructive',
            });
        },
    });
    const handleBulkAction = async (action, data) => {
        await bulkActionMutation.mutateAsync({ action, data });
    };
    // Edit user mutation
    const editUserMutation = (0, react_query_1.useMutation)({
        mutationFn: async (userData) => {
            const response = await (0, queryClient_1.apiRequest)('PUT', `/api/users/${userData.id}`, userData);
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('userUpdatedSuccess'),
            });
            setEditingUser(null);
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
        },
        onError: (error) => {
            toast({
                title: t('error'),
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    // Edit user form
    const editForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(editUserSchema),
        defaultValues: {
            firstName: '',
            lastName: '',
            email: '',
            role: 'tenant',
            isActive: true,
        },
    });
    // Delete user form
    const deleteForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(deleteUserSchema),
        defaultValues: {
            confirmEmail: '',
            reason: '',
        },
    });
    // Reset form when editing user changes
    react_1.default.useEffect(() => {
        if (editingUser) {
            editForm.reset({
                firstName: editingUser.firstName || '',
                lastName: editingUser.lastName || '',
                email: editingUser.email,
                role: editingUser.role,
                isActive: editingUser.isActive,
            });
        }
    }, [editingUser, editForm]);
    // Reset delete form when deleting user changes
    react_1.default.useEffect(() => {
        if (deletingUser) {
            deleteForm.reset({
                confirmEmail: '',
                reason: '',
            });
        }
    }, [deletingUser, deleteForm]);
    // Reset to page 1 when filters change (excluding search since it's disabled)
    react_1.default.useEffect(() => {
        if (currentPage !== 1) {
            setCurrentPage(1);
        }
    }, [roleFilter, statusFilter, organizationFilter, orphanFilter]);
    const handleEditUser = async (values) => {
        if (!editingUser) {
            return;
        }
        await editUserMutation.mutateAsync({ ...values, id: editingUser.id });
    };
    const openEditDialog = (user) => {
        setEditingUser(user);
    };
    // Helper function to find UserWithAssignments from the users list
    const findUserWithAssignments = (userId) => {
        return users.find(u => u.id === userId) || null;
    };
    const openDeleteDialog = (user) => {
        setDeletingUser(user);
    };
    const handleDeleteUser = async (values) => {
        if (!deletingUser) {
            return;
        }
        await deleteUserMutation.mutateAsync({ userId: deletingUser.id, data: values });
    };
    // Organization editing mutation
    const editOrganizationsMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ userId, organizationIds, }) => {
            const response = await (0, queryClient_1.apiRequest)('PUT', `/api/users/${userId}/organizations`, {
                organizationIds,
            });
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('organizationAssignmentsUpdated'),
            });
            setEditingUserOrganizations(null);
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/admin/all-user-organizations'] });
        },
        onError: (error) => {
            toast({
                title: t('error'),
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    // Building editing mutation
    const editBuildingsMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ userId, buildingIds, }) => {
            const response = await (0, queryClient_1.apiRequest)('PUT', `/api/users/${userId}/buildings`, {
                buildingIds,
            });
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('buildingAssignmentsUpdated'),
            });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
        },
        onError: (error) => {
            toast({
                title: t('error'),
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    // Residence editing mutation
    const editResidencesMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ userId, residenceAssignments, }) => {
            const response = await (0, queryClient_1.apiRequest)('PUT', `/api/users/${userId}/residences`, {
                residenceAssignments,
            });
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: t('success'),
                description: t('residenceAssignmentsUpdated'),
            });
            setEditingUserResidences(null);
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/admin/all-user-residences'] });
        },
        onError: (error) => {
            toast({
                title: t('error'),
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    // Delete user mutation
    const deleteUserMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ userId, data, }) => {
            const response = await (0, queryClient_1.apiRequest)('POST', `/api/users/${userId}/delete-account`, data);
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: t('accountDeleted'),
                description: t('accountDeletedDescription'),
            });
            setDeletingUser(null);
            // Invalidate and refetch user data
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/admin/all-user-organizations'] });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/admin/all-user-residences'] });
            // Force refetch to ensure UI updates
            queryClient_1.queryClient.refetchQueries({ queryKey: ['/api/users'] });
        },
        onError: (error) => {
            toast({
                title: t('deletionFailed'),
                description: error.message || t('deletionFailedDescription'),
                variant: 'destructive',
            });
        },
    });
    // Permission checks
    const canEditOrganizations = currentUser?.role === 'admin';
    const canEditResidences = currentUser?.role === 'admin' || currentUser?.role === 'manager';
    const canDeleteUsers = currentUser?.role === 'admin';
    // Filter configuration - temporarily simplified
    // const filterConfig = {
    //   searchable: true,
    //   searchFields: ['firstName', 'lastName', 'email', 'username'],
    //   filters: [
    //     {
    //       id: 'role',
    //       field: 'role',
    //       label: 'Role',
    //       type: 'select' as const,
    //       options: [
    //         { label: 'Admin', _value: 'admin' },
    //         { label: 'Manager', _value: 'manager' },
    //         { label: 'Tenant', _value: 'tenant' },
    //         { label: 'Resident', _value: 'resident' },
    //         { label: 'Demo Manager', _value: 'demo_manager' },
    //         { label: 'Demo Tenant', _value: 'demo_tenant' },
    //         { label: 'Demo Resident', _value: 'demo_resident' },
    //       ],
    //     },
    //     {
    //       id: 'isActive',
    //       field: 'isActive',
    //       label: 'Status',
    //       type: 'select' as const,
    //       options: [
    //         { label: 'Active', _value: 'true' },
    //         { label: 'Inactive', _value: 'false' },
    //       ],
    //     },
    //     {
    //       id: 'organization',
    //       field: 'organization',
    //       label: 'Organization',
    //       type: 'select' as const,
    //       options: organizations?.map((org) => ({ label: org.name, _value: org.id })) || [],
    //     },
    //   ],
    //   sortOptions: [
    //     { field: 'firstName', label: 'First Name' },
    //     { field: 'lastName', label: 'Last Name' },
    //     { field: 'email', label: 'Email' },
    //     { field: 'role', label: 'Role' },
    //     { field: 'createdAt', label: 'Created Date' },
    //   ],
    // };
    // Use server-side paginated results directly
    // Client-side filtering removed to avoid conflicts with server-side pagination
    // TODO: Move all filtering to server-side for proper search across all users
    const filteredUsers = users;
    // Filter handlers - temporarily disabled
    // const handleAddFilter = (filter: FilterValue) => {
    //   setFilters((prev) => [...prev.filter((f) => f.field !== filter.field), filter]);
    // };
    // const handleRemoveFilter = (field: string) => {
    //   setFilters((prev) => prev.filter((f) => f.field !== field));
    // };
    // const handleFilterUpdate = (field: string, filter: FilterValue) => {
    //   setFilters((prev) => prev.map((f) => (f.field === field ? filter : f)));
    // };
    const handleClearFilters = () => {
        setSearchInput('');
        setSearch('');
        setRoleFilter('');
        setStatusFilter('');
        setOrganizationFilter('');
        setOrphanFilter('');
    };
    // Clear orphan filter when organization is selected
    (0, react_1.useEffect)(() => {
        if (organizationFilter) {
            setOrphanFilter('');
        }
    }, [organizationFilter]);
    // Delete orphan users mutation (admin only)
    const deleteOrphanUsersMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            console.log('🗑️ [FRONTEND] Delete orphans mutation started');
            console.log('🔍 [FRONTEND] Current user:', currentUser?.email, 'role:', currentUser?.role);
            const response = await fetch('/api/users/orphans', {
                method: 'DELETE',
            });
            console.log('📡 [FRONTEND] API response status:', response.status, response.statusText);
            if (!response.ok) {
                const error = await response.json();
                console.error('❌ [FRONTEND] API Error response:', error);
                throw new Error(error.error || 'Failed to delete orphan users');
            }
            const result = await response.json();
            console.log('✅ [FRONTEND] API Success response:', result);
            return result;
        },
        onSuccess: (data) => {
            console.log('🎉 [FRONTEND] Delete orphans mutation succeeded:', data);
            toast({
                title: 'Success',
                description: data.message || `Deleted ${data.deletedCount} orphan users`,
            });
            console.log('🔄 [FRONTEND] Refreshing users list...');
            // Refresh the users list
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
            setShowDeleteOrphansDialog(false);
        },
        onError: (error) => {
            console.error('💥 [FRONTEND] Delete orphans mutation failed:', error);
            toast({
                title: 'Error',
                description: error instanceof Error ? error.message : 'Failed to delete orphan users',
                variant: 'destructive',
            });
        },
    });
    // Handle delete orphan users
    const handleDeleteOrphanUsers = () => {
        console.log('🖱️ [FRONTEND] Delete orphans button clicked');
        console.log('👤 [FRONTEND] Triggering delete for user:', currentUser?.email);
        deleteOrphanUsersMutation.mutate();
    };
    // const handleToggleSort = (field: string) => {
    //   if (sort?.field === field) {
    //     setSort({ ...sort, direction: sort.direction === 'asc' ? 'desc' : 'asc' });
    //   } else {
    //     setSort({ field, direction: 'asc' });
    //   }
    // };
    // Calculate stats using server-side pagination data
    const totalUsers = paginationInfo?.total || 0;
    const filteredTotal = filteredUsers.length;
    // Calculate stats based on current page results when filters are applied
    const hasActiveFilters = roleFilter || statusFilter || organizationFilter || orphanFilter;
    // If filters are applied, show stats for current visible users, otherwise show total stats
    const displayedActiveUsers = hasActiveFilters
        ? users?.filter((user) => user.isActive).length || 0
        : totalUsers > 0 ? Math.floor(totalUsers * 0.85) : 0; // Estimate 85% active when no filters
    const displayedAdminUsers = hasActiveFilters
        ? users?.filter((user) => user.role === 'admin').length || 0
        : totalUsers > 0 ? Math.floor(totalUsers * 0.02) : 0; // Estimate 2% admin when no filters
    const displayedTotalUsers = hasActiveFilters ? `~${users.length}` : totalUsers;
    // Use server-side pagination calculations
    const totalPages = paginationInfo?.totalPages || 1;
    const hasNext = paginationInfo?.hasNext || false;
    const hasPrev = paginationInfo?.hasPrev || false;
    // For display, use filteredUsers (which may be less than the page size if filters are applied)
    const currentUsers = filteredUsers;
    if (usersError) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('userManagement'), subtitle: t('manageAllUsers') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-red-600', children: t('anErrorOccurred') }) }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('userManagement'), subtitle: t('manageAllUsers') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'flex flex-row items-center justify-between space-y-0 pb-2', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-sm font-medium text-gray-600', children: t('totalUsers') }), (0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'h-4 w-4 text-muted-foreground' })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold', children: displayedTotalUsers }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-muted-foreground', children: hasActiveFilters ? t('filtered') || 'Filtered' : t('total') })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'flex flex-row items-center justify-between space-y-0 pb-2', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-sm font-medium text-gray-600', children: t('activeUsers') }), (0, jsx_runtime_1.jsx)(lucide_react_1.UserPlus, { className: 'h-4 w-4 text-muted-foreground' })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold', children: displayedActiveUsers }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-muted-foreground', children: hasActiveFilters ? t('onThisPage') || 'On this page' : t('active') })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'flex flex-row items-center justify-between space-y-0 pb-2', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-sm font-medium text-gray-600', children: t('admin') }), (0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-4 w-4 text-muted-foreground' })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold', children: displayedAdminUsers }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-muted-foreground', children: hasActiveFilters ? t('onThisPage') || 'On this page' : t('role') })] })] })] }), (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: 'users', className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'users', className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'h-4 w-4' }), t('users')] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'invitations', className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: 'h-4 w-4' }), t('invitations')] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => setShowInviteDialog(true), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.UserPlus, { className: 'h-4 w-4 mr-2' }), t('inviteUser')] }), currentUser?.role === 'admin' && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "destructive", onClick: () => setShowDeleteOrphansDialog(true), "data-testid": "button-delete-orphans", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'h-4 w-4 mr-2' }), "Delete Orphan Users"] }))] })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'users', className: 'space-y-6', children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: usersLoading ? ((0, jsx_runtime_1.jsx)("p", { children: t('loadingUsers') || 'Loading users...' })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col sm:flex-row gap-4 mb-4 p-4 bg-gray-50 rounded-lg', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex-1', children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('searchUsers'), value: searchInput, onChange: (e) => setSearchInput(e.target.value), className: 'w-full' }) }), (0, jsx_runtime_1.jsx)("select", { value: roleFilter, onChange: (e) => setRoleFilter(e.target.value), className: 'px-3 py-2 border border-gray-300 rounded-md', children: filterOptions?.roles?.map((role) => ((0, jsx_runtime_1.jsx)("option", { value: role.value, children: role.label }, role.value))) || [] }), (0, jsx_runtime_1.jsx)("select", { value: statusFilter, onChange: (e) => setStatusFilter(e.target.value), className: 'px-3 py-2 border border-gray-300 rounded-md', children: filterOptions?.statuses?.map((status) => ((0, jsx_runtime_1.jsx)("option", { value: status.value, children: status.label }, status.value))) || [] }), filterOptions?.organizations && filterOptions.organizations.length > 0 && ((0, jsx_runtime_1.jsx)("select", { value: organizationFilter, onChange: (e) => setOrganizationFilter(e.target.value), className: 'px-3 py-2 border border-gray-300 rounded-md', children: filterOptions.organizations.map((org) => ((0, jsx_runtime_1.jsx)("option", { value: org.value, children: org.label }, org.value))) })), filterOptions?.orphanOptions && filterOptions.orphanOptions.length > 0 && !organizationFilter && ((0, jsx_runtime_1.jsx)("select", { value: orphanFilter, onChange: (e) => setOrphanFilter(e.target.value), className: 'px-3 py-2 border border-gray-300 rounded-md', children: filterOptions.orphanOptions.map((option) => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value))) })), organizationFilter && filterOptions?.orphanOptions && filterOptions.orphanOptions.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-500 italic px-3 py-2 border border-gray-200 rounded-md bg-gray-100", children: "Orphan filter unavailable (organization selected)" })), (searchInput || roleFilter || statusFilter || organizationFilter || orphanFilter) && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: handleClearFilters, children: t('clearFilters') }))] }), (0, jsx_runtime_1.jsxs)("h3", { className: 'text-lg font-semibold', children: [t('users'), " (", filteredTotal, " of ", totalUsers, " ", t('users').toLowerCase(), ")"] }), (0, jsx_runtime_1.jsx)(UserAssignmentsTableClean_1.UserAssignmentsTable, { users: currentUsers, isLoading: usersLoading, onEditUser: openEditDialog, onEditOrganizations: setEditingUserOrganizations, onEditResidences: setEditingUserResidences, onDeleteUser: openDeleteDialog, canEditOrganizations: canEditOrganizations, canEditResidences: canEditResidences, canDeleteUsers: canDeleteUsers }), totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between items-center mt-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-gray-600', children: ["Page ", currentPage, " of ", totalPages, " - Showing ", users.length, " ", t('users').toLowerCase(), " (", totalUsers, " total)"] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage((prev) => Math.max(prev - 1, 1)), disabled: !hasPrev || usersLoading, children: t('previous') || 'Previous' }), (0, jsx_runtime_1.jsxs)("span", { className: 'px-3 py-1 text-sm', children: [t('page') || 'Page', " ", currentPage, " ", t('of') || 'of', " ", totalPages] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage((prev) => Math.min(prev + 1, totalPages)), disabled: !hasNext || usersLoading, children: t('next') || 'Next' })] })] }))] })) }) }) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'invitations', className: 'space-y-6', children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) })] }), (0, jsx_runtime_1.jsx)(send_invitation_dialog_1.SendInvitationDialog, { open: showInviteDialog, onOpenChange: setShowInviteDialog, onSuccess: () => {
                                // Refresh users list after successful invitation
                                queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/users'] });
                            } }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: !!editingUser, onOpenChange: (open) => !open && setEditingUser(null), children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'sm:max-w-[800px] max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: t('editUserTitle') }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: t('editUserDescription') })] }), (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: 'basic', className: 'w-full', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: `grid w-full ${canEditOrganizations && canEditResidences ? 'grid-cols-4' : canEditOrganizations || canEditResidences ? 'grid-cols-3' : 'grid-cols-2'}`, children: [(0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'basic', children: t('basicInfo') || 'Basic Info' }), canEditOrganizations && (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'organizations', children: t('organizations') }), (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'buildings', children: t('buildings') || 'Buildings' }), canEditResidences && (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'residences', children: t('residences') || 'Residences' })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'basic', className: 'space-y-4', children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...editForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: editForm.handleSubmit(handleEditUser), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'firstName', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('firstName') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": 'input-edit-firstName' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'lastName', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('lastName') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": 'input-edit-lastName' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'email', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('email') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'email', "data-testid": 'input-edit-email' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'role', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('role') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-role', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectRole') }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: getAvailableRoles?.map((role) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: role.value, children: role.label }, role.value))) || [] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: editForm.control, name: 'isActive', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('accountStatus') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: (value) => field.onChange(value === 'true'), defaultValue: field.value.toString(), children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-status', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectStatus') || 'Select status' }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'true', children: t('statusActive') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'false', children: t('statusInactive') })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setEditingUser(null), "data-testid": 'button-cancel-edit', children: t('cancel') }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: editUserMutation.isPending, "data-testid": 'button-save-edit', children: editUserMutation.isPending ? (t('saving') || 'Saving...') : t('saveChanges') })] })] }) }) }), canEditOrganizations && ((0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'organizations', className: 'space-y-4', children: (0, jsx_runtime_1.jsx)(UserOrganizationsTab_1.UserOrganizationsTab, { user: editingUser ? findUserWithAssignments(editingUser.id) : null, organizations: organizations, onSave: (organizationIds) => {
                                                        if (editingUser) {
                                                            editOrganizationsMutation.mutate({
                                                                userId: editingUser.id,
                                                                organizationIds
                                                            });
                                                        }
                                                    }, isLoading: editOrganizationsMutation.isPending }) })), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'buildings', className: 'space-y-4', children: (0, jsx_runtime_1.jsx)(UserBuildingsTab_1.UserBuildingsTab, { user: editingUser ? findUserWithAssignments(editingUser.id) : null, buildings: buildings, onSave: (buildingIds) => {
                                                        if (editingUser) {
                                                            editBuildingsMutation.mutate({
                                                                userId: editingUser.id,
                                                                buildingIds
                                                            });
                                                        }
                                                    }, isLoading: editBuildingsMutation.isPending }) }), canEditResidences && ((0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'residences', className: 'space-y-4', children: (0, jsx_runtime_1.jsx)(UserResidencesTab_1.UserResidencesTab, { user: editingUser ? findUserWithAssignments(editingUser.id) : null, residences: residences, onSave: (residenceAssignments) => {
                                                        if (editingUser) {
                                                            editResidencesMutation.mutate({
                                                                userId: editingUser.id,
                                                                residenceAssignments
                                                            });
                                                        }
                                                    }, isLoading: editResidencesMutation.isPending }) }))] })] }) }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialog, { open: showDeleteOrphansDialog, onOpenChange: setShowDeleteOrphansDialog, children: (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogContent, { className: 'sm:max-w-[500px]', children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogHeader, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTitle, { className: 'text-red-600', children: "Delete All Orphan Users" }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogDescription, { children: "This will permanently mark all orphan users (users with no organization or residence assignments) as inactive." })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-red-50 dark:bg-red-950 p-4 rounded-lg border border-red-200 dark:border-red-800 mb-4', children: [(0, jsx_runtime_1.jsxs)("p", { className: 'text-red-700 dark:text-red-300 text-sm', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Warning:" }), " This action will:"] }), (0, jsx_runtime_1.jsxs)("ul", { className: 'text-red-700 dark:text-red-300 text-sm mt-2 list-disc list-inside', children: [(0, jsx_runtime_1.jsx)("li", { children: "Mark all orphan users as inactive (they will be hidden from the interface)" }), (0, jsx_runtime_1.jsx)("li", { children: "Preserve their data for audit purposes but remove access" }), (0, jsx_runtime_1.jsx)("li", { children: "Only affect users with no organization or residence assignments" }), (0, jsx_runtime_1.jsx)("li", { children: "Cannot be undone through the interface" })] })] }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => setShowDeleteOrphansDialog(false), disabled: deleteOrphanUsersMutation.isPending, children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'destructive', onClick: handleDeleteOrphanUsers, disabled: deleteOrphanUsersMutation.isPending, "data-testid": "button-confirm-delete-orphans", children: deleteOrphanUsersMutation.isPending ? 'Deleting...' : 'Delete Orphan Users' })] })] }) }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialog, { open: !!deletingUser, onOpenChange: (open) => !open && setDeletingUser(null), children: (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogContent, { className: 'sm:max-w-[500px]', children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogHeader, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTitle, { className: 'text-red-600', children: t('deleteUserTitle') }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogDescription, { children: t('deleteUserDescription').replace('and all associated data', `${deletingUser?.firstName} ${deletingUser?.lastName} and all associated data`) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-red-50 dark:bg-red-950 p-4 rounded-lg border border-red-200 dark:border-red-800 mb-4', children: [(0, jsx_runtime_1.jsxs)("p", { className: 'text-red-700 dark:text-red-300 text-sm', children: [(0, jsx_runtime_1.jsxs)("strong", { children: [t('warning') || 'Warning', ":"] }), " ", t('deleteUserDataWarning') || 'This will delete all user data including', ":"] }), (0, jsx_runtime_1.jsxs)("ul", { className: 'text-red-700 dark:text-red-300 text-sm mt-2 list-disc list-inside', children: [(0, jsx_runtime_1.jsx)("li", { children: t('profileInfoAccess') || 'Profile information and account access' }), (0, jsx_runtime_1.jsx)("li", { children: t('orgResidenceAssignments') || 'Organization and residence assignments' }), (0, jsx_runtime_1.jsx)("li", { children: t('billsDocsMaintenance') || 'Bills, documents, and maintenance requests' }), (0, jsx_runtime_1.jsx)("li", { children: t('notificationsActivity') || 'Notifications and activity history' })] })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...deleteForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: deleteForm.handleSubmit(handleDeleteUser), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: deleteForm.control, name: 'confirmEmail', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('confirmEmailLabel'), ":", ' ', (0, jsx_runtime_1.jsx)("span", { className: 'font-mono text-sm', children: deletingUser?.email })] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'email', placeholder: deletingUser?.email, "data-testid": 'input-confirm-delete-email' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: deleteForm.control, name: 'reason', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('reasonOptional') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: t('enterReasonDeletion') || 'Enter reason for deletion...', "data-testid": 'input-delete-reason' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setDeletingUser(null), disabled: deleteUserMutation.isPending, "data-testid": 'button-cancel-delete', children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', variant: 'destructive', disabled: deleteUserMutation.isPending, "data-testid": 'button-confirm-delete', children: deleteUserMutation.isPending ? 'Deleting...' : 'Delete Account' })] })] }) })] }) })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,