{"file":"/home/runner/workspace/tests/unit/invitation/invitation-validation.test.ts","mappings":";;AAAA,2CAAqD;AACrD,6BAAwB;AAExB,qEAAqE;AACrE,IAAA,kBAAQ,EAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,MAAM,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;QAChC,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;QACzB,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;QACxG,MAAM,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;QAC/D,cAAc,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;QAC5C,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;QACxC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;QACzC,SAAS,EAAE,OAAC,CAAC,IAAI,EAAE;KACpB,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,WAAW,GAAG;gBAClB,kBAAkB;gBAClB,wBAAwB;gBACxB,qBAAqB;gBACrB,6BAA6B;aAC9B,CAAC;YAEF,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC1B,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;oBACxC,KAAK;oBACL,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,SAAS;oBACjB,cAAc,EAAE,IAAI;oBACpB,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;gBACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,aAAa,GAAG;gBACpB,YAAY;gBACZ,aAAa;gBACb,OAAO;gBACP,uBAAuB;gBACvB,EAAE;aACH,CAAC;YAEF,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC5B,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;oBACxC,KAAK;oBACL,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,SAAS;oBACjB,cAAc,EAAE,IAAI;oBACpB,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;gBACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,UAAU,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;YAE9G,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACxB,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;oBACxC,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,IAAW;oBACjB,MAAM,EAAE,SAAS;oBACjB,cAAc,EAAE,IAAI;oBACpB,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;gBACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,YAAY,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YAElE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC1B,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;oBACxC,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,IAAW;oBACjB,MAAM,EAAE,SAAS;oBACjB,cAAc,EAAE,IAAI;oBACpB,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;gBACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,YAAE,EAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,aAAa,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;YAEtE,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC7B,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;oBACxC,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,MAAa;oBACrB,cAAc,EAAE,IAAI;oBACpB,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;gBACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,eAAe,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;YAE5E,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC/B,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;oBACxC,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,MAAa;oBACrB,cAAc,EAAE,IAAI;oBACpB,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;gBACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAA,YAAE,EAAC,0EAA0E,EAAE,GAAG,EAAE;YAClF,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;gBACxC,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,SAAS;gBACjB,cAAc,EAAE,IAAI;gBACpB,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAC;YACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,SAAS,GAAG,sCAAsC,CAAC;YAEzD,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;gBACxC,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,SAAS;gBACjB,cAAc,EAAE,SAAS;gBACzB,UAAU,EAAE,SAAS;gBACrB,WAAW,EAAE,SAAS;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAC;YACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,UAAU,GAAG,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAC;YAE/D,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC7B,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;oBACxC,KAAK,EAAE,kBAAkB;oBACzB,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,SAAS;oBACjB,cAAc,EAAE,SAAS;oBACzB,UAAU,EAAE,IAAI;oBAChB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC,CAAC;gBACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAA,YAAE,EAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAE7C,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;gBACxC,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,SAAS;gBACjB,cAAc,EAAE,IAAI;gBACpB,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,SAAS,EAAE,UAAU;aACtB,CAAC,CAAC;YACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,wEAAwE,EAAE,GAAG,EAAE;YAChF,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;YAC5B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAEzC,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC;gBACxC,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,SAAS;gBACjB,cAAc,EAAE,IAAI;gBACpB,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,SAAS,EAAE,QAAQ;aACpB,CAAC,CAAC;YACH,IAAA,gBAAM,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,+BAA+B;AAC/B,IAAA,kBAAQ,EAAC,oCAAoC,EAAE,GAAG,EAAE;IAClD,MAAM,qBAAqB,GAAG,CAAC,QAAgB,EAAE,UAAoB,EAAE,eAA8B,EAAW,EAAE;QAChH,IAAI,QAAQ,KAAK,OAAO,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC,CAAC,mCAAmC;QAClD,CAAC;QAED,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;YAC3B,IAAI,CAAC,eAAe,EAAE,CAAC;gBACrB,OAAO,KAAK,CAAC,CAAC,yDAAyD;YACzE,CAAC;YACD,OAAO,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,2DAA2D;QAC1G,CAAC;QAED,OAAO,KAAK,CAAC,CAAC,wCAAwC;IACxD,CAAC,CAAC;IAEF,IAAA,kBAAQ,EAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAA,YAAE,EAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,QAAQ,GAAG,OAAO,CAAC;YACzB,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,CAAC;YAE5B,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,IAAA,YAAE,EAAC,qEAAqE,EAAE,GAAG,EAAE;YAC7E,MAAM,QAAQ,GAAG,SAAS,CAAC;YAC3B,MAAM,UAAU,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAEpC,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvE,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oEAAoE,EAAE,GAAG,EAAE;YAC5E,MAAM,QAAQ,GAAG,SAAS,CAAC;YAC3B,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,CAAC;YAE5B,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,gEAAgE,EAAE,GAAG,EAAE;YACxE,MAAM,QAAQ,GAAG,SAAS,CAAC;YAC3B,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,CAAC;YAE5B,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,YAAE,EAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,CAAC;YAE5B,IAAA,gBAAM,EAAC,qBAAqB,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACxE,IAAA,gBAAM,EAAC,qBAAqB,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,mCAAmC;AACnC,IAAA,kBAAQ,EAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,MAAM,mBAAmB,GAAG,CAAC,SAAe,EAAW,EAAE;QACvD,OAAO,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;IAChC,CAAC,CAAC;IAEF,IAAA,YAAE,EAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/B,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY;QAE5D,IAAA,gBAAM,EAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,IAAA,YAAE,EAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY;QAE1D,IAAA,gBAAM,EAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,IAAA,YAAE,EAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,kEAAkE;QAClE,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAClD,IAAA,gBAAM,EAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEvD,2DAA2D;QAC3D,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAChD,IAAA,gBAAM,EAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/tests/unit/invitation/invitation-validation.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\nimport { z } from 'zod';\n\n// Test the invitation validation logic without database dependencies\ndescribe('Invitation Validation Logic', () => {\n  const invitationSchema = z.object({\n    email: z.string().email(),\n    role: z.enum(['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident']),\n    status: z.enum(['pending', 'accepted', 'expired', 'cancelled']),\n    organizationId: z.string().uuid().nullable(),\n    buildingId: z.string().uuid().nullable(),\n    residenceId: z.string().uuid().nullable(),\n    expiresAt: z.date(),\n  });\n\n  describe('Email Validation', () => {\n    it('should accept valid email addresses', () => {\n      const validEmails = [\n        'test@example.com',\n        'user.name@domain.co.uk',\n        'admin+test@koveo.ca',\n        'manager@organization.quebec',\n      ];\n\n      validEmails.forEach(email => {\n        const result = invitationSchema.safeParse({\n          email,\n          role: 'tenant',\n          status: 'pending',\n          organizationId: null,\n          buildingId: null,\n          residenceId: null,\n          expiresAt: new Date(),\n        });\n        expect(result.success).toBe(true);\n      });\n    });\n\n    it('should reject invalid email addresses', () => {\n      const invalidEmails = [\n        'notanemail',\n        '@domain.com',\n        'user@',\n        'user..name@domain.com',\n        '',\n      ];\n\n      invalidEmails.forEach(email => {\n        const result = invitationSchema.safeParse({\n          email,\n          role: 'tenant',\n          status: 'pending',\n          organizationId: null,\n          buildingId: null,\n          residenceId: null,\n          expiresAt: new Date(),\n        });\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Role Validation', () => {\n    it('should accept all valid role values', () => {\n      const validRoles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];\n\n      validRoles.forEach(role => {\n        const result = invitationSchema.safeParse({\n          email: 'test@example.com',\n          role: role as any,\n          status: 'pending',\n          organizationId: null,\n          buildingId: null,\n          residenceId: null,\n          expiresAt: new Date(),\n        });\n        expect(result.success).toBe(true);\n      });\n    });\n\n    it('should reject invalid role values', () => {\n      const invalidRoles = ['superuser', 'guest', 'owner', '', 'ADMIN'];\n\n      invalidRoles.forEach(role => {\n        const result = invitationSchema.safeParse({\n          email: 'test@example.com',\n          role: role as any,\n          status: 'pending',\n          organizationId: null,\n          buildingId: null,\n          residenceId: null,\n          expiresAt: new Date(),\n        });\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Status Validation', () => {\n    it('should accept all valid status values', () => {\n      const validStatuses = ['pending', 'accepted', 'expired', 'cancelled'];\n\n      validStatuses.forEach(status => {\n        const result = invitationSchema.safeParse({\n          email: 'test@example.com',\n          role: 'tenant',\n          status: status as any,\n          organizationId: null,\n          buildingId: null,\n          residenceId: null,\n          expiresAt: new Date(),\n        });\n        expect(result.success).toBe(true);\n      });\n    });\n\n    it('should reject invalid status values', () => {\n      const invalidStatuses = ['active', 'inactive', 'processing', '', 'PENDING'];\n\n      invalidStatuses.forEach(status => {\n        const result = invitationSchema.safeParse({\n          email: 'test@example.com',\n          role: 'tenant',\n          status: status as any,\n          organizationId: null,\n          buildingId: null,\n          residenceId: null,\n          expiresAt: new Date(),\n        });\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Optional Fields Validation', () => {\n    it('should allow null values for organizationId, buildingId, and residenceId', () => {\n      const result = invitationSchema.safeParse({\n        email: 'test@example.com',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: null,\n        buildingId: null,\n        residenceId: null,\n        expiresAt: new Date(),\n      });\n      expect(result.success).toBe(true);\n    });\n\n    it('should accept valid UUIDs for optional fields', () => {\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n      \n      const result = invitationSchema.safeParse({\n        email: 'test@example.com',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: validUuid,\n        buildingId: validUuid,\n        residenceId: validUuid,\n        expiresAt: new Date(),\n      });\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject invalid UUIDs for optional fields', () => {\n      const invalidIds = ['not-a-uuid', '123', '', 'invalid-format'];\n\n      invalidIds.forEach(invalidId => {\n        const result = invitationSchema.safeParse({\n          email: 'test@example.com',\n          role: 'tenant',\n          status: 'pending',\n          organizationId: invalidId,\n          buildingId: null,\n          residenceId: null,\n          expiresAt: new Date(),\n        });\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Date Validation', () => {\n    it('should accept valid future dates for expiresAt', () => {\n      const futureDate = new Date();\n      futureDate.setDate(futureDate.getDate() + 7);\n\n      const result = invitationSchema.safeParse({\n        email: 'test@example.com',\n        role: 'tenant',\n        status: 'pending',\n        organizationId: null,\n        buildingId: null,\n        residenceId: null,\n        expiresAt: futureDate,\n      });\n      expect(result.success).toBe(true);\n    });\n\n    it('should accept valid past dates for expiresAt (for expired invitations)', () => {\n      const pastDate = new Date();\n      pastDate.setDate(pastDate.getDate() - 1);\n\n      const result = invitationSchema.safeParse({\n        email: 'test@example.com',\n        role: 'tenant',\n        status: 'expired',\n        organizationId: null,\n        buildingId: null,\n        residenceId: null,\n        expiresAt: pastDate,\n      });\n      expect(result.success).toBe(true);\n    });\n  });\n});\n\n// Test role-based access logic\ndescribe('Invitation Role-Based Access Logic', () => {\n  const hasAccessToInvitation = (userRole: string, userOrgIds: string[], invitationOrgId: string | null): boolean => {\n    if (userRole === 'admin') {\n      return true; // Admin can access all invitations\n    }\n    \n    if (userRole === 'manager') {\n      if (!invitationOrgId) {\n        return false; // Manager cannot access invitations without organization\n      }\n      return userOrgIds.includes(invitationOrgId); // Manager can only access their organization's invitations\n    }\n    \n    return false; // Other roles cannot access invitations\n  };\n\n  describe('Admin Access', () => {\n    it('should allow admin to access any invitation', () => {\n      const userRole = 'admin';\n      const userOrgIds = ['org1'];\n      \n      expect(hasAccessToInvitation(userRole, userOrgIds, 'org1')).toBe(true);\n      expect(hasAccessToInvitation(userRole, userOrgIds, 'org2')).toBe(true);\n      expect(hasAccessToInvitation(userRole, userOrgIds, null)).toBe(true);\n    });\n  });\n\n  describe('Manager Access', () => {\n    it('should allow manager to access invitations from their organizations', () => {\n      const userRole = 'manager';\n      const userOrgIds = ['org1', 'org2'];\n      \n      expect(hasAccessToInvitation(userRole, userOrgIds, 'org1')).toBe(true);\n      expect(hasAccessToInvitation(userRole, userOrgIds, 'org2')).toBe(true);\n    });\n\n    it('should deny manager access to invitations from other organizations', () => {\n      const userRole = 'manager';\n      const userOrgIds = ['org1'];\n      \n      expect(hasAccessToInvitation(userRole, userOrgIds, 'org3')).toBe(false);\n    });\n\n    it('should deny manager access to invitations without organization', () => {\n      const userRole = 'manager';\n      const userOrgIds = ['org1'];\n      \n      expect(hasAccessToInvitation(userRole, userOrgIds, null)).toBe(false);\n    });\n  });\n\n  describe('Other Role Access', () => {\n    it('should deny access to tenants and residents', () => {\n      const userOrgIds = ['org1'];\n      \n      expect(hasAccessToInvitation('tenant', userOrgIds, 'org1')).toBe(false);\n      expect(hasAccessToInvitation('resident', userOrgIds, 'org1')).toBe(false);\n    });\n  });\n});\n\n// Test invitation expiration logic\ndescribe('Invitation Expiration Logic', () => {\n  const isInvitationExpired = (expiresAt: Date): boolean => {\n    return expiresAt < new Date();\n  };\n\n  it('should correctly identify expired invitations', () => {\n    const expiredDate = new Date();\n    expiredDate.setDate(expiredDate.getDate() - 1); // Yesterday\n    \n    expect(isInvitationExpired(expiredDate)).toBe(true);\n  });\n\n  it('should correctly identify valid invitations', () => {\n    const futureDate = new Date();\n    futureDate.setDate(futureDate.getDate() + 7); // Next week\n    \n    expect(isInvitationExpired(futureDate)).toBe(false);\n  });\n\n  it('should handle edge case of expiration exactly now', () => {\n    const now = new Date();\n    // Invitation expires in 1 millisecond - should not be expired yet\n    const almostExpired = new Date(now.getTime() + 1);\n    expect(isInvitationExpired(almostExpired)).toBe(false);\n    \n    // Invitation expired 1 millisecond ago - should be expired\n    const justExpired = new Date(now.getTime() - 1);\n    expect(isInvitationExpired(justExpired)).toBe(true);\n  });\n});"],"version":3}