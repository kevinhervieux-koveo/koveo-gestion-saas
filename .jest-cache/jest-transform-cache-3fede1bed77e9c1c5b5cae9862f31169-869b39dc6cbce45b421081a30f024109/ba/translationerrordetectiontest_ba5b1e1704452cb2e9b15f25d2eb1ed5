8b3dac2bb2254c045a32d3d9bbd0b5b3
"use strict";
/**
 * Quick test to detect translation function errors specifically in the buildings page
 * and verify the fix works properly
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const fs = __importStar(require("fs"));
(0, globals_1.describe)('Translation Function Error Detection', () => {
    (0, globals_1.it)('should verify buildings page no longer has undefined t function error', () => {
        const buildingsFile = 'client/src/pages/manager/buildings.tsx';
        const content = fs.readFileSync(buildingsFile, 'utf-8');
        // Check that BuildingCard has t parameter in interface
        (0, globals_1.expect)(content).toMatch(/interface BuildingCardProps\s*{[^}]*t:\s*\(key:\s*string\)\s*=>\s*string/s);
        // Check that BuildingForm has t parameter in interface  
        (0, globals_1.expect)(content).toMatch(/interface BuildingFormProps\s*{[^}]*t:\s*\(key:\s*string\)\s*=>\s*string/s);
        // Check that components receive t as prop
        (0, globals_1.expect)(content).toMatch(/function BuildingCard\([^)]*,\s*t\s*\}/);
        (0, globals_1.expect)(content).toMatch(/function BuildingForm\([^)]*,\s*t\s*\}/);
        // Check that t is passed to components
        (0, globals_1.expect)(content).toMatch(/t={t}/);
        console.log('✅ Buildings page properly implements translation function passing');
    });
    (0, globals_1.it)('should detect any remaining t() calls without proper setup', () => {
        const buildingsFile = 'client/src/pages/manager/buildings.tsx';
        const content = fs.readFileSync(buildingsFile, 'utf-8');
        // Split content into lines for analysis
        const lines = content.split('\n');
        const issues = [];
        lines.forEach((line, index) => {
            // Check for t() calls
            if (line.includes('t(') && !line.includes('const { t }') && !line.includes('t:')) {
                // Make sure this line is inside a component that has access to t
                const lineNumber = index + 1;
                // If it's in BuildingCard or BuildingForm, it should be ok now
                const isInFunction = content.substring(0, content.indexOf(line)).includes('function Building');
                if (isInFunction) {
                    // This should be fine now
                }
                else {
                    issues.push(`Line ${lineNumber}: ${line.trim()}`);
                }
            }
        });
        if (issues.length > 0) {
            console.log('⚠️  Potential remaining translation issues:');
            issues.forEach(issue => console.log(`   ${issue}`));
        }
        else {
            console.log('✅ No remaining translation function issues detected');
        }
        (0, globals_1.expect)(issues.length).toBe(0);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L3RyYW5zbGF0aW9uLWVycm9yLWRldGVjdGlvbi50ZXN0LnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUgsMkNBQXFEO0FBQ3JELHVDQUF5QjtBQUV6QixJQUFBLGtCQUFRLEVBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO0lBQ3BELElBQUEsWUFBRSxFQUFDLHVFQUF1RSxFQUFFLEdBQUcsRUFBRTtRQUMvRSxNQUFNLGFBQWEsR0FBRyx3Q0FBd0MsQ0FBQztRQUMvRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV4RCx1REFBdUQ7UUFDdkQsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQywyRUFBMkUsQ0FBQyxDQUFDO1FBRXJHLHlEQUF5RDtRQUN6RCxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLDJFQUEyRSxDQUFDLENBQUM7UUFFckcsMENBQTBDO1FBQzFDLElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsd0NBQXdDLENBQUMsQ0FBQztRQUNsRSxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFFbEUsdUNBQXVDO1FBQ3ZDLElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO0lBQ25GLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxZQUFFLEVBQUMsNERBQTRELEVBQUUsR0FBRyxFQUFFO1FBQ3BFLE1BQU0sYUFBYSxHQUFHLHdDQUF3QyxDQUFDO1FBQy9ELE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXhELHdDQUF3QztRQUN4QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUU1QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzVCLHNCQUFzQjtZQUN0QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUNqRixpRUFBaUU7Z0JBQ2pFLE1BQU0sVUFBVSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBRTdCLCtEQUErRDtnQkFDL0QsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2dCQUUvRixJQUFJLFlBQVksRUFBRSxDQUFDO29CQUNqQiwwQkFBMEI7Z0JBQzVCLENBQUM7cUJBQU0sQ0FBQztvQkFDTixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsVUFBVSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3BELENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1lBQzNELE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7UUFFRCxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdGVzdHMvdW5pdC90cmFuc2xhdGlvbi1lcnJvci1kZXRlY3Rpb24udGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFF1aWNrIHRlc3QgdG8gZGV0ZWN0IHRyYW5zbGF0aW9uIGZ1bmN0aW9uIGVycm9ycyBzcGVjaWZpY2FsbHkgaW4gdGhlIGJ1aWxkaW5ncyBwYWdlXG4gKiBhbmQgdmVyaWZ5IHRoZSBmaXggd29ya3MgcHJvcGVybHlcbiAqL1xuXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCB9IGZyb20gJ0BqZXN0L2dsb2JhbHMnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5kZXNjcmliZSgnVHJhbnNsYXRpb24gRnVuY3Rpb24gRXJyb3IgRGV0ZWN0aW9uJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHZlcmlmeSBidWlsZGluZ3MgcGFnZSBubyBsb25nZXIgaGFzIHVuZGVmaW5lZCB0IGZ1bmN0aW9uIGVycm9yJywgKCkgPT4ge1xuICAgIGNvbnN0IGJ1aWxkaW5nc0ZpbGUgPSAnY2xpZW50L3NyYy9wYWdlcy9tYW5hZ2VyL2J1aWxkaW5ncy50c3gnO1xuICAgIGNvbnN0IGNvbnRlbnQgPSBmcy5yZWFkRmlsZVN5bmMoYnVpbGRpbmdzRmlsZSwgJ3V0Zi04Jyk7XG5cbiAgICAvLyBDaGVjayB0aGF0IEJ1aWxkaW5nQ2FyZCBoYXMgdCBwYXJhbWV0ZXIgaW4gaW50ZXJmYWNlXG4gICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL2ludGVyZmFjZSBCdWlsZGluZ0NhcmRQcm9wc1xccyp7W159XSp0OlxccypcXChrZXk6XFxzKnN0cmluZ1xcKVxccyo9PlxccypzdHJpbmcvcyk7XG4gICAgXG4gICAgLy8gQ2hlY2sgdGhhdCBCdWlsZGluZ0Zvcm0gaGFzIHQgcGFyYW1ldGVyIGluIGludGVyZmFjZSAgXG4gICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL2ludGVyZmFjZSBCdWlsZGluZ0Zvcm1Qcm9wc1xccyp7W159XSp0OlxccypcXChrZXk6XFxzKnN0cmluZ1xcKVxccyo9PlxccypzdHJpbmcvcyk7XG4gICAgXG4gICAgLy8gQ2hlY2sgdGhhdCBjb21wb25lbnRzIHJlY2VpdmUgdCBhcyBwcm9wXG4gICAgZXhwZWN0KGNvbnRlbnQpLnRvTWF0Y2goL2Z1bmN0aW9uIEJ1aWxkaW5nQ2FyZFxcKFteKV0qLFxccyp0XFxzKlxcfS8pO1xuICAgIGV4cGVjdChjb250ZW50KS50b01hdGNoKC9mdW5jdGlvbiBCdWlsZGluZ0Zvcm1cXChbXildKixcXHMqdFxccypcXH0vKTtcbiAgICBcbiAgICAvLyBDaGVjayB0aGF0IHQgaXMgcGFzc2VkIHRvIGNvbXBvbmVudHNcbiAgICBleHBlY3QoY29udGVudCkudG9NYXRjaCgvdD17dH0vKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn4pyFIEJ1aWxkaW5ncyBwYWdlIHByb3Blcmx5IGltcGxlbWVudHMgdHJhbnNsYXRpb24gZnVuY3Rpb24gcGFzc2luZycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRldGVjdCBhbnkgcmVtYWluaW5nIHQoKSBjYWxscyB3aXRob3V0IHByb3BlciBzZXR1cCcsICgpID0+IHtcbiAgICBjb25zdCBidWlsZGluZ3NGaWxlID0gJ2NsaWVudC9zcmMvcGFnZXMvbWFuYWdlci9idWlsZGluZ3MudHN4JztcbiAgICBjb25zdCBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGJ1aWxkaW5nc0ZpbGUsICd1dGYtOCcpO1xuICAgIFxuICAgIC8vIFNwbGl0IGNvbnRlbnQgaW50byBsaW5lcyBmb3IgYW5hbHlzaXNcbiAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IGlzc3Vlczogc3RyaW5nW10gPSBbXTtcbiAgICBcbiAgICBsaW5lcy5mb3JFYWNoKChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgLy8gQ2hlY2sgZm9yIHQoKSBjYWxsc1xuICAgICAgaWYgKGxpbmUuaW5jbHVkZXMoJ3QoJykgJiYgIWxpbmUuaW5jbHVkZXMoJ2NvbnN0IHsgdCB9JykgJiYgIWxpbmUuaW5jbHVkZXMoJ3Q6JykpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgbGluZSBpcyBpbnNpZGUgYSBjb21wb25lbnQgdGhhdCBoYXMgYWNjZXNzIHRvIHRcbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IGluZGV4ICsgMTtcbiAgICAgICAgXG4gICAgICAgIC8vIElmIGl0J3MgaW4gQnVpbGRpbmdDYXJkIG9yIEJ1aWxkaW5nRm9ybSwgaXQgc2hvdWxkIGJlIG9rIG5vd1xuICAgICAgICBjb25zdCBpc0luRnVuY3Rpb24gPSBjb250ZW50LnN1YnN0cmluZygwLCBjb250ZW50LmluZGV4T2YobGluZSkpLmluY2x1ZGVzKCdmdW5jdGlvbiBCdWlsZGluZycpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGlzSW5GdW5jdGlvbikge1xuICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIGZpbmUgbm93XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNzdWVzLnB1c2goYExpbmUgJHtsaW5lTnVtYmVyfTogJHtsaW5lLnRyaW0oKX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGlmIChpc3N1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyAgUG90ZW50aWFsIHJlbWFpbmluZyB0cmFuc2xhdGlvbiBpc3N1ZXM6Jyk7XG4gICAgICBpc3N1ZXMuZm9yRWFjaChpc3N1ZSA9PiBjb25zb2xlLmxvZyhgICAgJHtpc3N1ZX1gKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgTm8gcmVtYWluaW5nIHRyYW5zbGF0aW9uIGZ1bmN0aW9uIGlzc3VlcyBkZXRlY3RlZCcpO1xuICAgIH1cbiAgICBcbiAgICBleHBlY3QoaXNzdWVzLmxlbmd0aCkudG9CZSgwKTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=