2f133f049f05f5707a4df33a325c35ac
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationForm = OrganizationForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const use_language_1 = require("@/hooks/use-language");
const dialog_1 = require("@/components/ui/dialog");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const input_1 = require("@/components/ui/input");
const button_1 = require("@/components/ui/button");
// Define the form schema with Quebec-specific validation
const organizationFormSchema = zod_2.z.object({
    name: zod_2.z
        .string()
        .min(1, 'Organization name is required (example: Maple Property Management)')
        .max(200, 'Organization name must be less than 200 characters'),
    type: zod_2.z.string().min(1, 'Please select an organization type from the dropdown'),
    address: zod_2.z
        .string()
        .min(1, 'Street address is required (example: 123 Rue Saint-Denis)')
        .max(300, 'Address must be less than 300 characters'),
    city: zod_2.z.string().min(1, 'City name is required (example: Montréal)').max(100, 'City name must be less than 100 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens'),
    province: zod_2.z.string().min(1, 'Province is required').default('QC'),
    postalCode: zod_2.z
        .string()
        .min(1, 'Postal code is required')
        .regex(/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$|^[A-Z]\d[A-Z]\d[A-Z]\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)'),
    phone: zod_2.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return /^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/.test(val);
    }, 'Phone number must be a valid North American format (example: (514) 123-4567)'),
    email: zod_2.z.string().email('Please enter a valid email address (example: contact@organization.com)').optional().or(zod_2.z.literal('')),
    website: zod_2.z.string().url('Website must be a valid URL (example: https://www.organization.com)').optional().or(zod_2.z.literal('')),
    registrationNumber: zod_2.z.string().max(50, 'Registration number must be less than 50 characters').optional(),
});
/**
 * Form for creating new organizations in the Quebec property management system.
 * Includes all required fields with Quebec-specific defaults and validation.
 * @param root0 - Component props.
 * @param root0.open - Dialog open state.
 * @param root0.onOpenChange - Callback to handle dialog open state changes.
 * @returns Organization form dialog component.
 */
/**
 * OrganizationForm function.
 * @param root0
 * @param root0.open
 * @param root0.onOpenChange
 * @returns Function result.
 */
function OrganizationForm({ open, onOpenChange }) {
    const { t: _t } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(organizationFormSchema),
        defaultValues: {
            name: '',
            type: '',
            address: '',
            city: '',
            province: 'QC', // Default to Quebec
            postalCode: '',
            phone: '',
            email: '',
            website: '',
            registrationNumber: '',
        },
    });
    const createOrganizationMutation = (0, react_query_1.useMutation)({
        mutationFn: async (_data) => {
            const response = await (0, queryClient_1.apiRequest)('POST', '/api/organizations', _data);
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: 'Organization created successfully',
            });
            queryClient.invalidateQueries({ queryKey: ['/api/organizations'] });
            form.reset();
            onOpenChange(false);
        },
        onError: (_error) => {
            toast({
                title: 'Error',
                description: _error?.message || 'Failed to create organization',
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (_data) => {
        // Convert empty strings to undefined for optional fields
        const cleanData = {
            ..._data,
            phone: _data.phone || undefined,
            email: _data.email || undefined,
            website: _data.website || undefined,
            registrationNumber: _data.registrationNumber || undefined,
        };
        createOrganizationMutation.mutate(cleanData);
    };
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: open, onOpenChange: onOpenChange, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'sm:max-w-[600px] max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Create New Organization" }) }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'name', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: 'md:col-span-2', children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Organization Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Enter organization name', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'type', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Type *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select organization type' }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'management_company', children: "Management Company" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'syndicate', children: "Syndicate" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cooperative', children: "Cooperative" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'condo_association', children: "Condo Association" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'Demo', children: "Demo" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'registrationNumber', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Quebec Registration Number" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Business registration number', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'address', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: 'md:col-span-2', children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Address *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Street address', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'city', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "City *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'City', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'province', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Province" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'QC', children: "Quebec (QC)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'ON', children: "Ontario (ON)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'BC', children: "British Columbia (BC)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'AB', children: "Alberta (AB)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'SK', children: "Saskatchewan (SK)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'MB', children: "Manitoba (MB)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NB', children: "New Brunswick (NB)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NS', children: "Nova Scotia (NS)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'PE', children: "Prince Edward Island (PE)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NL', children: "Newfoundland and Labrador (NL)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NT', children: "Northwest Territories (NT)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NU', children: "Nunavut (NU)" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'YT', children: "Yukon (YT)" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'postalCode', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Postal Code *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'A1A 1A1', ...field, onChange: (e) => {
                                                            // Auto-format postal code to uppercase
                                                            const value = e.target.value.toUpperCase();
                                                            field.onChange(value);
                                                        } }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'phone', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Phone" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: '(514) 123-4567', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'email', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Email" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'contact@organization.com', type: 'email', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'website', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: 'md:col-span-2', children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Website" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'https://www.organization.com', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end space-x-2 pt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => onOpenChange(false), disabled: createOrganizationMutation.isPending, children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: createOrganizationMutation.isPending, children: createOrganizationMutation.isPending ? 'Creating...' : 'Create Organization' })] })] }) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,