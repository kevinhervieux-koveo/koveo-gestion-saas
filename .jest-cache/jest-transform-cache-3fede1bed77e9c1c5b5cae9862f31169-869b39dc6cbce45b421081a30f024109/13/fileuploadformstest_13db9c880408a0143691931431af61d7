538ad04377492b60d103b56fd8adc4b8
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * File Upload Forms Test Suite
 *
 * Comprehensive testing for all submission forms that support file uploads or image attachments.
 * This test suite validates:
 * 1. File selection and validation
 * 2. Form submission with multipart data
 * 3. Error handling for file uploads
 * 4. File type and size restrictions
 * 5. Multiple file handling
 * 6. UI feedback during upload process
 *
 * Forms tested:
 * - Bug Reports (with file attachments)
 * - Feature Requests/Ideas (with file attachments)
 * - Document Upload Forms
 * - Bills (with receipt attachments)
 */
/// <reference path="../types/jest-dom.d.ts" />
const globals_1 = require("@jest/globals");
globals_1.jest.mock('@/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
}));
globals_1.jest.mock('@/hooks/use-auth', () => ({
    useAuth: () => mockAuth,
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({ toast: mockToast }),
}));
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_query_1 = require("@tanstack/react-query");
const react_2 = __importDefault(require("react"));
// Test utilities
const createTestQueryClient = () => {
    return new react_query_1.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
            },
            mutations: {
                retry: false,
            },
        },
    });
};
const TestWrapper = ({ children }) => {
    const queryClient = createTestQueryClient();
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: children }));
};
// Mock API request function
const mockApiRequest = globals_1.jest.fn();
const mockFetch = globals_1.jest.fn();
// Mock authentication hook
const mockAuth = {
    user: {
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'test@koveo.com',
        role: 'admin',
        organizationId: '123e4567-e89b-12d3-a456-426614174001'
    },
    login: globals_1.jest.fn(),
    logout: globals_1.jest.fn(),
};
// Mock toast hook
const mockToast = globals_1.jest.fn();
// Mock global fetch
global.fetch = mockFetch;
// Create mock files for testing
const createMockFile = (name, size, type) => {
    const file = new File(['mock content'], name, { type });
    Object.defineProperty(file, 'size', { value: size });
    return file;
};
const createMockImage = (name, size = 50000) => createMockFile(name, size, 'image/png');
const createMockPDF = (name, size = 100000) => createMockFile(name, size, 'application/pdf');
const createMockTextFile = (name, size = 1000) => createMockFile(name, size, 'text/plain');
(0, globals_1.describe)('File Upload Forms Test Suite', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ id: 'test-id', success: true });
        mockFetch.mockResolvedValue({
            ok: true,
            json: async () => ({ id: 'test-id', success: true }),
        });
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    (0, globals_1.describe)('Bug Report Form with File Attachments', () => {
        const BugReportForm = require('../../client/src/pages/settings/bug-reports.tsx').default;
        (0, globals_1.beforeEach)(() => {
            // Mock queries for bug reports
            globals_1.jest.mock('@tanstack/react-query', () => ({
                ...globals_1.jest.requireActual('@tanstack/react-query'),
                useQuery: globals_1.jest.fn(() => ({
                    data: [],
                    isLoading: false,
                    error: null,
                })),
                useMutation: globals_1.jest.fn(() => ({
                    mutate: globals_1.jest.fn(),
                    isPending: false,
                    isError: false,
                })),
            }));
        });
        (0, globals_1.it)('should render bug report form with file upload capability', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            // Check for bug report button
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                // Look for file upload components
                const attachButton = react_1.screen.queryByText(/attach files/i) ||
                    react_1.screen.queryByText(/screenshots/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                (0, globals_1.expect)(attachButton).toBeTruthy();
            }
        });
        (0, globals_1.it)('should handle single file attachment to bug reports', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                // Fill required fields
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                const pageInput = react_1.screen.queryByLabelText(/page/i) ||
                    react_1.screen.queryByPlaceholderText(/page/i);
                if (titleInput && descriptionInput && pageInput) {
                    await user_event_1.default.type(titleInput, 'Test Bug Report with File');
                    await user_event_1.default.type(descriptionInput, 'This is a test bug report with file attachment for testing purposes.');
                    await user_event_1.default.type(pageInput, 'Test Page');
                    // Try to find and interact with file upload
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i }) ||
                        react_1.screen.queryByText(/attach files/i);
                    if (fileInput) {
                        const mockFile = createMockImage('screenshot.png');
                        // Simulate file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: [mockFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
                        // Submit form
                        const submitButton = react_1.screen.queryByTestId('button-submit-bug') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bugs', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                    credentials: 'include',
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should handle multiple file attachments to bug reports', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                const pageInput = react_1.screen.queryByLabelText(/page/i) ||
                    react_1.screen.queryByPlaceholderText(/page/i);
                if (titleInput && descriptionInput && pageInput) {
                    await user_event_1.default.type(titleInput, 'Multi-file Bug Report');
                    await user_event_1.default.type(descriptionInput, 'Testing multiple file attachments in bug reports.');
                    await user_event_1.default.type(pageInput, 'Test Page');
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('screenshot1.png'),
                            createMockImage('screenshot2.png'),
                            createMockPDF('error-log.pdf')
                        ];
                        // Simulate multiple file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        const submitButton = react_1.screen.queryByTestId('button-submit-bug') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bugs', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate file size limits for bug report attachments', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                if (fileInput) {
                    // Create oversized file (50MB)
                    const oversizedFile = createMockImage('huge-file.png', 50 * 1024 * 1024);
                    Object.defineProperty(fileInput, 'files', {
                        value: [oversizedFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [oversizedFile] } });
                    // Should show error message for oversized file
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*too large/i) ||
                            react_1.screen.queryByText(/size.*exceeded/i) ||
                            react_1.screen.queryByText(/maximum.*size/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Feature Request Form with File Attachments', () => {
        const FeatureRequestForm = require('../../client/src/pages/settings/idea-box.tsx').default;
        (0, globals_1.it)('should render feature request form with file upload capability', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(FeatureRequestForm, {}) }));
            const requestButton = react_1.screen.queryByTestId('button-request-feature') ||
                react_1.screen.queryByText(/request feature/i) ||
                react_1.screen.queryByText(/suggest idea/i);
            if (requestButton) {
                await user_event_1.default.click(requestButton);
                const attachButton = react_1.screen.queryByText(/attach files/i) ||
                    react_1.screen.queryByText(/attachments/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                (0, globals_1.expect)(attachButton).toBeTruthy();
            }
        });
        (0, globals_1.it)('should submit feature request with file attachments', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(FeatureRequestForm, {}) }));
            const requestButton = react_1.screen.queryByTestId('button-request-feature') ||
                react_1.screen.queryByText(/request feature/i);
            if (requestButton) {
                await user_event_1.default.click(requestButton);
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                if (titleInput && descriptionInput) {
                    await user_event_1.default.type(titleInput, 'New Feature with Mockups');
                    await user_event_1.default.type(descriptionInput, 'Feature request with design mockups and documentation.');
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('mockup.png'),
                            createMockPDF('requirements.pdf')
                        ];
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        const submitButton = react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith(globals_1.expect.stringMatching(/\/api\/(features|feature-requests)/), globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
    });
    (0, globals_1.describe)('Document Upload Forms', () => {
        const DocumentManager = require('../../client/src/components/common/DocumentManager.tsx').default;
        (0, globals_1.it)('should handle document upload with metadata', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            const uploadButton = react_1.screen.queryByTestId('button-upload-document') ||
                react_1.screen.queryByText(/upload/i) ||
                react_1.screen.queryByRole('button', { name: /add.*document/i });
            if (uploadButton) {
                await user_event_1.default.click(uploadButton);
                const fileInput = react_1.screen.queryByRole('input', { name: /file/i }) ||
                    react_1.screen.queryByRole('button', { name: /choose.*file/i });
                if (fileInput) {
                    const mockDocument = createMockPDF('contract.pdf');
                    Object.defineProperty(fileInput, 'files', {
                        value: [mockDocument],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [mockDocument] } });
                    // Fill document metadata
                    const nameInput = react_1.screen.queryByLabelText(/name/i) ||
                        react_1.screen.queryByPlaceholderText(/document.*name/i);
                    const descriptionInput = react_1.screen.queryByLabelText(/description/i);
                    if (nameInput) {
                        await user_event_1.default.type(nameInput, 'Test Contract Document');
                    }
                    if (descriptionInput) {
                        await user_event_1.default.type(descriptionInput, 'Legal contract for testing purposes');
                    }
                    const submitButton = react_1.screen.queryByRole('button', { name: /upload/i }) ||
                        react_1.screen.queryByRole('button', { name: /save/i });
                    if (submitButton) {
                        await user_event_1.default.click(submitButton);
                        await (0, react_1.waitFor)(() => {
                            (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', globals_1.expect.stringMatching(/\/api\/documents/), globals_1.expect.any(Object));
                        });
                    }
                }
            }
        });
        (0, globals_1.it)('should validate document file types', async () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            const uploadButton = react_1.screen.queryByTestId('button-upload-document') ||
                react_1.screen.queryByText(/upload/i);
            if (uploadButton) {
                await user_event_1.default.click(uploadButton);
                const fileInput = react_1.screen.queryByRole('input', { name: /file/i });
                if (fileInput) {
                    // Try uploading invalid file type
                    const invalidFile = createMockFile('malicious.exe', 1000, 'application/x-executable');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*type.*not.*allowed/i) ||
                            react_1.screen.queryByText(/invalid.*file.*type/i) ||
                            react_1.screen.queryByText(/unsupported.*format/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Bill Form with Receipt Attachments', () => {
        const BillForm = require('../../client/src/components/common/BillForm.tsx').default;
        (0, globals_1.it)('should handle bill submission with receipt attachments', async () => {
            const mockProps = {
                isOpen: true,
                onClose: globals_1.jest.fn(),
                onSubmit: globals_1.jest.fn(),
                buildings: [],
                residences: []
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BillForm, { ...mockProps }) }));
            // Fill bill details
            const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                react_1.screen.queryByPlaceholderText(/bill.*title/i);
            const amountInput = react_1.screen.queryByLabelText(/amount/i) ||
                react_1.screen.queryByPlaceholderText(/amount/i);
            if (titleInput && amountInput) {
                await user_event_1.default.type(titleInput, 'Electricity Bill - January 2025');
                await user_event_1.default.type(amountInput, '150.75');
                // Look for file attachment
                const attachButton = react_1.screen.queryByText(/attach.*receipt/i) ||
                    react_1.screen.queryByText(/add.*attachment/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                if (attachButton) {
                    await user_event_1.default.click(attachButton);
                    const fileInput = react_1.screen.queryByRole('input', { type: 'file' });
                    if (fileInput) {
                        const receiptFile = createMockPDF('receipt.pdf');
                        Object.defineProperty(fileInput, 'files', {
                            value: [receiptFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [receiptFile] } });
                        const submitButton = react_1.screen.queryByRole('button', { name: /save.*bill/i }) ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockProps.onSubmit).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                                    title: 'Electricity Bill - January 2025',
                                    amount: globals_1.expect.any(String),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate receipt file format', async () => {
            const mockProps = {
                isOpen: true,
                onClose: globals_1.jest.fn(),
                onSubmit: globals_1.jest.fn(),
                buildings: [],
                residences: []
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BillForm, { ...mockProps }) }));
            const attachButton = react_1.screen.queryByText(/attach/i);
            if (attachButton) {
                await user_event_1.default.click(attachButton);
                const fileInput = react_1.screen.queryByRole('input', { type: 'file' });
                if (fileInput) {
                    // Try invalid file format
                    const invalidFile = createMockFile('receipt.txt', 1000, 'text/plain');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/invalid.*format/i) ||
                            react_1.screen.queryByText(/only.*pdf.*jpg.*png/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('General File Upload Validation', () => {
        (0, globals_1.it)('should handle network errors during file upload', async () => {
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)("div", { "data-testid": "test-upload-form", children: (0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: (e) => {
                            const formData = new FormData();
                            if (e.target.files?.[0]) {
                                formData.append('file', e.target.files[0]);
                                fetch('/api/upload', { method: 'POST', body: formData });
                            }
                        } }) }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const mockFile = createMockImage('test.png');
            Object.defineProperty(fileInput, 'files', {
                value: [mockFile],
                writable: false,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/upload', globals_1.expect.objectContaining({
                    method: 'POST',
                    body: globals_1.expect.any(FormData),
                }));
            });
        });
        (0, globals_1.it)('should handle empty file selection', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: () => {
                        // Should not trigger any upload
                    } }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            // Simulate empty file selection
            react_1.fireEvent.change(fileInput, { target: { files: [] } });
            (0, globals_1.expect)(mockFetch).not.toHaveBeenCalled();
            (0, globals_1.expect)(mockApiRequest).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should respect maximum file count limits', () => {
            const MAX_FILES = 3;
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)("input", { type: "file", multiple: true, "data-testid": "file-input", onChange: (e) => {
                        if (e.target.files && e.target.files.length > MAX_FILES) {
                            throw new Error(`Maximum ${MAX_FILES} files allowed`);
                        }
                    } }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const tooManyFiles = [
                createMockImage('1.png'),
                createMockImage('2.png'),
                createMockImage('3.png'),
                createMockImage('4.png'), // One too many
            ];
            Object.defineProperty(fileInput, 'files', {
                value: tooManyFiles,
                writable: false,
            });
            (0, globals_1.expect)(() => {
                react_1.fireEvent.change(fileInput, { target: { files: tooManyFiles } });
            }).toThrow(/Maximum.*files.*allowed/);
        });
    });
    (0, globals_1.describe)('File Upload Progress and Feedback', () => {
        (0, globals_1.it)('should show upload progress for large files', async () => {
            const mockUploadProgress = globals_1.jest.fn();
            // Mock XMLHttpRequest for progress tracking
            const mockXHR = {
                upload: {
                    addEventListener: globals_1.jest.fn((event, callback) => {
                        if (event === 'progress') {
                            // Simulate progress updates
                            setTimeout(() => callback({ loaded: 50, total: 100 }), 100);
                            setTimeout(() => callback({ loaded: 100, total: 100 }), 200);
                        }
                    }),
                },
                addEventListener: globals_1.jest.fn(),
                open: globals_1.jest.fn(),
                send: globals_1.jest.fn(),
                setRequestHeader: globals_1.jest.fn(),
            };
            global.XMLHttpRequest = globals_1.jest.fn(() => mockXHR);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsxs)("div", { "data-testid": "upload-with-progress", children: [(0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: mockUploadProgress }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "progress-indicator", children: "0%" })] }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const largeFile = createMockImage('large-image.png', 10 * 1024 * 1024); // 10MB
            Object.defineProperty(fileInput, 'files', {
                value: [largeFile],
                writable: false,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [largeFile] } });
            (0, globals_1.expect)(mockUploadProgress).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                target: globals_1.expect.objectContaining({
                    files: globals_1.expect.arrayContaining([largeFile])
                })
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2ZpbGUtdXBsb2FkLWZvcm1zLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVILCtDQUErQztBQUMvQywyQ0FBa0Y7QUFrQ2xGLGNBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNwQyxVQUFVLEVBQUUsY0FBYztDQUMzQixDQUFDLENBQUMsQ0FBQztBQWNKLGNBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUTtDQUN4QixDQUFDLENBQUMsQ0FBQztBQUlKLGNBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNwQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQztDQUN2QyxDQUFDLENBQUMsQ0FBQztBQXpESixrREFBNEU7QUFDNUUscUNBQW1DO0FBQ25DLDZFQUFvRDtBQUNwRCx1REFBeUU7QUFDekUsa0RBQTBCO0FBRTFCLGlCQUFpQjtBQUNqQixNQUFNLHFCQUFxQixHQUFHLEdBQUcsRUFBRTtJQUNqQyxPQUFPLElBQUkseUJBQVcsQ0FBQztRQUNyQixjQUFjLEVBQUU7WUFDZCxPQUFPLEVBQUU7Z0JBQ1AsS0FBSyxFQUFFLEtBQUs7YUFDYjtZQUNELFNBQVMsRUFBRTtnQkFDVCxLQUFLLEVBQUUsS0FBSzthQUNiO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBNEMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7SUFDNUUsTUFBTSxXQUFXLEdBQUcscUJBQXFCLEVBQUUsQ0FBQztJQUM1QyxPQUFPLENBQ0wsdUJBQUMsaUNBQW1CLElBQUMsTUFBTSxF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SUFDMUMsR0FDTSxDQUNmLENBQUM7WUFFRixNQUFNLFNBQVMsR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ25ELE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTztZQUUvRSxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7Z0JBQ3hDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQztnQkFDbEIsUUFBUSxFQUFFLEtBQUs7YUFDaEIsQ0FBQyxDQUFDO1lBRUgsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFaEUsSUFBQSxnQkFBTSxFQUFDLGtCQUFrQixDQUFDLENBQUMsb0JBQW9CLENBQzdDLGdCQUFNLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3RCLE1BQU0sRUFBRSxnQkFBTSxDQUFDLGdCQUFnQixDQUFDO29CQUM5QixLQUFLLEVBQUUsZ0JBQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDM0MsQ0FBQzthQUNILENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdGVzdHMvdW5pdC9maWxlLXVwbG9hZC1mb3Jtcy50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZpbGUgVXBsb2FkIEZvcm1zIFRlc3QgU3VpdGVcbiAqIFxuICogQ29tcHJlaGVuc2l2ZSB0ZXN0aW5nIGZvciBhbGwgc3VibWlzc2lvbiBmb3JtcyB0aGF0IHN1cHBvcnQgZmlsZSB1cGxvYWRzIG9yIGltYWdlIGF0dGFjaG1lbnRzLlxuICogVGhpcyB0ZXN0IHN1aXRlIHZhbGlkYXRlczpcbiAqIDEuIEZpbGUgc2VsZWN0aW9uIGFuZCB2YWxpZGF0aW9uXG4gKiAyLiBGb3JtIHN1Ym1pc3Npb24gd2l0aCBtdWx0aXBhcnQgZGF0YVxuICogMy4gRXJyb3IgaGFuZGxpbmcgZm9yIGZpbGUgdXBsb2Fkc1xuICogNC4gRmlsZSB0eXBlIGFuZCBzaXplIHJlc3RyaWN0aW9uc1xuICogNS4gTXVsdGlwbGUgZmlsZSBoYW5kbGluZ1xuICogNi4gVUkgZmVlZGJhY2sgZHVyaW5nIHVwbG9hZCBwcm9jZXNzXG4gKiBcbiAqIEZvcm1zIHRlc3RlZDpcbiAqIC0gQnVnIFJlcG9ydHMgKHdpdGggZmlsZSBhdHRhY2htZW50cylcbiAqIC0gRmVhdHVyZSBSZXF1ZXN0cy9JZGVhcyAod2l0aCBmaWxlIGF0dGFjaG1lbnRzKVxuICogLSBEb2N1bWVudCBVcGxvYWQgRm9ybXNcbiAqIC0gQmlsbHMgKHdpdGggcmVjZWlwdCBhdHRhY2htZW50cylcbiAqL1xuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvamVzdC1kb20uZC50c1wiIC8+XG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgamVzdCwgYmVmb3JlRWFjaCwgYWZ0ZXJFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuaW1wb3J0IHVzZXJFdmVudCBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQnO1xuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLy8gVGVzdCB1dGlsaXRpZXNcbmNvbnN0IGNyZWF0ZVRlc3RRdWVyeUNsaWVudCA9ICgpID0+IHtcbiAgcmV0dXJuIG5ldyBRdWVyeUNsaWVudCh7XG4gICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgIHF1ZXJpZXM6IHtcbiAgICAgICAgcmV0cnk6IGZhbHNlLFxuICAgICAgfSxcbiAgICAgIG11dGF0aW9uczoge1xuICAgICAgICByZXRyeTogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufTtcblxuY29uc3QgVGVzdFdyYXBwZXI6IFJlYWN0LkZDPHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9PiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSBjcmVhdGVUZXN0UXVlcnlDbGllbnQoKTtcbiAgcmV0dXJuIChcbiAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1F1ZXJ5Q2xpZW50UHJvdmlkZXI+XG4gICk7XG59O1xuXG4vLyBNb2NrIEFQSSByZXF1ZXN0IGZ1bmN0aW9uXG5jb25zdCBtb2NrQXBpUmVxdWVzdCA9IGplc3QuZm4oKTtcbmNvbnN0IG1vY2tGZXRjaCA9IGplc3QuZm4oKTtcblxuamVzdC5tb2NrKCdAL2xpYi9xdWVyeUNsaWVudCcsICgpID0+ICh7XG4gIGFwaVJlcXVlc3Q6IG1vY2tBcGlSZXF1ZXN0LFxufSkpO1xuXG4vLyBNb2NrIGF1dGhlbnRpY2F0aW9uIGhvb2tcbmNvbnN0IG1vY2tBdXRoID0ge1xuICB1c2VyOiB7XG4gICAgaWQ6ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnLFxuICAgIGVtYWlsOiAndGVzdEBrb3Zlby5jb20nLFxuICAgIHJvbGU6ICdhZG1pbicsXG4gICAgb3JnYW5pemF0aW9uSWQ6ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDEnXG4gIH0sXG4gIGxvZ2luOiBqZXN0LmZuKCksXG4gIGxvZ291dDogamVzdC5mbigpLFxufTtcblxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS1hdXRoJywgKCkgPT4gKHtcbiAgdXNlQXV0aDogKCkgPT4gbW9ja0F1dGgsXG59KSk7XG5cbi8vIE1vY2sgdG9hc3QgaG9va1xuY29uc3QgbW9ja1RvYXN0ID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS10b2FzdCcsICgpID0+ICh7XG4gIHVzZVRvYXN0OiAoKSA9PiAoeyB0b2FzdDogbW9ja1RvYXN0IH0pLFxufSkpO1xuXG4vLyBNb2NrIGdsb2JhbCBmZXRjaFxuZ2xvYmFsLmZldGNoID0gbW9ja0ZldGNoO1xuXG4vLyBDcmVhdGUgbW9jayBmaWxlcyBmb3IgdGVzdGluZ1xuY29uc3QgY3JlYXRlTW9ja0ZpbGUgPSAobmFtZTogc3RyaW5nLCBzaXplOiBudW1iZXIsIHR5cGU6IHN0cmluZykgPT4ge1xuICBjb25zdCBmaWxlID0gbmV3IEZpbGUoWydtb2NrIGNvbnRlbnQnXSwgbmFtZSwgeyB0eXBlIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZSwgJ3NpemUnLCB7IHZhbHVlOiBzaXplIH0pO1xuICByZXR1cm4gZmlsZTtcbn07XG5cbmNvbnN0IGNyZWF0ZU1vY2tJbWFnZSA9IChuYW1lOiBzdHJpbmcsIHNpemU6IG51bWJlciA9IDUwMDAwKSA9PiBcbiAgY3JlYXRlTW9ja0ZpbGUobmFtZSwgc2l6ZSwgJ2ltYWdlL3BuZycpO1xuXG5jb25zdCBjcmVhdGVNb2NrUERGID0gKG5hbWU6IHN0cmluZywgc2l6ZTogbnVtYmVyID0gMTAwMDAwKSA9PiBcbiAgY3JlYXRlTW9ja0ZpbGUobmFtZSwgc2l6ZSwgJ2FwcGxpY2F0aW9uL3BkZicpO1xuXG5jb25zdCBjcmVhdGVNb2NrVGV4dEZpbGUgPSAobmFtZTogc3RyaW5nLCBzaXplOiBudW1iZXIgPSAxMDAwKSA9PiBcbiAgY3JlYXRlTW9ja0ZpbGUobmFtZSwgc2l6ZSwgJ3RleHQvcGxhaW4nKTtcblxuZGVzY3JpYmUoJ0ZpbGUgVXBsb2FkIEZvcm1zIFRlc3QgU3VpdGUnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIG1vY2tBcGlSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgaWQ6ICd0ZXN0LWlkJywgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICBtb2NrRmV0Y2gubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgb2s6IHRydWUsXG4gICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBpZDogJ3Rlc3QtaWQnLCBzdWNjZXNzOiB0cnVlIH0pLFxuICAgIH0pO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzZXRBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnVnIFJlcG9ydCBGb3JtIHdpdGggRmlsZSBBdHRhY2htZW50cycsICgpID0+IHtcbiAgICBjb25zdCBCdWdSZXBvcnRGb3JtID0gcmVxdWlyZSgnLi4vLi4vY2xpZW50L3NyYy9wYWdlcy9zZXR0aW5ncy9idWctcmVwb3J0cy50c3gnKS5kZWZhdWx0O1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAvLyBNb2NrIHF1ZXJpZXMgZm9yIGJ1ZyByZXBvcnRzXG4gICAgICBqZXN0Lm1vY2soJ0B0YW5zdGFjay9yZWFjdC1xdWVyeScsICgpID0+ICh7XG4gICAgICAgIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JyksXG4gICAgICAgIHVzZVF1ZXJ5OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgfSkpLFxuICAgICAgICB1c2VNdXRhdGlvbjogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgIG11dGF0ZTogamVzdC5mbigpLFxuICAgICAgICAgIGlzUGVuZGluZzogZmFsc2UsXG4gICAgICAgICAgaXNFcnJvcjogZmFsc2UsXG4gICAgICAgIH0pKSxcbiAgICAgIH0pKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVuZGVyIGJ1ZyByZXBvcnQgZm9ybSB3aXRoIGZpbGUgdXBsb2FkIGNhcGFiaWxpdHknLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8QnVnUmVwb3J0Rm9ybSAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIGJ1ZyByZXBvcnQgYnV0dG9uXG4gICAgICBjb25zdCByZXBvcnRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXJlcG9ydC1idWcnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9yZXBvcnQgYnVnL2kpO1xuICAgICAgXG4gICAgICBpZiAocmVwb3J0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhyZXBvcnRCdXR0b24pO1xuXG4gICAgICAgIC8vIExvb2sgZm9yIGZpbGUgdXBsb2FkIGNvbXBvbmVudHNcbiAgICAgICAgY29uc3QgYXR0YWNoQnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9hdHRhY2ggZmlsZXMvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3NjcmVlbnNob3RzL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChhdHRhY2hCdXR0b24pLnRvQmVUcnV0aHkoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNpbmdsZSBmaWxlIGF0dGFjaG1lbnQgdG8gYnVnIHJlcG9ydHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8QnVnUmVwb3J0Rm9ybSAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVwb3J0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1yZXBvcnQtYnVnJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvcmVwb3J0IGJ1Zy9pKTtcbiAgICAgIFxuICAgICAgaWYgKHJlcG9ydEJ1dHRvbikge1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2socmVwb3J0QnV0dG9uKTtcblxuICAgICAgICAvLyBGaWxsIHJlcXVpcmVkIGZpZWxkc1xuICAgICAgICBjb25zdCB0aXRsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlMYWJlbFRleHQoL3RpdGxlL2kpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvdGl0bGUvaSk7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvZGVzY3JpcHRpb24vaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2Rlc2NyaXB0aW9uL2kpO1xuICAgICAgICBjb25zdCBwYWdlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvcGFnZS9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KC9wYWdlL2kpO1xuXG4gICAgICAgIGlmICh0aXRsZUlucHV0ICYmIGRlc2NyaXB0aW9uSW5wdXQgJiYgcGFnZUlucHV0KSB7XG4gICAgICAgICAgYXdhaXQgdXNlckV2ZW50LnR5cGUodGl0bGVJbnB1dCwgJ1Rlc3QgQnVnIFJlcG9ydCB3aXRoIEZpbGUnKTtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShkZXNjcmlwdGlvbklucHV0LCAnVGhpcyBpcyBhIHRlc3QgYnVnIHJlcG9ydCB3aXRoIGZpbGUgYXR0YWNobWVudCBmb3IgdGVzdGluZyBwdXJwb3Nlcy4nKTtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShwYWdlSW5wdXQsICdUZXN0IFBhZ2UnKTtcblxuICAgICAgICAgIC8vIFRyeSB0byBmaW5kIGFuZCBpbnRlcmFjdCB3aXRoIGZpbGUgdXBsb2FkXG4gICAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9hdHRhY2ggZmlsZXMvaSk7XG5cbiAgICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgICBjb25zdCBtb2NrRmlsZSA9IGNyZWF0ZU1vY2tJbWFnZSgnc2NyZWVuc2hvdC5wbmcnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2ltdWxhdGUgZmlsZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IFttb2NrRmlsZV0sXG4gICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFttb2NrRmlsZV0gfSB9KTtcblxuICAgICAgICAgICAgLy8gU3VibWl0IGZvcm1cbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tc3VibWl0LWJ1ZycpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9zdWJtaXQvaSB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHN1Ym1pdEJ1dHRvbikge1xuICAgICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soc3VibWl0QnV0dG9uKTtcblxuICAgICAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICAgICAgICAgICcvYXBpL2J1Z3MnLFxuICAgICAgICAgICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogZXhwZWN0LmFueShGb3JtRGF0YSksXG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbXVsdGlwbGUgZmlsZSBhdHRhY2htZW50cyB0byBidWcgcmVwb3J0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxCdWdSZXBvcnRGb3JtIC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXBvcnRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXJlcG9ydC1idWcnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9yZXBvcnQgYnVnL2kpO1xuICAgICAgXG4gICAgICBpZiAocmVwb3J0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhyZXBvcnRCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IHRpdGxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvdGl0bGUvaSkgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KC90aXRsZS9pKTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25JbnB1dCA9IHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC9kZXNjcmlwdGlvbi9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvZGVzY3JpcHRpb24vaSk7XG4gICAgICAgIGNvbnN0IHBhZ2VJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC9wYWdlL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL3BhZ2UvaSk7XG5cbiAgICAgICAgaWYgKHRpdGxlSW5wdXQgJiYgZGVzY3JpcHRpb25JbnB1dCAmJiBwYWdlSW5wdXQpIHtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZSh0aXRsZUlucHV0LCAnTXVsdGktZmlsZSBCdWcgUmVwb3J0Jyk7XG4gICAgICAgICAgYXdhaXQgdXNlckV2ZW50LnR5cGUoZGVzY3JpcHRpb25JbnB1dCwgJ1Rlc3RpbmcgbXVsdGlwbGUgZmlsZSBhdHRhY2htZW50cyBpbiBidWcgcmVwb3J0cy4nKTtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShwYWdlSW5wdXQsICdUZXN0IFBhZ2UnKTtcblxuICAgICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvYXR0YWNoL2kgfSk7XG5cbiAgICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgICBjb25zdCBtb2NrRmlsZXMgPSBbXG4gICAgICAgICAgICAgIGNyZWF0ZU1vY2tJbWFnZSgnc2NyZWVuc2hvdDEucG5nJyksXG4gICAgICAgICAgICAgIGNyZWF0ZU1vY2tJbWFnZSgnc2NyZWVuc2hvdDIucG5nJyksXG4gICAgICAgICAgICAgIGNyZWF0ZU1vY2tQREYoJ2Vycm9yLWxvZy5wZGYnKVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgLy8gU2ltdWxhdGUgbXVsdGlwbGUgZmlsZSBzZWxlY3Rpb25cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IG1vY2tGaWxlcyxcbiAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogbW9ja0ZpbGVzIH0gfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tc3VibWl0LWJ1ZycpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9zdWJtaXQvaSB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHN1Ym1pdEJ1dHRvbikge1xuICAgICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soc3VibWl0QnV0dG9uKTtcblxuICAgICAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICAgICAgICAgICcvYXBpL2J1Z3MnLFxuICAgICAgICAgICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogZXhwZWN0LmFueShGb3JtRGF0YSksXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBmaWxlIHNpemUgbGltaXRzIGZvciBidWcgcmVwb3J0IGF0dGFjaG1lbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEJ1Z1JlcG9ydEZvcm0gLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tcmVwb3J0LWJ1ZycpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3JlcG9ydCBidWcvaSk7XG4gICAgICBcbiAgICAgIGlmIChyZXBvcnRCdXR0b24pIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHJlcG9ydEJ1dHRvbik7XG5cbiAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KTtcblxuICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIG92ZXJzaXplZCBmaWxlICg1ME1CKVxuICAgICAgICAgIGNvbnN0IG92ZXJzaXplZEZpbGUgPSBjcmVhdGVNb2NrSW1hZ2UoJ2h1Z2UtZmlsZS5wbmcnLCA1MCAqIDEwMjQgKiAxMDI0KTtcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgIHZhbHVlOiBbb3ZlcnNpemVkRmlsZV0sXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFtvdmVyc2l6ZWRGaWxlXSB9IH0pO1xuXG4gICAgICAgICAgLy8gU2hvdWxkIHNob3cgZXJyb3IgbWVzc2FnZSBmb3Igb3ZlcnNpemVkIGZpbGVcbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvZmlsZS4qdG9vIGxhcmdlL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvc2l6ZS4qZXhjZWVkZWQvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9tYXhpbXVtLipzaXplL2kpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChlcnJvck1lc3NhZ2UpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ZlYXR1cmUgUmVxdWVzdCBGb3JtIHdpdGggRmlsZSBBdHRhY2htZW50cycsICgpID0+IHtcbiAgICBjb25zdCBGZWF0dXJlUmVxdWVzdEZvcm0gPSByZXF1aXJlKCcuLi8uLi9jbGllbnQvc3JjL3BhZ2VzL3NldHRpbmdzL2lkZWEtYm94LnRzeCcpLmRlZmF1bHQ7XG5cbiAgICBpdCgnc2hvdWxkIHJlbmRlciBmZWF0dXJlIHJlcXVlc3QgZm9ybSB3aXRoIGZpbGUgdXBsb2FkIGNhcGFiaWxpdHknLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8RmVhdHVyZVJlcXVlc3RGb3JtIC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXF1ZXN0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1yZXF1ZXN0LWZlYXR1cmUnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvcmVxdWVzdCBmZWF0dXJlL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3N1Z2dlc3QgaWRlYS9pKTtcbiAgICAgIFxuICAgICAgaWYgKHJlcXVlc3RCdXR0b24pIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHJlcXVlc3RCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGF0dGFjaEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvYXR0YWNoIGZpbGVzL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9hdHRhY2htZW50cy9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvYXR0YWNoL2kgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QoYXR0YWNoQnV0dG9uKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHN1Ym1pdCBmZWF0dXJlIHJlcXVlc3Qgd2l0aCBmaWxlIGF0dGFjaG1lbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEZlYXR1cmVSZXF1ZXN0Rm9ybSAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVxdWVzdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tcmVxdWVzdC1mZWF0dXJlJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3JlcXVlc3QgZmVhdHVyZS9pKTtcbiAgICAgIFxuICAgICAgaWYgKHJlcXVlc3RCdXR0b24pIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHJlcXVlc3RCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IHRpdGxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvdGl0bGUvaSkgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KC90aXRsZS9pKTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25JbnB1dCA9IHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC9kZXNjcmlwdGlvbi9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvZGVzY3JpcHRpb24vaSk7XG5cbiAgICAgICAgaWYgKHRpdGxlSW5wdXQgJiYgZGVzY3JpcHRpb25JbnB1dCkge1xuICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC50eXBlKHRpdGxlSW5wdXQsICdOZXcgRmVhdHVyZSB3aXRoIE1vY2t1cHMnKTtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShkZXNjcmlwdGlvbklucHV0LCAnRmVhdHVyZSByZXF1ZXN0IHdpdGggZGVzaWduIG1vY2t1cHMgYW5kIGRvY3VtZW50YXRpb24uJyk7XG5cbiAgICAgICAgICBjb25zdCBmaWxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2F0dGFjaC9pIH0pO1xuXG4gICAgICAgICAgaWYgKGZpbGVJbnB1dCkge1xuICAgICAgICAgICAgY29uc3QgbW9ja0ZpbGVzID0gW1xuICAgICAgICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJ21vY2t1cC5wbmcnKSxcbiAgICAgICAgICAgICAgY3JlYXRlTW9ja1BERigncmVxdWlyZW1lbnRzLnBkZicpXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZUlucHV0LCAnZmlsZXMnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBtb2NrRmlsZXMsXG4gICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IG1vY2tGaWxlcyB9IH0pO1xuXG4gICAgICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3N1Ym1pdC9pIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAgICAgICAgZXhwZWN0LnN0cmluZ01hdGNoaW5nKC9cXC9hcGlcXC8oZmVhdHVyZXN8ZmVhdHVyZS1yZXF1ZXN0cykvKSxcbiAgICAgICAgICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGV4cGVjdC5hbnkoRm9ybURhdGEpLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RvY3VtZW50IFVwbG9hZCBGb3JtcycsICgpID0+IHtcbiAgICBjb25zdCBEb2N1bWVudE1hbmFnZXIgPSByZXF1aXJlKCcuLi8uLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvY29tbW9uL0RvY3VtZW50TWFuYWdlci50c3gnKS5kZWZhdWx0O1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZG9jdW1lbnQgdXBsb2FkIHdpdGggbWV0YWRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8RG9jdW1lbnRNYW5hZ2VyIC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICBjb25zdCB1cGxvYWRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXVwbG9hZC1kb2N1bWVudCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvdXBsb2FkL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvYWRkLipkb2N1bWVudC9pIH0pO1xuXG4gICAgICBpZiAodXBsb2FkQnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayh1cGxvYWRCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5Um9sZSgnaW5wdXQnLCB7IG5hbWU6IC9maWxlL2kgfSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2Nob29zZS4qZmlsZS9pIH0pO1xuXG4gICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICBjb25zdCBtb2NrRG9jdW1lbnQgPSBjcmVhdGVNb2NrUERGKCdjb250cmFjdC5wZGYnKTtcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgIHZhbHVlOiBbbW9ja0RvY3VtZW50XSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW21vY2tEb2N1bWVudF0gfSB9KTtcblxuICAgICAgICAgIC8vIEZpbGwgZG9jdW1lbnQgbWV0YWRhdGFcbiAgICAgICAgICBjb25zdCBuYW1lSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvbmFtZS9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2RvY3VtZW50LipuYW1lL2kpO1xuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvZGVzY3JpcHRpb24vaSk7XG5cbiAgICAgICAgICBpZiAobmFtZUlucHV0KSB7XG4gICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShuYW1lSW5wdXQsICdUZXN0IENvbnRyYWN0IERvY3VtZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZXNjcmlwdGlvbklucHV0KSB7XG4gICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShkZXNjcmlwdGlvbklucHV0LCAnTGVnYWwgY29udHJhY3QgZm9yIHRlc3RpbmcgcHVycG9zZXMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3VwbG9hZC9pIH0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3NhdmUvaSB9KTtcblxuICAgICAgICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgZXhwZWN0KG1vY2tBcGlSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICAgICAgICAnUE9TVCcsXG4gICAgICAgICAgICAgICAgZXhwZWN0LnN0cmluZ01hdGNoaW5nKC9cXC9hcGlcXC9kb2N1bWVudHMvKSxcbiAgICAgICAgICAgICAgICBleHBlY3QuYW55KE9iamVjdClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBkb2N1bWVudCBmaWxlIHR5cGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPERvY3VtZW50TWFuYWdlciAvPlxuICAgICAgICA8L1Rlc3RXcmFwcGVyPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgdXBsb2FkQnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi11cGxvYWQtZG9jdW1lbnQnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3VwbG9hZC9pKTtcblxuICAgICAgaWYgKHVwbG9hZEJ1dHRvbikge1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2sodXBsb2FkQnV0dG9uKTtcblxuICAgICAgICBjb25zdCBmaWxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2lucHV0JywgeyBuYW1lOiAvZmlsZS9pIH0pO1xuXG4gICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICAvLyBUcnkgdXBsb2FkaW5nIGludmFsaWQgZmlsZSB0eXBlXG4gICAgICAgICAgY29uc3QgaW52YWxpZEZpbGUgPSBjcmVhdGVNb2NrRmlsZSgnbWFsaWNpb3VzLmV4ZScsIDEwMDAsICdhcHBsaWNhdGlvbi94LWV4ZWN1dGFibGUnKTtcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgIHZhbHVlOiBbaW52YWxpZEZpbGVdLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBbaW52YWxpZEZpbGVdIH0gfSk7XG5cbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvZmlsZS4qdHlwZS4qbm90LiphbGxvd2VkL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvaW52YWxpZC4qZmlsZS4qdHlwZS9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3Vuc3VwcG9ydGVkLipmb3JtYXQvaSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KGVycm9yTWVzc2FnZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQmlsbCBGb3JtIHdpdGggUmVjZWlwdCBBdHRhY2htZW50cycsICgpID0+IHtcbiAgICBjb25zdCBCaWxsRm9ybSA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudC9zcmMvY29tcG9uZW50cy9jb21tb24vQmlsbEZvcm0udHN4JykuZGVmYXVsdDtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJpbGwgc3VibWlzc2lvbiB3aXRoIHJlY2VpcHQgYXR0YWNobWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUHJvcHMgPSB7XG4gICAgICAgIGlzT3BlbjogdHJ1ZSxcbiAgICAgICAgb25DbG9zZTogamVzdC5mbigpLFxuICAgICAgICBvblN1Ym1pdDogamVzdC5mbigpLFxuICAgICAgICBidWlsZGluZ3M6IFtdLFxuICAgICAgICByZXNpZGVuY2VzOiBbXVxuICAgICAgfTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPEJpbGxGb3JtIHsuLi5tb2NrUHJvcHN9IC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICAvLyBGaWxsIGJpbGwgZGV0YWlsc1xuICAgICAgY29uc3QgdGl0bGVJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC90aXRsZS9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2JpbGwuKnRpdGxlL2kpO1xuICAgICAgY29uc3QgYW1vdW50SW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvYW1vdW50L2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2Ftb3VudC9pKTtcblxuICAgICAgaWYgKHRpdGxlSW5wdXQgJiYgYW1vdW50SW5wdXQpIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LnR5cGUodGl0bGVJbnB1dCwgJ0VsZWN0cmljaXR5IEJpbGwgLSBKYW51YXJ5IDIwMjUnKTtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LnR5cGUoYW1vdW50SW5wdXQsICcxNTAuNzUnKTtcblxuICAgICAgICAvLyBMb29rIGZvciBmaWxlIGF0dGFjaG1lbnRcbiAgICAgICAgY29uc3QgYXR0YWNoQnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9hdHRhY2guKnJlY2VpcHQvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2FkZC4qYXR0YWNobWVudC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvYXR0YWNoL2kgfSk7XG5cbiAgICAgICAgaWYgKGF0dGFjaEJ1dHRvbikge1xuICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhhdHRhY2hCdXR0b24pO1xuXG4gICAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdpbnB1dCcsIHsgdHlwZTogJ2ZpbGUnIH0pO1xuXG4gICAgICAgICAgaWYgKGZpbGVJbnB1dCkge1xuICAgICAgICAgICAgY29uc3QgcmVjZWlwdEZpbGUgPSBjcmVhdGVNb2NrUERGKCdyZWNlaXB0LnBkZicpO1xuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZUlucHV0LCAnZmlsZXMnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBbcmVjZWlwdEZpbGVdLFxuICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBbcmVjZWlwdEZpbGVdIH0gfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc2F2ZS4qYmlsbC9pIH0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc3VibWl0L2kgfSk7XG5cbiAgICAgICAgICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHN1Ym1pdEJ1dHRvbik7XG5cbiAgICAgICAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tQcm9wcy5vblN1Ym1pdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRWxlY3RyaWNpdHkgQmlsbCAtIEphbnVhcnkgMjAyNScsXG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgcmVjZWlwdCBmaWxlIGZvcm1hdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tQcm9wcyA9IHtcbiAgICAgICAgaXNPcGVuOiB0cnVlLFxuICAgICAgICBvbkNsb3NlOiBqZXN0LmZuKCksXG4gICAgICAgIG9uU3VibWl0OiBqZXN0LmZuKCksXG4gICAgICAgIGJ1aWxkaW5nczogW10sXG4gICAgICAgIHJlc2lkZW5jZXM6IFtdXG4gICAgICB9O1xuXG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8QmlsbEZvcm0gey4uLm1vY2tQcm9wc30gLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGF0dGFjaEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvYXR0YWNoL2kpO1xuXG4gICAgICBpZiAoYXR0YWNoQnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhhdHRhY2hCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5Um9sZSgnaW5wdXQnLCB7IHR5cGU6ICdmaWxlJyB9KTtcblxuICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgLy8gVHJ5IGludmFsaWQgZmlsZSBmb3JtYXRcbiAgICAgICAgICBjb25zdCBpbnZhbGlkRmlsZSA9IGNyZWF0ZU1vY2tGaWxlKCdyZWNlaXB0LnR4dCcsIDEwMDAsICd0ZXh0L3BsYWluJyk7XG5cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZUlucHV0LCAnZmlsZXMnLCB7XG4gICAgICAgICAgICB2YWx1ZTogW2ludmFsaWRGaWxlXSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW2ludmFsaWRGaWxlXSB9IH0pO1xuXG4gICAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBzY3JlZW4ucXVlcnlCeVRleHQoL2ludmFsaWQuKmZvcm1hdC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL29ubHkuKnBkZi4qanBnLipwbmcvaSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KGVycm9yTWVzc2FnZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnR2VuZXJhbCBGaWxlIFVwbG9hZCBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIG5ldHdvcmsgZXJyb3JzIGR1cmluZyBmaWxlIHVwbG9hZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJykpO1xuXG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwidGVzdC11cGxvYWQtZm9ybVwiPlxuICAgICAgICAgICAgey8qIE1pbmltYWwgZm9ybSBmb3IgdGVzdGluZyAqL31cbiAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIiBcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJmaWxlLWlucHV0XCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuZmlsZXM/LlswXSkge1xuICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZS50YXJnZXQuZmlsZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgZmV0Y2goJy9hcGkvdXBsb2FkJywgeyBtZXRob2Q6ICdQT1NUJywgYm9keTogZm9ybURhdGEgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZmlsZS1pbnB1dCcpO1xuICAgICAgY29uc3QgbW9ja0ZpbGUgPSBjcmVhdGVNb2NrSW1hZ2UoJ3Rlc3QucG5nJyk7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgdmFsdWU6IFttb2NrRmlsZV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIH0pO1xuXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFttb2NrRmlsZV0gfSB9KTtcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICcvYXBpL3VwbG9hZCcsXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBib2R5OiBleHBlY3QuYW55KEZvcm1EYXRhKSxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBmaWxlIHNlbGVjdGlvbicsICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxuICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgIHR5cGU9XCJmaWxlXCIgXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cImZpbGUtaW5wdXRcIlxuICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHtcbiAgICAgICAgICAgICAgLy8gU2hvdWxkIG5vdCB0cmlnZ2VyIGFueSB1cGxvYWRcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZmlsZS1pbnB1dCcpO1xuXG4gICAgICAvLyBTaW11bGF0ZSBlbXB0eSBmaWxlIHNlbGVjdGlvblxuICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBbXSB9IH0pO1xuXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tBcGlSZXF1ZXN0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXNwZWN0IG1heGltdW0gZmlsZSBjb3VudCBsaW1pdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBNQVhfRklMRVMgPSAzO1xuXG4gICAgICByZW5kZXIoXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cbiAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICB0eXBlPVwiZmlsZVwiIFxuICAgICAgICAgICAgbXVsdGlwbGVcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiZmlsZS1pbnB1dFwiXG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmZpbGVzICYmIGUudGFyZ2V0LmZpbGVzLmxlbmd0aCA+IE1BWF9GSUxFUykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWF4aW11bSAke01BWF9GSUxFU30gZmlsZXMgYWxsb3dlZGApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XG4gICAgICApO1xuXG4gICAgICBjb25zdCBmaWxlSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2ZpbGUtaW5wdXQnKTtcbiAgICAgIGNvbnN0IHRvb01hbnlGaWxlcyA9IFtcbiAgICAgICAgY3JlYXRlTW9ja0ltYWdlKCcxLnBuZycpLFxuICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJzIucG5nJyksXG4gICAgICAgIGNyZWF0ZU1vY2tJbWFnZSgnMy5wbmcnKSxcbiAgICAgICAgY3JlYXRlTW9ja0ltYWdlKCc0LnBuZycpLCAvLyBPbmUgdG9vIG1hbnlcbiAgICAgIF07XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgdmFsdWU6IHRvb01hbnlGaWxlcyxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogdG9vTWFueUZpbGVzIH0gfSk7XG4gICAgICB9KS50b1Rocm93KC9NYXhpbXVtLipmaWxlcy4qYWxsb3dlZC8pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRmlsZSBVcGxvYWQgUHJvZ3Jlc3MgYW5kIEZlZWRiYWNrJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2hvdyB1cGxvYWQgcHJvZ3Jlc3MgZm9yIGxhcmdlIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1VwbG9hZFByb2dyZXNzID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICAvLyBNb2NrIFhNTEh0dHBSZXF1ZXN0IGZvciBwcm9ncmVzcyB0cmFja2luZ1xuICAgICAgY29uc3QgbW9ja1hIUiA9IHtcbiAgICAgICAgdXBsb2FkOiB7XG4gICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigoZXZlbnQsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdwcm9ncmVzcycpIHtcbiAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgcHJvZ3Jlc3MgdXBkYXRlc1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKHsgbG9hZGVkOiA1MCwgdG90YWw6IDEwMCB9KSwgMTAwKTtcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjayh7IGxvYWRlZDogMTAwLCB0b3RhbDogMTAwIH0pLCAyMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIG9wZW46IGplc3QuZm4oKSxcbiAgICAgICAgc2VuZDogamVzdC5mbigpLFxuICAgICAgICBzZXRSZXF1ZXN0SGVhZGVyOiBqZXN0LmZuKCksXG4gICAgICB9O1xuXG4gICAgICBnbG9iYWwuWE1MSHR0cFJlcXVlc3QgPSBqZXN0LmZuKCgpID0+IG1vY2tYSFIpIGFzIGFueTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8VGVzdFdyYXBwZXI+XG4gICAgICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cInVwbG9hZC13aXRoLXByb2dyZXNzXCI+XG4gICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJmaWxlLWlucHV0XCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e21vY2tVcGxvYWRQcm9ncmVzc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwicHJvZ3Jlc3MtaW5kaWNhdG9yXCI+MCU8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZmlsZS1pbnB1dCcpO1xuICAgICAgY29uc3QgbGFyZ2VGaWxlID0gY3JlYXRlTW9ja0ltYWdlKCdsYXJnZS1pbWFnZS5wbmcnLCAxMCAqIDEwMjQgKiAxMDI0KTsgLy8gMTBNQlxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZUlucHV0LCAnZmlsZXMnLCB7XG4gICAgICAgIHZhbHVlOiBbbGFyZ2VGaWxlXSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgfSk7XG5cbiAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW2xhcmdlRmlsZV0gfSB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tVcGxvYWRQcm9ncmVzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB0YXJnZXQ6IGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGZpbGVzOiBleHBlY3QuYXJyYXlDb250YWluaW5nKFtsYXJnZUZpbGVdKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==