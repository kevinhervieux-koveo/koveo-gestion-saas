d938debe6b2dfae8de068bbaec338d5a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
// Test utilities
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Test authentication middleware
    app.use(async (req, res, next) => {
        const testUserId = req.headers['x-test-user-id'];
        if (testUserId) {
            const [user] = await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, testUserId)).limit(1);
            if (user) {
                req.session = {
                    userId: testUserId,
                    isAuthenticated: true,
                    role: user.role
                };
                req.user = user;
            }
        }
        next();
    });
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('User Management Comprehensive Tests', () => {
    let app;
    let adminUser;
    let regularManager;
    let demoManager;
    let testOrganization;
    let demoOrganization;
    let testBuilding;
    let testResidence1;
    let testResidence2;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clean test data
        await db_1.db.delete(schema.userResidences);
        await db_1.db.delete(schema.userOrganizations);
        await db_1.db.delete(schema.invitations);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.residences);
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.organizations);
        // Create test organizations
        const [org1] = await db_1.db
            .insert(schema.organizations)
            .values({
            name: 'Regular Test Organization',
            type: 'Standard',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            phone: '514-555-0123',
            email: 'test@org.com',
        })
            .returning();
        testOrganization = org1;
        const [org2] = await db_1.db
            .insert(schema.organizations)
            .values({
            name: 'Demo Test Organization',
            type: 'demo',
            address: '456 Demo St',
            city: 'Demo City',
            province: 'QC',
            postalCode: 'H2H 2H2',
            phone: '514-555-0456',
            email: 'demo@org.com',
        })
            .returning();
        demoOrganization = org2;
        // Create test building
        const [building] = await db_1.db
            .insert(schema.buildings)
            .values({
            organizationId: testOrganization.id,
            name: 'Test Building',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            totalUnits: 10,
            buildingType: 'apartment',
        })
            .returning();
        testBuilding = building;
        // Create test residences
        const [residence1] = await db_1.db
            .insert(schema.residences)
            .values({
            buildingId: testBuilding.id,
            unitNumber: '101',
            squareFootage: 1000,
            bedrooms: 2,
            bathrooms: 1,
        })
            .returning();
        testResidence1 = residence1;
        const [residence2] = await db_1.db
            .insert(schema.residences)
            .values({
            buildingId: testBuilding.id,
            unitNumber: '102',
            squareFootage: 1200,
            bedrooms: 3,
            bathrooms: 2,
        })
            .returning();
        testResidence2 = residence2;
        // Create admin user
        const [admin] = await db_1.db
            .insert(schema.users)
            .values({
            email: 'admin@test.com',
            username: 'admin',
            password: 'hashedpassword123',
            firstName: 'Admin',
            lastName: 'User',
            role: 'admin',
            isActive: true,
            phone: '514-555-0001',
        })
            .returning();
        adminUser = admin;
        // Create regular manager
        const [manager] = await db_1.db
            .insert(schema.users)
            .values({
            email: 'manager@test.com',
            username: 'manager',
            password: 'hashedpassword123',
            firstName: 'Regular',
            lastName: 'Manager',
            role: 'manager',
            isActive: true,
            phone: '514-555-0002',
        })
            .returning();
        regularManager = manager;
        // Assign regular manager to organization
        await db_1.db
            .insert(schema.userOrganizations)
            .values({
            userId: regularManager.id,
            organizationId: testOrganization.id,
            organizationRole: 'manager',
            isActive: true,
        });
        // Create demo manager
        const [demoMgr] = await db_1.db
            .insert(schema.users)
            .values({
            email: 'demo.manager@test.com',
            username: 'demo_manager',
            password: 'hashedpassword123',
            firstName: 'Demo',
            lastName: 'Manager',
            role: 'demo_manager',
            isActive: true,
            phone: '514-555-0003',
        })
            .returning();
        demoManager = demoMgr;
        // Create demo users for visibility testing
        await db_1.db
            .insert(schema.users)
            .values([
            {
                email: 'demo.tenant@test.com',
                username: 'demo_tenant',
                password: 'hashedpassword123',
                firstName: 'Demo',
                lastName: 'Tenant',
                role: 'demo_tenant',
                isActive: true,
                phone: '514-555-0004',
            },
            {
                email: 'demo.resident@test.com',
                username: 'demo_resident',
                password: 'hashedpassword123',
                firstName: 'Demo',
                lastName: 'Resident',
                role: 'demo_resident',
                isActive: true,
                phone: '514-555-0005',
            },
            {
                email: 'regular.tenant@test.com',
                username: 'regular_tenant',
                password: 'hashedpassword123',
                firstName: 'Regular',
                lastName: 'Tenant',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0006',
            }
        ]);
    });
    (0, globals_1.afterEach)(async () => {
        await db_1.db.delete(schema.userResidences);
        await db_1.db.delete(schema.userOrganizations);
        await db_1.db.delete(schema.invitations);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.residences);
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.organizations);
    });
    (0, globals_1.describe)('Invitation Organization/Building/Residence Assignment', () => {
        (0, globals_1.it)('should assign correct organization and residence when user accepts invitation', async () => {
            // Create invitation with organization and residence
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + 7);
            const invitationData = {
                email: 'newuser@test.com',
                role: 'tenant',
                organizationId: testOrganization.id,
                residenceId: testResidence1.id,
                expiresAt: expiresAt.toISOString(),
                personalMessage: 'Welcome!',
            };
            // Create invitation
            const inviteResponse = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send(invitationData)
                .expect(201);
            // Get the invitation token
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.email, 'newuser@test.com'));
            // Accept invitation
            const acceptData = {
                firstName: 'New',
                lastName: 'User',
                password: 'password123',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            await (0, supertest_1.default)(app)
                .post(`/api/invitations/accept/${invitation.token}`)
                .send(acceptData)
                .expect(201);
            // Verify user was created
            const [newUser] = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.email, 'newuser@test.com'));
            (0, globals_1.expect)(newUser).toBeDefined();
            (0, globals_1.expect)(newUser.role).toBe('tenant');
            // Verify organization assignment
            const orgAssignment = await db_1.db
                .select()
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, newUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.organizationId, testOrganization.id)));
            (0, globals_1.expect)(orgAssignment).toHaveLength(1);
            (0, globals_1.expect)(orgAssignment[0].organizationRole).toBe('tenant');
            (0, globals_1.expect)(orgAssignment[0].isActive).toBe(true);
            // Verify residence assignment
            const residenceAssignment = await db_1.db
                .select()
                .from(schema.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, newUser.id), (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, testResidence1.id)));
            (0, globals_1.expect)(residenceAssignment).toHaveLength(1);
            (0, globals_1.expect)(residenceAssignment[0].relationshipType).toBe('tenant');
            (0, globals_1.expect)(residenceAssignment[0].isActive).toBe(true);
        });
        (0, globals_1.it)('should handle invitation with only organization (no residence)', async () => {
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + 7);
            const invitationData = {
                email: 'manager@test.com',
                role: 'manager',
                organizationId: testOrganization.id,
                expiresAt: expiresAt.toISOString(),
            };
            // Create invitation
            await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send(invitationData)
                .expect(201);
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.email, 'manager@test.com'));
            // Accept invitation
            const acceptData = {
                firstName: 'New',
                lastName: 'Manager',
                password: 'password123',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            await (0, supertest_1.default)(app)
                .post(`/api/invitations/accept/${invitation.token}`)
                .send(acceptData)
                .expect(201);
            const [newUser] = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.email, 'manager@test.com'));
            // Should have organization assignment
            const orgAssignment = await db_1.db
                .select()
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, newUser.id));
            (0, globals_1.expect)(orgAssignment).toHaveLength(1);
            // Should NOT have residence assignment
            const residenceAssignment = await db_1.db
                .select()
                .from(schema.userResidences)
                .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, newUser.id));
            (0, globals_1.expect)(residenceAssignment).toHaveLength(0);
        });
    });
    (0, globals_1.describe)('Multiple Building/Residence Assignment', () => {
        (0, globals_1.it)('should allow admin to assign multiple residences to a user', async () => {
            // Create a test user first
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'multiuser@test.com',
                username: 'multiuser',
                password: 'hashedpassword123',
                firstName: 'Multi',
                lastName: 'User',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0007',
            })
                .returning();
            // Assign multiple residences
            const residenceAssignments = [
                {
                    residenceId: testResidence1.id,
                    relationshipType: 'tenant',
                    startDate: new Date().toISOString().split('T')[0],
                },
                {
                    residenceId: testResidence2.id,
                    relationshipType: 'occupant',
                    startDate: new Date().toISOString().split('T')[0],
                },
            ];
            const response = await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/residences`)
                .set('x-test-user-id', adminUser.id)
                .send({ residenceAssignments })
                .expect(200);
            // Verify multiple assignments
            const assignments = await db_1.db
                .select()
                .from(schema.userResidences)
                .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, user.id));
            (0, globals_1.expect)(assignments).toHaveLength(2);
            (0, globals_1.expect)(assignments.some(a => a.residenceId === testResidence1.id)).toBe(true);
            (0, globals_1.expect)(assignments.some(a => a.residenceId === testResidence2.id)).toBe(true);
        });
        (0, globals_1.it)('should allow manager to assign residences only within their organization', async () => {
            // Create a test user
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'limiteduser@test.com',
                username: 'limiteduser',
                password: 'hashedpassword123',
                firstName: 'Limited',
                lastName: 'User',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0008',
            })
                .returning();
            // Manager tries to assign residence in their organization (should work)
            const residenceAssignments = [
                {
                    residenceId: testResidence1.id,
                    relationshipType: 'tenant',
                    startDate: new Date().toISOString().split('T')[0],
                },
            ];
            await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/residences`)
                .set('x-test-user-id', regularManager.id)
                .send({ residenceAssignments })
                .expect(200);
            // Verify assignment was created
            const assignments = await db_1.db
                .select()
                .from(schema.userResidences)
                .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, user.id));
            (0, globals_1.expect)(assignments).toHaveLength(1);
            (0, globals_1.expect)(assignments[0].residenceId).toBe(testResidence1.id);
        });
    });
    (0, globals_1.describe)('Manager Permission Restrictions', () => {
        (0, globals_1.it)('should prevent regular manager from assigning organizations to users', async () => {
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'restricteduser@test.com',
                username: 'restricteduser',
                password: 'hashedpassword123',
                firstName: 'Restricted',
                lastName: 'User',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0009',
            })
                .returning();
            // Manager tries to assign organization (should fail)
            const response = await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/organizations`)
                .set('x-test-user-id', regularManager.id)
                .send({ organizationIds: [testOrganization.id] })
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Only administrators can modify organization assignments');
        });
        (0, globals_1.it)('should prevent regular manager from creating users with organization assignments', async () => {
            // This would be tested if there's a user creation endpoint that accepts organizationIds
            // For now, we test that managers can't directly assign organizations
            const userData = {
                email: 'newmanaged@test.com',
                firstName: 'New',
                lastName: 'Managed',
                role: 'tenant',
                password: 'password123',
                organizationIds: [testOrganization.id], // Manager shouldn't be able to set this
            };
            // This test assumes there's validation in the user creation endpoint
            // The actual implementation might handle this differently
        });
        (0, globals_1.it)('should only allow manager to assign residences within their organization', async () => {
            // Create another organization and building
            const [otherOrg] = await db_1.db
                .insert(schema.organizations)
                .values({
                name: 'Other Organization',
                type: 'Standard',
                address: '789 Other St',
                city: 'Other City',
                province: 'QC',
                postalCode: 'H3H 3H3',
                phone: '514-555-0789',
                email: 'other@org.com',
            })
                .returning();
            const [otherBuilding] = await db_1.db
                .insert(schema.buildings)
                .values({
                organizationId: otherOrg.id,
                name: 'Other Building',
                address: '789 Other St',
                city: 'Other City',
                province: 'QC',
                postalCode: 'H3H 3H3',
                totalUnits: 5,
                buildingType: 'apartment',
            })
                .returning();
            const [otherResidence] = await db_1.db
                .insert(schema.residences)
                .values({
                buildingId: otherBuilding.id,
                unitNumber: '301',
                squareFootage: 800,
                bedrooms: 1,
                bathrooms: 1,
            })
                .returning();
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'crossorguser@test.com',
                username: 'crossorguser',
                password: 'hashedpassword123',
                firstName: 'Cross',
                lastName: 'Org',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0010',
            })
                .returning();
            // Manager tries to assign residence from different organization (should fail or be filtered)
            const residenceAssignments = [
                {
                    residenceId: otherResidence.id, // This is from a different organization
                    relationshipType: 'tenant',
                    startDate: new Date().toISOString().split('T')[0],
                },
            ];
            // This should either fail with 403 or silently ignore the invalid assignment
            // depending on implementation
            const response = await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/residences`)
                .set('x-test-user-id', regularManager.id)
                .send({ residenceAssignments });
            // The exact response depends on implementation, but the assignment shouldn't succeed
            if (response.status === 200) {
                // If it returns 200, verify no assignment was actually created
                const assignments = await db_1.db
                    .select()
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, user.id));
                (0, globals_1.expect)(assignments).toHaveLength(0);
            }
            else {
                // Should return an error status
                (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
            }
        });
    });
    (0, globals_1.describe)('Demo Manager User Visibility', () => {
        (0, globals_1.it)('should show only demo users to demo manager in user management', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('x-test-user-id', demoManager.id)
                .expect(200);
            const users = response.body;
            // Demo manager should only see demo users (demo_manager, demo_tenant, demo_resident)
            const visibleRoles = users.map((user) => user.role);
            (0, globals_1.expect)(visibleRoles).toContain('demo_manager');
            (0, globals_1.expect)(visibleRoles).toContain('demo_tenant');
            (0, globals_1.expect)(visibleRoles).toContain('demo_resident');
            // Should NOT see regular roles
            (0, globals_1.expect)(visibleRoles).not.toContain('admin');
            (0, globals_1.expect)(visibleRoles).not.toContain('manager');
            (0, globals_1.expect)(visibleRoles).not.toContain('tenant');
            (0, globals_1.expect)(visibleRoles).not.toContain('resident');
        });
        (0, globals_1.it)('should allow regular manager to see non-demo users in their organization', async () => {
            // Assign the regular tenant to the same organization as the manager
            await db_1.db
                .insert(schema.userOrganizations)
                .values({
                userId: (await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'regular.tenant@test.com')))[0].id,
                organizationId: testOrganization.id,
                organizationRole: 'tenant',
                isActive: true,
            });
            const response = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('x-test-user-id', regularManager.id)
                .expect(200);
            const users = response.body;
            const visibleEmails = users.map((user) => user.email);
            // Should see users in their organization
            (0, globals_1.expect)(visibleEmails).toContain('regular.tenant@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('manager@test.com'); // themselves
            // Should NOT see demo users
            (0, globals_1.expect)(visibleEmails).not.toContain('demo.tenant@test.com');
            (0, globals_1.expect)(visibleEmails).not.toContain('demo.resident@test.com');
            (0, globals_1.expect)(visibleEmails).not.toContain('demo.manager@test.com');
        });
        (0, globals_1.it)('should allow admin to see all users regardless of type', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            const users = response.body;
            const visibleEmails = users.map((user) => user.email);
            // Admin should see all users
            (0, globals_1.expect)(visibleEmails).toContain('admin@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('manager@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('demo.manager@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('demo.tenant@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('demo.resident@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('regular.tenant@test.com');
        });
    });
    (0, globals_1.describe)('Edge Cases and Validation', () => {
        (0, globals_1.it)('should handle invitation acceptance when residence no longer exists', async () => {
            // Create invitation with residence
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + 7);
            const [invitation] = await db_1.db
                .insert(schema.invitations)
                .values({
                email: 'edgecase@test.com',
                token: 'edge-case-token',
                role: 'tenant',
                status: 'pending',
                invitedByUserId: adminUser.id,
                expiresAt,
                tokenHash: 'hashed-token',
                usageCount: 0,
                maxUsageCount: 1,
                requires2fa: false,
                organizationId: testOrganization.id,
                residenceId: testResidence1.id,
            })
                .returning();
            // Delete the residence
            await db_1.db.delete(schema.residences).where((0, drizzle_orm_1.eq)(schema.residences.id, testResidence1.id));
            // Accept invitation - should still create user and org assignment, but skip residence
            const acceptData = {
                firstName: 'Edge',
                lastName: 'Case',
                password: 'password123',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/invitations/accept/${invitation.token}`)
                .send(acceptData);
            // Should either succeed with warning or handle gracefully
            if (response.status === 201) {
                const [newUser] = await db_1.db
                    .select()
                    .from(schema.users)
                    .where((0, drizzle_orm_1.eq)(schema.users.email, 'edgecase@test.com'));
                // Should have organization assignment
                const orgAssignment = await db_1.db
                    .select()
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, newUser.id));
                (0, globals_1.expect)(orgAssignment).toHaveLength(1);
                // Should NOT have residence assignment (since residence was deleted)
                const residenceAssignment = await db_1.db
                    .select()
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, newUser.id));
                (0, globals_1.expect)(residenceAssignment).toHaveLength(0);
            }
        });
        (0, globals_1.it)('should prevent duplicate residence assignments', async () => {
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'duplicate@test.com',
                username: 'duplicate',
                password: 'hashedpassword123',
                firstName: 'Duplicate',
                lastName: 'User',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0011',
            })
                .returning();
            // Assign residence once
            const residenceAssignments = [
                {
                    residenceId: testResidence1.id,
                    relationshipType: 'tenant',
                    startDate: new Date().toISOString().split('T')[0],
                },
            ];
            await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/residences`)
                .set('x-test-user-id', adminUser.id)
                .send({ residenceAssignments })
                .expect(200);
            // Try to assign same residence again
            await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/residences`)
                .set('x-test-user-id', adminUser.id)
                .send({ residenceAssignments })
                .expect(200);
            // Should still only have one assignment
            const assignments = await db_1.db
                .select()
                .from(schema.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, user.id), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true)));
            (0, globals_1.expect)(assignments).toHaveLength(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,