{"file":"/home/runner/workspace/tests/integration/user-management-comprehensive.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/user-management-comprehensive.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\n// Test utilities\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Test authentication middleware\n  app.use(async (req: any, res, next) => {\n    const testUserId = req.headers['x-test-user-id'];\n    if (testUserId) {\n      const [user] = await db.select().from(schema.users).where(eq(schema.users.id, testUserId)).limit(1);\n      if (user) {\n        req.session = { \n          userId: testUserId,\n          isAuthenticated: true,\n          role: user.role\n        };\n        req.user = user;\n      }\n    }\n    next();\n  });\n  \n  registerRoutes(app);\n  return app;\n};\n\ndescribe('User Management Comprehensive Tests', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let regularManager: any;\n  let demoManager: any;\n  let testOrganization: any;\n  let demoOrganization: any;\n  let testBuilding: any;\n  let testResidence1: any;\n  let testResidence2: any;\n  \n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean test data\n    await db.delete(schema.userResidences);\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.invitations);\n    await db.delete(schema.users);\n    await db.delete(schema.residences);\n    await db.delete(schema.buildings);\n    await db.delete(schema.organizations);\n\n    // Create test organizations\n    const [org1] = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Regular Test Organization',\n        type: 'Standard',\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        phone: '514-555-0123',\n        email: 'test@org.com',\n      })\n      .returning();\n    testOrganization = org1;\n\n    const [org2] = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Demo Test Organization',\n        type: 'demo',\n        address: '456 Demo St',\n        city: 'Demo City',\n        province: 'QC',\n        postalCode: 'H2H 2H2',\n        phone: '514-555-0456',\n        email: 'demo@org.com',\n      })\n      .returning();\n    demoOrganization = org2;\n\n    // Create test building\n    const [building] = await db\n      .insert(schema.buildings)\n      .values({\n        organizationId: testOrganization.id,\n        name: 'Test Building',\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        totalUnits: 10,\n        buildingType: 'apartment',\n      })\n      .returning();\n    testBuilding = building;\n\n    // Create test residences\n    const [residence1] = await db\n      .insert(schema.residences)\n      .values({\n        buildingId: testBuilding.id,\n        unitNumber: '101',\n        squareFootage: 1000,\n        bedrooms: 2,\n        bathrooms: 1,\n      })\n      .returning();\n    testResidence1 = residence1;\n\n    const [residence2] = await db\n      .insert(schema.residences)\n      .values({\n        buildingId: testBuilding.id,\n        unitNumber: '102',\n        squareFootage: 1200,\n        bedrooms: 3,\n        bathrooms: 2,\n      })\n      .returning();\n    testResidence2 = residence2;\n\n    // Create admin user\n    const [admin] = await db\n      .insert(schema.users)\n      .values({\n        email: 'admin@test.com',\n        username: 'admin',\n        password: 'hashedpassword123',\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n        isActive: true,\n        phone: '514-555-0001',\n      })\n      .returning();\n    adminUser = admin;\n\n    // Create regular manager\n    const [manager] = await db\n      .insert(schema.users)\n      .values({\n        email: 'manager@test.com',\n        username: 'manager',\n        password: 'hashedpassword123',\n        firstName: 'Regular',\n        lastName: 'Manager',\n        role: 'manager',\n        isActive: true,\n        phone: '514-555-0002',\n      })\n      .returning();\n    regularManager = manager;\n\n    // Assign regular manager to organization\n    await db\n      .insert(schema.userOrganizations)\n      .values({\n        userId: regularManager.id,\n        organizationId: testOrganization.id,\n        organizationRole: 'manager',\n        isActive: true,\n      });\n\n    // Create demo manager\n    const [demoMgr] = await db\n      .insert(schema.users)\n      .values({\n        email: 'demo.manager@test.com',\n        username: 'demo_manager',\n        password: 'hashedpassword123',\n        firstName: 'Demo',\n        lastName: 'Manager',\n        role: 'demo_manager',\n        isActive: true,\n        phone: '514-555-0003',\n      })\n      .returning();\n    demoManager = demoMgr;\n\n    // Create demo users for visibility testing\n    await db\n      .insert(schema.users)\n      .values([\n        {\n          email: 'demo.tenant@test.com',\n          username: 'demo_tenant',\n          password: 'hashedpassword123',\n          firstName: 'Demo',\n          lastName: 'Tenant',\n          role: 'demo_tenant',\n          isActive: true,\n          phone: '514-555-0004',\n        },\n        {\n          email: 'demo.resident@test.com',\n          username: 'demo_resident',\n          password: 'hashedpassword123',\n          firstName: 'Demo',\n          lastName: 'Resident',\n          role: 'demo_resident',\n          isActive: true,\n          phone: '514-555-0005',\n        },\n        {\n          email: 'regular.tenant@test.com',\n          username: 'regular_tenant',\n          password: 'hashedpassword123',\n          firstName: 'Regular',\n          lastName: 'Tenant',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0006',\n        }\n      ]);\n  });\n\n  afterEach(async () => {\n    await db.delete(schema.userResidences);\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.invitations);\n    await db.delete(schema.users);\n    await db.delete(schema.residences);\n    await db.delete(schema.buildings);\n    await db.delete(schema.organizations);\n  });\n\n  describe('Invitation Organization/Building/Residence Assignment', () => {\n    it('should assign correct organization and residence when user accepts invitation', async () => {\n      // Create invitation with organization and residence\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7);\n\n      const invitationData = {\n        email: 'newuser@test.com',\n        role: 'tenant',\n        organizationId: testOrganization.id,\n        residenceId: testResidence1.id,\n        expiresAt: expiresAt.toISOString(),\n        personalMessage: 'Welcome!',\n      };\n\n      // Create invitation\n      const inviteResponse = await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send(invitationData)\n        .expect(201);\n\n      // Get the invitation token\n      const [invitation] = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.email, 'newuser@test.com'));\n\n      // Accept invitation\n      const acceptData = {\n        firstName: 'New',\n        lastName: 'User',\n        password: 'password123',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      await request(app)\n        .post(`/api/invitations/accept/${invitation.token}`)\n        .send(acceptData)\n        .expect(201);\n\n      // Verify user was created\n      const [newUser] = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.email, 'newuser@test.com'));\n\n      expect(newUser).toBeDefined();\n      expect(newUser.role).toBe('tenant');\n\n      // Verify organization assignment\n      const orgAssignment = await db\n        .select()\n        .from(schema.userOrganizations)\n        .where(\n          and(\n            eq(schema.userOrganizations.userId, newUser.id),\n            eq(schema.userOrganizations.organizationId, testOrganization.id)\n          )\n        );\n\n      expect(orgAssignment).toHaveLength(1);\n      expect(orgAssignment[0].organizationRole).toBe('tenant');\n      expect(orgAssignment[0].isActive).toBe(true);\n\n      // Verify residence assignment\n      const residenceAssignment = await db\n        .select()\n        .from(schema.userResidences)\n        .where(\n          and(\n            eq(schema.userResidences.userId, newUser.id),\n            eq(schema.userResidences.residenceId, testResidence1.id)\n          )\n        );\n\n      expect(residenceAssignment).toHaveLength(1);\n      expect(residenceAssignment[0].relationshipType).toBe('tenant');\n      expect(residenceAssignment[0].isActive).toBe(true);\n    });\n\n    it('should handle invitation with only organization (no residence)', async () => {\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7);\n\n      const invitationData = {\n        email: 'manager@test.com',\n        role: 'manager',\n        organizationId: testOrganization.id,\n        expiresAt: expiresAt.toISOString(),\n      };\n\n      // Create invitation\n      await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send(invitationData)\n        .expect(201);\n\n      const [invitation] = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.email, 'manager@test.com'));\n\n      // Accept invitation\n      const acceptData = {\n        firstName: 'New',\n        lastName: 'Manager',\n        password: 'password123',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      await request(app)\n        .post(`/api/invitations/accept/${invitation.token}`)\n        .send(acceptData)\n        .expect(201);\n\n      const [newUser] = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.email, 'manager@test.com'));\n\n      // Should have organization assignment\n      const orgAssignment = await db\n        .select()\n        .from(schema.userOrganizations)\n        .where(eq(schema.userOrganizations.userId, newUser.id));\n\n      expect(orgAssignment).toHaveLength(1);\n\n      // Should NOT have residence assignment\n      const residenceAssignment = await db\n        .select()\n        .from(schema.userResidences)\n        .where(eq(schema.userResidences.userId, newUser.id));\n\n      expect(residenceAssignment).toHaveLength(0);\n    });\n  });\n\n  describe('Multiple Building/Residence Assignment', () => {\n    it('should allow admin to assign multiple residences to a user', async () => {\n      // Create a test user first\n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'multiuser@test.com',\n          username: 'multiuser',\n          password: 'hashedpassword123',\n          firstName: 'Multi',\n          lastName: 'User',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0007',\n        })\n        .returning();\n\n      // Assign multiple residences\n      const residenceAssignments = [\n        {\n          residenceId: testResidence1.id,\n          relationshipType: 'tenant',\n          startDate: new Date().toISOString().split('T')[0],\n        },\n        {\n          residenceId: testResidence2.id,\n          relationshipType: 'occupant',\n          startDate: new Date().toISOString().split('T')[0],\n        },\n      ];\n\n      const response = await request(app)\n        .put(`/api/users/${user.id}/residences`)\n        .set('x-test-user-id', adminUser.id)\n        .send({ residenceAssignments })\n        .expect(200);\n\n      // Verify multiple assignments\n      const assignments = await db\n        .select()\n        .from(schema.userResidences)\n        .where(eq(schema.userResidences.userId, user.id));\n\n      expect(assignments).toHaveLength(2);\n      expect(assignments.some(a => a.residenceId === testResidence1.id)).toBe(true);\n      expect(assignments.some(a => a.residenceId === testResidence2.id)).toBe(true);\n    });\n\n    it('should allow manager to assign residences only within their organization', async () => {\n      // Create a test user\n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'limiteduser@test.com',\n          username: 'limiteduser',\n          password: 'hashedpassword123',\n          firstName: 'Limited',\n          lastName: 'User',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0008',\n        })\n        .returning();\n\n      // Manager tries to assign residence in their organization (should work)\n      const residenceAssignments = [\n        {\n          residenceId: testResidence1.id,\n          relationshipType: 'tenant',\n          startDate: new Date().toISOString().split('T')[0],\n        },\n      ];\n\n      await request(app)\n        .put(`/api/users/${user.id}/residences`)\n        .set('x-test-user-id', regularManager.id)\n        .send({ residenceAssignments })\n        .expect(200);\n\n      // Verify assignment was created\n      const assignments = await db\n        .select()\n        .from(schema.userResidences)\n        .where(eq(schema.userResidences.userId, user.id));\n\n      expect(assignments).toHaveLength(1);\n      expect(assignments[0].residenceId).toBe(testResidence1.id);\n    });\n  });\n\n  describe('Manager Permission Restrictions', () => {\n    it('should prevent regular manager from assigning organizations to users', async () => {\n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'restricteduser@test.com',\n          username: 'restricteduser',\n          password: 'hashedpassword123',\n          firstName: 'Restricted',\n          lastName: 'User',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0009',\n        })\n        .returning();\n\n      // Manager tries to assign organization (should fail)\n      const response = await request(app)\n        .put(`/api/users/${user.id}/organizations`)\n        .set('x-test-user-id', regularManager.id)\n        .send({ organizationIds: [testOrganization.id] })\n        .expect(403);\n\n      expect(response.body.message).toContain('Only administrators can modify organization assignments');\n    });\n\n    it('should prevent regular manager from creating users with organization assignments', async () => {\n      // This would be tested if there's a user creation endpoint that accepts organizationIds\n      // For now, we test that managers can't directly assign organizations\n      const userData = {\n        email: 'newmanaged@test.com',\n        firstName: 'New',\n        lastName: 'Managed',\n        role: 'tenant',\n        password: 'password123',\n        organizationIds: [testOrganization.id], // Manager shouldn't be able to set this\n      };\n\n      // This test assumes there's validation in the user creation endpoint\n      // The actual implementation might handle this differently\n    });\n\n    it('should only allow manager to assign residences within their organization', async () => {\n      // Create another organization and building\n      const [otherOrg] = await db\n        .insert(schema.organizations)\n        .values({\n          name: 'Other Organization',\n          type: 'Standard',\n          address: '789 Other St',\n          city: 'Other City',\n          province: 'QC',\n          postalCode: 'H3H 3H3',\n          phone: '514-555-0789',\n          email: 'other@org.com',\n        })\n        .returning();\n\n      const [otherBuilding] = await db\n        .insert(schema.buildings)\n        .values({\n          organizationId: otherOrg.id,\n          name: 'Other Building',\n          address: '789 Other St',\n          city: 'Other City',\n          province: 'QC',\n          postalCode: 'H3H 3H3',\n          totalUnits: 5,\n          buildingType: 'apartment',\n        })\n        .returning();\n\n      const [otherResidence] = await db\n        .insert(schema.residences)\n        .values({\n          buildingId: otherBuilding.id,\n          unitNumber: '301',\n          squareFootage: 800,\n          bedrooms: 1,\n          bathrooms: 1,\n        })\n        .returning();\n\n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'crossorguser@test.com',\n          username: 'crossorguser',\n          password: 'hashedpassword123',\n          firstName: 'Cross',\n          lastName: 'Org',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0010',\n        })\n        .returning();\n\n      // Manager tries to assign residence from different organization (should fail or be filtered)\n      const residenceAssignments = [\n        {\n          residenceId: otherResidence.id, // This is from a different organization\n          relationshipType: 'tenant',\n          startDate: new Date().toISOString().split('T')[0],\n        },\n      ];\n\n      // This should either fail with 403 or silently ignore the invalid assignment\n      // depending on implementation\n      const response = await request(app)\n        .put(`/api/users/${user.id}/residences`)\n        .set('x-test-user-id', regularManager.id)\n        .send({ residenceAssignments });\n\n      // The exact response depends on implementation, but the assignment shouldn't succeed\n      if (response.status === 200) {\n        // If it returns 200, verify no assignment was actually created\n        const assignments = await db\n          .select()\n          .from(schema.userResidences)\n          .where(eq(schema.userResidences.userId, user.id));\n\n        expect(assignments).toHaveLength(0);\n      } else {\n        // Should return an error status\n        expect(response.status).toBeGreaterThanOrEqual(400);\n      }\n    });\n  });\n\n  describe('Demo Manager User Visibility', () => {\n    it('should show only demo users to demo manager in user management', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('x-test-user-id', demoManager.id)\n        .expect(200);\n\n      const users = response.body;\n      \n      // Demo manager should only see demo users (demo_manager, demo_tenant, demo_resident)\n      const visibleRoles = users.map((user: any) => user.role);\n      \n      expect(visibleRoles).toContain('demo_manager');\n      expect(visibleRoles).toContain('demo_tenant'); \n      expect(visibleRoles).toContain('demo_resident');\n      \n      // Should NOT see regular roles\n      expect(visibleRoles).not.toContain('admin');\n      expect(visibleRoles).not.toContain('manager');\n      expect(visibleRoles).not.toContain('tenant');\n      expect(visibleRoles).not.toContain('resident');\n    });\n\n    it('should allow regular manager to see non-demo users in their organization', async () => {\n      // Assign the regular tenant to the same organization as the manager\n      await db\n        .insert(schema.userOrganizations)\n        .values({\n          userId: (await db.select().from(schema.users).where(eq(schema.users.email, 'regular.tenant@test.com')))[0].id,\n          organizationId: testOrganization.id,\n          organizationRole: 'tenant',\n          isActive: true,\n        });\n\n      const response = await request(app)\n        .get('/api/users')\n        .set('x-test-user-id', regularManager.id)\n        .expect(200);\n\n      const users = response.body;\n      const visibleEmails = users.map((user: any) => user.email);\n      \n      // Should see users in their organization\n      expect(visibleEmails).toContain('regular.tenant@test.com');\n      expect(visibleEmails).toContain('manager@test.com'); // themselves\n      \n      // Should NOT see demo users\n      expect(visibleEmails).not.toContain('demo.tenant@test.com');\n      expect(visibleEmails).not.toContain('demo.resident@test.com');\n      expect(visibleEmails).not.toContain('demo.manager@test.com');\n    });\n\n    it('should allow admin to see all users regardless of type', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      const users = response.body;\n      const visibleEmails = users.map((user: any) => user.email);\n      \n      // Admin should see all users\n      expect(visibleEmails).toContain('admin@test.com');\n      expect(visibleEmails).toContain('manager@test.com');\n      expect(visibleEmails).toContain('demo.manager@test.com');\n      expect(visibleEmails).toContain('demo.tenant@test.com');\n      expect(visibleEmails).toContain('demo.resident@test.com');\n      expect(visibleEmails).toContain('regular.tenant@test.com');\n    });\n  });\n\n  describe('Edge Cases and Validation', () => {\n    it('should handle invitation acceptance when residence no longer exists', async () => {\n      // Create invitation with residence\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7);\n\n      const [invitation] = await db\n        .insert(schema.invitations)\n        .values({\n          email: 'edgecase@test.com',\n          token: 'edge-case-token',\n          role: 'tenant',\n          status: 'pending',\n          invitedByUserId: adminUser.id,\n          expiresAt,\n          tokenHash: 'hashed-token',\n          usageCount: 0,\n          maxUsageCount: 1,\n          requires2fa: false,\n          organizationId: testOrganization.id,\n          residenceId: testResidence1.id,\n        })\n        .returning();\n\n      // Delete the residence\n      await db.delete(schema.residences).where(eq(schema.residences.id, testResidence1.id));\n\n      // Accept invitation - should still create user and org assignment, but skip residence\n      const acceptData = {\n        firstName: 'Edge',\n        lastName: 'Case',\n        password: 'password123',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post(`/api/invitations/accept/${invitation.token}`)\n        .send(acceptData);\n\n      // Should either succeed with warning or handle gracefully\n      if (response.status === 201) {\n        const [newUser] = await db\n          .select()\n          .from(schema.users)\n          .where(eq(schema.users.email, 'edgecase@test.com'));\n\n        // Should have organization assignment\n        const orgAssignment = await db\n          .select()\n          .from(schema.userOrganizations)\n          .where(eq(schema.userOrganizations.userId, newUser.id));\n\n        expect(orgAssignment).toHaveLength(1);\n\n        // Should NOT have residence assignment (since residence was deleted)\n        const residenceAssignment = await db\n          .select()\n          .from(schema.userResidences)\n          .where(eq(schema.userResidences.userId, newUser.id));\n\n        expect(residenceAssignment).toHaveLength(0);\n      }\n    });\n\n    it('should prevent duplicate residence assignments', async () => {\n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'duplicate@test.com',\n          username: 'duplicate',\n          password: 'hashedpassword123',\n          firstName: 'Duplicate',\n          lastName: 'User',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0011',\n        })\n        .returning();\n\n      // Assign residence once\n      const residenceAssignments = [\n        {\n          residenceId: testResidence1.id,\n          relationshipType: 'tenant',\n          startDate: new Date().toISOString().split('T')[0],\n        },\n      ];\n\n      await request(app)\n        .put(`/api/users/${user.id}/residences`)\n        .set('x-test-user-id', adminUser.id)\n        .send({ residenceAssignments })\n        .expect(200);\n\n      // Try to assign same residence again\n      await request(app)\n        .put(`/api/users/${user.id}/residences`)\n        .set('x-test-user-id', adminUser.id)\n        .send({ residenceAssignments })\n        .expect(200);\n\n      // Should still only have one assignment\n      const assignments = await db\n        .select()\n        .from(schema.userResidences)\n        .where(\n          and(\n            eq(schema.userResidences.userId, user.id),\n            eq(schema.userResidences.isActive, true)\n          )\n        );\n\n      expect(assignments).toHaveLength(1);\n    });\n  });\n});"],"version":3}