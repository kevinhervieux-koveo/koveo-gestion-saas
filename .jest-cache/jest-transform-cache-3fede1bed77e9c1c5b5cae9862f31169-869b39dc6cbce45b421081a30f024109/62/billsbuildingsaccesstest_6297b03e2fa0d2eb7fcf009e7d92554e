33f6ebdf83520c2285d6e818f08ab0e3
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
// Create test app similar to existing tests
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Add test authentication middleware that bypasses real auth
    app.use(async (req, res, next) => {
        const testUserId = req.headers['x-test-user-id'];
        if (testUserId) {
            const [user] = await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, testUserId)).limit(1);
            if (user) {
                req.session = {
                    userId: testUserId,
                    isAuthenticated: true,
                    role: user.role
                };
                req.user = user;
            }
        }
        next();
    });
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('Bills Page Buildings Access Issue', () => {
    let app;
    let adminUser;
    let managerUser;
    let testOrganization;
    let testBuilding;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        try {
            // Clean test data
            await db_1.db.delete(schema.userOrganizations);
            await db_1.db.delete(schema.buildings);
            await db_1.db.delete(schema.users);
            await db_1.db.delete(schema.organizations);
        }
        catch (error) {
            console.warn('Test setup warning:', error);
        }
        // Create test organization
        const [organization] = await db_1.db
            .insert(schema.organizations)
            .values({
            name: 'Test Organization',
            type: 'Standard',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            phone: '514-555-0123',
            email: 'test@org.com',
        })
            .returning();
        testOrganization = organization;
        // Create test building
        const [building] = await db_1.db
            .insert(schema.buildings)
            .values({
            organizationId: testOrganization.id,
            name: 'Test Building',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            totalUnits: 10,
            buildingType: 'apartment',
        })
            .returning();
        testBuilding = building;
        // Create test users
        const users = await db_1.db
            .insert(schema.users)
            .values([
            {
                email: 'admin@koveo-gestion.com',
                username: 'admin',
                password: 'hashedpass',
                firstName: 'Admin',
                lastName: 'User',
                role: 'admin',
                isActive: true,
                phone: '514-555-0001',
            },
            {
                email: 'manager@test.com',
                username: 'manager',
                password: 'hashedpass',
                firstName: 'Manager',
                lastName: 'User',
                role: 'manager',
                isActive: true,
                phone: '514-555-0002',
            }
        ])
            .returning();
        adminUser = users.find(u => u.email === 'admin@koveo-gestion.com');
        managerUser = users.find(u => u.email === 'manager@test.com');
        // Assign manager to organization (but NOT admin - this is the bug scenario)
        await db_1.db
            .insert(schema.userOrganizations)
            .values({
            userId: managerUser.id,
            organizationId: testOrganization.id,
            organizationRole: 'manager',
            isActive: true,
        });
    });
    (0, globals_1.afterEach)(async () => {
        await db_1.db.delete(schema.userOrganizations);
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.organizations);
    });
    (0, globals_1.describe)('Bills Page Buildings API Bug Scenario', () => {
        (0, globals_1.it)('REGRESSION TEST: admin without organization assignments should see all buildings', async () => {
            // This test reproduces the exact bug reported by the user:
            // Admin user Kevin Hervieux has no organization assignments but should see all buildings
            // in the bills page dropdown
            // Verify admin has no organization assignments (reproduces bug condition)
            const adminOrgs = await db_1.db
                .select()
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, adminUser.id));
            (0, globals_1.expect)(adminOrgs.length).toBe(0);
            // This should return buildings even though admin has no org assignments
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
            (0, globals_1.expect)(response.body[0].name).toBe('Test Building');
            (0, globals_1.expect)(response.body[0].organizationName).toBe('Test Organization');
        });
        (0, globals_1.it)('manager with organization assignments should see only their buildings', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('x-test-user-id', managerUser.id)
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body.length).toBe(1);
            (0, globals_1.expect)(response.body[0].name).toBe('Test Building');
            (0, globals_1.expect)(response.body[0].organizationName).toBe('Test Organization');
        });
        (0, globals_1.it)('manager without organization assignments should see no buildings', async () => {
            // Remove manager's organization assignment
            await db_1.db.delete(schema.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, managerUser.id));
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('x-test-user-id', managerUser.id)
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body.length).toBe(0);
        });
    });
    (0, globals_1.describe)('Bills Page Building Selection Component Data', () => {
        (0, globals_1.it)('should return properly formatted building data for BuildingSelectionGrid component', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
            const building = response.body[0];
            // Verify all required fields for BuildingSelectionGrid component are present
            (0, globals_1.expect)(building).toHaveProperty('id');
            (0, globals_1.expect)(building).toHaveProperty('name');
            (0, globals_1.expect)(building).toHaveProperty('address');
            (0, globals_1.expect)(building).toHaveProperty('city');
            (0, globals_1.expect)(building).toHaveProperty('buildingType');
            (0, globals_1.expect)(building).toHaveProperty('organizationName');
            // Verify data types
            (0, globals_1.expect)(typeof building.id).toBe('string');
            (0, globals_1.expect)(typeof building.name).toBe('string');
            (0, globals_1.expect)(typeof building.address).toBe('string');
            (0, globals_1.expect)(typeof building.organizationName).toBe('string');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,