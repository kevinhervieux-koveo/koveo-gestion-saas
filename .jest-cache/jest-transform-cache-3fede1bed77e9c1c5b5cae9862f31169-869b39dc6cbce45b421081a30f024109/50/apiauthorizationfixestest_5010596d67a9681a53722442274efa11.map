{"file":"/home/runner/workspace/tests/integration/api-authorization-fixes.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/api-authorization-fixes.test.ts"],"sourcesContent":["/**\n * Integration Tests for API Authorization Fixes\n * \n * Tests cover the fixes made to overly restrictive authorization middleware\n * that was preventing legitimate admin access to various endpoints.\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport session from 'express-session';\nimport { registerApiRoutes } from '../../server/routes';\nimport { MemStorage } from '../../server/storage';\nimport { createTestUser } from '../utils/test-utils';\n\n// Mock storage\nconst mockStorage = new MemStorage();\n\n// Create test Express app\nconst createTestApp = () => {\n  const app = express();\n  \n  // Setup middleware\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Session middleware for authentication\n  app.use(\n    session({\n      secret: 'test-secret',\n      resave: false,\n      saveUninitialized: false,\n      cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 },\n    })\n  );\n  \n  // Mock auth middleware\n  app.use((req: any, res, next) => {\n    if (req.session?.user) {\n      req.user = req.session.user;\n    }\n    next();\n  });\n  \n  // Register API routes\n  registerApiRoutes(app);\n  \n  return app;\n};\n\ndescribe('API Authorization Fixes', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let managerUser: any;\n  let regularUser: any;\n  let adminAgent: request.SuperAgentTest;\n  let managerAgent: request.SuperAgentTest;\n  let userAgent: request.SuperAgentTest;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Create test users\n    adminUser = await createTestUser({\n      email: 'admin@test.com',\n      role: 'admin',\n      firstName: 'Admin',\n      lastName: 'User'\n    });\n    \n    managerUser = await createTestUser({\n      email: 'manager@test.com',\n      role: 'manager',\n      firstName: 'Manager',\n      lastName: 'User'\n    });\n    \n    regularUser = await createTestUser({\n      email: 'user@test.com',\n      role: 'resident',\n      firstName: 'Regular',\n      lastName: 'User'\n    });\n    \n    // Create authenticated agents\n    adminAgent = request.agent(app);\n    managerAgent = request.agent(app);\n    userAgent = request.agent(app);\n    \n    // Mock sessions\n    await adminAgent.post('/mock-login').send(adminUser);\n    await managerAgent.post('/mock-login').send(managerUser);\n    await userAgent.post('/mock-login').send(regularUser);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Admin Permissions Endpoint Fix', () => {\n    it('should allow admin access to permissions endpoint without overly restrictive middleware', async () => {\n      // This was the main fix - removing overly restrictive authorization\n      const response = await adminAgent\n        .get('/api/permissions')\n        .expect(200);\n        \n      expect(response.body).toBeDefined();\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should still properly deny access to non-admin users', async () => {\n      await userAgent\n        .get('/api/permissions')\n        .expect(403);\n    });\n\n    it('should allow permissions modifications by admin', async () => {\n      const permissionUpdate = {\n        userId: regularUser.id,\n        permissions: ['read_documents'],\n        role: 'resident'\n      };\n\n      const response = await adminAgent\n        .patch('/api/permissions/user')\n        .send(permissionUpdate)\n        .expect(200);\n        \n      expect(response.body.success).toBe(true);\n    });\n  });\n\n  describe('Quality Metrics Authentication Fix', () => {\n    it('should properly authenticate admin users for quality metrics', async () => {\n      // This was fixed - authentication issues in quality-metrics component\n      const response = await adminAgent\n        .get('/api/quality-metrics')\n        .expect(200);\n        \n      expect(response.body).toBeDefined();\n      expect(response.body.metrics).toBeDefined();\n    });\n\n    it('should use proper credentials in quality metrics requests', async () => {\n      // Verify the fix for authentication issues\n      const response = await adminAgent\n        .get('/api/quality-metrics')\n        .expect(200);\n        \n      // Should not return 401 due to missing credentials\n      expect(response.status).not.toBe(401);\n    });\n  });\n\n  describe('Feature Management Authorization', () => {\n    it('should allow admin access to feature management without syntax errors', async () => {\n      const response = await adminAgent\n        .get('/api/feature-management/features')\n        .expect(200);\n        \n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should handle feature operations with proper authorization', async () => {\n      const newFeature = {\n        title: 'Authorization Test Feature',\n        description: 'Testing authorization fixes',\n        category: 'enhancement',\n        priority: 'medium',\n        estimatedEffort: 3,\n        targetQuarter: 'Q1 2025',\n        status: 'planned'\n      };\n\n      const response = await adminAgent\n        .post('/api/feature-management/features')\n        .send(newFeature)\n        .expect(201);\n        \n      expect(response.body.title).toBe(newFeature.title);\n    });\n  });\n\n  describe('Law 25 Compliance Authorization', () => {\n    it('should allow admin access to compliance data without syntax errors', async () => {\n      const response = await adminAgent\n        .get('/api/law25-compliance')\n        .expect(200);\n        \n      expect(response.body.overallStatus).toBeDefined();\n    });\n\n    it('should handle compliance audits with proper authorization', async () => {\n      const response = await adminAgent\n        .post('/api/law25-compliance/audit')\n        .send({\n          auditType: 'quick',\n          includeSensitiveData: false\n        })\n        .expect(200);\n        \n      expect(response.body.auditId).toBeDefined();\n    });\n  });\n\n  describe('Cross-Endpoint Authorization Consistency', () => {\n    it('should apply consistent authorization across admin endpoints', async () => {\n      const adminEndpoints = [\n        '/api/permissions',\n        '/api/quality-metrics',\n        '/api/feature-management/features',\n        '/api/law25-compliance'\n      ];\n\n      // All should allow admin access\n      for (const endpoint of adminEndpoints) {\n        await adminAgent\n          .get(endpoint)\n          .expect(200);\n      }\n    });\n\n    it('should consistently deny access to unauthorized users', async () => {\n      const adminEndpoints = [\n        '/api/permissions',\n        '/api/quality-metrics',\n        '/api/feature-management/features',\n        '/api/law25-compliance'\n      ];\n\n      // All should deny regular user access\n      for (const endpoint of adminEndpoints) {\n        await userAgent\n          .get(endpoint)\n          .expect(403);\n      }\n    });\n  });\n\n  describe('Manager Role Authorization', () => {\n    it('should handle manager permissions appropriately', async () => {\n      // Managers should have limited access compared to admins\n      const managerAccessibleEndpoints = [\n        '/api/quality-metrics', // Managers might need this\n      ];\n\n      for (const endpoint of managerAccessibleEndpoints) {\n        const response = await managerAgent.get(endpoint);\n        // Should either allow access (200) or properly deny (403), not fail due to middleware issues\n        expect([200, 403]).toContain(response.status);\n      }\n    });\n  });\n\n  describe('Authentication vs Authorization Separation', () => {\n    it('should properly separate authentication (401) from authorization (403) errors', async () => {\n      // Unauthenticated request should return 401\n      await request(app)\n        .get('/api/permissions')\n        .expect(401);\n        \n      // Authenticated but unauthorized should return 403\n      await userAgent\n        .get('/api/permissions')\n        .expect(403);\n    });\n\n    it('should handle authentication errors consistently across endpoints', async () => {\n      const protectedEndpoints = [\n        '/api/permissions',\n        '/api/quality-metrics',\n        '/api/feature-management/features',\n        '/api/law25-compliance'\n      ];\n\n      for (const endpoint of protectedEndpoints) {\n        await request(app)\n          .get(endpoint)\n          .expect(401);\n      }\n    });\n  });\n\n  describe('Error Handling Improvements', () => {\n    it('should return proper error messages instead of middleware failures', async () => {\n      const response = await userAgent\n        .get('/api/permissions')\n        .expect(403);\n        \n      expect(response.body.error).toBeDefined();\n      expect(response.body.message).toBeDefined();\n      expect(response.body.error).toBe('Forbidden');\n    });\n\n    it('should handle malformed authorization headers gracefully', async () => {\n      const response = await request(app)\n        .get('/api/permissions')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(401);\n        \n      expect(response.body.error).toBeDefined();\n    });\n  });\n\n  describe('Session-Based Authentication', () => {\n    it('should properly maintain sessions for authorized users', async () => {\n      // Make multiple requests to ensure session persistence\n      await adminAgent.get('/api/permissions').expect(200);\n      await adminAgent.get('/api/quality-metrics').expect(200);\n      await adminAgent.get('/api/feature-management/features').expect(200);\n    });\n\n    it('should handle session expiration gracefully', async () => {\n      // This would test session timeout scenarios\n      // For now, just verify that sessions work as expected\n      const response = await adminAgent\n        .get('/api/permissions')\n        .expect(200);\n        \n      expect(response.body).toBeDefined();\n    });\n  });\n});"],"version":3}