{"file":"/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/event/selection/getTargetTypeAndSelection.js","mappings":"AAAA,YAAY,CAAC;AAEb,IAAI,EAAE,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AACzC,OAAO,CAAC,uCAAuC,CAAC,CAAC;AACjD,IAAI,iBAAiB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC;AACzE,IAAI,SAAS,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAE1D;;GAEG,CAAC,SAAS,yBAAyB,CAAC,IAAI;IACvC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IACjC,IAAI,OAAO,IAAI,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC;QAChD,OAAO;YACH,IAAI,EAAE,OAAO;YACb,SAAS,EAAE,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC;SACxC,CAAC;IACN,CAAC;IACD,MAAM,WAAW,GAAG,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;IACjH,4EAA4E;IAC5E,4EAA4E;IAC5E,MAAM,IAAI,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,iBAAiB,CAAC,kBAAkB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACpN,OAAO;QACH,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS;QAC1C,SAAS,EAAE,WAAW;KACzB,CAAC;AACN,CAAC;AACD,SAAS,UAAU,CAAC,IAAI;IACpB,OAAO,IAAI,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;AAC3D,CAAC;AAED,OAAO,CAAC,yBAAyB,GAAG,yBAAyB,CAAC","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/event/selection/getTargetTypeAndSelection.js"],"sourcesContent":["'use strict';\n\nvar UI = require('../../document/UI.js');\nrequire('../../utils/dataTransfer/Clipboard.js');\nvar isContentEditable = require('../../utils/edit/isContentEditable.js');\nvar selection = require('../../utils/focus/selection.js');\n\n/**\n * Determine which selection logic and selection ranges to consider.\n */ function getTargetTypeAndSelection(node) {\n    const element = getElement(node);\n    if (element && selection.hasOwnSelection(element)) {\n        return {\n            type: 'input',\n            selection: UI.getUISelection(element)\n        };\n    }\n    const selection$1 = element === null || element === undefined ? undefined : element.ownerDocument.getSelection();\n    // It is possible to extend a single-range selection into a contenteditable.\n    // This results in the range acting like a range outside of contenteditable.\n    const isCE = isContentEditable.getContentEditable(node) && (selection$1 === null || selection$1 === undefined ? undefined : selection$1.anchorNode) && isContentEditable.getContentEditable(selection$1.anchorNode);\n    return {\n        type: isCE ? 'contenteditable' : 'default',\n        selection: selection$1\n    };\n}\nfunction getElement(node) {\n    return node.nodeType === 1 ? node : node.parentElement;\n}\n\nexports.getTargetTypeAndSelection = getTargetTypeAndSelection;\n"],"version":3}