{"file":"/home/runner/workspace/tests/mocks/database.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/mocks/database.ts"],"sourcesContent":["/**\n * Fast in-memory database mock for unit tests\n * Provides instant responses without network calls\n */\n\nexport const createMockDatabase = () => {\n  const mockData = new Map();\n  \n  return {\n    // Mock query function that returns immediately\n    query: jest.fn().mockImplementation(async (sql: string) => {\n      // Return empty results for test queries\n      if (sql.includes('SELECT version()')) {\n        return [{ version: 'PostgreSQL 15.0 (Mock)' }];\n      }\n      return [];\n    }),\n    \n    // Mock insert operations\n    insert: jest.fn().mockImplementation(async (table: string) => ({\n      values: jest.fn().mockImplementation(async (data: any) => {\n        const id = Math.random().toString(36).substr(2, 9);\n        mockData.set(id, data);\n        return [{ ...data, id }];\n      }),\n    })),\n    \n    // Mock select operations\n    select: jest.fn().mockImplementation(() => ({\n      from: jest.fn().mockImplementation(() => ({\n        where: jest.fn().mockImplementation(() => ({\n          limit: jest.fn().mockImplementation(async () => []),\n        })),\n      })),\n    })),\n    \n    // Mock delete operations\n    delete: jest.fn().mockImplementation(() => ({\n      where: jest.fn().mockImplementation(async () => ({ affectedRows: 0 })),\n    })),\n    \n    // Mock update operations\n    update: jest.fn().mockImplementation(() => ({\n      set: jest.fn().mockImplementation(() => ({\n        where: jest.fn().mockImplementation(async () => ({ affectedRows: 0 })),\n      })),\n    })),\n  };\n};\n\n// Global mock instance\nexport const mockDb = createMockDatabase();\n\n// Mock SQL template function\nexport const mockSql = jest.fn().mockImplementation(async (strings: TemplateStringsArray, ...values: any[]) => {\n  const query = strings.join('?');\n  if (query.includes('SELECT version()')) {\n    return [{ version: 'PostgreSQL 15.0 (Mock)' }];\n  }\n  return [];\n});"],"version":3}