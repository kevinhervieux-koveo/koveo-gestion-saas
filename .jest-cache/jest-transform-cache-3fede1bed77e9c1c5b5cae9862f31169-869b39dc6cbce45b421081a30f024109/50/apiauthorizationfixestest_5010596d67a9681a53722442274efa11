a8d7c526000d578a1968c2557e19ccd1
"use strict";
/**
 * Integration Tests for API Authorization Fixes
 *
 * Tests cover the fixes made to overly restrictive authorization middleware
 * that was preventing legitimate admin access to various endpoints.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const express_session_1 = __importDefault(require("express-session"));
const routes_1 = require("../../server/routes");
const storage_1 = require("../../server/storage");
const test_utils_1 = require("../utils/test-utils");
// Mock storage
const mockStorage = new storage_1.MemStorage();
// Create test Express app
const createTestApp = () => {
    const app = (0, express_1.default)();
    // Setup middleware
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Session middleware for authentication
    app.use((0, express_session_1.default)({
        secret: 'test-secret',
        resave: false,
        saveUninitialized: false,
        cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 },
    }));
    // Mock auth middleware
    app.use((req, res, next) => {
        if (req.session?.user) {
            req.user = req.session.user;
        }
        next();
    });
    // Register API routes
    (0, routes_1.registerApiRoutes)(app);
    return app;
};
(0, globals_1.describe)('API Authorization Fixes', () => {
    let app;
    let adminUser;
    let managerUser;
    let regularUser;
    let adminAgent;
    let managerAgent;
    let userAgent;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Create test users
        adminUser = await (0, test_utils_1.createTestUser)({
            email: 'admin@test.com',
            role: 'admin',
            firstName: 'Admin',
            lastName: 'User'
        });
        managerUser = await (0, test_utils_1.createTestUser)({
            email: 'manager@test.com',
            role: 'manager',
            firstName: 'Manager',
            lastName: 'User'
        });
        regularUser = await (0, test_utils_1.createTestUser)({
            email: 'user@test.com',
            role: 'resident',
            firstName: 'Regular',
            lastName: 'User'
        });
        // Create authenticated agents
        adminAgent = supertest_1.default.agent(app);
        managerAgent = supertest_1.default.agent(app);
        userAgent = supertest_1.default.agent(app);
        // Mock sessions
        await adminAgent.post('/mock-login').send(adminUser);
        await managerAgent.post('/mock-login').send(managerUser);
        await userAgent.post('/mock-login').send(regularUser);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Admin Permissions Endpoint Fix', () => {
        (0, globals_1.it)('should allow admin access to permissions endpoint without overly restrictive middleware', async () => {
            // This was the main fix - removing overly restrictive authorization
            const response = await adminAgent
                .get('/api/permissions')
                .expect(200);
            (0, globals_1.expect)(response.body).toBeDefined();
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
        });
        (0, globals_1.it)('should still properly deny access to non-admin users', async () => {
            await userAgent
                .get('/api/permissions')
                .expect(403);
        });
        (0, globals_1.it)('should allow permissions modifications by admin', async () => {
            const permissionUpdate = {
                userId: regularUser.id,
                permissions: ['read_documents'],
                role: 'resident'
            };
            const response = await adminAgent
                .patch('/api/permissions/user')
                .send(permissionUpdate)
                .expect(200);
            (0, globals_1.expect)(response.body.success).toBe(true);
        });
    });
    (0, globals_1.describe)('Quality Metrics Authentication Fix', () => {
        (0, globals_1.it)('should properly authenticate admin users for quality metrics', async () => {
            // This was fixed - authentication issues in quality-metrics component
            const response = await adminAgent
                .get('/api/quality-metrics')
                .expect(200);
            (0, globals_1.expect)(response.body).toBeDefined();
            (0, globals_1.expect)(response.body.metrics).toBeDefined();
        });
        (0, globals_1.it)('should use proper credentials in quality metrics requests', async () => {
            // Verify the fix for authentication issues
            const response = await adminAgent
                .get('/api/quality-metrics')
                .expect(200);
            // Should not return 401 due to missing credentials
            (0, globals_1.expect)(response.status).not.toBe(401);
        });
    });
    (0, globals_1.describe)('Feature Management Authorization', () => {
        (0, globals_1.it)('should allow admin access to feature management without syntax errors', async () => {
            const response = await adminAgent
                .get('/api/feature-management/features')
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
        });
        (0, globals_1.it)('should handle feature operations with proper authorization', async () => {
            const newFeature = {
                title: 'Authorization Test Feature',
                description: 'Testing authorization fixes',
                category: 'enhancement',
                priority: 'medium',
                estimatedEffort: 3,
                targetQuarter: 'Q1 2025',
                status: 'planned'
            };
            const response = await adminAgent
                .post('/api/feature-management/features')
                .send(newFeature)
                .expect(201);
            (0, globals_1.expect)(response.body.title).toBe(newFeature.title);
        });
    });
    (0, globals_1.describe)('Law 25 Compliance Authorization', () => {
        (0, globals_1.it)('should allow admin access to compliance data without syntax errors', async () => {
            const response = await adminAgent
                .get('/api/law25-compliance')
                .expect(200);
            (0, globals_1.expect)(response.body.overallStatus).toBeDefined();
        });
        (0, globals_1.it)('should handle compliance audits with proper authorization', async () => {
            const response = await adminAgent
                .post('/api/law25-compliance/audit')
                .send({
                auditType: 'quick',
                includeSensitiveData: false
            })
                .expect(200);
            (0, globals_1.expect)(response.body.auditId).toBeDefined();
        });
    });
    (0, globals_1.describe)('Cross-Endpoint Authorization Consistency', () => {
        (0, globals_1.it)('should apply consistent authorization across admin endpoints', async () => {
            const adminEndpoints = [
                '/api/permissions',
                '/api/quality-metrics',
                '/api/feature-management/features',
                '/api/law25-compliance'
            ];
            // All should allow admin access
            for (const endpoint of adminEndpoints) {
                await adminAgent
                    .get(endpoint)
                    .expect(200);
            }
        });
        (0, globals_1.it)('should consistently deny access to unauthorized users', async () => {
            const adminEndpoints = [
                '/api/permissions',
                '/api/quality-metrics',
                '/api/feature-management/features',
                '/api/law25-compliance'
            ];
            // All should deny regular user access
            for (const endpoint of adminEndpoints) {
                await userAgent
                    .get(endpoint)
                    .expect(403);
            }
        });
    });
    (0, globals_1.describe)('Manager Role Authorization', () => {
        (0, globals_1.it)('should handle manager permissions appropriately', async () => {
            // Managers should have limited access compared to admins
            const managerAccessibleEndpoints = [
                '/api/quality-metrics', // Managers might need this
            ];
            for (const endpoint of managerAccessibleEndpoints) {
                const response = await managerAgent.get(endpoint);
                // Should either allow access (200) or properly deny (403), not fail due to middleware issues
                (0, globals_1.expect)([200, 403]).toContain(response.status);
            }
        });
    });
    (0, globals_1.describe)('Authentication vs Authorization Separation', () => {
        (0, globals_1.it)('should properly separate authentication (401) from authorization (403) errors', async () => {
            // Unauthenticated request should return 401
            await (0, supertest_1.default)(app)
                .get('/api/permissions')
                .expect(401);
            // Authenticated but unauthorized should return 403
            await userAgent
                .get('/api/permissions')
                .expect(403);
        });
        (0, globals_1.it)('should handle authentication errors consistently across endpoints', async () => {
            const protectedEndpoints = [
                '/api/permissions',
                '/api/quality-metrics',
                '/api/feature-management/features',
                '/api/law25-compliance'
            ];
            for (const endpoint of protectedEndpoints) {
                await (0, supertest_1.default)(app)
                    .get(endpoint)
                    .expect(401);
            }
        });
    });
    (0, globals_1.describe)('Error Handling Improvements', () => {
        (0, globals_1.it)('should return proper error messages instead of middleware failures', async () => {
            const response = await userAgent
                .get('/api/permissions')
                .expect(403);
            (0, globals_1.expect)(response.body.error).toBeDefined();
            (0, globals_1.expect)(response.body.message).toBeDefined();
            (0, globals_1.expect)(response.body.error).toBe('Forbidden');
        });
        (0, globals_1.it)('should handle malformed authorization headers gracefully', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/permissions')
                .set('Authorization', 'Bearer invalid-token')
                .expect(401);
            (0, globals_1.expect)(response.body.error).toBeDefined();
        });
    });
    (0, globals_1.describe)('Session-Based Authentication', () => {
        (0, globals_1.it)('should properly maintain sessions for authorized users', async () => {
            // Make multiple requests to ensure session persistence
            await adminAgent.get('/api/permissions').expect(200);
            await adminAgent.get('/api/quality-metrics').expect(200);
            await adminAgent.get('/api/feature-management/features').expect(200);
        });
        (0, globals_1.it)('should handle session expiration gracefully', async () => {
            // This would test session timeout scenarios
            // For now, just verify that sessions work as expected
            const response = await adminAgent
                .get('/api/permissions')
                .expect(200);
            (0, globals_1.expect)(response.body).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,