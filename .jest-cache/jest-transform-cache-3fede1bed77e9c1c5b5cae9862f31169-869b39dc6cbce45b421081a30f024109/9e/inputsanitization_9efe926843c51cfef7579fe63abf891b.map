{"file":"/home/runner/workspace/server/utils/input-sanitization.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/utils/input-sanitization.ts"],"sourcesContent":["/**\n * Enhanced input sanitization and validation utilities for Quebec property management system.\n * Provides comprehensive security and data consistency functions for user input processing.\n * Protects against XSS, SQL injection, NoSQL injection, and other attack vectors.\n */\n\n// Common attack patterns to detect and prevent\nconst ATTACK_PATTERNS = [\n  // SQL injection patterns\n  /('|(\\-\\-)|(\\;)|(\\||\\\\|)|(\\*|\\*))/, \n  /(exec(\\s|\\+)+(s|x)p\\w+)/i,\n  /((sp_|xp_)\\w+)/i,\n  // XSS patterns\n  /<script[^>]*>.*?<\\/script>/gi,\n  /<iframe[^>]*>.*?<\\/iframe>/gi,\n  /javascript:/gi,\n  /on\\w+\\s*=/gi,\n  // NoSQL injection patterns\n  /\\$where/gi,\n  /\\$ne/gi,\n  /\\$gt/gi,\n  /\\$lt/gi,\n];\n\n// Dangerous file extensions to block\nconst DANGEROUS_EXTENSIONS = [\n  '.exe', '.bat', '.cmd', '.com', '.pif', '.scr', '.vbs', '.js', '.jar',\n  '.ps1', '.sh', '.php', '.asp', '.aspx', '.jsp', '.py', '.rb'\n];\n\n/**\n * Enhanced sanitization for user input to prevent XSS, SQL injection, and other attacks\n */\nexport function sanitizeString(input: string, maxLength = 500): string {\n  if (!input || typeof input !== 'string') return '';\n\n  // Detect potential attacks\n  for (const pattern of ATTACK_PATTERNS) {\n    if (pattern.test(input)) {\n      console.warn(`ðŸš¨ Security: Potential attack pattern detected in input: ${pattern}`);\n      return ''; // Return empty string for suspicious input\n    }\n  }\n\n  return input\n    .trim()\n    // HTML encode dangerous characters\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;')\n    // Remove null bytes and control characters\n    .replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, '')\n    // Limit length to prevent buffer overflow\n    .substring(0, maxLength);\n}\n\n/**\n * Sanitizes HTML content while preserving safe tags\n */\nexport function sanitizeHTML(input: string): string {\n  if (!input || typeof input !== 'string') return '';\n  \n  return input\n    .replace(/<script[^>]*>.*?<\\/script>/gi, '') // Remove all scripts\n    .replace(/<iframe[^>]*>.*?<\\/iframe>/gi, '') // Remove iframes\n    .replace(/javascript:/gi, '') // Remove javascript: URLs\n    .replace(/on\\w+\\s*=/gi, '') // Remove event handlers\n    .replace(/<(?!\\/?(?:b|i|em|strong|u|br|p|div|span|h[1-6])(?:\\s|>))[^>]*>/gi, ''); // Remove non-safe tags\n}\n\n/**\n * Validates and normalizes email addresses\n */\nexport function normalizeEmail(email: string): string {\n  if (!email) return '';\n  return email.toLowerCase().trim();\n}\n\n/**\n * Validates Quebec postal code format\n */\nexport function isValidQuebecPostalCode(postalCode: string): boolean {\n  if (!postalCode) return true; // Optional field\n  const quebecPostalCodeRegex =\n    /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ] ?\\d[ABCEGHJKLMNPRSTVWXYZ]\\d$/i;\n  return quebecPostalCodeRegex.test(postalCode.trim());\n}\n\n/**\n * Validates North American phone number format\n */\nexport function isValidNorthAmericanPhone(phone: string): boolean {\n  if (!phone) return true; // Optional field\n  const phoneRegex = /^(\\+1\\s?)?(\\([0-9]{3}\\)|[0-9]{3})[\\s.-]?[0-9]{3}[\\s.-]?[0-9]{4}$/;\n  return phoneRegex.test(phone.trim());\n}\n\n/**\n * Sanitizes and validates user names (first, last)\n */\nexport function sanitizeName(name: string): string {\n  if (!name) return '';\n\n  return name\n    .trim()\n    .replace(/[^a-zA-ZÃ€-Ã¿\\s'-]/g, '') // Allow accented characters for Quebec names\n    .replace(/\\s+/g, ' ') // Normalize multiple spaces\n    .substring(0, 100); // Limit to 100 characters\n}\n\n/**\n * Generates a secure, unique username from email\n */\nexport function generateUsernameFromEmail(email: string): string {\n  if (!email) return '';\n\n  return email\n    .split('@')[0]\n    .toLowerCase()\n    .replace(/[^a-z0-9]/g, '') // Remove non-alphanumeric characters\n    .substring(0, 30); // Limit username length\n}\n\n/**\n * Validates password strength for Quebec compliance\n */\nexport function validatePasswordStrength(password: string): { isValid: boolean; message?: string } {\n  if (!password) {\n    return { isValid: false, message: 'Password is required' };\n  }\n\n  if (password.length < 8) {\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\n  }\n\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n  const hasNumber = /\\d/.test(password);\n  const hasSpecialChar = /[@$!%*?&]/.test(password);\n\n  if (!hasUppercase || !hasLowercase || !hasNumber || !hasSpecialChar) {\n    return {\n      isValid: false,\n      message:\n        'Password must contain uppercase, lowercase, number, and special character (@$!%*?&)',\n    };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Sanitizes and validates address fields for Quebec addresses\n */\nexport function sanitizeAddress(address: string): string {\n  if (!address || typeof address !== 'string') return '';\n\n  return sanitizeString(address, 200)\n    .replace(/[^\\w\\s\\-\\.\\,\\#\\'\\(\\)\\u00e0\\u00e2\\u00e4\\u00e9\\u00e8\\u00ea\\u00eb\\u00ef\\u00ee\\u00f4\\u00f6\\u00f9\\u00fb\\u00fc\\u00ff\\u00e7]/gi, ''); // Allow Quebec address characters\n}\n\n/**\n * Validates file uploads for security\n */\nexport function validateFileUpload(filename: string, fileSize: number, mimeType: string): { isValid: boolean; message?: string } {\n  if (!filename || typeof filename !== 'string') {\n    return { isValid: false, message: 'Invalid filename' };\n  }\n\n  // Check file extension\n  const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));\n  if (DANGEROUS_EXTENSIONS.includes(ext)) {\n    console.warn(`ðŸš¨ Security: Dangerous file extension blocked: ${ext}`);\n    return { isValid: false, message: 'File type not allowed for security reasons' };\n  }\n\n  // Check file size (50MB limit)\n  const MAX_FILE_SIZE = 50 * 1024 * 1024;\n  if (fileSize > MAX_FILE_SIZE) {\n    return { isValid: false, message: 'File size too large (max 50MB)' };\n  }\n\n  // Validate MIME type\n  const allowedMimeTypes = [\n    'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n    'application/pdf', 'text/plain', 'text/csv',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  ];\n  \n  if (!allowedMimeTypes.includes(mimeType)) {\n    return { isValid: false, message: 'File type not allowed' };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Rate limiting helper to prevent brute force attacks\n */\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\nexport function checkRateLimit(identifier: string, limit: number, windowMs: number): { allowed: boolean; remaining: number } {\n  const now = Date.now();\n  const current = rateLimitStore.get(identifier);\n  \n  if (!current || now > current.resetTime) {\n    rateLimitStore.set(identifier, { count: 1, resetTime: now + windowMs });\n    return { allowed: true, remaining: limit - 1 };\n  }\n  \n  if (current.count >= limit) {\n    return { allowed: false, remaining: 0 };\n  }\n  \n  current.count++;\n  return { allowed: true, remaining: limit - current.count };\n}\n"],"version":3}