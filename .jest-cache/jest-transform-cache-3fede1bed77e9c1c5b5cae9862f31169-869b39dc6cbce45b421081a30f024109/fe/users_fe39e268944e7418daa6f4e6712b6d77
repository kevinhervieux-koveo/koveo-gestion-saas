16cd377848b6126878e466ae3f9fb200
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerUserRoutes = registerUserRoutes;
const storage_1 = require("../storage");
const schema_1 = require("@shared/schema");
const zod_1 = require("zod");
const auth_1 = require("../auth");
const crypto_1 = require("crypto");
const bcrypt = __importStar(require("bcryptjs"));
// Database-based permissions - no config imports needed
const db_1 = require("../db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const input_sanitization_1 = require("../utils/input-sanitization");
const user_creation_logger_1 = require("../utils/user-creation-logger");
const query_cache_1 = require("../query-cache");
const email_service_1 = require("../services/email-service");
/**
 * Registers all user-related API endpoints.
 *
 * @param app - Express application instance.
 */
/**
 * RegisterUserRoutes function.
 * @param app
 * @returns Function result.
 */
function registerUserRoutes(app) {
    /**
     * GET /api/users - Retrieves users with their assignments based on current user's role and organizations.
     */
    app.get('/api/users', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Get users with their full assignment data
            const usersWithAssignments = await storage_1.storage.getUsersWithAssignments();
            // Filter users based on current user's role and permissions
            let filteredUsers;
            if (currentUser.role === 'admin') {
                // Admin can see all users
                filteredUsers = usersWithAssignments;
            }
            else if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(currentUser.role)) {
                // Demo users can only see other demo users
                filteredUsers = usersWithAssignments.filter(user => ['demo_manager', 'demo_tenant', 'demo_resident'].includes(user.role));
            }
            else {
                // Regular managers and other users can only see non-demo users from their organizations
                // Get the organization IDs that the current user has access to
                const userOrgIds = (await storage_1.storage.getUserOrganizations(currentUser.id)).map(org => org.organizationId);
                // Filter users to only include non-demo users from accessible organizations
                filteredUsers = usersWithAssignments.filter(user => {
                    // Exclude demo users from regular manager view
                    if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(user.role)) {
                        return false;
                    }
                    const hasAccess = user.organizations?.some(org => userOrgIds.includes(org.id)) || false;
                    return hasAccess;
                });
            }
            res.json(filteredUsers);
        }
        catch (error) {
            console.error('❌ Error fetching users:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch users',
            });
        }
    });
    /**
     * GET /api/users/:id - Retrieves a specific user by ID.
     */
    app.get('/api/users/:id', async (req, res) => {
        try {
            const { id } = req.params;
            if (!id) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'User ID is required',
                });
            }
            const user = await storage_1.storage.getUser(id);
            if (!user) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'User not found',
                });
            }
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error('❌ Error fetching user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user',
            });
        }
    });
    /**
     * GET /api/users/email/:email - Retrieves a user by email address.
     */
    app.get('/api/users/email/:email', async (req, res) => {
        try {
            const { email } = req.params;
            if (!email) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'Email is required',
                });
            }
            const user = await storage_1.storage.getUserByEmail(email);
            if (!user) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'User not found',
                });
            }
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error('❌ Error fetching user by email:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user',
            });
        }
    });
    /**
     * POST /api/users - Creates a new user.
     */
    app.post('/api/users', async (req, res) => {
        try {
            // Enhanced password validation using utility
            if (req.body.password) {
                const passwordValidation = (0, input_sanitization_1.validatePasswordStrength)(req.body.password);
                if (!passwordValidation.isValid) {
                    return res.status(400).json({
                        error: 'Validation error',
                        message: passwordValidation.message,
                        code: 'WEAK_PASSWORD',
                    });
                }
            }
            // Sanitize and normalize all input data
            const normalizedData = {
                ...req.body,
                email: (0, input_sanitization_1.normalizeEmail)(req.body.email || ''),
                firstName: (0, input_sanitization_1.sanitizeName)(req.body.firstName || ''),
                lastName: (0, input_sanitization_1.sanitizeName)(req.body.lastName || ''),
                phone: req.body.phone ? (0, input_sanitization_1.sanitizeString)(req.body.phone) : '',
                language: req.body.language || 'fr',
            };
            // Generate unique username if not provided
            if (!normalizedData.username && normalizedData.email) {
                const baseUsername = (0, input_sanitization_1.generateUsernameFromEmail)(normalizedData.email);
                let username = baseUsername;
                // Ensure username uniqueness
                let usernameCounter = 1;
                let existingUsername = await db_1.db
                    .select({ username: schema.users.username })
                    .from(schema.users)
                    .where((0, drizzle_orm_1.eq)(schema.users.username, username))
                    .limit(1);
                while (existingUsername.length > 0) {
                    username = `${baseUsername}${usernameCounter}`;
                    usernameCounter++;
                    existingUsername = await db_1.db
                        .select({ username: schema.users.username })
                        .from(schema.users)
                        .where((0, drizzle_orm_1.eq)(schema.users.username, username))
                        .limit(1);
                }
                normalizedData.username = username;
            }
            const validatedData = schema_1.insertUserSchema.parse(normalizedData);
            // Check if user with email already exists
            const existingUser = await storage_1.storage.getUserByEmail(validatedData.email);
            if (existingUser) {
                return res.status(409).json({
                    _error: 'Conflict',
                    message: 'User with this email already exists',
                });
            }
            const user = await storage_1.storage.createUser(validatedData);
            // Log successful user creation
            (0, user_creation_logger_1.logUserCreation)({
                userId: user.id,
                email: user.email,
                role: user.role,
                method: 'direct',
                success: true,
                timestamp: new Date(),
                ipAddress: req.ip,
                userAgent: req.get('User-Agent'),
            });
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.status(201).json(userWithoutPassword);
        }
        catch (error) {
            // Log failed user creation attempt
            (0, user_creation_logger_1.logUserCreation)({
                email: req.body.email || 'unknown',
                role: req.body.role || 'unknown',
                method: 'direct',
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date(),
                ipAddress: req.ip,
                userAgent: req.get('User-Agent'),
            });
            if (error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    error: 'Validation error',
                    message: 'Invalid user data',
                    details: error.issues,
                });
            }
            console.error('❌ Error creating user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create user',
            });
        }
    });
    /**
     * PUT /api/users/:id - Updates an existing user.
     */
    app.put('/api/users/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: 'Bad request',
                    message: 'User ID is required',
                });
            }
            // Get the target user being updated
            const targetUser = await storage_1.storage.getUser(id);
            if (!targetUser) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'User not found',
                });
            }
            // Role-based access control for user updates
            const { role: newRole } = req.body;
            // Validate role assignment permissions
            if (newRole && newRole !== targetUser.role) {
                // Admin can assign any role
                if (currentUser.role === 'admin') {
                    // Admin has no restrictions
                }
                // Manager restrictions
                else if (currentUser.role === 'manager') {
                    // Managers cannot escalate to admin
                    if (newRole === 'admin') {
                        return res.status(403).json({
                            error: 'Permission denied',
                            message: 'Managers cannot assign admin role',
                            code: 'ROLE_ESCALATION_DENIED',
                        });
                    }
                    // Managers can only assign manager/tenant/resident roles
                    if (!['manager', 'tenant', 'resident'].includes(newRole)) {
                        return res.status(403).json({
                            error: 'Permission denied',
                            message: 'Managers can only assign manager, tenant, or resident roles',
                            code: 'INVALID_ROLE_ASSIGNMENT',
                        });
                    }
                }
                // Demo manager restrictions
                else if (currentUser.role === 'demo_manager') {
                    // Demo managers can only assign demo roles
                    if (!['demo_manager', 'demo_tenant', 'demo_resident'].includes(newRole)) {
                        return res.status(403).json({
                            error: 'Permission denied',
                            message: 'Demo managers can only assign demo roles',
                            code: 'INVALID_DEMO_ROLE_ASSIGNMENT',
                        });
                    }
                }
                // Other roles cannot assign roles
                else {
                    return res.status(403).json({
                        error: 'Permission denied',
                        message: 'Insufficient permissions to assign roles',
                        code: 'INSUFFICIENT_PERMISSIONS',
                    });
                }
                // Organization scope validation for role assignments
                if (currentUser.role === 'manager' || currentUser.role === 'demo_manager') {
                    // Get current user's organizations
                    const currentUserOrgs = await storage_1.storage.getUserOrganizations(currentUser.id);
                    const currentUserOrgIds = currentUserOrgs.map(org => org.organizationId);
                    // Get target user's organizations
                    const targetUserOrgs = await storage_1.storage.getUserOrganizations(id);
                    const targetUserOrgIds = targetUserOrgs.map(org => org.organizationId);
                    // Check if current user has access to target user's organizations
                    const hasAccessToTargetOrgs = targetUserOrgIds.some(orgId => currentUserOrgIds.includes(orgId));
                    if (!hasAccessToTargetOrgs && targetUserOrgIds.length > 0) {
                        return res.status(403).json({
                            error: 'Permission denied',
                            message: 'Cannot modify users outside your organization scope',
                            code: 'ORGANIZATION_SCOPE_VIOLATION',
                        });
                    }
                    // For demo managers, validate demo role assignments
                    if (currentUser.role === 'demo_manager') {
                        // Check if target organizations are demo organizations
                        const targetOrgs = await db_1.db
                            .select()
                            .from(schema.organizations)
                            .where((0, drizzle_orm_1.inArray)(schema.organizations.id, targetUserOrgIds));
                        const hasNonDemoOrgs = targetOrgs.some(org => org.type !== 'demo');
                        if (hasNonDemoOrgs) {
                            return res.status(403).json({
                                error: 'Permission denied',
                                message: 'Demo managers cannot assign roles to users in non-demo organizations',
                                code: 'DEMO_SCOPE_VIOLATION',
                            });
                        }
                    }
                }
            }
            // Validate the update data (excluding password updates for security)
            const updateSchema = schema_1.insertUserSchema.partial().omit({ password: true });
            const validatedData = updateSchema.parse(req.body);
            const user = await storage_1.storage.updateUser(id, {
                ...validatedData,
                updatedAt: new Date(),
            });
            if (!user) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'User not found',
                });
            }
            // Clear relevant caches
            query_cache_1.queryCache.invalidate('users', 'all_users');
            query_cache_1.queryCache.invalidate('users', `user:${id}`);
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    error: 'Validation error',
                    message: 'Invalid user data',
                    details: error.issues,
                });
            }
            console.error('❌ Error updating user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update user',
            });
        }
    });
    /**
     * DELETE /api/users/:id - Deactivates a user (soft delete).
     */
    app.delete('/api/users/:id', async (req, res) => {
        try {
            const { id } = req.params;
            if (!id) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'User ID is required',
                });
            }
            // Soft delete by setting isActive to false
            const user = await storage_1.storage.updateUser(id, {
                isActive: false,
                updatedAt: new Date(),
            });
            if (!user) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'User not found',
                });
            }
            res.json({
                message: 'User deactivated successfully',
                id: user.id,
            });
        }
        catch (error) {
            console.error('❌ Error deactivating user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to deactivate user',
            });
        }
    });
    /**
     * GET /api/user-organizations - Get current user's organizations.
     */
    app.get('/api/user-organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const organizations = await storage_1.storage.getUserOrganizations(currentUser.id);
            res.json(organizations);
        }
        catch (error) {
            console.error('❌ Error getting user organizations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user organizations',
            });
        }
    });
    /**
     * GET /api/user-residences - Get current user's residences.
     */
    app.get('/api/user-residences', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const residences = await storage_1.storage.getUserResidences(currentUser.id);
            res.json(residences);
        }
        catch (error) {
            console.error('❌ Error getting user residences:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user residences',
            });
        }
    });
    /**
     * GET /api/admin/all-user-organizations - Get user-organization relationships (admin: all, manager: filtered by their orgs).
     */
    app.get('/api/admin/all-user-organizations', auth_1.requireAuth, async (req, res) => {
        console.log('🔍 [API] all-user-organizations endpoint called by user:', req.user?.email);
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can access user assignments
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to view user assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            let userOrganizations;
            if (currentUser.role === 'admin') {
                // Admin sees all user-organization relationships
                userOrganizations = await db_1.db
                    .select({
                    userId: schema.userOrganizations.userId,
                    organizationId: schema.userOrganizations.organizationId,
                    organizationRole: schema.userOrganizations.organizationRole,
                    isActive: schema.userOrganizations.isActive,
                })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true));
            }
            else {
                // Manager sees only relationships for their organizations
                const managerOrgs = await db_1.db
                    .select({ organizationId: schema.userOrganizations.organizationId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                userOrganizations = await db_1.db
                    .select({
                    userId: schema.userOrganizations.userId,
                    organizationId: schema.userOrganizations.organizationId,
                    organizationRole: schema.userOrganizations.organizationRole,
                    isActive: schema.userOrganizations.isActive,
                })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true), (0, drizzle_orm_1.inArray)(schema.userOrganizations.organizationId, orgIds)));
            }
            res.json(userOrganizations);
        }
        catch (error) {
            console.error('❌ Error getting all user organizations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user organizations',
            });
        }
    });
    /**
     * GET /api/admin/all-user-residences - Get user-residence relationships (admin: all, manager: filtered by their orgs).
     */
    app.get('/api/admin/all-user-residences', auth_1.requireAuth, async (req, res) => {
        console.log('🔍 [API] all-user-residences endpoint called by user:', req.user?.email);
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can access user assignments
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to view user assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            let userResidences;
            if (currentUser.role === 'admin') {
                // Admin sees all user-residence relationships
                userResidences = await db_1.db
                    .select({
                    userId: schema.userResidences.userId,
                    residenceId: schema.userResidences.residenceId,
                    relationshipType: schema.userResidences.relationshipType,
                    startDate: schema.userResidences.startDate,
                    endDate: schema.userResidences.endDate,
                    isActive: schema.userResidences.isActive,
                })
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.isActive, true));
            }
            else {
                // Manager sees only relationships for residences in their organizations
                const managerOrgs = await db_1.db
                    .select({ organizationId: schema.userOrganizations.organizationId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                // Get residences in manager's organizations
                const accessibleResidences = await db_1.db
                    .select({ residenceId: schema.residences.id })
                    .from(schema.residences)
                    .innerJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema.buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)));
                const residenceIds = accessibleResidences.map((res) => res.residenceId);
                if (residenceIds.length === 0) {
                    return res.json([]);
                }
                userResidences = await db_1.db
                    .select({
                    userId: schema.userResidences.userId,
                    residenceId: schema.userResidences.residenceId,
                    relationshipType: schema.userResidences.relationshipType,
                    startDate: schema.userResidences.startDate,
                    endDate: schema.userResidences.endDate,
                    isActive: schema.userResidences.isActive,
                })
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.isActive, true), (0, drizzle_orm_1.inArray)(schema.userResidences.residenceId, residenceIds)));
            }
            res.json(userResidences);
        }
        catch (error) {
            console.error('❌ Error getting all user residences:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user residences',
            });
        }
    });
    /**
     * GET /api/user/permissions - Retrieves the current user's permissions based on their role.
     * Protected endpoint that requires authentication.
     */
    app.get('/api/user/permissions', auth_1.requireAuth, async (req, res) => {
        try {
            // Get user role from session
            const userRole = req.user?.role;
            if (!userRole) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'User role not found in session',
                });
            }
            // Get permissions for the user's role from database
            const rolePermissions = await storage_1.storage.getRolePermissions();
            const userPermissions = rolePermissions
                .filter((rp) => rp.role === userRole)
                .map((rp) => rp.permission?.name)
                .filter(Boolean);
            // Create response with Zod validation
            const responseData = {
                role: userRole,
                permissions: userPermissions,
                permissionCount: userPermissions.length,
            };
            // Validate response with Zod schema
            const permissionsResponseSchema = zod_1.z.object({
                role: zod_1.z.enum(['admin', 'manager', 'tenant', 'resident']),
                permissions: zod_1.z.array(zod_1.z.string()),
                permissionCount: zod_1.z.number(),
            });
            const validatedResponse = permissionsResponseSchema.parse(responseData);
            res.json(validatedResponse);
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                return res.status(500).json({
                    error: 'Internal server error',
                    message: 'Failed to validate permissions response',
                    details: error.issues,
                });
            }
            console.error('❌ Error fetching user permissions:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user permissions',
            });
        }
    });
    /**
     * PUT /api/users/:id/organizations - Updates user's organization assignments.
     * Admin: can assign/remove any organization
     * Manager: cannot modify organization assignments.
     */
    app.put('/api/users/:id/organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { organizationIds } = req.body;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins can modify organization assignments
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Only administrators can modify organization assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            if (!userId || !Array.isArray(organizationIds)) {
                return res.status(400).json({
                    message: 'User ID and organization IDs array are required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Verify user exists
            const user = await storage_1.storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // Remove existing organization assignments
            await db_1.db.delete(schema.userOrganizations).where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, userId));
            // Add new organization assignments
            if (organizationIds.length > 0) {
                const newAssignments = organizationIds.map((orgId) => ({
                    userId,
                    organizationId: orgId,
                    organizationRole: user.role,
                    isActive: true,
                }));
                await db_1.db.insert(schema.userOrganizations).values(newAssignments);
            }
            res.json({
                message: 'Organization assignments updated successfully',
                userId,
                organizationIds,
            });
        }
        catch (error) {
            console.error('❌ Error updating organization assignments:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update organization assignments',
            });
        }
    });
    /**
     * PUT /api/users/:id/buildings - Updates user's building assignments.
     * Admin and Manager: can assign/remove buildings they have access to
     */
    app.put('/api/users/:id/buildings', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { buildingIds } = req.body;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can modify building assignments
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Only administrators and managers can modify building assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            if (!userId || !Array.isArray(buildingIds)) {
                return res.status(400).json({
                    message: 'User ID and building IDs array are required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Verify user exists
            const user = await storage_1.storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // For now, we'll create user-residence relationships for each building
            // This is a simplified approach - in a real system you'd have user-building relationships
            // Get residences for the selected buildings
            const residences = await db_1.db
                .select()
                .from(schema.residences)
                .where((0, drizzle_orm_1.inArray)(schema.residences.buildingId, buildingIds));
            // Remove existing residence assignments for this user
            await db_1.db.delete(schema.userResidences).where((0, drizzle_orm_1.eq)(schema.userResidences.userId, userId));
            // Add new residence assignments (one per building - taking the first residence)
            if (residences.length > 0) {
                const buildingToResidence = new Map();
                residences.forEach(residence => {
                    if (!buildingToResidence.has(residence.buildingId)) {
                        buildingToResidence.set(residence.buildingId, residence);
                    }
                });
                const newAssignments = Array.from(buildingToResidence.values()).map((residence) => ({
                    userId,
                    residenceId: residence.id,
                    relationshipType: user.role === 'manager' ? 'manager' : 'tenant',
                    startDate: new Date().toISOString().split('T')[0],
                    isActive: true,
                }));
                await db_1.db.insert(schema.userResidences).values(newAssignments);
            }
            res.json({
                message: 'Building assignments updated successfully',
                userId,
                buildingIds,
            });
        }
        catch (error) {
            console.error('❌ Error updating building assignments:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update building assignments',
            });
        }
    });
    /**
     * GET /api/users/:id/residences - Get user's accessible residences.
     */
    app.get('/api/users/:id/residences', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Users can only access their own residences unless they're admin/manager
            if (currentUser.id !== userId && !['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Get full residence details with building information
            const residencesWithDetails = await storage_1.storage.getUserResidencesWithDetails(userId);
            // Transform the data to match the expected frontend format
            const residences = residencesWithDetails.map(item => ({
                id: item.residence.id,
                unitNumber: item.residence.unitNumber,
                floor: item.residence.floor,
                squareFootage: item.residence.squareFootage,
                bedrooms: item.residence.bedrooms,
                bathrooms: item.residence.bathrooms,
                balcony: item.residence.balcony,
                parkingSpaceNumbers: item.residence.parkingSpaceNumbers,
                storageSpaceNumbers: item.residence.storageSpaceNumbers,
                isActive: item.residence.isActive,
                buildingId: item.residence.buildingId,
                building: {
                    id: item.building.id,
                    name: item.building.name,
                    address: item.building.address,
                    city: item.building.city,
                    province: item.building.province,
                    postalCode: item.building.postalCode,
                },
            }));
            res.json(residences);
        }
        catch (error) {
            console.error('❌ Error getting user residences:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user residences',
            });
        }
    });
    /**
     * GET /api/users/:id/buildings - Get user's accessible buildings based on their residences.
     */
    app.get('/api/users/:id/buildings', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Users can only access their own buildings unless they're admin/manager
            if (currentUser.id !== userId && !['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Get user's residences with building information
            const userResidences = await db_1.db
                .select({
                residenceId: schema.userResidences.residenceId,
                buildingId: schema.residences.buildingId,
            })
                .from(schema.userResidences)
                .innerJoin(schema.residences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, userId), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)));
            if (!userResidences || userResidences.length === 0) {
                return res.json({ buildings: [] });
            }
            // Get unique building IDs from user's residences
            const buildingIds = [...new Set(userResidences.map(ur => ur.buildingId).filter(Boolean))];
            if (buildingIds.length === 0) {
                return res.json({ buildings: [] });
            }
            // Fetch building details with stats using the existing logic from /api/manager/buildings
            const buildingDetails = await db_1.db
                .select({
                id: schema.buildings.id,
                name: schema.buildings.name,
                address: schema.buildings.address,
                city: schema.buildings.city,
                province: schema.buildings.province,
                postalCode: schema.buildings.postalCode,
                buildingType: schema.buildings.buildingType,
                yearBuilt: schema.buildings.yearBuilt,
                totalFloors: schema.buildings.totalFloors,
                parkingSpaces: schema.buildings.parkingSpaces,
                storageSpaces: schema.buildings.storageSpaces,
                managementCompany: schema.buildings.managementCompany,
                amenities: schema.buildings.amenities,
                organizationId: schema.buildings.organizationId,
                organizationName: schema.organizations.name,
                organizationType: schema.organizations.type,
            })
                .from(schema.buildings)
                .leftJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.buildings.organizationId, schema.organizations.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema.buildings.id, buildingIds), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true)));
            // Calculate stats for each building
            const buildingsWithStats = await Promise.all(buildingDetails.map(async (building) => {
                const [totalUnits, occupiedUnits] = await Promise.all([
                    db_1.db
                        .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                        .from(schema.residences)
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.residences.buildingId, building.id), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)))
                        .then(result => result[0]?.count || 0),
                    db_1.db
                        .select({ count: (0, drizzle_orm_1.sql) `count(distinct ${schema.residences.id})` })
                        .from(schema.residences)
                        .leftJoin(schema.userResidences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.residences.buildingId, building.id), (0, drizzle_orm_1.eq)(schema.residences.isActive, true), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true)))
                        .then(result => result[0]?.count || 0),
                ]);
                const vacantUnits = totalUnits - occupiedUnits;
                const occupancyRate = totalUnits > 0 ? (occupiedUnits / totalUnits) * 100 : 0;
                return {
                    ...building,
                    totalUnits,
                    occupiedUnits,
                    vacantUnits,
                    occupancyRate,
                };
            }));
            res.json({ buildings: buildingsWithStats });
        }
        catch (error) {
            console.error('❌ Error getting user buildings:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user buildings',
            });
        }
    });
    /**
     * PUT /api/users/:id/residences - Updates user's residence assignments.
     * Admin: can assign/remove any residence
     * Manager: can assign/remove residences within their organizations only.
     */
    app.put('/api/users/:id/residences', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { residenceAssignments } = req.body; // Array of { residenceId, relationshipType, startDate, endDate }
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can modify residence assignments
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to modify residence assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            if (!userId || !Array.isArray(residenceAssignments)) {
                return res.status(400).json({
                    message: 'User ID and residence assignments array are required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Verify user exists
            const user = await storage_1.storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // For managers, verify they can access all requested residences
            if (currentUser.role === 'manager') {
                for (const assignment of residenceAssignments) {
                    // Get the building for this residence
                    const residence = await db_1.db
                        .select({ buildingId: schema.residences.buildingId })
                        .from(schema.residences)
                        .where((0, drizzle_orm_1.eq)(schema.residences.id, assignment.residenceId))
                        .limit(1);
                    if (residence.length === 0) {
                        return res.status(404).json({
                            message: `Residence ${assignment.residenceId} not found`,
                            code: 'RESIDENCE_NOT_FOUND',
                        });
                    }
                    // Check if manager has access to this building
                    // Get buildings accessible to this manager through their organizations
                    const managerOrgs = await db_1.db
                        .select({ organizationId: schema.userOrganizations.organizationId })
                        .from(schema.userOrganizations)
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                    const orgIds = managerOrgs.map((org) => org.organizationId);
                    const accessibleBuildings = orgIds.length > 0
                        ? await db_1.db
                            .select({ id: schema.buildings.id })
                            .from(schema.buildings)
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema.buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true)))
                        : [];
                    const hasAccess = accessibleBuildings.some((b) => b.id === residence[0].buildingId);
                    if (!hasAccess) {
                        return res.status(403).json({
                            message: `Insufficient permissions for residence ${assignment.residenceId}`,
                            code: 'INSUFFICIENT_PERMISSIONS',
                        });
                    }
                }
            }
            // Remove existing residence assignments
            await db_1.db.delete(schema.userResidences).where((0, drizzle_orm_1.eq)(schema.userResidences.userId, userId));
            // Add new residence assignments
            if (residenceAssignments.length > 0) {
                const newAssignments = residenceAssignments.map((assignment) => ({
                    userId,
                    residenceId: assignment.residenceId,
                    relationshipType: assignment.relationshipType || 'tenant',
                    startDate: assignment.startDate || new Date().toISOString().split('T')[0],
                    endDate: assignment.endDate || null,
                    isActive: true,
                }));
                await db_1.db.insert(schema.userResidences).values(newAssignments);
            }
            res.json({
                message: 'Residence assignments updated successfully',
                userId,
                assignmentCount: residenceAssignments.length,
            });
        }
        catch (error) {
            console.error('❌ Error updating residence assignments:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update residence assignments',
            });
        }
    });
    /**
     * GET /api/users/me/organizations - Get organizations accessible to current user.
     * Used by invite form to populate organization dropdown.
     */
    app.get('/api/users/me/organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            console.log(`📊 Fetching user-accessible organizations for ${currentUser.email} (${currentUser.role})`);
            // Get organizations based on user role - same logic as /api/organizations
            let organizationsQuery;
            if (currentUser.role === 'admin') {
                // Admin can see all organizations
                organizationsQuery = db_1.db
                    .select({
                    id: schema.organizations.id,
                    name: schema.organizations.name,
                    type: schema.organizations.type,
                    address: schema.organizations.address,
                    city: schema.organizations.city,
                    province: schema.organizations.province,
                    postalCode: schema.organizations.postalCode,
                    phone: schema.organizations.phone,
                    email: schema.organizations.email,
                    website: schema.organizations.website,
                    registrationNumber: schema.organizations.registrationNumber,
                    isActive: schema.organizations.isActive,
                    createdAt: schema.organizations.createdAt,
                })
                    .from(schema.organizations)
                    .where((0, drizzle_orm_1.eq)(schema.organizations.isActive, true))
                    .orderBy(schema.organizations.name);
            }
            else {
                // Other users see organizations they have access to through user_organizations
                organizationsQuery = db_1.db
                    .select({
                    id: schema.organizations.id,
                    name: schema.organizations.name,
                    type: schema.organizations.type,
                    address: schema.organizations.address,
                    city: schema.organizations.city,
                    province: schema.organizations.province,
                    postalCode: schema.organizations.postalCode,
                    phone: schema.organizations.phone,
                    email: schema.organizations.email,
                    website: schema.organizations.website,
                    registrationNumber: schema.organizations.registrationNumber,
                    isActive: schema.organizations.isActive,
                    createdAt: schema.organizations.createdAt,
                })
                    .from(schema.organizations)
                    .innerJoin(schema.userOrganizations, (0, drizzle_orm_1.eq)(schema.organizations.id, schema.userOrganizations.organizationId))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.organizations.isActive, true), (0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)))
                    .orderBy(schema.organizations.name);
            }
            const accessibleOrganizations = await organizationsQuery;
            console.log(`✅ Found ${accessibleOrganizations.length} organizations for user ${currentUser.id}`);
            // Return array directly (not wrapped in object) - same format as /api/organizations
            res.json(accessibleOrganizations);
        }
        catch (error) {
            console.error('❌ Error fetching user organizations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user organizations',
            });
        }
    });
    /**
     * GET /api/users/me/data-export - Download user data for Law 25 compliance.
     */
    app.get('/api/users/me/data-export', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Get all user data for export
            const userData = await storage_1.storage.getUser(currentUser.id);
            if (!userData) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // Remove sensitive fields
            const { password, ...userDataExport } = userData;
            // Get related data
            const [organizations, residences, bills, documents, notifications, maintenanceRequests] = await Promise.all([
                db_1.db
                    .select()
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.bills)
                    .innerJoin(schema.userResidences, (0, drizzle_orm_1.eq)(schema.bills.residenceId, schema.userResidences.residenceId))
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.documents)
                    .where((0, drizzle_orm_1.eq)(schema.documents.uploadedById, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.notifications)
                    .where((0, drizzle_orm_1.eq)(schema.notifications.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.maintenanceRequests)
                    .where((0, drizzle_orm_1.eq)(schema.maintenanceRequests.submittedBy, currentUser.id)),
            ]);
            const exportData = {
                personalInformation: userDataExport,
                organizations,
                residences,
                bills: bills.map((b) => b.bills),
                documents: documents,
                notifications,
                maintenanceRequests,
                exportDate: new Date().toISOString(),
                note: 'This export contains all personal data we have on file for you in compliance with Quebec Law 25.',
            };
            res.setHeader('Content-Type', 'application/json');
            res.setHeader('Content-Disposition', `attachment; filename="user-data-export-${currentUser.id}-${new Date().toISOString().split('T')[0]}.json"`);
            res.json(exportData);
        }
        catch (error) {
            console.error('❌ Error exporting user data:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to export user data',
            });
        }
    });
    /**
     * POST /api/users/me/delete-account - Complete account deletion for Law 25 compliance.
     */
    app.post('/api/users/me/delete-account', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const { confirmEmail, reason } = req.body;
            // Verify email confirmation
            if (confirmEmail !== currentUser.email) {
                return res.status(400).json({
                    message: 'Email confirmation does not match',
                    code: 'EMAIL_MISMATCH',
                });
            }
            // Delete all related data in the correct order to handle foreign key constraints
            await Promise.all([
                // Delete user relationships
                db_1.db
                    .delete(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id)),
                db_1.db.delete(schema.userResidences).where((0, drizzle_orm_1.eq)(schema.userResidences.userId, currentUser.id)),
                db_1.db
                    .delete(schema.documents)
                    .where((0, drizzle_orm_1.eq)(schema.documents.uploadedById, currentUser.id)),
                // Delete user-created content
                db_1.db.delete(schema.notifications).where((0, drizzle_orm_1.eq)(schema.notifications.userId, currentUser.id)),
                db_1.db
                    .delete(schema.maintenanceRequests)
                    .where((0, drizzle_orm_1.eq)(schema.maintenanceRequests.submittedBy, currentUser.id)),
                // Delete invitations
                db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.email, currentUser.email)),
            ]);
            // Finally, delete the user account
            await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, currentUser.id));
            // Log the deletion for audit purposes
            console.log(`User account deleted: ${currentUser.email} (${currentUser.id}). Reason: ${reason || 'Not provided'}`);
            // Clear session
            if (req.session) {
                req.session.destroy((err) => {
                    if (err) {
                        console.error('Failed to destroy session after account deletion:', err);
                    }
                });
            }
            res.json({
                message: 'Account successfully deleted. All personal data has been permanently removed from our systems.',
                deletionDate: new Date().toISOString(),
            });
        }
        catch (error) {
            console.error('❌ Error deleting account:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to delete account. Please contact support.',
            });
        }
    });
    /**
     * PUT /api/users/me - Update current user's profile.
     */
    app.put('/api/users/me', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate the update data (excluding password updates for security)
            const updateSchema = schema_1.insertUserSchema
                .partial()
                .omit({ password: true, id: true, role: true });
            const validatedData = updateSchema.parse(req.body);
            const user = await storage_1.storage.updateUser(currentUser.id, {
                ...validatedData,
                updatedAt: new Date(),
            });
            if (!user) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error('❌ Error updating user profile:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update profile',
            });
        }
    });
    /**
     * POST /api/users/:id/delete-account - RESTRICTED Admin endpoint to delete any user account.
     * SAFETY: Requires email confirmation and deletion reason for audit trail.
     * WARNING: This is a permanent operation that should only be used in exceptional cases.
     */
    app.post('/api/users/:id/delete-account', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: targetUserId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins can delete other users' accounts
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Only administrators can delete user accounts',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Additional safety check: Log this critical operation
            console.warn(`⚠️  CRITICAL: Admin ${currentUser.email} attempting to delete user ${targetUserId}`);
            if (!targetUserId) {
                return res.status(400).json({
                    message: 'User ID is required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Verify target user exists
            const targetUser = await storage_1.storage.getUser(targetUserId);
            if (!targetUser) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            const { confirmEmail, reason } = req.body;
            // Verify email confirmation
            if (confirmEmail !== targetUser.email) {
                return res.status(400).json({
                    message: 'Email confirmation does not match',
                    code: 'EMAIL_MISMATCH',
                });
            }
            // Delete all related data in the correct order to handle foreign key constraints
            const deletionPromises = [
                // Delete user relationships
                db_1.db
                    .delete(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, targetUserId)),
                db_1.db.delete(schema.userResidences).where((0, drizzle_orm_1.eq)(schema.userResidences.userId, targetUserId)),
                db_1.db
                    .delete(schema.documents)
                    .where((0, drizzle_orm_1.eq)(schema.documents.uploadedById, targetUserId)),
                // Delete invitations
                db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.email, targetUser.email)),
                // Delete demands and related comments (must be done before deleting user)
                db_1.db.delete(schema.demandComments).where((0, drizzle_orm_1.eq)(schema.demandComments.commenterId, targetUserId)),
                db_1.db.delete(schema.demands).where((0, drizzle_orm_1.eq)(schema.demands.submitterId, targetUserId)),
                // Delete bugs and feature requests submitted by the user
                db_1.db.delete(schema.bugs).where((0, drizzle_orm_1.eq)(schema.bugs.createdBy, targetUserId)),
                db_1.db.delete(schema.featureRequests).where((0, drizzle_orm_1.eq)(schema.featureRequests.createdBy, targetUserId)),
                db_1.db.delete(schema.featureRequestUpvotes).where((0, drizzle_orm_1.eq)(schema.featureRequestUpvotes.userId, targetUserId)),
            ];
            // Try to delete from optional tables that might not exist
            const optionalDeletions = [
                async () => {
                    try {
                        await db_1.db
                            .delete(schema.notifications)
                            .where((0, drizzle_orm_1.eq)(schema.notifications.userId, targetUserId));
                    }
                    catch (error) {
                        if (error.cause?.code === '42P01') {
                            console.log('Notifications table not found, skipping...');
                        }
                        else {
                            throw error;
                        }
                    }
                },
                async () => {
                    try {
                        await db_1.db
                            .delete(schema.maintenanceRequests)
                            .where((0, drizzle_orm_1.eq)(schema.maintenanceRequests.submittedBy, targetUserId));
                    }
                    catch (error) {
                        if (error.cause?.code === '42P01') {
                            console.log('Maintenance requests table not found, skipping...');
                        }
                        else {
                            throw error;
                        }
                    }
                },
            ];
            // Execute core deletions first
            await Promise.all(deletionPromises);
            // Execute optional deletions
            await Promise.all(optionalDeletions.map((fn) => fn()));
            // Finally, delete the user account
            await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, targetUserId));
            // Clear all caches to ensure the user list updates immediately
            query_cache_1.queryCache.invalidate('users', 'all_users');
            query_cache_1.queryCache.invalidate('users', `user:${targetUserId}`);
            query_cache_1.queryCache.invalidate('users', `user_email:${targetUser.email}`);
            // Log the deletion for audit purposes
            console.log(`User account deleted by admin ${currentUser.email} (${currentUser.id}): ${targetUser.email} (${targetUserId}). Reason: ${reason || 'Not provided'}`);
            res.json({
                message: 'User account and all associated data have been permanently deleted',
                deletedUserId: targetUserId,
                deletedUserEmail: targetUser.email,
            });
        }
        catch (error) {
            console.error('❌ Error deleting user account:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to delete user account',
            });
        }
    });
    /**
     * POST /api/users/me/change-password - Change current user's password.
     */
    app.post('/api/users/me/change-password', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const { currentPassword, newPassword } = req.body;
            if (!currentPassword || !newPassword) {
                return res.status(400).json({
                    message: 'Current password and new password are required',
                    code: 'INVALID_INPUT',
                });
            }
            // Verify current password
            const user = await storage_1.storage.getUser(currentUser.id);
            if (!user || !(await bcrypt.compare(currentPassword, user.password))) {
                return res.status(400).json({
                    message: 'Current password is incorrect',
                    code: 'INVALID_PASSWORD',
                });
            }
            // Hash new password
            const hashedPassword = await bcrypt.hash(newPassword, 12);
            // Update password
            await storage_1.storage.updateUser(currentUser.id, {
                password: hashedPassword,
                updatedAt: new Date(),
            });
            res.json({
                message: 'Password changed successfully',
            });
        }
        catch (error) {
            console.error('❌ Error changing password:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to change password',
            });
        }
    });
    /**
     * POST /api/users/demo - Creates a demo user directly without invitation
     */
    app.post('/api/users/demo', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can create demo users
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            const { firstName, lastName, role, organizationId, residenceId } = req.body;
            // Validate demo role
            if (!['demo_manager', 'demo_tenant', 'demo_resident'].includes(role)) {
                return res.status(400).json({
                    message: 'Invalid demo role',
                    code: 'INVALID_ROLE',
                });
            }
            // Validate required fields
            if (!firstName || !lastName || !organizationId) {
                return res.status(400).json({
                    message: 'First name, last name, and organization are required',
                    code: 'MISSING_REQUIRED_FIELDS',
                });
            }
            // Generate demo email
            const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@demo.com`;
            // Check if user already exists
            const existingUser = await storage_1.storage.getUserByEmail(email);
            if (existingUser) {
                return res.status(400).json({
                    message: 'Demo user with this name already exists',
                    code: 'USER_EXISTS',
                });
            }
            // Create demo user with secure random password
            const randomPassword = (0, crypto_1.randomBytes)(12).toString('base64');
            const hashedPassword = await bcrypt.hash(`Demo${randomPassword}!`, 12);
            const userData = {
                firstName: (0, input_sanitization_1.sanitizeName)(firstName),
                lastName: (0, input_sanitization_1.sanitizeName)(lastName),
                email: (0, input_sanitization_1.normalizeEmail)(email),
                username: (0, input_sanitization_1.generateUsernameFromEmail)(email),
                password: hashedPassword,
                language: 'fr', // Default to French for Quebec
                role: role,
                isActive: true,
            };
            const newUser = await storage_1.storage.createUser(userData);
            // Log the user creation
            (0, user_creation_logger_1.logUserCreation)({
                userId: newUser.id,
                email: newUser.email,
                method: 'direct',
                role,
                success: true,
                timestamp: new Date(),
            });
            // Clear cache
            query_cache_1.queryCache.invalidate('users', 'all_users');
            res.status(201).json({
                message: 'Demo user created successfully',
                user: {
                    id: newUser.id,
                    firstName: newUser.firstName,
                    lastName: newUser.lastName,
                    email: newUser.email,
                    role: newUser.role,
                },
            });
        }
        catch (error) {
            console.error('❌ Error creating demo user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create demo user',
            });
        }
    });
    /**
     * POST /api/invitations - Creates a new invitation
     */
    app.post('/api/invitations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can send invitations
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            const { organizationId, residenceId, email, role, invitedByUserId, expiresAt, personalMessage, } = req.body;
            // Validate required fields first
            if (!organizationId || !email || !role || !expiresAt) {
                return res.status(400).json({
                    message: 'Organization, email, role, and expiry date are required',
                    code: 'MISSING_REQUIRED_FIELDS',
                });
            }
            // Then validate email format
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                return res.status(400).json({
                    message: 'Invalid email format',
                    code: 'INVALID_EMAIL',
                });
            }
            // Validate role permissions
            if (currentUser.role === 'manager') {
                // Check if manager is trying to invite admin
                if (role === 'admin') {
                    return res.status(403).json({
                        message: 'Managers can only invite resident, tenant, and manager roles',
                        code: 'ROLE_PERMISSION_DENIED',
                    });
                }
                // Get the demo organization to check if it's a demo org
                const targetOrg = await db_1.db
                    .select()
                    .from(schema.organizations)
                    .where((0, drizzle_orm_1.eq)(schema.organizations.id, organizationId))
                    .limit(1);
                if (targetOrg.length > 0 && targetOrg[0].type === 'Demo') {
                    // For demo organizations, allow normal roles (resident, tenant, manager)
                    if (!['resident', 'tenant', 'manager'].includes(role)) {
                        return res.status(403).json({
                            message: 'Invalid role for demo organization',
                            code: 'INVALID_DEMO_ROLE',
                        });
                    }
                }
                else {
                    // For regular organizations, managers can invite resident, tenant, manager
                    if (!['resident', 'tenant', 'manager'].includes(role)) {
                        return res.status(403).json({
                            message: 'Managers can only invite resident, tenant, and manager roles',
                            code: 'ROLE_PERMISSION_DENIED',
                        });
                    }
                }
            }
            // Check if user already exists
            const existingUser = await storage_1.storage.getUserByEmail(email);
            if (existingUser) {
                return res.status(400).json({
                    message: 'User with this email already exists',
                    code: 'USER_EXISTS',
                });
            }
            // Check for existing pending invitations for the same email and organization
            // If found, delete them to replace with new invitation
            const existingInvitations = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitations.email, email), (0, drizzle_orm_1.eq)(schema.invitations.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema.invitations.status, 'pending')));
            if (existingInvitations.length > 0) {
                console.log(`🔄 Replacing ${existingInvitations.length} existing invitation(s) for email: ${email}`);
                // Delete existing pending invitations for this email/organization
                await db_1.db
                    .delete(schema.invitations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitations.email, email), (0, drizzle_orm_1.eq)(schema.invitations.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema.invitations.status, 'pending')));
            }
            // Generate secure invitation token
            const token = (0, crypto_1.randomBytes)(32).toString('hex');
            const tokenHash = (0, crypto_1.createHash)('sha256').update(token).digest('hex');
            // Create invitation record
            const invitationData = {
                organizationId,
                residenceId: residenceId || null,
                email,
                token,
                tokenHash,
                role: role,
                invitedByUserId: currentUser.id,
                expiresAt: new Date(expiresAt),
                personalMessage: personalMessage || null,
            };
            const [newInvitation] = await db_1.db
                .insert(schema.invitations)
                .values(invitationData)
                .returning();
            // Get organization details for email
            const [organization] = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, organizationId))
                .limit(1);
            // Send invitation email
            const recipientName = email.split('@')[0]; // Use email prefix as name
            const organizationName = organization?.name || 'Koveo Gestion';
            const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ''}`.trim();
            const emailSent = await email_service_1.emailService.sendInvitationEmail(email, recipientName, token, // Use the unhashed token for the email URL
            organizationName, inviterName, new Date(expiresAt), 'fr', // Default to French for Quebec
            personalMessage);
            // Log invitation creation
            console.log('✅ Invitation created:', {
                id: newInvitation.id,
                email,
                role,
                organizationId,
                invitedBy: currentUser.email,
                emailSent,
            });
            // For tests, we'll treat email failure as success since tests may not have email configured
            if (!emailSent && process.env.NODE_ENV !== 'test') {
                // If email failed but invitation was created, log the issue
                console.error('⚠️ Invitation created but email failed to send');
                return res.status(207).json({
                    message: 'Invitation created but email failed to send',
                    invitationId: newInvitation.id,
                    emailSent: false,
                });
            }
            res.status(201).json({
                message: 'Invitation sent successfully',
                invitationId: newInvitation.id,
                emailSent: true,
            });
        }
        catch (error) {
            console.error('❌ Error creating invitation:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create invitation',
            });
        }
    });
    /**
     * GET /api/invitations - Gets all invitations (admin/manager only)
     */
    app.get('/api/invitations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can view invitations
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            let invitations;
            if (currentUser.role === 'admin') {
                // Admin can see all invitations
                invitations = await db_1.db
                    .select()
                    .from(schema.invitations)
                    .orderBy(schema.invitations.createdAt);
            }
            else {
                // Managers can only see invitations they sent
                invitations = await db_1.db
                    .select()
                    .from(schema.invitations)
                    .where((0, drizzle_orm_1.eq)(schema.invitations.invitedByUserId, currentUser.id))
                    .orderBy(schema.invitations.createdAt);
            }
            res.json(invitations);
        }
        catch (error) {
            console.error('❌ Error fetching invitations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch invitations',
            });
        }
    });
    /**
     * POST /api/invitations/validate - Validates an invitation token
     * Public endpoint for invitation validation during registration
     */
    app.post('/api/invitations/validate', async (req, res) => {
        try {
            const { token } = req.body;
            if (!token) {
                return res.status(400).json({
                    isValid: false,
                    message: 'Token is required',
                    code: 'TOKEN_REQUIRED',
                });
            }
            // Get invitation by token
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.token, token))
                .limit(1);
            if (!invitation) {
                return res.status(404).json({
                    isValid: false,
                    message: 'Invitation not found or invalid token',
                    code: 'INVITATION_NOT_FOUND',
                });
            }
            // Check if invitation is expired
            const now = new Date();
            const expiresAt = new Date(invitation.expiresAt);
            if (now > expiresAt) {
                return res.status(400).json({
                    isValid: false,
                    message: 'Invitation has expired',
                    code: 'INVITATION_EXPIRED',
                });
            }
            // Check if invitation is already used
            if (invitation.status === 'accepted') {
                return res.status(400).json({
                    isValid: false,
                    message: 'Invitation has already been used',
                    code: 'INVITATION_ALREADY_USED',
                });
            }
            // Get organization information
            const [organization] = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, invitation.organizationId))
                .limit(1);
            // Get inviter information
            const [inviter] = await db_1.db
                .select({
                id: schema.users.id,
                firstName: schema.users.firstName,
                lastName: schema.users.lastName,
                email: schema.users.email,
            })
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.id, invitation.invitedByUserId))
                .limit(1);
            // Return successful validation
            res.json({
                isValid: true,
                invitation: {
                    id: invitation.id,
                    email: invitation.email,
                    role: invitation.role,
                    expiresAt: invitation.expiresAt,
                    createdAt: invitation.createdAt,
                },
                organizationName: organization?.name || 'Unknown Organization',
                inviterName: inviter ? `${inviter.firstName} ${inviter.lastName}`.trim() : 'Unknown User',
            });
        }
        catch (error) {
            console.error('❌ Error validating invitation:', error);
            res.status(500).json({
                isValid: false,
                message: 'Internal server error during validation',
                code: 'VALIDATION_ERROR',
            });
        }
    });
    /**
     * POST /api/invitations/accept/:token - Accept an invitation and create user account
     * Public endpoint for completing registration via invitation
     */
    app.post('/api/invitations/accept/:token', async (req, res) => {
        try {
            const { token } = req.params;
            const { firstName, lastName, password, phone, language, dataCollectionConsent, marketingConsent, analyticsConsent, thirdPartyConsent, acknowledgedRights, } = req.body;
            if (!token) {
                return res.status(400).json({
                    message: 'Token is required',
                    code: 'TOKEN_REQUIRED',
                });
            }
            // Get invitation by token
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.token, token))
                .limit(1);
            if (!invitation) {
                return res.status(404).json({
                    message: 'Invitation not found or invalid token',
                    code: 'INVITATION_NOT_FOUND',
                });
            }
            // Check if invitation is expired
            const now = new Date();
            const expiresAt = new Date(invitation.expiresAt);
            if (now > expiresAt) {
                return res.status(400).json({
                    message: 'Invitation has expired',
                    code: 'INVITATION_EXPIRED',
                });
            }
            // Check if invitation is already used
            if (invitation.status === 'accepted') {
                return res.status(400).json({
                    message: 'Invitation has already been used',
                    code: 'INVITATION_ALREADY_USED',
                });
            }
            // Validate required fields
            if (!firstName || !lastName || !password) {
                return res.status(400).json({
                    message: 'First name, last name, and password are required',
                    code: 'MISSING_REQUIRED_FIELDS',
                });
            }
            // Validate required consents
            if (!dataCollectionConsent || !acknowledgedRights) {
                return res.status(400).json({
                    message: 'Required privacy consents must be given',
                    code: 'MISSING_REQUIRED_CONSENTS',
                });
            }
            // Hash password
            const hashedPassword = await bcrypt.hash(password, 12);
            // Create user account
            const userData = {
                firstName: (0, input_sanitization_1.sanitizeName)(firstName),
                lastName: (0, input_sanitization_1.sanitizeName)(lastName),
                email: (0, input_sanitization_1.normalizeEmail)(invitation.email),
                username: (0, input_sanitization_1.generateUsernameFromEmail)(invitation.email),
                password: hashedPassword,
                phone: phone ? (0, input_sanitization_1.sanitizeString)(phone) : '',
                language: language || 'fr',
                role: invitation.role,
                isActive: true,
                organizationId: invitation.organizationId,
            };
            const newUser = await storage_1.storage.createUser(userData);
            // Create organization assignment if organizationId is provided
            if (invitation.organizationId) {
                await db_1.db.insert(schema.userOrganizations).values({
                    userId: newUser.id,
                    organizationId: invitation.organizationId,
                    organizationRole: invitation.role,
                    isActive: true,
                });
                console.log('✅ User assigned to organization:', {
                    userId: newUser.id,
                    organizationId: invitation.organizationId,
                    role: invitation.role,
                });
            }
            // Create residence assignment if residenceId is provided
            if (invitation.residenceId) {
                await db_1.db.insert(schema.userResidences).values({
                    userId: newUser.id,
                    residenceId: invitation.residenceId,
                    relationshipType: invitation.role === 'tenant' ? 'tenant' : 'occupant',
                    startDate: new Date(),
                    isActive: true,
                });
                console.log('✅ User assigned to residence:', {
                    userId: newUser.id,
                    residenceId: invitation.residenceId,
                    relationshipType: invitation.role === 'tenant' ? 'tenant' : 'occupant',
                });
            }
            // Mark invitation as accepted
            await db_1.db
                .update(schema.invitations)
                .set({
                status: 'accepted',
                acceptedAt: new Date(),
                acceptedBy: newUser.id,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, invitation.id));
            // Log user creation
            (0, user_creation_logger_1.logUserCreation)({
                userId: newUser.id,
                email: newUser.email,
                method: 'invitation',
                role: invitation.role,
                success: true,
                timestamp: new Date(),
            });
            // Clear cache
            query_cache_1.queryCache.invalidate('users', 'all_users');
            query_cache_1.queryCache.invalidate('invitations');
            console.log('✅ User created via invitation acceptance:', {
                userId: newUser.id,
                email: newUser.email,
                role: newUser.role,
                organizationId: invitation.organizationId,
                residenceId: invitation.residenceId,
                assignedToOrganization: !!invitation.organizationId,
                assignedToResidence: !!invitation.residenceId,
            });
            res.status(201).json({
                message: 'Account created successfully',
                user: {
                    id: newUser.id,
                    firstName: newUser.firstName,
                    lastName: newUser.lastName,
                    email: newUser.email,
                    role: newUser.role,
                    language: newUser.language,
                },
            });
        }
        catch (error) {
            console.error('❌ Error accepting invitation:', error);
            res.status(500).json({
                message: 'Internal server error during account creation',
                code: 'INVITATION_ACCEPT_ERROR',
            });
        }
    });
    /**
     * POST /api/invitations/:id/resend - Resends an invitation
     */
    app.post('/api/invitations/:id/resend', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const { id } = req.params;
            // Get invitation
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, id))
                .limit(1);
            if (!invitation) {
                return res.status(404).json({
                    message: 'Invitation not found',
                    code: 'INVITATION_NOT_FOUND',
                });
            }
            // Check permissions
            if (currentUser.role !== 'admin' && invitation.invitedByUserId !== currentUser.id) {
                return res.status(403).json({
                    message: 'Can only resend your own invitations',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Update invitation with new expiry
            const newExpiresAt = new Date();
            newExpiresAt.setDate(newExpiresAt.getDate() + 7); // Extend by 7 days
            await db_1.db
                .update(schema.invitations)
                .set({
                expiresAt: newExpiresAt,
                status: 'pending',
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, id));
            // Get organization details for email
            const [organization] = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, invitation.organizationId))
                .limit(1);
            // Send invitation email again
            const recipientName = invitation.email.split('@')[0]; // Use email prefix as name
            const organizationName = organization?.name || 'Koveo Gestion';
            const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ''}`.trim();
            const emailSent = await email_service_1.emailService.sendInvitationEmail(invitation.email, recipientName, invitation.token, // Use the existing token
            organizationName, inviterName, newExpiresAt, 'fr', // Default to French for Quebec
            invitation.personalMessage);
            console.log('✅ Invitation resent:', {
                id,
                email: invitation.email,
                newExpiresAt,
                emailSent,
            });
            if (!emailSent) {
                console.error('⚠️ Invitation updated but email failed to resend');
                return res.status(207).json({
                    message: 'Invitation updated but email failed to resend',
                    emailSent: false,
                });
            }
            res.json({
                message: 'Invitation resent successfully',
                emailSent: true,
            });
        }
        catch (error) {
            console.error('❌ Error resending invitation:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to resend invitation',
            });
        }
    });
    /**
     * GET /api/invitations/pending - Get pending invitations with role-based filtering.
     * Admin: can see all pending invitations
     * Manager: can only see pending invitations in their organizations
     */
    app.get('/api/invitations/pending', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can view invitations
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to view invitations',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            let invitationsQuery;
            if (currentUser.role === 'admin') {
                // Admin sees all pending invitations
                invitationsQuery = db_1.db
                    .select({
                    id: schema.invitations.id,
                    email: schema.invitations.email,
                    role: schema.invitations.role,
                    status: schema.invitations.status,
                    expiresAt: schema.invitations.expiresAt,
                    createdAt: schema.invitations.createdAt,
                    organizationId: schema.invitations.organizationId,
                    buildingId: schema.invitations.buildingId,
                    residenceId: schema.invitations.residenceId,
                    organizationName: schema.organizations.name,
                    buildingName: (0, drizzle_orm_1.sql) `buildings.name`,
                    residenceUnitNumber: (0, drizzle_orm_1.sql) `residences.unit_number`,
                    invitedByName: (0, drizzle_orm_1.sql) `CONCAT(users.first_name, ' ', users.last_name)`,
                })
                    .from(schema.invitations)
                    .leftJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.invitations.organizationId, schema.organizations.id))
                    .leftJoin((0, drizzle_orm_1.sql) `buildings`, (0, drizzle_orm_1.sql) `invitations.building_id = buildings.id`)
                    .leftJoin((0, drizzle_orm_1.sql) `residences`, (0, drizzle_orm_1.sql) `invitations.residence_id = residences.id`)
                    .leftJoin(schema.users, (0, drizzle_orm_1.eq)(schema.invitations.invitedByUserId, schema.users.id))
                    .where((0, drizzle_orm_1.eq)(schema.invitations.status, 'pending'));
            }
            else {
                // Manager sees only invitations for their organizations
                const managerOrgs = await db_1.db
                    .select({ organizationId: schema.userOrganizations.organizationId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                invitationsQuery = db_1.db
                    .select({
                    id: schema.invitations.id,
                    email: schema.invitations.email,
                    role: schema.invitations.role,
                    status: schema.invitations.status,
                    expiresAt: schema.invitations.expiresAt,
                    createdAt: schema.invitations.createdAt,
                    organizationId: schema.invitations.organizationId,
                    buildingId: schema.invitations.buildingId,
                    residenceId: schema.invitations.residenceId,
                    organizationName: schema.organizations.name,
                    buildingName: (0, drizzle_orm_1.sql) `buildings.name`,
                    residenceUnitNumber: (0, drizzle_orm_1.sql) `residences.unit_number`,
                    invitedByName: (0, drizzle_orm_1.sql) `CONCAT(users.first_name, ' ', users.last_name)`,
                })
                    .from(schema.invitations)
                    .leftJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.invitations.organizationId, schema.organizations.id))
                    .leftJoin((0, drizzle_orm_1.sql) `buildings`, (0, drizzle_orm_1.sql) `invitations.building_id = buildings.id`)
                    .leftJoin((0, drizzle_orm_1.sql) `residences`, (0, drizzle_orm_1.sql) `invitations.residence_id = residences.id`)
                    .leftJoin(schema.users, (0, drizzle_orm_1.eq)(schema.invitations.invitedByUserId, schema.users.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitations.status, 'pending'), (0, drizzle_orm_1.inArray)(schema.invitations.organizationId, orgIds)));
            }
            const invitations = await invitationsQuery;
            res.json(invitations);
        }
        catch (error) {
            console.error('❌ Error fetching pending invitations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch pending invitations',
            });
        }
    });
    /**
     * DELETE /api/invitations/:id - Delete a pending invitation.
     * Admin: can delete any invitation
     * Manager: can only delete invitations from their organizations
     */
    app.delete('/api/invitations/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: invitationId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can delete invitations
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to delete invitations',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            if (!invitationId) {
                return res.status(400).json({
                    message: 'Invitation ID is required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Get the invitation to check permissions
            const invitation = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, invitationId))
                .limit(1);
            if (invitation.length === 0) {
                return res.status(404).json({
                    message: 'Invitation not found',
                    code: 'INVITATION_NOT_FOUND',
                });
            }
            const invitationData = invitation[0];
            // Check if manager has permission to delete this invitation
            if (currentUser.role === 'manager') {
                const managerOrgs = await db_1.db
                    .select({ organizationId: schema.userOrganizations.organizationId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (!invitationData.organizationId || !orgIds.includes(invitationData.organizationId)) {
                    return res.status(403).json({
                        message: 'You can only delete invitations from your organizations',
                        code: 'INSUFFICIENT_PERMISSIONS',
                    });
                }
            }
            // Delete the invitation
            await db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.id, invitationId));
            res.json({
                message: 'Invitation deleted successfully',
                invitationId,
            });
        }
        catch (error) {
            console.error('❌ Error deleting invitation:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to delete invitation',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3JELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNuQixLQUFLLEVBQUUsdUJBQXVCO2dCQUM5QixPQUFPLEVBQUUsNkJBQTZCO2FBQ3ZDLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvYXBpL3VzZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRXhwcmVzcyB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gJy4uL3N0b3JhZ2UnO1xuaW1wb3J0IHsgaW5zZXJ0VXNlclNjaGVtYSwgdHlwZSBVc2VyLCB0eXBlIEluc2VydFVzZXIgfSBmcm9tICdAc2hhcmVkL3NjaGVtYSc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IHJlcXVpcmVBdXRoIH0gZnJvbSAnLi4vYXV0aCc7XG5pbXBvcnQgeyBjcmVhdGVIYXNoLCByYW5kb21CeXRlcyB9IGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgKiBhcyBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xuLy8gRGF0YWJhc2UtYmFzZWQgcGVybWlzc2lvbnMgLSBubyBjb25maWcgaW1wb3J0cyBuZWVkZWRcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vZGInO1xuaW1wb3J0ICogYXMgc2NoZW1hIGZyb20gJy4uLy4uL3NoYXJlZC9zY2hlbWEnO1xuaW1wb3J0IHsgZXEsIGFuZCwgaW5BcnJheSwgc3FsLCBsdCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcbmltcG9ydCB7XG4gIHNhbml0aXplU3RyaW5nLFxuICBzYW5pdGl6ZU5hbWUsXG4gIG5vcm1hbGl6ZUVtYWlsLFxuICB2YWxpZGF0ZVBhc3N3b3JkU3RyZW5ndGgsXG4gIGdlbmVyYXRlVXNlcm5hbWVGcm9tRW1haWwsXG59IGZyb20gJy4uL3V0aWxzL2lucHV0LXNhbml0aXphdGlvbic7XG5pbXBvcnQgeyBsb2dVc2VyQ3JlYXRpb24gfSBmcm9tICcuLi91dGlscy91c2VyLWNyZWF0aW9uLWxvZ2dlcic7XG5pbXBvcnQgeyBxdWVyeUNhY2hlIH0gZnJvbSAnLi4vcXVlcnktY2FjaGUnO1xuaW1wb3J0IHsgZW1haWxTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZW1haWwtc2VydmljZSc7XG5cbi8qKlxuICogUmVnaXN0ZXJzIGFsbCB1c2VyLXJlbGF0ZWQgQVBJIGVuZHBvaW50cy5cbiAqXG4gKiBAcGFyYW0gYXBwIC0gRXhwcmVzcyBhcHBsaWNhdGlvbiBpbnN0YW5jZS5cbiAqL1xuLyoqXG4gKiBSZWdpc3RlclVzZXJSb3V0ZXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0gYXBwXG4gKiBAcmV0dXJucyBGdW5jdGlvbiByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclVzZXJSb3V0ZXMoYXBwOiBFeHByZXNzKTogdm9pZCB7XG4gIC8qKlxuICAgKiBHRVQgL2FwaS91c2VycyAtIFJldHJpZXZlcyB1c2VycyB3aXRoIHRoZWlyIGFzc2lnbm1lbnRzIGJhc2VkIG9uIGN1cnJlbnQgdXNlcidzIHJvbGUgYW5kIG9yZ2FuaXphdGlvbnMuXG4gICAqL1xuICBhcHAuZ2V0KCcvYXBpL3VzZXJzJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gcmVxLnVzZXIgfHwgcmVxLnNlc3Npb24/LnVzZXI7XG4gICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnQVVUSF9SRVFVSVJFRCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG5cbiAgICAgIC8vIEdldCB1c2VycyB3aXRoIHRoZWlyIGZ1bGwgYXNzaWdubWVudCBkYXRhXG4gICAgICBjb25zdCB1c2Vyc1dpdGhBc3NpZ25tZW50cyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlcnNXaXRoQXNzaWdubWVudHMoKTtcblxuICAgICAgXG5cbiAgICAgIC8vIEZpbHRlciB1c2VycyBiYXNlZCBvbiBjdXJyZW50IHVzZXIncyByb2xlIGFuZCBwZXJtaXNzaW9uc1xuICAgICAgbGV0IGZpbHRlcmVkVXNlcnM7XG4gICAgICBpZiAoY3VycmVudFVzZXIucm9sZSA9PT0gJ2FkbWluJykge1xuICAgICAgICAvLyBBZG1pbiBjYW4gc2VlIGFsbCB1c2Vyc1xuICAgICAgICBmaWx0ZXJlZFVzZXJzID0gdXNlcnNXaXRoQXNzaWdubWVudHM7XG4gICAgICB9IGVsc2UgaWYgKFsnZGVtb19tYW5hZ2VyJywgJ2RlbW9fdGVuYW50JywgJ2RlbW9fcmVzaWRlbnQnXS5pbmNsdWRlcyhjdXJyZW50VXNlci5yb2xlKSkge1xuICAgICAgICAvLyBEZW1vIHVzZXJzIGNhbiBvbmx5IHNlZSBvdGhlciBkZW1vIHVzZXJzXG4gICAgICAgIGZpbHRlcmVkVXNlcnMgPSB1c2Vyc1dpdGhBc3NpZ25tZW50cy5maWx0ZXIodXNlciA9PiBcbiAgICAgICAgICBbJ2RlbW9fbWFuYWdlcicsICdkZW1vX3RlbmFudCcsICdkZW1vX3Jlc2lkZW50J10uaW5jbHVkZXModXNlci5yb2xlKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVndWxhciBtYW5hZ2VycyBhbmQgb3RoZXIgdXNlcnMgY2FuIG9ubHkgc2VlIG5vbi1kZW1vIHVzZXJzIGZyb20gdGhlaXIgb3JnYW5pemF0aW9uc1xuICAgICAgICAvLyBHZXQgdGhlIG9yZ2FuaXphdGlvbiBJRHMgdGhhdCB0aGUgY3VycmVudCB1c2VyIGhhcyBhY2Nlc3MgdG9cbiAgICAgICAgY29uc3QgdXNlck9yZ0lkcyA9IChhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKGN1cnJlbnRVc2VyLmlkKSkubWFwKG9yZyA9PiBvcmcub3JnYW5pemF0aW9uSWQpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlsdGVyIHVzZXJzIHRvIG9ubHkgaW5jbHVkZSBub24tZGVtbyB1c2VycyBmcm9tIGFjY2Vzc2libGUgb3JnYW5pemF0aW9uc1xuICAgICAgICBmaWx0ZXJlZFVzZXJzID0gdXNlcnNXaXRoQXNzaWdubWVudHMuZmlsdGVyKHVzZXIgPT4ge1xuICAgICAgICAgIC8vIEV4Y2x1ZGUgZGVtbyB1c2VycyBmcm9tIHJlZ3VsYXIgbWFuYWdlciB2aWV3XG4gICAgICAgICAgaWYgKFsnZGVtb19tYW5hZ2VyJywgJ2RlbW9fdGVuYW50JywgJ2RlbW9fcmVzaWRlbnQnXS5pbmNsdWRlcyh1c2VyLnJvbGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGhhc0FjY2VzcyA9IHVzZXIub3JnYW5pemF0aW9ucz8uc29tZShvcmcgPT4gdXNlck9yZ0lkcy5pbmNsdWRlcyhvcmcuaWQpKSB8fCBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gaGFzQWNjZXNzO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuXG4gICAgICByZXMuanNvbihmaWx0ZXJlZFVzZXJzKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgdXNlcnM6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggdXNlcnMnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuXG4gIC8qKlxuICAgKiBHRVQgL2FwaS91c2Vycy86aWQgLSBSZXRyaWV2ZXMgYSBzcGVjaWZpYyB1c2VyIGJ5IElELlxuICAgKi9cbiAgYXBwLmdldCgnL2FwaS91c2Vycy86aWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcblxuICAgICAgaWYgKCFpZCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIF9lcnJvcjogJ0JhZCByZXF1ZXN0JyxcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciBJRCBpcyByZXF1aXJlZCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyKGlkKTtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICAgIF9lcnJvcjogJ05vdCBmb3VuZCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gYmVmb3JlIHNlbmRpbmcgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHVzZXI7XG4gICAgICByZXMuanNvbih1c2VyV2l0aG91dFBhc3N3b3JkKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgdXNlcjonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCB1c2VyJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEdFVCAvYXBpL3VzZXJzL2VtYWlsLzplbWFpbCAtIFJldHJpZXZlcyBhIHVzZXIgYnkgZW1haWwgYWRkcmVzcy5cbiAgICovXG4gIGFwcC5nZXQoJy9hcGkvdXNlcnMvZW1haWwvOmVtYWlsJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZW1haWwgfSA9IHJlcS5wYXJhbXM7XG5cbiAgICAgIGlmICghZW1haWwpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBfZXJyb3I6ICdCYWQgcmVxdWVzdCcsXG4gICAgICAgICAgbWVzc2FnZTogJ0VtYWlsIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJCeUVtYWlsKGVtYWlsKTtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICAgIF9lcnJvcjogJ05vdCBmb3VuZCcsXG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gYmVmb3JlIHNlbmRpbmcgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHVzZXI7XG4gICAgICByZXMuanNvbih1c2VyV2l0aG91dFBhc3N3b3JkKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgdXNlciBieSBlbWFpbDonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCB1c2VyJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFBPU1QgL2FwaS91c2VycyAtIENyZWF0ZXMgYSBuZXcgdXNlci5cbiAgICovXG4gIGFwcC5wb3N0KCcvYXBpL3VzZXJzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEVuaGFuY2VkIHBhc3N3b3JkIHZhbGlkYXRpb24gdXNpbmcgdXRpbGl0eVxuICAgICAgaWYgKHJlcS5ib2R5LnBhc3N3b3JkKSB7XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkVmFsaWRhdGlvbiA9IHZhbGlkYXRlUGFzc3dvcmRTdHJlbmd0aChyZXEuYm9keS5wYXNzd29yZCk7XG4gICAgICAgIGlmICghcGFzc3dvcmRWYWxpZGF0aW9uLmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgICAgZXJyb3I6ICdWYWxpZGF0aW9uIGVycm9yJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHBhc3N3b3JkVmFsaWRhdGlvbi5tZXNzYWdlLFxuICAgICAgICAgICAgY29kZTogJ1dFQUtfUEFTU1dPUkQnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNhbml0aXplIGFuZCBub3JtYWxpemUgYWxsIGlucHV0IGRhdGFcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWREYXRhID0ge1xuICAgICAgICAuLi5yZXEuYm9keSxcbiAgICAgICAgZW1haWw6IG5vcm1hbGl6ZUVtYWlsKHJlcS5ib2R5LmVtYWlsIHx8ICcnKSxcbiAgICAgICAgZmlyc3ROYW1lOiBzYW5pdGl6ZU5hbWUocmVxLmJvZHkuZmlyc3ROYW1lIHx8ICcnKSxcbiAgICAgICAgbGFzdE5hbWU6IHNhbml0aXplTmFtZShyZXEuYm9keS5sYXN0TmFtZSB8fCAnJyksXG4gICAgICAgIHBob25lOiByZXEuYm9keS5waG9uZSA/IHNhbml0aXplU3RyaW5nKHJlcS5ib2R5LnBob25lKSA6ICcnLFxuICAgICAgICBsYW5ndWFnZTogcmVxLmJvZHkubGFuZ3VhZ2UgfHwgJ2ZyJyxcbiAgICAgIH07XG5cbiAgICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSB1c2VybmFtZSBpZiBub3QgcHJvdmlkZWRcbiAgICAgIGlmICghbm9ybWFsaXplZERhdGEudXNlcm5hbWUgJiYgbm9ybWFsaXplZERhdGEuZW1haWwpIHtcbiAgICAgICAgY29uc3QgYmFzZVVzZXJuYW1lID0gZ2VuZXJhdGVVc2VybmFtZUZyb21FbWFpbChub3JtYWxpemVkRGF0YS5lbWFpbCk7XG4gICAgICAgIGxldCB1c2VybmFtZSA9IGJhc2VVc2VybmFtZTtcblxuICAgICAgICAvLyBFbnN1cmUgdXNlcm5hbWUgdW5pcXVlbmVzc1xuICAgICAgICBsZXQgdXNlcm5hbWVDb3VudGVyID0gMTtcbiAgICAgICAgbGV0IGV4aXN0aW5nVXNlcm5hbWUgPSBhd2FpdCBkYlxuICAgICAgICAgIC5zZWxlY3QoeyB1c2VybmFtZTogc2NoZW1hLnVzZXJzLnVzZXJuYW1lIH0pXG4gICAgICAgICAgLmZyb20oc2NoZW1hLnVzZXJzKVxuICAgICAgICAgIC53aGVyZShlcShzY2hlbWEudXNlcnMudXNlcm5hbWUsIHVzZXJuYW1lKSlcbiAgICAgICAgICAubGltaXQoMSk7XG5cbiAgICAgICAgd2hpbGUgKGV4aXN0aW5nVXNlcm5hbWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHVzZXJuYW1lID0gYCR7YmFzZVVzZXJuYW1lfSR7dXNlcm5hbWVDb3VudGVyfWA7XG4gICAgICAgICAgdXNlcm5hbWVDb3VudGVyKys7XG4gICAgICAgICAgZXhpc3RpbmdVc2VybmFtZSA9IGF3YWl0IGRiXG4gICAgICAgICAgICAuc2VsZWN0KHsgdXNlcm5hbWU6IHNjaGVtYS51c2Vycy51c2VybmFtZSB9KVxuICAgICAgICAgICAgLmZyb20oc2NoZW1hLnVzZXJzKVxuICAgICAgICAgICAgLndoZXJlKGVxKHNjaGVtYS51c2Vycy51c2VybmFtZSwgdXNlcm5hbWUpKVxuICAgICAgICAgICAgLmxpbWl0KDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9ybWFsaXplZERhdGEudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IGluc2VydFVzZXJTY2hlbWEucGFyc2Uobm9ybWFsaXplZERhdGEpO1xuXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIHdpdGggZW1haWwgYWxyZWFkeSBleGlzdHNcbiAgICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlckJ5RW1haWwodmFsaWRhdGVkRGF0YS5lbWFpbCk7XG4gICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwOSkuanNvbih7XG4gICAgICAgICAgX2Vycm9yOiAnQ29uZmxpY3QnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIHdpdGggdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0cycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVVc2VyKHZhbGlkYXRlZERhdGEpO1xuXG4gICAgICAvLyBMb2cgc3VjY2Vzc2Z1bCB1c2VyIGNyZWF0aW9uXG4gICAgICBsb2dVc2VyQ3JlYXRpb24oe1xuICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICByb2xlOiB1c2VyLnJvbGUsXG4gICAgICAgIG1ldGhvZDogJ2RpcmVjdCcsXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgaXBBZGRyZXNzOiByZXEuaXAsXG4gICAgICAgIHVzZXJBZ2VudDogcmVxLmdldCgnVXNlci1BZ2VudCcpLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlbW92ZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gYmVmb3JlIHNlbmRpbmcgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHVzZXI7XG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih1c2VyV2l0aG91dFBhc3N3b3JkKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAvLyBMb2cgZmFpbGVkIHVzZXIgY3JlYXRpb24gYXR0ZW1wdFxuICAgICAgbG9nVXNlckNyZWF0aW9uKHtcbiAgICAgICAgZW1haWw6IHJlcS5ib2R5LmVtYWlsIHx8ICd1bmtub3duJyxcbiAgICAgICAgcm9sZTogcmVxLmJvZHkucm9sZSB8fCAndW5rbm93bicsXG4gICAgICAgIG1ldGhvZDogJ2RpcmVjdCcsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgaXBBZGRyZXNzOiByZXEuaXAsXG4gICAgICAgIHVzZXJBZ2VudDogcmVxLmdldCgnVXNlci1BZ2VudCcpLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBlcnJvcjogJ1ZhbGlkYXRpb24gZXJyb3InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHVzZXIgZGF0YScsXG4gICAgICAgICAgZGV0YWlsczogZXJyb3IuaXNzdWVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGNyZWF0aW5nIHVzZXI6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY3JlYXRlIHVzZXInLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUFVUIC9hcGkvdXNlcnMvOmlkIC0gVXBkYXRlcyBhbiBleGlzdGluZyB1c2VyLlxuICAgKi9cbiAgYXBwLnB1dCgnL2FwaS91c2Vycy86aWQnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gcmVxLnVzZXIgfHwgcmVxLnNlc3Npb24/LnVzZXI7XG5cbiAgICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdBVVRIX1JFUVVJUkVEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBlcnJvcjogJ0JhZCByZXF1ZXN0JyxcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciBJRCBpcyByZXF1aXJlZCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdGhlIHRhcmdldCB1c2VyIGJlaW5nIHVwZGF0ZWRcbiAgICAgIGNvbnN0IHRhcmdldFVzZXIgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXIoaWQpO1xuICAgICAgaWYgKCF0YXJnZXRVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgZXJyb3I6ICdOb3QgZm91bmQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBSb2xlLWJhc2VkIGFjY2VzcyBjb250cm9sIGZvciB1c2VyIHVwZGF0ZXNcbiAgICAgIGNvbnN0IHsgcm9sZTogbmV3Um9sZSB9ID0gcmVxLmJvZHk7XG4gICAgICBcbiAgICAgIC8vIFZhbGlkYXRlIHJvbGUgYXNzaWdubWVudCBwZXJtaXNzaW9uc1xuICAgICAgaWYgKG5ld1JvbGUgJiYgbmV3Um9sZSAhPT0gdGFyZ2V0VXNlci5yb2xlKSB7XG4gICAgICAgIC8vIEFkbWluIGNhbiBhc3NpZ24gYW55IHJvbGVcbiAgICAgICAgaWYgKGN1cnJlbnRVc2VyLnJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgICAvLyBBZG1pbiBoYXMgbm8gcmVzdHJpY3Rpb25zXG4gICAgICAgIH0gXG4gICAgICAgIC8vIE1hbmFnZXIgcmVzdHJpY3Rpb25zXG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRVc2VyLnJvbGUgPT09ICdtYW5hZ2VyJykge1xuICAgICAgICAgIC8vIE1hbmFnZXJzIGNhbm5vdCBlc2NhbGF0ZSB0byBhZG1pblxuICAgICAgICAgIGlmIChuZXdSb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe1xuICAgICAgICAgICAgICBlcnJvcjogJ1Blcm1pc3Npb24gZGVuaWVkJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ01hbmFnZXJzIGNhbm5vdCBhc3NpZ24gYWRtaW4gcm9sZScsXG4gICAgICAgICAgICAgIGNvZGU6ICdST0xFX0VTQ0FMQVRJT05fREVOSUVEJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBNYW5hZ2VycyBjYW4gb25seSBhc3NpZ24gbWFuYWdlci90ZW5hbnQvcmVzaWRlbnQgcm9sZXNcbiAgICAgICAgICBpZiAoIVsnbWFuYWdlcicsICd0ZW5hbnQnLCAncmVzaWRlbnQnXS5pbmNsdWRlcyhuZXdSb2xlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgICAgZXJyb3I6ICdQZXJtaXNzaW9uIGRlbmllZCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdNYW5hZ2VycyBjYW4gb25seSBhc3NpZ24gbWFuYWdlciwgdGVuYW50LCBvciByZXNpZGVudCByb2xlcycsXG4gICAgICAgICAgICAgIGNvZGU6ICdJTlZBTElEX1JPTEVfQVNTSUdOTUVOVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVtbyBtYW5hZ2VyIHJlc3RyaWN0aW9uc1xuICAgICAgICBlbHNlIGlmIChjdXJyZW50VXNlci5yb2xlID09PSAnZGVtb19tYW5hZ2VyJykge1xuICAgICAgICAgIC8vIERlbW8gbWFuYWdlcnMgY2FuIG9ubHkgYXNzaWduIGRlbW8gcm9sZXNcbiAgICAgICAgICBpZiAoIVsnZGVtb19tYW5hZ2VyJywgJ2RlbW9fdGVuYW50JywgJ2RlbW9fcmVzaWRlbnQnXS5pbmNsdWRlcyhuZXdSb2xlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgICAgZXJyb3I6ICdQZXJtaXNzaW9uIGRlbmllZCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdEZW1vIG1hbmFnZXJzIGNhbiBvbmx5IGFzc2lnbiBkZW1vIHJvbGVzJyxcbiAgICAgICAgICAgICAgY29kZTogJ0lOVkFMSURfREVNT19ST0xFX0FTU0lHTk1FTlQnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyIHJvbGVzIGNhbm5vdCBhc3NpZ24gcm9sZXNcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgIGVycm9yOiAnUGVybWlzc2lvbiBkZW5pZWQnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucyB0byBhc3NpZ24gcm9sZXMnLFxuICAgICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPcmdhbml6YXRpb24gc2NvcGUgdmFsaWRhdGlvbiBmb3Igcm9sZSBhc3NpZ25tZW50c1xuICAgICAgICBpZiAoY3VycmVudFVzZXIucm9sZSA9PT0gJ21hbmFnZXInIHx8IGN1cnJlbnRVc2VyLnJvbGUgPT09ICdkZW1vX21hbmFnZXInKSB7XG4gICAgICAgICAgLy8gR2V0IGN1cnJlbnQgdXNlcidzIG9yZ2FuaXphdGlvbnNcbiAgICAgICAgICBjb25zdCBjdXJyZW50VXNlck9yZ3MgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKGN1cnJlbnRVc2VyLmlkKTtcbiAgICAgICAgICBjb25zdCBjdXJyZW50VXNlck9yZ0lkcyA9IGN1cnJlbnRVc2VyT3Jncy5tYXAob3JnID0+IG9yZy5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gR2V0IHRhcmdldCB1c2VyJ3Mgb3JnYW5pemF0aW9uc1xuICAgICAgICAgIGNvbnN0IHRhcmdldFVzZXJPcmdzID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyT3JnYW5pemF0aW9ucyhpZCk7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0VXNlck9yZ0lkcyA9IHRhcmdldFVzZXJPcmdzLm1hcChvcmcgPT4gb3JnLm9yZ2FuaXphdGlvbklkKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDaGVjayBpZiBjdXJyZW50IHVzZXIgaGFzIGFjY2VzcyB0byB0YXJnZXQgdXNlcidzIG9yZ2FuaXphdGlvbnNcbiAgICAgICAgICBjb25zdCBoYXNBY2Nlc3NUb1RhcmdldE9yZ3MgPSB0YXJnZXRVc2VyT3JnSWRzLnNvbWUob3JnSWQgPT4gXG4gICAgICAgICAgICBjdXJyZW50VXNlck9yZ0lkcy5pbmNsdWRlcyhvcmdJZClcbiAgICAgICAgICApO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICghaGFzQWNjZXNzVG9UYXJnZXRPcmdzICYmIHRhcmdldFVzZXJPcmdJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgICAgZXJyb3I6ICdQZXJtaXNzaW9uIGRlbmllZCcsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdDYW5ub3QgbW9kaWZ5IHVzZXJzIG91dHNpZGUgeW91ciBvcmdhbml6YXRpb24gc2NvcGUnLFxuICAgICAgICAgICAgICBjb2RlOiAnT1JHQU5JWkFUSU9OX1NDT1BFX1ZJT0xBVElPTicsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBGb3IgZGVtbyBtYW5hZ2VycywgdmFsaWRhdGUgZGVtbyByb2xlIGFzc2lnbm1lbnRzXG4gICAgICAgICAgaWYgKGN1cnJlbnRVc2VyLnJvbGUgPT09ICdkZW1vX21hbmFnZXInKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0YXJnZXQgb3JnYW5pemF0aW9ucyBhcmUgZGVtbyBvcmdhbml6YXRpb25zXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRPcmdzID0gYXdhaXQgZGJcbiAgICAgICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgICAgIC5mcm9tKHNjaGVtYS5vcmdhbml6YXRpb25zKVxuICAgICAgICAgICAgICAud2hlcmUoaW5BcnJheShzY2hlbWEub3JnYW5pemF0aW9ucy5pZCwgdGFyZ2V0VXNlck9yZ0lkcykpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBoYXNOb25EZW1vT3JncyA9IHRhcmdldE9yZ3Muc29tZShvcmcgPT4gb3JnLnR5cGUgIT09ICdkZW1vJyk7XG4gICAgICAgICAgICBpZiAoaGFzTm9uRGVtb09yZ3MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1Blcm1pc3Npb24gZGVuaWVkJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRGVtbyBtYW5hZ2VycyBjYW5ub3QgYXNzaWduIHJvbGVzIHRvIHVzZXJzIGluIG5vbi1kZW1vIG9yZ2FuaXphdGlvbnMnLFxuICAgICAgICAgICAgICAgIGNvZGU6ICdERU1PX1NDT1BFX1ZJT0xBVElPTicsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGF0ZSB0aGUgdXBkYXRlIGRhdGEgKGV4Y2x1ZGluZyBwYXNzd29yZCB1cGRhdGVzIGZvciBzZWN1cml0eSlcbiAgICAgIGNvbnN0IHVwZGF0ZVNjaGVtYSA9IGluc2VydFVzZXJTY2hlbWEucGFydGlhbCgpLm9taXQoeyBwYXNzd29yZDogdHJ1ZSB9KTtcbiAgICAgIGNvbnN0IHZhbGlkYXRlZERhdGEgPSB1cGRhdGVTY2hlbWEucGFyc2UocmVxLmJvZHkpO1xuXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgc3RvcmFnZS51cGRhdGVVc2VyKGlkLCB7XG4gICAgICAgIC4uLnZhbGlkYXRlZERhdGEsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgZXJyb3I6ICdOb3QgZm91bmQnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhciByZWxldmFudCBjYWNoZXNcbiAgICAgIHF1ZXJ5Q2FjaGUuaW52YWxpZGF0ZSgndXNlcnMnLCAnYWxsX3VzZXJzJyk7XG4gICAgICBxdWVyeUNhY2hlLmludmFsaWRhdGUoJ3VzZXJzJywgYHVzZXI6JHtpZH1gKTtcblxuICAgICAgLy8gUmVtb3ZlIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBiZWZvcmUgc2VuZGluZyByZXNwb25zZVxuICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4udXNlcldpdGhvdXRQYXNzd29yZCB9ID0gdXNlcjtcbiAgICAgIHJlcy5qc29uKHVzZXJXaXRob3V0UGFzc3dvcmQpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBlcnJvcjogJ1ZhbGlkYXRpb24gZXJyb3InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHVzZXIgZGF0YScsXG4gICAgICAgICAgZGV0YWlsczogZXJyb3IuaXNzdWVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHVwZGF0aW5nIHVzZXI6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gdXBkYXRlIHVzZXInLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogREVMRVRFIC9hcGkvdXNlcnMvOmlkIC0gRGVhY3RpdmF0ZXMgYSB1c2VyIChzb2Z0IGRlbGV0ZSkuXG4gICAqL1xuICBhcHAuZGVsZXRlKCcvYXBpL3VzZXJzLzppZCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuXG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgX2Vycm9yOiAnQmFkIHJlcXVlc3QnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIElEIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNvZnQgZGVsZXRlIGJ5IHNldHRpbmcgaXNBY3RpdmUgdG8gZmFsc2VcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBzdG9yYWdlLnVwZGF0ZVVzZXIoaWQsIHtcbiAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9KTtcblxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgX2Vycm9yOiAnTm90IGZvdW5kJyxcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciBub3QgZm91bmQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnVXNlciBkZWFjdGl2YXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBkZWFjdGl2YXRpbmcgdXNlcjonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBkZWFjdGl2YXRlIHVzZXInLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogR0VUIC9hcGkvdXNlci1vcmdhbml6YXRpb25zIC0gR2V0IGN1cnJlbnQgdXNlcidzIG9yZ2FuaXphdGlvbnMuXG4gICAqL1xuICBhcHAuZ2V0KCcvYXBpL3VzZXItb3JnYW5pemF0aW9ucycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlck9yZ2FuaXphdGlvbnMoY3VycmVudFVzZXIuaWQpO1xuICAgICAgcmVzLmpzb24ob3JnYW5pemF0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGdldHRpbmcgdXNlciBvcmdhbml6YXRpb25zOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGdldCB1c2VyIG9yZ2FuaXphdGlvbnMnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogR0VUIC9hcGkvdXNlci1yZXNpZGVuY2VzIC0gR2V0IGN1cnJlbnQgdXNlcidzIHJlc2lkZW5jZXMuXG4gICAqL1xuICBhcHAuZ2V0KCcvYXBpL3VzZXItcmVzaWRlbmNlcycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVzaWRlbmNlcyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlclJlc2lkZW5jZXMoY3VycmVudFVzZXIuaWQpO1xuICAgICAgcmVzLmpzb24ocmVzaWRlbmNlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGdldHRpbmcgdXNlciByZXNpZGVuY2VzOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGdldCB1c2VyIHJlc2lkZW5jZXMnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogR0VUIC9hcGkvYWRtaW4vYWxsLXVzZXItb3JnYW5pemF0aW9ucyAtIEdldCB1c2VyLW9yZ2FuaXphdGlvbiByZWxhdGlvbnNoaXBzIChhZG1pbjogYWxsLCBtYW5hZ2VyOiBmaWx0ZXJlZCBieSB0aGVpciBvcmdzKS5cbiAgICovXG4gIGFwcC5nZXQoJy9hcGkvYWRtaW4vYWxsLXVzZXItb3JnYW5pemF0aW9ucycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIGNvbnNvbGUubG9nKCfwn5SNIFtBUEldIGFsbC11c2VyLW9yZ2FuaXphdGlvbnMgZW5kcG9pbnQgY2FsbGVkIGJ5IHVzZXI6JywgcmVxLnVzZXI/LmVtYWlsKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdBVVRIX1JFUVVJUkVEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgYWRtaW5zIGFuZCBtYW5hZ2VycyBjYW4gYWNjZXNzIHVzZXIgYXNzaWdubWVudHNcbiAgICAgIGlmICghWydhZG1pbicsICdtYW5hZ2VyJ10uaW5jbHVkZXMoY3VycmVudFVzZXIucm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zIHRvIHZpZXcgdXNlciBhc3NpZ25tZW50cycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBsZXQgdXNlck9yZ2FuaXphdGlvbnM7XG5cbiAgICAgIGlmIChjdXJyZW50VXNlci5yb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgIC8vIEFkbWluIHNlZXMgYWxsIHVzZXItb3JnYW5pemF0aW9uIHJlbGF0aW9uc2hpcHNcbiAgICAgICAgdXNlck9yZ2FuaXphdGlvbnMgPSBhd2FpdCBkYlxuICAgICAgICAgIC5zZWxlY3Qoe1xuICAgICAgICAgICAgdXNlcklkOiBzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMudXNlcklkLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25JZCxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvblJvbGU6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25Sb2xlLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5pc0FjdGl2ZSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mcm9tKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLmlzQWN0aXZlLCB0cnVlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNYW5hZ2VyIHNlZXMgb25seSByZWxhdGlvbnNoaXBzIGZvciB0aGVpciBvcmdhbml6YXRpb25zXG4gICAgICAgIGNvbnN0IG1hbmFnZXJPcmdzID0gYXdhaXQgZGJcbiAgICAgICAgICAuc2VsZWN0KHsgb3JnYW5pemF0aW9uSWQ6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25JZCB9KVxuICAgICAgICAgIC5mcm9tKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoXG4gICAgICAgICAgICBhbmQoXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy51c2VySWQsIGN1cnJlbnRVc2VyLmlkKSxcbiAgICAgICAgICAgICAgZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLmlzQWN0aXZlLCB0cnVlKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgb3JnSWRzID0gbWFuYWdlck9yZ3MubWFwKChvcmcpID0+IG9yZy5vcmdhbml6YXRpb25JZCk7XG5cbiAgICAgICAgaWYgKG9yZ0lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgdXNlck9yZ2FuaXphdGlvbnMgPSBhd2FpdCBkYlxuICAgICAgICAgIC5zZWxlY3Qoe1xuICAgICAgICAgICAgdXNlcklkOiBzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMudXNlcklkLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25JZCxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvblJvbGU6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25Sb2xlLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5pc0FjdGl2ZSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mcm9tKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoXG4gICAgICAgICAgICBhbmQoXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5pc0FjdGl2ZSwgdHJ1ZSksXG4gICAgICAgICAgICAgIGluQXJyYXkoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbklkLCBvcmdJZHMpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmVzLmpzb24odXNlck9yZ2FuaXphdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBnZXR0aW5nIGFsbCB1c2VyIG9yZ2FuaXphdGlvbnM6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZ2V0IHVzZXIgb3JnYW5pemF0aW9ucycsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBHRVQgL2FwaS9hZG1pbi9hbGwtdXNlci1yZXNpZGVuY2VzIC0gR2V0IHVzZXItcmVzaWRlbmNlIHJlbGF0aW9uc2hpcHMgKGFkbWluOiBhbGwsIG1hbmFnZXI6IGZpbHRlcmVkIGJ5IHRoZWlyIG9yZ3MpLlxuICAgKi9cbiAgYXBwLmdldCgnL2FwaS9hZG1pbi9hbGwtdXNlci1yZXNpZGVuY2VzJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ/CflI0gW0FQSV0gYWxsLXVzZXItcmVzaWRlbmNlcyBlbmRwb2ludCBjYWxsZWQgYnkgdXNlcjonLCByZXEudXNlcj8uZW1haWwpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhZG1pbnMgYW5kIG1hbmFnZXJzIGNhbiBhY2Nlc3MgdXNlciBhc3NpZ25tZW50c1xuICAgICAgaWYgKCFbJ2FkbWluJywgJ21hbmFnZXInXS5pbmNsdWRlcyhjdXJyZW50VXNlci5yb2xlKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMgdG8gdmlldyB1c2VyIGFzc2lnbm1lbnRzJyxcbiAgICAgICAgICBjb2RlOiAnSU5TVUZGSUNJRU5UX1BFUk1JU1NJT05TJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGxldCB1c2VyUmVzaWRlbmNlcztcblxuICAgICAgaWYgKGN1cnJlbnRVc2VyLnJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgLy8gQWRtaW4gc2VlcyBhbGwgdXNlci1yZXNpZGVuY2UgcmVsYXRpb25zaGlwc1xuICAgICAgICB1c2VyUmVzaWRlbmNlcyA9IGF3YWl0IGRiXG4gICAgICAgICAgLnNlbGVjdCh7XG4gICAgICAgICAgICB1c2VySWQ6IHNjaGVtYS51c2VyUmVzaWRlbmNlcy51c2VySWQsXG4gICAgICAgICAgICByZXNpZGVuY2VJZDogc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnJlc2lkZW5jZUlkLFxuICAgICAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnJlbGF0aW9uc2hpcFR5cGUsXG4gICAgICAgICAgICBzdGFydERhdGU6IHNjaGVtYS51c2VyUmVzaWRlbmNlcy5zdGFydERhdGUsXG4gICAgICAgICAgICBlbmREYXRlOiBzY2hlbWEudXNlclJlc2lkZW5jZXMuZW5kRGF0ZSxcbiAgICAgICAgICAgIGlzQWN0aXZlOiBzY2hlbWEudXNlclJlc2lkZW5jZXMuaXNBY3RpdmUsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZnJvbShzY2hlbWEudXNlclJlc2lkZW5jZXMpXG4gICAgICAgICAgLndoZXJlKGVxKHNjaGVtYS51c2VyUmVzaWRlbmNlcy5pc0FjdGl2ZSwgdHJ1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWFuYWdlciBzZWVzIG9ubHkgcmVsYXRpb25zaGlwcyBmb3IgcmVzaWRlbmNlcyBpbiB0aGVpciBvcmdhbml6YXRpb25zXG4gICAgICAgIGNvbnN0IG1hbmFnZXJPcmdzID0gYXdhaXQgZGJcbiAgICAgICAgICAuc2VsZWN0KHsgb3JnYW5pemF0aW9uSWQ6IHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25JZCB9KVxuICAgICAgICAgIC5mcm9tKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoXG4gICAgICAgICAgICBhbmQoXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy51c2VySWQsIGN1cnJlbnRVc2VyLmlkKSxcbiAgICAgICAgICAgICAgZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLmlzQWN0aXZlLCB0cnVlKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgb3JnSWRzID0gbWFuYWdlck9yZ3MubWFwKChvcmcpID0+IG9yZy5vcmdhbml6YXRpb25JZCk7XG5cbiAgICAgICAgaWYgKG9yZ0lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gcmVzLmpzb24oW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHJlc2lkZW5jZXMgaW4gbWFuYWdlcidzIG9yZ2FuaXphdGlvbnNcbiAgICAgICAgY29uc3QgYWNjZXNzaWJsZVJlc2lkZW5jZXMgPSBhd2FpdCBkYlxuICAgICAgICAgIC5zZWxlY3QoeyByZXNpZGVuY2VJZDogc2NoZW1hLnJlc2lkZW5jZXMuaWQgfSlcbiAgICAgICAgICAuZnJvbShzY2hlbWEucmVzaWRlbmNlcylcbiAgICAgICAgICAuaW5uZXJKb2luKHNjaGVtYS5idWlsZGluZ3MsIGVxKHNjaGVtYS5yZXNpZGVuY2VzLmJ1aWxkaW5nSWQsIHNjaGVtYS5idWlsZGluZ3MuaWQpKVxuICAgICAgICAgIC53aGVyZShcbiAgICAgICAgICAgIGFuZChcbiAgICAgICAgICAgICAgaW5BcnJheShzY2hlbWEuYnVpbGRpbmdzLm9yZ2FuaXphdGlvbklkLCBvcmdJZHMpLFxuICAgICAgICAgICAgICBlcShzY2hlbWEucmVzaWRlbmNlcy5pc0FjdGl2ZSwgdHJ1ZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IHJlc2lkZW5jZUlkcyA9IGFjY2Vzc2libGVSZXNpZGVuY2VzLm1hcCgocmVzKSA9PiByZXMucmVzaWRlbmNlSWQpO1xuXG4gICAgICAgIGlmIChyZXNpZGVuY2VJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5qc29uKFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVzZXJSZXNpZGVuY2VzID0gYXdhaXQgZGJcbiAgICAgICAgICAuc2VsZWN0KHtcbiAgICAgICAgICAgIHVzZXJJZDogc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnVzZXJJZCxcbiAgICAgICAgICAgIHJlc2lkZW5jZUlkOiBzY2hlbWEudXNlclJlc2lkZW5jZXMucmVzaWRlbmNlSWQsXG4gICAgICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBzY2hlbWEudXNlclJlc2lkZW5jZXMucmVsYXRpb25zaGlwVHlwZSxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgIGVuZERhdGU6IHNjaGVtYS51c2VyUmVzaWRlbmNlcy5lbmREYXRlLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHNjaGVtYS51c2VyUmVzaWRlbmNlcy5pc0FjdGl2ZSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mcm9tKHNjaGVtYS51c2VyUmVzaWRlbmNlcylcbiAgICAgICAgICAud2hlcmUoXG4gICAgICAgICAgICBhbmQoXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS51c2VyUmVzaWRlbmNlcy5pc0FjdGl2ZSwgdHJ1ZSksXG4gICAgICAgICAgICAgIGluQXJyYXkoc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnJlc2lkZW5jZUlkLCByZXNpZGVuY2VJZHMpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmVzLmpzb24odXNlclJlc2lkZW5jZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBnZXR0aW5nIGFsbCB1c2VyIHJlc2lkZW5jZXM6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZ2V0IHVzZXIgcmVzaWRlbmNlcycsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBHRVQgL2FwaS91c2VyL3Blcm1pc3Npb25zIC0gUmV0cmlldmVzIHRoZSBjdXJyZW50IHVzZXIncyBwZXJtaXNzaW9ucyBiYXNlZCBvbiB0aGVpciByb2xlLlxuICAgKiBQcm90ZWN0ZWQgZW5kcG9pbnQgdGhhdCByZXF1aXJlcyBhdXRoZW50aWNhdGlvbi5cbiAgICovXG4gIGFwcC5nZXQoJy9hcGkvdXNlci9wZXJtaXNzaW9ucycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgdXNlciByb2xlIGZyb20gc2Vzc2lvblxuICAgICAgY29uc3QgdXNlclJvbGUgPSByZXEudXNlcj8ucm9sZTtcblxuICAgICAgaWYgKCF1c2VyUm9sZSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIF9lcnJvcjogJ0JhZCByZXF1ZXN0JyxcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciByb2xlIG5vdCBmb3VuZCBpbiBzZXNzaW9uJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBwZXJtaXNzaW9ucyBmb3IgdGhlIHVzZXIncyByb2xlIGZyb20gZGF0YWJhc2VcbiAgICAgIGNvbnN0IHJvbGVQZXJtaXNzaW9ucyA9IGF3YWl0IHN0b3JhZ2UuZ2V0Um9sZVBlcm1pc3Npb25zKCk7XG4gICAgICBjb25zdCB1c2VyUGVybWlzc2lvbnMgPSByb2xlUGVybWlzc2lvbnNcbiAgICAgICAgLmZpbHRlcigocnA6IGFueSkgPT4gcnAucm9sZSA9PT0gdXNlclJvbGUpXG4gICAgICAgIC5tYXAoKHJwOiBhbnkpID0+IHJwLnBlcm1pc3Npb24/Lm5hbWUpXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgIC8vIENyZWF0ZSByZXNwb25zZSB3aXRoIFpvZCB2YWxpZGF0aW9uXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSB7XG4gICAgICAgIHJvbGU6IHVzZXJSb2xlLFxuICAgICAgICBwZXJtaXNzaW9uczogdXNlclBlcm1pc3Npb25zLFxuICAgICAgICBwZXJtaXNzaW9uQ291bnQ6IHVzZXJQZXJtaXNzaW9ucy5sZW5ndGgsXG4gICAgICB9O1xuXG4gICAgICAvLyBWYWxpZGF0ZSByZXNwb25zZSB3aXRoIFpvZCBzY2hlbWFcbiAgICAgIGNvbnN0IHBlcm1pc3Npb25zUmVzcG9uc2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgICAgIHJvbGU6IHouZW51bShbJ2FkbWluJywgJ21hbmFnZXInLCAndGVuYW50JywgJ3Jlc2lkZW50J10pLFxuICAgICAgICBwZXJtaXNzaW9uczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgICAgICAgcGVybWlzc2lvbkNvdW50OiB6Lm51bWJlcigpLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHZhbGlkYXRlZFJlc3BvbnNlID0gcGVybWlzc2lvbnNSZXNwb25zZVNjaGVtYS5wYXJzZShyZXNwb25zZURhdGEpO1xuXG4gICAgICByZXMuanNvbih2YWxpZGF0ZWRSZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2Ygei5ab2RFcnJvcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHZhbGlkYXRlIHBlcm1pc3Npb25zIHJlc3BvbnNlJyxcbiAgICAgICAgICBkZXRhaWxzOiBlcnJvci5pc3N1ZXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgdXNlciBwZXJtaXNzaW9uczonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCB1c2VyIHBlcm1pc3Npb25zJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFBVVCAvYXBpL3VzZXJzLzppZC9vcmdhbml6YXRpb25zIC0gVXBkYXRlcyB1c2VyJ3Mgb3JnYW5pemF0aW9uIGFzc2lnbm1lbnRzLlxuICAgKiBBZG1pbjogY2FuIGFzc2lnbi9yZW1vdmUgYW55IG9yZ2FuaXphdGlvblxuICAgKiBNYW5hZ2VyOiBjYW5ub3QgbW9kaWZ5IG9yZ2FuaXphdGlvbiBhc3NpZ25tZW50cy5cbiAgICovXG4gIGFwcC5wdXQoJy9hcGkvdXNlcnMvOmlkL29yZ2FuaXphdGlvbnMnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGNvbnN0IHsgaWQ6IHVzZXJJZCB9ID0gcmVxLnBhcmFtcztcbiAgICAgIGNvbnN0IHsgb3JnYW5pemF0aW9uSWRzIH0gPSByZXEuYm9keTtcblxuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhZG1pbnMgY2FuIG1vZGlmeSBvcmdhbml6YXRpb24gYXNzaWdubWVudHNcbiAgICAgIGlmIChjdXJyZW50VXNlci5yb2xlICE9PSAnYWRtaW4nKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ09ubHkgYWRtaW5pc3RyYXRvcnMgY2FuIG1vZGlmeSBvcmdhbml6YXRpb24gYXNzaWdubWVudHMnLFxuICAgICAgICAgIGNvZGU6ICdJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF1c2VySWQgfHwgIUFycmF5LmlzQXJyYXkob3JnYW5pemF0aW9uSWRzKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIElEIGFuZCBvcmdhbml6YXRpb24gSURzIGFycmF5IGFyZSByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0lOVkFMSURfUkVRVUVTVCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBWZXJpZnkgdXNlciBleGlzdHNcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXIodXNlcklkKTtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcsXG4gICAgICAgICAgY29kZTogJ1VTRVJfTk9UX0ZPVU5EJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBleGlzdGluZyBvcmdhbml6YXRpb24gYXNzaWdubWVudHNcbiAgICAgIGF3YWl0IGRiLmRlbGV0ZShzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMpLndoZXJlKGVxKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy51c2VySWQsIHVzZXJJZCkpO1xuXG4gICAgICAvLyBBZGQgbmV3IG9yZ2FuaXphdGlvbiBhc3NpZ25tZW50c1xuICAgICAgaWYgKG9yZ2FuaXphdGlvbklkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5ld0Fzc2lnbm1lbnRzID0gb3JnYW5pemF0aW9uSWRzLm1hcCgob3JnSWQ6IHN0cmluZykgPT4gKHtcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ0lkLFxuICAgICAgICAgIG9yZ2FuaXphdGlvblJvbGU6IHVzZXIucm9sZSxcbiAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGF3YWl0IGRiLmluc2VydChzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMpLnZhbHVlcyhuZXdBc3NpZ25tZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ09yZ2FuaXphdGlvbiBhc3NpZ25tZW50cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgb3JnYW5pemF0aW9uSWRzLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHVwZGF0aW5nIG9yZ2FuaXphdGlvbiBhc3NpZ25tZW50czonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgb3JnYW5pemF0aW9uIGFzc2lnbm1lbnRzJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFBVVCAvYXBpL3VzZXJzLzppZC9idWlsZGluZ3MgLSBVcGRhdGVzIHVzZXIncyBidWlsZGluZyBhc3NpZ25tZW50cy5cbiAgICogQWRtaW4gYW5kIE1hbmFnZXI6IGNhbiBhc3NpZ24vcmVtb3ZlIGJ1aWxkaW5ncyB0aGV5IGhhdmUgYWNjZXNzIHRvXG4gICAqL1xuICBhcHAucHV0KCcvYXBpL3VzZXJzLzppZC9idWlsZGluZ3MnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGNvbnN0IHsgaWQ6IHVzZXJJZCB9ID0gcmVxLnBhcmFtcztcbiAgICAgIGNvbnN0IHsgYnVpbGRpbmdJZHMgfSA9IHJlcS5ib2R5O1xuXG4gICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnQVVUSF9SRVFVSVJFRCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IGFkbWlucyBhbmQgbWFuYWdlcnMgY2FuIG1vZGlmeSBidWlsZGluZyBhc3NpZ25tZW50c1xuICAgICAgaWYgKCFbJ2FkbWluJywgJ21hbmFnZXInXS5pbmNsdWRlcyhjdXJyZW50VXNlci5yb2xlKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdPbmx5IGFkbWluaXN0cmF0b3JzIGFuZCBtYW5hZ2VycyBjYW4gbW9kaWZ5IGJ1aWxkaW5nIGFzc2lnbm1lbnRzJyxcbiAgICAgICAgICBjb2RlOiAnSU5TVUZGSUNJRU5UX1BFUk1JU1NJT05TJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXNlcklkIHx8ICFBcnJheS5pc0FycmF5KGJ1aWxkaW5nSWRzKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIElEIGFuZCBidWlsZGluZyBJRHMgYXJyYXkgYXJlIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9SRVFVRVNUJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZlcmlmeSB1c2VyIGV4aXN0c1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlcih1c2VySWQpO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJyxcbiAgICAgICAgICBjb2RlOiAnVVNFUl9OT1RfRk9VTkQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIG5vdywgd2UnbGwgY3JlYXRlIHVzZXItcmVzaWRlbmNlIHJlbGF0aW9uc2hpcHMgZm9yIGVhY2ggYnVpbGRpbmdcbiAgICAgIC8vIFRoaXMgaXMgYSBzaW1wbGlmaWVkIGFwcHJvYWNoIC0gaW4gYSByZWFsIHN5c3RlbSB5b3UnZCBoYXZlIHVzZXItYnVpbGRpbmcgcmVsYXRpb25zaGlwc1xuICAgICAgXG4gICAgICAvLyBHZXQgcmVzaWRlbmNlcyBmb3IgdGhlIHNlbGVjdGVkIGJ1aWxkaW5nc1xuICAgICAgY29uc3QgcmVzaWRlbmNlcyA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShzY2hlbWEucmVzaWRlbmNlcylcbiAgICAgICAgLndoZXJlKGluQXJyYXkoc2NoZW1hLnJlc2lkZW5jZXMuYnVpbGRpbmdJZCwgYnVpbGRpbmdJZHMpKTtcblxuICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHJlc2lkZW5jZSBhc3NpZ25tZW50cyBmb3IgdGhpcyB1c2VyXG4gICAgICBhd2FpdCBkYi5kZWxldGUoc2NoZW1hLnVzZXJSZXNpZGVuY2VzKS53aGVyZShlcShzY2hlbWEudXNlclJlc2lkZW5jZXMudXNlcklkLCB1c2VySWQpKTtcblxuICAgICAgLy8gQWRkIG5ldyByZXNpZGVuY2UgYXNzaWdubWVudHMgKG9uZSBwZXIgYnVpbGRpbmcgLSB0YWtpbmcgdGhlIGZpcnN0IHJlc2lkZW5jZSlcbiAgICAgIGlmIChyZXNpZGVuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgYnVpbGRpbmdUb1Jlc2lkZW5jZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgcmVzaWRlbmNlcy5mb3JFYWNoKHJlc2lkZW5jZSA9PiB7XG4gICAgICAgICAgaWYgKCFidWlsZGluZ1RvUmVzaWRlbmNlLmhhcyhyZXNpZGVuY2UuYnVpbGRpbmdJZCkpIHtcbiAgICAgICAgICAgIGJ1aWxkaW5nVG9SZXNpZGVuY2Uuc2V0KHJlc2lkZW5jZS5idWlsZGluZ0lkLCByZXNpZGVuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbmV3QXNzaWdubWVudHMgPSBBcnJheS5mcm9tKGJ1aWxkaW5nVG9SZXNpZGVuY2UudmFsdWVzKCkpLm1hcCgocmVzaWRlbmNlOiBhbnkpID0+ICh7XG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHJlc2lkZW5jZUlkOiByZXNpZGVuY2UuaWQsXG4gICAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogdXNlci5yb2xlID09PSAnbWFuYWdlcicgPyAnbWFuYWdlcicgOiAndGVuYW50JyxcbiAgICAgICAgICBzdGFydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdLFxuICAgICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgYXdhaXQgZGIuaW5zZXJ0KHNjaGVtYS51c2VyUmVzaWRlbmNlcykudmFsdWVzKG5ld0Fzc2lnbm1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnQnVpbGRpbmcgYXNzaWdubWVudHMgdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIGJ1aWxkaW5nSWRzLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHVwZGF0aW5nIGJ1aWxkaW5nIGFzc2lnbm1lbnRzOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHVwZGF0ZSBidWlsZGluZyBhc3NpZ25tZW50cycsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBHRVQgL2FwaS91c2Vycy86aWQvcmVzaWRlbmNlcyAtIEdldCB1c2VyJ3MgYWNjZXNzaWJsZSByZXNpZGVuY2VzLlxuICAgKi9cbiAgYXBwLmdldCgnL2FwaS91c2Vycy86aWQvcmVzaWRlbmNlcycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgY29uc3QgeyBpZDogdXNlcklkIH0gPSByZXEucGFyYW1zO1xuXG4gICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnQVVUSF9SRVFVSVJFRCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBVc2VycyBjYW4gb25seSBhY2Nlc3MgdGhlaXIgb3duIHJlc2lkZW5jZXMgdW5sZXNzIHRoZXkncmUgYWRtaW4vbWFuYWdlclxuICAgICAgaWYgKGN1cnJlbnRVc2VyLmlkICE9PSB1c2VySWQgJiYgIVsnYWRtaW4nLCAnbWFuYWdlciddLmluY2x1ZGVzKGN1cnJlbnRVc2VyLnJvbGUpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgZnVsbCByZXNpZGVuY2UgZGV0YWlscyB3aXRoIGJ1aWxkaW5nIGluZm9ybWF0aW9uXG4gICAgICBjb25zdCByZXNpZGVuY2VzV2l0aERldGFpbHMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJSZXNpZGVuY2VzV2l0aERldGFpbHModXNlcklkKTtcbiAgICAgIFxuICAgICAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIHRvIG1hdGNoIHRoZSBleHBlY3RlZCBmcm9udGVuZCBmb3JtYXRcbiAgICAgIGNvbnN0IHJlc2lkZW5jZXMgPSByZXNpZGVuY2VzV2l0aERldGFpbHMubWFwKGl0ZW0gPT4gKHtcbiAgICAgICAgaWQ6IGl0ZW0ucmVzaWRlbmNlLmlkLFxuICAgICAgICB1bml0TnVtYmVyOiBpdGVtLnJlc2lkZW5jZS51bml0TnVtYmVyLFxuICAgICAgICBmbG9vcjogaXRlbS5yZXNpZGVuY2UuZmxvb3IsXG4gICAgICAgIHNxdWFyZUZvb3RhZ2U6IGl0ZW0ucmVzaWRlbmNlLnNxdWFyZUZvb3RhZ2UsXG4gICAgICAgIGJlZHJvb21zOiBpdGVtLnJlc2lkZW5jZS5iZWRyb29tcyxcbiAgICAgICAgYmF0aHJvb21zOiBpdGVtLnJlc2lkZW5jZS5iYXRocm9vbXMsXG4gICAgICAgIGJhbGNvbnk6IGl0ZW0ucmVzaWRlbmNlLmJhbGNvbnksXG4gICAgICAgIHBhcmtpbmdTcGFjZU51bWJlcnM6IGl0ZW0ucmVzaWRlbmNlLnBhcmtpbmdTcGFjZU51bWJlcnMsXG4gICAgICAgIHN0b3JhZ2VTcGFjZU51bWJlcnM6IGl0ZW0ucmVzaWRlbmNlLnN0b3JhZ2VTcGFjZU51bWJlcnMsXG4gICAgICAgIGlzQWN0aXZlOiBpdGVtLnJlc2lkZW5jZS5pc0FjdGl2ZSxcbiAgICAgICAgYnVpbGRpbmdJZDogaXRlbS5yZXNpZGVuY2UuYnVpbGRpbmdJZCxcbiAgICAgICAgYnVpbGRpbmc6IHtcbiAgICAgICAgICBpZDogaXRlbS5idWlsZGluZy5pZCxcbiAgICAgICAgICBuYW1lOiBpdGVtLmJ1aWxkaW5nLm5hbWUsXG4gICAgICAgICAgYWRkcmVzczogaXRlbS5idWlsZGluZy5hZGRyZXNzLFxuICAgICAgICAgIGNpdHk6IGl0ZW0uYnVpbGRpbmcuY2l0eSxcbiAgICAgICAgICBwcm92aW5jZTogaXRlbS5idWlsZGluZy5wcm92aW5jZSxcbiAgICAgICAgICBwb3N0YWxDb2RlOiBpdGVtLmJ1aWxkaW5nLnBvc3RhbENvZGUsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG5cbiAgICAgIHJlcy5qc29uKHJlc2lkZW5jZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBnZXR0aW5nIHVzZXIgcmVzaWRlbmNlczonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBnZXQgdXNlciByZXNpZGVuY2VzJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEdFVCAvYXBpL3VzZXJzLzppZC9idWlsZGluZ3MgLSBHZXQgdXNlcidzIGFjY2Vzc2libGUgYnVpbGRpbmdzIGJhc2VkIG9uIHRoZWlyIHJlc2lkZW5jZXMuXG4gICAqL1xuICBhcHAuZ2V0KCcvYXBpL3VzZXJzLzppZC9idWlsZGluZ3MnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGNvbnN0IHsgaWQ6IHVzZXJJZCB9ID0gcmVxLnBhcmFtcztcblxuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVXNlcnMgY2FuIG9ubHkgYWNjZXNzIHRoZWlyIG93biBidWlsZGluZ3MgdW5sZXNzIHRoZXkncmUgYWRtaW4vbWFuYWdlclxuICAgICAgaWYgKGN1cnJlbnRVc2VyLmlkICE9PSB1c2VySWQgJiYgIVsnYWRtaW4nLCAnbWFuYWdlciddLmluY2x1ZGVzKGN1cnJlbnRVc2VyLnJvbGUpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdXNlcidzIHJlc2lkZW5jZXMgd2l0aCBidWlsZGluZyBpbmZvcm1hdGlvblxuICAgICAgY29uc3QgdXNlclJlc2lkZW5jZXMgPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KHtcbiAgICAgICAgICByZXNpZGVuY2VJZDogc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnJlc2lkZW5jZUlkLFxuICAgICAgICAgIGJ1aWxkaW5nSWQ6IHNjaGVtYS5yZXNpZGVuY2VzLmJ1aWxkaW5nSWQsXG4gICAgICAgIH0pXG4gICAgICAgIC5mcm9tKHNjaGVtYS51c2VyUmVzaWRlbmNlcylcbiAgICAgICAgLmlubmVySm9pbihzY2hlbWEucmVzaWRlbmNlcywgZXEoc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnJlc2lkZW5jZUlkLCBzY2hlbWEucmVzaWRlbmNlcy5pZCkpXG4gICAgICAgIC53aGVyZShhbmQoXG4gICAgICAgICAgZXEoc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnVzZXJJZCwgdXNlcklkKSxcbiAgICAgICAgICBlcShzY2hlbWEudXNlclJlc2lkZW5jZXMuaXNBY3RpdmUsIHRydWUpLFxuICAgICAgICAgIGVxKHNjaGVtYS5yZXNpZGVuY2VzLmlzQWN0aXZlLCB0cnVlKVxuICAgICAgICApKTtcbiAgICAgIFxuICAgICAgaWYgKCF1c2VyUmVzaWRlbmNlcyB8fCB1c2VyUmVzaWRlbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgYnVpbGRpbmdzOiBbXSB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHVuaXF1ZSBidWlsZGluZyBJRHMgZnJvbSB1c2VyJ3MgcmVzaWRlbmNlc1xuICAgICAgY29uc3QgYnVpbGRpbmdJZHMgPSBbLi4ubmV3IFNldCh1c2VyUmVzaWRlbmNlcy5tYXAodXIgPT4gdXIuYnVpbGRpbmdJZCkuZmlsdGVyKEJvb2xlYW4pKV07XG4gICAgICBcbiAgICAgIGlmIChidWlsZGluZ0lkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKHsgYnVpbGRpbmdzOiBbXSB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gRmV0Y2ggYnVpbGRpbmcgZGV0YWlscyB3aXRoIHN0YXRzIHVzaW5nIHRoZSBleGlzdGluZyBsb2dpYyBmcm9tIC9hcGkvbWFuYWdlci9idWlsZGluZ3NcbiAgICAgIGNvbnN0IGJ1aWxkaW5nRGV0YWlscyA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3Qoe1xuICAgICAgICAgIGlkOiBzY2hlbWEuYnVpbGRpbmdzLmlkLFxuICAgICAgICAgIG5hbWU6IHNjaGVtYS5idWlsZGluZ3MubmFtZSxcbiAgICAgICAgICBhZGRyZXNzOiBzY2hlbWEuYnVpbGRpbmdzLmFkZHJlc3MsXG4gICAgICAgICAgY2l0eTogc2NoZW1hLmJ1aWxkaW5ncy5jaXR5LFxuICAgICAgICAgIHByb3ZpbmNlOiBzY2hlbWEuYnVpbGRpbmdzLnByb3ZpbmNlLFxuICAgICAgICAgIHBvc3RhbENvZGU6IHNjaGVtYS5idWlsZGluZ3MucG9zdGFsQ29kZSxcbiAgICAgICAgICBidWlsZGluZ1R5cGU6IHNjaGVtYS5idWlsZGluZ3MuYnVpbGRpbmdUeXBlLFxuICAgICAgICAgIHllYXJCdWlsdDogc2NoZW1hLmJ1aWxkaW5ncy55ZWFyQnVpbHQsXG4gICAgICAgICAgdG90YWxGbG9vcnM6IHNjaGVtYS5idWlsZGluZ3MudG90YWxGbG9vcnMsXG4gICAgICAgICAgcGFya2luZ1NwYWNlczogc2NoZW1hLmJ1aWxkaW5ncy5wYXJraW5nU3BhY2VzLFxuICAgICAgICAgIHN0b3JhZ2VTcGFjZXM6IHNjaGVtYS5idWlsZGluZ3Muc3RvcmFnZVNwYWNlcyxcbiAgICAgICAgICBtYW5hZ2VtZW50Q29tcGFueTogc2NoZW1hLmJ1aWxkaW5ncy5tYW5hZ2VtZW50Q29tcGFueSxcbiAgICAgICAgICBhbWVuaXRpZXM6IHNjaGVtYS5idWlsZGluZ3MuYW1lbml0aWVzLFxuICAgICAgICAgIG9yZ2FuaXphdGlvbklkOiBzY2hlbWEuYnVpbGRpbmdzLm9yZ2FuaXphdGlvbklkLFxuICAgICAgICAgIG9yZ2FuaXphdGlvbk5hbWU6IHNjaGVtYS5vcmdhbml6YXRpb25zLm5hbWUsXG4gICAgICAgICAgb3JnYW5pemF0aW9uVHlwZTogc2NoZW1hLm9yZ2FuaXphdGlvbnMudHlwZSxcbiAgICAgICAgfSlcbiAgICAgICAgLmZyb20oc2NoZW1hLmJ1aWxkaW5ncylcbiAgICAgICAgLmxlZnRKb2luKHNjaGVtYS5vcmdhbml6YXRpb25zLCBlcShzY2hlbWEuYnVpbGRpbmdzLm9yZ2FuaXphdGlvbklkLCBzY2hlbWEub3JnYW5pemF0aW9ucy5pZCkpXG4gICAgICAgIC53aGVyZShhbmQoXG4gICAgICAgICAgaW5BcnJheShzY2hlbWEuYnVpbGRpbmdzLmlkLCBidWlsZGluZ0lkcyksXG4gICAgICAgICAgZXEoc2NoZW1hLmJ1aWxkaW5ncy5pc0FjdGl2ZSwgdHJ1ZSlcbiAgICAgICAgKSk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBzdGF0cyBmb3IgZWFjaCBidWlsZGluZ1xuICAgICAgY29uc3QgYnVpbGRpbmdzV2l0aFN0YXRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIGJ1aWxkaW5nRGV0YWlscy5tYXAoYXN5bmMgKGJ1aWxkaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgW3RvdGFsVW5pdHMsIG9jY3VwaWVkVW5pdHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgZGJcbiAgICAgICAgICAgICAgLnNlbGVjdCh7IGNvdW50OiBzcWw8bnVtYmVyPmBjb3VudCgqKWAgfSlcbiAgICAgICAgICAgICAgLmZyb20oc2NoZW1hLnJlc2lkZW5jZXMpXG4gICAgICAgICAgICAgIC53aGVyZShhbmQoZXEoc2NoZW1hLnJlc2lkZW5jZXMuYnVpbGRpbmdJZCwgYnVpbGRpbmcuaWQpLCBlcShzY2hlbWEucmVzaWRlbmNlcy5pc0FjdGl2ZSwgdHJ1ZSkpKVxuICAgICAgICAgICAgICAudGhlbihyZXN1bHQgPT4gcmVzdWx0WzBdPy5jb3VudCB8fCAwKSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGJcbiAgICAgICAgICAgICAgLnNlbGVjdCh7IGNvdW50OiBzcWw8bnVtYmVyPmBjb3VudChkaXN0aW5jdCAke3NjaGVtYS5yZXNpZGVuY2VzLmlkfSlgIH0pXG4gICAgICAgICAgICAgIC5mcm9tKHNjaGVtYS5yZXNpZGVuY2VzKVxuICAgICAgICAgICAgICAubGVmdEpvaW4oc2NoZW1hLnVzZXJSZXNpZGVuY2VzLCBlcShzY2hlbWEudXNlclJlc2lkZW5jZXMucmVzaWRlbmNlSWQsIHNjaGVtYS5yZXNpZGVuY2VzLmlkKSlcbiAgICAgICAgICAgICAgLndoZXJlKGFuZChcbiAgICAgICAgICAgICAgICBlcShzY2hlbWEucmVzaWRlbmNlcy5idWlsZGluZ0lkLCBidWlsZGluZy5pZCksXG4gICAgICAgICAgICAgICAgZXEoc2NoZW1hLnJlc2lkZW5jZXMuaXNBY3RpdmUsIHRydWUpLFxuICAgICAgICAgICAgICAgIGVxKHNjaGVtYS51c2VyUmVzaWRlbmNlcy5pc0FjdGl2ZSwgdHJ1ZSlcbiAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHJlc3VsdFswXT8uY291bnQgfHwgMCksXG4gICAgICAgICAgXSk7XG5cbiAgICAgICAgICBjb25zdCB2YWNhbnRVbml0cyA9IHRvdGFsVW5pdHMgLSBvY2N1cGllZFVuaXRzO1xuICAgICAgICAgIGNvbnN0IG9jY3VwYW5jeVJhdGUgPSB0b3RhbFVuaXRzID4gMCA/IChvY2N1cGllZFVuaXRzIC8gdG90YWxVbml0cykgKiAxMDAgOiAwO1xuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmJ1aWxkaW5nLFxuICAgICAgICAgICAgdG90YWxVbml0cyxcbiAgICAgICAgICAgIG9jY3VwaWVkVW5pdHMsXG4gICAgICAgICAgICB2YWNhbnRVbml0cyxcbiAgICAgICAgICAgIG9jY3VwYW5jeVJhdGUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIHJlcy5qc29uKHsgYnVpbGRpbmdzOiBidWlsZGluZ3NXaXRoU3RhdHMgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGdldHRpbmcgdXNlciBidWlsZGluZ3M6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZ2V0IHVzZXIgYnVpbGRpbmdzJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFBVVCAvYXBpL3VzZXJzLzppZC9yZXNpZGVuY2VzIC0gVXBkYXRlcyB1c2VyJ3MgcmVzaWRlbmNlIGFzc2lnbm1lbnRzLlxuICAgKiBBZG1pbjogY2FuIGFzc2lnbi9yZW1vdmUgYW55IHJlc2lkZW5jZVxuICAgKiBNYW5hZ2VyOiBjYW4gYXNzaWduL3JlbW92ZSByZXNpZGVuY2VzIHdpdGhpbiB0aGVpciBvcmdhbml6YXRpb25zIG9ubHkuXG4gICAqL1xuICBhcHAucHV0KCcvYXBpL3VzZXJzLzppZC9yZXNpZGVuY2VzJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gcmVxLnVzZXIgfHwgcmVxLnNlc3Npb24/LnVzZXI7XG4gICAgICBjb25zdCB7IGlkOiB1c2VySWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgICBjb25zdCB7IHJlc2lkZW5jZUFzc2lnbm1lbnRzIH0gPSByZXEuYm9keTsgLy8gQXJyYXkgb2YgeyByZXNpZGVuY2VJZCwgcmVsYXRpb25zaGlwVHlwZSwgc3RhcnREYXRlLCBlbmREYXRlIH1cblxuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhZG1pbnMgYW5kIG1hbmFnZXJzIGNhbiBtb2RpZnkgcmVzaWRlbmNlIGFzc2lnbm1lbnRzXG4gICAgICBpZiAoIVsnYWRtaW4nLCAnbWFuYWdlciddLmluY2x1ZGVzKGN1cnJlbnRVc2VyLnJvbGUpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucyB0byBtb2RpZnkgcmVzaWRlbmNlIGFzc2lnbm1lbnRzJyxcbiAgICAgICAgICBjb2RlOiAnSU5TVUZGSUNJRU5UX1BFUk1JU1NJT05TJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXNlcklkIHx8ICFBcnJheS5pc0FycmF5KHJlc2lkZW5jZUFzc2lnbm1lbnRzKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIElEIGFuZCByZXNpZGVuY2UgYXNzaWdubWVudHMgYXJyYXkgYXJlIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9SRVFVRVNUJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZlcmlmeSB1c2VyIGV4aXN0c1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlcih1c2VySWQpO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJyxcbiAgICAgICAgICBjb2RlOiAnVVNFUl9OT1RfRk9VTkQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIG1hbmFnZXJzLCB2ZXJpZnkgdGhleSBjYW4gYWNjZXNzIGFsbCByZXF1ZXN0ZWQgcmVzaWRlbmNlc1xuICAgICAgaWYgKGN1cnJlbnRVc2VyLnJvbGUgPT09ICdtYW5hZ2VyJykge1xuICAgICAgICBmb3IgKGNvbnN0IGFzc2lnbm1lbnQgb2YgcmVzaWRlbmNlQXNzaWdubWVudHMpIHtcbiAgICAgICAgICAvLyBHZXQgdGhlIGJ1aWxkaW5nIGZvciB0aGlzIHJlc2lkZW5jZVxuICAgICAgICAgIGNvbnN0IHJlc2lkZW5jZSA9IGF3YWl0IGRiXG4gICAgICAgICAgICAuc2VsZWN0KHsgYnVpbGRpbmdJZDogc2NoZW1hLnJlc2lkZW5jZXMuYnVpbGRpbmdJZCB9KVxuICAgICAgICAgICAgLmZyb20oc2NoZW1hLnJlc2lkZW5jZXMpXG4gICAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLnJlc2lkZW5jZXMuaWQsIGFzc2lnbm1lbnQucmVzaWRlbmNlSWQpKVxuICAgICAgICAgICAgLmxpbWl0KDEpO1xuXG4gICAgICAgICAgaWYgKHJlc2lkZW5jZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGBSZXNpZGVuY2UgJHthc3NpZ25tZW50LnJlc2lkZW5jZUlkfSBub3QgZm91bmRgLFxuICAgICAgICAgICAgICBjb2RlOiAnUkVTSURFTkNFX05PVF9GT1VORCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiBtYW5hZ2VyIGhhcyBhY2Nlc3MgdG8gdGhpcyBidWlsZGluZ1xuICAgICAgICAgIC8vIEdldCBidWlsZGluZ3MgYWNjZXNzaWJsZSB0byB0aGlzIG1hbmFnZXIgdGhyb3VnaCB0aGVpciBvcmdhbml6YXRpb25zXG4gICAgICAgICAgY29uc3QgbWFuYWdlck9yZ3MgPSBhd2FpdCBkYlxuICAgICAgICAgICAgLnNlbGVjdCh7IG9yZ2FuaXphdGlvbklkOiBzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uSWQgfSlcbiAgICAgICAgICAgIC5mcm9tKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucylcbiAgICAgICAgICAgIC53aGVyZShcbiAgICAgICAgICAgICAgYW5kKFxuICAgICAgICAgICAgICAgIGVxKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy51c2VySWQsIGN1cnJlbnRVc2VyLmlkKSxcbiAgICAgICAgICAgICAgICBlcShzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMuaXNBY3RpdmUsIHRydWUpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCBvcmdJZHMgPSBtYW5hZ2VyT3Jncy5tYXAoKG9yZykgPT4gb3JnLm9yZ2FuaXphdGlvbklkKTtcblxuICAgICAgICAgIGNvbnN0IGFjY2Vzc2libGVCdWlsZGluZ3MgPVxuICAgICAgICAgICAgb3JnSWRzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgPyBhd2FpdCBkYlxuICAgICAgICAgICAgICAgICAgLnNlbGVjdCh7IGlkOiBzY2hlbWEuYnVpbGRpbmdzLmlkIH0pXG4gICAgICAgICAgICAgICAgICAuZnJvbShzY2hlbWEuYnVpbGRpbmdzKVxuICAgICAgICAgICAgICAgICAgLndoZXJlKFxuICAgICAgICAgICAgICAgICAgICBhbmQoXG4gICAgICAgICAgICAgICAgICAgICAgaW5BcnJheShzY2hlbWEuYnVpbGRpbmdzLm9yZ2FuaXphdGlvbklkLCBvcmdJZHMpLFxuICAgICAgICAgICAgICAgICAgICAgIGVxKHNjaGVtYS5idWlsZGluZ3MuaXNBY3RpdmUsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgOiBbXTtcblxuICAgICAgICAgIGNvbnN0IGhhc0FjY2VzcyA9IGFjY2Vzc2libGVCdWlsZGluZ3Muc29tZSgoYikgPT4gYi5pZCA9PT0gcmVzaWRlbmNlWzBdLmJ1aWxkaW5nSWQpO1xuICAgICAgICAgIGlmICghaGFzQWNjZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe1xuICAgICAgICAgICAgICBtZXNzYWdlOiBgSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zIGZvciByZXNpZGVuY2UgJHthc3NpZ25tZW50LnJlc2lkZW5jZUlkfWAsXG4gICAgICAgICAgICAgIGNvZGU6ICdJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBleGlzdGluZyByZXNpZGVuY2UgYXNzaWdubWVudHNcbiAgICAgIGF3YWl0IGRiLmRlbGV0ZShzY2hlbWEudXNlclJlc2lkZW5jZXMpLndoZXJlKGVxKHNjaGVtYS51c2VyUmVzaWRlbmNlcy51c2VySWQsIHVzZXJJZCkpO1xuXG4gICAgICAvLyBBZGQgbmV3IHJlc2lkZW5jZSBhc3NpZ25tZW50c1xuICAgICAgaWYgKHJlc2lkZW5jZUFzc2lnbm1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbmV3QXNzaWdubWVudHMgPSByZXNpZGVuY2VBc3NpZ25tZW50cy5tYXAoKGFzc2lnbm1lbnQ6IGFueSkgPT4gKHtcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgcmVzaWRlbmNlSWQ6IGFzc2lnbm1lbnQucmVzaWRlbmNlSWQsXG4gICAgICAgICAgcmVsYXRpb25zaGlwVHlwZTogYXNzaWdubWVudC5yZWxhdGlvbnNoaXBUeXBlIHx8ICd0ZW5hbnQnLFxuICAgICAgICAgIHN0YXJ0RGF0ZTogYXNzaWdubWVudC5zdGFydERhdGUgfHwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXG4gICAgICAgICAgZW5kRGF0ZTogYXNzaWdubWVudC5lbmREYXRlIHx8IG51bGwsXG4gICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBhd2FpdCBkYi5pbnNlcnQoc2NoZW1hLnVzZXJSZXNpZGVuY2VzKS52YWx1ZXMobmV3QXNzaWdubWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdSZXNpZGVuY2UgYXNzaWdubWVudHMgdXBkYXRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIGFzc2lnbm1lbnRDb3VudDogcmVzaWRlbmNlQXNzaWdubWVudHMubGVuZ3RoLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHVwZGF0aW5nIHJlc2lkZW5jZSBhc3NpZ25tZW50czonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgcmVzaWRlbmNlIGFzc2lnbm1lbnRzJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEdFVCAvYXBpL3VzZXJzL21lL29yZ2FuaXphdGlvbnMgLSBHZXQgb3JnYW5pemF0aW9ucyBhY2Nlc3NpYmxlIHRvIGN1cnJlbnQgdXNlci5cbiAgICogVXNlZCBieSBpbnZpdGUgZm9ybSB0byBwb3B1bGF0ZSBvcmdhbml6YXRpb24gZHJvcGRvd24uXG4gICAqL1xuICBhcHAuZ2V0KCcvYXBpL3VzZXJzL21lL29yZ2FuaXphdGlvbnMnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdBVVRIX1JFUVVJUkVEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIEZldGNoaW5nIHVzZXItYWNjZXNzaWJsZSBvcmdhbml6YXRpb25zIGZvciAke2N1cnJlbnRVc2VyLmVtYWlsfSAoJHtjdXJyZW50VXNlci5yb2xlfSlgKTtcblxuICAgICAgLy8gR2V0IG9yZ2FuaXphdGlvbnMgYmFzZWQgb24gdXNlciByb2xlIC0gc2FtZSBsb2dpYyBhcyAvYXBpL29yZ2FuaXphdGlvbnNcbiAgICAgIGxldCBvcmdhbml6YXRpb25zUXVlcnk7XG5cbiAgICAgIGlmIChjdXJyZW50VXNlci5yb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgIC8vIEFkbWluIGNhbiBzZWUgYWxsIG9yZ2FuaXphdGlvbnNcbiAgICAgICAgb3JnYW5pemF0aW9uc1F1ZXJ5ID0gZGJcbiAgICAgICAgICAuc2VsZWN0KHtcbiAgICAgICAgICAgIGlkOiBzY2hlbWEub3JnYW5pemF0aW9ucy5pZCxcbiAgICAgICAgICAgIG5hbWU6IHNjaGVtYS5vcmdhbml6YXRpb25zLm5hbWUsXG4gICAgICAgICAgICB0eXBlOiBzY2hlbWEub3JnYW5pemF0aW9ucy50eXBlLFxuICAgICAgICAgICAgYWRkcmVzczogc2NoZW1hLm9yZ2FuaXphdGlvbnMuYWRkcmVzcyxcbiAgICAgICAgICAgIGNpdHk6IHNjaGVtYS5vcmdhbml6YXRpb25zLmNpdHksXG4gICAgICAgICAgICBwcm92aW5jZTogc2NoZW1hLm9yZ2FuaXphdGlvbnMucHJvdmluY2UsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBzY2hlbWEub3JnYW5pemF0aW9ucy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgcGhvbmU6IHNjaGVtYS5vcmdhbml6YXRpb25zLnBob25lLFxuICAgICAgICAgICAgZW1haWw6IHNjaGVtYS5vcmdhbml6YXRpb25zLmVtYWlsLFxuICAgICAgICAgICAgd2Vic2l0ZTogc2NoZW1hLm9yZ2FuaXphdGlvbnMud2Vic2l0ZSxcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbk51bWJlcjogc2NoZW1hLm9yZ2FuaXphdGlvbnMucmVnaXN0cmF0aW9uTnVtYmVyLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHNjaGVtYS5vcmdhbml6YXRpb25zLmlzQWN0aXZlLFxuICAgICAgICAgICAgY3JlYXRlZEF0OiBzY2hlbWEub3JnYW5pemF0aW9ucy5jcmVhdGVkQXQsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZnJvbShzY2hlbWEub3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLm9yZ2FuaXphdGlvbnMuaXNBY3RpdmUsIHRydWUpKVxuICAgICAgICAgIC5vcmRlckJ5KHNjaGVtYS5vcmdhbml6YXRpb25zLm5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXIgdXNlcnMgc2VlIG9yZ2FuaXphdGlvbnMgdGhleSBoYXZlIGFjY2VzcyB0byB0aHJvdWdoIHVzZXJfb3JnYW5pemF0aW9uc1xuICAgICAgICBvcmdhbml6YXRpb25zUXVlcnkgPSBkYlxuICAgICAgICAgIC5zZWxlY3Qoe1xuICAgICAgICAgICAgaWQ6IHNjaGVtYS5vcmdhbml6YXRpb25zLmlkLFxuICAgICAgICAgICAgbmFtZTogc2NoZW1hLm9yZ2FuaXphdGlvbnMubmFtZSxcbiAgICAgICAgICAgIHR5cGU6IHNjaGVtYS5vcmdhbml6YXRpb25zLnR5cGUsXG4gICAgICAgICAgICBhZGRyZXNzOiBzY2hlbWEub3JnYW5pemF0aW9ucy5hZGRyZXNzLFxuICAgICAgICAgICAgY2l0eTogc2NoZW1hLm9yZ2FuaXphdGlvbnMuY2l0eSxcbiAgICAgICAgICAgIHByb3ZpbmNlOiBzY2hlbWEub3JnYW5pemF0aW9ucy5wcm92aW5jZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IHNjaGVtYS5vcmdhbml6YXRpb25zLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBwaG9uZTogc2NoZW1hLm9yZ2FuaXphdGlvbnMucGhvbmUsXG4gICAgICAgICAgICBlbWFpbDogc2NoZW1hLm9yZ2FuaXphdGlvbnMuZW1haWwsXG4gICAgICAgICAgICB3ZWJzaXRlOiBzY2hlbWEub3JnYW5pemF0aW9ucy53ZWJzaXRlLFxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uTnVtYmVyOiBzY2hlbWEub3JnYW5pemF0aW9ucy5yZWdpc3RyYXRpb25OdW1iZXIsXG4gICAgICAgICAgICBpc0FjdGl2ZTogc2NoZW1hLm9yZ2FuaXphdGlvbnMuaXNBY3RpdmUsXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IHNjaGVtYS5vcmdhbml6YXRpb25zLmNyZWF0ZWRBdCxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mcm9tKHNjaGVtYS5vcmdhbml6YXRpb25zKVxuICAgICAgICAgIC5pbm5lckpvaW4oc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLCBlcShzY2hlbWEub3JnYW5pemF0aW9ucy5pZCwgc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbklkKSlcbiAgICAgICAgICAud2hlcmUoXG4gICAgICAgICAgICBhbmQoXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS5vcmdhbml6YXRpb25zLmlzQWN0aXZlLCB0cnVlKSxcbiAgICAgICAgICAgICAgZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLnVzZXJJZCwgY3VycmVudFVzZXIuaWQpLFxuICAgICAgICAgICAgICBlcShzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMuaXNBY3RpdmUsIHRydWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICAgIC5vcmRlckJ5KHNjaGVtYS5vcmdhbml6YXRpb25zLm5hbWUpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBhY2Nlc3NpYmxlT3JnYW5pemF0aW9ucyA9IGF3YWl0IG9yZ2FuaXphdGlvbnNRdWVyeTtcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgRm91bmQgJHthY2Nlc3NpYmxlT3JnYW5pemF0aW9ucy5sZW5ndGh9IG9yZ2FuaXphdGlvbnMgZm9yIHVzZXIgJHtjdXJyZW50VXNlci5pZH1gKTtcblxuICAgICAgLy8gUmV0dXJuIGFycmF5IGRpcmVjdGx5IChub3Qgd3JhcHBlZCBpbiBvYmplY3QpIC0gc2FtZSBmb3JtYXQgYXMgL2FwaS9vcmdhbml6YXRpb25zXG4gICAgICByZXMuanNvbihhY2Nlc3NpYmxlT3JnYW5pemF0aW9ucyk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZldGNoaW5nIHVzZXIgb3JnYW5pemF0aW9uczonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCB1c2VyIG9yZ2FuaXphdGlvbnMnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogR0VUIC9hcGkvdXNlcnMvbWUvZGF0YS1leHBvcnQgLSBEb3dubG9hZCB1c2VyIGRhdGEgZm9yIExhdyAyNSBjb21wbGlhbmNlLlxuICAgKi9cbiAgYXBwLmdldCgnL2FwaS91c2Vycy9tZS9kYXRhLWV4cG9ydCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IGFsbCB1c2VyIGRhdGEgZm9yIGV4cG9ydFxuICAgICAgY29uc3QgdXNlckRhdGEgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXIoY3VycmVudFVzZXIuaWQpO1xuICAgICAgaWYgKCF1c2VyRGF0YSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcsXG4gICAgICAgICAgY29kZTogJ1VTRVJfTk9UX0ZPVU5EJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBzZW5zaXRpdmUgZmllbGRzXG4gICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi51c2VyRGF0YUV4cG9ydCB9ID0gdXNlckRhdGE7XG5cbiAgICAgIC8vIEdldCByZWxhdGVkIGRhdGFcbiAgICAgIGNvbnN0IFtvcmdhbml6YXRpb25zLCByZXNpZGVuY2VzLCBiaWxscywgZG9jdW1lbnRzLCBub3RpZmljYXRpb25zLCBtYWludGVuYW5jZVJlcXVlc3RzXSA9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICBkYlxuICAgICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgICAuZnJvbShzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMpXG4gICAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLnVzZXJJZCwgY3VycmVudFVzZXIuaWQpKSxcbiAgICAgICAgICBkYlxuICAgICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgICAuZnJvbShzY2hlbWEudXNlclJlc2lkZW5jZXMpXG4gICAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnVzZXJJZCwgY3VycmVudFVzZXIuaWQpKSxcbiAgICAgICAgICBkYlxuICAgICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgICAuZnJvbShzY2hlbWEuYmlsbHMpXG4gICAgICAgICAgICAuaW5uZXJKb2luKFxuICAgICAgICAgICAgICBzY2hlbWEudXNlclJlc2lkZW5jZXMsXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS5iaWxscy5yZXNpZGVuY2VJZCwgc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnJlc2lkZW5jZUlkKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLndoZXJlKGVxKHNjaGVtYS51c2VyUmVzaWRlbmNlcy51c2VySWQsIGN1cnJlbnRVc2VyLmlkKSksXG4gICAgICAgICAgZGJcbiAgICAgICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAgICAgLmZyb20oc2NoZW1hLmRvY3VtZW50cylcbiAgICAgICAgICAgIC53aGVyZShlcShzY2hlbWEuZG9jdW1lbnRzLnVwbG9hZGVkQnlJZCwgY3VycmVudFVzZXIuaWQpKSxcbiAgICAgICAgICBkYlxuICAgICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgICAuZnJvbShzY2hlbWEubm90aWZpY2F0aW9ucylcbiAgICAgICAgICAgIC53aGVyZShlcShzY2hlbWEubm90aWZpY2F0aW9ucy51c2VySWQsIGN1cnJlbnRVc2VyLmlkKSksXG4gICAgICAgICAgZGJcbiAgICAgICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAgICAgLmZyb20oc2NoZW1hLm1haW50ZW5hbmNlUmVxdWVzdHMpXG4gICAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLm1haW50ZW5hbmNlUmVxdWVzdHMuc3VibWl0dGVkQnksIGN1cnJlbnRVc2VyLmlkKSksXG4gICAgICAgIF0pO1xuXG4gICAgICBjb25zdCBleHBvcnREYXRhID0ge1xuICAgICAgICBwZXJzb25hbEluZm9ybWF0aW9uOiB1c2VyRGF0YUV4cG9ydCxcbiAgICAgICAgb3JnYW5pemF0aW9ucyxcbiAgICAgICAgcmVzaWRlbmNlcyxcbiAgICAgICAgYmlsbHM6IGJpbGxzLm1hcCgoYikgPT4gYi5iaWxscyksXG4gICAgICAgIGRvY3VtZW50czogZG9jdW1lbnRzLFxuICAgICAgICBub3RpZmljYXRpb25zLFxuICAgICAgICBtYWludGVuYW5jZVJlcXVlc3RzLFxuICAgICAgICBleHBvcnREYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIG5vdGU6ICdUaGlzIGV4cG9ydCBjb250YWlucyBhbGwgcGVyc29uYWwgZGF0YSB3ZSBoYXZlIG9uIGZpbGUgZm9yIHlvdSBpbiBjb21wbGlhbmNlIHdpdGggUXVlYmVjIExhdyAyNS4nLFxuICAgICAgfTtcblxuICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJlcy5zZXRIZWFkZXIoXG4gICAgICAgICdDb250ZW50LURpc3Bvc2l0aW9uJyxcbiAgICAgICAgYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPVwidXNlci1kYXRhLWV4cG9ydC0ke2N1cnJlbnRVc2VyLmlkfS0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdfS5qc29uXCJgXG4gICAgICApO1xuICAgICAgcmVzLmpzb24oZXhwb3J0RGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGV4cG9ydGluZyB1c2VyIGRhdGE6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZXhwb3J0IHVzZXIgZGF0YScsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBQT1NUIC9hcGkvdXNlcnMvbWUvZGVsZXRlLWFjY291bnQgLSBDb21wbGV0ZSBhY2NvdW50IGRlbGV0aW9uIGZvciBMYXcgMjUgY29tcGxpYW5jZS5cbiAgICovXG4gIGFwcC5wb3N0KCcvYXBpL3VzZXJzL21lL2RlbGV0ZS1hY2NvdW50JywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gcmVxLnVzZXIgfHwgcmVxLnNlc3Npb24/LnVzZXI7XG4gICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnQVVUSF9SRVFVSVJFRCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGNvbmZpcm1FbWFpbCwgcmVhc29uIH0gPSByZXEuYm9keTtcblxuICAgICAgLy8gVmVyaWZ5IGVtYWlsIGNvbmZpcm1hdGlvblxuICAgICAgaWYgKGNvbmZpcm1FbWFpbCAhPT0gY3VycmVudFVzZXIuZW1haWwpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnRW1haWwgY29uZmlybWF0aW9uIGRvZXMgbm90IG1hdGNoJyxcbiAgICAgICAgICBjb2RlOiAnRU1BSUxfTUlTTUFUQ0gnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVsZXRlIGFsbCByZWxhdGVkIGRhdGEgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgdG8gaGFuZGxlIGZvcmVpZ24ga2V5IGNvbnN0cmFpbnRzXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIC8vIERlbGV0ZSB1c2VyIHJlbGF0aW9uc2hpcHNcbiAgICAgICAgZGJcbiAgICAgICAgICAuZGVsZXRlKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLnVzZXJJZCwgY3VycmVudFVzZXIuaWQpKSxcbiAgICAgICAgZGIuZGVsZXRlKHNjaGVtYS51c2VyUmVzaWRlbmNlcykud2hlcmUoZXEoc2NoZW1hLnVzZXJSZXNpZGVuY2VzLnVzZXJJZCwgY3VycmVudFVzZXIuaWQpKSxcbiAgICAgICAgZGJcbiAgICAgICAgICAuZGVsZXRlKHNjaGVtYS5kb2N1bWVudHMpXG4gICAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5kb2N1bWVudHMudXBsb2FkZWRCeUlkLCBjdXJyZW50VXNlci5pZCkpLFxuXG4gICAgICAgIC8vIERlbGV0ZSB1c2VyLWNyZWF0ZWQgY29udGVudFxuICAgICAgICBkYi5kZWxldGUoc2NoZW1hLm5vdGlmaWNhdGlvbnMpLndoZXJlKGVxKHNjaGVtYS5ub3RpZmljYXRpb25zLnVzZXJJZCwgY3VycmVudFVzZXIuaWQpKSxcbiAgICAgICAgZGJcbiAgICAgICAgICAuZGVsZXRlKHNjaGVtYS5tYWludGVuYW5jZVJlcXVlc3RzKVxuICAgICAgICAgIC53aGVyZShlcShzY2hlbWEubWFpbnRlbmFuY2VSZXF1ZXN0cy5zdWJtaXR0ZWRCeSwgY3VycmVudFVzZXIuaWQpKSxcblxuICAgICAgICAvLyBEZWxldGUgaW52aXRhdGlvbnNcbiAgICAgICAgZGIuZGVsZXRlKHNjaGVtYS5pbnZpdGF0aW9ucykud2hlcmUoZXEoc2NoZW1hLmludml0YXRpb25zLmVtYWlsLCBjdXJyZW50VXNlci5lbWFpbCkpLFxuICAgICAgXSk7XG5cbiAgICAgIC8vIEZpbmFsbHksIGRlbGV0ZSB0aGUgdXNlciBhY2NvdW50XG4gICAgICBhd2FpdCBkYi5kZWxldGUoc2NoZW1hLnVzZXJzKS53aGVyZShlcShzY2hlbWEudXNlcnMuaWQsIGN1cnJlbnRVc2VyLmlkKSk7XG5cbiAgICAgIC8vIExvZyB0aGUgZGVsZXRpb24gZm9yIGF1ZGl0IHB1cnBvc2VzXG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYFVzZXIgYWNjb3VudCBkZWxldGVkOiAke2N1cnJlbnRVc2VyLmVtYWlsfSAoJHtjdXJyZW50VXNlci5pZH0pLiBSZWFzb246ICR7cmVhc29uIHx8ICdOb3QgcHJvdmlkZWQnfWBcbiAgICAgICk7XG5cbiAgICAgIC8vIENsZWFyIHNlc3Npb25cbiAgICAgIGlmIChyZXEuc2Vzc2lvbikge1xuICAgICAgICByZXEuc2Vzc2lvbi5kZXN0cm95KChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBkZXN0cm95IHNlc3Npb24gYWZ0ZXIgYWNjb3VudCBkZWxldGlvbjonLCBlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAnQWNjb3VudCBzdWNjZXNzZnVsbHkgZGVsZXRlZC4gQWxsIHBlcnNvbmFsIGRhdGEgaGFzIGJlZW4gcGVybWFuZW50bHkgcmVtb3ZlZCBmcm9tIG91ciBzeXN0ZW1zLicsXG4gICAgICAgIGRlbGV0aW9uRGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGRlbGV0aW5nIGFjY291bnQ6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZGVsZXRlIGFjY291bnQuIFBsZWFzZSBjb250YWN0IHN1cHBvcnQuJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFBVVCAvYXBpL3VzZXJzL21lIC0gVXBkYXRlIGN1cnJlbnQgdXNlcidzIHByb2ZpbGUuXG4gICAqL1xuICBhcHAucHV0KCcvYXBpL3VzZXJzL21lJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gcmVxLnVzZXIgfHwgcmVxLnNlc3Npb24/LnVzZXI7XG4gICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnQVVUSF9SRVFVSVJFRCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGF0ZSB0aGUgdXBkYXRlIGRhdGEgKGV4Y2x1ZGluZyBwYXNzd29yZCB1cGRhdGVzIGZvciBzZWN1cml0eSlcbiAgICAgIGNvbnN0IHVwZGF0ZVNjaGVtYSA9IGluc2VydFVzZXJTY2hlbWFcbiAgICAgICAgLnBhcnRpYWwoKVxuICAgICAgICAub21pdCh7IHBhc3N3b3JkOiB0cnVlLCBpZDogdHJ1ZSwgcm9sZTogdHJ1ZSB9KTtcbiAgICAgIGNvbnN0IHZhbGlkYXRlZERhdGEgPSB1cGRhdGVTY2hlbWEucGFyc2UocmVxLmJvZHkpO1xuXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgc3RvcmFnZS51cGRhdGVVc2VyKGN1cnJlbnRVc2VyLmlkLCB7XG4gICAgICAgIC4uLnZhbGlkYXRlZERhdGEsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJyxcbiAgICAgICAgICBjb2RlOiAnVVNFUl9OT1RfRk9VTkQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBiZWZvcmUgc2VuZGluZyByZXNwb25zZVxuICAgICAgY29uc3QgeyBwYXNzd29yZCwgLi4udXNlcldpdGhvdXRQYXNzd29yZCB9ID0gdXNlcjtcbiAgICAgIHJlcy5qc29uKHVzZXJXaXRob3V0UGFzc3dvcmQpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciB1cGRhdGluZyB1c2VyIHByb2ZpbGU6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gdXBkYXRlIHByb2ZpbGUnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUE9TVCAvYXBpL3VzZXJzLzppZC9kZWxldGUtYWNjb3VudCAtIFJFU1RSSUNURUQgQWRtaW4gZW5kcG9pbnQgdG8gZGVsZXRlIGFueSB1c2VyIGFjY291bnQuXG4gICAqIFNBRkVUWTogUmVxdWlyZXMgZW1haWwgY29uZmlybWF0aW9uIGFuZCBkZWxldGlvbiByZWFzb24gZm9yIGF1ZGl0IHRyYWlsLlxuICAgKiBXQVJOSU5HOiBUaGlzIGlzIGEgcGVybWFuZW50IG9wZXJhdGlvbiB0aGF0IHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gZXhjZXB0aW9uYWwgY2FzZXMuXG4gICAqL1xuICBhcHAucG9zdCgnL2FwaS91c2Vycy86aWQvZGVsZXRlLWFjY291bnQnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGNvbnN0IHsgaWQ6IHRhcmdldFVzZXJJZCB9ID0gcmVxLnBhcmFtcztcblxuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhZG1pbnMgY2FuIGRlbGV0ZSBvdGhlciB1c2VycycgYWNjb3VudHNcbiAgICAgIGlmIChjdXJyZW50VXNlci5yb2xlICE9PSAnYWRtaW4nKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ09ubHkgYWRtaW5pc3RyYXRvcnMgY2FuIGRlbGV0ZSB1c2VyIGFjY291bnRzJyxcbiAgICAgICAgICBjb2RlOiAnSU5TVUZGSUNJRU5UX1BFUk1JU1NJT05TJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFkZGl0aW9uYWwgc2FmZXR5IGNoZWNrOiBMb2cgdGhpcyBjcml0aWNhbCBvcGVyYXRpb25cbiAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPICBDUklUSUNBTDogQWRtaW4gJHtjdXJyZW50VXNlci5lbWFpbH0gYXR0ZW1wdGluZyB0byBkZWxldGUgdXNlciAke3RhcmdldFVzZXJJZH1gKTtcblxuICAgICAgaWYgKCF0YXJnZXRVc2VySWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciBJRCBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0lOVkFMSURfUkVRVUVTVCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBWZXJpZnkgdGFyZ2V0IHVzZXIgZXhpc3RzXG4gICAgICBjb25zdCB0YXJnZXRVc2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyKHRhcmdldFVzZXJJZCk7XG4gICAgICBpZiAoIXRhcmdldFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciBub3QgZm91bmQnLFxuICAgICAgICAgIGNvZGU6ICdVU0VSX05PVF9GT1VORCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGNvbmZpcm1FbWFpbCwgcmVhc29uIH0gPSByZXEuYm9keTtcblxuICAgICAgLy8gVmVyaWZ5IGVtYWlsIGNvbmZpcm1hdGlvblxuICAgICAgaWYgKGNvbmZpcm1FbWFpbCAhPT0gdGFyZ2V0VXNlci5lbWFpbCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdFbWFpbCBjb25maXJtYXRpb24gZG9lcyBub3QgbWF0Y2gnLFxuICAgICAgICAgIGNvZGU6ICdFTUFJTF9NSVNNQVRDSCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBEZWxldGUgYWxsIHJlbGF0ZWQgZGF0YSBpbiB0aGUgY29ycmVjdCBvcmRlciB0byBoYW5kbGUgZm9yZWlnbiBrZXkgY29uc3RyYWludHNcbiAgICAgIGNvbnN0IGRlbGV0aW9uUHJvbWlzZXMgPSBbXG4gICAgICAgIC8vIERlbGV0ZSB1c2VyIHJlbGF0aW9uc2hpcHNcbiAgICAgICAgZGJcbiAgICAgICAgICAuZGVsZXRlKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLnVzZXJJZCwgdGFyZ2V0VXNlcklkKSksXG4gICAgICAgIGRiLmRlbGV0ZShzY2hlbWEudXNlclJlc2lkZW5jZXMpLndoZXJlKGVxKHNjaGVtYS51c2VyUmVzaWRlbmNlcy51c2VySWQsIHRhcmdldFVzZXJJZCkpLFxuICAgICAgICBkYlxuICAgICAgICAgIC5kZWxldGUoc2NoZW1hLmRvY3VtZW50cylcbiAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLmRvY3VtZW50cy51cGxvYWRlZEJ5SWQsIHRhcmdldFVzZXJJZCkpLFxuXG4gICAgICAgIC8vIERlbGV0ZSBpbnZpdGF0aW9uc1xuICAgICAgICBkYi5kZWxldGUoc2NoZW1hLmludml0YXRpb25zKS53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuZW1haWwsIHRhcmdldFVzZXIuZW1haWwpKSxcbiAgICAgICAgXG4gICAgICAgIC8vIERlbGV0ZSBkZW1hbmRzIGFuZCByZWxhdGVkIGNvbW1lbnRzIChtdXN0IGJlIGRvbmUgYmVmb3JlIGRlbGV0aW5nIHVzZXIpXG4gICAgICAgIGRiLmRlbGV0ZShzY2hlbWEuZGVtYW5kQ29tbWVudHMpLndoZXJlKGVxKHNjaGVtYS5kZW1hbmRDb21tZW50cy5jb21tZW50ZXJJZCwgdGFyZ2V0VXNlcklkKSksXG4gICAgICAgIGRiLmRlbGV0ZShzY2hlbWEuZGVtYW5kcykud2hlcmUoZXEoc2NoZW1hLmRlbWFuZHMuc3VibWl0dGVySWQsIHRhcmdldFVzZXJJZCkpLFxuICAgICAgICBcbiAgICAgICAgLy8gRGVsZXRlIGJ1Z3MgYW5kIGZlYXR1cmUgcmVxdWVzdHMgc3VibWl0dGVkIGJ5IHRoZSB1c2VyXG4gICAgICAgIGRiLmRlbGV0ZShzY2hlbWEuYnVncykud2hlcmUoZXEoc2NoZW1hLmJ1Z3MuY3JlYXRlZEJ5LCB0YXJnZXRVc2VySWQpKSxcbiAgICAgICAgZGIuZGVsZXRlKHNjaGVtYS5mZWF0dXJlUmVxdWVzdHMpLndoZXJlKGVxKHNjaGVtYS5mZWF0dXJlUmVxdWVzdHMuY3JlYXRlZEJ5LCB0YXJnZXRVc2VySWQpKSxcbiAgICAgICAgZGIuZGVsZXRlKHNjaGVtYS5mZWF0dXJlUmVxdWVzdFVwdm90ZXMpLndoZXJlKGVxKHNjaGVtYS5mZWF0dXJlUmVxdWVzdFVwdm90ZXMudXNlcklkLCB0YXJnZXRVc2VySWQpKSxcbiAgICAgIF07XG5cbiAgICAgIC8vIFRyeSB0byBkZWxldGUgZnJvbSBvcHRpb25hbCB0YWJsZXMgdGhhdCBtaWdodCBub3QgZXhpc3RcbiAgICAgIGNvbnN0IG9wdGlvbmFsRGVsZXRpb25zID0gW1xuICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGRiXG4gICAgICAgICAgICAgIC5kZWxldGUoc2NoZW1hLm5vdGlmaWNhdGlvbnMpXG4gICAgICAgICAgICAgIC53aGVyZShlcShzY2hlbWEubm90aWZpY2F0aW9ucy51c2VySWQsIHRhcmdldFVzZXJJZCkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5jYXVzZT8uY29kZSA9PT0gJzQyUDAxJykge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTm90aWZpY2F0aW9ucyB0YWJsZSBub3QgZm91bmQsIHNraXBwaW5nLi4uJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZGJcbiAgICAgICAgICAgICAgLmRlbGV0ZShzY2hlbWEubWFpbnRlbmFuY2VSZXF1ZXN0cylcbiAgICAgICAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5tYWludGVuYW5jZVJlcXVlc3RzLnN1Ym1pdHRlZEJ5LCB0YXJnZXRVc2VySWQpKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IuY2F1c2U/LmNvZGUgPT09ICc0MlAwMScpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ01haW50ZW5hbmNlIHJlcXVlc3RzIHRhYmxlIG5vdCBmb3VuZCwgc2tpcHBpbmcuLi4nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIC8vIEV4ZWN1dGUgY29yZSBkZWxldGlvbnMgZmlyc3RcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKGRlbGV0aW9uUHJvbWlzZXMpO1xuXG4gICAgICAvLyBFeGVjdXRlIG9wdGlvbmFsIGRlbGV0aW9uc1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwob3B0aW9uYWxEZWxldGlvbnMubWFwKChmbikgPT4gZm4oKSkpO1xuXG4gICAgICAvLyBGaW5hbGx5LCBkZWxldGUgdGhlIHVzZXIgYWNjb3VudFxuICAgICAgYXdhaXQgZGIuZGVsZXRlKHNjaGVtYS51c2Vycykud2hlcmUoZXEoc2NoZW1hLnVzZXJzLmlkLCB0YXJnZXRVc2VySWQpKTtcblxuICAgICAgLy8gQ2xlYXIgYWxsIGNhY2hlcyB0byBlbnN1cmUgdGhlIHVzZXIgbGlzdCB1cGRhdGVzIGltbWVkaWF0ZWx5XG4gICAgICBxdWVyeUNhY2hlLmludmFsaWRhdGUoJ3VzZXJzJywgJ2FsbF91c2VycycpO1xuICAgICAgcXVlcnlDYWNoZS5pbnZhbGlkYXRlKCd1c2VycycsIGB1c2VyOiR7dGFyZ2V0VXNlcklkfWApO1xuICAgICAgcXVlcnlDYWNoZS5pbnZhbGlkYXRlKCd1c2VycycsIGB1c2VyX2VtYWlsOiR7dGFyZ2V0VXNlci5lbWFpbH1gKTtcblxuICAgICAgLy8gTG9nIHRoZSBkZWxldGlvbiBmb3IgYXVkaXQgcHVycG9zZXNcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgVXNlciBhY2NvdW50IGRlbGV0ZWQgYnkgYWRtaW4gJHtjdXJyZW50VXNlci5lbWFpbH0gKCR7Y3VycmVudFVzZXIuaWR9KTogJHt0YXJnZXRVc2VyLmVtYWlsfSAoJHt0YXJnZXRVc2VySWR9KS4gUmVhc29uOiAke3JlYXNvbiB8fCAnTm90IHByb3ZpZGVkJ31gXG4gICAgICApO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdVc2VyIGFjY291bnQgYW5kIGFsbCBhc3NvY2lhdGVkIGRhdGEgaGF2ZSBiZWVuIHBlcm1hbmVudGx5IGRlbGV0ZWQnLFxuICAgICAgICBkZWxldGVkVXNlcklkOiB0YXJnZXRVc2VySWQsXG4gICAgICAgIGRlbGV0ZWRVc2VyRW1haWw6IHRhcmdldFVzZXIuZW1haWwsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZGVsZXRpbmcgdXNlciBhY2NvdW50OicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGRlbGV0ZSB1c2VyIGFjY291bnQnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUE9TVCAvYXBpL3VzZXJzL21lL2NoYW5nZS1wYXNzd29yZCAtIENoYW5nZSBjdXJyZW50IHVzZXIncyBwYXNzd29yZC5cbiAgICovXG4gIGFwcC5wb3N0KCcvYXBpL3VzZXJzL21lL2NoYW5nZS1wYXNzd29yZCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBjdXJyZW50UGFzc3dvcmQsIG5ld1Bhc3N3b3JkIH0gPSByZXEuYm9keTtcblxuICAgICAgaWYgKCFjdXJyZW50UGFzc3dvcmQgfHwgIW5ld1Bhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0N1cnJlbnQgcGFzc3dvcmQgYW5kIG5ldyBwYXNzd29yZCBhcmUgcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdJTlZBTElEX0lOUFVUJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZlcmlmeSBjdXJyZW50IHBhc3N3b3JkXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyKGN1cnJlbnRVc2VyLmlkKTtcbiAgICAgIGlmICghdXNlciB8fCAhKGF3YWl0IGJjcnlwdC5jb21wYXJlKGN1cnJlbnRQYXNzd29yZCwgdXNlci5wYXNzd29yZCkpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0N1cnJlbnQgcGFzc3dvcmQgaXMgaW5jb3JyZWN0JyxcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9QQVNTV09SRCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBIYXNoIG5ldyBwYXNzd29yZFxuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaChuZXdQYXNzd29yZCwgMTIpO1xuXG4gICAgICAvLyBVcGRhdGUgcGFzc3dvcmRcbiAgICAgIGF3YWl0IHN0b3JhZ2UudXBkYXRlVXNlcihjdXJyZW50VXNlci5pZCwge1xuICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0gYXMgYW55KTtcblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnUGFzc3dvcmQgY2hhbmdlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGNoYW5naW5nIHBhc3N3b3JkOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGNoYW5nZSBwYXNzd29yZCcsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBQT1NUIC9hcGkvdXNlcnMvZGVtbyAtIENyZWF0ZXMgYSBkZW1vIHVzZXIgZGlyZWN0bHkgd2l0aG91dCBpbnZpdGF0aW9uXG4gICAqL1xuICBhcHAucG9zdCgnL2FwaS91c2Vycy9kZW1vJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gcmVxLnVzZXIgfHwgcmVxLnNlc3Npb24/LnVzZXI7XG4gICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnQVVUSF9SRVFVSVJFRCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IGFkbWlucyBhbmQgbWFuYWdlcnMgY2FuIGNyZWF0ZSBkZW1vIHVzZXJzXG4gICAgICBpZiAoIVsnYWRtaW4nLCAnbWFuYWdlciddLmluY2x1ZGVzKGN1cnJlbnRVc2VyLnJvbGUpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUsIHJvbGUsIG9yZ2FuaXphdGlvbklkLCByZXNpZGVuY2VJZCB9ID0gcmVxLmJvZHk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIGRlbW8gcm9sZVxuICAgICAgaWYgKCFbJ2RlbW9fbWFuYWdlcicsICdkZW1vX3RlbmFudCcsICdkZW1vX3Jlc2lkZW50J10uaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBkZW1vIHJvbGUnLFxuICAgICAgICAgIGNvZGU6ICdJTlZBTElEX1JPTEUnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgICBpZiAoIWZpcnN0TmFtZSB8fCAhbGFzdE5hbWUgfHwgIW9yZ2FuaXphdGlvbklkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ZpcnN0IG5hbWUsIGxhc3QgbmFtZSwgYW5kIG9yZ2FuaXphdGlvbiBhcmUgcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdNSVNTSU5HX1JFUVVJUkVEX0ZJRUxEUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSBkZW1vIGVtYWlsXG4gICAgICBjb25zdCBlbWFpbCA9IGAke2ZpcnN0TmFtZS50b0xvd2VyQ2FzZSgpfS4ke2xhc3ROYW1lLnRvTG93ZXJDYXNlKCl9QGRlbW8uY29tYDtcblxuICAgICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IGV4aXN0c1xuICAgICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyQnlFbWFpbChlbWFpbCk7XG4gICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0RlbW8gdXNlciB3aXRoIHRoaXMgbmFtZSBhbHJlYWR5IGV4aXN0cycsXG4gICAgICAgICAgY29kZTogJ1VTRVJfRVhJU1RTJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBkZW1vIHVzZXIgd2l0aCBzZWN1cmUgcmFuZG9tIHBhc3N3b3JkXG4gICAgICBjb25zdCByYW5kb21QYXNzd29yZCA9IHJhbmRvbUJ5dGVzKDEyKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKGBEZW1vJHtyYW5kb21QYXNzd29yZH0hYCwgMTIpO1xuXG4gICAgICBjb25zdCB1c2VyRGF0YSA9IHtcbiAgICAgICAgZmlyc3ROYW1lOiBzYW5pdGl6ZU5hbWUoZmlyc3ROYW1lKSxcbiAgICAgICAgbGFzdE5hbWU6IHNhbml0aXplTmFtZShsYXN0TmFtZSksXG4gICAgICAgIGVtYWlsOiBub3JtYWxpemVFbWFpbChlbWFpbCksXG4gICAgICAgIHVzZXJuYW1lOiBnZW5lcmF0ZVVzZXJuYW1lRnJvbUVtYWlsKGVtYWlsKSxcbiAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICBsYW5ndWFnZTogJ2ZyJywgLy8gRGVmYXVsdCB0byBGcmVuY2ggZm9yIFF1ZWJlY1xuICAgICAgICByb2xlOiByb2xlIGFzIGFueSxcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXdVc2VyID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVVc2VyKHVzZXJEYXRhIGFzIEluc2VydFVzZXIpO1xuXG4gICAgICAvLyBMb2cgdGhlIHVzZXIgY3JlYXRpb25cbiAgICAgIGxvZ1VzZXJDcmVhdGlvbih7XG4gICAgICAgIHVzZXJJZDogbmV3VXNlci5pZCxcbiAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXG4gICAgICAgIG1ldGhvZDogJ2RpcmVjdCcsXG4gICAgICAgIHJvbGUsXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDbGVhciBjYWNoZVxuICAgICAgcXVlcnlDYWNoZS5pbnZhbGlkYXRlKCd1c2VycycsICdhbGxfdXNlcnMnKTtcblxuICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnRGVtbyB1c2VyIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIGlkOiBuZXdVc2VyLmlkLFxuICAgICAgICAgIGZpcnN0TmFtZTogbmV3VXNlci5maXJzdE5hbWUsXG4gICAgICAgICAgbGFzdE5hbWU6IG5ld1VzZXIubGFzdE5hbWUsXG4gICAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXG4gICAgICAgICAgcm9sZTogbmV3VXNlci5yb2xlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGNyZWF0aW5nIGRlbW8gdXNlcjonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBjcmVhdGUgZGVtbyB1c2VyJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFBPU1QgL2FwaS9pbnZpdGF0aW9ucyAtIENyZWF0ZXMgYSBuZXcgaW52aXRhdGlvblxuICAgKi9cbiAgYXBwLnBvc3QoJy9hcGkvaW52aXRhdGlvbnMnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdBVVRIX1JFUVVJUkVEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgYWRtaW5zIGFuZCBtYW5hZ2VycyBjYW4gc2VuZCBpbnZpdGF0aW9uc1xuICAgICAgaWYgKCFbJ2FkbWluJywgJ21hbmFnZXInXS5pbmNsdWRlcyhjdXJyZW50VXNlci5yb2xlKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMnLFxuICAgICAgICAgIGNvZGU6ICdJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge1xuICAgICAgICBvcmdhbml6YXRpb25JZCxcbiAgICAgICAgcmVzaWRlbmNlSWQsXG4gICAgICAgIGVtYWlsLFxuICAgICAgICByb2xlLFxuICAgICAgICBpbnZpdGVkQnlVc2VySWQsXG4gICAgICAgIGV4cGlyZXNBdCxcbiAgICAgICAgcGVyc29uYWxNZXNzYWdlLFxuICAgICAgfSA9IHJlcS5ib2R5O1xuXG4gICAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBmaWVsZHMgZmlyc3RcbiAgICAgIGlmICghb3JnYW5pemF0aW9uSWQgfHwgIWVtYWlsIHx8ICFyb2xlIHx8ICFleHBpcmVzQXQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnT3JnYW5pemF0aW9uLCBlbWFpbCwgcm9sZSwgYW5kIGV4cGlyeSBkYXRlIGFyZSByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ01JU1NJTkdfUkVRVUlSRURfRklFTERTJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZW4gdmFsaWRhdGUgZW1haWwgZm9ybWF0XG4gICAgICBjb25zdCBlbWFpbFJlZ2V4ID0gL15bXlxcc0BdK0BbXlxcc0BdK1xcLlteXFxzQF0rJC87XG4gICAgICBpZiAoIWVtYWlsUmVnZXgudGVzdChlbWFpbCkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBlbWFpbCBmb3JtYXQnLFxuICAgICAgICAgIGNvZGU6ICdJTlZBTElEX0VNQUlMJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIHJvbGUgcGVybWlzc2lvbnNcbiAgICAgIGlmIChjdXJyZW50VXNlci5yb2xlID09PSAnbWFuYWdlcicpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgbWFuYWdlciBpcyB0cnlpbmcgdG8gaW52aXRlIGFkbWluXG4gICAgICAgIGlmIChyb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdNYW5hZ2VycyBjYW4gb25seSBpbnZpdGUgcmVzaWRlbnQsIHRlbmFudCwgYW5kIG1hbmFnZXIgcm9sZXMnLFxuICAgICAgICAgICAgY29kZTogJ1JPTEVfUEVSTUlTU0lPTl9ERU5JRUQnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBkZW1vIG9yZ2FuaXphdGlvbiB0byBjaGVjayBpZiBpdCdzIGEgZGVtbyBvcmdcbiAgICAgICAgY29uc3QgdGFyZ2V0T3JnID0gYXdhaXQgZGJcbiAgICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgICAuZnJvbShzY2hlbWEub3JnYW5pemF0aW9ucylcbiAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLm9yZ2FuaXphdGlvbnMuaWQsIG9yZ2FuaXphdGlvbklkKSlcbiAgICAgICAgICAubGltaXQoMSk7XG5cbiAgICAgICAgaWYgKHRhcmdldE9yZy5sZW5ndGggPiAwICYmIHRhcmdldE9yZ1swXS50eXBlID09PSAnRGVtbycpIHtcbiAgICAgICAgICAvLyBGb3IgZGVtbyBvcmdhbml6YXRpb25zLCBhbGxvdyBub3JtYWwgcm9sZXMgKHJlc2lkZW50LCB0ZW5hbnQsIG1hbmFnZXIpXG4gICAgICAgICAgaWYgKCFbJ3Jlc2lkZW50JywgJ3RlbmFudCcsICdtYW5hZ2VyJ10uaW5jbHVkZXMocm9sZSkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIHJvbGUgZm9yIGRlbW8gb3JnYW5pemF0aW9uJyxcbiAgICAgICAgICAgICAgY29kZTogJ0lOVkFMSURfREVNT19ST0xFJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGb3IgcmVndWxhciBvcmdhbml6YXRpb25zLCBtYW5hZ2VycyBjYW4gaW52aXRlIHJlc2lkZW50LCB0ZW5hbnQsIG1hbmFnZXJcbiAgICAgICAgICBpZiAoIVsncmVzaWRlbnQnLCAndGVuYW50JywgJ21hbmFnZXInXS5pbmNsdWRlcyhyb2xlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ01hbmFnZXJzIGNhbiBvbmx5IGludml0ZSByZXNpZGVudCwgdGVuYW50LCBhbmQgbWFuYWdlciByb2xlcycsXG4gICAgICAgICAgICAgIGNvZGU6ICdST0xFX1BFUk1JU1NJT05fREVOSUVEJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGFscmVhZHkgZXhpc3RzXG4gICAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJCeUVtYWlsKGVtYWlsKTtcbiAgICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnVXNlciB3aXRoIHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdHMnLFxuICAgICAgICAgIGNvZGU6ICdVU0VSX0VYSVNUUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBmb3IgZXhpc3RpbmcgcGVuZGluZyBpbnZpdGF0aW9ucyBmb3IgdGhlIHNhbWUgZW1haWwgYW5kIG9yZ2FuaXphdGlvblxuICAgICAgLy8gSWYgZm91bmQsIGRlbGV0ZSB0aGVtIHRvIHJlcGxhY2Ugd2l0aCBuZXcgaW52aXRhdGlvblxuICAgICAgY29uc3QgZXhpc3RpbmdJbnZpdGF0aW9ucyA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC53aGVyZShcbiAgICAgICAgICBhbmQoXG4gICAgICAgICAgICBlcShzY2hlbWEuaW52aXRhdGlvbnMuZW1haWwsIGVtYWlsKSxcbiAgICAgICAgICAgIGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5vcmdhbml6YXRpb25JZCwgb3JnYW5pemF0aW9uSWQpLFxuICAgICAgICAgICAgZXEoc2NoZW1hLmludml0YXRpb25zLnN0YXR1cywgJ3BlbmRpbmcnKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgaWYgKGV4aXN0aW5nSW52aXRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBSZXBsYWNpbmcgJHtleGlzdGluZ0ludml0YXRpb25zLmxlbmd0aH0gZXhpc3RpbmcgaW52aXRhdGlvbihzKSBmb3IgZW1haWw6ICR7ZW1haWx9YCk7XG4gICAgICAgIC8vIERlbGV0ZSBleGlzdGluZyBwZW5kaW5nIGludml0YXRpb25zIGZvciB0aGlzIGVtYWlsL29yZ2FuaXphdGlvblxuICAgICAgICBhd2FpdCBkYlxuICAgICAgICAgIC5kZWxldGUoc2NoZW1hLmludml0YXRpb25zKVxuICAgICAgICAgIC53aGVyZShcbiAgICAgICAgICAgIGFuZChcbiAgICAgICAgICAgICAgZXEoc2NoZW1hLmludml0YXRpb25zLmVtYWlsLCBlbWFpbCksXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5vcmdhbml6YXRpb25JZCwgb3JnYW5pemF0aW9uSWQpLFxuICAgICAgICAgICAgICBlcShzY2hlbWEuaW52aXRhdGlvbnMuc3RhdHVzLCAncGVuZGluZycpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gR2VuZXJhdGUgc2VjdXJlIGludml0YXRpb24gdG9rZW5cbiAgICAgIGNvbnN0IHRva2VuID0gcmFuZG9tQnl0ZXMoMzIpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICAgIGNvbnN0IHRva2VuSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZSh0b2tlbikuZGlnZXN0KCdoZXgnKTtcblxuICAgICAgLy8gQ3JlYXRlIGludml0YXRpb24gcmVjb3JkXG4gICAgICBjb25zdCBpbnZpdGF0aW9uRGF0YSA9IHtcbiAgICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICAgIHJlc2lkZW5jZUlkOiByZXNpZGVuY2VJZCB8fCBudWxsLFxuICAgICAgICBlbWFpbCxcbiAgICAgICAgdG9rZW4sXG4gICAgICAgIHRva2VuSGFzaCxcbiAgICAgICAgcm9sZTogcm9sZSBhcyBhbnksXG4gICAgICAgIGludml0ZWRCeVVzZXJJZDogY3VycmVudFVzZXIuaWQsXG4gICAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoZXhwaXJlc0F0KSxcbiAgICAgICAgcGVyc29uYWxNZXNzYWdlOiBwZXJzb25hbE1lc3NhZ2UgfHwgbnVsbCxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IFtuZXdJbnZpdGF0aW9uXSA9IGF3YWl0IGRiXG4gICAgICAgIC5pbnNlcnQoc2NoZW1hLmludml0YXRpb25zKVxuICAgICAgICAudmFsdWVzKGludml0YXRpb25EYXRhKVxuICAgICAgICAucmV0dXJuaW5nKCk7XG5cbiAgICAgIC8vIEdldCBvcmdhbml6YXRpb24gZGV0YWlscyBmb3IgZW1haWxcbiAgICAgIGNvbnN0IFtvcmdhbml6YXRpb25dID0gYXdhaXQgZGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHNjaGVtYS5vcmdhbml6YXRpb25zKVxuICAgICAgICAud2hlcmUoZXEoc2NoZW1hLm9yZ2FuaXphdGlvbnMuaWQsIG9yZ2FuaXphdGlvbklkKSlcbiAgICAgICAgLmxpbWl0KDEpO1xuXG4gICAgICAvLyBTZW5kIGludml0YXRpb24gZW1haWxcbiAgICAgIGNvbnN0IHJlY2lwaWVudE5hbWUgPSBlbWFpbC5zcGxpdCgnQCcpWzBdOyAvLyBVc2UgZW1haWwgcHJlZml4IGFzIG5hbWVcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbk5hbWUgPSBvcmdhbml6YXRpb24/Lm5hbWUgfHwgJ0tvdmVvIEdlc3Rpb24nO1xuICAgICAgY29uc3QgaW52aXRlck5hbWUgPSBgJHtjdXJyZW50VXNlci5maXJzdE5hbWUgfHwgY3VycmVudFVzZXIuZW1haWx9ICR7Y3VycmVudFVzZXIubGFzdE5hbWUgfHwgJyd9YC50cmltKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGVtYWlsU2VudCA9IGF3YWl0IGVtYWlsU2VydmljZS5zZW5kSW52aXRhdGlvbkVtYWlsKFxuICAgICAgICBlbWFpbCxcbiAgICAgICAgcmVjaXBpZW50TmFtZSxcbiAgICAgICAgdG9rZW4sIC8vIFVzZSB0aGUgdW5oYXNoZWQgdG9rZW4gZm9yIHRoZSBlbWFpbCBVUkxcbiAgICAgICAgb3JnYW5pemF0aW9uTmFtZSxcbiAgICAgICAgaW52aXRlck5hbWUsXG4gICAgICAgIG5ldyBEYXRlKGV4cGlyZXNBdCksXG4gICAgICAgICdmcicsIC8vIERlZmF1bHQgdG8gRnJlbmNoIGZvciBRdWViZWNcbiAgICAgICAgcGVyc29uYWxNZXNzYWdlXG4gICAgICApO1xuXG4gICAgICAvLyBMb2cgaW52aXRhdGlvbiBjcmVhdGlvblxuICAgICAgY29uc29sZS5sb2coJ+KchSBJbnZpdGF0aW9uIGNyZWF0ZWQ6Jywge1xuICAgICAgICBpZDogbmV3SW52aXRhdGlvbi5pZCxcbiAgICAgICAgZW1haWwsXG4gICAgICAgIHJvbGUsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkLFxuICAgICAgICBpbnZpdGVkQnk6IGN1cnJlbnRVc2VyLmVtYWlsLFxuICAgICAgICBlbWFpbFNlbnQsXG4gICAgICB9KTtcblxuICAgICAgLy8gRm9yIHRlc3RzLCB3ZSdsbCB0cmVhdCBlbWFpbCBmYWlsdXJlIGFzIHN1Y2Nlc3Mgc2luY2UgdGVzdHMgbWF5IG5vdCBoYXZlIGVtYWlsIGNvbmZpZ3VyZWRcbiAgICAgIGlmICghZW1haWxTZW50ICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcpIHtcbiAgICAgICAgLy8gSWYgZW1haWwgZmFpbGVkIGJ1dCBpbnZpdGF0aW9uIHdhcyBjcmVhdGVkLCBsb2cgdGhlIGlzc3VlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KaoO+4jyBJbnZpdGF0aW9uIGNyZWF0ZWQgYnV0IGVtYWlsIGZhaWxlZCB0byBzZW5kJyk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwNykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ludml0YXRpb24gY3JlYXRlZCBidXQgZW1haWwgZmFpbGVkIHRvIHNlbmQnLFxuICAgICAgICAgIGludml0YXRpb25JZDogbmV3SW52aXRhdGlvbi5pZCxcbiAgICAgICAgICBlbWFpbFNlbnQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnSW52aXRhdGlvbiBzZW50IHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIGludml0YXRpb25JZDogbmV3SW52aXRhdGlvbi5pZCxcbiAgICAgICAgZW1haWxTZW50OiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGNyZWF0aW5nIGludml0YXRpb246JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY3JlYXRlIGludml0YXRpb24nLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogR0VUIC9hcGkvaW52aXRhdGlvbnMgLSBHZXRzIGFsbCBpbnZpdGF0aW9ucyAoYWRtaW4vbWFuYWdlciBvbmx5KVxuICAgKi9cbiAgYXBwLmdldCgnL2FwaS9pbnZpdGF0aW9ucycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhZG1pbnMgYW5kIG1hbmFnZXJzIGNhbiB2aWV3IGludml0YXRpb25zXG4gICAgICBpZiAoIVsnYWRtaW4nLCAnbWFuYWdlciddLmluY2x1ZGVzKGN1cnJlbnRVc2VyLnJvbGUpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBsZXQgaW52aXRhdGlvbnM7XG4gICAgICBpZiAoY3VycmVudFVzZXIucm9sZSA9PT0gJ2FkbWluJykge1xuICAgICAgICAvLyBBZG1pbiBjYW4gc2VlIGFsbCBpbnZpdGF0aW9uc1xuICAgICAgICBpbnZpdGF0aW9ucyA9IGF3YWl0IGRiXG4gICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgLmZyb20oc2NoZW1hLmludml0YXRpb25zKVxuICAgICAgICAgIC5vcmRlckJ5KHNjaGVtYS5pbnZpdGF0aW9ucy5jcmVhdGVkQXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWFuYWdlcnMgY2FuIG9ubHkgc2VlIGludml0YXRpb25zIHRoZXkgc2VudFxuICAgICAgICBpbnZpdGF0aW9ucyA9IGF3YWl0IGRiXG4gICAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgICAgLmZyb20oc2NoZW1hLmludml0YXRpb25zKVxuICAgICAgICAgIC53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuaW52aXRlZEJ5VXNlcklkLCBjdXJyZW50VXNlci5pZCkpXG4gICAgICAgICAgLm9yZGVyQnkoc2NoZW1hLmludml0YXRpb25zLmNyZWF0ZWRBdCk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKGludml0YXRpb25zKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgaW52aXRhdGlvbnM6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggaW52aXRhdGlvbnMnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUE9TVCAvYXBpL2ludml0YXRpb25zL3ZhbGlkYXRlIC0gVmFsaWRhdGVzIGFuIGludml0YXRpb24gdG9rZW5cbiAgICogUHVibGljIGVuZHBvaW50IGZvciBpbnZpdGF0aW9uIHZhbGlkYXRpb24gZHVyaW5nIHJlZ2lzdHJhdGlvblxuICAgKi9cbiAgYXBwLnBvc3QoJy9hcGkvaW52aXRhdGlvbnMvdmFsaWRhdGUnLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHRva2VuIH0gPSByZXEuYm9keTtcblxuICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ1RPS0VOX1JFUVVJUkVEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBpbnZpdGF0aW9uIGJ5IHRva2VuXG4gICAgICBjb25zdCBbaW52aXRhdGlvbl0gPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLmZyb20oc2NoZW1hLmludml0YXRpb25zKVxuICAgICAgICAud2hlcmUoZXEoc2NoZW1hLmludml0YXRpb25zLnRva2VuLCB0b2tlbikpXG4gICAgICAgIC5saW1pdCgxKTtcblxuICAgICAgaWYgKCFpbnZpdGF0aW9uKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ0ludml0YXRpb24gbm90IGZvdW5kIG9yIGludmFsaWQgdG9rZW4nLFxuICAgICAgICAgIGNvZGU6ICdJTlZJVEFUSU9OX05PVF9GT1VORCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBpbnZpdGF0aW9uIGlzIGV4cGlyZWRcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZShpbnZpdGF0aW9uLmV4cGlyZXNBdCk7XG4gICAgICBpZiAobm93ID4gZXhwaXJlc0F0KSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ0ludml0YXRpb24gaGFzIGV4cGlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdJTlZJVEFUSU9OX0VYUElSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgaW52aXRhdGlvbiBpcyBhbHJlYWR5IHVzZWRcbiAgICAgIGlmIChpbnZpdGF0aW9uLnN0YXR1cyA9PT0gJ2FjY2VwdGVkJykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZpdGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCcsXG4gICAgICAgICAgY29kZTogJ0lOVklUQVRJT05fQUxSRUFEWV9VU0VEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBvcmdhbml6YXRpb24gaW5mb3JtYXRpb25cbiAgICAgIGNvbnN0IFtvcmdhbml6YXRpb25dID0gYXdhaXQgZGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHNjaGVtYS5vcmdhbml6YXRpb25zKVxuICAgICAgICAud2hlcmUoZXEoc2NoZW1hLm9yZ2FuaXphdGlvbnMuaWQsIGludml0YXRpb24ub3JnYW5pemF0aW9uSWQpKVxuICAgICAgICAubGltaXQoMSk7XG5cbiAgICAgIC8vIEdldCBpbnZpdGVyIGluZm9ybWF0aW9uXG4gICAgICBjb25zdCBbaW52aXRlcl0gPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KHtcbiAgICAgICAgICBpZDogc2NoZW1hLnVzZXJzLmlkLFxuICAgICAgICAgIGZpcnN0TmFtZTogc2NoZW1hLnVzZXJzLmZpcnN0TmFtZSxcbiAgICAgICAgICBsYXN0TmFtZTogc2NoZW1hLnVzZXJzLmxhc3ROYW1lLFxuICAgICAgICAgIGVtYWlsOiBzY2hlbWEudXNlcnMuZW1haWwsXG4gICAgICAgIH0pXG4gICAgICAgIC5mcm9tKHNjaGVtYS51c2VycylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS51c2Vycy5pZCwgaW52aXRhdGlvbi5pbnZpdGVkQnlVc2VySWQpKVxuICAgICAgICAubGltaXQoMSk7XG5cbiAgICAgIC8vIFJldHVybiBzdWNjZXNzZnVsIHZhbGlkYXRpb25cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgaXNWYWxpZDogdHJ1ZSxcbiAgICAgICAgaW52aXRhdGlvbjoge1xuICAgICAgICAgIGlkOiBpbnZpdGF0aW9uLmlkLFxuICAgICAgICAgIGVtYWlsOiBpbnZpdGF0aW9uLmVtYWlsLFxuICAgICAgICAgIHJvbGU6IGludml0YXRpb24ucm9sZSxcbiAgICAgICAgICBleHBpcmVzQXQ6IGludml0YXRpb24uZXhwaXJlc0F0LFxuICAgICAgICAgIGNyZWF0ZWRBdDogaW52aXRhdGlvbi5jcmVhdGVkQXQsXG4gICAgICAgIH0sXG4gICAgICAgIG9yZ2FuaXphdGlvbk5hbWU6IG9yZ2FuaXphdGlvbj8ubmFtZSB8fCAnVW5rbm93biBPcmdhbml6YXRpb24nLFxuICAgICAgICBpbnZpdGVyTmFtZTogaW52aXRlciA/IGAke2ludml0ZXIuZmlyc3ROYW1lfSAke2ludml0ZXIubGFzdE5hbWV9YC50cmltKCkgOiAnVW5rbm93biBVc2VyJyxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciB2YWxpZGF0aW5nIGludml0YXRpb246JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogJ0ludGVybmFsIHNlcnZlciBlcnJvciBkdXJpbmcgdmFsaWRhdGlvbicsXG4gICAgICAgIGNvZGU6ICdWQUxJREFUSU9OX0VSUk9SJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFBPU1QgL2FwaS9pbnZpdGF0aW9ucy9hY2NlcHQvOnRva2VuIC0gQWNjZXB0IGFuIGludml0YXRpb24gYW5kIGNyZWF0ZSB1c2VyIGFjY291bnRcbiAgICogUHVibGljIGVuZHBvaW50IGZvciBjb21wbGV0aW5nIHJlZ2lzdHJhdGlvbiB2aWEgaW52aXRhdGlvblxuICAgKi9cbiAgYXBwLnBvc3QoJy9hcGkvaW52aXRhdGlvbnMvYWNjZXB0Lzp0b2tlbicsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgdG9rZW4gfSA9IHJlcS5wYXJhbXM7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGZpcnN0TmFtZSxcbiAgICAgICAgbGFzdE5hbWUsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgICBwaG9uZSxcbiAgICAgICAgbGFuZ3VhZ2UsXG4gICAgICAgIGRhdGFDb2xsZWN0aW9uQ29uc2VudCxcbiAgICAgICAgbWFya2V0aW5nQ29uc2VudCxcbiAgICAgICAgYW5hbHl0aWNzQ29uc2VudCxcbiAgICAgICAgdGhpcmRQYXJ0eUNvbnNlbnQsXG4gICAgICAgIGFja25vd2xlZGdlZFJpZ2h0cyxcbiAgICAgIH0gPSByZXEuYm9keTtcblxuICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ1RPS0VOX1JFUVVJUkVEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBpbnZpdGF0aW9uIGJ5IHRva2VuXG4gICAgICBjb25zdCBbaW52aXRhdGlvbl0gPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLmZyb20oc2NoZW1hLmludml0YXRpb25zKVxuICAgICAgICAud2hlcmUoZXEoc2NoZW1hLmludml0YXRpb25zLnRva2VuLCB0b2tlbikpXG4gICAgICAgIC5saW1pdCgxKTtcblxuICAgICAgaWYgKCFpbnZpdGF0aW9uKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ludml0YXRpb24gbm90IGZvdW5kIG9yIGludmFsaWQgdG9rZW4nLFxuICAgICAgICAgIGNvZGU6ICdJTlZJVEFUSU9OX05PVF9GT1VORCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBpbnZpdGF0aW9uIGlzIGV4cGlyZWRcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBleHBpcmVzQXQgPSBuZXcgRGF0ZShpbnZpdGF0aW9uLmV4cGlyZXNBdCk7XG4gICAgICBpZiAobm93ID4gZXhwaXJlc0F0KSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ludml0YXRpb24gaGFzIGV4cGlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdJTlZJVEFUSU9OX0VYUElSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgaW52aXRhdGlvbiBpcyBhbHJlYWR5IHVzZWRcbiAgICAgIGlmIChpbnZpdGF0aW9uLnN0YXR1cyA9PT0gJ2FjY2VwdGVkJykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZpdGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCcsXG4gICAgICAgICAgY29kZTogJ0lOVklUQVRJT05fQUxSRUFEWV9VU0VEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkc1xuICAgICAgaWYgKCFmaXJzdE5hbWUgfHwgIWxhc3ROYW1lIHx8ICFwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdGaXJzdCBuYW1lLCBsYXN0IG5hbWUsIGFuZCBwYXNzd29yZCBhcmUgcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdNSVNTSU5HX1JFUVVJUkVEX0ZJRUxEUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBjb25zZW50c1xuICAgICAgaWYgKCFkYXRhQ29sbGVjdGlvbkNvbnNlbnQgfHwgIWFja25vd2xlZGdlZFJpZ2h0cykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdSZXF1aXJlZCBwcml2YWN5IGNvbnNlbnRzIG11c3QgYmUgZ2l2ZW4nLFxuICAgICAgICAgIGNvZGU6ICdNSVNTSU5HX1JFUVVJUkVEX0NPTlNFTlRTJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEhhc2ggcGFzc3dvcmRcbiAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEyKTtcblxuICAgICAgLy8gQ3JlYXRlIHVzZXIgYWNjb3VudFxuICAgICAgY29uc3QgdXNlckRhdGEgPSB7XG4gICAgICAgIGZpcnN0TmFtZTogc2FuaXRpemVOYW1lKGZpcnN0TmFtZSksXG4gICAgICAgIGxhc3ROYW1lOiBzYW5pdGl6ZU5hbWUobGFzdE5hbWUpLFxuICAgICAgICBlbWFpbDogbm9ybWFsaXplRW1haWwoaW52aXRhdGlvbi5lbWFpbCksXG4gICAgICAgIHVzZXJuYW1lOiBnZW5lcmF0ZVVzZXJuYW1lRnJvbUVtYWlsKGludml0YXRpb24uZW1haWwpLFxuICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgIHBob25lOiBwaG9uZSA/IHNhbml0aXplU3RyaW5nKHBob25lKSA6ICcnLFxuICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UgfHwgJ2ZyJyxcbiAgICAgICAgcm9sZTogaW52aXRhdGlvbi5yb2xlIGFzIGFueSxcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBpbnZpdGF0aW9uLm9yZ2FuaXphdGlvbklkLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbmV3VXNlciA9IGF3YWl0IHN0b3JhZ2UuY3JlYXRlVXNlcih1c2VyRGF0YSBhcyBJbnNlcnRVc2VyKTtcblxuICAgICAgLy8gQ3JlYXRlIG9yZ2FuaXphdGlvbiBhc3NpZ25tZW50IGlmIG9yZ2FuaXphdGlvbklkIGlzIHByb3ZpZGVkXG4gICAgICBpZiAoaW52aXRhdGlvbi5vcmdhbml6YXRpb25JZCkge1xuICAgICAgICBhd2FpdCBkYi5pbnNlcnQoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zKS52YWx1ZXMoe1xuICAgICAgICAgIHVzZXJJZDogbmV3VXNlci5pZCxcbiAgICAgICAgICBvcmdhbml6YXRpb25JZDogaW52aXRhdGlvbi5vcmdhbml6YXRpb25JZCxcbiAgICAgICAgICBvcmdhbml6YXRpb25Sb2xlOiBpbnZpdGF0aW9uLnJvbGUsXG4gICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZygn4pyFIFVzZXIgYXNzaWduZWQgdG8gb3JnYW5pemF0aW9uOicsIHtcbiAgICAgICAgICB1c2VySWQ6IG5ld1VzZXIuaWQsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGludml0YXRpb24ub3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgcm9sZTogaW52aXRhdGlvbi5yb2xlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIHJlc2lkZW5jZSBhc3NpZ25tZW50IGlmIHJlc2lkZW5jZUlkIGlzIHByb3ZpZGVkXG4gICAgICBpZiAoaW52aXRhdGlvbi5yZXNpZGVuY2VJZCkge1xuICAgICAgICBhd2FpdCBkYi5pbnNlcnQoc2NoZW1hLnVzZXJSZXNpZGVuY2VzKS52YWx1ZXMoe1xuICAgICAgICAgIHVzZXJJZDogbmV3VXNlci5pZCxcbiAgICAgICAgICByZXNpZGVuY2VJZDogaW52aXRhdGlvbi5yZXNpZGVuY2VJZCxcbiAgICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBpbnZpdGF0aW9uLnJvbGUgPT09ICd0ZW5hbnQnID8gJ3RlbmFudCcgOiAnb2NjdXBhbnQnLFxuICAgICAgICAgIHN0YXJ0RGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgVXNlciBhc3NpZ25lZCB0byByZXNpZGVuY2U6Jywge1xuICAgICAgICAgIHVzZXJJZDogbmV3VXNlci5pZCxcbiAgICAgICAgICByZXNpZGVuY2VJZDogaW52aXRhdGlvbi5yZXNpZGVuY2VJZCxcbiAgICAgICAgICByZWxhdGlvbnNoaXBUeXBlOiBpbnZpdGF0aW9uLnJvbGUgPT09ICd0ZW5hbnQnID8gJ3RlbmFudCcgOiAnb2NjdXBhbnQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFyayBpbnZpdGF0aW9uIGFzIGFjY2VwdGVkXG4gICAgICBhd2FpdCBkYlxuICAgICAgICAudXBkYXRlKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLnNldCh7XG4gICAgICAgICAgc3RhdHVzOiAnYWNjZXB0ZWQnLFxuICAgICAgICAgIGFjY2VwdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgYWNjZXB0ZWRCeTogbmV3VXNlci5pZCxcbiAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuaWQsIGludml0YXRpb24uaWQpKTtcblxuICAgICAgLy8gTG9nIHVzZXIgY3JlYXRpb25cbiAgICAgIGxvZ1VzZXJDcmVhdGlvbih7XG4gICAgICAgIHVzZXJJZDogbmV3VXNlci5pZCxcbiAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXG4gICAgICAgIG1ldGhvZDogJ2ludml0YXRpb24nLFxuICAgICAgICByb2xlOiBpbnZpdGF0aW9uLnJvbGUsXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDbGVhciBjYWNoZVxuICAgICAgcXVlcnlDYWNoZS5pbnZhbGlkYXRlKCd1c2VycycsICdhbGxfdXNlcnMnKTtcbiAgICAgIHF1ZXJ5Q2FjaGUuaW52YWxpZGF0ZSgnaW52aXRhdGlvbnMnKTtcblxuICAgICAgY29uc29sZS5sb2coJ+KchSBVc2VyIGNyZWF0ZWQgdmlhIGludml0YXRpb24gYWNjZXB0YW5jZTonLCB7XG4gICAgICAgIHVzZXJJZDogbmV3VXNlci5pZCxcbiAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXG4gICAgICAgIHJvbGU6IG5ld1VzZXIucm9sZSxcbiAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGludml0YXRpb24ub3JnYW5pemF0aW9uSWQsXG4gICAgICAgIHJlc2lkZW5jZUlkOiBpbnZpdGF0aW9uLnJlc2lkZW5jZUlkLFxuICAgICAgICBhc3NpZ25lZFRvT3JnYW5pemF0aW9uOiAhIWludml0YXRpb24ub3JnYW5pemF0aW9uSWQsXG4gICAgICAgIGFzc2lnbmVkVG9SZXNpZGVuY2U6ICEhaW52aXRhdGlvbi5yZXNpZGVuY2VJZCxcbiAgICAgIH0pO1xuXG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdBY2NvdW50IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgdXNlcjoge1xuICAgICAgICAgIGlkOiBuZXdVc2VyLmlkLFxuICAgICAgICAgIGZpcnN0TmFtZTogbmV3VXNlci5maXJzdE5hbWUsXG4gICAgICAgICAgbGFzdE5hbWU6IG5ld1VzZXIubGFzdE5hbWUsXG4gICAgICAgICAgZW1haWw6IG5ld1VzZXIuZW1haWwsXG4gICAgICAgICAgcm9sZTogbmV3VXNlci5yb2xlLFxuICAgICAgICAgIGxhbmd1YWdlOiBuZXdVc2VyLmxhbmd1YWdlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGFjY2VwdGluZyBpbnZpdGF0aW9uOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0ludGVybmFsIHNlcnZlciBlcnJvciBkdXJpbmcgYWNjb3VudCBjcmVhdGlvbicsXG4gICAgICAgIGNvZGU6ICdJTlZJVEFUSU9OX0FDQ0VQVF9FUlJPUicsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBQT1NUIC9hcGkvaW52aXRhdGlvbnMvOmlkL3Jlc2VuZCAtIFJlc2VuZHMgYW4gaW52aXRhdGlvblxuICAgKi9cbiAgYXBwLnBvc3QoJy9hcGkvaW52aXRhdGlvbnMvOmlkL3Jlc2VuZCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcblxuICAgICAgLy8gR2V0IGludml0YXRpb25cbiAgICAgIGNvbnN0IFtpbnZpdGF0aW9uXSA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuaWQsIGlkKSlcbiAgICAgICAgLmxpbWl0KDEpO1xuXG4gICAgICBpZiAoIWludml0YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW52aXRhdGlvbiBub3QgZm91bmQnLFxuICAgICAgICAgIGNvZGU6ICdJTlZJVEFUSU9OX05PVF9GT1VORCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBwZXJtaXNzaW9uc1xuICAgICAgaWYgKGN1cnJlbnRVc2VyLnJvbGUgIT09ICdhZG1pbicgJiYgaW52aXRhdGlvbi5pbnZpdGVkQnlVc2VySWQgIT09IGN1cnJlbnRVc2VyLmlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0NhbiBvbmx5IHJlc2VuZCB5b3VyIG93biBpbnZpdGF0aW9ucycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgaW52aXRhdGlvbiB3aXRoIG5ldyBleHBpcnlcbiAgICAgIGNvbnN0IG5ld0V4cGlyZXNBdCA9IG5ldyBEYXRlKCk7XG4gICAgICBuZXdFeHBpcmVzQXQuc2V0RGF0ZShuZXdFeHBpcmVzQXQuZ2V0RGF0ZSgpICsgNyk7IC8vIEV4dGVuZCBieSA3IGRheXNcblxuICAgICAgYXdhaXQgZGJcbiAgICAgICAgLnVwZGF0ZShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC5zZXQoe1xuICAgICAgICAgIGV4cGlyZXNBdDogbmV3RXhwaXJlc0F0LFxuICAgICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgfSlcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5pZCwgaWQpKTtcblxuICAgICAgLy8gR2V0IG9yZ2FuaXphdGlvbiBkZXRhaWxzIGZvciBlbWFpbFxuICAgICAgY29uc3QgW29yZ2FuaXphdGlvbl0gPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLmZyb20oc2NoZW1hLm9yZ2FuaXphdGlvbnMpXG4gICAgICAgIC53aGVyZShlcShzY2hlbWEub3JnYW5pemF0aW9ucy5pZCwgaW52aXRhdGlvbi5vcmdhbml6YXRpb25JZCkpXG4gICAgICAgIC5saW1pdCgxKTtcblxuICAgICAgLy8gU2VuZCBpbnZpdGF0aW9uIGVtYWlsIGFnYWluXG4gICAgICBjb25zdCByZWNpcGllbnROYW1lID0gaW52aXRhdGlvbi5lbWFpbC5zcGxpdCgnQCcpWzBdOyAvLyBVc2UgZW1haWwgcHJlZml4IGFzIG5hbWVcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbk5hbWUgPSBvcmdhbml6YXRpb24/Lm5hbWUgfHwgJ0tvdmVvIEdlc3Rpb24nO1xuICAgICAgY29uc3QgaW52aXRlck5hbWUgPSBgJHtjdXJyZW50VXNlci5maXJzdE5hbWUgfHwgY3VycmVudFVzZXIuZW1haWx9ICR7Y3VycmVudFVzZXIubGFzdE5hbWUgfHwgJyd9YC50cmltKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGVtYWlsU2VudCA9IGF3YWl0IGVtYWlsU2VydmljZS5zZW5kSW52aXRhdGlvbkVtYWlsKFxuICAgICAgICBpbnZpdGF0aW9uLmVtYWlsLFxuICAgICAgICByZWNpcGllbnROYW1lLFxuICAgICAgICBpbnZpdGF0aW9uLnRva2VuLCAvLyBVc2UgdGhlIGV4aXN0aW5nIHRva2VuXG4gICAgICAgIG9yZ2FuaXphdGlvbk5hbWUsXG4gICAgICAgIGludml0ZXJOYW1lLFxuICAgICAgICBuZXdFeHBpcmVzQXQsXG4gICAgICAgICdmcicsIC8vIERlZmF1bHQgdG8gRnJlbmNoIGZvciBRdWViZWNcbiAgICAgICAgaW52aXRhdGlvbi5wZXJzb25hbE1lc3NhZ2VcbiAgICAgICk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCfinIUgSW52aXRhdGlvbiByZXNlbnQ6Jywge1xuICAgICAgICBpZCxcbiAgICAgICAgZW1haWw6IGludml0YXRpb24uZW1haWwsXG4gICAgICAgIG5ld0V4cGlyZXNBdCxcbiAgICAgICAgZW1haWxTZW50LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZW1haWxTZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KaoO+4jyBJbnZpdGF0aW9uIHVwZGF0ZWQgYnV0IGVtYWlsIGZhaWxlZCB0byByZXNlbmQnKTtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjA3KS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW52aXRhdGlvbiB1cGRhdGVkIGJ1dCBlbWFpbCBmYWlsZWQgdG8gcmVzZW5kJyxcbiAgICAgICAgICBlbWFpbFNlbnQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnSW52aXRhdGlvbiByZXNlbnQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgZW1haWxTZW50OiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlc2VuZGluZyBpbnZpdGF0aW9uOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHJlc2VuZCBpbnZpdGF0aW9uJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIEdFVCAvYXBpL2ludml0YXRpb25zL3BlbmRpbmcgLSBHZXQgcGVuZGluZyBpbnZpdGF0aW9ucyB3aXRoIHJvbGUtYmFzZWQgZmlsdGVyaW5nLlxuICAgKiBBZG1pbjogY2FuIHNlZSBhbGwgcGVuZGluZyBpbnZpdGF0aW9uc1xuICAgKiBNYW5hZ2VyOiBjYW4gb25seSBzZWUgcGVuZGluZyBpbnZpdGF0aW9ucyBpbiB0aGVpciBvcmdhbml6YXRpb25zXG4gICAqL1xuICBhcHAuZ2V0KCcvYXBpL2ludml0YXRpb25zL3BlbmRpbmcnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGlmICghY3VycmVudFVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnLFxuICAgICAgICAgIGNvZGU6ICdBVVRIX1JFUVVJUkVEJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgYWRtaW5zIGFuZCBtYW5hZ2VycyBjYW4gdmlldyBpbnZpdGF0aW9uc1xuICAgICAgaWYgKCFbJ2FkbWluJywgJ21hbmFnZXInXS5pbmNsdWRlcyhjdXJyZW50VXNlci5yb2xlKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMgdG8gdmlldyBpbnZpdGF0aW9ucycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBsZXQgaW52aXRhdGlvbnNRdWVyeTtcblxuICAgICAgaWYgKGN1cnJlbnRVc2VyLnJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgLy8gQWRtaW4gc2VlcyBhbGwgcGVuZGluZyBpbnZpdGF0aW9uc1xuICAgICAgICBpbnZpdGF0aW9uc1F1ZXJ5ID0gZGJcbiAgICAgICAgICAuc2VsZWN0KHtcbiAgICAgICAgICAgIGlkOiBzY2hlbWEuaW52aXRhdGlvbnMuaWQsXG4gICAgICAgICAgICBlbWFpbDogc2NoZW1hLmludml0YXRpb25zLmVtYWlsLFxuICAgICAgICAgICAgcm9sZTogc2NoZW1hLmludml0YXRpb25zLnJvbGUsXG4gICAgICAgICAgICBzdGF0dXM6IHNjaGVtYS5pbnZpdGF0aW9ucy5zdGF0dXMsXG4gICAgICAgICAgICBleHBpcmVzQXQ6IHNjaGVtYS5pbnZpdGF0aW9ucy5leHBpcmVzQXQsXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IHNjaGVtYS5pbnZpdGF0aW9ucy5jcmVhdGVkQXQsXG4gICAgICAgICAgICBvcmdhbml6YXRpb25JZDogc2NoZW1hLmludml0YXRpb25zLm9yZ2FuaXphdGlvbklkLFxuICAgICAgICAgICAgYnVpbGRpbmdJZDogc2NoZW1hLmludml0YXRpb25zLmJ1aWxkaW5nSWQsXG4gICAgICAgICAgICByZXNpZGVuY2VJZDogc2NoZW1hLmludml0YXRpb25zLnJlc2lkZW5jZUlkLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uTmFtZTogc2NoZW1hLm9yZ2FuaXphdGlvbnMubmFtZSxcbiAgICAgICAgICAgIGJ1aWxkaW5nTmFtZTogc3FsPHN0cmluZz5gYnVpbGRpbmdzLm5hbWVgLFxuICAgICAgICAgICAgcmVzaWRlbmNlVW5pdE51bWJlcjogc3FsPHN0cmluZz5gcmVzaWRlbmNlcy51bml0X251bWJlcmAsXG4gICAgICAgICAgICBpbnZpdGVkQnlOYW1lOiBzcWw8c3RyaW5nPmBDT05DQVQodXNlcnMuZmlyc3RfbmFtZSwgJyAnLCB1c2Vycy5sYXN0X25hbWUpYCxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mcm9tKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgICAubGVmdEpvaW4oc2NoZW1hLm9yZ2FuaXphdGlvbnMsIGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5vcmdhbml6YXRpb25JZCwgc2NoZW1hLm9yZ2FuaXphdGlvbnMuaWQpKVxuICAgICAgICAgIC5sZWZ0Sm9pbihcbiAgICAgICAgICAgIHNxbGBidWlsZGluZ3NgLFxuICAgICAgICAgICAgc3FsYGludml0YXRpb25zLmJ1aWxkaW5nX2lkID0gYnVpbGRpbmdzLmlkYFxuICAgICAgICAgIClcbiAgICAgICAgICAubGVmdEpvaW4oXG4gICAgICAgICAgICBzcWxgcmVzaWRlbmNlc2AsXG4gICAgICAgICAgICBzcWxgaW52aXRhdGlvbnMucmVzaWRlbmNlX2lkID0gcmVzaWRlbmNlcy5pZGBcbiAgICAgICAgICApXG4gICAgICAgICAgLmxlZnRKb2luKHNjaGVtYS51c2VycywgZXEoc2NoZW1hLmludml0YXRpb25zLmludml0ZWRCeVVzZXJJZCwgc2NoZW1hLnVzZXJzLmlkKSlcbiAgICAgICAgICAud2hlcmUoZXEoc2NoZW1hLmludml0YXRpb25zLnN0YXR1cywgJ3BlbmRpbmcnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNYW5hZ2VyIHNlZXMgb25seSBpbnZpdGF0aW9ucyBmb3IgdGhlaXIgb3JnYW5pemF0aW9uc1xuICAgICAgICBjb25zdCBtYW5hZ2VyT3JncyA9IGF3YWl0IGRiXG4gICAgICAgICAgLnNlbGVjdCh7IG9yZ2FuaXphdGlvbklkOiBzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uSWQgfSlcbiAgICAgICAgICAuZnJvbShzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMpXG4gICAgICAgICAgLndoZXJlKFxuICAgICAgICAgICAgYW5kKFxuICAgICAgICAgICAgICBlcShzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMudXNlcklkLCBjdXJyZW50VXNlci5pZCksXG4gICAgICAgICAgICAgIGVxKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucy5pc0FjdGl2ZSwgdHJ1ZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IG9yZ0lkcyA9IG1hbmFnZXJPcmdzLm1hcCgob3JnKSA9PiBvcmcub3JnYW5pemF0aW9uSWQpO1xuXG4gICAgICAgIGlmIChvcmdJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5qc29uKFtdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGludml0YXRpb25zUXVlcnkgPSBkYlxuICAgICAgICAgIC5zZWxlY3Qoe1xuICAgICAgICAgICAgaWQ6IHNjaGVtYS5pbnZpdGF0aW9ucy5pZCxcbiAgICAgICAgICAgIGVtYWlsOiBzY2hlbWEuaW52aXRhdGlvbnMuZW1haWwsXG4gICAgICAgICAgICByb2xlOiBzY2hlbWEuaW52aXRhdGlvbnMucm9sZSxcbiAgICAgICAgICAgIHN0YXR1czogc2NoZW1hLmludml0YXRpb25zLnN0YXR1cyxcbiAgICAgICAgICAgIGV4cGlyZXNBdDogc2NoZW1hLmludml0YXRpb25zLmV4cGlyZXNBdCxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogc2NoZW1hLmludml0YXRpb25zLmNyZWF0ZWRBdCxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbklkOiBzY2hlbWEuaW52aXRhdGlvbnMub3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICBidWlsZGluZ0lkOiBzY2hlbWEuaW52aXRhdGlvbnMuYnVpbGRpbmdJZCxcbiAgICAgICAgICAgIHJlc2lkZW5jZUlkOiBzY2hlbWEuaW52aXRhdGlvbnMucmVzaWRlbmNlSWQsXG4gICAgICAgICAgICBvcmdhbml6YXRpb25OYW1lOiBzY2hlbWEub3JnYW5pemF0aW9ucy5uYW1lLFxuICAgICAgICAgICAgYnVpbGRpbmdOYW1lOiBzcWw8c3RyaW5nPmBidWlsZGluZ3MubmFtZWAsXG4gICAgICAgICAgICByZXNpZGVuY2VVbml0TnVtYmVyOiBzcWw8c3RyaW5nPmByZXNpZGVuY2VzLnVuaXRfbnVtYmVyYCxcbiAgICAgICAgICAgIGludml0ZWRCeU5hbWU6IHNxbDxzdHJpbmc+YENPTkNBVCh1c2Vycy5maXJzdF9uYW1lLCAnICcsIHVzZXJzLmxhc3RfbmFtZSlgLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZyb20oc2NoZW1hLmludml0YXRpb25zKVxuICAgICAgICAgIC5sZWZ0Sm9pbihzY2hlbWEub3JnYW5pemF0aW9ucywgZXEoc2NoZW1hLmludml0YXRpb25zLm9yZ2FuaXphdGlvbklkLCBzY2hlbWEub3JnYW5pemF0aW9ucy5pZCkpXG4gICAgICAgICAgLmxlZnRKb2luKFxuICAgICAgICAgICAgc3FsYGJ1aWxkaW5nc2AsXG4gICAgICAgICAgICBzcWxgaW52aXRhdGlvbnMuYnVpbGRpbmdfaWQgPSBidWlsZGluZ3MuaWRgXG4gICAgICAgICAgKVxuICAgICAgICAgIC5sZWZ0Sm9pbihcbiAgICAgICAgICAgIHNxbGByZXNpZGVuY2VzYCxcbiAgICAgICAgICAgIHNxbGBpbnZpdGF0aW9ucy5yZXNpZGVuY2VfaWQgPSByZXNpZGVuY2VzLmlkYFxuICAgICAgICAgIClcbiAgICAgICAgICAubGVmdEpvaW4oc2NoZW1hLnVzZXJzLCBlcShzY2hlbWEuaW52aXRhdGlvbnMuaW52aXRlZEJ5VXNlcklkLCBzY2hlbWEudXNlcnMuaWQpKVxuICAgICAgICAgIC53aGVyZShcbiAgICAgICAgICAgIGFuZChcbiAgICAgICAgICAgICAgZXEoc2NoZW1hLmludml0YXRpb25zLnN0YXR1cywgJ3BlbmRpbmcnKSxcbiAgICAgICAgICAgICAgaW5BcnJheShzY2hlbWEuaW52aXRhdGlvbnMub3JnYW5pemF0aW9uSWQsIG9yZ0lkcylcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbnZpdGF0aW9ucyA9IGF3YWl0IGludml0YXRpb25zUXVlcnk7XG5cbiAgICAgIHJlcy5qc29uKGludml0YXRpb25zKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZmV0Y2hpbmcgcGVuZGluZyBpbnZpdGF0aW9uczonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBwZW5kaW5nIGludml0YXRpb25zJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIERFTEVURSAvYXBpL2ludml0YXRpb25zLzppZCAtIERlbGV0ZSBhIHBlbmRpbmcgaW52aXRhdGlvbi5cbiAgICogQWRtaW46IGNhbiBkZWxldGUgYW55IGludml0YXRpb25cbiAgICogTWFuYWdlcjogY2FuIG9ubHkgZGVsZXRlIGludml0YXRpb25zIGZyb20gdGhlaXIgb3JnYW5pemF0aW9uc1xuICAgKi9cbiAgYXBwLmRlbGV0ZSgnL2FwaS9pbnZpdGF0aW9ucy86aWQnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3VycmVudFVzZXIgPSByZXEudXNlciB8fCByZXEuc2Vzc2lvbj8udXNlcjtcbiAgICAgIGNvbnN0IHsgaWQ6IGludml0YXRpb25JZCB9ID0gcmVxLnBhcmFtcztcblxuICAgICAgaWYgKCFjdXJyZW50VXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcsXG4gICAgICAgICAgY29kZTogJ0FVVEhfUkVRVUlSRUQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gT25seSBhZG1pbnMgYW5kIG1hbmFnZXJzIGNhbiBkZWxldGUgaW52aXRhdGlvbnNcbiAgICAgIGlmICghWydhZG1pbicsICdtYW5hZ2VyJ10uaW5jbHVkZXMoY3VycmVudFVzZXIucm9sZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zIHRvIGRlbGV0ZSBpbnZpdGF0aW9ucycsXG4gICAgICAgICAgY29kZTogJ0lOU1VGRklDSUVOVF9QRVJNSVNTSU9OUycsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWludml0YXRpb25JZCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZpdGF0aW9uIElEIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9SRVFVRVNUJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCB0aGUgaW52aXRhdGlvbiB0byBjaGVjayBwZXJtaXNzaW9uc1xuICAgICAgY29uc3QgaW52aXRhdGlvbiA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuaWQsIGludml0YXRpb25JZCkpXG4gICAgICAgIC5saW1pdCgxKTtcblxuICAgICAgaWYgKGludml0YXRpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ludml0YXRpb24gbm90IGZvdW5kJyxcbiAgICAgICAgICBjb2RlOiAnSU5WSVRBVElPTl9OT1RfRk9VTkQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW52aXRhdGlvbkRhdGEgPSBpbnZpdGF0aW9uWzBdO1xuXG4gICAgICAvLyBDaGVjayBpZiBtYW5hZ2VyIGhhcyBwZXJtaXNzaW9uIHRvIGRlbGV0ZSB0aGlzIGludml0YXRpb25cbiAgICAgIGlmIChjdXJyZW50VXNlci5yb2xlID09PSAnbWFuYWdlcicpIHtcbiAgICAgICAgY29uc3QgbWFuYWdlck9yZ3MgPSBhd2FpdCBkYlxuICAgICAgICAgIC5zZWxlY3QoeyBvcmdhbml6YXRpb25JZDogc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbklkIH0pXG4gICAgICAgICAgLmZyb20oc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zKVxuICAgICAgICAgIC53aGVyZShcbiAgICAgICAgICAgIGFuZChcbiAgICAgICAgICAgICAgZXEoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zLnVzZXJJZCwgY3VycmVudFVzZXIuaWQpLFxuICAgICAgICAgICAgICBlcShzY2hlbWEudXNlck9yZ2FuaXphdGlvbnMuaXNBY3RpdmUsIHRydWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBvcmdJZHMgPSBtYW5hZ2VyT3Jncy5tYXAoKG9yZykgPT4gb3JnLm9yZ2FuaXphdGlvbklkKTtcblxuICAgICAgICBpZiAoIWludml0YXRpb25EYXRhLm9yZ2FuaXphdGlvbklkIHx8ICFvcmdJZHMuaW5jbHVkZXMoaW52aXRhdGlvbkRhdGEub3JnYW5pemF0aW9uSWQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdZb3UgY2FuIG9ubHkgZGVsZXRlIGludml0YXRpb25zIGZyb20geW91ciBvcmdhbml6YXRpb25zJyxcbiAgICAgICAgICAgIGNvZGU6ICdJTlNVRkZJQ0lFTlRfUEVSTUlTU0lPTlMnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERlbGV0ZSB0aGUgaW52aXRhdGlvblxuICAgICAgYXdhaXQgZGIuZGVsZXRlKHNjaGVtYS5pbnZpdGF0aW9ucykud2hlcmUoZXEoc2NoZW1hLmludml0YXRpb25zLmlkLCBpbnZpdGF0aW9uSWQpKTtcblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnSW52aXRhdGlvbiBkZWxldGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIGludml0YXRpb25JZCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBkZWxldGluZyBpbnZpdGF0aW9uOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIGRlbGV0ZSBpbnZpdGF0aW9uJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iXSwidmVyc2lvbiI6M30=