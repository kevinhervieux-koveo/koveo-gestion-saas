dac09166c7e3605351aba70401a725dd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFocus = useFocus;
const react_1 = require("react");
const calculateFocusTarget_js_1 = require("./helpers/calculateFocusTarget.js");
const getNextFocus_js_1 = require("./helpers/getNextFocus.js");
/**
 * Manages focus behavior for the DayPicker component, including setting,
 * moving, and blurring focus on calendar days.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param calendar - The calendar object containing the displayed days and
 *   months.
 * @param getModifiers - A function to retrieve modifiers for a given day.
 * @param isSelected - A function to check if a date is selected.
 * @param dateLib - The date utility library instance.
 * @returns An object containing focus-related methods and the currently focused
 *   day.
 */
function useFocus(props, calendar, getModifiers, isSelected, dateLib) {
    const { autoFocus } = props;
    const [lastFocused, setLastFocused] = (0, react_1.useState)();
    const focusTarget = (0, calculateFocusTarget_js_1.calculateFocusTarget)(calendar.days, getModifiers, isSelected || (() => false), lastFocused);
    const [focusedDay, setFocused] = (0, react_1.useState)(autoFocus ? focusTarget : undefined);
    const blur = () => {
        setLastFocused(focusedDay);
        setFocused(undefined);
    };
    const moveFocus = (moveBy, moveDir) => {
        if (!focusedDay)
            return;
        const nextFocus = (0, getNextFocus_js_1.getNextFocus)(moveBy, moveDir, focusedDay, calendar.navStart, calendar.navEnd, props, dateLib);
        if (!nextFocus)
            return;
        calendar.goToDay(nextFocus);
        setFocused(nextFocus);
    };
    const isFocusTarget = (day) => {
        return Boolean(focusTarget?.isEqualTo(day));
    };
    const useFocus = {
        isFocusTarget,
        setFocused,
        focused: focusedDay,
        blur,
        moveFocus,
    };
    return useFocus;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy91c2VGb2N1cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM1QixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsTUFBTSx5QkFBeUIsR0FBRyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUMvRSxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQy9EOzs7Ozs7Ozs7Ozs7O0dBYUc7QUFDSCxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsT0FBTztJQUNoRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQzVCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDOUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUUseUJBQXlCLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxVQUFVLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUMvSSxNQUFNLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUYsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO1FBQ2QsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNCLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUM7SUFDRixNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUNsQyxJQUFJLENBQUMsVUFBVTtZQUNYLE9BQU87UUFDWCxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZJLElBQUksQ0FBQyxTQUFTO1lBQ1YsT0FBTztRQUNYLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQztJQUNGLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDMUIsT0FBTyxPQUFPLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHO1FBQ2IsYUFBYTtRQUNiLFVBQVU7UUFDVixPQUFPLEVBQUUsVUFBVTtRQUNuQixJQUFJO1FBQ0osU0FBUztLQUNaLENBQUM7SUFDRixPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL3JlYWN0LWRheS1waWNrZXIvZGlzdC9janMvdXNlRm9jdXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUZvY3VzID0gdXNlRm9jdXM7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgY2FsY3VsYXRlRm9jdXNUYXJnZXRfanNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnMvY2FsY3VsYXRlRm9jdXNUYXJnZXQuanNcIik7XG5jb25zdCBnZXROZXh0Rm9jdXNfanNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnMvZ2V0TmV4dEZvY3VzLmpzXCIpO1xuLyoqXG4gKiBNYW5hZ2VzIGZvY3VzIGJlaGF2aW9yIGZvciB0aGUgRGF5UGlja2VyIGNvbXBvbmVudCwgaW5jbHVkaW5nIHNldHRpbmcsXG4gKiBtb3ZpbmcsIGFuZCBibHVycmluZyBmb2N1cyBvbiBjYWxlbmRhciBkYXlzLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgRGF5UGlja2VyIHByb3BzLlxuICogQHBhcmFtIHByb3BzIC0gVGhlIERheVBpY2tlciBwcm9wcy5cbiAqIEBwYXJhbSBjYWxlbmRhciAtIFRoZSBjYWxlbmRhciBvYmplY3QgY29udGFpbmluZyB0aGUgZGlzcGxheWVkIGRheXMgYW5kXG4gKiAgIG1vbnRocy5cbiAqIEBwYXJhbSBnZXRNb2RpZmllcnMgLSBBIGZ1bmN0aW9uIHRvIHJldHJpZXZlIG1vZGlmaWVycyBmb3IgYSBnaXZlbiBkYXkuXG4gKiBAcGFyYW0gaXNTZWxlY3RlZCAtIEEgZnVuY3Rpb24gdG8gY2hlY2sgaWYgYSBkYXRlIGlzIHNlbGVjdGVkLlxuICogQHBhcmFtIGRhdGVMaWIgLSBUaGUgZGF0ZSB1dGlsaXR5IGxpYnJhcnkgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBmb2N1cy1yZWxhdGVkIG1ldGhvZHMgYW5kIHRoZSBjdXJyZW50bHkgZm9jdXNlZFxuICogICBkYXkuXG4gKi9cbmZ1bmN0aW9uIHVzZUZvY3VzKHByb3BzLCBjYWxlbmRhciwgZ2V0TW9kaWZpZXJzLCBpc1NlbGVjdGVkLCBkYXRlTGliKSB7XG4gICAgY29uc3QgeyBhdXRvRm9jdXMgfSA9IHByb3BzO1xuICAgIGNvbnN0IFtsYXN0Rm9jdXNlZCwgc2V0TGFzdEZvY3VzZWRdID0gKDAsIHJlYWN0XzEudXNlU3RhdGUpKCk7XG4gICAgY29uc3QgZm9jdXNUYXJnZXQgPSAoMCwgY2FsY3VsYXRlRm9jdXNUYXJnZXRfanNfMS5jYWxjdWxhdGVGb2N1c1RhcmdldCkoY2FsZW5kYXIuZGF5cywgZ2V0TW9kaWZpZXJzLCBpc1NlbGVjdGVkIHx8ICgoKSA9PiBmYWxzZSksIGxhc3RGb2N1c2VkKTtcbiAgICBjb25zdCBbZm9jdXNlZERheSwgc2V0Rm9jdXNlZF0gPSAoMCwgcmVhY3RfMS51c2VTdGF0ZSkoYXV0b0ZvY3VzID8gZm9jdXNUYXJnZXQgOiB1bmRlZmluZWQpO1xuICAgIGNvbnN0IGJsdXIgPSAoKSA9PiB7XG4gICAgICAgIHNldExhc3RGb2N1c2VkKGZvY3VzZWREYXkpO1xuICAgICAgICBzZXRGb2N1c2VkKHVuZGVmaW5lZCk7XG4gICAgfTtcbiAgICBjb25zdCBtb3ZlRm9jdXMgPSAobW92ZUJ5LCBtb3ZlRGlyKSA9PiB7XG4gICAgICAgIGlmICghZm9jdXNlZERheSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgbmV4dEZvY3VzID0gKDAsIGdldE5leHRGb2N1c19qc18xLmdldE5leHRGb2N1cykobW92ZUJ5LCBtb3ZlRGlyLCBmb2N1c2VkRGF5LCBjYWxlbmRhci5uYXZTdGFydCwgY2FsZW5kYXIubmF2RW5kLCBwcm9wcywgZGF0ZUxpYik7XG4gICAgICAgIGlmICghbmV4dEZvY3VzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYWxlbmRhci5nb1RvRGF5KG5leHRGb2N1cyk7XG4gICAgICAgIHNldEZvY3VzZWQobmV4dEZvY3VzKTtcbiAgICB9O1xuICAgIGNvbnN0IGlzRm9jdXNUYXJnZXQgPSAoZGF5KSA9PiB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGZvY3VzVGFyZ2V0Py5pc0VxdWFsVG8oZGF5KSk7XG4gICAgfTtcbiAgICBjb25zdCB1c2VGb2N1cyA9IHtcbiAgICAgICAgaXNGb2N1c1RhcmdldCxcbiAgICAgICAgc2V0Rm9jdXNlZCxcbiAgICAgICAgZm9jdXNlZDogZm9jdXNlZERheSxcbiAgICAgICAgYmx1cixcbiAgICAgICAgbW92ZUZvY3VzLFxuICAgIH07XG4gICAgcmV0dXJuIHVzZUZvY3VzO1xufVxuIl0sInZlcnNpb24iOjN9