e79fa4296f006d48191f41b32ab6af27
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validationHelpers = exports.schemas = exports.compositeFields = exports.enumFields = exports.commonFields = exports.RESIDENCE_DOCUMENT_TYPES = exports.BUILDING_DOCUMENT_TYPES = exports.BILL_CATEGORIES = exports.BUILDING_TYPES = exports.SCHEDULE_TYPES = exports.PAYMENT_TYPES = exports.BILL_STATUSES = exports.DEMAND_STATUSES = exports.DEMAND_TYPES = exports.USER_ROLES = void 0;
const zod_1 = require("zod");
// Common enum definitions
exports.USER_ROLES = ['admin', 'manager', 'tenant', 'resident'];
exports.DEMAND_TYPES = ['maintenance', 'complaint', 'information', 'other'];
exports.DEMAND_STATUSES = [
    'submitted',
    'under_review',
    'approved',
    'rejected',
    'in_progress',
    'completed',
    'cancelled',
];
exports.BILL_STATUSES = ['draft', 'sent', 'overdue', 'paid', 'cancelled'];
exports.PAYMENT_TYPES = ['unique', 'recurrent'];
exports.SCHEDULE_TYPES = ['weekly', 'monthly', 'quarterly', 'yearly'];
exports.BUILDING_TYPES = [
    'condo',
    'apartment',
    'townhouse',
    'commercial',
    'mixed_use',
    'other',
];
exports.BILL_CATEGORIES = [
    'insurance',
    'maintenance',
    'salary',
    'utilities',
    'cleaning',
    'security',
    'landscaping',
    'professional_services',
    'administration',
    'repairs',
    'supplies',
    'taxes',
    'technology',
    'reserves',
    'other',
];
exports.BUILDING_DOCUMENT_TYPES = [
    'bylaw',
    'financial',
    'maintenance',
    'legal',
    'meeting_minutes',
    'insurance',
    'contracts',
    'permits',
    'inspection',
    'other',
];
exports.RESIDENCE_DOCUMENT_TYPES = [
    'lease',
    'inspection',
    'maintenance',
    'legal',
    'insurance',
    'financial',
    'communication',
    'photos',
    'other',
];
// Common validation schemas
exports.commonFields = {
    // Required string fields
    requiredString: (fieldName, maxLength) => maxLength
        ? zod_1.z.string().min(1, `${fieldName} is required`).max(maxLength, `${fieldName} is too long`)
        : zod_1.z.string().min(1, `${fieldName} is required`),
    // Optional string fields
    optionalString: (maxLength) => maxLength ? zod_1.z.string().max(maxLength, 'Text is too long').optional() : zod_1.z.string().optional(),
    // Required ID fields
    requiredId: (fieldName) => zod_1.z.string().min(1, `${fieldName} is required`),
    // Email validation
    email: zod_1.z.string().email('Invalid email address'),
    // Description with minimum length
    description: (minLength = 10) => zod_1.z.string().min(minLength, `Description must be at least ${minLength} characters`),
    // Amount/Price validation
    amount: zod_1.z.string().min(1, 'Amount is required'),
    // Date validation
    date: (fieldName) => zod_1.z
        .string()
        .min(1, `${fieldName} is required`)
        .refine((dateStr) => {
        const date = new Date(dateStr);
        return !isNaN(date.getTime());
    }, {
        message: `Valid ${fieldName.toLowerCase()} is required`,
    }),
    // Optional date validation
    optionalDate: zod_1.z.string().optional(),
    // Boolean with default
    booleanWithDefault: (defaultValue) => zod_1.z.boolean().default(defaultValue),
};
// Enum validation schemas
exports.enumFields = {
    userRole: zod_1.z.enum(exports.USER_ROLES),
    demandType: zod_1.z.enum(exports.DEMAND_TYPES),
    demandStatus: zod_1.z.enum(exports.DEMAND_STATUSES),
    billStatus: zod_1.z.enum(exports.BILL_STATUSES),
    billCategory: zod_1.z.enum(exports.BILL_CATEGORIES),
    paymentType: zod_1.z.enum(exports.PAYMENT_TYPES),
    scheduleType: zod_1.z.enum(exports.SCHEDULE_TYPES).optional(),
    buildingType: zod_1.z.enum(exports.BUILDING_TYPES),
    buildingDocumentType: zod_1.z.enum(exports.BUILDING_DOCUMENT_TYPES),
    residenceDocumentType: zod_1.z.enum(exports.RESIDENCE_DOCUMENT_TYPES),
};
// Complex field combinations
// First define basic composites that don't depend on others
const addressFields = {
    address: exports.commonFields.requiredString('Address', 500),
    city: exports.commonFields.requiredString('City', 100),
    province: exports.commonFields.requiredString('Province', 100),
    postalCode: exports.commonFields.requiredString('Postal code', 20),
};
const personNameFields = {
    firstName: exports.commonFields.requiredString('First name', 100),
    lastName: exports.commonFields.requiredString('Last name', 100),
};
exports.compositeFields = {
    // Standard name fields
    personName: personNameFields,
    // Standard address fields
    address: addressFields,
    // Organization fields
    organizationBase: {
        name: exports.commonFields.requiredString('Organization name', 200),
        type: exports.commonFields.requiredString('Organization type'),
        ...addressFields,
    },
    // Building base fields
    buildingBase: {
        name: exports.commonFields.requiredString('Building name', 255),
        ...addressFields,
        buildingType: exports.enumFields.buildingType,
        organizationId: exports.commonFields.requiredId('Organization'),
    },
    // Document base fields
    documentBase: {
        name: exports.commonFields.requiredString('Name', 255),
        dateReference: exports.commonFields.date('Reference date'),
        isVisibleToTenants: exports.commonFields.booleanWithDefault(true),
    },
    // Bill base fields
    billBase: {
        title: exports.commonFields.requiredString('Title'),
        description: exports.commonFields.optionalString(),
        category: exports.enumFields.billCategory,
        vendor: exports.commonFields.optionalString(),
        paymentType: exports.enumFields.paymentType,
        schedulePayment: exports.enumFields.scheduleType,
        totalAmount: exports.commonFields.amount,
        startDate: exports.commonFields.date('Start date'),
        endDate: exports.commonFields.optionalDate,
        status: exports.enumFields.billStatus,
        notes: exports.commonFields.optionalString(),
    },
    // Demand base fields
    demandBase: {
        type: exports.enumFields.demandType,
        description: exports.commonFields.description(10),
        buildingId: exports.commonFields.requiredId('Building'),
        residenceId: exports.commonFields.optionalString(),
        assignationBuildingId: exports.commonFields.optionalString(),
        assignationResidenceId: exports.commonFields.optionalString(),
    },
};
// Pre-built schemas for common entities
exports.schemas = {
    // User schemas
    userCreate: zod_1.z.object({
        ...exports.compositeFields.personName,
        email: exports.commonFields.email,
        role: exports.enumFields.userRole,
    }),
    // Building document schema
    buildingDocument: zod_1.z.object({
        ...exports.compositeFields.documentBase,
        type: exports.enumFields.buildingDocumentType,
        buildingId: exports.commonFields.requiredId('Building'),
    }),
    // Residence document schema
    residenceDocument: zod_1.z.object({
        ...exports.compositeFields.documentBase,
        type: exports.enumFields.residenceDocumentType,
        residenceId: exports.commonFields.requiredId('Residence'),
    }),
    // Bill schema
    bill: zod_1.z.object(exports.compositeFields.billBase),
    // Demand schema
    demand: zod_1.z.object(exports.compositeFields.demandBase),
    // Demand review schema (for managers)
    demandReview: zod_1.z.object({
        status: zod_1.z.enum(['approved', 'rejected', 'under_review', 'in_progress', 'completed']),
        reviewNotes: exports.commonFields.optionalString(),
        assignationBuildingId: exports.commonFields.optionalString(),
        assignationResidenceId: exports.commonFields.optionalString(),
    }),
};
// Utility functions for validation
exports.validationHelpers = {
    // Create form schema with common fields
    createFormSchema: (fields) => zod_1.z.object(fields),
    // Extend existing schema with additional fields
    extendSchema: (baseSchema, extensions) => baseSchema.extend(extensions),
    // Create optional version of schema
    makeOptional: (schema) => schema.partial(),
    // Create pick schema with selected fields
    pickFields: (schema, keys) => schema.pick(Object.fromEntries(keys.map((k) => [k, true]))),
    // Validate enum value
    isValidEnum: (enumArray, value) => enumArray.includes(value),
};
exports.default = {
    commonFields: exports.commonFields,
    enumFields: exports.enumFields,
    compositeFields: exports.compositeFields,
    schemas: exports.schemas,
    validationHelpers: exports.validationHelpers,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,