{"file":"/home/runner/workspace/tests/unit/residence-count-adjustment.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/residence-count-adjustment.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport { db } from '../../server/db';\nimport { buildings, residences, organizations, users, userResidences, documents } from '@shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport {\n  adjustResidenceCount,\n  addResidencesAutomatically,\n  getResidencesForSelection,\n  deleteSelectedResidences,\n} from '../../server/api/buildings/operations';\n\ndescribe('Residence Count Adjustment Features', () => {\n  let testOrganizationId: string;\n  let testBuildingId: string;\n  let testUserId: string;\n  let createdResidenceIds: string[] = [];\n  let createdDocumentIds: string[] = [];\n\n  beforeEach(async () => {\n    // Clean up previous test data\n    await cleanup();\n\n    // Create test organization\n    const org = await db\n      .insert(organizations)\n      .values({\n        name: 'Test Residence Adjustment Org',\n        type: 'association',\n        address: '123 Test Ave',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        phone: '514-555-0123',\n        email: 'test@example.com',\n        isActive: true,\n      })\n      .returning();\n    testOrganizationId = org[0].id;\n\n    // Create test user\n    const user = await db\n      .insert(users)\n      .values({\n        username: `test.residenceadj.${Date.now()}`,\n        email: `test.residenceadj.${Date.now()}@example.com`,\n        password: 'hashedpassword123',\n        firstName: 'Test',\n        lastName: 'User',\n        role: 'admin',\n        isActive: true,\n      })\n      .returning();\n    testUserId = user[0].id;\n\n    // Create test building\n    const building = await db\n      .insert(buildings)\n      .values({\n        name: 'Test Residence Adjustment Building',\n        address: '123 Test St',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        buildingType: 'condo',\n        totalUnits: 5,\n        totalFloors: 2,\n        organizationId: testOrganizationId,\n        isActive: true,\n      })\n      .returning();\n    testBuildingId = building[0].id;\n\n    // Create initial residences\n    const initialResidences = await db\n      .insert(residences)\n      .values([\n        { buildingId: testBuildingId, unitNumber: '101', floor: 1, isActive: true },\n        { buildingId: testBuildingId, unitNumber: '102', floor: 1, isActive: true },\n        { buildingId: testBuildingId, unitNumber: '201', floor: 2, isActive: true },\n        { buildingId: testBuildingId, unitNumber: '202', floor: 2, isActive: true },\n        { buildingId: testBuildingId, unitNumber: '203', floor: 2, isActive: true },\n      ])\n      .returning();\n    createdResidenceIds = initialResidences.map(r => r.id);\n  });\n\n  afterEach(async () => {\n    await cleanup();\n  });\n\n  async function cleanup() {\n    // Clean up test data\n    if (createdDocumentIds.length > 0) {\n      await db.delete(documents).where(eq(documents.id, createdDocumentIds[0]));\n      createdDocumentIds = [];\n    }\n\n    if (createdResidenceIds.length > 0) {\n      await db.update(residences)\n        .set({ isActive: false })\n        .where(eq(residences.id, createdResidenceIds[0]));\n      createdResidenceIds = [];\n    }\n\n    if (testBuildingId) {\n      await db.update(buildings)\n        .set({ isActive: false })\n        .where(eq(buildings.id, testBuildingId));\n    }\n\n    if (testUserId) {\n      await db.update(users)\n        .set({ isActive: false })\n        .where(eq(users.id, testUserId));\n    }\n\n    if (testOrganizationId) {\n      await db.delete(organizations).where(eq(organizations.id, testOrganizationId));\n    }\n  }\n\n  describe('Automatic Residence Addition', () => {\n    it('should automatically add residences when building count increases', async () => {\n      // Increase from 5 to 8 units\n      const result = await adjustResidenceCount(\n        testBuildingId,\n        testOrganizationId,\n        8, // new count\n        5, // current count\n        2  // floors\n      );\n\n      expect(result.action).toBe('increased');\n      expect(result.residencesToSelect).toBeUndefined();\n\n      // Check that 3 new residences were created\n      const allResidences = await db\n        .select()\n        .from(residences)\n        .where(and(eq(residences.buildingId, testBuildingId), eq(residences.isActive, true)));\n\n      expect(allResidences).toHaveLength(8);\n\n      // Verify new residences have proper unit numbers (algorithm distributes across floors)\n      const unitNumbers = allResidences.map(r => r.unitNumber).sort();\n      expect(unitNumbers).toEqual(['101', '102', '103', '104', '201', '202', '203', '204']);\n    });\n\n    it('should generate proper unit numbers following floor pattern', async () => {\n      // Create building with 3 floors and increase units\n      await addResidencesAutomatically(\n        testBuildingId,\n        4, // add 4 units\n        3, // 3 floors \n        createdResidenceIds.map(id => ({ id, unitNumber: '999' })) // existing residences\n      );\n\n      const newResidences = await db\n        .select({ unitNumber: residences.unitNumber, floor: residences.floor })\n        .from(residences)\n        .where(and(eq(residences.buildingId, testBuildingId), eq(residences.isActive, true)))\n        .orderBy(residences.unitNumber);\n\n      // Should have generated logical unit numbers\n      expect(newResidences.length).toBeGreaterThan(5);\n    });\n  });\n\n  describe('Residence Selection for Deletion', () => {\n    it('should return list of residences prioritizing empty ones', async () => {\n      // Create a document for one residence to make it \"occupied\"\n      const testDocument = await db\n        .insert(documents)\n        .values({\n          name: 'Test Document',\n          documentType: 'lease',\n          filePath: '/test/document.pdf',\n          residenceId: createdResidenceIds[0],\n          buildingId: testBuildingId,\n          uploadedById: testUserId,\n        })\n        .returning();\n      createdDocumentIds.push(testDocument[0].id);\n\n      // Create user-residence relationship for another residence\n      await db\n        .insert(userResidences)\n        .values({\n          userId: testUserId,\n          residenceId: createdResidenceIds[1],\n          relationshipType: 'owner',\n          isActive: true,\n        });\n\n      const residencesToSelect = await getResidencesForSelection(testBuildingId, 3);\n\n      expect(residencesToSelect).toHaveLength(5);\n\n      // Should prioritize empty residences (no documents or users)\n      const emptyResidences = residencesToSelect.filter(r => !r.hasDocuments && !r.hasUsers);\n      const occupiedResidences = residencesToSelect.filter(r => r.hasDocuments || r.hasUsers);\n\n      expect(emptyResidences.length).toBeGreaterThan(0);\n      expect(occupiedResidences.length).toBe(2); // One with document, one with user\n\n      // Empty residences should appear first in the sorted list\n      expect(residencesToSelect[0].hasDocuments).toBe(false);\n      expect(residencesToSelect[0].hasUsers).toBe(false);\n    });\n\n    it('should correctly identify residences with documents and user relationships', async () => {\n      // Add document to first residence\n      const testDocument = await db\n        .insert(documents)\n        .values({\n          name: 'Lease Agreement',\n          documentType: 'lease',\n          filePath: '/test/lease.pdf',\n          residenceId: createdResidenceIds[0],\n          buildingId: testBuildingId,\n          uploadedById: testUserId,\n        })\n        .returning();\n      createdDocumentIds.push(testDocument[0].id);\n\n      const residencesToSelect = await getResidencesForSelection(testBuildingId, 5);\n\n      const residenceWithDoc = residencesToSelect.find(r => r.id === createdResidenceIds[0]);\n      expect(residenceWithDoc).toBeDefined();\n      expect(residenceWithDoc?.hasDocuments).toBe(true);\n      expect(residenceWithDoc?.hasUsers).toBe(false);\n    });\n  });\n\n  describe('Admin-Only Residence Deletion', () => {\n    it('should successfully delete selected residences for admin users', async () => {\n      // Create a test document\n      const testDocument = await db\n        .insert(documents)\n        .values({\n          name: 'Document to Delete',\n          documentType: 'lease',\n          filePath: '/test/delete.pdf',\n          residenceId: createdResidenceIds[0],\n          buildingId: testBuildingId,\n          uploadedById: testUserId,\n        })\n        .returning();\n      createdDocumentIds.push(testDocument[0].id);\n\n      const residencesToDelete = [createdResidenceIds[0], createdResidenceIds[1]];\n\n      const result = await deleteSelectedResidences(\n        testBuildingId,\n        residencesToDelete,\n        'admin'\n      );\n\n      expect(result.deletedCount).toBe(2);\n      expect(result.documentsDeleted).toBe(1);\n\n      // Verify residences are soft-deleted\n      const deletedResidences = await db\n        .select()\n        .from(residences)\n        .where(and(\n          eq(residences.buildingId, testBuildingId),\n          eq(residences.isActive, false)\n        ));\n\n      expect(deletedResidences).toHaveLength(2);\n\n      // Verify document is deleted\n      const remainingDocs = await db\n        .select()\n        .from(documents)\n        .where(eq(documents.id, testDocument[0].id));\n\n      expect(remainingDocs).toHaveLength(0);\n    });\n\n    it('should reject deletion attempts from non-admin users', async () => {\n      await expect(\n        deleteSelectedResidences(testBuildingId, [createdResidenceIds[0]], 'manager')\n      ).rejects.toThrow('Only admins can delete residences');\n\n      await expect(\n        deleteSelectedResidences(testBuildingId, [createdResidenceIds[0]], 'tenant')\n      ).rejects.toThrow('Only admins can delete residences');\n    });\n  });\n\n  describe('Complete Residence Adjustment Flow', () => {\n    it('should handle residence count decrease requiring user selection', async () => {\n      // Simulate decreasing from 5 to 3 units\n      const result = await adjustResidenceCount(\n        testBuildingId,\n        testOrganizationId,\n        3, // new count \n        5, // current count\n        2  // floors\n      );\n\n      expect(result.action).toBe('decreased');\n      expect(result.residencesToSelect).toBeDefined();\n      expect(result.residencesToSelect).toHaveLength(5); // All residences for selection\n    });\n\n    it('should return no action when residence count is unchanged', async () => {\n      const result = await adjustResidenceCount(\n        testBuildingId,\n        testOrganizationId,\n        5, // same count\n        5, // current count  \n        2  // floors\n      );\n\n      expect(result.action).toBe('none');\n      expect(result.residencesToSelect).toBeUndefined();\n    });\n  });\n});"],"version":3}