b3d132364f5bc8cdd2b48e5eec32f293
"use strict";
/**
 * Server-side performance monitoring for Quebec property management SaaS.
 * Tracks database query performance and provides optimization insights.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.dbPerformanceMonitor = void 0;
exports.trackPerformance = trackPerformance;
const perf_hooks_1 = require("perf_hooks");
/**
 * Query performance tracker.
 */
class DatabasePerformanceMonitor {
    queryTimes = [];
    slowQueries = [];
    SLOW_QUERY_THRESHOLD = 100; // ms
    /**
     * Tracks execution time of a database operation.
     * @param queryName
     * @param operation
     */
    trackQuery(queryName, operation) {
        const startTime = perf_hooks_1.performance.now();
        return operation()
            .then((result) => {
            const duration = perf_hooks_1.performance.now() - startTime;
            this.recordQueryTime(queryName, duration);
            return result;
        })
            .catch((error) => {
            const duration = perf_hooks_1.performance.now() - startTime;
            this.recordQueryTime(queryName, duration);
            throw error;
        });
    }
    /**
     * Records query execution time.
     * @param queryName
     * @param duration
     */
    recordQueryTime(queryName, duration) {
        this.queryTimes.push(duration);
        // Keep only last 1000 query times for memory efficiency
        if (this.queryTimes.length > 1000) {
            this.queryTimes.shift();
        }
        // Track slow queries
        if (duration > this.SLOW_QUERY_THRESHOLD) {
            this.slowQueries.push({
                query: queryName,
                duration,
                timestamp: new Date(),
            });
            // Keep only last 100 slow queries
            if (this.slowQueries.length > 100) {
                this.slowQueries.shift();
            }
        }
    }
    /**
     * Gets average query time.
     */
    getAverageQueryTime() {
        if (this.queryTimes.length === 0) {
            return 0;
        }
        return this.queryTimes.reduce((a, b) => a + b, 0) / this.queryTimes.length;
    }
    /**
     * Gets performance statistics.
     */
    getPerformanceStats() {
        const avg = this.getAverageQueryTime();
        const max = Math.max(...this.queryTimes);
        const min = Math.min(...this.queryTimes);
        return {
            averageQueryTime: `${avg.toFixed(2)}ms`,
            maxQueryTime: `${max.toFixed(2)}ms`,
            minQueryTime: `${min.toFixed(2)}ms`,
            totalQueries: this.queryTimes.length,
            slowQueries: this.slowQueries.length,
            recentSlowQueries: this.slowQueries.slice(-10),
        };
    }
    /**
     * Provides optimization recommendations.
     */
    getOptimizationRecommendations() {
        const avg = this.getAverageQueryTime();
        const recommendations = [];
        if (avg > 100) {
            recommendations.push('Average query time exceeds 100ms. Consider adding database indexes.');
        }
        if (this.slowQueries.length > 10) {
            recommendations.push('Multiple slow queries detected. Review and optimize frequent queries.');
        }
        const commonSlowQueries = this.getCommonSlowQueries();
        if (commonSlowQueries.length > 0) {
            recommendations.push(`Common slow queries: ${commonSlowQueries.join(', ')}`);
        }
        return recommendations;
    }
    /**
     * Identifies commonly slow queries.
     */
    getCommonSlowQueries() {
        const queryFrequency = {};
        this.slowQueries.forEach(({ query }) => {
            queryFrequency[query] = (queryFrequency[query] || 0) + 1;
        });
        return Object.entries(queryFrequency)
            .filter(([, count]) => count > 2)
            .map(([query]) => query);
    }
    /**
     * Resets performance tracking data.
     */
    reset() {
        this.queryTimes = [];
        this.slowQueries = [];
    }
}
/**
 * Global performance monitor instance.
 */
exports.dbPerformanceMonitor = new DatabasePerformanceMonitor();
/**
 * Decorator for tracking database operation performance.
 * @param queryName
 */
/**
 * TrackPerformance function.
 * @param queryName
 * @returns Function result.
 */
function trackPerformance(queryName) {
    return function (target, propertyName, descriptor) {
        const method = descriptor.value;
        descriptor.value = async function (...args) {
            return exports.dbPerformanceMonitor.trackQuery(queryName, () => method.apply(this, args));
        };
        return descriptor;
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,