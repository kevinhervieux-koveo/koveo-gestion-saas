f717092b53524d3e77d7a1260c4ef15e
"use strict";
/**
 * Critical Authentication System Test
 * These tests should have caught the login issues - this ensures they never happen again.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const auth_1 = require("../../server/auth");
// Create minimal test app for authentication only
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Add session middleware for memory-based sessions in tests
    const session = require('express-session');
    app.use(session({
        secret: 'test-secret',
        resave: false,
        saveUninitialized: false,
        cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 }
    }));
    (0, auth_1.setupAuthRoutes)(app);
    return app;
};
(0, globals_1.describe)('🔐 Critical Authentication Tests', () => {
    let app;
    (0, globals_1.beforeAll)(() => {
        app = createTestApp();
    });
    (0, globals_1.describe)('Demo User Login Tests', () => {
        (0, globals_1.it)('should successfully login with admin@demo.com and demo123', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'admin@demo.com',
                password: 'demo123'
            })
                .expect(200);
            (0, globals_1.expect)(response.body).toHaveProperty('user');
            (0, globals_1.expect)(response.body.user.email).toBe('admin@demo.com');
            (0, globals_1.expect)(response.body.user.role).toBe('admin');
            (0, globals_1.expect)(response.body.message).toBe('Login successful');
            // Check session cookie is set
            (0, globals_1.expect)(response.headers['set-cookie']).toBeDefined();
            (0, globals_1.expect)(response.headers['set-cookie'][0]).toContain('koveo.sid');
        });
        (0, globals_1.it)('should successfully login with manager@demo.com and demo123', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'manager@demo.com',
                password: 'demo123'
            })
                .expect(200);
            (0, globals_1.expect)(response.body.user.email).toBe('manager@demo.com');
            (0, globals_1.expect)(response.body.user.role).toBe('manager');
        });
        (0, globals_1.it)('should successfully login with tenant@demo.com and demo123', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'tenant@demo.com',
                password: 'demo123'
            })
                .expect(200);
            (0, globals_1.expect)(response.body.user.email).toBe('tenant@demo.com');
            (0, globals_1.expect)(response.body.user.role).toBe('tenant');
        });
    });
    (0, globals_1.describe)('Authentication Error Handling', () => {
        (0, globals_1.it)('should reject login with wrong password', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'admin@demo.com',
                password: 'wrongpassword'
            })
                .expect(401);
            (0, globals_1.expect)(response.body.message).toBe('Invalid credentials');
            (0, globals_1.expect)(response.body.code).toBe('INVALID_CREDENTIALS');
        });
        (0, globals_1.it)('should reject login with non-existent user', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'nonexistent@demo.com',
                password: 'demo123'
            })
                .expect(401);
            (0, globals_1.expect)(response.body.message).toBe('Invalid credentials');
            (0, globals_1.expect)(response.body.code).toBe('INVALID_CREDENTIALS');
        });
        (0, globals_1.it)('should reject login with missing credentials', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({})
                .expect(400);
            (0, globals_1.expect)(response.body.message).toBe('Email and password are required');
            (0, globals_1.expect)(response.body.code).toBe('MISSING_CREDENTIALS');
        });
    });
    (0, globals_1.describe)('Session Management', () => {
        (0, globals_1.it)('should return user info for authenticated session', async () => {
            // First login
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'admin@demo.com',
                password: 'demo123'
            })
                .expect(200);
            // Extract session cookie
            const sessionCookie = loginResponse.headers['set-cookie'][0];
            // Test authenticated request
            const userResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            (0, globals_1.expect)(userResponse.body.email).toBe('admin@demo.com');
            (0, globals_1.expect)(userResponse.body.role).toBe('admin');
        });
        (0, globals_1.it)('should reject unauthenticated requests to protected endpoints', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .expect(401);
            (0, globals_1.expect)(response.body.message).toBe('Not authenticated');
        });
    });
    (0, globals_1.describe)('Password Security', () => {
        (0, globals_1.it)('should verify passwords are properly hashed in database', async () => {
            // Login should work with plain password
            await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'admin@demo.com',
                password: 'demo123'
            })
                .expect(200);
            // But the stored password should be a bcrypt hash, not plain text
            // This test ensures we're not storing plain text passwords
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,