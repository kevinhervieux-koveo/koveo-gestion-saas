70d567ea026a348fdabdf22e14ff1d80
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDates = getDates;
/**
 * Returns all the dates to display in the calendar.
 *
 * This function calculates the range of dates to display based on the provided
 * display months, constraints, and calendar configuration.
 *
 * @param displayMonths The months to display in the calendar.
 * @param maxDate The maximum date to include in the range.
 * @param props The DayPicker props, including calendar configuration options.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of dates to display in the calendar.
 */
function getDates(displayMonths, maxDate, props, dateLib) {
    const firstMonth = displayMonths[0];
    const lastMonth = displayMonths[displayMonths.length - 1];
    const { ISOWeek, fixedWeeks, broadcastCalendar } = props ?? {};
    const { addDays, differenceInCalendarDays, differenceInCalendarMonths, endOfBroadcastWeek, endOfISOWeek, endOfMonth, endOfWeek, isAfter, startOfBroadcastWeek, startOfISOWeek, startOfWeek, } = dateLib;
    const startWeekFirstDate = broadcastCalendar
        ? startOfBroadcastWeek(firstMonth, dateLib)
        : ISOWeek
            ? startOfISOWeek(firstMonth)
            : startOfWeek(firstMonth);
    const endWeekLastDate = broadcastCalendar
        ? endOfBroadcastWeek(lastMonth)
        : ISOWeek
            ? endOfISOWeek(endOfMonth(lastMonth))
            : endOfWeek(endOfMonth(lastMonth));
    const nOfDays = differenceInCalendarDays(endWeekLastDate, startWeekFirstDate);
    const nOfMonths = differenceInCalendarMonths(lastMonth, firstMonth) + 1;
    const dates = [];
    for (let i = 0; i <= nOfDays; i++) {
        const date = addDays(startWeekFirstDate, i);
        if (maxDate && isAfter(date, maxDate)) {
            break;
        }
        dates.push(date);
    }
    // If fixed weeks is enabled, add the extra dates to the array
    const nrOfDaysWithFixedWeeks = broadcastCalendar ? 35 : 42;
    const extraDates = nrOfDaysWithFixedWeeks * nOfMonths;
    if (fixedWeeks && dates.length < extraDates) {
        const daysToAdd = extraDates - dates.length;
        for (let i = 0; i < daysToAdd; i++) {
            const date = addDays(dates[dates.length - 1], 1);
            dates.push(date);
        }
    }
    return dates;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldERhdGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQzVCOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsU0FBUyxRQUFRLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTztJQUNwRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUQsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQy9ELE1BQU0sRUFBRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsMEJBQTBCLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxXQUFXLEdBQUcsR0FBRyxPQUFPLENBQUM7SUFDeE0sTUFBTSxrQkFBa0IsR0FBRyxpQkFBaUI7UUFDeEMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUM7UUFDM0MsQ0FBQyxDQUFDLE9BQU87WUFDTCxDQUFDLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQztZQUM1QixDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sZUFBZSxHQUFHLGlCQUFpQjtRQUNyQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxPQUFPO1lBQ0wsQ0FBQyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMzQyxNQUFNLE9BQU8sR0FBRyx3QkFBd0IsQ0FBQyxlQUFlLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUM5RSxNQUFNLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDaEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNwQyxNQUFNO1FBQ1YsQ0FBQztRQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUNELDhEQUE4RDtJQUM5RCxNQUFNLHNCQUFzQixHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMzRCxNQUFNLFVBQVUsR0FBRyxzQkFBc0IsR0FBRyxTQUFTLENBQUM7SUFDdEQsSUFBSSxVQUFVLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQztRQUMxQyxNQUFNLFNBQVMsR0FBRyxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUM1QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDakMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL3JlYWN0LWRheS1waWNrZXIvZGlzdC9janMvaGVscGVycy9nZXREYXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RGF0ZXMgPSBnZXREYXRlcztcbi8qKlxuICogUmV0dXJucyBhbGwgdGhlIGRhdGVzIHRvIGRpc3BsYXkgaW4gdGhlIGNhbGVuZGFyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyB0aGUgcmFuZ2Ugb2YgZGF0ZXMgdG8gZGlzcGxheSBiYXNlZCBvbiB0aGUgcHJvdmlkZWRcbiAqIGRpc3BsYXkgbW9udGhzLCBjb25zdHJhaW50cywgYW5kIGNhbGVuZGFyIGNvbmZpZ3VyYXRpb24uXG4gKlxuICogQHBhcmFtIGRpc3BsYXlNb250aHMgVGhlIG1vbnRocyB0byBkaXNwbGF5IGluIHRoZSBjYWxlbmRhci5cbiAqIEBwYXJhbSBtYXhEYXRlIFRoZSBtYXhpbXVtIGRhdGUgdG8gaW5jbHVkZSBpbiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0gcHJvcHMgVGhlIERheVBpY2tlciBwcm9wcywgaW5jbHVkaW5nIGNhbGVuZGFyIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEBwYXJhbSBkYXRlTGliIFRoZSBkYXRlIGxpYnJhcnkgdG8gdXNlIGZvciBkYXRlIG1hbmlwdWxhdGlvbi5cbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGRhdGVzIHRvIGRpc3BsYXkgaW4gdGhlIGNhbGVuZGFyLlxuICovXG5mdW5jdGlvbiBnZXREYXRlcyhkaXNwbGF5TW9udGhzLCBtYXhEYXRlLCBwcm9wcywgZGF0ZUxpYikge1xuICAgIGNvbnN0IGZpcnN0TW9udGggPSBkaXNwbGF5TW9udGhzWzBdO1xuICAgIGNvbnN0IGxhc3RNb250aCA9IGRpc3BsYXlNb250aHNbZGlzcGxheU1vbnRocy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCB7IElTT1dlZWssIGZpeGVkV2Vla3MsIGJyb2FkY2FzdENhbGVuZGFyIH0gPSBwcm9wcyA/PyB7fTtcbiAgICBjb25zdCB7IGFkZERheXMsIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cywgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMsIGVuZE9mQnJvYWRjYXN0V2VlaywgZW5kT2ZJU09XZWVrLCBlbmRPZk1vbnRoLCBlbmRPZldlZWssIGlzQWZ0ZXIsIHN0YXJ0T2ZCcm9hZGNhc3RXZWVrLCBzdGFydE9mSVNPV2Vlaywgc3RhcnRPZldlZWssIH0gPSBkYXRlTGliO1xuICAgIGNvbnN0IHN0YXJ0V2Vla0ZpcnN0RGF0ZSA9IGJyb2FkY2FzdENhbGVuZGFyXG4gICAgICAgID8gc3RhcnRPZkJyb2FkY2FzdFdlZWsoZmlyc3RNb250aCwgZGF0ZUxpYilcbiAgICAgICAgOiBJU09XZWVrXG4gICAgICAgICAgICA/IHN0YXJ0T2ZJU09XZWVrKGZpcnN0TW9udGgpXG4gICAgICAgICAgICA6IHN0YXJ0T2ZXZWVrKGZpcnN0TW9udGgpO1xuICAgIGNvbnN0IGVuZFdlZWtMYXN0RGF0ZSA9IGJyb2FkY2FzdENhbGVuZGFyXG4gICAgICAgID8gZW5kT2ZCcm9hZGNhc3RXZWVrKGxhc3RNb250aClcbiAgICAgICAgOiBJU09XZWVrXG4gICAgICAgICAgICA/IGVuZE9mSVNPV2VlayhlbmRPZk1vbnRoKGxhc3RNb250aCkpXG4gICAgICAgICAgICA6IGVuZE9mV2VlayhlbmRPZk1vbnRoKGxhc3RNb250aCkpO1xuICAgIGNvbnN0IG5PZkRheXMgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZW5kV2Vla0xhc3REYXRlLCBzdGFydFdlZWtGaXJzdERhdGUpO1xuICAgIGNvbnN0IG5PZk1vbnRocyA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKGxhc3RNb250aCwgZmlyc3RNb250aCkgKyAxO1xuICAgIGNvbnN0IGRhdGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbk9mRGF5czsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBhZGREYXlzKHN0YXJ0V2Vla0ZpcnN0RGF0ZSwgaSk7XG4gICAgICAgIGlmIChtYXhEYXRlICYmIGlzQWZ0ZXIoZGF0ZSwgbWF4RGF0ZSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRhdGVzLnB1c2goZGF0ZSk7XG4gICAgfVxuICAgIC8vIElmIGZpeGVkIHdlZWtzIGlzIGVuYWJsZWQsIGFkZCB0aGUgZXh0cmEgZGF0ZXMgdG8gdGhlIGFycmF5XG4gICAgY29uc3QgbnJPZkRheXNXaXRoRml4ZWRXZWVrcyA9IGJyb2FkY2FzdENhbGVuZGFyID8gMzUgOiA0MjtcbiAgICBjb25zdCBleHRyYURhdGVzID0gbnJPZkRheXNXaXRoRml4ZWRXZWVrcyAqIG5PZk1vbnRocztcbiAgICBpZiAoZml4ZWRXZWVrcyAmJiBkYXRlcy5sZW5ndGggPCBleHRyYURhdGVzKSB7XG4gICAgICAgIGNvbnN0IGRheXNUb0FkZCA9IGV4dHJhRGF0ZXMgLSBkYXRlcy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF5c1RvQWRkOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBhZGREYXlzKGRhdGVzW2RhdGVzLmxlbmd0aCAtIDFdLCAxKTtcbiAgICAgICAgICAgIGRhdGVzLnB1c2goZGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGVzO1xufVxuIl0sInZlcnNpb24iOjN9