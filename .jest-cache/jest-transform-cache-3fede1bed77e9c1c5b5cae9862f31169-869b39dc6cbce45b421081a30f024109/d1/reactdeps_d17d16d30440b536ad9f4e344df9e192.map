{"file":"/home/runner/workspace/node_modules/wouter/esm/react-deps.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA+B;AAC/B,+BAAgJ;AAAvI,iGAAA,QAAQ,OAAA;AAAE,qGAAA,YAAY,OAAA;AAAE,sGAAA,aAAa,OAAA;AAAE,sGAAA,aAAa,OAAA;AAAE,mGAAA,UAAU,OAAA;AAAE,uGAAA,cAAc,OAAA;AAAE,mGAAA,UAAU,OAAA;AAAE,gGAAA,OAAO,OAAA;AAAE,+FAAA,MAAM,OAAA;AAAE,iGAAA,QAAQ,OAAA;AAChI,kEAA6E;AAApE,gHAAA,oBAAoB,OAAA;AAE7B,yDAAyD;AACzD,qDAAqD;AACrD,MAAM,yBAAyB,GAAG,KAAK,CAAC,cAAc,GAAG,QAAQ,CAAC,CAAC;AAEnE,eAAe;AACf,sFAAsF;AACtF,MAAM,SAAS,GAAG,CAAC,CAAC,CAClB,OAAO,MAAM,KAAK,WAAW;IAC7B,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW;IACtC,OAAO,MAAM,CAAC,QAAQ,CAAC,aAAa,KAAK,WAAW,CACrD,CAAC;AAEF,eAAe;AACf,4FAA4F;AAC5F,8EAA8E;AAC9E,6EAA6E;AAC7E,mCAAmC;AACnC,MAAM,yBAAyB,GAAG,SAAS;IACzC,CAAC,CAAC,KAAK,CAAC,eAAe;IACvB,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;AAwBmB,8DAAyB;AAtBhE,sDAAsD;AACtD,+FAA+F;AAC/F,MAAM,kBAAkB,GACtB,yBAAyB,IAAI,yBAAyB,CAAC;AAmBtC,gDAAkB;AAjBrC,sDAAsD;AACtD,sEAAsE;AACtE,uEAAuE;AACvE,mEAAmE;AACnE,iCAAiC;AACjC,wEAAwE;AACxE,MAAM,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE;IACtB,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IACrE,wEAAwE;IACxE,2EAA2E;IAC3E,4EAA4E;IAC5E,kBAAkB,CAAC,GAAG,EAAE;QACtB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACd,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC;AAEO,4BAAQ","names":[],"sources":["/home/runner/workspace/node_modules/wouter/esm/react-deps.js"],"sourcesContent":["import * as React from 'react';\nexport { Fragment, cloneElement, createContext, createElement, forwardRef, isValidElement, useContext, useMemo, useRef, useState } from 'react';\nexport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\n\n// React.useInsertionEffect is not available in React <18\n// This hack fixes a transpilation issue on some apps\nconst useBuiltinInsertionEffect = React[\"useInsertion\" + \"Effect\"];\n\n// Copied from:\n// https://github.com/facebook/react/blob/main/packages/shared/ExecutionEnvironment.js\nconst canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\n\n// Copied from:\n// https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.ts\n// \"React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\"\nconst useIsomorphicLayoutEffect = canUseDOM\n  ? React.useLayoutEffect\n  : React.useEffect;\n\n// useInsertionEffect is already a noop on the server.\n// See: https://github.com/facebook/react/blob/main/packages/react-server/src/ReactFizzHooks.js\nconst useInsertionEffect =\n  useBuiltinInsertionEffect || useIsomorphicLayoutEffect;\n\n// Userland polyfill while we wait for the forthcoming\n// https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md\n// Note: \"A high-fidelity polyfill for useEvent is not possible because\n// there is no lifecycle or Hook in React that we can use to switch\n// .current at the right timing.\"\n// So we will have to make do with this \"close enough\" approach for now.\nconst useEvent = (fn) => {\n  const ref = React.useRef([fn, (...args) => ref[0](...args)]).current;\n  // Per Dan Abramov: useInsertionEffect executes marginally closer to the\n  // correct timing for ref synchronization than useLayoutEffect on React 18.\n  // See: https://github.com/facebook/react/pull/25881#issuecomment-1356244360\n  useInsertionEffect(() => {\n    ref[0] = fn;\n  });\n  return ref[1];\n};\n\nexport { useEvent, useInsertionEffect, useIsomorphicLayoutEffect };\n"],"version":3}