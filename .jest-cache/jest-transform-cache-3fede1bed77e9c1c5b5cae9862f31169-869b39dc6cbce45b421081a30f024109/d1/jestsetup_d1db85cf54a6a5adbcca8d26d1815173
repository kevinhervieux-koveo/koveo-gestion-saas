f6ea2580d2b6c46a69a1c97fb0114ab9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Performance: Mock expensive external dependencies
jest.mock('@google/genai', () => ({
    GoogleGenAI: jest.fn().mockImplementation(() => ({
        getGenerativeModel: jest.fn().mockReturnValue({
            generateContent: jest.fn().mockResolvedValue({
                response: {
                    text: () => 'Mock AI response',
                },
            }),
        }),
    })),
}));
// Comprehensive database mocking to prevent real connections
jest.mock('./server/db', () => {
    const mockDb = {
        query: jest.fn().mockResolvedValue([]),
        insert: jest.fn().mockImplementation(() => ({
            values: jest.fn().mockImplementation(() => ({
                returning: jest.fn().mockResolvedValue([{ id: 'mock-id' }])
            }))
        })),
        select: jest.fn().mockImplementation(() => ({
            from: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockResolvedValue([]),
                leftJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockResolvedValue([])
                })),
                innerJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockResolvedValue([])
                }))
            }))
        })),
        update: jest.fn().mockImplementation(() => ({
            set: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockResolvedValue({ affectedRows: 0 })
            }))
        })),
        delete: jest.fn().mockImplementation(() => ({
            where: jest.fn().mockResolvedValue({ affectedRows: 0 })
        }))
    };
    const mockSql = jest.fn().mockResolvedValue([]);
    return {
        db: mockDb,
        sql: mockSql,
        pool: mockSql,
        default: mockDb
    };
});
// Mock server storage completely
jest.mock('./server/storage', () => ({
    storage: {
        create: jest.fn().mockResolvedValue({ id: 'mock-id' }),
        findById: jest.fn().mockResolvedValue(null),
        findMany: jest.fn().mockResolvedValue([]),
        update: jest.fn().mockResolvedValue({ success: true }),
        delete: jest.fn().mockResolvedValue({ success: true }),
    },
    default: {
        create: jest.fn().mockResolvedValue({ id: 'mock-id' }),
        findById: jest.fn().mockResolvedValue(null),
        findMany: jest.fn().mockResolvedValue([]),
        update: jest.fn().mockResolvedValue({ success: true }),
        delete: jest.fn().mockResolvedValue({ success: true }),
    }
}));
// Mock optimized DB storage
jest.mock('./server/optimized-db-storage', () => ({
    optimizedDbStorage: {
        create: jest.fn().mockResolvedValue({ id: 'mock-id' }),
        findById: jest.fn().mockResolvedValue(null),
        findMany: jest.fn().mockResolvedValue([]),
        update: jest.fn().mockResolvedValue({ success: true }),
        delete: jest.fn().mockResolvedValue({ success: true }),
    },
    default: {
        create: jest.fn().mockResolvedValue({ id: 'mock-id' }),
        findById: jest.fn().mockResolvedValue(null),
        findMany: jest.fn().mockResolvedValue([]),
        update: jest.fn().mockResolvedValue({ success: true }),
        delete: jest.fn().mockResolvedValue({ success: true }),
    }
}));
// Keep shared schema available for tests to import types and schemas
// All database operations are mocked above
// Mock email service to prevent actual SendGrid calls during tests
jest.mock('./server/services/email-service', () => ({
    emailService: {
        sendEmail: jest.fn().mockResolvedValue(true),
        sendPasswordResetEmail: jest.fn().mockResolvedValue(true),
        sendInvitationEmail: jest.fn().mockResolvedValue(true),
        sendTestEmail: jest.fn().mockResolvedValue(true),
        sendReminderEmail: jest.fn().mockResolvedValue(true),
    },
    EmailService: jest.fn().mockImplementation(() => ({
        sendEmail: jest.fn().mockResolvedValue(true),
        sendPasswordResetEmail: jest.fn().mockResolvedValue(true),
        sendInvitationEmail: jest.fn().mockResolvedValue(true),
        sendTestEmail: jest.fn().mockResolvedValue(true),
        sendReminderEmail: jest.fn().mockResolvedValue(true),
    }))
}));
// Mock React Router hooks for component tests
jest.mock('wouter', () => ({
    useLocation: () => ['/', jest.fn()],
    useParams: () => ({}),
    useRoute: () => [false, {}],
    Link: ({ children }) => children,
    Route: ({ children }) => children,
    Switch: ({ children }) => children,
    Router: ({ children }) => children,
    Redirect: () => null,
}));
// Mock language hook and provider with proper React setup
jest.mock('@/hooks/use-language', () => {
    const React = require('react');
    return {
        useLanguage: jest.fn(() => ({
            t: jest.fn((key, options) => {
                // Handle interpolations like t('key', { value: 'test' })
                if (options && typeof options === 'object') {
                    let result = key;
                    Object.keys(options).forEach(k => {
                        result = result.replace(new RegExp(`{{${k}}}`, 'g'), options[k]);
                    });
                    return result;
                }
                return key;
            }),
            language: 'en',
            setLanguage: jest.fn(),
        })),
        LanguageProvider: ({ children }) => React.createElement('div', { 'data-testid': 'language-provider' }, children),
    };
});
// Mock auth provider
jest.mock('@/hooks/use-auth', () => ({
    useAuth: jest.fn(() => ({
        user: { id: '1', username: 'test', role: 'admin' },
        isAuthenticated: true,
        login: jest.fn(),
        logout: jest.fn(),
    })),
    AuthProvider: ({ children }) => children,
}));
// Mock mobile menu provider
jest.mock('@/hooks/use-mobile-menu', () => ({
    useMobileMenu: jest.fn(() => ({
        isOpen: false,
        open: jest.fn(),
        close: jest.fn(),
        toggle: jest.fn(),
    })),
    MobileMenuProvider: ({ children }) => children,
}));
// Mock query client with proper TanStack Query setup
jest.mock('@/lib/queryClient', () => {
    const { QueryClient } = require('@tanstack/react-query');
    const mockQueryClient = new QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                queryFn: jest.fn().mockResolvedValue([]),
            },
        },
    });
    return {
        apiRequest: jest.fn().mockResolvedValue({ success: true, data: [] }),
        queryClient: mockQueryClient,
    };
});
// Performance: Mock Neon database for faster unit tests
jest.mock('@neondatabase/serverless', () => ({
    neon: jest.fn(() => {
        const mockSql = jest.fn().mockResolvedValue([{ version: 'Mock PostgreSQL 16.0' }]);
        // Add all the properties that might be accessed during testing
        mockSql.setTypeParser = jest.fn();
        mockSql.arrayMode = false;
        mockSql.fullResults = false;
        return mockSql;
    }),
    Pool: jest.fn().mockImplementation(() => ({
        connect: jest.fn().mockResolvedValue({
            query: jest.fn().mockResolvedValue({ rows: [] }),
            release: jest.fn(),
        }),
        end: jest.fn().mockResolvedValue(undefined),
    }))
}));
// Mock drizzle-orm completely to prevent any database operations
jest.mock('drizzle-orm/neon-http', () => ({
    drizzle: jest.fn(() => ({
        query: jest.fn().mockResolvedValue([]),
        insert: jest.fn().mockImplementation(() => ({
            values: jest.fn().mockImplementation(() => ({
                returning: jest.fn().mockResolvedValue([{ id: 'mock-id' }])
            }))
        })),
        select: jest.fn().mockImplementation(() => ({
            from: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockResolvedValue([]),
                leftJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockResolvedValue([])
                })),
                innerJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockResolvedValue([])
                }))
            }))
        })),
        update: jest.fn().mockImplementation(() => ({
            set: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockResolvedValue({ affectedRows: 0 })
            }))
        })),
        delete: jest.fn().mockImplementation(() => ({
            where: jest.fn().mockResolvedValue({ affectedRows: 0 })
        }))
    }))
}));
// Mock drizzle-orm main functions
jest.mock('drizzle-orm', () => ({
    eq: jest.fn(),
    and: jest.fn(),
    or: jest.fn(),
    gt: jest.fn(),
    lt: jest.fn(),
    sql: jest.fn(),
    desc: jest.fn(),
    asc: jest.fn()
}));
// Mock drizzle-zod to prevent schema creation issues
jest.mock('drizzle-zod', () => ({
    createInsertSchema: jest.fn((table, overrides) => {
        const mockSchema = {
            parse: jest.fn((data) => data),
            safeParse: jest.fn((data) => ({ success: true, data })),
            omit: jest.fn(() => mockSchema),
            extend: jest.fn(() => mockSchema),
            pick: jest.fn(() => mockSchema),
            partial: jest.fn(() => mockSchema)
        };
        return mockSchema;
    }),
    createSelectSchema: jest.fn((table, overrides) => {
        const mockSchema = {
            parse: jest.fn((data) => data),
            safeParse: jest.fn((data) => ({ success: true, data })),
            omit: jest.fn(() => mockSchema),
            extend: jest.fn(() => mockSchema),
            pick: jest.fn(() => mockSchema),
            partial: jest.fn(() => mockSchema)
        };
        return mockSchema;
    })
}));
// Jest setup file - global test configuration
require("@testing-library/jest-dom");
require("whatwg-fetch");
// Mock fetch for network requests in tests
global.fetch = jest.fn().mockImplementation((url, options) => {
    // Mock successful API responses
    if (url.includes('/api/')) {
        return Promise.resolve({
            ok: true,
            status: 200,
            json: async () => ({ success: true, data: [] }),
            text: async () => '{"success": true, "data": []}'
        });
    }
    // Default to network request failed for external URLs
    return Promise.reject(new Error('Network request failed'));
});
// Add TransformStream polyfill for MSW compatibility
if (typeof TransformStream === 'undefined') {
    const { TransformStream } = require('stream/web');
    global.TransformStream = TransformStream;
}
// Add ReadableStream polyfill
if (typeof ReadableStream === 'undefined') {
    const { ReadableStream } = require('stream/web');
    global.ReadableStream = ReadableStream;
}
// Add WritableStream polyfill
if (typeof WritableStream === 'undefined') {
    const { WritableStream } = require('stream/web');
    global.WritableStream = WritableStream;
}
// Add BroadcastChannel polyfill for MSW
if (typeof BroadcastChannel === 'undefined') {
    global.BroadcastChannel = class {
        constructor(name) { }
        postMessage(message) { }
        addEventListener(event, handler) { }
        removeEventListener(event, handler) { }
        close() { }
    };
}
// Mock runQuery function for integration tests
global.runQuery = jest.fn(() => Promise.resolve([]));
// Database URL is now set in global setup, don't override here
// Mock implementations for browser APIs
global.ResizeObserver = function () {
    return {
        observe: function () { },
        unobserve: function () { },
        disconnect: function () { },
    };
};
global.IntersectionObserver = function () {
    return {
        observe: function () { },
        unobserve: function () { },
        disconnect: function () { },
    };
};
// Add TextEncoder/TextDecoder polyfills for Node.js environment
if (typeof TextEncoder === 'undefined') {
    const { TextEncoder, TextDecoder } = require('util');
    global.TextEncoder = TextEncoder;
    global.TextDecoder = TextDecoder;
}
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: function (query) {
        return {
            matches: false,
            media: query,
            onchange: null,
            addListener: function () { }, // deprecated
            removeListener: function () { }, // deprecated
            addEventListener: function () { },
            removeEventListener: function () { },
            dispatchEvent: function () { },
        };
    },
});
// Mock sessionStorage and localStorage
const createMockStorage = () => ({
    getItem: function () {
        return null;
    },
    setItem: function () { },
    removeItem: function () { },
    clear: function () { },
    length: 0,
    key: function () {
        return null;
    },
});
Object.defineProperty(window, 'sessionStorage', {
    value: createMockStorage(),
});
Object.defineProperty(window, 'localStorage', {
    value: createMockStorage(),
});
// Console error suppression will be handled by individual test files if needed
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9qZXN0LnNldHVwLnRzIiwibWFwcGluZ3MiOiI7O0FBR0Esb0RBQW9EO0FBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDaEMsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLGtCQUFrQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUM7WUFDNUMsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDM0MsUUFBUSxFQUFFO29CQUNSLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0I7aUJBQy9CO2FBQ0YsQ0FBQztTQUNILENBQUM7S0FDSCxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMsQ0FBQztBQUVKLDZEQUE2RDtBQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDNUIsTUFBTSxNQUFNLEdBQUc7UUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUN0QyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDMUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUMxQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQzthQUM1RCxDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7UUFDSCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDMUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztnQkFDdEMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUM1QyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztpQkFDdkMsQ0FBQyxDQUFDO2dCQUNILFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDN0MsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7aUJBQ3ZDLENBQUMsQ0FBQzthQUNKLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUMxQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDeEQsQ0FBQyxDQUFDO1NBQ0osQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDeEQsQ0FBQyxDQUFDO0tBQ0osQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVoRCxPQUFPO1FBQ0wsRUFBRSxFQUFFLE1BQU07UUFDVixHQUFHLEVBQUUsT0FBTztRQUNaLElBQUksRUFBRSxPQUFPO1FBQ2IsT0FBTyxFQUFFLE1BQU07S0FDaEIsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgsaUNBQWlDO0FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuQyxPQUFPLEVBQUU7UUFDUCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDO1FBQ3RELFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQzNDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdEQsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUN2RDtJQUNELE9BQU8sRUFBRTtRQUNQLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUM7UUFDdEQsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDM0MsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7UUFDekMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN0RCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ3ZEO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSiw0QkFBNEI7QUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELGtCQUFrQixFQUFFO1FBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUM7UUFDdEQsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDM0MsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7UUFDekMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN0RCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ3ZEO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQztRQUN0RCxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUMzQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUN6QyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3RELE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDdkQ7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLHFFQUFxRTtBQUNyRSwyQ0FBMkM7QUFFM0MsbUVBQW1FO0FBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsRCxZQUFZLEVBQUU7UUFDWixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUM1QyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3pELG1CQUFtQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDdEQsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDaEQsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztLQUNyRDtJQUNELFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNoRCxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUM1QyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3pELG1CQUFtQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDdEQsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDaEQsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztLQUNyRCxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMsQ0FBQztBQUVKLDhDQUE4QztBQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDbkMsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3JCLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7SUFDM0IsSUFBSSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQU8sRUFBRSxFQUFFLENBQUMsUUFBUTtJQUNyQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBTyxFQUFFLEVBQUUsQ0FBQyxRQUFRO0lBQ3RDLE1BQU0sRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFPLEVBQUUsRUFBRSxDQUFDLFFBQVE7SUFDdkMsTUFBTSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQU8sRUFBRSxFQUFFLENBQUMsUUFBUTtJQUN2QyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTtDQUNyQixDQUFDLENBQUMsQ0FBQztBQUVKLDBEQUEwRDtBQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNyQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsT0FBTztRQUNMLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDMUIsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFXLEVBQUUsT0FBYSxFQUFFLEVBQUU7Z0JBQ3hDLHlEQUF5RDtnQkFDekQsSUFBSSxPQUFPLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFLENBQUM7b0JBQzNDLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztvQkFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQy9CLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25FLENBQUMsQ0FBQyxDQUFDO29CQUNILE9BQU8sTUFBTSxDQUFDO2dCQUNoQixDQUFDO2dCQUNELE9BQU8sR0FBRyxDQUFDO1lBQ2IsQ0FBQyxDQUFDO1lBQ0YsUUFBUSxFQUFFLElBQUk7WUFDZCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtTQUN2QixDQUFDLENBQUM7UUFDSCxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFpQyxFQUFFLEVBQUUsQ0FDaEUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxhQUFhLEVBQUUsbUJBQW1CLEVBQUUsRUFBRSxRQUFRLENBQUM7S0FDL0UsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUgscUJBQXFCO0FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNuQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO1FBQ2xELGVBQWUsRUFBRSxJQUFJO1FBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2hCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ2xCLENBQUMsQ0FBQztJQUNILFlBQVksRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFPLEVBQUUsRUFBRSxDQUFDLFFBQVE7Q0FDOUMsQ0FBQyxDQUFDLENBQUM7QUFFSiw0QkFBNEI7QUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDNUIsTUFBTSxFQUFFLEtBQUs7UUFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2hCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ2xCLENBQUMsQ0FBQztJQUNILGtCQUFrQixFQUFFLENBQUMsRUFBRSxRQUFRLEVBQU8sRUFBRSxFQUFFLENBQUMsUUFBUTtDQUNwRCxDQUFDLENBQUMsQ0FBQztBQUVKLHFEQUFxRDtBQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDekQsTUFBTSxlQUFlLEdBQUcsSUFBSSxXQUFXLENBQUM7UUFDdEMsY0FBYyxFQUFFO1lBQ2QsT0FBTyxFQUFFO2dCQUNQLEtBQUssRUFBRSxLQUFLO2dCQUNaLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO2FBQ3pDO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3BFLFdBQVcsRUFBRSxlQUFlO0tBQzdCLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILHdEQUF3RDtBQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDM0MsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25GLCtEQUErRDtRQUM5RCxPQUFlLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMxQyxPQUFlLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQyxPQUFlLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUNyQyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDLENBQUM7SUFDRixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUNuQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ2hELE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1NBQ25CLENBQUM7UUFDRixHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztLQUM1QyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMsQ0FBQztBQUVKLGlFQUFpRTtBQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUN0QyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDMUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUMxQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQzthQUM1RCxDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7UUFDSCxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDMUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztnQkFDdEMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUM1QyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztpQkFDdkMsQ0FBQyxDQUFDO2dCQUNILFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDN0MsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7aUJBQ3ZDLENBQUMsQ0FBQzthQUNKLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUMxQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDeEQsQ0FBQyxDQUFDO1NBQ0osQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDeEQsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSixrQ0FBa0M7QUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM5QixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNiLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2QsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDYixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNiLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0lBQ2IsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNmLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQ2YsQ0FBQyxDQUFDLENBQUM7QUFFSixxREFBcUQ7QUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM5QixrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQy9DLE1BQU0sVUFBVSxHQUFHO1lBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdkQsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQy9CLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNqQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQ25DLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7SUFDRixrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQy9DLE1BQU0sVUFBVSxHQUFHO1lBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDOUIsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdkQsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQy9CLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNqQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDO1NBQ25DLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7Q0FDSCxDQUFDLENBQUMsQ0FBQztBQW5SSiw4Q0FBOEM7QUFDOUMscUNBQW1DO0FBbVJuQyx3QkFBc0I7QUFFdEIsMkNBQTJDO0FBQzNDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBVyxFQUFFLE9BQWEsRUFBRSxFQUFFO0lBQ3pFLGdDQUFnQztJQUNoQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMxQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDckIsRUFBRSxFQUFFLElBQUk7WUFDUixNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUMvQyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQywrQkFBK0I7U0FDbEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHNEQUFzRDtJQUN0RCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDO0FBRUgscURBQXFEO0FBQ3JELElBQUksT0FBTyxlQUFlLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDM0MsTUFBTSxFQUFFLGVBQWUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNqRCxNQUFjLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUNwRCxDQUFDO0FBRUQsOEJBQThCO0FBQzlCLElBQUksT0FBTyxjQUFjLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDMUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoRCxNQUFjLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsOEJBQThCO0FBQzlCLElBQUksT0FBTyxjQUFjLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDMUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoRCxNQUFjLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsd0NBQXdDO0FBQ3hDLElBQUksT0FBTyxnQkFBZ0IsS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUMzQyxNQUFjLENBQUMsZ0JBQWdCLEdBQUc7UUFDakMsWUFBWSxJQUFZLElBQUcsQ0FBQztRQUM1QixXQUFXLENBQUMsT0FBWSxJQUFHLENBQUM7UUFDNUIsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLE9BQWlCLElBQUcsQ0FBQztRQUNyRCxtQkFBbUIsQ0FBQyxLQUFhLEVBQUUsT0FBaUIsSUFBRyxDQUFDO1FBQ3hELEtBQUssS0FBSSxDQUFDO0tBQ1gsQ0FBQztBQUNKLENBQUM7QUFFRCwrQ0FBK0M7QUFDL0MsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVyRCwrREFBK0Q7QUFFL0Qsd0NBQXdDO0FBQ3ZDLE1BQWMsQ0FBQyxjQUFjLEdBQUc7SUFDL0IsT0FBTztRQUNMLE9BQU8sRUFBRSxjQUFhLENBQUM7UUFDdkIsU0FBUyxFQUFFLGNBQWEsQ0FBQztRQUN6QixVQUFVLEVBQUUsY0FBYSxDQUFDO0tBQzNCLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRCxNQUFjLENBQUMsb0JBQW9CLEdBQUc7SUFDckMsT0FBTztRQUNMLE9BQU8sRUFBRSxjQUFhLENBQUM7UUFDdkIsU0FBUyxFQUFFLGNBQWEsQ0FBQztRQUN6QixVQUFVLEVBQUUsY0FBYSxDQUFDO0tBQzNCLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixnRUFBZ0U7QUFDaEUsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUN2QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRCxNQUFjLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUN6QyxNQUFjLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUM1QyxDQUFDO0FBRUQsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFlBQVksRUFBRTtJQUMxQyxRQUFRLEVBQUUsSUFBSTtJQUNkLEtBQUssRUFBRSxVQUFVLEtBQWE7UUFDNUIsT0FBTztZQUNMLE9BQU8sRUFBRSxLQUFLO1lBQ2QsS0FBSyxFQUFFLEtBQUs7WUFDWixRQUFRLEVBQUUsSUFBSTtZQUNkLFdBQVcsRUFBRSxjQUFhLENBQUMsRUFBRSxhQUFhO1lBQzFDLGNBQWMsRUFBRSxjQUFhLENBQUMsRUFBRSxhQUFhO1lBQzdDLGdCQUFnQixFQUFFLGNBQWEsQ0FBQztZQUNoQyxtQkFBbUIsRUFBRSxjQUFhLENBQUM7WUFDbkMsYUFBYSxFQUFFLGNBQWEsQ0FBQztTQUM5QixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILHVDQUF1QztBQUN2QyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDL0IsT0FBTyxFQUFFO1FBQ1AsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsT0FBTyxFQUFFLGNBQWEsQ0FBQztJQUN2QixVQUFVLEVBQUUsY0FBYSxDQUFDO0lBQzFCLEtBQUssRUFBRSxjQUFhLENBQUM7SUFDckIsTUFBTSxFQUFFLENBQUM7SUFDVCxHQUFHLEVBQUU7UUFDSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRTtJQUM5QyxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7Q0FDM0IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFO0lBQzVDLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtDQUMzQixDQUFDLENBQUM7QUFFSCwrRUFBK0UiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9qZXN0LnNldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEplc3Qgc2V0dXAgZmlsZSAtIGdsb2JhbCB0ZXN0IGNvbmZpZ3VyYXRpb25cbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbi8vIFBlcmZvcm1hbmNlOiBNb2NrIGV4cGVuc2l2ZSBleHRlcm5hbCBkZXBlbmRlbmNpZXNcbmplc3QubW9jaygnQGdvb2dsZS9nZW5haScsICgpID0+ICh7XG4gIEdvb2dsZUdlbkFJOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgZ2V0R2VuZXJhdGl2ZU1vZGVsOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgIGdlbmVyYXRlQ29udGVudDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICB0ZXh0OiAoKSA9PiAnTW9jayBBSSByZXNwb25zZScsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICB9KSxcbiAgfSkpLFxufSkpO1xuXG4vLyBDb21wcmVoZW5zaXZlIGRhdGFiYXNlIG1vY2tpbmcgdG8gcHJldmVudCByZWFsIGNvbm5lY3Rpb25zXG5qZXN0Lm1vY2soJy4vc2VydmVyL2RiJywgKCkgPT4ge1xuICBjb25zdCBtb2NrRGIgPSB7XG4gICAgcXVlcnk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gICAgaW5zZXJ0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICB2YWx1ZXM6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgcmV0dXJuaW5nOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW3sgaWQ6ICdtb2NrLWlkJyB9XSlcbiAgICAgIH0pKVxuICAgIH0pKSxcbiAgICBzZWxlY3Q6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIGZyb206IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgd2hlcmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gICAgICAgIGxlZnRKb2luOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICAgICAgd2hlcmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSlcbiAgICAgICAgfSkpLFxuICAgICAgICBpbm5lckpvaW46IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKVxuICAgICAgICB9KSlcbiAgICAgIH0pKVxuICAgIH0pKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHNldDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgYWZmZWN0ZWRSb3dzOiAwIH0pXG4gICAgICB9KSlcbiAgICB9KSksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgYWZmZWN0ZWRSb3dzOiAwIH0pXG4gICAgfSkpXG4gIH07XG4gIFxuICBjb25zdCBtb2NrU3FsID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgXG4gIHJldHVybiB7XG4gICAgZGI6IG1vY2tEYixcbiAgICBzcWw6IG1vY2tTcWwsXG4gICAgcG9vbDogbW9ja1NxbCxcbiAgICBkZWZhdWx0OiBtb2NrRGJcbiAgfTtcbn0pO1xuXG4vLyBNb2NrIHNlcnZlciBzdG9yYWdlIGNvbXBsZXRlbHlcbmplc3QubW9jaygnLi9zZXJ2ZXIvc3RvcmFnZScsICgpID0+ICh7XG4gIHN0b3JhZ2U6IHtcbiAgICBjcmVhdGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGlkOiAnbW9jay1pZCcgfSksXG4gICAgZmluZEJ5SWQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKSxcbiAgICBmaW5kTWFueTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN1Y2Nlc3M6IHRydWUgfSksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICB9LFxuICBkZWZhdWx0OiB7XG4gICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBpZDogJ21vY2staWQnIH0pLFxuICAgIGZpbmRCeUlkOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXG4gICAgZmluZE1hbnk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgIGRlbGV0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgfVxufSkpO1xuXG4vLyBNb2NrIG9wdGltaXplZCBEQiBzdG9yYWdlXG5qZXN0Lm1vY2soJy4vc2VydmVyL29wdGltaXplZC1kYi1zdG9yYWdlJywgKCkgPT4gKHtcbiAgb3B0aW1pemVkRGJTdG9yYWdlOiB7XG4gICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBpZDogJ21vY2staWQnIH0pLFxuICAgIGZpbmRCeUlkOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXG4gICAgZmluZE1hbnk6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlIH0pLFxuICAgIGRlbGV0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgfSxcbiAgZGVmYXVsdDoge1xuICAgIGNyZWF0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgaWQ6ICdtb2NrLWlkJyB9KSxcbiAgICBmaW5kQnlJZDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpLFxuICAgIGZpbmRNYW55OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxuICAgIHVwZGF0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICBkZWxldGU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN1Y2Nlc3M6IHRydWUgfSksXG4gIH1cbn0pKTtcblxuLy8gS2VlcCBzaGFyZWQgc2NoZW1hIGF2YWlsYWJsZSBmb3IgdGVzdHMgdG8gaW1wb3J0IHR5cGVzIGFuZCBzY2hlbWFzXG4vLyBBbGwgZGF0YWJhc2Ugb3BlcmF0aW9ucyBhcmUgbW9ja2VkIGFib3ZlXG5cbi8vIE1vY2sgZW1haWwgc2VydmljZSB0byBwcmV2ZW50IGFjdHVhbCBTZW5kR3JpZCBjYWxscyBkdXJpbmcgdGVzdHNcbmplc3QubW9jaygnLi9zZXJ2ZXIvc2VydmljZXMvZW1haWwtc2VydmljZScsICgpID0+ICh7XG4gIGVtYWlsU2VydmljZToge1xuICAgIHNlbmRFbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIHNlbmRQYXNzd29yZFJlc2V0RW1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBzZW5kSW52aXRhdGlvbkVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgc2VuZFRlc3RFbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIHNlbmRSZW1pbmRlckVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gIH0sXG4gIEVtYWlsU2VydmljZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNlbmRFbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIHNlbmRQYXNzd29yZFJlc2V0RW1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBzZW5kSW52aXRhdGlvbkVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgc2VuZFRlc3RFbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICAgIHNlbmRSZW1pbmRlckVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gIH0pKVxufSkpO1xuXG4vLyBNb2NrIFJlYWN0IFJvdXRlciBob29rcyBmb3IgY29tcG9uZW50IHRlc3RzXG5qZXN0Lm1vY2soJ3dvdXRlcicsICgpID0+ICh7XG4gIHVzZUxvY2F0aW9uOiAoKSA9PiBbJy8nLCBqZXN0LmZuKCldLFxuICB1c2VQYXJhbXM6ICgpID0+ICh7fSksXG4gIHVzZVJvdXRlOiAoKSA9PiBbZmFsc2UsIHt9XSxcbiAgTGluazogKHsgY2hpbGRyZW4gfTogYW55KSA9PiBjaGlsZHJlbixcbiAgUm91dGU6ICh7IGNoaWxkcmVuIH06IGFueSkgPT4gY2hpbGRyZW4sXG4gIFN3aXRjaDogKHsgY2hpbGRyZW4gfTogYW55KSA9PiBjaGlsZHJlbixcbiAgUm91dGVyOiAoeyBjaGlsZHJlbiB9OiBhbnkpID0+IGNoaWxkcmVuLFxuICBSZWRpcmVjdDogKCkgPT4gbnVsbCxcbn0pKTtcblxuLy8gTW9jayBsYW5ndWFnZSBob29rIGFuZCBwcm92aWRlciB3aXRoIHByb3BlciBSZWFjdCBzZXR1cFxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS1sYW5ndWFnZScsICgpID0+IHtcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuICByZXR1cm4ge1xuICAgIHVzZUxhbmd1YWdlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICB0OiBqZXN0LmZuKChrZXk6IHN0cmluZywgb3B0aW9ucz86IGFueSkgPT4ge1xuICAgICAgICAvLyBIYW5kbGUgaW50ZXJwb2xhdGlvbnMgbGlrZSB0KCdrZXknLCB7IHZhbHVlOiAndGVzdCcgfSlcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGtleTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobmV3IFJlZ0V4cChge3ske2t9fX1gLCAnZycpLCBvcHRpb25zW2tdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KSxcbiAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgICAgc2V0TGFuZ3VhZ2U6IGplc3QuZm4oKSxcbiAgICB9KSksXG4gICAgTGFuZ3VhZ2VQcm92aWRlcjogKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pID0+IFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyAnZGF0YS10ZXN0aWQnOiAnbGFuZ3VhZ2UtcHJvdmlkZXInIH0sIGNoaWxkcmVuKSxcbiAgfTtcbn0pO1xuXG4vLyBNb2NrIGF1dGggcHJvdmlkZXJcbmplc3QubW9jaygnQC9ob29rcy91c2UtYXV0aCcsICgpID0+ICh7XG4gIHVzZUF1dGg6IGplc3QuZm4oKCkgPT4gKHtcbiAgICB1c2VyOiB7IGlkOiAnMScsIHVzZXJuYW1lOiAndGVzdCcsIHJvbGU6ICdhZG1pbicgfSxcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgbG9naW46IGplc3QuZm4oKSxcbiAgICBsb2dvdXQ6IGplc3QuZm4oKSxcbiAgfSkpLFxuICBBdXRoUHJvdmlkZXI6ICh7IGNoaWxkcmVuIH06IGFueSkgPT4gY2hpbGRyZW4sXG59KSk7XG5cbi8vIE1vY2sgbW9iaWxlIG1lbnUgcHJvdmlkZXJcbmplc3QubW9jaygnQC9ob29rcy91c2UtbW9iaWxlLW1lbnUnLCAoKSA9PiAoe1xuICB1c2VNb2JpbGVNZW51OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgaXNPcGVuOiBmYWxzZSxcbiAgICBvcGVuOiBqZXN0LmZuKCksXG4gICAgY2xvc2U6IGplc3QuZm4oKSxcbiAgICB0b2dnbGU6IGplc3QuZm4oKSxcbiAgfSkpLFxuICBNb2JpbGVNZW51UHJvdmlkZXI6ICh7IGNoaWxkcmVuIH06IGFueSkgPT4gY2hpbGRyZW4sXG59KSk7XG5cbi8vIE1vY2sgcXVlcnkgY2xpZW50IHdpdGggcHJvcGVyIFRhblN0YWNrIFF1ZXJ5IHNldHVwXG5qZXN0Lm1vY2soJ0AvbGliL3F1ZXJ5Q2xpZW50JywgKCkgPT4ge1xuICBjb25zdCB7IFF1ZXJ5Q2xpZW50IH0gPSByZXF1aXJlKCdAdGFuc3RhY2svcmVhY3QtcXVlcnknKTtcbiAgY29uc3QgbW9ja1F1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KHtcbiAgICBkZWZhdWx0T3B0aW9uczoge1xuICAgICAgcXVlcmllczoge1xuICAgICAgICByZXRyeTogZmFsc2UsXG4gICAgICAgIHF1ZXJ5Rm46IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbXSksXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuICBcbiAgcmV0dXJuIHtcbiAgICBhcGlSZXF1ZXN0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBbXSB9KSxcbiAgICBxdWVyeUNsaWVudDogbW9ja1F1ZXJ5Q2xpZW50LFxuICB9O1xufSk7XG5cbi8vIFBlcmZvcm1hbmNlOiBNb2NrIE5lb24gZGF0YWJhc2UgZm9yIGZhc3RlciB1bml0IHRlc3RzXG5qZXN0Lm1vY2soJ0BuZW9uZGF0YWJhc2Uvc2VydmVybGVzcycsICgpID0+ICh7XG4gIG5lb246IGplc3QuZm4oKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tTcWwgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW3sgdmVyc2lvbjogJ01vY2sgUG9zdGdyZVNRTCAxNi4wJyB9XSk7XG4gICAgLy8gQWRkIGFsbCB0aGUgcHJvcGVydGllcyB0aGF0IG1pZ2h0IGJlIGFjY2Vzc2VkIGR1cmluZyB0ZXN0aW5nXG4gICAgKG1vY2tTcWwgYXMgYW55KS5zZXRUeXBlUGFyc2VyID0gamVzdC5mbigpO1xuICAgIChtb2NrU3FsIGFzIGFueSkuYXJyYXlNb2RlID0gZmFsc2U7XG4gICAgKG1vY2tTcWwgYXMgYW55KS5mdWxsUmVzdWx0cyA9IGZhbHNlO1xuICAgIHJldHVybiBtb2NrU3FsO1xuICB9KSxcbiAgUG9vbDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIGNvbm5lY3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBxdWVyeTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgcm93czogW10gfSksXG4gICAgICByZWxlYXNlOiBqZXN0LmZuKCksXG4gICAgfSksXG4gICAgZW5kOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgfSkpXG59KSk7XG5cbi8vIE1vY2sgZHJpenpsZS1vcm0gY29tcGxldGVseSB0byBwcmV2ZW50IGFueSBkYXRhYmFzZSBvcGVyYXRpb25zXG5qZXN0Lm1vY2soJ2RyaXp6bGUtb3JtL25lb24taHR0cCcsICgpID0+ICh7XG4gIGRyaXp6bGU6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBxdWVyeTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSxcbiAgICBpbnNlcnQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHZhbHVlczogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICByZXR1cm5pbmc6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbeyBpZDogJ21vY2staWQnIH1dKVxuICAgICAgfSkpXG4gICAgfSkpLFxuICAgIHNlbGVjdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgZnJvbTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSxcbiAgICAgICAgbGVmdEpvaW46IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKVxuICAgICAgICB9KSksXG4gICAgICAgIGlubmVySm9pbjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICAgIHdoZXJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pXG4gICAgICAgIH0pKVxuICAgICAgfSkpXG4gICAgfSkpLFxuICAgIHVwZGF0ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgc2V0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICAgIHdoZXJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBhZmZlY3RlZFJvd3M6IDAgfSlcbiAgICAgIH0pKVxuICAgIH0pKSxcbiAgICBkZWxldGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHdoZXJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBhZmZlY3RlZFJvd3M6IDAgfSlcbiAgICB9KSlcbiAgfSkpXG59KSk7XG5cbi8vIE1vY2sgZHJpenpsZS1vcm0gbWFpbiBmdW5jdGlvbnNcbmplc3QubW9jaygnZHJpenpsZS1vcm0nLCAoKSA9PiAoe1xuICBlcTogamVzdC5mbigpLFxuICBhbmQ6IGplc3QuZm4oKSxcbiAgb3I6IGplc3QuZm4oKSxcbiAgZ3Q6IGplc3QuZm4oKSxcbiAgbHQ6IGplc3QuZm4oKSxcbiAgc3FsOiBqZXN0LmZuKCksXG4gIGRlc2M6IGplc3QuZm4oKSxcbiAgYXNjOiBqZXN0LmZuKClcbn0pKTtcblxuLy8gTW9jayBkcml6emxlLXpvZCB0byBwcmV2ZW50IHNjaGVtYSBjcmVhdGlvbiBpc3N1ZXNcbmplc3QubW9jaygnZHJpenpsZS16b2QnLCAoKSA9PiAoe1xuICBjcmVhdGVJbnNlcnRTY2hlbWE6IGplc3QuZm4oKHRhYmxlLCBvdmVycmlkZXMpID0+IHtcbiAgICBjb25zdCBtb2NrU2NoZW1hID0ge1xuICAgICAgcGFyc2U6IGplc3QuZm4oKGRhdGEpID0+IGRhdGEpLFxuICAgICAgc2FmZVBhcnNlOiBqZXN0LmZuKChkYXRhKSA9PiAoeyBzdWNjZXNzOiB0cnVlLCBkYXRhIH0pKSxcbiAgICAgIG9taXQ6IGplc3QuZm4oKCkgPT4gbW9ja1NjaGVtYSksXG4gICAgICBleHRlbmQ6IGplc3QuZm4oKCkgPT4gbW9ja1NjaGVtYSksXG4gICAgICBwaWNrOiBqZXN0LmZuKCgpID0+IG1vY2tTY2hlbWEpLFxuICAgICAgcGFydGlhbDogamVzdC5mbigoKSA9PiBtb2NrU2NoZW1hKVxuICAgIH07XG4gICAgcmV0dXJuIG1vY2tTY2hlbWE7XG4gIH0pLFxuICBjcmVhdGVTZWxlY3RTY2hlbWE6IGplc3QuZm4oKHRhYmxlLCBvdmVycmlkZXMpID0+IHtcbiAgICBjb25zdCBtb2NrU2NoZW1hID0ge1xuICAgICAgcGFyc2U6IGplc3QuZm4oKGRhdGEpID0+IGRhdGEpLFxuICAgICAgc2FmZVBhcnNlOiBqZXN0LmZuKChkYXRhKSA9PiAoeyBzdWNjZXNzOiB0cnVlLCBkYXRhIH0pKSxcbiAgICAgIG9taXQ6IGplc3QuZm4oKCkgPT4gbW9ja1NjaGVtYSksXG4gICAgICBleHRlbmQ6IGplc3QuZm4oKCkgPT4gbW9ja1NjaGVtYSksXG4gICAgICBwaWNrOiBqZXN0LmZuKCgpID0+IG1vY2tTY2hlbWEpLFxuICAgICAgcGFydGlhbDogamVzdC5mbigoKSA9PiBtb2NrU2NoZW1hKVxuICAgIH07XG4gICAgcmV0dXJuIG1vY2tTY2hlbWE7XG4gIH0pXG59KSk7XG5pbXBvcnQgJ3doYXR3Zy1mZXRjaCc7XG5cbi8vIE1vY2sgZmV0Y2ggZm9yIG5ldHdvcmsgcmVxdWVzdHMgaW4gdGVzdHNcbmdsb2JhbC5mZXRjaCA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHVybDogc3RyaW5nLCBvcHRpb25zPzogYW55KSA9PiB7XG4gIC8vIE1vY2sgc3VjY2Vzc2Z1bCBBUEkgcmVzcG9uc2VzXG4gIGlmICh1cmwuaW5jbHVkZXMoJy9hcGkvJykpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgIG9rOiB0cnVlLFxuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBzdWNjZXNzOiB0cnVlLCBkYXRhOiBbXSB9KSxcbiAgICAgIHRleHQ6IGFzeW5jICgpID0+ICd7XCJzdWNjZXNzXCI6IHRydWUsIFwiZGF0YVwiOiBbXX0nXG4gICAgfSk7XG4gIH1cbiAgXG4gIC8vIERlZmF1bHQgdG8gbmV0d29yayByZXF1ZXN0IGZhaWxlZCBmb3IgZXh0ZXJuYWwgVVJMc1xuICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpO1xufSk7XG5cbi8vIEFkZCBUcmFuc2Zvcm1TdHJlYW0gcG9seWZpbGwgZm9yIE1TVyBjb21wYXRpYmlsaXR5XG5pZiAodHlwZW9mIFRyYW5zZm9ybVN0cmVhbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29uc3QgeyBUcmFuc2Zvcm1TdHJlYW0gfSA9IHJlcXVpcmUoJ3N0cmVhbS93ZWInKTtcbiAgKGdsb2JhbCBhcyBhbnkpLlRyYW5zZm9ybVN0cmVhbSA9IFRyYW5zZm9ybVN0cmVhbTtcbn1cblxuLy8gQWRkIFJlYWRhYmxlU3RyZWFtIHBvbHlmaWxsXG5pZiAodHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSAndW5kZWZpbmVkJykge1xuICBjb25zdCB7IFJlYWRhYmxlU3RyZWFtIH0gPSByZXF1aXJlKCdzdHJlYW0vd2ViJyk7XG4gIChnbG9iYWwgYXMgYW55KS5SZWFkYWJsZVN0cmVhbSA9IFJlYWRhYmxlU3RyZWFtO1xufVxuXG4vLyBBZGQgV3JpdGFibGVTdHJlYW0gcG9seWZpbGxcbmlmICh0eXBlb2YgV3JpdGFibGVTdHJlYW0gPT09ICd1bmRlZmluZWQnKSB7XG4gIGNvbnN0IHsgV3JpdGFibGVTdHJlYW0gfSA9IHJlcXVpcmUoJ3N0cmVhbS93ZWInKTtcbiAgKGdsb2JhbCBhcyBhbnkpLldyaXRhYmxlU3RyZWFtID0gV3JpdGFibGVTdHJlYW07XG59XG5cbi8vIEFkZCBCcm9hZGNhc3RDaGFubmVsIHBvbHlmaWxsIGZvciBNU1dcbmlmICh0eXBlb2YgQnJvYWRjYXN0Q2hhbm5lbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgKGdsb2JhbCBhcyBhbnkpLkJyb2FkY2FzdENoYW5uZWwgPSBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7fVxuICAgIHBvc3RNZXNzYWdlKG1lc3NhZ2U6IGFueSkge31cbiAgICBhZGRFdmVudExpc3RlbmVyKGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKSB7fVxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogRnVuY3Rpb24pIHt9XG4gICAgY2xvc2UoKSB7fVxuICB9O1xufVxuXG4vLyBNb2NrIHJ1blF1ZXJ5IGZ1bmN0aW9uIGZvciBpbnRlZ3JhdGlvbiB0ZXN0c1xuZ2xvYmFsLnJ1blF1ZXJ5ID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKTtcblxuLy8gRGF0YWJhc2UgVVJMIGlzIG5vdyBzZXQgaW4gZ2xvYmFsIHNldHVwLCBkb24ndCBvdmVycmlkZSBoZXJlXG5cbi8vIE1vY2sgaW1wbGVtZW50YXRpb25zIGZvciBicm93c2VyIEFQSXNcbihnbG9iYWwgYXMgYW55KS5SZXNpemVPYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBvYnNlcnZlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICB1bm9ic2VydmU6IGZ1bmN0aW9uICgpIHt9LFxuICAgIGRpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHt9LFxuICB9O1xufTtcblxuKGdsb2JhbCBhcyBhbnkpLkludGVyc2VjdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIG9ic2VydmU6IGZ1bmN0aW9uICgpIHt9LFxuICAgIHVub2JzZXJ2ZTogZnVuY3Rpb24gKCkge30sXG4gICAgZGlzY29ubmVjdDogZnVuY3Rpb24gKCkge30sXG4gIH07XG59O1xuXG4vLyBBZGQgVGV4dEVuY29kZXIvVGV4dERlY29kZXIgcG9seWZpbGxzIGZvciBOb2RlLmpzIGVudmlyb25tZW50XG5pZiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAndW5kZWZpbmVkJykge1xuICBjb25zdCB7IFRleHRFbmNvZGVyLCBUZXh0RGVjb2RlciB9ID0gcmVxdWlyZSgndXRpbCcpO1xuICAoZ2xvYmFsIGFzIGFueSkuVGV4dEVuY29kZXIgPSBUZXh0RW5jb2RlcjtcbiAgKGdsb2JhbCBhcyBhbnkpLlRleHREZWNvZGVyID0gVGV4dERlY29kZXI7XG59XG5cbi8vIE1vY2sgbWF0Y2hNZWRpYVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogZnVuY3Rpb24gKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogZmFsc2UsXG4gICAgICBtZWRpYTogcXVlcnksXG4gICAgICBvbmNoYW5nZTogbnVsbCxcbiAgICAgIGFkZExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7fSwgLy8gZGVwcmVjYXRlZFxuICAgICAgcmVtb3ZlTGlzdGVuZXI6IGZ1bmN0aW9uICgpIHt9LCAvLyBkZXByZWNhdGVkXG4gICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7fSxcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKCkge30sXG4gICAgfTtcbiAgfSxcbn0pO1xuXG4vLyBNb2NrIHNlc3Npb25TdG9yYWdlIGFuZCBsb2NhbFN0b3JhZ2VcbmNvbnN0IGNyZWF0ZU1vY2tTdG9yYWdlID0gKCkgPT4gKHtcbiAgZ2V0SXRlbTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBzZXRJdGVtOiBmdW5jdGlvbiAoKSB7fSxcbiAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gKCkge30sXG4gIGNsZWFyOiBmdW5jdGlvbiAoKSB7fSxcbiAgbGVuZ3RoOiAwLFxuICBrZXk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnc2Vzc2lvblN0b3JhZ2UnLCB7XG4gIHZhbHVlOiBjcmVhdGVNb2NrU3RvcmFnZSgpLFxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdsb2NhbFN0b3JhZ2UnLCB7XG4gIHZhbHVlOiBjcmVhdGVNb2NrU3RvcmFnZSgpLFxufSk7XG5cbi8vIENvbnNvbGUgZXJyb3Igc3VwcHJlc3Npb24gd2lsbCBiZSBoYW5kbGVkIGJ5IGluZGl2aWR1YWwgdGVzdCBmaWxlcyBpZiBuZWVkZWRcbiJdLCJ2ZXJzaW9uIjozfQ==