eb2cfaa371cd93ea7feeb3eef6d322da
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const demo_management_service_1 = require("../../server/services/demo-management-service");
const rbac_1 = require("../../server/rbac");
/**
 * Demo User Accessibility Test Suite
 *
 * This test verifies that demo users are properly handled when they are
 * disabled or not accessible in the system. It ensures the system gracefully
 * handles the absence of demo users and provides appropriate responses.
 */
(0, globals_1.describe)('Demo User Accessibility', () => {
    (0, globals_1.beforeAll)(async () => {
        console.log('⚠️  Production DATABASE_URL detected - using for tests with isolation');
        console.log('🛡️  Jest running in safe test environment');
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up any test data if needed
    });
    (0, globals_1.describe)('Demo User Database Presence', () => {
        (0, globals_1.it)('should verify demo users exist and are properly configured', async () => {
            // Check for demo users in database
            const demoManagerUsers = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.role, 'demo_manager'))
                .catch(() => []);
            const demoTenantUsers = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.role, 'demo_tenant'))
                .catch(() => []);
            const demoResidentUsers = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.role, 'demo_resident'))
                .catch(() => []);
            // Verify demo users exist and are properly configured
            (0, globals_1.expect)(demoManagerUsers.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(demoTenantUsers.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(demoResidentUsers.length).toBeGreaterThanOrEqual(1);
            // All should be active
            [...demoManagerUsers, ...demoTenantUsers, ...demoResidentUsers].forEach(user => {
                (0, globals_1.expect)(user.isActive).toBe(true);
            });
        });
        (0, globals_1.it)('should verify demo users have proper email patterns and are protected', async () => {
            // Check for users with demo email patterns
            const allUsers = await db_1.db.select().from(schema_1.users);
            const realDemoUsers = allUsers.filter(user => user.email.includes('demo.') && user.email.includes('@koveo.com'));
            const testDemoUsers = allUsers.filter(user => user.email.toLowerCase().includes('test-demo') ||
                user.email.toLowerCase().includes('open-demo'));
            // Should have our real demo users (they are intentionally preserved)
            (0, globals_1.expect)(realDemoUsers.length).toBeGreaterThanOrEqual(3);
            // Test demo users should be cleaned up properly in isolated tests
            (0, globals_1.expect)(testDemoUsers.length).toBe(0);
        });
    });
    (0, globals_1.describe)('Demo Management Service', () => {
        (0, globals_1.it)('should return disabled status for demo organization health check', async () => {
            const healthStatus = await demo_management_service_1.DemoManagementService.checkDemoHealth();
            (0, globals_1.expect)(healthStatus.healthy).toBe(true);
            (0, globals_1.expect)(healthStatus.message).toContain('Demo organizations managed locally only');
            (0, globals_1.expect)(healthStatus.status.message).toContain('Demo sync functionality removed');
        });
        (0, globals_1.it)('should return disabled status when ensuring demo organizations', async () => {
            const result = await demo_management_service_1.DemoManagementService.ensureDemoOrganizations();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.message).toContain('Demo organizations functionality disabled');
            (0, globals_1.expect)(result.demoOrgId).toBeUndefined();
            (0, globals_1.expect)(result.openDemoOrgId).toBeUndefined();
        });
        (0, globals_1.it)('should return disabled status when recreating demo organizations', async () => {
            const result = await demo_management_service_1.DemoManagementService.recreateDemoOrganizations();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.message).toContain('Demo organizations functionality disabled');
            (0, globals_1.expect)(result.demoOrgId).toBeUndefined();
            (0, globals_1.expect)(result.openDemoOrgId).toBeUndefined();
        });
    });
    (0, globals_1.describe)('Demo User Authentication', () => {
        (0, globals_1.it)('should handle demo user login attempts gracefully', async () => {
            // Test common demo user credentials
            const demoCredentials = [
                { email: 'demo@koveo-gestion.com', password: 'demo123' },
                { email: 'demo.manager@koveo-gestion.com', password: 'demo123' },
                { email: 'demo.tenant@koveo-gestion.com', password: 'demo123' },
                { email: 'open-demo@koveo-gestion.com', password: 'demo123' }
            ];
            for (const credentials of demoCredentials) {
                // Verify these users don't exist in the database
                const user = await db_1.db
                    .select()
                    .from(schema_1.users)
                    .where((0, drizzle_orm_1.eq)(schema_1.users.email, credentials.email))
                    .then(results => results[0])
                    .catch(() => null);
                (0, globals_1.expect)(user).toBeUndefined();
            }
        });
        (0, globals_1.it)('should handle demo user role checks correctly', async () => {
            // Test RBAC function with demo user patterns
            const mockDemoUser = {
                id: 'test-demo-id',
                email: 'demo@test.com',
                role: 'demo_manager',
            };
            // The isOpenDemoUser function should handle demo users appropriately
            // Since demo functionality is disabled, this should return false or handle gracefully
            const result = (0, rbac_1.isOpenDemoUser)(mockDemoUser.email);
            // Should handle demo users gracefully (either false or throw controlled error)
            (0, globals_1.expect)(typeof result).toBe('boolean');
        });
    });
    (0, globals_1.describe)('Demo User Access Control', () => {
        (0, globals_1.it)('should prevent demo user creation through registration', async () => {
            // Use isolated test email that doesn't conflict with real demo users
            const testUserData = {
                email: 'isolated-test-demo@test-only.com',
                role: 'demo_manager',
                firstName: 'Test',
                lastName: 'Isolated',
                isActive: true,
                username: 'isolated-test-demo',
                password: 'test-hash'
            };
            try {
                // Ensure clean test environment - remove any previous test data
                await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.email, testUserData.email));
            }
            catch (error) {
                console.warn('Test cleanup warning:', error);
            }
            // Test demo user creation (should work for testing purposes)
            let creationFailed = false;
            try {
                await db_1.db.insert(schema_1.users).values(testUserData);
            }
            catch (error) {
                creationFailed = true;
            }
            // Always clean up isolated test data (never touch real demo users)
            if (!creationFailed) {
                await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.email, testUserData.email));
            }
            // Verify the isolated test user doesn't persist in the database
            const persistedUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testUserData.email))
                .then(results => results[0])
                .catch(() => null);
            (0, globals_1.expect)(persistedUser).toBeUndefined();
        });
        (0, globals_1.it)('should verify demo organization functionality is properly disabled', async () => {
            // Test that demo organization operations return disabled status
            const operations = [
                demo_management_service_1.DemoManagementService.ensureDemoOrganizations(),
                demo_management_service_1.DemoManagementService.recreateDemoOrganizations(),
                demo_management_service_1.DemoManagementService.checkDemoHealth()
            ];
            const results = await Promise.all(operations);
            // All operations should indicate demo functionality is disabled
            results.forEach((result, index) => {
                if (index < 2) {
                    // ensureDemoOrganizations and recreateDemoOrganizations have success property
                    (0, globals_1.expect)(result.success).toBe(true);
                    (0, globals_1.expect)(result.message).toContain('disabled');
                }
                else {
                    // checkDemoHealth has different structure
                    (0, globals_1.expect)(result.healthy).toBe(true);
                    (0, globals_1.expect)(result.message).toContain('locally only');
                }
            });
        });
    });
    (0, globals_1.describe)('Error Handling for Missing Demo Users', () => {
        (0, globals_1.it)('should handle API requests that expect demo users', async () => {
            // Test that API endpoints handle missing demo users gracefully
            // This test verifies the system doesn't crash when demo users are expected but not found
            // Mock API request scenarios that might expect demo users
            const scenarios = [
                'GET /api/auth/demo-login',
                'POST /api/users/create-demo',
                'GET /api/organizations/demo'
            ];
            // Each scenario should either:
            // 1. Return a proper error message about demo functionality being disabled
            // 2. Handle the missing demo users gracefully without crashing
            // 3. Provide appropriate user feedback
            scenarios.forEach(scenario => {
                // This test documents the expected behavior when demo users are not accessible
                (0, globals_1.expect)(scenario).toBeDefined();
            });
        });
        (0, globals_1.it)('should provide clear error messages for demo-related operations', async () => {
            // Test that when demo operations fail, they provide clear error messages
            const demoOperationResults = await Promise.all([
                demo_management_service_1.DemoManagementService.ensureDemoOrganizations(),
                demo_management_service_1.DemoManagementService.recreateDemoOrganizations()
            ]);
            demoOperationResults.forEach(result => {
                (0, globals_1.expect)(result.message).toBeDefined();
                (0, globals_1.expect)(result.message.length).toBeGreaterThan(10);
                (0, globals_1.expect)(result.message).toContain('disabled');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,