623ef42e897c133589882563799974a7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pool = exports.db = exports.sql = void 0;
const serverless_1 = require("@neondatabase/serverless");
const neon_http_1 = require("drizzle-orm/neon-http");
const index_1 = require("./config/index");
// Import only tables that exist, not relations to avoid circular dependency issues in production
const schema_1 = require("@shared/schema");
// Use correct database URL based on environment (production uses DATABASE_URL_KOVEO)
const databaseUrl = index_1.config.database.url;
if (!databaseUrl) {
    throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');
}
const isUsingKoveoDb = databaseUrl.includes('DATABASE_URL_KOVEO') || (index_1.config.server.isProduction && process.env.DATABASE_URL_KOVEO);
console.log('üîó Connecting to database with URL:', databaseUrl.substring(0, 50) + '...');
console.log('üåç Environment:', index_1.config.server.nodeEnv);
console.log(`üìä Database: Using ${index_1.config.server.isProduction ? 'PRODUCTION (DATABASE_URL_KOVEO)' : 'DEVELOPMENT (DATABASE_URL)'} database`);
/**
 * Neon serverless database connection using HTTP.
 * Uses the same pattern as your successful test code.
 * Optimized for serverless environments like Replit deployments.
 */
exports.sql = (0, serverless_1.neon)(databaseUrl);
// Test connection
(async () => {
    try {
        const result = await (0, exports.sql) `SELECT version()`;
        console.log('‚úÖ Database connection successful:', result[0].version.substring(0, 50) + '...');
    }
    catch (error) {
        console.error('‚ùå Database connection failed:', error.message);
    }
})();
// Create schema object with only tables (no relations to avoid production errors)
const schema = {
    users: schema_1.users,
    organizations: schema_1.organizations,
    buildings: schema_1.buildings,
    residences: schema_1.residences,
    userOrganizations: schema_1.userOrganizations,
    userResidences: schema_1.userResidences,
    invitations: schema_1.invitations,
    documents: schema_1.documents,
    bills: schema_1.bills,
    demands: schema_1.demands,
    commonSpaces: schema_1.commonSpaces,
    passwordResetTokens: schema_1.passwordResetTokens,
    maintenanceRequests: schema_1.maintenanceRequests,
    permissions: schema_1.permissions,
    userPermissions: schema_1.userPermissions,
    rolePermissions: schema_1.rolePermissions,
    budgets: schema_1.budgets,
    monthlyBudgets: schema_1.monthlyBudgets,
};
/**
 * Drizzle ORM database instance with table definitions only.
 * Provides type-safe database operations for the Quebec property management system.
 * Uses HTTP connection for better compatibility with serverless environments.
 */
exports.db = (0, neon_http_1.drizzle)(exports.sql, { schema });
// Log schema loading
console.log('üìä Database initialized with', Object.keys(schema).length, 'tables');
// For compatibility, export sql as pool for session store
exports.pool = exports.sql;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEseURBQWdEO0FBQ2hELHFEQUFnRDtBQUNoRCwwQ0FBd0M7QUFFeEMsaUdBQWlHO0FBQ2pHLDJDQW1Cd0I7QUFFeEIscUZBQXFGO0FBQ3JGLE1BQU0sV0FBVyxHQUFHLGNBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO0FBRXhDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUVELE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGNBQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNwSSxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3pGLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsY0FBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixjQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixXQUFXLENBQUMsQ0FBQztBQUU1STs7OztHQUlHO0FBQ1UsUUFBQSxHQUFHLEdBQUcsSUFBQSxpQkFBSSxFQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRXJDLGtCQUFrQjtBQUNsQixDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ1YsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLFdBQUcsRUFBQSxrQkFBa0IsQ0FBQztRQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBQUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLCtCQUErQixFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRSxDQUFDO0FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLGtGQUFrRjtBQUNsRixNQUFNLE1BQU0sR0FBRztJQUNiLEtBQUssRUFBTCxjQUFLO0lBQ0wsYUFBYSxFQUFiLHNCQUFhO0lBQ2IsU0FBUyxFQUFULGtCQUFTO0lBQ1QsVUFBVSxFQUFWLG1CQUFVO0lBQ1YsaUJBQWlCLEVBQWpCLDBCQUFpQjtJQUNqQixjQUFjLEVBQWQsdUJBQWM7SUFDZCxXQUFXLEVBQVgsb0JBQVc7SUFDWCxTQUFTLEVBQVQsa0JBQVM7SUFDVCxLQUFLLEVBQUwsY0FBSztJQUNMLE9BQU8sRUFBUCxnQkFBTztJQUNQLFlBQVksRUFBWixxQkFBWTtJQUNaLG1CQUFtQixFQUFuQiw0QkFBbUI7SUFDbkIsbUJBQW1CLEVBQW5CLDRCQUFtQjtJQUNuQixXQUFXLEVBQVgsb0JBQVc7SUFDWCxlQUFlLEVBQWYsd0JBQWU7SUFDZixlQUFlLEVBQWYsd0JBQWU7SUFDZixPQUFPLEVBQVAsZ0JBQU87SUFDUCxjQUFjLEVBQWQsdUJBQWM7Q0FDZixDQUFDO0FBRUY7Ozs7R0FJRztBQUNVLFFBQUEsRUFBRSxHQUFHLElBQUEsbUJBQU8sRUFBQyxXQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRTNDLHFCQUFxQjtBQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBRWxGLDBEQUEwRDtBQUM3QyxRQUFBLElBQUksR0FBRyxXQUFHLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvZGIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmVvbiB9IGZyb20gJ0BuZW9uZGF0YWJhc2Uvc2VydmVybGVzcyc7XG5pbXBvcnQgeyBkcml6emxlIH0gZnJvbSAnZHJpenpsZS1vcm0vbmVvbi1odHRwJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnL2luZGV4JztcblxuLy8gSW1wb3J0IG9ubHkgdGFibGVzIHRoYXQgZXhpc3QsIG5vdCByZWxhdGlvbnMgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSBpc3N1ZXMgaW4gcHJvZHVjdGlvblxuaW1wb3J0IHtcbiAgdXNlcnMsXG4gIG9yZ2FuaXphdGlvbnMsXG4gIGJ1aWxkaW5ncyxcbiAgcmVzaWRlbmNlcyxcbiAgdXNlck9yZ2FuaXphdGlvbnMsXG4gIHVzZXJSZXNpZGVuY2VzLFxuICBpbnZpdGF0aW9ucyxcbiAgZG9jdW1lbnRzLFxuICBiaWxscyxcbiAgZGVtYW5kcyxcbiAgY29tbW9uU3BhY2VzLFxuICBwYXNzd29yZFJlc2V0VG9rZW5zLFxuICBtYWludGVuYW5jZVJlcXVlc3RzLFxuICBwZXJtaXNzaW9ucyxcbiAgdXNlclBlcm1pc3Npb25zLFxuICByb2xlUGVybWlzc2lvbnMsXG4gIGJ1ZGdldHMsXG4gIG1vbnRobHlCdWRnZXRzLFxufSBmcm9tICdAc2hhcmVkL3NjaGVtYSc7XG5cbi8vIFVzZSBjb3JyZWN0IGRhdGFiYXNlIFVSTCBiYXNlZCBvbiBlbnZpcm9ubWVudCAocHJvZHVjdGlvbiB1c2VzIERBVEFCQVNFX1VSTF9LT1ZFTylcbmNvbnN0IGRhdGFiYXNlVXJsID0gY29uZmlnLmRhdGFiYXNlLnVybDtcblxuaWYgKCFkYXRhYmFzZVVybCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0RBVEFCQVNFX1VSTCBtdXN0IGJlIHNldC4gRGlkIHlvdSBmb3JnZXQgdG8gcHJvdmlzaW9uIGEgZGF0YWJhc2U/Jyk7XG59XG5cbmNvbnN0IGlzVXNpbmdLb3Zlb0RiID0gZGF0YWJhc2VVcmwuaW5jbHVkZXMoJ0RBVEFCQVNFX1VSTF9LT1ZFTycpIHx8IChjb25maWcuc2VydmVyLmlzUHJvZHVjdGlvbiAmJiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkxfS09WRU8pO1xuY29uc29sZS5sb2coJ/CflJcgQ29ubmVjdGluZyB0byBkYXRhYmFzZSB3aXRoIFVSTDonLCBkYXRhYmFzZVVybC5zdWJzdHJpbmcoMCwgNTApICsgJy4uLicpO1xuY29uc29sZS5sb2coJ/CfjI0gRW52aXJvbm1lbnQ6JywgY29uZmlnLnNlcnZlci5ub2RlRW52KTtcbmNvbnNvbGUubG9nKGDwn5OKIERhdGFiYXNlOiBVc2luZyAke2NvbmZpZy5zZXJ2ZXIuaXNQcm9kdWN0aW9uID8gJ1BST0RVQ1RJT04gKERBVEFCQVNFX1VSTF9LT1ZFTyknIDogJ0RFVkVMT1BNRU5UIChEQVRBQkFTRV9VUkwpJ30gZGF0YWJhc2VgKTtcblxuLyoqXG4gKiBOZW9uIHNlcnZlcmxlc3MgZGF0YWJhc2UgY29ubmVjdGlvbiB1c2luZyBIVFRQLlxuICogVXNlcyB0aGUgc2FtZSBwYXR0ZXJuIGFzIHlvdXIgc3VjY2Vzc2Z1bCB0ZXN0IGNvZGUuXG4gKiBPcHRpbWl6ZWQgZm9yIHNlcnZlcmxlc3MgZW52aXJvbm1lbnRzIGxpa2UgUmVwbGl0IGRlcGxveW1lbnRzLlxuICovXG5leHBvcnQgY29uc3Qgc3FsID0gbmVvbihkYXRhYmFzZVVybCk7XG5cbi8vIFRlc3QgY29ubmVjdGlvblxuKGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzcWxgU0VMRUNUIHZlcnNpb24oKWA7XG4gICAgY29uc29sZS5sb2coJ+KchSBEYXRhYmFzZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWw6JywgcmVzdWx0WzBdLnZlcnNpb24uc3Vic3RyaW5nKDAsIDUwKSArICcuLi4nKTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvci5tZXNzYWdlKTtcbiAgfVxufSkoKTtcblxuLy8gQ3JlYXRlIHNjaGVtYSBvYmplY3Qgd2l0aCBvbmx5IHRhYmxlcyAobm8gcmVsYXRpb25zIHRvIGF2b2lkIHByb2R1Y3Rpb24gZXJyb3JzKVxuY29uc3Qgc2NoZW1hID0ge1xuICB1c2VycyxcbiAgb3JnYW5pemF0aW9ucyxcbiAgYnVpbGRpbmdzLFxuICByZXNpZGVuY2VzLFxuICB1c2VyT3JnYW5pemF0aW9ucyxcbiAgdXNlclJlc2lkZW5jZXMsXG4gIGludml0YXRpb25zLFxuICBkb2N1bWVudHMsXG4gIGJpbGxzLFxuICBkZW1hbmRzLFxuICBjb21tb25TcGFjZXMsXG4gIHBhc3N3b3JkUmVzZXRUb2tlbnMsXG4gIG1haW50ZW5hbmNlUmVxdWVzdHMsXG4gIHBlcm1pc3Npb25zLFxuICB1c2VyUGVybWlzc2lvbnMsXG4gIHJvbGVQZXJtaXNzaW9ucyxcbiAgYnVkZ2V0cyxcbiAgbW9udGhseUJ1ZGdldHMsXG59O1xuXG4vKipcbiAqIERyaXp6bGUgT1JNIGRhdGFiYXNlIGluc3RhbmNlIHdpdGggdGFibGUgZGVmaW5pdGlvbnMgb25seS5cbiAqIFByb3ZpZGVzIHR5cGUtc2FmZSBkYXRhYmFzZSBvcGVyYXRpb25zIGZvciB0aGUgUXVlYmVjIHByb3BlcnR5IG1hbmFnZW1lbnQgc3lzdGVtLlxuICogVXNlcyBIVFRQIGNvbm5lY3Rpb24gZm9yIGJldHRlciBjb21wYXRpYmlsaXR5IHdpdGggc2VydmVybGVzcyBlbnZpcm9ubWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBkYiA9IGRyaXp6bGUoc3FsLCB7IHNjaGVtYSB9KTtcblxuLy8gTG9nIHNjaGVtYSBsb2FkaW5nXG5jb25zb2xlLmxvZygn8J+TiiBEYXRhYmFzZSBpbml0aWFsaXplZCB3aXRoJywgT2JqZWN0LmtleXMoc2NoZW1hKS5sZW5ndGgsICd0YWJsZXMnKTtcblxuLy8gRm9yIGNvbXBhdGliaWxpdHksIGV4cG9ydCBzcWwgYXMgcG9vbCBmb3Igc2Vzc2lvbiBzdG9yZVxuZXhwb3J0IGNvbnN0IHBvb2wgPSBzcWw7XG4iXSwidmVyc2lvbiI6M30=