d73a051662fb0c2c2d03985d8513014f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachedFileSection = AttachedFileSection;
const jsx_runtime_1 = require("react/jsx-runtime");
const button_1 = require("@/components/ui/button");
const label_1 = require("@/components/ui/label");
const lucide_react_1 = require("lucide-react");
function AttachedFileSection({ entityType, entityId, filePath, fileName, fileSize, canView = true, canDownload = true, className = '', fallbackName = 'Attachment' }) {
    // Don't render if no file is attached
    if (!filePath) {
        return null;
    }
    // Generate API endpoint based on entity type
    const getApiEndpoint = (download = false) => {
        const downloadParam = download ? '?download=true' : '';
        switch (entityType) {
            case 'document':
                return `/api/documents/${entityId}/file${downloadParam}`;
            case 'bug':
                return `/api/bugs/${entityId}/file${downloadParam}`;
            case 'feature-request':
                return `/api/feature-requests/${entityId}/file${downloadParam}`;
            case 'bill':
                return `/api/bills/${entityId}/file${downloadParam}`;
            default:
                return '';
        }
    };
    const handleViewFile = () => {
        if (!canView || !filePath)
            return;
        const fileUrl = getApiEndpoint(false);
        window.open(fileUrl, '_blank');
    };
    const handleDownloadFile = async () => {
        if (!canDownload || !filePath)
            return;
        try {
            // Use fetch with credentials to ensure authentication
            const response = await fetch(getApiEndpoint(true), {
                method: 'GET',
                credentials: 'include', // Include authentication cookies
            });
            if (!response.ok) {
                throw new Error(`Download failed: ${response.status} ${response.statusText}`);
            }
            // Get the filename from Content-Disposition header or use existing name
            const contentDisposition = response.headers.get('Content-Disposition');
            let downloadFileName = fileName || fallbackName;
            if (contentDisposition) {
                const fileNameMatch = contentDisposition.match(/filename="([^"]+)"/);
                if (fileNameMatch) {
                    downloadFileName = fileNameMatch[1];
                }
            }
            // Convert response to blob and create download
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const link = window.document.createElement('a');
            link.href = url;
            link.download = downloadFileName;
            window.document.body.appendChild(link);
            link.click();
            // Clean up
            window.document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
        }
        catch (error) {
            console.error('[DOWNLOAD] File download failed:', error);
        }
    };
    const formatFileSize = (bytes) => {
        if (!bytes)
            return '';
        const kb = bytes / 1024;
        if (kb < 1024)
            return `${kb.toFixed(1)} KB`;
        const mb = kb / 1024;
        return `${mb.toFixed(1)} MB`;
    };
    // Fix encoding issues in filename display
    const decodeFileName = (name) => {
        if (!name)
            return name;
        try {
            // Fix common encoding issues like "procÃ¨s" -> "procès"
            return name
                .replace(/Ã¨/g, 'è')
                .replace(/Ã©/g, 'é')
                .replace(/Ã /g, 'à')
                .replace(/Ã´/g, 'ô')
                .replace(/Ã®/g, 'î')
                .replace(/Ã§/g, 'ç')
                .replace(/Ã¹/g, 'ù')
                .replace(/Ã»/g, 'û')
                .replace(/Ã¢/g, 'â')
                .replace(/Ãª/g, 'ê');
        }
        catch {
            return name;
        }
    };
    const displayName = decodeFileName(fileName) || fallbackName;
    const sizeText = formatFileSize(fileSize);
    return ((0, jsx_runtime_1.jsxs)("div", { className: `border-t pt-4 ${className}`, children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Attached File" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between p-3 bg-gray-50 rounded-lg mt-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-4 h-4 text-gray-500" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium", children: displayName }), sizeText && (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: sizeText })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [canView && ((0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", onClick: handleViewFile, disabled: !filePath, "data-testid": "button-view-file", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-4 h-4 mr-2" }), "View"] })), canDownload && ((0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", onClick: handleDownloadFile, disabled: !filePath, "data-testid": "button-download-file", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: "w-4 h-4 mr-2" }), "Download"] }))] })] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,