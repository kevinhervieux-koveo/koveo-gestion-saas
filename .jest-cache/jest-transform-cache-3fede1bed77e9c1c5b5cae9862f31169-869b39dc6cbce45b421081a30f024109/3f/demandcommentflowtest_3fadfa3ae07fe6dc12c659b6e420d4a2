e7d369214385e8a2d0f79444638b99f6
"use strict";
/**
 * @file Demand Comment Integration Tests
 * @description Comprehensive tests for demand comment API endpoints and workflow
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
// Mock Express app setup
function createTestApp() {
    const express = require('express');
    const app = express();
    app.use(express.json());
    // Mock session middleware for testing
    app.use((req, res, next) => {
        // testUser will be set in beforeEach
        req.user = { id: 'user-123', role: 'resident' };
        next();
    });
    const { registerDemandRoutes } = require('../../server/api/demands');
    registerDemandRoutes(app);
    return app;
}
(0, globals_1.describe)('Demand Comment Integration Tests', () => {
    let app;
    let testUser;
    let testDemand;
    let testBuilding;
    let testResidence;
    let testOrganization;
    let authCookie;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Create test organization
        const orgResult = await db_1.db.insert(schema_1.organizations).values({
            name: 'Test Organization',
            type: 'residential',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            isActive: true,
        }).returning();
        testOrganization = orgResult[0];
        // Create test building
        const buildingResult = await db_1.db.insert(schema_1.buildings).values({
            name: 'Test Building',
            address: '456 Test Ave',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H2H 2H2',
            buildingType: 'condo',
            organizationId: testOrganization.id,
            totalUnits: 10,
            isActive: true,
        }).returning();
        testBuilding = buildingResult[0];
        // Create test residence
        const residenceResult = await db_1.db.insert(schema_1.residences).values({
            buildingId: testBuilding.id,
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1',
            balcony: false,
            isActive: true,
        }).returning();
        testResidence = residenceResult[0];
        // Create test user
        const userResult = await db_1.db.insert(schema_1.users).values({
            username: 'testuser',
            firstName: 'Test',
            lastName: 'User',
            email: 'test@example.com',
            password: 'hashed_password',
            role: 'resident',
            isActive: true,
        }).returning();
        testUser = userResult[0];
        // Associate user with residence
        await db_1.db.insert(schema_1.userResidences).values({
            userId: testUser.id,
            residenceId: testResidence.id,
            relationshipType: 'resident',
            startDate: new Date().toISOString().split('T')[0],
            isActive: true,
        });
        // Create test demand
        const demandResult = await db_1.db.insert(schema_1.demands).values({
            submitterId: testUser.id,
            type: 'maintenance',
            description: 'Test demand for comment testing',
            buildingId: testBuilding.id,
            residenceId: testResidence.id,
            status: 'submitted',
        }).returning();
        testDemand = demandResult[0];
        authCookie = 'test-session-cookie';
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data in proper order
        try {
            await db_1.db.delete(schema_1.demandComments).where((0, drizzle_orm_1.eq)(schema_1.demandComments.demandId, testDemand.id));
            await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, testDemand.id));
            await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testUser.id));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, testUser.id));
            await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidence.id));
            await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, testBuilding.id));
            await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testOrganization.id));
        }
        catch (error) {
            console.error('Cleanup error:', error);
        }
    });
    (0, globals_1.describe)('GET /api/demands/:id/comments', () => {
        (0, globals_1.it)('should retrieve comments for a demand', async () => {
            // First create a comment
            await db_1.db.insert(schema_1.demandComments).values({
                demandId: testDemand.id,
                commenterId: testUser.id,
                commentText: 'Test comment for retrieval',
                isInternal: false,
            });
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body).toBeInstanceOf(Array);
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
            const comment = response.body[0];
            (0, globals_1.expect)(comment.commentText).toBe('Test comment for retrieval');
            (0, globals_1.expect)(comment.demandId).toBe(testDemand.id);
            (0, globals_1.expect)(comment.commenterId).toBe(testUser.id);
            (0, globals_1.expect)(comment.author).toBeDefined();
            (0, globals_1.expect)(comment.author.email).toBe(testUser.email);
        });
        (0, globals_1.it)('should return empty array for demand with no comments', async () => {
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body).toBeInstanceOf(Array);
            (0, globals_1.expect)(response.body.length).toBe(0);
        });
        (0, globals_1.it)('should return 404 for non-existent demand', async () => {
            const fakeId = '123e4567-e89b-12d3-a456-426614174000';
            await (0, supertest_1.default)(app)
                .get(`/api/demands/${fakeId}/comments`)
                .set('Cookie', authCookie)
                .expect(404);
        });
        (0, globals_1.it)('should return comments in chronological order', async () => {
            // Create multiple comments with different timestamps
            const comments = [
                { text: 'First comment', delay: 0 },
                { text: 'Second comment', delay: 100 },
                { text: 'Third comment', delay: 200 },
            ];
            for (const comment of comments) {
                await new Promise(resolve => setTimeout(resolve, comment.delay));
                await db_1.db.insert(schema_1.demandComments).values({
                    demandId: testDemand.id,
                    commenterId: testUser.id,
                    commentText: comment.text,
                    isInternal: false,
                });
            }
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBe(3);
            (0, globals_1.expect)(response.body[0].commentText).toBe('First comment');
            (0, globals_1.expect)(response.body[1].commentText).toBe('Second comment');
            (0, globals_1.expect)(response.body[2].commentText).toBe('Third comment');
        });
        (0, globals_1.it)('should include author information in comments', async () => {
            await db_1.db.insert(schema_1.demandComments).values({
                demandId: testDemand.id,
                commenterId: testUser.id,
                commentText: 'Comment with author info',
                isInternal: false,
            });
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            const comment = response.body[0];
            (0, globals_1.expect)(comment.author).toEqual({
                id: testUser.id,
                firstName: testUser.firstName,
                lastName: testUser.lastName,
                email: testUser.email,
            });
        });
        (0, globals_1.it)('should handle internal vs external comments', async () => {
            // Create both internal and external comments
            await db_1.db.insert(schema_1.demandComments).values([
                {
                    demandId: testDemand.id,
                    commenterId: testUser.id,
                    commentText: 'External comment',
                    isInternal: false,
                },
                {
                    demandId: testDemand.id,
                    commenterId: testUser.id,
                    commentText: 'Internal comment',
                    isInternal: true,
                },
            ]);
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBe(2);
            const externalComment = response.body.find((c) => c.commentText === 'External comment');
            const internalComment = response.body.find((c) => c.commentText === 'Internal comment');
            (0, globals_1.expect)(externalComment.isInternal).toBe(false);
            (0, globals_1.expect)(internalComment.isInternal).toBe(true);
        });
    });
    (0, globals_1.describe)('POST /api/demands/:id/comments', () => {
        (0, globals_1.it)('should create a new comment successfully', async () => {
            const commentData = {
                commentText: 'This is a new comment on the demand',
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                demandId: testDemand.id,
                commenterId: testUser.id,
                commentText: 'This is a new comment on the demand',
                isInternal: false,
            });
            (0, globals_1.expect)(response.body.id).toBeDefined();
            (0, globals_1.expect)(response.body.createdAt).toBeDefined();
        });
        (0, globals_1.it)('should create comment with optional fields', async () => {
            const commentData = {
                commentText: 'Comment with all optional fields',
                commentType: 'status_update',
                isInternal: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body.commentText).toBe('Comment with all optional fields');
            (0, globals_1.expect)(response.body.commentType).toBe('status_update');
            (0, globals_1.expect)(response.body.isInternal).toBe(true);
        });
        (0, globals_1.it)('should auto-populate demandId and commenterId', async () => {
            const commentData = {
                commentText: 'Comment with auto-populated IDs',
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body.demandId).toBe(testDemand.id);
            (0, globals_1.expect)(response.body.commenterId).toBe(testUser.id);
        });
        (0, globals_1.it)('should validate required commentText field', async () => {
            const commentData = {
                // Missing commentText
                commentType: 'update',
            };
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(400);
        });
        (0, globals_1.it)('should validate commentText length constraints', async () => {
            // Test empty comment
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: '' })
                .expect(400);
            // Test too long comment
            const tooLongComment = 'A'.repeat(1001);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: tooLongComment })
                .expect(400);
            // Test valid length comment
            const validComment = 'A'.repeat(1000);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: validComment })
                .expect(201);
        });
        (0, globals_1.it)('should return 404 for non-existent demand', async () => {
            const fakeId = '123e4567-e89b-12d3-a456-426614174000';
            const commentData = {
                commentText: 'Comment on non-existent demand',
            };
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${fakeId}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(404);
        });
        (0, globals_1.it)('should handle French characters and special symbols', async () => {
            const commentData = {
                commentText: 'Commentaire en français avec caractères spéciaux: éàùç! 🏠 @#$%^&*()',
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body.commentText).toBe(commentData.commentText);
        });
        (0, globals_1.it)('should handle multiline comments', async () => {
            const multilineComment = `This is a multiline comment.
      
      It contains multiple paragraphs.
      
      End of comment.`;
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: multilineComment })
                .expect(201);
            (0, globals_1.expect)(response.body.commentText).toBe(multilineComment);
        });
        (0, globals_1.it)('should create internal comments for authorized users', async () => {
            const commentData = {
                commentText: 'This is an internal comment',
                isInternal: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body.isInternal).toBe(true);
        });
        (0, globals_1.it)('should handle different comment types', async () => {
            const commentTypes = ['update', 'question', 'answer', 'status_change'];
            for (const type of commentTypes) {
                const response = await (0, supertest_1.default)(app)
                    .post(`/api/demands/${testDemand.id}/comments`)
                    .set('Cookie', authCookie)
                    .send({
                    commentText: `Comment of type ${type}`,
                    commentType: type,
                })
                    .expect(201);
                (0, globals_1.expect)(response.body.commentType).toBe(type);
            }
        });
        (0, globals_1.it)('should validate UUID format in URL parameter', async () => {
            const invalidId = 'invalid-uuid';
            const commentData = {
                commentText: 'Valid comment text',
            };
            // This might return 400 or 404 depending on route validation
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${invalidId}/comments`)
                .set('Cookie', authCookie)
                .send(commentData);
            (0, globals_1.expect)([400, 404]).toContain(response.status);
        });
    });
    (0, globals_1.describe)('Comment Workflow Integration', () => {
        (0, globals_1.it)('should maintain comment thread integrity', async () => {
            // Create multiple comments and verify they stay linked to the demand
            const comments = [
                'Initial comment',
                'Follow-up comment',
                'Final comment',
            ];
            for (const commentText of comments) {
                await (0, supertest_1.default)(app)
                    .post(`/api/demands/${testDemand.id}/comments`)
                    .set('Cookie', authCookie)
                    .send({ commentText })
                    .expect(201);
            }
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBe(3);
            response.body.forEach((comment) => {
                (0, globals_1.expect)(comment.demandId).toBe(testDemand.id);
            });
        });
        (0, globals_1.it)('should handle concurrent comment creation', async () => {
            // Create multiple comments simultaneously
            const commentPromises = Array.from({ length: 3 }, (_, i) => (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: `Concurrent comment ${i + 1}` }));
            const responses = await Promise.all(commentPromises);
            responses.forEach(response => {
                (0, globals_1.expect)(response.status).toBe(201);
                (0, globals_1.expect)(response.body.demandId).toBe(testDemand.id);
            });
            // Verify all comments were created
            const getResponse = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(getResponse.body.length).toBe(3);
        });
        (0, globals_1.it)('should handle comment creation and retrieval workflow', async () => {
            // Step 1: Create initial comment
            const createResponse = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: 'Workflow test comment' })
                .expect(201);
            const commentId = createResponse.body.id;
            // Step 2: Retrieve comments and verify the new comment is included
            const getResponse = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            const createdComment = getResponse.body.find((c) => c.id === commentId);
            (0, globals_1.expect)(createdComment).toBeDefined();
            (0, globals_1.expect)(createdComment.commentText).toBe('Workflow test comment');
        });
        (0, globals_1.it)('should preserve comment order across multiple operations', async () => {
            const commentTexts = [
                'First comment in sequence',
                'Second comment in sequence',
                'Third comment in sequence',
            ];
            // Create comments with small delays to ensure ordering
            for (const text of commentTexts) {
                await (0, supertest_1.default)(app)
                    .post(`/api/demands/${testDemand.id}/comments`)
                    .set('Cookie', authCookie)
                    .send({ commentText: text })
                    .expect(201);
                // Small delay to ensure different timestamps
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBe(3);
            commentTexts.forEach((text, index) => {
                (0, globals_1.expect)(response.body[index].commentText).toBe(text);
            });
        });
    });
    (0, globals_1.describe)('Error Handling and Edge Cases', () => {
        (0, globals_1.it)('should handle database connection errors gracefully', async () => {
            // This test would require mocking database failures
            // For now, we test general error handling patterns
            const commentData = {
                commentText: 'Test comment for error handling',
            };
            // Normal case should work
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send(commentData)
                .expect(201);
        });
        (0, globals_1.it)('should handle malformed JSON in request body', async () => {
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .set('Content-Type', 'application/json')
                .send('{ invalid json }');
            (0, globals_1.expect)([400, 500]).toContain(response.status);
        });
        (0, globals_1.it)('should handle missing Content-Type header', async () => {
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send('commentText=Test comment');
            // Should handle this gracefully
            (0, globals_1.expect)([200, 201, 400]).toContain(response.status);
        });
        (0, globals_1.it)('should validate comment length at boundary conditions', async () => {
            // Test exact maximum length
            const maxLengthComment = 'A'.repeat(1000);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: maxLengthComment })
                .expect(201);
            // Test one character over maximum
            const overLimitComment = 'A'.repeat(1001);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .set('Cookie', authCookie)
                .send({ commentText: overLimitComment })
                .expect(400);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,