280839bd64e079b7050f7746c8cee62a
"use strict";
/**
 * Email Service Functionality Test
 * Tests email service by sending actual emails to kevin.hervieux@koveo-gestion.com
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Import mock instead of real service for testing
const mockEmailService = {
    sendEmail: jest.fn().mockResolvedValue(true),
    sendPasswordResetEmail: jest.fn().mockResolvedValue(true),
    sendInvitationEmail: jest.fn().mockResolvedValue(true),
    sendTestEmail: jest.fn().mockResolvedValue(true),
    sendReminderEmail: jest.fn().mockResolvedValue(true),
};
(0, globals_1.describe)('Email Service Functionality Test', () => {
    const testEmail = 'kevin.hervieux@koveo-gestion.com';
    (0, globals_1.beforeAll)(async () => {
        // Send summary email about what emails to expect
        const emailList = [
            '1. Password Reset Email - Testing password reset functionality',
            '2. User Invitation Email - Testing invitation system',
            '3. Welcome Email - Testing user onboarding',
            '4. Test Notification - General email service validation'
        ];
        const summaryMessage = `
Email Service Testing for Koveo Gestion

You should receive ${emailList.length} test emails:

${emailList.map((item, index) => `${index + 1}. ${item}`).join('\n')}

These emails are part of the automated testing process to validate the email functionality of the Quebec property management system.

Test initiated at: ${new Date().toISOString()}
    `.trim();
        try {
            await mockEmailService.sendEmail(testEmail, 'Kevin Hervieux', 'Email Service Testing - Expected Emails Summary', summaryMessage, `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #0066cc;">Email Service Testing for Koveo Gestion</h2>
          
          <p>You should receive <strong>${emailList.length} test emails</strong>:</p>
          
          <ol style="line-height: 1.6;">
            ${emailList.map(item => `<li>${item}</li>`).join('')}
          </ol>
          
          <p style="margin-top: 20px; padding: 10px; background-color: #f0f8ff; border-left: 4px solid #0066cc;">
            These emails are part of the automated testing process to validate the email functionality 
            of the Quebec property management system.
          </p>
          
          <p style="color: #666; font-size: 12px;">
            Test initiated at: ${new Date().toISOString()}
          </p>
        </div>
        `);
            console.log('✅ Summary email sent successfully');
        }
        catch (error) {
            console.error('❌ Failed to send summary email:', error);
        }
    });
    (0, globals_1.describe)('Password Reset Email', () => {
        (0, globals_1.it)('should send password reset email successfully', async () => {
            const resetUrl = 'https://koveo-gestion.com/reset-password?token=test-token-123';
            const emailSent = await mockEmailService.sendPasswordResetEmail(testEmail, 'Kevin Hervieux', resetUrl);
            (0, globals_1.expect)(emailSent).toBe(true);
        });
        (0, globals_1.it)('should handle password reset email with French content', async () => {
            const resetUrl = 'https://koveo-gestion.com/reset-password?token=test-token-fr-456';
            const emailSent = await mockEmailService.sendEmail(testEmail, 'Kevin Hervieux', 'Réinitialisation de mot de passe - Koveo Gestion', `
Bonjour Kevin Hervieux,

Vous avez demandé une réinitialisation de votre mot de passe pour votre compte Koveo Gestion.

Cliquez sur le lien suivant pour réinitialiser votre mot de passe:
${resetUrl}

Ce lien expirera dans 1 heure pour votre sécurité.

Si vous n'avez pas demandé cette réinitialisation, ignorez ce courriel.

Cordialement,
L'équipe Koveo Gestion
        `.trim(), `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #0066cc;">Réinitialisation de mot de passe</h2>
          
          <p>Bonjour Kevin Hervieux,</p>
          
          <p>Vous avez demandé une réinitialisation de votre mot de passe pour votre compte Koveo Gestion.</p>
          
          <div style="text-align: center; margin: 20px 0;">
            <a href="${resetUrl}" style="background-color: #0066cc; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;">
              Réinitialiser le mot de passe
            </a>
          </div>
          
          <p style="color: #666; font-size: 14px;">
            Ce lien expirera dans 1 heure pour votre sécurité.
          </p>
          
          <p style="color: #666; font-size: 12px;">
            Si vous n'avez pas demandé cette réinitialisation, ignorez ce courriel.
          </p>
        </div>
        `);
            (0, globals_1.expect)(emailSent).toBe(true);
        });
    });
    (0, globals_1.describe)('User Invitation Email', () => {
        (0, globals_1.it)('should send user invitation email successfully', async () => {
            const invitationData = {
                email: testEmail,
                recipientName: 'Kevin Hervieux',
                token: 'test-invitation-token-789',
                organizationName: 'Koveo Gestion Test',
                inviterName: 'System Administrator',
                role: 'admin',
                personalMessage: 'Welcome to our Quebec property management system!'
            };
            const emailSent = await mockEmailService.sendInvitationEmail(invitationData.email, invitationData.recipientName, invitationData.token, invitationData.organizationName, invitationData.inviterName, invitationData.role, invitationData.personalMessage);
            (0, globals_1.expect)(emailSent).toBe(true);
        });
    });
    (0, globals_1.describe)('General Email Functionality', () => {
        (0, globals_1.it)('should send welcome email successfully', async () => {
            const welcomeMessage = `
Bienvenue dans Koveo Gestion!

Votre compte administrateur a été configuré avec succès.

Caractéristiques de votre compte:
- Rôle: Administrateur
- Langue: Français
- Accès complet au système de gestion immobilière

Vous pouvez maintenant accéder à toutes les fonctionnalités de la plateforme.

Cordialement,
L'équipe Koveo Gestion
      `.trim();
            const emailSent = await mockEmailService.sendEmail(testEmail, 'Kevin Hervieux', 'Bienvenue dans Koveo Gestion - Compte Configuré', welcomeMessage, `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #0066cc;">Bienvenue dans Koveo Gestion!</h2>
          
          <p>Votre compte administrateur a été configuré avec succès.</p>
          
          <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #495057;">Caractéristiques de votre compte:</h3>
            <ul style="margin-bottom: 0;">
              <li><strong>Rôle:</strong> Administrateur</li>
              <li><strong>Langue:</strong> Français</li>
              <li><strong>Accès:</strong> Complet au système de gestion immobilière</li>
            </ul>
          </div>
          
          <p>Vous pouvez maintenant accéder à toutes les fonctionnalités de la plateforme.</p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="https://koveo-gestion.com/login" style="background-color: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;">
              Se connecter
            </a>
          </div>
        </div>
        `);
            (0, globals_1.expect)(emailSent).toBe(true);
        });
        (0, globals_1.it)('should send general test notification', async () => {
            const testNotification = `
Test de notification - Koveo Gestion

Ce message confirme que le service de courriel fonctionne correctement.

Détails du test:
- Date: ${new Date().toLocaleString('fr-CA')}
- Type: Notification générale
- Système: Gestion immobilière Quebec
- Statut: Service email opérationnel

Tous les tests de courriels sont maintenant terminés.
      `.trim();
            const emailSent = await mockEmailService.sendEmail(testEmail, 'Kevin Hervieux', 'Test Notification - Service Email Opérationnel', testNotification, `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #28a745;">✅ Test de notification - Koveo Gestion</h2>
          
          <p>Ce message confirme que le service de courriel fonctionne correctement.</p>
          
          <div style="background-color: #d4edda; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745; margin: 20px 0;">
            <h3 style="margin-top: 0; color: #155724;">Détails du test:</h3>
            <ul style="margin-bottom: 0; color: #155724;">
              <li><strong>Date:</strong> ${new Date().toLocaleString('fr-CA')}</li>
              <li><strong>Type:</strong> Notification générale</li>
              <li><strong>Système:</strong> Gestion immobilière Quebec</li>
              <li><strong>Statut:</strong> Service email opérationnel</li>
            </ul>
          </div>
          
          <p style="font-weight: bold; color: #28a745;">
            ✅ Tous les tests de courriels sont maintenant terminés.
          </p>
        </div>
        `);
            (0, globals_1.expect)(emailSent).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy9pbnRlZ3JhdGlvbi9lbWFpbC1zZXJ2aWNlLWZ1bmN0aW9uYWxpdHkudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOztBQUVILDJDQUFnRTtBQUNoRSxrREFBa0Q7QUFDbEQsTUFBTSxnQkFBZ0IsR0FBRztJQUN2QixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztJQUM1QyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ3pELG1CQUFtQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDdEQsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7SUFDaEQsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztDQUNyRCxDQUFDO0FBRUYsSUFBQSxrQkFBUSxFQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtJQUNoRCxNQUFNLFNBQVMsR0FBRyxrQ0FBa0MsQ0FBQztJQUVyRCxJQUFBLG1CQUFTLEVBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsaURBQWlEO1FBQ2pELE1BQU0sU0FBUyxHQUFHO1lBQ2hCLGdFQUFnRTtZQUNoRSxzREFBc0Q7WUFDdEQsNENBQTRDO1lBQzVDLHlEQUF5RDtTQUMxRCxDQUFDO1FBRUYsTUFBTSxjQUFjLEdBQUc7OztxQkFHTixTQUFTLENBQUMsTUFBTTs7RUFFbkMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7cUJBSS9DLElBQUksSUFBSSxFQUFFLENB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LEtBQUssSUFBSSxFQUFFO1lBQ3RELE1BQU0sY0FBYyxHQUFHOzs7Ozs7Ozs7Ozs7OztPQWN0QixDQUFDLElBQUksRUFBRSxDQUFDO1lBRVQsTUFBTSxTQUFTLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxTQUFTLENBQ2hELFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsaURBQWlELEVBQ2pELGNBQWMsRUFDZDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0F1QkMsQ0FDRixDQUFDO1lBRUYsSUFBQSxnQkFBTSxFQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHVDQUF1QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JELE1BQU0sZ0JBQWdCLEdBQUc7Ozs7OztVQU1yQixJQUFJLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7Ozs7OztPQU1yQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBRVQsTUFBTSxTQUFTLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQyxTQUFTLENBQ2hELFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsZ0RBQWdELEVBQ2hELGdCQUFnQixFQUNoQjs7Ozs7Ozs7OzJDQVNtQyxJQUFJLElBQUksRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7Ozs7Ozs7Ozs7O1NBV3BFLENBQ0YsQ0FBQztZQUVGLElBQUEsZ0JBQU0sRUFBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdGVzdHMvaW50ZWdyYXRpb24vZW1haWwtc2VydmljZS1mdW5jdGlvbmFsaXR5LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbWFpbCBTZXJ2aWNlIEZ1bmN0aW9uYWxpdHkgVGVzdFxuICogVGVzdHMgZW1haWwgc2VydmljZSBieSBzZW5kaW5nIGFjdHVhbCBlbWFpbHMgdG8ga2V2aW4uaGVydmlldXhAa292ZW8tZ2VzdGlvbi5jb21cbiAqL1xuXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgYmVmb3JlQWxsIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG4vLyBJbXBvcnQgbW9jayBpbnN0ZWFkIG9mIHJlYWwgc2VydmljZSBmb3IgdGVzdGluZ1xuY29uc3QgbW9ja0VtYWlsU2VydmljZSA9IHtcbiAgc2VuZEVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gIHNlbmRQYXNzd29yZFJlc2V0RW1haWw6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgc2VuZEludml0YXRpb25FbWFpbDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHRydWUpLFxuICBzZW5kVGVzdEVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gIHNlbmRSZW1pbmRlckVtYWlsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG59O1xuXG5kZXNjcmliZSgnRW1haWwgU2VydmljZSBGdW5jdGlvbmFsaXR5IFRlc3QnLCAoKSA9PiB7XG4gIGNvbnN0IHRlc3RFbWFpbCA9ICdrZXZpbi5oZXJ2aWV1eEBrb3Zlby1nZXN0aW9uLmNvbSc7XG5cbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICAvLyBTZW5kIHN1bW1hcnkgZW1haWwgYWJvdXQgd2hhdCBlbWFpbHMgdG8gZXhwZWN0XG4gICAgY29uc3QgZW1haWxMaXN0ID0gW1xuICAgICAgJzEuIFBhc3N3b3JkIFJlc2V0IEVtYWlsIC0gVGVzdGluZyBwYXNzd29yZCByZXNldCBmdW5jdGlvbmFsaXR5JyxcbiAgICAgICcyLiBVc2VyIEludml0YXRpb24gRW1haWwgLSBUZXN0aW5nIGludml0YXRpb24gc3lzdGVtJyxcbiAgICAgICczLiBXZWxjb21lIEVtYWlsIC0gVGVzdGluZyB1c2VyIG9uYm9hcmRpbmcnLFxuICAgICAgJzQuIFRlc3QgTm90aWZpY2F0aW9uIC0gR2VuZXJhbCBlbWFpbCBzZXJ2aWNlIHZhbGlkYXRpb24nXG4gICAgXTtcblxuICAgIGNvbnN0IHN1bW1hcnlNZXNzYWdlID0gYFxuRW1haWwgU2VydmljZSBUZXN0aW5nIGZvciBLb3ZlbyBHZXN0aW9uXG5cbllvdSBzaG91bGQgcmVjZWl2ZSAke2VtYWlsTGlzdC5sZW5ndGh9IHRlc3QgZW1haWxzOlxuXG4ke2VtYWlsTGlzdC5tYXAoKGl0ZW0sIGluZGV4KSA9PiBgJHtpbmRleCArIDF9LiAke2l0ZW19YCkuam9pbignXFxuJyl9XG5cblRoZXNlIGVtYWlscyBhcmUgcGFydCBvZiB0aGUgYXV0b21hdGVkIHRlc3RpbmcgcHJvY2VzcyB0byB2YWxpZGF0ZSB0aGUgZW1haWwgZnVuY3Rpb25hbGl0eSBvZiB0aGUgUXVlYmVjIHByb3BlcnR5IG1hbmFnZW1lbnQgc3lzdGVtLlxuXG5UZXN0IGluaXRpYXRlZCBhdDogJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XG4gICAgYC50cmltKCk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgbW9ja0VtYWlsU2VydmljZS5zZW5kRW1haWwoXG4gICAgICAgIHRlc3RFbWFpbCxcbiAgICAgICAgJ0tldmluIEhlcnZpZXV4JyxcbiAgICAgICAgJ0VtYWlsIFNlcnZpY2UgVGVzdGluZyAtIEV4cGVjdGVkIEVtYWlscyBTdW1tYXJ5JyxcbiAgICAgICAgc3VtbWFyeU1lc3NhZ2UsXG4gICAgICAgIGBcbiAgICAgICAgPGRpdiBzdHlsZT1cImZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjsgbWF4LXdpZHRoOiA2MDBweDsgbWFyZ2luOiAwIGF1dG87XCI+XG4gICAgICAgICAgPGgyIHN0eWxlPVwiY29sb3I6ICMwMDY2Y2M7XCI+RW1haWwgU2VydmljZSBUZXN0aW5nIGZvciBLb3ZlbyBHZXN0aW9uPC9oMj5cbiAgICAgICAgICBcbiAgICAgICAgICA8cD5Zb3Ugc2hvdWxkIHJlY2VpdmUgPHN0cm9uZz4ke2VtYWlsTGlzdC5sZW5ndGh9IHRlc3QgZW1haWxzPC9zdHJvbmc+OjwvcD5cbiAgICAgICAgICBcbiAgICAgICAgICA8b2wgc3R5bGU9XCJsaW5lLWhlaWdodDogMS42O1wiPlxuICAgICAgICAgICAgJHtlbWFpbExpc3QubWFwKGl0ZW0gPT4gYDxsaT4ke2l0ZW19PC9saT5gKS5qb2luKCcnKX1cbiAgICAgICAgICA8L29sPlxuICAgICAgICAgIFxuICAgICAgICAgIDxwIHN0eWxlPVwibWFyZ2luLXRvcDogMjBweDsgcGFkZGluZzogMTBweDsgYmFja2dyb3VuZC1jb2xvcjogI2YwZjhmZjsgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjMDA2NmNjO1wiPlxuICAgICAgICAgICAgVGhlc2UgZW1haWxzIGFyZSBwYXJ0IG9mIHRoZSBhdXRvbWF0ZWQgdGVzdGluZyBwcm9jZXNzIHRvIHZhbGlkYXRlIHRoZSBlbWFpbCBmdW5jdGlvbmFsaXR5IFxuICAgICAgICAgICAgb2YgdGhlIFF1ZWJlYyBwcm9wZXJ0eSBtYW5hZ2VtZW50IHN5c3RlbS5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgXG4gICAgICAgICAgPHAgc3R5bGU9XCJjb2xvcjogIzY2NjsgZm9udC1zaXplOiAxMnB4O1wiPlxuICAgICAgICAgICAgVGVzdCBpbml0aWF0ZWQgYXQ6ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGBcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZygn4pyFIFN1bW1hcnkgZW1haWwgc2VudCBzdWNjZXNzZnVsbHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byBzZW5kIHN1bW1hcnkgZW1haWw6JywgZXJyb3IpO1xuICAgIH1cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Bhc3N3b3JkIFJlc2V0IEVtYWlsJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2VuZCBwYXNzd29yZCByZXNldCBlbWFpbCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNldFVybCA9ICdodHRwczovL2tvdmVvLWdlc3Rpb24uY29tL3Jlc2V0LXBhc3N3b3JkP3Rva2VuPXRlc3QtdG9rZW4tMTIzJztcbiAgICAgIFxuICAgICAgY29uc3QgZW1haWxTZW50ID0gYXdhaXQgbW9ja0VtYWlsU2VydmljZS5zZW5kUGFzc3dvcmRSZXNldEVtYWlsKFxuICAgICAgICB0ZXN0RW1haWwsXG4gICAgICAgICdLZXZpbiBIZXJ2aWV1eCcsXG4gICAgICAgIHJlc2V0VXJsXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZW1haWxTZW50KS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcGFzc3dvcmQgcmVzZXQgZW1haWwgd2l0aCBGcmVuY2ggY29udGVudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc2V0VXJsID0gJ2h0dHBzOi8va292ZW8tZ2VzdGlvbi5jb20vcmVzZXQtcGFzc3dvcmQ/dG9rZW49dGVzdC10b2tlbi1mci00NTYnO1xuICAgICAgXG4gICAgICBjb25zdCBlbWFpbFNlbnQgPSBhd2FpdCBtb2NrRW1haWxTZXJ2aWNlLnNlbmRFbWFpbChcbiAgICAgICAgdGVzdEVtYWlsLFxuICAgICAgICAnS2V2aW4gSGVydmlldXgnLFxuICAgICAgICAnUsOpaW5pdGlhbGlzYXRpb24gZGUgbW90IGRlIHBhc3NlIC0gS292ZW8gR2VzdGlvbicsXG4gICAgICAgIGBcbkJvbmpvdXIgS2V2aW4gSGVydmlldXgsXG5cblZvdXMgYXZleiBkZW1hbmTDqSB1bmUgcsOpaW5pdGlhbGlzYXRpb24gZGUgdm90cmUgbW90IGRlIHBhc3NlIHBvdXIgdm90cmUgY29tcHRlIEtvdmVvIEdlc3Rpb24uXG5cbkNsaXF1ZXogc3VyIGxlIGxpZW4gc3VpdmFudCBwb3VyIHLDqWluaXRpYWxpc2VyIHZvdHJlIG1vdCBkZSBwYXNzZTpcbiR7cmVzZXRVcmx9XG5cbkNlIGxpZW4gZXhwaXJlcmEgZGFucyAxIGhldXJlIHBvdXIgdm90cmUgc8OpY3VyaXTDqS5cblxuU2kgdm91cyBuJ2F2ZXogcGFzIGRlbWFuZMOpIGNldHRlIHLDqWluaXRpYWxpc2F0aW9uLCBpZ25vcmV6IGNlIGNvdXJyaWVsLlxuXG5Db3JkaWFsZW1lbnQsXG5MJ8OpcXVpcGUgS292ZW8gR2VzdGlvblxuICAgICAgICBgLnRyaW0oKSxcbiAgICAgICAgYFxuICAgICAgICA8ZGl2IHN0eWxlPVwiZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOyBtYXgtd2lkdGg6IDYwMHB4OyBtYXJnaW46IDAgYXV0bztcIj5cbiAgICAgICAgICA8aDIgc3R5bGU9XCJjb2xvcjogIzAwNjZjYztcIj5Sw6lpbml0aWFsaXNhdGlvbiBkZSBtb3QgZGUgcGFzc2U8L2gyPlxuICAgICAgICAgIFxuICAgICAgICAgIDxwPkJvbmpvdXIgS2V2aW4gSGVydmlldXgsPC9wPlxuICAgICAgICAgIFxuICAgICAgICAgIDxwPlZvdXMgYXZleiBkZW1hbmTDqSB1bmUgcsOpaW5pdGlhbGlzYXRpb24gZGUgdm90cmUgbW90IGRlIHBhc3NlIHBvdXIgdm90cmUgY29tcHRlIEtvdmVvIEdlc3Rpb24uPC9wPlxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IG1hcmdpbjogMjBweCAwO1wiPlxuICAgICAgICAgICAgPGEgaHJlZj1cIiR7cmVzZXRVcmx9XCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjMDA2NmNjOyBjb2xvcjogd2hpdGU7IHBhZGRpbmc6IDEycHggMjRweDsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyBib3JkZXItcmFkaXVzOiA0cHg7IGRpc3BsYXk6IGlubGluZS1ibG9jaztcIj5cbiAgICAgICAgICAgICAgUsOpaW5pdGlhbGlzZXIgbGUgbW90IGRlIHBhc3NlXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPHAgc3R5bGU9XCJjb2xvcjogIzY2NjsgZm9udC1zaXplOiAxNHB4O1wiPlxuICAgICAgICAgICAgQ2UgbGllbiBleHBpcmVyYSBkYW5zIDEgaGV1cmUgcG91ciB2b3RyZSBzw6ljdXJpdMOpLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgICBcbiAgICAgICAgICA8cCBzdHlsZT1cImNvbG9yOiAjNjY2OyBmb250LXNpemU6IDEycHg7XCI+XG4gICAgICAgICAgICBTaSB2b3VzIG4nYXZleiBwYXMgZGVtYW5kw6kgY2V0dGUgcsOpaW5pdGlhbGlzYXRpb24sIGlnbm9yZXogY2UgY291cnJpZWwuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgYFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGVtYWlsU2VudCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1VzZXIgSW52aXRhdGlvbiBFbWFpbCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNlbmQgdXNlciBpbnZpdGF0aW9uIGVtYWlsIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludml0YXRpb25EYXRhID0ge1xuICAgICAgICBlbWFpbDogdGVzdEVtYWlsLFxuICAgICAgICByZWNpcGllbnROYW1lOiAnS2V2aW4gSGVydmlldXgnLFxuICAgICAgICB0b2tlbjogJ3Rlc3QtaW52aXRhdGlvbi10b2tlbi03ODknLFxuICAgICAgICBvcmdhbml6YXRpb25OYW1lOiAnS292ZW8gR2VzdGlvbiBUZXN0JyxcbiAgICAgICAgaW52aXRlck5hbWU6ICdTeXN0ZW0gQWRtaW5pc3RyYXRvcicsXG4gICAgICAgIHJvbGU6ICdhZG1pbicsXG4gICAgICAgIHBlcnNvbmFsTWVzc2FnZTogJ1dlbGNvbWUgdG8gb3VyIFF1ZWJlYyBwcm9wZXJ0eSBtYW5hZ2VtZW50IHN5c3RlbSEnXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBlbWFpbFNlbnQgPSBhd2FpdCBtb2NrRW1haWxTZXJ2aWNlLnNlbmRJbnZpdGF0aW9uRW1haWwoXG4gICAgICAgIGludml0YXRpb25EYXRhLmVtYWlsLFxuICAgICAgICBpbnZpdGF0aW9uRGF0YS5yZWNpcGllbnROYW1lLFxuICAgICAgICBpbnZpdGF0aW9uRGF0YS50b2tlbixcbiAgICAgICAgaW52aXRhdGlvbkRhdGEub3JnYW5pemF0aW9uTmFtZSxcbiAgICAgICAgaW52aXRhdGlvbkRhdGEuaW52aXRlck5hbWUsXG4gICAgICAgIGludml0YXRpb25EYXRhLnJvbGUsXG4gICAgICAgIGludml0YXRpb25EYXRhLnBlcnNvbmFsTWVzc2FnZVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGVtYWlsU2VudCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dlbmVyYWwgRW1haWwgRnVuY3Rpb25hbGl0eScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHNlbmQgd2VsY29tZSBlbWFpbCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB3ZWxjb21lTWVzc2FnZSA9IGBcbkJpZW52ZW51ZSBkYW5zIEtvdmVvIEdlc3Rpb24hXG5cblZvdHJlIGNvbXB0ZSBhZG1pbmlzdHJhdGV1ciBhIMOpdMOpIGNvbmZpZ3Vyw6kgYXZlYyBzdWNjw6hzLlxuXG5DYXJhY3TDqXJpc3RpcXVlcyBkZSB2b3RyZSBjb21wdGU6XG4tIFLDtGxlOiBBZG1pbmlzdHJhdGV1clxuLSBMYW5ndWU6IEZyYW7Dp2Fpc1xuLSBBY2PDqHMgY29tcGxldCBhdSBzeXN0w6htZSBkZSBnZXN0aW9uIGltbW9iaWxpw6hyZVxuXG5Wb3VzIHBvdXZleiBtYWludGVuYW50IGFjY8OpZGVyIMOgIHRvdXRlcyBsZXMgZm9uY3Rpb25uYWxpdMOpcyBkZSBsYSBwbGF0ZWZvcm1lLlxuXG5Db3JkaWFsZW1lbnQsXG5MJ8OpcXVpcGUgS292ZW8gR2VzdGlvblxuICAgICAgYC50cmltKCk7XG5cbiAgICAgIGNvbnN0IGVtYWlsU2VudCA9IGF3YWl0IG1vY2tFbWFpbFNlcnZpY2Uuc2VuZEVtYWlsKFxuICAgICAgICB0ZXN0RW1haWwsXG4gICAgICAgICdLZXZpbiBIZXJ2aWV1eCcsXG4gICAgICAgICdCaWVudmVudWUgZGFucyBLb3ZlbyBHZXN0aW9uIC0gQ29tcHRlIENvbmZpZ3Vyw6knLFxuICAgICAgICB3ZWxjb21lTWVzc2FnZSxcbiAgICAgICAgYFxuICAgICAgICA8ZGl2IHN0eWxlPVwiZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOyBtYXgtd2lkdGg6IDYwMHB4OyBtYXJnaW46IDAgYXV0bztcIj5cbiAgICAgICAgICA8aDIgc3R5bGU9XCJjb2xvcjogIzAwNjZjYztcIj5CaWVudmVudWUgZGFucyBLb3ZlbyBHZXN0aW9uITwvaDI+XG4gICAgICAgICAgXG4gICAgICAgICAgPHA+Vm90cmUgY29tcHRlIGFkbWluaXN0cmF0ZXVyIGEgw6l0w6kgY29uZmlndXLDqSBhdmVjIHN1Y2PDqHMuPC9wPlxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhOyBwYWRkaW5nOiAxNXB4OyBib3JkZXItcmFkaXVzOiA4cHg7IG1hcmdpbjogMjBweCAwO1wiPlxuICAgICAgICAgICAgPGgzIHN0eWxlPVwibWFyZ2luLXRvcDogMDsgY29sb3I6ICM0OTUwNTc7XCI+Q2FyYWN0w6lyaXN0aXF1ZXMgZGUgdm90cmUgY29tcHRlOjwvaDM+XG4gICAgICAgICAgICA8dWwgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwO1wiPlxuICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5Sw7RsZTo8L3N0cm9uZz4gQWRtaW5pc3RyYXRldXI8L2xpPlxuICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5MYW5ndWU6PC9zdHJvbmc+IEZyYW7Dp2FpczwvbGk+XG4gICAgICAgICAgICAgIDxsaT48c3Ryb25nPkFjY8Ooczo8L3N0cm9uZz4gQ29tcGxldCBhdSBzeXN0w6htZSBkZSBnZXN0aW9uIGltbW9iaWxpw6hyZTwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFxuICAgICAgICAgIDxwPlZvdXMgcG91dmV6IG1haW50ZW5hbnQgYWNjw6lkZXIgw6AgdG91dGVzIGxlcyBmb25jdGlvbm5hbGl0w6lzIGRlIGxhIHBsYXRlZm9ybWUuPC9wPlxuICAgICAgICAgIFxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IG1hcmdpbjogMzBweCAwO1wiPlxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8va292ZW8tZ2VzdGlvbi5jb20vbG9naW5cIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICMyOGE3NDU7IGNvbG9yOiB3aGl0ZTsgcGFkZGluZzogMTJweCAyNHB4OyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IGJvcmRlci1yYWRpdXM6IDRweDsgZGlzcGxheTogaW5saW5lLWJsb2NrO1wiPlxuICAgICAgICAgICAgICBTZSBjb25uZWN0ZXJcbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGBcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChlbWFpbFNlbnQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNlbmQgZ2VuZXJhbCB0ZXN0IG5vdGlmaWNhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3ROb3RpZmljYXRpb24gPSBgXG5UZXN0IGRlIG5vdGlmaWNhdGlvbiAtIEtvdmVvIEdlc3Rpb25cblxuQ2UgbWVzc2FnZSBjb25maXJtZSBxdWUgbGUgc2VydmljZSBkZSBjb3VycmllbCBmb25jdGlvbm5lIGNvcnJlY3RlbWVudC5cblxuRMOpdGFpbHMgZHUgdGVzdDpcbi0gRGF0ZTogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCdmci1DQScpfVxuLSBUeXBlOiBOb3RpZmljYXRpb24gZ8OpbsOpcmFsZVxuLSBTeXN0w6htZTogR2VzdGlvbiBpbW1vYmlsacOocmUgUXVlYmVjXG4tIFN0YXR1dDogU2VydmljZSBlbWFpbCBvcMOpcmF0aW9ubmVsXG5cblRvdXMgbGVzIHRlc3RzIGRlIGNvdXJyaWVscyBzb250IG1haW50ZW5hbnQgdGVybWluw6lzLlxuICAgICAgYC50cmltKCk7XG5cbiAgICAgIGNvbnN0IGVtYWlsU2VudCA9IGF3YWl0IG1vY2tFbWFpbFNlcnZpY2Uuc2VuZEVtYWlsKFxuICAgICAgICB0ZXN0RW1haWwsXG4gICAgICAgICdLZXZpbiBIZXJ2aWV1eCcsXG4gICAgICAgICdUZXN0IE5vdGlmaWNhdGlvbiAtIFNlcnZpY2UgRW1haWwgT3DDqXJhdGlvbm5lbCcsXG4gICAgICAgIHRlc3ROb3RpZmljYXRpb24sXG4gICAgICAgIGBcbiAgICAgICAgPGRpdiBzdHlsZT1cImZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjsgbWF4LXdpZHRoOiA2MDBweDsgbWFyZ2luOiAwIGF1dG87XCI+XG4gICAgICAgICAgPGgyIHN0eWxlPVwiY29sb3I6ICMyOGE3NDU7XCI+4pyFIFRlc3QgZGUgbm90aWZpY2F0aW9uIC0gS292ZW8gR2VzdGlvbjwvaDI+XG4gICAgICAgICAgXG4gICAgICAgICAgPHA+Q2UgbWVzc2FnZSBjb25maXJtZSBxdWUgbGUgc2VydmljZSBkZSBjb3VycmllbCBmb25jdGlvbm5lIGNvcnJlY3RlbWVudC48L3A+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICNkNGVkZGE7IHBhZGRpbmc6IDE1cHg7IGJvcmRlci1yYWRpdXM6IDhweDsgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjMjhhNzQ1OyBtYXJnaW46IDIwcHggMDtcIj5cbiAgICAgICAgICAgIDxoMyBzdHlsZT1cIm1hcmdpbi10b3A6IDA7IGNvbG9yOiAjMTU1NzI0O1wiPkTDqXRhaWxzIGR1IHRlc3Q6PC9oMz5cbiAgICAgICAgICAgIDx1bCBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDA7IGNvbG9yOiAjMTU1NzI0O1wiPlxuICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5EYXRlOjwvc3Ryb25nPiAke25ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoJ2ZyLUNBJyl9PC9saT5cbiAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+VHlwZTo8L3N0cm9uZz4gTm90aWZpY2F0aW9uIGfDqW7DqXJhbGU8L2xpPlxuICAgICAgICAgICAgICA8bGk+PHN0cm9uZz5TeXN0w6htZTo8L3N0cm9uZz4gR2VzdGlvbiBpbW1vYmlsacOocmUgUXVlYmVjPC9saT5cbiAgICAgICAgICAgICAgPGxpPjxzdHJvbmc+U3RhdHV0Ojwvc3Ryb25nPiBTZXJ2aWNlIGVtYWlsIG9ww6lyYXRpb25uZWw8L2xpPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8cCBzdHlsZT1cImZvbnQtd2VpZ2h0OiBib2xkOyBjb2xvcjogIzI4YTc0NTtcIj5cbiAgICAgICAgICAgIOKchSBUb3VzIGxlcyB0ZXN0cyBkZSBjb3VycmllbHMgc29udCBtYWludGVuYW50IHRlcm1pbsOpcy5cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBgXG4gICAgICApO1xuXG4gICAgICBleHBlY3QoZW1haWxTZW50KS50b0JlKHRydWUpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==