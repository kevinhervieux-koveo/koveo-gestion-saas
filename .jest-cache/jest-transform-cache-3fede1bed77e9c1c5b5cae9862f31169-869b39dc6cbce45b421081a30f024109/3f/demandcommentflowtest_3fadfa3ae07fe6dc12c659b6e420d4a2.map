{"file":"/home/runner/workspace/tests/integration/demand-comment-flow.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/demand-comment-flow.test.ts"],"sourcesContent":["/**\n * @file Demand Comment Integration Tests\n * @description Comprehensive tests for demand comment API endpoints and workflow\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport { db } from '../../server/db';\nimport { demands, demandComments, users, residences, buildings, organizations, userResidences } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Mock Express app setup\nfunction createTestApp() {\n  const express = require('express');\n  const app = express();\n  \n  app.use(express.json());\n  \n  // Mock session middleware for testing\n  app.use((req: any, res: any, next: any) => {\n    // testUser will be set in beforeEach\n    req.user = { id: 'user-123', role: 'resident' }; \n    next();\n  });\n  \n  const { registerDemandRoutes } = require('../../server/api/demands');\n  registerDemandRoutes(app);\n  \n  return app;\n}\n\ndescribe('Demand Comment Integration Tests', () => {\n  let app: any;\n  let testUser: any;\n  let testDemand: any;\n  let testBuilding: any;\n  let testResidence: any;\n  let testOrganization: any;\n  let authCookie: string;\n\n  beforeEach(async () => {\n    app = createTestApp();\n\n    // Create test organization\n    const orgResult = await db.insert(organizations).values({\n      name: 'Test Organization',\n      type: 'residential',\n      address: '123 Test St',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H1H 1H1',\n      isActive: true,\n    }).returning();\n    testOrganization = orgResult[0];\n\n    // Create test building\n    const buildingResult = await db.insert(buildings).values({\n      name: 'Test Building',\n      address: '456 Test Ave',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H2H 2H2',\n      buildingType: 'condo',\n      organizationId: testOrganization.id,\n      totalUnits: 10,\n      isActive: true,\n    }).returning();\n    testBuilding = buildingResult[0];\n\n    // Create test residence\n    const residenceResult = await db.insert(residences).values({\n      buildingId: testBuilding.id,\n      unitNumber: '101',\n      floor: 1,\n      squareFootage: '1000',\n      bedrooms: 2,\n      bathrooms: '1',\n      balcony: false,\n      isActive: true,\n    }).returning();\n    testResidence = residenceResult[0];\n\n    // Create test user\n    const userResult = await db.insert(users).values({\n      username: 'testuser',\n      firstName: 'Test',\n      lastName: 'User',\n      email: 'test@example.com',\n      password: 'hashed_password',\n      role: 'resident',\n      isActive: true,\n    }).returning();\n    testUser = userResult[0];\n\n    // Associate user with residence\n    await db.insert(userResidences).values({\n      userId: testUser.id,\n      residenceId: testResidence.id,\n      relationshipType: 'resident',\n      startDate: new Date().toISOString().split('T')[0],\n      isActive: true,\n    });\n\n    // Create test demand\n    const demandResult = await db.insert(demands).values({\n      submitterId: testUser.id,\n      type: 'maintenance',\n      description: 'Test demand for comment testing',\n      buildingId: testBuilding.id,\n      residenceId: testResidence.id,\n      status: 'submitted',\n    }).returning();\n    testDemand = demandResult[0];\n\n    authCookie = 'test-session-cookie';\n  });\n\n  afterEach(async () => {\n    // Clean up test data in proper order\n    try {\n      await db.delete(demandComments).where(eq(demandComments.demandId, testDemand.id));\n      await db.delete(demands).where(eq(demands.id, testDemand.id));\n      await db.delete(userResidences).where(eq(userResidences.userId, testUser.id));\n      await db.delete(users).where(eq(users.id, testUser.id));\n      await db.delete(residences).where(eq(residences.id, testResidence.id));\n      await db.delete(buildings).where(eq(buildings.id, testBuilding.id));\n      await db.delete(organizations).where(eq(organizations.id, testOrganization.id));\n    } catch (error) {\n      console.error('Cleanup error:', error);\n    }\n  });\n\n  describe('GET /api/demands/:id/comments', () => {\n    it('should retrieve comments for a demand', async () => {\n      // First create a comment\n      await db.insert(demandComments).values({\n        demandId: testDemand.id,\n        commenterId: testUser.id,\n        commentText: 'Test comment for retrieval',\n        isInternal: false,\n      });\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      const comment = response.body[0];\n      expect(comment.commentText).toBe('Test comment for retrieval');\n      expect(comment.demandId).toBe(testDemand.id);\n      expect(comment.commenterId).toBe(testUser.id);\n      expect(comment.author).toBeDefined();\n      expect(comment.author.email).toBe(testUser.email);\n    });\n\n    it('should return empty array for demand with no comments', async () => {\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body.length).toBe(0);\n    });\n\n    it('should return 404 for non-existent demand', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      \n      await request(app)\n        .get(`/api/demands/${fakeId}/comments`)\n        .set('Cookie', authCookie)\n        .expect(404);\n    });\n\n    it('should return comments in chronological order', async () => {\n      // Create multiple comments with different timestamps\n      const comments = [\n        { text: 'First comment', delay: 0 },\n        { text: 'Second comment', delay: 100 },\n        { text: 'Third comment', delay: 200 },\n      ];\n\n      for (const comment of comments) {\n        await new Promise(resolve => setTimeout(resolve, comment.delay));\n        await db.insert(demandComments).values({\n          demandId: testDemand.id,\n          commenterId: testUser.id,\n          commentText: comment.text,\n          isInternal: false,\n        });\n      }\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body.length).toBe(3);\n      expect(response.body[0].commentText).toBe('First comment');\n      expect(response.body[1].commentText).toBe('Second comment');\n      expect(response.body[2].commentText).toBe('Third comment');\n    });\n\n    it('should include author information in comments', async () => {\n      await db.insert(demandComments).values({\n        demandId: testDemand.id,\n        commenterId: testUser.id,\n        commentText: 'Comment with author info',\n        isInternal: false,\n      });\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      const comment = response.body[0];\n      expect(comment.author).toEqual({\n        id: testUser.id,\n        firstName: testUser.firstName,\n        lastName: testUser.lastName,\n        email: testUser.email,\n      });\n    });\n\n    it('should handle internal vs external comments', async () => {\n      // Create both internal and external comments\n      await db.insert(demandComments).values([\n        {\n          demandId: testDemand.id,\n          commenterId: testUser.id,\n          commentText: 'External comment',\n          isInternal: false,\n        },\n        {\n          demandId: testDemand.id,\n          commenterId: testUser.id,\n          commentText: 'Internal comment',\n          isInternal: true,\n        },\n      ]);\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body.length).toBe(2);\n      \n      const externalComment = response.body.find((c: any) => c.commentText === 'External comment');\n      const internalComment = response.body.find((c: any) => c.commentText === 'Internal comment');\n      \n      expect(externalComment.isInternal).toBe(false);\n      expect(internalComment.isInternal).toBe(true);\n    });\n  });\n\n  describe('POST /api/demands/:id/comments', () => {\n    it('should create a new comment successfully', async () => {\n      const commentData = {\n        commentText: 'This is a new comment on the demand',\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        demandId: testDemand.id,\n        commenterId: testUser.id,\n        commentText: 'This is a new comment on the demand',\n        isInternal: false,\n      });\n\n      expect(response.body.id).toBeDefined();\n      expect(response.body.createdAt).toBeDefined();\n    });\n\n    it('should create comment with optional fields', async () => {\n      const commentData = {\n        commentText: 'Comment with all optional fields',\n        commentType: 'status_update',\n        isInternal: true,\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body.commentText).toBe('Comment with all optional fields');\n      expect(response.body.commentType).toBe('status_update');\n      expect(response.body.isInternal).toBe(true);\n    });\n\n    it('should auto-populate demandId and commenterId', async () => {\n      const commentData = {\n        commentText: 'Comment with auto-populated IDs',\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body.demandId).toBe(testDemand.id);\n      expect(response.body.commenterId).toBe(testUser.id);\n    });\n\n    it('should validate required commentText field', async () => {\n      const commentData = {\n        // Missing commentText\n        commentType: 'update',\n      };\n\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(400);\n    });\n\n    it('should validate commentText length constraints', async () => {\n      // Test empty comment\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send({ commentText: '' })\n        .expect(400);\n\n      // Test too long comment\n      const tooLongComment = 'A'.repeat(1001);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send({ commentText: tooLongComment })\n        .expect(400);\n\n      // Test valid length comment\n      const validComment = 'A'.repeat(1000);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send({ commentText: validComment })\n        .expect(201);\n    });\n\n    it('should return 404 for non-existent demand', async () => {\n      const fakeId = '123e4567-e89b-12d3-a456-426614174000';\n      const commentData = {\n        commentText: 'Comment on non-existent demand',\n      };\n\n      await request(app)\n        .post(`/api/demands/${fakeId}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(404);\n    });\n\n    it('should handle French characters and special symbols', async () => {\n      const commentData = {\n        commentText: 'Commentaire en français avec caractères spéciaux: éàùç! 🏠 @#$%^&*()',\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body.commentText).toBe(commentData.commentText);\n    });\n\n    it('should handle multiline comments', async () => {\n      const multilineComment = `This is a multiline comment.\n      \n      It contains multiple paragraphs.\n      \n      End of comment.`;\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send({ commentText: multilineComment })\n        .expect(201);\n\n      expect(response.body.commentText).toBe(multilineComment);\n    });\n\n    it('should create internal comments for authorized users', async () => {\n      const commentData = {\n        commentText: 'This is an internal comment',\n        isInternal: true,\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body.isInternal).toBe(true);\n    });\n\n    it('should handle different comment types', async () => {\n      const commentTypes = ['update', 'question', 'answer', 'status_change'];\n      \n      for (const type of commentTypes) {\n        const response = await request(app)\n          .post(`/api/demands/${testDemand.id}/comments`)\n          .set('Cookie', authCookie)\n          .send({\n            commentText: `Comment of type ${type}`,\n            commentType: type,\n          })\n          .expect(201);\n\n        expect(response.body.commentType).toBe(type);\n      }\n    });\n\n    it('should validate UUID format in URL parameter', async () => {\n      const invalidId = 'invalid-uuid';\n      const commentData = {\n        commentText: 'Valid comment text',\n      };\n\n      // This might return 400 or 404 depending on route validation\n      const response = await request(app)\n        .post(`/api/demands/${invalidId}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData);\n\n      expect([400, 404]).toContain(response.status);\n    });\n  });\n\n  describe('Comment Workflow Integration', () => {\n    it('should maintain comment thread integrity', async () => {\n      // Create multiple comments and verify they stay linked to the demand\n      const comments = [\n        'Initial comment',\n        'Follow-up comment',\n        'Final comment',\n      ];\n\n      for (const commentText of comments) {\n        await request(app)\n          .post(`/api/demands/${testDemand.id}/comments`)\n          .set('Cookie', authCookie)\n          .send({ commentText })\n          .expect(201);\n      }\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body.length).toBe(3);\n      response.body.forEach((comment: any) => {\n        expect(comment.demandId).toBe(testDemand.id);\n      });\n    });\n\n    it('should handle concurrent comment creation', async () => {\n      // Create multiple comments simultaneously\n      const commentPromises = Array.from({ length: 3 }, (_, i) =>\n        request(app)\n          .post(`/api/demands/${testDemand.id}/comments`)\n          .set('Cookie', authCookie)\n          .send({ commentText: `Concurrent comment ${i + 1}` })\n      );\n\n      const responses = await Promise.all(commentPromises);\n      responses.forEach(response => {\n        expect(response.status).toBe(201);\n        expect(response.body.demandId).toBe(testDemand.id);\n      });\n\n      // Verify all comments were created\n      const getResponse = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(getResponse.body.length).toBe(3);\n    });\n\n    it('should handle comment creation and retrieval workflow', async () => {\n      // Step 1: Create initial comment\n      const createResponse = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send({ commentText: 'Workflow test comment' })\n        .expect(201);\n\n      const commentId = createResponse.body.id;\n\n      // Step 2: Retrieve comments and verify the new comment is included\n      const getResponse = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      const createdComment = getResponse.body.find((c: any) => c.id === commentId);\n      expect(createdComment).toBeDefined();\n      expect(createdComment.commentText).toBe('Workflow test comment');\n    });\n\n    it('should preserve comment order across multiple operations', async () => {\n      const commentTexts = [\n        'First comment in sequence',\n        'Second comment in sequence',\n        'Third comment in sequence',\n      ];\n\n      // Create comments with small delays to ensure ordering\n      for (const text of commentTexts) {\n        await request(app)\n          .post(`/api/demands/${testDemand.id}/comments`)\n          .set('Cookie', authCookie)\n          .send({ commentText: text })\n          .expect(201);\n        \n        // Small delay to ensure different timestamps\n        await new Promise(resolve => setTimeout(resolve, 50));\n      }\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body.length).toBe(3);\n      commentTexts.forEach((text, index) => {\n        expect(response.body[index].commentText).toBe(text);\n      });\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle database connection errors gracefully', async () => {\n      // This test would require mocking database failures\n      // For now, we test general error handling patterns\n      const commentData = {\n        commentText: 'Test comment for error handling',\n      };\n\n      // Normal case should work\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send(commentData)\n        .expect(201);\n    });\n\n    it('should handle malformed JSON in request body', async () => {\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .set('Content-Type', 'application/json')\n        .send('{ invalid json }');\n\n      expect([400, 500]).toContain(response.status);\n    });\n\n    it('should handle missing Content-Type header', async () => {\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send('commentText=Test comment');\n\n      // Should handle this gracefully\n      expect([200, 201, 400]).toContain(response.status);\n    });\n\n    it('should validate comment length at boundary conditions', async () => {\n      // Test exact maximum length\n      const maxLengthComment = 'A'.repeat(1000);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send({ commentText: maxLengthComment })\n        .expect(201);\n\n      // Test one character over maximum\n      const overLimitComment = 'A'.repeat(1001);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .set('Cookie', authCookie)\n        .send({ commentText: overLimitComment })\n        .expect(400);\n    });\n  });\n});"],"version":3}