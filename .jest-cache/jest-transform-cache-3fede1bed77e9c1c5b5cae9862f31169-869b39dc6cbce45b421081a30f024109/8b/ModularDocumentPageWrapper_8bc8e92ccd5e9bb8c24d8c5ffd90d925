c4abe9cab5be190c1aa84465d176ca6e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModularDocumentPageWrapper;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const lucide_react_1 = require("lucide-react");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const select_1 = require("@/components/ui/select");
const queryClient_1 = require("@/lib/queryClient");
const use_language_1 = require("@/hooks/use-language");
const document_management_1 = require("@/components/document-management");
// Document categories for filtering
const DOCUMENT_CATEGORIES = [
    { value: 'all', label: 'All Categories' },
    { value: 'bylaw', label: 'Bylaws' },
    { value: 'financial', label: 'Financial' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'legal', label: 'Legal' },
    { value: 'meeting_minutes', label: 'Meeting Minutes' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'contracts', label: 'Contracts' },
    { value: 'permits', label: 'Permits' },
    { value: 'inspection', label: 'Inspection' },
    { value: 'other', label: 'Other' },
];
function ModularDocumentPageWrapper({ type, userRole, backPath, backLabel, entityIdParam, }) {
    const [, navigate] = (0, wouter_1.useLocation)();
    const params = (0, wouter_1.useParams)();
    const { t } = (0, use_language_1.useLanguage)();
    // State for modals and interactions
    const [isViewModalOpen, setIsViewModalOpen] = (0, react_1.useState)(false);
    const [isEditModalOpen, setIsEditModalOpen] = (0, react_1.useState)(false);
    const [selectedDocumentId, setSelectedDocumentId] = (0, react_1.useState)(null);
    const [isCreating, setIsCreating] = (0, react_1.useState)(false);
    // State for filtering and search
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [selectedCategory, setSelectedCategory] = (0, react_1.useState)('all');
    const [viewMode, setViewMode] = (0, react_1.useState)('grid');
    // Get entityId from URL (both path param and query param)
    const urlParams = new URLSearchParams(window.location.search);
    const entityId = params[entityIdParam] || urlParams.get(entityIdParam);
    // Get current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Get entity info based on type
    const entityApiPath = type === 'building' ? '/api/manager/buildings' : '/api/residences';
    const { data: entity, isError: entityError, error } = (0, react_query_1.useQuery)({
        queryKey: [entityApiPath, entityId],
        queryFn: async () => {
            if (type === 'residence') {
                const response = await fetch(`/api/residences/${entityId}`, {
                    credentials: 'include',
                });
                if (!response.ok) {
                    if (response.status === 404) {
                        throw new Error('ENTITY_NOT_FOUND');
                    }
                    throw new Error(`Failed to fetch ${type}`);
                }
                return response.json();
            }
            else {
                return (0, queryClient_1.apiRequest)('GET', `${entityApiPath}/${entityId}`);
            }
        },
        enabled: !!entityId,
        retry: false, // Don't retry on 404s
    });
    // Fetch documents for this entity
    const { data: documents = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/documents', type, entityId],
        queryFn: () => {
            const param = type === 'building' ? 'buildingId' : 'residenceId';
            return (0, queryClient_1.apiRequest)('GET', `/api/documents?${param}=${entityId}`);
        },
        enabled: !!entityId,
    });
    // Determine permissions based on user role and type
    const isUserTenant = user?.role === 'tenant';
    const isManager = user?.role === 'manager' || user?.role === 'admin';
    const userPermissions = userRole === 'manager'
        ? {
            canView: true,
            canDownload: true,
            canEdit: isManager,
            canDelete: isManager,
            canCreate: isManager,
        }
        : {
            canView: true,
            canDownload: !isUserTenant,
            canEdit: !isUserTenant,
            canDelete: !isUserTenant,
            canCreate: !isUserTenant,
        };
    // Filter and search documents
    const filteredDocuments = Array.isArray(documents) ? documents.filter(doc => {
        const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            doc.description?.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = selectedCategory === 'all' || doc.category === selectedCategory;
        return matchesSearch && matchesCategory;
    }) : [];
    // Generate entity name based on type
    const entityName = type === 'residence'
        ? (entity?.unitNumber || entity?.unit_number ? `Unit ${entity.unitNumber || entity.unit_number}` : 'Residence')
        : entity?.name;
    const defaultBackLabel = backLabel || (type === 'building' ? 'Back to Buildings' : t('backToResidences'));
    // Handle document interactions
    const handleDocumentView = (documentId) => {
        setSelectedDocumentId(documentId);
        setIsViewModalOpen(true);
    };
    const handleDocumentEdit = (documentId) => {
        setSelectedDocumentId(documentId);
        setIsEditModalOpen(true);
        setIsViewModalOpen(false);
    };
    const handleCreateDocument = () => {
        setSelectedDocumentId(null);
        setIsCreating(true);
        setIsEditModalOpen(true);
    };
    const handleDocumentSuccess = (documentId, action) => {
        console.log(`Document ${action}:`, documentId);
        setIsEditModalOpen(false);
        setIsViewModalOpen(false);
        setIsCreating(false);
        setSelectedDocumentId(null);
    };
    const clearFilters = () => {
        setSearchTerm('');
        setSelectedCategory('all');
    };
    if (!entityId) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex flex-col overflow-hidden", children: (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsxs)("p", { className: "text-gray-500 mb-4", children: [type, " ID is required"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: () => navigate(backPath), "data-testid": "button-back-to-list", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), defaultBackLabel] })] }) }) }));
    }
    // Handle entity not found (specific to residence pages that had this logic)
    if (entityError && error?.message === 'ENTITY_NOT_FOUND' && type === 'residence') {
        return ((0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex flex-col overflow-hidden", children: (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center max-w-md", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-semibold mb-4", children: "Residence Not Found" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-gray-500 mb-4", children: ["The residence ID \"", entityId, "\" doesn't exist in the development database."] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-400 mb-6", children: "This might be a production database ID. Please use a valid development residence ID." }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "default", onClick: () => navigate(backPath), "data-testid": "button-back-to-list", className: "w-full", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), backLabel || 'Back to Residences'] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: () => navigate('/residents/residences/e27ac924-8120-4904-a791-d1e9db544d58/documents'), "data-testid": "button-go-to-valid-residence", className: "w-full", children: "Go to Unit 101 (Test Residence)" })] })] }) }) }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden", children: [(0, jsx_runtime_1.jsx)("div", { className: "p-6 pb-0", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between mb-6", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: () => navigate(backPath), "data-testid": "button-back", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), defaultBackLabel] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-right", children: [(0, jsx_runtime_1.jsxs)("h1", { className: "text-2xl font-semibold", children: [type === 'building' ? (0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: "w-6 h-6 inline mr-2" }) : (0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: "w-6 h-6 inline mr-2" }), entityName] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-muted-foreground", children: type === 'building' ? 'Building Documents' : 'Residence Documents' })] })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 overflow-auto px-6 pb-6", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-7xl mx-auto space-y-6", children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: "w-5 h-5" }), "Search & Filters"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium", children: "Search" }), (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Search documents...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "pl-10", "data-testid": "input-search-documents" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium", children: "Category" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedCategory, onValueChange: setSelectedCategory, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-category-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: DOCUMENT_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium", children: "View" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: viewMode === 'grid' ? 'default' : 'outline', size: "sm", onClick: () => setViewMode('grid'), className: "flex-1", "data-testid": "button-grid-view", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Grid, { className: "w-4 h-4" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: viewMode === 'list' ? 'default' : 'outline', size: "sm", onClick: () => setViewMode('list'), className: "flex-1", "data-testid": "button-list-view", children: (0, jsx_runtime_1.jsx)(lucide_react_1.List, { className: "w-4 h-4" }) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium invisible", children: "Actions" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [userPermissions.canCreate && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCreateDocument, className: "flex-1", "data-testid": "button-create-document", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Create"] })), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: clearFilters, "data-testid": "button-clear-filters", children: "Clear" })] })] })] }) })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex justify-between items-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)("span", { className: "text-sm text-muted-foreground", children: [filteredDocuments.length, " document", filteredDocuments.length !== 1 ? 's' : '', " found"] }), (searchTerm || selectedCategory !== 'all') && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", children: "Filtered" }))] }) }), isLoading ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Loading documents..." })] }) })) : filteredDocuments.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "p-8 text-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "w-16 h-16 mx-auto mb-4 bg-muted rounded-full flex items-center justify-center", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: "w-8 h-8 text-muted-foreground" }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-600 mb-2", children: "No Documents Found" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500 mb-4", children: searchTerm || selectedCategory !== 'all'
                                                ? "No documents match your current filters. Try adjusting your search criteria."
                                                : `No documents have been uploaded for this ${type} yet. Create your first document to get started.` }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2 justify-center", children: [(searchTerm || selectedCategory !== 'all') && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", onClick: clearFilters, children: "Clear Filters" })), userPermissions.canCreate && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCreateDocument, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Create Document"] }))] })] }) }) })) : ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "p-6", children: (0, jsx_runtime_1.jsx)("div", { className: `grid gap-4 ${viewMode === 'grid'
                                        ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
                                        : 'grid-cols-1'}`, children: filteredDocuments.map((document) => ((0, jsx_runtime_1.jsx)(document_management_1.DocumentCard, { documentId: document.id, title: document.name, documentType: document.category, createdAt: document.createdAt, onViewClick: handleDocumentView, onEditClick: userPermissions.canEdit ? handleDocumentEdit : undefined, compact: viewMode === 'list' }, document.id))) }) }) })), (0, jsx_runtime_1.jsx)(document_management_1.DocumentViewModal, { documentId: selectedDocumentId, userPermissions: userPermissions, onEditClick: handleDocumentEdit, isOpen: isViewModalOpen, onOpenChange: setIsViewModalOpen }), (0, jsx_runtime_1.jsx)(document_management_1.DocumentEditModal, { documentId: isCreating ? undefined : selectedDocumentId, entityType: type, entityId: entityId, isOpen: isEditModalOpen, onOpenChange: setIsEditModalOpen, onSuccess: handleDocumentSuccess })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,