d975c7af0ac42fe33b66af5243f0fa9a
"use strict";
/**
 * Test suite for create-demo-environment.ts script
 *
 * Validates the demo environment creation script's structure, imports,
 * and basic functionality to prevent regressions during CI/CD checks.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
(0, globals_1.describe)('create-demo-environment.ts', () => {
    (0, globals_1.test)('should be importable without errors', async () => {
        // This test ensures the script file can be imported successfully
        // and doesn't have any immediate syntax or import errors
        let importError = null;
        try {
            // Dynamic import to avoid executing the script during testing
            const scriptModule = await Promise.resolve().then(() => __importStar(require('../../scripts/create-demo-environment.ts')));
            (0, globals_1.expect)(scriptModule).toBeDefined();
            (0, globals_1.expect)(typeof scriptModule.default).toBe('function');
        }
        catch (error) {
            importError = error;
        }
        (0, globals_1.expect)(importError).toBeNull();
    });
    (0, globals_1.test)('should have required CLI argument validation structure', async () => {
        // Test that the script has proper argument validation
        // We can't easily test the CLI parsing without mocking process.argv
        // But we can ensure the script structure is intact
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for required CLI argument handling
        (0, globals_1.expect)(scriptContent).toContain('--type');
        (0, globals_1.expect)(scriptContent).toContain('--name');
        (0, globals_1.expect)(scriptContent).toContain('demo');
        (0, globals_1.expect)(scriptContent).toContain('production');
    });
    (0, globals_1.test)('should have comprehensive database schema imports and Unicode fixes', async () => {
        // Ensure all required schema imports are present
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for database and schema imports
        (0, globals_1.expect)(scriptContent).toContain('@neondatabase/serverless');
        (0, globals_1.expect)(scriptContent).toContain('drizzle-orm/neon-serverless');
        (0, globals_1.expect)(scriptContent).toContain("from '../shared/schema'");
        (0, globals_1.expect)(scriptContent).toContain('@faker-js/faker');
        (0, globals_1.expect)(scriptContent).toContain('bcryptjs');
        // Check for Unicode encoding fixes
        (0, globals_1.expect)(scriptContent).not.toContain('✓'); // No Unicode checkmarks
        (0, globals_1.expect)(scriptContent).not.toContain('⚠️'); // No Unicode warning symbols
        (0, globals_1.expect)(scriptContent).toContain('+ Electrical systems'); // ASCII alternatives
        (0, globals_1.expect)(scriptContent).toContain('================================================================'); // ASCII separators
    });
    (0, globals_1.test)('should have main seeding functions defined', async () => {
        // Verify that all major seeding functions exist
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for core functions
        (0, globals_1.expect)(scriptContent).toContain('upsertOrganization');
        (0, globals_1.expect)(scriptContent).toContain('seedBuildings');
        (0, globals_1.expect)(scriptContent).toContain('seedResidences');
        (0, globals_1.expect)(scriptContent).toContain('seedCommonSpaces');
        (0, globals_1.expect)(scriptContent).toContain('seedUsers');
        (0, globals_1.expect)(scriptContent).toContain('seedBookings');
        (0, globals_1.expect)(scriptContent).toContain('seedMaintenanceRequests');
        (0, globals_1.expect)(scriptContent).toContain('seedBills');
    });
    (0, globals_1.test)('should have Quebec-specific data generation', async () => {
        // Ensure Quebec compliance and localization
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for Quebec-specific elements
        (0, globals_1.expect)(scriptContent).toContain('Quebec');
        (0, globals_1.expect)(scriptContent).toContain('montreal');
        (0, globals_1.expect)(scriptContent).toContain("province: 'QC'");
        (0, globals_1.expect)(scriptContent).toContain('generateQuebecPostalCode');
        (0, globals_1.expect)(scriptContent).toContain('generateQuebecPhone');
    });
    (0, globals_1.test)('should have proper role-based user creation logic', async () => {
        // Verify demo vs production role handling
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for role differentiation
        (0, globals_1.expect)(scriptContent).toContain('demo_manager');
        (0, globals_1.expect)(scriptContent).toContain('demo_resident');
        (0, globals_1.expect)(scriptContent).toContain('manager');
        (0, globals_1.expect)(scriptContent).toContain('resident');
        (0, globals_1.expect)(scriptContent).toMatch(/organizationType.*demo.*production/);
    });
    (0, globals_1.test)('should have comprehensive error handling', async () => {
        // Ensure proper error handling throughout
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for error handling patterns
        (0, globals_1.expect)(scriptContent).toContain('try {');
        (0, globals_1.expect)(scriptContent).toContain('} catch');
        (0, globals_1.expect)(scriptContent).toContain('console.error');
        (0, globals_1.expect)(scriptContent).toContain('throw error');
    });
    (0, globals_1.test)('should have proper database connection management', async () => {
        // Verify database connection setup and cleanup
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for database connection patterns
        (0, globals_1.expect)(scriptContent).toContain('DATABASE_URL');
        (0, globals_1.expect)(scriptContent).toContain('new Pool');
        (0, globals_1.expect)(scriptContent).toContain('drizzle');
        (0, globals_1.expect)(scriptContent).toContain('pool.end()');
    });
    (0, globals_1.test)('should have realistic data generation with proper categories and file paths', async () => {
        // Ensure realistic data categories are defined
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for data categories
        (0, globals_1.expect)(scriptContent).toContain('MAINTENANCE_CATEGORIES');
        (0, globals_1.expect)(scriptContent).toContain('BILL_CATEGORIES');
        (0, globals_1.expect)(scriptContent).toContain('COMMON_SPACE_TYPES');
        (0, globals_1.expect)(scriptContent).toContain('isBookable');
        // Check for realistic data patterns
        (0, globals_1.expect)(scriptContent).toContain('Plumbing');
        (0, globals_1.expect)(scriptContent).toContain('Electrical');
        (0, globals_1.expect)(scriptContent).toContain('HVAC');
        (0, globals_1.expect)(scriptContent).toContain('insurance');
        (0, globals_1.expect)(scriptContent).toContain('maintenance');
        // Check for proper file path structure (no uploads prefix)
        (0, globals_1.expect)(scriptContent).toContain('writeDocumentFile(filePath');
        (0, globals_1.expect)(scriptContent).not.toContain('writeDocumentFile(`uploads/${filePath}`');
        (0, globals_1.expect)(scriptContent).toContain('bills/');
        (0, globals_1.expect)(scriptContent).toContain('residences/');
        (0, globals_1.expect)(scriptContent).toContain('buildings/');
    });
    (0, globals_1.test)('should comply with Law 25 (no admin role creation)', async () => {
        // Ensure the script doesn't create admin users
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // The script should NOT contain admin role creation
        (0, globals_1.expect)(scriptContent).not.toContain("role: 'admin'");
        (0, globals_1.expect)(scriptContent).not.toContain("demo_admin");
        // Should contain the constraint comment
        (0, globals_1.expect)(scriptContent).toContain('NOT create any users with the');
    });
    (0, globals_1.test)('should have proper configuration constants', async () => {
        // Verify configuration constants are defined
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for configuration constants
        (0, globals_1.expect)(scriptContent).toContain('BUILDINGS_PER_ORG');
        (0, globals_1.expect)(scriptContent).toContain('MIN_RESIDENCES_PER_BUILDING');
        (0, globals_1.expect)(scriptContent).toContain('MAX_RESIDENCES_PER_BUILDING');
        (0, globals_1.expect)(scriptContent).toContain('COMMON_SPACES_PER_BUILDING');
        (0, globals_1.expect)(scriptContent).toContain('BOOKINGS_PER_RESERVABLE_SPACE');
        (0, globals_1.expect)(scriptContent).toContain('DEMANDS_PER_RESIDENT');
        (0, globals_1.expect)(scriptContent).toContain('BILLS_PER_BUILDING_PER_MONTH');
    });
    (0, globals_1.test)('should have comprehensive logging and progress tracking', async () => {
        // Ensure good user feedback through logging
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for progress logging
        (0, globals_1.expect)(scriptContent).toContain('console.log');
        (0, globals_1.expect)(scriptContent).toContain('Step 1:');
        (0, globals_1.expect)(scriptContent).toContain('Step 2:');
        (0, globals_1.expect)(scriptContent).toContain('📊 Created');
        (0, globals_1.expect)(scriptContent).toContain('✅');
        (0, globals_1.expect)(scriptContent).toContain('Summary');
    });
});
// Additional tests for specific functionality improvements
(0, globals_1.describe)('create-demo-environment.ts - Functionality Tests', () => {
    (0, globals_1.test)('should ensure manager organization associations', async () => {
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for manager organization association logic
        (0, globals_1.expect)(scriptContent).toContain('critical for manager building access');
        (0, globals_1.expect)(scriptContent).toContain('userOrganizations');
        (0, globals_1.expect)(scriptContent).toContain('organizationId');
    });
    (0, globals_1.test)('should separate bill documents from financial documents', async () => {
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check for proper document categorization
        (0, globals_1.expect)(scriptContent).toContain('documentTypeMapping');
        (0, globals_1.expect)(scriptContent).toContain('utilities');
        (0, globals_1.expect)(scriptContent).toContain('maintenance');
        (0, globals_1.expect)(scriptContent).toContain('loan');
        (0, globals_1.expect)(scriptContent).toContain('bank_statement');
        (0, globals_1.expect)(scriptContent).toContain('financial_report');
        // Bills should be attached to bills, financial docs to buildings/residences
        (0, globals_1.expect)(scriptContent).toContain('attachedToType: \'bill\'');
        (0, globals_1.expect)(scriptContent).toContain('buildingId:');
    });
    (0, globals_1.test)('should use ASCII-safe characters in all generated content', async () => {
        const fs = require('fs');
        const path = require('path');
        const scriptPath = path.join(__dirname, 'create-demo-environment.ts');
        const scriptContent = fs.readFileSync(scriptPath, 'utf-8');
        // Check that problematic Unicode characters are replaced
        const unicodeCheckmarks = /✓/g.test(scriptContent);
        const unicodeWarnings = /⚠️/g.test(scriptContent);
        (0, globals_1.expect)(unicodeCheckmarks).toBe(false);
        (0, globals_1.expect)(unicodeWarnings).toBe(false);
        // Should use ASCII alternatives instead
        (0, globals_1.expect)(scriptContent).toContain('+ Electrical systems');
        (0, globals_1.expect)(scriptContent).toContain('* Minor paint touch-up');
        (0, globals_1.expect)(scriptContent).toContain('- On Time');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,