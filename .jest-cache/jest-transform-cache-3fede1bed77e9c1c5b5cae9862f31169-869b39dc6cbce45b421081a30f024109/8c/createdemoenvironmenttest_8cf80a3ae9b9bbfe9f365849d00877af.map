{"file":"/home/runner/workspace/tests/integration/create-demo-environment.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/create-demo-environment.test.ts"],"sourcesContent":["/**\n * Test suite for create-demo-environment.ts script\n * \n * Validates the demo environment creation script's structure, imports,\n * and basic functionality to prevent regressions during CI/CD checks.\n */\n\nimport { describe, test, expect, jest } from '@jest/globals';\n\ndescribe('create-demo-environment.ts', () => {\n  test('should be importable without errors', async () => {\n    // This test ensures the script file can be imported successfully\n    // and doesn't have any immediate syntax or import errors\n    \n    let importError: Error | null = null;\n    \n    try {\n      // Dynamic import to avoid executing the script during testing\n      const scriptModule = await import('../../scripts/create-demo-environment.ts');\n      expect(scriptModule).toBeDefined();\n      expect(typeof scriptModule.default).toBe('function');\n    } catch (error) {\n      importError = error as Error;\n    }\n    \n    expect(importError).toBeNull();\n  });\n\n  test('should have required CLI argument validation structure', async () => {\n    // Test that the script has proper argument validation\n    // We can't easily test the CLI parsing without mocking process.argv\n    // But we can ensure the script structure is intact\n    \n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for required CLI argument handling\n    expect(scriptContent).toContain('--type');\n    expect(scriptContent).toContain('--name');\n    expect(scriptContent).toContain('demo');\n    expect(scriptContent).toContain('production');\n  });\n\n  test('should have comprehensive database schema imports and Unicode fixes', async () => {\n    // Ensure all required schema imports are present\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for database and schema imports\n    expect(scriptContent).toContain('@neondatabase/serverless');\n    expect(scriptContent).toContain('drizzle-orm/neon-serverless');\n    expect(scriptContent).toContain(\"from '../shared/schema'\");\n    expect(scriptContent).toContain('@faker-js/faker');\n    expect(scriptContent).toContain('bcryptjs');\n    \n    // Check for Unicode encoding fixes\n    expect(scriptContent).not.toContain('✓'); // No Unicode checkmarks\n    expect(scriptContent).not.toContain('⚠️'); // No Unicode warning symbols\n    expect(scriptContent).toContain('+ Electrical systems'); // ASCII alternatives\n    expect(scriptContent).toContain('================================================================'); // ASCII separators\n  });\n\n  test('should have main seeding functions defined', async () => {\n    // Verify that all major seeding functions exist\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for core functions\n    expect(scriptContent).toContain('upsertOrganization');\n    expect(scriptContent).toContain('seedBuildings');\n    expect(scriptContent).toContain('seedResidences');\n    expect(scriptContent).toContain('seedCommonSpaces');\n    expect(scriptContent).toContain('seedUsers');\n    expect(scriptContent).toContain('seedBookings');\n    expect(scriptContent).toContain('seedMaintenanceRequests');\n    expect(scriptContent).toContain('seedBills');\n  });\n\n  test('should have Quebec-specific data generation', async () => {\n    // Ensure Quebec compliance and localization\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for Quebec-specific elements\n    expect(scriptContent).toContain('Quebec');\n    expect(scriptContent).toContain('montreal');\n    expect(scriptContent).toContain(\"province: 'QC'\");\n    expect(scriptContent).toContain('generateQuebecPostalCode');\n    expect(scriptContent).toContain('generateQuebecPhone');\n  });\n\n  test('should have proper role-based user creation logic', async () => {\n    // Verify demo vs production role handling\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for role differentiation\n    expect(scriptContent).toContain('demo_manager');\n    expect(scriptContent).toContain('demo_resident');\n    expect(scriptContent).toContain('manager');\n    expect(scriptContent).toContain('resident');\n    expect(scriptContent).toMatch(/organizationType.*demo.*production/);\n  });\n\n  test('should have comprehensive error handling', async () => {\n    // Ensure proper error handling throughout\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for error handling patterns\n    expect(scriptContent).toContain('try {');\n    expect(scriptContent).toContain('} catch');\n    expect(scriptContent).toContain('console.error');\n    expect(scriptContent).toContain('throw error');\n  });\n\n  test('should have proper database connection management', async () => {\n    // Verify database connection setup and cleanup\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for database connection patterns\n    expect(scriptContent).toContain('DATABASE_URL');\n    expect(scriptContent).toContain('new Pool');\n    expect(scriptContent).toContain('drizzle');\n    expect(scriptContent).toContain('pool.end()');\n  });\n\n  test('should have realistic data generation with proper categories and file paths', async () => {\n    // Ensure realistic data categories are defined\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for data categories\n    expect(scriptContent).toContain('MAINTENANCE_CATEGORIES');\n    expect(scriptContent).toContain('BILL_CATEGORIES');\n    expect(scriptContent).toContain('COMMON_SPACE_TYPES');\n    expect(scriptContent).toContain('isBookable');\n    \n    // Check for realistic data patterns\n    expect(scriptContent).toContain('Plumbing');\n    expect(scriptContent).toContain('Electrical');\n    expect(scriptContent).toContain('HVAC');\n    expect(scriptContent).toContain('insurance');\n    expect(scriptContent).toContain('maintenance');\n    \n    // Check for proper file path structure (no uploads prefix)\n    expect(scriptContent).toContain('writeDocumentFile(filePath');\n    expect(scriptContent).not.toContain('writeDocumentFile(`uploads/${filePath}`');\n    expect(scriptContent).toContain('bills/');\n    expect(scriptContent).toContain('residences/');\n    expect(scriptContent).toContain('buildings/');\n  });\n\n  test('should comply with Law 25 (no admin role creation)', async () => {\n    // Ensure the script doesn't create admin users\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // The script should NOT contain admin role creation\n    expect(scriptContent).not.toContain(\"role: 'admin'\");\n    expect(scriptContent).not.toContain(\"demo_admin\");\n    \n    // Should contain the constraint comment\n    expect(scriptContent).toContain('NOT create any users with the');\n  });\n\n  test('should have proper configuration constants', async () => {\n    // Verify configuration constants are defined\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for configuration constants\n    expect(scriptContent).toContain('BUILDINGS_PER_ORG');\n    expect(scriptContent).toContain('MIN_RESIDENCES_PER_BUILDING');\n    expect(scriptContent).toContain('MAX_RESIDENCES_PER_BUILDING');\n    expect(scriptContent).toContain('COMMON_SPACES_PER_BUILDING');\n    expect(scriptContent).toContain('BOOKINGS_PER_RESERVABLE_SPACE');\n    expect(scriptContent).toContain('DEMANDS_PER_RESIDENT');\n    expect(scriptContent).toContain('BILLS_PER_BUILDING_PER_MONTH');\n  });\n\n  test('should have comprehensive logging and progress tracking', async () => {\n    // Ensure good user feedback through logging\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for progress logging\n    expect(scriptContent).toContain('console.log');\n    expect(scriptContent).toContain('Step 1:');\n    expect(scriptContent).toContain('Step 2:');\n    expect(scriptContent).toContain('📊 Created');\n    expect(scriptContent).toContain('✅');\n    expect(scriptContent).toContain('Summary');\n  });\n});\n\n// Additional tests for specific functionality improvements\ndescribe('create-demo-environment.ts - Functionality Tests', () => {\n  test('should ensure manager organization associations', async () => {\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for manager organization association logic\n    expect(scriptContent).toContain('critical for manager building access');\n    expect(scriptContent).toContain('userOrganizations');\n    expect(scriptContent).toContain('organizationId');\n  });\n\n  test('should separate bill documents from financial documents', async () => {\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check for proper document categorization\n    expect(scriptContent).toContain('documentTypeMapping');\n    expect(scriptContent).toContain('utilities');\n    expect(scriptContent).toContain('maintenance');\n    expect(scriptContent).toContain('loan');\n    expect(scriptContent).toContain('bank_statement');\n    expect(scriptContent).toContain('financial_report');\n    \n    // Bills should be attached to bills, financial docs to buildings/residences\n    expect(scriptContent).toContain('attachedToType: \\'bill\\'');\n    expect(scriptContent).toContain('buildingId:');\n  });\n\n  test('should use ASCII-safe characters in all generated content', async () => {\n    const fs = require('fs');\n    const path = require('path');\n    \n    const scriptPath = path.join(__dirname, 'create-demo-environment.ts');\n    const scriptContent = fs.readFileSync(scriptPath, 'utf-8');\n    \n    // Check that problematic Unicode characters are replaced\n    const unicodeCheckmarks = /✓/g.test(scriptContent);\n    const unicodeWarnings = /⚠️/g.test(scriptContent);\n    \n    expect(unicodeCheckmarks).toBe(false);\n    expect(unicodeWarnings).toBe(false);\n    \n    // Should use ASCII alternatives instead\n    expect(scriptContent).toContain('+ Electrical systems');\n    expect(scriptContent).toContain('* Minor paint touch-up');\n    expect(scriptContent).toContain('- On Time');\n  });\n});\n\nexport {};"],"version":3}