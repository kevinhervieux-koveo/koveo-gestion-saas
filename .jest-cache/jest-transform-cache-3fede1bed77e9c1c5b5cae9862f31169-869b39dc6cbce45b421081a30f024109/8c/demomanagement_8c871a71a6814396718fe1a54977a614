723869a5b3c2c2bacd2eb388741ddd81
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDemoManagementRoutes = registerDemoManagementRoutes;
const demo_management_service_1 = __importDefault(require("../services/demo-management-service"));
const auth_1 = require("../auth");
/**
 * Demo Management API Routes.
 *
 * Provides API endpoints for managing demo organizations in production.
 * These endpoints allow for health checks, initialization, and maintenance.
 */
/**
 * Register demo management routes.
 * @param app
 */
function registerDemoManagementRoutes(app) {
    /**
     * GET /api/demo/health
     * Check the health status of demo organizations.
     * Public endpoint for monitoring.
     */
    app.get('/api/demo/health', async (req, res) => {
        try {
            const health = await demo_management_service_1.default.checkDemoHealth();
            res.status(health.healthy ? 200 : 503).json({
                success: true,
                data: health,
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: 'Demo health check failed',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/demo/users
     * Get demo users for login page.
     * Public endpoint for demo mode.
     */
    app.get('/api/demo/users', async (req, res) => {
        try {
            // Import database connection
            const { db } = await Promise.resolve().then(() => __importStar(require('../db')));
            const { eq, and, inArray } = await Promise.resolve().then(() => __importStar(require('drizzle-orm')));
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            // Get demo organizations (by type instead of name)
            const demoOrgs = await db.query.organizations.findMany({
                where: eq(schema.organizations.type, 'demo'),
            });
            if (demoOrgs.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'No demo organizations found',
                });
            }
            // Get demo users with demo roles
            const demoUsers = await db.query.users.findMany({
                where: and(eq(schema.users.isActive, true), inArray(schema.users.role, ['demo_manager', 'demo_tenant', 'demo_resident'])),
                columns: {
                    id: true,
                    email: true,
                    firstName: true,
                    lastName: true,
                    role: true,
                },
            });
            // Group users by role for frontend consumption
            const usersByRole = {
                demo_manager: demoUsers.filter(user => user.role === 'demo_manager'),
                demo_tenant: demoUsers.filter(user => user.role === 'demo_tenant'),
                demo_resident: demoUsers.filter(user => user.role === 'demo_resident'),
            };
            res.json({
                success: true,
                data: usersByRole,
            });
        }
        catch (error) {
            console.error('❌ Error fetching demo users:', error);
            res.status(500).json({
                success: false,
                message: 'Failed to fetch demo users',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/demo/status
     * Get detailed status and information about demo organizations.
     * Requires authentication.
     */
    app.get('/api/demo/status', auth_1.requireAuth, async (req, res) => {
        try {
            const info = await demo_management_service_1.default.getDemoOrganizationInfo();
            res.json({
                success: true,
                data: info,
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: 'Failed to get demo status',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * POST /api/demo/ensure
     * Ensure demo organizations exist and are properly configured.
     * Requires admin role.
     */
    app.post('/api/demo/ensure', auth_1.requireAuth, (0, auth_1.requireRole)(['admin']), async (req, res) => {
        try {
            const result = await demo_management_service_1.default.ensureDemoOrganizations();
            res.status(result.success ? 200 : 500).json({
                success: result.success,
                message: result.message,
                data: {
                    demoOrgId: result.demoOrgId,
                    openDemoOrgId: result.openDemoOrgId,
                },
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: 'Failed to ensure demo organizations',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * POST /api/demo/recreate
     * Force recreation of demo organizations with fresh data.
     * Requires admin role. This is a destructive operation.
     */
    app.post('/api/demo/recreate', auth_1.requireAuth, (0, auth_1.requireRole)(['admin']), async (req, res) => {
        try {
            const result = await demo_management_service_1.default.recreateDemoOrganizations();
            res.status(result.success ? 200 : 500).json({
                success: result.success,
                message: result.message,
                data: {
                    demoOrgId: result.demoOrgId,
                    openDemoOrgId: result.openDemoOrgId,
                },
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: 'Failed to recreate demo organizations',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * POST /api/demo/maintenance
     * Run scheduled maintenance on demo organizations.
     * Requires admin role.
     */
    app.post('/api/demo/maintenance', auth_1.requireAuth, (0, auth_1.requireRole)(['admin']), async (req, res) => {
        try {
            const result = await demo_management_service_1.default.scheduledMaintenance();
            res.status(result.success ? 200 : 500).json({
                success: result.success,
                message: result.message,
                data: {
                    actions: result.actions,
                },
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: 'Failed to run demo maintenance',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    console.log('✅ Demo management API routes registered');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,