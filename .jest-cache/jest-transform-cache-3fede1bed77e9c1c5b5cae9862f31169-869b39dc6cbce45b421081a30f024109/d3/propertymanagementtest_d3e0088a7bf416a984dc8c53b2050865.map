{"file":"/home/runner/workspace/tests/unit/business-logic/property-management.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/business-logic/property-management.test.ts"],"sourcesContent":["/**\n * @file Property Management Business Logic Tests.\n * @description Comprehensive tests for Quebec property management workflows,\n * including organization hierarchy, building management, and residence assignments.\n */\n\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { db } from '../../../server/db';\n\n// Mock database for testing\njest.mock('../../../server/db', () => ({\n  db: {\n    query: {\n      organizations: {\n        findMany: jest.fn(),\n        findFirst: jest.fn(),\n      },\n      buildings: {\n        findMany: jest.fn(),\n        findFirst: jest.fn(),\n      },\n      residences: {\n        findMany: jest.fn(),\n        findFirst: jest.fn(),\n      },\n      userOrganizations: {\n        findMany: jest.fn(),\n      },\n      userResidences: {\n        findMany: jest.fn(),\n      },\n      users: {\n        findFirst: jest.fn(),\n        findMany: jest.fn(),\n      },\n      bills: {\n        findMany: jest.fn(),\n      },\n      maintenanceRequests: {\n        findMany: jest.fn(),\n      },\n    },\n    select: jest.fn(),\n    insert: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n}));\n\n// Test data for Quebec property management scenarios\nconst testData = {\n  organizations: {\n    demo: {\n      id: 'demo-org-id',\n      name: 'Demo',\n      type: 'demo',\n      isActive: true,\n      address: '123 Demo Street, Montreal, QC',\n      phone: '+1-514-555-0100',\n      email: 'demo@koveo.com',\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n    koveo: {\n      id: 'koveo-org-id',\n      name: 'Koveo',\n      type: 'corporate',\n      isActive: true,\n      address: '456 Corporate Blvd, Montreal, QC',\n      phone: '+1-514-555-0200',\n      email: 'contact@koveo.com',\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n    montreal: {\n      id: 'montreal-org-id',\n      name: 'Gestion Immobilière Montréal',\n      type: 'property_management',\n      isActive: true,\n      address: '789 Rue Sherbrooke, Montreal, QC H2L 1K6',\n      phone: '+1-514-555-0300',\n      email: 'info@gestion-montreal.ca',\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n    quebec: {\n      id: 'quebec-org-id',\n      name: 'Propriétés Résidentielles Québec',\n      type: 'property_management',\n      isActive: true,\n      address: '321 Grande Allée, Quebec, QC G1R 2J5',\n      phone: '+1-418-555-0400',\n      email: 'contact@proprietes-quebec.ca',\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n  },\n  buildings: {\n    demoBuilding: {\n      id: 'demo-building-id',\n      organizationId: 'demo-org-id',\n      name: 'Demo Residential Complex',\n      address: '100 Demo Avenue, Montreal, QC H1A 1A1',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n      buildingType: 'residential',\n      yearBuilt: 2020,\n      totalFloors: 5,\n      totalUnits: 50,\n      isActive: true,\n      amenities: ['gym', 'pool', 'laundry'],\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n    montrealTower: {\n      id: 'montreal-tower-id',\n      organizationId: 'montreal-org-id',\n      name: 'Tour Résidentielle Montréal',\n      address: '200 Rue Saint-Denis, Montreal, QC H2X 3K8',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H2X 3K8',\n      buildingType: 'high_rise',\n      yearBuilt: 2018,\n      totalFloors: 25,\n      totalUnits: 200,\n      isActive: true,\n      amenities: ['concierge', 'gym', 'pool', 'parking', 'storage'],\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n    quebecComplex: {\n      id: 'quebec-complex-id',\n      organizationId: 'quebec-org-id',\n      name: 'Complexe Résidentiel Vieux-Québec',\n      address: '50 Rue des Remparts, Quebec, QC G1R 3R4',\n      city: 'Quebec',\n      province: 'QC',\n      postalCode: 'G1R 3R4',\n      buildingType: 'heritage',\n      yearBuilt: 1950,\n      totalFloors: 4,\n      totalUnits: 32,\n      isActive: true,\n      amenities: ['heritage_features', 'courtyard', 'storage'],\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n  },\n  residences: {\n    demo101: {\n      id: 'demo-residence-101',\n      buildingId: 'demo-building-id',\n      unitNumber: '101',\n      floor: 1,\n      squareFootage: 750,\n      bedroomCount: 2,\n      bathroomCount: 1,\n      rentAmount: 1200.0,\n      isActive: true,\n      features: ['balcony', 'dishwasher'],\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n    montreal2A: {\n      id: 'montreal-residence-2A',\n      buildingId: 'montreal-tower-id',\n      unitNumber: '2A',\n      floor: 2,\n      squareFootage: 950,\n      bedroomCount: 2,\n      bathroomCount: 2,\n      rentAmount: 1800.0,\n      isActive: true,\n      features: ['city_view', 'parking_included', 'storage_included'],\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n    quebec15B: {\n      id: 'quebec-residence-15B',\n      buildingId: 'quebec-complex-id',\n      unitNumber: '15B',\n      floor: 4,\n      squareFootage: 680,\n      bedroomCount: 1,\n      bathroomCount: 1,\n      rentAmount: 1100.0,\n      isActive: true,\n      features: ['heritage_details', 'hardwood_floors'],\n      createdAt: new Date('2024-01-01'),\n      updatedAt: new Date('2024-01-01'),\n    },\n  },\n  users: {\n    admin: {\n      id: 'admin-user-id',\n      username: 'admin@koveo.com',\n      email: 'admin@koveo.com',\n      firstName: 'Admin',\n      lastName: 'Koveo',\n      role: 'admin',\n      isActive: true,\n      phone: '+1-514-555-0001',\n      language: 'en',\n    },\n    manager: {\n      id: 'manager-user-id',\n      username: 'gestionnaire@montreal.ca',\n      email: 'gestionnaire@montreal.ca',\n      firstName: 'Pierre',\n      lastName: 'Gestionnaire',\n      role: 'manager',\n      isActive: true,\n      phone: '+1-514-555-0002',\n      language: 'fr',\n    },\n    tenant: {\n      id: 'tenant-user-id',\n      username: 'locataire@email.com',\n      email: 'locataire@email.com',\n      firstName: 'Marie',\n      lastName: 'Locataire',\n      role: 'tenant',\n      isActive: true,\n      phone: '+1-514-555-0003',\n      language: 'fr',\n    },\n  },\n};\n\ndescribe('Property Management Business Logic Tests', () => {\n  let mockDb: any;\n\n  beforeEach(() => {\n    mockDb = db as any;\n    jest.clearAllMocks();\n  });\n\n  describe('Organization Management', () => {\n    it('should retrieve active organizations with proper hierarchy', async () => {\n      mockDb.query.organizations.findMany.mockResolvedValueOnce([\n        testData.organizations.demo,\n        testData.organizations.koveo,\n        testData.organizations.montreal,\n        testData.organizations.quebec,\n      ]);\n\n      const organizations = await mockDb.query.organizations.findMany({\n        where: { isActive: true },\n        orderBy: { name: 'asc' },\n      });\n\n      expect(organizations).toHaveLength(4);\n      expect(organizations[0]).toMatchObject(testData.organizations.demo);\n      expect(organizations.every((org) => org.isActive)).toBe(true);\n    });\n\n    it('should handle Quebec-specific organization requirements', async () => {\n      const quebecOrg = testData.organizations.quebec;\n      mockDb.query.organizations.findFirst.mockResolvedValueOnce(quebecOrg);\n\n      const organization = await mockDb.query.organizations.findFirst({\n        where: { id: quebecOrg.id },\n      });\n\n      expect(organization.address).toContain('QC');\n      expect(organization.phone).toMatch(/^\\+1-\\d{3}-\\d{3}-\\d{4}$/);\n      expect(organization.name).toContain('Québec');\n    });\n\n    it('should validate organization contact information format', async () => {\n      const organizations = Object.values(testData.organizations);\n\n      organizations.forEach((org) => {\n        // Quebec phone number format validation\n        expect(org.phone).toMatch(/^\\+1-\\d{3}-\\d{3}-\\d{4}$/);\n\n        // Email format validation\n        expect(org.email).toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n\n        // Quebec postal code format (if present in address)\n        if (org.address.includes('QC')) {\n          // Accept both full postal codes and addresses without them\n          expect(org.address).toMatch(/QC(\\s+[A-Z]\\d[A-Z]\\s+\\d[A-Z]\\d)?/);\n        }\n      });\n    });\n\n    it('should enforce organization business rules', async () => {\n      // Demo organization should always be accessible\n      const demoOrg = testData.organizations.demo;\n      expect(demoOrg.name).toBe('Demo');\n      expect(demoOrg.type).toBe('demo');\n      expect(demoOrg.isActive).toBe(true);\n\n      // Koveo organization should have global access privileges\n      const koveoOrg = testData.organizations.koveo;\n      expect(koveoOrg.name).toBe('Koveo');\n      expect(koveoOrg.type).toBe('corporate');\n      expect(koveoOrg.isActive).toBe(true);\n    });\n  });\n\n  describe('Building Management', () => {\n    it('should retrieve buildings with organization relationships', async () => {\n      mockDb.query.buildings.findMany.mockResolvedValueOnce([\n        { ...testData.buildings.montrealTower, organization: testData.organizations.montreal },\n      ]);\n\n      const buildings = await mockDb.query.buildings.findMany({\n        where: { isActive: true },\n        with: { organization: true },\n      });\n\n      expect(buildings).toHaveLength(1);\n      expect(buildings[0].organization).toBeDefined();\n      expect(buildings[0].organization.name).toBe('Gestion Immobilière Montréal');\n    });\n\n    it('should validate Quebec building address formats', async () => {\n      const buildings = Object.values(testData.buildings);\n\n      buildings.forEach((building) => {\n        // Quebec address should contain province and postal code\n        expect(building.address).toContain('QC');\n        expect(building.city).toMatch(/^(Montreal|Quebec)$/);\n        expect(building.province).toBe('QC');\n        expect(building.postalCode).toMatch(/^[A-Z]\\d[A-Z]\\s+\\d[A-Z]\\d$/);\n      });\n    });\n\n    it('should enforce building capacity and floor constraints', async () => {\n      const buildings = Object.values(testData.buildings);\n\n      buildings.forEach((building) => {\n        // Total units should be reasonable for floor count\n        const unitsPerFloor = building.totalUnits / building.totalFloors;\n        expect(unitsPerFloor).toBeGreaterThan(0);\n        expect(unitsPerFloor).toBeLessThan(50); // Reasonable upper limit\n\n        // Building should have positive dimensions\n        expect(building.totalFloors).toBeGreaterThan(0);\n        expect(building.totalUnits).toBeGreaterThan(0);\n        expect(building.yearBuilt).toBeGreaterThan(1800);\n        expect(building.yearBuilt).toBeLessThanOrEqual(new Date().getFullYear());\n      });\n    });\n\n    it('should handle different building types correctly', async () => {\n      const buildingTypes = ['residential', 'high_rise', 'heritage'];\n      const buildings = Object.values(testData.buildings);\n\n      expect(buildings.map((b) => b.buildingType)).toEqual(expect.arrayContaining(buildingTypes));\n\n      // Heritage buildings should have specific constraints\n      const heritageBuilding = buildings.find((b) => b.buildingType === 'heritage');\n      expect(heritageBuilding?.amenities).toContain('heritage_features');\n      expect(heritageBuilding?.yearBuilt).toBeLessThan(1980); // Older building\n    });\n  });\n\n  describe('Residence Management', () => {\n    it('should retrieve residences with building and organization data', async () => {\n      mockDb.query.residences.findMany.mockResolvedValueOnce([\n        {\n          ...testData.residences.montreal2A,\n          building: {\n            ...testData.buildings.montrealTower,\n            organization: testData.organizations.montreal,\n          },\n        },\n      ]);\n\n      const residences = await mockDb.query.residences.findMany({\n        where: { isActive: true },\n        with: { building: { with: { organization: true } } },\n      });\n\n      expect(residences).toHaveLength(1);\n      expect(residences[0].building).toBeDefined();\n      expect(residences[0].building.organization).toBeDefined();\n    });\n\n    it('should validate residence specifications', async () => {\n      const residences = Object.values(testData.residences);\n\n      residences.forEach((residence) => {\n        // Unit numbers should be valid\n        expect(residence.unitNumber).toMatch(/^[0-9A-Z]+$/);\n\n        // Floor should be valid\n        expect(residence.floor).toBeGreaterThan(0);\n\n        // Square footage should be reasonable\n        expect(residence.squareFootage).toBeGreaterThan(200);\n        expect(residence.squareFootage).toBeLessThan(5000);\n\n        // Bedroom and bathroom counts should be logical\n        expect(residence.bedroomCount).toBeGreaterThanOrEqual(0);\n        expect(residence.bathroomCount).toBeGreaterThan(0);\n        expect(residence.bedroomCount).toBeLessThanOrEqual(10);\n        expect(residence.bathroomCount).toBeLessThanOrEqual(10);\n\n        // Rent amount should be positive\n        expect(residence.rentAmount).toBeGreaterThan(0);\n      });\n    });\n\n    it('should handle Quebec rental market pricing', async () => {\n      const residences = Object.values(testData.residences);\n\n      residences.forEach((residence) => {\n        // Quebec rental prices should be within reasonable ranges\n        const pricePerSqFt = residence.rentAmount / residence.squareFootage;\n        expect(pricePerSqFt).toBeGreaterThan(0.5); // Minimum $/sqft\n        expect(pricePerSqFt).toBeLessThan(5.0); // Maximum $/sqft\n\n        // Rent should correlate with bedroom count\n        if (residence.bedroomCount === 1) {\n          expect(residence.rentAmount).toBeLessThan(1500);\n        } else if (residence.bedroomCount >= 3) {\n          expect(residence.rentAmount).toBeGreaterThan(1500);\n        }\n      });\n    });\n\n    it('should validate residence features and amenities', async () => {\n      const residences = Object.values(testData.residences);\n\n      residences.forEach((residence) => {\n        // Features should be an array\n        expect(Array.isArray(residence.features)).toBe(true);\n\n        // Features should be reasonable\n        const validFeatures = [\n          'balcony',\n          'dishwasher',\n          'city_view',\n          'parking_included',\n          'storage_included',\n          'heritage_details',\n          'hardwood_floors',\n        ];\n\n        residence.features.forEach((feature) => {\n          expect(validFeatures).toContain(feature);\n        });\n      });\n    });\n  });\n\n  describe('User-Property Relationships', () => {\n    it('should manage user organization memberships correctly', async () => {\n      mockDb.query.userOrganizations.findMany.mockResolvedValueOnce([\n        {\n          userId: testData.users.manager.id,\n          organizationId: testData.organizations.montreal.id,\n          role: 'manager',\n          isActive: true,\n          canAccessAllOrganizations: false,\n          joinedAt: new Date('2024-01-01'),\n        },\n      ]);\n\n      const userOrgs = await mockDb.query.userOrganizations.findMany({\n        where: { userId: testData.users.manager.id, isActive: true },\n      });\n\n      expect(userOrgs).toHaveLength(1);\n      expect(userOrgs[0].organizationId).toBe(testData.organizations.montreal.id);\n      expect(userOrgs[0].isActive).toBe(true);\n    });\n\n    it('should manage user residence assignments correctly', async () => {\n      mockDb.query.userResidences.findMany.mockResolvedValueOnce([\n        {\n          userId: testData.users.tenant.id,\n          residenceId: testData.residences.montreal2A.id,\n          relationshipType: 'tenant',\n          isActive: true,\n          startDate: new Date('2024-01-01'),\n          endDate: new Date('2024-12-31'),\n          monthlyRent: 1800.0,\n        },\n      ]);\n\n      const userResidences = await mockDb.query.userResidences.findMany({\n        where: { userId: testData.users.tenant.id, isActive: true },\n      });\n\n      expect(userResidences).toHaveLength(1);\n      expect(userResidences[0].relationshipType).toBe('tenant');\n      expect(userResidences[0].monthlyRent).toBe(1800.0);\n    });\n\n    it('should enforce Quebec tenant-landlord relationship rules', async () => {\n      const tenantAssignment = {\n        userId: testData.users.tenant.id,\n        residenceId: testData.residences.montreal2A.id,\n        relationshipType: 'tenant',\n        isActive: true,\n        startDate: new Date('2024-01-01'),\n        endDate: new Date('2024-12-31'),\n        monthlyRent: 1800.0,\n      };\n\n      // Validate lease terms\n      expect(tenantAssignment.startDate).toBeInstanceOf(Date);\n      expect(tenantAssignment.endDate).toBeInstanceOf(Date);\n      expect(tenantAssignment.endDate.getTime()).toBeGreaterThan(\n        tenantAssignment.startDate.getTime()\n      );\n\n      // Lease duration should be reasonable (6 months to 2 years)\n      const leaseDurationMonths =\n        (tenantAssignment.endDate.getTime() - tenantAssignment.startDate.getTime()) /\n        (1000 * 60 * 60 * 24 * 30);\n      expect(leaseDurationMonths).toBeGreaterThanOrEqual(6);\n      expect(leaseDurationMonths).toBeLessThanOrEqual(24);\n\n      // Monthly rent should match residence rent amount\n      expect(tenantAssignment.monthlyRent).toBe(testData.residences.montreal2A.rentAmount);\n    });\n\n    it('should validate user language preferences for Quebec context', async () => {\n      const users = Object.values(testData.users);\n\n      users.forEach((user) => {\n        // Language should be specified for Quebec users\n        expect(['en', 'fr']).toContain(user.language);\n\n        // French users should have French names or addresses\n        if (user.language === 'fr') {\n          const hasFrenchContent =\n            user.firstName.includes('Pierre') ||\n            user.firstName.includes('Marie') ||\n            user.email.includes('gestionnaire') ||\n            user.email.includes('locataire');\n\n          expect(hasFrenchContent || user.email.includes('montreal.ca')).toBe(true);\n        }\n      });\n    });\n  });\n\n  describe('Complex Property Management Workflows', () => {\n    it('should handle complete tenant onboarding workflow', async () => {\n      // Step 1: Find available residence\n      mockDb.query.residences.findMany.mockResolvedValueOnce([testData.residences.montreal2A]);\n\n      const availableResidences = await mockDb.query.residences.findMany({\n        where: { isActive: true },\n      });\n\n      expect(availableResidences).toHaveLength(1);\n\n      // Step 2: Create user-residence assignment\n      const assignment = {\n        userId: testData.users.tenant.id,\n        residenceId: availableResidences[0].id,\n        relationshipType: 'tenant',\n        isActive: true,\n        startDate: new Date('2024-06-01'),\n        endDate: new Date('2025-05-31'),\n        monthlyRent: availableResidences[0].rentAmount,\n      };\n\n      // Validate assignment data\n      expect(assignment.userId).toBeTruthy();\n      expect(assignment.residenceId).toBeTruthy();\n      expect(assignment.monthlyRent).toBe(testData.residences.montreal2A.rentAmount);\n    });\n\n    it('should handle property manager organization transfer', async () => {\n      const oldOrganization = testData.organizations.montreal;\n      const newOrganization = testData.organizations.quebec;\n      const manager = testData.users.manager;\n\n      // Simulate organization transfer\n      const oldMembership = {\n        userId: manager.id,\n        organizationId: oldOrganization.id,\n        isActive: false, // Deactivated\n        endDate: new Date(),\n      };\n\n      const newMembership = {\n        userId: manager.id,\n        organizationId: newOrganization.id,\n        isActive: true, // New active membership\n        startDate: new Date(),\n      };\n\n      expect(oldMembership.isActive).toBe(false);\n      expect(newMembership.isActive).toBe(true);\n      expect(oldMembership.userId).toBe(newMembership.userId);\n    });\n\n    it('should handle building capacity and occupancy calculations', async () => {\n      const building = testData.buildings.montrealTower;\n\n      // Mock current occupancy\n      mockDb.query.userResidences.findMany.mockResolvedValueOnce([\n        { residenceId: 'residence-1', isActive: true },\n        { residenceId: 'residence-2', isActive: true },\n        { residenceId: 'residence-3', isActive: true },\n      ]);\n\n      const occupiedUnits = await mockDb.query.userResidences.findMany({\n        where: { isActive: true },\n      });\n\n      const occupancyRate = (occupiedUnits.length / building.totalUnits) * 100;\n      const availableUnits = building.totalUnits - occupiedUnits.length;\n\n      expect(occupancyRate).toBeGreaterThanOrEqual(0);\n      expect(occupancyRate).toBeLessThanOrEqual(100);\n      expect(availableUnits).toBeGreaterThanOrEqual(0);\n      expect(availableUnits).toBeLessThanOrEqual(building.totalUnits);\n    });\n\n    it('should validate Quebec property management compliance', async () => {\n      // Test compliance with Quebec residential tenancy laws\n      const residence = testData.residences.montreal2A;\n      const building = testData.buildings.montrealTower;\n\n      // Rent control compliance (varies by municipality)\n      expect(residence.rentAmount).toBeGreaterThan(0);\n\n      // Building safety and habitability standards\n      expect(building.yearBuilt).toBeGreaterThan(1920); // Modern safety standards\n      expect(residence.bathroomCount).toBeGreaterThan(0); // Basic habitability\n\n      // Accessibility considerations for multi-floor buildings\n      if (building.totalFloors > 3) {\n        expect(building.amenities).toEqual(\n          expect.arrayContaining(['gym', 'pool', 'parking', 'concierge'])\n        );\n      }\n    });\n  });\n\n  describe('Data Integrity and Validation', () => {\n    it('should maintain referential integrity between entities', async () => {\n      // Building must belong to an organization\n      const building = testData.buildings.montrealTower;\n      expect(building.organizationId).toBeTruthy();\n      expect(\n        Object.values(testData.organizations).some((org) => org.id === building.organizationId)\n      ).toBe(true);\n\n      // Residence must belong to a building\n      const residence = testData.residences.montreal2A;\n      expect(residence.buildingId).toBeTruthy();\n      expect(\n        Object.values(testData.buildings).some((bldg) => bldg.id === residence.buildingId)\n      ).toBe(true);\n    });\n\n    it('should validate business rule constraints', async () => {\n      // Organization names should be unique\n      const orgNames = Object.values(testData.organizations).map((org) => org.name);\n      const uniqueOrgNames = new Set(orgNames);\n      expect(uniqueOrgNames.size).toBe(orgNames.length);\n\n      // Building names within an organization should be unique\n      const buildingsByOrg = Object.values(testData.buildings).reduce(\n        (acc, building) => {\n          if (!acc[building.organizationId]) {\n            acc[building.organizationId] = [];\n          }\n          acc[building.organizationId].push(building.name);\n          return acc;\n        },\n        {} as Record<string, string[]>\n      );\n\n      Object.values(buildingsByOrg).forEach((buildingNames) => {\n        const uniqueBuildingNames = new Set(buildingNames);\n        expect(uniqueBuildingNames.size).toBe(buildingNames.length);\n      });\n\n      // Unit numbers within a building should be unique\n      const residencesByBuilding = Object.values(testData.residences).reduce(\n        (acc, residence) => {\n          if (!acc[residence.buildingId]) {\n            acc[residence.buildingId] = [];\n          }\n          acc[residence.buildingId].push(residence.unitNumber);\n          return acc;\n        },\n        {} as Record<string, string[]>\n      );\n\n      Object.values(residencesByBuilding).forEach((unitNumbers) => {\n        const uniqueUnitNumbers = new Set(unitNumbers);\n        expect(uniqueUnitNumbers.size).toBe(unitNumbers.length);\n      });\n    });\n\n    it('should handle edge cases in property data', async () => {\n      const edgeCases = {\n        // Minimum viable residence\n        studioUnit: {\n          id: 'studio-unit-id',\n          buildingId: testData.buildings.demoBuilding.id,\n          unitNumber: 'STUDIO1',\n          floor: 1,\n          squareFootage: 300, // Minimum legal size in Quebec\n          bedroomCount: 0, // Studio apartment\n          bathroomCount: 1,\n          rentAmount: 800.0,\n          isActive: true,\n          features: ['murphy_bed'],\n        },\n\n        // Penthouse unit\n        penthouse: {\n          id: 'penthouse-id',\n          buildingId: testData.buildings.montrealTower.id,\n          unitNumber: 'PH1',\n          floor: 25, // Top floor\n          squareFootage: 2500,\n          bedroomCount: 3,\n          bathroomCount: 3,\n          rentAmount: 4500.0,\n          isActive: true,\n          features: ['terrace', 'panoramic_view', 'luxury_finishes'],\n        },\n      };\n\n      Object.values(edgeCases).forEach((residence) => {\n        // Validate edge case constraints\n        expect(residence.squareFootage).toBeGreaterThan(250); // Quebec minimum\n        expect(residence.bedroomCount).toBeGreaterThanOrEqual(0);\n        expect(residence.bathroomCount).toBeGreaterThan(0);\n        expect(residence.floor).toBeGreaterThan(0);\n        expect(residence.rentAmount).toBeGreaterThan(0);\n      });\n    });\n  });\n});\n"],"version":3}