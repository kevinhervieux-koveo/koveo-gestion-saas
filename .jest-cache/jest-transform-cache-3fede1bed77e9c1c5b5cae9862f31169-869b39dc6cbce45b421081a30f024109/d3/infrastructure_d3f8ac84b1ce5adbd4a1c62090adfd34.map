{"version":3,"names":["cov_xh89bkkih","actualCoverage","s","drizzle_orm_1","require","pg_core_1","zod_1","core_1","exports","sslStatusEnum","pgEnum","sslCertificates","pgTable","id","uuid","primaryKey","default","sql","domain","text","notNull","unique","certificateData","privateKey","issuer","subject","serialNumber","fingerprint","validFrom","timestamp","validTo","status","autoRenew","boolean","renewalAttempts","integer","maxRenewalAttempts","dnsProvider","lastRenewalAttempt","nextRenewalDate","certificateChain","renewalError","dnsCredentials","notificationEmails","createdBy","varchar","references","f","users","createdAt","defaultNow","updatedAt","sessions","sid","sess","json","expire","precision","insertSslCertificateSchema","z","object","string","date","number","int","optional","insertSessionSchema","any"],"sources":["/home/runner/workspace/shared/schemas/infrastructure.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport { pgTable, text, timestamp, uuid, pgEnum, boolean, integer, varchar, json } from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\nimport { users } from './core';\n\n// Infrastructure enums\nexport const sslStatusEnum = pgEnum('ssl_status', [\n  'active',\n  'pending',\n  'expired',\n  'revoked',\n  'failed',\n]);\n\n// Infrastructure tables\n/**\n * SSL certificates table for managing domain SSL certificates.\n * Supports automated certificate management and renewal tracking.\n */\nexport const sslCertificates = pgTable('ssl_certificates', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  domain: text('domain').notNull().unique(),\n  certificateData: text('certificate_data').notNull(),\n  privateKey: text('private_key').notNull(),\n  issuer: text('issuer').notNull(),\n  subject: text('subject').notNull(),\n  serialNumber: text('serial_number').notNull(),\n  fingerprint: text('fingerprint').notNull(),\n  validFrom: timestamp('valid_from').notNull(),\n  validTo: timestamp('valid_to').notNull(),\n  status: sslStatusEnum('status').notNull().default('pending'),\n  autoRenew: boolean('auto_renew').notNull().default(true),\n  renewalAttempts: integer('renewal_attempts').notNull().default(0),\n  maxRenewalAttempts: integer('max_renewal_attempts').notNull().default(3),\n  dnsProvider: text('dns_provider'),\n  lastRenewalAttempt: timestamp('last_renewal_attempt'),\n  nextRenewalDate: timestamp('next_renewal_date'),\n  // Additional SSL management fields\n  certificateChain: text('certificate_chain'),\n  renewalError: text('renewal_error'),\n  dnsCredentials: text('dns_credentials'),\n  notificationEmails: text('notification_emails'),\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Session table for PostgreSQL session store.\n * This table stores user session data for authentication.\n * CRITICAL: This table must never be deleted as it's required for user sessions.\n */\nexport const sessions = pgTable('session', {\n  sid: varchar('sid').primaryKey().notNull(),\n  sess: json('sess').notNull(),\n  expire: timestamp('expire', { precision: 6 }).notNull(),\n});\n\n// Insert schemas\nexport const insertSslCertificateSchema = z.object({\n  domain: z.string(),\n  certificateData: z.string(),\n  privateKey: z.string(),\n  issuer: z.string(),\n  subject: z.string(),\n  serialNumber: z.string(),\n  fingerprint: z.string(),\n  validFrom: z.date(),\n  validTo: z.date(),\n  status: z.string().default('pending'),\n  autoRenew: z.boolean().default(true),\n  renewalAttempts: z.number().int().default(0),\n  maxRenewalAttempts: z.number().int().default(3),\n  dnsProvider: z.string().optional(),\n  lastRenewalAttempt: z.date().optional(),\n  nextRenewalDate: z.date().optional(),\n  createdBy: z.string().uuid(),\n});\n\n// Types\n// Session table schema (no insert schema needed - managed by connect-pg-simple)\nexport const insertSessionSchema = z.object({\n  sid: z.string(),\n  sess: z.any(), // JSON data\n  expire: z.date(),\n});\n\n// Types\nexport type InsertSslCertificate = z.infer<typeof insertSslCertificateSchema>;\nexport type SslCertificate = typeof sslCertificates.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Session = typeof sessions.$inferSelect;\n\n// Relations - temporarily commented out due to drizzle-orm version compatibility\n// export const sslCertificatesRelations = relations(sslCertificates, ({ one }) => ({\n//   createdBy: one(users, {\n//     fields: [sslCertificates.createdBy],\n//     references: [users.id],\n//   }),\n// }));\n"],"mappings":"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","ignoreList":[]}