0f8d3e599c18fae32c6a1d14a8ee50de
"use strict";
/**
 * @file Property Management Business Logic Tests.
 * @description Comprehensive tests for Quebec property management workflows,
 * including organization hierarchy, building management, and residence assignments.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock database for testing
globals_1.jest.mock('../../../server/db', () => ({
    db: {
        query: {
            organizations: {
                findMany: globals_1.jest.fn(),
                findFirst: globals_1.jest.fn(),
            },
            buildings: {
                findMany: globals_1.jest.fn(),
                findFirst: globals_1.jest.fn(),
            },
            residences: {
                findMany: globals_1.jest.fn(),
                findFirst: globals_1.jest.fn(),
            },
            userOrganizations: {
                findMany: globals_1.jest.fn(),
            },
            userResidences: {
                findMany: globals_1.jest.fn(),
            },
            users: {
                findFirst: globals_1.jest.fn(),
                findMany: globals_1.jest.fn(),
            },
            bills: {
                findMany: globals_1.jest.fn(),
            },
            maintenanceRequests: {
                findMany: globals_1.jest.fn(),
            },
        },
        select: globals_1.jest.fn(),
        insert: globals_1.jest.fn(),
        update: globals_1.jest.fn(),
        delete: globals_1.jest.fn(),
    },
}));
const db_1 = require("../../../server/db");
// Test data for Quebec property management scenarios
const testData = {
    organizations: {
        demo: {
            id: 'demo-org-id',
            name: 'Demo',
            type: 'demo',
            isActive: true,
            address: '123 Demo Street, Montreal, QC',
            phone: '+1-514-555-0100',
            email: 'demo@koveo.com',
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
        koveo: {
            id: 'koveo-org-id',
            name: 'Koveo',
            type: 'corporate',
            isActive: true,
            address: '456 Corporate Blvd, Montreal, QC',
            phone: '+1-514-555-0200',
            email: 'contact@koveo.com',
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
        montreal: {
            id: 'montreal-org-id',
            name: 'Gestion Immobilière Montréal',
            type: 'property_management',
            isActive: true,
            address: '789 Rue Sherbrooke, Montreal, QC H2L 1K6',
            phone: '+1-514-555-0300',
            email: 'info@gestion-montreal.ca',
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
        quebec: {
            id: 'quebec-org-id',
            name: 'Propriétés Résidentielles Québec',
            type: 'property_management',
            isActive: true,
            address: '321 Grande Allée, Quebec, QC G1R 2J5',
            phone: '+1-418-555-0400',
            email: 'contact@proprietes-quebec.ca',
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
    },
    buildings: {
        demoBuilding: {
            id: 'demo-building-id',
            organizationId: 'demo-org-id',
            name: 'Demo Residential Complex',
            address: '100 Demo Avenue, Montreal, QC H1A 1A1',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
            buildingType: 'residential',
            yearBuilt: 2020,
            totalFloors: 5,
            totalUnits: 50,
            isActive: true,
            amenities: ['gym', 'pool', 'laundry'],
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
        montrealTower: {
            id: 'montreal-tower-id',
            organizationId: 'montreal-org-id',
            name: 'Tour Résidentielle Montréal',
            address: '200 Rue Saint-Denis, Montreal, QC H2X 3K8',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H2X 3K8',
            buildingType: 'high_rise',
            yearBuilt: 2018,
            totalFloors: 25,
            totalUnits: 200,
            isActive: true,
            amenities: ['concierge', 'gym', 'pool', 'parking', 'storage'],
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
        quebecComplex: {
            id: 'quebec-complex-id',
            organizationId: 'quebec-org-id',
            name: 'Complexe Résidentiel Vieux-Québec',
            address: '50 Rue des Remparts, Quebec, QC G1R 3R4',
            city: 'Quebec',
            province: 'QC',
            postalCode: 'G1R 3R4',
            buildingType: 'heritage',
            yearBuilt: 1950,
            totalFloors: 4,
            totalUnits: 32,
            isActive: true,
            amenities: ['heritage_features', 'courtyard', 'storage'],
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
    },
    residences: {
        demo101: {
            id: 'demo-residence-101',
            buildingId: 'demo-building-id',
            unitNumber: '101',
            floor: 1,
            squareFootage: 750,
            bedroomCount: 2,
            bathroomCount: 1,
            rentAmount: 1200.0,
            isActive: true,
            features: ['balcony', 'dishwasher'],
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
        montreal2A: {
            id: 'montreal-residence-2A',
            buildingId: 'montreal-tower-id',
            unitNumber: '2A',
            floor: 2,
            squareFootage: 950,
            bedroomCount: 2,
            bathroomCount: 2,
            rentAmount: 1800.0,
            isActive: true,
            features: ['city_view', 'parking_included', 'storage_included'],
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
        quebec15B: {
            id: 'quebec-residence-15B',
            buildingId: 'quebec-complex-id',
            unitNumber: '15B',
            floor: 4,
            squareFootage: 680,
            bedroomCount: 1,
            bathroomCount: 1,
            rentAmount: 1100.0,
            isActive: true,
            features: ['heritage_details', 'hardwood_floors'],
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
        },
    },
    users: {
        admin: {
            id: 'admin-user-id',
            username: 'admin@koveo.com',
            email: 'admin@koveo.com',
            firstName: 'Admin',
            lastName: 'Koveo',
            role: 'admin',
            isActive: true,
            phone: '+1-514-555-0001',
            language: 'en',
        },
        manager: {
            id: 'manager-user-id',
            username: 'gestionnaire@montreal.ca',
            email: 'gestionnaire@montreal.ca',
            firstName: 'Pierre',
            lastName: 'Gestionnaire',
            role: 'manager',
            isActive: true,
            phone: '+1-514-555-0002',
            language: 'fr',
        },
        tenant: {
            id: 'tenant-user-id',
            username: 'locataire@email.com',
            email: 'locataire@email.com',
            firstName: 'Marie',
            lastName: 'Locataire',
            role: 'tenant',
            isActive: true,
            phone: '+1-514-555-0003',
            language: 'fr',
        },
    },
};
(0, globals_1.describe)('Property Management Business Logic Tests', () => {
    let mockDb;
    (0, globals_1.beforeEach)(() => {
        mockDb = db_1.db;
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Organization Management', () => {
        (0, globals_1.it)('should retrieve active organizations with proper hierarchy', async () => {
            mockDb.query.organizations.findMany.mockResolvedValueOnce([
                testData.organizations.demo,
                testData.organizations.koveo,
                testData.organizations.montreal,
                testData.organizations.quebec,
            ]);
            const organizations = await mockDb.query.organizations.findMany({
                where: { isActive: true },
                orderBy: { name: 'asc' },
            });
            (0, globals_1.expect)(organizations).toHaveLength(4);
            (0, globals_1.expect)(organizations[0]).toMatchObject(testData.organizations.demo);
            (0, globals_1.expect)(organizations.every((org) => org.isActive)).toBe(true);
        });
        (0, globals_1.it)('should handle Quebec-specific organization requirements', async () => {
            const quebecOrg = testData.organizations.quebec;
            mockDb.query.organizations.findFirst.mockResolvedValueOnce(quebecOrg);
            const organization = await mockDb.query.organizations.findFirst({
                where: { id: quebecOrg.id },
            });
            (0, globals_1.expect)(organization.address).toContain('QC');
            (0, globals_1.expect)(organization.phone).toMatch(/^\+1-\d{3}-\d{3}-\d{4}$/);
            (0, globals_1.expect)(organization.name).toContain('Québec');
        });
        (0, globals_1.it)('should validate organization contact information format', async () => {
            const organizations = Object.values(testData.organizations);
            organizations.forEach((org) => {
                // Quebec phone number format validation
                (0, globals_1.expect)(org.phone).toMatch(/^\+1-\d{3}-\d{3}-\d{4}$/);
                // Email format validation
                (0, globals_1.expect)(org.email).toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
                // Quebec postal code format (if present in address)
                if (org.address.includes('QC')) {
                    // Accept both full postal codes and addresses without them
                    (0, globals_1.expect)(org.address).toMatch(/QC(\s+[A-Z]\d[A-Z]\s+\d[A-Z]\d)?/);
                }
            });
        });
        (0, globals_1.it)('should enforce organization business rules', async () => {
            // Demo organization should always be accessible
            const demoOrg = testData.organizations.demo;
            (0, globals_1.expect)(demoOrg.name).toBe('Demo');
            (0, globals_1.expect)(demoOrg.type).toBe('demo');
            (0, globals_1.expect)(demoOrg.isActive).toBe(true);
            // Koveo organization should have global access privileges
            const koveoOrg = testData.organizations.koveo;
            (0, globals_1.expect)(koveoOrg.name).toBe('Koveo');
            (0, globals_1.expect)(koveoOrg.type).toBe('corporate');
            (0, globals_1.expect)(koveoOrg.isActive).toBe(true);
        });
    });
    (0, globals_1.describe)('Building Management', () => {
        (0, globals_1.it)('should retrieve buildings with organization relationships', async () => {
            mockDb.query.buildings.findMany.mockResolvedValueOnce([
                { ...testData.buildings.montrealTower, organization: testData.organizations.montreal },
            ]);
            const buildings = await mockDb.query.buildings.findMany({
                where: { isActive: true },
                with: { organization: true },
            });
            (0, globals_1.expect)(buildings).toHaveLength(1);
            (0, globals_1.expect)(buildings[0].organization).toBeDefined();
            (0, globals_1.expect)(buildings[0].organization.name).toBe('Gestion Immobilière Montréal');
        });
        (0, globals_1.it)('should validate Quebec building address formats', async () => {
            const buildings = Object.values(testData.buildings);
            buildings.forEach((building) => {
                // Quebec address should contain province and postal code
                (0, globals_1.expect)(building.address).toContain('QC');
                (0, globals_1.expect)(building.city).toMatch(/^(Montreal|Quebec)$/);
                (0, globals_1.expect)(building.province).toBe('QC');
                (0, globals_1.expect)(building.postalCode).toMatch(/^[A-Z]\d[A-Z]\s+\d[A-Z]\d$/);
            });
        });
        (0, globals_1.it)('should enforce building capacity and floor constraints', async () => {
            const buildings = Object.values(testData.buildings);
            buildings.forEach((building) => {
                // Total units should be reasonable for floor count
                const unitsPerFloor = building.totalUnits / building.totalFloors;
                (0, globals_1.expect)(unitsPerFloor).toBeGreaterThan(0);
                (0, globals_1.expect)(unitsPerFloor).toBeLessThan(50); // Reasonable upper limit
                // Building should have positive dimensions
                (0, globals_1.expect)(building.totalFloors).toBeGreaterThan(0);
                (0, globals_1.expect)(building.totalUnits).toBeGreaterThan(0);
                (0, globals_1.expect)(building.yearBuilt).toBeGreaterThan(1800);
                (0, globals_1.expect)(building.yearBuilt).toBeLessThanOrEqual(new Date().getFullYear());
            });
        });
        (0, globals_1.it)('should handle different building types correctly', async () => {
            const buildingTypes = ['residential', 'high_rise', 'heritage'];
            const buildings = Object.values(testData.buildings);
            (0, globals_1.expect)(buildings.map((b) => b.buildingType)).toEqual(globals_1.expect.arrayContaining(buildingTypes));
            // Heritage buildings should have specific constraints
            const heritageBuilding = buildings.find((b) => b.buildingType === 'heritage');
            (0, globals_1.expect)(heritageBuilding?.amenities).toContain('heritage_features');
            (0, globals_1.expect)(heritageBuilding?.yearBuilt).toBeLessThan(1980); // Older building
        });
    });
    (0, globals_1.describe)('Residence Management', () => {
        (0, globals_1.it)('should retrieve residences with building and organization data', async () => {
            mockDb.query.residences.findMany.mockResolvedValueOnce([
                {
                    ...testData.residences.montreal2A,
                    building: {
                        ...testData.buildings.montrealTower,
                        organization: testData.organizations.montreal,
                    },
                },
            ]);
            const residences = await mockDb.query.residences.findMany({
                where: { isActive: true },
                with: { building: { with: { organization: true } } },
            });
            (0, globals_1.expect)(residences).toHaveLength(1);
            (0, globals_1.expect)(residences[0].building).toBeDefined();
            (0, globals_1.expect)(residences[0].building.organization).toBeDefined();
        });
        (0, globals_1.it)('should validate residence specifications', async () => {
            const residences = Object.values(testData.residences);
            residences.forEach((residence) => {
                // Unit numbers should be valid
                (0, globals_1.expect)(residence.unitNumber).toMatch(/^[0-9A-Z]+$/);
                // Floor should be valid
                (0, globals_1.expect)(residence.floor).toBeGreaterThan(0);
                // Square footage should be reasonable
                (0, globals_1.expect)(residence.squareFootage).toBeGreaterThan(200);
                (0, globals_1.expect)(residence.squareFootage).toBeLessThan(5000);
                // Bedroom and bathroom counts should be logical
                (0, globals_1.expect)(residence.bedroomCount).toBeGreaterThanOrEqual(0);
                (0, globals_1.expect)(residence.bathroomCount).toBeGreaterThan(0);
                (0, globals_1.expect)(residence.bedroomCount).toBeLessThanOrEqual(10);
                (0, globals_1.expect)(residence.bathroomCount).toBeLessThanOrEqual(10);
                // Rent amount should be positive
                (0, globals_1.expect)(residence.rentAmount).toBeGreaterThan(0);
            });
        });
        (0, globals_1.it)('should handle Quebec rental market pricing', async () => {
            const residences = Object.values(testData.residences);
            residences.forEach((residence) => {
                // Quebec rental prices should be within reasonable ranges
                const pricePerSqFt = residence.rentAmount / residence.squareFootage;
                (0, globals_1.expect)(pricePerSqFt).toBeGreaterThan(0.5); // Minimum $/sqft
                (0, globals_1.expect)(pricePerSqFt).toBeLessThan(5.0); // Maximum $/sqft
                // Rent should correlate with bedroom count
                if (residence.bedroomCount === 1) {
                    (0, globals_1.expect)(residence.rentAmount).toBeLessThan(1500);
                }
                else if (residence.bedroomCount >= 3) {
                    (0, globals_1.expect)(residence.rentAmount).toBeGreaterThan(1500);
                }
            });
        });
        (0, globals_1.it)('should validate residence features and amenities', async () => {
            const residences = Object.values(testData.residences);
            residences.forEach((residence) => {
                // Features should be an array
                (0, globals_1.expect)(Array.isArray(residence.features)).toBe(true);
                // Features should be reasonable
                const validFeatures = [
                    'balcony',
                    'dishwasher',
                    'city_view',
                    'parking_included',
                    'storage_included',
                    'heritage_details',
                    'hardwood_floors',
                ];
                residence.features.forEach((feature) => {
                    (0, globals_1.expect)(validFeatures).toContain(feature);
                });
            });
        });
    });
    (0, globals_1.describe)('User-Property Relationships', () => {
        (0, globals_1.it)('should manage user organization memberships correctly', async () => {
            mockDb.query.userOrganizations.findMany.mockResolvedValueOnce([
                {
                    userId: testData.users.manager.id,
                    organizationId: testData.organizations.montreal.id,
                    role: 'manager',
                    isActive: true,
                    canAccessAllOrganizations: false,
                    joinedAt: new Date('2024-01-01'),
                },
            ]);
            const userOrgs = await mockDb.query.userOrganizations.findMany({
                where: { userId: testData.users.manager.id, isActive: true },
            });
            (0, globals_1.expect)(userOrgs).toHaveLength(1);
            (0, globals_1.expect)(userOrgs[0].organizationId).toBe(testData.organizations.montreal.id);
            (0, globals_1.expect)(userOrgs[0].isActive).toBe(true);
        });
        (0, globals_1.it)('should manage user residence assignments correctly', async () => {
            mockDb.query.userResidences.findMany.mockResolvedValueOnce([
                {
                    userId: testData.users.tenant.id,
                    residenceId: testData.residences.montreal2A.id,
                    relationshipType: 'tenant',
                    isActive: true,
                    startDate: new Date('2024-01-01'),
                    endDate: new Date('2024-12-31'),
                    monthlyRent: 1800.0,
                },
            ]);
            const userResidences = await mockDb.query.userResidences.findMany({
                where: { userId: testData.users.tenant.id, isActive: true },
            });
            (0, globals_1.expect)(userResidences).toHaveLength(1);
            (0, globals_1.expect)(userResidences[0].relationshipType).toBe('tenant');
            (0, globals_1.expect)(userResidences[0].monthlyRent).toBe(1800.0);
        });
        (0, globals_1.it)('should enforce Quebec tenant-landlord relationship rules', async () => {
            const tenantAssignment = {
                userId: testData.users.tenant.id,
                residenceId: testData.residences.montreal2A.id,
                relationshipType: 'tenant',
                isActive: true,
                startDate: new Date('2024-01-01'),
                endDate: new Date('2024-12-31'),
                monthlyRent: 1800.0,
            };
            // Validate lease terms
            (0, globals_1.expect)(tenantAssignment.startDate).toBeInstanceOf(Date);
            (0, globals_1.expect)(tenantAssignment.endDate).toBeInstanceOf(Date);
            (0, globals_1.expect)(tenantAssignment.endDate.getTime()).toBeGreaterThan(tenantAssignment.startDate.getTime());
            // Lease duration should be reasonable (6 months to 2 years)
            const leaseDurationMonths = (tenantAssignment.endDate.getTime() - tenantAssignment.startDate.getTime()) /
                (1000 * 60 * 60 * 24 * 30);
            (0, globals_1.expect)(leaseDurationMonths).toBeGreaterThanOrEqual(6);
            (0, globals_1.expect)(leaseDurationMonths).toBeLessThanOrEqual(24);
            // Monthly rent should match residence rent amount
            (0, globals_1.expect)(tenantAssignment.monthlyRent).toBe(testData.residences.montreal2A.rentAmount);
        });
        (0, globals_1.it)('should validate user language preferences for Quebec context', async () => {
            const users = Object.values(testData.users);
            users.forEach((user) => {
                // Language should be specified for Quebec users
                (0, globals_1.expect)(['en', 'fr']).toContain(user.language);
                // French users should have French names or addresses
                if (user.language === 'fr') {
                    const hasFrenchContent = user.firstName.includes('Pierre') ||
                        user.firstName.includes('Marie') ||
                        user.email.includes('gestionnaire') ||
                        user.email.includes('locataire');
                    (0, globals_1.expect)(hasFrenchContent || user.email.includes('montreal.ca')).toBe(true);
                }
            });
        });
    });
    (0, globals_1.describe)('Complex Property Management Workflows', () => {
        (0, globals_1.it)('should handle complete tenant onboarding workflow', async () => {
            // Step 1: Find available residence
            mockDb.query.residences.findMany.mockResolvedValueOnce([testData.residences.montreal2A]);
            const availableResidences = await mockDb.query.residences.findMany({
                where: { isActive: true },
            });
            (0, globals_1.expect)(availableResidences).toHaveLength(1);
            // Step 2: Create user-residence assignment
            const assignment = {
                userId: testData.users.tenant.id,
                residenceId: availableResidences[0].id,
                relationshipType: 'tenant',
                isActive: true,
                startDate: new Date('2024-06-01'),
                endDate: new Date('2025-05-31'),
                monthlyRent: availableResidences[0].rentAmount,
            };
            // Validate assignment data
            (0, globals_1.expect)(assignment.userId).toBeTruthy();
            (0, globals_1.expect)(assignment.residenceId).toBeTruthy();
            (0, globals_1.expect)(assignment.monthlyRent).toBe(testData.residences.montreal2A.rentAmount);
        });
        (0, globals_1.it)('should handle property manager organization transfer', async () => {
            const oldOrganization = testData.organizations.montreal;
            const newOrganization = testData.organizations.quebec;
            const manager = testData.users.manager;
            // Simulate organization transfer
            const oldMembership = {
                userId: manager.id,
                organizationId: oldOrganization.id,
                isActive: false, // Deactivated
                endDate: new Date(),
            };
            const newMembership = {
                userId: manager.id,
                organizationId: newOrganization.id,
                isActive: true, // New active membership
                startDate: new Date(),
            };
            (0, globals_1.expect)(oldMembership.isActive).toBe(false);
            (0, globals_1.expect)(newMembership.isActive).toBe(true);
            (0, globals_1.expect)(oldMembership.userId).toBe(newMembership.userId);
        });
        (0, globals_1.it)('should handle building capacity and occupancy calculations', async () => {
            const building = testData.buildings.montrealTower;
            // Mock current occupancy
            mockDb.query.userResidences.findMany.mockResolvedValueOnce([
                { residenceId: 'residence-1', isActive: true },
                { residenceId: 'residence-2', isActive: true },
                { residenceId: 'residence-3', isActive: true },
            ]);
            const occupiedUnits = await mockDb.query.userResidences.findMany({
                where: { isActive: true },
            });
            const occupancyRate = (occupiedUnits.length / building.totalUnits) * 100;
            const availableUnits = building.totalUnits - occupiedUnits.length;
            (0, globals_1.expect)(occupancyRate).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(occupancyRate).toBeLessThanOrEqual(100);
            (0, globals_1.expect)(availableUnits).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(availableUnits).toBeLessThanOrEqual(building.totalUnits);
        });
        (0, globals_1.it)('should validate Quebec property management compliance', async () => {
            // Test compliance with Quebec residential tenancy laws
            const residence = testData.residences.montreal2A;
            const building = testData.buildings.montrealTower;
            // Rent control compliance (varies by municipality)
            (0, globals_1.expect)(residence.rentAmount).toBeGreaterThan(0);
            // Building safety and habitability standards
            (0, globals_1.expect)(building.yearBuilt).toBeGreaterThan(1920); // Modern safety standards
            (0, globals_1.expect)(residence.bathroomCount).toBeGreaterThan(0); // Basic habitability
            // Accessibility considerations for multi-floor buildings
            if (building.totalFloors > 3) {
                (0, globals_1.expect)(building.amenities).toEqual(globals_1.expect.arrayContaining(['gym', 'pool', 'parking', 'concierge']));
            }
        });
    });
    (0, globals_1.describe)('Data Integrity and Validation', () => {
        (0, globals_1.it)('should maintain referential integrity between entities', async () => {
            // Building must belong to an organization
            const building = testData.buildings.montrealTower;
            (0, globals_1.expect)(building.organizationId).toBeTruthy();
            (0, globals_1.expect)(Object.values(testData.organizations).some((org) => org.id === building.organizationId)).toBe(true);
            // Residence must belong to a building
            const residence = testData.residences.montreal2A;
            (0, globals_1.expect)(residence.buildingId).toBeTruthy();
            (0, globals_1.expect)(Object.values(testData.buildings).some((bldg) => bldg.id === residence.buildingId)).toBe(true);
        });
        (0, globals_1.it)('should validate business rule constraints', async () => {
            // Organization names should be unique
            const orgNames = Object.values(testData.organizations).map((org) => org.name);
            const uniqueOrgNames = new Set(orgNames);
            (0, globals_1.expect)(uniqueOrgNames.size).toBe(orgNames.length);
            // Building names within an organization should be unique
            const buildingsByOrg = Object.values(testData.buildings).reduce((acc, building) => {
                if (!acc[building.organizationId]) {
                    acc[building.organizationId] = [];
                }
                acc[building.organizationId].push(building.name);
                return acc;
            }, {});
            Object.values(buildingsByOrg).forEach((buildingNames) => {
                const uniqueBuildingNames = new Set(buildingNames);
                (0, globals_1.expect)(uniqueBuildingNames.size).toBe(buildingNames.length);
            });
            // Unit numbers within a building should be unique
            const residencesByBuilding = Object.values(testData.residences).reduce((acc, residence) => {
                if (!acc[residence.buildingId]) {
                    acc[residence.buildingId] = [];
                }
                acc[residence.buildingId].push(residence.unitNumber);
                return acc;
            }, {});
            Object.values(residencesByBuilding).forEach((unitNumbers) => {
                const uniqueUnitNumbers = new Set(unitNumbers);
                (0, globals_1.expect)(uniqueUnitNumbers.size).toBe(unitNumbers.length);
            });
        });
        (0, globals_1.it)('should handle edge cases in property data', async () => {
            const edgeCases = {
                // Minimum viable residence
                studioUnit: {
                    id: 'studio-unit-id',
                    buildingId: testData.buildings.demoBuilding.id,
                    unitNumber: 'STUDIO1',
                    floor: 1,
                    squareFootage: 300, // Minimum legal size in Quebec
                    bedroomCount: 0, // Studio apartment
                    bathroomCount: 1,
                    rentAmount: 800.0,
                    isActive: true,
                    features: ['murphy_bed'],
                },
                // Penthouse unit
                penthouse: {
                    id: 'penthouse-id',
                    buildingId: testData.buildings.montrealTower.id,
                    unitNumber: 'PH1',
                    floor: 25, // Top floor
                    squareFootage: 2500,
                    bedroomCount: 3,
                    bathroomCount: 3,
                    rentAmount: 4500.0,
                    isActive: true,
                    features: ['terrace', 'panoramic_view', 'luxury_finishes'],
                },
            };
            Object.values(edgeCases).forEach((residence) => {
                // Validate edge case constraints
                (0, globals_1.expect)(residence.squareFootage).toBeGreaterThan(250); // Quebec minimum
                (0, globals_1.expect)(residence.bedroomCount).toBeGreaterThanOrEqual(0);
                (0, globals_1.expect)(residence.bathroomCount).toBeGreaterThan(0);
                (0, globals_1.expect)(residence.floor).toBeGreaterThan(0);
                (0, globals_1.expect)(residence.rentAmount).toBeGreaterThan(0);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,