{"file":"/home/runner/workspace/tests/unit/forms/demand-comment-form.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/forms/demand-comment-form.test.tsx"],"sourcesContent":["/**\n * @file Demand Comment Form Frontend Tests\n * @description Tests for comment submission form components and validation\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport '@testing-library/jest-dom';\n\n// Mock the hooks and utils\njest.mock('@/hooks/use-language', () => ({\n  useLanguage: () => ({\n    t: (key: string) => key,\n  }),\n}));\n\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({\n    toast: jest.fn(),\n  }),\n}));\n\n// Mock fetch with proper typing\nconst mockFetch = jest.fn() as jest.MockedFunction<typeof fetch>;\nglobal.fetch = mockFetch;\n\n// Mock queryClient\nconst createMockQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n\n// Mock data\nconst mockDemand = {\n  id: 'demand-123',\n  type: 'maintenance',\n  description: 'Test demand',\n  status: 'submitted',\n  submitterId: 'user-123',\n};\n\nconst mockUser = {\n  id: 'user-123',\n  role: 'resident',\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n};\n\nconst mockExistingComments = [\n  {\n    id: 'comment-1',\n    demandId: 'demand-123',\n    commentText: 'First comment on this demand',\n    commenterId: 'user-123',\n    isInternal: false,\n    createdAt: '2023-01-01T10:00:00Z',\n    author: {\n      id: 'user-123',\n      firstName: 'Test',\n      lastName: 'User',\n      email: 'test@example.com',\n    },\n  },\n  {\n    id: 'comment-2',\n    demandId: 'demand-123',\n    commentText: 'Second comment with more details',\n    commenterId: 'user-456',\n    isInternal: false,\n    createdAt: '2023-01-01T11:00:00Z',\n    author: {\n      id: 'user-456',\n      firstName: 'Other',\n      lastName: 'User',\n      email: 'other@example.com',\n    },\n  },\n];\n\n// Test component that includes comment functionality\nconst TestCommentForm = ({ demandId, onCommentAdded }: { demandId: string; onCommentAdded?: () => void }) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [comments, setComments] = React.useState(mockExistingComments);\n  const [commentText, setCommentText] = React.useState('');\n  const [commentType, setCommentType] = React.useState('');\n  const [isInternal, setIsInternal] = React.useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch(`/api/demands/${demandId}/comments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commentText: commentText.trim(),\n          commentType: commentType || undefined,\n          isInternal,\n        }),\n      } as any);\n\n      if (!response.ok) {\n        throw new Error('Failed to create comment');\n      }\n\n      const newComment = await response.json();\n      setComments(prev => [...prev, newComment]);\n      setCommentText('');\n      setCommentType('');\n      setIsInternal(false);\n      onCommentAdded?.();\n    } catch (error) {\n      console.error('Comment submission error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div data-testid=\"comment-section\">\n      {/* Display existing comments */}\n      <div data-testid=\"comments-list\">\n        {comments.map((comment) => (\n          <div key={comment.id} data-testid={`comment-${comment.id}`} className=\"comment\">\n            <div data-testid={`comment-author-${comment.id}`}>\n              {comment.author.firstName} {comment.author.lastName}\n            </div>\n            <div data-testid={`comment-text-${comment.id}`}>{comment.commentText}</div>\n            <div data-testid={`comment-date-${comment.id}`}>{comment.createdAt}</div>\n            {comment.isInternal && <div data-testid={`comment-internal-${comment.id}`}>Internal</div>}\n          </div>\n        ))}\n      </div>\n\n      {/* Comment submission form */}\n      <form data-testid=\"comment-form\" onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"commentText\">Comment</label>\n          <textarea\n            data-testid=\"input-comment-text\"\n            id=\"commentText\"\n            value={commentText}\n            onChange={(e) => setCommentText(e.target.value)}\n            placeholder=\"Add your comment here...\"\n            required\n            minLength={1}\n            maxLength={1000}\n            rows={4}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"commentType\">Comment Type (Optional)</label>\n          <select\n            data-testid=\"input-comment-type\"\n            id=\"commentType\"\n            value={commentType}\n            onChange={(e) => setCommentType(e.target.value)}\n          >\n            <option value=\"\">Select Type</option>\n            <option value=\"update\">Update</option>\n            <option value=\"question\">Question</option>\n            <option value=\"answer\">Answer</option>\n            <option value=\"status_change\">Status Change</option>\n            <option value=\"internal_note\">Internal Note</option>\n          </select>\n        </div>\n\n        <div>\n          <label>\n            <input\n              data-testid=\"input-is-internal\"\n              type=\"checkbox\"\n              checked={isInternal}\n              onChange={(e) => setIsInternal(e.target.checked)}\n            />\n            Internal Comment (visible to staff only)\n          </label>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-testid=\"button-submit-comment\"\n          disabled={isSubmitting || commentText.trim().length === 0}\n        >\n          {isSubmitting ? 'Adding Comment...' : 'Add Comment'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = createMockQueryClient();\n  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n};\n\ndescribe('Demand Comment Form Tests', () => {\n  // Mock console.error to avoid test output pollution\n  const originalConsoleError = console.error;\n  \n  beforeEach(() => {\n    mockFetch.mockClear();\n    // Suppress console.error during tests\n    console.error = jest.fn();\n  });\n  \n  afterAll(() => {\n    // Restore console.error after tests\n    console.error = originalConsoleError;\n  });\n\n  describe('Comment Display', () => {\n    it('should display existing comments', () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('comments-list')).toBeInTheDocument();\n      expect(screen.getByTestId('comment-comment-1')).toBeInTheDocument();\n      expect(screen.getByTestId('comment-comment-2')).toBeInTheDocument();\n\n      // Check comment content\n      expect(screen.getByTestId('comment-text-comment-1')).toHaveTextContent('First comment on this demand');\n      expect(screen.getByTestId('comment-text-comment-2')).toHaveTextContent('Second comment with more details');\n\n      // Check author information\n      expect(screen.getByTestId('comment-author-comment-1')).toHaveTextContent('Test User');\n      expect(screen.getByTestId('comment-author-comment-2')).toHaveTextContent('Other User');\n    });\n\n    it('should display comment timestamps', () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('comment-date-comment-1')).toHaveTextContent('2023-01-01T10:00:00Z');\n      expect(screen.getByTestId('comment-date-comment-2')).toHaveTextContent('2023-01-01T11:00:00Z');\n    });\n  });\n\n  describe('Comment Form Rendering', () => {\n    it('should render all form fields', () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('comment-form')).toBeInTheDocument();\n      expect(screen.getByTestId('input-comment-text')).toBeInTheDocument();\n      expect(screen.getByTestId('input-comment-type')).toBeInTheDocument();\n      expect(screen.getByTestId('input-is-internal')).toBeInTheDocument();\n      expect(screen.getByTestId('button-submit-comment')).toBeInTheDocument();\n    });\n\n    it('should render comment type options', () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-comment-type');\n      expect(typeSelect).toHaveTextContent('Update');\n      expect(typeSelect).toHaveTextContent('Question');\n      expect(typeSelect).toHaveTextContent('Answer');\n      expect(typeSelect).toHaveTextContent('Status Change');\n      expect(typeSelect).toHaveTextContent('Internal Note');\n    });\n\n    it('should have proper form field attributes', () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      expect(textArea).toHaveAttribute('required');\n      expect(textArea).toHaveAttribute('minLength', '1');\n      expect(textArea).toHaveAttribute('maxLength', '1000');\n      expect(textArea).toHaveAttribute('rows', '4');\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('should disable submit button when comment text is empty', () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const submitButton = screen.getByTestId('button-submit-comment');\n      expect(submitButton).toBeDisabled();\n    });\n\n    it('should enable submit button when comment text is provided', async () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'This is a valid comment');\n      \n      expect(submitButton).not.toBeDisabled();\n    });\n\n    it('should require comment text field', async () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const submitButton = screen.getByTestId('button-submit-comment');\n      \n      // Try to submit without text\n      await userEvent.click(submitButton);\n      \n      // Form validation should prevent submission\n      expect(mockFetch).not.toHaveBeenCalled();\n    });\n\n    it('should handle minimum and maximum text length', async () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n\n      // Test single character (minimum)\n      await userEvent.clear(textArea);\n      await userEvent.type(textArea, 'A');\n      expect(textArea).toHaveValue('A');\n\n      // Test maximum length (1000 characters)\n      const maxText = 'A'.repeat(1000);\n      await userEvent.clear(textArea);\n      await userEvent.type(textArea, maxText);\n      expect(textArea).toHaveValue(maxText);\n    });\n  });\n\n  describe('Form Submission', () => {\n    it('should submit comment successfully', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          id: 'comment-3',\n          demandId: 'demand-123',\n          commentText: 'New test comment',\n          commenterId: 'user-123',\n          isInternal: false,\n          createdAt: '2023-01-01T12:00:00Z',\n          author: {\n            id: 'user-123',\n            firstName: 'Test',\n            lastName: 'User',\n            email: 'test@example.com',\n          },\n        }),\n      } as any);\n\n      const onCommentAdded = jest.fn();\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" onCommentAdded={onCommentAdded} />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'New test comment');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commentText: 'New test comment',\n          commentType: undefined,\n          isInternal: false,\n        }),\n      } as any);\n\n      await waitFor(() => {\n        expect(onCommentAdded).toHaveBeenCalled();\n      });\n    });\n\n    it('should submit comment with optional fields', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          id: 'comment-3',\n          demandId: 'demand-123',\n          commentText: 'Internal update comment',\n          commentType: 'status_change',\n          commenterId: 'user-123',\n          isInternal: true,\n          createdAt: '2023-01-01T12:00:00Z',\n        }),\n      } as any);\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const typeSelect = screen.getByTestId('input-comment-type');\n      const internalCheckbox = screen.getByTestId('input-is-internal');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'Internal update comment');\n      await userEvent.selectOptions(typeSelect, 'status_change');\n      await userEvent.click(internalCheckbox);\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commentText: 'Internal update comment',\n          commentType: 'status_change',\n          isInternal: true,\n        }),\n      } as any);\n    });\n\n    it('should show loading state during submission', async () => {\n      mockFetch.mockImplementation(\n        () =>\n          new Promise((resolve) =>\n            setTimeout(() => resolve({ ok: true, json: async () => ({}) }), 100)\n          )\n      );\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'Loading test comment');\n      await userEvent.click(submitButton);\n\n      expect(submitButton).toHaveTextContent('Adding Comment...');\n      expect(submitButton).toBeDisabled();\n\n      await waitFor(() => {\n        expect(submitButton).toHaveTextContent('Add Comment');\n        expect(submitButton).toBeDisabled(); // Should be disabled because textarea is now empty\n      });\n    });\n\n    it('should clear form after successful submission', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          id: 'comment-3',\n          demandId: 'demand-123',\n          commentText: 'Test comment for clearing',\n          commenterId: 'user-123',\n          isInternal: false,\n          createdAt: '2023-01-01T12:00:00Z',\n        }),\n      } as any);\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const typeSelect = screen.getByTestId('input-comment-type');\n      const internalCheckbox = screen.getByTestId('input-is-internal');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      // Fill form\n      await userEvent.type(textArea, 'Test comment for clearing');\n      await userEvent.selectOptions(typeSelect, 'update');\n      await userEvent.click(internalCheckbox);\n      await userEvent.click(submitButton);\n\n      // Wait for form to clear\n      await waitFor(() => {\n        expect(textArea).toHaveValue('');\n        expect(typeSelect).toHaveValue('');\n        expect(internalCheckbox).not.toBeChecked();\n      });\n    });\n\n    it('should handle submission errors gracefully', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'Error test comment');\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        // Form should still be visible with the text after error\n        expect(textArea).toHaveValue('Error test comment');\n        expect(submitButton).toHaveTextContent('Add Comment');\n        expect(submitButton).not.toBeDisabled();\n      });\n    });\n\n    it('should handle server validation errors', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({ message: 'Comment text too long' }),\n      } as any);\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'Server error test comment');\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        // Form should remain with the text after server error\n        expect(textArea).toHaveValue('Server error test comment');\n        expect(submitButton).not.toBeDisabled();\n      });\n    });\n  });\n\n  describe('Special Characters and Internationalization', () => {\n    it('should handle French characters in comments', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          id: 'comment-3',\n          demandId: 'demand-123',\n          commentText: 'Commentaire en français avec caractères spéciaux: éàùç!',\n          commenterId: 'user-123',\n          isInternal: false,\n          createdAt: '2023-01-01T12:00:00Z',\n        }),\n      } as any);\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'Commentaire en français avec caractères spéciaux: éàùç!');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commentText: 'Commentaire en français avec caractères spéciaux: éàùç!',\n          commentType: undefined,\n          isInternal: false,\n        }),\n      } as any);\n    });\n\n    it('should handle emojis and special symbols', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          id: 'comment-3',\n          demandId: 'demand-123',\n          commentText: 'Great work! 👍 Thanks @#$%^&*()',\n          commenterId: 'user-123',\n          isInternal: false,\n          createdAt: '2023-01-01T12:00:00Z',\n        }),\n      } as any);\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, 'Great work! 👍 Thanks @#$%^&*()');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commentText: 'Great work! 👍 Thanks @#$%^&*()',\n          commentType: undefined,\n          isInternal: false,\n        }),\n      } as any);\n    });\n\n    it('should handle multiline comments', async () => {\n      const multilineText = `This is a multiline comment.\n\nIt has multiple paragraphs.\n\nEnd of comment.`;\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          id: 'comment-3',\n          demandId: 'demand-123',\n          commentText: multilineText,\n          commenterId: 'user-123',\n          isInternal: false,\n          createdAt: '2023-01-01T12:00:00Z',\n        }),\n      } as any);\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, multilineText);\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commentText: multilineText,\n          commentType: undefined,\n          isInternal: false,\n        }),\n      } as any);\n    });\n  });\n\n  describe('Form Behavior and UX', () => {\n    it('should trim whitespace from comment text before submission', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          id: 'comment-3',\n          demandId: 'demand-123',\n          commentText: 'Trimmed comment',\n          commenterId: 'user-123',\n          isInternal: false,\n          createdAt: '2023-01-01T12:00:00Z',\n        }),\n      } as any);\n\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const textArea = screen.getByTestId('input-comment-text');\n      const submitButton = screen.getByTestId('button-submit-comment');\n\n      await userEvent.type(textArea, '   Trimmed comment   ');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          commentText: 'Trimmed comment',\n          commentType: undefined,\n          isInternal: false,\n        }),\n      } as any);\n    });\n\n    it('should handle all comment types correctly', async () => {\n      const commentTypes = ['update', 'question', 'answer', 'status_change', 'internal_note'];\n      \n      for (const type of commentTypes) {\n        mockFetch.mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            id: `comment-${type}`,\n            demandId: 'demand-123',\n            commentText: `Comment of type ${type}`,\n            commentType: type,\n            commenterId: 'user-123',\n            isInternal: false,\n            createdAt: '2023-01-01T12:00:00Z',\n          }),\n        } as any);\n\n        render(\n          <TestWrapper>\n            <TestCommentForm demandId=\"demand-123\" />\n          </TestWrapper>\n        );\n\n        const textArea = screen.getByTestId('input-comment-text');\n        const typeSelect = screen.getByTestId('input-comment-type');\n        const submitButton = screen.getByTestId('button-submit-comment');\n\n        await userEvent.type(textArea, `Comment of type ${type}`);\n        await userEvent.selectOptions(typeSelect, type);\n        await userEvent.click(submitButton);\n\n        expect(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            commentText: `Comment of type ${type}`,\n            commentType: type,\n            isInternal: false,\n          }),\n        } as any);\n\n        mockFetch.mockClear();\n      }\n    });\n\n    it('should handle internal comment toggle correctly', async () => {\n      render(\n        <TestWrapper>\n          <TestCommentForm demandId=\"demand-123\" />\n        </TestWrapper>\n      );\n\n      const internalCheckbox = screen.getByTestId('input-is-internal');\n\n      // Initially unchecked\n      expect(internalCheckbox).not.toBeChecked();\n\n      // Click to check\n      await userEvent.click(internalCheckbox);\n      expect(internalCheckbox).toBeChecked();\n\n      // Click to uncheck\n      await userEvent.click(internalCheckbox);\n      expect(internalCheckbox).not.toBeChecked();\n    });\n  });\n});"],"version":3}