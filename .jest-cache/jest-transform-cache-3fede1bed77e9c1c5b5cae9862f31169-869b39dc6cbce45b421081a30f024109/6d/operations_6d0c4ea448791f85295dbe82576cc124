6e647920ba86ab0bfcccfb58ccd9f0c4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertFeatureRequestUpvoteSchema = exports.insertFeatureRequestSchema = exports.insertBugSchema = exports.insertDemandCommentSchema = exports.insertDemandSchema = exports.insertNotificationSchema = exports.insertMaintenanceRequestSchema = exports.featureRequestUpvotes = exports.featureRequests = exports.bugs = exports.demandComments = exports.demands = exports.notifications = exports.maintenanceRequests = exports.featureRequestCategoryEnum = exports.featureRequestStatusEnum = exports.bugCategoryEnum = exports.bugPriorityEnum = exports.bugStatusEnum = exports.demandStatusEnum = exports.demandTypeEnum = exports.notificationTypeEnum = exports.maintenancePriorityEnum = exports.maintenanceStatusEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const core_1 = require("./core");
const property_1 = require("./property");
// Operations enums
exports.maintenanceStatusEnum = (0, pg_core_1.pgEnum)('maintenance_status', [
    'submitted',
    'acknowledged',
    'in_progress',
    'completed',
    'cancelled',
]);
exports.maintenancePriorityEnum = (0, pg_core_1.pgEnum)('maintenance_priority', [
    'low',
    'medium',
    'high',
    'urgent',
    'emergency',
]);
exports.notificationTypeEnum = (0, pg_core_1.pgEnum)('notification_type', [
    'bill_reminder',
    'maintenance_update',
    'announcement',
    'system',
    'emergency',
]);
exports.demandTypeEnum = (0, pg_core_1.pgEnum)('demand_type', [
    'maintenance',
    'complaint',
    'information',
    'other',
]);
exports.demandStatusEnum = (0, pg_core_1.pgEnum)('demand_status', [
    'draft',
    'submitted',
    'under_review',
    'approved',
    'in_progress',
    'completed',
    'rejected',
    'cancelled',
]);
exports.bugStatusEnum = (0, pg_core_1.pgEnum)('bug_status', [
    'new',
    'acknowledged',
    'in_progress',
    'resolved',
    'closed',
]);
exports.bugPriorityEnum = (0, pg_core_1.pgEnum)('bug_priority', ['low', 'medium', 'high', 'critical']);
exports.bugCategoryEnum = (0, pg_core_1.pgEnum)('bug_category', [
    'ui_ux',
    'functionality',
    'performance',
    'data',
    'security',
    'integration',
    'other',
]);
exports.featureRequestStatusEnum = (0, pg_core_1.pgEnum)('feature_request_status', [
    'submitted',
    'under_review',
    'planned',
    'in_progress',
    'completed',
    'rejected',
]);
exports.featureRequestCategoryEnum = (0, pg_core_1.pgEnum)('feature_request_category', [
    'dashboard',
    'property_management',
    'resident_management',
    'financial_management',
    'maintenance',
    'document_management',
    'communication',
    'reports',
    'mobile_app',
    'integrations',
    'security',
    'performance',
    'other',
]);
// Operations tables
/**
 * Maintenance requests table for tracking property maintenance and repairs.
 * Supports prioritization, assignment, and cost tracking.
 */
exports.maintenanceRequests = (0, pg_core_1.pgTable)('maintenance_requests', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    residenceId: (0, pg_core_1.uuid)('residence_id')
        .notNull()
        .references(() => property_1.residences.id),
    submittedBy: (0, pg_core_1.uuid)('submitted_by')
        .notNull()
        .references(() => core_1.users.id),
    assignedTo: (0, pg_core_1.uuid)('assigned_to').references(() => core_1.users.id),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    category: (0, pg_core_1.text)('category').notNull(), // 'plumbing', 'electrical', 'hvac', 'general', etc.
    priority: (0, exports.maintenancePriorityEnum)('priority').notNull().default('medium'),
    status: (0, exports.maintenanceStatusEnum)('status').notNull().default('submitted'),
    estimatedCost: (0, pg_core_1.decimal)('estimated_cost', { precision: 10, scale: 2 }),
    actualCost: (0, pg_core_1.decimal)('actual_cost', { precision: 10, scale: 2 }),
    scheduledDate: (0, pg_core_1.timestamp)('scheduled_date'),
    completedDate: (0, pg_core_1.timestamp)('completed_date'),
    notes: (0, pg_core_1.text)('notes'),
    images: (0, pg_core_1.jsonb)('images'), // Array of image URLs
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Notifications table for system-wide user communication.
 * Supports various notification types with read tracking.
 */
exports.notifications = (0, pg_core_1.pgTable)('notifications', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.uuid)('user_id')
        .notNull()
        .references(() => core_1.users.id),
    type: (0, exports.notificationTypeEnum)('type').notNull(),
    title: (0, pg_core_1.text)('title').notNull(),
    message: (0, pg_core_1.text)('message').notNull(),
    relatedEntityId: (0, pg_core_1.uuid)('related_entity_id'), // ID of related bill, maintenance request, etc.
    relatedEntityType: (0, pg_core_1.text)('related_entity_type'), // 'bill', 'maintenance_request', etc.
    isRead: (0, pg_core_1.boolean)('is_read').notNull().default(false),
    readAt: (0, pg_core_1.timestamp)('read_at'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
/**
 * Demands table for tracking resident requests and complaints.
 * Supports various demand types with approval workflow.
 */
exports.demands = (0, pg_core_1.pgTable)('demands', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    submitterId: (0, pg_core_1.uuid)('submitter_id')
        .notNull()
        .references(() => core_1.users.id),
    type: (0, exports.demandTypeEnum)('type').notNull(),
    assignationResidenceId: (0, pg_core_1.uuid)('assignation_residence_id').references(() => property_1.residences.id),
    assignationBuildingId: (0, pg_core_1.uuid)('assignation_building_id').references(() => property_1.buildings.id),
    description: (0, pg_core_1.text)('description').notNull(),
    residenceId: (0, pg_core_1.uuid)('residence_id')
        .notNull()
        .references(() => property_1.residences.id),
    buildingId: (0, pg_core_1.uuid)('building_id')
        .notNull()
        .references(() => property_1.buildings.id),
    status: (0, exports.demandStatusEnum)('status').notNull().default('draft'),
    reviewedBy: (0, pg_core_1.uuid)('reviewed_by').references(() => core_1.users.id),
    reviewedAt: (0, pg_core_1.timestamp)('reviewed_at'),
    reviewNotes: (0, pg_core_1.text)('review_notes'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Demand comments table for tracking communication on demands.
 * Supports threaded conversations on demand requests.
 */
exports.demandComments = (0, pg_core_1.pgTable)('demands_comments', {
    id: (0, pg_core_1.text)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    demandId: (0, pg_core_1.uuid)('demand_id')
        .notNull()
        .references(() => exports.demands.id),
    commenterId: (0, pg_core_1.text)('commenter_id')
        .notNull()
        .references(() => core_1.users.id),
    commentText: (0, pg_core_1.text)('comment_text').notNull(),
    commentType: (0, pg_core_1.text)('comment_type'),
    isInternal: (0, pg_core_1.boolean)('is_internal').default(false),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Bugs table for tracking application issues and bug reports.
 * All users can create bugs with category and page assignments.
 */
exports.bugs = (0, pg_core_1.pgTable)('bugs', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    createdBy: (0, pg_core_1.uuid)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    category: (0, exports.bugCategoryEnum)('category').notNull(),
    page: (0, pg_core_1.text)('page').notNull(), // The page where the bug was found
    priority: (0, exports.bugPriorityEnum)('priority').notNull().default('medium'),
    status: (0, exports.bugStatusEnum)('status').notNull().default('new'),
    assignedTo: (0, pg_core_1.uuid)('assigned_to').references(() => core_1.users.id),
    resolvedAt: (0, pg_core_1.timestamp)('resolved_at'),
    resolvedBy: (0, pg_core_1.uuid)('resolved_by').references(() => core_1.users.id),
    notes: (0, pg_core_1.text)('notes'), // Internal notes for resolution
    reproductionSteps: (0, pg_core_1.text)('reproduction_steps'), // Steps to reproduce the bug
    environment: (0, pg_core_1.text)('environment'), // Browser, OS, device info
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Feature requests table for collecting user suggestions and ideas.
 * All users can submit feature requests with category and page assignments.
 * Supports upvoting and merging similar requests.
 */
exports.featureRequests = (0, pg_core_1.pgTable)('feature_requests', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    createdBy: (0, pg_core_1.uuid)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    need: (0, pg_core_1.text)('need').notNull(), // The specific need this feature addresses
    category: (0, exports.featureRequestCategoryEnum)('category').notNull(),
    page: (0, pg_core_1.text)('page').notNull(), // The page/section where this feature should be added
    status: (0, exports.featureRequestStatusEnum)('status').notNull().default('submitted'),
    upvoteCount: (0, pg_core_1.integer)('upvote_count').notNull().default(0),
    assignedTo: (0, pg_core_1.uuid)('assigned_to').references(() => core_1.users.id),
    reviewedBy: (0, pg_core_1.uuid)('reviewed_by').references(() => core_1.users.id),
    reviewedAt: (0, pg_core_1.timestamp)('reviewed_at'),
    adminNotes: (0, pg_core_1.text)('admin_notes'), // Internal notes for admins only
    mergedIntoId: (0, pg_core_1.uuid)('merged_into_id').references(() => exports.featureRequests.id), // If merged into another request
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Feature request upvotes table for tracking user votes on feature requests.
 * Each user can only upvote a feature request once.
 */
exports.featureRequestUpvotes = (0, pg_core_1.pgTable)('feature_request_upvotes', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    featureRequestId: (0, pg_core_1.uuid)('feature_request_id')
        .notNull()
        .references(() => exports.featureRequests.id),
    userId: (0, pg_core_1.uuid)('user_id')
        .notNull()
        .references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
// Insert schemas
exports.insertMaintenanceRequestSchema = zod_1.z.object({
    residenceId: zod_1.z.string().uuid(),
    submittedBy: zod_1.z.string().uuid(),
    assignedTo: zod_1.z.string().uuid().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    category: zod_1.z.string(),
    priority: zod_1.z.string().default('medium'),
    estimatedCost: zod_1.z.number().optional(),
    scheduledDate: zod_1.z.date().optional(),
    notes: zod_1.z.string().optional(),
    images: zod_1.z.array(zod_1.z.string()).optional(),
});
exports.insertNotificationSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    type: zod_1.z.enum(['bill_reminder', 'maintenance_update', 'announcement', 'system', 'emergency']),
    title: zod_1.z.string(),
    message: zod_1.z.string(),
    relatedEntityId: zod_1.z.string().uuid().optional(),
    relatedEntityType: zod_1.z.string().optional(),
});
exports.insertDemandSchema = zod_1.z.object({
    submitterId: zod_1.z.string().uuid(),
    type: zod_1.z.enum(['maintenance', 'complaint', 'information', 'other']),
    assignationResidenceId: zod_1.z.string().uuid().optional(),
    assignationBuildingId: zod_1.z.string().uuid().optional(),
    description: zod_1.z
        .string()
        .min(10, 'Description must be at least 10 characters')
        .max(2000, 'Description must not exceed 2000 characters'),
    residenceId: zod_1.z.string().uuid(),
    buildingId: zod_1.z.string().uuid(),
    status: zod_1.z.string().default('draft'),
    reviewNotes: zod_1.z.string().optional(),
});
exports.insertDemandCommentSchema = zod_1.z.object({
    demandId: zod_1.z.string().uuid(),
    commenterId: zod_1.z.string().uuid(),
    commentText: zod_1.z
        .string()
        .min(1, 'Comment content is required')
        .max(1000, 'Comment must not exceed 1000 characters'),
    commentType: zod_1.z.string().optional(),
    isInternal: zod_1.z.boolean().default(false),
});
exports.insertBugSchema = zod_1.z.object({
    createdBy: zod_1.z.string().uuid(),
    title: zod_1.z.string().min(1, 'Title is required').max(200, 'Title must not exceed 200 characters'),
    description: zod_1.z
        .string()
        .min(10, 'Description must be at least 10 characters')
        .max(2000, 'Description must not exceed 2000 characters'),
    category: zod_1.z.enum([
        'ui_ux',
        'functionality',
        'performance',
        'data',
        'security',
        'integration',
        'other',
    ]),
    page: zod_1.z.string().min(1, 'Page is required'),
    priority: zod_1.z.enum(['low', 'medium', 'high', 'critical']).default('medium'),
    reproductionSteps: zod_1.z.string().optional(),
    environment: zod_1.z.string().optional(),
});
exports.insertFeatureRequestSchema = zod_1.z.object({
    createdBy: zod_1.z.string().uuid(),
    title: zod_1.z.string().min(1, 'Title is required').max(200, 'Title must not exceed 200 characters'),
    description: zod_1.z
        .string()
        .min(10, 'Description must be at least 10 characters')
        .max(2000, 'Description must not exceed 2000 characters'),
    need: zod_1.z
        .string()
        .min(5, 'Need must be at least 5 characters')
        .max(500, 'Need must not exceed 500 characters'),
    category: zod_1.z.enum([
        'dashboard',
        'property_management',
        'resident_management',
        'financial_management',
        'maintenance',
        'document_management',
        'communication',
        'reports',
        'mobile_app',
        'integrations',
        'security',
        'performance',
        'other',
    ]),
    page: zod_1.z.string().min(1, 'Page is required'),
});
exports.insertFeatureRequestUpvoteSchema = zod_1.z.object({
    featureRequestId: zod_1.z.string().uuid(),
    userId: zod_1.z.string().uuid(),
});
// Relations
// Relations - temporarily commented out due to drizzle-orm version compatibility
// export const maintenanceRequestsRelations = relations(maintenanceRequests, ({ one }) => ({
//   residence: one(residences, {
//     fields: [maintenanceRequests.residenceId],
//     references: [residences.id],
//   }),
//   submittedBy: one(users, {
//     fields: [maintenanceRequests.submittedBy],
//     references: [users.id],
//     relationName: 'submittedBy',
//   }),
//   assignedTo: one(users, {
//     fields: [maintenanceRequests.assignedTo],
//     references: [users.id],
//     relationName: 'assignedTo',
//   }),
// }));
// export const notificationsRelations = relations(notifications, ({ one }) => ({
//   user: one(users, {
//     fields: [notifications.userId],
//     references: [users.id],
//   }),
// }));
// export const demandsRelations = relations(demands, ({ one, many }) => ({
//   submitter: one(users, {
//     fields: [demands.submitterId],
//     references: [users.id],
//     relationName: 'submitter',
//   }),
//   assignationResidence: one(residences, {
//     fields: [demands.assignationResidenceId],
//     references: [residences.id],
//     relationName: 'assignationResidence',
//   }),
//   assignationBuilding: one(buildings, {
//     fields: [demands.assignationBuildingId],
//     references: [buildings.id],
//     relationName: 'assignationBuilding',
//   }),
//   residence: one(residences, {
//     fields: [demands.residenceId],
//     references: [residences.id],
//     relationName: 'residence',
//   }),
//   building: one(buildings, {
//     fields: [demands.buildingId],
//     references: [buildings.id],
//     relationName: 'building',
//   }),
//   reviewedBy: one(users, {
//     fields: [demands.reviewedBy],
//     references: [users.id],
//     relationName: 'reviewedBy',
//   }),
//   comments: many(demandComments),
// }));
// export const demandCommentsRelations = relations(demandComments, ({ one }) => ({
//   demand: one(demands, {
//     fields: [demandComments.demandId],
//     references: [demands.id],
//   }),
//   createdBy: one(users, {
//     fields: [demandComments.createdBy],
//     references: [users.id],
//   }),
// }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,