{"file":"/home/runner/workspace/tests/unit/form-components.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/form-components.test.tsx"],"sourcesContent":["/**\n * Form Components Validation Test Suite\n * Tests React components to ensure they follow validation UI standards\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { describe, test, expect } from '@jest/globals';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '../../client/src/components/ui/form';\nimport { Input } from '../../client/src/components/ui/input';\nimport { Button } from '../../client/src/components/ui/button';\n\n// Test component that uses our form validation standards\nconst TestFormSchema = z.object({\n  email: z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)'),\n  name: z.string().min(1, 'Name is required (example: Jean Dupont)').max(50, 'Name must be less than 50 characters'),\n  amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),\n  phone: z.string().regex(/^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)').optional()\n});\n\ntype TestFormData = z.infer<typeof TestFormSchema>;\n\nconst TestFormComponent = () => {\n  const form = useForm<TestFormData>({\n    resolver: zodResolver(TestFormSchema),\n    defaultValues: {\n      email: '',\n      name: '',\n      amount: '',\n      phone: '',\n    },\n  });\n\n  const onSubmit = (data: TestFormData) => {\n    console.log(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} data-testid=\"test-form\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel data-testid=\"label-email\">Email Address *</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"input-email\" />\n              </FormControl>\n              <FormMessage data-testid=\"error-email\" />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel data-testid=\"label-name\">Full Name *</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"input-name\" />\n              </FormControl>\n              <FormMessage data-testid=\"error-name\" />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"amount\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel data-testid=\"label-amount\">Amount *</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"input-amount\" />\n              </FormControl>\n              <FormMessage data-testid=\"error-amount\" />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel data-testid=\"label-phone\">Phone Number</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"input-phone\" />\n              </FormControl>\n              <FormMessage data-testid=\"error-phone\" />\n            </FormItem>\n          )}\n        />\n        \n        <Button type=\"submit\" data-testid=\"submit-button\">\n          Submit\n        </Button>\n      </form>\n    </Form>\n  );\n};\n\ndescribe('Form Component Validation UI', () => {\n  describe('FormLabel Red Color Display', () => {\n    test('should display field labels in red when validation errors occur', async () => {\n      const user = userEvent.setup();\n      render(<TestFormComponent />);\n\n      // Submit form with invalid data to trigger validation errors\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Wait for validation errors to appear\n      await waitFor(() => {\n        const emailError = screen.getByTestId('error-email');\n        expect(emailError).toBeInTheDocument();\n      });\n\n      // Check that FormLabel has error styling when field has error\n      const emailLabel = screen.getByTestId('label-email');\n      const nameLabel = screen.getByTestId('label-name');\n      const amountLabel = screen.getByTestId('label-amount');\n\n      // Labels for required fields with errors should have error styling\n      expect(emailLabel).toHaveClass('text-red-600');\n      expect(nameLabel).toHaveClass('text-red-600');\n      expect(amountLabel).toHaveClass('text-red-600');\n    });\n\n    test('should not display red labels when fields are valid', async () => {\n      const user = userEvent.setup();\n      render(<TestFormComponent />);\n\n      // Fill in valid data\n      const emailInput = screen.getByTestId('input-email');\n      const nameInput = screen.getByTestId('input-name');\n      const amountInput = screen.getByTestId('input-amount');\n\n      await user.type(emailInput, 'user@domain.com');\n      await user.type(nameInput, 'Jean Dupont');\n      await user.type(amountInput, '125.50');\n\n      // Submit form\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Wait for validation to complete\n      await waitFor(() => {\n        // Check that no error messages are shown - use queryBy to avoid errors if elements don't exist\n        const emailError = screen.queryByTestId('error-email');\n        const nameError = screen.queryByTestId('error-name');\n        const amountError = screen.queryByTestId('error-amount');\n        \n        // Elements should either not exist or be empty when valid\n        if (emailError) expect(emailError).toBeEmptyDOMElement();\n        if (nameError) expect(nameError).toBeEmptyDOMElement();\n        if (amountError) expect(amountError).toBeEmptyDOMElement();\n      });\n\n      // Labels should not have error styling\n      const emailLabel = screen.getByTestId('label-email');\n      const nameLabel = screen.getByTestId('label-name');\n      const amountLabel = screen.getByTestId('label-amount');\n\n      expect(emailLabel).not.toHaveClass('text-red-600');\n      expect(nameLabel).not.toHaveClass('text-red-600');\n      expect(amountLabel).not.toHaveClass('text-red-600');\n    });\n  });\n\n  describe('Error Message Display', () => {\n    test('should display detailed error messages with examples', async () => {\n      const user = userEvent.setup();\n      render(<TestFormComponent />);\n\n      // Enter invalid data\n      const emailInput = screen.getByTestId('input-email');\n      const nameInput = screen.getByTestId('input-name');\n      const amountInput = screen.getByTestId('input-amount');\n      const phoneInput = screen.getByTestId('input-phone');\n\n      await user.type(emailInput, 'invalid-email');\n      // Clear the name field by selecting all and deleting\n      await user.clear(nameInput);\n      await user.type(amountInput, '125.555');\n      await user.type(phoneInput, '123');\n\n      // Submit to trigger validation\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Wait for error messages\n      await waitFor(() => {\n        const emailError = screen.queryByTestId('error-email');\n        const nameError = screen.queryByTestId('error-name');\n        const amountError = screen.queryByTestId('error-amount');\n        const phoneError = screen.queryByTestId('error-phone');\n\n        // Check that error messages contain examples and helpful guidance\n        if (emailError && emailError.textContent) {\n          expect(emailError.textContent).toContain('example:');\n          expect(emailError.textContent).toContain('user@domain.com');\n        }\n        \n        if (nameError && nameError.textContent) {\n          expect(nameError.textContent).toContain('example:');\n          expect(nameError.textContent).toContain('Jean Dupont');\n        }\n        \n        if (amountError && amountError.textContent) {\n          expect(amountError.textContent).toContain('decimal places');\n          expect(amountError.textContent).toContain('example:');\n          expect(amountError.textContent).toContain('125.50');\n        }\n        \n        if (phoneError && phoneError.textContent) {\n          expect(phoneError.textContent).toContain('example:');\n          expect(phoneError.textContent).toContain('(514) 123-4567');\n        }\n      });\n    });\n\n    test('should clear error messages when fields become valid', async () => {\n      const user = userEvent.setup();\n      render(<TestFormComponent />);\n\n      // First trigger an error\n      const emailInput = screen.getByTestId('input-email');\n      await user.type(emailInput, 'invalid');\n      \n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      // Wait for error to appear\n      await waitFor(() => {\n        const emailError = screen.queryByTestId('error-email');\n        expect(emailError).toBeTruthy();\n        if (emailError) {\n          expect(emailError.textContent).toContain('valid email');\n        }\n      });\n\n      // Then fix the email\n      await user.clear(emailInput);\n      await user.type(emailInput, 'user@domain.com');\n\n      // Trigger validation again\n      await user.click(submitButton);\n\n      // Wait for error to clear\n      await waitFor(() => {\n        const emailError = screen.queryByTestId('error-email');\n        if (emailError) {\n          expect(emailError).toBeEmptyDOMElement();\n        }\n      });\n    });\n  });\n\n  describe('Accessibility Compliance', () => {\n    test('should maintain proper form accessibility with validation', async () => {\n      render(<TestFormComponent />);\n\n      // Check that form fields have proper labels\n      const emailInput = screen.getByTestId('input-email');\n      const nameInput = screen.getByTestId('input-name');\n      \n      expect(emailInput).toHaveAccessibleName(/email address/i);\n      expect(nameInput).toHaveAccessibleName(/full name/i);\n\n      // Check that required fields are marked appropriately\n      const emailLabel = screen.getByTestId('label-email');\n      const nameLabel = screen.getByTestId('label-name');\n      \n      expect(emailLabel.textContent).toContain('*');\n      expect(nameLabel.textContent).toContain('*');\n    });\n\n    test('should associate error messages with form fields', async () => {\n      const user = userEvent.setup();\n      render(<TestFormComponent />);\n\n      // Trigger validation error\n      const submitButton = screen.getByTestId('submit-button');\n      await user.click(submitButton);\n\n      await waitFor(() => {\n        const emailInput = screen.getByTestId('input-email');\n        const emailError = screen.getByTestId('error-email');\n\n        // Error message should be associated with the input\n        expect(emailError).toBeInTheDocument();\n        expect(emailError.textContent).toBeTruthy();\n        \n        // Input should have aria-describedby or similar accessibility attribute\n        expect(emailInput).toBeInTheDocument();\n      });\n    });\n  });\n});\n\ndescribe('Validation Standards Enforcement', () => {\n  describe('Schema Pattern Validation', () => {\n    test('should validate that all string schemas include helpful error messages', () => {\n      // Helper function to check if a schema follows our standards\n      const validateStringSchema = (schema: z.ZodString, fieldContext: string) => {\n        // Test with different values to get different error messages\n        const testValues = ['', 'a', 'invalid-email-format'];\n        \n        for (const testValue of testValues) {\n          const testResult = schema.safeParse(testValue);\n          if (!testResult.success) {\n            const errorMessage = testResult.error.issues[0].message;\n            \n            // Requirements for good error messages:\n            // 1. Should not be just \"Required\" or \"Invalid\"\n            // 2. Should provide context about the field\n            // 3. Should include examples for format-specific fields\n            const isDescriptive = errorMessage.length > 8;\n            const isNotGeneric = !errorMessage.match(/^(required|invalid|error|wrong)$/i);\n            const hasExample = errorMessage.includes('example:') || !needsExample(fieldContext);\n            \n            if (isDescriptive && isNotGeneric && hasExample) {\n              return {\n                isDescriptive,\n                isNotGeneric,\n                hasExample,\n                message: errorMessage,\n                passes: true\n              };\n            }\n          }\n        }\n        \n        // If we got here, no good error message was found\n        return { \n          passes: false, \n          message: 'No descriptive error messages found',\n          isDescriptive: false,\n          isNotGeneric: false,\n          hasExample: false\n        };\n      };\n\n      const needsExample = (context: string) => {\n        return ['email', 'phone', 'postal', 'amount', 'time', 'date', 'name'].some(type => \n          context.toLowerCase().includes(type)\n        );\n      };\n\n      // Test various schema types that should follow our standards\n      const schemasToTest = [\n        {\n          schema: z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)'),\n          context: 'email'\n        },\n        {\n          schema: z.string().min(1, 'Name is required (example: Jean Dupont)'),\n          context: 'name'\n        },\n        {\n          schema: z.string().min(1, 'Please select an option from the dropdown'),\n          context: 'selection'\n        }\n      ];\n\n      schemasToTest.forEach(({ schema, context }) => {\n        const result = validateStringSchema(schema, context);\n        if (!result.passes) {\n          console.log(`Schema validation failed for ${context}:`, result);\n        }\n        expect(result.passes).toBe(true);\n      });\n    });\n  });\n\n  describe('Consistent Pattern Enforcement', () => {\n    test('should enforce consistent validation patterns across field types', () => {\n      // Define standard patterns that should be used consistently\n      const standardPatterns = {\n        email: {\n          regex: /\\S+@\\S+\\.\\S+/,\n          errorPattern: /valid.*email.*format.*example:/i,\n          example: 'user@domain.com'\n        },\n        phone: {\n          regex: /^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/,\n          errorPattern: /valid.*phone.*format.*example:/i,\n          example: '(514) 123-4567'\n        },\n        postalCode: {\n          regex: /^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$/,\n          errorPattern: /valid.*postal.*format.*example:/i,\n          example: 'H1A 1B1'\n        },\n        amount: {\n          regex: /^\\d+(\\.\\d{1,2})?$/,\n          errorPattern: /valid.*amount.*format.*example:/i,\n          example: '125.50'\n        }\n      };\n\n      Object.entries(standardPatterns).forEach(([fieldType, { regex, errorPattern, example }]) => {\n        // Test that the regex works correctly\n        expect(regex.test(example)).toBe(true);\n\n        // Test that error messages follow the expected pattern\n        const mockErrorMessage = `Please enter a valid ${fieldType} format (example: ${example})`;\n        expect(errorPattern.test(mockErrorMessage)).toBe(true);\n      });\n    });\n\n    test('should validate character length limits are consistently applied', () => {\n      const standardLimits = {\n        title: { min: 1, max: 200 },\n        description: { min: 10, max: 1000 },\n        shortText: { min: 1, max: 100 },\n        longText: { min: 10, max: 2000 },\n        name: { min: 1, max: 50 },\n        notes: { min: 0, max: 1000 },\n        comment: { min: 1, max: 1000 }\n      };\n\n      Object.entries(standardLimits).forEach(([fieldType, { min, max }]) => {\n        const schema = z.string()\n          .min(min, min > 0 ? `${fieldType} is required` : undefined)\n          .max(max, `${fieldType} must be less than ${max} characters`);\n\n        // Test boundary conditions\n        if (min > 0) {\n          const tooShort = 'a'.repeat(min - 1);\n          expect(schema.safeParse(tooShort).success).toBe(false);\n        }\n\n        const tooLong = 'a'.repeat(max + 1);\n        expect(schema.safeParse(tooLong).success).toBe(false);\n\n        const justRight = 'a'.repeat(min > 0 ? min : 1);\n        expect(schema.safeParse(justRight).success).toBe(true);\n      });\n    });\n  });\n\n  describe('Quebec Compliance Standards', () => {\n    test('should validate French character support in name fields', () => {\n      const nameSchema = z.string().regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Name can only contain letters, spaces, apostrophes and hyphens');\n\n      const validQuebecNames = [\n        'Jean-Baptiste',\n        'Marie-Ève',\n        'François',\n        'Michèle',\n        \"O'Connor\",\n        'Lafleur-Dufresne',\n        'José-María'\n      ];\n\n      const invalidNames = [\n        'Jean123',\n        'Marie@email',\n        'François#',\n        'Name$pecial'\n      ];\n\n      // Test valid Quebec names\n      validQuebecNames.forEach(name => {\n        expect(nameSchema.safeParse(name).success).toBe(true);\n      });\n\n      // Test invalid names\n      invalidNames.forEach(name => {\n        const result = nameSchema.safeParse(name);\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(result.error.issues[0].message).toContain('letters, spaces, apostrophes');\n        }\n      });\n    });\n\n    test('should validate Canadian postal code formats', () => {\n      const postalSchema = z.string().regex(\n        /^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$/,\n        'Postal code must follow Canadian format (example: H1A 1B1)'\n      );\n\n      const validPostalCodes = [\n        'H1A 1B1',\n        'H1A1B1',\n        'K1A 0A6',\n        'M5V 3A8',\n        'V6B 1A1'\n      ];\n\n      const invalidPostalCodes = [\n        '12345',\n        'H1A 1B',\n        'h1a 1b1',\n        'H1A-1B1',\n        'H1A  1B1'\n      ];\n\n      validPostalCodes.forEach(code => {\n        expect(postalSchema.safeParse(code).success).toBe(true);\n      });\n\n      invalidPostalCodes.forEach(code => {\n        const result = postalSchema.safeParse(code);\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(result.error.issues[0].message).toContain('Canadian format');\n          expect(result.error.issues[0].message).toContain('example:');\n        }\n      });\n    });\n  });\n\n  describe('Business Logic Validation', () => {\n    test('should validate time range logic with clear error messages', () => {\n      const timeRangeSchema = z\n        .object({\n          startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Start time must be in HH:MM format (example: 09:00)'),\n          endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'End time must be in HH:MM format (example: 11:00)'),\n        })\n        .refine(\n          (data) => {\n            const [startHour, startMin] = data.startTime.split(':').map(Number);\n            const [endHour, endMin] = data.endTime.split(':').map(Number);\n            const startMinutes = startHour * 60 + startMin;\n            const endMinutes = endHour * 60 + endMin;\n            return endMinutes > startMinutes;\n          },\n          {\n            message: 'End time must be after start time (example: start at 09:00, end at 11:00)',\n            path: ['endTime'],\n          }\n        );\n\n      // Test valid time range\n      const validResult = timeRangeSchema.safeParse({ startTime: '09:00', endTime: '11:00' });\n      expect(validResult.success).toBe(true);\n\n      // Test invalid time range\n      const invalidResult = timeRangeSchema.safeParse({ startTime: '11:00', endTime: '09:00' });\n      expect(invalidResult.success).toBe(false);\n\n      if (!invalidResult.success) {\n        const error = invalidResult.error.issues.find(issue => issue.path.includes('endTime'));\n        expect(error?.message).toContain('after start time');\n        expect(error?.message).toContain('example:');\n      }\n    });\n\n    test('should validate conditional requirements with helpful messaging', () => {\n      const conditionalSchema = z\n        .object({\n          role: z.enum(['admin', 'manager', 'tenant', 'resident']),\n          email: z.string().email('Please enter a valid email address (example: user@domain.com)').optional(),\n          firstName: z.string().min(1, 'First name is required (example: Jean)').optional(),\n          lastName: z.string().min(1, 'Last name is required (example: Dupont)').optional(),\n        })\n        .refine(\n          (data) => {\n            // For regular roles, email is required\n            if (['admin', 'manager'].includes(data.role)) {\n              return !!data.email;\n            }\n            // For tenant/resident, name is required\n            return !!data.firstName && !!data.lastName;\n          },\n          {\n            message: 'Email address is required for admin and manager roles. First and last name required for tenant and resident roles.',\n            path: ['email'],\n          }\n        );\n\n      // Test admin with email - should pass\n      expect(conditionalSchema.safeParse({\n        role: 'admin',\n        email: 'admin@domain.com'\n      }).success).toBe(true);\n\n      // Test resident with names - should pass\n      expect(conditionalSchema.safeParse({\n        role: 'resident',\n        firstName: 'Jean',\n        lastName: 'Dupont'\n      }).success).toBe(true);\n\n      // Test admin without email - should fail with helpful message\n      const adminResult = conditionalSchema.safeParse({\n        role: 'admin'\n      });\n      expect(adminResult.success).toBe(false);\n\n      if (!adminResult.success) {\n        expect(adminResult.error.issues[0].message).toContain('Email address is required for admin');\n        expect(adminResult.error.issues[0].message).toContain('First and last name required for tenant');\n      }\n    });\n  });\n});"],"version":3}