{"file":"/home/runner/workspace/node_modules/@testing-library/dom/dist/queries/text.js","mappings":"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","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/dom/dist/queries/text.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;\nvar _queryHelpers = require(\"../query-helpers\");\nvar _helpers = require(\"../helpers\");\nvar _allUtils = require(\"./all-utils\");\nconst queryAllByText = (container, text, {\n  selector = '*',\n  exact = true,\n  collapseWhitespace,\n  trim,\n  ignore = (0, _allUtils.getConfig)().defaultIgnore,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  let baseArray = [];\n  if (typeof container.matches === 'function' && container.matches(selector)) {\n    baseArray = [container];\n  }\n  return [...baseArray, ...Array.from(container.querySelectorAll(selector))]\n  // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)\n  .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));\n};\nconst getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;\nconst getMissingError = (c, text, options = {}) => {\n  const {\n    collapseWhitespace,\n    trim,\n    normalizer,\n    selector\n  } = options;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const normalizedText = matchNormalizer(text.toString());\n  const isNormalizedDifferent = normalizedText !== text.toString();\n  const isCustomSelector = (selector ?? '*') !== '*';\n  return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;\n};\nconst queryAllByTextWithSuggestions = exports.queryAllByText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');\nconst [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);\nexports.findByText = findByText;\nexports.findAllByText = findAllByText;\nexports.getByText = getByText;\nexports.getAllByText = getAllByText;\nexports.queryByText = queryByText;"],"version":3}