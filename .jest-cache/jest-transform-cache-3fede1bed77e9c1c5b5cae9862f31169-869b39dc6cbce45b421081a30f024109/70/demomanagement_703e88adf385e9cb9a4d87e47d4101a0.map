{"file":"/home/runner/workspace/server/api/demo-management.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/demo-management.ts"],"sourcesContent":["import type { Express, Request, Response } from 'express';\nimport DemoManagementService from '../services/demo-management-service';\nimport { requireAuth, requireRole } from '../auth';\n\n/**\n * Demo Management API Routes.\n *\n * Provides API endpoints for managing demo organizations in production.\n * These endpoints allow for health checks, initialization, and maintenance.\n */\n\n/**\n * Register demo management routes.\n * @param app\n */\nexport function registerDemoManagementRoutes(app: Express): void {\n  /**\n   * GET /api/demo/health\n   * Check the health status of demo organizations.\n   * Public endpoint for monitoring.\n   */\n  app.get('/api/demo/health', async (req: Request, res: Response) => {\n    try {\n      const health = await DemoManagementService.checkDemoHealth();\n\n      res.status(health.healthy ? 200 : 503).json({\n        success: true,\n        data: health,\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Demo health check failed',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * GET /api/demo/users\n   * Get demo users for login page.\n   * Public endpoint for demo mode.\n   */\n  app.get('/api/demo/users', async (req: Request, res: Response) => {\n    try {\n      // Import database connection\n      const { db } = await import('../db');\n      const { eq, and, inArray } = await import('drizzle-orm');\n      const schema = await import('../../shared/schema');\n\n      // Get Demo Test Organization\n      const demoOrg = await db.query.organizations.findFirst({\n        where: eq(schema.organizations.name, 'Demo Test Organization'),\n      });\n\n      if (!demoOrg) {\n        return res.status(404).json({\n          success: false,\n          message: 'Demo organization not found',\n        });\n      }\n\n      // Get demo users with demo roles\n      const demoUsers = await db.query.users.findMany({\n        where: and(\n          eq(schema.users.isActive, true),\n          inArray(schema.users.role, ['demo_manager', 'demo_tenant', 'demo_resident'])\n        ),\n        columns: {\n          id: true,\n          email: true,\n          firstName: true,\n          lastName: true,\n          role: true,\n        },\n      });\n\n      // Group users by role for frontend consumption\n      const usersByRole = {\n        demo_manager: demoUsers.filter(user => user.role === 'demo_manager'),\n        demo_tenant: demoUsers.filter(user => user.role === 'demo_tenant'),\n        demo_resident: demoUsers.filter(user => user.role === 'demo_resident'),\n      };\n\n      res.json({\n        success: true,\n        data: usersByRole,\n      });\n    } catch (error) {\n      console.error('❌ Error fetching demo users:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to fetch demo users',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * GET /api/demo/status\n   * Get detailed status and information about demo organizations.\n   * Requires authentication.\n   */\n  app.get('/api/demo/status', requireAuth, async (req: Request, res: Response) => {\n    try {\n      const info = await DemoManagementService.getDemoOrganizationInfo();\n\n      res.json({\n        success: true,\n        data: info,\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        message: 'Failed to get demo status',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * POST /api/demo/ensure\n   * Ensure demo organizations exist and are properly configured.\n   * Requires admin role.\n   */\n  app.post(\n    '/api/demo/ensure',\n    requireAuth,\n    requireRole(['admin']),\n    async (req: Request, res: Response) => {\n      try {\n        const result = await DemoManagementService.ensureDemoOrganizations();\n\n        res.status(result.success ? 200 : 500).json({\n          success: result.success,\n          message: result.message,\n          data: {\n            demoOrgId: result.demoOrgId,\n            openDemoOrgId: result.openDemoOrgId,\n          },\n        });\n      } catch (error) {\n        res.status(500).json({\n          success: false,\n          message: 'Failed to ensure demo organizations',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/demo/recreate\n   * Force recreation of demo organizations with fresh data.\n   * Requires admin role. This is a destructive operation.\n   */\n  app.post(\n    '/api/demo/recreate',\n    requireAuth,\n    requireRole(['admin']),\n    async (req: Request, res: Response) => {\n      try {\n        const result = await DemoManagementService.recreateDemoOrganizations();\n\n        res.status(result.success ? 200 : 500).json({\n          success: result.success,\n          message: result.message,\n          data: {\n            demoOrgId: result.demoOrgId,\n            openDemoOrgId: result.openDemoOrgId,\n          },\n        });\n      } catch (error) {\n        res.status(500).json({\n          success: false,\n          message: 'Failed to recreate demo organizations',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/demo/maintenance\n   * Run scheduled maintenance on demo organizations.\n   * Requires admin role.\n   */\n  app.post(\n    '/api/demo/maintenance',\n    requireAuth,\n    requireRole(['admin']),\n    async (req: Request, res: Response) => {\n      try {\n        const result = await DemoManagementService.scheduledMaintenance();\n\n        res.status(result.success ? 200 : 500).json({\n          success: result.success,\n          message: result.message,\n          data: {\n            actions: result.actions,\n          },\n        });\n      } catch (error) {\n        res.status(500).json({\n          success: false,\n          message: 'Failed to run demo maintenance',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  console.log('✅ Demo management API routes registered');\n}\n"],"version":3}