5d38e1a3cd6ed8debab4b9843e98eab9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarView = CalendarView;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const date_fns_1 = require("date-fns");
const locale_1 = require("date-fns/locale");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const select_1 = require("@/components/ui/select");
const tooltip_1 = require("@/components/ui/tooltip");
const lucide_react_1 = require("lucide-react");
const queryClient_1 = require("@/lib/queryClient");
const use_language_1 = require("@/hooks/use-language");
const use_auth_1 = require("@/hooks/use-auth");
/**
 *
 * @param root0
 * @param root0.spaceId
 * @param root0.buildingId
 * @param root0.mode
 * @param root0.onEventClick
 * @param root0.onDateClick
 * @param root0.showControls
 * @param root0.className
 */
function CalendarView({ spaceId, buildingId, mode, onEventClick, onDateClick, showControls = true, className = '', }) {
    const { t, language } = (0, use_language_1.useLanguage)();
    const { user } = (0, use_auth_1.useAuth)();
    const [currentDate, setCurrentDate] = (0, react_1.useState)(new Date());
    const [viewMode, setViewMode] = (0, react_1.useState)('month');
    const queryClient = (0, react_query_1.useQueryClient)();
    const startDate = (0, date_fns_1.startOfMonth)(currentDate).toISOString();
    const endDate = (0, date_fns_1.endOfMonth)(currentDate).toISOString();
    // Build API URL based on mode
    const apiUrl = (0, react_1.useMemo)(() => {
        const params = new URLSearchParams({
            start_date: startDate,
            end_date: endDate,
            view: viewMode,
        });
        if (mode === 'space' && spaceId) {
            return `/api/common-spaces/calendar/${spaceId}?${params}`;
        }
        else if (mode === 'building' && buildingId) {
            return `/api/common-spaces/calendar/building/${buildingId}?${params}`;
        }
        else if (mode === 'user') {
            return `/api/common-spaces/user-calendar?${params}`;
        }
        return null;
    }, [mode, spaceId, buildingId, startDate, endDate, viewMode]);
    const { data, isLoading, error } = (0, react_query_1.useQuery)({
        queryKey: ['calendar', mode, spaceId, buildingId, startDate, endDate, viewMode],
        queryFn: async () => {
            if (!apiUrl) {
                return null;
            }
            try {
                const response = await (0, queryClient_1.apiRequest)('GET', apiUrl);
                return await response.json();
            }
            catch (error) {
                // Handle authentication errors specifically - suppress for timing issues
                if (error.message?.includes('401')) {
                    throw new Error('Authentication required for calendar access');
                }
                throw error;
            }
        },
        enabled: !!apiUrl && !!user && !!user.id,
        retry: (failureCount, error) => {
            // Don't retry on auth errors
            if (error?.message?.includes('Authentication required')) {
                return false;
            }
            return failureCount < 2;
        },
    });
    const monthDays = (0, react_1.useMemo)(() => {
        const start = (0, date_fns_1.startOfMonth)(currentDate);
        const end = (0, date_fns_1.endOfMonth)(currentDate);
        return (0, date_fns_1.eachDayOfInterval)({ start, end });
    }, [currentDate]);
    const getEventsForDay = (day) => {
        if (!data?.calendar) {
            return [];
        }
        const events = data.calendar.events || data.calendar.bookings || [];
        return events.filter((event) => (0, date_fns_1.isSameDay)((0, date_fns_1.parseISO)(event.startTime), day) && event.status === 'confirmed');
    };
    const formatEventTime = (startTime, endTime) => {
        const start = (0, date_fns_1.parseISO)(startTime);
        const end = (0, date_fns_1.parseISO)(endTime);
        const locale = language === 'fr' ? locale_1.fr : undefined;
        return `${(0, date_fns_1.format)(start, 'HH:mm', { locale })} - ${(0, date_fns_1.format)(end, 'HH:mm', { locale })}`;
    };
    const getEventDisplayName = (event) => {
        if (mode === 'user') {
            return event.spaceName || event.userName;
        }
        if (data?.permissions?.canViewDetails || event.isOwnBooking) {
            return event.userName;
        }
        return event.userName === 'Déjà Réservé' ? 'Déjà Réservé' : 'Réservé';
    };
    const goToPrevMonth = () => {
        setCurrentDate((prev) => {
            const newDate = new Date(prev);
            newDate.setMonth(prev.getMonth() - 1);
            return newDate;
        });
    };
    const goToNextMonth = () => {
        setCurrentDate((prev) => {
            const newDate = new Date(prev);
            newDate.setMonth(prev.getMonth() + 1);
            return newDate;
        });
    };
    if (error) {
        const isAuthError = error.message?.includes('Authentication required') || error.message?.includes('401');
        return ((0, jsx_runtime_1.jsx)(card_1.Card, { className: className, children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center space-y-3', "data-testid": 'calendar-error', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-red-600', children: isAuthError
                                ? language === 'fr'
                                    ? 'Authentification requise pour le calendrier'
                                    : 'Authentication required for calendar'
                                : language === 'fr'
                                    ? 'Erreur lors du chargement du calendrier'
                                    : 'Error loading calendar' }), isAuthError && ((0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: language === 'fr'
                                ? 'Veuillez vous reconnecter pour accéder au calendrier'
                                : 'Please sign in again to access the calendar' })), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => queryClient.invalidateQueries({ queryKey: ['calendar'] }), "data-testid": 'retry-calendar', children: language === 'fr' ? 'Réessayer' : 'Retry' })] }) }) }));
    }
    return ((0, jsx_runtime_1.jsx)(tooltip_1.TooltipProvider, { children: (0, jsx_runtime_1.jsxs)(card_1.Card, { className: className, "data-testid": 'calendar-view', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'pb-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'h-5 w-5' }), mode === 'space' && data?.space?.name && (0, jsx_runtime_1.jsx)("span", { children: data.space.name }), mode === 'user' && ((0, jsx_runtime_1.jsx)("span", { children: language === 'fr' ? 'Mon Calendrier' : 'My Calendar' })), mode === 'building' && data?.building?.name && ((0, jsx_runtime_1.jsxs)("span", { children: [data.building.name, " - ", language === 'fr' ? 'Calendrier' : 'Calendar'] }))] }), showControls && ((0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-2', children: (0, jsx_runtime_1.jsxs)(select_1.Select, { value: viewMode, onValueChange: (value) => setViewMode(value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-32', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'month', children: language === 'fr' ? 'Mois' : 'Month' }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'week', children: language === 'fr' ? 'Semaine' : 'Week' })] })] }) }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: goToPrevMonth, "data-testid": 'prev-month', children: (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeft, { className: 'h-4 w-4' }) }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', "data-testid": 'current-month', children: (0, date_fns_1.format)(currentDate, 'MMMM yyyy', { locale: language === 'fr' ? locale_1.fr : undefined }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: goToNextMonth, "data-testid": 'next-month', children: (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: 'h-4 w-4' }) })] }), data?.summary && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 text-sm text-muted-foreground', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsxs)("span", { children: [data.summary.totalBookings, " ", language === 'fr' ? 'réservations' : 'bookings'] })] }), data.summary.totalHours && ((0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-1', children: (0, jsx_runtime_1.jsxs)("span", { children: [Math.round(data.summary.totalHours * 10) / 10, "h"] }) })), data.summary.uniqueUsers && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsxs)("span", { children: [data.summary.uniqueUsers, " ", language === 'fr' ? 'utilisateurs' : 'users'] })] }))] }))] })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: isLoading ? ((0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-center py-12', "data-testid": 'calendar-loading', children: (0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-primary' }) })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-7 gap-1', children: [['L', 'M', 'M', 'J', 'V', 'S', 'D'].map((day, index) => ((0, jsx_runtime_1.jsx)("div", { className: 'p-2 text-center text-sm font-medium text-muted-foreground border-b', children: day }, index))), monthDays.map((day, index) => {
                                        const dayEvents = getEventsForDay(day);
                                        const isCurrentDay = (0, date_fns_1.isToday)(day);
                                        return ((0, jsx_runtime_1.jsxs)("div", { className: `
                        min-h-[80px] p-1 border border-border/50 
                        ${isCurrentDay ? 'bg-primary/10 border-primary/30' : 'bg-card hover:bg-muted/50'}
                        transition-colors cursor-pointer
                      `, onClick: () => onDateClick?.(day), "data-testid": `calendar-day-${(0, date_fns_1.format)(day, 'yyyy-MM-dd')}`, children: [(0, jsx_runtime_1.jsx)("div", { className: `text-xs font-medium mb-1 ${isCurrentDay ? 'text-primary' : 'text-foreground'}`, children: (0, date_fns_1.format)(day, 'd') }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-0.5', children: [dayEvents.slice(0, 2).map((event, eventIndex) => ((0, jsx_runtime_1.jsxs)(tooltip_1.Tooltip, { children: [(0, jsx_runtime_1.jsx)(tooltip_1.TooltipTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)("div", { className: `
                                  text-xs p-1 rounded truncate cursor-pointer
                                  ${event.isOwnBooking
                                                                            ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 border border-green-200 dark:border-green-800'
                                                                            : data?.permissions?.canViewDetails
                                                                                ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 border border-blue-200 dark:border-blue-800'
                                                                                : 'bg-gray-100 dark:bg-gray-900/30 text-gray-600 dark:text-gray-400 border border-gray-200 dark:border-gray-800'}
                                `, onClick: () => onEventClick?.(event), "data-testid": `calendar-event-${event.id}`, children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [event.isOwnBooking && (0, jsx_runtime_1.jsx)(lucide_react_1.User, { className: 'h-3 w-3' }), data?.permissions?.canViewDetails && !event.isOwnBooking && ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-3 w-3' })), !data?.permissions?.canViewDetails && !event.isOwnBooking && ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-3 w-3' })), (0, jsx_runtime_1.jsx)("span", { className: 'truncate', children: getEventDisplayName(event) })] }) }) }), (0, jsx_runtime_1.jsx)(tooltip_1.TooltipContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1', children: [(0, jsx_runtime_1.jsx)("p", { className: 'font-medium', children: getEventDisplayName(event) }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs', children: formatEventTime(event.startTime, event.endTime) }), mode === 'user' && event.spaceName && ((0, jsx_runtime_1.jsx)("p", { className: 'text-xs opacity-80', children: event.spaceName })), mode === 'user' && event.buildingName && ((0, jsx_runtime_1.jsx)("p", { className: 'text-xs opacity-80', children: event.buildingName })), data?.permissions?.canViewDetails && event.userEmail && ((0, jsx_runtime_1.jsx)("p", { className: 'text-xs opacity-80', children: event.userEmail }))] }) })] }, eventIndex))), dayEvents.length > 2 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-muted-foreground', children: ["+", dayEvents.length - 2, " ", language === 'fr' ? 'autres' : 'more'] }))] })] }, index));
                                    })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-center gap-6 pt-4 border-t', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-3 h-3 rounded bg-green-200 border border-green-300' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-muted-foreground', children: language === 'fr' ? 'Mes réservations' : 'My bookings' })] }), data?.permissions?.canViewDetails ? ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-3 h-3 rounded bg-blue-200 border border-blue-300' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-muted-foreground', children: language === 'fr' ? 'Autres réservations' : 'Other bookings' })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-3 h-3 rounded bg-gray-200 border border-gray-300' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-muted-foreground', children: language === 'fr' ? 'Déjà réservé' : 'Already reserved' })] }))] })] })) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,