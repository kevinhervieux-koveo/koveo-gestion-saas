0062d74a0c0e43b21cb47b621e6c4b71
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextFocus = getNextFocus;
const index_js_1 = require("../classes/index.js");
const dateMatchModifiers_js_1 = require("../utils/dateMatchModifiers.js");
const getFocusableDate_js_1 = require("./getFocusableDate.js");
/**
 * Determines the next focusable day in the calendar.
 *
 * This function recursively calculates the next focusable day based on the
 * movement direction and modifiers applied to the days.
 *
 * @param moveBy The unit of movement (e.g., "day", "week").
 * @param moveDir The direction of movement ("before" or "after").
 * @param refDay The currently focused day.
 * @param calendarStartMonth The earliest month the user can navigate to.
 * @param calendarEndMonth The latest month the user can navigate to.
 * @param props The DayPicker props, including modifiers and configuration
 *   options.
 * @param dateLib The date library to use for date manipulation.
 * @param attempt The current recursion attempt (used to limit recursion depth).
 * @returns The next focusable day, or `undefined` if no focusable day is found.
 */
function getNextFocus(moveBy, moveDir, refDay, calendarStartMonth, calendarEndMonth, props, dateLib, attempt = 0) {
    if (attempt > 365) {
        // Limit the recursion to 365 attempts
        return undefined;
    }
    const focusableDate = (0, getFocusableDate_js_1.getFocusableDate)(moveBy, moveDir, refDay.date, calendarStartMonth, calendarEndMonth, props, dateLib);
    const isDisabled = Boolean(props.disabled &&
        (0, dateMatchModifiers_js_1.dateMatchModifiers)(focusableDate, props.disabled, dateLib));
    const isHidden = Boolean(props.hidden && (0, dateMatchModifiers_js_1.dateMatchModifiers)(focusableDate, props.hidden, dateLib));
    const targetMonth = focusableDate;
    const focusDay = new index_js_1.CalendarDay(focusableDate, targetMonth, dateLib);
    if (!isDisabled && !isHidden) {
        return focusDay;
    }
    // Recursively attempt to find the next focusable date
    return getNextFocus(moveBy, moveDir, focusDay, calendarStartMonth, calendarEndMonth, props, dateLib, attempt + 1);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE5leHRGb2N1cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNwQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNsRCxNQUFNLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQzFFLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDL0Q7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxTQUFTLFlBQVksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sR0FBRyxDQUFDO0lBQzVHLElBQUksT0FBTyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLHNDQUFzQztRQUN0QyxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBQ0QsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLEVBQUUscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RKLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUTtRQUNyQyxDQUFDLENBQUMsRUFBRSx1QkFBdUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDN0YsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLEVBQUUsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hJLE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQztJQUNsQyxNQUFNLFFBQVEsR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRixJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDM0IsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUNELHNEQUFzRDtJQUN0RCxPQUFPLFlBQVksQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0SCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL3JlYWN0LWRheS1waWNrZXIvZGlzdC9janMvaGVscGVycy9nZXROZXh0Rm9jdXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE5leHRGb2N1cyA9IGdldE5leHRGb2N1cztcbmNvbnN0IGluZGV4X2pzXzEgPSByZXF1aXJlKFwiLi4vY2xhc3Nlcy9pbmRleC5qc1wiKTtcbmNvbnN0IGRhdGVNYXRjaE1vZGlmaWVyc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2RhdGVNYXRjaE1vZGlmaWVycy5qc1wiKTtcbmNvbnN0IGdldEZvY3VzYWJsZURhdGVfanNfMSA9IHJlcXVpcmUoXCIuL2dldEZvY3VzYWJsZURhdGUuanNcIik7XG4vKipcbiAqIERldGVybWluZXMgdGhlIG5leHQgZm9jdXNhYmxlIGRheSBpbiB0aGUgY2FsZW5kYXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZWN1cnNpdmVseSBjYWxjdWxhdGVzIHRoZSBuZXh0IGZvY3VzYWJsZSBkYXkgYmFzZWQgb24gdGhlXG4gKiBtb3ZlbWVudCBkaXJlY3Rpb24gYW5kIG1vZGlmaWVycyBhcHBsaWVkIHRvIHRoZSBkYXlzLlxuICpcbiAqIEBwYXJhbSBtb3ZlQnkgVGhlIHVuaXQgb2YgbW92ZW1lbnQgKGUuZy4sIFwiZGF5XCIsIFwid2Vla1wiKS5cbiAqIEBwYXJhbSBtb3ZlRGlyIFRoZSBkaXJlY3Rpb24gb2YgbW92ZW1lbnQgKFwiYmVmb3JlXCIgb3IgXCJhZnRlclwiKS5cbiAqIEBwYXJhbSByZWZEYXkgVGhlIGN1cnJlbnRseSBmb2N1c2VkIGRheS5cbiAqIEBwYXJhbSBjYWxlbmRhclN0YXJ0TW9udGggVGhlIGVhcmxpZXN0IG1vbnRoIHRoZSB1c2VyIGNhbiBuYXZpZ2F0ZSB0by5cbiAqIEBwYXJhbSBjYWxlbmRhckVuZE1vbnRoIFRoZSBsYXRlc3QgbW9udGggdGhlIHVzZXIgY2FuIG5hdmlnYXRlIHRvLlxuICogQHBhcmFtIHByb3BzIFRoZSBEYXlQaWNrZXIgcHJvcHMsIGluY2x1ZGluZyBtb2RpZmllcnMgYW5kIGNvbmZpZ3VyYXRpb25cbiAqICAgb3B0aW9ucy5cbiAqIEBwYXJhbSBkYXRlTGliIFRoZSBkYXRlIGxpYnJhcnkgdG8gdXNlIGZvciBkYXRlIG1hbmlwdWxhdGlvbi5cbiAqIEBwYXJhbSBhdHRlbXB0IFRoZSBjdXJyZW50IHJlY3Vyc2lvbiBhdHRlbXB0ICh1c2VkIHRvIGxpbWl0IHJlY3Vyc2lvbiBkZXB0aCkuXG4gKiBAcmV0dXJucyBUaGUgbmV4dCBmb2N1c2FibGUgZGF5LCBvciBgdW5kZWZpbmVkYCBpZiBubyBmb2N1c2FibGUgZGF5IGlzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBnZXROZXh0Rm9jdXMobW92ZUJ5LCBtb3ZlRGlyLCByZWZEYXksIGNhbGVuZGFyU3RhcnRNb250aCwgY2FsZW5kYXJFbmRNb250aCwgcHJvcHMsIGRhdGVMaWIsIGF0dGVtcHQgPSAwKSB7XG4gICAgaWYgKGF0dGVtcHQgPiAzNjUpIHtcbiAgICAgICAgLy8gTGltaXQgdGhlIHJlY3Vyc2lvbiB0byAzNjUgYXR0ZW1wdHNcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZm9jdXNhYmxlRGF0ZSA9ICgwLCBnZXRGb2N1c2FibGVEYXRlX2pzXzEuZ2V0Rm9jdXNhYmxlRGF0ZSkobW92ZUJ5LCBtb3ZlRGlyLCByZWZEYXkuZGF0ZSwgY2FsZW5kYXJTdGFydE1vbnRoLCBjYWxlbmRhckVuZE1vbnRoLCBwcm9wcywgZGF0ZUxpYik7XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IEJvb2xlYW4ocHJvcHMuZGlzYWJsZWQgJiZcbiAgICAgICAgKDAsIGRhdGVNYXRjaE1vZGlmaWVyc19qc18xLmRhdGVNYXRjaE1vZGlmaWVycykoZm9jdXNhYmxlRGF0ZSwgcHJvcHMuZGlzYWJsZWQsIGRhdGVMaWIpKTtcbiAgICBjb25zdCBpc0hpZGRlbiA9IEJvb2xlYW4ocHJvcHMuaGlkZGVuICYmICgwLCBkYXRlTWF0Y2hNb2RpZmllcnNfanNfMS5kYXRlTWF0Y2hNb2RpZmllcnMpKGZvY3VzYWJsZURhdGUsIHByb3BzLmhpZGRlbiwgZGF0ZUxpYikpO1xuICAgIGNvbnN0IHRhcmdldE1vbnRoID0gZm9jdXNhYmxlRGF0ZTtcbiAgICBjb25zdCBmb2N1c0RheSA9IG5ldyBpbmRleF9qc18xLkNhbGVuZGFyRGF5KGZvY3VzYWJsZURhdGUsIHRhcmdldE1vbnRoLCBkYXRlTGliKTtcbiAgICBpZiAoIWlzRGlzYWJsZWQgJiYgIWlzSGlkZGVuKSB7XG4gICAgICAgIHJldHVybiBmb2N1c0RheTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgYXR0ZW1wdCB0byBmaW5kIHRoZSBuZXh0IGZvY3VzYWJsZSBkYXRlXG4gICAgcmV0dXJuIGdldE5leHRGb2N1cyhtb3ZlQnksIG1vdmVEaXIsIGZvY3VzRGF5LCBjYWxlbmRhclN0YXJ0TW9udGgsIGNhbGVuZGFyRW5kTW9udGgsIHByb3BzLCBkYXRlTGliLCBhdHRlbXB0ICsgMSk7XG59XG4iXSwidmVyc2lvbiI6M30=