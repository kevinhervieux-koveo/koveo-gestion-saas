9857e7f54c56311860e6216adb2aceac
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Invoices;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const select_1 = require("@/components/ui/select");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const checkbox_1 = require("@/components/ui/checkbox");
const popover_1 = require("@/components/ui/popover");
const lucide_react_1 = require("lucide-react");
const BuildingSelectionGrid_1 = require("@/components/BuildingSelectionGrid");
const react_query_1 = require("@tanstack/react-query");
const queryClient_1 = require("@/lib/queryClient");
const utils_1 = require("@/lib/utils");
// Import new modern components
const invoice_management_1 = require("@/components/invoice-management");
const MONTHS = [
    { value: '1', label: 'January' },
    { value: '2', label: 'February' },
    { value: '3', label: 'March' },
    { value: '4', label: 'April' },
    { value: '5', label: 'May' },
    { value: '6', label: 'June' },
    { value: '7', label: 'July' },
    { value: '8', label: 'August' },
    { value: '9', label: 'September' },
    { value: '10', label: 'October' },
    { value: '11', label: 'November' },
    { value: '12', label: 'December' },
];
function Invoices() {
    const [filters, setFilters] = (0, react_1.useState)({
        buildingId: '',
        paymentType: '',
        year: new Date().getFullYear().toString(),
        months: [],
    });
    const [showCreateDialog, setShowCreateDialog] = (0, react_1.useState)(false);
    const queryClient = (0, react_query_1.useQueryClient)();
    // Fetch buildings for filter dropdown
    const { data: buildings = [], isLoading: buildingsLoading, error: buildingsError, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/buildings'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/buildings');
            return await response.json();
        },
    });
    // Fetch invoices based on filters
    const { data: invoicesResponse = { success: true, data: [], count: 0 }, isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/invoices', filters],
        queryFn: async () => {
            const params = new URLSearchParams();
            if (filters.buildingId) {
                params.set('buildingId', filters.buildingId);
            }
            if (filters.paymentType && filters.paymentType !== 'all') {
                params.set('paymentType', filters.paymentType);
            }
            if (filters.year) {
                params.set('year', filters.year);
            }
            if (filters.months.length > 0) {
                params.set('months', filters.months.join(','));
            }
            const url = `/api/invoices${params.toString() ? '?' + params.toString() : ''}`;
            const response = await fetch(url, { credentials: 'include' });
            if (!response.ok) {
                throw new Error(`Failed to fetch invoices: ${response.statusText}`);
            }
            return response.json();
        },
    });
    const invoices = invoicesResponse.data || [];
    // Group invoices by payment type
    const invoicesByType = invoices.reduce((acc, invoice) => {
        const type = invoice.paymentType || 'one-time';
        if (!acc[type]) {
            acc[type] = [];
        }
        acc[type].push(invoice);
        return acc;
    }, {});
    const handleFilterChange = (key, value) => {
        setFilters((prev) => ({ ...prev, [key]: value }));
    };
    const handleMonthToggle = (monthValue) => {
        setFilters((prev) => ({
            ...prev,
            months: prev.months.includes(monthValue)
                ? prev.months.filter((m) => m !== monthValue)
                : [...prev.months, monthValue],
        }));
    };
    const handleAllMonthsToggle = () => {
        const allMonthValues = MONTHS.map((m) => m.value);
        setFilters((prev) => ({
            ...prev,
            months: prev.months.length === allMonthValues.length ? [] : allMonthValues,
        }));
    };
    const getMonthsDisplayText = () => {
        if (filters.months.length === 0) {
            return 'All months';
        }
        if (filters.months.length === MONTHS.length) {
            return 'All months';
        }
        if (filters.months.length === 1) {
            const month = MONTHS.find((m) => m.value === filters.months[0]);
            return month?.label || 'All months';
        }
        return `${filters.months.length} months`;
    };
    const currentYear = new Date().getFullYear();
    const getYearOptions = () => {
        const startYear = currentYear - 3;
        const endYear = currentYear + 3;
        const totalYears = endYear - startYear + 1;
        return Array.from({ length: totalYears }, (_, i) => startYear + i);
    };
    // Show loading state while buildings are loading
    if (buildingsLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden", children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: "Invoice Management", subtitle: "Modern AI-powered invoice processing and management" }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Loading buildings..." })] }) })] }));
    }
    // Show error state if buildings failed to load
    if (buildingsError) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden", children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: "Invoice Management", subtitle: "Modern AI-powered invoice processing and management" }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-red-500 mb-4", children: "Failed to load buildings" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => window.location.reload(), className: "px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700", children: "Retry" })] }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden", children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: "Invoice Management", subtitle: "Modern AI-powered invoice processing and management" }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 overflow-auto p-6", children: (0, jsx_runtime_1.jsxs)("div", { className: "max-w-7xl mx-auto space-y-6", children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: "w-5 h-5" }), "Filters"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-5 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "building-filter", className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: "w-4 h-4" }), "Building"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.buildingId, onValueChange: (value) => handleFilterChange('buildingId', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: "building-filter", "data-testid": "select-building-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select building" }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: Array.isArray(buildings) &&
                                                                    buildings.map((building) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: building.id, children: building.name }, building.id))) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "payment-type-filter", className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Receipt, { className: "w-4 h-4" }), "Payment Type"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.paymentType, onValueChange: (value) => handleFilterChange('paymentType', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: "payment-type-filter", "data-testid": "select-payment-type-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "All types" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "all", children: "All types" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "one-time", children: "One-time" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "recurring", children: "Recurring" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "year-filter", className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: "w-4 h-4" }), "Year"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.year, onValueChange: (value) => handleFilterChange('year', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: "year-filter", "data-testid": "select-year-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { className: "max-h-[300px] overflow-y-auto", children: getYearOptions().map((year) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: year.toString(), children: [year, year === currentYear && ((0, jsx_runtime_1.jsx)("span", { className: "ml-2 text-xs text-blue-500", children: "(Current)" }))] }, year))) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: "w-4 h-4" }), "Months"] }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: (0, utils_1.cn)('w-full justify-between', filters.months.length === 0 && 'text-muted-foreground'), "data-testid": "select-months-filter", children: [getMonthsDisplayText(), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: "ml-2 h-4 w-4 shrink-0 opacity-50" })] }) }), (0, jsx_runtime_1.jsxs)(popover_1.PopoverContent, { className: "w-64 p-0", align: "start", children: [(0, jsx_runtime_1.jsx)("div", { className: "border-b p-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: "all-months", checked: filters.months.length === MONTHS.length, onCheckedChange: handleAllMonthsToggle }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "all-months", className: "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", children: "All Months" })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-2 gap-2 p-3", children: MONTHS.map((month) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: `month-${month.value}`, checked: filters.months.includes(month.value), onCheckedChange: () => handleMonthToggle(month.value) }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `month-${month.value}`, className: "text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", children: month.label })] }, month.value))) })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "invisible", children: "Actions" }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: showCreateDialog, onOpenChange: setShowCreateDialog, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { className: "w-full", disabled: !filters.buildingId, "data-testid": "button-create-invoice", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Create Invoice"] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-4xl max-h-[90vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Create New Invoice" }) }), (0, jsx_runtime_1.jsx)(invoice_management_1.InvoiceForm, { mode: "create", buildingId: filters.buildingId, onSuccess: () => {
                                                                            setShowCreateDialog(false);
                                                                            queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });
                                                                        }, onCancel: () => setShowCreateDialog(false) })] })] })] })] }) })] }), !filters.buildingId ? ((0, jsx_runtime_1.jsx)(BuildingSelectionGrid_1.BuildingSelectionGrid, { buildings: Array.isArray(buildings) ? buildings : [], onBuildingSelect: (buildingId) => handleFilterChange('buildingId', buildingId) })) : isLoading ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500", children: "Loading invoices..." })] }) })) : invoices.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-8 text-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Receipt, { className: "w-16 h-16 mx-auto mb-4 text-muted-foreground" }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-600 mb-2", children: "No Invoices Found" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500 mb-4", children: "No invoices found for the selected filters. Create your first invoice to get started." }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => setShowCreateDialog(true), "data-testid": "button-create-first-invoice", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Create First Invoice"] })] }) })) : ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [invoicesByType['one-time'] && invoicesByType['one-time'].length > 0 && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "flex items-center justify-between", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5" }), "One-time Invoices", (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", children: invoicesByType['one-time'].length })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: invoicesByType['one-time'].map((invoice) => ((0, jsx_runtime_1.jsx)(invoice_management_1.InvoiceCard, { invoice: invoice, onUpdate: () => queryClient.invalidateQueries({ queryKey: ['/api/invoices'] }) }, invoice.id))) }) })] })), invoicesByType['recurring'] && invoicesByType['recurring'].length > 0 && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "flex items-center justify-between", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Receipt, { className: "w-5 h-5" }), "Recurring Invoices", (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "default", children: invoicesByType['recurring'].length })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: invoicesByType['recurring'].map((invoice) => ((0, jsx_runtime_1.jsx)(invoice_management_1.InvoiceCard, { invoice: invoice, onUpdate: () => queryClient.invalidateQueries({ queryKey: ['/api/invoices'] }) }, invoice.id))) }) })] }))] }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL3BhZ2VzL21hbmFnZXIvaW52b2ljZXMudHN4IiwibWFwcGluZ3MiOiI7O0FBZ0VBLDJCQXNaQzs7QUF0ZEQsaUNBQWlDO0FBQ2pDLHVEQUFvRDtBQUNwRCwrQ0FBZ0Y7QUFDaEYsaURBQThDO0FBQzlDLG1EQUFnRDtBQUNoRCxtREFNZ0M7QUFFaEMsaURBQThDO0FBQzlDLG1EQU1nQztBQUNoQyx1REFBb0Q7QUFDcEQscURBQWtGO0FBQ2xGLCtDQVFzQjtBQUN0Qiw4RUFBMkU7QUFDM0UsdURBQWlFO0FBQ2pFLG1EQUErQztBQUMvQyx1Q0FBaUM7QUFJakMsK0JBQStCO0FBQy9CLHdFQUEyRTtBQVMzRSxNQUFNLE1BQU0sR0FBRztJQUNiLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQ2hDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO0lBQ2pDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzlCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzlCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0lBQzVCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0lBQzdCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0lBQzdCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO0lBQy9CLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQ2xDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQ2pDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFF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QUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxJQUZ6RSxPQUFPLENBQUMsRUFBRSxDQUdmLENBQ0gsQ0FBQyxHQUNFLEdBQ00sSUFDVCxDQUNSLEVBR0EsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQ3hFLHdCQUFDLFdBQUksZUFDSCx1QkFBQyxpQkFBVSxjQUNULHVCQUFDLGdCQUFTLElBQUMsU0FBUyxFQUFDLG1DQUFtQyxZQUN0RCxpQ0FBSyxTQUFTLEVBQUMseUJBQXlCLGFBQ3RDLHVCQUFDLHNCQUFPLElBQUMsU0FBUyxFQUFDLFNBQVMsR0FBRyx3QkFFL0IsdUJBQUMsYUFBSyxJQUFDLE9BQU8sRUFBQyxTQUFTLFlBQUUsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sR0FBUyxJQUNqRSxHQUNJLEdBQ0QsRUFDYix1QkFBQyxrQkFBVyxjQUNWLGdDQUFLLFNBQVMsRUFBQyxzREFBc0QsWUFDbEUsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FDNUMsdUJBQUMsZ0NBQVcsSUFFVixPQUFPLEVBQUUsT0FBTyxFQUNoQixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxJQUZ6RSxPQUFPLENBQUMsRUFBRSxDQUdmLENBQ0gsQ0FBQyxHQUNFLEdBQ00sSUFDVCxDQUNSLElBQ0csQ0FDUCxJQUNHLEdBQ0YsSUFDRixDQUNQLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvY2xpZW50L3NyYy9wYWdlcy9tYW5hZ2VyL2ludm9pY2VzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gJ0AvY29tcG9uZW50cy9sYXlvdXQvaGVhZGVyJztcbmltcG9ydCB7IENhcmQsIENhcmRDb250ZW50LCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG5pbXBvcnQgeyBCYWRnZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9iYWRnZSc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcbmltcG9ydCB7XG4gIFNlbGVjdCxcbiAgU2VsZWN0Q29udGVudCxcbiAgU2VsZWN0SXRlbSxcbiAgU2VsZWN0VHJpZ2dlcixcbiAgU2VsZWN0VmFsdWUsXG59IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZWxlY3QnO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvaW5wdXQnO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvbGFiZWwnO1xuaW1wb3J0IHtcbiAgRGlhbG9nLFxuICBEaWFsb2dDb250ZW50LFxuICBEaWFsb2dIZWFkZXIsXG4gIERpYWxvZ1RpdGxlLFxuICBEaWFsb2dUcmlnZ2VyLFxufSBmcm9tICdAL2NvbXBvbmVudHMvdWkvZGlhbG9nJztcbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2NoZWNrYm94JztcbmltcG9ydCB7IFBvcG92ZXIsIFBvcG92ZXJDb250ZW50LCBQb3BvdmVyVHJpZ2dlciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wb3BvdmVyJztcbmltcG9ydCB7XG4gIEZpbGVUZXh0LFxuICBQbHVzLFxuICBGaWx0ZXIsXG4gIENhbGVuZGFyLFxuICBCdWlsZGluZyBhcyBCdWlsZGluZ0ljb24sXG4gIENoZXZyb25Eb3duLFxuICBSZWNlaXB0LFxufSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuaW1wb3J0IHsgQnVpbGRpbmdTZWxlY3Rpb25HcmlkIH0gZnJvbSAnQC9jb21wb25lbnRzL0J1aWxkaW5nU2VsZWN0aW9uR3JpZCc7XG5pbXBvcnQgeyB1c2VRdWVyeSwgdXNlUXVlcnlDbGllbnQgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0IHsgYXBpUmVxdWVzdCB9IGZyb20gJ0AvbGliL3F1ZXJ5Q2xpZW50JztcbmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBCdWlsZGluZyB9IGZyb20gJ0BzaGFyZWQvc2NoZW1hJztcbmltcG9ydCB0eXBlIHsgSW52b2ljZSB9IGZyb20gJ0BzaGFyZWQvc2NoZW1hcy9pbnZvaWNlcyc7XG5cbi8vIEltcG9ydCBuZXcgbW9kZXJuIGNvbXBvbmVudHNcbmltcG9ydCB7IEludm9pY2VGb3JtLCBJbnZvaWNlQ2FyZCB9IGZyb20gJ0AvY29tcG9uZW50cy9pbnZvaWNlLW1hbmFnZW1lbnQnO1xuXG5pbnRlcmZhY2UgSW52b2ljZUZpbHRlcnMge1xuICBidWlsZGluZ0lkOiBzdHJpbmc7XG4gIHBheW1lbnRUeXBlOiBzdHJpbmc7XG4gIHllYXI6IHN0cmluZztcbiAgbW9udGhzOiBzdHJpbmdbXTtcbn1cblxuY29uc3QgTU9OVEhTID0gW1xuICB7IHZhbHVlOiAnMScsIGxhYmVsOiAnSmFudWFyeScgfSxcbiAgeyB2YWx1ZTogJzInLCBsYWJlbDogJ0ZlYnJ1YXJ5JyB9LFxuICB7IHZhbHVlOiAnMycsIGxhYmVsOiAnTWFyY2gnIH0sXG4gIHsgdmFsdWU6ICc0JywgbGFiZWw6ICdBcHJpbCcgfSxcbiAgeyB2YWx1ZTogJzUnLCBsYWJlbDogJ01heScgfSxcbiAgeyB2YWx1ZTogJzYnLCBsYWJlbDogJ0p1bmUnIH0sXG4gIHsgdmFsdWU6ICc3JywgbGFiZWw6ICdKdWx5JyB9LFxuICB7IHZhbHVlOiAnOCcsIGxhYmVsOiAnQXVndXN0JyB9LFxuICB7IHZhbHVlOiAnOScsIGxhYmVsOiAnU2VwdGVtYmVyJyB9LFxuICB7IHZhbHVlOiAnMTAnLCBsYWJlbDogJ09jdG9iZXInIH0sXG4gIHsgdmFsdWU6ICcxMScsIGxhYmVsOiAnTm92ZW1iZXInIH0sXG4gIHsgdmFsdWU6ICcxMicsIGxhYmVsOiAnRGVjZW1iZXInIH0sXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbnZvaWNlcygpIHtcbiAgY29uc3QgW2ZpbHRlcnMsIHNldEZpbHRlcnNdID0gdXNlU3RhdGU8SW52b2ljZUZpbHRlcnM+KHtcbiAgICBidWlsZGluZ0lkOiAnJyxcbiAgICBwYXltZW50VHlwZTogJycsXG4gICAgeWVhcjogbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCksXG4gICAgbW9udGhzOiBbXSxcbiAgfSk7XG4gIGNvbnN0IFtzaG93Q3JlYXRlRGlhbG9nLCBzZXRTaG93Q3JlYXRlRGlhbG9nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuXG4gIC8vIEZldGNoIGJ1aWxkaW5ncyBmb3IgZmlsdGVyIGRyb3Bkb3duXG4gIGNvbnN0IHtcbiAgICBkYXRhOiBidWlsZGluZ3MgPSBbXSxcbiAgICBpc0xvYWRpbmc6IGJ1aWxkaW5nc0xvYWRpbmcsXG4gICAgZXJyb3I6IGJ1aWxkaW5nc0Vycm9yLFxuICB9ID0gdXNlUXVlcnk8QnVpbGRpbmdbXT4oe1xuICAgIHF1ZXJ5S2V5OiBbJy9hcGkvYnVpbGRpbmdzJ10sXG4gICAgcXVlcnlGbjogYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlSZXF1ZXN0KCdHRVQnLCAnL2FwaS9idWlsZGluZ3MnKTtcbiAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gRmV0Y2ggaW52b2ljZXMgYmFzZWQgb24gZmlsdGVyc1xuICBjb25zdCB7IGRhdGE6IGludm9pY2VzUmVzcG9uc2UgPSB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IFtdLCBjb3VudDogMCB9LCBpc0xvYWRpbmcgfSA9IHVzZVF1ZXJ5PHtcbiAgICBzdWNjZXNzOiBib29sZWFuO1xuICAgIGRhdGE6IEludm9pY2VbXTtcbiAgICBjb3VudDogbnVtYmVyO1xuICB9Pih7XG4gICAgcXVlcnlLZXk6IFsnL2FwaS9pbnZvaWNlcycsIGZpbHRlcnNdLFxuICAgIHF1ZXJ5Rm46IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgIFxuICAgICAgaWYgKGZpbHRlcnMuYnVpbGRpbmdJZCkge1xuICAgICAgICBwYXJhbXMuc2V0KCdidWlsZGluZ0lkJywgZmlsdGVycy5idWlsZGluZ0lkKTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWx0ZXJzLnBheW1lbnRUeXBlICYmIGZpbHRlcnMucGF5bWVudFR5cGUgIT09ICdhbGwnKSB7XG4gICAgICAgIHBhcmFtcy5zZXQoJ3BheW1lbnRUeXBlJywgZmlsdGVycy5wYXltZW50VHlwZSk7XG4gICAgICB9XG4gICAgICBpZiAoZmlsdGVycy55ZWFyKSB7XG4gICAgICAgIHBhcmFtcy5zZXQoJ3llYXInLCBmaWx0ZXJzLnllYXIpO1xuICAgICAgfVxuICAgICAgaWYgKGZpbHRlcnMubW9udGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcGFyYW1zLnNldCgnbW9udGhzJywgZmlsdGVycy5tb250aHMuam9pbignLCcpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXJsID0gYC9hcGkvaW52b2ljZXMke3BhcmFtcy50b1N0cmluZygpID8gJz8nICsgcGFyYW1zLnRvU3RyaW5nKCkgOiAnJ31gO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyB9KTtcbiAgICAgIFxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBpbnZvaWNlczogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGludm9pY2VzID0gaW52b2ljZXNSZXNwb25zZS5kYXRhIHx8IFtdO1xuXG4gIC8vIEdyb3VwIGludm9pY2VzIGJ5IHBheW1lbnQgdHlwZVxuICBjb25zdCBpbnZvaWNlc0J5VHlwZSA9IGludm9pY2VzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBJbnZvaWNlW10+LCBpbnZvaWNlOiBJbnZvaWNlKSA9PiB7XG4gICAgY29uc3QgdHlwZSA9IGludm9pY2UucGF5bWVudFR5cGUgfHwgJ29uZS10aW1lJztcbiAgICBpZiAoIWFjY1t0eXBlXSkge1xuICAgICAgYWNjW3R5cGVdID0gW107XG4gICAgfVxuICAgIGFjY1t0eXBlXS5wdXNoKGludm9pY2UpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICBjb25zdCBoYW5kbGVGaWx0ZXJDaGFuZ2UgPSAoa2V5OiBrZXlvZiBJbnZvaWNlRmlsdGVycywgdmFsdWU6IHN0cmluZyB8IHN0cmluZ1tdKSA9PiB7XG4gICAgc2V0RmlsdGVycygocHJldikgPT4gKHsgLi4ucHJldiwgW2tleV06IHZhbHVlIH0pKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVNb250aFRvZ2dsZSA9IChtb250aFZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICBzZXRGaWx0ZXJzKChwcmV2KSA9PiAoe1xuICAgICAgLi4ucHJldixcbiAgICAgIG1vbnRoczogcHJldi5tb250aHMuaW5jbHVkZXMobW9udGhWYWx1ZSlcbiAgICAgICAgPyBwcmV2Lm1vbnRocy5maWx0ZXIoKG0pID0+IG0gIT09IG1vbnRoVmFsdWUpXG4gICAgICAgIDogWy4uLnByZXYubW9udGhzLCBtb250aFZhbHVlXSxcbiAgICB9KSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQWxsTW9udGhzVG9nZ2xlID0gKCkgPT4ge1xuICAgIGNvbnN0IGFsbE1vbnRoVmFsdWVzID0gTU9OVEhTLm1hcCgobSkgPT4gbS52YWx1ZSk7XG4gICAgc2V0RmlsdGVycygocHJldikgPT4gKHtcbiAgICAgIC4uLnByZXYsXG4gICAgICBtb250aHM6IHByZXYubW9udGhzLmxlbmd0aCA9PT0gYWxsTW9udGhWYWx1ZXMubGVuZ3RoID8gW10gOiBhbGxNb250aFZhbHVlcyxcbiAgICB9KSk7XG4gIH07XG5cbiAgY29uc3QgZ2V0TW9udGhzRGlzcGxheVRleHQgPSAoKSA9PiB7XG4gICAgaWYgKGZpbHRlcnMubW9udGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdBbGwgbW9udGhzJztcbiAgICB9XG4gICAgaWYgKGZpbHRlcnMubW9udGhzLmxlbmd0aCA9PT0gTU9OVEhTLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICdBbGwgbW9udGhzJztcbiAgICB9XG4gICAgaWYgKGZpbHRlcnMubW9udGhzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgbW9udGggPSBNT05USFMuZmluZCgobSkgPT4gbS52YWx1ZSA9PT0gZmlsdGVycy5tb250aHNbMF0pO1xuICAgICAgcmV0dXJuIG1vbnRoPy5sYWJlbCB8fCAnQWxsIG1vbnRocyc7XG4gICAgfVxuICAgIHJldHVybiBgJHtmaWx0ZXJzLm1vbnRocy5sZW5ndGh9IG1vbnRoc2A7XG4gIH07XG5cbiAgY29uc3QgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG4gIGNvbnN0IGdldFllYXJPcHRpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0WWVhciA9IGN1cnJlbnRZZWFyIC0gMztcbiAgICBjb25zdCBlbmRZZWFyID0gY3VycmVudFllYXIgKyAzO1xuICAgIGNvbnN0IHRvdGFsWWVhcnMgPSBlbmRZZWFyIC0gc3RhcnRZZWFyICsgMTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aDogdG90YWxZZWFycyB9LCAoXywgaSkgPT4gc3RhcnRZZWFyICsgaSk7XG4gIH07XG5cbiAgLy8gU2hvdyBsb2FkaW5nIHN0YXRlIHdoaWxlIGJ1aWxkaW5ncyBhcmUgbG9hZGluZ1xuICBpZiAoYnVpbGRpbmdzTG9hZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBmbGV4IGZsZXgtY29sIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICA8SGVhZGVyIHRpdGxlPVwiSW52b2ljZSBNYW5hZ2VtZW50XCIgc3VidGl0bGU9XCJNb2Rlcm4gQUktcG93ZXJlZCBpbnZvaWNlIHByb2Nlc3NpbmcgYW5kIG1hbmFnZW1lbnRcIiAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZS1zcGluIHJvdW5kZWQtZnVsbCBoLTggdy04IGJvcmRlci1iLTIgYm9yZGVyLWJsdWUtNjAwIG14LWF1dG8gbWItNFwiPjwvZGl2PlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTUwMFwiPkxvYWRpbmcgYnVpbGRpbmdzLi4uPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICAvLyBTaG93IGVycm9yIHN0YXRlIGlmIGJ1aWxkaW5ncyBmYWlsZWQgdG8gbG9hZFxuICBpZiAoYnVpbGRpbmdzRXJyb3IpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LTEgZmxleCBmbGV4LWNvbCBvdmVyZmxvdy1oaWRkZW5cIj5cbiAgICAgICAgPEhlYWRlciB0aXRsZT1cIkludm9pY2UgTWFuYWdlbWVudFwiIHN1YnRpdGxlPVwiTW9kZXJuIEFJLXBvd2VyZWQgaW52b2ljZSBwcm9jZXNzaW5nIGFuZCBtYW5hZ2VtZW50XCIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LTEgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXJlZC01MDAgbWItNFwiPkZhaWxlZCB0byBsb2FkIGJ1aWxkaW5nczwvcD5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpfVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctYmx1ZS02MDAgdGV4dC13aGl0ZSByb3VuZGVkIGhvdmVyOmJnLWJsdWUtNzAwXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUmV0cnlcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC0xIGZsZXggZmxleC1jb2wgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICA8SGVhZGVyIHRpdGxlPVwiSW52b2ljZSBNYW5hZ2VtZW50XCIgc3VidGl0bGU9XCJNb2Rlcm4gQUktcG93ZXJlZCBpbnZvaWNlIHByb2Nlc3NpbmcgYW5kIG1hbmFnZW1lbnRcIiAvPlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBvdmVyZmxvdy1hdXRvIHAtNlwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1heC13LTd4bCBteC1hdXRvIHNwYWNlLXktNlwiPlxuICAgICAgICAgIHsvKiBGaWx0ZXJzIFNlY3Rpb24gKi99XG4gICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICAgICAgICAgIDxGaWx0ZXIgY2xhc3NOYW1lPVwidy01IGgtNVwiIC8+XG4gICAgICAgICAgICAgICAgRmlsdGVyc1xuICAgICAgICAgICAgICA8L0NhcmRUaXRsZT5cbiAgICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy01IGdhcC00XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgICAgICAgICAgICAgICAgIDxMYWJlbCBodG1sRm9yPVwiYnVpbGRpbmctZmlsdGVyXCIgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1aWxkaW5nSWNvbiBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgQnVpbGRpbmdcbiAgICAgICAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXJzLmJ1aWxkaW5nSWR9XG4gICAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9eyh2YWx1ZSkgPT4gaGFuZGxlRmlsdGVyQ2hhbmdlKCdidWlsZGluZ0lkJywgdmFsdWUpfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0VHJpZ2dlciBpZD1cImJ1aWxkaW5nLWZpbHRlclwiIGRhdGEtdGVzdGlkPVwic2VsZWN0LWJ1aWxkaW5nLWZpbHRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RWYWx1ZSBwbGFjZWhvbGRlcj1cIlNlbGVjdCBidWlsZGluZ1wiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0VHJpZ2dlcj5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAge0FycmF5LmlzQXJyYXkoYnVpbGRpbmdzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmdzLm1hcCgoYnVpbGRpbmc6IEJ1aWxkaW5nKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIGtleT17YnVpbGRpbmcuaWR9IHZhbHVlPXtidWlsZGluZy5pZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2J1aWxkaW5nLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0yXCI+XG4gICAgICAgICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj1cInBheW1lbnQtdHlwZS1maWx0ZXJcIiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8UmVjZWlwdCBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgUGF5bWVudCBUeXBlXG4gICAgICAgICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZmlsdGVycy5wYXltZW50VHlwZX1cbiAgICAgICAgICAgICAgICAgICAgb25WYWx1ZUNoYW5nZT17KHZhbHVlKSA9PiBoYW5kbGVGaWx0ZXJDaGFuZ2UoJ3BheW1lbnRUeXBlJywgdmFsdWUpfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0VHJpZ2dlciBpZD1cInBheW1lbnQtdHlwZS1maWx0ZXJcIiBkYXRhLXRlc3RpZD1cInNlbGVjdC1wYXltZW50LXR5cGUtZmlsdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFZhbHVlIHBsYWNlaG9sZGVyPVwiQWxsIHR5cGVzXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RUcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0SXRlbSB2YWx1ZT1cImFsbFwiPkFsbCB0eXBlczwvU2VsZWN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0SXRlbSB2YWx1ZT1cIm9uZS10aW1lXCI+T25lLXRpbWU8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdEl0ZW0gdmFsdWU9XCJyZWN1cnJpbmdcIj5SZWN1cnJpbmc8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Q29udGVudD5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgICAgICAgICAgICAgICAgIDxMYWJlbCBodG1sRm9yPVwieWVhci1maWx0ZXJcIiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8Q2FsZW5kYXIgY2xhc3NOYW1lPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIFllYXJcbiAgICAgICAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXJzLnllYXJ9XG4gICAgICAgICAgICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9eyh2YWx1ZSkgPT4gaGFuZGxlRmlsdGVyQ2hhbmdlKCd5ZWFyJywgdmFsdWUpfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0VHJpZ2dlciBpZD1cInllYXItZmlsdGVyXCIgZGF0YS10ZXN0aWQ9XCJzZWxlY3QteWVhci1maWx0ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0VmFsdWUgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RUcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Q29udGVudCBjbGFzc05hbWU9XCJtYXgtaC1bMzAwcHhdIG92ZXJmbG93LXktYXV0b1wiPlxuICAgICAgICAgICAgICAgICAgICAgIHtnZXRZZWFyT3B0aW9ucygpLm1hcCgoeWVhcikgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdEl0ZW0ga2V5PXt5ZWFyfSB2YWx1ZT17eWVhci50b1N0cmluZygpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAge3llYXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt5ZWFyID09PSBjdXJyZW50WWVhciAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibWwtMiB0ZXh0LXhzIHRleHQtYmx1ZS01MDBcIj4oQ3VycmVudCk8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0Q29udGVudD5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8Q2FsZW5kYXIgY2xhc3NOYW1lPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIE1vbnRoc1xuICAgICAgICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxQb3BvdmVyPlxuICAgICAgICAgICAgICAgICAgICA8UG9wb3ZlclRyaWdnZXIgYXNDaGlsZD5cbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAndy1mdWxsIGp1c3RpZnktYmV0d2VlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnMubW9udGhzLmxlbmd0aCA9PT0gMCAmJiAndGV4dC1tdXRlZC1mb3JlZ3JvdW5kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwic2VsZWN0LW1vbnRocy1maWx0ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRNb250aHNEaXNwbGF5VGV4dCgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgPENoZXZyb25Eb3duIGNsYXNzTmFtZT1cIm1sLTIgaC00IHctNCBzaHJpbmstMCBvcGFjaXR5LTUwXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9Qb3BvdmVyVHJpZ2dlcj5cbiAgICAgICAgICAgICAgICAgICAgPFBvcG92ZXJDb250ZW50IGNsYXNzTmFtZT1cInctNjQgcC0wXCIgYWxpZ249XCJzdGFydFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9yZGVyLWIgcC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIHNwYWNlLXgtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImFsbC1tb250aHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2ZpbHRlcnMubW9udGhzLmxlbmd0aCA9PT0gTU9OVEhTLmxlbmd0aH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoZWNrZWRDaGFuZ2U9e2hhbmRsZUFsbE1vbnRoc1RvZ2dsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPExhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEZvcj1cImFsbC1tb250aHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gbGVhZGluZy1ub25lIHBlZXItZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkIHBlZXItZGlzYWJsZWQ6b3BhY2l0eS03MFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGwgTW9udGhzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgZ2FwLTIgcC0zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7TU9OVEhTLm1hcCgobW9udGgpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e21vbnRoLnZhbHVlfSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXtgbW9udGgtJHttb250aC52YWx1ZX1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17ZmlsdGVycy5tb250aHMuaW5jbHVkZXMobW9udGgudmFsdWUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGVja2VkQ2hhbmdlPXsoKSA9PiBoYW5kbGVNb250aFRvZ2dsZShtb250aC52YWx1ZSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2Btb250aC0ke21vbnRoLnZhbHVlfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LXNtIGxlYWRpbmctbm9uZSBwZWVyLWRpc2FibGVkOmN1cnNvci1ub3QtYWxsb3dlZCBwZWVyLWRpc2FibGVkOm9wYWNpdHktNzBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttb250aC5sYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L1BvcG92ZXJDb250ZW50PlxuICAgICAgICAgICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzc05hbWU9XCJpbnZpc2libGVcIj5BY3Rpb25zPC9MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxEaWFsb2cgb3Blbj17c2hvd0NyZWF0ZURpYWxvZ30gb25PcGVuQ2hhbmdlPXtzZXRTaG93Q3JlYXRlRGlhbG9nfT5cbiAgICAgICAgICAgICAgICAgICAgPERpYWxvZ1RyaWdnZXIgYXNDaGlsZD5cbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsXCIgXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IWZpbHRlcnMuYnVpbGRpbmdJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLWNyZWF0ZS1pbnZvaWNlXCJcbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UGx1cyBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXRlIEludm9pY2VcbiAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9EaWFsb2dUcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICA8RGlhbG9nQ29udGVudCBjbGFzc05hbWU9XCJtYXgtdy00eGwgbWF4LWgtWzkwdmhdIG92ZXJmbG93LXktYXV0b1wiPlxuICAgICAgICAgICAgICAgICAgICAgIDxEaWFsb2dIZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RGlhbG9nVGl0bGU+Q3JlYXRlIE5ldyBJbnZvaWNlPC9EaWFsb2dUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICA8L0RpYWxvZ0hlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICA8SW52b2ljZUZvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU9XCJjcmVhdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRpbmdJZD17ZmlsdGVycy5idWlsZGluZ0lkfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNob3dDcmVhdGVEaWFsb2coZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbJy9hcGkvaW52b2ljZXMnXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNhbmNlbD17KCkgPT4gc2V0U2hvd0NyZWF0ZURpYWxvZyhmYWxzZSl9XG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9EaWFsb2dDb250ZW50PlxuICAgICAgICAgICAgICAgICAgPC9EaWFsb2c+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICA8L0NhcmQ+XG5cbiAgICAgICAgICB7LyogSW52b2ljZXMgRGlzcGxheSAqL31cbiAgICAgICAgICB7IWZpbHRlcnMuYnVpbGRpbmdJZCA/IChcbiAgICAgICAgICAgIDxCdWlsZGluZ1NlbGVjdGlvbkdyaWRcbiAgICAgICAgICAgICAgYnVpbGRpbmdzPXtBcnJheS5pc0FycmF5KGJ1aWxkaW5ncykgPyBidWlsZGluZ3MgOiBbXX1cbiAgICAgICAgICAgICAgb25CdWlsZGluZ1NlbGVjdD17KGJ1aWxkaW5nSWQpID0+IGhhbmRsZUZpbHRlckNoYW5nZSgnYnVpbGRpbmdJZCcsIGJ1aWxkaW5nSWQpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApIDogaXNMb2FkaW5nID8gKFxuICAgICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9XCJwLTggdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGUtc3BpbiB3LTggaC04IGJvcmRlci00IGJvcmRlci1wcmltYXJ5IGJvcmRlci10LXRyYW5zcGFyZW50IHJvdW5kZWQtZnVsbCBteC1hdXRvIG1iLTRcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWdyYXktNTAwXCI+TG9hZGluZyBpbnZvaWNlcy4uLjwvcD5cbiAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICApIDogaW52b2ljZXMubGVuZ3RoID09PSAwID8gKFxuICAgICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9XCJwLTggdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8UmVjZWlwdCBjbGFzc05hbWU9XCJ3LTE2IGgtMTYgbXgtYXV0byBtYi00IHRleHQtbXV0ZWQtZm9yZWdyb3VuZFwiIC8+XG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktNjAwIG1iLTJcIj5ObyBJbnZvaWNlcyBGb3VuZDwvaDM+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTUwMCBtYi00XCI+XG4gICAgICAgICAgICAgICAgICBObyBpbnZvaWNlcyBmb3VuZCBmb3IgdGhlIHNlbGVjdGVkIGZpbHRlcnMuIENyZWF0ZSB5b3VyIGZpcnN0IGludm9pY2UgdG8gZ2V0IHN0YXJ0ZWQuXG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gc2V0U2hvd0NyZWF0ZURpYWxvZyh0cnVlKX0gZGF0YS10ZXN0aWQ9XCJidXR0b24tY3JlYXRlLWZpcnN0LWludm9pY2VcIj5cbiAgICAgICAgICAgICAgICAgIDxQbHVzIGNsYXNzTmFtZT1cInctNCBoLTQgbXItMlwiIC8+XG4gICAgICAgICAgICAgICAgICBDcmVhdGUgRmlyc3QgSW52b2ljZVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNlwiPlxuICAgICAgICAgICAgICB7LyogT25lLXRpbWUgSW52b2ljZXMgKi99XG4gICAgICAgICAgICAgIHtpbnZvaWNlc0J5VHlwZVsnb25lLXRpbWUnXSAmJiBpbnZvaWNlc0J5VHlwZVsnb25lLXRpbWUnXS5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgICAgICA8Q2FyZD5cbiAgICAgICAgICAgICAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICA8Q2FyZFRpdGxlIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGaWxlVGV4dCBjbGFzc05hbWU9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIE9uZS10aW1lIEludm9pY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICA8QmFkZ2UgdmFyaWFudD1cInNlY29uZGFyeVwiPntpbnZvaWNlc0J5VHlwZVsnb25lLXRpbWUnXS5sZW5ndGh9PC9CYWRnZT5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBsZzpncmlkLWNvbHMtMyBnYXAtNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIHtpbnZvaWNlc0J5VHlwZVsnb25lLXRpbWUnXS5tYXAoKGludm9pY2UpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnZvaWNlQ2FyZCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbnZvaWNlLmlkfSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2ljZT17aW52b2ljZX0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlPXsoKSA9PiBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbJy9hcGkvaW52b2ljZXMnXSB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICA8L0NhcmQ+XG4gICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgey8qIFJlY3VycmluZyBJbnZvaWNlcyAqL31cbiAgICAgICAgICAgICAge2ludm9pY2VzQnlUeXBlWydyZWN1cnJpbmcnXSAmJiBpbnZvaWNlc0J5VHlwZVsncmVjdXJyaW5nJ10ubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UmVjZWlwdCBjbGFzc05hbWU9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIFJlY3VycmluZyBJbnZvaWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJkZWZhdWx0XCI+e2ludm9pY2VzQnlUeXBlWydyZWN1cnJpbmcnXS5sZW5ndGh9PC9CYWRnZT5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMSBtZDpncmlkLWNvbHMtMiBsZzpncmlkLWNvbHMtMyBnYXAtNFwiPlxuICAgICAgICAgICAgICAgICAgICAgIHtpbnZvaWNlc0J5VHlwZVsncmVjdXJyaW5nJ10ubWFwKChpbnZvaWNlKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW52b2ljZUNhcmQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aW52b2ljZS5pZH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGludm9pY2U9e2ludm9pY2V9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZT17KCkgPT4gcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoeyBxdWVyeUtleTogWycvYXBpL2ludm9pY2VzJ10gfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn0iXSwidmVyc2lvbiI6M30=