dec03104a5603d23cb0aac76d48622c9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Unit test using mocks - moved server imports to integration tests
// import request from 'supertest';
// import { app } from '../../../server/index';
// import { mockDb } from '../../../server/mockDb';
const schema = __importStar(require("../../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const unified_database_mock_1 = require("../../mocks/unified-database-mock");
// Using unified database mock for consistency
// Mock request for API testing
const mockRequest = {
    post: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { success: true } }),
    get: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { data: [] } }),
    put: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { success: true } }),
    delete: globals_1.jest.fn().mockResolvedValue({ status: 200, body: { success: true } })
};
(0, globals_1.describe)('Invitation Management API', () => {
    let adminUser;
    let managerUser;
    let tenantUser;
    let organization1;
    let organization2;
    let testInvitation1;
    let testInvitation2;
    let adminCookie;
    let managerCookie;
    let tenantCookie;
    (0, globals_1.beforeEach)(async () => {
        // Reset mock data and clear all mocks
        unified_database_mock_1.testUtils.resetMocks();
        // Create test organizations
        const [org1] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.organizations).values({
            name: 'Test Organization 1',
            type: 'management_company',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
        }).returning();
        const [org2] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.organizations).values({
            name: 'Test Organization 2',
            type: 'syndicate',
            address: '456 Test Ave',
            city: 'Quebec City',
            province: 'QC',
            postalCode: 'G1A 1A1',
        }).returning();
        organization1 = org1;
        organization2 = org2;
        // Create test users
        const hashedPassword = await bcryptjs_1.default.hash('password123', 10);
        const [admin] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.users).values({
            username: 'admin@test.com',
            email: 'admin@test.com',
            password: hashedPassword,
            firstName: 'Admin',
            lastName: 'User',
            role: 'admin',
            language: 'en',
        }).returning();
        const [manager] = await unified_database_mock_1.mockDb.insert(schema.users).values({
            username: 'manager@test.com',
            email: 'manager@test.com',
            password: hashedPassword,
            firstName: 'Manager',
            lastName: 'User',
            role: 'manager',
            language: 'en',
        }).returning();
        const [tenant] = await unified_database_mock_1.mockDb.insert(schema.users).values({
            username: 'tenant@test.com',
            email: 'tenant@test.com',
            password: hashedPassword,
            firstName: 'Tenant',
            lastName: 'User',
            role: 'tenant',
            language: 'en',
        }).returning();
        adminUser = admin;
        managerUser = manager;
        tenantUser = tenant;
        // Assign manager to organization1
        await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.userOrganizations).values({
            userId: managerUser.id,
            organizationId: organization1.id,
            organizationRole: 'manager',
            isActive: true,
        });
        // Create test invitations
        const expirationDate = new Date();
        expirationDate.setDate(expirationDate.getDate() + 7); // 7 days from now
        const [invitation1] = await unified_database_mock_1.mockDb.insert(schema.invitations).values({
            email: 'test1@example.com',
            token: 'test-token-1',
            tokenHash: 'hash1',
            role: 'tenant',
            status: 'pending',
            organizationId: organization1.id,
            invitedByUserId: adminUser.id,
            expiresAt: expirationDate,
        }).returning();
        const [invitation2] = await unified_database_mock_1.mockDb.insert(schema.invitations).values({
            email: 'test2@example.com',
            token: 'test-token-2',
            tokenHash: 'hash2',
            role: 'resident',
            status: 'pending',
            organizationId: organization2.id,
            invitedByUserId: adminUser.id,
            expiresAt: expirationDate,
        }).returning();
        testInvitation1 = invitation1;
        testInvitation2 = invitation2;
        // Login users and get cookies
        const adminLogin = await mockRequest
            .post('/api/auth/login')
            .send({ email: 'admin@test.com', password: 'password123' });
        adminCookie = adminLogin.headers['set-cookie'];
        const managerLogin = await mockRequest
            .post('/api/auth/login')
            .send({ email: 'manager@test.com', password: 'password123' });
        managerCookie = managerLogin.headers['set-cookie'];
        const tenantLogin = await mockRequest
            .post('/api/auth/login')
            .send({ email: 'tenant@test.com', password: 'password123' });
        tenantCookie = tenantLogin.headers['set-cookie'];
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await unified_database_mock_1.mockDb.delete(schema.invitations);
        await unified_database_mock_1.mockDb.delete(schema.userOrganizations);
        await unified_database_mock_1.mockDb.delete(schema.users);
        await unified_database_mock_1.mockDb.delete(schema.organizations);
    });
    (0, globals_1.describe)('GET /api/invitations/pending', () => {
        (0, globals_1.it)('should allow admin to see all pending invitations', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body).toHaveLength(2);
            const emails = response.body.map((inv) => inv.email);
            (0, globals_1.expect)(emails).toContain('test1@example.com');
            (0, globals_1.expect)(emails).toContain('test2@example.com');
        });
        (0, globals_1.it)('should allow manager to see only invitations from their organizations', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', managerCookie)
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body).toHaveLength(1);
            (0, globals_1.expect)(response.body[0].email).toBe('test1@example.com');
            (0, globals_1.expect)(response.body[0].organizationId).toBe(organization1.id);
        });
        (0, globals_1.it)('should deny access to tenant users', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', tenantCookie)
                .expect(403);
            (0, globals_1.expect)(response.body.code).toBe('INSUFFICIENT_PERMISSIONS');
        });
        (0, globals_1.it)('should deny access to unauthenticated users', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .expect(401);
            (0, globals_1.expect)(response.body.code).toBe('AUTH_REQUIRED');
        });
        (0, globals_1.it)('should return proper invitation structure with all required fields', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            const invitation = response.body[0];
            (0, globals_1.expect)(invitation).toHaveProperty('id');
            (0, globals_1.expect)(invitation).toHaveProperty('email');
            (0, globals_1.expect)(invitation).toHaveProperty('role');
            (0, globals_1.expect)(invitation).toHaveProperty('status');
            (0, globals_1.expect)(invitation).toHaveProperty('expiresAt');
            (0, globals_1.expect)(invitation).toHaveProperty('createdAt');
            (0, globals_1.expect)(invitation).toHaveProperty('organizationId');
            (0, globals_1.expect)(invitation).toHaveProperty('buildingId');
            (0, globals_1.expect)(invitation).toHaveProperty('residenceId');
            (0, globals_1.expect)(invitation.status).toBe('pending');
        });
    });
    (0, globals_1.describe)('DELETE /api/invitations/:id', () => {
        (0, globals_1.it)('should allow admin to delete any invitation', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .set('Cookie', adminCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Invitation deleted successfully');
            (0, globals_1.expect)(response.body.invitationId).toBe(testInvitation1.id);
            // Verify invitation is deleted
            const remainingInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation1.id));
            (0, globals_1.expect)(remainingInvitations).toHaveLength(0);
        });
        (0, globals_1.it)('should allow manager to delete invitations from their organizations', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .set('Cookie', managerCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Invitation deleted successfully');
            // Verify invitation is deleted
            const remainingInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation1.id));
            (0, globals_1.expect)(remainingInvitations).toHaveLength(0);
        });
        (0, globals_1.it)('should prevent manager from deleting invitations from other organizations', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation2.id}`)
                .set('Cookie', managerCookie)
                .expect(403);
            (0, globals_1.expect)(response.body.code).toBe('INSUFFICIENT_PERMISSIONS');
            (0, globals_1.expect)(response.body.message).toBe('You can only delete invitations from your organizations');
            // Verify invitation still exists
            const remainingInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation2.id));
            (0, globals_1.expect)(remainingInvitations).toHaveLength(1);
        });
        (0, globals_1.it)('should deny access to tenant users', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .set('Cookie', tenantCookie)
                .expect(403);
            (0, globals_1.expect)(response.body.code).toBe('INSUFFICIENT_PERMISSIONS');
        });
        (0, globals_1.it)('should return 404 for non-existent invitation', async () => {
            const response = await mockRequest
                .delete('/api/invitations/non-existent-id')
                .set('Cookie', adminCookie)
                .expect(404);
            (0, globals_1.expect)(response.body.code).toBe('INVITATION_NOT_FOUND');
        });
        (0, globals_1.it)('should deny access to unauthenticated users', async () => {
            const response = await mockRequest
                .delete(`/api/invitations/${testInvitation1.id}`)
                .expect(401);
            (0, globals_1.expect)(response.body.code).toBe('AUTH_REQUIRED');
        });
    });
    (0, globals_1.describe)('Invitation Status and Expiration', () => {
        (0, globals_1.it)('should only return pending invitations', async () => {
            // Create an accepted invitation
            await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'accepted@example.com',
                token: 'accepted-token',
                tokenHash: 'accepted-hash',
                role: 'tenant',
                status: 'accepted',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            });
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            // Should only return pending invitations
            const statuses = response.body.map((inv) => inv.status);
            (0, globals_1.expect)(statuses.every((status) => status === 'pending')).toBe(true);
            (0, globals_1.expect)(response.body.find((inv) => inv.email === 'accepted@example.com')).toBeUndefined();
        });
        (0, globals_1.it)('should handle expired invitations in the response', async () => {
            // Create an expired invitation
            const expiredDate = new Date();
            expiredDate.setDate(expiredDate.getDate() - 1); // Yesterday
            await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'expired@example.com',
                token: 'expired-token',
                tokenHash: 'expired-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expiredDate,
            });
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            // Should include expired invitations (they're still pending status)
            const expiredInvitation = response.body.find((inv) => inv.email === 'expired@example.com');
            (0, globals_1.expect)(expiredInvitation).toBeDefined();
            (0, globals_1.expect)(new Date(expiredInvitation.expiresAt)).toBeInstanceOf(Date);
        });
    });
    (0, globals_1.describe)('Database Constraints and Data Integrity', () => {
        (0, globals_1.it)('should handle invitations with null organization references', async () => {
            // Create invitation without organization
            const [invitation] = await unified_database_mock_1.mockDb.insert(schema.invitations).values({
                email: 'no-org@example.com',
                token: 'no-org-token',
                tokenHash: 'no-org-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: null,
                invitedByUserId: adminUser.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            }).returning();
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            const noOrgInvitation = response.body.find((inv) => inv.email === 'no-org@example.com');
            (0, globals_1.expect)(noOrgInvitation).toBeDefined();
            (0, globals_1.expect)(noOrgInvitation.organizationId).toBeNull();
            (0, globals_1.expect)(noOrgInvitation.organizationName).toBeNull();
        });
        (0, globals_1.it)('should properly join organization names', async () => {
            const response = await mockRequest
                .get('/api/invitations/pending')
                .set('Cookie', adminCookie)
                .expect(200);
            const invitation1 = response.body.find((inv) => inv.email === 'test1@example.com');
            const invitation2 = response.body.find((inv) => inv.email === 'test2@example.com');
            (0, globals_1.expect)(invitation1.organizationName).toBe('Test Organization 1');
            (0, globals_1.expect)(invitation2.organizationName).toBe('Test Organization 2');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,