{"file":"/home/runner/workspace/server/services/gemini-bill-analyzer.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/services/gemini-bill-analyzer.ts"],"sourcesContent":["import * as fs from 'fs';\nimport { GoogleGenAI } from '@google/genai';\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || '' });\n\n/**\n *\n */\nexport interface BillAnalysisResult {\n  title: string;\n  vendor: string;\n  totalAmount: string;\n  category: string;\n  description?: string;\n  dueDate?: string;\n  issueDate?: string;\n  billNumber?: string;\n  confidence: number;\n}\n\n/**\n *\n */\nexport class GeminiBillAnalyzer {\n  /**\n   * Analyze a bill document using Gemini 2.5 Pro.\n   * @param imagePath\n   */\n  async analyzeBillDocument(imagePath: string): Promise<BillAnalysisResult> {\n    try {\n      const imageBytes = fs.readFileSync(imagePath);\n\n      const systemPrompt = `You are an expert bill analysis AI. Analyze this bill/invoice document and extract key information.\n      \n      Extract the following information and respond with JSON in this exact format:\n      {\n        \"title\": \"Brief descriptive title for this bill\",\n        \"vendor\": \"Company or service provider name\",\n        \"totalAmount\": \"Total amount as decimal string (e.g., '1234.56')\",\n        \"category\": \"One of: insurance, maintenance, salary, utilities, cleaning, security, landscaping, professional_services, administration, repairs, supplies, taxes, technology, reserves, other\",\n        \"description\": \"Brief description of services/products\",\n        \"dueDate\": \"Due date in YYYY-MM-DD format if found\",\n        \"issueDate\": \"Issue date in YYYY-MM-DD format if found\", \n        \"billNumber\": \"Bill/invoice number if found\",\n        \"confidence\": 0.85\n      }\n      \n      Guidelines:\n      - Use clear, concise titles (e.g., \"Hydro-Québec Electricity Bill\", \"Property Insurance Premium\")\n      - Map categories intelligently (electricity = utilities, legal fees = professional_services, etc.)\n      - Extract exact amounts without currency symbols\n      - Confidence should reflect how clear the document is (0.0-1.0)\n      - If information is unclear, use best guess but lower confidence\n      `;\n\n      const contents = [\n        {\n          inlineData: {\n            _data: imageBytes.toString('base64'),\n            mimeType: 'image/jpeg',\n          },\n        },\n        `Analyze this bill/invoice document and extract the key information as specified.`,\n      ];\n\n      const response = await ai.models.generateContent({\n        model: 'gemini-2.5-pro',\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: 'application/json',\n          responseSchema: {\n            type: 'object',\n            properties: {\n              title: { type: 'string' },\n              vendor: { type: 'string' },\n              totalAmount: { type: 'string' },\n              category: {\n                type: 'string',\n                enum: [\n                  'insurance',\n                  'maintenance',\n                  'salary',\n                  'utilities',\n                  'cleaning',\n                  'security',\n                  'landscaping',\n                  'professional_services',\n                  'administration',\n                  'repairs',\n                  'supplies',\n                  'taxes',\n                  'technology',\n                  'reserves',\n                  'other',\n                ],\n              },\n              description: { type: 'string' },\n              dueDate: { type: 'string' },\n              issueDate: { type: 'string' },\n              billNumber: { type: 'string' },\n              confidence: { type: 'number' },\n            },\n            required: ['title', 'vendor', 'totalAmount', 'category', 'confidence'],\n          },\n        },\n        contents: contents,\n      });\n\n      const rawJson = response.text;\n\n      if (rawJson) {\n        const analysis: BillAnalysisResult = JSON.parse(rawJson);\n\n        // Validate and sanitize the results\n        analysis.confidence = Math.max(0, Math.min(1, analysis.confidence));\n        analysis.totalAmount = this.sanitizeAmount(analysis.totalAmount);\n\n        return analysis;\n      } else {\n        throw new Error('Empty response from Gemini');\n      }\n    } catch (error: any) {\n      console.error('❌ Error analyzing bill document:', error);\n      throw new Error(`Failed to analyze bill document: ${error}`);\n    }\n  }\n\n  /**\n   * Sanitize and validate amount string.\n   * @param amount\n   */\n  private sanitizeAmount(amount: string): string {\n    // Remove currency symbols and spaces\n    const cleaned = amount.replace(/[^0-9.-]/g, '');\n    const parsed = parseFloat(cleaned);\n\n    if (isNaN(parsed)) {\n      return '0.00';\n    }\n\n    return parsed.toFixed(2);\n  }\n\n  /**\n   * Get suggested payment schedule based on bill type and amount.\n   * @param category\n   * @param amount\n   */\n  async suggestPaymentSchedule(\n    category: string,\n    amount: number\n  ): Promise<{\n    paymentType: 'unique' | 'recurrent';\n    schedulePayment?: 'monthly' | 'quarterly' | 'yearly';\n    reasoning: string;\n  }> {\n    try {\n      const prompt = `Based on this bill category \"${category}\" and amount $${amount}, suggest the most appropriate payment schedule.\n      \n      Common patterns:\n      - Utilities: Usually monthly recurring\n      - Insurance: Usually yearly recurring  \n      - Maintenance: Usually unique payments\n      - Professional services: Usually unique payments\n      - Supplies: Usually unique payments\n      - Taxes: Usually yearly recurring\n      \n      Respond with JSON:\n      {\n        \"paymentType\": \"unique\" or \"recurrent\",\n        \"schedulePayment\": \"monthly\", \"quarterly\", or \"yearly\" (only if recurrent),\n        \"reasoning\": \"Brief explanation of the recommendation\"\n      }`;\n\n      const response = await ai.models.generateContent({\n        model: 'gemini-2.5-flash',\n        config: {\n          responseMimeType: 'application/json',\n          responseSchema: {\n            type: 'object',\n            properties: {\n              paymentType: { type: 'string', enum: ['unique', 'recurrent'] },\n              schedulePayment: { type: 'string', enum: ['monthly', 'quarterly', 'yearly'] },\n              reasoning: { type: 'string' },\n            },\n            required: ['paymentType', 'reasoning'],\n          },\n        },\n        contents: prompt,\n      });\n\n      const result = JSON.parse(response.text || '{}');\n      return result;\n    } catch (error: any) {\n      console.error('❌ Error suggesting payment schedule:', error);\n      return {\n        paymentType: 'unique',\n        reasoning: 'Default to unique payment due to analysis error',\n      };\n    }\n  }\n}\n\nexport const geminiBillAnalyzer = new GeminiBillAnalyzer();\n"],"version":3}