5581ac5b403b4d341cddecbf7b281b0c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DocumentPageWrapper;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const queryClient_1 = require("@/lib/queryClient");
const DocumentManager_1 = __importDefault(require("@/components/common/DocumentManager"));
const button_1 = require("@/components/ui/button");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
function DocumentPageWrapper({ type, userRole, backPath, backLabel, entityIdParam, }) {
    const [, navigate] = (0, wouter_1.useLocation)();
    const params = (0, wouter_1.useParams)();
    const { t } = (0, use_language_1.useLanguage)();
    // Get entityId from URL (both path param and query param)
    const urlParams = new URLSearchParams(window.location.search);
    const entityId = params[entityIdParam] || urlParams.get(entityIdParam);
    // Get current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Get entity info based on type
    const entityApiPath = type === 'building' ? '/api/manager/buildings' : '/api/residences';
    const { data: entity, isError: entityError, error } = (0, react_query_1.useQuery)({
        queryKey: [entityApiPath, entityId],
        queryFn: async () => {
            if (type === 'residence') {
                const response = await fetch(`/api/residences/${entityId}`, {
                    credentials: 'include',
                });
                if (!response.ok) {
                    if (response.status === 404) {
                        throw new Error('ENTITY_NOT_FOUND');
                    }
                    throw new Error(`Failed to fetch ${type}`);
                }
                return response.json();
            }
            else {
                return (0, queryClient_1.apiRequest)('GET', `${entityApiPath}/${entityId}`);
            }
        },
        enabled: !!entityId,
        retry: false, // Don't retry on 404s
    });
    if (!entityId) {
        return ((0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsxs)("p", { className: 'text-gray-500 mb-4', children: [type, " ID is required"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => navigate(backPath), "data-testid": 'button-back-to-list', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), backLabel || `Back to ${type}s`] })] }) }) }));
    }
    // Handle entity not found (specific to residence pages that had this logic)
    if (entityError && error?.message === 'ENTITY_NOT_FOUND' && type === 'residence') {
        return ((0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center max-w-md', children: [(0, jsx_runtime_1.jsx)("h2", { className: 'text-xl font-semibold mb-4', children: "Residence Not Found" }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-gray-500 mb-4', children: ["The residence ID \"", entityId, "\" doesn't exist in the development database."] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-400 mb-6', children: "This might be a production database ID. Please use a valid development residence ID." }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'default', onClick: () => navigate(backPath), "data-testid": 'button-back-to-list', className: 'w-full', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), backLabel || 'Back to Residences'] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => navigate('/residents/residences/e27ac924-8120-4904-a791-d1e9db544d58/documents'), "data-testid": 'button-go-to-valid-residence', className: 'w-full', children: "Go to Unit 101 (Test Residence)" })] })] }) }) }));
    }
    // Determine permissions based on user role and type
    const isUserTenant = user?.role === 'tenant';
    const isManager = user?.role === 'manager' || user?.role === 'admin';
    const permissions = userRole === 'manager'
        ? {
            allowCreate: isManager,
            allowEdit: isManager,
            allowDelete: isManager,
            showVisibilityToggle: isManager,
        }
        : {
            allowCreate: !isUserTenant,
            allowEdit: !isUserTenant,
            allowDelete: !isUserTenant,
            showVisibilityToggle: !isUserTenant,
        };
    // Generate entity name based on type
    const entityName = type === 'residence'
        ? (entity?.unitNumber || entity?.unit_number ? `Unit ${entity.unitNumber || entity.unit_number}` : 'Residence')
        : entity?.name;
    const defaultBackLabel = backLabel || (type === 'building' ? 'Back to Buildings' : t('backToResidences'));
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)("div", { className: 'p-6 pb-0', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => navigate(backPath), className: 'mb-4', "data-testid": 'button-back', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), defaultBackLabel] }) }), (0, jsx_runtime_1.jsx)(DocumentManager_1.default, { config: {
                    type,
                    userRole,
                    entityId,
                    entityName,
                    entityAddress: entity?.address,
                    ...permissions,
                } })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,