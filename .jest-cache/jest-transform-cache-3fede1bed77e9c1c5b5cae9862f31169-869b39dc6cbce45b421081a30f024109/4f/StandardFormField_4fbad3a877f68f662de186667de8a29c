f0e8edcdc679504fe7b2e1f523840227
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardFormField = StandardFormField;
exports.StandardSubmitButton = StandardSubmitButton;
exports.FormSection = FormSection;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const form_1 = require("@/components/ui/form");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const checkbox_1 = require("@/components/ui/checkbox");
const utils_1 = require("@/lib/utils");
const form_validation_helpers_1 = require("@/utils/form-validation-helpers");
/**
 * Standardized form field component that follows all Quebec compliance
 * and accessibility standards. Automatically generates test IDs and
 * applies consistent styling patterns.
 *
 * @param props - Configuration for the form field
 */
function StandardFormField({ control, name, label, type = 'text', placeholder, description, required = false, disabled = false, className = '', options = [], rows = 3, formName = 'form', autoComplete, min, max, step, maxLength, 'data-testid': explicitTestId, }) {
    // Auto-generate test ID following standards or use explicit override
    const testId = explicitTestId || form_validation_helpers_1.FormQuality.generateTestId(formName, name, ['select'].includes(type) ? 'select' : 'input');
    // Render the appropriate input component based on type
    const renderInput = (field) => {
        const baseProps = {
            ...field,
            placeholder,
            disabled,
            autoComplete,
            'data-testid': testId,
            className: (0, utils_1.cn)(
            // Standard styling for all inputs
            'transition-colors focus:ring-2 focus:ring-blue-500', 
            // Error state styling  
            field.error && 'border-red-500 focus:border-red-500', className),
        };
        switch (type) {
            case 'textarea':
                return ((0, jsx_runtime_1.jsx)(textarea_1.Textarea, { ...baseProps, rows: rows, maxLength: maxLength, className: (0, utils_1.cn)('min-h-[80px] resize-y', baseProps.className) }));
            case 'select':
                return ((0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, disabled: disabled, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": testId, className: baseProps.className, children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: placeholder || `Select ${label.toLowerCase()}` }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: options.map((option) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: option.value, disabled: option.disabled, "data-testid": `${testId}-option-${option.value}`, children: option.label }, option.value))) })] }));
            case 'checkbox':
                return ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { checked: field.value, onCheckedChange: field.onChange, disabled: disabled, "data-testid": testId, className: baseProps.className }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", children: label })] }));
            case 'number':
                return ((0, jsx_runtime_1.jsx)(input_1.Input, { ...baseProps, type: "number", min: min, max: max, step: step }));
            default:
                return ((0, jsx_runtime_1.jsx)(input_1.Input, { ...baseProps, type: type, min: min, max: max, step: step, maxLength: maxLength }));
        }
    };
    return ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: control, name: name, render: ({ field, fieldState }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: (0, utils_1.cn)('space-y-2', className), children: [type !== 'checkbox' && ((0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: (0, utils_1.cn)('text-sm font-medium leading-none', required && 'after:content-["*"] after:ml-0.5 after:text-red-500', fieldState.error && 'text-red-600'), children: label })), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: renderInput({ ...field, error: fieldState.error }) }), description && ((0, jsx_runtime_1.jsx)(form_1.FormDescription, { className: "text-sm text-muted-foreground", children: description })), (0, jsx_runtime_1.jsx)(form_1.FormMessage, { className: "text-sm text-red-600" })] })) }));
}
function StandardSubmitButton({ isLoading = false, loadingText = 'Submitting...', children, disabled = false, formName = 'form', className = '', variant = 'default', }) {
    const testId = form_validation_helpers_1.FormQuality.generateTestId(formName, 'submit', 'button');
    return ((0, jsx_runtime_1.jsx)("button", { type: "submit", disabled: disabled || isLoading, "data-testid": testId, className: (0, utils_1.cn)('inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md', 'transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2', variant === 'default' && 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500', variant === 'destructive' && 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500', variant === 'outline' && 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500', (disabled || isLoading) && 'opacity-50 cursor-not-allowed', className), children: isLoading ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("svg", { className: "w-4 h-4 mr-2 animate-spin", viewBox: "0 0 24 24", children: [(0, jsx_runtime_1.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4", fill: "none" }), (0, jsx_runtime_1.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })] }), loadingText] })) : (children) }));
}
function FormSection({ title, description, children, className = '', collapsible = false, defaultOpen = true, }) {
    const [isOpen, setIsOpen] = react_1.default.useState(defaultOpen);
    const toggleSection = () => {
        if (collapsible) {
            setIsOpen(!isOpen);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)('space-y-4', className), children: [title && ((0, jsx_runtime_1.jsxs)("div", { className: "border-b border-gray-200 pb-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: (0, utils_1.cn)('flex items-center justify-between', collapsible && 'cursor-pointer hover:text-blue-600'), onClick: toggleSection, children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium text-gray-900", children: title }), collapsible && ((0, jsx_runtime_1.jsx)("svg", { className: (0, utils_1.cn)('w-5 h-5 transition-transform', isOpen && 'rotate-180'), fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M19 9l-7 7-7-7" }) }))] }), description && ((0, jsx_runtime_1.jsx)("p", { className: "mt-1 text-sm text-gray-600", children: description }))] })), (!collapsible || isOpen) && ((0, jsx_runtime_1.jsx)("div", { className: "space-y-4", children: children }))] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,