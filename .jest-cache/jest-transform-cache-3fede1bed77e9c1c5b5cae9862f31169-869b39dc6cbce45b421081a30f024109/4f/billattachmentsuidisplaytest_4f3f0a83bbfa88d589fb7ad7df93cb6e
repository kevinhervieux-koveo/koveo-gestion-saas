840e90bc90f7e1e756940860c246f8e7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
/**
 * Bill Attachments UI Display Test
 * Tests that the Bill Details dialog properly displays attached documents
 * and that the AttachedFileSection component works correctly with bills.
 */
const globals_2 = require("@jest/globals");
const react_1 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
// Mock the API calls
const mockFetch = globals_1.jest.fn();
global.fetch = mockFetch;
// Mock window.open for file viewing
const mockWindowOpen = globals_1.jest.fn();
Object.defineProperty(window, 'open', {
    writable: true,
    value: mockWindowOpen,
});
// Mock URL.createObjectURL and revokeObjectURL for file downloads
Object.defineProperty(window.URL, 'createObjectURL', {
    writable: true,
    value: globals_1.jest.fn(() => 'mock-blob-url'),
});
Object.defineProperty(window.URL, 'revokeObjectURL', {
    writable: true,
    value: globals_1.jest.fn(),
});
// Mock DOM element creation and manipulation
Object.defineProperty(document, 'createElement', {
    writable: true,
    value: globals_1.jest.fn((tag) => {
        const element = {
            href: '',
            download: '',
            click: globals_1.jest.fn(),
            remove: globals_1.jest.fn(),
        };
        return element;
    }),
});
Object.defineProperty(document.body, 'appendChild', {
    writable: true,
    value: globals_1.jest.fn(),
});
Object.defineProperty(document.body, 'removeChild', {
    writable: true,
    value: globals_1.jest.fn(),
});
// Mock the BillDetail component (simplified version for testing)
const MockBillDetail = ({ bill }) => {
    const { useState, useEffect } = require('react');
    const [billDocuments, setBillDocuments] = useState([]);
    const [freshBill, setFreshBill] = useState(bill);
    useEffect(() => {
        // Simulate API call to fetch bill documents
        fetch(`/api/documents?attachedToType=bill&attachedToId=${bill.id}`)
            .then(response => response.json())
            .then(data => setBillDocuments(data.documents || []))
            .catch(console.error);
        // Simulate API call to fetch fresh bill data
        fetch(`/api/bills/${bill.id}`)
            .then(response => response.json())
            .then(data => setFreshBill(data))
            .catch(console.error);
    }, [bill.id]);
    const currentBill = freshBill || bill;
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "bill-detail", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Bill Details" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "bill-number", children: currentBill.billNumber }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "bill-status", children: currentBill.status }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "bill-category", children: currentBill.category }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "bill-amount", children: ["$", currentBill.totalAmount] })] }), (currentBill.filePath || billDocuments.length > 0) && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "uploaded-documents-section", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Uploaded Documents" }), currentBill.filePath && ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "direct-bill-upload", children: [(0, jsx_runtime_1.jsx)("span", { "data-testid": "file-name", children: currentBill.fileName }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-view-direct-bill", onClick: () => window.open(`/api/bills/${currentBill.id}/download-document`, '_blank'), children: "View" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-download-direct-bill", onClick: () => {
                                    const link = document.createElement('a');
                                    link.href = `/api/bills/${currentBill.id}/download-document`;
                                    link.download = currentBill.fileName || 'bill-document';
                                    document.body.appendChild(link);
                                    link.click();
                                    document.body.removeChild(link);
                                }, children: "Download" })] })), billDocuments.map((doc) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `attached-document-${doc.id}`, children: [(0, jsx_runtime_1.jsx)("span", { "data-testid": `doc-name-${doc.id}`, children: doc.name }), (0, jsx_runtime_1.jsx)("span", { "data-testid": `doc-type-${doc.id}`, children: doc.documentType || 'Document' }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-view-document-${doc.id}`, onClick: async () => {
                                    const response = await fetch(`/api/documents/${doc.id}/file`, {
                                        method: 'GET',
                                        credentials: 'include',
                                    });
                                    const blob = await response.blob();
                                    const url = window.URL.createObjectURL(blob);
                                    window.open(url, '_blank');
                                }, children: "View" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-download-document-${doc.id}`, onClick: async () => {
                                    const response = await fetch(`/api/documents/${doc.id}/file?download=true`, {
                                        method: 'GET',
                                        credentials: 'include',
                                    });
                                    const blob = await response.blob();
                                    const url = window.URL.createObjectURL(blob);
                                    const link = document.createElement('a');
                                    link.href = url;
                                    link.download = doc.fileName || doc.name || 'document';
                                    document.body.appendChild(link);
                                    link.click();
                                    document.body.removeChild(link);
                                    window.URL.revokeObjectURL(url);
                                }, children: "Download" })] }, doc.id)))] })), !currentBill.filePath && billDocuments.length === 0 && ((0, jsx_runtime_1.jsx)("div", { "data-testid": "no-attachments-message", children: "No documents attached to this bill" }))] }));
};
(0, globals_2.describe)('Bill Attachments UI Display', () => {
    let queryClient;
    (0, globals_2.beforeEach)(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: { retry: false },
                mutations: { retry: false },
            },
        });
        globals_1.jest.clearAllMocks();
    });
    const renderWithQueryClient = (component) => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    (0, globals_2.test)('should display bill with attached documents from documents table', async () => {
        const testBill = {
            id: 'bill-123',
            billNumber: '961B-2024-11-INSURANCE-1',
            status: 'paid',
            category: 'insurance',
            totalAmount: '2014.15',
            title: 'Insurance (I) - Osinski - Smitham',
            // No direct filePath - documents should come from documents table
            filePath: null,
            fileName: null,
        };
        const mockDocuments = [
            {
                id: 'doc-1',
                name: 'Invoice - 961B-2024-11-INSURANCE-1',
                documentType: 'maintenance',
                fileName: 'invoice-961b-2024-11-insurance-1.txt',
                filePath: 'bills/invoice-961b-2024-11-insurance-1-bill-123.txt',
                attachedToType: 'bill',
                attachedToId: 'bill-123',
            },
            {
                id: 'doc-2',
                name: 'Receipt - 961B-2024-11-INSURANCE-1',
                documentType: 'maintenance',
                fileName: 'receipt-961b-2024-11-insurance-1.txt',
                filePath: 'bills/receipt-961b-2024-11-insurance-1-bill-123.txt',
                attachedToType: 'bill',
                attachedToId: 'bill-123',
            }
        ];
        // Mock the API responses
        mockFetch
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve({ documents: mockDocuments }),
        }) // Documents API call
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve(testBill),
        }); // Fresh bill API call
        renderWithQueryClient((0, jsx_runtime_1.jsx)(MockBillDetail, { bill: testBill }));
        // Wait for API calls to complete
        await (0, react_1.waitFor)(() => {
            (0, globals_2.expect)(react_1.screen.getByTestId('uploaded-documents-section')).toBeInTheDocument();
        });
        // Verify bill information is displayed
        (0, globals_2.expect)(react_1.screen.getByTestId('bill-number')).toHaveTextContent('961B-2024-11-INSURANCE-1');
        (0, globals_2.expect)(react_1.screen.getByTestId('bill-status')).toHaveTextContent('paid');
        (0, globals_2.expect)(react_1.screen.getByTestId('bill-category')).toHaveTextContent('insurance');
        (0, globals_2.expect)(react_1.screen.getByTestId('bill-amount')).toHaveTextContent('$2014.15');
        // Verify attached documents are displayed
        (0, globals_2.expect)(react_1.screen.getByTestId('attached-document-doc-1')).toBeInTheDocument();
        (0, globals_2.expect)(react_1.screen.getByTestId('attached-document-doc-2')).toBeInTheDocument();
        // Verify document names
        (0, globals_2.expect)(react_1.screen.getByTestId('doc-name-doc-1')).toHaveTextContent('Invoice - 961B-2024-11-INSURANCE-1');
        (0, globals_2.expect)(react_1.screen.getByTestId('doc-name-doc-2')).toHaveTextContent('Receipt - 961B-2024-11-INSURANCE-1');
        // Verify document types
        (0, globals_2.expect)(react_1.screen.getByTestId('doc-type-doc-1')).toHaveTextContent('maintenance');
        (0, globals_2.expect)(react_1.screen.getByTestId('doc-type-doc-2')).toHaveTextContent('maintenance');
        // Verify action buttons exist
        (0, globals_2.expect)(react_1.screen.getByTestId('button-view-document-doc-1')).toBeInTheDocument();
        (0, globals_2.expect)(react_1.screen.getByTestId('button-download-document-doc-1')).toBeInTheDocument();
        (0, globals_2.expect)(react_1.screen.getByTestId('button-view-document-doc-2')).toBeInTheDocument();
        (0, globals_2.expect)(react_1.screen.getByTestId('button-download-document-doc-2')).toBeInTheDocument();
        // Verify API calls were made correctly
        (0, globals_2.expect)(mockFetch).toHaveBeenCalledWith('/api/documents?attachedToType=bill&attachedToId=bill-123');
        (0, globals_2.expect)(mockFetch).toHaveBeenCalledWith('/api/bills/bill-123');
    });
    (0, globals_2.test)('should display bill with direct file path attachment', async () => {
        const testBill = {
            id: 'bill-456',
            billNumber: 'TEST-2024-UTILITIES-1',
            status: 'pending',
            category: 'utilities',
            totalAmount: '150.00',
            title: 'Utilities Bill',
            // Direct attachment
            filePath: 'bills/utilities-bill-456.pdf',
            fileName: 'utilities-bill-456.pdf',
        };
        // Mock the API responses (no attached documents, empty array)
        mockFetch
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve({ documents: [] }),
        }) // Documents API call
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve(testBill),
        }); // Fresh bill API call
        renderWithQueryClient((0, jsx_runtime_1.jsx)(MockBillDetail, { bill: testBill }));
        // Wait for API calls to complete
        await (0, react_1.waitFor)(() => {
            (0, globals_2.expect)(react_1.screen.getByTestId('uploaded-documents-section')).toBeInTheDocument();
        });
        // Verify bill information is displayed
        (0, globals_2.expect)(react_1.screen.getByTestId('bill-number')).toHaveTextContent('TEST-2024-UTILITIES-1');
        (0, globals_2.expect)(react_1.screen.getByTestId('bill-category')).toHaveTextContent('utilities');
        // Verify direct bill upload section is displayed
        (0, globals_2.expect)(react_1.screen.getByTestId('direct-bill-upload')).toBeInTheDocument();
        (0, globals_2.expect)(react_1.screen.getByTestId('file-name')).toHaveTextContent('utilities-bill-456.pdf');
        // Verify direct bill action buttons
        (0, globals_2.expect)(react_1.screen.getByTestId('button-view-direct-bill')).toBeInTheDocument();
        (0, globals_2.expect)(react_1.screen.getByTestId('button-download-direct-bill')).toBeInTheDocument();
        // Verify no attached documents section since documents array is empty
        (0, globals_2.expect)(react_1.screen.queryByTestId('attached-document-doc-1')).not.toBeInTheDocument();
    });
    (0, globals_2.test)('should show no attachments message when bill has no files', async () => {
        const testBill = {
            id: 'bill-789',
            billNumber: 'TEST-2024-NO-ATTACHMENTS',
            status: 'pending',
            category: 'other',
            totalAmount: '100.00',
            title: 'Bill with no attachments',
            // No attachments
            filePath: null,
            fileName: null,
        };
        // Mock the API responses (no attached documents)
        mockFetch
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve({ documents: [] }),
        }) // Documents API call
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve(testBill),
        }); // Fresh bill API call
        renderWithQueryClient((0, jsx_runtime_1.jsx)(MockBillDetail, { bill: testBill }));
        // Wait for API calls to complete
        await (0, react_1.waitFor)(() => {
            (0, globals_2.expect)(react_1.screen.getByTestId('no-attachments-message')).toBeInTheDocument();
        });
        // Verify no documents section is NOT displayed
        (0, globals_2.expect)(react_1.screen.queryByTestId('uploaded-documents-section')).not.toBeInTheDocument();
        // Verify the no attachments message
        (0, globals_2.expect)(react_1.screen.getByTestId('no-attachments-message')).toHaveTextContent('No documents attached to this bill');
    });
    (0, globals_2.test)('should handle document view functionality', async () => {
        const testBill = {
            id: 'bill-view-test',
            billNumber: 'VIEW-TEST-001',
            status: 'paid',
            category: 'maintenance',
            totalAmount: '500.00',
            filePath: null,
            fileName: null,
        };
        const mockDocument = {
            id: 'doc-view-test',
            name: 'Test Document for Viewing',
            documentType: 'maintenance',
            fileName: 'test-document.pdf',
            filePath: 'bills/test-document.pdf',
            attachedToType: 'bill',
            attachedToId: 'bill-view-test',
        };
        // Mock the API responses
        mockFetch
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve({ documents: [mockDocument] }),
        }) // Documents API call
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve(testBill),
        }) // Fresh bill API call
            .mockResolvedValueOnce({
            ok: true,
            blob: () => Promise.resolve(new Blob(['test content'], { type: 'application/pdf' })),
        }); // File view API call
        renderWithQueryClient((0, jsx_runtime_1.jsx)(MockBillDetail, { bill: testBill }));
        // Wait for documents to load
        await (0, react_1.waitFor)(() => {
            (0, globals_2.expect)(react_1.screen.getByTestId('attached-document-doc-view-test')).toBeInTheDocument();
        });
        // Click the view button
        const viewButton = react_1.screen.getByTestId('button-view-document-doc-view-test');
        react_1.fireEvent.click(viewButton);
        // Wait for file view API call
        await (0, react_1.waitFor)(() => {
            (0, globals_2.expect)(mockFetch).toHaveBeenCalledWith('/api/documents/doc-view-test/file', {
                method: 'GET',
                credentials: 'include',
            });
        });
        // Verify window.open was called
        (0, globals_2.expect)(mockWindowOpen).toHaveBeenCalledWith('mock-blob-url', '_blank');
    });
    (0, globals_2.test)('should handle document download functionality', async () => {
        const testBill = {
            id: 'bill-download-test',
            billNumber: 'DOWNLOAD-TEST-001',
            status: 'paid',
            category: 'insurance',
            totalAmount: '1000.00',
            filePath: null,
            fileName: null,
        };
        const mockDocument = {
            id: 'doc-download-test',
            name: 'Test Document for Download',
            documentType: 'insurance',
            fileName: 'insurance-document.pdf',
            filePath: 'bills/insurance-document.pdf',
            attachedToType: 'bill',
            attachedToId: 'bill-download-test',
        };
        // Mock the API responses
        mockFetch
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve({ documents: [mockDocument] }),
        }) // Documents API call
            .mockResolvedValueOnce({
            ok: true,
            json: () => Promise.resolve(testBill),
        }) // Fresh bill API call
            .mockResolvedValueOnce({
            ok: true,
            blob: () => Promise.resolve(new Blob(['test download content'], { type: 'application/pdf' })),
        }); // File download API call
        renderWithQueryClient((0, jsx_runtime_1.jsx)(MockBillDetail, { bill: testBill }));
        // Wait for documents to load
        await (0, react_1.waitFor)(() => {
            (0, globals_2.expect)(react_1.screen.getByTestId('attached-document-doc-download-test')).toBeInTheDocument();
        });
        // Click the download button
        const downloadButton = react_1.screen.getByTestId('button-download-document-doc-download-test');
        react_1.fireEvent.click(downloadButton);
        // Wait for file download API call
        await (0, react_1.waitFor)(() => {
            (0, globals_2.expect)(mockFetch).toHaveBeenCalledWith('/api/documents/doc-download-test/file?download=true', {
                method: 'GET',
                credentials: 'include',
            });
        });
        // Verify DOM manipulation for download
        (0, globals_2.expect)(document.createElement).toHaveBeenCalledWith('a');
        (0, globals_2.expect)(document.body.appendChild).toHaveBeenCalled();
        (0, globals_2.expect)(document.body.removeChild).toHaveBeenCalled();
    });
    (0, globals_2.test)('should validate API query parameters for bill attachments', () => {
        const billId = 'test-bill-12345';
        const expectedQuery = `/api/documents?attachedToType=bill&attachedToId=${billId}`;
        // This validates the query format used in the BillDetail component
        (0, globals_2.expect)(expectedQuery).toBe('/api/documents?attachedToType=bill&attachedToId=test-bill-12345');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,