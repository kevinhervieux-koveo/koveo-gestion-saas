{"file":"/home/runner/workspace/tests/integration/demand-comment-manager-admin-access.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/demand-comment-manager-admin-access.test.ts"],"sourcesContent":["/**\n * @file Manager and Admin Comment Access Tests\n * @description Tests verifying that managers and admins can add comments to demands they have access to\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport { db } from '../../server/db';\nimport { \n  demands, \n  demandComments, \n  users, \n  residences, \n  buildings, \n  organizations, \n  userResidences,\n  userOrganizations\n} from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Mock Express app setup\nfunction createTestApp() {\n  const express = require('express');\n  const app = express();\n  \n  app.use(express.json());\n  \n  // Mock session middleware for testing - this will be overridden in tests\n  app.use((req: any, res: any, next: any) => {\n    // Default user - will be overridden in individual tests\n    req.user = { id: 'user-123', role: 'resident' }; \n    next();\n  });\n  \n  const { registerDemandRoutes } = require('../../server/api/demands');\n  registerDemandRoutes(app);\n  \n  return app;\n}\n\ndescribe('Manager and Admin Comment Access Tests', () => {\n  let app: any;\n  let testOrganization: any;\n  let testBuilding: any;\n  let testResidence: any;\n  let testDemand: any;\n  \n  // Test users\n  let adminUser: any;\n  let managerUser: any;\n  let residentUser: any;\n  let otherManagerUser: any;\n  let otherOrganization: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n\n    // Create test organization\n    const orgResult = await db.insert(organizations).values({\n      name: 'Test Organization',\n      type: 'residential',\n      address: '123 Test St',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H1H 1H1',\n      isActive: true,\n    }).returning();\n    testOrganization = orgResult[0];\n\n    // Create another organization for testing cross-organization access\n    const otherOrgResult = await db.insert(organizations).values({\n      name: 'Other Organization',\n      type: 'residential',\n      address: '456 Other St',\n      city: 'Other City',\n      province: 'QC',\n      postalCode: 'H2H 2H2',\n      isActive: true,\n    }).returning();\n    otherOrganization = otherOrgResult[0];\n\n    // Create test building\n    const buildingResult = await db.insert(buildings).values({\n      name: 'Test Building',\n      address: '456 Test Ave',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H2H 2H2',\n      buildingType: 'condo',\n      organizationId: testOrganization.id,\n      totalUnits: 10,\n      isActive: true,\n    }).returning();\n    testBuilding = buildingResult[0];\n\n    // Create test residence\n    const residenceResult = await db.insert(residences).values({\n      buildingId: testBuilding.id,\n      unitNumber: '101',\n      floor: 1,\n      squareFootage: '1000',\n      bedrooms: 2,\n      bathrooms: '1',\n      balcony: false,\n      isActive: true,\n    }).returning();\n    testResidence = residenceResult[0];\n\n    // Create test users\n    const adminResult = await db.insert(users).values({\n      username: 'admin',\n      firstName: 'Admin',\n      lastName: 'User',\n      email: 'admin@example.com',\n      password: 'hashed_password',\n      role: 'admin',\n      isActive: true,\n    }).returning();\n    adminUser = adminResult[0];\n\n    const managerResult = await db.insert(users).values({\n      username: 'manager',\n      firstName: 'Manager',\n      lastName: 'User',\n      email: 'manager@example.com',\n      password: 'hashed_password',\n      role: 'manager',\n      isActive: true,\n    }).returning();\n    managerUser = managerResult[0];\n\n    const residentResult = await db.insert(users).values({\n      username: 'resident',\n      firstName: 'Resident',\n      lastName: 'User',\n      email: 'resident@example.com',\n      password: 'hashed_password',\n      role: 'resident',\n      isActive: true,\n    }).returning();\n    residentUser = residentResult[0];\n\n    const otherManagerResult = await db.insert(users).values({\n      username: 'othermanager',\n      firstName: 'Other Manager',\n      lastName: 'User',\n      email: 'othermanager@example.com',\n      password: 'hashed_password',\n      role: 'manager',\n      isActive: true,\n    }).returning();\n    otherManagerUser = otherManagerResult[0];\n\n    // Associate manager with organization\n    await db.insert(userOrganizations).values({\n      userId: managerUser.id,\n      organizationId: testOrganization.id,\n      relationshipType: 'employee',\n      isActive: true,\n    });\n\n    // Associate other manager with different organization\n    await db.insert(userOrganizations).values({\n      userId: otherManagerUser.id,\n      organizationId: otherOrganization.id,\n      relationshipType: 'employee',\n      isActive: true,\n    });\n\n    // Associate resident with residence\n    await db.insert(userResidences).values({\n      userId: residentUser.id,\n      residenceId: testResidence.id,\n      relationshipType: 'resident',\n      startDate: new Date().toISOString().split('T')[0],\n      isActive: true,\n    });\n\n    // Create test demand from resident\n    const demandResult = await db.insert(demands).values({\n      submitterId: residentUser.id,\n      type: 'maintenance',\n      description: 'Test demand for comment access testing',\n      buildingId: testBuilding.id,\n      residenceId: testResidence.id,\n      status: 'submitted',\n    }).returning();\n    testDemand = demandResult[0];\n  });\n\n  afterEach(async () => {\n    // Clean up test data in proper order\n    try {\n      await db.delete(demandComments).where(eq(demandComments.demandId, testDemand.id));\n      await db.delete(demands).where(eq(demands.id, testDemand.id));\n      await db.delete(userResidences).where(eq(userResidences.userId, residentUser.id));\n      await db.delete(userOrganizations).where(eq(userOrganizations.userId, managerUser.id));\n      await db.delete(userOrganizations).where(eq(userOrganizations.userId, otherManagerUser.id));\n      await db.delete(users).where(eq(users.id, adminUser.id));\n      await db.delete(users).where(eq(users.id, managerUser.id));\n      await db.delete(users).where(eq(users.id, residentUser.id));\n      await db.delete(users).where(eq(users.id, otherManagerUser.id));\n      await db.delete(residences).where(eq(residences.id, testResidence.id));\n      await db.delete(buildings).where(eq(buildings.id, testBuilding.id));\n      await db.delete(organizations).where(eq(organizations.id, testOrganization.id));\n      await db.delete(organizations).where(eq(organizations.id, otherOrganization.id));\n    } catch (error) {\n      console.error('Cleanup error:', error);\n    }\n  });\n\n  describe('Admin Comment Access', () => {\n    it('should allow admin to add comments to any demand', async () => {\n      // Override app middleware to use admin user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = adminUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Admin comment on resident demand',\n        commentType: 'status_update',\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        demandId: testDemand.id,\n        commenterId: adminUser.id,\n        commentText: 'Admin comment on resident demand',\n        commentType: 'status_update',\n      });\n\n      expect(response.body.id).toBeDefined();\n      expect(response.body.createdAt).toBeDefined();\n    });\n\n    it('should allow admin to add internal comments', async () => {\n      // Override app middleware to use admin user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = adminUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Internal admin comment',\n        isInternal: true,\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body.isInternal).toBe(true);\n      expect(response.body.commentText).toBe('Internal admin comment');\n    });\n\n    it('should allow admin to retrieve comments on any demand', async () => {\n      // First create a comment\n      await db.insert(demandComments).values({\n        demandId: testDemand.id,\n        commenterId: adminUser.id,\n        commentText: 'Admin created comment',\n        isInternal: false,\n      });\n\n      // Override app middleware to use admin user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = adminUser;\n            next();\n          };\n        }\n      });\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .expect(200);\n\n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      const comment = response.body.find((c: any) => c.commentText === 'Admin created comment');\n      expect(comment).toBeDefined();\n      expect(comment.commenterId).toBe(adminUser.id);\n    });\n  });\n\n  describe('Manager Comment Access', () => {\n    it('should allow manager to add comments to demands from their organization', async () => {\n      // Override app middleware to use manager user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = managerUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Manager comment on organization demand',\n        commentType: 'update',\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        demandId: testDemand.id,\n        commenterId: managerUser.id,\n        commentText: 'Manager comment on organization demand',\n        commentType: 'update',\n      });\n\n      expect(response.body.id).toBeDefined();\n      expect(response.body.createdAt).toBeDefined();\n    });\n\n    it('should allow manager to add internal comments to their organization demands', async () => {\n      // Override app middleware to use manager user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = managerUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Internal manager comment',\n        isInternal: true,\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body.isInternal).toBe(true);\n      expect(response.body.commentText).toBe('Internal manager comment');\n      expect(response.body.commenterId).toBe(managerUser.id);\n    });\n\n    it('should deny manager access to demands from other organizations', async () => {\n      // Override app middleware to use other manager user (from different organization)\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = otherManagerUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Unauthorized manager comment',\n      };\n\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send(commentData)\n        .expect(403);\n    });\n\n    it('should allow manager to retrieve comments from their organization demands', async () => {\n      // First create a comment\n      await db.insert(demandComments).values({\n        demandId: testDemand.id,\n        commenterId: managerUser.id,\n        commentText: 'Manager created comment',\n        isInternal: false,\n      });\n\n      // Override app middleware to use manager user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = managerUser;\n            next();\n          };\n        }\n      });\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .expect(200);\n\n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      const comment = response.body.find((c: any) => c.commentText === 'Manager created comment');\n      expect(comment).toBeDefined();\n      expect(comment.commenterId).toBe(managerUser.id);\n    });\n  });\n\n  describe('Resident Comment Access', () => {\n    it('should allow resident to add comments to their own demands', async () => {\n      // Override app middleware to use resident user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = residentUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Resident comment on own demand',\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        demandId: testDemand.id,\n        commenterId: residentUser.id,\n        commentText: 'Resident comment on own demand',\n      });\n    });\n\n    it('should deny resident access to add comments on other users demands', async () => {\n      // Create a demand from a different user\n      const otherUserResult = await db.insert(users).values({\n        username: 'otherresident',\n        firstName: 'Other',\n        lastName: 'Resident',\n        email: 'other@example.com',\n        password: 'hashed_password',\n        role: 'resident',\n        isActive: true,\n      }).returning();\n      const otherUser = otherUserResult[0];\n\n      const otherDemandResult = await db.insert(demands).values({\n        submitterId: otherUser.id,\n        type: 'complaint',\n        description: 'Other user demand',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        status: 'submitted',\n      }).returning();\n      const otherDemand = otherDemandResult[0];\n\n      // Override app middleware to use resident user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = residentUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Unauthorized resident comment',\n      };\n\n      await request(app)\n        .post(`/api/demands/${otherDemand.id}/comments`)\n        .send(commentData)\n        .expect(403);\n\n      // Cleanup\n      await db.delete(demands).where(eq(demands.id, otherDemand.id));\n      await db.delete(users).where(eq(users.id, otherUser.id));\n    });\n  });\n\n  describe('Comment Validation for Managers and Admins', () => {\n    it('should validate comment text length for managers', async () => {\n      // Override app middleware to use manager user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = managerUser;\n            next();\n          };\n        }\n      });\n\n      // Test empty comment\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send({ commentText: '' })\n        .expect(400);\n\n      // Test too long comment\n      const tooLongComment = 'A'.repeat(1001);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send({ commentText: tooLongComment })\n        .expect(400);\n\n      // Test valid length comment\n      const validComment = 'A'.repeat(1000);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send({ commentText: validComment })\n        .expect(201);\n    });\n\n    it('should validate comment text length for admins', async () => {\n      // Override app middleware to use admin user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = adminUser;\n            next();\n          };\n        }\n      });\n\n      // Test exact maximum length\n      const maxLengthComment = 'A'.repeat(1000);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send({ commentText: maxLengthComment })\n        .expect(201);\n\n      // Test one character over maximum\n      const overLimitComment = 'A'.repeat(1001);\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send({ commentText: overLimitComment })\n        .expect(400);\n    });\n\n    it('should handle French characters for manager comments', async () => {\n      // Override app middleware to use manager user\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = managerUser;\n            next();\n          };\n        }\n      });\n\n      const commentData = {\n        commentText: 'Commentaire du gestionnaire avec caractères spéciaux: éàùç! 🏠',\n      };\n\n      const response = await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send(commentData)\n        .expect(201);\n\n      expect(response.body.commentText).toBe(commentData.commentText);\n      expect(response.body.commenterId).toBe(managerUser.id);\n    });\n  });\n\n  describe('Cross-Role Comment Interaction', () => {\n    it('should allow admin and manager to comment on the same demand', async () => {\n      // First, admin adds a comment\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = adminUser;\n            next();\n          };\n        }\n      });\n\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send({ commentText: 'Admin comment first' })\n        .expect(201);\n\n      // Then, manager adds a comment\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = managerUser;\n            next();\n          };\n        }\n      });\n\n      await request(app)\n        .post(`/api/demands/${testDemand.id}/comments`)\n        .send({ commentText: 'Manager comment second' })\n        .expect(201);\n\n      // Verify both comments exist\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .expect(200);\n\n      expect(response.body.length).toBe(2);\n      \n      const adminComment = response.body.find((c: any) => c.commentText === 'Admin comment first');\n      const managerComment = response.body.find((c: any) => c.commentText === 'Manager comment second');\n      \n      expect(adminComment).toBeDefined();\n      expect(managerComment).toBeDefined();\n      expect(adminComment.commenterId).toBe(adminUser.id);\n      expect(managerComment.commenterId).toBe(managerUser.id);\n    });\n\n    it('should maintain comment thread integrity with multiple authorized users', async () => {\n      const comments = [\n        { user: residentUser, text: 'Initial resident comment' },\n        { user: managerUser, text: 'Manager response' },\n        { user: adminUser, text: 'Admin final decision' },\n      ];\n\n      for (const comment of comments) {\n        app._router.stack.forEach((layer: any) => {\n          if (layer.name === 'anonymous') {\n            layer.handle = (req: any, res: any, next: any) => {\n              req.user = comment.user;\n              next();\n            };\n          }\n        });\n\n        await request(app)\n          .post(`/api/demands/${testDemand.id}/comments`)\n          .send({ commentText: comment.text })\n          .expect(201);\n      }\n\n      // Get comments as admin to see all\n      app._router.stack.forEach((layer: any) => {\n        if (layer.name === 'anonymous') {\n          layer.handle = (req: any, res: any, next: any) => {\n            req.user = adminUser;\n            next();\n          };\n        }\n      });\n\n      const response = await request(app)\n        .get(`/api/demands/${testDemand.id}/comments`)\n        .expect(200);\n\n      expect(response.body.length).toBe(3);\n      \n      // Verify all comments are linked to the correct demand\n      response.body.forEach((comment: any) => {\n        expect(comment.demandId).toBe(testDemand.id);\n      });\n\n      // Verify chronological order\n      expect(response.body[0].commentText).toBe('Initial resident comment');\n      expect(response.body[1].commentText).toBe('Manager response');\n      expect(response.body[2].commentText).toBe('Admin final decision');\n    });\n  });\n});"],"version":3}