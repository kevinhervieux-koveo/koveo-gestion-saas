8209418e645f8161aa4c05ff04f525ab
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentEditForm = DocumentEditForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const label_1 = require("@/components/ui/label");
const switch_1 = require("@/components/ui/switch");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const card_1 = require("@/components/ui/card");
const alert_dialog_1 = require("@/components/ui/alert-dialog");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
const SharedUploader_1 = require("./SharedUploader");
// Document categories matching the ones used in DocumentCreateForm
const DOCUMENT_CATEGORIES = [
    { value: 'bylaw', label: 'Bylaws' },
    { value: 'financial', label: 'Financial' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'legal', label: 'Legal' },
    { value: 'meeting_minutes', label: 'Meeting Minutes' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'contracts', label: 'Contracts' },
    { value: 'permits', label: 'Permits' },
    { value: 'inspection', label: 'Inspection' },
    { value: 'other', label: 'Other' },
];
// Form schema for document editing
const documentEditSchema = zod_2.z.object({
    name: zod_2.z.string().min(1, 'Document name is required').max(255, 'Name must be less than 255 characters'),
    description: zod_2.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_2.z.enum([
        'bylaw',
        'financial',
        'maintenance',
        'legal',
        'meeting_minutes',
        'insurance',
        'contracts',
        'permits',
        'inspection',
        'other'
    ]),
    isVisibleToTenants: zod_2.z.boolean().optional(),
});
function DocumentEditForm({ document, onSuccess, onCancel, onDelete, }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // State for file replacement
    const [selectedFile, setSelectedFile] = (0, react_1.useState)(null);
    const [textContent, setTextContent] = (0, react_1.useState)(null);
    const [isReplaceFile, setIsReplaceFile] = (0, react_1.useState)(false);
    // Upload context for secure storage
    const uploadContext = {
        type: document.buildingId ? 'buildings' : 'residences',
        buildingId: document.buildingId || undefined,
        residenceId: document.residenceId || undefined,
        userRole: 'admin', // This would be dynamic based on current user
        userId: 'current-user' // This would be dynamic based on current user
    };
    // Form setup with existing document data
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(documentEditSchema),
        defaultValues: {
            name: document.name || '',
            description: document.description || '',
            category: document.documentType || document.category || 'other',
            isVisibleToTenants: document.isVisibleToTenants || false,
        }
    });
    // Delete document mutation
    const deleteDocumentMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('DELETE', `/api/documents/${document.id}`);
            if (!response.ok) {
                const error = await response.json().catch(() => ({ message: 'Unknown error' }));
                throw new Error(error.message || 'Failed to delete document');
            }
            // DELETE endpoints often return empty responses, so don't try to parse JSON
            // Just return success if the response is ok
            return { success: true };
        },
        onSuccess: () => {
            toast({
                title: 'Document deleted',
                description: 'The document has been successfully deleted.',
            });
            // Invalidate relevant queries
            queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
            queryClient.invalidateQueries({ queryKey: ['/api/documents', document.id] });
            if (onDelete) {
                onDelete();
            }
            else {
                onSuccess();
            }
        },
        onError: (error) => {
            toast({
                title: 'Delete failed',
                description: error.message || 'Failed to delete document. Please try again.',
                variant: 'destructive',
            });
        },
    });
    // Update document mutation
    const updateDocumentMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const formData = new FormData();
            // Add document metadata
            formData.append('name', data.name);
            formData.append('documentType', data.category);
            if (data.description) {
                formData.append('description', data.description);
            }
            formData.append('isVisibleToTenants', data.isVisibleToTenants ? 'true' : 'false');
            // Add entity associations
            if (document.buildingId) {
                formData.append('buildingId', document.buildingId);
            }
            if (document.residenceId) {
                formData.append('residenceId', document.residenceId);
            }
            // Add file if replacing
            if (isReplaceFile && selectedFile) {
                formData.append('file', selectedFile);
            }
            else if (isReplaceFile && textContent) {
                // Handle text content creation
                const textBlob = new Blob([textContent], { type: 'text/plain' });
                const textFile = new File([textBlob], `${data.name}.txt`, { type: 'text/plain' });
                formData.append('file', textFile);
            }
            const response = await (0, queryClient_1.apiRequest)('PUT', `/api/documents/${document.id}`, {
                body: formData,
            });
            if (!response.ok) {
                const error = await response.json().catch(() => ({ message: 'Unknown error' }));
                throw new Error(error.message || 'Failed to update document');
            }
            return response.json();
        },
        onSuccess: (data) => {
            toast({
                title: 'Document updated',
                description: 'The document has been successfully updated.',
            });
            // Invalidate relevant queries
            queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
            queryClient.invalidateQueries({ queryKey: ['/api/documents', document.id] });
            onSuccess();
        },
        onError: (error) => {
            toast({
                title: 'Update failed',
                description: error.message || 'Failed to update document. Please try again.',
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (data) => {
        updateDocumentMutation.mutate(data);
    };
    const handleDelete = () => {
        deleteDocumentMutation.mutate();
    };
    const handleFileUpload = (file, textContent) => {
        setSelectedFile(file);
        setTextContent(textContent);
    };
    const handleViewDocument = () => {
        if (document.filePath) {
            // Open document in new tab for viewing
            window.open(`/api/documents/${document.id}/file`, '_blank');
        }
    };
    const handleDownloadDocument = async () => {
        try {
            // Use fetch with credentials to ensure authentication
            const response = await fetch(`/api/documents/${document.id}/file?download=true`, {
                method: 'GET',
                credentials: 'include', // Include authentication cookies
            });
            if (!response.ok) {
                throw new Error(`Download failed: ${response.status} ${response.statusText}`);
            }
            // Get the filename from Content-Disposition header or use document name
            const contentDisposition = response.headers.get('Content-Disposition');
            let fileName = document.fileName || document.name || 'document';
            if (contentDisposition) {
                const fileNameMatch = contentDisposition.match(/filename="([^"]+)"/);
                if (fileNameMatch) {
                    fileName = fileNameMatch[1];
                }
            }
            // Convert response to blob and create download
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            // Clean up
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
            toast({
                title: 'Download started',
                description: 'The document download has started.',
            });
        }
        catch (error) {
            console.error('Download failed:', error);
            toast({
                title: 'Download failed',
                description: 'Failed to download document. Please try again.',
                variant: 'destructive',
            });
        }
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: "max-w-2xl mx-auto space-y-6", children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-lg", children: "Document Information" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "name", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Document Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Enter document name", ...field, "data-testid": "input-document-name" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "category", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-document-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select a category" }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: DOCUMENT_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "description", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Enter document description (optional)", className: "resize-none", rows: 3, ...field, "data-testid": "input-document-description" }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Provide additional details about this document" }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "isVisibleToTenants", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-0.5", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "text-base", children: "Visible to Tenants" }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Allow tenants to view and download this document" })] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(switch_1.Switch, { checked: field.value || false, onCheckedChange: field.onChange, "data-testid": "switch-visible-to-tenants" }) })] })) })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-lg", children: "File Management" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "space-y-4", children: [document.filePath && ((0, jsx_runtime_1.jsx)("div", { className: "bg-gray-50 p-3 rounded-lg", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium", children: "Current File" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-600", children: document.fileName || document.name })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: () => handleViewDocument(), "data-testid": "button-view-document", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: "w-3 h-3 mr-1" }), "View"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: () => handleDownloadDocument(), "data-testid": "button-download-document", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: "w-3 h-3 mr-1" }), "Download"] })] })] }) })), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)("input", { type: "checkbox", id: "replace-file", checked: isReplaceFile, onChange: (e) => setIsReplaceFile(e.target.checked), className: "rounded", "data-testid": "checkbox-replace-file" }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "replace-file", children: "Replace file" })] }), isReplaceFile && ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(SharedUploader_1.SharedUploader, { context: uploadContext, onFileSelect: handleFileUpload, maxFiles: 1, "data-testid": "uploader-replace-file" }) }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between pt-4", children: [(0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialog, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "destructive", disabled: updateDocumentMutation.isPending || deleteDocumentMutation.isPending, "data-testid": "button-delete-document", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: "w-4 h-4 mr-2" }), "Delete Document"] }) }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogContent, { children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogHeader, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTitle, { children: "Delete Document" }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogDescription, { children: ["Are you sure you want to delete \"", document.name, "\"? This action cannot be undone and will permanently remove the document and its file."] })] }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogCancel, { "data-testid": "button-cancel-delete", children: "Cancel" }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogAction, { onClick: handleDelete, disabled: deleteDocumentMutation.isPending, className: "bg-destructive text-destructive-foreground hover:bg-destructive/90", "data-testid": "button-confirm-delete", children: deleteDocumentMutation.isPending ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "w-4 h-4 mr-2 animate-spin" }), "Deleting..."] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: "w-4 h-4 mr-2" }), "Delete"] })) })] })] })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-3", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: onCancel, disabled: updateDocumentMutation.isPending || deleteDocumentMutation.isPending, "data-testid": "button-cancel", children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: updateDocumentMutation.isPending || deleteDocumentMutation.isPending, "data-testid": "button-save-document", children: updateDocumentMutation.isPending ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "w-4 h-4 mr-2 animate-spin" }), "Saving..."] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: "w-4 h-4 mr-2" }), "Save Changes"] })) })] })] })] }) }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2NvbXBvbmVudHMvZG9jdW1lbnQtbWFuYWdlbWVudC9Eb2N1bWVudEVkaXRGb3JtLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVGQSw0Q0FnZEM7O0FBdmlCRCwrQ0FBbUQ7QUFDbkQscURBQTBDO0FBQzFDLGlEQUFzRDtBQUN0RCx1REFBb0U7QUFDcEUsNkJBQXdCO0FBQ3hCLG1EQUFnRDtBQUNoRCxpREFBOEM7QUFDOUMsdURBQW9EO0FBQ3BELGlEQUE4QztBQUM5QyxtREFBZ0Q7QUFDaEQsK0NBUThCO0FBQzlCLG1EQU1nQztBQUNoQywrQ0FBZ0Y7QUFDaEYsK0RBVXNDO0FBQ3RDLCtDQUFnRjtBQUNoRixpREFBNkM7QUFDN0MsbURBQStDO0FBQy9DLHFEQUFrRDtBQUlsRCxtRUFBbUU7QUFDbkUsTUFBTSxtQkFBbUIsR0FBRztJQUMxQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUNuQyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUMxQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRTtJQUM5QyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUNsQyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7SUFDdEQsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDMUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDMUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDdEMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUU7SUFDNUMsRUFB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QUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2NvbXBvbmVudHMvZG9jdW1lbnQtbWFuYWdlbWVudC9Eb2N1bWVudEVkaXRGb3JtLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuaW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XG5pbXBvcnQgeyB1c2VNdXRhdGlvbiwgdXNlUXVlcnlDbGllbnQgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2lucHV0JztcbmltcG9ydCB7IFRleHRhcmVhIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3RleHRhcmVhJztcbmltcG9ydCB7IExhYmVsIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2xhYmVsJztcbmltcG9ydCB7IFN3aXRjaCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zd2l0Y2gnO1xuaW1wb3J0IHtcbiAgRm9ybSxcbiAgRm9ybUNvbnRyb2wsXG4gIEZvcm1GaWVsZCxcbiAgRm9ybUl0ZW0sXG4gIEZvcm1MYWJlbCxcbiAgRm9ybU1lc3NhZ2UsXG4gIEZvcm1EZXNjcmlwdGlvbixcbn0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2Zvcm0nO1xuaW1wb3J0IHtcbiAgU2VsZWN0LFxuICBTZWxlY3RDb250ZW50LFxuICBTZWxlY3RJdGVtLFxuICBTZWxlY3RUcmlnZ2VyLFxuICBTZWxlY3RWYWx1ZSxcbn0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlbGVjdCc7XG5pbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2NhcmQnO1xuaW1wb3J0IHsgXG4gIEFsZXJ0RGlhbG9nLFxuICBBbGVydERpYWxvZ0FjdGlvbixcbiAgQWxlcnREaWFsb2dDYW5jZWwsXG4gIEFsZXJ0RGlhbG9nQ29udGVudCxcbiAgQWxlcnREaWFsb2dEZXNjcmlwdGlvbixcbiAgQWxlcnREaWFsb2dGb290ZXIsXG4gIEFsZXJ0RGlhbG9nSGVhZGVyLFxuICBBbGVydERpYWxvZ1RpdGxlLFxuICBBbGVydERpYWxvZ1RyaWdnZXIsXG59IGZyb20gJ0AvY29tcG9uZW50cy91aS9hbGVydC1kaWFsb2cnO1xuaW1wb3J0IHsgRmlsZVRleHQsIFVwbG9hZCwgU2F2ZSwgWCwgRG93bmxvYWQsIEV5ZSwgVHJhc2gyIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbmltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnQC9ob29rcy91c2UtdG9hc3QnO1xuaW1wb3J0IHsgYXBpUmVxdWVzdCB9IGZyb20gJ0AvbGliL3F1ZXJ5Q2xpZW50JztcbmltcG9ydCB7IFNoYXJlZFVwbG9hZGVyIH0gZnJvbSAnLi9TaGFyZWRVcGxvYWRlcic7XG5pbXBvcnQgdHlwZSB7IERvY3VtZW50IH0gZnJvbSAnQHNoYXJlZC9zY2hlbWEnO1xuaW1wb3J0IHR5cGUgeyBVcGxvYWRDb250ZXh0IH0gZnJvbSAnQHNoYXJlZC9jb25maWcvdXBsb2FkLWNvbmZpZyc7XG5cbi8vIERvY3VtZW50IGNhdGVnb3JpZXMgbWF0Y2hpbmcgdGhlIG9uZXMgdXNlZCBpbiBEb2N1bWVudENyZWF0ZUZvcm1cbmNvbnN0IERPQ1VNRU5UX0NBVEVHT1JJRVMgPSBbXG4gIHsgdmFsdWU6ICdieWxhdycsIGxhYmVsOiAnQnlsYXdzJyB9LFxuICB7IHZhbHVlOiAnZmluYW5jaWFsJywgbGFiZWw6ICdGaW5hbmNpYWwnIH0sXG4gIHsgdmFsdWU6ICdtYWludGVuYW5jZScsIGxhYmVsOiAnTWFpbnRlbmFuY2UnIH0sXG4gIHsgdmFsdWU6ICdsZWdhbCcsIGxhYmVsOiAnTGVnYWwnIH0sXG4gIHsgdmFsdWU6ICdtZWV0aW5nX21pbnV0ZXMnLCBsYWJlbDogJ01lZXRpbmcgTWludXRlcycgfSxcbiAgeyB2YWx1ZTogJ2luc3VyYW5jZScsIGxhYmVsOiAnSW5zdXJhbmNlJyB9LFxuICB7IHZhbHVlOiAnY29udHJhY3RzJywgbGFiZWw6ICdDb250cmFjdHMnIH0sXG4gIHsgdmFsdWU6ICdwZXJtaXRzJywgbGFiZWw6ICdQZXJtaXRzJyB9LFxuICB7IHZhbHVlOiAnaW5zcGVjdGlvbicsIGxhYmVsOiAnSW5zcGVjdGlvbicgfSxcbiAgeyB2YWx1ZTogJ290aGVyJywgbGFiZWw6ICdPdGhlcicgfSxcbl07XG5cbi8vIEZvcm0gc2NoZW1hIGZvciBkb2N1bWVudCBlZGl0aW5nXG5jb25zdCBkb2N1bWVudEVkaXRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEsICdEb2N1bWVudCBuYW1lIGlzIHJlcXVpcmVkJykubWF4KDI1NSwgJ05hbWUgbXVzdCBiZSBsZXNzIHRoYW4gMjU1IGNoYXJhY3RlcnMnKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkubWF4KDEwMDAsICdEZXNjcmlwdGlvbiBtdXN0IGJlIGxlc3MgdGhhbiAxMDAwIGNoYXJhY3RlcnMnKS5vcHRpb25hbCgpLFxuICBjYXRlZ29yeTogei5lbnVtKFtcbiAgICAnYnlsYXcnLFxuICAgICdmaW5hbmNpYWwnLCBcbiAgICAnbWFpbnRlbmFuY2UnLFxuICAgICdsZWdhbCcsXG4gICAgJ21lZXRpbmdfbWludXRlcycsXG4gICAgJ2luc3VyYW5jZScsXG4gICAgJ2NvbnRyYWN0cycsXG4gICAgJ3Blcm1pdHMnLFxuICAgICdpbnNwZWN0aW9uJyxcbiAgICAnb3RoZXInXG4gIF0pLFxuICBpc1Zpc2libGVUb1RlbmFudHM6IHouYm9vbGVhbigpLm9wdGlvbmFsKCksXG59KTtcblxudHlwZSBEb2N1bWVudEVkaXREYXRhID0gei5pbmZlcjx0eXBlb2YgZG9jdW1lbnRFZGl0U2NoZW1hPjtcblxuaW50ZXJmYWNlIERvY3VtZW50RWRpdEZvcm1Qcm9wcyB7XG4gIGRvY3VtZW50OiBEb2N1bWVudDtcbiAgb25TdWNjZXNzOiAoKSA9PiB2b2lkO1xuICBvbkNhbmNlbDogKCkgPT4gdm9pZDtcbiAgb25EZWxldGU/OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRG9jdW1lbnRFZGl0Rm9ybSh7XG4gIGRvY3VtZW50LFxuICBvblN1Y2Nlc3MsXG4gIG9uQ2FuY2VsLFxuICBvbkRlbGV0ZSxcbn06IERvY3VtZW50RWRpdEZvcm1Qcm9wcykge1xuICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIFxuICAvLyBTdGF0ZSBmb3IgZmlsZSByZXBsYWNlbWVudFxuICBjb25zdCBbc2VsZWN0ZWRGaWxlLCBzZXRTZWxlY3RlZEZpbGVdID0gdXNlU3RhdGU8RmlsZSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbdGV4dENvbnRlbnQsIHNldFRleHRDb250ZW50XSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaXNSZXBsYWNlRmlsZSwgc2V0SXNSZXBsYWNlRmlsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgLy8gVXBsb2FkIGNvbnRleHQgZm9yIHNlY3VyZSBzdG9yYWdlXG4gIGNvbnN0IHVwbG9hZENvbnRleHQ6IFVwbG9hZENvbnRleHQgPSB7XG4gICAgdHlwZTogZG9jdW1lbnQuYnVpbGRpbmdJZCA/ICdidWlsZGluZ3MnIDogJ3Jlc2lkZW5jZXMnLFxuICAgIGJ1aWxkaW5nSWQ6IGRvY3VtZW50LmJ1aWxkaW5nSWQgfHwgdW5kZWZpbmVkLFxuICAgIHJlc2lkZW5jZUlkOiBkb2N1bWVudC5yZXNpZGVuY2VJZCB8fCB1bmRlZmluZWQsXG4gICAgdXNlclJvbGU6ICdhZG1pbicsIC8vIFRoaXMgd291bGQgYmUgZHluYW1pYyBiYXNlZCBvbiBjdXJyZW50IHVzZXJcbiAgICB1c2VySWQ6ICdjdXJyZW50LXVzZXInIC8vIFRoaXMgd291bGQgYmUgZHluYW1pYyBiYXNlZCBvbiBjdXJyZW50IHVzZXJcbiAgfTtcblxuICAvLyBGb3JtIHNldHVwIHdpdGggZXhpc3RpbmcgZG9jdW1lbnQgZGF0YVxuICBjb25zdCBmb3JtID0gdXNlRm9ybTxEb2N1bWVudEVkaXREYXRhPih7XG4gICAgcmVzb2x2ZXI6IHpvZFJlc29sdmVyKGRvY3VtZW50RWRpdFNjaGVtYSksXG4gICAgZGVmYXVsdFZhbHVlczoge1xuICAgICAgbmFtZTogZG9jdW1lbnQubmFtZSB8fCAnJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBkb2N1bWVudC5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgIGNhdGVnb3J5OiAoZG9jdW1lbnQuZG9jdW1lbnRUeXBlIGFzIGFueSkgfHwgZG9jdW1lbnQuY2F0ZWdvcnkgfHwgJ290aGVyJyxcbiAgICAgIGlzVmlzaWJsZVRvVGVuYW50czogZG9jdW1lbnQuaXNWaXNpYmxlVG9UZW5hbnRzIHx8IGZhbHNlLFxuICAgIH1cbiAgfSk7XG5cbiAgLy8gRGVsZXRlIGRvY3VtZW50IG11dGF0aW9uXG4gIGNvbnN0IGRlbGV0ZURvY3VtZW50TXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlSZXF1ZXN0KCdERUxFVEUnLCBgL2FwaS9kb2N1bWVudHMvJHtkb2N1bWVudC5pZH1gKTtcbiAgICAgIFxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKS5jYXRjaCgoKSA9PiAoeyBtZXNzYWdlOiAnVW5rbm93biBlcnJvcicgfSkpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGRlbGV0ZSBkb2N1bWVudCcpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBERUxFVEUgZW5kcG9pbnRzIG9mdGVuIHJldHVybiBlbXB0eSByZXNwb25zZXMsIHNvIGRvbid0IHRyeSB0byBwYXJzZSBKU09OXG4gICAgICAvLyBKdXN0IHJldHVybiBzdWNjZXNzIGlmIHRoZSByZXNwb25zZSBpcyBva1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0sXG4gICAgb25TdWNjZXNzOiAoKSA9PiB7XG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAnRG9jdW1lbnQgZGVsZXRlZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIGRvY3VtZW50IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBkZWxldGVkLicsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gSW52YWxpZGF0ZSByZWxldmFudCBxdWVyaWVzXG4gICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbJy9hcGkvZG9jdW1lbnRzJ10gfSk7XG4gICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbJy9hcGkvZG9jdW1lbnRzJywgZG9jdW1lbnQuaWRdIH0pO1xuICAgICAgXG4gICAgICBpZiAob25EZWxldGUpIHtcbiAgICAgICAgb25EZWxldGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uU3VjY2VzcygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25FcnJvcjogKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ0RlbGV0ZSBmYWlsZWQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGRlbGV0ZSBkb2N1bWVudC4gUGxlYXNlIHRyeSBhZ2Fpbi4nLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVXBkYXRlIGRvY3VtZW50IG11dGF0aW9uXG4gIGNvbnN0IHVwZGF0ZURvY3VtZW50TXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKGRhdGE6IERvY3VtZW50RWRpdERhdGEpID0+IHtcbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBkb2N1bWVudCBtZXRhZGF0YVxuICAgICAgZm9ybURhdGEuYXBwZW5kKCduYW1lJywgZGF0YS5uYW1lKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZG9jdW1lbnRUeXBlJywgZGF0YS5jYXRlZ29yeSk7XG4gICAgICBpZiAoZGF0YS5kZXNjcmlwdGlvbikge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2Rlc2NyaXB0aW9uJywgZGF0YS5kZXNjcmlwdGlvbik7XG4gICAgICB9XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ2lzVmlzaWJsZVRvVGVuYW50cycsIGRhdGEuaXNWaXNpYmxlVG9UZW5hbnRzID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBlbnRpdHkgYXNzb2NpYXRpb25zXG4gICAgICBpZiAoZG9jdW1lbnQuYnVpbGRpbmdJZCkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2J1aWxkaW5nSWQnLCBkb2N1bWVudC5idWlsZGluZ0lkKTtcbiAgICAgIH1cbiAgICAgIGlmIChkb2N1bWVudC5yZXNpZGVuY2VJZCkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3Jlc2lkZW5jZUlkJywgZG9jdW1lbnQucmVzaWRlbmNlSWQpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgZmlsZSBpZiByZXBsYWNpbmdcbiAgICAgIGlmIChpc1JlcGxhY2VGaWxlICYmIHNlbGVjdGVkRmlsZSkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBzZWxlY3RlZEZpbGUpO1xuICAgICAgfSBlbHNlIGlmIChpc1JlcGxhY2VGaWxlICYmIHRleHRDb250ZW50KSB7XG4gICAgICAgIC8vIEhhbmRsZSB0ZXh0IGNvbnRlbnQgY3JlYXRpb25cbiAgICAgICAgY29uc3QgdGV4dEJsb2IgPSBuZXcgQmxvYihbdGV4dENvbnRlbnRdLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9KTtcbiAgICAgICAgY29uc3QgdGV4dEZpbGUgPSBuZXcgRmlsZShbdGV4dEJsb2JdLCBgJHtkYXRhLm5hbWV9LnR4dGAsIHsgdHlwZTogJ3RleHQvcGxhaW4nIH0pO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCB0ZXh0RmlsZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpUmVxdWVzdCgnUFVUJywgYC9hcGkvZG9jdW1lbnRzLyR7ZG9jdW1lbnQuaWR9YCwge1xuICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+ICh7IG1lc3NhZ2U6ICdVbmtub3duIGVycm9yJyB9KSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gdXBkYXRlIGRvY3VtZW50Jyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IChkYXRhKSA9PiB7XG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAnRG9jdW1lbnQgdXBkYXRlZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIGRvY3VtZW50IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSB1cGRhdGVkLicsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gSW52YWxpZGF0ZSByZWxldmFudCBxdWVyaWVzXG4gICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbJy9hcGkvZG9jdW1lbnRzJ10gfSk7XG4gICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyh7IHF1ZXJ5S2V5OiBbJy9hcGkvZG9jdW1lbnRzJywgZG9jdW1lbnQuaWRdIH0pO1xuICAgICAgXG4gICAgICBvblN1Y2Nlc3MoKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6ICdVcGRhdGUgZmFpbGVkJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgZG9jdW1lbnQuIFBsZWFzZSB0cnkgYWdhaW4uJyxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gKGRhdGE6IERvY3VtZW50RWRpdERhdGEpID0+IHtcbiAgICB1cGRhdGVEb2N1bWVudE11dGF0aW9uLm11dGF0ZShkYXRhKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVEZWxldGUgPSAoKSA9PiB7XG4gICAgZGVsZXRlRG9jdW1lbnRNdXRhdGlvbi5tdXRhdGUoKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVGaWxlVXBsb2FkID0gKGZpbGU6IEZpbGUgfCBudWxsLCB0ZXh0Q29udGVudDogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgIHNldFNlbGVjdGVkRmlsZShmaWxlKTtcbiAgICBzZXRUZXh0Q29udGVudCh0ZXh0Q29udGVudCk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlVmlld0RvY3VtZW50ID0gKCkgPT4ge1xuICAgIGlmIChkb2N1bWVudC5maWxlUGF0aCkge1xuICAgICAgLy8gT3BlbiBkb2N1bWVudCBpbiBuZXcgdGFiIGZvciB2aWV3aW5nXG4gICAgICB3aW5kb3cub3BlbihgL2FwaS9kb2N1bWVudHMvJHtkb2N1bWVudC5pZH0vZmlsZWAsICdfYmxhbmsnKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRG93bmxvYWREb2N1bWVudCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGZldGNoIHdpdGggY3JlZGVudGlhbHMgdG8gZW5zdXJlIGF1dGhlbnRpY2F0aW9uXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2RvY3VtZW50cy8ke2RvY3VtZW50LmlkfS9maWxlP2Rvd25sb2FkPXRydWVgLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsIC8vIEluY2x1ZGUgYXV0aGVudGljYXRpb24gY29va2llc1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEb3dubG9hZCBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCB0aGUgZmlsZW5hbWUgZnJvbSBDb250ZW50LURpc3Bvc2l0aW9uIGhlYWRlciBvciB1c2UgZG9jdW1lbnQgbmFtZVxuICAgICAgY29uc3QgY29udGVudERpc3Bvc2l0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtRGlzcG9zaXRpb24nKTtcbiAgICAgIGxldCBmaWxlTmFtZSA9IChkb2N1bWVudCBhcyBhbnkpLmZpbGVOYW1lIHx8IGRvY3VtZW50Lm5hbWUgfHwgJ2RvY3VtZW50JztcbiAgICAgIFxuICAgICAgaWYgKGNvbnRlbnREaXNwb3NpdGlvbikge1xuICAgICAgICBjb25zdCBmaWxlTmFtZU1hdGNoID0gY29udGVudERpc3Bvc2l0aW9uLm1hdGNoKC9maWxlbmFtZT1cIihbXlwiXSspXCIvKTtcbiAgICAgICAgaWYgKGZpbGVOYW1lTWF0Y2gpIHtcbiAgICAgICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lTWF0Y2hbMV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ29udmVydCByZXNwb25zZSB0byBibG9iIGFuZCBjcmVhdGUgZG93bmxvYWRcbiAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgIFxuICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIGxpbmsuaHJlZiA9IHVybDtcbiAgICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICBcbiAgICAgIC8vIENsZWFuIHVwXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspO1xuICAgICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgIFxuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ0Rvd25sb2FkIHN0YXJ0ZWQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBkb2N1bWVudCBkb3dubG9hZCBoYXMgc3RhcnRlZC4nLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Rvd25sb2FkIGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAnRG93bmxvYWQgZmFpbGVkJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdGYWlsZWQgdG8gZG93bmxvYWQgZG9jdW1lbnQuIFBsZWFzZSB0cnkgYWdhaW4uJyxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWF4LXctMnhsIG14LWF1dG8gc3BhY2UteS02XCI+XG5cbiAgICAgIDxGb3JtIHsuLi5mb3JtfT5cbiAgICAgICAgPGZvcm0gb25TdWJtaXQ9e2Zvcm0uaGFuZGxlU3VibWl0KG9uU3VibWl0KX0gY2xhc3NOYW1lPVwic3BhY2UteS02XCI+XG4gICAgICAgICAgey8qIERvY3VtZW50IEluZm9ybWF0aW9uIENhcmQgKi99XG4gICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9XCJ0ZXh0LWxnXCI+RG9jdW1lbnQgSW5mb3JtYXRpb248L0NhcmRUaXRsZT5cbiAgICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgICAgey8qIERvY3VtZW50IE5hbWUgKi99XG4gICAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgICAgbmFtZT1cIm5hbWVcIlxuICAgICAgICAgICAgICAgIHJlbmRlcj17KHsgZmllbGQgfSkgPT4gKFxuICAgICAgICAgICAgICAgICAgPEZvcm1JdGVtPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUxhYmVsPkRvY3VtZW50IE5hbWUgKjwvRm9ybUxhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGRvY3VtZW50IG5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpbnB1dC1kb2N1bWVudC1uYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybU1lc3NhZ2UgLz5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICB7LyogQ2F0ZWdvcnkgKi99XG4gICAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgICAgbmFtZT1cImNhdGVnb3J5XCJcbiAgICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICAgIDxGb3JtSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1MYWJlbD5DYXRlZ29yeSAqPC9Gb3JtTGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3Qgb25WYWx1ZUNoYW5nZT17ZmllbGQub25DaGFuZ2V9IHZhbHVlPXtmaWVsZC52YWx1ZX0+XG4gICAgICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFRyaWdnZXIgZGF0YS10ZXN0aWQ9XCJzZWxlY3QtZG9jdW1lbnQtY2F0ZWdvcnlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFZhbHVlIHBsYWNlaG9sZGVyPVwiU2VsZWN0IGEgY2F0ZWdvcnlcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RUcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICB7RE9DVU1FTlRfQ0FURUdPUklFUy5tYXAoKGNhdGVnb3J5KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIGtleT17Y2F0ZWdvcnkudmFsdWV9IHZhbHVlPXtjYXRlZ29yeS52YWx1ZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NhdGVnb3J5LmxhYmVsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybU1lc3NhZ2UgLz5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICB7LyogRGVzY3JpcHRpb24gKi99XG4gICAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgICAgbmFtZT1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICAgIDxGb3JtSXRlbT5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1MYWJlbD5EZXNjcmlwdGlvbjwvRm9ybUxhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgICAgPFRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGRvY3VtZW50IGRlc2NyaXB0aW9uIChvcHRpb25hbClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicmVzaXplLW5vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcm93cz17M31cbiAgICAgICAgICAgICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiaW5wdXQtZG9jdW1lbnQtZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgUHJvdmlkZSBhZGRpdGlvbmFsIGRldGFpbHMgYWJvdXQgdGhpcyBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1EZXNjcmlwdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1NZXNzYWdlIC8+XG4gICAgICAgICAgICAgICAgICA8L0Zvcm1JdGVtPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAgey8qIFZpc2liaWxpdHkgdG8gVGVuYW50cyAqL31cbiAgICAgICAgICAgICAgPEZvcm1GaWVsZFxuICAgICAgICAgICAgICAgIGNvbnRyb2w9e2Zvcm0uY29udHJvbH1cbiAgICAgICAgICAgICAgICBuYW1lPVwiaXNWaXNpYmxlVG9UZW5hbnRzXCJcbiAgICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICAgIDxGb3JtSXRlbSBjbGFzc05hbWU9XCJmbGV4IGZsZXgtcm93IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gcm91bmRlZC1sZyBib3JkZXIgcC0zIHNoYWRvdy1zbVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktMC41XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPEZvcm1MYWJlbCBjbGFzc05hbWU9XCJ0ZXh0LWJhc2VcIj5WaXNpYmxlIHRvIFRlbmFudHM8L0Zvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICA8Rm9ybURlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgQWxsb3cgdGVuYW50cyB0byB2aWV3IGFuZCBkb3dubG9hZCB0aGlzIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17ZmllbGQudmFsdWUgfHwgZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoZWNrZWRDaGFuZ2U9e2ZpZWxkLm9uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzd2l0Y2gtdmlzaWJsZS10by10ZW5hbnRzXCJcbiAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtSXRlbT5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICA8L0NhcmQ+XG5cbiAgICAgICAgICB7LyogRmlsZSBNYW5hZ2VtZW50IENhcmQgKi99XG4gICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9XCJ0ZXh0LWxnXCI+RmlsZSBNYW5hZ2VtZW50PC9DYXJkVGl0bGU+XG4gICAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICAgIHsvKiBDdXJyZW50IEZpbGUgSW5mbyAqL31cbiAgICAgICAgICAgICAge2RvY3VtZW50LmZpbGVQYXRoICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktNTAgcC0zIHJvdW5kZWQtbGdcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSBmb250LW1lZGl1bVwiPkN1cnJlbnQgRmlsZTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtZ3JheS02MDBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsoZG9jdW1lbnQgYXMgYW55KS5maWxlTmFtZSB8fCBkb2N1bWVudC5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVZpZXdEb2N1bWVudCgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tdmlldy1kb2N1bWVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPEV5ZSBjbGFzc05hbWU9XCJ3LTMgaC0zIG1yLTFcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgVmlld1xuICAgICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURvd25sb2FkRG9jdW1lbnQoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLWRvd25sb2FkLWRvY3VtZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RG93bmxvYWQgY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkXG4gICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAgey8qIFJlcGxhY2UgRmlsZSBPcHRpb24gKi99XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0yXCI+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgaWQ9XCJyZXBsYWNlLWZpbGVcIlxuICAgICAgICAgICAgICAgICAgY2hlY2tlZD17aXNSZXBsYWNlRmlsZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0SXNSZXBsYWNlRmlsZShlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kZWRcIlxuICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJjaGVja2JveC1yZXBsYWNlLWZpbGVcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPExhYmVsIGh0bWxGb3I9XCJyZXBsYWNlLWZpbGVcIj5SZXBsYWNlIGZpbGU8L0xhYmVsPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICB7LyogRmlsZSBVcGxvYWQgKG9ubHkgaWYgcmVwbGFjaW5nKSAqL31cbiAgICAgICAgICAgICAge2lzUmVwbGFjZUZpbGUgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8U2hhcmVkVXBsb2FkZXJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dD17dXBsb2FkQ29udGV4dH1cbiAgICAgICAgICAgICAgICAgICAgb25GaWxlU2VsZWN0PXtoYW5kbGVGaWxlVXBsb2FkfVxuICAgICAgICAgICAgICAgICAgICBtYXhGaWxlcz17MX1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJ1cGxvYWRlci1yZXBsYWNlLWZpbGVcIlxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgICAgPC9DYXJkPlxuXG4gICAgICAgICAgey8qIEFjdGlvbiBCdXR0b25zICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gcHQtNFwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgey8qIERlbGV0ZSBCdXR0b24gd2l0aCBDb25maXJtYXRpb24gKi99XG4gICAgICAgICAgICAgIDxBbGVydERpYWxvZz5cbiAgICAgICAgICAgICAgICA8QWxlcnREaWFsb2dUcmlnZ2VyIGFzQ2hpbGQ+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwiZGVzdHJ1Y3RpdmVcIlxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dXBkYXRlRG9jdW1lbnRNdXRhdGlvbi5pc1BlbmRpbmcgfHwgZGVsZXRlRG9jdW1lbnRNdXRhdGlvbi5pc1BlbmRpbmd9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLWRlbGV0ZS1kb2N1bWVudFwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxUcmFzaDIgY2xhc3NOYW1lPVwidy00IGgtNCBtci0yXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgRGVsZXRlIERvY3VtZW50XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0FsZXJ0RGlhbG9nVHJpZ2dlcj5cbiAgICAgICAgICAgICAgICA8QWxlcnREaWFsb2dDb250ZW50PlxuICAgICAgICAgICAgICAgICAgPEFsZXJ0RGlhbG9nSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICA8QWxlcnREaWFsb2dUaXRsZT5EZWxldGUgRG9jdW1lbnQ8L0FsZXJ0RGlhbG9nVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxBbGVydERpYWxvZ0Rlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgXCJ7ZG9jdW1lbnQubmFtZX1cIj8gVGhpcyBhY3Rpb24gY2Fubm90IGJlIHVuZG9uZSBhbmQgd2lsbCBwZXJtYW5lbnRseSByZW1vdmUgdGhlIGRvY3VtZW50IGFuZCBpdHMgZmlsZS5cbiAgICAgICAgICAgICAgICAgICAgPC9BbGVydERpYWxvZ0Rlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9BbGVydERpYWxvZ0hlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDxBbGVydERpYWxvZ0Zvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgPEFsZXJ0RGlhbG9nQ2FuY2VsIGRhdGEtdGVzdGlkPVwiYnV0dG9uLWNhbmNlbC1kZWxldGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgICAgICAgPC9BbGVydERpYWxvZ0NhbmNlbD5cbiAgICAgICAgICAgICAgICAgICAgPEFsZXJ0RGlhbG9nQWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRGVsZXRlfVxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkZWxldGVEb2N1bWVudE11dGF0aW9uLmlzUGVuZGluZ31cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJiZy1kZXN0cnVjdGl2ZSB0ZXh0LWRlc3RydWN0aXZlLWZvcmVncm91bmQgaG92ZXI6YmctZGVzdHJ1Y3RpdmUvOTBcIlxuICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLWNvbmZpcm0tZGVsZXRlXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHtkZWxldGVEb2N1bWVudE11dGF0aW9uLmlzUGVuZGluZyA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxVcGxvYWQgY2xhc3NOYW1lPVwidy00IGgtNCBtci0yIGFuaW1hdGUtc3BpblwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIERlbGV0aW5nLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFRyYXNoMiBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvQWxlcnREaWFsb2dBY3Rpb24+XG4gICAgICAgICAgICAgICAgICA8L0FsZXJ0RGlhbG9nRm9vdGVyPlxuICAgICAgICAgICAgICAgIDwvQWxlcnREaWFsb2dDb250ZW50PlxuICAgICAgICAgICAgICA8L0FsZXJ0RGlhbG9nPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtM1wiPlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uQ2FuY2VsfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXt1cGRhdGVEb2N1bWVudE11dGF0aW9uLmlzUGVuZGluZyB8fCBkZWxldGVEb2N1bWVudE11dGF0aW9uLmlzUGVuZGluZ31cbiAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImJ1dHRvbi1jYW5jZWxcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3VwZGF0ZURvY3VtZW50TXV0YXRpb24uaXNQZW5kaW5nIHx8IGRlbGV0ZURvY3VtZW50TXV0YXRpb24uaXNQZW5kaW5nfVxuICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLXNhdmUtZG9jdW1lbnRcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3VwZGF0ZURvY3VtZW50TXV0YXRpb24uaXNQZW5kaW5nID8gKFxuICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPFVwbG9hZCBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTIgYW5pbWF0ZS1zcGluXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgU2F2aW5nLi4uXG4gICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPFNhdmUgY2xhc3NOYW1lPVwidy00IGgtNCBtci0yXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgU2F2ZSBDaGFuZ2VzXG4gICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgICA8L0Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59Il0sInZlcnNpb24iOjN9