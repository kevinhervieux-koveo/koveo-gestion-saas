{"file":"/home/runner/workspace/tests/integration/bill-attachments-ui-display.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/bill-attachments-ui-display.test.tsx"],"sourcesContent":["/**\n * Bill Attachments UI Display Test\n * Tests that the Bill Details dialog properly displays attached documents\n * and that the AttachedFileSection component works correctly with bills.\n */\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { jest } from '@jest/globals';\n\n// Mock the API calls\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock window.open for file viewing\nconst mockWindowOpen = jest.fn();\nObject.defineProperty(window, 'open', {\n  writable: true,\n  value: mockWindowOpen,\n});\n\n// Mock URL.createObjectURL and revokeObjectURL for file downloads\nObject.defineProperty(window.URL, 'createObjectURL', {\n  writable: true,\n  value: jest.fn(() => 'mock-blob-url'),\n});\nObject.defineProperty(window.URL, 'revokeObjectURL', {\n  writable: true,\n  value: jest.fn(),\n});\n\n// Mock DOM element creation and manipulation\nObject.defineProperty(document, 'createElement', {\n  writable: true,\n  value: jest.fn((tag) => {\n    const element = {\n      href: '',\n      download: '',\n      click: jest.fn(),\n      remove: jest.fn(),\n    };\n    return element;\n  }),\n});\n\nObject.defineProperty(document.body, 'appendChild', {\n  writable: true,\n  value: jest.fn(),\n});\n\nObject.defineProperty(document.body, 'removeChild', {\n  writable: true,\n  value: jest.fn(),\n});\n\n// Mock the BillDetail component (simplified version for testing)\nconst MockBillDetail = ({ bill }: { bill: any }) => {\n  const { useState, useEffect } = require('react');\n  const [billDocuments, setBillDocuments] = useState([]);\n  const [freshBill, setFreshBill] = useState(bill);\n\n  useEffect(() => {\n    // Simulate API call to fetch bill documents\n    fetch(`/api/documents?attachedToType=bill&attachedToId=${bill.id}`)\n      .then(response => response.json())\n      .then(data => setBillDocuments(data.documents || []))\n      .catch(console.error);\n\n    // Simulate API call to fetch fresh bill data\n    fetch(`/api/bills/${bill.id}`)\n      .then(response => response.json())\n      .then(data => setFreshBill(data))\n      .catch(console.error);\n  }, [bill.id]);\n\n  const currentBill = freshBill || bill;\n\n  return (\n    <div data-testid=\"bill-detail\">\n      <h2>Bill Details</h2>\n      \n      {/* Bill Information */}\n      <div>\n        <div data-testid=\"bill-number\">{currentBill.billNumber}</div>\n        <div data-testid=\"bill-status\">{currentBill.status}</div>\n        <div data-testid=\"bill-category\">{currentBill.category}</div>\n        <div data-testid=\"bill-amount\">${currentBill.totalAmount}</div>\n      </div>\n\n      {/* Uploaded Documents Section - This is the key part being tested */}\n      {(currentBill.filePath || billDocuments.length > 0) && (\n        <div data-testid=\"uploaded-documents-section\">\n          <h3>Uploaded Documents</h3>\n          \n          {/* Direct bill upload */}\n          {currentBill.filePath && (\n            <div data-testid=\"direct-bill-upload\">\n              <span data-testid=\"file-name\">{currentBill.fileName}</span>\n              <button \n                data-testid=\"button-view-direct-bill\"\n                onClick={() => window.open(`/api/bills/${currentBill.id}/download-document`, '_blank')}\n              >\n                View\n              </button>\n              <button \n                data-testid=\"button-download-direct-bill\"\n                onClick={() => {\n                  const link = document.createElement('a');\n                  link.href = `/api/bills/${currentBill.id}/download-document`;\n                  link.download = currentBill.fileName || 'bill-document';\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                }}\n              >\n                Download\n              </button>\n            </div>\n          )}\n          \n          {/* Attached documents from documents table */}\n          {billDocuments.map((doc: any) => (\n            <div key={doc.id} data-testid={`attached-document-${doc.id}`}>\n              <span data-testid={`doc-name-${doc.id}`}>{doc.name}</span>\n              <span data-testid={`doc-type-${doc.id}`}>{doc.documentType || 'Document'}</span>\n              <button \n                data-testid={`button-view-document-${doc.id}`}\n                onClick={async () => {\n                  const response = await fetch(`/api/documents/${doc.id}/file`, {\n                    method: 'GET',\n                    credentials: 'include',\n                  });\n                  const blob = await response.blob();\n                  const url = window.URL.createObjectURL(blob);\n                  window.open(url, '_blank');\n                }}\n              >\n                View\n              </button>\n              <button \n                data-testid={`button-download-document-${doc.id}`}\n                onClick={async () => {\n                  const response = await fetch(`/api/documents/${doc.id}/file?download=true`, {\n                    method: 'GET',\n                    credentials: 'include',\n                  });\n                  const blob = await response.blob();\n                  const url = window.URL.createObjectURL(blob);\n                  const link = document.createElement('a');\n                  link.href = url;\n                  link.download = doc.fileName || doc.name || 'document';\n                  document.body.appendChild(link);\n                  link.click();\n                  document.body.removeChild(link);\n                  window.URL.revokeObjectURL(url);\n                }}\n              >\n                Download\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Show message when no attachments */}\n      {!currentBill.filePath && billDocuments.length === 0 && (\n        <div data-testid=\"no-attachments-message\">\n          No documents attached to this bill\n        </div>\n      )}\n    </div>\n  );\n};\n\ndescribe('Bill Attachments UI Display', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n    jest.clearAllMocks();\n  });\n\n  const renderWithQueryClient = (component: React.ReactElement) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        {component}\n      </QueryClientProvider>\n    );\n  };\n\n  test('should display bill with attached documents from documents table', async () => {\n    const testBill = {\n      id: 'bill-123',\n      billNumber: '961B-2024-11-INSURANCE-1',\n      status: 'paid',\n      category: 'insurance',\n      totalAmount: '2014.15',\n      title: 'Insurance (I) - Osinski - Smitham',\n      // No direct filePath - documents should come from documents table\n      filePath: null,\n      fileName: null,\n    };\n\n    const mockDocuments = [\n      {\n        id: 'doc-1',\n        name: 'Invoice - 961B-2024-11-INSURANCE-1',\n        documentType: 'maintenance',\n        fileName: 'invoice-961b-2024-11-insurance-1.txt',\n        filePath: 'bills/invoice-961b-2024-11-insurance-1-bill-123.txt',\n        attachedToType: 'bill',\n        attachedToId: 'bill-123',\n      },\n      {\n        id: 'doc-2',\n        name: 'Receipt - 961B-2024-11-INSURANCE-1',\n        documentType: 'maintenance',\n        fileName: 'receipt-961b-2024-11-insurance-1.txt',\n        filePath: 'bills/receipt-961b-2024-11-insurance-1-bill-123.txt',\n        attachedToType: 'bill',\n        attachedToId: 'bill-123',\n      }\n    ];\n\n    // Mock the API responses\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({ documents: mockDocuments }),\n      }) // Documents API call\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(testBill),\n      }); // Fresh bill API call\n\n    renderWithQueryClient(<MockBillDetail bill={testBill} />);\n\n    // Wait for API calls to complete\n    await waitFor(() => {\n      expect(screen.getByTestId('uploaded-documents-section')).toBeInTheDocument();\n    });\n\n    // Verify bill information is displayed\n    expect(screen.getByTestId('bill-number')).toHaveTextContent('961B-2024-11-INSURANCE-1');\n    expect(screen.getByTestId('bill-status')).toHaveTextContent('paid');\n    expect(screen.getByTestId('bill-category')).toHaveTextContent('insurance');\n    expect(screen.getByTestId('bill-amount')).toHaveTextContent('$2014.15');\n\n    // Verify attached documents are displayed\n    expect(screen.getByTestId('attached-document-doc-1')).toBeInTheDocument();\n    expect(screen.getByTestId('attached-document-doc-2')).toBeInTheDocument();\n\n    // Verify document names\n    expect(screen.getByTestId('doc-name-doc-1')).toHaveTextContent('Invoice - 961B-2024-11-INSURANCE-1');\n    expect(screen.getByTestId('doc-name-doc-2')).toHaveTextContent('Receipt - 961B-2024-11-INSURANCE-1');\n\n    // Verify document types\n    expect(screen.getByTestId('doc-type-doc-1')).toHaveTextContent('maintenance');\n    expect(screen.getByTestId('doc-type-doc-2')).toHaveTextContent('maintenance');\n\n    // Verify action buttons exist\n    expect(screen.getByTestId('button-view-document-doc-1')).toBeInTheDocument();\n    expect(screen.getByTestId('button-download-document-doc-1')).toBeInTheDocument();\n    expect(screen.getByTestId('button-view-document-doc-2')).toBeInTheDocument();\n    expect(screen.getByTestId('button-download-document-doc-2')).toBeInTheDocument();\n\n    // Verify API calls were made correctly\n    expect(mockFetch).toHaveBeenCalledWith('/api/documents?attachedToType=bill&attachedToId=bill-123');\n    expect(mockFetch).toHaveBeenCalledWith('/api/bills/bill-123');\n  });\n\n  test('should display bill with direct file path attachment', async () => {\n    const testBill = {\n      id: 'bill-456',\n      billNumber: 'TEST-2024-UTILITIES-1',\n      status: 'pending',\n      category: 'utilities',\n      totalAmount: '150.00',\n      title: 'Utilities Bill',\n      // Direct attachment\n      filePath: 'bills/utilities-bill-456.pdf',\n      fileName: 'utilities-bill-456.pdf',\n    };\n\n    // Mock the API responses (no attached documents, empty array)\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({ documents: [] }),\n      }) // Documents API call\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(testBill),\n      }); // Fresh bill API call\n\n    renderWithQueryClient(<MockBillDetail bill={testBill} />);\n\n    // Wait for API calls to complete\n    await waitFor(() => {\n      expect(screen.getByTestId('uploaded-documents-section')).toBeInTheDocument();\n    });\n\n    // Verify bill information is displayed\n    expect(screen.getByTestId('bill-number')).toHaveTextContent('TEST-2024-UTILITIES-1');\n    expect(screen.getByTestId('bill-category')).toHaveTextContent('utilities');\n\n    // Verify direct bill upload section is displayed\n    expect(screen.getByTestId('direct-bill-upload')).toBeInTheDocument();\n    expect(screen.getByTestId('file-name')).toHaveTextContent('utilities-bill-456.pdf');\n\n    // Verify direct bill action buttons\n    expect(screen.getByTestId('button-view-direct-bill')).toBeInTheDocument();\n    expect(screen.getByTestId('button-download-direct-bill')).toBeInTheDocument();\n\n    // Verify no attached documents section since documents array is empty\n    expect(screen.queryByTestId('attached-document-doc-1')).not.toBeInTheDocument();\n  });\n\n  test('should show no attachments message when bill has no files', async () => {\n    const testBill = {\n      id: 'bill-789',\n      billNumber: 'TEST-2024-NO-ATTACHMENTS',\n      status: 'pending',\n      category: 'other',\n      totalAmount: '100.00',\n      title: 'Bill with no attachments',\n      // No attachments\n      filePath: null,\n      fileName: null,\n    };\n\n    // Mock the API responses (no attached documents)\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({ documents: [] }),\n      }) // Documents API call\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(testBill),\n      }); // Fresh bill API call\n\n    renderWithQueryClient(<MockBillDetail bill={testBill} />);\n\n    // Wait for API calls to complete\n    await waitFor(() => {\n      expect(screen.getByTestId('no-attachments-message')).toBeInTheDocument();\n    });\n\n    // Verify no documents section is NOT displayed\n    expect(screen.queryByTestId('uploaded-documents-section')).not.toBeInTheDocument();\n\n    // Verify the no attachments message\n    expect(screen.getByTestId('no-attachments-message')).toHaveTextContent('No documents attached to this bill');\n  });\n\n  test('should handle document view functionality', async () => {\n    const testBill = {\n      id: 'bill-view-test',\n      billNumber: 'VIEW-TEST-001',\n      status: 'paid',\n      category: 'maintenance',\n      totalAmount: '500.00',\n      filePath: null,\n      fileName: null,\n    };\n\n    const mockDocument = {\n      id: 'doc-view-test',\n      name: 'Test Document for Viewing',\n      documentType: 'maintenance',\n      fileName: 'test-document.pdf',\n      filePath: 'bills/test-document.pdf',\n      attachedToType: 'bill',\n      attachedToId: 'bill-view-test',\n    };\n\n    // Mock the API responses\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({ documents: [mockDocument] }),\n      }) // Documents API call\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(testBill),\n      }) // Fresh bill API call\n      .mockResolvedValueOnce({\n        ok: true,\n        blob: () => Promise.resolve(new Blob(['test content'], { type: 'application/pdf' })),\n      }); // File view API call\n\n    renderWithQueryClient(<MockBillDetail bill={testBill} />);\n\n    // Wait for documents to load\n    await waitFor(() => {\n      expect(screen.getByTestId('attached-document-doc-view-test')).toBeInTheDocument();\n    });\n\n    // Click the view button\n    const viewButton = screen.getByTestId('button-view-document-doc-view-test');\n    fireEvent.click(viewButton);\n\n    // Wait for file view API call\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith('/api/documents/doc-view-test/file', {\n        method: 'GET',\n        credentials: 'include',\n      });\n    });\n\n    // Verify window.open was called\n    expect(mockWindowOpen).toHaveBeenCalledWith('mock-blob-url', '_blank');\n  });\n\n  test('should handle document download functionality', async () => {\n    const testBill = {\n      id: 'bill-download-test',\n      billNumber: 'DOWNLOAD-TEST-001',\n      status: 'paid',\n      category: 'insurance',\n      totalAmount: '1000.00',\n      filePath: null,\n      fileName: null,\n    };\n\n    const mockDocument = {\n      id: 'doc-download-test',\n      name: 'Test Document for Download',\n      documentType: 'insurance',\n      fileName: 'insurance-document.pdf',\n      filePath: 'bills/insurance-document.pdf',\n      attachedToType: 'bill',\n      attachedToId: 'bill-download-test',\n    };\n\n    // Mock the API responses\n    mockFetch\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({ documents: [mockDocument] }),\n      }) // Documents API call\n      .mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve(testBill),\n      }) // Fresh bill API call\n      .mockResolvedValueOnce({\n        ok: true,\n        blob: () => Promise.resolve(new Blob(['test download content'], { type: 'application/pdf' })),\n      }); // File download API call\n\n    renderWithQueryClient(<MockBillDetail bill={testBill} />);\n\n    // Wait for documents to load\n    await waitFor(() => {\n      expect(screen.getByTestId('attached-document-doc-download-test')).toBeInTheDocument();\n    });\n\n    // Click the download button\n    const downloadButton = screen.getByTestId('button-download-document-doc-download-test');\n    fireEvent.click(downloadButton);\n\n    // Wait for file download API call\n    await waitFor(() => {\n      expect(mockFetch).toHaveBeenCalledWith('/api/documents/doc-download-test/file?download=true', {\n        method: 'GET',\n        credentials: 'include',\n      });\n    });\n\n    // Verify DOM manipulation for download\n    expect(document.createElement).toHaveBeenCalledWith('a');\n    expect(document.body.appendChild).toHaveBeenCalled();\n    expect(document.body.removeChild).toHaveBeenCalled();\n  });\n\n  test('should validate API query parameters for bill attachments', () => {\n    const billId = 'test-bill-12345';\n    const expectedQuery = `/api/documents?attachedToType=bill&attachedToId=${billId}`;\n    \n    // This validates the query format used in the BillDetail component\n    expect(expectedQuery).toBe('/api/documents?attachedToType=bill&attachedToId=test-bill-12345');\n  });\n});"],"version":3}