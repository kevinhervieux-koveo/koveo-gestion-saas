{"file":"/home/runner/workspace/server/services/delayed-update-service.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/services/delayed-update-service.ts"],"sourcesContent":["import { moneyFlowAutomationService } from './money-flow-automation';\nimport { monthlyBudgetService } from './monthly-budget-service';\n\n/**\n * Service to handle delayed updates to money_flow and budget tables.\n * Waits 15 minutes after a dependency update before triggering regeneration.\n */\nclass DelayedUpdateService {\n  private static instance: DelayedUpdateService;\n  private readonly DELAY_MINUTES = 15;\n  private readonly DELAY_MS = this.DELAY_MINUTES * 60 * 1000; // 15 minutes in milliseconds\n\n  // Track pending updates to avoid duplicates\n  private pendingBillUpdates = new Set<string>();\n  private pendingResidenceUpdates = new Set<string>();\n  private pendingBuildingBudgetUpdates = new Set<string>();\n\n  /**\n   *\n   */\n  private constructor() {\n  }\n\n  /**\n   *\n   */\n  static getInstance(): DelayedUpdateService {\n    if (!DelayedUpdateService.instance) {\n      DelayedUpdateService.instance = new DelayedUpdateService();\n    }\n    return DelayedUpdateService.instance;\n  }\n\n  /**\n   * Schedule money flow update for a bill after 15-minute delay.\n   * @param billId\n   */\n  scheduleBillUpdate(billId: string): void {\n    // Avoid duplicate updates for the same bill\n    if (this.pendingBillUpdates.has(billId)) {\n      return;\n    }\n\n    this.pendingBillUpdates.add(billId);\n    console.log(\n      `‚è∞ Scheduling money flow update for bill ${billId} in ${this.DELAY_MINUTES} minutes`\n    );\n\n    setTimeout(async () => {\n      try {\n\n        // Generate money flow entries for the bill\n        const moneyFlowEntries = await moneyFlowAutomationService.generateForBill(billId);\n\n        // Get the building ID from the bill to update budgets\n        const buildingId = await this.getBuildingIdFromBill(billId);\n        if (buildingId) {\n          await this.scheduleBudgetUpdate(buildingId);\n        }\n      } finally {\n        this.pendingBillUpdates.delete(billId);\n      }\n    }, this.DELAY_MS);\n  }\n\n  /**\n   * Schedule money flow update for a residence after 15-minute delay.\n   * @param residenceId\n   */\n  scheduleResidenceUpdate(residenceId: string): void {\n    // Avoid duplicate updates for the same residence\n    if (this.pendingResidenceUpdates.has(residenceId)) {\n      return;\n    }\n\n    this.pendingResidenceUpdates.add(residenceId);\n    console.log(\n      `‚è∞ Scheduling money flow update for residence ${residenceId} in ${this.DELAY_MINUTES} minutes`\n    );\n\n    setTimeout(async () => {\n      try {\n\n        // Generate money flow entries for the residence\n        const moneyFlowEntries = await moneyFlowAutomationService.generateForResidence(residenceId);\n        console.log(\n          `üí∞ Generated ${moneyFlowEntries} money flow entries for residence ${residenceId}`\n        );\n\n        // Get the building ID from the residence to update budgets\n        const buildingId = await this.getBuildingIdFromResidence(residenceId);\n        if (buildingId) {\n          await this.scheduleBudgetUpdate(buildingId);\n        }\n      } finally {\n        this.pendingResidenceUpdates.delete(residenceId);\n      }\n    }, this.DELAY_MS);\n  }\n\n  /**\n   * Schedule budget update for a building after money flow changes.\n   * This is called internally after money flow updates complete.\n   * @param buildingId\n   */\n  private async scheduleBudgetUpdate(buildingId: string): Promise<void> {\n    // Avoid duplicate updates for the same building\n    if (this.pendingBuildingBudgetUpdates.has(buildingId)) {\n      console.log(\n        `üè¢ Building ${buildingId} already has a pending budget update, skipping duplicate`\n      );\n      return;\n    }\n\n    this.pendingBuildingBudgetUpdates.add(buildingId);\n    console.log(\n      `‚è∞ Scheduling budget update for building ${buildingId} in ${this.DELAY_MINUTES} minutes`\n    );\n\n    setTimeout(async () => {\n      try {\n\n        // Repopulate budget entries for the building\n        const budgetEntries = await monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);\n      } finally {\n        this.pendingBuildingBudgetUpdates.delete(buildingId);\n      }\n    }, this.DELAY_MS);\n  }\n\n  /**\n   * Get building ID from bill ID.\n   * @param billId\n   */\n  private async getBuildingIdFromBill(billId: string): Promise<string | null> {\n    try {\n      const { db } = await import('../db');\n      const { bills } = await import('@shared/schema');\n      const { eq } = await import('drizzle-orm');\n\n      const result = await db\n        .select({ buildingId: bills.buildingId })\n        .from(bills)\n        .where(eq(bills.id, billId))\n        .limit(1);\n\n      return result.length > 0 ? result[0].buildingId : null;\n    } catch (error: any) {\n      console.error('‚ùå Error getting building ID:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get building ID from residence ID.\n   * @param residenceId\n   */\n  private async getBuildingIdFromResidence(residenceId: string): Promise<string | null> {\n    try {\n      const { db } = await import('../db');\n      const { residences } = await import('@shared/schema');\n      const { eq } = await import('drizzle-orm');\n\n      const result = await db\n        .select({ buildingId: residences.buildingId })\n        .from(residences)\n        .where(eq(residences.id, residenceId))\n        .limit(1);\n\n      return result.length > 0 ? result[0].buildingId : null;\n    } catch (error: any) {\n      console.error('‚ùå Error getting building ID:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Force immediate update (for testing or urgent updates).\n   * @param billId\n   */\n  async forceImmediateBillUpdate(billId: string): Promise<void> {\n\n    // Generate money flow entries for the bill\n    const moneyFlowEntries = await moneyFlowAutomationService.generateForBill(billId);\n\n    // Update budget immediately\n    const buildingId = await this.getBuildingIdFromBill(billId);\n    if (buildingId) {\n      const budgetEntries = await monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);\n    }\n  }\n\n  /**\n   * Force immediate update (for testing or urgent updates).\n   * @param residenceId\n   */\n  async forceImmediateResidenceUpdate(residenceId: string): Promise<void> {\n\n    // Generate money flow entries for the residence\n    const moneyFlowEntries = await moneyFlowAutomationService.generateForResidence(residenceId);\n    console.log(\n      `üí∞ Generated ${moneyFlowEntries} money flow entries for residence ${residenceId}`\n    );\n\n    // Update budget immediately\n    const buildingId = await this.getBuildingIdFromResidence(residenceId);\n    if (buildingId) {\n      const budgetEntries = await monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);\n    }\n  }\n\n  /**\n   * Get current status of pending updates.\n   */\n  getStatus(): {\n    delayMinutes: number;\n    pendingBillUpdates: number;\n    pendingResidenceUpdates: number;\n    pendingBudgetUpdates: number;\n  } {\n    return {\n      delayMinutes: this.DELAY_MINUTES,\n      pendingBillUpdates: this.pendingBillUpdates.size,\n      pendingResidenceUpdates: this.pendingResidenceUpdates.size,\n      pendingBudgetUpdates: this.pendingBuildingBudgetUpdates.size,\n    };\n  }\n}\n\n// Export singleton instance\nexport const delayedUpdateService = DelayedUpdateService.getInstance();\n"],"version":3}