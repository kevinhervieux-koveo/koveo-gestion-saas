175bbcc0106d4debbc30e5897e630276
"use strict";
/**
 * @file Manager and Admin Comment Access Tests
 * @description Tests verifying that managers and admins can add comments to demands they have access to
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
// Mock Express app setup
function createTestApp() {
    const express = require('express');
    const app = express();
    app.use(express.json());
    // Mock session middleware for testing - this will be overridden in tests
    app.use((req, res, next) => {
        // Default user - will be overridden in individual tests
        req.user = { id: 'user-123', role: 'resident' };
        next();
    });
    const { registerDemandRoutes } = require('../../server/api/demands');
    registerDemandRoutes(app);
    return app;
}
(0, globals_1.describe)('Manager and Admin Comment Access Tests', () => {
    let app;
    let testOrganization;
    let testBuilding;
    let testResidence;
    let testDemand;
    // Test users
    let adminUser;
    let managerUser;
    let residentUser;
    let otherManagerUser;
    let otherOrganization;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Create test organization
        const orgResult = await db_1.db.insert(schema_1.organizations).values({
            name: 'Test Organization',
            type: 'residential',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            isActive: true,
        }).returning();
        testOrganization = orgResult[0];
        // Create another organization for testing cross-organization access
        const otherOrgResult = await db_1.db.insert(schema_1.organizations).values({
            name: 'Other Organization',
            type: 'residential',
            address: '456 Other St',
            city: 'Other City',
            province: 'QC',
            postalCode: 'H2H 2H2',
            isActive: true,
        }).returning();
        otherOrganization = otherOrgResult[0];
        // Create test building
        const buildingResult = await db_1.db.insert(schema_1.buildings).values({
            name: 'Test Building',
            address: '456 Test Ave',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H2H 2H2',
            buildingType: 'condo',
            organizationId: testOrganization.id,
            totalUnits: 10,
            isActive: true,
        }).returning();
        testBuilding = buildingResult[0];
        // Create test residence
        const residenceResult = await db_1.db.insert(schema_1.residences).values({
            buildingId: testBuilding.id,
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1',
            balcony: false,
            isActive: true,
        }).returning();
        testResidence = residenceResult[0];
        // Create test users
        const adminResult = await db_1.db.insert(schema_1.users).values({
            username: 'admin',
            firstName: 'Admin',
            lastName: 'User',
            email: 'admin@example.com',
            password: 'hashed_password',
            role: 'admin',
            isActive: true,
        }).returning();
        adminUser = adminResult[0];
        const managerResult = await db_1.db.insert(schema_1.users).values({
            username: 'manager',
            firstName: 'Manager',
            lastName: 'User',
            email: 'manager@example.com',
            password: 'hashed_password',
            role: 'manager',
            isActive: true,
        }).returning();
        managerUser = managerResult[0];
        const residentResult = await db_1.db.insert(schema_1.users).values({
            username: 'resident',
            firstName: 'Resident',
            lastName: 'User',
            email: 'resident@example.com',
            password: 'hashed_password',
            role: 'resident',
            isActive: true,
        }).returning();
        residentUser = residentResult[0];
        const otherManagerResult = await db_1.db.insert(schema_1.users).values({
            username: 'othermanager',
            firstName: 'Other Manager',
            lastName: 'User',
            email: 'othermanager@example.com',
            password: 'hashed_password',
            role: 'manager',
            isActive: true,
        }).returning();
        otherManagerUser = otherManagerResult[0];
        // Associate manager with organization
        await db_1.db.insert(schema_1.userOrganizations).values({
            userId: managerUser.id,
            organizationId: testOrganization.id,
            relationshipType: 'employee',
            isActive: true,
        });
        // Associate other manager with different organization
        await db_1.db.insert(schema_1.userOrganizations).values({
            userId: otherManagerUser.id,
            organizationId: otherOrganization.id,
            relationshipType: 'employee',
            isActive: true,
        });
        // Associate resident with residence
        await db_1.db.insert(schema_1.userResidences).values({
            userId: residentUser.id,
            residenceId: testResidence.id,
            relationshipType: 'resident',
            startDate: new Date().toISOString().split('T')[0],
            isActive: true,
        });
        // Create test demand from resident
        const demandResult = await db_1.db.insert(schema_1.demands).values({
            submitterId: residentUser.id,
            type: 'maintenance',
            description: 'Test demand for comment access testing',
            buildingId: testBuilding.id,
            residenceId: testResidence.id,
            status: 'submitted',
        }).returning();
        testDemand = demandResult[0];
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data in proper order
        try {
            await db_1.db.delete(schema_1.demandComments).where((0, drizzle_orm_1.eq)(schema_1.demandComments.demandId, testDemand.id));
            await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, testDemand.id));
            await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, residentUser.id));
            await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, managerUser.id));
            await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, otherManagerUser.id));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, adminUser.id));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, managerUser.id));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, residentUser.id));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, otherManagerUser.id));
            await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidence.id));
            await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, testBuilding.id));
            await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testOrganization.id));
            await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, otherOrganization.id));
        }
        catch (error) {
            console.error('Cleanup error:', error);
        }
    });
    (0, globals_1.describe)('Admin Comment Access', () => {
        (0, globals_1.it)('should allow admin to add comments to any demand', async () => {
            // Override app middleware to use admin user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = adminUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Admin comment on resident demand',
                commentType: 'status_update',
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                demandId: testDemand.id,
                commenterId: adminUser.id,
                commentText: 'Admin comment on resident demand',
                commentType: 'status_update',
            });
            (0, globals_1.expect)(response.body.id).toBeDefined();
            (0, globals_1.expect)(response.body.createdAt).toBeDefined();
        });
        (0, globals_1.it)('should allow admin to add internal comments', async () => {
            // Override app middleware to use admin user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = adminUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Internal admin comment',
                isInternal: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body.isInternal).toBe(true);
            (0, globals_1.expect)(response.body.commentText).toBe('Internal admin comment');
        });
        (0, globals_1.it)('should allow admin to retrieve comments on any demand', async () => {
            // First create a comment
            await db_1.db.insert(schema_1.demandComments).values({
                demandId: testDemand.id,
                commenterId: adminUser.id,
                commentText: 'Admin created comment',
                isInternal: false,
            });
            // Override app middleware to use admin user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = adminUser;
                        next();
                    };
                }
            });
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .expect(200);
            (0, globals_1.expect)(response.body).toBeInstanceOf(Array);
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
            const comment = response.body.find((c) => c.commentText === 'Admin created comment');
            (0, globals_1.expect)(comment).toBeDefined();
            (0, globals_1.expect)(comment.commenterId).toBe(adminUser.id);
        });
    });
    (0, globals_1.describe)('Manager Comment Access', () => {
        (0, globals_1.it)('should allow manager to add comments to demands from their organization', async () => {
            // Override app middleware to use manager user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = managerUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Manager comment on organization demand',
                commentType: 'update',
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                demandId: testDemand.id,
                commenterId: managerUser.id,
                commentText: 'Manager comment on organization demand',
                commentType: 'update',
            });
            (0, globals_1.expect)(response.body.id).toBeDefined();
            (0, globals_1.expect)(response.body.createdAt).toBeDefined();
        });
        (0, globals_1.it)('should allow manager to add internal comments to their organization demands', async () => {
            // Override app middleware to use manager user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = managerUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Internal manager comment',
                isInternal: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body.isInternal).toBe(true);
            (0, globals_1.expect)(response.body.commentText).toBe('Internal manager comment');
            (0, globals_1.expect)(response.body.commenterId).toBe(managerUser.id);
        });
        (0, globals_1.it)('should deny manager access to demands from other organizations', async () => {
            // Override app middleware to use other manager user (from different organization)
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = otherManagerUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Unauthorized manager comment',
            };
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send(commentData)
                .expect(403);
        });
        (0, globals_1.it)('should allow manager to retrieve comments from their organization demands', async () => {
            // First create a comment
            await db_1.db.insert(schema_1.demandComments).values({
                demandId: testDemand.id,
                commenterId: managerUser.id,
                commentText: 'Manager created comment',
                isInternal: false,
            });
            // Override app middleware to use manager user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = managerUser;
                        next();
                    };
                }
            });
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .expect(200);
            (0, globals_1.expect)(response.body).toBeInstanceOf(Array);
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
            const comment = response.body.find((c) => c.commentText === 'Manager created comment');
            (0, globals_1.expect)(comment).toBeDefined();
            (0, globals_1.expect)(comment.commenterId).toBe(managerUser.id);
        });
    });
    (0, globals_1.describe)('Resident Comment Access', () => {
        (0, globals_1.it)('should allow resident to add comments to their own demands', async () => {
            // Override app middleware to use resident user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = residentUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Resident comment on own demand',
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                demandId: testDemand.id,
                commenterId: residentUser.id,
                commentText: 'Resident comment on own demand',
            });
        });
        (0, globals_1.it)('should deny resident access to add comments on other users demands', async () => {
            // Create a demand from a different user
            const otherUserResult = await db_1.db.insert(schema_1.users).values({
                username: 'otherresident',
                firstName: 'Other',
                lastName: 'Resident',
                email: 'other@example.com',
                password: 'hashed_password',
                role: 'resident',
                isActive: true,
            }).returning();
            const otherUser = otherUserResult[0];
            const otherDemandResult = await db_1.db.insert(schema_1.demands).values({
                submitterId: otherUser.id,
                type: 'complaint',
                description: 'Other user demand',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                status: 'submitted',
            }).returning();
            const otherDemand = otherDemandResult[0];
            // Override app middleware to use resident user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = residentUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Unauthorized resident comment',
            };
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${otherDemand.id}/comments`)
                .send(commentData)
                .expect(403);
            // Cleanup
            await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, otherDemand.id));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, otherUser.id));
        });
    });
    (0, globals_1.describe)('Comment Validation for Managers and Admins', () => {
        (0, globals_1.it)('should validate comment text length for managers', async () => {
            // Override app middleware to use manager user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = managerUser;
                        next();
                    };
                }
            });
            // Test empty comment
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send({ commentText: '' })
                .expect(400);
            // Test too long comment
            const tooLongComment = 'A'.repeat(1001);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send({ commentText: tooLongComment })
                .expect(400);
            // Test valid length comment
            const validComment = 'A'.repeat(1000);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send({ commentText: validComment })
                .expect(201);
        });
        (0, globals_1.it)('should validate comment text length for admins', async () => {
            // Override app middleware to use admin user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = adminUser;
                        next();
                    };
                }
            });
            // Test exact maximum length
            const maxLengthComment = 'A'.repeat(1000);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send({ commentText: maxLengthComment })
                .expect(201);
            // Test one character over maximum
            const overLimitComment = 'A'.repeat(1001);
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send({ commentText: overLimitComment })
                .expect(400);
        });
        (0, globals_1.it)('should handle French characters for manager comments', async () => {
            // Override app middleware to use manager user
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = managerUser;
                        next();
                    };
                }
            });
            const commentData = {
                commentText: 'Commentaire du gestionnaire avec caractères spéciaux: éàùç! 🏠',
            };
            const response = await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send(commentData)
                .expect(201);
            (0, globals_1.expect)(response.body.commentText).toBe(commentData.commentText);
            (0, globals_1.expect)(response.body.commenterId).toBe(managerUser.id);
        });
    });
    (0, globals_1.describe)('Cross-Role Comment Interaction', () => {
        (0, globals_1.it)('should allow admin and manager to comment on the same demand', async () => {
            // First, admin adds a comment
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = adminUser;
                        next();
                    };
                }
            });
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send({ commentText: 'Admin comment first' })
                .expect(201);
            // Then, manager adds a comment
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = managerUser;
                        next();
                    };
                }
            });
            await (0, supertest_1.default)(app)
                .post(`/api/demands/${testDemand.id}/comments`)
                .send({ commentText: 'Manager comment second' })
                .expect(201);
            // Verify both comments exist
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBe(2);
            const adminComment = response.body.find((c) => c.commentText === 'Admin comment first');
            const managerComment = response.body.find((c) => c.commentText === 'Manager comment second');
            (0, globals_1.expect)(adminComment).toBeDefined();
            (0, globals_1.expect)(managerComment).toBeDefined();
            (0, globals_1.expect)(adminComment.commenterId).toBe(adminUser.id);
            (0, globals_1.expect)(managerComment.commenterId).toBe(managerUser.id);
        });
        (0, globals_1.it)('should maintain comment thread integrity with multiple authorized users', async () => {
            const comments = [
                { user: residentUser, text: 'Initial resident comment' },
                { user: managerUser, text: 'Manager response' },
                { user: adminUser, text: 'Admin final decision' },
            ];
            for (const comment of comments) {
                app._router.stack.forEach((layer) => {
                    if (layer.name === 'anonymous') {
                        layer.handle = (req, res, next) => {
                            req.user = comment.user;
                            next();
                        };
                    }
                });
                await (0, supertest_1.default)(app)
                    .post(`/api/demands/${testDemand.id}/comments`)
                    .send({ commentText: comment.text })
                    .expect(201);
            }
            // Get comments as admin to see all
            app._router.stack.forEach((layer) => {
                if (layer.name === 'anonymous') {
                    layer.handle = (req, res, next) => {
                        req.user = adminUser;
                        next();
                    };
                }
            });
            const response = await (0, supertest_1.default)(app)
                .get(`/api/demands/${testDemand.id}/comments`)
                .expect(200);
            (0, globals_1.expect)(response.body.length).toBe(3);
            // Verify all comments are linked to the correct demand
            response.body.forEach((comment) => {
                (0, globals_1.expect)(comment.demandId).toBe(testDemand.id);
            });
            // Verify chronological order
            (0, globals_1.expect)(response.body[0].commentText).toBe('Initial resident comment');
            (0, globals_1.expect)(response.body[1].commentText).toBe('Manager response');
            (0, globals_1.expect)(response.body[2].commentText).toBe('Admin final decision');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,