{"file":"/home/runner/workspace/client/src/components/forms/StandardFormField.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/forms/StandardFormField.tsx"],"sourcesContent":["import React from 'react';\nimport { Control, FieldPath, FieldValues } from 'react-hook-form';\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage, FormDescription } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { cn } from '@/lib/utils';\nimport { FormQuality } from '@/utils/form-validation-helpers';\n\n/**\n * Standardized form field types for consistent form building\n */\nexport type StandardFieldType = \n  | 'text' \n  | 'email' \n  | 'password' \n  | 'textarea' \n  | 'select' \n  | 'checkbox' \n  | 'number'\n  | 'tel'\n  | 'url'\n  | 'date';\n\n/**\n * Option interface for select fields\n */\nexport interface FieldOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\n/**\n * Props for the standardized form field component\n */\ninterface StandardFormFieldProps<T extends FieldValues> {\n  control: Control<T>;\n  name: FieldPath<T>;\n  label: string;\n  type?: StandardFieldType;\n  placeholder?: string;\n  description?: string;\n  required?: boolean;\n  disabled?: boolean;\n  className?: string;\n  options?: FieldOption[]; // For select fields\n  rows?: number; // For textarea fields\n  formName?: string; // For auto-generating test IDs\n  autoComplete?: string;\n  min?: string | number;\n  max?: string | number;\n  step?: string | number;\n  maxLength?: number; // For text inputs and textareas\n  'data-testid'?: string; // Allow explicit test ID override\n}\n\n/**\n * Standardized form field component that follows all Quebec compliance \n * and accessibility standards. Automatically generates test IDs and \n * applies consistent styling patterns.\n * \n * @param props - Configuration for the form field\n */\nexport function StandardFormField<T extends FieldValues>({\n  control,\n  name,\n  label,\n  type = 'text',\n  placeholder,\n  description,\n  required = false,\n  disabled = false,\n  className = '',\n  options = [],\n  rows = 3,\n  formName = 'form',\n  autoComplete,\n  min,\n  max,\n  step,\n  maxLength,\n  'data-testid': explicitTestId,\n}: StandardFormFieldProps<T>) {\n  // Auto-generate test ID following standards or use explicit override\n  const testId = explicitTestId || FormQuality.generateTestId(formName, name as string, \n    ['select'].includes(type) ? 'select' : 'input');\n\n  // Render the appropriate input component based on type\n  const renderInput = (field: any) => {\n    const baseProps = {\n      ...field,\n      placeholder,\n      disabled,\n      autoComplete,\n      'data-testid': testId,\n      className: cn(\n        // Standard styling for all inputs\n        'transition-colors focus:ring-2 focus:ring-blue-500',\n        // Error state styling  \n        field.error && 'border-red-500 focus:border-red-500',\n        className\n      ),\n    };\n\n    switch (type) {\n      case 'textarea':\n        return (\n          <Textarea\n            {...baseProps}\n            rows={rows}\n            maxLength={maxLength}\n            className={cn(\n              'min-h-[80px] resize-y',\n              baseProps.className\n            )}\n          />\n        );\n\n      case 'select':\n        return (\n          <Select\n            onValueChange={field.onChange}\n            defaultValue={field.value}\n            disabled={disabled}\n          >\n            <SelectTrigger data-testid={testId} className={baseProps.className}>\n              <SelectValue placeholder={placeholder || `Select ${label.toLowerCase()}`} />\n            </SelectTrigger>\n            <SelectContent>\n              {options.map((option) => (\n                <SelectItem\n                  key={option.value}\n                  value={option.value}\n                  disabled={option.disabled}\n                  data-testid={`${testId}-option-${option.value}`}\n                >\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n\n      case 'checkbox':\n        return (\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              checked={field.value}\n              onCheckedChange={field.onChange}\n              disabled={disabled}\n              data-testid={testId}\n              className={baseProps.className}\n            />\n            <span className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n              {label}\n            </span>\n          </div>\n        );\n\n      case 'number':\n        return (\n          <Input\n            {...baseProps}\n            type=\"number\"\n            min={min}\n            max={max}\n            step={step}\n          />\n        );\n\n      default:\n        return (\n          <Input\n            {...baseProps}\n            type={type}\n            min={min}\n            max={max}\n            step={step}\n            maxLength={maxLength}\n          />\n        );\n    }\n  };\n\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field, fieldState }) => (\n        <FormItem className={cn('space-y-2', className)}>\n          {type !== 'checkbox' && (\n            <FormLabel className={cn(\n              'text-sm font-medium leading-none',\n              required && 'after:content-[\"*\"] after:ml-0.5 after:text-red-500',\n              fieldState.error && 'text-red-600'\n            )}>\n              {label}\n            </FormLabel>\n          )}\n          \n          <FormControl>\n            {renderInput({ ...field, error: fieldState.error })}\n          </FormControl>\n          \n          {description && (\n            <FormDescription className=\"text-sm text-muted-foreground\">\n              {description}\n            </FormDescription>\n          )}\n          \n          <FormMessage className=\"text-sm text-red-600\" />\n        </FormItem>\n      )}\n    />\n  );\n}\n\n/**\n * Standard form submit button with consistent styling and test ID\n */\ninterface StandardSubmitButtonProps {\n  isLoading?: boolean;\n  loadingText?: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n  formName?: string;\n  className?: string;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n}\n\nexport function StandardSubmitButton({\n  isLoading = false,\n  loadingText = 'Submitting...',\n  children,\n  disabled = false,\n  formName = 'form',\n  className = '',\n  variant = 'default',\n}: StandardSubmitButtonProps) {\n  const testId = FormQuality.generateTestId(formName, 'submit', 'button');\n\n  return (\n    <button\n      type=\"submit\"\n      disabled={disabled || isLoading}\n      data-testid={testId}\n      className={cn(\n        'inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md',\n        'transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2',\n        variant === 'default' && 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n        variant === 'destructive' && 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n        variant === 'outline' && 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500',\n        (disabled || isLoading) && 'opacity-50 cursor-not-allowed',\n        className\n      )}\n    >\n      {isLoading ? (\n        <>\n          <svg className=\"w-4 h-4 mr-2 animate-spin\" viewBox=\"0 0 24 24\">\n            <circle \n              className=\"opacity-25\" \n              cx=\"12\" \n              cy=\"12\" \n              r=\"10\" \n              stroke=\"currentColor\" \n              strokeWidth=\"4\"\n              fill=\"none\"\n            />\n            <path \n              className=\"opacity-75\" \n              fill=\"currentColor\" \n              d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n            />\n          </svg>\n          {loadingText}\n        </>\n      ) : (\n        children\n      )}\n    </button>\n  );\n}\n\n/**\n * Form section wrapper for organizing complex forms\n */\ninterface FormSectionProps {\n  title?: string;\n  description?: string;\n  children: React.ReactNode;\n  className?: string;\n  collapsible?: boolean;\n  defaultOpen?: boolean;\n}\n\nexport function FormSection({\n  title,\n  description,\n  children,\n  className = '',\n  collapsible = false,\n  defaultOpen = true,\n}: FormSectionProps) {\n  const [isOpen, setIsOpen] = React.useState(defaultOpen);\n\n  const toggleSection = () => {\n    if (collapsible) {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {title && (\n        <div className=\"border-b border-gray-200 pb-2\">\n          <div \n            className={cn(\n              'flex items-center justify-between',\n              collapsible && 'cursor-pointer hover:text-blue-600'\n            )}\n            onClick={toggleSection}\n          >\n            <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n            {collapsible && (\n              <svg \n                className={cn('w-5 h-5 transition-transform', isOpen && 'rotate-180')}\n                fill=\"none\" \n                stroke=\"currentColor\" \n                viewBox=\"0 0 24 24\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            )}\n          </div>\n          {description && (\n            <p className=\"mt-1 text-sm text-gray-600\">{description}</p>\n          )}\n        </div>\n      )}\n      \n      {(!collapsible || isOpen) && (\n        <div className=\"space-y-4\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}"],"version":3}