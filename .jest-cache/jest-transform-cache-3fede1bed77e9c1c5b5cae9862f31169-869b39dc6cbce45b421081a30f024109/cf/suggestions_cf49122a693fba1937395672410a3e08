c7b5a26741f5add33002aa62aefebfae
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = OwnerSuggestions;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const react_1 = require("react");
// Category configuration with icons and colors
const categoryConfig = [
    { name: 'Code Quality', icon: lucide_react_1.Code, color: 'bg-blue-50 text-blue-700 border-blue-200' },
    { name: 'Testing', icon: lucide_react_1.CheckCircle, color: 'bg-green-50 text-green-700 border-green-200' },
    {
        name: 'Documentation',
        icon: lucide_react_1.FileText,
        color: 'bg-purple-50 text-purple-700 border-purple-200',
    },
    { name: 'Security', icon: lucide_react_1.Shield, color: 'bg-red-50 text-red-700 border-red-200' },
    { name: 'Performance', icon: lucide_react_1.Zap, color: 'bg-yellow-50 text-yellow-700 border-yellow-200' },
    {
        name: 'Continuous Improvement',
        icon: lucide_react_1.Terminal,
        color: 'bg-indigo-50 text-indigo-700 border-indigo-200',
    },
    {
        name: 'Replit AI Agent Monitoring',
        icon: lucide_react_1.MessageSquare,
        color: 'bg-teal-50 text-teal-700 border-teal-200',
    },
];
/**
 *
 */
function OwnerSuggestions() {
    const { toast } = (0, use_toast_1.useToast)();
    const { data: suggestions = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/pillars/suggestions'],
        refetchInterval: 30000, // Refetch every 30 seconds to ensure fresh data
        staleTime: 0, // Data is always considered stale
    });
    // Group suggestions by category and take 2 from each
    const categorizedSuggestions = (0, react_1.useMemo)(() => {
        const grouped = suggestions.reduce((acc, suggestion) => {
            if (!acc[suggestion.category]) {
                acc[suggestion.category] = [];
            }
            // Only add if not done and we have less than 2 in this category
            if (suggestion.status !== 'Done' && acc[suggestion.category].length < 2) {
                acc[suggestion.category].push(suggestion);
            }
            return acc;
        }, {});
        // Sort suggestions within each category by priority
        const priorityOrder = { Critical: 0, High: 1, Medium: 2, Low: 3 };
        Object.keys(grouped).forEach((category) => {
            grouped[category].sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);
        });
        return grouped;
    }, [suggestions]);
    const acknowledgeMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('POST', `/api/pillars/suggestions/${id}/acknowledge`),
        onSuccess: () => {
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/pillars/suggestions'] });
        },
    });
    const completeMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('POST', `/api/pillars/suggestions/${id}/complete`),
        onSuccess: () => {
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/pillars/suggestions'] });
            // Show success message indicating deletion and continuous improvement update
            toast({
                title: 'Suggestion Completed',
                description: 'Suggestion has been removed and continuous improvement analysis is running in the background.',
            });
        },
    });
    const getPriorityColor = (priority) => {
        switch (priority) {
            case 'Critical':
                return 'bg-purple-100 text-purple-800';
            case 'High':
                return 'bg-red-100 text-red-800';
            case 'Medium':
                return 'bg-yellow-100 text-yellow-800';
            case 'Low':
                return 'bg-blue-100 text-blue-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };
    const getStatusColor = (status) => {
        switch (status) {
            case 'Done':
                return 'bg-green-100 text-green-800';
            case 'Acknowledged':
                return 'bg-blue-100 text-blue-800';
            case 'New':
                return 'bg-gray-100 text-gray-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };
    const getAIPrompt = (suggestion) => {
        const baseContext = 'You are working on a Quebec property management SaaS called Koveo Gestion. ';
        switch (suggestion.category) {
            case 'Code Quality':
                return `${baseContext}${suggestion.description} Focus on improving code maintainability while preserving existing functionality. Follow existing TypeScript patterns and ensure all changes maintain type safety.`;
            case 'Testing':
                return `${baseContext}${suggestion.description} Add comprehensive unit tests using Jest and React Testing Library. Focus on critical paths and edge cases. Ensure tests follow the existing test structure in /tests/ directory.`;
            case 'Documentation':
                return `${baseContext}${suggestion.description} Add JSDoc comments to all exported functions and classes. Follow the existing documentation style and include parameter descriptions, return values, and usage examples where appropriate.`;
            case 'Security':
                return `${baseContext}${suggestion.description} Address security vulnerabilities while maintaining Law 25 compliance for Quebec privacy regulations. Update dependencies safely and validate all changes don't break authentication or data protection.`;
            case 'Performance':
                return `${baseContext}${suggestion.description} Optimize performance while maintaining the existing user experience. Consider code splitting, lazy loading, and bundle optimization. Test changes thoroughly to ensure no regressions.`;
            default:
                return `${baseContext}${suggestion.description} Implement this improvement following the existing codebase patterns and Quebec property management requirements. Ensure all changes are well-tested and documented.`;
        }
    };
    const getCategoryIcon = (categoryName) => {
        const config = categoryConfig.find((c) => c.name === categoryName);
        return config?.icon || lucide_react_1.MessageSquare;
    };
    const getCategoryColor = (categoryName) => {
        const config = categoryConfig.find((c) => c.name === categoryName);
        return config?.color || 'bg-gray-50 text-gray-700 border-gray-200';
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Improvement Suggestions', subtitle: 'Review and manage system improvement recommendations' }), (0, jsx_runtime_1.jsx)("div", { className: 'border-b bg-gray-50 px-6 py-3', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-7xl mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm text-gray-600', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Terminal, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)("span", { className: 'font-medium', children: "Refresh Command:" }), (0, jsx_runtime_1.jsx)("code", { className: 'bg-gray-100 px-2 py-1 rounded text-xs font-mono', children: "npm run quality:check" })] }) }) }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto', children: [(0, jsx_runtime_1.jsx)(card_1.Card, { className: 'mb-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200', children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-blue-900', children: "Continuous Improvement Overview" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-blue-700 mt-1', children: "Displaying 2 priority suggestions per category for focused improvements" })] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: 'bg-blue-100 text-blue-800', children: [Object.values(categorizedSuggestions).flat().length, " Active Suggestions"] })] }) }) }), isLoading ? ((0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-center h-64', children: (0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-32 w-32 border-b-2 border-koveo-navy' }) })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-8', children: [categoryConfig.map((category) => {
                                    const categorySuggestions = categorizedSuggestions[category.name] || [];
                                    const Icon = category.icon;
                                    if (categorySuggestions.length === 0) {
                                        return null;
                                    }
                                    return ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: `flex items-center gap-3 p-3 rounded-lg border ${category.color}`, children: [(0, jsx_runtime_1.jsx)(Icon, { className: 'h-5 w-5' }), (0, jsx_runtime_1.jsx)("h2", { className: 'text-lg font-semibold', children: category.name }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'ml-auto', children: [categorySuggestions.length, ' ', categorySuggestions.length === 1 ? 'suggestion' : 'suggestions'] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'grid gap-4 md:grid-cols-2', children: categorySuggestions.map((suggestion) => ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'hover:shadow-lg transition-all hover:scale-[1.02]', children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-lg font-semibold text-koveo-navy', children: suggestion.title }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { className: 'mt-2', children: suggestion.description })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col gap-2 ml-4', children: [(0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: getPriorityColor(suggestion.priority), children: [suggestion.priority, " Priority"] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: getStatusColor(suggestion.status), children: suggestion.status })] })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'mb-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 text-sm text-gray-600 mb-3', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MessageSquare, { size: 16 }), suggestion.category] }), (0, jsx_runtime_1.jsxs)("span", { children: ["Created: ", new Date(suggestion.createdAt).toLocaleDateString()] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-blue-50 border border-blue-200 rounded-lg p-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-xs font-semibold text-blue-800 mb-2 uppercase tracking-wide', children: "AI Agent Prompt" }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-blue-900 font-mono bg-white border rounded px-3 py-2 select-all cursor-pointer', children: getAIPrompt(suggestion) }), (0, jsx_runtime_1.jsx)("div", { className: 'text-xs text-blue-600 mt-1', children: "Click to select and copy the prompt above" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsx)("div", {}), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [suggestion.status === 'New' && ((0, jsx_runtime_1.jsxs)(button_1.Button, { size: 'sm', variant: 'outline', onClick: () => acknowledgeMutation.mutate(suggestion.id), disabled: acknowledgeMutation.isPending, className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { size: 16 }), "Acknowledge"] })), (suggestion.status === 'New' ||
                                                                                    suggestion.status === 'Acknowledged') && ((0, jsx_runtime_1.jsxs)(button_1.Button, { size: 'sm', onClick: () => completeMutation.mutate(suggestion.id), disabled: completeMutation.isPending, className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { size: 16 }), "Mark Complete"] }))] })] })] })] }, suggestion.id))) })] }, category.name));
                                }), Object.values(categorizedSuggestions).flat().length === 0 && ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'flex flex-col items-center justify-center py-16', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MessageSquare, { size: 48, className: 'text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: "No Active Suggestions" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500 text-center max-w-md', children: "All suggestions have been completed or no improvement suggestions have been generated yet. Run the quality check to generate new recommendations." })] }) }))] }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,