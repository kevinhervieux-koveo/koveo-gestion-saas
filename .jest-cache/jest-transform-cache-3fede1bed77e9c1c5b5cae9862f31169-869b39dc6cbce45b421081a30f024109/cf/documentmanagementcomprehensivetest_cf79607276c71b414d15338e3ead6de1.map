{"file":"/home/runner/workspace/tests/integration/document-management-comprehensive.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/document-management-comprehensive.test.tsx"],"sourcesContent":["import { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport React from 'react';\n\n// Mock window methods that wouter uses\nconst mockPushState = jest.fn();\nconst mockReplaceState = jest.fn();\nconst mockNavigate = jest.fn();\nObject.defineProperty(window.history, 'pushState', { value: mockPushState, writable: true });\nObject.defineProperty(window.history, 'replaceState', { value: mockReplaceState, writable: true });\n\n// Components to test\nimport ResidenceDocuments from '../../client/src/pages/residents/ResidenceDocuments';\nimport BuildingDocuments from '../../client/src/pages/residents/BuildingDocuments';\nimport ManagerBuildingDocuments from '../../client/src/pages/manager/BuildingDocuments';\nimport ManagerResidenceDocuments from '../../client/src/pages/manager/ResidenceDocuments';\n\n// Mock API requests\nconst mockApiRequest = jest.fn();\njest.mock('../../client/src/lib/queryClient', () => ({\n  apiRequest: (...args: any[]) => mockApiRequest(...args),\n  queryClient: {\n    invalidateQueries: jest.fn(),\n    setQueryData: jest.fn(),\n  },\n}));\n\n// Mock hooks\nconst mockUseAuth = jest.fn();\njest.mock('../../client/src/hooks/use-auth', () => ({\n  useAuth: () => mockUseAuth(),\n  AuthProvider: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,\n}));\n\njest.mock('../../client/src/hooks/use-toast', () => ({\n  useToast: () => ({\n    toast: jest.fn(),\n  }),\n}));\n\n// Mock wouter navigation\njest.mock('wouter', () => {\n  const mockNavigate = jest.fn();\n  return {\n    useLocation: jest.fn(() => ['/', mockNavigate]),\n    useRoute: jest.fn(() => [true, {}]),\n    useRouter: jest.fn(() => ({ navigate: mockNavigate })),\n    Router: ({ children }: { children: React.ReactNode }) => <div data-testid=\"mock-router\">{children}</div>,\n    Route: ({ children }: { children: React.ReactNode }) => <div data-testid=\"mock-route\">{children}</div>,\n    Link: ({ children, href, ...props }: any) => (\n      <a href={href} data-testid=\"mock-link\" {...props}>\n        {children}\n      </a>\n    ),\n  };\n});\n\n// Demo test data\nconst demoTenantUser = {\n  id: 'tenant-demo-123',\n  email: 'tenant@demo.com',\n  firstName: 'Demo',\n  lastName: 'Tenant',\n  role: 'tenant',\n};\n\nconst demoManagerUser = {\n  id: 'manager-demo-456',\n  email: 'manager@demo.com',\n  firstName: 'Demo',\n  lastName: 'Manager',\n  role: 'manager',\n};\n\nconst demoBuildingData = {\n  id: 'building-demo-789',\n  name: 'Demo Building',\n  address: '123 Test Street',\n  city: 'Demo City',\n  province: 'QC',\n  organizationId: 'org-demo-123',\n};\n\nconst demoResidenceData = {\n  id: 'residence-demo-101',\n  unitNumber: '101',\n  buildingId: 'building-demo-789',\n  bedrooms: 2,\n  bathrooms: 1,\n  squareFootage: 850,\n};\n\nconst demoBuildingDocuments = [\n  {\n    id: 'doc-building-1',\n    name: 'Building Rules and Regulations',\n    type: 'policies',\n    uploadDate: '2024-01-15T10:00:00Z',\n    fileName: 'building-rules.pdf',\n    fileUrl: 'https://demo-storage/building-rules.pdf',\n    fileSize: '2.5 MB',\n    mimeType: 'application/pdf',\n    uploadedBy: 'manager-demo-456',\n    isVisibleToTenants: true,\n    documentCategory: 'policies',\n    entityType: 'building',\n    entityId: 'building-demo-789',\n  },\n  {\n    id: 'doc-building-2',\n    name: 'Building Financial Report',\n    type: 'financial',\n    uploadDate: '2024-02-01T14:30:00Z',\n    fileName: 'financial-report-2024.pdf',\n    fileUrl: 'https://demo-storage/financial-report.pdf',\n    fileSize: '1.2 MB',\n    mimeType: 'application/pdf',\n    uploadedBy: 'manager-demo-456',\n    isVisibleToTenants: false,\n    documentCategory: 'financial',\n    entityType: 'building',\n    entityId: 'building-demo-789',\n  },\n];\n\nconst demoResidenceDocuments = [\n  {\n    id: 'doc-residence-1',\n    name: 'Lease Agreement',\n    type: 'lease',\n    uploadDate: '2024-01-10T09:00:00Z',\n    fileName: 'lease-agreement-101.pdf',\n    fileUrl: 'https://demo-storage/lease-101.pdf',\n    fileSize: '3.1 MB',\n    mimeType: 'application/pdf',\n    uploadedBy: 'manager-demo-456',\n    isVisibleToTenants: true,\n    documentCategory: 'lease',\n    entityType: 'residence',\n    entityId: 'residence-demo-101',\n  },\n  {\n    id: 'doc-residence-2',\n    name: 'Maintenance History',\n    type: 'maintenance',\n    uploadDate: '2024-02-15T11:15:00Z',\n    fileName: 'maintenance-log-101.pdf',\n    fileUrl: 'https://demo-storage/maintenance-101.pdf',\n    fileSize: '0.8 MB',\n    mimeType: 'application/pdf',\n    uploadedBy: 'manager-demo-456',\n    isVisibleToTenants: false,\n    documentCategory: 'maintenance',\n    entityType: 'residence',\n    entityId: 'residence-demo-101',\n  },\n];\n\n// Import providers\nimport { LanguageProvider } from '../../client/src/hooks/use-language';\nimport { AuthProvider } from '../../client/src/hooks/use-auth';\nimport { MobileMenuProvider } from '../../client/src/hooks/use-mobile-menu';\n\n// Test providers wrapper\nfunction TestProviders({\n  children,\n  userRole = 'tenant',\n}: {\n  children: React.ReactNode;\n  userRole?: 'tenant' | 'manager';\n}) {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <MobileMenuProvider>\n          <div data-testid=\"mock-router\">\n            <AuthProvider>{children}</AuthProvider>\n          </div>\n        </MobileMenuProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\ndescribe('Document Management - Comprehensive Testing with Demo Users', () => {\n  const user = userEvent.setup();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Mock window.confirm for delete operations\n    global.confirm = jest.fn(() => true);\n\n    // Mock window.open for downloads\n    global.open = jest.fn();\n\n    // Mock URL search params\n    delete (window as any).location;\n    window.location = {\n      search: '?residenceId=residence-demo-101',\n      pathname: '/residents/residence/documents',\n    } as any;\n\n    // Set default auth mock\n    mockUseAuth.mockReturnValue({\n      user: demoTenantUser,\n      isLoading: false,\n    });\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Tenant User - Residents Residence Documents Page', () => {\n    it('should display only tenant-visible documents for demo tenant user', async () => {\n      // Set tenant user\n      mockUseAuth.mockReturnValue({\n        user: demoTenantUser,\n        isLoading: false,\n      });\n\n      // Mock API calls\n      mockApiRequest\n        .mockResolvedValueOnce(demoTenantUser) // auth/user\n        .mockResolvedValueOnce(demoResidenceData) // residence data\n        .mockResolvedValueOnce({ documents: demoResidenceDocuments }); // documents\n\n      render(\n        <TestProviders userRole='tenant'>\n          <ResidenceDocuments />\n        </TestProviders>\n      );\n\n      // Wait for loading to complete\n      await waitFor(() => {\n        expect(screen.getByTestId('text-documents-title')).toBeInTheDocument();\n      });\n\n      // Should show only documents visible to tenants\n      expect(screen.getByText('Lease Agreement')).toBeInTheDocument();\n      expect(screen.queryByText('Maintenance History')).not.toBeInTheDocument();\n\n      // Should display correct subtitle for tenants\n      expect(screen.getByText('Documents available to tenants')).toBeInTheDocument();\n\n      // Should not show Add Document button for tenants\n      expect(screen.queryByTestId('button-add-document')).not.toBeInTheDocument();\n    });\n\n    it('should allow tenant to download visible documents', async () => {\n      // Set tenant user\n      mockUseAuth.mockReturnValue({\n        user: demoTenantUser,\n        isLoading: false,\n      });\n\n      mockApiRequest\n        .mockResolvedValueOnce(demoTenantUser)\n        .mockResolvedValueOnce(demoResidenceData)\n        .mockResolvedValueOnce({ documents: demoResidenceDocuments });\n\n      render(\n        <TestProviders userRole='tenant'>\n          <ResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Lease Agreement')).toBeInTheDocument();\n      });\n\n      // Click download button\n      const downloadButton = screen.getByTestId('button-download-doc-residence-1');\n      await user.click(downloadButton);\n\n      // Should open document URL\n      expect(global.open).toHaveBeenCalledWith('https://demo-storage/lease-101.pdf', '_blank');\n    });\n\n    it('should show appropriate message when no documents are available to tenants', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoTenantUser)\n        .mockResolvedValueOnce(demoResidenceData)\n        .mockResolvedValueOnce({ documents: [] });\n\n      render(\n        <TestProviders userRole='tenant'>\n          <ResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('No Documents Found')).toBeInTheDocument();\n      });\n\n      expect(\n        screen.getByText('No documents are currently available to tenants for this residence.')\n      ).toBeInTheDocument();\n    });\n  });\n\n  describe('Tenant User - Residents Building Documents Page', () => {\n    it('should display building documents visible to tenants', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoTenantUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments });\n\n      render(\n        <TestProviders userRole='tenant'>\n          <BuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Building Rules and Regulations')).toBeInTheDocument();\n      });\n\n      // Should show only tenant-visible documents\n      expect(screen.getByText('Building Rules and Regulations')).toBeInTheDocument();\n      expect(screen.queryByText('Building Financial Report')).not.toBeInTheDocument();\n    });\n\n    it('should allow filtering documents by category', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoTenantUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments });\n\n      render(\n        <TestProviders userRole='tenant'>\n          <BuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('select-document-category')).toBeInTheDocument();\n      });\n\n      // Test category filtering\n      const categorySelect = screen.getByTestId('select-document-category');\n      await user.selectOptions(categorySelect, 'policies');\n\n      // Should still show the document since it matches the filter\n      expect(screen.getByText('Building Rules and Regulations')).toBeInTheDocument();\n    });\n\n    it('should allow searching documents by name', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoTenantUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments });\n\n      render(\n        <TestProviders userRole='tenant'>\n          <BuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('input-search-documents')).toBeInTheDocument();\n      });\n\n      // Test search functionality\n      const searchInput = screen.getByTestId('input-search-documents');\n      await user.type(searchInput, 'Rules');\n\n      // Should show matching document\n      expect(screen.getByText('Building Rules and Regulations')).toBeInTheDocument();\n    });\n  });\n\n  describe('Manager User - Manager Building Documents Page', () => {\n    it('should display all documents for manager with full controls', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments });\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('text-documents-title')).toBeInTheDocument();\n      });\n\n      // Should show all documents including manager-only ones\n      expect(screen.getByText('Building Rules and Regulations')).toBeInTheDocument();\n      expect(screen.getByText('Building Financial Report')).toBeInTheDocument();\n\n      // Should show Add Document button for managers\n      expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n\n      // Should show edit and delete buttons\n      expect(screen.getByTestId('button-edit-doc-building-1')).toBeInTheDocument();\n      expect(screen.getByTestId('button-delete-doc-building-1')).toBeInTheDocument();\n    });\n\n    it('should allow manager to create new document', async () => {\n      const newDocument = {\n        id: 'doc-new-123',\n        name: 'New Building Policy',\n        type: 'policies',\n        uploadDate: '2024-03-01T10:00:00Z',\n        isVisibleToTenants: true,\n        documentCategory: 'policies',\n        entityType: 'building',\n        entityId: 'building-demo-789',\n      };\n\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments })\n        .mockResolvedValueOnce(newDocument); // Create document response\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      });\n\n      // Click Add Document button\n      await user.click(screen.getByTestId('button-add-document'));\n\n      // Fill out the form\n      await user.type(screen.getByTestId('input-document-name'), 'New Building Policy');\n      await user.selectOptions(screen.getByTestId('select-document-type'), 'policies');\n      await user.type(\n        screen.getByTestId('textarea-document-description'),\n        'New policy document for the building'\n      );\n      await user.click(screen.getByTestId('checkbox-visible-to-tenants'));\n\n      // Submit the form\n      await user.click(screen.getByTestId('button-submit-document'));\n\n      // Verify API call was made\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/documents', {\n          name: 'New Building Policy',\n          type: 'policies',\n          description: 'New policy document for the building',\n          isVisibleToTenants: true,\n          documentType: 'building',\n          buildingId: 'building-demo-789',\n          uploadedBy: 'manager-demo-456',\n        });\n      });\n    });\n\n    it('should allow manager to upload file with document', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments })\n        .mockResolvedValueOnce({ id: 'doc-new-123' })\n        .mockResolvedValueOnce({}); // File upload response\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      });\n\n      // Click Add Document button\n      await user.click(screen.getByTestId('button-add-document'));\n\n      // Create a mock file\n      const file = new File(['test content'], 'test-policy.pdf', { type: 'application/pdf' });\n\n      // Fill out the form\n      await user.type(screen.getByTestId('input-document-name'), 'Test Policy Document');\n      await user.selectOptions(screen.getByTestId('select-document-type'), 'policies');\n      await user.upload(screen.getByTestId('input-file-upload'), file);\n\n      // Submit the form\n      await user.click(screen.getByTestId('button-submit-document'));\n\n      // Verify document creation and file upload API calls\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/documents', expect.any(Object));\n        expect(mockApiRequest).toHaveBeenCalledWith(\n          'POST',\n          '/api/documents/doc-new-123/upload',\n          expect.any(FormData)\n        );\n      });\n    });\n\n    it('should allow manager to edit document', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments })\n        .mockResolvedValueOnce({ ...demoBuildingDocuments[0], name: 'Updated Building Rules' });\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-edit-doc-building-1')).toBeInTheDocument();\n      });\n\n      // Click edit button\n      await user.click(screen.getByTestId('button-edit-doc-building-1'));\n\n      // Modify the document name\n      const nameInput = screen.getByTestId('input-edit-document-name');\n      await user.clear(nameInput);\n      await user.type(nameInput, 'Updated Building Rules');\n\n      // Change visibility\n      await user.click(screen.getByTestId('checkbox-edit-visible-to-tenants'));\n\n      // Submit the changes\n      await user.click(screen.getByTestId('button-update-document'));\n\n      // Verify API call was made\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('PUT', '/api/documents/doc-building-1', {\n          name: 'Updated Building Rules',\n          type: 'policies',\n          isVisibleToTenants: false,\n        });\n      });\n    });\n\n    it('should allow manager to delete document', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments })\n        .mockResolvedValueOnce({}); // Delete response\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-delete-doc-building-1')).toBeInTheDocument();\n      });\n\n      // Click delete button\n      await user.click(screen.getByTestId('button-delete-doc-building-1'));\n\n      // Verify confirmation dialog and API call\n      await waitFor(() => {\n        expect(global.confirm).toHaveBeenCalledWith(\n          'Are you sure you want to delete this document?'\n        );\n        expect(mockApiRequest).toHaveBeenCalledWith(\n          'DELETE',\n          '/api/documents/doc-building-1?type=building'\n        );\n      });\n    });\n  });\n\n  describe('Manager User - Manager Residence Documents Page', () => {\n    it('should display residence documents with full management controls', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce(demoResidenceData)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoResidenceDocuments });\n\n      // Mock URL params for residence ID\n      window.location = {\n        search: '?residenceId=residence-demo-101',\n        pathname: '/manager/residences/documents',\n      } as any;\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Unit 101 Documents')).toBeInTheDocument();\n      });\n\n      // Should show all documents including private ones\n      expect(screen.getByText('Lease Agreement')).toBeInTheDocument();\n      expect(screen.getByText('Maintenance History')).toBeInTheDocument();\n\n      // Should show management controls\n      expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      expect(screen.getByTestId('button-edit-doc-residence-1')).toBeInTheDocument();\n      expect(screen.getByTestId('button-delete-doc-residence-1')).toBeInTheDocument();\n    });\n\n    it('should show building context information', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce(demoResidenceData)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoResidenceDocuments });\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Unit 101')).toBeInTheDocument();\n      });\n\n      // Should show building information\n      expect(screen.getByText('Demo Building')).toBeInTheDocument();\n      expect(screen.getByText('123 Test Street, Demo City, QC')).toBeInTheDocument();\n      expect(screen.getByText('2 bedrooms • 1 bathrooms • 850 sq ft')).toBeInTheDocument();\n    });\n\n    it('should allow manager to create residence-specific document', async () => {\n      const newResidenceDocument = {\n        id: 'doc-residence-new',\n        name: 'Move-in Inspection',\n        type: 'inspection',\n        isVisibleToTenants: true,\n      };\n\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce(demoResidenceData)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoResidenceDocuments })\n        .mockResolvedValueOnce(newResidenceDocument);\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      });\n\n      // Click Add Document button\n      await user.click(screen.getByTestId('button-add-document'));\n\n      // Fill out the form\n      await user.type(screen.getByTestId('input-document-name'), 'Move-in Inspection');\n      await user.selectOptions(screen.getByTestId('select-document-type'), 'inspection');\n      await user.click(screen.getByTestId('checkbox-visible-to-tenants'));\n\n      // Submit the form\n      await user.click(screen.getByTestId('button-submit-document'));\n\n      // Verify API call was made with residence-specific data\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/documents', {\n          name: 'Move-in Inspection',\n          type: 'inspection',\n          isVisibleToTenants: true,\n          documentType: 'resident',\n          residenceId: 'residence-demo-101',\n          uploadedBy: 'manager-demo-456',\n        });\n      });\n    });\n\n    it('should navigate back to residences list', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce(demoResidenceData)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoResidenceDocuments });\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-back')).toBeInTheDocument();\n      });\n\n      // Click back button\n      await user.click(screen.getByTestId('button-back'));\n\n      // Note: mockNavigate is defined in the wouter mock scope\n      // Verify navigation functionality is available\n      expect(screen.getByTestId('button-back')).toHaveBeenCalled;\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle API errors gracefully', async () => {\n      mockApiRequest.mockRejectedValueOnce(new Error('Network error'));\n\n      render(\n        <TestProviders userRole='tenant'>\n          <ResidenceDocuments />\n        </TestProviders>\n      );\n\n      // Should still render the component without crashing\n      await waitFor(() => {\n        expect(screen.getByText('Loading documents...')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle missing residence ID', async () => {\n      // Clear URL params\n      window.location = {\n        search: '',\n        pathname: '/manager/residences/documents',\n      } as any;\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('Residence ID Required')).toBeInTheDocument();\n      });\n\n      expect(\n        screen.getByText('Please provide a residence ID to view documents.')\n      ).toBeInTheDocument();\n    });\n\n    it('should validate required fields in document creation', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments });\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      });\n\n      // Click Add Document button\n      await user.click(screen.getByTestId('button-add-document'));\n\n      // Try to submit without filling required fields\n      await user.click(screen.getByTestId('button-submit-document'));\n\n      // Should not make API call due to validation\n      expect(mockApiRequest).not.toHaveBeenCalledWith('POST', '/api/documents', expect.any(Object));\n    });\n\n    it('should handle file upload errors', async () => {\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments })\n        .mockResolvedValueOnce({ id: 'doc-new-123' })\n        .mockRejectedValueOnce(new Error('File upload failed'));\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      });\n\n      // Click Add Document button\n      await user.click(screen.getByTestId('button-add-document'));\n\n      const file = new File(['test'], 'test.pdf', { type: 'application/pdf' });\n\n      // Fill out the form\n      await user.type(screen.getByTestId('input-document-name'), 'Test Document');\n      await user.selectOptions(screen.getByTestId('select-document-type'), 'policies');\n      await user.upload(screen.getByTestId('input-file-upload'), file);\n\n      // Submit the form\n      await user.click(screen.getByTestId('button-submit-document'));\n\n      // Should handle the upload error gracefully\n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('POST', '/api/documents', expect.any(Object));\n        expect(mockApiRequest).toHaveBeenCalledWith(\n          'POST',\n          '/api/documents/doc-new-123/upload',\n          expect.any(FormData)\n        );\n      });\n    });\n  });\n\n  describe('Document Categories and Types', () => {\n    it('should support all building document categories', async () => {\n      const buildingCategories = [\n        'policies',\n        'financial',\n        'legal',\n        'maintenance',\n        'insurance',\n        'meeting_minutes',\n        'notices',\n        'other',\n      ];\n\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoBuildingDocuments });\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerBuildingDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      });\n\n      // Click Add Document button\n      await user.click(screen.getByTestId('button-add-document'));\n\n      const typeSelect = screen.getByTestId('select-document-type');\n\n      // Check that all categories are available\n      for (const category of buildingCategories) {\n        expect(screen.getByRole('option', { name: new RegExp(category, 'i') })).toBeInTheDocument();\n      }\n    });\n\n    it('should support all residence document categories', async () => {\n      const residenceCategories = [\n        'lease',\n        'inspection',\n        'maintenance',\n        'legal',\n        'insurance',\n        'financial',\n        'communication',\n        'photos',\n        'other',\n      ];\n\n      mockApiRequest\n        .mockResolvedValueOnce(demoManagerUser)\n        .mockResolvedValueOnce(demoResidenceData)\n        .mockResolvedValueOnce({ buildings: [demoBuildingData] })\n        .mockResolvedValueOnce({ documents: demoResidenceDocuments });\n\n      render(\n        <TestProviders userRole='manager'>\n          <ManagerResidenceDocuments />\n        </TestProviders>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-add-document')).toBeInTheDocument();\n      });\n\n      // Click Add Document button\n      await user.click(screen.getByTestId('button-add-document'));\n\n      // Check that all categories are available\n      for (const category of residenceCategories) {\n        expect(screen.getByRole('option', { name: new RegExp(category, 'i') })).toBeInTheDocument();\n      }\n    });\n  });\n});\n"],"version":3}