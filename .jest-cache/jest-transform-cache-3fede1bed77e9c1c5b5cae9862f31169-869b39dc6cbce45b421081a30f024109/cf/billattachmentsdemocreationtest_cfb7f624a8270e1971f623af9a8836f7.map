{"file":"/home/runner/workspace/tests/integration/bill-attachments-demo-creation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/bill-attachments-demo-creation.test.ts"],"sourcesContent":["/**\n * Bill Attachments Demo Creation Test\n * Tests that the demo creation script properly creates bills with attached documents\n * and that these attachments are properly linked and accessible.\n */\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\n\n// Mock the database and file system operations for testing\nconst mockDocuments: any[] = [];\nconst mockBills: any[] = [];\nconst mockOrganizations: any[] = [];\nconst mockBuildings: any[] = [];\n\n// Mock the database operations\nconst mockDb = {\n  select: jest.fn().mockReturnValue({\n    from: jest.fn().mockReturnValue({\n      where: jest.fn().mockReturnValue({\n        limit: jest.fn().mockResolvedValue([]),\n      }),\n    }),\n  }),\n  insert: jest.fn().mockReturnValue({\n    values: jest.fn().mockReturnValue({\n      returning: jest.fn().mockImplementation((schema: any) => {\n        if (schema === 'documents') {\n          const doc = {\n            id: `doc-${Date.now()}-${Math.random()}`,\n            name: 'Test Document',\n            filePath: 'bills/test-document.txt',\n            fileName: 'test-document.txt',\n            fileSize: 1024,\n            attachedToType: 'bill',\n            attachedToId: 'test-bill-id',\n            documentType: 'maintenance',\n            createdAt: new Date(),\n          };\n          mockDocuments.push(doc);\n          return [doc];\n        }\n        if (schema === 'bills') {\n          const bill = {\n            id: `bill-${Date.now()}-${Math.random()}`,\n            billNumber: 'TEST-2024-001',\n            title: 'Test Bill',\n            category: 'maintenance',\n            totalAmount: '500.00',\n            createdAt: new Date(),\n          };\n          mockBills.push(bill);\n          return [bill];\n        }\n        return [{ id: `${Date.now()}-${Math.random()}` }];\n      }),\n    }),\n  }),\n};\n\n// Mock file system operations\nconst mockFs = {\n  writeFileSync: jest.fn(),\n  existsSync: jest.fn().mockReturnValue(true),\n  mkdirSync: jest.fn(),\n};\n\n// Mock path operations\nconst mockPath = {\n  resolve: jest.fn((filePath: string) => `/mocked/path/${filePath}`),\n  dirname: jest.fn().mockReturnValue('/mocked/path'),\n  extname: jest.fn().mockReturnValue('.txt'),\n};\n\ndescribe('Bill Attachments Demo Creation', () => {\n  beforeEach(() => {\n    // Clear mock data\n    mockDocuments.length = 0;\n    mockBills.length = 0;\n    mockOrganizations.length = 0;\n    mockBuildings.length = 0;\n    \n    // Reset mock functions\n    jest.clearAllMocks();\n  });\n\n  test('should create bills with document attachments in demo script', async () => {\n    // Simulate the demo script bill creation with attachments\n    const organizationId = 'test-org-id';\n    const buildingId = 'test-building-id';\n    \n    // Create a test bill\n    const billData = {\n      buildingId,\n      billNumber: 'TEST-2024-INSURANCE-1',\n      title: 'Insurance (I) - Osinski - Smitham',\n      category: 'insurance',\n      vendor: 'Maggio Group',\n      description: 'Monthly insurance service for June 2024 - Invoice 1',\n      totalAmount: '2014.15',\n      status: 'paid',\n      paymentType: 'recurrent',\n      dueDate: new Date('2024-11-02'),\n    };\n\n    // Mock bill creation (simulating demo script behavior)\n    const [createdBill] = await mockDb.insert().values().returning('bills');\n    \n    // Simulate document creation for the bill (from demo script lines 1175-1201)\n    const filePath = `bills/invoice-${billData.billNumber.toLowerCase()}-${createdBill.id.slice(0, 8)}.txt`;\n    const documentContent = `INVOICE\nBill Number: ${billData.billNumber}\nTitle: ${billData.title}\nCategory: ${billData.category}\nVendor: ${billData.vendor}\nAmount: $${billData.totalAmount}\nDescription: ${billData.description}`;\n\n    // Write file (simulating writeDocumentFile function)\n    mockFs.writeFileSync(mockPath.resolve(filePath), documentContent, 'utf8');\n    \n    // Create document record linked to bill\n    const documentData = {\n      name: `Invoice - ${billData.billNumber}`,\n      description: `Invoice for ${billData.title}`,\n      documentType: 'maintenance',\n      filePath,\n      fileName: `invoice-${billData.billNumber}.txt`,\n      fileSize: documentContent.length,\n      mimeType: 'text/plain',\n      attachedToType: 'bill',\n      attachedToId: createdBill.id,\n      uploadedById: 'demo-user-id',\n      buildingId,\n      isVisibleToTenants: false,\n    };\n\n    const [createdDocument] = await mockDb.insert().values().returning('documents');\n\n    // Verify bill was created\n    expect(mockBills).toHaveLength(1);\n    expect(mockBills[0]).toMatchObject({\n      id: expect.any(String),\n      billNumber: expect.any(String),\n    });\n\n    // Verify document was created and properly linked to bill\n    expect(mockDocuments).toHaveLength(1);\n    expect(mockDocuments[0]).toMatchObject({\n      id: expect.any(String),\n      name: expect.stringContaining('Invoice'),\n      filePath: expect.stringContaining('bills/'),\n      fileName: expect.stringContaining('.txt'),\n      fileSize: expect.any(Number),\n      attachedToType: 'bill',\n      attachedToId: createdBill.id,\n      documentType: 'maintenance',\n    });\n\n    // Verify file was written\n    expect(mockFs.writeFileSync).toHaveBeenCalledWith(\n      expect.stringContaining(filePath),\n      expect.stringContaining('INVOICE'),\n      'utf8'\n    );\n  });\n\n  test('should create multiple bill categories with different attachment types', async () => {\n    const billCategories = ['insurance', 'maintenance', 'utilities', 'cleaning'];\n    const buildingId = 'test-building-id';\n\n    for (const category of billCategories) {\n      // Create bill for each category\n      const billData = {\n        buildingId,\n        billNumber: `TEST-2024-${category.toUpperCase()}-1`,\n        title: `${category} Bill`,\n        category,\n        vendor: 'Test Vendor',\n        description: `Test ${category} bill description`,\n        totalAmount: '100.00',\n        status: 'pending',\n        paymentType: 'one_time',\n      };\n\n      const [createdBill] = await mockDb.insert().values().returning('bills');\n\n      // Create both invoice and receipt documents\n      const docTypes = ['invoice', 'receipt'];\n      \n      for (const docType of docTypes) {\n        const filePath = `bills/${docType}-${billData.billNumber.toLowerCase()}-${createdBill.id.slice(0, 8)}.txt`;\n        const documentContent = `${docType.toUpperCase()}\\nBill: ${billData.billNumber}\\nCategory: ${category}`;\n\n        // Write file\n        mockFs.writeFileSync(mockPath.resolve(filePath), documentContent, 'utf8');\n\n        // Create document record\n        const documentData = {\n          name: `${docType} - ${billData.billNumber}`,\n          description: `${docType} for ${billData.title}`,\n          documentType: category,\n          filePath,\n          fileName: `${docType}-${billData.billNumber}.txt`,\n          fileSize: documentContent.length,\n          mimeType: 'text/plain',\n          attachedToType: 'bill',\n          attachedToId: createdBill.id,\n          uploadedById: 'demo-user-id',\n          buildingId,\n          isVisibleToTenants: false,\n        };\n\n        await mockDb.insert().values().returning('documents');\n      }\n    }\n\n    // Verify all bills were created\n    expect(mockBills).toHaveLength(billCategories.length);\n\n    // Verify all documents were created (2 docs per bill category)\n    expect(mockDocuments).toHaveLength(billCategories.length * 2);\n\n    // Verify all documents are properly linked to bills\n    mockDocuments.forEach(doc => {\n      expect(doc.attachedToType).toBe('bill');\n      expect(doc.attachedToId).toMatch(/^bill-/);\n      expect(doc.filePath).toMatch(/^bills\\//);\n      expect(doc.fileName).toMatch(/\\.(txt)$/);\n    });\n  });\n\n  test('should validate document file paths and names are correctly generated', async () => {\n    const billNumber = 'TEST-2024-MAINTENANCE-123';\n    const billId = 'bill-uuid-123456';\n    \n    // Test file path generation (from demo script line 1175)\n    const expectedFilePath = `bills/invoice-${billNumber.toLowerCase()}-${billId.slice(0, 8)}.txt`;\n    \n    expect(expectedFilePath).toBe('bills/invoice-test-2024-maintenance-123-bill-uui.txt');\n    \n    // Test fileName generation (from demo script line 1199)\n    const expectedFileName = `invoice-${billNumber}.txt`;\n    \n    expect(expectedFileName).toBe('invoice-TEST-2024-MAINTENANCE-123.txt');\n  });\n\n  test('should ensure bills have proper attachedToType and attachedToId linkage', async () => {\n    const billId = 'test-bill-id-12345';\n    \n    // Create a document as it would be created in the demo script\n    const documentData = {\n      name: 'Test Invoice',\n      description: 'Test invoice document',\n      documentType: 'maintenance',\n      filePath: 'bills/test-invoice.txt',\n      fileName: 'test-invoice.txt',\n      fileSize: 1024,\n      mimeType: 'text/plain',\n      attachedToType: 'bill',\n      attachedToId: billId,\n      uploadedById: 'demo-user-id',\n      buildingId: 'test-building-id',\n      isVisibleToTenants: false,\n    };\n\n    const [createdDocument] = await mockDb.insert().values().returning('documents');\n\n    // Verify the document has correct linkage\n    expect(createdDocument.attachedToType).toBe('bill');\n    expect(createdDocument.attachedToId).toBe(billId);\n    \n    // Verify that API query would find this document\n    // This simulates the query: /api/documents?attachedToType=bill&attachedToId=${billId}\n    const queryResults = mockDocuments.filter(doc => \n      doc.attachedToType === 'bill' && doc.attachedToId === billId\n    );\n    \n    expect(queryResults).toHaveLength(1);\n    expect(queryResults[0]).toMatchObject({\n      attachedToType: 'bill',\n      attachedToId: billId,\n      filePath: expect.stringContaining('bills/'),\n      fileName: expect.stringContaining('.txt'),\n    });\n  });\n\n  test('should create realistic file sizes for bill attachments', async () => {\n    const billId = 'test-bill-id';\n    const documentContent = `DETAILED INVOICE\nBill Number: TEST-2024-INSURANCE-1\nTitle: Insurance (I) - Osinski - Smitham  \nCategory: Insurance\nVendor: Maggio Group\nAmount: $2,014.15\nDescription: Monthly insurance service for June 2024 - Invoice 1\nPayment Type: Recurrent\nDue Date: 2024-11-02\n\n--- Invoice Details ---\nService Period: June 1-30, 2024\nPolicy Number: INS-QC-2024-001\nCoverage: Comprehensive Building Insurance\nDeductible: $1,000\nPremium: $2,014.15\n\nBuilding Management Office`;\n\n    // Write file and get size\n    mockFs.writeFileSync('/test/path/bill-doc.txt', documentContent, 'utf8');\n    const fileSize = documentContent.length;\n\n    // Create document with realistic file size\n    const documentData = {\n      name: 'Invoice - TEST-2024-INSURANCE-1',\n      filePath: 'bills/invoice-test-2024-insurance-1.txt',\n      fileName: 'invoice-test-2024-insurance-1.txt',\n      fileSize,\n      attachedToType: 'bill',\n      attachedToId: billId,\n    };\n\n    await mockDb.insert().values().returning('documents');\n\n    // Verify realistic file size\n    expect(mockDocuments[0].fileSize).toBeGreaterThan(500); // Reasonable minimum\n    expect(mockDocuments[0].fileSize).toBeLessThan(10000); // Reasonable maximum for text\n    expect(mockDocuments[0].fileSize).toBe(documentContent.length);\n  });\n});"],"version":3}