2476a9ecc07a8603d01d7fc1a926237e
'use strict';
var isElementType = require('../../utils/misc/isElementType.js');
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
var isEditable = require('../../utils/edit/isEditable.js');
var input = require('../input.js');
var registry = require('./registry.js');
registry.behavior.keypress = (event, target, instance) => {
    if (event.key === 'Enter') {
        if (isElementType.isElementType(target, 'button') || isElementType.isElementType(target, 'input') && ClickInputOnEnter.includes(target.type) || isElementType.isElementType(target, 'a') && Boolean(target.href)) {
            return () => {
                instance.dispatchUIEvent(target, 'click');
            };
        }
        else if (isElementType.isElementType(target, 'input')) {
            const form = target.form;
            const submit = form === null || form === undefined ? undefined : form.querySelector('input[type="submit"], button:not([type]), button[type="submit"]');
            if (submit) {
                return () => instance.dispatchUIEvent(submit, 'click');
            }
            else if (form && SubmitSingleInputOnEnter.includes(target.type) && form.querySelectorAll('input').length === 1) {
                return () => instance.dispatchUIEvent(form, 'submit');
            }
            else {
                return;
            }
        }
    }
    if (isEditable.isEditable(target)) {
        const inputType = event.key === 'Enter' ? isContentEditable.isContentEditable(target) && !instance.system.keyboard.modifiers.Shift ? 'insertParagraph' : 'insertLineBreak' : 'insertText';
        const inputData = event.key === 'Enter' ? '\n' : event.key;
        return () => input.input(instance, target, inputData, inputType);
    }
};
const ClickInputOnEnter = [
    'button',
    'color',
    'file',
    'image',
    'reset',
    'submit'
];
const SubmitSingleInputOnEnter = [
    'email',
    'month',
    'password',
    'search',
    'tel',
    'text',
    'url',
    'week'
];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L2JlaGF2aW9yL2tleXByZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ2pFLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQ2pELElBQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDekUsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDM0QsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ25DLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUV4QyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLEVBQUU7SUFDcEQsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLElBQUksaUJBQWlCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDL00sT0FBTyxHQUFFLEVBQUU7Z0JBQ1AsUUFBUSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDOUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQzthQUFNLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUN0RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ3pCLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGlFQUFpRSxDQUFDLENBQUM7WUFDdkosSUFBSSxNQUFNLEVBQUUsQ0FBQztnQkFDVCxPQUFPLEdBQUUsRUFBRSxDQUFBLFFBQVEsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3pELENBQUM7aUJBQU0sSUFBSSxJQUFJLElBQUksd0JBQXdCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUMvRyxPQUFPLEdBQUUsRUFBRSxDQUFBLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3hELENBQUM7aUJBQU0sQ0FBQztnQkFDSixPQUFPO1lBQ1gsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBQ0QsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDaEMsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7UUFDMUwsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUMzRCxPQUFPLEdBQUUsRUFBRSxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbkUsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUNGLE1BQU0saUJBQWlCLEdBQUc7SUFDdEIsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0NBQ1gsQ0FBQztBQUNGLE1BQU0sd0JBQXdCLEdBQUc7SUFDN0IsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLEtBQUs7SUFDTCxNQUFNO0lBQ04sS0FBSztJQUNMLE1BQU07Q0FDVCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudC9kaXN0L2Nqcy9ldmVudC9iZWhhdmlvci9rZXlwcmVzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc0VsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvbWlzYy9pc0VsZW1lbnRUeXBlLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgaXNDb250ZW50RWRpdGFibGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9lZGl0L2lzQ29udGVudEVkaXRhYmxlLmpzJyk7XG52YXIgaXNFZGl0YWJsZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvaXNFZGl0YWJsZS5qcycpO1xudmFyIGlucHV0ID0gcmVxdWlyZSgnLi4vaW5wdXQuanMnKTtcbnZhciByZWdpc3RyeSA9IHJlcXVpcmUoJy4vcmVnaXN0cnkuanMnKTtcblxucmVnaXN0cnkuYmVoYXZpb3Iua2V5cHJlc3MgPSAoZXZlbnQsIHRhcmdldCwgaW5zdGFuY2UpPT57XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICBpZiAoaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKHRhcmdldCwgJ2J1dHRvbicpIHx8IGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZSh0YXJnZXQsICdpbnB1dCcpICYmIENsaWNrSW5wdXRPbkVudGVyLmluY2x1ZGVzKHRhcmdldC50eXBlKSB8fCBpc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUodGFyZ2V0LCAnYScpICYmIEJvb2xlYW4odGFyZ2V0LmhyZWYpKSB7XG4gICAgICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5kaXNwYXRjaFVJRXZlbnQodGFyZ2V0LCAnY2xpY2snKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKHRhcmdldCwgJ2lucHV0JykpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm0gPSB0YXJnZXQuZm9ybTtcbiAgICAgICAgICAgIGNvbnN0IHN1Ym1pdCA9IGZvcm0gPT09IG51bGwgfHwgZm9ybSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZm9ybS5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwic3VibWl0XCJdLCBidXR0b246bm90KFt0eXBlXSksIGJ1dHRvblt0eXBlPVwic3VibWl0XCJdJyk7XG4gICAgICAgICAgICBpZiAoc3VibWl0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpPT5pbnN0YW5jZS5kaXNwYXRjaFVJRXZlbnQoc3VibWl0LCAnY2xpY2snKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybSAmJiBTdWJtaXRTaW5nbGVJbnB1dE9uRW50ZXIuaW5jbHVkZXModGFyZ2V0LnR5cGUpICYmIGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCk9Pmluc3RhbmNlLmRpc3BhdGNoVUlFdmVudChmb3JtLCAnc3VibWl0Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNFZGl0YWJsZS5pc0VkaXRhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgY29uc3QgaW5wdXRUeXBlID0gZXZlbnQua2V5ID09PSAnRW50ZXInID8gaXNDb250ZW50RWRpdGFibGUuaXNDb250ZW50RWRpdGFibGUodGFyZ2V0KSAmJiAhaW5zdGFuY2Uuc3lzdGVtLmtleWJvYXJkLm1vZGlmaWVycy5TaGlmdCA/ICdpbnNlcnRQYXJhZ3JhcGgnIDogJ2luc2VydExpbmVCcmVhaycgOiAnaW5zZXJ0VGV4dCc7XG4gICAgICAgIGNvbnN0IGlucHV0RGF0YSA9IGV2ZW50LmtleSA9PT0gJ0VudGVyJyA/ICdcXG4nIDogZXZlbnQua2V5O1xuICAgICAgICByZXR1cm4gKCk9PmlucHV0LmlucHV0KGluc3RhbmNlLCB0YXJnZXQsIGlucHV0RGF0YSwgaW5wdXRUeXBlKTtcbiAgICB9XG59O1xuY29uc3QgQ2xpY2tJbnB1dE9uRW50ZXIgPSBbXG4gICAgJ2J1dHRvbicsXG4gICAgJ2NvbG9yJyxcbiAgICAnZmlsZScsXG4gICAgJ2ltYWdlJyxcbiAgICAncmVzZXQnLFxuICAgICdzdWJtaXQnXG5dO1xuY29uc3QgU3VibWl0U2luZ2xlSW5wdXRPbkVudGVyID0gW1xuICAgICdlbWFpbCcsXG4gICAgJ21vbnRoJyxcbiAgICAncGFzc3dvcmQnLFxuICAgICdzZWFyY2gnLFxuICAgICd0ZWwnLFxuICAgICd0ZXh0JyxcbiAgICAndXJsJyxcbiAgICAnd2Vlaydcbl07XG4iXSwidmVyc2lvbiI6M30=