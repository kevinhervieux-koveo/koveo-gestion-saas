{"file":"/home/runner/workspace/tests/unit/building-selection-debug.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/building-selection-debug.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport { users, organizations, userOrganizations, buildings, residences, userResidences } from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\n// Create test server\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json({ limit: '1mb' }));\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('Building Selection Debug Tests', () => {\n  let app: any;\n  let testUserId: string;\n  let koveoOrgId: string;\n  let testOrgId: string;\n  let testBuildingId: string;\n  let testBuildingId2: string;\n  let sessionCookie: string;\n\n  beforeEach(async () => {\n    app = createTestApp();\n\n    // Clean up existing test data\n    await db.delete(userOrganizations).where(eq(userOrganizations.userId, testUserId));\n    await db.delete(userResidences);\n    await db.delete(residences);\n    await db.delete(buildings);\n    await db.delete(organizations);\n    await db.delete(users);\n\n    // Create Koveo organization (special global access)\n    const koveoOrg = await db.insert(organizations).values({\n      name: 'Koveo',\n      type: 'property_management',\n      isActive: true,\n    }).returning();\n    koveoOrgId = koveoOrg[0].id;\n\n    // Create test organization\n    const testOrg = await db.insert(organizations).values({\n      name: 'Test Property Management',\n      type: 'property_management',\n      isActive: true,\n    }).returning();\n    testOrgId = testOrg[0].id;\n\n    // Create test admin user\n    const testUser = await db.insert(users).values({\n      email: 'admin@test.com',\n      passwordHash: 'test-hash',\n      role: 'admin',\n      isActive: true,\n    }).returning();\n    testUserId = testUser[0].id;\n\n    // Create test buildings in different organizations\n    const testBuilding1 = await db.insert(buildings).values({\n      name: 'Test Building 1',\n      address: '123 Test St',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H1H 1H1',\n      organizationId: koveoOrgId,\n      totalUnits: 10,\n      totalFloors: 3,\n      isActive: true,\n    }).returning();\n    testBuildingId = testBuilding1[0].id;\n\n    const testBuilding2 = await db.insert(buildings).values({\n      name: 'Test Building 2',\n      address: '456 Test Ave',\n      city: 'Test City',\n      province: 'QC',\n      postalCode: 'H2H 2H2',\n      organizationId: testOrgId,\n      totalUnits: 20,\n      totalFloors: 5,\n      isActive: true,\n    }).returning();\n    testBuildingId2 = testBuilding2[0].id;\n\n    // Login to get session cookie\n    const loginResponse = await request(app)\n      .post('/api/auth/login')\n      .send({\n        email: 'admin@test.com',\n        password: 'test-password' // This will be compared against 'test-hash'\n      });\n\n    if (loginResponse.headers['set-cookie']) {\n      sessionCookie = loginResponse.headers['set-cookie'][0];\n    }\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    await db.delete(userOrganizations).where(eq(userOrganizations.userId, testUserId));\n    await db.delete(userResidences);\n    await db.delete(residences);\n    await db.delete(buildings);\n    await db.delete(organizations);\n    await db.delete(users);\n  });\n\n  describe('Buildings API Access Control', () => {\n    it('should return empty array when admin has no organization relationships', async () => {\n      // Test current state - admin with no organization relationships\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('Cookie', sessionCookie);\n\n      console.log('🔍 [TEST] Response status:', response.status);\n      console.log('🔍 [TEST] Response body:', response.body);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      // This should return empty array due to missing organization relationship\n      expect(response.body).toHaveLength(0);\n    });\n\n    it('should return buildings when admin has Koveo organization relationship', async () => {\n      // Add user to Koveo organization with global access\n      await db.insert(userOrganizations).values({\n        userId: testUserId,\n        organizationId: koveoOrgId,\n        canAccessAllOrganizations: true,\n        isActive: true,\n      });\n\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('Cookie', sessionCookie);\n\n      console.log('🔍 [TEST] With Koveo org - Response status:', response.status);\n      console.log('🔍 [TEST] With Koveo org - Response body:', response.body);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      // Should now return all buildings since user has global access\n      expect(response.body.length).toBeGreaterThan(0);\n    });\n\n    it('should return organization buildings when admin has organization relationship', async () => {\n      // Add user to test organization (no global access)\n      await db.insert(userOrganizations).values({\n        userId: testUserId,\n        organizationId: testOrgId,\n        canAccessAllOrganizations: false,\n        isActive: true,\n      });\n\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('Cookie', sessionCookie);\n\n      console.log('🔍 [TEST] With test org - Response status:', response.status);\n      console.log('🔍 [TEST] With test org - Response body:', response.body);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      // Should return only buildings from test organization\n      expect(response.body).toHaveLength(1);\n      expect(response.body[0].organizationId).toBe(testOrgId);\n    });\n\n    it('should show user organizations and access in debug info', async () => {\n      // Check what organizations the user actually has\n      const userOrgs = await db\n        .select({\n          organizationId: userOrganizations.organizationId,\n          organizationName: organizations.name,\n          canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,\n          isActive: userOrganizations.isActive,\n        })\n        .from(userOrganizations)\n        .innerJoin(organizations, eq(userOrganizations.organizationId, organizations.id))\n        .where(eq(userOrganizations.userId, testUserId));\n\n      console.log('🔍 [TEST] User organizations in DB:', userOrgs);\n\n      // Check what the user object looks like from the database\n      const userFromDb = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, testUserId));\n\n      console.log('🔍 [TEST] User from DB:', userFromDb[0]);\n\n      expect(userOrgs).toHaveLength(0); // Initially no organizations\n    });\n  });\n\n  describe('User Organization Relationship Issues', () => {\n    it('should identify why admin user has empty organizations array', async () => {\n      // Check if the auth middleware is properly loading user organizations\n      const response = await request(app)\n        .get('/api/debug/user-info')\n        .set('Cookie', sessionCookie);\n\n      console.log('🔍 [TEST] User info response:', response.body);\n      \n      // This endpoint should show us what the auth middleware sees\n      expect(response.status).toBe(200);\n    });\n\n    it('should verify database has buildings available', async () => {\n      // Direct database query to verify buildings exist\n      const allBuildings = await db\n        .select({\n          id: buildings.id,\n          name: buildings.name,\n          organizationId: buildings.organizationId,\n          organizationName: organizations.name,\n          isActive: buildings.isActive,\n        })\n        .from(buildings)\n        .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n        .where(eq(buildings.isActive, true));\n\n      console.log('🔍 [TEST] All buildings in DB:', allBuildings);\n      \n      expect(allBuildings.length).toBeGreaterThan(0);\n      expect(allBuildings.some(b => b.organizationName === 'Koveo')).toBe(true);\n    });\n\n    it('should test manager buildings endpoint for comparison', async () => {\n      const response = await request(app)\n        .get('/api/manager/buildings')\n        .set('Cookie', sessionCookie);\n\n      console.log('🔍 [TEST] Manager buildings response:', response.status, response.body);\n      \n      expect(response.status).toBe(200);\n      // This endpoint has different logic, let's see what it returns\n    });\n  });\n\n  describe('Fix Verification', () => {\n    it('should work after creating proper user organization relationship', async () => {\n      // Create the missing relationship that should exist for Kevin's admin user\n      await db.insert(userOrganizations).values({\n        userId: testUserId,\n        organizationId: koveoOrgId,\n        canAccessAllOrganizations: true,\n        isActive: true,\n      });\n\n      // Test both endpoints\n      const buildingsResponse = await request(app)\n        .get('/api/buildings')\n        .set('Cookie', sessionCookie);\n\n      const managerBuildingsResponse = await request(app)\n        .get('/api/manager/buildings')\n        .set('Cookie', sessionCookie);\n\n      console.log('🔍 [TEST] After fix - Buildings response:', buildingsResponse.body);\n      console.log('🔍 [TEST] After fix - Manager buildings response:', managerBuildingsResponse.body);\n\n      expect(buildingsResponse.status).toBe(200);\n      expect(buildingsResponse.body.length).toBeGreaterThan(0);\n      \n      expect(managerBuildingsResponse.status).toBe(200);\n      expect(managerBuildingsResponse.body.length).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}