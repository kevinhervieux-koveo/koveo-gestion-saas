9de77ef67392bc84ccdd8a4cd7ad5432
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
// Create test server
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json({ limit: '1mb' }));
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('Building Selection Debug Tests', () => {
    let app;
    let testUserId;
    let koveoOrgId;
    let testOrgId;
    let testBuildingId;
    let testBuildingId2;
    let sessionCookie;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clean up existing test data
        await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, testUserId));
        await db_1.db.delete(schema_1.userResidences);
        await db_1.db.delete(schema_1.residences);
        await db_1.db.delete(schema_1.buildings);
        await db_1.db.delete(schema_1.organizations);
        await db_1.db.delete(schema_1.users);
        // Create Koveo organization (special global access)
        const koveoOrg = await db_1.db.insert(schema_1.organizations).values({
            name: 'Koveo',
            type: 'property_management',
            isActive: true,
        }).returning();
        koveoOrgId = koveoOrg[0].id;
        // Create test organization
        const testOrg = await db_1.db.insert(schema_1.organizations).values({
            name: 'Test Property Management',
            type: 'property_management',
            isActive: true,
        }).returning();
        testOrgId = testOrg[0].id;
        // Create test admin user
        const testUser = await db_1.db.insert(schema_1.users).values({
            email: 'admin@test.com',
            passwordHash: 'test-hash',
            role: 'admin',
            isActive: true,
        }).returning();
        testUserId = testUser[0].id;
        // Create test buildings in different organizations
        const testBuilding1 = await db_1.db.insert(schema_1.buildings).values({
            name: 'Test Building 1',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            organizationId: koveoOrgId,
            totalUnits: 10,
            totalFloors: 3,
            isActive: true,
        }).returning();
        testBuildingId = testBuilding1[0].id;
        const testBuilding2 = await db_1.db.insert(schema_1.buildings).values({
            name: 'Test Building 2',
            address: '456 Test Ave',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H2H 2H2',
            organizationId: testOrgId,
            totalUnits: 20,
            totalFloors: 5,
            isActive: true,
        }).returning();
        testBuildingId2 = testBuilding2[0].id;
        // Login to get session cookie
        const loginResponse = await (0, supertest_1.default)(app)
            .post('/api/auth/login')
            .send({
            email: 'admin@test.com',
            password: 'test-password' // This will be compared against 'test-hash'
        });
        if (loginResponse.headers['set-cookie']) {
            sessionCookie = loginResponse.headers['set-cookie'][0];
        }
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, testUserId));
        await db_1.db.delete(schema_1.userResidences);
        await db_1.db.delete(schema_1.residences);
        await db_1.db.delete(schema_1.buildings);
        await db_1.db.delete(schema_1.organizations);
        await db_1.db.delete(schema_1.users);
    });
    (0, globals_1.describe)('Buildings API Access Control', () => {
        (0, globals_1.it)('should return empty array when admin has no organization relationships', async () => {
            // Test current state - admin with no organization relationships
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('Cookie', sessionCookie);
            console.log('🔍 [TEST] Response status:', response.status);
            console.log('🔍 [TEST] Response body:', response.body);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            // This should return empty array due to missing organization relationship
            (0, globals_1.expect)(response.body).toHaveLength(0);
        });
        (0, globals_1.it)('should return buildings when admin has Koveo organization relationship', async () => {
            // Add user to Koveo organization with global access
            await db_1.db.insert(schema_1.userOrganizations).values({
                userId: testUserId,
                organizationId: koveoOrgId,
                canAccessAllOrganizations: true,
                isActive: true,
            });
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('Cookie', sessionCookie);
            console.log('🔍 [TEST] With Koveo org - Response status:', response.status);
            console.log('🔍 [TEST] With Koveo org - Response body:', response.body);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            // Should now return all buildings since user has global access
            (0, globals_1.expect)(response.body.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should return organization buildings when admin has organization relationship', async () => {
            // Add user to test organization (no global access)
            await db_1.db.insert(schema_1.userOrganizations).values({
                userId: testUserId,
                organizationId: testOrgId,
                canAccessAllOrganizations: false,
                isActive: true,
            });
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('Cookie', sessionCookie);
            console.log('🔍 [TEST] With test org - Response status:', response.status);
            console.log('🔍 [TEST] With test org - Response body:', response.body);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            // Should return only buildings from test organization
            (0, globals_1.expect)(response.body).toHaveLength(1);
            (0, globals_1.expect)(response.body[0].organizationId).toBe(testOrgId);
        });
        (0, globals_1.it)('should show user organizations and access in debug info', async () => {
            // Check what organizations the user actually has
            const userOrgs = await db_1.db
                .select({
                organizationId: schema_1.userOrganizations.organizationId,
                organizationName: schema_1.organizations.name,
                canAccessAllOrganizations: schema_1.userOrganizations.canAccessAllOrganizations,
                isActive: schema_1.userOrganizations.isActive,
            })
                .from(schema_1.userOrganizations)
                .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.userOrganizations.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, testUserId));
            console.log('🔍 [TEST] User organizations in DB:', userOrgs);
            // Check what the user object looks like from the database
            const userFromDb = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.id, testUserId));
            console.log('🔍 [TEST] User from DB:', userFromDb[0]);
            (0, globals_1.expect)(userOrgs).toHaveLength(0); // Initially no organizations
        });
    });
    (0, globals_1.describe)('User Organization Relationship Issues', () => {
        (0, globals_1.it)('should identify why admin user has empty organizations array', async () => {
            // Check if the auth middleware is properly loading user organizations
            const response = await (0, supertest_1.default)(app)
                .get('/api/debug/user-info')
                .set('Cookie', sessionCookie);
            console.log('🔍 [TEST] User info response:', response.body);
            // This endpoint should show us what the auth middleware sees
            (0, globals_1.expect)(response.status).toBe(200);
        });
        (0, globals_1.it)('should verify database has buildings available', async () => {
            // Direct database query to verify buildings exist
            const allBuildings = await db_1.db
                .select({
                id: schema_1.buildings.id,
                name: schema_1.buildings.name,
                organizationId: schema_1.buildings.organizationId,
                organizationName: schema_1.organizations.name,
                isActive: schema_1.buildings.isActive,
            })
                .from(schema_1.buildings)
                .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true));
            console.log('🔍 [TEST] All buildings in DB:', allBuildings);
            (0, globals_1.expect)(allBuildings.length).toBeGreaterThan(0);
            (0, globals_1.expect)(allBuildings.some(b => b.organizationName === 'Koveo')).toBe(true);
        });
        (0, globals_1.it)('should test manager buildings endpoint for comparison', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/manager/buildings')
                .set('Cookie', sessionCookie);
            console.log('🔍 [TEST] Manager buildings response:', response.status, response.body);
            (0, globals_1.expect)(response.status).toBe(200);
            // This endpoint has different logic, let's see what it returns
        });
    });
    (0, globals_1.describe)('Fix Verification', () => {
        (0, globals_1.it)('should work after creating proper user organization relationship', async () => {
            // Create the missing relationship that should exist for Kevin's admin user
            await db_1.db.insert(schema_1.userOrganizations).values({
                userId: testUserId,
                organizationId: koveoOrgId,
                canAccessAllOrganizations: true,
                isActive: true,
            });
            // Test both endpoints
            const buildingsResponse = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('Cookie', sessionCookie);
            const managerBuildingsResponse = await (0, supertest_1.default)(app)
                .get('/api/manager/buildings')
                .set('Cookie', sessionCookie);
            console.log('🔍 [TEST] After fix - Buildings response:', buildingsResponse.body);
            console.log('🔍 [TEST] After fix - Manager buildings response:', managerBuildingsResponse.body);
            (0, globals_1.expect)(buildingsResponse.status).toBe(200);
            (0, globals_1.expect)(buildingsResponse.body.length).toBeGreaterThan(0);
            (0, globals_1.expect)(managerBuildingsResponse.status).toBe(200);
            (0, globals_1.expect)(managerBuildingsResponse.body.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,