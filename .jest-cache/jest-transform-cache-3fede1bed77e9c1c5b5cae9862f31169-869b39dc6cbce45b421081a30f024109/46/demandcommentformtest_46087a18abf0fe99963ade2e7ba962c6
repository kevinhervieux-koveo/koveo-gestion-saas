7c3e1725e0f46e44693faee48984c1dd
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock the hooks and utils
globals_1.jest.mock('@/hooks/use-language', () => ({
    useLanguage: () => ({
        t: (key) => key,
    }),
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({
        toast: globals_1.jest.fn(),
    }),
}));
/**
 * @file Demand Comment Form Frontend Tests
 * @description Tests for comment submission form components and validation
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
// Mock fetch with proper typing
const mockFetch = globals_1.jest.fn();
global.fetch = mockFetch;
// Mock queryClient
const createMockQueryClient = () => new react_query_1.QueryClient({
    defaultOptions: {
        queries: {
            retry: false,
        },
    },
});
// Mock data
const mockDemand = {
    id: 'demand-123',
    type: 'maintenance',
    description: 'Test demand',
    status: 'submitted',
    submitterId: 'user-123',
};
const mockUser = {
    id: 'user-123',
    role: 'resident',
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
};
const mockExistingComments = [
    {
        id: 'comment-1',
        demandId: 'demand-123',
        commentText: 'First comment on this demand',
        commenterId: 'user-123',
        isInternal: false,
        createdAt: '2023-01-01T10:00:00Z',
        author: {
            id: 'user-123',
            firstName: 'Test',
            lastName: 'User',
            email: 'test@example.com',
        },
    },
    {
        id: 'comment-2',
        demandId: 'demand-123',
        commentText: 'Second comment with more details',
        commenterId: 'user-456',
        isInternal: false,
        createdAt: '2023-01-01T11:00:00Z',
        author: {
            id: 'user-456',
            firstName: 'Other',
            lastName: 'User',
            email: 'other@example.com',
        },
    },
];
// Test component that includes comment functionality
const TestCommentForm = ({ demandId, onCommentAdded }) => {
    const [isSubmitting, setIsSubmitting] = react_1.default.useState(false);
    const [comments, setComments] = react_1.default.useState(mockExistingComments);
    const [commentText, setCommentText] = react_1.default.useState('');
    const [commentType, setCommentType] = react_1.default.useState('');
    const [isInternal, setIsInternal] = react_1.default.useState(false);
    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        try {
            const response = await fetch(`/api/demands/${demandId}/comments`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentText: commentText.trim(),
                    commentType: commentType || undefined,
                    isInternal,
                }),
            });
            if (!response.ok) {
                throw new Error('Failed to create comment');
            }
            const newComment = await response.json();
            setComments(prev => [...prev, newComment]);
            setCommentText('');
            setCommentType('');
            setIsInternal(false);
            onCommentAdded?.();
        }
        catch (error) {
            console.error('Comment submission error:', error);
        }
        finally {
            setIsSubmitting(false);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "comment-section", children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "comments-list", children: comments.map((comment) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": `comment-${comment.id}`, className: "comment", children: [(0, jsx_runtime_1.jsxs)("div", { "data-testid": `comment-author-${comment.id}`, children: [comment.author.firstName, " ", comment.author.lastName] }), (0, jsx_runtime_1.jsx)("div", { "data-testid": `comment-text-${comment.id}`, children: comment.commentText }), (0, jsx_runtime_1.jsx)("div", { "data-testid": `comment-date-${comment.id}`, children: comment.createdAt }), comment.isInternal && (0, jsx_runtime_1.jsx)("div", { "data-testid": `comment-internal-${comment.id}`, children: "Internal" })] }, comment.id))) }), (0, jsx_runtime_1.jsxs)("form", { "data-testid": "comment-form", onSubmit: handleSubmit, children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "commentText", children: "Comment" }), (0, jsx_runtime_1.jsx)("textarea", { "data-testid": "input-comment-text", id: "commentText", value: commentText, onChange: (e) => setCommentText(e.target.value), placeholder: "Add your comment here...", required: true, minLength: 1, maxLength: 1000, rows: 4 })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "commentType", children: "Comment Type (Optional)" }), (0, jsx_runtime_1.jsxs)("select", { "data-testid": "input-comment-type", id: "commentType", value: commentType, onChange: (e) => setCommentType(e.target.value), children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "Select Type" }), (0, jsx_runtime_1.jsx)("option", { value: "update", children: "Update" }), (0, jsx_runtime_1.jsx)("option", { value: "question", children: "Question" }), (0, jsx_runtime_1.jsx)("option", { value: "answer", children: "Answer" }), (0, jsx_runtime_1.jsx)("option", { value: "status_change", children: "Status Change" }), (0, jsx_runtime_1.jsx)("option", { value: "internal_note", children: "Internal Note" })] })] }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsxs)("label", { children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "input-is-internal", type: "checkbox", checked: isInternal, onChange: (e) => setIsInternal(e.target.checked) }), "Internal Comment (visible to staff only)"] }) }), (0, jsx_runtime_1.jsx)("button", { type: "submit", "data-testid": "button-submit-comment", disabled: isSubmitting || commentText.trim().length === 0, children: isSubmitting ? 'Adding Comment...' : 'Add Comment' })] })] }));
};
const TestWrapper = ({ children }) => {
    const queryClient = createMockQueryClient();
    return (0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: children });
};
(0, globals_1.describe)('Demand Comment Form Tests', () => {
    // Mock console.error to avoid test output pollution
    const originalConsoleError = console.error;
    (0, globals_1.beforeEach)(() => {
        mockFetch.mockClear();
        // Suppress console.error during tests
        console.error = globals_1.jest.fn();
    });
    afterAll(() => {
        // Restore console.error after tests
        console.error = originalConsoleError;
    });
    (0, globals_1.describe)('Comment Display', () => {
        (0, globals_1.it)('should display existing comments', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            (0, globals_1.expect)(react_2.screen.getByTestId('comments-list')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-comment-1')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-comment-2')).toBeInTheDocument();
            // Check comment content
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-text-comment-1')).toHaveTextContent('First comment on this demand');
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-text-comment-2')).toHaveTextContent('Second comment with more details');
            // Check author information
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-author-comment-1')).toHaveTextContent('Test User');
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-author-comment-2')).toHaveTextContent('Other User');
        });
        (0, globals_1.it)('should display comment timestamps', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-date-comment-1')).toHaveTextContent('2023-01-01T10:00:00Z');
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-date-comment-2')).toHaveTextContent('2023-01-01T11:00:00Z');
        });
    });
    (0, globals_1.describe)('Comment Form Rendering', () => {
        (0, globals_1.it)('should render all form fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            (0, globals_1.expect)(react_2.screen.getByTestId('comment-form')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('input-comment-text')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('input-comment-type')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('input-is-internal')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('button-submit-comment')).toBeInTheDocument();
        });
        (0, globals_1.it)('should render comment type options', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const typeSelect = react_2.screen.getByTestId('input-comment-type');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Update');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Question');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Answer');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Status Change');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Internal Note');
        });
        (0, globals_1.it)('should have proper form field attributes', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            (0, globals_1.expect)(textArea).toHaveAttribute('required');
            (0, globals_1.expect)(textArea).toHaveAttribute('minLength', '1');
            (0, globals_1.expect)(textArea).toHaveAttribute('maxLength', '1000');
            (0, globals_1.expect)(textArea).toHaveAttribute('rows', '4');
        });
    });
    (0, globals_1.describe)('Form Validation', () => {
        (0, globals_1.it)('should disable submit button when comment text is empty', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            (0, globals_1.expect)(submitButton).toBeDisabled();
        });
        (0, globals_1.it)('should enable submit button when comment text is provided', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'This is a valid comment');
            (0, globals_1.expect)(submitButton).not.toBeDisabled();
        });
        (0, globals_1.it)('should require comment text field', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            // Try to submit without text
            await user_event_1.default.click(submitButton);
            // Form validation should prevent submission
            (0, globals_1.expect)(mockFetch).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle minimum and maximum text length', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            // Test single character (minimum)
            await user_event_1.default.clear(textArea);
            await user_event_1.default.type(textArea, 'A');
            (0, globals_1.expect)(textArea).toHaveValue('A');
            // Test maximum length (1000 characters)
            const maxText = 'A'.repeat(1000);
            await user_event_1.default.clear(textArea);
            await user_event_1.default.type(textArea, maxText);
            (0, globals_1.expect)(textArea).toHaveValue(maxText);
        });
    });
    (0, globals_1.describe)('Form Submission', () => {
        (0, globals_1.it)('should submit comment successfully', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'comment-3',
                    demandId: 'demand-123',
                    commentText: 'New test comment',
                    commenterId: 'user-123',
                    isInternal: false,
                    createdAt: '2023-01-01T12:00:00Z',
                    author: {
                        id: 'user-123',
                        firstName: 'Test',
                        lastName: 'User',
                        email: 'test@example.com',
                    },
                }),
            });
            const onCommentAdded = globals_1.jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123", onCommentAdded: onCommentAdded }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'New test comment');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentText: 'New test comment',
                    commentType: undefined,
                    isInternal: false,
                }),
            });
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(onCommentAdded).toHaveBeenCalled();
            });
        });
        (0, globals_1.it)('should submit comment with optional fields', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'comment-3',
                    demandId: 'demand-123',
                    commentText: 'Internal update comment',
                    commentType: 'status_change',
                    commenterId: 'user-123',
                    isInternal: true,
                    createdAt: '2023-01-01T12:00:00Z',
                    author: {
                        id: 'user-123',
                        firstName: 'Test',
                        lastName: 'User',
                        email: 'test@example.com',
                    },
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const typeSelect = react_2.screen.getByTestId('input-comment-type');
            const internalCheckbox = react_2.screen.getByTestId('input-is-internal');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'Internal update comment');
            await user_event_1.default.selectOptions(typeSelect, 'status_change');
            await user_event_1.default.click(internalCheckbox);
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentText: 'Internal update comment',
                    commentType: 'status_change',
                    isInternal: true,
                }),
            });
        });
        (0, globals_1.it)('should show loading state during submission', async () => {
            mockFetch.mockImplementation(() => new Promise((resolve) => setTimeout(() => resolve({ ok: true, json: async () => ({}) }), 100)));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'Loading test comment');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(submitButton).toHaveTextContent('Adding Comment...');
            (0, globals_1.expect)(submitButton).toBeDisabled();
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(submitButton).toHaveTextContent('Add Comment');
                (0, globals_1.expect)(submitButton).toBeDisabled(); // Should be disabled because textarea is now empty
            });
        });
        (0, globals_1.it)('should clear form after successful submission', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'comment-3',
                    demandId: 'demand-123',
                    commentText: 'Test comment for clearing',
                    commenterId: 'user-123',
                    isInternal: false,
                    createdAt: '2023-01-01T12:00:00Z',
                    author: {
                        id: 'user-123',
                        firstName: 'Test',
                        lastName: 'User',
                        email: 'test@example.com',
                    },
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const typeSelect = react_2.screen.getByTestId('input-comment-type');
            const internalCheckbox = react_2.screen.getByTestId('input-is-internal');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            // Fill form
            await user_event_1.default.type(textArea, 'Test comment for clearing');
            await user_event_1.default.selectOptions(typeSelect, 'update');
            await user_event_1.default.click(internalCheckbox);
            await user_event_1.default.click(submitButton);
            // Wait for form to clear
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(textArea).toHaveValue('');
                (0, globals_1.expect)(typeSelect).toHaveValue('');
                (0, globals_1.expect)(internalCheckbox).not.toBeChecked();
            });
        });
        (0, globals_1.it)('should handle submission errors gracefully', async () => {
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'Error test comment');
            await user_event_1.default.click(submitButton);
            await (0, react_2.waitFor)(() => {
                // Form should still be visible with the text after error
                (0, globals_1.expect)(textArea).toHaveValue('Error test comment');
                (0, globals_1.expect)(submitButton).toHaveTextContent('Add Comment');
                (0, globals_1.expect)(submitButton).not.toBeDisabled();
            });
        });
        (0, globals_1.it)('should handle server validation errors', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 400,
                json: async () => ({ message: 'Comment text too long' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'Server error test comment');
            await user_event_1.default.click(submitButton);
            await (0, react_2.waitFor)(() => {
                // Form should remain with the text after server error
                (0, globals_1.expect)(textArea).toHaveValue('Server error test comment');
                (0, globals_1.expect)(submitButton).not.toBeDisabled();
            });
        });
    });
    (0, globals_1.describe)('Special Characters and Internationalization', () => {
        (0, globals_1.it)('should handle French characters in comments', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'comment-3',
                    demandId: 'demand-123',
                    commentText: 'Commentaire en français avec caractères spéciaux: éàùç!',
                    commenterId: 'user-123',
                    isInternal: false,
                    createdAt: '2023-01-01T12:00:00Z',
                    author: {
                        id: 'user-123',
                        firstName: 'Test',
                        lastName: 'User',
                        email: 'test@example.com',
                    },
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'Commentaire en français avec caractères spéciaux: éàùç!');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentText: 'Commentaire en français avec caractères spéciaux: éàùç!',
                    commentType: undefined,
                    isInternal: false,
                }),
            });
        });
        (0, globals_1.it)('should handle emojis and special symbols', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'comment-3',
                    demandId: 'demand-123',
                    commentText: 'Great work! 👍 Thanks @#$%^&*()',
                    commenterId: 'user-123',
                    isInternal: false,
                    createdAt: '2023-01-01T12:00:00Z',
                    author: {
                        id: 'user-123',
                        firstName: 'Test',
                        lastName: 'User',
                        email: 'test@example.com',
                    },
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, 'Great work! 👍 Thanks @#$%^&*()');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentText: 'Great work! 👍 Thanks @#$%^&*()',
                    commentType: undefined,
                    isInternal: false,
                }),
            });
        });
        (0, globals_1.it)('should handle multiline comments', async () => {
            const multilineText = `This is a multiline comment.

It has multiple paragraphs.

End of comment.`;
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'comment-3',
                    demandId: 'demand-123',
                    commentText: multilineText,
                    commenterId: 'user-123',
                    isInternal: false,
                    createdAt: '2023-01-01T12:00:00Z',
                    author: {
                        id: 'user-123',
                        firstName: 'Test',
                        lastName: 'User',
                        email: 'test@example.com',
                    },
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, multilineText);
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentText: multilineText,
                    commentType: undefined,
                    isInternal: false,
                }),
            });
        });
    });
    (0, globals_1.describe)('Form Behavior and UX', () => {
        (0, globals_1.it)('should trim whitespace from comment text before submission', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'comment-3',
                    demandId: 'demand-123',
                    commentText: 'Trimmed comment',
                    commenterId: 'user-123',
                    isInternal: false,
                    createdAt: '2023-01-01T12:00:00Z',
                    author: {
                        id: 'user-123',
                        firstName: 'Test',
                        lastName: 'User',
                        email: 'test@example.com',
                    },
                }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const textArea = react_2.screen.getByTestId('input-comment-text');
            const submitButton = react_2.screen.getByTestId('button-submit-comment');
            await user_event_1.default.type(textArea, '   Trimmed comment   ');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    commentText: 'Trimmed comment',
                    commentType: undefined,
                    isInternal: false,
                }),
            });
        });
        (0, globals_1.it)('should handle all comment types correctly', async () => {
            const commentTypes = ['update', 'question', 'answer', 'status_change', 'internal_note'];
            for (const type of commentTypes) {
                mockFetch.mockResolvedValueOnce({
                    ok: true,
                    json: async () => ({
                        id: `comment-${type}`,
                        demandId: 'demand-123',
                        commentText: `Comment of type ${type}`,
                        commentType: type,
                        commenterId: 'user-123',
                        isInternal: false,
                        createdAt: '2023-01-01T12:00:00Z',
                        author: {
                            id: 'user-123',
                            firstName: 'Test',
                            lastName: 'User',
                            email: 'test@example.com',
                        },
                    }),
                });
                (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
                const textArea = react_2.screen.getByTestId('input-comment-text');
                const typeSelect = react_2.screen.getByTestId('input-comment-type');
                const submitButton = react_2.screen.getByTestId('button-submit-comment');
                await user_event_1.default.type(textArea, `Comment of type ${type}`);
                await user_event_1.default.selectOptions(typeSelect, type);
                await user_event_1.default.click(submitButton);
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands/demand-123/comments', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        commentText: `Comment of type ${type}`,
                        commentType: type,
                        isInternal: false,
                    }),
                });
                mockFetch.mockClear();
            }
        });
        (0, globals_1.it)('should handle internal comment toggle correctly', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestCommentForm, { demandId: "demand-123" }) }));
            const internalCheckbox = react_2.screen.getByTestId('input-is-internal');
            // Initially unchecked
            (0, globals_1.expect)(internalCheckbox).not.toBeChecked();
            // Click to check
            await user_event_1.default.click(internalCheckbox);
            (0, globals_1.expect)(internalCheckbox).toBeChecked();
            // Click to uncheck
            await user_event_1.default.click(internalCheckbox);
            (0, globals_1.expect)(internalCheckbox).not.toBeChecked();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,