{"file":"/home/runner/workspace/server/optimized-db-storage.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/optimized-db-storage.ts"],"sourcesContent":["/**\n * Optimized database storage with caching and performance monitoring.\n * Replaces decorators with direct implementation for better compatibility.\n */\n\nimport { eq, desc, and, or, gte, lte, count, like, inArray } from 'drizzle-orm';\n// Use shared database connection to avoid multiple pools in production\nimport { db } from './db';\nimport crypto from 'crypto';\nimport * as schema from '@shared/schema';\nimport type {\n  User,\n  InsertUser,\n  Organization,\n  InsertOrganization,\n  Building,\n  InsertBuilding,\n  Residence,\n  InsertResidence,\n  Document,\n  InsertDocument,\n  InsertPillar,\n  Pillar as DevelopmentPillar,\n  WorkspaceStatus,\n  InsertWorkspaceStatus,\n  QualityMetric,\n  InsertQualityMetric,\n  FrameworkConfiguration,\n  InsertFrameworkConfiguration,\n  ImprovementSuggestion,\n  InsertImprovementSuggestion,\n  Feature,\n  InsertFeature,\n  ActionableItem,\n  InsertActionableItem,\n  Invitation,\n  InsertInvitation,\n  InvitationAuditLog,\n  InsertInvitationAuditLog,\n  Permission,\n  RolePermission,\n  UserPermission,\n  PasswordResetToken,\n  InsertPasswordResetToken,\n  Bug,\n  InsertBug,\n  Invoice,\n  InsertInvoice,\n} from '@shared/schema';\nimport type { IStorage } from './storage';\nimport type { Pillar } from '@shared/schema';\nimport { QueryOptimizer, PaginationHelper, type PaginationOptions } from './database-optimization';\nimport { queryCache, CacheInvalidator, withCache } from './query-cache';\nimport { dbPerformanceMonitor } from './performance-monitoring';\nimport { exists, sql as sqlOp } from 'drizzle-orm';\n\n// Database connection imported from shared db.ts\n\n/**\n * Enhanced database storage with built-in caching and performance monitoring.\n */\nexport class OptimizedDatabaseStorage implements IStorage {\n  /**\n   *\n   */\n  constructor() {\n    // Skip optimizations in test environment\n    if (\n      process.env.TEST_ENV !== 'integration' &&\n      !process.env.DISABLE_DB_OPTIMIZATIONS &&\n      process.env.NODE_ENV !== 'test' &&\n      !process.env.JEST_WORKER_ID\n    ) {\n      this.initializeOptimizations();\n    }\n  }\n\n  /**\n   * Initializes database optimizations.\n   */\n  private async initializeOptimizations(): Promise<void> {\n    // Skip database optimization during tests\n    if (\n      process.env.NODE_ENV === 'test' ||\n      process.env.JEST_WORKER_ID ||\n      process.env.SKIP_DB_OPTIMIZATION\n    ) {\n      // Database optimizations skipped in test environment\n      return;\n    }\n\n    try {\n      await QueryOptimizer.applyCoreOptimizations();\n      // Database optimizations applied\n    } catch (error: any) {\n      console.error('❌ Error initializing database optimizations:', error);\n    }\n  }\n\n  /**\n   * Wrapper for performance tracking and caching.\n   * @param operation\n   * @param cacheKey\n   * @param cacheType\n   * @param fn\n   */\n  private async withOptimizations<T>(\n    operation: string,\n    cacheKey: string | null,\n    cacheType: string,\n    fn: () => Promise<T>\n  ): Promise<T> {\n    // Try cache first\n    if (cacheKey) {\n      const cached = queryCache.get<T>(cacheType, cacheKey);\n      if (cached !== undefined) {\n        return cached;\n      }\n    }\n\n    // Execute with performance tracking\n    const result = await dbPerformanceMonitor.trackQuery(operation, fn);\n\n    // Cache result\n    if (cacheKey && result !== undefined) {\n      queryCache.set(cacheType, cacheKey, result);\n    }\n\n    return result;\n  }\n\n  // User operations with optimization\n\n  /**\n   * Retrieves all active users with caching and performance tracking.\n   */\n  async getUsers(): Promise<User[]> {\n    return this.withOptimizations('getUsers', 'all_users', 'users', () =>\n      db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.isActive, true))\n        .limit(100) // Always use LIMIT for large result sets\n        .orderBy(desc(schema.users.createdAt))\n    );\n  }\n\n  /**\n   * Retrieves all active users with their assignments (organizations, buildings, residences).\n   */\n  async getUsersWithAssignments(): Promise<Array<User & { organizations: Array<{ id: string; name: string; type: string }>; buildings: Array<{ id: string; name: string }>; residences: Array<{ id: string; unitNumber: string; buildingId: string; buildingName: string }> }>> {\n    // Clear any existing cache to ensure fresh data\n    queryCache.invalidate('users', 'all_users_assignments_v2');\n    queryCache.invalidate('users', 'all_users_assignments_v3');\n    \n    try {\n      // Get all users first\n      const users = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.isActive, true))\n        .limit(100)\n        .orderBy(desc(schema.users.createdAt));\n\n\n      // For each user, fetch their assignments with limited concurrency to prevent connection issues\n      const batchSize = 5; // Process 5 users at a time to avoid connection pool exhaustion\n      const usersWithAssignments = [];\n      \n      for (let i = 0; i < users.length; i += batchSize) {\n        const batch = users.slice(i, i + batchSize);\n        const batchResults = await Promise.all(\n          batch.map(async (user) => {\n          try {\n            // Get user organizations\n            const userOrgs = await db\n              .select({\n                id: schema.organizations.id,\n                name: schema.organizations.name,\n                type: schema.organizations.type,\n              })\n              .from(schema.userOrganizations)\n              .innerJoin(schema.organizations, eq(schema.userOrganizations.organizationId, schema.organizations.id))\n              .where(\n                and(\n                  eq(schema.userOrganizations.userId, user.id),\n                  eq(schema.userOrganizations.isActive, true),\n                  eq(schema.organizations.isActive, true)\n                )\n              );\n\n            // Get user buildings (through organization relationships)\n            const userBuildings = await db\n              .select({\n                id: schema.buildings.id,\n                name: schema.buildings.name,\n              })\n              .from(schema.userOrganizations)\n              .innerJoin(schema.buildings, eq(schema.userOrganizations.organizationId, schema.buildings.organizationId))\n              .where(\n                and(\n                  eq(schema.userOrganizations.userId, user.id),\n                  eq(schema.userOrganizations.isActive, true),\n                  eq(schema.buildings.isActive, true)\n                )\n              );\n\n            // Get user residences\n            const userResidences = await db\n              .select({\n                id: schema.residences.id,\n                unitNumber: schema.residences.unitNumber,\n                buildingId: schema.residences.buildingId,\n                buildingName: schema.buildings.name,\n              })\n              .from(schema.userResidences)\n              .innerJoin(schema.residences, eq(schema.userResidences.residenceId, schema.residences.id))\n              .innerJoin(schema.buildings, eq(schema.residences.buildingId, schema.buildings.id))\n              .where(\n                and(\n                  eq(schema.userResidences.userId, user.id),\n                  eq(schema.userResidences.isActive, true),\n                  eq(schema.residences.isActive, true)\n                )\n              );\n\n            const result = {\n              ...user,\n              organizations: userOrgs || [],\n              buildings: userBuildings || [],\n              residences: userResidences || [],\n            };\n\n\n            return result;\n          } catch (error: any) {\n            console.error('❌ Error getting user assignments:', error);\n            // Return user with empty assignments if there's an error\n            return {\n              ...user,\n              organizations: [],\n              buildings: [],\n              residences: [],\n            };\n          }\n        })\n      );\n      \n      usersWithAssignments.push(...batchResults);\n      }\n\n      return usersWithAssignments;\n    } catch (error: any) {\n      console.error('❌ Critical error getting users with assignments:', error);\n      // Return empty array on critical error\n      return [];\n    }\n  }\n\n  /**\n   * Retrieves users from organizations that a specific user has access to.\n   * @param userId\n   */\n  async getUsersByOrganizations(userId: string): Promise<User[]> {\n    return this.withOptimizations(\n      'getUsersByOrganizations',\n      `users_by_org:${userId}`,\n      'users',\n      async () => {\n        // First, get organization IDs that the user has access to\n        const userOrgs = await db\n          .select({ organizationId: schema.userOrganizations.organizationId })\n          .from(schema.userOrganizations)\n          .where(\n            and(\n              eq(schema.userOrganizations.userId, userId),\n              eq(schema.userOrganizations.isActive, true)\n            )\n          );\n\n        if (userOrgs.length === 0) {\n          return [];\n        }\n\n        const organizationIds = userOrgs.map((org) => org.organizationId);\n\n        // Then get all users from those organizations\n        return db\n          .select({\n            id: schema.users.id,\n            username: schema.users.username,\n            password: schema.users.password,\n            email: schema.users.email,\n            firstName: schema.users.firstName,\n            lastName: schema.users.lastName,\n            phone: schema.users.phone,\n            profileImage: schema.users.profileImage,\n            language: schema.users.language,\n            role: schema.users.role,\n            isActive: schema.users.isActive,\n            lastLoginAt: schema.users.lastLoginAt,\n            createdAt: schema.users.createdAt,\n            updatedAt: schema.users.updatedAt,\n          })\n          .from(schema.users)\n          .innerJoin(schema.userOrganizations, eq(schema.users.id, schema.userOrganizations.userId))\n          .where(\n            and(\n              eq(schema.users.isActive, true),\n              eq(schema.userOrganizations.isActive, true),\n              inArray(schema.userOrganizations.organizationId, organizationIds)\n            )\n          )\n          .orderBy(schema.users.firstName, schema.users.lastName);\n      }\n    );\n  }\n\n  /**\n   * Gets paginated users with optimized query structure.\n   * @param options\n   * @param _options\n   */\n  async getPaginatedUsers(_options: PaginationOptions): Promise<{ users: User[]; total: number }> {\n    PaginationHelper.validatePagination(_options);\n\n    const cacheKey = `paginated_users:${_options.page}:${_options.pageSize}:${_options.sortBy}:${_options.sortDirection}`;\n\n    // Try cache first\n    const cached = queryCache.get<{ users: User[]; total: number }>('users', cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    // Get total count using covering index\n    const [{ count: total }] = await db\n      .select({ count: count() })\n      .from(schema.users)\n      .where(eq(schema.users.isActive, true));\n\n    // Get paginated results with LIMIT and optimized ORDER BY\n    const users = await db\n      .select()\n      .from(schema.users)\n      .where(eq(schema.users.isActive, true))\n      .orderBy(\n        _options.sortDirection === 'DESC' ? desc(schema.users.createdAt) : schema.users.createdAt\n      )\n      .limit(_options.pageSize)\n      .offset((_options.page - 1) * _options.pageSize);\n\n    const result = { users, total };\n    queryCache.set('users', cacheKey, result);\n\n    return result;\n  }\n\n  /**\n   * Gets buildings with residents using EXISTS instead of IN subquery.\n   * @param organizationId\n   * @param limit\n   */\n  async getBuildingsWithResidents(organizationId: string, limit: number = 50): Promise<Building[]> {\n    const cacheKey = `buildings_with_residents:${organizationId}:${limit}`;\n\n    return this.withOptimizations(\n      'getBuildingsWithResidents',\n      cacheKey,\n      'buildings',\n      () =>\n        db\n          .select()\n          .from(schema.buildings)\n          .where(\n            and(\n              eq(schema.buildings.organizationId, organizationId),\n              eq(schema.buildings.isActive, true),\n              exists(\n                db\n                  .select()\n                  .from(schema.residences)\n                  .where(\n                    and(\n                      eq(schema.residences.buildingId, schema.buildings.id),\n                      eq(schema.residences.isActive, true)\n                    )\n                  )\n              )\n            )\n          )\n          .limit(limit) // Always use LIMIT for large result sets\n    );\n  }\n\n  /**\n   * Searches users with optimized covering index and LIMIT.\n   * @param query\n   * @param limit\n   */\n  async searchUsers(query: string, limit: number = 20): Promise<User[]> {\n    const cacheKey = `search_users:${query}:${limit}`;\n\n    return this.withOptimizations('searchUsers', cacheKey, 'users', () =>\n      db\n        .select()\n        .from(schema.users)\n        .where(\n          and(\n            eq(schema.users.isActive, true),\n            or(\n              like(schema.users.email, `%${query}%`),\n              like(schema.users.firstName, `%${query}%`),\n              like(schema.users.lastName, `%${query}%`)\n            )\n          )\n        )\n        .limit(limit) // Always limit search results\n        .orderBy(schema.users.lastName, schema.users.firstName)\n    );\n  }\n\n  /**\n   * Gets financial summary using materialized view for complex aggregations.\n   * @param buildingId\n   */\n  async getFinancialSummary(buildingId: string): Promise<any[]> {\n    const cacheKey = `financial_summary:${buildingId}`;\n\n    return this.withOptimizations('getFinancialSummary', cacheKey, 'financial', async () => {\n      // Use materialized view for complex aggregations\n      const summary = await db.execute(\n        sqlOp`SELECT * FROM mv_financial_summary WHERE building_id = ${buildingId} ORDER BY month DESC LIMIT 12`\n      );\n      return summary.rows;\n    });\n  }\n\n  /**\n   * Gets building statistics using materialized view.\n   * @param buildingId\n   */\n  async getBuildingStats(buildingId: string): Promise<any> {\n    const cacheKey = `building_stats:${buildingId}`;\n\n    return this.withOptimizations('getBuildingStats', cacheKey, 'buildings', async () => {\n      // Use materialized view for dashboard statistics\n      const stats = await db.execute(\n        sqlOp`SELECT * FROM mv_building_stats WHERE building_id = ${buildingId}`\n      );\n      return stats.rows[0];\n    });\n  }\n\n  /**\n   * Retrieves a specific user by ID with caching.\n   * @param id\n   */\n  async getUser(id: string): Promise<User | undefined> {\n    return this.withOptimizations('getUser', `user:${id}`, 'users', async () => {\n      \n      const result = await db.select().from(schema.users).where(eq(schema.users.id, id));\n      \n      if (result.length > 0) {\n        console.log(`🔍 Storage.getUser: Found user:`, {\n          id: result[0].id,\n          email: result[0].email,\n          role: result[0].role,\n        });\n      } else {\n        \n      }\n      return result[0];\n    });\n  }\n\n  /**\n   * Retrieves a user by email with caching.\n   * @param email\n   */\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.withOptimizations('getUserByEmail', `user_email:${email}`, 'users', async () => {\n      const result = await db.select().from(schema.users).where(eq(schema.users.email, email));\n      return result[0];\n    });\n  }\n\n  /**\n   * Creates a new user with cache invalidation.\n   * @param insertUser\n   */\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await dbPerformanceMonitor.trackQuery('createUser', async () => {\n      // Automatically set demo password for demo role users\n      let password = insertUser.password;\n      const isDemoRole = ['demo_manager', 'demo_tenant', 'demo_resident'].includes(insertUser.role);\n      \n      if (isDemoRole) {\n        // Always set the standard demo password hash for demo users, regardless of provided password\n        password = '$2b$12$cOc/QjMjzlhqAQqF2b/MTOZr2QAtERbXJGd4OSa1CXMlF04FC3F02'; // demo123456\n        console.log('🎭 Setting demo password for user with role:', insertUser.role);\n      }\n\n      // Ensure username uniqueness with random numbers if collision occurs\n      let uniqueUsername = insertUser.username;\n      let attempts = 0;\n      const maxAttempts = 10;\n      \n      // Check for username collision\n      let existingUser = await db\n        .select({ username: schema.users.username })\n        .from(schema.users)\n        .where(eq(schema.users.username, uniqueUsername))\n        .limit(1);\n\n      while (existingUser.length > 0 && attempts < maxAttempts) {\n        // Generate random 4-digit suffix\n        const randomSuffix = Math.floor(1000 + Math.random() * 9000);\n        uniqueUsername = `${insertUser.username}${randomSuffix}`;\n        attempts++;\n        \n        existingUser = await db\n          .select({ username: schema.users.username })\n          .from(schema.users)\n          .where(eq(schema.users.username, uniqueUsername))\n          .limit(1);\n      }\n\n      if (attempts >= maxAttempts && existingUser.length > 0) {\n        throw new Error('Unable to generate unique username after maximum attempts');\n      }\n\n      // Filter only the fields that exist in the database schema\n      const userData = {\n        username: uniqueUsername,\n        email: insertUser.email,\n        password,\n        firstName: insertUser.firstName,\n        lastName: insertUser.lastName,\n        phone: insertUser.phone || '',\n        profileImage: insertUser.profileImage,\n        language: insertUser.language || 'fr',\n        role: insertUser.role,\n        isActive: true, // Default value for new users\n      };\n\n\n      try {\n        const inserted = await db.insert(schema.users).values([userData]).returning();\n        \n        return inserted;\n      } catch (error: any) {\n        console.error('❌ Error creating user:', error);\n        throw error;\n      }\n    });\n\n    // Invalidate related caches\n    CacheInvalidator.invalidateUserCaches('*');\n\n    return result[0];\n  }\n\n  /**\n   * Updates a user with cache invalidation.\n   * @param id\n   * @param updates\n   */\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateUser', async () => {\n      return db\n        .update(schema.users)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(schema.users.id, id))\n        .returning();\n    });\n\n    // Invalidate specific user caches\n    CacheInvalidator.invalidateUserCaches(id);\n\n    return result[0];\n  }\n\n  /**\n   * Retrieves organizations for a specific user.\n   * @param userId\n   */\n  async getUserOrganizations(userId: string): Promise<Array<{ organizationId: string }>> {\n    return this.withOptimizations(\n      'getUserOrganizations',\n      `user_orgs:${userId}`,\n      'users',\n      async () => {\n        const result = await db\n          .select({\n            organizationId: schema.userOrganizations.organizationId,\n          })\n          .from(schema.userOrganizations)\n          .where(\n            and(\n              eq(schema.userOrganizations.userId, userId),\n              eq(schema.userOrganizations.isActive, true)\n            )\n          );\n        return result;\n      }\n    );\n  }\n\n  /**\n   * Retrieves residences for a specific user.\n   * @param userId\n   */\n  async getUserResidences(userId: string): Promise<Array<{ residenceId: string }>> {\n    return this.withOptimizations(\n      'getUserResidences',\n      `user_residences:${userId}`,\n      'residences',\n      async () => {\n        const result = await db\n          .select({\n            residenceId: schema.userResidences.residenceId,\n          })\n          .from(schema.userResidences)\n          .where(\n            and(eq(schema.userResidences.userId, userId), eq(schema.userResidences.isActive, true))\n          );\n        return result;\n      }\n    );\n  }\n\n  // Organization operations with optimization\n\n  /**\n   * Retrieves all active organizations with caching.\n   */\n  async getOrganizations(): Promise<Organization[]> {\n    return this.withOptimizations('getOrganizations', 'all_organizations', 'organizations', () =>\n      db.select().from(schema.organizations).where(eq(schema.organizations.isActive, true))\n    );\n  }\n\n  /**\n   * Retrieves an organization by ID with caching.\n   * @param id\n   */\n  async getOrganization(id: string): Promise<Organization | undefined> {\n    return this.withOptimizations(\n      'getOrganization',\n      `organization:${id}`,\n      'organizations',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.organizations)\n          .where(eq(schema.organizations.id, id));\n        return result[0];\n      }\n    );\n  }\n\n  /**\n   * Creates a new organization with cache invalidation.\n   * @param insertOrganization\n   */\n  async createOrganization(insertOrganization: InsertOrganization): Promise<Organization> {\n    const result = await dbPerformanceMonitor.trackQuery('createOrganization', async () => {\n      return db.insert(schema.organizations).values(insertOrganization).returning();\n    });\n\n    // Invalidate organization caches\n    queryCache.invalidate('organizations');\n\n    return result[0];\n  }\n\n  // Building operations with optimization\n\n  /**\n   * Retrieves buildings by organization with caching.\n   * @param organizationId\n   */\n  async getBuildingsByOrganization(organizationId: string): Promise<Building[]> {\n    return this.withOptimizations(\n      'getBuildingsByOrganization',\n      `org_buildings:${organizationId}`,\n      'buildings',\n      () =>\n        db\n          .select()\n          .from(schema.buildings)\n          .where(\n            and(\n              eq(schema.buildings.organizationId, organizationId),\n              eq(schema.buildings.isActive, true)\n            )\n          )\n    );\n  }\n\n  /**\n   * Retrieves a building by ID with caching.\n   * @param id\n   */\n  async getBuilding(id: string): Promise<Building | undefined> {\n    return this.withOptimizations('getBuilding', `building:${id}`, 'buildings', async () => {\n      const result = await db.select().from(schema.buildings).where(eq(schema.buildings.id, id));\n      return result[0];\n    });\n  }\n\n  /**\n   * Creates a new building with cache invalidation.\n   * @param insertBuilding\n   */\n  async createBuilding(insertBuilding: InsertBuilding): Promise<Building> {\n    const result = await dbPerformanceMonitor.trackQuery('createBuilding', async () => {\n      return db.insert(schema.buildings).values([insertBuilding]).returning();\n    });\n\n    // Invalidate building caches\n    CacheInvalidator.invalidateBuildingCaches('*');\n\n    return result[0];\n  }\n\n  // Residence operations with optimization\n\n  /**\n   * Retrieves residences by building with caching.\n   * @param buildingId\n   */\n  async getResidencesByBuilding(buildingId: string): Promise<Residence[]> {\n    return this.withOptimizations(\n      'getResidencesByBuilding',\n      `building_residences:${buildingId}`,\n      'residences',\n      () =>\n        db\n          .select()\n          .from(schema.residences)\n          .where(\n            and(eq(schema.residences.buildingId, buildingId), eq(schema.residences.isActive, true))\n          )\n          .orderBy(schema.residences.unitNumber)\n    );\n  }\n\n  /**\n   * Retrieves a residence by ID with caching.\n   * @param id\n   */\n  async getResidence(id: string): Promise<Residence | undefined> {\n    return this.withOptimizations('getResidence', `residence:${id}`, 'residences', async () => {\n      const result = await db.select().from(schema.residences).where(eq(schema.residences.id, id));\n      return result[0];\n    });\n  }\n\n  /**\n   * Creates a new residence with cache invalidation.\n   * @param insertResidence\n   */\n  async createResidence(insertResidence: InsertResidence): Promise<Residence> {\n    const result = await dbPerformanceMonitor.trackQuery('createResidence', async () => {\n      return db.insert(schema.residences).values([insertResidence]).returning();\n    });\n\n    // Invalidate residence caches\n    CacheInvalidator.invalidateResidenceCaches('*');\n\n    return result[0];\n  }\n\n  // Additional optimized methods for frequently accessed data\n\n  /**\n   * Gets user residences with full details - for complex residence views.\n   * @param userId\n   */\n  async getUserResidencesWithDetails(userId: string): Promise<any[]> {\n    return this.withOptimizations(\n      'getUserResidencesWithDetails',\n      `user_residences_details:${userId}`,\n      'residences',\n      () =>\n        db\n          .select({\n            residence: schema.residences,\n            building: schema.buildings,\n            userResidence: schema.userResidences,\n          })\n          .from(schema.userResidences)\n          .innerJoin(schema.residences, eq(schema.userResidences.residenceId, schema.residences.id))\n          .innerJoin(schema.buildings, eq(schema.residences.buildingId, schema.buildings.id))\n          .where(\n            and(eq(schema.userResidences.userId, userId), eq(schema.userResidences.isActive, true))\n          )\n    );\n  }\n\n  /**\n   * Gets active bills for a residence - frequently queried.\n   * @param residenceId\n   */\n  async getActiveBillsByResidence(residenceId: string): Promise<any[]> {\n    return this.withOptimizations(\n      'getActiveBillsByResidence',\n      `residence_bills:${residenceId}`,\n      'bills',\n      () =>\n        db\n          .select()\n          .from(schema.bills)\n          .where(\n            and(\n              eq(schema.bills.residenceId, residenceId),\n              or(eq(schema.bills.status, 'sent'), eq(schema.bills.status, 'overdue'))\n            )\n          )\n          .orderBy(desc(schema.bills.dueDate))\n    );\n  }\n\n  /**\n   * Gets maintenance requests for a residence - frequently accessed.\n   * @param residenceId\n   */\n  async getMaintenanceRequestsByResidence(residenceId: string): Promise<any[]> {\n    return this.withOptimizations(\n      'getMaintenanceRequestsByResidence',\n      `residence_maintenance:${residenceId}`,\n      'maintenance',\n      () =>\n        db\n          .select()\n          .from(schema.maintenanceRequests)\n          .where(eq(schema.maintenanceRequests.residenceId, residenceId))\n          .orderBy(desc(schema.maintenanceRequests.createdAt))\n    );\n  }\n\n  // Missing Organization operations\n\n  /**\n   * Gets organization by name with caching.\n   * @param name\n   */\n  async getOrganizationByName(name: string): Promise<Organization | undefined> {\n    return this.withOptimizations(\n      'getOrganizationByName',\n      `org_name:${name}`,\n      'organizations',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.organizations)\n          .where(eq(schema.organizations.name, name));\n        return result[0];\n      }\n    );\n  }\n\n  /**\n   * Updates organization with cache invalidation.\n   * @param id\n   * @param updates\n   */\n  async updateOrganization(\n    id: string,\n    updates: Partial<Organization>\n  ): Promise<Organization | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateOrganization', async () => {\n      return db\n        .update(schema.organizations)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(schema.organizations.id, id))\n        .returning();\n    });\n\n    CacheInvalidator.invalidateUserCaches('*');\n    return result[0];\n  }\n\n  // Missing Building operations\n\n  /**\n   * Gets all buildings with caching.\n   */\n  async getBuildings(): Promise<Building[]> {\n    return this.withOptimizations('getBuildings', 'all_buildings', 'buildings', () =>\n      db.select().from(schema.buildings).where(eq(schema.buildings.isActive, true))\n    );\n  }\n\n  /**\n   * Updates building with cache invalidation.\n   * @param id\n   * @param updates\n   */\n  async updateBuilding(id: string, updates: Partial<Building>): Promise<Building | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateBuilding', async () => {\n      return db\n        .update(schema.buildings)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(schema.buildings.id, id))\n        .returning();\n    });\n\n    CacheInvalidator.invalidateBuildingCaches(id);\n    return result[0];\n  }\n\n  /**\n   * Deletes building (soft delete).\n   * @param id\n   */\n  async deleteBuilding(id: string): Promise<boolean> {\n    const result = await dbPerformanceMonitor.trackQuery('deleteBuilding', async () => {\n      return db\n        .update(schema.buildings)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(eq(schema.buildings.id, id))\n        .returning();\n    });\n\n    CacheInvalidator.invalidateBuildingCaches(id);\n    return result.length > 0;\n  }\n\n  // Missing Residence operations\n\n  /**\n   * Gets all residences with caching.\n   */\n  async getResidences(): Promise<Residence[]> {\n    return this.withOptimizations('getResidences', 'all_residences', 'residences', () =>\n      db.select().from(schema.residences).where(eq(schema.residences.isActive, true))\n    );\n  }\n\n  /**\n   * Updates residence with cache invalidation.\n   * @param id\n   * @param updates\n   */\n  async updateResidence(id: string, updates: Partial<Residence>): Promise<Residence | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateResidence', async () => {\n      return db\n        .update(schema.residences)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(schema.residences.id, id))\n        .returning();\n    });\n\n    CacheInvalidator.invalidateResidenceCaches(id);\n    return result[0];\n  }\n\n  /**\n   * Deletes residence (soft delete).\n   * @param id\n   */\n  async deleteResidence(id: string): Promise<boolean> {\n    const result = await dbPerformanceMonitor.trackQuery('deleteResidence', async () => {\n      return db\n        .update(schema.residences)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(eq(schema.residences.id, id))\n        .returning();\n    });\n\n    CacheInvalidator.invalidateResidenceCaches(id);\n    return result.length > 0;\n  }\n\n  // Development Pillar operations\n\n  /**\n   * Gets all development pillars.\n   */\n  async getPillars(): Promise<DevelopmentPillar[]> {\n    return this.withOptimizations('getPillars', 'all_pillars', 'pillars', () =>\n      db.select().from(schema.developmentPillars)\n    );\n  }\n\n  /**\n   * Gets development pillar by ID.\n   * @param id\n   */\n  async getPillar(id: string): Promise<DevelopmentPillar | undefined> {\n    return this.withOptimizations('getPillar', `pillar:${id}`, 'pillars', async () => {\n      const result = await db\n        .select()\n        .from(schema.developmentPillars)\n        .where(eq(schema.developmentPillars.id, id));\n      return result[0];\n    });\n  }\n\n  /**\n   * Creates development pillar.\n   * @param pillar\n   */\n  async createPillar(pillar: InsertPillar): Promise<DevelopmentPillar> {\n    const result = await dbPerformanceMonitor.trackQuery('createPillar', async () => {\n      return db.insert(schema.developmentPillars).values(pillar).returning();\n    });\n\n    queryCache.invalidate('pillars');\n    return result[0];\n  }\n\n  /**\n   * Updates development pillar.\n   * @param id\n   * @param pillar\n   */\n  async updatePillar(\n    id: string,\n    pillar: Partial<DevelopmentPillar>\n  ): Promise<DevelopmentPillar | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updatePillar', async () => {\n      return db\n        .update(schema.developmentPillars)\n        .set({ ...pillar, updatedAt: new Date() })\n        .where(eq(schema.developmentPillars.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('pillars');\n    return result[0];\n  }\n\n  // Workspace Status operations\n\n  /**\n   * Gets all workspace statuses.\n   */\n  async getWorkspaceStatuses(): Promise<WorkspaceStatus[]> {\n    return this.withOptimizations(\n      'getWorkspaceStatuses',\n      'all_workspace_statuses',\n      'workspace_status',\n      () => db.select().from(schema.workspaceStatus)\n    );\n  }\n\n  /**\n   * Gets workspace status by component.\n   * @param component\n   */\n  async getWorkspaceStatus(component: string): Promise<WorkspaceStatus | undefined> {\n    return this.withOptimizations(\n      'getWorkspaceStatus',\n      `workspace_status:${component}`,\n      'workspace_status',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.workspaceStatus)\n          .where(eq(schema.workspaceStatus.component, component));\n        return result[0];\n      }\n    );\n  }\n\n  /**\n   * Creates workspace status.\n   * @param status\n   */\n  async createWorkspaceStatus(status: InsertWorkspaceStatus): Promise<WorkspaceStatus> {\n    const result = await dbPerformanceMonitor.trackQuery('createWorkspaceStatus', async () => {\n      return db.insert(schema.workspaceStatus).values(status).returning();\n    });\n\n    queryCache.invalidate('workspace_status');\n    return result[0];\n  }\n\n  /**\n   * Updates workspace status.\n   * @param component\n   * @param status\n   */\n  async updateWorkspaceStatus(\n    component: string,\n    status: string\n  ): Promise<WorkspaceStatus | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateWorkspaceStatus', async () => {\n      return db\n        .update(schema.workspaceStatus)\n        .set({ status })\n        .where(eq(schema.workspaceStatus.component, component))\n        .returning();\n    });\n\n    queryCache.invalidate('workspace_status');\n    return result[0];\n  }\n\n  // Quality Metrics operations\n\n  /**\n   * Gets all quality metrics.\n   */\n  async getQualityMetrics(): Promise<QualityMetric[]> {\n    return this.withOptimizations(\n      'getQualityMetrics',\n      'all_quality_metrics',\n      'quality_metrics',\n      () => db.select().from(schema.qualityMetrics)\n    );\n  }\n\n  /**\n   * Creates quality metric.\n   * @param metric\n   */\n  async createQualityMetric(metric: InsertQualityMetric): Promise<QualityMetric> {\n    const result = await dbPerformanceMonitor.trackQuery('createQualityMetric', async () => {\n      return db.insert(schema.qualityMetrics).values(metric).returning();\n    });\n\n    queryCache.invalidate('quality_metrics');\n    return result[0];\n  }\n\n  // Framework Configuration operations\n\n  /**\n   * Gets all framework configurations.\n   */\n  async getFrameworkConfigs(): Promise<FrameworkConfiguration[]> {\n    return this.withOptimizations(\n      'getFrameworkConfigs',\n      'all_framework_configs',\n      'framework_configs',\n      () => db.select().from(schema.frameworkConfiguration)\n    );\n  }\n\n  /**\n   * Gets framework config by key.\n   * @param key\n   * @param _key\n   */\n  async getFrameworkConfig(_key: string): Promise<FrameworkConfiguration | undefined> {\n    return this.withOptimizations(\n      'getFrameworkConfig',\n      `framework_config:${_key}`,\n      'framework_configs',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.frameworkConfiguration)\n          .where(eq(schema.frameworkConfiguration._key, _key));\n        return result[0];\n      }\n    );\n  }\n\n  /**\n   * Sets framework configuration.\n   * @param config\n   */\n  async setFrameworkConfig(config: InsertFrameworkConfiguration): Promise<FrameworkConfiguration> {\n    const result = await dbPerformanceMonitor.trackQuery('setFrameworkConfig', async () => {\n      return db\n        .insert(schema.frameworkConfiguration)\n        .values(config)\n        .onConflictDoUpdate({\n          target: schema.frameworkConfiguration._key,\n          set: { _value: config._value, updatedAt: new Date() },\n        })\n        .returning();\n    });\n\n    queryCache.invalidate('framework_configs');\n    return result[0];\n  }\n\n  // Improvement Suggestions operations\n\n  /**\n   * Gets all improvement suggestions.\n   */\n  async getImprovementSuggestions(): Promise<ImprovementSuggestion[]> {\n    return this.withOptimizations(\n      'getImprovementSuggestions',\n      'all_improvement_suggestions',\n      'improvement_suggestions',\n      () => db.select().from(schema.improvementSuggestions)\n    );\n  }\n\n  /**\n   * Gets top improvement suggestions.\n   * @param limit\n   */\n  async getTopImprovementSuggestions(limit: number): Promise<ImprovementSuggestion[]> {\n    return this.withOptimizations(\n      'getTopImprovementSuggestions',\n      `top_suggestions:${limit}`,\n      'improvement_suggestions',\n      () =>\n        db\n          .select()\n          .from(schema.improvementSuggestions)\n          .orderBy(\n            desc(schema.improvementSuggestions.priority),\n            desc(schema.improvementSuggestions.createdAt)\n          )\n          .limit(limit)\n    );\n  }\n\n  /**\n   * Creates improvement suggestion.\n   * @param suggestion\n   */\n  async createImprovementSuggestion(\n    suggestion: InsertImprovementSuggestion\n  ): Promise<ImprovementSuggestion> {\n    const result = await dbPerformanceMonitor.trackQuery(\n      'createImprovementSuggestion',\n      async () => {\n        return db\n          .insert(schema.improvementSuggestions)\n          .values([\n            {\n              ...suggestion,\n              category: suggestion.category as\n                | 'Code Quality'\n                | 'Security'\n                | 'Testing'\n                | 'Documentation'\n                | 'Performance'\n                | 'Continuous Improvement'\n                | 'Replit AI Agent Monitoring'\n                | 'Replit App',\n            },\n          ])\n          .returning();\n      }\n    );\n\n    queryCache.invalidate('improvement_suggestions');\n    return result[0];\n  }\n\n  /**\n   * Clears new suggestions.\n   */\n  async clearNewSuggestions(): Promise<void> {\n    await dbPerformanceMonitor.trackQuery('clearNewSuggestions', async () => {\n      return db\n        .update(schema.improvementSuggestions)\n        .set({ status: 'Acknowledged' })\n        .where(eq(schema.improvementSuggestions.status, 'New'));\n    });\n\n    queryCache.invalidate('improvement_suggestions');\n  }\n\n  /**\n   * Updates suggestion status.\n   * @param id\n   * @param status\n   */\n  async updateSuggestionStatus(\n    id: string,\n    status: 'New' | 'Acknowledged' | 'Done'\n  ): Promise<ImprovementSuggestion | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateSuggestionStatus', async () => {\n      return db\n        .update(schema.improvementSuggestions)\n        .set({ status })\n        .where(eq(schema.improvementSuggestions.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('improvement_suggestions');\n    return result[0];\n  }\n\n  // Features operations\n\n  /**\n   * Gets all features.\n   */\n  async getFeatures(): Promise<Feature[]> {\n    return this.withOptimizations('getFeatures', 'all_features', 'features', () =>\n      db.select().from(schema.features)\n    );\n  }\n\n  /**\n   * Gets features by status.\n   * @param status\n   */\n  async getFeaturesByStatus(\n    status: 'completed' | 'in-progress' | 'planned' | 'cancelled' | 'requested'\n  ): Promise<Feature[]> {\n    return this.withOptimizations(\n      'getFeaturesByStatus',\n      `features_status:${status}`,\n      'features',\n      () =>\n        db\n          .select()\n          .from(schema.features)\n          .where(eq(schema.features.status, status as any))\n    );\n  }\n\n  /**\n   * Gets features by category.\n   * @param category\n   */\n  async getFeaturesByCategory(category: string): Promise<Feature[]> {\n    return this.withOptimizations(\n      'getFeaturesByCategory',\n      `features_category:${category}`,\n      'features',\n      () =>\n        db\n          .select()\n          .from(schema.features)\n          .where(eq(schema.features.category, category as any))\n    );\n  }\n\n  /**\n   * Gets public roadmap features.\n   */\n  async getPublicRoadmapFeatures(): Promise<Feature[]> {\n    return this.withOptimizations(\n      'getPublicRoadmapFeatures',\n      'public_roadmap_features',\n      'features',\n      () => db.select().from(schema.features).where(eq(schema.features.isPublicRoadmap, true))\n    );\n  }\n\n  /**\n   * Creates feature.\n   * @param feature\n   */\n  async createFeature(feature: InsertFeature): Promise<Feature> {\n    const result = await dbPerformanceMonitor.trackQuery('createFeature', async () => {\n      return db.insert(schema.features).values([feature]).returning();\n    });\n\n    queryCache.invalidate('features');\n    return result[0];\n  }\n\n  /**\n   * Updates feature.\n   * @param id\n   * @param updates\n   */\n  async updateFeature(id: string, updates: Partial<InsertFeature>): Promise<Feature | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateFeature', async () => {\n      return db\n        .update(schema.features)\n        .set(updates as any)\n        .where(eq(schema.features.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('features');\n    return result[0];\n  }\n\n  /**\n   * Deletes feature.\n   * @param id\n   */\n  async deleteFeature(id: string): Promise<boolean> {\n    const result = await dbPerformanceMonitor.trackQuery('deleteFeature', async () => {\n      return db.delete(schema.features).where(eq(schema.features.id, id)).returning();\n    });\n\n    queryCache.invalidate('features');\n    return result.length > 0;\n  }\n\n  // Actionable Items operations\n\n  /**\n   * Gets actionable items by feature.\n   * @param featureId\n   */\n  async getActionableItemsByFeature(featureId: string): Promise<ActionableItem[]> {\n    return this.withOptimizations(\n      'getActionableItemsByFeature',\n      `actionable_items:${featureId}`,\n      'actionable_items',\n      () =>\n        db\n          .select()\n          .from(schema.actionableItems)\n          .where(eq(schema.actionableItems.featureId, featureId))\n    );\n  }\n\n  /**\n   * Gets actionable item by ID.\n   * @param id\n   */\n  async getActionableItem(id: string): Promise<ActionableItem | undefined> {\n    return this.withOptimizations(\n      'getActionableItem',\n      `actionable_item:${id}`,\n      'actionable_items',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.actionableItems)\n          .where(eq(schema.actionableItems.id, id));\n        return result[0];\n      }\n    );\n  }\n\n  /**\n   * Creates actionable item.\n   * @param item\n   */\n  async createActionableItem(item: InsertActionableItem): Promise<ActionableItem> {\n    const result = await dbPerformanceMonitor.trackQuery('createActionableItem', async () => {\n      return db.insert(schema.actionableItems).values([item]).returning();\n    });\n\n    queryCache.invalidate('actionable_items');\n    return result[0];\n  }\n\n  /**\n   * Creates multiple actionable items.\n   * @param items\n   */\n  async createActionableItems(items: InsertActionableItem[]): Promise<ActionableItem[]> {\n    const result = await dbPerformanceMonitor.trackQuery('createActionableItems', async () => {\n      return db.insert(schema.actionableItems).values(items).returning();\n    });\n\n    queryCache.invalidate('actionable_items');\n    return result;\n  }\n\n  /**\n   * Updates actionable item.\n   * @param id\n   * @param updates\n   */\n  async updateActionableItem(\n    id: string,\n    updates: Partial<ActionableItem>\n  ): Promise<ActionableItem | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateActionableItem', async () => {\n      return db\n        .update(schema.actionableItems)\n        .set(updates as any)\n        .where(eq(schema.actionableItems.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('actionable_items');\n    return result[0];\n  }\n\n  /**\n   * Deletes actionable item.\n   * @param id\n   */\n  async deleteActionableItem(id: string): Promise<boolean> {\n    const result = await dbPerformanceMonitor.trackQuery('deleteActionableItem', async () => {\n      return db.delete(schema.actionableItems).where(eq(schema.actionableItems.id, id)).returning();\n    });\n\n    queryCache.invalidate('actionable_items');\n    return result.length > 0;\n  }\n\n  /**\n   * Deletes actionable items by feature.\n   * @param featureId\n   */\n  async deleteActionableItemsByFeature(featureId: string): Promise<boolean> {\n    const result = await dbPerformanceMonitor.trackQuery(\n      'deleteActionableItemsByFeature',\n      async () => {\n        return db\n          .delete(schema.actionableItems)\n          .where(eq(schema.actionableItems.featureId, featureId))\n          .returning();\n      }\n    );\n\n    queryCache.invalidate('actionable_items');\n    return result.length > 0;\n  }\n\n  // Invitation operations\n\n  /**\n   * Gets all invitations.\n   */\n  async getInvitations(): Promise<Invitation[]> {\n    return this.withOptimizations('getInvitations', 'all_invitations', 'invitations', () =>\n      db.select().from(schema.invitations)\n    );\n  }\n\n  /**\n   * Gets invitation by ID.\n   * @param id\n   */\n  async getInvitation(id: string): Promise<Invitation | undefined> {\n    return this.withOptimizations('getInvitation', `invitation:${id}`, 'invitations', async () => {\n      const result = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.id, id));\n      return result[0];\n    });\n  }\n\n  /**\n   * Gets invitation by token.\n   * @param token\n   */\n  async getInvitationByToken(token: string): Promise<Invitation | undefined> {\n    return this.withOptimizations(\n      'getInvitationByToken',\n      `invitation_token:${token}`,\n      'invitations',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.invitations)\n          .where(eq(schema.invitations.token, token));\n        return result[0];\n      }\n    );\n  }\n\n  /**\n   * Gets invitations by email.\n   * @param email\n   */\n  async getInvitationsByEmail(email: string): Promise<Invitation[]> {\n    return this.withOptimizations(\n      'getInvitationsByEmail',\n      `invitations_email:${email}`,\n      'invitations',\n      () => db.select().from(schema.invitations).where(eq(schema.invitations.email, email))\n    );\n  }\n\n  /**\n   * Gets invitations by inviter.\n   * @param userId\n   */\n  async getInvitationsByInviter(userId: string): Promise<Invitation[]> {\n    return this.withOptimizations(\n      'getInvitationsByInviter',\n      `invitations_inviter:${userId}`,\n      'invitations',\n      () =>\n        db.select().from(schema.invitations).where(eq(schema.invitations.invitedByUserId, userId))\n    );\n  }\n\n  /**\n   * Gets invitations by status.\n   * @param status\n   */\n  async getInvitationsByStatus(\n    status: 'pending' | 'accepted' | 'expired' | 'cancelled'\n  ): Promise<Invitation[]> {\n    return this.withOptimizations(\n      'getInvitationsByStatus',\n      `invitations_status:${status}`,\n      'invitations',\n      () => db.select().from(schema.invitations).where(eq(schema.invitations.status, status))\n    );\n  }\n\n  /**\n   * Creates invitation.\n   * @param invitation\n   */\n  async createInvitation(invitation: InsertInvitation): Promise<Invitation> {\n    const result = await dbPerformanceMonitor.trackQuery('createInvitation', async () => {\n      return db.insert(schema.invitations).values([invitation]).returning();\n    });\n\n    queryCache.invalidate('invitations');\n    return result[0];\n  }\n\n  /**\n   * Updates invitation.\n   * @param id\n   * @param updates\n   */\n  async updateInvitation(\n    id: string,\n    updates: Partial<Invitation>\n  ): Promise<Invitation | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateInvitation', async () => {\n      return db\n        .update(schema.invitations)\n        .set(updates as any)\n        .where(eq(schema.invitations.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('invitations');\n    return result[0];\n  }\n\n  /**\n   * Accepts invitation.\n   * @param token\n   * @param userData\n   * @param userData.firstName\n   * @param ipAddress\n   * @param userData.lastName\n   * @param userAgent\n   * @param userData.password\n   */\n  async acceptInvitation(\n    token: string,\n    userData: { firstName: string; lastName: string; password: string },\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<{ user: User; invitation: Invitation } | null> {\n    return dbPerformanceMonitor.trackQuery('acceptInvitation', async () => {\n      const invitation = await this.getInvitationByToken(token);\n      if (!invitation || invitation.status !== 'pending') {\n        return null;\n      }\n\n      // Create user with required fields\n      const user = await this.createUser({\n        username: invitation.email.split('@')[0], // Use email prefix as username\n        email: invitation.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        password: userData.password, // This should be hashed\n        language: 'en', // Default language\n        role: invitation.role,\n      });\n\n      // Update invitation\n      const updatedInvitation = await this.updateInvitation(invitation.id, {\n        status: 'accepted',\n        acceptedAt: new Date(),\n      });\n\n      return { user, invitation: updatedInvitation! };\n    });\n  }\n\n  /**\n   * Cancels invitation.\n   * @param id\n   * @param cancelledBy\n   */\n  async cancelInvitation(id: string, cancelledBy: string): Promise<Invitation | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('cancelInvitation', async () => {\n      return db\n        .update(schema.invitations)\n        .set({\n          status: 'cancelled',\n          cancelledBy,\n          cancelledAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.invitations.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('invitations');\n    return result[0];\n  }\n\n  /**\n   * Expires old invitations.\n   */\n  async expireInvitations(): Promise<number> {\n    const result = await dbPerformanceMonitor.trackQuery('expireInvitations', async () => {\n      return db\n        .update(schema.invitations)\n        .set({ status: 'expired', updatedAt: new Date() })\n        .where(\n          and(\n            eq(schema.invitations.status, 'pending'),\n            lte(schema.invitations.expiresAt, new Date())\n          )\n        )\n        .returning();\n    });\n\n    queryCache.invalidate('invitations');\n    return result.length;\n  }\n\n  /**\n   * Deletes invitation.\n   * @param id\n   */\n  async deleteInvitation(id: string): Promise<boolean> {\n    const result = await dbPerformanceMonitor.trackQuery('deleteInvitation', async () => {\n      return db.delete(schema.invitations).where(eq(schema.invitations.id, id)).returning();\n    });\n\n    queryCache.invalidate('invitations');\n    return result.length > 0;\n  }\n\n  // Invitation Audit Log operations\n\n  /**\n   * Gets invitation audit logs.\n   * @param invitationId\n   */\n  async getInvitationAuditLogs(invitationId: string): Promise<InvitationAuditLog[]> {\n    return this.withOptimizations(\n      'getInvitationAuditLogs',\n      `invitation_logs:${invitationId}`,\n      'invitation_logs',\n      () =>\n        db\n          .select()\n          .from(schema.invitationAuditLog)\n          .where(eq(schema.invitationAuditLog.invitationId, invitationId))\n          .orderBy(desc(schema.invitationAuditLog.createdAt))\n    );\n  }\n\n  /**\n   * Creates invitation audit log.\n   * @param logEntry\n   */\n  async createInvitationAuditLog(logEntry: InsertInvitationAuditLog): Promise<InvitationAuditLog> {\n    const result = await dbPerformanceMonitor.trackQuery('createInvitationAuditLog', async () => {\n      return db.insert(schema.invitationAuditLog).values(logEntry).returning();\n    });\n\n    queryCache.invalidate('invitation_logs');\n    return result[0];\n  }\n\n  // Permission operations\n\n  /**\n   * Gets all permissions.\n   */\n  async getPermissions(): Promise<Permission[]> {\n    return this.withOptimizations('getPermissions', 'permissions:all', 'permissions', () =>\n      db\n        .select()\n        .from(schema.permissions)\n        .where(eq(schema.permissions.isActive, true))\n        .orderBy(schema.permissions.resourceType, schema.permissions.action)\n    );\n  }\n\n  /**\n   * Gets all role permissions.\n   */\n  async getRolePermissions(): Promise<RolePermission[]> {\n    return this.withOptimizations(\n      'getRolePermissions',\n      'role_permissions:all',\n      'role_permissions',\n      () =>\n        db\n          .select()\n          .from(schema.rolePermissions)\n          .innerJoin(\n            schema.permissions,\n            eq(schema.rolePermissions.permissionId, schema.permissions.id)\n          )\n          .where(eq(schema.permissions.isActive, true))\n          .orderBy(schema.rolePermissions.role, schema.permissions.resourceType)\n    );\n  }\n\n  /**\n   * Gets all user permissions.\n   */\n  async getUserPermissions(): Promise<UserPermission[]> {\n    try {\n      const results = await db\n        .select()\n        .from(schema.userPermissions)\n        .innerJoin(\n          schema.permissions,\n          eq(schema.userPermissions.permissionId, schema.permissions.id)\n        )\n        .where(eq(schema.permissions.isActive, true))\n        .orderBy(schema.userPermissions.userId);\n\n      return results || [];\n    } catch (error: any) {\n      console.error('❌ Error getting user permissions:', error);\n      return [];\n    }\n  }\n\n  // Old building document methods removed - using unified documents table\n\n  // Unified Document operations\n  async getDocuments(filters?: {\n    buildingId?: string;\n    residenceId?: string;\n    documentType?: string;\n    userId?: string;\n    userRole?: string;\n  }): Promise<Document[]> {\n    return this.withOptimizations(\n      'getDocuments',\n      `documents:${JSON.stringify(filters)}`,\n      'documents',\n      async () => {\n        let query = db.select().from(schema.documents);\n\n        const conditions = [];\n        if (filters?.buildingId) {\n          conditions.push(eq(schema.documents.buildingId, filters.buildingId));\n        }\n        if (filters?.residenceId) {\n          conditions.push(eq(schema.documents.residenceId, filters.residenceId));\n        }\n        if (filters?.documentType) {\n          conditions.push(eq(schema.documents.documentType, filters.documentType));\n        }\n\n        if (conditions.length > 0) {\n          query = query.where(and(...conditions));\n        }\n\n        const result = await query.orderBy(desc(schema.documents.createdAt));\n        return result || [];\n      }\n    );\n  }\n\n  async getDocument(id: string): Promise<Document | undefined> {\n    return this.withOptimizations('getDocument', `document:${id}`, 'documents', async () => {\n      const result = await db\n        .select()\n        .from(schema.documents)\n        .where(eq(schema.documents.id, id))\n        .limit(1);\n      return result[0];\n    });\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    return dbPerformanceMonitor.trackQuery('createDocument', async () => {\n      \n      const result = await db.insert(schema.documents).values(document).returning();\n      \n\n      // Invalidate related caches\n      if (document.buildingId) {\n        queryCache.invalidate('documents', `*buildingId*${document.buildingId}*`);\n      }\n      if (document.residenceId) {\n        queryCache.invalidate('documents', `*residenceId*${document.residenceId}*`);\n      }\n\n      return result[0];\n    });\n  }\n\n  async updateDocument(id: string, updates: Partial<Document>): Promise<Document | undefined> {\n    return dbPerformanceMonitor.trackQuery('updateDocument', async () => {\n      const result = await db\n        .update(schema.documents)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(schema.documents.id, id))\n        .returning();\n\n      if (result[0]) {\n        // Invalidate caches\n        queryCache.invalidate('documents', `document:${id}`);\n        queryCache.invalidate('documents', '*');\n      }\n\n      return result[0];\n    });\n  }\n\n  async deleteDocument(id: string): Promise<boolean> {\n    return dbPerformanceMonitor.trackQuery('deleteDocument', async () => {\n      const result = await db\n        .delete(schema.documents)\n        .where(eq(schema.documents.id, id))\n        .returning({ id: schema.documents.id });\n\n      if (result.length > 0) {\n        // Invalidate caches\n        queryCache.invalidate('documents', `document:${id}`);\n        queryCache.invalidate('documents', '*');\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  // Old resident document methods removed - using unified documents table\n\n  // Legacy Document operations (kept for migration purposes)\n\n  /**\n   * Gets legacy documents for user.\n   * @param userId\n   * @param userRole\n   * @param organizationId\n   * @param residenceIds\n   */\n  async getDocumentsForUser(\n    userId: string,\n    userRole: string,\n    organizationId?: string,\n    residenceIds?: string[]\n  ): Promise<Document[]> {\n    return this.withOptimizations(\n      'getDocumentsForUser',\n      `legacy_docs:${userId}:${userRole}`,\n      'documents',\n      async () => {\n        return await db.select().from(schema.documents).orderBy(desc(schema.documents.createdAt));\n      }\n    );\n  }\n\n  // Password reset operations\n  /**\n   *\n   * @param token\n   */\n  async createPasswordResetToken(token: InsertPasswordResetToken): Promise<PasswordResetToken> {\n    const result = await db.insert(schema.passwordResetTokens).values(token).returning();\n\n    // Token created successfully\n\n    return result[0];\n  }\n\n  /**\n   *\n   * @param tokenValue\n   */\n  async getPasswordResetToken(tokenValue: string): Promise<PasswordResetToken | undefined> {\n    return this.withOptimizations(\n      'getPasswordResetToken',\n      `token_${tokenValue}`,\n      'password_reset_tokens',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.passwordResetTokens)\n          .where(eq(schema.passwordResetTokens.token, tokenValue))\n          .limit(1);\n        return result[0];\n      }\n    );\n  }\n\n  /**\n   *\n   * @param tokenId\n   */\n  async markPasswordResetTokenAsUsed(tokenId: string): Promise<PasswordResetToken | undefined> {\n    const result = await db\n      .update(schema.passwordResetTokens)\n      .set({\n        isUsed: true,\n        usedAt: new Date(),\n      })\n      .where(eq(schema.passwordResetTokens.id, tokenId))\n      .returning();\n\n    // Token marked as used\n\n    return result[0];\n  }\n\n  /**\n   *\n   */\n  async cleanupExpiredPasswordResetTokens(): Promise<number> {\n    const result = await db\n      .delete(schema.passwordResetTokens)\n      .where(lte(schema.passwordResetTokens.expiresAt, new Date()))\n      .returning();\n\n    // Expired tokens cleaned up\n\n    return result.length;\n  }\n\n  // Contact operations\n  /**\n   * Gets all contacts.\n   */\n  async getContacts(): Promise<Contact[]> {\n    return this.withOptimizations('getContacts', 'all_contacts', 'contacts', () =>\n      db.select().from(schema.contacts).where(eq(schema.contacts.isActive, true))\n    );\n  }\n\n  /**\n   * Gets contacts by entity.\n   * @param entityId\n   * @param entity\n   */\n  async getContactsByEntity(\n    entityId: string,\n    entity: 'organization' | 'building' | 'residence'\n  ): Promise<Contact[]> {\n    return this.withOptimizations(\n      'getContactsByEntity',\n      `contacts_entity:${entity}_${entityId}`,\n      'contacts',\n      () =>\n        db\n          .select()\n          .from(schema.contacts)\n          .where(\n            and(\n              eq(schema.contacts.entityId, entityId),\n              eq(schema.contacts.entity, entity),\n              eq(schema.contacts.isActive, true)\n            )\n          )\n    );\n  }\n\n  /**\n   * Gets contacts for residence with user data.\n   * @param residenceId\n   */\n  async getContactsForResidence(residenceId: string): Promise<Array<Contact & { user: User }>> {\n    return this.withOptimizations(\n      'getContactsForResidence',\n      `contacts_residence:${residenceId}`,\n      'contacts',\n      () =>\n        db\n          .select()\n          .from(schema.contacts)\n          .innerJoin(schema.users, eq(schema.contacts.name, schema.users.email))\n          .where(\n            and(\n              eq(schema.contacts.entityId, residenceId),\n              eq(schema.contacts.entity, 'residence'),\n              eq(schema.contacts.isActive, true)\n            )\n          )\n    );\n  }\n\n  /**\n   * Creates a new contact.\n   * @param contact\n   */\n  async createContact(contact: InsertContact): Promise<Contact> {\n    const result = await dbPerformanceMonitor.trackQuery('createContact', async () => {\n      return db.insert(schema.contacts).values(contact).returning();\n    });\n\n    queryCache.invalidate('contacts');\n    return result[0];\n  }\n\n  /**\n   * Updates a contact.\n   * @param id\n   * @param updates\n   */\n  async updateContact(id: string, updates: Partial<Contact>): Promise<Contact | undefined> {\n    const result = await dbPerformanceMonitor.trackQuery('updateContact', async () => {\n      return db\n        .update(schema.contacts)\n        .set(updates as any)\n        .where(eq(schema.contacts.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('contacts');\n    return result[0];\n  }\n\n  /**\n   * Deletes a contact.\n   * @param id\n   */\n  async deleteContact(id: string): Promise<boolean> {\n    const result = await dbPerformanceMonitor.trackQuery('deleteContact', async () => {\n      return db\n        .update(schema.contacts)\n        .set({ isActive: false })\n        .where(eq(schema.contacts.id, id))\n        .returning();\n    });\n\n    queryCache.invalidate('contacts');\n    return result.length > 0;\n  }\n\n  /**\n   * Gets demands for a user.\n   * @param userId\n   */\n  async getDemandsForUser(userId: string): Promise<any[]> {\n    return this.withOptimizations('getDemandsForUser', `demands_user:${userId}`, 'demands', () =>\n      db.select().from(schema.demands).where(eq(schema.demands.userId, userId))\n    );\n  }\n\n  /**\n   * Gets a specific demand.\n   * @param id\n   */\n  async getDemand(id: string): Promise<any | undefined> {\n    return this.withOptimizations('getDemand', `demand:${id}`, 'demands', async () => {\n      const result = await db.select().from(schema.demands).where(eq(schema.demands.id, id));\n      return result[0];\n    });\n  }\n\n  // Bug operations implementation\n  /**\n   *\n   * @param userId\n   * @param userRole\n   * @param organizationId\n   */\n  async getBugsForUser(userId: string, userRole: string, organizationId?: string): Promise<Bug[]> {\n    return this.withOptimizations(\n      'getBugsForUser',\n      `bugs:${userRole}:${userId}`,\n      'bugs',\n      async () => {\n        let results;\n        \n        if (userRole === 'admin') {\n          // Admin can see all bugs\n          results = await db\n            .select()\n            .from(schema.bugs)\n            .orderBy(desc(schema.bugs.createdAt));\n        } else if (userRole === 'manager' && organizationId) {\n          // For managers, return all bugs for now (can be refined later)\n          results = await db\n            .select()\n            .from(schema.bugs)\n            .orderBy(desc(schema.bugs.createdAt));\n        } else {\n          // For residents and tenants, return only their own bugs\n          results = await db\n            .select()\n            .from(schema.bugs)\n            .where(eq(schema.bugs.createdBy, userId))\n            .orderBy(desc(schema.bugs.createdAt));\n        }\n\n        // Get attachment counts and details for each bug\n        const bugsWithAttachments = await Promise.all(\n          results.map(async (bug) => {\n            const attachments = await db\n              .select({\n                id: schema.documents.id,\n                name: schema.documents.name,\n                fileName: schema.documents.fileName,\n                fileSize: schema.documents.fileSize,\n                filePath: schema.documents.filePath,\n              })\n              .from(schema.documents)\n              .where(\n                and(\n                  eq(schema.documents.attachedToType, 'bug'),\n                  eq(schema.documents.attachedToId, bug.id)\n                )\n              );\n\n            return {\n              ...bug,\n              attachmentCount: attachments.length,\n              attachments: attachments.map(att => ({\n                id: att.id,\n                name: att.fileName || att.name,\n                size: parseInt(att.fileSize || '0'),\n                url: `/api/documents/${att.id}/file`,\n                type: att.fileName ? att.fileName.split('.').pop()?.toLowerCase() || 'unknown' : 'unknown'\n              }))\n            };\n          })\n        );\n\n        return bugsWithAttachments;\n      }\n    );\n  }\n\n  /**\n   *\n   * @param id\n   * @param userId\n   * @param userRole\n   * @param organizationId\n   */\n  async getBug(\n    id: string,\n    userId: string,\n    userRole: string,\n    organizationId?: string\n  ): Promise<Bug | undefined> {\n    const key = `bug:${id}:user:${userId}:${userRole}`;\n\n    console.log(`🔍 getBug called with key: ${key}`);\n\n    return withCache('bug', key, async () => {\n      console.log(`📊 Cache miss for ${key}, querying database...`);\n      const result = await db.select().from(schema.bugs).where(eq(schema.bugs.id, id));\n\n      const bug = result[0];\n      console.log(`📋 Database query result:`, bug ? { id: bug.id, title: bug.title, filePath: bug.filePath, file_path: (bug as any).file_path } : 'undefined');\n\n      if (!bug) {\n        return undefined;\n      }\n\n      if (userRole === 'admin') {\n        return bug;\n      }\n\n      if (userRole === 'manager') {\n        return bug; // Managers can see all bugs for now\n      }\n\n      // Residents and tenants can only see their own bugs\n      return bug.createdBy === userId ? bug : undefined;\n    });\n  }\n\n  /**\n   *\n   * @param bugData\n   */\n  async createBug(bugData: InsertBug): Promise<Bug> {\n    const result = await db\n      .insert(schema.bugs)\n      .values({\n        ...bugData,\n        id: crypto.randomUUID(),\n        status: 'new',\n        assignedTo: null,\n        resolvedAt: null,\n        resolvedBy: null,\n        notes: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n\n    // Invalidate cache for this user and specific bug queries  \n    queryCache.invalidate('bugs');\n    queryCache.invalidate('bug', `bug:${result[0].id}:*`);\n\n    return result[0];\n  }\n\n  /**\n   *\n   * @param id\n   * @param updates\n   * @param userId\n   * @param userRole\n   */\n  async updateBug(\n    id: string,\n    updates: Partial<Bug>,\n    userId: string,\n    userRole: string\n  ): Promise<Bug | undefined> {\n    // First check if the bug exists and get its current data\n    const [existingBug] = await db.select().from(schema.bugs).where(eq(schema.bugs.id, id));\n\n    if (!existingBug) {\n      return undefined;\n    }\n\n    // Access control: users can edit their own bugs, admins and managers can edit any bug\n    const canEdit =\n      userRole === 'admin' || userRole === 'manager' || existingBug.createdBy === userId;\n\n    if (!canEdit) {\n      return undefined;\n    }\n\n    const result = await db\n      .update(schema.bugs)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(schema.bugs.id, id))\n      .returning();\n\n    if (result[0]) {\n      // Invalidate related cache entries\n      queryCache.invalidate('bugs');\n    }\n\n    return result[0];\n  }\n\n  /**\n   *\n   * @param id\n   * @param userId\n   * @param userRole\n   */\n  async deleteBug(id: string, userId: string, userRole: string): Promise<boolean> {\n    // First check if the bug exists and get its current data\n    const [existingBug] = await db.select().from(schema.bugs).where(eq(schema.bugs.id, id));\n\n    if (!existingBug) {\n      return false;\n    }\n\n    // Access control: users can delete their own bugs, admins can delete any bug\n    const canDelete = userRole === 'admin' || existingBug.createdBy === userId;\n\n    if (!canDelete) {\n      return false;\n    }\n\n    const result = await db.delete(schema.bugs).where(eq(schema.bugs.id, id)).returning();\n\n    if (result.length > 0) {\n      // Invalidate related cache entries\n      queryCache.invalidate('bugs');\n      return true;\n    }\n\n    return false;\n  }\n\n  // Feature Request operations with optimization\n\n  /**\n   * Retrieves feature requests for a user with role-based access control.\n   * @param userId\n   * @param userRole\n   * @param organizationId\n   */\n  async getFeatureRequestsForUser(\n    userId: string,\n    userRole: string,\n    organizationId?: string\n  ): Promise<FeatureRequest[]> {\n    return this.withOptimizations(\n      'getFeatureRequestsForUser',\n      `feature_requests:${userRole}:${userId}`,\n      'feature_requests',\n      async () => {\n        const results = await db\n          .select()\n          .from(schema.featureRequests)\n          .orderBy(desc(schema.featureRequests.createdAt));\n\n        // Get attachment counts and details for each feature request\n        const requestsWithAttachments = await Promise.all(\n          results.map(async (request) => {\n            const attachments = await db\n              .select({\n                id: schema.documents.id,\n                name: schema.documents.name,\n                filePath: schema.documents.filePath,\n                fileSize: schema.documents.fileSize,\n                mimeType: schema.documents.mimeType,\n              })\n              .from(schema.documents)\n              .where(\n                and(\n                  eq(schema.documents.attachedToType, 'feature_request'),\n                  eq(schema.documents.attachedToId, request.id)\n                )\n              );\n\n            return {\n              ...request,\n              attachmentCount: attachments.length,\n              attachments: attachments.map(att => ({\n                id: att.id,\n                name: att.name,\n                url: `/api/documents/${att.id}/file`,\n                size: att.fileSize ? parseInt(att.fileSize) : 0,\n                mimeType: att.mimeType,\n              })),\n            };\n          })\n        );\n\n        // All users can see all feature requests, but non-admins don't see who submitted\n        if (userRole === 'admin') {\n          return requestsWithAttachments;\n        }\n\n        // For non-admin users, hide the createdBy field\n        return requestsWithAttachments.map((request) => ({\n          ...request,\n          createdBy: null as any,\n        }));\n      }\n    );\n  }\n\n  /**\n   * Retrieves a specific feature request by ID with role-based access control.\n   * @param id\n   * @param userId\n   * @param userRole\n   * @param organizationId\n   */\n  async getFeatureRequest(\n    id: string,\n    userId: string,\n    userRole: string,\n    organizationId?: string\n  ): Promise<FeatureRequest | undefined> {\n    return this.withOptimizations(\n      'getFeatureRequest',\n      `feature_request:${id}:${userRole}`,\n      'feature_requests',\n      async () => {\n        const result = await db\n          .select()\n          .from(schema.featureRequests)\n          .where(eq(schema.featureRequests.id, id));\n\n        const featureRequest = result[0];\n        if (!featureRequest) {\n          return undefined;\n        }\n\n        // All users can see any feature request\n        if (userRole === 'admin') {\n          return featureRequest;\n        }\n\n        // For non-admin users, hide the createdBy field\n        return {\n          ...featureRequest,\n          createdBy: null as any,\n        };\n      }\n    );\n  }\n\n  /**\n   * Creates a new feature request.\n   * @param featureRequestData\n   */\n  async createFeatureRequest(featureRequestData: InsertFeatureRequest): Promise<FeatureRequest> {\n    const result = await dbPerformanceMonitor.trackQuery('createFeatureRequest', async () => {\n      return db\n        .insert(schema.featureRequests)\n        .values({\n          ...featureRequestData,\n          id: crypto.randomUUID(),\n          status: 'submitted',\n          upvoteCount: 0,\n          assignedTo: null,\n          reviewedBy: null,\n          reviewedAt: null,\n          adminNotes: null,\n          mergedIntoId: null,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .returning();\n    });\n\n    // Invalidate cache\n    queryCache.invalidate('feature_requests');\n\n    return result[0];\n  }\n\n  /**\n   * Updates a feature request with role-based permissions.\n   * Users can edit their own, managers can edit within org, admins can edit all.\n   * @param id\n   * @param updates\n   * @param userId\n   * @param userRole\n   */\n  async updateFeatureRequest(\n    id: string,\n    updates: Partial<FeatureRequest>,\n    userId: string,\n    userRole: string\n  ): Promise<FeatureRequest | undefined> {\n    // Get existing feature request to check permissions\n    const existingFeatureRequest = await db\n      .select()\n      .from(schema.featureRequests)\n      .where(eq(schema.featureRequests.id, id))\n      .limit(1);\n\n    if (!existingFeatureRequest[0]) {\n      return undefined;\n    }\n\n    // Check permissions: users can edit their own, admins can edit all\n    const canEdit = userRole === 'admin' || existingFeatureRequest[0].createdBy === userId;\n\n    if (!canEdit) {\n      return undefined;\n    }\n\n    const result = await dbPerformanceMonitor.trackQuery('updateFeatureRequest', async () => {\n      return db\n        .update(schema.featureRequests)\n        .set({\n          ...updates,\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.featureRequests.id, id))\n        .returning();\n    });\n\n    if (result[0]) {\n      // Invalidate related cache entries\n      queryCache.invalidate('feature_requests');\n    }\n\n    return result[0];\n  }\n\n  /**\n   * Deletes a feature request (admin only).\n   * @param id\n   * @param userId\n   * @param userRole\n   */\n  async deleteFeatureRequest(id: string, userId: string, userRole: string): Promise<boolean> {\n    // Only admins can delete feature requests\n    if (userRole !== 'admin') {\n      return false;\n    }\n\n    // First delete all upvotes for this feature request\n    await db\n      .delete(schema.featureRequestUpvotes)\n      .where(eq(schema.featureRequestUpvotes.featureRequestId, id));\n\n    const result = await db\n      .delete(schema.featureRequests)\n      .where(eq(schema.featureRequests.id, id))\n      .returning();\n\n    if (result.length > 0) {\n      // Invalidate related cache entries\n      queryCache.invalidate('feature_requests');\n      queryCache.invalidate('feature_request_upvotes');\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Upvotes a feature request.\n   * @param upvoteData\n   */\n  async upvoteFeatureRequest(\n    upvoteData: InsertFeatureRequestUpvote\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    const { featureRequestId, userId } = upvoteData;\n\n    try {\n      // Check if feature request exists\n      const featureRequestResult = await db\n        .select()\n        .from(schema.featureRequests)\n        .where(eq(schema.featureRequests.id, featureRequestId));\n\n      if (featureRequestResult.length === 0) {\n        return {\n          success: false,\n          message: 'Feature request not found',\n        };\n      }\n\n      // Check if user has already upvoted this feature request\n      const existingUpvote = await db\n        .select()\n        .from(schema.featureRequestUpvotes)\n        .where(\n          and(\n            eq(schema.featureRequestUpvotes.featureRequestId, featureRequestId),\n            eq(schema.featureRequestUpvotes.userId, userId)\n          )\n        );\n\n      if (existingUpvote.length > 0) {\n        return {\n          success: false,\n          message: 'You have already upvoted this feature request',\n        };\n      }\n\n      // Create the upvote\n      const upvoteResult = await db\n        .insert(schema.featureRequestUpvotes)\n        .values({\n          ...upvoteData,\n          id: crypto.randomUUID(),\n          createdAt: new Date(),\n        })\n        .returning();\n\n      // Update the upvote count on the feature request\n      const updatedFeatureRequest = await db\n        .update(schema.featureRequests)\n        .set({\n          upvoteCount: sql`${schema.featureRequests.upvoteCount} + 1`,\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.featureRequests.id, featureRequestId))\n        .returning();\n\n      // Invalidate cache\n      queryCache.invalidate('feature_requests');\n      queryCache.invalidate('feature_request_upvotes');\n\n      return {\n        success: true,\n        message: 'Feature request upvoted successfully',\n        data: {\n          upvote: upvoteResult[0],\n          featureRequest: updatedFeatureRequest[0],\n        },\n      };\n    } catch (error: any) {\n      console.error('❌ Error upvoting feature request:', error);\n      return {\n        success: false,\n        message: 'Failed to upvote feature request',\n      };\n    }\n  }\n\n  /**\n   * Removes an upvote from a feature request.\n   * @param featureRequestId\n   * @param userId\n   */\n  async removeFeatureRequestUpvote(\n    featureRequestId: string,\n    userId: string\n  ): Promise<{ success: boolean; message: string; data?: any }> {\n    try {\n      // Check if feature request exists\n      const featureRequestResult = await db\n        .select()\n        .from(schema.featureRequests)\n        .where(eq(schema.featureRequests.id, featureRequestId));\n\n      if (featureRequestResult.length === 0) {\n        return {\n          success: false,\n          message: 'Feature request not found',\n        };\n      }\n\n      // Find and remove the upvote\n      const removedUpvote = await db\n        .delete(schema.featureRequestUpvotes)\n        .where(\n          and(\n            eq(schema.featureRequestUpvotes.featureRequestId, featureRequestId),\n            eq(schema.featureRequestUpvotes.userId, userId)\n          )\n        )\n        .returning();\n\n      if (removedUpvote.length === 0) {\n        return {\n          success: false,\n          message: 'You have not upvoted this feature request',\n        };\n      }\n\n      // Update the upvote count on the feature request\n      const updatedFeatureRequest = await db\n        .update(schema.featureRequests)\n        .set({\n          upvoteCount: sql`GREATEST(0, ${schema.featureRequests.upvoteCount} - 1)`,\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.featureRequests.id, featureRequestId))\n        .returning();\n\n      // Invalidate cache\n      queryCache.invalidate('feature_requests');\n      queryCache.invalidate('feature_request_upvotes');\n\n      return {\n        success: true,\n        message: 'Upvote removed successfully',\n        data: {\n          featureRequest: updatedFeatureRequest[0],\n        },\n      };\n    } catch (error: any) {\n      console.error('❌ Error removing feature request upvote:', error);\n      return {\n        success: false,\n        message: 'Failed to remove upvote',\n      };\n    }\n  }\n\n  // Invoice operations\n  async getInvoices(filters?: {\n    buildingId?: string;\n    residenceId?: string;\n    userId?: string;\n    userRole?: string;\n  }): Promise<Invoice[]> {\n    try {\n      let query = db.select().from(schema.invoices);\n      const conditions = [];\n\n      if (filters) {\n        if (filters.buildingId) {\n          conditions.push(eq(schema.invoices.buildingId, filters.buildingId));\n        }\n        if (filters.residenceId) {\n          conditions.push(eq(schema.invoices.residenceId, filters.residenceId));\n        }\n        if (filters.userId && filters.userRole) {\n          // Apply role-based filtering\n          if (filters.userRole === 'tenant' || filters.userRole === 'resident') {\n            conditions.push(eq(schema.invoices.createdBy, filters.userId));\n          }\n          // Admin and manager can see all invoices (already filtered by building/residence above)\n        }\n      }\n\n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n\n      const invoices = await query.orderBy(desc(schema.invoices.createdAt));\n      return invoices;\n    } catch (error: any) {\n      console.error('❌ Error fetching invoices:', error);\n      return [];\n    }\n  }\n\n  async getInvoice(id: string): Promise<Invoice | undefined> {\n    try {\n      const result = await db\n        .select()\n        .from(schema.invoices)\n        .where(eq(schema.invoices.id, id))\n        .limit(1);\n      \n      return result[0];\n    } catch (error: any) {\n      console.error('❌ Error fetching invoice:', error);\n      return undefined;\n    }\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    try {\n      const result = await db\n        .insert(schema.invoices)\n        .values(invoice)\n        .returning();\n      \n      return result[0];\n    } catch (error: any) {\n      console.error('❌ Error creating invoice:', error);\n      throw error;\n    }\n  }\n\n  async updateInvoice(id: string, updates: Partial<Invoice>): Promise<Invoice | undefined> {\n    try {\n      const result = await db\n        .update(schema.invoices)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(schema.invoices.id, id))\n        .returning();\n      \n      return result[0];\n    } catch (error: any) {\n      console.error('❌ Error updating invoice:', error);\n      return undefined;\n    }\n  }\n\n  async deleteInvoice(id: string): Promise<boolean> {\n    try {\n      const result = await db\n        .delete(schema.invoices)\n        .where(eq(schema.invoices.id, id))\n        .returning();\n      \n      return result.length > 0;\n    } catch (error: any) {\n      console.error('❌ Error deleting invoice:', error);\n      return false;\n    }\n  }\n}\n"],"version":3}