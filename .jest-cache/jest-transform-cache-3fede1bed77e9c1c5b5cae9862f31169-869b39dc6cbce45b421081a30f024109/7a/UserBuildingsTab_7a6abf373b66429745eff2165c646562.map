{"file":"/home/runner/workspace/client/src/components/user-tabs/UserBuildingsTab.tsx","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,4CA4DC;;AAzED,+CAAmD;AACnD,mDAAgD;AAChD,+CAAgF;AAChF,uDAAoD;AAUpD,SAAgB,gBAAgB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,GAAG,KAAK,EAAyB;IACpG,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,IAAA,gBAAQ,EAAW,EAAE,CAAC,CAAC;IAEzE,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,IAAI,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YAC3B,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAa,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEX,MAAM,oBAAoB,GAAG,CAAC,UAAkB,EAAE,EAAE;QAClD,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAC1B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;YACvB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,UAAU,CAAC;YACtC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,UAAU,CAAC,CAC1B,CAAC;IACJ,CAAC,CAAC;IAEF,MAAM,UAAU,GAAG,GAAG,EAAE;QACtB,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAI,CAAC,IAAI;QAAE,OAAO,IAAI,CAAC;IAEvB,OAAO,CACL,wBAAC,WAAI,eACH,uBAAC,iBAAU,cACT,uBAAC,gBAAS,kCAA4B,GAC3B,EACb,wBAAC,kBAAW,IAAC,SAAS,EAAC,WAAW,aAChC,gCAAK,SAAS,EAAC,qCAAqC,YACjD,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAC3B,iCAAuB,SAAS,EAAC,gDAAgD,aAC/E,uBAAC,mBAAQ,IACP,EAAE,EAAE,YAAY,QAAQ,CAAC,EAAE,EAAE,EAC7B,OAAO,EAAE,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,EAChD,eAAe,EAAE,GAAG,EAAE,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC,iBAC3C,qBAAqB,QAAQ,CAAC,EAAE,EAAE,GAC/C,EACF,iCAAK,SAAS,EAAC,QAAQ,aACrB,kCACE,OAAO,EAAE,YAAY,QAAQ,CAAC,EAAE,EAAE,EAClC,SAAS,EAAC,4FAA4F,YAErG,QAAQ,CAAC,IAAI,GACR,EACR,+BAAG,SAAS,EAAC,uBAAuB,aAAE,QAAQ,CAAC,OAAO,QAAI,QAAQ,CAAC,IAAI,IAAK,EAC5E,+BAAG,SAAS,EAAC,uBAAuB,aAAE,QAAQ,CAAC,UAAU,cAAW,IAChE,KAhBE,QAAQ,CAAC,EAAE,CAiBf,CACP,CAAC,GACE,EAEN,gCAAK,SAAS,EAAC,uBAAuB,YACpC,uBAAC,eAAM,IAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,iBAAc,gBAAgB,YAC3E,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,sBAAsB,GAC1C,GACL,IACM,IACT,CACR,CAAC;AACJ,CAAC","names":[],"sources":["/home/runner/workspace/client/src/components/user-tabs/UserBuildingsTab.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport type { UserWithAssignments, Building } from '@shared/schema';\n\ninterface UserBuildingsTabProps {\n  user: UserWithAssignments | null;\n  buildings: Building[];\n  onSave: (buildingIds: string[]) => void;\n  isLoading?: boolean;\n}\n\nexport function UserBuildingsTab({ user, buildings, onSave, isLoading = false }: UserBuildingsTabProps) {\n  const [selectedBuildings, setSelectedBuildings] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (user && user.buildings) {\n      setSelectedBuildings(user.buildings.map((building: any) => building.id));\n    }\n  }, [user]);\n\n  const handleBuildingToggle = (buildingId: string) => {\n    setSelectedBuildings(prev => \n      prev.includes(buildingId)\n        ? prev.filter(id => id !== buildingId)\n        : [...prev, buildingId]\n    );\n  };\n\n  const handleSave = () => {\n    onSave(selectedBuildings);\n  };\n\n  if (!user) return null;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Building Access</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid gap-4 max-h-60 overflow-y-auto\">\n          {buildings.map((building) => (\n            <div key={building.id} className=\"flex items-center space-x-2 p-2 border rounded\">\n              <Checkbox\n                id={`building-${building.id}`}\n                checked={selectedBuildings.includes(building.id)}\n                onCheckedChange={() => handleBuildingToggle(building.id)}\n                data-testid={`checkbox-building-${building.id}`}\n              />\n              <div className=\"flex-1\">\n                <label\n                  htmlFor={`building-${building.id}`}\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                >\n                  {building.name}\n                </label>\n                <p className=\"text-xs text-gray-500\">{building.address}, {building.city}</p>\n                <p className=\"text-xs text-gray-400\">{building.totalUnits} units</p>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"flex justify-end pt-4\">\n          <Button onClick={handleSave} disabled={isLoading} data-testid=\"save-buildings\">\n            {isLoading ? 'Saving...' : 'Save Building Access'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"],"version":3}