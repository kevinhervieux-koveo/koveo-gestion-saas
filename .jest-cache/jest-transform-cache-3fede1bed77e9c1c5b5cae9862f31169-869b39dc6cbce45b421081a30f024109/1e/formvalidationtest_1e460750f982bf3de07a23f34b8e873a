d2b750cf086cc6cc41c34270afaa0c64
"use strict";
/**
 * Comprehensive Form Validation Test Suite
 * Tests all form validation rules and ensures consistency across the application
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const zod_1 = require("zod");
(0, globals_1.describe)('Form Validation Rules Compliance', () => {
    (0, globals_1.describe)('Error Message Quality Standards', () => {
        (0, globals_1.test)('should require detailed error messages with examples for string fields', () => {
            // Test that error messages are descriptive and include examples
            const emailSchema = zod_1.z.string().email('Please enter a valid email address (example: user@domain.com)');
            const nameSchema = zod_1.z.string().min(1, 'First name is required (example: Jean)');
            const phoneSchema = zod_1.z.string().regex(/^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)');
            // Test valid inputs
            (0, globals_1.expect)(() => emailSchema.parse('user@domain.com')).not.toThrow();
            (0, globals_1.expect)(() => nameSchema.parse('Jean')).not.toThrow();
            (0, globals_1.expect)(() => phoneSchema.parse('(514) 123-4567')).not.toThrow();
            // Test invalid inputs return detailed error messages
            const emailResult = emailSchema.safeParse('invalid-email');
            const nameResult = nameSchema.safeParse('');
            const phoneResult = phoneSchema.safeParse('123');
            (0, globals_1.expect)(emailResult.success).toBe(false);
            (0, globals_1.expect)(nameResult.success).toBe(false);
            (0, globals_1.expect)(phoneResult.success).toBe(false);
            if (!emailResult.success) {
                (0, globals_1.expect)(emailResult.error.issues[0].message).toContain('example:');
                (0, globals_1.expect)(emailResult.error.issues[0].message).toContain('@');
            }
            if (!nameResult.success) {
                (0, globals_1.expect)(nameResult.error.issues[0].message).toContain('example:');
            }
            if (!phoneResult.success) {
                (0, globals_1.expect)(phoneResult.error.issues[0].message).toContain('example:');
                (0, globals_1.expect)(phoneResult.error.issues[0].message).toContain('(514)');
            }
        });
        (0, globals_1.test)('should enforce length limits with clear error messages', () => {
            const titleSchema = zod_1.z.string().min(1, 'Title is required (example: Monthly Meeting Minutes)').max(200, 'Title must be less than 200 characters');
            const descriptionSchema = zod_1.z.string().max(1000, 'Description must be less than 1000 characters');
            // Test length violations
            const longTitle = 'A'.repeat(201);
            const longDescription = 'A'.repeat(1001);
            const titleResult = titleSchema.safeParse(longTitle);
            const descriptionResult = descriptionSchema.safeParse(longDescription);
            (0, globals_1.expect)(titleResult.success).toBe(false);
            (0, globals_1.expect)(descriptionResult.success).toBe(false);
            if (!titleResult.success) {
                (0, globals_1.expect)(titleResult.error.issues[0].message).toContain('less than');
                (0, globals_1.expect)(titleResult.error.issues[0].message).toContain('200');
            }
            if (!descriptionResult.success) {
                (0, globals_1.expect)(descriptionResult.error.issues[0].message).toContain('less than');
                (0, globals_1.expect)(descriptionResult.error.issues[0].message).toContain('1000');
            }
        });
        (0, globals_1.test)('should validate Quebec-specific formats', () => {
            const postalCodeSchema = zod_1.z.string().regex(/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)');
            const citySchema = zod_1.z.string().regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens');
            // Test valid Quebec formats
            (0, globals_1.expect)(() => postalCodeSchema.parse('H1A 1B1')).not.toThrow();
            (0, globals_1.expect)(() => postalCodeSchema.parse('H1A1B1')).not.toThrow();
            (0, globals_1.expect)(() => citySchema.parse('Montréal')).not.toThrow();
            (0, globals_1.expect)(() => citySchema.parse("Saint-Jean-sur-Richelieu")).not.toThrow();
            // Test invalid formats
            const postalResult = postalCodeSchema.safeParse('12345');
            const cityResult = citySchema.safeParse('City123');
            (0, globals_1.expect)(postalResult.success).toBe(false);
            (0, globals_1.expect)(cityResult.success).toBe(false);
            if (!postalResult.success) {
                (0, globals_1.expect)(postalResult.error.issues[0].message).toContain('Canadian format');
                (0, globals_1.expect)(postalResult.error.issues[0].message).toContain('H1A 1B1');
            }
            if (!cityResult.success) {
                (0, globals_1.expect)(cityResult.error.issues[0].message).toContain('letters, spaces, apostrophes');
            }
        });
    });
    (0, globals_1.describe)('Numeric Field Validation Standards', () => {
        (0, globals_1.test)('should validate numeric ranges with clear bounds', () => {
            const ageSchema = zod_1.z.number().min(18, 'Age must be between 18 and 120 years').max(120, 'Age must be between 18 and 120 years');
            const amountSchema = zod_1.z.string().regex(/^\d+(\.\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)');
            const capacitySchema = zod_1.z.number().min(1, 'Capacity must be between 1 and 500 people').max(500, 'Capacity must be between 1 and 500 people');
            // Test valid ranges
            (0, globals_1.expect)(() => ageSchema.parse(25)).not.toThrow();
            (0, globals_1.expect)(() => amountSchema.parse('125.50')).not.toThrow();
            (0, globals_1.expect)(() => capacitySchema.parse(50)).not.toThrow();
            // Test boundary violations
            const ageResult = ageSchema.safeParse(17);
            const amountResult = amountSchema.safeParse('125.555');
            const capacityResult = capacitySchema.safeParse(501);
            (0, globals_1.expect)(ageResult.success).toBe(false);
            (0, globals_1.expect)(amountResult.success).toBe(false);
            (0, globals_1.expect)(capacityResult.success).toBe(false);
            if (!ageResult.success) {
                (0, globals_1.expect)(ageResult.error.issues[0].message).toContain('between');
            }
            if (!amountResult.success) {
                (0, globals_1.expect)(amountResult.error.issues[0].message).toContain('decimal places');
                (0, globals_1.expect)(amountResult.error.issues[0].message).toContain('example:');
            }
        });
    });
    (0, globals_1.describe)('Required Field Validation', () => {
        (0, globals_1.test)('should provide clear guidance for required selections', () => {
            const organizationSchema = zod_1.z.string().min(1, 'Please select an organization from the dropdown');
            const roleSchema = zod_1.z.string().min(1, 'Please select a user role');
            const typeSchema = zod_1.z.string().min(1, 'Please select an organization type from the dropdown');
            const orgResult = organizationSchema.safeParse('');
            const roleResult = roleSchema.safeParse('');
            const typeResult = typeSchema.safeParse('');
            (0, globals_1.expect)(orgResult.success).toBe(false);
            (0, globals_1.expect)(roleResult.success).toBe(false);
            (0, globals_1.expect)(typeResult.success).toBe(false);
            if (!orgResult.success) {
                (0, globals_1.expect)(orgResult.error.issues[0].message).toContain('select');
                (0, globals_1.expect)(orgResult.error.issues[0].message).toContain('dropdown');
            }
            if (!roleResult.success) {
                (0, globals_1.expect)(roleResult.error.issues[0].message).toContain('select');
            }
        });
    });
    (0, globals_1.describe)('Quebec Law 25 Compliance Validation', () => {
        (0, globals_1.test)('should enforce privacy-compliant field validation', () => {
            // Personal information fields must have enhanced protection
            const firstNameSchema = zod_1.z.string().min(1, 'First name is required (example: Jean)').max(50, 'First name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'First name can only contain letters, spaces, apostrophes and hyphens');
            const lastNameSchema = zod_1.z.string().min(1, 'Last name is required (example: Dupont)').max(50, 'Last name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'Last name can only contain letters, spaces, apostrophes and hyphens');
            // Test valid Quebec names
            (0, globals_1.expect)(() => firstNameSchema.parse('Jean-Baptiste')).not.toThrow();
            (0, globals_1.expect)(() => firstNameSchema.parse('Marie-Ève')).not.toThrow();
            (0, globals_1.expect)(() => lastNameSchema.parse("O'Connor")).not.toThrow();
            (0, globals_1.expect)(() => lastNameSchema.parse('Lafleur-Dufresne')).not.toThrow();
            // Test invalid inputs
            const invalidFirst = firstNameSchema.safeParse('Jean123');
            const invalidLast = lastNameSchema.safeParse('');
            (0, globals_1.expect)(invalidFirst.success).toBe(false);
            (0, globals_1.expect)(invalidLast.success).toBe(false);
            if (!invalidFirst.success) {
                (0, globals_1.expect)(invalidFirst.error.issues[0].message).toContain('letters, spaces, apostrophes');
            }
            if (!invalidLast.success) {
                (0, globals_1.expect)(invalidLast.error.issues[0].message).toContain('example:');
            }
        });
        (0, globals_1.test)('should validate password security requirements', () => {
            const passwordSchema = zod_1.z.string()
                .min(8, 'Password must be at least 8 characters long (example: MonNouveauMotDePasse123!)')
                .max(100, 'Password must be less than 100 characters')
                .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one lowercase letter, one uppercase letter, and one number');
            // Test valid passwords
            (0, globals_1.expect)(() => passwordSchema.parse('MonMotDePasse123!')).not.toThrow();
            (0, globals_1.expect)(() => passwordSchema.parse('SecurePass123')).not.toThrow();
            // Test invalid passwords
            const shortResult = passwordSchema.safeParse('short');
            const noUpperResult = passwordSchema.safeParse('password123');
            const noNumberResult = passwordSchema.safeParse('Password');
            (0, globals_1.expect)(shortResult.success).toBe(false);
            (0, globals_1.expect)(noUpperResult.success).toBe(false);
            (0, globals_1.expect)(noNumberResult.success).toBe(false);
            if (!shortResult.success) {
                (0, globals_1.expect)(shortResult.error.issues[0].message).toContain('at least 8');
                (0, globals_1.expect)(shortResult.error.issues[0].message).toContain('example:');
            }
        });
    });
    (0, globals_1.describe)('Time and Date Validation', () => {
        (0, globals_1.test)('should validate time formats with clear examples', () => {
            const timeSchema = zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format (example: 09:00)');
            const dateSchema = zod_1.z.string().min(1, 'Date is required (select from calendar)');
            // Test valid times
            (0, globals_1.expect)(() => timeSchema.parse('09:00')).not.toThrow();
            (0, globals_1.expect)(() => timeSchema.parse('23:59')).not.toThrow();
            (0, globals_1.expect)(() => timeSchema.parse('00:00')).not.toThrow();
            // Test invalid times
            const invalidTime = timeSchema.safeParse('25:00');
            const invalidFormat = timeSchema.safeParse('9:0');
            (0, globals_1.expect)(invalidTime.success).toBe(false);
            (0, globals_1.expect)(invalidFormat.success).toBe(false);
            if (!invalidTime.success) {
                (0, globals_1.expect)(invalidTime.error.issues[0].message).toContain('HH:MM');
                (0, globals_1.expect)(invalidTime.error.issues[0].message).toContain('example:');
            }
        });
    });
    (0, globals_1.describe)('Business Logic Validation', () => {
        (0, globals_1.test)('should validate refinements with helpful error messages', () => {
            const timeRangeSchema = zod_1.z
                .object({
                startTime: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Start time must be in HH:MM format (example: 09:00)'),
                endTime: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'End time must be in HH:MM format (example: 11:00)'),
            })
                .refine((data) => {
                const [startHour, startMin] = data.startTime.split(':').map(Number);
                const [endHour, endMin] = data.endTime.split(':').map(Number);
                const startMinutes = startHour * 60 + startMin;
                const endMinutes = endHour * 60 + endMin;
                return endMinutes > startMinutes;
            }, {
                message: 'End time must be after start time (example: start at 09:00, end at 11:00)',
                path: ['endTime'],
            });
            // Test valid time range
            (0, globals_1.expect)(() => timeRangeSchema.parse({ startTime: '09:00', endTime: '11:00' })).not.toThrow();
            // Test invalid time range
            const result = timeRangeSchema.safeParse({ startTime: '11:00', endTime: '09:00' });
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].message).toContain('after start time');
                (0, globals_1.expect)(result.error.issues[0].message).toContain('example:');
            }
        });
        (0, globals_1.test)('should validate password confirmation with clear messaging', () => {
            const passwordSchema = zod_1.z
                .object({
                newPassword: zod_1.z.string().min(8, 'New password must be at least 8 characters long (example: MonNouveauMotDePasse123!)'),
                confirmPassword: zod_1.z.string().min(1, 'Please confirm your new password by typing it again'),
            })
                .refine((data) => data.newPassword === data.confirmPassword, {
                message: "Passwords don't match - please enter the same password in both fields",
                path: ['confirmPassword'],
            });
            // Test valid password confirmation
            (0, globals_1.expect)(() => passwordSchema.parse({
                newPassword: 'TestPassword123!',
                confirmPassword: 'TestPassword123!'
            })).not.toThrow();
            // Test password mismatch
            const result = passwordSchema.safeParse({
                newPassword: 'TestPassword123!',
                confirmPassword: 'DifferentPassword123!'
            });
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, globals_1.expect)(result.error.issues[0].message).toContain("don't match");
                (0, globals_1.expect)(result.error.issues[0].message).toContain('same password');
            }
        });
    });
    (0, globals_1.describe)('Validation Pattern Enforcement', () => {
        (0, globals_1.test)('should enforce minimum character requirements for text fields', () => {
            // All meaningful text fields should have minimum length requirements
            const shortDescriptionSchema = zod_1.z.string().min(10, 'Description must be at least 10 characters long (example: Detailed explanation of the issue)');
            const titleSchema = zod_1.z.string().min(1, 'Title is required (example: Document Title)');
            const shortResult = shortDescriptionSchema.safeParse('short');
            const emptyResult = titleSchema.safeParse('');
            (0, globals_1.expect)(shortResult.success).toBe(false);
            (0, globals_1.expect)(emptyResult.success).toBe(false);
            if (!shortResult.success) {
                (0, globals_1.expect)(shortResult.error.issues[0].message).toContain('at least');
                (0, globals_1.expect)(shortResult.error.issues[0].message).toContain('example:');
            }
        });
        (0, globals_1.test)('should validate selection fields with guidance', () => {
            const categorySchema = zod_1.z.enum(['maintenance', 'complaint', 'information', 'other']);
            const organizationSchema = zod_1.z.string().min(1, 'Please select an organization from the dropdown');
            // Test empty selection
            const orgResult = organizationSchema.safeParse('');
            (0, globals_1.expect)(orgResult.success).toBe(false);
            if (!orgResult.success) {
                (0, globals_1.expect)(orgResult.error.issues[0].message).toContain('select');
                (0, globals_1.expect)(orgResult.error.issues[0].message).toContain('dropdown');
            }
        });
    });
    (0, globals_1.describe)('Bilingual Support Validation', () => {
        (0, globals_1.test)('should support both English and French error messages', () => {
            // Some forms may use French error messages for Quebec compliance
            const frenchDateSchema = zod_1.z.date({ message: 'Please select a booking date from the calendar' });
            const englishEmailSchema = zod_1.z.string().email('Please enter a valid email address (example: user@domain.com)');
            // Both should work and provide clear guidance
            const dateResult = frenchDateSchema.safeParse('invalid-date');
            const emailResult = englishEmailSchema.safeParse('invalid-email');
            (0, globals_1.expect)(dateResult.success).toBe(false);
            (0, globals_1.expect)(emailResult.success).toBe(false);
            if (!dateResult.success) {
                (0, globals_1.expect)(dateResult.error.issues[0].message).toContain('select');
                (0, globals_1.expect)(dateResult.error.issues[0].message).toContain('calendar');
            }
            if (!emailResult.success) {
                (0, globals_1.expect)(emailResult.error.issues[0].message).toContain('valid email');
                (0, globals_1.expect)(emailResult.error.issues[0].message).toContain('example:');
            }
        });
    });
    (0, globals_1.describe)('Form Consistency Standards', () => {
        (0, globals_1.test)('should enforce consistent error message patterns', () => {
            // Test that all error messages follow consistent patterns:
            // 1. Clear explanation of what's wrong
            // 2. Include examples where helpful
            // 3. Specify valid ranges/formats
            // 4. Use friendly, helpful language
            const patterns = [
                {
                    schema: zod_1.z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)'),
                    invalidInput: 'invalid-email',
                    shouldContain: ['valid email', 'example:', '@']
                },
                {
                    schema: zod_1.z.string().min(1, 'First name is required (example: Jean)').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'First name can only contain letters, spaces, apostrophes and hyphens'),
                    invalidInput: 'John123',
                    shouldContain: ['can only contain', 'letters, spaces']
                },
                {
                    schema: zod_1.z.string().regex(/^\d+(\.\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),
                    invalidInput: '125.555',
                    shouldContain: ['valid number', 'decimal places', 'example:']
                }
            ];
            patterns.forEach(({ schema, invalidInput, shouldContain }) => {
                const result = schema.safeParse(invalidInput);
                (0, globals_1.expect)(result.success).toBe(false);
                if (!result.success) {
                    const errorMessage = result.error.issues[0].message;
                    shouldContain.forEach(pattern => {
                        (0, globals_1.expect)(errorMessage).toContain(pattern);
                    });
                }
            });
        });
        (0, globals_1.test)('should validate that all forms use proper character limits', () => {
            // Standard character limits across the application
            const limits = {
                title: { max: 200, min: 1 },
                description: { max: 1000, min: 10 },
                shortText: { max: 100, min: 1 },
                longText: { max: 2000, min: 10 },
                name: { max: 50, min: 1 }
            };
            Object.entries(limits).forEach(([fieldType, { max, min }]) => {
                const schema = zod_1.z.string()
                    .min(min, `${fieldType} must be at least ${min} characters`)
                    .max(max, `${fieldType} must be less than ${max} characters`);
                // Test boundary conditions
                const tooShort = 'a'.repeat(min - 1);
                const tooLong = 'a'.repeat(max + 1);
                const justRight = 'a'.repeat(min);
                (0, globals_1.expect)(schema.safeParse(tooShort).success).toBe(false);
                (0, globals_1.expect)(schema.safeParse(tooLong).success).toBe(false);
                (0, globals_1.expect)(schema.safeParse(justRight).success).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Security Validation Standards', () => {
        (0, globals_1.test)('should validate email confirmation for destructive actions', () => {
            const deleteConfirmSchema = zod_1.z.object({
                confirmEmail: zod_1.z.string().min(1, 'Email confirmation is required to delete account').email('Please enter a valid email address that matches your account'),
                reason: zod_1.z.string().max(500, 'Reason must be less than 500 characters').optional(),
            });
            const validResult = deleteConfirmSchema.safeParse({
                confirmEmail: 'user@domain.com',
                reason: 'No longer needed'
            });
            const invalidResult = deleteConfirmSchema.safeParse({
                confirmEmail: '',
                reason: 'a'.repeat(501)
            });
            (0, globals_1.expect)(validResult.success).toBe(true);
            (0, globals_1.expect)(invalidResult.success).toBe(false);
            if (!invalidResult.success) {
                const errors = invalidResult.error.issues;
                (0, globals_1.expect)(errors.some(e => e.message.includes('Email confirmation is required'))).toBe(true);
                (0, globals_1.expect)(errors.some(e => e.message.includes('less than 500 characters'))).toBe(true);
            }
        });
    });
    (0, globals_1.describe)('Future Form Compliance Validation', () => {
        (0, globals_1.test)('should provide template for future form validation schemas', () => {
            // Template that all future forms should follow
            const futureFormTemplate = zod_1.z.object({
                // Required text field with example
                title: zod_1.z.string()
                    .min(1, 'Title is required (example: Descriptive Title)')
                    .max(200, 'Title must be less than 200 characters'),
                // Optional text field with validation
                description: zod_1.z.string()
                    .max(1000, 'Description must be less than 1000 characters')
                    .optional(),
                // Email field with format example
                email: zod_1.z.string()
                    .min(1, 'Email address is required')
                    .email('Please enter a valid email address (example: user@domain.com)'),
                // Quebec-specific phone number
                phone: zod_1.z.string()
                    .regex(/^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)')
                    .optional(),
                // Numeric field with range
                amount: zod_1.z.string()
                    .min(1, 'Amount is required (example: 125.50)')
                    .regex(/^\d+(\.\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),
                // Selection field
                category: zod_1.z.string()
                    .min(1, 'Please select a category from the dropdown')
            });
            // Test the template works correctly
            const validData = {
                title: 'Test Document',
                description: 'This is a test description',
                email: 'test@example.com',
                phone: '(514) 123-4567',
                amount: '125.50',
                category: 'test'
            };
            const invalidData = {
                title: '',
                description: 'a'.repeat(1001),
                email: 'invalid-email',
                phone: '123',
                amount: '125.555',
                category: ''
            };
            (0, globals_1.expect)(futureFormTemplate.safeParse(validData).success).toBe(true);
            const result = futureFormTemplate.safeParse(invalidData);
            (0, globals_1.expect)(result.success).toBe(false);
            if (!result.success) {
                const messages = result.error.issues.map(i => i.message);
                (0, globals_1.expect)(messages.some(m => m.includes('example:'))).toBe(true);
                (0, globals_1.expect)(messages.some(m => m.includes('valid email'))).toBe(true);
                (0, globals_1.expect)(messages.some(m => m.includes('select'))).toBe(true);
            }
        });
    });
});
/**
 * Validation Rules Enforcement Tests
 * Tests to ensure all forms follow the established validation patterns
 */
(0, globals_1.describe)('Validation Rules Enforcement', () => {
    (0, globals_1.describe)('Error Message Quality Checks', () => {
        (0, globals_1.test)('should validate error messages contain examples where appropriate', () => {
            const fieldsRequiringExamples = [
                'email',
                'phone',
                'postalCode',
                'amount',
                'time',
                'name',
                'title',
                'password'
            ];
            // Mock schema validation that should include examples
            fieldsRequiringExamples.forEach(fieldType => {
                // Each field type should have validation that includes examples
                switch (fieldType) {
                    case 'email':
                        const emailSchema = zod_1.z.string().email('Please enter a valid email address (example: user@domain.com)');
                        const emailResult = emailSchema.safeParse('invalid');
                        (0, globals_1.expect)(emailResult.success).toBe(false);
                        if (!emailResult.success) {
                            (0, globals_1.expect)(emailResult.error.issues[0].message).toContain('example:');
                        }
                        break;
                    case 'phone':
                        const phoneSchema = zod_1.z.string().regex(/phone-regex/, 'Phone number must be a valid North American format (example: (514) 123-4567)');
                        const phoneResult = phoneSchema.safeParse('invalid');
                        (0, globals_1.expect)(phoneResult.success).toBe(false);
                        if (!phoneResult.success) {
                            (0, globals_1.expect)(phoneResult.error.issues[0].message).toContain('example:');
                        }
                        break;
                }
            });
        });
        (0, globals_1.test)('should enforce consistent language and tone', () => {
            // Error messages should be:
            // - Polite and helpful
            // - Clear about what's wrong
            // - Provide guidance on how to fix
            // - Use consistent language patterns
            const goodMessagePatterns = [
                /please enter/i,
                /must be/i,
                /should be/i,
                /example:/i,
                /between \d+ and \d+/i,
                /valid .+ format/i
            ];
            const badMessagePatterns = [
                /invalid/i, // Too vague without explanation
                /error/i, // Doesn't help user understand what to do
                /wrong/i, // Negative tone
            ];
            // Test that good patterns are used appropriately
            const emailMessage = 'Please enter a valid email address (example: user@domain.com)';
            const nameMessage = 'First name is required (example: Jean)';
            const rangeMessage = 'Age must be between 18 and 120 years';
            (0, globals_1.expect)(goodMessagePatterns.some(pattern => pattern.test(emailMessage))).toBe(true);
            (0, globals_1.expect)(goodMessagePatterns.some(pattern => pattern.test(nameMessage))).toBe(true);
            (0, globals_1.expect)(goodMessagePatterns.some(pattern => pattern.test(rangeMessage))).toBe(true);
        });
    });
    (0, globals_1.describe)('Field-Specific Validation Standards', () => {
        (0, globals_1.test)('should validate Quebec-specific field requirements', () => {
            // Quebec-specific validations should be properly handled
            const quebecFields = {
                postalCode: zod_1.z.string().regex(/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)'),
                city: zod_1.z.string().regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens'),
                phone: zod_1.z.string().regex(/^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)')
            };
            // Test valid Quebec formats
            (0, globals_1.expect)(quebecFields.postalCode.safeParse('H1A 1B1').success).toBe(true);
            (0, globals_1.expect)(quebecFields.city.safeParse('Montréal').success).toBe(true);
            (0, globals_1.expect)(quebecFields.phone.safeParse('(514) 123-4567').success).toBe(true);
            // Test invalid formats have helpful messages
            Object.values(quebecFields).forEach(schema => {
                const result = schema.safeParse('invalid');
                (0, globals_1.expect)(result.success).toBe(false);
                if (!result.success) {
                    (0, globals_1.expect)(result.error.issues[0].message).toContain('example:');
                }
            });
        });
        (0, globals_1.test)('should validate numeric fields have proper constraints', () => {
            const numericValidations = [
                {
                    name: 'amount',
                    schema: zod_1.z.string().regex(/^\d+(\.\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),
                    valid: ['125.50', '0.99', '1000'],
                    invalid: ['125.555', 'abc', '']
                },
                {
                    name: 'capacity',
                    schema: zod_1.z.number().min(1, 'Capacity must be between 1 and 500 people').max(500, 'Capacity must be between 1 and 500 people'),
                    valid: [1, 50, 500],
                    invalid: [0, 501, -1]
                }
            ];
            numericValidations.forEach(({ name, schema, valid, invalid }) => {
                // Test valid inputs
                valid.forEach(input => {
                    (0, globals_1.expect)(schema.safeParse(input).success).toBe(true);
                });
                // Test invalid inputs have helpful messages
                invalid.forEach(input => {
                    const result = schema.safeParse(input);
                    (0, globals_1.expect)(result.success).toBe(false);
                    if (!result.success && name === 'amount') {
                        (0, globals_1.expect)(result.error.issues[0].message).toContain('example:');
                    }
                });
            });
        });
    });
});
/**
 * Future Form Compliance Guard
 * Utility functions to ensure new forms follow validation standards
 */
(0, globals_1.describe)('Future Form Compliance Guards', () => {
    (0, globals_1.describe)('Validation Schema Checkers', () => {
        (0, globals_1.test)('should validate that schema has proper error messages', () => {
            const validateSchemaCompliance = (schema, fieldName) => {
                const result = schema.safeParse('');
                if (!result.success) {
                    const errorMessage = result.error.issues[0].message;
                    // Check for required elements in error messages
                    const hasExample = errorMessage.includes('example:');
                    const hasGuidance = errorMessage.includes('must be') || errorMessage.includes('should be') || errorMessage.includes('please');
                    const isNotVague = !errorMessage.match(/^(invalid|error|wrong)$/i);
                    return {
                        hasExample,
                        hasGuidance,
                        isNotVague,
                        errorMessage,
                        compliance: hasGuidance && isNotVague
                    };
                }
                return { compliance: true };
            };
            // Test with compliant schema
            const goodSchema = zod_1.z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)');
            const goodResult = validateSchemaCompliance(goodSchema, 'email');
            (0, globals_1.expect)(goodResult.compliance).toBe(true);
            // Test with non-compliant schema
            const badSchema = zod_1.z.string().email('Invalid email');
            const badResult = validateSchemaCompliance(badSchema, 'email');
            (0, globals_1.expect)(badResult.compliance).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,