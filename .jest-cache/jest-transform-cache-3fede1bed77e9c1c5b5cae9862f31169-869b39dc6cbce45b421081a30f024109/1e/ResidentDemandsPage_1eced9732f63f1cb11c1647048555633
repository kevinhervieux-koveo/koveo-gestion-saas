8cd175eae1815ae3b8d7fa3960866e76
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ResidentDemandsPage;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const lucide_react_1 = require("lucide-react");
const button_1 = require("@/components/ui/button");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const select_1 = require("@/components/ui/select");
const dialog_1 = require("@/components/ui/dialog");
const textarea_1 = require("@/components/ui/textarea");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const form_1 = require("@/components/ui/form");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const toastUtils_1 = require("@/lib/toastUtils");
const header_1 = require("@/components/layout/header");
const demand_details_popup_1 = __importDefault(require("@/components/demands/demand-details-popup"));
const DemandFilters_1 = require("@/components/common/DemandFilters");
const document_management_1 = require("@/components/document-management");
const use_language_1 = require("@/hooks/use-language");
const validations_1 = require("@/lib/validations");
// Form schemas
const demandSchema = validations_1.schemas.demand;
const statusColors = {
    submitted: 'bg-blue-100 text-blue-800',
    under_review: 'bg-yellow-100 text-yellow-800',
    approved: 'bg-green-100 text-green-800',
    rejected: 'bg-red-100 text-red-800',
    in_progress: 'bg-purple-100 text-purple-800',
    completed: 'bg-emerald-100 text-emerald-800',
    cancelled: 'bg-gray-100 text-gray-800',
};
const typeLabels = {
    maintenance: 'Maintenance',
    complaint: 'Complaint',
    information: 'Information',
    other: 'Other',
};
/**
 *
 */
function ResidentDemandsPage() {
    const { t } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('all');
    const [typeFilter, setTypeFilter] = (0, react_1.useState)('all');
    const [selectedDemand, setSelectedDemand] = (0, react_1.useState)(null);
    const [isNewDemandOpen, setIsNewDemandOpen] = (0, react_1.useState)(false);
    const [isDetailsOpen, setIsDetailsOpen] = (0, react_1.useState)(false);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const [selectedFiles, setSelectedFiles] = (0, react_1.useState)([]);
    const [uploadedAttachments, setUploadedAttachments] = (0, react_1.useState)([]);
    const itemsPerPage = 10;
    // Fetch demands
    const { data: demands = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/demands'],
        refetchInterval: 30000, // Refresh every 30 seconds
    });
    // Fetch buildings
    const { data: buildings = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/manager/buildings'],
        select: (data) => data?.buildings || [],
    });
    // Fetch residences
    const { data: residences = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences'],
    });
    // Fetch current user
    const { data: currentUser } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
    });
    // Provide default user to prevent type errors
    const defaultUser = currentUser &&
        typeof currentUser === 'object' &&
        'id' in currentUser &&
        'role' in currentUser &&
        'email' in currentUser
        ? currentUser
        : { id: '', role: 'tenant', email: '' };
    // Upload context for secure storage (using useMemo to ensure it updates with defaultUser)
    const uploadContext = (0, react_1.useMemo)(() => ({
        type: 'demands',
        organizationId: 'default',
        userRole: defaultUser?.role || 'resident',
        userId: defaultUser?.id
    }), [defaultUser?.role, defaultUser?.id]);
    // File upload helper function
    const uploadFiles = async (files) => {
        if (files.length === 0)
            return [];
        const formData = new FormData();
        files.forEach((file) => {
            formData.append('file', file);
        });
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData,
        });
        if (!response.ok) {
            throw new Error('Failed to upload files');
        }
        const result = await response.json();
        return result.fileUrls || [];
    };
    // Create demand mutation
    const createDemandMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            // Upload files first if any are selected
            const attachments = selectedFiles.length > 0 ? await uploadFiles(selectedFiles) : [];
            const response = await fetch('/api/demands', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ...data,
                    attachments,
                    status: 'submitted',
                    // Convert empty strings to undefined for optional UUID fields
                    buildingId: data.buildingId || undefined,
                    residenceId: data.residenceId || undefined,
                    assignationBuildingId: data.assignationBuildingId || undefined,
                    assignationResidenceId: data.assignationResidenceId || undefined,
                }),
            });
            if (!response.ok) {
                throw new Error('Failed to create demand');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/demands'] });
            setIsNewDemandOpen(false);
            newDemandForm.reset();
            setSelectedFiles([]);
            setUploadedAttachments([]);
            toastUtils_1.toastUtils.createSuccess('Demand');
        },
        onError: () => {
            toastUtils_1.toastUtils.createError('demand');
        },
    });
    // Forms
    const newDemandForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(demandSchema),
        defaultValues: {
            type: 'maintenance',
            description: '',
            buildingId: undefined,
            residenceId: undefined,
            assignationBuildingId: undefined,
            assignationResidenceId: undefined,
        },
    });
    // Filter demands
    const filteredDemands = demands.filter((demand) => {
        const matchesSearch = demand.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
            typeLabels[demand.type].toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = statusFilter === 'all' || demand.status === statusFilter;
        const matchesType = typeFilter === 'all' || demand.type === typeFilter;
        return matchesSearch && matchesStatus && matchesType;
    });
    // Group demands by status (no draft demands since we removed draft logic)
    const activeDemands = filteredDemands.filter((d) => ['submitted', 'under_review', 'approved', 'in_progress'].includes(d.status));
    const completedDemands = filteredDemands.filter((d) => ['completed', 'rejected', 'cancelled'].includes(d.status));
    // Pagination calculations
    const totalPages = Math.ceil(filteredDemands.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentDemands = filteredDemands.slice(startIndex, endIndex);
    const handlePreviousPage = () => {
        setCurrentPage((prev) => Math.max(1, prev - 1));
    };
    const handleNextPage = () => {
        setCurrentPage((prev) => Math.min(totalPages, prev + 1));
    };
    const handlePageClick = (page) => {
        setCurrentPage(page);
    };
    const handleCreateDemand = (data) => {
        // Create demand directly as submitted (no draft logic)
        createDemandMutation.mutate(data);
    };
    const handleDemandClick = (demand) => {
        setSelectedDemand(demand);
        setIsDetailsOpen(true);
    };
    const handleDemandUpdated = () => {
        queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/demands'] });
    };
    const DemandCard = ({ demand }) => {
        const building = buildings.find((b) => b.id === demand.buildingId);
        const residence = residences.find((r) => r.id === demand.residenceId);
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'cursor-pointer hover:shadow-md transition-shadow', onClick: () => handleDemandClick(demand), children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'pb-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-between', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', children: typeLabels[demand.type] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[demand.status], children: demand.status.replace('_', ' ') })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'text-base line-clamp-2', children: [demand.description.substring(0, 100), demand.description.length > 100 && '...'] })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-0', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-muted-foreground space-y-1', children: [(0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Building:" }), " ", building?.name || 'Unknown'] }), residence && ((0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Residence:" }), " ", residence.name] })), (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Created:" }), " ", new Date(demand.createdAt).toLocaleDateString()] })] }) })] }));
    }; /**
     * If function.
     * @param isLoading - IsLoading parameter.
     */ /**
    * If function.
    * @param isLoading - IsLoading parameter.
    */
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myDemands'), subtitle: t('submitAndTrackRequests') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-center h-64', children: (0, jsx_runtime_1.jsx)("div", { className: 'text-center', children: "Loading demands..." }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myDemands'), subtitle: t('submitAndTrackRequests') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-end', children: (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isNewDemandOpen, onOpenChange: setIsNewDemandOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'h-4 w-4 mr-2' }), t('newDemand')] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-lg max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: t('createNewDemand') }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: "Submit a new request or complaint" })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...newDemandForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: newDemandForm.handleSubmit(handleCreateDemand), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: newDemandForm.control, name: 'type', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Type" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectType') }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'maintenance', children: "Maintenance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'complaint', children: "Complaint" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'information', children: "Information" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'other', children: "Other" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: newDemandForm.control, name: 'buildingId', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Building" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectBuilding') }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: buildings.map((building) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: building.id, children: building.name }, building.id))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: newDemandForm.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: t('describeRequestDetail'), className: 'min-h-[100px]', ...field, value: field.value }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)("label", { className: 'text-sm font-medium', children: "Attachments (Optional)" }), (0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: (file, extractedText) => {
                                                                        if (file) {
                                                                            setSelectedFiles([file]);
                                                                        }
                                                                    }, formType: "demands", uploadContext: uploadContext, showAiToggle: false, allowedFileTypes: ['image/*', 'application/pdf', '.doc', '.docx', '.txt'], maxFileSize: 10 }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-muted-foreground', children: "Upload photos, documents, or screenshots. Camera supported for mobile. Max 10MB per file." })] }), (0, jsx_runtime_1.jsx)(dialog_1.DialogFooter, { children: (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: createDemandMutation.isPending, "data-testid": "button-create-demand", children: createDemandMutation.isPending ? 'Creating...' : 'Create Demand' }) })] }) })] })] }) }), (0, jsx_runtime_1.jsx)(DemandFilters_1.DemandFilters, { filters: {
                                searchTerm,
                                statusFilter,
                                typeFilter,
                            }, handlers: {
                                onSearchChange: setSearchTerm,
                                onStatusChange: setStatusFilter,
                                onTypeChange: setTypeFilter,
                            }, userRole: 'resident' }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6', children: [totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-center gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handlePreviousPage, disabled: currentPage === 1, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeft, { className: 'h-4 w-4' }), "Previous"] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex gap-1', children: Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                                let pageNum;
                                                if (totalPages <= 5) {
                                                    pageNum = i + 1;
                                                }
                                                else if (currentPage <= 3) {
                                                    pageNum = i + 1;
                                                }
                                                else if (currentPage >= totalPages - 2) {
                                                    pageNum = totalPages - 4 + i;
                                                }
                                                else {
                                                    pageNum = currentPage - 2 + i;
                                                }
                                                return ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: currentPage === pageNum ? 'default' : 'outline', size: 'sm', onClick: () => handlePageClick(pageNum), children: pageNum }, pageNum));
                                            }) }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handleNextPage, disabled: currentPage === totalPages, children: ["Next", (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: 'h-4 w-4' })] })] })), filteredDemands.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center text-sm text-muted-foreground', children: ["Showing ", startIndex + 1, " to ", Math.min(endIndex, filteredDemands.length), " of", ' ', filteredDemands.length, " demands"] })), currentDemands.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6 text-center', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground', children: t('noDemandsFound') }) }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'grid gap-4 md:grid-cols-2 lg:grid-cols-3', children: currentDemands.map((demand) => ((0, jsx_runtime_1.jsx)(DemandCard, { demand: demand }, demand.id))) }))] }), (0, jsx_runtime_1.jsx)(demand_details_popup_1.default, { demand: selectedDemand, isOpen: isDetailsOpen, onClose: () => setIsDetailsOpen(false), user: defaultUser, onDemandUpdated: handleDemandUpdated })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,