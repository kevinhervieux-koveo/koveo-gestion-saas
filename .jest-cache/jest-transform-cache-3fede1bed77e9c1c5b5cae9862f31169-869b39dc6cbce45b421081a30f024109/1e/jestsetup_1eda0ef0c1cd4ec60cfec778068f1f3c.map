{"file":"/home/runner/workspace/jest.setup.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/jest.setup.ts"],"sourcesContent":["// Jest setup file - global test configuration\nimport '@testing-library/jest-dom';\n\n// Performance: Mock expensive external dependencies\njest.mock('@google/genai', () => ({\n  GoogleGenAI: jest.fn().mockImplementation(() => ({\n    getGenerativeModel: jest.fn().mockReturnValue({\n      generateContent: jest.fn().mockResolvedValue({\n        response: {\n          text: () => 'Mock AI response',\n        },\n      }),\n    }),\n  })),\n}));\n\n// Performance: Mock database for unit tests to avoid network calls\njest.mock('./server/db', () => {\n  const { mockDb, mockSql } = require('./tests/mocks/database');\n  return {\n    db: mockDb,\n    sql: mockSql,\n    pool: mockSql,\n  };\n});\n\n// Performance: Mock Neon database for faster unit tests\njest.mock('@neondatabase/serverless', () => ({\n  neon: jest.fn(() => {\n    const { mockSql } = require('./tests/mocks/database');\n    return mockSql;\n  }),\n}));\nimport 'whatwg-fetch';\n\n// Add TransformStream polyfill for MSW compatibility\nif (typeof TransformStream === 'undefined') {\n  const { TransformStream } = require('stream/web');\n  (global as any).TransformStream = TransformStream;\n}\n\n// Add ReadableStream polyfill\nif (typeof ReadableStream === 'undefined') {\n  const { ReadableStream } = require('stream/web');\n  (global as any).ReadableStream = ReadableStream;\n}\n\n// Add WritableStream polyfill\nif (typeof WritableStream === 'undefined') {\n  const { WritableStream } = require('stream/web');\n  (global as any).WritableStream = WritableStream;\n}\n\n// Add BroadcastChannel polyfill for MSW\nif (typeof BroadcastChannel === 'undefined') {\n  (global as any).BroadcastChannel = class {\n    constructor(name: string) {}\n    postMessage(message: any) {}\n    addEventListener(event: string, handler: Function) {}\n    removeEventListener(event: string, handler: Function) {}\n    close() {}\n  };\n}\n\n// Mock runQuery function for integration tests\nglobal.runQuery = jest.fn(() => Promise.resolve([]));\n\n// Set up test database URL if missing\nif (!process.env.DATABASE_URL) {\n  process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/koveo_test';\n}\n\n// Mock implementations for browser APIs\n(global as any).ResizeObserver = function () {\n  return {\n    observe: function () {},\n    unobserve: function () {},\n    disconnect: function () {},\n  };\n};\n\n(global as any).IntersectionObserver = function () {\n  return {\n    observe: function () {},\n    unobserve: function () {},\n    disconnect: function () {},\n  };\n};\n\n// Add TextEncoder/TextDecoder polyfills for Node.js environment\nif (typeof TextEncoder === 'undefined') {\n  const { TextEncoder, TextDecoder } = require('util');\n  (global as any).TextEncoder = TextEncoder;\n  (global as any).TextDecoder = TextDecoder;\n}\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: function (query: string) {\n    return {\n      matches: false,\n      media: query,\n      onchange: null,\n      addListener: function () {}, // deprecated\n      removeListener: function () {}, // deprecated\n      addEventListener: function () {},\n      removeEventListener: function () {},\n      dispatchEvent: function () {},\n    };\n  },\n});\n\n// Mock sessionStorage and localStorage\nconst createMockStorage = () => ({\n  getItem: function () {\n    return null;\n  },\n  setItem: function () {},\n  removeItem: function () {},\n  clear: function () {},\n  length: 0,\n  key: function () {\n    return null;\n  },\n});\n\nObject.defineProperty(window, 'sessionStorage', {\n  value: createMockStorage(),\n});\n\nObject.defineProperty(window, 'localStorage', {\n  value: createMockStorage(),\n});\n\n// Console error suppression will be handled by individual test files if needed\n"],"version":3}