e9caaf958594eabdf2baed6b442a44c2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
(0, globals_1.describe)('Residence Update API', () => {
    let testOrganizationId;
    let testBuildingId;
    let testResidenceId;
    (0, globals_1.beforeAll)(async () => {
        // Create a test organization
        const [org] = await db_1.db
            .insert(schema_1.organizations)
            .values({
            name: 'Test Residence Update Org',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1H 1H1',
            isActive: true,
        })
            .returning();
        testOrganizationId = org.id;
        // Create a test building
        const [building] = await db_1.db
            .insert(schema_1.buildings)
            .values({
            organizationId: testOrganizationId,
            name: 'Test Building for Updates',
            address: '456 Update Ave',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H2H 2H2',
            buildingType: 'condo',
            totalUnits: 10,
            totalFloors: 3,
            isActive: true,
        })
            .returning();
        testBuildingId = building.id;
        // Create a test residence
        const [residence] = await db_1.db
            .insert(schema_1.residences)
            .values({
            buildingId: testBuildingId,
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1.5',
            balcony: true,
            parkingSpaceNumbers: ['P1'],
            storageSpaceNumbers: ['S1'],
            ownershipPercentage: '2.5',
            monthlyFees: '350.00',
            isActive: true,
        })
            .returning();
        testResidenceId = residence.id;
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test data
        await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, testBuildingId));
        await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, testBuildingId));
        await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testOrganizationId));
    });
    (0, globals_1.beforeEach)(async () => {
        // Reset residence to known state before each test
        await db_1.db
            .update(schema_1.residences)
            .set({
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1.5',
            balcony: true,
            parkingSpaceNumbers: ['P1'],
            storageSpaceNumbers: ['S1'],
            ownershipPercentage: '2.5',
            monthlyFees: '350.00',
            isActive: true,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId));
    });
    (0, globals_1.test)('should update residence with valid numeric data', async () => {
        const updateData = {
            unitNumber: '102',
            floor: 2,
            squareFootage: 1200,
            bedrooms: 3,
            bathrooms: 2.0,
            balcony: false,
            parkingSpaceNumbers: ['P2', 'P3'],
            storageSpaceNumbers: ['S2'],
            ownershipPercentage: 3.0,
            monthlyFees: 425.50,
        };
        const [updated] = await db_1.db
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('102');
        (0, globals_1.expect)(updated.floor).toBe(2);
        (0, globals_1.expect)(Number(updated.squareFootage)).toBe(1200);
        (0, globals_1.expect)(updated.bedrooms).toBe(3);
        (0, globals_1.expect)(Number(updated.bathrooms)).toBe(2.0);
        (0, globals_1.expect)(updated.balcony).toBe(false);
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toEqual(['P2', 'P3']);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toEqual(['S2']);
        (0, globals_1.expect)(Number(updated.ownershipPercentage)).toBe(3.0);
        (0, globals_1.expect)(Number(updated.monthlyFees)).toBe(425.50);
    });
    (0, globals_1.test)('should handle null values for optional fields', async () => {
        const updateData = {
            unitNumber: '103',
            floor: 1,
            squareFootage: null,
            bedrooms: 1,
            bathrooms: null,
            balcony: false,
            parkingSpaceNumbers: [],
            storageSpaceNumbers: [],
            ownershipPercentage: null,
            monthlyFees: null,
        };
        const [updated] = await db_1.db
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('103');
        (0, globals_1.expect)(updated.squareFootage).toBeNull();
        (0, globals_1.expect)(updated.bathrooms).toBeNull();
        (0, globals_1.expect)(updated.ownershipPercentage).toBeNull();
        (0, globals_1.expect)(updated.monthlyFees).toBeNull();
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toEqual([]);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toEqual([]);
    });
    (0, globals_1.test)('should handle string numbers (converted to numeric)', async () => {
        const updateData = {
            unitNumber: '104',
            floor: 2,
            squareFootage: '1500', // String number
            bedrooms: 2,
            bathrooms: '2.5', // String number
            balcony: true,
            parkingSpaceNumbers: ['P4'],
            storageSpaceNumbers: ['S4'],
            ownershipPercentage: '4.25', // String number
            monthlyFees: '500.75', // String number
        };
        const [updated] = await db_1.db
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('104');
        (0, globals_1.expect)(Number(updated.squareFootage)).toBe(1500);
        (0, globals_1.expect)(Number(updated.bathrooms)).toBe(2.5);
        (0, globals_1.expect)(Number(updated.ownershipPercentage)).toBe(4.25);
        (0, globals_1.expect)(Number(updated.monthlyFees)).toBe(500.75);
    });
    (0, globals_1.test)('should handle empty strings as null for optional fields', async () => {
        const updateData = {
            unitNumber: '105',
            floor: 1,
            squareFootage: '', // Empty string should become null
            bedrooms: 1,
            bathrooms: '', // Empty string should become null
            balcony: false,
            parkingSpaceNumbers: [],
            storageSpaceNumbers: [],
            ownershipPercentage: '', // Empty string should become null
            monthlyFees: '', // Empty string should become null
        };
        // Process empty strings to null (mimicking backend logic)
        const processedData = {
            ...updateData,
            squareFootage: updateData.squareFootage === '' ? null : updateData.squareFootage,
            bathrooms: updateData.bathrooms === '' ? null : updateData.bathrooms,
            ownershipPercentage: updateData.ownershipPercentage === '' ? null : updateData.ownershipPercentage,
            monthlyFees: updateData.monthlyFees === '' ? null : updateData.monthlyFees,
            updatedAt: new Date(),
        };
        const [updated] = await db_1.db
            .update(schema_1.residences)
            .set(processedData)
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('105');
        (0, globals_1.expect)(updated.squareFootage).toBeNull();
        (0, globals_1.expect)(updated.bathrooms).toBeNull();
        (0, globals_1.expect)(updated.ownershipPercentage).toBeNull();
        (0, globals_1.expect)(updated.monthlyFees).toBeNull();
    });
    (0, globals_1.test)('should preserve arrays correctly', async () => {
        const updateData = {
            unitNumber: '106',
            floor: 2,
            squareFootage: 1100,
            bedrooms: 2,
            bathrooms: 2.0,
            balcony: true,
            parkingSpaceNumbers: ['P5', 'P6', 'P7'],
            storageSpaceNumbers: ['S5', 'S6'],
            ownershipPercentage: 2.75,
            monthlyFees: 375.25,
        };
        const [updated] = await db_1.db
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toEqual(['P5', 'P6', 'P7']);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toEqual(['S5', 'S6']);
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toHaveLength(3);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toHaveLength(2);
    });
    (0, globals_1.test)('should handle decimal precision correctly', async () => {
        const updateData = {
            unitNumber: '107',
            floor: 3,
            squareFootage: 1234.56, // Should preserve to 2 decimal places
            bedrooms: 3,
            bathrooms: 2.5, // Should preserve to 1 decimal place
            balcony: true,
            parkingSpaceNumbers: ['P8'],
            storageSpaceNumbers: ['S8'],
            ownershipPercentage: 3.1234, // Should preserve to 4 decimal places
            monthlyFees: 456.78, // Should preserve to 2 decimal places
        };
        const [updated] = await db_1.db
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(Number(updated.squareFootage)).toBe(1234.56);
        (0, globals_1.expect)(Number(updated.bathrooms)).toBe(2.5);
        (0, globals_1.expect)(Number(updated.ownershipPercentage)).toBe(3.1234);
        (0, globals_1.expect)(Number(updated.monthlyFees)).toBe(456.78);
    });
    (0, globals_1.test)('should maintain data integrity across multiple updates', async () => {
        // First update
        await db_1.db
            .update(schema_1.residences)
            .set({
            unitNumber: '108',
            squareFootage: 1000,
            bathrooms: '1.5',
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId));
        // Second update
        await db_1.db
            .update(schema_1.residences)
            .set({
            monthlyFees: 400.00,
            ownershipPercentage: 2.75,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId));
        // Verify final state
        const [final] = await db_1.db
            .select()
            .from(schema_1.residences)
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId));
        (0, globals_1.expect)(final).toBeDefined();
        (0, globals_1.expect)(final.unitNumber).toBe('108');
        (0, globals_1.expect)(Number(final.squareFootage)).toBe(1000);
        (0, globals_1.expect)(Number(final.bathrooms)).toBe(1.5);
        (0, globals_1.expect)(Number(final.monthlyFees)).toBe(400.00);
        (0, globals_1.expect)(Number(final.ownershipPercentage)).toBe(2.75);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,