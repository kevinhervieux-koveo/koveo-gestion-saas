{"file":"/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/utils/keyDef/readNextDescriptor.js","mappings":"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","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/utils/keyDef/readNextDescriptor.js"],"sourcesContent":["'use strict';\n\nvar bracketDict = /*#__PURE__*/ function(bracketDict) {\n    bracketDict[\"{\"] = \"}\";\n    bracketDict[\"[\"] = \"]\";\n    return bracketDict;\n}(bracketDict || {});\n/**\n * Read the next key definition from user input\n *\n * Describe key per `{descriptor}` or `[descriptor]`.\n * Everything else will be interpreted as a single character as descriptor - e.g. `a`.\n * Brackets `{` and `[` can be escaped by doubling - e.g. `foo[[bar` translates to `foo[bar`.\n * A previously pressed key can be released per `{/descriptor}`.\n * Keeping the key pressed can be written as `{descriptor>}`.\n * When keeping the key pressed you can choose how long the key is pressed `{descriptor>3}`.\n * You can then release the key per `{descriptor>3/}` or keep it pressed and continue with the next key.\n */ function readNextDescriptor(text, context) {\n    let pos = 0;\n    const startBracket = text[pos] in bracketDict ? text[pos] : '';\n    pos += startBracket.length;\n    const isEscapedChar = new RegExp(`^\\\\${startBracket}{2}`).test(text);\n    const type = isEscapedChar ? '' : startBracket;\n    return {\n        type,\n        ...type === '' ? readPrintableChar(text, pos, context) : readTag(text, pos, type, context)\n    };\n}\nfunction readPrintableChar(text, pos, context) {\n    const descriptor = text[pos];\n    assertDescriptor(descriptor, text, pos, context);\n    pos += descriptor.length;\n    return {\n        consumedLength: pos,\n        descriptor,\n        releasePrevious: false,\n        releaseSelf: true,\n        repeat: 1\n    };\n}\nfunction readTag(text, pos, startBracket, context) {\n    var _text_slice_match, _text_slice_match1;\n    const releasePreviousModifier = text[pos] === '/' ? '/' : '';\n    pos += releasePreviousModifier.length;\n    const escapedDescriptor = startBracket === '{' && text[pos] === '\\\\';\n    pos += Number(escapedDescriptor);\n    const descriptor = escapedDescriptor ? text[pos] : (_text_slice_match = text.slice(pos).match(startBracket === '{' ? /^\\w+|^[^}>/]/ : /^\\w+/)) === null || _text_slice_match === undefined ? undefined : _text_slice_match[0];\n    assertDescriptor(descriptor, text, pos, context);\n    pos += descriptor.length;\n    var _text_slice_match_;\n    const repeatModifier = (_text_slice_match_ = (_text_slice_match1 = text.slice(pos).match(/^>\\d+/)) === null || _text_slice_match1 === undefined ? undefined : _text_slice_match1[0]) !== null && _text_slice_match_ !== undefined ? _text_slice_match_ : '';\n    pos += repeatModifier.length;\n    const releaseSelfModifier = text[pos] === '/' || !repeatModifier && text[pos] === '>' ? text[pos] : '';\n    pos += releaseSelfModifier.length;\n    const expectedEndBracket = bracketDict[startBracket];\n    const endBracket = text[pos] === expectedEndBracket ? expectedEndBracket : '';\n    if (!endBracket) {\n        throw new Error(getErrorMessage([\n            !repeatModifier && 'repeat modifier',\n            !releaseSelfModifier && 'release modifier',\n            `\"${expectedEndBracket}\"`\n        ].filter(Boolean).join(' or '), text[pos], text, context));\n    }\n    pos += endBracket.length;\n    return {\n        consumedLength: pos,\n        descriptor,\n        releasePrevious: !!releasePreviousModifier,\n        repeat: repeatModifier ? Math.max(Number(repeatModifier.substr(1)), 1) : 1,\n        releaseSelf: hasReleaseSelf(releaseSelfModifier, repeatModifier)\n    };\n}\nfunction assertDescriptor(descriptor, text, pos, context) {\n    if (!descriptor) {\n        throw new Error(getErrorMessage('key descriptor', text[pos], text, context));\n    }\n}\nfunction hasReleaseSelf(releaseSelfModifier, repeatModifier) {\n    if (releaseSelfModifier) {\n        return releaseSelfModifier === '/';\n    }\n    if (repeatModifier) {\n        return false;\n    }\n}\nfunction getErrorMessage(expected, found, text, context) {\n    return `Expected ${expected} but found \"${found !== null && found !== undefined ? found : ''}\" in \"${text}\"\n    See ${context === 'pointer' ? `https://testing-library.com/docs/user-event/pointer#pressing-a-button-or-touching-the-screen` : `https://testing-library.com/docs/user-event/keyboard`}\n    for more information about how userEvent parses your input.`;\n}\n\nexports.readNextDescriptor = readNextDescriptor;\n"],"version":3}