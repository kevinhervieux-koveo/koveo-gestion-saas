9d46c8745507372ffffa1e7aacf7ad29
'use strict';
var UI = require('../../document/UI.js');
require('../../utils/dataTransfer/Clipboard.js');
var resolveCaretPosition = require('./resolveCaretPosition.js');
function modifySelectionPerMouseMove(selectionRange, { document, target, node, offset }) {
    const selectionFocus = resolveCaretPosition.resolveCaretPosition({
        target,
        node,
        offset
    });
    if ('node' in selectionRange) {
        // When the mouse is dragged outside of an input/textarea,
        // the selection is extended to the beginning or end of the input
        // depending on pointer position.
        // TODO: extend selection according to pointer position
        /* istanbul ignore else */ if (selectionFocus.node === selectionRange.node) {
            const anchorOffset = selectionFocus.offset < selectionRange.start ? selectionRange.end : selectionRange.start;
            const focusOffset = selectionFocus.offset > selectionRange.end || selectionFocus.offset < selectionRange.start ? selectionFocus.offset : selectionRange.end;
            UI.setUISelection(selectionRange.node, {
                anchorOffset,
                focusOffset
            });
        }
    }
    else {
        const range = selectionRange.cloneRange();
        const cmp = range.comparePoint(selectionFocus.node, selectionFocus.offset);
        if (cmp < 0) {
            range.setStart(selectionFocus.node, selectionFocus.offset);
        }
        else if (cmp > 0) {
            range.setEnd(selectionFocus.node, selectionFocus.offset);
        }
        const selection = document.getSelection();
        selection === null || selection === undefined ? undefined : selection.removeAllRanges();
        selection === null || selection === undefined ? undefined : selection.addRange(range.cloneRange());
    }
}
exports.modifySelectionPerMouseMove = modifySelectionPerMouseMove;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L3NlbGVjdGlvbi9tb2RpZnlTZWxlY3Rpb25QZXJNb3VzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN6QyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUNqRCxJQUFJLG9CQUFvQixHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBRWhFLFNBQVMsMkJBQTJCLENBQUMsY0FBYyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO0lBQ25GLE1BQU0sY0FBYyxHQUFHLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDO1FBQzdELE1BQU07UUFDTixJQUFJO1FBQ0osTUFBTTtLQUNULENBQUMsQ0FBQztJQUNILElBQUksTUFBTSxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQzNCLDBEQUEwRDtRQUMxRCxpRUFBaUU7UUFDakUsaUNBQWlDO1FBQ2pDLHVEQUF1RDtRQUN2RCwwQkFBMEIsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztZQUM5RyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxHQUFHLElBQUksY0FBYyxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDO1lBQzVKLEVBQUUsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRTtnQkFDbkMsWUFBWTtnQkFDWixXQUFXO2FBQ2QsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztJQUNMLENBQUM7U0FBTSxDQUFDO1FBQ0osTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzFDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0UsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDVixLQUFLLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELENBQUM7YUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNqQixLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFDRCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUMsU0FBUyxLQUFLLElBQUksSUFBSSxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN4RixTQUFTLEtBQUssSUFBSSxJQUFJLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN2RyxDQUFDO0FBQ0wsQ0FBQztBQUVELE9BQU8sQ0FBQywyQkFBMkIsR0FBRywyQkFBMkIsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQvZGlzdC9janMvZXZlbnQvc2VsZWN0aW9uL21vZGlmeVNlbGVjdGlvblBlck1vdXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFVJID0gcmVxdWlyZSgnLi4vLi4vZG9jdW1lbnQvVUkuanMnKTtcbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciByZXNvbHZlQ2FyZXRQb3NpdGlvbiA9IHJlcXVpcmUoJy4vcmVzb2x2ZUNhcmV0UG9zaXRpb24uanMnKTtcblxuZnVuY3Rpb24gbW9kaWZ5U2VsZWN0aW9uUGVyTW91c2VNb3ZlKHNlbGVjdGlvblJhbmdlLCB7IGRvY3VtZW50LCB0YXJnZXQsIG5vZGUsIG9mZnNldCB9KSB7XG4gICAgY29uc3Qgc2VsZWN0aW9uRm9jdXMgPSByZXNvbHZlQ2FyZXRQb3NpdGlvbi5yZXNvbHZlQ2FyZXRQb3NpdGlvbih7XG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgbm9kZSxcbiAgICAgICAgb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCdub2RlJyBpbiBzZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICAvLyBXaGVuIHRoZSBtb3VzZSBpcyBkcmFnZ2VkIG91dHNpZGUgb2YgYW4gaW5wdXQvdGV4dGFyZWEsXG4gICAgICAgIC8vIHRoZSBzZWxlY3Rpb24gaXMgZXh0ZW5kZWQgdG8gdGhlIGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIGlucHV0XG4gICAgICAgIC8vIGRlcGVuZGluZyBvbiBwb2ludGVyIHBvc2l0aW9uLlxuICAgICAgICAvLyBUT0RPOiBleHRlbmQgc2VsZWN0aW9uIGFjY29yZGluZyB0byBwb2ludGVyIHBvc2l0aW9uXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovIGlmIChzZWxlY3Rpb25Gb2N1cy5ub2RlID09PSBzZWxlY3Rpb25SYW5nZS5ub2RlKSB7XG4gICAgICAgICAgICBjb25zdCBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgPCBzZWxlY3Rpb25SYW5nZS5zdGFydCA/IHNlbGVjdGlvblJhbmdlLmVuZCA6IHNlbGVjdGlvblJhbmdlLnN0YXJ0O1xuICAgICAgICAgICAgY29uc3QgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgPiBzZWxlY3Rpb25SYW5nZS5lbmQgfHwgc2VsZWN0aW9uRm9jdXMub2Zmc2V0IDwgc2VsZWN0aW9uUmFuZ2Uuc3RhcnQgPyBzZWxlY3Rpb25Gb2N1cy5vZmZzZXQgOiBzZWxlY3Rpb25SYW5nZS5lbmQ7XG4gICAgICAgICAgICBVSS5zZXRVSVNlbGVjdGlvbihzZWxlY3Rpb25SYW5nZS5ub2RlLCB7XG4gICAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGZvY3VzT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gc2VsZWN0aW9uUmFuZ2UuY2xvbmVSYW5nZSgpO1xuICAgICAgICBjb25zdCBjbXAgPSByYW5nZS5jb21wYXJlUG9pbnQoc2VsZWN0aW9uRm9jdXMubm9kZSwgc2VsZWN0aW9uRm9jdXMub2Zmc2V0KTtcbiAgICAgICAgaWYgKGNtcCA8IDApIHtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHNlbGVjdGlvbkZvY3VzLm5vZGUsIHNlbGVjdGlvbkZvY3VzLm9mZnNldCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHNlbGVjdGlvbkZvY3VzLm5vZGUsIHNlbGVjdGlvbkZvY3VzLm9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIHNlbGVjdGlvbiA9PT0gbnVsbCB8fCBzZWxlY3Rpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgc2VsZWN0aW9uID09PSBudWxsIHx8IHNlbGVjdGlvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlLmNsb25lUmFuZ2UoKSk7XG4gICAgfVxufVxuXG5leHBvcnRzLm1vZGlmeVNlbGVjdGlvblBlck1vdXNlTW92ZSA9IG1vZGlmeVNlbGVjdGlvblBlck1vdXNlTW92ZTtcbiJdLCJ2ZXJzaW9uIjozfQ==