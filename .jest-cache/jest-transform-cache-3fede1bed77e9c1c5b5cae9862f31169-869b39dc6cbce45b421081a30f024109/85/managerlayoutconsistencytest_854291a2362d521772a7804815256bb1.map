{"file":"/home/runner/workspace/tests/unit/manager-layout-consistency.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/manager-layout-consistency.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\ndescribe('Protected Pages Layout Consistency', () => {\n  const pagesPath = join(process.cwd(), 'client', 'src', 'pages');\n  \n  // Protected pages that use sidebar layout (should use flex-1 structure)\n  const protectedPages = [\n    // Manager pages\n    { path: 'manager/buildings.tsx', name: 'Manager Buildings' },\n    { path: 'manager/budget.tsx', name: 'Manager Budget' }, \n    { path: 'manager/bills.tsx', name: 'Manager Bills' },\n    { path: 'manager/common-spaces-stats.tsx', name: 'Manager Common Spaces Stats' },\n    { path: 'manager/user-management.tsx', name: 'Manager User Management' },\n    { path: 'manager/residences.tsx', name: 'Manager Residences' },\n    { path: 'manager/demands.tsx', name: 'Manager Demands' },\n    \n    // Dashboard pages\n    { path: 'dashboard/calendar.tsx', name: 'Dashboard Calendar' },\n    \n    // Residents pages  \n    { path: 'residents/common-spaces.tsx', name: 'Residents Common Spaces' },\n    { path: 'residents/my-calendar.tsx', name: 'Residents My Calendar' }\n  ];\n\n  // Public pages that should use min-h-screen (full page layout)\n  const publicPages = [\n    'home.tsx',\n    'pricing.tsx',\n    'features.tsx',\n    'terms-of-service.tsx',\n    'privacy-policy.tsx',\n    'story.tsx',\n    'security.tsx',\n    'not-found.tsx',\n    'auth/login.tsx',\n    'auth/forgot-password.tsx',\n    'auth/invitation-acceptance.tsx',\n    'auth/reset-password.tsx'\n  ];\n\n  describe('Protected Pages Layout Structure', () => {\n    protectedPages.forEach(({ path, name }) => {\n      it(`${name} should use flex-1 layout for sidebar compatibility`, () => {\n        const filePath = join(pagesPath, path);\n        let content: string;\n        \n        try {\n          content = readFileSync(filePath, 'utf8');\n        } catch (error) {\n          console.log(`Skipping ${path} - file not found`);\n          return;\n        }\n\n        // Check for problematic min-h-screen usage in main return statements\n        const minHeightScreenMatches = content.match(/<div className=['\"][^'\"]*min-h-screen[^'\"]*['\"][^>]*>/g);\n        \n        if (minHeightScreenMatches) {\n          console.log(`❌ ${path} still uses min-h-screen:`, minHeightScreenMatches);\n          expect(minHeightScreenMatches.length).toBe(0);\n        }\n\n        // Check for correct flex-1 layout structure\n        const hasCorrectLayout = content.includes(\"className='flex-1 flex flex-col overflow-hidden'\") ||\n                                content.includes('className=\"flex-1 flex flex-col overflow-hidden\"');\n        \n        expect(hasCorrectLayout).toBe(true);\n        console.log(`✅ ${path} uses correct layout structure`);\n      });\n    });\n  });\n\n  describe('Public Pages Layout Structure', () => {\n    publicPages.forEach(pageFile => {\n      it(`${pageFile} should correctly use min-h-screen for full page layout`, () => {\n        const filePath = join(pagesPath, pageFile);\n        let content: string;\n        \n        try {\n          content = readFileSync(filePath, 'utf8');\n        } catch (error) {\n          console.log(`Skipping ${pageFile} - file not found`);\n          return;\n        }\n\n        // Public pages should use min-h-screen since they don't have sidebar\n        const hasMinHeight = content.includes('min-h-screen');\n        expect(hasMinHeight).toBe(true);\n        console.log(`✅ ${pageFile} correctly uses min-h-screen for full page layout`);\n      });\n    });\n  });\n\n  describe('Sidebar Compatibility Verification', () => {\n    it('all protected pages should not break sidebar layout', () => {\n      let pagesWithIssues: string[] = [];\n      \n      protectedPages.forEach(({ path, name }) => {\n        try {\n          const filePath = join(pagesPath, path);\n          const content = readFileSync(filePath, 'utf8');\n          \n          // Should not use min-h-screen in main return\n          const hasMinHeightInMain = content.includes(\"return (\\n    <div className='min-h-screen\") ||\n                                    content.includes(\"return (\\n      <div className='min-h-screen\");\n          \n          // Should use proper layout structure\n          const hasCorrectLayout = content.includes(\"className='flex-1 flex flex-col overflow-hidden'\") ||\n                                  content.includes('className=\"flex-1 flex flex-col overflow-hidden\"');\n          \n          if (hasMinHeightInMain || !hasCorrectLayout) {\n            pagesWithIssues.push(name);\n            console.log(`❌ ${name} has layout issues - min-h-screen: ${hasMinHeightInMain}, correct layout: ${hasCorrectLayout}`);\n          } else {\n            console.log(`✅ ${name} uses correct sidebar-compatible layout`);\n          }\n        } catch (error) {\n          console.log(`Skipping ${path} - file not found`);\n        }\n      });\n      \n      expect(pagesWithIssues).toHaveLength(0);\n    });\n  });\n\n  describe('Regression Prevention', () => {\n    it('should detect layout incompatibilities in protected pages', () => {\n      let pagesWithIssues: string[] = [];\n      \n      protectedPages.forEach(({ path, name }) => {\n        try {\n          const filePath = join(pagesPath, path);\n          const content = readFileSync(filePath, 'utf8');\n          \n          // Look for problematic patterns that break sidebar\n          const problematicPatterns = [\n            'min-h-screen',\n            'h-screen', \n            'fixed inset-0',\n            'absolute inset-0'\n          ];\n          \n          const hasProblematicPattern = problematicPatterns.some(pattern => {\n            // Only flag main container divs, not nested ones\n            const regex = new RegExp(`return \\\\([\\\\s\\\\S]*?<div[^>]*${pattern}[^>]*>`, 'g');\n            return regex.test(content);\n          });\n          \n          if (hasProblematicPattern) {\n            pagesWithIssues.push(name);\n          }\n        } catch (error) {\n          // Skip files that don't exist\n        }\n      });\n      \n      if (pagesWithIssues.length > 0) {\n        console.log('❌ Protected pages with layout issues:', pagesWithIssues);\n      }\n      \n      expect(pagesWithIssues).toHaveLength(0);\n    });\n\n    it('should verify public pages maintain full-screen layout', () => {\n      let pagesWithIssues: string[] = [];\n      \n      publicPages.forEach(pageFile => {\n        try {\n          const filePath = join(pagesPath, pageFile);\n          const content = readFileSync(filePath, 'utf8');\n          \n          // Public pages should have min-h-screen\n          const hasMinHeightScreen = content.includes('min-h-screen');\n          \n          if (!hasMinHeightScreen) {\n            pagesWithIssues.push(pageFile);\n          }\n        } catch (error) {\n          // Skip files that don't exist\n        }\n      });\n      \n      if (pagesWithIssues.length > 0) {\n        console.log('❌ Public pages missing full-screen layout:', pagesWithIssues);\n      }\n      \n      expect(pagesWithIssues).toHaveLength(0);\n    });\n  });\n});"],"version":3}