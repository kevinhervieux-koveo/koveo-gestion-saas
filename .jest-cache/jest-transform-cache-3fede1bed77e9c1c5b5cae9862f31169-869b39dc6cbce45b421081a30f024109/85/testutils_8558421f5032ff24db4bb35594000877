9ae5b579036032fbf0d38d4332d65d36
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockFormData = exports.createMockBuilding = exports.createMockOrganization = exports.createMockUser = exports.render = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
// Mock providers that match the real application structure
const TestLanguageProvider = ({ children }) => {
    // Create a React context that provides the language hook values
    const mockLanguageContext = react_1.default.createContext({
        t: (key, options) => {
            if (options && typeof options === 'object') {
                let result = key;
                Object.keys(options).forEach(k => {
                    result = result.replace(new RegExp(`{{${k}}}`, 'g'), options[k]);
                });
                return result;
            }
            return key;
        },
        language: 'en',
        setLanguage: jest.fn(),
    });
    return ((0, jsx_runtime_1.jsx)(mockLanguageContext.Provider, { value: {
            t: jest.fn((key, options) => {
                if (options && typeof options === 'object') {
                    let result = key;
                    Object.keys(options).forEach(k => {
                        result = result.replace(new RegExp(`{{${k}}}`, 'g'), options[k]);
                    });
                    return result;
                }
                return key;
            }),
            language: 'en',
            setLanguage: jest.fn(),
        }, children: (0, jsx_runtime_1.jsx)("div", { "data-testid": "language-provider", children: children }) }));
};
const TestAuthProvider = ({ children }) => {
    return (0, jsx_runtime_1.jsx)("div", { "data-testid": "auth-provider", children: children });
};
const TestMobileMenuProvider = ({ children }) => {
    return (0, jsx_runtime_1.jsx)("div", { "data-testid": "mobile-menu-provider", children: children });
};
const AllTheProviders = ({ children }) => {
    const queryClient = new react_query_1.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
            },
            mutations: {
                retry: false,
            },
        },
    });
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: (0, jsx_runtime_1.jsx)(TestLanguageProvider, { children: (0, jsx_runtime_1.jsx)(TestAuthProvider, { children: (0, jsx_runtime_1.jsx)(TestMobileMenuProvider, { children: children }) }) }) }));
};
const customRender = (ui, options) => (0, react_2.render)(ui, { wrapper: AllTheProviders, ...options });
exports.render = customRender;
// Re-export everything
__exportStar(require("@testing-library/react"), exports);
// Create mock user data for tests
const createMockUser = (overrides = {}) => ({
    id: 'test-user-id',
    username: 'testuser',
    email: 'test@example.com',
    role: 'admin',
    firstName: 'Test',
    lastName: 'User',
    language: 'en',
    ...overrides,
});
exports.createMockUser = createMockUser;
// Create mock organization data for tests
const createMockOrganization = (overrides = {}) => ({
    id: 'test-org-id',
    name: 'Test Organization',
    type: 'property_management',
    ...overrides,
});
exports.createMockOrganization = createMockOrganization;
// Create mock building data for tests
const createMockBuilding = (overrides = {}) => ({
    id: 'test-building-id',
    name: 'Test Building',
    organizationId: 'test-org-id',
    address: '123 Test St',
    city: 'Montreal',
    province: 'QC',
    postalCode: 'H1A 1A1',
    ...overrides,
});
exports.createMockBuilding = createMockBuilding;
// Mock form data helpers
const createMockFormData = (overrides = {}) => ({
    title: 'Test Form',
    description: 'Test description',
    ...overrides,
});
exports.createMockFormData = createMockFormData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,