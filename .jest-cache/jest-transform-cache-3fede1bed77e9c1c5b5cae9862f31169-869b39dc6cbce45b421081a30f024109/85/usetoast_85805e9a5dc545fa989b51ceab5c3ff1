ccd3fb94abe4c2d672ab56c64ac177c8
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.reducer = void 0;
exports.useToast = useToast;
exports.toast = toast;
const React = __importStar(require("react"));
const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;
const actionTypes = {
    ADD_TOAST: 'ADD_TOAST',
    UPDATE_TOAST: 'UPDATE_TOAST',
    DISMISS_TOAST: 'DISMISS_TOAST',
    REMOVE_TOAST: 'REMOVE_TOAST',
};
let count = 0;
/**
 * Generates a unique identifier for toast notifications.
 * Uses an incrementing counter with overflow protection to ensure uniqueness.
 *
 * @returns {string} Unique string identifier for the toast.
 * @example
 * ```typescript
 * const id = genId(); // Returns '1', '2', '3', etc.
 * ```
 */
/**
 * GenId function.
 * @returns Function result.
 */
function genId() {
    count = (count + 1) % Number.MAX_SAFE_INTEGER;
    return count.toString();
}
const toastTimeouts = new Map();
const addToRemoveQueue = (toastId) => {
    if (toastTimeouts.has(toastId)) {
        return;
    }
    const timeout = setTimeout(() => {
        toastTimeouts.delete(toastId);
        dispatch({
            type: 'REMOVE_TOAST',
            toastId: toastId,
        });
    }, TOAST_REMOVE_DELAY);
    toastTimeouts.set(toastId, timeout);
};
/**
 * Reduce .
 * @param state - State parameter.
 * @param action - Action parameter.
 * @returns State result.
 */
/**
 * Reduce .
 * @param state - State parameter.
 * @param action - Action parameter.
 * @returns State result.
 */
const reducer = (state, action) => {
    /**
     * Switch function.
     * @param action.type - Action.type parameter.
     */
    switch (action.type) {
        case 'ADD_TOAST':
            return {
                ...state,
                toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
            };
        case 'UPDATE_TOAST':
            return {
                ...state,
                toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),
            };
        case 'DISMISS_TOAST': {
            const { toastId } = action;
            // ! Side effects ! - This could be extracted into a dismissToast() action,
            // but I'll keep it here for simplicity
            if (toastId) {
                addToRemoveQueue(toastId);
            }
            else {
                state.toasts.forEach((toast) => {
                    addToRemoveQueue(toast.id);
                });
            }
            return {
                ...state,
                toasts: state.toasts.map((t) => t.id === toastId || toastId === undefined
                    ? {
                        ...t,
                        open: false,
                    }
                    : t),
            };
        }
        case 'REMOVE_TOAST' /**
         * If function.
         * @param action.toastId === undefined - action.toastId === undefined parameter.
         */:
            if (action.toastId === undefined) {
                return {
                    ...state,
                    toasts: [],
                };
            }
            return {
                ...state,
                toasts: state.toasts.filter((t) => t.id !== action.toastId),
            };
    }
};
exports.reducer = reducer;
const listeners = [];
let memoryState = { toasts: [] };
/**
 * Dispatches an action to update the toast state and notifies all listeners.
 * Central state management function for the toast system.
 *
 * @param {Action} action - The action object containing type and payload data.
 * @example
 * ```typescript
 * dispatch({ type: 'ADD_TOAST', toast: newToast });
 * dispatch({ type: 'DISMISS_TOAST', toastId: 'toast-1' });
 * ```
 */
/**
 * Dispatch function.
 * @param action
 * @returns Function result.
 */
function dispatch(action) {
    memoryState = (0, exports.reducer)(memoryState, action);
    listeners.forEach((listener) => {
        listener(memoryState);
    });
}
/**
 * Creates and displays a new toast notification.
 * Automatically generates a unique ID and provides update/dismiss functions.
 *
 * @param {Toast} props - Toast configuration including title, description, and other display options.
 * @returns {object} Object containing toast ID and control functions (dismiss, update).
 * @example
 * ```typescript
 * const { dismiss, update } = toast({
 *   title: 'Success',
 *   description: 'Operation completed successfully'
 * });
 *
 * // Later dismiss the toast
 * dismiss();
 *
 * // Or update its content
 * update({ title: 'Updated Title' });
 * ```
 */
/**
 * Toast function.
 * @param root0
 * @returns Function result.
 */
function toast({ ...props }) {
    const id = genId();
    const update = (_props) => dispatch({
        type: 'UPDATE_TOAST',
        toast: { ...props, id },
    });
    const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });
    dispatch({
        type: 'ADD_TOAST',
        toast: {
            ...props,
            id,
            open: true,
            onOpenChange: (open) => {
                /**
                 * If function.
                 * @param !open - !open parameter.
                 */ /**
                * If function.
                * @param !open - !open parameter.
                */
                if (!open) {
                    dismiss();
                }
            },
        },
    });
    return {
        id: id,
        dismiss,
        update,
    };
}
/**
 * React hook for managing toast notifications in components.
 * Provides access to toast state and functions for creating and dismissing toasts.
 *
 * @returns {object} Toast state and control functions.
 * @returns {ToasterToast[]} Returns.toasts - Array of current active toasts.
 * @returns {Function} Returns.toast - Function to create new toast notifications.
 * @returns {Function} Returns.dismiss - Function to dismiss specific or all toasts.
 * @example
 * ```typescript
 * function MyComponent() {
 *   const { toast, dismiss, toasts } = useToast();
 *
 *   const showSuccess = () => {
 *     toast({
 *       title: 'Success!',
 *       description: 'Your changes have been saved.'
 *     });
 *   };
 *
 *   return (
 *     <button onClick={showSuccess}>Save Changes</button>
 *   );
 * }
 * ```
 */
/**
 * UseToast function.
 * @returns Function result.
 */
function useToast() {
    const [state, setState] = React.useState(memoryState);
    React.useEffect(() => {
        listeners.push(setState);
        return () => {
            const index = listeners.indexOf(setState); /**
             * If function.
             * @param index > -1 - index > -1 parameter.
             */ /**
            * If function.
            * @param index > -1 - index > -1 parameter.
            */
            if (index > -1) {
                listeners.splice(index, 1);
            }
        };
    }, [state]);
    return {
        ...state,
        toast,
        dismiss: (toastId) => dispatch({ type: 'DISMISS_TOAST', toastId }),
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,