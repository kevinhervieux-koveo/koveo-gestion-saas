{"file":"/home/runner/workspace/server/api/permissions.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/permissions.ts"],"sourcesContent":["import type { Express } from 'express';\n// Database-based permissions system - no config files needed\nimport { requireAuth, authorize } from '../auth';\nimport { storage } from '../storage';\n\n/**\n * Transform a permission string into a structured permission object.\n * @param permission - Permission string in format \"action:resource\".\n * @returns Structured permission object with metadata.\n */\n/**\n * TransformPermission function.\n * @param permission\n * @returns Function result.\n */\nfunction transformPermission(permission: string) {\n  const [action, resource] = permission.split(':');\n  const resourceType = resource.replace(/_/g, ' ');\n\n  // Determine category based on resource type\n  let category = 'Other';\n  const categoryMap: { [key: string]: string } = {\n    users: 'User Management',\n    organizations: 'Organization Management',\n    buildings: 'Building Management',\n    residences: 'Residence Management',\n    bills: 'Financial Management',\n    budgets: 'Financial Management',\n    maintenance_requests: 'Maintenance Management',\n    documents: 'Document Management',\n    notifications: 'Communication',\n    features: 'System Features',\n    reports: 'Reports & Analytics',\n  };\n  category = categoryMap[resource] || 'Other';\n\n  return {\n    id: permission,\n    name: permission,\n    displayName: `${action.charAt(0).toUpperCase() + action.slice(1).replace(/_/g, ' ')} ${resourceType.charAt(0).toUpperCase() + resourceType.slice(1)}`,\n    description: `Permission to ${action.replace(/_/g, ' ')} ${resourceType} resources`,\n    resourceType: resource,\n    action: action,\n    category: category,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n  };\n}\n\n/**\n * Register all RBAC permissions management API routes.\n * @param app - Express application instance.\n */\n/**\n * RegisterPermissionsRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerPermissionsRoutes(app: Express) {\n  // Get all system permissions from database\n  app.get('/api/permissions', requireAuth, authorize('read:users'), async (req, res) => {\n    try {\n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error: any) {\n      console.error('❌ Error fetching permissions:', error);\n      res.status(500).json({ message: 'Failed to fetch permissions' });\n    }\n  });\n\n  // Get role-based permissions from database\n  app.get('/api/role-permissions', requireAuth, authorize('read:users'), async (req, res) => {\n    try {\n      const rolePermissions = await storage.getRolePermissions();\n      res.json(rolePermissions);\n    } catch (error: any) {\n      console.error('❌ Error fetching role permissions:', error);\n      res.status(500).json({ message: 'Failed to fetch role permissions' });\n    }\n  });\n\n  // Get permissions matrix for admin dashboard\n  app.get('/api/permissions-matrix', requireAuth, authorize('read:users'), async (req, res) => {\n    try {\n      const permissions = await storage.getPermissions();\n      const rolePermissions = await storage.getRolePermissions();\n\n      // Group permissions by resource type\n      const permissionsByResource = permissions.reduce((acc: any, permission: any) => {\n        if (!acc[permission.resourceType]) {\n          acc[permission.resourceType] = [];\n        }\n        acc[permission.resourceType].push(permission);\n        return acc;\n      }, {});\n\n      // Create role matrix (correct hierarchy: admin-manager-resident-tenant)\n      const roleMatrix = ['admin', 'manager', 'resident', 'tenant'].reduce((acc: any, role) => {\n        acc[role] = rolePermissions\n          .filter((rp: any) => rp.role === role)\n          .map((rp: any) => rp.permissionId);\n        return acc;\n      }, {});\n\n      res.json({\n        permissionsByResource,\n        roleMatrix,\n        permissions,\n        rolePermissions,\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching permissions matrix:', error);\n      res.status(500).json({ message: 'Failed to fetch permissions matrix' });\n    }\n  });\n\n  // Get user-specific permissions (overrides)\n  app.get('/api/user-permissions', requireAuth, authorize('read:users'), async (req, res) => {\n    try {\n      const userPermissions = await storage.getUserPermissions();\n      res.json(userPermissions);\n    } catch (error: any) {\n      console.error('❌ Error fetching user permissions:', error);\n      res.status(500).json({ message: 'Failed to fetch user permissions' });\n    }\n  });\n\n  // Grant permission to user\n  app.post(\n    '/api/user-permissions',\n    requireAuth,\n    authorize('manage_permissions:users'),\n    async (req, res) => {\n      try {\n        const { userId, permissionId, reason } = req.body;\n\n        if (!userId || !permissionId) {\n          return res.status(400).json({\n            message: 'userId and permissionId are required',\n          });\n        }\n\n        // Validate that the permission exists in database\n        const permission = await storage\n          .getPermissions()\n          .then((perms) => perms.find((p) => p.id === permissionId || p.name === permissionId));\n\n        if (!permission) {\n          return res.status(400).json({\n            message: 'Invalid permission',\n          });\n        }\n\n        // TODO: Implement user permission override in database\n        // For now, return success but note that this would need database schema changes\n        res.status(501).json({\n          message: 'User permission overrides not yet implemented',\n          note: 'This feature requires additional database schema for user_permission_overrides table',\n        });\n      } catch (error: any) {\n        console.error('❌ Error granting user permission:', error);\n        res.status(500).json({ message: 'Failed to grant user permission' });\n      }\n    }\n  );\n\n  // Revoke permission from user\n  app.delete(\n    '/api/user-permissions/:userId/:permissionId',\n    requireAuth,\n    authorize('manage:user_roles'),\n    async (req, res) => {\n      try {\n        const { userId, permissionId } = req.params;\n\n        // TODO: Implement user permission revocation in database\n        res.status(501).json({\n          message: 'User permission overrides not yet implemented',\n          note: 'This feature requires additional database schema for user_permission_overrides table',\n        });\n      } catch (error: any) {\n        console.error('❌ Error revoking user permission:', error);\n        res.status(500).json({ message: 'Failed to revoke user permission' });\n      }\n    }\n  );\n\n  // Update role permissions (admin only)\n  app.patch(\n    '/api/role-permissions/:role',\n    requireAuth,\n    authorize('manage:user_roles'),\n    async (req, res) => {\n      try {\n        const { role } = req.params;\n        const { permissions } = req.body;\n\n        if (!['admin', 'manager', 'tenant', 'resident'].includes(role)) {\n          return res.status(400).json({ message: 'Invalid role' });\n        }\n\n        if (!Array.isArray(permissions)) {\n          return res.status(400).json({ message: 'Permissions must be an array' });\n        }\n\n        // TODO: Implement role permission updates\n        // This would require updating the permissions.json file or moving to database\n        res.status(501).json({\n          message: 'Role permission updates not yet implemented',\n          note: 'This feature requires implementing a mechanism to update permissions.json or move permissions to database',\n        });\n      } catch (error: any) {\n        console.error('❌ Error updating role permissions:', error);\n        res.status(500).json({ message: 'Failed to update role permissions' });\n      }\n    }\n  );\n\n  // Get permission categories for organization\n  app.get('/api/permission-categories', requireAuth, authorize('read:users'), async (req, res) => {\n    try {\n      // Generate categories based on database permissions\n      const permissions = await storage.getPermissions();\n      const categoryMap: { [key: string]: any[] } = {};\n\n      permissions.forEach((permission) => {\n        const categoryName =\n          {\n            users: 'User Management',\n            organizations: 'Organization Management',\n            buildings: 'Building Management',\n            residences: 'Residence Management',\n            bills: 'Financial Management',\n            budgets: 'Financial Management',\n            maintenance_requests: 'Maintenance Management',\n            documents: 'Document Management',\n            notifications: 'Communication',\n            features: 'System Features',\n            reports: 'Reports & Analytics',\n          }[permission.resourceType] || 'Other';\n\n        if (!categoryMap[categoryName]) {\n          categoryMap[categoryName] = [];\n        }\n        categoryMap[categoryName].push(permission);\n      });\n\n      const categories = Object.entries(categoryMap).map(([name, perms]) => ({\n        id: name.toLowerCase().replace(/\\s+/g, '-'),\n        name,\n        permissions: perms,\n        count: perms.length,\n      }));\n\n      res.json(categories);\n    } catch (error: any) {\n      console.error('❌ Error fetching permission categories:', error);\n      res.status(500).json({ message: 'Failed to fetch permission categories' });\n    }\n  });\n\n  // Validate user has specific permission\n  app.post('/api/permissions/validate', requireAuth, async (req, res) => {\n    try {\n      const { permission } = req.body;\n\n      if (!permission) {\n        return res.status(400).json({ message: 'Permission is required' });\n      }\n\n      // Check permission via database\n      const rolePermissions = await storage.getRolePermissions();\n      const hasPermission = rolePermissions.some(\n        (rp: any) =>\n          rp.role === req.user!.role && rp.permission && rp.permission.name === permission\n      );\n\n      res.json({\n        hasPermission,\n        role: req.user!.role,\n        permission,\n        message: hasPermission ? 'Permission granted' : 'Permission denied',\n      });\n    } catch (error: any) {\n      console.error('❌ Error validating permission:', error);\n      res.status(500).json({ message: 'Failed to validate permission' });\n    }\n  });\n}\n"],"version":3}