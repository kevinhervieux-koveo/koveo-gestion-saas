58a02814c7cf65e6ad8af7d90d07b38f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * File Upload Forms Test Suite
 *
 * Comprehensive testing for all submission forms that support file uploads or image attachments.
 * This test suite validates:
 * 1. File selection and validation
 * 2. Form submission with multipart data
 * 3. Error handling for file uploads
 * 4. File type and size restrictions
 * 5. Multiple file handling
 * 6. UI feedback during upload process
 *
 * Forms tested:
 * - Bug Reports (with file attachments)
 * - Feature Requests/Ideas (with file attachments)
 * - Document Upload Forms
 * - Bills (with receipt attachments)
 */
const globals_1 = require("@jest/globals");
globals_1.jest.mock('@/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
}));
globals_1.jest.mock('@/hooks/use-auth', () => ({
    useAuth: () => mockAuth,
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({ toast: mockToast }),
}));
const react_1 = require("@testing-library/react");
const test_utils_1 = require("../utils/test-utils");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_2 = __importDefault(require("react"));
// Test utilities - using shared test-utils wrapper
// Mock API request function
const mockApiRequest = globals_1.jest.fn();
const mockFetch = globals_1.jest.fn();
// Mock authentication hook
const mockAuth = {
    user: {
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'test@koveo.com',
        role: 'admin',
        organizationId: '123e4567-e89b-12d3-a456-426614174001'
    },
    login: globals_1.jest.fn(),
    logout: globals_1.jest.fn(),
};
// Mock toast hook
const mockToast = globals_1.jest.fn();
// Mock global fetch
global.fetch = mockFetch;
// Create mock files for testing
const createMockFile = (name, size, type) => {
    const file = new File(['mock content'], name, { type });
    Object.defineProperty(file, 'size', { value: size });
    return file;
};
const createMockImage = (name, size = 50000) => createMockFile(name, size, 'image/png');
const createMockPDF = (name, size = 100000) => createMockFile(name, size, 'application/pdf');
const createMockTextFile = (name, size = 1000) => createMockFile(name, size, 'text/plain');
(0, globals_1.describe)('File Upload Forms Test Suite', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ id: 'test-id', success: true });
        mockFetch.mockResolvedValue({
            ok: true,
            json: async () => ({ id: 'test-id', success: true }),
        });
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    (0, globals_1.describe)('Bug Report Form with File Attachments', () => {
        const BugReportForm = require('../../client/src/pages/settings/bug-reports.tsx').default;
        (0, globals_1.beforeEach)(() => {
            // Reset mocks for this test suite
            globals_1.jest.clearAllMocks();
        });
        (0, globals_1.it)('should render bug report form with file upload capability', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            // Check for bug report button
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                // Look for file upload components
                const attachButton = react_1.screen.queryByText(/attach files/i) ||
                    react_1.screen.queryByText(/screenshots/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                (0, globals_1.expect)(attachButton).toBeTruthy();
            }
        });
        (0, globals_1.it)('should handle single file attachment to bug reports', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                // Fill required fields
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                const pageInput = react_1.screen.queryByLabelText(/page/i) ||
                    react_1.screen.queryByPlaceholderText(/page/i);
                if (titleInput && descriptionInput && pageInput) {
                    await user_event_1.default.type(titleInput, 'Test Bug Report with File');
                    await user_event_1.default.type(descriptionInput, 'This is a test bug report with file attachment for testing purposes.');
                    await user_event_1.default.type(pageInput, 'Test Page');
                    // Try to find and interact with file upload
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i }) ||
                        react_1.screen.queryByText(/attach files/i);
                    if (fileInput) {
                        const mockFile = createMockImage('screenshot.png');
                        // Simulate file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: [mockFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
                        // Submit form
                        const submitButton = react_1.screen.queryByTestId('button-submit-bug') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bugs', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                    credentials: 'include',
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should handle multiple file attachments to bug reports', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                const pageInput = react_1.screen.queryByLabelText(/page/i) ||
                    react_1.screen.queryByPlaceholderText(/page/i);
                if (titleInput && descriptionInput && pageInput) {
                    await user_event_1.default.type(titleInput, 'Multi-file Bug Report');
                    await user_event_1.default.type(descriptionInput, 'Testing multiple file attachments in bug reports.');
                    await user_event_1.default.type(pageInput, 'Test Page');
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('screenshot1.png'),
                            createMockImage('screenshot2.png'),
                            createMockPDF('error-log.pdf')
                        ];
                        // Simulate multiple file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        const submitButton = react_1.screen.queryByTestId('button-submit-bug') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bugs', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate file size limits for bug report attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                if (fileInput) {
                    // Create oversized file (50MB)
                    const oversizedFile = createMockImage('huge-file.png', 50 * 1024 * 1024);
                    Object.defineProperty(fileInput, 'files', {
                        value: [oversizedFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [oversizedFile] } });
                    // Should show error message for oversized file
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*too large/i) ||
                            react_1.screen.queryByText(/size.*exceeded/i) ||
                            react_1.screen.queryByText(/maximum.*size/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Feature Request Form with File Attachments', () => {
        const FeatureRequestForm = require('../../client/src/pages/settings/idea-box.tsx').default;
        (0, globals_1.it)('should render feature request form with file upload capability', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(FeatureRequestForm, {}) }));
            const requestButton = react_1.screen.queryByTestId('button-request-feature') ||
                react_1.screen.queryByText(/request feature/i) ||
                react_1.screen.queryByText(/suggest idea/i);
            if (requestButton) {
                await user_event_1.default.click(requestButton);
                const attachButton = react_1.screen.queryByText(/attach files/i) ||
                    react_1.screen.queryByText(/attachments/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                (0, globals_1.expect)(attachButton).toBeTruthy();
            }
        });
        (0, globals_1.it)('should submit feature request with file attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(FeatureRequestForm, {}) }));
            const requestButton = react_1.screen.queryByTestId('button-request-feature') ||
                react_1.screen.queryByText(/request feature/i);
            if (requestButton) {
                await user_event_1.default.click(requestButton);
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                if (titleInput && descriptionInput) {
                    await user_event_1.default.type(titleInput, 'New Feature with Mockups');
                    await user_event_1.default.type(descriptionInput, 'Feature request with design mockups and documentation.');
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('mockup.png'),
                            createMockPDF('requirements.pdf')
                        ];
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        const submitButton = react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith(globals_1.expect.stringMatching(/\/api\/(features|feature-requests)/), globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
    });
    (0, globals_1.describe)('Document Upload Forms', () => {
        const DocumentManager = require('../../client/src/components/common/DocumentManager.tsx').default;
        (0, globals_1.it)('should handle document upload with metadata', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            const uploadButton = react_1.screen.queryByTestId('button-upload-document') ||
                react_1.screen.queryByText(/upload/i) ||
                react_1.screen.queryByRole('button', { name: /add.*document/i });
            if (uploadButton) {
                await user_event_1.default.click(uploadButton);
                const fileInput = react_1.screen.queryByRole('input', { name: /file/i }) ||
                    react_1.screen.queryByRole('button', { name: /choose.*file/i });
                if (fileInput) {
                    const mockDocument = createMockPDF('contract.pdf');
                    Object.defineProperty(fileInput, 'files', {
                        value: [mockDocument],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [mockDocument] } });
                    // Fill document metadata
                    const nameInput = react_1.screen.queryByLabelText(/name/i) ||
                        react_1.screen.queryByPlaceholderText(/document.*name/i);
                    const descriptionInput = react_1.screen.queryByLabelText(/description/i);
                    if (nameInput) {
                        await user_event_1.default.type(nameInput, 'Test Contract Document');
                    }
                    if (descriptionInput) {
                        await user_event_1.default.type(descriptionInput, 'Legal contract for testing purposes');
                    }
                    const submitButton = react_1.screen.queryByRole('button', { name: /upload/i }) ||
                        react_1.screen.queryByRole('button', { name: /save/i });
                    if (submitButton) {
                        await user_event_1.default.click(submitButton);
                        await (0, react_1.waitFor)(() => {
                            (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', globals_1.expect.stringMatching(/\/api\/documents/), globals_1.expect.any(Object));
                        });
                    }
                }
            }
        });
        (0, globals_1.it)('should validate document file types', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            const uploadButton = react_1.screen.queryByTestId('button-upload-document') ||
                react_1.screen.queryByText(/upload/i);
            if (uploadButton) {
                await user_event_1.default.click(uploadButton);
                const fileInput = react_1.screen.queryByRole('input', { name: /file/i });
                if (fileInput) {
                    // Try uploading invalid file type
                    const invalidFile = createMockFile('malicious.exe', 1000, 'application/x-executable');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*type.*not.*allowed/i) ||
                            react_1.screen.queryByText(/invalid.*file.*type/i) ||
                            react_1.screen.queryByText(/unsupported.*format/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Bill Form with Receipt Attachments', () => {
        const BillForm = require('../../client/src/components/common/BillForm.tsx').default;
        (0, globals_1.it)('should handle bill submission with receipt attachments', async () => {
            const mockProps = {
                isOpen: true,
                onClose: globals_1.jest.fn(),
                onSubmit: globals_1.jest.fn(),
                buildings: [],
                residences: []
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BillForm, { ...mockProps }) }));
            // Fill bill details
            const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                react_1.screen.queryByPlaceholderText(/bill.*title/i);
            const amountInput = react_1.screen.queryByLabelText(/amount/i) ||
                react_1.screen.queryByPlaceholderText(/amount/i);
            if (titleInput && amountInput) {
                await user_event_1.default.type(titleInput, 'Electricity Bill - January 2025');
                await user_event_1.default.type(amountInput, '150.75');
                // Look for file attachment
                const attachButton = react_1.screen.queryByText(/attach.*receipt/i) ||
                    react_1.screen.queryByText(/add.*attachment/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                if (attachButton) {
                    await user_event_1.default.click(attachButton);
                    const fileInput = react_1.screen.queryByRole('input', { type: 'file' });
                    if (fileInput) {
                        const receiptFile = createMockPDF('receipt.pdf');
                        Object.defineProperty(fileInput, 'files', {
                            value: [receiptFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [receiptFile] } });
                        const submitButton = react_1.screen.queryByRole('button', { name: /save.*bill/i }) ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockProps.onSubmit).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                                    title: 'Electricity Bill - January 2025',
                                    amount: globals_1.expect.any(String),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate receipt file format', async () => {
            const mockProps = {
                isOpen: true,
                onClose: globals_1.jest.fn(),
                onSubmit: globals_1.jest.fn(),
                buildings: [],
                residences: []
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BillForm, { ...mockProps }) }));
            const attachButton = react_1.screen.queryByText(/attach/i);
            if (attachButton) {
                await user_event_1.default.click(attachButton);
                const fileInput = react_1.screen.queryByRole('input', { type: 'file' });
                if (fileInput) {
                    // Try invalid file format
                    const invalidFile = createMockFile('receipt.txt', 1000, 'text/plain');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/invalid.*format/i) ||
                            react_1.screen.queryByText(/only.*pdf.*jpg.*png/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Demands Form with File Attachments', () => {
        const DemandsPage = require('../../client/src/pages/ResidentDemandsPage.tsx').default;
        (0, globals_1.beforeEach)(() => {
            globals_1.jest.clearAllMocks();
            // Mock successful upload response
            mockFetch.mockResolvedValue({
                ok: true,
                json: async () => ({
                    fileUrls: ['/uploads/demands/test-file.png'],
                    fileCount: 1,
                    message: 'Files uploaded successfully'
                }),
            });
        });
        (0, globals_1.it)('should render demands form with file upload capability', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            // Look for submit demand button
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i) ||
                react_1.screen.queryByText(/create.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                // Look for file upload component
                const fileUpload = react_1.screen.queryByTestId('file-upload-container') ||
                    react_1.screen.queryByText(/drag.*drop/i) ||
                    react_1.screen.queryByText(/attach.*files/i) ||
                    react_1.screen.queryByRole('button', { name: /upload/i });
                (0, globals_1.expect)(fileUpload).toBeTruthy();
            }
        });
        (0, globals_1.it)('should handle single file attachment to demands', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                // Fill required fields
                const typeSelect = react_1.screen.queryByTestId('select-demand-type') ||
                    react_1.screen.queryByLabelText(/type/i);
                const descriptionInput = react_1.screen.queryByTestId('textarea-demand-description') ||
                    react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                if (typeSelect && descriptionInput) {
                    await user_event_1.default.selectOptions(typeSelect, 'maintenance');
                    await user_event_1.default.type(descriptionInput, 'Kitchen faucet is leaking and needs immediate repair. Water is dripping constantly.');
                    // Find file upload area
                    const fileUploadArea = react_1.screen.queryByTestId('file-upload-container') ||
                        react_1.screen.queryByText(/drag.*drop/i);
                    if (fileUploadArea) {
                        const mockFile = createMockImage('leak-photo.png');
                        // Simulate file drop
                        const fileInput = react_1.screen.queryByRole('input', { hidden: true }) ||
                            document.querySelector('input[type="file"]');
                        if (fileInput) {
                            Object.defineProperty(fileInput, 'files', {
                                value: [mockFile],
                                writable: false,
                            });
                            react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
                            // Wait for file to be processed
                            await (0, react_1.waitFor)(() => {
                                const filePreview = react_1.screen.queryByText('leak-photo.png') ||
                                    react_1.screen.queryByTestId('file-preview-0');
                                (0, globals_1.expect)(filePreview).toBeTruthy();
                            });
                            // Submit the demand
                            const finalSubmitButton = react_1.screen.queryByTestId('button-submit-demand-form') ||
                                react_1.screen.queryByRole('button', { name: /submit.*demand/i });
                            if (finalSubmitButton) {
                                await user_event_1.default.click(finalSubmitButton);
                                await (0, react_1.waitFor)(() => {
                                    // Verify file upload was called
                                    (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/upload', globals_1.expect.objectContaining({
                                        method: 'POST',
                                        body: globals_1.expect.any(FormData),
                                    }));
                                    // Verify demand creation was called with attachments
                                    (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', globals_1.expect.objectContaining({
                                        method: 'POST',
                                        headers: globals_1.expect.objectContaining({
                                            'Content-Type': 'application/json',
                                        }),
                                        body: globals_1.expect.stringContaining('attachments'),
                                    }));
                                });
                            }
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should handle multiple file attachments to demands', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const typeSelect = react_1.screen.queryByTestId('select-demand-type');
                const descriptionInput = react_1.screen.queryByTestId('textarea-demand-description') ||
                    react_1.screen.queryByLabelText(/description/i);
                if (typeSelect && descriptionInput) {
                    await user_event_1.default.selectOptions(typeSelect, 'complaint');
                    await user_event_1.default.type(descriptionInput, 'Multiple issues with apartment including water damage and electrical problems. Photos attached for evidence.');
                    const fileInput = document.querySelector('input[type="file"]');
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('water-damage.jpg'),
                            createMockImage('electrical-issue.png'),
                            createMockPDF('inspection-report.pdf')
                        ];
                        // Simulate multiple file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        // Wait for files to be processed
                        await (0, react_1.waitFor)(() => {
                            const fileCount = react_1.screen.queryByText(/3.*files/i) ||
                                react_1.screen.queryAllByTestId(/file-preview-/);
                            (0, globals_1.expect)(fileCount).toBeTruthy();
                        });
                        // Update mock for multiple files
                        mockFetch.mockResolvedValueOnce({
                            ok: true,
                            json: async () => ({
                                fileUrls: [
                                    '/uploads/demands/water-damage.jpg',
                                    '/uploads/demands/electrical-issue.png',
                                    '/uploads/demands/inspection-report.pdf'
                                ],
                                fileCount: 3
                            }),
                        });
                        const finalSubmitButton = react_1.screen.queryByTestId('button-submit-demand-form') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (finalSubmitButton) {
                            await user_event_1.default.click(finalSubmitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/upload', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate file size limits for demand attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileInput = document.querySelector('input[type="file"]');
                if (fileInput) {
                    // Create oversized file (15MB - above 10MB limit)
                    const oversizedFile = createMockImage('huge-screenshot.png', 15 * 1024 * 1024);
                    Object.defineProperty(fileInput, 'files', {
                        value: [oversizedFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [oversizedFile] } });
                    // Should show error message for oversized file
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*too large/i) ||
                            react_1.screen.queryByText(/size.*exceeded/i) ||
                            react_1.screen.queryByText(/10.*mb.*limit/i) ||
                            react_1.screen.queryByText(/maximum.*file.*size/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should validate maximum file count for demand attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileInput = document.querySelector('input[type="file"]');
                if (fileInput) {
                    // Try to upload 6 files (above 5 file limit)
                    const tooManyFiles = [
                        createMockImage('file1.png'),
                        createMockImage('file2.png'),
                        createMockImage('file3.png'),
                        createMockImage('file4.png'),
                        createMockImage('file5.png'),
                        createMockImage('file6.png') // This should trigger error
                    ];
                    Object.defineProperty(fileInput, 'files', {
                        value: tooManyFiles,
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: tooManyFiles } });
                    // Should show error message for too many files
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/maximum.*5.*files/i) ||
                            react_1.screen.queryByText(/too many.*files/i) ||
                            react_1.screen.queryByText(/file.*limit.*exceeded/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should validate allowed file types for demand attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileInput = document.querySelector('input[type="file"]');
                if (fileInput) {
                    // Try uploading invalid file type
                    const invalidFile = createMockFile('malicious.exe', 1000, 'application/x-executable');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*type.*not.*supported/i) ||
                            react_1.screen.queryByText(/invalid.*file.*format/i) ||
                            react_1.screen.queryByText(/only.*images.*pdf.*documents/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should handle screenshot paste functionality (Ctrl+V)', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileUploadArea = react_1.screen.queryByTestId('file-upload-container');
                if (fileUploadArea) {
                    // Mock clipboard data
                    const clipboardData = {
                        items: [
                            {
                                kind: 'file',
                                type: 'image/png',
                                getAsFile: () => createMockImage('pasted-screenshot.png')
                            }
                        ]
                    };
                    // Simulate paste event
                    react_1.fireEvent.paste(fileUploadArea, {
                        clipboardData: clipboardData
                    });
                    // Should show pasted file
                    await (0, react_1.waitFor)(() => {
                        const pastedFile = react_1.screen.queryByText(/pasted.*screenshot/i) ||
                            react_1.screen.queryByText(/screenshot.*pasted/i) ||
                            react_1.screen.queryByTestId('file-preview-0');
                        if (pastedFile) {
                            (0, globals_1.expect)(pastedFile).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should handle network errors during file upload in demands', async () => {
            // Mock upload failure
            mockFetch.mockRejectedValueOnce(new Error('Upload failed'));
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const typeSelect = react_1.screen.queryByTestId('select-demand-type');
                const descriptionInput = react_1.screen.queryByTestId('textarea-demand-description') ||
                    react_1.screen.queryByLabelText(/description/i);
                if (typeSelect && descriptionInput) {
                    await user_event_1.default.selectOptions(typeSelect, 'maintenance');
                    await user_event_1.default.type(descriptionInput, 'Test demand with file that will fail to upload');
                    const fileInput = document.querySelector('input[type="file"]');
                    if (fileInput) {
                        const mockFile = createMockImage('test-file.png');
                        Object.defineProperty(fileInput, 'files', {
                            value: [mockFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
                        const finalSubmitButton = react_1.screen.queryByTestId('button-submit-demand-form') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (finalSubmitButton) {
                            await user_event_1.default.click(finalSubmitButton);
                            // Should show error message for upload failure
                            await (0, react_1.waitFor)(() => {
                                const errorMessage = react_1.screen.queryByText(/upload.*failed/i) ||
                                    react_1.screen.queryByText(/error.*uploading/i) ||
                                    react_1.screen.queryByText(/failed.*attach/i);
                                if (errorMessage) {
                                    (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                                }
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should display attached files in demand details popup', async () => {
            // Mock demand with attachments
            const mockDemandWithAttachments = {
                id: 'demand-123',
                type: 'maintenance',
                description: 'Leak in bathroom ceiling',
                attachments: [
                    '/uploads/demands/leak-photo-1.jpg',
                    '/uploads/demands/damage-report.pdf'
                ],
                status: 'submitted',
                submitterId: 'user-123',
                buildingId: 'building-123',
                createdAt: '2024-09-05T10:00:00Z',
                updatedAt: '2024-09-05T10:00:00Z',
                submitter: {
                    id: 'user-123',
                    firstName: 'Test',
                    lastName: 'User',
                    email: 'test@test.com'
                },
                building: {
                    id: 'building-123',
                    name: 'Test Building',
                    address: '123 Test St'
                }
            };
            // Mock the demand details popup component
            const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;
            mockApiRequest.mockResolvedValue([]); // Mock comments
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandDetailsPopup, { demand: mockDemandWithAttachments, isOpen: true, onClose: globals_1.jest.fn(), user: mockAuth.user }) }));
            // Should show attachments section
            await (0, react_1.waitFor)(() => {
                const attachmentsLabel = react_1.screen.queryByText(/attachments/i) ||
                    react_1.screen.queryByText(/attached.*files/i);
                (0, globals_1.expect)(attachmentsLabel).toBeTruthy();
            });
            // Should show file count
            const fileCount = react_1.screen.queryByText(/2/i) || // (2) in label
                react_1.screen.queryByText(/2.*files/i);
            (0, globals_1.expect)(fileCount).toBeTruthy();
            // Should show individual files
            const photoFile = react_1.screen.queryByText(/leak-photo-1\.jpg/i);
            const pdfFile = react_1.screen.queryByText(/damage-report\.pdf/i);
            (0, globals_1.expect)(photoFile).toBeTruthy();
            (0, globals_1.expect)(pdfFile).toBeTruthy();
            // Should have view/download buttons
            const viewButtons = react_1.screen.queryAllByText(/view|download/i);
            (0, globals_1.expect)(viewButtons.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should handle viewing attached files from demand details', async () => {
            const mockDemandWithImage = {
                id: 'demand-456',
                type: 'complaint',
                description: 'Issue with windows',
                attachments: ['/uploads/demands/window-problem.png'],
                status: 'submitted',
                submitterId: 'user-123',
                buildingId: 'building-123',
                createdAt: '2024-09-05T10:00:00Z',
                updatedAt: '2024-09-05T10:00:00Z'
            };
            const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;
            mockApiRequest.mockResolvedValue([]);
            // Mock window.open
            global.open = globals_1.jest.fn();
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandDetailsPopup, { demand: mockDemandWithImage, isOpen: true, onClose: globals_1.jest.fn(), user: mockAuth.user }) }));
            await (0, react_1.waitFor)(() => {
                const viewButton = react_1.screen.queryByTestId('button-view-attachment-0') ||
                    react_1.screen.queryByText(/view/i);
                if (viewButton) {
                    (0, globals_1.expect)(viewButton).toBeInTheDocument();
                }
            });
            // Click view button
            const viewButton = react_1.screen.queryByTestId('button-view-attachment-0') ||
                react_1.screen.queryByText(/view/i);
            if (viewButton) {
                await user_event_1.default.click(viewButton);
                // Should open file in new window
                (0, globals_1.expect)(global.open).toHaveBeenCalledWith('/uploads/demands/window-problem.png', '_blank');
            }
        });
        (0, globals_1.it)('should not show attachments section when demand has no files', async () => {
            const mockDemandWithoutAttachments = {
                id: 'demand-789',
                type: 'information',
                description: 'General inquiry',
                attachments: [], // No attachments
                status: 'submitted',
                submitterId: 'user-123',
                buildingId: 'building-123',
                createdAt: '2024-09-05T10:00:00Z',
                updatedAt: '2024-09-05T10:00:00Z'
            };
            const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;
            mockApiRequest.mockResolvedValue([]);
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandDetailsPopup, { demand: mockDemandWithoutAttachments, isOpen: true, onClose: globals_1.jest.fn(), user: mockAuth.user }) }));
            // Should NOT show attachments section
            await (0, react_1.waitFor)(() => {
                const attachmentsSection = react_1.screen.queryByText(/attachments/i);
                (0, globals_1.expect)(attachmentsSection).not.toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('General File Upload Validation', () => {
        (0, globals_1.it)('should handle network errors during file upload', async () => {
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("div", { "data-testid": "test-upload-form", children: (0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: (e) => {
                            const formData = new FormData();
                            if (e.target.files?.[0]) {
                                formData.append('file', e.target.files[0]);
                                fetch('/api/upload', { method: 'POST', body: formData });
                            }
                        } }) }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const mockFile = createMockImage('test.png');
            Object.defineProperty(fileInput, 'files', {
                value: [mockFile],
                writable: false,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/upload', globals_1.expect.objectContaining({
                    method: 'POST',
                    body: globals_1.expect.any(FormData),
                }));
            });
        });
        (0, globals_1.it)('should handle empty file selection', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: () => {
                        // Should not trigger any upload
                    } }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            // Simulate empty file selection
            react_1.fireEvent.change(fileInput, { target: { files: [] } });
            (0, globals_1.expect)(mockFetch).not.toHaveBeenCalled();
            (0, globals_1.expect)(mockApiRequest).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should respect maximum file count limits', () => {
            const MAX_FILES = 3;
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("input", { type: "file", multiple: true, "data-testid": "file-input", onChange: (e) => {
                        if (e.target.files && e.target.files.length > MAX_FILES) {
                            throw new Error(`Maximum ${MAX_FILES} files allowed`);
                        }
                    } }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const tooManyFiles = [
                createMockImage('1.png'),
                createMockImage('2.png'),
                createMockImage('3.png'),
                createMockImage('4.png'), // One too many
            ];
            Object.defineProperty(fileInput, 'files', {
                value: tooManyFiles,
                writable: false,
            });
            (0, globals_1.expect)(() => {
                react_1.fireEvent.change(fileInput, { target: { files: tooManyFiles } });
            }).toThrow(/Maximum.*files.*allowed/);
        });
    });
    (0, globals_1.describe)('File Upload Progress and Feedback', () => {
        (0, globals_1.it)('should show upload progress for large files', async () => {
            const mockUploadProgress = globals_1.jest.fn();
            // Mock XMLHttpRequest for progress tracking
            const mockXHR = {
                upload: {
                    addEventListener: globals_1.jest.fn((event, callback) => {
                        if (event === 'progress') {
                            // Simulate progress updates
                            setTimeout(() => callback({ loaded: 50, total: 100 }), 100);
                            setTimeout(() => callback({ loaded: 100, total: 100 }), 200);
                        }
                    }),
                },
                addEventListener: globals_1.jest.fn(),
                open: globals_1.jest.fn(),
                send: globals_1.jest.fn(),
                setRequestHeader: globals_1.jest.fn(),
            };
            global.XMLHttpRequest = globals_1.jest.fn(() => mockXHR);
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { "data-testid": "upload-with-progress", children: [(0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: mockUploadProgress }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "progress-indicator", children: "0%" })] }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const largeFile = createMockImage('large-image.png', 10 * 1024 * 1024); // 10MB
            Object.defineProperty(fileInput, 'files', {
                value: [largeFile],
                writable: false,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [largeFile] } });
            (0, globals_1.expect)(mockUploadProgress).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                target: globals_1.expect.objectContaining({
                    files: globals_1.expect.arrayContaining([largeFile])
                })
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,