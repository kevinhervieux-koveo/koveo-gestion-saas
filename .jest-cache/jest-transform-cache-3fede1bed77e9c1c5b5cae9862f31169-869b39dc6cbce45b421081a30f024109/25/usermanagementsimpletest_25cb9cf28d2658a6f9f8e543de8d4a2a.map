{"file":"/home/runner/workspace/tests/integration/user-management-simple.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/user-management-simple.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport { registerUserRoutes } from '../../server/api/users';\n\n// Simple test app\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  \n  // Mock auth middleware\n  app.use(async (req: any, res, next) => {\n    const testUserId = req.headers['x-test-user-id'];\n    if (testUserId) {\n      const [user] = await db.select().from(schema.users).where(eq(schema.users.id, testUserId)).limit(1);\n      if (user) {\n        req.session = { userId: testUserId, isAuthenticated: true };\n        req.user = user;\n      }\n    }\n    next();\n  });\n  \n  registerUserRoutes(app);\n  return app;\n};\n\ndescribe('User Management - Demo User Visibility', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let demoManager: any;\n  let regularManager: any;\n  let testOrg: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean test data\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.users);\n    await db.delete(schema.organizations);\n\n    // Create test organization\n    const [org] = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Test Organization',\n        type: 'Standard',\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        phone: '514-555-0123',\n        email: 'test@org.com',\n      })\n      .returning();\n    testOrg = org;\n\n    // Create test users\n    const [admin] = await db\n      .insert(schema.users)\n      .values({\n        email: 'admin@test.com',\n        username: 'admin',\n        password: 'hashedpass',\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n        isActive: true,\n        phone: '514-555-0001',\n      })\n      .returning();\n    adminUser = admin;\n\n    const [demoMgr] = await db\n      .insert(schema.users)\n      .values({\n        email: 'demo.manager@test.com',\n        username: 'demo_manager',\n        password: 'hashedpass',\n        firstName: 'Demo',\n        lastName: 'Manager',\n        role: 'demo_manager',\n        isActive: true,\n        phone: '514-555-0002',\n      })\n      .returning();\n    demoManager = demoMgr;\n\n    const [regMgr] = await db\n      .insert(schema.users)\n      .values({\n        email: 'regular.manager@test.com',\n        username: 'regular_manager',\n        password: 'hashedpass',\n        firstName: 'Regular',\n        lastName: 'Manager',\n        role: 'manager',\n        isActive: true,\n        phone: '514-555-0003',\n      })\n      .returning();\n    regularManager = regMgr;\n\n    // Assign regular manager to organization\n    await db\n      .insert(schema.userOrganizations)\n      .values({\n        userId: regularManager.id,\n        organizationId: testOrg.id,\n        organizationRole: 'manager',\n        isActive: true,\n      });\n\n    // Create demo and regular users\n    await db\n      .insert(schema.users)\n      .values([\n        {\n          email: 'demo.tenant@test.com',\n          username: 'demo_tenant',\n          password: 'hashedpass',\n          firstName: 'Demo',\n          lastName: 'Tenant',\n          role: 'demo_tenant',\n          isActive: true,\n          phone: '514-555-0004',\n        },\n        {\n          email: 'regular.tenant@test.com',\n          username: 'regular_tenant',\n          password: 'hashedpass',\n          firstName: 'Regular',\n          lastName: 'Tenant',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0005',\n        }\n      ]);\n\n    // Assign regular tenant to organization\n    const [regularTenant] = await db.select().from(schema.users).where(eq(schema.users.email, 'regular.tenant@test.com'));\n    await db\n      .insert(schema.userOrganizations)\n      .values({\n        userId: regularTenant.id,\n        organizationId: testOrg.id,\n        organizationRole: 'tenant',\n        isActive: true,\n      });\n  });\n\n  afterEach(async () => {\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.users);\n    await db.delete(schema.organizations);\n  });\n\n  it('should show only demo users to demo manager', async () => {\n    const response = await request(app)\n      .get('/api/users')\n      .set('x-test-user-id', demoManager.id)\n      .expect(200);\n\n    const users = response.body;\n    const visibleRoles = users.map((user: any) => user.role);\n    \n    // Demo manager should only see demo users\n    expect(visibleRoles).toContain('demo_manager');\n    expect(visibleRoles).toContain('demo_tenant');\n    \n    // Should NOT see regular roles\n    expect(visibleRoles).not.toContain('admin');\n    expect(visibleRoles).not.toContain('manager');\n    expect(visibleRoles).not.toContain('tenant');\n  });\n\n  it('should allow regular manager to see non-demo users in their organization', async () => {\n    const response = await request(app)\n      .get('/api/users')\n      .set('x-test-user-id', regularManager.id)\n      .expect(200);\n\n    const users = response.body;\n    const visibleEmails = users.map((user: any) => user.email);\n    \n    // Should see users in their organization\n    expect(visibleEmails).toContain('regular.tenant@test.com');\n    expect(visibleEmails).toContain('regular.manager@test.com'); // themselves\n    \n    // Should NOT see demo users\n    expect(visibleEmails).not.toContain('demo.tenant@test.com');\n    expect(visibleEmails).not.toContain('demo.manager@test.com');\n  });\n\n  it('should allow admin to see all users', async () => {\n    const response = await request(app)\n      .get('/api/users')\n      .set('x-test-user-id', adminUser.id)\n      .expect(200);\n\n    const users = response.body;\n    const visibleEmails = users.map((user: any) => user.email);\n    \n    // Admin should see all users\n    expect(visibleEmails).toContain('admin@test.com');\n    expect(visibleEmails).toContain('regular.manager@test.com');\n    expect(visibleEmails).toContain('demo.manager@test.com');\n    expect(visibleEmails).toContain('demo.tenant@test.com');\n    expect(visibleEmails).toContain('regular.tenant@test.com');\n  });\n\n  it('should prevent regular manager from modifying organization assignments', async () => {\n    const [user] = await db\n      .insert(schema.users)\n      .values({\n        email: 'testuser@test.com',\n        username: 'testuser',\n        password: 'hashedpass',\n        firstName: 'Test',\n        lastName: 'User',\n        role: 'tenant',\n        isActive: true,\n        phone: '514-555-0006',\n      })\n      .returning();\n\n    // Manager tries to assign organization (should fail)\n    const response = await request(app)\n      .put(`/api/users/${user.id}/organizations`)\n      .set('x-test-user-id', regularManager.id)\n      .send({ organizationIds: [testOrg.id] })\n      .expect(403);\n\n    expect(response.body.message).toContain('Only administrators can modify organization assignments');\n  });\n});"],"version":3}