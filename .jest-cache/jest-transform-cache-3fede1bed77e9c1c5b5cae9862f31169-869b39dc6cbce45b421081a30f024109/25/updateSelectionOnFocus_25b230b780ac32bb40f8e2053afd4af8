f9a99ad89a435419478627fb69690a45
'use strict';
require('../../utils/dataTransfer/Clipboard.js');
var isContentEditable = require('../../utils/edit/isContentEditable.js');
var selection = require('../../utils/focus/selection.js');
// The browser implementation seems to have changed.
// When focus is inside <input type="text"/>,
// Chrome updates Selection to be collapsed at the position of the input element.
// TODO: update implementation to match that of current browsers
/**
 * Reset the Document Selection when moving focus into an element
 * with own selection implementation.
 */ function updateSelectionOnFocus(element) {
    const selection$1 = element.ownerDocument.getSelection();
    /* istanbul ignore if */ if (!(selection$1 === null || selection$1 === undefined ? undefined : selection$1.focusNode)) {
        return;
    }
    // If the focus moves inside an element with own selection implementation,
    // the document selection will be this element.
    // But if the focused element is inside a contenteditable,
    // 1) a collapsed selection will be retained.
    // 2) other selections will be replaced by a cursor
    //  2.a) at the start of the first child if it is a text node
    //  2.b) at the start of the contenteditable.
    if (selection.hasOwnSelection(element)) {
        const contenteditable = isContentEditable.getContentEditable(selection$1.focusNode);
        if (contenteditable) {
            if (!selection$1.isCollapsed) {
                var _contenteditable_firstChild;
                const focusNode = ((_contenteditable_firstChild = contenteditable.firstChild) === null || _contenteditable_firstChild === undefined ? undefined : _contenteditable_firstChild.nodeType) === 3 ? contenteditable.firstChild : contenteditable;
                selection$1.setBaseAndExtent(focusNode, 0, focusNode, 0);
            }
        }
        else {
            selection$1.setBaseAndExtent(element, 0, element, 0);
        }
    }
}
exports.updateSelectionOnFocus = updateSelectionOnFocus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L3NlbGVjdGlvbi91cGRhdGVTZWxlY3Rpb25PbkZvY3VzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE9BQU8sQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0FBQ2pELElBQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDekUsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFFMUQsb0RBQW9EO0FBQ3BELDZDQUE2QztBQUM3QyxpRkFBaUY7QUFDakYsZ0VBQWdFO0FBQ2hFOzs7R0FHRyxDQUFDLFNBQVMsc0JBQXNCLENBQUMsT0FBTztJQUN2QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pELHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUNwSCxPQUFPO0lBQ1gsQ0FBQztJQUNELDBFQUEwRTtJQUMxRSwrQ0FBK0M7SUFDL0MsMERBQTBEO0lBQzFELDZDQUE2QztJQUM3QyxtREFBbUQ7SUFDbkQsNkRBQTZEO0lBQzdELDZDQUE2QztJQUM3QyxJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNyQyxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEYsSUFBSSxlQUFlLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUMzQixJQUFJLDJCQUEyQixDQUFDO2dCQUNoQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsMkJBQTJCLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksSUFBSSwyQkFBMkIsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7Z0JBQzdPLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM3RCxDQUFDO1FBQ0wsQ0FBQzthQUFNLENBQUM7WUFDSixXQUFXLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDO0FBRUQsT0FBTyxDQUFDLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudC9kaXN0L2Nqcy9ldmVudC9zZWxlY3Rpb24vdXBkYXRlU2VsZWN0aW9uT25Gb2N1cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uLy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciBpc0NvbnRlbnRFZGl0YWJsZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2VkaXQvaXNDb250ZW50RWRpdGFibGUuanMnKTtcbnZhciBzZWxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlscy9mb2N1cy9zZWxlY3Rpb24uanMnKTtcblxuLy8gVGhlIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gc2VlbXMgdG8gaGF2ZSBjaGFuZ2VkLlxuLy8gV2hlbiBmb2N1cyBpcyBpbnNpZGUgPGlucHV0IHR5cGU9XCJ0ZXh0XCIvPixcbi8vIENocm9tZSB1cGRhdGVzIFNlbGVjdGlvbiB0byBiZSBjb2xsYXBzZWQgYXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBpbnB1dCBlbGVtZW50LlxuLy8gVE9ETzogdXBkYXRlIGltcGxlbWVudGF0aW9uIHRvIG1hdGNoIHRoYXQgb2YgY3VycmVudCBicm93c2Vyc1xuLyoqXG4gKiBSZXNldCB0aGUgRG9jdW1lbnQgU2VsZWN0aW9uIHdoZW4gbW92aW5nIGZvY3VzIGludG8gYW4gZWxlbWVudFxuICogd2l0aCBvd24gc2VsZWN0aW9uIGltcGxlbWVudGF0aW9uLlxuICovIGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGlvbk9uRm9jdXMoZWxlbWVudCkge1xuICAgIGNvbnN0IHNlbGVjdGlvbiQxID0gZWxlbWVudC5vd25lckRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyBpZiAoIShzZWxlY3Rpb24kMSA9PT0gbnVsbCB8fCBzZWxlY3Rpb24kMSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VsZWN0aW9uJDEuZm9jdXNOb2RlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHRoZSBmb2N1cyBtb3ZlcyBpbnNpZGUgYW4gZWxlbWVudCB3aXRoIG93biBzZWxlY3Rpb24gaW1wbGVtZW50YXRpb24sXG4gICAgLy8gdGhlIGRvY3VtZW50IHNlbGVjdGlvbiB3aWxsIGJlIHRoaXMgZWxlbWVudC5cbiAgICAvLyBCdXQgaWYgdGhlIGZvY3VzZWQgZWxlbWVudCBpcyBpbnNpZGUgYSBjb250ZW50ZWRpdGFibGUsXG4gICAgLy8gMSkgYSBjb2xsYXBzZWQgc2VsZWN0aW9uIHdpbGwgYmUgcmV0YWluZWQuXG4gICAgLy8gMikgb3RoZXIgc2VsZWN0aW9ucyB3aWxsIGJlIHJlcGxhY2VkIGJ5IGEgY3Vyc29yXG4gICAgLy8gIDIuYSkgYXQgdGhlIHN0YXJ0IG9mIHRoZSBmaXJzdCBjaGlsZCBpZiBpdCBpcyBhIHRleHQgbm9kZVxuICAgIC8vICAyLmIpIGF0IHRoZSBzdGFydCBvZiB0aGUgY29udGVudGVkaXRhYmxlLlxuICAgIGlmIChzZWxlY3Rpb24uaGFzT3duU2VsZWN0aW9uKGVsZW1lbnQpKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRlZGl0YWJsZSA9IGlzQ29udGVudEVkaXRhYmxlLmdldENvbnRlbnRFZGl0YWJsZShzZWxlY3Rpb24kMS5mb2N1c05vZGUpO1xuICAgICAgICBpZiAoY29udGVudGVkaXRhYmxlKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGlvbiQxLmlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZW50ZWRpdGFibGVfZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICBjb25zdCBmb2N1c05vZGUgPSAoKF9jb250ZW50ZWRpdGFibGVfZmlyc3RDaGlsZCA9IGNvbnRlbnRlZGl0YWJsZS5maXJzdENoaWxkKSA9PT0gbnVsbCB8fCBfY29udGVudGVkaXRhYmxlX2ZpcnN0Q2hpbGQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9jb250ZW50ZWRpdGFibGVfZmlyc3RDaGlsZC5ub2RlVHlwZSkgPT09IDMgPyBjb250ZW50ZWRpdGFibGUuZmlyc3RDaGlsZCA6IGNvbnRlbnRlZGl0YWJsZTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24kMS5zZXRCYXNlQW5kRXh0ZW50KGZvY3VzTm9kZSwgMCwgZm9jdXNOb2RlLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbiQxLnNldEJhc2VBbmRFeHRlbnQoZWxlbWVudCwgMCwgZWxlbWVudCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydHMudXBkYXRlU2VsZWN0aW9uT25Gb2N1cyA9IHVwZGF0ZVNlbGVjdGlvbk9uRm9jdXM7XG4iXSwidmVyc2lvbiI6M30=