{"file":"/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/event/selection/updateSelectionOnFocus.js","mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,CAAC,uCAAuC,CAAC,CAAC;AACjD,IAAI,iBAAiB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC;AACzE,IAAI,SAAS,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAE1D,oDAAoD;AACpD,6CAA6C;AAC7C,iFAAiF;AACjF,gEAAgE;AAChE;;;GAGG,CAAC,SAAS,sBAAsB,CAAC,OAAO;IACvC,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;IACzD,wBAAwB,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC;QACpH,OAAO;IACX,CAAC;IACD,0EAA0E;IAC1E,+CAA+C;IAC/C,0DAA0D;IAC1D,6CAA6C;IAC7C,mDAAmD;IACnD,6DAA6D;IAC7D,6CAA6C;IAC7C,IAAI,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC;QACrC,MAAM,eAAe,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACpF,IAAI,eAAe,EAAE,CAAC;YAClB,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC3B,IAAI,2BAA2B,CAAC;gBAChC,MAAM,SAAS,GAAG,CAAC,CAAC,2BAA2B,GAAG,eAAe,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,2BAA2B,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,2BAA2B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC;gBAC7O,WAAW,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YAC7D,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;QACzD,CAAC;IACL,CAAC;AACL,CAAC;AAED,OAAO,CAAC,sBAAsB,GAAG,sBAAsB,CAAC","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/event/selection/updateSelectionOnFocus.js"],"sourcesContent":["'use strict';\n\nrequire('../../utils/dataTransfer/Clipboard.js');\nvar isContentEditable = require('../../utils/edit/isContentEditable.js');\nvar selection = require('../../utils/focus/selection.js');\n\n// The browser implementation seems to have changed.\n// When focus is inside <input type=\"text\"/>,\n// Chrome updates Selection to be collapsed at the position of the input element.\n// TODO: update implementation to match that of current browsers\n/**\n * Reset the Document Selection when moving focus into an element\n * with own selection implementation.\n */ function updateSelectionOnFocus(element) {\n    const selection$1 = element.ownerDocument.getSelection();\n    /* istanbul ignore if */ if (!(selection$1 === null || selection$1 === undefined ? undefined : selection$1.focusNode)) {\n        return;\n    }\n    // If the focus moves inside an element with own selection implementation,\n    // the document selection will be this element.\n    // But if the focused element is inside a contenteditable,\n    // 1) a collapsed selection will be retained.\n    // 2) other selections will be replaced by a cursor\n    //  2.a) at the start of the first child if it is a text node\n    //  2.b) at the start of the contenteditable.\n    if (selection.hasOwnSelection(element)) {\n        const contenteditable = isContentEditable.getContentEditable(selection$1.focusNode);\n        if (contenteditable) {\n            if (!selection$1.isCollapsed) {\n                var _contenteditable_firstChild;\n                const focusNode = ((_contenteditable_firstChild = contenteditable.firstChild) === null || _contenteditable_firstChild === undefined ? undefined : _contenteditable_firstChild.nodeType) === 3 ? contenteditable.firstChild : contenteditable;\n                selection$1.setBaseAndExtent(focusNode, 0, focusNode, 0);\n            }\n        } else {\n            selection$1.setBaseAndExtent(element, 0, element, 0);\n        }\n    }\n}\n\nexports.updateSelectionOnFocus = updateSelectionOnFocus;\n"],"version":3}