74c49fd211a17a05d7b9b55b12231433
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pool = exports.db = exports.sql = void 0;
const serverless_1 = require("@neondatabase/serverless");
const neon_http_1 = require("drizzle-orm/neon-http");
const index_1 = require("./config/index");
// Import only tables that exist, not relations to avoid circular dependency issues in production
const schema_1 = require("@shared/schema");
// Always use dev DATABASE_URL for all environments as requested
const databaseUrl = process.env.DATABASE_URL || index_1.config.database.url;
if (!databaseUrl) {
    throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');
}
const isUsingKoveoDb = databaseUrl.includes('DATABASE_URL_KOVEO') || (index_1.config.server.isProduction && process.env.DATABASE_URL_KOVEO);
console.log('üîó Connecting to database with URL:', databaseUrl.substring(0, 50) + '...');
console.log('üåç Environment:', index_1.config.server.nodeEnv);
console.log(`üìä Database: Using ${index_1.config.server.isProduction ? 'PRODUCTION (DATABASE_URL_KOVEO)' : 'DEVELOPMENT (DATABASE_URL)'} database`);
/**
 * Neon serverless database connection using HTTP.
 * Uses the same pattern as your successful test code.
 * Optimized for serverless environments like Replit deployments.
 */
exports.sql = (0, serverless_1.neon)(databaseUrl);
// Test connection
(async () => {
    try {
        const result = await (0, exports.sql) `SELECT version()`;
        console.log('‚úÖ Database connection successful:', result[0].version.substring(0, 50) + '...');
    }
    catch (error) {
        console.error('‚ùå Database connection failed:', error.message);
    }
})();
// Create schema object with only tables (no relations to avoid production errors)
const schema = {
    users: schema_1.users,
    organizations: schema_1.organizations,
    buildings: schema_1.buildings,
    residences: schema_1.residences,
    userOrganizations: schema_1.userOrganizations,
    userResidences: schema_1.userResidences,
    invitations: schema_1.invitations,
    documents: schema_1.documents,
    bills: schema_1.bills,
    demands: schema_1.demands,
    commonSpaces: schema_1.commonSpaces,
    passwordResetTokens: schema_1.passwordResetTokens,
    maintenanceRequests: schema_1.maintenanceRequests,
    permissions: schema_1.permissions,
    userPermissions: schema_1.userPermissions,
    rolePermissions: schema_1.rolePermissions,
    budgets: schema_1.budgets,
    monthlyBudgets: schema_1.monthlyBudgets,
};
/**
 * Drizzle ORM database instance with table definitions only.
 * Provides type-safe database operations for the Quebec property management system.
 * Uses HTTP connection for better compatibility with serverless environments.
 */
exports.db = (0, neon_http_1.drizzle)(exports.sql, { schema });
// Log schema loading
console.log('üìä Database initialized with', Object.keys(schema).length, 'tables');
// For compatibility, export sql as pool for session store
exports.pool = exports.sql;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFBLElBQUksR0FBRyxXQUFHLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvZGIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmVvbiB9IGZyb20gJ0BuZW9uZGF0YWJhc2Uvc2VydmVybGVzcyc7XG5pbXBvcnQgeyBkcml6emxlIH0gZnJvbSAnZHJpenpsZS1vcm0vbmVvbi1odHRwJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnL2luZGV4JztcblxuLy8gSW1wb3J0IG9ubHkgdGFibGVzIHRoYXQgZXhpc3QsIG5vdCByZWxhdGlvbnMgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jeSBpc3N1ZXMgaW4gcHJvZHVjdGlvblxuaW1wb3J0IHtcbiAgdXNlcnMsXG4gIG9yZ2FuaXphdGlvbnMsXG4gIGJ1aWxkaW5ncyxcbiAgcmVzaWRlbmNlcyxcbiAgdXNlck9yZ2FuaXphdGlvbnMsXG4gIHVzZXJSZXNpZGVuY2VzLFxuICBpbnZpdGF0aW9ucyxcbiAgZG9jdW1lbnRzLFxuICBiaWxscyxcbiAgZGVtYW5kcyxcbiAgY29tbW9uU3BhY2VzLFxuICBwYXNzd29yZFJlc2V0VG9rZW5zLFxuICBtYWludGVuYW5jZVJlcXVlc3RzLFxuICBwZXJtaXNzaW9ucyxcbiAgdXNlclBlcm1pc3Npb25zLFxuICByb2xlUGVybWlzc2lvbnMsXG4gIGJ1ZGdldHMsXG4gIG1vbnRobHlCdWRnZXRzLFxufSBmcm9tICdAc2hhcmVkL3NjaGVtYSc7XG5cbi8vIEFsd2F5cyB1c2UgZGV2IERBVEFCQVNFX1VSTCBmb3IgYWxsIGVudmlyb25tZW50cyBhcyByZXF1ZXN0ZWRcbmNvbnN0IGRhdGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8IGNvbmZpZy5kYXRhYmFzZS51cmw7XG5cbmlmICghZGF0YWJhc2VVcmwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdEQVRBQkFTRV9VUkwgbXVzdCBiZSBzZXQuIERpZCB5b3UgZm9yZ2V0IHRvIHByb3Zpc2lvbiBhIGRhdGFiYXNlPycpO1xufVxuXG5jb25zdCBpc1VzaW5nS292ZW9EYiA9IGRhdGFiYXNlVXJsLmluY2x1ZGVzKCdEQVRBQkFTRV9VUkxfS09WRU8nKSB8fCAoY29uZmlnLnNlcnZlci5pc1Byb2R1Y3Rpb24gJiYgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMX0tPVkVPKTtcbmNvbnNvbGUubG9nKCfwn5SXIENvbm5lY3RpbmcgdG8gZGF0YWJhc2Ugd2l0aCBVUkw6JywgZGF0YWJhc2VVcmwuc3Vic3RyaW5nKDAsIDUwKSArICcuLi4nKTtcbmNvbnNvbGUubG9nKCfwn4yNIEVudmlyb25tZW50OicsIGNvbmZpZy5zZXJ2ZXIubm9kZUVudik7XG5jb25zb2xlLmxvZyhg8J+TiiBEYXRhYmFzZTogVXNpbmcgJHtjb25maWcuc2VydmVyLmlzUHJvZHVjdGlvbiA/ICdQUk9EVUNUSU9OIChEQVRBQkFTRV9VUkxfS09WRU8pJyA6ICdERVZFTE9QTUVOVCAoREFUQUJBU0VfVVJMKSd9IGRhdGFiYXNlYCk7XG5cbi8qKlxuICogTmVvbiBzZXJ2ZXJsZXNzIGRhdGFiYXNlIGNvbm5lY3Rpb24gdXNpbmcgSFRUUC5cbiAqIFVzZXMgdGhlIHNhbWUgcGF0dGVybiBhcyB5b3VyIHN1Y2Nlc3NmdWwgdGVzdCBjb2RlLlxuICogT3B0aW1pemVkIGZvciBzZXJ2ZXJsZXNzIGVudmlyb25tZW50cyBsaWtlIFJlcGxpdCBkZXBsb3ltZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHNxbCA9IG5lb24oZGF0YWJhc2VVcmwpO1xuXG4vLyBUZXN0IGNvbm5lY3Rpb25cbihhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3FsYFNFTEVDVCB2ZXJzaW9uKClgO1xuICAgIGNvbnNvbGUubG9nKCfinIUgRGF0YWJhc2UgY29ubmVjdGlvbiBzdWNjZXNzZnVsOicsIHJlc3VsdFswXS52ZXJzaW9uLnN1YnN0cmluZygwLCA1MCkgKyAnLi4uJyk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgRGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsZWQ6JywgZXJyb3IubWVzc2FnZSk7XG4gIH1cbn0pKCk7XG5cbi8vIENyZWF0ZSBzY2hlbWEgb2JqZWN0IHdpdGggb25seSB0YWJsZXMgKG5vIHJlbGF0aW9ucyB0byBhdm9pZCBwcm9kdWN0aW9uIGVycm9ycylcbmNvbnN0IHNjaGVtYSA9IHtcbiAgdXNlcnMsXG4gIG9yZ2FuaXphdGlvbnMsXG4gIGJ1aWxkaW5ncyxcbiAgcmVzaWRlbmNlcyxcbiAgdXNlck9yZ2FuaXphdGlvbnMsXG4gIHVzZXJSZXNpZGVuY2VzLFxuICBpbnZpdGF0aW9ucyxcbiAgZG9jdW1lbnRzLFxuICBiaWxscyxcbiAgZGVtYW5kcyxcbiAgY29tbW9uU3BhY2VzLFxuICBwYXNzd29yZFJlc2V0VG9rZW5zLFxuICBtYWludGVuYW5jZVJlcXVlc3RzLFxuICBwZXJtaXNzaW9ucyxcbiAgdXNlclBlcm1pc3Npb25zLFxuICByb2xlUGVybWlzc2lvbnMsXG4gIGJ1ZGdldHMsXG4gIG1vbnRobHlCdWRnZXRzLFxufTtcblxuLyoqXG4gKiBEcml6emxlIE9STSBkYXRhYmFzZSBpbnN0YW5jZSB3aXRoIHRhYmxlIGRlZmluaXRpb25zIG9ubHkuXG4gKiBQcm92aWRlcyB0eXBlLXNhZmUgZGF0YWJhc2Ugb3BlcmF0aW9ucyBmb3IgdGhlIFF1ZWJlYyBwcm9wZXJ0eSBtYW5hZ2VtZW50IHN5c3RlbS5cbiAqIFVzZXMgSFRUUCBjb25uZWN0aW9uIGZvciBiZXR0ZXIgY29tcGF0aWJpbGl0eSB3aXRoIHNlcnZlcmxlc3MgZW52aXJvbm1lbnRzLlxuICovXG5leHBvcnQgY29uc3QgZGIgPSBkcml6emxlKHNxbCwgeyBzY2hlbWEgfSk7XG5cbi8vIExvZyBzY2hlbWEgbG9hZGluZ1xuY29uc29sZS5sb2coJ/Cfk4ogRGF0YWJhc2UgaW5pdGlhbGl6ZWQgd2l0aCcsIE9iamVjdC5rZXlzKHNjaGVtYSkubGVuZ3RoLCAndGFibGVzJyk7XG5cbi8vIEZvciBjb21wYXRpYmlsaXR5LCBleHBvcnQgc3FsIGFzIHBvb2wgZm9yIHNlc3Npb24gc3RvcmVcbmV4cG9ydCBjb25zdCBwb29sID0gc3FsO1xuIl0sInZlcnNpb24iOjN9