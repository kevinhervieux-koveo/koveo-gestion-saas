2ccb1260c8e78679ef01d142c5312f35
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertQualityIssueSchema = exports.insertMetricCalibrationDataSchema = exports.insertPredictionValidationSchema = exports.insertMetricPredictionSchema = exports.insertMetricEffectivenessTrackingSchema = exports.qualityIssues = exports.metricCalibrationData = exports.predictionValidations = exports.metricPredictions = exports.metricEffectivenessTracking = exports.metricTypeEnum = exports.issueSeverityEnum = exports.validationStatusEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const core_1 = require("./core");
// Monitoring enums
exports.validationStatusEnum = (0, pg_core_1.pgEnum)('validation_status', [
    'pending',
    'true_positive', // Metric correctly predicted an issue
    'false_positive', // Metric predicted issue but none found
    'true_negative', // Metric correctly predicted no issue
    'false_negative', // Metric missed a real issue
]);
exports.issueSeverityEnum = (0, pg_core_1.pgEnum)('issue_severity', [
    'info', // Minor suggestions
    'low', // Non-critical improvements
    'medium', // Important but not urgent
    'high', // Significant issues affecting operations
    'critical', // Severe issues affecting compliance or safety
    'quebec_compliance', // Issues affecting Quebec Law 25 or provincial regulations
]);
exports.metricTypeEnum = (0, pg_core_1.pgEnum)('metric_type', [
    'code_coverage',
    'code_quality',
    'security_vulnerabilities',
    'build_time',
    'translation_coverage',
    'api_response_time',
    'memory_usage',
    'bundle_size',
    'database_query_time',
    'page_load_time',
    'accessibility_score',
    'seo_score',
    'quebec_compliance_score',
]);
// Monitoring tables
/**
 * Tracks effectiveness of quality metrics in predicting real issues.
 * Used for continuous improvement of the quality assessment system.
 */
exports.metricEffectivenessTracking = (0, pg_core_1.pgTable)('metric_effectiveness_tracking', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    metricType: (0, exports.metricTypeEnum)('metric_type').notNull(),
    calculatedValue: (0, pg_core_1.decimal)('calculated_value', { precision: 10, scale: 4 }).notNull(),
    actualOutcome: (0, pg_core_1.text)('actual_outcome').notNull(),
    accuracy: (0, pg_core_1.decimal)('accuracy', { precision: 5, scale: 4 }).notNull(),
    precision: (0, pg_core_1.decimal)('precision', { precision: 5, scale: 4 }).notNull(),
    recall: (0, pg_core_1.decimal)('recall', { precision: 5, scale: 4 }).notNull(),
    f1Score: (0, pg_core_1.decimal)('f1_score', { precision: 5, scale: 4 }).notNull(),
    calibrationScore: (0, pg_core_1.decimal)('calibration_score', { precision: 5, scale: 4 }),
    predictionConfidence: (0, pg_core_1.decimal)('prediction_confidence', { precision: 5, scale: 4 }),
    validationDate: (0, pg_core_1.date)('validation_date').notNull(),
    quebecComplianceImpact: (0, pg_core_1.boolean)('quebec_compliance_impact').notNull().default(false),
    propertyManagementContext: (0, pg_core_1.text)('property_management_context'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Stores predictions made by quality metrics before validation.
 * Links predictions to actual outcomes for effectiveness tracking.
 */
exports.metricPredictions = (0, pg_core_1.pgTable)('metric_predictions', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    metricType: (0, exports.metricTypeEnum)('metric_type').notNull(),
    predictedValue: (0, pg_core_1.decimal)('predicted_value', { precision: 10, scale: 4 }).notNull(),
    confidenceLevel: (0, pg_core_1.decimal)('confidence_level', { precision: 5, scale: 4 }).notNull(),
    thresholdUsed: (0, pg_core_1.decimal)('threshold_used', { precision: 10, scale: 4 }).notNull(),
    contextData: (0, pg_core_1.jsonb)('context_data'),
    predictionReason: (0, pg_core_1.text)('prediction_reason'),
    expectedSeverity: (0, exports.issueSeverityEnum)('expected_severity').notNull(),
    quebecComplianceRelevant: (0, pg_core_1.boolean)('quebec_compliance_relevant').notNull().default(false),
    propertyManagementCategory: (0, pg_core_1.text)('property_management_category'),
    filePath: (0, pg_core_1.text)('file_path'),
    lineNumber: (0, pg_core_1.integer)('line_number'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
/**
 * Validates metric predictions against real outcomes.
 * Essential for measuring and improving metric effectiveness.
 */
exports.predictionValidations = (0, pg_core_1.pgTable)('prediction_validations', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    predictionId: (0, pg_core_1.uuid)('prediction_id')
        .notNull()
        .references(() => exports.metricPredictions.id),
    validationStatus: (0, exports.validationStatusEnum)('validation_status').notNull(),
    actualOutcome: (0, pg_core_1.text)('actual_outcome').notNull(),
    validationMethod: (0, pg_core_1.text)('validation_method').notNull(),
    validatorId: (0, pg_core_1.varchar)('validator_id').references(() => core_1.users.id),
    timeTaken: (0, pg_core_1.integer)('time_taken'), // Hours to validate
    impactLevel: (0, exports.issueSeverityEnum)('impact_level'),
    resolutionActions: (0, pg_core_1.text)('resolution_actions'),
    quebecComplianceNotes: (0, pg_core_1.text)('quebec_compliance_notes'),
    costImpact: (0, pg_core_1.decimal)('cost_impact', { precision: 10, scale: 2 }),
    validatedAt: (0, pg_core_1.timestamp)('validated_at').notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
/**
 * Stores calibration data for improving metric accuracy.
 * Used for machine learning model optimization and threshold tuning.
 */
exports.metricCalibrationData = (0, pg_core_1.pgTable)('metric_calibration_data', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    metricType: (0, exports.metricTypeEnum)('metric_type').notNull(),
    calibrationModel: (0, pg_core_1.text)('calibration_model').notNull(),
    trainingDataSize: (0, pg_core_1.integer)('training_data_size').notNull(),
    accuracy: (0, pg_core_1.decimal)('accuracy', { precision: 5, scale: 4 }).notNull(),
    precision: (0, pg_core_1.decimal)('precision', { precision: 5, scale: 4 }).notNull(),
    recall: (0, pg_core_1.decimal)('recall', { precision: 5, scale: 4 }).notNull(),
    f1Score: (0, pg_core_1.decimal)('f1_score', { precision: 5, scale: 4 }).notNull(),
    crossValidationScore: (0, pg_core_1.decimal)('cross_validation_score', { precision: 5, scale: 4 }),
    featureImportance: (0, pg_core_1.jsonb)('feature_importance'),
    hyperparameters: (0, pg_core_1.jsonb)('hyperparameters'),
    quebecSpecificFactors: (0, pg_core_1.jsonb)('quebec_specific_factors'),
    lastTrainingDate: (0, pg_core_1.date)('last_training_date').notNull(),
    modelVersion: (0, pg_core_1.text)('model_version').notNull(),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    performanceMetrics: (0, pg_core_1.jsonb)('performance_metrics'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Tracks quality issues found in the codebase and their resolution.
 * Links back to metric predictions for effectiveness validation.
 */
exports.qualityIssues = (0, pg_core_1.pgTable)('quality_issues', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    category: (0, pg_core_1.text)('category').notNull(),
    severity: (0, exports.issueSeverityEnum)('severity').notNull(),
    filePath: (0, pg_core_1.text)('file_path').notNull(),
    lineNumber: (0, pg_core_1.integer)('line_number'),
    detectionMethod: (0, pg_core_1.text)('detection_method').notNull(),
    detectedBy: (0, pg_core_1.varchar)('detected_by').references(() => core_1.users.id),
    relatedMetricType: (0, exports.metricTypeEnum)('related_metric_type'),
    wasPredicted: (0, pg_core_1.boolean)('was_predicted').notNull().default(false),
    predictionId: (0, pg_core_1.uuid)('prediction_id').references(() => exports.metricPredictions.id),
    resolutionStatus: (0, pg_core_1.text)('resolution_status').notNull().default('open'),
    resolutionTime: (0, pg_core_1.integer)('resolution_time'), // Hours to resolve
    resolutionActions: (0, pg_core_1.text)('resolution_actions'),
    quebecComplianceRelated: (0, pg_core_1.boolean)('quebec_compliance_related').notNull().default(false),
    propertyManagementImpact: (0, pg_core_1.text)('property_management_impact'),
    costToFix: (0, pg_core_1.decimal)('cost_to_fix', { precision: 10, scale: 2 }),
    actualCost: (0, pg_core_1.decimal)('actual_cost', { precision: 10, scale: 2 }),
    discoveredAt: (0, pg_core_1.timestamp)('discovered_at').notNull(),
    resolvedAt: (0, pg_core_1.timestamp)('resolved_at'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
// Insert schemas
exports.insertMetricEffectivenessTrackingSchema = zod_1.z.object({
    metricType: zod_1.z.enum([
        'code_coverage',
        'code_quality',
        'security_vulnerabilities',
        'build_time',
        'translation_coverage',
        'api_response_time',
        'deployment_success_rate',
        'user_satisfaction',
        'performance_score',
        'test_reliability',
        'quebec_compliance_score',
        'maintenance_productivity',
    ]),
    calculatedValue: zod_1.z.number(),
    actualOutcome: zod_1.z.number(),
    accuracy: zod_1.z.number(),
    precision: zod_1.z.number(),
    recall: zod_1.z.number(),
    f1Score: zod_1.z.number(),
    calibrationScore: zod_1.z.number(),
    predictionConfidence: zod_1.z.number(),
    validationDate: zod_1.z.date(),
    quebecComplianceImpact: zod_1.z.string().optional(),
    propertyManagementContext: zod_1.z.string().optional(),
});
exports.insertMetricPredictionSchema = zod_1.z.object({
    metricType: zod_1.z.enum([
        'code_coverage',
        'code_quality',
        'security_vulnerabilities',
        'build_time',
        'translation_coverage',
        'api_response_time',
        'deployment_success_rate',
        'user_satisfaction',
        'performance_score',
        'test_reliability',
        'quebec_compliance_score',
        'maintenance_productivity',
    ]),
    predictedValue: zod_1.z.number(),
    confidenceLevel: zod_1.z.number(),
    thresholdUsed: zod_1.z.number(),
    contextData: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
    predictionReason: zod_1.z.string(),
    expectedSeverity: zod_1.z.string(),
    quebecComplianceRelevant: zod_1.z.boolean().default(false),
    propertyManagementCategory: zod_1.z.string().optional(),
    filePath: zod_1.z.string(),
    lineNumber: zod_1.z.number().int().optional(),
});
exports.insertPredictionValidationSchema = zod_1.z.object({
    predictionId: zod_1.z.string().uuid(),
    validationStatus: zod_1.z.enum(['validated', 'failed', 'partially_validated', 'needs_review']),
    actualOutcome: zod_1.z.number(),
    validationMethod: zod_1.z.string(),
    validatorId: zod_1.z.string().uuid().optional(),
    timeTaken: zod_1.z.number().optional(),
    impactLevel: zod_1.z.string().optional(),
    resolutionActions: zod_1.z.string().optional(),
    quebecComplianceNotes: zod_1.z.string().optional(),
    costImpact: zod_1.z.number().optional(),
    validatedAt: zod_1.z.date(),
});
exports.insertMetricCalibrationDataSchema = zod_1.z.object({
    metricType: zod_1.z.string(),
    calibrationModel: zod_1.z.string(),
    trainingDataSize: zod_1.z.number().int(),
    accuracy: zod_1.z.number(),
    precision: zod_1.z.number(),
    recall: zod_1.z.number(),
    f1Score: zod_1.z.number(),
    crossValidationScore: zod_1.z.number(),
    featureImportance: zod_1.z.record(zod_1.z.string(), zod_1.z.number()).optional(),
    hyperparameters: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
    quebecSpecificFactors: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
    lastTrainingDate: zod_1.z.date(),
    modelVersion: zod_1.z.string(),
    isActive: zod_1.z.boolean().default(true),
    performanceMetrics: zod_1.z.record(zod_1.z.string(), zod_1.z.number()).optional(),
});
exports.insertQualityIssueSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    category: zod_1.z.string(),
    severity: zod_1.z.string(),
    filePath: zod_1.z.string(),
    lineNumber: zod_1.z.number().int().optional(),
    detectionMethod: zod_1.z.string(),
    detectedBy: zod_1.z.string().uuid().optional(),
    relatedMetricType: zod_1.z.string().optional(),
    wasPredicted: zod_1.z.boolean().default(false),
    predictionId: zod_1.z.string().uuid().optional(),
    resolutionStatus: zod_1.z.string().default('open'),
    resolutionTime: zod_1.z.number().int().optional(),
    resolutionActions: zod_1.z.string().optional(),
    quebecComplianceRelated: zod_1.z.boolean().default(false),
    propertyManagementImpact: zod_1.z.string().optional(),
    costToFix: zod_1.z.number().optional(),
    actualCost: zod_1.z.number().optional(),
    discoveredAt: zod_1.z.date(),
    resolvedAt: zod_1.z.date().optional(),
});
// Relations
// Relations - temporarily commented out due to drizzle-orm version compatibility
// export const metricPredictionsRelations = relations(metricPredictions, ({ many }) => ({
//   validations: many(predictionValidations),
//   qualityIssues: many(qualityIssues),
// }));
// export const predictionValidationsRelations = relations(predictionValidations, ({ one }) => ({
//   prediction: one(metricPredictions, {
//     fields: [predictionValidations.predictionId],
//     references: [metricPredictions.id],
//   }),
//   validator: one(users, {
//     fields: [predictionValidations.validatorId],
//     references: [users.id],
//   }),
// }));
// export const qualityIssuesRelations = relations(qualityIssues, ({ one }) => ({
//   detectedBy: one(users, {
//     fields: [qualityIssues.detectedBy],
//     references: [users.id],
//   }),
//   prediction: one(metricPredictions, {
//     fields: [qualityIssues.predictionId],
//     references: [metricPredictions.id],
//   }),
// }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,