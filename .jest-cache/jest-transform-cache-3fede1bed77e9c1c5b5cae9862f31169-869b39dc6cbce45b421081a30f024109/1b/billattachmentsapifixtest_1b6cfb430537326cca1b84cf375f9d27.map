{"file":"/home/runner/workspace/tests/integration/bill-attachments-api-fix.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/bill-attachments-api-fix.test.ts"],"sourcesContent":["/**\n * Bill Attachments API Fix Test\n * Tests the documents API endpoint to identify and fix the snake_case vs camelCase issue\n * that prevents bill attachments from being retrieved properly.\n */\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\n\ndescribe('Bill Attachments API Fix', () => {\n\n  test('should validate database column naming vs API property expectations', () => {\n    // Database columns (from schema)\n    const dbColumns = {\n      attached_to_type: 'bill',\n      attached_to_id: 'test-bill-id-123'\n    };\n\n    // Expected JavaScript properties (camelCase)\n    const expectedJsProperties = {\n      attachedToType: 'bill', \n      attachedToId: 'test-bill-id-123'\n    };\n\n    // This test demonstrates the mismatch that causes the filtering to fail\n    expect(dbColumns.attached_to_type).toBe(expectedJsProperties.attachedToType);\n    expect(dbColumns.attached_to_id).toBe(expectedJsProperties.attachedToId);\n\n    // The API filter logic tries to access camelCase properties\n    // but the document object might have snake_case properties from database\n    const mockDocumentFromDb = {\n      id: 'doc-123',\n      name: 'Test Document',\n      attached_to_type: 'bill',\n      attached_to_id: 'test-bill-id-123',\n      file_path: 'bills/test.txt',\n      file_name: 'test.txt'\n    };\n\n    // This is what the API filter tries to do (lines 1233-1237 in documents.ts)\n    const attachedToType = 'bill';\n    const attachedToId = 'test-bill-id-123';\n\n    // Current broken logic (accessing camelCase properties)\n    const brokenFilter = (doc: any) => {\n      return doc.attachedToType === attachedToType && doc.attachedToId === attachedToId;\n    };\n\n    // Fixed logic (accessing snake_case properties from database)\n    const fixedFilter = (doc: any) => {\n      return doc.attached_to_type === attachedToType && doc.attached_to_id === attachedToId;\n    };\n\n    // Demonstrate the issue\n    expect(brokenFilter(mockDocumentFromDb)).toBe(false); // This fails\n    expect(fixedFilter(mockDocumentFromDb)).toBe(true);   // This works\n  });\n\n  test('should validate API query parameters format', () => {\n    const billId = 'test-bill-123';\n    const expectedApiUrl = `/api/documents?attachedToType=bill&attachedToId=${billId}`;\n    \n    // This is the format used in the UI (BillDetail component)\n    expect(expectedApiUrl).toBe('/api/documents?attachedToType=bill&attachedToId=test-bill-123');\n    \n    // The API should receive these as camelCase parameters\n    const mockReqQuery = {\n      attachedToType: 'bill',\n      attachedToId: 'test-bill-123'\n    };\n    \n    expect(mockReqQuery.attachedToType).toBe('bill');\n    expect(mockReqQuery.attachedToId).toBe('test-bill-123');\n  });\n\n  test('should demonstrate correct Drizzle ORM property mapping', () => {\n    // Drizzle should automatically map between snake_case columns and camelCase properties\n    // Database column definition (from shared/schemas/documents.ts lines 30-31):\n    const dbColumnDefinition = {\n      attachedToType: 'attached_to_type', // JavaScript property -> DB column\n      attachedToId: 'attached_to_id'      // JavaScript property -> DB column\n    };\n\n    // Expected ORM mapping\n    const mockDrizzleDocument = {\n      id: 'doc-123',\n      name: 'Test Bill Document',\n      attachedToType: 'bill',     // Should be mapped from attached_to_type\n      attachedToId: 'bill-123',   // Should be mapped from attached_to_id\n      filePath: 'bills/test.txt', // Should be mapped from file_path\n      fileName: 'test.txt',       // Should be mapped from file_name\n      fileSize: 1024,            // Should be mapped from file_size\n      mimeType: 'text/plain',    // Should be mapped from mime_type\n      isVisibleToTenants: false, // Should be mapped from is_visible_to_tenants\n      buildingId: 'building-123', // Should be mapped from building_id\n      uploadedById: 'user-123',   // Should be mapped from uploaded_by_id\n      createdAt: new Date(),     // Should be mapped from created_at\n      updatedAt: new Date()      // Should be mapped from updated_at\n    };\n\n    // Verify the document has the expected camelCase properties\n    expect(mockDrizzleDocument.attachedToType).toBe('bill');\n    expect(mockDrizzleDocument.attachedToId).toBe('bill-123');\n    expect(mockDrizzleDocument.filePath).toBe('bills/test.txt');\n    expect(mockDrizzleDocument.fileName).toBe('test.txt');\n  });\n\n  test('should validate bill attachment query filter logic', () => {\n    const billId = 'test-bill-456';\n    const mockDocuments = [\n      {\n        id: 'doc-1',\n        name: 'Invoice - TEST-BILL-001',\n        attachedToType: 'bill',\n        attachedToId: 'test-bill-456',\n        filePath: 'bills/invoice-test.txt',\n        fileName: 'invoice-test.txt'\n      },\n      {\n        id: 'doc-2', \n        name: 'Receipt - TEST-BILL-001',\n        attachedToType: 'bill',\n        attachedToId: 'test-bill-456',\n        filePath: 'bills/receipt-test.txt',\n        fileName: 'receipt-test.txt'\n      },\n      {\n        id: 'doc-3',\n        name: 'Some Other Document',\n        attachedToType: 'feature_request',\n        attachedToId: 'feature-123',\n        filePath: 'features/other.txt',\n        fileName: 'other.txt'\n      }\n    ];\n\n    // Filter logic from documents API (lines 1233-1237)\n    const attachedToType = 'bill';\n    const attachedToId = 'test-bill-456';\n    \n    const filteredDocuments = mockDocuments.filter((doc) => {\n      if (attachedToType && attachedToId) {\n        if (doc.attachedToType !== attachedToType || doc.attachedToId !== attachedToId) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    // Should return 2 documents attached to the specific bill\n    expect(filteredDocuments).toHaveLength(2);\n    expect(filteredDocuments[0].name).toBe('Invoice - TEST-BILL-001');\n    expect(filteredDocuments[1].name).toBe('Receipt - TEST-BILL-001');\n    \n    // Verify all returned documents are for the correct bill\n    filteredDocuments.forEach(doc => {\n      expect(doc.attachedToType).toBe('bill');\n      expect(doc.attachedToId).toBe('test-bill-456');\n    });\n  });\n\n  test('should validate empty results when no bill attachments exist', () => {\n    const billId = 'bill-with-no-attachments';\n    const mockDocuments = [\n      {\n        id: 'doc-1',\n        name: 'Building Document',\n        attachedToType: null,\n        attachedToId: null,\n        buildingId: 'building-123',\n        filePath: 'buildings/doc.txt',\n        fileName: 'doc.txt'\n      },\n      {\n        id: 'doc-2',\n        name: 'Feature Request Doc',\n        attachedToType: 'feature_request',\n        attachedToId: 'feature-456',\n        filePath: 'features/feature.txt',\n        fileName: 'feature.txt'\n      }\n    ];\n\n    // Filter for non-existent bill attachments\n    const attachedToType = 'bill';\n    const attachedToId = billId;\n    \n    const filteredDocuments = mockDocuments.filter((doc) => {\n      if (attachedToType && attachedToId) {\n        if (doc.attachedToType !== attachedToType || doc.attachedToId !== attachedToId) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    // Should return empty array when no attachments exist for the bill\n    expect(filteredDocuments).toHaveLength(0);\n  });\n\n  test('should identify the exact API filtering issue', () => {\n    // This test demonstrates the exact issue happening in the documents API\n\n    // Mock what the database query returns (with proper Drizzle ORM mapping)\n    const documentsFromDatabase = [\n      {\n        id: 'e149f9be-d19e-4147-aa20-1d1edf165986',\n        name: 'Invoice - C305-2024-02-CLEANING-1',\n        attachedToType: 'bill',  // This should be mapped from attached_to_type\n        attachedToId: 'd73274a6-449a-47b9-b29a-081031794ef7', // This should be mapped from attached_to_id\n        filePath: 'bills/invoice-c305-2024-02-cleaning-1-d73274a6.txt',\n        fileName: 'invoice-C305-2024-02-CLEANING-1.txt',\n        documentType: 'maintenance',\n        buildingId: 'c3052c3c-b694-41a6-bd65-3bc3ae9a5984'\n      }\n    ];\n\n    // Mock API request parameters (from UI query)\n    const queryAttachedToType = 'bill';\n    const queryAttachedToId = 'd73274a6-449a-47b9-b29a-081031794ef7';\n\n    // Current API filter logic (from lines 1233-1237 in documents.ts)\n    const filteredDocuments = documentsFromDatabase.filter((doc) => {\n      if (queryAttachedToType && queryAttachedToId) {\n        if (doc.attachedToType !== queryAttachedToType || doc.attachedToId !== queryAttachedToId) {\n          return false;\n        }\n      }\n      return true;\n    });\n\n    // This should work if Drizzle ORM is properly mapping the properties\n    expect(filteredDocuments).toHaveLength(1);\n    expect(filteredDocuments[0].name).toBe('Invoice - C305-2024-02-CLEANING-1');\n    expect(filteredDocuments[0].attachedToType).toBe('bill');\n    expect(filteredDocuments[0].attachedToId).toBe('d73274a6-449a-47b9-b29a-081031794ef7');\n  });\n\n  test('should provide solution for fixing the bill attachments issue', () => {\n    // The solution depends on whether Drizzle is properly mapping properties\n\n    // Option 1: If Drizzle mapping is working correctly\n    const drizzleMappedDocument = {\n      attachedToType: 'bill',  // Already camelCase\n      attachedToId: 'bill-123'\n    };\n\n    // Option 2: If database returns snake_case properties\n    const rawDatabaseDocument = {\n      attached_to_type: 'bill',  // snake_case from database\n      attached_to_id: 'bill-123'\n    };\n\n    // Fixed filter that handles both cases\n    const robustFilter = (doc: any, targetType: string, targetId: string) => {\n      const docType = doc.attachedToType || doc.attached_to_type;\n      const docId = doc.attachedToId || doc.attached_to_id;\n      return docType === targetType && docId === targetId;\n    };\n\n    // Test both scenarios\n    expect(robustFilter(drizzleMappedDocument, 'bill', 'bill-123')).toBe(true);\n    expect(robustFilter(rawDatabaseDocument, 'bill', 'bill-123')).toBe(true);\n\n    // This robust approach should work regardless of the property naming\n  });\n});"],"version":3}