e6606554ec3c8a3f397f9d96dc01d028
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileCompletionStep = ProfileCompletionStep;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const card_1 = require("@/components/ui/card");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const select_1 = require("@/components/ui/select");
const alert_1 = require("@/components/ui/alert");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
/**
 * Profile Completion Step Component.
 *
 * Collects user profile information required for Quebec property management.
 * Includes address validation and bilingual support.
 * @param root0 - The wizard step props.
 * @param root0.data - Current step data.
 * @param root0.onDataChange - Callback when step data changes.
 * @param root0.onValidationChange - Callback when validation status changes.
 * @returns JSX element for the profile completion step.
 */
/**
 * ProfileCompletionStep function.
 * @param root0
 * @param root0.data
 * @param root0.onDataChange
 * @param root0.onValidationChange
 * @param root0._data
 * @returns Function result.
 */
function ProfileCompletionStep({ _data, onDataChange, onValidationChange, }) {
    const { t: _t } = (0, use_language_1.useLanguage)();
    const [formData, setFormData] = (0, react_1.useState)({
        firstName: '',
        lastName: '',
        phone: '',
        language: 'fr',
        dateOfBirth: '',
        isValid: false,
        ..._data,
    });
    const [touched, setTouched] = (0, react_1.useState)({});
    // Phone validation function - moved before useEffect to avoid hoisting issues
    const validatePhone = (phone) => {
        if (!phone) {
            return false;
        }
        // Quebec phone number format validation
        const phoneRegex = /^(\+1[-.\s]?)?(\(?\d{3}\)?[-.\s]?)?\d{3}[-.\s]?\d{4}$/;
        return phoneRegex.test(phone);
    };
    // Validate form whenever relevant fields change
    (0, react_1.useEffect)(() => {
        const requiredFields = ['firstName', 'lastName', 'language'];
        const hasRequiredFields = requiredFields.every((field) => formData[field] &&
            String(formData[field]).trim().length > 0);
        // Phone is optional, but if provided must be valid
        const isValidPhone = !formData.phone || validatePhone(formData.phone);
        const isValid = hasRequiredFields && isValidPhone;
        // Only update if validation state actually changed
        if (formData.isValid !== isValid) {
            const updatedData = { ...formData, isValid };
            onDataChange(updatedData);
            onValidationChange(isValid);
        }
    }, [formData.firstName, formData.lastName, formData.language, formData.phone, formData.isValid]);
    const handleInputChange = (field, _value) => {
        setFormData((prev) => ({
            ...prev,
            [field]: _value,
            _error: undefined,
        }));
    };
    const handleBlur = (field) => {
        setTouched((prev) => ({ ...prev, [field]: true }));
    };
    const getFieldError = (field, label) => {
        if (!touched[field]) {
            return null;
        }
        const value = formData[field];
        if (['firstName', 'lastName', 'language'].includes(field)) {
            if (!value || String(value).trim().length === 0) {
                return `${label} est requis`;
            }
        }
        if (field === 'phone' && value && !validatePhone(String(value))) {
            return 'Format de téléphone invalide (ex: 514-123-4567)';
        }
        return null;
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6 max-w-2xl mx-auto', children: [(0, jsx_runtime_1.jsxs)(alert_1.Alert, { className: 'border-blue-200 bg-blue-50', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.User, { className: 'h-4 w-4 text-blue-600' }), (0, jsx_runtime_1.jsxs)(alert_1.AlertDescription, { className: 'text-blue-800', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Profil utilisateur:" }), " Compl\u00E9tez votre profil pour finaliser votre inscription et acc\u00E9der aux services de gestion immobili\u00E8re."] })] }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'pt-6 space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("h3", { className: 'text-lg font-medium text-gray-900 flex items-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.User, { className: 'h-5 w-5 mr-2' }), "Informations personnelles"] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'firstName', className: 'text-sm font-medium text-gray-700', children: "Pr\u00E9nom *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'firstName', type: 'text', value: formData.firstName, onChange: (e) => handleInputChange('firstName', e.target.value), onBlur: () => handleBlur('firstName'), placeholder: 'Votre pr\u00E9nom', className: getFieldError('firstName', 'Prénom') ? 'border-red-500' : '' }), getFieldError('firstName', 'Prénom') && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600', children: getFieldError('firstName', 'Prénom') }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'lastName', className: 'text-sm font-medium text-gray-700', children: "Nom de famille *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'lastName', type: 'text', value: formData.lastName, onChange: (e) => handleInputChange('lastName', e.target.value), onBlur: () => handleBlur('lastName'), placeholder: 'Votre nom de famille', className: getFieldError('lastName', 'Nom de famille') ? 'border-red-500' : '' }), getFieldError('lastName', 'Nom de famille') && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600', children: getFieldError('lastName', 'Nom de famille') }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'phone', className: 'text-sm font-medium text-gray-700', children: "T\u00E9l\u00E9phone (optionnel)" }), (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Phone, { className: 'absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4' }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'phone', type: 'tel', value: formData.phone, onChange: (e) => handleInputChange('phone', e.target.value), onBlur: () => handleBlur('phone'), placeholder: '514-123-4567', className: `pl-10 ${getFieldError('phone', 'Téléphone') ? 'border-red-500' : ''}` })] }), getFieldError('phone', 'Téléphone') && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600', children: getFieldError('phone', 'Téléphone') }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'language', className: 'text-sm font-medium text-gray-700', children: "Langue pr\u00E9f\u00E9r\u00E9e *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: formData.language, onValueChange: (_value) => handleInputChange('language', _value), children: [(0, jsx_runtime_1.jsxs)(select_1.SelectTrigger, { className: 'w-full', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Globe, { className: 'h-4 w-4 mr-2 text-gray-400' }), (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Choisir une langue' })] }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'fr', children: "Fran\u00E7ais" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'en', children: "English" })] })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-blue-50 border border-blue-200 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'text-sm font-medium text-blue-900 mb-2', children: "\uD83D\uDEE1\uFE0F Protection de la vie priv\u00E9e" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-blue-800', children: "Vos informations personnelles sont collect\u00E9es et utilis\u00E9es uniquement pour les services de gestion immobili\u00E8re, conform\u00E9ment \u00E0 la Loi 25 du Qu\u00E9bec. Vous pouvez demander l'acc\u00E8s, la correction ou la suppression de vos donn\u00E9es \u00E0 tout moment en contactant l'administrateur." })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,