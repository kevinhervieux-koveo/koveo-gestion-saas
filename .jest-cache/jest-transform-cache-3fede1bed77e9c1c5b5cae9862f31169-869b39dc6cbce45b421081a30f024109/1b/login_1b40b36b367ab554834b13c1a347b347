14559299939f232ad48d1c936b1075c3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = LoginPage;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const wouter_1 = require("wouter");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const card_1 = require("@/components/ui/card");
const form_1 = require("@/components/ui/form");
const alert_1 = require("@/components/ui/alert");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const switch_1 = require("@/components/ui/switch");
const use_language_1 = require("@/hooks/use-language");
const use_auth_1 = require("@/hooks/use-auth");
const language_switcher_1 = require("@/components/ui/language-switcher");
const koveo_logo_jpg_1 = __importDefault(require("@/assets/koveo-logo.jpg"));
/**
 * Login form validation schema with Quebec-specific requirements.
 * Ensures proper email format and password complexity for security compliance.
 */
const loginSchema = zod_2.z.object({
    email: zod_2.z
        .string()
        .min(1, 'emailRequired')
        .email('invalidEmailFormat')
        .toLowerCase(),
    password: zod_2.z
        .string()
        .min(1, 'passwordRequired')
        .min(8, 'passwordTooShort'),
});
/**
 * Login page component for Koveo Gestion property management system.
 * Implements secure authentication with Quebec Law 25 compliance messaging.
 *
 * Features:
 * - Form validation with Zod schema
 * - Error handling with user-friendly messages
 * - Bilingual support (French/English)
 * - Quebec-compliant security messaging
 * - Role-based redirection after login.
 */
// Demo credentials for testing purposes only - not real production data
const DEMO_CREDENTIALS = {
    DEFAULT_DEMO_PASSWORD: 'demo123456',
    TENANT_DEMO_PASSWORD: 'demo123456',
};
/**
 *
 */
function LoginPage() {
    const [, navigate] = (0, wouter_1.useLocation)();
    const { toast } = (0, use_toast_1.useToast)();
    const { t, language } = (0, use_language_1.useLanguage)();
    const { login } = (0, use_auth_1.useAuth)();
    const [loginError, setLoginError] = (0, react_1.useState)('');
    const [isLoggingIn, setIsLoggingIn] = (0, react_1.useState)(false);
    const [isDemoMode, setIsDemoMode] = (0, react_1.useState)(false);
    const [selectedRole, setSelectedRole] = (0, react_1.useState)(null);
    const [showPassword, setShowPassword] = (0, react_1.useState)(false);
    const [demoUsers, setDemoUsers] = (0, react_1.useState)(null);
    const [loadingDemoUsers, setLoadingDemoUsers] = (0, react_1.useState)(false);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(0);
    // Check for demo query parameter on component mount
    (0, react_1.useEffect)(() => {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('demo') === 'true') {
            setIsDemoMode(true);
        }
    }, []);
    // Fetch demo users when demo mode is enabled
    (0, react_1.useEffect)(() => {
        if (isDemoMode && !demoUsers) {
            setLoadingDemoUsers(true);
            fetch(`/api/demo/users?t=${Date.now()}`)
                .then(res => res.json())
                .then(data => {
                if (data.success) {
                    setDemoUsers(data.data);
                }
                else {
                    // Failed to fetch demo users
                    toast({
                        title: language === 'fr' ? 'Erreur Demo' : 'Demo Error',
                        description: language === 'fr'
                            ? 'Impossible de charger les utilisateurs de démonstration'
                            : 'Failed to load demo users',
                        variant: 'destructive',
                    });
                }
            })
                .catch(error => {
                // Error fetching demo users
                toast({
                    title: language === 'fr' ? 'Erreur Demo' : 'Demo Error',
                    description: language === 'fr'
                        ? 'Impossible de charger les utilisateurs de démonstration'
                        : 'Failed to load demo users',
                    variant: 'destructive',
                });
            })
                .finally(() => {
                setLoadingDemoUsers(false);
            });
        }
    }, [isDemoMode, demoUsers, toast, language]);
    // Create dynamic demo roles from fetched users
    const getDemoRoles = () => {
        if (!demoUsers)
            return {};
        return {
            demo_manager: {
                displayName: language === 'fr' ? 'Gestionnaire' : 'Manager',
                description: language === 'fr' ? 'Gestion complète des immeubles' : 'Full building management',
                detailedDescription: language === 'fr'
                    ? 'Accès complet à toutes les fonctionnalités de gestion immobilière, incluant la gestion des locataires, maintenance, finances et rapports.'
                    : 'Complete access to all property management features, including tenant management, maintenance, finances, and reporting.',
                users: demoUsers.demo_manager.map(user => ({
                    email: user.email,
                    name: `${user.firstName} ${user.lastName}`,
                    building: language === 'fr' ? 'Gestionnaire Démonstration' : 'Demo Manager',
                    password: DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD,
                })),
            },
            demo_tenant: {
                displayName: language === 'fr' ? 'Locataire' : 'Tenant',
                description: language === 'fr' ? 'Accès locataire standard' : 'Standard tenant access',
                detailedDescription: language === 'fr'
                    ? 'Accès aux fonctionnalités essentielles pour les locataires: demandes de maintenance, documents, communications avec la gestion.'
                    : 'Access to essential tenant features: maintenance requests, documents, communication with management.',
                users: demoUsers.demo_tenant.map(user => ({
                    email: user.email,
                    name: `${user.firstName} ${user.lastName}`,
                    building: language === 'fr' ? 'Locataire Démonstration' : 'Demo Tenant',
                    password: DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD,
                })),
            },
            demo_resident: {
                displayName: language === 'fr' ? 'Résident' : 'Resident',
                description: language === 'fr' ? 'Accès résident propriétaire' : 'Resident owner access',
                detailedDescription: language === 'fr'
                    ? 'Accès étendu pour les résidents propriétaires: gestion de leur unité, participation aux décisions, accès aux documents financiers.'
                    : 'Extended access for resident owners: unit management, participation in decisions, access to financial documents.',
                users: demoUsers.demo_resident.map(user => ({
                    email: user.email,
                    name: `${user.firstName} ${user.lastName}`,
                    building: language === 'fr' ? 'Résident Démonstration' : 'Demo Resident',
                    password: DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD,
                })),
            },
        };
    };
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(loginSchema),
        defaultValues: {
            email: '',
            password: '',
        },
    });
    const handleLogin = async (_data) => {
        try {
            setIsLoggingIn(true);
            setLoginError('');
            const response = await login(_data.email, _data.password);
            toast({
                title: language === 'fr' ? 'Connexion réussie' : 'Login successful',
                description: language === 'fr'
                    ? 'Vous êtes maintenant connecté(e) à Koveo Gestion'
                    : 'You are now logged into Koveo Gestion',
            });
            // Note: Routing to /dashboard is handled by the auth hook
        }
        catch (_error) {
            /**
             * Catch function.
             * @param error - Error object.
             */
            /**
             * Catch function.
             * @param error - Error object.
             */ /**
            * Catch function.
            * @param error - Error object.
            */
            /**
             * Catch function.
             * @param error - Error object.
             */
            const errorMessage = _error.message || 'Login failed';
            setLoginError(errorMessage);
            toast({
                title: language === 'fr' ? 'Erreur de connexion' : 'Login error',
                description: language === 'fr'
                    ? 'Identifiants invalides ou compte inactif'
                    : 'Invalid credentials or inactive account',
                variant: 'destructive',
            });
        }
        finally {
            setIsLoggingIn(false);
        }
    };
    const onSubmit = (_data) => {
        handleLogin(_data);
    };
    const handleDemoLogin = async (demoUserEmail, userName) => {
        try {
            setIsLoggingIn(true);
            setLoginError('');
            // Find the password for the selected user
            let password = DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD; // default
            const demoRoles = getDemoRoles();
            for (const role of Object.values(demoRoles)) {
                const user = role.users?.find((u) => u.email === demoUserEmail);
                if (user) {
                    password = user.password;
                    break;
                }
            }
            const response = await login(demoUserEmail, password);
            toast({
                title: language === 'fr' ? 'Demo Mode Activé' : 'Demo Mode Activated',
                description: language === 'fr' ? `Connecté(e) en tant que ${userName}` : `Logged in as ${userName}`,
            });
        }
        catch (_error) {
            const errorMessage = _error.message || 'Demo login failed';
            setLoginError(errorMessage);
            toast({
                title: language === 'fr' ? 'Erreur Demo' : 'Demo Error',
                description: language === 'fr' ? "Impossible d'accéder à la démonstration" : 'Unable to access demo',
                variant: 'destructive',
            });
        }
        finally {
            setIsLoggingIn(false);
        }
    };
    const handleRoleSelect = (roleKey) => {
        setSelectedRole(roleKey);
        setCurrentPage(0); // Reset pagination when switching roles
    };
    const handleBackToRoles = () => {
        setSelectedRole(null);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'absolute top-4 left-4 right-4 flex justify-between items-center z-10', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'ghost', size: 'sm', asChild: true, className: 'text-gray-600 hover:text-gray-800 hover:bg-white/80 backdrop-blur-sm', "data-testid": 'button-home', children: (0, jsx_runtime_1.jsxs)(wouter_1.Link, { href: '/', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-4 h-4 mr-2' }), language === 'fr' ? 'Accueil' : 'Home'] }) }), (0, jsx_runtime_1.jsx)("div", { className: 'bg-white/80 backdrop-blur-sm rounded-lg p-1', children: (0, jsx_runtime_1.jsx)(language_switcher_1.LanguageSwitcher, {}) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'w-full max-w-md space-y-6', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-center space-y-4', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-center mb-4', children: (0, jsx_runtime_1.jsx)("img", { src: koveo_logo_jpg_1.default, alt: 'Koveo Gestion Logo', className: 'h-16 w-auto rounded-lg shadow-sm' }) }) }), (0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'shadow-lg border-0', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'space-y-1', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-2xl text-center', children: language === 'fr' ? 'Connexion' : 'Sign In' }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { className: 'text-center', children: language === 'fr'
                                            ? 'Entrez vos identifiants pour accéder à votre compte'
                                            : 'Enter your credentials to access your account' })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [loginError && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: 'destructive', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: loginError })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-3 border rounded-lg bg-blue-50 dark:bg-blue-900/20', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-4 h-4 text-blue-600 dark:text-blue-400' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-blue-900 dark:text-blue-100', children: language === 'fr' ? 'Mode Démonstration' : 'Demo Mode' })] }), (0, jsx_runtime_1.jsx)(switch_1.Switch, { checked: isDemoMode, onCheckedChange: setIsDemoMode, "data-testid": 'toggle-demo-mode' })] }), isDemoMode ? ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [loadingDemoUsers ? (
                                            // Loading state
                                            (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-center py-8', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: 'w-6 h-6 animate-spin text-blue-600 dark:text-blue-400' }), (0, jsx_runtime_1.jsx)("span", { className: 'ml-2 text-sm text-gray-600 dark:text-gray-400', children: language === 'fr' ? 'Chargement des utilisateurs...' : 'Loading users...' })] })) : !selectedRole ? (
                                            // Role Selection View
                                            (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-center text-sm text-gray-600 dark:text-gray-400', children: language === 'fr'
                                                            ? 'Choisissez un rôle pour tester la plateforme :'
                                                            : 'Choose a role to test the platform:' }), Object.entries(getDemoRoles()).map(([roleKey, role]) => ((0, jsx_runtime_1.jsx)(card_1.Card, { className: 'cursor-pointer hover:shadow-md transition-shadow border border-blue-200 hover:border-blue-300', onClick: () => handleRoleSelect(roleKey), "data-testid": `demo-role-${roleKey}`, children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: 'font-medium text-sm', children: role.displayName }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 dark:text-gray-400', children: role.description })] }), (0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'w-4 h-4 text-blue-600 dark:text-blue-400' })] }) }) }, roleKey)))] })) : (
                                            // Role Detail View with Demo Users
                                            (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'mb-4', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', onClick: handleBackToRoles, className: 'text-blue-600 hover:text-blue-700', children: ["\u2190 ", language === 'fr' ? 'Retour' : 'Back'] }), (0, jsx_runtime_1.jsx)("h3", { className: 'font-medium text-lg text-center mt-2', children: getDemoRoles()[selectedRole]?.displayName })] }), (0, jsx_runtime_1.jsx)("div", { className: 'bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-4', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-blue-800 dark:text-blue-200', children: getDemoRoles()[selectedRole]?.detailedDescription }) }), (0, jsx_runtime_1.jsx)("div", { className: 'text-center text-sm text-gray-600 dark:text-gray-400 mb-3', children: language === 'fr'
                                                            ? 'Sélectionnez un utilisateur de démonstration :'
                                                            : 'Select a demo user:' }), (() => {
                                                        const users = getDemoRoles()[selectedRole]?.users || [];
                                                        const usersPerPage = 3;
                                                        const totalPages = Math.ceil(users.length / usersPerPage);
                                                        const startIndex = currentPage * usersPerPage;
                                                        const endIndex = startIndex + usersPerPage;
                                                        const currentUsers = users.slice(startIndex, endIndex);
                                                        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [currentUsers.map((user, index) => ((0, jsx_runtime_1.jsx)(card_1.Card, { className: 'cursor-pointer hover:shadow-md transition-shadow border border-green-200 hover:border-green-300', onClick: () => handleDemoLogin(user.email, user.name), "data-testid": `demo-user-${selectedRole}-${startIndex + index}`, children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-medium text-sm', children: user.name }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 dark:text-gray-400', children: user.building }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-green-600 dark:text-green-400 mt-1', children: user.email })] }), (0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-4 h-4 text-green-600 dark:text-green-400' })] }) }) }, user.email))), totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between pt-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage(Math.max(0, currentPage - 1)), disabled: currentPage === 0, className: 'text-xs', children: ["\u2190 ", language === 'fr' ? 'Précédent' : 'Previous'] }), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-gray-500', children: language === 'fr'
                                                                                ? `Page ${currentPage + 1} de ${totalPages}`
                                                                                : `Page ${currentPage + 1} of ${totalPages}` }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage(Math.min(totalPages - 1, currentPage + 1)), disabled: currentPage === totalPages - 1, className: 'text-xs', children: [language === 'fr' ? 'Suivant' : 'Next', " \u2192"] })] }))] }));
                                                    })()] })), (0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-center text-amber-600 dark:text-amber-400 px-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: 'w-3 h-3 inline mr-1' }), language === 'fr'
                                                        ? 'Mode lecture seule - aucune modification possible'
                                                        : 'Read-only mode - no modifications allowed'] })] })) : ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'email', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: language === 'fr' ? 'Adresse courriel' : 'Email Address' }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'email', autoComplete: 'username', placeholder: language === 'fr' ? 'votre@email.com' : 'your@email.com', disabled: isLoggingIn, className: 'h-11', "data-testid": 'input-email' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'password', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: language === 'fr' ? 'Mot de passe' : 'Password' }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: showPassword ? 'text' : 'password', placeholder: language === 'fr' ? 'Votre mot de passe' : 'Your password', disabled: isLoggingIn, className: 'h-11 pr-10', "data-testid": 'input-password', autoComplete: 'current-password' }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowPassword(!showPassword), disabled: isLoggingIn, "data-testid": 'button-toggle-password', children: [showPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4 text-gray-400' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4 text-gray-400' })), (0, jsx_runtime_1.jsx)("span", { className: 'sr-only', children: showPassword
                                                                                        ? language === 'fr'
                                                                                            ? 'Masquer le mot de passe'
                                                                                            : 'Hide password'
                                                                                        : language === 'fr'
                                                                                            ? 'Afficher le mot de passe'
                                                                                            : 'Show password' })] })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', className: 'w-full h-11', disabled: isLoggingIn, children: isLoggingIn
                                                        ? language === 'fr'
                                                            ? 'Connexion...'
                                                            : 'Signing in...'
                                                        : language === 'fr'
                                                            ? 'Se connecter'
                                                            : 'Sign In' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-center', children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'link', asChild: true, className: 'text-sm', children: (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: '/forgot-password', children: language === 'fr' ? 'Mot de passe oublié ?' : 'Forgot your password?' }) }) })] }) }))] })] }), (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'border-blue-200 bg-blue-50 dark:bg-blue-900/20 dark:border-blue-800', children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5' }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-blue-800 dark:text-blue-200', children: [(0, jsx_runtime_1.jsx)("p", { className: 'font-medium mb-1', children: language === 'fr' ? 'Confidentialité & Sécurité' : 'Privacy & Security' }), (0, jsx_runtime_1.jsx)("p", { children: language === 'fr'
                                                    ? 'Conforme à la Loi 25 du Québec. Vos données sont protégées selon les normes de sécurité les plus strictes.'
                                                    : 'Quebec Law 25 compliant. Your data is protected according to the strictest security standards.' })] })] }) }) }), (0, jsx_runtime_1.jsx)("div", { className: 'text-center text-sm text-gray-500 dark:text-gray-400', children: (0, jsx_runtime_1.jsx)("p", { children: language === 'fr'
                                ? '© 2025 Koveo Gestion. Tous droits réservés.'
                                : '© 2025 Koveo Gestion. All rights reserved.' }) })] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,