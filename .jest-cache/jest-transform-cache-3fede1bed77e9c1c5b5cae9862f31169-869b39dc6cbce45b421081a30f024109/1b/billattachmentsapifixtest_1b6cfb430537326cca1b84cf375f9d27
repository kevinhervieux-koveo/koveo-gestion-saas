d73d853fb8c25e60e5ab1567acedef86
"use strict";
/**
 * Bill Attachments API Fix Test
 * Tests the documents API endpoint to identify and fix the snake_case vs camelCase issue
 * that prevents bill attachments from being retrieved properly.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
(0, globals_1.describe)('Bill Attachments API Fix', () => {
    (0, globals_1.test)('should validate database column naming vs API property expectations', () => {
        // Database columns (from schema)
        const dbColumns = {
            attached_to_type: 'bill',
            attached_to_id: 'test-bill-id-123'
        };
        // Expected JavaScript properties (camelCase)
        const expectedJsProperties = {
            attachedToType: 'bill',
            attachedToId: 'test-bill-id-123'
        };
        // This test demonstrates the mismatch that causes the filtering to fail
        (0, globals_1.expect)(dbColumns.attached_to_type).toBe(expectedJsProperties.attachedToType);
        (0, globals_1.expect)(dbColumns.attached_to_id).toBe(expectedJsProperties.attachedToId);
        // The API filter logic tries to access camelCase properties
        // but the document object might have snake_case properties from database
        const mockDocumentFromDb = {
            id: 'doc-123',
            name: 'Test Document',
            attached_to_type: 'bill',
            attached_to_id: 'test-bill-id-123',
            file_path: 'bills/test.txt',
            file_name: 'test.txt'
        };
        // This is what the API filter tries to do (lines 1233-1237 in documents.ts)
        const attachedToType = 'bill';
        const attachedToId = 'test-bill-id-123';
        // Current broken logic (accessing camelCase properties)
        const brokenFilter = (doc) => {
            return doc.attachedToType === attachedToType && doc.attachedToId === attachedToId;
        };
        // Fixed logic (accessing snake_case properties from database)
        const fixedFilter = (doc) => {
            return doc.attached_to_type === attachedToType && doc.attached_to_id === attachedToId;
        };
        // Demonstrate the issue
        (0, globals_1.expect)(brokenFilter(mockDocumentFromDb)).toBe(false); // This fails
        (0, globals_1.expect)(fixedFilter(mockDocumentFromDb)).toBe(true); // This works
    });
    (0, globals_1.test)('should validate API query parameters format', () => {
        const billId = 'test-bill-123';
        const expectedApiUrl = `/api/documents?attachedToType=bill&attachedToId=${billId}`;
        // This is the format used in the UI (BillDetail component)
        (0, globals_1.expect)(expectedApiUrl).toBe('/api/documents?attachedToType=bill&attachedToId=test-bill-123');
        // The API should receive these as camelCase parameters
        const mockReqQuery = {
            attachedToType: 'bill',
            attachedToId: 'test-bill-123'
        };
        (0, globals_1.expect)(mockReqQuery.attachedToType).toBe('bill');
        (0, globals_1.expect)(mockReqQuery.attachedToId).toBe('test-bill-123');
    });
    (0, globals_1.test)('should demonstrate correct Drizzle ORM property mapping', () => {
        // Drizzle should automatically map between snake_case columns and camelCase properties
        // Database column definition (from shared/schemas/documents.ts lines 30-31):
        const dbColumnDefinition = {
            attachedToType: 'attached_to_type', // JavaScript property -> DB column
            attachedToId: 'attached_to_id' // JavaScript property -> DB column
        };
        // Expected ORM mapping
        const mockDrizzleDocument = {
            id: 'doc-123',
            name: 'Test Bill Document',
            attachedToType: 'bill', // Should be mapped from attached_to_type
            attachedToId: 'bill-123', // Should be mapped from attached_to_id
            filePath: 'bills/test.txt', // Should be mapped from file_path
            fileName: 'test.txt', // Should be mapped from file_name
            fileSize: 1024, // Should be mapped from file_size
            mimeType: 'text/plain', // Should be mapped from mime_type
            isVisibleToTenants: false, // Should be mapped from is_visible_to_tenants
            buildingId: 'building-123', // Should be mapped from building_id
            uploadedById: 'user-123', // Should be mapped from uploaded_by_id
            createdAt: new Date(), // Should be mapped from created_at
            updatedAt: new Date() // Should be mapped from updated_at
        };
        // Verify the document has the expected camelCase properties
        (0, globals_1.expect)(mockDrizzleDocument.attachedToType).toBe('bill');
        (0, globals_1.expect)(mockDrizzleDocument.attachedToId).toBe('bill-123');
        (0, globals_1.expect)(mockDrizzleDocument.filePath).toBe('bills/test.txt');
        (0, globals_1.expect)(mockDrizzleDocument.fileName).toBe('test.txt');
    });
    (0, globals_1.test)('should validate bill attachment query filter logic', () => {
        const billId = 'test-bill-456';
        const mockDocuments = [
            {
                id: 'doc-1',
                name: 'Invoice - TEST-BILL-001',
                attachedToType: 'bill',
                attachedToId: 'test-bill-456',
                filePath: 'bills/invoice-test.txt',
                fileName: 'invoice-test.txt'
            },
            {
                id: 'doc-2',
                name: 'Receipt - TEST-BILL-001',
                attachedToType: 'bill',
                attachedToId: 'test-bill-456',
                filePath: 'bills/receipt-test.txt',
                fileName: 'receipt-test.txt'
            },
            {
                id: 'doc-3',
                name: 'Some Other Document',
                attachedToType: 'feature_request',
                attachedToId: 'feature-123',
                filePath: 'features/other.txt',
                fileName: 'other.txt'
            }
        ];
        // Filter logic from documents API (lines 1233-1237)
        const attachedToType = 'bill';
        const attachedToId = 'test-bill-456';
        const filteredDocuments = mockDocuments.filter((doc) => {
            if (attachedToType && attachedToId) {
                if (doc.attachedToType !== attachedToType || doc.attachedToId !== attachedToId) {
                    return false;
                }
            }
            return true;
        });
        // Should return 2 documents attached to the specific bill
        (0, globals_1.expect)(filteredDocuments).toHaveLength(2);
        (0, globals_1.expect)(filteredDocuments[0].name).toBe('Invoice - TEST-BILL-001');
        (0, globals_1.expect)(filteredDocuments[1].name).toBe('Receipt - TEST-BILL-001');
        // Verify all returned documents are for the correct bill
        filteredDocuments.forEach(doc => {
            (0, globals_1.expect)(doc.attachedToType).toBe('bill');
            (0, globals_1.expect)(doc.attachedToId).toBe('test-bill-456');
        });
    });
    (0, globals_1.test)('should validate empty results when no bill attachments exist', () => {
        const billId = 'bill-with-no-attachments';
        const mockDocuments = [
            {
                id: 'doc-1',
                name: 'Building Document',
                attachedToType: null,
                attachedToId: null,
                buildingId: 'building-123',
                filePath: 'buildings/doc.txt',
                fileName: 'doc.txt'
            },
            {
                id: 'doc-2',
                name: 'Feature Request Doc',
                attachedToType: 'feature_request',
                attachedToId: 'feature-456',
                filePath: 'features/feature.txt',
                fileName: 'feature.txt'
            }
        ];
        // Filter for non-existent bill attachments
        const attachedToType = 'bill';
        const attachedToId = billId;
        const filteredDocuments = mockDocuments.filter((doc) => {
            if (attachedToType && attachedToId) {
                if (doc.attachedToType !== attachedToType || doc.attachedToId !== attachedToId) {
                    return false;
                }
            }
            return true;
        });
        // Should return empty array when no attachments exist for the bill
        (0, globals_1.expect)(filteredDocuments).toHaveLength(0);
    });
    (0, globals_1.test)('should identify the exact API filtering issue', () => {
        // This test demonstrates the exact issue happening in the documents API
        // Mock what the database query returns (with proper Drizzle ORM mapping)
        const documentsFromDatabase = [
            {
                id: 'e149f9be-d19e-4147-aa20-1d1edf165986',
                name: 'Invoice - C305-2024-02-CLEANING-1',
                attachedToType: 'bill', // This should be mapped from attached_to_type
                attachedToId: 'd73274a6-449a-47b9-b29a-081031794ef7', // This should be mapped from attached_to_id
                filePath: 'bills/invoice-c305-2024-02-cleaning-1-d73274a6.txt',
                fileName: 'invoice-C305-2024-02-CLEANING-1.txt',
                documentType: 'maintenance',
                buildingId: 'c3052c3c-b694-41a6-bd65-3bc3ae9a5984'
            }
        ];
        // Mock API request parameters (from UI query)
        const queryAttachedToType = 'bill';
        const queryAttachedToId = 'd73274a6-449a-47b9-b29a-081031794ef7';
        // Current API filter logic (from lines 1233-1237 in documents.ts)
        const filteredDocuments = documentsFromDatabase.filter((doc) => {
            if (queryAttachedToType && queryAttachedToId) {
                if (doc.attachedToType !== queryAttachedToType || doc.attachedToId !== queryAttachedToId) {
                    return false;
                }
            }
            return true;
        });
        // This should work if Drizzle ORM is properly mapping the properties
        (0, globals_1.expect)(filteredDocuments).toHaveLength(1);
        (0, globals_1.expect)(filteredDocuments[0].name).toBe('Invoice - C305-2024-02-CLEANING-1');
        (0, globals_1.expect)(filteredDocuments[0].attachedToType).toBe('bill');
        (0, globals_1.expect)(filteredDocuments[0].attachedToId).toBe('d73274a6-449a-47b9-b29a-081031794ef7');
    });
    (0, globals_1.test)('should provide solution for fixing the bill attachments issue', () => {
        // The solution depends on whether Drizzle is properly mapping properties
        // Option 1: If Drizzle mapping is working correctly
        const drizzleMappedDocument = {
            attachedToType: 'bill', // Already camelCase
            attachedToId: 'bill-123'
        };
        // Option 2: If database returns snake_case properties
        const rawDatabaseDocument = {
            attached_to_type: 'bill', // snake_case from database
            attached_to_id: 'bill-123'
        };
        // Fixed filter that handles both cases
        const robustFilter = (doc, targetType, targetId) => {
            const docType = doc.attachedToType || doc.attached_to_type;
            const docId = doc.attachedToId || doc.attached_to_id;
            return docType === targetType && docId === targetId;
        };
        // Test both scenarios
        (0, globals_1.expect)(robustFilter(drizzleMappedDocument, 'bill', 'bill-123')).toBe(true);
        (0, globals_1.expect)(robustFilter(rawDatabaseDocument, 'bill', 'bill-123')).toBe(true);
        // This robust approach should work regardless of the property naming
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,