176a00a83331912075a52a8af0c98f83
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMonthOptions = getMonthOptions;
/**
 * Returns the months to show in the dropdown.
 *
 * This function generates a list of months for the current year, formatted
 * using the provided formatter, and determines whether each month should be
 * disabled based on the navigation range.
 *
 * @param displayMonth The currently displayed month.
 * @param navStart The start date for navigation.
 * @param navEnd The end date for navigation.
 * @param formatters The formatters to use for formatting the month labels.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of dropdown options representing the months, or `undefined`
 *   if no months are available.
 */
function getMonthOptions(displayMonth, navStart, navEnd, formatters, dateLib) {
    const { startOfMonth, startOfYear, endOfYear, eachMonthOfInterval, getMonth, } = dateLib;
    const months = eachMonthOfInterval({
        start: startOfYear(displayMonth),
        end: endOfYear(displayMonth),
    });
    const options = months.map((month) => {
        const label = formatters.formatMonthDropdown(month, dateLib);
        const value = getMonth(month);
        const disabled = (navStart && month < startOfMonth(navStart)) ||
            (navEnd && month > startOfMonth(navEnd)) ||
            false;
        return { value, label, disabled };
    });
    return options;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE1vbnRoT3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUMxQzs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILFNBQVMsZUFBZSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPO0lBQ3hFLE1BQU0sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEdBQUcsR0FBRyxPQUFPLENBQUM7SUFDekYsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUM7UUFDL0IsS0FBSyxFQUFFLFdBQVcsQ0FBQyxZQUFZLENBQUM7UUFDaEMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUM7S0FDL0IsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDN0QsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLE1BQU0sUUFBUSxHQUFHLENBQUMsUUFBUSxJQUFJLEtBQUssR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekQsQ0FBQyxNQUFNLElBQUksS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxLQUFLLENBQUM7UUFDVixPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sT0FBTyxDQUFDO0FBQ25CLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE1vbnRoT3B0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TW9udGhPcHRpb25zID0gZ2V0TW9udGhPcHRpb25zO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBtb250aHMgdG8gc2hvdyBpbiB0aGUgZHJvcGRvd24uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgYSBsaXN0IG9mIG1vbnRocyBmb3IgdGhlIGN1cnJlbnQgeWVhciwgZm9ybWF0dGVkXG4gKiB1c2luZyB0aGUgcHJvdmlkZWQgZm9ybWF0dGVyLCBhbmQgZGV0ZXJtaW5lcyB3aGV0aGVyIGVhY2ggbW9udGggc2hvdWxkIGJlXG4gKiBkaXNhYmxlZCBiYXNlZCBvbiB0aGUgbmF2aWdhdGlvbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0gZGlzcGxheU1vbnRoIFRoZSBjdXJyZW50bHkgZGlzcGxheWVkIG1vbnRoLlxuICogQHBhcmFtIG5hdlN0YXJ0IFRoZSBzdGFydCBkYXRlIGZvciBuYXZpZ2F0aW9uLlxuICogQHBhcmFtIG5hdkVuZCBUaGUgZW5kIGRhdGUgZm9yIG5hdmlnYXRpb24uXG4gKiBAcGFyYW0gZm9ybWF0dGVycyBUaGUgZm9ybWF0dGVycyB0byB1c2UgZm9yIGZvcm1hdHRpbmcgdGhlIG1vbnRoIGxhYmVscy5cbiAqIEBwYXJhbSBkYXRlTGliIFRoZSBkYXRlIGxpYnJhcnkgdG8gdXNlIGZvciBkYXRlIG1hbmlwdWxhdGlvbi5cbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIGRyb3Bkb3duIG9wdGlvbnMgcmVwcmVzZW50aW5nIHRoZSBtb250aHMsIG9yIGB1bmRlZmluZWRgXG4gKiAgIGlmIG5vIG1vbnRocyBhcmUgYXZhaWxhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRNb250aE9wdGlvbnMoZGlzcGxheU1vbnRoLCBuYXZTdGFydCwgbmF2RW5kLCBmb3JtYXR0ZXJzLCBkYXRlTGliKSB7XG4gICAgY29uc3QgeyBzdGFydE9mTW9udGgsIHN0YXJ0T2ZZZWFyLCBlbmRPZlllYXIsIGVhY2hNb250aE9mSW50ZXJ2YWwsIGdldE1vbnRoLCB9ID0gZGF0ZUxpYjtcbiAgICBjb25zdCBtb250aHMgPSBlYWNoTW9udGhPZkludGVydmFsKHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0T2ZZZWFyKGRpc3BsYXlNb250aCksXG4gICAgICAgIGVuZDogZW5kT2ZZZWFyKGRpc3BsYXlNb250aCksXG4gICAgfSk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IG1vbnRocy5tYXAoKG1vbnRoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gZm9ybWF0dGVycy5mb3JtYXRNb250aERyb3Bkb3duKG1vbnRoLCBkYXRlTGliKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRNb250aChtb250aCk7XG4gICAgICAgIGNvbnN0IGRpc2FibGVkID0gKG5hdlN0YXJ0ICYmIG1vbnRoIDwgc3RhcnRPZk1vbnRoKG5hdlN0YXJ0KSkgfHxcbiAgICAgICAgICAgIChuYXZFbmQgJiYgbW9udGggPiBzdGFydE9mTW9udGgobmF2RW5kKSkgfHxcbiAgICAgICAgICAgIGZhbHNlO1xuICAgICAgICByZXR1cm4geyB2YWx1ZSwgbGFiZWwsIGRpc2FibGVkIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG4iXSwidmVyc2lvbiI6M30=