81a582f2f49a442c3087a472f750630a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByText = (container, text, { selector = '*', exact = true, collapseWhitespace, trim, ignore = (0, _allUtils.getConfig)().defaultIgnore, normalizer } = {}) => {
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    let baseArray = [];
    if (typeof container.matches === 'function' && container.matches(selector)) {
        baseArray = [container];
    }
    return [...baseArray, ...Array.from(container.querySelectorAll(selector))]
        // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)
        .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;
const getMissingError = (c, text, options = {}) => {
    const { collapseWhitespace, trim, normalizer, selector } = options;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    const normalizedText = matchNormalizer(text.toString());
    const isNormalizedDifferent = normalizedText !== text.toString();
    const isCustomSelector = (selector ?? '*') !== '*';
    return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;
};
const queryAllByTextWithSuggestions = exports.queryAllByText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');
const [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);
exports.findByText = findByText;
exports.findAllByText = findAllByText;
exports.getByText = getByText;
exports.getAllByText = getAllByText;
exports.queryByText = queryByText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL3RleHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDOUksSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDaEQsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxNQUFNLGNBQWMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFDdkMsUUFBUSxHQUFHLEdBQUcsRUFDZCxLQUFLLEdBQUcsSUFBSSxFQUNaLGtCQUFrQixFQUNsQixJQUFJLEVBQ0osTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDakQsVUFBVSxFQUNYLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDUixDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDbkUsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BELGtCQUFrQjtRQUNsQixJQUFJO1FBQ0osVUFBVTtLQUNYLENBQUMsQ0FBQztJQUNILElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUNuQixJQUFJLE9BQU8sU0FBUyxDQUFDLE9BQU8sS0FBSyxVQUFVLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQzNFLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDRCxPQUFPLENBQUMsR0FBRyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFFLG9IQUFvSDtTQUNuSCxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUMzSSxDQUFDLENBQUM7QUFDRixNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsMENBQTBDLElBQUksRUFBRSxDQUFDO0FBQ3ZGLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDaEQsTUFBTSxFQUNKLGtCQUFrQixFQUNsQixJQUFJLEVBQ0osVUFBVSxFQUNWLFFBQVEsRUFDVCxHQUFHLE9BQU8sQ0FBQztJQUNaLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNwRCxrQkFBa0I7UUFDbEIsSUFBSTtRQUNKLFVBQVU7S0FDWCxDQUFDLENBQUM7SUFDSCxNQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDeEQsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pFLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxRQUFRLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDO0lBQ25ELE9BQU8sNENBQTRDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsc0JBQXNCLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSx3S0FBd0ssQ0FBQztBQUMvVyxDQUFDLENBQUM7QUFDRixNQUFNLDZCQUE2QixHQUFHLE9BQU8sQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLDRCQUE0QixDQUFDLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDaEssTUFBTSxDQUFDLFdBQVcsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsY0FBYyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3pKLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQ2hDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQzlCLE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBQ3BDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvcXVlcmllcy90ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5VGV4dCA9IGV4cG9ydHMucXVlcnlBbGxCeVRleHQgPSBleHBvcnRzLmdldEJ5VGV4dCA9IGV4cG9ydHMuZ2V0QWxsQnlUZXh0ID0gZXhwb3J0cy5maW5kQnlUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlUZXh0ID0gdm9pZCAwO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXh0ID0gKGNvbnRhaW5lciwgdGV4dCwge1xuICBzZWxlY3RvciA9ICcqJyxcbiAgZXhhY3QgPSB0cnVlLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIHRyaW0sXG4gIGlnbm9yZSA9ICgwLCBfYWxsVXRpbHMuZ2V0Q29uZmlnKSgpLmRlZmF1bHRJZ25vcmUsXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfYWxsVXRpbHMubWF0Y2hlcyA6IF9hbGxVdGlscy5mdXp6eU1hdGNoZXM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICBsZXQgYmFzZUFycmF5ID0gW107XG4gIGlmICh0eXBlb2YgY29udGFpbmVyLm1hdGNoZXMgPT09ICdmdW5jdGlvbicgJiYgY29udGFpbmVyLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgYmFzZUFycmF5ID0gW2NvbnRhaW5lcl07XG4gIH1cbiAgcmV0dXJuIFsuLi5iYXNlQXJyYXksIC4uLkFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKV1cbiAgLy8gVE9ETzogYG1hdGNoZXNgIGFjY29yZGluZyBsaWIuZG9tLmQudHMgY2FuIGdldCBvbmx5IGBzdHJpbmdgIGJ1dCBhY2NvcmRpbmcgb3VyIGNvZGUgaXQgY2FuIGhhbmRsZSBhbHNvIGJvb2xlYW4gOilcbiAgLmZpbHRlcihub2RlID0+ICFpZ25vcmUgfHwgIW5vZGUubWF0Y2hlcyhpZ25vcmUpKS5maWx0ZXIobm9kZSA9PiBtYXRjaGVyKCgwLCBfYWxsVXRpbHMuZ2V0Tm9kZVRleHQpKG5vZGUpLCBub2RlLCB0ZXh0LCBtYXRjaE5vcm1hbGl6ZXIpKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRleHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSB0ZXh0OiAke3RleHR9YDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCB0ZXh0LCBvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXIsXG4gICAgc2VsZWN0b3JcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICBjb25zdCBub3JtYWxpemVkVGV4dCA9IG1hdGNoTm9ybWFsaXplcih0ZXh0LnRvU3RyaW5nKCkpO1xuICBjb25zdCBpc05vcm1hbGl6ZWREaWZmZXJlbnQgPSBub3JtYWxpemVkVGV4dCAhPT0gdGV4dC50b1N0cmluZygpO1xuICBjb25zdCBpc0N1c3RvbVNlbGVjdG9yID0gKHNlbGVjdG9yID8/ICcqJykgIT09ICcqJztcbiAgcmV0dXJuIGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIHRleHQ6ICR7aXNOb3JtYWxpemVkRGlmZmVyZW50ID8gYCR7bm9ybWFsaXplZFRleHR9IChub3JtYWxpemVkIGZyb20gJyR7dGV4dH0nKWAgOiB0ZXh0fSR7aXNDdXN0b21TZWxlY3RvciA/IGAsIHdoaWNoIG1hdGNoZXMgc2VsZWN0b3IgJyR7c2VsZWN0b3J9J2AgOiAnJ30uIFRoaXMgY291bGQgYmUgYmVjYXVzZSB0aGUgdGV4dCBpcyBicm9rZW4gdXAgYnkgbXVsdGlwbGUgZWxlbWVudHMuIEluIHRoaXMgY2FzZSwgeW91IGNhbiBwcm92aWRlIGEgZnVuY3Rpb24gZm9yIHlvdXIgdGV4dCBtYXRjaGVyIHRvIG1ha2UgeW91ciBtYXRjaGVyIG1vcmUgZmxleGlibGUuYDtcbn07XG5jb25zdCBxdWVyeUFsbEJ5VGV4dFdpdGhTdWdnZXN0aW9ucyA9IGV4cG9ydHMucXVlcnlBbGxCeVRleHQgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5VGV4dCwgcXVlcnlBbGxCeVRleHQubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5jb25zdCBbcXVlcnlCeVRleHQsIGdldEFsbEJ5VGV4dCwgZ2V0QnlUZXh0LCBmaW5kQWxsQnlUZXh0LCBmaW5kQnlUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5VGV4dCwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5VGV4dCA9IGZpbmRCeVRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeVRleHQgPSBmaW5kQWxsQnlUZXh0O1xuZXhwb3J0cy5nZXRCeVRleHQgPSBnZXRCeVRleHQ7XG5leHBvcnRzLmdldEFsbEJ5VGV4dCA9IGdldEFsbEJ5VGV4dDtcbmV4cG9ydHMucXVlcnlCeVRleHQgPSBxdWVyeUJ5VGV4dDsiXSwidmVyc2lvbiI6M30=