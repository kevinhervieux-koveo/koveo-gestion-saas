{"file":"/home/runner/workspace/tests/unit/demands/demands-schema.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/demands/demands-schema.test.ts"],"sourcesContent":["/**\n * @file Demands Schema Validation Tests.\n * @description Tests for demand and comment schema validation using Zod schemas.\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport {\n  insertDemandSchema,\n  insertDemandCommentSchema,\n  demandTypeEnum,\n  demandStatusEnum,\n} from '../../../shared/schemas/operations-simple';\n\ndescribe('Demands Schema Validation Tests', () => {\n  describe('insertDemandSchema', () => {\n    it('should validate a valid demand object', () => {\n      const validDemand = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: 'Faucet is leaking in the kitchen sink',\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n        assignationResidenceId: '223e4567-e89b-12d3-a456-426614174001',\n        assignationBuildingId: '323e4567-e89b-12d3-a456-426614174002',\n        status: 'submitted',\n      };\n\n      expect(() => insertDemandSchema.parse(validDemand)).not.toThrow();\n    });\n\n    it('should validate demand with optional buildingId and residenceId', () => {\n      const validDemandWithOptionalFields = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: 'Faucet is leaking in the kitchen sink',\n        status: 'submitted',\n      };\n\n      expect(() => insertDemandSchema.parse(validDemandWithOptionalFields)).not.toThrow();\n    });\n\n    it('should validate demand with only buildingId provided', () => {\n      const validDemandWithBuildingOnly = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: 'Faucet is leaking in the kitchen sink',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n        status: 'submitted',\n      };\n\n      expect(() => insertDemandSchema.parse(validDemandWithBuildingOnly)).not.toThrow();\n    });\n\n    it('should validate demand with only residenceId provided', () => {\n      const validDemandWithResidenceOnly = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: 'Faucet is leaking in the kitchen sink',\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        status: 'submitted',\n      };\n\n      expect(() => insertDemandSchema.parse(validDemandWithResidenceOnly)).not.toThrow();\n    });\n\n    it('should require submitterId', () => {\n      const invalidDemand = {\n        type: 'maintenance',\n        description: 'Test description',\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n      };\n\n      expect(() => insertDemandSchema.parse(invalidDemand)).toThrow();\n    });\n\n    it('should require only submitterId, type, and description as minimum fields', () => {\n      const minimalValidDemand = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: 'Minimal test description',\n      };\n\n      expect(() => insertDemandSchema.parse(minimalValidDemand)).not.toThrow();\n    });\n\n    it('should validate demand type enum', () => {\n      const validTypes = ['maintenance', 'complaint', 'information', 'other'];\n\n      validTypes.forEach((type) => {\n        const demand = {\n          submitterId: '123e4567-e89b-12d3-a456-426614174000',\n          type,\n          description: 'Test description',\n          residenceId: '223e4567-e89b-12d3-a456-426614174001',\n          buildingId: '323e4567-e89b-12d3-a456-426614174002',\n        };\n\n        expect(() => insertDemandSchema.parse(demand)).not.toThrow();\n      });\n    });\n\n    it('should reject invalid demand type', () => {\n      const invalidDemand = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'invalid_type',\n        description: 'Test description',\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n      };\n\n      expect(() => insertDemandSchema.parse(invalidDemand)).toThrow();\n    });\n\n    it('should require description', () => {\n      const invalidDemand = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n      };\n\n      expect(() => insertDemandSchema.parse(invalidDemand)).toThrow();\n    });\n\n    it('should validate description length', () => {\n      const shortDescription = 'This is a reasonable description for testing purposes';\n      const longDescription =\n        'This is a longer description that provides more detail about the maintenance request and should still be within acceptable limits for the demand system';\n\n      const demandWithShortDesc = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: shortDescription,\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n      };\n\n      const demandWithLongDesc = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: longDescription,\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n      };\n\n      // Both should pass with reasonable lengths\n      expect(() => insertDemandSchema.parse(demandWithShortDesc)).not.toThrow();\n      expect(() => insertDemandSchema.parse(demandWithLongDesc)).not.toThrow();\n    });\n\n    it('should accept optional fields', () => {\n      const demandWithOptionals = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: 'Test description with optional fields',\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n        assignationResidenceId: '223e4567-e89b-12d3-a456-426614174001',\n        assignationBuildingId: '323e4567-e89b-12d3-a456-426614174002',\n        reviewNotes: 'Initial review notes',\n      };\n\n      expect(() => insertDemandSchema.parse(demandWithOptionals)).not.toThrow();\n    });\n  });\n\n  describe('insertDemandCommentSchema', () => {\n    it('should validate a valid comment object', () => {\n      const validComment = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commenterId: '123e4567-e89b-12d3-a456-426614174000',\n        commentText: 'This is a valid comment about the demand',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should require demandId', () => {\n      const invalidComment = {\n        orderIndex: 1.0,\n        comment: 'Missing demand ID',\n        createdBy: '123e4567-e89b-12d3-a456-426614174000',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should require commenterId', () => {\n      const invalidComment = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commentText: 'Missing commenter ID',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should require commentText', () => {\n      const invalidComment = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commenterId: '123e4567-e89b-12d3-a456-426614174000',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should validate content length', () => {\n      const shortContent = 'This is a reasonable comment.';\n      const longContent =\n        'This is a longer comment that provides more detail about the demand and includes additional context that would be helpful for understanding the issue.';\n\n      const commentWithShortContent = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commenterId: '123e4567-e89b-12d3-a456-426614174000',\n        commentText: shortContent,\n      };\n\n      const commentWithLongContent = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commenterId: '123e4567-e89b-12d3-a456-426614174000',\n        commentText: longContent,\n      };\n\n      // Both should pass with reasonable lengths\n      expect(() => insertDemandCommentSchema.parse(commentWithShortContent)).not.toThrow();\n      expect(() => insertDemandCommentSchema.parse(commentWithLongContent)).not.toThrow();\n    });\n\n    it('should accept valid comment data', () => {\n      const comment = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commenterId: '123e4567-e89b-12d3-a456-426614174000',\n        commentText: 'Valid comment data',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(comment)).not.toThrow();\n    });\n\n    it('should validate comment structure', () => {\n      const validComment = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commenterId: '123e4567-e89b-12d3-a456-426614174000',\n        commentText: 'Comment with proper structure',\n      };\n\n      const invalidComment = {\n        demandId: '423e4567-e89b-12d3-a456-426614174003',\n        commentText: 'Comment without commenter ID',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n  });\n\n  describe('Enum Validation', () => {\n    it('should validate demand types', () => {\n      const validTypes = ['maintenance', 'complaint', 'information', 'other'];\n      const invalidTypes = ['invalid', 'repair', 'request', ''];\n\n      validTypes.forEach((type) => {\n        expect(demandTypeEnum.enumValues).toContain(type);\n      });\n\n      invalidTypes.forEach((type) => {\n        expect(demandTypeEnum.enumValues).not.toContain(type);\n      });\n    });\n\n    it('should validate demand statuses', () => {\n      const validStatuses = [\n        'draft',\n        'submitted',\n        'under_review',\n        'approved',\n        'in_progress',\n        'completed',\n        'rejected',\n        'cancelled',\n      ];\n      const invalidStatuses = ['pending', 'open', 'closed', 'resolved'];\n\n      validStatuses.forEach((status) => {\n        expect(demandStatusEnum.enumValues).toContain(status);\n      });\n\n      invalidStatuses.forEach((status) => {\n        expect(demandStatusEnum.enumValues).not.toContain(status);\n      });\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle UUID validation for IDs', () => {\n      const validUUID = '123e4567-e89b-12d3-a456-426614174000';\n      const invalidUUIDs = ['invalid', '123', '', null, undefined];\n\n      const validDemand = {\n        submitterId: validUUID,\n        type: 'maintenance',\n        description: 'Test with valid UUID',\n        residenceId: validUUID,\n        buildingId: validUUID,\n      };\n\n      expect(() => insertDemandSchema.parse(validDemand)).not.toThrow();\n\n      invalidUUIDs.forEach((invalidId) => {\n        const invalidDemand = {\n          submitterId: invalidId,\n          type: 'maintenance',\n          description: 'Test with invalid UUID',\n          residenceId: validUUID,\n          buildingId: validUUID,\n        };\n\n        expect(() => insertDemandSchema.parse(invalidDemand)).toThrow();\n      });\n    });\n\n    it('should handle special characters in descriptions', () => {\n      const descriptionsWithSpecialChars = [\n        'Description with émojis 🏠 and açcénts',\n        'Description with \"quotes\" and apostrophe\\'s',\n        'Description with <tags> and &symbols;',\n        'Multi-line\\ndescription\\nwith breaks',\n        'Description with numbers 123 and symbols !@#$%^&*()',\n      ];\n\n      descriptionsWithSpecialChars.forEach((description) => {\n        const demand = {\n          submitterId: '123e4567-e89b-12d3-a456-426614174000',\n          type: 'maintenance',\n          description,\n          residenceId: '223e4567-e89b-12d3-a456-426614174001',\n          buildingId: '323e4567-e89b-12d3-a456-426614174002',\n        };\n\n        expect(() => insertDemandSchema.parse(demand)).not.toThrow();\n      });\n    });\n\n    it('should handle boundary values for string lengths', () => {\n      const minValidDescription = 'a'.repeat(10); // Minimum valid length\n      const maxValidDescription = 'a'.repeat(2000); // Maximum valid length\n      const belowMin = 'a'.repeat(9);\n      const aboveMax = 'a'.repeat(2001);\n\n      const demandMinValid = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: minValidDescription,\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n      };\n\n      const demandMaxValid = {\n        submitterId: '123e4567-e89b-12d3-a456-426614174000',\n        type: 'maintenance',\n        description: maxValidDescription,\n        residenceId: '223e4567-e89b-12d3-a456-426614174001',\n        buildingId: '323e4567-e89b-12d3-a456-426614174002',\n      };\n\n      expect(() => insertDemandSchema.parse(demandMinValid)).not.toThrow();\n      expect(() => insertDemandSchema.parse(demandMaxValid)).not.toThrow();\n\n      const demandBelowMin = { ...demandMinValid, description: belowMin };\n      const demandAboveMax = { ...demandMaxValid, description: aboveMax };\n\n      expect(() => insertDemandSchema.parse(demandBelowMin)).toThrow();\n      expect(() => insertDemandSchema.parse(demandAboveMax)).toThrow();\n    });\n  });\n});\n"],"version":3}