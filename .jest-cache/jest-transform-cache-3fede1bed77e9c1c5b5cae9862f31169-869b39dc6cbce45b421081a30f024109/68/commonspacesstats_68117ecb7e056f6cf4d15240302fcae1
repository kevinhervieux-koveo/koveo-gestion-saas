e3b1f257515dc1d22177b694ead8a4d3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const use_auth_1 = require("@/hooks/use-auth");
const use_language_1 = require("@/hooks/use-language");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const no_data_card_1 = require("@/components/ui/no-data-card");
const withHierarchicalSelection_1 = require("@/components/hoc/withHierarchicalSelection");
const wouter_1 = require("wouter");
const select_1 = require("@/components/ui/select");
const table_1 = require("@/components/ui/table");
const dialog_1 = require("@/components/ui/dialog");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const textarea_1 = require("@/components/ui/textarea");
const checkbox_1 = require("@/components/ui/checkbox");
const tabs_1 = require("@/components/ui/tabs");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
const recharts_1 = require("recharts");
const calendar_view_1 = require("@/components/common-spaces/calendar-view");
const common_space_calendar_1 = require("@/components/common-spaces/common-space-calendar");
/**
 * Role checking HOC component.
 * @param Component
 */
function withManagerAccess(Component) {
    return function ManagerAccessComponent(props) {
        const { user } = (0, use_auth_1.useAuth)();
        const { language } = (0, use_language_1.useLanguage)();
        if (!user || !['manager', 'admin', 'demo_manager'].includes(user.role)) {
            return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: language === 'fr' ? 'Gestion Espaces Communs' : 'Manage Common Spaces', subtitle: language === 'fr' ? 'Accès refusé' : 'Access Denied' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6 flex items-center justify-center', children: (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'max-w-md w-full', children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'text-center py-12', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Ban, { className: 'w-16 h-16 mx-auto mb-4 text-red-500' }), (0, jsx_runtime_1.jsx)("h2", { className: 'text-xl font-semibold text-gray-900 mb-2', children: language === 'fr' ? 'Accès refusé' : 'Access Denied' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600', children: language === 'fr'
                                            ? 'Vous devez être gestionnaire ou administrateur pour accéder à cette page.'
                                            : 'You must be a manager or administrator to access this page.' })] }) }) })] }));
        }
        return (0, jsx_runtime_1.jsx)(Component, { ...props });
    };
}
/**
 * Manager Common Spaces Statistics Page.
 */
function CommonSpacesStatsPageInner({ organizationId, buildingId }) {
    const { user } = (0, use_auth_1.useAuth)();
    const { language } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [, navigate] = (0, wouter_1.useLocation)();
    // Always use buildingId from hierarchy
    const selectedBuildingId = buildingId || '';
    const [selectedSpaceId, setSelectedSpaceId] = (0, react_1.useState)('');
    const [restrictionDialogOpen, setRestrictionDialogOpen] = (0, react_1.useState)(false);
    const [selectedUser, setSelectedUser] = (0, react_1.useState)(null);
    const [createDialogOpen, setCreateDialogOpen] = (0, react_1.useState)(false);
    const [isEditMode, setIsEditMode] = (0, react_1.useState)(false);
    const [createFormData, setCreateFormData] = (0, react_1.useState)({
        name: '',
        description: '',
        building_id: '',
        is_reservable: true,
        capacity: '',
        hours_mode: 'same',
        opening_hours: {
            start: '08:00',
            end: '22:00',
        },
        weekly_hours: {
            monday: { start: '08:00', end: '22:00' },
            tuesday: { start: '08:00', end: '22:00' },
            wednesday: { start: '08:00', end: '22:00' },
            thursday: { start: '08:00', end: '22:00' },
            friday: { start: '08:00', end: '22:00' },
            saturday: { start: '09:00', end: '21:00' },
            sunday: { start: '09:00', end: '21:00' },
        },
        available_days: {
            monday: true,
            tuesday: true,
            wednesday: true,
            thursday: true,
            friday: true,
            saturday: true,
            sunday: true,
        },
    });
    const [timeLimitDialogOpen, setTimeLimitDialogOpen] = (0, react_1.useState)(false);
    const [timeLimitFormData, setTimeLimitFormData] = (0, react_1.useState)({
        limit_type: 'monthly',
        limit_hours: '10',
        common_space_id: '',
    });
    const handleBackToOrganization = () => {
        navigate('/manager/common-spaces-stats');
    };
    const handleBackToBuilding = () => {
        navigate(`/manager/common-spaces-stats?organization=${organizationId}`);
    };
    // Remove effect since we're always using buildingId directly
    // Fetch buildings accessible to the manager (filtered by organization if provided)
    const { data: buildingsResponse, isLoading: buildingsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/manager/buildings', organizationId],
        queryFn: async () => {
            const url = organizationId ? `/api/manager/buildings?organizationId=${organizationId}` : '/api/manager/buildings';
            const response = await fetch(url);
            return response.json();
        },
        enabled: !!user,
    });
    const buildings = buildingsResponse?.buildings || [];
    // Fetch common spaces for selected building
    const { data: commonSpaces = [], isLoading: spacesLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/common-spaces', selectedBuildingId],
        queryFn: () => fetch(`/api/common-spaces?building_id=${selectedBuildingId}`).then((res) => res.json()),
        enabled: !!selectedBuildingId,
    });
    // Fetch statistics for selected space
    const { data: spaceStats, isLoading: statsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/common-spaces', selectedSpaceId, 'stats'],
        queryFn: () => fetch(`/api/common-spaces/${selectedSpaceId}/stats`).then((res) => res.json()),
        enabled: !!selectedSpaceId,
    });
    // Block/Unblock user mutation
    const toggleUserRestrictionMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ userId, isBlocked, reason, }) => {
            return (0, queryClient_1.apiRequest)('POST', `/api/common-spaces/users/${userId}/restrictions`, {
                common_space_id: selectedSpaceId,
                is_blocked: isBlocked,
                reason: reason || '',
            });
        },
        onSuccess: (_, variables) => {
            queryClient.invalidateQueries({ queryKey: ['/api/common-spaces', selectedSpaceId, 'stats'] });
            toast({
                title: language === 'fr' ? 'Restriction mise à jour' : 'Restriction Updated',
                description: variables.isBlocked
                    ? language === 'fr'
                        ? 'Utilisateur bloqué avec succès'
                        : 'User blocked successfully'
                    : language === 'fr'
                        ? 'Utilisateur débloqué avec succès'
                        : 'User unblocked successfully',
            });
            setRestrictionDialogOpen(false);
            setSelectedUser(null);
        },
        onError: (error) => {
            toast({
                title: language === 'fr' ? 'Erreur' : 'Error',
                description: error.message || 'Une erreur est survenue',
                variant: 'destructive',
            });
        },
    });
    // Mutation to create or update a common space
    const createSpaceMutation = (0, react_query_1.useMutation)({
        mutationFn: async (spaceData) => {
            if (isEditMode && selectedSpaceId) {
                return (0, queryClient_1.apiRequest)('PUT', `/api/common-spaces/${selectedSpaceId}`, spaceData);
            }
            else {
                return (0, queryClient_1.apiRequest)('POST', '/api/common-spaces', spaceData);
            }
        },
        onSuccess: () => {
            try {
                queryClient.invalidateQueries({ queryKey: ['/api/common-spaces'] });
                toast({
                    title: language === 'fr' ? 'Succès' : 'Success',
                    description: isEditMode
                        ? language === 'fr'
                            ? "L'espace commun a été modifié avec succès."
                            : 'Common space updated successfully.'
                        : language === 'fr'
                            ? "L'espace commun a été créé avec succès."
                            : 'Common space created successfully.',
                });
                setCreateDialogOpen(false);
                setIsEditMode(false);
                setCreateFormData({
                    name: '',
                    description: '',
                    building_id: '',
                    is_reservable: true,
                    capacity: '',
                    hours_mode: 'same',
                    opening_hours: {
                        start: '08:00',
                        end: '22:00',
                    },
                    weekly_hours: {
                        monday: { start: '08:00', end: '22:00' },
                        tuesday: { start: '08:00', end: '22:00' },
                        wednesday: { start: '08:00', end: '22:00' },
                        thursday: { start: '08:00', end: '22:00' },
                        friday: { start: '08:00', end: '22:00' },
                        saturday: { start: '09:00', end: '21:00' },
                        sunday: { start: '09:00', end: '21:00' },
                    },
                    available_days: {
                        monday: true,
                        tuesday: true,
                        wednesday: true,
                        thursday: true,
                        friday: true,
                        saturday: true,
                        sunday: true,
                    },
                });
            }
            catch (error) {
                // Error creating/updating space
                toast({
                    title: language === 'fr' ? 'Erreur' : 'Error',
                    description: isEditMode
                        ? language === 'fr'
                            ? "Impossible de modifier l'espace commun."
                            : 'Failed to update common space.'
                        : language === 'fr'
                            ? "Impossible de créer l'espace commun."
                            : 'Failed to create common space.',
                    variant: 'destructive',
                });
            }
        },
        onError: (error) => {
            // Error processing request
            toast({
                title: language === 'fr' ? 'Erreur' : 'Error',
                description: 'An error occurred while processing the request.',
                variant: 'destructive',
            });
        }
    });
    const handleCreateSpace = () => {
        if (!createFormData.name.trim() || !createFormData.building_id) {
            toast({
                title: language === 'fr' ? 'Erreur' : 'Error',
                description: language === 'fr'
                    ? 'Veuillez remplir tous les champs obligatoires.'
                    : 'Please fill in all required fields.',
                variant: 'destructive',
            });
            return;
        }
        const spaceData = {
            name: createFormData.name.trim(),
            description: createFormData.description.trim() || undefined,
            building_id: createFormData.building_id,
            is_reservable: createFormData.is_reservable,
            capacity: createFormData.capacity ? parseInt(createFormData.capacity) : undefined,
            opening_hours: createFormData.hours_mode === 'same'
                ? createFormData.opening_hours.start && createFormData.opening_hours.end
                    ? createFormData.opening_hours
                    : undefined
                : undefined,
            weekly_hours: createFormData.hours_mode === 'custom' ? createFormData.weekly_hours : undefined,
            available_days: Object.entries(createFormData.available_days)
                .filter(([_, isAvailable]) => isAvailable)
                .map(([day, _]) => day),
        };
        createSpaceMutation.mutate(spaceData);
    };
    // Mutation to set user time limits
    const setTimeLimitMutation = (0, react_query_1.useMutation)({
        mutationFn: async (limitData) => {
            return (0, queryClient_1.apiRequest)('POST', `/api/common-spaces/users/${limitData.user_id}/time-limits`, {
                user_id: limitData.user_id,
                limit_type: limitData.limit_type,
                limit_hours: limitData.limit_hours,
                common_space_id: limitData.common_space_id,
            });
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/common-spaces', selectedSpaceId, 'stats'] });
            toast({
                title: language === 'fr' ? 'Succès' : 'Success',
                description: language === 'fr'
                    ? 'Limite de temps définie avec succès.'
                    : 'Time limit set successfully.',
            });
            setTimeLimitDialogOpen(false);
        },
        onError: (error) => {
            // Error setting time limit
            toast({
                title: language === 'fr' ? 'Erreur' : 'Error',
                description: language === 'fr'
                    ? 'Impossible de définir la limite de temps.'
                    : 'Failed to set time limit.',
                variant: 'destructive',
            });
        },
    });
    const handleSetTimeLimit = () => {
        if (!selectedUser || !timeLimitFormData.limit_hours) {
            return;
        }
        const limitData = {
            user_id: selectedUser.userId,
            limit_type: timeLimitFormData.limit_type,
            limit_hours: parseInt(timeLimitFormData.limit_hours),
            common_space_id: timeLimitFormData.common_space_id || undefined,
        };
        setTimeLimitMutation.mutate(limitData);
    };
    // Reset space selection when building changes
    (0, react_1.useEffect)(() => {
        setSelectedSpaceId('');
    }, [selectedBuildingId]);
    // Prepare chart data
    const chartData = (0, react_1.useMemo)(() => {
        if (!spaceStats?.userStats) {
            return [];
        }
        return spaceStats.userStats.slice(0, 10).map((user) => ({
            name: user.userName,
            hours: Math.round(user.totalHours * 10) / 10,
            bookings: user.totalBookings,
        }));
    }, [spaceStats]);
    const handleToggleRestriction = (user, isBlocked) => {
        setSelectedUser(user);
        setRestrictionDialogOpen(true);
        const reason = isBlocked ? 'Accès restreint par le gestionnaire' : '';
        toggleUserRestrictionMutation.mutate({
            userId: user.userId,
            isBlocked,
            reason,
        });
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', "data-testid": 'common-spaces-stats-page', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: language === 'fr' ? 'Gestion Espaces Communs' : 'Manage Common Spaces', subtitle: language === 'fr'
                    ? 'Statistiques et gestion des utilisateurs'
                    : 'Statistics and user management' }), (organizationId || buildingId) && ((0, jsx_runtime_1.jsx)("div", { className: "p-4 border-b border-gray-200", children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: buildingId ? handleBackToBuilding : handleBackToOrganization, className: "flex items-center gap-2", "data-testid": buildingId ? "button-back-to-building" : "button-back-to-organization", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4" }), buildingId ? (language === 'fr' ? 'Bâtiment' : 'Building') : (language === 'fr' ? 'Organisation' : 'Organization')] }) })), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'mb-8', children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building2, { className: 'w-5 h-5' }), language === 'fr' ? 'Sélection' : 'Selection'] }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: createDialogOpen, onOpenChange: setCreateDialogOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'default', size: 'sm', className: 'flex items-center gap-2', "data-testid": 'button-create-space', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4' }), language === 'fr' ? 'Créer un espace' : 'Create Space'] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-lg max-h-[90vh] overflow-hidden flex flex-col', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { className: 'flex-shrink-0', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: isEditMode
                                                                            ? language === 'fr'
                                                                                ? "Modifier l'espace commun"
                                                                                : 'Edit Common Space'
                                                                            : language === 'fr'
                                                                                ? 'Créer un nouvel espace commun'
                                                                                : 'Create New Common Space' }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: isEditMode
                                                                            ? language === 'fr'
                                                                                ? 'Modifiez les détails de cet espace partagé.'
                                                                                : 'Edit the details of this shared space.'
                                                                            : language === 'fr'
                                                                                ? 'Ajoutez un nouvel espace partagé pour les résidents de ce bâtiment.'
                                                                                : 'Add a new shared space for residents in this building.' })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-y-auto px-1', children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4 py-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'space-name', children: [language === 'fr' ? "Nom de l'espace" : 'Space Name', " *"] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'space-name', type: 'text', placeholder: language === 'fr' ? 'ex: Salle de réunion' : 'e.g. Meeting Room', value: createFormData.name, onChange: (e) => setCreateFormData({ ...createFormData, name: e.target.value }), "data-testid": 'input-space-name' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'space-description', children: language === 'fr' ? 'Description' : 'Description' }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'space-description', placeholder: language === 'fr'
                                                                                        ? "Description optionnelle de l'espace"
                                                                                        : 'Optional description of the space', value: createFormData.description, onChange: (e) => setCreateFormData({ ...createFormData, description: e.target.value }), "data-testid": 'textarea-space-description' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'space-building', children: [language === 'fr' ? 'Bâtiment' : 'Building', " *"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: createFormData.building_id, onValueChange: (value) => setCreateFormData({ ...createFormData, building_id: value }), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-space-building', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: language === 'fr' ? 'Sélectionnez un bâtiment' : 'Select a building' }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: buildings.map((building) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: building.id, children: [building.name, " - ", building.address] }, building.id))) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'space-capacity', children: language === 'fr' ? 'Capacité' : 'Capacity' }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'space-capacity', type: 'number', placeholder: '20', value: createFormData.capacity, onChange: (e) => setCreateFormData({ ...createFormData, capacity: e.target.value }), "data-testid": 'input-space-capacity' })] }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-2 flex items-end', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: 'space-reservable', checked: createFormData.is_reservable, onCheckedChange: (checked) => setCreateFormData({
                                                                                                    ...createFormData,
                                                                                                    is_reservable: checked === true,
                                                                                                }), "data-testid": 'checkbox-space-reservable' }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'space-reservable', className: 'text-sm', children: language === 'fr' ? 'Réservable' : 'Bookable' })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: language === 'fr' ? "Heures d'ouverture" : 'Opening Hours' }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)("input", { type: 'radio', id: 'hours-same', name: 'hours-mode', value: 'same', checked: createFormData.hours_mode === 'same', onChange: (e) => setCreateFormData({ ...createFormData, hours_mode: 'same' }), className: 'w-4 h-4 text-blue-600', "data-testid": 'radio-hours-same' }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'hours-same', className: 'text-sm', children: language === 'fr'
                                                                                                                ? 'Mêmes heures tous les jours'
                                                                                                                : 'Same hours every day' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)("input", { type: 'radio', id: 'hours-custom', name: 'hours-mode', value: 'custom', checked: createFormData.hours_mode === 'custom', onChange: (e) => setCreateFormData({ ...createFormData, hours_mode: 'custom' }), className: 'w-4 h-4 text-blue-600', "data-testid": 'radio-hours-custom' }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'hours-custom', className: 'text-sm', children: language === 'fr'
                                                                                                                ? 'Heures personnalisées par jour'
                                                                                                                : 'Custom hours per day' })] })] }), createFormData.hours_mode === 'same' ? (
                                                                                        // Same hours for all days
                                                                                        (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'opening-start', className: 'text-xs text-gray-500', children: language === 'fr' ? 'Ouverture' : 'Start' }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'opening-start', type: 'time', value: createFormData.opening_hours.start, onChange: (e) => setCreateFormData({
                                                                                                                ...createFormData,
                                                                                                                opening_hours: {
                                                                                                                    ...createFormData.opening_hours,
                                                                                                                    start: e.target.value,
                                                                                                                },
                                                                                                            }), "data-testid": 'input-opening-start' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'opening-end', className: 'text-xs text-gray-500', children: language === 'fr' ? 'Fermeture' : 'End' }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'opening-end', type: 'time', value: createFormData.opening_hours.end, onChange: (e) => setCreateFormData({
                                                                                                                ...createFormData,
                                                                                                                opening_hours: {
                                                                                                                    ...createFormData.opening_hours,
                                                                                                                    end: e.target.value,
                                                                                                                },
                                                                                                            }), "data-testid": 'input-opening-end' })] })] })) : (
                                                                                        // Custom hours per day
                                                                                        (0, jsx_runtime_1.jsx)("div", { className: 'space-y-3 max-h-64 overflow-y-auto', children: Object.entries(createFormData.weekly_hours).map(([day, hours]) => {
                                                                                                const dayLabels = {
                                                                                                    monday: language === 'fr' ? 'Lundi' : 'Monday',
                                                                                                    tuesday: language === 'fr' ? 'Mardi' : 'Tuesday',
                                                                                                    wednesday: language === 'fr' ? 'Mercredi' : 'Wednesday',
                                                                                                    thursday: language === 'fr' ? 'Jeudi' : 'Thursday',
                                                                                                    friday: language === 'fr' ? 'Vendredi' : 'Friday',
                                                                                                    saturday: language === 'fr' ? 'Samedi' : 'Saturday',
                                                                                                    sunday: language === 'fr' ? 'Dimanche' : 'Sunday',
                                                                                                };
                                                                                                return ((0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-4 gap-3 items-center', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: `available-${day}`, checked: createFormData.available_days[day], onCheckedChange: (checked) => setCreateFormData({
                                                                                                                        ...createFormData,
                                                                                                                        available_days: {
                                                                                                                            ...createFormData.available_days,
                                                                                                                            [day]: checked === true,
                                                                                                                        },
                                                                                                                    }), "data-testid": `checkbox-${day}-available` }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `available-${day}`, className: 'text-sm font-medium w-20', children: dayLabels[day] })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'time', value: hours.start, disabled: !createFormData.available_days[day], onChange: (e) => setCreateFormData({
                                                                                                                ...createFormData,
                                                                                                                weekly_hours: {
                                                                                                                    ...createFormData.weekly_hours,
                                                                                                                    [day]: { ...hours, start: e.target.value },
                                                                                                                },
                                                                                                            }), "data-testid": `input-${day}-start` }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'time', value: hours.end, disabled: !createFormData.available_days[day], onChange: (e) => setCreateFormData({
                                                                                                                ...createFormData,
                                                                                                                weekly_hours: {
                                                                                                                    ...createFormData.weekly_hours,
                                                                                                                    [day]: { ...hours, end: e.target.value },
                                                                                                                },
                                                                                                            }), "data-testid": `input-${day}-end` })] }, day));
                                                                                            }) }))] })] })] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { className: 'flex-shrink-0 mt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => {
                                                                            setCreateDialogOpen(false);
                                                                            setIsEditMode(false);
                                                                        }, "data-testid": 'button-cancel-create', children: language === 'fr' ? 'Annuler' : 'Cancel' }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: handleCreateSpace, disabled: createSpaceMutation.isPending ||
                                                                            !createFormData.name.trim() ||
                                                                            !createFormData.building_id, "data-testid": 'button-confirm-create', children: createSpaceMutation.isPending
                                                                            ? isEditMode
                                                                                ? language === 'fr'
                                                                                    ? 'Modification...'
                                                                                    : 'Updating...'
                                                                                : language === 'fr'
                                                                                    ? 'Création...'
                                                                                    : 'Creating...'
                                                                            : isEditMode
                                                                                ? language === 'fr'
                                                                                    ? "Modifier l'espace"
                                                                                    : 'Update Space'
                                                                                : language === 'fr'
                                                                                    ? "Créer l'espace"
                                                                                    : 'Create Space' })] })] })] })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [selectedBuildingId && ((0, jsx_runtime_1.jsxs)("div", { className: 'mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-blue-800 mb-1', children: language === 'fr' ? 'Bâtiment sélectionné' : 'Selected Building' }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-blue-700', children: [buildings.find(b => b.id === selectedBuildingId)?.name || 'Loading...', buildings.find(b => b.id === selectedBuildingId)?.address &&
                                                            ` - ${buildings.find(b => b.id === selectedBuildingId)?.address}`] })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)("label", { className: 'text-sm font-medium', "data-testid": 'space-select-label', children: language === 'fr' ? 'Espace commun' : 'Common Space' }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedSpaceId, onValueChange: setSelectedSpaceId, disabled: !selectedBuildingId || spacesLoading, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'space-select', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: language === 'fr' ? 'Sélectionnez un espace' : 'Select a space' }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: commonSpaces.map((space) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: space.id, children: [space.name, !space.isReservable && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'ml-2', children: language === 'fr' ? 'Non réservable' : 'Not bookable' }))] }, space.id))) })] })] })] })] }), (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: 'stats', className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: 'grid grid-cols-2 max-w-md', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'stats', className: 'flex items-center gap-2', "data-testid": 'tab-stats', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.BarChart3, { className: 'h-4 w-4' }), language === 'fr' ? 'Statistiques' : 'Statistics'] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'calendar', className: 'flex items-center gap-2', "data-testid": 'tab-calendar', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CalendarDays, { className: 'h-4 w-4' }), language === 'fr' ? 'Calendrier' : 'Calendar'] })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'flex items-center gap-2', disabled: !selectedSpaceId, onClick: () => {
                                                if (selectedSpaceId) {
                                                    // Find the selected space details
                                                    const selectedSpace = commonSpaces.find((s) => s.id === selectedSpaceId);
                                                    if (selectedSpace) {
                                                        setCreateFormData({
                                                            name: selectedSpace.name,
                                                            description: selectedSpace.description || '',
                                                            building_id: selectedBuildingId,
                                                            is_reservable: selectedSpace.isReservable,
                                                            capacity: selectedSpace.capacity?.toString() || '',
                                                            hours_mode: 'same',
                                                            opening_hours: {
                                                                start: '08:00',
                                                                end: '22:00',
                                                            },
                                                            weekly_hours: {
                                                                monday: { start: '08:00', end: '22:00' },
                                                                tuesday: { start: '08:00', end: '22:00' },
                                                                wednesday: { start: '08:00', end: '22:00' },
                                                                thursday: { start: '08:00', end: '22:00' },
                                                                friday: { start: '08:00', end: '22:00' },
                                                                saturday: { start: '09:00', end: '21:00' },
                                                                sunday: { start: '09:00', end: '21:00' },
                                                            },
                                                            available_days: {
                                                                monday: true,
                                                                tuesday: true,
                                                                wednesday: true,
                                                                thursday: true,
                                                                friday: true,
                                                                saturday: true,
                                                                sunday: true,
                                                            },
                                                        });
                                                        setIsEditMode(true);
                                                        setCreateDialogOpen(true);
                                                    }
                                                }
                                            }, "data-testid": 'button-edit-space', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit, { className: 'h-4 w-4' }), language === 'fr' ? 'Modifier' : 'Edit'] })] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsContent, { value: 'stats', className: 'space-y-6', children: [spaceStats && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-6', children: [(0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'h-4 w-4 text-blue-600' }), (0, jsx_runtime_1.jsxs)("div", { className: 'ml-4', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-600', "data-testid": 'total-bookings-label', children: language === 'fr' ? 'Réservations totales' : 'Total Bookings' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-gray-900', "data-testid": 'total-bookings-value', children: spaceStats.summary.totalBookings })] })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'h-4 w-4 text-green-600' }), (0, jsx_runtime_1.jsxs)("div", { className: 'ml-4', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-600', "data-testid": 'total-hours-label', children: language === 'fr' ? 'Heures totales' : 'Total Hours' }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-2xl font-bold text-gray-900', "data-testid": 'total-hours-value', children: [Math.round(spaceStats.summary.totalHours * 10) / 10, "h"] })] })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'h-4 w-4 text-purple-600' }), (0, jsx_runtime_1.jsxs)("div", { className: 'ml-4', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-600', "data-testid": 'unique-users-label', children: language === 'fr' ? 'Utilisateurs uniques' : 'Unique Users' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-gray-900', "data-testid": 'unique-users-value', children: spaceStats.summary.uniqueUsers })] })] }) }) })] }), chartData.length > 0 && ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'mb-8', children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.BarChart3, { className: 'w-5 h-5' }), language === 'fr'
                                                                        ? 'Top 10 utilisateurs par heures'
                                                                        : 'Top 10 Users by Hours'] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: 'h-80', "data-testid": 'usage-chart', children: (0, jsx_runtime_1.jsx)(recharts_1.ResponsiveContainer, { width: '100%', height: '100%', children: (0, jsx_runtime_1.jsxs)(recharts_1.BarChart, { data: chartData, children: [(0, jsx_runtime_1.jsx)(recharts_1.CartesianGrid, { strokeDasharray: '3 3' }), (0, jsx_runtime_1.jsx)(recharts_1.XAxis, { dataKey: 'name', angle: -45, textAnchor: 'end', height: 100 }), (0, jsx_runtime_1.jsx)(recharts_1.YAxis, {}), (0, jsx_runtime_1.jsx)(recharts_1.Tooltip, { formatter: (value, name) => [
                                                                                    value,
                                                                                    name === 'hours'
                                                                                        ? language === 'fr'
                                                                                            ? 'Heures'
                                                                                            : 'Hours'
                                                                                        : language === 'fr'
                                                                                            ? 'Réservations'
                                                                                            : 'Bookings',
                                                                                ] }), (0, jsx_runtime_1.jsx)(recharts_1.Legend, { formatter: (value) => value === 'hours'
                                                                                    ? language === 'fr'
                                                                                        ? 'Heures'
                                                                                        : 'Hours'
                                                                                    : language === 'fr'
                                                                                        ? 'Réservations'
                                                                                        : 'Bookings' }), (0, jsx_runtime_1.jsx)(recharts_1.Bar, { dataKey: 'hours', fill: '#3b82f6', name: 'hours' }), (0, jsx_runtime_1.jsx)(recharts_1.Bar, { dataKey: 'bookings', fill: '#10b981', name: 'bookings' })] }) }) }) })] })), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'w-5 h-5' }), language === 'fr' ? 'Statistiques des utilisateurs' : 'User Statistics'] }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600', children: [spaceStats.period, " - ", spaceStats.spaceName] })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: spaceStats.userStats.length > 0 ? ((0, jsx_runtime_1.jsxs)(table_1.Table, { "data-testid": 'users-stats-table', children: [(0, jsx_runtime_1.jsx)(table_1.TableHeader, { children: (0, jsx_runtime_1.jsxs)(table_1.TableRow, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHead, { children: language === 'fr' ? 'Utilisateur' : 'User' }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: language === 'fr' ? 'Email' : 'Email' }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'text-right', children: language === 'fr' ? 'Heures totales' : 'Total Hours' }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'text-right', children: language === 'fr' ? 'Réservations' : 'Bookings' }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'text-center', children: language === 'fr' ? 'Actions' : 'Actions' })] }) }), (0, jsx_runtime_1.jsx)(table_1.TableBody, { children: spaceStats.userStats.map((userStat) => ((0, jsx_runtime_1.jsxs)(table_1.TableRow, { "data-testid": `user-row-${userStat.userId}`, children: [(0, jsx_runtime_1.jsxs)(table_1.TableCell, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.User, { className: 'w-4 h-4 text-gray-500' }), (0, jsx_runtime_1.jsx)("span", { className: 'font-medium', children: userStat.userName })] }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'text-gray-600', children: userStat.userEmail }), (0, jsx_runtime_1.jsxs)(table_1.TableCell, { className: 'text-right font-mono', children: [Math.round(userStat.totalHours * 10) / 10, "h"] }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'text-right font-mono', children: userStat.totalBookings }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'text-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2 justify-center', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'destructive', size: 'sm', onClick: () => handleToggleRestriction(userStat, true), disabled: toggleUserRestrictionMutation.isPending, "data-testid": `button-block-${userStat.userId}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Ban, { className: 'w-4 h-4 mr-1' }), language === 'fr' ? 'Bloquer' : 'Block'] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => handleToggleRestriction(userStat, false), disabled: toggleUserRestrictionMutation.isPending, "data-testid": `button-unblock-${userStat.userId}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'w-4 h-4 mr-1' }), language === 'fr' ? 'Débloquer' : 'Unblock'] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'secondary', size: 'sm', onClick: () => {
                                                                                                    setSelectedUser(userStat);
                                                                                                    setTimeLimitFormData({
                                                                                                        limit_type: 'monthly',
                                                                                                        limit_hours: '10',
                                                                                                        common_space_id: selectedSpaceId,
                                                                                                    });
                                                                                                    setTimeLimitDialogOpen(true);
                                                                                                }, "data-testid": `button-time-limit-${userStat.userId}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Timer, { className: 'w-4 h-4 mr-1' }), language === 'fr' ? 'Limite' : 'Limit'] })] }) })] }, userStat.userId))) })] })) : ((0, jsx_runtime_1.jsx)("div", { className: 'py-4', children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.TrendingUp, titleKey: "noDataAvailable", descriptionKey: "noBookingsFoundMessage", testId: "no-stats-message", iconSize: 12 }) })) })] })] })), !selectedSpaceId && ((0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building2, titleKey: "selectCommonSpace", descriptionKey: "selectCommonSpaceMessage", testId: "select-common-space-message", iconSize: 12 })), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: timeLimitDialogOpen, onOpenChange: setTimeLimitDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-md', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: language === 'fr' ? 'Définir la limite de temps' : 'Set Time Limit' }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: language === 'fr'
                                                                    ? `Définir une limite de réservation pour ${selectedUser?.userName}`
                                                                    : `Set booking time limit for ${selectedUser?.userName}` })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4 py-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'limit-type', children: language === 'fr' ? 'Type de limite' : 'Limit Type' }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: timeLimitFormData.limit_type, onValueChange: (value) => setTimeLimitFormData({ ...timeLimitFormData, limit_type: value }), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-limit-type', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'monthly', children: language === 'fr' ? 'Mensuelle' : 'Monthly' }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'yearly', children: language === 'fr' ? 'Annuelle' : 'Yearly' })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'limit-hours', children: language === 'fr' ? 'Limite en heures' : 'Hour Limit' }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'limit-hours', type: 'number', min: '1', max: '8760', placeholder: '10', value: timeLimitFormData.limit_hours, onChange: (e) => setTimeLimitFormData({
                                                                            ...timeLimitFormData,
                                                                            limit_hours: e.target.value,
                                                                        }), "data-testid": 'input-limit-hours' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500', children: language === 'fr'
                                                                            ? `Limite ${timeLimitFormData.limit_type === 'monthly' ? 'mensuelle' : 'annuelle'} en heures`
                                                                            : `${timeLimitFormData.limit_type === 'monthly' ? 'Monthly' : 'Yearly'} limit in hours` })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'limit-scope', children: language === 'fr' ? 'Portée' : 'Scope' }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: timeLimitFormData.common_space_id, onValueChange: (value) => setTimeLimitFormData({ ...timeLimitFormData, common_space_id: value }), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-limit-scope', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: language === 'fr' ? 'Sélectionnez la portée' : 'Select scope' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: '', children: language === 'fr' ? 'Tous les espaces' : 'All spaces' }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: selectedSpaceId, children: language === 'fr' ? 'Cet espace uniquement' : 'This space only' })] })] })] })] }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => setTimeLimitDialogOpen(false), "data-testid": 'button-cancel-time-limit', children: language === 'fr' ? 'Annuler' : 'Cancel' }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: handleSetTimeLimit, disabled: setTimeLimitMutation.isPending || !timeLimitFormData.limit_hours, "data-testid": 'button-confirm-time-limit', children: setTimeLimitMutation.isPending
                                                                    ? language === 'fr'
                                                                        ? 'Application...'
                                                                        : 'Setting...'
                                                                    : language === 'fr'
                                                                        ? 'Appliquer la limite'
                                                                        : 'Set Limit' })] })] }) })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'calendar', className: 'space-y-6', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-5 w-5' }), language === 'fr' ? 'Vue Calendrier Manager' : 'Manager Calendar View'] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: selectedSpaceId ? ((0, jsx_runtime_1.jsx)("div", { className: 'p-0', children: (0, jsx_runtime_1.jsx)(common_space_calendar_1.CommonSpaceCalendar, { space: {
                                                            id: selectedSpaceId,
                                                            name: commonSpaces.find((s) => s.id === selectedSpaceId)?.name ||
                                                                'Espace sélectionné',
                                                            isReservable: false,
                                                        }, className: 'border-0 shadow-none bg-transparent p-0' }) })) : selectedBuildingId ? ((0, jsx_runtime_1.jsx)(calendar_view_1.CalendarView, { mode: 'building', buildingId: selectedBuildingId, showControls: true, onEventClick: (event) => {
                                                        // Manager viewing building event
                                                    }, "data-testid": 'manager-building-calendar-view' })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-12 text-muted-foreground', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CalendarDays, { className: 'h-16 w-16 mx-auto mb-4 opacity-20' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-medium mb-2', children: language === 'fr'
                                                                ? 'Sélectionnez un espace ou un bâtiment'
                                                                : 'Select a space or building' }), (0, jsx_runtime_1.jsx)("p", { children: language === 'fr'
                                                                ? 'Choisissez un bâtiment ou un espace spécifique pour voir son calendrier de réservations avec les détails complets'
                                                                : 'Choose a building or specific space to view its booking calendar with full details' })] })) })] }) })] })] }) })] }));
}
// Export the component wrapped with access control
// Wrap with hierarchical selection HOC using 2-level hierarchy (organization → building)
const CommonSpacesStatsPageWithHierarchy = (0, withHierarchicalSelection_1.withHierarchicalSelection)(CommonSpacesStatsPageInner, {
    hierarchy: ['organization', 'building']
});
exports.default = withManagerAccess(CommonSpacesStatsPageWithHierarchy);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,