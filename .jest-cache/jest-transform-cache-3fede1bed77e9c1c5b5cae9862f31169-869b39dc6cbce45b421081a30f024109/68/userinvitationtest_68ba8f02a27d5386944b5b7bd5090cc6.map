{"file":"/home/runner/workspace/tests/integration/user-invitation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/user-invitation.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../../server/routes';\nimport { storage } from '../../server/storage';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Create a simple test server with test authentication\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Add test authentication middleware that bypasses real auth\n  app.use(async (req: any, res, next) => {\n    // Check for test user header\n    const testUserId = req.headers['x-test-user-id'];\n    if (testUserId) {\n      // Find the actual user data for proper testing\n      const [user] = await db.select().from(schema.users).where(eq(schema.users.id, testUserId)).limit(1);\n      if (user) {\n        req.session = { \n          userId: testUserId,\n          isAuthenticated: true,\n          role: user.role\n        };\n        req.user = user; // Set full user object for auth middleware\n      }\n    }\n    next();\n  });\n  \n  // Register all routes\n  registerRoutes(app);\n  \n  return app;\n};\n\ndescribe('User Invitation API', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let managerUser: any;\n  let testOrganization: any;\n  let testBuilding: any;\n  let testResidence: any;\n  \n  beforeEach(async () => {\n    app = createTestApp();\n    // Clear test data\n    await db.delete(schema.invitations);\n    await db.delete(schema.users);\n    await db.delete(schema.residences);\n    await db.delete(schema.buildings);\n    await db.delete(schema.organizations);\n\n    // Create test organization\n    const [org] = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Test Organization',\n        type: 'Standard' as any,\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        phone: '514-555-0123',\n        email: 'test@org.com',\n      })\n      .returning();\n    testOrganization = org;\n\n    // Create test building\n    const [building] = await db\n      .insert(schema.buildings)\n      .values({\n        organizationId: testOrganization.id,\n        name: 'Test Building',\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        totalUnits: 10,\n        constructionYear: 2020,\n        buildingType: 'apartment',\n      })\n      .returning();\n    testBuilding = building;\n\n    // Create test residence\n    const [residence] = await db\n      .insert(schema.residences)\n      .values({\n        buildingId: testBuilding.id,\n        unitNumber: '101',\n        squareFootage: 1000,\n        bedrooms: 2,\n        bathrooms: 1,\n        parkingSpaces: 1,\n        storageUnits: 1,\n      })\n      .returning();\n    testResidence = residence;\n\n    // Create admin user\n    const [admin] = await db\n      .insert(schema.users)\n      .values({\n        email: 'admin@test.com',\n        username: 'admin',\n        password: 'hashedpassword123',\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n        isActive: true,\n        phone: '514-555-0001',\n      })\n      .returning();\n    adminUser = admin;\n\n    // Create manager user\n    const [manager] = await db\n      .insert(schema.users)\n      .values({\n        email: 'manager@test.com',\n        username: 'manager',\n        password: 'hashedpassword123',\n        firstName: 'Manager',\n        lastName: 'User',\n        role: 'manager',\n        isActive: true,\n        phone: '514-555-0002',\n      })\n      .returning();\n    managerUser = manager;\n\n    // Assign manager to organization\n    await db\n      .insert(schema.userOrganizations)\n      .values({\n        userId: managerUser.id,\n        organizationId: testOrganization.id,\n      });\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    await db.delete(schema.invitations);\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.userResidences);\n    await db.delete(schema.users);\n    await db.delete(schema.residences);\n    await db.delete(schema.buildings);\n    await db.delete(schema.organizations);\n  });\n\n  describe('POST /api/invitations', () => {\n    it('should successfully create invitation as admin', async () => {\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now\n\n      const invitationData = {\n        email: 'newuser@test.com',\n        role: 'resident',\n        organizationId: testOrganization.id,\n        residenceId: testResidence.id,\n        expiresAt: expiresAt.toISOString(),\n        personalMessage: 'Welcome to our organization!',\n      };\n\n      const response = await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send(invitationData)\n        .expect(201);\n\n      expect(response.body.message).toBe('Invitation sent successfully');\n      expect(response.body.invitationId).toBeDefined();\n\n      // Verify invitation was created in database\n      const invitation = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.email, 'newuser@test.com'))\n        .limit(1);\n\n      expect(invitation).toHaveLength(1);\n      expect(invitation[0].role).toBe('resident');\n      expect(invitation[0].organizationId).toBe(testOrganization.id);\n      expect(invitation[0].residenceId).toBe(testResidence.id);\n      expect(invitation[0].invitedByUserId).toBe(adminUser.id);\n      expect(invitation[0].personalMessage).toBe('Welcome to our organization!');\n      expect(invitation[0].token).toBeDefined();\n      expect(invitation[0].tokenHash).toBeDefined();\n    });\n\n    it('should successfully create invitation as manager', async () => {\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now\n\n      const invitationData = {\n        email: 'newuser2@test.com',\n        role: 'tenant',\n        organizationId: testOrganization.id,\n        expiresAt: expiresAt.toISOString(),\n      };\n\n      const response = await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', managerUser.id)\n        .send(invitationData)\n        .expect(201);\n\n      expect(response.body.message).toBe('Invitation sent successfully');\n      expect(response.body.invitationId).toBeDefined();\n\n      // Verify invitation was created\n      const invitation = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.email, 'newuser2@test.com'))\n        .limit(1);\n\n      expect(invitation).toHaveLength(1);\n      expect(invitation[0].role).toBe('tenant');\n    });\n\n    it('should fail when inviting existing user', async () => {\n      const invitationData = {\n        email: adminUser.email, // Use existing admin email\n        role: 'resident',\n        organizationId: testOrganization.id,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      };\n\n      const response = await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send(invitationData)\n        .expect(400);\n\n      expect(response.body.message).toBe('User with this email already exists');\n      expect(response.body.code).toBe('USER_EXISTS');\n    });\n\n    it('should fail when manager tries to invite admin role', async () => {\n      const invitationData = {\n        email: 'newadmin@test.com',\n        role: 'admin',\n        organizationId: testOrganization.id,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      };\n\n      const response = await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', managerUser.id)\n        .send(invitationData)\n        .expect(403);\n\n      expect(response.body.message).toBe('Managers can only invite resident, tenant, and manager roles');\n      expect(response.body.code).toBe('ROLE_PERMISSION_DENIED');\n    });\n\n    it('should require authentication', async () => {\n      const invitationData = {\n        email: 'newuser@test.com',\n        role: 'resident',\n        organizationId: testOrganization.id,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      };\n\n      const response = await request(app)\n        .post('/api/invitations')\n        .send(invitationData)\n        .expect(401);\n\n      expect(response.body.message).toBe('Authentication required');\n    });\n\n    it('should validate required fields', async () => {\n      const response = await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send({}) // Empty request body\n        .expect(400);\n\n      expect(response.body.message).toContain('required');\n    });\n\n    it('should validate email format', async () => {\n      const invitationData = {\n        email: 'invalid-email',\n        role: 'resident',\n        organizationId: testOrganization.id,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      };\n\n      const response = await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send(invitationData)\n        .expect(400);\n\n      expect(response.body.message).toContain('email');\n    });\n\n    it('should generate unique tokens for multiple invitations', async () => {\n      const invitationData1 = {\n        email: 'user1@test.com',\n        role: 'resident',\n        organizationId: testOrganization.id,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      };\n\n      const invitationData2 = {\n        email: 'user2@test.com',\n        role: 'tenant',\n        organizationId: testOrganization.id,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n      };\n\n      // Create two invitations\n      await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send(invitationData1)\n        .expect(201);\n\n      await request(app)\n        .post('/api/invitations')\n        .set('x-test-user-id', adminUser.id)\n        .send(invitationData2)\n        .expect(201);\n\n      // Verify both invitations exist with different tokens\n      const invitations = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.organizationId, testOrganization.id));\n\n      expect(invitations).toHaveLength(2);\n      expect(invitations[0].token).not.toBe(invitations[1].token);\n      expect(invitations[0].tokenHash).not.toBe(invitations[1].tokenHash);\n    });\n  });\n});"],"version":3}