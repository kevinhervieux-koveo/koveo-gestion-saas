71aaff9e05779e460d7a9cc86536cf0a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
// Create a simple test server with test authentication
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Add test authentication middleware that bypasses real auth
    app.use(async (req, res, next) => {
        // Check for test user header
        const testUserId = req.headers['x-test-user-id'];
        if (testUserId) {
            // Find the actual user data for proper testing
            const [user] = await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, testUserId)).limit(1);
            if (user) {
                req.session = {
                    userId: testUserId,
                    isAuthenticated: true,
                    role: user.role
                };
                req.user = user; // Set full user object for auth middleware
            }
        }
        next();
    });
    // Register all routes
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('User Invitation API', () => {
    let app;
    let adminUser;
    let managerUser;
    let testOrganization;
    let testBuilding;
    let testResidence;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clear test data
        await db_1.db.delete(schema.invitations);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.residences);
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.organizations);
        // Create test organization
        const [org] = await db_1.db
            .insert(schema.organizations)
            .values({
            name: 'Test Organization',
            type: 'Standard',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            phone: '514-555-0123',
            email: 'test@org.com',
        })
            .returning();
        testOrganization = org;
        // Create test building
        const [building] = await db_1.db
            .insert(schema.buildings)
            .values({
            organizationId: testOrganization.id,
            name: 'Test Building',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            totalUnits: 10,
            constructionYear: 2020,
            buildingType: 'apartment',
        })
            .returning();
        testBuilding = building;
        // Create test residence
        const [residence] = await db_1.db
            .insert(schema.residences)
            .values({
            buildingId: testBuilding.id,
            unitNumber: '101',
            squareFootage: 1000,
            bedrooms: 2,
            bathrooms: 1,
            parkingSpaces: 1,
            storageUnits: 1,
        })
            .returning();
        testResidence = residence;
        // Create admin user
        const [admin] = await db_1.db
            .insert(schema.users)
            .values({
            email: 'admin@test.com',
            username: 'admin',
            password: 'hashedpassword123',
            firstName: 'Admin',
            lastName: 'User',
            role: 'admin',
            isActive: true,
            phone: '514-555-0001',
        })
            .returning();
        adminUser = admin;
        // Create manager user
        const [manager] = await db_1.db
            .insert(schema.users)
            .values({
            email: 'manager@test.com',
            username: 'manager',
            password: 'hashedpassword123',
            firstName: 'Manager',
            lastName: 'User',
            role: 'manager',
            isActive: true,
            phone: '514-555-0002',
        })
            .returning();
        managerUser = manager;
        // Assign manager to organization
        await db_1.db
            .insert(schema.userOrganizations)
            .values({
            userId: managerUser.id,
            organizationId: testOrganization.id,
        });
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await db_1.db.delete(schema.invitations);
        await db_1.db.delete(schema.userOrganizations);
        await db_1.db.delete(schema.userResidences);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.residences);
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.organizations);
    });
    (0, globals_1.describe)('POST /api/invitations', () => {
        (0, globals_1.it)('should successfully create invitation as admin', async () => {
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now
            const invitationData = {
                email: 'newuser@test.com',
                role: 'resident',
                organizationId: testOrganization.id,
                residenceId: testResidence.id,
                expiresAt: expiresAt.toISOString(),
                personalMessage: 'Welcome to our organization!',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send(invitationData)
                .expect(201);
            (0, globals_1.expect)(response.body.message).toBe('Invitation sent successfully');
            (0, globals_1.expect)(response.body.invitationId).toBeDefined();
            // Verify invitation was created in database
            const invitation = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.email, 'newuser@test.com'))
                .limit(1);
            (0, globals_1.expect)(invitation).toHaveLength(1);
            (0, globals_1.expect)(invitation[0].role).toBe('resident');
            (0, globals_1.expect)(invitation[0].organizationId).toBe(testOrganization.id);
            (0, globals_1.expect)(invitation[0].residenceId).toBe(testResidence.id);
            (0, globals_1.expect)(invitation[0].invitedByUserId).toBe(adminUser.id);
            (0, globals_1.expect)(invitation[0].personalMessage).toBe('Welcome to our organization!');
            (0, globals_1.expect)(invitation[0].token).toBeDefined();
            (0, globals_1.expect)(invitation[0].tokenHash).toBeDefined();
        });
        (0, globals_1.it)('should successfully create invitation as manager', async () => {
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now
            const invitationData = {
                email: 'newuser2@test.com',
                role: 'tenant',
                organizationId: testOrganization.id,
                expiresAt: expiresAt.toISOString(),
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', managerUser.id)
                .send(invitationData)
                .expect(201);
            (0, globals_1.expect)(response.body.message).toBe('Invitation sent successfully');
            (0, globals_1.expect)(response.body.invitationId).toBeDefined();
            // Verify invitation was created
            const invitation = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.email, 'newuser2@test.com'))
                .limit(1);
            (0, globals_1.expect)(invitation).toHaveLength(1);
            (0, globals_1.expect)(invitation[0].role).toBe('tenant');
        });
        (0, globals_1.it)('should fail when inviting existing user', async () => {
            const invitationData = {
                email: adminUser.email, // Use existing admin email
                role: 'resident',
                organizationId: testOrganization.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send(invitationData)
                .expect(400);
            (0, globals_1.expect)(response.body.message).toBe('User with this email already exists');
            (0, globals_1.expect)(response.body.code).toBe('USER_EXISTS');
        });
        (0, globals_1.it)('should fail when manager tries to invite admin role', async () => {
            const invitationData = {
                email: 'newadmin@test.com',
                role: 'admin',
                organizationId: testOrganization.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', managerUser.id)
                .send(invitationData)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toBe('Managers can only invite resident, tenant, and manager roles');
            (0, globals_1.expect)(response.body.code).toBe('ROLE_PERMISSION_DENIED');
        });
        (0, globals_1.it)('should require authentication', async () => {
            const invitationData = {
                email: 'newuser@test.com',
                role: 'resident',
                organizationId: testOrganization.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .send(invitationData)
                .expect(401);
            (0, globals_1.expect)(response.body.message).toBe('Authentication required');
        });
        (0, globals_1.it)('should validate required fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send({}) // Empty request body
                .expect(400);
            (0, globals_1.expect)(response.body.message).toContain('required');
        });
        (0, globals_1.it)('should validate email format', async () => {
            const invitationData = {
                email: 'invalid-email',
                role: 'resident',
                organizationId: testOrganization.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send(invitationData)
                .expect(400);
            (0, globals_1.expect)(response.body.message).toContain('email');
        });
        (0, globals_1.it)('should generate unique tokens for multiple invitations', async () => {
            const invitationData1 = {
                email: 'user1@test.com',
                role: 'resident',
                organizationId: testOrganization.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            };
            const invitationData2 = {
                email: 'user2@test.com',
                role: 'tenant',
                organizationId: testOrganization.id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            };
            // Create two invitations
            await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send(invitationData1)
                .expect(201);
            await (0, supertest_1.default)(app)
                .post('/api/invitations')
                .set('x-test-user-id', adminUser.id)
                .send(invitationData2)
                .expect(201);
            // Verify both invitations exist with different tokens
            const invitations = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.organizationId, testOrganization.id));
            (0, globals_1.expect)(invitations).toHaveLength(2);
            (0, globals_1.expect)(invitations[0].token).not.toBe(invitations[1].token);
            (0, globals_1.expect)(invitations[0].tokenHash).not.toBe(invitations[1].tokenHash);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,