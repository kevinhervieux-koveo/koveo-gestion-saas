8c339c33cb3019b0a0c0f1e982827f9b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBroadcastWeeksInMonth = getBroadcastWeeksInMonth;
const FIVE_WEEKS = 5;
const FOUR_WEEKS = 4;
/**
 * Returns the number of weeks to display in the broadcast calendar for a given
 * month.
 *
 * The broadcast calendar may have either 4 or 5 weeks in a month, depending on
 * the start and end dates of the broadcast weeks.
 *
 * @since 9.4.0
 * @param month The month for which to calculate the number of weeks.
 * @param dateLib The date library to use for date manipulation.
 * @returns The number of weeks in the broadcast calendar (4 or 5).
 */
function getBroadcastWeeksInMonth(month, dateLib) {
    // Get the first day of the month
    const firstDayOfMonth = dateLib.startOfMonth(month);
    // Get the day of the week for the first day of the month (1-7, where 1 is Monday)
    const firstDayOfWeek = firstDayOfMonth.getDay() > 0 ? firstDayOfMonth.getDay() : 7;
    const broadcastStartDate = dateLib.addDays(month, -firstDayOfWeek + 1);
    const lastDateOfLastWeek = dateLib.addDays(broadcastStartDate, FIVE_WEEKS * 7 - 1);
    const numberOfWeeks = dateLib.getMonth(month) === dateLib.getMonth(lastDateOfLastWeek)
        ? FIVE_WEEKS
        : FOUR_WEEKS;
    return numberOfWeeks;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldEJyb2FkY2FzdFdlZWtzSW5Nb250aC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsd0JBQXdCLEdBQUcsd0JBQXdCLENBQUM7QUFDNUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNyQjs7Ozs7Ozs7Ozs7R0FXRztBQUNILFNBQVMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLE9BQU87SUFDNUMsaUNBQWlDO0lBQ2pDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEQsa0ZBQWtGO0lBQ2xGLE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25GLE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkUsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkYsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxPQUFPLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1FBQ2xGLENBQUMsQ0FBQyxVQUFVO1FBQ1osQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUNqQixPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL3JlYWN0LWRheS1waWNrZXIvZGlzdC9janMvaGVscGVycy9nZXRCcm9hZGNhc3RXZWVrc0luTW9udGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEJyb2FkY2FzdFdlZWtzSW5Nb250aCA9IGdldEJyb2FkY2FzdFdlZWtzSW5Nb250aDtcbmNvbnN0IEZJVkVfV0VFS1MgPSA1O1xuY29uc3QgRk9VUl9XRUVLUyA9IDQ7XG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiB3ZWVrcyB0byBkaXNwbGF5IGluIHRoZSBicm9hZGNhc3QgY2FsZW5kYXIgZm9yIGEgZ2l2ZW5cbiAqIG1vbnRoLlxuICpcbiAqIFRoZSBicm9hZGNhc3QgY2FsZW5kYXIgbWF5IGhhdmUgZWl0aGVyIDQgb3IgNSB3ZWVrcyBpbiBhIG1vbnRoLCBkZXBlbmRpbmcgb25cbiAqIHRoZSBzdGFydCBhbmQgZW5kIGRhdGVzIG9mIHRoZSBicm9hZGNhc3Qgd2Vla3MuXG4gKlxuICogQHNpbmNlIDkuNC4wXG4gKiBAcGFyYW0gbW9udGggVGhlIG1vbnRoIGZvciB3aGljaCB0byBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiB3ZWVrcy5cbiAqIEBwYXJhbSBkYXRlTGliIFRoZSBkYXRlIGxpYnJhcnkgdG8gdXNlIGZvciBkYXRlIG1hbmlwdWxhdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2Ygd2Vla3MgaW4gdGhlIGJyb2FkY2FzdCBjYWxlbmRhciAoNCBvciA1KS5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJvYWRjYXN0V2Vla3NJbk1vbnRoKG1vbnRoLCBkYXRlTGliKSB7XG4gICAgLy8gR2V0IHRoZSBmaXJzdCBkYXkgb2YgdGhlIG1vbnRoXG4gICAgY29uc3QgZmlyc3REYXlPZk1vbnRoID0gZGF0ZUxpYi5zdGFydE9mTW9udGgobW9udGgpO1xuICAgIC8vIEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrIGZvciB0aGUgZmlyc3QgZGF5IG9mIHRoZSBtb250aCAoMS03LCB3aGVyZSAxIGlzIE1vbmRheSlcbiAgICBjb25zdCBmaXJzdERheU9mV2VlayA9IGZpcnN0RGF5T2ZNb250aC5nZXREYXkoKSA+IDAgPyBmaXJzdERheU9mTW9udGguZ2V0RGF5KCkgOiA3O1xuICAgIGNvbnN0IGJyb2FkY2FzdFN0YXJ0RGF0ZSA9IGRhdGVMaWIuYWRkRGF5cyhtb250aCwgLWZpcnN0RGF5T2ZXZWVrICsgMSk7XG4gICAgY29uc3QgbGFzdERhdGVPZkxhc3RXZWVrID0gZGF0ZUxpYi5hZGREYXlzKGJyb2FkY2FzdFN0YXJ0RGF0ZSwgRklWRV9XRUVLUyAqIDcgLSAxKTtcbiAgICBjb25zdCBudW1iZXJPZldlZWtzID0gZGF0ZUxpYi5nZXRNb250aChtb250aCkgPT09IGRhdGVMaWIuZ2V0TW9udGgobGFzdERhdGVPZkxhc3RXZWVrKVxuICAgICAgICA/IEZJVkVfV0VFS1NcbiAgICAgICAgOiBGT1VSX1dFRUtTO1xuICAgIHJldHVybiBudW1iZXJPZldlZWtzO1xufVxuIl0sInZlcnNpb24iOjN9