{"file":"/home/runner/workspace/tests/unit/button-functionality/ui-control-buttons.test.tsx","mappings":";;;;;;AAAA;;;GAGG;AAEH,kDAA0B;AAC1B,kDAA4E;AAC5E,uDAAyE;AACzE,qCAAmC;AACnC,6EAAoD;AAEpD,QAAQ,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAChD,IAAI,WAAwB,CAAC;IAC7B,IAAI,IAAS,CAAC;IAEd,UAAU,CAAC,GAAG,EAAE;QACd,WAAW,GAAG,IAAI,yBAAW,CAAC;YAC5B,cAAc,EAAE;gBACd,OAAO,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;gBACzB,SAAS,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;aAC5B;SACF,CAAC,CAAC;QACH,IAAI,GAAG,oBAAS,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,MAAM,kBAAkB,GAAG,CAAC,SAA6B,EAAE,EAAE;QAC3D,OAAO,IAAA,cAAM,EACX,uBAAC,iCAAmB,IAAC,MAAM,EAAE,WAAW,YACrC,SAAS,GACU,CACvB,CAAC;IACJ,CAAC,CAAC;IAEF,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC9B,MAAM,WAAW,GAAG,CAAC,CAAC;YACtB,MAAM,UAAU,GAAG,CAAC,CAAC;YAErB,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,CAC3B,4CACE,kDACc,sBAAsB,EAClC,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,GAAG,CAAC,CAAC,EAC3C,QAAQ,EAAE,WAAW,IAAI,CAAC,yBAGnB,EAER,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAC9B,kDAEe,eAAe,OAAO,EAAE,EACrC,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,EACnC,SAAS,EAAE,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,YAEjD,OAAO,IALH,OAAO,CAML,CACV,CAAC,EAEF,kDACc,kBAAkB,EAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,GAAG,CAAC,CAAC,EAC3C,QAAQ,EAAE,WAAW,IAAI,UAAU,qBAG5B,IACL,CACP,CAAC;YAEF,kBAAkB,CAAC,uBAAC,cAAc,KAAG,CAAC,CAAC;YAEvC,MAAM,UAAU,GAAG,cAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;YAC9D,MAAM,UAAU,GAAG,cAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;YAC1D,MAAM,WAAW,GAAG,cAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;YAExD,MAAM,CAAC,UAAU,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACvC,MAAM,CAAC,UAAU,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAExC,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC7B,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAE5C,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC7B,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAE5C,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAC9B,MAAM,CAAC,WAAW,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,iBAAiB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACpC,MAAM,iBAAiB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAEpC,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,CAC5B,4CACE,kDACc,YAAY,EACxB,OAAO,EAAE,iBAAiB,+BAGnB,EACT,kDACc,YAAY,EACxB,OAAO,EAAE,iBAAiB,2BAGnB,IACL,CACP,CAAC;YAEF,kBAAkB,CAAC,uBAAC,eAAe,KAAG,CAAC,CAAC;YAExC,MAAM,eAAe,GAAG,cAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACzD,MAAM,eAAe,GAAG,cAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YAEzD,MAAM,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC5C,MAAM,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAE5C,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAClC,MAAM,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE7C,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAClC,MAAM,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACnC,MAAM,kBAAkB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACrC,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACjC,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAE/B,MAAM,oBAAoB,GAAG,GAAG,EAAE;gBAChC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAExD,OAAO,CACL,4CACE,kDACc,sBAAsB,EAClC,OAAO,EAAE,GAAG,EAAE;gCACZ,gBAAgB,EAAE,CAAC;gCACnB,YAAY,CAAC,IAAI,CAAC,CAAC;4BACrB,CAAC,8BAGM,EAET,kDACc,wBAAwB,EACpC,OAAO,EAAE,kBAAkB,gCAGpB,EAER,SAAS,IAAI,CACZ,4CACE,kDACc,oBAAoB,EAChC,OAAO,EAAE,GAAG,EAAE;wCACZ,cAAc,EAAE,CAAC;wCACjB,YAAY,CAAC,KAAK,CAAC,CAAC;oCACtB,CAAC,4BAGM,EACT,kDACc,kBAAkB,EAC9B,OAAO,EAAE,YAAY,0BAGd,EACT,kDACc,kBAAkB,EAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,0BAGhC,EACT,kDACc,wBAAwB,EACpC,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,gCAG3B,EACT,kDACc,2BAA2B,EACvC,OAAO,EAAE,GAAG,EAAE;wCACZ,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;wCAC/B,YAAY,CAAC,KAAK,CAAC,CAAC;oCACtB,CAAC,6BAGM,IACL,CACP,IACG,CACP,CAAC;YACJ,CAAC,CAAC;YAEF,kBAAkB,CAAC,uBAAC,oBAAoB,KAAG,CAAC,CAAC;YAE7C,MAAM,UAAU,GAAG,cAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;YAC9D,MAAM,YAAY,GAAG,cAAM,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC;YAElE,MAAM,CAAC,UAAU,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACvC,MAAM,CAAC,YAAY,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAEzC,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC/B,MAAM,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE9C,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC7B,MAAM,CAAC,gBAAgB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE5C,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,MAAM,YAAY,GAAG,cAAM,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;gBAC9D,MAAM,UAAU,GAAG,cAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;gBAE1D,MAAM,CAAC,YAAY,CAAC,CAAC,iBAAiB,EAAE,CAAC;gBACzC,MAAM,CAAC,UAAU,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzC,CAAC,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,cAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;YAC1D,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YAC7B,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,oBAAoB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YACvC,MAAM,0BAA0B,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAE7C,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,CAC/B,4CACE,kDACc,2BAA2B,EACvC,OAAO,EAAE,oBAAoB,mCAGtB,EACT,kDACc,iCAAiC,EAC7C,OAAO,EAAE,0BAA0B,yCAG5B,IACL,CACP,CAAC;YAEF,kBAAkB,CAAC,uBAAC,kBAAkB,KAAG,CAAC,CAAC;YAE3C,MAAM,eAAe,GAAG,cAAM,CAAC,WAAW,CAAC,2BAA2B,CAAC,CAAC;YACxE,MAAM,qBAAqB,GAAG,cAAM,CAAC,WAAW,CAAC,iCAAiC,CAAC,CAAC;YAEpF,MAAM,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC5C,MAAM,CAAC,qBAAqB,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAElD,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAClC,MAAM,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAEhD,MAAM,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACxC,MAAM,CAAC,0BAA0B,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAE9B,MAAM,iBAAiB,GAAG,GAAG,EAAE,CAAC,CAC9B,4CACE,kDACc,iBAAiB,EAC7B,OAAO,EAAE,WAAW,yBAGb,EACT,kDACc,iBAAiB,EAC7B,OAAO,EAAE,WAAW,yBAGb,EACT,kDACc,wBAAwB,EACpC,OAAO,EAAE,WAAW,gCAGb,IACL,CACP,CAAC;YAEF,kBAAkB,CAAC,uBAAC,iBAAiB,KAAG,CAAC,CAAC;YAE1C,MAAM,aAAa,GAAG,cAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;YAC5D,MAAM,aAAa,GAAG,cAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;YAC5D,MAAM,mBAAmB,GAAG,cAAM,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC;YAEzE,MAAM,CAAC,aAAa,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC1C,MAAM,CAAC,aAAa,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC1C,MAAM,CAAC,mBAAmB,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAEhD,MAAM,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAChC,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAEvC,MAAM,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAChC,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAEvC,MAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACtC,MAAM,CAAC,WAAW,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,oBAAoB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAEvC,MAAM,oBAAoB,GAAG,GAAG,EAAE,CAAC,CACjC,kDACc,0BAA0B,EACtC,OAAO,EAAE,oBAAoB,kCAGtB,CACV,CAAC;YAEF,kBAAkB,CAAC,uBAAC,oBAAoB,KAAG,CAAC,CAAC;YAE7C,MAAM,gBAAgB,GAAG,cAAM,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC;YACxE,MAAM,CAAC,gBAAgB,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAE7C,MAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YACnC,MAAM,CAAC,oBAAoB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,iBAAiB,GAAG,GAAG,EAAE;gBAC7B,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,eAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAElD,OAAO,CACL,4CACE,kDACc,kBAAkB,EAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,qBAG1B,EAER,MAAM,IAAI,CACT,kDACc,mBAAmB,EAC/B,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,2BAGxB,CACV,IACG,CACP,CAAC;YACJ,CAAC,CAAC;YAEF,kBAAkB,CAAC,uBAAC,iBAAiB,KAAG,CAAC,CAAC;YAE1C,MAAM,eAAe,GAAG,cAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;YAC/D,MAAM,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAE5C,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAElC,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,MAAM,WAAW,GAAG,cAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;gBAC5D,MAAM,CAAC,WAAW,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,cAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;YAC5D,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,MAAM,CAAC,cAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC;YAC5E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/tests/unit/button-functionality/ui-control-buttons.test.tsx"],"sourcesContent":["/**\n * UI Control Button Functionality Tests\n * Tests all UI control buttons (pagination, calendar navigation, filters, etc.)\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport '@testing-library/jest-dom';\nimport userEvent from '@testing-library/user-event';\n\ndescribe('UI Control Buttons Functionality', () => {\n  let queryClient: QueryClient;\n  let user: any;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n    user = userEvent.setup();\n    jest.clearAllMocks();\n  });\n\n  const renderWithProvider = (component: React.ReactElement) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        {component}\n      </QueryClientProvider>\n    );\n  };\n\n  describe('Pagination Control Buttons', () => {\n    it('should handle pagination navigation', async () => {\n      const mockSetPage = jest.fn();\n      const currentPage = 2;\n      const totalPages = 5;\n      \n      const MockPagination = () => (\n        <div>\n          <button \n            data-testid=\"button-previous-page\"\n            onClick={() => mockSetPage(currentPage - 1)}\n            disabled={currentPage <= 1}\n          >\n            Previous\n          </button>\n          \n          {[1, 2, 3, 4, 5].map(pageNum => (\n            <button \n              key={pageNum}\n              data-testid={`button-page-${pageNum}`}\n              onClick={() => mockSetPage(pageNum)}\n              className={pageNum === currentPage ? 'active' : ''}\n            >\n              {pageNum}\n            </button>\n          ))}\n          \n          <button \n            data-testid=\"button-next-page\"\n            onClick={() => mockSetPage(currentPage + 1)}\n            disabled={currentPage >= totalPages}\n          >\n            Next\n          </button>\n        </div>\n      );\n\n      renderWithProvider(<MockPagination />);\n      \n      const prevButton = screen.getByTestId('button-previous-page');\n      const nextButton = screen.getByTestId('button-next-page');\n      const page3Button = screen.getByTestId('button-page-3');\n      \n      expect(prevButton).toBeInTheDocument();\n      expect(nextButton).toBeInTheDocument();\n      expect(page3Button).toBeInTheDocument();\n      \n      await user.click(prevButton);\n      expect(mockSetPage).toHaveBeenCalledWith(1);\n      \n      await user.click(nextButton);\n      expect(mockSetPage).toHaveBeenCalledWith(3);\n      \n      await user.click(page3Button);\n      expect(mockSetPage).toHaveBeenCalledWith(3);\n    });\n  });\n\n  describe('Calendar Navigation Buttons', () => {\n    it('should handle month navigation in calendar', async () => {\n      const mockGoToPrevMonth = jest.fn();\n      const mockGoToNextMonth = jest.fn();\n      \n      const MockCalendarNav = () => (\n        <div>\n          <button \n            data-testid=\"prev-month\"\n            onClick={mockGoToPrevMonth}\n          >\n            Previous Month\n          </button>\n          <button \n            data-testid=\"next-month\"\n            onClick={mockGoToNextMonth}\n          >\n            Next Month\n          </button>\n        </div>\n      );\n\n      renderWithProvider(<MockCalendarNav />);\n      \n      const prevMonthButton = screen.getByTestId('prev-month');\n      const nextMonthButton = screen.getByTestId('next-month');\n      \n      expect(prevMonthButton).toBeInTheDocument();\n      expect(nextMonthButton).toBeInTheDocument();\n      \n      await user.click(prevMonthButton);\n      expect(mockGoToPrevMonth).toHaveBeenCalled();\n      \n      await user.click(nextMonthButton);\n      expect(mockGoToNextMonth).toHaveBeenCalled();\n    });\n  });\n\n  describe('Calendar Feature Buttons', () => {\n    it('should handle calendar linking and export functionality', async () => {\n      const mockLinkCalendar = jest.fn();\n      const mockExportCalendar = jest.fn();\n      const mockCancelLink = jest.fn();\n      const mockNextStep = jest.fn();\n      \n      const MockCalendarFeatures = () => {\n        const [isLinking, setIsLinking] = React.useState(false);\n        \n        return (\n          <div>\n            <button \n              data-testid=\"button-link-calendar\"\n              onClick={() => {\n                mockLinkCalendar();\n                setIsLinking(true);\n              }}\n            >\n              Link Calendar\n            </button>\n            \n            <button \n              data-testid=\"button-export-calendar\"\n              onClick={mockExportCalendar}\n            >\n              Export Calendar\n            </button>\n            \n            {isLinking && (\n              <div>\n                <button \n                  data-testid=\"button-cancel-link\"\n                  onClick={() => {\n                    mockCancelLink();\n                    setIsLinking(false);\n                  }}\n                >\n                  Cancel Link\n                </button>\n                <button \n                  data-testid=\"button-next-step\"\n                  onClick={mockNextStep}\n                >\n                  Next Step\n                </button>\n                <button \n                  data-testid=\"button-back-step\"\n                  onClick={() => console.log('Back step')}\n                >\n                  Back Step\n                </button>\n                <button \n                  data-testid=\"button-cancel-provider\"\n                  onClick={() => setIsLinking(false)}\n                >\n                  Cancel Provider\n                </button>\n                <button \n                  data-testid=\"button-confirm-final-link\"\n                  onClick={() => {\n                    console.log('Confirming link');\n                    setIsLinking(false);\n                  }}\n                >\n                  Confirm Link\n                </button>\n              </div>\n            )}\n          </div>\n        );\n      };\n\n      renderWithProvider(<MockCalendarFeatures />);\n      \n      const linkButton = screen.getByTestId('button-link-calendar');\n      const exportButton = screen.getByTestId('button-export-calendar');\n      \n      expect(linkButton).toBeInTheDocument();\n      expect(exportButton).toBeInTheDocument();\n      \n      await user.click(exportButton);\n      expect(mockExportCalendar).toHaveBeenCalled();\n      \n      await user.click(linkButton);\n      expect(mockLinkCalendar).toHaveBeenCalled();\n      \n      await waitFor(() => {\n        const cancelButton = screen.getByTestId('button-cancel-link');\n        const nextButton = screen.getByTestId('button-next-step');\n        \n        expect(cancelButton).toBeInTheDocument();\n        expect(nextButton).toBeInTheDocument();\n      });\n      \n      const nextButton = screen.getByTestId('button-next-step');\n      await user.click(nextButton);\n      expect(mockNextStep).toHaveBeenCalled();\n    });\n  });\n\n  describe('Filter and Reset Buttons', () => {\n    it('should handle filter reset functionality', async () => {\n      const mockResetUserFilters = jest.fn();\n      const mockResetPermissionFilters = jest.fn();\n      \n      const MockFilterControls = () => (\n        <div>\n          <button \n            data-testid=\"button-reset-user-filters\"\n            onClick={mockResetUserFilters}\n          >\n            Reset User Filters\n          </button>\n          <button \n            data-testid=\"button-reset-permission-filters\"\n            onClick={mockResetPermissionFilters}\n          >\n            Reset Permission Filters\n          </button>\n        </div>\n      );\n\n      renderWithProvider(<MockFilterControls />);\n      \n      const resetUserButton = screen.getByTestId('button-reset-user-filters');\n      const resetPermissionButton = screen.getByTestId('button-reset-permission-filters');\n      \n      expect(resetUserButton).toBeInTheDocument();\n      expect(resetPermissionButton).toBeInTheDocument();\n      \n      await user.click(resetUserButton);\n      expect(mockResetUserFilters).toHaveBeenCalled();\n      \n      await user.click(resetPermissionButton);\n      expect(mockResetPermissionFilters).toHaveBeenCalled();\n    });\n  });\n\n  describe('Show/Hide Toggle Buttons', () => {\n    it('should handle show all and hide all functionality', async () => {\n      const mockShowAll = jest.fn();\n      const mockHideAll = jest.fn();\n      \n      const MockToggleButtons = () => (\n        <div>\n          <button \n            data-testid=\"button-show-all\"\n            onClick={mockShowAll}\n          >\n            Show All\n          </button>\n          <button \n            data-testid=\"button-hide-all\"\n            onClick={mockHideAll}\n          >\n            Hide All\n          </button>\n          <button \n            data-testid=\"button-show-all-bottom\"\n            onClick={mockShowAll}\n          >\n            Show All Bottom\n          </button>\n        </div>\n      );\n\n      renderWithProvider(<MockToggleButtons />);\n      \n      const showAllButton = screen.getByTestId('button-show-all');\n      const hideAllButton = screen.getByTestId('button-hide-all');\n      const showAllBottomButton = screen.getByTestId('button-show-all-bottom');\n      \n      expect(showAllButton).toBeInTheDocument();\n      expect(hideAllButton).toBeInTheDocument();\n      expect(showAllBottomButton).toBeInTheDocument();\n      \n      await user.click(showAllButton);\n      expect(mockShowAll).toHaveBeenCalled();\n      \n      await user.click(hideAllButton);\n      expect(mockHideAll).toHaveBeenCalled();\n      \n      await user.click(showAllBottomButton);\n      expect(mockShowAll).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Fullscreen Toggle Buttons', () => {\n    it('should handle fullscreen toggle functionality', async () => {\n      const mockToggleFullscreen = jest.fn();\n      \n      const MockFullscreenToggle = () => (\n        <button \n          data-testid=\"button-fullscreen-toggle\"\n          onClick={mockToggleFullscreen}\n        >\n          Toggle Fullscreen\n        </button>\n      );\n\n      renderWithProvider(<MockFullscreenToggle />);\n      \n      const fullscreenButton = screen.getByTestId('button-fullscreen-toggle');\n      expect(fullscreenButton).toBeInTheDocument();\n      \n      await user.click(fullscreenButton);\n      expect(mockToggleFullscreen).toHaveBeenCalled();\n    });\n  });\n\n  describe('Menu Control Buttons', () => {\n    it('should handle hamburger menu functionality', async () => {\n      const MockHamburgerMenu = () => {\n        const [isOpen, setIsOpen] = React.useState(false);\n        \n        return (\n          <div>\n            <button \n              data-testid=\"hamburger-button\"\n              onClick={() => setIsOpen(!isOpen)}\n            >\n              Menu\n            </button>\n            \n            {isOpen && (\n              <button \n                data-testid=\"menu-close-button\"\n                onClick={() => setIsOpen(false)}\n              >\n                Close Menu\n              </button>\n            )}\n          </div>\n        );\n      };\n\n      renderWithProvider(<MockHamburgerMenu />);\n      \n      const hamburgerButton = screen.getByTestId('hamburger-button');\n      expect(hamburgerButton).toBeInTheDocument();\n      \n      await user.click(hamburgerButton);\n      \n      await waitFor(() => {\n        const closeButton = screen.getByTestId('menu-close-button');\n        expect(closeButton).toBeInTheDocument();\n      });\n      \n      const closeButton = screen.getByTestId('menu-close-button');\n      await user.click(closeButton);\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('menu-close-button')).not.toBeInTheDocument();\n      });\n    });\n  });\n});"],"version":3}