{"file":"/home/runner/workspace/server/api/organizations.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/organizations.ts"],"sourcesContent":["/**\n * Organizations API endpoints for admin operations.\n * Provides CRUD operations for organization management.\n */\n\nimport { Express } from 'express';\nimport { db } from '../db';\nimport {\n  organizations,\n  buildings,\n  residences,\n  users,\n  userOrganizations,\n  userResidences,\n  invitations,\n} from '@shared/schema';\nimport { and, eq, count, sql, or, inArray, isNull, ne } from 'drizzle-orm';\nimport { requireAuth } from '../auth';\n\n/**\n *\n * @param app\n */\n/**\n * RegisterOrganizationRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerOrganizationRoutes(app: Express): void {\n  /**\n   * GET /api/organizations - Retrieves organizations accessible to the current user\n   * Returns array of organizations directly for frontend components.\n   */\n  app.get('/api/organizations', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      console.log(\n        `📊 Fetching organizations for user ${currentUser.id} with role ${currentUser.role}`\n      );\n\n      // Get organizations based on user role\n      let organizationsQuery;\n\n      if (currentUser.role === 'admin') {\n        // Admin can see all organizations\n        organizationsQuery = db\n          .select({\n            id: organizations.id,\n            name: organizations.name,\n            type: organizations.type,\n            address: organizations.address,\n            city: organizations.city,\n            province: organizations.province,\n            postalCode: organizations.postalCode,\n            phone: organizations.phone,\n            email: organizations.email,\n            website: organizations.website,\n            registrationNumber: organizations.registrationNumber,\n            isActive: organizations.isActive,\n            createdAt: organizations.createdAt,\n          })\n          .from(organizations)\n          .where(eq(organizations.isActive, true))\n          .orderBy(organizations.name);\n      } else {\n        // Other users see organizations they have access to through user_organizations\n        organizationsQuery = db\n          .select({\n            id: organizations.id,\n            name: organizations.name,\n            type: organizations.type,\n            address: organizations.address,\n            city: organizations.city,\n            province: organizations.province,\n            postalCode: organizations.postalCode,\n            phone: organizations.phone,\n            email: organizations.email,\n            website: organizations.website,\n            registrationNumber: organizations.registrationNumber,\n            isActive: organizations.isActive,\n            createdAt: organizations.createdAt,\n          })\n          .from(organizations)\n          .innerJoin(userOrganizations, eq(organizations.id, userOrganizations.organizationId))\n          .where(\n            and(\n              eq(organizations.isActive, true),\n              eq(userOrganizations.userId, currentUser.id),\n              eq(userOrganizations.isActive, true)\n            )\n          )\n          .orderBy(organizations.name);\n      }\n\n      const accessibleOrganizations = await organizationsQuery;\n      console.log(\n        `✅ Found ${accessibleOrganizations.length} organizations for user ${currentUser.id}`\n      );\n\n      // Return array directly (not wrapped in object)\n      res.json(accessibleOrganizations);\n    } catch (error: any) {\n      console.error('❌ Error fetching organizations:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to fetch organizations',\n      });\n    }\n  });\n\n  /**\n   * GET /api/admin/organizations - Retrieves all organizations for admin users\n   * Only admin users can access all organizations.\n   */\n  app.get('/api/admin/organizations', requireAuth, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n\n      // Get all organizations for admin\n      const allOrganizations = await db\n        .select({\n          id: organizations.id,\n          name: organizations.name,\n          type: organizations.type,\n          address: organizations.address,\n          city: organizations.city,\n          province: organizations.province,\n          postalCode: organizations.postalCode,\n          phone: organizations.phone,\n          email: organizations.email,\n          website: organizations.website,\n          registrationNumber: organizations.registrationNumber,\n          isActive: organizations.isActive,\n          createdAt: organizations.createdAt,\n        })\n        .from(organizations)\n        .where(eq(organizations.isActive, true))\n        .orderBy(organizations.name);\n\n\n      res.json({\n        organizations: allOrganizations,\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching organizations:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to fetch organizations',\n      });\n    }\n  });\n\n  /**\n   * POST /api/organizations - Create a new organization\n   * Allows authorized users to create organizations.\n   */\n  app.post('/api/organizations', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admin users can create organizations for now\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required to create organizations',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      const organizationData = req.body;\n\n      // Insert new organization\n      const [newOrganization] = await db\n        .insert(organizations)\n        .values({\n          name: organizationData.name,\n          type: organizationData.type,\n          address: organizationData.address,\n          city: organizationData.city,\n          province: organizationData.province || 'QC',\n          postalCode: organizationData.postalCode,\n          phone: organizationData.phone || null,\n          email: organizationData.email || null,\n          website: organizationData.website || null,\n          registrationNumber: organizationData.registrationNumber || null,\n        })\n        .returning({\n          id: organizations.id,\n          name: organizations.name,\n          type: organizations.type,\n          address: organizations.address,\n          city: organizations.city,\n          province: organizations.province,\n          postalCode: organizations.postalCode,\n          phone: organizations.phone,\n          email: organizations.email,\n          website: organizations.website,\n          registrationNumber: organizations.registrationNumber,\n          isActive: organizations.isActive,\n          createdAt: organizations.createdAt,\n        });\n\n\n      // Organization storage hierarchy will be created automatically when documents are uploaded\n      console.log(\n        'Organization created - storage hierarchy will be created on first document upload'\n      );\n\n      res.status(201).json(newOrganization);\n    } catch (error: any) {\n      console.error('❌ Error creating organization:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to create organization',\n      });\n    }\n  });\n\n  /**\n   * GET /api/organizations/:id - Get organization by ID\n   */\n  app.get('/api/organizations/:id', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      const organizationId = req.params.id;\n\n      // Find the organization\n      const [organization] = await db\n        .select()\n        .from(organizations)\n        .where(eq(organizations.id, organizationId));\n\n      if (!organization) {\n        return res.status(404).json({\n          message: 'Organization not found',\n          code: 'NOT_FOUND',\n        });\n      }\n\n      res.json(organization);\n    } catch (error: any) {\n      console.error('❌ Error fetching organization:', error);\n      res.status(500).json({\n        message: 'Failed to fetch organization',\n        code: 'SERVER_ERROR',\n      });\n    }\n  });\n\n  /**\n   * PUT /api/organizations/:id - Update an existing organization\n   * Allows authorized users to update organization details.\n   */\n  app.put('/api/organizations/:id', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admin users can update organizations\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required to update organizations',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      const organizationId = req.params.id;\n      const updateData = req.body;\n\n\n      // Check if organization exists\n      const existingOrg = await db\n        .select()\n        .from(organizations)\n        .where(and(eq(organizations.id, organizationId), eq(organizations.isActive, true)))\n        .limit(1);\n\n      if (existingOrg.length === 0) {\n        return res.status(404).json({\n          message: 'Organization not found',\n          code: 'NOT_FOUND',\n        });\n      }\n\n      // Update organization\n      const [updatedOrganization] = await db\n        .update(organizations)\n        .set({\n          name: updateData.name,\n          type: updateData.type,\n          address: updateData.address,\n          city: updateData.city,\n          province: updateData.province || 'QC',\n          postalCode: updateData.postalCode,\n          phone: updateData.phone || null,\n          email: updateData.email || null,\n          website: updateData.website || null,\n          registrationNumber: updateData.registrationNumber || null,\n          updatedAt: new Date(),\n        })\n        .where(eq(organizations.id, organizationId))\n        .returning({\n          id: organizations.id,\n          name: organizations.name,\n          type: organizations.type,\n          address: organizations.address,\n          city: organizations.city,\n          province: organizations.province,\n          postalCode: organizations.postalCode,\n          phone: organizations.phone,\n          email: organizations.email,\n          website: organizations.website,\n          registrationNumber: organizations.registrationNumber,\n          isActive: organizations.isActive,\n          createdAt: organizations.createdAt,\n          updatedAt: organizations.updatedAt,\n        });\n\n      res.json(updatedOrganization);\n    } catch (error: any) {\n      console.error('❌ Error updating organization:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update organization',\n      });\n    }\n  });\n\n  /**\n   * GET /api/organizations/:id/deletion-impact - Get deletion impact analysis\n   * Shows what will be deleted when removing an organization.\n   */\n  app.get('/api/organizations/:id/deletion-impact', requireAuth, async (req: any, res) => {\n    const organizationId = req.params.id;\n\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      // Check if organization exists\n      const organization = await db\n        .select({ id: organizations.id, name: organizations.name })\n        .from(organizations)\n        .where(and(eq(organizations.id, organizationId), eq(organizations.isActive, true)))\n        .limit(1);\n\n      if (organization.length === 0) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'Organization not found',\n        });\n      }\n\n      // Count buildings in this organization\n      const buildingsCount = await db\n        .select({ count: count() })\n        .from(buildings)\n        .where(and(eq(buildings.organizationId, organizationId), eq(buildings.isActive, true)));\n\n      // Count residences in buildings of this organization\n      const residencesCount = await db\n        .select({ count: count() })\n        .from(residences)\n        .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n        .where(\n          and(\n            eq(buildings.organizationId, organizationId),\n            eq(buildings.isActive, true),\n            eq(residences.isActive, true)\n          )\n        );\n\n      // Count invitations associated with this organization\n      let totalInvitations = 0;\n      try {\n        const invitationsCount = await db\n          .select({ count: count() })\n          .from(invitations)\n          .where(eq(invitations.organizationId, organizationId));\n\n        totalInvitations = invitationsCount[0]?.count || 0;\n      } catch (___invError) {\n        totalInvitations = 0;\n      }\n\n      // Count users who will become orphaned (only belong to this organization)\n      const potentialOrphansCount = await db\n        .select({ count: count() })\n        .from(userOrganizations)\n        .innerJoin(users, eq(userOrganizations.userId, users.id))\n        .where(\n          and(\n            eq(userOrganizations.organizationId, organizationId),\n            eq(userOrganizations.isActive, true),\n            eq(users.isActive, true)\n          )\n        );\n\n      const impact = {\n        organization: organization[0],\n        buildings: buildingsCount[0]?.count || 0,\n        residences: residencesCount[0]?.count || 0,\n        invitations: totalInvitations,\n        potentialOrphanedUsers: potentialOrphansCount[0]?.count || 0,\n      };\n\n      res.json(impact);\n    } catch (error: any) {\n      console.error('❌ Error analyzing deletion impact:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to analyze deletion impact',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/organizations/:id - Cascade delete an organization\n   * Deletes organization and all related entities (buildings, residences, documents). Users are preserved for data safety.\n   */\n  app.delete('/api/organizations/:id', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      const organizationId = req.params.id;\n\n      // Check if organization exists\n      const organization = await db\n        .select({ id: organizations.id, name: organizations.name })\n        .from(organizations)\n        .where(and(eq(organizations.id, organizationId), eq(organizations.isActive, true)))\n        .limit(1);\n\n      if (organization.length === 0) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'Organization not found',\n        });\n      }\n\n      console.log(`🗑️ Deleting organization ${organizationId} with cascade delete...`);\n\n      // Since Neon HTTP driver doesn't support transactions, we'll do cascading delete manually\n      // in the correct order to maintain referential integrity\n\n      // 1. Get all buildings in this organization (including already inactive ones)\n      const orgBuildings = await db\n        .select({ id: buildings.id })\n        .from(buildings)\n        .where(eq(buildings.organizationId, organizationId));\n\n      if (orgBuildings.length > 0) {\n        const orgBuildingIds = orgBuildings.map((b) => b.id);\n\n        // 2. Soft delete residences first (children of buildings) - get ALL residences in these buildings\n        const affectedResidences = await db\n          .update(residences)\n          .set({ isActive: false, updatedAt: new Date() })\n          .where(inArray(residences.buildingId, orgBuildingIds))\n          .returning({ id: residences.id, unitNumber: residences.unitNumber });\n\n        console.log(\n          `🗑️ Soft deleted ${affectedResidences.length} residences in buildings: ${orgBuildingIds.join(', ')}`\n        );\n\n        // 3. Soft delete buildings\n        const affectedBuildings = await db\n          .update(buildings)\n          .set({ isActive: false, updatedAt: new Date() })\n          .where(inArray(buildings.id, orgBuildingIds))\n          .returning({ id: buildings.id, name: buildings.name });\n\n        console.log(\n          `🗑️ Soft deleted ${affectedBuildings.length} buildings: ${affectedBuildings.map((b) => b.name).join(', ')}`\n        );\n      }\n\n      // 4. Delete user-organization relationships\n      await db\n        .delete(userOrganizations)\n        .where(eq(userOrganizations.organizationId, organizationId));\n\n      // 5. DISABLED: User deletion is now prohibited for data safety\n      // Users are never deleted during cascade operations to prevent permanent data loss\n      // This protects against accidental deletion of user accounts and their historical data\n      console.log('⚠️  User deletion disabled for data safety - users will be preserved');\n      \n      // Optional: Log users who would have been affected for admin review\n      const affectedUsers = await db\n        .select({\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n        })\n        .from(users)\n        .leftJoin(\n          userOrganizations,\n          and(eq(users.id, userOrganizations.userId), eq(userOrganizations.isActive, true))\n        )\n        .where(and(eq(users.isActive, true), isNull(userOrganizations.userId)));\n      \n      if (affectedUsers.length > 0) {\n        console.log(`⚠️  ${affectedUsers.length} users are now without organization assignments but have been preserved:`, \n          affectedUsers.map(u => u.email));\n\n        // DISABLED: Users are no longer deleted - they are preserved for data safety\n      }\n\n      // 6. Finally, soft delete the organization\n      await db\n        .update(organizations)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(eq(organizations.id, organizationId));\n\n\n      // Object storage cleanup will be handled automatically\n      try {\n        console.log('Organization deleted - storage cleanup will be handled automatically');\n      } catch (storageError) {\n        console.error(\n          '⚠️ Object storage cleanup failed, but organization deletion succeeded:',\n          storageError\n        );\n      }\n\n      res.json({\n        message: 'Organization and related entities deleted successfully',\n        deletedOrganization: organization[0].name,\n      });\n    } catch (error: any) {\n      console.error('❌ Error deleting organization:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to delete organization and related entities',\n      });\n    }\n  });\n}\n"],"version":3}