5d336cebde366d4d7fce348e966ab990
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BugReports;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const lucide_react_1 = require("lucide-react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const use_auth_1 = require("@/hooks/use-auth");
const document_management_1 = require("@/components/document-management");
// Bug creation form schema (no status - new bugs are always created with "new" status)
const bugFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Title is required'),
    description: zod_2.z.string().min(10, 'Description must be at least 10 characters'),
    category: zod_2.z.enum(['ui_ux', 'functionality', 'performance', 'data', 'security', 'integration', 'other']),
    page: zod_2.z.string().min(1, 'Page/location is required'),
    priority: zod_2.z.enum(['low', 'medium', 'high', 'critical']),
    reproductionSteps: zod_2.z.string().optional(),
});
// Bug edit form schema (includes status for admin editing)
const bugEditSchema = bugFormSchema.extend({
    status: zod_2.z.enum(['new', 'acknowledged', 'in_progress', 'resolved', 'closed']),
});
const categoryLabels = {
    ui_ux: 'UI/UX',
    functionality: 'Functionality',
    performance: 'Performance',
    data: 'Data',
    security: 'Security',
    integration: 'Integration',
    other: 'Other',
};
const priorityColors = {
    low: 'bg-gray-100 text-gray-800',
    medium: 'bg-yellow-100 text-yellow-800',
    high: 'bg-orange-100 text-orange-800',
    critical: 'bg-red-100 text-red-800',
};
const statusColors = {
    new: 'bg-blue-100 text-blue-800',
    acknowledged: 'bg-purple-100 text-purple-800',
    in_progress: 'bg-yellow-100 text-yellow-800',
    resolved: 'bg-green-100 text-green-800',
    closed: 'bg-gray-100 text-gray-800',
};
function BugReports() {
    const { user } = (0, use_auth_1.useAuth)();
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // State management
    const [isCreateDialogOpen, setIsCreateDialogOpen] = (0, react_1.useState)(false);
    const [isEditDialogOpen, setIsEditDialogOpen] = (0, react_1.useState)(false);
    const [isBugDetailsOpen, setIsBugDetailsOpen] = (0, react_1.useState)(false);
    const [selectedBug, setSelectedBug] = (0, react_1.useState)(null);
    const [editingBug, setEditingBug] = (0, react_1.useState)(null);
    // Search and filter states
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('all');
    const [priorityFilter, setPriorityFilter] = (0, react_1.useState)('all');
    // Attachment states
    const [attachmentMode, setAttachmentMode] = (0, react_1.useState)('file');
    const [attachmentText, setAttachmentText] = (0, react_1.useState)('');
    const [attachedFiles, setAttachedFiles] = (0, react_1.useState)([]);
    const [editAttachmentMode, setEditAttachmentMode] = (0, react_1.useState)('file');
    const [editAttachmentText, setEditAttachmentText] = (0, react_1.useState)('');
    // Upload context for secure storage
    const uploadContext = {
        type: 'bugs',
        organizationId: 'default',
        userRole: user?.role || 'resident',
        userId: user?.id
    };
    // Forms
    const createForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(bugFormSchema),
        defaultValues: {
            title: '',
            description: '',
            category: 'functionality',
            page: '',
            priority: 'medium',
            reproductionSteps: '',
        },
    });
    const editForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(bugEditSchema),
    });
    const bugForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(bugFormSchema),
    });
    // Fetch bugs
    const { data: bugs = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/bugs'],
        enabled: !!user,
    });
    // Create bug mutation
    const createBugMutation = (0, react_query_1.useMutation)({
        mutationFn: (data) => (0, queryClient_1.apiRequest)('POST', '/api/bugs', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
            setIsCreateDialogOpen(false);
            createForm.reset();
            setAttachedFiles([]);
            setAttachmentText('');
            toast({
                title: 'Success',
                description: 'Bug report created successfully',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to create bug report',
                variant: 'destructive',
            });
        },
    });
    // Update bug mutation
    const updateBugMutation = (0, react_query_1.useMutation)({
        mutationFn: ({ id, data }) => {
            const formData = new FormData();
            // Add form fields
            Object.entries(data).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    formData.append(key, String(value));
                }
            });
            // Add text content if in text mode
            if (editAttachmentMode === 'text' && editAttachmentText.trim()) {
                formData.append('file_content', editAttachmentText.trim());
            }
            // Add new files
            attachedFiles.forEach((file) => {
                formData.append('files', file);
            });
            return (0, queryClient_1.apiRequest)('PATCH', '/api/bugs/' + id, formData);
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
            setIsEditDialogOpen(false);
            setEditingBug(null);
            editForm.reset();
            setAttachedFiles([]);
            setEditAttachmentText('');
            toast({
                title: 'Success',
                description: 'Bug report updated successfully',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to update bug report',
                variant: 'destructive',
            });
        },
    });
    // Delete bug mutation
    const deleteBugMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('DELETE', '/api/bugs/' + id),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
            toast({
                title: 'Success',
                description: 'Bug report deleted successfully',
            });
        },
    });
    // Handle form submissions
    const onCreateSubmit = async (data) => {
        if (attachedFiles.length > 0) {
            // Create FormData for multipart upload
            const formData = new FormData();
            // Add bug data
            Object.entries(data).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    formData.append(key, String(value));
                }
            });
            // Add text notes if provided
            if (attachmentText.trim()) {
                formData.append('file_content', attachmentText.trim());
            }
            // Add attached file (single file only, backend expects 'attachment' field)
            if (attachedFiles.length > 0) {
                formData.append('attachment', attachedFiles[0]);
            }
            // Make multipart request
            fetch('/api/bugs', {
                method: 'POST',
                body: formData,
                credentials: 'include',
            })
                .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to create bug report');
                }
                return response.json();
            })
                .then(() => {
                queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
                setAttachedFiles([]);
                setAttachmentText('');
                createForm.reset();
                setIsCreateDialogOpen(false);
                toast({
                    title: 'Success',
                    description: 'Bug report created successfully',
                });
            })
                .catch(error => {
                toast({
                    title: 'Error',
                    description: error.message || 'Failed to create bug report',
                    variant: 'destructive',
                });
            });
        }
        else if (attachmentText.trim()) {
            // No files but has text notes
            const payload = {
                ...data,
                file_content: attachmentText.trim(),
            };
            createBugMutation.mutate(payload);
        }
        else {
            // No files or text notes, use regular API request
            createBugMutation.mutate(data);
        }
    };
    const onEditSubmit = (data) => {
        if (!editingBug)
            return;
        updateBugMutation.mutate({ id: editingBug.id, data });
    };
    // Handle file attachments
    const handleFilesSelect = (files) => {
        setAttachedFiles(files);
    };
    // Handle file download
    const handleDelete = (id) => {
        deleteBugMutation.mutate(id);
        setIsBugDetailsOpen(false);
        setSelectedBug(null);
    };
    // Handle edit dialog
    const handleEditBug = (bug) => {
        setEditingBug(bug);
        editForm.reset({
            title: bug.title,
            description: bug.description,
            category: bug.category,
            page: bug.page,
            priority: bug.priority,
            status: bug.status,
            reproductionSteps: bug.reproductionSteps || '',
        });
        // Initialize edit attachment mode and text
        setEditAttachmentMode('file');
        setEditAttachmentText(bug.file_content || '');
        setIsEditDialogOpen(true);
    };
    const handleDeleteClick = (bug) => {
        setSelectedBug(bug);
        // Close any open dialogs before deleting
        setIsBugDetailsOpen(false);
        setIsEditDialogOpen(false);
    };
    // Check if user can edit/delete a bug
    const canEditBug = (bug) => {
        return user?.role === 'admin' || bug.createdBy === user?.id;
    };
    const canDeleteBug = (bug) => {
        return user?.role === 'admin' || bug.createdBy === user?.id;
    };
    // Filter bugs with role-based access control
    const filteredBugs = (bugs || []).filter((bug) => {
        // Role-based filtering: users see only their bugs, admins see all
        const hasAccess = user?.role === 'admin' || bug.createdBy === user?.id;
        if (!hasAccess)
            return false;
        // Search filter
        const matchesSearch = searchTerm === '' ||
            bug.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            bug.description.toLowerCase().includes(searchTerm.toLowerCase());
        // Status filter
        const matchesStatus = statusFilter === 'all' || bug.status === statusFilter;
        // Priority filter
        const matchesPriority = priorityFilter === 'all' || bug.priority === priorityFilter;
        return matchesSearch && matchesStatus && matchesPriority;
    });
    if (isLoading) {
        return (0, jsx_runtime_1.jsx)("div", { children: "Loading..." });
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: "Bug Reports", subtitle: "Report and track application issues" }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "pt-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 mb-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1 relative", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: "w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Search bugs...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "pl-10", "data-testid": "input-search-bugs" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsxs)(select_1.Select, { value: statusFilter, onValueChange: setStatusFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: "w-32", "data-testid": "select-status-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Status" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "all", children: "All Status" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "new", children: "New" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "acknowledged", children: "Acknowledged" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "in_progress", children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "resolved", children: "Resolved" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "closed", children: "Closed" })] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: priorityFilter, onValueChange: setPriorityFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: "w-32", "data-testid": "select-priority-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Priority" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "all", children: "All Priority" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "low", children: "Low" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "medium", children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "high", children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "critical", children: "Critical" })] })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => setIsCreateDialogOpen(true), "data-testid": "button-create-bug", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Report Bug"] })] })] }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isCreateDialogOpen, onOpenChange: setIsCreateDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", "data-testid": "create-bug-dialog", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Report New Bug" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: createForm.handleSubmit(onCreateSubmit), className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "create-title", className: "text-sm font-medium", children: ["Title ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "create-title", ...createForm.register('title'), "data-testid": "input-create-title" }), createForm.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: "text-red-500 text-xs", children: createForm.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "create-category", className: "text-sm font-medium", children: ["Category ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: createForm.watch('category'), onValueChange: (value) => createForm.setValue('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-create-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select category" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "ui_ux", children: "UI/UX" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "functionality", children: "Functionality" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "performance", children: "Performance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "data", children: "Data" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "security", children: "Security" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "integration", children: "Integration" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "other", children: "Other" })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "create-description", className: "text-sm font-medium", children: ["Description ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "create-description", ...createForm.register('description'), rows: 4, "data-testid": "textarea-create-description" }), createForm.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: "text-red-500 text-xs", children: createForm.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "create-priority", className: "text-sm font-medium", children: ["Priority ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: createForm.watch('priority'), onValueChange: (value) => createForm.setValue('priority', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-create-priority", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select priority" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "low", children: "Low" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "medium", children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "high", children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "critical", children: "Critical" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "create-page", className: "text-sm font-medium", children: ["Page/Location ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "create-page", ...createForm.register('page'), placeholder: "e.g. Dashboard, Login page, Settings", "data-testid": "input-create-page" }), createForm.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: "text-red-500 text-xs", children: createForm.formState.errors.page.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "create-steps", className: "text-sm font-medium", children: "Steps to Reproduce (Optional)" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "create-steps", ...createForm.register('reproductionSteps'), rows: 3, placeholder: "Describe the steps to reproduce this issue...", "data-testid": "textarea-create-steps" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4 border-t pt-4", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Attach Documents (Optional)" }), (0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: (file, text) => {
                                                                    if (file) {
                                                                        setAttachedFiles([file]);
                                                                    }
                                                                    if (text) {
                                                                        setAttachmentText(text);
                                                                    }
                                                                }, formType: "bugs", uploadContext: uploadContext, aiAnalysisEnabled: false, showAiToggle: true, allowedFileTypes: ['image/*', '.pdf', '.txt', '.log', '.json', '.csv'], maxFileSize: 15 })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end gap-2 pt-4", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: () => setIsCreateDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: createBugMutation.isPending, "data-testid": "button-submit-bug", children: createBugMutation.isPending ? 'Submitting...' : 'Submit Bug Report' })] })] })] }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isEditDialogOpen, onOpenChange: setIsEditDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", "data-testid": "edit-bug-dialog", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Edit Bug Report" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: editForm.handleSubmit(onEditSubmit), className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "edit-title", className: "text-sm font-medium", children: ["Title ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "edit-title", ...editForm.register('title'), "data-testid": "input-edit-title" }), editForm.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: "text-red-500 text-xs", children: editForm.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "edit-category", className: "text-sm font-medium", children: ["Category ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('category'), onValueChange: (value) => editForm.setValue('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-edit-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select category" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "ui_ux", children: "UI/UX" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "functionality", children: "Functionality" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "performance", children: "Performance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "data", children: "Data" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "security", children: "Security" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "integration", children: "Integration" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "other", children: "Other" })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "edit-description", className: "text-sm font-medium", children: ["Description ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "edit-description", ...editForm.register('description'), rows: 4, "data-testid": "textarea-edit-description" }), editForm.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: "text-red-500 text-xs", children: editForm.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "edit-priority", className: "text-sm font-medium", children: ["Priority ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('priority'), onValueChange: (value) => editForm.setValue('priority', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-edit-priority", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select priority" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "low", children: "Low" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "medium", children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "high", children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "critical", children: "Critical" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-status", className: "text-sm font-medium", children: "Status" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('status'), onValueChange: (value) => editForm.setValue('status', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-edit-status", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select status" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "new", children: "New" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "acknowledged", children: "Acknowledged" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "in_progress", children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "resolved", children: "Resolved" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "closed", children: "Closed" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "edit-page", className: "text-sm font-medium", children: ["Page/Location ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "edit-page", ...editForm.register('page'), placeholder: "e.g. Dashboard, Login page, Settings", "data-testid": "input-edit-page" }), editForm.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: "text-red-500 text-xs", children: editForm.formState.errors.page.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-steps", className: "text-sm font-medium", children: "Steps to Reproduce (Optional)" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "edit-steps", ...editForm.register('reproductionSteps'), rows: 3, placeholder: "Describe the steps to reproduce this issue...", "data-testid": "textarea-edit-steps" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4 border-t pt-4", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Choose Document Type" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex space-x-3", children: [(0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setEditAttachmentMode('file'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${editAttachmentMode === 'file'
                                                                            ? 'border-blue-500 bg-blue-50 text-blue-700'
                                                                            : 'border-gray-200 hover:border-gray-300'}`, "data-testid": "button-edit-file-mode", children: "\uD83D\uDCC1 Upload File" }), (0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setEditAttachmentMode('text'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${editAttachmentMode === 'text'
                                                                            ? 'border-blue-500 bg-blue-50 text-blue-700'
                                                                            : 'border-gray-200 hover:border-gray-300'}`, "data-testid": "button-edit-text-mode", children: "\uD83D\uDCDD Text Document" })] }), editAttachmentMode === 'file' ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-file-upload", children: "Select File to Upload" }), editingBug?.filePath && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2 mb-4", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: "Current Attachment" }), (0, jsx_runtime_1.jsx)(AttachedFileSection, { entityType: "bug", entityId: editingBug.id, filePath: editingBug.filePath, fileName: editingBug.fileName, fileSize: editingBug.fileSize })] })), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "edit-file-upload", type: "file", accept: ".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif", "data-testid": "input-edit-file", className: "mt-1" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: editingBug?.filePath ? 'Upload a new file to replace the current attachment' : 'Attach a screenshot or document' })] })) : ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-text-content", children: "Document Content" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "edit-text-content", value: editAttachmentText, onChange: (e) => setEditAttachmentText(e.target.value), rows: 5, className: "w-full", "data-testid": "textarea-edit-text-content" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500 mt-1", children: "This will show text notes with the bug report." })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end gap-2 pt-4", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: () => setIsEditDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: updateBugMutation.isPending, "data-testid": "button-update-bug", children: updateBugMutation.isPending ? 'Updating...' : 'Update Bug Report' })] })] })] }) })] }) }), (0, jsx_runtime_1.jsx)("div", { className: "space-y-6", children: filteredBugs.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "flex flex-col items-center justify-center py-12 text-center", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bug, { className: "h-12 w-12 text-gray-400 mb-4" }), (0, jsx_runtime_1.jsx)("p", { className: "text-lg text-gray-500", children: searchTerm || statusFilter !== 'all' || priorityFilter !== 'all'
                                            ? 'No bugs match your current filters.'
                                            : 'No bug reports have been submitted yet.' })] }) })) : ((0, jsx_runtime_1.jsx)("div", { className: "space-y-6", children: Object.entries(categoryLabels).map(([categoryKey, categoryLabel]) => {
                                const categoryBugs = filteredBugs.filter((bug) => bug.category === categoryKey);
                                if (categoryBugs.length === 0) {
                                    return null;
                                }
                                return ((0, jsx_runtime_1.jsxs)(card_1.Card, { "data-testid": 'category-' + categoryKey, children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bug, { className: "h-5 w-5" }), categoryLabel, (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", children: categoryBugs.length })] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: categoryBugs.map((bug) => ((0, jsx_runtime_1.jsx)(card_1.Card, { className: "cursor-pointer hover:bg-gray-50 transition-colors", "data-testid": 'bug-card-' + bug.id, onClick: () => {
                                                        setSelectedBug(bug);
                                                        // Set form values for editing
                                                        bugForm.reset({
                                                            title: bug.title,
                                                            description: bug.description,
                                                            category: bug.category,
                                                            page: bug.page,
                                                            priority: bug.priority,
                                                            reproductionSteps: bug.reproductionSteps || '',
                                                        });
                                                        setIsBugDetailsOpen(true);
                                                    }, children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-start justify-between mb-2", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium text-sm text-gray-900 line-clamp-2 break-words flex-1", "data-testid": 'bug-name-' + bug.id, children: bug.title }), (0, jsx_runtime_1.jsx)("div", { className: "flex gap-1", children: canEditBug(bug) && ((0, jsx_runtime_1.jsx)(button_1.Button, { size: "sm", variant: "ghost", onClick: (e) => {
                                                                                e.stopPropagation();
                                                                                setSelectedBug(bug);
                                                                                // Set form values for editing
                                                                                bugForm.reset({
                                                                                    title: bug.title,
                                                                                    description: bug.description,
                                                                                    category: bug.category,
                                                                                    page: bug.page,
                                                                                    priority: bug.priority,
                                                                                    reproductionSteps: bug.reproductionSteps || '',
                                                                                });
                                                                                setIsBugDetailsOpen(true);
                                                                            }, "data-testid": 'button-edit-' + bug.id, children: (0, jsx_runtime_1.jsx)(lucide_react_1.Edit2, { className: "h-3 w-3" }) })) })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mb-2", "data-testid": 'bug-date-' + bug.id, children: new Date(bug.createdAt).toLocaleDateString() }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-wrap gap-1 mb-2", children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { className: priorityColors[bug.priority], variant: "outline", children: bug.priority }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[bug.status], variant: "outline", children: bug.status.replace(/_/g, ' ') })] }), bug.filePath && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: "text-xs", children: "\uD83D\uDCCE File attached" }))] }) }, bug.id))) }) })] }, categoryKey));
                            }) })) })] }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isBugDetailsOpen, onOpenChange: setIsBugDetailsOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Bug Report Details" }) }), selectedBug && ((0, jsx_runtime_1.jsxs)("form", { onSubmit: bugForm.handleSubmit((data) => {
                                // Handle form submission for updates
                                if (canEditBug(selectedBug)) {
                                    updateBugMutation.mutate({
                                        id: selectedBug.id,
                                        data: { ...data, status: selectedBug.status }
                                    });
                                    setIsBugDetailsOpen(false);
                                }
                            }), className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "details-title", className: "text-sm font-medium", children: ["Title ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "details-title", ...bugForm.register('title'), readOnly: !canEditBug(selectedBug), className: !canEditBug(selectedBug) ? 'bg-gray-50' : '', "data-testid": "input-details-title" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "details-category", className: "text-sm font-medium", children: ["Category ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: bugForm.watch('category'), onValueChange: (value) => canEditBug(selectedBug) && bugForm.setValue('category', value), disabled: !canEditBug(selectedBug), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-details-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select category" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "ui_ux", children: "UI/UX" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "functionality", children: "Functionality" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "performance", children: "Performance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "data", children: "Data" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "security", children: "Security" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "integration", children: "Integration" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "other", children: "Other" })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "details-description", className: "text-sm font-medium", children: ["Description ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "details-description", ...bugForm.register('description'), rows: 4, readOnly: !canEditBug(selectedBug), className: !canEditBug(selectedBug) ? 'bg-gray-50' : '', "data-testid": "textarea-details-description" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "details-priority", className: "text-sm font-medium", children: ["Priority ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: bugForm.watch('priority'), onValueChange: (value) => canEditBug(selectedBug) && bugForm.setValue('priority', value), disabled: !canEditBug(selectedBug), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-details-priority", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select priority" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "low", children: "Low" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "medium", children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "high", children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "critical", children: "Critical" })] })] })] }), user?.role === 'admin' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "details-status", className: "text-sm font-medium", children: "Status" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedBug.status, onValueChange: (value) => {
                                                        // Update the selected bug status directly since this is admin-only
                                                        setSelectedBug({ ...selectedBug, status: value });
                                                    }, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-details-status", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select status" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "new", children: "New" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "acknowledged", children: "Acknowledged" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "in_progress", children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "resolved", children: "Resolved" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "closed", children: "Closed" })] })] })] })), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: "details-page", className: "text-sm font-medium", children: ["Page/Location ", (0, jsx_runtime_1.jsx)("span", { className: "text-red-500", children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "details-page", ...bugForm.register('page'), readOnly: !canEditBug(selectedBug), className: !canEditBug(selectedBug) ? 'bg-gray-50' : '', placeholder: "e.g. Dashboard, Login page, Settings", "data-testid": "input-details-page" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "details-steps", className: "text-sm font-medium", children: "Steps to Reproduce (Optional)" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "details-steps", ...bugForm.register('reproductionSteps'), rows: 3, readOnly: !canEditBug(selectedBug), className: !canEditBug(selectedBug) ? 'bg-gray-50' : '', placeholder: "Describe the steps to reproduce this issue...", "data-testid": "textarea-details-steps" })] }), (0, jsx_runtime_1.jsx)("div", { className: "border-t pt-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4 text-sm text-gray-600", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Created:" }), " ", new Date(selectedBug.createdAt).toLocaleDateString()] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Status:" }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[selectedBug.status], variant: "outline", children: selectedBug.status.replace(/_/g, ' ') })] })] }) }), (0, jsx_runtime_1.jsx)(AttachedFileSection, { entityType: "bug", entityId: selectedBug.id, filePath: selectedBug.filePath, fileName: selectedBug.fileName, fileSize: selectedBug.fileSize, fallbackName: selectedBug.title }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center pt-4 border-t", children: [(0, jsx_runtime_1.jsx)("div", { children: canDeleteBug(selectedBug) && ((0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", onClick: () => {
                                                    if (window.confirm('Are you sure you want to delete this bug report?')) {
                                                        handleDelete(selectedBug.id);
                                                    }
                                                }, className: "text-red-600 hover:text-red-700", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: "w-4 h-4 mr-2" }), "Delete"] })) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: () => setIsBugDetailsOpen(false), children: canEditBug(selectedBug) ? 'Cancel' : 'Close' }), canEditBug(selectedBug) && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: updateBugMutation.isPending, "data-testid": "button-save-bug", children: updateBugMutation.isPending ? 'Saving...' : 'Save Changes' }))] })] })] }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,