749f07f522f7ce5a267421cbeebc1c48
'use strict';
var UI = require('../../document/UI.js');
require('../../utils/dataTransfer/Clipboard.js');
var selection = require('../../utils/focus/selection.js');
var resolveCaretPosition = require('./resolveCaretPosition.js');
function setSelectionPerMouseDown({ document, target, clickCount, node, offset }) {
    if (selection.hasNoSelection(target)) {
        return;
    }
    const targetHasOwnSelection = selection.hasOwnSelection(target);
    // On non-input elements the text selection per multiple click
    // can extend beyond the target boundaries.
    // The exact mechanism what is considered in the same line is unclear.
    // Looks it might be every inline element.
    // TODO: Check what might be considered part of the same line of text.
    const text = String(targetHasOwnSelection ? UI.getUIValue(target) : target.textContent);
    const [start, end] = node ? // which elements might be considered in the same line of text.
        // TODO: support expanding initial range on multiple clicks if node is given
        [
            offset,
            offset
        ] : getTextRange(text, offset, clickCount);
    // TODO: implement modifying selection per shift/ctrl+mouse
    if (targetHasOwnSelection) {
        UI.setUISelection(target, {
            anchorOffset: start !== null && start !== undefined ? start : text.length,
            focusOffset: end !== null && end !== undefined ? end : text.length
        });
        return {
            node: target,
            start: start !== null && start !== undefined ? start : 0,
            end: end !== null && end !== undefined ? end : text.length
        };
    }
    else {
        const { node: startNode, offset: startOffset } = resolveCaretPosition.resolveCaretPosition({
            target,
            node,
            offset: start
        });
        const { node: endNode, offset: endOffset } = resolveCaretPosition.resolveCaretPosition({
            target,
            node,
            offset: end
        });
        const range = target.ownerDocument.createRange();
        try {
            range.setStart(startNode, startOffset);
            range.setEnd(endNode, endOffset);
        }
        catch (e) {
            throw new Error('The given offset is out of bounds.');
        }
        const selection = document.getSelection();
        selection === null || selection === undefined ? undefined : selection.removeAllRanges();
        selection === null || selection === undefined ? undefined : selection.addRange(range.cloneRange());
        return range;
    }
}
function getTextRange(text, pos, clickCount) {
    if (clickCount % 3 === 1 || text.length === 0) {
        return [
            pos,
            pos
        ];
    }
    const textPos = pos !== null && pos !== undefined ? pos : text.length;
    if (clickCount % 3 === 2) {
        return [
            textPos - text.substr(0, pos).match(/(\w+|\s+|\W)?$/)[0].length,
            pos === undefined ? pos : pos + text.substr(pos).match(/^(\w+|\s+|\W)?/)[0].length
        ];
    }
    // triple click
    return [
        textPos - text.substr(0, pos).match(/[^\r\n]*$/)[0].length,
        pos === undefined ? pos : pos + text.substr(pos).match(/^[^\r\n]*/)[0].length
    ];
}
exports.setSelectionPerMouseDown = setSelectionPerMouseDown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L3NlbGVjdGlvbi9zZXRTZWxlY3Rpb25QZXJNb3VzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN6QyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUNqRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUMxRCxJQUFJLG9CQUFvQixHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBRWhFLFNBQVMsd0JBQXdCLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO0lBQzVFLElBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ25DLE9BQU87SUFDWCxDQUFDO0lBQ0QsTUFBTSxxQkFBcUIsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLDhEQUE4RDtJQUM5RCwyQ0FBMkM7SUFDM0Msc0VBQXNFO0lBQ3RFLDBDQUEwQztJQUMxQyxzRUFBc0U7SUFDdEUsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEYsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLCtEQUErRDtRQUMzRiw0RUFBNEU7UUFDNUU7WUFDSSxNQUFNO1lBQ04sTUFBTTtTQUNULENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzND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SyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTtZQUMvRCxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07U0FDckYsQ0FBQztJQUNOLENBQUM7SUFDRCxlQUFlO0lBQ2YsT0FBTztRQUNILE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTtRQUMxRCxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNO0tBQ2hGLENBQUM7QUFDTixDQUFDO0FBRUQsT0FBTyxDQUFDLHdCQUF3QixHQUFHLHdCQUF3QixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudC9kaXN0L2Nqcy9ldmVudC9zZWxlY3Rpb24vc2V0U2VsZWN0aW9uUGVyTW91c2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVUkgPSByZXF1aXJlKCcuLi8uLi9kb2N1bWVudC9VSS5qcycpO1xucmVxdWlyZSgnLi4vLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0NsaXBib2FyZC5qcycpO1xudmFyIHNlbGVjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2ZvY3VzL3NlbGVjdGlvbi5qcycpO1xudmFyIHJlc29sdmVDYXJldFBvc2l0aW9uID0gcmVxdWlyZSgnLi9yZXNvbHZlQ2FyZXRQb3NpdGlvbi5qcycpO1xuXG5mdW5jdGlvbiBzZXRTZWxlY3Rpb25QZXJNb3VzZURvd24oeyBkb2N1bWVudCwgdGFyZ2V0LCBjbGlja0NvdW50LCBub2RlLCBvZmZzZXQgfSkge1xuICAgIGlmIChzZWxlY3Rpb24uaGFzTm9TZWxlY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldEhhc093blNlbGVjdGlvbiA9IHNlbGVjdGlvbi5oYXNPd25TZWxlY3Rpb24odGFyZ2V0KTtcbiAgICAvLyBPbiBub24taW5wdXQgZWxlbWVudHMgdGhlIHRleHQgc2VsZWN0aW9uIHBlciBtdWx0aXBsZSBjbGlja1xuICAgIC8vIGNhbiBleHRlbmQgYmV5b25kIHRoZSB0YXJnZXQgYm91bmRhcmllcy5cbiAgICAvLyBUaGUgZXhhY3QgbWVjaGFuaXNtIHdoYXQgaXMgY29uc2lkZXJlZCBpbiB0aGUgc2FtZSBsaW5lIGlzIHVuY2xlYXIuXG4gICAgLy8gTG9va3MgaXQgbWlnaHQgYmUgZXZlcnkgaW5saW5lIGVsZW1lbnQuXG4gICAgLy8gVE9ETzogQ2hlY2sgd2hhdCBtaWdodCBiZSBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHNhbWUgbGluZSBvZiB0ZXh0LlxuICAgIGNvbnN0IHRleHQgPSBTdHJpbmcodGFyZ2V0SGFzT3duU2VsZWN0aW9uID8gVUkuZ2V0VUlWYWx1ZSh0YXJnZXQpIDogdGFyZ2V0LnRleHRDb250ZW50KTtcbiAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSBub2RlID8gLy8gd2hpY2ggZWxlbWVudHMgbWlnaHQgYmUgY29uc2lkZXJlZCBpbiB0aGUgc2FtZSBsaW5lIG9mIHRleHQuXG4gICAgLy8gVE9ETzogc3VwcG9ydCBleHBhbmRpbmcgaW5pdGlhbCByYW5nZSBvbiBtdWx0aXBsZSBjbGlja3MgaWYgbm9kZSBpcyBnaXZlblxuICAgIFtcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBvZmZzZXRcbiAgICBdIDogZ2V0VGV4dFJhbmdlKHRleHQsIG9mZnNldCwgY2xpY2tDb3VudCk7XG4gICAgLy8gVE9ETzogaW1wbGVtZW50IG1vZGlmeWluZyBzZWxlY3Rpb24gcGVyIHNoaWZ0L2N0cmwrbW91c2VcbiAgICBpZiAodGFyZ2V0SGFzT3duU2VsZWN0aW9uKSB7XG4gICAgICAgIFVJLnNldFVJU2VsZWN0aW9uKHRhcmdldCwge1xuICAgICAgICAgICAgYW5jaG9yT2Zmc2V0OiBzdGFydCAhPT0gbnVsbCAmJiBzdGFydCAhPT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICAgIGZvY3VzT2Zmc2V0OiBlbmQgIT09IG51bGwgJiYgZW5kICE9PSB1bmRlZmluZWQgPyBlbmQgOiB0ZXh0Lmxlbmd0aFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGU6IHRhcmdldCxcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydCAhPT0gbnVsbCAmJiBzdGFydCAhPT0gdW5kZWZpbmVkID8gc3RhcnQgOiAwLFxuICAgICAgICAgICAgZW5kOiBlbmQgIT09IG51bGwgJiYgZW5kICE9PSB1bmRlZmluZWQgPyBlbmQgOiB0ZXh0Lmxlbmd0aFxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgbm9kZTogc3RhcnROb2RlLCBvZmZzZXQ6IHN0YXJ0T2Zmc2V0IH0gPSByZXNvbHZlQ2FyZXRQb3NpdGlvbi5yZXNvbHZlQ2FyZXRQb3NpdGlvbih7XG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgb2Zmc2V0OiBzdGFydFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBub2RlOiBlbmROb2RlLCBvZmZzZXQ6IGVuZE9mZnNldCB9ID0gcmVzb2x2ZUNhcmV0UG9zaXRpb24ucmVzb2x2ZUNhcmV0UG9zaXRpb24oe1xuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIG9mZnNldDogZW5kXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByYW5nZSA9IHRhcmdldC5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydChzdGFydE5vZGUsIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZChlbmROb2RlLCBlbmRPZmZzZXQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBnaXZlbiBvZmZzZXQgaXMgb3V0IG9mIGJvdW5kcy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgc2VsZWN0aW9uID09PSBudWxsIHx8IHNlbGVjdGlvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb24gPT09IG51bGwgfHwgc2VsZWN0aW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UuY2xvbmVSYW5nZSgpKTtcbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFRleHRSYW5nZSh0ZXh0LCBwb3MsIGNsaWNrQ291bnQpIHtcbiAgICBpZiAoY2xpY2tDb3VudCAlIDMgPT09IDEgfHwgdGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHBvcyxcbiAgICAgICAgICAgIHBvc1xuICAgICAgICBdO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0UG9zID0gcG9zICE9PSBudWxsICYmIHBvcyAhPT0gdW5kZWZpbmVkID8gcG9zIDogdGV4dC5sZW5ndGg7XG4gICAgaWYgKGNsaWNrQ291bnQgJSAzID09PSAyKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0ZXh0UG9zIC0gdGV4dC5zdWJzdHIoMCwgcG9zKS5tYXRjaCgvKFxcdyt8XFxzK3xcXFcpPyQvKVswXS5sZW5ndGgsXG4gICAgICAgICAgICBwb3MgPT09IHVuZGVmaW5lZCA/IHBvcyA6IHBvcyArIHRleHQuc3Vic3RyKHBvcykubWF0Y2goL14oXFx3K3xcXHMrfFxcVyk/LylbMF0ubGVuZ3RoXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8vIHRyaXBsZSBjbGlja1xuICAgIHJldHVybiBbXG4gICAgICAgIHRleHRQb3MgLSB0ZXh0LnN1YnN0cigwLCBwb3MpLm1hdGNoKC9bXlxcclxcbl0qJC8pWzBdLmxlbmd0aCxcbiAgICAgICAgcG9zID09PSB1bmRlZmluZWQgPyBwb3MgOiBwb3MgKyB0ZXh0LnN1YnN0cihwb3MpLm1hdGNoKC9eW15cXHJcXG5dKi8pWzBdLmxlbmd0aFxuICAgIF07XG59XG5cbmV4cG9ydHMuc2V0U2VsZWN0aW9uUGVyTW91c2VEb3duID0gc2V0U2VsZWN0aW9uUGVyTW91c2VEb3duO1xuIl0sInZlcnNpb24iOjN9