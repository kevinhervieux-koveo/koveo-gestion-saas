{"file":"/home/runner/workspace/tests/unit/comprehensive-ui-elements-translation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/comprehensive-ui-elements-translation.test.ts"],"sourcesContent":["/**\n * Comprehensive UI Elements Translation Test Suite\n * Validates that ALL user interface elements are properly translated:\n * - Residence cards and all their labels\n * - Building cards and all their labels  \n * - Titles and subtitles\n * - Pagination elements\n * - All buttons in cards\n * - All form labels and field names\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport { translations, type Language } from '../../client/src/lib/i18n.ts';\n\ndescribe('Comprehensive UI Elements Translation Coverage', () => {\n  const languages: Language[] = ['en', 'fr'];\n\n  describe('Residence Card Elements Translation', () => {\n    const residenceCardKeys = [\n      'address',\n      'floor',\n      'sqFt',\n      'bedrooms', \n      'bathrooms',\n      'parkingSpaces',\n      'storageSpaces',\n      'parking',\n      'storage'\n    ];\n\n    it('should have all residence card field labels translated', () => {\n      residenceCardKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(t[key]).toBeDefined();\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n\n    it('should have proper French translations for residence fields', () => {\n      const fr = translations.fr;\n      expect(fr.address).toBe('Adresse');\n      expect(fr.floor).toBe('Étage'); \n      expect(fr.bedrooms).toBe('Chambres');\n      expect(fr.bathrooms).toBe('Salles de bain');\n    });\n\n    it('should have residence card buttons translated', () => {\n      const residenceButtonKeys = [\n        'viewDocuments',\n        'viewDocuments2',\n        'buildingDocuments'\n      ];\n\n      residenceButtonKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n  });\n\n  describe('Building Card Elements Translation', () => {\n    const buildingCardKeys = [\n      'address',\n      'buildingType',\n      'yearBuilt',\n      'totalUnits',\n      'managementCompany',\n      'occupancyStats',\n      'occupancy'\n    ];\n\n    it('should have all building card field labels translated', () => {\n      buildingCardKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(t[key]).toBeDefined();\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n\n    it('should have building occupancy translations', () => {\n      languages.forEach(lang => {\n        const t = translations[lang] as any;\n        if (t.occupancy) {\n          expect(typeof t.occupancy).toBe('string');\n        }\n      });\n    });\n  });\n\n  describe('Page Titles and Subtitles Translation', () => {\n    const titleSubtitleKeys = [\n      'myResidence',\n      'myResidenceInfo',\n      'viewResidenceInfo',\n      'myBuilding',\n      'myBuildings',\n      'viewBuildingsAccess',\n      'noBuildingsFound',\n      'noResidencesFound'\n    ];\n\n    it('should have all page titles and subtitles translated', () => {\n      titleSubtitleKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n          expect(t[key].length).toBeGreaterThan(0);\n        });\n      });\n    });\n\n    it('should have proper French page titles', () => {\n      const fr = translations.fr;\n      expect(fr.myResidence).toBe('Ma résidence');\n      expect(fr.myBuildings).toBe('Mes bâtiments');\n    });\n  });\n\n  describe('Pagination Elements Translation', () => {\n    const paginationKeys = [\n      'showing',\n      'showingResults',\n      'previous',\n      'next',\n      'page',\n      'of',\n      'total',\n      'results',\n      'residences',\n      'buildings'\n    ];\n\n    it('should have pagination text translations', () => {\n      paginationKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n\n    it('should have pagination pattern support for dynamic text', () => {\n      // Test patterns like \"Showing X to Y of Z residences\"\n      const patterns = ['showingResults', 'showingXtoYofZ'];\n      \n      patterns.forEach(pattern => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[pattern]) {\n            expect(typeof t[pattern]).toBe('string');\n          }\n        });\n      });\n    });\n  });\n\n  describe('Button Translation Coverage', () => {\n    const cardButtonKeys = [\n      'viewDocuments',\n      'viewDocuments2', \n      'buildingDocuments',\n      'previous',\n      'next',\n      'close',\n      'cancel',\n      'save',\n      'edit',\n      'delete',\n      'add',\n      'create',\n      'update'\n    ];\n\n    it('should have all card buttons translated', () => {\n      cardButtonKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n\n    it('should have French button translations using proper Quebec terminology', () => {\n      const fr = translations.fr;\n      \n      // Common button verbs in Quebec French\n      if (fr.save) expect(fr.save).toBe('Enregistrer');\n      if (fr.cancel) expect(fr.cancel).toBe('Annuler');\n      if (fr.close) expect(fr.close).toBe('Fermer');\n      if (fr.edit) expect(fr.edit).toBe('Modifier');\n    });\n  });\n\n  describe('Form Labels and Field Names Translation', () => {\n    const formLabelKeys = [\n      'firstName',\n      'lastName', \n      'email',\n      'phone',\n      'address',\n      'city',\n      'province',\n      'postalCode',\n      'unitNumber',\n      'buildingName',\n      'organization',\n      'role',\n      'type'\n    ];\n\n    it('should have all form labels translated', () => {\n      formLabelKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n\n    it('should use proper Quebec French form terminology', () => {\n      const fr = translations.fr;\n      \n      if (fr.email) expect(fr.email).toBe('Courriel'); // Quebec French for email\n      if (fr.phone) expect(fr.phone).toBe('Téléphone');\n      if (fr.address) expect(fr.address).toBe('Adresse');\n    });\n  });\n\n  describe('Unit Measurements and Technical Terms', () => {\n    const measurementKeys = [\n      'sqFt',\n      'units',\n      'occupied',\n      'vacant',\n      'apartment',\n      'condo',\n      'house'\n    ];\n\n    it('should have measurement and property type translations', () => {\n      measurementKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n  });\n\n  describe('Status and State Indicators Translation', () => {\n    const statusKeys = [\n      'active',\n      'inactive', \n      'occupied',\n      'vacant',\n      'available',\n      'unavailable',\n      'pending',\n      'approved',\n      'rejected',\n      'complete',\n      'loading'\n    ];\n\n    it('should have all status indicators translated', () => {\n      statusKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n\n    it('should have proper Quebec French status terms', () => {\n      const fr = translations.fr;\n      \n      if (fr.loading) expect(fr.loading).toBe('Chargement...');\n      if (fr.complete) expect(fr.complete).toBe('Terminé');\n      if (fr.pending) expect(fr.pending).toBe('En attente');\n    });\n  });\n\n  describe('Card Content and Labels Translation', () => {\n    it('should translate all residence card content labels', () => {\n      const residenceLabels = [\n        'unit',\n        'building2', // \"Building\" label\n        'residence',\n        'floor',\n        'bedrooms',\n        'bathrooms', \n        'parkingSpaces',\n        'storageSpaces'\n      ];\n\n      residenceLabels.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n          expect(t[key].length).toBeGreaterThan(0);\n        });\n      });\n    });\n\n    it('should translate all building card content labels', () => {\n      const buildingLabels = [\n        'address',\n        'buildingType',\n        'totalUnits',\n        'occupancy',\n        'managementCompany'\n      ];\n\n      buildingLabels.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n  });\n\n  describe('Missing Translation Detection', () => {\n    it('should identify any UI elements that might be missing translations', () => {\n      // Common UI patterns that should be translated\n      const commonUIPatterns = [\n        'viewDocuments',\n        'buildingDocuments', \n        'showingResults',\n        'loading',\n        'noDataFound',\n        'errorLoading'\n      ];\n\n      commonUIPatterns.forEach(pattern => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[pattern]) {\n            expect(typeof t[pattern]).toBe('string');\n            expect(t[pattern].length).toBeGreaterThan(0);\n            // Should not contain unprocessed placeholder brackets (unless it's a template)\n            if (!pattern.includes('showing') && !pattern.includes('Results')) {\n              expect(t[pattern]).not.toMatch(/\\{[^}]*\\}/);\n            }\n          }\n        });\n      });\n    });\n\n    it('should ensure no hardcoded English text in common UI patterns', () => {\n      // These are patterns that commonly appear untranslated\n      const problematicPatterns = [\n        /^View Documents?$/i,\n        /^Building Documents?$/i,\n        /^Address$/i,\n        /^Sq Ft$/i,\n        /^Bedrooms?$/i,\n        /^Bathrooms?$/i,\n        /^Parking$/i,\n        /^Storage$/i,\n        /^Showing \\d+ to \\d+ of \\d+ /i,\n        /^Previous$/i,\n        /^Next$/i\n      ];\n\n      // This test documents patterns to watch for - would need actual component scanning\n      // to detect hardcoded text, but serves as a reminder of what to look for\n      expect(problematicPatterns.length).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}