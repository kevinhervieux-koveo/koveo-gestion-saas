{"file":"/home/runner/workspace/tests/unit/security/api-error-handling.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/security/api-error-handling.test.ts"],"sourcesContent":["/**\n * API Error Handling and Validation Edge Cases\n * Tests comprehensive error scenarios for Quebec property management APIs\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\n\n// Mock WebSocket constructor for Jest environment\njest.mock('ws', () => ({\n  __esModule: true,\n  default: class MockWebSocket {}\n}));\n\nimport { registerRoutes } from '../../../server/routes';\nimport { db } from '../../../server/db';\nimport * as schema from '../../../shared/schema';\n\n// Create test server\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json({ limit: '1mb' })); // Set reasonable limit for testing\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('API Error Handling and Validation Edge Cases', () => {\n  let app: express.Application;\n  let testOrganization: any;\n  let testBuilding: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n\n    try {\n      // Clean test data\n      await db.delete(schema.buildings);\n      await db.delete(schema.organizations);\n    } catch (error) {\n      console.warn('Test setup warning:', error);\n    }\n\n    // Create test organization\n    const [org] = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Test Organization',\n        type: 'Standard' as any,\n        address: '123 Test St',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        phone: '514-555-0123',\n        email: 'test@org.com',\n      })\n      .returning();\n    testOrganization = org;\n\n    // Create test building\n    const [building] = await db\n      .insert(schema.buildings)\n      .values({\n        organizationId: testOrganization.id,\n        name: 'Test Building',\n        address: '123 Test St',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        buildingType: 'apartment',\n        totalUnits: 10,\n      })\n      .returning();\n    testBuilding = building;\n  });\n\n  afterEach(async () => {\n    try {\n      await db.delete(schema.buildings);\n      await db.delete(schema.organizations);\n    } catch (error) {\n      console.warn('Test cleanup warning:', error);\n    }\n  });\n\n  describe('Input Validation Edge Cases', () => {\n    it('should validate UUID format in API parameters', async () => {\n      const invalidUUIDs = [\n        'invalid-uuid',\n        '123',\n        'not-a-uuid-at-all',\n        '12345678-1234-1234-1234-12345678901', // Too long\n        '12345678-1234-1234-1234-123456789012', // Wrong format\n        '',\n        null,\n      ];\n\n      for (const invalidId of invalidUUIDs) {\n        const response = await request(app)\n          .get(`/api/organizations/${invalidId}`);\n\n        expect([400, 404]).toContain(response.status);\n      }\n    });\n\n    it('should validate Quebec postal code format', async () => {\n      const invalidPostalCodes = [\n        'invalid', // Not Quebec format\n        '90210', // US ZIP code\n        'M5V 3A1', // Ontario postal code format but wrong province\n        'H1H1H1', // Missing space\n        'H1H 1H', // Incomplete\n        'A1A 1A1', // Invalid Quebec area (A is Newfoundland)\n        'Z9Z 9Z9', // Invalid postal characters\n      ];\n\n      for (const postalCode of invalidPostalCodes) {\n        const response = await request(app)\n          .post('/api/organizations')\n          .send({\n            name: 'Test Quebec Org',\n            address: '123 Test Street',\n            city: 'Montreal',\n            province: 'QC',\n            postalCode,\n            phone: '514-555-0123',\n            email: 'test@quebecorg.com',\n            type: 'Condo',\n          });\n\n        // Should validate Quebec postal code format\n        if (response.status === 400) {\n          expect(response.body.message).toMatch(/postal|code/i);\n        }\n      }\n    });\n\n    it('should validate Quebec phone number formats', async () => {\n      const phoneNumbers = [\n        '514-555-0123', // Valid Montreal\n        '418-555-0123', // Valid Quebec City\n        '819-555-0123', // Valid Gatineau\n        '450-555-0123', // Valid Longueuil\n        '(514) 555-0123', // Valid with parentheses\n        '514.555.0123', // Valid with dots\n        '5145550123', // Valid without formatting\n        '+1-514-555-0123', // Valid international\n        '911', // Emergency (should be handled specially)\n        '555-0123', // Missing area code\n        '514-555-012', // Too short\n        '614-555-0123', // Non-Quebec area code\n        'abc-def-ghij', // Non-numeric\n        '', // Empty\n      ];\n\n      for (const phone of phoneNumbers) {\n        const response = await request(app)\n          .post('/api/organizations')\n          .send({\n            name: 'Test Phone Org',\n            address: '123 Test Street',\n            city: 'Montreal',\n            province: 'QC',\n            postalCode: 'H1H 1H1',\n            phone,\n            email: 'test@phoneorg.com',\n            type: 'Apartment',\n          });\n\n        // Quebec phone numbers should be validated appropriately\n        if ([400, 422].includes(response.status)) {\n          expect(response.body.message).toMatch(/phone/i);\n        }\n      }\n    });\n  });\n\n  describe('Database Constraint Validation', () => {\n    it('should enforce building type enum constraints', async () => {\n      const invalidBuildingTypes = [\n        'house', // Not valid in Quebec residential context\n        'commercial', // Wrong building category\n        'Apartment', // Wrong case\n        'CONDO', // Wrong case\n        '', // Empty\n        null,\n        'mixed-use', // Not supported\n      ];\n\n      for (const buildingType of invalidBuildingTypes) {\n        const response = await request(app)\n          .post('/api/buildings')\n          .send({\n            organizationId: testOrganization.id,\n            name: 'Test Building',\n            address: '123 Test Street',\n            city: 'Montreal',\n            province: 'QC',\n            postalCode: 'H1H 1H1',\n            buildingType,\n            totalUnits: 10,\n          });\n\n        expect([400, 422]).toContain(response.status);\n      }\n    });\n\n    it('should validate residence unit numbering in Quebec context', async () => {\n      const invalidUnitNumbers = [\n        '', // Empty unit number\n        '0', // Unit numbers typically start from 1\n        'basement', // Non-standard naming\n        '999999', // Unrealistic unit number\n        'A-1-B-2', // Too complex\n        '1st Floor', // Descriptive instead of numeric\n      ];\n\n      for (const unitNumber of invalidUnitNumbers) {\n        const response = await request(app)\n          .post('/api/residences')\n          .send({\n            buildingId: testBuilding.id,\n            unitNumber,\n            squareFootage: 1000,\n            bedrooms: 2,\n            bathrooms: 1,\n          });\n\n        if (response.status === 400) {\n          expect(response.body.message).toMatch(/unit/i);\n        }\n      }\n    });\n  });\n\n  describe('Concurrent Operations and Race Conditions', () => {\n    it('should handle concurrent user creation with same email', async () => {\n      const userData = {\n        email: 'concurrent@example.com',\n        username: 'concurrent',\n        firstName: 'Concurrent',\n        lastName: 'User',\n        role: 'tenant',\n        password: 'TestPassword123!',\n      };\n\n      // Create multiple concurrent requests\n      const concurrentRequests = Array(5).fill(null).map(() =>\n        request(app)\n          .post('/api/users')\n          .send(userData)\n      );\n\n      const responses = await Promise.all(concurrentRequests);\n      \n      // Only one should succeed, others should fail with conflict or validation errors\n      const successfulCreations = responses.filter(r => r.status === 201);\n      const errorResponses = responses.filter(r => r.status >= 400);\n      \n      expect(successfulCreations.length).toBeLessThanOrEqual(1);\n      expect(errorResponses.length).toBeGreaterThan(0);\n    });\n\n    it('should handle concurrent document uploads to same building', async () => {\n      const documentData = {\n        title: 'Test Document',\n        description: 'Concurrent test document',\n        category: 'Legal',\n        buildingId: testBuilding.id,\n        accessLevel: 'public',\n      };\n\n      // Simulate multiple users uploading documents simultaneously\n      const concurrentUploads = Array(3).fill(null).map((_, index) =>\n        request(app)\n          .post('/api/documents')\n          .send({\n            ...documentData,\n            title: `Test Document ${index + 1}`,\n          })\n      );\n\n      const responses = await Promise.all(concurrentUploads);\n      \n      // All uploads should either succeed or fail gracefully\n      const validStatuses = [200, 201, 400, 401, 403, 409, 422];\n      responses.forEach(response => {\n        expect(validStatuses).toContain(response.status);\n      });\n    });\n  });\n\n  describe('Memory and Performance Edge Cases', () => {\n    it('should handle large organization queries efficiently', async () => {\n      // Test query performance with realistic data size\n      const startTime = Date.now();\n      \n      const response = await request(app)\n        .get('/api/organizations');\n\n      const executionTime = Date.now() - startTime;\n      \n      // API should respond within reasonable time (< 5 seconds)\n      expect(executionTime).toBeLessThan(5000);\n      expect([200, 401]).toContain(response.status);\n    });\n\n    it('should handle pagination edge cases', async () => {\n      const paginationTests = [\n        { page: 0, limit: 10 }, // Page 0\n        { page: -1, limit: 10 }, // Negative page\n        { page: 1, limit: 0 }, // Zero limit\n        { page: 1, limit: -5 }, // Negative limit\n        { page: 999999, limit: 10 }, // Very high page number\n        { page: 1, limit: 1000 }, // Very high limit\n      ];\n\n      for (const { page, limit } of paginationTests) {\n        const response = await request(app)\n          .get(`/api/buildings?page=${page}&limit=${limit}`);\n\n        // Should handle edge cases gracefully\n        expect([200, 400, 401, 422]).toContain(response.status);\n      }\n    });\n  });\n\n  describe('Quebec-Specific Business Logic', () => {\n    it('should validate Quebec residential property regulations', async () => {\n      // Test Quebec-specific property constraints\n      const quebecPropertyData = {\n        organizationId: testOrganization.id,\n        name: 'Copropriété Les Jardins',\n        address: '123 boulevard René-Lévesque',\n        city: 'Québec',\n        province: 'QC',\n        postalCode: 'G1R 2B5',\n        buildingType: 'condo', // Quebec condo regulations\n        totalUnits: 150, // Large Quebec condo building\n        yearBuilt: 1995,\n        totalFloors: 15,\n      };\n\n      const response = await request(app)\n        .post('/api/buildings')\n        .send(quebecPropertyData);\n\n      if (response.status === 201) {\n        const building = response.body.building || response.body;\n        expect(building.buildingType).toBe('condo');\n        expect(building.province).toBe('QC');\n      }\n    });\n\n    it('should handle French language validation for Quebec users', async () => {\n      const frenchUserData = {\n        email: 'français@exemple.com',\n        username: 'utilisateurfrançais',\n        firstName: 'Jean-François',\n        lastName: 'Côté-Tremblay',\n        role: 'tenant',\n        language: 'fr',\n        password: 'MotDePasse123!',\n      };\n\n      const response = await request(app)\n        .post('/api/users')\n        .send(frenchUserData);\n\n      if (response.status === 201) {\n        const user = response.body.user || response.body;\n        // Should preserve French characters and names\n        expect(user.firstName).toBe('Jean-François');\n        expect(user.lastName).toBe('Côté-Tremblay');\n        expect(user.language).toBe('fr');\n      }\n    });\n  });\n\n  describe('Error Response Consistency', () => {\n    it('should return consistent error format across all endpoints', async () => {\n      const endpoints = [\n        { method: 'get', path: '/api/nonexistent' },\n        { method: 'post', path: '/api/users', body: {} },\n        { method: 'get', path: '/api/organizations/invalid-id' },\n        { method: 'put', path: '/api/buildings/00000000-0000-0000-0000-000000000000', body: {} },\n      ];\n\n      for (const endpoint of endpoints) {\n        const response = await request(app)[endpoint.method](endpoint.path)\n          .send(endpoint.body || {});\n\n        if (response.status >= 400) {\n          // All error responses should have consistent structure\n          console.log(`Testing endpoint ${endpoint.method.toUpperCase()} ${endpoint.path}, status: ${response.status}, body:`, response.body);\n          \n          // Skip if response body is empty (some endpoints may not return JSON)\n          if (Object.keys(response.body).length > 0) {\n            expect(response.body).toHaveProperty('message');\n            expect(typeof response.body.message).toBe('string');\n            \n            if (response.body.code) {\n              expect(typeof response.body.code).toBe('string');\n            }\n          }\n        }\n      }\n    });\n\n    it('should handle OPTIONS requests for CORS compliance', async () => {\n      const response = await request(app)\n        .options('/api/users');\n\n      // Should handle CORS preflight requests\n      expect([200, 204, 404]).toContain(response.status);\n    });\n  });\n});"],"version":3}