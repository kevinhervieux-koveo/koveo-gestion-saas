e05974327b5b28ca3da36b326434dbc2
'use strict';
var dispatchEvent = require('../event/dispatchEvent.js');
var isElementType = require('../utils/misc/isElementType.js');
require('../utils/dataTransfer/Clipboard.js');
var UI = require('./UI.js');
require('@testing-library/dom');
var interceptor = require('./interceptor.js');
const isPrepared = Symbol('Node prepared with document state workarounds');
function prepareDocument(document) {
    if (document[isPrepared]) {
        return;
    }
    document.addEventListener('focus', (e) => {
        const el = e.target;
        prepareElement(el);
    }, {
        capture: true,
        passive: true
    });
    // Our test environment defaults to `document.body` as `activeElement`.
    // In other environments this might be `null` when preparing.
    // istanbul ignore else
    if (document.activeElement) {
        prepareElement(document.activeElement);
    }
    document.addEventListener('blur', (e) => {
        const el = e.target;
        const initialValue = UI.getInitialValue(el);
        if (initialValue !== undefined) {
            if (el.value !== initialValue) {
                dispatchEvent.dispatchDOMEvent(el, 'change');
            }
            UI.clearInitialValue(el);
        }
    }, {
        capture: true,
        passive: true
    });
    document[isPrepared] = isPrepared;
}
function prepareElement(el) {
    if (el[isPrepared]) {
        return;
    }
    if (isElementType.isElementType(el, [
        'input',
        'textarea'
    ])) {
        interceptor.prepareValueInterceptor(el);
        interceptor.prepareSelectionInterceptor(el);
        interceptor.prepareRangeTextInterceptor(el);
    }
    el[isPrepared] = isPrepared;
}
exports.prepareDocument = prepareDocument;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2RvY3VtZW50L3ByZXBhcmVEb2N1bWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN6RCxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUM5QyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUIsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDaEMsSUFBSSxXQUFXLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFOUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDM0UsU0FBUyxlQUFlLENBQUMsUUFBUTtJQUM3QixJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU87SUFDWCxDQUFDO0lBQ0QsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFO1FBQ3BDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDcEIsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsRUFBRTtRQUNDLE9BQU8sRUFBRSxJQUFJO1FBQ2IsT0FBTyxFQUFFLElBQUk7S0FDaEIsQ0FBQyxDQUFDO0lBQ0gsdUVBQXVFO0lBQ3ZFLDZEQUE2RDtJQUM3RCx1QkFBdUI7SUFDdkIsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDekIsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ0QsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBQyxFQUFFO1FBQ25DLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDcEIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUM3QixJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssWUFBWSxFQUFFLENBQUM7Z0JBQzVCLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDakQsQ0FBQztZQUNELEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QixDQUFDO0lBQ0wsQ0FBQyxFQUFFO1FBQ0MsT0FBTyxFQUFFLElBQUk7UUFDYixPQUFPLEVBQUUsSUFBSTtLQUNoQixDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDO0FBQ3RDLENBQUM7QUFDRCxTQUFTLGNBQWMsQ0FBQyxFQUFFO0lBQ3RCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDakIsT0FBTztJQUNYLENBQUM7SUFDRCxJQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFO1FBQ2hDLE9BQU87UUFDUCxVQUFVO0tBQ2IsQ0FBQyxFQUFFLENBQUM7UUFDRCxXQUFXLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEMsV0FBVyxDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUNoQyxDQUFDO0FBRUQsT0FBTyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2RvY3VtZW50L3ByZXBhcmVEb2N1bWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBkaXNwYXRjaEV2ZW50ID0gcmVxdWlyZSgnLi4vZXZlbnQvZGlzcGF0Y2hFdmVudC5qcycpO1xudmFyIGlzRWxlbWVudFR5cGUgPSByZXF1aXJlKCcuLi91dGlscy9taXNjL2lzRWxlbWVudFR5cGUuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciBVSSA9IHJlcXVpcmUoJy4vVUkuanMnKTtcbnJlcXVpcmUoJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tJyk7XG52YXIgaW50ZXJjZXB0b3IgPSByZXF1aXJlKCcuL2ludGVyY2VwdG9yLmpzJyk7XG5cbmNvbnN0IGlzUHJlcGFyZWQgPSBTeW1ib2woJ05vZGUgcHJlcGFyZWQgd2l0aCBkb2N1bWVudCBzdGF0ZSB3b3JrYXJvdW5kcycpO1xuZnVuY3Rpb24gcHJlcGFyZURvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgaWYgKGRvY3VtZW50W2lzUHJlcGFyZWRdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoZSk9PntcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldDtcbiAgICAgICAgcHJlcGFyZUVsZW1lbnQoZWwpO1xuICAgIH0sIHtcbiAgICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8vIE91ciB0ZXN0IGVudmlyb25tZW50IGRlZmF1bHRzIHRvIGBkb2N1bWVudC5ib2R5YCBhcyBgYWN0aXZlRWxlbWVudGAuXG4gICAgLy8gSW4gb3RoZXIgZW52aXJvbm1lbnRzIHRoaXMgbWlnaHQgYmUgYG51bGxgIHdoZW4gcHJlcGFyaW5nLlxuICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgcHJlcGFyZUVsZW1lbnQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgfVxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoZSk9PntcbiAgICAgICAgY29uc3QgZWwgPSBlLnRhcmdldDtcbiAgICAgICAgY29uc3QgaW5pdGlhbFZhbHVlID0gVUkuZ2V0SW5pdGlhbFZhbHVlKGVsKTtcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoZWwudmFsdWUgIT09IGluaXRpYWxWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQuZGlzcGF0Y2hET01FdmVudChlbCwgJ2NoYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVUkuY2xlYXJJbml0aWFsVmFsdWUoZWwpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgZG9jdW1lbnRbaXNQcmVwYXJlZF0gPSBpc1ByZXBhcmVkO1xufVxuZnVuY3Rpb24gcHJlcGFyZUVsZW1lbnQoZWwpIHtcbiAgICBpZiAoZWxbaXNQcmVwYXJlZF0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKGVsLCBbXG4gICAgICAgICdpbnB1dCcsXG4gICAgICAgICd0ZXh0YXJlYSdcbiAgICBdKSkge1xuICAgICAgICBpbnRlcmNlcHRvci5wcmVwYXJlVmFsdWVJbnRlcmNlcHRvcihlbCk7XG4gICAgICAgIGludGVyY2VwdG9yLnByZXBhcmVTZWxlY3Rpb25JbnRlcmNlcHRvcihlbCk7XG4gICAgICAgIGludGVyY2VwdG9yLnByZXBhcmVSYW5nZVRleHRJbnRlcmNlcHRvcihlbCk7XG4gICAgfVxuICAgIGVsW2lzUHJlcGFyZWRdID0gaXNQcmVwYXJlZDtcbn1cblxuZXhwb3J0cy5wcmVwYXJlRG9jdW1lbnQgPSBwcmVwYXJlRG9jdW1lbnQ7XG4iXSwidmVyc2lvbiI6M30=