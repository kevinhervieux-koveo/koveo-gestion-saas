5bed23f865eeb48418d9ca6ca7e96b41
"use strict";
/**
 * Button Database Integration Tests
 * Tests that buttons actually persist data to the database correctly
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const drizzle_orm_1 = require("drizzle-orm");
const schema = __importStar(require("../../shared/schema"));
const { users, organizations, userOrganizations, buildings, residences, userResidences, documents, demands, commonSpaces, bookings, userBookingRestrictions, userTimeLimits, invitations } = schema;
(0, globals_1.describe)('Button Database Integration Tests', () => {
    let testUser;
    let testOrganization;
    let testBuilding;
    let testResidence;
    (0, globals_1.beforeEach)(async () => {
        // Create test user
        const [user] = await db_1.db.insert(users).values({
            username: 'test-button-user',
            email: 'test-button@test.com',
            password: 'hash',
            role: 'admin',
            firstName: 'Test',
            lastName: 'User',
            isActive: true,
        }).returning();
        testUser = user;
        // Create test organization
        const [org] = await db_1.db.insert(organizations).values({
            name: 'Test Organization',
            isActive: true,
        }).returning();
        testOrganization = org;
        // Link user to organization
        await db_1.db.insert(userOrganizations).values({
            userId: testUser.id,
            organizationId: testOrganization.id,
            isActive: true,
        });
        // Create test building
        const [building] = await db_1.db.insert(buildings).values({
            name: 'Test Building',
            address: '123 Test St',
            organizationId: testOrganization.id,
            isActive: true,
        }).returning();
        testBuilding = building;
        // Create test residence
        const [residence] = await db_1.db.insert(residences).values({
            unitNumber: '101',
            buildingId: testBuilding.id,
            isActive: true,
        }).returning();
        testResidence = residence;
        // Link user to residence
        await db_1.db.insert(userResidences).values({
            userId: testUser.id,
            residenceId: testResidence.id,
            isActive: true,
        });
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        if (testUser?.id) {
            await db_1.db.delete(userResidences).where((0, drizzle_orm_1.eq)(userResidences.userId, testUser.id));
            await db_1.db.delete(userOrganizations).where((0, drizzle_orm_1.eq)(userOrganizations.userId, testUser.id));
            await db_1.db.delete(demands).where((0, drizzle_orm_1.eq)(demands.userId, testUser.id));
            await db_1.db.delete(bookings).where((0, drizzle_orm_1.eq)(bookings.userId, testUser.id));
            await db_1.db.delete(userBookingRestrictions).where((0, drizzle_orm_1.eq)(userBookingRestrictions.userId, testUser.id));
            await db_1.db.delete(userTimeLimits).where((0, drizzle_orm_1.eq)(userTimeLimits.userId, testUser.id));
            await db_1.db.delete(invitations).where((0, drizzle_orm_1.eq)(invitations.email, testUser.email));
            await db_1.db.delete(users).where((0, drizzle_orm_1.eq)(users.id, testUser.id));
        }
        if (testResidence?.id) {
            await db_1.db.delete(residences).where((0, drizzle_orm_1.eq)(residences.id, testResidence.id));
        }
        if (testBuilding?.id) {
            await db_1.db.delete(commonSpaces).where((0, drizzle_orm_1.eq)(commonSpaces.buildingId, testBuilding.id));
            await db_1.db.delete(buildings).where((0, drizzle_orm_1.eq)(buildings.id, testBuilding.id));
        }
        if (testOrganization?.id) {
            await db_1.db.delete(organizations).where((0, drizzle_orm_1.eq)(organizations.id, testOrganization.id));
        }
    });
    (0, globals_1.describe)('Create Button Database Persistence', () => {
        (0, globals_1.it)('should persist new common space when create button is used', async () => {
            const spaceData = {
                name: 'Test Common Space',
                description: 'A space for testing',
                building_id: testBuilding.id,
                is_reservable: true,
                capacity: 50,
            };
            // Simulate button click creating a space
            const response = await fetch('/api/common-spaces', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(spaceData),
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify data was persisted to database
            const createdSpaces = await db_1.db
                .select()
                .from(commonSpaces)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(commonSpaces.name, spaceData.name), (0, drizzle_orm_1.eq)(commonSpaces.buildingId, testBuilding.id)));
            (0, globals_1.expect)(createdSpaces).toHaveLength(1);
            (0, globals_1.expect)(createdSpaces[0].name).toBe(spaceData.name);
            (0, globals_1.expect)(createdSpaces[0].description).toBe(spaceData.description);
            (0, globals_1.expect)(createdSpaces[0].capacity).toBe(spaceData.capacity);
        });
        (0, globals_1.it)('should persist new demand when create demand button is used', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Test demand description',
                assignationResidenceId: testResidence.id,
            };
            // Simulate button click creating a demand
            const response = await fetch('/api/demands', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(demandData),
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify data was persisted to database
            const createdDemands = await db_1.db
                .select()
                .from(demands)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(demands.title, demandData.title), (0, drizzle_orm_1.eq)(demands.userId, testUser.id)));
            (0, globals_1.expect)(createdDemands).toHaveLength(1);
            (0, globals_1.expect)(createdDemands[0].title).toBe(demandData.title);
            (0, globals_1.expect)(createdDemands[0].description).toBe(demandData.description);
            (0, globals_1.expect)(createdDemands[0].category).toBe(demandData.category);
            (0, globals_1.expect)(createdDemands[0].priority).toBe(demandData.priority);
        });
        (0, globals_1.it)('should persist new user invitation when invite button is used', async () => {
            const invitationData = {
                email: 'newuser@test.com',
                organizationId: testOrganization.id,
                role: 'resident',
            };
            // Simulate button click creating an invitation
            const response = await fetch('/api/users/invite', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(invitationData),
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify data was persisted to database
            const createdInvitations = await db_1.db
                .select()
                .from(invitations)
                .where((0, drizzle_orm_1.eq)(invitations.email, invitationData.email));
            (0, globals_1.expect)(createdInvitations).toHaveLength(1);
            (0, globals_1.expect)(createdInvitations[0].email).toBe(invitationData.email);
            (0, globals_1.expect)(createdInvitations[0].role).toBe(invitationData.role);
            (0, globals_1.expect)(createdInvitations[0].organizationId).toBe(testOrganization.id);
        });
    });
    (0, globals_1.describe)('Update Button Database Persistence', () => {
        (0, globals_1.it)('should update demand status when approve button is used', async () => {
            // Create a demand first
            const [demand] = await db_1.db.insert(demands).values({
                title: 'Test Demand for Approval',
                description: 'Test description',
                category: 'maintenance',
                priority: 'medium',
                status: 'pending',
                userId: testUser.id,
                residenceId: testResidence.id,
            }).returning();
            // Simulate approve button click
            const response = await fetch(`/api/demands/${demand.id}/approve`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify status was updated in database
            const updatedDemands = await db_1.db
                .select()
                .from(demands)
                .where((0, drizzle_orm_1.eq)(demands.id, demand.id));
            (0, globals_1.expect)(updatedDemands).toHaveLength(1);
            (0, globals_1.expect)(updatedDemands[0].status).toBe('approved');
        });
        (0, globals_1.it)('should update user restriction when block button is used', async () => {
            // Create a common space first
            const [space] = await db_1.db.insert(commonSpaces).values({
                name: 'Test Space for Blocking',
                buildingId: testBuilding.id,
                isReservable: true,
            }).returning();
            const restrictionData = {
                common_space_id: space.id,
                is_blocked: true,
                reason: 'Test blocking',
            };
            // Simulate block button click
            const response = await fetch(`/api/common-spaces/users/${testUser.id}/restrictions`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(restrictionData),
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify restriction was created in database
            const restrictions = await db_1.db
                .select()
                .from(userBookingRestrictions)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userBookingRestrictions.userId, testUser.id), (0, drizzle_orm_1.eq)(userBookingRestrictions.commonSpaceId, space.id)));
            (0, globals_1.expect)(restrictions).toHaveLength(1);
            (0, globals_1.expect)(restrictions[0].isBlocked).toBe(true);
            (0, globals_1.expect)(restrictions[0].reason).toBe('Test blocking');
        });
        (0, globals_1.it)('should update time limit when time limit button is used', async () => {
            const timeLimitData = {
                user_id: testUser.id,
                limit_type: 'monthly',
                limit_hours: 10,
            };
            // Simulate time limit button click
            const response = await fetch(`/api/common-spaces/users/${testUser.id}/time-limits`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(timeLimitData),
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify time limit was created in database
            const timeLimits = await db_1.db
                .select()
                .from(userTimeLimits)
                .where((0, drizzle_orm_1.eq)(userTimeLimits.userId, testUser.id));
            (0, globals_1.expect)(timeLimits).toHaveLength(1);
            (0, globals_1.expect)(timeLimits[0].limitType).toBe('monthly');
            (0, globals_1.expect)(timeLimits[0].limitHours).toBe(10);
        });
    });
    (0, globals_1.describe)('Delete Button Database Persistence', () => {
        (0, globals_1.it)('should remove data when delete button is used', async () => {
            // Create an invitation first
            const [invitation] = await db_1.db.insert(invitations).values({
                email: 'delete-test@test.com',
                organizationId: testOrganization.id,
                role: 'resident',
                token: 'delete-test-token',
                expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now
            }).returning();
            // Simulate delete button click
            const response = await fetch(`/api/users/invitations/${invitation.id}`, {
                method: 'DELETE',
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify data was removed from database
            const remainingInvitations = await db_1.db
                .select()
                .from(invitations)
                .where((0, drizzle_orm_1.eq)(invitations.id, invitation.id));
            (0, globals_1.expect)(remainingInvitations).toHaveLength(0);
        });
        (0, globals_1.it)('should soft delete demand when reject button is used', async () => {
            // Create a demand first
            const [demand] = await db_1.db.insert(demands).values({
                title: 'Test Demand for Rejection',
                description: 'Test description',
                category: 'maintenance',
                priority: 'medium',
                status: 'pending',
                userId: testUser.id,
                residenceId: testResidence.id,
            }).returning();
            // Simulate reject button click
            const response = await fetch(`/api/demands/${demand.id}/reject`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify status was updated to rejected (soft delete)
            const updatedDemands = await db_1.db
                .select()
                .from(demands)
                .where((0, drizzle_orm_1.eq)(demands.id, demand.id));
            (0, globals_1.expect)(updatedDemands).toHaveLength(1);
            (0, globals_1.expect)(updatedDemands[0].status).toBe('rejected');
        });
    });
    (0, globals_1.describe)('Save Button Database Persistence', () => {
        (0, globals_1.it)('should persist user residence assignments when save button is used', async () => {
            // Create another residence for assignment
            const [newResidence] = await db_1.db.insert(residences).values({
                unitNumber: '102',
                buildingId: testBuilding.id,
                isActive: true,
            }).returning();
            const assignmentData = {
                residenceIds: [testResidence.id, newResidence.id],
            };
            // Simulate save button click for residence assignments
            const response = await fetch(`/api/users/${testUser.id}/residences`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(assignmentData),
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify assignments were persisted to database
            const assignments = await db_1.db
                .select()
                .from(userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userResidences.userId, testUser.id), (0, drizzle_orm_1.eq)(userResidences.isActive, true)));
            (0, globals_1.expect)(assignments).toHaveLength(2);
            const residenceIds = assignments.map(a => a.residenceId);
            (0, globals_1.expect)(residenceIds).toContain(testResidence.id);
            (0, globals_1.expect)(residenceIds).toContain(newResidence.id);
        });
    });
    (0, globals_1.describe)('Complex Button Workflow Database Persistence', () => {
        (0, globals_1.it)('should handle complete CRUD workflow with database persistence', async () => {
            // 1. Create a common space
            const spaceData = {
                name: 'Workflow Test Space',
                description: 'Testing complete workflow',
                building_id: testBuilding.id,
                is_reservable: true,
                capacity: 25,
            };
            const createResponse = await fetch('/api/common-spaces', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(spaceData),
            });
            (0, globals_1.expect)(createResponse.ok).toBe(true);
            // Verify creation in database
            const [createdSpace] = await db_1.db
                .select()
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.name, spaceData.name));
            (0, globals_1.expect)(createdSpace).toBeDefined();
            // 2. Update the space
            const updateData = {
                name: 'Updated Workflow Space',
                capacity: 30,
            };
            const updateResponse = await fetch(`/api/common-spaces/${createdSpace.id}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updateData),
            });
            (0, globals_1.expect)(updateResponse.ok).toBe(true);
            // Verify update in database
            const [updatedSpace] = await db_1.db
                .select()
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.id, createdSpace.id));
            (0, globals_1.expect)(updatedSpace.name).toBe(updateData.name);
            (0, globals_1.expect)(updatedSpace.capacity).toBe(updateData.capacity);
            // 3. Create a booking for the space
            const bookingData = {
                start_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow
                end_time: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(), // Tomorrow + 1 hour
            };
            const bookingResponse = await fetch(`/api/common-spaces/${createdSpace.id}/bookings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bookingData),
            });
            (0, globals_1.expect)(bookingResponse.ok).toBe(true);
            // Verify booking in database
            const createdBookings = await db_1.db
                .select()
                .from(bookings)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(bookings.commonSpaceId, createdSpace.id), (0, drizzle_orm_1.eq)(bookings.userId, testUser.id)));
            (0, globals_1.expect)(createdBookings).toHaveLength(1);
            (0, globals_1.expect)(createdBookings[0].status).toBe('confirmed');
            // 4. Cancel the booking (delete operation)
            const deleteResponse = await fetch(`/api/common-spaces/bookings/${createdBookings[0].id}`, {
                method: 'DELETE',
            });
            (0, globals_1.expect)(deleteResponse.ok).toBe(true);
            // Verify booking was cancelled in database
            const [cancelledBooking] = await db_1.db
                .select()
                .from(bookings)
                .where((0, drizzle_orm_1.eq)(bookings.id, createdBookings[0].id));
            (0, globals_1.expect)(cancelledBooking.status).toBe('cancelled');
        });
    });
    (0, globals_1.describe)('Data Integrity and Validation', () => {
        (0, globals_1.it)('should maintain foreign key relationships when buttons create related data', async () => {
            // Create a demand with proper relationships
            const demandData = {
                title: 'Relationship Test Demand',
                description: 'Testing foreign key relationships',
                category: 'maintenance',
                priority: 'high',
                residenceId: testResidence.id,
            };
            const response = await fetch('/api/demands', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(demandData),
            });
            (0, globals_1.expect)(response.ok).toBe(true);
            // Verify relationships are maintained
            const demandWithRelations = await db_1.db
                .select({
                demand: demands,
                user: users,
                residence: residences,
                building: buildings,
            })
                .from(demands)
                .innerJoin(users, (0, drizzle_orm_1.eq)(demands.userId, users.id))
                .innerJoin(residences, (0, drizzle_orm_1.eq)(demands.residenceId, residences.id))
                .innerJoin(buildings, (0, drizzle_orm_1.eq)(residences.buildingId, buildings.id))
                .where((0, drizzle_orm_1.eq)(demands.title, demandData.title));
            (0, globals_1.expect)(demandWithRelations).toHaveLength(1);
            (0, globals_1.expect)(demandWithRelations[0].user.id).toBe(testUser.id);
            (0, globals_1.expect)(demandWithRelations[0].residence.id).toBe(testResidence.id);
            (0, globals_1.expect)(demandWithRelations[0].building.id).toBe(testBuilding.id);
        });
        (0, globals_1.it)('should validate data constraints when buttons attempt invalid operations', async () => {
            // Try to create a common space with invalid building ID
            const invalidSpaceData = {
                name: 'Invalid Space',
                building_id: '00000000-0000-0000-0000-000000000000', // Non-existent building
                is_reservable: true,
            };
            const response = await fetch('/api/common-spaces', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(invalidSpaceData),
            });
            (0, globals_1.expect)(response.ok).toBe(false);
            // Verify no invalid data was created
            const invalidSpaces = await db_1.db
                .select()
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.name, invalidSpaceData.name));
            (0, globals_1.expect)(invalidSpaces).toHaveLength(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,