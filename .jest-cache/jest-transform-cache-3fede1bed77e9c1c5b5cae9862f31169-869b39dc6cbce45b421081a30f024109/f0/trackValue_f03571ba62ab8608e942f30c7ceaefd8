f5e2360911916afe1d51a587affa66db
'use strict';
require('../utils/dataTransfer/Clipboard.js');
var getWindow = require('../utils/misc/getWindow.js');
var UI = require('./UI.js');
const TrackChanges = Symbol('Track programmatic changes for React workaround');
// When the input event happens in the browser, React executes all event handlers
// and if they change state of a controlled value, nothing happens.
// But when we trigger the event handlers in test environment with React@17,
// the changes are rolled back before the state update is applied.
// This results in a reset cursor.
// There might be a better way to work around if we figure out
// why the batched update is executed differently in our test environment.
function isReact17Element(element) {
    return Object.getOwnPropertyNames(element).some((k) => k.startsWith('__react')) && getWindow.getWindow(element).REACT_VERSION === 17;
}
function startTrackValue(element) {
    if (!isReact17Element(element)) {
        return;
    }
    element[TrackChanges] = {
        previousValue: String(element.value),
        tracked: []
    };
}
function trackOrSetValue(element, v) {
    var _element_TrackChanges_tracked, _element_TrackChanges;
    (_element_TrackChanges = element[TrackChanges]) === null || _element_TrackChanges === undefined ? undefined : (_element_TrackChanges_tracked = _element_TrackChanges.tracked) === null || _element_TrackChanges_tracked === undefined ? undefined : _element_TrackChanges_tracked.push(v);
    if (!element[TrackChanges]) {
        UI.setUIValueClean(element);
        UI.setUISelection(element, {
            focusOffset: v.length
        });
    }
}
function commitValueAfterInput(element, cursorOffset) {
    var _changes_tracked;
    const changes = element[TrackChanges];
    element[TrackChanges] = undefined;
    if (!(changes === null || changes === undefined ? undefined : (_changes_tracked = changes.tracked) === null || _changes_tracked === undefined ? undefined : _changes_tracked.length)) {
        return;
    }
    const isJustReactStateUpdate = changes.tracked.length === 2 && changes.tracked[0] === changes.previousValue && changes.tracked[1] === element.value;
    if (!isJustReactStateUpdate) {
        UI.setUIValueClean(element);
    }
    if (UI.hasUISelection(element)) {
        UI.setUISelection(element, {
            focusOffset: isJustReactStateUpdate ? cursorOffset : element.value.length
        });
    }
}
exports.commitValueAfterInput = commitValueAfterInput;
exports.startTrackValue = startTrackValue;
exports.trackOrSetValue = trackOrSetValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2RvY3VtZW50L3RyYWNrVmFsdWUuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsT0FBTyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7QUFDOUMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDdEQsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTVCLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0FBQy9FLGlGQUFpRjtBQUNqRixtRUFBbUU7QUFDbkUsNEVBQTRFO0FBQzVFLGtFQUFrRTtBQUNsRSxrQ0FBa0M7QUFDbEMsOERBQThEO0FBQzlELDBFQUEwRTtBQUMxRSxTQUFTLGdCQUFnQixDQUFDLE9BQU87SUFDN0IsT0FBTyxNQUFNLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxhQUFhLEtBQUssRUFBRSxDQUFDO0FBQ3ZJLENBQUM7QUFDRCxTQUFTLGVBQWUsQ0FBQyxPQUFPO0lBQzVCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQzdCLE9BQU87SUFDWCxDQUFDO0lBQ0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHO1FBQ3BCLGFBQWEsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUNwQyxPQUFPLEVBQUUsRUFBRTtLQUNkLENBQUM7QUFDTixDQUFDO0FBQ0QsU0FBUyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0IsSUFBSSw2QkFBNkIsRUFBRSxxQkFBcUIsQ0FBQztJQUN6RCxDQUFDLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxxQkFBcUIsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksNkJBQTZCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxUixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7UUFDekIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRTtZQUN2QixXQUFXLEVBQUUsQ0FBQyxDQUFDLE1BQU07U0FDeEIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztBQUNMLENBQUM7QUFDRCxTQUFTLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxZQUFZO0lBQ2hELElBQUksZ0JBQWdCLENBQUM7SUFDckIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDbEMsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxnQkFBZ0IsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNuTCxPQUFPO0lBQ1gsQ0FBQztJQUNELE1BQU0sc0JBQXNCLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDLGFBQWEsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDcEosSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDMUIsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDN0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUU7WUFDdkIsV0FBVyxFQUFFLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTTtTQUM1RSxDQUFDLENBQUM7SUFDUCxDQUFDO0FBQ0wsQ0FBQztBQUVELE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUMxQyxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQvZGlzdC9janMvZG9jdW1lbnQvdHJhY2tWYWx1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4uL3V0aWxzL2RhdGFUcmFuc2Zlci9DbGlwYm9hcmQuanMnKTtcbnZhciBnZXRXaW5kb3cgPSByZXF1aXJlKCcuLi91dGlscy9taXNjL2dldFdpbmRvdy5qcycpO1xudmFyIFVJID0gcmVxdWlyZSgnLi9VSS5qcycpO1xuXG5jb25zdCBUcmFja0NoYW5nZXMgPSBTeW1ib2woJ1RyYWNrIHByb2dyYW1tYXRpYyBjaGFuZ2VzIGZvciBSZWFjdCB3b3JrYXJvdW5kJyk7XG4vLyBXaGVuIHRoZSBpbnB1dCBldmVudCBoYXBwZW5zIGluIHRoZSBicm93c2VyLCBSZWFjdCBleGVjdXRlcyBhbGwgZXZlbnQgaGFuZGxlcnNcbi8vIGFuZCBpZiB0aGV5IGNoYW5nZSBzdGF0ZSBvZiBhIGNvbnRyb2xsZWQgdmFsdWUsIG5vdGhpbmcgaGFwcGVucy5cbi8vIEJ1dCB3aGVuIHdlIHRyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXJzIGluIHRlc3QgZW52aXJvbm1lbnQgd2l0aCBSZWFjdEAxNyxcbi8vIHRoZSBjaGFuZ2VzIGFyZSByb2xsZWQgYmFjayBiZWZvcmUgdGhlIHN0YXRlIHVwZGF0ZSBpcyBhcHBsaWVkLlxuLy8gVGhpcyByZXN1bHRzIGluIGEgcmVzZXQgY3Vyc29yLlxuLy8gVGhlcmUgbWlnaHQgYmUgYSBiZXR0ZXIgd2F5IHRvIHdvcmsgYXJvdW5kIGlmIHdlIGZpZ3VyZSBvdXRcbi8vIHdoeSB0aGUgYmF0Y2hlZCB1cGRhdGUgaXMgZXhlY3V0ZWQgZGlmZmVyZW50bHkgaW4gb3VyIHRlc3QgZW52aXJvbm1lbnQuXG5mdW5jdGlvbiBpc1JlYWN0MTdFbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZWxlbWVudCkuc29tZSgoayk9Pmsuc3RhcnRzV2l0aCgnX19yZWFjdCcpKSAmJiBnZXRXaW5kb3cuZ2V0V2luZG93KGVsZW1lbnQpLlJFQUNUX1ZFUlNJT04gPT09IDE3O1xufVxuZnVuY3Rpb24gc3RhcnRUcmFja1ZhbHVlKGVsZW1lbnQpIHtcbiAgICBpZiAoIWlzUmVhY3QxN0VsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbGVtZW50W1RyYWNrQ2hhbmdlc10gPSB7XG4gICAgICAgIHByZXZpb3VzVmFsdWU6IFN0cmluZyhlbGVtZW50LnZhbHVlKSxcbiAgICAgICAgdHJhY2tlZDogW11cbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhY2tPclNldFZhbHVlKGVsZW1lbnQsIHYpIHtcbiAgICB2YXIgX2VsZW1lbnRfVHJhY2tDaGFuZ2VzX3RyYWNrZWQsIF9lbGVtZW50X1RyYWNrQ2hhbmdlcztcbiAgICAoX2VsZW1lbnRfVHJhY2tDaGFuZ2VzID0gZWxlbWVudFtUcmFja0NoYW5nZXNdKSA9PT0gbnVsbCB8fCBfZWxlbWVudF9UcmFja0NoYW5nZXMgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IChfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZCA9IF9lbGVtZW50X1RyYWNrQ2hhbmdlcy50cmFja2VkKSA9PT0gbnVsbCB8fCBfZWxlbWVudF9UcmFja0NoYW5nZXNfdHJhY2tlZCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX2VsZW1lbnRfVHJhY2tDaGFuZ2VzX3RyYWNrZWQucHVzaCh2KTtcbiAgICBpZiAoIWVsZW1lbnRbVHJhY2tDaGFuZ2VzXSkge1xuICAgICAgICBVSS5zZXRVSVZhbHVlQ2xlYW4oZWxlbWVudCk7XG4gICAgICAgIFVJLnNldFVJU2VsZWN0aW9uKGVsZW1lbnQsIHtcbiAgICAgICAgICAgIGZvY3VzT2Zmc2V0OiB2Lmxlbmd0aFxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21taXRWYWx1ZUFmdGVySW5wdXQoZWxlbWVudCwgY3Vyc29yT2Zmc2V0KSB7XG4gICAgdmFyIF9jaGFuZ2VzX3RyYWNrZWQ7XG4gICAgY29uc3QgY2hhbmdlcyA9IGVsZW1lbnRbVHJhY2tDaGFuZ2VzXTtcbiAgICBlbGVtZW50W1RyYWNrQ2hhbmdlc10gPSB1bmRlZmluZWQ7XG4gICAgaWYgKCEoY2hhbmdlcyA9PT0gbnVsbCB8fCBjaGFuZ2VzID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAoX2NoYW5nZXNfdHJhY2tlZCA9IGNoYW5nZXMudHJhY2tlZCkgPT09IG51bGwgfHwgX2NoYW5nZXNfdHJhY2tlZCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX2NoYW5nZXNfdHJhY2tlZC5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNKdXN0UmVhY3RTdGF0ZVVwZGF0ZSA9IGNoYW5nZXMudHJhY2tlZC5sZW5ndGggPT09IDIgJiYgY2hhbmdlcy50cmFja2VkWzBdID09PSBjaGFuZ2VzLnByZXZpb3VzVmFsdWUgJiYgY2hhbmdlcy50cmFja2VkWzFdID09PSBlbGVtZW50LnZhbHVlO1xuICAgIGlmICghaXNKdXN0UmVhY3RTdGF0ZVVwZGF0ZSkge1xuICAgICAgICBVSS5zZXRVSVZhbHVlQ2xlYW4oZWxlbWVudCk7XG4gICAgfVxuICAgIGlmIChVSS5oYXNVSVNlbGVjdGlvbihlbGVtZW50KSkge1xuICAgICAgICBVSS5zZXRVSVNlbGVjdGlvbihlbGVtZW50LCB7XG4gICAgICAgICAgICBmb2N1c09mZnNldDogaXNKdXN0UmVhY3RTdGF0ZVVwZGF0ZSA/IGN1cnNvck9mZnNldCA6IGVsZW1lbnQudmFsdWUubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0cy5jb21taXRWYWx1ZUFmdGVySW5wdXQgPSBjb21taXRWYWx1ZUFmdGVySW5wdXQ7XG5leHBvcnRzLnN0YXJ0VHJhY2tWYWx1ZSA9IHN0YXJ0VHJhY2tWYWx1ZTtcbmV4cG9ydHMudHJhY2tPclNldFZhbHVlID0gdHJhY2tPclNldFZhbHVlO1xuIl0sInZlcnNpb24iOjN9