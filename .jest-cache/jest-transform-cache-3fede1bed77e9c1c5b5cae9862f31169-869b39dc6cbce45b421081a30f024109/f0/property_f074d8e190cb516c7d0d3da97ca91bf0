24dab72cb5a9e59f3abc2a367a100362
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertUserTimeLimitSchema = exports.insertUserBookingRestrictionSchema = exports.insertBookingSchema = exports.insertCommonSpaceSchema = exports.insertContactSchema = exports.insertUserResidenceSchema = exports.insertResidenceSchema = exports.insertBuildingSchema = exports.userTimeLimits = exports.userBookingRestrictions = exports.bookings = exports.commonSpaces = exports.contacts = exports.userResidences = exports.residences = exports.buildings = exports.bookingStatusEnum = exports.contactCategoryEnum = exports.contactEntityEnum = exports.buildingTypeEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const core_1 = require("./core");
// Property enums
exports.buildingTypeEnum = (0, pg_core_1.pgEnum)('building_type', ['apartment', 'condo', 'rental']);
exports.contactEntityEnum = (0, pg_core_1.pgEnum)('contact_entity', [
    'organization',
    'building',
    'residence',
]);
exports.contactCategoryEnum = (0, pg_core_1.pgEnum)('contact_category', [
    'resident',
    'manager',
    'tenant',
    'maintenance',
    'emergency',
    'other',
]);
exports.bookingStatusEnum = (0, pg_core_1.pgEnum)('booking_status', ['confirmed', 'cancelled']);
// Property tables
/**
 * Buildings table storing properties managed by organizations.
 * Each building represents a distinct property managed by an organization.
 */
exports.buildings = (0, pg_core_1.pgTable)('buildings', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    organizationId: (0, pg_core_1.varchar)('organization_id')
        .notNull()
        .references(() => core_1.organizations.id, { onDelete: 'cascade' }),
    name: (0, pg_core_1.text)('name').notNull(),
    address: (0, pg_core_1.text)('address').notNull(),
    city: (0, pg_core_1.text)('city').notNull(),
    province: (0, pg_core_1.text)('province').notNull().default('QC'),
    postalCode: (0, pg_core_1.text)('postal_code').notNull(),
    buildingType: (0, exports.buildingTypeEnum)('building_type').notNull(),
    yearBuilt: (0, pg_core_1.integer)('year_built'),
    totalUnits: (0, pg_core_1.integer)('total_units').notNull(),
    totalFloors: (0, pg_core_1.integer)('total_floors'),
    parkingSpaces: (0, pg_core_1.integer)('parking_spaces'),
    storageSpaces: (0, pg_core_1.integer)('storage_spaces'),
    amenities: (0, pg_core_1.jsonb)('amenities'), // Array of amenities
    managementCompany: (0, pg_core_1.text)('management_company'),
    bankAccountNumber: (0, pg_core_1.text)('bank_account_number'),
    bankAccountNotes: (0, pg_core_1.text)('bank_account_notes'), // For reconciliation notes when updating account number
    bankAccountUpdatedAt: (0, pg_core_1.timestamp)('bank_account_updated_at'),
    bankAccountStartDate: (0, pg_core_1.timestamp)('bank_account_start_date'), // Date when account started tracking
    bankAccountStartAmount: (0, pg_core_1.numeric)('bank_account_start_amount', { precision: 10, scale: 2 }), // Starting balance
    bankAccountMinimums: (0, pg_core_1.text)('bank_account_minimums'), // JSON string of minimum balance settings
    inflationSettings: (0, pg_core_1.text)('inflation_settings'), // JSON string of inflation configuration by category
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Residences table storing individual housing units within buildings.
 * Represents apartments, condos, or units that can be occupied by tenants.
 */
exports.residences = (0, pg_core_1.pgTable)('residences', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    buildingId: (0, pg_core_1.varchar)('building_id')
        .notNull()
        .references(() => exports.buildings.id, { onDelete: 'cascade' }),
    unitNumber: (0, pg_core_1.text)('unit_number').notNull(),
    floor: (0, pg_core_1.integer)('floor'),
    squareFootage: (0, pg_core_1.decimal)('square_footage', { precision: 8, scale: 2 }),
    bedrooms: (0, pg_core_1.integer)('bedrooms'),
    bathrooms: (0, pg_core_1.decimal)('bathrooms', { precision: 3, scale: 1 }),
    balcony: (0, pg_core_1.boolean)('balcony').default(false),
    parkingSpaceNumbers: (0, pg_core_1.text)('parking_space_numbers').array(),
    storageSpaceNumbers: (0, pg_core_1.text)('storage_space_numbers').array(),
    ownershipPercentage: (0, pg_core_1.decimal)('ownership_percentage', { precision: 5, scale: 2 }), // For condos, 0-100 scale
    monthlyFees: (0, pg_core_1.decimal)('monthly_fees', { precision: 10, scale: 2 }),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * User-Residence relationship table to track user assignments to residences.
 * Supports owner, tenant, and occupant relationships with date ranges.
 */
exports.userResidences = (0, pg_core_1.pgTable)('user_residences', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => core_1.users.id, { onDelete: 'cascade' }),
    residenceId: (0, pg_core_1.varchar)('residence_id')
        .notNull()
        .references(() => exports.residences.id, { onDelete: 'cascade' }),
    relationshipType: (0, pg_core_1.text)('relationship_type').notNull(), // 'owner', 'tenant', 'occupant'
    startDate: (0, pg_core_1.date)('start_date').notNull(),
    endDate: (0, pg_core_1.date)('end_date'),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Contacts table storing contact information for organizations, buildings, and residences.
 * Allows tracking various types of contacts like residents, managers, tenants, maintenance, etc.
 */
exports.contacts = (0, pg_core_1.pgTable)('contacts', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)('name').notNull(),
    email: (0, pg_core_1.text)('email'),
    phone: (0, pg_core_1.text)('phone'),
    entity: (0, exports.contactEntityEnum)('entity').notNull(),
    entityId: (0, pg_core_1.varchar)('entity_id').notNull(),
    contactCategory: (0, exports.contactCategoryEnum)('contact_category').notNull(),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Common spaces table storing shared facilities within buildings.
 * Represents spaces like gyms, lounges, meeting rooms that can be reserved by residents.
 */
exports.commonSpaces = (0, pg_core_1.pgTable)('common_spaces', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.varchar)('name', { length: 255 }).notNull(),
    description: (0, pg_core_1.text)('description'),
    buildingId: (0, pg_core_1.varchar)('building_id')
        .notNull()
        .references(() => exports.buildings.id, { onDelete: 'cascade' }),
    isReservable: (0, pg_core_1.boolean)('is_reservable').notNull().default(false),
    capacity: (0, pg_core_1.integer)('capacity'),
    contactPersonId: (0, pg_core_1.varchar)('contact_person_id').references(() => core_1.users.id, { onDelete: 'set null' }),
    openingHours: (0, pg_core_1.jsonb)('opening_hours'), // Enhanced structure with isOpen, breaks
    availableDays: (0, pg_core_1.jsonb)('available_days'), // Array of available days: ['monday', 'tuesday', etc.]
    unavailablePeriods: (0, pg_core_1.jsonb)('unavailable_periods'), // Specific periods when space is unavailable
    bookingRules: (0, pg_core_1.text)('booking_rules'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Bookings table for common space reservations.
 * Tracks user reservations for common spaces with time slots and status.
 */
exports.bookings = (0, pg_core_1.pgTable)('bookings', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    commonSpaceId: (0, pg_core_1.varchar)('common_space_id')
        .notNull()
        .references(() => exports.commonSpaces.id, { onDelete: 'cascade' }),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => core_1.users.id, { onDelete: 'cascade' }),
    startTime: (0, pg_core_1.timestamp)('start_time', { withTimezone: true }).notNull(),
    endTime: (0, pg_core_1.timestamp)('end_time', { withTimezone: true }).notNull(),
    status: (0, exports.bookingStatusEnum)('status').notNull().default('confirmed'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * User booking restrictions table to manage blocked users.
 * Allows administrators to block specific users from booking certain common spaces.
 */
exports.userBookingRestrictions = (0, pg_core_1.pgTable)('user_booking_restrictions', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => core_1.users.id, { onDelete: 'cascade' }),
    commonSpaceId: (0, pg_core_1.varchar)('common_space_id')
        .notNull()
        .references(() => exports.commonSpaces.id, { onDelete: 'cascade' }),
    isBlocked: (0, pg_core_1.boolean)('is_blocked').notNull().default(true),
    reason: (0, pg_core_1.text)('reason'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * User time limits table to manage booking time quotas.
 * Allows setting monthly/yearly limits on how much time users can reserve.
 */
exports.userTimeLimits = (0, pg_core_1.pgTable)('user_time_limits', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => core_1.users.id, { onDelete: 'cascade' }),
    commonSpaceId: (0, pg_core_1.varchar)('common_space_id').references(() => exports.commonSpaces.id, { onDelete: 'cascade' }), // null means applies to all spaces
    limitType: (0, pg_core_1.varchar)('limit_type', { length: 20 }).notNull(), // 'monthly' or 'yearly'
    limitHours: (0, pg_core_1.integer)('limit_hours').notNull(), // Maximum hours allowed
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
// Insert schemas
exports.insertBuildingSchema = zod_1.z.object({
    organizationId: zod_1.z.string().uuid(),
    name: zod_1.z.string().min(1),
    address: zod_1.z.string(),
    city: zod_1.z.string(),
    province: zod_1.z.string().default('QC'),
    postalCode: zod_1.z.string(),
    buildingType: zod_1.z.string(),
    yearBuilt: zod_1.z.number().int().optional(),
    totalUnits: zod_1.z.number().int().optional(),
    totalFloors: zod_1.z.number().int().optional(),
    parkingSpaces: zod_1.z.number().int().optional(),
    storageSpaces: zod_1.z.number().int().optional(),
    amenities: zod_1.z.array(zod_1.z.string()).optional(),
    managementCompany: zod_1.z.string().optional(),
    bankAccountNumber: zod_1.z.string().optional(),
    bankAccountNotes: zod_1.z.string().optional(),
    bankAccountStartDate: zod_1.z.date().optional(),
    bankAccountStartAmount: zod_1.z.number().optional(),
    bankAccountMinimums: zod_1.z.record(zod_1.z.string(), zod_1.z.number()).optional(),
});
exports.insertResidenceSchema = zod_1.z.object({
    buildingId: zod_1.z.string().uuid(),
    unitNumber: zod_1.z.string(),
    floor: zod_1.z.number().int().optional(),
    squareFootage: zod_1.z.number().optional(),
    bedrooms: zod_1.z.number().int().optional(),
    bathrooms: zod_1.z.number().optional(),
    balcony: zod_1.z.boolean().optional(),
    parkingSpaceNumbers: zod_1.z.array(zod_1.z.string()).optional(),
    storageSpaceNumbers: zod_1.z.array(zod_1.z.string()).optional(),
    ownershipPercentage: zod_1.z.number().optional(),
    monthlyFees: zod_1.z.number().optional(),
});
exports.insertUserResidenceSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    residenceId: zod_1.z.string().uuid(),
    relationshipType: zod_1.z.string(),
    startDate: zod_1.z.date(),
    endDate: zod_1.z.date().optional(),
});
exports.insertContactSchema = zod_1.z.object({
    name: zod_1.z.string(),
    email: zod_1.z.string().email().optional(),
    phone: zod_1.z.string().optional(),
    entity: zod_1.z.string(),
    entityId: zod_1.z.string().uuid(),
    contactCategory: zod_1.z.string(),
});
exports.insertCommonSpaceSchema = zod_1.z.object({
    name: zod_1.z.string().min(1).max(255),
    description: zod_1.z.string().optional(),
    buildingId: zod_1.z.string().uuid(),
    isReservable: zod_1.z.boolean().default(false),
    capacity: zod_1.z.number().int().optional(),
    contactPersonId: zod_1.z.string().uuid().optional(),
    openingHours: zod_1.z
        .array(zod_1.z.object({
        day: zod_1.z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']),
        open: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
        close: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
        isOpen: zod_1.z.boolean().default(true), // Whether the space is open on this day
        breaks: zod_1.z.array(zod_1.z.object({
            start: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
            end: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
            reason: zod_1.z.string().optional(), // e.g., "Cleaning", "Maintenance"
        })).optional(), // Optional breaks within opening hours (like lunch breaks)
    }))
        .optional(),
    availableDays: zod_1.z
        .array(zod_1.z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']))
        .optional(),
    unavailablePeriods: zod_1.z.array(zod_1.z.object({
        startDate: zod_1.z.string().datetime(),
        endDate: zod_1.z.string().datetime(),
        reason: zod_1.z.string().optional(), // e.g., "Renovation", "Maintenance", "Holiday closure"
        recurrence: zod_1.z.enum(['none', 'weekly', 'monthly', 'yearly']).default('none'),
    })).optional(), // Specific periods when space is unavailable
    bookingRules: zod_1.z.string().optional(),
});
exports.insertBookingSchema = zod_1.z.object({
    commonSpaceId: zod_1.z.string().uuid(),
    userId: zod_1.z.string().uuid(),
    startTime: zod_1.z.date(),
    endTime: zod_1.z.date(),
    status: zod_1.z.enum(['confirmed', 'cancelled']).default('confirmed'),
});
exports.insertUserBookingRestrictionSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    commonSpaceId: zod_1.z.string().uuid(),
    isBlocked: zod_1.z.boolean().default(true),
    reason: zod_1.z.string().optional(),
});
exports.insertUserTimeLimitSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    commonSpaceId: zod_1.z.string().uuid().optional(), // null means applies to all spaces
    limitType: zod_1.z.enum(['monthly', 'yearly']),
    limitHours: zod_1.z.number().int().min(1).max(8760), // Max 1 year worth of hours
});
// Relations - Temporarily commented out due to drizzle-orm version compatibility
/*
export const buildingsRelations = relations(buildings, ({ one, many }) => ({
  organization: one(organizations, {
    fields: [buildings.organizationId],
    references: [organizations.id],
  }),
  residences: many(residences),
}));
*/
/*
export const residencesRelations = relations(residences, ({ one, many }) => ({
  building: one(buildings, {
    fields: [residences.buildingId],
    references: [buildings.id],
  }),
  userResidences: many(userResidences),
}));
*/
/*
export const userResidencesRelations = relations(userResidences, ({ one }) => ({
  user: one(users, {
    fields: [userResidences.userId],
    references: [users.id],
  }),
  residence: one(residences, {
    fields: [userResidences.residenceId],
    references: [residences.id],
  }),
}));
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,