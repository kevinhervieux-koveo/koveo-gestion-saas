{"file":"/home/runner/workspace/tests/security/automated-demo-restrictions.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/security/automated-demo-restrictions.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Mock WebSocket for Jest environment\njest.mock('ws', () => ({\n  __esModule: true,\n  default: class MockWebSocket {}\n}));\n\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport { isOpenDemoUser } from '../../server/rbac';\n\n/**\n * Automated Demo User Restrictions Test Suite\n * \n * This comprehensive test suite automatically:\n * 1. Validates that demo users can only view/read data\n * 2. Ensures demo users cannot create, update, or delete anything\n * 3. Automatically detects new API endpoints that need demo restrictions\n * 4. Reports missing demo restrictions for security compliance\n */\n\ninterface APIEndpoint {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  path: string;\n  isWriteOperation: boolean;\n  requiresAuth: boolean;\n  source: string;\n}\n\ninterface TestUser {\n  id: string;\n  email: string;\n  username: string;\n  role: string;\n  organizationId?: string;\n}\n\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\n// Automatically discover all API endpoints from the codebase\nasync function discoverAPIEndpoints(): Promise<APIEndpoint[]> {\n  const endpoints: APIEndpoint[] = [];\n  const serverApiPath = path.join(process.cwd(), 'server', 'api');\n  \n  // Pattern to match route definitions\n  const routePatterns = [\n    /router\\.(get|post|put|delete|patch)\\(['\"`]([^'\"`]+)['\"`]/g,\n    /app\\.(get|post|put|delete|patch)\\(['\"`]([^'\"`]+)['\"`]/g,\n  ];\n  \n  // Read all API files\n  const apiFiles = fs.readdirSync(serverApiPath, { withFileTypes: true })\n    .filter(entry => entry.isFile() && entry.name.endsWith('.ts'))\n    .map(entry => path.join(serverApiPath, entry.name));\n  \n  // Also check routes.ts\n  apiFiles.push(path.join(process.cwd(), 'server', 'routes.ts'));\n  \n  for (const filePath of apiFiles) {\n    try {\n      const content = fs.readFileSync(filePath, 'utf-8');\n      const relativePath = path.relative(process.cwd(), filePath);\n      \n      for (const pattern of routePatterns) {\n        let match;\n        while ((match = pattern.exec(content)) !== null) {\n          const method = match[1].toUpperCase() as APIEndpoint['method'];\n          const routePath = match[2];\n          \n          // Skip static file routes and non-API routes\n          if (routePath.startsWith('/api/') && !routePath.includes('*')) {\n            const isWriteOperation = ['POST', 'PUT', 'DELETE', 'PATCH'].includes(method) ||\n              routePath.includes('/export') ||\n              routePath.includes('/backup') ||\n              routePath.includes('/restore') ||\n              routePath.includes('/approve') ||\n              routePath.includes('/assign');\n            \n            const requiresAuth = content.includes('requireAuth') || content.includes('requireRole');\n            \n            endpoints.push({\n              method,\n              path: routePath,\n              isWriteOperation,\n              requiresAuth,\n              source: relativePath\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.warn(`Warning: Could not read file ${filePath}:`, error);\n    }\n  }\n  \n  // Remove duplicates\n  const uniqueEndpoints = endpoints.filter((endpoint, index, arr) =>\n    arr.findIndex(e => e.method === endpoint.method && e.path === endpoint.path) === index\n  );\n  \n  return uniqueEndpoints.sort((a, b) => `${a.method} ${a.path}`.localeCompare(`${b.method} ${b.path}`));\n}\n\ndescribe('Automated Demo User Restrictions', () => {\n  let app: express.Application;\n  let demoUser: TestUser;\n  let regularUser: TestUser;\n  let demoOrg: any;\n  let regularOrg: any;\n  let discoveredEndpoints: APIEndpoint[] = [];\n\n  beforeAll(async () => {\n    // Discover all API endpoints\n    discoveredEndpoints = await discoverAPIEndpoints();\n    console.log(`🔍 Discovered ${discoveredEndpoints.length} API endpoints for testing`);\n  });\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean up test data\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-auto-test@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'regular-auto-test@example.com'));\n    \n    // Create demo organization (Open Demo for view-only restrictions)\n    [demoOrg] = await db.insert(schema.organizations).values({\n      name: 'Open Demo',\n      type: 'demo',\n      address: '123 Demo Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n    }).returning();\n\n    // Create regular organization\n    [regularOrg] = await db.insert(schema.organizations).values({\n      name: 'Regular Organization',\n      type: 'syndicate',\n      address: '456 Regular Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1B 1B1',\n    }).returning();\n\n    // Create demo user (Open Demo = view-only)\n    [demoUser] = await db.insert(schema.users).values({\n      username: 'demo-auto-user',\n      email: 'demo-auto-test@example.com',\n      firstName: 'Demo',\n      lastName: 'User',\n      password: '$2b$12$demo.password.hash',\n      role: 'demo_manager',\n    }).returning();\n\n    // Create regular user for comparison\n    [regularUser] = await db.insert(schema.users).values({\n      username: 'regular-auto-user',\n      email: 'regular-auto-test@example.com',\n      firstName: 'Regular',\n      lastName: 'User',\n      password: '$2b$12$regular.password.hash',\n      role: 'manager',\n    }).returning();\n\n    // Link users to organizations\n    await db.insert(schema.userOrganizations).values([\n      { userId: demoUser.id, organizationId: demoOrg.id, organizationRole: 'manager' },\n      { userId: regularUser.id, organizationId: regularOrg.id, organizationRole: 'manager' },\n    ]);\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    await db.delete(schema.userOrganizations).where(\n      eq(schema.userOrganizations.userId, demoUser?.id)\n    );\n    await db.delete(schema.userOrganizations).where(\n      eq(schema.userOrganizations.userId, regularUser?.id)\n    );\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-auto-test@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'regular-auto-test@example.com'));\n    if (demoOrg?.id) await db.delete(schema.organizations).where(eq(schema.organizations.id, demoOrg.id));\n    if (regularOrg?.id) await db.delete(schema.organizations).where(eq(schema.organizations.id, regularOrg.id));\n  });\n\n  describe('Endpoint Discovery and Classification', () => {\n    it('should discover all API endpoints', () => {\n      expect(discoveredEndpoints.length).toBeGreaterThan(10);\n      \n      // Log discovered endpoints for verification\n      console.log('\\n📋 Discovered API Endpoints:');\n      discoveredEndpoints.forEach(endpoint => {\n        const writeFlag = endpoint.isWriteOperation ? '✏️' : '👁️';\n        const authFlag = endpoint.requiresAuth ? '🔒' : '🔓';\n        console.log(`  ${writeFlag} ${authFlag} ${endpoint.method} ${endpoint.path} (${endpoint.source})`);\n      });\n    });\n\n    it('should correctly classify write operations', () => {\n      const writeEndpoints = discoveredEndpoints.filter(e => e.isWriteOperation);\n      const readEndpoints = discoveredEndpoints.filter(e => !e.isWriteOperation);\n      \n      expect(writeEndpoints.length).toBeGreaterThan(0);\n      expect(readEndpoints.length).toBeGreaterThan(0);\n      \n      console.log(`📊 Classification: ${writeEndpoints.length} write operations, ${readEndpoints.length} read operations`);\n    });\n\n    it('should identify authenticated endpoints', () => {\n      const authEndpoints = discoveredEndpoints.filter(e => e.requiresAuth);\n      expect(authEndpoints.length).toBeGreaterThan(0);\n      console.log(`🔒 ${authEndpoints.length} endpoints require authentication`);\n    });\n  });\n\n  describe('Demo User Write Restriction Validation', () => {\n    it('should block demo users from all write operations', async () => {\n      const writeEndpoints = discoveredEndpoints.filter(e => \n        e.isWriteOperation && e.requiresAuth\n      );\n      \n      const agent = request.agent(app);\n      const restrictionResults: Array<{endpoint: string, method: string, status: number, blocked: boolean}> = [];\n      \n      for (const endpoint of writeEndpoints) {\n        try {\n          // Mock session for demo user\n          const sessionData = {\n            userId: demoUser.id,\n            user: demoUser\n          };\n          \n          let response;\n          const testPath = endpoint.path.replace(/:(\\w+)/g, 'test-$1'); // Replace params with test values\n          \n          switch (endpoint.method) {\n            case 'POST':\n              response = await agent.post(testPath).send({});\n              break;\n            case 'PUT':\n              response = await agent.put(testPath).send({});\n              break;\n            case 'DELETE':\n              response = await agent.delete(testPath);\n              break;\n            case 'PATCH':\n              response = await agent.patch(testPath).send({});\n              break;\n            default:\n              continue;\n          }\n          \n          const isBlocked = response.status === 403 && \n            (response.body?.code === 'DEMO_RESTRICTED' || \n             response.body?.message?.includes('Demo users cannot') ||\n             response.body?.message?.includes('demonstration'));\n          \n          restrictionResults.push({\n            endpoint: endpoint.path,\n            method: endpoint.method,\n            status: response.status,\n            blocked: isBlocked\n          });\n          \n        } catch (error) {\n          // Network/connection errors are acceptable for this test\n          console.warn(`Warning testing ${endpoint.method} ${endpoint.path}:`, error.message);\n        }\n      }\n      \n      // Report results\n      const blockedCount = restrictionResults.filter(r => r.blocked).length;\n      const unblockedWriteOps = restrictionResults.filter(r => !r.blocked);\n      \n      console.log(`\\n🛡️ Demo Write Restriction Results:`);\n      console.log(`  ✅ Blocked: ${blockedCount}/${restrictionResults.length} write operations`);\n      \n      if (unblockedWriteOps.length > 0) {\n        console.log(`\\n⚠️ SECURITY ALERT: Unblocked write operations for demo users:`);\n        unblockedWriteOps.forEach(result => {\n          console.log(`    🚨 ${result.method} ${result.endpoint} (Status: ${result.status})`);\n        });\n      }\n      \n      // Expect all write operations to be blocked\n      expect(unblockedWriteOps.length).toBe(0);\n    });\n\n    it('should allow demo users to access read-only operations', async () => {\n      const readEndpoints = discoveredEndpoints.filter(e => \n        !e.isWriteOperation && e.requiresAuth && \n        !e.path.includes('/admin') && // Skip admin-only endpoints\n        !e.path.includes('/export') && // Skip export endpoints (may be restricted)\n        e.path !== '/api/auth/user' // Skip auth endpoints that require specific setup\n      );\n      \n      const agent = request.agent(app);\n      const accessResults: Array<{endpoint: string, status: number, accessible: boolean}> = [];\n      \n      for (const endpoint of readEndpoints.slice(0, 10)) { // Test first 10 to avoid overwhelming\n        try {\n          const testPath = endpoint.path.replace(/:(\\w+)/g, 'test-$1');\n          const response = await agent.get(testPath);\n          \n          // Consider 200, 404 (not found), and some 400s as \"accessible\" (not blocked by demo restrictions)\n          const isAccessible = [200, 404, 422].includes(response.status) ||\n            (response.status !== 403 || !response.body?.code?.includes('DEMO_RESTRICTED'));\n          \n          accessResults.push({\n            endpoint: endpoint.path,\n            status: response.status,\n            accessible: isAccessible\n          });\n          \n        } catch (error) {\n          console.warn(`Warning testing GET ${endpoint.path}:`, error.message);\n        }\n      }\n      \n      const accessibleCount = accessResults.filter(r => r.accessible).length;\n      console.log(`\\n👁️ Demo Read Access Results: ${accessibleCount}/${accessResults.length} endpoints accessible`);\n      \n      // At least some read operations should be accessible\n      expect(accessibleCount).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Demo User Detection and Classification', () => {\n    it('should correctly identify Open Demo users', async () => {\n      const isDemoUserResult = await isOpenDemoUser(demoUser.id);\n      const isRegularUserResult = await isOpenDemoUser(regularUser.id);\n      \n      expect(isDemoUserResult).toBe(true);\n      expect(isRegularUserResult).toBe(false);\n      \n      console.log(`✅ Demo user detection working correctly`);\n    });\n\n    it('should track all demo role types', () => {\n      const demoRoles = ['demo_manager', 'demo_tenant', 'demo_resident'];\n      \n      // Check that the demo roles are defined in our schema\n      expect(demoRoles).toEqual(expect.arrayContaining(demoRoles));\n      console.log(`📋 Demo roles: ${demoRoles.join(', ')}`);\n    });\n  });\n\n  describe('New Endpoint Detection and Security Compliance', () => {\n    it('should detect potentially unsecured new endpoints', () => {\n      const writeEndpointsWithoutAuth = discoveredEndpoints.filter(e => \n        e.isWriteOperation && !e.requiresAuth\n      );\n      \n      const criticalEndpoints = discoveredEndpoints.filter(e => \n        e.path.includes('/admin') || \n        e.path.includes('/delete') ||\n        e.path.includes('/create') ||\n        e.method === 'DELETE'\n      );\n      \n      console.log(`\\n🔍 Security Analysis:`);\n      console.log(`  📝 ${writeEndpointsWithoutAuth.length} write endpoints without auth requirement`);\n      console.log(`  ⚠️ ${criticalEndpoints.length} critical endpoints requiring review`);\n      \n      if (writeEndpointsWithoutAuth.length > 0) {\n        console.log(`\\n🚨 Write endpoints without auth requirement:`);\n        writeEndpointsWithoutAuth.forEach(endpoint => {\n          console.log(`    ${endpoint.method} ${endpoint.path} (${endpoint.source})`);\n        });\n      }\n      \n      // This is informational - we don't fail the test but report security concerns\n      expect(true).toBe(true); // Always pass, this is for reporting only\n    });\n\n    it('should provide comprehensive security report', () => {\n      const report = {\n        totalEndpoints: discoveredEndpoints.length,\n        writeOperations: discoveredEndpoints.filter(e => e.isWriteOperation).length,\n        readOperations: discoveredEndpoints.filter(e => !e.isWriteOperation).length,\n        authenticatedEndpoints: discoveredEndpoints.filter(e => e.requiresAuth).length,\n        unauthenticatedEndpoints: discoveredEndpoints.filter(e => !e.requiresAuth).length,\n        criticalEndpoints: discoveredEndpoints.filter(e => \n          e.path.includes('/admin') || \n          e.path.includes('/delete') ||\n          e.method === 'DELETE'\n        ).length,\n        demoSecurityCoverage: {\n          endpoints: discoveredEndpoints.length,\n          writeOpsNeedingRestriction: discoveredEndpoints.filter(e => e.isWriteOperation && e.requiresAuth).length,\n        }\n      };\n      \n      console.log(`\\n📊 Comprehensive Security Report:`);\n      console.log(`  📈 Total API endpoints: ${report.totalEndpoints}`);\n      console.log(`  ✏️ Write operations: ${report.writeOperations}`);\n      console.log(`  👁️ Read operations: ${report.readOperations}`);\n      console.log(`  🔒 Authenticated endpoints: ${report.authenticatedEndpoints}`);\n      console.log(`  🔓 Unauthenticated endpoints: ${report.unauthenticatedEndpoints}`);\n      console.log(`  ⚠️ Critical endpoints: ${report.criticalEndpoints}`);\n      console.log(`  🛡️ Write ops needing demo restriction: ${report.demoSecurityCoverage.writeOpsNeedingRestriction}`);\n      \n      // Store report for potential external analysis\n      const reportPath = path.join(process.cwd(), 'reports', 'demo-security-analysis.json');\n      try {\n        fs.mkdirSync(path.dirname(reportPath), { recursive: true });\n        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));\n        console.log(`  📄 Report saved to: ${reportPath}`);\n      } catch (error) {\n        console.warn(`Warning: Could not save report to ${reportPath}:`, error.message);\n      }\n      \n      expect(report.totalEndpoints).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Regression Testing for Demo Security', () => {\n    it('should ensure demo security middleware is properly applied', async () => {\n      // Test a few key endpoints that should definitely be protected\n      const criticalEndpoints = [\n        { method: 'POST', path: '/api/users' },\n        { method: 'DELETE', path: '/api/users/test-id' },\n        { method: 'POST', path: '/api/organizations' },\n        { method: 'PUT', path: '/api/buildings/test-id' },\n        { method: 'DELETE', path: '/api/documents/test-id' }\n      ];\n      \n      const agent = request.agent(app);\n      let protectedCount = 0;\n      \n      for (const endpoint of criticalEndpoints) {\n        try {\n          let response;\n          switch (endpoint.method) {\n            case 'POST':\n              response = await agent.post(endpoint.path).send({});\n              break;\n            case 'PUT':\n              response = await agent.put(endpoint.path).send({});\n              break;\n            case 'DELETE':\n              response = await agent.delete(endpoint.path);\n              break;\n          }\n          \n          if (response && (response.status === 403 || response.status === 401)) {\n            protectedCount++;\n          }\n        } catch (error) {\n          // Connection errors are acceptable\n        }\n      }\n      \n      console.log(`🛡️ ${protectedCount}/${criticalEndpoints.length} critical endpoints are protected`);\n      expect(protectedCount).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}