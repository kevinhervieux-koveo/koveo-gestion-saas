dc883a81ca731315425d7709a3ef4bf6
'use strict';
require('./behavior/click.js');
require('./behavior/cut.js');
require('./behavior/keydown.js');
require('./behavior/keypress.js');
require('./behavior/keyup.js');
require('./behavior/paste.js');
var registry = require('./behavior/registry.js');
var wrapEvent = require('./wrapEvent.js');
var eventMap = require('./eventMap.js');
var createEvent = require('./createEvent.js');
function dispatchUIEvent(target, type, init, preventDefault = false) {
    if (eventMap.isMouseEvent(type) || eventMap.isKeyboardEvent(type)) {
        init = {
            ...init,
            ...this.system.getUIEventModifiers()
        };
    }
    const event = createEvent.createEvent(type, target, init);
    return dispatchEvent.call(this, target, event, preventDefault);
}
function dispatchEvent(target, event, preventDefault = false) {
    var _behavior_type;
    const type = event.type;
    const behaviorImplementation = preventDefault ? () => { } : (_behavior_type = registry.behavior[type]) === null || _behavior_type === undefined ? undefined : _behavior_type.call(registry.behavior, event, target, this);
    if (behaviorImplementation) {
        event.preventDefault();
        let defaultPrevented = false;
        Object.defineProperty(event, 'defaultPrevented', {
            get: () => defaultPrevented
        });
        Object.defineProperty(event, 'preventDefault', {
            value: () => {
                defaultPrevented = event.cancelable;
            }
        });
        wrapEvent.wrapEvent(() => target.dispatchEvent(event));
        if (!defaultPrevented) {
            behaviorImplementation();
        }
        return !defaultPrevented;
    }
    return wrapEvent.wrapEvent(() => target.dispatchEvent(event));
}
function dispatchDOMEvent(target, type, init) {
    const event = createEvent.createEvent(type, target, init);
    wrapEvent.wrapEvent(() => target.dispatchEvent(event));
}
exports.dispatchDOMEvent = dispatchDOMEvent;
exports.dispatchEvent = dispatchEvent;
exports.dispatchUIEvent = dispatchUIEvent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L2Rpc3BhdGNoRXZlbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDL0IsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDN0IsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDakMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDbEMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDL0IsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDL0IsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDakQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDMUMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3hDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTlDLFNBQVMsZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLGNBQWMsR0FBRyxLQUFLO0lBQy9ELElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDaEUsSUFBSSxHQUFHO1lBQ0gsR0FBRyxJQUFJO1lBQ1AsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFO1NBQ3ZDLENBQUM7SUFDTixDQUFDO0lBQ0QsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFELE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBQ0QsU0FBUyxhQUFhLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxjQUFjLEdBQUcsS0FBSztJQUN4RCxJQUFJLGNBQWMsQ0FBQztJQUNuQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3hCLE1BQU0sc0JBQXNCLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFFLEVBQUUsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksY0FBYyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2TixJQUFJLHNCQUFzQixFQUFFLENBQUM7UUFDekIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGtCQUFrQixFQUFFO1lBQzdDLEdBQUcsRUFBRSxHQUFFLEVBQUUsQ0FBQSxnQkFBZ0I7U0FDNUIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7WUFDM0MsS0FBSyxFQUFFLEdBQUUsRUFBRTtnQkFDUCxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1lBQ3hDLENBQUM7U0FDSixDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUUsRUFBRSxDQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUNwQixzQkFBc0IsRUFBRSxDQUFDO1FBQzdCLENBQUM7UUFDRCxPQUFPLENBQUMsZ0JBQWdCLENBQUM7SUFDN0IsQ0FBQztJQUNELE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFFLEVBQUUsQ0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUNELFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJO0lBQ3hDLE1BQU0sS0FBSyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRCxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUUsRUFBRSxDQUFBLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQsT0FBTyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLE9BQU8sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudC9kaXN0L2Nqcy9ldmVudC9kaXNwYXRjaEV2ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9iZWhhdmlvci9jbGljay5qcycpO1xucmVxdWlyZSgnLi9iZWhhdmlvci9jdXQuanMnKTtcbnJlcXVpcmUoJy4vYmVoYXZpb3Iva2V5ZG93bi5qcycpO1xucmVxdWlyZSgnLi9iZWhhdmlvci9rZXlwcmVzcy5qcycpO1xucmVxdWlyZSgnLi9iZWhhdmlvci9rZXl1cC5qcycpO1xucmVxdWlyZSgnLi9iZWhhdmlvci9wYXN0ZS5qcycpO1xudmFyIHJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9iZWhhdmlvci9yZWdpc3RyeS5qcycpO1xudmFyIHdyYXBFdmVudCA9IHJlcXVpcmUoJy4vd3JhcEV2ZW50LmpzJyk7XG52YXIgZXZlbnRNYXAgPSByZXF1aXJlKCcuL2V2ZW50TWFwLmpzJyk7XG52YXIgY3JlYXRlRXZlbnQgPSByZXF1aXJlKCcuL2NyZWF0ZUV2ZW50LmpzJyk7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoVUlFdmVudCh0YXJnZXQsIHR5cGUsIGluaXQsIHByZXZlbnREZWZhdWx0ID0gZmFsc2UpIHtcbiAgICBpZiAoZXZlbnRNYXAuaXNNb3VzZUV2ZW50KHR5cGUpIHx8IGV2ZW50TWFwLmlzS2V5Ym9hcmRFdmVudCh0eXBlKSkge1xuICAgICAgICBpbml0ID0ge1xuICAgICAgICAgICAgLi4uaW5pdCxcbiAgICAgICAgICAgIC4uLnRoaXMuc3lzdGVtLmdldFVJRXZlbnRNb2RpZmllcnMoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBldmVudCA9IGNyZWF0ZUV2ZW50LmNyZWF0ZUV2ZW50KHR5cGUsIHRhcmdldCwgaW5pdCk7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQuY2FsbCh0aGlzLCB0YXJnZXQsIGV2ZW50LCBwcmV2ZW50RGVmYXVsdCk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KHRhcmdldCwgZXZlbnQsIHByZXZlbnREZWZhdWx0ID0gZmFsc2UpIHtcbiAgICB2YXIgX2JlaGF2aW9yX3R5cGU7XG4gICAgY29uc3QgdHlwZSA9IGV2ZW50LnR5cGU7XG4gICAgY29uc3QgYmVoYXZpb3JJbXBsZW1lbnRhdGlvbiA9IHByZXZlbnREZWZhdWx0ID8gKCk9Pnt9IDogKF9iZWhhdmlvcl90eXBlID0gcmVnaXN0cnkuYmVoYXZpb3JbdHlwZV0pID09PSBudWxsIHx8IF9iZWhhdmlvcl90eXBlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBfYmVoYXZpb3JfdHlwZS5jYWxsKHJlZ2lzdHJ5LmJlaGF2aW9yLCBldmVudCwgdGFyZ2V0LCB0aGlzKTtcbiAgICBpZiAoYmVoYXZpb3JJbXBsZW1lbnRhdGlvbikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBsZXQgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICdkZWZhdWx0UHJldmVudGVkJywge1xuICAgICAgICAgICAgZ2V0OiAoKT0+ZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAncHJldmVudERlZmF1bHQnLCB7XG4gICAgICAgICAgICB2YWx1ZTogKCk9PntcbiAgICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gZXZlbnQuY2FuY2VsYWJsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHdyYXBFdmVudC53cmFwRXZlbnQoKCk9PnRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KSk7XG4gICAgICAgIGlmICghZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgYmVoYXZpb3JJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXBFdmVudC53cmFwRXZlbnQoKCk9PnRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaERPTUV2ZW50KHRhcmdldCwgdHlwZSwgaW5pdCkge1xuICAgIGNvbnN0IGV2ZW50ID0gY3JlYXRlRXZlbnQuY3JlYXRlRXZlbnQodHlwZSwgdGFyZ2V0LCBpbml0KTtcbiAgICB3cmFwRXZlbnQud3JhcEV2ZW50KCgpPT50YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCkpO1xufVxuXG5leHBvcnRzLmRpc3BhdGNoRE9NRXZlbnQgPSBkaXNwYXRjaERPTUV2ZW50O1xuZXhwb3J0cy5kaXNwYXRjaEV2ZW50ID0gZGlzcGF0Y2hFdmVudDtcbmV4cG9ydHMuZGlzcGF0Y2hVSUV2ZW50ID0gZGlzcGF0Y2hVSUV2ZW50O1xuIl0sInZlcnNpb24iOjN9