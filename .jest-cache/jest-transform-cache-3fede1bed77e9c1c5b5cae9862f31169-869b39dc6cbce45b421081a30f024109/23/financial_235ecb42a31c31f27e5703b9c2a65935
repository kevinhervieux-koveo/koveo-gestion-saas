345c6aedee0ed95c20a7322960f79755
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertMonthlyBudgetSchema = exports.insertBudgetSchema = exports.insertOldBillSchema = exports.insertBillSchema = exports.monthlyBudgets = exports.budgets = exports.oldBills = exports.bills = exports.schedulePaymentEnum = exports.paymentTypeEnum = exports.billCategoryEnum = exports.oldBillTypeEnum = exports.billStatusEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const drizzle_zod_1 = require("drizzle-zod");
const zod_1 = require("zod");
const core_1 = require("./core");
const property_1 = require("./property");
// Financial enums
exports.billStatusEnum = (0, pg_core_1.pgEnum)('bill_status', [
    'draft',
    'sent',
    'overdue',
    'paid',
    'cancelled',
]);
exports.oldBillTypeEnum = (0, pg_core_1.pgEnum)('old_bill_type', [
    'condo_fees',
    'special_assessment',
    'utility',
    'maintenance',
    'other',
]);
exports.billCategoryEnum = (0, pg_core_1.pgEnum)('bill_category', [
    'insurance',
    'maintenance',
    'salary',
    'utilities',
    'cleaning',
    'security',
    'landscaping',
    'professional_services',
    'administration',
    'repairs',
    'supplies',
    'taxes',
    'technology',
    'reserves',
    'other',
]);
exports.paymentTypeEnum = (0, pg_core_1.pgEnum)('payment_type', ['unique', 'recurrent']);
exports.schedulePaymentEnum = (0, pg_core_1.pgEnum)('schedule_payment', [
    'weekly',
    'monthly',
    'quarterly',
    'yearly',
    'custom',
]);
// Financial tables
/**
 * Enhanced bills table for tracking financial obligations with advanced scheduling.
 * Supports unique and recurrent payments with custom scheduling options.
 */
exports.bills = (0, pg_core_1.pgTable)('bills', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    buildingId: (0, pg_core_1.varchar)('building_id')
        .notNull()
        .references(() => property_1.buildings.id),
    billNumber: (0, pg_core_1.text)('bill_number').notNull().unique(),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description'),
    category: (0, exports.billCategoryEnum)('category').notNull(),
    vendor: (0, pg_core_1.text)('vendor'), // Company or service provider
    paymentType: (0, exports.paymentTypeEnum)('payment_type').notNull(), // unique or recurrent
    schedulePayment: (0, exports.schedulePaymentEnum)('schedule_payment'), // Only for recurrent payments
    scheduleCustom: (0, pg_core_1.date)('schedule_custom').array(), // Custom dates for custom schedules
    costs: (0, pg_core_1.decimal)('costs', { precision: 12, scale: 2 }).array().notNull(), // Array of costs for payment plan
    totalAmount: (0, pg_core_1.decimal)('total_amount', { precision: 12, scale: 2 }).notNull(),
    startDate: (0, pg_core_1.date)('start_date').notNull(), // When the bill series starts
    endDate: (0, pg_core_1.date)('end_date'), // For recurrent bills, when they end (optional for ongoing)
    status: (0, exports.billStatusEnum)('status').notNull().default('draft'),
    filePath: (0, pg_core_1.text)('file_path'), // Path to uploaded bill document
    fileName: (0, pg_core_1.text)('file_name'), // Original filename
    fileSize: (0, pg_core_1.integer)('file_size'), // File size in bytes
    isAiAnalyzed: (0, pg_core_1.boolean)('is_ai_analyzed').default(false),
    aiAnalysisData: (0, pg_core_1.jsonb)('ai_analysis_data'), // Store AI-extracted data
    notes: (0, pg_core_1.text)('notes'),
    autoGenerated: (0, pg_core_1.boolean)('auto_generated').notNull().default(false), // Indicates if this bill was auto-generated
    reference: (0, pg_core_1.varchar)('reference').references(() => exports.bills.id), // References the original bill for auto-generated bills
    createdBy: (0, pg_core_1.varchar)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Legacy bills table - keeping for backward compatibility.
 * Will be migrated to new bills table structure.
 */
exports.oldBills = (0, pg_core_1.pgTable)('old_bills', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    residenceId: (0, pg_core_1.varchar)('residence_id')
        .notNull()
        .references(() => property_1.residences.id),
    billNumber: (0, pg_core_1.text)('bill_number').notNull().unique(),
    type: (0, exports.oldBillTypeEnum)('type').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    amount: (0, pg_core_1.decimal)('amount', { precision: 12, scale: 2 }).notNull(),
    dueDate: (0, pg_core_1.date)('due_date').notNull(),
    issueDate: (0, pg_core_1.date)('issue_date').notNull(),
    status: (0, exports.billStatusEnum)('status').notNull().default('draft'),
    notes: (0, pg_core_1.text)('notes'),
    lateFeeAmount: (0, pg_core_1.decimal)('late_fee_amount', { precision: 10, scale: 2 }),
    discountAmount: (0, pg_core_1.decimal)('discount_amount', { precision: 10, scale: 2 }),
    finalAmount: (0, pg_core_1.decimal)('final_amount', { precision: 12, scale: 2 }).notNull(),
    paymentReceivedDate: (0, pg_core_1.date)('payment_received_date'),
    createdBy: (0, pg_core_1.varchar)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Budgets table for tracking financial planning by building and category.
 * Supports operational, reserve, and special project budgets.
 */
exports.budgets = (0, pg_core_1.pgTable)('budgets', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    buildingId: (0, pg_core_1.varchar)('building_id')
        .notNull()
        .references(() => property_1.buildings.id),
    year: (0, pg_core_1.integer)('year').notNull(),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    category: (0, pg_core_1.text)('category').notNull(), // 'operational', 'reserve', 'special_project'
    budgetedAmount: (0, pg_core_1.decimal)('budgeted_amount', { precision: 12, scale: 2 }).notNull(),
    actualAmount: (0, pg_core_1.decimal)('actual_amount', { precision: 12, scale: 2 }).default('0'),
    variance: (0, pg_core_1.decimal)('variance', { precision: 12, scale: 2 }).default('0'),
    approvedBy: (0, pg_core_1.varchar)('approved_by').references(() => core_1.users.id),
    approvedDate: (0, pg_core_1.date)('approved_date'),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdBy: (0, pg_core_1.varchar)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Monthly budgets table for detailed monthly tracking of income and spending by building.
 * Automatically populated for each building from construction date to 25 years in the future.
 * Updated monthly on the 1st and supports approval workflow.
 */
exports.monthlyBudgets = (0, pg_core_1.pgTable)('monthly_budgets', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    buildingId: (0, pg_core_1.varchar)('building_id')
        .notNull()
        .references(() => property_1.buildings.id),
    year: (0, pg_core_1.integer)('year').notNull(),
    month: (0, pg_core_1.integer)('month').notNull(), // 1-12
    incomeTypes: (0, pg_core_1.text)('income_types').array().notNull(), // Array of income categories from money_flow
    incomes: (0, pg_core_1.decimal)('incomes', { precision: 12, scale: 2 }).array().notNull(), // Array of income amounts corresponding to incomeTypes
    spendingTypes: (0, pg_core_1.text)('spending_types').array().notNull(), // Array of expense categories from money_flow
    spendings: (0, pg_core_1.decimal)('spendings', { precision: 12, scale: 2 }).array().notNull(), // Array of spending amounts corresponding to spendingTypes
    approved: (0, pg_core_1.boolean)('approved').notNull().default(false),
    approvedBy: (0, pg_core_1.varchar)('approved_by').references(() => core_1.users.id),
    approvedDate: (0, pg_core_1.timestamp)('approved_date'),
    originalBudgetId: (0, pg_core_1.varchar)('original_budget_id').references(() => exports.monthlyBudgets.id), // References the original budget if this is an approved copy
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
// Insert schemas
// Removed insertMoneyFlowSchema - money flow table deleted
exports.insertBillSchema = (0, drizzle_zod_1.createInsertSchema)(exports.bills, {
    // Custom validations for strict schema compliance
    billNumber: zod_1.z.string().min(1, "Bill number is required"),
    title: zod_1.z.string().min(1, "Title is required"),
    category: zod_1.z.enum(['insurance', 'maintenance', 'salary', 'utilities', 'cleaning', 'security', 'landscaping', 'professional_services', 'administration', 'repairs', 'supplies', 'taxes', 'technology', 'reserves', 'other']),
    paymentType: zod_1.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_1.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    scheduleCustom: zod_1.z.array(zod_1.z.coerce.date()).optional().refine((dates) => !dates || dates.length === 0 || dates.every(date => date instanceof Date && !isNaN(date.getTime())), "All custom schedule dates must be valid dates"),
    costs: zod_1.z.array(zod_1.z.coerce.number().positive("All costs must be positive")).min(1, "At least one cost is required"),
    totalAmount: zod_1.z.coerce.number().positive("Total amount must be positive"),
    startDate: zod_1.z.coerce.date(),
    endDate: zod_1.z.coerce.date().optional(),
    status: zod_1.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']).default('draft'),
    autoGenerated: zod_1.z.boolean().default(false),
}).omit({
    id: true,
    createdAt: true,
    updatedAt: true
});
exports.insertOldBillSchema = zod_1.z.object({
    residenceId: zod_1.z.string().uuid(),
    billNumber: zod_1.z.string(),
    type: zod_1.z.string(),
    description: zod_1.z.string().optional(),
    amount: zod_1.z.number(),
    dueDate: zod_1.z.date(),
    issueDate: zod_1.z.date().optional(),
    status: zod_1.z.string().default('unpaid'),
    notes: zod_1.z.string().optional(),
    lateFeeAmount: zod_1.z.number().optional(),
    discountAmount: zod_1.z.number().optional(),
    finalAmount: zod_1.z.number().optional(),
    paymentReceivedDate: zod_1.z.date().optional(),
    createdBy: zod_1.z.string().uuid(),
});
exports.insertBudgetSchema = zod_1.z.object({
    buildingId: zod_1.z.string().uuid(),
    year: zod_1.z.number().int(),
    name: zod_1.z.string(),
    description: zod_1.z.string().optional(),
    category: zod_1.z.string(),
    budgetedAmount: zod_1.z.number(),
    actualAmount: zod_1.z.number().optional(),
    createdBy: zod_1.z.string().uuid(),
});
exports.insertMonthlyBudgetSchema = (0, drizzle_zod_1.createInsertSchema)(exports.monthlyBudgets).omit({
    id: true,
    createdAt: true,
    updatedAt: true
});
// Relations - temporarily commented out due to drizzle-orm version compatibility
// Removed moneyFlow relations
//   }),
//   residence: one(residences, {
//   (removed money flow relations)
//   }),
// }));
// export const billsRelations = relations(bills, ({ one, many }) => ({
//   building: one(buildings, {
//     fields: [bills.buildingId],
//     references: [buildings.id],
//   }),
//   createdBy: one(users, {
//     fields: [bills.createdBy],
//     references: [users.id],
//   }),
//   originalBill: one(bills, {
//     fields: [bills.reference],
//     references: [bills.id],
//     relationName: 'billReference'
//   }),
//   generatedBills: many(bills, {
//     relationName: 'billReference'
//   }),
//   (removed money flow relations),
// }));
// export const oldBillsRelations = relations(oldBills, ({ one }) => ({
//   residence: one(residences, {
//     fields: [oldBills.residenceId],
//     references: [residences.id],
//   }),
//   createdBy: one(users, {
//     fields: [oldBills.createdBy],
//     references: [users.id],
//   }),
// }));
// export const budgetsRelations = relations(budgets, ({ one }) => ({
//   building: one(buildings, {
//     fields: [budgets.buildingId],
//     references: [buildings.id],
//   }),
//   createdBy: one(users, {
//     fields: [budgets.createdBy],
//     references: [users.id],
//   }),
//   approvedBy: one(users, {
//     fields: [budgets.approvedBy],
//     references: [users.id],
//   }),
// }));
// export const monthlyBudgetsRelations = relations(monthlyBudgets, ({ one }) => ({
//   building: one(buildings, {
//     fields: [monthlyBudgets.buildingId],
//     references: [buildings.id],
//   }),
//   approvedBy: one(users, {
//     fields: [monthlyBudgets.approvedBy],
//     references: [users.id],
//   }),
//   originalBudget: one(monthlyBudgets, {
//     fields: [monthlyBudgets.originalBudgetId],
//     references: [monthlyBudgets.id],
//     relationName: 'budgetCopy'
//   }),
// }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,