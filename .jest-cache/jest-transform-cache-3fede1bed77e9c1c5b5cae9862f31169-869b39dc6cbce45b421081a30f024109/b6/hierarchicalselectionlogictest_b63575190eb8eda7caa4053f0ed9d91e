2cdc3cc78eabc7b83af1ea02cd955844
"use strict";
/**
 * Hierarchical Selection Logic Unit Tests
 * Tests the core logic functions for the hierarchical card-based navigation system
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock the getCurrentLevel function since it's not exported
function getCurrentLevel(hierarchy, ids) {
    const { organizationId, buildingId, residenceId } = ids;
    // Check each level in the hierarchy in order
    for (let i = 0; i < hierarchy.length; i++) {
        const level = hierarchy[i];
        if (level === 'organization' && !organizationId) {
            return 'organization';
        }
        // For building level, check if we need organization context
        if (level === 'building' && !buildingId) {
            // If organization is in hierarchy, we need organizationId first
            if (hierarchy.includes('organization') && !organizationId) {
                return 'organization';
            }
            // Otherwise, go directly to building selection
            return 'building';
        }
        if (level === 'residence' && !residenceId) {
            // Need both organization and building if they're in hierarchy
            if (hierarchy.includes('organization') && !organizationId) {
                return 'organization';
            }
            if (hierarchy.includes('building') && !buildingId) {
                return 'building';
            }
            return 'residence';
        }
    }
    // All required levels in the hierarchy have been satisfied
    return 'complete';
}
(0, globals_1.describe)('Hierarchical Selection Logic', () => {
    (0, globals_1.describe)('getCurrentLevel function', () => {
        (0, globals_1.describe)('Single-level hierarchies (Residents)', () => {
            (0, globals_1.test)('should return "building" when building hierarchy has no buildingId', () => {
                const hierarchy = ['building'];
                const ids = { organizationId: null, buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('building');
            });
            (0, globals_1.test)('should return "complete" when building hierarchy has buildingId', () => {
                const hierarchy = ['building'];
                const ids = { organizationId: null, buildingId: 'building-123', residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('complete');
            });
            (0, globals_1.test)('should return "residence" when residence hierarchy has no residenceId', () => {
                const hierarchy = ['residence'];
                const ids = { organizationId: null, buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('residence');
            });
            (0, globals_1.test)('should return "complete" when residence hierarchy has residenceId', () => {
                const hierarchy = ['residence'];
                const ids = { organizationId: null, buildingId: null, residenceId: 'residence-123' };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('complete');
            });
        });
        (0, globals_1.describe)('Multi-level hierarchies (Managers)', () => {
            (0, globals_1.test)('should return "organization" when org->building hierarchy has no organizationId', () => {
                const hierarchy = ['organization', 'building'];
                const ids = { organizationId: null, buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('organization');
            });
            (0, globals_1.test)('should return "building" when org->building hierarchy has organizationId but no buildingId', () => {
                const hierarchy = ['organization', 'building'];
                const ids = { organizationId: 'org-123', buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('building');
            });
            (0, globals_1.test)('should return "complete" when org->building hierarchy has both IDs', () => {
                const hierarchy = ['organization', 'building'];
                const ids = { organizationId: 'org-123', buildingId: 'building-123', residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('complete');
            });
            (0, globals_1.test)('should return "organization" for full hierarchy when no organizationId', () => {
                const hierarchy = ['organization', 'building', 'residence'];
                const ids = { organizationId: null, buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('organization');
            });
            (0, globals_1.test)('should return "building" for full hierarchy when has org but no building', () => {
                const hierarchy = ['organization', 'building', 'residence'];
                const ids = { organizationId: 'org-123', buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('building');
            });
            (0, globals_1.test)('should return "residence" for full hierarchy when has org+building but no residence', () => {
                const hierarchy = ['organization', 'building', 'residence'];
                const ids = { organizationId: 'org-123', buildingId: 'building-123', residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('residence');
            });
            (0, globals_1.test)('should return "complete" for full hierarchy when has all IDs', () => {
                const hierarchy = ['organization', 'building', 'residence'];
                const ids = { organizationId: 'org-123', buildingId: 'building-123', residenceId: 'residence-123' };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('complete');
            });
        });
        (0, globals_1.describe)('Complex dependency scenarios', () => {
            (0, globals_1.test)('should prioritize organization when building hierarchy requires it', () => {
                const hierarchy = ['organization', 'building'];
                const ids = { organizationId: null, buildingId: 'building-123', residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                // Should still require organization first, even with buildingId present
                (0, globals_1.expect)(result).toBe('organization');
            });
            (0, globals_1.test)('should prioritize organization when residence hierarchy requires it', () => {
                const hierarchy = ['organization', 'residence'];
                const ids = { organizationId: null, buildingId: null, residenceId: 'residence-123' };
                const result = getCurrentLevel(hierarchy, ids);
                // Should still require organization first
                (0, globals_1.expect)(result).toBe('organization');
            });
            (0, globals_1.test)('should prioritize building when residence hierarchy requires it', () => {
                const hierarchy = ['building', 'residence'];
                const ids = { organizationId: null, buildingId: null, residenceId: 'residence-123' };
                const result = getCurrentLevel(hierarchy, ids);
                // Should still require building first
                (0, globals_1.expect)(result).toBe('building');
            });
        });
        (0, globals_1.describe)('Edge cases', () => {
            (0, globals_1.test)('should handle empty hierarchy', () => {
                const hierarchy = [];
                const ids = { organizationId: null, buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('complete');
            });
            (0, globals_1.test)('should handle single organization hierarchy', () => {
                const hierarchy = ['organization'];
                const ids = { organizationId: null, buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('organization');
            });
            (0, globals_1.test)('should return complete for single organization when org provided', () => {
                const hierarchy = ['organization'];
                const ids = { organizationId: 'org-123', buildingId: null, residenceId: null };
                const result = getCurrentLevel(hierarchy, ids);
                (0, globals_1.expect)(result).toBe('complete');
            });
        });
    });
    (0, globals_1.describe)('Auto-forwarding Logic', () => {
        (0, globals_1.test)('should describe auto-forward conditions for single building', () => {
            // Test logic: if (currentLevel === 'building' && buildings.length === 1 && !buildingId)
            const currentLevel = 'building';
            const buildingsLength = 1;
            const buildingId = null;
            const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(true);
        });
        (0, globals_1.test)('should not auto-forward when multiple buildings', () => {
            const currentLevel = 'building';
            const buildingsLength = 2;
            const buildingId = null;
            const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
        (0, globals_1.test)('should not auto-forward when building already selected', () => {
            const currentLevel = 'building';
            const buildingsLength = 1;
            const buildingId = 'building-123';
            const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
        (0, globals_1.test)('should not auto-forward when not at building level', () => {
            const currentLevel = 'organization';
            const buildingsLength = 1;
            const buildingId = null;
            const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
    });
    (0, globals_1.describe)('Back Button Logic', () => {
        (0, globals_1.test)('should show back button for single-level hierarchy with multiple options', () => {
            // Test logic: config.hierarchy.length === 1 && buildingId && buildings.length > 1
            const hierarchyLength = 1;
            const buildingId = 'building-123';
            const buildingsLength = 2;
            const shouldShowBackButton = hierarchyLength === 1 && !!buildingId && buildingsLength > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(true);
        });
        (0, globals_1.test)('should not show back button for single-level hierarchy with single option', () => {
            const hierarchyLength = 1;
            const buildingId = 'building-123';
            const buildingsLength = 1;
            const shouldShowBackButton = hierarchyLength === 1 && !!buildingId && buildingsLength > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(false);
        });
        (0, globals_1.test)('should not show back button when no selection made', () => {
            const hierarchyLength = 1;
            const buildingId = null;
            const buildingsLength = 2;
            const shouldShowBackButton = hierarchyLength === 1 && !!buildingId && buildingsLength > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(false);
        });
        (0, globals_1.test)('should show back button for multi-level hierarchy with multiple options', () => {
            // Test logic: buildings.length > 1 && buildingId
            const hierarchyLength = 2;
            const buildingId = 'building-123';
            const buildingsLength = 3;
            const shouldShowBackButton = buildingsLength > 1 && !!buildingId;
            (0, globals_1.expect)(shouldShowBackButton).toBe(true);
        });
    });
    (0, globals_1.describe)('URL Parameter Parsing', () => {
        (0, globals_1.test)('should parse organization parameter correctly', () => {
            const mockUrlParams = new URLSearchParams('?organization=org-123&building=building-456');
            const organizationId = mockUrlParams.get('organization');
            const buildingId = mockUrlParams.get('building');
            const residenceId = mockUrlParams.get('residence');
            (0, globals_1.expect)(organizationId).toBe('org-123');
            (0, globals_1.expect)(buildingId).toBe('building-456');
            (0, globals_1.expect)(residenceId).toBe(null);
        });
        (0, globals_1.test)('should handle missing parameters', () => {
            const mockUrlParams = new URLSearchParams('?building=building-456');
            const organizationId = mockUrlParams.get('organization');
            const buildingId = mockUrlParams.get('building');
            const residenceId = mockUrlParams.get('residence');
            (0, globals_1.expect)(organizationId).toBe(null);
            (0, globals_1.expect)(buildingId).toBe('building-456');
            (0, globals_1.expect)(residenceId).toBe(null);
        });
        (0, globals_1.test)('should handle empty search params', () => {
            const mockUrlParams = new URLSearchParams('');
            const organizationId = mockUrlParams.get('organization');
            const buildingId = mockUrlParams.get('building');
            const residenceId = mockUrlParams.get('residence');
            (0, globals_1.expect)(organizationId).toBe(null);
            (0, globals_1.expect)(buildingId).toBe(null);
            (0, globals_1.expect)(residenceId).toBe(null);
        });
    });
    (0, globals_1.describe)('Manager residences page hierarchy (organization → building)', () => {
        (0, globals_1.test)('should require organization first in manager residences hierarchy', () => {
            const hierarchy = ['organization', 'building'];
            const ids = { organizationId: null, buildingId: null, residenceId: null };
            const result = getCurrentLevel(hierarchy, ids);
            (0, globals_1.expect)(result).toBe('organization');
        });
        (0, globals_1.test)('should move to building after organization in manager residences', () => {
            const hierarchy = ['organization', 'building'];
            const ids = { organizationId: 'org-123', buildingId: null, residenceId: null };
            const result = getCurrentLevel(hierarchy, ids);
            (0, globals_1.expect)(result).toBe('building');
        });
        (0, globals_1.test)('should be complete when organization and building selected for manager residences', () => {
            const hierarchy = ['organization', 'building'];
            const ids = { organizationId: 'org-123', buildingId: 'building-456', residenceId: null };
            const result = getCurrentLevel(hierarchy, ids);
            (0, globals_1.expect)(result).toBe('complete');
        });
        (0, globals_1.test)('should prioritize organization when building provided but org missing in manager residences', () => {
            const hierarchy = ['organization', 'building'];
            const ids = { organizationId: null, buildingId: 'building-123', residenceId: null };
            const result = getCurrentLevel(hierarchy, ids);
            (0, globals_1.expect)(result).toBe('organization');
        });
        (0, globals_1.test)('should handle auto-forward scenario for manager residences with single building', () => {
            // Test manager residences page specific auto-forward logic
            const currentLevel = 'building';
            const buildingsLength = 1;
            const buildingId = null;
            const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(true);
        });
        (0, globals_1.test)('should show back button in manager residences when multiple organizations', () => {
            // Test back button logic for 2-level hierarchy
            const hierarchyLength = 2;
            const organizationId = 'org-123';
            const organizationsLength = 2;
            const shouldShowBackButton = hierarchyLength >= 2 && !!organizationId && organizationsLength > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,