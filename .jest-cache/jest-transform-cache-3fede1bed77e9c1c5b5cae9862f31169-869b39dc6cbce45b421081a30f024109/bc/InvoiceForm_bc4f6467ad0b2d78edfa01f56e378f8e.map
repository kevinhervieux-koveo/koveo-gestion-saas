{"file":"/home/runner/workspace/client/src/components/invoices/InvoiceForm.tsx","mappings":";;AAqDA,kCAuiBC;;AA5lBD,iCAA8C;AAC9C,qDAAyD;AACzD,iDAAsD;AACtD,+CAAgG;AAChG,uCAAkC;AAElC,oFAAiF;AACjF,qEAAkE;AAClE,mDAAgD;AAChD,+CAAgF;AAChF,+CAAsG;AACtG,iDAA8C;AAC9C,6DAAyE;AACzE,uDAAoD;AACpD,qDAAkF;AAClF,iDAAgE;AAChE,iDAA8C;AAC9C,yDAAsD;AACtD,iDAA6C;AAE7C,2CAAoE;AACpE,uCAAiC;AAiBjC;;;;;;;;;;;;;;GAcG;AACH,SAAgB,WAAW,CAAC,EAC1B,UAAU,EACV,WAAW,EACX,SAAS,EACT,QAAQ,EACR,WAAW,EACX,IAAI,GAAG,QAAQ,EACE;IACjB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,oBAAQ,GAAE,CAAC;IAE7B,4CAA4C;IAC5C,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,IAAA,gBAAQ,EAAc,IAAI,CAAC,CAAC;IACpE,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,IAAA,gBAAQ,EAKrD,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;IAEvC,6BAA6B;IAC7B,MAAM,IAAI,GAAG,IAAA,yBAAO,EAAkB;QACpC,QAAQ,EAAE,IAAA,iBAAW,EAAC,0BAAiB,CAAC;QACxC,aAAa,EAAE;YACb,UAAU,EAAE,WAAW,EAAE,UAAU,IAAI,EAAE;YACzC,aAAa,EAAE,WAAW,EAAE,aAAa,IAAI,EAAE;YAC/C,WAAW,EAAE,WAAW,EAAE,WAAW,IAAI,CAAC;YAC1C,OAAO,EAAE,WAAW,EAAE,OAAO,IAAI,IAAI,IAAI,EAAE;YAC3C,WAAW,EAAE,WAAW,EAAE,WAAW,IAAI,UAAU;YACnD,SAAS,EAAE,WAAW,EAAE,SAAS,IAAI,SAAS;YAC9C,SAAS,EAAE,WAAW,EAAE,SAAS,IAAI,SAAS;YAC9C,kBAAkB,EAAE,WAAW,EAAE,kBAAkB,IAAI,EAAE;YACzD,UAAU,EAAE,UAAU;YACtB,WAAW,EAAE,WAAW;YACxB,aAAa,EAAE,WAAW,EAAE,aAAa,IAAI,KAAK;YAClD,GAAG,WAAW;SACf;KACF,CAAC,CAAC;IAEH,uCAAuC;IACvC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,+BAAa,EAAC;QAC/C,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,IAAI,EAAE,oBAAoB;KAC3B,CAAC,CAAC;IAEH,6DAA6D;IAC7D,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAE1C,yCAAyC;IACzC,MAAM,oBAAoB,GAAG,IAAA,mBAAW,EAAC,CAAC,IAAiB,EAAE,WAAoB,EAAE,EAAE;QACnF,IAAI,IAAI,EAAE,CAAC;YACT,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACxD,eAAe,CAAC,IAAI,CAAC,CAAC;YACtB,mBAAmB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACzD,CAAC;aAAM,IAAI,WAAW,EAAE,CAAC;YACvB,OAAO,CAAC,GAAG,CAAC,gEAAgE,CAAC,CAAC;YAC9E,KAAK,CAAC;gBACJ,KAAK,EAAE,oBAAoB;gBAC3B,WAAW,EAAE,mDAAmD;aACjE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEZ,kCAAkC;IAClC,MAAM,wBAAwB,GAAG,IAAA,mBAAW,EAAC,CAAC,MAK7C,EAAE,EAAE;QACH,mBAAmB,CAAC;YAClB,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,UAAU,EAAE,MAAM,CAAC,UAAU;YAC7B,KAAK,EAAE,MAAM,CAAC,KAAK;SACpB,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAEzE,gDAAgD;YAChD,IAAI,CAAC,KAAK,CAAC;gBACT,GAAG,IAAI,CAAC,SAAS,EAAE;gBACnB,GAAG,MAAM,CAAC,QAAQ;gBAClB,aAAa,EAAE,IAAI;gBACnB,oBAAoB,EAAE,MAAM,CAAC,UAAU;aACxC,CAAC,CAAC;YAEH,KAAK,CAAC;gBACJ,KAAK,EAAE,0BAA0B;gBACjC,WAAW,EAAE,+BAA+B,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,mDAAmD;aAC1I,CAAC,CAAC;QACL,CAAC;aAAM,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YAEpE,KAAK,CAAC;gBACJ,KAAK,EAAE,mBAAmB;gBAC1B,WAAW,EAAE,MAAM,CAAC,KAAK;gBACzB,OAAO,EAAE,aAAa;aACvB,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IAElB,0BAA0B;IAC1B,MAAM,aAAa,GAAG,GAAG,EAAE;QACzB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;IACrB,CAAC,CAAC;IAEF,6BAA6B;IAC7B,MAAM,gBAAgB,GAAG,CAAC,KAAa,EAAE,EAAE;QACzC,MAAM,CAAC,KAAK,CAAC,CAAC;IAChB,CAAC,CAAC;IAEF,kBAAkB;IAClB,MAAM,QAAQ,GAAG,KAAK,EAAE,IAAqB,EAAE,EAAE;QAC/C,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,oCAAoC,EAAE,IAAI,CAAC,CAAC;YAExD,oDAAoD;YACpD,4CAA4C;YAE5C,KAAK,CAAC;gBACJ,KAAK,EAAE,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB;gBAChE,WAAW,EAAE,sCAAsC;aACpD,CAAC,CAAC;YAEH,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YAEzD,KAAK,CAAC;gBACJ,KAAK,EAAE,OAAO;gBACd,WAAW,EAAE,KAAK,CAAC,OAAO,IAAI,wBAAwB;gBACtD,OAAO,EAAE,aAAa;aACvB,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CACL,iCAAK,SAAS,EAAC,WAAW,aAEvB,gBAAgB,CAAC,OAAO,IAAI,CAC3B,wBAAC,aAAK,eACJ,uBAAC,sBAAO,IAAC,SAAS,EAAC,sBAAsB,GAAG,EAC5C,uBAAC,wBAAgB,kFAEE,IACb,CACT,EAEA,gBAAgB,CAAC,OAAO,IAAI,gBAAgB,CAAC,UAAU,KAAK,SAAS,IAAI,CACxE,wBAAC,aAAK,eACJ,uBAAC,0BAAW,IAAC,SAAS,EAAC,SAAS,GAAG,EACnC,wBAAC,wBAAgB,gDACe,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,GAAG,GAAG,CAAC,mBAC3E,uBAAC,aAAK,IAAC,OAAO,EAAC,SAAS,EAAC,SAAS,EAAC,MAAM,YACtC,gBAAgB,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC;oCACvD,gBAAgB,CAAC,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,gBAAgB,GACrE,IACS,IACb,CACT,EAEA,gBAAgB,CAAC,KAAK,IAAI,CACzB,wBAAC,aAAK,IAAC,OAAO,EAAC,aAAa,aAC1B,uBAAC,0BAAW,IAAC,SAAS,EAAC,SAAS,GAAG,EACnC,uBAAC,wBAAgB,cACd,gBAAgB,CAAC,KAAK,GACN,IACb,CACT,EAGD,wBAAC,WAAI,eACH,uBAAC,iBAAU,cACT,wBAAC,gBAAS,IAAC,SAAS,EAAC,yBAAyB,aAC5C,uBAAC,qBAAM,IAAC,SAAS,EAAC,SAAS,GAAG,+BAEpB,GACD,EACb,wBAAC,kBAAW,eACV,uBAAC,+BAAc,IACb,gBAAgB,EAAE,oBAAoB,EACtC,gBAAgB,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC,EAChD,WAAW,EAAE,EAAE,EACf,UAAU,EAAC,MAAM,iBACL,kBAAkB,GAC9B,EAED,YAAY,IAAI,CACf,gCAAK,SAAS,EAAC,8BAA8B,YAC3C,+BAAG,SAAS,EAAC,+BAA+B,2BAChC,iCAAM,SAAS,EAAC,aAAa,YAAE,YAAY,CAAC,IAAI,GAAQ,IAChE,GACA,CACP,IACW,IACT,EAGP,uBAAC,+CAAsB,IACrB,IAAI,EAAE,YAAY,EAClB,oBAAoB,EAAE,wBAAwB,GAC9C,EAGF,wBAAC,WAAI,eACH,uBAAC,iBAAU,cACT,uBAAC,gBAAS,kCAA4B,GAC3B,EACb,uBAAC,kBAAW,cACV,uBAAC,WAAI,OAAK,IAAI,YACZ,kCAAM,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAC,WAAW,aAGhE,iCAAK,SAAS,EAAC,uCAAuC,aAGpD,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,YAAY,EACjB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CACrB,wBAAC,eAAQ,eACP,uBAAC,gBAAS,gCAA0B,EACpC,uBAAC,kBAAW,cACV,uBAAC,aAAK,OACA,KAAK,EACT,WAAW,EAAC,oBAAoB,iBACpB,mBAAmB,GAC/B,GACU,EACd,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,EAGF,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,eAAe,EACpB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CACrB,wBAAC,eAAQ,eACP,uBAAC,gBAAS,mCAA6B,EACvC,uBAAC,kBAAW,cACV,uBAAC,aAAK,OACA,KAAK,EACT,WAAW,EAAC,oBAAoB,iBACpB,sBAAsB,GAClC,GACU,EACd,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,EAGF,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,aAAa,EAClB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CACrB,wBAAC,eAAQ,eACP,uBAAC,gBAAS,uCAAiC,EAC3C,uBAAC,kBAAW,cACV,uBAAC,aAAK,OACA,KAAK,EACT,IAAI,EAAC,QAAQ,EACb,IAAI,EAAC,MAAM,EACX,WAAW,EAAC,MAAM,EAClB,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,iBACpD,oBAAoB,GAChC,GACU,EACd,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,EAGF,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,SAAS,EACd,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CACrB,wBAAC,eAAQ,eACP,uBAAC,gBAAS,6BAAuB,EACjC,wBAAC,iBAAO,eACN,uBAAC,wBAAc,IAAC,OAAO,kBACrB,uBAAC,kBAAW,cACV,wBAAC,eAAM,IACL,OAAO,EAAC,SAAS,EACjB,SAAS,EAAE,IAAA,UAAE,EACX,mCAAmC,EACnC,CAAC,KAAK,CAAC,KAAK,IAAI,uBAAuB,CACxC,iBACW,iBAAiB,aAE5B,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CACb,IAAA,iBAAM,EAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAC3B,CAAC,CAAC,CAAC,CACF,2DAAwB,CACzB,EACD,uBAAC,2BAAY,IAAC,SAAS,EAAC,4BAA4B,GAAG,IAChD,GACG,GACC,EACjB,uBAAC,wBAAc,IAAC,SAAS,EAAC,YAAY,EAAC,KAAK,EAAC,OAAO,YAClD,uBAAC,mBAAQ,IACP,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,KAAK,CAAC,KAAK,EACrB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,EACjD,YAAY,SACZ,GACa,IACT,EACV,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,IACE,EAEN,uBAAC,qBAAS,KAAG,EAGb,iCAAK,SAAS,EAAC,WAAW,aACxB,+BAAI,SAAS,EAAC,qBAAqB,kCAAuB,EAE1D,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,aAAa,EAClB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CACrB,wBAAC,eAAQ,eACP,uBAAC,gBAAS,iCAA2B,EACrC,uBAAC,kBAAW,cACV,wBAAC,wBAAU,IACT,aAAa,EAAE,KAAK,CAAC,QAAQ,EAC7B,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,SAAS,EAAC,yBAAyB,iBACvB,oBAAoB,aAEhC,iCAAK,SAAS,EAAC,6BAA6B,aAC1C,uBAAC,4BAAc,IAAC,KAAK,EAAC,UAAU,EAAC,EAAE,EAAC,UAAU,GAAG,EACjD,kCAAO,OAAO,EAAC,UAAU,EAAC,SAAS,EAAC,4FAA4F,iCAExH,IACJ,EACN,iCAAK,SAAS,EAAC,6BAA6B,aAC1C,uBAAC,4BAAc,IAAC,KAAK,EAAC,WAAW,EAAC,EAAE,EAAC,WAAW,GAAG,EACnD,kCAAO,OAAO,EAAC,WAAW,EAAC,SAAS,EAAC,4FAA4F,kCAEzH,IACJ,IACK,GACD,EACd,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,EAGD,WAAW,KAAK,WAAW,IAAI,CAC9B,iCAAK,SAAS,EAAC,sCAAsC,aACnD,+BAAI,SAAS,EAAC,aAAa,0CAA+B,EAE1D,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,WAAW,EAChB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CACrB,wBAAC,eAAQ,eACP,uBAAC,gBAAS,8BAAwB,EAClC,uBAAC,kBAAW,cACV,wBAAC,wBAAU,IACT,aAAa,EAAE,KAAK,CAAC,QAAQ,EAC7B,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,SAAS,EAAC,wBAAwB,iBACtB,iBAAiB,aAE7B,iCAAK,SAAS,EAAC,6BAA6B,aAC1C,uBAAC,4BAAc,IAAC,KAAK,EAAC,SAAS,EAAC,EAAE,EAAC,SAAS,GAAG,EAC/C,kCAAO,OAAO,EAAC,SAAS,EAAC,SAAS,EAAC,SAAS,wBAAgB,IACxD,EACN,iCAAK,SAAS,EAAC,6BAA6B,aAC1C,uBAAC,4BAAc,IAAC,KAAK,EAAC,WAAW,EAAC,EAAE,EAAC,WAAW,GAAG,EACnD,kCAAO,OAAO,EAAC,WAAW,EAAC,SAAS,EAAC,SAAS,0BAAkB,IAC5D,EACN,iCAAK,SAAS,EAAC,6BAA6B,aAC1C,uBAAC,4BAAc,IAAC,KAAK,EAAC,UAAU,EAAC,EAAE,EAAC,UAAU,GAAG,EACjD,kCAAO,OAAO,EAAC,UAAU,EAAC,SAAS,EAAC,SAAS,yBAAiB,IAC1D,EACN,iCAAK,SAAS,EAAC,6BAA6B,aAC1C,uBAAC,4BAAc,IAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,EAAC,QAAQ,GAAG,EAC7C,kCAAO,OAAO,EAAC,QAAQ,EAAC,SAAS,EAAC,SAAS,6BAAqB,IAC5D,IACK,GACD,EACd,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,EAGD,SAAS,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CACxE,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAC,WAAW,EAChB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CACrB,wBAAC,eAAQ,eACP,uBAAC,gBAAS,+BAAyB,EACnC,wBAAC,iBAAO,eACN,uBAAC,wBAAc,IAAC,OAAO,kBACrB,uBAAC,kBAAW,cACV,wBAAC,eAAM,IACL,OAAO,EAAC,SAAS,EACjB,SAAS,EAAE,IAAA,UAAE,EACX,mCAAmC,EACnC,CAAC,KAAK,CAAC,KAAK,IAAI,uBAAuB,CACxC,iBACW,mBAAmB,aAE9B,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CACb,IAAA,iBAAM,EAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAC3B,CAAC,CAAC,CAAC,CACF,+DAA4B,CAC7B,EACD,uBAAC,2BAAY,IAAC,SAAS,EAAC,4BAA4B,GAAG,IAChD,GACG,GACC,EACjB,uBAAC,wBAAc,IAAC,SAAS,EAAC,YAAY,EAAC,KAAK,EAAC,OAAO,YAClD,uBAAC,mBAAQ,IACP,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,KAAK,CAAC,KAAK,EACrB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,EACjD,YAAY,SACZ,GACa,IACT,EACV,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,CACH,EAGA,SAAS,KAAK,QAAQ,IAAI,CACzB,iCAAK,SAAS,EAAC,WAAW,aACxB,iCAAK,SAAS,EAAC,mCAAmC,aAChD,uBAAC,gBAAS,yCAAmC,EAC7C,wBAAC,eAAM,IACL,IAAI,EAAC,QAAQ,EACb,OAAO,EAAC,SAAS,EACjB,IAAI,EAAC,IAAI,EACT,OAAO,EAAE,aAAa,iBACV,iBAAiB,aAE7B,uBAAC,mBAAI,IAAC,SAAS,EAAC,cAAc,GAAG,gBAE1B,IACL,EAEL,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,CACtB,8BAAG,SAAS,EAAC,+BAA+B,gFAExC,CACL,EAED,gCAAK,SAAS,EAAC,WAAW,YACvB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAC5B,iCAAoB,SAAS,EAAC,yBAAyB,aACrD,uBAAC,gBAAS,IACR,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,IAAI,EAAE,sBAAsB,KAAK,EAAE,EACnC,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAChC,wBAAC,eAAQ,IAAC,SAAS,EAAC,QAAQ,aAC1B,wBAAC,iBAAO,eACN,uBAAC,wBAAc,IAAC,OAAO,kBACrB,uBAAC,kBAAW,cACV,wBAAC,eAAM,IACL,OAAO,EAAC,SAAS,EACjB,SAAS,EAAE,IAAA,UAAE,EACX,mCAAmC,EACnC,CAAC,SAAS,CAAC,KAAK,IAAI,uBAAuB,CAC5C,iBACY,sBAAsB,KAAK,EAAE,aAEzC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CACjB,IAAA,iBAAM,EAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAC/B,CAAC,CAAC,CAAC,CACF,2DAAwB,CACzB,EACD,uBAAC,2BAAY,IAAC,SAAS,EAAC,4BAA4B,GAAG,IAChD,GACG,GACC,EACjB,uBAAC,wBAAc,IAAC,SAAS,EAAC,YAAY,EAAC,KAAK,EAAC,OAAO,YAClD,uBAAC,mBAAQ,IACP,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAE,SAAS,CAAC,KAAK,EACzB,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAC5B,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,EACrC,YAAY,SACZ,GACa,IACT,EACV,uBAAC,kBAAW,KAAG,IACN,CACZ,GACD,EACF,uBAAC,eAAM,IACL,IAAI,EAAC,QAAQ,EACb,OAAO,EAAC,SAAS,EACjB,IAAI,EAAC,IAAI,EACT,OAAO,EAAE,GAAG,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,iBACzB,sBAAsB,KAAK,EAAE,YAE1C,uBAAC,gBAAC,IAAC,SAAS,EAAC,SAAS,GAAG,GAClB,KAhDD,KAAK,CAAC,EAAE,CAiDZ,CACP,CAAC,GACE,IACF,CACP,IACG,CACP,IACG,EAGN,iCAAK,SAAS,EAAC,iCAAiC,aAC7C,QAAQ,IAAI,CACX,uBAAC,eAAM,IACL,IAAI,EAAC,QAAQ,EACb,OAAO,EAAC,SAAS,EACjB,OAAO,EAAE,QAAQ,iBACL,eAAe,uBAGpB,CACV,EACD,uBAAC,eAAM,IACL,IAAI,EAAC,QAAQ,iBACD,eAAe,YAE1B,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,GACjD,IACL,IACD,GACF,GACK,IACT,IACH,CACP,CAAC;AACJ,CAAC","names":[],"sources":["/home/runner/workspace/client/src/components/invoices/InvoiceForm.tsx"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { CalendarIcon, Plus, X, Upload, Loader2, CheckCircle, AlertCircle } from 'lucide-react';\nimport { format } from 'date-fns';\n\nimport { SharedUploader } from '@/components/document-management/SharedUploader';\nimport { GeminiInvoiceExtractor } from './GeminiInvoiceExtractor';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\n\nimport { invoiceFormSchema, InvoiceFormData } from '@shared/schema';\nimport { cn } from '@/lib/utils';\n\ninterface InvoiceFormProps {\n  /** Optional building ID to associate the invoice with */\n  buildingId?: string;\n  /** Optional residence ID to associate the invoice with */\n  residenceId?: string;\n  /** Success callback when invoice is created/updated */\n  onSuccess?: (invoice: any) => void;\n  /** Cancel callback */\n  onCancel?: () => void;\n  /** Initial data for editing mode */\n  initialData?: Partial<InvoiceFormData>;\n  /** Form mode */\n  mode?: 'create' | 'edit';\n}\n\n/**\n * InvoiceForm Component\n * \n * A comprehensive form for creating and editing invoices with AI-powered data extraction.\n * Integrates SharedUploader for file handling and GeminiInvoiceExtractor for automatic\n * field population from uploaded invoice documents.\n * \n * Features:\n * - SharedUploader integration for file and text content\n * - AI-powered invoice data extraction with confidence scoring\n * - Conditional recurring payment fields with standard and custom frequencies\n * - Dynamic custom date management with useFieldArray\n * - Real-time form validation with Zod\n * - Mobile-optimized responsive design\n */\nexport function InvoiceForm({\n  buildingId,\n  residenceId,\n  onSuccess,\n  onCancel,\n  initialData,\n  mode = 'create'\n}: InvoiceFormProps) {\n  const { toast } = useToast();\n  \n  // State for uploaded file and AI extraction\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [extractionStatus, setExtractionStatus] = useState<{\n    loading: boolean;\n    success: boolean;\n    confidence?: number;\n    error?: string;\n  }>({ loading: false, success: false });\n\n  // Form setup with validation\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceFormSchema),\n    defaultValues: {\n      vendorName: initialData?.vendorName || '',\n      invoiceNumber: initialData?.invoiceNumber || '',\n      totalAmount: initialData?.totalAmount || 0,\n      dueDate: initialData?.dueDate || new Date(),\n      paymentType: initialData?.paymentType || 'one-time',\n      frequency: initialData?.frequency || undefined,\n      startDate: initialData?.startDate || undefined,\n      customPaymentDates: initialData?.customPaymentDates || [],\n      buildingId: buildingId,\n      residenceId: residenceId,\n      isAiExtracted: initialData?.isAiExtracted || false,\n      ...initialData\n    }\n  });\n\n  // Field array for custom payment dates\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: 'customPaymentDates'\n  });\n\n  // Watch payment type and frequency for conditional rendering\n  const paymentType = form.watch('paymentType');\n  const frequency = form.watch('frequency');\n\n  // Handle file upload from SharedUploader\n  const handleDocumentChange = useCallback((file: File | null, textContent?: string) => {\n    if (file) {\n      console.log('[INVOICE FORM] File uploaded:', file.name);\n      setUploadedFile(file);\n      setExtractionStatus({ loading: true, success: false });\n    } else if (textContent) {\n      console.log('[INVOICE FORM] Text content provided - no AI extraction needed');\n      toast({\n        title: \"Text Content Added\",\n        description: \"You can now fill in the invoice details manually.\",\n      });\n    }\n  }, [toast]);\n\n  // Handle AI extraction completion\n  const handleExtractionComplete = useCallback((result: {\n    success: boolean;\n    formData?: any;\n    confidence?: number;\n    error?: string;\n  }) => {\n    setExtractionStatus({\n      loading: false,\n      success: result.success,\n      confidence: result.confidence,\n      error: result.error\n    });\n\n    if (result.success && result.formData) {\n      console.log('[INVOICE FORM] AI extraction successful:', result.formData);\n      \n      // Populate form with extracted data using reset\n      form.reset({\n        ...form.getValues(),\n        ...result.formData,\n        isAiExtracted: true,\n        extractionConfidence: result.confidence\n      });\n\n      toast({\n        title: \"AI Extraction Successful\",\n        description: `Invoice data extracted with ${Math.round((result.confidence || 0) * 100)}% confidence. Please review and adjust as needed.`,\n      });\n    } else if (result.error) {\n      console.error('[INVOICE FORM] AI extraction failed:', result.error);\n      \n      toast({\n        title: \"Extraction Failed\",\n        description: result.error,\n        variant: \"destructive\",\n      });\n    }\n  }, [form, toast]);\n\n  // Add custom payment date\n  const addCustomDate = () => {\n    append(new Date());\n  };\n\n  // Remove custom payment date\n  const removeCustomDate = (index: number) => {\n    remove(index);\n  };\n\n  // Form submission\n  const onSubmit = async (data: InvoiceFormData) => {\n    try {\n      console.log('[INVOICE FORM] Submitting invoice:', data);\n      \n      // TODO: Implement API call to create/update invoice\n      // This will be implemented in the next task\n      \n      toast({\n        title: mode === 'create' ? \"Invoice Created\" : \"Invoice Updated\",\n        description: \"Invoice has been successfully saved.\",\n      });\n      \n      onSuccess?.(data);\n    } catch (error: any) {\n      console.error('[INVOICE FORM] Submission error:', error);\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save invoice\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Extraction Status */}\n      {extractionStatus.loading && (\n        <Alert>\n          <Loader2 className=\"h-4 w-4 animate-spin\" />\n          <AlertDescription>\n            Extracting invoice data with AI... This may take a few seconds.\n          </AlertDescription>\n        </Alert>\n      )}\n      \n      {extractionStatus.success && extractionStatus.confidence !== undefined && (\n        <Alert>\n          <CheckCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            AI extraction completed with {Math.round(extractionStatus.confidence * 100)}% confidence.\n            <Badge variant=\"outline\" className=\"ml-2\">\n              {extractionStatus.confidence > 0.8 ? 'High Confidence' : \n               extractionStatus.confidence > 0.5 ? 'Medium Confidence' : 'Low Confidence'}\n            </Badge>\n          </AlertDescription>\n        </Alert>\n      )}\n      \n      {extractionStatus.error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {extractionStatus.error}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* File Upload Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Upload className=\"h-5 w-5\" />\n            Upload Invoice Document\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <SharedUploader\n            onDocumentChange={handleDocumentChange}\n            allowedFileTypes={['application/pdf', 'image/*']}\n            maxFileSize={25}\n            defaultTab=\"file\"\n            data-testid=\"invoice-uploader\"\n          />\n          \n          {uploadedFile && (\n            <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n              <p className=\"text-sm text-muted-foreground\">\n                Uploaded: <span className=\"font-medium\">{uploadedFile.name}</span>\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* AI Extraction Component (No UI) */}\n      <GeminiInvoiceExtractor\n        file={uploadedFile}\n        onExtractionComplete={handleExtractionComplete}\n      />\n\n      {/* Invoice Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Invoice Details</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              \n              {/* Basic Invoice Information */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                \n                {/* Vendor Name */}\n                <FormField\n                  control={form.control}\n                  name=\"vendorName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Vendor Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"e.g., Hydro Quebec\"\n                          data-testid=\"input-vendor-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Invoice Number */}\n                <FormField\n                  control={form.control}\n                  name=\"invoiceNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Invoice Number *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"e.g., INV-2024-001\"\n                          data-testid=\"input-invoice-number\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Total Amount */}\n                <FormField\n                  control={form.control}\n                  name=\"totalAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Total Amount (CAD) *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field}\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"0.00\"\n                          onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          data-testid=\"input-total-amount\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Due Date */}\n                <FormField\n                  control={form.control}\n                  name=\"dueDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Due Date *</FormLabel>\n                      <Popover>\n                        <PopoverTrigger asChild>\n                          <FormControl>\n                            <Button\n                              variant=\"outline\"\n                              className={cn(\n                                \"w-full pl-3 text-left font-normal\",\n                                !field.value && \"text-muted-foreground\"\n                              )}\n                              data-testid=\"button-due-date\"\n                            >\n                              {field.value ? (\n                                format(field.value, \"PPP\")\n                              ) : (\n                                <span>Pick a date</span>\n                              )}\n                              <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                            </Button>\n                          </FormControl>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                          <Calendar\n                            mode=\"single\"\n                            selected={field.value}\n                            onSelect={field.onChange}\n                            disabled={(date) => date < new Date(\"1900-01-01\")}\n                            initialFocus\n                          />\n                        </PopoverContent>\n                      </Popover>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <Separator />\n\n              {/* Payment Type Section */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">Payment Structure</h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"paymentType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Payment Type *</FormLabel>\n                      <FormControl>\n                        <RadioGroup\n                          onValueChange={field.onChange}\n                          value={field.value}\n                          className=\"flex flex-col space-y-2\"\n                          data-testid=\"radio-payment-type\"\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"one-time\" id=\"one-time\" />\n                            <label htmlFor=\"one-time\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                              One-time Payment\n                            </label>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value=\"recurring\" id=\"recurring\" />\n                            <label htmlFor=\"recurring\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                              Recurring Payment\n                            </label>\n                          </div>\n                        </RadioGroup>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Recurring Payment Options */}\n                {paymentType === 'recurring' && (\n                  <div className=\"space-y-4 p-4 bg-muted/50 rounded-lg\">\n                    <h4 className=\"font-medium\">Recurring Payment Options</h4>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"frequency\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Frequency *</FormLabel>\n                          <FormControl>\n                            <RadioGroup\n                              onValueChange={field.onChange}\n                              value={field.value}\n                              className=\"grid grid-cols-2 gap-4\"\n                              data-testid=\"radio-frequency\"\n                            >\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"monthly\" id=\"monthly\" />\n                                <label htmlFor=\"monthly\" className=\"text-sm\">Monthly</label>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"quarterly\" id=\"quarterly\" />\n                                <label htmlFor=\"quarterly\" className=\"text-sm\">Quarterly</label>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"annually\" id=\"annually\" />\n                                <label htmlFor=\"annually\" className=\"text-sm\">Annually</label>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"custom\" id=\"custom\" />\n                                <label htmlFor=\"custom\" className=\"text-sm\">Custom Dates</label>\n                              </div>\n                            </RadioGroup>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Start Date for Standard Frequencies */}\n                    {frequency && ['monthly', 'quarterly', 'annually'].includes(frequency) && (\n                      <FormField\n                        control={form.control}\n                        name=\"startDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Start Date *</FormLabel>\n                            <Popover>\n                              <PopoverTrigger asChild>\n                                <FormControl>\n                                  <Button\n                                    variant=\"outline\"\n                                    className={cn(\n                                      \"w-full pl-3 text-left font-normal\",\n                                      !field.value && \"text-muted-foreground\"\n                                    )}\n                                    data-testid=\"button-start-date\"\n                                  >\n                                    {field.value ? (\n                                      format(field.value, \"PPP\")\n                                    ) : (\n                                      <span>Pick start date</span>\n                                    )}\n                                    <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                  </Button>\n                                </FormControl>\n                              </PopoverTrigger>\n                              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                <Calendar\n                                  mode=\"single\"\n                                  selected={field.value}\n                                  onSelect={field.onChange}\n                                  disabled={(date) => date < new Date(\"1900-01-01\")}\n                                  initialFocus\n                                />\n                              </PopoverContent>\n                            </Popover>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    )}\n\n                    {/* Custom Payment Dates */}\n                    {frequency === 'custom' && (\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <FormLabel>Custom Payment Dates *</FormLabel>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={addCustomDate}\n                            data-testid=\"button-add-date\"\n                          >\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Add Date\n                          </Button>\n                        </div>\n                        \n                        {fields.length === 0 && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            No custom dates added. Click \"Add Date\" to add payment dates.\n                          </p>\n                        )}\n                        \n                        <div className=\"space-y-3\">\n                          {fields.map((field, index) => (\n                            <div key={field.id} className=\"flex items-center gap-3\">\n                              <FormField\n                                control={form.control}\n                                name={`customPaymentDates.${index}`}\n                                render={({ field: dateField }) => (\n                                  <FormItem className=\"flex-1\">\n                                    <Popover>\n                                      <PopoverTrigger asChild>\n                                        <FormControl>\n                                          <Button\n                                            variant=\"outline\"\n                                            className={cn(\n                                              \"w-full pl-3 text-left font-normal\",\n                                              !dateField.value && \"text-muted-foreground\"\n                                            )}\n                                            data-testid={`button-custom-date-${index}`}\n                                          >\n                                            {dateField.value ? (\n                                              format(dateField.value, \"PPP\")\n                                            ) : (\n                                              <span>Pick a date</span>\n                                            )}\n                                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                          </Button>\n                                        </FormControl>\n                                      </PopoverTrigger>\n                                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                        <Calendar\n                                          mode=\"single\"\n                                          selected={dateField.value}\n                                          onSelect={dateField.onChange}\n                                          disabled={(date) => date < new Date()}\n                                          initialFocus\n                                        />\n                                      </PopoverContent>\n                                    </Popover>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => removeCustomDate(index)}\n                                data-testid={`button-remove-date-${index}`}\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Form Actions */}\n              <div className=\"flex justify-end space-x-4 pt-6\">\n                {onCancel && (\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={onCancel}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                )}\n                <Button \n                  type=\"submit\"\n                  data-testid=\"button-submit\"\n                >\n                  {mode === 'create' ? 'Create Invoice' : 'Update Invoice'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport type { InvoiceFormProps };"],"version":3}