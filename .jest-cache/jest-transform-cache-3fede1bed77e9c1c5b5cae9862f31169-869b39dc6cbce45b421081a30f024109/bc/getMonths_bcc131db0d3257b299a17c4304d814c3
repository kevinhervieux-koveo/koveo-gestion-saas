ae4b696dd4b5c4f4f4c8fffcb852c011
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMonths = getMonths;
const index_js_1 = require("../classes/index.js");
/**
 * Returns the months to display in the calendar.
 *
 * This function generates `CalendarMonth` objects for each month to be
 * displayed, including their weeks and days, based on the provided display
 * months and dates.
 *
 * @param displayMonths The months (as dates) to display in the calendar.
 * @param dates The dates to display in the calendar.
 * @param props Options from the DayPicker props context.
 * @param dateLib The date library to use for date manipulation.
 * @returns An array of `CalendarMonth` objects representing the months to
 *   display.
 */
function getMonths(displayMonths, dates, props, dateLib) {
    const { addDays, endOfBroadcastWeek, endOfISOWeek, endOfMonth, endOfWeek, getISOWeek, getWeek, startOfBroadcastWeek, startOfISOWeek, startOfWeek, } = dateLib;
    const dayPickerMonths = displayMonths.reduce((months, month) => {
        const firstDateOfFirstWeek = props.broadcastCalendar
            ? startOfBroadcastWeek(month, dateLib)
            : props.ISOWeek
                ? startOfISOWeek(month)
                : startOfWeek(month);
        const lastDateOfLastWeek = props.broadcastCalendar
            ? endOfBroadcastWeek(month)
            : props.ISOWeek
                ? endOfISOWeek(endOfMonth(month))
                : endOfWeek(endOfMonth(month));
        /** The dates to display in the month. */
        const monthDates = dates.filter((date) => {
            return date >= firstDateOfFirstWeek && date <= lastDateOfLastWeek;
        });
        const nrOfDaysWithFixedWeeks = props.broadcastCalendar ? 35 : 42;
        if (props.fixedWeeks && monthDates.length < nrOfDaysWithFixedWeeks) {
            const extraDates = dates.filter((date) => {
                const daysToAdd = nrOfDaysWithFixedWeeks - monthDates.length;
                return (date > lastDateOfLastWeek &&
                    date <= addDays(lastDateOfLastWeek, daysToAdd));
            });
            monthDates.push(...extraDates);
        }
        const weeks = monthDates.reduce((weeks, date) => {
            const weekNumber = props.ISOWeek ? getISOWeek(date) : getWeek(date);
            const week = weeks.find((week) => week.weekNumber === weekNumber);
            const day = new index_js_1.CalendarDay(date, month, dateLib);
            if (!week) {
                weeks.push(new index_js_1.CalendarWeek(weekNumber, [day]));
            }
            else {
                week.days.push(day);
            }
            return weeks;
        }, []);
        const dayPickerMonth = new index_js_1.CalendarMonth(month, weeks);
        months.push(dayPickerMonth);
        return months;
    }, []);
    if (!props.reverseMonths) {
        return dayPickerMonths;
    }
    else {
        return dayPickerMonths.reverse();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE1vbnRocy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUM5QixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNsRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsU0FBUyxTQUFTLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTztJQUNuRCxNQUFNLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLFdBQVcsR0FBRyxHQUFHLE9BQU8sQ0FBQztJQUM5SixNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzNELE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxDQUFDLGlCQUFpQjtZQUNoRCxDQUFDLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQztZQUN0QyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU87Z0JBQ1gsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLENBQUMsaUJBQWlCO1lBQzlDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7WUFDM0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPO2dCQUNYLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNqQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLHlDQUF5QztRQUN6QyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckMsT0FBTyxJQUFJLElBQUksb0JBQW9CLElBQUksSUFBSSxJQUFJLGtCQUFrQixDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxzQkFBc0IsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2pFLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLHNCQUFzQixFQUFFLENBQUM7WUFDakUsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNyQyxNQUFNLFNBQVMsR0FBRyxzQkFBc0IsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO2dCQUM3RCxPQUFPLENBQUMsSUFBSSxHQUFHLGtCQUFrQjtvQkFDN0IsSUFBSSxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxDQUFDO1lBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLENBQUM7UUFDRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQzVDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BFLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLENBQUM7WUFDbEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNSLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxDQUFDO2lCQUNJLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsQ0FBQztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNQLE1BQU0sY0FBYyxHQUFHLElBQUksVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEUsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1QixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDUCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sZUFBZSxDQUFDO0lBQzNCLENBQUM7U0FDSSxDQUFDO1FBQ0YsT0FBTyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckMsQ0FBQztBQUNMLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE1vbnRocy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TW9udGhzID0gZ2V0TW9udGhzO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9jbGFzc2VzL2luZGV4LmpzXCIpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBtb250aHMgdG8gZGlzcGxheSBpbiB0aGUgY2FsZW5kYXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgYENhbGVuZGFyTW9udGhgIG9iamVjdHMgZm9yIGVhY2ggbW9udGggdG8gYmVcbiAqIGRpc3BsYXllZCwgaW5jbHVkaW5nIHRoZWlyIHdlZWtzIGFuZCBkYXlzLCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgZGlzcGxheVxuICogbW9udGhzIGFuZCBkYXRlcy5cbiAqXG4gKiBAcGFyYW0gZGlzcGxheU1vbnRocyBUaGUgbW9udGhzIChhcyBkYXRlcykgdG8gZGlzcGxheSBpbiB0aGUgY2FsZW5kYXIuXG4gKiBAcGFyYW0gZGF0ZXMgVGhlIGRhdGVzIHRvIGRpc3BsYXkgaW4gdGhlIGNhbGVuZGFyLlxuICogQHBhcmFtIHByb3BzIE9wdGlvbnMgZnJvbSB0aGUgRGF5UGlja2VyIHByb3BzIGNvbnRleHQuXG4gKiBAcGFyYW0gZGF0ZUxpYiBUaGUgZGF0ZSBsaWJyYXJ5IHRvIHVzZSBmb3IgZGF0ZSBtYW5pcHVsYXRpb24uXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBgQ2FsZW5kYXJNb250aGAgb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIG1vbnRocyB0b1xuICogICBkaXNwbGF5LlxuICovXG5mdW5jdGlvbiBnZXRNb250aHMoZGlzcGxheU1vbnRocywgZGF0ZXMsIHByb3BzLCBkYXRlTGliKSB7XG4gICAgY29uc3QgeyBhZGREYXlzLCBlbmRPZkJyb2FkY2FzdFdlZWssIGVuZE9mSVNPV2VlaywgZW5kT2ZNb250aCwgZW5kT2ZXZWVrLCBnZXRJU09XZWVrLCBnZXRXZWVrLCBzdGFydE9mQnJvYWRjYXN0V2Vlaywgc3RhcnRPZklTT1dlZWssIHN0YXJ0T2ZXZWVrLCB9ID0gZGF0ZUxpYjtcbiAgICBjb25zdCBkYXlQaWNrZXJNb250aHMgPSBkaXNwbGF5TW9udGhzLnJlZHVjZSgobW9udGhzLCBtb250aCkgPT4ge1xuICAgICAgICBjb25zdCBmaXJzdERhdGVPZkZpcnN0V2VlayA9IHByb3BzLmJyb2FkY2FzdENhbGVuZGFyXG4gICAgICAgICAgICA/IHN0YXJ0T2ZCcm9hZGNhc3RXZWVrKG1vbnRoLCBkYXRlTGliKVxuICAgICAgICAgICAgOiBwcm9wcy5JU09XZWVrXG4gICAgICAgICAgICAgICAgPyBzdGFydE9mSVNPV2Vlayhtb250aClcbiAgICAgICAgICAgICAgICA6IHN0YXJ0T2ZXZWVrKG1vbnRoKTtcbiAgICAgICAgY29uc3QgbGFzdERhdGVPZkxhc3RXZWVrID0gcHJvcHMuYnJvYWRjYXN0Q2FsZW5kYXJcbiAgICAgICAgICAgID8gZW5kT2ZCcm9hZGNhc3RXZWVrKG1vbnRoKVxuICAgICAgICAgICAgOiBwcm9wcy5JU09XZWVrXG4gICAgICAgICAgICAgICAgPyBlbmRPZklTT1dlZWsoZW5kT2ZNb250aChtb250aCkpXG4gICAgICAgICAgICAgICAgOiBlbmRPZldlZWsoZW5kT2ZNb250aChtb250aCkpO1xuICAgICAgICAvKiogVGhlIGRhdGVzIHRvIGRpc3BsYXkgaW4gdGhlIG1vbnRoLiAqL1xuICAgICAgICBjb25zdCBtb250aERhdGVzID0gZGF0ZXMuZmlsdGVyKChkYXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZSA+PSBmaXJzdERhdGVPZkZpcnN0V2VlayAmJiBkYXRlIDw9IGxhc3REYXRlT2ZMYXN0V2VlaztcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IG5yT2ZEYXlzV2l0aEZpeGVkV2Vla3MgPSBwcm9wcy5icm9hZGNhc3RDYWxlbmRhciA/IDM1IDogNDI7XG4gICAgICAgIGlmIChwcm9wcy5maXhlZFdlZWtzICYmIG1vbnRoRGF0ZXMubGVuZ3RoIDwgbnJPZkRheXNXaXRoRml4ZWRXZWVrcykge1xuICAgICAgICAgICAgY29uc3QgZXh0cmFEYXRlcyA9IGRhdGVzLmZpbHRlcigoZGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRheXNUb0FkZCA9IG5yT2ZEYXlzV2l0aEZpeGVkV2Vla3MgLSBtb250aERhdGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRhdGUgPiBsYXN0RGF0ZU9mTGFzdFdlZWsgJiZcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA8PSBhZGREYXlzKGxhc3REYXRlT2ZMYXN0V2VlaywgZGF5c1RvQWRkKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1vbnRoRGF0ZXMucHVzaCguLi5leHRyYURhdGVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3ZWVrcyA9IG1vbnRoRGF0ZXMucmVkdWNlKCh3ZWVrcywgZGF0ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgd2Vla051bWJlciA9IHByb3BzLklTT1dlZWsgPyBnZXRJU09XZWVrKGRhdGUpIDogZ2V0V2VlayhkYXRlKTtcbiAgICAgICAgICAgIGNvbnN0IHdlZWsgPSB3ZWVrcy5maW5kKCh3ZWVrKSA9PiB3ZWVrLndlZWtOdW1iZXIgPT09IHdlZWtOdW1iZXIpO1xuICAgICAgICAgICAgY29uc3QgZGF5ID0gbmV3IGluZGV4X2pzXzEuQ2FsZW5kYXJEYXkoZGF0ZSwgbW9udGgsIGRhdGVMaWIpO1xuICAgICAgICAgICAgaWYgKCF3ZWVrKSB7XG4gICAgICAgICAgICAgICAgd2Vla3MucHVzaChuZXcgaW5kZXhfanNfMS5DYWxlbmRhcldlZWsod2Vla051bWJlciwgW2RheV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHdlZWsuZGF5cy5wdXNoKGRheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2Vla3M7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgY29uc3QgZGF5UGlja2VyTW9udGggPSBuZXcgaW5kZXhfanNfMS5DYWxlbmRhck1vbnRoKG1vbnRoLCB3ZWVrcyk7XG4gICAgICAgIG1vbnRocy5wdXNoKGRheVBpY2tlck1vbnRoKTtcbiAgICAgICAgcmV0dXJuIG1vbnRocztcbiAgICB9LCBbXSk7XG4gICAgaWYgKCFwcm9wcy5yZXZlcnNlTW9udGhzKSB7XG4gICAgICAgIHJldHVybiBkYXlQaWNrZXJNb250aHM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZGF5UGlja2VyTW9udGhzLnJldmVyc2UoKTtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=