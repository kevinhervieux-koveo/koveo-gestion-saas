4aa9bd6ed0d1a6ccff66d361720ed0e5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Settings;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const separator_1 = require("@/components/ui/separator");
const textarea_1 = require("@/components/ui/textarea");
const alert_dialog_1 = require("@/components/ui/alert-dialog");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const use_toast_1 = require("@/hooks/use-toast");
const use_auth_1 = require("@/hooks/use-auth");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const lucide_react_1 = require("lucide-react");
const zod_2 = require("zod");
const use_language_1 = require("@/hooks/use-language");
// Form schemas
const profileSchema = zod_2.z.object({
    firstName: zod_2.z.string().min(1, 'First name is required (example: Jean)').max(50, 'First name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'First name can only contain letters, spaces, apostrophes and hyphens'),
    lastName: zod_2.z.string().min(1, 'Last name is required (example: Dupont)').max(50, 'Last name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'Last name can only contain letters, spaces, apostrophes and hyphens'),
    email: zod_2.z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: jean.dupont@email.com)'),
    username: zod_2.z.string().min(3, 'Username must be between 3 and 30 characters (example: jdupont)').max(30, 'Username must be between 3 and 30 characters (example: jdupont)').regex(/^[a-zA-Z0-9._-]+$/, 'Username can only contain letters, numbers, dots, underscores and hyphens'),
    phone: zod_2.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return /^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/.test(val);
    }, 'Phone number must be a valid North American format (example: (514) 123-4567)'),
    language: zod_2.z.enum(['fr', 'en']),
});
const passwordSchema = zod_2.z
    .object({
    currentPassword: zod_2.z.string().min(1, 'Current password is required to verify your identity'),
    newPassword: zod_2.z.string()
        .min(8, 'New password must be at least 8 characters long (example: MonNouveauMotDePasse123!)')
        .max(100, 'New password must be less than 100 characters')
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'New password must contain at least one lowercase letter, one uppercase letter, and one number'),
    confirmPassword: zod_2.z.string().min(1, 'Please confirm your new password by typing it again'),
})
    .refine((data) => data.newPassword === data.confirmPassword, {
    message: "Passwords don't match - please enter the same password in both fields",
    path: ['confirmPassword'],
});
const deleteAccountSchema = zod_2.z.object({
    confirmEmail: zod_2.z.string().min(1, 'Email confirmation is required to delete account').email('Please enter a valid email address that matches your account'),
    reason: zod_2.z.string().max(500, 'Reason must be less than 500 characters').optional(),
});
/**
 *
 */
function Settings() {
    const { user, logout } = (0, use_auth_1.useAuth)();
    const { toast } = (0, use_toast_1.useToast)();
    const { t } = (0, use_language_1.useLanguage)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [showDeleteDialog, setShowDeleteDialog] = (0, react_1.useState)(false);
    const [showCurrentPassword, setShowCurrentPassword] = (0, react_1.useState)(false);
    const [showNewPassword, setShowNewPassword] = (0, react_1.useState)(false);
    const [showConfirmPassword, setShowConfirmPassword] = (0, react_1.useState)(false);
    // Profile form
    const profileForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(profileSchema),
        defaultValues: {
            firstName: user?.firstName || '',
            lastName: user?.lastName || '',
            email: user?.email || '',
            username: user?.username || '',
            phone: user?.phone || '',
            language: user?.language || 'fr',
        },
    });
    // Password form
    const passwordForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(passwordSchema),
        defaultValues: {
            currentPassword: '',
            newPassword: '',
            confirmPassword: '',
        },
    });
    // Delete account form
    const deleteForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(deleteAccountSchema),
        defaultValues: {
            confirmEmail: '',
            reason: '',
        },
    });
    // Profile update mutation
    const profileMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const response = await fetch('/api/users/me', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(data),
            });
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to update profile');
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Profile updated',
                description: 'Your profile has been updated successfully.',
            });
            queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to update profile',
                variant: 'destructive',
            });
        },
    });
    // Password change mutation
    const passwordMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const response = await fetch('/api/users/me/change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({
                    currentPassword: data.currentPassword,
                    newPassword: data.newPassword,
                }),
            });
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to change password');
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Password changed',
                description: 'Your password has been changed successfully.',
            });
            passwordForm.reset();
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to change password',
                variant: 'destructive',
            });
        },
    });
    // Data export mutation
    const exportMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            const response = await fetch('/api/users/me/data-export', {
                credentials: 'include',
            });
            if (!response.ok) {
                throw new Error('Failed to export data');
            }
            return response.blob();
        },
        onSuccess: (blob) => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `user-data-export-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            toast({
                title: 'Data exported',
                description: 'Your data has been downloaded successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Export failed',
                description: error.message || 'Failed to export data',
                variant: 'destructive',
            });
        },
    });
    // Account deletion mutation
    const deleteMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const response = await fetch('/api/users/me/delete-account', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(data),
            });
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to delete account');
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Account deleted',
                description: 'Your account and all associated data have been permanently deleted.',
            });
            logout();
        },
        onError: (error) => {
            toast({
                title: 'Deletion failed',
                description: error.message || 'Failed to delete account',
                variant: 'destructive',
            });
        },
    });
    const onProfileSubmit = (data) => {
        profileMutation.mutate(data);
    };
    const onPasswordSubmit = (data) => {
        passwordMutation.mutate(data);
    };
    const onDeleteSubmit = (data) => {
        deleteMutation.mutate(data);
        setShowDeleteDialog(false);
    };
    const handleDataExport = () => {
        exportMutation.mutate();
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', "data-testid": 'settings-page', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('settings'), subtitle: t('manageAccountSettings') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-4xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.User, { className: 'w-5 h-5' }), t('generalSettings')] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...profileForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: profileForm.handleSubmit(onProfileSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: profileForm.control, name: 'firstName', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('firstName') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { "data-testid": 'input-first-name', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: profileForm.control, name: 'lastName', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('lastName') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { "data-testid": 'input-last-name', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: profileForm.control, name: 'email', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('email') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'email', "data-testid": 'input-email', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: profileForm.control, name: 'username', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('username') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { "data-testid": 'input-username', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: profileForm.control, name: 'phone', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('phone') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'tel', "data-testid": 'input-phone', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: profileForm.control, name: 'language', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('language') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, "data-testid": 'select-language', children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectLanguage') }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'fr', children: "Fran\u00E7ais" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'en', children: "English" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'submit', "data-testid": 'button-save-profile', disabled: profileMutation.isPending, className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: 'w-4 h-4' }), profileMutation.isPending ? t('saving') : t('saveChanges')] })] }) }) })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Key, { className: 'w-5 h-5' }), t('securitySettings')] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...passwordForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: passwordForm.handleSubmit(onPasswordSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: passwordForm.control, name: 'currentPassword', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('currentPassword') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { type: showCurrentPassword ? 'text' : 'password', autoComplete: "current-password", "data-testid": 'input-current-password', ...field }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowCurrentPassword(!showCurrentPassword), "data-testid": 'toggle-current-password', children: showCurrentPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4' })) })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: passwordForm.control, name: 'newPassword', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('newPassword') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { type: showNewPassword ? 'text' : 'password', autoComplete: "new-password", "data-testid": 'input-new-password', ...field }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowNewPassword(!showNewPassword), "data-testid": 'toggle-new-password', children: showNewPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4' })) })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: passwordForm.control, name: 'confirmPassword', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('confirmNewPassword') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { type: showConfirmPassword ? 'text' : 'password', autoComplete: "new-password", "data-testid": 'input-confirm-password', ...field }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowConfirmPassword(!showConfirmPassword), "data-testid": 'toggle-confirm-password', children: showConfirmPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4' })) })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'submit', "data-testid": 'button-change-password', disabled: passwordMutation.isPending, className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'w-4 h-4' }), passwordMutation.isPending ? t('changing') : t('changePassword')] })] }) }) })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Settings, { className: 'w-5 h-5' }), t('additionalSettings'), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'text-xs ml-2', children: t('future') })] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-4', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', className: 'h-auto p-4 flex flex-col space-y-2', disabled: true, "data-testid": 'button-notifications', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bell, { className: 'w-6 h-6' }), (0, jsx_runtime_1.jsx)("span", { children: t('notifications') }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: t('future') })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', className: 'h-auto p-4 flex flex-col space-y-2', disabled: true, "data-testid": 'button-theme', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Palette, { className: 'w-6 h-6' }), (0, jsx_runtime_1.jsx)("span", { children: t('theme') }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: t('future') })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', className: 'h-auto p-4 flex flex-col space-y-2', disabled: true, "data-testid": 'button-advanced', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Globe, { className: 'w-6 h-6' }), (0, jsx_runtime_1.jsx)("span", { children: t('advanced') }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: t('future') })] })] }) })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'w-5 h-5' }), t('privacyDataCompliance')] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'bg-blue-50 dark:bg-blue-950 p-4 rounded-lg border border-blue-200 dark:border-blue-800', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-semibold text-blue-900 dark:text-blue-100 mb-2', children: t('yourDataRights') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-blue-700 dark:text-blue-300 text-sm mb-3', children: t('dataRightsDescription') })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-4 border rounded-lg', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1', children: [(0, jsx_runtime_1.jsx)("h5", { className: 'font-medium', children: "Download Your Data" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-muted-foreground', children: "Export all your personal data including profile information, bills, documents, and activity history." })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleDataExport, disabled: exportMutation.isPending, className: 'flex items-center gap-2', "data-testid": 'button-export-data', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: 'w-4 h-4' }), exportMutation.isPending ? t('exporting') : t('exportData')] })] }), (0, jsx_runtime_1.jsx)(separator_1.Separator, {}), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-4 border rounded-lg border-red-200 dark:border-red-800', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1', children: [(0, jsx_runtime_1.jsx)("h5", { className: 'font-medium text-red-900 dark:text-red-100', children: "Delete Your Account" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-700 dark:text-red-300', children: "Permanently delete your account and all associated data. This action cannot be undone." })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'destructive', onClick: () => setShowDeleteDialog(true), className: 'flex items-center gap-2', "data-testid": 'button-delete-account', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'w-4 h-4' }), "Delete Account"] })] })] })] })] })] }) }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialog, { open: showDeleteDialog, onOpenChange: setShowDeleteDialog, children: (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogContent, { "data-testid": 'dialog-delete-account', children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogHeader, { children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogTitle, { className: 'flex items-center gap-2 text-red-600', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'w-5 h-5' }), "Delete Account Permanently"] }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogDescription, { children: ["This will permanently delete your account and all associated data, including:", (0, jsx_runtime_1.jsxs)("ul", { className: 'list-disc list-inside mt-2 space-y-1', children: [(0, jsx_runtime_1.jsx)("li", { children: "Your profile information" }), (0, jsx_runtime_1.jsx)("li", { children: "All documents and files" }), (0, jsx_runtime_1.jsx)("li", { children: "Bill history and payments" }), (0, jsx_runtime_1.jsx)("li", { children: "Maintenance requests" }), (0, jsx_runtime_1.jsx)("li", { children: "All other personal data" })] }), (0, jsx_runtime_1.jsx)("strong", { className: 'text-red-600 block mt-3', children: "This action cannot be undone." })] })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...deleteForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: deleteForm.handleSubmit(onDeleteSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: deleteForm.control, name: 'confirmEmail', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Confirm your email to proceed" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'email', placeholder: user?.email, "data-testid": 'input-confirm-email', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: deleteForm.control, name: 'reason', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Reason for deletion (optional)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: 'Let us know why you are deleting your account...', "data-testid": 'textarea-delete-reason', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setShowDeleteDialog(false), "data-testid": 'button-cancel-delete', children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', variant: 'destructive', disabled: deleteMutation.isPending, "data-testid": 'button-confirm-delete', children: deleteMutation.isPending ? 'Deleting...' : 'Delete Account' })] })] }) })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,