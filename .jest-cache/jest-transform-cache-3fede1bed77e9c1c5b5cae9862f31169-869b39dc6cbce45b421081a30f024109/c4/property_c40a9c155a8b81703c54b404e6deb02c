3a148e916852031515288c9b25f65b8e
"use strict";

/* istanbul ignore next */
function cov_amdaqotu5() {
  var path = "/home/runner/workspace/shared/schemas/property.ts";
  var hash = "01d8f7c017eccfab7b8268fee789e426c7e7a70d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/shared/schemas/property.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 580
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 14
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 92
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "8": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 22,
          column: 3
        }
      },
      "9": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 23,
          column: 96
        }
      },
      "10": {
        start: {
          line: 29,
          column: 0
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "11": {
        start: {
          line: 35,
          column: 26
        },
        end: {
          line: 35,
          column: 49
        }
      },
      "12": {
        start: {
          line: 64,
          column: 0
        },
        end: {
          line: 84,
          column: 3
        }
      },
      "13": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "14": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 105,
          column: 3
        }
      },
      "15": {
        start: {
          line: 95,
          column: 26
        },
        end: {
          line: 95,
          column: 41
        }
      },
      "16": {
        start: {
          line: 98,
          column: 26
        },
        end: {
          line: 98,
          column: 47
        }
      },
      "17": {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 123,
          column: 3
        }
      },
      "18": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 146,
          column: 3
        }
      },
      "19": {
        start: {
          line: 136,
          column: 26
        },
        end: {
          line: 136,
          column: 46
        }
      },
      "20": {
        start: {
          line: 139,
          column: 82
        },
        end: {
          line: 139,
          column: 97
        }
      },
      "21": {
        start: {
          line: 151,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      "22": {
        start: {
          line: 157,
          column: 26
        },
        end: {
          line: 157,
          column: 49
        }
      },
      "23": {
        start: {
          line: 160,
          column: 26
        },
        end: {
          line: 160,
          column: 41
        }
      },
      "24": {
        start: {
          line: 171,
          column: 0
        },
        end: {
          line: 185,
          column: 3
        }
      },
      "25": {
        start: {
          line: 177,
          column: 26
        },
        end: {
          line: 177,
          column: 41
        }
      },
      "26": {
        start: {
          line: 180,
          column: 26
        },
        end: {
          line: 180,
          column: 49
        }
      },
      "27": {
        start: {
          line: 190,
          column: 0
        },
        end: {
          line: 202,
          column: 3
        }
      },
      "28": {
        start: {
          line: 196,
          column: 26
        },
        end: {
          line: 196,
          column: 41
        }
      },
      "29": {
        start: {
          line: 197,
          column: 78
        },
        end: {
          line: 197,
          column: 101
        }
      },
      "30": {
        start: {
          line: 204,
          column: 0
        },
        end: {
          line: 224,
          column: 3
        }
      },
      "31": {
        start: {
          line: 225,
          column: 0
        },
        end: {
          line: 237,
          column: 3
        }
      },
      "32": {
        start: {
          line: 238,
          column: 0
        },
        end: {
          line: 244,
          column: 3
        }
      },
      "33": {
        start: {
          line: 245,
          column: 0
        },
        end: {
          line: 252,
          column: 3
        }
      },
      "34": {
        start: {
          line: 253,
          column: 0
        },
        end: {
          line: 283,
          column: 3
        }
      },
      "35": {
        start: {
          line: 284,
          column: 0
        },
        end: {
          line: 290,
          column: 3
        }
      },
      "36": {
        start: {
          line: 291,
          column: 0
        },
        end: {
          line: 296,
          column: 3
        }
      },
      "37": {
        start: {
          line: 297,
          column: 0
        },
        end: {
          line: 302,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 35,
            column: 21
          }
        },
        loc: {
          start: {
            line: 35,
            column: 26
          },
          end: {
            line: 35,
            column: 49
          }
        },
        line: 35
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 70,
            column: 21
          }
        },
        loc: {
          start: {
            line: 70,
            column: 26
          },
          end: {
            line: 70,
            column: 46
          }
        },
        line: 70
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        },
        loc: {
          start: {
            line: 95,
            column: 26
          },
          end: {
            line: 95,
            column: 41
          }
        },
        line: 95
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 98,
            column: 20
          },
          end: {
            line: 98,
            column: 21
          }
        },
        loc: {
          start: {
            line: 98,
            column: 26
          },
          end: {
            line: 98,
            column: 47
          }
        },
        line: 98
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 136,
            column: 20
          },
          end: {
            line: 136,
            column: 21
          }
        },
        loc: {
          start: {
            line: 136,
            column: 26
          },
          end: {
            line: 136,
            column: 46
          }
        },
        line: 136
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 139,
            column: 76
          },
          end: {
            line: 139,
            column: 77
          }
        },
        loc: {
          start: {
            line: 139,
            column: 82
          },
          end: {
            line: 139,
            column: 97
          }
        },
        line: 139
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 20
          },
          end: {
            line: 157,
            column: 21
          }
        },
        loc: {
          start: {
            line: 157,
            column: 26
          },
          end: {
            line: 157,
            column: 49
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 160,
            column: 21
          }
        },
        loc: {
          start: {
            line: 160,
            column: 26
          },
          end: {
            line: 160,
            column: 41
          }
        },
        line: 160
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 177,
            column: 20
          },
          end: {
            line: 177,
            column: 21
          }
        },
        loc: {
          start: {
            line: 177,
            column: 26
          },
          end: {
            line: 177,
            column: 41
          }
        },
        line: 177
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 180,
            column: 20
          },
          end: {
            line: 180,
            column: 21
          }
        },
        loc: {
          start: {
            line: 180,
            column: 26
          },
          end: {
            line: 180,
            column: 49
          }
        },
        line: 180
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 196,
            column: 20
          },
          end: {
            line: 196,
            column: 21
          }
        },
        loc: {
          start: {
            line: 196,
            column: 26
          },
          end: {
            line: 196,
            column: 41
          }
        },
        line: 196
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 197,
            column: 72
          },
          end: {
            line: 197,
            column: 73
          }
        },
        loc: {
          start: {
            line: 197,
            column: 78
          },
          end: {
            line: 197,
            column: 101
          }
        },
        line: 197
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {},
    inputSourceMap: {
      file: "/home/runner/workspace/shared/schemas/property.ts",
      mappings: "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",
      names: [],
      sources: ["/home/runner/workspace/shared/schemas/property.ts"],
      sourcesContent: ["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  timestamp,\n  jsonb,\n  uuid,\n  pgEnum,\n  boolean,\n  integer,\n  decimal,\n  numeric,\n  date,\n  varchar,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\nimport { users, organizations } from './core';\n\n// Property enums\nexport const buildingTypeEnum = pgEnum('building_type', ['condo', 'appartement']);\n\nexport const contactEntityEnum = pgEnum('contact_entity', [\n  'organization',\n  'building',\n  'residence',\n]);\n\nexport const contactCategoryEnum = pgEnum('contact_category', [\n  'resident',\n  'manager',\n  'tenant',\n  'maintenance',\n  'emergency',\n  'other',\n]);\n\nexport const bookingStatusEnum = pgEnum('booking_status', ['confirmed', 'cancelled']);\n\n// Property tables\n/**\n * Buildings table storing properties managed by organizations.\n * Each building represents a distinct property managed by an organization.\n */\nexport const buildings = pgTable('buildings', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  organizationId: varchar('organization_id')\n    .notNull()\n    .references(() => organizations.id, { onDelete: 'cascade' }),\n  name: text('name').notNull(),\n  address: text('address').notNull(),\n  city: text('city').notNull(),\n  province: text('province').notNull().default('QC'),\n  postalCode: text('postal_code').notNull(),\n  buildingType: buildingTypeEnum('building_type').notNull(),\n  yearBuilt: integer('year_built'),\n  totalUnits: integer('total_units').notNull(),\n  totalFloors: integer('total_floors'),\n  parkingSpaces: integer('parking_spaces'),\n  storageSpaces: integer('storage_spaces'),\n  amenities: jsonb('amenities'), // Array of amenities\n  managementCompany: text('management_company'),\n  bankAccountNumber: text('bank_account_number'),\n  bankAccountNotes: text('bank_account_notes'), // For reconciliation notes when updating account number\n  bankAccountUpdatedAt: timestamp('bank_account_updated_at'),\n  bankAccountStartDate: timestamp('bank_account_start_date'), // Date when account started tracking\n  bankAccountStartAmount: numeric('bank_account_start_amount', { precision: 10, scale: 2 }), // Starting balance\n  bankAccountMinimums: text('bank_account_minimums'), // JSON string of minimum balance settings\n  inflationSettings: text('inflation_settings'), // JSON string of inflation configuration by category\n  isActive: boolean('is_active').notNull().default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Residences table storing individual housing units within buildings.\n * Represents apartments, condos, or units that can be occupied by tenants.\n */\nexport const residences = pgTable('residences', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id, { onDelete: 'cascade' }),\n  unitNumber: text('unit_number').notNull(),\n  floor: integer('floor'),\n  squareFootage: decimal('square_footage', { precision: 8, scale: 2 }),\n  bedrooms: integer('bedrooms'),\n  bathrooms: decimal('bathrooms', { precision: 3, scale: 1 }),\n  balcony: boolean('balcony').default(false),\n  parkingSpaceNumbers: text('parking_space_numbers').array(),\n  storageSpaceNumbers: text('storage_space_numbers').array(),\n  ownershipPercentage: decimal('ownership_percentage', { precision: 5, scale: 2 }), // For condos, 0-100 scale\n  monthlyFees: decimal('monthly_fees', { precision: 10, scale: 2 }),\n  isActive: boolean('is_active').notNull().default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * User-Residence relationship table to track user assignments to residences.\n * Supports owner, tenant, and occupant relationships with date ranges.\n */\nexport const userResidences = pgTable('user_residences', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: varchar('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  residenceId: varchar('residence_id')\n    .notNull()\n    .references(() => residences.id, { onDelete: 'cascade' }),\n  relationshipType: text('relationship_type').notNull(), // 'owner', 'tenant', 'occupant'\n  startDate: date('start_date').notNull(),\n  endDate: date('end_date'),\n  isActive: boolean('is_active').notNull().default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Contacts table storing contact information for organizations, buildings, and residences.\n * Allows tracking various types of contacts like residents, managers, tenants, maintenance, etc.\n */\nexport const contacts = pgTable('contacts', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  name: text('name').notNull(),\n  email: text('email'),\n  phone: text('phone'),\n  entity: contactEntityEnum('entity').notNull(),\n  entityId: varchar('entity_id').notNull(),\n  contactCategory: contactCategoryEnum('contact_category').notNull(),\n  isActive: boolean('is_active').notNull().default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Common spaces table storing shared facilities within buildings.\n * Represents spaces like gyms, lounges, meeting rooms that can be reserved by residents.\n */\nexport const commonSpaces = pgTable('common_spaces', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  name: varchar('name', { length: 255 }).notNull(),\n  description: text('description'),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id, { onDelete: 'cascade' }),\n  isReservable: boolean('is_reservable').notNull().default(false),\n  capacity: integer('capacity'),\n  contactPersonId: varchar('contact_person_id').references(() => users.id, { onDelete: 'set null' }),\n  openingHours: jsonb('opening_hours'), // Enhanced structure with isOpen, breaks\n  availableDays: jsonb('available_days'), // Array of available days: ['monday', 'tuesday', etc.]\n  unavailablePeriods: jsonb('unavailable_periods'), // Specific periods when space is unavailable\n  bookingRules: text('booking_rules'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Bookings table for common space reservations.\n * Tracks user reservations for common spaces with time slots and status.\n */\nexport const bookings = pgTable('bookings', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  commonSpaceId: varchar('common_space_id')\n    .notNull()\n    .references(() => commonSpaces.id, { onDelete: 'cascade' }),\n  userId: varchar('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  startTime: timestamp('start_time', { withTimezone: true }).notNull(),\n  endTime: timestamp('end_time', { withTimezone: true }).notNull(),\n  status: bookingStatusEnum('status').notNull().default('confirmed'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * User booking restrictions table to manage blocked users.\n * Allows administrators to block specific users from booking certain common spaces.\n */\nexport const userBookingRestrictions = pgTable('user_booking_restrictions', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: varchar('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  commonSpaceId: varchar('common_space_id')\n    .notNull()\n    .references(() => commonSpaces.id, { onDelete: 'cascade' }),\n  isBlocked: boolean('is_blocked').notNull().default(true),\n  reason: text('reason'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * User time limits table to manage booking time quotas.\n * Allows setting monthly/yearly limits on how much time users can reserve.\n */\nexport const userTimeLimits = pgTable('user_time_limits', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: varchar('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  commonSpaceId: varchar('common_space_id').references(() => commonSpaces.id, { onDelete: 'cascade' }), // null means applies to all spaces\n  limitType: varchar('limit_type', { length: 20 }).notNull(), // 'monthly' or 'yearly'\n  limitHours: integer('limit_hours').notNull(), // Maximum hours allowed\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Insert schemas\nexport const insertBuildingSchema = z.object({\n  organizationId: z.string().uuid(),\n  name: z.string().min(1),\n  address: z.string(),\n  city: z.string(),\n  province: z.string().default('QC'),\n  postalCode: z.string(),\n  buildingType: z.string(),\n  yearBuilt: z.number().int().optional(),\n  totalUnits: z.number().int().optional(),\n  totalFloors: z.number().int().optional(),\n  parkingSpaces: z.number().int().optional(),\n  storageSpaces: z.number().int().optional(),\n  amenities: z.array(z.string()).optional(),\n  managementCompany: z.string().optional(),\n  bankAccountNumber: z.string().optional(),\n  bankAccountNotes: z.string().optional(),\n  bankAccountStartDate: z.date().optional(),\n  bankAccountStartAmount: z.number().optional(),\n  bankAccountMinimums: z.record(z.string(), z.number()).optional(),\n});\n\nexport const insertResidenceSchema = z.object({\n  buildingId: z.string().uuid(),\n  unitNumber: z.string(),\n  floor: z.number().int().optional(),\n  squareFootage: z.number().optional(),\n  bedrooms: z.number().int().optional(),\n  bathrooms: z.number().optional(),\n  balcony: z.boolean().optional(),\n  parkingSpaceNumbers: z.array(z.string()).optional(),\n  storageSpaceNumbers: z.array(z.string()).optional(),\n  ownershipPercentage: z.number().optional(),\n  monthlyFees: z.number().optional(),\n});\n\nexport const insertUserResidenceSchema = z.object({\n  userId: z.string().uuid(),\n  residenceId: z.string().uuid(),\n  relationshipType: z.string(),\n  startDate: z.date(),\n  endDate: z.date().optional(),\n});\n\nexport const insertContactSchema = z.object({\n  name: z.string(),\n  email: z.string().email().optional(),\n  phone: z.string().optional(),\n  entity: z.string(),\n  entityId: z.string().uuid(),\n  contactCategory: z.string(),\n});\n\nexport const insertCommonSpaceSchema = z.object({\n  name: z.string().min(1).max(255),\n  description: z.string().optional(),\n  buildingId: z.string().uuid(),\n  isReservable: z.boolean().default(false),\n  capacity: z.number().int().optional(),\n  contactPersonId: z.string().uuid().optional(),\n  openingHours: z\n    .array(\n      z.object({\n        day: z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']),\n        open: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),\n        close: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),\n        isOpen: z.boolean().default(true), // Whether the space is open on this day\n        breaks: z.array(\n          z.object({\n            start: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),\n            end: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),\n            reason: z.string().optional(), // e.g., \"Cleaning\", \"Maintenance\"\n          })\n        ).optional(), // Optional breaks within opening hours (like lunch breaks)\n      })\n    )\n    .optional(),\n  availableDays: z\n    .array(\n      z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'])\n    )\n    .optional(),\n  unavailablePeriods: z.array(\n    z.object({\n      startDate: z.string().datetime(),\n      endDate: z.string().datetime(),\n      reason: z.string().optional(), // e.g., \"Renovation\", \"Maintenance\", \"Holiday closure\"\n      recurrence: z.enum(['none', 'weekly', 'monthly', 'yearly']).default('none'),\n    })\n  ).optional(), // Specific periods when space is unavailable\n  bookingRules: z.string().optional(),\n});\n\nexport const insertBookingSchema = z.object({\n  commonSpaceId: z.string().uuid(),\n  userId: z.string().uuid(),\n  startTime: z.date(),\n  endTime: z.date(),\n  status: z.enum(['confirmed', 'cancelled']).default('confirmed'),\n});\n\nexport const insertUserBookingRestrictionSchema = z.object({\n  userId: z.string().uuid(),\n  commonSpaceId: z.string().uuid(),\n  isBlocked: z.boolean().default(true),\n  reason: z.string().optional(),\n});\n\n// Types\n/**\n *\n */\nexport type InsertBuilding = z.infer<typeof insertBuildingSchema>;\n/**\n *\n */\nexport type Building = typeof buildings.$inferSelect;\n\n/**\n *\n */\nexport type InsertResidence = z.infer<typeof insertResidenceSchema>;\n/**\n *\n */\nexport type Residence = typeof residences.$inferSelect;\n\n/**\n *\n */\nexport type InsertUserResidence = z.infer<typeof insertUserResidenceSchema>;\n/**\n *\n */\nexport type UserResidence = typeof userResidences.$inferSelect;\n\n/**\n *\n */\nexport type InsertContact = z.infer<typeof insertContactSchema>;\n/**\n *\n */\nexport type Contact = typeof contacts.$inferSelect;\n\n/**\n *\n */\nexport type InsertCommonSpace = z.infer<typeof insertCommonSpaceSchema>;\n/**\n *\n */\nexport type CommonSpace = typeof commonSpaces.$inferSelect;\n\n/**\n *\n */\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n/**\n *\n */\nexport type Booking = typeof bookings.$inferSelect;\n\nexport const insertUserTimeLimitSchema = z.object({\n  userId: z.string().uuid(),\n  commonSpaceId: z.string().uuid().optional(), // null means applies to all spaces\n  limitType: z.enum(['monthly', 'yearly']),\n  limitHours: z.number().int().min(1).max(8760), // Max 1 year worth of hours\n});\n\n/**\n *\n */\nexport type InsertUserBookingRestriction = z.infer<typeof insertUserBookingRestrictionSchema>;\n/**\n *\n */\nexport type UserBookingRestriction = typeof userBookingRestrictions.$inferSelect;\n\n/**\n *\n */\nexport type InsertUserTimeLimit = z.infer<typeof insertUserTimeLimitSchema>;\n/**\n *\n */\nexport type UserTimeLimit = typeof userTimeLimits.$inferSelect;\n\n// Relations - Temporarily commented out due to drizzle-orm version compatibility\n/*\nexport const buildingsRelations = relations(buildings, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [buildings.organizationId],\n    references: [organizations.id],\n  }),\n  residences: many(residences),\n}));\n*/\n\n/*\nexport const residencesRelations = relations(residences, ({ one, many }) => ({\n  building: one(buildings, {\n    fields: [residences.buildingId],\n    references: [buildings.id],\n  }),\n  userResidences: many(userResidences),\n}));\n*/\n\n/*\nexport const userResidencesRelations = relations(userResidences, ({ one }) => ({\n  user: one(users, {\n    fields: [userResidences.userId],\n    references: [users.id],\n  }),\n  residence: one(residences, {\n    fields: [userResidences.residenceId],\n    references: [residences.id],\n  }),\n}));\n*/\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "01d8f7c017eccfab7b8268fee789e426c7e7a70d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_amdaqotu5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_amdaqotu5();
cov_amdaqotu5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_amdaqotu5().s[1]++;
exports.insertUserTimeLimitSchema = exports.insertUserBookingRestrictionSchema = exports.insertBookingSchema = exports.insertCommonSpaceSchema = exports.insertContactSchema = exports.insertUserResidenceSchema = exports.insertResidenceSchema = exports.insertBuildingSchema = exports.userTimeLimits = exports.userBookingRestrictions = exports.bookings = exports.commonSpaces = exports.contacts = exports.userResidences = exports.residences = exports.buildings = exports.bookingStatusEnum = exports.contactCategoryEnum = exports.contactEntityEnum = exports.buildingTypeEnum = void 0;
const drizzle_orm_1 =
/* istanbul ignore next */
(cov_amdaqotu5().s[2]++, require("drizzle-orm"));
const pg_core_1 =
/* istanbul ignore next */
(cov_amdaqotu5().s[3]++, require("drizzle-orm/pg-core"));
const zod_1 =
/* istanbul ignore next */
(cov_amdaqotu5().s[4]++, require("zod"));
const core_1 =
/* istanbul ignore next */
(cov_amdaqotu5().s[5]++, require("./core"));
// Property enums
/* istanbul ignore next */
cov_amdaqotu5().s[6]++;
exports.buildingTypeEnum = (0, pg_core_1.pgEnum)('building_type', ['condo', 'appartement']);
/* istanbul ignore next */
cov_amdaqotu5().s[7]++;
exports.contactEntityEnum = (0, pg_core_1.pgEnum)('contact_entity', ['organization', 'building', 'residence']);
/* istanbul ignore next */
cov_amdaqotu5().s[8]++;
exports.contactCategoryEnum = (0, pg_core_1.pgEnum)('contact_category', ['resident', 'manager', 'tenant', 'maintenance', 'emergency', 'other']);
/* istanbul ignore next */
cov_amdaqotu5().s[9]++;
exports.bookingStatusEnum = (0, pg_core_1.pgEnum)('booking_status', ['confirmed', 'cancelled']);
// Property tables
/**
 * Buildings table storing properties managed by organizations.
 * Each building represents a distinct property managed by an organization.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[10]++;
exports.buildings = (0, pg_core_1.pgTable)('buildings', {
  id: (0, pg_core_1.varchar)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  organizationId: (0, pg_core_1.varchar)('organization_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[0]++;
    cov_amdaqotu5().s[11]++;
    return core_1.organizations.id;
  }, {
    onDelete: 'cascade'
  }),
  name: (0, pg_core_1.text)('name').notNull(),
  address: (0, pg_core_1.text)('address').notNull(),
  city: (0, pg_core_1.text)('city').notNull(),
  province: (0, pg_core_1.text)('province').notNull().default('QC'),
  postalCode: (0, pg_core_1.text)('postal_code').notNull(),
  buildingType: (0, exports.buildingTypeEnum)('building_type').notNull(),
  yearBuilt: (0, pg_core_1.integer)('year_built'),
  totalUnits: (0, pg_core_1.integer)('total_units').notNull(),
  totalFloors: (0, pg_core_1.integer)('total_floors'),
  parkingSpaces: (0, pg_core_1.integer)('parking_spaces'),
  storageSpaces: (0, pg_core_1.integer)('storage_spaces'),
  amenities: (0, pg_core_1.jsonb)('amenities'),
  // Array of amenities
  managementCompany: (0, pg_core_1.text)('management_company'),
  bankAccountNumber: (0, pg_core_1.text)('bank_account_number'),
  bankAccountNotes: (0, pg_core_1.text)('bank_account_notes'),
  // For reconciliation notes when updating account number
  bankAccountUpdatedAt: (0, pg_core_1.timestamp)('bank_account_updated_at'),
  bankAccountStartDate: (0, pg_core_1.timestamp)('bank_account_start_date'),
  // Date when account started tracking
  bankAccountStartAmount: (0, pg_core_1.numeric)('bank_account_start_amount', {
    precision: 10,
    scale: 2
  }),
  // Starting balance
  bankAccountMinimums: (0, pg_core_1.text)('bank_account_minimums'),
  // JSON string of minimum balance settings
  inflationSettings: (0, pg_core_1.text)('inflation_settings'),
  // JSON string of inflation configuration by category
  isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * Residences table storing individual housing units within buildings.
 * Represents apartments, condos, or units that can be occupied by tenants.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[12]++;
exports.residences = (0, pg_core_1.pgTable)('residences', {
  id: (0, pg_core_1.varchar)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  buildingId: (0, pg_core_1.varchar)('building_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[1]++;
    cov_amdaqotu5().s[13]++;
    return exports.buildings.id;
  }, {
    onDelete: 'cascade'
  }),
  unitNumber: (0, pg_core_1.text)('unit_number').notNull(),
  floor: (0, pg_core_1.integer)('floor'),
  squareFootage: (0, pg_core_1.decimal)('square_footage', {
    precision: 8,
    scale: 2
  }),
  bedrooms: (0, pg_core_1.integer)('bedrooms'),
  bathrooms: (0, pg_core_1.decimal)('bathrooms', {
    precision: 3,
    scale: 1
  }),
  balcony: (0, pg_core_1.boolean)('balcony').default(false),
  parkingSpaceNumbers: (0, pg_core_1.text)('parking_space_numbers').array(),
  storageSpaceNumbers: (0, pg_core_1.text)('storage_space_numbers').array(),
  ownershipPercentage: (0, pg_core_1.decimal)('ownership_percentage', {
    precision: 5,
    scale: 2
  }),
  // For condos, 0-100 scale
  monthlyFees: (0, pg_core_1.decimal)('monthly_fees', {
    precision: 10,
    scale: 2
  }),
  isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * User-Residence relationship table to track user assignments to residences.
 * Supports owner, tenant, and occupant relationships with date ranges.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[14]++;
exports.userResidences = (0, pg_core_1.pgTable)('user_residences', {
  id: (0, pg_core_1.varchar)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  userId: (0, pg_core_1.varchar)('user_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[2]++;
    cov_amdaqotu5().s[15]++;
    return core_1.users.id;
  }, {
    onDelete: 'cascade'
  }),
  residenceId: (0, pg_core_1.varchar)('residence_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[3]++;
    cov_amdaqotu5().s[16]++;
    return exports.residences.id;
  }, {
    onDelete: 'cascade'
  }),
  relationshipType: (0, pg_core_1.text)('relationship_type').notNull(),
  // 'owner', 'tenant', 'occupant'
  startDate: (0, pg_core_1.date)('start_date').notNull(),
  endDate: (0, pg_core_1.date)('end_date'),
  isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * Contacts table storing contact information for organizations, buildings, and residences.
 * Allows tracking various types of contacts like residents, managers, tenants, maintenance, etc.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[17]++;
exports.contacts = (0, pg_core_1.pgTable)('contacts', {
  id: (0, pg_core_1.uuid)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  name: (0, pg_core_1.text)('name').notNull(),
  email: (0, pg_core_1.text)('email'),
  phone: (0, pg_core_1.text)('phone'),
  entity: (0, exports.contactEntityEnum)('entity').notNull(),
  entityId: (0, pg_core_1.varchar)('entity_id').notNull(),
  contactCategory: (0, exports.contactCategoryEnum)('contact_category').notNull(),
  isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * Common spaces table storing shared facilities within buildings.
 * Represents spaces like gyms, lounges, meeting rooms that can be reserved by residents.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[18]++;
exports.commonSpaces = (0, pg_core_1.pgTable)('common_spaces', {
  id: (0, pg_core_1.varchar)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  name: (0, pg_core_1.varchar)('name', {
    length: 255
  }).notNull(),
  description: (0, pg_core_1.text)('description'),
  buildingId: (0, pg_core_1.varchar)('building_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[4]++;
    cov_amdaqotu5().s[19]++;
    return exports.buildings.id;
  }, {
    onDelete: 'cascade'
  }),
  isReservable: (0, pg_core_1.boolean)('is_reservable').notNull().default(false),
  capacity: (0, pg_core_1.integer)('capacity'),
  contactPersonId: (0, pg_core_1.varchar)('contact_person_id').references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[5]++;
    cov_amdaqotu5().s[20]++;
    return core_1.users.id;
  }, {
    onDelete: 'set null'
  }),
  openingHours: (0, pg_core_1.jsonb)('opening_hours'),
  // Enhanced structure with isOpen, breaks
  availableDays: (0, pg_core_1.jsonb)('available_days'),
  // Array of available days: ['monday', 'tuesday', etc.]
  unavailablePeriods: (0, pg_core_1.jsonb)('unavailable_periods'),
  // Specific periods when space is unavailable
  bookingRules: (0, pg_core_1.text)('booking_rules'),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * Bookings table for common space reservations.
 * Tracks user reservations for common spaces with time slots and status.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[21]++;
exports.bookings = (0, pg_core_1.pgTable)('bookings', {
  id: (0, pg_core_1.varchar)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  commonSpaceId: (0, pg_core_1.varchar)('common_space_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[6]++;
    cov_amdaqotu5().s[22]++;
    return exports.commonSpaces.id;
  }, {
    onDelete: 'cascade'
  }),
  userId: (0, pg_core_1.varchar)('user_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[7]++;
    cov_amdaqotu5().s[23]++;
    return core_1.users.id;
  }, {
    onDelete: 'cascade'
  }),
  startTime: (0, pg_core_1.timestamp)('start_time', {
    withTimezone: true
  }).notNull(),
  endTime: (0, pg_core_1.timestamp)('end_time', {
    withTimezone: true
  }).notNull(),
  status: (0, exports.bookingStatusEnum)('status').notNull().default('confirmed'),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * User booking restrictions table to manage blocked users.
 * Allows administrators to block specific users from booking certain common spaces.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[24]++;
exports.userBookingRestrictions = (0, pg_core_1.pgTable)('user_booking_restrictions', {
  id: (0, pg_core_1.varchar)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  userId: (0, pg_core_1.varchar)('user_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[8]++;
    cov_amdaqotu5().s[25]++;
    return core_1.users.id;
  }, {
    onDelete: 'cascade'
  }),
  commonSpaceId: (0, pg_core_1.varchar)('common_space_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[9]++;
    cov_amdaqotu5().s[26]++;
    return exports.commonSpaces.id;
  }, {
    onDelete: 'cascade'
  }),
  isBlocked: (0, pg_core_1.boolean)('is_blocked').notNull().default(true),
  reason: (0, pg_core_1.text)('reason'),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * User time limits table to manage booking time quotas.
 * Allows setting monthly/yearly limits on how much time users can reserve.
 */
/* istanbul ignore next */
cov_amdaqotu5().s[27]++;
exports.userTimeLimits = (0, pg_core_1.pgTable)('user_time_limits', {
  id: (0, pg_core_1.varchar)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  userId: (0, pg_core_1.varchar)('user_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[10]++;
    cov_amdaqotu5().s[28]++;
    return core_1.users.id;
  }, {
    onDelete: 'cascade'
  }),
  commonSpaceId: (0, pg_core_1.varchar)('common_space_id').references(() => {
    /* istanbul ignore next */
    cov_amdaqotu5().f[11]++;
    cov_amdaqotu5().s[29]++;
    return exports.commonSpaces.id;
  }, {
    onDelete: 'cascade'
  }),
  // null means applies to all spaces
  limitType: (0, pg_core_1.varchar)('limit_type', {
    length: 20
  }).notNull(),
  // 'monthly' or 'yearly'
  limitHours: (0, pg_core_1.integer)('limit_hours').notNull(),
  // Maximum hours allowed
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
// Insert schemas
/* istanbul ignore next */
cov_amdaqotu5().s[30]++;
exports.insertBuildingSchema = zod_1.z.object({
  organizationId: zod_1.z.string().uuid(),
  name: zod_1.z.string().min(1),
  address: zod_1.z.string(),
  city: zod_1.z.string(),
  province: zod_1.z.string().default('QC'),
  postalCode: zod_1.z.string(),
  buildingType: zod_1.z.string(),
  yearBuilt: zod_1.z.number().int().optional(),
  totalUnits: zod_1.z.number().int().optional(),
  totalFloors: zod_1.z.number().int().optional(),
  parkingSpaces: zod_1.z.number().int().optional(),
  storageSpaces: zod_1.z.number().int().optional(),
  amenities: zod_1.z.array(zod_1.z.string()).optional(),
  managementCompany: zod_1.z.string().optional(),
  bankAccountNumber: zod_1.z.string().optional(),
  bankAccountNotes: zod_1.z.string().optional(),
  bankAccountStartDate: zod_1.z.date().optional(),
  bankAccountStartAmount: zod_1.z.number().optional(),
  bankAccountMinimums: zod_1.z.record(zod_1.z.string(), zod_1.z.number()).optional()
});
/* istanbul ignore next */
cov_amdaqotu5().s[31]++;
exports.insertResidenceSchema = zod_1.z.object({
  buildingId: zod_1.z.string().uuid(),
  unitNumber: zod_1.z.string(),
  floor: zod_1.z.number().int().optional(),
  squareFootage: zod_1.z.number().optional(),
  bedrooms: zod_1.z.number().int().optional(),
  bathrooms: zod_1.z.number().optional(),
  balcony: zod_1.z.boolean().optional(),
  parkingSpaceNumbers: zod_1.z.array(zod_1.z.string()).optional(),
  storageSpaceNumbers: zod_1.z.array(zod_1.z.string()).optional(),
  ownershipPercentage: zod_1.z.number().optional(),
  monthlyFees: zod_1.z.number().optional()
});
/* istanbul ignore next */
cov_amdaqotu5().s[32]++;
exports.insertUserResidenceSchema = zod_1.z.object({
  userId: zod_1.z.string().uuid(),
  residenceId: zod_1.z.string().uuid(),
  relationshipType: zod_1.z.string(),
  startDate: zod_1.z.date(),
  endDate: zod_1.z.date().optional()
});
/* istanbul ignore next */
cov_amdaqotu5().s[33]++;
exports.insertContactSchema = zod_1.z.object({
  name: zod_1.z.string(),
  email: zod_1.z.string().email().optional(),
  phone: zod_1.z.string().optional(),
  entity: zod_1.z.string(),
  entityId: zod_1.z.string().uuid(),
  contactCategory: zod_1.z.string()
});
/* istanbul ignore next */
cov_amdaqotu5().s[34]++;
exports.insertCommonSpaceSchema = zod_1.z.object({
  name: zod_1.z.string().min(1).max(255),
  description: zod_1.z.string().optional(),
  buildingId: zod_1.z.string().uuid(),
  isReservable: zod_1.z.boolean().default(false),
  capacity: zod_1.z.number().int().optional(),
  contactPersonId: zod_1.z.string().uuid().optional(),
  openingHours: zod_1.z.array(zod_1.z.object({
    day: zod_1.z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']),
    open: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
    close: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
    isOpen: zod_1.z.boolean().default(true),
    // Whether the space is open on this day
    breaks: zod_1.z.array(zod_1.z.object({
      start: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
      end: zod_1.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format'),
      reason: zod_1.z.string().optional() // e.g., "Cleaning", "Maintenance"
    })).optional() // Optional breaks within opening hours (like lunch breaks)
  })).optional(),
  availableDays: zod_1.z.array(zod_1.z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'])).optional(),
  unavailablePeriods: zod_1.z.array(zod_1.z.object({
    startDate: zod_1.z.string().datetime(),
    endDate: zod_1.z.string().datetime(),
    reason: zod_1.z.string().optional(),
    // e.g., "Renovation", "Maintenance", "Holiday closure"
    recurrence: zod_1.z.enum(['none', 'weekly', 'monthly', 'yearly']).default('none')
  })).optional(),
  // Specific periods when space is unavailable
  bookingRules: zod_1.z.string().optional()
});
/* istanbul ignore next */
cov_amdaqotu5().s[35]++;
exports.insertBookingSchema = zod_1.z.object({
  commonSpaceId: zod_1.z.string().uuid(),
  userId: zod_1.z.string().uuid(),
  startTime: zod_1.z.date(),
  endTime: zod_1.z.date(),
  status: zod_1.z.enum(['confirmed', 'cancelled']).default('confirmed')
});
/* istanbul ignore next */
cov_amdaqotu5().s[36]++;
exports.insertUserBookingRestrictionSchema = zod_1.z.object({
  userId: zod_1.z.string().uuid(),
  commonSpaceId: zod_1.z.string().uuid(),
  isBlocked: zod_1.z.boolean().default(true),
  reason: zod_1.z.string().optional()
});
/* istanbul ignore next */
cov_amdaqotu5().s[37]++;
exports.insertUserTimeLimitSchema = zod_1.z.object({
  userId: zod_1.z.string().uuid(),
  commonSpaceId: zod_1.z.string().uuid().optional(),
  // null means applies to all spaces
  limitType: zod_1.z.enum(['monthly', 'yearly']),
  limitHours: zod_1.z.number().int().min(1).max(8760) // Max 1 year worth of hours
});
// Relations - Temporarily commented out due to drizzle-orm version compatibility
/*
export const buildingsRelations = relations(buildings, ({ one, many }) => ({
  organization: one(organizations, {
    fields: [buildings.organizationId],
    references: [organizations.id],
  }),
  residences: many(residences),
}));
*/
/*
export const residencesRelations = relations(residences, ({ one, many }) => ({
  building: one(buildings, {
    fields: [residences.buildingId],
    references: [buildings.id],
  }),
  userResidences: many(userResidences),
}));
*/
/*
export const userResidencesRelations = relations(userResidences, ({ one }) => ({
  user: one(users, {
    fields: [userResidences.userId],
    references: [users.id],
  }),
  residence: one(residences, {
    fields: [userResidences.residenceId],
    references: [residences.id],
  }),
}));
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,