76ae1d8c08beb7061c4648a2ee906537
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerBillRoutes = registerBillRoutes;
const drizzle_orm_1 = require("drizzle-orm");
const db_1 = require("../db");
const auth_1 = require("../auth");
const storage_1 = require("../storage");
const zod_1 = require("zod");
const bill_generation_service_1 = require("../services/bill-generation-service");
const delayed_update_service_1 = require("../services/delayed-update-service");
const gemini_bill_analyzer_1 = require("../services/gemini-bill-analyzer");
const geminiService_1 = require("../services/geminiService");
const fileUpload_1 = require("../middleware/fileUpload");
const express_rate_limit_1 = __importStar(require("express-rate-limit"));
const multer_1 = __importDefault(require("multer"));
const fs_1 = __importDefault(require("fs"));
const schema = __importStar(require("@shared/schema"));
const { buildings, bills } = schema;
// Database-driven bills - no more mock data
// Validation schemas
const billFilterSchema = zod_1.z.object({
    buildingId: zod_1.z.string().uuid(),
    category: zod_1.z.string().optional(),
    year: zod_1.z.string().optional(),
    status: zod_1.z.enum(['all', 'draft', 'sent', 'overdue', 'paid', 'cancelled']).optional(),
    months: zod_1.z.string().optional(), // Comma-separated month numbers (e.g., "1,3,6,12")
});
const createBillSchema = zod_1.z.object({
    buildingId: zod_1.z.string().uuid(),
    title: zod_1.z.string().min(1),
    description: zod_1.z.string().optional(),
    category: zod_1.z.enum([
        'insurance',
        'maintenance',
        'salary',
        'utilities',
        'cleaning',
        'security',
        'landscaping',
        'professional_services',
        'administration',
        'repairs',
        'supplies',
        'taxes',
        'technology',
        'reserves',
        'other',
    ]),
    vendor: zod_1.z.string().optional(),
    paymentType: zod_1.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_1.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    scheduleCustom: zod_1.z.array(zod_1.z.string()).optional(),
    costs: zod_1.z.array(zod_1.z.string()),
    totalAmount: zod_1.z.string(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string().optional(),
    status: zod_1.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),
    notes: zod_1.z.string().optional(),
});
const updateBillSchema = createBillSchema.partial();
// Rate limiting for AI extraction endpoint (expensive operation)
const extractionRateLimit = (0, express_rate_limit_1.default)({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 10, // Limit each user to 10 extraction requests per windowMs
    message: {
        error: 'Too many extraction requests',
        message: 'Please wait before making another extraction request',
        code: 'RATE_LIMIT_EXCEEDED'
    },
    standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers
    legacyHeaders: false, // Disable the `X-RateLimit-*` headers
    keyGenerator: (req) => {
        // Rate limit per authenticated user ID (preferred) or use IP as fallback with IPv6 support
        return req.user?.id || (0, express_rate_limit_1.ipKeyGenerator)(req);
    },
    skip: (req) => {
        // Skip rate limiting if user is not authenticated (handled by requireAuth)
        return !req.user?.id;
    }
});
// Configure multer for file uploads
const upload = (0, multer_1.default)({
    dest: '/tmp/uploads/',
    fileFilter: (req, file, cb) => {
        const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error('Only image and PDF files are allowed'));
        }
    },
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB limit
    },
});
/**
 *
 * @param app
 */
/**
 * RegisterBillRoutes function.
 * @param app
 * @returns Function result.
 */
function registerBillRoutes(app) {
    /**
     * POST /api/bills/extract-data
     * Extract bill data from uploaded file using Gemini AI.
     *
     * Security: Requires authentication, rate limiting, and file validation.
     * File Types: PDF, JPEG, PNG, WebP, HEIC, HEIF
     * Max Size: 25MB
     */
    app.post('/api/bills/extract-data', auth_1.requireAuth, extractionRateLimit, fileUpload_1.uploadInvoiceFile, fileUpload_1.handleUploadError, async (req, res) => {
        const startTime = Date.now();
        const userId = req.user.id;
        const userRole = req.user.role;
        console.log(`[BILL EXTRACTION] Starting extraction for user ${userId} (${userRole})`);
        try {
            // Validate file upload
            if (!req.file) {
                console.log(`[BILL EXTRACTION] No file uploaded by user ${userId}`);
                return res.status(400).json({
                    error: 'No file uploaded',
                    message: 'Please upload a bill file',
                    code: 'NO_FILE'
                });
            }
            const { buffer, mimetype, originalname, size } = req.file;
            console.log(`[BILL EXTRACTION] Processing file for user ${userId}:`, {
                filename: originalname,
                mimetype,
                size: `${Math.round(size / 1024)}KB`
            });
            // Call Gemini service for bill extraction
            const extractedData = await geminiService_1.geminiService.extractBillData(buffer, mimetype);
            console.log(`[BILL EXTRACTION] Extraction completed for user ${userId} in ${Date.now() - startTime}ms`);
            // Return successful response
            res.status(200).json({
                success: true,
                data: extractedData,
                metadata: {
                    confidence: 0.9, // Could be calculated based on field completeness
                    processingTime: Date.now() - startTime,
                    filename: originalname,
                    fileSize: size
                }
            });
        }
        catch (error) {
            console.error(`[BILL EXTRACTION] Error for user ${userId}:`, error);
            // Handle different error types
            if (error.message?.includes('Unsupported file type')) {
                return res.status(400).json({
                    error: 'Unsupported file type',
                    message: 'Please upload a PDF or image file (JPEG, PNG, WebP, HEIC, HEIF)',
                    code: 'UNSUPPORTED_FILE_TYPE'
                });
            }
            else if (error.message?.includes('FILE_TOO_LARGE')) {
                return res.status(400).json({
                    error: 'File too large',
                    message: 'Please upload a file smaller than 25MB',
                    code: 'FILE_TOO_LARGE'
                });
            }
            else if (error.message?.includes('GEMINI_API_KEY')) {
                return res.status(500).json({
                    error: 'AI service configuration error',
                    message: 'AI extraction service is temporarily unavailable',
                    code: 'GEMINI_API_ERROR'
                });
            }
            // Generic error response
            res.status(500).json({
                error: 'Extraction failed',
                message: 'Failed to extract bill data. Please try again.',
                code: 'EXTRACTION_ERROR'
            });
        }
    });
    /**
     * Get all bills with optional filtering
     * GET /api/bills?buildingId=uuid&category=insurance&year=2024&status=draft&months=1,3,6.
     */
    app.get('/api/bills', auth_1.requireAuth, async (req, res) => {
        try {
            const { buildingId, category, year, status = 'all', months } = req.query;
            // Build the WHERE conditions
            const conditions = [];
            if (buildingId && buildingId !== 'all') {
                conditions.push((0, drizzle_orm_1.eq)(bills.buildingId, buildingId));
            }
            if (category && category !== 'all') {
                conditions.push((0, drizzle_orm_1.eq)(bills.category, category));
            }
            if (year) {
                conditions.push((0, drizzle_orm_1.sql) `EXTRACT(YEAR FROM ${bills.startDate}) = ${year}`);
            }
            if (status && status !== 'all') {
                conditions.push((0, drizzle_orm_1.eq)(bills.status, status));
            }
            if (months) {
                const monthNumbers = months.split(',').map((m) => parseInt(m.trim()));
                const monthConditions = monthNumbers.map((month) => (0, drizzle_orm_1.sql) `EXTRACT(MONTH FROM ${bills.startDate}) = ${month}`);
                conditions.push((0, drizzle_orm_1.sql) `(${drizzle_orm_1.sql.join(monthConditions, (0, drizzle_orm_1.sql) ` OR `)})`);
            }
            const whereClause = conditions.length > 0 ? (0, drizzle_orm_1.and)(...conditions) : undefined;
            const billsList = await db_1.db
                .select({
                id: bills.id,
                buildingId: bills.buildingId,
                billNumber: bills.billNumber,
                title: bills.title,
                description: bills.description,
                category: bills.category,
                vendor: bills.vendor,
                paymentType: bills.paymentType,
                costs: bills.costs,
                totalAmount: bills.totalAmount,
                startDate: bills.startDate,
                status: bills.status,
                notes: bills.notes,
                createdBy: bills.createdBy,
                createdAt: bills.createdAt,
                updatedAt: bills.updatedAt,
            })
                .from(bills)
                .where(whereClause)
                .orderBy((0, drizzle_orm_1.desc)(bills.startDate));
            res.json(billsList);
        }
        catch (_error) {
            console.error('❌ Error fetching bills:', _error);
            res.status(500).json({
                message: 'Failed to fetch bills',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Get a specific bill by ID
     * GET /api/bills/:id.
     */
    app.get('/api/bills/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const bill = await db_1.db
                .select({
                id: bills.id,
                buildingId: bills.buildingId,
                billNumber: bills.billNumber,
                title: bills.title,
                description: bills.description,
                category: bills.category,
                vendor: bills.vendor,
                paymentType: bills.paymentType,
                costs: bills.costs,
                totalAmount: bills.totalAmount,
                startDate: bills.startDate,
                status: bills.status,
                notes: bills.notes,
                filePath: bills.filePath,
                fileName: bills.fileName,
                fileSize: bills.fileSize,
                isAiAnalyzed: bills.isAiAnalyzed,
                createdBy: bills.createdBy,
                createdAt: bills.createdAt,
                updatedAt: bills.updatedAt,
            })
                .from(bills)
                .where((0, drizzle_orm_1.eq)(bills.id, id))
                .limit(1);
            if (bill.length === 0) {
                return res.status(404).json({
                    message: 'Bill not found',
                });
            }
            res.json(bill[0]);
        }
        catch (_error) {
            console.error('❌ Error fetching bill:', _error);
            res.status(500).json({
                message: 'Failed to fetch bill',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Create a new bill
     * POST /api/bills.
     */
    app.post('/api/bills', auth_1.requireAuth, async (req, res) => {
        try {
            const validation = createBillSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    message: 'Invalid bill data',
                    errors: validation.error.issues,
                });
            }
            const billData = validation.data;
            const newBill = await db_1.db
                .insert(bills)
                .values({
                buildingId: billData.buildingId,
                billNumber: `BILL-${Date.now()}`,
                title: billData.title,
                description: billData.description,
                category: billData.category,
                vendor: billData.vendor,
                paymentType: billData.paymentType,
                schedulePayment: billData.schedulePayment,
                scheduleCustom: billData.scheduleCustom,
                costs: billData.costs.map((cost) => parseFloat(cost)),
                totalAmount: parseFloat(billData.totalAmount),
                startDate: billData.startDate,
                endDate: billData.endDate || null,
                status: billData.status,
                notes: billData.notes,
                createdBy: req.user.id,
            })
                .returning();
            // Schedule delayed money flow and budget update for the new bill
            try {
                delayed_update_service_1.delayedUpdateService.scheduleBillUpdate(newBill[0].id);
            }
            catch (schedulingError) {
                console.warn('⚠️ Failed to schedule bill update:', schedulingError);
                // Don't fail the bill creation if scheduling fails
            }
            res.status(201).json(newBill[0]);
        }
        catch (_error) {
            console.error('❌ Error creating bill:', _error);
            res.status(500).json({
                message: 'Failed to create bill',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Update a bill (PATCH)
     * PATCH /api/bills/:id.
     */
    app.patch('/api/bills/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const validation = updateBillSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    message: 'Invalid bill data',
                    errors: validation.error.issues,
                });
            }
            const billData = validation.data;
            const updateData = {};
            if (billData.title) {
                updateData.title = billData.title;
            }
            if (billData.description) {
                updateData.description = billData.description;
            }
            if (billData.category) {
                updateData.category = billData.category;
            }
            if (billData.vendor) {
                updateData.vendor = billData.vendor;
            }
            if (billData.paymentType) {
                updateData.paymentType = billData.paymentType;
            }
            if (billData.costs) {
                updateData.costs = billData.costs.map((cost) => parseFloat(cost));
            }
            if (billData.totalAmount) {
                updateData.totalAmount = parseFloat(billData.totalAmount);
            }
            if (billData.startDate) {
                updateData.startDate = billData.startDate;
            }
            if (billData.endDate) {
                updateData.endDate = billData.endDate;
            }
            if (billData.status) {
                updateData.status = billData.status;
            }
            if (billData.notes) {
                updateData.notes = billData.notes;
            }
            updateData.updatedAt = new Date();
            const updatedBill = await db_1.db
                .update(bills)
                .set(updateData)
                .where((0, drizzle_orm_1.eq)(bills.id, id))
                .returning();
            if (updatedBill.length === 0) {
                return res.status(404).json({
                    message: 'Bill not found',
                });
            }
            res.json(updatedBill[0]);
        }
        catch (_error) {
            console.error('❌ Error updating bill (PATCH):', _error);
            res.status(500).json({
                message: 'Failed to update bill',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Update a bill (PUT)
     * PUT /api/bills/:id.
     */
    app.put('/api/bills/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const validation = updateBillSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    message: 'Invalid bill data',
                    errors: validation.error.issues,
                });
            }
            const billData = validation.data;
            const updateData = {};
            if (billData.title) {
                updateData.title = billData.title;
            }
            if (billData.description) {
                updateData.description = billData.description;
            }
            if (billData.category) {
                updateData.category = billData.category;
            }
            if (billData.vendor) {
                updateData.vendor = billData.vendor;
            }
            if (billData.paymentType) {
                updateData.paymentType = billData.paymentType;
            }
            if (billData.costs) {
                updateData.costs = billData.costs.map((cost) => parseFloat(cost));
            }
            if (billData.totalAmount) {
                updateData.totalAmount = parseFloat(billData.totalAmount);
            }
            if (billData.startDate) {
                updateData.startDate = billData.startDate;
            }
            if (billData.status) {
                updateData.status = billData.status;
            }
            if (billData.notes) {
                updateData.notes = billData.notes;
            }
            updateData.updatedAt = new Date();
            const updatedBill = await db_1.db
                .update(bills)
                .set(updateData)
                .where((0, drizzle_orm_1.eq)(bills.id, id))
                .returning();
            if (updatedBill.length === 0) {
                return res.status(404).json({
                    message: 'Bill not found',
                });
            }
            // Schedule delayed money flow and budget update for the updated bill
            try {
                delayed_update_service_1.delayedUpdateService.scheduleBillUpdate(id);
            }
            catch (schedulingError) {
                console.warn('⚠️ Failed to schedule bill update:', schedulingError);
                // Don't fail the bill update if scheduling fails
            }
            res.json(updatedBill[0]);
        }
        catch (_error) {
            console.error('❌ Error updating bill (PUT):', _error);
            res.status(500).json({
                message: 'Failed to update bill',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Delete a bill
     * DELETE /api/bills/:id.
     */
    app.delete('/api/bills/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const deletedBill = await db_1.db.delete(bills).where((0, drizzle_orm_1.eq)(bills.id, id)).returning();
            if (!deletedBill || (Array.isArray(deletedBill) && deletedBill.length === 0)) {
                return res.status(404).json({
                    message: 'Bill not found',
                });
            }
            res.json({
                message: 'Bill deleted successfully',
                bill: deletedBill[0],
            });
        }
        catch (_error) {
            console.error('❌ Error deleting bill:', _error);
            res.status(500).json({
                message: 'Failed to delete bill',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Upload and analyze bill document with Gemini AI
     * POST /api/bills/:id/upload-document.
     */
    app.post('/api/bills/:id/upload-document', auth_1.requireAuth, upload.single('document'), async (req, res) => {
        console.log(`📄 [BILLS UPLOAD] Starting document upload for bill ID: ${req.params.id}`);
        console.log(`📄 [BILLS UPLOAD] User: ${req.user.id} (${req.user.role})`);
        try {
            const { id } = req.params;
            if (!req.file) {
                console.log('❌ [BILLS UPLOAD] No file provided in request');
                return res.status(400).json({ message: 'No file uploaded' });
            }
            console.log(`📄 [BILLS UPLOAD] File received:`, {
                originalName: req.file.originalname,
                mimeType: req.file.mimetype,
                size: req.file.size,
                tempPath: req.file.path
            });
            // Get organization ID for document organization
            const organizations = await storage_1.storage.getUserOrganizations(req.user.id);
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : 'default';
            console.log(`📄 [BILLS UPLOAD] Organization ID determined: ${organizationId}`);
            // Create document path in the expected format
            const filePath = `prod_org_${organizationId}/${req.file.originalname}`;
            console.log(`📄 [BILLS UPLOAD] File path determined: ${filePath}`);
            // Create uploads directory structure if it doesn't exist
            const path = await Promise.resolve().then(() => __importStar(require('path')));
            const uploadsDir = path.join(process.cwd(), 'uploads');
            const orgDir = path.join(uploadsDir, `prod_org_${organizationId}`);
            console.log(`📄 [BILLS UPLOAD] Directory paths:`, {
                uploadsDir,
                orgDir,
                uploadsExists: fs_1.default.existsSync(uploadsDir),
                orgDirExists: fs_1.default.existsSync(orgDir)
            });
            if (!fs_1.default.existsSync(uploadsDir)) {
                fs_1.default.mkdirSync(uploadsDir, { recursive: true });
                console.log(`📄 [BILLS UPLOAD] Created uploads directory: ${uploadsDir}`);
            }
            if (!fs_1.default.existsSync(orgDir)) {
                fs_1.default.mkdirSync(orgDir, { recursive: true });
                console.log(`📄 [BILLS UPLOAD] Created organization directory: ${orgDir}`);
            }
            // Save file to permanent storage
            const permanentFilePath = path.join(uploadsDir, filePath);
            console.log(`📄 [BILLS UPLOAD] Copying file from ${req.file.path} to ${permanentFilePath}`);
            fs_1.default.copyFileSync(req.file.path, permanentFilePath);
            console.log(`📄 [BILLS UPLOAD] File successfully saved to permanent storage`);
            // Analyze document with Gemini AI (images and PDFs)
            let analysisResult = null;
            if (req.file.mimetype.startsWith('image/') || req.file.mimetype === 'application/pdf') {
                console.log(`🤖 [BILLS UPLOAD] Starting AI analysis for ${req.file.mimetype} file`);
                try {
                    analysisResult = await gemini_bill_analyzer_1.geminiBillAnalyzer.analyzeBillDocument(req.file.path, req.file.mimetype);
                    console.log(`🤖 [BILLS UPLOAD] AI analysis successful:`, {
                        hasResult: !!analysisResult,
                        analysisKeys: analysisResult ? Object.keys(analysisResult) : []
                    });
                }
                catch (aiError) {
                    console.warn('🤖 [BILLS UPLOAD] AI analysis failed, continuing without analysis:', aiError);
                    // Continue without AI analysis
                }
            }
            else {
                console.log(`🤖 [BILLS UPLOAD] Skipping AI analysis for unsupported file type: ${req.file.mimetype}`);
            }
            // Update bill with document info and AI analysis
            const updateData = {
                filePath,
                fileName: req.file.originalname,
                fileSize: req.file.size,
                isAiAnalyzed: !!analysisResult,
                aiAnalysisData: analysisResult,
                updatedAt: new Date(),
            };
            console.log(`📄 [BILLS UPLOAD] Updating bill ${id} in database with:`, {
                filePath,
                fileName: req.file.originalname,
                fileSize: req.file.size,
                hasAiAnalysis: !!analysisResult
            });
            const updatedBill = await db_1.db
                .update(bills)
                .set(updateData)
                .where((0, drizzle_orm_1.eq)(bills.id, id))
                .returning();
            console.log(`📄 [BILLS UPLOAD] Database update successful for bill ${id}`);
            // Clean up temporary file
            console.log(`📄 [BILLS UPLOAD] Cleaning up temporary file: ${req.file.path}`);
            fs_1.default.unlinkSync(req.file.path);
            console.log(`✅ [BILLS UPLOAD] Upload process completed successfully for bill ${id}`);
            res.json({
                message: 'Document uploaded and analyzed successfully',
                bill: updatedBill[0],
                analysisResult,
            });
        }
        catch (_error) {
            console.error('❌ Error uploading document:', _error);
            // Clean up temporary file if it exists
            if (req.file?.path) {
                try {
                    fs_1.default.unlinkSync(req.file.path);
                }
                catch (___cleanupError) {
                    console.error('Error cleaning up temp file:', ___cleanupError);
                }
            }
            res.status(500).json({
                message: 'Failed to upload document',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Download bill document using secure signed URL
     * GET /api/bills/:id/download-document.
     */
    app.get('/api/bills/:id/download-document', auth_1.requireAuth, async (req, res) => {
        console.log(`📥 [BILLS DOWNLOAD] Document download request for bill ID: ${req.params.id}`);
        console.log(`📥 [BILLS DOWNLOAD] User: ${req.user.id} (${req.user.role})`);
        try {
            const { id } = req.params;
            // Get the bill to check if it has a document
            console.log(`📥 [BILLS DOWNLOAD] Querying database for bill: ${id}`);
            const bill = await db_1.db.select().from(bills).where((0, drizzle_orm_1.eq)(bills.id, id)).limit(1);
            if (bill.length === 0) {
                console.log(`❌ [BILLS DOWNLOAD] Bill not found: ${id}`);
                return res.status(404).json({ message: 'Bill not found' });
            }
            const billData = bill[0];
            console.log(`📥 [BILLS DOWNLOAD] Bill found:`, {
                id: billData.id,
                hasFilePath: !!billData.filePath,
                hasFileName: !!billData.fileName,
                filePath: billData.filePath,
                fileName: billData.fileName
            });
            if (!billData.filePath || !billData.fileName) {
                console.log(`❌ [BILLS DOWNLOAD] No document associated with bill ${id}`);
                return res.status(404).json({ message: 'No document associated with this bill' });
            }
            // Get organization ID for document access
            const organizations = await storage_1.storage.getUserOrganizations(req.user.id);
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : 'default';
            // Serve the file directly from local storage
            const path = await Promise.resolve().then(() => __importStar(require('path')));
            const uploadsDir = path.join(process.cwd(), 'uploads');
            const fileFullPath = path.join(uploadsDir, billData.filePath);
            console.log(`📥 [BILLS DOWNLOAD] File paths:`, {
                uploadsDir,
                filePath: billData.filePath,
                fullFilePath: fileFullPath,
                fileName: billData.fileName,
                organizationId
            });
            // Check if file exists
            if (!fs_1.default.existsSync(fileFullPath)) {
                console.log(`❌ [BILLS DOWNLOAD] File not found at path: ${fileFullPath}`);
                return res.status(404).json({ message: 'Document file not found on server' });
            }
            console.log(`📥 [BILLS DOWNLOAD] File found, setting headers and sending...`);
            // Set appropriate headers for file download
            res.setHeader('Content-Disposition', `attachment; filename="${billData.fileName}"`);
            res.setHeader('Content-Type', 'application/octet-stream');
            // Stream the file
            console.log(`📥 [BILLS DOWNLOAD] Streaming file to client`);
            res.sendFile(fileFullPath);
            console.log(`✅ [BILLS DOWNLOAD] File download initiated successfully for bill ${id}`);
        }
        catch (_error) {
            console.error('❌ Error downloading document:', _error);
            res.status(500).json({
                message: 'Failed to download document',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Apply AI analysis to bill form data
     * POST /api/bills/:id/apply-ai-analysis.
     */
    app.post('/api/bills/:id/apply-ai-analysis', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            // Get the bill with AI analysis data
            const bill = await db_1.db.select().from(bills).where((0, drizzle_orm_1.eq)(bills.id, id)).limit(1);
            if (bill.length === 0) {
                return res.status(404).json({ message: 'Bill not found' });
            }
            const billData = bill[0];
            if (!billData.isAiAnalyzed || !billData.aiAnalysisData) {
                return res.status(400).json({ message: 'No AI analysis data available for this bill' });
            }
            const analysis = billData.aiAnalysisData;
            // Get payment schedule suggestion
            const scheduleSignestion = await gemini_bill_analyzer_1.geminiBillAnalyzer.suggestPaymentSchedule(analysis.category, parseFloat(analysis.totalAmount));
            // Update bill with AI-extracted data
            const updateData = {
                title: analysis.title,
                vendor: analysis.vendor,
                totalAmount: parseFloat(analysis.totalAmount),
                category: analysis.category,
                description: analysis.description,
                paymentType: scheduleSignestion.paymentType,
                schedulePayment: scheduleSignestion.schedulePayment,
                costs: [parseFloat(analysis.totalAmount)],
                startDate: analysis.issueDate || analysis.dueDate || billData.startDate,
                notes: `AI-analyzed document. Original bill number: ${analysis.billNumber || 'N/A'}. Confidence: ${(analysis.confidence * 100).toFixed(1)}%. ${scheduleSignestion.reasoning}`,
                updatedAt: new Date(),
            };
            const updatedBill = await db_1.db
                .update(bills)
                .set(updateData)
                .where((0, drizzle_orm_1.eq)(bills.id, id))
                .returning();
            res.json({
                message: 'AI analysis applied successfully',
                bill: updatedBill[0],
                analysis,
                scheduleSignestion,
            });
        }
        catch (_error) {
            console.error('❌ Error applying AI analysis:', _error);
            res.status(500).json({
                message: 'Failed to apply AI analysis',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Generate future bill instances for a recurrent bill
     * POST /api/bills/:id/generate-future.
     */
    app.post('/api/bills/:id/generate-future', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const bill = await db_1.db
                .select({
                id: bills.id,
                buildingId: bills.buildingId,
                billNumber: bills.billNumber,
                title: bills.title,
                description: bills.description,
                category: bills.category,
                vendor: bills.vendor,
                paymentType: bills.paymentType,
                costs: bills.costs,
                totalAmount: bills.totalAmount,
                startDate: bills.startDate,
                status: bills.status,
                notes: bills.notes,
                createdBy: bills.createdBy,
                createdAt: bills.createdAt,
                updatedAt: bills.updatedAt,
            })
                .from(bills)
                .where((0, drizzle_orm_1.eq)(bills.id, id))
                .limit(1);
            if (bill.length === 0) {
                return res.status(404).json({
                    message: 'Bill not found',
                });
            }
            // Check if user has access to this bill's building
            const building = await db_1.db
                .select({
                id: buildings.id,
                name: buildings.name,
                organizationId: buildings.organizationId,
            })
                .from(buildings)
                .where((0, drizzle_orm_1.eq)(buildings.id, bill[0].buildingId))
                .limit(1);
            if (building.length === 0) {
                return res.status(403).json({
                    message: 'Access denied to generate future bills',
                    code: 'ACCESS_DENIED',
                });
            }
            if (bill[0].paymentType !== 'recurrent') {
                return res.status(400).json({
                    message: 'Only recurrent bills can generate future instances',
                });
            }
            // Generate future bills
            const result = await bill_generation_service_1.billGenerationService.generateFutureBillInstances(bill[0]);
            res.json({
                message: 'Future bills generated successfully',
                billsCreated: result.billsCreated,
                generatedUntil: result.generatedUntil,
            });
        }
        catch (_error) {
            console.error('❌ Error generating future bills:', _error);
            res.status(500).json({
                message: 'Failed to generate future bills',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Get bill categories for filter dropdown
     * GET /api/bills/categories.
     */
    app.get('/api/bills/categories', auth_1.requireAuth, async (req, res) => {
        try {
            const categories = [
                'insurance',
                'maintenance',
                'salary',
                'utilities',
                'cleaning',
                'security',
                'landscaping',
                'professional_services',
                'administration',
                'repairs',
                'supplies',
                'taxes',
                'technology',
                'reserves',
                'other',
            ];
            res.json(categories);
        }
        catch (_error) {
            console.error('❌ Error fetching bill categories:', _error);
            res.status(500).json({
                message: 'Failed to fetch bill categories',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Get statistics for auto-generated bills from a parent bill
     * GET /api/bills/:id/generated-stats.
     */
    app.get('/api/bills/:id/generated-stats', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const bill = await db_1.db
                .select({
                id: bills.id,
                buildingId: bills.buildingId,
                billNumber: bills.billNumber,
                title: bills.title,
                description: bills.description,
                category: bills.category,
                vendor: bills.vendor,
                paymentType: bills.paymentType,
                costs: bills.costs,
                totalAmount: bills.totalAmount,
                startDate: bills.startDate,
                status: bills.status,
                notes: bills.notes,
                createdBy: bills.createdBy,
                createdAt: bills.createdAt,
                updatedAt: bills.updatedAt,
            })
                .from(bills)
                .where((0, drizzle_orm_1.eq)(bills.id, id))
                .limit(1);
            if (bill.length === 0) {
                return res.status(404).json({
                    message: 'Bill not found',
                });
            }
            // Find all bills generated from this parent bill (look for auto-generated bills)
            const generatedBills = await db_1.db
                .select({
                id: bills.id,
                buildingId: bills.buildingId,
                billNumber: bills.billNumber,
                title: bills.title,
                description: bills.description,
                category: bills.category,
                vendor: bills.vendor,
                paymentType: bills.paymentType,
                costs: bills.costs,
                totalAmount: bills.totalAmount,
                startDate: bills.startDate,
                status: bills.status,
                notes: bills.notes,
                createdBy: bills.createdBy,
                createdAt: bills.createdAt,
                updatedAt: bills.updatedAt,
            })
                .from(bills)
                .where((0, drizzle_orm_1.sql) `bills.notes LIKE '%Auto-generated from:%'`)
                .orderBy(bills.startDate);
            const stats = generatedBills.map((genBill) => ({
                id: genBill.id,
                title: genBill.title,
                amount: genBill.totalAmount,
                startDate: genBill.startDate,
                status: genBill.status,
                billNumber: genBill.billNumber,
            }));
            res.json({
                parentBill: bill[0],
                generatedBills: stats,
            });
        }
        catch (_error) {
            console.error('❌ Error getting generated bills statistics:', _error);
            res.status(500).json({
                message: 'Failed to get generated bills statistics',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
    /**
     * Analyze document without creating a bill
     * POST /api/bills/analyze-document
     */
    app.post('/api/bills/analyze-document', auth_1.requireAuth, upload.single('document'), async (req, res) => {
        try {
            if (!req.file) {
                return res.status(400).json({
                    message: 'No document file provided',
                });
            }
            const analysis = await gemini_bill_analyzer_1.geminiBillAnalyzer.analyzeBillDocument(req.file.path);
            res.json(analysis);
        }
        catch (_error) {
            console.error('Error analyzing document:', _error);
            res.status(500).json({
                message: 'Failed to analyze document',
                _error: _error instanceof Error ? _error.message : 'Unknown error',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,