{"file":"/home/runner/workspace/server/auth.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/auth.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport session from 'express-session';\nimport connectPg from 'connect-pg-simple';\nimport { createHash, randomBytes } from 'crypto';\nimport * as bcrypt from 'bcryptjs';\nimport { storage } from './storage';\nimport { sql, db, pool } from './db';\nimport { config } from './config/index';\nimport type { User } from '@shared/schema';\n// Database-based permission checking - no config files needed\nimport { Pool } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport * as schema from '../shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport { EmailService } from './services/email-service';\nimport { queryCache } from './query-cache';\n\n/**\n * Check if a user role has a specific permission via database lookup.\n * @param userRole - The user's role (admin, manager, tenant, resident).\n * @param permissionName - The permission name (e.g., 'read:user', 'create:building').\n * @returns Promise<boolean> - True if user has permission.\n */\nasync function checkUserPermission(userRole: string, permissionName: string): Promise<boolean> {\n  try {\n    // Debug logging removed for production security\n\n    // First check if permission exists at all\n    const permissionExists = await db\n      .select()\n      .from(schema.permissions)\n      .where(eq(schema.permissions.name, permissionName))\n      .limit(1);\n\n    // Permission exists check complete\n\n    // Check role permissions\n    const rolePermissions = await db\n      .select()\n      .from(schema.rolePermissions)\n      .where(eq(schema.rolePermissions.role, userRole as any));\n\n    // Role permissions checked\n\n    const result = await db\n      .select()\n      .from(schema.rolePermissions)\n      .leftJoin(schema.permissions, eq(schema.rolePermissions.permissionId, schema.permissions.id))\n      .where(\n        and(\n          eq(schema.rolePermissions.role, userRole as any),\n          eq(schema.permissions.name, permissionName)\n        )\n      )\n      .limit(1);\n\n    // Permission check completed\n\n    if (result.length === 0) {\n      // Permission not found\n      // Debug: list all admin permissions\n      if (userRole === 'admin') {\n        const adminPerms = await db\n          .select({ name: schema.permissions.name })\n          .from(schema.rolePermissions)\n          .leftJoin(\n            schema.permissions,\n            eq(schema.rolePermissions.permissionId, schema.permissions.id)\n          )\n          .where(eq(schema.rolePermissions.role, 'admin'));\n        // Admin permissions debug removed for security\n      }\n    }\n\n    return result.length > 0;\n  } catch (error: any) {\n    console.error('❌ Permission check failed:', error);\n    return false;\n  }\n}\n\n// Initialize email service\nconst emailService = new EmailService();\n\n// Database connection already imported at top of file\n\n// Configure session store with PostgreSQL\nconst PostgreSqlStore = connectPg(session);\n\n/**\n * Get the correct database URL based on environment and request domain.\n * Uses DATABASE_URL_KOVEO for production (koveo-gestion.com), DATABASE_URL for development.\n */\nfunction getDatabaseUrl(requestDomain?: string): string {\n  const prodUrl = process.env.DATABASE_URL_KOVEO;\n  const devUrl = process.env.DATABASE_URL;\n  \n  // Use runtime domain detection for better accuracy\n  const isKoveoRequest = requestDomain?.includes('koveo-gestion.com');\n  const isProduction = config.server.isProduction || isKoveoRequest;\n  const selectedUrl = isProduction && prodUrl ? prodUrl : devUrl;\n  \n  console.log(`🔗 Session store using ${isProduction ? 'PRODUCTION' : 'DEVELOPMENT'} database: ${selectedUrl?.substring(0, 50)}... (domain: ${requestDomain || 'unknown'})`);\n  \n  if (!selectedUrl) {\n    throw new Error('No database URL available for session store');\n  }\n  \n  return selectedUrl;\n}\n\n/**\n * Session configuration for Quebec-compliant user authentication.\n * Uses PostgreSQL session store for scalability and Law 25 compliance.\n * Includes fallback for database connection issues in production.\n */\nfunction createSessionStore(requestDomain?: string) {\n  try {\n    // Create a proper PostgreSQL pool for the session store\n    // connect-pg-simple needs a real PostgreSQL pool, not the Neon HTTP client\n    const sessionPool = new Pool({ \n      connectionString: getDatabaseUrl(requestDomain),\n      max: 2, // Small pool for sessions\n      min: 1,\n    });\n    \n    // Use PostgreSQL session store for persistent sessions\n    const store = new PostgreSqlStore({\n      pool: sessionPool,\n      tableName: 'session',\n      createTableIfMissing: true, // Auto-create table in production if missing\n      errorLog: process.env.NODE_ENV === 'test' ? () => {} : console.error, // Suppress error logging in tests\n      \n      // Add explicit configuration for session retrieval\n      pruneSessionInterval: process.env.NODE_ENV === 'test' ? false : 60 * 1000, // Disable pruning in tests\n      schemaName: 'public', // Explicitly set schema\n    });\n    \n    console.log('✅ Session store: PostgreSQL session store created with proper pool');\n    \n    // Test the store connection (skip in test environment)\n    if (process.env.NODE_ENV !== 'test') {\n      store.get('test-session-id', (err, session) => {\n        if (err) {\n          console.error('❌ Session store connection test failed:', err);\n        } else {\n          console.log('✅ Session store connection test passed');\n        }\n      });\n    }\n    \n    return store;\n  } catch (error: any) {\n    console.error('❌ Session store creation failed:', error);\n    console.log('⚠️ Falling back to memory store (sessions will not persist)');\n    return undefined; // Will use default memory store as fallback\n  }\n}\n\n// Create session store with better database detection  \nlet sessionStore: any;\ntry {\n  // Try to create session store with automatic database detection\n  sessionStore = createSessionStore();\n} catch (error) {\n  console.error('❌ Failed to create initial session store:', error);\n  sessionStore = undefined; // Will fall back to memory store\n}\n\nexport const sessionConfig = session({\n  store: sessionStore, // Use PostgreSQL session store for persistence\n  secret: process.env.SESSION_SECRET || 'fallback-secret-change-in-production',\n  resave: false, // Don't save unchanged sessions\n  saveUninitialized: false,\n  rolling: true, // Reset expiry on each request\n  cookie: {\n    secure: false, // Keep false for development to ensure cookies work\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days - longer session duration\n    sameSite: 'lax',\n    path: '/', // Explicitly set path\n  },\n  name: 'koveo.sid',\n  proxy: false,\n});\n\n/**\n * Enhanced password hashing using bcrypt with salt for Quebec Law 25 compliance.\n * Provides strong security using industry-standard bcrypt algorithm\n * with configurable salt rounds (default: 12).\n *\n * @param {string} password - Plain text password to hash.\n * @returns {Promise<string>} Promise resolving to bcrypt hashed password.\n *\n * @example\n * ```typescript\n * const hashedPassword = await hashPassword('userPassword123');\n * // Store hashed password securely in database\n * await storage.createUser({ ...userData, password: hashedPassword });\n * ```\n */\n/**\n * HashPassword function.\n * @param password\n * @returns Function result.\n */\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12; // Recommended for production\n  return await bcrypt.hash(password, saltRounds);\n}\n\n/**\n * Verifies a password against stored bcrypt hash using constant-time comparison.\n * Uses bcrypt.compare for secure password verification.\n *\n * @param {string} password - Plain text password to verify.\n * @param {string} hashedPassword - Stored bcrypt hash from user record.\n * @returns {Promise<boolean>} Promise resolving to true if password matches, false otherwise.\n *\n * @example\n * ```typescript\n * const user = await storage.getUserByEmail(email);\n * const isValid = await verifyPassword(inputPassword, user.password);\n * if (isValid) {\n *   // Grant access\n * }\n * ```\n */\n/**\n * VerifyPassword function.\n * @param password\n * @param hashedPassword\n * @returns Function result.\n */\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return await bcrypt.compare(password, hashedPassword);\n}\n\n/**\n * Authentication middleware to protect routes requiring user login.\n * Validates session existence, retrieves user data, and ensures account is active.\n * Automatically destroys invalid sessions for security.\n *\n * @param {Request} req - Express request object with session data.\n * @param {Response} res - Express response object for sending error responses.\n * @param {NextFunction} next - Express next function to continue to protected route.\n * @returns {Promise<void>} Promise that resolves when authentication is verified.\n *\n * @example\n * ```typescript\n * app.get('/api/protected-route', requireAuth, async (req, res) => {\n *   // req.user is now available and verified\n *   res.json({ userId: req.user.id });\n * });\n * ```\n */\n/**\n * RequireAuth function.\n * @param req\n * @param res\n * @param next\n * @returns Function result.\n */\nexport async function requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.session?.userId) {\n    return res.status(401).json({\n      message: 'Authentication required',\n      code: 'AUTH_REQUIRED',\n    });\n  }\n\n  try {\n    // Optimized session touch - only touch when session is close to expiring\n    if (req.session && req.session.touch && req.session.cookie) {\n      const now = Date.now();\n      const sessionAge = now - (req.session.cookie.originalMaxAge || 0) + (req.session.cookie.maxAge || 0);\n      const sessionLifetime = req.session.cookie.originalMaxAge || (7 * 24 * 60 * 60 * 1000);\n      \n      // Only touch session if more than 25% of its lifetime has passed\n      if (sessionAge > sessionLifetime * 0.25) {\n        req.session.touch();\n      }\n    }\n\n    // Loading user session\n\n    // Clear any cached user data for this ID to ensure fresh load\n    queryCache.invalidate('users', `user:${req.session.userId}`);\n    queryCache.invalidate('users', `user_email:*`);\n\n    const user = await storage.getUser(req.session.userId);\n    // User loaded from session\n    if (!user || !user.isActive) {\n      req.session.destroy((err) => {\n        if (err) {\n          // Session destruction error handled\n        }\n      });\n      return res.status(401).json({\n        message: 'User account not found or inactive',\n        code: 'USER_INACTIVE',\n      });\n    }\n\n    // Set session role (permissions handled via database)\n    req.session.role = user.role;\n\n    // Add organization information to the user object - with error handling for resilience\n    let userOrganizations: any[] = [];\n    try {\n      userOrganizations = await db\n        .select({\n          organizationId: schema.userOrganizations.organizationId,\n          canAccessAllOrganizations: schema.userOrganizations.canAccessAllOrganizations,\n        })\n        .from(schema.userOrganizations)\n        .where(\n          and(\n            eq(schema.userOrganizations.userId, user.id),\n            eq(schema.userOrganizations.isActive, true)\n          )\n        );\n    } catch (orgError) {\n      // Organization lookup error handled gracefully\n      // Continue with empty organizations - user can still authenticate\n      userOrganizations = [];\n    }\n\n    // Enhanced user object with organization access information\n    req.user = {\n      ...user,\n      organizations: userOrganizations.map((uo) => uo.organizationId),\n      canAccessAllOrganizations: userOrganizations.some((uo) => uo.canAccessAllOrganizations),\n    } as any;\n\n    // Special handling for hardcoded demo users - ensure they have proper organization access\n    // Check if the user record has organization access configured\n    if (\n      user.role?.startsWith('demo_') &&\n      (!req.user.organizations || req.user.organizations.length === 0)\n    ) {\n      // Demo users should get access to demo organizations\n      try {\n        const demoOrgs = await db\n          .select({ id: schema.organizations.id })\n          .from(schema.organizations)\n          .where(eq(schema.organizations.type, 'demo'))\n          .limit(1);\n        \n        if (demoOrgs.length > 0) {\n          // Adding organization access for demo user\n          req.user.organizations = [demoOrgs[0].id];\n          req.user.canAccessAllOrganizations = false;\n        }\n      } catch (demoOrgError) {\n        // Demo organization lookup failed, continue without access\n      }\n    }\n\n    next();\n  } catch (error: any) {\n    // Authentication error handled\n    console.error('❌ Authentication error:', error);\n    return res.status(500).json({\n      message: 'Authentication error',\n      code: 'AUTH_ERROR',\n    });\n  }\n}\n\n/**\n * Role-based authorization middleware factory for Quebec property management roles.\n * Creates middleware that restricts access based on user roles such as admin, manager, tenant.\n * Must be used after requireAuth middleware.\n *\n * @param {string[]} allowedRoles - Array of roles that can access the route (e.g., ['admin', 'manager']).\n * @returns {Function} Express middleware function for role validation.\n *\n * @example\n * ```typescript\n * // Only admins can access user management\n * app.get('/api/admin/users', requireAuth, requireRole(['admin']), getUserList);\n *\n * // Managers and admins can access building data\n * app.get('/api/buildings', requireAuth, requireRole(['admin', 'manager']), getBuildings);\n * ```\n */\n/**\n * RequireRole function.\n * @param allowedRoles\n * @returns Function result.\n */\nexport function requireRole(allowedRoles: string[]) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({\n        message: 'Insufficient permissions',\n        code: 'INSUFFICIENT_PERMISSIONS',\n        required: allowedRoles,\n        current: req.user.role,\n      });\n    }\n\n    next();\n  };\n}\n\n/**\n * Permission-based authorization middleware factory using the comprehensive RBAC system.\n * Validates user permissions based on the database RBAC system.\n * Must be used after requireAuth middleware.\n *\n * @param {string} permission - Specific permission required to access the route (e.g., 'read:bill', 'create:maintenance_request').\n * @returns {Function} Express middleware function for permission validation.\n *\n * @example\n * ```typescript\n * // Only users with 'read:bill' permission can access\n * app.get('/api/bills', requireAuth, authorize('read:bill'), getBills);\n *\n * // Only users with 'delete:user' permission can delete users\n * app.delete('/api/users/:id', requireAuth, authorize('delete:user'), deleteUser);\n *\n * // Multiple route protection\n * router.use(authorize('manage:building'));\n * router.post('/buildings', createBuilding);\n * router.patch('/buildings/:id', updateBuilding);\n * ```\n */\n/**\n * Authorize function.\n * @param permission\n * @returns Function result.\n */\nexport function authorize(permission: string) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    try {\n      // Check if the user's role has the required permission via database\n      const hasPermission = await checkUserPermission(req.user.role as any, permission);\n\n      if (!hasPermission) {\n        return res.status(403).json({\n          message: 'Insufficient permissions',\n          code: 'PERMISSION_DENIED',\n          required: permission,\n          userRole: req.user.role,\n          details: `User with role '${req.user.role}' does not have permission '${permission}'`,\n        });\n      }\n\n      next();\n    } catch (error: any) {\n      // Authorization error handled\n      console.error('❌ Authorization error:', error);\n      return res.status(500).json({\n        message: 'Authorization check failed',\n        code: 'AUTHORIZATION_ERROR',\n      });\n    }\n  };\n}\n\n/**\n * Sets up authentication routes for Quebec-compliant user management.\n * Implements login, logout, registration, and current user endpoints\n * with proper session management and Law 25 compliance considerations.\n *\n * @param {any} app - Express application instance to register routes on.\n * @returns {void} No return value - routes are registered directly on app.\n *\n * @example\n * ```typescript\n * const app = express();\n * app.use(sessionConfig);\n * setupAuthRoutes(app);\n * // Authentication routes are now available:\n * // POST /api/auth/login\n * // POST /api/auth/logout\n * // GET /api/auth/user\n * // POST /api/auth/register\n * ```\n */\n/**\n * SetupAuthRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function setupAuthRoutes(app: any) {\n  // Login route\n  app.post('/api/auth/login', async (req: Request, res: Response) => {\n    try {\n      const { email, password } = req.body;\n      // Login attempt initiated\n\n      if (!email || !password) {\n        return res.status(400).json({\n          message: 'Email and password are required',\n          code: 'MISSING_CREDENTIALS',\n        });\n      }\n\n      // Retrieving user by email\n      const user = await storage.getUserByEmail(email.toLowerCase());\n\n      if (!user) {\n        return res.status(401).json({\n          message: 'Invalid credentials',\n          code: 'INVALID_CREDENTIALS',\n        });\n      }\n\n      if (!user.isActive) {\n        return res.status(401).json({\n          message: 'Account is inactive',\n          code: 'ACCOUNT_INACTIVE',\n        });\n      }\n\n      // Use bcrypt for password verification\n      // Verifying password for user\n      // Password verification initiated\n      const isValidPassword = await verifyPassword(password, user.password);\n      // Password verification completed\n\n      if (!isValidPassword) {\n        return res.status(401).json({\n          message: 'Invalid credentials',\n          code: 'INVALID_CREDENTIALS',\n        });\n      }\n\n      // Update last login\n      await storage.updateUser(user.id, { lastLoginAt: new Date() });\n\n      // Set session with user data\n      req.session.userId = user.id;\n      req.session.userRole = user.role;\n      req.session.role = user.role;\n      req.session.user = user; // Add complete user object for middleware compatibility\n\n      // Save session explicitly to ensure it's persisted\n      req.session.save((err) => {\n        if (err) {\n          console.error('❌ Session save error:', err);\n          return res.status(500).json({\n            message: 'Session save failed',\n            code: 'SESSION_SAVE_ERROR',\n          });\n        }\n\n        \n        // Return user data (without password)\n        const { password: _, ...userData } = user;\n        res.json({\n          user: userData,\n          message: 'Login successful',\n        });\n      });\n    } catch (_error: any) {\n      console.error('Login error:', {\n        error: _error,\n        email: req.body?.email,\n        hasPassword: !!req.body?.password,\n        databaseUrl: !!process.env.DATABASE_URL,\n        sessionSecret: !!process.env.SESSION_SECRET,\n      });\n      res.status(500).json({\n        message: 'Login failed',\n        code: 'LOGIN_ERROR',\n        ...(process.env.NODE_ENV === 'development' && { details: _error }),\n      });\n    }\n  });\n\n  // Logout route\n  app.post('/api/auth/logout', (req: Request, res: Response) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error('Logout _error:', err);\n        return res.status(500).json({\n          message: 'Logout failed',\n          code: 'LOGOUT_ERROR',\n        });\n      }\n\n      // Clear cookie with same settings as when it was set\n      const cookieOptions: any = {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'lax',\n      };\n\n      res.clearCookie('koveo.sid', cookieOptions);\n      res.json({ message: 'Logout successful' });\n    });\n  });\n\n  // Get current user route\n  app.get('/api/auth/user', async (req: Request, res: Response) => {\n    try {\n      // Check user session\n\n      // Check if we have a valid session with user ID\n      if (!req.session?.userId) {\n        // No session found\n        return res.status(401).json({\n          message: 'Not authenticated',\n          code: 'NOT_AUTHENTICATED',\n        });\n      }\n\n      // Try to get user from database\n      try {\n        const user = await storage.getUser(req.session.userId);\n        // User lookup completed\n\n        if (!user || !user.isActive) {\n          // User not found or inactive, destroying session\n          req.session.destroy((err) => {\n            if (err) {\n              console.error('Session destruction error:', err);\n            }\n          });\n          return res.status(401).json({\n            message: 'User account not found or inactive',\n            code: 'USER_INACTIVE',\n          });\n        }\n\n        // Optimized session touch - only when needed\n        if (req.session && req.session.touch && req.session.cookie) {\n          const now = Date.now();\n          const sessionAge = now - (req.session.cookie.originalMaxAge || 0) + (req.session.cookie.maxAge || 0);\n          const sessionLifetime = req.session.cookie.originalMaxAge || (7 * 24 * 60 * 60 * 1000);\n          \n          // Only touch session if more than 25% of its lifetime has passed\n          if (sessionAge > sessionLifetime * 0.25) {\n            req.session.touch();\n          }\n        }\n\n        // Return user data without password\n        const { password: _, ...userData } = user;\n        // Successfully authenticated user\n        res.json(userData);\n\n      } catch (userError) {\n        console.error('Database error getting user:', userError);\n        return res.status(500).json({\n          message: 'Authentication check failed',\n          code: 'AUTH_CHECK_ERROR',\n        });\n      }\n    } catch (error: any) {\n      console.error('❌ Auth check error:', error);\n      res.status(500).json({\n        message: 'Authentication check failed',\n        code: 'AUTH_CHECK_ERROR',\n      });\n    }\n  });\n\n  // Debug endpoint to check auth configuration (production only, temporary)\n  app.get('/api/auth/debug', async (req: Request, res: Response) => {\n    const debugInfo = {\n      hasSession: !!req.session,\n      sessionId: req.sessionID,\n      userId: req.session?.userId,\n      userRole: req.session?.userRole,\n      nodeEnv: process.env.NODE_ENV,\n      hasDatabaseUrl: !!process.env.DATABASE_URL,\n      hasSessionSecret: !!process.env.SESSION_SECRET,\n      cookies: req.headers.cookie ? 'present' : 'missing',\n      cookieHeader: req.headers.cookie,\n      sessionStore: req.session?.store?.constructor?.name || 'unknown',\n      userAgent: req.headers['user-agent'],\n      host: req.headers.host,\n      protocol: req.protocol,\n      secure: req.secure,\n      trustProxy: !!req.app.get('trust proxy'),\n    };\n\n    console.log('Auth debug info:', debugInfo);\n    res.json(debugInfo);\n  });\n\n  // Test cookie setting endpoint\n  app.post('/api/auth/test-cookie', (req: Request, res: Response) => {\n    // Set a test session value\n    req.session.testValue = 'test-' + Date.now();\n\n    req.session.save((err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Failed to save session', details: err.message });\n      }\n\n      res.json({\n        message: 'Test cookie set',\n        sessionId: req.sessionID,\n        testValue: req.session.testValue,\n        cookieSettings: {\n          secure: process.env.NODE_ENV === 'production',\n          httpOnly: true,\n          sameSite: 'lax',\n        },\n      });\n    });\n  });\n\n  // Register route (admin only for now)\n  app.post(\n    '/api/auth/register',\n    requireAuth,\n    requireRole(['admin']),\n    async (req: Request, res: Response) => {\n      try {\n        const { email, password, firstName, lastName, role = 'tenant', language = 'fr' } = req.body;\n\n        if (!email || !password || !firstName || !lastName) {\n          return res.status(400).json({\n            message: 'All fields are required',\n            code: 'MISSING_FIELDS',\n          });\n        }\n\n        // Check if user already exists\n        const existingUser = await storage.getUserByEmail(email.toLowerCase());\n        if (existingUser) {\n          return res.status(409).json({\n            message: 'User already exists',\n            code: 'USER_EXISTS',\n          });\n        }\n\n        // Create user with bcrypt hashed password\n        const hashedPassword = await hashPassword(password);\n\n        const newUser = await storage.createUser({\n          email: email.toLowerCase(),\n          password: hashedPassword,\n          firstName,\n          lastName,\n          username: email.toLowerCase(), // Use email as username\n          role,\n          language,\n        });\n\n        const { password: _, ...userData } = newUser;\n        res.status(201).json({\n          user: userData,\n          message: 'User created successfully',\n        });\n      } catch (error: any) {\n        console.error('❌ Registration error:', error);\n        res.status(500).json({\n          message: 'Registration failed',\n          code: 'REGISTRATION_ERROR',\n        });\n      }\n    }\n  );\n\n  // Password Reset Request Route\n  app.post('/api/auth/forgot-password', async (req: Request, res: Response) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({\n          message: 'Email is required',\n          code: 'MISSING_EMAIL',\n        });\n      }\n\n      const user = await storage.getUserByEmail(email.toLowerCase());\n      if (!user || !user.isActive) {\n        // Always respond with success for security (don't reveal if email exists)\n        return res.json({\n          message: 'If this email exists, a password reset link has been sent.',\n          success: true,\n        });\n      }\n\n      // Generate secure random token\n      const resetToken = randomBytes(32).toString('hex');\n      const tokenHash = createHash('sha256').update(resetToken).digest('hex');\n\n      // Create password reset token (expires in 1 hour)\n      const expiresAt = new Date();\n      expiresAt.setHours(expiresAt.getHours() + 1);\n\n      await storage.createPasswordResetToken({\n        userId: user.id,\n        token: resetToken,\n        tokenHash: tokenHash,\n        expiresAt: expiresAt,\n        ipAddress: req.ip || req.connection?.remoteAddress || 'unknown',\n        userAgent: req.headers['user-agent'] || 'unknown',\n      } as any);\n\n      // Send password reset email\n      const host = req.get('host') || '';\n\n      // Use development URL for Replit environments, production URL otherwise\n      let frontendUrl;\n      if (\n        host.includes('replit.dev') ||\n        host.includes('replit.com') ||\n        host.includes('replit.co') ||\n        process.env.NODE_ENV === 'development'\n      ) {\n        // Use the actual Replit development URL\n        frontendUrl = `${req.protocol}://${host}`;\n      } else {\n        // Use production URL - prioritize koveo-gestion.com for production\n        if (host.includes('koveo-gestion.com')) {\n          frontendUrl = `https://${host}`;\n        } else {\n          frontendUrl = process.env.FRONTEND_URL || 'https://koveo-gestion.com';\n        }\n      }\n\n      const cleanUrl = frontendUrl.endsWith('/') ? frontendUrl.slice(0, -1) : frontendUrl;\n      const resetUrl = `${cleanUrl}/reset-password?token=${resetToken}`;\n\n\n      const emailSent = await emailService.sendPasswordResetEmail(\n        email.toLowerCase(),\n        `${user.firstName} ${user.lastName}`,\n        resetUrl\n      );\n\n      if (!emailSent) {\n        console.error('Failed to send password reset email to:', email);\n        return res.status(500).json({\n          message: 'Failed to send password reset email',\n          code: 'EMAIL_SEND_FAILED',\n        });\n      }\n\n      res.json({\n        message: 'If this email exists, a password reset link has been sent.',\n        success: true,\n      });\n    } catch (error: any) {\n      console.error('❌ Password reset request error:', error);\n      res.status(500).json({\n        message: 'Password reset request failed',\n        code: 'PASSWORD_RESET_REQUEST_ERROR',\n      });\n    }\n  });\n\n  // Password Reset Route\n  app.post('/api/auth/reset-password', async (req: Request, res: Response) => {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        return res.status(400).json({\n          message: 'Token and password are required',\n          code: 'MISSING_FIELDS',\n        });\n      }\n\n      // Validate password strength\n      if (password.length < 8) {\n        return res.status(400).json({\n          message: 'Password must be at least 8 characters long',\n          code: 'PASSWORD_TOO_SHORT',\n        });\n      }\n\n      // Check password complexity requirements\n      const hasUpperCase = /[A-Z]/.test(password);\n      const hasLowerCase = /[a-z]/.test(password);\n      const hasNumbers = /\\d/.test(password);\n\n      if (!hasUpperCase || !hasLowerCase || !hasNumbers) {\n        return res.status(400).json({\n          message:\n            'Password must contain at least one uppercase letter, one lowercase letter, and one number',\n          code: 'PASSWORD_TOO_WEAK',\n        });\n      }\n\n      // Find the password reset token\n      const resetToken = await storage.getPasswordResetToken(token);\n      if (!resetToken) {\n        return res.status(400).json({\n          message: 'Invalid or expired password reset token',\n          code: 'INVALID_TOKEN',\n        });\n      }\n\n      // Check if token is expired\n      if (new Date() > resetToken.expiresAt) {\n        return res.status(400).json({\n          message: 'Password reset token has expired',\n          code: 'TOKEN_EXPIRED',\n        });\n      }\n\n      // Check if token has already been used\n      if (resetToken.isUsed) {\n        return res.status(400).json({\n          message: 'Password reset token has already been used',\n          code: 'TOKEN_ALREADY_USED',\n        });\n      }\n\n      // Verify token hash for additional security\n      const tokenHash = createHash('sha256').update(token).digest('hex');\n      if (tokenHash !== resetToken.tokenHash) {\n        return res.status(400).json({\n          message: 'Invalid password reset token',\n          code: 'INVALID_TOKEN_HASH',\n        });\n      }\n\n      // Get the user\n      const user = await storage.getUser(resetToken.userId);\n      if (!user || !user.isActive) {\n        return res.status(400).json({\n          message: 'User account not found or inactive',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      // Update user password with bcrypt hashed version\n      const hashedPassword = await hashPassword(password);\n\n      await storage.updateUser(user.id, {\n        password: hashedPassword,\n        updatedAt: new Date(),\n      });\n\n      // Mark token as used\n      await storage.markPasswordResetTokenAsUsed(resetToken.id);\n\n      // Clean up expired tokens\n      await storage.cleanupExpiredPasswordResetTokens();\n\n      res.json({\n        message: 'Password has been reset successfully',\n        success: true,\n      });\n    } catch (error: any) {\n      console.error('❌ Password reset error:', error);\n      res.status(500).json({\n        message: 'Password reset failed',\n        code: 'PASSWORD_RESET_ERROR',\n      });\n    }\n  });\n}\n\n// Extended user interface for authentication context\ninterface AuthenticatedUser extends User {\n  organizations?: string[];\n  canAccessAllOrganizations?: boolean;\n  organizationId?: string;\n}\n\n// Extend Express Request interface to include authenticated user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: AuthenticatedUser;\n    }\n  }\n}\n\n// Extend express-session to include custom properties\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    userRole?: string;\n    role?: string;\n    user?: AuthenticatedUser;\n    permissions?: string[];\n    store?: any;\n    testValue?: any;\n    organizationId?: string;\n    organizations?: string[];\n    canAccessAllOrganizations?: boolean;\n  }\n}\n"],"version":3}