50484e430b555547e9a6d0b3271ba8fc
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.waitForElementToBeRemoved = waitForElementToBeRemoved;
var _waitFor = require("./wait-for");
const isRemoved = result => !result || Array.isArray(result) && !result.length;
// Check if the element is not present.
// As the name implies, waitForElementToBeRemoved should check `present` --> `removed`
function initialCheck(elements) {
    if (isRemoved(elements)) {
        throw new Error('The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.');
    }
}
async function waitForElementToBeRemoved(callback, options) {
    // created here so we get a nice stacktrace
    const timeoutError = new Error('Timed out in waitForElementToBeRemoved.');
    if (typeof callback !== 'function') {
        initialCheck(callback);
        const elements = Array.isArray(callback) ? callback : [callback];
        const getRemainingElements = elements.map(element => {
            let parent = element.parentElement;
            if (parent === null)
                return () => null;
            while (parent.parentElement)
                parent = parent.parentElement;
            return () => parent.contains(element) ? element : null;
        });
        callback = () => getRemainingElements.map(c => c()).filter(Boolean);
    }
    initialCheck(callback());
    return (0, _waitFor.waitFor)(() => {
        let result;
        try {
            result = callback();
        }
        catch (error) {
            if (error.name === 'TestingLibraryElementError') {
                return undefined;
            }
            throw error;
        }
        if (!isRemoved(result)) {
            throw timeoutError;
        }
        return undefined;
    }, options);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC93YWl0LWZvci1lbGVtZW50LXRvLWJlLXJlbW92ZWQuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLHlCQUF5QixHQUFHLHlCQUF5QixDQUFDO0FBQzlELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBRS9FLHVDQUF1QztBQUN2QyxzRkFBc0Y7QUFDdEYsU0FBUyxZQUFZLENBQUMsUUFBUTtJQUM1QixJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0tBQW9LLENBQUMsQ0FBQztJQUN4TCxDQUFDO0FBQ0gsQ0FBQztBQUNELEtBQUssVUFBVSx5QkFBeUIsQ0FBQyxRQUFRLEVBQUUsT0FBTztJQUN4RCwyQ0FBMkM7SUFDM0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztJQUMxRSxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRSxDQUFDO1FBQ25DLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakUsTUFBTSxvQkFBb0IsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDbkMsSUFBSSxNQUFNLEtBQUssSUFBSTtnQkFBRSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztZQUN2QyxPQUFPLE1BQU0sQ0FBQyxhQUFhO2dCQUFFLE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQzNELE9BQU8sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFDSCxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUNELFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRTtRQUNoQyxJQUFJLE1BQU0sQ0FBQztRQUNYLElBQUksQ0FBQztZQUNILE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztRQUN0QixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyw0QkFBNEIsRUFBRSxDQUFDO2dCQUNoRCxPQUFPLFNBQVMsQ0FBQztZQUNuQixDQUFDO1lBQ0QsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLE1BQU0sWUFBWSxDQUFDO1FBQ3JCLENBQUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDZCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3Qvd2FpdC1mb3ItZWxlbWVudC10by1iZS1yZW1vdmVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy53YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkID0gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZDtcbnZhciBfd2FpdEZvciA9IHJlcXVpcmUoXCIuL3dhaXQtZm9yXCIpO1xuY29uc3QgaXNSZW1vdmVkID0gcmVzdWx0ID0+ICFyZXN1bHQgfHwgQXJyYXkuaXNBcnJheShyZXN1bHQpICYmICFyZXN1bHQubGVuZ3RoO1xuXG4vLyBDaGVjayBpZiB0aGUgZWxlbWVudCBpcyBub3QgcHJlc2VudC5cbi8vIEFzIHRoZSBuYW1lIGltcGxpZXMsIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQgc2hvdWxkIGNoZWNrIGBwcmVzZW50YCAtLT4gYHJlbW92ZWRgXG5mdW5jdGlvbiBpbml0aWFsQ2hlY2soZWxlbWVudHMpIHtcbiAgaWYgKGlzUmVtb3ZlZChlbGVtZW50cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBlbGVtZW50KHMpIGdpdmVuIHRvIHdhaXRGb3JFbGVtZW50VG9CZVJlbW92ZWQgYXJlIGFscmVhZHkgcmVtb3ZlZC4gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZCByZXF1aXJlcyB0aGF0IHRoZSBlbGVtZW50KHMpIGV4aXN0KHMpIGJlZm9yZSB3YWl0aW5nIGZvciByZW1vdmFsLicpO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiB3YWl0Rm9yRWxlbWVudFRvQmVSZW1vdmVkKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIC8vIGNyZWF0ZWQgaGVyZSBzbyB3ZSBnZXQgYSBuaWNlIHN0YWNrdHJhY2VcbiAgY29uc3QgdGltZW91dEVycm9yID0gbmV3IEVycm9yKCdUaW1lZCBvdXQgaW4gd2FpdEZvckVsZW1lbnRUb0JlUmVtb3ZlZC4nKTtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGluaXRpYWxDaGVjayhjYWxsYmFjayk7XG4gICAgY29uc3QgZWxlbWVudHMgPSBBcnJheS5pc0FycmF5KGNhbGxiYWNrKSA/IGNhbGxiYWNrIDogW2NhbGxiYWNrXTtcbiAgICBjb25zdCBnZXRSZW1haW5pbmdFbGVtZW50cyA9IGVsZW1lbnRzLm1hcChlbGVtZW50ID0+IHtcbiAgICAgIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICBpZiAocGFyZW50ID09PSBudWxsKSByZXR1cm4gKCkgPT4gbnVsbDtcbiAgICAgIHdoaWxlIChwYXJlbnQucGFyZW50RWxlbWVudCkgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICByZXR1cm4gKCkgPT4gcGFyZW50LmNvbnRhaW5zKGVsZW1lbnQpID8gZWxlbWVudCA6IG51bGw7XG4gICAgfSk7XG4gICAgY2FsbGJhY2sgPSAoKSA9PiBnZXRSZW1haW5pbmdFbGVtZW50cy5tYXAoYyA9PiBjKCkpLmZpbHRlcihCb29sZWFuKTtcbiAgfVxuICBpbml0aWFsQ2hlY2soY2FsbGJhY2soKSk7XG4gIHJldHVybiAoMCwgX3dhaXRGb3Iud2FpdEZvcikoKCkgPT4ge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci5uYW1lID09PSAnVGVzdGluZ0xpYnJhcnlFbGVtZW50RXJyb3InKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgaWYgKCFpc1JlbW92ZWQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgdGltZW91dEVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBvcHRpb25zKTtcbn1cblxuLypcbmVzbGludFxuICByZXF1aXJlLWF3YWl0OiBcIm9mZlwiXG4qLyJdLCJ2ZXJzaW9uIjozfQ==