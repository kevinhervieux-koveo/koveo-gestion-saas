{"file":"/home/runner/workspace/tests/unit/document-submission-security.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/document-submission-security.test.ts"],"sourcesContent":["/**\n * Document Submission Security Test Suite\n * \n * Tests enhanced security features with Semgrep-focused security rules:\n * 1. Rate limiting (10 files per hour per user)\n * 2. Enhanced file validation (MIME type, size, filename)\n * 3. Path traversal protection (Semgrep: directory-traversal-prevention)\n * 4. Audit logging for all document operations\n * 5. Admin-only audit log access\n * 6. File size limits (25MB maximum)\n * 7. Command injection prevention (Semgrep: command-injection-risk)\n * 8. File upload security (Semgrep: file-upload-security)\n * 9. Input sanitization (Semgrep: input-validation)\n * 10. Access control validation (Semgrep: authorization-bypass)\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\n// Mock document security functions\nconst mockAuditLog: any[] = [];\n\nconst logSecurityEvent = jest.fn((event: string, user: any, success: boolean, details?: any) => {\n  mockAuditLog.push({\n    id: `audit-${Date.now()}-${Math.random()}`,\n    timestamp: new Date().toISOString(),\n    event,\n    userId: user?.id,\n    userRole: user?.role,\n    userEmail: user?.email,\n    success,\n    details: details || {},\n    ipAddress: '127.0.0.1',\n    userAgent: 'test-agent'\n  });\n});\n\n// Rate limiting implementation\nconst rateLimitStore = new Map<string, number[]>();\nconst checkRateLimit = (userId: string): boolean => {\n  const key = `uploads_${userId}`;\n  const now = Date.now();\n  const hour = 60 * 60 * 1000;\n  const userUploads = rateLimitStore.get(key) || [];\n  \n  // Remove uploads older than 1 hour\n  const recentUploads = userUploads.filter(time => now - time < hour);\n  rateLimitStore.set(key, recentUploads);\n  \n  return recentUploads.length < 10; // 10 uploads per hour limit\n};\n\nconst recordUpload = (userId: string): void => {\n  const key = `uploads_${userId}`;\n  const uploads = rateLimitStore.get(key) || [];\n  uploads.push(Date.now());\n  rateLimitStore.set(key, uploads);\n};\n\n// File validation functions\nconst validateFileType = (filename: string, mimeType: string): boolean => {\n  const allowedTypes = [\n    'application/pdf',\n    'image/jpeg',\n    'image/jpg', \n    'image/png',\n    'image/gif',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain'\n  ];\n  return allowedTypes.includes(mimeType.toLowerCase());\n};\n\nconst validateFileSize = (size: number): boolean => {\n  const maxSize = 25 * 1024 * 1024; // 25MB limit (reduced from 50MB)\n  return size <= maxSize;\n};\n\nconst validateFileName = (fileName: string): boolean => {\n  // Check for path traversal attempts\n  const dangerousPatterns = [\n    '../', '..\\\\\\\\', '/etc/', '\\\\\\\\windows\\\\\\\\', \n    '/home/', '/usr/', '/var/', '/root/',\n    '..', './', '.\\\\\\\\', '~/'\n  ];\n  \n  const lowerName = fileName.toLowerCase();\n  return !dangerousPatterns.some(pattern => lowerName.includes(pattern));\n};\n\n// Mock users for testing\nconst mockUsers = {\n  admin: {\n    id: 'admin-123',\n    role: 'admin',\n    email: 'admin@koveo.com',\n    organizationId: 'org-1'\n  },\n  manager: {\n    id: 'manager-123',\n    role: 'manager',\n    email: 'manager@koveo.com',\n    organizationId: 'org-1'\n  },\n  resident: {\n    id: 'resident-123',\n    role: 'resident',\n    email: 'resident@koveo.com',\n    organizationId: 'org-1'\n  },\n  tenant: {\n    id: 'tenant-123',\n    role: 'tenant',\n    email: 'tenant@koveo.com',\n    organizationId: 'org-1'\n  }\n};\n\ndescribe('Document Submission Security Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockAuditLog.length = 0;\n    rateLimitStore.clear();\n  });\n\n  describe('Rate Limiting', () => {\n    it('should allow uploads within rate limit', () => {\n      const userId = 'user-123';\n      \n      // Test uploading 9 files (within limit)\n      for (let i = 0; i < 9; i++) {\n        expect(checkRateLimit(userId)).toBe(true);\n        recordUpload(userId);\n      }\n      \n      // 10th upload should still be allowed\n      expect(checkRateLimit(userId)).toBe(true);\n    });\n\n    it('should reject uploads exceeding rate limit', () => {\n      const userId = 'user-456';\n      \n      // Upload 10 files (at the limit)\n      for (let i = 0; i < 10; i++) {\n        expect(checkRateLimit(userId)).toBe(true);\n        recordUpload(userId);\n      }\n      \n      // 11th upload should be rejected\n      expect(checkRateLimit(userId)).toBe(false);\n    });\n\n    it('should reset rate limit after 1 hour', () => {\n      const userId = 'user-789';\n      \n      // Fill up the rate limit\n      for (let i = 0; i < 10; i++) {\n        recordUpload(userId);\n      }\n      \n      expect(checkRateLimit(userId)).toBe(false);\n      \n      // Simulate time passing (more than 1 hour)\n      const oldTime = Date.now() - (61 * 60 * 1000); // 61 minutes ago\n      rateLimitStore.set(`uploads_${userId}`, [oldTime]);\n      \n      // Should allow uploads again\n      expect(checkRateLimit(userId)).toBe(true);\n    });\n  });\n\n  describe('File Validation', () => {\n    it('should accept valid file types', () => {\n      const validFiles = [\n        { name: 'document.pdf', type: 'application/pdf' },\n        { name: 'image.jpg', type: 'image/jpeg' },\n        { name: 'image.png', type: 'image/png' },\n        { name: 'contract.docx', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' },\n        { name: 'notes.txt', type: 'text/plain' }\n      ];\n\n      validFiles.forEach(file => {\n        expect(validateFileType(file.name, file.type)).toBe(true);\n      });\n    });\n\n    it('should reject invalid file types', () => {\n      const invalidFiles = [\n        { name: 'script.js', type: 'application/javascript' },\n        { name: 'executable.exe', type: 'application/x-msdownload' },\n        { name: 'archive.zip', type: 'application/zip' },\n        { name: 'music.mp3', type: 'audio/mpeg' },\n        { name: 'video.mp4', type: 'video/mp4' }\n      ];\n\n      invalidFiles.forEach(file => {\n        expect(validateFileType(file.name, file.type)).toBe(false);\n      });\n    });\n\n    it('should enforce file size limits', () => {\n      const size20MB = 20 * 1024 * 1024;\n      const size25MB = 25 * 1024 * 1024;\n      const size30MB = 30 * 1024 * 1024;\n\n      expect(validateFileSize(size20MB)).toBe(true);\n      expect(validateFileSize(size25MB)).toBe(true);\n      expect(validateFileSize(size30MB)).toBe(false);\n    });\n\n    it('should prevent path traversal attacks', () => {\n      const dangerousNames = [\n        '../../../etc/passwd',\n        '..\\\\\\\\..\\\\\\\\windows\\\\\\\\system32\\\\\\\\config',\n        '/etc/shadow',\n        '~/../../sensitive-file.txt',\n        'normal/../../../etc/passwd',\n        'file..\\\\\\\\..\\\\\\\\system'\n      ];\n\n      dangerousNames.forEach(name => {\n        expect(validateFileName(name)).toBe(false);\n      });\n    });\n\n    it('should allow safe filenames', () => {\n      const safeNames = [\n        'document.pdf',\n        'my-file-2024.jpg',\n        'Contract_v2.docx',\n        'Invoice 123.pdf',\n        'receipt (1).png'\n      ];\n\n      safeNames.forEach(name => {\n        expect(validateFileName(name)).toBe(true);\n      });\n    });\n  });\n\n  describe('Audit Logging', () => {\n    it('should log successful document uploads', () => {\n      const user = mockUsers.resident;\n      \n      logSecurityEvent('DOCUMENT_UPLOAD', user, true, {\n        fileName: 'lease-agreement.pdf',\n        fileSize: 1024000,\n        documentType: 'legal'\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0]).toMatchObject({\n        event: 'DOCUMENT_UPLOAD',\n        userId: user.id,\n        userRole: user.role,\n        success: true,\n        details: {\n          fileName: 'lease-agreement.pdf',\n          fileSize: 1024000,\n          documentType: 'legal'\n        }\n      });\n    });\n\n    it('should log failed upload attempts', () => {\n      const user = mockUsers.tenant;\n      \n      logSecurityEvent('DOCUMENT_UPLOAD_FAILED', user, false, {\n        fileName: 'malicious.exe',\n        reason: 'Invalid file type',\n        fileSize: 500000\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0]).toMatchObject({\n        event: 'DOCUMENT_UPLOAD_FAILED',\n        userId: user.id,\n        userRole: user.role,\n        success: false,\n        details: {\n          reason: 'Invalid file type'\n        }\n      });\n    });\n\n    it('should log rate limit violations', () => {\n      const user = mockUsers.manager;\n      \n      logSecurityEvent('RATE_LIMIT_EXCEEDED', user, false, {\n        currentCount: 11,\n        limit: 10,\n        timeWindow: '1 hour'\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0]).toMatchObject({\n        event: 'RATE_LIMIT_EXCEEDED',\n        userId: user.id,\n        success: false\n      });\n    });\n\n    it('should log document access attempts', () => {\n      const user = mockUsers.tenant;\n      \n      logSecurityEvent('DOCUMENT_ACCESS', user, true, {\n        documentId: 'doc-123',\n        documentName: 'building-rules.pdf',\n        accessType: 'view'\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0]).toMatchObject({\n        event: 'DOCUMENT_ACCESS',\n        userId: user.id,\n        success: true\n      });\n    });\n\n    it('should log unauthorized access attempts', () => {\n      const user = mockUsers.tenant;\n      \n      logSecurityEvent('UNAUTHORIZED_ACCESS', user, false, {\n        documentId: 'private-doc-456',\n        reason: 'Tenant role cannot access private documents'\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0]).toMatchObject({\n        event: 'UNAUTHORIZED_ACCESS',\n        userId: user.id,\n        success: false\n      });\n    });\n  });\n\n  describe('Admin Audit Log Access', () => {\n    it('should allow admin access to audit logs', () => {\n      const admin = mockUsers.admin;\n      \n      // Simulate admin requesting audit logs\n      const hasAccess = admin.role === 'admin';\n      \n      if (hasAccess) {\n        logSecurityEvent('AUDIT_LOG_ACCESS', admin, true, {\n          requestedRecords: 50,\n          filters: {}\n        });\n      }\n\n      expect(hasAccess).toBe(true);\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0].event).toBe('AUDIT_LOG_ACCESS');\n    });\n\n    it('should deny non-admin access to audit logs', () => {\n      const nonAdminUsers = [mockUsers.manager, mockUsers.resident, mockUsers.tenant];\n      \n      nonAdminUsers.forEach(user => {\n        const hasAccess = user.role === 'admin';\n        \n        if (!hasAccess) {\n          logSecurityEvent('UNAUTHORIZED_AUDIT_ACCESS', user, false, {\n            reason: 'Insufficient privileges for audit log access'\n          });\n        }\n\n        expect(hasAccess).toBe(false);\n      });\n\n      expect(mockAuditLog).toHaveLength(3);\n      mockAuditLog.forEach(log => {\n        expect(log.event).toBe('UNAUTHORIZED_AUDIT_ACCESS');\n        expect(log.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Integration Security Tests', () => {\n    it('should handle complete document submission flow with all security checks', () => {\n      const user = mockUsers.resident;\n      const fileName = 'lease-renewal.pdf';\n      const fileSize = 2 * 1024 * 1024; // 2MB\n      const mimeType = 'application/pdf';\n\n      // 1. Check rate limit\n      const withinRateLimit = checkRateLimit(user.id);\n      expect(withinRateLimit).toBe(true);\n\n      // 2. Validate file\n      const validType = validateFileType(fileName, mimeType);\n      const validSize = validateFileSize(fileSize);\n      const validName = validateFileName(fileName);\n\n      expect(validType).toBe(true);\n      expect(validSize).toBe(true);\n      expect(validName).toBe(true);\n\n      // 3. Record successful upload\n      recordUpload(user.id);\n      logSecurityEvent('DOCUMENT_UPLOAD', user, true, {\n        fileName,\n        fileSize,\n        mimeType,\n        documentType: 'legal'\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0].success).toBe(true);\n    });\n\n    it('should reject malicious file upload attempt', () => {\n      const user = mockUsers.tenant;\n      const fileName = '../../../etc/passwd';\n      const fileSize = 1024;\n      const mimeType = 'application/x-executable';\n\n      // Security checks should fail\n      const withinRateLimit = checkRateLimit(user.id);\n      const validType = validateFileType(fileName, mimeType);\n      const validSize = validateFileSize(fileSize);\n      const validName = validateFileName(fileName);\n\n      expect(withinRateLimit).toBe(true);\n      expect(validType).toBe(false);\n      expect(validSize).toBe(true);\n      expect(validName).toBe(false);\n\n      // Log the security violation\n      logSecurityEvent('SECURITY_VIOLATION', user, false, {\n        fileName,\n        mimeType,\n        violations: ['invalid_file_type', 'path_traversal_attempt'],\n        severity: 'high'\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0]).toMatchObject({\n        event: 'SECURITY_VIOLATION',\n        success: false,\n        details: {\n          severity: 'high'\n        }\n      });\n    });\n  });\n\n  describe('Quebec Compliance Security', () => {\n    it('should handle French filenames properly', () => {\n      const frenchNames = [\n        'Contrat_de_location.pdf',\n        'Règlement_de_copropriété.docx',\n        'Procès-verbal_assemblée.pdf',\n        'États_financiers_2024.xlsx'\n      ];\n\n      frenchNames.forEach(name => {\n        expect(validateFileName(name)).toBe(true);\n      });\n    });\n\n    it('should log Quebec-specific document types', () => {\n      const user = mockUsers.manager;\n      \n      logSecurityEvent('DOCUMENT_UPLOAD', user, true, {\n        fileName: 'Déclaration_de_copropriété.pdf',\n        documentType: 'quebec_legal',\n        language: 'fr',\n        quebecCompliant: true\n      });\n\n      expect(mockAuditLog).toHaveLength(1);\n      expect(mockAuditLog[0].details.quebecCompliant).toBe(true);\n    });\n  });\n});"],"version":3}