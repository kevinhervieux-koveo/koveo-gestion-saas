bab1023f9753147feac501f24a54199b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BugReports;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const alert_dialog_1 = require("@/components/ui/alert-dialog");
const dropdown_menu_1 = require("@/components/ui/dropdown-menu");
const lucide_react_1 = require("lucide-react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const use_auth_1 = require("@/hooks/use-auth");
const file_upload_1 = require("@/components/ui/file-upload");
// Bug form schema
const bugFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Bug title is required (example: Login button not working on mobile)').max(200, 'Title must be less than 200 characters'),
    description: zod_2.z
        .string()
        .min(10, 'Bug description must be at least 10 characters long (example: When I click the login button on my phone, nothing happens and no error message appears)')
        .max(2000, 'Description must be less than 2000 characters'),
    category: zod_2.z.enum([
        'ui_ux',
        'functionality',
        'performance',
        'data',
        'security',
        'integration',
        'other',
    ]),
    page: zod_2.z.string().min(1, 'Page location is required (example: Login page, Dashboard, Settings)').max(100, 'Page location must be less than 100 characters'),
    priority: zod_2.z.enum(['low', 'medium', 'high', 'critical']),
    status: zod_2.z.enum(['new', 'acknowledged', 'in_progress', 'resolved', 'closed']).optional(),
    reproductionSteps: zod_2.z.string().max(1000, 'Reproduction steps must be less than 1000 characters').optional(),
});
const categoryLabels = {
    ui_ux: 'UI/UX',
    functionality: 'Functionality',
    performance: 'Performance',
    data: 'Data',
    security: 'Security',
    integration: 'Integration',
    other: 'Other',
};
const priorityColors = {
    low: 'bg-green-100 text-green-800',
    medium: 'bg-yellow-100 text-yellow-800',
    high: 'bg-orange-100 text-orange-800',
    critical: 'bg-red-100 text-red-800',
};
const statusColors = {
    new: 'bg-blue-100 text-blue-800',
    acknowledged: 'bg-purple-100 text-purple-800',
    in_progress: 'bg-yellow-100 text-yellow-800',
    resolved: 'bg-green-100 text-green-800',
    closed: 'bg-gray-100 text-gray-800',
};
/**
 *
 */
function BugReports() {
    const [isCreateDialogOpen, setIsCreateDialogOpen] = (0, react_1.useState)(false);
    const [isEditDialogOpen, setIsEditDialogOpen] = (0, react_1.useState)(false);
    const [isViewDialogOpen, setIsViewDialogOpen] = (0, react_1.useState)(false);
    const [editingBug, setEditingBug] = (0, react_1.useState)(null);
    const [viewingBug, setViewingBug] = (0, react_1.useState)(null);
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('all');
    const [priorityFilter, setPriorityFilter] = (0, react_1.useState)('all');
    const [attachedFiles, setAttachedFiles] = (0, react_1.useState)([]);
    const { toast } = (0, use_toast_1.useToast)();
    const { user } = (0, use_auth_1.useAuth)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(bugFormSchema),
        defaultValues: {
            title: '',
            description: '',
            category: 'functionality',
            page: '',
            priority: 'medium',
            reproductionSteps: '',
        },
    });
    const editForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(bugFormSchema),
        defaultValues: {
            title: '',
            description: '',
            category: 'functionality',
            page: '',
            priority: 'medium',
            reproductionSteps: '',
        },
    });
    // Fetch bugs
    const { data: bugs = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/bugs'],
        enabled: !!user,
    });
    // Create bug mutation
    const createBugMutation = (0, react_query_1.useMutation)({
        mutationFn: (data) => (0, queryClient_1.apiRequest)('POST', '/api/bugs', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
            setIsCreateDialogOpen(false);
            form.reset();
            toast({
                title: 'Bug reported',
                description: 'Your bug report has been submitted successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to create bug report',
                variant: 'destructive',
            });
        },
    });
    // Update bug mutation
    const updateBugMutation = (0, react_query_1.useMutation)({
        mutationFn: ({ id, data }) => (0, queryClient_1.apiRequest)('PATCH', `/api/bugs/${id}`, data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
            setIsEditDialogOpen(false);
            setEditingBug(null);
            editForm.reset();
            toast({
                title: 'Bug updated',
                description: 'Bug report has been updated successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to update bug report',
                variant: 'destructive',
            });
        },
    });
    // Delete bug mutation
    const deleteBugMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('DELETE', `/api/bugs/${id}`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
            toast({
                title: 'Bug deleted',
                description: 'Bug report has been deleted successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to delete bug report',
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (data) => {
        if (attachedFiles.length > 0) {
            // Create FormData for multipart upload
            const formData = new FormData();
            // Add bug data
            Object.entries(data).forEach(([key, value]) => {
                if (value !== undefined && value !== null) {
                    formData.append(key, value.toString());
                }
            });
            // Add attached files
            attachedFiles.forEach(file => {
                formData.append('attachments', file);
            });
            // Make multipart request
            fetch('/api/bugs', {
                method: 'POST',
                body: formData,
                credentials: 'include',
            })
                .then(response => {
                if (!response.ok) {
                    return response.json().then(err => Promise.reject(err));
                }
                return response.json();
            })
                .then(() => {
                queryClient.invalidateQueries({ queryKey: ['/api/bugs'] });
                setAttachedFiles([]);
                form.reset();
                setIsCreateDialogOpen(false);
                toast({
                    title: 'Bug created',
                    description: 'Bug report has been created successfully.',
                });
            })
                .catch((error) => {
                toast({
                    title: 'Error',
                    description: error.message || 'Failed to create bug report',
                    variant: 'destructive',
                });
            });
        }
        else {
            // No files, use regular API request
            createBugMutation.mutate(data);
        }
    };
    const onEditSubmit = (data) => {
        if (editingBug) {
            updateBugMutation.mutate({ id: editingBug.id, data });
        }
    };
    // Handle file attachments
    const handleFilesSelect = (files) => {
        setAttachedFiles(prev => [...prev, ...files]);
    };
    // Handle file download
    const handleFileDownload = (fileUrl, fileName) => {
        const link = document.createElement('a');
        link.href = fileUrl;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    const handleEdit = (bug) => {
        if (!canEditBug(bug)) {
            return;
        }
        setEditingBug(bug);
        editForm.reset({
            title: bug.title,
            description: bug.description,
            category: bug.category,
            page: bug.page,
            priority: bug.priority,
            status: bug.status,
            reproductionSteps: bug.reproductionSteps || '',
        });
        setIsEditDialogOpen(true);
    };
    const handleDelete = (bugId) => {
        // Close any open dialogs before deleting
        setIsEditDialogOpen(false);
        setIsViewDialogOpen(false);
        setEditingBug(null);
        setViewingBug(null);
        deleteBugMutation.mutate(bugId);
    };
    // Check if user can edit/delete a bug
    const canEditBug = (bug) => {
        return user && (user.role === 'admin' || user.role === 'manager' || bug.createdBy === user.id);
    };
    const canDeleteBug = (bug) => {
        return user && (user.role === 'admin' || bug.createdBy === user.id);
    };
    // Filter bugs
    const filteredBugs = bugs.filter((bug) => {
        const matchesSearch = bug.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            bug.description.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = statusFilter === 'all' || bug.status === statusFilter;
        const matchesPriority = priorityFilter === 'all' || bug.priority === priorityFilter;
        return matchesSearch && matchesStatus && matchesPriority;
    });
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Bug Reports', subtitle: 'Report issues and track bug status' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bug, { className: 'w-5 h-5' }), "Bug Reports"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col md:flex-row gap-4 items-start md:items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col sm:flex-row gap-4 flex-1', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'relative flex-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Search bugs...', value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: 'pl-10', "data-testid": 'input-search-bugs' })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: statusFilter, onValueChange: setStatusFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full sm:w-40', "data-testid": 'select-status-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Filter by status' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Status" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'new', children: "New" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'acknowledged', children: "Acknowledged" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in_progress', children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'resolved', children: "Resolved" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'closed', children: "Closed" })] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: priorityFilter, onValueChange: setPriorityFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full sm:w-40', "data-testid": 'select-priority-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Filter by priority' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Priority" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'low', children: "Low" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'medium', children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'high', children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'critical', children: "Critical" })] })] })] }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isCreateDialogOpen, onOpenChange: setIsCreateDialogOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { className: 'flex items-center gap-2', "data-testid": 'button-create-bug', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4' }), "Report Bug"] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Report a Bug" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'title', children: "Title*" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'title', placeholder: 'Brief description of the issue', ...form.register('title'), "data-testid": 'input-bug-title' }), form.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'description', children: "Description*" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'description', placeholder: 'Detailed description of the bug, including what you expected to happen', rows: 4, ...form.register('description'), "data-testid": 'textarea-bug-description', onPaste: (e) => {
                                                                                    const items = Array.from(e.clipboardData?.items || []);
                                                                                    const imageItems = items.filter(item => item.type.indexOf('image') !== -1);
                                                                                    if (imageItems.length > 0) {
                                                                                        e.preventDefault();
                                                                                        imageItems.forEach(item => {
                                                                                            const file = item.getAsFile();
                                                                                            if (file) {
                                                                                                handleFilesSelect([file]);
                                                                                            }
                                                                                        });
                                                                                    }
                                                                                } }), form.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'category', children: "Category*" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: (value) => {
                                                                                            form.setValue('category', value);
                                                                                            form.clearErrors('category');
                                                                                        }, value: form.watch('category'), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-bug-category', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: Object.entries(categoryLabels).map(([value, label]) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: value, children: label }, value))) })] }), form.formState.errors.category && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.category.message }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'priority', children: "Priority" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: (value) => {
                                                                                            form.setValue('priority', value);
                                                                                            form.clearErrors('priority');
                                                                                        }, value: form.watch('priority'), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-bug-priority', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'low', children: "Low" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'medium', children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'high', children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'critical', children: "Critical" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'page', children: "Page/Location*" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'page', placeholder: 'e.g., Dashboard, Settings, Login', ...form.register('page'), "data-testid": 'input-bug-page' }), form.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.page.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'reproductionSteps', children: "Steps to Reproduce" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'reproductionSteps', placeholder: '1. Go to...\\n2. Click on...\\n3. Notice that...', rows: 3, ...form.register('reproductionSteps'), "data-testid": 'textarea-reproduction-steps' })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-3 border-t pt-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: "w-4 h-4 text-gray-500" }), (0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Screenshots & Files" }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: "(Optional - Screenshots, error logs, console outputs)" })] }), (0, jsx_runtime_1.jsx)(file_upload_1.CompactFileUpload, { onFilesSelect: handleFilesSelect, maxFiles: 5, acceptedTypes: ['image/*', '.pdf', '.txt', '.log', '.json'] })] }), attachedFiles.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600", children: ["Selected files (", attachedFiles.length, "):"] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-2", children: attachedFiles.map((file, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1 px-2 py-1 bg-gray-100 rounded text-xs", children: [(0, jsx_runtime_1.jsx)("span", { className: "truncate max-w-[100px]", children: file.name }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setAttachedFiles(prev => prev.filter((_, i) => i !== index)), className: "text-gray-500 hover:text-red-500", type: "button", children: "\u00D7" })] }, index))) })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-2 pt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setIsCreateDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: createBugMutation.isPending, "data-testid": 'button-submit-bug', children: createBugMutation.isPending ? 'Submitting...' : 'Submit Bug Report' })] })] })] })] }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isEditDialogOpen, onOpenChange: setIsEditDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[90vh] overflow-y-auto', "data-testid": 'edit-bug-dialog', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Edit Bug Report" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: editForm.handleSubmit(onEditSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-title', className: 'text-sm font-medium', children: ["Title ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'edit-title', ...editForm.register('title'), "data-testid": 'input-edit-title' }), editForm.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-category', className: 'text-sm font-medium', children: ["Category ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('category'), onValueChange: (value) => editForm.setValue('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-category', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'ui_ux', children: "UI/UX" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'functionality', children: "Functionality" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'performance', children: "Performance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'data', children: "Data" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'security', children: "Security" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'integration', children: "Integration" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'other', children: "Other" })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-description', className: 'text-sm font-medium', children: ["Description ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'edit-description', ...editForm.register('description'), rows: 4, "data-testid": 'textarea-edit-description', onPaste: (e) => {
                                                                                const items = Array.from(e.clipboardData?.items || []);
                                                                                const imageItems = items.filter(item => item.type.indexOf('image') !== -1);
                                                                                if (imageItems.length > 0) {
                                                                                    e.preventDefault();
                                                                                    imageItems.forEach(item => {
                                                                                        const file = item.getAsFile();
                                                                                        if (file) {
                                                                                            handleFilesSelect([file]);
                                                                                        }
                                                                                    });
                                                                                }
                                                                            } }), editForm.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-priority', className: 'text-sm font-medium', children: ["Priority ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('priority'), onValueChange: (value) => editForm.setValue('priority', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-priority', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select priority' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'low', children: "Low" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'medium', children: "Medium" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'high', children: "High" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'critical', children: "Critical" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'edit-status', className: 'text-sm font-medium', children: "Status" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('status'), onValueChange: (value) => editForm.setValue('status', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-status', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select status' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'new', children: "New" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'acknowledged', children: "Acknowledged" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in_progress', children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'resolved', children: "Resolved" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'closed', children: "Closed" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-page', className: 'text-sm font-medium', children: ["Page/Location ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'edit-page', ...editForm.register('page'), placeholder: 'e.g., Dashboard, Settings, etc.', "data-testid": 'input-edit-page' }), editForm.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.page.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'edit-reproduction-steps', className: 'text-sm font-medium', children: "Steps to Reproduce (Optional)" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'edit-reproduction-steps', ...editForm.register('reproductionSteps'), rows: 3, placeholder: '1. Go to...\\n2. Click on...\\n3. See error', "data-testid": 'textarea-edit-reproduction-steps' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-2 pt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setIsEditDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: updateBugMutation.isPending, "data-testid": 'button-update-bug', children: updateBugMutation.isPending ? 'Updating...' : 'Update Bug Report' })] })] })] }) })] }) })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { children: ["Bug Reports (", filteredBugs.length, ")"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: isLoading ? ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-8', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mt-2', children: "Loading bugs..." })] })) : filteredBugs.length === 0 ? ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-8', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bug, { className: 'w-16 h-16 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: "No bugs found" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500 mb-4', children: searchTerm || statusFilter !== 'all' || priorityFilter !== 'all'
                                                    ? 'No bugs match your current filters'
                                                    : 'No bug reports have been submitted yet' })] })) : ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-4', children: filteredBugs.map((bug) => ((0, jsx_runtime_1.jsx)("div", { className: "border rounded-lg p-4 hover:bg-gray-50 transition-colors", "data-testid": `bug-card-${bug.id}`, children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 min-w-0', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'font-semibold text-lg truncate', "data-testid": `bug-title-${bug.id}`, children: bug.title }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: priorityColors[bug.priority], children: bug.priority }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[bug.status], children: bug.status.replace('_', ' ') }), bug.attachmentCount && bug.attachmentCount > 0 && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: 'bg-green-100 text-green-800 flex items-center gap-1 px-2 py-1', "data-testid": `badge-attachment-count-${bug.id}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'w-3 h-3' }), bug.attachmentCount, " file", bug.attachmentCount > 1 ? 's' : ''] }))] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mb-3 line-clamp-2', "data-testid": `bug-description-${bug.id}`, children: bug.description }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-wrap items-center gap-4 text-sm text-gray-500', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Tag, { className: 'w-4 h-4' }), (0, jsx_runtime_1.jsx)("span", { children: categoryLabels[bug.category] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-4 h-4' }), (0, jsx_runtime_1.jsx)("span", { children: new Date(bug.createdAt).toLocaleDateString() })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-1', children: (0, jsx_runtime_1.jsxs)("span", { children: ["Page: ", bug.page] }) })] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-shrink-0', children: (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: (e) => e.stopPropagation(), "data-testid": `button-menu-${bug.id}`, children: (0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontal, { className: 'w-4 h-4' }) }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuContent, { align: 'end', onClick: (e) => e.stopPropagation(), children: [(0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: (e) => {
                                                                                e.stopPropagation();
                                                                                setViewingBug(bug);
                                                                                setIsViewDialogOpen(true);
                                                                            }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-4 h-4 mr-2' }), "View"] }), canEditBug(bug) && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: (e) => {
                                                                                e.stopPropagation();
                                                                                handleEdit(bug);
                                                                            }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit2, { className: 'w-4 h-4 mr-2' }), "Edit"] })), canDeleteBug(bug) && ((0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialog, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onSelect: (e) => e.preventDefault(), onClick: (e) => e.stopPropagation(), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'w-4 h-4 mr-2 text-red-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-red-600', children: "Delete" })] }) }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogContent, { children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogHeader, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTitle, { children: "Delete Bug Report" }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogDescription, { children: "Are you sure you want to delete this bug report? This action cannot be undone." })] }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogCancel, { children: "Cancel" }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogAction, { onClick: () => handleDelete(bug.id), className: 'bg-red-600 hover:bg-red-700', children: "Delete" })] })] })] }))] })] }) })] }) }, bug.id))) })) })] }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isViewDialogOpen, onOpenChange: setIsViewDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-4xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Bug Report Details" }) }), viewingBug && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold mb-2', children: viewingBug.title }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-wrap gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { className: priorityColors[viewingBug.priority], children: viewingBug.priority.toUpperCase() }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[viewingBug.status], children: viewingBug.status.replace('_', ' ').toUpperCase() }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', children: categoryLabels[viewingBug.category] })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-medium mb-1', children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 bg-gray-50 p-3 rounded-lg', children: viewingBug.description })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-wrap gap-4 text-sm', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-4 h-4' }), (0, jsx_runtime_1.jsxs)("span", { children: ["Created: ", new Date(viewingBug.createdAt).toLocaleDateString()] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-1', children: (0, jsx_runtime_1.jsxs)("span", { children: ["\uD83D\uDCCD Page: ", viewingBug.page] }) })] }), viewingBug.reproductionSteps && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-medium mb-1', children: "Reproduction Steps" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 bg-blue-50 p-3 rounded-lg', children: viewingBug.reproductionSteps })] })), viewingBug.attachments && viewingBug.attachments.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'border-t pt-4', children: [(0, jsx_runtime_1.jsxs)("h4", { className: 'font-medium mb-3 flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'w-4 h-4' }), "Attached Files (", viewingBug.attachments.length, ")"] }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-2', children: viewingBug.attachments.map((attachment, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-8 h-8 bg-red-100 rounded flex items-center justify-center', children: (0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'w-4 h-4 text-red-600' }) }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'font-medium text-sm', children: attachment.name }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: [(attachment.size / 1024 / 1024).toFixed(2), " MB"] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: 'outline', size: 'sm', onClick: (e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                window.open(`/api/documents/${attachment.id}/file`, '_blank');
                                                                            }, className: 'flex items-center gap-1', "data-testid": `button-view-${attachment.id}`, children: "\uD83D\uDC41\uFE0F View" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: 'outline', size: 'sm', onClick: (e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                const link = document.createElement('a');
                                                                                link.href = `/api/documents/${attachment.id}/file?download=true`;
                                                                                link.download = attachment.name;
                                                                                document.body.appendChild(link);
                                                                                link.click();
                                                                                document.body.removeChild(link);
                                                                            }, className: 'flex items-center gap-1', "data-testid": `button-download-${attachment.id}`, children: "\u2B07\uFE0F Download" })] })] }, index))) })] })), (0, jsx_runtime_1.jsx)("div", { className: 'flex justify-end pt-4', children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => setIsViewDialogOpen(false), children: "Close" }) })] }))] }) })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,