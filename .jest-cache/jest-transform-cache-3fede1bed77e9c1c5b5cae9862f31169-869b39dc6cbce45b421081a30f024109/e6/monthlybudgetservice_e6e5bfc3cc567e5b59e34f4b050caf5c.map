{"file":"/home/runner/workspace/server/services/monthly-budget-service.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/services/monthly-budget-service.ts"],"sourcesContent":["import { db } from '../db';\nimport { eq, and, gte, lte, sql } from 'drizzle-orm';\nimport type { InsertMonthlyBudget, Building, MoneyFlow } from '@shared/schema';\nimport * as schema from '@shared/schema';\n\nconst { monthlyBudgets, moneyFlow, buildings, users } = schema;\n\n/**\n * Service for populating and managing monthly budget entries.\n * Creates budget entries for each building from construction date to 3 years in the future.\n * Populates with aggregated income and expense data from money_flow table.\n */\nexport class MonthlyBudgetService {\n  private readonly YEARS_TO_PROJECT = 3;\n\n  /**\n   * Populate monthly budget entries for all buildings.\n   * Creates entries from construction date to 3 years in the future.\n   */\n  async populateAllMonthlyBudgets(): Promise<{\n    budgetsCreated: number;\n    buildingsProcessed: number;\n  }> {\n\n    let budgetsCreated = 0;\n    let buildingsProcessed = 0;\n\n    try {\n      // Get all active buildings\n      const activeBuildings = await db.select().from(buildings).where(eq(buildings.isActive, true));\n\n\n      for (const building of activeBuildings) {\n        try {\n          const buildingBudgets = await this.populateBudgetsForBuilding(building);\n          budgetsCreated += buildingBudgets;\n          buildingsProcessed++;\n          console.log(\n            `✅ Created ${buildingBudgets} budget entries for building: ${building.name}`\n          );\n        } catch (error: any) {\n          console.error(`❌ Error processing building ${building.name}:`, error);\n          // Continue with other buildings\n        }\n      }\n\n      console.log(`📊 Monthly budget population completed:\n        - Buildings processed: ${buildingsProcessed}\n        - Budget entries created: ${budgetsCreated}`);\n\n      return {\n        budgetsCreated,\n        buildingsProcessed,\n      };\n    } catch (error: any) {\n      console.error('❌ Error populating monthly budgets:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Populate monthly budget entries for a specific building.\n   * @param building\n   */\n  async populateBudgetsForBuilding(building: Building): Promise<number> {\n    // Calculate date range\n    const constructionDate = new Date();\n    if (building.yearBuilt) {\n      constructionDate.setFullYear(building.yearBuilt, 0, 1); // January 1st of construction year\n    } else {\n      // If no construction year, start from current year\n      constructionDate.setFullYear(constructionDate.getFullYear(), 0, 1);\n    }\n\n    const endDate = new Date();\n    endDate.setFullYear(endDate.getFullYear() + this.YEARS_TO_PROJECT, 11, 31); // December 31st, 25 years from now\n\n    console.log(\n      `📅 Processing building ${building.name} from ${constructionDate.toISOString().slice(0, 10)} to ${endDate.toISOString().slice(0, 10)}`\n    );\n\n    // Get distinct income and expense categories for this building\n    const { incomeCategories, expenseCategories } = await this.getCategoriesForBuilding(\n      building.id\n    );\n\n    console.log(\n      `📊 Found ${incomeCategories.length} income categories and ${expenseCategories.length} expense categories`\n    );\n\n    // Remove existing budget entries for this building to avoid duplicates\n    await this.cleanupExistingBudgets(building.id);\n\n    // Generate monthly entries\n    const budgetEntries: InsertMonthlyBudget[] = [];\n    const systemUser = await this.getSystemUser();\n\n    const currentDate = new Date(constructionDate);\n\n    while (currentDate <= endDate) {\n      const year = currentDate.getFullYear();\n      const month = currentDate.getMonth() + 1; // 1-12\n\n      // Get aggregated amounts for this month/year\n      const { incomes, spendings } = await this.getAggregatedAmountsForMonth(\n        building.id,\n        year,\n        month,\n        incomeCategories,\n        expenseCategories\n      );\n\n      budgetEntries.push({\n        buildingId: building.id,\n        year,\n        month,\n        incomeTypes: incomeCategories,\n        incomes: incomes, // Keep as number array\n        spendingTypes: expenseCategories,\n        spendings: spendings, // Keep as number array\n        approved: false,\n        approvedBy: undefined,\n        originalBudgetId: undefined,\n      });\n\n      // Move to next month\n      currentDate.setMonth(currentDate.getMonth() + 1);\n\n      // Safety check to avoid infinite loops\n      if (budgetEntries.length > 5000) {\n        break;\n      }\n    }\n\n    // Insert entries in batches\n    if (budgetEntries.length > 0) {\n      await this.insertBudgetEntriesInBatches(budgetEntries);\n    }\n\n    return budgetEntries.length;\n  }\n\n  /**\n   * Get distinct income and expense categories from money_flow for a specific building.\n   * @param buildingId\n   */\n  private async getCategoriesForBuilding(buildingId: string): Promise<{\n    incomeCategories: string[];\n    expenseCategories: string[];\n  }> {\n    // Get distinct income categories\n    const incomeResult = await db\n      .selectDistinct({ category: moneyFlow.category })\n      .from(moneyFlow)\n      .where(and(eq(moneyFlow.buildingId, buildingId), eq(moneyFlow.type, 'income')));\n\n    // Get distinct expense categories\n    const expenseResult = await db\n      .selectDistinct({ category: moneyFlow.category })\n      .from(moneyFlow)\n      .where(and(eq(moneyFlow.buildingId, buildingId), eq(moneyFlow.type, 'expense')));\n\n    const incomeCategories = incomeResult.map((r) => r.category);\n    const expenseCategories = expenseResult.map((r) => r.category);\n\n    // If no categories exist, provide defaults based on the enum definitions\n    const defaultIncomeCategories = [\n      'monthly_fees',\n      'special_assessment',\n      'late_fees',\n      'parking_fees',\n      'utility_reimbursement',\n      'insurance_claim',\n      'other_income',\n    ];\n\n    const defaultExpenseCategories = [\n      'bill_payment',\n      'maintenance_expense',\n      'administrative_expense',\n      'professional_services',\n      'other_expense',\n    ];\n\n    return {\n      incomeCategories: incomeCategories.length > 0 ? incomeCategories : defaultIncomeCategories,\n      expenseCategories:\n        expenseCategories.length > 0 ? expenseCategories : defaultExpenseCategories,\n    };\n  }\n\n  /**\n   * Get aggregated income and expense amounts for a specific month/year.\n   * @param buildingId\n   * @param year\n   * @param month\n   * @param incomeCategories\n   * @param expenseCategories\n   */\n  private async getAggregatedAmountsForMonth(\n    buildingId: string,\n    year: number,\n    month: number,\n    incomeCategories: string[],\n    expenseCategories: string[]\n  ): Promise<{\n    incomes: number[];\n    spendings: number[];\n  }> {\n    const startDate = new Date(year, month - 1, 1); // First day of month\n    const endDate = new Date(year, month, 0); // Last day of month\n\n    const startDateStr = startDate.toISOString().split('T')[0];\n    const endDateStr = endDate.toISOString().split('T')[0];\n\n    // Get aggregated incomes by category\n    const incomes: number[] = [];\n    for (const category of incomeCategories) {\n      const result = await db\n        .select({\n          total: sql<string>`COALESCE(SUM(CAST(${moneyFlow.amount} AS DECIMAL)), 0)`,\n        })\n        .from(moneyFlow)\n        .where(\n          and(\n            eq(moneyFlow.buildingId, buildingId),\n            eq(moneyFlow.type, 'income'),\n            eq(moneyFlow.category, category),\n            gte(moneyFlow.transactionDate, startDateStr),\n            lte(moneyFlow.transactionDate, endDateStr)\n          )\n        );\n\n      incomes.push(parseFloat(result[0]?.total || '0'));\n    }\n\n    // Get aggregated expenses by category\n    const spendings: number[] = [];\n    for (const category of expenseCategories) {\n      const result = await db\n        .select({\n          total: sql<string>`COALESCE(SUM(CAST(${moneyFlow.amount} AS DECIMAL)), 0)`,\n        })\n        .from(moneyFlow)\n        .where(\n          and(\n            eq(moneyFlow.buildingId, buildingId),\n            eq(moneyFlow.type, 'expense'),\n            eq(moneyFlow.category, category),\n            gte(moneyFlow.transactionDate, startDateStr),\n            lte(moneyFlow.transactionDate, endDateStr)\n          )\n        );\n\n      spendings.push(parseFloat(result[0]?.total || '0'));\n    }\n\n    return { incomes, spendings };\n  }\n\n  /**\n   * Clean up existing budget entries for a building to avoid duplicates.\n   * @param buildingId\n   */\n  private async cleanupExistingBudgets(buildingId: string): Promise<void> {\n    await db.delete(monthlyBudgets).where(eq(monthlyBudgets.buildingId, buildingId));\n\n  }\n\n  /**\n   * Insert budget entries in batches to avoid database constraints.\n   * @param entries\n   * @param batchSize\n   */\n  private async insertBudgetEntriesInBatches(\n    entries: InsertMonthlyBudget[],\n    batchSize = 100\n  ): Promise<void> {\n    for (let i = 0; i < entries.length; i += batchSize) {\n      const batch = entries.slice(i, i + batchSize);\n      try {\n        await db.insert(monthlyBudgets).values(batch);\n      } catch (error: any) {\n        console.error(`❌ Error inserting batch at index ${i}:`, error);\n        // Try individual inserts for the failed batch\n        for (const entry of batch) {\n          try {\n            await db.insert(monthlyBudgets).values(entry);\n          } catch (individualError: any) {\n            console.error(`❌ Error inserting individual budget entry:`, individualError);\n            // Skip this entry and continue\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get or create a system user for automated entries.\n   */\n  private async getSystemUser(): Promise<{ id: string }> {\n    // Try to find an existing system user\n    const existingUser = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.email, 'system@koveo-gestion.com'))\n      .limit(1);\n\n    if (existingUser.length > 0) {\n      return existingUser[0];\n    }\n\n    // If no system user exists, use the first admin user\n    const adminUser = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.role, 'admin'))\n      .limit(1);\n\n    if (adminUser.length > 0) {\n      return adminUser[0];\n    }\n\n    // Fallback: use any active user\n    const anyUser = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.isActive, true))\n      .limit(1);\n\n    if (anyUser.length > 0) {\n      return anyUser[0];\n    }\n\n    throw new Error('No active users found for system operations');\n  }\n\n  /**\n   * Repopulate budgets for a specific building (useful when money flow data changes).\n   * @param buildingId\n   */\n  async repopulateBudgetsForBuilding(buildingId: string): Promise<number> {\n\n    const building = await db.select().from(buildings).where(eq(buildings.id, buildingId)).limit(1);\n\n    if (building.length === 0) {\n      throw new Error(`Building ${buildingId} not found`);\n    }\n\n    const budgetsCreated = await this.populateBudgetsForBuilding(building[0]);\n\n    console.log(\n      `✅ Repopulated ${budgetsCreated} budget entries for building ${building[0].name}`\n    );\n    return budgetsCreated;\n  }\n\n  /**\n   * Get budget statistics.\n   */\n  async getBudgetStatistics(): Promise<{\n    totalBudgetEntries: number;\n    buildingsWithBudgets: number;\n    oldestBudgetDate: string | null;\n    newestBudgetDate: string | null;\n  }> {\n    const [totalResult] = await db\n      .select({ count: sql<number>`count(*)::int` })\n      .from(monthlyBudgets);\n\n    const [buildingsResult] = await db\n      .select({ count: sql<number>`count(DISTINCT ${monthlyBudgets.buildingId})::int` })\n      .from(monthlyBudgets);\n\n    const [oldestResult] = await db\n      .select({\n        year: monthlyBudgets.year,\n        month: monthlyBudgets.month,\n      })\n      .from(monthlyBudgets)\n      .orderBy(monthlyBudgets.year, monthlyBudgets.month)\n      .limit(1);\n\n    const [newestResult] = await db\n      .select({\n        year: monthlyBudgets.year,\n        month: monthlyBudgets.month,\n      })\n      .from(monthlyBudgets)\n      .orderBy(sql`${monthlyBudgets.year} DESC, ${monthlyBudgets.month} DESC`)\n      .limit(1);\n\n    const oldestDate = oldestResult\n      ? `${oldestResult.year}-${String(oldestResult.month).padStart(2, '0')}`\n      : null;\n    const newestDate = newestResult\n      ? `${newestResult.year}-${String(newestResult.month).padStart(2, '0')}`\n      : null;\n\n    return {\n      totalBudgetEntries: totalResult.count,\n      buildingsWithBudgets: buildingsResult.count,\n      oldestBudgetDate: oldestDate,\n      newestBudgetDate: newestDate,\n    };\n  }\n}\n\n// Export singleton instance\nexport const monthlyBudgetService = new MonthlyBudgetService();\n"],"version":3}