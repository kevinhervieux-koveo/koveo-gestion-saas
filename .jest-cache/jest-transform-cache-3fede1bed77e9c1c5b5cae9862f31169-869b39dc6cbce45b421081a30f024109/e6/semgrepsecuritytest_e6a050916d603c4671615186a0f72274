1c1bc845dcaac4cd8d833ca71d550d02
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
describe('Semgrep Security Tests', () => {
    let semgrepResults;
    beforeAll(() => {
        // Ensure reports directory exists
        if (!fs.existsSync('reports')) {
            fs.mkdirSync('reports', { recursive: true });
        }
        // Run Semgrep scan and capture results
        try {
            const semgrepOutput = (0, child_process_1.execSync)('semgrep --config=.semgrep.yml --json --no-git-ignore --include="*.ts" --include="*.tsx" .', {
                encoding: 'utf-8',
                stdio: ['pipe', 'pipe', 'pipe'],
                timeout: 30000
            });
            semgrepResults = JSON.parse(semgrepOutput);
            // Save results to reports directory
            fs.writeFileSync('reports/semgrep-results.json', JSON.stringify(semgrepResults, null, 2));
        }
        catch (error) {
            // Semgrep may exit with code 1 when findings are detected, which is expected
            if (error.stdout) {
                try {
                    semgrepResults = JSON.parse(error.stdout);
                    fs.writeFileSync('reports/semgrep-results.json', JSON.stringify(semgrepResults, null, 2));
                }
                catch (parseError) {
                    console.warn('Semgrep output parsing failed, using empty results');
                    semgrepResults = { results: [] };
                }
            }
            else {
                console.warn('Semgrep execution completed with no output, using empty results');
                semgrepResults = { results: [] };
            }
        }
    });
    describe('Security Rule Validation', () => {
        test('should detect hardcoded secrets', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'hardcoded-secrets') || [];
            // Should not have any hardcoded secrets in production code
            expect(violations.length).toBe(0);
        });
        test('should detect SQL injection vulnerabilities', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'sql-injection-prevention') || [];
            // Should not have any SQL injection vulnerabilities
            expect(violations.length).toBe(0);
        });
        test('should detect XSS vulnerabilities in React components', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'xss-prevention-react') || [];
            // Should not have any unvalidated dangerouslySetInnerHTML usage
            expect(violations.length).toBe(0);
        });
        test('should detect weak cryptographic usage', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'weak-crypto-usage') || [];
            // Should not use weak crypto algorithms
            expect(violations.length).toBe(0);
        });
        test('should detect command injection risks', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'command-injection-risk') || [];
            // Should not have command injection vulnerabilities
            expect(violations.length).toBe(0);
        });
        test('should detect directory traversal vulnerabilities', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'directory-traversal-prevention') || [];
            // Should not have path traversal vulnerabilities
            expect(violations.length).toBe(0);
        });
        test('should detect environment variable exposure', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'env-var-exposure') || [];
            // Should not expose environment variables in logs
            expect(violations.length).toBe(0);
        });
        test('should detect database connection exposure', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'database-connection-exposure') || [];
            // Should not expose database connection details
            expect(violations.length).toBe(0);
        });
    });
    describe('Quebec Law 25 Compliance', () => {
        test('should flag potential personal data logging violations', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'law25-sensitive-data-logging') || [];
            if (violations.length > 0) {
                console.warn('⚠️ Potential Law 25 violations found:', violations.length);
                violations.forEach((v) => {
                    console.warn(`  - ${v.path}:${v.start.line} - ${v.message}`);
                });
            }
            // This is informational - log violations but don't fail the test
            expect(violations).toBeDefined();
        });
        test('should flag cross-border data transfer without consent', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'law25-cross-border-transfer') || [];
            // Critical compliance issue
            expect(violations.length).toBe(0);
        });
        test('should flag missing encryption for sensitive data', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'law25-encryption-at-rest') || [];
            // Critical compliance issue
            expect(violations.length).toBe(0);
        });
        test('should flag insecure communication protocols', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'law25-secure-communication') || [];
            // Critical compliance issue
            expect(violations.length).toBe(0);
        });
    });
    describe('Express.js Security', () => {
        test('should detect CORS wildcard misconfigurations', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'express-cors-wildcard') || [];
            // Should not have overly permissive CORS
            expect(violations.length).toBe(0);
        });
        test('should detect missing rate limiting on auth endpoints', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'missing-rate-limiting') || [];
            if (violations.length > 0) {
                console.warn('⚠️ Auth endpoints without rate limiting:', violations.length);
                violations.forEach((v) => {
                    console.warn(`  - ${v.path}:${v.start.line} - ${v.message}`);
                });
            }
            // Warning level - log but don't fail
            expect(violations).toBeDefined();
        });
        test('should detect insecure session configurations', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'session-security-missing') || [];
            if (violations.length > 0) {
                console.warn('⚠️ Session security issues:', violations.length);
                violations.forEach((v) => {
                    console.warn(`  - ${v.path}:${v.start.line} - ${v.message}`);
                });
            }
            // Warning level - check but don't fail tests
            expect(violations).toBeDefined();
        });
    });
    describe('React Security', () => {
        test('should detect external links without security attributes', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'react-external-links') || [];
            if (violations.length > 0) {
                console.warn('⚠️ External links missing rel attributes:', violations.length);
                violations.forEach((v) => {
                    console.warn(`  - ${v.path}:${v.start.line} - ${v.message}`);
                });
            }
            // Warning level - informational
            expect(violations).toBeDefined();
        });
        test('should detect potential prototype pollution', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'prototype-pollution-risk') || [];
            // Critical security issue
            expect(violations.length).toBe(0);
        });
    });
    describe('Property Management Security', () => {
        test('should protect tenant financial data', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'tenant-financial-data-protection') || [];
            if (violations.length > 0) {
                console.warn('⚠️ Tenant financial data protection concerns:', violations.length);
                violations.forEach((v) => {
                    console.warn(`  - ${v.path}:${v.start.line} - ${v.message}`);
                });
            }
            // Domain-specific warning
            expect(violations).toBeDefined();
        });
        test('should protect building access data', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'building-access-data-security') || [];
            if (violations.length > 0) {
                console.warn('⚠️ Building access data security concerns:', violations.length);
                violations.forEach((v) => {
                    console.warn(`  - ${v.path}:${v.start.line} - ${v.message}`);
                });
            }
            // Domain-specific warning
            expect(violations).toBeDefined();
        });
    });
    describe('File Upload Security', () => {
        test('should detect insecure file upload configurations', () => {
            const violations = semgrepResults.results?.filter((result) => result.check_id === 'file-upload-security') || [];
            if (violations.length > 0) {
                console.warn('⚠️ File upload security issues:', violations.length);
                violations.forEach((v) => {
                    console.warn(`  - ${v.path}:${v.start.line} - ${v.message}`);
                });
            }
            // Warning level - should be addressed
            expect(violations).toBeDefined();
        });
    });
    describe('Security Summary Report', () => {
        test('should generate security summary report', () => {
            const totalFindings = semgrepResults.results?.length || 0;
            const criticalFindings = semgrepResults.results?.filter((r) => r.severity === 'ERROR').length || 0;
            const warningFindings = semgrepResults.results?.filter((r) => r.severity === 'WARNING').length || 0;
            const infoFindings = semgrepResults.results?.filter((r) => r.severity === 'INFO').length || 0;
            const summary = {
                totalFindings,
                criticalFindings,
                warningFindings,
                infoFindings,
                scanDate: new Date().toISOString(),
                rulesApplied: semgrepResults.results?.map((r) => r.check_id).filter((id, index, array) => array.indexOf(id) === index) || []
            };
            // Save security summary
            fs.writeFileSync('reports/security-summary.json', JSON.stringify(summary, null, 2));
            console.log('\n🔒 Security Scan Summary:');
            console.log(`   Total findings: ${totalFindings}`);
            console.log(`   Critical: ${criticalFindings}`);
            console.log(`   Warnings: ${warningFindings}`);
            console.log(`   Info: ${infoFindings}`);
            console.log(`   Rules applied: ${summary.rulesApplied.length}`);
            // Test should pass if no critical findings
            expect(criticalFindings).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy9zZWN1cml0eS9zZW1ncmVwLXNlY3VyaXR5LnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpREFBeUM7QUFDekMsdUNBQXlCO0FBR3pCLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7SUFDdEMsSUFBSSxjQUFtQixDQUFDO0lBRXhCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixrQ0FBa0M7UUFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUM5QixFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLENBQUM7UUFFRCx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDO1lBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBQSx3QkFBUSxFQUM1QiwyRkFBMkYsRUFDM0Y7Z0JBQ0UsUUFBUSxFQUFFLE9BQU87Z0JBQ2pCLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO2dCQUMvQixPQUFPLEVBQUUsS0FBSzthQUNmLENBQ0YsQ0FBQztZQUNGLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTNDLG9DQUFvQztZQUNwQyxFQUFFLENBQUMsYUFBYSxDQUFDLDhCQUE4QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVGLENBQUM7UUFBQyxPQUFPLEtBQVUsRUFBRSxDQUFDO1lBQ3BCLDZFQUE2RTtZQUM3RSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDakIsSUFBSSxDQUFDO29CQUNILGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDMUMs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QUcsQ0FBQyxnQkFBZ0IsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLGVBQWUsRUFBRSxDQUFDLENBQUM7WUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLFlBQVksRUFBRSxDQUFDLENBQUM7WUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBRWhFLDJDQUEyQztZQUMzQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdGVzdHMvc2VjdXJpdHkvc2VtZ3JlcC1zZWN1cml0eS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5kZXNjcmliZSgnU2VtZ3JlcCBTZWN1cml0eSBUZXN0cycsICgpID0+IHtcbiAgbGV0IHNlbWdyZXBSZXN1bHRzOiBhbnk7XG4gIFxuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIC8vIEVuc3VyZSByZXBvcnRzIGRpcmVjdG9yeSBleGlzdHNcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoJ3JlcG9ydHMnKSkge1xuICAgICAgZnMubWtkaXJTeW5jKCdyZXBvcnRzJywgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJ1biBTZW1ncmVwIHNjYW4gYW5kIGNhcHR1cmUgcmVzdWx0c1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZW1ncmVwT3V0cHV0ID0gZXhlY1N5bmMoXG4gICAgICAgICdzZW1ncmVwIC0tY29uZmlnPS5zZW1ncmVwLnltbCAtLWpzb24gLS1uby1naXQtaWdub3JlIC0taW5jbHVkZT1cIioudHNcIiAtLWluY2x1ZGU9XCIqLnRzeFwiIC4nLFxuICAgICAgICB7IFxuICAgICAgICAgIGVuY29kaW5nOiAndXRmLTgnLFxuICAgICAgICAgIHN0ZGlvOiBbJ3BpcGUnLCAncGlwZScsICdwaXBlJ10sXG4gICAgICAgICAgdGltZW91dDogMzAwMDBcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHNlbWdyZXBSZXN1bHRzID0gSlNPTi5wYXJzZShzZW1ncmVwT3V0cHV0KTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSByZXN1bHRzIHRvIHJlcG9ydHMgZGlyZWN0b3J5XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKCdyZXBvcnRzL3NlbWdyZXAtcmVzdWx0cy5qc29uJywgSlNPTi5zdHJpbmdpZnkoc2VtZ3JlcFJlc3VsdHMsIG51bGwsIDIpKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAvLyBTZW1ncmVwIG1heSBleGl0IHdpdGggY29kZSAxIHdoZW4gZmluZGluZ3MgYXJlIGRldGVjdGVkLCB3aGljaCBpcyBleHBlY3RlZFxuICAgICAgaWYgKGVycm9yLnN0ZG91dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNlbWdyZXBSZXN1bHRzID0gSlNPTi5wYXJzZShlcnJvci5zdGRvdXQpO1xuICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMoJ3JlcG9ydHMvc2VtZ3JlcC1yZXN1bHRzLmpzb24nLCBKU09OLnN0cmluZ2lmeShzZW1ncmVwUmVzdWx0cywgbnVsbCwgMikpO1xuICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdTZW1ncmVwIG91dHB1dCBwYXJzaW5nIGZhaWxlZCwgdXNpbmcgZW1wdHkgcmVzdWx0cycpO1xuICAgICAgICAgIHNlbWdyZXBSZXN1bHRzID0geyByZXN1bHRzOiBbXSB9O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1NlbWdyZXAgZXhlY3V0aW9uIGNvbXBsZXRlZCB3aXRoIG5vIG91dHB1dCwgdXNpbmcgZW1wdHkgcmVzdWx0cycpO1xuICAgICAgICBzZW1ncmVwUmVzdWx0cyA9IHsgcmVzdWx0czogW10gfTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTZWN1cml0eSBSdWxlIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBoYXJkY29kZWQgc2VjcmV0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBzZW1ncmVwUmVzdWx0cy5yZXN1bHRzPy5maWx0ZXIoKHJlc3VsdDogYW55KSA9PiBcbiAgICAgICAgcmVzdWx0LmNoZWNrX2lkID09PSAnaGFyZGNvZGVkLXNlY3JldHMnXG4gICAgICApIHx8IFtdO1xuICAgICAgXG4gICAgICAvLyBTaG91bGQgbm90IGhhdmUgYW55IGhhcmRjb2RlZCBzZWNyZXRzIGluIHByb2R1Y3Rpb24gY29kZVxuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBTUUwgaW5qZWN0aW9uIHZ1bG5lcmFiaWxpdGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBzZW1ncmVwUmVzdWx0cy5yZXN1bHRzPy5maWx0ZXIoKHJlc3VsdDogYW55KSA9PiBcbiAgICAgICAgcmVzdWx0LmNoZWNrX2lkID09PSAnc3FsLWluamVjdGlvbi1wcmV2ZW50aW9uJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gU2hvdWxkIG5vdCBoYXZlIGFueSBTUUwgaW5qZWN0aW9uIHZ1bG5lcmFiaWxpdGllc1xuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBYU1MgdnVsbmVyYWJpbGl0aWVzIGluIFJlYWN0IGNvbXBvbmVudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ3hzcy1wcmV2ZW50aW9uLXJlYWN0J1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gU2hvdWxkIG5vdCBoYXZlIGFueSB1bnZhbGlkYXRlZCBkYW5nZXJvdXNseVNldElubmVySFRNTCB1c2FnZVxuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCB3ZWFrIGNyeXB0b2dyYXBoaWMgdXNhZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ3dlYWstY3J5cHRvLXVzYWdlJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gU2hvdWxkIG5vdCB1c2Ugd2VhayBjcnlwdG8gYWxnb3JpdGhtc1xuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBjb21tYW5kIGluamVjdGlvbiByaXNrcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBzZW1ncmVwUmVzdWx0cy5yZXN1bHRzPy5maWx0ZXIoKHJlc3VsdDogYW55KSA9PiBcbiAgICAgICAgcmVzdWx0LmNoZWNrX2lkID09PSAnY29tbWFuZC1pbmplY3Rpb24tcmlzaydcbiAgICAgICkgfHwgW107XG4gICAgICBcbiAgICAgIC8vIFNob3VsZCBub3QgaGF2ZSBjb21tYW5kIGluamVjdGlvbiB2dWxuZXJhYmlsaXRpZXNcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBkZXRlY3QgZGlyZWN0b3J5IHRyYXZlcnNhbCB2dWxuZXJhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ2RpcmVjdG9yeS10cmF2ZXJzYWwtcHJldmVudGlvbidcbiAgICAgICkgfHwgW107XG4gICAgICBcbiAgICAgIC8vIFNob3VsZCBub3QgaGF2ZSBwYXRoIHRyYXZlcnNhbCB2dWxuZXJhYmlsaXRpZXNcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zLmxlbmd0aCkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBkZXRlY3QgZW52aXJvbm1lbnQgdmFyaWFibGUgZXhwb3N1cmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ2Vudi12YXItZXhwb3N1cmUnXG4gICAgICApIHx8IFtdO1xuICAgICAgXG4gICAgICAvLyBTaG91bGQgbm90IGV4cG9zZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgaW4gbG9nc1xuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBkYXRhYmFzZSBjb25uZWN0aW9uIGV4cG9zdXJlJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmlvbGF0aW9ucyA9IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/LmZpbHRlcigocmVzdWx0OiBhbnkpID0+IFxuICAgICAgICByZXN1bHQuY2hlY2tfaWQgPT09ICdkYXRhYmFzZS1jb25uZWN0aW9uLWV4cG9zdXJlJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gU2hvdWxkIG5vdCBleHBvc2UgZGF0YWJhc2UgY29ubmVjdGlvbiBkZXRhaWxzXG4gICAgICBleHBlY3QodmlvbGF0aW9ucy5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdRdWViZWMgTGF3IDI1IENvbXBsaWFuY2UnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGZsYWcgcG90ZW50aWFsIHBlcnNvbmFsIGRhdGEgbG9nZ2luZyB2aW9sYXRpb25zJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmlvbGF0aW9ucyA9IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/LmZpbHRlcigocmVzdWx0OiBhbnkpID0+IFxuICAgICAgICByZXN1bHQuY2hlY2tfaWQgPT09ICdsYXcyNS1zZW5zaXRpdmUtZGF0YS1sb2dnaW5nJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgaWYgKHZpb2xhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBQb3RlbnRpYWwgTGF3IDI1IHZpb2xhdGlvbnMgZm91bmQ6JywgdmlvbGF0aW9ucy5sZW5ndGgpO1xuICAgICAgICB2aW9sYXRpb25zLmZvckVhY2goKHY6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgICAtICR7di5wYXRofToke3Yuc3RhcnQubGluZX0gLSAke3YubWVzc2FnZX1gKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFRoaXMgaXMgaW5mb3JtYXRpb25hbCAtIGxvZyB2aW9sYXRpb25zIGJ1dCBkb24ndCBmYWlsIHRoZSB0ZXN0XG4gICAgICBleHBlY3QodmlvbGF0aW9ucykudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBmbGFnIGNyb3NzLWJvcmRlciBkYXRhIHRyYW5zZmVyIHdpdGhvdXQgY29uc2VudCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBzZW1ncmVwUmVzdWx0cy5yZXN1bHRzPy5maWx0ZXIoKHJlc3VsdDogYW55KSA9PiBcbiAgICAgICAgcmVzdWx0LmNoZWNrX2lkID09PSAnbGF3MjUtY3Jvc3MtYm9yZGVyLXRyYW5zZmVyJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gQ3JpdGljYWwgY29tcGxpYW5jZSBpc3N1ZVxuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGZsYWcgbWlzc2luZyBlbmNyeXB0aW9uIGZvciBzZW5zaXRpdmUgZGF0YScsICgpID0+IHtcbiAgICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBzZW1ncmVwUmVzdWx0cy5yZXN1bHRzPy5maWx0ZXIoKHJlc3VsdDogYW55KSA9PiBcbiAgICAgICAgcmVzdWx0LmNoZWNrX2lkID09PSAnbGF3MjUtZW5jcnlwdGlvbi1hdC1yZXN0J1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gQ3JpdGljYWwgY29tcGxpYW5jZSBpc3N1ZVxuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGZsYWcgaW5zZWN1cmUgY29tbXVuaWNhdGlvbiBwcm90b2NvbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ2xhdzI1LXNlY3VyZS1jb21tdW5pY2F0aW9uJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgLy8gQ3JpdGljYWwgY29tcGxpYW5jZSBpc3N1ZVxuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXhwcmVzcy5qcyBTZWN1cml0eScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZGV0ZWN0IENPUlMgd2lsZGNhcmQgbWlzY29uZmlndXJhdGlvbnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ2V4cHJlc3MtY29ycy13aWxkY2FyZCdcbiAgICAgICkgfHwgW107XG4gICAgICBcbiAgICAgIC8vIFNob3VsZCBub3QgaGF2ZSBvdmVybHkgcGVybWlzc2l2ZSBDT1JTXG4gICAgICBleHBlY3QodmlvbGF0aW9ucy5sZW5ndGgpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZGV0ZWN0IG1pc3NpbmcgcmF0ZSBsaW1pdGluZyBvbiBhdXRoIGVuZHBvaW50cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBzZW1ncmVwUmVzdWx0cy5yZXN1bHRzPy5maWx0ZXIoKHJlc3VsdDogYW55KSA9PiBcbiAgICAgICAgcmVzdWx0LmNoZWNrX2lkID09PSAnbWlzc2luZy1yYXRlLWxpbWl0aW5nJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgaWYgKHZpb2xhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBBdXRoIGVuZHBvaW50cyB3aXRob3V0IHJhdGUgbGltaXRpbmc6JywgdmlvbGF0aW9ucy5sZW5ndGgpO1xuICAgICAgICB2aW9sYXRpb25zLmZvckVhY2goKHY6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgICAtICR7di5wYXRofToke3Yuc3RhcnQubGluZX0gLSAke3YubWVzc2FnZX1gKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFdhcm5pbmcgbGV2ZWwgLSBsb2cgYnV0IGRvbid0IGZhaWxcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBpbnNlY3VyZSBzZXNzaW9uIGNvbmZpZ3VyYXRpb25zJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmlvbGF0aW9ucyA9IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/LmZpbHRlcigocmVzdWx0OiBhbnkpID0+IFxuICAgICAgICByZXN1bHQuY2hlY2tfaWQgPT09ICdzZXNzaW9uLXNlY3VyaXR5LW1pc3NpbmcnXG4gICAgICApIHx8IFtdO1xuICAgICAgXG4gICAgICBpZiAodmlvbGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIFNlc3Npb24gc2VjdXJpdHkgaXNzdWVzOicsIHZpb2xhdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgdmlvbGF0aW9ucy5mb3JFYWNoKCh2OiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYCAgLSAke3YucGF0aH06JHt2LnN0YXJ0LmxpbmV9IC0gJHt2Lm1lc3NhZ2V9YCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBXYXJuaW5nIGxldmVsIC0gY2hlY2sgYnV0IGRvbid0IGZhaWwgdGVzdHNcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVhY3QgU2VjdXJpdHknLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBleHRlcm5hbCBsaW5rcyB3aXRob3V0IHNlY3VyaXR5IGF0dHJpYnV0ZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ3JlYWN0LWV4dGVybmFsLWxpbmtzJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgaWYgKHZpb2xhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBFeHRlcm5hbCBsaW5rcyBtaXNzaW5nIHJlbCBhdHRyaWJ1dGVzOicsIHZpb2xhdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgdmlvbGF0aW9ucy5mb3JFYWNoKCh2OiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYCAgLSAke3YucGF0aH06JHt2LnN0YXJ0LmxpbmV9IC0gJHt2Lm1lc3NhZ2V9YCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBXYXJuaW5nIGxldmVsIC0gaW5mb3JtYXRpb25hbFxuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZGV0ZWN0IHBvdGVudGlhbCBwcm90b3R5cGUgcG9sbHV0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmlvbGF0aW9ucyA9IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/LmZpbHRlcigocmVzdWx0OiBhbnkpID0+IFxuICAgICAgICByZXN1bHQuY2hlY2tfaWQgPT09ICdwcm90b3R5cGUtcG9sbHV0aW9uLXJpc2snXG4gICAgICApIHx8IFtdO1xuICAgICAgXG4gICAgICAvLyBDcml0aWNhbCBzZWN1cml0eSBpc3N1ZVxuICAgICAgZXhwZWN0KHZpb2xhdGlvbnMubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUHJvcGVydHkgTWFuYWdlbWVudCBTZWN1cml0eScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgcHJvdGVjdCB0ZW5hbnQgZmluYW5jaWFsIGRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ3RlbmFudC1maW5hbmNpYWwtZGF0YS1wcm90ZWN0aW9uJ1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgaWYgKHZpb2xhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBUZW5hbnQgZmluYW5jaWFsIGRhdGEgcHJvdGVjdGlvbiBjb25jZXJuczonLCB2aW9sYXRpb25zLmxlbmd0aCk7XG4gICAgICAgIHZpb2xhdGlvbnMuZm9yRWFjaCgodjogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGAgIC0gJHt2LnBhdGh9OiR7di5zdGFydC5saW5lfSAtICR7di5tZXNzYWdlfWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gRG9tYWluLXNwZWNpZmljIHdhcm5pbmdcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHByb3RlY3QgYnVpbGRpbmcgYWNjZXNzIGRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2aW9sYXRpb25zID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyZXN1bHQ6IGFueSkgPT4gXG4gICAgICAgIHJlc3VsdC5jaGVja19pZCA9PT0gJ2J1aWxkaW5nLWFjY2Vzcy1kYXRhLXNlY3VyaXR5J1xuICAgICAgKSB8fCBbXTtcbiAgICAgIFxuICAgICAgaWYgKHZpb2xhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBCdWlsZGluZyBhY2Nlc3MgZGF0YSBzZWN1cml0eSBjb25jZXJuczonLCB2aW9sYXRpb25zLmxlbmd0aCk7XG4gICAgICAgIHZpb2xhdGlvbnMuZm9yRWFjaCgodjogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGAgIC0gJHt2LnBhdGh9OiR7di5zdGFydC5saW5lfSAtICR7di5tZXNzYWdlfWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gRG9tYWluLXNwZWNpZmljIHdhcm5pbmdcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRmlsZSBVcGxvYWQgU2VjdXJpdHknLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGRldGVjdCBpbnNlY3VyZSBmaWxlIHVwbG9hZCBjb25maWd1cmF0aW9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IHZpb2xhdGlvbnMgPSBzZW1ncmVwUmVzdWx0cy5yZXN1bHRzPy5maWx0ZXIoKHJlc3VsdDogYW55KSA9PiBcbiAgICAgICAgcmVzdWx0LmNoZWNrX2lkID09PSAnZmlsZS11cGxvYWQtc2VjdXJpdHknXG4gICAgICApIHx8IFtdO1xuICAgICAgXG4gICAgICBpZiAodmlvbGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEZpbGUgdXBsb2FkIHNlY3VyaXR5IGlzc3VlczonLCB2aW9sYXRpb25zLmxlbmd0aCk7XG4gICAgICAgIHZpb2xhdGlvbnMuZm9yRWFjaCgodjogYW55KSA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGAgIC0gJHt2LnBhdGh9OiR7di5zdGFydC5saW5lfSAtICR7di5tZXNzYWdlfWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gV2FybmluZyBsZXZlbCAtIHNob3VsZCBiZSBhZGRyZXNzZWRcbiAgICAgIGV4cGVjdCh2aW9sYXRpb25zKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU2VjdXJpdHkgU3VtbWFyeSBSZXBvcnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIHNlY3VyaXR5IHN1bW1hcnkgcmVwb3J0JywgKCkgPT4ge1xuICAgICAgY29uc3QgdG90YWxGaW5kaW5ncyA9IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/Lmxlbmd0aCB8fCAwO1xuICAgICAgY29uc3QgY3JpdGljYWxGaW5kaW5ncyA9IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/LmZpbHRlcigocjogYW55KSA9PiByLnNldmVyaXR5ID09PSAnRVJST1InKS5sZW5ndGggfHwgMDtcbiAgICAgIGNvbnN0IHdhcm5pbmdGaW5kaW5ncyA9IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/LmZpbHRlcigocjogYW55KSA9PiByLnNldmVyaXR5ID09PSAnV0FSTklORycpLmxlbmd0aCB8fCAwO1xuICAgICAgY29uc3QgaW5mb0ZpbmRpbmdzID0gc2VtZ3JlcFJlc3VsdHMucmVzdWx0cz8uZmlsdGVyKChyOiBhbnkpID0+IHIuc2V2ZXJpdHkgPT09ICdJTkZPJykubGVuZ3RoIHx8IDA7XG5cbiAgICAgIGNvbnN0IHN1bW1hcnkgPSB7XG4gICAgICAgIHRvdGFsRmluZGluZ3MsXG4gICAgICAgIGNyaXRpY2FsRmluZGluZ3MsXG4gICAgICAgIHdhcm5pbmdGaW5kaW5ncyxcbiAgICAgICAgaW5mb0ZpbmRpbmdzLFxuICAgICAgICBzY2FuRGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBydWxlc0FwcGxpZWQ6IHNlbWdyZXBSZXN1bHRzLnJlc3VsdHM/Lm1hcCgocjogYW55KSA9PiByLmNoZWNrX2lkKS5maWx0ZXIoKGlkOiBzdHJpbmcsIGluZGV4OiBudW1iZXIsIGFycmF5OiBzdHJpbmdbXSkgPT4gYXJyYXkuaW5kZXhPZihpZCkgPT09IGluZGV4KSB8fCBbXVxuICAgICAgfTtcblxuICAgICAgLy8gU2F2ZSBzZWN1cml0eSBzdW1tYXJ5XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKCdyZXBvcnRzL3NlY3VyaXR5LXN1bW1hcnkuanNvbicsIEpTT04uc3RyaW5naWZ5KHN1bW1hcnksIG51bGwsIDIpKTtcblxuICAgICAgY29uc29sZS5sb2coJ1xcbvCflJIgU2VjdXJpdHkgU2NhbiBTdW1tYXJ5OicpO1xuICAgICAgY29uc29sZS5sb2coYCAgIFRvdGFsIGZpbmRpbmdzOiAke3RvdGFsRmluZGluZ3N9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgQ3JpdGljYWw6ICR7Y3JpdGljYWxGaW5kaW5nc31gKTtcbiAgICAgIGNvbnNvbGUubG9nKGAgICBXYXJuaW5nczogJHt3YXJuaW5nRmluZGluZ3N9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgSW5mbzogJHtpbmZvRmluZGluZ3N9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgUnVsZXMgYXBwbGllZDogJHtzdW1tYXJ5LnJ1bGVzQXBwbGllZC5sZW5ndGh9YCk7XG5cbiAgICAgIC8vIFRlc3Qgc2hvdWxkIHBhc3MgaWYgbm8gY3JpdGljYWwgZmluZGluZ3NcbiAgICAgIGV4cGVjdChjcml0aWNhbEZpbmRpbmdzKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==