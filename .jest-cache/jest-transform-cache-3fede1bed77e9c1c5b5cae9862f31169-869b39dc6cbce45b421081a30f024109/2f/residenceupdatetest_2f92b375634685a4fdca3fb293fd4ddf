54d88e426fc8b760c4cf222bda30677c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
// Use mock database for testing
let currentResidenceData = {
    id: 'mock-residence-id',
    unitNumber: '101',
    floor: 1,
    squareFootage: '1000',
    bedrooms: 2,
    bathrooms: '1.5',
    balcony: true,
    parkingSpaceNumbers: ['P1'],
    storageSpaceNumbers: ['S1'],
    ownershipPercentage: '2.5',
    monthlyFees: '350.00'
};
const mockDb = {
    insert: jest.fn().mockImplementation(() => ({
        values: jest.fn().mockImplementation(() => ({
            returning: jest.fn().mockResolvedValue([{ id: 'mock-org-id' }])
        }))
    })),
    update: jest.fn().mockImplementation(() => ({
        set: jest.fn().mockImplementation((updateData) => {
            // Update the mock data with the new values
            currentResidenceData = { ...currentResidenceData, ...updateData };
            return {
                where: jest.fn().mockResolvedValue([currentResidenceData])
            };
        })
    })),
    select: jest.fn().mockImplementation(() => ({
        from: jest.fn().mockImplementation(() => ({
            where: jest.fn().mockResolvedValue([currentResidenceData])
        }))
    })),
    delete: jest.fn().mockImplementation(() => ({
        where: jest.fn().mockResolvedValue({ affectedRows: 1 })
    }))
};
async function getDb() {
    return mockDb;
}
(0, globals_1.describe)('Residence Update API', () => {
    let testOrganizationId;
    let testBuildingId;
    let testResidenceId;
    (0, globals_1.beforeAll)(async () => {
        const database = await getDb();
        // Create a test organization
        const [org] = await database
            .insert(schema_1.organizations)
            .values({
            name: 'Test Residence Update Org',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1H 1H1',
            isActive: true,
        })
            .returning();
        testOrganizationId = org.id;
        // Create a test building
        const [building] = await database
            .insert(schema_1.buildings)
            .values({
            organizationId: testOrganizationId,
            name: 'Test Building for Updates',
            address: '456 Update Ave',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H2H 2H2',
            buildingType: 'condo',
            totalUnits: 10,
            totalFloors: 3,
            isActive: true,
        })
            .returning();
        testBuildingId = building.id;
        // Create a test residence
        const [residence] = await database
            .insert(schema_1.residences)
            .values({
            buildingId: testBuildingId,
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1.5',
            balcony: true,
            parkingSpaceNumbers: ['P1'],
            storageSpaceNumbers: ['S1'],
            ownershipPercentage: '2.5',
            monthlyFees: '350.00',
            isActive: true,
        })
            .returning();
        testResidenceId = residence.id;
    });
    (0, globals_1.afterAll)(async () => {
        const database = await getDb();
        // Mock cleanup - no actual database operations needed
        console.log('Test cleanup completed');
    });
    (0, globals_1.beforeEach)(async () => {
        const database = await getDb();
        // Reset residence to known state before each test
        currentResidenceData = {
            id: 'mock-residence-id',
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1.5',
            balcony: true,
            parkingSpaceNumbers: ['P1'],
            storageSpaceNumbers: ['S1'],
            ownershipPercentage: '2.5',
            monthlyFees: '350.00'
        };
    });
    (0, globals_1.test)('should update residence with valid numeric data', async () => {
        const database = await getDb();
        const updateData = {
            unitNumber: '102',
            floor: 2,
            squareFootage: 1200,
            bedrooms: 3,
            bathrooms: 2.0,
            balcony: false,
            parkingSpaceNumbers: ['P2', 'P3'],
            storageSpaceNumbers: ['S2'],
            ownershipPercentage: 3.0,
            monthlyFees: 425.50,
        };
        const [updated] = await database
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('102');
        (0, globals_1.expect)(updated.floor).toBe(2);
        (0, globals_1.expect)(Number(updated.squareFootage)).toBe(1200);
        (0, globals_1.expect)(updated.bedrooms).toBe(3);
        (0, globals_1.expect)(Number(updated.bathrooms)).toBe(2.0);
        (0, globals_1.expect)(updated.balcony).toBe(false);
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toEqual(['P2', 'P3']);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toEqual(['S2']);
        (0, globals_1.expect)(Number(updated.ownershipPercentage)).toBe(3.0);
        (0, globals_1.expect)(Number(updated.monthlyFees)).toBe(425.50);
    });
    (0, globals_1.test)('should handle null values for optional fields', async () => {
        const database = await getDb();
        const updateData = {
            unitNumber: '103',
            floor: 1,
            squareFootage: null,
            bedrooms: 1,
            bathrooms: null,
            balcony: false,
            parkingSpaceNumbers: [],
            storageSpaceNumbers: [],
            ownershipPercentage: null,
            monthlyFees: null,
        };
        const [updated] = await database
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('103');
        (0, globals_1.expect)(updated.squareFootage).toBeNull();
        (0, globals_1.expect)(updated.bathrooms).toBeNull();
        (0, globals_1.expect)(updated.ownershipPercentage).toBeNull();
        (0, globals_1.expect)(updated.monthlyFees).toBeNull();
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toEqual([]);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toEqual([]);
    });
    (0, globals_1.test)('should handle string numbers (converted to numeric)', async () => {
        const database = await getDb();
        const updateData = {
            unitNumber: '104',
            floor: 2,
            squareFootage: '1500', // String number
            bedrooms: 2,
            bathrooms: '2.5', // String number
            balcony: true,
            parkingSpaceNumbers: ['P4'],
            storageSpaceNumbers: ['S4'],
            ownershipPercentage: '4.25', // String number
            monthlyFees: '500.75', // String number
        };
        const [updated] = await database
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('104');
        (0, globals_1.expect)(Number(updated.squareFootage)).toBe(1500);
        (0, globals_1.expect)(Number(updated.bathrooms)).toBe(2.5);
        (0, globals_1.expect)(Number(updated.ownershipPercentage)).toBe(4.25);
        (0, globals_1.expect)(Number(updated.monthlyFees)).toBe(500.75);
    });
    (0, globals_1.test)('should handle empty strings as null for optional fields', async () => {
        const updateData = {
            unitNumber: '105',
            floor: 1,
            squareFootage: '', // Empty string should become null
            bedrooms: 1,
            bathrooms: '', // Empty string should become null
            balcony: false,
            parkingSpaceNumbers: [],
            storageSpaceNumbers: [],
            ownershipPercentage: '', // Empty string should become null
            monthlyFees: '', // Empty string should become null
        };
        // Process empty strings to null (mimicking backend logic)
        const processedData = {
            ...updateData,
            squareFootage: updateData.squareFootage === '' ? null : updateData.squareFootage,
            bathrooms: updateData.bathrooms === '' ? null : updateData.bathrooms,
            ownershipPercentage: updateData.ownershipPercentage === '' ? null : updateData.ownershipPercentage,
            monthlyFees: updateData.monthlyFees === '' ? null : updateData.monthlyFees,
            updatedAt: new Date(),
        };
        const database = await getDb();
        const [updated] = await database
            .update(schema_1.residences)
            .set(processedData)
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.unitNumber).toBe('105');
        (0, globals_1.expect)(updated.squareFootage).toBeNull();
        (0, globals_1.expect)(updated.bathrooms).toBeNull();
        (0, globals_1.expect)(updated.ownershipPercentage).toBeNull();
        (0, globals_1.expect)(updated.monthlyFees).toBeNull();
    });
    (0, globals_1.test)('should preserve arrays correctly', async () => {
        const database = await getDb();
        const updateData = {
            unitNumber: '106',
            floor: 2,
            squareFootage: 1100,
            bedrooms: 2,
            bathrooms: 2.0,
            balcony: true,
            parkingSpaceNumbers: ['P5', 'P6', 'P7'],
            storageSpaceNumbers: ['S5', 'S6'],
            ownershipPercentage: 2.75,
            monthlyFees: 375.25,
        };
        const [updated] = await database
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toEqual(['P5', 'P6', 'P7']);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toEqual(['S5', 'S6']);
        (0, globals_1.expect)(updated.parkingSpaceNumbers).toHaveLength(3);
        (0, globals_1.expect)(updated.storageSpaceNumbers).toHaveLength(2);
    });
    (0, globals_1.test)('should handle decimal precision correctly', async () => {
        const database = await getDb();
        const updateData = {
            unitNumber: '107',
            floor: 3,
            squareFootage: 1234.56, // Should preserve to 2 decimal places
            bedrooms: 3,
            bathrooms: 2.5, // Should preserve to 1 decimal place
            balcony: true,
            parkingSpaceNumbers: ['P8'],
            storageSpaceNumbers: ['S8'],
            ownershipPercentage: 3.1234, // Should preserve to 4 decimal places
            monthlyFees: 456.78, // Should preserve to 2 decimal places
        };
        const [updated] = await database
            .update(schema_1.residences)
            .set({
            ...updateData,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId))
            .returning();
        (0, globals_1.expect)(updated).toBeDefined();
        (0, globals_1.expect)(Number(updated.squareFootage)).toBe(1234.56);
        (0, globals_1.expect)(Number(updated.bathrooms)).toBe(2.5);
        (0, globals_1.expect)(Number(updated.ownershipPercentage)).toBe(3.1234);
        (0, globals_1.expect)(Number(updated.monthlyFees)).toBe(456.78);
    });
    (0, globals_1.test)('should maintain data integrity across multiple updates', async () => {
        const database = await getDb();
        // First update
        await database
            .update(schema_1.residences)
            .set({
            unitNumber: '108',
            squareFootage: 1000,
            bathrooms: '1.5',
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId));
        // Second update
        await database
            .update(schema_1.residences)
            .set({
            monthlyFees: 400.00,
            ownershipPercentage: 2.75,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId));
        // Verify final state
        const [final] = await database
            .select()
            .from(schema_1.residences)
            .where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidenceId));
        (0, globals_1.expect)(final).toBeDefined();
        (0, globals_1.expect)(final.unitNumber).toBe('108');
        (0, globals_1.expect)(Number(final.squareFootage)).toBe(1000);
        (0, globals_1.expect)(Number(final.bathrooms)).toBe(1.5);
        (0, globals_1.expect)(Number(final.monthlyFees)).toBe(400.00);
        (0, globals_1.expect)(Number(final.ownershipPercentage)).toBe(2.75);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L3Jlc2lkZW5jZS11cGRhdGUudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDJDQUF3RjtBQUN4RixnREFBMkU7QUFDM0UsNkNBQWlDO0FBRWpDLGdDQUFnQztBQUNoQyxJQUFJLG9CQUFvQixHQUFHO0lBQ3pCLEVBQUUsRUFBRSxtQkFBbUI7SUFDdkIsVUFBVSxFQUFFLEtBQUs7SUFDakIsS0FBSyxFQUFFLENBQUM7SUFDUixhQUFhLEVBQUUsTUFBTTtJQUNyQixRQUFRLEVBQUUsQ0FBQztJQUNYLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLE9BQU8sRUFBRSxJQUFJO0lBQ2IsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDM0IsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDM0IsbUJBQW1CLEVBQUUsS0FBSztJQUMxQixXQUFXLEVBQUUsUUFBUTtDQUN0QixDQUFDO0FBRUYsTUFBTSxNQUFNLEdBQUc7SUFDYixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1NBQ2hFLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDL0MsMkNBQTJDO1lBQzNDLG9CQUFvQixHQUFHLEVBQUUsR0FBRyxv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QUMsQ0FBQztRQUMvQyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L3Jlc2lkZW5jZS11cGRhdGUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZSwgdGVzdCwgZXhwZWN0LCBiZWZvcmVBbGwsIGFmdGVyQWxsLCBiZWZvcmVFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyByZXNpZGVuY2VzLCBidWlsZGluZ3MsIG9yZ2FuaXphdGlvbnMgfSBmcm9tICcuLi8uLi9zaGFyZWQvc2NoZW1hJztcbmltcG9ydCB7IGVxIH0gZnJvbSAnZHJpenpsZS1vcm0nO1xuXG4vLyBVc2UgbW9jayBkYXRhYmFzZSBmb3IgdGVzdGluZ1xubGV0IGN1cnJlbnRSZXNpZGVuY2VEYXRhID0ge1xuICBpZDogJ21vY2stcmVzaWRlbmNlLWlkJyxcbiAgdW5pdE51bWJlcjogJzEwMScsXG4gIGZsb29yOiAxLFxuICBzcXVhcmVGb290YWdlOiAnMTAwMCcsXG4gIGJlZHJvb21zOiAyLFxuICBiYXRocm9vbXM6ICcxLjUnLFxuICBiYWxjb255OiB0cnVlLFxuICBwYXJraW5nU3BhY2VOdW1iZXJzOiBbJ1AxJ10sXG4gIHN0b3JhZ2VTcGFjZU51bWJlcnM6IFsnUzEnXSxcbiAgb3duZXJzaGlwUGVyY2VudGFnZTogJzIuNScsXG4gIG1vbnRobHlGZWVzOiAnMzUwLjAwJ1xufTtcblxuY29uc3QgbW9ja0RiID0ge1xuICBpbnNlcnQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICB2YWx1ZXM6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHJldHVybmluZzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFt7IGlkOiAnbW9jay1vcmctaWQnIH1dKVxuICAgIH0pKVxuICB9KSksXG4gIHVwZGF0ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNldDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigodXBkYXRlRGF0YSkgPT4ge1xuICAgICAgLy8gVXBkYXRlIHRoZSBtb2NrIGRhdGEgd2l0aCB0aGUgbmV3IHZhbHVlc1xuICAgICAgY3VycmVudFJlc2lkZW5jZURhdGEgPSB7IC4uLmN1cnJlbnRSZXNpZGVuY2VEYXRhLCAuLi51cGRhdGVEYXRhIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtjdXJyZW50UmVzaWRlbmNlRGF0YV0pXG4gICAgICB9O1xuICAgIH0pXG4gIH0pKSxcbiAgc2VsZWN0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgZnJvbTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgd2hlcmU6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbY3VycmVudFJlc2lkZW5jZURhdGFdKVxuICAgIH0pKVxuICB9KSksXG4gIGRlbGV0ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHdoZXJlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBhZmZlY3RlZFJvd3M6IDEgfSlcbiAgfSkpXG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXREYigpIHtcbiAgcmV0dXJuIG1vY2tEYjtcbn1cblxuZGVzY3JpYmUoJ1Jlc2lkZW5jZSBVcGRhdGUgQVBJJywgKCkgPT4ge1xuICBsZXQgdGVzdE9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gIGxldCB0ZXN0QnVpbGRpbmdJZDogc3RyaW5nO1xuICBsZXQgdGVzdFJlc2lkZW5jZUlkOiBzdHJpbmc7XG5cbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhYmFzZSA9IGF3YWl0IGdldERiKCk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGEgdGVzdCBvcmdhbml6YXRpb25cbiAgICBjb25zdCBbb3JnXSA9IGF3YWl0IGRhdGFiYXNlXG4gICAgICAuaW5zZXJ0KG9yZ2FuaXphdGlvbnMpXG4gICAgICAudmFsdWVzKHtcbiAgICAgICAgbmFtZTogJ1Rlc3QgUmVzaWRlbmNlIFVwZGF0ZSBPcmcnLFxuICAgICAgICBhZGRyZXNzOiAnMTIzIFRlc3QgU3QnLFxuICAgICAgICBjaXR5OiAnTW9udHJlYWwnLFxuICAgICAgICBwcm92aW5jZTogJ1FDJyxcbiAgICAgICAgcG9zdGFsQ29kZTogJ0gxSCAxSDEnLFxuICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAucmV0dXJuaW5nKCk7XG4gICAgdGVzdE9yZ2FuaXphdGlvbklkID0gb3JnLmlkO1xuXG4gICAgLy8gQ3JlYXRlIGEgdGVzdCBidWlsZGluZ1xuICAgIGNvbnN0IFtidWlsZGluZ10gPSBhd2FpdCBkYXRhYmFzZVxuICAgICAgLmluc2VydChidWlsZGluZ3MpXG4gICAgICAudmFsdWVzKHtcbiAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHRlc3RPcmdhbml6YXRpb25JZCxcbiAgICAgICAgbmFtZTogJ1Rlc3QgQnVpbGRpbmcgZm9yIFVwZGF0ZXMnLFxuICAgICAgICBhZGRyZXNzOiAnNDU2IFVwZGF0ZSBBdmUnLFxuICAgICAgICBjaXR5OiAnTW9udHJlYWwnLFxuICAgICAgICBwcm92aW5jZTogJ1FDJyxcbiAgICAgICAgcG9zdGFsQ29kZTogJ0gySCAySDInLFxuICAgICAgICBidWlsZGluZ1R5cGU6ICdjb25kbycsXG4gICAgICAgIHRvdGFsVW5pdHM6IDEwLFxuICAgICAgICB0b3RhbEZsb29yczogMyxcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICB9KVxuICAgICAgLnJldHVybmluZygpO1xuICAgIHRlc3RCdWlsZGluZ0lkID0gYnVpbGRpbmcuaWQ7XG5cbiAgICAvLyBDcmVhdGUgYSB0ZXN0IHJlc2lkZW5jZVxuICAgIGNvbnN0IFtyZXNpZGVuY2VdID0gYXdhaXQgZGF0YWJhc2VcbiAgICAgIC5pbnNlcnQocmVzaWRlbmNlcylcbiAgICAgIC52YWx1ZXMoe1xuICAgICAgICBidWlsZGluZ0lkOiB0ZXN0QnVpbGRpbmdJZCxcbiAgICAgICAgdW5pdE51bWJlcjogJzEwMScsXG4gICAgICAgIGZsb29yOiAxLFxuICAgICAgICBzcXVhcmVGb290YWdlOiAnMTAwMCcsXG4gICAgICAgIGJlZHJvb21zOiAyLFxuICAgICAgICBiYXRocm9vbXM6ICcxLjUnLFxuICAgICAgICBiYWxjb255OiB0cnVlLFxuICAgICAgICBwYXJraW5nU3BhY2VOdW1iZXJzOiBbJ1AxJ10sXG4gICAgICAgIHN0b3JhZ2VTcGFjZU51bWJlcnM6IFsnUzEnXSxcbiAgICAgICAgb3duZXJzaGlwUGVyY2VudGFnZTogJzIuNScsXG4gICAgICAgIG1vbnRobHlGZWVzOiAnMzUwLjAwJyxcbiAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICB9KVxuICAgICAgLnJldHVybmluZygpO1xuICAgIHRlc3RSZXNpZGVuY2VJZCA9IHJlc2lkZW5jZS5pZDtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGFiYXNlID0gYXdhaXQgZ2V0RGIoKTtcbiAgICAvLyBNb2NrIGNsZWFudXAgLSBubyBhY3R1YWwgZGF0YWJhc2Ugb3BlcmF0aW9ucyBuZWVkZWRcbiAgICBjb25zb2xlLmxvZygnVGVzdCBjbGVhbnVwIGNvbXBsZXRlZCcpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhYmFzZSA9IGF3YWl0IGdldERiKCk7XG4gICAgLy8gUmVzZXQgcmVzaWRlbmNlIHRvIGtub3duIHN0YXRlIGJlZm9yZSBlYWNoIHRlc3RcbiAgICBjdXJyZW50UmVzaWRlbmNlRGF0YSA9IHtcbiAgICAgIGlkOiAnbW9jay1yZXNpZGVuY2UtaWQnLFxuICAgICAgdW5pdE51bWJlcjogJzEwMScsXG4gICAgICBmbG9vcjogMSxcbiAgICAgIHNxdWFyZUZvb3RhZ2U6ICcxMDAwJyxcbiAgICAgIGJlZHJvb21zOiAyLFxuICAgICAgYmF0aHJvb21zOiAnMS41JyxcbiAgICAgIGJhbGNvbnk6IHRydWUsXG4gICAgICBwYXJraW5nU3BhY2VOdW1iZXJzOiBbJ1AxJ10sXG4gICAgICBzdG9yYWdlU3BhY2VOdW1iZXJzOiBbJ1MxJ10sXG4gICAgICBvd25lcnNoaXBQZXJjZW50YWdlOiAnMi41JyxcbiAgICAgIG1vbnRobHlGZWVzOiAnMzUwLjAwJ1xuICAgIH07XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCB1cGRhdGUgcmVzaWRlbmNlIHdpdGggdmFsaWQgbnVtZXJpYyBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGFiYXNlID0gYXdhaXQgZ2V0RGIoKTtcbiAgICBjb25zdCB1cGRhdGVEYXRhID0ge1xuICAgICAgdW5pdE51bWJlcjogJzEwMicsXG4gICAgICBmbG9vcjogMixcbiAgICAgIHNxdWFyZUZvb3RhZ2U6IDEyMDAsXG4gICAgICBiZWRyb29tczogMyxcbiAgICAgIGJhdGhyb29tczogMi4wLFxuICAgICAgYmFsY29ueTogZmFsc2UsXG4gICAgICBwYXJraW5nU3BhY2VOdW1iZXJzOiBbJ1AyJywgJ1AzJ10sXG4gICAgICBzdG9yYWdlU3BhY2VOdW1iZXJzOiBbJ1MyJ10sXG4gICAgICBvd25lcnNoaXBQZXJjZW50YWdlOiAzLjAsXG4gICAgICBtb250aGx5RmVlczogNDI1LjUwLFxuICAgIH07XG5cbiAgICBjb25zdCBbdXBkYXRlZF0gPSBhd2FpdCBkYXRhYmFzZVxuICAgICAgLnVwZGF0ZShyZXNpZGVuY2VzKVxuICAgICAgLnNldCh7XG4gICAgICAgIC4uLnVwZGF0ZURhdGEsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0pXG4gICAgICAud2hlcmUoZXEocmVzaWRlbmNlcy5pZCwgdGVzdFJlc2lkZW5jZUlkKSlcbiAgICAgIC5yZXR1cm5pbmcoKTtcblxuICAgIGV4cGVjdCh1cGRhdGVkKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh1cGRhdGVkLnVuaXROdW1iZXIpLnRvQmUoJzEwMicpO1xuICAgIGV4cGVjdCh1cGRhdGVkLmZsb29yKS50b0JlKDIpO1xuICAgIGV4cGVjdChOdW1iZXIodXBkYXRlZC5zcXVhcmVGb290YWdlKSkudG9CZSgxMjAwKTtcbiAgICBleHBlY3QodXBkYXRlZC5iZWRyb29tcykudG9CZSgzKTtcbiAgICBleHBlY3QoTnVtYmVyKHVwZGF0ZWQuYmF0aHJvb21zKSkudG9CZSgyLjApO1xuICAgIGV4cGVjdCh1cGRhdGVkLmJhbGNvbnkpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdCh1cGRhdGVkLnBhcmtpbmdTcGFjZU51bWJlcnMpLnRvRXF1YWwoWydQMicsICdQMyddKTtcbiAgICBleHBlY3QodXBkYXRlZC5zdG9yYWdlU3BhY2VOdW1iZXJzKS50b0VxdWFsKFsnUzInXSk7XG4gICAgZXhwZWN0KE51bWJlcih1cGRhdGVkLm93bmVyc2hpcFBlcmNlbnRhZ2UpKS50b0JlKDMuMCk7XG4gICAgZXhwZWN0KE51bWJlcih1cGRhdGVkLm1vbnRobHlGZWVzKSkudG9CZSg0MjUuNTApO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgaGFuZGxlIG51bGwgdmFsdWVzIGZvciBvcHRpb25hbCBmaWVsZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZGF0YWJhc2UgPSBhd2FpdCBnZXREYigpO1xuICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7XG4gICAgICB1bml0TnVtYmVyOiAnMTAzJyxcbiAgICAgIGZsb29yOiAxLFxuICAgICAgc3F1YXJlRm9vdGFnZTogbnVsbCxcbiAgICAgIGJlZHJvb21zOiAxLFxuICAgICAgYmF0aHJvb21zOiBudWxsLFxuICAgICAgYmFsY29ueTogZmFsc2UsXG4gICAgICBwYXJraW5nU3BhY2VOdW1iZXJzOiBbXSxcbiAgICAgIHN0b3JhZ2VTcGFjZU51bWJlcnM6IFtdLFxuICAgICAgb3duZXJzaGlwUGVyY2VudGFnZTogbnVsbCxcbiAgICAgIG1vbnRobHlGZWVzOiBudWxsLFxuICAgIH07XG5cbiAgICBjb25zdCBbdXBkYXRlZF0gPSBhd2FpdCBkYXRhYmFzZVxuICAgICAgLnVwZGF0ZShyZXNpZGVuY2VzKVxuICAgICAgLnNldCh7XG4gICAgICAgIC4uLnVwZGF0ZURhdGEsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0pXG4gICAgICAud2hlcmUoZXEocmVzaWRlbmNlcy5pZCwgdGVzdFJlc2lkZW5jZUlkKSlcbiAgICAgIC5yZXR1cm5pbmcoKTtcblxuICAgIGV4cGVjdCh1cGRhdGVkKS50b0JlRGVmaW5lZCgpO1xuICAgIGV4cGVjdCh1cGRhdGVkLnVuaXROdW1iZXIpLnRvQmUoJzEwMycpO1xuICAgIGV4cGVjdCh1cGRhdGVkLnNxdWFyZUZvb3RhZ2UpLnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHVwZGF0ZWQuYmF0aHJvb21zKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdCh1cGRhdGVkLm93bmVyc2hpcFBlcmNlbnRhZ2UpLnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHVwZGF0ZWQubW9udGhseUZlZXMpLnRvQmVOdWxsKCk7XG4gICAgZXhwZWN0KHVwZGF0ZWQucGFya2luZ1NwYWNlTnVtYmVycykudG9FcXVhbChbXSk7XG4gICAgZXhwZWN0KHVwZGF0ZWQuc3RvcmFnZVNwYWNlTnVtYmVycykudG9FcXVhbChbXSk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgc3RyaW5nIG51bWJlcnMgKGNvbnZlcnRlZCB0byBudW1lcmljKScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhYmFzZSA9IGF3YWl0IGdldERiKCk7XG4gICAgY29uc3QgdXBkYXRlRGF0YSA9IHtcbiAgICAgIHVuaXROdW1iZXI6ICcxMDQnLFxuICAgICAgZmxvb3I6IDIsXG4gICAgICBzcXVhcmVGb290YWdlOiAnMTUwMCcsIC8vIFN0cmluZyBudW1iZXJcbiAgICAgIGJlZHJvb21zOiAyLFxuICAgICAgYmF0aHJvb21zOiAnMi41JywgLy8gU3RyaW5nIG51bWJlclxuICAgICAgYmFsY29ueTogdHJ1ZSxcbiAgICAgIHBhcmtpbmdTcGFjZU51bWJlcnM6IFsnUDQnXSxcbiAgICAgIHN0b3JhZ2VTcGFjZU51bWJlcnM6IFsnUzQnXSxcbiAgICAgIG93bmVyc2hpcFBlcmNlbnRhZ2U6ICc0LjI1JywgLy8gU3RyaW5nIG51bWJlclxuICAgICAgbW9udGhseUZlZXM6ICc1MDAuNzUnLCAvLyBTdHJpbmcgbnVtYmVyXG4gICAgfTtcblxuICAgIGNvbnN0IFt1cGRhdGVkXSA9IGF3YWl0IGRhdGFiYXNlXG4gICAgICAudXBkYXRlKHJlc2lkZW5jZXMpXG4gICAgICAuc2V0KHtcbiAgICAgICAgLi4udXBkYXRlRGF0YSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSlcbiAgICAgIC53aGVyZShlcShyZXNpZGVuY2VzLmlkLCB0ZXN0UmVzaWRlbmNlSWQpKVxuICAgICAgLnJldHVybmluZygpO1xuXG4gICAgZXhwZWN0KHVwZGF0ZWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHVwZGF0ZWQudW5pdE51bWJlcikudG9CZSgnMTA0Jyk7XG4gICAgZXhwZWN0KE51bWJlcih1cGRhdGVkLnNxdWFyZUZvb3RhZ2UpKS50b0JlKDE1MDApO1xuICAgIGV4cGVjdChOdW1iZXIodXBkYXRlZC5iYXRocm9vbXMpKS50b0JlKDIuNSk7XG4gICAgZXhwZWN0KE51bWJlcih1cGRhdGVkLm93bmVyc2hpcFBlcmNlbnRhZ2UpKS50b0JlKDQuMjUpO1xuICAgIGV4cGVjdChOdW1iZXIodXBkYXRlZC5tb250aGx5RmVlcykpLnRvQmUoNTAwLjc1KTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBzdHJpbmdzIGFzIG51bGwgZm9yIG9wdGlvbmFsIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1cGRhdGVEYXRhID0ge1xuICAgICAgdW5pdE51bWJlcjogJzEwNScsXG4gICAgICBmbG9vcjogMSxcbiAgICAgIHNxdWFyZUZvb3RhZ2U6ICcnLCAvLyBFbXB0eSBzdHJpbmcgc2hvdWxkIGJlY29tZSBudWxsXG4gICAgICBiZWRyb29tczogMSxcbiAgICAgIGJhdGhyb29tczogJycsIC8vIEVtcHR5IHN0cmluZyBzaG91bGQgYmVjb21lIG51bGxcbiAgICAgIGJhbGNvbnk6IGZhbHNlLFxuICAgICAgcGFya2luZ1NwYWNlTnVtYmVyczogW10sXG4gICAgICBzdG9yYWdlU3BhY2VOdW1iZXJzOiBbXSxcbiAgICAgIG93bmVyc2hpcFBlcmNlbnRhZ2U6ICcnLCAvLyBFbXB0eSBzdHJpbmcgc2hvdWxkIGJlY29tZSBudWxsXG4gICAgICBtb250aGx5RmVlczogJycsIC8vIEVtcHR5IHN0cmluZyBzaG91bGQgYmVjb21lIG51bGxcbiAgICB9O1xuXG4gICAgLy8gUHJvY2VzcyBlbXB0eSBzdHJpbmdzIHRvIG51bGwgKG1pbWlja2luZyBiYWNrZW5kIGxvZ2ljKVxuICAgIGNvbnN0IHByb2Nlc3NlZERhdGEgPSB7XG4gICAgICAuLi51cGRhdGVEYXRhLFxuICAgICAgc3F1YXJlRm9vdGFnZTogdXBkYXRlRGF0YS5zcXVhcmVGb290YWdlID09PSAnJyA/IG51bGwgOiB1cGRhdGVEYXRhLnNxdWFyZUZvb3RhZ2UsXG4gICAgICBiYXRocm9vbXM6IHVwZGF0ZURhdGEuYmF0aHJvb21zID09PSAnJyA/IG51bGwgOiB1cGRhdGVEYXRhLmJhdGhyb29tcyxcbiAgICAgIG93bmVyc2hpcFBlcmNlbnRhZ2U6IHVwZGF0ZURhdGEub3duZXJzaGlwUGVyY2VudGFnZSA9PT0gJycgPyBudWxsIDogdXBkYXRlRGF0YS5vd25lcnNoaXBQZXJjZW50YWdlLFxuICAgICAgbW9udGhseUZlZXM6IHVwZGF0ZURhdGEubW9udGhseUZlZXMgPT09ICcnID8gbnVsbCA6IHVwZGF0ZURhdGEubW9udGhseUZlZXMsXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgfTtcblxuICAgIGNvbnN0IGRhdGFiYXNlID0gYXdhaXQgZ2V0RGIoKTtcbiAgICBjb25zdCBbdXBkYXRlZF0gPSBhd2FpdCBkYXRhYmFzZVxuICAgICAgLnVwZGF0ZShyZXNpZGVuY2VzKVxuICAgICAgLnNldChwcm9jZXNzZWREYXRhKVxuICAgICAgLndoZXJlKGVxKHJlc2lkZW5jZXMuaWQsIHRlc3RSZXNpZGVuY2VJZCkpXG4gICAgICAucmV0dXJuaW5nKCk7XG5cbiAgICBleHBlY3QodXBkYXRlZCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodXBkYXRlZC51bml0TnVtYmVyKS50b0JlKCcxMDUnKTtcbiAgICBleHBlY3QodXBkYXRlZC5zcXVhcmVGb290YWdlKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdCh1cGRhdGVkLmJhdGhyb29tcykudG9CZU51bGwoKTtcbiAgICBleHBlY3QodXBkYXRlZC5vd25lcnNoaXBQZXJjZW50YWdlKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdCh1cGRhdGVkLm1vbnRobHlGZWVzKS50b0JlTnVsbCgpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgcHJlc2VydmUgYXJyYXlzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhYmFzZSA9IGF3YWl0IGdldERiKCk7XG4gICAgY29uc3QgdXBkYXRlRGF0YSA9IHtcbiAgICAgIHVuaXROdW1iZXI6ICcxMDYnLFxuICAgICAgZmxvb3I6IDIsXG4gICAgICBzcXVhcmVGb290YWdlOiAxMTAwLFxuICAgICAgYmVkcm9vbXM6IDIsXG4gICAgICBiYXRocm9vbXM6IDIuMCxcbiAgICAgIGJhbGNvbnk6IHRydWUsXG4gICAgICBwYXJraW5nU3BhY2VOdW1iZXJzOiBbJ1A1JywgJ1A2JywgJ1A3J10sXG4gICAgICBzdG9yYWdlU3BhY2VOdW1iZXJzOiBbJ1M1JywgJ1M2J10sXG4gICAgICBvd25lcnNoaXBQZXJjZW50YWdlOiAyLjc1LFxuICAgICAgbW9udGhseUZlZXM6IDM3NS4yNSxcbiAgICB9O1xuXG4gICAgY29uc3QgW3VwZGF0ZWRdID0gYXdhaXQgZGF0YWJhc2VcbiAgICAgIC51cGRhdGUocmVzaWRlbmNlcylcbiAgICAgIC5zZXQoe1xuICAgICAgICAuLi51cGRhdGVEYXRhLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9KVxuICAgICAgLndoZXJlKGVxKHJlc2lkZW5jZXMuaWQsIHRlc3RSZXNpZGVuY2VJZCkpXG4gICAgICAucmV0dXJuaW5nKCk7XG5cbiAgICBleHBlY3QodXBkYXRlZCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QodXBkYXRlZC5wYXJraW5nU3BhY2VOdW1iZXJzKS50b0VxdWFsKFsnUDUnLCAnUDYnLCAnUDcnXSk7XG4gICAgZXhwZWN0KHVwZGF0ZWQuc3RvcmFnZVNwYWNlTnVtYmVycykudG9FcXVhbChbJ1M1JywgJ1M2J10pO1xuICAgIGV4cGVjdCh1cGRhdGVkLnBhcmtpbmdTcGFjZU51bWJlcnMpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICBleHBlY3QodXBkYXRlZC5zdG9yYWdlU3BhY2VOdW1iZXJzKS50b0hhdmVMZW5ndGgoMik7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZGVjaW1hbCBwcmVjaXNpb24gY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRhdGFiYXNlID0gYXdhaXQgZ2V0RGIoKTtcbiAgICBjb25zdCB1cGRhdGVEYXRhID0ge1xuICAgICAgdW5pdE51bWJlcjogJzEwNycsXG4gICAgICBmbG9vcjogMyxcbiAgICAgIHNxdWFyZUZvb3RhZ2U6IDEyMzQuNTYsIC8vIFNob3VsZCBwcmVzZXJ2ZSB0byAyIGRlY2ltYWwgcGxhY2VzXG4gICAgICBiZWRyb29tczogMyxcbiAgICAgIGJhdGhyb29tczogMi41LCAvLyBTaG91bGQgcHJlc2VydmUgdG8gMSBkZWNpbWFsIHBsYWNlXG4gICAgICBiYWxjb255OiB0cnVlLFxuICAgICAgcGFya2luZ1NwYWNlTnVtYmVyczogWydQOCddLFxuICAgICAgc3RvcmFnZVNwYWNlTnVtYmVyczogWydTOCddLFxuICAgICAgb3duZXJzaGlwUGVyY2VudGFnZTogMy4xMjM0LCAvLyBTaG91bGQgcHJlc2VydmUgdG8gNCBkZWNpbWFsIHBsYWNlc1xuICAgICAgbW9udGhseUZlZXM6IDQ1Ni43OCwgLy8gU2hvdWxkIHByZXNlcnZlIHRvIDIgZGVjaW1hbCBwbGFjZXNcbiAgICB9O1xuXG4gICAgY29uc3QgW3VwZGF0ZWRdID0gYXdhaXQgZGF0YWJhc2VcbiAgICAgIC51cGRhdGUocmVzaWRlbmNlcylcbiAgICAgIC5zZXQoe1xuICAgICAgICAuLi51cGRhdGVEYXRhLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICB9KVxuICAgICAgLndoZXJlKGVxKHJlc2lkZW5jZXMuaWQsIHRlc3RSZXNpZGVuY2VJZCkpXG4gICAgICAucmV0dXJuaW5nKCk7XG5cbiAgICBleHBlY3QodXBkYXRlZCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoTnVtYmVyKHVwZGF0ZWQuc3F1YXJlRm9vdGFnZSkpLnRvQmUoMTIzNC41Nik7XG4gICAgZXhwZWN0KE51bWJlcih1cGRhdGVkLmJhdGhyb29tcykpLnRvQmUoMi41KTtcbiAgICBleHBlY3QoTnVtYmVyKHVwZGF0ZWQub3duZXJzaGlwUGVyY2VudGFnZSkpLnRvQmUoMy4xMjM0KTtcbiAgICBleHBlY3QoTnVtYmVyKHVwZGF0ZWQubW9udGhseUZlZXMpKS50b0JlKDQ1Ni43OCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBtYWludGFpbiBkYXRhIGludGVncml0eSBhY3Jvc3MgbXVsdGlwbGUgdXBkYXRlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkYXRhYmFzZSA9IGF3YWl0IGdldERiKCk7XG4gICAgXG4gICAgLy8gRmlyc3QgdXBkYXRlXG4gICAgYXdhaXQgZGF0YWJhc2VcbiAgICAgIC51cGRhdGUocmVzaWRlbmNlcylcbiAgICAgIC5zZXQoe1xuICAgICAgICB1bml0TnVtYmVyOiAnMTA4JyxcbiAgICAgICAgc3F1YXJlRm9vdGFnZTogMTAwMCxcbiAgICAgICAgYmF0aHJvb21zOiAnMS41JyxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSlcbiAgICAgIC53aGVyZShlcShyZXNpZGVuY2VzLmlkLCB0ZXN0UmVzaWRlbmNlSWQpKTtcblxuICAgIC8vIFNlY29uZCB1cGRhdGVcbiAgICBhd2FpdCBkYXRhYmFzZVxuICAgICAgLnVwZGF0ZShyZXNpZGVuY2VzKVxuICAgICAgLnNldCh7XG4gICAgICAgIG1vbnRobHlGZWVzOiA0MDAuMDAsXG4gICAgICAgIG93bmVyc2hpcFBlcmNlbnRhZ2U6IDIuNzUsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0pXG4gICAgICAud2hlcmUoZXEocmVzaWRlbmNlcy5pZCwgdGVzdFJlc2lkZW5jZUlkKSk7XG5cbiAgICAvLyBWZXJpZnkgZmluYWwgc3RhdGVcbiAgICBjb25zdCBbZmluYWxdID0gYXdhaXQgZGF0YWJhc2VcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLmZyb20ocmVzaWRlbmNlcylcbiAgICAgIC53aGVyZShlcShyZXNpZGVuY2VzLmlkLCB0ZXN0UmVzaWRlbmNlSWQpKTtcblxuICAgIGV4cGVjdChmaW5hbCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QoZmluYWwudW5pdE51bWJlcikudG9CZSgnMTA4Jyk7XG4gICAgZXhwZWN0KE51bWJlcihmaW5hbC5zcXVhcmVGb290YWdlKSkudG9CZSgxMDAwKTtcbiAgICBleHBlY3QoTnVtYmVyKGZpbmFsLmJhdGhyb29tcykpLnRvQmUoMS41KTtcbiAgICBleHBlY3QoTnVtYmVyKGZpbmFsLm1vbnRobHlGZWVzKSkudG9CZSg0MDAuMDApO1xuICAgIGV4cGVjdChOdW1iZXIoZmluYWwub3duZXJzaGlwUGVyY2VudGFnZSkpLnRvQmUoMi43NSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9