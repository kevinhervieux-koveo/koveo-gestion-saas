4b88f9e876b19542c889a90274a3e5c3
"use strict";
/**
 * Critical Session Persistence Tests
 *
 * Tests for session loss scenarios that affect both development and production environments.
 * Detects issues with session storage, cookie management, and auth state persistence.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
require("../setup");
const storage_1 = require("../../server/storage");
const auth_1 = require("../../server/auth");
(0, globals_1.describe)('Session Persistence Critical Tests', () => {
    let app;
    let testUser;
    let sessionCookie;
    (0, globals_1.beforeEach)(async () => {
        // Create test Express app with session management
        app = (0, express_1.default)();
        app.use(express_1.default.json());
        app.use(auth_1.sessionConfig);
        (0, auth_1.setupAuthRoutes)(app);
        // Create test user
        testUser = {
            email: 'test-session@koveo-gestion.com',
            password: await (0, auth_1.hashPassword)('TestPassword123!'),
            firstName: 'Session',
            lastName: 'Test',
            username: 'sessiontest',
            role: 'admin',
            isActive: true,
        };
        const createdUser = await storage_1.storage.createUser(testUser);
        testUser.id = createdUser.id;
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test user
        if (testUser?.id) {
            try {
                await storage_1.storage.deleteUser(testUser.id);
            }
            catch (error) {
                // User might already be deleted
            }
        }
    });
    (0, globals_1.describe)('Session Loss Detection', () => {
        (0, globals_1.it)('should maintain session after login and user check', async () => {
            // Step 1: Login and capture session cookie
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: 'TestPassword123!',
            })
                .expect(200);
            (0, globals_1.expect)(loginResponse.body.user).toBeDefined();
            (0, globals_1.expect)(loginResponse.body.user.id).toBe(testUser.id);
            // Extract session cookie
            const cookies = loginResponse.headers['set-cookie'];
            (0, globals_1.expect)(cookies).toBeDefined();
            sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
            (0, globals_1.expect)(sessionCookie).toBeDefined();
            // Step 2: Use session cookie to check user auth (should work)
            const userCheckResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            (0, globals_1.expect)(userCheckResponse.body.id).toBe(testUser.id);
            (0, globals_1.expect)(userCheckResponse.body.email).toBe(testUser.email);
            (0, globals_1.expect)(userCheckResponse.body.firstName).toBe('Session');
            (0, globals_1.expect)(userCheckResponse.body.lastName).toBe('Test');
            // Step 3: Make another request to ensure session persists
            const secondCheckResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            (0, globals_1.expect)(secondCheckResponse.body.id).toBe(testUser.id);
            (0, globals_1.expect)(secondCheckResponse.body.email).toBe(testUser.email);
        });
        (0, globals_1.it)('should detect session loss after multiple requests', async () => {
            // Login first
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: 'TestPassword123!',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
            // Make multiple requests to simulate session usage
            for (let i = 0; i < 5; i++) {
                const response = await (0, supertest_1.default)(app)
                    .get('/api/auth/user')
                    .set('Cookie', sessionCookie);
                // Should maintain auth across all requests
                (0, globals_1.expect)(response.status).toBe(200);
                (0, globals_1.expect)(response.body.id).toBe(testUser.id);
                (0, globals_1.expect)(response.body.firstName).toBe('Session');
                (0, globals_1.expect)(response.body.lastName).toBe('Test');
                // Session should return defined user data, not "undefined undefined"
                (0, globals_1.expect)(response.body.firstName).not.toBe('undefined');
                (0, globals_1.expect)(response.body.lastName).not.toBe('undefined');
                (0, globals_1.expect)(response.body.email).not.toBe('undefined');
            }
        });
        (0, globals_1.it)('should handle session store connection issues gracefully', async () => {
            // Login successfully
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: 'TestPassword123!',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
            // Verify session works
            await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            // Test session persistence under load
            const requests = Array.from({ length: 10 }, (_, i) => (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie));
            const responses = await Promise.all(requests);
            // All requests should succeed
            responses.forEach((response, index) => {
                (0, globals_1.expect)(response.status).toBe(200);
                (0, globals_1.expect)(response.body.id).toBe(testUser.id);
                (0, globals_1.expect)(response.body.firstName).toBe('Session');
                (0, globals_1.expect)(response.body.lastName).toBe('Test');
            });
        });
        (0, globals_1.it)('should properly handle session refresh and extension', async () => {
            // Login
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: 'TestPassword123!',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
            // Simulate multiple API calls that should extend session
            const initialCheck = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            // Wait a moment and make another request (simulates user activity)
            await new Promise(resolve => setTimeout(resolve, 100));
            const extendedCheck = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            // Both should return valid user data
            (0, globals_1.expect)(initialCheck.body.id).toBe(testUser.id);
            (0, globals_1.expect)(extendedCheck.body.id).toBe(testUser.id);
            (0, globals_1.expect)(extendedCheck.body.firstName).toBe('Session');
            (0, globals_1.expect)(extendedCheck.body.lastName).toBe('Test');
        });
        (0, globals_1.it)('should detect undefined user data patterns', async () => {
            // Login
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: 'TestPassword123!',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
            // Check user data structure
            const userResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            const user = userResponse.body;
            // Ensure no undefined values that cause "undefined undefined" display
            (0, globals_1.expect)(user.firstName).toBeDefined();
            (0, globals_1.expect)(user.firstName).not.toBe('undefined');
            (0, globals_1.expect)(user.firstName).not.toBe(null);
            (0, globals_1.expect)(typeof user.firstName).toBe('string');
            (0, globals_1.expect)(user.firstName.length).toBeGreaterThan(0);
            (0, globals_1.expect)(user.lastName).toBeDefined();
            (0, globals_1.expect)(user.lastName).not.toBe('undefined');
            (0, globals_1.expect)(user.lastName).not.toBe(null);
            (0, globals_1.expect)(typeof user.lastName).toBe('string');
            (0, globals_1.expect)(user.lastName.length).toBeGreaterThan(0);
            (0, globals_1.expect)(user.email).toBeDefined();
            (0, globals_1.expect)(user.email).not.toBe('undefined');
            (0, globals_1.expect)(user.email).toBe(testUser.email);
            (0, globals_1.expect)(user.role).toBeDefined();
            (0, globals_1.expect)(user.role).not.toBe('undefined');
            (0, globals_1.expect)(user.role).toBe('admin');
            // Verify the complete user object structure
            (0, globals_1.expect)(user).toMatchObject({
                id: globals_1.expect.any(String),
                firstName: globals_1.expect.any(String),
                lastName: globals_1.expect.any(String),
                email: globals_1.expect.any(String),
                role: globals_1.expect.any(String),
                isActive: globals_1.expect.any(Boolean),
            });
        });
    });
    (0, globals_1.describe)('Session Cookie Management', () => {
        (0, globals_1.it)('should set proper cookie attributes for session persistence', async () => {
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: 'TestPassword123!',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            const sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
            (0, globals_1.expect)(sessionCookie).toBeDefined();
            // Check cookie attributes for proper session management
            (0, globals_1.expect)(sessionCookie).toMatch(/HttpOnly/i);
            (0, globals_1.expect)(sessionCookie).toMatch(/Path=\//);
            // Should have a reasonable max age (7 days = 604800 seconds)
            (0, globals_1.expect)(sessionCookie).toMatch(/Max-Age=\d+/);
        });
        (0, globals_1.it)('should handle logout and clear session properly', async () => {
            // Login first
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: 'TestPassword123!',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
            // Verify session works
            await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(200);
            // Logout
            const logoutResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .set('Cookie', sessionCookie)
                .expect(200);
            // Verify session is cleared
            await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', sessionCookie)
                .expect(401);
        });
    });
    (0, globals_1.describe)('Production Environment Simulation', () => {
        (0, globals_1.it)('should work with production-like cookie settings', async () => {
            // This test simulates production environment cookie behavior
            const originalNodeEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = 'production';
            try {
                const loginResponse = await (0, supertest_1.default)(app)
                    .post('/api/auth/login')
                    .send({
                    email: testUser.email,
                    password: 'TestPassword123!',
                })
                    .expect(200);
                const cookies = loginResponse.headers['set-cookie'];
                sessionCookie = cookies.find((cookie) => cookie.startsWith('koveo.sid='));
                // Should still work with production cookie settings
                const userResponse = await (0, supertest_1.default)(app)
                    .get('/api/auth/user')
                    .set('Cookie', sessionCookie)
                    .expect(200);
                (0, globals_1.expect)(userResponse.body.id).toBe(testUser.id);
                (0, globals_1.expect)(userResponse.body.firstName).toBe('Session');
                (0, globals_1.expect)(userResponse.body.lastName).toBe('Test');
            }
            finally {
                process.env.NODE_ENV = originalNodeEnv;
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,