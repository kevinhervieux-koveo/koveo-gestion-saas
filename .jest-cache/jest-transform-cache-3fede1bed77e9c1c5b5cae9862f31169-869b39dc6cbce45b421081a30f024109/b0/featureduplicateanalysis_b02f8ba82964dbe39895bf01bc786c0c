283986b6ad315089bac0523f16fcd593
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFeatureDuplicateAnalysis = useFeatureDuplicateAnalysis;
exports.getDuplicateBadge = getDuplicateBadge;
exports.getDuplicateNote = getDuplicateNote;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
/**
 * Hook for analyzing feature duplicates and similarities.
 * @param features
 */
/**
 * UseFeatureDuplicateAnalysis function.
 * @param features
 * @returns Function result.
 */
function useFeatureDuplicateAnalysis(features) {
    const duplicateAnalysis = (0, react_1.useMemo)(() => {
        if (!features.length) {
            return new Map();
        }
        const analysis = new Map();
        features.forEach((feature, _index) => {
            const duplicates = [];
            let exactMatch = false;
            // Compare with all other features
            features.forEach((otherFeature, otherIndex) => {
                if (_index === otherIndex) {
                    return;
                }
                const nameMatch = feature.name.toLowerCase().trim() === otherFeature.name.toLowerCase().trim();
                const descMatch = feature.description?.toLowerCase().trim() ===
                    otherFeature.description?.toLowerCase().trim();
                // Check for exact duplicates (same name OR same description)
                if (nameMatch || (descMatch && feature.description && otherFeature.description)) {
                    duplicates.push(otherFeature);
                    exactMatch = true;
                }
                // Check for similar features (containing similar keywords)
                else {
                    const featureWords = feature.name
                        .toLowerCase()
                        .split(/\s+/)
                        .filter((w) => w.length > 3);
                    const otherWords = otherFeature.name
                        .toLowerCase()
                        .split(/\s+/)
                        .filter((w) => w.length > 3);
                    const commonWords = featureWords.filter((word) => otherWords.includes(word));
                    // If more than 50% of significant words match, consider it similar
                    if (featureWords.length > 0 && commonWords.length / featureWords.length > 0.5) {
                        duplicates.push(otherFeature);
                    }
                }
            });
            analysis.set(feature.id, {
                isDuplicate: duplicates.length > 0,
                duplicateCount: duplicates.length,
                duplicateFeatures: duplicates,
                similarityType: exactMatch ? 'exact' : duplicates.length > 0 ? 'similar' : 'none',
            });
        });
        return analysis;
    }, [features]);
    const duplicateStats = (0, react_1.useMemo)(() => {
        const exactDuplicates = Array.from(duplicateAnalysis.values()).filter((d) => d.similarityType === 'exact');
        const similarFeatures = Array.from(duplicateAnalysis.values()).filter((d) => d.similarityType === 'similar');
        return {
            totalExact: exactDuplicates.length,
            totalSimilar: similarFeatures.length,
            totalWithDuplicates: Array.from(duplicateAnalysis.values()).filter((d) => d.isDuplicate)
                .length,
        };
    }, [duplicateAnalysis]);
    return { duplicateAnalysis, duplicateStats };
}
/**
 * Gets duplicate badge for a feature.
 * @param featureId
 * @param duplicateAnalysis
 */
/**
 * GetDuplicateBadge function.
 * @param featureId
 * @param duplicateAnalysis
 * @returns Function result.
 */
function getDuplicateBadge(featureId, duplicateAnalysis) {
    if (!duplicateAnalysis) {
        return null;
    }
    const dupInfo = duplicateAnalysis.get(featureId);
    if (!dupInfo || !dupInfo.isDuplicate) {
        return null;
    }
    if (dupInfo.similarityType === 'exact') {
        return ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: 'bg-red-100 text-red-800 hover:bg-red-100 ml-2 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { className: 'h-3 w-3' }), "Exact Duplicate (", dupInfo.duplicateCount, ")"] }));
    }
    else {
        return ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: 'bg-orange-100 text-orange-800 hover:bg-orange-100 ml-2 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Copy, { className: 'h-3 w-3' }), "Similar (", dupInfo.duplicateCount, ")"] }));
    }
}
/**
 * Gets duplicate note text for a feature.
 * @param featureId
 * @param duplicateAnalysis
 */
/**
 * GetDuplicateNote function.
 * @param featureId
 * @param duplicateAnalysis
 * @returns Function result.
 */
function getDuplicateNote(featureId, duplicateAnalysis) {
    if (!duplicateAnalysis) {
        return null;
    }
    const dupInfo = duplicateAnalysis.get(featureId);
    if (!dupInfo || !dupInfo.isDuplicate) {
        return null;
    }
    const duplicateNames = dupInfo.duplicateFeatures.map((f) => f.name).join(', ');
    if (dupInfo.similarityType === 'exact') {
        return `‚ö†Ô∏è This feature has ${dupInfo.duplicateCount} exact ${dupInfo.duplicateCount === 1 ? 'duplicate' : 'duplicates'}: ${duplicateNames}`;
    }
    else {
        return `üìã This feature is similar to ${dupInfo.duplicateCount} other ${dupInfo.duplicateCount === 1 ? 'feature' : 'features'}: ${duplicateNames}`;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,