{"file":"/home/runner/workspace/client/src/components/roadmap/feature-duplicate-analysis.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/roadmap/feature-duplicate-analysis.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { AlertTriangle, Copy } from 'lucide-react';\nimport type { Feature } from '@shared/schema';\n\n/**\n * Duplicate analysis result for a feature.\n */\nexport interface DuplicateInfo {\n  isDuplicate: boolean;\n  duplicateCount: number;\n  duplicateFeatures: Feature[];\n  similarityType: 'exact' | 'similar' | 'none';\n}\n\n/**\n * Props for duplicate analysis component.\n */\ninterface FeatureDuplicateAnalysisProps {\n  features: Feature[];\n}\n\n/**\n * Hook for analyzing feature duplicates and similarities.\n * @param features\n */\n/**\n * UseFeatureDuplicateAnalysis function.\n * @param features\n * @returns Function result.\n */\nexport function useFeatureDuplicateAnalysis(features: Feature[]) {\n  const duplicateAnalysis = useMemo(() => {\n    if (!features.length) {\n      return new Map<string, DuplicateInfo>();\n    }\n\n    const analysis = new Map<string, DuplicateInfo>();\n\n    features.forEach((feature: Feature, _index: number) => {\n      const duplicates: Feature[] = [];\n      let exactMatch = false;\n\n      // Compare with all other features\n      features.forEach((otherFeature: Feature, otherIndex: number) => {\n        if (_index === otherIndex) {\n          return;\n        }\n\n        const nameMatch =\n          feature.name.toLowerCase().trim() === otherFeature.name.toLowerCase().trim();\n        const descMatch =\n          feature.description?.toLowerCase().trim() ===\n          otherFeature.description?.toLowerCase().trim();\n\n        // Check for exact duplicates (same name OR same description)\n        if (nameMatch || (descMatch && feature.description && otherFeature.description)) {\n          duplicates.push(otherFeature);\n          exactMatch = true;\n        }\n        // Check for similar features (containing similar keywords)\n        else {\n          const featureWords = feature.name\n            .toLowerCase()\n            .split(/\\s+/)\n            .filter((w: string) => w.length > 3);\n          const otherWords = otherFeature.name\n            .toLowerCase()\n            .split(/\\s+/)\n            .filter((w: string) => w.length > 3);\n\n          const commonWords = featureWords.filter((word: string) => otherWords.includes(word));\n\n          // If more than 50% of significant words match, consider it similar\n          if (featureWords.length > 0 && commonWords.length / featureWords.length > 0.5) {\n            duplicates.push(otherFeature);\n          }\n        }\n      });\n\n      analysis.set(feature.id, {\n        isDuplicate: duplicates.length > 0,\n        duplicateCount: duplicates.length,\n        duplicateFeatures: duplicates,\n        similarityType: exactMatch ? 'exact' : duplicates.length > 0 ? 'similar' : 'none',\n      });\n    });\n\n    return analysis;\n  }, [features]);\n\n  const duplicateStats = useMemo(() => {\n    const exactDuplicates = Array.from(duplicateAnalysis.values()).filter(\n      (d) => d.similarityType === 'exact'\n    );\n    const similarFeatures = Array.from(duplicateAnalysis.values()).filter(\n      (d) => d.similarityType === 'similar'\n    );\n\n    return {\n      totalExact: exactDuplicates.length,\n      totalSimilar: similarFeatures.length,\n      totalWithDuplicates: Array.from(duplicateAnalysis.values()).filter((d) => d.isDuplicate)\n        .length,\n    };\n  }, [duplicateAnalysis]);\n\n  return { duplicateAnalysis, duplicateStats };\n}\n\n/**\n * Gets duplicate badge for a feature.\n * @param featureId\n * @param duplicateAnalysis\n */\n/**\n * GetDuplicateBadge function.\n * @param featureId\n * @param duplicateAnalysis\n * @returns Function result.\n */\nexport function getDuplicateBadge(\n  featureId: string,\n  duplicateAnalysis: Map<string, DuplicateInfo> | undefined\n) {\n  if (!duplicateAnalysis) {\n    return null;\n  }\n  const dupInfo = duplicateAnalysis.get(featureId);\n  if (!dupInfo || !dupInfo.isDuplicate) {\n    return null;\n  }\n\n  if (dupInfo.similarityType === 'exact') {\n    return (\n      <Badge className='bg-red-100 text-red-800 hover:bg-red-100 ml-2 flex items-center gap-1'>\n        <AlertTriangle className='h-3 w-3' />\n        Exact Duplicate ({dupInfo.duplicateCount})\n      </Badge>\n    );\n  } else {\n    return (\n      <Badge className='bg-orange-100 text-orange-800 hover:bg-orange-100 ml-2 flex items-center gap-1'>\n        <Copy className='h-3 w-3' />\n        Similar ({dupInfo.duplicateCount})\n      </Badge>\n    );\n  }\n}\n\n/**\n * Gets duplicate note text for a feature.\n * @param featureId\n * @param duplicateAnalysis\n */\n/**\n * GetDuplicateNote function.\n * @param featureId\n * @param duplicateAnalysis\n * @returns Function result.\n */\nexport function getDuplicateNote(\n  featureId: string,\n  duplicateAnalysis: Map<string, DuplicateInfo> | undefined\n) {\n  if (!duplicateAnalysis) {\n    return null;\n  }\n  const dupInfo = duplicateAnalysis.get(featureId);\n  if (!dupInfo || !dupInfo.isDuplicate) {\n    return null;\n  }\n\n  const duplicateNames = dupInfo.duplicateFeatures.map((f) => f.name).join(', ');\n\n  if (dupInfo.similarityType === 'exact') {\n    return `‚ö†Ô∏è This feature has ${dupInfo.duplicateCount} exact ${dupInfo.duplicateCount === 1 ? 'duplicate' : 'duplicates'}: ${duplicateNames}`;\n  } else {\n    return `üìã This feature is similar to ${dupInfo.duplicateCount} other ${dupInfo.duplicateCount === 1 ? 'feature' : 'features'}: ${duplicateNames}`;\n  }\n}\n"],"version":3}