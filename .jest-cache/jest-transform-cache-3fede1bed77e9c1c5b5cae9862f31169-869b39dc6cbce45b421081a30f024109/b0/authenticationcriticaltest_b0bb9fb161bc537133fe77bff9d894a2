bd1051926ca908541a375549ac0700b6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
/**
 * Critical Authentication Test Suite
 *
 * This test MUST catch critical authentication failures that prevent users
 * from accessing the application. It validates:
 * - Essential user accounts exist
 * - Login endpoints are functional
 * - Database connectivity is working
 * - Authentication flow is complete
 */
(0, globals_1.describe)('CRITICAL Authentication System', () => {
    (0, globals_1.describe)('Database User Existence', () => {
        (0, globals_1.it)('CRITICAL: should have at least one active user in the system', async () => {
            const userCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(*)::int` })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.isActive, true))
                .then(result => result[0]?.count || 0);
            // CRITICAL FAILURE if no users exist
            if (userCount === 0) {
                throw new Error(`
ðŸš¨ CRITICAL AUTHENTICATION FAILURE ðŸš¨
No active users found in database!

This means:
- Nobody can login to the application
- The system is completely inaccessible
- All authentication will fail with 401 errors

Required Action: Create at least one user account immediately
        `);
            }
            (0, globals_1.expect)(userCount).toBeGreaterThan(0);
        });
        (0, globals_1.it)('CRITICAL: should verify admin or manager users exist', async () => {
            // Check for any admin or manager user account (more flexible than specific email)
            const adminUsers = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.sql) `role IN ('admin', 'manager') AND is_active = true`)
                .then(results => results);
            if (adminUsers.length === 0) {
                throw new Error(`
ðŸš¨ NO ADMIN/MANAGER ACCOUNTS FOUND ðŸš¨
No active admin or manager accounts found in the database!

This prevents administrative access to the application.
Required Action: Create at least one admin or manager account immediately
        `);
            }
            (0, globals_1.expect)(adminUsers.length).toBeGreaterThan(0);
            (0, globals_1.expect)(adminUsers.some(user => user.isActive)).toBe(true);
            (0, globals_1.expect)(adminUsers.some(user => ['admin', 'manager'].includes(user.role))).toBe(true);
        });
        (0, globals_1.it)('CRITICAL: should have working user table structure', async () => {
            // Verify the users table exists and has correct structure
            const tableExists = await db_1.db
                .select()
                .from(schema_1.users)
                .limit(1)
                .catch(() => null);
            if (tableExists === null) {
                throw new Error(`
ðŸš¨ DATABASE STRUCTURE FAILURE ðŸš¨
Users table is inaccessible or corrupted!

This means the authentication system cannot function.
Required Action: Fix database schema immediately
        `);
            }
            // Should not throw error
            (0, globals_1.expect)(tableExists).not.toBeNull();
        });
    });
    (0, globals_1.describe)('Authentication Endpoint Functionality', () => {
        (0, globals_1.it)('CRITICAL: login endpoint should be accessible and functional', async () => {
            // Test that the login endpoint exists and responds
            let response;
            let error = null;
            try {
                response = await fetch('http://localhost:5000/api/auth/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: 'test@example.com',
                        password: 'wrongpassword'
                    })
                });
            }
            catch (e) {
                error = e;
            }
            if (error || !response) {
                throw new Error(`
ðŸš¨ LOGIN ENDPOINT FAILURE ðŸš¨
Login endpoint is not accessible or server is down!

Error: ${error instanceof Error ? error.message : 'No response received'}
Required Action: Fix server startup or routing immediately
        `);
            }
            // Should return proper HTTP response (even if 401 for wrong credentials)
            (0, globals_1.expect)(response.status).toBeGreaterThan(0);
            (0, globals_1.expect)(response.status).not.toBe(404); // Endpoint should exist
        });
        (0, globals_1.it)('CRITICAL: user endpoint should be accessible', async () => {
            let response;
            let error = null;
            try {
                response = await fetch('http://localhost:5000/api/auth/user');
            }
            catch (e) {
                error = e;
            }
            if (error || !response) {
                throw new Error(`
ðŸš¨ USER ENDPOINT FAILURE ðŸš¨
User authentication endpoint is not accessible!

Error: ${error instanceof Error ? error.message : 'No response received'}
Required Action: Fix authentication routes immediately
        `);
            }
            (0, globals_1.expect)(response.status).toBeGreaterThan(0);
            (0, globals_1.expect)(response.status).not.toBe(404); // Endpoint should exist
        });
    });
    (0, globals_1.describe)('Authentication Flow Validation', () => {
        let testUserEmail = 'critical-test@koveo.com';
        let testUserId;
        (0, globals_1.beforeAll)(async () => {
            // Create a test user for authentication flow testing
            const testUser = await db_1.db.insert(schema_1.users).values({
                username: 'criticaltest',
                email: testUserEmail,
                password: '$2b$10$MmG3jXpKuT44AMynBAe9JutoL6eSvKvlJ/za/lSY9AFp/J7sB5HYG', // test123
                firstName: 'Critical',
                lastName: 'Test',
                role: 'manager',
                language: 'en',
                isActive: true
            }).returning({ id: schema_1.users.id });
            testUserId = testUser[0].id;
        });
        (0, globals_1.afterAll)(async () => {
            // Clean up test user
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, testUserId));
        });
        (0, globals_1.it)('CRITICAL: complete login flow should work end-to-end', async () => {
            // Test complete authentication flow
            const loginResponse = await fetch('http://localhost:5000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    email: testUserEmail,
                    password: 'test123'
                })
            });
            if (!loginResponse.ok) {
                const errorData = await loginResponse.json().catch(() => ({}));
                throw new Error(`
ðŸš¨ LOGIN FLOW FAILURE ðŸš¨
Authentication login failed for valid user!

Status: ${loginResponse.status}
Error: ${JSON.stringify(errorData)}
User: ${testUserEmail}

This means users cannot login even with correct credentials.
Required Action: Fix authentication logic immediately
        `);
            }
            const loginData = await loginResponse.json();
            (0, globals_1.expect)(loginData.message).toBe('Login successful');
            (0, globals_1.expect)(loginData.user).toBeDefined();
            (0, globals_1.expect)(loginData.user.email).toBe(testUserEmail);
            // Get session cookie for next request
            const cookies = loginResponse.headers.get('set-cookie');
            (0, globals_1.expect)(cookies).toBeDefined();
            // Test that user endpoint works with session
            const userResponse = await fetch('http://localhost:5000/api/auth/user', {
                headers: {
                    'Cookie': cookies || ''
                }
            });
            if (!userResponse.ok) {
                throw new Error(`
ðŸš¨ SESSION PERSISTENCE FAILURE ðŸš¨
User cannot stay logged in - session not working!

Login succeeds but user endpoint fails with session.
Status: ${userResponse.status}
Required Action: Fix session management immediately
        `);
            }
            const userData = await userResponse.json();
            (0, globals_1.expect)(userData.id).toBeDefined();
            (0, globals_1.expect)(userData.email).toBe(testUserEmail);
        });
        (0, globals_1.it)('CRITICAL: should validate password hashing is working', async () => {
            const testUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testUserEmail))
                .then(results => results[0]);
            (0, globals_1.expect)(testUser).toBeDefined();
            (0, globals_1.expect)(testUser.password).toBeDefined();
            (0, globals_1.expect)(testUser.password.startsWith('$2')).toBe(true); // bcrypt format
            // Verify password is not stored in plain text
            (0, globals_1.expect)(testUser.password).not.toBe('test123');
            (0, globals_1.expect)(testUser.password.length).toBeGreaterThan(10);
        });
    });
    (0, globals_1.describe)('Production Readiness Checks', () => {
        (0, globals_1.it)('CRITICAL: should ensure application is accessible', async () => {
            // Test that the main application responds
            let healthResponse;
            try {
                healthResponse = await fetch('http://localhost:5000/api/health');
            }
            catch (error) {
                throw new Error(`
ðŸš¨ APPLICATION INACCESSIBLE ðŸš¨
Application server is not responding!

Error: ${error.message}
Required Action: Fix server startup immediately
        `);
            }
            (0, globals_1.expect)(healthResponse.ok).toBe(true);
            const healthData = await healthResponse.json();
            (0, globals_1.expect)(healthData.status).toBe('ok');
        });
        (0, globals_1.it)('CRITICAL: database connection should be working', async () => {
            try {
                const dbTest = await db_1.db.select({ version: (0, drizzle_orm_1.sql) `version()` }).from(schema_1.users).limit(1);
                (0, globals_1.expect)(dbTest).toBeDefined();
                (0, globals_1.expect)(Array.isArray(dbTest)).toBe(true);
            }
            catch (error) {
                throw new Error(`
ðŸš¨ DATABASE CONNECTION FAILURE ðŸš¨
Cannot connect to database!

Error: ${error instanceof Error ? error.message : 'Unknown error'}
Required Action: Fix database connection immediately
        `);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,