300b99ba46d88021e4e6b15edda0e380
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = IdeaBox;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const alert_dialog_1 = require("@/components/ui/alert-dialog");
const dropdown_menu_1 = require("@/components/ui/dropdown-menu");
const lucide_react_1 = require("lucide-react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const use_auth_1 = require("@/hooks/use-auth");
const file_upload_1 = require("@/components/ui/file-upload");
// Feature request form schema
const featureRequestFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Feature title is required (example: Add bulk export for documents)').max(200, 'Title must be less than 200 characters'),
    description: zod_2.z
        .string()
        .min(10, 'Description must be at least 10 characters long (example: Users need the ability to export multiple documents at once to save time)')
        .max(2000, 'Description must be less than 2000 characters'),
    need: zod_2.z
        .string()
        .min(5, 'Need explanation must be at least 5 characters long (example: This would save managers hours of work each month)')
        .max(500, 'Need explanation must be less than 500 characters'),
    category: zod_2.z.enum([
        'dashboard',
        'property_management',
        'resident_management',
        'financial_management',
        'maintenance',
        'document_management',
        'communication',
        'reports',
        'mobile_app',
        'integrations',
        'security',
        'performance',
        'other',
    ]),
    page: zod_2.z.string().min(1, 'Page location is required (example: Document Management, Settings, Dashboard)').max(100, 'Page location must be less than 100 characters'),
});
// Enhanced edit form schema for admins (includes status)
const adminEditFormSchema = featureRequestFormSchema.extend({
    status: zod_2.z.enum(['submitted', 'under_review', 'planned', 'in_progress', 'completed', 'rejected']),
    adminNotes: zod_2.z.string().max(1000, 'Admin notes must be less than 1000 characters').optional(),
});
const categoryLabels = {
    dashboard: 'Dashboard',
    property_management: 'Property Management',
    resident_management: 'Resident Management',
    financial_management: 'Financial Management',
    maintenance: 'Maintenance',
    document_management: 'Document Management',
    communication: 'Communication',
    reports: 'Reports',
    mobile_app: 'Mobile App',
    integrations: 'Integrations',
    security: 'Security',
    performance: 'Performance',
    other: 'Other',
};
const statusColors = {
    submitted: 'bg-blue-100 text-blue-800',
    under_review: 'bg-purple-100 text-purple-800',
    planned: 'bg-orange-100 text-orange-800',
    in_progress: 'bg-yellow-100 text-yellow-800',
    completed: 'bg-green-100 text-green-800',
    rejected: 'bg-red-100 text-red-800',
};
/**
 *
 */
function IdeaBox() {
    const [isCreateDialogOpen, setIsCreateDialogOpen] = (0, react_1.useState)(false);
    const [isEditDialogOpen, setIsEditDialogOpen] = (0, react_1.useState)(false);
    const [isViewDialogOpen, setIsViewDialogOpen] = (0, react_1.useState)(false);
    const [viewingFeatureRequest, setViewingFeatureRequest] = (0, react_1.useState)(null);
    const [editingFeatureRequest, setEditingFeatureRequest] = (0, react_1.useState)(null);
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('all');
    const [categoryFilter, setCategoryFilter] = (0, react_1.useState)('all');
    const [sortBy, setSortBy] = (0, react_1.useState)('newest');
    const [attachedFiles, setAttachedFiles] = (0, react_1.useState)([]);
    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);
    const { toast } = (0, use_toast_1.useToast)();
    const { user } = (0, use_auth_1.useAuth)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(featureRequestFormSchema),
    });
    const editForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(adminEditFormSchema),
    });
    // Fetch feature requests
    const { data: featureRequests = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/feature-requests'],
        enabled: !!user,
    });
    // Create feature request mutation
    const createFeatureRequestMutation = (0, react_query_1.useMutation)({
        mutationFn: (data) => (0, queryClient_1.apiRequest)('POST', '/api/feature-requests', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            setIsCreateDialogOpen(false);
            form.reset();
            toast({
                title: 'Feature request submitted',
                description: 'Your feature request has been submitted successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to create feature request',
                variant: 'destructive',
            });
        },
    });
    // Update feature request mutation (admin only)
    const updateFeatureRequestMutation = (0, react_query_1.useMutation)({
        mutationFn: ({ id, data }) => (0, queryClient_1.apiRequest)('PATCH', `/api/feature-requests/${id}`, data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            setIsEditDialogOpen(false);
            setEditingFeatureRequest(null);
            editForm.reset();
            toast({
                title: 'Feature request updated',
                description: 'Feature request has been updated successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to update feature request',
                variant: 'destructive',
            });
        },
    });
    // Delete feature request mutation (admin only)
    const deleteFeatureRequestMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('DELETE', `/api/feature-requests/${id}`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            toast({
                title: 'Feature request deleted',
                description: 'Feature request has been deleted successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to delete feature request',
                variant: 'destructive',
            });
        },
    });
    // Upvote feature request mutation
    const upvoteFeatureRequestMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('POST', `/api/feature-requests/${id}/upvote`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            toast({
                title: 'Upvoted',
                description: 'Your upvote has been recorded.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to upvote feature request',
                variant: 'destructive',
            });
        },
    });
    // Remove upvote mutation
    const removeUpvoteMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('DELETE', `/api/feature-requests/${id}/upvote`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            toast({
                title: 'Upvote removed',
                description: 'Your upvote has been removed.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to remove upvote',
                variant: 'destructive',
            });
        },
    });
    const onSubmit = async (data) => {
        try {
            setIsSubmitting(true);
            // First create the feature request
            const featureRequestResponse = await (0, queryClient_1.apiRequest)('POST', '/api/feature-requests', data);
            const featureRequestData = await featureRequestResponse.json();
            const featureRequestId = featureRequestData.id;
            if (!featureRequestId) {
                throw new Error('Failed to create feature request - no ID returned');
            }
            // Upload attachments if any
            if (attachedFiles.length > 0) {
                // Upload files one by one since the API expects single file uploads
                for (const file of attachedFiles) {
                    const formData = new FormData();
                    formData.append('file', file); // API expects 'file' not 'files'
                    formData.append('attachedToType', 'feature_request');
                    formData.append('attachedToId', String(featureRequestId));
                    formData.append('category', 'ATTACHMENT');
                    formData.append('documentType', 'other'); // Use 'other' instead of 'file'
                    formData.append('name', file.name); // API expects 'name' field
                    formData.append('title', file.name);
                    await (0, queryClient_1.apiRequest)('POST', '/api/documents/upload', formData);
                }
            }
            // Clear form and files
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            setIsCreateDialogOpen(false);
            setAttachedFiles([]);
            form.reset();
            toast({
                title: 'Feature request submitted',
                description: `Your feature request has been submitted successfully${attachedFiles.length > 0 ? ` with ${attachedFiles.length} attachment(s)` : ''}.`,
            });
        }
        catch (error) {
            toast({
                title: 'Error',
                description: error.message || 'Failed to submit feature request',
                variant: 'destructive',
            });
        }
        finally {
            setIsSubmitting(false);
        }
    };
    // Handle file attachments for mockups, wireframes, or supporting documents
    const handleFilesSelect = (files) => {
        setAttachedFiles(prev => [...prev, ...files]);
    };
    // Handle file download/view
    const handleFileDownload = (fileUrl, fileName) => {
        if (fileUrl) {
            // Open file in new tab to view or download
            window.open(fileUrl, '_blank');
        }
        else {
            toast({
                title: 'File not available',
                description: 'The requested file could not be found.',
                variant: 'destructive',
            });
        }
    };
    const onEditSubmit = (data) => {
        if (editingFeatureRequest) {
            updateFeatureRequestMutation.mutate({ id: editingFeatureRequest.id, data });
        }
    };
    const handleEdit = (featureRequest) => {
        if (!canEditFeatureRequest()) {
            return;
        }
        setEditingFeatureRequest(featureRequest);
        editForm.reset({
            title: featureRequest.title,
            description: featureRequest.description,
            need: featureRequest.need,
            category: featureRequest.category,
            page: featureRequest.page,
            status: featureRequest.status,
            adminNotes: featureRequest.adminNotes || '',
        });
        setIsEditDialogOpen(true);
    };
    const handleFeatureRequestClick = (featureRequest) => {
        // Always show view dialog when clicking on card
        setViewingFeatureRequest(featureRequest);
        setIsViewDialogOpen(true);
    };
    const handleDelete = (featureRequestId) => {
        deleteFeatureRequestMutation.mutate(featureRequestId);
    };
    const handleUpvote = (featureRequestId) => {
        upvoteFeatureRequestMutation.mutate(featureRequestId);
    };
    const handleRemoveUpvote = (featureRequestId) => {
        removeUpvoteMutation.mutate(featureRequestId);
    };
    // Check if user can edit/delete feature requests (admin only)
    const canEditFeatureRequest = () => {
        return user && user.role === 'admin';
    };
    const canDeleteFeatureRequest = () => {
        return user && user.role === 'admin';
    };
    // Filter and sort feature requests
    const filteredAndSortedFeatureRequests = featureRequests
        .filter((request) => {
        const matchesSearch = request.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            request.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
            request.need.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = statusFilter === 'all' || request.status === statusFilter;
        const matchesCategory = categoryFilter === 'all' || request.category === categoryFilter;
        return matchesSearch && matchesStatus && matchesCategory;
    })
        .sort((a, b) => {
        switch (sortBy) {
            case 'newest':
                return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
            case 'oldest':
                return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
            case 'most_upvoted':
                return b.upvoteCount - a.upvoteCount;
            case 'least_upvoted':
                return a.upvoteCount - b.upvoteCount;
            default:
                return 0;
        }
    });
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Idea Box', subtitle: 'Submit and vote on feature suggestions' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lightbulb, { className: 'w-5 h-5' }), "Feature Requests"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col md:flex-row gap-4 items-start md:items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col sm:flex-row gap-4 flex-1', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'relative flex-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Search feature requests...', value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: 'pl-10', "data-testid": 'input-search-features' })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: statusFilter, onValueChange: setStatusFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full sm:w-40', "data-testid": 'select-status-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Filter by status' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Status" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'submitted', children: "Submitted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'under_review', children: "Under Review" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'planned', children: "Planned" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in_progress', children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'completed', children: "Completed" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'rejected', children: "Rejected" })] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: categoryFilter, onValueChange: setCategoryFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full sm:w-40', "data-testid": 'select-category-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Filter by category' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Categories" }), Object.entries(categoryLabels).map(([value, label]) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: value, children: label }, value)))] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: sortBy, onValueChange: setSortBy, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full sm:w-40', "data-testid": 'select-sort-by', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Sort by' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'newest', children: "Newest First" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'oldest', children: "Oldest First" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'most_upvoted', children: "Most Upvoted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'least_upvoted', children: "Least Upvoted" })] })] })] }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isCreateDialogOpen, onOpenChange: setIsCreateDialogOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { className: 'flex items-center gap-2', "data-testid": 'button-create-feature-request', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4' }), "Submit Idea"] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Submit a Feature Request" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'title', children: "Title*" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'title', placeholder: 'Brief description of the feature you need', ...form.register('title'), "data-testid": 'input-feature-title' }), form.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'description', children: "Description*" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'description', placeholder: 'Detailed description of the feature and how it should work', rows: 4, ...form.register('description'), "data-testid": 'textarea-feature-description', onPaste: (e) => {
                                                                                    const items = Array.from(e.clipboardData?.items || []);
                                                                                    const imageItems = items.filter(item => item.type.indexOf('image') !== -1);
                                                                                    if (imageItems.length > 0) {
                                                                                        e.preventDefault();
                                                                                        imageItems.forEach(item => {
                                                                                            const file = item.getAsFile();
                                                                                            if (file) {
                                                                                                handleFilesSelect([file]);
                                                                                            }
                                                                                        });
                                                                                    }
                                                                                } }), form.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'need', children: "What need does this address?*" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'need', placeholder: 'Explain the specific need or problem this feature would solve', rows: 3, ...form.register('need'), "data-testid": 'textarea-feature-need' }), form.formState.errors.need && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.need.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'category', children: "Category*" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: (value) => {
                                                                                            form.setValue('category', value);
                                                                                            form.clearErrors('category');
                                                                                        }, value: form.watch('category'), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-feature-category', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: Object.entries(categoryLabels).map(([value, label]) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: value, children: label }, value))) })] }), form.formState.errors.category && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.category.message }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'page', children: "Page/Location*" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'page', placeholder: 'e.g., Dashboard, Settings, Buildings page', ...form.register('page'), "data-testid": 'input-feature-page' }), form.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-600 mt-1', children: form.formState.errors.page.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-3 border-t pt-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: "w-4 h-4 text-gray-500" }), (0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Supporting Documents" }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: "(Optional - Mockups, wireframes, screenshots, requirements docs)" })] }), (0, jsx_runtime_1.jsx)(file_upload_1.CompactFileUpload, { onFilesSelect: handleFilesSelect, maxFiles: 5, acceptedTypes: ['image/*', '.pdf', '.doc', '.docx', '.txt', '.fig', '.sketch'] })] }), attachedFiles.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)("p", { className: "text-xs text-gray-600", children: ["Selected files (", attachedFiles.length, "):"] }), (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-2", children: attachedFiles.map((file, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1 px-2 py-1 bg-gray-100 rounded text-xs", children: [(0, jsx_runtime_1.jsx)("span", { className: "truncate max-w-[100px]", children: file.name }), (0, jsx_runtime_1.jsx)("button", { onClick: () => setAttachedFiles(prev => prev.filter((_, i) => i !== index)), className: "text-gray-500 hover:text-red-500", type: "button", children: "\u00D7" })] }, index))) })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-2 pt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setIsCreateDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: isSubmitting, "data-testid": 'button-submit-feature-request', children: isSubmitting
                                                                                    ? 'Submitting...'
                                                                                    : 'Submit Feature Request' })] })] })] })] })] }) })] }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-4', children: isLoading ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto' }), (0, jsx_runtime_1.jsx)("p", { className: 'mt-4 text-gray-600', children: "Loading feature requests..." })] }) })) : filteredAndSortedFeatureRequests.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lightbulb, { className: 'w-16 h-16 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: "No feature requests found" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500 mb-4', children: searchTerm || statusFilter !== 'all' || categoryFilter !== 'all'
                                                ? 'Try adjusting your filters to see more results.'
                                                : 'Be the first to submit a feature request!' })] }) })) : (filteredAndSortedFeatureRequests.map((request) => ((0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-md transition-shadow cursor-pointer hover:bg-gray-50', onClick: () => handleFeatureRequestClick(request), "data-testid": `card-feature-request-${request.id}`, children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', "data-testid": `text-feature-title-${request.id}`, children: request.title }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[request.status], "data-testid": `badge-status-${request.id}`, children: request.status.replace('_', ' ').toUpperCase() })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mb-3', "data-testid": `text-feature-description-${request.id}`, children: request.description }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-blue-50 p-3 rounded-lg mb-3', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-blue-800 mb-1', children: "Need:" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-blue-700', "data-testid": `text-feature-need-${request.id}`, children: request.need })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-wrap gap-2 mb-3', children: [(0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Tag, { className: 'w-3 h-3' }), categoryLabels[request.category]] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'flex items-center gap-1', children: ["\uD83D\uDCCD ", request.page] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-3 h-3' }), new Date(request.createdAt).toLocaleDateString()] }), user?.role === 'admin' && request.createdBy && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.User, { className: 'w-3 h-3' }), "Submitted by: ", request.createdBy] })), (request.attachmentCount && request.attachmentCount > 0) && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'flex items-center gap-1 bg-green-50 text-green-700 border-green-200', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'w-3 h-3' }), request.attachmentCount, " file", request.attachmentCount > 1 ? 's' : ''] }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: (e) => {
                                                            e.stopPropagation(); // Prevent card click event
                                                            handleUpvote(request.id);
                                                        }, className: 'flex items-center gap-1', "data-testid": `button-upvote-${request.id}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ThumbsUp, { className: 'w-4 h-4' }), request.upvoteCount] }), canEditFeatureRequest() && ((0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenu, { children: [(0, jsx_runtime_1.jsx)(dropdown_menu_1.DropdownMenuTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: (e) => e.stopPropagation(), "data-testid": `button-menu-${request.id}`, children: (0, jsx_runtime_1.jsx)(lucide_react_1.MoreHorizontal, { className: 'w-4 h-4' }) }) }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuContent, { align: 'end', onClick: (e) => e.stopPropagation(), children: [(0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: (e) => {
                                                                            e.stopPropagation();
                                                                            setViewingFeatureRequest(request);
                                                                            setIsViewDialogOpen(true);
                                                                        }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-4 h-4 mr-2' }), "View"] }), (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onClick: (e) => {
                                                                            e.stopPropagation();
                                                                            handleEdit(request);
                                                                        }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit2, { className: 'w-4 h-4 mr-2' }), "Edit"] }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialog, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(dropdown_menu_1.DropdownMenuItem, { onSelect: (e) => e.preventDefault(), onClick: (e) => e.stopPropagation(), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'w-4 h-4 mr-2 text-red-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-red-600', children: "Delete" })] }) }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogContent, { children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogHeader, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTitle, { children: "Delete Feature Request" }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogDescription, { children: "Are you sure you want to delete this feature request? This action cannot be undone." })] }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogCancel, { children: "Cancel" }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogAction, { onClick: () => handleDelete(request.id), className: 'bg-red-600 hover:bg-red-700', children: "Delete" })] })] })] })] })] }))] })] }) }) }, request.id)))) }), canEditFeatureRequest() && ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isEditDialogOpen, onOpenChange: setIsEditDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-3xl max-h-[90vh] overflow-y-auto', "data-testid": 'edit-feature-request-dialog', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Edit Feature Request" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: editForm.handleSubmit(onEditSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-title', className: 'text-sm font-medium', children: ["Title ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'edit-title', ...editForm.register('title'), "data-testid": 'input-edit-title' }), editForm.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-category', className: 'text-sm font-medium', children: ["Category ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('category'), onValueChange: (value) => editForm.setValue('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-category', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: Object.entries(categoryLabels).map(([value, label]) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: value, children: label }, value))) })] })] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-status', className: 'text-sm font-medium', children: ["Status ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('status'), onValueChange: (value) => editForm.setValue('status', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-status', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select status' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'submitted', children: "Submitted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'under_review', children: "Under Review" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'planned', children: "Planned" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in_progress', children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'completed', children: "Completed" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'rejected', children: "Rejected" })] })] }), editForm.formState.errors.status && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.status.message }))] }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-description', className: 'text-sm font-medium', children: ["Description ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'edit-description', ...editForm.register('description'), rows: 4, "data-testid": 'textarea-edit-description' }), editForm.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-need', className: 'text-sm font-medium', children: ["Need ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'edit-need', ...editForm.register('need'), rows: 3, "data-testid": 'textarea-edit-need' }), editForm.formState.errors.need && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.need.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'edit-page', className: 'text-sm font-medium', children: ["Page/Location ", (0, jsx_runtime_1.jsx)("span", { className: 'text-red-500', children: "*" })] }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'edit-page', ...editForm.register('page'), placeholder: 'e.g., Dashboard, Settings, etc.', "data-testid": 'input-edit-page' }), editForm.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 text-xs', children: editForm.formState.errors.page.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'edit-admin-notes', className: 'text-sm font-medium', children: "Admin Notes" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'edit-admin-notes', ...editForm.register('adminNotes'), rows: 3, placeholder: 'Internal notes for team members', "data-testid": 'textarea-edit-admin-notes' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'border-t pt-4', children: [(0, jsx_runtime_1.jsxs)("h4", { className: 'font-medium mb-3 flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'w-4 h-4' }), "Attached Files"] }), editingFeatureRequest?.attachments && editingFeatureRequest.attachments.length > 0 ? ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-2', children: editingFeatureRequest.attachments.map((attachment, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-8 h-8 bg-blue-100 rounded flex items-center justify-center', children: (0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'w-4 h-4 text-blue-600' }) }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'font-medium text-sm', children: attachment.name }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500', children: attachment.size ? `${(attachment.size / 1024 / 1024).toFixed(2)} MB` : 'Size unknown' })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: 'outline', size: 'sm', onClick: (e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                window.open(`/api/documents/${attachment.id}/file`, '_blank');
                                                                            }, className: 'flex items-center gap-1', "data-testid": `button-view-${attachment.id}`, children: "\uD83D\uDC41\uFE0F View" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: 'outline', size: 'sm', onClick: (e) => {
                                                                                e.preventDefault();
                                                                                e.stopPropagation();
                                                                                const link = document.createElement('a');
                                                                                link.href = `/api/documents/${attachment.id}/file?download=true`;
                                                                                link.download = attachment.name;
                                                                                document.body.appendChild(link);
                                                                                link.click();
                                                                                document.body.removeChild(link);
                                                                            }, className: 'flex items-center gap-1', "data-testid": `button-download-${attachment.id}`, children: "\u2B07\uFE0F Download" })] })] }, index))) })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-4 text-gray-500 bg-gray-50 rounded-lg', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: 'w-8 h-8 mx-auto mb-2 text-gray-400' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm', children: "No files attached to this feature request" })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-2 pt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setIsEditDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: updateFeatureRequestMutation.isPending, "data-testid": 'button-update-feature-request', children: updateFeatureRequestMutation.isPending
                                                            ? 'Updating...'
                                                            : 'Update Feature Request' })] })] })] }) })), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isViewDialogOpen, onOpenChange: setIsViewDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-4xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Feature Request Details" }) }), viewingFeatureRequest && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold mb-2', children: viewingFeatureRequest.title }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[viewingFeatureRequest.status], children: viewingFeatureRequest.status.replace('_', ' ').toUpperCase() })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-medium mb-1', children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600', children: viewingFeatureRequest.description })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-blue-50 p-3 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-medium text-blue-800 mb-1', children: "Need" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-blue-700', children: viewingFeatureRequest.need })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-wrap gap-2', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', children: categoryLabels[viewingFeatureRequest.category] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', children: ["\uD83D\uDCCD ", viewingFeatureRequest.page] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex justify-end pt-4', children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => setIsViewDialogOpen(false), children: "Close" }) })] }))] }) })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,