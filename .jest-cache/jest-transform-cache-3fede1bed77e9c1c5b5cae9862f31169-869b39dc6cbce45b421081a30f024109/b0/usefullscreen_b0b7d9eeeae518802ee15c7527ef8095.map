{"file":"/home/runner/workspace/client/src/hooks/use-fullscreen.ts","mappings":";;AAKA,sCA8DC;AAnED,iCAAyD;AAEzD;;GAEG;AACH,SAAgB,aAAa;IAC3B,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,IAAA,gBAAQ,EAAC,KAAK,CAAC,CAAC;IAExD,MAAM,gBAAgB,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;QAC9C,IAAI,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;gBAChC,MAAM,QAAQ,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;YACrD,CAAC;iBAAM,CAAC;gBACN,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;YAClC,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,oCAAoC;YACpC,0BAA0B;QAC5B,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,cAAc,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;QAC5C,IAAI,CAAC;YACH,IAAI,QAAQ,CAAC,iBAAiB,EAAE,CAAC;gBAC/B,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;YAClC,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,oCAAoC;YACpC,wBAAwB;QAC1B,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,eAAe,GAAG,IAAA,mBAAW,EAAC,KAAK,IAAI,EAAE;QAC7C,IAAI,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;gBAChC,MAAM,QAAQ,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;YACrD,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,oCAAoC;YACpC,yBAAyB;QAC3B,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,sBAAsB,GAAG,GAAG,EAAE;YAClC,eAAe,CAAC,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;QAChD,CAAC,CAAC;QAEF,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAC;QACtE,QAAQ,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,sBAAsB,CAAC,CAAC;QAC5E,QAAQ,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,sBAAsB,CAAC,CAAC;QACzE,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,sBAAsB,CAAC,CAAC;QAExE,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAC;YACzE,QAAQ,CAAC,mBAAmB,CAAC,wBAAwB,EAAE,sBAAsB,CAAC,CAAC;YAC/E,QAAQ,CAAC,mBAAmB,CAAC,qBAAqB,EAAE,sBAAsB,CAAC,CAAC;YAC5E,QAAQ,CAAC,mBAAmB,CAAC,oBAAoB,EAAE,sBAAsB,CAAC,CAAC;QAC7E,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QACL,YAAY;QACZ,gBAAgB;QAChB,eAAe;QACf,cAAc;KACf,CAAC;AACJ,CAAC","names":[],"sources":["/home/runner/workspace/client/src/hooks/use-fullscreen.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n/**\n * Custom hook for managing fullscreen functionality.\n */\nexport function useFullscreen() {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const toggleFullscreen = useCallback(async () => {\n    try {\n      if (!document.fullscreenElement) {\n        await document.documentElement.requestFullscreen();\n      } else {\n        await document.exitFullscreen();\n      }\n    } catch (error) {\n      // Silently handle fullscreen errors\n      // Fullscreen toggle error\n    }\n  }, []);\n\n  const exitFullscreen = useCallback(async () => {\n    try {\n      if (document.fullscreenElement) {\n        await document.exitFullscreen();\n      }\n    } catch (error) {\n      // Silently handle fullscreen errors\n      // Exit fullscreen error\n    }\n  }, []);\n\n  const enterFullscreen = useCallback(async () => {\n    try {\n      if (!document.fullscreenElement) {\n        await document.documentElement.requestFullscreen();\n      }\n    } catch (error) {\n      // Silently handle fullscreen errors\n      // Enter fullscreen error\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n    document.addEventListener('mozfullscreenchange', handleFullscreenChange);\n    document.addEventListener('MSFullscreenChange', handleFullscreenChange);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n      document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);\n      document.removeEventListener('mozfullscreenchange', handleFullscreenChange);\n      document.removeEventListener('MSFullscreenChange', handleFullscreenChange);\n    };\n  }, []);\n\n  return {\n    isFullscreen,\n    toggleFullscreen,\n    enterFullscreen,\n    exitFullscreen,\n  };\n}\n"],"version":3}