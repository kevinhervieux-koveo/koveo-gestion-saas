19e99c41ec91280e8c78911d0a71da3a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ResidenceDocuments;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const queryClient_1 = require("@/lib/queryClient");
const DocumentManager_1 = __importDefault(require("@/components/common/DocumentManager"));
const button_1 = require("@/components/ui/button");
const lucide_react_1 = require("lucide-react");
function ResidenceDocuments() {
    const [, navigate] = (0, wouter_1.useLocation)();
    const params = (0, wouter_1.useParams)();
    // Get residenceId from URL (both path param and query param)
    const urlParams = new URLSearchParams(window.location.search);
    const residenceId = params.residenceId || urlParams.get('residenceId');
    // Get current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Get residence info
    const { data: residence } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences', residenceId],
        queryFn: async () => {
            const response = await fetch(`/api/residences/${residenceId}`, {
                credentials: 'include',
            });
            if (!response.ok)
                throw new Error('Failed to fetch residence');
            return response.json();
        },
        enabled: !!residenceId,
    });
    if (!residenceId) {
        return ((0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: "Residence ID is required" }) }) }));
    }
    const isManager = user?.role === 'manager' || user?.role === 'admin';
    const residenceName = residence?.unitNumber ? `Unit ${residence.unitNumber}` : 'Residence';
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)("div", { className: 'p-6 pb-0', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => navigate('/manager/residences'), className: 'mb-4', "data-testid": 'button-back', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), "Back to Residences"] }) }), (0, jsx_runtime_1.jsx)(DocumentManager_1.default, { config: {
                    type: 'residence',
                    userRole: 'manager',
                    entityId: residenceId,
                    entityName: residenceName,
                    entityAddress: residence?.address,
                    allowCreate: isManager,
                    allowEdit: isManager,
                    allowDelete: isManager,
                    showVisibilityToggle: isManager,
                } })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL3BhZ2VzL21hbmFnZXIvUmVzaWRlbmNlRG9jdW1lbnRzLnRzeCIsIm1hcHBpbmdzIjoiOzs7OztBQU9BLHFDQXNFQzs7QUE3RUQsdURBQWlEO0FBQ2pELG1DQUFnRDtBQUNoRCxtREFBK0M7QUFDL0MsMEZBQWtFO0FBQ2xFLG1EQUFnRDtBQUNoRCwrQ0FBeUM7QUFFekMsU0FBd0Isa0JBQWtCO0lBQ3hDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxHQUFHLElBQUEsb0JBQVcsR0FBRSxDQUFDO0lBQ25DLE1BQU0sTUFBTSxHQUFHLElBQUEsa0JBQVMsR0FBRSxDQUFDO0lBRTNCLDZEQUE2RDtJQUM3RCxNQUFNLFNBQVMsR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlELE1BQU0sV0FBVyxHQUFJLE1BQWMsQ0FBQyxXQUFXLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVoRixtQkFBbUI7SUFDbkIsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFBLHNCQUFRLEVBQUM7UUFDOUIsUUFBUSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7UUFDNUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUEsd0JBQVUsRUFBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQWlCO0tBQ25FLENBQUMsQ0FBQztJQUVILHFCQUFxQjtJQUNyQixNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUEsc0JBQVEsRUFBQztRQUNuQyxRQUFRLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxXQUFXLENBQUM7UUFDMUMsT0FBTyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2xCLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLG1CQUFtQixXQUFXLEVBQUUsRUFBRTtnQkFDN0QsV0FBVyxFQUFFLFNBQVM7YUFDdkIsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUMvRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixDQUFDO1FBQ0QsT0FBTyxFQUFFLENBQUMsQ0FBQyxXQUFXO0tBQ3ZCLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQixPQUFPLENBQ0wsZ0NBQUssU0FBUyxFQUFDLHNDQUFzQyxZQUNuRCxnQ0FBSyxTQUFTLEVBQUMseUNBQXlDLFlBQ3RELDhCQUFHLFNBQVMsRUFBQyxlQUFlLHlDQUE2QixHQUNyRCxHQUNGLENBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLEVBQUUsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEVBQUUsSUFBSSxLQUFLLE9BQU8sQ0FBQztJQUNyRSxNQUFNLGFBQWEsR0FBRyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBRTNGLE9BQU8sQ0FDTCxpQ0FBSyxTQUFTLEVBQUMsc0NBQXNDLGFBRW5ELGdDQUFLLFNBQVMsRUFBQyxVQUFVLFlBQ3ZCLHdCQUFDLGVBQU0sSUFDTCxPQUFPLEVBQUMsU0FBUyxFQUNqQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDLEVBQzlDLFNBQVMsRUFBQyxNQUFNLGlCQUNKLGFBQWEsYUFFekIsdUJBQUMsd0JBQVMsSUFBQyxTQUFTLEVBQUMsY0FBYyxHQUFHLDBCQUUvQixHQUNMLEVBRU4sdUJBQUMseUJBQWUsSUFDZCxNQUFNLEVBQUU7b0JBQ04sSUFBSSxFQUFFLFdBQVc7b0JBQ2pCLFFBQVEsRUFBRSxTQUFTO29CQUNuQixRQUFRLEVBQUUsV0FBVztvQkFDckIsVUFBVSxFQUFFLGFBQWE7b0JBQ3pCLGFBQWEsRUFBRSxTQUFTLEVBQUUsT0FBTztvQkFDakMsV0FBVyxFQUFFLFNBQVM7b0JBQ3RCLFNBQVMsRUFBRSxTQUFTO29CQUNwQixXQUFXLEVBQUUsU0FBUztvQkFDdEIsb0JBQW9CLEVBQUUsU0FBUztpQkFDaEMsR0FDRCxJQUNFLENBQ1AsQ0FBQztBQUNKLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL3BhZ2VzL21hbmFnZXIvUmVzaWRlbmNlRG9jdW1lbnRzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgeyB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zIH0gZnJvbSAnd291dGVyJztcbmltcG9ydCB7IGFwaVJlcXVlc3QgfSBmcm9tICdAL2xpYi9xdWVyeUNsaWVudCc7XG5pbXBvcnQgRG9jdW1lbnRNYW5hZ2VyIGZyb20gJ0AvY29tcG9uZW50cy9jb21tb24vRG9jdW1lbnRNYW5hZ2VyJztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9idXR0b24nO1xuaW1wb3J0IHsgQXJyb3dMZWZ0IH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVzaWRlbmNlRG9jdW1lbnRzKCkge1xuICBjb25zdCBbLCBuYXZpZ2F0ZV0gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBwYXJhbXMgPSB1c2VQYXJhbXMoKTtcblxuICAvLyBHZXQgcmVzaWRlbmNlSWQgZnJvbSBVUkwgKGJvdGggcGF0aCBwYXJhbSBhbmQgcXVlcnkgcGFyYW0pXG4gIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gIGNvbnN0IHJlc2lkZW5jZUlkID0gKHBhcmFtcyBhcyBhbnkpLnJlc2lkZW5jZUlkIHx8IHVybFBhcmFtcy5nZXQoJ3Jlc2lkZW5jZUlkJyk7XG5cbiAgLy8gR2V0IGN1cnJlbnQgdXNlclxuICBjb25zdCB7IGRhdGE6IHVzZXIgfSA9IHVzZVF1ZXJ5KHtcbiAgICBxdWVyeUtleTogWycvYXBpL2F1dGgvdXNlciddLFxuICAgIHF1ZXJ5Rm46ICgpID0+IGFwaVJlcXVlc3QoJ0dFVCcsICcvYXBpL2F1dGgvdXNlcicpIGFzIFByb21pc2U8YW55PixcbiAgfSk7XG5cbiAgLy8gR2V0IHJlc2lkZW5jZSBpbmZvXG4gIGNvbnN0IHsgZGF0YTogcmVzaWRlbmNlIH0gPSB1c2VRdWVyeSh7XG4gICAgcXVlcnlLZXk6IFsnL2FwaS9yZXNpZGVuY2VzJywgcmVzaWRlbmNlSWRdLFxuICAgIHF1ZXJ5Rm46IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvcmVzaWRlbmNlcy8ke3Jlc2lkZW5jZUlkfWAsIHtcbiAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgIH0pO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggcmVzaWRlbmNlJyk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0sXG4gICAgZW5hYmxlZDogISFyZXNpZGVuY2VJZCxcbiAgfSk7XG5cbiAgaWYgKCFyZXNpZGVuY2VJZCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC0xIGZsZXggZmxleC1jb2wgb3ZlcmZsb3ctaGlkZGVuJz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtMSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlcic+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPSd0ZXh0LWdyYXktNTAwJz5SZXNpZGVuY2UgSUQgaXMgcmVxdWlyZWQ8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGlzTWFuYWdlciA9IHVzZXI/LnJvbGUgPT09ICdtYW5hZ2VyJyB8fCB1c2VyPy5yb2xlID09PSAnYWRtaW4nO1xuICBjb25zdCByZXNpZGVuY2VOYW1lID0gcmVzaWRlbmNlPy51bml0TnVtYmVyID8gYFVuaXQgJHtyZXNpZGVuY2UudW5pdE51bWJlcn1gIDogJ1Jlc2lkZW5jZSc7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC0xIGZsZXggZmxleC1jb2wgb3ZlcmZsb3ctaGlkZGVuJz5cbiAgICAgIHsvKiBCYWNrIGJ1dHRvbiAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdwLTYgcGItMCc+XG4gICAgICAgIDxCdXR0b25cbiAgICAgICAgICB2YXJpYW50PSdvdXRsaW5lJ1xuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG5hdmlnYXRlKCcvbWFuYWdlci9yZXNpZGVuY2VzJyl9XG4gICAgICAgICAgY2xhc3NOYW1lPSdtYi00J1xuICAgICAgICAgIGRhdGEtdGVzdGlkPSdidXR0b24tYmFjaydcbiAgICAgICAgPlxuICAgICAgICAgIDxBcnJvd0xlZnQgY2xhc3NOYW1lPSd3LTQgaC00IG1yLTInIC8+XG4gICAgICAgICAgQmFjayB0byBSZXNpZGVuY2VzXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxEb2N1bWVudE1hbmFnZXJcbiAgICAgICAgY29uZmlnPXt7XG4gICAgICAgICAgdHlwZTogJ3Jlc2lkZW5jZScsXG4gICAgICAgICAgdXNlclJvbGU6ICdtYW5hZ2VyJyxcbiAgICAgICAgICBlbnRpdHlJZDogcmVzaWRlbmNlSWQsXG4gICAgICAgICAgZW50aXR5TmFtZTogcmVzaWRlbmNlTmFtZSxcbiAgICAgICAgICBlbnRpdHlBZGRyZXNzOiByZXNpZGVuY2U/LmFkZHJlc3MsXG4gICAgICAgICAgYWxsb3dDcmVhdGU6IGlzTWFuYWdlcixcbiAgICAgICAgICBhbGxvd0VkaXQ6IGlzTWFuYWdlcixcbiAgICAgICAgICBhbGxvd0RlbGV0ZTogaXNNYW5hZ2VyLFxuICAgICAgICAgIHNob3dWaXNpYmlsaXR5VG9nZ2xlOiBpc01hbmFnZXIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sInZlcnNpb24iOjN9