0e6915d734d0980adb05b90d7ae5b127
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MyBuilding;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const label_1 = require("@/components/ui/label");
const lucide_react_1 = require("lucide-react");
const queryClient_1 = require("@/lib/queryClient");
const use_language_1 = require("@/hooks/use-language");
/**
 *
 */
function MyBuilding() {
    const [, navigate] = (0, wouter_1.useLocation)();
    const { t } = (0, use_language_1.useLanguage)();
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const itemsPerPage = 10;
    // Fetch current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Fetch buildings accessible to the user based on their residences
    const { data: buildingsData, isLoading: isLoadingBuildings, error: buildingsError, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/users/buildings', user?.id],
        queryFn: async () => {
            if (!user?.id) {
                return { buildings: [] };
            }
            const response = await (0, queryClient_1.apiRequest)('GET', `/api/users/${user.id}/buildings`);
            return response.json();
        },
        enabled: !!user?.id,
    });
    const buildings = buildingsData?.buildings || [];
    // Pagination calculations
    const totalPages = Math.ceil(buildings.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentBuildings = buildings.slice(startIndex, endIndex);
    const handlePreviousPage = () => {
        setCurrentPage((prev) => Math.max(1, prev - 1));
    };
    const handleNextPage = () => {
        setCurrentPage((prev) => Math.min(totalPages, prev + 1));
    };
    const handlePageClick = (page) => {
        setCurrentPage(page);
    };
    const handleViewDocuments = (buildingId) => {
        navigate(`/residents/building/documents?buildingId=${buildingId}`);
    };
    if (isLoadingBuildings) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myBuildings'), subtitle: t('viewBuildingsAccess') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-4xl mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-8', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground mt-2', children: "Loading building information..." })] }) }) })] }));
    }
    if (buildings.length === 0) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myBuildings'), subtitle: t('viewBuildingsAccess') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-4xl mx-auto', children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-16 h-16 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: t('noBuildingsFound') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: "You don't have access to any buildings yet." })] }) }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'My Buildings', subtitle: 'View buildings you have access to' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6', children: currentBuildings.map((building) => ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'hover:shadow-lg transition-shadow', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-5 h-5' }), building.name] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-muted-foreground', children: building.organizationName })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 gap-3', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('address') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MapPin, { className: 'w-3 h-3 mt-0.5' }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: building.address }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-700', children: [building.city, ", ", building.province, " ", building.postalCode] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-3', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('buildingType') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700 capitalize', children: building.buildingType })] }), building.yearBuilt && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('yearBuilt') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: building.yearBuilt })] })] })), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('totalUnits') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: building.totalUnits })] })] }), building.totalFloors && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('totalFloors') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: building.totalFloors })] }))] }), (building.parkingSpaces || building.storageSpaces) && ((0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-3', children: [building.parkingSpaces && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('parking') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Car, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: building.parkingSpaces })] })] })), building.storageSpaces && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('storage') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Package, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: building.storageSpaces })] })] }))] })), building.managementCompany && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('managementCompany') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: building.managementCompany })] })), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('occupancy') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm', children: [(0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [building.occupiedUnits, "/", building.totalUnits, " ", t('units')] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: building.occupancyRate >= 90
                                                                            ? 'default'
                                                                            : building.occupancyRate >= 70
                                                                                ? 'secondary'
                                                                                : 'destructive', className: 'text-xs', children: [Math.round(building.occupancyRate), "% ", t('occupied')] })] })] }), building.amenities && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('amenities') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-wrap gap-1 mt-1', children: [(() => {
                                                                        try {
                                                                            const amenities = typeof building.amenities === 'string'
                                                                                ? JSON.parse(building.amenities)
                                                                                : building.amenities;
                                                                            return Array.isArray(amenities)
                                                                                ? amenities.slice(0, 3).map((amenity, index) => ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: amenity }, index)))
                                                                                : null;
                                                                        }
                                                                        catch (_e) {
                                                                            return ((0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-muted-foreground', children: t('unableToDisplayAmenities') }));
                                                                        }
                                                                    })(), (() => {
                                                                        try {
                                                                            const amenities = typeof building.amenities === 'string'
                                                                                ? JSON.parse(building.amenities)
                                                                                : building.amenities;
                                                                            if (Array.isArray(amenities) && amenities.length > 3) {
                                                                                return ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: ["+", amenities.length - 3, " ", t('moreAmenities')] }));
                                                                            }
                                                                        }
                                                                        catch (_e) {
                                                                            // Ignore error
                                                                        }
                                                                        return null;
                                                                    })()] })] }))] }), (0, jsx_runtime_1.jsx)("div", { className: 'pt-4 border-t', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => handleViewDocuments(building.id), variant: 'outline', size: 'sm', className: 'w-full justify-start', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 mr-2' }), t('viewDocumentsButton')] }) })] })] }, building.id))) }), totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-center gap-2 mt-8', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handlePreviousPage, disabled: currentPage === 1, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeft, { className: 'h-4 w-4' }), t('previous')] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex gap-1', children: Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                        let pageNum;
                                        if (totalPages <= 5) {
                                            pageNum = i + 1;
                                        }
                                        else if (currentPage <= 3) {
                                            pageNum = i + 1;
                                        }
                                        else if (currentPage >= totalPages - 2) {
                                            pageNum = totalPages - 4 + i;
                                        }
                                        else {
                                            pageNum = currentPage - 2 + i;
                                        }
                                        return ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: currentPage === pageNum ? 'default' : 'outline', size: 'sm', onClick: () => handlePageClick(pageNum), children: pageNum }, pageNum));
                                    }) }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handleNextPage, disabled: currentPage === totalPages, children: [t('next'), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: 'h-4 w-4' })] })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'text-center text-sm text-muted-foreground mt-4', children: [t('showing'), " ", startIndex + 1, " to ", Math.min(endIndex, buildings.length), " of ", buildings.length, ' ', t('buildings')] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,