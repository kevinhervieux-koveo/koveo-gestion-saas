f96a4458d79d8f7066d3074cc90ca8c8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertFrameworkConfigSchema = exports.insertQualityMetricSchema = exports.insertWorkspaceStatusSchema = exports.insertPillarSchema = exports.insertActionableItemSchema = exports.insertFeatureSchema = exports.insertImprovementSuggestionSchema = exports.frameworkConfiguration = exports.qualityMetrics = exports.workspaceStatus = exports.developmentPillars = exports.actionableItems = exports.features = exports.improvementSuggestions = exports.actionableItemStatusEnum = exports.featureCategoryEnum = exports.featurePriorityEnum = exports.featureStatusEnum = exports.suggestionStatusEnum = exports.suggestionPriorityEnum = exports.suggestionCategoryEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const core_1 = require("./core");
// Development enums
exports.suggestionCategoryEnum = (0, pg_core_1.pgEnum)('suggestion_category', [
    'Code Quality',
    'Security',
    'Testing',
    'Documentation',
    'Performance',
    'Continuous Improvement',
    'Replit AI Agent Monitoring',
    'Replit App',
]);
exports.suggestionPriorityEnum = (0, pg_core_1.pgEnum)('suggestion_priority', [
    'Low',
    'Medium',
    'High',
    'Critical',
]);
exports.suggestionStatusEnum = (0, pg_core_1.pgEnum)('suggestion_status', ['New', 'Acknowledged', 'Done']);
exports.featureStatusEnum = (0, pg_core_1.pgEnum)('feature_status', [
    'submitted',
    'planned',
    'in-progress',
    'ai-analyzed',
    'completed',
    'cancelled',
]);
exports.featurePriorityEnum = (0, pg_core_1.pgEnum)('feature_priority', [
    'low',
    'medium',
    'high',
    'critical',
]);
exports.featureCategoryEnum = (0, pg_core_1.pgEnum)('feature_category', [
    'Dashboard & Home',
    'Property Management',
    'Resident Management',
    'Financial Management',
    'Maintenance & Requests',
    'Document Management',
    'Communication',
    'AI & Automation',
    'Compliance & Security',
    'Analytics & Reporting',
    'Integration & API',
    'Infrastructure & Performance',
    'Website',
]);
exports.actionableItemStatusEnum = (0, pg_core_1.pgEnum)('actionable_item_status', [
    'pending',
    'in-progress',
    'completed',
    'blocked',
]);
// Development tables
/**
 * Improvement suggestions table for the Pillar Methodology framework.
 * Stores AI-generated and manual suggestions for code quality, security, and process improvements.
 */
exports.improvementSuggestions = (0, pg_core_1.pgTable)('improvement_suggestions', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    category: (0, exports.suggestionCategoryEnum)('category').notNull(),
    priority: (0, exports.suggestionPriorityEnum)('priority').notNull(),
    status: (0, exports.suggestionStatusEnum)('status').notNull().default('New'),
    filePath: (0, pg_core_1.text)('file_path'),
    technicalDetails: (0, pg_core_1.text)('technical_details'),
    businessImpact: (0, pg_core_1.text)('business_impact'),
    implementationEffort: (0, pg_core_1.text)('implementation_effort'),
    quebecComplianceRelevance: (0, pg_core_1.text)('quebec_compliance_relevance'),
    suggestedBy: (0, pg_core_1.varchar)('suggested_by').references(() => core_1.users.id),
    assignedTo: (0, pg_core_1.varchar)('assigned_to').references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
    acknowledgedAt: (0, pg_core_1.timestamp)('acknowledged_at'),
    completedAt: (0, pg_core_1.timestamp)('completed_at'),
});
/**
 * Features table for tracking development roadmap items and functionality.
 * Used by the Pillar Methodology framework for feature planning and tracking.
 */
exports.features = (0, pg_core_1.pgTable)('features', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    category: (0, exports.featureCategoryEnum)('category').notNull(),
    status: (0, exports.featureStatusEnum)('status').notNull().default('submitted'),
    priority: (0, exports.featurePriorityEnum)('priority').notNull().default('medium'),
    requestedBy: (0, pg_core_1.text)('requested_by'),
    assignedTo: (0, pg_core_1.text)('assigned_to'),
    estimatedHours: (0, pg_core_1.integer)('estimated_hours'),
    actualHours: (0, pg_core_1.integer)('actual_hours'),
    startDate: (0, pg_core_1.date)('start_date'),
    completedDate: (0, pg_core_1.date)('completed_date'),
    isPublicRoadmap: (0, pg_core_1.boolean)('is_public_roadmap').notNull().default(true),
    tags: (0, pg_core_1.jsonb)('tags'),
    metadata: (0, pg_core_1.jsonb)('metadata'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
    businessObjective: (0, pg_core_1.text)('business_objective'),
    targetUsers: (0, pg_core_1.text)('target_users'),
    successMetrics: (0, pg_core_1.text)('success_metrics'),
    technicalComplexity: (0, pg_core_1.text)('technical_complexity'),
    dependencies: (0, pg_core_1.text)('dependencies'),
    userFlow: (0, pg_core_1.text)('user_flow'),
    aiAnalysisResult: (0, pg_core_1.jsonb)('ai_analysis_result'),
    aiAnalyzedAt: (0, pg_core_1.timestamp)('ai_analyzed_at'),
    isStrategicPath: (0, pg_core_1.boolean)('is_strategic_path').notNull().default(false),
    syncedAt: (0, pg_core_1.timestamp)('synced_at'),
});
/**
 * Actionable items table for tracking specific tasks generated from feature analysis.
 * Links features to concrete development tasks and implementation steps.
 */
exports.actionableItems = (0, pg_core_1.pgTable)('actionable_items', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    featureId: (0, pg_core_1.uuid)('feature_id')
        .notNull()
        .references(() => exports.features.id),
    title: (0, pg_core_1.text)('title').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    type: (0, pg_core_1.text)('type').notNull(), // 'code', 'test', 'documentation', 'design', etc.
    status: (0, exports.actionableItemStatusEnum)('status').notNull().default('pending'),
    estimatedHours: (0, pg_core_1.integer)('estimated_hours'),
    actualHours: (0, pg_core_1.integer)('actual_hours'),
    assignedTo: (0, pg_core_1.varchar)('assigned_to').references(() => core_1.users.id),
    dependencies: (0, pg_core_1.jsonb)('dependencies'), // Array of other actionable item IDs
    acceptanceCriteria: (0, pg_core_1.text)('acceptance_criteria'),
    implementation_notes: (0, pg_core_1.text)('implementation_notes'),
    // AI-generated analysis fields
    technicalDetails: (0, pg_core_1.text)('technical_details'),
    implementationPrompt: (0, pg_core_1.text)('implementation_prompt'),
    testingRequirements: (0, pg_core_1.text)('testing_requirements'),
    estimatedEffort: (0, pg_core_1.text)('estimated_effort'),
    orderIndex: (0, pg_core_1.integer)('order_index').default(0).notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
    startedAt: (0, pg_core_1.timestamp)('started_at'),
    completedAt: (0, pg_core_1.timestamp)('completed_at'),
});
/**
 * Development pillars table for the Pillar Methodology framework.
 * Stores the five core development pillars and their completion status.
 */
exports.developmentPillars = (0, pg_core_1.pgTable)('development_pillars', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description').notNull(),
    status: (0, pg_core_1.text)('status').notNull().default('pending'), // 'pending', 'in-progress', 'complete'
    order: (0, pg_core_1.text)('order').notNull(),
    configuration: (0, pg_core_1.jsonb)('configuration'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
exports.workspaceStatus = (0, pg_core_1.pgTable)('workspace_status', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    component: (0, pg_core_1.text)('component').notNull(),
    status: (0, pg_core_1.text)('status').notNull().default('pending'), // 'pending', 'in-progress', 'complete'
    lastUpdated: (0, pg_core_1.timestamp)('last_updated').defaultNow(),
});
exports.qualityMetrics = (0, pg_core_1.pgTable)('quality_metrics', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    metricType: (0, pg_core_1.text)('metric_type').notNull(),
    _value: (0, pg_core_1.text)('value').notNull(),
    timestamp: (0, pg_core_1.timestamp)('timestamp').defaultNow(),
});
exports.frameworkConfiguration = (0, pg_core_1.pgTable)('framework_configuration', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    _key: (0, pg_core_1.text)('key').notNull().unique(),
    _value: (0, pg_core_1.text)('value').notNull(),
    description: (0, pg_core_1.text)('description'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
// Insert schemas
exports.insertImprovementSuggestionSchema = zod_1.z.object({
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    category: zod_1.z.string(),
    priority: zod_1.z.string().default('medium'),
    status: zod_1.z.string().default('new'),
    filePath: zod_1.z.string().optional(),
    technicalDetails: zod_1.z.string().optional(),
    businessImpact: zod_1.z.string().optional(),
    implementationEffort: zod_1.z.string().optional(),
    quebecComplianceRelevance: zod_1.z.string().optional(),
    suggestedBy: zod_1.z.string().uuid().optional(),
    assignedTo: zod_1.z.string().uuid().optional(),
});
exports.insertFeatureSchema = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    category: zod_1.z.string(),
    status: zod_1.z.string().default('planned'),
    priority: zod_1.z.string().default('medium'),
    requestedBy: zod_1.z.string().uuid().optional(),
    assignedTo: zod_1.z.string().uuid().optional(),
    estimatedHours: zod_1.z.number().optional(),
    businessObjective: zod_1.z.string().optional(),
    targetUsers: zod_1.z.string().optional(),
    successMetrics: zod_1.z.string().optional(),
    technicalComplexity: zod_1.z.string().optional(),
    dependencies: zod_1.z.array(zod_1.z.string()).optional(),
    userFlow: zod_1.z.string().optional(),
});
exports.insertActionableItemSchema = zod_1.z.object({
    featureId: zod_1.z.string().uuid().optional(),
    title: zod_1.z.string(),
    description: zod_1.z.string(),
    type: zod_1.z.string(),
    status: zod_1.z.string().default('pending'),
    estimatedHours: zod_1.z.number().optional(),
    assignedTo: zod_1.z.string().uuid().optional(),
    dependencies: zod_1.z.array(zod_1.z.string()).optional(),
    acceptanceCriteria: zod_1.z.string().optional(),
    implementation_notes: zod_1.z.string().optional(),
});
exports.insertPillarSchema = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.string().optional(),
    status: zod_1.z.string().default('pending'),
    order: zod_1.z.number().int(),
    configuration: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
});
exports.insertWorkspaceStatusSchema = zod_1.z.object({
    component: zod_1.z.string(),
    status: zod_1.z.string().default('pending'),
});
exports.insertQualityMetricSchema = zod_1.z.object({
    metricType: zod_1.z.string(),
    _value: zod_1.z.string(),
});
exports.insertFrameworkConfigSchema = zod_1.z.object({
    _key: zod_1.z.string(),
    _value: zod_1.z.string(),
    description: zod_1.z.string().optional(),
});
// Relations
// Relations - temporarily commented out due to drizzle-orm version compatibility
// export const improvementSuggestionsRelations = relations(improvementSuggestions, ({ one }) => ({
//   suggestedBy: one(users, {
//     fields: [improvementSuggestions.suggestedBy],
//     references: [users.id],
//     relationName: 'suggestedBy',
//   }),
//   assignedTo: one(users, {
//     fields: [improvementSuggestions.assignedTo],
//     references: [users.id],
//     relationName: 'assignedTo',
//   }),
// }));
// export const featuresRelations = relations(features, ({ many }) => ({
//   actionableItems: many(actionableItems),
// }));
// export const actionableItemsRelations = relations(actionableItems, ({ one }) => ({
//   feature: one(features, {
//     fields: [actionableItems.featureId],
//     references: [features.id],
//   }),
// }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,