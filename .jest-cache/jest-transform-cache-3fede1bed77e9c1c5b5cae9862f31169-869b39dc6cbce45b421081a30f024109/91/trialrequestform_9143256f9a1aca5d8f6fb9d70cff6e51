1dccae50f93baa6e5535887bb8b854e3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrialRequestForm = TrialRequestForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const textarea_1 = require("@/components/ui/textarea");
const card_1 = require("@/components/ui/card");
const dialog_1 = require("@/components/ui/dialog");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
/**
 * TrialRequestForm component for requesting trial access.
 */
function TrialRequestForm({ children }) {
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);
    const { toast } = (0, use_toast_1.useToast)();
    const [formData, setFormData] = (0, react_1.useState)({
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        company: '',
        address: '',
        city: '',
        province: 'QC',
        postalCode: '',
        numberOfBuildings: '',
        numberOfResidences: '',
        message: '',
    });
    const [errors, setErrors] = (0, react_1.useState)({});
    const validateForm = () => {
        const newErrors = {};
        if (!formData.firstName.trim()) {
            newErrors.firstName = 'Le prénom est requis';
        }
        if (!formData.lastName.trim()) {
            newErrors.lastName = 'Le nom est requis';
        }
        if (!formData.email.trim()) {
            newErrors.email = "L'adresse courriel est requise";
        }
        else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
            newErrors.email = 'Veuillez entrer une adresse courriel valide';
        }
        if (!formData.phone.trim()) {
            newErrors.phone = 'Le numéro de téléphone est requis';
        }
        if (!formData.company.trim()) {
            newErrors.company = "Le nom de l'entreprise est requis";
        }
        if (!formData.numberOfBuildings.trim()) {
            newErrors.numberOfBuildings = 'Le nombre de bâtiments est requis';
        }
        else if (parseInt(formData.numberOfBuildings) <= 0) {
            newErrors.numberOfBuildings = 'Veuillez entrer un nombre valide';
        }
        if (!formData.numberOfResidences.trim()) {
            newErrors.numberOfResidences = 'Le nombre de résidences est requis';
        }
        else if (parseInt(formData.numberOfResidences) <= 0) {
            newErrors.numberOfResidences = 'Veuillez entrer un nombre valide';
        }
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };
    const handleInputChange = (field, value) => {
        setFormData((prev) => ({ ...prev, [field]: value }));
        if (errors[field]) {
            setErrors((prev) => ({ ...prev, [field]: undefined }));
        }
    };
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validateForm()) {
            return;
        }
        setIsSubmitting(true);
        try {
            const response = await (0, queryClient_1.apiRequest)('POST', '/api/trial-requests', {
                data: formData,
            });
            if (response.ok) {
                toast({
                    title: 'Demande envoyée avec succès',
                    description: 'Nous vous contacterons dans les plus brefs délais.',
                });
                setIsOpen(false);
                setFormData({
                    firstName: '',
                    lastName: '',
                    email: '',
                    phone: '',
                    company: '',
                    address: '',
                    city: '',
                    province: 'QC',
                    postalCode: '',
                    numberOfBuildings: '',
                    numberOfResidences: '',
                    message: '',
                });
                setErrors({});
            }
            else {
                throw new Error('Failed to submit trial request');
            }
        }
        catch (error) {
            console.error('Error submitting trial request:', error);
            toast({
                variant: 'destructive',
                title: 'Erreur lors de l\'envoi',
                description: 'Une erreur est survenue. Veuillez réessayer.',
            });
        }
        finally {
            setIsSubmitting(false);
        }
    };
    const provinces = [
        { value: 'AB', label: 'Alberta' },
        { value: 'BC', label: 'Colombie-Britannique' },
        { value: 'MB', label: 'Manitoba' },
        { value: 'NB', label: 'Nouveau-Brunswick' },
        { value: 'NL', label: 'Terre-Neuve-et-Labrador' },
        { value: 'NS', label: 'Nouvelle-Écosse' },
        { value: 'NT', label: 'Territoires du Nord-Ouest' },
        { value: 'NU', label: 'Nunavut' },
        { value: 'ON', label: 'Ontario' },
        { value: 'PE', label: 'Île-du-Prince-Édouard' },
        { value: 'QC', label: 'Québec' },
        { value: 'SK', label: 'Saskatchewan' },
        { value: 'YT', label: 'Yukon' },
    ];
    return ((0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isOpen, onOpenChange: setIsOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: children }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-4xl max-h-[90vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: "h-5 w-5 text-koveo-navy" }), "Demande d'essai gratuit"] }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: "D\u00E9couvrez Koveo Gestion avec un essai gratuit de 30 jours. Remplissez le formulaire ci-dessous et notre \u00E9quipe vous contactera rapidement." })] }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "text-lg flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: "h-4 w-4" }), "Informations personnelles"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "firstName", children: "Pr\u00E9nom *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "firstName", "data-testid": "input-first-name", value: formData.firstName, onChange: (e) => handleInputChange('firstName', e.target.value), placeholder: "Votre pr\u00E9nom" }), errors.firstName && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", "data-testid": "error-first-name", children: errors.firstName }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "lastName", children: "Nom *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "lastName", "data-testid": "input-last-name", value: formData.lastName, onChange: (e) => handleInputChange('lastName', e.target.value), placeholder: "Votre nom" }), errors.lastName && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", "data-testid": "error-last-name", children: errors.lastName }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "email", children: "Adresse courriel *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "email", type: "email", "data-testid": "input-email", value: formData.email, onChange: (e) => handleInputChange('email', e.target.value), placeholder: "votre@courriel.com" }), errors.email && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", "data-testid": "error-email", children: errors.email }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "phone", children: "T\u00E9l\u00E9phone *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "phone", type: "tel", "data-testid": "input-phone", value: formData.phone, onChange: (e) => handleInputChange('phone', e.target.value), placeholder: "(514) 123-4567" }), errors.phone && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", "data-testid": "error-phone", children: errors.phone }))] })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "text-lg flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: "h-4 w-4" }), "Informations sur l'entreprise"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "company", children: "Nom de l'entreprise *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "company", "data-testid": "input-company", value: formData.company, onChange: (e) => handleInputChange('company', e.target.value), placeholder: "Nom de votre entreprise" }), errors.company && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", "data-testid": "error-company", children: errors.company }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "address", children: "Adresse" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "address", "data-testid": "input-address", value: formData.address, onChange: (e) => handleInputChange('address', e.target.value), placeholder: "123 Rue Principale" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "city", children: "Ville" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "city", "data-testid": "input-city", value: formData.city, onChange: (e) => handleInputChange('city', e.target.value), placeholder: "Montr\u00E9al" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "province", children: "Province" }), (0, jsx_runtime_1.jsx)("select", { id: "province", "data-testid": "select-province", value: formData.province, onChange: (e) => handleInputChange('province', e.target.value), className: "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50", children: provinces.map((prov) => ((0, jsx_runtime_1.jsx)("option", { value: prov.value, children: prov.label }, prov.value))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "postalCode", children: "Code postal" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "postalCode", "data-testid": "input-postal-code", value: formData.postalCode, onChange: (e) => handleInputChange('postalCode', e.target.value), placeholder: "H1A 1A1" })] })] })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "text-lg flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: "h-4 w-4" }), "Informations sur les propri\u00E9t\u00E9s"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "numberOfBuildings", children: "Nombre de b\u00E2timents *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "numberOfBuildings", type: "number", min: "1", "data-testid": "input-buildings-count", value: formData.numberOfBuildings, onChange: (e) => handleInputChange('numberOfBuildings', e.target.value), placeholder: "1" }), errors.numberOfBuildings && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", "data-testid": "error-buildings-count", children: errors.numberOfBuildings }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "numberOfResidences", children: "Nombre total de r\u00E9sidences *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "numberOfResidences", type: "number", min: "1", "data-testid": "input-residences-count", value: formData.numberOfResidences, onChange: (e) => handleInputChange('numberOfResidences', e.target.value), placeholder: "50" }), errors.numberOfResidences && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", "data-testid": "error-residences-count", children: errors.numberOfResidences }))] })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "text-lg flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MessageSquare, { className: "h-4 w-4" }), "Informations suppl\u00E9mentaires"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "message", children: "Message (optionnel)" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "message", "data-testid": "textarea-message", value: formData.message, onChange: (e) => handleInputChange('message', e.target.value), placeholder: "D\u00E9crivez vos besoins sp\u00E9cifiques ou posez-nous vos questions...", rows: 4 })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end gap-4", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: () => setIsOpen(false), "data-testid": "button-cancel", children: "Annuler" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: isSubmitting, "data-testid": "button-submit-trial", className: "bg-koveo-navy hover:bg-koveo-navy/90", children: isSubmitting ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: "mr-2 h-4 w-4 animate-spin" }), "Envoi en cours..."] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Send, { className: "mr-2 h-4 w-4" }), "Envoyer la demande"] })) })] })] })] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,