3c0033af33f1f3955ba2819b73c62181
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
const react_1 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
const use_auth_1 = require("@/hooks/use-auth");
const use_language_1 = require("@/hooks/use-language");
const use_mobile_menu_1 = require("@/hooks/use-mobile-menu");
const tooltip_1 = require("@/components/ui/tooltip");
const buildings_1 = __importDefault(require("@/pages/manager/buildings"));
const budget_1 = __importDefault(require("@/pages/manager/budget"));
const bills_1 = __importDefault(require("@/pages/manager/bills"));
// Mock the API calls
const mockBuildings = [
    {
        id: '1',
        name: 'Test Building',
        address: '123 Test St',
        city: 'Montreal',
        province: 'QC',
        postalCode: 'H1H 1H1',
        buildingType: 'apartment',
        totalUnits: 10,
        organizationId: 'test-org',
        isActive: true,
    }
];
// Mock fetch
const mockFetch = (data) => {
    global.fetch = jest.fn(() => Promise.resolve({
        ok: true,
        json: () => Promise.resolve(data),
    }));
};
const TestWrapper = ({ children }) => {
    const queryClient = new react_query_1.QueryClient({
        defaultOptions: {
            queries: { retry: false, gcTime: 0 },
            mutations: { retry: false },
        },
    });
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: (0, jsx_runtime_1.jsx)(tooltip_1.TooltipProvider, { children: (0, jsx_runtime_1.jsx)(use_language_1.LanguageProvider, { children: (0, jsx_runtime_1.jsx)(use_auth_1.AuthProvider, { children: (0, jsx_runtime_1.jsx)(use_mobile_menu_1.MobileMenuProvider, { children: (0, jsx_runtime_1.jsxs)("div", { className: "h-full flex bg-gray-50 font-inter", children: [(0, jsx_runtime_1.jsx)("div", { className: "hidden md:block", children: (0, jsx_runtime_1.jsx)("div", { "data-testid": "sidebar", className: "w-64 h-full bg-white", children: "Sidebar" }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex flex-col min-w-0", children: children })] }) }) }) }) }) }));
};
(0, globals_1.describe)('Sidebar Layout Consistency Tests', () => {
    (0, globals_1.beforeEach)(() => {
        // Reset mocks
        jest.clearAllMocks();
    });
    (0, globals_1.describe)('Buildings Page Layout', () => {
        (0, globals_1.it)('should maintain sidebar when buildings page renders', async () => {
            mockFetch(mockBuildings);
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(buildings_1.default, {}) }));
            // Wait for component to load
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByTestId('sidebar')).toBeInTheDocument();
            });
            // Check that the buildings page content is rendered
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Buildings')).toBeInTheDocument();
            });
            // Verify sidebar is still present
            (0, globals_1.expect)(react_1.screen.getByTestId('sidebar')).toBeInTheDocument();
        });
        (0, globals_1.it)('should have consistent layout classes with other manager pages', async () => {
            mockFetch(mockBuildings);
            const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(buildings_1.default, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Buildings')).toBeInTheDocument();
            });
            // Check for the main layout container
            const mainContainer = container.querySelector('.flex-1.flex.flex-col.overflow-hidden');
            (0, globals_1.expect)(mainContainer).toBeInTheDocument();
            // Check for the content area
            const contentArea = container.querySelector('.flex-1.overflow-auto');
            (0, globals_1.expect)(contentArea).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Page Layout Comparison', () => {
        (0, globals_1.it)('should have same layout structure as budget page', async () => {
            mockFetch([]);
            const buildingsResult = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(buildings_1.default, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Buildings')).toBeInTheDocument();
            });
            const buildingsContainer = buildingsResult.container.querySelector('.flex-1.flex.flex-col.overflow-hidden');
            (0, globals_1.expect)(buildingsContainer).toBeInTheDocument();
            buildingsResult.unmount();
            // Test budget page
            const budgetResult = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(budget_1.default, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/Budget Dashboard|Tableau de bord budgÃ©taire/)).toBeInTheDocument();
            });
            // Budget page should NOT use min-h-screen (that's the bug we need to fix)
            const budgetFullScreen = budgetResult.container.querySelector('.min-h-screen');
            if (budgetFullScreen) {
                console.log('ðŸš¨ ISSUE FOUND: Budget page uses min-h-screen which breaks the sidebar layout');
            }
        });
        (0, globals_1.it)('should have same layout structure as bills page', async () => {
            mockFetch(mockBuildings);
            const buildingsResult = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(buildings_1.default, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Buildings')).toBeInTheDocument();
            });
            const buildingsContainer = buildingsResult.container.querySelector('.flex-1.flex.flex-col.overflow-hidden');
            (0, globals_1.expect)(buildingsContainer).toBeInTheDocument();
            buildingsResult.unmount();
            // Test bills page
            const billsResult = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(bills_1.default, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Bills Management')).toBeInTheDocument();
            });
            const billsContainer = billsResult.container.querySelector('.flex-1.flex.flex-col.overflow-hidden');
            (0, globals_1.expect)(billsContainer).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Layout Consistency Rules', () => {
        (0, globals_1.it)('should never use min-h-screen in manager pages', async () => {
            mockFetch(mockBuildings);
            const pages = [
                { name: 'Buildings', component: buildings_1.default },
                { name: 'Bills', component: bills_1.default },
                { name: 'Budget', component: budget_1.default },
            ];
            for (const page of pages) {
                const { container, unmount } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(page.component, {}) }));
                // Wait for page to load
                await (0, react_1.waitFor)(() => {
                    const pageContent = container.querySelector('[data-testid], .card, header');
                    (0, globals_1.expect)(pageContent).toBeInTheDocument();
                });
                // Check for problematic min-h-screen class
                const minHeightScreen = container.querySelector('.min-h-screen');
                (0, globals_1.expect)(minHeightScreen).toBeNull();
                // Check for correct layout structure
                const flexContainer = container.querySelector('.flex-1.flex.flex-col.overflow-hidden');
                (0, globals_1.expect)(flexContainer).toBeInTheDocument();
                unmount();
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,