25b806493b7209dbea4662c2c8942f5c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const date_fns_1 = require("date-fns");
/**
 * Enhanced Calendar Features Unit Tests
 * Tests the new opening hours visibility and reservation functionality
 */
(0, globals_1.describe)('Enhanced Calendar Features', () => {
    // Test data structures matching the enhanced schema
    const mockCommonSpace = {
        id: '75c4f108-3ec1-437d-bdec-35d1f8e2a44d',
        name: 'Salle communautaire',
        isReservable: true,
        openingHours: [
            {
                day: 'monday',
                open: '08:00',
                close: '20:00',
                isOpen: true,
                breaks: [
                    { start: '12:00', end: '13:00', reason: 'Cleaning' }
                ]
            },
            {
                day: 'tuesday',
                open: '08:00',
                close: '20:00',
                isOpen: true,
                breaks: []
            },
            {
                day: 'wednesday',
                open: '08:00',
                close: '20:00',
                isOpen: false
            },
            {
                day: 'thursday',
                open: '10:00',
                close: '18:00',
                isOpen: true,
                breaks: []
            },
            {
                day: 'friday',
                open: '08:00',
                close: '22:00',
                isOpen: true,
                breaks: []
            },
            {
                day: 'saturday',
                open: '09:00',
                close: '17:00',
                isOpen: true,
                breaks: []
            }
            // Sunday not defined (closed)
        ],
        unavailablePeriods: [
            {
                startDate: '2025-12-24T00:00:00Z',
                endDate: '2025-12-26T23:59:59Z',
                reason: 'Holiday closure',
                recurrence: 'yearly'
            },
            {
                startDate: '2025-01-15T00:00:00Z',
                endDate: '2025-01-17T23:59:59Z',
                reason: 'Maintenance',
                recurrence: 'none'
            }
        ]
    };
    // Use a future Monday for bookings
    const getFutureMonday = () => {
        const today = new Date();
        const futureMonday = (0, date_fns_1.addDays)(today, 14);
        while (futureMonday.getDay() !== 1) { // 1 = Monday
            futureMonday.setDate(futureMonday.getDate() + 1);
        }
        return futureMonday;
    };
    const futureBookingDate = getFutureMonday();
    const mockBookings = [
        {
            id: 'booking-1',
            startTime: new Date(futureBookingDate.getFullYear(), futureBookingDate.getMonth(), futureBookingDate.getDate(), 14, 0, 0).toISOString(),
            endTime: new Date(futureBookingDate.getFullYear(), futureBookingDate.getMonth(), futureBookingDate.getDate(), 16, 0, 0).toISOString(),
            status: 'confirmed',
            userId: 'user-1'
        },
        {
            id: 'booking-2',
            startTime: new Date(futureBookingDate.getFullYear(), futureBookingDate.getMonth(), futureBookingDate.getDate(), 10, 0, 0).toISOString(),
            endTime: new Date(futureBookingDate.getFullYear(), futureBookingDate.getMonth(), futureBookingDate.getDate(), 11, 30, 0).toISOString(),
            status: 'confirmed',
            userId: 'user-2'
        }
    ];
    (0, globals_1.describe)('Opening Hours Structure Validation', () => {
        (0, globals_1.test)('should validate enhanced opening hours structure', () => {
            const { openingHours } = mockCommonSpace;
            (0, globals_1.expect)(openingHours).toBeDefined();
            (0, globals_1.expect)(Array.isArray(openingHours)).toBe(true);
            // Check Monday entry with breaks
            const mondayHours = openingHours?.find(h => h.day === 'monday');
            (0, globals_1.expect)(mondayHours).toBeDefined();
            (0, globals_1.expect)(mondayHours?.isOpen).toBe(true);
            (0, globals_1.expect)(mondayHours?.open).toBe('08:00');
            (0, globals_1.expect)(mondayHours?.close).toBe('20:00');
            (0, globals_1.expect)(mondayHours?.breaks).toBeDefined();
            (0, globals_1.expect)(Array.isArray(mondayHours?.breaks)).toBe(true);
            (0, globals_1.expect)(mondayHours?.breaks?.length).toBe(1);
            (0, globals_1.expect)(mondayHours?.breaks?.[0].start).toBe('12:00');
            (0, globals_1.expect)(mondayHours?.breaks?.[0].end).toBe('13:00');
            (0, globals_1.expect)(mondayHours?.breaks?.[0].reason).toBe('Cleaning');
            // Check Wednesday (closed day)
            const wednesdayHours = openingHours?.find(h => h.day === 'wednesday');
            (0, globals_1.expect)(wednesdayHours).toBeDefined();
            (0, globals_1.expect)(wednesdayHours?.isOpen).toBe(false);
        });
        (0, globals_1.test)('should validate unavailable periods structure', () => {
            const { unavailablePeriods } = mockCommonSpace;
            (0, globals_1.expect)(unavailablePeriods).toBeDefined();
            (0, globals_1.expect)(Array.isArray(unavailablePeriods)).toBe(true);
            (0, globals_1.expect)(unavailablePeriods?.length).toBe(2);
            // Holiday closure
            const holidayClosure = unavailablePeriods?.[0];
            (0, globals_1.expect)(holidayClosure?.startDate).toBe('2025-12-24T00:00:00Z');
            (0, globals_1.expect)(holidayClosure?.endDate).toBe('2025-12-26T23:59:59Z');
            (0, globals_1.expect)(holidayClosure?.reason).toBe('Holiday closure');
            (0, globals_1.expect)(holidayClosure?.recurrence).toBe('yearly');
            // Maintenance period
            const maintenancePeriod = unavailablePeriods?.[1];
            (0, globals_1.expect)(maintenancePeriod?.startDate).toBe('2025-01-15T00:00:00Z');
            (0, globals_1.expect)(maintenancePeriod?.endDate).toBe('2025-01-17T23:59:59Z');
            (0, globals_1.expect)(maintenancePeriod?.reason).toBe('Maintenance');
            (0, globals_1.expect)(maintenancePeriod?.recurrence).toBe('none');
        });
    });
    (0, globals_1.describe)('Day Availability Logic', () => {
        const isDayAvailable = (checkDate, space = mockCommonSpace) => {
            // Past dates are not available
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const dayToCheck = new Date(checkDate);
            dayToCheck.setHours(0, 0, 0, 0);
            if (dayToCheck < today) {
                return false;
            }
            // Check unavailable periods
            if (space.unavailablePeriods) {
                for (const period of space.unavailablePeriods) {
                    const startDate = new Date(period.startDate);
                    const endDate = new Date(period.endDate);
                    startDate.setHours(0, 0, 0, 0);
                    endDate.setHours(23, 59, 59, 999);
                    if (dayToCheck >= startDate && dayToCheck <= endDate) {
                        return false;
                    }
                }
            }
            // Check opening hours
            if (space.openingHours) {
                const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
                const dayHours = space.openingHours.find(h => h.day.toLowerCase() === dayName);
                if (!dayHours || dayHours.isOpen === false) {
                    return false;
                }
            }
            return true;
        };
        (0, globals_1.test)('should correctly identify available days', () => {
            const today = new Date();
            const tomorrow = (0, date_fns_1.addDays)(today, 1);
            // Use a more future date to avoid any edge cases
            const futureMonday = (0, date_fns_1.addDays)(today, 14); // Two weeks from today, ensure it's Monday
            while (futureMonday.getDay() !== 1) { // 1 = Monday
                futureMonday.setDate(futureMonday.getDate() + 1);
            }
            (0, globals_1.expect)(isDayAvailable(tomorrow)).toBe(true);
            (0, globals_1.expect)(isDayAvailable(futureMonday)).toBe(true);
        });
        (0, globals_1.test)('should correctly identify past dates as unavailable', () => {
            const yesterday = (0, date_fns_1.addDays)(new Date(), -1);
            (0, globals_1.expect)(isDayAvailable(yesterday)).toBe(false);
        });
        (0, globals_1.test)('should correctly identify closed days as unavailable', () => {
            const today = new Date();
            // Find next Wednesday (closed day)
            const futureWednesday = (0, date_fns_1.addDays)(today, 7);
            while (futureWednesday.getDay() !== 3) { // 3 = Wednesday
                futureWednesday.setDate(futureWednesday.getDate() + 1);
            }
            // Find next Sunday (no hours defined)  
            const futureSunday = (0, date_fns_1.addDays)(today, 7);
            while (futureSunday.getDay() !== 0) { // 0 = Sunday
                futureSunday.setDate(futureSunday.getDate() + 1);
            }
            (0, globals_1.expect)(isDayAvailable(futureWednesday)).toBe(false);
            (0, globals_1.expect)(isDayAvailable(futureSunday)).toBe(false);
        });
        (0, globals_1.test)('should correctly identify unavailable periods', () => {
            const christmasEve = new Date('2025-12-24');
            const christmasDay = new Date('2025-12-25');
            const boxingDay = new Date('2025-12-26');
            const maintenanceDay = new Date('2025-01-16');
            (0, globals_1.expect)(isDayAvailable(christmasEve)).toBe(false);
            (0, globals_1.expect)(isDayAvailable(christmasDay)).toBe(false);
            (0, globals_1.expect)(isDayAvailable(boxingDay)).toBe(false);
            (0, globals_1.expect)(isDayAvailable(maintenanceDay)).toBe(false);
        });
    });
    (0, globals_1.describe)('Time Slot Availability Logic', () => {
        const isTimeSlotAvailable = (date, time, duration = 60) => {
            // Check if day is available
            if (!isDayAvailable(date)) {
                return false;
            }
            const [hour, minute] = time.split(':').map(Number);
            const slotStart = new Date(date);
            slotStart.setHours(hour, minute, 0, 0);
            const slotEnd = new Date(slotStart);
            slotEnd.setMinutes(slotEnd.getMinutes() + duration);
            // Check opening hours
            const dayName = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            const dayHours = mockCommonSpace.openingHours?.find(h => h.day.toLowerCase() === dayName);
            if (!dayHours || dayHours.isOpen === false) {
                return false;
            }
            // Parse opening hours
            const openTime = new Date(date);
            const [openHour, openMinute] = dayHours.open.split(':').map(Number);
            openTime.setHours(openHour, openMinute, 0, 0);
            const closeTime = new Date(date);
            const [closeHour, closeMinute] = dayHours.close.split(':').map(Number);
            closeTime.setHours(closeHour, closeMinute, 0, 0);
            // Check if slot is within opening hours
            if (slotStart < openTime || slotEnd > closeTime) {
                return false;
            }
            // Check breaks
            if (dayHours.breaks) {
                for (const breakPeriod of dayHours.breaks) {
                    const breakStart = new Date(date);
                    const [breakStartHour, breakStartMinute] = breakPeriod.start.split(':').map(Number);
                    breakStart.setHours(breakStartHour, breakStartMinute, 0, 0);
                    const breakEnd = new Date(date);
                    const [breakEndHour, breakEndMinute] = breakPeriod.end.split(':').map(Number);
                    breakEnd.setHours(breakEndHour, breakEndMinute, 0, 0);
                    // Check if slot overlaps with break
                    if ((slotStart >= breakStart && slotStart < breakEnd) ||
                        (slotEnd > breakStart && slotEnd <= breakEnd) ||
                        (slotStart <= breakStart && slotEnd >= breakEnd)) {
                        return false;
                    }
                }
            }
            // Check conflicts with existing bookings
            const dayBookings = mockBookings.filter(booking => {
                const bookingDate = new Date(booking.startTime);
                return bookingDate.toDateString() === date.toDateString() && booking.status === 'confirmed';
            });
            return !dayBookings.some(booking => {
                const bookingStart = new Date(booking.startTime);
                const bookingEnd = new Date(booking.endTime);
                return ((slotStart >= bookingStart && slotStart < bookingEnd) ||
                    (slotEnd > bookingStart && slotEnd <= bookingEnd) ||
                    (slotStart <= bookingStart && slotEnd >= bookingEnd));
            });
        };
        const isDayAvailable = (checkDate) => {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const dayToCheck = new Date(checkDate);
            dayToCheck.setHours(0, 0, 0, 0);
            if (dayToCheck < today) {
                return false;
            }
            if (mockCommonSpace.unavailablePeriods) {
                for (const period of mockCommonSpace.unavailablePeriods) {
                    const startDate = new Date(period.startDate);
                    const endDate = new Date(period.endDate);
                    startDate.setHours(0, 0, 0, 0);
                    endDate.setHours(23, 59, 59, 999);
                    if (dayToCheck >= startDate && dayToCheck <= endDate) {
                        return false;
                    }
                }
            }
            if (mockCommonSpace.openingHours) {
                const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
                const dayHours = mockCommonSpace.openingHours.find(h => h.day.toLowerCase() === dayName);
                if (!dayHours || dayHours.isOpen === false) {
                    return false;
                }
            }
            return true;
        };
        (0, globals_1.test)('should allow available time slots within opening hours', () => {
            const today = new Date();
            const futureMonday = (0, date_fns_1.addDays)(today, 14);
            while (futureMonday.getDay() !== 1) { // 1 = Monday
                futureMonday.setDate(futureMonday.getDate() + 1);
            }
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '08:00')).toBe(true); // Opening time
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '09:00')).toBe(true); // Within hours
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '19:00')).toBe(true); // Before closing
        });
        (0, globals_1.test)('should reject time slots outside opening hours', () => {
            const today = new Date();
            const futureMonday = (0, date_fns_1.addDays)(today, 14);
            while (futureMonday.getDay() !== 1) { // 1 = Monday
                futureMonday.setDate(futureMonday.getDate() + 1);
            }
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '07:00')).toBe(false); // Before opening
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '20:00')).toBe(false); // At closing time (would end after)
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '21:00')).toBe(false); // After closing
        });
        (0, globals_1.test)('should reject time slots during breaks', () => {
            const today = new Date();
            const futureMonday = (0, date_fns_1.addDays)(today, 14);
            while (futureMonday.getDay() !== 1) { // 1 = Monday
                futureMonday.setDate(futureMonday.getDate() + 1);
            }
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '12:00')).toBe(false); // During break
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '12:30')).toBe(false); // During break
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '11:30')).toBe(false); // Would extend into break
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '13:00')).toBe(true); // After break
        });
        (0, globals_1.test)('should reject time slots that conflict with existing bookings', () => {
            const bookingDate = new Date(futureBookingDate); // Use the same future Monday
            // Booking exists 14:00-16:00
            (0, globals_1.expect)(isTimeSlotAvailable(bookingDate, '14:00')).toBe(false);
            (0, globals_1.expect)(isTimeSlotAvailable(bookingDate, '15:00')).toBe(false);
            (0, globals_1.expect)(isTimeSlotAvailable(bookingDate, '13:30')).toBe(false); // Would extend into booking
            // Booking ends at 16:00, so 16:30 should be available (after booking)
            (0, globals_1.expect)(isTimeSlotAvailable(bookingDate, '16:30')).toBe(true); // After booking
            // Booking exists 10:00-11:30
            (0, globals_1.expect)(isTimeSlotAvailable(bookingDate, '10:00')).toBe(false);
            (0, globals_1.expect)(isTimeSlotAvailable(bookingDate, '11:00')).toBe(false);
            (0, globals_1.expect)(isTimeSlotAvailable(bookingDate, '11:30')).toBe(true); // After booking
        });
    });
    (0, globals_1.describe)('Visual Indicators Logic', () => {
        (0, globals_1.test)('should correctly identify booked time slots', () => {
            const bookingDate = new Date('2025-01-20');
            const bookingTimes = ['14:00', '14:30', '15:00', '15:30'];
            bookingTimes.forEach(time => {
                const hasBooking = mockBookings.some(booking => {
                    const bookingStart = new Date(booking.startTime);
                    const bookingEnd = new Date(booking.endTime);
                    const timeSlot = new Date(bookingDate);
                    const [hour, minute] = time.split(':').map(Number);
                    timeSlot.setHours(hour, minute, 0, 0);
                    return timeSlot >= bookingStart && timeSlot < bookingEnd;
                });
                (0, globals_1.expect)(hasBooking).toBe(true);
            });
        });
        (0, globals_1.test)('should correctly identify available time slots', () => {
            const bookingDate = new Date('2025-01-20');
            const availableTimes = ['08:00', '09:00', '12:00', '17:00'];
            availableTimes.forEach(time => {
                const hasBooking = mockBookings.some(booking => {
                    const bookingStart = new Date(booking.startTime);
                    const bookingEnd = new Date(booking.endTime);
                    const timeSlot = new Date(bookingDate);
                    const [hour, minute] = time.split(':').map(Number);
                    timeSlot.setHours(hour, minute, 0, 0);
                    return timeSlot >= bookingStart && timeSlot < bookingEnd;
                });
                (0, globals_1.expect)(hasBooking).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Calendar Display Logic', () => {
        (0, globals_1.test)('should provide correct CSS classes for different day states', () => {
            const getDateClass = (date) => {
                const today = new Date();
                const isCurrentDay = date.toDateString() === today.toDateString();
                const isAvailable = isDayAvailable(date);
                if (!isAvailable) {
                    return 'bg-red-100 text-red-600 cursor-not-allowed border border-red-200';
                }
                else if (isCurrentDay) {
                    return 'bg-blue-100 text-blue-900 hover:bg-blue-200';
                }
                else {
                    return 'hover:bg-gray-100';
                }
            };
            const today = new Date();
            const futureWednesday = new Date('2025-06-04'); // Closed day
            const futureMonday = (0, date_fns_1.addDays)(new Date(), 21); // Use a date in the future
            while (futureMonday.getDay() !== 1) { // 1 = Monday
                futureMonday.setDate(futureMonday.getDate() + 1);
            }
            (0, globals_1.expect)(getDateClass(today)).toContain('bg-blue-100'); // Today
            (0, globals_1.expect)(getDateClass(futureWednesday)).toContain('bg-red-100'); // Unavailable
            (0, globals_1.expect)(getDateClass(futureMonday)).toBe('hover:bg-gray-100'); // Available
        });
        const isDayAvailable = (checkDate) => {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const dayToCheck = new Date(checkDate);
            dayToCheck.setHours(0, 0, 0, 0);
            if (dayToCheck < today) {
                return false;
            }
            if (mockCommonSpace.unavailablePeriods) {
                for (const period of mockCommonSpace.unavailablePeriods) {
                    const startDate = new Date(period.startDate);
                    const endDate = new Date(period.endDate);
                    startDate.setHours(0, 0, 0, 0);
                    endDate.setHours(23, 59, 59, 999);
                    if (dayToCheck >= startDate && dayToCheck <= endDate) {
                        return false;
                    }
                }
            }
            if (mockCommonSpace.openingHours) {
                const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
                const dayHours = mockCommonSpace.openingHours.find(h => h.day.toLowerCase() === dayName);
                if (!dayHours || dayHours.isOpen === false) {
                    return false;
                }
            }
            return true;
        };
        (0, globals_1.test)('should show correct legend items', () => {
            const legendItems = [
                { color: 'bg-blue-600', label: 'Selected' },
                { color: 'bg-orange-500', label: 'Booked' },
                { color: 'bg-red-500', label: 'Unavailable' },
                { color: 'bg-blue-200', label: 'Today' }
            ];
            (0, globals_1.expect)(legendItems).toHaveLength(4);
            (0, globals_1.expect)(legendItems.find(item => item.label === 'Unavailable')).toBeDefined();
        });
    });
    (0, globals_1.describe)('Integration Testing', () => {
        (0, globals_1.test)('should handle complete booking flow validation', () => {
            const testDate = new Date('2025-06-02'); // Monday
            const testTime = '15:00';
            // Step 1: Check if day is available - use future date to ensure it's available
            const futureTestDate = (0, date_fns_1.addDays)(new Date(), 14);
            while (futureTestDate.getDay() !== 1) { // 1 = Monday
                futureTestDate.setDate(futureTestDate.getDate() + 1);
            }
            const dayAvailable = isDayAvailable(futureTestDate);
            (0, globals_1.expect)(dayAvailable).toBe(true);
            // Step 2: Check if time slot is available
            const timeAvailable = isTimeSlotAvailable(futureTestDate, testTime);
            (0, globals_1.expect)(timeAvailable).toBe(true);
            // Step 3: Validate booking constraints
            const [hour, minute] = testTime.split(':').map(Number);
            (0, globals_1.expect)(hour).toBeGreaterThanOrEqual(8); // After opening
            (0, globals_1.expect)(hour).toBeLessThan(20); // Before closing
        });
        const isDayAvailable = (checkDate) => {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const dayToCheck = new Date(checkDate);
            dayToCheck.setHours(0, 0, 0, 0);
            if (dayToCheck < today) {
                return false;
            }
            if (mockCommonSpace.unavailablePeriods) {
                for (const period of mockCommonSpace.unavailablePeriods) {
                    const startDate = new Date(period.startDate);
                    const endDate = new Date(period.endDate);
                    startDate.setHours(0, 0, 0, 0);
                    endDate.setHours(23, 59, 59, 999);
                    if (dayToCheck >= startDate && dayToCheck <= endDate) {
                        return false;
                    }
                }
            }
            if (mockCommonSpace.openingHours) {
                const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
                const dayHours = mockCommonSpace.openingHours.find(h => h.day.toLowerCase() === dayName);
                if (!dayHours || dayHours.isOpen === false) {
                    return false;
                }
            }
            return true;
        };
        const isTimeSlotAvailable = (date, time) => {
            if (!isDayAvailable(date)) {
                return false;
            }
            const [hour, minute] = time.split(':').map(Number);
            const slotStart = new Date(date);
            slotStart.setHours(hour, minute, 0, 0);
            const slotEnd = new Date(slotStart);
            slotEnd.setMinutes(slotEnd.getMinutes() + 60);
            const dayName = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            const dayHours = mockCommonSpace.openingHours?.find(h => h.day.toLowerCase() === dayName);
            if (!dayHours || dayHours.isOpen === false) {
                return false;
            }
            const openTime = new Date(date);
            const [openHour, openMinute] = dayHours.open.split(':').map(Number);
            openTime.setHours(openHour, openMinute, 0, 0);
            const closeTime = new Date(date);
            const [closeHour, closeMinute] = dayHours.close.split(':').map(Number);
            closeTime.setHours(closeHour, closeMinute, 0, 0);
            if (slotStart < openTime || slotEnd > closeTime) {
                return false;
            }
            if (dayHours.breaks) {
                for (const breakPeriod of dayHours.breaks) {
                    const breakStart = new Date(date);
                    const [breakStartHour, breakStartMinute] = breakPeriod.start.split(':').map(Number);
                    breakStart.setHours(breakStartHour, breakStartMinute, 0, 0);
                    const breakEnd = new Date(date);
                    const [breakEndHour, breakEndMinute] = breakPeriod.end.split(':').map(Number);
                    breakEnd.setHours(breakEndHour, breakEndMinute, 0, 0);
                    if ((slotStart >= breakStart && slotStart < breakEnd) ||
                        (slotEnd > breakStart && slotEnd <= breakEnd) ||
                        (slotStart <= breakStart && slotEnd >= breakEnd)) {
                        return false;
                    }
                }
            }
            return true;
        };
        (0, globals_1.test)('should handle edge cases correctly', () => {
            // Test exactly at opening/closing times
            const thursday = new Date('2025-06-05'); // Thursday 10:00-18:00
            // Thursday 10:00-18:00, let's use a future Thursday to avoid date issues
            const futureThursday = (0, date_fns_1.addDays)(new Date(), 14);
            while (futureThursday.getDay() !== 4) { // 4 = Thursday
                futureThursday.setDate(futureThursday.getDate() + 1);
            }
            (0, globals_1.expect)(isTimeSlotAvailable(futureThursday, '10:00')).toBe(true); // Opening time
            (0, globals_1.expect)(isTimeSlotAvailable(futureThursday, '17:00')).toBe(true); // Last valid slot
            (0, globals_1.expect)(isTimeSlotAvailable(futureThursday, '18:00')).toBe(false); // Would end after closing
            // Test break boundaries - use future Monday
            const futureMonday = (0, date_fns_1.addDays)(new Date(), 14);
            while (futureMonday.getDay() !== 1) { // 1 = Monday
                futureMonday.setDate(futureMonday.getDate() + 1);
            }
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '11:00')).toBe(true); // Before break
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '11:30')).toBe(false); // Would extend into break
            (0, globals_1.expect)(isTimeSlotAvailable(futureMonday, '13:00')).toBe(true); // After break
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2NhbGVuZGFyL2VuaGFuY2VkLWNhbGVuZGFyLWZlYXR1cmVzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBbUU7QUFDbkUsdUNBQTJDO0FBRTNDOzs7R0FHRztBQUVILElBQUEsa0JBQVEsRUFBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7SUFDMUMsb0RBQW9EO0lBQ3BELE1BQU0sZUFBZSxHQUFHO1FBQ3RCLEVBQUUsRUFBRSxzQ0FBc0M7UUFDMUMsSUFBSSxFQUFFLHFCQUFxQjtRQUMzQixZQUFZLEVBQUUsSUFBSTtRQUNsQixZQUFZLEVBQUU7WUFDWjtnQkFDRSxHQUFHLEVBQUUsUUFBUTtnQkFDYixJQUFJLEVBQUUsT0FBTztnQkFDYixLQUFLLEVBQUUsT0FBTztnQkFDZCxNQUFNLEVBQUUsSUFBSTtnQkFDWixNQUFNLEVBQUU7b0JBQ04sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRTtpQkFDckQ7YUFDRjtZQUNEO2dCQUNFLEdBQUcsRUFBRSxTQUFTO2dCQUNkLElBQUksRUFBRSxPQUFPO2dCQUNiLEtBQUssRUFBRSxPQUFPO2dCQUNkLE1BQU0sRUFBRSxJQUFJO2dCQUNaLE1BQU0sRUFBRSxFQUFFO2FBQ1g7WUFDRDtnQkFDRSxHQUFHLEVBQUUsV0FBVztnQkFDaEIsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsS0FBSyxFQUFFLE9BQU87Z0JBQ2QsTUFBTSxFQUFFLEtBQUs7YUFDZDtZQUNEO2dCQUNFLEdBQUcsRUFBRSxVQUFVO2dCQUNmLElBQUksRUFBRSxPQUFPO2dCQUNiLEtBQUssRUFBRSxPQUFPO2dCQUNkLE1BQU0sRUFBRSxJQUFJO2dCQUNaLE1BQU0sRUFBRSxFQUFFO2FBQ1g7WUFDRDtnQkFDRSxHQUFHLEVBQUUsUUFBUTtnQkFDYixJQUFJLEVBQUUsT0FBTztnQkFDYixLQUFLLEVBQUUsT0FBTztnQkFDZCxNQUFNLEVBQUUsSUFB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dW5uZXIvd29ya3NwYWNlL3Rlc3RzL3VuaXQvY2FsZW5kYXIvZW5oYW5jZWQtY2FsZW5kYXItZmVhdHVyZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZSwgdGVzdCwgZXhwZWN0LCBiZWZvcmVFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBhZGREYXlzLCBmb3JtYXQgfSBmcm9tICdkYXRlLWZucyc7XG5cbi8qKlxuICogRW5oYW5jZWQgQ2FsZW5kYXIgRmVhdHVyZXMgVW5pdCBUZXN0c1xuICogVGVzdHMgdGhlIG5ldyBvcGVuaW5nIGhvdXJzIHZpc2liaWxpdHkgYW5kIHJlc2VydmF0aW9uIGZ1bmN0aW9uYWxpdHlcbiAqL1xuXG5kZXNjcmliZSgnRW5oYW5jZWQgQ2FsZW5kYXIgRmVhdHVyZXMnLCAoKSA9PiB7XG4gIC8vIFRlc3QgZGF0YSBzdHJ1Y3R1cmVzIG1hdGNoaW5nIHRoZSBlbmhhbmNlZCBzY2hlbWFcbiAgY29uc3QgbW9ja0NvbW1vblNwYWNlID0ge1xuICAgIGlkOiAnNzVjNGYxMDgtM2VjMS00MzdkLWJkZWMtMzVkMWY4ZTJhNDRkJyxcbiAgICBuYW1lOiAnU2FsbGUgY29tbXVuYXV0YWlyZScsXG4gICAgaXNSZXNlcnZhYmxlOiB0cnVlLFxuICAgIG9wZW5pbmdIb3VyczogW1xuICAgICAge1xuICAgICAgICBkYXk6ICdtb25kYXknLFxuICAgICAgICBvcGVuOiAnMDg6MDAnLFxuICAgICAgICBjbG9zZTogJzIwOjAwJyxcbiAgICAgICAgaXNPcGVuOiB0cnVlLFxuICAgICAgICBicmVha3M6IFtcbiAgICAgICAgICB7IHN0YXJ0OiAnMTI6MDAnLCBlbmQ6ICcxMzowMCcsIHJlYXNvbjogJ0NsZWFuaW5nJyB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGRheTogJ3R1ZXNkYXknLFxuICAgICAgICBvcGVuOiAnMDg6MDAnLFxuICAgICAgICBjbG9zZTogJzIwOjAwJyxcbiAgICAgICAgaXNPcGVuOiB0cnVlLFxuICAgICAgICBicmVha3M6IFtdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkYXk6ICd3ZWRuZXNkYXknLFxuICAgICAgICBvcGVuOiAnMDg6MDAnLFxuICAgICAgICBjbG9zZTogJzIwOjAwJyxcbiAgICAgICAgaXNPcGVuOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZGF5OiAndGh1cnNkYXknLFxuICAgICAgICBvcGVuOiAnMTA6MDAnLFxuICAgICAgICBjbG9zZTogJzE4OjAwJyxcbiAgICAgICAgaXNPcGVuOiB0cnVlLFxuICAgICAgICBicmVha3M6IFtdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkYXk6ICdmcmlkYXknLFxuICAgICAgICBvcGVuOiAnMDg6MDAnLFxuICAgICAgICBjbG9zZTogJzIyOjAwJyxcbiAgICAgICAgaXNPcGVuOiB0cnVlLFxuICAgICAgICBicmVha3M6IFtdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBkYXk6ICdzYXR1cmRheScsXG4gICAgICAgIG9wZW46ICcwOTowMCcsXG4gICAgICAgIGNsb3NlOiAnMTc6MDAnLFxuICAgICAgICBpc09wZW46IHRydWUsXG4gICAgICAgIGJyZWFrczogW11cbiAgICAgIH1cbiAgICAgIC8vIFN1bmRheSBub3QgZGVmaW5lZCAoY2xvc2VkKVxuICAgIF0sXG4gICAgdW5hdmFpbGFibGVQZXJpb2RzOiBbXG4gICAgICB7XG4gICAgICAgIHN0YXJ0RGF0ZTogJzIwMjUtMTItMjRUMDA6MDA6MDBaJyxcbiAgICAgICAgZW5kRGF0ZTogJzIwMjUtMTItMjZUMjM6NTk6NTlaJyxcbiAgICAgICAgcmVhc29uOiAnSG9saWRheSBjbG9zdXJlJyxcbiAgICAgICAgcmVjdXJyZW5jZTogJ3llYXJseSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHN0YXJ0RGF0ZTogJzIwMjUtMDEtMTVUMDA6MDA6MDBaJyxcbiAgICAgICAgZW5kRGF0ZTogJzIwMjUtMDEtMTdUMjM6NTk6NTlaJyxcbiAgICAgICAgcmVhc29uOiAnTWFpbnRlbmFuY2UnLFxuICAgICAgICByZWN1cnJlbmNlOiAnbm9uZSdcbiAgICAgIH1cbiAgICBdXG4gIH07XG5cbiAgLy8gVXNlIGEgZnV0dXJlIE1vbmRheSBmb3IgYm9va2luZ3NcbiAgY29uc3QgZ2V0RnV0dXJlTW9uZGF5ID0gKCkgPT4ge1xuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBmdXR1cmVNb25kYXkgPSBhZGREYXlzKHRvZGF5LCAxNCk7XG4gICAgd2hpbGUgKGZ1dHVyZU1vbmRheS5nZXREYXkoKSAhPT0gMSkgeyAvLyAxID0gTW9uZGF5XG4gICAgICBmdXR1cmVNb25kYXkuc2V0RGF0ZShmdXR1cmVNb25kYXkuZ2V0RGF0ZSgpICsgMSk7XG4gICAgfVxuICAgIHJldHVybiBmdXR1cmVNb25kYXk7XG4gIH07XG5cbiAgY29uc3QgZnV0dXJlQm9va2luZ0RhdGUgPSBnZXRGdXR1cmVNb25kYXkoKTtcbiAgY29uc3QgbW9ja0Jvb2tpbmdzID0gW1xuICAgIHtcbiAgICAgIGlkOiAnYm9va2luZy0xJyxcbiAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoZnV0dXJlQm9va2luZ0RhdGUuZ2V0RnVsbFllYXIoKSwgZnV0dXJlQm9va2luZ0RhdGUuZ2V0TW9udGgoKSwgZnV0dXJlQm9va2luZ0RhdGUuZ2V0RGF0ZSgpLCAxNCwgMCwgMCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGVuZFRpbWU6IG5ldyBEYXRlKGZ1dHVyZUJvb2tpbmdEYXRlLmdldEZ1bGxZZWFyKCksIGZ1dHVyZUJvb2tpbmdEYXRlLmdldE1vbnRoKCksIGZ1dHVyZUJvb2tpbmdEYXRlLmdldERhdGUoKSwgMTYsIDAsIDApLnRvSVNPU3RyaW5nKCksXG4gICAgICBzdGF0dXM6ICdjb25maXJtZWQnIGFzIGNvbnN0LFxuICAgICAgdXNlcklkOiAndXNlci0xJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICdib29raW5nLTInLFxuICAgICAgc3RhcnRUaW1lOiBuZXcgRGF0ZShmdXR1cmVCb29raW5nRGF0ZS5nZXRGdWxsWWVhcigpLCBmdXR1cmVCb29raW5nRGF0ZS5nZXRNb250aCgpLCBmdXR1cmVCb29raW5nRGF0ZS5nZXREYXRlKCksIDEwLCAwLCAwKS50b0lTT1N0cmluZygpLFxuICAgICAgZW5kVGltZTogbmV3IERhdGUoZnV0dXJlQm9va2luZ0RhdGUuZ2V0RnVsbFllYXIoKSwgZnV0dXJlQm9va2luZ0RhdGUuZ2V0TW9udGgoKSwgZnV0dXJlQm9va2luZ0RhdGUuZ2V0RGF0ZSgpLCAxMSwgMzAsIDApLnRvSVNPU3RyaW5nKCksXG4gICAgICBzdGF0dXM6ICdjb25maXJtZWQnIGFzIGNvbnN0LFxuICAgICAgdXNlcklkOiAndXNlci0yJ1xuICAgIH1cbiAgXTtcblxuICBkZXNjcmliZSgnT3BlbmluZyBIb3VycyBTdHJ1Y3R1cmUgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgZW5oYW5jZWQgb3BlbmluZyBob3VycyBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IG9wZW5pbmdIb3VycyB9ID0gbW9ja0NvbW1vblNwYWNlO1xuICAgICAgXG4gICAgICBleHBlY3Qob3BlbmluZ0hvdXJzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkob3BlbmluZ0hvdXJzKSkudG9CZSh0cnVlKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgTW9uZGF5IGVudHJ5IHdpdGggYnJlYWtzXG4gICAgICBjb25zdCBtb25kYXlIb3VycyA9IG9wZW5pbmdIb3Vycz8uZmluZChoID0+IGguZGF5ID09PSAnbW9uZGF5Jyk7XG4gICAgICBleHBlY3QobW9uZGF5SG91cnMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QobW9uZGF5SG91cnM/LmlzT3BlbikudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChtb25kYXlIb3Vycz8ub3BlbikudG9CZSgnMDg6MDAnKTtcbiAgICAgIGV4cGVjdChtb25kYXlIb3Vycz8uY2xvc2UpLnRvQmUoJzIwOjAwJyk7XG4gICAgICBleHBlY3QobW9uZGF5SG91cnM/LmJyZWFrcykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG1vbmRheUhvdXJzPy5icmVha3MpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KG1vbmRheUhvdXJzPy5icmVha3M/Lmxlbmd0aCkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChtb25kYXlIb3Vycz8uYnJlYWtzPy5bMF0uc3RhcnQpLnRvQmUoJzEyOjAwJyk7XG4gICAgICBleHBlY3QobW9uZGF5SG91cnM/LmJyZWFrcz8uWzBdLmVuZCkudG9CZSgnMTM6MDAnKTtcbiAgICAgIGV4cGVjdChtb25kYXlIb3Vycz8uYnJlYWtzPy5bMF0ucmVhc29uKS50b0JlKCdDbGVhbmluZycpO1xuXG4gICAgICAvLyBDaGVjayBXZWRuZXNkYXkgKGNsb3NlZCBkYXkpXG4gICAgICBjb25zdCB3ZWRuZXNkYXlIb3VycyA9IG9wZW5pbmdIb3Vycz8uZmluZChoID0+IGguZGF5ID09PSAnd2VkbmVzZGF5Jyk7XG4gICAgICBleHBlY3Qod2VkbmVzZGF5SG91cnMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3Qod2VkbmVzZGF5SG91cnM/LmlzT3BlbikudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgdW5hdmFpbGFibGUgcGVyaW9kcyBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHVuYXZhaWxhYmxlUGVyaW9kcyB9ID0gbW9ja0NvbW1vblNwYWNlO1xuICAgICAgXG4gICAgICBleHBlY3QodW5hdmFpbGFibGVQZXJpb2RzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkodW5hdmFpbGFibGVQZXJpb2RzKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh1bmF2YWlsYWJsZVBlcmlvZHM/Lmxlbmd0aCkudG9CZSgyKTtcblxuICAgICAgLy8gSG9saWRheSBjbG9zdXJlXG4gICAgICBjb25zdCBob2xpZGF5Q2xvc3VyZSA9IHVuYXZhaWxhYmxlUGVyaW9kcz8uWzBdO1xuICAgICAgZXhwZWN0KGhvbGlkYXlDbG9zdXJlPy5zdGFydERhdGUpLnRvQmUoJzIwMjUtMTItMjRUMDA6MDA6MDBaJyk7XG4gICAgICBleHBlY3QoaG9saWRheUNsb3N1cmU/LmVuZERhdGUpLnRvQmUoJzIwMjUtMTItMjZUMjM6NTk6NTlaJyk7XG4gICAgICBleHBlY3QoaG9saWRheUNsb3N1cmU/LnJlYXNvbikudG9CZSgnSG9saWRheSBjbG9zdXJlJyk7XG4gICAgICBleHBlY3QoaG9saWRheUNsb3N1cmU/LnJlY3VycmVuY2UpLnRvQmUoJ3llYXJseScpO1xuXG4gICAgICAvLyBNYWludGVuYW5jZSBwZXJpb2RcbiAgICAgIGNvbnN0IG1haW50ZW5hbmNlUGVyaW9kID0gdW5hdmFpbGFibGVQZXJpb2RzPy5bMV07XG4gICAgICBleHBlY3QobWFpbnRlbmFuY2VQZXJpb2Q/LnN0YXJ0RGF0ZSkudG9CZSgnMjAyNS0wMS0xNVQwMDowMDowMFonKTtcbiAgICAgIGV4cGVjdChtYWludGVuYW5jZVBlcmlvZD8uZW5kRGF0ZSkudG9CZSgnMjAyNS0wMS0xN1QyMzo1OTo1OVonKTtcbiAgICAgIGV4cGVjdChtYWludGVuYW5jZVBlcmlvZD8ucmVhc29uKS50b0JlKCdNYWludGVuYW5jZScpO1xuICAgICAgZXhwZWN0KG1haW50ZW5hbmNlUGVyaW9kPy5yZWN1cnJlbmNlKS50b0JlKCdub25lJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEYXkgQXZhaWxhYmlsaXR5IExvZ2ljJywgKCkgPT4ge1xuICAgIGNvbnN0IGlzRGF5QXZhaWxhYmxlID0gKGNoZWNrRGF0ZTogRGF0ZSwgc3BhY2UgPSBtb2NrQ29tbW9uU3BhY2UpOiBib29sZWFuID0+IHtcbiAgICAgIC8vIFBhc3QgZGF0ZXMgYXJlIG5vdCBhdmFpbGFibGVcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIHRvZGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgY29uc3QgZGF5VG9DaGVjayA9IG5ldyBEYXRlKGNoZWNrRGF0ZSk7XG4gICAgICBkYXlUb0NoZWNrLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgXG4gICAgICBpZiAoZGF5VG9DaGVjayA8IHRvZGF5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgdW5hdmFpbGFibGUgcGVyaW9kc1xuICAgICAgaWYgKHNwYWNlLnVuYXZhaWxhYmxlUGVyaW9kcykge1xuICAgICAgICBmb3IgKGNvbnN0IHBlcmlvZCBvZiBzcGFjZS51bmF2YWlsYWJsZVBlcmlvZHMpIHtcbiAgICAgICAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZShwZXJpb2Quc3RhcnREYXRlKTtcbiAgICAgICAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUocGVyaW9kLmVuZERhdGUpO1xuICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgICBlbmREYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGRheVRvQ2hlY2sgPj0gc3RhcnREYXRlICYmIGRheVRvQ2hlY2sgPD0gZW5kRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBvcGVuaW5nIGhvdXJzXG4gICAgICBpZiAoc3BhY2Uub3BlbmluZ0hvdXJzKSB7XG4gICAgICAgIGNvbnN0IGRheU5hbWUgPSBjaGVja0RhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCdlbi1VUycsIHsgd2Vla2RheTogJ2xvbmcnIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGRheUhvdXJzID0gc3BhY2Uub3BlbmluZ0hvdXJzLmZpbmQoaCA9PiBoLmRheS50b0xvd2VyQ2FzZSgpID09PSBkYXlOYW1lKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZGF5SG91cnMgfHwgZGF5SG91cnMuaXNPcGVuID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGVzdCgnc2hvdWxkIGNvcnJlY3RseSBpZGVudGlmeSBhdmFpbGFibGUgZGF5cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IHRvbW9ycm93ID0gYWRkRGF5cyh0b2RheSwgMSk7XG4gICAgICAvLyBVc2UgYSBtb3JlIGZ1dHVyZSBkYXRlIHRvIGF2b2lkIGFueSBlZGdlIGNhc2VzXG4gICAgICBjb25zdCBmdXR1cmVNb25kYXkgPSBhZGREYXlzKHRvZGF5LCAxNCk7IC8vIFR3byB3ZWVrcyBmcm9tIHRvZGF5LCBlbnN1cmUgaXQncyBNb25kYXlcbiAgICAgIHdoaWxlIChmdXR1cmVNb25kYXkuZ2V0RGF5KCkgIT09IDEpIHsgLy8gMSA9IE1vbmRheVxuICAgICAgICBmdXR1cmVNb25kYXkuc2V0RGF0ZShmdXR1cmVNb25kYXkuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGV4cGVjdChpc0RheUF2YWlsYWJsZSh0b21vcnJvdykpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNEYXlBdmFpbGFibGUoZnV0dXJlTW9uZGF5KSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjb3JyZWN0bHkgaWRlbnRpZnkgcGFzdCBkYXRlcyBhcyB1bmF2YWlsYWJsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHllc3RlcmRheSA9IGFkZERheXMobmV3IERhdGUoKSwgLTEpO1xuICAgICAgZXhwZWN0KGlzRGF5QXZhaWxhYmxlKHllc3RlcmRheSkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNvcnJlY3RseSBpZGVudGlmeSBjbG9zZWQgZGF5cyBhcyB1bmF2YWlsYWJsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIC8vIEZpbmQgbmV4dCBXZWRuZXNkYXkgKGNsb3NlZCBkYXkpXG4gICAgICBjb25zdCBmdXR1cmVXZWRuZXNkYXkgPSBhZGREYXlzKHRvZGF5LCA3KTtcbiAgICAgIHdoaWxlIChmdXR1cmVXZWRuZXNkYXkuZ2V0RGF5KCkgIT09IDMpIHsgLy8gMyA9IFdlZG5lc2RheVxuICAgICAgICBmdXR1cmVXZWRuZXNkYXkuc2V0RGF0ZShmdXR1cmVXZWRuZXNkYXkuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEZpbmQgbmV4dCBTdW5kYXkgKG5vIGhvdXJzIGRlZmluZWQpICBcbiAgICAgIGNvbnN0IGZ1dHVyZVN1bmRheSA9IGFkZERheXModG9kYXksIDcpO1xuICAgICAgd2hpbGUgKGZ1dHVyZVN1bmRheS5nZXREYXkoKSAhPT0gMCkgeyAvLyAwID0gU3VuZGF5XG4gICAgICAgIGZ1dHVyZVN1bmRheS5zZXREYXRlKGZ1dHVyZVN1bmRheS5nZXREYXRlKCkgKyAxKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZXhwZWN0KGlzRGF5QXZhaWxhYmxlKGZ1dHVyZVdlZG5lc2RheSkpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGlzRGF5QXZhaWxhYmxlKGZ1dHVyZVN1bmRheSkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNvcnJlY3RseSBpZGVudGlmeSB1bmF2YWlsYWJsZSBwZXJpb2RzJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2hyaXN0bWFzRXZlID0gbmV3IERhdGUoJzIwMjUtMTItMjQnKTtcbiAgICAgIGNvbnN0IGNocmlzdG1hc0RheSA9IG5ldyBEYXRlKCcyMDI1LTEyLTI1Jyk7XG4gICAgICBjb25zdCBib3hpbmdEYXkgPSBuZXcgRGF0ZSgnMjAyNS0xMi0yNicpO1xuICAgICAgY29uc3QgbWFpbnRlbmFuY2VEYXkgPSBuZXcgRGF0ZSgnMjAyNS0wMS0xNicpO1xuICAgICAgXG4gICAgICBleHBlY3QoaXNEYXlBdmFpbGFibGUoY2hyaXN0bWFzRXZlKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNEYXlBdmFpbGFibGUoY2hyaXN0bWFzRGF5KSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNEYXlBdmFpbGFibGUoYm94aW5nRGF5KSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNEYXlBdmFpbGFibGUobWFpbnRlbmFuY2VEYXkpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1RpbWUgU2xvdCBBdmFpbGFiaWxpdHkgTG9naWMnLCAoKSA9PiB7XG4gICAgY29uc3QgaXNUaW1lU2xvdEF2YWlsYWJsZSA9IChkYXRlOiBEYXRlLCB0aW1lOiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIgPSA2MCk6IGJvb2xlYW4gPT4ge1xuICAgICAgLy8gQ2hlY2sgaWYgZGF5IGlzIGF2YWlsYWJsZVxuICAgICAgaWYgKCFpc0RheUF2YWlsYWJsZShkYXRlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtob3VyLCBtaW51dGVdID0gdGltZS5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgICAgY29uc3Qgc2xvdFN0YXJ0ID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICBzbG90U3RhcnQuc2V0SG91cnMoaG91ciwgbWludXRlLCAwLCAwKTtcbiAgICAgIGNvbnN0IHNsb3RFbmQgPSBuZXcgRGF0ZShzbG90U3RhcnQpO1xuICAgICAgc2xvdEVuZC5zZXRNaW51dGVzKHNsb3RFbmQuZ2V0TWludXRlcygpICsgZHVyYXRpb24pO1xuXG4gICAgICAvLyBDaGVjayBvcGVuaW5nIGhvdXJzXG4gICAgICBjb25zdCBkYXlOYW1lID0gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywgeyB3ZWVrZGF5OiAnbG9uZycgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNvbnN0IGRheUhvdXJzID0gbW9ja0NvbW1vblNwYWNlLm9wZW5pbmdIb3Vycz8uZmluZChoID0+IGguZGF5LnRvTG93ZXJDYXNlKCkgPT09IGRheU5hbWUpO1xuXG4gICAgICBpZiAoIWRheUhvdXJzIHx8IGRheUhvdXJzLmlzT3BlbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBQYXJzZSBvcGVuaW5nIGhvdXJzXG4gICAgICBjb25zdCBvcGVuVGltZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgY29uc3QgW29wZW5Ib3VyLCBvcGVuTWludXRlXSA9IGRheUhvdXJzLm9wZW4uc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcbiAgICAgIG9wZW5UaW1lLnNldEhvdXJzKG9wZW5Ib3VyLCBvcGVuTWludXRlLCAwLCAwKTtcblxuICAgICAgY29uc3QgY2xvc2VUaW1lID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICBjb25zdCBbY2xvc2VIb3VyLCBjbG9zZU1pbnV0ZV0gPSBkYXlIb3Vycy5jbG9zZS5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgICAgY2xvc2VUaW1lLnNldEhvdXJzKGNsb3NlSG91ciwgY2xvc2VNaW51dGUsIDAsIDApO1xuXG4gICAgICAvLyBDaGVjayBpZiBzbG90IGlzIHdpdGhpbiBvcGVuaW5nIGhvdXJzXG4gICAgICBpZiAoc2xvdFN0YXJ0IDwgb3BlblRpbWUgfHwgc2xvdEVuZCA+IGNsb3NlVGltZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGJyZWFrc1xuICAgICAgaWYgKGRheUhvdXJzLmJyZWFrcykge1xuICAgICAgICBmb3IgKGNvbnN0IGJyZWFrUGVyaW9kIG9mIGRheUhvdXJzLmJyZWFrcykge1xuICAgICAgICAgIGNvbnN0IGJyZWFrU3RhcnQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgICBjb25zdCBbYnJlYWtTdGFydEhvdXIsIGJyZWFrU3RhcnRNaW51dGVdID0gYnJlYWtQZXJpb2Quc3RhcnQuc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcbiAgICAgICAgICBicmVha1N0YXJ0LnNldEhvdXJzKGJyZWFrU3RhcnRIb3VyLCBicmVha1N0YXJ0TWludXRlLCAwLCAwKTtcblxuICAgICAgICAgIGNvbnN0IGJyZWFrRW5kID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICAgICAgY29uc3QgW2JyZWFrRW5kSG91ciwgYnJlYWtFbmRNaW51dGVdID0gYnJlYWtQZXJpb2QuZW5kLnNwbGl0KCc6JykubWFwKE51bWJlcik7XG4gICAgICAgICAgYnJlYWtFbmQuc2V0SG91cnMoYnJlYWtFbmRIb3VyLCBicmVha0VuZE1pbnV0ZSwgMCwgMCk7XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiBzbG90IG92ZXJsYXBzIHdpdGggYnJlYWtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoc2xvdFN0YXJ0ID49IGJyZWFrU3RhcnQgJiYgc2xvdFN0YXJ0IDwgYnJlYWtFbmQpIHx8XG4gICAgICAgICAgICAoc2xvdEVuZCA+IGJyZWFrU3RhcnQgJiYgc2xvdEVuZCA8PSBicmVha0VuZCkgfHxcbiAgICAgICAgICAgIChzbG90U3RhcnQgPD0gYnJlYWtTdGFydCAmJiBzbG90RW5kID49IGJyZWFrRW5kKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBjb25mbGljdHMgd2l0aCBleGlzdGluZyBib29raW5nc1xuICAgICAgY29uc3QgZGF5Qm9va2luZ3MgPSBtb2NrQm9va2luZ3MuZmlsdGVyKGJvb2tpbmcgPT4ge1xuICAgICAgICBjb25zdCBib29raW5nRGF0ZSA9IG5ldyBEYXRlKGJvb2tpbmcuc3RhcnRUaW1lKTtcbiAgICAgICAgcmV0dXJuIGJvb2tpbmdEYXRlLnRvRGF0ZVN0cmluZygpID09PSBkYXRlLnRvRGF0ZVN0cmluZygpICYmIGJvb2tpbmcuc3RhdHVzID09PSAnY29uZmlybWVkJztcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gIWRheUJvb2tpbmdzLnNvbWUoYm9va2luZyA9PiB7XG4gICAgICAgIGNvbnN0IGJvb2tpbmdTdGFydCA9IG5ldyBEYXRlKGJvb2tpbmcuc3RhcnRUaW1lKTtcbiAgICAgICAgY29uc3QgYm9va2luZ0VuZCA9IG5ldyBEYXRlKGJvb2tpbmcuZW5kVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoc2xvdFN0YXJ0ID49IGJvb2tpbmdTdGFydCAmJiBzbG90U3RhcnQgPCBib29raW5nRW5kKSB8fFxuICAgICAgICAgIChzbG90RW5kID4gYm9va2luZ1N0YXJ0ICYmIHNsb3RFbmQgPD0gYm9va2luZ0VuZCkgfHxcbiAgICAgICAgICAoc2xvdFN0YXJ0IDw9IGJvb2tpbmdTdGFydCAmJiBzbG90RW5kID49IGJvb2tpbmdFbmQpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaXNEYXlBdmFpbGFibGUgPSAoY2hlY2tEYXRlOiBEYXRlKTogYm9vbGVhbiA9PiB7XG4gICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICB0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIGNvbnN0IGRheVRvQ2hlY2sgPSBuZXcgRGF0ZShjaGVja0RhdGUpO1xuICAgICAgZGF5VG9DaGVjay5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIFxuICAgICAgaWYgKGRheVRvQ2hlY2sgPCB0b2RheSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2NrQ29tbW9uU3BhY2UudW5hdmFpbGFibGVQZXJpb2RzKSB7XG4gICAgICAgIGZvciAoY29uc3QgcGVyaW9kIG9mIG1vY2tDb21tb25TcGFjZS51bmF2YWlsYWJsZVBlcmlvZHMpIHtcbiAgICAgICAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZShwZXJpb2Quc3RhcnREYXRlKTtcbiAgICAgICAgICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUocGVyaW9kLmVuZERhdGUpO1xuICAgICAgICAgIHN0YXJ0RGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgICBlbmREYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGRheVRvQ2hlY2sgPj0gc3RhcnREYXRlICYmIGRheVRvQ2hlY2sgPD0gZW5kRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobW9ja0NvbW1vblNwYWNlLm9wZW5pbmdIb3Vycykge1xuICAgICAgICBjb25zdCBkYXlOYW1lID0gY2hlY2tEYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygnZW4tVVMnLCB7IHdlZWtkYXk6ICdsb25nJyB9KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBkYXlIb3VycyA9IG1vY2tDb21tb25TcGFjZS5vcGVuaW5nSG91cnMuZmluZChoID0+IGguZGF5LnRvTG93ZXJDYXNlKCkgPT09IGRheU5hbWUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFkYXlIb3VycyB8fCBkYXlIb3Vycy5pc09wZW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICB0ZXN0KCdzaG91bGQgYWxsb3cgYXZhaWxhYmxlIHRpbWUgc2xvdHMgd2l0aGluIG9wZW5pbmcgaG91cnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBmdXR1cmVNb25kYXkgPSBhZGREYXlzKHRvZGF5LCAxNCk7XG4gICAgICB3aGlsZSAoZnV0dXJlTW9uZGF5LmdldERheSgpICE9PSAxKSB7IC8vIDEgPSBNb25kYXlcbiAgICAgICAgZnV0dXJlTW9uZGF5LnNldERhdGUoZnV0dXJlTW9uZGF5LmdldERhdGUoKSArIDEpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBleHBlY3QoaXNUaW1lU2xvdEF2YWlsYWJsZShmdXR1cmVNb25kYXksICcwODowMCcpKS50b0JlKHRydWUpOyAvLyBPcGVuaW5nIHRpbWVcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZU1vbmRheSwgJzA5OjAwJykpLnRvQmUodHJ1ZSk7IC8vIFdpdGhpbiBob3Vyc1xuICAgICAgZXhwZWN0KGlzVGltZVNsb3RBdmFpbGFibGUoZnV0dXJlTW9uZGF5LCAnMTk6MDAnKSkudG9CZSh0cnVlKTsgLy8gQmVmb3JlIGNsb3NpbmdcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZWplY3QgdGltZSBzbG90cyBvdXRzaWRlIG9wZW5pbmcgaG91cnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBmdXR1cmVNb25kYXkgPSBhZGREYXlzKHRvZGF5LCAxNCk7XG4gICAgICB3aGlsZSAoZnV0dXJlTW9uZGF5LmdldERheSgpICE9PSAxKSB7IC8vIDEgPSBNb25kYXlcbiAgICAgICAgZnV0dXJlTW9uZGF5LnNldERhdGUoZnV0dXJlTW9uZGF5LmdldERhdGUoKSArIDEpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBleHBlY3QoaXNUaW1lU2xvdEF2YWlsYWJsZShmdXR1cmVNb25kYXksICcwNzowMCcpKS50b0JlKGZhbHNlKTsgLy8gQmVmb3JlIG9wZW5pbmdcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZU1vbmRheSwgJzIwOjAwJykpLnRvQmUoZmFsc2UpOyAvLyBBdCBjbG9zaW5nIHRpbWUgKHdvdWxkIGVuZCBhZnRlcilcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZU1vbmRheSwgJzIxOjAwJykpLnRvQmUoZmFsc2UpOyAvLyBBZnRlciBjbG9zaW5nXG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcmVqZWN0IHRpbWUgc2xvdHMgZHVyaW5nIGJyZWFrcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IGZ1dHVyZU1vbmRheSA9IGFkZERheXModG9kYXksIDE0KTtcbiAgICAgIHdoaWxlIChmdXR1cmVNb25kYXkuZ2V0RGF5KCkgIT09IDEpIHsgLy8gMSA9IE1vbmRheVxuICAgICAgICBmdXR1cmVNb25kYXkuc2V0RGF0ZShmdXR1cmVNb25kYXkuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZU1vbmRheSwgJzEyOjAwJykpLnRvQmUoZmFsc2UpOyAvLyBEdXJpbmcgYnJlYWtcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZU1vbmRheSwgJzEyOjMwJykpLnRvQmUoZmFsc2UpOyAvLyBEdXJpbmcgYnJlYWtcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZU1vbmRheSwgJzExOjMwJykpLnRvQmUoZmFsc2UpOyAvLyBXb3VsZCBleHRlbmQgaW50byBicmVha1xuICAgICAgZXhwZWN0KGlzVGltZVNsb3RBdmFpbGFibGUoZnV0dXJlTW9uZGF5LCAnMTM6MDAnKSkudG9CZSh0cnVlKTsgLy8gQWZ0ZXIgYnJlYWtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCByZWplY3QgdGltZSBzbG90cyB0aGF0IGNvbmZsaWN0IHdpdGggZXhpc3RpbmcgYm9va2luZ3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBib29raW5nRGF0ZSA9IG5ldyBEYXRlKGZ1dHVyZUJvb2tpbmdEYXRlKTsgLy8gVXNlIHRoZSBzYW1lIGZ1dHVyZSBNb25kYXlcbiAgICAgIFxuICAgICAgLy8gQm9va2luZyBleGlzdHMgMTQ6MDAtMTY6MDBcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGJvb2tpbmdEYXRlLCAnMTQ6MDAnKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNUaW1lU2xvdEF2YWlsYWJsZShib29raW5nRGF0ZSwgJzE1OjAwJykpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGlzVGltZVNsb3RBdmFpbGFibGUoYm9va2luZ0RhdGUsICcxMzozMCcpKS50b0JlKGZhbHNlKTsgLy8gV291bGQgZXh0ZW5kIGludG8gYm9va2luZ1xuICAgICAgLy8gQm9va2luZyBlbmRzIGF0IDE2OjAwLCBzbyAxNjozMCBzaG91bGQgYmUgYXZhaWxhYmxlIChhZnRlciBib29raW5nKVxuICAgICAgZXhwZWN0KGlzVGltZVNsb3RBdmFpbGFibGUoYm9va2luZ0RhdGUsICcxNjozMCcpKS50b0JlKHRydWUpOyAvLyBBZnRlciBib29raW5nXG4gICAgICBcbiAgICAgIC8vIEJvb2tpbmcgZXhpc3RzIDEwOjAwLTExOjMwXG4gICAgICBleHBlY3QoaXNUaW1lU2xvdEF2YWlsYWJsZShib29raW5nRGF0ZSwgJzEwOjAwJykpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGlzVGltZVNsb3RBdmFpbGFibGUoYm9va2luZ0RhdGUsICcxMTowMCcpKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGJvb2tpbmdEYXRlLCAnMTE6MzAnKSkudG9CZSh0cnVlKTsgLy8gQWZ0ZXIgYm9va2luZ1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVmlzdWFsIEluZGljYXRvcnMgTG9naWMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNvcnJlY3RseSBpZGVudGlmeSBib29rZWQgdGltZSBzbG90cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJvb2tpbmdEYXRlID0gbmV3IERhdGUoJzIwMjUtMDEtMjAnKTtcbiAgICAgIGNvbnN0IGJvb2tpbmdUaW1lcyA9IFsnMTQ6MDAnLCAnMTQ6MzAnLCAnMTU6MDAnLCAnMTU6MzAnXTtcbiAgICAgIFxuICAgICAgYm9va2luZ1RpbWVzLmZvckVhY2godGltZSA9PiB7XG4gICAgICAgIGNvbnN0IGhhc0Jvb2tpbmcgPSBtb2NrQm9va2luZ3Muc29tZShib29raW5nID0+IHtcbiAgICAgICAgICBjb25zdCBib29raW5nU3RhcnQgPSBuZXcgRGF0ZShib29raW5nLnN0YXJ0VGltZSk7XG4gICAgICAgICAgY29uc3QgYm9va2luZ0VuZCA9IG5ldyBEYXRlKGJvb2tpbmcuZW5kVGltZSk7XG4gICAgICAgICAgY29uc3QgdGltZVNsb3QgPSBuZXcgRGF0ZShib29raW5nRGF0ZSk7XG4gICAgICAgICAgY29uc3QgW2hvdXIsIG1pbnV0ZV0gPSB0aW1lLnNwbGl0KCc6JykubWFwKE51bWJlcik7XG4gICAgICAgICAgdGltZVNsb3Quc2V0SG91cnMoaG91ciwgbWludXRlLCAwLCAwKTtcbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gdGltZVNsb3QgPj0gYm9va2luZ1N0YXJ0ICYmIHRpbWVTbG90IDwgYm9va2luZ0VuZDtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QoaGFzQm9va2luZykudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNvcnJlY3RseSBpZGVudGlmeSBhdmFpbGFibGUgdGltZSBzbG90cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJvb2tpbmdEYXRlID0gbmV3IERhdGUoJzIwMjUtMDEtMjAnKTtcbiAgICAgIGNvbnN0IGF2YWlsYWJsZVRpbWVzID0gWycwODowMCcsICcwOTowMCcsICcxMjowMCcsICcxNzowMCddO1xuICAgICAgXG4gICAgICBhdmFpbGFibGVUaW1lcy5mb3JFYWNoKHRpbWUgPT4ge1xuICAgICAgICBjb25zdCBoYXNCb29raW5nID0gbW9ja0Jvb2tpbmdzLnNvbWUoYm9va2luZyA9PiB7XG4gICAgICAgICAgY29uc3QgYm9va2luZ1N0YXJ0ID0gbmV3IERhdGUoYm9va2luZy5zdGFydFRpbWUpO1xuICAgICAgICAgIGNvbnN0IGJvb2tpbmdFbmQgPSBuZXcgRGF0ZShib29raW5nLmVuZFRpbWUpO1xuICAgICAgICAgIGNvbnN0IHRpbWVTbG90ID0gbmV3IERhdGUoYm9va2luZ0RhdGUpO1xuICAgICAgICAgIGNvbnN0IFtob3VyLCBtaW51dGVdID0gdGltZS5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgICAgICAgIHRpbWVTbG90LnNldEhvdXJzKGhvdXIsIG1pbnV0ZSwgMCwgMCk7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHRpbWVTbG90ID49IGJvb2tpbmdTdGFydCAmJiB0aW1lU2xvdCA8IGJvb2tpbmdFbmQ7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KGhhc0Jvb2tpbmcpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDYWxlbmRhciBEaXNwbGF5IExvZ2ljJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBwcm92aWRlIGNvcnJlY3QgQ1NTIGNsYXNzZXMgZm9yIGRpZmZlcmVudCBkYXkgc3RhdGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgZ2V0RGF0ZUNsYXNzID0gKGRhdGU6IERhdGUpID0+IHtcbiAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBpc0N1cnJlbnREYXkgPSBkYXRlLnRvRGF0ZVN0cmluZygpID09PSB0b2RheS50b0RhdGVTdHJpbmcoKTtcbiAgICAgICAgY29uc3QgaXNBdmFpbGFibGUgPSBpc0RheUF2YWlsYWJsZShkYXRlKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICByZXR1cm4gJ2JnLXJlZC0xMDAgdGV4dC1yZWQtNjAwIGN1cnNvci1ub3QtYWxsb3dlZCBib3JkZXIgYm9yZGVyLXJlZC0yMDAnO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQ3VycmVudERheSkge1xuICAgICAgICAgIHJldHVybiAnYmctYmx1ZS0xMDAgdGV4dC1ibHVlLTkwMCBob3ZlcjpiZy1ibHVlLTIwMCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICdob3ZlcjpiZy1ncmF5LTEwMCc7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IGZ1dHVyZVdlZG5lc2RheSA9IG5ldyBEYXRlKCcyMDI1LTA2LTA0Jyk7IC8vIENsb3NlZCBkYXlcbiAgICAgIGNvbnN0IGZ1dHVyZU1vbmRheSA9IGFkZERheXMobmV3IERhdGUoKSwgMjEpOyAvLyBVc2UgYSBkYXRlIGluIHRoZSBmdXR1cmVcbiAgICAgIHdoaWxlIChmdXR1cmVNb25kYXkuZ2V0RGF5KCkgIT09IDEpIHsgLy8gMSA9IE1vbmRheVxuICAgICAgICBmdXR1cmVNb25kYXkuc2V0RGF0ZShmdXR1cmVNb25kYXkuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGV4cGVjdChnZXREYXRlQ2xhc3ModG9kYXkpKS50b0NvbnRhaW4oJ2JnLWJsdWUtMTAwJyk7IC8vIFRvZGF5XG4gICAgICBleHBlY3QoZ2V0RGF0ZUNsYXNzKGZ1dHVyZVdlZG5lc2RheSkpLnRvQ29udGFpbignYmctcmVkLTEwMCcpOyAvLyBVbmF2YWlsYWJsZVxuICAgICAgZXhwZWN0KGdldERhdGVDbGFzcyhmdXR1cmVNb25kYXkpKS50b0JlKCdob3ZlcjpiZy1ncmF5LTEwMCcpOyAvLyBBdmFpbGFibGVcbiAgICB9KTtcblxuICAgIGNvbnN0IGlzRGF5QXZhaWxhYmxlID0gKGNoZWNrRGF0ZTogRGF0ZSk6IGJvb2xlYW4gPT4ge1xuICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICBjb25zdCBkYXlUb0NoZWNrID0gbmV3IERhdGUoY2hlY2tEYXRlKTtcbiAgICAgIGRheVRvQ2hlY2suc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICBcbiAgICAgIGlmIChkYXlUb0NoZWNrIDwgdG9kYXkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9ja0NvbW1vblNwYWNlLnVuYXZhaWxhYmxlUGVyaW9kcykge1xuICAgICAgICBmb3IgKGNvbnN0IHBlcmlvZCBvZiBtb2NrQ29tbW9uU3BhY2UudW5hdmFpbGFibGVQZXJpb2RzKSB7XG4gICAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUocGVyaW9kLnN0YXJ0RGF0ZSk7XG4gICAgICAgICAgY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKHBlcmlvZC5lbmREYXRlKTtcbiAgICAgICAgICBzdGFydERhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgICAgZW5kRGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChkYXlUb0NoZWNrID49IHN0YXJ0RGF0ZSAmJiBkYXlUb0NoZWNrIDw9IGVuZERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1vY2tDb21tb25TcGFjZS5vcGVuaW5nSG91cnMpIHtcbiAgICAgICAgY29uc3QgZGF5TmFtZSA9IGNoZWNrRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywgeyB3ZWVrZGF5OiAnbG9uZycgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgZGF5SG91cnMgPSBtb2NrQ29tbW9uU3BhY2Uub3BlbmluZ0hvdXJzLmZpbmQoaCA9PiBoLmRheS50b0xvd2VyQ2FzZSgpID09PSBkYXlOYW1lKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZGF5SG91cnMgfHwgZGF5SG91cnMuaXNPcGVuID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdGVzdCgnc2hvdWxkIHNob3cgY29ycmVjdCBsZWdlbmQgaXRlbXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBsZWdlbmRJdGVtcyA9IFtcbiAgICAgICAgeyBjb2xvcjogJ2JnLWJsdWUtNjAwJywgbGFiZWw6ICdTZWxlY3RlZCcgfSxcbiAgICAgICAgeyBjb2xvcjogJ2JnLW9yYW5nZS01MDAnLCBsYWJlbDogJ0Jvb2tlZCcgfSxcbiAgICAgICAgeyBjb2xvcjogJ2JnLXJlZC01MDAnLCBsYWJlbDogJ1VuYXZhaWxhYmxlJyB9LFxuICAgICAgICB7IGNvbG9yOiAnYmctYmx1ZS0yMDAnLCBsYWJlbDogJ1RvZGF5JyB9XG4gICAgICBdO1xuICAgICAgXG4gICAgICBleHBlY3QobGVnZW5kSXRlbXMpLnRvSGF2ZUxlbmd0aCg0KTtcbiAgICAgIGV4cGVjdChsZWdlbmRJdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS5sYWJlbCA9PT0gJ1VuYXZhaWxhYmxlJykpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnRlZ3JhdGlvbiBUZXN0aW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgY29tcGxldGUgYm9va2luZyBmbG93IHZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0RGF0ZSA9IG5ldyBEYXRlKCcyMDI1LTA2LTAyJyk7IC8vIE1vbmRheVxuICAgICAgY29uc3QgdGVzdFRpbWUgPSAnMTU6MDAnO1xuICAgICAgXG4gICAgICAvLyBTdGVwIDE6IENoZWNrIGlmIGRheSBpcyBhdmFpbGFibGUgLSB1c2UgZnV0dXJlIGRhdGUgdG8gZW5zdXJlIGl0J3MgYXZhaWxhYmxlXG4gICAgICBjb25zdCBmdXR1cmVUZXN0RGF0ZSA9IGFkZERheXMobmV3IERhdGUoKSwgMTQpO1xuICAgICAgd2hpbGUgKGZ1dHVyZVRlc3REYXRlLmdldERheSgpICE9PSAxKSB7IC8vIDEgPSBNb25kYXlcbiAgICAgICAgZnV0dXJlVGVzdERhdGUuc2V0RGF0ZShmdXR1cmVUZXN0RGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRheUF2YWlsYWJsZSA9IGlzRGF5QXZhaWxhYmxlKGZ1dHVyZVRlc3REYXRlKTtcbiAgICAgIGV4cGVjdChkYXlBdmFpbGFibGUpLnRvQmUodHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIFN0ZXAgMjogQ2hlY2sgaWYgdGltZSBzbG90IGlzIGF2YWlsYWJsZVxuICAgICAgY29uc3QgdGltZUF2YWlsYWJsZSA9IGlzVGltZVNsb3RBdmFpbGFibGUoZnV0dXJlVGVzdERhdGUsIHRlc3RUaW1lKTtcbiAgICAgIGV4cGVjdCh0aW1lQXZhaWxhYmxlKS50b0JlKHRydWUpO1xuICAgICAgXG4gICAgICAvLyBTdGVwIDM6IFZhbGlkYXRlIGJvb2tpbmcgY29uc3RyYWludHNcbiAgICAgIGNvbnN0IFtob3VyLCBtaW51dGVdID0gdGVzdFRpbWUuc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcbiAgICAgIGV4cGVjdChob3VyKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDgpOyAvLyBBZnRlciBvcGVuaW5nXG4gICAgICBleHBlY3QoaG91cikudG9CZUxlc3NUaGFuKDIwKTsgLy8gQmVmb3JlIGNsb3NpbmdcbiAgICB9KTtcblxuICAgIGNvbnN0IGlzRGF5QXZhaWxhYmxlID0gKGNoZWNrRGF0ZTogRGF0ZSk6IGJvb2xlYW4gPT4ge1xuICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgdG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICBjb25zdCBkYXlUb0NoZWNrID0gbmV3IERhdGUoY2hlY2tEYXRlKTtcbiAgICAgIGRheVRvQ2hlY2suc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICBcbiAgICAgIGlmIChkYXlUb0NoZWNrIDwgdG9kYXkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9ja0NvbW1vblNwYWNlLnVuYXZhaWxhYmxlUGVyaW9kcykge1xuICAgICAgICBmb3IgKGNvbnN0IHBlcmlvZCBvZiBtb2NrQ29tbW9uU3BhY2UudW5hdmFpbGFibGVQZXJpb2RzKSB7XG4gICAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUocGVyaW9kLnN0YXJ0RGF0ZSk7XG4gICAgICAgICAgY29uc3QgZW5kRGF0ZSA9IG5ldyBEYXRlKHBlcmlvZC5lbmREYXRlKTtcbiAgICAgICAgICBzdGFydERhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgICAgZW5kRGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChkYXlUb0NoZWNrID49IHN0YXJ0RGF0ZSAmJiBkYXlUb0NoZWNrIDw9IGVuZERhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1vY2tDb21tb25TcGFjZS5vcGVuaW5nSG91cnMpIHtcbiAgICAgICAgY29uc3QgZGF5TmFtZSA9IGNoZWNrRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywgeyB3ZWVrZGF5OiAnbG9uZycgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgZGF5SG91cnMgPSBtb2NrQ29tbW9uU3BhY2Uub3BlbmluZ0hvdXJzLmZpbmQoaCA9PiBoLmRheS50b0xvd2VyQ2FzZSgpID09PSBkYXlOYW1lKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZGF5SG91cnMgfHwgZGF5SG91cnMuaXNPcGVuID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgY29uc3QgaXNUaW1lU2xvdEF2YWlsYWJsZSA9IChkYXRlOiBEYXRlLCB0aW1lOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgICAgIGlmICghaXNEYXlBdmFpbGFibGUoZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbaG91ciwgbWludXRlXSA9IHRpbWUuc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNvbnN0IHNsb3RTdGFydCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgc2xvdFN0YXJ0LnNldEhvdXJzKGhvdXIsIG1pbnV0ZSwgMCwgMCk7XG4gICAgICBjb25zdCBzbG90RW5kID0gbmV3IERhdGUoc2xvdFN0YXJ0KTtcbiAgICAgIHNsb3RFbmQuc2V0TWludXRlcyhzbG90RW5kLmdldE1pbnV0ZXMoKSArIDYwKTtcblxuICAgICAgY29uc3QgZGF5TmFtZSA9IGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCdlbi1VUycsIHsgd2Vla2RheTogJ2xvbmcnIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCBkYXlIb3VycyA9IG1vY2tDb21tb25TcGFjZS5vcGVuaW5nSG91cnM/LmZpbmQoaCA9PiBoLmRheS50b0xvd2VyQ2FzZSgpID09PSBkYXlOYW1lKTtcblxuICAgICAgaWYgKCFkYXlIb3VycyB8fCBkYXlIb3Vycy5pc09wZW4gPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3BlblRpbWUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgIGNvbnN0IFtvcGVuSG91ciwgb3Blbk1pbnV0ZV0gPSBkYXlIb3Vycy5vcGVuLnNwbGl0KCc6JykubWFwKE51bWJlcik7XG4gICAgICBvcGVuVGltZS5zZXRIb3VycyhvcGVuSG91ciwgb3Blbk1pbnV0ZSwgMCwgMCk7XG5cbiAgICAgIGNvbnN0IGNsb3NlVGltZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgY29uc3QgW2Nsb3NlSG91ciwgY2xvc2VNaW51dGVdID0gZGF5SG91cnMuY2xvc2Uuc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcbiAgICAgIGNsb3NlVGltZS5zZXRIb3VycyhjbG9zZUhvdXIsIGNsb3NlTWludXRlLCAwLCAwKTtcblxuICAgICAgaWYgKHNsb3RTdGFydCA8IG9wZW5UaW1lIHx8IHNsb3RFbmQgPiBjbG9zZVRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF5SG91cnMuYnJlYWtzKSB7XG4gICAgICAgIGZvciAoY29uc3QgYnJlYWtQZXJpb2Qgb2YgZGF5SG91cnMuYnJlYWtzKSB7XG4gICAgICAgICAgY29uc3QgYnJlYWtTdGFydCA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICAgIGNvbnN0IFticmVha1N0YXJ0SG91ciwgYnJlYWtTdGFydE1pbnV0ZV0gPSBicmVha1BlcmlvZC5zdGFydC5zcGxpdCgnOicpLm1hcChOdW1iZXIpO1xuICAgICAgICAgIGJyZWFrU3RhcnQuc2V0SG91cnMoYnJlYWtTdGFydEhvdXIsIGJyZWFrU3RhcnRNaW51dGUsIDAsIDApO1xuXG4gICAgICAgICAgY29uc3QgYnJlYWtFbmQgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgICBjb25zdCBbYnJlYWtFbmRIb3VyLCBicmVha0VuZE1pbnV0ZV0gPSBicmVha1BlcmlvZC5lbmQuc3BsaXQoJzonKS5tYXAoTnVtYmVyKTtcbiAgICAgICAgICBicmVha0VuZC5zZXRIb3VycyhicmVha0VuZEhvdXIsIGJyZWFrRW5kTWludXRlLCAwLCAwKTtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChzbG90U3RhcnQgPj0gYnJlYWtTdGFydCAmJiBzbG90U3RhcnQgPCBicmVha0VuZCkgfHxcbiAgICAgICAgICAgIChzbG90RW5kID4gYnJlYWtTdGFydCAmJiBzbG90RW5kIDw9IGJyZWFrRW5kKSB8fFxuICAgICAgICAgICAgKHNsb3RTdGFydCA8PSBicmVha1N0YXJ0ICYmIHNsb3RFbmQgPj0gYnJlYWtFbmQpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGVkZ2UgY2FzZXMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgLy8gVGVzdCBleGFjdGx5IGF0IG9wZW5pbmcvY2xvc2luZyB0aW1lc1xuICAgICAgY29uc3QgdGh1cnNkYXkgPSBuZXcgRGF0ZSgnMjAyNS0wNi0wNScpOyAvLyBUaHVyc2RheSAxMDowMC0xODowMFxuICAgICAgXG4gICAgICAvLyBUaHVyc2RheSAxMDowMC0xODowMCwgbGV0J3MgdXNlIGEgZnV0dXJlIFRodXJzZGF5IHRvIGF2b2lkIGRhdGUgaXNzdWVzXG4gICAgICBjb25zdCBmdXR1cmVUaHVyc2RheSA9IGFkZERheXMobmV3IERhdGUoKSwgMTQpO1xuICAgICAgd2hpbGUgKGZ1dHVyZVRodXJzZGF5LmdldERheSgpICE9PSA0KSB7IC8vIDQgPSBUaHVyc2RheVxuICAgICAgICBmdXR1cmVUaHVyc2RheS5zZXREYXRlKGZ1dHVyZVRodXJzZGF5LmdldERhdGUoKSArIDEpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBleHBlY3QoaXNUaW1lU2xvdEF2YWlsYWJsZShmdXR1cmVUaHVyc2RheSwgJzEwOjAwJykpLnRvQmUodHJ1ZSk7IC8vIE9wZW5pbmcgdGltZVxuICAgICAgZXhwZWN0KGlzVGltZVNsb3RBdmFpbGFibGUoZnV0dXJlVGh1cnNkYXksICcxNzowMCcpKS50b0JlKHRydWUpOyAvLyBMYXN0IHZhbGlkIHNsb3RcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZVRodXJzZGF5LCAnMTg6MDAnKSkudG9CZShmYWxzZSk7IC8vIFdvdWxkIGVuZCBhZnRlciBjbG9zaW5nXG4gICAgICBcbiAgICAgIC8vIFRlc3QgYnJlYWsgYm91bmRhcmllcyAtIHVzZSBmdXR1cmUgTW9uZGF5XG4gICAgICBjb25zdCBmdXR1cmVNb25kYXkgPSBhZGREYXlzKG5ldyBEYXRlKCksIDE0KTtcbiAgICAgIHdoaWxlIChmdXR1cmVNb25kYXkuZ2V0RGF5KCkgIT09IDEpIHsgLy8gMSA9IE1vbmRheVxuICAgICAgICBmdXR1cmVNb25kYXkuc2V0RGF0ZShmdXR1cmVNb25kYXkuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGV4cGVjdChpc1RpbWVTbG90QXZhaWxhYmxlKGZ1dHVyZU1vbmRheSwgJzExOjAwJykpLnRvQmUodHJ1ZSk7IC8vIEJlZm9yZSBicmVha1xuICAgICAgZXhwZWN0KGlzVGltZVNsb3RBdmFpbGFibGUoZnV0dXJlTW9uZGF5LCAnMTE6MzAnKSkudG9CZShmYWxzZSk7IC8vIFdvdWxkIGV4dGVuZCBpbnRvIGJyZWFrXG4gICAgICBleHBlY3QoaXNUaW1lU2xvdEF2YWlsYWJsZShmdXR1cmVNb25kYXksICcxMzowMCcpKS50b0JlKHRydWUpOyAvLyBBZnRlciBicmVha1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==