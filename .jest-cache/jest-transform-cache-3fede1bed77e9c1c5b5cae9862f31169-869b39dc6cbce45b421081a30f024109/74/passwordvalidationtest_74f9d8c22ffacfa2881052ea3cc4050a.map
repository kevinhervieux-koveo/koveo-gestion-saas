{"file":"/home/runner/workspace/tests/unit/invitation/password-validation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/invitation/password-validation.test.ts"],"sourcesContent":["import {\n  validatePasswordStrength,\n  getPasswordCriteria,\n  getPasswordStrengthLabel,\n  getPasswordStrengthColor,\n  getPasswordStrengthBarColor,\n} from '../../../client/src/utils/password-validation';\n\ndescribe('Password Validation System', () => {\n  describe('Password Strength Validation', () => {\n    test('should validate minimum length requirement', () => {\n      expect(validatePasswordStrength('1234567').score).toBe(1); // Has numbers but no min length\n      expect(validatePasswordStrength('12345678').score).toBeGreaterThan(1); // Min length + numbers\n      expect(validatePasswordStrength('123456789012345').score).toBeGreaterThan(2); // Long + min length + numbers\n    });\n\n    test('should validate uppercase letter requirement', () => {\n      const noUppercase = validatePasswordStrength('password123!');\n      const withUppercase = validatePasswordStrength('Password123!');\n      const noUppercaseCriteria = getPasswordCriteria('password123!');\n      const withUppercaseCriteria = getPasswordCriteria('Password123!');\n\n      expect(noUppercaseCriteria.hasUpperCase).toBe(false);\n      expect(withUppercaseCriteria.hasUpperCase).toBe(true);\n      expect(withUppercase.score).toBeGreaterThanOrEqual(noUppercase.score);\n    });\n\n    test('should validate lowercase letter requirement', () => {\n      const noLowercase = validatePasswordStrength('PASSWORD123!');\n      const withLowercase = validatePasswordStrength('Password123!');\n      const noLowercaseCriteria = getPasswordCriteria('PASSWORD123!');\n      const withLowercaseCriteria = getPasswordCriteria('Password123!');\n\n      expect(noLowercaseCriteria.hasLowerCase).toBe(false);\n      expect(withLowercaseCriteria.hasLowerCase).toBe(true);\n      expect(withLowercase.score).toBeGreaterThanOrEqual(noLowercase.score);\n    });\n\n    test('should validate number requirement', () => {\n      const noNumbers = validatePasswordStrength('Password!@#');\n      const withNumbers = validatePasswordStrength('Password123!');\n      const noNumbersCriteria = getPasswordCriteria('Password!@#');\n      const withNumbersCriteria = getPasswordCriteria('Password123!');\n\n      expect(noNumbersCriteria.hasNumbers).toBe(false);\n      expect(withNumbersCriteria.hasNumbers).toBe(true);\n      expect(withNumbers.score).toBeGreaterThan(noNumbers.score);\n    });\n\n    test('should validate special character requirement', () => {\n      const noSpecial = validatePasswordStrength('Password123');\n      const withSpecial = validatePasswordStrength('Password123!');\n      const noSpecialCriteria = getPasswordCriteria('Password123');\n      const withSpecialCriteria = getPasswordCriteria('Password123!');\n\n      expect(noSpecialCriteria.hasSymbols).toBe(false);\n      expect(withSpecialCriteria.hasSymbols).toBe(true);\n      expect(withSpecial.score).toBeGreaterThan(noSpecial.score);\n    });\n\n    test('should calculate correct strength scores', () => {\n      const weak = validatePasswordStrength('password');\n      const medium = validatePasswordStrength('Password123');\n      const strong = validatePasswordStrength('Password123!');\n      const veryStrong = validatePasswordStrength('MyStrongP@ssw0rd2024');\n\n      expect(weak.score).toBeGreaterThanOrEqual(1); // Even weak passwords get some points\n      expect(medium.score).toBeGreaterThanOrEqual(2);\n      expect(strong.score).toBeGreaterThanOrEqual(3);\n      expect(veryStrong.score).toBeLessThanOrEqual(4);\n    });\n\n    test('should handle edge cases', () => {\n      expect(() => validatePasswordStrength('')).not.toThrow();\n      expect(() => validatePasswordStrength('   ')).not.toThrow();\n      expect(() => validatePasswordStrength('🔐🌟💪')).not.toThrow();\n\n      const empty = validatePasswordStrength('');\n      const emptyCriteria = getPasswordCriteria('');\n      expect(empty.score).toBeGreaterThanOrEqual(0); // Empty password gets minimum score\n      expect(emptyCriteria.minLength).toBe(false);\n      expect(emptyCriteria.hasUpperCase).toBe(false);\n      expect(emptyCriteria.hasLowerCase).toBe(false);\n      expect(emptyCriteria.hasNumbers).toBe(false);\n      expect(emptyCriteria.hasSymbols).toBe(false);\n      expect(emptyCriteria.noCommonPatterns).toBe(true); // Empty doesn't contain common patterns\n    });\n  });\n\n  describe('Password Criteria Helper', () => {\n    test('should return correct criteria object', () => {\n      const criteria = getPasswordCriteria('Password123!');\n\n      expect(criteria).toHaveProperty('minLength');\n      expect(criteria).toHaveProperty('hasUpperCase');\n      expect(criteria).toHaveProperty('hasLowerCase');\n      expect(criteria).toHaveProperty('hasNumbers');\n      expect(criteria).toHaveProperty('hasSymbols');\n      expect(criteria).toHaveProperty('noCommonPatterns');\n\n      expect(typeof criteria.minLength).toBe('boolean');\n      expect(typeof criteria.hasUpperCase).toBe('boolean');\n      expect(typeof criteria.hasLowerCase).toBe('boolean');\n      expect(typeof criteria.hasNumbers).toBe('boolean');\n      expect(typeof criteria.hasSymbols).toBe('boolean');\n      expect(typeof criteria.noCommonPatterns).toBe('boolean');\n    });\n\n    test('should evaluate criteria correctly for strong password', () => {\n      const criteria = getPasswordCriteria('MySecureAuth123!');\n\n      expect(criteria.minLength).toBe(true);\n      expect(criteria.hasUpperCase).toBe(true);\n      expect(criteria.hasLowerCase).toBe(true);\n      expect(criteria.hasNumbers).toBe(true);\n      expect(criteria.hasSymbols).toBe(true);\n      expect(criteria.noCommonPatterns).toBe(true); // Should not contain common patterns\n    });\n  });\n\n  describe('Password Strength Labels', () => {\n    test('should return correct French labels for each strength level', () => {\n      expect(getPasswordStrengthLabel(0)).toBe('Très faible');\n      expect(getPasswordStrengthLabel(1)).toBe('Très faible');\n      expect(getPasswordStrengthLabel(2)).toBe('Faible');\n      expect(getPasswordStrengthLabel(3)).toBe('Moyen');\n      expect(getPasswordStrengthLabel(4)).toBe('Fort');\n    });\n\n    test('should handle invalid strength values', () => {\n      expect(getPasswordStrengthLabel(-1)).toBe('Très faible');\n      expect(getPasswordStrengthLabel(10)).toBe('Très faible');\n    });\n\n    test('should return correct colors for strength levels', () => {\n      expect(getPasswordStrengthColor(0)).toBe('text-red-600');\n      expect(getPasswordStrengthColor(2)).toBe('text-orange-500');\n      expect(getPasswordStrengthColor(3)).toBe('text-yellow-500');\n      expect(getPasswordStrengthColor(4)).toBe('text-green-600');\n    });\n\n    test('should return correct bar colors for strength levels', () => {\n      expect(getPasswordStrengthBarColor(0)).toBe('bg-red-500');\n      expect(getPasswordStrengthBarColor(2)).toBe('bg-orange-500');\n      expect(getPasswordStrengthBarColor(3)).toBe('bg-yellow-500');\n      expect(getPasswordStrengthBarColor(4)).toBe('bg-green-500');\n    });\n  });\n\n  describe('Quebec Compliance Validation', () => {\n    test('should enforce minimum security standards for Quebec Law 25', () => {\n      // Quebec privacy law requires strong password protection\n      const weakPassword = validatePasswordStrength('password');\n      const compliantPassword = validatePasswordStrength('MonMotDePasse2024!');\n\n      expect(weakPassword.score).toBeLessThan(3);\n      expect(compliantPassword.score).toBeGreaterThanOrEqual(3);\n\n      // Strong passwords should meet all criteria for law compliance\n      const strongCriteria = getPasswordCriteria('MonMotDePasse2024!');\n      expect(strongCriteria.minLength).toBe(true);\n      expect(strongCriteria.hasUpperCase).toBe(true);\n      expect(strongCriteria.hasLowerCase).toBe(true);\n      expect(strongCriteria.hasNumbers).toBe(true);\n      expect(strongCriteria.hasSymbols).toBe(true);\n    });\n\n    test('should validate password complexity for property management security', () => {\n      // Property management systems require higher security standards\n      const passwords = [\n        'Admin123!',\n        'GestionPropriete2024@',\n        'Montreal$yndic123',\n        'QuebecCondo#456',\n      ];\n\n      passwords.forEach((password) => {\n        const result = validatePasswordStrength(password);\n        const criteria = getPasswordCriteria(password);\n        expect(result.score).toBeGreaterThanOrEqual(3);\n        expect(criteria.minLength).toBe(true);\n        expect(criteria.hasSymbols).toBe(true);\n      });\n    });\n  });\n\n  describe('Performance Tests', () => {\n    test('should validate passwords quickly under load', () => {\n      const passwords = Array.from(\n        { length: 1000 },\n        (_, i) => `TestPassword${i}!@#${Math.random()}`\n      );\n\n      const startTime = Date.now();\n\n      passwords.forEach((password) => {\n        validatePasswordStrength(password);\n      });\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Should validate 1000 passwords in under 100ms\n      expect(duration).toBeLessThan(100);\n    });\n\n    test('should handle very long passwords efficiently', () => {\n      const longPassword = 'A'.repeat(10000) + '1' + '!';\n\n      const startTime = Date.now();\n      const result = validatePasswordStrength(longPassword);\n      const endTime = Date.now();\n\n      expect(endTime - startTime).toBeLessThan(10);\n      expect(result.score).toBeGreaterThan(0);\n    });\n  });\n});\n"],"version":3}