04af9b795bedecd44f70d1c3c7e140f7
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentCard = DocumentCard;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const lucide_react_1 = require("lucide-react");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const utils_1 = require("@/lib/utils");
/**
 * DocumentCard - A standardized card component for displaying document summaries
 * Optimized for mobile interactions with large touch targets
 */
function DocumentCard({ title, documentId, onViewClick, documentType, description, createdAt, fileSize, mimeType, uploadedBy, isVisibleToTenants, className, compact = false, showMetadata = true }) {
    // Get appropriate icon based on document type/mime type
    const getDocumentIcon = () => {
        if (mimeType?.startsWith('image/')) {
            return (0, jsx_runtime_1.jsx)(lucide_react_1.Image, { className: "w-5 h-5 text-blue-500" });
        }
        switch (mimeType) {
            case 'application/pdf':
                return (0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5 text-red-500" });
            case 'application/msword':
            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
                return (0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5 text-blue-600" });
            case 'application/vnd.ms-excel':
            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
                return (0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5 text-green-600" });
            default:
                return (0, jsx_runtime_1.jsx)(lucide_react_1.File, { className: "w-5 h-5 text-gray-500" });
        }
    };
    // Format file size for display
    const formatFileSize = (bytes) => {
        if (!bytes)
            return null;
        const kb = bytes / 1024;
        if (kb < 1024)
            return `${kb.toFixed(1)} KB`;
        const mb = kb / 1024;
        return `${mb.toFixed(1)} MB`;
    };
    // Format date for display
    const formatDate = (dateString) => {
        if (!dateString)
            return null;
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    };
    // Get document type badge color
    const getTypeColor = (type) => {
        const colors = {
            'bylaw': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',
            'financial': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
            'maintenance': 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',
            'legal': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
            'inspection': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
            'insurance': 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200',
        };
        return colors[type || ''] || 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200';
    };
    // Handle card click - entire card is clickable for mobile friendliness
    const handleCardClick = () => {
        onViewClick(documentId);
    };
    // Handle view button click (prevent event bubbling)
    const handleViewButtonClick = (e) => {
        e.stopPropagation();
        onViewClick(documentId);
    };
    return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: (0, utils_1.cn)("group cursor-pointer transition-all duration-200 hover:shadow-md hover:border-blue-200 dark:hover:border-blue-700", "active:scale-[0.98] transform", // Touch feedback
        compact ? "p-3" : "", className), onClick: handleCardClick, "data-testid": `document-card-${documentId}`, children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: (0, utils_1.cn)("flex flex-row items-start justify-between space-y-0", compact ? "pb-2" : "pb-3"), children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-start space-x-3 flex-1 min-w-0", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-shrink-0 mt-1", children: getDocumentIcon() }), (0, jsx_runtime_1.jsxs)("div", { className: "flex-1 min-w-0", children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: (0, utils_1.cn)("text-left leading-tight break-words", compact ? "text-sm" : "text-base"), children: title }), description && !compact && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2", children: description }))] })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", size: "sm", onClick: handleViewButtonClick, className: "flex-shrink-0 ml-2 min-h-[36px] min-w-[36px] hover:bg-blue-50 dark:hover:bg-blue-950", "data-testid": `view-document-${documentId}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: "w-4 h-4" }), (0, jsx_runtime_1.jsx)("span", { className: "sr-only", children: "View document" })] })] }), showMetadata && !compact && ((0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "pt-0", children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-wrap gap-2", children: [documentType && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: (0, utils_1.cn)("text-xs", getTypeColor(documentType)), children: documentType.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase()) })), isVisibleToTenants && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "outline", className: "text-xs border-green-300 text-green-700 dark:border-green-600 dark:text-green-400", children: "\uD83D\uDC65 Visible to Tenants" }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between text-xs text-gray-500 dark:text-gray-400", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-4", children: [createdAt && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: "w-3 h-3" }), (0, jsx_runtime_1.jsx)("span", { children: formatDate(createdAt) })] })), uploadedBy && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.User, { className: "w-3 h-3" }), (0, jsx_runtime_1.jsx)("span", { className: "truncate max-w-20", children: uploadedBy })] }))] }), fileSize && ((0, jsx_runtime_1.jsx)("span", { className: "text-gray-400 dark:text-gray-500", children: formatFileSize(fileSize) }))] })] }) })), showMetadata && compact && ((0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "pt-0", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between text-xs text-gray-500 dark:text-gray-400", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [documentType && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: "text-xs", children: documentType })), createdAt && (0, jsx_runtime_1.jsx)("span", { children: formatDate(createdAt) })] }), fileSize && (0, jsx_runtime_1.jsx)("span", { children: formatFileSize(fileSize) })] }) }))] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,