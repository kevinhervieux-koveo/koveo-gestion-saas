{"file":"/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/utils/edit/timeValue.js","mappings":"AAAA,YAAY,CAAC;AAEb,MAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;AACrC,SAAS,cAAc,CAAC,KAAK;IACzB,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACjD,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC7B,OAAO,KAAK,CAAC;IACjB,CAAC;IACD,MAAM,UAAU,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACpD,MAAM,WAAW,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACrD,IAAI,UAAU,IAAI,CAAC,IAAI,UAAU,KAAK,CAAC,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC;QAC1D,IAAI,KAAK,CAAC;QACV,IAAI,UAAU,IAAI,CAAC,EAAE,CAAC;YAClB,KAAK,GAAG,CAAC,CAAC;QACd,CAAC;aAAM,CAAC;YACJ,KAAK,GAAG,CAAC,CAAC;QACd,CAAC;QACD,OAAO,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACrB,OAAO,KAAK,CAAC;IACjB,CAAC;IACD,OAAO,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;AACrC,CAAC;AACD,SAAS,KAAK,CAAC,eAAe,EAAE,KAAK;IACjC,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACrD,MAAM,gBAAgB,GAAG,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACtD,MAAM,aAAa,GAAG,QAAQ,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACrD,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;IACjD,OAAO,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;AACnG,CAAC;AACD,SAAS,sBAAsB,CAAC,OAAO,EAAE,KAAK;IAC1C,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IAClC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,OAAO,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;AACjC,CAAC;AAED,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;AACxC,OAAO,CAAC,sBAAsB,GAAG,sBAAsB,CAAC","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/utils/edit/timeValue.js"],"sourcesContent":["'use strict';\n\nconst parseInt = globalThis.parseInt;\nfunction buildTimeValue(value) {\n    const onlyDigitsValue = value.replace(/\\D/g, '');\n    if (onlyDigitsValue.length < 2) {\n        return value;\n    }\n    const firstDigit = parseInt(onlyDigitsValue[0], 10);\n    const secondDigit = parseInt(onlyDigitsValue[1], 10);\n    if (firstDigit >= 3 || firstDigit === 2 && secondDigit >= 4) {\n        let index;\n        if (firstDigit >= 3) {\n            index = 1;\n        } else {\n            index = 2;\n        }\n        return build(onlyDigitsValue, index);\n    }\n    if (value.length === 2) {\n        return value;\n    }\n    return build(onlyDigitsValue, 2);\n}\nfunction build(onlyDigitsValue, index) {\n    const hours = onlyDigitsValue.slice(0, index);\n    const validHours = Math.min(parseInt(hours, 10), 23);\n    const minuteCharacters = onlyDigitsValue.slice(index);\n    const parsedMinutes = parseInt(minuteCharacters, 10);\n    const validMinutes = Math.min(parsedMinutes, 59);\n    return `${validHours.toString().padStart(2, '0')}:${validMinutes.toString().padStart(2, '0')}`;\n}\nfunction isValidDateOrTimeValue(element, value) {\n    const clone = element.cloneNode();\n    clone.value = value;\n    return clone.value === value;\n}\n\nexports.buildTimeValue = buildTimeValue;\nexports.isValidDateOrTimeValue = isValidDateOrTimeValue;\n"],"version":3}