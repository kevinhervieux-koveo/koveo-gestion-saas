{"file":"/home/runner/workspace/client/src/pages/manager/buildings.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/pages/manager/buildings.tsx"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { NoDataCard } from '@/components/ui/no-data-card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLanguage } from '@/hooks/use-language';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport {\n  Building,\n  Search,\n  Plus,\n  Edit,\n  Trash2,\n  MapPin,\n  Phone,\n  Mail,\n  Calendar,\n  Users,\n} from 'lucide-react';\nimport { Header } from '@/components/layout/header';\nimport { Link } from 'wouter';\n\n// Form schema for creating/editing buildings\n// Schema will be created inside component with translations\n\n/**\n *\n */\ntype BuildingFormData = z.infer<typeof buildingFormSchema>;\n\n/**\n *\n */\ninterface BuildingData {\n  id: string;\n  name: string;\n  address: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  buildingType: string;\n  totalUnits: number;\n  organizationId: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n *\n */\ninterface BuildingCardProps {\n  building: BuildingData;\n  userRole?: string;\n  onEdit: (building: BuildingData) => void;\n  onDelete: (building: BuildingData) => void;\n  t: (key: string) => string;\n}\n\n/**\n *\n * @param root0\n * @param root0.building\n * @param root0.userRole\n * @param root0.onEdit\n * @param root0.onDelete\n */\nfunction BuildingCard({ building, userRole, onEdit, onDelete, t }: BuildingCardProps) {\n  const isAdmin = userRole === 'admin';\n  const canEdit = ['admin', 'manager'].includes(userRole || '');\n\n  return (\n    <Card className='h-full'>\n      <CardHeader>\n        <div className='flex items-start justify-between'>\n          <div className='flex items-center space-x-2'>\n            <Building className='h-5 w-5 text-blue-600' />\n            <CardTitle className='text-lg line-clamp-2 break-words'>{building.name}</CardTitle>\n          </div>\n          {canEdit && (\n            <div className='flex gap-1'>\n              <Button size='sm' variant='ghost' onClick={() => onEdit(building)}>\n                <Edit className='h-3 w-3' />\n              </Button>\n              {isAdmin && (\n                <Button\n                  size='sm'\n                  variant='ghost'\n                  onClick={() => onDelete(building)}\n                  className='text-red-600 hover:text-red-700'\n                >\n                  <Trash2 className='h-3 w-3' />\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className='space-y-2'>\n          <div className='flex items-center text-sm text-gray-600'>\n            <MapPin className='h-4 w-4 mr-2' />\n            <span className='line-clamp-2 break-words flex-1'>{building.address}</span>\n          </div>\n          <div className='flex items-center text-sm text-gray-600'>\n            <span>\n              {building.city}, {building.province} {building.postalCode}\n            </span>\n          </div>\n          <div className='flex items-center justify-between pt-2'>\n            <Badge variant='outline'>{building.totalUnits} {t('unitsCount')}</Badge>\n            <Badge variant='secondary'>{building.buildingType}</Badge>\n          </div>\n          <div className='pt-2 flex gap-2'>\n            <Link href={`/manager/buildings/${building.id}/documents`}>\n              <Button size='sm' variant='outline' className='flex-1'>\n                Documents\n              </Button>\n            </Link>\n            <Link href={`/manager/residences?buildingId=${building.id}`}>\n              <Button size='sm' variant='outline' className='flex-1'>\n                Residences\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n/**\n *\n */\ninterface BuildingFormProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  form: any;\n  onSubmit: (data: BuildingFormData) => void;\n  organizations: any[];\n  isSubmitting: boolean;\n  title: string;\n  submitLabel: string;\n  t: (key: string) => string;\n}\n\n/**\n *\n * @param root0\n * @param root0.isOpen\n * @param root0.onOpenChange\n * @param root0.form\n * @param root0.onSubmit\n * @param root0.organizations\n * @param root0.isSubmitting\n * @param root0.title\n * @param root0.submitLabel\n */\nfunction BuildingForm({\n  isOpen,\n  onOpenChange,\n  form,\n  onSubmit,\n  organizations,\n  isSubmitting,\n  title,\n  submitLabel,\n  t,\n}: BuildingFormProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className='max-w-2xl'>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription>\n            {t('fillBuildingInfo')}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n              <FormField\n                control={form.control}\n                name='name'\n                render={({ field }) => (\n                  <FormItem className='md:col-span-2'>\n                    <FormLabel>{t('buildingName')}</FormLabel>\n                    <FormControl>\n                      <Input placeholder={t('enterBuildingName')} {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='address'\n                render={({ field }) => (\n                  <FormItem className='md:col-span-2'>\n                    <FormLabel>{t('buildingAddress')}</FormLabel>\n                    <FormControl>\n                      <Input placeholder={t('enterStreetAddress')} {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='city'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('buildingCity')}</FormLabel>\n                    <FormControl>\n                      <Input placeholder={t('enterCity')} {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='province'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('buildingProvince')}</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('selectProvince')} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value='QC'>Quebec</SelectItem>\n                        <SelectItem value='ON'>Ontario</SelectItem>\n                        <SelectItem value='BC'>British Columbia</SelectItem>\n                        <SelectItem value='AB'>Alberta</SelectItem>\n                        <SelectItem value='MB'>Manitoba</SelectItem>\n                        <SelectItem value='SK'>Saskatchewan</SelectItem>\n                        <SelectItem value='NS'>Nova Scotia</SelectItem>\n                        <SelectItem value='NB'>New Brunswick</SelectItem>\n                        <SelectItem value='PE'>Prince Edward Island</SelectItem>\n                        <SelectItem value='NL'>Newfoundland and Labrador</SelectItem>\n                        <SelectItem value='NT'>Northwest Territories</SelectItem>\n                        <SelectItem value='NU'>Nunavut</SelectItem>\n                        <SelectItem value='YT'>Yukon</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='postalCode'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('buildingPostalCode')}</FormLabel>\n                    <FormControl>\n                      <Input placeholder={t('enterPostalCode')} {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='buildingType'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('buildingType')}</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('selectBuildingType')} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value='condo'>{t('condoType')}</SelectItem>\n                        <SelectItem value='appartement'>{t('appartementType')}</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='totalUnits'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('totalUnits')}</FormLabel>\n                    <FormControl>\n                      <Input\n                        type='number'\n                        placeholder='Enter total units'\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='organizationId'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('organizationLabel')}</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('selectOrganization')} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {organizations.map((org) => (\n                          <SelectItem key={org.id} value={org.id}>\n                            {org.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button type='button' variant='outline' onClick={() => onOpenChange(false)}>\n                {t('cancel')}\n              </Button>\n              <Button type='submit' disabled={isSubmitting}>\n                {isSubmitting ? t('saving') : submitLabel}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n/**\n *\n */\nexport default function Buildings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { t } = useLanguage();\n\n  // Create schema with translations\n  const buildingFormSchema = z.object({\n    name: z.string().min(1, t('buildingNameRequired')).max(255, t('nameTooLong')),\n    address: z.string().min(1, t('addressRequired')).max(500, t('addressTooLong')),\n    city: z.string().min(1, t('cityRequired')).max(100, t('cityTooLong')),\n    province: z.string().min(1, t('provinceRequired')).max(100, t('provinceTooLong')),\n    postalCode: z.string().min(1, t('postalCodeRequired')).max(20, t('postalCodeTooLong')),\n    buildingType: z.enum(['condo', 'appartement']),\n    totalUnits: z\n      .number()\n      .int()\n      .min(1, t('mustHaveAtLeastOneUnit'))\n      .max(300, t('maximumUnitsAllowed')),\n    organizationId: z.string().min(1, t('organizationRequired')),\n  });\n\n  // State variables\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingBuilding, setEditingBuilding] = useState<BuildingData | null>(null);\n  const [deletingBuilding, setDeletingBuilding] = useState<BuildingData | null>(null);\n\n  // Get current user\n  const { data: user } = useQuery({\n    queryKey: ['/api/auth/user'],\n    queryFn: () => apiRequest('GET', '/api/auth/user') as Promise<any>,\n  });\n\n  // Fetch organizations for form\n  const { data: organizations = [] } = useQuery({\n    queryKey: ['/api/organizations'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/organizations');\n      return await response.json();\n    },\n  });\n\n  // Fetch buildings using the working manager endpoint\n  const {\n    data: buildingsData,\n    isLoading,\n    error: _error,\n  } = useQuery({\n    queryKey: ['/api/manager/buildings'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/manager/buildings');\n      return await response.json();\n    },\n  });\n\n  // Extract buildings array from the wrapped response\n  const buildings = (buildingsData as any)?.buildings || [];\n\n  // Filter buildings based on search\n  const filteredBuildings = useMemo(() => {\n    if (!Array.isArray(buildings)) {\n      return [];\n    }\n    return buildings.filter(\n      (building) =>\n        building.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        building.address.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [buildings, searchTerm]);\n\n  // Form for creating buildings\n  const form = useForm<BuildingFormData>({\n    resolver: zodResolver(buildingFormSchema),\n    defaultValues: {\n      name: '',\n      address: '',\n      city: '',\n      province: 'QC',\n      postalCode: '',\n      buildingType: 'condo',\n      totalUnits: 1,\n      organizationId: '',\n    },\n  });\n\n  // Form for editing buildings\n  const editForm = useForm<BuildingFormData>({\n    resolver: zodResolver(buildingFormSchema),\n  });\n\n  // Mutations\n  const createBuildingMutation = useMutation({\n    mutationFn: (data: BuildingFormData) => apiRequest('POST', '/api/admin/buildings', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/manager/buildings'] });\n      setIsAddDialogOpen(false);\n      form.reset();\n      toast({\n        title: 'Success',\n        description: 'Building created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create building',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateBuildingMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: BuildingFormData }) =>\n      apiRequest('PUT', `/api/admin/buildings/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/manager/buildings'] });\n      setIsEditDialogOpen(false);\n      setEditingBuilding(null);\n      editForm.reset();\n      toast({\n        title: 'Success',\n        description: 'Building updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update building',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteBuildingMutation = useMutation({\n    mutationFn: (buildingId: string) => apiRequest('DELETE', `/api/admin/buildings/${buildingId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/manager/buildings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/buildings'] });\n      setDeletingBuilding(null);\n      toast({\n        title: 'Success',\n        description: 'Building deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete building',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Event handlers\n  const handleCreateBuilding = async (data: BuildingFormData) => {\n    createBuildingMutation.mutate(data);\n  };\n\n  const handleEditBuilding = (building: BuildingData) => {\n    setEditingBuilding(building);\n    editForm.reset({\n      name: building.name,\n      address: building.address,\n      city: building.city,\n      province: building.province,\n      postalCode: building.postalCode,\n      buildingType: building.buildingType as any,\n      totalUnits: building.totalUnits,\n      organizationId: building.organizationId,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateBuilding = async (data: BuildingFormData) => {\n    if (editingBuilding) {\n      updateBuildingMutation.mutate({ id: editingBuilding.id, data });\n    }\n  };\n\n  const handleDeleteBuilding = (building: BuildingData) => {\n    setDeletingBuilding(building);\n  };\n\n  const confirmDeleteBuilding = () => {\n    if (deletingBuilding) {\n      deleteBuildingMutation.mutate(deletingBuilding.id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className='flex-1 flex flex-col overflow-hidden'>\n        <Header title='Buildings' subtitle='Loading buildings...' />\n        <div className='flex-1 overflow-auto p-6'>\n          <div className='text-center py-8'>Loading buildings...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (_error) {\n    return (\n      <div className='flex-1 flex flex-col overflow-hidden'>\n        <Header title='Buildings' subtitle='Error loading buildings' />\n\n        <div className='flex-1 overflow-auto p-6'>\n          <div className='max-w-4xl mx-auto'>\n            <Card>\n              <CardContent className='p-8 text-center'>\n                <Building className='w-16 h-16 mx-auto text-red-400 mb-4' />\n                <h3 className='text-lg font-semibold text-red-600 mb-2'>Error Loading Buildings</h3>\n                <p className='text-red-500 mb-4'>\n                  Failed to load buildings data. Please try again later.\n                </p>\n                <Badge variant='destructive'>Error</Badge>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='flex-1 flex flex-col overflow-hidden'>\n      <Header\n        title={t('buildings')}\n        subtitle={t('manageBuildings')}\n      />\n\n      <div className='flex-1 overflow-auto p-6'>\n        <div className='max-w-6xl mx-auto space-y-6'>\n          {/* Search and Add Building Controls */}\n          <div className='flex flex-col sm:flex-row gap-4 items-center justify-between'>\n            <div className='relative w-full sm:w-96'>\n              <Search className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4' />\n              <Input\n                placeholder={t('searchBuildingsAddress')}\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className='pl-10'\n              />\n            </div>\n\n            {user?.role === 'admin' && (\n              <Button onClick={() => setIsAddDialogOpen(true)}>\n                <Plus className='w-4 h-4 mr-2' />\n                {t('addBuilding')}\n              </Button>\n            )}\n          </div>\n\n          {/* Buildings Grid */}\n          {filteredBuildings.length > 0 ? (\n            <div className='grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6'>\n              {filteredBuildings.map((building) => (\n                <BuildingCard\n                  key={building.id}\n                  building={building}\n                  userRole={user?.role}\n                  onEdit={handleEditBuilding}\n                  onDelete={handleDeleteBuilding}\n                  t={t}\n                />\n              ))}\n            </div>\n          ) : (\n            <NoDataCard\n              icon={Building}\n              titleKey=\"noBuildingsFound\"\n              descriptionKey={user?.role === 'admin' ? 'noBuildingsAdminMessage' : 'noBuildingsUserMessage'}\n              badgeKey=\"noData\"\n              testId=\"no-buildings-message\"\n            />\n          )}\n\n          {/* Add Building Dialog */}\n          <BuildingForm\n            isOpen={isAddDialogOpen}\n            onOpenChange={setIsAddDialogOpen}\n            form={form}\n            onSubmit={handleCreateBuilding}\n            organizations={organizations}\n            isSubmitting={createBuildingMutation.isPending}\n            title={t('addBuilding')}\n            submitLabel={t('createBuilding')}\n            t={t}\n          />\n\n          {/* Edit Building Dialog */}\n          <BuildingForm\n            isOpen={isEditDialogOpen}\n            onOpenChange={setIsEditDialogOpen}\n            form={editForm}\n            onSubmit={handleUpdateBuilding}\n            organizations={organizations}\n            isSubmitting={updateBuildingMutation.isPending}\n            title={t('editBuilding')}\n            submitLabel={t('save')}\n            t={t}\n          />\n\n          {/* Delete Confirmation Dialog */}\n          <Dialog open={!!deletingBuilding} onOpenChange={() => setDeletingBuilding(null)}>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Delete Building</DialogTitle>\n                <DialogDescription>\n                  Are you sure you want to delete \"{deletingBuilding?.name}\"? This action cannot be\n                  undone.\n                </DialogDescription>\n              </DialogHeader>\n              <DialogFooter>\n                <Button variant='outline' onClick={() => setDeletingBuilding(null)}>\n                  Cancel\n                </Button>\n                <Button\n                  variant='destructive'\n                  onClick={confirmDeleteBuilding}\n                  disabled={deleteBuildingMutation.isPending}\n                >\n                  {deleteBuildingMutation.isPending ? 'Deleting...' : 'Delete'}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"version":3}