0307af41b16346624c39f0de18eed1a9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockFormData = exports.createMockBuilding = exports.createMockOrganization = exports.createMockUser = exports.render = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
// Mock providers that match the real application structure
const TestLanguageProvider = ({ children }) => {
    return (0, jsx_runtime_1.jsx)("div", { "data-testid": "language-provider", children: children });
};
const TestAuthProvider = ({ children }) => {
    return (0, jsx_runtime_1.jsx)("div", { "data-testid": "auth-provider", children: children });
};
const TestMobileMenuProvider = ({ children }) => {
    return (0, jsx_runtime_1.jsx)("div", { "data-testid": "mobile-menu-provider", children: children });
};
const AllTheProviders = ({ children }) => {
    const queryClient = new react_query_1.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
            },
            mutations: {
                retry: false,
            },
        },
    });
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: (0, jsx_runtime_1.jsx)(TestLanguageProvider, { children: (0, jsx_runtime_1.jsx)(TestAuthProvider, { children: (0, jsx_runtime_1.jsx)(TestMobileMenuProvider, { children: children }) }) }) }));
};
const customRender = (ui, options) => (0, react_2.render)(ui, { wrapper: AllTheProviders, ...options });
exports.render = customRender;
// Re-export everything
__exportStar(require("@testing-library/react"), exports);
// Create mock user data for tests
const createMockUser = (overrides = {}) => ({
    id: 'test-user-id',
    username: 'testuser',
    email: 'test@example.com',
    role: 'admin',
    firstName: 'Test',
    lastName: 'User',
    language: 'en',
    ...overrides,
});
exports.createMockUser = createMockUser;
// Create mock organization data for tests
const createMockOrganization = (overrides = {}) => ({
    id: 'test-org-id',
    name: 'Test Organization',
    type: 'property_management',
    ...overrides,
});
exports.createMockOrganization = createMockOrganization;
// Create mock building data for tests
const createMockBuilding = (overrides = {}) => ({
    id: 'test-building-id',
    name: 'Test Building',
    organizationId: 'test-org-id',
    address: '123 Test St',
    city: 'Montreal',
    province: 'QC',
    postalCode: 'H1A 1A1',
    ...overrides,
});
exports.createMockBuilding = createMockBuilding;
// Mock form data helpers
const createMockFormData = (overrides = {}) => ({
    title: 'Test Form',
    description: 'Test description',
    ...overrides,
});
exports.createMockFormData = createMockFormData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91dGlscy90ZXN0LXV0aWxzLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsa0RBQStEO0FBQy9ELHVEQUF5RTtBQUV6RSwyREFBMkQ7QUFDM0QsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFpQyxFQUFFLEVBQUU7SUFDM0UsT0FBTywrQ0FBaUIsbUJBQW1CLFlBQUUsUUFBUSxHQUFPLENBQUM7QUFDL0QsQ0FBQyxDQUFDO0FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFpQyxFQUFFLEVBQUU7SUFDdkUsT0FBTywrQ0FBaUIsZUFBZSxZQUFFLFFBQVEsR0FBTyxDQUFDO0FBQzNELENBQUMsQ0FBQztBQUVGLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBaUMsRUFBRSxFQUFFO0lBQzdFLE9BQU8sK0NBQWlCLHNCQUFzQixZQUFFLFFBQVEsR0FBTyxDQUFDO0FBQ2xFLENBQUMsQ0FBQztBQU1GLE1BQU0sZUFBZSxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQXdCLEVBQUUsRUFBRTtJQUM3RCxNQUFNLFdBQVcsR0FBRyxJQUFJLHlCQUFXLENBQUM7UUFDbEMsY0FBYyxFQUFFO1lBQ2QsT0FBTyxFQUFFO2dCQUNQLEtBQUssRUFBRSxLQUFLO2FBQ2I7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QsS0FBSyxFQUFFLEtBQUs7YUFDYjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUNMLHVCQUFDLGlDQUFtQixJQUFDLE1BQU0sRUFBRSxXQUFXLFlBQ3RDLHVCQUFDLG9CQUFvQixjQUNuQix1QkFBQyxnQkFBZ0IsY0FDZix1QkFBQyxzQkFBc0IsY0FDcEIsUUFBUSxHQUNjLEdBQ1IsR0FDRSxHQUNILENBQ3ZCLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxDQUNuQixFQUFzQixFQUN0QixPQUF3QyxFQUN4QyxFQUFFLENBQUMsSUFBQSxjQUFNLEVBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFNakMsOEJBQU07QUFKL0IsdUJBQXVCO0FBQ3ZCLHlEQUF1QztBQUt2QyxrQ0FBa0M7QUFDM0IsTUFBTSxjQUFjLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELEVBQUUsRUFBRSxjQUFjO0lBQ2xCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLEtBQUssRUFBRSxrQkFBa0I7SUFDekIsSUFBSSxFQUFFLE9BQWdCO0lBQ3RCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLFFBQVEsRUFBRSxNQUFNO0lBQ2hCLFFBQVEsRUFBRSxJQUFhO0lBQ3ZCLEdBQUcsU0FBUztDQUNiLENBQUMsQ0FBQztBQVRVLFFBQUEsY0FBYyxrQkFTeEI7QUFFSCwwQ0FBMEM7QUFDbkMsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekQsRUFBRSxFQUFFLGFBQWE7SUFDakIsSUFBSSxFQUFFLG1CQUFtQjtJQUN6QixJQUFJLEVBQUUscUJBQThCO0lBQ3BDLEdBQUcsU0FBUztDQUNiLENBQUMsQ0FBQztBQUxVLFFBQUEsc0JBQXNCLDBCQUtoQztBQUVILHNDQUFzQztBQUMvQixNQUFNLGtCQUFrQixHQUFHLENBQUMsU0FBUyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyRCxFQUFFLEVBQUUsa0JBQWtCO0lBQ3RCLElBQUksRUFBRSxlQUFlO0lBQ3JCLGNBQWMsRUFBRSxhQUFhO0lBQzdCLE9BQU8sRUFBRSxhQUFhO0lBQ3RCLElBQUksRUFBRSxVQUFVO0lBQ2hCLFFBQVEsRUFBRSxJQUFJO0lBQ2QsVUFBVSxFQUFFLFNBQVM7SUFDckIsR0FBRyxTQUFTO0NBQ2IsQ0FBQyxDQUFDO0FBVFUsUUFBQSxrQkFBa0Isc0JBUzVCO0FBRUgseUJBQXlCO0FBQ2xCLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELEtBQUssRUFBRSxXQUFXO0lBQ2xCLFdBQVcsRUFBRSxrQkFBa0I7SUFDL0IsR0FBRyxTQUFTO0NBQ2IsQ0FBQyxDQUFDO0FBSlUsUUFBQSxrQkFBa0Isc0JBSTVCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdGVzdHMvdXRpbHMvdGVzdC11dGlscy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgUmVuZGVyT3B0aW9ucyB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuXG4vLyBNb2NrIHByb3ZpZGVycyB0aGF0IG1hdGNoIHRoZSByZWFsIGFwcGxpY2F0aW9uIHN0cnVjdHVyZVxuY29uc3QgVGVzdExhbmd1YWdlUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4ge1xuICByZXR1cm4gPGRpdiBkYXRhLXRlc3RpZD1cImxhbmd1YWdlLXByb3ZpZGVyXCI+e2NoaWxkcmVufTwvZGl2Pjtcbn07XG5cbmNvbnN0IFRlc3RBdXRoUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4ge1xuICByZXR1cm4gPGRpdiBkYXRhLXRlc3RpZD1cImF1dGgtcHJvdmlkZXJcIj57Y2hpbGRyZW59PC9kaXY+O1xufTtcblxuY29uc3QgVGVzdE1vYmlsZU1lbnVQcm92aWRlciA9ICh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSA9PiB7XG4gIHJldHVybiA8ZGl2IGRhdGEtdGVzdGlkPVwibW9iaWxlLW1lbnUtcHJvdmlkZXJcIj57Y2hpbGRyZW59PC9kaXY+O1xufTtcblxuaW50ZXJmYWNlIEFsbFRoZVByb3ZpZGVyc1Byb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuY29uc3QgQWxsVGhlUHJvdmlkZXJzID0gKHsgY2hpbGRyZW4gfTogQWxsVGhlUHJvdmlkZXJzUHJvcHMpID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoe1xuICAgIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgICBxdWVyaWVzOiB7XG4gICAgICAgIHJldHJ5OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBtdXRhdGlvbnM6IHtcbiAgICAgICAgcmV0cnk6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgPFRlc3RMYW5ndWFnZVByb3ZpZGVyPlxuICAgICAgICA8VGVzdEF1dGhQcm92aWRlcj5cbiAgICAgICAgICA8VGVzdE1vYmlsZU1lbnVQcm92aWRlcj5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L1Rlc3RNb2JpbGVNZW51UHJvdmlkZXI+XG4gICAgICAgIDwvVGVzdEF1dGhQcm92aWRlcj5cbiAgICAgIDwvVGVzdExhbmd1YWdlUHJvdmlkZXI+XG4gICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICApO1xufTtcblxuY29uc3QgY3VzdG9tUmVuZGVyID0gKFxuICB1aTogUmVhY3QuUmVhY3RFbGVtZW50LFxuICBvcHRpb25zPzogT21pdDxSZW5kZXJPcHRpb25zLCAnd3JhcHBlcic+XG4pID0+IHJlbmRlcih1aSwgeyB3cmFwcGVyOiBBbGxUaGVQcm92aWRlcnMsIC4uLm9wdGlvbnMgfSk7XG5cbi8vIFJlLWV4cG9ydCBldmVyeXRoaW5nXG5leHBvcnQgKiBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcblxuLy8gT3ZlcnJpZGUgcmVuZGVyIG1ldGhvZFxuZXhwb3J0IHsgY3VzdG9tUmVuZGVyIGFzIHJlbmRlciB9O1xuXG4vLyBDcmVhdGUgbW9jayB1c2VyIGRhdGEgZm9yIHRlc3RzXG5leHBvcnQgY29uc3QgY3JlYXRlTW9ja1VzZXIgPSAob3ZlcnJpZGVzID0ge30pID0+ICh7XG4gIGlkOiAndGVzdC11c2VyLWlkJyxcbiAgdXNlcm5hbWU6ICd0ZXN0dXNlcicsXG4gIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gIHJvbGU6ICdhZG1pbicgYXMgY29uc3QsXG4gIGZpcnN0TmFtZTogJ1Rlc3QnLFxuICBsYXN0TmFtZTogJ1VzZXInLFxuICBsYW5ndWFnZTogJ2VuJyBhcyBjb25zdCxcbiAgLi4ub3ZlcnJpZGVzLFxufSk7XG5cbi8vIENyZWF0ZSBtb2NrIG9yZ2FuaXphdGlvbiBkYXRhIGZvciB0ZXN0c1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tPcmdhbml6YXRpb24gPSAob3ZlcnJpZGVzID0ge30pID0+ICh7XG4gIGlkOiAndGVzdC1vcmctaWQnLFxuICBuYW1lOiAnVGVzdCBPcmdhbml6YXRpb24nLFxuICB0eXBlOiAncHJvcGVydHlfbWFuYWdlbWVudCcgYXMgY29uc3QsXG4gIC4uLm92ZXJyaWRlcyxcbn0pO1xuXG4vLyBDcmVhdGUgbW9jayBidWlsZGluZyBkYXRhIGZvciB0ZXN0c1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tCdWlsZGluZyA9IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcbiAgaWQ6ICd0ZXN0LWJ1aWxkaW5nLWlkJyxcbiAgbmFtZTogJ1Rlc3QgQnVpbGRpbmcnLFxuICBvcmdhbml6YXRpb25JZDogJ3Rlc3Qtb3JnLWlkJyxcbiAgYWRkcmVzczogJzEyMyBUZXN0IFN0JyxcbiAgY2l0eTogJ01vbnRyZWFsJyxcbiAgcHJvdmluY2U6ICdRQycsXG4gIHBvc3RhbENvZGU6ICdIMUEgMUExJyxcbiAgLi4ub3ZlcnJpZGVzLFxufSk7XG5cbi8vIE1vY2sgZm9ybSBkYXRhIGhlbHBlcnNcbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrRm9ybURhdGEgPSAob3ZlcnJpZGVzID0ge30pID0+ICh7XG4gIHRpdGxlOiAnVGVzdCBGb3JtJyxcbiAgZGVzY3JpcHRpb246ICdUZXN0IGRlc2NyaXB0aW9uJyxcbiAgLi4ub3ZlcnJpZGVzLFxufSk7Il0sInZlcnNpb24iOjN9