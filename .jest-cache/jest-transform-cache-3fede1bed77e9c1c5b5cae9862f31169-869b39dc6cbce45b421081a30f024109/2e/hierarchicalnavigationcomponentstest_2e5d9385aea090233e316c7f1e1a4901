2ee823995f034c55f042f46806de5115
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
globals_1.jest.mock('wouter', () => ({
    useLocation: () => [mockLocation, mockSetLocation],
    useSearch: () => mockSearch,
}));
// Mock the SelectionGrid import
globals_1.jest.mock('@/components/ui/selection-grid', () => ({
    SelectionGrid: MockSelectionGrid,
}));
// Mock lucide-react icons
globals_1.jest.mock('lucide-react', () => ({
    ArrowLeft: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "arrow-left-icon", children: "ArrowLeft" }),
    Building: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "building-icon", children: "Building" }),
    MapPin: () => (0, jsx_runtime_1.jsx)("div", { "data-testid": "map-pin-icon", children: "MapPin" }),
}));
// Mock UI components
globals_1.jest.mock('@/components/ui/button', () => ({
    Button: ({ children, onClick, variant, size, className, 'data-testid': testId, ...props }) => ((0, jsx_runtime_1.jsx)("button", { onClick: onClick, "data-testid": testId, className: className, "data-variant": variant, "data-size": size, ...props, children: children })),
}));
globals_1.jest.mock('@/components/layout/header', () => ({
    Header: ({ title, subtitle }) => ((0, jsx_runtime_1.jsxs)("header", { "data-testid": "header", children: [(0, jsx_runtime_1.jsx)("h1", { "data-testid": "header-title", children: title }), (0, jsx_runtime_1.jsx)("p", { "data-testid": "header-subtitle", children: subtitle })] })),
}));
/**
 * Hierarchical Navigation Components Integration Tests
 * Tests the withHierarchicalSelection HOC and integrated components
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
// Mock wouter for routing
const mockSetLocation = globals_1.jest.fn();
const mockLocation = '/residents/building';
const mockSearch = '';
// Mock the SelectionGrid component
const MockSelectionGrid = ({ title, items, onSelectItem, isLoading }) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "selection-grid", children: [(0, jsx_runtime_1.jsx)("h3", { "data-testid": "selection-title", children: title }), isLoading && (0, jsx_runtime_1.jsx)("div", { "data-testid": "loading-spinner", children: "Loading..." }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "items-grid", children: items.map((item, index) => ((0, jsx_runtime_1.jsx)("button", { "data-testid": `item-${item.id || index}`, onClick: () => onSelectItem(item.id || `item-${index}`), className: "selection-item", children: item.name || item.title || `Item ${index + 1}` }, item.id || index))) })] }));
// Test component that simulates a hierarchical page
const TestComponent = ({ buildingId, showBackButton, backButtonLabel, onBack }) => ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "test-component", children: [showBackButton && onBack && ((0, jsx_runtime_1.jsx)("div", { "data-testid": "back-button-container", children: (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-back", onClick: onBack, children: backButtonLabel }) })), buildingId ? ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "building-details", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Building Details" }), (0, jsx_runtime_1.jsx)("p", { "data-testid": "building-id", children: buildingId })] })) : ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "selection-screen", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Select Building" }), (0, jsx_runtime_1.jsx)("p", { children: "Choose a building to view details" })] }))] }));
// Mock the withHierarchicalSelection HOC
const withHierarchicalSelection = (Component, config) => {
    return (props) => {
        const [currentBuildingId, setCurrentBuildingId] = react_1.default.useState(null);
        const [showBuildings, setShowBuildings] = react_1.default.useState(false);
        // Mock data
        const mockBuildings = [
            { id: 'building-1', name: 'Building A' },
            { id: 'building-2', name: 'Building B' },
        ];
        // Simulate URL parsing
        react_1.default.useEffect(() => {
            const urlParams = new URLSearchParams(window.location.search);
            const buildingFromUrl = urlParams.get('building');
            if (buildingFromUrl) {
                setCurrentBuildingId(buildingFromUrl);
                setShowBuildings(false);
            }
            else {
                setShowBuildings(true);
            }
        }, []);
        const handleBuildingSelect = (buildingId) => {
            setCurrentBuildingId(buildingId);
            setShowBuildings(false);
            // Simulate URL update
            window.history.pushState({}, '', `?building=${buildingId}`);
        };
        const handleBack = () => {
            setCurrentBuildingId(null);
            setShowBuildings(true);
            window.history.pushState({}, '', '/residents/building');
            mockSetLocation('/residents/building');
        };
        if (showBuildings) {
            return ((0, jsx_runtime_1.jsx)("div", { "data-testid": "hierarchical-selection", children: (0, jsx_runtime_1.jsx)(MockSelectionGrid, { title: "Select Building", items: mockBuildings, onSelectItem: handleBuildingSelect, isLoading: false }) }));
        }
        // Determine if should show back button (mock logic)
        const shouldShowBackButton = currentBuildingId && mockBuildings.length > 1;
        return ((0, jsx_runtime_1.jsx)(Component, { ...props, buildingId: currentBuildingId, showBackButton: shouldShowBackButton, backButtonLabel: "Building", onBack: handleBack }));
    };
};
const WrappedTestComponent = withHierarchicalSelection(TestComponent, {
    hierarchy: ['building'],
});
(0, globals_1.describe)('Hierarchical Navigation Components', () => {
    let queryClient;
    (0, globals_1.beforeEach)(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false,
                },
            },
        });
        // Reset mocks
        globals_1.jest.clearAllMocks();
        mockSetLocation.mockClear();
        // Mock window.history.pushState
        Object.defineProperty(window, 'history', {
            value: {
                pushState: globals_1.jest.fn(),
            },
            writable: true,
        });
        // Reset URL
        Object.defineProperty(window, 'location', {
            value: {
                search: '',
                pathname: '/residents/building',
            },
            writable: true,
        });
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    const renderWithProviders = (component) => {
        return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    (0, globals_1.describe)('Building Selection Screen', () => {
        (0, globals_1.test)('should render building selection when no building is selected', () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            (0, globals_1.expect)(react_2.screen.getByTestId('hierarchical-selection')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-grid')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-title')).toHaveTextContent('Select Building');
            // Should show building options
            (0, globals_1.expect)(react_2.screen.getByTestId('item-building-1')).toHaveTextContent('Building A');
            (0, globals_1.expect)(react_2.screen.getByTestId('item-building-2')).toHaveTextContent('Building B');
        });
        (0, globals_1.test)('should handle building selection', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            const buildingAButton = react_2.screen.getByTestId('item-building-1');
            react_2.fireEvent.click(buildingAButton);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('test-component')).toBeInTheDocument();
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details')).toBeInTheDocument();
                (0, globals_1.expect)(react_2.screen.getByTestId('building-id')).toHaveTextContent('building-1');
            });
            // Should update URL
            (0, globals_1.expect)(window.history.pushState).toHaveBeenCalledWith({}, '', '?building=building-1');
        });
        (0, globals_1.test)('should not show loading spinner when not loading', () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            (0, globals_1.expect)(react_2.screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Building Details Screen', () => {
        (0, globals_1.test)('should render building details when building is selected', () => {
            // Mock URL with building parameter
            Object.defineProperty(window, 'location', {
                value: {
                    search: '?building=building-1',
                    pathname: '/residents/building',
                },
                writable: true,
            });
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            (0, globals_1.expect)(react_2.screen.getByTestId('test-component')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('building-details')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('building-id')).toHaveTextContent('building-1');
        });
        (0, globals_1.test)('should show back button when building is selected and multiple buildings exist', () => {
            Object.defineProperty(window, 'location', {
                value: {
                    search: '?building=building-1',
                    pathname: '/residents/building',
                },
                writable: true,
            });
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            (0, globals_1.expect)(react_2.screen.getByTestId('back-button-container')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('button-back')).toHaveTextContent('Building');
        });
        (0, globals_1.test)('should handle back button click', async () => {
            Object.defineProperty(window, 'location', {
                value: {
                    search: '?building=building-1',
                    pathname: '/residents/building',
                },
                writable: true,
            });
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            const backButton = react_2.screen.getByTestId('button-back');
            react_2.fireEvent.click(backButton);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('hierarchical-selection')).toBeInTheDocument();
                (0, globals_1.expect)(react_2.screen.getByTestId('selection-grid')).toBeInTheDocument();
            });
            // Should update URL and router
            (0, globals_1.expect)(window.history.pushState).toHaveBeenCalledWith({}, '', '/residents/building');
            (0, globals_1.expect)(mockSetLocation).toHaveBeenCalledWith('/residents/building');
        });
    });
    (0, globals_1.describe)('Smart Back Button Logic', () => {
        (0, globals_1.test)('should not show back button when only one building exists', () => {
            // Mock only one building
            const SingleBuildingComponent = withHierarchicalSelection(TestComponent, {
                hierarchy: ['building'],
            });
            // Override the component to simulate single building scenario
            const SingleBuildingTestComponent = (props) => {
                const [currentBuildingId, setCurrentBuildingId] = react_1.default.useState('building-1');
                // Mock single building scenario - should not show back button
                const shouldShowBackButton = false; // Single building = no back button
                return ((0, jsx_runtime_1.jsx)(TestComponent, { ...props, buildingId: currentBuildingId, showBackButton: shouldShowBackButton, backButtonLabel: "Building", onBack: () => { } }));
            };
            renderWithProviders((0, jsx_runtime_1.jsx)(SingleBuildingTestComponent, {}));
            (0, globals_1.expect)(react_2.screen.queryByTestId('back-button-container')).not.toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.queryByTestId('button-back')).not.toBeInTheDocument();
        });
        (0, globals_1.test)('should show back button when multiple buildings exist', () => {
            Object.defineProperty(window, 'location', {
                value: {
                    search: '?building=building-1',
                    pathname: '/residents/building',
                },
                writable: true,
            });
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            // Should show back button because mock has 2 buildings
            (0, globals_1.expect)(react_2.screen.getByTestId('back-button-container')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('button-back')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('URL Navigation', () => {
        (0, globals_1.test)('should parse building ID from URL parameters', () => {
            Object.defineProperty(window, 'location', {
                value: {
                    search: '?building=test-building-123',
                    pathname: '/residents/building',
                },
                writable: true,
            });
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            (0, globals_1.expect)(react_2.screen.getByTestId('building-details')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('building-id')).toHaveTextContent('test-building-123');
        });
        (0, globals_1.test)('should show selection screen when no URL parameters', () => {
            Object.defineProperty(window, 'location', {
                value: {
                    search: '',
                    pathname: '/residents/building',
                },
                writable: true,
            });
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            (0, globals_1.expect)(react_2.screen.getByTestId('hierarchical-selection')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-grid')).toBeInTheDocument();
        });
        (0, globals_1.test)('should handle URL updates correctly', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(WrappedTestComponent, {}));
            // Start with selection screen
            (0, globals_1.expect)(react_2.screen.getByTestId('hierarchical-selection')).toBeInTheDocument();
            // Select a building
            const buildingButton = react_2.screen.getByTestId('item-building-2');
            react_2.fireEvent.click(buildingButton);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(window.history.pushState).toHaveBeenCalledWith({}, '', '?building=building-2');
            });
            // Go back
            const backButton = react_2.screen.getByTestId('button-back');
            react_2.fireEvent.click(backButton);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(window.history.pushState).toHaveBeenCalledWith({}, '', '/residents/building');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,