{"file":"/home/runner/workspace/tests/unit/dashboard-quick-actions-routing.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/dashboard-quick-actions-routing.test.ts"],"sourcesContent":["/**\n * Dashboard Quick Actions Routing Validation Test\n * \n * This test validates that all cards in the /dashboard/quick-actions page\n * have correct routing paths that match the routes defined in App.tsx.\n * \n * IDENTIFIED ROUTING ISSUES:\n * - Tenant/Resident Maintenance cards point to '/residents/maintenance' but route is '/residents/demands'\n * - Tenant/Resident Documents cards point to '/residents/documents' but no such generic route exists\n * - Some cards may point to non-existent routes causing 404 errors\n */\n\nimport { describe, it, expect } from '@jest/globals';\n\ndescribe('Dashboard Quick Actions Routing Validation', () => {\n  /**\n   * This test documents the expected vs actual routing behavior\n   * for dashboard cards based on code analysis of dashboard.tsx and App.tsx\n   */\n\n  describe('Admin Card Routes', () => {\n    it('should validate admin card routes exist in App.tsx', () => {\n      const adminRoutes = [\n        { cardName: 'System Management', expectedPath: '/admin/organizations', exists: true },\n        { cardName: 'Organization Overview', expectedPath: '/admin/organizations', exists: true },\n        { cardName: 'User Management', expectedPath: '/admin/organizations', exists: true }\n      ];\n\n      adminRoutes.forEach(route => {\n        expect(route.exists).toBe(true);\n      });\n    });\n  });\n\n  describe('Manager Card Routes', () => {\n    it('should validate manager card routes exist in App.tsx', () => {\n      const managerRoutes = [\n        { cardName: 'Buildings', expectedPath: '/manager/buildings', exists: true },\n        { cardName: 'Financial Reports', expectedPath: '/manager/budget', exists: true },\n        { cardName: 'Maintenance', expectedPath: '/manager/demands', exists: true }\n      ];\n\n      managerRoutes.forEach(route => {\n        expect(route.exists).toBe(true);\n      });\n    });\n  });\n\n  describe('Tenant Card Routes - POTENTIAL ISSUES', () => {\n    it('should identify tenant card routing problems', () => {\n      const tenantRoutes = [\n        { \n          cardName: 'My Residence', \n          dashboardPath: '/residents/residence',\n          appRoute: '/residents/residence',\n          exists: true,\n          issue: false\n        },\n        { \n          cardName: 'Maintenance Requests', \n          dashboardPath: '/residents/maintenance',\n          appRoute: '/residents/demands',\n          exists: false,\n          issue: true,\n          solution: 'Change dashboard.tsx to use /residents/demands instead of /residents/maintenance'\n        },\n        { \n          cardName: 'Documents', \n          dashboardPath: '/residents/documents',\n          appRoute: 'No generic route - use /residents/residence/documents',\n          exists: false,\n          issue: true,\n          solution: 'Change dashboard.tsx to use /residents/residence/documents or similar'\n        }\n      ];\n\n      const problemRoutes = tenantRoutes.filter(route => route.issue);\n      expect(problemRoutes).toHaveLength(2);\n\n      // Log the issues for visibility\n      console.warn('TENANT ROUTING ISSUES:');\n      problemRoutes.forEach(route => {\n        console.warn(`- ${route.cardName}: ${route.dashboardPath} -> ${route.solution}`);\n      });\n    });\n  });\n\n  describe('Resident Card Routes - POTENTIAL ISSUES', () => {\n    it('should identify resident card routing problems', () => {\n      const residentRoutes = [\n        { \n          cardName: 'My Home', \n          dashboardPath: '/residents/dashboard',\n          appRoute: '/residents/dashboard',\n          exists: true,\n          issue: false\n        },\n        { \n          cardName: 'Maintenance Requests', \n          dashboardPath: '/residents/maintenance',\n          appRoute: '/residents/demands',\n          exists: false,\n          issue: true,\n          solution: 'Change dashboard.tsx to use /residents/demands instead of /residents/maintenance'\n        },\n        { \n          cardName: 'Documents', \n          dashboardPath: '/residents/documents',\n          appRoute: 'No generic route - use /residents/residence/documents or /residents/building/documents',\n          exists: false,\n          issue: true,\n          solution: 'Change dashboard.tsx to use specific document routes'\n        }\n      ];\n\n      const problemRoutes = residentRoutes.filter(route => route.issue);\n      expect(problemRoutes).toHaveLength(2);\n\n      // Log the issues for visibility\n      console.warn('RESIDENT ROUTING ISSUES:');\n      problemRoutes.forEach(route => {\n        console.warn(`- ${route.cardName}: ${route.dashboardPath} -> ${route.solution}`);\n      });\n    });\n  });\n\n  describe('Route Coverage Analysis', () => {\n    it('should analyze available resident routes vs dashboard card paths', () => {\n      const availableResidentRoutes = [\n        '/residents/residence',\n        '/residents/residence/documents',\n        '/residents/residences/:residenceId/documents',\n        '/residents/building',\n        '/residents/building/documents', \n        '/residents/buildings/:buildingId/documents',\n        '/residents/demands',\n        '/residents/dashboard'\n      ];\n\n      const dashboardCardPaths = [\n        '/residents/residence',    // ✅ EXISTS\n        '/residents/maintenance',  // ❌ SHOULD BE /residents/demands\n        '/residents/documents',    // ❌ SHOULD BE SPECIFIC DOCUMENT ROUTE\n        '/residents/dashboard'     // ✅ EXISTS\n      ];\n\n      const missingRoutes = dashboardCardPaths.filter(cardPath => \n        !availableResidentRoutes.includes(cardPath)\n      );\n\n      expect(missingRoutes).toEqual([\n        '/residents/maintenance',\n        '/residents/documents'\n      ]);\n    });\n  });\n\n  describe('Routing Fix Recommendations', () => {\n    it('should provide specific fixes for broken routes', () => {\n      const fixes = [\n        {\n          file: 'client/src/pages/dashboard.tsx',\n          line: 'Around line 117 and 147',\n          currentCode: \"path: '/residents/maintenance'\",\n          fixedCode: \"path: '/residents/demands'\",\n          reason: 'Maintenance requests route is /residents/demands, not /residents/maintenance'\n        },\n        {\n          file: 'client/src/pages/dashboard.tsx', \n          line: 'Around line 125 and 155',\n          currentCode: \"path: '/residents/documents'\",\n          fixedCode: \"path: '/documents' or '/residents/residence/documents'\",\n          reason: 'Generic /residents/documents route does not exist. Use main documents or specific residence documents.'\n        }\n      ];\n\n      expect(fixes).toHaveLength(2);\n      \n      // Output fix recommendations\n      console.log('\\\\n🔧 RECOMMENDED FIXES:');\n      fixes.forEach(fix => {\n        console.log(`File: ${fix.file}`);\n        console.log(`Line: ${fix.line}`);\n        console.log(`Change: ${fix.currentCode} → ${fix.fixedCode}`);\n        console.log(`Reason: ${fix.reason}\\\\n`);\n      });\n    });\n  });\n\n  describe('Working Routes Validation', () => {\n    it('should confirm which routes are correctly configured', () => {\n      const workingRoutes = [\n        // Admin routes (all point to same place - could be improved but functional)\n        '/admin/organizations',\n        \n        // Manager routes  \n        '/manager/buildings',\n        '/manager/budget',\n        '/manager/demands',\n        \n        // Resident routes that work\n        '/residents/residence',\n        '/residents/dashboard',\n        '/residents/demands' // This is the correct maintenance route\n      ];\n\n      // All these routes should be properly configured\n      workingRoutes.forEach(route => {\n        expect(route).toBeTruthy();\n        expect(route.startsWith('/')).toBe(true);\n      });\n\n      console.log('\\\\n✅ WORKING ROUTES:', workingRoutes.join('\\\\n   '));\n    });\n  });\n});"],"version":3}