5dca903ffa32cf0c4e7c19473db0d45d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerRoutes = registerRoutes;
// Main routes file that loads route definitions  
const express_1 = __importDefault(require("express"));
const auth_1 = require("./auth");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const multer_1 = __importDefault(require("multer"));
const index_1 = require("./auth/index");
// Import API route registration functions
const organizations_1 = require("./api/organizations");
const users_1 = require("./api/users");
const buildings_1 = require("./api/buildings");
const documents_1 = require("./api/documents");
const bugs_1 = require("./api/bugs");
const bills_1 = require("./api/bills");
const residences_1 = require("./api/residences");
const demands_1 = require("./api/demands");
const feature_requests_1 = require("./api/feature-requests");
const contacts_1 = require("./api/contacts");
const common_spaces_1 = require("./api/common-spaces");
const permissions_1 = require("./api/permissions");
const demo_management_1 = require("./api/demo-management");
const trial_request_1 = require("./api/trial-request");
const invoices_1 = require("./api/invoices");
const ai_document_analysis_1 = require("./api/ai-document-analysis");
// Configure multer for file uploads
const storage = multer_1.default.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path_1.default.join(process.cwd(), 'uploads', 'demands');
        if (!fs_1.default.existsSync(uploadDir)) {
            fs_1.default.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const extension = path_1.default.extname(file.originalname);
        cb(null, `demand-${uniqueSuffix}${extension}`);
    }
});
const upload = (0, multer_1.default)({
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB limit
        files: 5 // Maximum 5 files
    },
    fileFilter: (req, file, cb) => {
        // Allow images, PDFs, and common document types
        const allowedTypes = [
            'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp',
            'application/pdf',
            'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'text/plain'
        ];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error(`File type ${file.mimetype} not allowed`));
        }
    }
});
async function registerRoutes(app) {
    console.log('🔄 Setting up session middleware...');
    // CRITICAL: Apply session middleware BEFORE authentication routes
    app.use(auth_1.sessionConfig);
    console.log('✅ Session middleware configured');
    console.log('🔄 Loading authentication routes...');
    // Setup authentication routes - session middleware must be applied first
    (0, auth_1.setupAuthRoutes)(app);
    console.log('✅ Authentication routes loaded on /api/auth/');
    // Register all API routes
    console.log('🔄 Loading API routes...');
    (0, organizations_1.registerOrganizationRoutes)(app);
    (0, users_1.registerUserRoutes)(app);
    (0, buildings_1.registerBuildingRoutes)(app);
    (0, documents_1.registerDocumentRoutes)(app);
    (0, bugs_1.registerBugRoutes)(app);
    (0, bills_1.registerBillRoutes)(app);
    (0, residences_1.registerResidenceRoutes)(app);
    (0, demands_1.registerDemandRoutes)(app);
    (0, feature_requests_1.registerFeatureRequestRoutes)(app);
    (0, contacts_1.registerContactRoutes)(app);
    (0, common_spaces_1.registerCommonSpacesRoutes)(app);
    (0, permissions_1.registerPermissionsRoutes)(app);
    (0, demo_management_1.registerDemoManagementRoutes)(app);
    (0, trial_request_1.registerTrialRequestRoutes)(app);
    (0, invoices_1.registerInvoiceRoutes)(app);
    (0, ai_document_analysis_1.registerAiAnalysisRoutes)(app);
    console.log('✅ All API routes registered');
    // Basic API routes
    app.get('/api/health', (req, res) => {
        res.json({ status: 'ok', timestamp: new Date().toISOString() });
    });
    app.post('/api/test', (req, res) => {
        res.json({ message: 'API working', body: req.body });
    });
    // File upload endpoint for demands and other general uploads
    app.post('/api/upload', index_1.requireAuth, upload.array('file', 5), async (req, res) => {
        try {
            const files = req.files;
            if (!files || files.length === 0) {
                return res.status(400).json({ message: 'No files uploaded' });
            }
            // Generate file URLs/paths for the uploaded files
            const fileUrls = files.map(file => {
                return `/uploads/demands/${file.filename}`;
            });
            console.log(`✅ Successfully uploaded ${files.length} files for user ${req.user.id}:`, fileUrls);
            res.json({
                message: 'Files uploaded successfully',
                fileUrls: fileUrls,
                fileCount: files.length
            });
        }
        catch (error) {
            console.error('❌ File upload error:', error);
            res.status(500).json({
                message: 'Failed to upload files',
                error: error.message
            });
        }
    });
    // Serve uploaded files
    app.use('/uploads', express_1.default.static(path_1.default.join(process.cwd(), 'uploads')));
    // Simple production diagnostic endpoint
    app.get('/api/debug/simple', (req, res) => {
        console.log('🔍 Simple debug endpoint called');
        res.json({
            status: 'working',
            timestamp: new Date().toISOString(),
            environment: process.env.NODE_ENV || 'unknown',
            databaseUrl: process.env.DATABASE_URL ? 'present' : 'missing'
        });
    });
    // Complex storage test endpoint  
    app.get('/api/debug/storage', async (req, res) => {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] 🔍 Storage debug endpoint called`);
        try {
            console.log(`[${timestamp}] 📦 Testing storage import...`);
            const { storage } = await Promise.resolve().then(() => __importStar(require('./storage')));
            console.log(`[${timestamp}] ✅ Storage imported successfully`);
            console.log(`[${timestamp}] 🧪 Testing basic storage method...`);
            const testResult = await storage.getDocuments({ residenceId: 'e27ac924-8120-4904-a791-d1e9db544d58' });
            console.log(`[${timestamp}] ✅ Storage test successful`);
            res.json({
                success: true,
                timestamp,
                documentsCount: testResult.length,
                storageType: storage.constructor.name
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                timestamp,
                error: error.message,
                stack: error.stack
            });
        }
    });
    // User info debug endpoint
    app.get('/api/debug/user-info', async (req, res) => {
        try {
            if (!req.session?.userId && !req.session?.user) {
                return res.status(401).json({
                    message: 'No session found',
                    session: req.session
                });
            }
            const user = req.user || req.session?.user;
            const userId = req.session?.userId;
            // Get user from database directly
            const { db } = await Promise.resolve().then(() => __importStar(require('./db')));
            const { users, userOrganizations, organizations } = await Promise.resolve().then(() => __importStar(require('../shared/schema')));
            const { eq } = await Promise.resolve().then(() => __importStar(require('drizzle-orm')));
            const userFromDb = await db
                .select()
                .from(users)
                .where(eq(users.id, userId));
            const userOrgs = await db
                .select({
                organizationId: userOrganizations.organizationId,
                organizationName: organizations.name,
                canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,
                isActive: userOrganizations.isActive,
            })
                .from(userOrganizations)
                .innerJoin(organizations, eq(userOrganizations.organizationId, organizations.id))
                .where(eq(userOrganizations.userId, userId));
            res.json({
                session: {
                    userId: req.session?.userId,
                    hasUser: !!user,
                    userRole: req.session?.userRole,
                },
                userFromMiddleware: user,
                userFromDatabase: userFromDb[0],
                userOrganizations: userOrgs,
                rawSession: req.session
            });
        }
        catch (error) {
            res.status(500).json({
                error: error.message,
                stack: error.stack
            });
        }
    });
    // Static file serving - MUST come after API routes to prevent conflicts
    const distPath = path_1.default.resolve(process.cwd(), 'dist', 'public');
    if (fs_1.default.existsSync(distPath)) {
        console.log('✅ Setting up static file serving from', distPath);
        // Serve static assets with appropriate cache headers
        app.use(express_1.default.static(distPath, {
            // Disable caching for development to ensure fresh files
            setHeaders: (res, path) => {
                if (process.env.NODE_ENV === 'development') {
                    // Development: disable all caching for immediate updates
                    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
                    res.setHeader('Pragma', 'no-cache');
                    res.setHeader('Expires', '0');
                }
                else {
                    // Production: cache assets but allow revalidation
                    if (path.endsWith('.html')) {
                        // HTML files should not be cached to ensure routing works
                        res.setHeader('Cache-Control', 'no-cache, must-revalidate');
                    }
                    else {
                        // Other assets can be cached with revalidation
                        res.setHeader('Cache-Control', 'public, max-age=300, must-revalidate');
                    }
                }
            }
        }));
        // SPA fallback - serve index.html for non-API routes
        app.get('*', (req, res) => {
            // Don't serve index.html for API routes
            if (req.path.startsWith('/api/')) {
                return res.status(404).json({ message: 'API endpoint not found', error: 'API endpoint not found' });
            }
            const indexPath = path_1.default.join(distPath, 'index.html');
            if (fs_1.default.existsSync(indexPath)) {
                // Ensure index.html is never cached
                res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
                res.setHeader('Pragma', 'no-cache');
                res.setHeader('Expires', '0');
                res.sendFile(indexPath);
            }
            else {
                res.status(404).send('Application not found - build missing');
            }
        });
    }
    else {
        console.log('⚠️ Static files not found, only API routes available');
        // Fallback for missing static files
        app.get('*', (req, res) => {
            if (req.path.startsWith('/api/')) {
                return res.status(404).json({ message: 'API endpoint not found', error: 'API endpoint not found' });
            }
            res.status(503).send('Application is starting up...');
        });
    }
    console.log('✅ All routes registered successfully');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxLQUFLLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyxDQUFDO1lBQ3RHLENBQUM7WUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ3hELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUN0RCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc2VydmVyL3JvdXRlcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNYWluIHJvdXRlcyBmaWxlIHRoYXQgbG9hZHMgcm91dGUgZGVmaW5pdGlvbnMgIFxuaW1wb3J0IGV4cHJlc3MsIHsgRXhwcmVzcyB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgc2V0dXBBdXRoUm91dGVzLCBzZXNzaW9uQ29uZmlnIH0gZnJvbSAnLi9hdXRoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBtdWx0ZXIgZnJvbSAnbXVsdGVyJztcbmltcG9ydCB7IHJlcXVpcmVBdXRoIH0gZnJvbSAnLi9hdXRoL2luZGV4JztcblxuLy8gSW1wb3J0IEFQSSByb3V0ZSByZWdpc3RyYXRpb24gZnVuY3Rpb25zXG5pbXBvcnQgeyByZWdpc3Rlck9yZ2FuaXphdGlvblJvdXRlcyB9IGZyb20gJy4vYXBpL29yZ2FuaXphdGlvbnMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJVc2VyUm91dGVzIH0gZnJvbSAnLi9hcGkvdXNlcnMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJCdWlsZGluZ1JvdXRlcyB9IGZyb20gJy4vYXBpL2J1aWxkaW5ncyc7XG5pbXBvcnQgeyByZWdpc3RlckRvY3VtZW50Um91dGVzIH0gZnJvbSAnLi9hcGkvZG9jdW1lbnRzJztcbmltcG9ydCB7IHJlZ2lzdGVyQnVnUm91dGVzIH0gZnJvbSAnLi9hcGkvYnVncyc7XG5pbXBvcnQgeyByZWdpc3RlckJpbGxSb3V0ZXMgfSBmcm9tICcuL2FwaS9iaWxscyc7XG5pbXBvcnQgeyByZWdpc3RlclJlc2lkZW5jZVJvdXRlcyB9IGZyb20gJy4vYXBpL3Jlc2lkZW5jZXMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJEZW1hbmRSb3V0ZXMgfSBmcm9tICcuL2FwaS9kZW1hbmRzJztcbmltcG9ydCB7IHJlZ2lzdGVyRmVhdHVyZVJlcXVlc3RSb3V0ZXMgfSBmcm9tICcuL2FwaS9mZWF0dXJlLXJlcXVlc3RzJztcbmltcG9ydCB7IHJlZ2lzdGVyQ29udGFjdFJvdXRlcyB9IGZyb20gJy4vYXBpL2NvbnRhY3RzJztcbmltcG9ydCB7IHJlZ2lzdGVyQ29tbW9uU3BhY2VzUm91dGVzIH0gZnJvbSAnLi9hcGkvY29tbW9uLXNwYWNlcyc7XG5pbXBvcnQgeyByZWdpc3RlclBlcm1pc3Npb25zUm91dGVzIH0gZnJvbSAnLi9hcGkvcGVybWlzc2lvbnMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJEZW1vTWFuYWdlbWVudFJvdXRlcyB9IGZyb20gJy4vYXBpL2RlbW8tbWFuYWdlbWVudCc7XG5pbXBvcnQgeyByZWdpc3RlclRyaWFsUmVxdWVzdFJvdXRlcyB9IGZyb20gJy4vYXBpL3RyaWFsLXJlcXVlc3QnO1xuaW1wb3J0IHsgcmVnaXN0ZXJJbnZvaWNlUm91dGVzIH0gZnJvbSAnLi9hcGkvaW52b2ljZXMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJBaUFuYWx5c2lzUm91dGVzIH0gZnJvbSAnLi9hcGkvYWktZG9jdW1lbnQtYW5hbHlzaXMnO1xuXG4vLyBDb25maWd1cmUgbXVsdGVyIGZvciBmaWxlIHVwbG9hZHNcbmNvbnN0IHN0b3JhZ2UgPSBtdWx0ZXIuZGlza1N0b3JhZ2Uoe1xuICBkZXN0aW5hdGlvbjogKHJlcSwgZmlsZSwgY2IpID0+IHtcbiAgICBjb25zdCB1cGxvYWREaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3VwbG9hZHMnLCAnZGVtYW5kcycpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyh1cGxvYWREaXIpKSB7XG4gICAgICBmcy5ta2RpclN5bmModXBsb2FkRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgY2IobnVsbCwgdXBsb2FkRGlyKTtcbiAgfSxcbiAgZmlsZW5hbWU6IChyZXEsIGZpbGUsIGNiKSA9PiB7XG4gICAgY29uc3QgdW5pcXVlU3VmZml4ID0gRGF0ZS5ub3coKSArICctJyArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDFFOSk7XG4gICAgY29uc3QgZXh0ZW5zaW9uID0gcGF0aC5leHRuYW1lKGZpbGUub3JpZ2luYWxuYW1lKTtcbiAgICBjYihudWxsLCBgZGVtYW5kLSR7dW5pcXVlU3VmZml4fSR7ZXh0ZW5zaW9ufWApO1xuICB9XG59KTtcblxuY29uc3QgdXBsb2FkID0gbXVsdGVyKHtcbiAgc3RvcmFnZTogc3RvcmFnZSxcbiAgbGltaXRzOiB7XG4gICAgZmlsZVNpemU6IDEwICogMTAyNCAqIDEwMjQsIC8vIDEwTUIgbGltaXRcbiAgICBmaWxlczogNSAvLyBNYXhpbXVtIDUgZmlsZXNcbiAgfSxcbiAgZmlsZUZpbHRlcjogKHJlcSwgZmlsZSwgY2IpID0+IHtcbiAgICAvLyBBbGxvdyBpbWFnZXMsIFBERnMsIGFuZCBjb21tb24gZG9jdW1lbnQgdHlwZXNcbiAgICBjb25zdCBhbGxvd2VkVHlwZXMgPSBbXG4gICAgICAnaW1hZ2UvanBlZycsICdpbWFnZS9qcGcnLCAnaW1hZ2UvcG5nJywgJ2ltYWdlL2dpZicsICdpbWFnZS93ZWJwJyxcbiAgICAgICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgJ2FwcGxpY2F0aW9uL21zd29yZCcsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCcsXG4gICAgICAndGV4dC9wbGFpbidcbiAgICBdO1xuICAgIFxuICAgIGlmIChhbGxvd2VkVHlwZXMuaW5jbHVkZXMoZmlsZS5taW1ldHlwZSkpIHtcbiAgICAgIGNiKG51bGwsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYihuZXcgRXJyb3IoYEZpbGUgdHlwZSAke2ZpbGUubWltZXR5cGV9IG5vdCBhbGxvd2VkYCkpO1xuICAgIH1cbiAgfVxufSk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWdpc3RlclJvdXRlcyhhcHA6IEV4cHJlc3MpIHtcbiAgY29uc29sZS5sb2coJ/CflIQgU2V0dGluZyB1cCBzZXNzaW9uIG1pZGRsZXdhcmUuLi4nKTtcbiAgXG4gIC8vIENSSVRJQ0FMOiBBcHBseSBzZXNzaW9uIG1pZGRsZXdhcmUgQkVGT1JFIGF1dGhlbnRpY2F0aW9uIHJvdXRlc1xuICBhcHAudXNlKHNlc3Npb25Db25maWcpO1xuICBjb25zb2xlLmxvZygn4pyFIFNlc3Npb24gbWlkZGxld2FyZSBjb25maWd1cmVkJyk7XG4gIFxuICBjb25zb2xlLmxvZygn8J+UhCBMb2FkaW5nIGF1dGhlbnRpY2F0aW9uIHJvdXRlcy4uLicpO1xuICBcbiAgLy8gU2V0dXAgYXV0aGVudGljYXRpb24gcm91dGVzIC0gc2Vzc2lvbiBtaWRkbGV3YXJlIG11c3QgYmUgYXBwbGllZCBmaXJzdFxuICBzZXR1cEF1dGhSb3V0ZXMoYXBwKTtcbiAgY29uc29sZS5sb2coJ+KchSBBdXRoZW50aWNhdGlvbiByb3V0ZXMgbG9hZGVkIG9uIC9hcGkvYXV0aC8nKTtcbiAgXG4gIC8vIFJlZ2lzdGVyIGFsbCBBUEkgcm91dGVzXG4gIGNvbnNvbGUubG9nKCfwn5SEIExvYWRpbmcgQVBJIHJvdXRlcy4uLicpO1xuICByZWdpc3Rlck9yZ2FuaXphdGlvblJvdXRlcyhhcHApO1xuICByZWdpc3RlclVzZXJSb3V0ZXMoYXBwKTtcbiAgcmVnaXN0ZXJCdWlsZGluZ1JvdXRlcyhhcHApO1xuICByZWdpc3RlckRvY3VtZW50Um91dGVzKGFwcCk7XG4gIHJlZ2lzdGVyQnVnUm91dGVzKGFwcCk7XG4gIHJlZ2lzdGVyQmlsbFJvdXRlcyhhcHApO1xuICByZWdpc3RlclJlc2lkZW5jZVJvdXRlcyhhcHApO1xuICByZWdpc3RlckRlbWFuZFJvdXRlcyhhcHApO1xuICByZWdpc3RlckZlYXR1cmVSZXF1ZXN0Um91dGVzKGFwcCk7XG4gIHJlZ2lzdGVyQ29udGFjdFJvdXRlcyhhcHApO1xuICByZWdpc3RlckNvbW1vblNwYWNlc1JvdXRlcyhhcHApO1xuICByZWdpc3RlclBlcm1pc3Npb25zUm91dGVzKGFwcCk7XG4gIHJlZ2lzdGVyRGVtb01hbmFnZW1lbnRSb3V0ZXMoYXBwKTtcbiAgcmVnaXN0ZXJUcmlhbFJlcXVlc3RSb3V0ZXMoYXBwKTtcbiAgcmVnaXN0ZXJJbnZvaWNlUm91dGVzKGFwcCk7XG4gIHJlZ2lzdGVyQWlBbmFseXNpc1JvdXRlcyhhcHApO1xuICBjb25zb2xlLmxvZygn4pyFIEFsbCBBUEkgcm91dGVzIHJlZ2lzdGVyZWQnKTtcbiAgXG4gIC8vIEJhc2ljIEFQSSByb3V0ZXNcbiAgYXBwLmdldCgnL2FwaS9oZWFsdGgnLCAocmVxLCByZXMpID0+IHtcbiAgICByZXMuanNvbih7IHN0YXR1czogJ29rJywgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSk7XG4gIH0pO1xuICBcbiAgYXBwLnBvc3QoJy9hcGkvdGVzdCcsIChyZXEsIHJlcykgPT4ge1xuICAgIHJlcy5qc29uKHsgbWVzc2FnZTogJ0FQSSB3b3JraW5nJywgYm9keTogcmVxLmJvZHkgfSk7XG4gIH0pO1xuXG4gIC8vIEZpbGUgdXBsb2FkIGVuZHBvaW50IGZvciBkZW1hbmRzIGFuZCBvdGhlciBnZW5lcmFsIHVwbG9hZHNcbiAgYXBwLnBvc3QoJy9hcGkvdXBsb2FkJywgcmVxdWlyZUF1dGgsIHVwbG9hZC5hcnJheSgnZmlsZScsIDUpLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmaWxlcyA9IHJlcS5maWxlcyBhcyBFeHByZXNzLk11bHRlci5GaWxlW107XG4gICAgICBcbiAgICAgIGlmICghZmlsZXMgfHwgZmlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdObyBmaWxlcyB1cGxvYWRlZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdlbmVyYXRlIGZpbGUgVVJMcy9wYXRocyBmb3IgdGhlIHVwbG9hZGVkIGZpbGVzXG4gICAgICBjb25zdCBmaWxlVXJscyA9IGZpbGVzLm1hcChmaWxlID0+IHtcbiAgICAgICAgcmV0dXJuIGAvdXBsb2Fkcy9kZW1hbmRzLyR7ZmlsZS5maWxlbmFtZX1gO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKGDinIUgU3VjY2Vzc2Z1bGx5IHVwbG9hZGVkICR7ZmlsZXMubGVuZ3RofSBmaWxlcyBmb3IgdXNlciAke3JlcS51c2VyLmlkfTpgLCBmaWxlVXJscyk7XG5cbiAgICAgIHJlcy5qc29uKHsgXG4gICAgICAgIG1lc3NhZ2U6ICdGaWxlcyB1cGxvYWRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICBmaWxlVXJsczogZmlsZVVybHMsXG4gICAgICAgIGZpbGVDb3VudDogZmlsZXMubGVuZ3RoXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRmlsZSB1cGxvYWQgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBcbiAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGxvYWQgZmlsZXMnLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSBcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gU2VydmUgdXBsb2FkZWQgZmlsZXNcbiAgYXBwLnVzZSgnL3VwbG9hZHMnLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3VwbG9hZHMnKSkpO1xuXG4gIC8vIFNpbXBsZSBwcm9kdWN0aW9uIGRpYWdub3N0aWMgZW5kcG9pbnRcbiAgYXBwLmdldCgnL2FwaS9kZWJ1Zy9zaW1wbGUnLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBTaW1wbGUgZGVidWcgZW5kcG9pbnQgY2FsbGVkJyk7XG4gICAgcmVzLmpzb24oeyBcbiAgICAgIHN0YXR1czogJ3dvcmtpbmcnLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ3Vua25vd24nLFxuICAgICAgZGF0YWJhc2VVcmw6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCA/ICdwcmVzZW50JyA6ICdtaXNzaW5nJ1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBDb21wbGV4IHN0b3JhZ2UgdGVzdCBlbmRwb2ludCAgXG4gIGFwcC5nZXQoJy9hcGkvZGVidWcvc3RvcmFnZScsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+UjSBTdG9yYWdlIGRlYnVnIGVuZHBvaW50IGNhbGxlZGApO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+TpiBUZXN0aW5nIHN0b3JhZ2UgaW1wb3J0Li4uYCk7XG4gICAgICBjb25zdCB7IHN0b3JhZ2UgfSA9IGF3YWl0IGltcG9ydCgnLi9zdG9yYWdlJyk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g4pyFIFN0b3JhZ2UgaW1wb3J0ZWQgc3VjY2Vzc2Z1bGx5YCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDwn6eqIFRlc3RpbmcgYmFzaWMgc3RvcmFnZSBtZXRob2QuLi5gKTtcbiAgICAgIGNvbnN0IHRlc3RSZXN1bHQgPSBhd2FpdCBzdG9yYWdlLmdldERvY3VtZW50cyh7IHJlc2lkZW5jZUlkOiAnZTI3YWM5MjQtODEyMC00OTA0LWE3OTEtZDFlOWRiNTQ0ZDU4JyB9KTtcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDinIUgU3RvcmFnZSB0ZXN0IHN1Y2Nlc3NmdWxgKTtcbiAgICAgIFxuICAgICAgcmVzLmpzb24oeyBcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICBkb2N1bWVudHNDb3VudDogdGVzdFJlc3VsdC5sZW5ndGgsXG4gICAgICAgIHN0b3JhZ2VUeXBlOiBzdG9yYWdlLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBzdGFjazogZXJyb3Iuc3RhY2tcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVXNlciBpbmZvIGRlYnVnIGVuZHBvaW50XG4gIGFwcC5nZXQoJy9hcGkvZGVidWcvdXNlci1pbmZvJywgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFyZXEuc2Vzc2lvbj8udXNlcklkICYmICFyZXEuc2Vzc2lvbj8udXNlcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdObyBzZXNzaW9uIGZvdW5kJyxcbiAgICAgICAgICBzZXNzaW9uOiByZXEuc2Vzc2lvblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyIHx8IHJlcS5zZXNzaW9uPy51c2VyO1xuICAgICAgY29uc3QgdXNlcklkID0gcmVxLnNlc3Npb24/LnVzZXJJZDtcblxuICAgICAgLy8gR2V0IHVzZXIgZnJvbSBkYXRhYmFzZSBkaXJlY3RseVxuICAgICAgY29uc3QgeyBkYiB9ID0gYXdhaXQgaW1wb3J0KCcuL2RiJyk7XG4gICAgICBjb25zdCB7IHVzZXJzLCB1c2VyT3JnYW5pemF0aW9ucywgb3JnYW5pemF0aW9ucyB9ID0gYXdhaXQgaW1wb3J0KCcuLi9zaGFyZWQvc2NoZW1hJyk7XG4gICAgICBjb25zdCB7IGVxIH0gPSBhd2FpdCBpbXBvcnQoJ2RyaXp6bGUtb3JtJyk7XG5cbiAgICAgIGNvbnN0IHVzZXJGcm9tRGIgPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgLmZyb20odXNlcnMpXG4gICAgICAgIC53aGVyZShlcSh1c2Vycy5pZCwgdXNlcklkKSk7XG5cbiAgICAgIGNvbnN0IHVzZXJPcmdzID0gYXdhaXQgZGJcbiAgICAgICAgLnNlbGVjdCh7XG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHVzZXJPcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbklkLFxuICAgICAgICAgIG9yZ2FuaXphdGlvbk5hbWU6IG9yZ2FuaXphdGlvbnMubmFtZSxcbiAgICAgICAgICBjYW5BY2Nlc3NBbGxPcmdhbml6YXRpb25zOiB1c2VyT3JnYW5pemF0aW9ucy5jYW5BY2Nlc3NBbGxPcmdhbml6YXRpb25zLFxuICAgICAgICAgIGlzQWN0aXZlOiB1c2VyT3JnYW5pemF0aW9ucy5pc0FjdGl2ZSxcbiAgICAgICAgfSlcbiAgICAgICAgLmZyb20odXNlck9yZ2FuaXphdGlvbnMpXG4gICAgICAgIC5pbm5lckpvaW4ob3JnYW5pemF0aW9ucywgZXEodXNlck9yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uSWQsIG9yZ2FuaXphdGlvbnMuaWQpKVxuICAgICAgICAud2hlcmUoZXEodXNlck9yZ2FuaXphdGlvbnMudXNlcklkLCB1c2VySWQpKTtcblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgdXNlcklkOiByZXEuc2Vzc2lvbj8udXNlcklkLFxuICAgICAgICAgIGhhc1VzZXI6ICEhdXNlcixcbiAgICAgICAgICB1c2VyUm9sZTogcmVxLnNlc3Npb24/LnVzZXJSb2xlLFxuICAgICAgICB9LFxuICAgICAgICB1c2VyRnJvbU1pZGRsZXdhcmU6IHVzZXIsXG4gICAgICAgIHVzZXJGcm9tRGF0YWJhc2U6IHVzZXJGcm9tRGJbMF0sXG4gICAgICAgIHVzZXJPcmdhbml6YXRpb25zOiB1c2VyT3JncyxcbiAgICAgICAgcmF3U2Vzc2lvbjogcmVxLnNlc3Npb25cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHN0YWNrOiBlcnJvci5zdGFja1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgXG4gIC8vIFN0YXRpYyBmaWxlIHNlcnZpbmcgLSBNVVNUIGNvbWUgYWZ0ZXIgQVBJIHJvdXRlcyB0byBwcmV2ZW50IGNvbmZsaWN0c1xuICBjb25zdCBkaXN0UGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnZGlzdCcsICdwdWJsaWMnKTtcbiAgXG4gIGlmIChmcy5leGlzdHNTeW5jKGRpc3RQYXRoKSkge1xuICAgIGNvbnNvbGUubG9nKCfinIUgU2V0dGluZyB1cCBzdGF0aWMgZmlsZSBzZXJ2aW5nIGZyb20nLCBkaXN0UGF0aCk7XG4gICAgXG4gICAgLy8gU2VydmUgc3RhdGljIGFzc2V0cyB3aXRoIGFwcHJvcHJpYXRlIGNhY2hlIGhlYWRlcnNcbiAgICBhcHAudXNlKGV4cHJlc3Muc3RhdGljKGRpc3RQYXRoLCB7XG4gICAgICAvLyBEaXNhYmxlIGNhY2hpbmcgZm9yIGRldmVsb3BtZW50IHRvIGVuc3VyZSBmcmVzaCBmaWxlc1xuICAgICAgc2V0SGVhZGVyczogKHJlcywgcGF0aCkgPT4ge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgICAgICAvLyBEZXZlbG9wbWVudDogZGlzYWJsZSBhbGwgY2FjaGluZyBmb3IgaW1tZWRpYXRlIHVwZGF0ZXNcbiAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlJyk7XG4gICAgICAgICAgcmVzLnNldEhlYWRlcignUHJhZ21hJywgJ25vLWNhY2hlJyk7XG4gICAgICAgICAgcmVzLnNldEhlYWRlcignRXhwaXJlcycsICcwJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUHJvZHVjdGlvbjogY2FjaGUgYXNzZXRzIGJ1dCBhbGxvdyByZXZhbGlkYXRpb25cbiAgICAgICAgICBpZiAocGF0aC5lbmRzV2l0aCgnLmh0bWwnKSkge1xuICAgICAgICAgICAgLy8gSFRNTCBmaWxlcyBzaG91bGQgbm90IGJlIGNhY2hlZCB0byBlbnN1cmUgcm91dGluZyB3b3Jrc1xuICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1jYWNoZSwgbXVzdC1yZXZhbGlkYXRlJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE90aGVyIGFzc2V0cyBjYW4gYmUgY2FjaGVkIHdpdGggcmV2YWxpZGF0aW9uXG4gICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ3B1YmxpYywgbWF4LWFnZT0zMDAsIG11c3QtcmV2YWxpZGF0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKTtcbiAgICBcbiAgICAvLyBTUEEgZmFsbGJhY2sgLSBzZXJ2ZSBpbmRleC5odG1sIGZvciBub24tQVBJIHJvdXRlc1xuICAgIGFwcC5nZXQoJyonLCAocmVxLCByZXMpID0+IHtcbiAgICAgIC8vIERvbid0IHNlcnZlIGluZGV4Lmh0bWwgZm9yIEFQSSByb3V0ZXNcbiAgICAgIGlmIChyZXEucGF0aC5zdGFydHNXaXRoKCcvYXBpLycpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdBUEkgZW5kcG9pbnQgbm90IGZvdW5kJywgZXJyb3I6ICdBUEkgZW5kcG9pbnQgbm90IGZvdW5kJyB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgaW5kZXhQYXRoID0gcGF0aC5qb2luKGRpc3RQYXRoLCAnaW5kZXguaHRtbCcpO1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoaW5kZXhQYXRoKSkge1xuICAgICAgICAvLyBFbnN1cmUgaW5kZXguaHRtbCBpcyBuZXZlciBjYWNoZWRcbiAgICAgICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZScpO1xuICAgICAgICByZXMuc2V0SGVhZGVyKCdQcmFnbWEnLCAnbm8tY2FjaGUnKTtcbiAgICAgICAgcmVzLnNldEhlYWRlcignRXhwaXJlcycsICcwJyk7XG4gICAgICAgIHJlcy5zZW5kRmlsZShpbmRleFBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoJ0FwcGxpY2F0aW9uIG5vdCBmb3VuZCAtIGJ1aWxkIG1pc3NpbmcnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygn4pqg77iPIFN0YXRpYyBmaWxlcyBub3QgZm91bmQsIG9ubHkgQVBJIHJvdXRlcyBhdmFpbGFibGUnKTtcbiAgICBcbiAgICAvLyBGYWxsYmFjayBmb3IgbWlzc2luZyBzdGF0aWMgZmlsZXNcbiAgICBhcHAuZ2V0KCcqJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICBpZiAocmVxLnBhdGguc3RhcnRzV2l0aCgnL2FwaS8nKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnQVBJIGVuZHBvaW50IG5vdCBmb3VuZCcsIGVycm9yOiAnQVBJIGVuZHBvaW50IG5vdCBmb3VuZCcgfSk7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKDUwMykuc2VuZCgnQXBwbGljYXRpb24gaXMgc3RhcnRpbmcgdXAuLi4nKTtcbiAgICB9KTtcbiAgfVxuICBcbiAgY29uc29sZS5sb2coJ+KchSBBbGwgcm91dGVzIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5Jyk7XG59Il0sInZlcnNpb24iOjN9