171805b1a91fcebf68a900cb17bc6173
"use strict";
/**
 * Comprehensive Form Submission Tests
 *
 * This test suite validates all major forms in the application to identify
 * and fix UUID errors, missing field errors, and validation issues.
 *
 * Tests cover:
 * - Demand creation form
 * - Building creation form
 * - Bill creation form
 * - Document upload forms
 * - User management forms
 *
 * Each test submits forms with realistic data and validates:
 * - Form submission succeeds
 * - Data is correctly saved to database
 * - Required fields are properly validated
 * - UUID fields are correctly handled
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const index_1 = require("../../server/index");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
// Test database setup
let testUser;
let testOrganization;
let testBuilding;
let testResidence;
let authCookie;
(0, globals_1.describe)('Form Submission Tests', () => {
    (0, globals_1.beforeAll)(async () => {
        // Create test organization
        const orgResult = await db_1.db.insert(schema_1.organizations).values({
            name: 'Test Organization for Form Submission',
            type: 'condo_association',
            address: '123 Test Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1'
        }).returning();
        testOrganization = orgResult[0];
        // Create test user
        const userResult = await db_1.db.insert(schema_1.users).values({
            username: 'formtester',
            email: 'formtest@example.com',
            password: 'hashedpassword',
            firstName: 'Form',
            lastName: 'Tester',
            role: 'resident'
        }).returning();
        testUser = userResult[0];
        // Create test building
        const buildingResult = await db_1.db.insert(schema_1.buildings).values({
            name: 'Test Building for Forms',
            organizationId: testOrganization.id,
            address: '456 Form Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1B 1B1',
            buildingType: 'condo',
            totalUnits: 100
        }).returning();
        testBuilding = buildingResult[0];
        // Create test residence
        const residenceResult = await db_1.db.insert(schema_1.residences).values({
            unitNumber: '101',
            buildingId: testBuilding.id,
            floor: 1
        }).returning();
        testResidence = residenceResult[0];
        // Assign user to residence
        await db_1.db.insert(schema_1.userResidences).values({
            userId: testUser.id,
            residenceId: testResidence.id,
            relationshipType: 'resident',
            startDate: '2025-01-01'
        });
        // Simulate login to get auth session
        const loginResponse = await (0, supertest_1.default)(index_1.app)
            .post('/api/auth/login')
            .send({
            email: testUser.email,
            password: 'password'
        });
        authCookie = loginResponse.headers['set-cookie']?.[0] || '';
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test data
        await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testUser.id));
        await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.submitterId, testUser.id));
        await db_1.db.delete(schema_1.bills).where((0, drizzle_orm_1.eq)(schema_1.bills.buildingId, testBuilding.id));
        await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.eq)(schema_1.residences.id, testResidence.id));
        await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, testBuilding.id));
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.id, testUser.id));
        await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testOrganization.id));
    });
    (0, globals_1.describe)('Demand Creation Form', () => {
        (0, globals_1.it)('should successfully submit demand with all required fields', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Test maintenance request for form submission testing',
                buildingId: testBuilding.id,
                residenceId: testResidence.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body).toHaveProperty('id');
            (0, globals_1.expect)(response.body.type).toBe('maintenance');
            (0, globals_1.expect)(response.body.description).toBe(demandData.description);
            (0, globals_1.expect)(response.body.submitterId).toBe(testUser.id);
            (0, globals_1.expect)(response.body.buildingId).toBe(testBuilding.id);
            (0, globals_1.expect)(response.body.residenceId).toBe(testResidence.id);
            (0, globals_1.expect)(response.body.status).toBe('submitted');
            // Verify data is saved in database
            const savedDemand = await db_1.db.select().from(schema_1.demands)
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, response.body.id))
                .limit(1);
            (0, globals_1.expect)(savedDemand).toHaveLength(1);
            (0, globals_1.expect)(savedDemand[0].description).toBe(demandData.description);
        });
        (0, globals_1.it)('should auto-populate buildingId and residenceId if not provided', async () => {
            const demandData = {
                type: 'complaint',
                description: 'Test complaint without explicit IDs'
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body.buildingId).toBe(testBuilding.id);
            (0, globals_1.expect)(response.body.residenceId).toBe(testResidence.id);
        });
        (0, globals_1.it)('should handle optional UUID fields correctly', async () => {
            const demandData = {
                type: 'information',
                description: 'Test with optional assignation fields',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                assignationBuildingId: testBuilding.id,
                assignationResidenceId: testResidence.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            (0, globals_1.expect)(response.body.assignationBuildingId).toBe(testBuilding.id);
            (0, globals_1.expect)(response.body.assignationResidenceId).toBe(testResidence.id);
        });
        (0, globals_1.it)('should validate required fields and return appropriate errors', async () => {
            const invalidDemandData = {
                type: 'maintenance'
                // Missing description
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(invalidDemandData)
                .expect(400);
            (0, globals_1.expect)(response.body).toHaveProperty('message');
            (0, globals_1.expect)(response.body).toHaveProperty('errors');
        });
        (0, globals_1.it)('should handle empty string UUIDs correctly', async () => {
            const demandData = {
                type: 'other',
                description: 'Test with empty string UUIDs',
                buildingId: testBuilding.id,
                residenceId: testResidence.id,
                assignationBuildingId: '',
                assignationResidenceId: ''
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData)
                .expect(201);
            // Empty strings should be converted to null/undefined
            (0, globals_1.expect)(response.body.assignationBuildingId).toBeFalsy();
            (0, globals_1.expect)(response.body.assignationResidenceId).toBeFalsy();
        });
    });
    (0, globals_1.describe)('Building Form Submission', () => {
        (0, globals_1.it)('should successfully create building with all required fields', async () => {
            const buildingData = {
                name: 'New Test Building',
                organizationId: testOrganization.id,
                address: '789 Building Street',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1C 1C1',
                buildingType: 'condo'
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/manager/buildings')
                .set('Cookie', authCookie)
                .send(buildingData);
            if (response.status === 201) {
                (0, globals_1.expect)(response.body).toHaveProperty('id');
                (0, globals_1.expect)(response.body.name).toBe(buildingData.name);
                (0, globals_1.expect)(response.body.organizationId).toBe(buildingData.organizationId);
                // Clean up
                await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, response.body.id));
            }
        });
        (0, globals_1.it)('should validate organization ID is required', async () => {
            const buildingData = {
                name: 'Building Without Org',
                address: '999 No Org Street',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1D 1D1',
                buildingType: 'condo'
                // Missing organizationId
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/manager/buildings')
                .set('Cookie', authCookie)
                .send(buildingData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
        (0, globals_1.it)('should handle invalid organization ID', async () => {
            const buildingData = {
                name: 'Building Invalid Org',
                organizationId: 'invalid-uuid',
                address: '888 Invalid Street',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1E 1E1',
                buildingType: 'condo'
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/manager/buildings')
                .set('Cookie', authCookie)
                .send(buildingData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
    });
    (0, globals_1.describe)('Bill Creation Form', () => {
        (0, globals_1.it)('should successfully create bill with all required fields', async () => {
            const billData = {
                title: 'Test Monthly Bill',
                description: 'Test bill for form submission',
                category: 'utilities',
                vendor: 'Test Utility Company',
                paymentType: 'recurrent',
                schedulePayment: 'monthly',
                totalAmount: '150.75',
                startDate: '2025-01-01',
                status: 'draft',
                buildingId: testBuilding.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/bills')
                .set('Cookie', authCookie)
                .send(billData);
            if (response.status === 201) {
                (0, globals_1.expect)(response.body).toHaveProperty('id');
                (0, globals_1.expect)(response.body.title).toBe(billData.title);
                (0, globals_1.expect)(response.body.buildingId).toBe(billData.buildingId);
                (0, globals_1.expect)(response.body.totalAmount).toBe(parseFloat(billData.totalAmount));
                // Clean up
                await db_1.db.delete(schema_1.bills).where((0, drizzle_orm_1.eq)(schema_1.bills.id, response.body.id));
            }
        });
        (0, globals_1.it)('should validate required amount field', async () => {
            const billData = {
                title: 'Bill Without Amount',
                category: 'maintenance',
                paymentType: 'unique',
                startDate: '2025-01-01',
                status: 'draft',
                buildingId: testBuilding.id
                // Missing totalAmount
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/bills')
                .set('Cookie', authCookie)
                .send(billData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
        (0, globals_1.it)('should handle optional schedule payment for unique bills', async () => {
            const billData = {
                title: 'One-time Bill',
                category: 'repairs',
                paymentType: 'unique',
                totalAmount: '500.00',
                startDate: '2025-01-01',
                status: 'draft',
                buildingId: testBuilding.id
                // No schedulePayment for unique bills
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/bills')
                .set('Cookie', authCookie)
                .send(billData);
            if (response.status === 201) {
                (0, globals_1.expect)(response.body.paymentType).toBe('unique');
                // Clean up
                await db_1.db.delete(schema_1.bills).where((0, drizzle_orm_1.eq)(schema_1.bills.id, response.body.id));
            }
        });
    });
    (0, globals_1.describe)('Document Upload Form', () => {
        (0, globals_1.it)('should validate document creation with building ID', async () => {
            const documentData = {
                name: 'Test Document',
                type: 'maintenance',
                dateReference: '2025-01-01',
                isVisibleToTenants: true,
                buildingId: testBuilding.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/documents')
                .set('Cookie', authCookie)
                .send(documentData);
            if (response.status === 201) {
                (0, globals_1.expect)(response.body).toHaveProperty('id');
                (0, globals_1.expect)(response.body.name).toBe(documentData.name);
                // Clean up
                await db_1.db.delete(schema_1.documents).where((0, drizzle_orm_1.eq)(schema_1.documents.id, response.body.id));
            }
        });
        (0, globals_1.it)('should validate document creation with residence ID', async () => {
            const documentData = {
                name: 'Residence Document',
                type: 'lease',
                dateReference: '2025-01-01',
                isVisibleToTenants: false,
                residenceId: testResidence.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/documents')
                .set('Cookie', authCookie)
                .send(documentData);
            if (response.status === 201) {
                (0, globals_1.expect)(response.body).toHaveProperty('id');
                (0, globals_1.expect)(response.body.residenceId).toBe(testResidence.id);
                // Clean up
                await db_1.db.delete(schema_1.documents).where((0, drizzle_orm_1.eq)(schema_1.documents.id, response.body.id));
            }
        });
    });
    (0, globals_1.describe)('User Invitation Form', () => {
        (0, globals_1.it)('should create invitation with proper validation', async () => {
            const invitationData = {
                email: 'newuser@example.com',
                role: 'resident',
                organizationId: testOrganization.id,
                buildingId: testBuilding.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/admin/invitations')
                .set('Cookie', authCookie)
                .send(invitationData);
            if (response.status === 201) {
                (0, globals_1.expect)(response.body).toHaveProperty('token');
                (0, globals_1.expect)(response.body.email).toBe(invitationData.email);
                // Clean up
                await db_1.db.delete(schema_1.invitations).where((0, drizzle_orm_1.eq)(schema_1.invitations.email, invitationData.email));
            }
        });
        (0, globals_1.it)('should validate email format', async () => {
            const invitationData = {
                email: 'invalid-email',
                role: 'resident',
                organizationId: testOrganization.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/admin/invitations')
                .set('Cookie', authCookie)
                .send(invitationData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
    });
    (0, globals_1.describe)('Form Error Handling', () => {
        (0, globals_1.it)('should handle malformed UUID fields', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Test with malformed UUID',
                buildingId: 'not-a-uuid',
                residenceId: 'also-not-a-uuid'
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
        (0, globals_1.it)('should handle null values in required fields', async () => {
            const demandData = {
                type: null,
                description: null,
                buildingId: testBuilding.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
        (0, globals_1.it)('should handle very long field values', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'x'.repeat(5000), // Very long description
                buildingId: testBuilding.id
            };
            const response = await (0, supertest_1.default)(index_1.app)
                .post('/api/demands')
                .set('Cookie', authCookie)
                .send(demandData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,