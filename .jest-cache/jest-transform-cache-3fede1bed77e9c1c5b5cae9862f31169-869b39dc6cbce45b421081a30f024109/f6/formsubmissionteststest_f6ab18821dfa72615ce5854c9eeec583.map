{"file":"/home/runner/workspace/tests/integration/form-submission-tests.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/form-submission-tests.test.ts"],"sourcesContent":["/**\n * Comprehensive Form Submission Tests\n * \n * This test suite validates all major forms in the application to identify\n * and fix UUID errors, missing field errors, and validation issues.\n * \n * Tests cover:\n * - Demand creation form\n * - Building creation form  \n * - Bill creation form\n * - Document upload forms\n * - User management forms\n * \n * Each test submits forms with realistic data and validates:\n * - Form submission succeeds\n * - Data is correctly saved to database\n * - Required fields are properly validated\n * - UUID fields are correctly handled\n */\n\nimport { describe, it, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport request from 'supertest';\nimport { app } from '../../server/index';\nimport { db } from '../../server/db';\nimport {\n  users,\n  organizations,\n  buildings,\n  residences,\n  userResidences,\n  demands,\n  bills,\n  documents,\n  invitations\n} from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Test data interfaces\ninterface TestUser {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'admin' | 'manager' | 'resident' | 'tenant' | 'demo_manager' | 'demo_tenant' | 'demo_resident';\n}\n\ninterface TestOrganization {\n  id: string;\n  name: string;\n  type: string;\n}\n\ninterface TestBuilding {\n  id: string;\n  name: string;\n  organizationId: string;\n}\n\ninterface TestResidence {\n  id: string;\n  unitNumber: string;\n  buildingId: string;\n}\n\n// Test database setup\nlet testUser: TestUser;\nlet testOrganization: TestOrganization;\nlet testBuilding: TestBuilding;\nlet testResidence: TestResidence;\nlet authCookie: string;\n\ndescribe('Form Submission Tests', () => {\n  beforeAll(async () => {\n    // Create test organization\n    const orgResult = await db.insert(organizations).values({\n      name: 'Test Organization for Form Submission',\n      type: 'condo_association',\n      address: '123 Test Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1'\n    }).returning();\n    testOrganization = orgResult[0];\n\n    // Create test user\n    const userResult = await db.insert(users).values({\n      username: 'formtester',\n      email: 'formtest@example.com',\n      password: 'hashedpassword',\n      firstName: 'Form',\n      lastName: 'Tester',\n      role: 'resident'\n    }).returning();\n    testUser = userResult[0];\n\n    // Create test building\n    const buildingResult = await db.insert(buildings).values({\n      name: 'Test Building for Forms',\n      organizationId: testOrganization.id,\n      address: '456 Form Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1B 1B1',\n      buildingType: 'condo',\n      totalUnits: 100\n    }).returning();\n    testBuilding = buildingResult[0];\n\n    // Create test residence\n    const residenceResult = await db.insert(residences).values({\n      unitNumber: '101',\n      buildingId: testBuilding.id,\n      floor: 1\n    }).returning();\n    testResidence = residenceResult[0];\n\n    // Assign user to residence\n    await db.insert(userResidences).values({\n      userId: testUser.id,\n      residenceId: testResidence.id,\n      relationshipType: 'resident',\n      startDate: '2025-01-01'\n    });\n\n    // Simulate login to get auth session\n    const loginResponse = await request(app)\n      .post('/api/auth/login')\n      .send({\n        email: testUser.email,\n        password: 'password'\n      });\n    \n    authCookie = loginResponse.headers['set-cookie']?.[0] || '';\n  });\n\n  afterAll(async () => {\n    // Clean up test data\n    await db.delete(userResidences).where(eq(userResidences.userId, testUser.id));\n    await db.delete(demands).where(eq(demands.submitterId, testUser.id));\n    await db.delete(bills).where(eq(bills.buildingId, testBuilding.id));\n    await db.delete(residences).where(eq(residences.id, testResidence.id));\n    await db.delete(buildings).where(eq(buildings.id, testBuilding.id));\n    await db.delete(users).where(eq(users.id, testUser.id));\n    await db.delete(organizations).where(eq(organizations.id, testOrganization.id));\n  });\n\n  describe('Demand Creation Form', () => {\n    it('should successfully submit demand with all required fields', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test maintenance request for form submission testing',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.type).toBe('maintenance');\n      expect(response.body.description).toBe(demandData.description);\n      expect(response.body.submitterId).toBe(testUser.id);\n      expect(response.body.buildingId).toBe(testBuilding.id);\n      expect(response.body.residenceId).toBe(testResidence.id);\n      expect(response.body.status).toBe('submitted');\n\n      // Verify data is saved in database\n      const savedDemand = await db.select().from(demands)\n        .where(eq(demands.id, response.body.id))\n        .limit(1);\n      \n      expect(savedDemand).toHaveLength(1);\n      expect(savedDemand[0].description).toBe(demandData.description);\n    });\n\n    it('should auto-populate buildingId and residenceId if not provided', async () => {\n      const demandData = {\n        type: 'complaint',\n        description: 'Test complaint without explicit IDs'\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body.buildingId).toBe(testBuilding.id);\n      expect(response.body.residenceId).toBe(testResidence.id);\n    });\n\n    it('should handle optional UUID fields correctly', async () => {\n      const demandData = {\n        type: 'information',\n        description: 'Test with optional assignation fields',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        assignationBuildingId: testBuilding.id,\n        assignationResidenceId: testResidence.id\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      expect(response.body.assignationBuildingId).toBe(testBuilding.id);\n      expect(response.body.assignationResidenceId).toBe(testResidence.id);\n    });\n\n    it('should validate required fields and return appropriate errors', async () => {\n      const invalidDemandData = {\n        type: 'maintenance'\n        // Missing description\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(invalidDemandData)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('message');\n      expect(response.body).toHaveProperty('errors');\n    });\n\n    it('should handle empty string UUIDs correctly', async () => {\n      const demandData = {\n        type: 'other',\n        description: 'Test with empty string UUIDs',\n        buildingId: testBuilding.id,\n        residenceId: testResidence.id,\n        assignationBuildingId: '',\n        assignationResidenceId: ''\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData)\n        .expect(201);\n\n      // Empty strings should be converted to null/undefined\n      expect(response.body.assignationBuildingId).toBeFalsy();\n      expect(response.body.assignationResidenceId).toBeFalsy();\n    });\n  });\n\n  describe('Building Form Submission', () => {\n    it('should successfully create building with all required fields', async () => {\n      const buildingData = {\n        name: 'New Test Building',\n        organizationId: testOrganization.id,\n        address: '789 Building Street',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1C 1C1',\n        buildingType: 'condo'\n      };\n\n      const response = await request(app)\n        .post('/api/manager/buildings')\n        .set('Cookie', authCookie)\n        .send(buildingData);\n\n      if (response.status === 201) {\n        expect(response.body).toHaveProperty('id');\n        expect(response.body.name).toBe(buildingData.name);\n        expect(response.body.organizationId).toBe(buildingData.organizationId);\n        \n        // Clean up\n        await db.delete(buildings).where(eq(buildings.id, response.body.id));\n      }\n    });\n\n    it('should validate organization ID is required', async () => {\n      const buildingData = {\n        name: 'Building Without Org',\n        address: '999 No Org Street',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1D 1D1',\n        buildingType: 'condo'\n        // Missing organizationId\n      };\n\n      const response = await request(app)\n        .post('/api/manager/buildings')\n        .set('Cookie', authCookie)\n        .send(buildingData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n\n    it('should handle invalid organization ID', async () => {\n      const buildingData = {\n        name: 'Building Invalid Org',\n        organizationId: 'invalid-uuid',\n        address: '888 Invalid Street',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1E 1E1',\n        buildingType: 'condo'\n      };\n\n      const response = await request(app)\n        .post('/api/manager/buildings')\n        .set('Cookie', authCookie)\n        .send(buildingData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n  });\n\n  describe('Bill Creation Form', () => {\n    it('should successfully create bill with all required fields', async () => {\n      const billData = {\n        title: 'Test Monthly Bill',\n        description: 'Test bill for form submission',\n        category: 'utilities',\n        vendor: 'Test Utility Company',\n        paymentType: 'recurrent',\n        schedulePayment: 'monthly',\n        totalAmount: '150.75',\n        startDate: '2025-01-01',\n        status: 'draft',\n        buildingId: testBuilding.id\n      };\n\n      const response = await request(app)\n        .post('/api/bills')\n        .set('Cookie', authCookie)\n        .send(billData);\n\n      if (response.status === 201) {\n        expect(response.body).toHaveProperty('id');\n        expect(response.body.title).toBe(billData.title);\n        expect(response.body.buildingId).toBe(billData.buildingId);\n        expect(response.body.totalAmount).toBe(parseFloat(billData.totalAmount));\n        \n        // Clean up\n        await db.delete(bills).where(eq(bills.id, response.body.id));\n      }\n    });\n\n    it('should validate required amount field', async () => {\n      const billData = {\n        title: 'Bill Without Amount',\n        category: 'maintenance',\n        paymentType: 'unique',\n        startDate: '2025-01-01',\n        status: 'draft',\n        buildingId: testBuilding.id\n        // Missing totalAmount\n      };\n\n      const response = await request(app)\n        .post('/api/bills')\n        .set('Cookie', authCookie)\n        .send(billData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n\n    it('should handle optional schedule payment for unique bills', async () => {\n      const billData = {\n        title: 'One-time Bill',\n        category: 'repairs',\n        paymentType: 'unique',\n        totalAmount: '500.00',\n        startDate: '2025-01-01',\n        status: 'draft',\n        buildingId: testBuilding.id\n        // No schedulePayment for unique bills\n      };\n\n      const response = await request(app)\n        .post('/api/bills')\n        .set('Cookie', authCookie)\n        .send(billData);\n\n      if (response.status === 201) {\n        expect(response.body.paymentType).toBe('unique');\n        \n        // Clean up\n        await db.delete(bills).where(eq(bills.id, response.body.id));\n      }\n    });\n  });\n\n  describe('Document Upload Form', () => {\n    it('should validate document creation with building ID', async () => {\n      const documentData = {\n        name: 'Test Document',\n        type: 'maintenance',\n        dateReference: '2025-01-01',\n        isVisibleToTenants: true,\n        buildingId: testBuilding.id\n      };\n\n      const response = await request(app)\n        .post('/api/documents')\n        .set('Cookie', authCookie)\n        .send(documentData);\n\n      if (response.status === 201) {\n        expect(response.body).toHaveProperty('id');\n        expect(response.body.name).toBe(documentData.name);\n        \n        // Clean up\n        await db.delete(documents).where(eq(documents.id, response.body.id));\n      }\n    });\n\n    it('should validate document creation with residence ID', async () => {\n      const documentData = {\n        name: 'Residence Document',\n        type: 'lease',\n        dateReference: '2025-01-01',\n        isVisibleToTenants: false,\n        residenceId: testResidence.id\n      };\n\n      const response = await request(app)\n        .post('/api/documents')\n        .set('Cookie', authCookie)\n        .send(documentData);\n\n      if (response.status === 201) {\n        expect(response.body).toHaveProperty('id');\n        expect(response.body.residenceId).toBe(testResidence.id);\n        \n        // Clean up\n        await db.delete(documents).where(eq(documents.id, response.body.id));\n      }\n    });\n  });\n\n  describe('User Invitation Form', () => {\n    it('should create invitation with proper validation', async () => {\n      const invitationData = {\n        email: 'newuser@example.com',\n        role: 'resident',\n        organizationId: testOrganization.id,\n        buildingId: testBuilding.id\n      };\n\n      const response = await request(app)\n        .post('/api/admin/invitations')\n        .set('Cookie', authCookie)\n        .send(invitationData);\n\n      if (response.status === 201) {\n        expect(response.body).toHaveProperty('token');\n        expect(response.body.email).toBe(invitationData.email);\n        \n        // Clean up\n        await db.delete(invitations).where(eq(invitations.email, invitationData.email));\n      }\n    });\n\n    it('should validate email format', async () => {\n      const invitationData = {\n        email: 'invalid-email',\n        role: 'resident',\n        organizationId: testOrganization.id\n      };\n\n      const response = await request(app)\n        .post('/api/admin/invitations')\n        .set('Cookie', authCookie)\n        .send(invitationData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n  });\n\n  describe('Form Error Handling', () => {\n    it('should handle malformed UUID fields', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Test with malformed UUID',\n        buildingId: 'not-a-uuid',\n        residenceId: 'also-not-a-uuid'\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n\n    it('should handle null values in required fields', async () => {\n      const demandData = {\n        type: null,\n        description: null,\n        buildingId: testBuilding.id\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n\n    it('should handle very long field values', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'x'.repeat(5000), // Very long description\n        buildingId: testBuilding.id\n      };\n\n      const response = await request(app)\n        .post('/api/demands')\n        .set('Cookie', authCookie)\n        .send(demandData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n  });\n});\n"],"version":3}