3772f2ac9cd9b0784648cf24942b4ac7
'use strict';
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
class Buttons {
    getButtons() {
        let v = 0;
        for (const button of Object.keys(this.pressed)) {
            // eslint-disable-next-line no-bitwise
            v |= 2 ** Number(button);
        }
        return v;
    }
    down(keyDef) {
        const button = getMouseButtonId(keyDef.button);
        if (button in this.pressed) {
            this.pressed[button].push(keyDef);
            return undefined;
        }
        this.pressed[button] = [
            keyDef
        ];
        return button;
    }
    up(keyDef) {
        const button = getMouseButtonId(keyDef.button);
        if (button in this.pressed) {
            this.pressed[button] = this.pressed[button].filter((k) => k.name !== keyDef.name);
            if (this.pressed[button].length === 0) {
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete this.pressed[button];
                return button;
            }
        }
        return undefined;
    }
    constructor() {
        _define_property(this, "pressed", {});
    }
}
const MouseButton = {
    primary: 0,
    secondary: 1,
    auxiliary: 2,
    back: 3,
    X1: 3,
    forward: 4,
    X2: 4
};
function getMouseButtonId(button = 0) {
    if (button in MouseButton) {
        return MouseButton[button];
    }
    return Number(button);
}
// On the `MouseEvent.button` property auxiliary and secondary button are flipped compared to `MouseEvent.buttons`.
const MouseButtonFlip = {
    1: 2,
    2: 1
};
function getMouseEventButton(button) {
    button = getMouseButtonId(button);
    if (button in MouseButtonFlip) {
        return MouseButtonFlip[button];
    }
    return button;
}
exports.Buttons = Buttons;
exports.MouseButton = MouseButton;
exports.MouseButtonFlip = MouseButtonFlip;
exports.getMouseButtonId = getMouseButtonId;
exports.getMouseEventButton = getMouseEventButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3N5c3RlbS9wb2ludGVyL2J1dHRvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUs7SUFDckMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDNUIsS0FBSyxFQUFFLEtBQUs7WUFDWixVQUFVLEVBQUUsSUFBSTtZQUNoQixZQUFZLEVBQUUsSUFBSTtZQUNsQixRQUFRLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDUCxDQUFDO1NBQU0sQ0FBQztRQUNKLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUNELE1BQU0sT0FBTztJQUNULFVBQVU7UUFDTixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixLQUFLLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUM7WUFDNUMsc0NBQXNDO1lBQ3RDLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLENBQUM7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7SUFDRCxJQUFJLENBQUMsTUFBTTtRQUNQLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEMsT0FBTyxTQUFTLENBQUM7UUFDckIsQ0FBQztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUc7WUFDbkIsTUFBTTtTQUNULENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0QsRUFBRSxDQUFDLE1BQU07UUFDTCxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hGLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ3BDLGdFQUFnRTtnQkFDaEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM1QixPQUFPLE1BQU0sQ0FBQztZQUNsQixDQUFDO1FBQ0wsQ0FBQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFDRDtRQUNJLGdCQUFnQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBQ0QsTUFBTSxXQUFXLEdBQUc7SUFDaEIsT0FBTyxFQUFFLENBQUM7SUFDVixTQUFTLEVBQUUsQ0FBQztJQUNaLFNBQVMsRUFBRSxDQUFDO0lBQ1osSUFBSSxFQUFFLENBQUM7SUFDUCxFQUFFLEVBQUUsQ0FBQztJQUNMLE9BQU8sRUFBRSxDQUFDO0lBQ1YsRUFBRSxFQUFFLENBQUM7Q0FDUixDQUFDO0FBQ0YsU0FBUyxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQztJQUNoQyxJQUFJLE1BQU0sSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN4QixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0QsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUNELG1IQUFtSDtBQUNuSCxNQUFNLGVBQWUsR0FBRztJQUNwQixDQUFDLEVBQUUsQ0FBQztJQUNKLENBQUMsRUFBRSxDQUFDO0NBQ1AsQ0FBQztBQUNGLFNBQVMsbUJBQW1CLENBQUMsTUFBTTtJQUMvQixNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsSUFBSSxNQUFNLElBQUksZUFBZSxFQUFFLENBQUM7UUFDNUIsT0FBTyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUMxQixPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNsQyxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUMxQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudC9kaXN0L2Nqcy9zeXN0ZW0vcG9pbnRlci9idXR0b25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2RlZmluZV9wcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuY2xhc3MgQnV0dG9ucyB7XG4gICAgZ2V0QnV0dG9ucygpIHtcbiAgICAgICAgbGV0IHYgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBPYmplY3Qua2V5cyh0aGlzLnByZXNzZWQpKXtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgICAgICB2IHw9IDIgKiogTnVtYmVyKGJ1dHRvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIGRvd24oa2V5RGVmKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGdldE1vdXNlQnV0dG9uSWQoa2V5RGVmLmJ1dHRvbik7XG4gICAgICAgIGlmIChidXR0b24gaW4gdGhpcy5wcmVzc2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWRbYnV0dG9uXS5wdXNoKGtleURlZik7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlc3NlZFtidXR0b25dID0gW1xuICAgICAgICAgICAga2V5RGVmXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIHVwKGtleURlZikge1xuICAgICAgICBjb25zdCBidXR0b24gPSBnZXRNb3VzZUJ1dHRvbklkKGtleURlZi5idXR0b24pO1xuICAgICAgICBpZiAoYnV0dG9uIGluIHRoaXMucHJlc3NlZCkge1xuICAgICAgICAgICAgdGhpcy5wcmVzc2VkW2J1dHRvbl0gPSB0aGlzLnByZXNzZWRbYnV0dG9uXS5maWx0ZXIoKGspPT5rLm5hbWUgIT09IGtleURlZi5uYW1lKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXNzZWRbYnV0dG9uXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucHJlc3NlZFtidXR0b25dO1xuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInByZXNzZWRcIiwge30pO1xuICAgIH1cbn1cbmNvbnN0IE1vdXNlQnV0dG9uID0ge1xuICAgIHByaW1hcnk6IDAsXG4gICAgc2Vjb25kYXJ5OiAxLFxuICAgIGF1eGlsaWFyeTogMixcbiAgICBiYWNrOiAzLFxuICAgIFgxOiAzLFxuICAgIGZvcndhcmQ6IDQsXG4gICAgWDI6IDRcbn07XG5mdW5jdGlvbiBnZXRNb3VzZUJ1dHRvbklkKGJ1dHRvbiA9IDApIHtcbiAgICBpZiAoYnV0dG9uIGluIE1vdXNlQnV0dG9uKSB7XG4gICAgICAgIHJldHVybiBNb3VzZUJ1dHRvbltidXR0b25dO1xuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyKGJ1dHRvbik7XG59XG4vLyBPbiB0aGUgYE1vdXNlRXZlbnQuYnV0dG9uYCBwcm9wZXJ0eSBhdXhpbGlhcnkgYW5kIHNlY29uZGFyeSBidXR0b24gYXJlIGZsaXBwZWQgY29tcGFyZWQgdG8gYE1vdXNlRXZlbnQuYnV0dG9uc2AuXG5jb25zdCBNb3VzZUJ1dHRvbkZsaXAgPSB7XG4gICAgMTogMixcbiAgICAyOiAxXG59O1xuZnVuY3Rpb24gZ2V0TW91c2VFdmVudEJ1dHRvbihidXR0b24pIHtcbiAgICBidXR0b24gPSBnZXRNb3VzZUJ1dHRvbklkKGJ1dHRvbik7XG4gICAgaWYgKGJ1dHRvbiBpbiBNb3VzZUJ1dHRvbkZsaXApIHtcbiAgICAgICAgcmV0dXJuIE1vdXNlQnV0dG9uRmxpcFtidXR0b25dO1xuICAgIH1cbiAgICByZXR1cm4gYnV0dG9uO1xufVxuXG5leHBvcnRzLkJ1dHRvbnMgPSBCdXR0b25zO1xuZXhwb3J0cy5Nb3VzZUJ1dHRvbiA9IE1vdXNlQnV0dG9uO1xuZXhwb3J0cy5Nb3VzZUJ1dHRvbkZsaXAgPSBNb3VzZUJ1dHRvbkZsaXA7XG5leHBvcnRzLmdldE1vdXNlQnV0dG9uSWQgPSBnZXRNb3VzZUJ1dHRvbklkO1xuZXhwb3J0cy5nZXRNb3VzZUV2ZW50QnV0dG9uID0gZ2V0TW91c2VFdmVudEJ1dHRvbjtcbiJdLCJ2ZXJzaW9uIjozfQ==