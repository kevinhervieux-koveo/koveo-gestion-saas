ab43982be3ce83f151268b47db4b4b66
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenValidationStep = TokenValidationStep;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const card_1 = require("@/components/ui/card");
const alert_1 = require("@/components/ui/alert");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
/**
 * Token Validation Step Component.
 *
 * Validates invitation token and displays invitation details.
 * Handles expired, invalid, and malformed tokens with appropriate feedback.
 * @param root0 - The wizard step props.
 * @param root0.data - Current step data.
 * @param root0.onDataChange - Callback when step data changes.
 * @param root0.onValidationChange - Callback when validation status changes.
 * @returns JSX element for the token validation step.
 */
/**
 * TokenValidationStep function.
 * @param root0
 * @param root0.data
 * @param root0.onDataChange
 * @param root0.onValidationChange
 * @param root0._data
 * @returns Function result.
 */
function TokenValidationStep({ _data, onDataChange, onValidationChange }) {
    const { t: _t } = (0, use_language_1.useLanguage)();
    const [isValidating, setIsValidating] = (0, react_1.useState)(false);
    const [validationResult, setValidationResult] = (0, react_1.useState)(_data || null);
    const [validatedToken, setValidatedToken] = (0, react_1.useState)(() => {
        // Initialize from sessionStorage to persist across component re-renders
        if (typeof window !== 'undefined') {
            return sessionStorage.getItem('koveo-validated-token');
        }
        return null;
    }); // Track which token was validated
    const hasValidatedRef = (0, react_1.useRef)(new Set()); // Prevent duplicate validations completely
    const validateToken = async (token) => {
        // Triple-check: state, sessionStorage, and ref guard
        const sessionValidatedToken = sessionStorage.getItem('koveo-validated-token');
        // Skip if already validating this token OR if already validated
        if (validatedToken === token ||
            sessionValidatedToken === token ||
            hasValidatedRef.current.has(token) ||
            isValidating) {
            // Token validation skipped
            return;
        }
        // Mark this token as being validated in state, sessionStorage, AND ref
        setValidatedToken(token);
        sessionStorage.setItem('koveo-validated-token', token);
        hasValidatedRef.current.add(token);
        setIsValidating(true);
        try {
            const response = await fetch('/api/invitations/validate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ token }),
            });
            const result = await response.json();
            if (response.ok && result.isValid) {
                const validationData = {
                    token,
                    email: result.invitation.email,
                    role: result.invitation.role,
                    organizationName: result.organizationName || 'Koveo Gestion',
                    inviterName: result.inviterName || 'Administrateur',
                    expiresAt: result.invitation.expiresAt,
                    isValid: true,
                };
                // Store successful validation in sessionStorage
                sessionStorage.setItem('koveo-validation-result', JSON.stringify(validationData));
                setValidationResult(validationData);
                onDataChange(validationData);
                onValidationChange(true);
            }
            else {
                const errorData = {
                    token,
                    email: '',
                    role: '',
                    organizationName: '',
                    inviterName: '',
                    expiresAt: '',
                    isValid: false,
                    error: result.message || 'Token invalide',
                };
                setValidationResult(errorData);
                onDataChange(errorData);
                onValidationChange(false);
            }
        }
        catch (error) {
            // Error validating token
            const errorData = {
                token,
                email: '',
                role: '',
                organizationName: '',
                inviterName: '',
                expiresAt: '',
                isValid: false,
                error: 'Erreur de connexion au serveur',
            };
            setValidationResult(errorData);
            onDataChange(errorData);
            onValidationChange(false);
        }
        finally {
            setIsValidating(false);
        }
    };
    // Track if initial effect has run to prevent multiple executions
    const initialEffectRan = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        // Prevent running multiple times
        if (initialEffectRan.current)
            return;
        initialEffectRan.current = true;
        // Auto-validate if token is provided via URL params
        const urlParams = new window.URLSearchParams(window.location.search);
        const token = urlParams.get('token') || urlParams.get('invitation');
        // Token auto-validation check
        if (token && validatedToken !== token && !hasValidatedRef.current.has(token) && !isValidating) {
            validateToken(token);
        }
    }, []); // Only run once on component mount
    const getTimeRemaining = (expiresAt) => {
        const now = new Date();
        const expires = new Date(expiresAt);
        const diff = expires.getTime() - now.getTime();
        if (diff <= 0) {
            return 'Expiré';
        }
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        if (days > 0) {
            return `${days} jour${days > 1 ? 's' : ''} restant${days > 1 ? 's' : ''}`;
        }
        else if (hours > 0) {
            return `${hours} heure${hours > 1 ? 's' : ''} restante${hours > 1 ? 's' : ''}`;
        }
        else {
            return 'Expire bientôt';
        }
    };
    const getRoleBadgeColor = (role) => {
        switch (role) {
            case 'admin':
                return 'bg-red-100 text-red-800';
            case 'manager':
                return 'bg-blue-100 text-blue-800';
            case 'tenant':
                return 'bg-gray-100 text-gray-800';
            default:
                return 'bg-gray-100 text-gray-800';
        }
    };
    if (isValidating) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col items-center justify-center py-12', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-medium text-gray-900 mb-2', children: "Validation de l'invitation" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 text-center max-w-md', children: "V\u00E9rification du token d'invitation et des d\u00E9tails associ\u00E9s..." })] }));
    }
    if (!validationResult) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col items-center justify-center py-12', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { className: 'h-12 w-12 text-yellow-500 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-medium text-gray-900 mb-2', children: "Token d'invitation requis" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 text-center max-w-md', children: "Aucun token d'invitation valide n'a \u00E9t\u00E9 trouv\u00E9. Veuillez utiliser le lien d'invitation re\u00E7u par email." })] }));
    }
    if (!validationResult.isValid) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: 'destructive', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.XCircle, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsxs)(alert_1.AlertDescription, { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Invitation invalide:" }), " ", validationResult.error] })] }), (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'border-red-200 bg-red-50', children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.XCircle, { className: 'h-12 w-12 text-red-500 mx-auto mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-medium text-red-900 mb-2', children: "Impossible de valider l'invitation" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-red-700 mb-4', children: "Le lien d'invitation peut \u00EAtre expir\u00E9, invalide ou d\u00E9j\u00E0 utilis\u00E9." }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-red-600 space-y-1', children: [(0, jsx_runtime_1.jsx)("p", { children: "\u2022 V\u00E9rifiez que vous utilisez le lien complet re\u00E7u par email" }), (0, jsx_runtime_1.jsx)("p", { children: "\u2022 Assurez-vous que l'invitation n'est pas expir\u00E9e" }), (0, jsx_runtime_1.jsx)("p", { children: "\u2022 Contactez l'administrateur si le probl\u00E8me persiste" })] })] }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)(alert_1.Alert, { className: 'border-green-200 bg-green-50', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'h-4 w-4 text-green-600' }), (0, jsx_runtime_1.jsxs)(alert_1.AlertDescription, { className: 'text-green-800', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Invitation valide!" }), " Vous pouvez proc\u00E9der \u00E0 la cr\u00E9ation de votre compte."] })] }), (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'border-green-200 bg-green-50', children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'pt-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'text-center mb-6', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'h-12 w-12 text-green-500 mx-auto mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-medium text-green-900 mb-2', children: "Invitation confirm\u00E9e" }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-green-700', children: ["Vous avez \u00E9t\u00E9 invit\u00E9(e) \u00E0 rejoindre ", validationResult.organizationName] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'bg-white p-4 rounded-lg border border-green-200', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: 'h-5 w-5 text-gray-500 mr-2' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-gray-600', children: "Email" })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-900 font-medium', children: validationResult.email })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-white p-4 rounded-lg border border-green-200', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-5 w-5 text-gray-500 mr-2' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-gray-600', children: "R\u00F4le" })] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: getRoleBadgeColor(validationResult.role), children: [validationResult.role === 'admin' && 'Administrateur', validationResult.role === 'manager' && 'Gestionnaire', validationResult.role === 'tenant' && 'Locataire', validationResult.role === 'resident' && 'Résident'] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-white p-4 rounded-lg border border-green-200', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-5 w-5 text-gray-500 mr-2' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-gray-600', children: "Invit\u00E9 par" })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-900', children: validationResult.inviterName })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-white p-4 rounded-lg border border-green-200', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'h-5 w-5 text-gray-500 mr-2' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-gray-600', children: "Validit\u00E9" })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-900', children: getTimeRemaining(validationResult.expiresAt) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'text-sm font-medium text-blue-900 mb-2', children: "\uD83D\uDEE1\uFE0F Protection des donn\u00E9es personnelles (Loi 25 - Qu\u00E9bec)" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-blue-800', children: "En acceptant cette invitation, vous reconnaissez avoir \u00E9t\u00E9 inform\u00E9(e) de la collecte et de l'utilisation de vos donn\u00E9es personnelles conform\u00E9ment \u00E0 la Loi 25 du Qu\u00E9bec sur la protection des renseignements personnels dans le secteur priv\u00E9." })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,