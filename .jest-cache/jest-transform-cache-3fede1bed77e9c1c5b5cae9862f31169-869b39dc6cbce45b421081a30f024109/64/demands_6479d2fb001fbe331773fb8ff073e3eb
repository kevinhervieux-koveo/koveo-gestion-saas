205eab6afbafe24721ad62f05ef98457
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDemandRoutes = registerDemandRoutes;
const db_1 = require("../db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const index_1 = require("../auth/index");
const operations_1 = require("../../shared/schemas/operations");
/**
 * Register demand routes for managing resident demands and complaints.
 *
 * @param app - Express application instance.
 */
/**
 * RegisterDemandRoutes function.
 * @param app
 * @returns Function result.
 */
function registerDemandRoutes(app) {
    // Get demands for a user (residents and managers)
    app.get('/api/demands', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const { buildingId, residenceId, type, status, search } = req.query;
            // Base query with joins
            let query = db_1.db
                .select({
                id: schema_1.demands.id,
                submitterId: schema_1.demands.submitterId,
                type: schema_1.demands.type,
                assignationResidenceId: schema_1.demands.assignationResidenceId,
                assignationBuildingId: schema_1.demands.assignationBuildingId,
                description: schema_1.demands.description,
                attachments: schema_1.demands.attachments,
                residenceId: schema_1.demands.residenceId,
                buildingId: schema_1.demands.buildingId,
                status: schema_1.demands.status,
                reviewedBy: schema_1.demands.reviewedBy,
                reviewedAt: schema_1.demands.reviewedAt,
                reviewNotes: schema_1.demands.reviewNotes,
                createdAt: schema_1.demands.createdAt,
                updatedAt: schema_1.demands.updatedAt,
                submitter: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
                residence: {
                    id: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    buildingId: schema_1.residences.buildingId,
                },
                building: {
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                },
            })
                .from(schema_1.demands)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demands.submitterId, schema_1.users.id))
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.demands.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.demands.buildingId, schema_1.buildings.id));
            // Apply filters - all users only see demands they created
            const conditions = [(0, drizzle_orm_1.eq)(schema_1.demands.submitterId, user.id)];
            // Add filter conditions
            if (buildingId) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.buildingId, buildingId));
            }
            if (residenceId) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.residenceId, residenceId));
            }
            if (type) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.type, type));
            }
            if (status) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.status, status));
            }
            // Apply conditions to query if any exist
            let finalQuery;
            if (conditions.length > 0) {
                finalQuery = query.where((0, drizzle_orm_1.and)(...conditions));
            }
            else {
                finalQuery = query;
            }
            const results = await finalQuery.orderBy((0, drizzle_orm_1.desc)(schema_1.demands.createdAt));
            // Filter by search term if provided
            let filteredResults = results;
            if (search) {
                const searchTerm = search.toLowerCase();
                filteredResults = results.filter((demand) => demand.description.toLowerCase().includes(searchTerm) ||
                    demand.submitter.firstName?.toLowerCase().includes(searchTerm) ||
                    demand.submitter.lastName?.toLowerCase().includes(searchTerm) ||
                    demand.residence.unitNumber.toLowerCase().includes(searchTerm) ||
                    demand.building.name.toLowerCase().includes(searchTerm));
            }
            res.json(filteredResults);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demands' });
        }
    });
    // Get a specific demand
    app.get('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const demand = await db_1.db
                .select({
                id: schema_1.demands.id,
                submitterId: schema_1.demands.submitterId,
                type: schema_1.demands.type,
                assignationResidenceId: schema_1.demands.assignationResidenceId,
                assignationBuildingId: schema_1.demands.assignationBuildingId,
                description: schema_1.demands.description,
                attachments: schema_1.demands.attachments,
                residenceId: schema_1.demands.residenceId,
                buildingId: schema_1.demands.buildingId,
                status: schema_1.demands.status,
                reviewedBy: schema_1.demands.reviewedBy,
                reviewedAt: schema_1.demands.reviewedAt,
                reviewNotes: schema_1.demands.reviewNotes,
                createdAt: schema_1.demands.createdAt,
                updatedAt: schema_1.demands.updatedAt,
                submitter: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
                residence: {
                    id: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    buildingId: schema_1.residences.buildingId,
                },
                building: {
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                },
            })
                .from(schema_1.demands)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demands.submitterId, schema_1.users.id))
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.demands.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.demands.buildingId, schema_1.buildings.id))
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, id))
                .limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demandData = demand[0];
            // Check access permissions - users can only view their own demands
            if (demandData.submitterId !== user.id) {
                return res.status(403).json({ message: 'Access denied' });
            }
            res.json(demandData);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demand' });
        }
    });
    // Create a new demand
    app.post('/api/demands', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const demandData = req.body;
            // Validate input using the corrected schema that already has optional fields
            const demandInputSchema = operations_1.insertDemandSchema.omit({ submitterId: true });
            // Validate input
            const validatedData = demandInputSchema.parse(demandData);
            console.log('✅ Demand validation passed:', validatedData);
            // Auto-populate residence and building from user's primary residence if not provided
            if (!validatedData.residenceId || !validatedData.buildingId) {
                const userResidenceData = await db_1.db
                    .select({
                    residenceId: schema_1.userResidences.residenceId,
                    buildingId: schema_1.residences.buildingId,
                })
                    .from(schema_1.userResidences)
                    .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                    .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, user.id))
                    .limit(1);
                if (userResidenceData.length === 0) {
                    return res
                        .status(400)
                        .json({ message: 'User must be assigned to a residence to create demands' });
                }
                validatedData.residenceId = validatedData.residenceId || userResidenceData[0].residenceId;
                validatedData.buildingId = validatedData.buildingId || userResidenceData[0].buildingId;
            }
            // Ensure required fields are present after auto-population
            if (!validatedData.buildingId || !validatedData.residenceId) {
                return res.status(400).json({
                    message: 'Building and residence are required to create a demand'
                });
            }
            console.log('✅ Final demand data before insertion:', {
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                type: validatedData.type,
                description: validatedData.description
            });
            const demandInsertData = {
                ...validatedData,
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                submitterId: user.id,
                status: validatedData.status || 'submitted',
            };
            const newDemand = await db_1.db.insert(schema_1.demands).values([demandInsertData]).returning();
            res.status(201).json(newDemand[0]);
        }
        catch (error) {
            if (error.name === 'ZodError') {
                return res.status(400).json({ message: 'Invalid demand data', errors: error.errors });
            }
            res.status(500).json({ message: 'Failed to create demand' });
        }
    });
    // Update a demand
    app.put('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const updates = req.body;
            // Get the current demand
            const currentDemand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demand = currentDemand[0];
            // Check permissions - users can only update their own demands
            if (demand.submitterId !== user.id) {
                return res.status(403).json({ message: 'Access denied' });
            }
            const updatedDemand = await db_1.db
                .update(schema_1.demands)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, id))
                .returning();
            res.json(updatedDemand[0]);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to update demand' });
        }
    });
    // Delete a demand
    app.delete('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            // Get the current demand
            const currentDemand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demand = currentDemand[0];
            // Check permissions - users can only delete their own demands
            if (demand.submitterId !== user.id) {
                return res.status(403).json({ message: 'Access denied' });
            }
            await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id));
            res.json({ message: 'Demand deleted successfully' });
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to delete demand' });
        }
    });
    // Get comments for a demand
    app.get('/api/demands/:id/comments', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            // First check if user has access to the demand
            const demand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            // Check access permissions (same logic as get demand)
            // ... (permission check logic similar to get demand endpoint)
            const comments = await db_1.db
                .select({
                id: schema_1.demandComments.id,
                demandId: schema_1.demandComments.demandId,
                commentText: schema_1.demandComments.commentText,
                commentType: schema_1.demandComments.commentType,
                isInternal: schema_1.demandComments.isInternal,
                commenterId: schema_1.demandComments.commenterId,
                createdAt: schema_1.demandComments.createdAt,
                author: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
            })
                .from(schema_1.demandComments)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demandComments.commenterId, schema_1.users.id))
                .where((0, drizzle_orm_1.eq)(schema_1.demandComments.demandId, id))
                .orderBy((0, drizzle_orm_1.asc)(schema_1.demandComments.createdAt));
            res.json(comments);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demand comments' });
        }
    });
    // Create a comment on a demand
    app.post('/api/demands/:id/comments', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const commentData = req.body;
            // Validate input
            const validatedData = operations_1.insertDemandCommentSchema.parse({
                ...commentData,
                demandId: id,
                commenterId: user.id,
            });
            // Check if user has access to the demand (similar logic as above)
            const demand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const newComment = await db_1.db.insert(schema_1.demandComments).values(validatedData).returning();
            res.status(201).json(newComment[0]);
        }
        catch (error) {
            if (error.name === 'ZodError') {
                return res.status(400).json({ message: 'Invalid comment data', errors: error.errors });
            }
            res.status(500).json({ message: 'Failed to create comment' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,