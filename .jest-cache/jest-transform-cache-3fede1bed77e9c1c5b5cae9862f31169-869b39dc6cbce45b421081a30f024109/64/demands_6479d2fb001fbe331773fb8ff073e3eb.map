{"file":"/home/runner/workspace/server/api/demands.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/demands.ts"],"sourcesContent":["import { Express } from 'express';\nimport { db } from '../db';\nimport {\n  demands,\n  demandComments,\n  residences,\n  buildings,\n  users,\n  userResidences,\n  userOrganizations,\n  organizations,\n} from '../../shared/schema';\nimport { eq, and, or, inArray, desc, asc } from 'drizzle-orm';\nimport { requireAuth } from '../auth/index';\nimport { insertDemandSchema, insertDemandCommentSchema } from '../../shared/schemas/operations';\nimport { z } from 'zod';\n\n/**\n * Register demand routes for managing resident demands and complaints.\n *\n * @param app - Express application instance.\n */\n/**\n * RegisterDemandRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerDemandRoutes(app: Express) {\n  // Get demands for a user (residents and managers)\n  app.get('/api/demands', requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user;\n      const { buildingId, residenceId, type, status, search } = req.query;\n\n      // Base query with joins\n      let query = db\n        .select({\n          id: demands.id,\n          submitterId: demands.submitterId,\n          type: demands.type,\n          assignationResidenceId: demands.assignationResidenceId,\n          assignationBuildingId: demands.assignationBuildingId,\n          description: demands.description,\n          attachments: demands.attachments,\n          residenceId: demands.residenceId,\n          buildingId: demands.buildingId,\n          status: demands.status,\n          reviewedBy: demands.reviewedBy,\n          reviewedAt: demands.reviewedAt,\n          reviewNotes: demands.reviewNotes,\n          createdAt: demands.createdAt,\n          updatedAt: demands.updatedAt,\n          submitter: {\n            id: users.id,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            email: users.email,\n          },\n          residence: {\n            id: residences.id,\n            unitNumber: residences.unitNumber,\n            buildingId: residences.buildingId,\n          },\n          building: {\n            id: buildings.id,\n            name: buildings.name,\n            address: buildings.address,\n          },\n        })\n        .from(demands)\n        .innerJoin(users, eq(demands.submitterId, users.id))\n        .innerJoin(residences, eq(demands.residenceId, residences.id))\n        .innerJoin(buildings, eq(demands.buildingId, buildings.id));\n\n      // Apply filters - all users only see demands they created\n      const conditions = [eq(demands.submitterId, user.id)];\n\n      // Add filter conditions\n      if (buildingId) {\n        conditions.push(eq(demands.buildingId, buildingId));\n      }\n      if (residenceId) {\n        conditions.push(eq(demands.residenceId, residenceId));\n      }\n      if (type) {\n        conditions.push(eq(demands.type, type));\n      }\n      if (status) {\n        conditions.push(eq(demands.status, status));\n      }\n\n      // Apply conditions to query if any exist\n      let finalQuery;\n      if (conditions.length > 0) {\n        finalQuery = query.where(and(...conditions));\n      } else {\n        finalQuery = query;\n      }\n\n      const results = await finalQuery.orderBy(desc(demands.createdAt));\n\n      // Filter by search term if provided\n      let filteredResults = results;\n      if (search) {\n        const searchTerm = search.toLowerCase();\n        filteredResults = results.filter(\n          (demand) =>\n            demand.description.toLowerCase().includes(searchTerm) ||\n            demand.submitter.firstName?.toLowerCase().includes(searchTerm) ||\n            demand.submitter.lastName?.toLowerCase().includes(searchTerm) ||\n            demand.residence.unitNumber.toLowerCase().includes(searchTerm) ||\n            demand.building.name.toLowerCase().includes(searchTerm)\n        );\n      }\n\n      res.json(filteredResults);\n    } catch (error: any) {\n      res.status(500).json({ message: 'Failed to fetch demands' });\n    }\n  });\n\n  // Get a specific demand\n  app.get('/api/demands/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n\n      const demand = await db\n        .select({\n          id: demands.id,\n          submitterId: demands.submitterId,\n          type: demands.type,\n          assignationResidenceId: demands.assignationResidenceId,\n          assignationBuildingId: demands.assignationBuildingId,\n          description: demands.description,\n          attachments: demands.attachments,\n          residenceId: demands.residenceId,\n          buildingId: demands.buildingId,\n          status: demands.status,\n          reviewedBy: demands.reviewedBy,\n          reviewedAt: demands.reviewedAt,\n          reviewNotes: demands.reviewNotes,\n          createdAt: demands.createdAt,\n          updatedAt: demands.updatedAt,\n          submitter: {\n            id: users.id,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            email: users.email,\n          },\n          residence: {\n            id: residences.id,\n            unitNumber: residences.unitNumber,\n            buildingId: residences.buildingId,\n          },\n          building: {\n            id: buildings.id,\n            name: buildings.name,\n            address: buildings.address,\n          },\n        })\n        .from(demands)\n        .innerJoin(users, eq(demands.submitterId, users.id))\n        .innerJoin(residences, eq(demands.residenceId, residences.id))\n        .innerJoin(buildings, eq(demands.buildingId, buildings.id))\n        .where(eq(demands.id, id))\n        .limit(1);\n\n      if (demand.length === 0) {\n        return res.status(404).json({ message: 'Demand not found' });\n      }\n\n      const demandData = demand[0];\n\n      // Check access permissions - users can only view their own demands\n      if (demandData.submitterId !== user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      res.json(demandData);\n    } catch (error: any) {\n      res.status(500).json({ message: 'Failed to fetch demand' });\n    }\n  });\n\n  // Create a new demand\n  app.post('/api/demands', requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user;\n      const demandData = req.body;\n      \n\n      // Validate input using the corrected schema that already has optional fields\n      const demandInputSchema = insertDemandSchema.omit({ submitterId: true });\n      \n      // Validate input\n      const validatedData = demandInputSchema.parse(demandData);\n      \n      console.log('✅ Demand validation passed:', validatedData);\n\n      // Auto-populate residence and building from user's primary residence if not provided\n      if (!validatedData.residenceId || !validatedData.buildingId) {\n        const userResidenceData = await db\n          .select({\n            residenceId: userResidences.residenceId,\n            buildingId: residences.buildingId,\n          })\n          .from(userResidences)\n          .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n          .where(eq(userResidences.userId, user.id))\n          .limit(1);\n\n        if (userResidenceData.length === 0) {\n          return res\n            .status(400)\n            .json({ message: 'User must be assigned to a residence to create demands' });\n        }\n\n        validatedData.residenceId = validatedData.residenceId || userResidenceData[0].residenceId;\n        validatedData.buildingId = validatedData.buildingId || userResidenceData[0].buildingId;\n      }\n\n      // Ensure required fields are present after auto-population\n      if (!validatedData.buildingId || !validatedData.residenceId) {\n        return res.status(400).json({ \n          message: 'Building and residence are required to create a demand' \n        });\n      }\n      \n      console.log('✅ Final demand data before insertion:', {\n        buildingId: validatedData.buildingId,\n        residenceId: validatedData.residenceId,\n        type: validatedData.type,\n        description: validatedData.description\n      });\n\n      const demandInsertData = {\n        ...validatedData,\n        buildingId: validatedData.buildingId,\n        residenceId: validatedData.residenceId,\n        submitterId: user.id,\n        status: (validatedData.status as 'submitted' | 'under_review' | 'approved' | 'rejected' | 'in_progress' | 'completed' | 'cancelled') || 'submitted',\n      };\n\n      const newDemand = await db.insert(demands).values([demandInsertData]).returning();\n\n      res.status(201).json(newDemand[0]);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: 'Invalid demand data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to create demand' });\n    }\n  });\n\n  // Update a demand\n  app.put('/api/demands/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n      const updates = req.body;\n\n      // Get the current demand\n      const currentDemand = await db.select().from(demands).where(eq(demands.id, id)).limit(1);\n\n      if (currentDemand.length === 0) {\n        return res.status(404).json({ message: 'Demand not found' });\n      }\n\n      const demand = currentDemand[0];\n\n      // Check permissions - users can only update their own demands\n      if (demand.submitterId !== user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      const updatedDemand = await db\n        .update(demands)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(demands.id, id))\n        .returning();\n\n      res.json(updatedDemand[0]);\n    } catch (error: any) {\n      res.status(500).json({ message: 'Failed to update demand' });\n    }\n  });\n\n  // Delete a demand\n  app.delete('/api/demands/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n\n      // Get the current demand\n      const currentDemand = await db.select().from(demands).where(eq(demands.id, id)).limit(1);\n\n      if (currentDemand.length === 0) {\n        return res.status(404).json({ message: 'Demand not found' });\n      }\n\n      const demand = currentDemand[0];\n\n      // Check permissions - users can only delete their own demands\n      if (demand.submitterId !== user.id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      await db.delete(demands).where(eq(demands.id, id));\n\n      res.json({ message: 'Demand deleted successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: 'Failed to delete demand' });\n    }\n  });\n\n  // Get comments for a demand\n  app.get('/api/demands/:id/comments', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n\n      // First check if user has access to the demand\n      const demand = await db.select().from(demands).where(eq(demands.id, id)).limit(1);\n\n      if (demand.length === 0) {\n        return res.status(404).json({ message: 'Demand not found' });\n      }\n\n      // Check access permissions (same logic as get demand)\n      // ... (permission check logic similar to get demand endpoint)\n\n      const comments = await db\n        .select({\n          id: demandComments.id,\n          demandId: demandComments.demandId,\n          commentText: demandComments.commentText,\n          commentType: demandComments.commentType,\n          isInternal: demandComments.isInternal,\n          commenterId: demandComments.commenterId,\n          createdAt: demandComments.createdAt,\n          author: {\n            id: users.id,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            email: users.email,\n          },\n        })\n        .from(demandComments)\n        .innerJoin(users, eq(demandComments.commenterId, users.id))\n        .where(eq(demandComments.demandId, id))\n        .orderBy(asc(demandComments.createdAt));\n\n      res.json(comments);\n    } catch (error: any) {\n      res.status(500).json({ message: 'Failed to fetch demand comments' });\n    }\n  });\n\n  // Create a comment on a demand\n  app.post('/api/demands/:id/comments', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n      const commentData = req.body;\n\n      // Validate input\n      const validatedData = insertDemandCommentSchema.parse({\n        ...commentData,\n        demandId: id,\n        commenterId: user.id,\n      });\n\n      // Check if user has access to the demand (similar logic as above)\n      const demand = await db.select().from(demands).where(eq(demands.id, id)).limit(1);\n\n      if (demand.length === 0) {\n        return res.status(404).json({ message: 'Demand not found' });\n      }\n\n      const newComment = await db.insert(demandComments).values(validatedData).returning();\n\n      res.status(201).json(newComment[0]);\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: 'Invalid comment data', errors: error.errors });\n      }\n      res.status(500).json({ message: 'Failed to create comment' });\n    }\n  });\n}\n"],"version":3}