eebdb00863ec963db6b4beb39a05b21b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPreviousMonth = getPreviousMonth;
/**
 * Returns the previous month the user can navigate to, based on the given
 * options.
 *
 * The previous month is not always the previous calendar month:
 *
 * - If it is before the `calendarStartMonth`, it returns `undefined`.
 * - If paged navigation is enabled, it skips back by the number of displayed
 *   months.
 *
 * @param firstDisplayedMonth The first month currently displayed in the
 *   calendar.
 * @param calendarStartMonth The earliest month the user can navigate to.
 * @param options Navigation options, including `numberOfMonths` and
 *   `pagedNavigation`.
 * @param dateLib The date library to use for date manipulation.
 * @returns The previous month, or `undefined` if navigation is not possible.
 */
function getPreviousMonth(firstDisplayedMonth, calendarStartMonth, options, dateLib) {
    if (options.disableNavigation) {
        return undefined;
    }
    const { pagedNavigation, numberOfMonths } = options;
    const { startOfMonth, addMonths, differenceInCalendarMonths } = dateLib;
    const offset = pagedNavigation ? (numberOfMonths ?? 1) : 1;
    const month = startOfMonth(firstDisplayedMonth);
    if (!calendarStartMonth) {
        return addMonths(month, -offset);
    }
    const monthsDiff = differenceInCalendarMonths(month, calendarStartMonth);
    if (monthsDiff <= 0) {
        return undefined;
    }
    return addMonths(month, -offset);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldFByZXZpb3VzTW9udGguanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0FBQzVDOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILFNBQVMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsa0JBQWtCLEVBQUUsT0FBTyxFQUFFLE9BQU87SUFDL0UsSUFBSSxPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUM1QixPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBQ0QsTUFBTSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDcEQsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDeEUsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxNQUFNLFVBQVUsR0FBRywwQkFBMEIsQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUN6RSxJQUFJLFVBQVUsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNsQixPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9yZWFjdC1kYXktcGlja2VyL2Rpc3QvY2pzL2hlbHBlcnMvZ2V0UHJldmlvdXNNb250aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UHJldmlvdXNNb250aCA9IGdldFByZXZpb3VzTW9udGg7XG4vKipcbiAqIFJldHVybnMgdGhlIHByZXZpb3VzIG1vbnRoIHRoZSB1c2VyIGNhbiBuYXZpZ2F0ZSB0bywgYmFzZWQgb24gdGhlIGdpdmVuXG4gKiBvcHRpb25zLlxuICpcbiAqIFRoZSBwcmV2aW91cyBtb250aCBpcyBub3QgYWx3YXlzIHRoZSBwcmV2aW91cyBjYWxlbmRhciBtb250aDpcbiAqXG4gKiAtIElmIGl0IGlzIGJlZm9yZSB0aGUgYGNhbGVuZGFyU3RhcnRNb250aGAsIGl0IHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKiAtIElmIHBhZ2VkIG5hdmlnYXRpb24gaXMgZW5hYmxlZCwgaXQgc2tpcHMgYmFjayBieSB0aGUgbnVtYmVyIG9mIGRpc3BsYXllZFxuICogICBtb250aHMuXG4gKlxuICogQHBhcmFtIGZpcnN0RGlzcGxheWVkTW9udGggVGhlIGZpcnN0IG1vbnRoIGN1cnJlbnRseSBkaXNwbGF5ZWQgaW4gdGhlXG4gKiAgIGNhbGVuZGFyLlxuICogQHBhcmFtIGNhbGVuZGFyU3RhcnRNb250aCBUaGUgZWFybGllc3QgbW9udGggdGhlIHVzZXIgY2FuIG5hdmlnYXRlIHRvLlxuICogQHBhcmFtIG9wdGlvbnMgTmF2aWdhdGlvbiBvcHRpb25zLCBpbmNsdWRpbmcgYG51bWJlck9mTW9udGhzYCBhbmRcbiAqICAgYHBhZ2VkTmF2aWdhdGlvbmAuXG4gKiBAcGFyYW0gZGF0ZUxpYiBUaGUgZGF0ZSBsaWJyYXJ5IHRvIHVzZSBmb3IgZGF0ZSBtYW5pcHVsYXRpb24uXG4gKiBAcmV0dXJucyBUaGUgcHJldmlvdXMgbW9udGgsIG9yIGB1bmRlZmluZWRgIGlmIG5hdmlnYXRpb24gaXMgbm90IHBvc3NpYmxlLlxuICovXG5mdW5jdGlvbiBnZXRQcmV2aW91c01vbnRoKGZpcnN0RGlzcGxheWVkTW9udGgsIGNhbGVuZGFyU3RhcnRNb250aCwgb3B0aW9ucywgZGF0ZUxpYikge1xuICAgIGlmIChvcHRpb25zLmRpc2FibGVOYXZpZ2F0aW9uKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IHsgcGFnZWROYXZpZ2F0aW9uLCBudW1iZXJPZk1vbnRocyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7IHN0YXJ0T2ZNb250aCwgYWRkTW9udGhzLCBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyB9ID0gZGF0ZUxpYjtcbiAgICBjb25zdCBvZmZzZXQgPSBwYWdlZE5hdmlnYXRpb24gPyAobnVtYmVyT2ZNb250aHMgPz8gMSkgOiAxO1xuICAgIGNvbnN0IG1vbnRoID0gc3RhcnRPZk1vbnRoKGZpcnN0RGlzcGxheWVkTW9udGgpO1xuICAgIGlmICghY2FsZW5kYXJTdGFydE1vbnRoKSB7XG4gICAgICAgIHJldHVybiBhZGRNb250aHMobW9udGgsIC1vZmZzZXQpO1xuICAgIH1cbiAgICBjb25zdCBtb250aHNEaWZmID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMobW9udGgsIGNhbGVuZGFyU3RhcnRNb250aCk7XG4gICAgaWYgKG1vbnRoc0RpZmYgPD0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTW9udGhzKG1vbnRoLCAtb2Zmc2V0KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==