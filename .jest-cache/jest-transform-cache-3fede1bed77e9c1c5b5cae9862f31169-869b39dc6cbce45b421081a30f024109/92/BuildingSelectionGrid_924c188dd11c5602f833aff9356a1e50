4dd99cbbafe731c01657c09c8b0dbefc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildingSelectionGrid = BuildingSelectionGrid;
const jsx_runtime_1 = require("react/jsx-runtime");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const lucide_react_1 = require("lucide-react");
/**
 * Building selection grid component.
 * @param root0 - Component props.
 * @param root0.buildings - Array of buildings to display.
 * @param root0.onBuildingSelect - Callback when building is selected.
 * @returns Building selection grid JSX.
 */
/**
 * BuildingSelectionGrid component.
 * @param props - Component props.
 * @param props.buildings - Buildings parameter.
 * @param props.onBuildingSelect - OnBuildingSelect parameter.
 * @returns JSX element.
 */
/**
 * BuildingSelectionGrid component.
 * @param props - Component props.
 * @param props.buildings - Buildings parameter.
 * @param props.onBuildingSelect - OnBuildingSelect parameter.
 * @returns JSX element.
 */
/**
 * BuildingSelectionGrid component.
 * @param props - Component props.
 * @param props.buildings - buildings parameter.
 * @param props.onBuildingSelect - onBuildingSelect parameter.
 * @returns JSX element.
 */
/**
 * BuildingSelectionGrid component.
 * @param props - Component props.
 * @param props.buildings - buildings parameter.
 * @param props.onBuildingSelect - onBuildingSelect parameter.
 * @returns JSX element.
 */
/**
 * BuildingSelectionGrid component.
 * @param props - Component props.
 * @param props.buildings - buildings parameter.
 * @param props.onBuildingSelect - onBuildingSelect parameter.
 * @returns JSX element.
 */
function BuildingSelectionGrid({ buildings, onBuildingSelect, }) {
    return ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-5 h-5' }), "Select a Building"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mb-6', children: "Choose a building to view and manage its bills" }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4', children: buildings.map((building) => ((0, jsx_runtime_1.jsx)(BuildingCard, { building: building, onSelect: () => onBuildingSelect(building.id) }, building.id))) })] })] }) }));
}
/**
 * Individual building card component.
 * @param root0 - Component props.
 * @param root0.building - Building data to display.
 * @param root0.onSelect - Callback when card is selected.
 * @returns Building card JSX.
 */
function BuildingCard({ building, onSelect }) {
    return ((0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-lg transition-all duration-200 cursor-pointer border-2 hover:border-blue-300 group', onClick: onSelect, children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'font-semibold text-lg group-hover:text-blue-600 transition-colors', children: building.name }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-500 mt-1', children: building.address }), building.city && (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-500', children: building.city })] }), (0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-8 h-8 text-gray-400 group-hover:text-blue-500 transition-colors' })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-between text-sm', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-4', children: building.buildingType && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: building.buildingType.replace('_', ' ') })) }) }), (0, jsx_runtime_1.jsx)("div", { className: 'pt-2 border-t border-gray-100', children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', className: 'w-full group-hover:bg-blue-50 group-hover:border-blue-300', onClick: (e) => {
                                e.stopPropagation();
                                onSelect();
                            }, children: "View Bills" }) })] }) }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,