{"file":"/home/runner/workspace/tests/unit/invitation-tab-translation.test.tsx","mappings":";;;AACA,2CAAuE;AAOvE,uBAAuB;AACvB,cAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE,CAAC,CAAC;IACpC,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;CACtB,CAAC,CAAC,CAAC;AAIJ,kBAAkB;AAClB,cAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE,CAAC,CAAC;IACpC,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;QACf,KAAK,EAAE,cAAI,CAAC,EAAE,EAAE;KACjB,CAAC;CACH,CAAC,CAAC,CAAC;AAEJ,iDAAiD;AACjD,cAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;IACvC,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;QAClB,CAAC,EAAE,CAAC,GAAW,EAAE,EAAE;YACjB,MAAM,YAAY,GAA2B;gBAC3C,kBAAkB,EAAE,qBAAqB;gBACzC,wBAAwB,EAAE,sEAAsE;gBAChG,kBAAkB,EAAE,wBAAwB;gBAC5C,kBAAkB,EAAE,8BAA8B;gBAClD,KAAK,EAAE,OAAO;gBACd,IAAI,EAAE,MAAM;gBACZ,YAAY,EAAE,cAAc;gBAC5B,QAAQ,EAAE,UAAU;gBACpB,SAAS,EAAE,WAAW;gBACtB,OAAO,EAAE,SAAS;gBAClB,MAAM,EAAE,QAAQ;gBAChB,OAAO,EAAE,SAAS;gBAClB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,SAAS;gBAClB,OAAO,EAAE,SAAS;gBAClB,gBAAgB,EAAE,mBAAmB;gBACrC,uBAAuB,EAAE,2FAA2F;gBACpH,MAAM,EAAE,QAAQ;gBAChB,wBAAwB,EAAE,iCAAiC;gBAC3D,sBAAsB,EAAE,6BAA6B;aACtD,CAAC;YACF,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC;QAClC,CAAC;QACD,QAAQ,EAAE,IAAI;KACf,CAAC;IACF,gBAAgB,EAAE,CAAC,EAAE,QAAQ,EAAiC,EAAE,EAAE,CAAC,QAAQ;CAC5E,CAAC,CAAC,CAAC;AArDJ,kDAA4E;AAE5E,uDAAyE;AAEzE,4EAAyE;AACzE,uCAAuC;AACvC,mDAA+C;AAO/C,MAAM,cAAc,GAAG,wBAAoD,CAAC;AA0C5E,4BAA4B;AAC5B,MAAM,eAAe,GAAG;IACtB;QACE,EAAE,EAAE,GAAG;QACP,KAAK,EAAE,sBAAsB;QAC7B,IAAI,EAAE,SAAS;QACf,MAAM,EAAE,SAAS;QACjB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE,iBAAiB;QAC3E,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;QACnC,cAAc,EAAE,OAAO;QACvB,UAAU,EAAE,YAAY;QACxB,WAAW,EAAE,aAAa;QAC1B,gBAAgB,EAAE,mBAAmB;QACrC,YAAY,EAAE,eAAe;QAC7B,mBAAmB,EAAE,KAAK;QAC1B,aAAa,EAAE,YAAY;KAC5B;IACD;QACE,EAAE,EAAE,GAAG;QACP,KAAK,EAAE,wBAAwB;QAC/B,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,SAAS;QACjB,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAE,sBAAsB;QAChF,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;QACnC,cAAc,EAAE,IAAI;QACpB,UAAU,EAAE,IAAI;QAChB,WAAW,EAAE,IAAI;QACjB,gBAAgB,EAAE,IAAI;QACtB,YAAY,EAAE,IAAI;QAClB,mBAAmB,EAAE,IAAI;QACzB,aAAa,EAAE,cAAc;KAC9B;CACF,CAAC;AAEF,yBAAyB;AACzB,MAAM,WAAW,GAA4C,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC5E,MAAM,WAAW,GAAG,IAAI,yBAAW,CAAC;QAClC,cAAc,EAAE;YACd,OAAO,EAAE;gBACP,KAAK,EAAE,KAAK;aACb;SACF;KACF,CAAC,CAAC;IAEH,OAAO,CACL,uBAAC,iCAAmB,IAAC,MAAM,EAAE,WAAW,YACrC,QAAQ,GACW,CACvB,CAAC;AACJ,CAAC,CAAC;AAEF,IAAA,kBAAQ,EAAC,qCAAqC,EAAE,GAAG,EAAE;IACnD,IAAA,oBAAU,EAAC,GAAG,EAAE;QACd,cAAI,CAAC,aAAa,EAAE,CAAC;QACrB,QAAQ,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAA,YAAE,EAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,cAAc,CAAC,kBAAkB,CAAC,GAAG,EAAE,CACrC,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC,qCAAqC;aAC5D,CAAC;YAEF,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,uCAAuC;YACvC,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACpE,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAA,YAAE,EAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;aAChC,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC3E,CAAC,CAAC,CAAC;YAEH,yDAAyD;YACzD,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,8BAA8B,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC/E,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,oCAAoC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACvF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAA,YAAE,EAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,8DAA8D;YAC9D,MAAM,eAAe,GAAG;gBACtB,OAAO;gBACP,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,WAAW;gBACX,SAAS;gBACT,QAAQ;gBACR,SAAS;aACV,CAAC;YAEF,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC/B,IAAA,gBAAM,EAAC,cAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC7D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,IAAA,YAAE,EAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,+BAA+B;YAC/B,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAEzD,gCAAgC;YAChC,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACxD,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAA,YAAE,EAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,2CAA2C;YAC3C,MAAM,YAAY,GAAG,cAAM,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;YACtE,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,mCAAmC;gBACnC,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;gBAClE,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;gBAC9D,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,2CAA2C;YAC3C,MAAM,YAAY,GAAG,cAAM,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;YACtE,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,yGAAyG;gBACzG,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,4EAA4E,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC7H,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,wCAAwC,EAAE,GAAG,EAAE;QACtD,IAAA,YAAE,EAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,2BAA2B;YAC3B,cAAc;iBACX,qBAAqB,CAAC;gBACrB,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC;iBACD,qBAAqB,CAAC;gBACrB,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;aAChC,CAAC,CAAC;YAEL,MAAM,SAAS,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;YAC3B,OAAO,CAAC,mBAAmB,CAAC,CAAC,QAAsB,CAAC,eAAe,CAAC;gBACnE,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,kCAAkC;YAClC,MAAM,YAAY,GAAG,cAAM,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;YACtE,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,2CAA2C,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC5F,CAAC,CAAC,CAAC;YAEH,wDAAwD;YACxD,MAAM,aAAa,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAChF,iBAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAE/B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,oBAAoB,CACpC,gBAAM,CAAC,gBAAgB,CAAC;oBACtB,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,iCAAiC;iBAC/C,CAAC,CACH,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,uBAAuB;YACvB,cAAc;iBACX,qBAAqB,CAAC;gBACrB,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC;iBACD,qBAAqB,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAErD,MAAM,SAAS,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;YAC3B,OAAO,CAAC,mBAAmB,CAAC,CAAC,QAAsB,CAAC,eAAe,CAAC;gBACnE,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,kCAAkC;YAClC,MAAM,YAAY,GAAG,cAAM,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;YACtE,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,2CAA2C,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC5F,CAAC,CAAC,CAAC;YAEH,wDAAwD;YACxD,MAAM,aAAa,GAAG,cAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,CAAC;YAChF,iBAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAE/B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,oBAAoB,CACpC,gBAAM,CAAC,gBAAgB,CAAC;oBACtB,KAAK,EAAE,OAAO;oBACd,WAAW,EAAE,6BAA6B;oBAC1C,OAAO,EAAE,aAAa;iBACvB,CAAC,CACH,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,yCAAyC,EAAE,GAAG,EAAE;QACvD,IAAA,YAAE,EAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,mBAAmB;YACnB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAEpE,2BAA2B;YAC3B,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,sEAAsE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACvH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,YAAE,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,2CAA2C;YAC3C,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACxD,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAA,YAAE,EAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,oCAAoC;YACpC,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACnE,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAEnE,mCAAmC;YACnC,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC7E,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC;aAC7C,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,qCAAqC;YACrC,MAAM,YAAY,GAAG,cAAM,CAAC,WAAW,CAAC,4BAA4B,CAAC,CAAC;YACtE,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,WAAW,CAAC,iCAAiC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACpF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAA,YAAE,EAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,oBAAoB,GAAG;gBAC3B,EAAE,EAAE,GAAG;gBACP,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,UAAU;gBAChB,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,cAAc,EAAE,IAAI;gBACpB,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,IAAI;gBACjB,gBAAgB,EAAE,IAAI;gBACtB,YAAY,EAAE,IAAI;gBAClB,mBAAmB,EAAE,IAAI;gBACzB,aAAa,EAAE,IAAI;aACpB,CAAC;YAEF,cAAc,CAAC,iBAAiB,CAAC;gBAC/B,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC;aACpD,CAAC,CAAC;YAEH,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,cAAM,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACnE,CAAC,CAAC,CAAC;YAEH,yCAAyC;YACzC,MAAM,YAAY,GAAG,cAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,YAAY,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,cAAc,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;YAE3E,IAAA,cAAM,EACJ,uBAAC,WAAW,cACV,uBAAC,2CAAoB,KAAG,GACZ,CACf,CAAC;YAEF,2CAA2C;YAC3C,uDAAuD;YACvD,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;gBACjB,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/tests/unit/invitation-tab-translation.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { Mail } from 'lucide-react';\nimport { InvitationManagement } from '@/components/InvitationManagement';\n// LanguageProvider is now mocked above\nimport { apiRequest } from '@/lib/queryClient';\n\n// Mock the API request\njest.mock('@/lib/queryClient', () => ({\n  apiRequest: jest.fn(),\n}));\n\nconst mockApiRequest = apiRequest as jest.MockedFunction<typeof apiRequest>;\n\n// Mock toast hook\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({\n    toast: jest.fn(),\n  }),\n}));\n\n// Mock useLanguage hook with proper translations\njest.mock('@/hooks/use-language', () => ({\n  useLanguage: () => ({\n    t: (key: string) => {\n      const translations: Record<string, string> = {\n        pendingInvitations: 'Pending Invitations',\n        managePendingInvitations: 'Manage pending user invitations. Only pending invitations are shown.',\n        loadingInvitations: 'Loading invitations...',\n        noInvitationsFound: 'No pending invitations found',\n        email: 'Email',\n        role: 'Role',\n        organization: 'Organization',\n        building: 'Building',\n        residence: 'Residence',\n        expires: 'Expires',\n        status: 'Status',\n        actions: 'Actions',\n        unit: 'Unit',\n        expired: 'Expired',\n        pending: 'Pending',\n        deleteInvitation: 'Delete Invitation',\n        deleteInvitationConfirm: 'Are you sure you want to delete the invitation for {email}? This action cannot be undone.',\n        cancel: 'Cancel',\n        invitationDeletedSuccess: 'Invitation deleted successfully',\n        invitationDeletedError: 'Failed to delete invitation',\n      };\n      return translations[key] || key;\n    },\n    language: 'en',\n  }),\n  LanguageProvider: ({ children }: { children: React.ReactNode }) => children,\n}));\n\n// Mock data for invitations\nconst mockInvitations = [\n  {\n    id: '1',\n    email: 'john.doe@example.com',\n    role: 'manager',\n    status: 'pending',\n    expiresAt: new Date(Date.now() + 86400000).toISOString(), // 1 day from now\n    createdAt: new Date().toISOString(),\n    organizationId: 'org-1',\n    buildingId: 'building-1',\n    residenceId: 'residence-1',\n    organizationName: 'Test Organization',\n    buildingName: 'Test Building',\n    residenceUnitNumber: '101',\n    invitedByName: 'Admin User'\n  },\n  {\n    id: '2',\n    email: 'jane.smith@example.com',\n    role: 'tenant',\n    status: 'pending',\n    expiresAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago (expired)\n    createdAt: new Date().toISOString(),\n    organizationId: null,\n    buildingId: null,\n    residenceId: null,\n    organizationName: null,\n    buildingName: null,\n    residenceUnitNumber: null,\n    invitedByName: 'Manager User'\n  }\n];\n\n// Test wrapper component\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\ndescribe('Invitation Tab Translation Coverage', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    document.body.innerHTML = '';\n  });\n\n  describe('Loading State Translations', () => {\n    it('should display loading state with translated text', async () => {\n      mockApiRequest.mockImplementation(() => \n        new Promise(() => {}) // Never resolves to simulate loading\n      );\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      // Check for loading state translations\n      expect(screen.getByText('Pending Invitations')).toBeInTheDocument();\n      expect(screen.getByText('Loading invitations...')).toBeInTheDocument();\n    });\n  });\n\n  describe('Empty State Translations', () => {\n    it('should display no data message when no invitations exist', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve([]),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('no-invitations-message')).toBeInTheDocument();\n      });\n\n      // The NoDataCard component should handle the translation\n      expect(screen.getByTestId('no-invitations-message-title')).toBeInTheDocument();\n      expect(screen.getByTestId('no-invitations-message-description')).toBeInTheDocument();\n    });\n  });\n\n  describe('Table Header Translations', () => {\n    it('should display all table headers with proper translations', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Check that all table headers are rendered with translations\n      const expectedHeaders = [\n        'Email',\n        'Role', \n        'Organization',\n        'Building',\n        'Residence',\n        'Expires',\n        'Status',\n        'Actions',\n      ];\n\n      expectedHeaders.forEach(header => {\n        expect(screen.getAllByText(header)[0]).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Invitation Data Display Translations', () => {\n    it('should display invitation data with proper translations', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Check for \"Unit\" translation\n      expect(screen.getByText('Unit 101')).toBeInTheDocument();\n\n      // Check for status translations\n      expect(screen.getByText('Pending')).toBeInTheDocument();\n      expect(screen.getByText('Expired')).toBeInTheDocument();\n    });\n  });\n\n  describe('Delete Dialog Translations', () => {\n    it('should display delete confirmation dialog with proper translations', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Click delete button for first invitation\n      const deleteButton = screen.getByTestId('button-delete-invitation-1');\n      fireEvent.click(deleteButton);\n\n      await waitFor(() => {\n        // Check delete dialog translations\n        expect(screen.getByText('Delete Invitation')).toBeInTheDocument();\n        expect(screen.getByText(/are you sure/i)).toBeInTheDocument();\n        expect(screen.getByText('Cancel')).toBeInTheDocument();\n      });\n    });\n\n    it('should include email in delete confirmation message', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Click delete button for first invitation\n      const deleteButton = screen.getByTestId('button-delete-invitation-1');\n      fireEvent.click(deleteButton);\n\n      await waitFor(() => {\n        // The email should be included in the confirmation message (look specifically in the dialog description)\n        expect(screen.getByText(/Are you sure you want to delete the invitation for john\\.doe@example\\.com/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Success and Error Message Translations', () => {\n    it('should display success message on successful deletion', async () => {\n      // Mock successful deletion\n      mockApiRequest\n        .mockResolvedValueOnce({\n          json: () => Promise.resolve(mockInvitations),\n        })\n        .mockResolvedValueOnce({\n          json: () => Promise.resolve({}),\n        });\n\n      const mockToast = jest.fn();\n      (require('@/hooks/use-toast').useToast as jest.Mock).mockReturnValue({\n        toast: mockToast,\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Click delete button and confirm\n      const deleteButton = screen.getByTestId('button-delete-invitation-1');\n      fireEvent.click(deleteButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/delete invitation|supprimer l'invitation/i)).toBeInTheDocument();\n      });\n\n      // Find and click the confirm button (AlertDialogAction)\n      const confirmButton = screen.getByRole('button', { name: /delete|supprimer/i });\n      fireEvent.click(confirmButton);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Success',\n            description: 'Invitation deleted successfully',\n          })\n        );\n      });\n    });\n\n    it('should display error message on failed deletion', async () => {\n      // Mock failed deletion\n      mockApiRequest\n        .mockResolvedValueOnce({\n          json: () => Promise.resolve(mockInvitations),\n        })\n        .mockRejectedValueOnce(new Error('Network error'));\n\n      const mockToast = jest.fn();\n      (require('@/hooks/use-toast').useToast as jest.Mock).mockReturnValue({\n        toast: mockToast,\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Click delete button and confirm\n      const deleteButton = screen.getByTestId('button-delete-invitation-1');\n      fireEvent.click(deleteButton);\n\n      await waitFor(() => {\n        expect(screen.getByText(/delete invitation|supprimer l'invitation/i)).toBeInTheDocument();\n      });\n\n      // Find and click the confirm button (AlertDialogAction)\n      const confirmButton = screen.getByRole('button', { name: /delete|supprimer/i });\n      fireEvent.click(confirmButton);\n\n      await waitFor(() => {\n        expect(mockToast).toHaveBeenCalledWith(\n          expect.objectContaining({\n            title: 'Error',\n            description: 'Failed to delete invitation',\n            variant: 'destructive',\n          })\n        );\n      });\n    });\n  });\n\n  describe('Card Title and Description Translations', () => {\n    it('should display card title and description with translations', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Check card title\n      expect(screen.getByText('Pending Invitations')).toBeInTheDocument();\n\n      // Check card description  \n      expect(screen.getByText('Manage pending user invitations. Only pending invitations are shown.')).toBeInTheDocument();\n    });\n  });\n\n  describe('Role Badge Translations', () => {\n    it('should display role badges correctly', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Check that roles are displayed as badges\n      expect(screen.getByText('manager')).toBeInTheDocument();\n      expect(screen.getByText('tenant')).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility and Test IDs', () => {\n    it('should have proper test IDs for all interactive elements', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Check for invitation row test IDs\n      expect(screen.getByTestId('invitation-row-1')).toBeInTheDocument();\n      expect(screen.getByTestId('invitation-row-2')).toBeInTheDocument();\n\n      // Check for delete button test IDs\n      expect(screen.getByTestId('button-delete-invitation-1')).toBeInTheDocument();\n      expect(screen.getByTestId('button-delete-invitation-2')).toBeInTheDocument();\n    });\n\n    it('should have proper test ID for cancel button in delete dialog', async () => {\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve(mockInvitations),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText(mockInvitations[0].email)).toBeInTheDocument();\n      });\n\n      // Click delete button to open dialog\n      const deleteButton = screen.getByTestId('button-delete-invitation-1');\n      fireEvent.click(deleteButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('button-cancel-delete-invitation')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle missing invitation data gracefully', async () => {\n      const incompleteInvitation = {\n        id: '3',\n        email: 'test@example.com',\n        role: 'resident',\n        status: 'pending',\n        expiresAt: new Date().toISOString(),\n        createdAt: new Date().toISOString(),\n        organizationId: null,\n        buildingId: null,\n        residenceId: null,\n        organizationName: null,\n        buildingName: null,\n        residenceUnitNumber: null,\n        invitedByName: null\n      };\n\n      mockApiRequest.mockResolvedValue({\n        json: () => Promise.resolve([incompleteInvitation]),\n      });\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByText('test@example.com')).toBeInTheDocument();\n      });\n\n      // Should display dashes for missing data\n      const dashElements = screen.getAllByText('—');\n      expect(dashElements.length).toBeGreaterThan(0);\n    });\n\n    it('should handle API errors gracefully', async () => {\n      mockApiRequest.mockRejectedValue(new Error('Failed to fetch invitations'));\n\n      render(\n        <TestWrapper>\n          <InvitationManagement />\n        </TestWrapper>\n      );\n\n      // Component should render without crashing\n      // The error handling should be done at the query level\n      await waitFor(() => {\n        expect(document.body).toBeInTheDocument();\n      });\n    });\n  });\n});"],"version":3}