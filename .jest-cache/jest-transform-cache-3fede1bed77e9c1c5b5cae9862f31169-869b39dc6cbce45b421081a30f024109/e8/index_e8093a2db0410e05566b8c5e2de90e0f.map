{"file":"/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/keyboard/index.js","mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,CAAC,oCAAoC,CAAC,CAAC;AAC9C,IAAI,IAAI,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAC5C,IAAI,WAAW,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAE9C,KAAK,UAAU,QAAQ,CAAC,IAAI;IACxB,MAAM,OAAO,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACvE,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC,CAAC;QACpC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7B,MAAM,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC;AACL,CAAC;AACD,KAAK,UAAU,cAAc,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,WAAW,EAAE,MAAM,EAAE;IACpF,MAAM,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;IAC5B,0DAA0D;IAC1D,IAAI,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC;QACvC,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IACD,IAAI,CAAC,eAAe,EAAE,CAAC;QACnB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAC,CAAC;YAC7B,MAAM,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAChD,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC;gBACb,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC;QACL,CAAC;QACD,mEAAmE;QACnE,IAAI,WAAW,EAAE,CAAC;YACd,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC;IACL,CAAC;AACL,CAAC;AACD,KAAK,UAAU,cAAc,CAAC,QAAQ;IAClC,KAAK,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,EAAE,EAAC,CAAC;QACvD,MAAM,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC;AACL,CAAC;AAED,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAC5B,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/keyboard/index.js"],"sourcesContent":["'use strict';\n\nrequire('../utils/dataTransfer/Clipboard.js');\nvar wait = require('../utils/misc/wait.js');\nvar parseKeyDef = require('./parseKeyDef.js');\n\nasync function keyboard(text) {\n    const actions = parseKeyDef.parseKeyDef(this.config.keyboardMap, text);\n    for(let i = 0; i < actions.length; i++){\n        await wait.wait(this.config);\n        await keyboardAction(this, actions[i]);\n    }\n}\nasync function keyboardAction(instance, { keyDef, releasePrevious, releaseSelf, repeat }) {\n    const { system } = instance;\n    // Release the key automatically if it was pressed before.\n    if (system.keyboard.isKeyPressed(keyDef)) {\n        await system.keyboard.keyup(instance, keyDef);\n    }\n    if (!releasePrevious) {\n        for(let i = 1; i <= repeat; i++){\n            await system.keyboard.keydown(instance, keyDef);\n            if (i < repeat) {\n                await wait.wait(instance.config);\n            }\n        }\n        // Release the key only on the last iteration on `state.repeatKey`.\n        if (releaseSelf) {\n            await system.keyboard.keyup(instance, keyDef);\n        }\n    }\n}\nasync function releaseAllKeys(instance) {\n    for (const k of instance.system.keyboard.getPressedKeys()){\n        await instance.system.keyboard.keyup(instance, k);\n    }\n}\n\nexports.keyboard = keyboard;\nexports.releaseAllKeys = releaseAllKeys;\n"],"version":3}