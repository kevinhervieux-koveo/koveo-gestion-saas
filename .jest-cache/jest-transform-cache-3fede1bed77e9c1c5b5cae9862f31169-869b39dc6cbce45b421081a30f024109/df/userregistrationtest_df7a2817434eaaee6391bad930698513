86c8fd15d42891deb411427672945210
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../../server/routes");
const db_1 = require("../../../server/db");
const schema = __importStar(require("../../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const crypto_1 = require("crypto");
/**
 * User Registration Test Suite
 *
 * Tests the complete invitation-based user registration flow including:
 * - Token validation and security
 * - User account creation with proper data
 * - Password hashing and security
 * - Quebec Law 25 privacy consent handling
 * - Organization assignment
 * - Invitation status updates
 */
// Create test app
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('User Registration via Invitation', () => {
    let app;
    let testInvitation;
    let testOrganization;
    let inviterUser;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Skip database operations in test environment - use mock data instead
        if (process.env.TEST_TYPE === 'unit') {
            // Mock test data for unit tests
            testOrganization = [{
                    id: 'mock-org-id-123',
                    name: 'Test Registration Org',
                    type: 'syndicate',
                    address: '123 Test St',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1A 1A1',
                }];
        }
        else {
            // Real database operations for integration tests
            // Clean up any existing test data
            await db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.email, 'test-registration@example.com'));
            await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'test-registration@example.com'));
            // Create test organization
            testOrganization = await db_1.db
                .insert(schema.organizations)
                .values({
                name: 'Test Registration Org',
                type: 'syndicate',
                address: '123 Test St',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1A 1A1',
            })
                .returning();
        }
        // Create inviter user and invitation
        if (process.env.TEST_TYPE === 'unit') {
            // Mock test data for unit tests
            inviterUser = [{
                    id: 'mock-inviter-id-123',
                    username: 'testinviter',
                    email: 'inviter@test.com',
                    firstName: 'Test',
                    lastName: 'Inviter',
                    password: 'mock-hashed-password',
                    role: 'admin',
                }];
            const token = 'test-registration-token-123';
            const tokenHash = (0, crypto_1.createHash)('sha256').update(token).digest('hex');
            testInvitation = [{
                    id: 'mock-invitation-id-123',
                    email: 'test-registration@example.com',
                    token,
                    tokenHash,
                    role: 'manager',
                    organizationId: testOrganization[0].id,
                    invitedByUserId: inviterUser[0].id,
                    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
                    status: 'pending',
                }];
        }
        else {
            // Real database operations for integration tests
            inviterUser = await db_1.db
                .insert(schema.users)
                .values({
                username: 'testinviter',
                email: 'inviter@test.com',
                firstName: 'Test',
                lastName: 'Inviter',
                password: await bcryptjs_1.default.hash('password123', 12),
                role: 'admin',
            })
                .returning();
            // Create test invitation
            const token = 'test-registration-token-123';
            const tokenHash = (0, crypto_1.createHash)('sha256').update(token).digest('hex');
            testInvitation = await db_1.db
                .insert(schema.invitations)
                .values({
                email: 'test-registration@example.com',
                token,
                tokenHash,
                role: 'manager',
                organizationId: testOrganization[0].id,
                invitedByUserId: inviterUser[0].id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
                status: 'pending',
            })
                .returning();
        }
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        if (process.env.TEST_TYPE === 'unit') {
            // Skip cleanup for unit tests - no real data was created
            return;
        }
        // Real database cleanup for integration tests
        await db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.email, 'test-registration@example.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'test-registration@example.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'inviter@test.com'));
        if (testOrganization?.[0]?.id) {
            await db_1.db.delete(schema.userOrganizations).where((0, drizzle_orm_1.eq)(schema.userOrganizations.organizationId, testOrganization[0].id));
            await db_1.db.delete(schema.organizations).where((0, drizzle_orm_1.eq)(schema.organizations.id, testOrganization[0].id));
        }
    });
    (0, globals_1.describe)('Invitation Token Validation', () => {
        (0, globals_1.it)('should validate a valid invitation token', async () => {
            const response = await (0, supertest_1.default)(app)
                .get(`/api/invitations/validate/test-registration-token-123`)
                .expect(200);
            (0, globals_1.expect)(response.body).toMatchObject({
                valid: true,
                invitation: {
                    id: testInvitation[0].id,
                    email: 'test-registration@example.com',
                    role: 'manager',
                    organizationId: testOrganization[0].id,
                    status: 'pending',
                },
            });
        });
        (0, globals_1.it)('should reject invalid invitation token', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/invitations/validate/invalid-token')
                .expect(404);
            (0, globals_1.expect)(response.body).toMatchObject({
                valid: false,
                message: 'Invitation not found or invalid',
                code: 'INVITATION_NOT_FOUND',
            });
        });
        (0, globals_1.it)('should reject expired invitation token', async () => {
            // Update invitation to be expired
            await db_1.db
                .update(schema.invitations)
                .set({ expiresAt: new Date(Date.now() - 1000) })
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation[0].id));
            const response = await (0, supertest_1.default)(app)
                .get('/api/invitations/validate/test-registration-token-123')
                .expect(410);
            (0, globals_1.expect)(response.body).toMatchObject({
                valid: false,
                message: 'Invitation has expired',
                code: 'INVITATION_EXPIRED',
            });
        });
        (0, globals_1.it)('should reject already accepted invitation', async () => {
            // Mark invitation as accepted
            await db_1.db
                .update(schema.invitations)
                .set({ status: 'accepted', acceptedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation[0].id));
            const response = await (0, supertest_1.default)(app)
                .get('/api/invitations/validate/test-registration-token-123')
                .expect(410);
            (0, globals_1.expect)(response.body).toMatchObject({
                valid: false,
                message: 'Invitation has already been used',
                code: 'INVITATION_USED',
            });
        });
    });
    (0, globals_1.describe)('User Account Creation', () => {
        (0, globals_1.it)('should create new user account with valid invitation', async () => {
            const registrationData = {
                firstName: 'John',
                lastName: 'Doe',
                password: 'SecurePass123!',
                phone: '+1-514-555-0123',
                language: 'en',
                dataCollectionConsent: true,
                marketingConsent: false,
                analyticsConsent: true,
                thirdPartyConsent: false,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(registrationData)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Account created successfully',
                user: {
                    id: globals_1.expect.any(String),
                    username: 'test-registration',
                    email: 'test-registration@example.com',
                    firstName: 'John',
                    lastName: 'Doe',
                    role: 'manager',
                    language: 'en',
                    phone: '+1-514-555-0123',
                },
            });
            // Verify user was created in database
            const createdUser = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.email, 'test-registration@example.com'))
                .limit(1);
            (0, globals_1.expect)(createdUser).toHaveLength(1);
            (0, globals_1.expect)(createdUser[0]).toMatchObject({
                email: 'test-registration@example.com',
                firstName: 'John',
                lastName: 'Doe',
                role: 'manager',
                language: 'en',
                isActive: true,
            });
            // Verify password is properly hashed
            const isValidPassword = await bcryptjs_1.default.compare('SecurePass123!', createdUser[0].password);
            (0, globals_1.expect)(isValidPassword).toBe(true);
        });
        (0, globals_1.it)('should require all mandatory fields for registration', async () => {
            const incompleteData = {
                firstName: 'John',
                // Missing lastName, password
                language: 'en',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(incompleteData)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'First name, last name, and password are required',
                code: 'MISSING_REQUIRED_FIELDS',
            });
        });
        (0, globals_1.it)('should require Quebec Law 25 privacy consents', async () => {
            const dataWithoutConsent = {
                firstName: 'John',
                lastName: 'Doe',
                password: 'SecurePass123!',
                language: 'en',
                // Missing dataCollectionConsent and acknowledgedRights
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(dataWithoutConsent)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Data collection consent and privacy rights acknowledgment are required',
                code: 'CONSENT_REQUIRED',
            });
        });
        (0, globals_1.it)('should generate unique username from email', async () => {
            const registrationData = {
                firstName: 'Jane',
                lastName: 'Smith',
                password: 'AnotherPass456!',
                language: 'fr',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(registrationData)
                .expect(201);
            (0, globals_1.expect)(response.body.user.username).toBe('test-registration');
            (0, globals_1.expect)(response.body.user.email).toBe('test-registration@example.com');
        });
        (0, globals_1.it)('should update invitation status to accepted', async () => {
            const registrationData = {
                firstName: 'Test',
                lastName: 'User',
                password: 'TestPass789!',
                language: 'en',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(registrationData)
                .expect(201);
            // Verify invitation is marked as accepted
            const updatedInvitation = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation[0].id))
                .limit(1);
            (0, globals_1.expect)(updatedInvitation[0]).toMatchObject({
                status: 'accepted',
                acceptedAt: globals_1.expect.any(Date),
                acceptedBy: globals_1.expect.any(String),
            });
        });
        (0, globals_1.it)('should prevent registration with already used invitation', async () => {
            // First registration
            const firstRegistration = {
                firstName: 'First',
                lastName: 'User',
                password: 'FirstPass123!',
                language: 'en',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(firstRegistration)
                .expect(201);
            // Second registration attempt with same token
            const secondRegistration = {
                firstName: 'Second',
                lastName: 'User',
                password: 'SecondPass456!',
                language: 'fr',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(secondRegistration)
                .expect(410);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Invitation has already been used',
                code: 'INVITATION_USED',
            });
        });
        (0, globals_1.it)('should prevent registration if user already exists with email', async () => {
            // Create existing user with same email
            await db_1.db.insert(schema.users).values({
                username: 'existinguser',
                email: 'test-registration@example.com',
                firstName: 'Existing',
                lastName: 'User',
                password: await bcryptjs_1.default.hash('ExistingPass123!', 12),
                role: 'tenant',
            });
            const registrationData = {
                firstName: 'New',
                lastName: 'User',
                password: 'NewPass123!',
                language: 'en',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(registrationData)
                .expect(409);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'User already exists with this email',
                code: 'USER_EXISTS',
            });
            // Clean up
            await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'test-registration@example.com'));
        });
    });
    (0, globals_1.describe)('Password Security', () => {
        (0, globals_1.it)('should properly hash passwords using bcrypt', async () => {
            const registrationData = {
                firstName: 'Security',
                lastName: 'Test',
                password: 'SecurityTest123!',
                language: 'en',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(registrationData)
                .expect(201);
            const createdUser = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.email, 'test-registration@example.com'))
                .limit(1);
            // Password should be hashed, not plain text
            (0, globals_1.expect)(createdUser[0].password).not.toBe('SecurityTest123!');
            (0, globals_1.expect)(createdUser[0].password.startsWith('$2b$')).toBe(true);
            // Should be able to verify password
            const isValid = await bcryptjs_1.default.compare('SecurityTest123!', createdUser[0].password);
            (0, globals_1.expect)(isValid).toBe(true);
        });
    });
    (0, globals_1.describe)('Quebec Law 25 Compliance', () => {
        (0, globals_1.it)('should store all privacy consent preferences', async () => {
            const registrationData = {
                firstName: 'Privacy',
                lastName: 'Test',
                password: 'PrivacyTest123!',
                language: 'fr',
                dataCollectionConsent: true,
                marketingConsent: false,
                analyticsConsent: true,
                thirdPartyConsent: false,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(registrationData)
                .expect(201);
            (0, globals_1.expect)(response.body.user).toMatchObject({
                language: 'fr',
                dataCollectionConsent: true,
                marketingConsent: false,
                analyticsConsent: true,
                thirdPartyConsent: false,
                acknowledgedRights: true,
            });
        });
        (0, globals_1.it)('should support both French and English languages', async () => {
            const frenchRegistration = {
                firstName: 'François',
                lastName: 'Dubois',
                password: 'MotDePasse123!',
                language: 'fr',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(frenchRegistration)
                .expect(201);
            (0, globals_1.expect)(response.body.user.language).toBe('fr');
            (0, globals_1.expect)(response.body.user.firstName).toBe('François');
        });
    });
    (0, globals_1.describe)('Organization Assignment', () => {
        (0, globals_1.it)('should assign user to invitation organization', async () => {
            const registrationData = {
                firstName: 'Organization',
                lastName: 'Test',
                password: 'OrgTest123!',
                language: 'en',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/test-registration-token-123')
                .send(registrationData)
                .expect(201);
            // Verify user is assigned to correct organization
            const userOrgs = await db_1.db
                .select()
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, response.body.user.id));
            (0, globals_1.expect)(userOrgs).toHaveLength(1);
            (0, globals_1.expect)(userOrgs[0].organizationId).toBe(testOrganization[0].id);
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle database errors gracefully', async () => {
            // Create invitation with invalid organization ID to trigger error
            const invalidInvitation = await db_1.db
                .insert(schema.invitations)
                .values({
                id: 'inv-invalid-org',
                email: 'invalid-org@example.com',
                token: 'invalid-org-token',
                tokenHash: (0, crypto_1.createHash)('sha256').update('invalid-org-token').digest('hex'),
                role: 'manager',
                organizationId: 'non-existent-org',
                invitedByUserId: inviterUser[0].id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                status: 'pending',
            })
                .returning();
            const registrationData = {
                firstName: 'Error',
                lastName: 'Test',
                password: 'ErrorTest123!',
                language: 'en',
                dataCollectionConsent: true,
                acknowledgedRights: true,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/invitations/accept/invalid-org-token')
                .send(registrationData)
                .expect(500);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Internal server error during account creation',
                code: 'INVITATION_ACCEPT_ERROR',
            });
            // Clean up
            await db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.id, invalidInvitation[0].id));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,