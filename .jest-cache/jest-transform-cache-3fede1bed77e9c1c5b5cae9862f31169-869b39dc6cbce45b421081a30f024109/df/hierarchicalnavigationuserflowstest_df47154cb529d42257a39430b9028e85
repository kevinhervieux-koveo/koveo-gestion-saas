fc13b64e447b5f68a9dcc875f15ec284
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
globals_1.jest.mock('wouter', () => ({
    useLocation: () => [mockCurrentLocation, mockSetLocation],
    useSearch: () => mockCurrentSearch,
}));
/**
 * Hierarchical Navigation User Flow Tests
 * Tests complete user scenarios and flows through the hierarchical navigation system
 */
const react_1 = __importStar(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
const withHierarchicalSelection_1 = require("@/components/hoc/withHierarchicalSelection");
require("@testing-library/jest-dom");
// Mock wouter
const mockSetLocation = globals_1.jest.fn();
let mockCurrentLocation = '/residents/building';
let mockCurrentSearch = '';
// Mock fetch for API calls
const mockFetch = globals_1.jest.fn();
global.fetch = mockFetch;
// Mock building data scenarios
const SINGLE_BUILDING_USER_DATA = [
    { id: 'building-1', name: 'Building A', address: '123 Main St' }
];
const MULTIPLE_BUILDINGS_USER_DATA = [
    { id: 'building-1', name: 'Building A', address: '123 Main St' },
    { id: 'building-2', name: 'Building B', address: '456 Oak Ave' },
    { id: 'building-3', name: 'Building C', address: '789 Pine Rd' }
];
const SINGLE_BUILDING_DETAILS = {
    id: 'building-1',
    name: 'Building A',
    address: '123 Main St',
    city: 'Montreal',
    province: 'QC',
    postalCode: 'H1A 1A1',
    totalUnits: 50,
    occupiedUnits: 45,
    occupancyRate: 90,
    buildingType: 'residential',
    yearBuilt: 2020,
};
// Mock page components that use hierarchical navigation
const MockBuildingPage = () => {
    const [showSelection, setShowSelection] = react_1.default.useState(true);
    const [selectedBuilding, setSelectedBuilding] = react_1.default.useState(null);
    const [buildings, setBuildings] = react_1.default.useState([]);
    const [isLoading, setIsLoading] = react_1.default.useState(true);
    react_1.default.useEffect(() => {
        // Simulate API call based on URL
        const urlParams = new URLSearchParams(mockCurrentSearch);
        const buildingId = urlParams.get('building');
        if (buildingId) {
            setSelectedBuilding(buildingId);
            setShowSelection(false);
        }
        else {
            setShowSelection(true);
        }
        // Mock API call delay
        setTimeout(() => {
            setBuildings(MULTIPLE_BUILDINGS_USER_DATA);
            setIsLoading(false);
        }, 100);
    }, [mockCurrentSearch]);
    const handleBuildingSelect = (buildingId) => {
        setSelectedBuilding(buildingId);
        setShowSelection(false);
        mockCurrentSearch = `?building=${buildingId}`;
        mockSetLocation(`/residents/building?building=${buildingId}`);
    };
    const handleBack = () => {
        setSelectedBuilding(null);
        setShowSelection(true);
        mockCurrentSearch = '';
        mockSetLocation('/residents/building');
    };
    if (isLoading) {
        return ((0, jsx_runtime_1.jsx)("div", { "data-testid": "loading-state", children: (0, jsx_runtime_1.jsx)("div", { "data-testid": "loading-spinner", children: "Loading..." }) }));
    }
    if (showSelection) {
        return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "building-selection-screen", children: [(0, jsx_runtime_1.jsx)("h1", { "data-testid": "selection-title", children: "Select Building" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "buildings-grid", children: buildings.map((building) => ((0, jsx_runtime_1.jsxs)("button", { "data-testid": `building-card-${building.id}`, onClick: () => handleBuildingSelect(building.id), className: "building-card", children: [(0, jsx_runtime_1.jsx)("h3", { children: building.name }), (0, jsx_runtime_1.jsx)("p", { children: building.address })] }, building.id))) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "building-details-screen", children: [(0, jsx_runtime_1.jsxs)("div", { "data-testid": "header-with-back", children: [buildings.length > 1 && ((0, jsx_runtime_1.jsx)("button", { "data-testid": "back-to-buildings", onClick: handleBack, children: "Back to Buildings" })), (0, jsx_runtime_1.jsx)("h1", { "data-testid": "building-title", children: "Building Details" })] }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "building-info", children: [(0, jsx_runtime_1.jsx)("p", { "data-testid": "selected-building-id", children: selectedBuilding }), (0, jsx_runtime_1.jsx)("p", { children: "Building information and details" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "view-documents-btn", children: "View Documents" })] })] }));
};
// Mock single building scenario
const MockSingleBuildingPage = () => {
    const [selectedBuilding, setSelectedBuilding] = react_1.default.useState('building-1');
    const [buildings] = react_1.default.useState(SINGLE_BUILDING_USER_DATA);
    // Auto-forward for single building user
    react_1.default.useEffect(() => {
        if (buildings.length === 1 && !mockCurrentSearch.includes('building=')) {
            mockCurrentSearch = `?building=${buildings[0].id}`;
            mockSetLocation(`/residents/building?building=${buildings[0].id}`);
        }
    }, [buildings]);
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "single-building-details-screen", children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "header-no-back", children: (0, jsx_runtime_1.jsx)("h1", { "data-testid": "building-title", children: "Building Details" }) }), (0, jsx_runtime_1.jsxs)("div", { "data-testid": "building-info", children: [(0, jsx_runtime_1.jsx)("p", { "data-testid": "selected-building-id", children: selectedBuilding }), (0, jsx_runtime_1.jsx)("p", { children: "Single building - no back button" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "view-documents-btn", children: "View Documents" })] })] }));
};
(0, globals_1.describe)('Hierarchical Navigation User Flows', () => {
    let queryClient;
    (0, globals_1.beforeEach)(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false,
                },
            },
        });
        // Reset mocks and state
        globals_1.jest.clearAllMocks();
        mockSetLocation.mockClear();
        mockCurrentLocation = '/residents/building';
        mockCurrentSearch = '';
        // Mock window.history
        Object.defineProperty(window, 'history', {
            value: {
                pushState: globals_1.jest.fn(),
            },
            writable: true,
        });
        // Mock successful API responses
        mockFetch.mockResolvedValue({
            ok: true,
            json: async () => MULTIPLE_BUILDINGS_USER_DATA,
        });
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    const renderWithProviders = (component) => {
        return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    (0, globals_1.describe)('Multiple Buildings User Flow', () => {
        (0, globals_1.test)('should complete full user flow: landing → selection → details → back', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            // 1. Initial landing - should show loading then selection
            (0, globals_1.expect)(react_2.screen.getByTestId('loading-state')).toBeInTheDocument();
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-title')).toHaveTextContent('Select Building');
            (0, globals_1.expect)(react_2.screen.getByTestId('buildings-grid')).toBeInTheDocument();
            // Should show all available buildings
            (0, globals_1.expect)(react_2.screen.getByTestId('building-card-building-1')).toHaveTextContent('Building A');
            (0, globals_1.expect)(react_2.screen.getByTestId('building-card-building-2')).toHaveTextContent('Building B');
            (0, globals_1.expect)(react_2.screen.getByTestId('building-card-building-3')).toHaveTextContent('Building C');
            // 2. User selects a building
            const building2Card = react_2.screen.getByTestId('building-card-building-2');
            react_2.fireEvent.click(building2Card);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
            });
            // Should show building details with back button
            (0, globals_1.expect)(react_2.screen.getByTestId('building-title')).toHaveTextContent('Building Details');
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-2');
            (0, globals_1.expect)(react_2.screen.getByTestId('back-to-buildings')).toBeInTheDocument();
            // Should update router
            (0, globals_1.expect)(mockSetLocation).toHaveBeenCalledWith('/residents/building?building=building-2');
            // 3. User clicks back
            const backButton = react_2.screen.getByTestId('back-to-buildings');
            react_2.fireEvent.click(backButton);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            // Should return to selection screen
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-title')).toHaveTextContent('Select Building');
            (0, globals_1.expect)(react_2.screen.getByTestId('buildings-grid')).toBeInTheDocument();
            (0, globals_1.expect)(mockSetLocation).toHaveBeenCalledWith('/residents/building');
        });
        (0, globals_1.test)('should handle direct URL navigation to building details', async () => {
            // Simulate direct navigation to building details
            mockCurrentSearch = '?building=building-1';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
            });
            // Should land directly on building details
            (0, globals_1.expect)(react_2.screen.getByTestId('building-title')).toHaveTextContent('Building Details');
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');
            (0, globals_1.expect)(react_2.screen.getByTestId('back-to-buildings')).toBeInTheDocument();
        });
        (0, globals_1.test)('should show back button only when multiple buildings are available', async () => {
            mockCurrentSearch = '?building=building-2';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
            });
            // With multiple buildings, should show back button
            (0, globals_1.expect)(react_2.screen.getByTestId('back-to-buildings')).toBeInTheDocument();
        });
        (0, globals_1.test)('should handle building selection errors gracefully', async () => {
            // Mock API failure
            mockFetch.mockRejectedValue(new Error('API Error'));
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            // Should handle loading state
            (0, globals_1.expect)(react_2.screen.getByTestId('loading-state')).toBeInTheDocument();
            // After timeout, should still show selection screen (even with empty data)
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('Single Building User Flow', () => {
        (0, globals_1.test)('should auto-forward single building users to details', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(MockSingleBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('single-building-details-screen')).toBeInTheDocument();
            });
            // Should land directly on details, no selection screen
            (0, globals_1.expect)(react_2.screen.getByTestId('building-title')).toHaveTextContent('Building Details');
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');
            // Should NOT show back button (single building)
            (0, globals_1.expect)(react_2.screen.queryByTestId('back-to-buildings')).not.toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('header-no-back')).toBeInTheDocument();
            // Should auto-forward URL
            (0, globals_1.expect)(mockSetLocation).toHaveBeenCalledWith('/residents/building?building=building-1');
        });
        (0, globals_1.test)('should handle single building direct URL access', async () => {
            // User directly accesses with building param
            mockCurrentSearch = '?building=building-1';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockSingleBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('single-building-details-screen')).toBeInTheDocument();
            });
            // Should show details without back button
            (0, globals_1.expect)(react_2.screen.getByTestId('building-title')).toHaveTextContent('Building Details');
            (0, globals_1.expect)(react_2.screen.queryByTestId('back-to-buildings')).not.toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('URL State Management', () => {
        (0, globals_1.test)('should maintain URL consistency throughout navigation', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            // Start with base URL
            (0, globals_1.expect)(mockCurrentLocation).toBe('/residents/building');
            (0, globals_1.expect)(mockCurrentSearch).toBe('');
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            // Select building - should update URL
            const buildingCard = react_2.screen.getByTestId('building-card-building-1');
            react_2.fireEvent.click(buildingCard);
            (0, globals_1.expect)(mockCurrentSearch).toBe('?building=building-1');
            (0, globals_1.expect)(mockSetLocation).toHaveBeenCalledWith('/residents/building?building=building-1');
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
            });
            // Go back - should clear URL parameters
            const backButton = react_2.screen.getByTestId('back-to-buildings');
            react_2.fireEvent.click(backButton);
            (0, globals_1.expect)(mockCurrentSearch).toBe('');
            (0, globals_1.expect)(mockSetLocation).toHaveBeenCalledWith('/residents/building');
        });
        (0, globals_1.test)('should handle malformed URL parameters', async () => {
            // Simulate malformed or non-existent building ID
            mockCurrentSearch = '?building=nonexistent-id';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
            });
            // Should still attempt to show details (graceful degradation)
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('nonexistent-id');
        });
        (0, globals_1.test)('should handle multiple URL parameters correctly', async () => {
            // Simulate URL with extra parameters
            mockCurrentSearch = '?building=building-1&extra=param&another=value';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
            });
            // Should extract building parameter correctly
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');
        });
    });
    (0, globals_1.describe)('User Experience Scenarios', () => {
        (0, globals_1.test)('should handle quick back-and-forth navigation', async () => {
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            // Quick selection
            react_2.fireEvent.click(react_2.screen.getByTestId('building-card-building-1'));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
            });
            // Quick back
            react_2.fireEvent.click(react_2.screen.getByTestId('back-to-buildings'));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            // Select different building
            react_2.fireEvent.click(react_2.screen.getByTestId('building-card-building-3'));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
                (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-3');
            });
        });
        (0, globals_1.test)('should preserve selection when navigating away and back', async () => {
            // Simulate user navigating to building details
            mockCurrentSearch = '?building=building-2';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-details-screen')).toBeInTheDocument();
                (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-2');
            });
            // Simulate user navigating away (e.g., to another page) and back
            // In a real app, this would be handled by route changes
            mockCurrentSearch = '';
            // Simulate returning to the page
            renderWithProviders((0, jsx_runtime_1.jsx)(MockBuildingPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            // Should show selection screen (no preserved state without URL params)
            (0, globals_1.expect)(react_2.screen.getByTestId('buildings-grid')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Manager Residences Page Navigation Flow', () => {
        // Mock Manager Residences page component with organization → building hierarchy
        const MockManagerResidencesPage = (0, withHierarchicalSelection_1.withHierarchicalSelection)(() => {
            const { organizationId, buildingId, showBackButton, onBack } = (0, react_1.useContext)(withHierarchicalSelection_1.HierarchyContext);
            return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "manager-residences-screen", children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "residences-title", children: "Manager Residences" }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "selected-organization-id", children: organizationId || 'none' }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "selected-building-id", children: buildingId || 'none' }), showBackButton && ((0, jsx_runtime_1.jsx)("button", { "data-testid": "back-to-selection", onClick: onBack, children: "Back to Selection" }))] }));
        }, {
            hierarchy: ['organization', 'building']
        });
        (0, globals_1.test)('should navigate through organization → building flow for manager residences', async () => {
            // Mock API responses for organizations and buildings
            const mockOrganizationsData = [
                { id: 'org-1', name: 'Organization A' },
                { id: 'org-2', name: 'Organization B' },
            ];
            const mockBuildingsData = [
                { id: 'building-1', name: 'Building A', organizationId: 'org-1' },
                { id: 'building-2', name: 'Building B', organizationId: 'org-1' },
            ];
            let apiCallCount = 0;
            mockFetch.mockImplementation((url) => {
                apiCallCount++;
                if (url.includes('/api/organizations')) {
                    return Promise.resolve({
                        ok: true,
                        json: async () => mockOrganizationsData,
                    });
                }
                if (url.includes('/api/manager/buildings')) {
                    return Promise.resolve({
                        ok: true,
                        json: async () => ({ buildings: mockBuildingsData }),
                    });
                }
                return Promise.reject(new Error(`Unexpected URL: ${url}`));
            });
            renderWithProviders((0, jsx_runtime_1.jsx)(MockManagerResidencesPage, {}));
            // 1. Should start with organization selection
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('organization-selection-screen')).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-title')).toHaveTextContent('Select Organization');
            (0, globals_1.expect)(react_2.screen.getByTestId('org-card-org-1')).toHaveTextContent('Organization A');
            (0, globals_1.expect)(react_2.screen.getByTestId('org-card-org-2')).toHaveTextContent('Organization B');
            // 2. Select an organization
            react_2.fireEvent.click(react_2.screen.getByTestId('org-card-org-1'));
            // 3. Should move to building selection
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-title')).toHaveTextContent('Select Building');
            (0, globals_1.expect)(react_2.screen.getByTestId('building-card-building-1')).toHaveTextContent('Building A');
            (0, globals_1.expect)(react_2.screen.getByTestId('building-card-building-2')).toHaveTextContent('Building B');
            // 4. Select a building
            react_2.fireEvent.click(react_2.screen.getByTestId('building-card-building-1'));
            // 5. Should reach the manager residences screen
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('manager-residences-screen')).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_2.screen.getByTestId('residences-title')).toHaveTextContent('Manager Residences');
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-organization-id')).toHaveTextContent('org-1');
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');
            (0, globals_1.expect)(react_2.screen.getByTestId('back-to-selection')).toBeInTheDocument();
        });
        (0, globals_1.test)('should auto-forward when manager has single building in organization', async () => {
            // Mock single building response
            const mockOrganizationsData = [
                { id: 'org-1', name: 'Organization A' },
            ];
            const mockSingleBuildingData = [
                { id: 'building-1', name: 'Single Building', organizationId: 'org-1' },
            ];
            mockFetch.mockImplementation((url) => {
                if (url.includes('/api/organizations')) {
                    return Promise.resolve({
                        ok: true,
                        json: async () => mockOrganizationsData,
                    });
                }
                if (url.includes('/api/manager/buildings')) {
                    return Promise.resolve({
                        ok: true,
                        json: async () => ({ buildings: mockSingleBuildingData }),
                    });
                }
                return Promise.reject(new Error(`Unexpected URL: ${url}`));
            });
            // Start with organization already selected
            mockCurrentSearch = '?organization=org-1';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockManagerResidencesPage, {}));
            // Should auto-forward through single building to final screen
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('manager-residences-screen')).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-organization-id')).toHaveTextContent('org-1');
            (0, globals_1.expect)(react_2.screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');
        });
        (0, globals_1.test)('should handle back navigation in manager residences hierarchy', async () => {
            const mockOrganizationsData = [
                { id: 'org-1', name: 'Organization A' },
                { id: 'org-2', name: 'Organization B' },
            ];
            const mockBuildingsData = [
                { id: 'building-1', name: 'Building A', organizationId: 'org-1' },
                { id: 'building-2', name: 'Building B', organizationId: 'org-1' },
            ];
            mockFetch.mockImplementation((url) => {
                if (url.includes('/api/organizations')) {
                    return Promise.resolve({
                        ok: true,
                        json: async () => mockOrganizationsData,
                    });
                }
                if (url.includes('/api/manager/buildings')) {
                    return Promise.resolve({
                        ok: true,
                        json: async () => ({ buildings: mockBuildingsData }),
                    });
                }
                return Promise.reject(new Error(`Unexpected URL: ${url}`));
            });
            // Start with both organization and building selected
            mockCurrentSearch = '?organization=org-1&building=building-1';
            renderWithProviders((0, jsx_runtime_1.jsx)(MockManagerResidencesPage, {}));
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('manager-residences-screen')).toBeInTheDocument();
            });
            // Click back button
            react_2.fireEvent.click(react_2.screen.getByTestId('back-to-selection'));
            // Should return to building selection
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('building-selection-screen')).toBeInTheDocument();
            });
            (0, globals_1.expect)(react_2.screen.getByTestId('selection-title')).toHaveTextContent('Select Building');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,