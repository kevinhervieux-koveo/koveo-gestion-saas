{"file":"/home/runner/workspace/server/auth/invitation-rbac.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/auth/invitation-rbac.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport { eq, and, or, desc, gte, lte, sql, inArray } from 'drizzle-orm';\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport * as schema from '@shared/schema';\nimport { hasRoleOrHigher } from '../../config';\n// Database-based permission checking - no config permissions needed\n// Note: createInvitationAuditLog will be defined locally or imported when needed\nimport ws from 'ws';\n\nif (typeof neonConfig !== 'undefined' && neonConfig) {\n  neonConfig.webSocketConstructor = ws;\n}\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');\n}\n\n// Use shared database connection to avoid multiple pools\nimport { db } from '../db';\n\n/**\n * Security alert levels for invitation system monitoring.\n */\nexport enum SecurityAlertLevel {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical',\n}\n\n/**\n * Interface for security alert data.\n */\nexport interface SecurityAlert {\n  level: SecurityAlertLevel;\n  type: string;\n  description: string;\n  userId?: string;\n  ipAddress?: string;\n  metadata?: any;\n}\n\n/**\n * Rate limiting configuration for invitation operations.\n */\nconst RATE_LIMITS = {\n  CREATE_INVITATION: { count: 10, window: 3600000 }, // 10 per hour\n  BULK_INVITATION: { count: 3, window: 3600000 }, // 3 per hour\n  VALIDATION_ATTEMPTS: { count: 20, window: 300000 }, // 20 per 5 minutes\n  ACCEPT_ATTEMPTS: { count: 5, window: 3600000 }, // 5 per hour\n};\n\n/**\n * In-memory rate limiting store (in production, use Redis).\n */\nconst rateLimitStore = new Map<string, { count: number; resetTime: number }>();\n\n/**\n * Enhanced security monitoring for invitation operations.\n * Tracks suspicious activities and generates alerts.\n */\nexport class InvitationSecurityMonitor {\n  private static alertCallbacks: ((alert: SecurityAlert) => void)[] = [];\n\n  /**\n   * Register callback for security alerts.\n   * @param callback\n   */\n  static onAlert(callback: (alert: SecurityAlert) => void) {\n    this.alertCallbacks.push(callback);\n  }\n\n  /**\n   * Trigger a security alert.\n   * @param alert\n   */\n  static async triggerAlert(alert: SecurityAlert) {\n    console.log('🚨 Security Alert:', {\n      description: alert.description,\n      userId: alert.userId,\n      ipAddress: alert.ipAddress,\n      metadata: alert.metadata,\n    });\n\n    // Execute alert callbacks\n    this.alertCallbacks.forEach((callback) => {\n      try {\n        callback(alert);\n      } catch (error: any) {\n        console.error('❌ Error in security alert callback:', error);\n      }\n    });\n\n    // Log security alert to database\n    try {\n      await db.insert(schema.invitationAuditLog).values({\n        invitationId: alert.metadata?.invitationId || null,\n        action: 'security_alert',\n        performedBy: alert.userId || null,\n        ipAddress: alert.ipAddress,\n        userAgent: alert.metadata?.userAgent,\n        details: {\n          alertLevel: alert.level,\n          alertType: alert.type,\n          description: alert.description,\n          metadata: alert.metadata,\n        },\n        previousStatus: null,\n        newStatus: null,\n      });\n    } catch (error: any) {\n      console.error('❌ Error logging security alert to database:', error);\n    }\n  }\n\n  /**\n   * Monitor invitation access patterns for suspicious activity.\n   * @param userId\n   * @param action\n   * @param ipAddress\n   * @param userAgent\n   * @param metadata\n   */\n  static async monitorInvitationAccess(\n    userId: string,\n    action: string,\n    ipAddress?: string,\n    userAgent?: string,\n    metadata?: any\n  ) {\n    const key = `${userId}:${action}`;\n    const now = Date.now();\n    const windowStart = now - 5 * 60 * 1000; // 5 minutes\n\n    // Count recent actions\n    const recentActions = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(schema.invitationAuditLog)\n      .where(\n        and(\n          eq(schema.invitationAuditLog.performedBy, userId),\n          eq(schema.invitationAuditLog.action, action),\n          gte(schema.invitationAuditLog.createdAt, new Date(windowStart))\n        )\n      );\n\n    const actionCount = recentActions[0]?.count || 0;\n\n    // Check for suspicious patterns\n    if (actionCount > 10) {\n      await this.triggerAlert({\n        level: SecurityAlertLevel.HIGH,\n        type: 'excessive_invitation_actions',\n        description: `User ${userId} performed ${actionCount} ${action} actions in 5 minutes`,\n        userId,\n        ipAddress,\n        metadata: { action, count: actionCount, userAgent, ...metadata },\n      });\n    }\n\n    // Check for failed invitation validations\n    if (action === 'validation_failed' && actionCount > 5) {\n      await this.triggerAlert({\n        level: SecurityAlertLevel.MEDIUM,\n        type: 'multiple_validation_failures',\n        description: `User ${userId} had ${actionCount} failed token validations`,\n        userId,\n        ipAddress,\n        metadata: { action, count: actionCount, userAgent, ...metadata },\n      });\n    }\n\n    // Monitor IP-based patterns\n    if (ipAddress) {\n      const ipActions = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(schema.invitationAuditLog)\n        .where(\n          and(\n            eq(schema.invitationAuditLog.ipAddress, ipAddress),\n            eq(schema.invitationAuditLog.action, action),\n            gte(schema.invitationAuditLog.createdAt, new Date(windowStart))\n          )\n        );\n\n      const ipActionCount = ipActions[0]?.count || 0;\n\n      if (ipActionCount > 20) {\n        await this.triggerAlert({\n          level: SecurityAlertLevel.CRITICAL,\n          type: 'ip_based_attack',\n          description: `IP ${ipAddress} performed ${ipActionCount} ${action} actions in 5 minutes`,\n          ipAddress,\n          metadata: { action, count: ipActionCount, userAgent, ...metadata },\n        });\n      }\n    }\n  }\n}\n\n/**\n * Rate limiting middleware for invitation operations.\n * @param maxRequests\n * @param windowMs\n */\n/**\n * RateLimitInvitations function.\n * @param maxRequests\n * @param windowMs\n * @returns Function result.\n */\nexport function rateLimitInvitations(maxRequests: number, windowMs: number = 3600000) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const key = `${req.user?.id || req.ip}:${req.method}:${req.path}`;\n    const now = Date.now();\n\n    const current = rateLimitStore.get(key);\n\n    if (!current || now > current.resetTime) {\n      rateLimitStore.set(key, { count: 1, resetTime: now + windowMs });\n      return next();\n    }\n\n    if (current.count >= maxRequests) {\n      // Log rate limit exceeded\n      InvitationSecurityMonitor.monitorInvitationAccess(\n        req.user?.id || 'anonymous',\n        'rate_limit_exceeded',\n        req.ip,\n        req.get('User-Agent'),\n        { path: req.path, method: req.method }\n      );\n\n      return res.status(429).json({\n        message: 'Rate limit exceeded',\n        code: 'RATE_LIMIT_EXCEEDED',\n        retryAfter: Math.ceil((current.resetTime - now) / 1000),\n      });\n    }\n\n    current.count++;\n    next();\n  };\n}\n\n/**\n * Database-level permission validation for invitation operations.\n */\nexport class InvitationPermissionValidator {\n  /**\n   * Validate if user can invite based on role hierarchy and organization context.\n   * @param inviterId\n   * @param inviterRole\n   * @param targetRole\n   * @param organizationId\n   * @param buildingId\n   */\n  static async validateInvitePermission(\n    inviterId: string,\n    inviterRole: string,\n    targetRole: string,\n    organizationId?: string,\n    buildingId?: string\n  ): Promise<{ valid: boolean; reason?: string }> {\n    // Admin can invite anyone\n    if (inviterRole === 'admin') {\n      return { valid: true };\n    }\n\n    // Check role hierarchy\n    if (!hasRoleOrHigher(inviterRole as any, 'manager')) {\n      return { valid: false, reason: 'Insufficient role privileges to invite users' };\n    }\n\n    // Manager restrictions: can invite resident, manager, tenant within their organization\n    if (inviterRole === 'manager') {\n      // Managers can invite resident, manager, tenant (but not admin)\n      if (!['resident', 'manager', 'tenant'].includes(targetRole)) {\n        return {\n          valid: false,\n          reason: 'Managers can only invite resident, manager, and tenant roles',\n        };\n      }\n\n      // Organization validation - managers can only invite within their organization\n      if (organizationId) {\n        // Check if the inviter belongs to the specified organization\n        const inviterOrganization = await db\n          .select()\n          .from(schema.users)\n          .leftJoin(schema.buildings, eq(schema.buildings.organizationId, organizationId))\n          .leftJoin(schema.residences, eq(schema.residences.buildingId, schema.buildings.id))\n          .leftJoin(\n            schema.userResidences,\n            eq(schema.userResidences.residenceId, schema.residences.id)\n          )\n          .where(and(eq(schema.users.id, inviterId), eq(schema.userResidences.userId, inviterId)))\n          .limit(1);\n\n        if (inviterOrganization.length === 0) {\n          return {\n            valid: false,\n            reason: 'Managers can only invite users to their own organization',\n          };\n        }\n      } else {\n        return { valid: false, reason: 'Organization ID is required for manager invitations' };\n      }\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Validate if user can manage specific invitation.\n   * @param userId\n   * @param userRole\n   * @param invitationId\n   */\n  static async validateInvitationManagement(\n    userId: string,\n    userRole: string,\n    invitationId: string\n  ): Promise<{ valid: boolean; reason?: string }> {\n    // Admin can manage any invitation\n    if (userRole === 'admin') {\n      return { valid: true };\n    }\n\n    // Get invitation details\n    const [invitation] = await db\n      .select()\n      .from(schema.invitations)\n      .where(eq(schema.invitations.id, invitationId))\n      .limit(1);\n\n    if (!invitation) {\n      return { valid: false, reason: 'Invitation not found' };\n    }\n\n    // Users can only manage their own invitations\n    if (invitation.invitedBy !== userId) {\n      return { valid: false, reason: 'Can only manage own invitations' };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Validate bulk invitation operation.\n   * @param inviterId\n   * @param inviterRole\n   * @param invitations\n   */\n  static async validateBulkInvitation(\n    inviterId: string,\n    inviterRole: string,\n    invitations: { role: string; organizationId?: string; buildingId?: string }[]\n  ): Promise<{ valid: boolean; reason?: string; invalidInvitations?: number[] }> {\n    const invalidInvitations: number[] = [];\n\n    for (let i = 0; i < invitations.length; i++) {\n      const invitation = invitations[i];\n      const validation = await this.validateInvitePermission(\n        inviterId,\n        inviterRole,\n        invitation.role,\n        invitation.organizationId,\n        invitation.buildingId\n      );\n\n      if (!validation.valid) {\n        invalidInvitations.push(i);\n      }\n    }\n\n    if (invalidInvitations.length > 0) {\n      return {\n        valid: false,\n        reason: `${invalidInvitations.length} invitations violate permission rules`,\n        invalidInvitations,\n      };\n    }\n\n    return { valid: true };\n  }\n}\n\n/**\n * Enhanced RBAC middleware specifically for invitation operations.\n * Combines role-based permissions with context-aware validation.\n * @param action\n * @param _options\n * @param _options.validateContext\n * @param _options.requireOwnership\n * @param _options.allowSelfAccess\n * @param _options.auditAction\n */\n/**\n * RequireInvitationPermission function.\n * @param action\n * @param _options\n * @param _options.validateContext\n * @param _options.requireOwnership\n * @param _options.allowSelfAccess\n * @param _options.auditAction\n * @param __options\n * @param __options.validateContext\n * @param __options.requireOwnership\n * @param __options.allowSelfAccess\n * @param __options.auditAction\n * @returns Function result.\n */\nexport function requireInvitationPermission(\n  action: string,\n  __options: {\n    validateContext?: boolean;\n    requireOwnership?: boolean;\n    allowSelfAccess?: boolean;\n    auditAction?: string;\n  } = {}\n) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    try {\n      // Check basic permission based on role hierarchy\n      const hasPermission = hasRoleOrHigher(req.user.role as any, 'manager' as any);\n\n      if (!hasPermission) {\n        await InvitationSecurityMonitor.triggerAlert({\n          level: SecurityAlertLevel.MEDIUM,\n          type: 'permission_denied',\n          description: `User ${req.user.id} (${req.user.role}) attempted unauthorized action: ${action}`,\n          userId: req.user.id,\n          ipAddress: req.ip,\n          metadata: { action, path: req.path, method: req.method },\n        });\n\n        return res.status(403).json({\n          message: 'Insufficient permissions',\n          code: 'PERMISSION_DENIED',\n          required: action,\n          userRole: req.user.role,\n        });\n      }\n\n      // Context-aware validation for specific operations\n      if (_options.validateContext && req.body) {\n        if (action === 'create:invitation') {\n          const { role, organizationId, buildingId } = req.body;\n          const validation = await InvitationPermissionValidator.validateInvitePermission(\n            req.user.id,\n            req.user.role,\n            role,\n            organizationId,\n            buildingId\n          );\n\n          if (!validation.valid) {\n            await InvitationSecurityMonitor.triggerAlert({\n              level: SecurityAlertLevel.HIGH,\n              type: 'context_permission_violation',\n              description: `User ${req.user.id} violated context permission: ${validation.reason}`,\n              userId: req.user.id,\n              ipAddress: req.ip,\n              metadata: { action, reason: validation.reason, targetRole: role },\n            });\n\n            return res.status(403).json({\n              message: validation.reason || 'Context permission denied',\n              code: 'CONTEXT_PERMISSION_DENIED',\n            });\n          }\n        }\n\n        if (action === 'bulk:invitation') {\n          const { invitations } = req.body;\n          const validation = await InvitationPermissionValidator.validateBulkInvitation(\n            req.user.id,\n            req.user.role,\n            invitations\n          );\n\n          if (!validation.valid) {\n            return res.status(403).json({\n              message: validation.reason || 'Bulk invitation permission denied',\n              code: 'BULK_PERMISSION_DENIED',\n              invalidInvitations: validation.invalidInvitations,\n            });\n          }\n        }\n      }\n\n      // Ownership validation for management operations\n      if (_options.requireOwnership && req.params.id) {\n        const validation = await InvitationPermissionValidator.validateInvitationManagement(\n          req.user.id,\n          req.user.role,\n          req.params.id\n        );\n\n        if (!validation.valid) {\n          return res.status(403).json({\n            message: validation.reason || 'Not authorized to manage this invitation',\n            code: 'OWNERSHIP_REQUIRED',\n          });\n        }\n      }\n\n      // Monitor invitation access\n      await InvitationSecurityMonitor.monitorInvitationAccess(\n        req.user.id,\n        _options.auditAction || action,\n        req.ip,\n        req.get('User-Agent'),\n        { path: req.path, method: req.method }\n      );\n\n      next();\n    } catch (error: any) {\n      console.error('❌ Permission validation failed:', error);\n      return res.status(500).json({\n        message: 'Permission validation failed',\n        code: 'RBAC_ERROR',\n      });\n    }\n  };\n}\n\n/**\n * Enhanced audit logging for invitation operations.\n * @param invitationId\n * @param action\n * @param performedBy\n * @param req\n * @param previousStatus\n * @param newStatus\n * @param details\n */\n/**\n * CreateEnhancedInvitationAuditLog function.\n * @param invitationId\n * @param action\n * @param performedBy\n * @param req\n * @param previousStatus\n * @param newStatus\n * @param details\n * @returns Function result.\n */\nexport async function createEnhancedInvitationAuditLog(\n  invitationId: string,\n  action: string,\n  performedBy: string | null,\n  req: Request,\n  previousStatus?: string,\n  newStatus?: string,\n  details?: any\n) {\n  try {\n    // Get additional context\n    const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';\n    const userAgent = req.get('User-Agent') || 'unknown';\n    const referrer = req.get('Referer');\n    const forwardedFor = req.get('X-Forwarded-For');\n\n    // Enhanced details with security context\n    const enhancedDetails = {\n      ...details,\n      security: {\n        ipAddress,\n        userAgent,\n        referrer,\n        forwardedFor,\n        timestamp: new Date().toISOString(),\n        sessionId: req.sessionID,\n      },\n    };\n\n    // Create audit log entry\n    await db.insert(schema.invitationAuditLog).values([\n      {\n        invitationId,\n        action,\n        performedBy,\n        ipAddress,\n        userAgent,\n        details: enhancedDetails,\n        previousStatus: previousStatus as any,\n        newStatus: newStatus as any,\n      },\n    ]);\n\n    // Log to console for immediate visibility\n    console.log('📝 Enhanced invitation audit log created:', {\n      invitationId,\n      performedBy,\n      ipAddress,\n      action,\n      previousStatus,\n      newStatus,\n    });\n  } catch (error: any) {\n    console.error('❌ Error creating enhanced invitation audit log:', error);\n  }\n}\n\n/**\n * Delegation and inheritance middleware for invitation permissions.\n * Allows temporary permission elevation based on organizational hierarchy.\n * @param baseAction\n */\n/**\n * WithPermissionInheritance function.\n * @param baseAction\n * @returns Function result.\n */\nexport function withPermissionInheritance(baseAction: string) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    try {\n      // Check if user has direct permission based on role hierarchy\n      const hasDirectPermission = hasRoleOrHigher(req.user.role as any, 'manager' as any);\n\n      if (hasDirectPermission) {\n        return next();\n      }\n\n      // Check for delegated permissions based on organizational context\n      if (req.body?.organizationId || req.params.organizationId) {\n        const orgId = req.body?.organizationId || req.params.organizationId;\n\n        // Check if user has elevated permissions in this organization\n        const userOrgRole = await db\n          .select()\n          .from(schema.users)\n          .leftJoin(schema.buildings, eq(schema.buildings.organizationId, orgId))\n          .leftJoin(schema.residences, eq(schema.residences.buildingId, schema.buildings.id))\n          .leftJoin(\n            schema.userResidences,\n            eq(schema.userResidences.residenceId, schema.residences.id)\n          )\n          .where(\n            and(\n              eq(schema.users.id, req.user.id),\n              eq(schema.userResidences.relationshipType, 'owner')\n            )\n          )\n          .limit(1);\n\n        // Owners in an organization get elevated permissions for tenant management\n        if (userOrgRole.length > 0 && baseAction === 'create:invitation') {\n          const validation = await InvitationPermissionValidator.validateInvitePermission(\n            req.user.id,\n            'manager', // Temporarily elevate to manager permissions\n            req.body?.role,\n            orgId,\n            req.body?.buildingId\n          );\n\n          if (validation.valid) {\n            // Log permission inheritance\n            await createEnhancedInvitationAuditLog(\n              req.body?.invitationId || 'unknown',\n              'permission_inherited',\n              req.user.id,\n              req,\n              undefined,\n              undefined,\n              { baseAction, inheritedLevel: 'manager', reason: 'organizational_owner' }\n            );\n\n            return next();\n          }\n        }\n      }\n\n      return res.status(403).json({\n        message: 'Insufficient permissions',\n        code: 'PERMISSION_DENIED',\n        required: baseAction,\n        userRole: req.user.role,\n      });\n    } catch (error: any) {\n      console.error('❌ Permission inheritance check failed:', error);\n      return res.status(500).json({\n        message: 'Permission validation failed',\n        code: 'INHERITANCE_ERROR',\n      });\n    }\n  };\n}\n\n// Initialize security monitoring\nInvitationSecurityMonitor.onAlert((alert) => {\n  // In production, you might want to:\n  // - Send alerts to security team\n  // - Log to external monitoring service\n  // - Trigger automated responses\n});\n"],"version":3}