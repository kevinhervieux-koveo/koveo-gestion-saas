{"file":"/home/runner/workspace/server/api/residences.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/residences.ts"],"sourcesContent":["import { Express } from 'express';\nimport { db } from '../db';\nimport {\n  residences,\n  buildings,\n  organizations,\n  userResidences,\n  users,\n  userOrganizations,\n} from '../../shared/schema';\nimport { eq, and, or, ilike, inArray, sql } from 'drizzle-orm';\nimport { requireAuth } from '../auth/index';\nimport { delayedUpdateService } from '../services/delayed-update-service';\n\n/**\n *\n * @param app\n */\n/**\n * RegisterResidenceRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerResidenceRoutes(app: Express) {\n  // Get user's residences\n  app.get('/api/user/residences', requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user;\n      const userResidencesList = await db\n        .select({\n          residenceId: userResidences.residenceId,\n        })\n        .from(userResidences)\n        .where(and(eq(userResidences.userId, user.id), eq(userResidences.isActive, true)));\n      res.json(userResidencesList);\n    } catch (error: any) {\n      console.error('❌ Error fetching user residences:', error);\n      res.status(500).json({ message: 'Failed to fetch user residences' });\n    }\n  });\n\n  // Get assigned users for a specific residence\n  app.get(\n    '/api/residences/:residenceId/assigned-users',\n    requireAuth,\n    async (req: any, res: any) => {\n      try {\n        const { residenceId } = req.params;\n        const currentUser = req.user;\n\n        // Get assigned users with their details\n        const assignedUsers = await db\n          .select({\n            id: users.id,\n            username: users.username,\n            email: users.email,\n            firstName: users.firstName,\n            lastName: users.lastName,\n            phone: users.phone,\n            relationshipType: userResidences.relationshipType,\n            startDate: userResidences.startDate,\n            endDate: userResidences.endDate,\n            isActive: userResidences.isActive,\n          })\n          .from(userResidences)\n          .innerJoin(users, eq(userResidences.userId, users.id))\n          .where(\n            and(eq(userResidences.residenceId, residenceId), eq(userResidences.isActive, true))\n          );\n\n        res.json(assignedUsers);\n      } catch (error: any) {\n        console.error('❌ Error fetching assigned users:', error);\n        res.status(500).json({ message: 'Failed to fetch assigned users' });\n      }\n    }\n  );\n\n  // Update assigned user information\n  app.put(\n    '/api/residences/:residenceId/assigned-users/:userId',\n    requireAuth,\n    async (req: any, res: any) => {\n      try {\n        const { userId } = req.params;\n        const { firstName, lastName, email, phone } = req.body;\n        const currentUser = req.user;\n\n        // Update user information\n        await db\n          .update(users)\n          .set({\n            firstName,\n            lastName,\n            email,\n            phone,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, userId));\n\n        res.json({ message: 'User updated successfully' });\n      } catch (error: any) {\n        console.error('❌ Error updating assigned user:', error);\n        res.status(500).json({ message: 'Failed to update assigned user' });\n      }\n    }\n  );\n\n  // Get all residences with filtering and search\n  app.get('/api/residences', requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user;\n      const { search, buildingId, floor } = req.query;\n\n\n      // Start with base conditions\n      const conditions = [eq(residences.isActive, true)];\n\n      // Apply filters\n      if (buildingId) {\n        conditions.push(eq(residences.buildingId, buildingId));\n      }\n\n      if (floor) {\n        conditions.push(eq(residences.floor, parseInt(floor)));\n      }\n\n      // Use the same access control logic as /api/manager/buildings\n      const accessibleBuildingIds = new Set<string>();\n\n      // Check if user belongs to Koveo organization (special global access)\n      const userOrgs = await db\n        .select({\n          organizationId: organizations.id,\n          organizationName: organizations.name,\n          canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,\n        })\n        .from(organizations)\n        .innerJoin(userOrganizations, eq(userOrganizations.organizationId, organizations.id))\n        .where(and(eq(userOrganizations.userId, user.id), eq(userOrganizations.isActive, true)));\n\n      const hasGlobalAccess =\n        user.role === 'admin' ||\n        userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);\n\n      if (hasGlobalAccess) {\n        console.log(\n          `🌟 Admin user or user with global access detected - granting access to ALL residences`\n        );\n\n        // Koveo users can see ALL residences from ALL buildings\n        const allBuildings = await db\n          .select({ id: buildings.id })\n          .from(buildings)\n          .where(eq(buildings.isActive, true));\n\n        allBuildings.forEach((building) => {\n          accessibleBuildingIds.add(building.id);\n        });\n      } else {\n        // Regular users: Get buildings from their organizations\n        if (user.role === 'admin' || user.role === 'manager' || user.role === 'demo_manager') {\n          if (userOrgs.length > 0) {\n            const orgIds = userOrgs.map((uo) => uo.organizationId);\n\n            // Get all buildings from these organizations\n            const orgBuildings = await db\n              .select({ id: buildings.id })\n              .from(buildings)\n              .where(and(inArray(buildings.organizationId, orgIds), eq(buildings.isActive, true)));\n\n            orgBuildings.forEach((building) => {\n              accessibleBuildingIds.add(building.id);\n            });\n          }\n        }\n\n        // For ALL roles (Admin, Manager, Resident, Tenant): Get buildings from their residences\n        console.log(\n          `🔍 [ACCESS DEBUG] Checking residence access for user ${user.id} with role ${user.role}`\n        );\n        const userResidenceRecords = await db\n          .select({\n            residenceId: userResidences.residenceId,\n          })\n          .from(userResidences)\n          .where(and(eq(userResidences.userId, user.id), eq(userResidences.isActive, true)));\n\n        console.log(\n          `🔍 [ACCESS DEBUG] Found ${userResidenceRecords.length} residence records for user ${user.id}`\n        );\n\n        if (userResidenceRecords.length > 0) {\n          const residenceIds = userResidenceRecords.map((ur) => ur.residenceId);\n\n          // Get buildings through residences\n          const residenceBuildings = await db\n            .select({ id: buildings.id })\n            .from(residences)\n            .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n            .where(and(inArray(residences.id, residenceIds), eq(buildings.isActive, true)));\n\n          residenceBuildings.forEach((building) => {\n            accessibleBuildingIds.add(building.id);\n          });\n        }\n      }\n\n      // Add building access filter to conditions\n      console.log(\n        `🔍 [ACCESS DEBUG] User ${user.id} has access to ${accessibleBuildingIds.size} buildings:`,\n        Array.from(accessibleBuildingIds)\n      );\n      if (accessibleBuildingIds.size > 0) {\n        conditions.push(inArray(residences.buildingId, Array.from(accessibleBuildingIds)));\n      } else {\n        // User has no access to any buildings, return empty result\n        return res.json([]);\n      }\n\n      // Get residences with building and organization info\n      const baseQuery = db\n        .select({\n          residence: residences,\n          building: buildings,\n          organization: organizations,\n        })\n        .from(residences)\n        .leftJoin(buildings, eq(residences.buildingId, buildings.id))\n        .leftJoin(organizations, eq(buildings.organizationId, organizations.id))\n        .where(and(...conditions));\n\n      let results = await baseQuery;\n\n      // Apply search filter\n      if (search) {\n        const searchLower = search.toLowerCase();\n        results = results.filter(\n          (result) =>\n            result.residence.unitNumber.toLowerCase().includes(searchLower) ||\n            result.building?.name.toLowerCase().includes(searchLower)\n        );\n      }\n\n      // Get tenants for each residence\n      const residenceIds = results.map((r) => r.residence.id);\n      const tenants =\n        residenceIds.length > 0\n          ? await db\n              .select({\n                residenceId: userResidences.residenceId,\n                tenant: users,\n              })\n              .from(userResidences)\n              .innerJoin(users, eq(userResidences.userId, users.id))\n              .where(\n                and(\n                  inArray(userResidences.residenceId, residenceIds),\n                  eq(userResidences.isActive, true)\n                )\n              )\n          : [];\n\n      // Group tenants by residence\n      const tenantsByResidence = tenants.reduce(\n        (acc, { residenceId, tenant }) => {\n          if (!acc[residenceId]) {\n            acc[residenceId] = [];\n          }\n          acc[residenceId].push({\n            id: tenant.id,\n            firstName: tenant.firstName,\n            lastName: tenant.lastName,\n            email: tenant.email,\n          });\n          return acc;\n        },\n        {} as Record<string, any[]>\n      );\n\n      // Combine results\n      const residencesList = results.map((result) => ({\n        ...result.residence,\n        building: result.building,\n        organization: result.organization,\n        tenants: tenantsByResidence[result.residence.id] || [],\n      }));\n\n      res.json(residencesList);\n    } catch (error: any) {\n      console.error('❌ Error fetching residences:', error);\n      res.status(500).json({ message: 'Failed to fetch residences' });\n    }\n  });\n\n  // Get a specific residence by ID\n  app.get('/api/residences/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const user = req.user;\n\n      const result = await db\n        .select({\n          residence: residences,\n          building: buildings,\n          organization: organizations,\n        })\n        .from(residences)\n        .leftJoin(buildings, eq(residences.buildingId, buildings.id))\n        .leftJoin(organizations, eq(buildings.organizationId, organizations.id))\n        .where(and(eq(residences.id, id), eq(residences.isActive, true)));\n\n      if (result.length === 0) {\n        return res.status(404).json({ message: 'Residence not found' });\n      }\n\n      const residence = result[0];\n\n      // Apply RBAC check\n      if (user.role !== 'admin' && !user.canAccessAllOrganizations) {\n        // Check if user has access to this residence's organization\n        const userHasAccess = await db\n          .select({ count: sql<number>`count(*)` })\n          .from(userResidences)\n          .leftJoin(residences, eq(userResidences.residenceId, residences.id))\n          .leftJoin(buildings, eq(residences.buildingId, buildings.id))\n          .where(\n            and(\n              eq(userResidences.userId, user.id),\n              eq(buildings.organizationId, residence.organization.id)\n            )\n          );\n\n        if (userHasAccess[0].count === 0) {\n          return res.status(403).json({ message: 'Access denied' });\n        }\n      }\n\n      // Get tenants for this residence\n      const tenants = await db\n        .select({\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          email: users.email,\n          relationshipType: userResidences.relationshipType,\n          startDate: userResidences.startDate,\n          endDate: userResidences.endDate,\n        })\n        .from(userResidences)\n        .leftJoin(users, eq(userResidences.userId, users.id))\n        .where(and(eq(userResidences.residenceId, id), eq(userResidences.isActive, true)));\n\n      res.json({\n        ...residence.residence,\n        building: residence.building,\n        organization: residence.organization,\n        tenants,\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching residence:', error);\n      res.status(500).json({ message: 'Failed to fetch residence' });\n    }\n  });\n\n  // Update a residence\n  app.put('/api/residences/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n\n      console.log(`🏠 Updating residence ${id} with data:`, updateData);\n\n      // Remove readonly fields\n      delete updateData.id;\n      delete updateData.createdAt;\n      delete updateData.buildingId; // Don't allow changing building\n\n      // Validate and sanitize numeric fields\n      const processedData = {\n        ...updateData,\n        updatedAt: new Date(),\n      };\n\n      // Convert null/empty values to null for optional fields\n      if (processedData.squareFootage === null || processedData.squareFootage === '') {\n        processedData.squareFootage = null;\n      }\n      if (processedData.bathrooms === null || processedData.bathrooms === '') {\n        processedData.bathrooms = null;\n      }\n      if (processedData.ownershipPercentage === null || processedData.ownershipPercentage === '') {\n        processedData.ownershipPercentage = null;\n      }\n      if (processedData.monthlyFees === null || processedData.monthlyFees === '') {\n        processedData.monthlyFees = null;\n      }\n\n      console.log(`🏠 Processed data for residence ${id}:`, processedData);\n\n      const updated = await db\n        .update(residences)\n        .set(processedData)\n        .where(eq(residences.id, id))\n        .returning();\n\n      if (updated.length === 0) {\n        return res.status(404).json({ message: 'Residence not found' });\n      }\n\n      console.log(`✅ Successfully updated residence ${id}`);\n\n      // Schedule delayed money flow and budget update for the updated residence\n      try {\n        delayedUpdateService.scheduleResidenceUpdate(id);\n        // Don't fail the residence update if scheduling fails\n      } catch (e) {\n        console.warn('⚠️ Failed to schedule residence update:', e);\n      }\n\n      res.json(updated[0]);\n    } catch (error: any) {\n      console.error('❌ Error updating residence:', error);\n      console.error('❌ Error details:', error.message);\n      console.error('❌ Error stack:', error.stack);\n      res.status(500).json({ \n        message: 'Failed to update residence',\n        error: error.message,\n        details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      });\n    }\n  });\n\n  // Create residences when a building is created (called internally)\n  app.post(\n    '/api/buildings/:buildingId/generate-residences',\n    requireAuth,\n    async (req: any, res: any) => {\n      try {\n        const { buildingId } = req.params;\n\n        // Get building details\n        const building = await db\n          .select()\n          .from(buildings)\n          .where(eq(buildings.id, buildingId))\n          .limit(1);\n\n        if (building.length === 0) {\n          return res.status(404).json({ message: 'Building not found' });\n        }\n\n        const buildingData = building[0];\n        const totalUnits = buildingData.totalUnits;\n        const totalFloors = buildingData.totalFloors || 1;\n\n        if (totalUnits > 300) {\n          return res\n            .status(400)\n            .json({ message: 'Cannot create more than 300 residences per building' });\n        }\n\n        // Check if residences already exist for this building\n        const existingResidences = await db\n          .select({ count: sql<number>`count(*)` })\n          .from(residences)\n          .where(eq(residences.buildingId, buildingId));\n\n        if (existingResidences[0].count > 0) {\n          return res.status(400).json({ message: 'Residences already exist for this building' });\n        }\n\n        // Generate residences\n        const residencesToCreate = [];\n        const unitsPerFloor = Math.ceil(totalUnits / totalFloors);\n\n        for (let unit = 1; unit <= totalUnits; unit++) {\n          const floor = Math.ceil(unit / unitsPerFloor);\n          const unitOnFloor = ((unit - 1) % unitsPerFloor) + 1;\n          const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;\n\n          residencesToCreate.push({\n            buildingId,\n            unitNumber,\n            floor,\n            isActive: true,\n          });\n        }\n\n        // Insert all residences at once\n        const createdResidences = await db\n          .insert(residences)\n          .values(residencesToCreate)\n          .returning();\n\n        res.json({\n          message: `Successfully created ${createdResidences.length} residences`,\n          residences: createdResidences,\n        });\n      } catch (error: any) {\n        console.error('❌ Error generating residences:', error);\n        res.status(500).json({ message: 'Failed to generate residences' });\n      }\n    }\n  );\n}\n"],"version":3}