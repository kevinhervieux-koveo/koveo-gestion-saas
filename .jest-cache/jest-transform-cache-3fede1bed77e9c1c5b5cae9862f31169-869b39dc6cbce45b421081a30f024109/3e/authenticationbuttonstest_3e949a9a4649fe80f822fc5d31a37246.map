{"file":"/home/runner/workspace/tests/unit/button-functionality/authentication-buttons.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/button-functionality/authentication-buttons.test.tsx"],"sourcesContent":["/**\n * Authentication Button Functionality Tests\n * Tests all authentication-related buttons (login, logout, password toggle, etc.)\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport '@testing-library/jest-dom';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\n// Mock API requests\nconst mockApiRequest = jest.fn();\njest.mock('../../../client/src/lib/queryClient', () => ({\n  apiRequest: mockApiRequest,\n  queryClient: new (jest.requireActual('@tanstack/react-query').QueryClient)(),\n}));\n\n// Mock authentication context\nconst mockLogin = jest.fn();\nconst mockLogout = jest.fn();\njest.mock('../../../client/src/contexts/AuthContext', () => ({\n  useAuth: () => ({\n    user: null,\n    isAuthenticated: false,\n    login: mockLogin,\n    logout: mockLogout,\n  }),\n}));\n\ndescribe('Authentication Buttons Functionality', () => {\n  let queryClient: QueryClient;\n  let user: any;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n    user = userEvent.setup();\n    jest.clearAllMocks();\n    mockApiRequest.mockResolvedValue({ ok: true, json: () => Promise.resolve({}) });\n  });\n\n  const renderWithProvider = (component: React.ReactElement) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        {component}\n      </QueryClientProvider>\n    );\n  };\n\n  describe('Password Toggle Buttons', () => {\n    const passwordToggleTestIds = [\n      'button-toggle-password',\n      'button-toggle-confirm-password',\n    ];\n\n    passwordToggleTestIds.forEach(testId => {\n      it(`should toggle password visibility for ${testId}`, async () => {\n        const MockPasswordField = () => {\n          const [showPassword, setShowPassword] = React.useState(false);\n\n          return (\n            <div>\n              <input \n                type={showPassword ? 'text' : 'password'} \n                data-testid=\"password-input\"\n                defaultValue=\"testpassword\"\n              />\n              <button \n                data-testid={testId}\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                {showPassword ? 'Hide' : 'Show'}\n              </button>\n            </div>\n          );\n        };\n\n        renderWithProvider(<MockPasswordField />);\n        \n        const passwordInput = screen.getByTestId('password-input') as HTMLInputElement;\n        const toggleButton = screen.getByTestId(testId);\n        \n        expect(passwordInput.type).toBe('password');\n        expect(toggleButton).toBeInTheDocument();\n        \n        await user.click(toggleButton);\n        \n        await waitFor(() => {\n          expect(passwordInput.type).toBe('text');\n        });\n        \n        await user.click(toggleButton);\n        \n        await waitFor(() => {\n          expect(passwordInput.type).toBe('password');\n        });\n      });\n    });\n  });\n\n  describe('Language Toggle Buttons', () => {\n    it('should switch to English when EN button is clicked', async () => {\n      const mockSetLanguage = jest.fn();\n      \n      const MockLanguageSwitcher = () => (\n        <div>\n          <button \n            data-testid=\"button-language-en\"\n            onClick={() => mockSetLanguage('en')}\n          >\n            EN\n          </button>\n          <button \n            data-testid=\"button-language-fr\"\n            onClick={() => mockSetLanguage('fr')}\n          >\n            FR\n          </button>\n        </div>\n      );\n\n      renderWithProvider(<MockLanguageSwitcher />);\n      \n      const enButton = screen.getByTestId('button-language-en');\n      const frButton = screen.getByTestId('button-language-fr');\n      \n      expect(enButton).toBeInTheDocument();\n      expect(frButton).toBeInTheDocument();\n      \n      await user.click(enButton);\n      expect(mockSetLanguage).toHaveBeenCalledWith('en');\n      \n      await user.click(frButton);\n      expect(mockSetLanguage).toHaveBeenCalledWith('fr');\n    });\n  });\n\n  describe('Login Form Buttons', () => {\n    it('should handle login form submission', async () => {\n      const MockLoginForm = () => {\n        const handleSubmit = (e: React.FormEvent) => {\n          e.preventDefault();\n          mockLogin({ email: 'test@test.com', password: 'password' });\n        };\n\n        return (\n          <form onSubmit={handleSubmit}>\n            <input type=\"email\" name=\"email\" defaultValue=\"test@test.com\" />\n            <input type=\"password\" name=\"password\" defaultValue=\"password\" />\n            <button type=\"submit\" data-testid=\"button-login\">\n              Login\n            </button>\n          </form>\n        );\n      };\n\n      renderWithProvider(<MockLoginForm />);\n      \n      const loginButton = screen.getByTestId('button-login');\n      expect(loginButton).toBeInTheDocument();\n      \n      await user.click(loginButton);\n      \n      await waitFor(() => {\n        expect(mockLogin).toHaveBeenCalledWith({ \n          email: 'test@test.com', \n          password: 'password' \n        });\n      });\n    });\n  });\n\n  describe('Registration Buttons', () => {\n    it('should handle registration navigation', async () => {\n      const mockNavigate = jest.fn();\n      \n      const MockRegisterButton = () => (\n        <button \n          data-testid=\"button-register\"\n          onClick={() => mockNavigate('/auth/register')}\n        >\n          Register\n        </button>\n      );\n\n      renderWithProvider(<MockRegisterButton />);\n      \n      const registerButton = screen.getByTestId('button-register');\n      expect(registerButton).toBeInTheDocument();\n      \n      await user.click(registerButton);\n      \n      expect(mockNavigate).toHaveBeenCalledWith('/auth/register');\n    });\n  });\n\n  describe('Password Reset Buttons', () => {\n    it('should handle password reset request', async () => {\n      const MockPasswordResetForm = () => {\n        const handleReset = (e: React.FormEvent) => {\n          e.preventDefault();\n          mockApiRequest('/api/auth/reset-password', {\n            method: 'POST',\n            body: JSON.stringify({ email: 'test@test.com' })\n          });\n        };\n\n        return (\n          <form onSubmit={handleReset}>\n            <input type=\"email\" name=\"email\" defaultValue=\"test@test.com\" />\n            <button type=\"submit\" data-testid=\"button-reset-password\">\n              Reset Password\n            </button>\n          </form>\n        );\n      };\n\n      renderWithProvider(<MockPasswordResetForm />);\n      \n      const resetButton = screen.getByTestId('button-reset-password');\n      expect(resetButton).toBeInTheDocument();\n      \n      await user.click(resetButton);\n      \n      await waitFor(() => {\n        expect(mockApiRequest).toHaveBeenCalledWith('/api/auth/reset-password', {\n          method: 'POST',\n          body: JSON.stringify({ email: 'test@test.com' })\n        });\n      });\n    });\n  });\n\n  describe('Logout Buttons', () => {\n    it('should handle logout action', async () => {\n      const MockLogoutButton = () => (\n        <button \n          data-testid=\"button-logout\"\n          onClick={mockLogout}\n        >\n          Logout\n        </button>\n      );\n\n      renderWithProvider(<MockLogoutButton />);\n      \n      const logoutButton = screen.getByTestId('button-logout');\n      expect(logoutButton).toBeInTheDocument();\n      \n      await user.click(logoutButton);\n      \n      expect(mockLogout).toHaveBeenCalled();\n    });\n  });\n});"],"version":3}