62fa19b80faba59e78ef608e6a008f1f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BillEditForm = BillEditForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
// Form schema for bill editing
const billFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Title is required'),
    description: zod_2.z.string().optional(),
    category: zod_2.z.enum([
        'insurance',
        'maintenance',
        'salary',
        'utilities',
        'cleaning',
        'security',
        'landscaping',
        'professional_services',
        'administration',
        'repairs',
        'supplies',
        'taxes',
        'technology',
        'reserves',
        'other',
    ]),
    vendor: zod_2.z.string().optional(),
    paymentType: zod_2.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_2.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    totalAmount: zod_2.z.string().min(1, 'Amount is required'),
    startDate: zod_2.z.string().min(1, 'Start date is required'),
    endDate: zod_2.z.string().optional(),
    status: zod_2.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),
    notes: zod_2.z.string().optional(),
});
/**
 * Bill editing form component for modifying existing bills.
 * @param root0 - The component props.
 * @param root0.bill - The bill object to edit.
 * @param root0.onSuccess - Callback function called when bill is successfully updated.
 * @param root0.onCancel - Callback function called when editing is cancelled.
 * @returns JSX element for bill editing form.
 */
/**
 * BillEditForm function.
 * @param root0
 * @param root0.bill
 * @param root0.onSuccess
 * @param root0.onCancel
 * @returns Function result.
 */
/**
 * BillEditForm component.
 * @param props - Component props.
 * @param props.bill - Bill parameter.
 * @param props.onSuccess - Callback function called when operation succeeds.
 * @param props.onCancel - Callback function called when operation is cancelled.
 * @returns JSX element.
 */
/**
 * BillEditForm component.
 * @param props - Component props.
 * @param props.bill - Bill parameter.
 * @param props.onSuccess - Callback function called when operation succeeds.
 * @param props.onCancel - Callback function called when operation is cancelled.
 * @returns JSX element.
 */
/**
 * BillEditForm component.
 * @param props - Component props.
 * @param props.bill - bill parameter.
 * @param props.onSuccess - Callback function called when operation succeeds.
 * @param props.onCancel - Callback function called when operation is cancelled.
 * @returns JSX element.
 */
/**
 * BillEditForm component.
 * @param props - Component props.
 * @param props.bill - bill parameter.
 * @param props.onSuccess - Callback function called when operation succeeds.
 * @param props.onCancel - Callback function called when operation is cancelled.
 * @returns JSX element.
 */
/**
 * BillEditForm component.
 * @param props - Component props.
 * @param props.bill - bill parameter.
 * @param props.onSuccess - Callback function called when operation succeeds.
 * @param props.onCancel - Callback function called when operation is cancelled.
 * @returns JSX element.
 */
function BillEditForm({ bill, onSuccess, onCancel, }) {
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(billFormSchema),
        defaultValues: {
            title: bill.title,
            description: bill.description || '',
            category: bill.category,
            vendor: bill.vendor || '',
            paymentType: bill.paymentType,
            schedulePayment: bill.schedulePayment || 'monthly',
            totalAmount: bill.totalAmount.toString(),
            startDate: bill.startDate,
            endDate: bill.endDate || '',
            status: bill.status,
            notes: bill.notes || '',
        },
    });
    const queryClient = (0, react_query_1.useQueryClient)();
    const updateBillMutation = (0, react_query_1.useMutation)({
        mutationFn: async (updates) => {
            const response = await fetch(`/api/bills/${bill.id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({
                    ...updates,
                    costs: [updates.totalAmount], // Single cost for now
                }),
            }); /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */ /**
            * If function.
            * @param !response.ok - !response.ok parameter.
            */ /**
            * If function.
            * @param !response.ok - !response.ok parameter.
            */ /**
            * If function.
            * @param !response.ok - !response.ok parameter.
            */ /**
            * If function.
            * @param !response.ok - !response.ok parameter.
            */
            if (!response.ok) {
                throw new Error('Failed to update bill');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            onSuccess();
        },
    });
    const onSubmit = (values) => {
        updateBillMutation.mutate(values);
    };
    return ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6 pt-4 border-t', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'title', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Title *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: 'Bill title' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'vendor', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Vendor" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: 'Company or service provider' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'category', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'insurance', children: "Insurance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'maintenance', children: "Maintenance" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'salary', children: "Salary" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'utilities', children: "Utilities" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cleaning', children: "Cleaning" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'security', children: "Security" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'landscaping', children: "Landscaping" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'professional_services', children: "Professional Services" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'administration', children: "Administration" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'repairs', children: "Repairs" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'supplies', children: "Supplies" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'taxes', children: "Taxes" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'technology', children: "Technology" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'reserves', children: "Reserves" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'other', children: "Other" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'totalAmount', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Total Amount *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'number', step: '0.01', placeholder: '0.00' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'paymentType', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Type *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select payment type' }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'unique', children: "One-time Payment" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'recurrent', children: "Recurring Payment" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), form.watch('paymentType') === 'recurrent' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'schedulePayment', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Schedule *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select schedule' }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'weekly', children: "Weekly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'monthly', children: "Monthly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'quarterly', children: "Quarterly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'yearly', children: "Yearly" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'startDate', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Start Date *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'date' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), form.watch('paymentType') === 'recurrent' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'endDate', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "End Date (Optional)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'date' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'status', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Status *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select status' }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'draft', children: "Draft" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'sent', children: "Sent" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'overdue', children: "Overdue" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'paid', children: "Paid" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cancelled', children: "Cancelled" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { ...field, placeholder: 'Bill description...', rows: 3 }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'notes', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Notes" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { ...field, placeholder: 'Additional notes...', rows: 3 }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-2 pt-4 border-t', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: onCancel, children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: updateBillMutation.isPending, children: updateBillMutation.isPending ? 'Updating...' : 'Update Bill' })] })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,