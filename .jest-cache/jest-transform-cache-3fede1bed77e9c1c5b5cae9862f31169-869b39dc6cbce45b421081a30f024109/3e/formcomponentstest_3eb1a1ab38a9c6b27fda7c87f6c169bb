a5aea09fa44ee49f903ad30731e6e1b0
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
/**
 * Form Components Validation Test Suite
 * Tests React components to ensure they follow validation UI standards
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const form_1 = require("../../client/src/components/ui/form");
const input_1 = require("../../client/src/components/ui/input");
const button_1 = require("../../client/src/components/ui/button");
// Test component that uses our form validation standards
const TestFormSchema = zod_2.z.object({
    email: zod_2.z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)'),
    name: zod_2.z.string().min(1, 'Name is required (example: Jean Dupont)').max(50, 'Name must be less than 50 characters'),
    amount: zod_2.z.string().regex(/^\d+(\.\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),
    phone: zod_2.z.string().regex(/^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)').optional()
});
const TestFormComponent = () => {
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(TestFormSchema),
        defaultValues: {
            email: '',
            name: '',
            amount: '',
            phone: '',
        },
    });
    const onSubmit = (data) => {
        console.log(data);
    };
    return ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), "data-testid": "test-form", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "email", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { "data-testid": "label-email", children: "Email Address *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": "input-email" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, { "data-testid": "error-email" })] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "name", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { "data-testid": "label-name", children: "Full Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": "input-name" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, { "data-testid": "error-name" })] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "amount", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { "data-testid": "label-amount", children: "Amount *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": "input-amount" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, { "data-testid": "error-amount" })] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "phone", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { "data-testid": "label-phone", children: "Phone Number" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": "input-phone" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, { "data-testid": "error-phone" })] })) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", "data-testid": "submit-button", children: "Submit" })] }) }));
};
(0, globals_1.describe)('Form Component Validation UI', () => {
    (0, globals_1.describe)('FormLabel Red Color Display', () => {
        (0, globals_1.test)('should display field labels in red when validation errors occur', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestFormComponent, {}));
            // Submit form with invalid data to trigger validation errors
            const submitButton = react_2.screen.getByTestId('submit-button');
            await user.click(submitButton);
            // Wait for validation errors to appear
            await (0, react_2.waitFor)(() => {
                const emailError = react_2.screen.getByTestId('error-email');
                (0, globals_1.expect)(emailError).toBeInTheDocument();
            });
            // Check that FormLabel has error styling when field has error
            const emailLabel = react_2.screen.getByTestId('label-email');
            const nameLabel = react_2.screen.getByTestId('label-name');
            const amountLabel = react_2.screen.getByTestId('label-amount');
            // Labels for required fields with errors should have error styling
            (0, globals_1.expect)(emailLabel).toHaveClass('text-red-600');
            (0, globals_1.expect)(nameLabel).toHaveClass('text-red-600');
            (0, globals_1.expect)(amountLabel).toHaveClass('text-red-600');
        });
        (0, globals_1.test)('should not display red labels when fields are valid', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestFormComponent, {}));
            // Fill in valid data
            const emailInput = react_2.screen.getByTestId('input-email');
            const nameInput = react_2.screen.getByTestId('input-name');
            const amountInput = react_2.screen.getByTestId('input-amount');
            await user.type(emailInput, 'user@domain.com');
            await user.type(nameInput, 'Jean Dupont');
            await user.type(amountInput, '125.50');
            // Submit form
            const submitButton = react_2.screen.getByTestId('submit-button');
            await user.click(submitButton);
            // Wait for validation to complete
            await (0, react_2.waitFor)(() => {
                // Check that no error messages are shown - use queryBy to avoid errors if elements don't exist
                const emailError = react_2.screen.queryByTestId('error-email');
                const nameError = react_2.screen.queryByTestId('error-name');
                const amountError = react_2.screen.queryByTestId('error-amount');
                // Elements should either not exist or be empty when valid
                if (emailError)
                    (0, globals_1.expect)(emailError).toBeEmptyDOMElement();
                if (nameError)
                    (0, globals_1.expect)(nameError).toBeEmptyDOMElement();
                if (amountError)
                    (0, globals_1.expect)(amountError).toBeEmptyDOMElement();
            });
            // Labels should not have error styling
            const emailLabel = react_2.screen.getByTestId('label-email');
            const nameLabel = react_2.screen.getByTestId('label-name');
            const amountLabel = react_2.screen.getByTestId('label-amount');
            (0, globals_1.expect)(emailLabel).not.toHaveClass('text-red-600');
            (0, globals_1.expect)(nameLabel).not.toHaveClass('text-red-600');
            (0, globals_1.expect)(amountLabel).not.toHaveClass('text-red-600');
        });
    });
    (0, globals_1.describe)('Error Message Display', () => {
        (0, globals_1.test)('should display detailed error messages with examples', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestFormComponent, {}));
            // Enter invalid data
            const emailInput = react_2.screen.getByTestId('input-email');
            const nameInput = react_2.screen.getByTestId('input-name');
            const amountInput = react_2.screen.getByTestId('input-amount');
            const phoneInput = react_2.screen.getByTestId('input-phone');
            await user.type(emailInput, 'invalid-email');
            // Clear the name field by selecting all and deleting
            await user.clear(nameInput);
            await user.type(amountInput, '125.555');
            await user.type(phoneInput, '123');
            // Submit to trigger validation
            const submitButton = react_2.screen.getByTestId('submit-button');
            await user.click(submitButton);
            // Wait for error messages
            await (0, react_2.waitFor)(() => {
                const emailError = react_2.screen.queryByTestId('error-email');
                const nameError = react_2.screen.queryByTestId('error-name');
                const amountError = react_2.screen.queryByTestId('error-amount');
                const phoneError = react_2.screen.queryByTestId('error-phone');
                // Check that error messages contain examples and helpful guidance
                if (emailError && emailError.textContent) {
                    (0, globals_1.expect)(emailError.textContent).toContain('example:');
                    (0, globals_1.expect)(emailError.textContent).toContain('user@domain.com');
                }
                if (nameError && nameError.textContent) {
                    (0, globals_1.expect)(nameError.textContent).toContain('example:');
                    (0, globals_1.expect)(nameError.textContent).toContain('Jean Dupont');
                }
                if (amountError && amountError.textContent) {
                    (0, globals_1.expect)(amountError.textContent).toContain('decimal places');
                    (0, globals_1.expect)(amountError.textContent).toContain('example:');
                    (0, globals_1.expect)(amountError.textContent).toContain('125.50');
                }
                if (phoneError && phoneError.textContent) {
                    (0, globals_1.expect)(phoneError.textContent).toContain('example:');
                    (0, globals_1.expect)(phoneError.textContent).toContain('(514) 123-4567');
                }
            });
        });
        (0, globals_1.test)('should clear error messages when fields become valid', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestFormComponent, {}));
            // First trigger an error
            const emailInput = react_2.screen.getByTestId('input-email');
            await user.type(emailInput, 'invalid');
            const submitButton = react_2.screen.getByTestId('submit-button');
            await user.click(submitButton);
            // Wait for error to appear
            await (0, react_2.waitFor)(() => {
                const emailError = react_2.screen.queryByTestId('error-email');
                (0, globals_1.expect)(emailError).toBeTruthy();
                if (emailError) {
                    (0, globals_1.expect)(emailError.textContent).toContain('valid email');
                }
            });
            // Then fix the email
            await user.clear(emailInput);
            await user.type(emailInput, 'user@domain.com');
            // Trigger validation again
            await user.click(submitButton);
            // Wait for error to clear
            await (0, react_2.waitFor)(() => {
                const emailError = react_2.screen.queryByTestId('error-email');
                if (emailError) {
                    (0, globals_1.expect)(emailError).toBeEmptyDOMElement();
                }
            });
        });
    });
    (0, globals_1.describe)('Accessibility Compliance', () => {
        (0, globals_1.test)('should maintain proper form accessibility with validation', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestFormComponent, {}));
            // Check that form fields have proper labels
            const emailInput = react_2.screen.getByTestId('input-email');
            const nameInput = react_2.screen.getByTestId('input-name');
            (0, globals_1.expect)(emailInput).toHaveAccessibleName(/email address/i);
            (0, globals_1.expect)(nameInput).toHaveAccessibleName(/full name/i);
            // Check that required fields are marked appropriately
            const emailLabel = react_2.screen.getByTestId('label-email');
            const nameLabel = react_2.screen.getByTestId('label-name');
            (0, globals_1.expect)(emailLabel.textContent).toContain('*');
            (0, globals_1.expect)(nameLabel.textContent).toContain('*');
        });
        (0, globals_1.test)('should associate error messages with form fields', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestFormComponent, {}));
            // Trigger validation error
            const submitButton = react_2.screen.getByTestId('submit-button');
            await user.click(submitButton);
            await (0, react_2.waitFor)(() => {
                const emailInput = react_2.screen.getByTestId('input-email');
                const emailError = react_2.screen.getByTestId('error-email');
                // Error message should be associated with the input
                (0, globals_1.expect)(emailError).toBeInTheDocument();
                (0, globals_1.expect)(emailError.textContent).toBeTruthy();
                // Input should have aria-describedby or similar accessibility attribute
                (0, globals_1.expect)(emailInput).toBeInTheDocument();
            });
        });
    });
});
(0, globals_1.describe)('Validation Standards Enforcement', () => {
    (0, globals_1.describe)('Schema Pattern Validation', () => {
        (0, globals_1.test)('should validate that all string schemas include helpful error messages', () => {
            // Helper function to check if a schema follows our standards
            const validateStringSchema = (schema, fieldContext) => {
                const testResult = schema.safeParse('');
                if (!testResult.success) {
                    const errorMessage = testResult.error.issues[0].message;
                    // Requirements for good error messages:
                    // 1. Should not be just "Required" or "Invalid"
                    // 2. Should provide context about the field
                    // 3. Should include examples for format-specific fields
                    const isDescriptive = errorMessage.length > 10;
                    const isNotGeneric = !errorMessage.match(/^(required|invalid|error|wrong)$/i);
                    const hasExample = errorMessage.includes('example:') || !needsExample(fieldContext);
                    return {
                        isDescriptive,
                        isNotGeneric,
                        hasExample,
                        message: errorMessage,
                        passes: isDescriptive && isNotGeneric && hasExample
                    };
                }
                return { passes: true };
            };
            const needsExample = (context) => {
                return ['email', 'phone', 'postal', 'amount', 'time', 'date', 'name'].some(type => context.toLowerCase().includes(type));
            };
            // Test various schema types that should follow our standards
            const schemasToTest = [
                {
                    schema: zod_2.z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)'),
                    context: 'email'
                },
                {
                    schema: zod_2.z.string().min(1, 'Name is required (example: Jean Dupont)'),
                    context: 'name'
                },
                {
                    schema: zod_2.z.string().min(1, 'Please select an option from the dropdown'),
                    context: 'selection'
                }
            ];
            schemasToTest.forEach(({ schema, context }) => {
                const result = validateStringSchema(schema, context);
                (0, globals_1.expect)(result.passes).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Consistent Pattern Enforcement', () => {
        (0, globals_1.test)('should enforce consistent validation patterns across field types', () => {
            // Define standard patterns that should be used consistently
            const standardPatterns = {
                email: {
                    regex: /\S+@\S+\.\S+/,
                    errorPattern: /please enter.*valid.*email.*example:/i,
                    example: 'user@domain.com'
                },
                phone: {
                    regex: /^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/,
                    errorPattern: /phone.*valid.*north american.*format.*example:/i,
                    example: '(514) 123-4567'
                },
                postalCode: {
                    regex: /^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/,
                    errorPattern: /postal.*canadian.*format.*example:/i,
                    example: 'H1A 1B1'
                },
                amount: {
                    regex: /^\d+(\.\d{1,2})?$/,
                    errorPattern: /amount.*valid.*number.*decimal.*example:/i,
                    example: '125.50'
                }
            };
            Object.entries(standardPatterns).forEach(([fieldType, { regex, errorPattern, example }]) => {
                // Test that the regex works correctly
                (0, globals_1.expect)(regex.test(example)).toBe(true);
                // Test that error messages follow the expected pattern
                const mockErrorMessage = `Please enter a valid ${fieldType} (example: ${example})`;
                (0, globals_1.expect)(errorPattern.test(mockErrorMessage)).toBe(true);
            });
        });
        (0, globals_1.test)('should validate character length limits are consistently applied', () => {
            const standardLimits = {
                title: { min: 1, max: 200 },
                description: { min: 10, max: 1000 },
                shortText: { min: 1, max: 100 },
                longText: { min: 10, max: 2000 },
                name: { min: 1, max: 50 },
                notes: { min: 0, max: 1000 },
                comment: { min: 1, max: 1000 }
            };
            Object.entries(standardLimits).forEach(([fieldType, { min, max }]) => {
                const schema = zod_2.z.string()
                    .min(min, min > 0 ? `${fieldType} is required` : undefined)
                    .max(max, `${fieldType} must be less than ${max} characters`);
                // Test boundary conditions
                if (min > 0) {
                    const tooShort = 'a'.repeat(min - 1);
                    (0, globals_1.expect)(schema.safeParse(tooShort).success).toBe(false);
                }
                const tooLong = 'a'.repeat(max + 1);
                (0, globals_1.expect)(schema.safeParse(tooLong).success).toBe(false);
                const justRight = 'a'.repeat(min > 0 ? min : 1);
                (0, globals_1.expect)(schema.safeParse(justRight).success).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Quebec Compliance Standards', () => {
        (0, globals_1.test)('should validate French character support in name fields', () => {
            const nameSchema = zod_2.z.string().regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'Name can only contain letters, spaces, apostrophes and hyphens');
            const validQuebecNames = [
                'Jean-Baptiste',
                'Marie-Ève',
                'François',
                'Michèle',
                "O'Connor",
                'Lafleur-Dufresne',
                'José-María'
            ];
            const invalidNames = [
                'Jean123',
                'Marie@email',
                'François#',
                'Name$pecial'
            ];
            // Test valid Quebec names
            validQuebecNames.forEach(name => {
                (0, globals_1.expect)(nameSchema.safeParse(name).success).toBe(true);
            });
            // Test invalid names
            invalidNames.forEach(name => {
                const result = nameSchema.safeParse(name);
                (0, globals_1.expect)(result.success).toBe(false);
                if (!result.success) {
                    (0, globals_1.expect)(result.error.issues[0].message).toContain('letters, spaces, apostrophes');
                }
            });
        });
        (0, globals_1.test)('should validate Canadian postal code formats', () => {
            const postalSchema = zod_2.z.string().regex(/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)');
            const validPostalCodes = [
                'H1A 1B1',
                'H1A1B1',
                'K1A 0A6',
                'M5V 3A8',
                'V6B 1A1'
            ];
            const invalidPostalCodes = [
                '12345',
                'H1A 1B',
                'h1a 1b1',
                'H1A-1B1',
                'H1A  1B1'
            ];
            validPostalCodes.forEach(code => {
                (0, globals_1.expect)(postalSchema.safeParse(code).success).toBe(true);
            });
            invalidPostalCodes.forEach(code => {
                const result = postalSchema.safeParse(code);
                (0, globals_1.expect)(result.success).toBe(false);
                if (!result.success) {
                    (0, globals_1.expect)(result.error.issues[0].message).toContain('Canadian format');
                    (0, globals_1.expect)(result.error.issues[0].message).toContain('example:');
                }
            });
        });
    });
    (0, globals_1.describe)('Business Logic Validation', () => {
        (0, globals_1.test)('should validate time range logic with clear error messages', () => {
            const timeRangeSchema = zod_2.z
                .object({
                startTime: zod_2.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Start time must be in HH:MM format (example: 09:00)'),
                endTime: zod_2.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'End time must be in HH:MM format (example: 11:00)'),
            })
                .refine((data) => {
                const [startHour, startMin] = data.startTime.split(':').map(Number);
                const [endHour, endMin] = data.endTime.split(':').map(Number);
                const startMinutes = startHour * 60 + startMin;
                const endMinutes = endHour * 60 + endMin;
                return endMinutes > startMinutes;
            }, {
                message: 'End time must be after start time (example: start at 09:00, end at 11:00)',
                path: ['endTime'],
            });
            // Test valid time range
            const validResult = timeRangeSchema.safeParse({ startTime: '09:00', endTime: '11:00' });
            (0, globals_1.expect)(validResult.success).toBe(true);
            // Test invalid time range
            const invalidResult = timeRangeSchema.safeParse({ startTime: '11:00', endTime: '09:00' });
            (0, globals_1.expect)(invalidResult.success).toBe(false);
            if (!invalidResult.success) {
                const error = invalidResult.error.issues.find(issue => issue.path.includes('endTime'));
                (0, globals_1.expect)(error?.message).toContain('after start time');
                (0, globals_1.expect)(error?.message).toContain('example:');
            }
        });
        (0, globals_1.test)('should validate conditional requirements with helpful messaging', () => {
            const conditionalSchema = zod_2.z
                .object({
                role: zod_2.z.enum(['admin', 'manager', 'tenant', 'resident']),
                email: zod_2.z.string().email('Please enter a valid email address (example: user@domain.com)').optional(),
                firstName: zod_2.z.string().min(1, 'First name is required (example: Jean)').optional(),
                lastName: zod_2.z.string().min(1, 'Last name is required (example: Dupont)').optional(),
            })
                .refine((data) => {
                // For regular roles, email is required
                if (['admin', 'manager'].includes(data.role)) {
                    return !!data.email;
                }
                // For tenant/resident, name is required
                return !!data.firstName && !!data.lastName;
            }, {
                message: 'Email address is required for admin and manager roles. First and last name required for tenant and resident roles.',
                path: ['email'],
            });
            // Test admin with email - should pass
            (0, globals_1.expect)(conditionalSchema.safeParse({
                role: 'admin',
                email: 'admin@domain.com'
            }).success).toBe(true);
            // Test resident with names - should pass
            (0, globals_1.expect)(conditionalSchema.safeParse({
                role: 'resident',
                firstName: 'Jean',
                lastName: 'Dupont'
            }).success).toBe(true);
            // Test admin without email - should fail with helpful message
            const adminResult = conditionalSchema.safeParse({
                role: 'admin'
            });
            (0, globals_1.expect)(adminResult.success).toBe(false);
            if (!adminResult.success) {
                (0, globals_1.expect)(adminResult.error.issues[0].message).toContain('Email address is required for admin');
                (0, globals_1.expect)(adminResult.error.issues[0].message).toContain('First and last name required for tenant');
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,