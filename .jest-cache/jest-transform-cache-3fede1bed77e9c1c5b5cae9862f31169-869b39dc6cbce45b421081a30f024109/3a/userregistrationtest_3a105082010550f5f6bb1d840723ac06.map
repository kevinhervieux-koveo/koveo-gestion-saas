{"file":"/home/runner/workspace/tests/unit/auth/user-registration.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/auth/user-registration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\nimport { registerRoutes } from '../../../server/routes';\nimport { db } from '../../../server/db';\nimport * as schema from '../../../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { createHash } from 'crypto';\n\n/**\n * User Registration Test Suite\n * \n * Tests the complete invitation-based user registration flow including:\n * - Token validation and security\n * - User account creation with proper data\n * - Password hashing and security\n * - Quebec Law 25 privacy consent handling\n * - Organization assignment\n * - Invitation status updates\n */\n\n// Create test app\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('User Registration via Invitation', () => {\n  let app: express.Application;\n  let testInvitation: any;\n  let testOrganization: any;\n  let inviterUser: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Skip database operations in test environment - use mock data instead\n    if (process.env.TEST_TYPE === 'unit') {\n      // Mock test data for unit tests\n      testOrganization = [{ \n        id: 'mock-org-id-123',\n        name: 'Test Registration Org',\n        type: 'syndicate',\n        address: '123 Test St',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1A 1A1',\n      }];\n    } else {\n      // Real database operations for integration tests\n      // Clean up any existing test data\n      await db.delete(schema.invitations).where(eq(schema.invitations.email, 'test-registration@example.com'));\n      await db.delete(schema.users).where(eq(schema.users.email, 'test-registration@example.com'));\n\n      // Create test organization\n      testOrganization = await db\n        .insert(schema.organizations)\n        .values({\n          name: 'Test Registration Org',\n          type: 'syndicate',\n          address: '123 Test St',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H1A 1A1',\n        })\n        .returning();\n    }\n\n    // Create inviter user and invitation\n    if (process.env.TEST_TYPE === 'unit') {\n      // Mock test data for unit tests\n      inviterUser = [{ \n        id: 'mock-inviter-id-123',\n        username: 'testinviter',\n        email: 'inviter@test.com',\n        firstName: 'Test',\n        lastName: 'Inviter',\n        password: 'mock-hashed-password',\n        role: 'admin',\n      }];\n\n      const token = 'test-registration-token-123';\n      const tokenHash = createHash('sha256').update(token).digest('hex');\n      \n      testInvitation = [{ \n        id: 'mock-invitation-id-123',\n        email: 'test-registration@example.com',\n        token,\n        tokenHash,\n        role: 'manager',\n        organizationId: testOrganization[0].id,\n        invitedByUserId: inviterUser[0].id,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n        status: 'pending',\n      }];\n    } else {\n      // Real database operations for integration tests\n      inviterUser = await db\n        .insert(schema.users)\n        .values({\n          username: 'testinviter',\n          email: 'inviter@test.com',\n          firstName: 'Test',\n          lastName: 'Inviter',\n          password: await bcrypt.hash('password123', 12),\n          role: 'admin',\n        })\n        .returning();\n\n      // Create test invitation\n      const token = 'test-registration-token-123';\n      const tokenHash = createHash('sha256').update(token).digest('hex');\n      \n      testInvitation = await db\n        .insert(schema.invitations)\n        .values({\n          email: 'test-registration@example.com',\n          token,\n          tokenHash,\n          role: 'manager',\n          organizationId: testOrganization[0].id,\n          invitedByUserId: inviterUser[0].id,\n          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days\n          status: 'pending',\n        })\n        .returning();\n    }\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    if (process.env.TEST_TYPE === 'unit') {\n      // Skip cleanup for unit tests - no real data was created\n      return;\n    }\n    \n    // Real database cleanup for integration tests\n    await db.delete(schema.invitations).where(eq(schema.invitations.email, 'test-registration@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'test-registration@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'inviter@test.com'));\n    if (testOrganization?.[0]?.id) {\n      await db.delete(schema.userOrganizations).where(eq(schema.userOrganizations.organizationId, testOrganization[0].id));\n      await db.delete(schema.organizations).where(eq(schema.organizations.id, testOrganization[0].id));\n    }\n  });\n\n  describe('Invitation Token Validation', () => {\n    it('should validate a valid invitation token', async () => {\n      const response = await request(app)\n        .get(`/api/invitations/validate/test-registration-token-123`)\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        valid: true,\n        invitation: {\n          id: testInvitation[0].id,\n          email: 'test-registration@example.com',\n          role: 'manager',\n          organizationId: testOrganization[0].id,\n          status: 'pending',\n        },\n      });\n    });\n\n    it('should reject invalid invitation token', async () => {\n      const response = await request(app)\n        .get('/api/invitations/validate/invalid-token')\n        .expect(404);\n\n      expect(response.body).toMatchObject({\n        valid: false,\n        message: 'Invitation not found or invalid',\n        code: 'INVITATION_NOT_FOUND',\n      });\n    });\n\n    it('should reject expired invitation token', async () => {\n      // Update invitation to be expired\n      await db\n        .update(schema.invitations)\n        .set({ expiresAt: new Date(Date.now() - 1000) })\n        .where(eq(schema.invitations.id, testInvitation[0].id));\n\n      const response = await request(app)\n        .get('/api/invitations/validate/test-registration-token-123')\n        .expect(410);\n\n      expect(response.body).toMatchObject({\n        valid: false,\n        message: 'Invitation has expired',\n        code: 'INVITATION_EXPIRED',\n      });\n    });\n\n    it('should reject already accepted invitation', async () => {\n      // Mark invitation as accepted\n      await db\n        .update(schema.invitations)\n        .set({ status: 'accepted', acceptedAt: new Date() })\n        .where(eq(schema.invitations.id, testInvitation[0].id));\n\n      const response = await request(app)\n        .get('/api/invitations/validate/test-registration-token-123')\n        .expect(410);\n\n      expect(response.body).toMatchObject({\n        valid: false,\n        message: 'Invitation has already been used',\n        code: 'INVITATION_USED',\n      });\n    });\n  });\n\n  describe('User Account Creation', () => {\n    it('should create new user account with valid invitation', async () => {\n      const registrationData = {\n        firstName: 'John',\n        lastName: 'Doe',\n        password: 'SecurePass123!',\n        phone: '+1-514-555-0123',\n        language: 'en',\n        dataCollectionConsent: true,\n        marketingConsent: false,\n        analyticsConsent: true,\n        thirdPartyConsent: false,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(registrationData)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        message: 'Account created successfully',\n        user: {\n          id: expect.any(String),\n          username: 'test-registration',\n          email: 'test-registration@example.com',\n          firstName: 'John',\n          lastName: 'Doe',\n          role: 'manager',\n          language: 'en',\n          phone: '+1-514-555-0123',\n        },\n      });\n\n      // Verify user was created in database\n      const createdUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.email, 'test-registration@example.com'))\n        .limit(1);\n\n      expect(createdUser).toHaveLength(1);\n      expect(createdUser[0]).toMatchObject({\n        email: 'test-registration@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'manager',\n        language: 'en',\n        isActive: true,\n      });\n\n      // Verify password is properly hashed\n      const isValidPassword = await bcrypt.compare('SecurePass123!', createdUser[0].password);\n      expect(isValidPassword).toBe(true);\n    });\n\n    it('should require all mandatory fields for registration', async () => {\n      const incompleteData = {\n        firstName: 'John',\n        // Missing lastName, password\n        language: 'en',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(incompleteData)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        message: 'First name, last name, and password are required',\n        code: 'MISSING_REQUIRED_FIELDS',\n      });\n    });\n\n    it('should require Quebec Law 25 privacy consents', async () => {\n      const dataWithoutConsent = {\n        firstName: 'John',\n        lastName: 'Doe',\n        password: 'SecurePass123!',\n        language: 'en',\n        // Missing dataCollectionConsent and acknowledgedRights\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(dataWithoutConsent)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        message: 'Data collection consent and privacy rights acknowledgment are required',\n        code: 'CONSENT_REQUIRED',\n      });\n    });\n\n    it('should generate unique username from email', async () => {\n      const registrationData = {\n        firstName: 'Jane',\n        lastName: 'Smith',\n        password: 'AnotherPass456!',\n        language: 'fr',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(registrationData)\n        .expect(201);\n\n      expect(response.body.user.username).toBe('test-registration');\n      expect(response.body.user.email).toBe('test-registration@example.com');\n    });\n\n    it('should update invitation status to accepted', async () => {\n      const registrationData = {\n        firstName: 'Test',\n        lastName: 'User',\n        password: 'TestPass789!',\n        language: 'en',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(registrationData)\n        .expect(201);\n\n      // Verify invitation is marked as accepted\n      const updatedInvitation = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.id, testInvitation[0].id))\n        .limit(1);\n\n      expect(updatedInvitation[0]).toMatchObject({\n        status: 'accepted',\n        acceptedAt: expect.any(Date),\n        acceptedBy: expect.any(String),\n      });\n    });\n\n    it('should prevent registration with already used invitation', async () => {\n      // First registration\n      const firstRegistration = {\n        firstName: 'First',\n        lastName: 'User',\n        password: 'FirstPass123!',\n        language: 'en',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(firstRegistration)\n        .expect(201);\n\n      // Second registration attempt with same token\n      const secondRegistration = {\n        firstName: 'Second',\n        lastName: 'User',\n        password: 'SecondPass456!',\n        language: 'fr',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(secondRegistration)\n        .expect(410);\n\n      expect(response.body).toMatchObject({\n        message: 'Invitation has already been used',\n        code: 'INVITATION_USED',\n      });\n    });\n\n    it('should prevent registration if user already exists with email', async () => {\n      // Create existing user with same email\n      await db.insert(schema.users).values({\n        username: 'existinguser',\n        email: 'test-registration@example.com',\n        firstName: 'Existing',\n        lastName: 'User',\n        password: await bcrypt.hash('ExistingPass123!', 12),\n        role: 'tenant',\n      });\n\n      const registrationData = {\n        firstName: 'New',\n        lastName: 'User',\n        password: 'NewPass123!',\n        language: 'en',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(registrationData)\n        .expect(409);\n\n      expect(response.body).toMatchObject({\n        message: 'User already exists with this email',\n        code: 'USER_EXISTS',\n      });\n\n      // Clean up\n      await db.delete(schema.users).where(eq(schema.users.email, 'test-registration@example.com'));\n    });\n  });\n\n  describe('Password Security', () => {\n    it('should properly hash passwords using bcrypt', async () => {\n      const registrationData = {\n        firstName: 'Security',\n        lastName: 'Test',\n        password: 'SecurityTest123!',\n        language: 'en',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(registrationData)\n        .expect(201);\n\n      const createdUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.email, 'test-registration@example.com'))\n        .limit(1);\n\n      // Password should be hashed, not plain text\n      expect(createdUser[0].password).not.toBe('SecurityTest123!');\n      expect(createdUser[0].password.startsWith('$2b$')).toBe(true);\n\n      // Should be able to verify password\n      const isValid = await bcrypt.compare('SecurityTest123!', createdUser[0].password);\n      expect(isValid).toBe(true);\n    });\n  });\n\n  describe('Quebec Law 25 Compliance', () => {\n    it('should store all privacy consent preferences', async () => {\n      const registrationData = {\n        firstName: 'Privacy',\n        lastName: 'Test',\n        password: 'PrivacyTest123!',\n        language: 'fr',\n        dataCollectionConsent: true,\n        marketingConsent: false,\n        analyticsConsent: true,\n        thirdPartyConsent: false,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(registrationData)\n        .expect(201);\n\n      expect(response.body.user).toMatchObject({\n        language: 'fr',\n        dataCollectionConsent: true,\n        marketingConsent: false,\n        analyticsConsent: true,\n        thirdPartyConsent: false,\n        acknowledgedRights: true,\n      });\n    });\n\n    it('should support both French and English languages', async () => {\n      const frenchRegistration = {\n        firstName: 'François',\n        lastName: 'Dubois',\n        password: 'MotDePasse123!',\n        language: 'fr',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(frenchRegistration)\n        .expect(201);\n\n      expect(response.body.user.language).toBe('fr');\n      expect(response.body.user.firstName).toBe('François');\n    });\n  });\n\n  describe('Organization Assignment', () => {\n    it('should assign user to invitation organization', async () => {\n      const registrationData = {\n        firstName: 'Organization',\n        lastName: 'Test',\n        password: 'OrgTest123!',\n        language: 'en',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/test-registration-token-123')\n        .send(registrationData)\n        .expect(201);\n\n      // Verify user is assigned to correct organization\n      const userOrgs = await db\n        .select()\n        .from(schema.userOrganizations)\n        .where(eq(schema.userOrganizations.userId, response.body.user.id));\n\n      expect(userOrgs).toHaveLength(1);\n      expect(userOrgs[0].organizationId).toBe(testOrganization[0].id);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database errors gracefully', async () => {\n      // Create invitation with invalid organization ID to trigger error\n      const invalidInvitation = await db\n        .insert(schema.invitations)\n        .values({\n          id: 'inv-invalid-org',\n          email: 'invalid-org@example.com',\n          token: 'invalid-org-token',\n          tokenHash: createHash('sha256').update('invalid-org-token').digest('hex'),\n          role: 'manager',\n          organizationId: 'non-existent-org',\n          invitedByUserId: inviterUser[0].id,\n          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n          status: 'pending',\n        })\n        .returning();\n\n      const registrationData = {\n        firstName: 'Error',\n        lastName: 'Test',\n        password: 'ErrorTest123!',\n        language: 'en',\n        dataCollectionConsent: true,\n        acknowledgedRights: true,\n      };\n\n      const response = await request(app)\n        .post('/api/invitations/accept/invalid-org-token')\n        .send(registrationData)\n        .expect(500);\n\n      expect(response.body).toMatchObject({\n        message: 'Internal server error during account creation',\n        code: 'INVITATION_ACCEPT_ERROR',\n      });\n\n      // Clean up\n      await db.delete(schema.invitations).where(eq(schema.invitations.id, invalidInvitation[0].id));\n    });\n  });\n});"],"version":3}