f8641738b5cc36915b311b4759cb9f64
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const label_1 = require("@/components/ui/label");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const withHierarchicalSelection_1 = require("@/components/hoc/withHierarchicalSelection");
function MyBuilding({ buildingId, showBackButton, backButtonLabel, onBack }) {
    const [, navigate] = (0, wouter_1.useLocation)();
    const { t } = (0, use_language_1.useLanguage)();
    // Fetch user's accessible buildings and find the specific one
    const { data: userBuildings, isLoading: isLoadingBuilding, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/users/me/buildings'],
        queryFn: async () => {
            const response = await fetch('/api/users/me/buildings');
            if (!response.ok) {
                throw new Error('Failed to fetch buildings');
            }
            return response.json();
        },
        enabled: !!buildingId,
    });
    // Find the specific building from user's accessible buildings
    const buildingData = react_1.default.useMemo(() => {
        if (!userBuildings || !buildingId)
            return null;
        const building = userBuildings.find((building) => building.id === buildingId);
        if (!building)
            return null;
        // Map API response to our interface
        return {
            ...building,
            province: building.state || building.province,
            postalCode: building.postal_code || building.postalCode,
        };
    }, [userBuildings, buildingId]);
    const handleViewDocuments = (targetBuildingId) => {
        navigate(`/residents/building/documents?buildingId=${targetBuildingId}`);
    };
    if (isLoadingBuilding) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'My Building', subtitle: 'View building information and documents' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-4xl mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-8', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground mt-2', children: "Loading building information..." })] }) }) })] }));
    }
    if (!buildingData) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'My Building', subtitle: 'View building information and documents' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-4xl mx-auto', children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-16 h-16 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: "Building Not Found" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: "Unable to load building information." })] }) }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'My Building', subtitle: 'View building information and documents' }), showBackButton && onBack && ((0, jsx_runtime_1.jsx)("div", { className: 'border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center px-6 py-4', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: onBack, className: 'flex items-center gap-2', "data-testid": 'button-back-to-building', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4' }), backButtonLabel] }) }) })), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-4xl mx-auto space-y-6', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'hover:shadow-lg transition-shadow', children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-5 h-5' }), buildingData.name] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-6', children: [(0, jsx_runtime_1.jsx)("div", { className: 'space-y-3', children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('address') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start gap-2 mt-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MapPin, { className: 'w-4 h-4 mt-0.5 text-muted-foreground' }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: buildingData.address }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-700', children: [buildingData.city, ", ", buildingData.province || buildingData.state, " ", buildingData.postalCode || buildingData.postal_code] })] })] })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [buildingData.buildingType && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('buildingType') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700 capitalize', children: buildingData.buildingType })] })), buildingData.yearBuilt && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('yearBuilt') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mt-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-4 h-4 text-muted-foreground' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: buildingData.yearBuilt })] })] })), buildingData.managementCompany && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('managementCompany') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: buildingData.managementCompany })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [buildingData.totalFloors && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('totalFloors') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mt-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-4 h-4 text-muted-foreground' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: buildingData.totalFloors })] })] })), (buildingData.parkingSpaces || buildingData.storageSpaces) && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [buildingData.parkingSpaces && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('parking') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mt-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Car, { className: 'w-4 h-4 text-muted-foreground' }), (0, jsx_runtime_1.jsxs)("span", { className: 'text-sm text-gray-700', children: [buildingData.parkingSpaces, " ", t('spaces')] })] })] })), buildingData.storageSpaces && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('storage') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mt-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Package, { className: 'w-4 h-4 text-muted-foreground' }), (0, jsx_runtime_1.jsxs)("span", { className: 'text-sm text-gray-700', children: [buildingData.storageSpaces, " ", t('units')] })] })] }))] }))] })] }), buildingData.amenities && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('amenities') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex flex-wrap gap-2 mt-1', children: (() => {
                                                    try {
                                                        const amenities = typeof buildingData.amenities === 'string'
                                                            ? JSON.parse(buildingData.amenities)
                                                            : buildingData.amenities;
                                                        return Array.isArray(amenities)
                                                            ? amenities.map((amenity, index) => ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: amenity }, index)))
                                                            : null;
                                                    }
                                                    catch (_e) {
                                                        return ((0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-muted-foreground', children: t('unableToDisplayAmenities') }));
                                                    }
                                                })() })] })), (0, jsx_runtime_1.jsx)("div", { className: 'pt-4 border-t', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => handleViewDocuments(buildingData.id), className: 'w-full justify-start', "data-testid": 'button-view-documents', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 mr-2' }), t('viewDocumentsButton')] }) })] })] }) }) })] }));
}
// Export the component wrapped with hierarchical selection
exports.default = (0, withHierarchicalSelection_1.withHierarchicalSelection)(MyBuilding, {
    hierarchy: ['organization', 'building'],
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,