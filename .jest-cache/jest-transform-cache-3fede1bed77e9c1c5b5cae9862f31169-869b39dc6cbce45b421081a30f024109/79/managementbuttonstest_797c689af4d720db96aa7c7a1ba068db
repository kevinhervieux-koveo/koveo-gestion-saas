0d2a749b6efb1fe2fe193319ac56e8b4
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../../client/src/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
    queryClient: new (jest.requireActual('@tanstack/react-query').QueryClient)(),
}));
// Mock authentication context
jest.mock('../../../client/src/contexts/AuthContext', () => ({
    useAuth: () => ({
        user: { id: '1', email: 'test@test.com', role: 'admin' },
        isAuthenticated: true,
        login: jest.fn(),
        logout: jest.fn(),
    }),
}));
jest.mock('../../../client/src/hooks/use-toast', () => ({
    useToast: () => ({
        toast: mockToast,
    }),
}));
/**
 * Management Button Functionality Tests
 * Tests all management buttons (approve, reject, delete, edit, block, etc.)
 */
const react_1 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_2 = __importDefault(require("react"));
// Mock API requests
const mockApiRequest = jest.fn();
// Mock toast notifications
const mockToast = jest.fn();
describe('Management Buttons Functionality', () => {
    let queryClient;
    let user;
    beforeEach(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: { retry: false },
                mutations: { retry: false },
            },
        });
        user = user_event_1.default.setup();
        jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ ok: true, json: () => Promise.resolve({}) });
    });
    const renderWithProvider = (component) => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    describe('Demand Management Buttons', () => {
        it('should handle demand approval', async () => {
            const demandId = 'test-demand-id';
            const MockDemandCard = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": `button-approve-${demandId}`, onClick: () => mockApiRequest(`/api/demands/${demandId}/approve`, { method: 'PATCH' }), children: "Approve" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-reject-${demandId}`, onClick: () => mockApiRequest(`/api/demands/${demandId}/reject`, { method: 'PATCH' }), children: "Reject" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-view-${demandId}`, onClick: () => mockApiRequest(`/api/demands/${demandId}`, { method: 'GET' }), children: "View" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-edit-${demandId}`, onClick: () => mockApiRequest(`/api/demands/${demandId}`, { method: 'GET' }), children: "Edit" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockDemandCard, {}));
            const approveButton = react_1.screen.getByTestId(`button-approve-${demandId}`);
            const rejectButton = react_1.screen.getByTestId(`button-reject-${demandId}`);
            const viewButton = react_1.screen.getByTestId(`button-view-${demandId}`);
            const editButton = react_1.screen.getByTestId(`button-edit-${demandId}`);
            expect(approveButton).toBeInTheDocument();
            expect(rejectButton).toBeInTheDocument();
            expect(viewButton).toBeInTheDocument();
            expect(editButton).toBeInTheDocument();
            await user.click(approveButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/demands/${demandId}/approve`, { method: 'PATCH' });
            await user.click(rejectButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/demands/${demandId}/reject`, { method: 'PATCH' });
            await user.click(viewButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/demands/${demandId}`, { method: 'GET' });
            await user.click(editButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/demands/${demandId}`, { method: 'GET' });
        });
    });
    describe('User Management Buttons', () => {
        it('should handle user blocking and unblocking', async () => {
            const userId = 'test-user-id';
            const MockUserManagement = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": `button-block-${userId}`, onClick: () => mockApiRequest(`/api/users/${userId}/block`, { method: 'POST' }), children: "Block User" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-unblock-${userId}`, onClick: () => mockApiRequest(`/api/users/${userId}/unblock`, { method: 'POST' }), children: "Unblock User" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-time-limit-${userId}`, onClick: () => mockApiRequest(`/api/users/${userId}/time-limits`, { method: 'POST' }), children: "Set Time Limit" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockUserManagement, {}));
            const blockButton = react_1.screen.getByTestId(`button-block-${userId}`);
            const unblockButton = react_1.screen.getByTestId(`button-unblock-${userId}`);
            const timeLimitButton = react_1.screen.getByTestId(`button-time-limit-${userId}`);
            expect(blockButton).toBeInTheDocument();
            expect(unblockButton).toBeInTheDocument();
            expect(timeLimitButton).toBeInTheDocument();
            await user.click(blockButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/users/${userId}/block`, { method: 'POST' });
            await user.click(unblockButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/users/${userId}/unblock`, { method: 'POST' });
            await user.click(timeLimitButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/users/${userId}/time-limits`, { method: 'POST' });
        });
    });
    describe('Delete and Confirmation Buttons', () => {
        it('should handle delete confirmation flow', async () => {
            const bugId = 'test-bug-id';
            const invitationId = 'test-invitation-id';
            const MockDeleteFlow = () => {
                const [showConfirmation, setShowConfirmation] = react_2.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": `button-delete-${bugId}`, onClick: () => setShowConfirmation(true), children: "Delete Bug" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-delete-invitation-${invitationId}`, onClick: () => setShowConfirmation(true), children: "Delete Invitation" }), showConfirmation && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-delete-invitation", onClick: () => setShowConfirmation(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-confirm-delete-invitation", onClick: () => {
                                        mockApiRequest('/api/delete', { method: 'DELETE' });
                                        setShowConfirmation(false);
                                    }, children: "Confirm Delete" })] }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockDeleteFlow, {}));
            const deleteBugButton = react_1.screen.getByTestId(`button-delete-${bugId}`);
            const deleteInvitationButton = react_1.screen.getByTestId(`button-delete-invitation-${invitationId}`);
            expect(deleteBugButton).toBeInTheDocument();
            expect(deleteInvitationButton).toBeInTheDocument();
            // Test delete confirmation flow
            await user.click(deleteInvitationButton);
            await (0, react_1.waitFor)(() => {
                const cancelButton = react_1.screen.getByTestId('button-cancel-delete-invitation');
                const confirmButton = react_1.screen.getByTestId('button-confirm-delete-invitation');
                expect(cancelButton).toBeInTheDocument();
                expect(confirmButton).toBeInTheDocument();
            });
            const confirmButton = react_1.screen.getByTestId('button-confirm-delete-invitation');
            await user.click(confirmButton);
            expect(mockApiRequest).toHaveBeenCalledWith('/api/delete', { method: 'DELETE' });
        });
    });
    describe('Edit and Cancel Buttons', () => {
        it('should handle edit and cancel actions', async () => {
            const MockEditForm = () => {
                const [isEditing, setIsEditing] = react_2.default.useState(false);
                return ((0, jsx_runtime_1.jsx)("div", { children: !isEditing ? ((0, jsx_runtime_1.jsx)("button", { "data-testid": "button-edit-space", onClick: () => setIsEditing(true), children: "Edit Space" })) : ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-edit", onClick: () => setIsEditing(false), children: "Cancel Edit" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-save-edit", onClick: () => {
                                    mockApiRequest('/api/save', { method: 'PATCH' });
                                    setIsEditing(false);
                                }, children: "Save Edit" })] })) }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockEditForm, {}));
            const editButton = react_1.screen.getByTestId('button-edit-space');
            expect(editButton).toBeInTheDocument();
            await user.click(editButton);
            await (0, react_1.waitFor)(() => {
                const cancelButton = react_1.screen.getByTestId('button-cancel-edit');
                const saveButton = react_1.screen.getByTestId('button-save-edit');
                expect(cancelButton).toBeInTheDocument();
                expect(saveButton).toBeInTheDocument();
            });
            const saveButton = react_1.screen.getByTestId('button-save-edit');
            await user.click(saveButton);
            expect(mockApiRequest).toHaveBeenCalledWith('/api/save', { method: 'PATCH' });
        });
    });
    describe('Upvote and Menu Buttons', () => {
        it('should handle upvote and menu actions', async () => {
            const requestId = 'test-request-id';
            const MockFeatureRequest = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": `button-upvote-${requestId}`, onClick: () => mockApiRequest(`/api/feature-requests/${requestId}/upvote`, { method: 'POST' }), children: "Upvote" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": `button-menu-${requestId}`, onClick: () => console.log('Menu opened'), children: "Menu" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockFeatureRequest, {}));
            const upvoteButton = react_1.screen.getByTestId(`button-upvote-${requestId}`);
            const menuButton = react_1.screen.getByTestId(`button-menu-${requestId}`);
            expect(upvoteButton).toBeInTheDocument();
            expect(menuButton).toBeInTheDocument();
            await user.click(upvoteButton);
            expect(mockApiRequest).toHaveBeenCalledWith(`/api/feature-requests/${requestId}/upvote`, { method: 'POST' });
            await user.click(menuButton);
            // Menu button functionality would be tested in integration tests
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,