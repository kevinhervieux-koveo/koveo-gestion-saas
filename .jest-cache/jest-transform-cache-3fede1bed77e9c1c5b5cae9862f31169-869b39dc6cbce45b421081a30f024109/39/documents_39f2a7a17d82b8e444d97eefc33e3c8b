2828a7ea7b133981a77b2dd24811d7bc
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDocumentRoutes = registerDocumentRoutes;
const auth_1 = require("../auth");
const storage_1 = require("../storage");
const schema_1 = require("../../shared/schema");
const zod_1 = require("zod");
const multer_1 = __importDefault(require("multer"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const crypto_1 = __importDefault(require("crypto"));
const uuid_1 = require("uuid");
const drizzle_orm_1 = require("drizzle-orm");
const db_1 = require("../db");
// Enhanced security configuration for file uploads
const SECURITY_CONFIG = {
    MAX_FILE_SIZE: 25 * 1024 * 1024, // Reduced to 25MB for better security
    MAX_FILES_PER_USER_PER_HOUR: 10, // Rate limiting
    ALLOWED_MIME_TYPES: [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'text/plain',
        'image/jpeg',
        'image/png',
        'image/gif'
    ],
    ALLOWED_EXTENSIONS: ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt', 'jpg', 'jpeg', 'png', 'gif']
};
// Rate limiting storage for uploads
const uploadRateTracker = new Map();
// Enhanced file validation function
function validateFile(file) {
    if (!file)
        return { isValid: false, error: 'No file provided' };
    // Check file size
    if (file.size > SECURITY_CONFIG.MAX_FILE_SIZE) {
        return { isValid: false, error: `File size exceeds ${SECURITY_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB limit` };
    }
    // Check MIME type
    if (!SECURITY_CONFIG.ALLOWED_MIME_TYPES.includes(file.mimetype)) {
        return { isValid: false, error: `File type ${file.mimetype} not allowed` };
    }
    // Check file extension
    const extension = path_1.default.extname(file.originalname).toLowerCase().substring(1);
    if (!SECURITY_CONFIG.ALLOWED_EXTENSIONS.includes(extension)) {
        return { isValid: false, error: `File extension .${extension} not allowed` };
    }
    // Check filename for path traversal attempts
    if (file.originalname.includes('..') || file.originalname.includes('/') || file.originalname.includes('\\')) {
        return { isValid: false, error: 'Invalid filename detected' };
    }
    return { isValid: true };
}
// Rate limiting function
function checkUploadRateLimit(userId) {
    const now = Date.now();
    const userUploads = uploadRateTracker.get(userId) || [];
    // Clean old uploads (older than 1 hour)
    const recentUploads = userUploads.filter((timestamp) => now - timestamp < 60 * 60 * 1000);
    if (recentUploads.length >= SECURITY_CONFIG.MAX_FILES_PER_USER_PER_HOUR) {
        return { allowed: false, error: 'Upload rate limit exceeded. Please try again later.' };
    }
    // Update tracker
    recentUploads.push(now);
    uploadRateTracker.set(userId, recentUploads);
    return { allowed: true };
}
// Configure multer for file uploads with enhanced security
const upload = (0, multer_1.default)({
    dest: '/tmp/uploads/',
    limits: {
        fileSize: SECURITY_CONFIG.MAX_FILE_SIZE,
        files: 1, // Only allow one file at a time
    },
    fileFilter: (req, file, cb) => {
        const validation = validateFile(file);
        if (validation.isValid) {
            cb(null, true);
        }
        else {
            cb(new Error(validation.error));
        }
    },
});
// DocumentRecord categories for validation - synchronized with frontend
const DOCUMENT_CATEGORIES = [
    'bylaw',
    'financial',
    'maintenance',
    'legal',
    'meeting_minutes',
    'insurance',
    'contracts',
    'permits',
    'inspection',
    'lease',
    'correspondence',
    'utilities',
    'other',
];
// Enhanced schemas for different document types
const createDocumentSchema = schema_1.insertDocumentSchema.extend({
    category: zod_1.z.enum(DOCUMENT_CATEGORIES),
    title: zod_1.z.string().min(1).max(255),
    description: zod_1.z.string().optional(),
    isVisibleToTenants: zod_1.z.boolean().default(false),
});
const createBuildingDocumentSchema = schema_1.insertDocumentSchema.extend({
    type: zod_1.z.enum(DOCUMENT_CATEGORIES),
    title: zod_1.z.string().min(1).max(255).optional(),
    description: zod_1.z.string().optional(),
});
const createResidentDocumentSchema = schema_1.insertDocumentSchema.extend({
    type: zod_1.z.enum(DOCUMENT_CATEGORIES),
    title: zod_1.z.string().min(1).max(255).optional(),
    description: zod_1.z.string().optional(),
});
// Schema for unified document upload
const uploadDocumentRecordSchema = zod_1.z.object({
    name: zod_1.z.string().min(1).max(255),
    description: zod_1.z.string().optional(),
    documentType: zod_1.z.enum(DOCUMENT_CATEGORIES),
    isVisibleToTenants: zod_1.z.boolean().default(false),
    residenceId: zod_1.z.string().uuid().optional(),
    buildingId: zod_1.z.string().uuid().optional(),
    attachedToType: zod_1.z.string().optional(),
    attachedToId: zod_1.z.string().optional(),
});
/**
 *
 * @param app
 */
/**
 * RegisterDocumentRecordRoutes function.
 * @param app
 * @returns Function result.
 */
function registerDocumentRoutes(app) {
    console.log(`[${new Date().toISOString()}] 🔧 Registering document routes...`);
    // Security audit logging
    const auditLog = [];
    // Error tracking for production debugging
    const errorLog = [];
    // Security audit logging function
    const logSecurityEvent = (action, user, success, documentId, details) => {
        const event = {
            timestamp: new Date().toISOString(),
            action,
            userId: user.id,
            userRole: user.role,
            documentId,
            success,
            details
        };
        auditLog.push(event);
        if (auditLog.length > 1000)
            auditLog.shift(); // Keep last 1000 events
        console.log(`[SECURITY AUDIT] ${action}:`, event);
        return event;
    };
    // Database connection testing functions
    const testDatabaseConnection = async () => {
        try {
            const result = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT 1 as test`);
            return {
                success: true,
                result: result.rows[0],
                url_truncated: process.env.DATABASE_URL?.substring(0, 50) + '...'
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message,
                url_truncated: process.env.DATABASE_URL?.substring(0, 50) + '...'
            };
        }
    };
    const testSampleQuery = async () => {
        try {
            // Test the exact query that's failing
            const result = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT COUNT(*) as document_count 
        FROM documents 
        LIMIT 1
      `);
            return {
                success: true,
                document_count: result.rows[0]?.document_count || 0
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message,
                stack: error.stack?.substring(0, 200) + '...'
            };
        }
    };
    const checkEnumValues = async () => {
        try {
            // Check current enum values in production
            const result = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT enumlabel 
        FROM pg_enum 
        WHERE enumtypid = (
          SELECT oid 
          FROM pg_type 
          WHERE typname = 'user_role'
        )
        ORDER BY enumsortorder
      `);
            return {
                success: true,
                production_enum_values: result.rows.map(row => row.enumlabel)
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    };
    const checkUserOrganizationLinks = async () => {
        try {
            // Check user-organization relationships
            const userCount = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT COUNT(*) as total FROM users WHERE is_active = true`);
            const orgCount = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT COUNT(*) as total FROM organizations WHERE is_active = true`);
            const linkCount = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT COUNT(*) as total FROM user_organizations WHERE is_active = true`);
            // Check users without organization links
            const orphanUsers = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT u.id, u.email, u.role 
        FROM users u 
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true
        WHERE u.is_active = true AND uo.user_id IS NULL
        LIMIT 10
      `);
            // Check current test user specifically (from error logs)
            const testUser = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT u.email, u.role, uo.organization_id, o.name as org_name
        FROM users u
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true  
        LEFT JOIN organizations o ON uo.organization_id = o.id
        WHERE u.id = '222f5a0d-6bc6-4f28-9f4d-32c133eed333'
      `);
            return {
                success: true,
                stats: {
                    total_users: userCount.rows[0]?.total || 0,
                    total_organizations: orgCount.rows[0]?.total || 0,
                    total_links: linkCount.rows[0]?.total || 0,
                    orphan_user_count: orphanUsers.rows.length
                },
                orphan_users: orphanUsers.rows,
                test_user_status: testUser.rows[0] || null
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    };
    // Enum cleanup endpoint for safe schema migration  
    app.post('/api/documents/cleanup-enum', async (req, res) => {
        try {
            // First, verify no users have the 'owner' role
            const userCheck = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT COUNT(*) as owner_count 
        FROM users 
        WHERE role = 'owner'
      `);
            const ownerCount = Number(userCheck.rows[0]?.owner_count) || 0;
            if (ownerCount > 0) {
                return res.status(400).json({
                    error: 'Cannot remove owner role - users still assigned to it',
                    owner_count: ownerCount
                });
            }
            // Safe to remove - no users have 'owner' role
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TYPE user_role DROP VALUE IF EXISTS 'owner'
      `);
            res.json({
                message: 'Successfully removed unused owner role',
                safe_to_push_schema: true,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error during enum cleanup:', error);
            res.status(500).json({
                error: 'Enum cleanup failed',
                message: error.message,
                suggestion: 'Try running npm run db:push --force instead'
            });
        }
    });
    // Fix user-organization relationships
    app.post('/api/documents/fix-user-links', async (req, res) => {
        try {
            // Step 1: Find users without organization links
            const orphanUsers = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT u.id, u.email, u.role 
        FROM users u 
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true
        WHERE u.is_active = true AND uo.user_id IS NULL
      `);
            if (orphanUsers.rows.length === 0) {
                return res.json({
                    message: 'All users already have organization links',
                    action_taken: 'none',
                    timestamp: new Date().toISOString()
                });
            }
            // Step 2: Get the first available organization (or create default one)
            let defaultOrg = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT id, name FROM organizations WHERE is_active = true LIMIT 1
      `);
            let organizationId;
            let organizationName;
            if (defaultOrg.rows.length === 0) {
                // Create a default organization if none exists
                organizationId = crypto_1.default.randomUUID();
                organizationName = 'Default Organization';
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          INSERT INTO organizations (id, name, type, address, phone, email, is_active, created_at, updated_at)
          VALUES (${organizationId}, ${organizationName}, 'condominium', '123 Main St', '514-555-0100', 'admin@koveo.ca', true, NOW(), NOW())
        `);
            }
            else {
                organizationId = defaultOrg.rows[0].id;
                organizationName = defaultOrg.rows[0].name;
            }
            // Step 3: Link all orphan users to the default organization
            const linkPromises = orphanUsers.rows.map(user => {
                const linkId = crypto_1.default.randomUUID();
                return db_1.db.execute((0, drizzle_orm_1.sql) `
          INSERT INTO user_organizations (id, user_id, organization_id, role, is_active, created_at, updated_at)
          VALUES (${linkId}, ${user.id}, ${organizationId}, ${user.role}, true, NOW(), NOW())
        `);
            });
            await Promise.all(linkPromises);
            res.json({
                message: 'Successfully linked users to organizations',
                users_linked: orphanUsers.rows.length,
                organization_id: organizationId,
                organization_name: organizationName,
                linked_users: orphanUsers.rows.map(u => ({ id: u.id, email: u.email, role: u.role })),
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error fixing user-organization links:', error);
            res.status(500).json({
                error: 'Failed to fix user-organization links',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Safe enum migration endpoint
    app.post('/api/documents/fix-enum-migration', async (req, res) => {
        try {
            // Step 1: Check current enum values and usage
            const enumCheck = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT enumlabel, enumsortorder 
        FROM pg_enum 
        WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'user_role')
        ORDER BY enumsortorder
      `);
            const currentEnumValues = enumCheck.rows.map(row => row.enumlabel);
            // Step 2: Check if we have any data that would prevent migration
            const userRoleUsage = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT role, COUNT(*) as count 
        FROM users 
        GROUP BY role
      `);
            // Step 3: Since enum reordering is the issue, let's use a different approach
            // We'll create a new enum with correct order, migrate data, then swap
            const targetEnumValues = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];
            // Check if current order matches target
            const orderMatches = JSON.stringify(currentEnumValues) === JSON.stringify(targetEnumValues);
            if (orderMatches) {
                return res.json({
                    message: 'Enum values already in correct order',
                    current_values: currentEnumValues,
                    target_values: targetEnumValues,
                    migration_needed: false
                });
            }
            // Step 4: Create new enum with correct order
            await db_1.db.execute((0, drizzle_orm_1.sql) `CREATE TYPE user_role_new AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')`);
            // Step 5: Update all tables to use new enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE users 
        ALTER COLUMN role TYPE user_role_new 
        USING role::text::user_role_new
      `);
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE user_organizations 
        ALTER COLUMN organization_role TYPE user_role_new 
        USING organization_role::text::user_role_new
      `);
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE role_permissions 
        ALTER COLUMN role TYPE user_role_new 
        USING role::text::user_role_new
      `);
            // Step 6: Drop old enum and rename new one
            await db_1.db.execute((0, drizzle_orm_1.sql) `DROP TYPE user_role`);
            await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TYPE user_role_new RENAME TO user_role`);
            res.json({
                message: 'Successfully migrated user_role enum',
                old_values: currentEnumValues,
                new_values: targetEnumValues,
                user_role_usage: userRoleUsage.rows,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error during enum migration:', error);
            res.status(500).json({
                error: 'Enum migration failed',
                message: error.message,
                suggestion: 'This is a complex migration - may need manual intervention',
                timestamp: new Date().toISOString()
            });
        }
    });
    // Fix invitations table enum dependency
    app.post('/api/documents/fix-invitations-dependency', async (req, res) => {
        try {
            // Step 1: Check current invitations table structure
            const invitationsSchema = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT column_name, data_type, column_default
        FROM information_schema.columns 
        WHERE table_name = 'invitations' AND column_name = 'role'
      `);
            // Step 2: Remove default value from invitations.role column temporarily
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE invitations 
        ALTER COLUMN role DROP DEFAULT
      `);
            // Step 3: Check what other tables might have enum dependencies
            const enumDependencies = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT 
          t.table_name,
          c.column_name,
          c.column_default
        FROM information_schema.tables t
        JOIN information_schema.columns c ON t.table_name = c.table_name
        WHERE c.data_type = 'USER-DEFINED' 
        AND c.udt_name = 'user_role'
        AND c.column_default IS NOT NULL
      `);
            res.json({
                message: 'Successfully removed invitations table enum dependency',
                removed_defaults: invitationsSchema.rows,
                remaining_dependencies: enumDependencies.rows,
                next_step: 'Run npm run db:push now, then call /api/documents/restore-invitations-default',
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error fixing invitations dependency:', error);
            res.status(500).json({
                error: 'Failed to fix invitations dependency',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Restore invitations default value after schema sync
    app.post('/api/documents/restore-invitations-default', async (req, res) => {
        try {
            // Restore default value to 'tenant' for invitations.role column
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE invitations 
        ALTER COLUMN role SET DEFAULT 'tenant'
      `);
            // Verify the change
            const verification = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT column_name, column_default
        FROM information_schema.columns 
        WHERE table_name = 'invitations' AND column_name = 'role'
      `);
            res.json({
                message: 'Successfully restored invitations role default to tenant',
                current_default: verification.rows[0]?.column_default,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error restoring invitations default:', error);
            res.status(500).json({
                error: 'Failed to restore invitations default',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Migrate owner users to admin before enum cleanup
    app.post('/api/documents/migrate-owner-to-admin', async (req, res) => {
        try {
            // Step 1: Check how many users have 'owner' role
            const ownerUsersCheck = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT id, email, first_name, last_name 
        FROM users 
        WHERE role = 'owner'
      `);
            const ownerCount = ownerUsersCheck.rows.length;
            if (ownerCount === 0) {
                return res.json({
                    message: 'No owner users found - migration not needed',
                    owner_count: 0,
                    timestamp: new Date().toISOString()
                });
            }
            // Step 2: Update all owner users to admin
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        UPDATE users 
        SET role = 'admin' 
        WHERE role = 'owner'
      `);
            // Step 3: Update user_organizations table if it exists
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          UPDATE user_organizations 
          SET organization_role = 'admin' 
          WHERE organization_role = 'owner'
        `);
            }
            catch (e) {
                // Table might not exist, that's OK
            }
            // Step 4: Remove 'owner' from enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TYPE user_role RENAME TO user_role_old
      `);
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        CREATE TYPE user_role AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')
      `);
            // Step 5: Update all tables to use new enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE users 
        ALTER COLUMN role TYPE user_role 
        USING role::text::user_role
      `);
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role TYPE user_role 
          USING organization_role::text::user_role
        `);
            }
            catch (e) {
                // Table might not exist
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE role_permissions 
          ALTER COLUMN role TYPE user_role 
          USING role::text::user_role
        `);
            }
            catch (e) {
                // Table might not exist
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE invitations 
          ALTER COLUMN role TYPE user_role 
          USING role::text::user_role
        `);
            }
            catch (e) {
                // Column might not exist
            }
            // Step 6: Drop old enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `DROP TYPE user_role_old`);
            res.json({
                message: 'Successfully migrated owner users to admin',
                migrated_users: ownerUsersCheck.rows,
                owner_count: ownerCount,
                new_enum_values: ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'],
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error migrating owner users to admin:', error);
            res.status(500).json({
                error: 'Owner to admin migration failed',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Remove all remaining enum dependencies
    app.post('/api/documents/remove-all-enum-dependencies', async (req, res) => {
        try {
            const results = [];
            // Remove default from users.role
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE users 
          ALTER COLUMN role DROP DEFAULT
        `);
                results.push('users.role default removed');
            }
            catch (e) {
                results.push(`users.role: ${e.message}`);
            }
            // Remove default from user_organizations.organization_role
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role DROP DEFAULT
        `);
                results.push('user_organizations.organization_role default removed');
            }
            catch (e) {
                results.push(`user_organizations.organization_role: ${e.message}`);
            }
            // Check remaining dependencies
            const remainingDeps = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT 
          t.table_name,
          c.column_name,
          c.column_default
        FROM information_schema.tables t
        JOIN information_schema.columns c ON t.table_name = c.table_name
        WHERE c.data_type = 'USER-DEFINED' 
        AND c.udt_name = 'user_role'
        AND c.column_default IS NOT NULL
      `);
            res.json({
                message: 'Removed all enum dependencies',
                operations: results,
                remaining_dependencies: remainingDeps.rows,
                next_step: 'Run npm run db:push now',
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error removing enum dependencies:', error);
            res.status(500).json({
                error: 'Failed to remove enum dependencies',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Restore all default values after schema sync
    app.post('/api/documents/restore-all-defaults', async (req, res) => {
        try {
            const results = [];
            // Restore users.role default
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE users 
          ALTER COLUMN role SET DEFAULT 'tenant'
        `);
                results.push('users.role default restored to tenant');
            }
            catch (e) {
                results.push(`users.role restore failed: ${e.message}`);
            }
            // Restore user_organizations.organization_role default
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role SET DEFAULT 'tenant'
        `);
                results.push('user_organizations.organization_role default restored to tenant');
            }
            catch (e) {
                results.push(`user_organizations.organization_role restore failed: ${e.message}`);
            }
            // Restore invitations.role default
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE invitations 
          ALTER COLUMN role SET DEFAULT 'tenant'
        `);
                results.push('invitations.role default restored to tenant');
            }
            catch (e) {
                results.push(`invitations.role restore failed: ${e.message}`);
            }
            res.json({
                message: 'Restored all default values',
                operations: results,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error restoring defaults:', error);
            res.status(500).json({
                error: 'Failed to restore defaults',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Complete database schema sync endpoint
    app.post('/api/documents/complete-schema-sync', async (req, res) => {
        try {
            const results = [];
            // Step 1: Remove all enum dependencies temporarily
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE users ALTER COLUMN role DROP DEFAULT`);
                results.push('✓ Removed users.role default');
            }
            catch (e) {
                results.push(`users.role: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role DROP DEFAULT`);
                results.push('✓ Removed user_organizations.organization_role default');
            }
            catch (e) {
                results.push(`user_organizations.organization_role: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE invitations ALTER COLUMN role DROP DEFAULT`);
                results.push('✓ Removed invitations.role default');
            }
            catch (e) {
                results.push(`invitations.role: ${e.message}`);
            }
            // Step 2: Migrate any 'owner' users to 'admin'
            const ownerUsers = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT count(*) as count FROM users WHERE role = 'owner'`);
            const ownerCount = Number(ownerUsers.rows[0]?.count || 0);
            if (ownerCount > 0) {
                await db_1.db.execute((0, drizzle_orm_1.sql) `UPDATE users SET role = 'admin' WHERE role = 'owner'`);
                results.push(`✓ Migrated ${ownerCount} owner users to admin`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `UPDATE user_organizations SET organization_role = 'admin' WHERE organization_role = 'owner'`);
                results.push('✓ Updated user_organizations owner roles to admin');
            }
            catch (e) {
                results.push(`user_organizations owner update: ${e.message}`);
            }
            // Step 3: Fix the enum to match development schema
            try {
                // Rename current enum
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TYPE user_role RENAME TO user_role_old`);
                // Create new enum with correct values
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          CREATE TYPE user_role AS ENUM (
            'admin', 'manager', 'tenant', 'resident', 
            'demo_manager', 'demo_tenant', 'demo_resident'
          )
        `);
                // Update all tables
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE users ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role TYPE user_role USING organization_role::text::user_role`);
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE invitations ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                try {
                    await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE role_permissions ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                    results.push('✓ Updated role_permissions enum');
                }
                catch (e) {
                    results.push(`role_permissions: ${e.message}`);
                }
                // Drop old enum
                await db_1.db.execute((0, drizzle_orm_1.sql) `DROP TYPE user_role_old`);
                results.push('✓ Successfully updated user_role enum');
            }
            catch (e) {
                results.push(`Enum update failed: ${e.message}`);
            }
            // Step 4: Restore default values
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE users ALTER COLUMN role SET DEFAULT 'tenant'`);
                results.push('✓ Restored users.role default to tenant');
            }
            catch (e) {
                results.push(`users.role default restore: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role SET DEFAULT 'tenant'`);
                results.push('✓ Restored user_organizations.organization_role default to tenant');
            }
            catch (e) {
                results.push(`user_organizations.organization_role default restore: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE invitations ALTER COLUMN role SET DEFAULT 'tenant'`);
                results.push('✓ Restored invitations.role default to tenant');
            }
            catch (e) {
                results.push(`invitations.role default restore: ${e.message}`);
            }
            // Step 5: Add missing columns that exist in production but not development
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE invitation_audit_log 
          ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW()
        `);
                results.push('✓ Added created_at to invitation_audit_log');
            }
            catch (e) {
                results.push(`invitation_audit_log.created_at: ${e.message}`);
            }
            res.json({
                message: 'Database schema synchronization complete',
                operations: results,
                timestamp: new Date().toISOString(),
                success: true
            });
        }
        catch (error) {
            console.error('❌ Error during schema synchronization:', error);
            res.status(500).json({
                error: 'Schema synchronization failed',
                message: error.message,
                timestamp: new Date().toISOString(),
                success: false
            });
        }
    });
    // Enhanced diagnostic endpoint with database schema check
    app.get('/api/documents/diagnostic', async (req, res) => {
        try {
            // Check if documents table exists
            let tableExists = false;
            let tableSchema = null;
            try {
                const result = await db_1.db.execute((0, drizzle_orm_1.sql) `
          SELECT column_name, data_type, is_nullable, column_default 
          FROM information_schema.columns 
          WHERE table_name = 'documents' 
          ORDER BY ordinal_position
        `);
                tableExists = result.rows.length > 0;
                tableSchema = result.rows;
            }
            catch (schemaError) {
                console.error('Schema check error:', schemaError);
            }
            res.json({
                message: 'Document API diagnostic',
                gcs_disabled: true,
                session_fix_applied: true,
                timestamp: new Date().toISOString(),
                environment: process.env.NODE_ENV,
                version: 'v2.1-gcs-disabled',
                recent_errors: errorLog.slice(-5), // Last 5 errors
                storage_status: {
                    exists: !!storage_1.storage,
                    type: storage_1.storage?.constructor?.name,
                    methods: Object.getOwnPropertyNames(Object.getPrototypeOf(storage_1.storage || {}))
                },
                database_status: {
                    documents_table_exists: tableExists,
                    documents_table_schema: tableSchema,
                    schema_columns_count: tableSchema?.length || 0,
                    connection_test: await testDatabaseConnection(),
                    sample_query_test: await testSampleQuery(),
                    enum_check: await checkEnumValues(),
                    user_organization_links: await checkUserOrganizationLinks()
                }
            });
        }
        catch (error) {
            console.error('❌ Error running diagnostic:', error);
            res.status(500).json({
                error: 'Diagnostic failed',
                message: error.message
            });
        }
    });
    // Error logging helper
    const logError = (endpoint, error, user) => {
        const errorEntry = {
            timestamp: new Date().toISOString(),
            endpoint,
            error: {
                message: error.message,
                stack: error.stack,
                name: error.name,
                details: error.toString()
            },
            user: user ? { id: user.id, role: user.role } : null
        };
        errorLog.push(errorEntry);
        if (errorLog.length > 50)
            errorLog.shift(); // Keep only last 50 errors
        console.error(`[${errorEntry.timestamp}] 🚨 ERROR in ${endpoint}:`, errorEntry);
        return errorEntry;
    };
    // Get all documents for the authenticated user
    app.get('/api/documents', auth_1.requireAuth, async (req, res) => {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] 📄 GET /api/documents - Starting request`, {
            userId: req.user?.id,
            userRole: req.user?.role,
            query: req.query,
            url: req.url,
            method: req.method
        });
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            // Production debugging: Log the request details
            console.log(`[${timestamp}] 🔍 User data extracted:`, {
                userId,
                userRole,
                hasValidUser: !!user
            });
            // Critical: Check if storage object exists and is properly initialized
            console.log(`[${timestamp}] 💾 Storage check:`, {
                storageExists: !!storage_1.storage,
                storageType: storage_1.storage?.constructor?.name,
                storageMethod: typeof storage_1.storage?.getDocuments
            });
            const documentType = req.query.type; // 'building', 'resident', or undefined for both
            const specificResidenceId = req.query.residenceId; // Filter by specific residence
            const specificBuildingId = req.query.buildingId; // Filter by specific building
            // Get user's organization and residences for filtering
            console.log(`[${timestamp}] 🔍 Fetching user data from storage...`);
            console.log(`[${timestamp}] 📋 Calling getUserOrganizations(${userId})...`);
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            console.log(`[${timestamp}] ✅ getUserOrganizations SUCCESS - Found ${organizations.length} organizations`);
            console.log(`[${timestamp}] 📋 Calling getUserResidences(${userId})...`);
            const userResidences = await storage_1.storage.getUserResidences(userId);
            console.log(`[${timestamp}] ✅ getUserResidences SUCCESS - Found ${userResidences.length} user residences`);
            console.log(`[${timestamp}] 📋 Calling getBuildings()...`);
            const buildings = await storage_1.storage.getBuildings();
            console.log(`[${timestamp}] ✅ getBuildings SUCCESS - Found ${buildings.length} buildings`);
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            console.log(`[${timestamp}] 🏢 Organization ID determined:`, organizationId);
            // If specific residence ID provided, filter to only that residence
            let residenceIds;
            if (specificResidenceId) {
                // Admin users have access to all residences
                if (userRole === 'admin' || userRole === 'manager') {
                    residenceIds = [specificResidenceId];
                }
                else {
                    // Verify user has access to this specific residence
                    // Handle both simple {residenceId: string} and complex nested structures
                    const hasAccess = userResidences.some((ur) => {
                        // Handle simple structure
                        if (ur.residenceId === specificResidenceId) {
                            return true;
                        }
                        // Handle complex nested structure
                        if (ur.userResidence?.residenceId === specificResidenceId) {
                            return true;
                        }
                        // Handle residence nested structure
                        if (ur.residence?.id === specificResidenceId) {
                            return true;
                        }
                        return false;
                    });
                    if (!hasAccess) {
                        return res.status(403).json({ message: 'Access denied to this residence' });
                    }
                    residenceIds = [specificResidenceId];
                }
            }
            else {
                // Extract residence IDs from both simple and complex structures
                residenceIds = userResidences
                    .map((ur) => {
                    // Handle simple structure
                    if (ur.residenceId) {
                        return ur.residenceId;
                    }
                    // Handle complex nested structure
                    if (ur.userResidence?.residenceId) {
                        return ur.userResidence.residenceId;
                    }
                    // Handle residence nested structure
                    if (ur.residence?.id) {
                        return ur.residence.id;
                    }
                    return null;
                })
                    .filter((id) => id !== null);
            }
            const buildingIds = buildings.map((b) => b.id);
            const allDocumentRecords = [];
            // Use unified documents system
            const filters = {
                userId,
                userRole,
            };
            // Filter by specific residence if provided
            if (specificResidenceId) {
                filters.residenceId = specificResidenceId;
            }
            // Filter by specific building if provided
            if (specificBuildingId) {
                filters.buildingId = specificBuildingId;
            }
            else if (documentType === 'building') {
                // For building documents, search in buildings user has access to
                if (buildingIds.length > 0) {
                    // Get all documents for buildings, will filter later
                }
            }
            else if (documentType === 'resident') {
                // For resident documents, search in residences user has access to
                if (residenceIds.length > 0) {
                    // Get all documents for residences, will filter later
                }
            }
            // CRITICAL DEBUG POINT: This is where 500 errors likely occur
            console.log(`[${timestamp}] 🎯 CRITICAL: About to call storage.getDocuments with filters:`, filters);
            console.log(`[${timestamp}] 🔧 Storage instance:`, storage_1.storage.constructor.name);
            console.log(`[${timestamp}] 📊 Filters being passed:`, JSON.stringify(filters, null, 2));
            const documents = await storage_1.storage.getDocuments(filters);
            // CRITICAL: Log successful database response
            console.log(`[${timestamp}] ✅ CRITICAL: storage.getDocuments SUCCESS - returned ${documents?.length || 0} documents`);
            console.log(`[${timestamp}] 📋 Document preview:`, documents?.slice(0, 3)?.map(d => ({
                id: d.id,
                name: d.name,
                uploadedById: d.uploadedById,
                buildingId: d.buildingId,
                residenceId: d.residenceId
            })));
            // Debug logging
            console.log('🔍 [DOCUMENTS API DEBUG]:', {
                filters,
                documentsFound: documents?.length || 0,
                specificResidenceId,
                userRole,
                userId,
            });
            // Apply role-based filtering with tenant visibility rules
            const filteredDocumentRecords = documents.filter((doc) => {
                // If filtering by specific building, only show documents for that building
                if (specificBuildingId) {
                    if (doc.buildingId !== specificBuildingId) {
                        return false;
                    }
                }
                // Admin can see all documents
                if (userRole === 'admin') {
                    return true;
                }
                // Manager can see all documents in their organization
                if (userRole === 'manager' && organizationId) {
                    if (doc.buildingId && buildingIds.includes(doc.buildingId)) {
                        return true;
                    }
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                }
                // Resident access rules
                if (userRole === 'resident') {
                    // Residents can see documents in their residence
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                    // Residents can see building documents related to their residences
                    if (doc.buildingId) {
                        // Check if any of user's residences belong to this building
                        const userBuildingIds = userResidences
                            .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                            .filter(Boolean);
                        return userBuildingIds.includes(doc.buildingId);
                    }
                }
                // Tenant access rules - more restrictive
                if (userRole === 'tenant') {
                    // Tenants can only see documents marked as visible to tenants
                    if (!doc.isVisibleToTenants) {
                        return false;
                    }
                    // Tenants can see visible documents in their residence
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                    // Tenants can see visible building documents related to their residences
                    if (doc.buildingId) {
                        // Check if any of user's residences belong to this building
                        const userBuildingIds = userResidences
                            .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                            .filter(Boolean);
                        return userBuildingIds.includes(doc.buildingId);
                    }
                }
                return false;
            });
            // Add document type indicators for frontend compatibility
            const enhancedDocumentRecords = filteredDocumentRecords.map((doc) => ({
                ...doc,
                documentCategory: doc.buildingId ? 'building' : 'resident',
                entityType: doc.buildingId ? 'building' : 'residence',
                entityId: doc.buildingId || doc.residenceId,
                uploadDate: doc.createdAt, // For backward compatibility
            }));
            allDocumentRecords.push(...enhancedDocumentRecords);
            // Sort by upload date, most recent first
            allDocumentRecords.sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime());
            const response = {
                documents: allDocumentRecords,
                total: allDocumentRecords.length,
                buildingCount: allDocumentRecords.filter((d) => d.documentCategory === 'building').length,
                residentCount: allDocumentRecords.filter((d) => d.documentCategory === 'resident').length,
                legacyCount: allDocumentRecords.filter((d) => d.documentCategory === 'legacy').length,
            };
            // Log successful document access
            logSecurityEvent('DOCUMENT_LIST_ACCESS', user, true, undefined, {
                documentsReturned: allDocumentRecords.length,
                filters: { documentType, specificResidenceId, specificBuildingId }
            });
            res.json(response);
        }
        catch (_error) {
            const errorEntry = logError('GET /api/documents', _error, req.user);
            res.status(500).json({
                message: 'Failed to fetch documents',
                error_id: errorEntry.timestamp,
                debug_info: process.env.NODE_ENV === 'development' ? _error.message : undefined
            });
        }
    });
    // Get a specific document by ID
    app.get('/api/documents/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type; // Optional type hint
            // Get user's organization and residences for filtering
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const residences = await storage_1.storage.getUserResidences(userId);
            const buildings = await storage_1.storage.getBuildings();
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            const residenceIds = residences.map((ur) => ur.residenceId);
            const buildingIds = buildings.map((b) => b.id);
            let document = null;
            // Try to find the document in the appropriate table(s)
            const hasNewDocumentRecordMethods = 'getBuildingDocumentRecord' in storage_1.storage;
            if (hasNewDocumentRecordMethods) {
                if (!documentType || documentType === 'building') {
                    try {
                        document = await storage_1.storage.getBuildingDocumentRecord(documentId, userId, userRole, organizationId, buildingIds);
                        if (document) {
                            document.documentCategory = 'building';
                            document.entityType = 'building';
                            document.entityId = document.buildingId;
                        }
                    }
                    catch (e) {
                        console.warn('⚠️ Error fetching building document:', e);
                    }
                }
                if (!document && (!documentType || documentType === 'resident')) {
                    try {
                        document = await storage_1.storage.getResidentDocumentRecord(documentId, userId, userRole, organizationId, residenceIds);
                        if (document) {
                            document.documentCategory = 'resident';
                            document.entityType = 'residence';
                            document.entityId = document.residenceId;
                        }
                    }
                    catch (e) {
                        console.warn('⚠️ Error fetching resident document:', e);
                    }
                }
            }
            // Fallback to legacy documents if not found and no type specified
            if (!document && !documentType) {
                try {
                    document = await storage_1.storage.getDocument(documentId);
                    if (document) {
                        document.documentCategory = 'legacy';
                        document.entityType = 'legacy';
                        document.entityId = null;
                    }
                }
                catch (e) {
                    console.warn('⚠️ Error fetching legacy document:', e);
                }
            }
            if (!document) {
                return res.status(404).json({ message: 'DocumentRecord not found or access denied' });
            }
            res.json(document);
        }
        catch (error) {
            console.error('❌ Error fetching document:', error);
            res.status(500).json({ message: 'Failed to fetch document' });
        }
    });
    // Create a new document (supports both file upload and text-only documents)
    app.post('/api/documents', auth_1.requireAuth, upload.single('file'), async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const { documentType, buildingId, residenceId, textContent, ...otherData } = req.body;
            // Enhanced rate limiting check
            const rateLimitCheck = checkUploadRateLimit(userId);
            if (!rateLimitCheck.allowed) {
                logSecurityEvent('UPLOAD_RATE_LIMIT_EXCEEDED', user, false, undefined, { error: rateLimitCheck.error });
                return res.status(429).json({ message: rateLimitCheck.error });
            }
            // Validate permissions - only admin, manager, and resident can create documents
            if (!['admin', 'manager', 'resident'].includes(userRole)) {
                logSecurityEvent('UNAUTHORIZED_UPLOAD_ATTEMPT', user, false, undefined, { requiredRoles: ['admin', 'manager', 'resident'] });
                return res.status(403).json({ message: 'Insufficient permissions to create documents' });
            }
            // Check if this is a text-only document or file upload
            const isTextDocumentRecord = !req.file && textContent;
            const isFileDocumentRecord = !!req.file;
            if (!isTextDocumentRecord && !isFileDocumentRecord) {
                return res.status(400).json({ message: 'Either a file or text content is required' });
            }
            // For text documents, create unified document directly
            if (isTextDocumentRecord) {
                // Create text document without file storage
                const documentData = {
                    name: otherData.name || 'Untitled DocumentRecord',
                    description: otherData.description || textContent.substring(0, 200) + (textContent.length > 200 ? '...' : ''),
                    documentType: documentType || 'other',
                    filePath: `text-documents/${userId}/${(0, uuid_1.v4)()}.txt`, // Virtual path for text documents
                    isVisibleToTenants: otherData.isVisibleToTenants === 'true' || otherData.isVisibleToTenants === true,
                    residenceId: residenceId || undefined,
                    buildingId: buildingId || undefined,
                    uploadedById: userId,
                };
                // Permission checks
                if (buildingId && userRole === 'manager') {
                    const organizations = await storage_1.storage.getUserOrganizations(userId);
                    const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
                    const building = await storage_1.storage.getBuilding(buildingId);
                    if (!building || building.organizationId !== organizationId) {
                        return res.status(403).json({ message: 'Cannot assign document to building outside your organization' });
                    }
                }
                if (residenceId && userRole === 'resident') {
                    const residences = await storage_1.storage.getUserResidences(userId);
                    const residenceIds = residences.map((ur) => ur.residenceId);
                    if (!residenceIds.includes(residenceId)) {
                        return res.status(403).json({ message: 'Cannot assign document to residence you do not own' });
                    }
                }
                // Save text content to local file system for text documents
                let fileName;
                try {
                    const textFilePath = path_1.default.join(process.cwd(), 'uploads', 'text-documents', userId);
                    if (!fs_1.default.existsSync(textFilePath)) {
                        fs_1.default.mkdirSync(textFilePath, { recursive: true });
                    }
                    fileName = `${(0, uuid_1.v4)()}.txt`;
                    const fullPath = path_1.default.join(textFilePath, fileName);
                    fs_1.default.writeFileSync(fullPath, textContent, 'utf8');
                }
                catch (fsError) {
                    console.error('Error saving text document to filesystem:', fsError);
                    return res.status(500).json({ message: 'Failed to save text document' });
                }
                // Update file path to actual local path
                documentData.filePath = `text-documents/${userId}/${fileName}`;
                // Create document record in database
                const document = await storage_1.storage.createDocument(documentData);
                return res.status(201).json({
                    message: 'Text document created successfully',
                    document: {
                        ...document,
                        documentCategory: buildingId ? 'building' : 'resident',
                        entityType: buildingId ? 'building' : 'residence',
                        entityId: buildingId || residenceId,
                    },
                });
            }
            // Handle file uploads (existing logic)
            // Determine document type based on buildingId/residenceId if not explicitly provided
            let finalDocumentRecordType = documentType;
            if (!finalDocumentRecordType) {
                if (buildingId && !residenceId) {
                    finalDocumentRecordType = 'building';
                }
                else if (residenceId && !buildingId) {
                    finalDocumentRecordType = 'resident';
                }
                else if (buildingId && residenceId) {
                    return res.status(400).json({
                        message: 'Please specify documentType when providing both buildingId and residenceId',
                    });
                }
                else {
                    return res.status(400).json({
                        message: 'Must provide either buildingId (for building documents) or residenceId (for resident documents)',
                    });
                }
            }
            if (finalDocumentRecordType === 'building') {
                // Validate and create building document
                if (!buildingId) {
                    return res.status(400).json({ message: 'buildingId is required for building documents' });
                }
                const validatedData = createBuildingDocumentSchema.parse({
                    ...otherData,
                    buildingId,
                    uploadedById: userId,
                    filePath: req.file ? req.file.path : undefined,
                    // fileName is handled via name field
                });
                // Permission checks for building documents
                if (userRole === 'manager') {
                    const organizations = await storage_1.storage.getUserOrganizations(userId);
                    const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
                    const building = await storage_1.storage.getBuilding(buildingId);
                    if (!building || building.organizationId !== organizationId) {
                        return res
                            .status(403)
                            .json({ message: 'Cannot assign document to building outside your organization' });
                    }
                }
                if (userRole === 'resident') {
                    const residences = await storage_1.storage.getUserResidences(userId);
                    const hasResidenceInBuilding = await Promise.all(residences.map(async (ur) => {
                        const residence = await storage_1.storage.getResidence(ur.residenceId);
                        return residence && residence.buildingId === buildingId;
                    }));
                    if (!hasResidenceInBuilding.some(Boolean)) {
                        return res
                            .status(403)
                            .json({ message: 'Cannot assign document to building where you have no residence' });
                    }
                }
                // Create unified document instead of separate building document
                const unifiedDocument = {
                    name: validatedData.name || validatedData.title || 'Untitled',
                    description: validatedData.description,
                    documentType: validatedData.type,
                    filePath: validatedData.filePath || `temp-path-${Date.now()}`,
                    isVisibleToTenants: validatedData.isVisibleToTenants || false,
                    residenceId: undefined,
                    buildingId: validatedData.buildingId,
                    uploadedById: validatedData.uploadedById,
                };
                const document = await storage_1.storage.createDocument(unifiedDocument);
                // Clean up temporary file after successful upload
                if (req.file?.path) {
                    try {
                        fs_1.default.unlinkSync(req.file.path);
                    }
                    catch (cleanupError) {
                    }
                }
                res.status(201).json({
                    ...document,
                    documentCategory: 'building',
                    entityType: 'building',
                    entityId: document.buildingId,
                });
            }
            else if (finalDocumentRecordType === 'resident') {
                // Validate and create resident document
                if (!residenceId) {
                    return res
                        .status(400)
                        .json({ message: 'residenceId is required for resident documents' });
                }
                const validatedData = createResidentDocumentSchema.parse({
                    ...otherData,
                    residenceId,
                    uploadedById: userId,
                    filePath: req.file ? req.file.path : undefined,
                    // fileName is handled via name field
                });
                // Permission checks for resident documents
                if (userRole === 'manager') {
                    const organizations = await storage_1.storage.getUserOrganizations(userId);
                    const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
                    const residence = await storage_1.storage.getResidence(residenceId);
                    if (residence) {
                        const building = await storage_1.storage.getBuilding(residence.buildingId);
                        if (!building || building.organizationId !== organizationId) {
                            return res
                                .status(403)
                                .json({ message: 'Cannot assign document to residence outside your organization' });
                        }
                    }
                    else {
                        return res.status(404).json({ message: 'Residence not found' });
                    }
                }
                if (userRole === 'resident') {
                    const residences = await storage_1.storage.getUserResidences(userId);
                    const residenceIds = residences.map((ur) => ur.residenceId);
                    if (!residenceIds.includes(residenceId)) {
                        return res
                            .status(403)
                            .json({ message: 'Cannot assign document to residence you do not own' });
                    }
                }
                // Convert to unified document format
                const unifiedDocument = {
                    name: validatedData.name,
                    description: undefined,
                    documentType: validatedData.type,
                    filePath: validatedData.filePath || `temp-path-${Date.now()}`,
                    isVisibleToTenants: validatedData.isVisibleToTenants,
                    residenceId: validatedData.residenceId,
                    buildingId: undefined,
                    uploadedById: validatedData.uploadedById,
                };
                const document = await storage_1.storage.createDocument(unifiedDocument);
                console.log('📝 Created resident document:', document);
                console.log('📝 DocumentRecord ID:', document.id);
                const response = {
                    ...document,
                    documentCategory: 'resident',
                    entityType: 'residence',
                    entityId: document.residenceId,
                };
                console.log('📤 Sending response:', response);
                res.status(201).json(response);
            }
            else {
                return res.status(400).json({
                    message: 'Invalid documentType. Must be either \"building\" or \"resident\"',
                });
            }
        }
        catch (_error) {
            // Clean up temporary file on error
            if (req.file?.path) {
                try {
                    fs_1.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.warn('⚠️ Failed to cleanup temporary file:', cleanupError);
                }
            }
            console.error('❌ Error creating document:', _error);
            if (_error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    message: 'Invalid document data',
                    errors: _error.issues,
                });
            }
            res.status(500).json({ message: 'Failed to create document' });
        }
    });
    // Update a document
    app.put('/api/documents/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type; // Optional type hint
            // Get user's organization for permission checking
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const residences = await storage_1.storage.getUserResidences(userId);
            const buildings = await storage_1.storage.getBuildings();
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            const residenceIds = residences.map((ur) => ur.residenceId);
            const buildingIds = buildings.map((b) => b.id);
            // Use unified documents system for updates
            let updatedDocument = null;
            try {
                const validatedData = createDocumentSchema.partial().parse(req.body);
                updatedDocument = await storage_1.storage.updateDocument(documentId, validatedData);
                if (updatedDocument) {
                    // Add compatibility fields for frontend
                    updatedDocument.documentCategory = updatedDocument.buildingId ? 'building' : 'resident';
                    updatedDocument.entityType = updatedDocument.buildingId ? 'building' : 'residence';
                    updatedDocument.entityId = updatedDocument.buildingId || updatedDocument.residenceId;
                }
            }
            catch (e) {
                console.warn('⚠️ Error in document update:', e);
            }
            if (!updatedDocument) {
                return res.status(404).json({ message: 'DocumentRecord not found or access denied' });
            }
            res.json(updatedDocument);
        }
        catch (_error) {
            console.error('❌ Error updating document:', _error);
            if (_error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    message: 'Invalid document data',
                    errors: _error.issues,
                });
            }
            res.status(500).json({ message: 'Failed to update document' });
        }
    });
    // Security audit endpoint - admin only
    app.get('/api/documents/security/audit-log', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            // Only admins can access audit logs
            if (user.role !== 'admin') {
                logSecurityEvent('UNAUTHORIZED_AUDIT_ACCESS', user, false);
                return res.status(403).json({ message: 'Access denied. Admin privileges required.' });
            }
            // Get last 100 audit events with pagination support
            const limit = Math.min(parseInt(req.query.limit) || 50, 100);
            const offset = parseInt(req.query.offset) || 0;
            const paginatedLogs = auditLog.slice(offset, offset + limit);
            logSecurityEvent('AUDIT_LOG_ACCESS', user, true, undefined, { limit, offset });
            res.json({
                events: paginatedLogs,
                total: auditLog.length,
                limit,
                offset
            });
        }
        catch (error) {
            console.error('Error accessing audit log:', error);
            res.status(500).json({ message: 'Failed to retrieve audit log' });
        }
    });
    // Delete document with enhanced security logging
    app.delete('/api/documents/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type; // Optional type hint
            // Get user's organization for permission checking
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            // Use unified documents system for deletion
            let deleted = false;
            try {
                deleted = await storage_1.storage.deleteDocument(documentId);
            }
            catch (e) {
                console.warn('⚠️ Error deleting document:', e);
            }
            if (!deleted) {
                return res.status(404).json({ message: 'DocumentRecord not found or access denied' });
            }
            res.status(204).send();
        }
        catch (error) {
            console.error('❌ Error in document deletion:', error);
            res.status(500).json({ message: 'Failed to delete document' });
        }
    });
    // Upload endpoint that matches frontend expectation: /api/documents/:id/upload
    app.post('/api/documents/:id/upload', auth_1.requireAuth, upload.single('file'), async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id; // The :id in the URL is the document ID (from frontend)
            const { documentType = 'resident', residenceId, ...otherData } = req.body;
            console.log('📤 Upload request received:', {
                documentId,
                userId,
                userRole,
                hasFile: !!req.file,
                fileInfo: req.file
                    ? {
                        fieldname: req.file.fieldname,
                        originalname: req.file.originalname,
                        encoding: req.file.encoding,
                        mimetype: req.file.mimetype,
                        size: req.file.size,
                        path: req.file.path,
                    }
                    : null,
                bodyKeys: Object.keys(req.body),
                contentType: req.headers['content-type'],
            });
            // Validate permissions - only admin, manager, and resident can create documents
            if (!['admin', 'manager', 'resident'].includes(userRole)) {
                return res.status(403).json({ message: 'Insufficient permissions to create documents' });
            }
            if (!req.file) {
                console.error('❌ No file received in upload request');
                return res.status(400).json({ message: 'File is required for upload' });
            }
            // Get the existing document to determine where to store the file
            const documents = await storage_1.storage.getDocuments({
                userId,
                userRole,
            });
            const existingDocument = documents.find((doc) => doc.id === documentId);
            if (!existingDocument) {
                return res.status(404).json({ message: 'DocumentRecord not found' });
            }
            // File validation passed - file exists and is ready for upload
            // Determine organization ID based on document context
            let organizationId;
            if (existingDocument.buildingId) {
                const building = await storage_1.storage.getBuilding(existingDocument.buildingId);
                if (!building) {
                    return res.status(404).json({ message: 'Building not found' });
                }
                organizationId = building.organizationId;
            }
            else if (existingDocument.residenceId) {
                const residence = await storage_1.storage.getResidence(existingDocument.residenceId);
                if (!residence) {
                    return res.status(404).json({ message: 'Residence not found' });
                }
                const building = await storage_1.storage.getBuilding(residence.buildingId);
                if (!building) {
                    return res.status(404).json({ message: 'Building not found' });
                }
                organizationId = building.organizationId;
            }
            else {
                return res
                    .status(400)
                    .json({ message: 'DocumentRecord must be associated with a building or residence' });
            }
            // Note: File upload to external storage removed
            // Update document with file information
            const updatedDocument = await storage_1.storage.updateDocument(documentId, {
                filePath: `prod_org_${organizationId}/${req.file.originalname}`,
                name: req.file.originalname,
                // Remove mimeType as it's not in schema
            });
            // Clean up temporary file
            if (req.file && req.file.path && fs_1.default.existsSync(req.file.path)) {
                fs_1.default.unlinkSync(req.file.path);
            }
            res.status(200).json({
                document: updatedDocument,
                message: 'File uploaded successfully',
            });
        }
        catch (error) {
            const errorTimestamp = new Date().toISOString();
            console.error(`[${errorTimestamp}] Error type:`, error.constructor.name);
            console.error(`[${errorTimestamp}] Error message:`, error.message);
            console.error(`[${errorTimestamp}] Error stack:`, error.stack);
            // Clean up temporary file on error
            if (req.file && req.file.path && fs_1.default.existsSync(req.file.path)) {
                try {
                    fs_1.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.error(`[${errorTimestamp}] Error cleaning up file:`, cleanupError);
                }
            }
            if (error.name === 'ZodError') {
                return res.status(400).json({
                    message: 'Validation error',
                    errors: error.errors,
                });
            }
            res.status(500).json({ message: 'Failed to upload document' });
        }
    });
    // POST /api/documents/upload - Upload file to GCS and create unified document record
    app.post('/api/documents/upload', auth_1.requireAuth, upload.single('file'), async (req, res) => {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] 📋 POST /api/documents/upload - Starting upload`, {
            hasFile: !!req.file,
            fileName: req.file?.originalname,
            fileSize: req.file?.size,
            body: req.body,
            userId: req.user?.id
        });
        try {
            // Check if file was uploaded
            if (!req.file) {
                return res.status(400).json({ message: 'No file uploaded' });
            }
            // Parse form data
            const formData = {
                name: req.body.name,
                description: req.body.description || '',
                documentType: req.body.documentType || req.body.type, // Handle both field names
                isVisibleToTenants: req.body.isVisibleToTenants === 'true',
                residenceId: req.body.residenceId || undefined,
                buildingId: req.body.buildingId || undefined,
                attachedToType: req.body.attachedToType || undefined,
                attachedToId: req.body.attachedToId || undefined,
            };
            // Production debugging: Log form data before validation
            if (process.env.NODE_ENV === 'production') {
                console.log('[PROD DEBUG] Form data before validation:', formData);
            }
            // Validate form data
            const validatedData = uploadDocumentRecordSchema.parse(formData);
            // DEBUG: Log validated data to see what's being passed
            console.log(`[${timestamp}] 🔍 VALIDATION DEBUG: Form data before validation:`, formData);
            console.log(`[${timestamp}] 🔍 VALIDATION DEBUG: Validated data:`, {
                ...validatedData,
                hasAttachedToType: !!validatedData.attachedToType,
                hasAttachedToId: !!validatedData.attachedToId
            });
            // Production debugging: Log after validation
            if (process.env.NODE_ENV === 'production') {
                console.log('[PROD DEBUG] Form data validation passed:', validatedData);
            }
            // Get user info from auth middleware
            const userId = req.user?.id;
            if (!userId) {
                return res.status(401).json({ message: 'User not authenticated' });
            }
            // GCS DISABLED: Skip bucket configuration (using local storage only)
            console.log('📁 GCS disabled - skipping bucket configuration check');
            // Generate unique GCS path
            const fileExtension = path_1.default.extname(req.file.originalname);
            const baseFileName = path_1.default.basename(req.file.originalname, fileExtension);
            const uniqueFileName = `${(0, uuid_1.v4)()}-${baseFileName}${fileExtension}`;
            let filePath;
            if (validatedData.residenceId) {
                filePath = `residences/${validatedData.residenceId}/${uniqueFileName}`;
            }
            else if (validatedData.buildingId) {
                filePath = `buildings/${validatedData.buildingId}/${uniqueFileName}`;
            }
            else {
                filePath = `general/${uniqueFileName}`;
            }
            // DISABLED GCS: Force local storage for all environments
            console.log('📁 GCS disabled - using local storage for all document operations');
            // Always use local storage (GCS disabled)
            try {
                // Use local storage with robust error handling
                const localStoragePath = path_1.default.join(process.cwd(), 'uploads');
                // Ensure uploads directory exists
                try {
                    if (!fs_1.default.existsSync(localStoragePath)) {
                        fs_1.default.mkdirSync(localStoragePath, { recursive: true });
                        console.log(`📁 Created uploads directory: ${localStoragePath}`);
                    }
                }
                catch (dirError) {
                    console.error('Failed to create uploads directory:', dirError);
                    throw new Error('Cannot create uploads directory - check permissions');
                }
                // Create directory structure for file
                const localFilePath = path_1.default.join(localStoragePath, filePath);
                const localFileDir = path_1.default.dirname(localFilePath);
                try {
                    if (!fs_1.default.existsSync(localFileDir)) {
                        fs_1.default.mkdirSync(localFileDir, { recursive: true });
                        console.log(`📁 Created subdirectory: ${localFileDir}`);
                    }
                }
                catch (subdirError) {
                    console.error('Failed to create file subdirectory:', subdirError);
                    throw new Error('Cannot create file directory - check permissions');
                }
                // Copy uploaded file to local storage
                try {
                    fs_1.default.copyFileSync(req.file.path, localFilePath);
                    console.log(`📁 File saved successfully at ${localFilePath}`);
                }
                catch (copyError) {
                    console.error('Failed to copy file:', copyError);
                    throw new Error('Cannot save file - check disk space and permissions');
                }
            }
            catch (localError) {
                console.error('Local storage error:', localError);
                throw new Error('Failed to save file locally');
            }
            // Create document record in database
            const documentData = {
                name: validatedData.name,
                description: validatedData.description,
                documentType: validatedData.documentType,
                filePath: filePath,
                isVisibleToTenants: validatedData.isVisibleToTenants,
                residenceId: validatedData.residenceId,
                buildingId: validatedData.buildingId,
                uploadedById: userId,
                attachedToType: validatedData.attachedToType,
                attachedToId: validatedData.attachedToId,
            };
            // CRITICAL DEBUG POINT: Database creation
            console.log(`[${timestamp}] 🎯 CRITICAL: About to create document in database:`, {
                name: documentData.name,
                type: documentData.documentType,
                buildingId: documentData.buildingId,
                residenceId: documentData.residenceId,
                uploadedById: documentData.uploadedById,
                attachedToType: documentData.attachedToType,
                attachedToId: documentData.attachedToId
            });
            // Create document record in database  
            const newDocument = await storage_1.storage.createDocument(documentData);
            // CRITICAL: Log successful database creation
            console.log(`[${timestamp}] ✅ CRITICAL: DocumentRecord created successfully:`, {
                id: newDocument?.id,
                name: newDocument?.name,
                filePath: newDocument?.filePath
            });
            // Clean up temporary file
            if (fs_1.default.existsSync(req.file.path)) {
                fs_1.default.unlinkSync(req.file.path);
            }
            // Return success response
            res.status(201).json({
                message: 'DocumentRecord uploaded successfully',
                document: newDocument,
            });
        }
        catch (error) {
            const errorEntry = logError('POST /api/documents/upload', error, req.user);
            // Clean up temporary file on error
            if (req.file && req.file.path && fs_1.default.existsSync(req.file.path)) {
                try {
                    fs_1.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.error('Error cleaning up temporary file:', cleanupError);
                }
            }
            // Handle validation errors
            if (error.name === 'ZodError') {
                return res.status(400).json({
                    message: 'Validation error',
                    errors: error.errors,
                    error_id: errorEntry.timestamp
                });
            }
            // Handle GCS errors
            if (error.message && error.message.includes('Google Cloud Storage')) {
                return res.status(500).json({
                    message: 'File upload failed',
                    error: 'Storage service error',
                    error_id: errorEntry.timestamp
                });
            }
            // Handle unique constraint violations (path conflicts)
            if (error?.message?.includes('unique constraint') || error?.code === '23505') {
                return res.status(409).json({
                    message: 'DocumentRecord path conflict - please try uploading again',
                    error: 'Path already exists',
                    error_id: errorEntry.timestamp
                });
            }
            // Handle database errors
            if (error.message && error.message.includes('database')) {
                return res.status(500).json({
                    message: 'Failed to save document record',
                    error: 'Database error',
                    error_id: errorEntry.timestamp
                });
            }
            // Generic error response
            res.status(500).json({
                message: 'Internal server error',
                error: 'DocumentRecord upload failed',
                error_id: errorEntry.timestamp,
                debug_info: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    });
    // Serve document files
    // Serve document files with full access control
    app.get('/api/documents/:id/file', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const isDownload = req.query.download === 'true';
            // Get user's organization and residences for permission checking
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const residences = await storage_1.storage.getUserResidences(userId);
            const buildings = await storage_1.storage.getBuildings();
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            const residenceIds = residences
                .map((ur) => ur.residenceId || ur.userResidence?.residenceId || ur.residence?.id)
                .filter(Boolean);
            const buildingIds = buildings.map((b) => b.id);
            // Find the document
            const filters = {
                userId,
                userRole,
            };
            const documents = await storage_1.storage.getDocuments(filters);
            const document = documents.find((doc) => doc.id === documentId);
            if (!document) {
                return res.status(404).json({ message: 'DocumentRecord not found' });
            }
            // Check permissions with tenant visibility rules
            let hasAccess = false;
            if (userRole === 'admin') {
                hasAccess = true;
            }
            else if (userRole === 'manager' && organizationId) {
                if (document.buildingId && buildingIds.includes(document.buildingId)) {
                    hasAccess = true;
                }
                if (document.residenceId && residenceIds.includes(document.residenceId)) {
                    hasAccess = true;
                }
            }
            else if (userRole === 'resident') {
                // Residents can access documents in their residence
                if (document.residenceId && residenceIds.includes(document.residenceId)) {
                    hasAccess = true;
                }
                // Residents can access building documents related to their residences
                if (document.buildingId) {
                    const userBuildingIds = residences
                        .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                        .filter(Boolean);
                    if (userBuildingIds.includes(document.buildingId)) {
                        hasAccess = true;
                    }
                }
            }
            else if (userRole === 'tenant') {
                // Tenants can only access documents marked as visible to tenants
                if (!document.isVisibleToTenants) {
                    hasAccess = false;
                }
                else {
                    // Tenants can access visible documents in their residence
                    if (document.residenceId && residenceIds.includes(document.residenceId)) {
                        hasAccess = true;
                    }
                    // Tenants can access visible building documents related to their residences
                    if (document.buildingId) {
                        const userBuildingIds = residences
                            .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                            .filter(Boolean);
                        if (userBuildingIds.includes(document.buildingId)) {
                            hasAccess = true;
                        }
                    }
                }
            }
            if (!hasAccess) {
                return res.status(403).json({ message: 'Access denied' });
            }
            // Serve from local storage
            if (document.filePath) {
                console.log('📁 GCS disabled - serving from local storage');
                try {
                    // Always serve from local storage (GCS disabled)
                    let filePathToServe = document.filePath;
                    // Check if it's an absolute path
                    if (document.filePath.startsWith('/')) {
                        filePathToServe = document.filePath;
                    }
                    // Check if it's a relative file path
                    else if (document.filePath.includes('residences/') ||
                        document.filePath.includes('buildings/') ||
                        document.filePath.includes('text-documents/') ||
                        document.filePath.includes('general/')) {
                        // For development, try to find the file in common upload directories
                        const possiblePaths = [
                            path_1.default.join(process.cwd(), 'uploads', document.filePath), // Main fallback location
                            `/tmp/uploads/${document.filePath}`,
                            `/uploads/${document.filePath}`,
                            `./uploads/${document.filePath}`,
                            path_1.default.join('/tmp', document.filePath),
                        ];
                        // Try to find the file in any of these locations
                        for (const possiblePath of possiblePaths) {
                            if (fs_1.default.existsSync(possiblePath)) {
                                filePathToServe = possiblePath;
                                console.log(`📂 Found file at: ${filePathToServe}`);
                                break;
                            }
                        }
                    }
                    // Check if it's a temp file path
                    else if (document.filePath.includes('tmp')) {
                        filePathToServe = document.filePath;
                    }
                    // Try to serve the file
                    if (fs_1.default.existsSync(filePathToServe)) {
                        // Get the original filename with extension, or construct one from the document name
                        let fileName = document.fileName || document.name || path_1.default.basename(document.filePath);
                        // If the fileName doesn't have an extension, add it from the original file path
                        if (!path_1.default.extname(fileName) && document.filePath) {
                            const originalExt = path_1.default.extname(document.filePath);
                            if (originalExt) {
                                fileName += originalExt;
                            }
                        }
                        if (isDownload) {
                            res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
                        }
                        else {
                            res.setHeader('Content-Disposition', `inline; filename="${fileName}"`);
                        }
                        // Set appropriate content type based on file extension
                        const ext = path_1.default.extname(fileName).toLowerCase();
                        if (ext === '.pdf') {
                            res.setHeader('Content-Type', 'application/pdf');
                        }
                        else if (ext === '.jpg' || ext === '.jpeg') {
                            res.setHeader('Content-Type', 'image/jpeg');
                        }
                        else if (ext === '.png') {
                            res.setHeader('Content-Type', 'image/png');
                        }
                        else if (ext === '.gif') {
                            res.setHeader('Content-Type', 'image/gif');
                        }
                        else if (ext === '.doc' || ext === '.docx') {
                            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
                        }
                        else if (ext === '.txt') {
                            res.setHeader('Content-Type', 'text/plain; charset=utf-8');
                        }
                        else {
                            res.setHeader('Content-Type', 'application/octet-stream');
                        }
                        // Production cache busting for documents
                        if (process.env.NODE_ENV === 'production') {
                            const fileStats = fs_1.default.statSync(filePathToServe);
                            res.set({
                                'Cache-Control': 'no-cache, no-store, must-revalidate',
                                'Pragma': 'no-cache',
                                'Expires': '0',
                                'ETag': `"${document.id}-${fileStats.mtime.getTime()}"`,
                                'Last-Modified': fileStats.mtime.toUTCString(),
                            });
                        }
                        console.log(`📂 Serving file: ${filePathToServe} as ${fileName}`);
                        return res.sendFile(path_1.default.resolve(filePathToServe));
                    }
                    // If file not found locally, log for debugging
                    console.log(`❌ File not found at filePath: ${document.filePath}`);
                    console.log(`❌ Tried filePath: ${filePathToServe}`);
                    return res.status(404).json({ message: 'File not found on server' });
                }
                catch (fileError) {
                    console.error('❌ Error serving file:', fileError);
                    return res.status(500).json({ message: 'Failed to serve file' });
                }
            }
            return res.status(404).json({ message: 'No file associated with this document' });
        }
        catch (error) {
            console.error('❌ Error serving document file:', error);
            res.status(500).json({ message: 'Failed to serve document file' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3BELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyxDQUFDO2dCQUN2RSxDQUFDO2dCQUFDLE9BQU8sU0FBYyxFQUFFLENBQUM7b0JBQ3hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEVBQUUsU0FBUyxDQUFDLENBQUM7b0JBQ2xELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO2dCQUNuRSxDQUFDO1lBQ0gsQ0FBQztZQUVELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsdUNBQXVDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BGLENBQUM7UUFBQyxPQUFPLEtBQVUsRUFBRSxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvYXBpL2RvY3VtZW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEV4cHJlc3MgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IHJlcXVpcmVBdXRoLCByZXF1aXJlUm9sZSB9IGZyb20gJy4uL2F1dGgnO1xuaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gJy4uL3N0b3JhZ2UnO1xuaW1wb3J0IHtcbiAgZG9jdW1lbnRzLFxuICBpbnNlcnREb2N1bWVudFNjaGVtYSxcbiAgdHlwZSBJbnNlcnREb2N1bWVudCxcbiAgdHlwZSBEb2N1bWVudCxcbn0gZnJvbSAnLi4vLi4vc2hhcmVkL3NjaGVtYSc7XG5cbi8vIFVzZSB0aGUgZ2VuZXJhdGVkIERvY3VtZW50IHR5cGUgZnJvbSBzY2hlbWEgdG8gYXZvaWQgRE9NIERvY3VtZW50IGNvbGxpc2lvblxudHlwZSBEb2N1bWVudFJlY29yZCA9IERvY3VtZW50O1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgbXVsdGVyIGZyb20gJ211bHRlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IHNxbCB9IGZyb20gJ2RyaXp6bGUtb3JtJztcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vZGInO1xuXG4vLyBFbmhhbmNlZCBzZWN1cml0eSBjb25maWd1cmF0aW9uIGZvciBmaWxlIHVwbG9hZHNcbmNvbnN0IFNFQ1VSSVRZX0NPTkZJRyA9IHtcbiAgTUFYX0ZJTEVfU0laRTogMjUgKiAxMDI0ICogMTAyNCwgLy8gUmVkdWNlZCB0byAyNU1CIGZvciBiZXR0ZXIgc2VjdXJpdHlcbiAgTUFYX0ZJTEVTX1BFUl9VU0VSX1BFUl9IT1VSOiAxMCwgLy8gUmF0ZSBsaW1pdGluZ1xuICBBTExPV0VEX01JTUVfVFlQRVM6IFtcbiAgICAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAnYXBwbGljYXRpb24vbXN3b3JkJyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnLFxuICAgICdhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwnLFxuICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcsXG4gICAgJ3RleHQvcGxhaW4nLFxuICAgICdpbWFnZS9qcGVnJyxcbiAgICAnaW1hZ2UvcG5nJyxcbiAgICAnaW1hZ2UvZ2lmJ1xuICBdLFxuICBBTExPV0VEX0VYVEVOU0lPTlM6IFsncGRmJywgJ2RvYycsICdkb2N4JywgJ3hscycsICd4bHN4JywgJ3R4dCcsICdqcGcnLCAnanBlZycsICdwbmcnLCAnZ2lmJ11cbn07XG5cbi8vIFJhdGUgbGltaXRpbmcgc3RvcmFnZSBmb3IgdXBsb2Fkc1xuY29uc3QgdXBsb2FkUmF0ZVRyYWNrZXIgPSBuZXcgTWFwKCk7XG5cbi8vIEVuaGFuY2VkIGZpbGUgdmFsaWRhdGlvbiBmdW5jdGlvblxuZnVuY3Rpb24gdmFsaWRhdGVGaWxlKGZpbGU6IGFueSk6IHsgaXNWYWxpZDogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfSB7XG4gIGlmICghZmlsZSkgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9yOiAnTm8gZmlsZSBwcm92aWRlZCcgfTtcbiAgXG4gIC8vIENoZWNrIGZpbGUgc2l6ZVxuICBpZiAoZmlsZS5zaXplID4gU0VDVVJJVFlfQ09ORklHLk1BWF9GSUxFX1NJWkUpIHtcbiAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3I6IGBGaWxlIHNpemUgZXhjZWVkcyAke1NFQ1VSSVRZX0NPTkZJRy5NQVhfRklMRV9TSVpFIC8gKDEwMjQgKiAxMDI0KX1NQiBsaW1pdGAgfTtcbiAgfVxuICBcbiAgLy8gQ2hlY2sgTUlNRSB0eXBlXG4gIGlmICghU0VDVVJJVFlfQ09ORklHLkFMTE9XRURfTUlNRV9UWVBFUy5pbmNsdWRlcyhmaWxlLm1pbWV0eXBlKSkge1xuICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcjogYEZpbGUgdHlwZSAke2ZpbGUubWltZXR5cGV9IG5vdCBhbGxvd2VkYCB9O1xuICB9XG4gIFxuICAvLyBDaGVjayBmaWxlIGV4dGVuc2lvblxuICBjb25zdCBleHRlbnNpb24gPSBwYXRoLmV4dG5hbWUoZmlsZS5vcmlnaW5hbG5hbWUpLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKDEpO1xuICBpZiAoIVNFQ1VSSVRZX0NPTkZJRy5BTExPV0VEX0VYVEVOU0lPTlMuaW5jbHVkZXMoZXh0ZW5zaW9uKSkge1xuICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcjogYEZpbGUgZXh0ZW5zaW9uIC4ke2V4dGVuc2lvbn0gbm90IGFsbG93ZWRgIH07XG4gIH1cbiAgXG4gIC8vIENoZWNrIGZpbGVuYW1lIGZvciBwYXRoIHRyYXZlcnNhbCBhdHRlbXB0c1xuICBpZiAoZmlsZS5vcmlnaW5hbG5hbWUuaW5jbHVkZXMoJy4uJykgfHwgZmlsZS5vcmlnaW5hbG5hbWUuaW5jbHVkZXMoJy8nKSB8fCBmaWxlLm9yaWdpbmFsbmFtZS5pbmNsdWRlcygnXFxcXCcpKSB7XG4gICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIGVycm9yOiAnSW52YWxpZCBmaWxlbmFtZSBkZXRlY3RlZCcgfTtcbiAgfVxuICBcbiAgcmV0dXJuIHsgaXNWYWxpZDogdHJ1ZSB9O1xufVxuXG4vLyBSYXRlIGxpbWl0aW5nIGZ1bmN0aW9uXG5mdW5jdGlvbiBjaGVja1VwbG9hZFJhdGVMaW1pdCh1c2VySWQ6IHN0cmluZyk6IHsgYWxsb3dlZDogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IHVzZXJVcGxvYWRzID0gdXBsb2FkUmF0ZVRyYWNrZXIuZ2V0KHVzZXJJZCkgfHwgW107XG4gIFxuICAvLyBDbGVhbiBvbGQgdXBsb2FkcyAob2xkZXIgdGhhbiAxIGhvdXIpXG4gIGNvbnN0IHJlY2VudFVwbG9hZHMgPSB1c2VyVXBsb2Fkcy5maWx0ZXIoKHRpbWVzdGFtcDogbnVtYmVyKSA9PiBub3cgLSB0aW1lc3RhbXAgPCA2MCAqIDYwICogMTAwMCk7XG4gIFxuICBpZiAocmVjZW50VXBsb2Fkcy5sZW5ndGggPj0gU0VDVVJJVFlfQ09ORklHLk1BWF9GSUxFU19QRVJfVVNFUl9QRVJfSE9VUikge1xuICAgIHJldHVybiB7IGFsbG93ZWQ6IGZhbHNlLCBlcnJvcjogJ1VwbG9hZCByYXRlIGxpbWl0IGV4Y2VlZGVkLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicgfTtcbiAgfVxuICBcbiAgLy8gVXBkYXRlIHRyYWNrZXJcbiAgcmVjZW50VXBsb2Fkcy5wdXNoKG5vdyk7XG4gIHVwbG9hZFJhdGVUcmFja2VyLnNldCh1c2VySWQsIHJlY2VudFVwbG9hZHMpO1xuICBcbiAgcmV0dXJuIHsgYWxsb3dlZDogdHJ1ZSB9O1xufVxuXG4vLyBDb25maWd1cmUgbXVsdGVyIGZvciBmaWxlIHVwbG9hZHMgd2l0aCBlbmhhbmNlZCBzZWN1cml0eVxuY29uc3QgdXBsb2FkID0gbXVsdGVyKHtcbiAgZGVzdDogJy90bXAvdXBsb2Fkcy8nLFxuICBsaW1pdHM6IHtcbiAgICBmaWxlU2l6ZTogU0VDVVJJVFlfQ09ORklHLk1BWF9GSUxFX1NJWkUsXG4gICAgZmlsZXM6IDEsIC8vIE9ubHkgYWxsb3cgb25lIGZpbGUgYXQgYSB0aW1lXG4gIH0sXG4gIGZpbGVGaWx0ZXI6IChyZXEsIGZpbGUsIGNiKSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IHZhbGlkYXRlRmlsZShmaWxlKTtcbiAgICBpZiAodmFsaWRhdGlvbi5pc1ZhbGlkKSB7XG4gICAgICBjYihudWxsLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2IobmV3IEVycm9yKHZhbGlkYXRpb24uZXJyb3IpKTtcbiAgICB9XG4gIH0sXG59KTtcblxuLy8gRG9jdW1lbnRSZWNvcmQgY2F0ZWdvcmllcyBmb3IgdmFsaWRhdGlvbiAtIHN5bmNocm9uaXplZCB3aXRoIGZyb250ZW5kXG5jb25zdCBET0NVTUVOVF9DQVRFR09SSUVTID0gW1xuICAnYnlsYXcnLFxuICAnZmluYW5jaWFsJyxcbiAgJ21haW50ZW5hbmNlJyxcbiAgJ2xlZ2FsJyxcbiAgJ21lZXRpbmdfbWludXRlcycsXG4gICdpbnN1cmFuY2UnLFxuICAnY29udHJhY3RzJyxcbiAgJ3Blcm1pdHMnLFxuICAnaW5zcGVjdGlvbicsXG4gICdsZWFzZScsXG4gICdjb3JyZXNwb25kZW5jZScsXG4gICd1dGlsaXRpZXMnLFxuICAnb3RoZXInLFxuXSBhcyBjb25zdDtcblxuLy8gRW5oYW5jZWQgc2NoZW1hcyBmb3IgZGlmZmVyZW50IGRvY3VtZW50IHR5cGVzXG5jb25zdCBjcmVhdGVEb2N1bWVudFNjaGVtYSA9IGluc2VydERvY3VtZW50U2NoZW1hLmV4dGVuZCh7XG4gIGNhdGVnb3J5OiB6LmVudW0oRE9DVU1FTlRfQ0FURUdPUklFUyksXG4gIHRpdGxlOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjU1KSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgaXNWaXNpYmxlVG9UZW5hbnRzOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbn0pO1xuXG5jb25zdCBjcmVhdGVCdWlsZGluZ0RvY3VtZW50U2NoZW1hID0gaW5zZXJ0RG9jdW1lbnRTY2hlbWEuZXh0ZW5kKHtcbiAgdHlwZTogei5lbnVtKERPQ1VNRU5UX0NBVEVHT1JJRVMpLFxuICB0aXRsZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1NSkub3B0aW9uYWwoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBjcmVhdGVSZXNpZGVudERvY3VtZW50U2NoZW1hID0gaW5zZXJ0RG9jdW1lbnRTY2hlbWEuZXh0ZW5kKHtcbiAgdHlwZTogei5lbnVtKERPQ1VNRU5UX0NBVEVHT1JJRVMpLFxuICB0aXRsZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1NSkub3B0aW9uYWwoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG4vLyBTY2hlbWEgZm9yIHVuaWZpZWQgZG9jdW1lbnQgdXBsb2FkXG5jb25zdCB1cGxvYWREb2N1bWVudFJlY29yZFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgbmFtZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1NSksXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGRvY3VtZW50VHlwZTogei5lbnVtKERPQ1VNRU5UX0NBVEVHT1JJRVMpLFxuICBpc1Zpc2libGVUb1RlbmFudHM6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICByZXNpZGVuY2VJZDogei5zdHJpbmcoKS51dWlkKCkub3B0aW9uYWwoKSxcbiAgYnVpbGRpbmdJZDogei5zdHJpbmcoKS51dWlkKCkub3B0aW9uYWwoKSxcbiAgYXR0YWNoZWRUb1R5cGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgYXR0YWNoZWRUb0lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuLyoqXG4gKlxuICogQHBhcmFtIGFwcFxuICovXG4vKipcbiAqIFJlZ2lzdGVyRG9jdW1lbnRSZWNvcmRSb3V0ZXMgZnVuY3Rpb24uXG4gKiBAcGFyYW0gYXBwXG4gKiBAcmV0dXJucyBGdW5jdGlvbiByZXN1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRvY3VtZW50Um91dGVzKGFwcDogRXhwcmVzcyk6IHZvaWQge1xuICBjb25zb2xlLmxvZyhgWyR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfV0g8J+UpyBSZWdpc3RlcmluZyBkb2N1bWVudCByb3V0ZXMuLi5gKTtcbiAgXG4gIC8vIFNlY3VyaXR5IGF1ZGl0IGxvZ2dpbmdcbiAgY29uc3QgYXVkaXRMb2c6IEFycmF5PHtcbiAgICB0aW1lc3RhbXA6IHN0cmluZztcbiAgICBhY3Rpb246IHN0cmluZztcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICB1c2VyUm9sZTogc3RyaW5nO1xuICAgIGRvY3VtZW50SWQ/OiBzdHJpbmc7XG4gICAgc3VjY2VzczogYm9vbGVhbjtcbiAgICBkZXRhaWxzPzogYW55O1xuICB9PiA9IFtdO1xuICBcbiAgLy8gRXJyb3IgdHJhY2tpbmcgZm9yIHByb2R1Y3Rpb24gZGVidWdnaW5nXG4gIGNvbnN0IGVycm9yTG9nOiBBcnJheTx7dGltZXN0YW1wOiBzdHJpbmcsIGVycm9yOiBhbnksIGVuZHBvaW50OiBzdHJpbmcsIHVzZXI/OiBhbnl9PiA9IFtdO1xuICBcbiAgLy8gU2VjdXJpdHkgYXVkaXQgbG9nZ2luZyBmdW5jdGlvblxuICBjb25zdCBsb2dTZWN1cml0eUV2ZW50ID0gKGFjdGlvbjogc3RyaW5nLCB1c2VyOiBhbnksIHN1Y2Nlc3M6IGJvb2xlYW4sIGRvY3VtZW50SWQ/OiBzdHJpbmcsIGRldGFpbHM/OiBhbnkpID0+IHtcbiAgICBjb25zdCBldmVudCA9IHtcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgYWN0aW9uLFxuICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgdXNlclJvbGU6IHVzZXIucm9sZSxcbiAgICAgIGRvY3VtZW50SWQsXG4gICAgICBzdWNjZXNzLFxuICAgICAgZGV0YWlsc1xuICAgIH07XG4gICAgXG4gICAgYXVkaXRMb2cucHVzaChldmVudCk7XG4gICAgaWYgKGF1ZGl0TG9nLmxlbmd0aCA+IDEwMDApIGF1ZGl0TG9nLnNoaWZ0KCk7IC8vIEtlZXAgbGFzdCAxMDAwIGV2ZW50c1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBbU0VDVVJJVFkgQVVESVRdICR7YWN0aW9ufTpgLCBldmVudCk7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9O1xuXG4gIC8vIERhdGFiYXNlIGNvbm5lY3Rpb24gdGVzdGluZyBmdW5jdGlvbnNcbiAgY29uc3QgdGVzdERhdGFiYXNlQ29ubmVjdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgU0VMRUNUIDEgYXMgdGVzdGApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgcmVzdWx0OiByZXN1bHQucm93c1swXSxcbiAgICAgICAgdXJsX3RydW5jYXRlZDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMPy5zdWJzdHJpbmcoMCwgNTApICsgJy4uLidcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB1cmxfdHJ1bmNhdGVkOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkw/LnN1YnN0cmluZygwLCA1MCkgKyAnLi4uJ1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdGVzdFNhbXBsZVF1ZXJ5ID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBUZXN0IHRoZSBleGFjdCBxdWVyeSB0aGF0J3MgZmFpbGluZ1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBDT1VOVCgqKSBhcyBkb2N1bWVudF9jb3VudCBcbiAgICAgICAgRlJPTSBkb2N1bWVudHMgXG4gICAgICAgIExJTUlUIDFcbiAgICAgIGApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZG9jdW1lbnRfY291bnQ6IHJlc3VsdC5yb3dzWzBdPy5kb2N1bWVudF9jb3VudCB8fCAwXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3RhY2s6IGVycm9yLnN0YWNrPy5zdWJzdHJpbmcoMCwgMjAwKSArICcuLi4nXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjaGVja0VudW1WYWx1ZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENoZWNrIGN1cnJlbnQgZW51bSB2YWx1ZXMgaW4gcHJvZHVjdGlvblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBlbnVtbGFiZWwgXG4gICAgICAgIEZST00gcGdfZW51bSBcbiAgICAgICAgV0hFUkUgZW51bXR5cGlkID0gKFxuICAgICAgICAgIFNFTEVDVCBvaWQgXG4gICAgICAgICAgRlJPTSBwZ190eXBlIFxuICAgICAgICAgIFdIRVJFIHR5cG5hbWUgPSAndXNlcl9yb2xlJ1xuICAgICAgICApXG4gICAgICAgIE9SREVSIEJZIGVudW1zb3J0b3JkZXJcbiAgICAgIGApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgcHJvZHVjdGlvbl9lbnVtX3ZhbHVlczogcmVzdWx0LnJvd3MubWFwKHJvdyA9PiByb3cuZW51bWxhYmVsKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrVXNlck9yZ2FuaXphdGlvbkxpbmtzID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayB1c2VyLW9yZ2FuaXphdGlvbiByZWxhdGlvbnNoaXBzXG4gICAgICBjb25zdCB1c2VyQ291bnQgPSBhd2FpdCBkYi5leGVjdXRlKHNxbGBTRUxFQ1QgQ09VTlQoKikgYXMgdG90YWwgRlJPTSB1c2VycyBXSEVSRSBpc19hY3RpdmUgPSB0cnVlYCk7XG4gICAgICBjb25zdCBvcmdDb3VudCA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFNFTEVDVCBDT1VOVCgqKSBhcyB0b3RhbCBGUk9NIG9yZ2FuaXphdGlvbnMgV0hFUkUgaXNfYWN0aXZlID0gdHJ1ZWApO1xuICAgICAgY29uc3QgbGlua0NvdW50ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgU0VMRUNUIENPVU5UKCopIGFzIHRvdGFsIEZST00gdXNlcl9vcmdhbml6YXRpb25zIFdIRVJFIGlzX2FjdGl2ZSA9IHRydWVgKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgdXNlcnMgd2l0aG91dCBvcmdhbml6YXRpb24gbGlua3NcbiAgICAgIGNvbnN0IG9ycGhhblVzZXJzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCB1LmlkLCB1LmVtYWlsLCB1LnJvbGUgXG4gICAgICAgIEZST00gdXNlcnMgdSBcbiAgICAgICAgTEVGVCBKT0lOIHVzZXJfb3JnYW5pemF0aW9ucyB1byBPTiB1LmlkID0gdW8udXNlcl9pZCBBTkQgdW8uaXNfYWN0aXZlID0gdHJ1ZVxuICAgICAgICBXSEVSRSB1LmlzX2FjdGl2ZSA9IHRydWUgQU5EIHVvLnVzZXJfaWQgSVMgTlVMTFxuICAgICAgICBMSU1JVCAxMFxuICAgICAgYCk7XG5cbiAgICAgIC8vIENoZWNrIGN1cnJlbnQgdGVzdCB1c2VyIHNwZWNpZmljYWxseSAoZnJvbSBlcnJvciBsb2dzKVxuICAgICAgY29uc3QgdGVzdFVzZXIgPSBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgU0VMRUNUIHUuZW1haWwsIHUucm9sZSwgdW8ub3JnYW5pemF0aW9uX2lkLCBvLm5hbWUgYXMgb3JnX25hbWVcbiAgICAgICAgRlJPTSB1c2VycyB1XG4gICAgICAgIExFRlQgSk9JTiB1c2VyX29yZ2FuaXphdGlvbnMgdW8gT04gdS5pZCA9IHVvLnVzZXJfaWQgQU5EIHVvLmlzX2FjdGl2ZSA9IHRydWUgIFxuICAgICAgICBMRUZUIEpPSU4gb3JnYW5pemF0aW9ucyBvIE9OIHVvLm9yZ2FuaXphdGlvbl9pZCA9IG8uaWRcbiAgICAgICAgV0hFUkUgdS5pZCA9ICcyMjJmNWEwZC02YmM2LTRmMjgtOWY0ZC0zMmMxMzNlZWQzMzMnXG4gICAgICBgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICB0b3RhbF91c2VyczogdXNlckNvdW50LnJvd3NbMF0/LnRvdGFsIHx8IDAsXG4gICAgICAgICAgdG90YWxfb3JnYW5pemF0aW9uczogb3JnQ291bnQucm93c1swXT8udG90YWwgfHwgMCxcbiAgICAgICAgICB0b3RhbF9saW5rczogbGlua0NvdW50LnJvd3NbMF0/LnRvdGFsIHx8IDAsXG4gICAgICAgICAgb3JwaGFuX3VzZXJfY291bnQ6IG9ycGhhblVzZXJzLnJvd3MubGVuZ3RoXG4gICAgICAgIH0sXG4gICAgICAgIG9ycGhhbl91c2Vyczogb3JwaGFuVXNlcnMucm93cyxcbiAgICAgICAgdGVzdF91c2VyX3N0YXR1czogdGVzdFVzZXIucm93c1swXSB8fCBudWxsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIFxuICAvLyBFbnVtIGNsZWFudXAgZW5kcG9pbnQgZm9yIHNhZmUgc2NoZW1hIG1pZ3JhdGlvbiAgXG4gIGFwcC5wb3N0KCcvYXBpL2RvY3VtZW50cy9jbGVhbnVwLWVudW0nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gRmlyc3QsIHZlcmlmeSBubyB1c2VycyBoYXZlIHRoZSAnb3duZXInIHJvbGVcbiAgICAgIGNvbnN0IHVzZXJDaGVjayA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgQ09VTlQoKikgYXMgb3duZXJfY291bnQgXG4gICAgICAgIEZST00gdXNlcnMgXG4gICAgICAgIFdIRVJFIHJvbGUgPSAnb3duZXInXG4gICAgICBgKTtcbiAgICAgIFxuICAgICAgY29uc3Qgb3duZXJDb3VudCA9IE51bWJlcih1c2VyQ2hlY2sucm93c1swXT8ub3duZXJfY291bnQpIHx8IDA7XG4gICAgICBcbiAgICAgIGlmIChvd25lckNvdW50ID4gMCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIGVycm9yOiAnQ2Fubm90IHJlbW92ZSBvd25lciByb2xlIC0gdXNlcnMgc3RpbGwgYXNzaWduZWQgdG8gaXQnLFxuICAgICAgICAgIG93bmVyX2NvdW50OiBvd25lckNvdW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBTYWZlIHRvIHJlbW92ZSAtIG5vIHVzZXJzIGhhdmUgJ293bmVyJyByb2xlXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgQUxURVIgVFlQRSB1c2VyX3JvbGUgRFJPUCBWQUxVRSBJRiBFWElTVFMgJ293bmVyJ1xuICAgICAgYCk7XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSByZW1vdmVkIHVudXNlZCBvd25lciByb2xlJyxcbiAgICAgICAgc2FmZV90b19wdXNoX3NjaGVtYTogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBkdXJpbmcgZW51bSBjbGVhbnVwOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdFbnVtIGNsZWFudXAgZmFpbGVkJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3VnZ2VzdGlvbjogJ1RyeSBydW5uaW5nIG5wbSBydW4gZGI6cHVzaCAtLWZvcmNlIGluc3RlYWQnXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEZpeCB1c2VyLW9yZ2FuaXphdGlvbiByZWxhdGlvbnNoaXBzXG4gIGFwcC5wb3N0KCcvYXBpL2RvY3VtZW50cy9maXgtdXNlci1saW5rcycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBTdGVwIDE6IEZpbmQgdXNlcnMgd2l0aG91dCBvcmdhbml6YXRpb24gbGlua3NcbiAgICAgIGNvbnN0IG9ycGhhblVzZXJzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCB1LmlkLCB1LmVtYWlsLCB1LnJvbGUgXG4gICAgICAgIEZST00gdXNlcnMgdSBcbiAgICAgICAgTEVGVCBKT0lOIHVzZXJfb3JnYW5pemF0aW9ucyB1byBPTiB1LmlkID0gdW8udXNlcl9pZCBBTkQgdW8uaXNfYWN0aXZlID0gdHJ1ZVxuICAgICAgICBXSEVSRSB1LmlzX2FjdGl2ZSA9IHRydWUgQU5EIHVvLnVzZXJfaWQgSVMgTlVMTFxuICAgICAgYCk7XG5cbiAgICAgIGlmIChvcnBoYW5Vc2Vycy5yb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBbGwgdXNlcnMgYWxyZWFkeSBoYXZlIG9yZ2FuaXphdGlvbiBsaW5rcycsXG4gICAgICAgICAgYWN0aW9uX3Rha2VuOiAnbm9uZScsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgMjogR2V0IHRoZSBmaXJzdCBhdmFpbGFibGUgb3JnYW5pemF0aW9uIChvciBjcmVhdGUgZGVmYXVsdCBvbmUpXG4gICAgICBsZXQgZGVmYXVsdE9yZyA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgaWQsIG5hbWUgRlJPTSBvcmdhbml6YXRpb25zIFdIRVJFIGlzX2FjdGl2ZSA9IHRydWUgTElNSVQgMVxuICAgICAgYCk7XG5cbiAgICAgIGxldCBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xuICAgICAgbGV0IG9yZ2FuaXphdGlvbk5hbWU6IHN0cmluZztcblxuICAgICAgaWYgKGRlZmF1bHRPcmcucm93cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZGVmYXVsdCBvcmdhbml6YXRpb24gaWYgbm9uZSBleGlzdHNcbiAgICAgICAgb3JnYW5pemF0aW9uSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgICAgICBvcmdhbml6YXRpb25OYW1lID0gJ0RlZmF1bHQgT3JnYW5pemF0aW9uJztcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgSU5TRVJUIElOVE8gb3JnYW5pemF0aW9ucyAoaWQsIG5hbWUsIHR5cGUsIGFkZHJlc3MsIHBob25lLCBlbWFpbCwgaXNfYWN0aXZlLCBjcmVhdGVkX2F0LCB1cGRhdGVkX2F0KVxuICAgICAgICAgIFZBTFVFUyAoJHtvcmdhbml6YXRpb25JZH0sICR7b3JnYW5pemF0aW9uTmFtZX0sICdjb25kb21pbml1bScsICcxMjMgTWFpbiBTdCcsICc1MTQtNTU1LTAxMDAnLCAnYWRtaW5Aa292ZW8uY2EnLCB0cnVlLCBOT1coKSwgTk9XKCkpXG4gICAgICAgIGApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3JnYW5pemF0aW9uSWQgPSBkZWZhdWx0T3JnLnJvd3NbMF0uaWQgYXMgc3RyaW5nO1xuICAgICAgICBvcmdhbml6YXRpb25OYW1lID0gZGVmYXVsdE9yZy5yb3dzWzBdLm5hbWUgYXMgc3RyaW5nO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDM6IExpbmsgYWxsIG9ycGhhbiB1c2VycyB0byB0aGUgZGVmYXVsdCBvcmdhbml6YXRpb25cbiAgICAgIGNvbnN0IGxpbmtQcm9taXNlcyA9IG9ycGhhblVzZXJzLnJvd3MubWFwKHVzZXIgPT4ge1xuICAgICAgICBjb25zdCBsaW5rSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgICAgICByZXR1cm4gZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgSU5TRVJUIElOVE8gdXNlcl9vcmdhbml6YXRpb25zIChpZCwgdXNlcl9pZCwgb3JnYW5pemF0aW9uX2lkLCByb2xlLCBpc19hY3RpdmUsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQpXG4gICAgICAgICAgVkFMVUVTICgke2xpbmtJZH0sICR7dXNlci5pZH0sICR7b3JnYW5pemF0aW9uSWR9LCAke3VzZXIucm9sZX0sIHRydWUsIE5PVygpLCBOT1coKSlcbiAgICAgICAgYCk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwobGlua1Byb21pc2VzKTtcblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IGxpbmtlZCB1c2VycyB0byBvcmdhbml6YXRpb25zJyxcbiAgICAgICAgdXNlcnNfbGlua2VkOiBvcnBoYW5Vc2Vycy5yb3dzLmxlbmd0aCxcbiAgICAgICAgb3JnYW5pemF0aW9uX2lkOiBvcmdhbml6YXRpb25JZCxcbiAgICAgICAgb3JnYW5pemF0aW9uX25hbWU6IG9yZ2FuaXphdGlvbk5hbWUsXG4gICAgICAgIGxpbmtlZF91c2Vyczogb3JwaGFuVXNlcnMucm93cy5tYXAodSA9PiAoeyBpZDogdS5pZCwgZW1haWw6IHUuZW1haWwsIHJvbGU6IHUucm9sZSB9KSksXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZml4aW5nIHVzZXItb3JnYW5pemF0aW9uIGxpbmtzOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gZml4IHVzZXItb3JnYW5pemF0aW9uIGxpbmtzJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gU2FmZSBlbnVtIG1pZ3JhdGlvbiBlbmRwb2ludFxuICBhcHAucG9zdCgnL2FwaS9kb2N1bWVudHMvZml4LWVudW0tbWlncmF0aW9uJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFN0ZXAgMTogQ2hlY2sgY3VycmVudCBlbnVtIHZhbHVlcyBhbmQgdXNhZ2VcbiAgICAgIGNvbnN0IGVudW1DaGVjayA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgZW51bWxhYmVsLCBlbnVtc29ydG9yZGVyIFxuICAgICAgICBGUk9NIHBnX2VudW0gXG4gICAgICAgIFdIRVJFIGVudW10eXBpZCA9IChTRUxFQ1Qgb2lkIEZST00gcGdfdHlwZSBXSEVSRSB0eXBuYW1lID0gJ3VzZXJfcm9sZScpXG4gICAgICAgIE9SREVSIEJZIGVudW1zb3J0b3JkZXJcbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBjdXJyZW50RW51bVZhbHVlcyA9IGVudW1DaGVjay5yb3dzLm1hcChyb3cgPT4gcm93LmVudW1sYWJlbCk7XG4gICAgICBcbiAgICAgIC8vIFN0ZXAgMjogQ2hlY2sgaWYgd2UgaGF2ZSBhbnkgZGF0YSB0aGF0IHdvdWxkIHByZXZlbnQgbWlncmF0aW9uXG4gICAgICBjb25zdCB1c2VyUm9sZVVzYWdlID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCByb2xlLCBDT1VOVCgqKSBhcyBjb3VudCBcbiAgICAgICAgRlJPTSB1c2VycyBcbiAgICAgICAgR1JPVVAgQlkgcm9sZVxuICAgICAgYCk7XG5cbiAgICAgIC8vIFN0ZXAgMzogU2luY2UgZW51bSByZW9yZGVyaW5nIGlzIHRoZSBpc3N1ZSwgbGV0J3MgdXNlIGEgZGlmZmVyZW50IGFwcHJvYWNoXG4gICAgICAvLyBXZSdsbCBjcmVhdGUgYSBuZXcgZW51bSB3aXRoIGNvcnJlY3Qgb3JkZXIsIG1pZ3JhdGUgZGF0YSwgdGhlbiBzd2FwXG4gICAgICBjb25zdCB0YXJnZXRFbnVtVmFsdWVzID0gWydhZG1pbicsICdtYW5hZ2VyJywgJ3RlbmFudCcsICdyZXNpZGVudCcsICdkZW1vX21hbmFnZXInLCAnZGVtb190ZW5hbnQnLCAnZGVtb19yZXNpZGVudCddO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiBjdXJyZW50IG9yZGVyIG1hdGNoZXMgdGFyZ2V0XG4gICAgICBjb25zdCBvcmRlck1hdGNoZXMgPSBKU09OLnN0cmluZ2lmeShjdXJyZW50RW51bVZhbHVlcykgPT09IEpTT04uc3RyaW5naWZ5KHRhcmdldEVudW1WYWx1ZXMpO1xuICAgICAgXG4gICAgICBpZiAob3JkZXJNYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0VudW0gdmFsdWVzIGFscmVhZHkgaW4gY29ycmVjdCBvcmRlcicsXG4gICAgICAgICAgY3VycmVudF92YWx1ZXM6IGN1cnJlbnRFbnVtVmFsdWVzLFxuICAgICAgICAgIHRhcmdldF92YWx1ZXM6IHRhcmdldEVudW1WYWx1ZXMsXG4gICAgICAgICAgbWlncmF0aW9uX25lZWRlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgNDogQ3JlYXRlIG5ldyBlbnVtIHdpdGggY29ycmVjdCBvcmRlclxuICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQ1JFQVRFIFRZUEUgdXNlcl9yb2xlX25ldyBBUyBFTlVNICgnYWRtaW4nLCAnbWFuYWdlcicsICd0ZW5hbnQnLCAncmVzaWRlbnQnLCAnZGVtb19tYW5hZ2VyJywgJ2RlbW9fdGVuYW50JywgJ2RlbW9fcmVzaWRlbnQnKWApO1xuXG4gICAgICAvLyBTdGVwIDU6IFVwZGF0ZSBhbGwgdGFibGVzIHRvIHVzZSBuZXcgZW51bVxuICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIEFMVEVSIFRBQkxFIHVzZXJzIFxuICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZV9uZXcgXG4gICAgICAgIFVTSU5HIHJvbGU6OnRleHQ6OnVzZXJfcm9sZV9uZXdcbiAgICAgIGApO1xuXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgQUxURVIgVEFCTEUgdXNlcl9vcmdhbml6YXRpb25zIFxuICAgICAgICBBTFRFUiBDT0xVTU4gb3JnYW5pemF0aW9uX3JvbGUgVFlQRSB1c2VyX3JvbGVfbmV3IFxuICAgICAgICBVU0lORyBvcmdhbml6YXRpb25fcm9sZTo6dGV4dDo6dXNlcl9yb2xlX25ld1xuICAgICAgYCk7XG5cbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBBTFRFUiBUQUJMRSByb2xlX3Blcm1pc3Npb25zIFxuICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZV9uZXcgXG4gICAgICAgIFVTSU5HIHJvbGU6OnRleHQ6OnVzZXJfcm9sZV9uZXdcbiAgICAgIGApO1xuXG4gICAgICAvLyBTdGVwIDY6IERyb3Agb2xkIGVudW0gYW5kIHJlbmFtZSBuZXcgb25lXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBEUk9QIFRZUEUgdXNlcl9yb2xlYCk7XG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUWVBFIHVzZXJfcm9sZV9uZXcgUkVOQU1FIFRPIHVzZXJfcm9sZWApO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzZnVsbHkgbWlncmF0ZWQgdXNlcl9yb2xlIGVudW0nLFxuICAgICAgICBvbGRfdmFsdWVzOiBjdXJyZW50RW51bVZhbHVlcyxcbiAgICAgICAgbmV3X3ZhbHVlczogdGFyZ2V0RW51bVZhbHVlcyxcbiAgICAgICAgdXNlcl9yb2xlX3VzYWdlOiB1c2VyUm9sZVVzYWdlLnJvd3MsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZHVyaW5nIGVudW0gbWlncmF0aW9uOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdFbnVtIG1pZ3JhdGlvbiBmYWlsZWQnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBzdWdnZXN0aW9uOiAnVGhpcyBpcyBhIGNvbXBsZXggbWlncmF0aW9uIC0gbWF5IG5lZWQgbWFudWFsIGludGVydmVudGlvbicsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEZpeCBpbnZpdGF0aW9ucyB0YWJsZSBlbnVtIGRlcGVuZGVuY3lcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL2ZpeC1pbnZpdGF0aW9ucy1kZXBlbmRlbmN5JywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFN0ZXAgMTogQ2hlY2sgY3VycmVudCBpbnZpdGF0aW9ucyB0YWJsZSBzdHJ1Y3R1cmVcbiAgICAgIGNvbnN0IGludml0YXRpb25zU2NoZW1hID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBjb2x1bW5fbmFtZSwgZGF0YV90eXBlLCBjb2x1bW5fZGVmYXVsdFxuICAgICAgICBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zIFxuICAgICAgICBXSEVSRSB0YWJsZV9uYW1lID0gJ2ludml0YXRpb25zJyBBTkQgY29sdW1uX25hbWUgPSAncm9sZSdcbiAgICAgIGApO1xuXG4gICAgICAvLyBTdGVwIDI6IFJlbW92ZSBkZWZhdWx0IHZhbHVlIGZyb20gaW52aXRhdGlvbnMucm9sZSBjb2x1bW4gdGVtcG9yYXJpbHlcbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBcbiAgICAgICAgQUxURVIgQ09MVU1OIHJvbGUgRFJPUCBERUZBVUxUXG4gICAgICBgKTtcblxuICAgICAgLy8gU3RlcCAzOiBDaGVjayB3aGF0IG90aGVyIHRhYmxlcyBtaWdodCBoYXZlIGVudW0gZGVwZW5kZW5jaWVzXG4gICAgICBjb25zdCBlbnVtRGVwZW5kZW5jaWVzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBcbiAgICAgICAgICB0LnRhYmxlX25hbWUsXG4gICAgICAgICAgYy5jb2x1bW5fbmFtZSxcbiAgICAgICAgICBjLmNvbHVtbl9kZWZhdWx0XG4gICAgICAgIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyB0XG4gICAgICAgIEpPSU4gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgYyBPTiB0LnRhYmxlX25hbWUgPSBjLnRhYmxlX25hbWVcbiAgICAgICAgV0hFUkUgYy5kYXRhX3R5cGUgPSAnVVNFUi1ERUZJTkVEJyBcbiAgICAgICAgQU5EIGMudWR0X25hbWUgPSAndXNlcl9yb2xlJ1xuICAgICAgICBBTkQgYy5jb2x1bW5fZGVmYXVsdCBJUyBOT1QgTlVMTFxuICAgICAgYCk7XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSByZW1vdmVkIGludml0YXRpb25zIHRhYmxlIGVudW0gZGVwZW5kZW5jeScsXG4gICAgICAgIHJlbW92ZWRfZGVmYXVsdHM6IGludml0YXRpb25zU2NoZW1hLnJvd3MsXG4gICAgICAgIHJlbWFpbmluZ19kZXBlbmRlbmNpZXM6IGVudW1EZXBlbmRlbmNpZXMucm93cyxcbiAgICAgICAgbmV4dF9zdGVwOiAnUnVuIG5wbSBydW4gZGI6cHVzaCBub3csIHRoZW4gY2FsbCAvYXBpL2RvY3VtZW50cy9yZXN0b3JlLWludml0YXRpb25zLWRlZmF1bHQnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZpeGluZyBpbnZpdGF0aW9ucyBkZXBlbmRlbmN5OicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gZml4IGludml0YXRpb25zIGRlcGVuZGVuY3knLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBSZXN0b3JlIGludml0YXRpb25zIGRlZmF1bHQgdmFsdWUgYWZ0ZXIgc2NoZW1hIHN5bmNcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL3Jlc3RvcmUtaW52aXRhdGlvbnMtZGVmYXVsdCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBSZXN0b3JlIGRlZmF1bHQgdmFsdWUgdG8gJ3RlbmFudCcgZm9yIGludml0YXRpb25zLnJvbGUgY29sdW1uXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgQUxURVIgVEFCTEUgaW52aXRhdGlvbnMgXG4gICAgICAgIEFMVEVSIENPTFVNTiByb2xlIFNFVCBERUZBVUxUICd0ZW5hbnQnXG4gICAgICBgKTtcblxuICAgICAgLy8gVmVyaWZ5IHRoZSBjaGFuZ2VcbiAgICAgIGNvbnN0IHZlcmlmaWNhdGlvbiA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgY29sdW1uX25hbWUsIGNvbHVtbl9kZWZhdWx0XG4gICAgICAgIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgXG4gICAgICAgIFdIRVJFIHRhYmxlX25hbWUgPSAnaW52aXRhdGlvbnMnIEFORCBjb2x1bW5fbmFtZSA9ICdyb2xlJ1xuICAgICAgYCk7XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSByZXN0b3JlZCBpbnZpdGF0aW9ucyByb2xlIGRlZmF1bHQgdG8gdGVuYW50JyxcbiAgICAgICAgY3VycmVudF9kZWZhdWx0OiB2ZXJpZmljYXRpb24ucm93c1swXT8uY29sdW1uX2RlZmF1bHQsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgcmVzdG9yaW5nIGludml0YXRpb25zIGRlZmF1bHQ6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byByZXN0b3JlIGludml0YXRpb25zIGRlZmF1bHQnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBNaWdyYXRlIG93bmVyIHVzZXJzIHRvIGFkbWluIGJlZm9yZSBlbnVtIGNsZWFudXBcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL21pZ3JhdGUtb3duZXItdG8tYWRtaW4nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gU3RlcCAxOiBDaGVjayBob3cgbWFueSB1c2VycyBoYXZlICdvd25lcicgcm9sZVxuICAgICAgY29uc3Qgb3duZXJVc2Vyc0NoZWNrID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBpZCwgZW1haWwsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSBcbiAgICAgICAgRlJPTSB1c2VycyBcbiAgICAgICAgV0hFUkUgcm9sZSA9ICdvd25lcidcbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBvd25lckNvdW50ID0gb3duZXJVc2Vyc0NoZWNrLnJvd3MubGVuZ3RoO1xuXG4gICAgICBpZiAob3duZXJDb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdObyBvd25lciB1c2VycyBmb3VuZCAtIG1pZ3JhdGlvbiBub3QgbmVlZGVkJyxcbiAgICAgICAgICBvd25lcl9jb3VudDogMCxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCAyOiBVcGRhdGUgYWxsIG93bmVyIHVzZXJzIHRvIGFkbWluXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgVVBEQVRFIHVzZXJzIFxuICAgICAgICBTRVQgcm9sZSA9ICdhZG1pbicgXG4gICAgICAgIFdIRVJFIHJvbGUgPSAnb3duZXInXG4gICAgICBgKTtcblxuICAgICAgLy8gU3RlcCAzOiBVcGRhdGUgdXNlcl9vcmdhbml6YXRpb25zIHRhYmxlIGlmIGl0IGV4aXN0c1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgVVBEQVRFIHVzZXJfb3JnYW5pemF0aW9ucyBcbiAgICAgICAgICBTRVQgb3JnYW5pemF0aW9uX3JvbGUgPSAnYWRtaW4nIFxuICAgICAgICAgIFdIRVJFIG9yZ2FuaXphdGlvbl9yb2xlID0gJ293bmVyJ1xuICAgICAgICBgKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGFibGUgbWlnaHQgbm90IGV4aXN0LCB0aGF0J3MgT0tcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCA0OiBSZW1vdmUgJ293bmVyJyBmcm9tIGVudW1cbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBBTFRFUiBUWVBFIHVzZXJfcm9sZSBSRU5BTUUgVE8gdXNlcl9yb2xlX29sZFxuICAgICAgYCk7XG5cbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBDUkVBVEUgVFlQRSB1c2VyX3JvbGUgQVMgRU5VTSAoJ2FkbWluJywgJ21hbmFnZXInLCAndGVuYW50JywgJ3Jlc2lkZW50JywgJ2RlbW9fbWFuYWdlcicsICdkZW1vX3RlbmFudCcsICdkZW1vX3Jlc2lkZW50JylcbiAgICAgIGApO1xuXG4gICAgICAvLyBTdGVwIDU6IFVwZGF0ZSBhbGwgdGFibGVzIHRvIHVzZSBuZXcgZW51bVxuICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIEFMVEVSIFRBQkxFIHVzZXJzIFxuICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgVVNJTkcgcm9sZTo6dGV4dDo6dXNlcl9yb2xlXG4gICAgICBgKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgdXNlcl9vcmdhbml6YXRpb25zIFxuICAgICAgICAgIEFMVEVSIENPTFVNTiBvcmdhbml6YXRpb25fcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgICBVU0lORyBvcmdhbml6YXRpb25fcm9sZTo6dGV4dDo6dXNlcl9yb2xlXG4gICAgICAgIGApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBUYWJsZSBtaWdodCBub3QgZXhpc3RcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgcm9sZV9wZXJtaXNzaW9ucyBcbiAgICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgICBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVcbiAgICAgICAgYCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFRhYmxlIG1pZ2h0IG5vdCBleGlzdFxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgICBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBcbiAgICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgICBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVcbiAgICAgICAgYCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIENvbHVtbiBtaWdodCBub3QgZXhpc3RcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCA2OiBEcm9wIG9sZCBlbnVtXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBEUk9QIFRZUEUgdXNlcl9yb2xlX29sZGApO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzZnVsbHkgbWlncmF0ZWQgb3duZXIgdXNlcnMgdG8gYWRtaW4nLFxuICAgICAgICBtaWdyYXRlZF91c2Vyczogb3duZXJVc2Vyc0NoZWNrLnJvd3MsXG4gICAgICAgIG93bmVyX2NvdW50OiBvd25lckNvdW50LFxuICAgICAgICBuZXdfZW51bV92YWx1ZXM6IFsnYWRtaW4nLCAnbWFuYWdlcicsICd0ZW5hbnQnLCAncmVzaWRlbnQnLCAnZGVtb19tYW5hZ2VyJywgJ2RlbW9fdGVuYW50JywgJ2RlbW9fcmVzaWRlbnQnXSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBtaWdyYXRpbmcgb3duZXIgdXNlcnMgdG8gYWRtaW46JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ093bmVyIHRvIGFkbWluIG1pZ3JhdGlvbiBmYWlsZWQnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBSZW1vdmUgYWxsIHJlbWFpbmluZyBlbnVtIGRlcGVuZGVuY2llc1xuICBhcHAucG9zdCgnL2FwaS9kb2N1bWVudHMvcmVtb3ZlLWFsbC1lbnVtLWRlcGVuZGVuY2llcycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHRzID0gW107XG5cbiAgICAgIC8vIFJlbW92ZSBkZWZhdWx0IGZyb20gdXNlcnMucm9sZVxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgdXNlcnMgXG4gICAgICAgICAgQUxURVIgQ09MVU1OIHJvbGUgRFJPUCBERUZBVUxUXG4gICAgICAgIGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ3VzZXJzLnJvbGUgZGVmYXVsdCByZW1vdmVkJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcnMucm9sZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBkZWZhdWx0IGZyb20gdXNlcl9vcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbl9yb2xlXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgICBBTFRFUiBUQUJMRSB1c2VyX29yZ2FuaXphdGlvbnMgXG4gICAgICAgICAgQUxURVIgQ09MVU1OIG9yZ2FuaXphdGlvbl9yb2xlIERST1AgREVGQVVMVFxuICAgICAgICBgKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKCd1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgZGVmYXVsdCByZW1vdmVkJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcl9vcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbl9yb2xlOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgcmVtYWluaW5nIGRlcGVuZGVuY2llc1xuICAgICAgY29uc3QgcmVtYWluaW5nRGVwcyA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgXG4gICAgICAgICAgdC50YWJsZV9uYW1lLFxuICAgICAgICAgIGMuY29sdW1uX25hbWUsXG4gICAgICAgICAgYy5jb2x1bW5fZGVmYXVsdFxuICAgICAgICBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgdFxuICAgICAgICBKT0lOIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zIGMgT04gdC50YWJsZV9uYW1lID0gYy50YWJsZV9uYW1lXG4gICAgICAgIFdIRVJFIGMuZGF0YV90eXBlID0gJ1VTRVItREVGSU5FRCcgXG4gICAgICAgIEFORCBjLnVkdF9uYW1lID0gJ3VzZXJfcm9sZSdcbiAgICAgICAgQU5EIGMuY29sdW1uX2RlZmF1bHQgSVMgTk9UIE5VTExcbiAgICAgIGApO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdSZW1vdmVkIGFsbCBlbnVtIGRlcGVuZGVuY2llcycsXG4gICAgICAgIG9wZXJhdGlvbnM6IHJlc3VsdHMsXG4gICAgICAgIHJlbWFpbmluZ19kZXBlbmRlbmNpZXM6IHJlbWFpbmluZ0RlcHMucm93cyxcbiAgICAgICAgbmV4dF9zdGVwOiAnUnVuIG5wbSBydW4gZGI6cHVzaCBub3cnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlbW92aW5nIGVudW0gZGVwZW5kZW5jaWVzOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gcmVtb3ZlIGVudW0gZGVwZW5kZW5jaWVzJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gUmVzdG9yZSBhbGwgZGVmYXVsdCB2YWx1ZXMgYWZ0ZXIgc2NoZW1hIHN5bmNcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL3Jlc3RvcmUtYWxsLWRlZmF1bHRzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcblxuICAgICAgLy8gUmVzdG9yZSB1c2Vycy5yb2xlIGRlZmF1bHRcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICAgIEFMVEVSIFRBQkxFIHVzZXJzIFxuICAgICAgICAgIEFMVEVSIENPTFVNTiByb2xlIFNFVCBERUZBVUxUICd0ZW5hbnQnXG4gICAgICAgIGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ3VzZXJzLnJvbGUgZGVmYXVsdCByZXN0b3JlZCB0byB0ZW5hbnQnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGB1c2Vycy5yb2xlIHJlc3RvcmUgZmFpbGVkOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVzdG9yZSB1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgZGVmYXVsdFxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgdXNlcl9vcmdhbml6YXRpb25zIFxuICAgICAgICAgIEFMVEVSIENPTFVNTiBvcmdhbml6YXRpb25fcm9sZSBTRVQgREVGQVVMVCAndGVuYW50J1xuICAgICAgICBgKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKCd1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgZGVmYXVsdCByZXN0b3JlZCB0byB0ZW5hbnQnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGB1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgcmVzdG9yZSBmYWlsZWQ6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXN0b3JlIGludml0YXRpb25zLnJvbGUgZGVmYXVsdFxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgaW52aXRhdGlvbnMgXG4gICAgICAgICAgQUxURVIgQ09MVU1OIHJvbGUgU0VUIERFRkFVTFQgJ3RlbmFudCdcbiAgICAgICAgYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaCgnaW52aXRhdGlvbnMucm9sZSBkZWZhdWx0IHJlc3RvcmVkIHRvIHRlbmFudCcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYGludml0YXRpb25zLnJvbGUgcmVzdG9yZSBmYWlsZWQ6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdSZXN0b3JlZCBhbGwgZGVmYXVsdCB2YWx1ZXMnLFxuICAgICAgICBvcGVyYXRpb25zOiByZXN1bHRzLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlc3RvcmluZyBkZWZhdWx0czonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIHJlc3RvcmUgZGVmYXVsdHMnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBDb21wbGV0ZSBkYXRhYmFzZSBzY2hlbWEgc3luYyBlbmRwb2ludFxuICBhcHAucG9zdCgnL2FwaS9kb2N1bWVudHMvY29tcGxldGUtc2NoZW1hLXN5bmMnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgICAvLyBTdGVwIDE6IFJlbW92ZSBhbGwgZW51bSBkZXBlbmRlbmNpZXMgdGVtcG9yYXJpbHlcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYEFMVEVSIFRBQkxFIHVzZXJzIEFMVEVSIENPTFVNTiByb2xlIERST1AgREVGQVVMVGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZW1vdmVkIHVzZXJzLnJvbGUgZGVmYXVsdCcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYHVzZXJzLnJvbGU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSB1c2VyX29yZ2FuaXphdGlvbnMgQUxURVIgQ09MVU1OIG9yZ2FuaXphdGlvbl9yb2xlIERST1AgREVGQVVMVGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZW1vdmVkIHVzZXJfb3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25fcm9sZSBkZWZhdWx0Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcl9vcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbl9yb2xlOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVEFCTEUgaW52aXRhdGlvbnMgQUxURVIgQ09MVU1OIHJvbGUgRFJPUCBERUZBVUxUYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaCgn4pyTIFJlbW92ZWQgaW52aXRhdGlvbnMucm9sZSBkZWZhdWx0Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgaW52aXRhdGlvbnMucm9sZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgMjogTWlncmF0ZSBhbnkgJ293bmVyJyB1c2VycyB0byAnYWRtaW4nXG4gICAgICBjb25zdCBvd25lclVzZXJzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgU0VMRUNUIGNvdW50KCopIGFzIGNvdW50IEZST00gdXNlcnMgV0hFUkUgcm9sZSA9ICdvd25lcidgKTtcbiAgICAgIGNvbnN0IG93bmVyQ291bnQgPSBOdW1iZXIob3duZXJVc2Vycy5yb3dzWzBdPy5jb3VudCB8fCAwKTtcbiAgICAgIGlmIChvd25lckNvdW50ID4gMCkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBVUERBVEUgdXNlcnMgU0VUIHJvbGUgPSAnYWRtaW4nIFdIRVJFIHJvbGUgPSAnb3duZXInYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaChg4pyTIE1pZ3JhdGVkICR7b3duZXJDb3VudH0gb3duZXIgdXNlcnMgdG8gYWRtaW5gKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgVVBEQVRFIHVzZXJfb3JnYW5pemF0aW9ucyBTRVQgb3JnYW5pemF0aW9uX3JvbGUgPSAnYWRtaW4nIFdIRVJFIG9yZ2FuaXphdGlvbl9yb2xlID0gJ293bmVyJ2ApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBVcGRhdGVkIHVzZXJfb3JnYW5pemF0aW9ucyBvd25lciByb2xlcyB0byBhZG1pbicpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYHVzZXJfb3JnYW5pemF0aW9ucyBvd25lciB1cGRhdGU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDM6IEZpeCB0aGUgZW51bSB0byBtYXRjaCBkZXZlbG9wbWVudCBzY2hlbWFcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFJlbmFtZSBjdXJyZW50IGVudW1cbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVFlQRSB1c2VyX3JvbGUgUkVOQU1FIFRPIHVzZXJfcm9sZV9vbGRgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgZW51bSB3aXRoIGNvcnJlY3QgdmFsdWVzXG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICAgIENSRUFURSBUWVBFIHVzZXJfcm9sZSBBUyBFTlVNIChcbiAgICAgICAgICAgICdhZG1pbicsICdtYW5hZ2VyJywgJ3RlbmFudCcsICdyZXNpZGVudCcsIFxuICAgICAgICAgICAgJ2RlbW9fbWFuYWdlcicsICdkZW1vX3RlbmFudCcsICdkZW1vX3Jlc2lkZW50J1xuICAgICAgICAgIClcbiAgICAgICAgYCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGFsbCB0YWJsZXNcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVEFCTEUgdXNlcnMgQUxURVIgQ09MVU1OIHJvbGUgVFlQRSB1c2VyX3JvbGUgVVNJTkcgcm9sZTo6dGV4dDo6dXNlcl9yb2xlYCk7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYEFMVEVSIFRBQkxFIHVzZXJfb3JnYW5pemF0aW9ucyBBTFRFUiBDT0xVTU4gb3JnYW5pemF0aW9uX3JvbGUgVFlQRSB1c2VyX3JvbGUgVVNJTkcgb3JnYW5pemF0aW9uX3JvbGU6OnRleHQ6OnVzZXJfcm9sZWApO1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVgKTtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVEFCTEUgcm9sZV9wZXJtaXNzaW9ucyBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVgKTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBVcGRhdGVkIHJvbGVfcGVybWlzc2lvbnMgZW51bScpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGByb2xlX3Blcm1pc3Npb25zOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERyb3Agb2xkIGVudW1cbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgRFJPUCBUWVBFIHVzZXJfcm9sZV9vbGRgKTtcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdHMucHVzaCgn4pyTIFN1Y2Nlc3NmdWxseSB1cGRhdGVkIHVzZXJfcm9sZSBlbnVtJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgRW51bSB1cGRhdGUgZmFpbGVkOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCA0OiBSZXN0b3JlIGRlZmF1bHQgdmFsdWVzXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSB1c2VycyBBTFRFUiBDT0xVTU4gcm9sZSBTRVQgREVGQVVMVCAndGVuYW50J2ApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZXN0b3JlZCB1c2Vycy5yb2xlIGRlZmF1bHQgdG8gdGVuYW50Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcnMucm9sZSBkZWZhdWx0IHJlc3RvcmU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSB1c2VyX29yZ2FuaXphdGlvbnMgQUxURVIgQ09MVU1OIG9yZ2FuaXphdGlvbl9yb2xlIFNFVCBERUZBVUxUICd0ZW5hbnQnYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaCgn4pyTIFJlc3RvcmVkIHVzZXJfb3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25fcm9sZSBkZWZhdWx0IHRvIHRlbmFudCcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYHVzZXJfb3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25fcm9sZSBkZWZhdWx0IHJlc3RvcmU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBBTFRFUiBDT0xVTU4gcm9sZSBTRVQgREVGQVVMVCAndGVuYW50J2ApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZXN0b3JlZCBpbnZpdGF0aW9ucy5yb2xlIGRlZmF1bHQgdG8gdGVuYW50Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgaW52aXRhdGlvbnMucm9sZSBkZWZhdWx0IHJlc3RvcmU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDU6IEFkZCBtaXNzaW5nIGNvbHVtbnMgdGhhdCBleGlzdCBpbiBwcm9kdWN0aW9uIGJ1dCBub3QgZGV2ZWxvcG1lbnRcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICAgIEFMVEVSIFRBQkxFIGludml0YXRpb25fYXVkaXRfbG9nIFxuICAgICAgICAgIEFERCBDT0xVTU4gSUYgTk9UIEVYSVNUUyBjcmVhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIE5PVygpXG4gICAgICAgIGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBBZGRlZCBjcmVhdGVkX2F0IHRvIGludml0YXRpb25fYXVkaXRfbG9nJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgaW52aXRhdGlvbl9hdWRpdF9sb2cuY3JlYXRlZF9hdDogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0RhdGFiYXNlIHNjaGVtYSBzeW5jaHJvbml6YXRpb24gY29tcGxldGUnLFxuICAgICAgICBvcGVyYXRpb25zOiByZXN1bHRzLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGR1cmluZyBzY2hlbWEgc3luY2hyb25pemF0aW9uOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdTY2hlbWEgc3luY2hyb25pemF0aW9uIGZhaWxlZCcsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBzdWNjZXNzOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBFbmhhbmNlZCBkaWFnbm9zdGljIGVuZHBvaW50IHdpdGggZGF0YWJhc2Ugc2NoZW1hIGNoZWNrXG4gIGFwcC5nZXQoJy9hcGkvZG9jdW1lbnRzL2RpYWdub3N0aWMnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgaWYgZG9jdW1lbnRzIHRhYmxlIGV4aXN0c1xuICAgICAgbGV0IHRhYmxlRXhpc3RzID0gZmFsc2U7XG4gICAgICBsZXQgdGFibGVTY2hlbWEgPSBudWxsO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgICBTRUxFQ1QgY29sdW1uX25hbWUsIGRhdGFfdHlwZSwgaXNfbnVsbGFibGUsIGNvbHVtbl9kZWZhdWx0IFxuICAgICAgICAgIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgXG4gICAgICAgICAgV0hFUkUgdGFibGVfbmFtZSA9ICdkb2N1bWVudHMnIFxuICAgICAgICAgIE9SREVSIEJZIG9yZGluYWxfcG9zaXRpb25cbiAgICAgICAgYCk7XG4gICAgICAgIHRhYmxlRXhpc3RzID0gcmVzdWx0LnJvd3MubGVuZ3RoID4gMDtcbiAgICAgICAgdGFibGVTY2hlbWEgPSByZXN1bHQucm93cztcbiAgICAgIH0gY2F0Y2ggKHNjaGVtYUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NjaGVtYSBjaGVjayBlcnJvcjonLCBzY2hlbWFFcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0RvY3VtZW50IEFQSSBkaWFnbm9zdGljJyxcbiAgICAgICAgZ2NzX2Rpc2FibGVkOiB0cnVlLFxuICAgICAgICBzZXNzaW9uX2ZpeF9hcHBsaWVkOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WLFxuICAgICAgICB2ZXJzaW9uOiAndjIuMS1nY3MtZGlzYWJsZWQnLFxuICAgICAgICByZWNlbnRfZXJyb3JzOiBlcnJvckxvZy5zbGljZSgtNSksIC8vIExhc3QgNSBlcnJvcnNcbiAgICAgICAgc3RvcmFnZV9zdGF0dXM6IHtcbiAgICAgICAgICBleGlzdHM6ICEhc3RvcmFnZSxcbiAgICAgICAgICB0eXBlOiBzdG9yYWdlPy5jb25zdHJ1Y3Rvcj8ubmFtZSxcbiAgICAgICAgICBtZXRob2RzOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc3RvcmFnZSB8fCB7fSkpXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGFiYXNlX3N0YXR1czoge1xuICAgICAgICAgIGRvY3VtZW50c190YWJsZV9leGlzdHM6IHRhYmxlRXhpc3RzLFxuICAgICAgICAgIGRvY3VtZW50c190YWJsZV9zY2hlbWE6IHRhYmxlU2NoZW1hLFxuICAgICAgICAgIHNjaGVtYV9jb2x1bW5zX2NvdW50OiB0YWJsZVNjaGVtYT8ubGVuZ3RoIHx8IDAsXG4gICAgICAgICAgY29ubmVjdGlvbl90ZXN0OiBhd2FpdCB0ZXN0RGF0YWJhc2VDb25uZWN0aW9uKCksXG4gICAgICAgICAgc2FtcGxlX3F1ZXJ5X3Rlc3Q6IGF3YWl0IHRlc3RTYW1wbGVRdWVyeSgpLFxuICAgICAgICAgIGVudW1fY2hlY2s6IGF3YWl0IGNoZWNrRW51bVZhbHVlcygpLFxuICAgICAgICAgIHVzZXJfb3JnYW5pemF0aW9uX2xpbmtzOiBhd2FpdCBjaGVja1VzZXJPcmdhbml6YXRpb25MaW5rcygpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBydW5uaW5nIGRpYWdub3N0aWM6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0RpYWdub3N0aWMgZmFpbGVkJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgXG4gIC8vIEVycm9yIGxvZ2dpbmcgaGVscGVyXG4gIGNvbnN0IGxvZ0Vycm9yID0gKGVuZHBvaW50OiBzdHJpbmcsIGVycm9yOiBhbnksIHVzZXI/OiBhbnkpID0+IHtcbiAgICBjb25zdCBlcnJvckVudHJ5ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBlbmRwb2ludCxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHN0YWNrOiBlcnJvci5zdGFjayxcbiAgICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgICAgZGV0YWlsczogZXJyb3IudG9TdHJpbmcoKVxuICAgICAgfSxcbiAgICAgIHVzZXI6IHVzZXIgPyB7IGlkOiB1c2VyLmlkLCByb2xlOiB1c2VyLnJvbGUgfSA6IG51bGxcbiAgICB9O1xuICAgIFxuICAgIGVycm9yTG9nLnB1c2goZXJyb3JFbnRyeSk7XG4gICAgaWYgKGVycm9yTG9nLmxlbmd0aCA+IDUwKSBlcnJvckxvZy5zaGlmdCgpOyAvLyBLZWVwIG9ubHkgbGFzdCA1MCBlcnJvcnNcbiAgICBcbiAgICBjb25zb2xlLmVycm9yKGBbJHtlcnJvckVudHJ5LnRpbWVzdGFtcH1dIPCfmqggRVJST1IgaW4gJHtlbmRwb2ludH06YCwgZXJyb3JFbnRyeSk7XG4gICAgcmV0dXJuIGVycm9yRW50cnk7XG4gIH07XG4gIFxuICAvLyBHZXQgYWxsIGRvY3VtZW50cyBmb3IgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlclxuICBhcHAuZ2V0KCcvYXBpL2RvY3VtZW50cycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+ThCBHRVQgL2FwaS9kb2N1bWVudHMgLSBTdGFydGluZyByZXF1ZXN0YCwge1xuICAgICAgdXNlcklkOiByZXEudXNlcj8uaWQsXG4gICAgICB1c2VyUm9sZTogcmVxLnVzZXI/LnJvbGUsXG4gICAgICBxdWVyeTogcmVxLnF1ZXJ5LFxuICAgICAgdXJsOiByZXEudXJsLFxuICAgICAgbWV0aG9kOiByZXEubWV0aG9kXG4gICAgfSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IHVzZXJSb2xlID0gdXNlci5yb2xlO1xuICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgIFxuICAgICAgLy8gUHJvZHVjdGlvbiBkZWJ1Z2dpbmc6IExvZyB0aGUgcmVxdWVzdCBkZXRhaWxzXG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+UjSBVc2VyIGRhdGEgZXh0cmFjdGVkOmAsIHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgaGFzVmFsaWRVc2VyOiAhIXVzZXJcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBDcml0aWNhbDogQ2hlY2sgaWYgc3RvcmFnZSBvYmplY3QgZXhpc3RzIGFuZCBpcyBwcm9wZXJseSBpbml0aWFsaXplZFxuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCfkr4gU3RvcmFnZSBjaGVjazpgLCB7XG4gICAgICAgIHN0b3JhZ2VFeGlzdHM6ICEhc3RvcmFnZSxcbiAgICAgICAgc3RvcmFnZVR5cGU6IHN0b3JhZ2U/LmNvbnN0cnVjdG9yPy5uYW1lLFxuICAgICAgICBzdG9yYWdlTWV0aG9kOiB0eXBlb2Ygc3RvcmFnZT8uZ2V0RG9jdW1lbnRzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IHJlcS5xdWVyeS50eXBlIGFzIHN0cmluZzsgLy8gJ2J1aWxkaW5nJywgJ3Jlc2lkZW50Jywgb3IgdW5kZWZpbmVkIGZvciBib3RoXG4gICAgICBjb25zdCBzcGVjaWZpY1Jlc2lkZW5jZUlkID0gcmVxLnF1ZXJ5LnJlc2lkZW5jZUlkIGFzIHN0cmluZzsgLy8gRmlsdGVyIGJ5IHNwZWNpZmljIHJlc2lkZW5jZVxuICAgICAgY29uc3Qgc3BlY2lmaWNCdWlsZGluZ0lkID0gcmVxLnF1ZXJ5LmJ1aWxkaW5nSWQgYXMgc3RyaW5nOyAvLyBGaWx0ZXIgYnkgc3BlY2lmaWMgYnVpbGRpbmdcblxuICAgICAgLy8gR2V0IHVzZXIncyBvcmdhbml6YXRpb24gYW5kIHJlc2lkZW5jZXMgZm9yIGZpbHRlcmluZ1xuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCflI0gRmV0Y2hpbmcgdXNlciBkYXRhIGZyb20gc3RvcmFnZS4uLmApO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+TiyBDYWxsaW5nIGdldFVzZXJPcmdhbml6YXRpb25zKCR7dXNlcklkfSkuLi5gKTtcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKHVzZXJJZCk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g4pyFIGdldFVzZXJPcmdhbml6YXRpb25zIFNVQ0NFU1MgLSBGb3VuZCAke29yZ2FuaXphdGlvbnMubGVuZ3RofSBvcmdhbml6YXRpb25zYCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDwn5OLIENhbGxpbmcgZ2V0VXNlclJlc2lkZW5jZXMoJHt1c2VySWR9KS4uLmApO1xuICAgICAgY29uc3QgdXNlclJlc2lkZW5jZXMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJSZXNpZGVuY2VzKHVzZXJJZCk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g4pyFIGdldFVzZXJSZXNpZGVuY2VzIFNVQ0NFU1MgLSBGb3VuZCAke3VzZXJSZXNpZGVuY2VzLmxlbmd0aH0gdXNlciByZXNpZGVuY2VzYCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDwn5OLIENhbGxpbmcgZ2V0QnVpbGRpbmdzKCkuLi5gKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5ncyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmdzKCk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g4pyFIGdldEJ1aWxkaW5ncyBTVUNDRVNTIC0gRm91bmQgJHtidWlsZGluZ3MubGVuZ3RofSBidWlsZGluZ3NgKTtcblxuICAgICAgY29uc3Qgb3JnYW5pemF0aW9uSWQgPSBvcmdhbml6YXRpb25zLmxlbmd0aCA+IDAgPyBvcmdhbml6YXRpb25zWzBdLm9yZ2FuaXphdGlvbklkIDogdW5kZWZpbmVkO1xuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCfj6IgT3JnYW5pemF0aW9uIElEIGRldGVybWluZWQ6YCwgb3JnYW5pemF0aW9uSWQpO1xuXG4gICAgICAvLyBJZiBzcGVjaWZpYyByZXNpZGVuY2UgSUQgcHJvdmlkZWQsIGZpbHRlciB0byBvbmx5IHRoYXQgcmVzaWRlbmNlXG4gICAgICBsZXQgcmVzaWRlbmNlSWRzOiBzdHJpbmdbXTtcbiAgICAgIGlmIChzcGVjaWZpY1Jlc2lkZW5jZUlkKSB7XG4gICAgICAgIC8vIEFkbWluIHVzZXJzIGhhdmUgYWNjZXNzIHRvIGFsbCByZXNpZGVuY2VzXG4gICAgICAgIGlmICh1c2VyUm9sZSA9PT0gJ2FkbWluJyB8fCB1c2VyUm9sZSA9PT0gJ21hbmFnZXInKSB7XG4gICAgICAgICAgcmVzaWRlbmNlSWRzID0gW3NwZWNpZmljUmVzaWRlbmNlSWRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFZlcmlmeSB1c2VyIGhhcyBhY2Nlc3MgdG8gdGhpcyBzcGVjaWZpYyByZXNpZGVuY2VcbiAgICAgICAgICAvLyBIYW5kbGUgYm90aCBzaW1wbGUge3Jlc2lkZW5jZUlkOiBzdHJpbmd9IGFuZCBjb21wbGV4IG5lc3RlZCBzdHJ1Y3R1cmVzXG4gICAgICAgICAgY29uc3QgaGFzQWNjZXNzID0gdXNlclJlc2lkZW5jZXMuc29tZSgodXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHNpbXBsZSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci5yZXNpZGVuY2VJZCA9PT0gc3BlY2lmaWNSZXNpZGVuY2VJZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEhhbmRsZSBjb21wbGV4IG5lc3RlZCBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci51c2VyUmVzaWRlbmNlPy5yZXNpZGVuY2VJZCA9PT0gc3BlY2lmaWNSZXNpZGVuY2VJZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEhhbmRsZSByZXNpZGVuY2UgbmVzdGVkIHN0cnVjdHVyZVxuICAgICAgICAgICAgaWYgKHVyLnJlc2lkZW5jZT8uaWQgPT09IHNwZWNpZmljUmVzaWRlbmNlSWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCFoYXNBY2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IG1lc3NhZ2U6ICdBY2Nlc3MgZGVuaWVkIHRvIHRoaXMgcmVzaWRlbmNlJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzaWRlbmNlSWRzID0gW3NwZWNpZmljUmVzaWRlbmNlSWRdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFeHRyYWN0IHJlc2lkZW5jZSBJRHMgZnJvbSBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzdHJ1Y3R1cmVzXG4gICAgICAgIHJlc2lkZW5jZUlkcyA9IHVzZXJSZXNpZGVuY2VzXG4gICAgICAgICAgLm1hcCgodXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHNpbXBsZSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci5yZXNpZGVuY2VJZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXIucmVzaWRlbmNlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBIYW5kbGUgY29tcGxleCBuZXN0ZWQgc3RydWN0dXJlXG4gICAgICAgICAgICBpZiAodXIudXNlclJlc2lkZW5jZT8ucmVzaWRlbmNlSWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVyLnVzZXJSZXNpZGVuY2UucmVzaWRlbmNlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBIYW5kbGUgcmVzaWRlbmNlIG5lc3RlZCBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci5yZXNpZGVuY2U/LmlkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1ci5yZXNpZGVuY2UuaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maWx0ZXIoKGlkOiBhbnkpID0+IGlkICE9PSBudWxsKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYnVpbGRpbmdJZHMgPSBidWlsZGluZ3MubWFwKChiKSA9PiBiLmlkKTtcblxuICAgICAgY29uc3QgYWxsRG9jdW1lbnRSZWNvcmRzOiBhbnlbXSA9IFtdO1xuXG4gICAgICAvLyBVc2UgdW5pZmllZCBkb2N1bWVudHMgc3lzdGVtXG4gICAgICBjb25zdCBmaWx0ZXJzOiBhbnkgPSB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgdXNlclJvbGUsXG4gICAgICB9O1xuXG4gICAgICAvLyBGaWx0ZXIgYnkgc3BlY2lmaWMgcmVzaWRlbmNlIGlmIHByb3ZpZGVkXG4gICAgICBpZiAoc3BlY2lmaWNSZXNpZGVuY2VJZCkge1xuICAgICAgICBmaWx0ZXJzLnJlc2lkZW5jZUlkID0gc3BlY2lmaWNSZXNpZGVuY2VJZDtcbiAgICAgIH1cblxuICAgICAgLy8gRmlsdGVyIGJ5IHNwZWNpZmljIGJ1aWxkaW5nIGlmIHByb3ZpZGVkXG4gICAgICBpZiAoc3BlY2lmaWNCdWlsZGluZ0lkKSB7XG4gICAgICAgIGZpbHRlcnMuYnVpbGRpbmdJZCA9IHNwZWNpZmljQnVpbGRpbmdJZDtcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRUeXBlID09PSAnYnVpbGRpbmcnKSB7XG4gICAgICAgIC8vIEZvciBidWlsZGluZyBkb2N1bWVudHMsIHNlYXJjaCBpbiBidWlsZGluZ3MgdXNlciBoYXMgYWNjZXNzIHRvXG4gICAgICAgIGlmIChidWlsZGluZ0lkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gR2V0IGFsbCBkb2N1bWVudHMgZm9yIGJ1aWxkaW5ncywgd2lsbCBmaWx0ZXIgbGF0ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudFR5cGUgPT09ICdyZXNpZGVudCcpIHtcbiAgICAgICAgLy8gRm9yIHJlc2lkZW50IGRvY3VtZW50cywgc2VhcmNoIGluIHJlc2lkZW5jZXMgdXNlciBoYXMgYWNjZXNzIHRvXG4gICAgICAgIGlmIChyZXNpZGVuY2VJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIEdldCBhbGwgZG9jdW1lbnRzIGZvciByZXNpZGVuY2VzLCB3aWxsIGZpbHRlciBsYXRlclxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENSSVRJQ0FMIERFQlVHIFBPSU5UOiBUaGlzIGlzIHdoZXJlIDUwMCBlcnJvcnMgbGlrZWx5IG9jY3VyXG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+OryBDUklUSUNBTDogQWJvdXQgdG8gY2FsbCBzdG9yYWdlLmdldERvY3VtZW50cyB3aXRoIGZpbHRlcnM6YCwgZmlsdGVycyk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+UpyBTdG9yYWdlIGluc3RhbmNlOmAsIHN0b3JhZ2UuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+TiiBGaWx0ZXJzIGJlaW5nIHBhc3NlZDpgLCBKU09OLnN0cmluZ2lmeShmaWx0ZXJzLCBudWxsLCAyKSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGRvY3VtZW50cyA9IGF3YWl0IHN0b3JhZ2UuZ2V0RG9jdW1lbnRzKGZpbHRlcnMpO1xuXG4gICAgICAvLyBDUklUSUNBTDogTG9nIHN1Y2Nlc3NmdWwgZGF0YWJhc2UgcmVzcG9uc2VcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDinIUgQ1JJVElDQUw6IHN0b3JhZ2UuZ2V0RG9jdW1lbnRzIFNVQ0NFU1MgLSByZXR1cm5lZCAke2RvY3VtZW50cz8ubGVuZ3RoIHx8IDB9IGRvY3VtZW50c2ApO1xuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCfk4sgRG9jdW1lbnQgcHJldmlldzpgLCBkb2N1bWVudHM/LnNsaWNlKDAsIDMpPy5tYXAoZCA9PiAoeyBcbiAgICAgICAgaWQ6IGQuaWQsIFxuICAgICAgICBuYW1lOiBkLm5hbWUsIFxuICAgICAgICB1cGxvYWRlZEJ5SWQ6IGQudXBsb2FkZWRCeUlkLFxuICAgICAgICBidWlsZGluZ0lkOiBkLmJ1aWxkaW5nSWQsXG4gICAgICAgIHJlc2lkZW5jZUlkOiBkLnJlc2lkZW5jZUlkIFxuICAgICAgfSkpKTtcblxuICAgICAgLy8gRGVidWcgbG9nZ2luZ1xuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RPQ1VNRU5UUyBBUEkgREVCVUddOicsIHtcbiAgICAgICAgZmlsdGVycyxcbiAgICAgICAgZG9jdW1lbnRzRm91bmQ6IGRvY3VtZW50cz8ubGVuZ3RoIHx8IDAsXG4gICAgICAgIHNwZWNpZmljUmVzaWRlbmNlSWQsXG4gICAgICAgIHVzZXJSb2xlLFxuICAgICAgICB1c2VySWQsXG4gICAgICB9KTtcblxuICAgICAgLy8gQXBwbHkgcm9sZS1iYXNlZCBmaWx0ZXJpbmcgd2l0aCB0ZW5hbnQgdmlzaWJpbGl0eSBydWxlc1xuICAgICAgY29uc3QgZmlsdGVyZWREb2N1bWVudFJlY29yZHMgPSBkb2N1bWVudHMuZmlsdGVyKChkb2MpID0+IHtcbiAgICAgICAgLy8gSWYgZmlsdGVyaW5nIGJ5IHNwZWNpZmljIGJ1aWxkaW5nLCBvbmx5IHNob3cgZG9jdW1lbnRzIGZvciB0aGF0IGJ1aWxkaW5nXG4gICAgICAgIGlmIChzcGVjaWZpY0J1aWxkaW5nSWQpIHtcbiAgICAgICAgICBpZiAoZG9jLmJ1aWxkaW5nSWQgIT09IHNwZWNpZmljQnVpbGRpbmdJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkbWluIGNhbiBzZWUgYWxsIGRvY3VtZW50c1xuICAgICAgICBpZiAodXNlclJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1hbmFnZXIgY2FuIHNlZSBhbGwgZG9jdW1lbnRzIGluIHRoZWlyIG9yZ2FuaXphdGlvblxuICAgICAgICBpZiAodXNlclJvbGUgPT09ICdtYW5hZ2VyJyAmJiBvcmdhbml6YXRpb25JZCkge1xuICAgICAgICAgIGlmIChkb2MuYnVpbGRpbmdJZCAmJiBidWlsZGluZ0lkcy5pbmNsdWRlcyhkb2MuYnVpbGRpbmdJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZG9jLnJlc2lkZW5jZUlkICYmIHJlc2lkZW5jZUlkcy5pbmNsdWRlcyhkb2MucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNpZGVudCBhY2Nlc3MgcnVsZXNcbiAgICAgICAgaWYgKHVzZXJSb2xlID09PSAncmVzaWRlbnQnKSB7XG4gICAgICAgICAgLy8gUmVzaWRlbnRzIGNhbiBzZWUgZG9jdW1lbnRzIGluIHRoZWlyIHJlc2lkZW5jZVxuICAgICAgICAgIGlmIChkb2MucmVzaWRlbmNlSWQgJiYgcmVzaWRlbmNlSWRzLmluY2x1ZGVzKGRvYy5yZXNpZGVuY2VJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXNpZGVudHMgY2FuIHNlZSBidWlsZGluZyBkb2N1bWVudHMgcmVsYXRlZCB0byB0aGVpciByZXNpZGVuY2VzXG4gICAgICAgICAgaWYgKGRvYy5idWlsZGluZ0lkKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBhbnkgb2YgdXNlcidzIHJlc2lkZW5jZXMgYmVsb25nIHRvIHRoaXMgYnVpbGRpbmdcbiAgICAgICAgICAgIGNvbnN0IHVzZXJCdWlsZGluZ0lkcyA9IHVzZXJSZXNpZGVuY2VzXG4gICAgICAgICAgICAgIC5tYXAoKHVyOiBhbnkpID0+IHVyLnJlc2lkZW5jZT8uYnVpbGRpbmdJZCB8fCB1ci51c2VyUmVzaWRlbmNlPy5yZXNpZGVuY2U/LmJ1aWxkaW5nSWQpXG4gICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICByZXR1cm4gdXNlckJ1aWxkaW5nSWRzLmluY2x1ZGVzKGRvYy5idWlsZGluZ0lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZW5hbnQgYWNjZXNzIHJ1bGVzIC0gbW9yZSByZXN0cmljdGl2ZVxuICAgICAgICBpZiAodXNlclJvbGUgPT09ICd0ZW5hbnQnKSB7XG4gICAgICAgICAgLy8gVGVuYW50cyBjYW4gb25seSBzZWUgZG9jdW1lbnRzIG1hcmtlZCBhcyB2aXNpYmxlIHRvIHRlbmFudHNcbiAgICAgICAgICBpZiAoIWRvYy5pc1Zpc2libGVUb1RlbmFudHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUZW5hbnRzIGNhbiBzZWUgdmlzaWJsZSBkb2N1bWVudHMgaW4gdGhlaXIgcmVzaWRlbmNlXG4gICAgICAgICAgaWYgKGRvYy5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jLnJlc2lkZW5jZUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGVuYW50cyBjYW4gc2VlIHZpc2libGUgYnVpbGRpbmcgZG9jdW1lbnRzIHJlbGF0ZWQgdG8gdGhlaXIgcmVzaWRlbmNlc1xuICAgICAgICAgIGlmIChkb2MuYnVpbGRpbmdJZCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgYW55IG9mIHVzZXIncyByZXNpZGVuY2VzIGJlbG9uZyB0byB0aGlzIGJ1aWxkaW5nXG4gICAgICAgICAgICBjb25zdCB1c2VyQnVpbGRpbmdJZHMgPSB1c2VyUmVzaWRlbmNlc1xuICAgICAgICAgICAgICAubWFwKCh1cjogYW55KSA9PiB1ci5yZXNpZGVuY2U/LmJ1aWxkaW5nSWQgfHwgdXIudXNlclJlc2lkZW5jZT8ucmVzaWRlbmNlPy5idWlsZGluZ0lkKVxuICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgcmV0dXJuIHVzZXJCdWlsZGluZ0lkcy5pbmNsdWRlcyhkb2MuYnVpbGRpbmdJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCBkb2N1bWVudCB0eXBlIGluZGljYXRvcnMgZm9yIGZyb250ZW5kIGNvbXBhdGliaWxpdHlcbiAgICAgIGNvbnN0IGVuaGFuY2VkRG9jdW1lbnRSZWNvcmRzID0gZmlsdGVyZWREb2N1bWVudFJlY29yZHMubWFwKChkb2MpID0+ICh7XG4gICAgICAgIC4uLmRvYyxcbiAgICAgICAgZG9jdW1lbnRDYXRlZ29yeTogZG9jLmJ1aWxkaW5nSWQgPyAnYnVpbGRpbmcnIDogJ3Jlc2lkZW50JyxcbiAgICAgICAgZW50aXR5VHlwZTogZG9jLmJ1aWxkaW5nSWQgPyAnYnVpbGRpbmcnIDogJ3Jlc2lkZW5jZScsXG4gICAgICAgIGVudGl0eUlkOiBkb2MuYnVpbGRpbmdJZCB8fCBkb2MucmVzaWRlbmNlSWQsXG4gICAgICAgIHVwbG9hZERhdGU6IGRvYy5jcmVhdGVkQXQsIC8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICB9KSk7XG5cbiAgICAgIGFsbERvY3VtZW50UmVjb3Jkcy5wdXNoKC4uLmVuaGFuY2VkRG9jdW1lbnRSZWNvcmRzKTtcblxuICAgICAgLy8gU29ydCBieSB1cGxvYWQgZGF0ZSwgbW9zdCByZWNlbnQgZmlyc3RcbiAgICAgIGFsbERvY3VtZW50UmVjb3Jkcy5zb3J0KFxuICAgICAgICAoYSwgYikgPT4gbmV3IERhdGUoYi51cGxvYWREYXRlKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLnVwbG9hZERhdGUpLmdldFRpbWUoKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRvY3VtZW50czogYWxsRG9jdW1lbnRSZWNvcmRzLFxuICAgICAgICB0b3RhbDogYWxsRG9jdW1lbnRSZWNvcmRzLmxlbmd0aCxcbiAgICAgICAgYnVpbGRpbmdDb3VudDogYWxsRG9jdW1lbnRSZWNvcmRzLmZpbHRlcigoZCkgPT4gZC5kb2N1bWVudENhdGVnb3J5ID09PSAnYnVpbGRpbmcnKS5sZW5ndGgsXG4gICAgICAgIHJlc2lkZW50Q291bnQ6IGFsbERvY3VtZW50UmVjb3Jkcy5maWx0ZXIoKGQpID0+IGQuZG9jdW1lbnRDYXRlZ29yeSA9PT0gJ3Jlc2lkZW50JykubGVuZ3RoLFxuICAgICAgICBsZWdhY3lDb3VudDogYWxsRG9jdW1lbnRSZWNvcmRzLmZpbHRlcigoZCkgPT4gZC5kb2N1bWVudENhdGVnb3J5ID09PSAnbGVnYWN5JykubGVuZ3RoLFxuICAgICAgfTtcbiAgICAgIC8vIExvZyBzdWNjZXNzZnVsIGRvY3VtZW50IGFjY2Vzc1xuICAgICAgbG9nU2VjdXJpdHlFdmVudCgnRE9DVU1FTlRfTElTVF9BQ0NFU1MnLCB1c2VyLCB0cnVlLCB1bmRlZmluZWQsIHtcbiAgICAgICAgZG9jdW1lbnRzUmV0dXJuZWQ6IGFsbERvY3VtZW50UmVjb3Jkcy5sZW5ndGgsXG4gICAgICAgIGZpbHRlcnM6IHsgZG9jdW1lbnRUeXBlLCBzcGVjaWZpY1Jlc2lkZW5jZUlkLCBzcGVjaWZpY0J1aWxkaW5nSWQgfVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHJlcy5qc29uKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChfZXJyb3I6IGFueSkge1xuICAgICAgY29uc3QgZXJyb3JFbnRyeSA9IGxvZ0Vycm9yKCdHRVQgL2FwaS9kb2N1bWVudHMnLCBfZXJyb3IsIHJlcS51c2VyKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggZG9jdW1lbnRzJyxcbiAgICAgICAgZXJyb3JfaWQ6IGVycm9yRW50cnkudGltZXN0YW1wLFxuICAgICAgICBkZWJ1Z19pbmZvOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IF9lcnJvci5tZXNzYWdlIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdldCBhIHNwZWNpZmljIGRvY3VtZW50IGJ5IElEXG4gIGFwcC5nZXQoJy9hcGkvZG9jdW1lbnRzLzppZCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXI7XG4gICAgICBjb25zdCB1c2VyUm9sZSA9IHVzZXIucm9sZTtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXIuaWQ7XG4gICAgICBjb25zdCBkb2N1bWVudElkID0gcmVxLnBhcmFtcy5pZDtcbiAgICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IHJlcS5xdWVyeS50eXBlIGFzIHN0cmluZzsgLy8gT3B0aW9uYWwgdHlwZSBoaW50XG5cbiAgICAgIC8vIEdldCB1c2VyJ3Mgb3JnYW5pemF0aW9uIGFuZCByZXNpZGVuY2VzIGZvciBmaWx0ZXJpbmdcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKHVzZXJJZCk7XG4gICAgICBjb25zdCByZXNpZGVuY2VzID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyUmVzaWRlbmNlcyh1c2VySWQpO1xuICAgICAgY29uc3QgYnVpbGRpbmdzID0gYXdhaXQgc3RvcmFnZS5nZXRCdWlsZGluZ3MoKTtcblxuICAgICAgY29uc3Qgb3JnYW5pemF0aW9uSWQgPSBvcmdhbml6YXRpb25zLmxlbmd0aCA+IDAgPyBvcmdhbml6YXRpb25zWzBdLm9yZ2FuaXphdGlvbklkIDogdW5kZWZpbmVkO1xuICAgICAgY29uc3QgcmVzaWRlbmNlSWRzID0gcmVzaWRlbmNlcy5tYXAoKHVyKSA9PiB1ci5yZXNpZGVuY2VJZCk7XG4gICAgICBjb25zdCBidWlsZGluZ0lkcyA9IGJ1aWxkaW5ncy5tYXAoKGIpID0+IGIuaWQpO1xuXG4gICAgICBsZXQgZG9jdW1lbnQ6IERvY3VtZW50UmVjb3JkIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBkb2N1bWVudCBpbiB0aGUgYXBwcm9wcmlhdGUgdGFibGUocylcbiAgICAgIGNvbnN0IGhhc05ld0RvY3VtZW50UmVjb3JkTWV0aG9kcyA9ICdnZXRCdWlsZGluZ0RvY3VtZW50UmVjb3JkJyBpbiBzdG9yYWdlO1xuXG4gICAgICBpZiAoaGFzTmV3RG9jdW1lbnRSZWNvcmRNZXRob2RzKSB7XG4gICAgICAgIGlmICghZG9jdW1lbnRUeXBlIHx8IGRvY3VtZW50VHlwZSA9PT0gJ2J1aWxkaW5nJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb2N1bWVudCA9IGF3YWl0IChzdG9yYWdlIGFzIGFueSkuZ2V0QnVpbGRpbmdEb2N1bWVudFJlY29yZChcbiAgICAgICAgICAgICAgZG9jdW1lbnRJZCxcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICAgIGJ1aWxkaW5nSWRzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50KSB7XG4gICAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmRvY3VtZW50Q2F0ZWdvcnkgPSAnYnVpbGRpbmcnO1xuICAgICAgICAgICAgICAoZG9jdW1lbnQgYXMgYW55KS5lbnRpdHlUeXBlID0gJ2J1aWxkaW5nJztcbiAgICAgICAgICAgICAgKGRvY3VtZW50IGFzIGFueSkuZW50aXR5SWQgPSAoZG9jdW1lbnQgYXMgYW55KS5idWlsZGluZ0lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGZldGNoaW5nIGJ1aWxkaW5nIGRvY3VtZW50OicsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZG9jdW1lbnQgJiYgKCFkb2N1bWVudFR5cGUgfHwgZG9jdW1lbnRUeXBlID09PSAncmVzaWRlbnQnKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb2N1bWVudCA9IGF3YWl0IChzdG9yYWdlIGFzIGFueSkuZ2V0UmVzaWRlbnREb2N1bWVudFJlY29yZChcbiAgICAgICAgICAgICAgZG9jdW1lbnRJZCxcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICAgIHJlc2lkZW5jZUlkc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgICAgICAgICAoZG9jdW1lbnQgYXMgYW55KS5kb2N1bWVudENhdGVnb3J5ID0gJ3Jlc2lkZW50JztcbiAgICAgICAgICAgICAgKGRvY3VtZW50IGFzIGFueSkuZW50aXR5VHlwZSA9ICdyZXNpZGVuY2UnO1xuICAgICAgICAgICAgICAoZG9jdW1lbnQgYXMgYW55KS5lbnRpdHlJZCA9IChkb2N1bWVudCBhcyBhbnkpLnJlc2lkZW5jZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGZldGNoaW5nIHJlc2lkZW50IGRvY3VtZW50OicsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGYWxsYmFjayB0byBsZWdhY3kgZG9jdW1lbnRzIGlmIG5vdCBmb3VuZCBhbmQgbm8gdHlwZSBzcGVjaWZpZWRcbiAgICAgIGlmICghZG9jdW1lbnQgJiYgIWRvY3VtZW50VHlwZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRvY3VtZW50ID0gYXdhaXQgc3RvcmFnZS5nZXREb2N1bWVudChkb2N1bWVudElkKTtcbiAgICAgICAgICBpZiAoZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmRvY3VtZW50Q2F0ZWdvcnkgPSAnbGVnYWN5JztcbiAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmVudGl0eVR5cGUgPSAnbGVnYWN5JztcbiAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmVudGl0eUlkID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBFcnJvciBmZXRjaGluZyBsZWdhY3kgZG9jdW1lbnQ6JywgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnRG9jdW1lbnRSZWNvcmQgbm90IGZvdW5kIG9yIGFjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICByZXMuanNvbihkb2N1bWVudCk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZldGNoaW5nIGRvY3VtZW50OicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBkb2N1bWVudCcgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBDcmVhdGUgYSBuZXcgZG9jdW1lbnQgKHN1cHBvcnRzIGJvdGggZmlsZSB1cGxvYWQgYW5kIHRleHQtb25seSBkb2N1bWVudHMpXG4gIGFwcC5wb3N0KCcvYXBpL2RvY3VtZW50cycsIHJlcXVpcmVBdXRoLCB1cGxvYWQuc2luZ2xlKCdmaWxlJyksIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IHVzZXJSb2xlID0gdXNlci5yb2xlO1xuICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgIGNvbnN0IHsgZG9jdW1lbnRUeXBlLCBidWlsZGluZ0lkLCByZXNpZGVuY2VJZCwgdGV4dENvbnRlbnQsIC4uLm90aGVyRGF0YSB9ID0gcmVxLmJvZHk7XG5cbiAgICAgIC8vIEVuaGFuY2VkIHJhdGUgbGltaXRpbmcgY2hlY2tcbiAgICAgIGNvbnN0IHJhdGVMaW1pdENoZWNrID0gY2hlY2tVcGxvYWRSYXRlTGltaXQodXNlcklkKTtcbiAgICAgIGlmICghcmF0ZUxpbWl0Q2hlY2suYWxsb3dlZCkge1xuICAgICAgICBsb2dTZWN1cml0eUV2ZW50KCdVUExPQURfUkFURV9MSU1JVF9FWENFRURFRCcsIHVzZXIsIGZhbHNlLCB1bmRlZmluZWQsIHsgZXJyb3I6IHJhdGVMaW1pdENoZWNrLmVycm9yIH0pO1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MjkpLmpzb24oeyBtZXNzYWdlOiByYXRlTGltaXRDaGVjay5lcnJvciB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVmFsaWRhdGUgcGVybWlzc2lvbnMgLSBvbmx5IGFkbWluLCBtYW5hZ2VyLCBhbmQgcmVzaWRlbnQgY2FuIGNyZWF0ZSBkb2N1bWVudHNcbiAgICAgIGlmICghWydhZG1pbicsICdtYW5hZ2VyJywgJ3Jlc2lkZW50J10uaW5jbHVkZXModXNlclJvbGUpKSB7XG4gICAgICAgIGxvZ1NlY3VyaXR5RXZlbnQoJ1VOQVVUSE9SSVpFRF9VUExPQURfQVRURU1QVCcsIHVzZXIsIGZhbHNlLCB1bmRlZmluZWQsIHsgcmVxdWlyZWRSb2xlczogWydhZG1pbicsICdtYW5hZ2VyJywgJ3Jlc2lkZW50J10gfSk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IG1lc3NhZ2U6ICdJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMgdG8gY3JlYXRlIGRvY3VtZW50cycgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSB0ZXh0LW9ubHkgZG9jdW1lbnQgb3IgZmlsZSB1cGxvYWRcbiAgICAgIGNvbnN0IGlzVGV4dERvY3VtZW50UmVjb3JkID0gIXJlcS5maWxlICYmIHRleHRDb250ZW50O1xuICAgICAgY29uc3QgaXNGaWxlRG9jdW1lbnRSZWNvcmQgPSAhIXJlcS5maWxlO1xuXG4gICAgICBpZiAoIWlzVGV4dERvY3VtZW50UmVjb3JkICYmICFpc0ZpbGVEb2N1bWVudFJlY29yZCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnRWl0aGVyIGEgZmlsZSBvciB0ZXh0IGNvbnRlbnQgaXMgcmVxdWlyZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3IgdGV4dCBkb2N1bWVudHMsIGNyZWF0ZSB1bmlmaWVkIGRvY3VtZW50IGRpcmVjdGx5XG4gICAgICBpZiAoaXNUZXh0RG9jdW1lbnRSZWNvcmQpIHtcbiAgICAgICAgLy8gQ3JlYXRlIHRleHQgZG9jdW1lbnQgd2l0aG91dCBmaWxlIHN0b3JhZ2VcbiAgICAgICAgY29uc3QgZG9jdW1lbnREYXRhOiBJbnNlcnREb2N1bWVudCA9IHtcbiAgICAgICAgICBuYW1lOiBvdGhlckRhdGEubmFtZSB8fCAnVW50aXRsZWQgRG9jdW1lbnRSZWNvcmQnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBvdGhlckRhdGEuZGVzY3JpcHRpb24gfHwgdGV4dENvbnRlbnQuc3Vic3RyaW5nKDAsIDIwMCkgKyAodGV4dENvbnRlbnQubGVuZ3RoID4gMjAwID8gJy4uLicgOiAnJyksXG4gICAgICAgICAgZG9jdW1lbnRUeXBlOiBkb2N1bWVudFR5cGUgfHwgJ290aGVyJyxcbiAgICAgICAgICBmaWxlUGF0aDogYHRleHQtZG9jdW1lbnRzLyR7dXNlcklkfS8ke3V1aWR2NCgpfS50eHRgLCAvLyBWaXJ0dWFsIHBhdGggZm9yIHRleHQgZG9jdW1lbnRzXG4gICAgICAgICAgaXNWaXNpYmxlVG9UZW5hbnRzOiBvdGhlckRhdGEuaXNWaXNpYmxlVG9UZW5hbnRzID09PSAndHJ1ZScgfHwgb3RoZXJEYXRhLmlzVmlzaWJsZVRvVGVuYW50cyA9PT0gdHJ1ZSxcbiAgICAgICAgICByZXNpZGVuY2VJZDogcmVzaWRlbmNlSWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGJ1aWxkaW5nSWQ6IGJ1aWxkaW5nSWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIHVwbG9hZGVkQnlJZDogdXNlcklkLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFBlcm1pc3Npb24gY2hlY2tzXG4gICAgICAgIGlmIChidWlsZGluZ0lkICYmIHVzZXJSb2xlID09PSAnbWFuYWdlcicpIHtcbiAgICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyT3JnYW5pemF0aW9ucyh1c2VySWQpO1xuICAgICAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbklkID0gb3JnYW5pemF0aW9ucy5sZW5ndGggPiAwID8gb3JnYW5pemF0aW9uc1swXS5vcmdhbml6YXRpb25JZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb25zdCBidWlsZGluZyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmcoYnVpbGRpbmdJZCk7XG4gICAgICAgICAgaWYgKCFidWlsZGluZyB8fCBidWlsZGluZy5vcmdhbml6YXRpb25JZCAhPT0gb3JnYW5pemF0aW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IG1lc3NhZ2U6ICdDYW5ub3QgYXNzaWduIGRvY3VtZW50IHRvIGJ1aWxkaW5nIG91dHNpZGUgeW91ciBvcmdhbml6YXRpb24nIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNpZGVuY2VJZCAmJiB1c2VyUm9sZSA9PT0gJ3Jlc2lkZW50Jykge1xuICAgICAgICAgIGNvbnN0IHJlc2lkZW5jZXMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJSZXNpZGVuY2VzKHVzZXJJZCk7XG4gICAgICAgICAgY29uc3QgcmVzaWRlbmNlSWRzID0gcmVzaWRlbmNlcy5tYXAoKHVyKSA9PiB1ci5yZXNpZGVuY2VJZCk7XG4gICAgICAgICAgaWYgKCFyZXNpZGVuY2VJZHMuaW5jbHVkZXMocmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnQ2Fubm90IGFzc2lnbiBkb2N1bWVudCB0byByZXNpZGVuY2UgeW91IGRvIG5vdCBvd24nIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNhdmUgdGV4dCBjb250ZW50IHRvIGxvY2FsIGZpbGUgc3lzdGVtIGZvciB0ZXh0IGRvY3VtZW50c1xuICAgICAgICBsZXQgZmlsZU5hbWU6IHN0cmluZztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB0ZXh0RmlsZVBhdGggPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3VwbG9hZHMnLCAndGV4dC1kb2N1bWVudHMnLCB1c2VySWQpO1xuICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyh0ZXh0RmlsZVBhdGgpKSB7XG4gICAgICAgICAgICBmcy5ta2RpclN5bmModGV4dEZpbGVQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmlsZU5hbWUgPSBgJHt1dWlkdjQoKX0udHh0YDtcbiAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGguam9pbih0ZXh0RmlsZVBhdGgsIGZpbGVOYW1lKTtcbiAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZ1bGxQYXRoLCB0ZXh0Q29udGVudCwgJ3V0ZjgnKTtcbiAgICAgICAgfSBjYXRjaCAoZnNFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyB0ZXh0IGRvY3VtZW50IHRvIGZpbGVzeXN0ZW06JywgZnNFcnJvcik7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byBzYXZlIHRleHQgZG9jdW1lbnQnIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgZmlsZSBwYXRoIHRvIGFjdHVhbCBsb2NhbCBwYXRoXG4gICAgICAgIGRvY3VtZW50RGF0YS5maWxlUGF0aCA9IGB0ZXh0LWRvY3VtZW50cy8ke3VzZXJJZH0vJHtmaWxlTmFtZX1gO1xuXG4gICAgICAgIC8vIENyZWF0ZSBkb2N1bWVudCByZWNvcmQgaW4gZGF0YWJhc2VcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBhd2FpdCBzdG9yYWdlLmNyZWF0ZURvY3VtZW50KGRvY3VtZW50RGF0YSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdUZXh0IGRvY3VtZW50IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgICAgICBkb2N1bWVudDoge1xuICAgICAgICAgICAgLi4uZG9jdW1lbnQsXG4gICAgICAgICAgICBkb2N1bWVudENhdGVnb3J5OiBidWlsZGluZ0lkID8gJ2J1aWxkaW5nJyA6ICdyZXNpZGVudCcsXG4gICAgICAgICAgICBlbnRpdHlUeXBlOiBidWlsZGluZ0lkID8gJ2J1aWxkaW5nJyA6ICdyZXNpZGVuY2UnLFxuICAgICAgICAgICAgZW50aXR5SWQ6IGJ1aWxkaW5nSWQgfHwgcmVzaWRlbmNlSWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBmaWxlIHVwbG9hZHMgKGV4aXN0aW5nIGxvZ2ljKVxuICAgICAgLy8gRGV0ZXJtaW5lIGRvY3VtZW50IHR5cGUgYmFzZWQgb24gYnVpbGRpbmdJZC9yZXNpZGVuY2VJZCBpZiBub3QgZXhwbGljaXRseSBwcm92aWRlZFxuICAgICAgbGV0IGZpbmFsRG9jdW1lbnRSZWNvcmRUeXBlID0gZG9jdW1lbnRUeXBlO1xuICAgICAgaWYgKCFmaW5hbERvY3VtZW50UmVjb3JkVHlwZSkge1xuICAgICAgICBpZiAoYnVpbGRpbmdJZCAmJiAhcmVzaWRlbmNlSWQpIHtcbiAgICAgICAgICBmaW5hbERvY3VtZW50UmVjb3JkVHlwZSA9ICdidWlsZGluZyc7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzaWRlbmNlSWQgJiYgIWJ1aWxkaW5nSWQpIHtcbiAgICAgICAgICBmaW5hbERvY3VtZW50UmVjb3JkVHlwZSA9ICdyZXNpZGVudCc7XG4gICAgICAgIH0gZWxzZSBpZiAoYnVpbGRpbmdJZCAmJiByZXNpZGVuY2VJZCkge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIHNwZWNpZnkgZG9jdW1lbnRUeXBlIHdoZW4gcHJvdmlkaW5nIGJvdGggYnVpbGRpbmdJZCBhbmQgcmVzaWRlbmNlSWQnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAnTXVzdCBwcm92aWRlIGVpdGhlciBidWlsZGluZ0lkIChmb3IgYnVpbGRpbmcgZG9jdW1lbnRzKSBvciByZXNpZGVuY2VJZCAoZm9yIHJlc2lkZW50IGRvY3VtZW50cyknLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbERvY3VtZW50UmVjb3JkVHlwZSA9PT0gJ2J1aWxkaW5nJykge1xuICAgICAgICAvLyBWYWxpZGF0ZSBhbmQgY3JlYXRlIGJ1aWxkaW5nIGRvY3VtZW50XG4gICAgICAgIGlmICghYnVpbGRpbmdJZCkge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdidWlsZGluZ0lkIGlzIHJlcXVpcmVkIGZvciBidWlsZGluZyBkb2N1bWVudHMnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IGNyZWF0ZUJ1aWxkaW5nRG9jdW1lbnRTY2hlbWEucGFyc2Uoe1xuICAgICAgICAgIC4uLm90aGVyRGF0YSxcbiAgICAgICAgICBidWlsZGluZ0lkLFxuICAgICAgICAgIHVwbG9hZGVkQnlJZDogdXNlcklkLFxuICAgICAgICAgIGZpbGVQYXRoOiByZXEuZmlsZSA/IHJlcS5maWxlLnBhdGggOiB1bmRlZmluZWQsXG4gICAgICAgICAgLy8gZmlsZU5hbWUgaXMgaGFuZGxlZCB2aWEgbmFtZSBmaWVsZFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQZXJtaXNzaW9uIGNoZWNrcyBmb3IgYnVpbGRpbmcgZG9jdW1lbnRzXG4gICAgICAgIGlmICh1c2VyUm9sZSA9PT0gJ21hbmFnZXInKSB7XG4gICAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlck9yZ2FuaXphdGlvbnModXNlcklkKTtcbiAgICAgICAgICBjb25zdCBvcmdhbml6YXRpb25JZCA9XG4gICAgICAgICAgICBvcmdhbml6YXRpb25zLmxlbmd0aCA+IDAgPyBvcmdhbml6YXRpb25zWzBdLm9yZ2FuaXphdGlvbklkIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gYXdhaXQgc3RvcmFnZS5nZXRCdWlsZGluZyhidWlsZGluZ0lkKTtcbiAgICAgICAgICBpZiAoIWJ1aWxkaW5nIHx8IGJ1aWxkaW5nLm9yZ2FuaXphdGlvbklkICE9PSBvcmdhbml6YXRpb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgICAuc3RhdHVzKDQwMylcbiAgICAgICAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnQ2Fubm90IGFzc2lnbiBkb2N1bWVudCB0byBidWlsZGluZyBvdXRzaWRlIHlvdXIgb3JnYW5pemF0aW9uJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlclJvbGUgPT09ICdyZXNpZGVudCcpIHtcbiAgICAgICAgICBjb25zdCByZXNpZGVuY2VzID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyUmVzaWRlbmNlcyh1c2VySWQpO1xuICAgICAgICAgIGNvbnN0IGhhc1Jlc2lkZW5jZUluQnVpbGRpbmcgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIHJlc2lkZW5jZXMubWFwKGFzeW5jICh1cikgPT4ge1xuICAgICAgICAgICAgICBjb25zdCByZXNpZGVuY2UgPSBhd2FpdCBzdG9yYWdlLmdldFJlc2lkZW5jZSh1ci5yZXNpZGVuY2VJZCk7XG4gICAgICAgICAgICAgIHJldHVybiByZXNpZGVuY2UgJiYgcmVzaWRlbmNlLmJ1aWxkaW5nSWQgPT09IGJ1aWxkaW5nSWQ7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAoIWhhc1Jlc2lkZW5jZUluQnVpbGRpbmcuc29tZShCb29sZWFuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgICAuc3RhdHVzKDQwMylcbiAgICAgICAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnQ2Fubm90IGFzc2lnbiBkb2N1bWVudCB0byBidWlsZGluZyB3aGVyZSB5b3UgaGF2ZSBubyByZXNpZGVuY2UnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSB1bmlmaWVkIGRvY3VtZW50IGluc3RlYWQgb2Ygc2VwYXJhdGUgYnVpbGRpbmcgZG9jdW1lbnRcbiAgICAgICAgY29uc3QgdW5pZmllZERvY3VtZW50OiBJbnNlcnREb2N1bWVudCA9IHtcbiAgICAgICAgICBuYW1lOiB2YWxpZGF0ZWREYXRhLm5hbWUgfHwgdmFsaWRhdGVkRGF0YS50aXRsZSB8fCAnVW50aXRsZWQnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YWxpZGF0ZWREYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGRvY3VtZW50VHlwZTogdmFsaWRhdGVkRGF0YS50eXBlLFxuICAgICAgICAgIGZpbGVQYXRoOiB2YWxpZGF0ZWREYXRhLmZpbGVQYXRoIHx8IGB0ZW1wLXBhdGgtJHtEYXRlLm5vdygpfWAsXG4gICAgICAgICAgaXNWaXNpYmxlVG9UZW5hbnRzOiB2YWxpZGF0ZWREYXRhLmlzVmlzaWJsZVRvVGVuYW50cyB8fCBmYWxzZSxcbiAgICAgICAgICByZXNpZGVuY2VJZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJ1aWxkaW5nSWQ6IHZhbGlkYXRlZERhdGEuYnVpbGRpbmdJZCxcbiAgICAgICAgICB1cGxvYWRlZEJ5SWQ6IHZhbGlkYXRlZERhdGEudXBsb2FkZWRCeUlkLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGRvY3VtZW50ID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVEb2N1bWVudCh1bmlmaWVkRG9jdW1lbnQpIDtcblxuICAgICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZSBhZnRlciBzdWNjZXNzZnVsIHVwbG9hZFxuICAgICAgICBpZiAocmVxLmZpbGU/LnBhdGgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcbiAgICAgICAgICB9IGNhdGNoIChjbGVhbnVwRXJyb3IpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICAgICAgLi4uZG9jdW1lbnQsXG4gICAgICAgICAgZG9jdW1lbnRDYXRlZ29yeTogJ2J1aWxkaW5nJyxcbiAgICAgICAgICBlbnRpdHlUeXBlOiAnYnVpbGRpbmcnLFxuICAgICAgICAgIGVudGl0eUlkOiBkb2N1bWVudC5idWlsZGluZ0lkLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoZmluYWxEb2N1bWVudFJlY29yZFR5cGUgPT09ICdyZXNpZGVudCcpIHtcbiAgICAgICAgLy8gVmFsaWRhdGUgYW5kIGNyZWF0ZSByZXNpZGVudCBkb2N1bWVudFxuICAgICAgICBpZiAoIXJlc2lkZW5jZUlkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgLnN0YXR1cyg0MDApXG4gICAgICAgICAgICAuanNvbih7IG1lc3NhZ2U6ICdyZXNpZGVuY2VJZCBpcyByZXF1aXJlZCBmb3IgcmVzaWRlbnQgZG9jdW1lbnRzJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZERhdGEgPSBjcmVhdGVSZXNpZGVudERvY3VtZW50U2NoZW1hLnBhcnNlKHtcbiAgICAgICAgICAuLi5vdGhlckRhdGEsXG4gICAgICAgICAgcmVzaWRlbmNlSWQsXG4gICAgICAgICAgdXBsb2FkZWRCeUlkOiB1c2VySWQsXG4gICAgICAgICAgZmlsZVBhdGg6IHJlcS5maWxlID8gcmVxLmZpbGUucGF0aCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBmaWxlTmFtZSBpcyBoYW5kbGVkIHZpYSBuYW1lIGZpZWxkXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFBlcm1pc3Npb24gY2hlY2tzIGZvciByZXNpZGVudCBkb2N1bWVudHNcbiAgICAgICAgaWYgKHVzZXJSb2xlID09PSAnbWFuYWdlcicpIHtcbiAgICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyT3JnYW5pemF0aW9ucyh1c2VySWQpO1xuICAgICAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbklkID1cbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbnMubGVuZ3RoID4gMCA/IG9yZ2FuaXphdGlvbnNbMF0ub3JnYW5pemF0aW9uSWQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3QgcmVzaWRlbmNlID0gYXdhaXQgc3RvcmFnZS5nZXRSZXNpZGVuY2UocmVzaWRlbmNlSWQpO1xuICAgICAgICAgIGlmIChyZXNpZGVuY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gYXdhaXQgc3RvcmFnZS5nZXRCdWlsZGluZyhyZXNpZGVuY2UuYnVpbGRpbmdJZCk7XG4gICAgICAgICAgICBpZiAoIWJ1aWxkaW5nIHx8IGJ1aWxkaW5nLm9yZ2FuaXphdGlvbklkICE9PSBvcmdhbml6YXRpb25JZCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICAgICAgLnN0YXR1cyg0MDMpXG4gICAgICAgICAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnQ2Fubm90IGFzc2lnbiBkb2N1bWVudCB0byByZXNpZGVuY2Ugb3V0c2lkZSB5b3VyIG9yZ2FuaXphdGlvbicgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdSZXNpZGVuY2Ugbm90IGZvdW5kJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXNlclJvbGUgPT09ICdyZXNpZGVudCcpIHtcbiAgICAgICAgICBjb25zdCByZXNpZGVuY2VzID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyUmVzaWRlbmNlcyh1c2VySWQpO1xuICAgICAgICAgIGNvbnN0IHJlc2lkZW5jZUlkcyA9IHJlc2lkZW5jZXMubWFwKCh1cikgPT4gdXIucmVzaWRlbmNlSWQpO1xuXG4gICAgICAgICAgaWYgKCFyZXNpZGVuY2VJZHMuaW5jbHVkZXMocmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzXG4gICAgICAgICAgICAgIC5zdGF0dXMoNDAzKVxuICAgICAgICAgICAgICAuanNvbih7IG1lc3NhZ2U6ICdDYW5ub3QgYXNzaWduIGRvY3VtZW50IHRvIHJlc2lkZW5jZSB5b3UgZG8gbm90IG93bicgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCB0byB1bmlmaWVkIGRvY3VtZW50IGZvcm1hdFxuICAgICAgICBjb25zdCB1bmlmaWVkRG9jdW1lbnQ6IEluc2VydERvY3VtZW50ID0ge1xuICAgICAgICAgIG5hbWU6IHZhbGlkYXRlZERhdGEubmFtZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIGRvY3VtZW50VHlwZTogdmFsaWRhdGVkRGF0YS50eXBlLFxuICAgICAgICAgIGZpbGVQYXRoOiB2YWxpZGF0ZWREYXRhLmZpbGVQYXRoIHx8IGB0ZW1wLXBhdGgtJHtEYXRlLm5vdygpfWAsXG4gICAgICAgICAgaXNWaXNpYmxlVG9UZW5hbnRzOiB2YWxpZGF0ZWREYXRhLmlzVmlzaWJsZVRvVGVuYW50cyxcbiAgICAgICAgICByZXNpZGVuY2VJZDogdmFsaWRhdGVkRGF0YS5yZXNpZGVuY2VJZCxcbiAgICAgICAgICBidWlsZGluZ0lkOiB1bmRlZmluZWQsXG4gICAgICAgICAgdXBsb2FkZWRCeUlkOiB2YWxpZGF0ZWREYXRhLnVwbG9hZGVkQnlJZCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGF3YWl0IHN0b3JhZ2UuY3JlYXRlRG9jdW1lbnQodW5pZmllZERvY3VtZW50KSA7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk50gQ3JlYXRlZCByZXNpZGVudCBkb2N1bWVudDonLCBkb2N1bWVudCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OdIERvY3VtZW50UmVjb3JkIElEOicsIGRvY3VtZW50LmlkKTtcblxuICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAuLi5kb2N1bWVudCxcbiAgICAgICAgICBkb2N1bWVudENhdGVnb3J5OiAncmVzaWRlbnQnLFxuICAgICAgICAgIGVudGl0eVR5cGU6ICdyZXNpZGVuY2UnLFxuICAgICAgICAgIGVudGl0eUlkOiBkb2N1bWVudC5yZXNpZGVuY2VJZCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zb2xlLmxvZygn8J+TpCBTZW5kaW5nIHJlc3BvbnNlOicsIHJlc3BvbnNlKTtcbiAgICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24ocmVzcG9uc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBkb2N1bWVudFR5cGUuIE11c3QgYmUgZWl0aGVyIFxcXCJidWlsZGluZ1xcXCIgb3IgXFxcInJlc2lkZW50XFxcIicsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKF9lcnJvcjogYW55KSB7XG4gICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZSBvbiBlcnJvclxuICAgICAgaWYgKHJlcS5maWxlPy5wYXRoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcbiAgICAgICAgfSBjYXRjaCAoY2xlYW51cEVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gRmFpbGVkIHRvIGNsZWFudXAgdGVtcG9yYXJ5IGZpbGU6JywgY2xlYW51cEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgY3JlYXRpbmcgZG9jdW1lbnQ6JywgX2Vycm9yKTtcbiAgICAgIFxuICAgICAgaWYgKF9lcnJvciBpbnN0YW5jZW9mIHouWm9kRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBkb2N1bWVudCBkYXRhJyxcbiAgICAgICAgICBlcnJvcnM6IF9lcnJvci5pc3N1ZXMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gY3JlYXRlIGRvY3VtZW50JyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVwZGF0ZSBhIGRvY3VtZW50XG4gIGFwcC5wdXQoJy9hcGkvZG9jdW1lbnRzLzppZCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXI7XG4gICAgICBjb25zdCB1c2VyUm9sZSA9IHVzZXIucm9sZTtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXIuaWQ7XG4gICAgICBjb25zdCBkb2N1bWVudElkID0gcmVxLnBhcmFtcy5pZDtcbiAgICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IHJlcS5xdWVyeS50eXBlIGFzIHN0cmluZzsgLy8gT3B0aW9uYWwgdHlwZSBoaW50XG5cbiAgICAgIC8vIEdldCB1c2VyJ3Mgb3JnYW5pemF0aW9uIGZvciBwZXJtaXNzaW9uIGNoZWNraW5nXG4gICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyT3JnYW5pemF0aW9ucyh1c2VySWQpO1xuICAgICAgY29uc3QgcmVzaWRlbmNlcyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlclJlc2lkZW5jZXModXNlcklkKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5ncyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmdzKCk7XG5cbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbklkID0gb3JnYW5pemF0aW9ucy5sZW5ndGggPiAwID8gb3JnYW5pemF0aW9uc1swXS5vcmdhbml6YXRpb25JZCA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IHJlc2lkZW5jZUlkcyA9IHJlc2lkZW5jZXMubWFwKCh1cikgPT4gdXIucmVzaWRlbmNlSWQpO1xuICAgICAgY29uc3QgYnVpbGRpbmdJZHMgPSBidWlsZGluZ3MubWFwKChiKSA9PiBiLmlkKTtcblxuICAgICAgLy8gVXNlIHVuaWZpZWQgZG9jdW1lbnRzIHN5c3RlbSBmb3IgdXBkYXRlc1xuICAgICAgbGV0IHVwZGF0ZWREb2N1bWVudDogdW5rbm93biA9IG51bGw7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZERhdGEgPSBjcmVhdGVEb2N1bWVudFNjaGVtYS5wYXJ0aWFsKCkucGFyc2UocmVxLmJvZHkpO1xuICAgICAgICB1cGRhdGVkRG9jdW1lbnQgPSBhd2FpdCBzdG9yYWdlLnVwZGF0ZURvY3VtZW50KGRvY3VtZW50SWQsIHZhbGlkYXRlZERhdGEpO1xuXG4gICAgICAgIGlmICh1cGRhdGVkRG9jdW1lbnQpIHtcbiAgICAgICAgICAvLyBBZGQgY29tcGF0aWJpbGl0eSBmaWVsZHMgZm9yIGZyb250ZW5kXG4gICAgICAgICAgKHVwZGF0ZWREb2N1bWVudCBhcyBhbnkpLmRvY3VtZW50Q2F0ZWdvcnkgPSAodXBkYXRlZERvY3VtZW50IGFzIGFueSkuYnVpbGRpbmdJZCA/ICdidWlsZGluZycgOiAncmVzaWRlbnQnO1xuICAgICAgICAgICh1cGRhdGVkRG9jdW1lbnQgYXMgYW55KS5lbnRpdHlUeXBlID0gKHVwZGF0ZWREb2N1bWVudCBhcyBhbnkpLmJ1aWxkaW5nSWQgPyAnYnVpbGRpbmcnIDogJ3Jlc2lkZW5jZSc7XG4gICAgICAgICAgKHVwZGF0ZWREb2N1bWVudCBhcyBhbnkpLmVudGl0eUlkID0gKHVwZGF0ZWREb2N1bWVudCBhcyBhbnkpLmJ1aWxkaW5nSWQgfHwgKHVwZGF0ZWREb2N1bWVudCBhcyBhbnkpLnJlc2lkZW5jZUlkO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGluIGRvY3VtZW50IHVwZGF0ZTonLCBlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF1cGRhdGVkRG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0RvY3VtZW50UmVjb3JkIG5vdCBmb3VuZCBvciBhY2Nlc3MgZGVuaWVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzLmpzb24odXBkYXRlZERvY3VtZW50KTtcbiAgICB9IGNhdGNoIChfZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHVwZGF0aW5nIGRvY3VtZW50OicsIF9lcnJvcik7XG4gICAgICBcbiAgICAgIGlmIChfZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgZG9jdW1lbnQgZGF0YScsXG4gICAgICAgICAgZXJyb3JzOiBfZXJyb3IuaXNzdWVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIHVwZGF0ZSBkb2N1bWVudCcgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBTZWN1cml0eSBhdWRpdCBlbmRwb2ludCAtIGFkbWluIG9ubHlcbiAgYXBwLmdldCgnL2FwaS9kb2N1bWVudHMvc2VjdXJpdHkvYXVkaXQtbG9nJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIFxuICAgICAgLy8gT25seSBhZG1pbnMgY2FuIGFjY2VzcyBhdWRpdCBsb2dzXG4gICAgICBpZiAodXNlci5yb2xlICE9PSAnYWRtaW4nKSB7XG4gICAgICAgIGxvZ1NlY3VyaXR5RXZlbnQoJ1VOQVVUSE9SSVpFRF9BVURJVF9BQ0NFU1MnLCB1c2VyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IG1lc3NhZ2U6ICdBY2Nlc3MgZGVuaWVkLiBBZG1pbiBwcml2aWxlZ2VzIHJlcXVpcmVkLicgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEdldCBsYXN0IDEwMCBhdWRpdCBldmVudHMgd2l0aCBwYWdpbmF0aW9uIHN1cHBvcnRcbiAgICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5taW4ocGFyc2VJbnQocmVxLnF1ZXJ5LmxpbWl0IGFzIHN0cmluZykgfHwgNTAsIDEwMCk7XG4gICAgICBjb25zdCBvZmZzZXQgPSBwYXJzZUludChyZXEucXVlcnkub2Zmc2V0IGFzIHN0cmluZykgfHwgMDtcbiAgICAgIFxuICAgICAgY29uc3QgcGFnaW5hdGVkTG9ncyA9IGF1ZGl0TG9nLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgbGltaXQpO1xuICAgICAgXG4gICAgICBsb2dTZWN1cml0eUV2ZW50KCdBVURJVF9MT0dfQUNDRVNTJywgdXNlciwgdHJ1ZSwgdW5kZWZpbmVkLCB7IGxpbWl0LCBvZmZzZXQgfSk7XG4gICAgICBcbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgZXZlbnRzOiBwYWdpbmF0ZWRMb2dzLFxuICAgICAgICB0b3RhbDogYXVkaXRMb2cubGVuZ3RoLFxuICAgICAgICBsaW1pdCxcbiAgICAgICAgb2Zmc2V0XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhY2Nlc3NpbmcgYXVkaXQgbG9nOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byByZXRyaWV2ZSBhdWRpdCBsb2cnIH0pO1xuICAgIH1cbiAgfSk7XG4gIFxuICAvLyBEZWxldGUgZG9jdW1lbnQgd2l0aCBlbmhhbmNlZCBzZWN1cml0eSBsb2dnaW5nXG4gIGFwcC5kZWxldGUoJy9hcGkvZG9jdW1lbnRzLzppZCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXI7XG4gICAgICBjb25zdCB1c2VyUm9sZSA9IHVzZXIucm9sZTtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXIuaWQ7XG4gICAgICBjb25zdCBkb2N1bWVudElkID0gcmVxLnBhcmFtcy5pZDtcbiAgICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IHJlcS5xdWVyeS50eXBlIGFzIHN0cmluZzsgLy8gT3B0aW9uYWwgdHlwZSBoaW50XG5cbiAgICAgIC8vIEdldCB1c2VyJ3Mgb3JnYW5pemF0aW9uIGZvciBwZXJtaXNzaW9uIGNoZWNraW5nXG4gICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyT3JnYW5pemF0aW9ucyh1c2VySWQpO1xuICAgICAgY29uc3Qgb3JnYW5pemF0aW9uSWQgPSBvcmdhbml6YXRpb25zLmxlbmd0aCA+IDAgPyBvcmdhbml6YXRpb25zWzBdLm9yZ2FuaXphdGlvbklkIDogdW5kZWZpbmVkO1xuXG4gICAgICAvLyBVc2UgdW5pZmllZCBkb2N1bWVudHMgc3lzdGVtIGZvciBkZWxldGlvblxuICAgICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZGVsZXRlZCA9IGF3YWl0IHN0b3JhZ2UuZGVsZXRlRG9jdW1lbnQoZG9jdW1lbnRJZCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGRlbGV0aW5nIGRvY3VtZW50OicsIGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRlbGV0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0RvY3VtZW50UmVjb3JkIG5vdCBmb3VuZCBvciBhY2Nlc3MgZGVuaWVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzLnN0YXR1cygyMDQpLnNlbmQoKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgaW4gZG9jdW1lbnQgZGVsZXRpb246JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIGRlbGV0ZSBkb2N1bWVudCcgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBVcGxvYWQgZW5kcG9pbnQgdGhhdCBtYXRjaGVzIGZyb250ZW5kIGV4cGVjdGF0aW9uOiAvYXBpL2RvY3VtZW50cy86aWQvdXBsb2FkXG4gIGFwcC5wb3N0KFxuICAgICcvYXBpL2RvY3VtZW50cy86aWQvdXBsb2FkJyxcbiAgICByZXF1aXJlQXV0aCxcbiAgICB1cGxvYWQuc2luZ2xlKCdmaWxlJyksXG4gICAgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgICAgY29uc3QgdXNlclJvbGUgPSB1c2VyLnJvbGU7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXIuaWQ7XG4gICAgICAgIGNvbnN0IGRvY3VtZW50SWQgPSByZXEucGFyYW1zLmlkOyAvLyBUaGUgOmlkIGluIHRoZSBVUkwgaXMgdGhlIGRvY3VtZW50IElEIChmcm9tIGZyb250ZW5kKVxuICAgICAgICBjb25zdCB7IGRvY3VtZW50VHlwZSA9ICdyZXNpZGVudCcsIHJlc2lkZW5jZUlkLCAuLi5vdGhlckRhdGEgfSA9IHJlcS5ib2R5O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OkIFVwbG9hZCByZXF1ZXN0IHJlY2VpdmVkOicsIHtcbiAgICAgICAgICBkb2N1bWVudElkLFxuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICBoYXNGaWxlOiAhIXJlcS5maWxlLFxuICAgICAgICAgIGZpbGVJbmZvOiByZXEuZmlsZVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgZmllbGRuYW1lOiByZXEuZmlsZS5maWVsZG5hbWUsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxuYW1lOiByZXEuZmlsZS5vcmlnaW5hbG5hbWUsXG4gICAgICAgICAgICAgICAgZW5jb2Rpbmc6IHJlcS5maWxlLmVuY29kaW5nLFxuICAgICAgICAgICAgICAgIG1pbWV0eXBlOiByZXEuZmlsZS5taW1ldHlwZSxcbiAgICAgICAgICAgICAgICBzaXplOiByZXEuZmlsZS5zaXplLFxuICAgICAgICAgICAgICAgIHBhdGg6IHJlcS5maWxlLnBhdGgsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICBib2R5S2V5czogT2JqZWN0LmtleXMocmVxLmJvZHkpLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlIHBlcm1pc3Npb25zIC0gb25seSBhZG1pbiwgbWFuYWdlciwgYW5kIHJlc2lkZW50IGNhbiBjcmVhdGUgZG9jdW1lbnRzXG4gICAgICAgIGlmICghWydhZG1pbicsICdtYW5hZ2VyJywgJ3Jlc2lkZW50J10uaW5jbHVkZXModXNlclJvbGUpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucyB0byBjcmVhdGUgZG9jdW1lbnRzJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVxLmZpbGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgTm8gZmlsZSByZWNlaXZlZCBpbiB1cGxvYWQgcmVxdWVzdCcpO1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdGaWxlIGlzIHJlcXVpcmVkIGZvciB1cGxvYWQnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBleGlzdGluZyBkb2N1bWVudCB0byBkZXRlcm1pbmUgd2hlcmUgdG8gc3RvcmUgdGhlIGZpbGVcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgc3RvcmFnZS5nZXREb2N1bWVudHMoe1xuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmdEb2N1bWVudCA9IGRvY3VtZW50cy5maW5kKChkb2MpID0+IGRvYy5pZCA9PT0gZG9jdW1lbnRJZCk7XG5cbiAgICAgICAgaWYgKCFleGlzdGluZ0RvY3VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0RvY3VtZW50UmVjb3JkIG5vdCBmb3VuZCcgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaWxlIHZhbGlkYXRpb24gcGFzc2VkIC0gZmlsZSBleGlzdHMgYW5kIGlzIHJlYWR5IGZvciB1cGxvYWRcblxuICAgICAgICAvLyBEZXRlcm1pbmUgb3JnYW5pemF0aW9uIElEIGJhc2VkIG9uIGRvY3VtZW50IGNvbnRleHRcbiAgICAgICAgbGV0IG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nRG9jdW1lbnQuYnVpbGRpbmdJZCkge1xuICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gYXdhaXQgc3RvcmFnZS5nZXRCdWlsZGluZyhleGlzdGluZ0RvY3VtZW50LmJ1aWxkaW5nSWQpO1xuICAgICAgICAgIGlmICghYnVpbGRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdCdWlsZGluZyBub3QgZm91bmQnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcmdhbml6YXRpb25JZCA9IGJ1aWxkaW5nLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB9IGVsc2UgaWYgKGV4aXN0aW5nRG9jdW1lbnQucmVzaWRlbmNlSWQpIHtcbiAgICAgICAgICBjb25zdCByZXNpZGVuY2UgPSBhd2FpdCBzdG9yYWdlLmdldFJlc2lkZW5jZShleGlzdGluZ0RvY3VtZW50LnJlc2lkZW5jZUlkKTtcbiAgICAgICAgICBpZiAoIXJlc2lkZW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ1Jlc2lkZW5jZSBub3QgZm91bmQnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBidWlsZGluZyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmcocmVzaWRlbmNlLmJ1aWxkaW5nSWQpO1xuICAgICAgICAgIGlmICghYnVpbGRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdCdWlsZGluZyBub3QgZm91bmQnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcmdhbml6YXRpb25JZCA9IGJ1aWxkaW5nLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIC5zdGF0dXMoNDAwKVxuICAgICAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnRG9jdW1lbnRSZWNvcmQgbXVzdCBiZSBhc3NvY2lhdGVkIHdpdGggYSBidWlsZGluZyBvciByZXNpZGVuY2UnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm90ZTogRmlsZSB1cGxvYWQgdG8gZXh0ZXJuYWwgc3RvcmFnZSByZW1vdmVkXG5cbiAgICAgICAgLy8gVXBkYXRlIGRvY3VtZW50IHdpdGggZmlsZSBpbmZvcm1hdGlvblxuICAgICAgICBjb25zdCB1cGRhdGVkRG9jdW1lbnQgPSBhd2FpdCBzdG9yYWdlLnVwZGF0ZURvY3VtZW50KGRvY3VtZW50SWQsIHtcbiAgICAgICAgICBmaWxlUGF0aDogYHByb2Rfb3JnXyR7b3JnYW5pemF0aW9uSWR9LyR7cmVxLmZpbGUub3JpZ2luYWxuYW1lfWAsXG4gICAgICAgICAgbmFtZTogcmVxLmZpbGUub3JpZ2luYWxuYW1lLFxuICAgICAgICAgIC8vIFJlbW92ZSBtaW1lVHlwZSBhcyBpdCdzIG5vdCBpbiBzY2hlbWFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgdGVtcG9yYXJ5IGZpbGVcbiAgICAgICAgaWYgKHJlcS5maWxlICYmIHJlcS5maWxlLnBhdGggJiYgZnMuZXhpc3RzU3luYyhyZXEuZmlsZS5wYXRoKSkge1xuICAgICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgICAgZG9jdW1lbnQ6IHVwZGF0ZWREb2N1bWVudCxcbiAgICAgICAgICBtZXNzYWdlOiAnRmlsZSB1cGxvYWRlZCBzdWNjZXNzZnVsbHknLFxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc3QgZXJyb3JUaW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFske2Vycm9yVGltZXN0YW1wfV0gRXJyb3IgdHlwZTpgLCBlcnJvci5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihgWyR7ZXJyb3JUaW1lc3RhbXB9XSBFcnJvciBtZXNzYWdlOmAsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbJHtlcnJvclRpbWVzdGFtcH1dIEVycm9yIHN0YWNrOmAsIGVycm9yLnN0YWNrKTtcblxuICAgICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZSBvbiBlcnJvclxuICAgICAgICBpZiAocmVxLmZpbGUgJiYgcmVxLmZpbGUucGF0aCAmJiBmcy5leGlzdHNTeW5jKHJlcS5maWxlLnBhdGgpKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XG4gICAgICAgICAgfSBjYXRjaCAoY2xlYW51cEVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbJHtlcnJvclRpbWVzdGFtcH1dIEVycm9yIGNsZWFuaW5nIHVwIGZpbGU6YCwgY2xlYW51cEVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ1pvZEVycm9yJykge1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVmFsaWRhdGlvbiBlcnJvcicsXG4gICAgICAgICAgICBlcnJvcnM6IGVycm9yLmVycm9ycyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGxvYWQgZG9jdW1lbnQnIH0pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICAvLyBQT1NUIC9hcGkvZG9jdW1lbnRzL3VwbG9hZCAtIFVwbG9hZCBmaWxlIHRvIEdDUyBhbmQgY3JlYXRlIHVuaWZpZWQgZG9jdW1lbnQgcmVjb3JkXG4gIGFwcC5wb3N0KCcvYXBpL2RvY3VtZW50cy91cGxvYWQnLCByZXF1aXJlQXV0aCwgdXBsb2FkLnNpbmdsZSgnZmlsZScpLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+TiyBQT1NUIC9hcGkvZG9jdW1lbnRzL3VwbG9hZCAtIFN0YXJ0aW5nIHVwbG9hZGAsIHtcbiAgICAgIGhhc0ZpbGU6ICEhcmVxLmZpbGUsXG4gICAgICBmaWxlTmFtZTogcmVxLmZpbGU/Lm9yaWdpbmFsbmFtZSxcbiAgICAgIGZpbGVTaXplOiByZXEuZmlsZT8uc2l6ZSxcbiAgICAgIGJvZHk6IHJlcS5ib2R5LFxuICAgICAgdXNlcklkOiByZXEudXNlcj8uaWRcbiAgICB9KTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiBmaWxlIHdhcyB1cGxvYWRlZFxuICAgICAgaWYgKCFyZXEuZmlsZSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnTm8gZmlsZSB1cGxvYWRlZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFBhcnNlIGZvcm0gZGF0YVxuICAgICAgY29uc3QgZm9ybURhdGEgPSB7XG4gICAgICAgIG5hbWU6IHJlcS5ib2R5Lm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiByZXEuYm9keS5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgICAgZG9jdW1lbnRUeXBlOiByZXEuYm9keS5kb2N1bWVudFR5cGUgfHwgcmVxLmJvZHkudHlwZSwgLy8gSGFuZGxlIGJvdGggZmllbGQgbmFtZXNcbiAgICAgICAgaXNWaXNpYmxlVG9UZW5hbnRzOiByZXEuYm9keS5pc1Zpc2libGVUb1RlbmFudHMgPT09ICd0cnVlJyxcbiAgICAgICAgcmVzaWRlbmNlSWQ6IHJlcS5ib2R5LnJlc2lkZW5jZUlkIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgYnVpbGRpbmdJZDogcmVxLmJvZHkuYnVpbGRpbmdJZCB8fCB1bmRlZmluZWQsXG4gICAgICAgIGF0dGFjaGVkVG9UeXBlOiByZXEuYm9keS5hdHRhY2hlZFRvVHlwZSB8fCB1bmRlZmluZWQsXG4gICAgICAgIGF0dGFjaGVkVG9JZDogcmVxLmJvZHkuYXR0YWNoZWRUb0lkIHx8IHVuZGVmaW5lZCxcbiAgICAgIH07XG5cbiAgICAgIC8vIFByb2R1Y3Rpb24gZGVidWdnaW5nOiBMb2cgZm9ybSBkYXRhIGJlZm9yZSB2YWxpZGF0aW9uXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1BST0QgREVCVUddIEZvcm0gZGF0YSBiZWZvcmUgdmFsaWRhdGlvbjonLCBmb3JtRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIGZvcm0gZGF0YVxuICAgICAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IHVwbG9hZERvY3VtZW50UmVjb3JkU2NoZW1hLnBhcnNlKGZvcm1EYXRhKTtcbiAgICAgIFxuICAgICAgLy8gREVCVUc6IExvZyB2YWxpZGF0ZWQgZGF0YSB0byBzZWUgd2hhdCdzIGJlaW5nIHBhc3NlZFxuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCflI0gVkFMSURBVElPTiBERUJVRzogRm9ybSBkYXRhIGJlZm9yZSB2YWxpZGF0aW9uOmAsIGZvcm1EYXRhKTtcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDwn5SNIFZBTElEQVRJT04gREVCVUc6IFZhbGlkYXRlZCBkYXRhOmAsIHtcbiAgICAgICAgLi4udmFsaWRhdGVkRGF0YSxcbiAgICAgICAgaGFzQXR0YWNoZWRUb1R5cGU6ICEhdmFsaWRhdGVkRGF0YS5hdHRhY2hlZFRvVHlwZSxcbiAgICAgICAgaGFzQXR0YWNoZWRUb0lkOiAhIXZhbGlkYXRlZERhdGEuYXR0YWNoZWRUb0lkXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gUHJvZHVjdGlvbiBkZWJ1Z2dpbmc6IExvZyBhZnRlciB2YWxpZGF0aW9uXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1BST0QgREVCVUddIEZvcm0gZGF0YSB2YWxpZGF0aW9uIHBhc3NlZDonLCB2YWxpZGF0ZWREYXRhKTtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHVzZXIgaW5mbyBmcm9tIGF1dGggbWlkZGxld2FyZVxuICAgICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkO1xuICAgICAgaWYgKCF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ1VzZXIgbm90IGF1dGhlbnRpY2F0ZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHQ1MgRElTQUJMRUQ6IFNraXAgYnVja2V0IGNvbmZpZ3VyYXRpb24gKHVzaW5nIGxvY2FsIHN0b3JhZ2Ugb25seSlcbiAgICAgIGNvbnNvbGUubG9nKCfwn5OBIEdDUyBkaXNhYmxlZCAtIHNraXBwaW5nIGJ1Y2tldCBjb25maWd1cmF0aW9uIGNoZWNrJyk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSBHQ1MgcGF0aFxuICAgICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IHBhdGguZXh0bmFtZShyZXEuZmlsZS5vcmlnaW5hbG5hbWUpO1xuICAgICAgY29uc3QgYmFzZUZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShyZXEuZmlsZS5vcmlnaW5hbG5hbWUsIGZpbGVFeHRlbnNpb24pO1xuICAgICAgY29uc3QgdW5pcXVlRmlsZU5hbWUgPSBgJHt1dWlkdjQoKX0tJHtiYXNlRmlsZU5hbWV9JHtmaWxlRXh0ZW5zaW9ufWA7XG5cbiAgICAgIGxldCBmaWxlUGF0aDogc3RyaW5nO1xuICAgICAgaWYgKHZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWQpIHtcbiAgICAgICAgZmlsZVBhdGggPSBgcmVzaWRlbmNlcy8ke3ZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWR9LyR7dW5pcXVlRmlsZU5hbWV9YDtcbiAgICAgIH0gZWxzZSBpZiAodmFsaWRhdGVkRGF0YS5idWlsZGluZ0lkKSB7XG4gICAgICAgIGZpbGVQYXRoID0gYGJ1aWxkaW5ncy8ke3ZhbGlkYXRlZERhdGEuYnVpbGRpbmdJZH0vJHt1bmlxdWVGaWxlTmFtZX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsZVBhdGggPSBgZ2VuZXJhbC8ke3VuaXF1ZUZpbGVOYW1lfWA7XG4gICAgICB9XG5cbiAgICAgIC8vIERJU0FCTEVEIEdDUzogRm9yY2UgbG9jYWwgc3RvcmFnZSBmb3IgYWxsIGVudmlyb25tZW50c1xuICAgICAgY29uc29sZS5sb2coJ/Cfk4EgR0NTIGRpc2FibGVkIC0gdXNpbmcgbG9jYWwgc3RvcmFnZSBmb3IgYWxsIGRvY3VtZW50IG9wZXJhdGlvbnMnKTtcbiAgICAgIFxuICAgICAgLy8gQWx3YXlzIHVzZSBsb2NhbCBzdG9yYWdlIChHQ1MgZGlzYWJsZWQpXG4gICAgICB0cnkge1xuICAgICAgICAvLyBVc2UgbG9jYWwgc3RvcmFnZSB3aXRoIHJvYnVzdCBlcnJvciBoYW5kbGluZ1xuICAgICAgICBjb25zdCBsb2NhbFN0b3JhZ2VQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd1cGxvYWRzJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbnN1cmUgdXBsb2FkcyBkaXJlY3RvcnkgZXhpc3RzXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGxvY2FsU3RvcmFnZVBhdGgpKSB7XG4gICAgICAgICAgICBmcy5ta2RpclN5bmMobG9jYWxTdG9yYWdlUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TgSBDcmVhdGVkIHVwbG9hZHMgZGlyZWN0b3J5OiAke2xvY2FsU3RvcmFnZVBhdGh9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChkaXJFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdXBsb2FkcyBkaXJlY3Rvcnk6JywgZGlyRXJyb3IpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSB1cGxvYWRzIGRpcmVjdG9yeSAtIGNoZWNrIHBlcm1pc3Npb25zJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgZGlyZWN0b3J5IHN0cnVjdHVyZSBmb3IgZmlsZVxuICAgICAgICBjb25zdCBsb2NhbEZpbGVQYXRoID0gcGF0aC5qb2luKGxvY2FsU3RvcmFnZVBhdGgsIGZpbGVQYXRoKTtcbiAgICAgICAgY29uc3QgbG9jYWxGaWxlRGlyID0gcGF0aC5kaXJuYW1lKGxvY2FsRmlsZVBhdGgpO1xuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMobG9jYWxGaWxlRGlyKSkge1xuICAgICAgICAgICAgZnMubWtkaXJTeW5jKGxvY2FsRmlsZURpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TgSBDcmVhdGVkIHN1YmRpcmVjdG9yeTogJHtsb2NhbEZpbGVEaXJ9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChzdWJkaXJFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgZmlsZSBzdWJkaXJlY3Rvcnk6Jywgc3ViZGlyRXJyb3IpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSBmaWxlIGRpcmVjdG9yeSAtIGNoZWNrIHBlcm1pc3Npb25zJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3B5IHVwbG9hZGVkIGZpbGUgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZzLmNvcHlGaWxlU3luYyhyZXEuZmlsZSEucGF0aCwgbG9jYWxGaWxlUGF0aCk7XG4gICAgICAgICAgY29uc29sZS5sb2coYPCfk4EgRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkgYXQgJHtsb2NhbEZpbGVQYXRofWApO1xuICAgICAgICB9IGNhdGNoIChjb3B5RXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29weSBmaWxlOicsIGNvcHlFcnJvcik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2F2ZSBmaWxlIC0gY2hlY2sgZGlzayBzcGFjZSBhbmQgcGVybWlzc2lvbnMnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAobG9jYWxFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdMb2NhbCBzdG9yYWdlIGVycm9yOicsIGxvY2FsRXJyb3IpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGZpbGUgbG9jYWxseScpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgZG9jdW1lbnQgcmVjb3JkIGluIGRhdGFiYXNlXG4gICAgICBjb25zdCBkb2N1bWVudERhdGE6IEluc2VydERvY3VtZW50ID0ge1xuICAgICAgICBuYW1lOiB2YWxpZGF0ZWREYXRhLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB2YWxpZGF0ZWREYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICBkb2N1bWVudFR5cGU6IHZhbGlkYXRlZERhdGEuZG9jdW1lbnRUeXBlLFxuICAgICAgICBmaWxlUGF0aDogZmlsZVBhdGgsXG4gICAgICAgIGlzVmlzaWJsZVRvVGVuYW50czogdmFsaWRhdGVkRGF0YS5pc1Zpc2libGVUb1RlbmFudHMsXG4gICAgICAgIHJlc2lkZW5jZUlkOiB2YWxpZGF0ZWREYXRhLnJlc2lkZW5jZUlkLFxuICAgICAgICBidWlsZGluZ0lkOiB2YWxpZGF0ZWREYXRhLmJ1aWxkaW5nSWQsXG4gICAgICAgIHVwbG9hZGVkQnlJZDogdXNlcklkLFxuICAgICAgICBhdHRhY2hlZFRvVHlwZTogdmFsaWRhdGVkRGF0YS5hdHRhY2hlZFRvVHlwZSxcbiAgICAgICAgYXR0YWNoZWRUb0lkOiB2YWxpZGF0ZWREYXRhLmF0dGFjaGVkVG9JZCxcbiAgICAgIH07XG5cbiAgICAgIC8vIENSSVRJQ0FMIERFQlVHIFBPSU5UOiBEYXRhYmFzZSBjcmVhdGlvblxuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCfjq8gQ1JJVElDQUw6IEFib3V0IHRvIGNyZWF0ZSBkb2N1bWVudCBpbiBkYXRhYmFzZTpgLCB7XG4gICAgICAgIG5hbWU6IGRvY3VtZW50RGF0YS5uYW1lLFxuICAgICAgICB0eXBlOiBkb2N1bWVudERhdGEuZG9jdW1lbnRUeXBlLFxuICAgICAgICBidWlsZGluZ0lkOiBkb2N1bWVudERhdGEuYnVpbGRpbmdJZCxcbiAgICAgICAgcmVzaWRlbmNlSWQ6IGRvY3VtZW50RGF0YS5yZXNpZGVuY2VJZCxcbiAgICAgICAgdXBsb2FkZWRCeUlkOiBkb2N1bWVudERhdGEudXBsb2FkZWRCeUlkLFxuICAgICAgICBhdHRhY2hlZFRvVHlwZTogZG9jdW1lbnREYXRhLmF0dGFjaGVkVG9UeXBlLFxuICAgICAgICBhdHRhY2hlZFRvSWQ6IGRvY3VtZW50RGF0YS5hdHRhY2hlZFRvSWRcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgZG9jdW1lbnQgcmVjb3JkIGluIGRhdGFiYXNlICBcbiAgICAgIGNvbnN0IG5ld0RvY3VtZW50ID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVEb2N1bWVudChkb2N1bWVudERhdGEpO1xuICAgICAgXG4gICAgICAvLyBDUklUSUNBTDogTG9nIHN1Y2Nlc3NmdWwgZGF0YWJhc2UgY3JlYXRpb25cbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDinIUgQ1JJVElDQUw6IERvY3VtZW50UmVjb3JkIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5OmAsIHsgXG4gICAgICAgIGlkOiBuZXdEb2N1bWVudD8uaWQsIFxuICAgICAgICBuYW1lOiBuZXdEb2N1bWVudD8ubmFtZSxcbiAgICAgICAgZmlsZVBhdGg6IG5ld0RvY3VtZW50Py5maWxlUGF0aCBcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZVxuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMocmVxLmZpbGUucGF0aCkpIHtcbiAgICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHN1Y2Nlc3MgcmVzcG9uc2VcbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0RvY3VtZW50UmVjb3JkIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIGRvY3VtZW50OiBuZXdEb2N1bWVudCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnN0IGVycm9yRW50cnkgPSBsb2dFcnJvcignUE9TVCAvYXBpL2RvY3VtZW50cy91cGxvYWQnLCBlcnJvciwgcmVxLnVzZXIpO1xuXG4gICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZSBvbiBlcnJvclxuICAgICAgaWYgKHJlcS5maWxlICYmIHJlcS5maWxlLnBhdGggJiYgZnMuZXhpc3RzU3luYyhyZXEuZmlsZS5wYXRoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGNsZWFudXBFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFuaW5nIHVwIHRlbXBvcmFyeSBmaWxlOicsIGNsZWFudXBFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIHZhbGlkYXRpb24gZXJyb3JzXG4gICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ1pvZEVycm9yJykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdWYWxpZGF0aW9uIGVycm9yJyxcbiAgICAgICAgICBlcnJvcnM6IGVycm9yLmVycm9ycyxcbiAgICAgICAgICBlcnJvcl9pZDogZXJyb3JFbnRyeS50aW1lc3RhbXBcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBHQ1MgZXJyb3JzXG4gICAgICBpZiAoZXJyb3IubWVzc2FnZSAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdHb29nbGUgQ2xvdWQgU3RvcmFnZScpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ZpbGUgdXBsb2FkIGZhaWxlZCcsXG4gICAgICAgICAgZXJyb3I6ICdTdG9yYWdlIHNlcnZpY2UgZXJyb3InLFxuICAgICAgICAgIGVycm9yX2lkOiBlcnJvckVudHJ5LnRpbWVzdGFtcFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIHVuaXF1ZSBjb25zdHJhaW50IHZpb2xhdGlvbnMgKHBhdGggY29uZmxpY3RzKVxuICAgICAgaWYgKGVycm9yPy5tZXNzYWdlPy5pbmNsdWRlcygndW5pcXVlIGNvbnN0cmFpbnQnKSB8fCBlcnJvcj8uY29kZSA9PT0gJzIzNTA1Jykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDkpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdEb2N1bWVudFJlY29yZCBwYXRoIGNvbmZsaWN0IC0gcGxlYXNlIHRyeSB1cGxvYWRpbmcgYWdhaW4nLFxuICAgICAgICAgIGVycm9yOiAnUGF0aCBhbHJlYWR5IGV4aXN0cycsXG4gICAgICAgICAgZXJyb3JfaWQ6IGVycm9yRW50cnkudGltZXN0YW1wXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBIYW5kbGUgZGF0YWJhc2UgZXJyb3JzXG4gICAgICBpZiAoZXJyb3IubWVzc2FnZSAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdkYXRhYmFzZScpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBzYXZlIGRvY3VtZW50IHJlY29yZCcsXG4gICAgICAgICAgZXJyb3I6ICdEYXRhYmFzZSBlcnJvcicsXG4gICAgICAgICAgZXJyb3JfaWQ6IGVycm9yRW50cnkudGltZXN0YW1wXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmljIGVycm9yIHJlc3BvbnNlXG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBlcnJvcjogJ0RvY3VtZW50UmVjb3JkIHVwbG9hZCBmYWlsZWQnLFxuICAgICAgICBlcnJvcl9pZDogZXJyb3JFbnRyeS50aW1lc3RhbXAsXG4gICAgICAgIGRlYnVnX2luZm86IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gZXJyb3IubWVzc2FnZSA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBTZXJ2ZSBkb2N1bWVudCBmaWxlc1xuICAvLyBTZXJ2ZSBkb2N1bWVudCBmaWxlcyB3aXRoIGZ1bGwgYWNjZXNzIGNvbnRyb2xcbiAgYXBwLmdldCgnL2FwaS9kb2N1bWVudHMvOmlkL2ZpbGUnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyO1xuICAgICAgY29uc3QgdXNlclJvbGUgPSB1c2VyLnJvbGU7XG4gICAgICBjb25zdCB1c2VySWQgPSB1c2VyLmlkO1xuICAgICAgY29uc3QgZG9jdW1lbnRJZCA9IHJlcS5wYXJhbXMuaWQ7XG4gICAgICBjb25zdCBpc0Rvd25sb2FkID0gcmVxLnF1ZXJ5LmRvd25sb2FkID09PSAndHJ1ZSc7XG5cbiAgICAgIC8vIEdldCB1c2VyJ3Mgb3JnYW5pemF0aW9uIGFuZCByZXNpZGVuY2VzIGZvciBwZXJtaXNzaW9uIGNoZWNraW5nXG4gICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyT3JnYW5pemF0aW9ucyh1c2VySWQpO1xuICAgICAgY29uc3QgcmVzaWRlbmNlcyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlclJlc2lkZW5jZXModXNlcklkKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5ncyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmdzKCk7XG5cbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbklkID0gb3JnYW5pemF0aW9ucy5sZW5ndGggPiAwID8gb3JnYW5pemF0aW9uc1swXS5vcmdhbml6YXRpb25JZCA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IHJlc2lkZW5jZUlkcyA9IHJlc2lkZW5jZXNcbiAgICAgICAgLm1hcCgodXI6IGFueSkgPT4gdXIucmVzaWRlbmNlSWQgfHwgdXIudXNlclJlc2lkZW5jZT8ucmVzaWRlbmNlSWQgfHwgdXIucmVzaWRlbmNlPy5pZClcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5nSWRzID0gYnVpbGRpbmdzLm1hcCgoYikgPT4gYi5pZCk7XG5cbiAgICAgIC8vIEZpbmQgdGhlIGRvY3VtZW50XG4gICAgICBjb25zdCBmaWx0ZXJzID0ge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHVzZXJSb2xlLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgc3RvcmFnZS5nZXREb2N1bWVudHMoZmlsdGVycyk7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IGRvY3VtZW50cy5maW5kKChkb2MpID0+IGRvYy5pZCA9PT0gZG9jdW1lbnRJZCk7XG5cbiAgICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0RvY3VtZW50UmVjb3JkIG5vdCBmb3VuZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIHBlcm1pc3Npb25zIHdpdGggdGVuYW50IHZpc2liaWxpdHkgcnVsZXNcbiAgICAgIGxldCBoYXNBY2Nlc3MgPSBmYWxzZTtcblxuICAgICAgaWYgKHVzZXJSb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgIGhhc0FjY2VzcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHVzZXJSb2xlID09PSAnbWFuYWdlcicgJiYgb3JnYW5pemF0aW9uSWQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmJ1aWxkaW5nSWQgJiYgYnVpbGRpbmdJZHMuaW5jbHVkZXMoZG9jdW1lbnQuYnVpbGRpbmdJZCkpIHtcbiAgICAgICAgICBoYXNBY2Nlc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb2N1bWVudC5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jdW1lbnQucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh1c2VyUm9sZSA9PT0gJ3Jlc2lkZW50Jykge1xuICAgICAgICAvLyBSZXNpZGVudHMgY2FuIGFjY2VzcyBkb2N1bWVudHMgaW4gdGhlaXIgcmVzaWRlbmNlXG4gICAgICAgIGlmIChkb2N1bWVudC5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jdW1lbnQucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXNpZGVudHMgY2FuIGFjY2VzcyBidWlsZGluZyBkb2N1bWVudHMgcmVsYXRlZCB0byB0aGVpciByZXNpZGVuY2VzXG4gICAgICAgIGlmIChkb2N1bWVudC5idWlsZGluZ0lkKSB7XG4gICAgICAgICAgY29uc3QgdXNlckJ1aWxkaW5nSWRzID0gcmVzaWRlbmNlc1xuICAgICAgICAgICAgLm1hcCgodXI6IGFueSkgPT4gdXIucmVzaWRlbmNlPy5idWlsZGluZ0lkIHx8IHVyLnVzZXJSZXNpZGVuY2U/LnJlc2lkZW5jZT8uYnVpbGRpbmdJZClcbiAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgaWYgKHVzZXJCdWlsZGluZ0lkcy5pbmNsdWRlcyhkb2N1bWVudC5idWlsZGluZ0lkKSkge1xuICAgICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodXNlclJvbGUgPT09ICd0ZW5hbnQnKSB7XG4gICAgICAgIC8vIFRlbmFudHMgY2FuIG9ubHkgYWNjZXNzIGRvY3VtZW50cyBtYXJrZWQgYXMgdmlzaWJsZSB0byB0ZW5hbnRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuaXNWaXNpYmxlVG9UZW5hbnRzKSB7XG4gICAgICAgICAgaGFzQWNjZXNzID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGVuYW50cyBjYW4gYWNjZXNzIHZpc2libGUgZG9jdW1lbnRzIGluIHRoZWlyIHJlc2lkZW5jZVxuICAgICAgICAgIGlmIChkb2N1bWVudC5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jdW1lbnQucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgICBoYXNBY2Nlc3MgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUZW5hbnRzIGNhbiBhY2Nlc3MgdmlzaWJsZSBidWlsZGluZyBkb2N1bWVudHMgcmVsYXRlZCB0byB0aGVpciByZXNpZGVuY2VzXG4gICAgICAgICAgaWYgKGRvY3VtZW50LmJ1aWxkaW5nSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJCdWlsZGluZ0lkcyA9IHJlc2lkZW5jZXNcbiAgICAgICAgICAgICAgLm1hcCgodXI6IGFueSkgPT4gdXIucmVzaWRlbmNlPy5idWlsZGluZ0lkIHx8IHVyLnVzZXJSZXNpZGVuY2U/LnJlc2lkZW5jZT8uYnVpbGRpbmdJZClcbiAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIGlmICh1c2VyQnVpbGRpbmdJZHMuaW5jbHVkZXMoZG9jdW1lbnQuYnVpbGRpbmdJZCkpIHtcbiAgICAgICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXNBY2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ0FjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXJ2ZSBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICAgIGlmIChkb2N1bWVudC5maWxlUGF0aCkge1xuICAgICAgICBjb25zb2xlLmxvZygn8J+TgSBHQ1MgZGlzYWJsZWQgLSBzZXJ2aW5nIGZyb20gbG9jYWwgc3RvcmFnZScpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEFsd2F5cyBzZXJ2ZSBmcm9tIGxvY2FsIHN0b3JhZ2UgKEdDUyBkaXNhYmxlZClcbiAgICAgICAgICBsZXQgZmlsZVBhdGhUb1NlcnZlID0gZG9jdW1lbnQuZmlsZVBhdGg7XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiBpdCdzIGFuIGFic29sdXRlIHBhdGhcbiAgICAgICAgICBpZiAoZG9jdW1lbnQuZmlsZVBhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICBmaWxlUGF0aFRvU2VydmUgPSBkb2N1bWVudC5maWxlUGF0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhIHJlbGF0aXZlIGZpbGUgcGF0aFxuICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgZG9jdW1lbnQuZmlsZVBhdGguaW5jbHVkZXMoJ3Jlc2lkZW5jZXMvJykgfHxcbiAgICAgICAgICAgIGRvY3VtZW50LmZpbGVQYXRoLmluY2x1ZGVzKCdidWlsZGluZ3MvJykgfHxcbiAgICAgICAgICAgIGRvY3VtZW50LmZpbGVQYXRoLmluY2x1ZGVzKCd0ZXh0LWRvY3VtZW50cy8nKSB8fFxuICAgICAgICAgICAgZG9jdW1lbnQuZmlsZVBhdGguaW5jbHVkZXMoJ2dlbmVyYWwvJylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEZvciBkZXZlbG9wbWVudCwgdHJ5IHRvIGZpbmQgdGhlIGZpbGUgaW4gY29tbW9uIHVwbG9hZCBkaXJlY3Rvcmllc1xuICAgICAgICAgICAgY29uc3QgcG9zc2libGVQYXRocyA9IFtcbiAgICAgICAgICAgICAgcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd1cGxvYWRzJywgZG9jdW1lbnQuZmlsZVBhdGgpLCAvLyBNYWluIGZhbGxiYWNrIGxvY2F0aW9uXG4gICAgICAgICAgICAgIGAvdG1wL3VwbG9hZHMvJHtkb2N1bWVudC5maWxlUGF0aH1gLFxuICAgICAgICAgICAgICBgL3VwbG9hZHMvJHtkb2N1bWVudC5maWxlUGF0aH1gLFxuICAgICAgICAgICAgICBgLi91cGxvYWRzLyR7ZG9jdW1lbnQuZmlsZVBhdGh9YCxcbiAgICAgICAgICAgICAgcGF0aC5qb2luKCcvdG1wJywgZG9jdW1lbnQuZmlsZVBhdGgpLFxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgLy8gVHJ5IHRvIGZpbmQgdGhlIGZpbGUgaW4gYW55IG9mIHRoZXNlIGxvY2F0aW9uc1xuICAgICAgICAgICAgZm9yIChjb25zdCBwb3NzaWJsZVBhdGggb2YgcG9zc2libGVQYXRocykge1xuICAgICAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhwb3NzaWJsZVBhdGgpKSB7XG4gICAgICAgICAgICAgICAgZmlsZVBhdGhUb1NlcnZlID0gcG9zc2libGVQYXRoO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5OCIEZvdW5kIGZpbGUgYXQ6ICR7ZmlsZVBhdGhUb1NlcnZlfWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENoZWNrIGlmIGl0J3MgYSB0ZW1wIGZpbGUgcGF0aFxuICAgICAgICAgIGVsc2UgaWYgKGRvY3VtZW50LmZpbGVQYXRoLmluY2x1ZGVzKCd0bXAnKSkge1xuICAgICAgICAgICAgZmlsZVBhdGhUb1NlcnZlID0gZG9jdW1lbnQuZmlsZVBhdGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVHJ5IHRvIHNlcnZlIHRoZSBmaWxlXG4gICAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGhUb1NlcnZlKSkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBvcmlnaW5hbCBmaWxlbmFtZSB3aXRoIGV4dGVuc2lvbiwgb3IgY29uc3RydWN0IG9uZSBmcm9tIHRoZSBkb2N1bWVudCBuYW1lXG4gICAgICAgICAgICBsZXQgZmlsZU5hbWUgPSAoZG9jdW1lbnQgYXMgYW55KS5maWxlTmFtZSB8fCBkb2N1bWVudC5uYW1lIHx8IHBhdGguYmFzZW5hbWUoZG9jdW1lbnQuZmlsZVBhdGgpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZmlsZU5hbWUgZG9lc24ndCBoYXZlIGFuIGV4dGVuc2lvbiwgYWRkIGl0IGZyb20gdGhlIG9yaWdpbmFsIGZpbGUgcGF0aFxuICAgICAgICAgICAgaWYgKCFwYXRoLmV4dG5hbWUoZmlsZU5hbWUpICYmIGRvY3VtZW50LmZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRXh0ID0gcGF0aC5leHRuYW1lKGRvY3VtZW50LmZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsRXh0KSB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWUgKz0gb3JpZ2luYWxFeHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzRG93bmxvYWQpIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsIGBhdHRhY2htZW50OyBmaWxlbmFtZT1cIiR7ZmlsZU5hbWV9XCJgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCBgaW5saW5lOyBmaWxlbmFtZT1cIiR7ZmlsZU5hbWV9XCJgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGFwcHJvcHJpYXRlIGNvbnRlbnQgdHlwZSBiYXNlZCBvbiBmaWxlIGV4dGVuc2lvblxuICAgICAgICAgICAgY29uc3QgZXh0ID0gcGF0aC5leHRuYW1lKGZpbGVOYW1lKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKGV4dCA9PT0gJy5wZGYnKSB7XG4gICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9wZGYnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXh0ID09PSAnLmpwZycgfHwgZXh0ID09PSAnLmpwZWcnKSB7XG4gICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdpbWFnZS9qcGVnJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV4dCA9PT0gJy5wbmcnKSB7XG4gICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdpbWFnZS9wbmcnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXh0ID09PSAnLmdpZicpIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2ltYWdlL2dpZicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChleHQgPT09ICcuZG9jJyB8fCBleHQgPT09ICcuZG9jeCcpIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcihcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJyxcbiAgICAgICAgICAgICAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV4dCA9PT0gJy50eHQnKSB7XG4gICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICd0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFByb2R1Y3Rpb24gY2FjaGUgYnVzdGluZyBmb3IgZG9jdW1lbnRzXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBjb25zdCBmaWxlU3RhdHMgPSBmcy5zdGF0U3luYyhmaWxlUGF0aFRvU2VydmUpO1xuICAgICAgICAgICAgICByZXMuc2V0KHtcbiAgICAgICAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZScsXG4gICAgICAgICAgICAgICAgJ1ByYWdtYSc6ICduby1jYWNoZScsXG4gICAgICAgICAgICAgICAgJ0V4cGlyZXMnOiAnMCcsXG4gICAgICAgICAgICAgICAgJ0VUYWcnOiBgXCIke2RvY3VtZW50LmlkfS0ke2ZpbGVTdGF0cy5tdGltZS5nZXRUaW1lKCl9XCJgLFxuICAgICAgICAgICAgICAgICdMYXN0LU1vZGlmaWVkJzogZmlsZVN0YXRzLm10aW1lLnRvVVRDU3RyaW5nKCksXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TgiBTZXJ2aW5nIGZpbGU6ICR7ZmlsZVBhdGhUb1NlcnZlfSBhcyAke2ZpbGVOYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoZmlsZVBhdGhUb1NlcnZlKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgZmlsZSBub3QgZm91bmQgbG9jYWxseSwgbG9nIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgICBjb25zb2xlLmxvZyhg4p2MIEZpbGUgbm90IGZvdW5kIGF0IGZpbGVQYXRoOiAke2RvY3VtZW50LmZpbGVQYXRofWApO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDinYwgVHJpZWQgZmlsZVBhdGg6ICR7ZmlsZVBhdGhUb1NlcnZlfWApO1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdGaWxlIG5vdCBmb3VuZCBvbiBzZXJ2ZXInIH0pO1xuICAgICAgICB9IGNhdGNoIChmaWxlRXJyb3I6IGFueSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBzZXJ2aW5nIGZpbGU6JywgZmlsZUVycm9yKTtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIHNlcnZlIGZpbGUnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdObyBmaWxlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRvY3VtZW50JyB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3Igc2VydmluZyBkb2N1bWVudCBmaWxlOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byBzZXJ2ZSBkb2N1bWVudCBmaWxlJyB9KTtcbiAgICB9XG4gIH0pO1xuXG59XG4iXSwidmVyc2lvbiI6M30=