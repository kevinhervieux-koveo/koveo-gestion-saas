3cc8f8d47d045f2acb4d5842dea9ff4f
"use strict";
/**
 * Form Validation Standards Test Suite
 * Simplified tests to ensure all forms follow basic validation principles
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const zod_1 = require("zod");
(0, globals_1.describe)('Form Validation Standards', () => {
    (0, globals_1.describe)('Basic Error Message Requirements', () => {
        (0, globals_1.test)('should require helpful error messages for common field types', () => {
            // Test that our validation templates produce good error messages
            const commonFields = {
                email: zod_1.z.string().email('Please enter a valid email address (example: user@domain.com)'),
                name: zod_1.z.string().min(1, 'Name is required (example: Jean Dupont)'),
                phone: zod_1.z.string().regex(/^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)').optional(),
                amount: zod_1.z.string().regex(/^\d+(\.\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),
                selection: zod_1.z.string().min(1, 'Please select an option from the dropdown')
            };
            // Test each field type produces helpful error messages
            Object.entries(commonFields).forEach(([fieldType, schema]) => {
                // Test with appropriate invalid input for each field type
                let invalidInput = '';
                switch (fieldType) {
                    case 'email':
                        invalidInput = 'invalid-email';
                        break;
                    case 'phone':
                        invalidInput = '123';
                        break;
                    case 'amount':
                        invalidInput = '123.456';
                        break;
                    default:
                        invalidInput = '';
                }
                const result = schema.safeParse(invalidInput);
                if (!result.success) {
                    const errorMessage = result.error.issues[0].message;
                    // Basic quality checks
                    (0, globals_1.expect)(errorMessage.length).toBeGreaterThan(10);
                    (0, globals_1.expect)(errorMessage).toMatch(/please|must|required|should/i);
                    // Format fields should have examples
                    if (['email', 'phone', 'amount'].includes(fieldType)) {
                        (0, globals_1.expect)(errorMessage).toContain('example:');
                    }
                }
            });
        });
        (0, globals_1.test)('should validate Quebec-specific validation patterns work correctly', () => {
            const quebecValidations = {
                name: zod_1.z.string().regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'Name can only contain letters, spaces, apostrophes and hyphens'),
                postalCode: zod_1.z.string().regex(/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)'),
                city: zod_1.z.string().regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens')
            };
            // Test valid Quebec inputs
            (0, globals_1.expect)(quebecValidations.name.safeParse('Jean-Baptiste').success).toBe(true);
            (0, globals_1.expect)(quebecValidations.name.safeParse('Marie-Ève').success).toBe(true);
            (0, globals_1.expect)(quebecValidations.postalCode.safeParse('H1A 1B1').success).toBe(true);
            (0, globals_1.expect)(quebecValidations.city.safeParse('Montréal').success).toBe(true);
            // Test that error messages are helpful
            const nameResult = quebecValidations.name.safeParse('Name123');
            const postalResult = quebecValidations.postalCode.safeParse('12345');
            (0, globals_1.expect)(nameResult.success).toBe(false);
            (0, globals_1.expect)(postalResult.success).toBe(false);
            if (!nameResult.success) {
                (0, globals_1.expect)(nameResult.error.issues[0].message).toContain('letters, spaces');
            }
            if (!postalResult.success) {
                (0, globals_1.expect)(postalResult.error.issues[0].message).toContain('Canadian format');
                (0, globals_1.expect)(postalResult.error.issues[0].message).toContain('example:');
            }
        });
    });
    (0, globals_1.describe)('Validation Helper Functions', () => {
        (0, globals_1.test)('should provide utility to check error message quality', () => {
            const checkErrorMessageQuality = (message) => {
                return {
                    isDetailed: message.length >= 15,
                    hasGuidance: /please|must|should|required/i.test(message),
                    isNotVague: !/^(invalid|error|wrong|bad)$/i.test(message),
                    hasExample: message.includes('example:')
                };
            };
            // Test good messages
            const goodMessages = [
                'Please enter a valid email address (example: user@domain.com)',
                'Name is required (example: Jean Dupont)',
                'Amount must be a valid number with up to 2 decimal places (example: 125.50)'
            ];
            goodMessages.forEach(message => {
                const quality = checkErrorMessageQuality(message);
                (0, globals_1.expect)(quality.isDetailed).toBe(true);
                (0, globals_1.expect)(quality.hasGuidance).toBe(true);
                (0, globals_1.expect)(quality.isNotVague).toBe(true);
            });
            // Test bad messages
            const badMessages = ['Invalid', 'Required', 'Error'];
            badMessages.forEach(message => {
                const quality = checkErrorMessageQuality(message);
                (0, globals_1.expect)(quality.isDetailed).toBe(false);
                (0, globals_1.expect)(quality.isNotVague).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Future Form Compliance', () => {
        (0, globals_1.test)('should provide templates for consistent form validation', () => {
            const validationTemplates = {
                email: () => zod_1.z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)'),
                name: (fieldName, example) => zod_1.z.string().min(1, `${fieldName} is required (example: ${example})`),
                phone: () => zod_1.z.string().regex(/^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)').optional(),
                amount: () => zod_1.z.string().regex(/^\d+(\.\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),
                selection: (fieldName) => zod_1.z.string().min(1, `Please select ${fieldName} from the dropdown`)
            };
            // Test that templates work correctly
            (0, globals_1.expect)(() => validationTemplates.email().parse('user@domain.com')).not.toThrow();
            (0, globals_1.expect)(() => validationTemplates.name('First name', 'Jean').parse('Jean')).not.toThrow();
            (0, globals_1.expect)(() => validationTemplates.amount().parse('125.50')).not.toThrow();
            // Test that templates produce helpful error messages
            const emailError = validationTemplates.email().safeParse('invalid');
            const nameError = validationTemplates.name('First name', 'Jean').safeParse('');
            (0, globals_1.expect)(emailError.success).toBe(false);
            (0, globals_1.expect)(nameError.success).toBe(false);
        });
    });
    (0, globals_1.describe)('Application Compliance Standards', () => {
        (0, globals_1.test)('should define minimum compliance requirements for all forms', () => {
            const complianceRequirements = {
                errorMessages: {
                    minLength: 15,
                    mustContainGuidance: true,
                    shouldIncludeExamples: true,
                    avoidVagueLanguage: true
                },
                quebecSupport: {
                    frenchCharacters: true,
                    canadianFormats: true,
                    appropriateExamples: true
                },
                accessibility: {
                    dataTestIds: true,
                    properLabels: true,
                    errorAssociation: true
                },
                security: {
                    passwordValidation: true,
                    sensitiveDataProtection: true,
                    confirmationForDestructive: true
                }
            };
            // Validate all requirements are set to true (required)
            const flattenRequirements = (obj) => {
                return Object.values(obj).flatMap(value => typeof value === 'object' ? flattenRequirements(value) : [value]);
            };
            const allRequirements = flattenRequirements(complianceRequirements);
            allRequirements.forEach(requirement => {
                (0, globals_1.expect)(requirement).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Development Workflow Integration', () => {
        (0, globals_1.test)('should provide clear guidelines for form validation implementation', () => {
            const implementationSteps = [
                'Use ValidationTemplates from form-validation-helpers.ts for consistent schemas',
                'Implement React Hook Form with zodResolver for type safety',
                'Use FormLabel, FormControl, FormMessage components for consistent UI',
                'Add data-testid attributes to all interactive elements',
                'Include validation tests for all new forms',
                'Verify Quebec compliance for name and address fields'
            ];
            // Validate implementation steps are comprehensive
            (0, globals_1.expect)(implementationSteps.length).toBeGreaterThanOrEqual(6);
            implementationSteps.forEach(step => {
                (0, globals_1.expect)(step.length).toBeGreaterThan(25);
                (0, globals_1.expect)(step).toMatch(/use|implement|add|include|verify/i);
            });
        });
        (0, globals_1.test)('should establish testing requirements for form validation', () => {
            const testingRequirements = [
                'Test schema validation produces helpful error messages',
                'Test UI displays red labels when validation fails',
                'Test error messages clear when fields become valid',
                'Test accessibility compliance with screen readers',
                'Test Quebec character support in name fields',
                'Test Canadian format validation for postal codes and phone numbers'
            ];
            testingRequirements.forEach(requirement => {
                (0, globals_1.expect)(requirement).toMatch(/test/i);
                (0, globals_1.expect)(requirement.length).toBeGreaterThan(30);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,