{"file":"/home/runner/workspace/server/database-optimization.ts","mappings":";AAAA;;;GAGG;;;AAEH,6CAAkC;AAqBlC;;GAEG;AACH,MAAa,gBAAgB;IAC3B;;;;OAIG;IACH,MAAM,CAAC,mBAAmB,CAAC,QAA2B;QACpD,MAAM,MAAM,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACvD,OAAO,SAAS,QAAQ,CAAC,QAAQ,WAAW,MAAM,EAAE,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,aAAa,CAAC,QAA2B;QAC9C,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YACrB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,YAAY,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,aAAa,IAAI,KAAK,EAAE,CAAC;IAC1E,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,mBAAmB,CAAC,YAAoB,EAAE,QAAgB;QAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,kBAAkB,CAAC,QAA2B;QACnD,IAAI,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,QAAQ,CAAC,QAAQ,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,GAAG,IAAI,EAAE,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;CACF;AA7CD,4CA6CC;AAED;;;GAGG;AACU,QAAA,oBAAoB,GAAG;IAClC;;;OAGG;IACH,WAAW,EAAE;QACX,sBAAsB;QACtB,yEAAyE;QACzE,uEAAuE;QACvE,8EAA8E;QAC9E,sFAAsF;QAEtF,8BAA8B;QAC9B,uFAAuF;QACvF,8FAA8F;QAC9F,uFAAuF;QAEvF,0BAA0B;QAC1B,4FAA4F;QAC5F,wFAAwF;QACxF,sFAAsF;QACtF,+EAA+E;QAC/E,wFAAwF;QAExF,2BAA2B;QAC3B,+FAA+F;QAC/F,wFAAwF;QACxF,wFAAwF;QACxF,mFAAmF;QAEnF,uCAAuC;QACvC,iGAAiG;QACjG,2GAA2G;QAC3G,kGAAkG;QAClG,gHAAgH;QAChH,4GAA4G;QAE5G,sBAAsB;QACtB,uFAAuF;QACvF,gFAAgF;QAChF,2EAA2E;QAC3E,uEAAuE;QACvE,+EAA+E;QAC/E,mFAAmF;QACnF,mFAAmF;QAEnF,+BAA+B;QAC/B,4GAA4G;QAC5G,4GAA4G;QAC5G,0GAA0G;QAC1G,gGAAgG;QAChG,oGAAoG;QACpG,oGAAoG;QACpG,2GAA2G;QAE3G,wBAAwB;QACxB,yFAAyF;QACzF,2EAA2E;QAC3E,mFAAmF;QACnF,kFAAkF;QAClF,uFAAuF;QAEvF,0BAA0B;QAC1B,4FAA4F;QAC5F,6FAA6F;QAC7F,+FAA+F;QAC/F,uFAAuF;QACvF,sFAAsF;QACtF,6FAA6F;QAE7F,8BAA8B;QAC9B,6FAA6F;QAC7F,uFAAuF;QACvF,0FAA0F;QAC1F,2HAA2H;QAC3H,gGAAgG;KACjG;IAED;;OAEG;IACH,gBAAgB,EAAE;QAChB,0BAA0B;QAC1B,kGAAkG;QAClG,qGAAqG;QAErG,kCAAkC;QAClC,mGAAmG;QACnG,6GAA6G;QAE7G,2BAA2B;QAC3B,gGAAgG;QAChG,0FAA0F;QAC1F,iGAAiG;QAEjG,8BAA8B;QAC9B,2FAA2F;QAC3F,2FAA2F;QAE3F,wCAAwC;QACxC,qHAAqH;QACrH,+HAA+H;QAC/H,wIAAwI;QAExI,6BAA6B;QAC7B,wGAAwG;QACxG,0GAA0G;QAC1G,6HAA6H;QAC7H,6HAA6H;QAE7H,iCAAiC;QACjC,2HAA2H;QAC3H,wHAAwH;QACxH,sHAAsH;QAEtH,yBAAyB;QACzB,iFAAiF;QACjF,qFAAqF;QACrF,qFAAqF;QACrF,+FAA+F;QAC/F,2FAA2F;QAC3F,sFAAsF;QACtF,oFAAoF;QAEpF,2BAA2B;QAC3B,yGAAyG;QACzG,iGAAiG;QAEjG,kCAAkC;QAClC,mHAAmH;QACnH,mHAAmH;QACnH,+GAA+G;QAC/G,oHAAoH;KACrH;IAED;;OAEG;IACH,gBAAgB,EAAE;QAChB,sCAAsC;QACtC,kJAAkJ;QAElJ,uCAAuC;QACvC,6GAA6G;QAE7G,2CAA2C;QAC3C,kIAAkI;QAElI,mCAAmC;QACnC,2GAA2G;QAE3G,gCAAgC;QAChC,8GAA8G;QAE9G,+BAA+B;QAC/B,mIAAmI;QAEnI,mCAAmC;QACnC,4GAA4G;QAE5G,8BAA8B;QAC9B,2IAA2I;KAC5I;IAED;;OAEG;IACH,cAAc,EAAE;QACd,2DAA2D;QAC3D,uGAAuG;QACvG,qHAAqH;QACrH,uHAAuH;QACvH,0HAA0H;QAE1H,oBAAoB;QACpB,+HAA+H;QAE/H,iCAAiC;QACjC,2KAA2K;QAE3K,4BAA4B;QAC5B,8HAA8H;KAC/H;IAED;;OAEG;IACH,eAAe,EAAE;QACf,iCAAiC;QACjC,6HAA6H;QAE7H,0CAA0C;QAC1C,sJAAsJ;QAEtJ,uCAAuC;QACvC,oJAAoJ;QAEpJ,oCAAoC;QACpC,yIAAyI;QAEzI,8BAA8B;QAC9B,oKAAoK;QAEpK,2CAA2C;QAC3C,kJAAkJ;KACnJ;IAED;;OAEG;IACH,iBAAiB,EAAE;QACjB,gCAAgC;QAChC;;;;;;;;;;;;;;;;2BAgBuB;QAEvB,kCAAkC;QAClC;;;;;;;;;;;;;;;;;2BAiBuB;QAEvB,kCAAkC;QAClC;;;;;;;;;;;;gEAY4D;KAC7D;CACF,CAAC;AAEF;;GAEG;AACH,MAAa,cAAc;IACzB;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,eAAe;QAC1B,IAAI,CAAC;YACH,gEAAgE;YAChE,MAAM,MAAM,GAAG,MAAM,IAAA,iBAAG,EAAA;;;;;;;;;OASvB,CAAC;YAEF,8CAA8C;YAC9C,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YACvD,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,KAAK,KAAK,WAAW,EAAE,CAAC;gBAC7C,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;gBAC5C,CAAC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;YAED,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,OAAO,UAAU,IAAI,CAAC,CAAC,CAAC,yDAAyD;QACnF,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,sBAAsB;QAEjC,MAAM,UAAU,GAAG;YACjB,GAAG,4BAAoB,CAAC,WAAW;YACnC,GAAG,4BAAoB,CAAC,gBAAgB;YACxC,GAAG,4BAAoB,CAAC,gBAAgB;YACxC,GAAG,4BAAoB,CAAC,cAAc;SACvC,CAAC;QAEF,oBAAoB;QACpB,KAAK,MAAM,UAAU,IAAI,UAAU,EAAE,CAAC;YACpC,IAAI,CAAC;gBACH,MAAM,IAAA,iBAAG,EAAA,GAAG,UAAU,EAAE,CAAC;YAC3B,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;YACvD,CAAC;QACH,CAAC;QAED,yBAAyB;QACzB,KAAK,MAAM,UAAU,IAAI,4BAAoB,CAAC,eAAe,EAAE,CAAC;YAC9D,IAAI,CAAC;gBACH,MAAM,IAAA,iBAAG,EAAA,GAAG,UAAU,EAAE,CAAC;YAC3B,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC;QAED,4BAA4B;QAC5B,KAAK,MAAM,SAAS,IAAI,4BAAoB,CAAC,iBAAiB,EAAE,CAAC;YAC/D,IAAI,CAAC;gBACH,MAAM,IAAA,iBAAG,EAAA,GAAG,SAAS,EAAE,CAAC;YAC1B,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC9D,CAAC;QACH,CAAC;IAEH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,uBAAuB;QAElC,IAAI,CAAC;YACH,mCAAmC;YACnC,MAAM,IAAA,iBAAG,EAAA,sCAAsC,CAAC,CAAC,sBAAsB;YACvE,MAAM,IAAA,iBAAG,EAAA,2BAA2B,CAAC;YAErC,yBAAyB;YACzB,MAAM,WAAW,GAAG,MAAM,IAAA,iBAAG,EAAA;;;;;;OAM5B,CAAC;YAGF,oBAAoB;YACpB,MAAM,UAAU,GAAG,MAAM,IAAA,iBAAG,EAAA;;;;;;OAM3B,CAAC;QACJ,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,0BAA0B;QAC/B,OAAO;YACL,kDAAkD;YAClD,2EAA2E;YAC3E,2DAA2D;YAC3D,2CAA2C;YAC3C,wDAAwD;YACxD,0CAA0C;YAC1C,2CAA2C;YAC3C,2CAA2C;YAC3C,iDAAiD;YACjD,0CAA0C;SAC3C,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,aAAa,CAAC,SAAiB,EAAE,WAAqC,EAAE;QAC7E,IAAI,cAAc,GAAG,SAAS,CAAC;QAE/B,sDAAsD;QACtD,IAAI,QAAQ,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YACtE,cAAc,IAAI,UAAU,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC/C,CAAC;QAED,gDAAgD;QAChD,IAAI,QAAQ,CAAC,SAAS,IAAI,cAAc,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;YACzE,6FAA6F;QAC/F,CAAC;QAED,kCAAkC;QAClC,IAAI,cAAc,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,aAAa,EAAE,CAAC;QAC9E,CAAC;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,wBAAwB;QAEnC,MAAM,KAAK,GAAG,CAAC,mBAAmB,EAAE,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;QAExF,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC;gBACH,MAAM,IAAA,iBAAG,EAAA,0CAA0C,IAAI,EAAE,CAAC;YAC5D,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,OAAO,CAAC,KAAK,CAAC,wCAAwC,IAAI,GAAG,EAAE,KAAK,CAAC,CAAC;YACxE,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAvKD,wCAuKC;AAED;;GAEG;AACH,MAAa,mBAAmB;IAC9B;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,kBAAkB;QAE7B,IAAI,CAAC;YACH,0BAA0B;YAC1B,MAAM,IAAA,iBAAG,EAAA,SAAS,CAAC;YAEnB,wBAAwB;YACxB,MAAM,IAAA,iBAAG,EAAA,QAAQ,CAAC;YAElB,kCAAkC;YAClC,MAAM,IAAA,iBAAG,EAAA,iCAAiC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;YAEnE,6BAA6B;YAC7B,MAAM,cAAc,CAAC,wBAAwB,EAAE,CAAC;QAClD,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;IAEH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,qBAAqB;QAChC,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAA,iBAAG,EAAA;;;;;;;;;;;;;;;;;OAiBxB,CAAC;YAEF,OAAO,OAAO,CAAC;QACjB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAC7D,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;CACF;AAtDD,kDAsDC","names":[],"sources":["/home/runner/workspace/server/database-optimization.ts"],"sourcesContent":["/**\n * Database optimization utilities for Quebec property management SaaS.\n * Provides index creation, query optimization, and caching strategies.\n */\n\nimport { sql } from 'drizzle-orm';\n\n/**\n * Options for query optimization.\n */\ninterface QueryOptimizationOptions {\n  limit?: number;\n  useExists?: boolean;\n  optimizeJoins?: boolean;\n}\n\n/**\n * Pagination options for large datasets.\n */\nexport interface PaginationOptions {\n  page: number;\n  pageSize: number;\n  sortBy?: string;\n  sortDirection?: 'ASC' | 'DESC';\n}\n\n/**\n * Pagination utilities for handling large datasets efficiently.\n */\nexport class PaginationHelper {\n  /**\n   * Generates LIMIT and OFFSET clause for pagination.\n   * @param options\n   * @param _options\n   */\n  static getPaginationClause(_options: PaginationOptions): string {\n    const offset = (_options.page - 1) * _options.pageSize;\n    return `LIMIT ${_options.pageSize} OFFSET ${offset}`;\n  }\n\n  /**\n   * Generates ORDER BY clause for sorting.\n   * @param options\n   * @param _options\n   */\n  static getSortClause(_options: PaginationOptions): string {\n    if (!_options.sortBy) {\n      return '';\n    }\n    return `ORDER BY ${_options.sortBy} ${_options.sortDirection || 'ASC'}`;\n  }\n\n  /**\n   * Calculates total pages for pagination controls.\n   * @param totalRecords\n   * @param pageSize\n   */\n  static calculateTotalPages(totalRecords: number, pageSize: number): number {\n    return Math.ceil(totalRecords / pageSize);\n  }\n\n  /**\n   * Validates pagination parameters.\n   * @param options\n   * @param _options\n   */\n  static validatePagination(_options: PaginationOptions): void {\n    if (_options.page < 1) {\n      throw new Error('Page number must be 1 or greater');\n    }\n    if (_options.pageSize < 1 || _options.pageSize > 1000) {\n      throw new Error('Page size must be between 1 and 1000');\n    }\n  }\n}\n\n/**\n * Database optimization queries for improving performance.\n * Targets 132ms average query time reduction through strategic indexing.\n */\nexport const DatabaseOptimization = {\n  /**\n   * Core indexes for frequently queried foreign keys and search fields.\n   * These indexes target the most common query patterns in property management.\n   */\n  coreIndexes: [\n    // Users table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email ON users(email)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_role ON users(role)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_active ON users(is_active)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_last_login ON users(last_login_at)',\n\n    // Organizations table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_type ON organizations(type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_active ON organizations(is_active)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_city ON organizations(city)',\n\n    // Buildings table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_org_id ON buildings(organization_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_type ON buildings(building_type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_active ON buildings(is_active)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_city ON buildings(city)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_postal ON buildings(postal_code)',\n\n    // Residences table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_building_id ON residences(building_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_unit ON residences(unit_number)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_active ON residences(is_active)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_floor ON residences(floor)',\n\n    // User-Residences relationship indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_user_id ON user_residences(user_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_residence_id ON user_residences(residence_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_active ON user_residences(is_active)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_relationship ON user_residences(relationship_type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_dates ON user_residences(start_date, end_date)',\n\n    // Bills table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_residence_id ON bills(residence_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_number ON bills(bill_number)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_status ON bills(status)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_type ON bills(type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_due_date ON bills(due_date)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_created_by ON bills(created_by)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_issue_date ON bills(issue_date)',\n\n    // Maintenance requests indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_residence_id ON maintenance_requests(residence_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_submitted_by ON maintenance_requests(submitted_by)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_assigned_to ON maintenance_requests(assigned_to)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_status ON maintenance_requests(status)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_priority ON maintenance_requests(priority)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_category ON maintenance_requests(category)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_scheduled ON maintenance_requests(scheduled_date)',\n\n    // Budgets table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_building_id ON budgets(building_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_year ON budgets(year)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_category ON budgets(category)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_active ON budgets(is_active)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_created_by ON budgets(created_by)',\n\n    // Documents table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_org_id ON documents(organization_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_building_id ON documents(building_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_residence_id ON documents(residence_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_category ON documents(category)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_public ON documents(is_public)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_uploaded_by ON documents(uploaded_by)',\n\n    // Notifications table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_user_id ON notifications(user_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_type ON notifications(type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_read ON notifications(is_read)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_entity ON notifications(related_entity_id, related_entity_type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_created ON notifications(created_at)',\n  ],\n\n  /**\n   * Development framework indexes for quality metrics and pillars.\n   */\n  frameworkIndexes: [\n    // Quality metrics indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_quality_metrics_type ON quality_metrics(metric_type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_quality_metrics_timestamp ON quality_metrics(timestamp)',\n\n    // Framework configuration indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_framework_config_key ON framework_configuration(_key)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_framework_config_updated ON framework_configuration(updated_at)',\n\n    // Workspace status indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_workspace_component ON workspace_status(component)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_workspace_status ON workspace_status(status)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_workspace_updated ON workspace_status(last_updated)',\n\n    // Development pillars indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pillars_status ON development_pillars(status)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pillars_order ON development_pillars(\"order\")',\n\n    // Metric effectiveness tracking indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_effectiveness_type ON metric_effectiveness_tracking(metric_type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_effectiveness_validation ON metric_effectiveness_tracking(validation_date)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_effectiveness_compliance ON metric_effectiveness_tracking(quebec_compliance_impact)',\n\n    // Metric predictions indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_type ON metric_predictions(metric_type)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_created ON metric_predictions(created_at)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_compliance ON metric_predictions(quebec_compliance_relevant)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_category ON metric_predictions(property_management_category)',\n\n    // Prediction validations indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_prediction_validations_prediction_id ON prediction_validations(prediction_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_prediction_validations_status ON prediction_validations(validation_status)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_prediction_validations_validated ON prediction_validations(validated_at)',\n\n    // Features table indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_status ON features(status)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_priority ON features(priority)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_category ON features(category)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_strategic ON features(is_strategic_path)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_roadmap ON features(show_on_roadmap)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_created ON features(created_at)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_synced ON features(synced_at)',\n\n    // Actionable items indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_actionable_items_feature_id ON actionable_items(feature_id)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_actionable_items_status ON actionable_items(status)',\n\n    // Improvement suggestions indexes\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_category ON improvement_suggestions(category)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_priority ON improvement_suggestions(priority)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_status ON improvement_suggestions(status)',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_created ON improvement_suggestions(created_at)',\n  ],\n\n  /**\n   * Composite indexes for complex query patterns.\n   */\n  compositeIndexes: [\n    // User residence active relationships\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_active_relationship ON user_residences(user_id, residence_id) WHERE is_active = true',\n\n    // Active bills by residence and status\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_residence_status ON bills(residence_id, status, due_date)',\n\n    // Active maintenance requests by residence\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_residence_status ON maintenance_requests(residence_id, status, priority)',\n\n    // Active buildings by organization\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_org_active ON buildings(organization_id, is_active)',\n\n    // Active residences by building\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_building_active ON residences(building_id, is_active)',\n\n    // Unread notifications by user\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_user_unread ON notifications(user_id, created_at) WHERE is_read = false',\n\n    // Current year budgets by building\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_building_year ON budgets(building_id, year, is_active)',\n\n    // Recent features for roadmap\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_roadmap_recent ON features(show_on_roadmap, created_at) WHERE show_on_roadmap = true',\n  ],\n\n  /**\n   * Partial indexes for improved performance on filtered queries.\n   */\n  partialIndexes: [\n    // Only index active records for frequently filtered tables\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_active_email ON users(email) WHERE is_active = true',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_active_type ON organizations(type) WHERE is_active = true',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_active_org ON buildings(organization_id) WHERE is_active = true',\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_active_building ON residences(building_id) WHERE is_active = true',\n\n    // Unpaid bills only\n    \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_unpaid ON bills(residence_id, due_date) WHERE status IN ('sent', 'overdue')\",\n\n    // Open maintenance requests only\n    \"CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_open ON maintenance_requests(residence_id, priority) WHERE status IN ('submitted', 'acknowledged', 'in_progress')\",\n\n    // Unread notifications only\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_unread ON notifications(user_id, created_at) WHERE is_read = false',\n  ],\n\n  /**\n   * Covering indexes for SELECT-heavy queries to avoid table lookups.\n   */\n  coveringIndexes: [\n    // User lookup with common fields\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_covering ON users(email) INCLUDE (first_name, last_name, role, is_active)',\n\n    // Building details with organization info\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_covering ON buildings(organization_id) INCLUDE (name, address, city, building_type, is_active)',\n\n    // Residence details with building info\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_covering ON residences(building_id) INCLUDE (unit_number, floor, square_footage, is_active)',\n\n    // Bill details for resident portals\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_covering ON bills(residence_id, status) INCLUDE (bill_number, amount, due_date, type)',\n\n    // Maintenance request details\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_covering ON maintenance_requests(residence_id, status) INCLUDE (title, priority, category, scheduled_date)',\n\n    // Notification details for user dashboards\n    'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_covering ON notifications(user_id, is_read) INCLUDE (title, message, type, created_at)',\n  ],\n\n  /**\n   * Materialized views for complex aggregations to improve dashboard performance.\n   */\n  materializedViews: [\n    // Building dashboard statistics\n    `CREATE MATERIALIZED VIEW IF NOT EXISTS mv_building_stats AS\n     SELECT \n       b.id as building_id,\n       b.name as building_name,\n       COUNT(DISTINCT r.id) as total_residences,\n       COUNT(DISTINCT ur.user_id) as total_residents,\n       COUNT(DISTINCT CASE WHEN bill.status = 'overdue' THEN bill.id END) as overdue_bills,\n       COUNT(DISTINCT CASE WHEN mr.status IN ('submitted', 'acknowledged', 'in_progress') THEN mr.id END) as open_maintenance,\n       AVG(r.square_footage) as avg_square_footage,\n       MAX(b.updated_at) as last_updated\n     FROM buildings b\n     LEFT JOIN residences r ON b.id = r.building_id AND r.is_active = true\n     LEFT JOIN user_residences ur ON r.id = ur.residence_id AND ur.is_active = true\n     LEFT JOIN bills bill ON r.id = bill.residence_id\n     LEFT JOIN maintenance_requests mr ON r.id = mr.residence_id\n     WHERE b.is_active = true\n     GROUP BY b.id, b.name`,\n\n    // Organization dashboard overview\n    `CREATE MATERIALIZED VIEW IF NOT EXISTS mv_organization_overview AS\n     SELECT \n       o.id as organization_id,\n       o.name as organization_name,\n       COUNT(DISTINCT b.id) as total_buildings,\n       COUNT(DISTINCT r.id) as total_residences,\n       COUNT(DISTINCT ur.user_id) as total_users,\n       SUM(CASE WHEN bill.status = 'paid' THEN bill.amount ELSE 0 END) as paid_amount,\n       SUM(CASE WHEN bill.status IN ('sent', 'overdue') THEN bill.amount ELSE 0 END) as outstanding_amount,\n       COUNT(CASE WHEN mr.status IN ('submitted', 'acknowledged', 'in_progress') THEN 1 END) as open_requests\n     FROM organizations o\n     LEFT JOIN buildings b ON o.id = b.organization_id AND b.is_active = true\n     LEFT JOIN residences r ON b.id = r.building_id AND r.is_active = true\n     LEFT JOIN user_residences ur ON r.id = ur.residence_id AND ur.is_active = true\n     LEFT JOIN bills bill ON r.id = bill.residence_id\n     LEFT JOIN maintenance_requests mr ON r.id = mr.residence_id\n     WHERE o.is_active = true\n     GROUP BY o.id, o.name`,\n\n    // Financial summary for budgeting\n    `CREATE MATERIALIZED VIEW IF NOT EXISTS mv_financial_summary AS\n     SELECT \n       b.building_id,\n       DATE_TRUNC('month', bill.due_date) as month,\n       SUM(CASE WHEN bill.status = 'paid' THEN bill.amount ELSE 0 END) as revenue,\n       SUM(CASE WHEN bill.status IN ('sent', 'overdue') THEN bill.amount ELSE 0 END) as outstanding,\n       COUNT(DISTINCT bill.residence_id) as billed_residences,\n       AVG(bill.amount) as avg_bill_amount\n     FROM bills bill\n     JOIN residences r ON bill.residence_id = r.id\n     JOIN buildings b ON r.building_id = b.id\n     WHERE bill.due_date >= DATE_TRUNC('year', CURRENT_DATE)\n     GROUP BY b.building_id, DATE_TRUNC('month', bill.due_date)`,\n  ],\n};\n\n/**\n * Query performance monitoring and optimization utilities.\n */\nexport class QueryOptimizer {\n  /**\n   * Check if database indexes are already set up\n   */\n  static async areIndexesSetup(): Promise<boolean> {\n    try {\n      // Check for a few key indexes to determine if setup is complete\n      const result = await sql`\n        SELECT COUNT(*) as count\n        FROM pg_indexes \n        WHERE indexname IN (\n          'idx_users_email',\n          'idx_buildings_org_id', \n          'idx_residences_building_id',\n          'idx_bills_residence_id'\n        )\n      `;\n\n      // Handle both array and direct result formats\n      const row = Array.isArray(result) ? result[0] : result;\n      if (!row || typeof row.count === 'undefined') {\n        if (process.env.NODE_ENV !== 'production') {\n        }\n        return false;\n      }\n\n      const indexCount = parseInt(String(row.count));\n      return indexCount >= 4; // If we have these key indexes, assume setup is complete\n    } catch (error: any) {\n      console.error('❌ Error checking database indexes:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Applies all core database indexes for Quebec property management.\n   */\n  static async applyCoreOptimizations(): Promise<void> {\n\n    const allIndexes = [\n      ...DatabaseOptimization.coreIndexes,\n      ...DatabaseOptimization.frameworkIndexes,\n      ...DatabaseOptimization.compositeIndexes,\n      ...DatabaseOptimization.partialIndexes,\n    ];\n\n    // Apply all indexes\n    for (const indexQuery of allIndexes) {\n      try {\n        await sql`${indexQuery}`;\n      } catch (error: any) {\n        console.error('❌ Error applying core index:', error);\n      }\n    }\n\n    // Apply covering indexes\n    for (const indexQuery of DatabaseOptimization.coveringIndexes) {\n      try {\n        await sql`${indexQuery}`;\n      } catch (error: any) {\n        console.error('❌ Error applying covering index:', error);\n      }\n    }\n\n    // Create materialized views\n    for (const viewQuery of DatabaseOptimization.materializedViews) {\n      try {\n        await sql`${viewQuery}`;\n      } catch (error: any) {\n        console.error('❌ Error creating materialized view:', error);\n      }\n    }\n\n  }\n\n  /**\n   * Analyzes query performance and suggests optimizations.\n   */\n  static async analyzeQueryPerformance(): Promise<void> {\n\n    try {\n      // Enable query logging temporarily\n      await sql`SET log_min_duration_statement = 100`; // Log queries > 100ms\n      await sql`SET log_statement = 'all'`;\n\n      // Check for slow queries\n      const slowQueries = await sql`\n        SELECT query, mean_exec_time, calls, total_exec_time\n        FROM pg_stat_statements\n        WHERE mean_exec_time > 100\n        ORDER BY mean_exec_time DESC\n        LIMIT 10\n      `;\n\n\n      // Check index usage\n      const indexUsage = await sql`\n        SELECT schemaname, tablename, indexname, idx_tup_read, idx_tup_fetch\n        FROM pg_stat_user_indexes\n        WHERE idx_tup_read > 0\n        ORDER BY idx_tup_read DESC\n        LIMIT 20\n      `;\n    } catch (error: any) {\n      console.error('❌ Error analyzing query performance:', error);\n    }\n  }\n\n  /**\n   * Provides query optimization suggestions.\n   */\n  static getOptimizationSuggestions(): string[] {\n    return [\n      '✅ Add indexes on frequently queried foreign keys',\n      '✅ Use partial indexes for filtered queries (e.g., WHERE is_active = true)',\n      '✅ Implement query result caching for expensive operations',\n      '✅ Use LIMIT clauses for large result sets',\n      '✅ Consider materialized views for complex aggregations',\n      '✅ Optimize JOIN order in complex queries',\n      '✅ Use EXISTS instead of IN for subqueries',\n      '✅ Implement pagination for large datasets',\n      '✅ Add covering indexes for SELECT-heavy queries',\n      '✅ Regular VACUUM and ANALYZE maintenance',\n    ];\n  }\n\n  /**\n   * Optimizes query structure for better performance.\n   * @param baseQuery\n   * @param options\n   * @param _options\n   */\n  static optimizeQuery(baseQuery: string, _options: QueryOptimizationOptions = {}): string {\n    let optimizedQuery = baseQuery;\n\n    // Add LIMIT clause if not present and limit specified\n    if (_options.limit && !optimizedQuery.toLowerCase().includes('limit')) {\n      optimizedQuery += ` LIMIT ${_options.limit}`;\n    }\n\n    // Replace IN with EXISTS for better performance\n    if (_options.useExists && optimizedQuery.toLowerCase().includes(' in (')) {\n      // This is a simplified replacement - in practice, this would need more sophisticated parsing\n    }\n\n    // Suggest JOIN order optimization\n    if (optimizedQuery.toLowerCase().includes('join') && _options.optimizeJoins) {\n    }\n\n    return optimizedQuery;\n  }\n\n  /**\n   * Refreshes materialized views for up-to-date aggregated data.\n   */\n  static async refreshMaterializedViews(): Promise<void> {\n\n    const views = ['mv_building_stats', 'mv_organization_overview', 'mv_financial_summary'];\n\n    for (const view of views) {\n      try {\n        await sql`REFRESH MATERIALIZED VIEW CONCURRENTLY ${view}`;\n      } catch (error: any) {\n        console.error(`❌ Error refreshing materialized view ${view}:`, error);\n      }\n    }\n  }\n}\n\n/**\n * Database maintenance utilities for optimal performance.\n */\nexport class DatabaseMaintenance {\n  /**\n   * Performs routine database maintenance for optimal performance.\n   */\n  static async performMaintenance(): Promise<void> {\n\n    try {\n      // Update table statistics\n      await sql`ANALYZE`;\n\n      // Clean up unused space\n      await sql`VACUUM`;\n\n      // Reindex for optimal performance\n      await sql`REINDEX DATABASE CONCURRENTLY ${process.env.PGDATABASE}`;\n\n      // Refresh materialized views\n      await QueryOptimizer.refreshMaterializedViews();\n    } catch (error: any) {\n      console.error('❌ Error performing database maintenance:', error);\n    }\n\n  }\n\n  /**\n   * Monitors database performance metrics.\n   */\n  static async getPerformanceMetrics(): Promise<any> {\n    try {\n      const metrics = await sql`\n        SELECT \n          'connections' as metric,\n          count(*) as value\n        FROM pg_stat_activity\n        UNION ALL\n        SELECT \n          'slow_queries' as metric,\n          count(*) as value\n        FROM pg_stat_statements\n        WHERE mean_exec_time > 100\n        UNION ALL\n        SELECT \n          'cache_hit_ratio' as metric,\n          round(100.0 * sum(blks_hit) / (sum(blks_hit) + sum(blks_read)), 2) as value\n        FROM pg_stat_database\n        WHERE datname = current_database()\n      `;\n\n      return metrics;\n    } catch (error: any) {\n      console.error('❌ Error getting performance metrics:', error);\n      return [];\n    }\n  }\n}\n"],"version":3}