{"file":"/home/runner/workspace/server/utils/input-sanitization.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/utils/input-sanitization.ts"],"sourcesContent":["/**\n * Input sanitization and validation utilities for Quebec property management system.\n * Provides security and data consistency functions for user input processing.\n */\n\n/**\n * Sanitizes user input to prevent XSS and injection attacks\n */\nexport function sanitizeString(input: string): string {\n  if (!input) return '';\n\n  return input\n    .trim()\n    .replace(/[<>]/g, '') // Remove potential HTML tags\n    .replace(/['\";]/g, '') // Remove potential SQL injection characters\n    .substring(0, 500); // Limit length to prevent buffer overflow\n}\n\n/**\n * Validates and normalizes email addresses\n */\nexport function normalizeEmail(email: string): string {\n  if (!email) return '';\n  return email.toLowerCase().trim();\n}\n\n/**\n * Validates Quebec postal code format\n */\nexport function isValidQuebecPostalCode(postalCode: string): boolean {\n  if (!postalCode) return true; // Optional field\n  const quebecPostalCodeRegex =\n    /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ] ?\\d[ABCEGHJKLMNPRSTVWXYZ]\\d$/i;\n  return quebecPostalCodeRegex.test(postalCode.trim());\n}\n\n/**\n * Validates North American phone number format\n */\nexport function isValidNorthAmericanPhone(phone: string): boolean {\n  if (!phone) return true; // Optional field\n  const phoneRegex = /^(\\+1\\s?)?(\\([0-9]{3}\\)|[0-9]{3})[\\s.-]?[0-9]{3}[\\s.-]?[0-9]{4}$/;\n  return phoneRegex.test(phone.trim());\n}\n\n/**\n * Sanitizes and validates user names (first, last)\n */\nexport function sanitizeName(name: string): string {\n  if (!name) return '';\n\n  return name\n    .trim()\n    .replace(/[^a-zA-ZÀ-ÿ\\s'-]/g, '') // Allow accented characters for Quebec names\n    .replace(/\\s+/g, ' ') // Normalize multiple spaces\n    .substring(0, 100); // Limit to 100 characters\n}\n\n/**\n * Generates a secure, unique username from email\n */\nexport function generateUsernameFromEmail(email: string): string {\n  if (!email) return '';\n\n  return email\n    .split('@')[0]\n    .toLowerCase()\n    .replace(/[^a-z0-9]/g, '') // Remove non-alphanumeric characters\n    .substring(0, 30); // Limit username length\n}\n\n/**\n * Validates password strength for Quebec compliance\n */\nexport function validatePasswordStrength(password: string): { isValid: boolean; message?: string } {\n  if (!password) {\n    return { isValid: false, message: 'Password is required' };\n  }\n\n  if (password.length < 8) {\n    return { isValid: false, message: 'Password must be at least 8 characters long' };\n  }\n\n  const hasUppercase = /[A-Z]/.test(password);\n  const hasLowercase = /[a-z]/.test(password);\n  const hasNumber = /\\d/.test(password);\n  const hasSpecialChar = /[@$!%*?&]/.test(password);\n\n  if (!hasUppercase || !hasLowercase || !hasNumber || !hasSpecialChar) {\n    return {\n      isValid: false,\n      message:\n        'Password must contain uppercase, lowercase, number, and special character (@$!%*?&)',\n    };\n  }\n\n  return { isValid: true };\n}\n\n/**\n * Sanitizes and validates address fields for Quebec addresses\n */\nexport function sanitizeAddress(address: string): string {\n  if (!address) return '';\n\n  return address\n    .trim()\n    .replace(/[<>]/g, '') // Remove potential HTML\n    .substring(0, 200); // Limit address length\n}\n"],"version":3}