{"file":"/home/runner/workspace/server/services/gemini-bill-analyzer.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/services/gemini-bill-analyzer.ts"],"sourcesContent":["import * as fs from 'fs';\nimport { GoogleGenAI } from '@google/genai';\n\n// DON'T DELETE THIS COMMENT\n// Follow these instructions when using this blueprint:\n// - Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\n//   - do not change this unless explicitly requested by the user\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || '' });\n\n/**\n *\n */\nexport interface BillAnalysisResult {\n  title: string;\n  vendor: string;\n  totalAmount: string;\n  category: string;\n  description?: string;\n  dueDate?: string;\n  issueDate?: string;\n  billNumber?: string;\n  confidence: number;\n}\n\n/**\n *\n */\nexport class GeminiBillAnalyzer {\n  /**\n   * Analyze a bill document using Gemini 2.5 Pro.\n   * @param filePath\n   * @param mimeType \n   */\n  async analyzeBillDocument(filePath: string, mimeType?: string): Promise<BillAnalysisResult> {\n    try {\n      const fileBytes = fs.readFileSync(filePath);\n      \n      // Detect MIME type if not provided  \n      const detectedMimeType = mimeType || this.detectMimeType(filePath);\n\n      const systemPrompt = `You are an expert bill analysis AI. Analyze this bill/invoice document and extract key information.\n      \n      Extract the following information and respond with JSON in this exact format:\n      {\n        \"title\": \"Brief descriptive title for this bill\",\n        \"vendor\": \"Company or service provider name\",\n        \"totalAmount\": \"Total amount as decimal string (e.g., '1234.56')\",\n        \"category\": \"One of: insurance, maintenance, salary, utilities, cleaning, security, landscaping, professional_services, administration, repairs, supplies, taxes, technology, reserves, other\",\n        \"description\": \"Brief description of services/products\",\n        \"dueDate\": \"Due date in YYYY-MM-DD format if found\",\n        \"issueDate\": \"Issue date in YYYY-MM-DD format if found\", \n        \"billNumber\": \"Bill/invoice number if found\",\n        \"confidence\": 0.85\n      }\n      \n      Guidelines:\n      - Use clear, concise titles (e.g., \"Hydro-Qu√©bec Electricity Bill\", \"Property Insurance Premium\")\n      - Map categories intelligently (electricity = utilities, legal fees = professional_services, etc.)\n      - Extract exact amounts without currency symbols\n      - Confidence should reflect how clear the document is (0.0-1.0)\n      - If information is unclear, use best guess but lower confidence\n      \n      **IMPORTANT: Your response MUST be a raw JSON object only, without any Markdown formatting, backticks, or explanatory text. Do not wrap the JSON in triple backticks or any other non-JSON characters.**`;\n\n      const response = await ai.models.generateContent({\n        model: 'gemini-1.5-flash',\n        contents: [\n          {\n            role: 'user',\n            parts: [\n              { text: systemPrompt },\n              {\n                inlineData: {\n                  mimeType: detectedMimeType,\n                  data: fileBytes.toString('base64')\n                }\n              }\n            ]\n          }\n        ]\n      });\n\n      const rawJson = response.text;\n\n      if (rawJson) {\n        // Sanitize the response by removing markdown code blocks\n        const sanitizedJson = this.sanitizeJsonResponse(rawJson);\n        \n        let analysis: BillAnalysisResult;\n        \n        try {\n          analysis = JSON.parse(sanitizedJson);\n        } catch (parseError) {\n          console.error('JSON parsing failed for AI response:', parseError);\n          throw new Error('Failed to parse AI response as JSON');\n        }\n\n        // Validate and sanitize the results\n        analysis.confidence = Math.max(0, Math.min(1, analysis.confidence));\n        analysis.totalAmount = this.sanitizeAmount(analysis.totalAmount);\n\n        return analysis;\n      } else {\n        throw new Error('Empty response from Gemini');\n      }\n    } catch (error: any) {\n      console.error('Error analyzing bill document:', error);\n      throw new Error(`Failed to analyze bill document: ${error}`);\n    }\n  }\n\n  /**\n   * Sanitize JSON response by removing markdown code blocks and whitespace.\n   * @param rawResponse The raw response from the AI\n   * @returns Clean JSON string\n   */\n  private sanitizeJsonResponse(rawResponse: string): string {\n    if (!rawResponse) {\n      return rawResponse;\n    }\n\n    // Remove markdown code blocks (```json and ```)\n    let cleaned = rawResponse\n      .replace(/```json\\s*/gi, '') // Remove opening ```json with optional whitespace\n      .replace(/```\\s*$/g, '') // Remove closing ``` at end with optional whitespace\n      .replace(/^```\\s*/g, '') // Remove opening ``` at start with optional whitespace\n      .trim(); // Remove leading/trailing whitespace\n\n    return cleaned;\n  }\n\n  /**\n   * Detect MIME type from file path.\n   * @param filePath\n   */\n  private detectMimeType(filePath: string): string {\n    const extension = filePath.toLowerCase().split('.').pop();\n    \n    switch (extension) {\n      case 'pdf':\n        return 'application/pdf';\n      case 'jpg':\n      case 'jpeg':\n        return 'image/jpeg';\n      case 'png':\n        return 'image/png';\n      case 'gif':\n        return 'image/gif';\n      case 'webp':\n        return 'image/webp';\n      default:\n        // Default to PDF since that's what we're trying to support\n        return 'application/pdf';\n    }\n  }\n\n  /**\n   * Sanitize and validate amount string.\n   * @param amount\n   */\n  private sanitizeAmount(amount: string): string {\n    // Remove currency symbols and spaces\n    const cleaned = amount.replace(/[^0-9.-]/g, '');\n    const parsed = parseFloat(cleaned);\n\n    if (isNaN(parsed)) {\n      return '0.00';\n    }\n\n    return parsed.toFixed(2);\n  }\n\n  /**\n   * Get suggested payment schedule based on bill type and amount.\n   * @param category\n   * @param amount\n   */\n  async suggestPaymentSchedule(\n    category: string,\n    amount: number\n  ): Promise<{\n    paymentType: 'unique' | 'recurrent';\n    schedulePayment?: 'monthly' | 'quarterly' | 'yearly';\n    reasoning: string;\n  }> {\n    try {\n      const prompt = `Based on this bill category \"${category}\" and amount $${amount}, suggest the most appropriate payment schedule.\n      \n      Common patterns:\n      - Utilities: Usually monthly recurring\n      - Insurance: Usually yearly recurring  \n      - Maintenance: Usually unique payments\n      - Professional services: Usually unique payments\n      - Supplies: Usually unique payments\n      - Taxes: Usually yearly recurring\n      \n      Respond with JSON:\n      {\n        \"paymentType\": \"unique\" or \"recurrent\",\n        \"schedulePayment\": \"monthly\", \"quarterly\", or \"yearly\" (only if recurrent),\n        \"reasoning\": \"Brief explanation of the recommendation\"\n      }`;\n\n      const response = await ai.models.generateContent({\n        model: 'gemini-2.5-flash',\n        config: {\n          responseMimeType: 'application/json',\n          responseSchema: {\n            type: 'object',\n            properties: {\n              paymentType: { type: 'string', enum: ['unique', 'recurrent'] },\n              schedulePayment: { type: 'string', enum: ['monthly', 'quarterly', 'yearly'] },\n              reasoning: { type: 'string' },\n            },\n            required: ['paymentType', 'reasoning'],\n          },\n        },\n        contents: prompt,\n      });\n\n      const result = JSON.parse(response.text || '{}');\n      return result;\n    } catch (error: any) {\n      console.error('‚ùå Error suggesting payment schedule:', error);\n      return {\n        paymentType: 'unique',\n        reasoning: 'Default to unique payment due to analysis error',\n      };\n    }\n  }\n}\n\nexport const geminiBillAnalyzer = new GeminiBillAnalyzer();\n"],"version":3}