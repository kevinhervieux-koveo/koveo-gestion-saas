3e0cdd5a0f7bf09b90b68c0b643e8045
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pool = exports.db = exports.sql = void 0;
const serverless_1 = require("@neondatabase/serverless");
const neon_http_1 = require("drizzle-orm/neon-http");
const index_1 = require("./config/index");
// Import only tables that exist, not relations to avoid circular dependency issues in production
const schema_1 = require("@shared/schema");
// Use correct database URL based on environment (production uses DATABASE_URL_KOVEO)
const databaseUrl = index_1.config.database.url;
if (!databaseUrl) {
    throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');
}
const isUsingKoveoDb = databaseUrl.includes('DATABASE_URL_KOVEO') || (index_1.config.server.isProduction && process.env.DATABASE_URL_KOVEO);
// Database connection established
/**
 * Neon serverless database connection using HTTP.
 * Uses the same pattern as your successful test code.
 * Optimized for serverless environments like Replit deployments.
 */
exports.sql = (0, serverless_1.neon)(databaseUrl, {
    arrayMode: false,
    fullResults: false,
});
// Test connection
(async () => {
    try {
        const result = await (0, exports.sql) `SELECT version()`;
        // Database connection verified
    }
    catch (error) {
        console.error('Database connection failed:', error.message);
    }
})();
// Create schema object with only tables (no relations to avoid production errors)
const schema = {
    users: schema_1.users,
    organizations: schema_1.organizations,
    buildings: schema_1.buildings,
    residences: schema_1.residences,
    userOrganizations: schema_1.userOrganizations,
    userResidences: schema_1.userResidences,
    invitations: schema_1.invitations,
    documents: schema_1.documents,
    bills: schema_1.bills,
    demands: schema_1.demands,
    commonSpaces: schema_1.commonSpaces,
    passwordResetTokens: schema_1.passwordResetTokens,
    maintenanceRequests: schema_1.maintenanceRequests,
    permissions: schema_1.permissions,
    userPermissions: schema_1.userPermissions,
    rolePermissions: schema_1.rolePermissions,
    budgets: schema_1.budgets,
    monthlyBudgets: schema_1.monthlyBudgets,
};
/**
 * Drizzle ORM database instance with table definitions only.
 * Provides type-safe database operations for the Quebec property management system.
 * Uses HTTP connection for better compatibility with serverless environments.
 */
exports.db = (0, neon_http_1.drizzle)(exports.sql, { schema });
// Database schema initialized
// For compatibility, export sql as pool for session store
exports.pool = exports.sql;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEseURBQWdEO0FBQ2hELHFEQUFnRDtBQUNoRCwwQ0FBd0M7QUFFeEMsaUdBQWlHO0FBQ2pHLDJDQW1Cd0I7QUFFeEIscUZBQXFGO0FBQ3JGLE1BQU0sV0FBVyxHQUFHLGNBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO0FBRXhDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUVELE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGNBQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNwSSxrQ0FBa0M7QUFFbEM7Ozs7R0FJRztBQUNVLFFBQUEsR0FBRyxHQUFHLElBQUEsaUJBQUksRUFBQyxXQUFXLEVBQUU7SUFDbkMsU0FBUyxFQUFFLEtBQUs7SUFDaEIsV0FBVyxFQUFFLEtBQUs7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsa0JBQWtCO0FBQ2xCLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDVixJQUFJLENBQUM7UUFDSCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsV0FBRyxFQUFBLGtCQUFrQixDQUFDO1FBQzNDLCtCQUErQjtJQUNqQyxDQUFDO0lBQUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztRQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLDZCQUE2QixFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5RCxDQUFDO0FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMLGtGQUFrRjtBQUNsRixNQUFNLE1BQU0sR0FBRztJQUNiLEtBQUssRUFBTCxjQUFLO0lBQ0wsYUFBYSxFQUFiLHNCQUFhO0lBQ2IsU0FBUyxFQUFULGtCQUFTO0lBQ1QsVUFBVSxFQUFWLG1CQUFVO0lBQ1YsaUJBQWlCLEVBQWpCLDBCQUFpQjtJQUNqQixjQUFjLEVBQWQsdUJBQWM7SUFDZCxXQUFXLEVBQVgsb0JBQVc7SUFDWCxTQUFTLEVBQVQsa0JBQVM7SUFDVCxLQUFLLEVBQUwsY0FBSztJQUNMLE9BQU8sRUFBUCxnQkFBTztJQUNQLFlBQVksRUFBWixxQkFBWTtJQUNaLG1CQUFtQixFQUFuQiw0QkFBbUI7SUFDbkIsbUJBQW1CLEVBQW5CLDRCQUFtQjtJQUNuQixXQUFXLEVBQVgsb0JBQVc7SUFDWCxlQUFlLEVBQWYsd0JBQWU7SUFDZixlQUFlLEVBQWYsd0JBQWU7SUFDZixPQUFPLEVBQVAsZ0JBQU87SUFDUCxjQUFjLEVBQWQsdUJBQWM7Q0FDZixDQUFDO0FBRUY7Ozs7R0FJRztBQUNVLFFBQUEsRUFBRSxHQUFHLElBQUEsbUJBQU8sRUFBQyxXQUFHLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRTNDLDhCQUE4QjtBQUU5QiwwREFBMEQ7QUFDN0MsUUFBQSxJQUFJLEdBQUcsV0FBRyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc2VydmVyL2RiLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5lb24gfSBmcm9tICdAbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MnO1xuaW1wb3J0IHsgZHJpenpsZSB9IGZyb20gJ2RyaXp6bGUtb3JtL25lb24taHR0cCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZy9pbmRleCc7XG5cbi8vIEltcG9ydCBvbmx5IHRhYmxlcyB0aGF0IGV4aXN0LCBub3QgcmVsYXRpb25zIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgaXNzdWVzIGluIHByb2R1Y3Rpb25cbmltcG9ydCB7XG4gIHVzZXJzLFxuICBvcmdhbml6YXRpb25zLFxuICBidWlsZGluZ3MsXG4gIHJlc2lkZW5jZXMsXG4gIHVzZXJPcmdhbml6YXRpb25zLFxuICB1c2VyUmVzaWRlbmNlcyxcbiAgaW52aXRhdGlvbnMsXG4gIGRvY3VtZW50cyxcbiAgYmlsbHMsXG4gIGRlbWFuZHMsXG4gIGNvbW1vblNwYWNlcyxcbiAgcGFzc3dvcmRSZXNldFRva2VucyxcbiAgbWFpbnRlbmFuY2VSZXF1ZXN0cyxcbiAgcGVybWlzc2lvbnMsXG4gIHVzZXJQZXJtaXNzaW9ucyxcbiAgcm9sZVBlcm1pc3Npb25zLFxuICBidWRnZXRzLFxuICBtb250aGx5QnVkZ2V0cyxcbn0gZnJvbSAnQHNoYXJlZC9zY2hlbWEnO1xuXG4vLyBVc2UgY29ycmVjdCBkYXRhYmFzZSBVUkwgYmFzZWQgb24gZW52aXJvbm1lbnQgKHByb2R1Y3Rpb24gdXNlcyBEQVRBQkFTRV9VUkxfS09WRU8pXG5jb25zdCBkYXRhYmFzZVVybCA9IGNvbmZpZy5kYXRhYmFzZS51cmw7XG5cbmlmICghZGF0YWJhc2VVcmwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdEQVRBQkFTRV9VUkwgbXVzdCBiZSBzZXQuIERpZCB5b3UgZm9yZ2V0IHRvIHByb3Zpc2lvbiBhIGRhdGFiYXNlPycpO1xufVxuXG5jb25zdCBpc1VzaW5nS292ZW9EYiA9IGRhdGFiYXNlVXJsLmluY2x1ZGVzKCdEQVRBQkFTRV9VUkxfS09WRU8nKSB8fCAoY29uZmlnLnNlcnZlci5pc1Byb2R1Y3Rpb24gJiYgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMX0tPVkVPKTtcbi8vIERhdGFiYXNlIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWRcblxuLyoqXG4gKiBOZW9uIHNlcnZlcmxlc3MgZGF0YWJhc2UgY29ubmVjdGlvbiB1c2luZyBIVFRQLlxuICogVXNlcyB0aGUgc2FtZSBwYXR0ZXJuIGFzIHlvdXIgc3VjY2Vzc2Z1bCB0ZXN0IGNvZGUuXG4gKiBPcHRpbWl6ZWQgZm9yIHNlcnZlcmxlc3MgZW52aXJvbm1lbnRzIGxpa2UgUmVwbGl0IGRlcGxveW1lbnRzLlxuICovXG5leHBvcnQgY29uc3Qgc3FsID0gbmVvbihkYXRhYmFzZVVybCwge1xuICBhcnJheU1vZGU6IGZhbHNlLFxuICBmdWxsUmVzdWx0czogZmFsc2UsXG59KTtcblxuLy8gVGVzdCBjb25uZWN0aW9uXG4oYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNxbGBTRUxFQ1QgdmVyc2lvbigpYDtcbiAgICAvLyBEYXRhYmFzZSBjb25uZWN0aW9uIHZlcmlmaWVkXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvci5tZXNzYWdlKTtcbiAgfVxufSkoKTtcblxuLy8gQ3JlYXRlIHNjaGVtYSBvYmplY3Qgd2l0aCBvbmx5IHRhYmxlcyAobm8gcmVsYXRpb25zIHRvIGF2b2lkIHByb2R1Y3Rpb24gZXJyb3JzKVxuY29uc3Qgc2NoZW1hID0ge1xuICB1c2VycyxcbiAgb3JnYW5pemF0aW9ucyxcbiAgYnVpbGRpbmdzLFxuICByZXNpZGVuY2VzLFxuICB1c2VyT3JnYW5pemF0aW9ucyxcbiAgdXNlclJlc2lkZW5jZXMsXG4gIGludml0YXRpb25zLFxuICBkb2N1bWVudHMsXG4gIGJpbGxzLFxuICBkZW1hbmRzLFxuICBjb21tb25TcGFjZXMsXG4gIHBhc3N3b3JkUmVzZXRUb2tlbnMsXG4gIG1haW50ZW5hbmNlUmVxdWVzdHMsXG4gIHBlcm1pc3Npb25zLFxuICB1c2VyUGVybWlzc2lvbnMsXG4gIHJvbGVQZXJtaXNzaW9ucyxcbiAgYnVkZ2V0cyxcbiAgbW9udGhseUJ1ZGdldHMsXG59O1xuXG4vKipcbiAqIERyaXp6bGUgT1JNIGRhdGFiYXNlIGluc3RhbmNlIHdpdGggdGFibGUgZGVmaW5pdGlvbnMgb25seS5cbiAqIFByb3ZpZGVzIHR5cGUtc2FmZSBkYXRhYmFzZSBvcGVyYXRpb25zIGZvciB0aGUgUXVlYmVjIHByb3BlcnR5IG1hbmFnZW1lbnQgc3lzdGVtLlxuICogVXNlcyBIVFRQIGNvbm5lY3Rpb24gZm9yIGJldHRlciBjb21wYXRpYmlsaXR5IHdpdGggc2VydmVybGVzcyBlbnZpcm9ubWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBkYiA9IGRyaXp6bGUoc3FsLCB7IHNjaGVtYSB9KTtcblxuLy8gRGF0YWJhc2Ugc2NoZW1hIGluaXRpYWxpemVkXG5cbi8vIEZvciBjb21wYXRpYmlsaXR5LCBleHBvcnQgc3FsIGFzIHBvb2wgZm9yIHNlc3Npb24gc3RvcmVcbmV4cG9ydCBjb25zdCBwb29sID0gc3FsO1xuIl0sInZlcnNpb24iOjN9