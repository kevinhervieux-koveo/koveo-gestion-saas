{"file":"/home/runner/workspace/tests/integration/document-file-access.test.ts","mappings":";;;;;AAAA,2CAAkF;AAClF,0DAAgC;AAChC,sDAA8B;AAC9B,sEAAsC;AACtC,0DAAoE;AAEpE;;;;;;;;;GASG;AAEH,wBAAwB;AACxB,MAAM,iBAAiB,GAAG;IACxB,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,IAAI,EAAE,aAAa,EAAE;IAC/D,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,aAAa,EAAE;CACjE,CAAC;AAEF,MAAM,aAAa,GAAG;IACpB,EAAE,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE;IACzF,EAAE,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE;IACzF,EAAE,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE;CAC1F,CAAC;AAEF,MAAM,cAAc,GAAG;IACrB,EAAE,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE;IAClE,EAAE,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE;IAClE,EAAE,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE;IAClE,EAAE,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,YAAY,EAAE;CACnE,CAAC;AAEF,MAAM,SAAS,GAAG;IAChB,KAAK,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE;IAChE,OAAO,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,SAAS,EAAE;IACxE,SAAS,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,oBAAoB,EAAE,IAAI,EAAE,UAAU,EAAE;IAC9E,SAAS,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,oBAAoB,EAAE,IAAI,EAAE,UAAU,EAAE;IAC9E,OAAO,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE;IACtE,OAAO,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE;CACvE,CAAC;AAEF,MAAM,aAAa,GAAG;IACpB,qBAAqB;IACrB;QACE,EAAE,EAAE,uBAAuB;QAC3B,IAAI,EAAE,yBAAyB;QAC/B,UAAU,EAAE,YAAY;QACxB,WAAW,EAAE,IAAI;QACjB,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,OAAO;QACrB,QAAQ,EAAE,gCAAgC;QAC1C,YAAY,EAAE,WAAW;KAC1B;IACD;QACE,EAAE,EAAE,wBAAwB;QAC5B,IAAI,EAAE,yBAAyB;QAC/B,UAAU,EAAE,YAAY;QACxB,WAAW,EAAE,IAAI;QACjB,kBAAkB,EAAE,KAAK;QACzB,YAAY,EAAE,WAAW;QACzB,QAAQ,EAAE,iCAAiC;QAC3C,YAAY,EAAE,WAAW;KAC1B;IACD;QACE,EAAE,EAAE,uBAAuB;QAC3B,IAAI,EAAE,wBAAwB;QAC9B,UAAU,EAAE,YAAY;QACxB,WAAW,EAAE,IAAI;QACjB,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,aAAa;QAC3B,QAAQ,EAAE,sCAAsC;QAChD,YAAY,EAAE,WAAW;KAC1B;IACD;QACE,EAAE,EAAE,yBAAyB;QAC7B,IAAI,EAAE,uBAAuB;QAC7B,UAAU,EAAE,YAAY;QACxB,WAAW,EAAE,IAAI;QACjB,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,OAAO;QACrB,QAAQ,EAAE,mCAAmC;QAC7C,YAAY,EAAE,SAAS;KACxB;IAED,sBAAsB;IACtB;QACE,EAAE,EAAE,wBAAwB;QAC5B,IAAI,EAAE,wBAAwB;QAC9B,UAAU,EAAE,IAAI;QAChB,WAAW,EAAE,aAAa;QAC1B,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,OAAO;QACrB,QAAQ,EAAE,kCAAkC;QAC5C,YAAY,EAAE,YAAY;KAC3B;IACD;QACE,EAAE,EAAE,yBAAyB;QAC7B,IAAI,EAAE,yBAAyB;QAC/B,UAAU,EAAE,IAAI;QAChB,WAAW,EAAE,aAAa;QAC1B,kBAAkB,EAAE,KAAK;QACzB,YAAY,EAAE,OAAO;QACrB,QAAQ,EAAE,oCAAoC;QAC9C,YAAY,EAAE,YAAY;KAC3B;IACD;QACE,EAAE,EAAE,wBAAwB;QAC5B,IAAI,EAAE,wBAAwB;QAC9B,UAAU,EAAE,IAAI;QAChB,WAAW,EAAE,aAAa;QAC1B,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,aAAa;QAC3B,QAAQ,EAAE,wCAAwC;QAClD,YAAY,EAAE,YAAY;KAC3B;IACD;QACE,EAAE,EAAE,0BAA0B;QAC9B,IAAI,EAAE,wBAAwB;QAC9B,UAAU,EAAE,IAAI;QAChB,WAAW,EAAE,aAAa;QAC1B,kBAAkB,EAAE,IAAI;QACxB,YAAY,EAAE,OAAO;QACrB,QAAQ,EAAE,kCAAkC;QAC5C,YAAY,EAAE,UAAU;KACzB;CACF,CAAC;AAEF,MAAM,qBAAqB,GAAG;IAC5B,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,OAAO,EAAE;CACjD,CAAC;AAEF,MAAM,kBAAkB,GAAG;IACzB,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,EAAE;IACpD,EAAE,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,aAAa,EAAE;IACpD,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE;IAClD,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE;CACnD,CAAC;AAEF,8BAA8B;AAC9B,MAAM,WAAW,GAAG;IAClB,oBAAoB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC/B,iBAAiB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC5B,YAAY,EAAE,cAAI,CAAC,EAAE,EAAE;IACvB,aAAa,EAAE,cAAI,CAAC,EAAE,EAAE;IACxB,YAAY,EAAE,cAAI,CAAC,EAAE,EAAE;CACxB,CAAC;AAEF,2CAA2C;AAC3C,MAAM,MAAM,GAAG;IACb,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;IACrB,QAAQ,EAAE,cAAI,CAAC,EAAE,EAAE;CACpB,CAAC;AAEF,gCAAgC;AAChC,IAAI,GAAwB,CAAC;AAE7B,IAAA,oBAAU,EAAC,GAAG,EAAE;IACd,cAAI,CAAC,aAAa,EAAE,CAAC;IAErB,qBAAqB;IACrB,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IAChB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAExB,oDAAoD;IACpD,GAAG,CAAC,GAAG,CAAC,IAAA,yBAAO,EAAC;QACd,MAAM,EAAE,aAAa;QACrB,MAAM,EAAE,KAAK;QACb,iBAAiB,EAAE,KAAK;QACxB,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;KAC1B,CAAC,CAAC,CAAC;IAEJ,iCAAiC;IACjC,MAAM,QAAQ,GAAG,CAAC,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;QACjD,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,EAAE,CAAC;QACT,CAAC;aAAM,CAAC;YACN,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;QACpD,CAAC;IACH,CAAC,CAAC;IAEF,gCAAgC;IAChC,cAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,GAAG,EAAE,CAAC,CAAC;QACtC,WAAW,EAAE,QAAQ;KACtB,CAAC,CAAC,CAAC;IAEJ,sBAAsB;IACtB,cAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC;QACzC,OAAO,EAAE,WAAW;KACrB,CAAC,CAAC,CAAC;IAEJ,iBAAiB;IACjB,cAAI,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;IAEhC,2BAA2B;IAC3B,IAAA,kCAAsB,EAAC,GAAG,CAAC,CAAC;IAE5B,mCAAmC;IACnC,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IAC1D,WAAW,CAAC,aAAa,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;IAC5D,WAAW,CAAC,YAAY,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IAE1D,yBAAyB;IACzB,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC;QAC9B,KAAK,EAAE,IAAI,IAAI,EAAE;QACjB,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI;KACnB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAA,mBAAS,EAAC,GAAG,EAAE;IACb,cAAI,CAAC,aAAa,EAAE,CAAC;IACrB,cAAI,CAAC,aAAa,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,IAAA,kBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;IAE5C,IAAA,kBAAQ,EAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,IAAA,YAAE,EAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC;YAC7B,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,IAAA,YAAE,EAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;YACnF,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC;YAC/B,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAClF,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,2CAA2C,CAAC;iBAChD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;YAC3F,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC;YAC/B,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAClF,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;YACvF,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC;YAC/B,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAClF,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,6CAA6C,CAAC;iBAClD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,IAAA,YAAE,EAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YACpF,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC;YAC/B,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAClF,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,0EAA0E,EAAE,KAAK,IAAI,EAAE;YACxF,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC;YAC/B,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YAClF,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,8CAA8C,CAAC;iBACnD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,IAAA,YAAE,EAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;YACnF,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,wCAAwC;YAC1E,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,2CAA2C,CAAC;iBAChD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;YAC3F,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,wCAAwC;YAC1E,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;YACtF,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,wCAAwC;YAC1E,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,2CAA2C,CAAC;iBAChD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,IAAA,YAAE,EAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YACpF,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,0BAA0B;YAC5D,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC5F,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,0BAA0B;YAC5D,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,6CAA6C,CAAC;iBAClD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;YACvF,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,0BAA0B;YAC5D,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,IAAA,YAAE,EAAC,sFAAsF,EAAE,KAAK,IAAI,EAAE;YACpG,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,wCAAwC;YACxE,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,2CAA2C,CAAC;iBAChD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,wCAAwC;YACxE,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,wCAAwC;YACxE,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,2CAA2C,CAAC;iBAChD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,kCAAkC,EAAE,GAAG,EAAE;QAChD,IAAA,YAAE,EAAC,wFAAwF,EAAE,KAAK,IAAI,EAAE;YACtG,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,0BAA0B;YAC1D,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;YACnF,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,0BAA0B;YAC1D,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,6CAA6C,CAAC;iBAClD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YAChF,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,0BAA0B;YAC1D,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;YAElF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,4CAA4C,CAAC;iBACjD,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAA,YAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC;YAC7B,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACvD,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAEpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,sCAAsC,CAAC;iBAC3C,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,YAAE,EAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,2CAA2C,CAAC;iBAChD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH;;;;;;;;;;;;;;;GAeG","names":[],"sources":["/home/runner/workspace/tests/integration/document-file-access.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport session from 'express-session';\nimport { registerDocumentRoutes } from '../../server/api/documents';\n\n/**\n * Document File Access Control Integration Tests\n * \n * Tests the actual /api/documents/:id/file endpoint to verify:\n * - Manager and resident should have access to building files they are assigned to\n * - Tenant should have access to building files they are assigned to and marked for tenant\n * - Manager has access to all residences files in their organization  \n * - Resident has access to residence files of residences they are assigned to\n * - Tenant has access to residence files of residences they are assigned to and marked for tenant\n */\n\n// Mock data for testing\nconst mockOrganizations = [\n  { id: 'org-1', name: 'Test Organization', type: 'condominium' },\n  { id: 'org-2', name: 'Other Organization', type: 'condominium' }\n];\n\nconst mockBuildings = [\n  { id: 'building-1', name: 'Building A', organizationId: 'org-1', address: '123 Main St' },\n  { id: 'building-2', name: 'Building B', organizationId: 'org-1', address: '456 Oak Ave' },\n  { id: 'building-3', name: 'Building C', organizationId: 'org-2', address: '789 Pine St' },\n];\n\nconst mockResidences = [\n  { id: 'residence-1', unitNumber: '101', buildingId: 'building-1' },\n  { id: 'residence-2', unitNumber: '102', buildingId: 'building-1' },\n  { id: 'residence-3', unitNumber: '201', buildingId: 'building-2' },\n  { id: 'residence-4', unitNumber: '301', buildingId: 'building-3' },\n];\n\nconst mockUsers = {\n  admin: { id: 'admin-1', email: 'admin@test.com', role: 'admin' },\n  manager: { id: 'manager-1', email: 'manager@test.com', role: 'manager' },\n  resident1: { id: 'resident-1', email: 'resident1@test.com', role: 'resident' },\n  resident2: { id: 'resident-2', email: 'resident2@test.com', role: 'resident' },\n  tenant1: { id: 'tenant-1', email: 'tenant1@test.com', role: 'tenant' },\n  tenant2: { id: 'tenant-2', email: 'tenant2@test.com', role: 'tenant' },\n};\n\nconst mockDocuments = [\n  // Building documents\n  {\n    id: 'doc-building-1-public',\n    name: 'Building 1 Public Rules',\n    buildingId: 'building-1',\n    residenceId: null,\n    isVisibleToTenants: true,\n    documentType: 'bylaw',\n    filePath: 'buildings/building-1/rules.pdf',\n    uploadedById: 'manager-1'\n  },\n  {\n    id: 'doc-building-1-private',\n    name: 'Building 1 Manager Only',\n    buildingId: 'building-1',\n    residenceId: null,\n    isVisibleToTenants: false,\n    documentType: 'financial',\n    filePath: 'buildings/building-1/budget.pdf',\n    uploadedById: 'manager-1'\n  },\n  {\n    id: 'doc-building-2-public',\n    name: 'Building 2 Public Info',\n    buildingId: 'building-2',\n    residenceId: null,\n    isVisibleToTenants: true,\n    documentType: 'maintenance',\n    filePath: 'buildings/building-2/maintenance.pdf',\n    uploadedById: 'manager-1'\n  },\n  {\n    id: 'doc-building-3-external',\n    name: 'External Building Doc',\n    buildingId: 'building-3',\n    residenceId: null,\n    isVisibleToTenants: true,\n    documentType: 'bylaw',\n    filePath: 'buildings/building-3/external.pdf',\n    uploadedById: 'admin-1'\n  },\n  \n  // Residence documents\n  {\n    id: 'doc-residence-1-public',\n    name: 'Residence 1 Public Doc',\n    buildingId: null,\n    residenceId: 'residence-1',\n    isVisibleToTenants: true,\n    documentType: 'lease',\n    filePath: 'residences/residence-1/lease.pdf',\n    uploadedById: 'resident-1'\n  },\n  {\n    id: 'doc-residence-1-private',\n    name: 'Residence 1 Private Doc',\n    buildingId: null,\n    residenceId: 'residence-1',\n    isVisibleToTenants: false,\n    documentType: 'legal',\n    filePath: 'residences/residence-1/private.pdf',\n    uploadedById: 'resident-1'\n  },\n  {\n    id: 'doc-residence-3-public',\n    name: 'Residence 3 Public Doc',\n    buildingId: null,\n    residenceId: 'residence-3',\n    isVisibleToTenants: true,\n    documentType: 'maintenance',\n    filePath: 'residences/residence-3/maintenance.pdf',\n    uploadedById: 'resident-2'\n  },\n  {\n    id: 'doc-residence-4-external',\n    name: 'External Residence Doc',\n    buildingId: null,\n    residenceId: 'residence-4',\n    isVisibleToTenants: true,\n    documentType: 'lease',\n    filePath: 'residences/residence-4/lease.pdf',\n    uploadedById: 'tenant-2'\n  }\n];\n\nconst mockUserOrganizations = [\n  { userId: 'manager-1', organizationId: 'org-1' },\n];\n\nconst mockUserResidences = [\n  { userId: 'resident-1', residenceId: 'residence-1' },\n  { userId: 'resident-2', residenceId: 'residence-3' },\n  { userId: 'tenant-1', residenceId: 'residence-1' },\n  { userId: 'tenant-2', residenceId: 'residence-4' },\n];\n\n// Mock storage implementation\nconst mockStorage = {\n  getUserOrganizations: jest.fn(),\n  getUserResidences: jest.fn(),\n  getBuildings: jest.fn(),\n  getResidences: jest.fn(),\n  getDocuments: jest.fn(),\n};\n\n// Mock fs module for file existence checks\nconst mockFs = {\n  existsSync: jest.fn(),\n  statSync: jest.fn(),\n};\n\n// Setup Express app for testing\nlet app: express.Application;\n\nbeforeEach(() => {\n  jest.clearAllMocks();\n  \n  // Create Express app\n  app = express();\n  app.use(express.json());\n  \n  // Setup session middleware (simplified for testing)\n  app.use(session({\n    secret: 'test-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { secure: false }\n  }));\n  \n  // Mock authentication middleware\n  const mockAuth = (req: any, res: any, next: any) => {\n    if (req.user) {\n      next();\n    } else {\n      res.status(401).json({ message: 'Unauthorized' });\n    }\n  };\n  \n  // Replace requireAuth with mock\n  jest.doMock('../../server/auth', () => ({\n    requireAuth: mockAuth\n  }));\n  \n  // Mock storage module\n  jest.doMock('../../server/storage', () => ({\n    storage: mockStorage\n  }));\n  \n  // Mock fs module\n  jest.doMock('fs', () => mockFs);\n  \n  // Register document routes\n  registerDocumentRoutes(app);\n  \n  // Setup default mock return values\n  mockStorage.getBuildings.mockResolvedValue(mockBuildings);\n  mockStorage.getResidences.mockResolvedValue(mockResidences);\n  mockStorage.getDocuments.mockResolvedValue(mockDocuments);\n  \n  // Setup mock file system\n  mockFs.existsSync.mockReturnValue(true);\n  mockFs.statSync.mockReturnValue({\n    mtime: new Date(),\n    isFile: () => true\n  });\n});\n\nafterEach(() => {\n  jest.resetAllMocks();\n  jest.clearAllMocks();\n});\n\ndescribe('Document File Access Control', () => {\n  \n  describe('Admin Access', () => {\n    it('should allow admin to access any document file', async () => {\n      const user = mockUsers.admin;\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-1-private/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n  });\n  \n  describe('Manager Access to Building Files', () => {\n    it('should allow manager to access building files in their organization', async () => {\n      const user = mockUsers.manager;\n      mockStorage.getUserOrganizations.mockResolvedValue([{ organizationId: 'org-1' }]);\n      mockStorage.getUserResidences.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-1-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should allow manager to access private building files in their organization', async () => {\n      const user = mockUsers.manager;\n      mockStorage.getUserOrganizations.mockResolvedValue([{ organizationId: 'org-1' }]);\n      mockStorage.getUserResidences.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-1-private/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should deny manager access to building files outside their organization', async () => {\n      const user = mockUsers.manager;\n      mockStorage.getUserOrganizations.mockResolvedValue([{ organizationId: 'org-1' }]);\n      mockStorage.getUserResidences.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-3-external/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n  });\n  \n  describe('Manager Access to Residence Files', () => {\n    it('should allow manager to access residence files in their organization', async () => {\n      const user = mockUsers.manager;\n      mockStorage.getUserOrganizations.mockResolvedValue([{ organizationId: 'org-1' }]);\n      mockStorage.getUserResidences.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-1-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should deny manager access to residence files outside their organization', async () => {\n      const user = mockUsers.manager;\n      mockStorage.getUserOrganizations.mockResolvedValue([{ organizationId: 'org-1' }]);\n      mockStorage.getUserResidences.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-4-external/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n  });\n  \n  describe('Resident Access to Building Files', () => {\n    it('should allow resident to access building files they are assigned to', async () => {\n      const user = mockUsers.resident1; // assigned to residence-1 in building-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-1-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should allow resident to access private building files they are assigned to', async () => {\n      const user = mockUsers.resident1; // assigned to residence-1 in building-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-1-private/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should deny resident access to building files they are not assigned to', async () => {\n      const user = mockUsers.resident1; // assigned to residence-1 in building-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-2-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n  });\n  \n  describe('Resident Access to Residence Files', () => {\n    it('should allow resident to access residence files they are assigned to', async () => {\n      const user = mockUsers.resident1; // assigned to residence-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-1-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should allow resident to access private residence files they are assigned to', async () => {\n      const user = mockUsers.resident1; // assigned to residence-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-1-private/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should deny resident access to residence files they are not assigned to', async () => {\n      const user = mockUsers.resident1; // assigned to residence-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-3-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n  });\n  \n  describe('Tenant Access to Building Files', () => {\n    it('should allow tenant to access building files marked for tenants in assigned building', async () => {\n      const user = mockUsers.tenant1; // assigned to residence-1 in building-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-1-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should deny tenant access to building files not marked for tenants', async () => {\n      const user = mockUsers.tenant1; // assigned to residence-1 in building-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-1-private/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n    \n    it('should deny tenant access to building files in other buildings', async () => {\n      const user = mockUsers.tenant1; // assigned to residence-1 in building-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-building-2-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n  });\n  \n  describe('Tenant Access to Residence Files', () => {\n    it('should allow tenant to access residence files marked for tenants in assigned residence', async () => {\n      const user = mockUsers.tenant1; // assigned to residence-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-1-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n    });\n    \n    it('should deny tenant access to residence files not marked for tenants', async () => {\n      const user = mockUsers.tenant1; // assigned to residence-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-1-private/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n    \n    it('should deny tenant access to residence files in other residences', async () => {\n      const user = mockUsers.tenant1; // assigned to residence-1\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([{ residenceId: 'residence-1' }]);\n      \n      const response = await request(app)\n        .get('/api/documents/doc-residence-3-public/file')\n        .set('user', JSON.stringify(user))\n        .expect(403);\n        \n      expect(response.body.message).toBe('Access denied');\n    });\n  });\n  \n  describe('Document Not Found Cases', () => {\n    it('should return 404 for non-existent documents', async () => {\n      const user = mockUsers.admin;\n      mockStorage.getUserOrganizations.mockResolvedValue([]);\n      mockStorage.getUserResidences.mockResolvedValue([]);\n      \n      const response = await request(app)\n        .get('/api/documents/non-existent-doc/file')\n        .set('user', JSON.stringify(user))\n        .expect(404);\n        \n      expect(response.body.message).toBe('Document not found');\n    });\n  });\n  \n  describe('Authentication Required', () => {\n    it('should require authentication for file access', async () => {\n      const response = await request(app)\n        .get('/api/documents/doc-building-1-public/file')\n        .expect(401);\n        \n      expect(response.body.message).toBe('Unauthorized');\n    });\n  });\n});\n\n/**\n * Test Summary:\n * \n * These tests validate the actual API endpoint /api/documents/:id/file to ensure:\n * ✅ Admin: Global access to all documents\n * ✅ Manager: Access to building files in their organization\n * ✅ Manager: Access to residence files in their organization  \n * ✅ Resident: Access to building files they are assigned to\n * ✅ Resident: Access to residence files they are assigned to\n * ✅ Tenant: Access to building files marked for tenants in assigned building\n * ✅ Tenant: Access to residence files marked for tenants in assigned residence\n * ✅ Tenant: Denied access to private documents\n * ✅ Cross-user isolation: Users cannot access files from other assignments\n * ✅ Authentication: Endpoints require valid authentication\n * ✅ Error handling: Proper 404/403/401 responses\n */"],"version":3}