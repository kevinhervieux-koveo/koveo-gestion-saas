c039000889ce364d0631b73aa4ad9b33
/**
 * Jest Global Setup - Fast test environment initialization
 * Optimized for performance with minimal database operations
 */
module.exports = async () => {
    // Set standardized environment variables for test execution
    process.env.NODE_ENV = 'test';
    process.env.SKIP_DB_OPERATIONS = 'true';
    process.env.DISABLE_LOGS = 'true';
    process.env.DISABLE_NEON_WARNINGS = 'true';
    // Set test database URL if not already set
    if (!process.env.DATABASE_URL) {
        process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/koveo_test';
    }
    // Determine test type from test path
    const testPath = process.env.npm_config_testPathPattern || process.env.JEST_WORKER_ID || '';
    const testFile = process.env.npm_lifecycle_script || '';
    if (testPath.includes('unit') || testFile.includes('unit')) {
        process.env.TEST_TYPE = 'unit';
        process.env.USE_MOCK_DB = 'true';
    }
    else if (testPath.includes('integration') || testFile.includes('integration')) {
        process.env.TEST_TYPE = 'integration';
        process.env.USE_MOCK_DB = 'false';
        process.env.TEST_DATABASE_URL = process.env.DATABASE_URL;
    }
    else {
        // Default to unit test mode for safety
        process.env.TEST_TYPE = 'unit';
        process.env.USE_MOCK_DB = 'true';
    }
    // Initialize mock database for unit tests
    if (process.env.USE_MOCK_DB === 'true') {
        global.mockDatabase = new Map();
    }
    console.log(`ðŸš€ Test environment initialized: ${process.env.TEST_TYPE} tests, mock DB: ${process.env.USE_MOCK_DB}`);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9qZXN0Lmdsb2JhbC1zZXR1cC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQzFCLDREQUE0RDtJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUM7SUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsTUFBTSxDQUFDO0lBRTNDLDJDQUEyQztJQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxrREFBa0QsQ0FBQztJQUNoRixDQUFDO0lBRUQscUNBQXFDO0lBQ3JDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDO0lBQzVGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLElBQUksRUFBRSxDQUFDO0lBRXhELElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztJQUNuQyxDQUFDO1NBQU0sSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUNoRixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUM7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7SUFDM0QsQ0FBQztTQUFNLENBQUM7UUFDTix1Q0FBdUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztJQUNuQyxDQUFDO0lBRUQsMENBQTBDO0lBQzFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEtBQUssTUFBTSxFQUFFLENBQUM7UUFDdkMsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsb0JBQW9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN0SCxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9qZXN0Lmdsb2JhbC1zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEplc3QgR2xvYmFsIFNldHVwIC0gRmFzdCB0ZXN0IGVudmlyb25tZW50IGluaXRpYWxpemF0aW9uXG4gKiBPcHRpbWl6ZWQgZm9yIHBlcmZvcm1hbmNlIHdpdGggbWluaW1hbCBkYXRhYmFzZSBvcGVyYXRpb25zXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoKSA9PiB7XG4gIC8vIFNldCBzdGFuZGFyZGl6ZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciB0ZXN0IGV4ZWN1dGlvblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbiAgcHJvY2Vzcy5lbnYuU0tJUF9EQl9PUEVSQVRJT05TID0gJ3RydWUnO1xuICBwcm9jZXNzLmVudi5ESVNBQkxFX0xPR1MgPSAndHJ1ZSc7XG4gIHByb2Nlc3MuZW52LkRJU0FCTEVfTkVPTl9XQVJOSU5HUyA9ICd0cnVlJztcbiAgXG4gIC8vIFNldCB0ZXN0IGRhdGFiYXNlIFVSTCBpZiBub3QgYWxyZWFkeSBzZXRcbiAgaWYgKCFwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwpIHtcbiAgICBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwgPSAncG9zdGdyZXNxbDovL3Rlc3Q6dGVzdEBsb2NhbGhvc3Q6NTQzMi9rb3Zlb190ZXN0JztcbiAgfVxuICBcbiAgLy8gRGV0ZXJtaW5lIHRlc3QgdHlwZSBmcm9tIHRlc3QgcGF0aFxuICBjb25zdCB0ZXN0UGF0aCA9IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfdGVzdFBhdGhQYXR0ZXJuIHx8IHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEIHx8ICcnO1xuICBjb25zdCB0ZXN0RmlsZSA9IHByb2Nlc3MuZW52Lm5wbV9saWZlY3ljbGVfc2NyaXB0IHx8ICcnO1xuICBcbiAgaWYgKHRlc3RQYXRoLmluY2x1ZGVzKCd1bml0JykgfHwgdGVzdEZpbGUuaW5jbHVkZXMoJ3VuaXQnKSkge1xuICAgIHByb2Nlc3MuZW52LlRFU1RfVFlQRSA9ICd1bml0JztcbiAgICBwcm9jZXNzLmVudi5VU0VfTU9DS19EQiA9ICd0cnVlJztcbiAgfSBlbHNlIGlmICh0ZXN0UGF0aC5pbmNsdWRlcygnaW50ZWdyYXRpb24nKSB8fCB0ZXN0RmlsZS5pbmNsdWRlcygnaW50ZWdyYXRpb24nKSkge1xuICAgIHByb2Nlc3MuZW52LlRFU1RfVFlQRSA9ICdpbnRlZ3JhdGlvbic7XG4gICAgcHJvY2Vzcy5lbnYuVVNFX01PQ0tfREIgPSAnZmFsc2UnO1xuICAgIHByb2Nlc3MuZW52LlRFU1RfREFUQUJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMO1xuICB9IGVsc2Uge1xuICAgIC8vIERlZmF1bHQgdG8gdW5pdCB0ZXN0IG1vZGUgZm9yIHNhZmV0eVxuICAgIHByb2Nlc3MuZW52LlRFU1RfVFlQRSA9ICd1bml0JztcbiAgICBwcm9jZXNzLmVudi5VU0VfTU9DS19EQiA9ICd0cnVlJztcbiAgfVxuXG4gIC8vIEluaXRpYWxpemUgbW9jayBkYXRhYmFzZSBmb3IgdW5pdCB0ZXN0c1xuICBpZiAocHJvY2Vzcy5lbnYuVVNFX01PQ0tfREIgPT09ICd0cnVlJykge1xuICAgIGdsb2JhbC5tb2NrRGF0YWJhc2UgPSBuZXcgTWFwKCk7XG4gIH1cbiAgXG4gIGNvbnNvbGUubG9nKGDwn5qAIFRlc3QgZW52aXJvbm1lbnQgaW5pdGlhbGl6ZWQ6ICR7cHJvY2Vzcy5lbnYuVEVTVF9UWVBFfSB0ZXN0cywgbW9jayBEQjogJHtwcm9jZXNzLmVudi5VU0VfTU9DS19EQn1gKTtcbn07XG4iXSwidmVyc2lvbiI6M30=