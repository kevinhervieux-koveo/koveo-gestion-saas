512814c56281f82adf40fb2c8ed8bbbb
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.STATUS_OPTIONS = exports.SCHEDULE_OPTIONS = exports.PAYMENT_TYPES = exports.BILL_CATEGORIES = void 0;
exports.BillForm = BillForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const badge_1 = require("@/components/ui/badge");
const tabs_1 = require("@/components/ui/tabs");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const file_upload_1 = require("@/components/ui/file-upload");
// Unified form schema
const billFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Bill title is required (example: Monthly Electricity Bill)').max(200, 'Title must be less than 200 characters'),
    description: zod_2.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_2.z.enum([
        'insurance',
        'maintenance',
        'salary',
        'utilities',
        'cleaning',
        'security',
        'landscaping',
        'professional_services',
        'administration',
        'repairs',
        'supplies',
        'taxes',
        'technology',
        'reserves',
        'other',
    ]),
    vendor: zod_2.z.string().max(150, 'Vendor name must be less than 150 characters').optional(),
    paymentType: zod_2.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_2.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    totalAmount: zod_2.z.string().min(1, 'Amount is required and must be a valid number (example: 1250.50)').refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num > 0 && num <= 999999.99;
    }, 'Amount must be between $0.01 and $999,999.99 (example: 1250.50)'),
    startDate: zod_2.z.string().min(1, 'Start date is required (example: 2025-01-15)').refine((val) => {
        return !isNaN(Date.parse(val));
    }, 'Start date must be a valid date (example: 2025-01-15)'),
    endDate: zod_2.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return !isNaN(Date.parse(val));
    }, 'End date must be a valid date (example: 2025-12-31)'),
    status: zod_2.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),
    notes: zod_2.z.string().max(2000, 'Notes must be less than 2000 characters').optional(),
});
// Bill category options - centralized list
exports.BILL_CATEGORIES = [
    { value: 'insurance', label: 'Insurance' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'salary', label: 'Salary' },
    { value: 'utilities', label: 'Utilities' },
    { value: 'cleaning', label: 'Cleaning' },
    { value: 'security', label: 'Security' },
    { value: 'landscaping', label: 'Landscaping' },
    { value: 'professional_services', label: 'Professional Services' },
    { value: 'administration', label: 'Administration' },
    { value: 'repairs', label: 'Repairs' },
    { value: 'supplies', label: 'Supplies' },
    { value: 'taxes', label: 'Taxes' },
    { value: 'technology', label: 'Technology' },
    { value: 'reserves', label: 'Reserves' },
    { value: 'other', label: 'Other' },
];
// Payment type options
exports.PAYMENT_TYPES = [
    { value: 'unique', label: 'One-time Payment' },
    { value: 'recurrent', label: 'Recurring Payment' },
];
// Schedule options
exports.SCHEDULE_OPTIONS = [
    { value: 'weekly', label: 'Weekly' },
    { value: 'monthly', label: 'Monthly' },
    { value: 'quarterly', label: 'Quarterly' },
    { value: 'yearly', label: 'Yearly' },
];
// Status options
exports.STATUS_OPTIONS = [
    { value: 'draft', label: 'Draft' },
    { value: 'sent', label: 'Sent' },
    { value: 'overdue', label: 'Overdue' },
    { value: 'paid', label: 'Paid' },
    { value: 'cancelled', label: 'Cancelled' },
];
/**
 * Unified bill form component for creating and editing bills.
 * Supports both manual entry and AI document analysis for creation.
 * @param root0
 * @param root0.mode
 * @param root0.buildingId
 * @param root0.bill
 * @param root0.onSuccess
 * @param root0.onCancel
 */
function BillForm({ mode, buildingId, bill, onSuccess, onCancel }) {
    const { t } = (0, use_language_1.useLanguage)();
    const [activeTab, setActiveTab] = (0, react_1.useState)('manual');
    const [uploadedFile, setUploadedFile] = (0, react_1.useState)(null);
    const [aiAnalysisData, setAiAnalysisData] = (0, react_1.useState)(null);
    const [isAnalyzing, setIsAnalyzing] = (0, react_1.useState)(false);
    const [attachedFiles, setAttachedFiles] = (0, react_1.useState)([]);
    const queryClient = (0, react_query_1.useQueryClient)();
    // Form setup with default values based on mode
    const getDefaultValues = () => {
        if (mode === 'edit' && bill) {
            return {
                title: bill.title,
                description: bill.description || '',
                category: bill.category,
                vendor: bill.vendor || '',
                paymentType: bill.paymentType,
                schedulePayment: bill.schedulePayment || 'monthly',
                totalAmount: bill.totalAmount.toString(),
                startDate: bill.startDate,
                endDate: bill.endDate || '',
                status: bill.status,
                notes: bill.notes || '',
            };
        }
        // Default values for create mode
        return {
            title: '',
            description: '',
            category: 'other',
            vendor: '',
            paymentType: 'unique',
            schedulePayment: 'monthly',
            totalAmount: '',
            startDate: new Date().toISOString().split('T')[0],
            endDate: '',
            status: 'draft',
            notes: '',
        };
    };
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(billFormSchema),
        defaultValues: getDefaultValues(),
    });
    // Update form when bill changes (for edit mode)
    (0, react_1.useEffect)(() => {
        if (mode === 'edit' && bill) {
            form.reset(getDefaultValues());
        }
    }, [mode, bill]);
    // Main mutation for create/update
    const submitMutation = (0, react_query_1.useMutation)({
        mutationFn: async (billData) => {
            const url = mode === 'create' ? '/api/bills' : `/api/bills/${bill?.id}`;
            const method = mode === 'create' ? 'POST' : 'PATCH';
            const payload = {
                ...billData,
                costs: [parseFloat(billData.totalAmount)],
                ...(mode === 'create' && { buildingId }),
            };
            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(payload),
            });
            if (!response.ok) {
                throw new Error(`Failed to ${mode} bill`);
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            onSuccess();
        },
    });
    // AI analysis mutation (only for create mode)
    const uploadAndAnalyzeMutation = (0, react_query_1.useMutation)({
        mutationFn: async (file) => {
            setIsAnalyzing(true);
            // First create a draft bill
            const createResponse = await fetch('/api/bills', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify({
                    buildingId,
                    title: 'AI Analysis Draft',
                    category: 'other',
                    paymentType: 'unique',
                    totalAmount: 0,
                    costs: [0],
                    startDate: new Date().toISOString().split('T')[0],
                    status: 'draft',
                    notes: 'Draft bill created for AI analysis',
                }),
            });
            if (!createResponse.ok) {
                throw new Error('Failed to create draft bill');
            }
            const draftBill = await createResponse.json();
            // Upload and analyze the document
            const formData = new FormData();
            formData.append('document', file);
            const uploadResponse = await fetch(`/api/bills/${draftBill.bill.id}/upload-document`, {
                method: 'POST',
                credentials: 'include',
                body: formData,
            });
            if (!uploadResponse.ok) {
                throw new Error('Failed to upload and analyze document');
            }
            const result = await uploadResponse.json();
            return { ...result, billId: draftBill.bill.id };
        },
        onSuccess: (data) => {
            setIsAnalyzing(false);
            setAiAnalysisData(data.analysisResult);
            setActiveTab('manual'); // Switch to manual tab to show populated form
        },
        onError: () => {
            setIsAnalyzing(false);
        },
    });
    // Event handlers
    const handleFileUpload = (event) => {
        const file = event.target.files?.[0];
        if (file && mode === 'create') {
            setUploadedFile(file);
            uploadAndAnalyzeMutation.mutate(file);
        }
    };
    const applyAiAnalysis = () => {
        if (aiAnalysisData) {
            form.setValue('title', aiAnalysisData.title);
            form.setValue('vendor', aiAnalysisData.vendor || '');
            form.setValue('category', aiAnalysisData.category);
            form.setValue('totalAmount', aiAnalysisData.totalAmount);
            form.setValue('description', aiAnalysisData.description || '');
            if (aiAnalysisData.issueDate) {
                form.setValue('startDate', aiAnalysisData.issueDate);
            }
            const notes = `AI-analyzed document. Original bill number: ${aiAnalysisData.billNumber || 'N/A'}. Confidence: ${(aiAnalysisData.confidence * 100).toFixed(1)}%.`;
            form.setValue('notes', notes);
        }
    };
    const onSubmit = (values) => {
        submitMutation.mutate(values);
        // TODO: Handle attached files upload after bill creation
    };
    // Handle file attachments
    const handleFilesSelect = (0, react_1.useCallback)((files) => {
        setAttachedFiles(prev => [...prev, ...files]);
    }, []);
    const handleFileRemove = (0, react_1.useCallback)((fileIndex) => {
        setAttachedFiles(prev => prev.filter((_, index) => index !== fileIndex));
    }, []);
    const renderFormFields = () => ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'title', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('title'), " *"] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: t('billTitle'), "data-testid": 'input-title' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'vendor', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('vendor') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: t('companyOrServiceProvider'), "data-testid": 'input-vendor' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'category', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('category'), " *"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-category', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectCategory') }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.BILL_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'totalAmount', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Total Amount *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'number', step: '0.01', placeholder: '0.00', "data-testid": 'input-amount' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'paymentType', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Type *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-payment-type', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select payment type' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.PAYMENT_TYPES.map((type) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: type.value, children: type.label }, type.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), form.watch('paymentType') === 'recurrent' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'schedulePayment', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Schedule *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-schedule', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select schedule' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.SCHEDULE_OPTIONS.map((option) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: option.value, children: option.label }, option.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'startDate', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Start Date *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'date', "data-testid": 'input-start-date' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), form.watch('paymentType') === 'recurrent' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'endDate', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "End Date (Optional)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'date', "data-testid": 'input-end-date' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'status', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Status *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-status', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select status' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.STATUS_OPTIONS.map((status) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: status.value, children: status.label }, status.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { ...field, placeholder: 'Bill description...', rows: 3, "data-testid": 'textarea-description' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'notes', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Notes" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { ...field, placeholder: 'Additional notes...', rows: 3, "data-testid": 'textarea-notes' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: "w-4 h-4 text-gray-500" }), (0, jsx_runtime_1.jsx)("label", { className: "text-sm font-medium text-gray-700", children: "Attachments" }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500", children: "(Optional - Screenshots, receipts, supporting documents)" })] }), (0, jsx_runtime_1.jsx)(file_upload_1.FileUpload, { onFilesSelect: handleFilesSelect, onFilesRemove: handleFileRemove, maxFiles: 5, maxSize: 10, acceptedTypes: ['image/*', '.pdf', '.doc', '.docx', '.txt'], allowPaste: true, className: "border border-gray-200 rounded-lg p-4", "data-testid": "bill-file-upload", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center py-6", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "mx-auto h-8 w-8 text-gray-400 mb-2" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600", children: "Drop files here, click to browse, or paste screenshots" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "Attach receipts, screenshots, or supporting documents" })] }) })] })] }));
    // For edit mode, render simple form
    if (mode === 'edit') {
        return ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6 pt-4 border-t', children: [renderFormFields(), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-2 pt-4 border-t', children: [onCancel && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: onCancel, "data-testid": 'button-cancel', children: "Cancel" })), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: submitMutation.isPending, "data-testid": 'button-update', children: submitMutation.isPending ? 'Updating...' : 'Update Bill' })] })] }) }));
    }
    // For create mode, render with tabs (manual + AI upload)
    return ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { value: activeTab, onValueChange: setActiveTab, className: 'w-full', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: 'grid w-full grid-cols-2', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'manual', className: 'flex items-center gap-2', "data-testid": 'tab-manual', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4' }), "Create Manually"] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'upload', className: 'flex items-center gap-2', "data-testid": 'tab-upload', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: 'w-4 h-4' }), "Upload & Analyze"] })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'upload', className: 'space-y-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'p-6 text-center border-2 border-dashed border-gray-200 rounded-lg', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: 'w-12 h-12 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold mb-2', children: "Upload Bill Document" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mb-4', children: "Upload an image or PDF of your bill for AI analysis" }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'file', accept: 'image/*,.pdf', onChange: handleFileUpload, disabled: isAnalyzing, className: 'max-w-sm mx-auto', "data-testid": 'input-file-upload' }), isAnalyzing && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 flex items-center justify-center gap-2', "data-testid": 'loading-analysis', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-600', children: "Analyzing document with AI..." })] })), aiAnalysisData && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 p-4 bg-blue-50 rounded-lg', "data-testid": 'ai-analysis-result', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: 'w-5 h-5 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'font-medium text-blue-800', children: "AI Analysis Complete" }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.confidence * 100).toFixed(1), "% confidence"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-blue-700 space-y-1', children: [(0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Title:" }), " ", aiAnalysisData.title] }), (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Vendor:" }), " ", aiAnalysisData.vendor] }), (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Amount:" }), " $", aiAnalysisData.totalAmount] }), (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Category:" }), " ", aiAnalysisData.category] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: applyAiAnalysis, className: 'mt-3 w-full', size: 'sm', "data-testid": 'button-apply-ai', children: "Apply to Form" })] }))] }) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'manual', className: 'space-y-4', children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6', children: [renderFormFields(), aiAnalysisData && ((0, jsx_runtime_1.jsxs)("div", { className: 'p-4 bg-blue-50 rounded-lg border border-blue-200', "data-testid": 'ai-info-badge', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: 'w-4 h-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-blue-800', children: "Form populated from AI analysis" }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.confidence * 100).toFixed(1), "% confidence"] })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-blue-600', children: "Review and modify the form as needed before creating the bill." })] })), (0, jsx_runtime_1.jsx)("div", { className: 'flex justify-end gap-2 pt-4 border-t', children: (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: submitMutation.isPending, className: 'min-w-[120px]', "data-testid": 'button-create', children: submitMutation.isPending ? 'Creating...' : 'Create Bill' }) })] }) }) })] }) }));
}
exports.default = BillForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,