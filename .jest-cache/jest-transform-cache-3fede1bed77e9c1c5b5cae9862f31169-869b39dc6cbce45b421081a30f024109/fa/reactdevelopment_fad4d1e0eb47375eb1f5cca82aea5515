b53a9ccb860eae4717c26f9cdd062643
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";
"production" !== process.env.NODE_ENV &&
    (function () {
        function defineDeprecationWarning(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
                get: function () {
                    console.warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                }
            });
        }
        function getIteratorFn(maybeIterable) {
            if (null === maybeIterable || "object" !== typeof maybeIterable)
                return null;
            maybeIterable =
                (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
                    maybeIterable["@@iterator"];
            return "function" === typeof maybeIterable ? maybeIterable : null;
        }
        function warnNoop(publicInstance, callerName) {
            publicInstance =
                ((publicInstance = publicInstance.constructor) &&
                    (publicInstance.displayName || publicInstance.name)) ||
                    "ReactClass";
            var warningKey = publicInstance + "." + callerName;
            didWarnStateUpdateForUnmountedComponent[warningKey] ||
                (console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, publicInstance),
                    (didWarnStateUpdateForUnmountedComponent[warningKey] = !0));
        }
        function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
        }
        function ComponentDummy() { }
        function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
        }
        function testStringCoercion(value) {
            return "" + value;
        }
        function checkKeyStringCoercion(value) {
            try {
                testStringCoercion(value);
                var JSCompiler_inline_result = !1;
            }
            catch (e) {
                JSCompiler_inline_result = !0;
            }
            if (JSCompiler_inline_result) {
                JSCompiler_inline_result = console;
                var JSCompiler_temp_const = JSCompiler_inline_result.error;
                var JSCompiler_inline_result$jscomp$0 = ("function" === typeof Symbol &&
                    Symbol.toStringTag &&
                    value[Symbol.toStringTag]) ||
                    value.constructor.name ||
                    "Object";
                JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
                return testStringCoercion(value);
            }
        }
        function getComponentNameFromType(type) {
            if (null == type)
                return null;
            if ("function" === typeof type)
                return type.$$typeof === REACT_CLIENT_REFERENCE
                    ? null
                    : type.displayName || type.name || null;
            if ("string" === typeof type)
                return type;
            switch (type) {
                case REACT_FRAGMENT_TYPE:
                    return "Fragment";
                case REACT_PROFILER_TYPE:
                    return "Profiler";
                case REACT_STRICT_MODE_TYPE:
                    return "StrictMode";
                case REACT_SUSPENSE_TYPE:
                    return "Suspense";
                case REACT_SUSPENSE_LIST_TYPE:
                    return "SuspenseList";
                case REACT_ACTIVITY_TYPE:
                    return "Activity";
            }
            if ("object" === typeof type)
                switch (("number" === typeof type.tag &&
                    console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),
                    type.$$typeof)) {
                    case REACT_PORTAL_TYPE:
                        return "Portal";
                    case REACT_CONTEXT_TYPE:
                        return (type.displayName || "Context") + ".Provider";
                    case REACT_CONSUMER_TYPE:
                        return (type._context.displayName || "Context") + ".Consumer";
                    case REACT_FORWARD_REF_TYPE:
                        var innerType = type.render;
                        type = type.displayName;
                        type ||
                            ((type = innerType.displayName || innerType.name || ""),
                                (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
                        return type;
                    case REACT_MEMO_TYPE:
                        return ((innerType = type.displayName || null),
                            null !== innerType
                                ? innerType
                                : getComponentNameFromType(type.type) || "Memo");
                    case REACT_LAZY_TYPE:
                        innerType = type._payload;
                        type = type._init;
                        try {
                            return getComponentNameFromType(type(innerType));
                        }
                        catch (x) { }
                }
            return null;
        }
        function getTaskName(type) {
            if (type === REACT_FRAGMENT_TYPE)
                return "<>";
            if ("object" === typeof type &&
                null !== type &&
                type.$$typeof === REACT_LAZY_TYPE)
                return "<...>";
            try {
                var name = getComponentNameFromType(type);
                return name ? "<" + name + ">" : "<...>";
            }
            catch (x) {
                return "<...>";
            }
        }
        function getOwner() {
            var dispatcher = ReactSharedInternals.A;
            return null === dispatcher ? null : dispatcher.getOwner();
        }
        function UnknownOwner() {
            return Error("react-stack-top-frame");
        }
        function hasValidKey(config) {
            if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning)
                    return !1;
            }
            return void 0 !== config.key;
        }
        function defineKeyPropWarningGetter(props, displayName) {
            function warnAboutAccessingKey() {
                specialPropKeyWarningShown ||
                    ((specialPropKeyWarningShown = !0),
                        console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
            }
            warnAboutAccessingKey.isReactWarning = !0;
            Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: !0
            });
        }
        function elementRefGetterWithDeprecationWarning() {
            var componentName = getComponentNameFromType(this.type);
            didWarnAboutElementRef[componentName] ||
                ((didWarnAboutElementRef[componentName] = !0),
                    console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
            componentName = this.props.ref;
            return void 0 !== componentName ? componentName : null;
        }
        function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
            self = props.ref;
            type = {
                $$typeof: REACT_ELEMENT_TYPE,
                type: type,
                key: key,
                props: props,
                _owner: owner
            };
            null !== (void 0 !== self ? self : null)
                ? Object.defineProperty(type, "ref", {
                    enumerable: !1,
                    get: elementRefGetterWithDeprecationWarning
                })
                : Object.defineProperty(type, "ref", { enumerable: !1, value: null });
            type._store = {};
            Object.defineProperty(type._store, "validated", {
                configurable: !1,
                enumerable: !1,
                writable: !0,
                value: 0
            });
            Object.defineProperty(type, "_debugInfo", {
                configurable: !1,
                enumerable: !1,
                writable: !0,
                value: null
            });
            Object.defineProperty(type, "_debugStack", {
                configurable: !1,
                enumerable: !1,
                writable: !0,
                value: debugStack
            });
            Object.defineProperty(type, "_debugTask", {
                configurable: !1,
                enumerable: !1,
                writable: !0,
                value: debugTask
            });
            Object.freeze && (Object.freeze(type.props), Object.freeze(type));
            return type;
        }
        function cloneAndReplaceKey(oldElement, newKey) {
            newKey = ReactElement(oldElement.type, newKey, void 0, void 0, oldElement._owner, oldElement.props, oldElement._debugStack, oldElement._debugTask);
            oldElement._store &&
                (newKey._store.validated = oldElement._store.validated);
            return newKey;
        }
        function isValidElement(object) {
            return ("object" === typeof object &&
                null !== object &&
                object.$$typeof === REACT_ELEMENT_TYPE);
        }
        function escape(key) {
            var escaperLookup = { "=": "=0", ":": "=2" };
            return ("$" +
                key.replace(/[=:]/g, function (match) {
                    return escaperLookup[match];
                }));
        }
        function getElementKey(element, index) {
            return "object" === typeof element &&
                null !== element &&
                null != element.key
                ? (checkKeyStringCoercion(element.key), escape("" + element.key))
                : index.toString(36);
        }
        function noop$1() { }
        function resolveThenable(thenable) {
            switch (thenable.status) {
                case "fulfilled":
                    return thenable.value;
                case "rejected":
                    throw thenable.reason;
                default:
                    switch (("string" === typeof thenable.status
                        ? thenable.then(noop$1, noop$1)
                        : ((thenable.status = "pending"),
                            thenable.then(function (fulfilledValue) {
                                "pending" === thenable.status &&
                                    ((thenable.status = "fulfilled"),
                                        (thenable.value = fulfilledValue));
                            }, function (error) {
                                "pending" === thenable.status &&
                                    ((thenable.status = "rejected"),
                                        (thenable.reason = error));
                            })),
                        thenable.status)) {
                        case "fulfilled":
                            return thenable.value;
                        case "rejected":
                            throw thenable.reason;
                    }
            }
            throw thenable;
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if ("undefined" === type || "boolean" === type)
                children = null;
            var invokeCallback = !1;
            if (null === children)
                invokeCallback = !0;
            else
                switch (type) {
                    case "bigint":
                    case "string":
                    case "number":
                        invokeCallback = !0;
                        break;
                    case "object":
                        switch (children.$$typeof) {
                            case REACT_ELEMENT_TYPE:
                            case REACT_PORTAL_TYPE:
                                invokeCallback = !0;
                                break;
                            case REACT_LAZY_TYPE:
                                return ((invokeCallback = children._init),
                                    mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback));
                        }
                }
            if (invokeCallback) {
                invokeCallback = children;
                callback = callback(invokeCallback);
                var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
                isArrayImpl(callback)
                    ? ((escapedPrefix = ""),
                        null != childKey &&
                            (escapedPrefix =
                                childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"),
                        mapIntoArray(callback, array, escapedPrefix, "", function (c) {
                            return c;
                        }))
                    : null != callback &&
                        (isValidElement(callback) &&
                            (null != callback.key &&
                                ((invokeCallback && invokeCallback.key === callback.key) ||
                                    checkKeyStringCoercion(callback.key)),
                                (escapedPrefix = cloneAndReplaceKey(callback, escapedPrefix +
                                    (null == callback.key ||
                                        (invokeCallback && invokeCallback.key === callback.key)
                                        ? ""
                                        : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") +
                                    childKey)),
                                "" !== nameSoFar &&
                                    null != invokeCallback &&
                                    isValidElement(invokeCallback) &&
                                    null == invokeCallback.key &&
                                    invokeCallback._store &&
                                    !invokeCallback._store.validated &&
                                    (escapedPrefix._store.validated = 2),
                                (callback = escapedPrefix)),
                            array.push(callback));
                return 1;
            }
            invokeCallback = 0;
            childKey = "" === nameSoFar ? "." : nameSoFar + ":";
            if (isArrayImpl(children))
                for (var i = 0; i < children.length; i++)
                    (nameSoFar = children[i]),
                        (type = childKey + getElementKey(nameSoFar, i)),
                        (invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback));
            else if (((i = getIteratorFn(children)), "function" === typeof i))
                for (i === children.entries &&
                    (didWarnAboutMaps ||
                        console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),
                        (didWarnAboutMaps = !0)),
                    children = i.call(children),
                    i = 0; !(nameSoFar = children.next()).done;)
                    (nameSoFar = nameSoFar.value),
                        (type = childKey + getElementKey(nameSoFar, i++)),
                        (invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback));
            else if ("object" === type) {
                if ("function" === typeof children.then)
                    return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
                array = String(children);
                throw Error("Objects are not valid as a React child (found: " +
                    ("[object Object]" === array
                        ? "object with keys {" + Object.keys(children).join(", ") + "}"
                        : array) +
                    "). If you meant to render a collection of children, use an array instead.");
            }
            return invokeCallback;
        }
        function mapChildren(children, func, context) {
            if (null == children)
                return children;
            var result = [], count = 0;
            mapIntoArray(children, result, "", "", function (child) {
                return func.call(context, child, count++);
            });
            return result;
        }
        function lazyInitializer(payload) {
            if (-1 === payload._status) {
                var ctor = payload._result;
                ctor = ctor();
                ctor.then(function (moduleObject) {
                    if (0 === payload._status || -1 === payload._status)
                        (payload._status = 1), (payload._result = moduleObject);
                }, function (error) {
                    if (0 === payload._status || -1 === payload._status)
                        (payload._status = 2), (payload._result = error);
                });
                -1 === payload._status &&
                    ((payload._status = 0), (payload._result = ctor));
            }
            if (1 === payload._status)
                return ((ctor = payload._result),
                    void 0 === ctor &&
                        console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", ctor),
                    "default" in ctor ||
                        console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", ctor),
                    ctor.default);
            throw payload._result;
        }
        function resolveDispatcher() {
            var dispatcher = ReactSharedInternals.H;
            null === dispatcher &&
                console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
            return dispatcher;
        }
        function noop() { }
        function enqueueTask(task) {
            if (null === enqueueTaskImpl)
                try {
                    var requireString = ("require" + Math.random()).slice(0, 7);
                    enqueueTaskImpl = (module && module[requireString]).call(module, "timers").setImmediate;
                }
                catch (_err) {
                    enqueueTaskImpl = function (callback) {
                        !1 === didWarnAboutMessageChannel &&
                            ((didWarnAboutMessageChannel = !0),
                                "undefined" === typeof MessageChannel &&
                                    console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
                        var channel = new MessageChannel();
                        channel.port1.onmessage = callback;
                        channel.port2.postMessage(void 0);
                    };
                }
            return enqueueTaskImpl(task);
        }
        function aggregateErrors(errors) {
            return 1 < errors.length && "function" === typeof AggregateError
                ? new AggregateError(errors)
                : errors[0];
        }
        function popActScope(prevActQueue, prevActScopeDepth) {
            prevActScopeDepth !== actScopeDepth - 1 &&
                console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            actScopeDepth = prevActScopeDepth;
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            var queue = ReactSharedInternals.actQueue;
            if (null !== queue)
                if (0 !== queue.length)
                    try {
                        flushActQueue(queue);
                        enqueueTask(function () {
                            return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        });
                        return;
                    }
                    catch (error) {
                        ReactSharedInternals.thrownErrors.push(error);
                    }
                else
                    ReactSharedInternals.actQueue = null;
            0 < ReactSharedInternals.thrownErrors.length
                ? ((queue = aggregateErrors(ReactSharedInternals.thrownErrors)),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    reject(queue))
                : resolve(returnValue);
        }
        function flushActQueue(queue) {
            if (!isFlushing) {
                isFlushing = !0;
                var i = 0;
                try {
                    for (; i < queue.length; i++) {
                        var callback = queue[i];
                        do {
                            ReactSharedInternals.didUsePromise = !1;
                            var continuation = callback(!1);
                            if (null !== continuation) {
                                if (ReactSharedInternals.didUsePromise) {
                                    queue[i] = callback;
                                    queue.splice(0, i);
                                    return;
                                }
                                callback = continuation;
                            }
                            else
                                break;
                        } while (1);
                    }
                    queue.length = 0;
                }
                catch (error) {
                    queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
                }
                finally {
                    isFlushing = !1;
                }
            }
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
            "function" ===
                typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_ACTIVITY_TYPE = Symbol.for("react.activity"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
            isMounted: function () {
                return !1;
            },
            enqueueForceUpdate: function (publicInstance) {
                warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function (publicInstance) {
                warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function (publicInstance) {
                warnNoop(publicInstance, "setState");
            }
        }, assign = Object.assign, emptyObject = {};
        Object.freeze(emptyObject);
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function (partialState, callback) {
            if ("object" !== typeof partialState &&
                "function" !== typeof partialState &&
                null != partialState)
                throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
            this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function (callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        var deprecatedAPIs = {
            isMounted: [
                "isMounted",
                "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
            ],
            replaceState: [
                "replaceState",
                "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
            ]
        }, fnName;
        for (fnName in deprecatedAPIs)
            deprecatedAPIs.hasOwnProperty(fnName) &&
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        ComponentDummy.prototype = Component.prototype;
        deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
        deprecatedAPIs.constructor = PureComponent;
        assign(deprecatedAPIs, Component.prototype);
        deprecatedAPIs.isPureReactComponent = !0;
        var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = {
            H: null,
            A: null,
            T: null,
            S: null,
            V: null,
            actQueue: null,
            isBatchingLegacy: !1,
            didScheduleLegacyUpdate: !1,
            didUsePromise: !1,
            thrownErrors: [],
            getCurrentStack: null,
            recentlyCreatedOwnerStacks: 0
        }, hasOwnProperty = Object.prototype.hasOwnProperty, createTask = console.createTask
            ? console.createTask
            : function () {
                return null;
            };
        deprecatedAPIs = {
            react_stack_bottom_frame: function (callStackForError) {
                return callStackForError();
            }
        };
        var specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
        var didWarnAboutElementRef = {};
        var unknownOwnerDebugStack = deprecatedAPIs.react_stack_bottom_frame.bind(deprecatedAPIs, UnknownOwner)();
        var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));
        var didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError
            ? reportError
            : function (error) {
                if ("object" === typeof window &&
                    "function" === typeof window.ErrorEvent) {
                    var event = new window.ErrorEvent("error", {
                        bubbles: !0,
                        cancelable: !0,
                        message: "object" === typeof error &&
                            null !== error &&
                            "string" === typeof error.message
                            ? String(error.message)
                            : String(error),
                        error: error
                    });
                    if (!window.dispatchEvent(event))
                        return;
                }
                else if ("object" === typeof process &&
                    "function" === typeof process.emit) {
                    process.emit("uncaughtException", error);
                    return;
                }
                console.error(error);
            }, didWarnAboutMessageChannel = !1, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = !1, isFlushing = !1, queueSeveralMicrotasks = "function" === typeof queueMicrotask
            ? function (callback) {
                queueMicrotask(function () {
                    return queueMicrotask(callback);
                });
            }
            : enqueueTask;
        deprecatedAPIs = Object.freeze({
            __proto__: null,
            c: function (size) {
                return resolveDispatcher().useMemoCache(size);
            }
        });
        exports.Children = {
            map: mapChildren,
            forEach: function (children, forEachFunc, forEachContext) {
                mapChildren(children, function () {
                    forEachFunc.apply(this, arguments);
                }, forEachContext);
            },
            count: function (children) {
                var n = 0;
                mapChildren(children, function () {
                    n++;
                });
                return n;
            },
            toArray: function (children) {
                return (mapChildren(children, function (child) {
                    return child;
                }) || []);
            },
            only: function (children) {
                if (!isValidElement(children))
                    throw Error("React.Children.only expected to receive a single React element child.");
                return children;
            }
        };
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE =
            ReactSharedInternals;
        exports.__COMPILER_RUNTIME = deprecatedAPIs;
        exports.act = function (callback) {
            var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            var queue = (ReactSharedInternals.actQueue =
                null !== prevActQueue ? prevActQueue : []), didAwaitActCall = !1;
            try {
                var result = callback();
            }
            catch (error) {
                ReactSharedInternals.thrownErrors.push(error);
            }
            if (0 < ReactSharedInternals.thrownErrors.length)
                throw ((popActScope(prevActQueue, prevActScopeDepth),
                    (callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    callback));
            if (null !== result &&
                "object" === typeof result &&
                "function" === typeof result.then) {
                var thenable = result;
                queueSeveralMicrotasks(function () {
                    didAwaitActCall ||
                        didWarnNoAwaitAct ||
                        ((didWarnNoAwaitAct = !0),
                            console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
                });
                return {
                    then: function (resolve, reject) {
                        didAwaitActCall = !0;
                        thenable.then(function (returnValue) {
                            popActScope(prevActQueue, prevActScopeDepth);
                            if (0 === prevActScopeDepth) {
                                try {
                                    flushActQueue(queue),
                                        enqueueTask(function () {
                                            return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                                        });
                                }
                                catch (error$0) {
                                    ReactSharedInternals.thrownErrors.push(error$0);
                                }
                                if (0 < ReactSharedInternals.thrownErrors.length) {
                                    var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
                                    ReactSharedInternals.thrownErrors.length = 0;
                                    reject(_thrownError);
                                }
                            }
                            else
                                resolve(returnValue);
                        }, function (error) {
                            popActScope(prevActQueue, prevActScopeDepth);
                            0 < ReactSharedInternals.thrownErrors.length
                                ? ((error = aggregateErrors(ReactSharedInternals.thrownErrors)),
                                    (ReactSharedInternals.thrownErrors.length = 0),
                                    reject(error))
                                : reject(error);
                        });
                    }
                };
            }
            var returnValue$jscomp$0 = result;
            popActScope(prevActQueue, prevActScopeDepth);
            0 === prevActScopeDepth &&
                (flushActQueue(queue),
                    0 !== queue.length &&
                        queueSeveralMicrotasks(function () {
                            didAwaitActCall ||
                                didWarnNoAwaitAct ||
                                ((didWarnNoAwaitAct = !0),
                                    console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"));
                        }),
                    (ReactSharedInternals.actQueue = null));
            if (0 < ReactSharedInternals.thrownErrors.length)
                throw (((callback = aggregateErrors(ReactSharedInternals.thrownErrors)),
                    (ReactSharedInternals.thrownErrors.length = 0),
                    callback));
            return {
                then: function (resolve, reject) {
                    didAwaitActCall = !0;
                    0 === prevActScopeDepth
                        ? ((ReactSharedInternals.actQueue = queue),
                            enqueueTask(function () {
                                return recursivelyFlushAsyncActWork(returnValue$jscomp$0, resolve, reject);
                            }))
                        : resolve(returnValue$jscomp$0);
                }
            };
        };
        exports.cache = function (fn) {
            return function () {
                return fn.apply(null, arguments);
            };
        };
        exports.captureOwnerStack = function () {
            var getCurrentStack = ReactSharedInternals.getCurrentStack;
            return null === getCurrentStack ? null : getCurrentStack();
        };
        exports.cloneElement = function (element, config, children) {
            if (null === element || void 0 === element)
                throw Error("The argument must be a React element, but you passed " +
                    element +
                    ".");
            var props = assign({}, element.props), key = element.key, owner = element._owner;
            if (null != config) {
                var JSCompiler_inline_result;
                a: {
                    if (hasOwnProperty.call(config, "ref") &&
                        (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(config, "ref").get) &&
                        JSCompiler_inline_result.isReactWarning) {
                        JSCompiler_inline_result = !1;
                        break a;
                    }
                    JSCompiler_inline_result = void 0 !== config.ref;
                }
                JSCompiler_inline_result && (owner = getOwner());
                hasValidKey(config) &&
                    (checkKeyStringCoercion(config.key), (key = "" + config.key));
                for (propName in config)
                    !hasOwnProperty.call(config, propName) ||
                        "key" === propName ||
                        "__self" === propName ||
                        "__source" === propName ||
                        ("ref" === propName && void 0 === config.ref) ||
                        (props[propName] = config[propName]);
            }
            var propName = arguments.length - 2;
            if (1 === propName)
                props.children = children;
            else if (1 < propName) {
                JSCompiler_inline_result = Array(propName);
                for (var i = 0; i < propName; i++)
                    JSCompiler_inline_result[i] = arguments[i + 2];
                props.children = JSCompiler_inline_result;
            }
            props = ReactElement(element.type, key, void 0, void 0, owner, props, element._debugStack, element._debugTask);
            for (key = 2; key < arguments.length; key++)
                (owner = arguments[key]),
                    isValidElement(owner) && owner._store && (owner._store.validated = 1);
            return props;
        };
        exports.createContext = function (defaultValue) {
            defaultValue = {
                $$typeof: REACT_CONTEXT_TYPE,
                _currentValue: defaultValue,
                _currentValue2: defaultValue,
                _threadCount: 0,
                Provider: null,
                Consumer: null
            };
            defaultValue.Provider = defaultValue;
            defaultValue.Consumer = {
                $$typeof: REACT_CONSUMER_TYPE,
                _context: defaultValue
            };
            defaultValue._currentRenderer = null;
            defaultValue._currentRenderer2 = null;
            return defaultValue;
        };
        exports.createElement = function (type, config, children) {
            for (var i = 2; i < arguments.length; i++) {
                var node = arguments[i];
                isValidElement(node) && node._store && (node._store.validated = 1);
            }
            i = {};
            node = null;
            if (null != config)
                for (propName in (didWarnAboutOldJSXRuntime ||
                    !("__self" in config) ||
                    "key" in config ||
                    ((didWarnAboutOldJSXRuntime = !0),
                        console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")),
                    hasValidKey(config) &&
                        (checkKeyStringCoercion(config.key), (node = "" + config.key)),
                    config))
                    hasOwnProperty.call(config, propName) &&
                        "key" !== propName &&
                        "__self" !== propName &&
                        "__source" !== propName &&
                        (i[propName] = config[propName]);
            var childrenLength = arguments.length - 2;
            if (1 === childrenLength)
                i.children = children;
            else if (1 < childrenLength) {
                for (var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)
                    childArray[_i] = arguments[_i + 2];
                Object.freeze && Object.freeze(childArray);
                i.children = childArray;
            }
            if (type && type.defaultProps)
                for (propName in ((childrenLength = type.defaultProps), childrenLength))
                    void 0 === i[propName] && (i[propName] = childrenLength[propName]);
            node &&
                defineKeyPropWarningGetter(i, "function" === typeof type
                    ? type.displayName || type.name || "Unknown"
                    : type);
            var propName = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;
            return ReactElement(type, node, void 0, void 0, getOwner(), i, propName ? Error("react-stack-top-frame") : unknownOwnerDebugStack, propName ? createTask(getTaskName(type)) : unknownOwnerDebugTask);
        };
        exports.createRef = function () {
            var refObject = { current: null };
            Object.seal(refObject);
            return refObject;
        };
        exports.forwardRef = function (render) {
            null != render && render.$$typeof === REACT_MEMO_TYPE
                ? console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).")
                : "function" !== typeof render
                    ? console.error("forwardRef requires a render function but was given %s.", null === render ? "null" : typeof render)
                    : 0 !== render.length &&
                        2 !== render.length &&
                        console.error("forwardRef render functions accept exactly two parameters: props and ref. %s", 1 === render.length
                            ? "Did you forget to use the ref parameter?"
                            : "Any additional parameter will be undefined.");
            null != render &&
                null != render.defaultProps &&
                console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");
            var elementType = { $$typeof: REACT_FORWARD_REF_TYPE, render: render }, ownName;
            Object.defineProperty(elementType, "displayName", {
                enumerable: !1,
                configurable: !0,
                get: function () {
                    return ownName;
                },
                set: function (name) {
                    ownName = name;
                    render.name ||
                        render.displayName ||
                        (Object.defineProperty(render, "name", { value: name }),
                            (render.displayName = name));
                }
            });
            return elementType;
        };
        exports.isValidElement = isValidElement;
        exports.lazy = function (ctor) {
            return {
                $$typeof: REACT_LAZY_TYPE,
                _payload: { _status: -1, _result: ctor },
                _init: lazyInitializer
            };
        };
        exports.memo = function (type, compare) {
            null == type &&
                console.error("memo: The first argument must be a component. Instead received: %s", null === type ? "null" : typeof type);
            compare = {
                $$typeof: REACT_MEMO_TYPE,
                type: type,
                compare: void 0 === compare ? null : compare
            };
            var ownName;
            Object.defineProperty(compare, "displayName", {
                enumerable: !1,
                configurable: !0,
                get: function () {
                    return ownName;
                },
                set: function (name) {
                    ownName = name;
                    type.name ||
                        type.displayName ||
                        (Object.defineProperty(type, "name", { value: name }),
                            (type.displayName = name));
                }
            });
            return compare;
        };
        exports.startTransition = function (scope) {
            var prevTransition = ReactSharedInternals.T, currentTransition = {};
            ReactSharedInternals.T = currentTransition;
            currentTransition._updatedFibers = new Set();
            try {
                var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
                null !== onStartTransitionFinish &&
                    onStartTransitionFinish(currentTransition, returnValue);
                "object" === typeof returnValue &&
                    null !== returnValue &&
                    "function" === typeof returnValue.then &&
                    returnValue.then(noop, reportGlobalError);
            }
            catch (error) {
                reportGlobalError(error);
            }
            finally {
                null === prevTransition &&
                    currentTransition._updatedFibers &&
                    ((scope = currentTransition._updatedFibers.size),
                        currentTransition._updatedFibers.clear(),
                        10 < scope &&
                            console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")),
                    (ReactSharedInternals.T = prevTransition);
            }
        };
        exports.unstable_useCacheRefresh = function () {
            return resolveDispatcher().useCacheRefresh();
        };
        exports.use = function (usable) {
            return resolveDispatcher().use(usable);
        };
        exports.useActionState = function (action, initialState, permalink) {
            return resolveDispatcher().useActionState(action, initialState, permalink);
        };
        exports.useCallback = function (callback, deps) {
            return resolveDispatcher().useCallback(callback, deps);
        };
        exports.useContext = function (Context) {
            var dispatcher = resolveDispatcher();
            Context.$$typeof === REACT_CONSUMER_TYPE &&
                console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?");
            return dispatcher.useContext(Context);
        };
        exports.useDebugValue = function (value, formatterFn) {
            return resolveDispatcher().useDebugValue(value, formatterFn);
        };
        exports.useDeferredValue = function (value, initialValue) {
            return resolveDispatcher().useDeferredValue(value, initialValue);
        };
        exports.useEffect = function (create, createDeps, update) {
            null == create &&
                console.warn("React Hook useEffect requires an effect callback. Did you forget to pass a callback to the hook?");
            var dispatcher = resolveDispatcher();
            if ("function" === typeof update)
                throw Error("useEffect CRUD overload is not enabled in this build of React.");
            return dispatcher.useEffect(create, createDeps);
        };
        exports.useId = function () {
            return resolveDispatcher().useId();
        };
        exports.useImperativeHandle = function (ref, create, deps) {
            return resolveDispatcher().useImperativeHandle(ref, create, deps);
        };
        exports.useInsertionEffect = function (create, deps) {
            null == create &&
                console.warn("React Hook useInsertionEffect requires an effect callback. Did you forget to pass a callback to the hook?");
            return resolveDispatcher().useInsertionEffect(create, deps);
        };
        exports.useLayoutEffect = function (create, deps) {
            null == create &&
                console.warn("React Hook useLayoutEffect requires an effect callback. Did you forget to pass a callback to the hook?");
            return resolveDispatcher().useLayoutEffect(create, deps);
        };
        exports.useMemo = function (create, deps) {
            return resolveDispatcher().useMemo(create, deps);
        };
        exports.useOptimistic = function (passthrough, reducer) {
            return resolveDispatcher().useOptimistic(passthrough, reducer);
        };
        exports.useReducer = function (reducer, initialArg, init) {
            return resolveDispatcher().useReducer(reducer, initialArg, init);
        };
        exports.useRef = function (initialValue) {
            return resolveDispatcher().useRef(initialValue);
        };
        exports.useState = function (initialState) {
            return resolveDispatcher().useState(initialState);
        };
        exports.useSyncExternalStore = function (subscribe, getSnapshot, getServerSnapshot) {
            return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        };
        exports.useTransition = function () {
            return resolveDispatcher().useTransition();
        };
        exports.version = "19.1.1";
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
            "function" ===
                typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,