d269959eaba0999ddb335f23e9314b63
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * File Upload Forms Test Suite
 *
 * Comprehensive testing for all submission forms that support file uploads or image attachments.
 * This test suite validates:
 * 1. File selection and validation
 * 2. Form submission with multipart data
 * 3. Error handling for file uploads
 * 4. File type and size restrictions
 * 5. Multiple file handling
 * 6. UI feedback during upload process
 *
 * Forms tested:
 * - Bug Reports (with file attachments)
 * - Feature Requests/Ideas (with file attachments)
 * - Document Upload Forms
 * - Bills (with receipt attachments)
 */
const globals_1 = require("@jest/globals");
globals_1.jest.mock('@/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
}));
globals_1.jest.mock('@/hooks/use-auth', () => ({
    useAuth: () => mockAuth,
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({ toast: mockToast }),
}));
const react_1 = require("@testing-library/react");
const test_utils_1 = require("../utils/test-utils");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_2 = __importDefault(require("react"));
// Test utilities - using shared test-utils wrapper
// Mock API request function
const mockApiRequest = globals_1.jest.fn();
const mockFetch = globals_1.jest.fn();
// Mock authentication hook
const mockAuth = {
    user: {
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'test@koveo.com',
        role: 'admin',
        organizationId: '123e4567-e89b-12d3-a456-426614174001'
    },
    login: globals_1.jest.fn(),
    logout: globals_1.jest.fn(),
};
// Mock toast hook
const mockToast = globals_1.jest.fn();
// Mock global fetch
global.fetch = mockFetch;
// Create mock files for testing
const createMockFile = (name, size, type) => {
    const file = new File(['mock content'], name, { type });
    Object.defineProperty(file, 'size', { value: size });
    return file;
};
const createMockImage = (name, size = 50000) => createMockFile(name, size, 'image/png');
const createMockPDF = (name, size = 100000) => createMockFile(name, size, 'application/pdf');
const createMockTextFile = (name, size = 1000) => createMockFile(name, size, 'text/plain');
(0, globals_1.describe)('File Upload Forms Test Suite', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ id: 'test-id', success: true });
        mockFetch.mockResolvedValue({
            ok: true,
            json: async () => ({ id: 'test-id', success: true }),
        });
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    (0, globals_1.describe)('Bug Report Form with File Attachments', () => {
        const BugReportForm = require('../../client/src/pages/settings/bug-reports.tsx').default;
        (0, globals_1.beforeEach)(() => {
            // Reset mocks for this test suite
            globals_1.jest.clearAllMocks();
        });
        (0, globals_1.it)('should render bug report form with file upload capability', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            // Check for bug report button
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                // Look for file upload components
                const attachButton = react_1.screen.queryByText(/attach files/i) ||
                    react_1.screen.queryByText(/screenshots/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                (0, globals_1.expect)(attachButton).toBeTruthy();
            }
        });
        (0, globals_1.it)('should handle single file attachment to bug reports', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                // Fill required fields
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                const pageInput = react_1.screen.queryByLabelText(/page/i) ||
                    react_1.screen.queryByPlaceholderText(/page/i);
                if (titleInput && descriptionInput && pageInput) {
                    await user_event_1.default.type(titleInput, 'Test Bug Report with File');
                    await user_event_1.default.type(descriptionInput, 'This is a test bug report with file attachment for testing purposes.');
                    await user_event_1.default.type(pageInput, 'Test Page');
                    // Try to find and interact with file upload
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i }) ||
                        react_1.screen.queryByText(/attach files/i);
                    if (fileInput) {
                        const mockFile = createMockImage('screenshot.png');
                        // Simulate file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: [mockFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
                        // Submit form
                        const submitButton = react_1.screen.queryByTestId('button-submit-bug') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bugs', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                    credentials: 'include',
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should handle multiple file attachments to bug reports', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                const pageInput = react_1.screen.queryByLabelText(/page/i) ||
                    react_1.screen.queryByPlaceholderText(/page/i);
                if (titleInput && descriptionInput && pageInput) {
                    await user_event_1.default.type(titleInput, 'Multi-file Bug Report');
                    await user_event_1.default.type(descriptionInput, 'Testing multiple file attachments in bug reports.');
                    await user_event_1.default.type(pageInput, 'Test Page');
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('screenshot1.png'),
                            createMockImage('screenshot2.png'),
                            createMockPDF('error-log.pdf')
                        ];
                        // Simulate multiple file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        const submitButton = react_1.screen.queryByTestId('button-submit-bug') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bugs', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate file size limits for bug report attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BugReportForm, {}) }));
            const reportButton = react_1.screen.queryByTestId('button-report-bug') ||
                react_1.screen.queryByText(/report bug/i);
            if (reportButton) {
                await user_event_1.default.click(reportButton);
                const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                if (fileInput) {
                    // Create oversized file (50MB)
                    const oversizedFile = createMockImage('huge-file.png', 50 * 1024 * 1024);
                    Object.defineProperty(fileInput, 'files', {
                        value: [oversizedFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [oversizedFile] } });
                    // Should show error message for oversized file
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*too large/i) ||
                            react_1.screen.queryByText(/size.*exceeded/i) ||
                            react_1.screen.queryByText(/maximum.*size/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Feature Request Form with File Attachments', () => {
        const FeatureRequestForm = require('../../client/src/pages/settings/idea-box.tsx').default;
        (0, globals_1.it)('should render feature request form with file upload capability', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(FeatureRequestForm, {}) }));
            const requestButton = react_1.screen.queryByTestId('button-request-feature') ||
                react_1.screen.queryByText(/request feature/i) ||
                react_1.screen.queryByText(/suggest idea/i);
            if (requestButton) {
                await user_event_1.default.click(requestButton);
                const attachButton = react_1.screen.queryByText(/attach files/i) ||
                    react_1.screen.queryByText(/attachments/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                (0, globals_1.expect)(attachButton).toBeTruthy();
            }
        });
        (0, globals_1.it)('should submit feature request with file attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(FeatureRequestForm, {}) }));
            const requestButton = react_1.screen.queryByTestId('button-request-feature') ||
                react_1.screen.queryByText(/request feature/i);
            if (requestButton) {
                await user_event_1.default.click(requestButton);
                const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                    react_1.screen.queryByPlaceholderText(/title/i);
                const descriptionInput = react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                if (titleInput && descriptionInput) {
                    await user_event_1.default.type(titleInput, 'New Feature with Mockups');
                    await user_event_1.default.type(descriptionInput, 'Feature request with design mockups and documentation.');
                    const fileInput = react_1.screen.queryByRole('button', { name: /attach/i });
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('mockup.png'),
                            createMockPDF('requirements.pdf')
                        ];
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        const submitButton = react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith(globals_1.expect.stringMatching(/\/api\/(features|feature-requests)/), globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
    });
    (0, globals_1.describe)('Document Upload Forms', () => {
        // Test simplified document upload functionality without non-existent components
        (0, globals_1.it)('should handle document upload with metadata', async () => {
            // Create a minimal document upload form for testing
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { "data-testid": "document-upload-form", children: [(0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input-document", accept: ".pdf,.doc,.docx,.jpg,.png" }), (0, jsx_runtime_1.jsx)("input", { type: "text", "data-testid": "input-document-title", placeholder: "Document Title" }), (0, jsx_runtime_1.jsx)("select", { "data-testid": "select-document-category", children: (0, jsx_runtime_1.jsx)("option", { value: "test-documents", children: "Test Documents" }) }), (0, jsx_runtime_1.jsx)("button", { type: "submit", "data-testid": "button-submit-document", children: "Upload Document" })] }) }));
            const uploadButton = react_1.screen.queryByTestId('button-upload-document') ||
                react_1.screen.queryByText(/upload/i) ||
                react_1.screen.queryByRole('button', { name: /add.*document/i });
            if (uploadButton) {
                await user_event_1.default.click(uploadButton);
                const fileInput = react_1.screen.queryByRole('input', { name: /file/i }) ||
                    react_1.screen.queryByRole('button', { name: /choose.*file/i });
                if (fileInput) {
                    const mockDocument = createMockPDF('contract.pdf');
                    Object.defineProperty(fileInput, 'files', {
                        value: [mockDocument],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [mockDocument] } });
                    // Fill document metadata
                    const nameInput = react_1.screen.queryByLabelText(/name/i) ||
                        react_1.screen.queryByPlaceholderText(/document.*name/i);
                    const descriptionInput = react_1.screen.queryByLabelText(/description/i);
                    if (nameInput) {
                        await user_event_1.default.type(nameInput, 'Test Contract Document');
                    }
                    if (descriptionInput) {
                        await user_event_1.default.type(descriptionInput, 'Legal contract for testing purposes');
                    }
                    const submitButton = react_1.screen.queryByRole('button', { name: /upload/i }) ||
                        react_1.screen.queryByRole('button', { name: /save/i });
                    if (submitButton) {
                        await user_event_1.default.click(submitButton);
                        await (0, react_1.waitFor)(() => {
                            (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', globals_1.expect.stringMatching(/\/api\/documents/), globals_1.expect.any(Object));
                        });
                    }
                }
            }
        });
        (0, globals_1.it)('should validate document file types', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DocumentManager, { config: {
                        type: 'building',
                        entityId: 'building-123',
                        userRole: 'manager'
                    } }) }));
            const uploadButton = react_1.screen.queryByTestId('button-upload-document') ||
                react_1.screen.queryByText(/upload/i);
            if (uploadButton) {
                await user_event_1.default.click(uploadButton);
                const fileInput = react_1.screen.queryByRole('input', { name: /file/i });
                if (fileInput) {
                    // Try uploading invalid file type
                    const invalidFile = createMockFile('malicious.exe', 1000, 'application/x-executable');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*type.*not.*allowed/i) ||
                            react_1.screen.queryByText(/invalid.*file.*type/i) ||
                            react_1.screen.queryByText(/unsupported.*format/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Bill Form with Receipt Attachments', () => {
        const BillCreateForm = require('../../client/src/components/BillCreateForm.tsx').default;
        (0, globals_1.it)('should handle bill submission with receipt attachments', async () => {
            const mockProps = {
                isOpen: true,
                onClose: globals_1.jest.fn(),
                onSubmit: globals_1.jest.fn(),
                buildings: [],
                residences: []
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BillCreateForm, { ...mockProps }) }));
            // Fill bill details
            const titleInput = react_1.screen.queryByLabelText(/title/i) ||
                react_1.screen.queryByPlaceholderText(/bill.*title/i);
            const amountInput = react_1.screen.queryByLabelText(/amount/i) ||
                react_1.screen.queryByPlaceholderText(/amount/i);
            if (titleInput && amountInput) {
                await user_event_1.default.type(titleInput, 'Electricity Bill - January 2025');
                await user_event_1.default.type(amountInput, '150.75');
                // Look for file attachment
                const attachButton = react_1.screen.queryByText(/attach.*receipt/i) ||
                    react_1.screen.queryByText(/add.*attachment/i) ||
                    react_1.screen.queryByRole('button', { name: /attach/i });
                if (attachButton) {
                    await user_event_1.default.click(attachButton);
                    const fileInput = react_1.screen.queryByRole('textbox');
                    if (fileInput) {
                        const receiptFile = createMockPDF('receipt.pdf');
                        Object.defineProperty(fileInput, 'files', {
                            value: [receiptFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [receiptFile] } });
                        const submitButton = react_1.screen.queryByRole('button', { name: /save.*bill/i }) ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (submitButton) {
                            await user_event_1.default.click(submitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockProps.onSubmit).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                                    title: 'Electricity Bill - January 2025',
                                    amount: globals_1.expect.any(String),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate receipt file format', async () => {
            const mockProps = {
                isOpen: true,
                onClose: globals_1.jest.fn(),
                onSubmit: globals_1.jest.fn(),
                buildings: [],
                residences: []
            };
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(BillForm, { ...mockProps }) }));
            const attachButton = react_1.screen.queryByText(/attach/i);
            if (attachButton) {
                await user_event_1.default.click(attachButton);
                const fileInput = react_1.screen.queryByRole('textbox');
                if (fileInput) {
                    // Try invalid file format
                    const invalidFile = createMockFile('receipt.txt', 1000, 'text/plain');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/invalid.*format/i) ||
                            react_1.screen.queryByText(/only.*pdf.*jpg.*png/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
    });
    (0, globals_1.describe)('Demands Form with File Attachments', () => {
        const DemandsPage = require('../../client/src/pages/ResidentDemandsPage.tsx').default;
        (0, globals_1.beforeEach)(() => {
            globals_1.jest.clearAllMocks();
            // Mock successful upload response
            mockFetch.mockResolvedValue({
                ok: true,
                json: async () => ({
                    fileUrls: ['/uploads/demands/test-file.png'],
                    fileCount: 1,
                    message: 'Files uploaded successfully'
                }),
            });
        });
        (0, globals_1.it)('should render demands form with file upload capability', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            // Look for submit demand button
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i) ||
                react_1.screen.queryByText(/create.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                // Look for file upload component
                const fileUpload = react_1.screen.queryByTestId('file-upload-container') ||
                    react_1.screen.queryByText(/drag.*drop/i) ||
                    react_1.screen.queryByText(/attach.*files/i) ||
                    react_1.screen.queryByRole('button', { name: /upload/i });
                (0, globals_1.expect)(fileUpload).toBeTruthy();
            }
        });
        (0, globals_1.it)('should handle single file attachment to demands', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                // Fill required fields
                const typeSelect = react_1.screen.queryByTestId('select-demand-type') ||
                    react_1.screen.queryByLabelText(/type/i);
                const descriptionInput = react_1.screen.queryByTestId('textarea-demand-description') ||
                    react_1.screen.queryByLabelText(/description/i) ||
                    react_1.screen.queryByPlaceholderText(/description/i);
                if (typeSelect && descriptionInput) {
                    await user_event_1.default.selectOptions(typeSelect, 'maintenance');
                    await user_event_1.default.type(descriptionInput, 'Kitchen faucet is leaking and needs immediate repair. Water is dripping constantly.');
                    // Find file upload area
                    const fileUploadArea = react_1.screen.queryByTestId('file-upload-container') ||
                        react_1.screen.queryByText(/drag.*drop/i);
                    if (fileUploadArea) {
                        const mockFile = createMockImage('leak-photo.png');
                        // Simulate file drop
                        const fileInput = react_1.screen.queryByRole('input', { hidden: true }) ||
                            document.querySelector('input[type="file"]');
                        if (fileInput) {
                            Object.defineProperty(fileInput, 'files', {
                                value: [mockFile],
                                writable: false,
                            });
                            react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
                            // Wait for file to be processed
                            await (0, react_1.waitFor)(() => {
                                const filePreview = react_1.screen.queryByText('leak-photo.png') ||
                                    react_1.screen.queryByTestId('file-preview-0');
                                (0, globals_1.expect)(filePreview).toBeTruthy();
                            });
                            // Submit the demand
                            const finalSubmitButton = react_1.screen.queryByTestId('button-submit-demand-form') ||
                                react_1.screen.queryByRole('button', { name: /submit.*demand/i });
                            if (finalSubmitButton) {
                                await user_event_1.default.click(finalSubmitButton);
                                await (0, react_1.waitFor)(() => {
                                    // Verify file upload was called
                                    (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/upload', globals_1.expect.objectContaining({
                                        method: 'POST',
                                        body: globals_1.expect.any(FormData),
                                    }));
                                    // Verify demand creation was called with attachments
                                    (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', globals_1.expect.objectContaining({
                                        method: 'POST',
                                        headers: globals_1.expect.objectContaining({
                                            'Content-Type': 'application/json',
                                        }),
                                        body: globals_1.expect.stringContaining('attachments'),
                                    }));
                                });
                            }
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should handle multiple file attachments to demands', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const typeSelect = react_1.screen.queryByTestId('select-demand-type');
                const descriptionInput = react_1.screen.queryByTestId('textarea-demand-description') ||
                    react_1.screen.queryByLabelText(/description/i);
                if (typeSelect && descriptionInput) {
                    await user_event_1.default.selectOptions(typeSelect, 'complaint');
                    await user_event_1.default.type(descriptionInput, 'Multiple issues with apartment including water damage and electrical problems. Photos attached for evidence.');
                    const fileInput = document.querySelector('input[type="file"]');
                    if (fileInput) {
                        const mockFiles = [
                            createMockImage('water-damage.jpg'),
                            createMockImage('electrical-issue.png'),
                            createMockPDF('inspection-report.pdf')
                        ];
                        // Simulate multiple file selection
                        Object.defineProperty(fileInput, 'files', {
                            value: mockFiles,
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: mockFiles } });
                        // Wait for files to be processed
                        await (0, react_1.waitFor)(() => {
                            const fileCount = react_1.screen.queryByText(/3.*files/i) ||
                                react_1.screen.queryAllByTestId(/file-preview-/);
                            (0, globals_1.expect)(fileCount).toBeTruthy();
                        });
                        // Update mock for multiple files
                        mockFetch.mockResolvedValueOnce({
                            ok: true,
                            json: async () => ({
                                fileUrls: [
                                    '/uploads/demands/water-damage.jpg',
                                    '/uploads/demands/electrical-issue.png',
                                    '/uploads/demands/inspection-report.pdf'
                                ],
                                fileCount: 3
                            }),
                        });
                        const finalSubmitButton = react_1.screen.queryByTestId('button-submit-demand-form') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (finalSubmitButton) {
                            await user_event_1.default.click(finalSubmitButton);
                            await (0, react_1.waitFor)(() => {
                                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/upload', globals_1.expect.objectContaining({
                                    method: 'POST',
                                    body: globals_1.expect.any(FormData),
                                }));
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should validate file size limits for demand attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileInput = document.querySelector('input[type="file"]');
                if (fileInput) {
                    // Create oversized file (15MB - above 10MB limit)
                    const oversizedFile = createMockImage('huge-screenshot.png', 15 * 1024 * 1024);
                    Object.defineProperty(fileInput, 'files', {
                        value: [oversizedFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [oversizedFile] } });
                    // Should show error message for oversized file
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*too large/i) ||
                            react_1.screen.queryByText(/size.*exceeded/i) ||
                            react_1.screen.queryByText(/10.*mb.*limit/i) ||
                            react_1.screen.queryByText(/maximum.*file.*size/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should validate maximum file count for demand attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileInput = document.querySelector('input[type="file"]');
                if (fileInput) {
                    // Try to upload 6 files (above 5 file limit)
                    const tooManyFiles = [
                        createMockImage('file1.png'),
                        createMockImage('file2.png'),
                        createMockImage('file3.png'),
                        createMockImage('file4.png'),
                        createMockImage('file5.png'),
                        createMockImage('file6.png') // This should trigger error
                    ];
                    Object.defineProperty(fileInput, 'files', {
                        value: tooManyFiles,
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: tooManyFiles } });
                    // Should show error message for too many files
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/maximum.*5.*files/i) ||
                            react_1.screen.queryByText(/too many.*files/i) ||
                            react_1.screen.queryByText(/file.*limit.*exceeded/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should validate allowed file types for demand attachments', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileInput = document.querySelector('input[type="file"]');
                if (fileInput) {
                    // Try uploading invalid file type
                    const invalidFile = createMockFile('malicious.exe', 1000, 'application/x-executable');
                    Object.defineProperty(fileInput, 'files', {
                        value: [invalidFile],
                        writable: false,
                    });
                    react_1.fireEvent.change(fileInput, { target: { files: [invalidFile] } });
                    await (0, react_1.waitFor)(() => {
                        const errorMessage = react_1.screen.queryByText(/file.*type.*not.*supported/i) ||
                            react_1.screen.queryByText(/invalid.*file.*format/i) ||
                            react_1.screen.queryByText(/only.*images.*pdf.*documents/i);
                        if (errorMessage) {
                            (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should handle screenshot paste functionality (Ctrl+V)', async () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const fileUploadArea = react_1.screen.queryByTestId('file-upload-container');
                if (fileUploadArea) {
                    // Mock clipboard data
                    const clipboardData = {
                        items: [
                            {
                                kind: 'file',
                                type: 'image/png',
                                getAsFile: () => createMockImage('pasted-screenshot.png')
                            }
                        ]
                    };
                    // Simulate paste event
                    react_1.fireEvent.paste(fileUploadArea, {
                        clipboardData: clipboardData
                    });
                    // Should show pasted file
                    await (0, react_1.waitFor)(() => {
                        const pastedFile = react_1.screen.queryByText(/pasted.*screenshot/i) ||
                            react_1.screen.queryByText(/screenshot.*pasted/i) ||
                            react_1.screen.queryByTestId('file-preview-0');
                        if (pastedFile) {
                            (0, globals_1.expect)(pastedFile).toBeInTheDocument();
                        }
                    });
                }
            }
        });
        (0, globals_1.it)('should handle network errors during file upload in demands', async () => {
            // Mock upload failure
            mockFetch.mockRejectedValueOnce(new Error('Upload failed'));
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandsPage, {}) }));
            const submitButton = react_1.screen.queryByTestId('button-submit-demand') ||
                react_1.screen.queryByText(/submit.*demand/i);
            if (submitButton) {
                await user_event_1.default.click(submitButton);
                const typeSelect = react_1.screen.queryByTestId('select-demand-type');
                const descriptionInput = react_1.screen.queryByTestId('textarea-demand-description') ||
                    react_1.screen.queryByLabelText(/description/i);
                if (typeSelect && descriptionInput) {
                    await user_event_1.default.selectOptions(typeSelect, 'maintenance');
                    await user_event_1.default.type(descriptionInput, 'Test demand with file that will fail to upload');
                    const fileInput = document.querySelector('input[type="file"]');
                    if (fileInput) {
                        const mockFile = createMockImage('test-file.png');
                        Object.defineProperty(fileInput, 'files', {
                            value: [mockFile],
                            writable: false,
                        });
                        react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
                        const finalSubmitButton = react_1.screen.queryByTestId('button-submit-demand-form') ||
                            react_1.screen.queryByRole('button', { name: /submit/i });
                        if (finalSubmitButton) {
                            await user_event_1.default.click(finalSubmitButton);
                            // Should show error message for upload failure
                            await (0, react_1.waitFor)(() => {
                                const errorMessage = react_1.screen.queryByText(/upload.*failed/i) ||
                                    react_1.screen.queryByText(/error.*uploading/i) ||
                                    react_1.screen.queryByText(/failed.*attach/i);
                                if (errorMessage) {
                                    (0, globals_1.expect)(errorMessage).toBeInTheDocument();
                                }
                            });
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should display attached files in demand details popup', async () => {
            // Mock demand with file attachment
            const mockDemandWithAttachments = {
                id: 'demand-123',
                type: 'maintenance',
                description: 'Leak in bathroom ceiling',
                filePath: '/uploads/demands/leak-photo-1.jpg',
                fileName: 'leak-photo-1.jpg',
                fileSize: 256000, // 256KB
                status: 'submitted',
                submitterId: 'user-123',
                buildingId: 'building-123',
                createdAt: '2024-09-05T10:00:00Z',
                updatedAt: '2024-09-05T10:00:00Z',
                submitter: {
                    id: 'user-123',
                    firstName: 'Test',
                    lastName: 'User',
                    email: 'test@test.com'
                },
                building: {
                    id: 'building-123',
                    name: 'Test Building',
                    address: '123 Test St'
                }
            };
            // Mock the demand details popup component
            const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;
            mockApiRequest.mockResolvedValue([]); // Mock comments
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandDetailsPopup, { demand: mockDemandWithAttachments, isOpen: true, onClose: globals_1.jest.fn(), user: mockAuth.user }) }));
            // Should show file attachment section
            await (0, react_1.waitFor)(() => {
                const attachmentLabel = react_1.screen.queryByText(/file attachment/i) ||
                    react_1.screen.queryByText(/attachment/i);
                (0, globals_1.expect)(attachmentLabel).toBeTruthy();
            });
            // Should show the file name
            const fileName = react_1.screen.queryByText(/leak-photo-1\.jpg/i);
            (0, globals_1.expect)(fileName).toBeTruthy();
            // Should have view/download buttons
            const viewButtons = react_1.screen.queryAllByText(/view|download/i);
            (0, globals_1.expect)(viewButtons.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should handle viewing attached files from demand details', async () => {
            const mockDemandWithImage = {
                id: 'demand-456',
                type: 'complaint',
                description: 'Issue with windows',
                filePath: '/uploads/demands/window-problem.png',
                fileName: 'window-problem.png',
                fileSize: 512000, // 512KB
                status: 'submitted',
                submitterId: 'user-123',
                buildingId: 'building-123',
                createdAt: '2024-09-05T10:00:00Z',
                updatedAt: '2024-09-05T10:00:00Z'
            };
            const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;
            mockApiRequest.mockResolvedValue([]);
            // Mock window.open
            global.open = globals_1.jest.fn();
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandDetailsPopup, { demand: mockDemandWithImage, isOpen: true, onClose: globals_1.jest.fn(), user: mockAuth.user }) }));
            await (0, react_1.waitFor)(() => {
                const viewButton = react_1.screen.queryByTestId('button-view-attachment-0') ||
                    react_1.screen.queryByText(/view/i);
                if (viewButton) {
                    (0, globals_1.expect)(viewButton).toBeInTheDocument();
                }
            });
            // Click view button
            const viewButton = react_1.screen.queryByTestId('button-view-attachment-0') ||
                react_1.screen.queryByText(/view/i);
            if (viewButton) {
                await user_event_1.default.click(viewButton);
                // Should open file in new window
                (0, globals_1.expect)(global.open).toHaveBeenCalledWith('/uploads/demands/window-problem.png', '_blank');
            }
        });
        (0, globals_1.it)('should not show attachments section when demand has no files', async () => {
            const mockDemandWithoutAttachments = {
                id: 'demand-789',
                type: 'information',
                description: 'General inquiry',
                filePath: null,
                fileName: null,
                fileSize: null, // No file attachment
                status: 'submitted',
                submitterId: 'user-123',
                buildingId: 'building-123',
                createdAt: '2024-09-05T10:00:00Z',
                updatedAt: '2024-09-05T10:00:00Z'
            };
            const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;
            mockApiRequest.mockResolvedValue([]);
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(DemandDetailsPopup, { demand: mockDemandWithoutAttachments, isOpen: true, onClose: globals_1.jest.fn(), user: mockAuth.user }) }));
            // Should NOT show file attachment section
            await (0, react_1.waitFor)(() => {
                const attachmentSection = react_1.screen.queryByText(/file attachment/i);
                (0, globals_1.expect)(attachmentSection).not.toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('General File Upload Validation', () => {
        (0, globals_1.it)('should handle network errors during file upload', async () => {
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("div", { "data-testid": "test-upload-form", children: (0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: (e) => {
                            const formData = new FormData();
                            if (e.target.files?.[0]) {
                                formData.append('file', e.target.files[0]);
                                fetch('/api/upload', { method: 'POST', body: formData });
                            }
                        } }) }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const mockFile = createMockImage('test.png');
            Object.defineProperty(fileInput, 'files', {
                value: [mockFile],
                writable: false,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [mockFile] } });
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/upload', globals_1.expect.objectContaining({
                    method: 'POST',
                    body: globals_1.expect.any(FormData),
                }));
            });
        });
        (0, globals_1.it)('should handle empty file selection', () => {
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: () => {
                        // Should not trigger any upload
                    } }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            // Simulate empty file selection
            react_1.fireEvent.change(fileInput, { target: { files: [] } });
            (0, globals_1.expect)(mockFetch).not.toHaveBeenCalled();
            (0, globals_1.expect)(mockApiRequest).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should respect maximum file count limits', () => {
            const MAX_FILES = 3;
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("input", { type: "file", multiple: true, "data-testid": "file-input", onChange: (e) => {
                        if (e.target.files && e.target.files.length > MAX_FILES) {
                            throw new Error(`Maximum ${MAX_FILES} files allowed`);
                        }
                    } }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const tooManyFiles = [
                createMockImage('1.png'),
                createMockImage('2.png'),
                createMockImage('3.png'),
                createMockImage('4.png'), // One too many
            ];
            (0, globals_1.expect)(() => {
                Object.defineProperty(fileInput, 'files', {
                    value: tooManyFiles,
                    writable: false,
                    configurable: true,
                });
                react_1.fireEvent.change(fileInput, { target: { files: tooManyFiles } });
            }).toThrow(/Maximum.*files.*allowed/);
        });
    });
    (0, globals_1.describe)('File Upload Progress and Feedback', () => {
        (0, globals_1.it)('should show upload progress for large files', async () => {
            const mockUploadProgress = globals_1.jest.fn();
            // Mock XMLHttpRequest for progress tracking
            const mockXHR = {
                upload: {
                    addEventListener: globals_1.jest.fn((event, callback) => {
                        if (event === 'progress') {
                            // Simulate progress updates
                            setTimeout(() => callback({ loaded: 50, total: 100 }), 100);
                            setTimeout(() => callback({ loaded: 100, total: 100 }), 200);
                        }
                    }),
                },
                addEventListener: globals_1.jest.fn(),
                open: globals_1.jest.fn(),
                send: globals_1.jest.fn(),
                setRequestHeader: globals_1.jest.fn(),
            };
            global.XMLHttpRequest = globals_1.jest.fn(() => mockXHR);
            (0, test_utils_1.render)((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { "data-testid": "upload-with-progress", children: [(0, jsx_runtime_1.jsx)("input", { type: "file", "data-testid": "file-input", onChange: mockUploadProgress }), (0, jsx_runtime_1.jsx)("div", { "data-testid": "progress-indicator", children: "0%" })] }) }));
            const fileInput = react_1.screen.getByTestId('file-input');
            const largeFile = createMockImage('large-image.png', 10 * 1024 * 1024); // 10MB
            Object.defineProperty(fileInput, 'files', {
                value: [largeFile],
                writable: false,
                configurable: true,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [largeFile] } });
            (0, globals_1.expect)(mockUploadProgress).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                target: globals_1.expect.objectContaining({
                    files: globals_1.expect.arrayContaining([largeFile])
                })
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2ZpbGUtdXBsb2FkLWZvcm1zLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUVILDJDQUFrRjtBQWFsRixjQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDcEMsVUFBVSxFQUFFLGNBQWM7Q0FDM0IsQ0FBQyxDQUFDLENBQUM7QUFjSixjQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDbkMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVE7Q0FDeEIsQ0FBQyxDQUFDLENBQUM7QUFJSixjQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDcEMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7Q0FDdkMsQ0FBQyxDQUFDLENBQUM7QUFwQ0osa0RBQW9FO0FBQ3BFLG9EQUE2QztBQUM3QyxxQ0FBbUM7QUFDbkMsNkVBQW9EO0FBQ3BELGtEQUEwQjtBQUUxQixtREFBbUQ7QUFFbkQsNEJBQTRCO0FBQzVCLE1BQU0sY0FBYyxHQUFHLGNBQUksQ0FBQyxFQUFFLEVBQThCLENBQUM7QUFDN0QsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBOEIsQ0FBQztBQU14RCwyQkFBMkI7QUFDM0IsTUFBTSxRQUFRLEdBQUc7SUFDZixJQUFJLEVBQUU7UUFDSixFQUFFLEVBQUUsc0NBQXNDO1FBQzFDLEtBQUssRUFBRSxnQkFBZ0I7UUFDdkIsSUFBSSxFQUFFLE9BQU87UUFDYixjQUFjLEVBQUUsc0NBQXNDO0tBQ3ZEO0lBQ0QsS0FBSyxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7SUFDaEIsTUFBTSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDbEIsQ0FBQztBQU1GLGtCQUFrQjtBQUNsQixNQUFNLFNBQVMsR0FBRyxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFLNUIsb0JBQW9CO0FBQ3BCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsU0FBZ0IsQ0FBQztBQUVoQyxnQ0FBZ0M7QUFDaEMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxFQUFFO0lBQ2xFLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBWSxFQUFFLE9BQWUsS0FBSyxFQUFFLEVBQUUsQ0FDN0QsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFFMUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxJQUFZLEVBQUUsT0FBZSxNQUFNLEVBQUUsRUFBRSxDQUM1RCxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBRWhELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxJQUFZLEVBQUUsT0FBZSxJQUFJLEVBQUUsRUFBRSxDQUMvRCxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztBQUUzQyxJQUFBLGtCQUFRLEVBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQzVDLElBQUEsb0JBQVUsRUFBQyxHQUFHLEVBQUU7UUFDZCxjQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsY0FBYyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRSxTQUFTLENBQUMsaUJBQWlCLENBQUM7WUFDMUIsRUFBRSxFQUFFLElBQUk7WUFDUixJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDckQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLG1CQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ2IsY0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtRQUNyRCxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsaURBQWlELENBQUMsQ0FBQyxPQUFPLENBQUM7UUFFekYsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNkLGtDQUFrQztZQUNsQyxjQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywyREFBMkQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RSxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsdUJBQUMsYUFBYSxLQUFHLEdBQ2hCLENBQ0osQ0FBQztZQUVGLDhCQUE4QjtZQUM5QixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDO2dCQUMxQyxjQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXRELElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBRXBDLGtDQUFrQztnQkFDbEMsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUM7b0JBQ3BDLGNBQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO29CQUNsQyxjQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO2dCQUV0RSxJQUFBLGdCQUFNLEVBQUMsWUFBWSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDcEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMscURBQXFELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkUsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLHVCQUFDLGFBQWEsS0FBRyxHQUNoQixDQUNKLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDO2dCQUMxQyxjQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXRELElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBRXBDLHVCQUF1QjtnQkFDdkIsTUFBTSxVQUFVLEdBQUcsY0FBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztvQkFDbEMsY0FBTSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMxRCxNQUFNLGdCQUFnQixHQUFHLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUM7b0JBQ3hDLGNBQU0sQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDdEUsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQztvQkFDakMsY0FBTSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUV4RCxJQUFJLFVBQVUsSUFBSSxnQkFBZ0IsSUFBSSxTQUFTLEVBQUUsQ0FBQztvQkFDaEQsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztvQkFDOUQsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxzRUFBc0UsQ0FBQyxDQUFDO29CQUMvRyxNQUFNLG9CQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztvQkFFN0MsNENBQTRDO29CQUM1QyxNQUFNLFNBQVMsR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQzt3QkFDbEQsY0FBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFFckQsSUFBSSxTQUFTLEVBQUUsQ0FBQzt3QkFDZCxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzt3QkFFbkQsMEJBQTBCO3dCQUMxQixNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7NEJBQ3hDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQzs0QkFDakIsUUFBUSxFQUFFLEtBQUs7eUJBQ2hCLENBQUMsQ0FBQzt3QkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzt3QkFFL0QsY0FBYzt3QkFDZCxNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDOzRCQUMzQyxjQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO3dCQUVyRSxJQUFJLFlBQVksRUFBRSxDQUFDOzRCQUNqQixNQUFNLG9CQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDOzRCQUVwQyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTtnQ0FDakIsSUFBQSxnQkFBTSxFQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUNwQyxXQUFXLEVBQ1gsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQztvQ0FDdEIsTUFBTSxFQUFFLE1BQU07b0NBQ2QsSUFBSSxFQUFFLGdCQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztvQ0FDMUIsV0FBVyxFQUFFLFNBQVM7aUNBQ3ZCLENBQUMsQ0FDSCxDQUFDOzRCQUNKLENBQUMsQ0FBQyxDQUFDO3dCQUNMLENBQUM7b0JBQ0gsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsd0RBQXdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdEUsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLHVCQUFDLGFBQWEsS0FBRyxHQUNoQixDQUNKLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDO2dCQUMxQyxjQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXRELElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBRXBDLE1BQU0sVUFBVSxHQUFHLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7b0JBQ2xDLGNBQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUQsTUFBTSxnQkFBZ0IsR0FBRyxjQUFNLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDO29CQUN4QyxjQUFNLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ3RFLE1BQU0sU0FBUyxHQUFHLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7b0JBQ2pDLGNBQU0sQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFeEQsSUFBSSxVQUFVLElBQUksZ0JBQWdCLElBQUksU0FBUyxFQUFFLENBQUM7b0JBQ2hELE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLHVCQUF1QixDQUFDLENBQUM7b0JBQzFELE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsbURBQW1ELENBQUMsQ0FBQztvQkFDNUYsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7b0JBRTdDLE1BQU0sU0FBUyxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7b0JBRXBFLElBQUksU0FBUyxFQUFFLENBQUM7d0JBQ2QsTUFBTSxTQUFTLEdBQUc7NEJBQ2hCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQzs0QkFDbEMsZUFBZSxDQUFDLGlCQUFpQixDQUFDOzRCQUNsQyxhQUFhLENBQUMsZUFBZSxDQUFDO3lCQUMvQixDQUFDO3dCQUVGLG1DQUFtQzt3QkFDbkMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFOzRCQUN4QyxLQUFLLEVBQUUsU0FBUzs0QkFDaEIsUUFBUSxFQUFFLEtBQUs7eUJBQ2hCLENBQUMsQ0FBQzt3QkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO3dCQUU5RCxNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDOzRCQUMzQyxjQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO3dCQUVyRSxJQUFJLFlBQVksRUFBRSxDQUFDOzRCQUNqQixNQUFNLG9CQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDOzRCQUVwQyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTtnQ0FDakIsSUFBQSxnQkFBTSxFQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUNwQyxXQUFXLEVBQ1gsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQztvQ0FDdEIsTUFBTSxFQUFFLE1BQU07b0NBQ2QsSUFBSSxFQUFFLGdCQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztpQ0FDM0IsQ0FBQyxDQUNILENBQUM7NEJBQ0osQ0FBQyxDQUFDLENBQUM7d0JBQ0wsQ0FBQztvQkFDSCxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw2REFBNkQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRSxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsdUJBQUMsYUFBYSxLQUFHLEdBQ2hCLENBQ0osQ0FBQztZQUVGLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7Z0JBQzFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFdEQsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFcEMsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztnQkFFcEUsSUFBSSxTQUFTLEVBQUUsQ0FBQztvQkFDZCwrQkFBK0I7b0JBQy9CLE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQztvQkFFekUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFO3dCQUN4QyxLQUFLLEVBQUUsQ0FBQyxhQUFhLENBQUM7d0JBQ3RCLFFBQVEsRUFBRSxLQUFLO3FCQUNoQixDQUFDLENBQUM7b0JBRUgsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBRXBFLCtDQUErQztvQkFDL0MsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7d0JBQ2pCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7NEJBQ3ZDLGNBQU0sQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUM7NEJBQ3JDLGNBQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzt3QkFFekQsSUFBSSxZQUFZLEVBQUUsQ0FBQzs0QkFDakIsSUFBQSxnQkFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7d0JBQzNDLENBQUM7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtRQUMxRCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUUzRixJQUFBLFlBQUUsRUFBQyxnRUFBZ0UsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM5RSxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsdUJBQUMsa0JBQWtCLEtBQUcsR0FDckIsQ0FDSixDQUFDO1lBRUYsTUFBTSxhQUFhLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDL0MsY0FBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztnQkFDdEMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUV6RCxJQUFJLGFBQWEsRUFBRSxDQUFDO2dCQUNsQixNQUFNLG9CQUFTLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUVyQyxNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQztvQkFDcEMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7b0JBQ2xDLGNBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7Z0JBRXRFLElBQUEsZ0JBQU0sRUFBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNwQyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxxREFBcUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNuRSxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsdUJBQUMsa0JBQWtCLEtBQUcsR0FDckIsQ0FDSixDQUFDO1lBRUYsTUFBTSxhQUFhLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDL0MsY0FBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBRTVELElBQUksYUFBYSxFQUFFLENBQUM7Z0JBQ2xCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBRXJDLE1BQU0sVUFBVSxHQUFHLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7b0JBQ2xDLGNBQU0sQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUQsTUFBTSxnQkFBZ0IsR0FBRyxjQUFNLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDO29CQUN4QyxjQUFNLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBRXRFLElBQUksVUFBVSxJQUFJLGdCQUFnQixFQUFFLENBQUM7b0JBQ25DLE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLDBCQUEwQixDQUFDLENBQUM7b0JBQzdELE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsd0RBQXdELENBQUMsQ0FBQztvQkFFakcsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztvQkFFcEUsSUFBSSxTQUFTLEVBQUUsQ0FBQzt3QkFDZCxNQUFNLFNBQVMsR0FBRzs0QkFDaEIsZUFBZSxDQUFDLFlBQVksQ0FBQzs0QkFDN0IsYUFBYSxDQUFDLGtCQUFrQixDQUFDO3lCQUNsQyxDQUFDO3dCQUVGLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRTs0QkFDeEMsS0FBSyxFQUFFLFNBQVM7NEJBQ2hCLFFBQVEsRUFBRSxLQUFLO3lCQUNoQixDQUFDLENBQUM7d0JBRUgsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQzt3QkFFOUQsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQzt3QkFFdkUsSUFBSSxZQUFZLEVBQUUsQ0FBQzs0QkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs0QkFFcEMsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7Z0NBQ2pCLElBQUEsZ0JBQU0sRUFBQyxTQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FDcEMsZ0JBQU0sQ0FBQyxjQUFjLENBQUMsb0NBQW9DLENBQUMsRUFDM0QsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQztvQ0FDdEIsTUFBTSxFQUFFLE1BQU07b0NBQ2QsSUFBSSxFQUFFLGdCQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztpQ0FDM0IsQ0FBQyxDQUNILENBQUM7NEJBQ0osQ0FBQyxDQUFDLENBQUM7d0JBQ0wsQ0FBQztvQkFDSCxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDckMsZ0ZBQWdGO1FBRWhGLElBQUEsWUFBRSxFQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzNELG9EQUFvRDtZQUNwRCxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsZ0RBQWlCLHNCQUFzQixhQUNyQyxrQ0FDRSxJQUFJLEVBQUMsTUFBTSxpQkFDQyxxQkFBcUIsRUFDakMsTUFBTSxFQUFDLDJCQUEyQixHQUNsQyxFQUNGLGtDQUNFLElBQUksRUFBQyxNQUFNLGlCQUNDLHNCQUFzQixFQUNsQyxXQUFXLEVBQUMsZ0JBQWdCLEdBQzVCLEVBQ0Ysa0RBQW9CLDBCQUEwQixZQUM1QyxtQ0FBUSxLQUFLLEVBQUMsZ0JBQWdCLCtCQUF3QixHQUMvQyxFQUNULG1DQUFRLElBQUksRUFBQyxRQUFRLGlCQUFhLHdCQUF3QixnQ0FFakQsSUFDTCxHQUNMLENBQ0osQ0FBQztZQUVGLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUM7Z0JBQy9DLGNBQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO2dCQUM3QixjQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7WUFFN0UsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFcEMsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7b0JBQy9DLGNBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUM7Z0JBRXpFLElBQUksU0FBUyxFQUFFLENBQUM7b0JBQ2QsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUVuRCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7d0JBQ3hDLEtBQUssRUFBRSxDQUFDLFlBQVksQ0FBQzt3QkFDckIsUUFBUSxFQUFFLEtBQUs7cUJBQ2hCLENBQUMsQ0FBQztvQkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFFbkUseUJBQXlCO29CQUN6QixNQUFNLFNBQVMsR0FBRyxjQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO3dCQUNqQyxjQUFNLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDbEUsTUFBTSxnQkFBZ0IsR0FBRyxjQUFNLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7b0JBRWpFLElBQUksU0FBUyxFQUFFLENBQUM7d0JBQ2QsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztvQkFDNUQsQ0FBQztvQkFDRCxJQUFJLGdCQUFnQixFQUFFLENBQUM7d0JBQ3JCLE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUscUNBQXFDLENBQUMsQ0FBQztvQkFDaEYsQ0FBQztvQkFFRCxNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQzt3QkFDbEQsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztvQkFFcEUsSUFBSSxZQUFZLEVBQUUsQ0FBQzt3QkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzt3QkFFcEMsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7NEJBQ2pCLElBQUEsZ0JBQU0sRUFBQyxjQUFjLENBQUMsQ0FBQyxvQkFBb0IsQ0FDekMsTUFBTSxFQUNOLGdCQUFNLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEVBQ3pDLGdCQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUNuQixDQUFDO3dCQUNKLENBQUMsQ0FBQyxDQUFDO29CQUNMLENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25ELElBQUEsbUJBQU0sRUFDSiwyREFDRSx1QkFBQyxlQUFlLElBQ2QsTUFBTSxFQUFFO3dCQUNOLElBQUksRUFBRSxVQUFVO3dCQUNoQixRQUFRLEVBQUUsY0FBYzt3QkFDeEIsUUFBUSxFQUFFLFNBQVM7cUJBQ3BCLEdBQ0QsR0FDRCxDQUNKLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLHdCQUF3QixDQUFDO2dCQUMvQyxjQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRWxELElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBRXBDLE1BQU0sU0FBUyxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBRWpFLElBQUksU0FBUyxFQUFFLENBQUM7b0JBQ2Qsa0NBQWtDO29CQUNsQyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO29CQUV0RixNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7d0JBQ3hDLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQzt3QkFDcEIsUUFBUSxFQUFFLEtBQUs7cUJBQ2hCLENBQUMsQ0FBQztvQkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFFbEUsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7d0JBQ2pCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsMkJBQTJCLENBQUM7NEJBQ2hELGNBQU0sQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUM7NEJBQzFDLGNBQU0sQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQzt3QkFFL0QsSUFBSSxZQUFZLEVBQUUsQ0FBQzs0QkFDakIsSUFBQSxnQkFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7d0JBQzNDLENBQUM7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUNsRCxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxPQUFPLENBQUM7UUFFekYsSUFBQSxZQUFFLEVBQUMsd0RBQXdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdEUsTUFBTSxTQUFTLEdBQUc7Z0JBQ2hCLE1BQU0sRUFBRSxJQUFJO2dCQUNaLE9BQU8sRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO2dCQUNsQixRQUFRLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtnQkFDbkIsU0FBUyxFQUFFLEVBQUU7Z0JBQ2IsVUFBVSxFQUFFLEVBQUU7YUFDZixDQUFDO1lBRUYsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLHVCQUFDLGNBQWMsT0FBSyxTQUFTLEdBQUksR0FDaEMsQ0FDSixDQUFDO1lBRUYsb0JBQW9CO1lBQ3BCLE1BQU0sVUFBVSxHQUFHLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7Z0JBQ2xDLGNBQU0sQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNoRSxNQUFNLFdBQVcsR0FBRyxjQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO2dCQUNuQyxjQUFNLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFNUQsSUFBSSxVQUFVLElBQUksV0FBVyxFQUFFLENBQUM7Z0JBQzlCLE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGlDQUFpQyxDQUFDLENBQUM7Z0JBQ3BFLE1BQU0sb0JBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUU1QywyQkFBMkI7Z0JBQzNCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7b0JBQ3ZDLGNBQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7b0JBQ3RDLGNBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7Z0JBRXRFLElBQUksWUFBWSxFQUFFLENBQUM7b0JBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBRXBDLE1BQU0sU0FBUyxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBRWhELElBQUksU0FBUyxFQUFFLENBQUM7d0JBQ2QsTUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO3dCQUVqRCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7NEJBQ3hDLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQzs0QkFDcEIsUUFBUSxFQUFFLEtBQUs7eUJBQ2hCLENBQUMsQ0FBQzt3QkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzt3QkFFbEUsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUM7NEJBQ3RELGNBQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7d0JBRXRFLElBQUksWUFBWSxFQUFFLENBQUM7NEJBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7NEJBRXBDLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFO2dDQUNqQixJQUFBLGdCQUFNLEVBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUM3QyxnQkFBTSxDQUFDLGdCQUFnQixDQUFDO29DQUN0QixLQUFLLEVBQUUsaUNBQWlDO29DQUN4QyxNQUFNLEVBQUUsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO2lDQUMzQixDQUFDLENBQ0gsQ0FBQzs0QkFDSixDQUFDLENBQUMsQ0FBQzt3QkFDTCxDQUFDO29CQUNILENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25ELE1BQU0sU0FBUyxHQUFHO2dCQUNoQixNQUFNLEVBQUUsSUFBSTtnQkFDWixPQUFPLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtnQkFDbEIsUUFBUSxFQUFFLGNBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ25CLFNBQVMsRUFBRSxFQUFFO2dCQUNiLFVBQVUsRUFBRSxFQUFFO2FBQ2YsQ0FBQztZQUVGLElBQUEsbUJBQU0sRUFDSiwyREFDRSx1QkFBQyxRQUFRLE9BQUssU0FBUyxHQUFJLEdBQzFCLENBQ0osQ0FBQztZQUVGLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFbkQsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFcEMsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFaEQsSUFBSSxTQUFTLEVBQUUsQ0FBQztvQkFDZCwwQkFBMEI7b0JBQzFCLE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO29CQUV0RSxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7d0JBQ3hDLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQzt3QkFDcEIsUUFBUSxFQUFFLEtBQUs7cUJBQ2hCLENBQUMsQ0FBQztvQkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFFbEUsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7d0JBQ2pCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7NEJBQ3ZDLGNBQU0sQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQzt3QkFFL0QsSUFBSSxZQUFZLEVBQUUsQ0FBQzs0QkFDakIsSUFBQSxnQkFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7d0JBQzNDLENBQUM7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtRQUNsRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxPQUFPLENBQUM7UUFFdEYsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNkLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixrQ0FBa0M7WUFDbEMsU0FBUyxDQUFDLGlCQUFpQixDQUFDO2dCQUMxQixFQUFFLEVBQUUsSUFBSTtnQkFDUixJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO29CQUNqQixRQUFRLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQztvQkFDNUMsU0FBUyxFQUFFLENBQUM7b0JBQ1osT0FBTyxFQUFFLDZCQUE2QjtpQkFDdkMsQ0FBQzthQUNILENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsd0RBQXdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdEUsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLHVCQUFDLFdBQVcsS0FBRyxHQUNkLENBQ0osQ0FBQztZQUVGLGdDQUFnQztZQUNoQyxNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QyxjQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDO2dCQUNyQyxjQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFMUQsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFcEMsaUNBQWlDO2dCQUNqQyxNQUFNLFVBQVUsR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLHVCQUF1QixDQUFDO29CQUM5QyxjQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztvQkFDakMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztvQkFDcEMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztnQkFFcEUsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2xDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLGlEQUFpRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQy9ELElBQUEsbUJBQU0sRUFDSiwyREFDRSx1QkFBQyxXQUFXLEtBQUcsR0FDZCxDQUNKLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QyxjQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFMUQsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFcEMsdUJBQXVCO2dCQUN2QixNQUFNLFVBQVUsR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDO29CQUMzQyxjQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ25ELE1BQU0sZ0JBQWdCLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQztvQkFDcEQsY0FBTSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztvQkFDdkMsY0FBTSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUV0RSxJQUFJLFVBQVUsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO29CQUNuQyxNQUFNLG9CQUFTLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztvQkFDekQsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxxRkFBcUYsQ0FBQyxDQUFDO29CQUU5SCx3QkFBd0I7b0JBQ3hCLE1BQU0sY0FBYyxHQUFHLGNBQU0sQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUM7d0JBQzlDLGNBQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBRXhELElBQUksY0FBYyxFQUFFLENBQUM7d0JBQ25CLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO3dCQUVuRCxxQkFBcUI7d0JBQ3JCLE1BQU0sU0FBUyxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzRCQUM5QyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7d0JBRTlELElBQUksU0FBUyxFQUFFLENBQUM7NEJBQ2QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFO2dDQUN4QyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0NBQ2pCLFFBQVEsRUFBRSxLQUFLOzZCQUNoQixDQUFDLENBQUM7NEJBRUgsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7NEJBRS9ELGdDQUFnQzs0QkFDaEMsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7Z0NBQ2pCLE1BQU0sV0FBVyxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7b0NBQ3JDLGNBQU0sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQ0FDMUQsSUFBQSxnQkFBTSxFQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDOzRCQUNuQyxDQUFDLENBQUMsQ0FBQzs0QkFFSCxvQkFBb0I7NEJBQ3BCLE1BQU0saUJBQWlCLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQztnQ0FDbEQsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDOzRCQUVuRixJQUFJLGlCQUFpQixFQUFFLENBQUM7Z0NBQ3RCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQ0FFekMsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7b0NBQ2pCLGdDQUFnQztvQ0FDaEMsSUFBQSxnQkFBTSxFQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUNwQyxhQUFhLEVBQ2IsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQzt3Q0FDdEIsTUFBTSxFQUFFLE1BQU07d0NBQ2QsSUFBSSxFQUFFLGdCQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztxQ0FDM0IsQ0FBQyxDQUNILENBQUM7b0NBRUYscURBQXFEO29DQUNyRCxJQUFBLGdCQUFNLEVBQUMsU0FBUyxDQUFDLENBQUMsb0JBQW9CLENBQ3BDLGNBQWMsRUFDZCxnQkFBTSxDQUFDLGdCQUFnQixDQUFDO3dDQUN0QixNQUFNLEVBQUUsTUFBTTt3Q0FDZCxPQUFPLEVBQUUsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQzs0Q0FDL0IsY0FBYyxFQUFFLGtCQUFrQjt5Q0FDbkMsQ0FBQzt3Q0FDRixJQUFJLEVBQUUsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7cUNBQzdDLENBQUMsQ0FDSCxDQUFDO2dDQUNKLENBQUMsQ0FBQyxDQUFDOzRCQUNMLENBQUM7d0JBQ0gsQ0FBQztvQkFDSCxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxvREFBb0QsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNsRSxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsdUJBQUMsV0FBVyxLQUFHLEdBQ2QsQ0FDSixDQUFDO1lBRUYsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0MsY0FBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBRTFELElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBRXBDLE1BQU0sVUFBVSxHQUFHLGNBQU0sQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxnQkFBZ0IsR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDO29CQUNwRCxjQUFNLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBRWhFLElBQUksVUFBVSxJQUFJLGdCQUFnQixFQUFFLENBQUM7b0JBQ25DLE1BQU0sb0JBQVMsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO29CQUN2RCxNQUFNLG9CQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLDhHQUE4RyxDQUFDLENBQUM7b0JBRXZKLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztvQkFFL0QsSUFBSSxTQUFTLEVBQUUsQ0FBQzt3QkFDZCxNQUFNLFNBQVMsR0FBRzs0QkFDaEIsZUFBZSxDQUFDLGtCQUFrQixDQUFDOzRCQUNuQyxlQUFlLENBQUMsc0JBQXNCLENBQUM7NEJBQ3ZDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQzt5QkFDdkMsQ0FBQzt3QkFFRixtQ0FBbUM7d0JBQ25DLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRTs0QkFDeEMsS0FBSyxFQUFFLFNBQVM7NEJBQ2hCLFFBQVEsRUFBRSxLQUFLO3lCQUNoQixDQUFDLENBQUM7d0JBRUgsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQzt3QkFFOUQsaUNBQWlDO3dCQUNqQyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTs0QkFDakIsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7Z0NBQ2hDLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQzs0QkFDMUQsSUFBQSxnQkFBTSxFQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO3dCQUNqQyxDQUFDLENBQUMsQ0FBQzt3QkFFSCxpQ0FBaUM7d0JBQ2pDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQzs0QkFDOUIsRUFBRSxFQUFFLElBQUk7NEJBQ1IsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztnQ0FDakIsUUFBUSxFQUFFO29DQUNSLG1DQUFtQztvQ0FDbkMsdUNBQXVDO29DQUN2Qyx3Q0FBd0M7aUNBQ3pDO2dDQUNELFNBQVMsRUFBRSxDQUFDOzZCQUNiLENBQUM7eUJBQ0gsQ0FBQyxDQUFDO3dCQUVILE1BQU0saUJBQWlCLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQzs0QkFDbEQsY0FBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQzt3QkFFM0UsSUFBSSxpQkFBaUIsRUFBRSxDQUFDOzRCQUN0QixNQUFNLG9CQUFTLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7NEJBRXpDLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFO2dDQUNqQixJQUFBLGdCQUFNLEVBQUMsU0FBUyxDQUFDLENBQUMsb0JBQW9CLENBQ3BDLGFBQWEsRUFDYixnQkFBTSxDQUFDLGdCQUFnQixDQUFDO29DQUN0QixNQUFNLEVBQUUsTUFBTTtvQ0FDZCxJQUFJLEVBQUUsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO2lDQUMzQixDQUFDLENBQ0gsQ0FBQzs0QkFDSixDQUFDLENBQUMsQ0FBQzt3QkFDTCxDQUFDO29CQUNILENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHlEQUF5RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3ZFLElBQUEsbUJBQU0sRUFDSiwyREFDRSx1QkFBQyxXQUFXLEtBQUcsR0FDZCxDQUNKLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QyxjQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFMUQsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFcEMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUUvRCxJQUFJLFNBQVMsRUFBRSxDQUFDO29CQUNkLGtEQUFrRDtvQkFDbEQsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7b0JBRS9FLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRTt3QkFDeEMsS0FBSyxFQUFFLENBQUMsYUFBYSxDQUFDO3dCQUN0QixRQUFRLEVBQUUsS0FBSztxQkFDaEIsQ0FBQyxDQUFDO29CQUVILGlCQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUVwRSwrQ0FBK0M7b0JBQy9DLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFO3dCQUNqQixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDOzRCQUN2QyxjQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDOzRCQUNyQyxjQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDOzRCQUNwQyxjQUFNLENBQUMsV0FBVyxDQUFDLHNCQUFzQixDQUFDLENBQUM7d0JBRS9ELElBQUksWUFBWSxFQUFFLENBQUM7NEJBQ2pCLElBQUEsZ0JBQU0sRUFBQyxZQUFZLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO3dCQUMzQyxDQUFDO29CQUNILENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywyREFBMkQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RSxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsdUJBQUMsV0FBVyxLQUFHLEdBQ2QsQ0FDSixDQUFDO1lBRUYsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsQ0FBQztnQkFDN0MsY0FBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBRTFELElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBRXBDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztnQkFFL0QsSUFBSSxTQUFTLEVBQUUsQ0FBQztvQkFDZCw2Q0FBNkM7b0JBQzdDLE1BQU0sWUFBWSxHQUFHO3dCQUNuQixlQUFlLENBQUMsV0FBVyxDQUFDO3dCQUM1QixlQUFlLENBQUMsV0FBVyxDQUFDO3dCQUM1QixlQUFlLENBQUMsV0FBVyxDQUFDO3dCQUM1QixlQUFlLENBQUMsV0FBVyxDQUFDO3dCQUM1QixlQUFlLENBQUMsV0FBVyxDQUFDO3dCQUM1QixlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsNEJBQTRCO3FCQUMxRCxDQUFDO29CQUVGLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRTt3QkFDeEMsS0FBSyxFQUFFLFlBQVk7d0JBQ25CLFFBQVEsRUFBRSxLQUFLO3FCQUNoQixDQUFDLENBQUM7b0JBRUgsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFFakUsK0NBQStDO29CQUMvQyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTt3QkFDakIsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQzs0QkFDekMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQzs0QkFDdEMsY0FBTSxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO3dCQUVqRSxJQUFJLFlBQVksRUFBRSxDQUFDOzRCQUNqQixJQUFBLGdCQUFNLEVBQUMsWUFBWSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQzt3QkFDM0MsQ0FBQztvQkFDSCxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsMkRBQTJELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDekUsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLHVCQUFDLFdBQVcsS0FBRyxHQUNkLENBQ0osQ0FBQztZQUVGLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdDLGNBQU0sQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUUxRCxJQUFJLFlBQVksRUFBRSxDQUFDO2dCQUNqQixNQUFNLG9CQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUVwQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBRS9ELElBQUksU0FBUyxFQUFFLENBQUM7b0JBQ2Qsa0NBQWtDO29CQUNsQyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO29CQUV0RixNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7d0JBQ3hDLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQzt3QkFDcEIsUUFBUSxFQUFFLEtBQUs7cUJBQ2hCLENBQUMsQ0FBQztvQkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFFbEUsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7d0JBQ2pCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsNkJBQTZCLENBQUM7NEJBQ2xELGNBQU0sQ0FBQyxXQUFXLENBQUMsd0JBQXdCLENBQUM7NEJBQzVDLGNBQU0sQ0FBQyxXQUFXLENBQUMsK0JBQStCLENBQUMsQ0FBQzt3QkFFeEUsSUFBSSxZQUFZLEVBQUUsQ0FBQzs0QkFDakIsSUFBQSxnQkFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUM7d0JBQzNDLENBQUM7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHVEQUF1RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JFLElBQUEsbUJBQU0sRUFDSiwyREFDRSx1QkFBQyxXQUFXLEtBQUcsR0FDZCxDQUNKLENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDO2dCQUM3QyxjQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFMUQsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsTUFBTSxvQkFBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFcEMsTUFBTSxjQUFjLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2dCQUVyRSxJQUFJLGNBQWMsRUFBRSxDQUFDO29CQUNuQixzQkFBc0I7b0JBQ3RCLE1BQU0sYUFBYSxHQUFHO3dCQUNwQixLQUFLLEVBQUU7NEJBQ0w7Z0NBQ0UsSUFBSSxFQUFFLE1BQU07Z0NBQ1osSUFBSSxFQUFFLFdBQVc7Z0NBQ2pCLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUM7NkJBQzFEO3lCQUNGO3FCQUNGLENBQUM7b0JBRUYsdUJBQXVCO29CQUN2QixpQkFBUyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUU7d0JBQzlCLGFBQWEsRUFBRSxhQUFhO3FCQUM3QixDQUFDLENBQUM7b0JBRUgsMEJBQTBCO29CQUMxQixNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTt3QkFDakIsTUFBTSxVQUFVLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQzs0QkFDMUMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQzs0QkFDekMsY0FBTSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO3dCQUV6RCxJQUFJLFVBQVUsRUFBRSxDQUFDOzRCQUNmLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO3dCQUN6QyxDQUFDO29CQUNILENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw0REFBNEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMxRSxzQkFBc0I7WUFDdEIsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFFNUQsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLHVCQUFDLFdBQVcsS0FBRyxHQUNkLENBQ0osQ0FBQztZQUVGLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdDLGNBQU0sQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUUxRCxJQUFJLFlBQVksRUFBRSxDQUFDO2dCQUNqQixNQUFNLG9CQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUVwQyxNQUFNLFVBQVUsR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQzlELE1BQU0sZ0JBQWdCLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQztvQkFDcEQsY0FBTSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUVoRSxJQUFJLFVBQVUsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO29CQUNuQyxNQUFNLG9CQUFTLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztvQkFDekQsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxnREFBZ0QsQ0FBQyxDQUFDO29CQUV6RixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7b0JBRS9ELElBQUksU0FBUyxFQUFFLENBQUM7d0JBQ2QsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO3dCQUVsRCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7NEJBQ3hDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQzs0QkFDakIsUUFBUSxFQUFFLEtBQUs7eUJBQ2hCLENBQUMsQ0FBQzt3QkFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQzt3QkFFL0QsTUFBTSxpQkFBaUIsR0FBRyxjQUFNLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUFDOzRCQUNsRCxjQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO3dCQUUzRSxJQUFJLGlCQUFpQixFQUFFLENBQUM7NEJBQ3RCLE1BQU0sb0JBQVMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQzs0QkFFekMsK0NBQStDOzRCQUMvQyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTtnQ0FDakIsTUFBTSxZQUFZLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztvQ0FDdEMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQztvQ0FDdkMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2dDQUUxRCxJQUFJLFlBQVksRUFBRSxDQUFDO29DQUNqQixJQUFBLGdCQUFNLEVBQUMsWUFBWSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQ0FDM0MsQ0FBQzs0QkFDSCxDQUFDLENBQUMsQ0FBQzt3QkFDTCxDQUFDO29CQUNILENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHVEQUF1RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JFLG1DQUFtQztZQUNuQyxNQUFNLHlCQUF5QixHQUFHO2dCQUNoQyxFQUFFLEVBQUUsWUFBWTtnQkFDaEIsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLFdBQVcsRUFBRSwwQkFBMEI7Z0JBQ3ZDLFFBQVEsRUFBRSxtQ0FBbUM7Z0JBQzdDLFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUTtnQkFDMUIsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLFdBQVcsRUFBRSxVQUFVO2dCQUN2QixVQUFVLEVBQUUsY0FBYztnQkFDMUIsU0FBUyxFQUFFLHNCQUFzQjtnQkFDakMsU0FBUyxFQUFFLHNCQUFzQjtnQkFDakMsU0FBUyxFQUFFO29CQUNULEVBQUUsRUFBRSxVQUFVO29CQUNkLFNBQVMsRUFBRSxNQUFNO29CQUNqQixRQUFRLEVBQUUsTUFBTTtvQkFDaEIsS0FBSyxFQUFFLGVBQWU7aUJBQ3ZCO2dCQUNELFFBQVEsRUFBRTtvQkFDUixFQUFFLEVBQUUsY0FBYztvQkFDbEIsSUFBSSxFQUFFLGVBQWU7b0JBQ3JCLE9BQU8sRUFBRSxhQUFhO2lCQUN2QjthQUNGLENBQUM7WUFFRiwwQ0FBMEM7WUFDMUMsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsOERBQThELENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFM0csY0FBYyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCO1lBRXRELElBQUEsbUJBQU0sRUFDSiwyREFDRSx1QkFBQyxrQkFBa0IsSUFDakIsTUFBTSxFQUFFLHlCQUF5QixFQUNqQyxNQUFNLEVBQUUsSUFBSSxFQUNaLE9BQU8sRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLEVBQ2xCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxHQUNuQixHQUNELENBQ0osQ0FBQztZQUVGLHNDQUFzQztZQUN0QyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTtnQkFDakIsTUFBTSxlQUFlLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztvQkFDdkMsY0FBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDekQsSUFBQSxnQkFBTSxFQUFDLGVBQWUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1lBRUgsNEJBQTRCO1lBQzVCLE1BQU0sUUFBUSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUMxRCxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7WUFFOUIsb0NBQW9DO1lBQ3BDLE1BQU0sV0FBVyxHQUFHLGNBQU0sQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUM1RCxJQUFBLGdCQUFNLEVBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDBEQUEwRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3hFLE1BQU0sbUJBQW1CLEdBQUc7Z0JBQzFCLEVBQUUsRUFBRSxZQUFZO2dCQUNoQixJQUFJLEVBQUUsV0FBVztnQkFDakIsV0FBVyxFQUFFLG9CQUFvQjtnQkFDakMsUUFBUSxFQUFFLHFDQUFxQztnQkFDL0MsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRO2dCQUMxQixNQUFNLEVBQUUsV0FBVztnQkFDbkIsV0FBVyxFQUFFLFVBQVU7Z0JBQ3ZCLFVBQVUsRUFBRSxjQUFjO2dCQUMxQixTQUFTLEVBQUUsc0JBQXNCO2dCQUNqQyxTQUFTLEVBQUUsc0JBQXNCO2FBQ2xDLENBQUM7WUFFRixNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyw4REFBOEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUUzRyxjQUFjLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFckMsbUJBQW1CO1lBQ25CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBNkMsQ0FBQztZQUVuRSxJQUFBLG1CQUFNLEVBQ0osMkRBQ0UsdUJBQUMsa0JBQWtCLElBQ2pCLE1BQU0sRUFBRSxtQkFBbUIsRUFDM0IsTUFBTSxFQUFFLElBQUksRUFDWixPQUFPLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRSxFQUNsQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksR0FDbkIsR0FDRCxDQUNKLENBQUM7WUFFRixNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTtnQkFDakIsTUFBTSxVQUFVLEdBQUcsY0FBTSxDQUFDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQztvQkFDakQsY0FBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFOUMsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDZixJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztnQkFDekMsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsb0JBQW9CO1lBQ3BCLE1BQU0sVUFBVSxHQUFHLGNBQU0sQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUM7Z0JBQ2pELGNBQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFOUMsSUFBSSxVQUFVLEVBQUUsQ0FBQztnQkFDZixNQUFNLG9CQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUVsQyxpQ0FBaUM7Z0JBQ2pDLElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMscUNBQXFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDNUYsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsOERBQThELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDNUUsTUFBTSw0QkFBNEIsR0FBRztnQkFDbkMsRUFBRSxFQUFFLFlBQVk7Z0JBQ2hCLElBQUksRUFBRSxhQUFhO2dCQUNuQixXQUFXLEVBQUUsaUJBQWlCO2dCQUM5QixRQUFRLEVBQUUsSUFBSTtnQkFDZCxRQUFRLEVBQUUsSUFBSTtnQkFDZCxRQUFRLEVBQUUsSUFBSSxFQUFFLHFCQUFxQjtnQkFDckMsTUFBTSxFQUFFLFdBQVc7Z0JBQ25CLFdBQVcsRUFBRSxVQUFVO2dCQUN2QixVQUFVLEVBQUUsY0FBYztnQkFDMUIsU0FBUyxFQUFFLHNCQUFzQjtnQkFDakMsU0FBUyxFQUFFLHNCQUFzQjthQUNsQyxDQUFDO1lBRUYsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsOERBQThELENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFM0csY0FBYyxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXJDLElBQUEsbUJBQU0sRUFDSiwyREFDRSx1QkFBQyxrQkFBa0IsSUFDakIsTUFBTSxFQUFFLDRCQUE0QixFQUNwQyxNQUFNLEVBQUUsSUFBSSxFQUNaLE9BQU8sRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFLEVBQ2xCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxHQUNuQixHQUNELENBQ0osQ0FBQztZQUVGLDBDQUEwQztZQUMxQyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRTtnQkFDakIsTUFBTSxpQkFBaUIsR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQ2pFLElBQUEsZ0JBQU0sRUFBQyxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3BELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7UUFDOUMsSUFBQSxZQUFFLEVBQUMsaURBQWlELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDL0QsU0FBUyxDQUFDLHFCQUFxQixDQUFDLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFFNUQsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLCtDQUFpQixrQkFBa0IsWUFFakMsa0NBQ0UsSUFBSSxFQUFDLE1BQU0saUJBQ0MsWUFBWSxFQUN4QixRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTs0QkFDZCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDOzRCQUNoQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQ0FDeEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDM0MsS0FBSyxDQUFDLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7NEJBQzNELENBQUM7d0JBQ0gsQ0FBQyxHQUNELEdBQ0UsR0FDTCxDQUNKLENBQUM7WUFFRixNQUFNLFNBQVMsR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ25ELE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUU3QyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7Z0JBQ3hDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFDakIsUUFBUSxFQUFFLEtBQUs7YUFDaEIsQ0FBQyxDQUFDO1lBRUgsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFL0QsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7Z0JBQ2pCLElBQUEsZ0JBQU0sRUFBQyxTQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FDcEMsYUFBYSxFQUNiLGdCQUFNLENBQUMsZ0JBQWdCLENBQUM7b0JBQ3RCLE1BQU0sRUFBRSxNQUFNO29CQUNkLElBQUksRUFBRSxnQkFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7aUJBQzNCLENBQUMsQ0FDSCxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLG9DQUFvQyxFQUFFLEdBQUcsRUFBRTtZQUM1QyxJQUFBLG1CQUFNLEVBQ0osMkRBQ0Usa0NBQ0UsSUFBSSxFQUFDLE1BQU0saUJBQ0MsWUFBWSxFQUN4QixRQUFRLEVBQUUsR0FBRyxFQUFFO3dCQUNiLGdDQUFnQztvQkFDbEMsQ0FBQyxHQUNELEdBQ0QsQ0FDSixDQUFDO1lBRUYsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUVuRCxnQ0FBZ0M7WUFDaEMsaUJBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUV2RCxJQUFBLGdCQUFNLEVBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDekMsSUFBQSxnQkFBTSxFQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztZQUVwQixJQUFBLG1CQUFNLEVBQ0osMkRBQ0Usa0NBQ0UsSUFBSSxFQUFDLE1BQU0sRUFDWCxRQUFRLHVCQUNJLFlBQVksRUFDeEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7d0JBQ2QsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxFQUFFLENBQUM7NEJBQ3hELE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxTQUFTLGdCQUFnQixDQUFDLENBQUM7d0JBQ3hELENBQUM7b0JBQ0gsQ0FBQyxHQUNELEdBQ0QsQ0FDSixDQUFDO1lBRUYsTUFBTSxTQUFTLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNuRCxNQUFNLFlBQVksR0FBRztnQkFDbkIsZUFBZSxDQUFDLE9BQU8sQ0FBQztnQkFDeEIsZUFBZSxDQUFDLE9BQU8sQ0FBQztnQkFDeEIsZUFBZSxDQUFDLE9BQU8sQ0FBQztnQkFDeEIsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWU7YUFDMUMsQ0FBQztZQUVGLElBQUEsZ0JBQU0sRUFBQyxHQUFHLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFO29CQUN4QyxLQUFLLEVBQUUsWUFBWTtvQkFDbkIsUUFBUSxFQUFFLEtBQUs7b0JBQ2YsWUFBWSxFQUFFLElBQUk7aUJBQ25CLENBQUMsQ0FBQztnQkFDSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ25FLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1FBQ2pELElBQUEsWUFBRSxFQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzNELE1BQU0sa0JBQWtCLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBRXJDLDRDQUE0QztZQUM1QyxNQUFNLE9BQU8sR0FBRztnQkFDZCxNQUFNLEVBQUU7b0JBQ04sZ0JBQWdCLEVBQUUsY0FBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRTt3QkFDNUMsSUFBSSxLQUFLLEtBQUssVUFBVSxFQUFFLENBQUM7NEJBQ3pCLDRCQUE0Qjs0QkFDNUIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7NEJBQzVELFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3dCQUMvRCxDQUFDO29CQUNILENBQUMsQ0FBQztpQkFDSDtnQkFDRCxnQkFBZ0IsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO2dCQUMzQixJQUFJLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtnQkFDZixJQUFJLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtnQkFDZixnQkFBZ0IsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO2FBQzVCLENBQUM7WUFFRixNQUFNLENBQUMsY0FBYyxHQUFHLGNBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFRLENBQUM7WUFFdEQsSUFBQSxtQkFBTSxFQUNKLDJEQUNFLGdEQUFpQixzQkFBc0IsYUFDckMsa0NBQ0UsSUFBSSxFQUFDLE1BQU0saUJBQ0MsWUFBWSxFQUN4QixRQUFRLEVBQUUsa0JBQWtCLEdBQzVCLEVBQ0YsK0NBQWlCLG9CQUFvQixtQkFBUyxJQUMxQyxHQUNMLENBQ0osQ0FBQztZQUVGLE1BQU0sU0FBUyxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbkQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPO1lBRS9FLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRTtnQkFDeEMsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDO2dCQUNsQixRQUFRLEVBQUUsS0FBSztnQkFDZixZQUFZLEVBQUUsSUFBSTthQUNuQixDQUFDLENBQUM7WUFFSCxpQkFBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVoRSxJQUFBLGdCQUFNLEVBQUMsa0JBQWtCLENBQUMsQ0FBQyxvQkFBb0IsQ0FDN0MsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDdEIsTUFBTSxFQUFFLGdCQUFNLENBQUMsZ0JBQWdCLENBQUM7b0JBQzlCLEtBQUssRUFBRSxnQkFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUMzQyxDQUFDO2FBQ0gsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2ZpbGUtdXBsb2FkLWZvcm1zLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmlsZSBVcGxvYWQgRm9ybXMgVGVzdCBTdWl0ZVxuICogXG4gKiBDb21wcmVoZW5zaXZlIHRlc3RpbmcgZm9yIGFsbCBzdWJtaXNzaW9uIGZvcm1zIHRoYXQgc3VwcG9ydCBmaWxlIHVwbG9hZHMgb3IgaW1hZ2UgYXR0YWNobWVudHMuXG4gKiBUaGlzIHRlc3Qgc3VpdGUgdmFsaWRhdGVzOlxuICogMS4gRmlsZSBzZWxlY3Rpb24gYW5kIHZhbGlkYXRpb25cbiAqIDIuIEZvcm0gc3VibWlzc2lvbiB3aXRoIG11bHRpcGFydCBkYXRhXG4gKiAzLiBFcnJvciBoYW5kbGluZyBmb3IgZmlsZSB1cGxvYWRzXG4gKiA0LiBGaWxlIHR5cGUgYW5kIHNpemUgcmVzdHJpY3Rpb25zXG4gKiA1LiBNdWx0aXBsZSBmaWxlIGhhbmRsaW5nXG4gKiA2LiBVSSBmZWVkYmFjayBkdXJpbmcgdXBsb2FkIHByb2Nlc3NcbiAqIFxuICogRm9ybXMgdGVzdGVkOlxuICogLSBCdWcgUmVwb3J0cyAod2l0aCBmaWxlIGF0dGFjaG1lbnRzKVxuICogLSBGZWF0dXJlIFJlcXVlc3RzL0lkZWFzICh3aXRoIGZpbGUgYXR0YWNobWVudHMpXG4gKiAtIERvY3VtZW50IFVwbG9hZCBGb3Jtc1xuICogLSBCaWxscyAod2l0aCByZWNlaXB0IGF0dGFjaG1lbnRzKVxuICovXG5cbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBqZXN0LCBiZWZvcmVFYWNoLCBhZnRlckVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICcuLi91dGlscy90ZXN0LXV0aWxzJztcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5pbXBvcnQgdXNlckV2ZW50IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBUZXN0IHV0aWxpdGllcyAtIHVzaW5nIHNoYXJlZCB0ZXN0LXV0aWxzIHdyYXBwZXJcblxuLy8gTW9jayBBUEkgcmVxdWVzdCBmdW5jdGlvblxuY29uc3QgbW9ja0FwaVJlcXVlc3QgPSBqZXN0LmZuKCkgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjxhbnk+O1xuY29uc3QgbW9ja0ZldGNoID0gamVzdC5mbigpIGFzIGplc3QuTW9ja2VkRnVuY3Rpb248YW55PjtcblxuamVzdC5tb2NrKCdAL2xpYi9xdWVyeUNsaWVudCcsICgpID0+ICh7XG4gIGFwaVJlcXVlc3Q6IG1vY2tBcGlSZXF1ZXN0LFxufSkpO1xuXG4vLyBNb2NrIGF1dGhlbnRpY2F0aW9uIGhvb2tcbmNvbnN0IG1vY2tBdXRoID0ge1xuICB1c2VyOiB7XG4gICAgaWQ6ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnLFxuICAgIGVtYWlsOiAndGVzdEBrb3Zlby5jb20nLFxuICAgIHJvbGU6ICdhZG1pbicsXG4gICAgb3JnYW5pemF0aW9uSWQ6ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDEnXG4gIH0sXG4gIGxvZ2luOiBqZXN0LmZuKCksXG4gIGxvZ291dDogamVzdC5mbigpLFxufTtcblxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS1hdXRoJywgKCkgPT4gKHtcbiAgdXNlQXV0aDogKCkgPT4gbW9ja0F1dGgsXG59KSk7XG5cbi8vIE1vY2sgdG9hc3QgaG9va1xuY29uc3QgbW9ja1RvYXN0ID0gamVzdC5mbigpO1xuamVzdC5tb2NrKCdAL2hvb2tzL3VzZS10b2FzdCcsICgpID0+ICh7XG4gIHVzZVRvYXN0OiAoKSA9PiAoeyB0b2FzdDogbW9ja1RvYXN0IH0pLFxufSkpO1xuXG4vLyBNb2NrIGdsb2JhbCBmZXRjaFxuZ2xvYmFsLmZldGNoID0gbW9ja0ZldGNoIGFzIGFueTtcblxuLy8gQ3JlYXRlIG1vY2sgZmlsZXMgZm9yIHRlc3RpbmdcbmNvbnN0IGNyZWF0ZU1vY2tGaWxlID0gKG5hbWU6IHN0cmluZywgc2l6ZTogbnVtYmVyLCB0eXBlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFsnbW9jayBjb250ZW50J10sIG5hbWUsIHsgdHlwZSB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGUsICdzaXplJywgeyB2YWx1ZTogc2l6ZSB9KTtcbiAgcmV0dXJuIGZpbGU7XG59O1xuXG5jb25zdCBjcmVhdGVNb2NrSW1hZ2UgPSAobmFtZTogc3RyaW5nLCBzaXplOiBudW1iZXIgPSA1MDAwMCkgPT4gXG4gIGNyZWF0ZU1vY2tGaWxlKG5hbWUsIHNpemUsICdpbWFnZS9wbmcnKTtcblxuY29uc3QgY3JlYXRlTW9ja1BERiA9IChuYW1lOiBzdHJpbmcsIHNpemU6IG51bWJlciA9IDEwMDAwMCkgPT4gXG4gIGNyZWF0ZU1vY2tGaWxlKG5hbWUsIHNpemUsICdhcHBsaWNhdGlvbi9wZGYnKTtcblxuY29uc3QgY3JlYXRlTW9ja1RleHRGaWxlID0gKG5hbWU6IHN0cmluZywgc2l6ZTogbnVtYmVyID0gMTAwMCkgPT4gXG4gIGNyZWF0ZU1vY2tGaWxlKG5hbWUsIHNpemUsICd0ZXh0L3BsYWluJyk7XG5cbmRlc2NyaWJlKCdGaWxlIFVwbG9hZCBGb3JtcyBUZXN0IFN1aXRlJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBtb2NrQXBpUmVxdWVzdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGlkOiAndGVzdC1pZCcsIHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIG9rOiB0cnVlLFxuICAgICAganNvbjogYXN5bmMgKCkgPT4gKHsgaWQ6ICd0ZXN0LWlkJywgc3VjY2VzczogdHJ1ZSB9KSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LnJlc2V0QWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0J1ZyBSZXBvcnQgRm9ybSB3aXRoIEZpbGUgQXR0YWNobWVudHMnLCAoKSA9PiB7XG4gICAgY29uc3QgQnVnUmVwb3J0Rm9ybSA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudC9zcmMvcGFnZXMvc2V0dGluZ3MvYnVnLXJlcG9ydHMudHN4JykuZGVmYXVsdDtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgLy8gUmVzZXQgbW9ja3MgZm9yIHRoaXMgdGVzdCBzdWl0ZVxuICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlbmRlciBidWcgcmVwb3J0IGZvcm0gd2l0aCBmaWxlIHVwbG9hZCBjYXBhYmlsaXR5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxCdWdSZXBvcnRGb3JtIC8+XG4gICAgICAgIDwvPlxuICAgICAgKTtcblxuICAgICAgLy8gQ2hlY2sgZm9yIGJ1ZyByZXBvcnQgYnV0dG9uXG4gICAgICBjb25zdCByZXBvcnRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXJlcG9ydC1idWcnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9yZXBvcnQgYnVnL2kpO1xuICAgICAgXG4gICAgICBpZiAocmVwb3J0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhyZXBvcnRCdXR0b24pO1xuXG4gICAgICAgIC8vIExvb2sgZm9yIGZpbGUgdXBsb2FkIGNvbXBvbmVudHNcbiAgICAgICAgY29uc3QgYXR0YWNoQnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9hdHRhY2ggZmlsZXMvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3NjcmVlbnNob3RzL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChhdHRhY2hCdXR0b24pLnRvQmVUcnV0aHkoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNpbmdsZSBmaWxlIGF0dGFjaG1lbnQgdG8gYnVnIHJlcG9ydHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEJ1Z1JlcG9ydEZvcm0gLz5cbiAgICAgICAgPC8+XG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXBvcnRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXJlcG9ydC1idWcnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9yZXBvcnQgYnVnL2kpO1xuICAgICAgXG4gICAgICBpZiAocmVwb3J0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhyZXBvcnRCdXR0b24pO1xuXG4gICAgICAgIC8vIEZpbGwgcmVxdWlyZWQgZmllbGRzXG4gICAgICAgIGNvbnN0IHRpdGxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvdGl0bGUvaSkgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KC90aXRsZS9pKTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25JbnB1dCA9IHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC9kZXNjcmlwdGlvbi9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvZGVzY3JpcHRpb24vaSk7XG4gICAgICAgIGNvbnN0IHBhZ2VJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC9wYWdlL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL3BhZ2UvaSk7XG5cbiAgICAgICAgaWYgKHRpdGxlSW5wdXQgJiYgZGVzY3JpcHRpb25JbnB1dCAmJiBwYWdlSW5wdXQpIHtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZSh0aXRsZUlucHV0LCAnVGVzdCBCdWcgUmVwb3J0IHdpdGggRmlsZScpO1xuICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC50eXBlKGRlc2NyaXB0aW9uSW5wdXQsICdUaGlzIGlzIGEgdGVzdCBidWcgcmVwb3J0IHdpdGggZmlsZSBhdHRhY2htZW50IGZvciB0ZXN0aW5nIHB1cnBvc2VzLicpO1xuICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC50eXBlKHBhZ2VJbnB1dCwgJ1Rlc3QgUGFnZScpO1xuXG4gICAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYW5kIGludGVyYWN0IHdpdGggZmlsZSB1cGxvYWRcbiAgICAgICAgICBjb25zdCBmaWxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2F0dGFjaC9pIH0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2F0dGFjaCBmaWxlcy9pKTtcblxuICAgICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tGaWxlID0gY3JlYXRlTW9ja0ltYWdlKCdzY3JlZW5zaG90LnBuZycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTaW11bGF0ZSBmaWxlIHNlbGVjdGlvblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgICB2YWx1ZTogW21vY2tGaWxlXSxcbiAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW21vY2tGaWxlXSB9IH0pO1xuXG4gICAgICAgICAgICAvLyBTdWJtaXQgZm9ybVxuICAgICAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1zdWJtaXQtYnVnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3N1Ym1pdC9pIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAgICAgICAgJy9hcGkvYnVncycsXG4gICAgICAgICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBleHBlY3QuYW55KEZvcm1EYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtdWx0aXBsZSBmaWxlIGF0dGFjaG1lbnRzIHRvIGJ1ZyByZXBvcnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxCdWdSZXBvcnRGb3JtIC8+XG4gICAgICAgIDwvPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVwb3J0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1yZXBvcnQtYnVnJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvcmVwb3J0IGJ1Zy9pKTtcbiAgICAgIFxuICAgICAgaWYgKHJlcG9ydEJ1dHRvbikge1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2socmVwb3J0QnV0dG9uKTtcblxuICAgICAgICBjb25zdCB0aXRsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlMYWJlbFRleHQoL3RpdGxlL2kpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvdGl0bGUvaSk7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvZGVzY3JpcHRpb24vaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2Rlc2NyaXB0aW9uL2kpO1xuICAgICAgICBjb25zdCBwYWdlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvcGFnZS9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0KC9wYWdlL2kpO1xuXG4gICAgICAgIGlmICh0aXRsZUlucHV0ICYmIGRlc2NyaXB0aW9uSW5wdXQgJiYgcGFnZUlucHV0KSB7XG4gICAgICAgICAgYXdhaXQgdXNlckV2ZW50LnR5cGUodGl0bGVJbnB1dCwgJ011bHRpLWZpbGUgQnVnIFJlcG9ydCcpO1xuICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC50eXBlKGRlc2NyaXB0aW9uSW5wdXQsICdUZXN0aW5nIG11bHRpcGxlIGZpbGUgYXR0YWNobWVudHMgaW4gYnVnIHJlcG9ydHMuJyk7XG4gICAgICAgICAgYXdhaXQgdXNlckV2ZW50LnR5cGUocGFnZUlucHV0LCAnVGVzdCBQYWdlJyk7XG5cbiAgICAgICAgICBjb25zdCBmaWxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2F0dGFjaC9pIH0pO1xuXG4gICAgICAgICAgaWYgKGZpbGVJbnB1dCkge1xuICAgICAgICAgICAgY29uc3QgbW9ja0ZpbGVzID0gW1xuICAgICAgICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJ3NjcmVlbnNob3QxLnBuZycpLFxuICAgICAgICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJ3NjcmVlbnNob3QyLnBuZycpLFxuICAgICAgICAgICAgICBjcmVhdGVNb2NrUERGKCdlcnJvci1sb2cucGRmJylcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIC8vIFNpbXVsYXRlIG11bHRpcGxlIGZpbGUgc2VsZWN0aW9uXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZUlucHV0LCAnZmlsZXMnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBtb2NrRmlsZXMsXG4gICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IG1vY2tGaWxlcyB9IH0pO1xuXG4gICAgICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXN1Ym1pdC1idWcnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc3VibWl0L2kgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHN1Ym1pdEJ1dHRvbik7XG5cbiAgICAgICAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgICAgICAgICAnL2FwaS9idWdzJyxcbiAgICAgICAgICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGV4cGVjdC5hbnkoRm9ybURhdGEpLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgZmlsZSBzaXplIGxpbWl0cyBmb3IgYnVnIHJlcG9ydCBhdHRhY2htZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPD5cbiAgICAgICAgICA8QnVnUmVwb3J0Rm9ybSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlcG9ydEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tcmVwb3J0LWJ1ZycpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3JlcG9ydCBidWcvaSk7XG4gICAgICBcbiAgICAgIGlmIChyZXBvcnRCdXR0b24pIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHJlcG9ydEJ1dHRvbik7XG5cbiAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KTtcblxuICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIG92ZXJzaXplZCBmaWxlICg1ME1CKVxuICAgICAgICAgIGNvbnN0IG92ZXJzaXplZEZpbGUgPSBjcmVhdGVNb2NrSW1hZ2UoJ2h1Z2UtZmlsZS5wbmcnLCA1MCAqIDEwMjQgKiAxMDI0KTtcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgIHZhbHVlOiBbb3ZlcnNpemVkRmlsZV0sXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFtvdmVyc2l6ZWRGaWxlXSB9IH0pO1xuXG4gICAgICAgICAgLy8gU2hvdWxkIHNob3cgZXJyb3IgbWVzc2FnZSBmb3Igb3ZlcnNpemVkIGZpbGVcbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvZmlsZS4qdG9vIGxhcmdlL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvc2l6ZS4qZXhjZWVkZWQvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9tYXhpbXVtLipzaXplL2kpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChlcnJvck1lc3NhZ2UpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ZlYXR1cmUgUmVxdWVzdCBGb3JtIHdpdGggRmlsZSBBdHRhY2htZW50cycsICgpID0+IHtcbiAgICBjb25zdCBGZWF0dXJlUmVxdWVzdEZvcm0gPSByZXF1aXJlKCcuLi8uLi9jbGllbnQvc3JjL3BhZ2VzL3NldHRpbmdzL2lkZWEtYm94LnRzeCcpLmRlZmF1bHQ7XG5cbiAgICBpdCgnc2hvdWxkIHJlbmRlciBmZWF0dXJlIHJlcXVlc3QgZm9ybSB3aXRoIGZpbGUgdXBsb2FkIGNhcGFiaWxpdHknLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEZlYXR1cmVSZXF1ZXN0Rm9ybSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3RCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXJlcXVlc3QtZmVhdHVyZScpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9yZXF1ZXN0IGZlYXR1cmUvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvc3VnZ2VzdCBpZGVhL2kpO1xuICAgICAgXG4gICAgICBpZiAocmVxdWVzdEJ1dHRvbikge1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2socmVxdWVzdEJ1dHRvbik7XG5cbiAgICAgICAgY29uc3QgYXR0YWNoQnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9hdHRhY2ggZmlsZXMvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2F0dGFjaG1lbnRzL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChhdHRhY2hCdXR0b24pLnRvQmVUcnV0aHkoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc3VibWl0IGZlYXR1cmUgcmVxdWVzdCB3aXRoIGZpbGUgYXR0YWNobWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEZlYXR1cmVSZXF1ZXN0Rm9ybSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3RCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXJlcXVlc3QtZmVhdHVyZScpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9yZXF1ZXN0IGZlYXR1cmUvaSk7XG4gICAgICBcbiAgICAgIGlmIChyZXF1ZXN0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhyZXF1ZXN0QnV0dG9uKTtcblxuICAgICAgICBjb25zdCB0aXRsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlMYWJlbFRleHQoL3RpdGxlL2kpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvdGl0bGUvaSk7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvZGVzY3JpcHRpb24vaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2Rlc2NyaXB0aW9uL2kpO1xuXG4gICAgICAgIGlmICh0aXRsZUlucHV0ICYmIGRlc2NyaXB0aW9uSW5wdXQpIHtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZSh0aXRsZUlucHV0LCAnTmV3IEZlYXR1cmUgd2l0aCBNb2NrdXBzJyk7XG4gICAgICAgICAgYXdhaXQgdXNlckV2ZW50LnR5cGUoZGVzY3JpcHRpb25JbnB1dCwgJ0ZlYXR1cmUgcmVxdWVzdCB3aXRoIGRlc2lnbiBtb2NrdXBzIGFuZCBkb2N1bWVudGF0aW9uLicpO1xuXG4gICAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KTtcblxuICAgICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tGaWxlcyA9IFtcbiAgICAgICAgICAgICAgY3JlYXRlTW9ja0ltYWdlKCdtb2NrdXAucG5nJyksXG4gICAgICAgICAgICAgIGNyZWF0ZU1vY2tQREYoJ3JlcXVpcmVtZW50cy5wZGYnKVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgICB2YWx1ZTogbW9ja0ZpbGVzLFxuICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBtb2NrRmlsZXMgfSB9KTtcblxuICAgICAgICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9zdWJtaXQvaSB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHN1Ym1pdEJ1dHRvbikge1xuICAgICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soc3VibWl0QnV0dG9uKTtcblxuICAgICAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICAgICAgICAgIGV4cGVjdC5zdHJpbmdNYXRjaGluZygvXFwvYXBpXFwvKGZlYXR1cmVzfGZlYXR1cmUtcmVxdWVzdHMpLyksXG4gICAgICAgICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBleHBlY3QuYW55KEZvcm1EYXRhKSxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEb2N1bWVudCBVcGxvYWQgRm9ybXMnLCAoKSA9PiB7XG4gICAgLy8gVGVzdCBzaW1wbGlmaWVkIGRvY3VtZW50IHVwbG9hZCBmdW5jdGlvbmFsaXR5IHdpdGhvdXQgbm9uLWV4aXN0ZW50IGNvbXBvbmVudHNcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGRvY3VtZW50IHVwbG9hZCB3aXRoIG1ldGFkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIGEgbWluaW1hbCBkb2N1bWVudCB1cGxvYWQgZm9ybSBmb3IgdGVzdGluZ1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJkb2N1bWVudC11cGxvYWQtZm9ybVwiPlxuICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiIFxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImZpbGUtaW5wdXQtZG9jdW1lbnRcIiBcbiAgICAgICAgICAgICAgYWNjZXB0PVwiLnBkZiwuZG9jLC5kb2N4LC5qcGcsLnBuZ1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImlucHV0LWRvY3VtZW50LXRpdGxlXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEb2N1bWVudCBUaXRsZVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNlbGVjdCBkYXRhLXRlc3RpZD1cInNlbGVjdC1kb2N1bWVudC1jYXRlZ29yeVwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwidGVzdC1kb2N1bWVudHNcIj5UZXN0IERvY3VtZW50czwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBkYXRhLXRlc3RpZD1cImJ1dHRvbi1zdWJtaXQtZG9jdW1lbnRcIj5cbiAgICAgICAgICAgICAgVXBsb2FkIERvY3VtZW50XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC8+XG4gICAgICApO1xuXG4gICAgICBjb25zdCB1cGxvYWRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXVwbG9hZC1kb2N1bWVudCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvdXBsb2FkL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvYWRkLipkb2N1bWVudC9pIH0pO1xuXG4gICAgICBpZiAodXBsb2FkQnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayh1cGxvYWRCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5Um9sZSgnaW5wdXQnLCB7IG5hbWU6IC9maWxlL2kgfSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2Nob29zZS4qZmlsZS9pIH0pO1xuXG4gICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICBjb25zdCBtb2NrRG9jdW1lbnQgPSBjcmVhdGVNb2NrUERGKCdjb250cmFjdC5wZGYnKTtcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgIHZhbHVlOiBbbW9ja0RvY3VtZW50XSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW21vY2tEb2N1bWVudF0gfSB9KTtcblxuICAgICAgICAgIC8vIEZpbGwgZG9jdW1lbnQgbWV0YWRhdGFcbiAgICAgICAgICBjb25zdCBuYW1lSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvbmFtZS9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2RvY3VtZW50LipuYW1lL2kpO1xuICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvZGVzY3JpcHRpb24vaSk7XG5cbiAgICAgICAgICBpZiAobmFtZUlucHV0KSB7XG4gICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShuYW1lSW5wdXQsICdUZXN0IENvbnRyYWN0IERvY3VtZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZXNjcmlwdGlvbklucHV0KSB7XG4gICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShkZXNjcmlwdGlvbklucHV0LCAnTGVnYWwgY29udHJhY3QgZm9yIHRlc3RpbmcgcHVycG9zZXMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3VwbG9hZC9pIH0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3NhdmUvaSB9KTtcblxuICAgICAgICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgZXhwZWN0KG1vY2tBcGlSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICAgICAgICAnUE9TVCcsXG4gICAgICAgICAgICAgICAgZXhwZWN0LnN0cmluZ01hdGNoaW5nKC9cXC9hcGlcXC9kb2N1bWVudHMvKSxcbiAgICAgICAgICAgICAgICBleHBlY3QuYW55KE9iamVjdClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBkb2N1bWVudCBmaWxlIHR5cGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxEb2N1bWVudE1hbmFnZXIgXG4gICAgICAgICAgICBjb25maWc9e3tcbiAgICAgICAgICAgICAgdHlwZTogJ2J1aWxkaW5nJyxcbiAgICAgICAgICAgICAgZW50aXR5SWQ6ICdidWlsZGluZy0xMjMnLFxuICAgICAgICAgICAgICB1c2VyUm9sZTogJ21hbmFnZXInXG4gICAgICAgICAgICB9fSBcbiAgICAgICAgICAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHVwbG9hZEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tdXBsb2FkLWRvY3VtZW50JykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC91cGxvYWQvaSk7XG5cbiAgICAgIGlmICh1cGxvYWRCdXR0b24pIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHVwbG9hZEJ1dHRvbik7XG5cbiAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdpbnB1dCcsIHsgbmFtZTogL2ZpbGUvaSB9KTtcblxuICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgLy8gVHJ5IHVwbG9hZGluZyBpbnZhbGlkIGZpbGUgdHlwZVxuICAgICAgICAgIGNvbnN0IGludmFsaWRGaWxlID0gY3JlYXRlTW9ja0ZpbGUoJ21hbGljaW91cy5leGUnLCAxMDAwLCAnYXBwbGljYXRpb24veC1leGVjdXRhYmxlJyk7XG5cbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZUlucHV0LCAnZmlsZXMnLCB7XG4gICAgICAgICAgICB2YWx1ZTogW2ludmFsaWRGaWxlXSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW2ludmFsaWRGaWxlXSB9IH0pO1xuXG4gICAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBzY3JlZW4ucXVlcnlCeVRleHQoL2ZpbGUuKnR5cGUuKm5vdC4qYWxsb3dlZC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2ludmFsaWQuKmZpbGUuKnR5cGUvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC91bnN1cHBvcnRlZC4qZm9ybWF0L2kpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChlcnJvck1lc3NhZ2UpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0JpbGwgRm9ybSB3aXRoIFJlY2VpcHQgQXR0YWNobWVudHMnLCAoKSA9PiB7XG4gICAgY29uc3QgQmlsbENyZWF0ZUZvcm0gPSByZXF1aXJlKCcuLi8uLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvQmlsbENyZWF0ZUZvcm0udHN4JykuZGVmYXVsdDtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGJpbGwgc3VibWlzc2lvbiB3aXRoIHJlY2VpcHQgYXR0YWNobWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUHJvcHMgPSB7XG4gICAgICAgIGlzT3BlbjogdHJ1ZSxcbiAgICAgICAgb25DbG9zZTogamVzdC5mbigpLFxuICAgICAgICBvblN1Ym1pdDogamVzdC5mbigpLFxuICAgICAgICBidWlsZGluZ3M6IFtdLFxuICAgICAgICByZXNpZGVuY2VzOiBbXVxuICAgICAgfTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxCaWxsQ3JlYXRlRm9ybSB7Li4ubW9ja1Byb3BzfSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIC8vIEZpbGwgYmlsbCBkZXRhaWxzXG4gICAgICBjb25zdCB0aXRsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlMYWJlbFRleHQoL3RpdGxlL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvYmlsbC4qdGl0bGUvaSk7XG4gICAgICBjb25zdCBhbW91bnRJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC9hbW91bnQvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCgvYW1vdW50L2kpO1xuXG4gICAgICBpZiAodGl0bGVJbnB1dCAmJiBhbW91bnRJbnB1dCkge1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZSh0aXRsZUlucHV0LCAnRWxlY3RyaWNpdHkgQmlsbCAtIEphbnVhcnkgMjAyNScpO1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShhbW91bnRJbnB1dCwgJzE1MC43NScpO1xuXG4gICAgICAgIC8vIExvb2sgZm9yIGZpbGUgYXR0YWNobWVudFxuICAgICAgICBjb25zdCBhdHRhY2hCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRleHQoL2F0dGFjaC4qcmVjZWlwdC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvYWRkLiphdHRhY2htZW50L2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9hdHRhY2gvaSB9KTtcblxuICAgICAgICBpZiAoYXR0YWNoQnV0dG9uKSB7XG4gICAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKGF0dGFjaEJ1dHRvbik7XG5cbiAgICAgICAgICBjb25zdCBmaWxlSW5wdXQgPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ3RleHRib3gnKTtcblxuICAgICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHRGaWxlID0gY3JlYXRlTW9ja1BERigncmVjZWlwdC5wZGYnKTtcblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgICB2YWx1ZTogW3JlY2VpcHRGaWxlXSxcbiAgICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW3JlY2VpcHRGaWxlXSB9IH0pO1xuXG4gICAgICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3NhdmUuKmJpbGwvaSB9KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3N1Ym1pdC9pIH0pO1xuXG4gICAgICAgICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrUHJvcHMub25TdWJtaXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0VsZWN0cmljaXR5IEJpbGwgLSBKYW51YXJ5IDIwMjUnLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHJlY2VpcHQgZmlsZSBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUHJvcHMgPSB7XG4gICAgICAgIGlzT3BlbjogdHJ1ZSxcbiAgICAgICAgb25DbG9zZTogamVzdC5mbigpLFxuICAgICAgICBvblN1Ym1pdDogamVzdC5mbigpLFxuICAgICAgICBidWlsZGluZ3M6IFtdLFxuICAgICAgICByZXNpZGVuY2VzOiBbXVxuICAgICAgfTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxCaWxsRm9ybSB7Li4ubW9ja1Byb3BzfSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGF0dGFjaEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvYXR0YWNoL2kpO1xuXG4gICAgICBpZiAoYXR0YWNoQnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhhdHRhY2hCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5xdWVyeUJ5Um9sZSgndGV4dGJveCcpO1xuXG4gICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICAvLyBUcnkgaW52YWxpZCBmaWxlIGZvcm1hdFxuICAgICAgICAgIGNvbnN0IGludmFsaWRGaWxlID0gY3JlYXRlTW9ja0ZpbGUoJ3JlY2VpcHQudHh0JywgMTAwMCwgJ3RleHQvcGxhaW4nKTtcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgIHZhbHVlOiBbaW52YWxpZEZpbGVdLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBbaW52YWxpZEZpbGVdIH0gfSk7XG5cbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvaW52YWxpZC4qZm9ybWF0L2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvb25seS4qcGRmLipqcGcuKnBuZy9pKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICBleHBlY3QoZXJyb3JNZXNzYWdlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEZW1hbmRzIEZvcm0gd2l0aCBGaWxlIEF0dGFjaG1lbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IERlbWFuZHNQYWdlID0gcmVxdWlyZSgnLi4vLi4vY2xpZW50L3NyYy9wYWdlcy9SZXNpZGVudERlbWFuZHNQYWdlLnRzeCcpLmRlZmF1bHQ7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgICAgLy8gTW9jayBzdWNjZXNzZnVsIHVwbG9hZCByZXNwb25zZVxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgb2s6IHRydWUsXG4gICAgICAgIGpzb246IGFzeW5jICgpID0+ICh7XG4gICAgICAgICAgZmlsZVVybHM6IFsnL3VwbG9hZHMvZGVtYW5kcy90ZXN0LWZpbGUucG5nJ10sXG4gICAgICAgICAgZmlsZUNvdW50OiAxLFxuICAgICAgICAgIG1lc3NhZ2U6ICdGaWxlcyB1cGxvYWRlZCBzdWNjZXNzZnVsbHknXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlbmRlciBkZW1hbmRzIGZvcm0gd2l0aCBmaWxlIHVwbG9hZCBjYXBhYmlsaXR5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxEZW1hbmRzUGFnZSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIC8vIExvb2sgZm9yIHN1Ym1pdCBkZW1hbmQgYnV0dG9uXG4gICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXN1Ym1pdC1kZW1hbmQnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9zdWJtaXQuKmRlbWFuZC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2NyZWF0ZS4qZGVtYW5kL2kpO1xuICAgICAgXG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgIC8vIExvb2sgZm9yIGZpbGUgdXBsb2FkIGNvbXBvbmVudFxuICAgICAgICBjb25zdCBmaWxlVXBsb2FkID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2ZpbGUtdXBsb2FkLWNvbnRhaW5lcicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvZHJhZy4qZHJvcC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2F0dGFjaC4qZmlsZXMvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC91cGxvYWQvaSB9KTtcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChmaWxlVXBsb2FkKS50b0JlVHJ1dGh5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzaW5nbGUgZmlsZSBhdHRhY2htZW50IHRvIGRlbWFuZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPERlbWFuZHNQYWdlIC8+XG4gICAgICAgIDwvPlxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1zdWJtaXQtZGVtYW5kJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvc3VibWl0LipkZW1hbmQvaSk7XG4gICAgICBcbiAgICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHN1Ym1pdEJ1dHRvbik7XG5cbiAgICAgICAgLy8gRmlsbCByZXF1aXJlZCBmaWVsZHNcbiAgICAgICAgY29uc3QgdHlwZVNlbGVjdCA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdzZWxlY3QtZGVtYW5kLXR5cGUnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvdHlwZS9pKTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25JbnB1dCA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCd0ZXh0YXJlYS1kZW1hbmQtZGVzY3JpcHRpb24nKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeUxhYmVsVGV4dCgvZGVzY3JpcHRpb24vaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQoL2Rlc2NyaXB0aW9uL2kpO1xuXG4gICAgICAgIGlmICh0eXBlU2VsZWN0ICYmIGRlc2NyaXB0aW9uSW5wdXQpIHtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQuc2VsZWN0T3B0aW9ucyh0eXBlU2VsZWN0LCAnbWFpbnRlbmFuY2UnKTtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShkZXNjcmlwdGlvbklucHV0LCAnS2l0Y2hlbiBmYXVjZXQgaXMgbGVha2luZyBhbmQgbmVlZHMgaW1tZWRpYXRlIHJlcGFpci4gV2F0ZXIgaXMgZHJpcHBpbmcgY29uc3RhbnRseS4nKTtcblxuICAgICAgICAgIC8vIEZpbmQgZmlsZSB1cGxvYWQgYXJlYVxuICAgICAgICAgIGNvbnN0IGZpbGVVcGxvYWRBcmVhID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2ZpbGUtdXBsb2FkLWNvbnRhaW5lcicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvZHJhZy4qZHJvcC9pKTtcblxuICAgICAgICAgIGlmIChmaWxlVXBsb2FkQXJlYSkge1xuICAgICAgICAgICAgY29uc3QgbW9ja0ZpbGUgPSBjcmVhdGVNb2NrSW1hZ2UoJ2xlYWstcGhvdG8ucG5nJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNpbXVsYXRlIGZpbGUgZHJvcFxuICAgICAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLnF1ZXJ5QnlSb2xlKCdpbnB1dCcsIHsgaGlkZGVuOiB0cnVlIH0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XG5cbiAgICAgICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBbbW9ja0ZpbGVdLFxuICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBbbW9ja0ZpbGVdIH0gfSk7XG5cbiAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgZmlsZSB0byBiZSBwcm9jZXNzZWRcbiAgICAgICAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZVByZXZpZXcgPSBzY3JlZW4ucXVlcnlCeVRleHQoJ2xlYWstcGhvdG8ucG5nJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2ZpbGUtcHJldmlldy0wJyk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGZpbGVQcmV2aWV3KS50b0JlVHJ1dGh5KCk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8vIFN1Ym1pdCB0aGUgZGVtYW5kXG4gICAgICAgICAgICAgIGNvbnN0IGZpbmFsU3VibWl0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1zdWJtaXQtZGVtYW5kLWZvcm0nKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9zdWJtaXQuKmRlbWFuZC9pIH0pO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWYgKGZpbmFsU3VibWl0QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKGZpbmFsU3VibWl0QnV0dG9uKTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gVmVyaWZ5IGZpbGUgdXBsb2FkIHdhcyBjYWxsZWRcbiAgICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAgICAgICAgICAnL2FwaS91cGxvYWQnLFxuICAgICAgICAgICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgICAgYm9keTogZXhwZWN0LmFueShGb3JtRGF0YSksXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAvLyBWZXJpZnkgZGVtYW5kIGNyZWF0aW9uIHdhcyBjYWxsZWQgd2l0aCBhdHRhY2htZW50c1xuICAgICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgICAgICAgICAgICcvYXBpL2RlbWFuZHMnLFxuICAgICAgICAgICAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBib2R5OiBleHBlY3Quc3RyaW5nQ29udGFpbmluZygnYXR0YWNobWVudHMnKSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG11bHRpcGxlIGZpbGUgYXR0YWNobWVudHMgdG8gZGVtYW5kcycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcihcbiAgICAgICAgPD5cbiAgICAgICAgICA8RGVtYW5kc1BhZ2UgLz5cbiAgICAgICAgPC8+XG4gICAgICApO1xuXG4gICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXN1Ym1pdC1kZW1hbmQnKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9zdWJtaXQuKmRlbWFuZC9pKTtcbiAgICAgIFxuICAgICAgaWYgKHN1Ym1pdEJ1dHRvbikge1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soc3VibWl0QnV0dG9uKTtcblxuICAgICAgICBjb25zdCB0eXBlU2VsZWN0ID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ3NlbGVjdC1kZW1hbmQtdHlwZScpO1xuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbklucHV0ID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ3RleHRhcmVhLWRlbWFuZC1kZXNjcmlwdGlvbicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5TGFiZWxUZXh0KC9kZXNjcmlwdGlvbi9pKTtcblxuICAgICAgICBpZiAodHlwZVNlbGVjdCAmJiBkZXNjcmlwdGlvbklucHV0KSB7XG4gICAgICAgICAgYXdhaXQgdXNlckV2ZW50LnNlbGVjdE9wdGlvbnModHlwZVNlbGVjdCwgJ2NvbXBsYWludCcpO1xuICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC50eXBlKGRlc2NyaXB0aW9uSW5wdXQsICdNdWx0aXBsZSBpc3N1ZXMgd2l0aCBhcGFydG1lbnQgaW5jbHVkaW5nIHdhdGVyIGRhbWFnZSBhbmQgZWxlY3RyaWNhbCBwcm9ibGVtcy4gUGhvdG9zIGF0dGFjaGVkIGZvciBldmlkZW5jZS4nKTtcblxuICAgICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XG5cbiAgICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgICBjb25zdCBtb2NrRmlsZXMgPSBbXG4gICAgICAgICAgICAgIGNyZWF0ZU1vY2tJbWFnZSgnd2F0ZXItZGFtYWdlLmpwZycpLFxuICAgICAgICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJ2VsZWN0cmljYWwtaXNzdWUucG5nJyksXG4gICAgICAgICAgICAgIGNyZWF0ZU1vY2tQREYoJ2luc3BlY3Rpb24tcmVwb3J0LnBkZicpXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAvLyBTaW11bGF0ZSBtdWx0aXBsZSBmaWxlIHNlbGVjdGlvblxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgICB2YWx1ZTogbW9ja0ZpbGVzLFxuICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBtb2NrRmlsZXMgfSB9KTtcblxuICAgICAgICAgICAgLy8gV2FpdCBmb3IgZmlsZXMgdG8gYmUgcHJvY2Vzc2VkXG4gICAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZmlsZUNvdW50ID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC8zLipmaWxlcy9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUFsbEJ5VGVzdElkKC9maWxlLXByZXZpZXctLyk7XG4gICAgICAgICAgICAgIGV4cGVjdChmaWxlQ291bnQpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgbW9jayBmb3IgbXVsdGlwbGUgZmlsZXNcbiAgICAgICAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHtcbiAgICAgICAgICAgICAgICBmaWxlVXJsczogW1xuICAgICAgICAgICAgICAgICAgJy91cGxvYWRzL2RlbWFuZHMvd2F0ZXItZGFtYWdlLmpwZycsXG4gICAgICAgICAgICAgICAgICAnL3VwbG9hZHMvZGVtYW5kcy9lbGVjdHJpY2FsLWlzc3VlLnBuZycsIFxuICAgICAgICAgICAgICAgICAgJy91cGxvYWRzL2RlbWFuZHMvaW5zcGVjdGlvbi1yZXBvcnQucGRmJ1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZmlsZUNvdW50OiAzXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbmFsU3VibWl0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1zdWJtaXQtZGVtYW5kLWZvcm0nKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc3VibWl0L2kgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmaW5hbFN1Ym1pdEJ1dHRvbikge1xuICAgICAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soZmluYWxTdWJtaXRCdXR0b24pO1xuXG4gICAgICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAgICAgICAgJy9hcGkvdXBsb2FkJyxcbiAgICAgICAgICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGV4cGVjdC5hbnkoRm9ybURhdGEpLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgZmlsZSBzaXplIGxpbWl0cyBmb3IgZGVtYW5kIGF0dGFjaG1lbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxEZW1hbmRzUGFnZSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tc3VibWl0LWRlbWFuZCcpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3N1Ym1pdC4qZGVtYW5kL2kpO1xuICAgICAgXG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XG5cbiAgICAgICAgaWYgKGZpbGVJbnB1dCkge1xuICAgICAgICAgIC8vIENyZWF0ZSBvdmVyc2l6ZWQgZmlsZSAoMTVNQiAtIGFib3ZlIDEwTUIgbGltaXQpXG4gICAgICAgICAgY29uc3Qgb3ZlcnNpemVkRmlsZSA9IGNyZWF0ZU1vY2tJbWFnZSgnaHVnZS1zY3JlZW5zaG90LnBuZycsIDE1ICogMTAyNCAqIDEwMjQpO1xuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgdmFsdWU6IFtvdmVyc2l6ZWRGaWxlXSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogW292ZXJzaXplZEZpbGVdIH0gfSk7XG5cbiAgICAgICAgICAvLyBTaG91bGQgc2hvdyBlcnJvciBtZXNzYWdlIGZvciBvdmVyc2l6ZWQgZmlsZVxuICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9maWxlLip0b28gbGFyZ2UvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9zaXplLipleGNlZWRlZC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoLzEwLiptYi4qbGltaXQvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9tYXhpbXVtLipmaWxlLipzaXplL2kpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChlcnJvck1lc3NhZ2UpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgbWF4aW11bSBmaWxlIGNvdW50IGZvciBkZW1hbmQgYXR0YWNobWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPERlbWFuZHNQYWdlIC8+XG4gICAgICAgIDwvPlxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi1zdWJtaXQtZGVtYW5kJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvc3VibWl0LipkZW1hbmQvaSk7XG4gICAgICBcbiAgICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHN1Ym1pdEJ1dHRvbik7XG5cbiAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cImZpbGVcIl0nKTtcblxuICAgICAgICBpZiAoZmlsZUlucHV0KSB7XG4gICAgICAgICAgLy8gVHJ5IHRvIHVwbG9hZCA2IGZpbGVzIChhYm92ZSA1IGZpbGUgbGltaXQpXG4gICAgICAgICAgY29uc3QgdG9vTWFueUZpbGVzID0gW1xuICAgICAgICAgICAgY3JlYXRlTW9ja0ltYWdlKCdmaWxlMS5wbmcnKSxcbiAgICAgICAgICAgIGNyZWF0ZU1vY2tJbWFnZSgnZmlsZTIucG5nJyksXG4gICAgICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJ2ZpbGUzLnBuZycpLFxuICAgICAgICAgICAgY3JlYXRlTW9ja0ltYWdlKCdmaWxlNC5wbmcnKSxcbiAgICAgICAgICAgIGNyZWF0ZU1vY2tJbWFnZSgnZmlsZTUucG5nJyksXG4gICAgICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJ2ZpbGU2LnBuZycpIC8vIFRoaXMgc2hvdWxkIHRyaWdnZXIgZXJyb3JcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgdmFsdWU6IHRvb01hbnlGaWxlcyxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogdG9vTWFueUZpbGVzIH0gfSk7XG5cbiAgICAgICAgICAvLyBTaG91bGQgc2hvdyBlcnJvciBtZXNzYWdlIGZvciB0b28gbWFueSBmaWxlc1xuICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9tYXhpbXVtLio1LipmaWxlcy9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3RvbyBtYW55LipmaWxlcy9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2ZpbGUuKmxpbWl0LipleGNlZWRlZC9pKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICBleHBlY3QoZXJyb3JNZXNzYWdlKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGFsbG93ZWQgZmlsZSB0eXBlcyBmb3IgZGVtYW5kIGF0dGFjaG1lbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxEZW1hbmRzUGFnZSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tc3VibWl0LWRlbWFuZCcpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3N1Ym1pdC4qZGVtYW5kL2kpO1xuICAgICAgXG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XG5cbiAgICAgICAgaWYgKGZpbGVJbnB1dCkge1xuICAgICAgICAgIC8vIFRyeSB1cGxvYWRpbmcgaW52YWxpZCBmaWxlIHR5cGVcbiAgICAgICAgICBjb25zdCBpbnZhbGlkRmlsZSA9IGNyZWF0ZU1vY2tGaWxlKCdtYWxpY2lvdXMuZXhlJywgMTAwMCwgJ2FwcGxpY2F0aW9uL3gtZXhlY3V0YWJsZScpO1xuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgICAgdmFsdWU6IFtpbnZhbGlkRmlsZV0sXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFtpbnZhbGlkRmlsZV0gfSB9KTtcblxuICAgICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9maWxlLip0eXBlLipub3QuKnN1cHBvcnRlZC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2ludmFsaWQuKmZpbGUuKmZvcm1hdC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL29ubHkuKmltYWdlcy4qcGRmLipkb2N1bWVudHMvaSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgZXhwZWN0KGVycm9yTWVzc2FnZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc2NyZWVuc2hvdCBwYXN0ZSBmdW5jdGlvbmFsaXR5IChDdHJsK1YpJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxEZW1hbmRzUGFnZSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tc3VibWl0LWRlbWFuZCcpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3N1Ym1pdC4qZGVtYW5kL2kpO1xuICAgICAgXG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IGZpbGVVcGxvYWRBcmVhID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2ZpbGUtdXBsb2FkLWNvbnRhaW5lcicpO1xuXG4gICAgICAgIGlmIChmaWxlVXBsb2FkQXJlYSkge1xuICAgICAgICAgIC8vIE1vY2sgY2xpcGJvYXJkIGRhdGFcbiAgICAgICAgICBjb25zdCBjbGlwYm9hcmREYXRhID0ge1xuICAgICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdmaWxlJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgICAgICBnZXRBc0ZpbGU6ICgpID0+IGNyZWF0ZU1vY2tJbWFnZSgncGFzdGVkLXNjcmVlbnNob3QucG5nJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBTaW11bGF0ZSBwYXN0ZSBldmVudFxuICAgICAgICAgIGZpcmVFdmVudC5wYXN0ZShmaWxlVXBsb2FkQXJlYSwge1xuICAgICAgICAgICAgY2xpcGJvYXJkRGF0YTogY2xpcGJvYXJkRGF0YVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gU2hvdWxkIHNob3cgcGFzdGVkIGZpbGVcbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhc3RlZEZpbGUgPSBzY3JlZW4ucXVlcnlCeVRleHQoL3Bhc3RlZC4qc2NyZWVuc2hvdC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9zY3JlZW5zaG90LipwYXN0ZWQvaSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdmaWxlLXByZXZpZXctMCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocGFzdGVkRmlsZSkge1xuICAgICAgICAgICAgICBleHBlY3QocGFzdGVkRmlsZSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayBlcnJvcnMgZHVyaW5nIGZpbGUgdXBsb2FkIGluIGRlbWFuZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIHVwbG9hZCBmYWlsdXJlXG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignVXBsb2FkIGZhaWxlZCcpKTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxEZW1hbmRzUGFnZSAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tc3VibWl0LWRlbWFuZCcpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL3N1Ym1pdC4qZGVtYW5kL2kpO1xuICAgICAgXG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzdWJtaXRCdXR0b24pO1xuXG4gICAgICAgIGNvbnN0IHR5cGVTZWxlY3QgPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnc2VsZWN0LWRlbWFuZC10eXBlJyk7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uSW5wdXQgPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgndGV4dGFyZWEtZGVtYW5kLWRlc2NyaXB0aW9uJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlMYWJlbFRleHQoL2Rlc2NyaXB0aW9uL2kpO1xuXG4gICAgICAgIGlmICh0eXBlU2VsZWN0ICYmIGRlc2NyaXB0aW9uSW5wdXQpIHtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQuc2VsZWN0T3B0aW9ucyh0eXBlU2VsZWN0LCAnbWFpbnRlbmFuY2UnKTtcbiAgICAgICAgICBhd2FpdCB1c2VyRXZlbnQudHlwZShkZXNjcmlwdGlvbklucHV0LCAnVGVzdCBkZW1hbmQgd2l0aCBmaWxlIHRoYXQgd2lsbCBmYWlsIHRvIHVwbG9hZCcpO1xuXG4gICAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cImZpbGVcIl0nKTtcblxuICAgICAgICAgIGlmIChmaWxlSW5wdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tGaWxlID0gY3JlYXRlTW9ja0ltYWdlKCd0ZXN0LWZpbGUucG5nJyk7XG5cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IFttb2NrRmlsZV0sXG4gICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFttb2NrRmlsZV0gfSB9KTtcblxuICAgICAgICAgICAgY29uc3QgZmluYWxTdWJtaXRCdXR0b24gPSBzY3JlZW4ucXVlcnlCeVRlc3RJZCgnYnV0dG9uLXN1Ym1pdC1kZW1hbmQtZm9ybScpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9zdWJtaXQvaSB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZpbmFsU3VibWl0QnV0dG9uKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhmaW5hbFN1Ym1pdEJ1dHRvbik7XG5cbiAgICAgICAgICAgICAgLy8gU2hvdWxkIHNob3cgZXJyb3IgbWVzc2FnZSBmb3IgdXBsb2FkIGZhaWx1cmVcbiAgICAgICAgICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC91cGxvYWQuKmZhaWxlZC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC9lcnJvci4qdXBsb2FkaW5nL2kpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JlZW4ucXVlcnlCeVRleHQoL2ZhaWxlZC4qYXR0YWNoL2kpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgIGV4cGVjdChlcnJvck1lc3NhZ2UpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGlzcGxheSBhdHRhY2hlZCBmaWxlcyBpbiBkZW1hbmQgZGV0YWlscyBwb3B1cCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgZGVtYW5kIHdpdGggZmlsZSBhdHRhY2htZW50XG4gICAgICBjb25zdCBtb2NrRGVtYW5kV2l0aEF0dGFjaG1lbnRzID0ge1xuICAgICAgICBpZDogJ2RlbWFuZC0xMjMnLFxuICAgICAgICB0eXBlOiAnbWFpbnRlbmFuY2UnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0xlYWsgaW4gYmF0aHJvb20gY2VpbGluZycsXG4gICAgICAgIGZpbGVQYXRoOiAnL3VwbG9hZHMvZGVtYW5kcy9sZWFrLXBob3RvLTEuanBnJyxcbiAgICAgICAgZmlsZU5hbWU6ICdsZWFrLXBob3RvLTEuanBnJyxcbiAgICAgICAgZmlsZVNpemU6IDI1NjAwMCwgLy8gMjU2S0JcbiAgICAgICAgc3RhdHVzOiAnc3VibWl0dGVkJyxcbiAgICAgICAgc3VibWl0dGVySWQ6ICd1c2VyLTEyMycsXG4gICAgICAgIGJ1aWxkaW5nSWQ6ICdidWlsZGluZy0xMjMnLFxuICAgICAgICBjcmVhdGVkQXQ6ICcyMDI0LTA5LTA1VDEwOjAwOjAwWicsXG4gICAgICAgIHVwZGF0ZWRBdDogJzIwMjQtMDktMDVUMTA6MDA6MDBaJyxcbiAgICAgICAgc3VibWl0dGVyOiB7XG4gICAgICAgICAgaWQ6ICd1c2VyLTEyMycsXG4gICAgICAgICAgZmlyc3ROYW1lOiAnVGVzdCcsXG4gICAgICAgICAgbGFzdE5hbWU6ICdVc2VyJyxcbiAgICAgICAgICBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nXG4gICAgICAgIH0sXG4gICAgICAgIGJ1aWxkaW5nOiB7XG4gICAgICAgICAgaWQ6ICdidWlsZGluZy0xMjMnLFxuICAgICAgICAgIG5hbWU6ICdUZXN0IEJ1aWxkaW5nJyxcbiAgICAgICAgICBhZGRyZXNzOiAnMTIzIFRlc3QgU3QnXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIE1vY2sgdGhlIGRlbWFuZCBkZXRhaWxzIHBvcHVwIGNvbXBvbmVudFxuICAgICAgY29uc3QgRGVtYW5kRGV0YWlsc1BvcHVwID0gcmVxdWlyZSgnLi4vLi4vY2xpZW50L3NyYy9jb21wb25lbnRzL2RlbWFuZHMvZGVtYW5kLWRldGFpbHMtcG9wdXAudHN4JykuZGVmYXVsdDtcblxuICAgICAgbW9ja0FwaVJlcXVlc3QubW9ja1Jlc29sdmVkVmFsdWUoW10pOyAvLyBNb2NrIGNvbW1lbnRzXG5cbiAgICAgIHJlbmRlcihcbiAgICAgICAgPD5cbiAgICAgICAgICA8RGVtYW5kRGV0YWlsc1BvcHVwXG4gICAgICAgICAgICBkZW1hbmQ9e21vY2tEZW1hbmRXaXRoQXR0YWNobWVudHN9XG4gICAgICAgICAgICBpc09wZW49e3RydWV9XG4gICAgICAgICAgICBvbkNsb3NlPXtqZXN0LmZuKCl9XG4gICAgICAgICAgICB1c2VyPXttb2NrQXV0aC51c2VyfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvPlxuICAgICAgKTtcblxuICAgICAgLy8gU2hvdWxkIHNob3cgZmlsZSBhdHRhY2htZW50IHNlY3Rpb25cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCBhdHRhY2htZW50TGFiZWwgPSBzY3JlZW4ucXVlcnlCeVRleHQoL2ZpbGUgYXR0YWNobWVudC9pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvYXR0YWNobWVudC9pKTtcbiAgICAgICAgZXhwZWN0KGF0dGFjaG1lbnRMYWJlbCkudG9CZVRydXRoeSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBzaG93IHRoZSBmaWxlIG5hbWVcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gc2NyZWVuLnF1ZXJ5QnlUZXh0KC9sZWFrLXBob3RvLTFcXC5qcGcvaSk7XG4gICAgICBleHBlY3QoZmlsZU5hbWUpLnRvQmVUcnV0aHkoKTtcblxuICAgICAgLy8gU2hvdWxkIGhhdmUgdmlldy9kb3dubG9hZCBidXR0b25zXG4gICAgICBjb25zdCB2aWV3QnV0dG9ucyA9IHNjcmVlbi5xdWVyeUFsbEJ5VGV4dCgvdmlld3xkb3dubG9hZC9pKTtcbiAgICAgIGV4cGVjdCh2aWV3QnV0dG9ucy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHZpZXdpbmcgYXR0YWNoZWQgZmlsZXMgZnJvbSBkZW1hbmQgZGV0YWlscycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tEZW1hbmRXaXRoSW1hZ2UgPSB7XG4gICAgICAgIGlkOiAnZGVtYW5kLTQ1NicsXG4gICAgICAgIHR5cGU6ICdjb21wbGFpbnQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0lzc3VlIHdpdGggd2luZG93cycsXG4gICAgICAgIGZpbGVQYXRoOiAnL3VwbG9hZHMvZGVtYW5kcy93aW5kb3ctcHJvYmxlbS5wbmcnLFxuICAgICAgICBmaWxlTmFtZTogJ3dpbmRvdy1wcm9ibGVtLnBuZycsXG4gICAgICAgIGZpbGVTaXplOiA1MTIwMDAsIC8vIDUxMktCXG4gICAgICAgIHN0YXR1czogJ3N1Ym1pdHRlZCcsXG4gICAgICAgIHN1Ym1pdHRlcklkOiAndXNlci0xMjMnLFxuICAgICAgICBidWlsZGluZ0lkOiAnYnVpbGRpbmctMTIzJyxcbiAgICAgICAgY3JlYXRlZEF0OiAnMjAyNC0wOS0wNVQxMDowMDowMFonLFxuICAgICAgICB1cGRhdGVkQXQ6ICcyMDI0LTA5LTA1VDEwOjAwOjAwWidcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IERlbWFuZERldGFpbHNQb3B1cCA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudC9zcmMvY29tcG9uZW50cy9kZW1hbmRzL2RlbWFuZC1kZXRhaWxzLXBvcHVwLnRzeCcpLmRlZmF1bHQ7XG5cbiAgICAgIG1vY2tBcGlSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcbiAgICAgIFxuICAgICAgLy8gTW9jayB3aW5kb3cub3BlblxuICAgICAgZ2xvYmFsLm9wZW4gPSBqZXN0LmZuKCkgYXMgamVzdC5Nb2NrZWRGdW5jdGlvbjx0eXBlb2Ygd2luZG93Lm9wZW4+O1xuXG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPERlbWFuZERldGFpbHNQb3B1cFxuICAgICAgICAgICAgZGVtYW5kPXttb2NrRGVtYW5kV2l0aEltYWdlfVxuICAgICAgICAgICAgaXNPcGVuPXt0cnVlfVxuICAgICAgICAgICAgb25DbG9zZT17amVzdC5mbigpfVxuICAgICAgICAgICAgdXNlcj17bW9ja0F1dGgudXNlcn1cbiAgICAgICAgICAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCB2aWV3QnV0dG9uID0gc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi12aWV3LWF0dGFjaG1lbnQtMCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbi5xdWVyeUJ5VGV4dCgvdmlldy9pKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh2aWV3QnV0dG9uKSB7XG4gICAgICAgICAgZXhwZWN0KHZpZXdCdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDbGljayB2aWV3IGJ1dHRvblxuICAgICAgY29uc3Qgdmlld0J1dHRvbiA9IHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tdmlldy1hdHRhY2htZW50LTAnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyZWVuLnF1ZXJ5QnlUZXh0KC92aWV3L2kpO1xuICAgICAgXG4gICAgICBpZiAodmlld0J1dHRvbikge1xuICAgICAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2sodmlld0J1dHRvbik7XG5cbiAgICAgICAgLy8gU2hvdWxkIG9wZW4gZmlsZSBpbiBuZXcgd2luZG93XG4gICAgICAgIGV4cGVjdChnbG9iYWwub3BlbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy91cGxvYWRzL2RlbWFuZHMvd2luZG93LXByb2JsZW0ucG5nJywgJ19ibGFuaycpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3Qgc2hvdyBhdHRhY2htZW50cyBzZWN0aW9uIHdoZW4gZGVtYW5kIGhhcyBubyBmaWxlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tEZW1hbmRXaXRob3V0QXR0YWNobWVudHMgPSB7XG4gICAgICAgIGlkOiAnZGVtYW5kLTc4OScsXG4gICAgICAgIHR5cGU6ICdpbmZvcm1hdGlvbicsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnR2VuZXJhbCBpbnF1aXJ5JyxcbiAgICAgICAgZmlsZVBhdGg6IG51bGwsXG4gICAgICAgIGZpbGVOYW1lOiBudWxsLFxuICAgICAgICBmaWxlU2l6ZTogbnVsbCwgLy8gTm8gZmlsZSBhdHRhY2htZW50XG4gICAgICAgIHN0YXR1czogJ3N1Ym1pdHRlZCcsXG4gICAgICAgIHN1Ym1pdHRlcklkOiAndXNlci0xMjMnLFxuICAgICAgICBidWlsZGluZ0lkOiAnYnVpbGRpbmctMTIzJyxcbiAgICAgICAgY3JlYXRlZEF0OiAnMjAyNC0wOS0wNVQxMDowMDowMFonLFxuICAgICAgICB1cGRhdGVkQXQ6ICcyMDI0LTA5LTA1VDEwOjAwOjAwWidcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IERlbWFuZERldGFpbHNQb3B1cCA9IHJlcXVpcmUoJy4uLy4uL2NsaWVudC9zcmMvY29tcG9uZW50cy9kZW1hbmRzL2RlbWFuZC1kZXRhaWxzLXBvcHVwLnRzeCcpLmRlZmF1bHQ7XG5cbiAgICAgIG1vY2tBcGlSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxEZW1hbmREZXRhaWxzUG9wdXBcbiAgICAgICAgICAgIGRlbWFuZD17bW9ja0RlbWFuZFdpdGhvdXRBdHRhY2htZW50c31cbiAgICAgICAgICAgIGlzT3Blbj17dHJ1ZX1cbiAgICAgICAgICAgIG9uQ2xvc2U9e2plc3QuZm4oKX1cbiAgICAgICAgICAgIHVzZXI9e21vY2tBdXRoLnVzZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC8+XG4gICAgICApO1xuXG4gICAgICAvLyBTaG91bGQgTk9UIHNob3cgZmlsZSBhdHRhY2htZW50IHNlY3Rpb25cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCBhdHRhY2htZW50U2VjdGlvbiA9IHNjcmVlbi5xdWVyeUJ5VGV4dCgvZmlsZSBhdHRhY2htZW50L2kpO1xuICAgICAgICBleHBlY3QoYXR0YWNobWVudFNlY3Rpb24pLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHZW5lcmFsIEZpbGUgVXBsb2FkIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayBlcnJvcnMgZHVyaW5nIGZpbGUgdXBsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0ZldGNoLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSk7XG5cbiAgICAgIHJlbmRlcihcbiAgICAgICAgPD5cbiAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwidGVzdC11cGxvYWQtZm9ybVwiPlxuICAgICAgICAgICAgey8qIE1pbmltYWwgZm9ybSBmb3IgdGVzdGluZyAqL31cbiAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgdHlwZT1cImZpbGVcIiBcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJmaWxlLWlucHV0XCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuZmlsZXM/LlswXSkge1xuICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZS50YXJnZXQuZmlsZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgZmV0Y2goJy9hcGkvdXBsb2FkJywgeyBtZXRob2Q6ICdQT1NUJywgYm9keTogZm9ybURhdGEgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC8+XG4gICAgICApO1xuXG4gICAgICBjb25zdCBmaWxlSW5wdXQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2ZpbGUtaW5wdXQnKTtcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gY3JlYXRlTW9ja0ltYWdlKCd0ZXN0LnBuZycpO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmlsZUlucHV0LCAnZmlsZXMnLCB7XG4gICAgICAgIHZhbHVlOiBbbW9ja0ZpbGVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB9KTtcblxuICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBbbW9ja0ZpbGVdIH0gfSk7XG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICAnL2FwaS91cGxvYWQnLFxuICAgICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYm9keTogZXhwZWN0LmFueShGb3JtRGF0YSksXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgZmlsZSBzZWxlY3Rpb24nLCAoKSA9PiB7XG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgdHlwZT1cImZpbGVcIiBcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiZmlsZS1pbnB1dFwiXG4gICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4ge1xuICAgICAgICAgICAgICAvLyBTaG91bGQgbm90IHRyaWdnZXIgYW55IHVwbG9hZFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZmlsZS1pbnB1dCcpO1xuXG4gICAgICAvLyBTaW11bGF0ZSBlbXB0eSBmaWxlIHNlbGVjdGlvblxuICAgICAgZmlyZUV2ZW50LmNoYW5nZShmaWxlSW5wdXQsIHsgdGFyZ2V0OiB7IGZpbGVzOiBbXSB9IH0pO1xuXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tBcGlSZXF1ZXN0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXNwZWN0IG1heGltdW0gZmlsZSBjb3VudCBsaW1pdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBNQVhfRklMRVMgPSAzO1xuXG4gICAgICByZW5kZXIoXG4gICAgICAgIDw+XG4gICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgdHlwZT1cImZpbGVcIiBcbiAgICAgICAgICAgIG11bHRpcGxlXG4gICAgICAgICAgICBkYXRhLXRlc3RpZD1cImZpbGUtaW5wdXRcIlxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldC5maWxlcyAmJiBlLnRhcmdldC5maWxlcy5sZW5ndGggPiBNQVhfRklMRVMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1heGltdW0gJHtNQVhfRklMRVN9IGZpbGVzIGFsbG93ZWRgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICA8Lz5cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZpbGVJbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZmlsZS1pbnB1dCcpO1xuICAgICAgY29uc3QgdG9vTWFueUZpbGVzID0gW1xuICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJzEucG5nJyksXG4gICAgICAgIGNyZWF0ZU1vY2tJbWFnZSgnMi5wbmcnKSxcbiAgICAgICAgY3JlYXRlTW9ja0ltYWdlKCczLnBuZycpLFxuICAgICAgICBjcmVhdGVNb2NrSW1hZ2UoJzQucG5nJyksIC8vIE9uZSB0b28gbWFueVxuICAgICAgXTtcblxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpbGVJbnB1dCwgJ2ZpbGVzJywge1xuICAgICAgICAgIHZhbHVlOiB0b29NYW55RmlsZXMsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoZmlsZUlucHV0LCB7IHRhcmdldDogeyBmaWxlczogdG9vTWFueUZpbGVzIH0gfSk7XG4gICAgICB9KS50b1Rocm93KC9NYXhpbXVtLipmaWxlcy4qYWxsb3dlZC8pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRmlsZSBVcGxvYWQgUHJvZ3Jlc3MgYW5kIEZlZWRiYWNrJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgc2hvdyB1cGxvYWQgcHJvZ3Jlc3MgZm9yIGxhcmdlIGZpbGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1VwbG9hZFByb2dyZXNzID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICAvLyBNb2NrIFhNTEh0dHBSZXF1ZXN0IGZvciBwcm9ncmVzcyB0cmFja2luZ1xuICAgICAgY29uc3QgbW9ja1hIUiA9IHtcbiAgICAgICAgdXBsb2FkOiB7XG4gICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigoZXZlbnQsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdwcm9ncmVzcycpIHtcbiAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgcHJvZ3Jlc3MgdXBkYXRlc1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKHsgbG9hZGVkOiA1MCwgdG90YWw6IDEwMCB9KSwgMTAwKTtcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjayh7IGxvYWRlZDogMTAwLCB0b3RhbDogMTAwIH0pLCAyMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLFxuICAgICAgICB9LFxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgICAgIG9wZW46IGplc3QuZm4oKSxcbiAgICAgICAgc2VuZDogamVzdC5mbigpLFxuICAgICAgICBzZXRSZXF1ZXN0SGVhZGVyOiBqZXN0LmZuKCksXG4gICAgICB9O1xuXG4gICAgICBnbG9iYWwuWE1MSHR0cFJlcXVlc3QgPSBqZXN0LmZuKCgpID0+IG1vY2tYSFIpIGFzIGFueTtcblxuICAgICAgcmVuZGVyKFxuICAgICAgICA8PlxuICAgICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJ1cGxvYWQtd2l0aC1wcm9ncmVzc1wiPlxuICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiZmlsZS1pbnB1dFwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXttb2NrVXBsb2FkUHJvZ3Jlc3N9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cInByb2dyZXNzLWluZGljYXRvclwiPjAlPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvPlxuICAgICAgKTtcblxuICAgICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdmaWxlLWlucHV0Jyk7XG4gICAgICBjb25zdCBsYXJnZUZpbGUgPSBjcmVhdGVNb2NrSW1hZ2UoJ2xhcmdlLWltYWdlLnBuZycsIDEwICogMTAyNCAqIDEwMjQpOyAvLyAxME1CXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlSW5wdXQsICdmaWxlcycsIHtcbiAgICAgICAgdmFsdWU6IFtsYXJnZUZpbGVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFtsYXJnZUZpbGVdIH0gfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrVXBsb2FkUHJvZ3Jlc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdGFyZ2V0OiBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICBmaWxlczogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbbGFyZ2VGaWxlXSlcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=