{"file":"/home/runner/workspace/tests/integration/button-database-integration.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/button-database-integration.test.ts"],"sourcesContent":["/**\n * Button Database Integration Tests\n * Tests that buttons actually persist data to the database correctly\n */\n\nimport { beforeEach, afterEach, describe, it, expect } from '@jest/globals';\nimport { db } from '../../server/db';\nimport { eq, and } from 'drizzle-orm';\nimport * as schema from '../../shared/schema';\nimport { apiRequest } from '../../client/src/lib/queryClient';\n\nconst {\n  users,\n  organizations,\n  userOrganizations,\n  buildings,\n  residences,\n  userResidences,\n  documents,\n  demands,\n  commonSpaces,\n  bookings,\n  userBookingRestrictions,\n  userTimeLimits,\n  invitations\n} = schema;\n\ndescribe('Button Database Integration Tests', () => {\n  let testUser: any;\n  let testOrganization: any;\n  let testBuilding: any;\n  let testResidence: any;\n\n  beforeEach(async () => {\n    // Create test user\n    const [user] = await db.insert(users).values({\n      email: 'test-button@test.com',\n      role: 'admin',\n      firstName: 'Test',\n      lastName: 'User',\n      passwordHash: 'hash',\n      isActive: true,\n    }).returning();\n    testUser = user;\n\n    // Create test organization\n    const [org] = await db.insert(organizations).values({\n      name: 'Test Organization',\n      isActive: true,\n    }).returning();\n    testOrganization = org;\n\n    // Link user to organization\n    await db.insert(userOrganizations).values({\n      userId: testUser.id,\n      organizationId: testOrganization.id,\n      isActive: true,\n    });\n\n    // Create test building\n    const [building] = await db.insert(buildings).values({\n      name: 'Test Building',\n      address: '123 Test St',\n      organizationId: testOrganization.id,\n      isActive: true,\n    }).returning();\n    testBuilding = building;\n\n    // Create test residence\n    const [residence] = await db.insert(residences).values({\n      unitNumber: '101',\n      buildingId: testBuilding.id,\n      isActive: true,\n    }).returning();\n    testResidence = residence;\n\n    // Link user to residence\n    await db.insert(userResidences).values({\n      userId: testUser.id,\n      residenceId: testResidence.id,\n      isActive: true,\n    });\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    if (testUser?.id) {\n      await db.delete(userResidences).where(eq(userResidences.userId, testUser.id));\n      await db.delete(userOrganizations).where(eq(userOrganizations.userId, testUser.id));\n      await db.delete(demands).where(eq(demands.userId, testUser.id));\n      await db.delete(bookings).where(eq(bookings.userId, testUser.id));\n      await db.delete(userBookingRestrictions).where(eq(userBookingRestrictions.userId, testUser.id));\n      await db.delete(userTimeLimits).where(eq(userTimeLimits.userId, testUser.id));\n      await db.delete(invitations).where(eq(invitations.email, testUser.email));\n      await db.delete(users).where(eq(users.id, testUser.id));\n    }\n    if (testResidence?.id) {\n      await db.delete(residences).where(eq(residences.id, testResidence.id));\n    }\n    if (testBuilding?.id) {\n      await db.delete(commonSpaces).where(eq(commonSpaces.buildingId, testBuilding.id));\n      await db.delete(buildings).where(eq(buildings.id, testBuilding.id));\n    }\n    if (testOrganization?.id) {\n      await db.delete(organizations).where(eq(organizations.id, testOrganization.id));\n    }\n  });\n\n  describe('Create Button Database Persistence', () => {\n    it('should persist new common space when create button is used', async () => {\n      const spaceData = {\n        name: 'Test Common Space',\n        description: 'A space for testing',\n        building_id: testBuilding.id,\n        is_reservable: true,\n        capacity: 50,\n      };\n\n      // Simulate button click creating a space\n      const response = await fetch('/api/common-spaces', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(spaceData),\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify data was persisted to database\n      const createdSpaces = await db\n        .select()\n        .from(commonSpaces)\n        .where(and(\n          eq(commonSpaces.name, spaceData.name),\n          eq(commonSpaces.buildingId, testBuilding.id)\n        ));\n\n      expect(createdSpaces).toHaveLength(1);\n      expect(createdSpaces[0].name).toBe(spaceData.name);\n      expect(createdSpaces[0].description).toBe(spaceData.description);\n      expect(createdSpaces[0].capacity).toBe(spaceData.capacity);\n    });\n\n    it('should persist new demand when create demand button is used', async () => {\n      const demandData = {\n        title: 'Test Demand',\n        description: 'Test demand description',\n        category: 'maintenance',\n        priority: 'medium',\n        residenceId: testResidence.id,\n      };\n\n      // Simulate button click creating a demand\n      const response = await fetch('/api/demands', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(demandData),\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify data was persisted to database\n      const createdDemands = await db\n        .select()\n        .from(demands)\n        .where(and(\n          eq(demands.title, demandData.title),\n          eq(demands.userId, testUser.id)\n        ));\n\n      expect(createdDemands).toHaveLength(1);\n      expect(createdDemands[0].title).toBe(demandData.title);\n      expect(createdDemands[0].description).toBe(demandData.description);\n      expect(createdDemands[0].category).toBe(demandData.category);\n      expect(createdDemands[0].priority).toBe(demandData.priority);\n    });\n\n    it('should persist new user invitation when invite button is used', async () => {\n      const invitationData = {\n        email: 'newuser@test.com',\n        organizationId: testOrganization.id,\n        role: 'resident',\n      };\n\n      // Simulate button click creating an invitation\n      const response = await fetch('/api/users/invite', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(invitationData),\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify data was persisted to database\n      const createdInvitations = await db\n        .select()\n        .from(invitations)\n        .where(eq(invitations.email, invitationData.email));\n\n      expect(createdInvitations).toHaveLength(1);\n      expect(createdInvitations[0].email).toBe(invitationData.email);\n      expect(createdInvitations[0].role).toBe(invitationData.role);\n      expect(createdInvitations[0].organizationId).toBe(testOrganization.id);\n    });\n  });\n\n  describe('Update Button Database Persistence', () => {\n    it('should update demand status when approve button is used', async () => {\n      // Create a demand first\n      const [demand] = await db.insert(demands).values({\n        title: 'Test Demand for Approval',\n        description: 'Test description',\n        category: 'maintenance',\n        priority: 'medium',\n        status: 'pending',\n        userId: testUser.id,\n        residenceId: testResidence.id,\n      }).returning();\n\n      // Simulate approve button click\n      const response = await fetch(`/api/demands/${demand.id}/approve`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify status was updated in database\n      const updatedDemands = await db\n        .select()\n        .from(demands)\n        .where(eq(demands.id, demand.id));\n\n      expect(updatedDemands).toHaveLength(1);\n      expect(updatedDemands[0].status).toBe('approved');\n    });\n\n    it('should update user restriction when block button is used', async () => {\n      // Create a common space first\n      const [space] = await db.insert(commonSpaces).values({\n        name: 'Test Space for Blocking',\n        buildingId: testBuilding.id,\n        isReservable: true,\n      }).returning();\n\n      const restrictionData = {\n        common_space_id: space.id,\n        is_blocked: true,\n        reason: 'Test blocking',\n      };\n\n      // Simulate block button click\n      const response = await fetch(`/api/common-spaces/users/${testUser.id}/restrictions`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(restrictionData),\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify restriction was created in database\n      const restrictions = await db\n        .select()\n        .from(userBookingRestrictions)\n        .where(and(\n          eq(userBookingRestrictions.userId, testUser.id),\n          eq(userBookingRestrictions.commonSpaceId, space.id)\n        ));\n\n      expect(restrictions).toHaveLength(1);\n      expect(restrictions[0].isBlocked).toBe(true);\n      expect(restrictions[0].reason).toBe('Test blocking');\n    });\n\n    it('should update time limit when time limit button is used', async () => {\n      const timeLimitData = {\n        user_id: testUser.id,\n        limit_type: 'monthly',\n        limit_hours: 10,\n      };\n\n      // Simulate time limit button click\n      const response = await fetch(`/api/common-spaces/users/${testUser.id}/time-limits`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(timeLimitData),\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify time limit was created in database\n      const timeLimits = await db\n        .select()\n        .from(userTimeLimits)\n        .where(eq(userTimeLimits.userId, testUser.id));\n\n      expect(timeLimits).toHaveLength(1);\n      expect(timeLimits[0].limitType).toBe('monthly');\n      expect(timeLimits[0].limitHours).toBe(10);\n    });\n  });\n\n  describe('Delete Button Database Persistence', () => {\n    it('should remove data when delete button is used', async () => {\n      // Create an invitation first\n      const [invitation] = await db.insert(invitations).values({\n        email: 'delete-test@test.com',\n        organizationId: testOrganization.id,\n        role: 'resident',\n        token: 'delete-test-token',\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours from now\n      }).returning();\n\n      // Simulate delete button click\n      const response = await fetch(`/api/users/invitations/${invitation.id}`, {\n        method: 'DELETE',\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify data was removed from database\n      const remainingInvitations = await db\n        .select()\n        .from(invitations)\n        .where(eq(invitations.id, invitation.id));\n\n      expect(remainingInvitations).toHaveLength(0);\n    });\n\n    it('should soft delete demand when reject button is used', async () => {\n      // Create a demand first\n      const [demand] = await db.insert(demands).values({\n        title: 'Test Demand for Rejection',\n        description: 'Test description',\n        category: 'maintenance',\n        priority: 'medium',\n        status: 'pending',\n        userId: testUser.id,\n        residenceId: testResidence.id,\n      }).returning();\n\n      // Simulate reject button click\n      const response = await fetch(`/api/demands/${demand.id}/reject`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify status was updated to rejected (soft delete)\n      const updatedDemands = await db\n        .select()\n        .from(demands)\n        .where(eq(demands.id, demand.id));\n\n      expect(updatedDemands).toHaveLength(1);\n      expect(updatedDemands[0].status).toBe('rejected');\n    });\n  });\n\n  describe('Save Button Database Persistence', () => {\n    it('should persist user residence assignments when save button is used', async () => {\n      // Create another residence for assignment\n      const [newResidence] = await db.insert(residences).values({\n        unitNumber: '102',\n        buildingId: testBuilding.id,\n        isActive: true,\n      }).returning();\n\n      const assignmentData = {\n        residenceIds: [testResidence.id, newResidence.id],\n      };\n\n      // Simulate save button click for residence assignments\n      const response = await fetch(`/api/users/${testUser.id}/residences`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(assignmentData),\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify assignments were persisted to database\n      const assignments = await db\n        .select()\n        .from(userResidences)\n        .where(and(\n          eq(userResidences.userId, testUser.id),\n          eq(userResidences.isActive, true)\n        ));\n\n      expect(assignments).toHaveLength(2);\n      const residenceIds = assignments.map(a => a.residenceId);\n      expect(residenceIds).toContain(testResidence.id);\n      expect(residenceIds).toContain(newResidence.id);\n    });\n  });\n\n  describe('Complex Button Workflow Database Persistence', () => {\n    it('should handle complete CRUD workflow with database persistence', async () => {\n      // 1. Create a common space\n      const spaceData = {\n        name: 'Workflow Test Space',\n        description: 'Testing complete workflow',\n        building_id: testBuilding.id,\n        is_reservable: true,\n        capacity: 25,\n      };\n\n      const createResponse = await fetch('/api/common-spaces', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(spaceData),\n      });\n\n      expect(createResponse.ok).toBe(true);\n\n      // Verify creation in database\n      const [createdSpace] = await db\n        .select()\n        .from(commonSpaces)\n        .where(eq(commonSpaces.name, spaceData.name));\n\n      expect(createdSpace).toBeDefined();\n\n      // 2. Update the space\n      const updateData = {\n        name: 'Updated Workflow Space',\n        capacity: 30,\n      };\n\n      const updateResponse = await fetch(`/api/common-spaces/${createdSpace.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updateData),\n      });\n\n      expect(updateResponse.ok).toBe(true);\n\n      // Verify update in database\n      const [updatedSpace] = await db\n        .select()\n        .from(commonSpaces)\n        .where(eq(commonSpaces.id, createdSpace.id));\n\n      expect(updatedSpace.name).toBe(updateData.name);\n      expect(updatedSpace.capacity).toBe(updateData.capacity);\n\n      // 3. Create a booking for the space\n      const bookingData = {\n        start_time: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Tomorrow\n        end_time: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(), // Tomorrow + 1 hour\n      };\n\n      const bookingResponse = await fetch(`/api/common-spaces/${createdSpace.id}/bookings`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(bookingData),\n      });\n\n      expect(bookingResponse.ok).toBe(true);\n\n      // Verify booking in database\n      const createdBookings = await db\n        .select()\n        .from(bookings)\n        .where(and(\n          eq(bookings.commonSpaceId, createdSpace.id),\n          eq(bookings.userId, testUser.id)\n        ));\n\n      expect(createdBookings).toHaveLength(1);\n      expect(createdBookings[0].status).toBe('confirmed');\n\n      // 4. Cancel the booking (delete operation)\n      const deleteResponse = await fetch(`/api/common-spaces/bookings/${createdBookings[0].id}`, {\n        method: 'DELETE',\n      });\n\n      expect(deleteResponse.ok).toBe(true);\n\n      // Verify booking was cancelled in database\n      const [cancelledBooking] = await db\n        .select()\n        .from(bookings)\n        .where(eq(bookings.id, createdBookings[0].id));\n\n      expect(cancelledBooking.status).toBe('cancelled');\n    });\n  });\n\n  describe('Data Integrity and Validation', () => {\n    it('should maintain foreign key relationships when buttons create related data', async () => {\n      // Create a demand with proper relationships\n      const demandData = {\n        title: 'Relationship Test Demand',\n        description: 'Testing foreign key relationships',\n        category: 'maintenance',\n        priority: 'high',\n        residenceId: testResidence.id,\n      };\n\n      const response = await fetch('/api/demands', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(demandData),\n      });\n\n      expect(response.ok).toBe(true);\n\n      // Verify relationships are maintained\n      const demandWithRelations = await db\n        .select({\n          demand: demands,\n          user: users,\n          residence: residences,\n          building: buildings,\n        })\n        .from(demands)\n        .innerJoin(users, eq(demands.userId, users.id))\n        .innerJoin(residences, eq(demands.residenceId, residences.id))\n        .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n        .where(eq(demands.title, demandData.title));\n\n      expect(demandWithRelations).toHaveLength(1);\n      expect(demandWithRelations[0].user.id).toBe(testUser.id);\n      expect(demandWithRelations[0].residence.id).toBe(testResidence.id);\n      expect(demandWithRelations[0].building.id).toBe(testBuilding.id);\n    });\n\n    it('should validate data constraints when buttons attempt invalid operations', async () => {\n      // Try to create a common space with invalid building ID\n      const invalidSpaceData = {\n        name: 'Invalid Space',\n        building_id: '00000000-0000-0000-0000-000000000000', // Non-existent building\n        is_reservable: true,\n      };\n\n      const response = await fetch('/api/common-spaces', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(invalidSpaceData),\n      });\n\n      expect(response.ok).toBe(false);\n\n      // Verify no invalid data was created\n      const invalidSpaces = await db\n        .select()\n        .from(commonSpaces)\n        .where(eq(commonSpaces.name, invalidSpaceData.name));\n\n      expect(invalidSpaces).toHaveLength(0);\n    });\n  });\n});"],"version":3}