ce77d5a78e54c2a17809cad4e07f0605
"use strict";
/**
 * Input sanitization and validation utilities for Quebec property management system.
 * Provides security and data consistency functions for user input processing.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeString = sanitizeString;
exports.normalizeEmail = normalizeEmail;
exports.isValidQuebecPostalCode = isValidQuebecPostalCode;
exports.isValidNorthAmericanPhone = isValidNorthAmericanPhone;
exports.sanitizeName = sanitizeName;
exports.generateUsernameFromEmail = generateUsernameFromEmail;
exports.validatePasswordStrength = validatePasswordStrength;
exports.sanitizeAddress = sanitizeAddress;
/**
 * Sanitizes user input to prevent XSS and injection attacks
 */
function sanitizeString(input) {
    if (!input)
        return '';
    return input
        .trim()
        .replace(/[<>]/g, '') // Remove potential HTML tags
        .replace(/['";]/g, '') // Remove potential SQL injection characters
        .substring(0, 500); // Limit length to prevent buffer overflow
}
/**
 * Validates and normalizes email addresses
 */
function normalizeEmail(email) {
    if (!email)
        return '';
    return email.toLowerCase().trim();
}
/**
 * Validates Quebec postal code format
 */
function isValidQuebecPostalCode(postalCode) {
    if (!postalCode)
        return true; // Optional field
    const quebecPostalCodeRegex = /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ] ?\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i;
    return quebecPostalCodeRegex.test(postalCode.trim());
}
/**
 * Validates North American phone number format
 */
function isValidNorthAmericanPhone(phone) {
    if (!phone)
        return true; // Optional field
    const phoneRegex = /^(\+1\s?)?(\([0-9]{3}\)|[0-9]{3})[\s.-]?[0-9]{3}[\s.-]?[0-9]{4}$/;
    return phoneRegex.test(phone.trim());
}
/**
 * Sanitizes and validates user names (first, last)
 */
function sanitizeName(name) {
    if (!name)
        return '';
    return name
        .trim()
        .replace(/[^a-zA-ZÀ-ÿ\s'-]/g, '') // Allow accented characters for Quebec names
        .replace(/\s+/g, ' ') // Normalize multiple spaces
        .substring(0, 100); // Limit to 100 characters
}
/**
 * Generates a secure, unique username from email
 */
function generateUsernameFromEmail(email) {
    if (!email)
        return '';
    return email
        .split('@')[0]
        .toLowerCase()
        .replace(/[^a-z0-9]/g, '') // Remove non-alphanumeric characters
        .substring(0, 30); // Limit username length
}
/**
 * Validates password strength for Quebec compliance
 */
function validatePasswordStrength(password) {
    if (!password) {
        return { isValid: false, message: 'Password is required' };
    }
    if (password.length < 8) {
        return { isValid: false, message: 'Password must be at least 8 characters long' };
    }
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecialChar = /[@$!%*?&]/.test(password);
    if (!hasUppercase || !hasLowercase || !hasNumber || !hasSpecialChar) {
        return {
            isValid: false,
            message: 'Password must contain uppercase, lowercase, number, and special character (@$!%*?&)',
        };
    }
    return { isValid: true };
}
/**
 * Sanitizes and validates address fields for Quebec addresses
 */
function sanitizeAddress(address) {
    if (!address)
        return '';
    return address
        .trim()
        .replace(/[<>]/g, '') // Remove potential HTML
        .substring(0, 200); // Limit address length
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvdXRpbHMvaW5wdXQtc2FuaXRpemF0aW9uLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7O0FBS0gsd0NBUUM7QUFLRCx3Q0FHQztBQUtELDBEQUtDO0FBS0QsOERBSUM7QUFLRCxvQ0FRQztBQUtELDhEQVFDO0FBS0QsNERBdUJDO0FBS0QsMENBT0M7QUF4R0Q7O0dBRUc7QUFDSCxTQUFnQixjQUFjLENBQUMsS0FBYTtJQUMxQyxJQUFJLENBQUMsS0FBSztRQUFFLE9BQU8sRUFBRSxDQUFDO0lBRXRCLE9BQU8sS0FBSztTQUNULElBQUksRUFBRTtTQUNOLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsNkJBQTZCO1NBQ2xELE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsNENBQTRDO1NBQ2xFLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQywwQ0FBMEM7QUFDbEUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsY0FBYyxDQUFDLEtBQWE7SUFDMUMsSUFBSSxDQUFDLEtBQUs7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUN0QixPQUFPLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNwQyxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQix1QkFBdUIsQ0FBQyxVQUFrQjtJQUN4RCxJQUFJLENBQUMsVUFBVTtRQUFFLE9BQU8sSUFBSSxDQUFDLENBQUMsaUJBQWlCO0lBQy9DLE1BQU0scUJBQXFCLEdBQ3pCLDZFQUE2RSxDQUFDO0lBQ2hGLE9BQU8scUJBQXFCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLHlCQUF5QixDQUFDLEtBQWE7SUFDckQsSUFBSSxDQUFDLEtBQUs7UUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLGlCQUFpQjtJQUMxQyxNQUFNLFVBQVUsR0FBRyxrRUFBa0UsQ0FBQztJQUN0RixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLElBQVk7SUFDdkMsSUFBSSxDQUFDLElBQUk7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUVyQixPQUFPLElBQUk7U0FDUixJQUFJLEVBQUU7U0FDTixPQUFPLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxDQUFDLENBQUMsNkNBQTZDO1NBQzlFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsNEJBQTRCO1NBQ2pELFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQywwQkFBMEI7QUFDbEQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IseUJBQXlCLENBQUMsS0FBYTtJQUNyRCxJQUFJLENBQUMsS0FBSztRQUFFLE9BQU8sRUFBRSxDQUFDO0lBRXRCLE9BQU8sS0FBSztTQUNULEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDYixXQUFXLEVBQUU7U0FDYixPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLHFDQUFxQztTQUMvRCxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO0FBQy9DLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLHdCQUF3QixDQUFDLFFBQWdCO0lBQ3ZELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNkLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxDQUFDO0lBQzdELENBQUM7SUFFRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLDZDQUE2QyxFQUFFLENBQUM7SUFDcEYsQ0FBQztJQUVELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFbEQsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3BFLE9BQU87WUFDTCxPQUFPLEVBQUUsS0FBSztZQUNkLE9BQU8sRUFDTCxxRkFBcUY7U0FDeEYsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzNCLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLGVBQWUsQ0FBQyxPQUFlO0lBQzdDLElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFFeEIsT0FBTyxPQUFPO1NBQ1gsSUFBSSxFQUFFO1NBQ04sT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyx3QkFBd0I7U0FDN0MsU0FBUyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLHVCQUF1QjtBQUMvQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc2VydmVyL3V0aWxzL2lucHV0LXNhbml0aXphdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIElucHV0IHNhbml0aXphdGlvbiBhbmQgdmFsaWRhdGlvbiB1dGlsaXRpZXMgZm9yIFF1ZWJlYyBwcm9wZXJ0eSBtYW5hZ2VtZW50IHN5c3RlbS5cbiAqIFByb3ZpZGVzIHNlY3VyaXR5IGFuZCBkYXRhIGNvbnNpc3RlbmN5IGZ1bmN0aW9ucyBmb3IgdXNlciBpbnB1dCBwcm9jZXNzaW5nLlxuICovXG5cbi8qKlxuICogU2FuaXRpemVzIHVzZXIgaW5wdXQgdG8gcHJldmVudCBYU1MgYW5kIGluamVjdGlvbiBhdHRhY2tzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZVN0cmluZyhpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFpbnB1dCkgcmV0dXJuICcnO1xuXG4gIHJldHVybiBpbnB1dFxuICAgIC50cmltKClcbiAgICAucmVwbGFjZSgvWzw+XS9nLCAnJykgLy8gUmVtb3ZlIHBvdGVudGlhbCBIVE1MIHRhZ3NcbiAgICAucmVwbGFjZSgvWydcIjtdL2csICcnKSAvLyBSZW1vdmUgcG90ZW50aWFsIFNRTCBpbmplY3Rpb24gY2hhcmFjdGVyc1xuICAgIC5zdWJzdHJpbmcoMCwgNTAwKTsgLy8gTGltaXQgbGVuZ3RoIHRvIHByZXZlbnQgYnVmZmVyIG92ZXJmbG93XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIGFuZCBub3JtYWxpemVzIGVtYWlsIGFkZHJlc3Nlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplRW1haWwoZW1haWw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghZW1haWwpIHJldHVybiAnJztcbiAgcmV0dXJuIGVtYWlsLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyBRdWViZWMgcG9zdGFsIGNvZGUgZm9ybWF0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUXVlYmVjUG9zdGFsQ29kZShwb3N0YWxDb2RlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKCFwb3N0YWxDb2RlKSByZXR1cm4gdHJ1ZTsgLy8gT3B0aW9uYWwgZmllbGRcbiAgY29uc3QgcXVlYmVjUG9zdGFsQ29kZVJlZ2V4ID1cbiAgICAvXltBQkNFR0hKS0xNTlBSU1RWWFldXFxkW0FCQ0VHSEpLTE1OUFJTVFZXWFlaXSA/XFxkW0FCQ0VHSEpLTE1OUFJTVFZXWFlaXVxcZCQvaTtcbiAgcmV0dXJuIHF1ZWJlY1Bvc3RhbENvZGVSZWdleC50ZXN0KHBvc3RhbENvZGUudHJpbSgpKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgTm9ydGggQW1lcmljYW4gcGhvbmUgbnVtYmVyIGZvcm1hdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE5vcnRoQW1lcmljYW5QaG9uZShwaG9uZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGlmICghcGhvbmUpIHJldHVybiB0cnVlOyAvLyBPcHRpb25hbCBmaWVsZFxuICBjb25zdCBwaG9uZVJlZ2V4ID0gL14oXFwrMVxccz8pPyhcXChbMC05XXszfVxcKXxbMC05XXszfSlbXFxzLi1dP1swLTldezN9W1xccy4tXT9bMC05XXs0fSQvO1xuICByZXR1cm4gcGhvbmVSZWdleC50ZXN0KHBob25lLnRyaW0oKSk7XG59XG5cbi8qKlxuICogU2FuaXRpemVzIGFuZCB2YWxpZGF0ZXMgdXNlciBuYW1lcyAoZmlyc3QsIGxhc3QpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZU5hbWUobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG5cbiAgcmV0dXJuIG5hbWVcbiAgICAudHJpbSgpXG4gICAgLnJlcGxhY2UoL1teYS16QS1aw4Atw79cXHMnLV0vZywgJycpIC8vIEFsbG93IGFjY2VudGVkIGNoYXJhY3RlcnMgZm9yIFF1ZWJlYyBuYW1lc1xuICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJykgLy8gTm9ybWFsaXplIG11bHRpcGxlIHNwYWNlc1xuICAgIC5zdWJzdHJpbmcoMCwgMTAwKTsgLy8gTGltaXQgdG8gMTAwIGNoYXJhY3RlcnNcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBzZWN1cmUsIHVuaXF1ZSB1c2VybmFtZSBmcm9tIGVtYWlsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVVzZXJuYW1lRnJvbUVtYWlsKGVtYWlsOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIWVtYWlsKSByZXR1cm4gJyc7XG5cbiAgcmV0dXJuIGVtYWlsXG4gICAgLnNwbGl0KCdAJylbMF1cbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9bXmEtejAtOV0vZywgJycpIC8vIFJlbW92ZSBub24tYWxwaGFudW1lcmljIGNoYXJhY3RlcnNcbiAgICAuc3Vic3RyaW5nKDAsIDMwKTsgLy8gTGltaXQgdXNlcm5hbWUgbGVuZ3RoXG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHBhc3N3b3JkIHN0cmVuZ3RoIGZvciBRdWViZWMgY29tcGxpYW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZFN0cmVuZ3RoKHBhc3N3b3JkOiBzdHJpbmcpOiB7IGlzVmFsaWQ6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmcgfSB7XG4gIGlmICghcGFzc3dvcmQpIHtcbiAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgbWVzc2FnZTogJ1Bhc3N3b3JkIGlzIHJlcXVpcmVkJyB9O1xuICB9XG5cbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDgpIHtcbiAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgbWVzc2FnZTogJ1Bhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGxvbmcnIH07XG4gIH1cblxuICBjb25zdCBoYXNVcHBlcmNhc2UgPSAvW0EtWl0vLnRlc3QocGFzc3dvcmQpO1xuICBjb25zdCBoYXNMb3dlcmNhc2UgPSAvW2Etel0vLnRlc3QocGFzc3dvcmQpO1xuICBjb25zdCBoYXNOdW1iZXIgPSAvXFxkLy50ZXN0KHBhc3N3b3JkKTtcbiAgY29uc3QgaGFzU3BlY2lhbENoYXIgPSAvW0AkISUqPyZdLy50ZXN0KHBhc3N3b3JkKTtcblxuICBpZiAoIWhhc1VwcGVyY2FzZSB8fCAhaGFzTG93ZXJjYXNlIHx8ICFoYXNOdW1iZXIgfHwgIWhhc1NwZWNpYWxDaGFyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgbWVzc2FnZTpcbiAgICAgICAgJ1Bhc3N3b3JkIG11c3QgY29udGFpbiB1cHBlcmNhc2UsIGxvd2VyY2FzZSwgbnVtYmVyLCBhbmQgc3BlY2lhbCBjaGFyYWN0ZXIgKEAkISUqPyYpJyxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHsgaXNWYWxpZDogdHJ1ZSB9O1xufVxuXG4vKipcbiAqIFNhbml0aXplcyBhbmQgdmFsaWRhdGVzIGFkZHJlc3MgZmllbGRzIGZvciBRdWViZWMgYWRkcmVzc2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUFkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFhZGRyZXNzKSByZXR1cm4gJyc7XG5cbiAgcmV0dXJuIGFkZHJlc3NcbiAgICAudHJpbSgpXG4gICAgLnJlcGxhY2UoL1s8Pl0vZywgJycpIC8vIFJlbW92ZSBwb3RlbnRpYWwgSFRNTFxuICAgIC5zdWJzdHJpbmcoMCwgMjAwKTsgLy8gTGltaXQgYWRkcmVzcyBsZW5ndGhcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==