c8566a49517ef767df679d2f5ba7164c
"use strict";
/**
 * API Error Handling and Validation Edge Cases
 * Tests comprehensive error scenarios for Quebec property management APIs
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../../server/routes");
const db_1 = require("../../../server/db");
const schema = __importStar(require("../../../shared/schema"));
// Create test server
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json({ limit: '1mb' })); // Set reasonable limit for testing
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('API Error Handling and Validation Edge Cases', () => {
    let app;
    let testOrganization;
    let testBuilding;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clean test data
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.organizations);
        // Create test organization
        const [org] = await db_1.db
            .insert(schema.organizations)
            .values({
            name: 'Test Organization',
            type: 'Standard',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1H 1H1',
            phone: '514-555-0123',
            email: 'test@org.com',
        })
            .returning();
        testOrganization = org;
        // Create test building
        const [building] = await db_1.db
            .insert(schema.buildings)
            .values({
            organizationId: testOrganization.id,
            name: 'Test Building',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1H 1H1',
            buildingType: 'apartment',
            totalUnits: 10,
        })
            .returning();
        testBuilding = building;
    });
    (0, globals_1.afterEach)(async () => {
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.organizations);
    });
    (0, globals_1.describe)('Input Validation Edge Cases', () => {
        (0, globals_1.it)('should validate UUID format in API parameters', async () => {
            const invalidUUIDs = [
                'invalid-uuid',
                '123',
                'not-a-uuid-at-all',
                '12345678-1234-1234-1234-12345678901', // Too long
                '12345678-1234-1234-1234-123456789012', // Wrong format
                '',
                null,
            ];
            for (const invalidId of invalidUUIDs) {
                const response = await (0, supertest_1.default)(app)
                    .get(`/api/organizations/${invalidId}`);
                (0, globals_1.expect)([400, 404]).toContain(response.status);
            }
        });
        (0, globals_1.it)('should validate Quebec postal code format', async () => {
            const invalidPostalCodes = [
                'invalid', // Not Quebec format
                '90210', // US ZIP code
                'M5V 3A1', // Ontario postal code format but wrong province
                'H1H1H1', // Missing space
                'H1H 1H', // Incomplete
                'A1A 1A1', // Invalid Quebec area (A is Newfoundland)
                'Z9Z 9Z9', // Invalid postal characters
            ];
            for (const postalCode of invalidPostalCodes) {
                const response = await (0, supertest_1.default)(app)
                    .post('/api/organizations')
                    .send({
                    name: 'Test Quebec Org',
                    address: '123 Test Street',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode,
                    phone: '514-555-0123',
                    email: 'test@quebecorg.com',
                    type: 'Condo',
                });
                // Should validate Quebec postal code format
                if (response.status === 400) {
                    (0, globals_1.expect)(response.body.message).toMatch(/postal|code/i);
                }
            }
        });
        (0, globals_1.it)('should validate Quebec phone number formats', async () => {
            const phoneNumbers = [
                '514-555-0123', // Valid Montreal
                '418-555-0123', // Valid Quebec City
                '819-555-0123', // Valid Gatineau
                '450-555-0123', // Valid Longueuil
                '(514) 555-0123', // Valid with parentheses
                '514.555.0123', // Valid with dots
                '5145550123', // Valid without formatting
                '+1-514-555-0123', // Valid international
                '911', // Emergency (should be handled specially)
                '555-0123', // Missing area code
                '514-555-012', // Too short
                '614-555-0123', // Non-Quebec area code
                'abc-def-ghij', // Non-numeric
                '', // Empty
            ];
            for (const phone of phoneNumbers) {
                const response = await (0, supertest_1.default)(app)
                    .post('/api/organizations')
                    .send({
                    name: 'Test Phone Org',
                    address: '123 Test Street',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1H 1H1',
                    phone,
                    email: 'test@phoneorg.com',
                    type: 'Apartment',
                });
                // Quebec phone numbers should be validated appropriately
                if ([400, 422].includes(response.status)) {
                    (0, globals_1.expect)(response.body.message).toMatch(/phone/i);
                }
            }
        });
    });
    (0, globals_1.describe)('Database Constraint Validation', () => {
        (0, globals_1.it)('should enforce building type enum constraints', async () => {
            const invalidBuildingTypes = [
                'house', // Not valid in Quebec residential context
                'commercial', // Wrong building category
                'Apartment', // Wrong case
                'CONDO', // Wrong case
                '', // Empty
                null,
                'mixed-use', // Not supported
            ];
            for (const buildingType of invalidBuildingTypes) {
                const response = await (0, supertest_1.default)(app)
                    .post('/api/buildings')
                    .send({
                    organizationId: testOrganization.id,
                    name: 'Test Building',
                    address: '123 Test Street',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1H 1H1',
                    buildingType,
                    totalUnits: 10,
                });
                (0, globals_1.expect)([400, 422]).toContain(response.status);
            }
        });
        (0, globals_1.it)('should validate residence unit numbering in Quebec context', async () => {
            const invalidUnitNumbers = [
                '', // Empty unit number
                '0', // Unit numbers typically start from 1
                'basement', // Non-standard naming
                '999999', // Unrealistic unit number
                'A-1-B-2', // Too complex
                '1st Floor', // Descriptive instead of numeric
            ];
            for (const unitNumber of invalidUnitNumbers) {
                const response = await (0, supertest_1.default)(app)
                    .post('/api/residences')
                    .send({
                    buildingId: testBuilding.id,
                    unitNumber,
                    squareFootage: 1000,
                    bedrooms: 2,
                    bathrooms: 1,
                });
                if (response.status === 400) {
                    (0, globals_1.expect)(response.body.message).toMatch(/unit/i);
                }
            }
        });
    });
    (0, globals_1.describe)('Concurrent Operations and Race Conditions', () => {
        (0, globals_1.it)('should handle concurrent user creation with same email', async () => {
            const userData = {
                email: 'concurrent@example.com',
                username: 'concurrent',
                firstName: 'Concurrent',
                lastName: 'User',
                role: 'tenant',
                password: 'TestPassword123!',
            };
            // Create multiple concurrent requests
            const concurrentRequests = Array(5).fill(null).map(() => (0, supertest_1.default)(app)
                .post('/api/users')
                .send(userData));
            const responses = await Promise.all(concurrentRequests);
            // Only one should succeed, others should fail with conflict or validation errors
            const successfulCreations = responses.filter(r => r.status === 201);
            const errorResponses = responses.filter(r => r.status >= 400);
            (0, globals_1.expect)(successfulCreations.length).toBeLessThanOrEqual(1);
            (0, globals_1.expect)(errorResponses.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should handle concurrent document uploads to same building', async () => {
            const documentData = {
                title: 'Test Document',
                description: 'Concurrent test document',
                category: 'Legal',
                buildingId: testBuilding.id,
                accessLevel: 'public',
            };
            // Simulate multiple users uploading documents simultaneously
            const concurrentUploads = Array(3).fill(null).map((_, index) => (0, supertest_1.default)(app)
                .post('/api/documents')
                .send({
                ...documentData,
                title: `Test Document ${index + 1}`,
            }));
            const responses = await Promise.all(concurrentUploads);
            // All uploads should either succeed or fail gracefully
            const validStatuses = [200, 201, 400, 401, 403, 409, 422];
            responses.forEach(response => {
                (0, globals_1.expect)(validStatuses).toContain(response.status);
            });
        });
    });
    (0, globals_1.describe)('Memory and Performance Edge Cases', () => {
        (0, globals_1.it)('should handle large organization queries efficiently', async () => {
            // Test query performance with realistic data size
            const startTime = Date.now();
            const response = await (0, supertest_1.default)(app)
                .get('/api/organizations');
            const executionTime = Date.now() - startTime;
            // API should respond within reasonable time (< 5 seconds)
            (0, globals_1.expect)(executionTime).toBeLessThan(5000);
            (0, globals_1.expect)([200, 401]).toContain(response.status);
        });
        (0, globals_1.it)('should handle pagination edge cases', async () => {
            const paginationTests = [
                { page: 0, limit: 10 }, // Page 0
                { page: -1, limit: 10 }, // Negative page
                { page: 1, limit: 0 }, // Zero limit
                { page: 1, limit: -5 }, // Negative limit
                { page: 999999, limit: 10 }, // Very high page number
                { page: 1, limit: 1000 }, // Very high limit
            ];
            for (const { page, limit } of paginationTests) {
                const response = await (0, supertest_1.default)(app)
                    .get(`/api/buildings?page=${page}&limit=${limit}`);
                // Should handle edge cases gracefully
                (0, globals_1.expect)([200, 400, 401, 422]).toContain(response.status);
            }
        });
    });
    (0, globals_1.describe)('Quebec-Specific Business Logic', () => {
        (0, globals_1.it)('should validate Quebec residential property regulations', async () => {
            // Test Quebec-specific property constraints
            const quebecPropertyData = {
                organizationId: testOrganization.id,
                name: 'Copropriété Les Jardins',
                address: '123 boulevard René-Lévesque',
                city: 'Québec',
                province: 'QC',
                postalCode: 'G1R 2B5',
                buildingType: 'condo', // Quebec condo regulations
                totalUnits: 150, // Large Quebec condo building
                yearBuilt: 1995,
                totalFloors: 15,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/buildings')
                .send(quebecPropertyData);
            if (response.status === 201) {
                const building = response.body.building || response.body;
                (0, globals_1.expect)(building.buildingType).toBe('condo');
                (0, globals_1.expect)(building.province).toBe('QC');
            }
        });
        (0, globals_1.it)('should handle French language validation for Quebec users', async () => {
            const frenchUserData = {
                email: 'français@exemple.com',
                username: 'utilisateurfrançais',
                firstName: 'Jean-François',
                lastName: 'Côté-Tremblay',
                role: 'tenant',
                language: 'fr',
                password: 'MotDePasse123!',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/users')
                .send(frenchUserData);
            if (response.status === 201) {
                const user = response.body.user || response.body;
                // Should preserve French characters and names
                (0, globals_1.expect)(user.firstName).toBe('Jean-François');
                (0, globals_1.expect)(user.lastName).toBe('Côté-Tremblay');
                (0, globals_1.expect)(user.language).toBe('fr');
            }
        });
    });
    (0, globals_1.describe)('Error Response Consistency', () => {
        (0, globals_1.it)('should return consistent error format across all endpoints', async () => {
            const endpoints = [
                { method: 'get', path: '/api/nonexistent' },
                { method: 'post', path: '/api/users', body: {} },
                { method: 'get', path: '/api/organizations/invalid-id' },
                { method: 'put', path: '/api/buildings/00000000-0000-0000-0000-000000000000', body: {} },
            ];
            for (const endpoint of endpoints) {
                const response = await (0, supertest_1.default)(app)[endpoint.method](endpoint.path)
                    .send(endpoint.body || {});
                if (response.status >= 400) {
                    // All error responses should have consistent structure
                    console.log(`Testing endpoint ${endpoint.method.toUpperCase()} ${endpoint.path}, status: ${response.status}, body:`, response.body);
                    // Skip if response body is empty (some endpoints may not return JSON)
                    if (Object.keys(response.body).length > 0) {
                        (0, globals_1.expect)(response.body).toHaveProperty('message');
                        (0, globals_1.expect)(typeof response.body.message).toBe('string');
                        if (response.body.code) {
                            (0, globals_1.expect)(typeof response.body.code).toBe('string');
                        }
                    }
                }
            }
        });
        (0, globals_1.it)('should handle OPTIONS requests for CORS compliance', async () => {
            const response = await (0, supertest_1.default)(app)
                .options('/api/users');
            // Should handle CORS preflight requests
            (0, globals_1.expect)([200, 204, 404]).toContain(response.status);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,