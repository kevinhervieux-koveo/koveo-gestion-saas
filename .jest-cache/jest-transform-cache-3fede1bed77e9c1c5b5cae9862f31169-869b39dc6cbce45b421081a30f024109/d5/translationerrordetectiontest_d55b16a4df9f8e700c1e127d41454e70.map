{"file":"/home/runner/workspace/tests/unit/translation-error-detection.test.ts","mappings":";AAAA;;;GAGG;;AAEH,2CAAqD;AACrD,2BAAkC;AAElC,IAAA,kBAAQ,EAAC,sCAAsC,EAAE,GAAG,EAAE;IACpD,IAAA,YAAE,EAAC,uEAAuE,EAAE,GAAG,EAAE;QAC/E,MAAM,aAAa,GAAG,wCAAwC,CAAC;QAC/D,MAAM,OAAO,GAAG,IAAA,iBAAY,EAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAErD,uDAAuD;QACvD,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,2EAA2E,CAAC,CAAC;QAErG,yDAAyD;QACzD,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,2EAA2E,CAAC,CAAC;QAErG,0CAA0C;QAC1C,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;QAClE,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;QAElE,uCAAuC;QACvC,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAEjC,OAAO,CAAC,GAAG,CAAC,mEAAmE,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,IAAA,YAAE,EAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,aAAa,GAAG,wCAAwC,CAAC;QAC/D,MAAM,OAAO,GAAG,IAAA,iBAAY,EAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAErD,wCAAwC;QACxC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC5B,sBAAsB;YACtB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjF,iEAAiE;gBACjE,MAAM,UAAU,GAAG,KAAK,GAAG,CAAC,CAAC;gBAE7B,+DAA+D;gBAC/D,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;gBAE/F,IAAI,YAAY,EAAE,CAAC;oBACjB,0BAA0B;gBAC5B,CAAC;qBAAM,CAAC;oBACN,MAAM,CAAC,IAAI,CAAC,QAAQ,UAAU,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;YAC3D,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,KAAK,EAAE,CAAC,CAAC,CAAC;QACtD,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAC;QACrE,CAAC;QAED,IAAA,gBAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/tests/unit/translation-error-detection.test.ts"],"sourcesContent":["/**\n * Quick test to detect translation function errors specifically in the buildings page\n * and verify the fix works properly\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport { readFileSync } from 'fs';\n\ndescribe('Translation Function Error Detection', () => {\n  it('should verify buildings page no longer has undefined t function error', () => {\n    const buildingsFile = 'client/src/pages/manager/buildings.tsx';\n    const content = readFileSync(buildingsFile, 'utf-8');\n\n    // Check that BuildingCard has t parameter in interface\n    expect(content).toMatch(/interface BuildingCardProps\\s*{[^}]*t:\\s*\\(key:\\s*string\\)\\s*=>\\s*string/s);\n    \n    // Check that BuildingForm has t parameter in interface  \n    expect(content).toMatch(/interface BuildingFormProps\\s*{[^}]*t:\\s*\\(key:\\s*string\\)\\s*=>\\s*string/s);\n    \n    // Check that components receive t as prop\n    expect(content).toMatch(/function BuildingCard\\([^)]*,\\s*t\\s*\\}/);\n    expect(content).toMatch(/function BuildingForm\\([^)]*,\\s*t\\s*\\}/);\n    \n    // Check that t is passed to components\n    expect(content).toMatch(/t={t}/);\n    \n    console.log('✅ Buildings page properly implements translation function passing');\n  });\n\n  it('should detect any remaining t() calls without proper setup', () => {\n    const buildingsFile = 'client/src/pages/manager/buildings.tsx';\n    const content = readFileSync(buildingsFile, 'utf-8');\n    \n    // Split content into lines for analysis\n    const lines = content.split('\\n');\n    const issues: string[] = [];\n    \n    lines.forEach((line, index) => {\n      // Check for t() calls\n      if (line.includes('t(') && !line.includes('const { t }') && !line.includes('t:')) {\n        // Make sure this line is inside a component that has access to t\n        const lineNumber = index + 1;\n        \n        // If it's in BuildingCard or BuildingForm, it should be ok now\n        const isInFunction = content.substring(0, content.indexOf(line)).includes('function Building');\n        \n        if (isInFunction) {\n          // This should be fine now\n        } else {\n          issues.push(`Line ${lineNumber}: ${line.trim()}`);\n        }\n      }\n    });\n    \n    if (issues.length > 0) {\n      console.log('⚠️  Potential remaining translation issues:');\n      issues.forEach(issue => console.log(`   ${issue}`));\n    } else {\n      console.log('✅ No remaining translation function issues detected');\n    }\n    \n    expect(issues.length).toBe(0);\n  });\n});"],"version":3}