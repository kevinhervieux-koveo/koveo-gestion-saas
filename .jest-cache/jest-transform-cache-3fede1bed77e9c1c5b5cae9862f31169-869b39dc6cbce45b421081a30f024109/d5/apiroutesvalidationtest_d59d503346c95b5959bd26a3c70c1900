2a6f6ede81625bfc1491cf250cfd7d27
"use strict";
/**
 * API Routes Validation Tests
 * Simple tests to ensure API route definitions are valid and error-free
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
(0, globals_1.describe)('API Routes Validation', () => {
    (0, globals_1.describe)('Route File Validation', () => {
        (0, globals_1.it)('should validate organizations route structure', async () => {
            // Test that the organizations routes file can be imported
            (0, globals_1.expect)(async () => {
                const { registerOrganizationRoutes } = await Promise.resolve().then(() => __importStar(require('../../server/api/organizations')));
                (0, globals_1.expect)(typeof registerOrganizationRoutes).toBe('function');
            }).not.toThrow();
        });
        (0, globals_1.it)('should validate users route structure', async () => {
            (0, globals_1.expect)(async () => {
                const { registerUserRoutes } = await Promise.resolve().then(() => __importStar(require('../../server/api/users')));
                (0, globals_1.expect)(typeof registerUserRoutes).toBe('function');
            }).not.toThrow();
        });
        (0, globals_1.it)('should validate buildings route structure', async () => {
            (0, globals_1.expect)(async () => {
                const { registerBuildingRoutes } = await Promise.resolve().then(() => __importStar(require('../../server/api/buildings')));
                (0, globals_1.expect)(typeof registerBuildingRoutes).toBe('function');
            }).not.toThrow();
        });
        (0, globals_1.it)('should validate documents route structure', async () => {
            (0, globals_1.expect)(async () => {
                const { registerDocumentRoutes } = await Promise.resolve().then(() => __importStar(require('../../server/api/documents')));
                (0, globals_1.expect)(typeof registerDocumentRoutes).toBe('function');
            }).not.toThrow();
        });
        (0, globals_1.it)('should validate demands route structure', async () => {
            (0, globals_1.expect)(async () => {
                const { registerDemandRoutes } = await Promise.resolve().then(() => __importStar(require('../../server/api/demands')));
                (0, globals_1.expect)(typeof registerDemandRoutes).toBe('function');
            }).not.toThrow();
        });
    });
    (0, globals_1.describe)('Schema Validation', () => {
        (0, globals_1.it)('should validate organization schema exports', async () => {
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            (0, globals_1.expect)(schema.organizations).toBeDefined();
            (0, globals_1.expect)(schema.insertOrganizationSchema).toBeDefined();
        });
        (0, globals_1.it)('should validate user schema exports', async () => {
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            (0, globals_1.expect)(schema.users).toBeDefined();
            (0, globals_1.expect)(schema.insertUserSchema).toBeDefined();
        });
        (0, globals_1.it)('should validate building schema exports', async () => {
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            (0, globals_1.expect)(schema.buildings).toBeDefined();
            (0, globals_1.expect)(schema.insertBuildingSchema).toBeDefined();
        });
        (0, globals_1.it)('should validate residence schema exports', async () => {
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            (0, globals_1.expect)(schema.residences).toBeDefined();
            (0, globals_1.expect)(schema.insertResidenceSchema).toBeDefined();
        });
        (0, globals_1.it)('should validate document schema exports', async () => {
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            (0, globals_1.expect)(schema.documents).toBeDefined();
            (0, globals_1.expect)(schema.insertDocumentSchema).toBeDefined();
        });
        (0, globals_1.it)('should validate demand schema exports', async () => {
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            (0, globals_1.expect)(schema.demands).toBeDefined();
            (0, globals_1.expect)(schema.insertDemandSchema).toBeDefined();
        });
    });
    (0, globals_1.describe)('Database Schema Consistency', () => {
        (0, globals_1.it)('should ensure all schemas are properly typed', async () => {
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            // Test that key schemas exist and are functions/objects
            (0, globals_1.expect)(typeof schema.organizations).toBe('object');
            (0, globals_1.expect)(typeof schema.users).toBe('object');
            (0, globals_1.expect)(typeof schema.buildings).toBe('object');
            (0, globals_1.expect)(typeof schema.residences).toBe('object');
            (0, globals_1.expect)(typeof schema.documents).toBe('object');
            (0, globals_1.expect)(typeof schema.demands).toBe('object');
        });
        (0, globals_1.it)('should validate storage interface compatibility', async () => {
            const { storage } = await Promise.resolve().then(() => __importStar(require('../../server/storage')));
            // Test that storage interface is properly defined
            (0, globals_1.expect)(typeof storage).toBe('object');
            (0, globals_1.expect)(typeof storage.getOrganizations).toBe('function');
            (0, globals_1.expect)(typeof storage.getUserByEmail).toBe('function');
            (0, globals_1.expect)(typeof storage.getBuildings).toBe('function');
        });
    });
    (0, globals_1.describe)('RBAC Integration', () => {
        (0, globals_1.it)('should validate RBAC middleware functions exist', async () => {
            const rbac = await Promise.resolve().then(() => __importStar(require('../../server/rbac')));
            (0, globals_1.expect)(typeof rbac.requireOrganizationAccess).toBe('function');
            (0, globals_1.expect)(typeof rbac.requireBuildingAccess).toBe('function');
            (0, globals_1.expect)(typeof rbac.requireResidenceAccess).toBe('function');
        });
        (0, globals_1.it)('should validate AuthenticatedUser interface structure', async () => {
            // Test that the RBAC module can be imported without errors
            const rbac = await Promise.resolve().then(() => __importStar(require('../../server/rbac')));
            (0, globals_1.expect)(rbac).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,