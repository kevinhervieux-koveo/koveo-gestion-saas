430ba2c937ccadf8ae44157407e0cd2a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ResetPasswordPage;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const wouter_1 = require("wouter");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const form_1 = require("@/components/ui/form");
const card_1 = require("@/components/ui/card");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
const lucide_react_1 = require("lucide-react");
const resetPasswordSchema = zod_2.z
    .object({
    password: zod_2.z
        .string()
        .min(1, 'Le nouveau mot de passe est requis')
        .min(8, 'Le mot de passe doit contenir au moins 8 caractères (exemple: MonMotDePasse123!)')
        .max(100, 'Le mot de passe ne peut pas dépasser 100 caractères')
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Le mot de passe doit contenir au moins une minuscule, une majuscule et un chiffre (exemple: MonMotDePasse123!)'),
    confirmPassword: zod_2.z.string().min(1, 'La confirmation du mot de passe est requise'),
})
    .refine((_data) => _data.password === _data.confirmPassword, {
    message: 'Les mots de passe ne correspondent pas - veuillez saisir le même mot de passe dans les deux champs',
    path: ['confirmPassword'],
});
/**
 *
 */
function ResetPasswordPage() {
    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);
    const [resetComplete, setResetComplete] = (0, react_1.useState)(false);
    const [showPassword, setShowPassword] = (0, react_1.useState)(false);
    const [showConfirmPassword, setShowConfirmPassword] = (0, react_1.useState)(false);
    const [token, setToken] = (0, react_1.useState)(null);
    const [, navigate] = (0, wouter_1.useLocation)();
    const { toast } = (0, use_toast_1.useToast)();
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(resetPasswordSchema),
        defaultValues: {
            password: '',
            confirmPassword: '',
        },
    });
    // Extract token from URL parameters
    (0, react_1.useEffect)(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const tokenParam = urlParams.get('token'); /**
         * If function.
         * @param !tokenParam - !tokenParam parameter.
         */ /**
        * If function.
        * @param !tokenParam - !tokenParam parameter.
        */
        if (!tokenParam) {
            toast({
                title: 'Token manquant',
                description: 'Le lien de réinitialisation est invalide ou manquant.',
                variant: 'destructive',
            });
            navigate('/login');
            return;
        }
        setToken(tokenParam);
    }, [navigate, toast]);
    const onSubmit = async (_data) => {
        /**
         * If function.
         * @param !token - !token parameter.
         */ /**
        * If function.
        * @param !token - !token parameter.
        */
        if (!token) {
            toast({
                title: 'Erreur',
                description: 'Token de réinitialisation manquant.',
                variant: 'destructive',
            });
            return;
        }
        setIsSubmitting(true);
        try {
            await (0, queryClient_1.apiRequest)('POST', '/api/auth/reset-password', {
                token,
                password: _data.password,
            });
            setResetComplete(true);
            toast({
                title: 'Mot de passe réinitialisé',
                description: 'Votre mot de passe a été mis à jour avec succès.',
            });
        }
        catch (_error) {
            /**
             * Catch function.
             * @param error - Error object.
             */ /**
            * Catch function.
            * @param error - Error object.
            */
            let errorMessage = 'Une erreur est survenue lors de la réinitialisation du mot de passe.'; /**
             * If function.
             * @param error.code === 'INVALID_TOKEN' || error.code === 'TOKEN_EXPIRED' - error.code === 'INVALID_TOKEN' || error.code === 'TOKEN_EXPIRED' parameter.
             */ /**
            * If function.
            * @param error.code === 'INVALID_TOKEN' || error.code === 'TOKEN_EXPIRED' - error.code === 'INVALID_TOKEN' || error.code === 'TOKEN_EXPIRED' parameter.
            */
            if (_error.code === 'INVALID_TOKEN' || _error.code === 'TOKEN_EXPIRED') {
                errorMessage =
                    'Le lien de réinitialisation est invalide ou expiré. Veuillez demander un nouveau lien.';
            }
            else if (_error.code === 'TOKEN_ALREADY_USED') {
                /**
                 * If function.
                 * @param error.code === 'TOKEN_ALREADY_USED' - error.code === 'TOKEN_ALREADY_USED' parameter.
                 */ /**
                * If function.
                * @param error.code === 'TOKEN_ALREADY_USED' - error.code === 'TOKEN_ALREADY_USED' parameter.
                */
                errorMessage = 'Ce lien de réinitialisation a déjà été utilisé.';
            }
            else if (_error.code === 'PASSWORD_TOO_SHORT') {
                /**
                 * If function.
                 * @param error.code === 'PASSWORD_TOO_SHORT' - error.code === 'PASSWORD_TOO_SHORT' parameter.
                 */ /**
                * If function.
                * @param error.code === 'PASSWORD_TOO_SHORT' - error.code === 'PASSWORD_TOO_SHORT' parameter.
                */
                errorMessage = 'Le mot de passe doit contenir au moins 8 caractères.';
            }
            else if (_error.code === 'PASSWORD_TOO_WEAK') {
                /**
                 * If function.
                 * @param error.code === 'PASSWORD_TOO_WEAK' - error.code === 'PASSWORD_TOO_WEAK' parameter.
                 */ /**
                * If function.
                * @param error.code === 'PASSWORD_TOO_WEAK' - error.code === 'PASSWORD_TOO_WEAK' parameter.
                */
                errorMessage =
                    'Le mot de passe doit contenir au moins une majuscule, une minuscule et un chiffre.';
            }
            toast({
                title: 'Erreur',
                description: errorMessage,
                variant: 'destructive',
            });
        }
        finally {
            setIsSubmitting(false);
        }
    }; /**
     * If function.
     * @param resetComplete - ResetComplete parameter.
     */ /**
    * If function.
    * @param resetComplete - ResetComplete parameter.
    */
    if (resetComplete) {
        return ((0, jsx_runtime_1.jsx)("div", { className: 'min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'w-full max-w-md', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'mx-auto w-12 h-12 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-4', children: (0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'w-6 h-6 text-green-600 dark:text-green-400' }) }), (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-2xl font-bold', children: "Mot de passe r\u00E9initialis\u00E9" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Votre mot de passe a \u00E9t\u00E9 mis \u00E0 jour avec succ\u00E8s. Vous pouvez maintenant vous connecter avec votre nouveau mot de passe." })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(button_1.Button, { asChild: true, className: 'w-full', children: (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: '/login', children: "Se connecter" }) }) })] }) }));
    } /**
     * If function.
     * @param !token - !token parameter.
     */ /**
    * If function.
    * @param !token - !token parameter.
    */
    if (!token) {
        return ((0, jsx_runtime_1.jsx)("div", { className: 'min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'w-full max-w-md', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'text-center', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-2xl font-bold', children: "Lien invalide" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Le lien de r\u00E9initialisation est invalide ou manquant." })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { asChild: true, className: 'w-full', children: (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: '/forgot-password', children: "Demander un nouveau lien" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'ghost', asChild: true, className: 'w-full', children: (0, jsx_runtime_1.jsxs)(wouter_1.Link, { href: '/login', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), "Retour \u00E0 la connexion"] }) })] }) })] }) }));
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: 'min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'w-full max-w-md', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'text-center', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-2xl font-bold', children: "R\u00E9initialiser le mot de passe" }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: "Entrez votre nouveau mot de passe" })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'password', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Nouveau mot de passe" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { type: showPassword ? 'text' : 'password', placeholder: 'Entrez votre nouveau mot de passe', className: 'pr-10', "data-testid": 'input-password', ...field }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowPassword(!showPassword), "data-testid": 'button-toggle-password', children: [showPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4 text-gray-400' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4 text-gray-400' })), (0, jsx_runtime_1.jsx)("span", { className: 'sr-only', children: showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe' })] })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'confirmPassword', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Confirmer le mot de passe" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { type: showConfirmPassword ? 'text' : 'password', placeholder: 'Confirmez votre nouveau mot de passe', className: 'pr-10', "data-testid": 'input-confirm-password', ...field }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowConfirmPassword(!showConfirmPassword), "data-testid": 'button-toggle-confirm-password', children: [showConfirmPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4 text-gray-400' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4 text-gray-400' })), (0, jsx_runtime_1.jsx)("span", { className: 'sr-only', children: showConfirmPassword
                                                                        ? 'Masquer le mot de passe'
                                                                        : 'Afficher le mot de passe' })] })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', className: 'w-full', disabled: isSubmitting, children: isSubmitting ? 'Réinitialisation...' : 'Réinitialiser le mot de passe' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-center', children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'ghost', asChild: true, children: (0, jsx_runtime_1.jsxs)(wouter_1.Link, { href: '/login', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), "Retour \u00E0 la connexion"] }) }) })] }) }) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,