596d366c56369bf5011eb1500cbd8238
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceForm = InvoiceForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const lucide_react_1 = require("lucide-react");
const date_fns_1 = require("date-fns");
const SharedUploader_1 = require("@/components/document-management/SharedUploader");
const GeminiInvoiceExtractor_1 = require("./GeminiInvoiceExtractor");
const button_1 = require("@/components/ui/button");
const card_1 = require("@/components/ui/card");
const form_1 = require("@/components/ui/form");
const input_1 = require("@/components/ui/input");
const radio_group_1 = require("@/components/ui/radio-group");
const calendar_1 = require("@/components/ui/calendar");
const popover_1 = require("@/components/ui/popover");
const alert_1 = require("@/components/ui/alert");
const badge_1 = require("@/components/ui/badge");
const separator_1 = require("@/components/ui/separator");
const use_toast_1 = require("@/hooks/use-toast");
const schema_1 = require("@shared/schema");
const utils_1 = require("@/lib/utils");
/**
 * InvoiceForm Component
 *
 * A comprehensive form for creating and editing invoices with AI-powered data extraction.
 * Integrates SharedUploader for file handling and GeminiInvoiceExtractor for automatic
 * field population from uploaded invoice documents.
 *
 * Features:
 * - SharedUploader integration for file and text content
 * - AI-powered invoice data extraction with confidence scoring
 * - Conditional recurring payment fields with standard and custom frequencies
 * - Dynamic custom date management with useFieldArray
 * - Real-time form validation with Zod
 * - Mobile-optimized responsive design
 */
function InvoiceForm({ buildingId, residenceId, onSuccess, onCancel, initialData, mode = 'create' }) {
    const { toast } = (0, use_toast_1.useToast)();
    // State for uploaded file and AI extraction
    const [uploadedFile, setUploadedFile] = (0, react_1.useState)(null);
    const [extractionStatus, setExtractionStatus] = (0, react_1.useState)({ loading: false, success: false });
    // Form setup with validation
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(schema_1.invoiceFormSchema),
        defaultValues: {
            vendorName: initialData?.vendorName || '',
            invoiceNumber: initialData?.invoiceNumber || '',
            totalAmount: initialData?.totalAmount || 0,
            dueDate: initialData?.dueDate || new Date(),
            paymentType: initialData?.paymentType || 'one-time',
            frequency: initialData?.frequency || undefined,
            startDate: initialData?.startDate || undefined,
            customPaymentDates: initialData?.customPaymentDates || [],
            buildingId: buildingId,
            residenceId: residenceId,
            isAiExtracted: initialData?.isAiExtracted || false,
            ...initialData
        }
    });
    // Field array for custom payment dates
    const { fields, append, remove } = (0, react_hook_form_1.useFieldArray)({
        control: form.control,
        name: 'customPaymentDates'
    });
    // Watch payment type and frequency for conditional rendering
    const paymentType = form.watch('paymentType');
    const frequency = form.watch('frequency');
    // Handle file upload from SharedUploader
    const handleDocumentChange = (0, react_1.useCallback)((file, textContent) => {
        if (file) {
            console.log('[INVOICE FORM] File uploaded:', file.name);
            setUploadedFile(file);
            setExtractionStatus({ loading: true, success: false });
        }
        else if (textContent) {
            console.log('[INVOICE FORM] Text content provided - no AI extraction needed');
            toast({
                title: "Text Content Added",
                description: "You can now fill in the invoice details manually.",
            });
        }
    }, [toast]);
    // Handle AI extraction completion
    const handleExtractionComplete = (0, react_1.useCallback)((result) => {
        setExtractionStatus({
            loading: false,
            success: result.success,
            confidence: result.confidence,
            error: result.error
        });
        if (result.success && result.formData) {
            console.log('[INVOICE FORM] AI extraction successful:', result.formData);
            // Populate form with extracted data using reset
            form.reset({
                ...form.getValues(),
                ...result.formData,
                isAiExtracted: true,
                extractionConfidence: result.confidence
            });
            toast({
                title: "AI Extraction Successful",
                description: `Invoice data extracted with ${Math.round((result.confidence || 0) * 100)}% confidence. Please review and adjust as needed.`,
            });
        }
        else if (result.error) {
            console.error('[INVOICE FORM] AI extraction failed:', result.error);
            toast({
                title: "Extraction Failed",
                description: result.error,
                variant: "destructive",
            });
        }
    }, [form, toast]);
    // Add custom payment date
    const addCustomDate = () => {
        append(new Date());
    };
    // Remove custom payment date
    const removeCustomDate = (index) => {
        remove(index);
    };
    // Form submission
    const onSubmit = async (data) => {
        try {
            console.log('[INVOICE FORM] Submitting invoice:', data);
            // TODO: Implement API call to create/update invoice
            // This will be implemented in the next task
            toast({
                title: mode === 'create' ? "Invoice Created" : "Invoice Updated",
                description: "Invoice has been successfully saved.",
            });
            onSuccess?.(data);
        }
        catch (error) {
            console.error('[INVOICE FORM] Submission error:', error);
            toast({
                title: "Error",
                description: error.message || "Failed to save invoice",
                variant: "destructive",
            });
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [extractionStatus.loading && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: "h-4 w-4 animate-spin" }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: "Extracting invoice data with AI... This may take a few seconds." })] })), extractionStatus.success && extractionStatus.confidence !== undefined && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: "h-4 w-4" }), (0, jsx_runtime_1.jsxs)(alert_1.AlertDescription, { children: ["AI extraction completed with ", Math.round(extractionStatus.confidence * 100), "% confidence.", (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "outline", className: "ml-2", children: extractionStatus.confidence > 0.8 ? 'High Confidence' :
                                    extractionStatus.confidence > 0.5 ? 'Medium Confidence' : 'Low Confidence' })] })] })), extractionStatus.error && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: "destructive", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: "h-4 w-4" }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: extractionStatus.error })] })), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "h-5 w-5" }), "Upload Invoice Document"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)(SharedUploader_1.SharedUploader, { onDocumentChange: handleDocumentChange, allowedFileTypes: ['application/pdf', 'image/*'], maxFileSize: 25, defaultTab: "file", "data-testid": "invoice-uploader" }), uploadedFile && ((0, jsx_runtime_1.jsx)("div", { className: "mt-4 p-3 bg-muted rounded-lg", children: (0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-muted-foreground", children: ["Uploaded: ", (0, jsx_runtime_1.jsx)("span", { className: "font-medium", children: uploadedFile.name })] }) }))] })] }), (0, jsx_runtime_1.jsx)(GeminiInvoiceExtractor_1.GeminiInvoiceExtractor, { file: uploadedFile, onExtractionComplete: handleExtractionComplete }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Invoice Details" }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "vendorName", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Vendor Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: "e.g., Hydro Quebec", "data-testid": "input-vendor-name" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "invoiceNumber", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Invoice Number *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: "e.g., INV-2024-001", "data-testid": "input-invoice-number" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "totalAmount", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Total Amount (CAD) *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: "number", step: "0.01", placeholder: "0.00", onChange: (e) => field.onChange(parseFloat(e.target.value) || 0), "data-testid": "input-total-amount" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "dueDate", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Due Date *" }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: (0, utils_1.cn)("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground"), "data-testid": "button-due-date", children: [field.value ? ((0, date_fns_1.format)(field.value, "PPP")) : ((0, jsx_runtime_1.jsx)("span", { children: "Pick a date" })), (0, jsx_runtime_1.jsx)(lucide_react_1.CalendarIcon, { className: "ml-auto h-4 w-4 opacity-50" })] }) }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-auto p-0", align: "start", children: (0, jsx_runtime_1.jsx)(calendar_1.Calendar, { mode: "single", selected: field.value, onSelect: field.onChange, disabled: (date) => date < new Date("1900-01-01"), initialFocus: true }) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(separator_1.Separator, {}), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium", children: "Payment Structure" }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "paymentType", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Type *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(radio_group_1.RadioGroup, { onValueChange: field.onChange, value: field.value, className: "flex flex-col space-y-2", "data-testid": "radio-payment-type", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "one-time", id: "one-time" }), (0, jsx_runtime_1.jsx)("label", { htmlFor: "one-time", className: "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", children: "One-time Payment" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "recurring", id: "recurring" }), (0, jsx_runtime_1.jsx)("label", { htmlFor: "recurring", className: "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", children: "Recurring Payment" })] })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), paymentType === 'recurring' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4 p-4 bg-muted/50 rounded-lg", children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-medium", children: "Recurring Payment Options" }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "frequency", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Frequency *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(radio_group_1.RadioGroup, { onValueChange: field.onChange, value: field.value, className: "grid grid-cols-2 gap-4", "data-testid": "radio-frequency", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "monthly", id: "monthly" }), (0, jsx_runtime_1.jsx)("label", { htmlFor: "monthly", className: "text-sm", children: "Monthly" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "quarterly", id: "quarterly" }), (0, jsx_runtime_1.jsx)("label", { htmlFor: "quarterly", className: "text-sm", children: "Quarterly" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "annually", id: "annually" }), (0, jsx_runtime_1.jsx)("label", { htmlFor: "annually", className: "text-sm", children: "Annually" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)(radio_group_1.RadioGroupItem, { value: "custom", id: "custom" }), (0, jsx_runtime_1.jsx)("label", { htmlFor: "custom", className: "text-sm", children: "Custom Dates" })] })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), frequency && ['monthly', 'quarterly', 'annually'].includes(frequency) && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "startDate", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Start Date *" }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: (0, utils_1.cn)("w-full pl-3 text-left font-normal", !field.value && "text-muted-foreground"), "data-testid": "button-start-date", children: [field.value ? ((0, date_fns_1.format)(field.value, "PPP")) : ((0, jsx_runtime_1.jsx)("span", { children: "Pick start date" })), (0, jsx_runtime_1.jsx)(lucide_react_1.CalendarIcon, { className: "ml-auto h-4 w-4 opacity-50" })] }) }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-auto p-0", align: "start", children: (0, jsx_runtime_1.jsx)(calendar_1.Calendar, { mode: "single", selected: field.value, onSelect: field.onChange, disabled: (date) => date < new Date("1900-01-01"), initialFocus: true }) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), frequency === 'custom' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Custom Payment Dates *" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: addCustomDate, "data-testid": "button-add-date", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "h-4 w-4 mr-2" }), "Add Date"] })] }), fields.length === 0 && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-muted-foreground", children: "No custom dates added. Click \"Add Date\" to add payment dates." })), (0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: fields.map((field, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: `customPaymentDates.${index}`, render: ({ field: dateField }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex-1", children: [(0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", className: (0, utils_1.cn)("w-full pl-3 text-left font-normal", !dateField.value && "text-muted-foreground"), "data-testid": `button-custom-date-${index}`, children: [dateField.value ? ((0, date_fns_1.format)(dateField.value, "PPP")) : ((0, jsx_runtime_1.jsx)("span", { children: "Pick a date" })), (0, jsx_runtime_1.jsx)(lucide_react_1.CalendarIcon, { className: "ml-auto h-4 w-4 opacity-50" })] }) }) }), (0, jsx_runtime_1.jsx)(popover_1.PopoverContent, { className: "w-auto p-0", align: "start", children: (0, jsx_runtime_1.jsx)(calendar_1.Calendar, { mode: "single", selected: dateField.value, onSelect: dateField.onChange, disabled: (date) => date < new Date(), initialFocus: true }) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: () => removeCustomDate(index), "data-testid": `button-remove-date-${index}`, children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "h-4 w-4" }) })] }, field.id))) })] }))] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end space-x-4 pt-6", children: [onCancel && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: onCancel, "data-testid": "button-cancel", children: "Cancel" })), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", "data-testid": "button-submit", children: mode === 'create' ? 'Create Invoice' : 'Update Invoice' })] })] }) }) })] })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,