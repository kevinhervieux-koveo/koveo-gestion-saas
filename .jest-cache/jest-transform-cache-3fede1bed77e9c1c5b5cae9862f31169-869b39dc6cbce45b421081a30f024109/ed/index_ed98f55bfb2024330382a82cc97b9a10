99a8b8e1905a59efab63f7c0fdaf2e51
'use strict';
var keyboard = require('./keyboard.js');
var index = require('./pointer/index.js');
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
/**
 * @internal Do not create/alter this by yourself as this type might be subject to changes.
 */ class System {
    getUIEventModifiers() {
        return {
            altKey: this.keyboard.modifiers.Alt,
            ctrlKey: this.keyboard.modifiers.Control,
            metaKey: this.keyboard.modifiers.Meta,
            shiftKey: this.keyboard.modifiers.Shift,
            modifierAltGraph: this.keyboard.modifiers.AltGraph,
            modifierCapsLock: this.keyboard.modifiers.CapsLock,
            modifierFn: this.keyboard.modifiers.Fn,
            modifierFnLock: this.keyboard.modifiers.FnLock,
            modifierNumLock: this.keyboard.modifiers.NumLock,
            modifierScrollLock: this.keyboard.modifiers.ScrollLock,
            modifierSymbol: this.keyboard.modifiers.Symbol,
            modifierSymbolLock: this.keyboard.modifiers.SymbolLock
        };
    }
    constructor() {
        _define_property(this, "keyboard", new keyboard.KeyboardHost(this));
        _define_property(this, "pointer", new index.PointerHost(this));
    }
}
exports.System = System;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3N5c3RlbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDeEMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFMUMsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUs7SUFDckMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDNUIsS0FBSyxFQUFFLEtBQUs7WUFDWixVQUFVLEVBQUUsSUFBSTtZQUNoQixZQUFZLEVBQUUsSUFBSTtZQUNsQixRQUFRLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDUCxDQUFDO1NBQU0sQ0FBQztRQUNKLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUNEOztHQUVHLENBQUMsTUFBTSxNQUFNO0lBQ1osbUJBQW1CO1FBQ2YsT0FBTztZQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHO1lBQ25DLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPO1lBQ3hDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJO1lBQ3JDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLO1lBQ3ZDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVE7WUFDbEQsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUTtZQUNsRCxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxjQUFjLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTTtZQUM5QyxlQUFlLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTztZQUNoRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVO1lBQ3RELGNBQWMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNO1lBQzlDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQVU7U0FDekQsQ0FBQztJQUNOLENBQUM7SUFDRDtRQUNJLGdCQUFnQixDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEUsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0NBQ0o7QUFFRCxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQvZGlzdC9janMvc3lzdGVtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGtleWJvYXJkID0gcmVxdWlyZSgnLi9rZXlib2FyZC5qcycpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnLi9wb2ludGVyL2luZGV4LmpzJyk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVfcHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbi8qKlxuICogQGludGVybmFsIERvIG5vdCBjcmVhdGUvYWx0ZXIgdGhpcyBieSB5b3Vyc2VsZiBhcyB0aGlzIHR5cGUgbWlnaHQgYmUgc3ViamVjdCB0byBjaGFuZ2VzLlxuICovIGNsYXNzIFN5c3RlbSB7XG4gICAgZ2V0VUlFdmVudE1vZGlmaWVycygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFsdEtleTogdGhpcy5rZXlib2FyZC5tb2RpZmllcnMuQWx0LFxuICAgICAgICAgICAgY3RybEtleTogdGhpcy5rZXlib2FyZC5tb2RpZmllcnMuQ29udHJvbCxcbiAgICAgICAgICAgIG1ldGFLZXk6IHRoaXMua2V5Ym9hcmQubW9kaWZpZXJzLk1ldGEsXG4gICAgICAgICAgICBzaGlmdEtleTogdGhpcy5rZXlib2FyZC5tb2RpZmllcnMuU2hpZnQsXG4gICAgICAgICAgICBtb2RpZmllckFsdEdyYXBoOiB0aGlzLmtleWJvYXJkLm1vZGlmaWVycy5BbHRHcmFwaCxcbiAgICAgICAgICAgIG1vZGlmaWVyQ2Fwc0xvY2s6IHRoaXMua2V5Ym9hcmQubW9kaWZpZXJzLkNhcHNMb2NrLFxuICAgICAgICAgICAgbW9kaWZpZXJGbjogdGhpcy5rZXlib2FyZC5tb2RpZmllcnMuRm4sXG4gICAgICAgICAgICBtb2RpZmllckZuTG9jazogdGhpcy5rZXlib2FyZC5tb2RpZmllcnMuRm5Mb2NrLFxuICAgICAgICAgICAgbW9kaWZpZXJOdW1Mb2NrOiB0aGlzLmtleWJvYXJkLm1vZGlmaWVycy5OdW1Mb2NrLFxuICAgICAgICAgICAgbW9kaWZpZXJTY3JvbGxMb2NrOiB0aGlzLmtleWJvYXJkLm1vZGlmaWVycy5TY3JvbGxMb2NrLFxuICAgICAgICAgICAgbW9kaWZpZXJTeW1ib2w6IHRoaXMua2V5Ym9hcmQubW9kaWZpZXJzLlN5bWJvbCxcbiAgICAgICAgICAgIG1vZGlmaWVyU3ltYm9sTG9jazogdGhpcy5rZXlib2FyZC5tb2RpZmllcnMuU3ltYm9sTG9ja1xuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwia2V5Ym9hcmRcIiwgbmV3IGtleWJvYXJkLktleWJvYXJkSG9zdCh0aGlzKSk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJwb2ludGVyXCIsIG5ldyBpbmRleC5Qb2ludGVySG9zdCh0aGlzKSk7XG4gICAgfVxufVxuXG5leHBvcnRzLlN5c3RlbSA9IFN5c3RlbTtcbiJdLCJ2ZXJzaW9uIjozfQ==