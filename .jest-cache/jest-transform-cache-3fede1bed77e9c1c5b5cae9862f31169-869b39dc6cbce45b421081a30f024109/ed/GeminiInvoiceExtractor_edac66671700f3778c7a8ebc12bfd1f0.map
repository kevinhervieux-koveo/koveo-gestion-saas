{"file":"/home/runner/workspace/client/src/components/invoices/GeminiInvoiceExtractor.tsx","mappings":";;AAgCA,wDAoEC;AApGD,iCAAkC;AAClC,uDAAoD;AACpD,2CAAmF;AAgBnF;;;;;;;;;;;;;GAaG;AACH,SAAgB,sBAAsB,CAAC,EAAE,IAAI,EAAE,oBAAoB,EAA+B;IAEhG,0CAA0C;IAC1C,MAAM,kBAAkB,GAAG,IAAA,yBAAW,EAAC;QACrC,UAAU,EAAE,KAAK,EAAE,WAAiB,EAAE,EAAE;YACtC,kCAAkC;YAClC,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;YAChC,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAE5C,0CAA0C;YAC1C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,4BAA4B,EAAE;gBACzD,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,QAAQ;gBACd,wEAAwE;aACzE,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;YAC5D,CAAC;YAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;QACD,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;YAElB,0CAA0C;YAC1C,MAAM,QAAQ,GAAG,IAAA,oCAA2B,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAExD,iDAAiD;YACjD,oBAAoB,CAAC;gBACnB,OAAO,EAAE,IAAI;gBACb,QAAQ;gBACR,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAU;gBACrC,OAAO,EAAE,IAAI,CAAC,IAAI;aACnB,CAAC,CAAC;QACL,CAAC;QACD,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE;YACtB,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAC;YAE9D,+BAA+B;YAC/B,IAAI,YAAY,GAAG,gCAAgC,CAAC;YAEpD,IAAI,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,qBAAqB,CAAC,EAAE,CAAC;gBACnD,YAAY,GAAG,gEAAgE,CAAC;YAClF,CAAC;iBAAM,IAAI,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,uBAAuB,CAAC,EAAE,CAAC;gBAC5D,YAAY,GAAG,2DAA2D,CAAC;YAC7E,CAAC;iBAAM,IAAI,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;gBACrD,YAAY,GAAG,4DAA4D,CAAC;YAC9E,CAAC;iBAAM,IAAI,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,qBAAqB,CAAC,EAAE,CAAC;gBAC1D,YAAY,GAAG,yEAAyE,CAAC;YAC3F,CAAC;YAED,0BAA0B;YAC1B,oBAAoB,CAAC;gBACnB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,YAAY;aACpB,CAAC,CAAC;QACL,CAAC;KACF,CAAC,CAAC;IAEH,uCAAuC;IACvC,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC;YAC1C,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;IACH,CAAC,EAAE,CAAC,IAAI,EAAE,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC;IAEzC,wEAAwE;IACxE,OAAO,IAAI,CAAC;AACd,CAAC","names":[],"sources":["/home/runner/workspace/client/src/components/invoices/GeminiInvoiceExtractor.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { AiExtractionResponse, convertAiResponseToFormData } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface GeminiInvoiceExtractorProps {\n  /** The invoice file to process with AI extraction */\n  file: File | null;\n  /** Callback function to return extracted data to the parent component */\n  onExtractionComplete: (data: {\n    success: boolean;\n    formData?: any;\n    confidence?: number;\n    error?: string;\n    rawData?: AiExtractionResponse;\n  }) => void;\n}\n\n/**\n * GeminiInvoiceExtractor Component\n * \n * A client-side component that manages AI-powered invoice data extraction.\n * This component does not render any UI - it purely handles the API integration\n * for sending uploaded files to the Gemini AI service for structured data extraction.\n * \n * Features:\n * - TanStack Query integration with useMutation\n * - Automatic extraction triggering when file changes\n * - Structured error handling and response formatting\n * - Form data conversion for easy integration with react-hook-form\n * - Confidence scoring and extraction metadata\n */\nexport function GeminiInvoiceExtractor({ file, onExtractionComplete }: GeminiInvoiceExtractorProps) {\n  \n  // Mutation for AI invoice data extraction\n  const extractionMutation = useMutation({\n    mutationFn: async (invoiceFile: File) => {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('invoiceFile', invoiceFile);\n      \n      // Make API request to extraction endpoint\n      const response = await fetch('/api/invoices/extract-data', {\n        method: 'POST',\n        body: formData,\n        // Note: Don't set Content-Type header - let browser set it for FormData\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data) => {\n      \n      // Convert AI response to form data format\n      const formData = convertAiResponseToFormData(data.data);\n      \n      // Call the success callback with structured data\n      onExtractionComplete({\n        success: true,\n        formData,\n        confidence: data.metadata?.confidence,\n        rawData: data.data\n      });\n    },\n    onError: (error: any) => {\n      console.error('[GEMINI EXTRACTOR] Extraction failed:', error);\n      \n      // Handle different error types\n      let errorMessage = 'Failed to extract invoice data';\n      \n      if (error.message?.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = 'Too many extraction requests. Please wait before trying again.';\n      } else if (error.message?.includes('UNSUPPORTED_FILE_TYPE')) {\n        errorMessage = 'Unsupported file type. Please upload a PDF or image file.';\n      } else if (error.message?.includes('FILE_TOO_LARGE')) {\n        errorMessage = 'File is too large. Please upload a file smaller than 25MB.';\n      } else if (error.message?.includes('SERVICE_UNAVAILABLE')) {\n        errorMessage = 'AI extraction service is currently unavailable. Please try again later.';\n      }\n      \n      // Call the error callback\n      onExtractionComplete({\n        success: false,\n        error: errorMessage\n      });\n    }\n  });\n  \n  // Trigger extraction when file changes\n  useEffect(() => {\n    if (file && !extractionMutation.isPending) {\n      extractionMutation.mutate(file);\n    }\n  }, [file, extractionMutation.isPending]);\n  \n  // This component doesn't render anything - it's purely for side effects\n  return null;\n}\n\n// Export the component type for reuse\nexport type { GeminiInvoiceExtractorProps };"],"version":3}