03ecea1138bc6bed631e0eb5d9cf98cc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock the API request
globals_1.jest.mock('@/lib/queryClient', () => ({
    apiRequest: globals_1.jest.fn(),
}));
// Mock toast hook
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({
        toast: globals_1.jest.fn(),
    }),
}));
// Mock useLanguage hook with proper translations
globals_1.jest.mock('@/hooks/use-language', () => ({
    useLanguage: () => ({
        t: (key) => {
            const translations = {
                pendingInvitations: 'Pending Invitations',
                managePendingInvitations: 'Manage pending user invitations. Only pending invitations are shown.',
                loadingInvitations: 'Loading invitations...',
                noInvitationsFound: 'No pending invitations found',
                email: 'Email',
                role: 'Role',
                organization: 'Organization',
                building: 'Building',
                residence: 'Residence',
                expires: 'Expires',
                status: 'Status',
                actions: 'Actions',
                unit: 'Unit',
                expired: 'Expired',
                pending: 'Pending',
                deleteInvitation: 'Delete Invitation',
                deleteInvitationConfirm: 'Are you sure you want to delete the invitation for {email}? This action cannot be undone.',
                cancel: 'Cancel',
                invitationDeletedSuccess: 'Invitation deleted successfully',
                invitationDeletedError: 'Failed to delete invitation',
            };
            return translations[key] || key;
        },
        language: 'en',
    }),
    LanguageProvider: ({ children }) => children,
}));
const react_1 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
const InvitationManagement_1 = require("@/components/InvitationManagement");
// LanguageProvider is now mocked above
const queryClient_1 = require("@/lib/queryClient");
const mockApiRequest = queryClient_1.apiRequest;
// Mock data for invitations
const mockInvitations = [
    {
        id: '1',
        email: 'john.doe@example.com',
        role: 'manager',
        status: 'pending',
        expiresAt: new Date(Date.now() + 86400000).toISOString(), // 1 day from now
        createdAt: new Date().toISOString(),
        organizationId: 'org-1',
        buildingId: 'building-1',
        residenceId: 'residence-1',
        organizationName: 'Test Organization',
        buildingName: 'Test Building',
        residenceUnitNumber: '101',
        invitedByName: 'Admin User'
    },
    {
        id: '2',
        email: 'jane.smith@example.com',
        role: 'tenant',
        status: 'pending',
        expiresAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago (expired)
        createdAt: new Date().toISOString(),
        organizationId: null,
        buildingId: null,
        residenceId: null,
        organizationName: null,
        buildingName: null,
        residenceUnitNumber: null,
        invitedByName: 'Manager User'
    }
];
// Test wrapper component
const TestWrapper = ({ children }) => {
    const queryClient = new react_query_1.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
            },
        },
    });
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: children }));
};
(0, globals_1.describe)('Invitation Tab Translation Coverage', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        document.body.innerHTML = '';
    });
    (0, globals_1.describe)('Loading State Translations', () => {
        (0, globals_1.it)('should display loading state with translated text', async () => {
            mockApiRequest.mockImplementation(() => new Promise(() => { }) // Never resolves to simulate loading
            );
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            // Check for loading state translations
            (0, globals_1.expect)(react_1.screen.getByText('Pending Invitations')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Loading invitations...')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Empty State Translations', () => {
        (0, globals_1.it)('should display no data message when no invitations exist', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve([]),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByTestId('no-invitations-message')).toBeInTheDocument();
            });
            // The NoDataCard component should handle the translation
            (0, globals_1.expect)(react_1.screen.getByTestId('no-invitations-message-title')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('no-invitations-message-description')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Table Header Translations', () => {
        (0, globals_1.it)('should display all table headers with proper translations', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Check that all table headers are rendered with translations
            const expectedHeaders = [
                'Email',
                'Role',
                'Organization',
                'Building',
                'Residence',
                'Expires',
                'Status',
                'Actions',
            ];
            expectedHeaders.forEach(header => {
                (0, globals_1.expect)(react_1.screen.getAllByText(header)[0]).toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('Invitation Data Display Translations', () => {
        (0, globals_1.it)('should display invitation data with proper translations', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Check for "Unit" translation
            (0, globals_1.expect)(react_1.screen.getByText('Unit 101')).toBeInTheDocument();
            // Check for status translations
            (0, globals_1.expect)(react_1.screen.getByText('Pending')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Expired')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Delete Dialog Translations', () => {
        (0, globals_1.it)('should display delete confirmation dialog with proper translations', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Click delete button for first invitation
            const deleteButton = react_1.screen.getByTestId('button-delete-invitation-1');
            react_1.fireEvent.click(deleteButton);
            await (0, react_1.waitFor)(() => {
                // Check delete dialog translations
                (0, globals_1.expect)(react_1.screen.getByText('Delete Invitation')).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByText(/are you sure/i)).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByText('Cancel')).toBeInTheDocument();
            });
        });
        (0, globals_1.it)('should include email in delete confirmation message', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Click delete button for first invitation
            const deleteButton = react_1.screen.getByTestId('button-delete-invitation-1');
            react_1.fireEvent.click(deleteButton);
            await (0, react_1.waitFor)(() => {
                // The email should be included in the confirmation message
                (0, globals_1.expect)(react_1.screen.getByText(new RegExp(mockInvitations[0].email, 'i'))).toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('Success and Error Message Translations', () => {
        (0, globals_1.it)('should display success message on successful deletion', async () => {
            // Mock successful deletion
            mockApiRequest
                .mockResolvedValueOnce({
                json: () => Promise.resolve(mockInvitations),
            })
                .mockResolvedValueOnce({
                json: () => Promise.resolve({}),
            });
            const mockToast = globals_1.jest.fn();
            globals_1.jest.mocked(require('@/hooks/use-toast').useToast).mockReturnValue({
                toast: mockToast,
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Click delete button and confirm
            const deleteButton = react_1.screen.getByTestId('button-delete-invitation-1');
            react_1.fireEvent.click(deleteButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/delete invitation|supprimer l'invitation/i)).toBeInTheDocument();
            });
            // Find and click the confirm button (AlertDialogAction)
            const confirmButton = react_1.screen.getByRole('button', { name: /delete|supprimer/i });
            react_1.fireEvent.click(confirmButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockToast).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                    title: 'Success',
                    description: 'Invitation deleted successfully',
                }));
            });
        });
        (0, globals_1.it)('should display error message on failed deletion', async () => {
            // Mock failed deletion
            mockApiRequest
                .mockResolvedValueOnce({
                json: () => Promise.resolve(mockInvitations),
            })
                .mockRejectedValueOnce(new Error('Network error'));
            const mockToast = globals_1.jest.fn();
            globals_1.jest.mocked(require('@/hooks/use-toast').useToast).mockReturnValue({
                toast: mockToast,
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Click delete button and confirm
            const deleteButton = react_1.screen.getByTestId('button-delete-invitation-1');
            react_1.fireEvent.click(deleteButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(/delete invitation|supprimer l'invitation/i)).toBeInTheDocument();
            });
            // Find and click the confirm button (AlertDialogAction)
            const confirmButton = react_1.screen.getByRole('button', { name: /delete|supprimer/i });
            react_1.fireEvent.click(confirmButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockToast).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                    title: 'Error',
                    description: 'Failed to delete invitation',
                    variant: 'destructive',
                }));
            });
        });
    });
    (0, globals_1.describe)('Card Title and Description Translations', () => {
        (0, globals_1.it)('should display card title and description with translations', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Check card title
            (0, globals_1.expect)(react_1.screen.getByText('Pending Invitations')).toBeInTheDocument();
            // Check card description  
            (0, globals_1.expect)(react_1.screen.getByText('Manage pending user invitations. Only pending invitations are shown.')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Role Badge Translations', () => {
        (0, globals_1.it)('should display role badges correctly', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Check that roles are displayed as badges
            (0, globals_1.expect)(react_1.screen.getByText('manager')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('tenant')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Accessibility and Test IDs', () => {
        (0, globals_1.it)('should have proper test IDs for all interactive elements', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Check for invitation row test IDs
            (0, globals_1.expect)(react_1.screen.getByTestId('invitation-row-1')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('invitation-row-2')).toBeInTheDocument();
            // Check for delete button test IDs
            (0, globals_1.expect)(react_1.screen.getByTestId('button-delete-invitation-1')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('button-delete-invitation-2')).toBeInTheDocument();
        });
        (0, globals_1.it)('should have proper test ID for cancel button in delete dialog', async () => {
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve(mockInvitations),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText(mockInvitations[0].email)).toBeInTheDocument();
            });
            // Click delete button to open dialog
            const deleteButton = react_1.screen.getByTestId('button-delete-invitation-1');
            react_1.fireEvent.click(deleteButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByTestId('button-cancel-delete-invitation')).toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.it)('should handle missing invitation data gracefully', async () => {
            const incompleteInvitation = {
                id: '3',
                email: 'test@example.com',
                role: 'resident',
                status: 'pending',
                expiresAt: new Date().toISOString(),
                createdAt: new Date().toISOString(),
                organizationId: null,
                buildingId: null,
                residenceId: null,
                organizationName: null,
                buildingName: null,
                residenceUnitNumber: null,
                invitedByName: null
            };
            mockApiRequest.mockResolvedValue({
                json: () => Promise.resolve([incompleteInvitation]),
            });
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('test@example.com')).toBeInTheDocument();
            });
            // Should display dashes for missing data
            const dashElements = react_1.screen.getAllByText('—');
            (0, globals_1.expect)(dashElements.length).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should handle API errors gracefully', async () => {
            mockApiRequest.mockRejectedValue(new Error('Failed to fetch invitations'));
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(InvitationManagement_1.InvitationManagement, {}) }));
            // Component should render without crashing
            // The error handling should be done at the query level
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(document.body).toBeInTheDocument();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,