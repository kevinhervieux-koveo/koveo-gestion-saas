{"file":"/home/runner/workspace/shared/schemas/operations-test.ts","mappings":";AAAA;;;GAGG;;;AAEH,6BAAwB;AACxB,iDAA6C;AAE7C,wDAAwD;AAC3C,QAAA,cAAc,GAAG,IAAA,gBAAM,EAAC,aAAa,EAAE;IAClD,aAAa;IACb,WAAW;IACX,aAAa;IACb,OAAO;CACR,CAAC,CAAC;AAEU,QAAA,gBAAgB,GAAG,IAAA,gBAAM,EAAC,eAAe,EAAE;IACtD,OAAO;IACP,WAAW;IACX,cAAc;IACd,UAAU;IACV,aAAa;IACb,WAAW;IACX,UAAU;IACV,WAAW;CACZ,CAAC,CAAC;AAEH,4DAA4D;AAC/C,QAAA,kBAAkB,GAAG,OAAC,CAAC,MAAM,CAAC;IACzC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAC9B,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,WAAW,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IAClE,sBAAsB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACpD,qBAAqB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACnD,WAAW,EAAE,OAAC;SACX,MAAM,EAAE;SACR,GAAG,CAAC,EAAE,EAAE,4CAA4C,CAAC;SACrD,GAAG,CAAC,IAAI,EAAE,6CAA6C,CAAC;IAC3D,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IACrC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACzC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACxC,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC;IACvC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAEU,QAAA,yBAAyB,GAAG,OAAC,CAAC,MAAM,CAAC;IAChD,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAC3B,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAC9B,WAAW,EAAE,OAAC;SACX,MAAM,EAAE;SACR,GAAG,CAAC,CAAC,EAAE,6BAA6B,CAAC;SACrC,GAAG,CAAC,IAAI,EAAE,yCAAyC,CAAC;IACvD,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAClC,UAAU,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;CACvC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/shared/schemas/operations-test.ts"],"sourcesContent":["/**\n * @file Operations Schemas for Testing\n * @description Test-only version of operations schemas without circular dependencies\n */\n\nimport { z } from 'zod';\nimport { pgEnum } from 'drizzle-orm/pg-core';\n\n// Test-only enums (without database table dependencies)\nexport const demandTypeEnum = pgEnum('demand_type', [\n  'maintenance',\n  'complaint', \n  'information',\n  'other',\n]);\n\nexport const demandStatusEnum = pgEnum('demand_status', [\n  'draft',\n  'submitted',\n  'under_review',\n  'approved',\n  'in_progress',\n  'completed',\n  'rejected',\n  'cancelled',\n]);\n\n// Zod schemas for validation (what the tests actually need)\nexport const insertDemandSchema = z.object({\n  submitterId: z.string().uuid(),\n  type: z.enum(['maintenance', 'complaint', 'information', 'other']),\n  assignationResidenceId: z.string().uuid().optional(),\n  assignationBuildingId: z.string().uuid().optional(),\n  description: z\n    .string()\n    .min(10, 'Description must be at least 10 characters')\n    .max(2000, 'Description must not exceed 2000 characters'),\n  filePath: z.string().optional(),\n  fileName: z.string().optional(),\n  fileSize: z.number().int().optional(),\n  residenceId: z.string().uuid().optional(),\n  buildingId: z.string().uuid().optional(),\n  status: z.string().default('submitted'),\n  reviewNotes: z.string().optional(),\n});\n\nexport const insertDemandCommentSchema = z.object({\n  demandId: z.string().uuid(),\n  commenterId: z.string().uuid(),\n  commentText: z\n    .string()\n    .min(1, 'Comment content is required')\n    .max(1000, 'Comment must not exceed 1000 characters'),\n  commentType: z.string().optional(),\n  isInternal: z.boolean().default(false),\n});\n\n// Type exports\nexport type InsertDemand = z.infer<typeof insertDemandSchema>;\nexport type InsertDemandComment = z.infer<typeof insertDemandCommentSchema>;"],"version":3}