f8366bf4ee0ec063dee2df9e1c8d3599
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.monthlyBudgetService = exports.MonthlyBudgetService = void 0;
const db_1 = require("../db");
const drizzle_orm_1 = require("drizzle-orm");
const schema = __importStar(require("@shared/schema"));
const { monthlyBudgets, moneyFlow, buildings, users } = schema;
/**
 * Service for populating and managing monthly budget entries.
 * Creates budget entries for each building from construction date to 3 years in the future.
 * Populates with aggregated income and expense data from money_flow table.
 */
class MonthlyBudgetService {
    constructor() {
        this.YEARS_TO_PROJECT = 3;
    }
    /**
     * Populate monthly budget entries for all buildings.
     * Creates entries from construction date to 3 years in the future.
     */
    async populateAllMonthlyBudgets() {
        let budgetsCreated = 0;
        let buildingsProcessed = 0;
        try {
            // Get all active buildings
            const activeBuildings = await db_1.db.select().from(buildings).where((0, drizzle_orm_1.eq)(buildings.isActive, true));
            for (const building of activeBuildings) {
                try {
                    const buildingBudgets = await this.populateBudgetsForBuilding(building);
                    budgetsCreated += buildingBudgets;
                    buildingsProcessed++;
                    console.log(`✅ Created ${buildingBudgets} budget entries for building: ${building.name}`);
                }
                catch (error) {
                    console.error(`❌ Error processing building ${building.name}:`, error);
                    // Continue with other buildings
                }
            }
            console.log(`📊 Monthly budget population completed:
        - Buildings processed: ${buildingsProcessed}
        - Budget entries created: ${budgetsCreated}`);
            return {
                budgetsCreated,
                buildingsProcessed,
            };
        }
        catch (error) {
            console.error('❌ Error populating monthly budgets:', error);
            throw error;
        }
    }
    /**
     * Populate monthly budget entries for a specific building.
     * @param building
     */
    async populateBudgetsForBuilding(building) {
        // Calculate date range
        const constructionDate = new Date();
        if (building.yearBuilt) {
            constructionDate.setFullYear(building.yearBuilt, 0, 1); // January 1st of construction year
        }
        else {
            // If no construction year, start from current year
            constructionDate.setFullYear(constructionDate.getFullYear(), 0, 1);
        }
        const endDate = new Date();
        endDate.setFullYear(endDate.getFullYear() + this.YEARS_TO_PROJECT, 11, 31); // December 31st, 25 years from now
        console.log(`📅 Processing building ${building.name} from ${constructionDate.toISOString().slice(0, 10)} to ${endDate.toISOString().slice(0, 10)}`);
        // Get distinct income and expense categories for this building
        const { incomeCategories, expenseCategories } = await this.getCategoriesForBuilding(building.id);
        console.log(`📊 Found ${incomeCategories.length} income categories and ${expenseCategories.length} expense categories`);
        // Remove existing budget entries for this building to avoid duplicates
        await this.cleanupExistingBudgets(building.id);
        // Generate monthly entries
        const budgetEntries = [];
        const systemUser = await this.getSystemUser();
        const currentDate = new Date(constructionDate);
        while (currentDate <= endDate) {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth() + 1; // 1-12
            // Get aggregated amounts for this month/year
            const { incomes, spendings } = await this.getAggregatedAmountsForMonth(building.id, year, month, incomeCategories, expenseCategories);
            budgetEntries.push({
                buildingId: building.id,
                year,
                month,
                incomeTypes: incomeCategories,
                incomes: incomes, // Keep as number array
                spendingTypes: expenseCategories,
                spendings: spendings, // Keep as number array
                approved: false,
                approvedBy: undefined,
                originalBudgetId: undefined,
            });
            // Move to next month
            currentDate.setMonth(currentDate.getMonth() + 1);
            // Safety check to avoid infinite loops
            if (budgetEntries.length > 5000) {
                break;
            }
        }
        // Insert entries in batches
        if (budgetEntries.length > 0) {
            await this.insertBudgetEntriesInBatches(budgetEntries);
        }
        return budgetEntries.length;
    }
    /**
     * Get distinct income and expense categories from money_flow for a specific building.
     * @param buildingId
     */
    async getCategoriesForBuilding(buildingId) {
        // Get distinct income categories
        const incomeResult = await db_1.db
            .selectDistinct({ category: moneyFlow.category })
            .from(moneyFlow)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_1.eq)(moneyFlow.type, 'income')));
        // Get distinct expense categories
        const expenseResult = await db_1.db
            .selectDistinct({ category: moneyFlow.category })
            .from(moneyFlow)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_1.eq)(moneyFlow.type, 'expense')));
        const incomeCategories = incomeResult.map((r) => r.category);
        const expenseCategories = expenseResult.map((r) => r.category);
        // If no categories exist, provide defaults based on the enum definitions
        const defaultIncomeCategories = [
            'monthly_fees',
            'special_assessment',
            'late_fees',
            'parking_fees',
            'utility_reimbursement',
            'insurance_claim',
            'other_income',
        ];
        const defaultExpenseCategories = [
            'bill_payment',
            'maintenance_expense',
            'administrative_expense',
            'professional_services',
            'other_expense',
        ];
        return {
            incomeCategories: incomeCategories.length > 0 ? incomeCategories : defaultIncomeCategories,
            expenseCategories: expenseCategories.length > 0 ? expenseCategories : defaultExpenseCategories,
        };
    }
    /**
     * Get aggregated income and expense amounts for a specific month/year.
     * @param buildingId
     * @param year
     * @param month
     * @param incomeCategories
     * @param expenseCategories
     */
    async getAggregatedAmountsForMonth(buildingId, year, month, incomeCategories, expenseCategories) {
        const startDate = new Date(year, month - 1, 1); // First day of month
        const endDate = new Date(year, month, 0); // Last day of month
        const startDateStr = startDate.toISOString().split('T')[0];
        const endDateStr = endDate.toISOString().split('T')[0];
        // Get aggregated incomes by category
        const incomes = [];
        for (const category of incomeCategories) {
            const result = await db_1.db
                .select({
                total: (0, drizzle_orm_1.sql) `COALESCE(SUM(CAST(${moneyFlow.amount} AS DECIMAL)), 0)`,
            })
                .from(moneyFlow)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_1.eq)(moneyFlow.type, 'income'), (0, drizzle_orm_1.eq)(moneyFlow.category, category), (0, drizzle_orm_1.gte)(moneyFlow.transactionDate, startDateStr), (0, drizzle_orm_1.lte)(moneyFlow.transactionDate, endDateStr)));
            incomes.push(parseFloat(result[0]?.total || '0'));
        }
        // Get aggregated expenses by category
        const spendings = [];
        for (const category of expenseCategories) {
            const result = await db_1.db
                .select({
                total: (0, drizzle_orm_1.sql) `COALESCE(SUM(CAST(${moneyFlow.amount} AS DECIMAL)), 0)`,
            })
                .from(moneyFlow)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_1.eq)(moneyFlow.type, 'expense'), (0, drizzle_orm_1.eq)(moneyFlow.category, category), (0, drizzle_orm_1.gte)(moneyFlow.transactionDate, startDateStr), (0, drizzle_orm_1.lte)(moneyFlow.transactionDate, endDateStr)));
            spendings.push(parseFloat(result[0]?.total || '0'));
        }
        return { incomes, spendings };
    }
    /**
     * Clean up existing budget entries for a building to avoid duplicates.
     * @param buildingId
     */
    async cleanupExistingBudgets(buildingId) {
        await db_1.db.delete(monthlyBudgets).where((0, drizzle_orm_1.eq)(monthlyBudgets.buildingId, buildingId));
    }
    /**
     * Insert budget entries in batches to avoid database constraints.
     * @param entries
     * @param batchSize
     */
    async insertBudgetEntriesInBatches(entries, batchSize = 100) {
        for (let i = 0; i < entries.length; i += batchSize) {
            const batch = entries.slice(i, i + batchSize);
            try {
                await db_1.db.insert(monthlyBudgets).values(batch);
            }
            catch (error) {
                console.error(`❌ Error inserting batch at index ${i}:`, error);
                // Try individual inserts for the failed batch
                for (const entry of batch) {
                    try {
                        await db_1.db.insert(monthlyBudgets).values(entry);
                    }
                    catch (individualError) {
                        console.error(`❌ Error inserting individual budget entry:`, individualError);
                        // Skip this entry and continue
                    }
                }
            }
        }
    }
    /**
     * Get or create a system user for automated entries.
     */
    async getSystemUser() {
        // Try to find an existing system user
        const existingUser = await db_1.db
            .select({ id: users.id })
            .from(users)
            .where((0, drizzle_orm_1.eq)(users.email, 'system@koveo-gestion.com'))
            .limit(1);
        if (existingUser.length > 0) {
            return existingUser[0];
        }
        // If no system user exists, use the first admin user
        const adminUser = await db_1.db
            .select({ id: users.id })
            .from(users)
            .where((0, drizzle_orm_1.eq)(users.role, 'admin'))
            .limit(1);
        if (adminUser.length > 0) {
            return adminUser[0];
        }
        // Fallback: use any active user
        const anyUser = await db_1.db
            .select({ id: users.id })
            .from(users)
            .where((0, drizzle_orm_1.eq)(users.isActive, true))
            .limit(1);
        if (anyUser.length > 0) {
            return anyUser[0];
        }
        throw new Error('No active users found for system operations');
    }
    /**
     * Repopulate budgets for a specific building (useful when money flow data changes).
     * @param buildingId
     */
    async repopulateBudgetsForBuilding(buildingId) {
        const building = await db_1.db.select().from(buildings).where((0, drizzle_orm_1.eq)(buildings.id, buildingId)).limit(1);
        if (building.length === 0) {
            throw new Error(`Building ${buildingId} not found`);
        }
        const budgetsCreated = await this.populateBudgetsForBuilding(building[0]);
        console.log(`✅ Repopulated ${budgetsCreated} budget entries for building ${building[0].name}`);
        return budgetsCreated;
    }
    /**
     * Get budget statistics.
     */
    async getBudgetStatistics() {
        const [totalResult] = await db_1.db
            .select({ count: (0, drizzle_orm_1.sql) `count(*)::int` })
            .from(monthlyBudgets);
        const [buildingsResult] = await db_1.db
            .select({ count: (0, drizzle_orm_1.sql) `count(DISTINCT ${monthlyBudgets.buildingId})::int` })
            .from(monthlyBudgets);
        const [oldestResult] = await db_1.db
            .select({
            year: monthlyBudgets.year,
            month: monthlyBudgets.month,
        })
            .from(monthlyBudgets)
            .orderBy(monthlyBudgets.year, monthlyBudgets.month)
            .limit(1);
        const [newestResult] = await db_1.db
            .select({
            year: monthlyBudgets.year,
            month: monthlyBudgets.month,
        })
            .from(monthlyBudgets)
            .orderBy((0, drizzle_orm_1.sql) `${monthlyBudgets.year} DESC, ${monthlyBudgets.month} DESC`)
            .limit(1);
        const oldestDate = oldestResult
            ? `${oldestResult.year}-${String(oldestResult.month).padStart(2, '0')}`
            : null;
        const newestDate = newestResult
            ? `${newestResult.year}-${String(newestResult.month).padStart(2, '0')}`
            : null;
        return {
            totalBudgetEntries: totalResult.count,
            buildingsWithBudgets: buildingsResult.count,
            oldestBudgetDate: oldestDate,
            newestBudgetDate: newestDate,
        };
    }
}
exports.MonthlyBudgetService = MonthlyBudgetService;
// Export singleton instance
exports.monthlyBudgetService = new MonthlyBudgetService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,