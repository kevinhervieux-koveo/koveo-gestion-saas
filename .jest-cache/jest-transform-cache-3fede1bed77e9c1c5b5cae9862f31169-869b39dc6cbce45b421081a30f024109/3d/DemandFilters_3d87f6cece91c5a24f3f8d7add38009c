81b3d702db47d870240248190dced0f8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DemandFilters = DemandFilters;
exports.filterDemands = filterDemands;
const jsx_runtime_1 = require("react/jsx-runtime");
const lucide_react_1 = require("lucide-react");
const input_1 = require("@/components/ui/input");
const select_1 = require("@/components/ui/select");
const use_language_1 = require("@/hooks/use-language");
// Filter options for different user roles - now using translation keys
const getStatusOptions = (t) => [
    { value: 'all', label: t('allStatusFilter') },
    { value: 'draft', label: t('draftFilter') },
    { value: 'submitted', label: t('submittedFilter') },
    { value: 'under_review', label: t('underReviewFilter') },
    { value: 'approved', label: t('approvedFilter') },
    { value: 'in_progress', label: t('inProgressFilter') },
    { value: 'completed', label: t('completedFilter') },
    { value: 'rejected', label: t('rejectedFilter') },
    { value: 'cancelled', label: t('cancelledFilter') },
];
const getManagerStatusOptions = (t) => [
    { value: 'all', label: t('allStatusFilter') },
    { value: 'submitted', label: t('submittedFilter') },
    { value: 'under_review', label: t('underReviewFilter') },
    { value: 'approved', label: t('approvedFilter') },
    { value: 'in_progress', label: t('inProgressFilter') },
    { value: 'completed', label: t('completedFilter') },
    { value: 'rejected', label: t('rejectedFilter') },
];
const getTypeOptions = (t) => [
    { value: 'all', label: t('allTypesFilter') },
    { value: 'maintenance', label: t('maintenanceFilter') },
    { value: 'complaint', label: t('complaintFilter') },
    { value: 'information', label: t('informationFilter') },
    { value: 'other', label: t('otherFilter') },
];
/**
 * Common demand filtering component
 * Supports search, status, type, and optional building filters.
 * @param root0
 * @param root0.filters
 * @param root0.handlers
 * @param root0.userRole
 * @param root0.buildings
 * @param root0.searchPlaceholder
 * @param root0.className
 */
function DemandFilters({ filters, handlers, userRole = 'resident', buildings = [], searchPlaceholder, className = '', }) {
    const { t } = (0, use_language_1.useLanguage)();
    const statusOptions = userRole === 'manager' ? getManagerStatusOptions(t) : getStatusOptions(t);
    const typeOptions = getTypeOptions(t);
    const showBuildingFilter = userRole === 'manager' && handlers.onBuildingChange;
    const placeholder = searchPlaceholder || t('searchDemands');
    return ((0, jsx_runtime_1.jsxs)("div", { className: `flex items-center gap-4 flex-wrap ${className}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: 'relative flex-1 max-w-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'absolute left-3 top-3 h-4 w-4 text-muted-foreground' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: placeholder, value: filters.searchTerm, onChange: (e) => handlers.onSearchChange(e.target.value), className: 'pl-10', "data-testid": 'search-demands' })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.statusFilter, onValueChange: handlers.onStatusChange, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', "data-testid": 'filter-status', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('formStatus') }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: statusOptions.map((option) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: option.value, children: option.label }, option.value))) })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.typeFilter, onValueChange: handlers.onTypeChange, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', "data-testid": 'filter-type', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('formType') }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: typeOptions.map((option) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: option.value, children: option.label }, option.value))) })] }), showBuildingFilter && ((0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.buildingFilter || 'all', onValueChange: handlers.onBuildingChange, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', "data-testid": 'filter-building', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('building') }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: t('allBuildings') }), buildings.map((building) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: building.id, children: building.name }, building.id)))] })] }))] }));
}
// Utility function to filter demands based on filter state
/**
 *
 * @param demands
 * @param filters
 */
function filterDemands(demands, filters) {
    return demands.filter((demand) => {
        // Search filter
        const searchLower = filters.searchTerm.toLowerCase();
        const matchesSearch = !filters.searchTerm ||
            demand.description.toLowerCase().includes(searchLower) ||
            demand.type.toLowerCase().includes(searchLower) ||
            (demand.submitter &&
                (demand.submitter.firstName.toLowerCase().includes(searchLower) ||
                    demand.submitter.lastName.toLowerCase().includes(searchLower) ||
                    demand.submitter.email.toLowerCase().includes(searchLower)));
        // Status filter
        const matchesStatus = filters.statusFilter === 'all' || demand.status === filters.statusFilter;
        // Type filter
        const matchesType = filters.typeFilter === 'all' || demand.type === filters.typeFilter;
        // Building filter (optional)
        const matchesBuilding = !filters.buildingFilter ||
            filters.buildingFilter === 'all' ||
            demand.buildingId === filters.buildingFilter;
        return matchesSearch && matchesStatus && matchesType && matchesBuilding;
    });
}
exports.default = DemandFilters;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,