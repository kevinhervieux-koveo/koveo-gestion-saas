{"file":"/home/runner/workspace/jest.setup.minimal.ts","mappings":"AAAA;;;GAGG;AAiCH,2BAA2B;AAC3B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,EAAE,EAAE,MAAM;CACX,CAAC,CAAC,CAAC;AAEJ,6BAA6B;AAC7B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9B,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC;IACnC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC;IACpC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC;CACpC,CAAC,CAAC,CAAC;AAEJ,cAAc;AACd,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3B,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACjD,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;CAC9C,CAAC,CAAC,CAAC;AA/CJ,uCAAuC;AACvC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC;AAC/B,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC;AACjC,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,MAAM,CAAC;AAExC,uBAAuB;AACvB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;AAEzB,8BAA8B;AAC9B,MAAM,MAAM,GAAG;IACb,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACrB,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YACrB,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;SAC/D,CAAC,CAAC;KACJ,CAAC,CAAC;IACH,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACrB,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YACnB,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SAC1C,CAAC,CAAC;KACJ,CAAC,CAAC;IACH,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACrB,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAClB,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;SAC3D,CAAC,CAAC;KACJ,CAAC,CAAC;IACH,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;QACrB,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;KAC3D,CAAC,CAAC;CACJ,CAAC;AAoBF,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/jest.setup.minimal.ts"],"sourcesContent":["/**\n * Minimal Jest Setup for Testing Koveo Gestion Platform\n * Focused on preventing hanging and test failures\n */\n\n// Set test environment variables first\nprocess.env.NODE_ENV = 'test';\nprocess.env.TEST_TYPE = 'unit';\nprocess.env.USE_MOCK_DB = 'true';\nprocess.env.SKIP_DB_OPERATIONS = 'true';\n\n// Mock fetch for tests\nglobal.fetch = jest.fn();\n\n// Create simple database mock\nconst mockDb = {\n  insert: jest.fn(() => ({\n    values: jest.fn(() => ({\n      returning: jest.fn(() => Promise.resolve([{ id: 'mock-id' }])),\n    })),\n  })),\n  select: jest.fn(() => ({\n    from: jest.fn(() => ({\n      where: jest.fn(() => Promise.resolve([])),\n    })),\n  })),\n  update: jest.fn(() => ({\n    set: jest.fn(() => ({\n      where: jest.fn(() => Promise.resolve({ affectedRows: 1 })),\n    })),\n  })),\n  delete: jest.fn(() => ({\n    where: jest.fn(() => Promise.resolve({ affectedRows: 1 })),\n  })),\n};\n\n// Mock the database module\njest.mock('./server/db', () => ({\n  db: mockDb,\n}));\n\n// Mock drizzle-orm functions\njest.mock('drizzle-orm', () => ({\n  eq: jest.fn(() => 'mock-condition'),\n  and: jest.fn(() => 'mock-condition'),\n  or: jest.fn(() => 'mock-condition'),\n}));\n\n// Mock bcrypt\njest.mock('bcryptjs', () => ({\n  hash: jest.fn(() => Promise.resolve('mock-hash')),\n  compare: jest.fn(() => Promise.resolve(true)),\n}));\n\nconsole.log('âœ… Minimal Jest setup completed');"],"version":3}