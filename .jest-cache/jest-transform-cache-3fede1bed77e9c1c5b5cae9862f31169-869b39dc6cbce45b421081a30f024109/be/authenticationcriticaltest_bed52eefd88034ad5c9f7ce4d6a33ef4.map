{"file":"/home/runner/workspace/tests/integration/authentication-critical.test.ts","mappings":";AAAA;;;GAGG;;;;;AAEH,2CAAgE;AAChE,0DAAgC;AAChC,sDAA8B;AAC9B,4CAAoD;AAEpD,kDAAkD;AAClD,MAAM,aAAa,GAAG,GAAG,EAAE;IACzB,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;IACtB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IACxB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAEhD,4DAA4D;IAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC3C,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;QACd,MAAM,EAAE,aAAa;QACrB,MAAM,EAAE,KAAK;QACb,iBAAiB,EAAE,KAAK;QACxB,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;KACvD,CAAC,CAAC,CAAC;IAEJ,IAAA,sBAAe,EAAC,GAAG,CAAC,CAAC;IACrB,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,IAAA,kBAAQ,EAAC,kCAAkC,EAAE,GAAG,EAAE;IAChD,IAAI,GAAwB,CAAC;IAE7B,IAAA,mBAAS,EAAC,GAAG,EAAE;QACb,GAAG,GAAG,aAAa,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAA,YAAE,EAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,gBAAgB;gBACvB,QAAQ,EAAE,SAAS;aACpB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAEvD,8BAA8B;YAC9B,IAAA,gBAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YACrD,IAAA,gBAAM,EAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE,SAAS;aACpB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,iBAAiB;gBACxB,QAAQ,EAAE,SAAS;aACpB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAA,YAAE,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,gBAAgB;gBACvB,QAAQ,EAAE,eAAe;aAC1B,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,sBAAsB;gBAC7B,QAAQ,EAAE,SAAS;aACpB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC,EAAE,CAAC;iBACR,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YACtE,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,IAAA,YAAE,EAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,cAAc;YACd,MAAM,aAAa,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACrC,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,gBAAgB;gBACvB,QAAQ,EAAE,SAAS;aACpB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,yBAAyB;YACzB,MAAM,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;YAE7D,6BAA6B;YAC7B,MAAM,YAAY,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACpC,GAAG,CAAC,gBAAgB,CAAC;iBACrB,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC;iBAC5B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,gBAAgB,CAAC;iBACrB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,YAAE,EAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,wCAAwC;YACxC,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACf,IAAI,CAAC,iBAAiB,CAAC;iBACvB,IAAI,CAAC;gBACJ,KAAK,EAAE,gBAAgB;gBACvB,QAAQ,EAAE,SAAS;aACpB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,kEAAkE;YAClE,2DAA2D;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/tests/integration/authentication-critical.test.ts"],"sourcesContent":["/**\n * Critical Authentication System Test\n * These tests should have caught the login issues - this ensures they never happen again.\n */\n\nimport { describe, it, expect, beforeAll } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { setupAuthRoutes } from '../../server/auth';\n\n// Create minimal test app for authentication only\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Add session middleware for memory-based sessions in tests\n  const session = require('express-session');\n  app.use(session({\n    secret: 'test-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 }\n  }));\n  \n  setupAuthRoutes(app);\n  return app;\n};\n\ndescribe('🔐 Critical Authentication Tests', () => {\n  let app: express.Application;\n\n  beforeAll(() => {\n    app = createTestApp();\n  });\n\n  describe('Demo User Login Tests', () => {\n    it('should successfully login with admin@demo.com and demo123', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'admin@demo.com',\n          password: 'demo123'\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.email).toBe('admin@demo.com');\n      expect(response.body.user.role).toBe('admin');\n      expect(response.body.message).toBe('Login successful');\n      \n      // Check session cookie is set\n      expect(response.headers['set-cookie']).toBeDefined();\n      expect(response.headers['set-cookie'][0]).toContain('koveo.sid');\n    });\n\n    it('should successfully login with manager@demo.com and demo123', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'manager@demo.com',\n          password: 'demo123'\n        })\n        .expect(200);\n\n      expect(response.body.user.email).toBe('manager@demo.com');\n      expect(response.body.user.role).toBe('manager');\n    });\n\n    it('should successfully login with tenant@demo.com and demo123', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'tenant@demo.com',\n          password: 'demo123'\n        })\n        .expect(200);\n\n      expect(response.body.user.email).toBe('tenant@demo.com');\n      expect(response.body.user.role).toBe('tenant');\n    });\n  });\n\n  describe('Authentication Error Handling', () => {\n    it('should reject login with wrong password', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'admin@demo.com',\n          password: 'wrongpassword'\n        })\n        .expect(401);\n\n      expect(response.body.message).toBe('Invalid credentials');\n      expect(response.body.code).toBe('INVALID_CREDENTIALS');\n    });\n\n    it('should reject login with non-existent user', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'nonexistent@demo.com',\n          password: 'demo123'\n        })\n        .expect(401);\n\n      expect(response.body.message).toBe('Invalid credentials');\n      expect(response.body.code).toBe('INVALID_CREDENTIALS');\n    });\n\n    it('should reject login with missing credentials', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({})\n        .expect(400);\n\n      expect(response.body.message).toBe('Email and password are required');\n      expect(response.body.code).toBe('MISSING_CREDENTIALS');\n    });\n  });\n\n  describe('Session Management', () => {\n    it('should return user info for authenticated session', async () => {\n      // First login\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'admin@demo.com',\n          password: 'demo123'\n        })\n        .expect(200);\n\n      // Extract session cookie\n      const sessionCookie = loginResponse.headers['set-cookie'][0];\n\n      // Test authenticated request\n      const userResponse = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      expect(userResponse.body.email).toBe('admin@demo.com');\n      expect(userResponse.body.role).toBe('admin');\n    });\n\n    it('should reject unauthenticated requests to protected endpoints', async () => {\n      const response = await request(app)\n        .get('/api/auth/user')\n        .expect(401);\n\n      expect(response.body.message).toBe('Not authenticated');\n    });\n  });\n\n  describe('Password Security', () => {\n    it('should verify passwords are properly hashed in database', async () => {\n      // Login should work with plain password\n      await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'admin@demo.com',\n          password: 'demo123'\n        })\n        .expect(200);\n\n      // But the stored password should be a bcrypt hash, not plain text\n      // This test ensures we're not storing plain text passwords\n    });\n  });\n});"],"version":3}