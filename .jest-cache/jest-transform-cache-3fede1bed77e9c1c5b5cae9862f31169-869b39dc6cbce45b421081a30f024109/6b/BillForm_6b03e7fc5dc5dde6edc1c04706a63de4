25360675d3a34042fd9b0eba2d3364bf
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.STATUS_OPTIONS = exports.SCHEDULE_OPTIONS = exports.PAYMENT_TYPES = exports.BILL_CATEGORIES = void 0;
exports.BillForm = BillForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const badge_1 = require("@/components/ui/badge");
const tabs_1 = require("@/components/ui/tabs");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const AttachedFileSection_1 = require("./AttachedFileSection");
const DocumentTypeSelector_1 = require("./DocumentTypeSelector");
// Unified form schema
const billFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Bill title is required (example: Monthly Electricity Bill)').max(200, 'Title must be less than 200 characters'),
    description: zod_2.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_2.z.enum([
        'insurance',
        'maintenance',
        'salary',
        'utilities',
        'cleaning',
        'security',
        'landscaping',
        'professional_services',
        'administration',
        'repairs',
        'supplies',
        'taxes',
        'technology',
        'reserves',
        'other',
    ]),
    vendor: zod_2.z.string().max(150, 'Vendor name must be less than 150 characters').optional(),
    paymentType: zod_2.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_2.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    customPayments: zod_2.z.array(zod_2.z.object({
        amount: zod_2.z.string().min(1, 'Amount is required').refine((val) => {
            const num = parseFloat(val);
            return !isNaN(num) && num > 0 && num <= 999999.99;
        }, 'Amount must be between $0.01 and $999,999.99'),
        date: zod_2.z.string().min(1, 'Date is required').refine((val) => {
            return !isNaN(Date.parse(val));
        }, 'Date must be a valid date'),
        description: zod_2.z.string().optional()
    })).optional(),
    totalAmount: zod_2.z.string().min(1, 'Amount is required and must be a valid number (example: 1250.50)').refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num > 0 && num <= 999999.99;
    }, 'Amount must be between $0.01 and $999,999.99 (example: 1250.50)'),
    startDate: zod_2.z.string().min(1, 'Start date is required (example: 2025-01-15)').refine((val) => {
        return !isNaN(Date.parse(val));
    }, 'Start date must be a valid date (example: 2025-01-15)'),
    endDate: zod_2.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return !isNaN(Date.parse(val));
    }, 'End date must be a valid date (example: 2025-12-31)'),
    status: zod_2.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),
    notes: zod_2.z.string().max(2000, 'Notes must be less than 2000 characters').optional(),
});
function CustomPaymentSchedule({ payments, onChange, onTotalAmountChange }) {
    const addPayment = () => {
        const newPayment = {
            amount: '',
            date: '',
            description: ''
        };
        const updatedPayments = [...payments, newPayment];
        onChange(updatedPayments);
    };
    const removePayment = (index) => {
        const updatedPayments = payments.filter((_, i) => i !== index);
        onChange(updatedPayments);
        updateTotalAmount(updatedPayments);
    };
    const updatePayment = (index, field, value) => {
        const updatedPayments = payments.map((payment, i) => i === index ? { ...payment, [field]: value } : payment);
        onChange(updatedPayments);
        if (field === 'amount') {
            updateTotalAmount(updatedPayments);
        }
    };
    const updateTotalAmount = (paymentsArray) => {
        const total = paymentsArray.reduce((sum, payment) => {
            const amount = parseFloat(payment.amount) || 0;
            return sum + amount;
        }, 0);
        onTotalAmountChange(total.toFixed(2));
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: "Add individual payment amounts and dates" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", onClick: addPayment, size: "sm", variant: "outline", className: "gap-2", "data-testid": "button-add-payment", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "h-4 w-4" }), "Add Payment"] })] }), payments.length === 0 && ((0, jsx_runtime_1.jsx)("div", { className: "text-center py-6 text-gray-500 border-2 border-dashed border-gray-200 rounded-lg", children: "Click \"Add Payment\" to create your custom payment schedule" })), (0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: payments.map((payment, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex gap-3 items-start p-3 border border-gray-200 rounded-lg bg-gray-50", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1 grid grid-cols-3 gap-3", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "Amount *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: "number", step: "0.01", placeholder: "0.00", value: payment.amount, onChange: (e) => updatePayment(index, 'amount', e.target.value), "data-testid": `input-payment-amount-${index}` })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "Date *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: "date", value: payment.date, onChange: (e) => updatePayment(index, 'date', e.target.value), "data-testid": `input-payment-date-${index}` })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-xs font-medium text-gray-700 mb-1", children: "Description" }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Payment note", value: payment.description || '', onChange: (e) => updatePayment(index, 'description', e.target.value), "data-testid": `input-payment-description-${index}` })] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", onClick: () => removePayment(index), size: "sm", variant: "ghost", className: "text-red-500 hover:text-red-700 p-2", "data-testid": `button-remove-payment-${index}`, children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "h-4 w-4" }) })] }, index))) }), payments.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "text-right text-sm text-gray-600", children: ["Total: $", payments.reduce((sum, payment) => sum + (parseFloat(payment.amount) || 0), 0).toFixed(2)] }))] }));
}
// Bill category options - centralized list
exports.BILL_CATEGORIES = [
    { value: 'insurance', label: 'Insurance' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'salary', label: 'Salary' },
    { value: 'utilities', label: 'Utilities' },
    { value: 'cleaning', label: 'Cleaning' },
    { value: 'security', label: 'Security' },
    { value: 'landscaping', label: 'Landscaping' },
    { value: 'professional_services', label: 'Professional Services' },
    { value: 'administration', label: 'Administration' },
    { value: 'repairs', label: 'Repairs' },
    { value: 'supplies', label: 'Supplies' },
    { value: 'taxes', label: 'Taxes' },
    { value: 'technology', label: 'Technology' },
    { value: 'reserves', label: 'Reserves' },
    { value: 'other', label: 'Other' },
];
// Payment type options
exports.PAYMENT_TYPES = [
    { value: 'unique', label: 'One-time Payment' },
    { value: 'recurrent', label: 'Recurring Payment' },
];
// Schedule options
exports.SCHEDULE_OPTIONS = [
    { value: 'weekly', label: 'Weekly' },
    { value: 'monthly', label: 'Monthly' },
    { value: 'quarterly', label: 'Quarterly' },
    { value: 'yearly', label: 'Yearly' },
    { value: 'custom', label: 'Custom' },
];
// Status options
exports.STATUS_OPTIONS = [
    { value: 'draft', label: 'Draft' },
    { value: 'sent', label: 'Sent' },
    { value: 'overdue', label: 'Overdue' },
    { value: 'paid', label: 'Paid' },
    { value: 'cancelled', label: 'Cancelled' },
];
/**
 * Unified bill form component for creating and editing bills.
 * Supports both manual entry and AI document analysis for creation.
 * @param root0
 * @param root0.mode
 * @param root0.buildingId
 * @param root0.bill
 * @param root0.onSuccess
 * @param root0.onCancel
 */
function BillForm({ mode, buildingId, bill, onSuccess, onCancel }) {
    const { t } = (0, use_language_1.useLanguage)();
    const [activeTab, setActiveTab] = (0, react_1.useState)(mode === 'edit' ? 'manual' : 'manual');
    const [uploadedFile, setUploadedFile] = (0, react_1.useState)(null);
    const [aiAnalysisData, setAiAnalysisData] = (0, react_1.useState)(null);
    const [aiDocumentFile, setAiDocumentFile] = (0, react_1.useState)(null); // Store the AI analyzed document
    const [isAnalyzing, setIsAnalyzing] = (0, react_1.useState)(false);
    const [attachedFiles, setAttachedFiles] = (0, react_1.useState)([]);
    const [attachmentMode, setAttachmentMode] = (0, react_1.useState)('file');
    const [attachmentText, setAttachmentText] = (0, react_1.useState)('');
    const [selectedFile, setSelectedFile] = (0, react_1.useState)(null);
    const queryClient = (0, react_query_1.useQueryClient)();
    // Form setup with default values based on mode
    const getDefaultValues = () => {
        if (mode === 'edit' && bill) {
            return {
                title: bill.title,
                description: bill.description || '',
                category: bill.category,
                vendor: bill.vendor || '',
                paymentType: bill.paymentType,
                schedulePayment: bill.schedulePayment || 'monthly',
                customPayments: [],
                totalAmount: bill.totalAmount.toString(),
                startDate: bill.startDate,
                endDate: bill.endDate || '',
                status: bill.status,
                notes: bill.notes || '',
            };
        }
        // Default values for create mode
        return {
            title: '',
            description: '',
            category: 'other',
            vendor: '',
            paymentType: 'unique',
            schedulePayment: 'monthly',
            customPayments: [],
            totalAmount: '',
            startDate: new Date().toISOString().split('T')[0],
            endDate: '',
            status: 'draft',
            notes: '',
        };
    };
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(billFormSchema),
        defaultValues: getDefaultValues(),
    });
    // Update form when bill changes (for edit mode)
    (0, react_1.useEffect)(() => {
        if (mode === 'edit' && bill) {
            form.reset(getDefaultValues());
        }
    }, [mode, bill]);
    // Main mutation for create/update
    const submitMutation = (0, react_query_1.useMutation)({
        mutationFn: async (billData) => {
            const url = mode === 'create' ? '/api/bills' : `/api/bills/${bill?.id}`;
            const method = mode === 'create' ? 'POST' : 'PATCH';
            // Handle custom payments vs regular payment
            const costs = billData.schedulePayment === 'custom' && billData.customPayments?.length
                ? billData.customPayments.map(payment => payment.amount)
                : [billData.totalAmount];
            const payload = {
                ...billData,
                costs,
                ...(mode === 'create' && { buildingId }),
            };
            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(payload),
            });
            if (!response.ok) {
                throw new Error(`Failed to ${mode} bill`);
            }
            const billResult = await response.json();
            // If we have an AI document file and we're creating a bill, upload it
            if (mode === 'create' && aiDocumentFile && billResult.id) {
                const formData = new FormData();
                formData.append('document', aiDocumentFile);
                const uploadResponse = await fetch(`/api/bills/${billResult.id}/upload-document`, {
                    method: 'POST',
                    credentials: 'include',
                    body: formData,
                });
                if (!uploadResponse.ok) {
                    console.warn('Failed to upload AI document to created bill');
                }
            }
            return billResult;
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            onSuccess();
        },
    });
    // Delete mutation (only for edit mode)
    const deleteMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            if (!bill?.id)
                throw new Error('No bill ID provided');
            const response = await fetch(`/api/bills/${bill.id}`, {
                method: 'DELETE',
                credentials: 'include',
            });
            if (!response.ok) {
                throw new Error('Failed to delete bill');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            onSuccess();
        },
    });
    // AI analysis mutation (only for create mode)
    const uploadAndAnalyzeMutation = (0, react_query_1.useMutation)({
        mutationFn: async (file) => {
            setIsAnalyzing(true);
            // Direct API call to analyze document without creating a bill
            const formData = new FormData();
            formData.append('document', file);
            const response = await fetch('/api/bills/analyze-document', {
                method: 'POST',
                credentials: 'include',
                body: formData,
            });
            if (!response.ok) {
                throw new Error('Failed to analyze document');
            }
            const result = await response.json();
            return { analysisResult: result, file };
        },
        onSuccess: (data) => {
            setIsAnalyzing(false);
            setAiAnalysisData(data.analysisResult);
            setAiDocumentFile(data.file); // Store the analyzed file for later upload
            // Auto-switch to manual tab and smartly fill form
            setActiveTab('manual');
            // Apply AI analysis while respecting user input
            setTimeout(() => {
                if (data.analysisResult) {
                    const currentValues = form.getValues();
                    // Only fill empty or default fields
                    if (!currentValues.title || currentValues.title === '' || currentValues.title === 'AI Analysis Draft') {
                        form.setValue('title', data.analysisResult.title);
                    }
                    if (!currentValues.vendor || currentValues.vendor === '') {
                        form.setValue('vendor', data.analysisResult.vendor || '');
                    }
                    if (!currentValues.category || currentValues.category === 'other') {
                        form.setValue('category', data.analysisResult.category);
                    }
                    if (!currentValues.totalAmount || currentValues.totalAmount === '' || currentValues.totalAmount === '0') {
                        form.setValue('totalAmount', data.analysisResult.totalAmount);
                    }
                    if (!currentValues.description || currentValues.description === '') {
                        form.setValue('description', data.analysisResult.description || '');
                    }
                    // Only set start date if it's the default (today) or empty
                    const today = new Date().toISOString().split('T')[0];
                    if ((!currentValues.startDate || currentValues.startDate === today) && data.analysisResult.issueDate) {
                        form.setValue('startDate', data.analysisResult.issueDate);
                    }
                    // Apply payment type if detected and user hasn't changed from default
                    if (currentValues.paymentType === 'unique' && data.analysisResult.paymentType) {
                        form.setValue('paymentType', data.analysisResult.paymentType);
                    }
                    // Append to notes (don't overwrite user notes)
                    let notes = currentValues.notes || '';
                    const aiNotesSection = [];
                    if (data.analysisResult.billNumber) {
                        aiNotesSection.push(`Bill Number: ${data.analysisResult.billNumber}`);
                    }
                    if (data.analysisResult.vendorContact) {
                        aiNotesSection.push(`Vendor Contact: ${data.analysisResult.vendorContact}`);
                    }
                    if (data.analysisResult.dueDate) {
                        aiNotesSection.push(`Due Date: ${data.analysisResult.dueDate}`);
                    }
                    aiNotesSection.push(`AI Analysis Confidence: ${(data.analysisResult.confidence * 100).toFixed(1)}%`);
                    if (aiNotesSection.length > 0) {
                        const aiNotes = aiNotesSection.join('\n');
                        notes = notes ? `${notes}\n\n--- AI Analysis ---\n${aiNotes}` : aiNotes;
                        form.setValue('notes', notes.trim());
                    }
                    // Form filling completed
                }
            }, 100); // Small delay to ensure tab switch happens first
        },
        onError: (error) => {
            console.error('❌ [DEBUG] AI analysis failed with error:', error);
            setIsAnalyzing(false);
        },
    });
    // Event handlers
    const handleFileUpload = (event) => {
        const file = event.target.files?.[0];
        if (file && mode === 'create') {
            setUploadedFile(file);
            // Don't auto-analyze, wait for user to click the analyze button
        }
    };
    // Smart form filling that respects user input
    const applyAiAnalysisSmartly = (0, react_1.useCallback)(() => {
        // Smart AI analysis application
        if (!aiAnalysisData) {
            console.warn('⚠️ [DEBUG] No AI analysis data available for smart application');
            return;
        }
        const currentValues = form.getValues();
        // Check current form values
        // Only fill empty or default fields
        if (!currentValues.title || currentValues.title === '') {
            form.setValue('title', aiAnalysisData.title);
        }
        if (!currentValues.vendor || currentValues.vendor === '') {
            form.setValue('vendor', aiAnalysisData.vendor || '');
        }
        if (!currentValues.category || currentValues.category === 'other') {
            form.setValue('category', aiAnalysisData.category);
        }
        if (!currentValues.totalAmount || currentValues.totalAmount === '' || currentValues.totalAmount === '0') {
            form.setValue('totalAmount', aiAnalysisData.totalAmount);
        }
        if (!currentValues.description || currentValues.description === '') {
            form.setValue('description', aiAnalysisData.description || '');
        }
        // Only set start date if it's the default (today) or empty
        const today = new Date().toISOString().split('T')[0];
        if ((!currentValues.startDate || currentValues.startDate === today) && aiAnalysisData.issueDate) {
            form.setValue('startDate', aiAnalysisData.issueDate);
        }
        // Apply payment type if detected and user hasn't changed from default
        if (currentValues.paymentType === 'unique' && aiAnalysisData.paymentType) {
            form.setValue('paymentType', aiAnalysisData.paymentType);
        }
        // Append to notes (don't overwrite user notes)
        let notes = currentValues.notes || '';
        const aiNotesSection = [];
        if (aiAnalysisData.billNumber) {
            aiNotesSection.push(`Bill Number: ${aiAnalysisData.billNumber}`);
        }
        if (aiAnalysisData.vendorContact) {
            aiNotesSection.push(`Vendor Contact: ${aiAnalysisData.vendorContact}`);
        }
        if (aiAnalysisData.dueDate) {
            aiNotesSection.push(`Due Date: ${aiAnalysisData.dueDate}`);
        }
        aiNotesSection.push(`AI Analysis Confidence: ${(aiAnalysisData.confidence * 100).toFixed(1)}%`);
        if (aiNotesSection.length > 0) {
            const aiNotes = aiNotesSection.join('\n');
            notes = notes ? `${notes}\n\n--- AI Analysis ---\n${aiNotes}` : aiNotes;
            console.log('📝 [DEBUG] Smart apply - Setting notes:', notes.trim());
            form.setValue('notes', notes.trim());
        }
        console.log('🔍 [DEBUG] Final form values after smart AI application:', form.getValues());
        console.log('🎉 [DEBUG] === SMART AI ANALYSIS APPLICATION COMPLETED ===');
    }, [aiAnalysisData, form]);
    // Manual apply function (for the button)
    const applyAiAnalysis = () => {
        console.log('🤖 [DEBUG] === APPLYING AI ANALYSIS TO FORM (MANUAL BUTTON) ===');
        console.log('📊 [DEBUG] AI Analysis Data received:', aiAnalysisData);
        console.log('🔍 [DEBUG] Current form values before applying AI:', form.getValues());
        if (aiAnalysisData) {
            console.log('✅ [DEBUG] AI data exists, setting form values...');
            // This overrides all fields (for manual application)
            console.log('📝 [DEBUG] Setting title:', aiAnalysisData.title);
            form.setValue('title', aiAnalysisData.title);
            console.log('📝 [DEBUG] Setting vendor:', aiAnalysisData.vendor);
            form.setValue('vendor', aiAnalysisData.vendor || '');
            console.log('📝 [DEBUG] Setting category:', aiAnalysisData.category);
            form.setValue('category', aiAnalysisData.category);
            console.log('📝 [DEBUG] Setting totalAmount:', aiAnalysisData.totalAmount);
            form.setValue('totalAmount', aiAnalysisData.totalAmount);
            console.log('📝 [DEBUG] Setting description:', aiAnalysisData.description);
            form.setValue('description', aiAnalysisData.description || '');
            if (aiAnalysisData.issueDate) {
                console.log('📝 [DEBUG] Setting startDate:', aiAnalysisData.issueDate);
                form.setValue('startDate', aiAnalysisData.issueDate);
            }
            if (aiAnalysisData.paymentType) {
                console.log('📝 [DEBUG] Setting paymentType:', aiAnalysisData.paymentType);
                form.setValue('paymentType', aiAnalysisData.paymentType);
            }
            // Apply notes with AI information
            let notes = form.getValues('notes') || '';
            const aiNotesSection = [];
            if (aiAnalysisData.billNumber) {
                aiNotesSection.push(`Bill Number: ${aiAnalysisData.billNumber}`);
            }
            if (aiAnalysisData.vendorContact) {
                aiNotesSection.push(`Vendor Contact: ${aiAnalysisData.vendorContact}`);
            }
            if (aiAnalysisData.dueDate) {
                aiNotesSection.push(`Due Date: ${aiAnalysisData.dueDate}`);
            }
            aiNotesSection.push(`AI Analysis Confidence: ${(aiAnalysisData.confidence * 100).toFixed(1)}%`);
            if (aiNotesSection.length > 0) {
                const aiNotes = aiNotesSection.join('\n');
                notes = notes ? `${notes}\n\n--- AI Analysis ---\n${aiNotes}` : aiNotes;
                console.log('📝 [DEBUG] Setting notes with AI analysis:', notes.trim());
                form.setValue('notes', notes.trim());
            }
            console.log('🔍 [DEBUG] Final form values after applying AI:', form.getValues());
            console.log('🎉 [DEBUG] === AI ANALYSIS APPLICATION COMPLETED ===');
        }
        else {
            console.error('❌ [DEBUG] No AI analysis data available when applying to form');
        }
    };
    const onSubmit = (values) => {
        submitMutation.mutate(values);
        // TODO: Handle attached files upload after bill creation
    };
    // Handle file attachments
    const handleFilesSelect = (0, react_1.useCallback)((files) => {
        setAttachedFiles(prev => [...prev, ...files]);
    }, []);
    const handleFileRemove = (0, react_1.useCallback)((fileIndex) => {
        setAttachedFiles(prev => prev.filter((_, index) => index !== fileIndex));
    }, []);
    const renderFormFields = () => ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'title', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('title'), " *"] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: t('billTitle'), "data-testid": 'input-title' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'vendor', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('vendor') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, placeholder: t('companyOrServiceProvider'), "data-testid": 'input-vendor' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'category', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('category'), " *"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-category', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectCategory') }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.BILL_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'totalAmount', render: ({ field }) => {
                            const isCustomPayments = form.watch('paymentType') === 'recurrent' &&
                                form.watch('schedulePayment') === 'custom';
                            return ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: ["Total Amount *", isCustomPayments && (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-blue-600 ml-1", children: "(Auto-calculated)" })] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'number', step: '0.01', placeholder: '0.00', readOnly: isCustomPayments, className: isCustomPayments ? 'bg-gray-100 cursor-not-allowed' : '', "data-testid": 'input-amount' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] }));
                        } }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'paymentType', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Type *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-payment-type', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select payment type' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.PAYMENT_TYPES.map((type) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: type.value, children: type.label }, type.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), form.watch('paymentType') === 'recurrent' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'schedulePayment', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Schedule *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-schedule', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select schedule' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.SCHEDULE_OPTIONS.map((option) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: option.value, children: option.label }, option.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), form.watch('paymentType') === 'recurrent' && form.watch('schedulePayment') === 'custom' && ((0, jsx_runtime_1.jsx)("div", { className: 'col-span-2', children: (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'customPayments', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Custom Payment Schedule *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(CustomPaymentSchedule, { payments: field.value || [], onChange: field.onChange, onTotalAmountChange: (total) => form.setValue('totalAmount', total) }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }) })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'startDate', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Start Date *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'date', "data-testid": 'input-start-date' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), form.watch('paymentType') === 'recurrent' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'endDate', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "End Date (Optional)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, type: 'date', "data-testid": 'input-end-date' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'status', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Status *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-status', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select status' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: exports.STATUS_OPTIONS.map((status) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: status.value, children: status.label }, status.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { ...field, placeholder: 'Bill description...', rows: 3, "data-testid": 'textarea-description' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'notes', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Notes" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { ...field, placeholder: 'Additional notes...', rows: 3, "data-testid": 'textarea-notes' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(DocumentTypeSelector_1.DocumentTypeSelector, { mode: attachmentMode, onModeChange: setAttachmentMode, onFileSelect: setSelectedFile, textContent: attachmentText, onTextChange: setAttachmentText, fileInputProps: {
                    accept: 'image/*,.pdf,.doc,.docx,.txt'
                }, textAreaProps: {
                    placeholder: 'Enter text notes or details about this bill...'
                } })] }));
    // For edit mode, render simple form
    if (mode === 'edit') {
        return ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6 pt-4 border-t', children: [renderFormFields(), bill?.documentPath && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [(0, jsx_runtime_1.jsx)(Label, { className: 'text-sm font-medium text-gray-900', children: "Attached Document" }), (0, jsx_runtime_1.jsx)(AttachedFileSection_1.AttachedFileSection, { entityType: 'bill', entityId: bill.id, filePath: bill.documentPath, fileName: bill.documentName, canView: true, canDownload: true, className: 'bg-gray-50 rounded-lg' })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between gap-2 pt-4 border-t', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'destructive', onClick: () => {
                                    if (confirm('Are you sure you want to delete this bill? This action cannot be undone.')) {
                                        deleteMutation.mutate();
                                    }
                                }, disabled: deleteMutation.isPending, className: 'flex items-center gap-2', "data-testid": 'button-delete-bill', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'w-4 h-4' }), deleteMutation.isPending ? 'Deleting...' : 'Delete Bill'] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [onCancel && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: onCancel, disabled: submitMutation.isPending || deleteMutation.isPending, "data-testid": 'button-cancel', children: "Cancel" })), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: submitMutation.isPending || deleteMutation.isPending, className: 'min-w-[120px]', "data-testid": 'button-update', children: submitMutation.isPending ? 'Updating...' : 'Update Bill' })] })] })] }) }));
    }
    // For create mode, render with tabs (manual + AI upload)
    return ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { value: activeTab, onValueChange: setActiveTab, className: 'w-full', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: 'grid w-full grid-cols-2', children: [(0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'manual', "data-testid": 'tab-manual', children: "Create Manually" }), (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'upload', "data-testid": 'tab-upload', children: "Upload & Analyze" })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'upload', className: 'space-y-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'p-6 text-center border-2 border-dashed border-gray-200 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold mb-2', children: "Upload Bill Document" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mb-4', children: "Upload an image or PDF of your bill for AI analysis" }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'file', accept: 'image/*,.pdf', onChange: handleFileUpload, disabled: isAnalyzing, className: 'max-w-sm mx-auto mb-4', "data-testid": 'input-file-upload' }), uploadedFile && !isAnalyzing && !aiAnalysisData && ((0, jsx_runtime_1.jsx)(button_1.Button, { onClick: () => uploadAndAnalyzeMutation.mutate(uploadedFile), className: 'mt-4', "data-testid": 'button-analyze-document', children: "Analyze Document" })), isAnalyzing && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 flex items-center justify-center gap-2', "data-testid": 'loading-analysis', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-600', children: "Analyzing document with AI..." })] })), aiAnalysisData && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 p-4 bg-blue-50 rounded-lg', "data-testid": 'ai-analysis-result', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-3', children: [(0, jsx_runtime_1.jsx)("span", { className: 'font-medium text-blue-800', children: "AI Analysis Complete" }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.confidence * 100).toFixed(1), "% overall confidence"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-3 text-sm', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'text-blue-700', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Title:" }), " ", aiAnalysisData.title] }), aiAnalysisData.fieldConfidences && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.fieldConfidences.title * 100).toFixed(0), "%"] }))] }), aiAnalysisData.vendor && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'text-blue-700', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Vendor:" }), " ", aiAnalysisData.vendor] }), aiAnalysisData.fieldConfidences && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.fieldConfidences.vendor * 100).toFixed(0), "%"] }))] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'text-blue-700', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Amount:" }), " $", aiAnalysisData.totalAmount] }), aiAnalysisData.fieldConfidences && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.fieldConfidences.totalAmount * 100).toFixed(0), "%"] }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'text-blue-700', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Category:" }), " ", aiAnalysisData.category] }), aiAnalysisData.fieldConfidences && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.fieldConfidences.category * 100).toFixed(0), "%"] }))] }), aiAnalysisData.paymentType && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'text-blue-700', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Type:" }), " ", aiAnalysisData.paymentType === 'recurrent' ? 'Recurring' : 'One-time'] }), aiAnalysisData.fieldConfidences && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.fieldConfidences.paymentType * 100).toFixed(0), "%"] }))] })), (aiAnalysisData.issueDate || aiAnalysisData.dueDate) && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'text-blue-700', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Dates:" }), " ", aiAnalysisData.issueDate || aiAnalysisData.dueDate] }), aiAnalysisData.fieldConfidences && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.fieldConfidences.dates * 100).toFixed(0), "%"] }))] }))] })] }), (aiAnalysisData.billNumber || aiAnalysisData.vendorContact) && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-3 pt-3 border-t border-blue-200 text-xs text-blue-600', children: [aiAnalysisData.billNumber && (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Bill Number:" }), " ", aiAnalysisData.billNumber] }), aiAnalysisData.vendorContact && (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Vendor Contact:" }), " ", aiAnalysisData.vendorContact] })] })), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: applyAiAnalysis, className: 'mt-3 w-full', size: 'sm', "data-testid": 'button-apply-ai', children: "Apply All Fields to Form" })] }))] }) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'manual', className: 'space-y-4', children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6', children: [renderFormFields(), aiAnalysisData && ((0, jsx_runtime_1.jsxs)("div", { className: 'p-4 bg-blue-50 rounded-lg border border-blue-200', "data-testid": 'ai-info-badge', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mb-2', children: [(0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-blue-800', children: "Form populated from AI analysis" }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(aiAnalysisData.confidence * 100).toFixed(1), "% confidence"] })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-blue-600', children: "Review and modify the form as needed before creating the bill." })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between gap-2 pt-4 border-t', children: [mode === 'edit' && ((0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'destructive', onClick: () => {
                                                if (confirm('Are you sure you want to delete this bill? This action cannot be undone.')) {
                                                    deleteMutation.mutate();
                                                }
                                            }, disabled: deleteMutation.isPending, className: 'flex items-center gap-2', "data-testid": 'button-delete-bill', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'w-4 h-4' }), deleteMutation.isPending ? 'Deleting...' : 'Delete Bill'] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [onCancel && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: onCancel, disabled: submitMutation.isPending || deleteMutation.isPending, "data-testid": 'button-cancel', children: "Cancel" })), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: submitMutation.isPending || deleteMutation.isPending, className: 'min-w-[120px]', "data-testid": mode === 'create' ? 'button-create' : 'button-update', children: submitMutation.isPending
                                                        ? (mode === 'create' ? 'Creating...' : 'Updating...')
                                                        : (mode === 'create' ? 'Create Bill' : 'Update Bill') })] })] })] }) }) })] }) }));
}
exports.default = BillForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,