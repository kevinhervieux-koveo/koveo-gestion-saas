d4c682c825b5ee0578b7e161c37d4e09
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardCard = StandardCard;
const jsx_runtime_1 = require("react/jsx-runtime");
const card_1 = require("@/components/ui/card");
const utils_1 = require("@/lib/utils");
/**
 * Standardized card component that consolidates the common Card + CardHeader + CardTitle pattern.
 * Replaces repetitive card boilerplate across 64+ components in the app.
 *
 * @param props - Card configuration with optional title, description, footer, and styling
 * @returns Consistently styled card with proper structure
 */
function StandardCard({ title, description, children, footer, className, headerClassName, contentClassName, footerClassName, onClick, 'data-testid': testId, }) {
    return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: (0, utils_1.cn)('w-full overflow-hidden', className), onClick: onClick, "data-testid": testId, children: [(title || description) && ((0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: (0, utils_1.cn)('space-y-1', headerClassName), children: [title && (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "break-words hyphens-auto", children: title }), description && (0, jsx_runtime_1.jsx)(card_1.CardDescription, { className: "break-words hyphens-auto", children: description })] })), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: (0, utils_1.cn)('break-words overflow-hidden', contentClassName), children: children }), footer && (0, jsx_runtime_1.jsx)(card_1.CardFooter, { className: (0, utils_1.cn)(footerClassName), children: footer })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2NvbXBvbmVudHMvdWkvc3RhbmRhcmQtY2FyZC50c3giLCJtYXBwaW5ncyI6Ijs7QUF3QkEsb0NBNEJDOztBQXBERCwrQ0FBNkc7QUFFN0csdUNBQWlDO0FBZWpDOzs7Ozs7R0FNRztBQUNILFNBQWdCLFlBQVksQ0FBQyxFQUMzQixLQUFLLEVBQ0wsV0FBVyxFQUNYLFFBQVEsRUFDUixNQUFNLEVBQ04sU0FBUyxFQUNULGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLE9BQU8sRUFDUCxhQUFhLEVBQUUsTUFBTSxHQUNIO0lBQ2xCLE9BQU8sQ0FDTCx3QkFBQyxXQUFJLElBQ0gsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLHdCQUF3QixFQUFFLFNBQVMsQ0FBQyxFQUNsRCxPQUFPLEVBQUUsT0FBTyxpQkFDSCxNQUFNLGFBRWxCLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQ3pCLHdCQUFDLGlCQUFVLElBQUMsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsYUFDcEQsS0FBSyxJQUFJLHVCQUFDLGdCQUFTLElBQUMsU0FBUyxFQUFDLDBCQUEwQixZQUFFLEtBQUssR0FBYSxFQUM1RSxXQUFXLElBQUksdUJBQUMsc0JBQWUsSUFBQyxTQUFTLEVBQUMsMEJBQTBCLFlBQUUsV0FBVyxHQUFtQixJQUMxRixDQUNkLEVBQ0QsdUJBQUMsa0JBQVcsSUFBQyxTQUFTLEVBQUUsSUFBQSxVQUFFLEVBQUMsNkJBQTZCLEVBQUUsZ0JBQWdCLENBQUMsWUFBRyxRQUFRLEdBQWUsRUFDcEcsTUFBTSxJQUFJLHVCQUFDLGlCQUFVLElBQUMsU0FBUyxFQUFFLElBQUEsVUFBRSxFQUFDLGVBQWUsQ0FBQyxZQUFHLE1BQU0sR0FBYyxJQUN2RSxDQUNSLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL3N0YW5kYXJkLWNhcmQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhcmQsIENhcmRDb250ZW50LCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUsIENhcmREZXNjcmlwdGlvbiwgQ2FyZEZvb3RlciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9jYXJkJztcbmltcG9ydCB7IFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuXG5pbnRlcmZhY2UgU3RhbmRhcmRDYXJkUHJvcHMge1xuICB0aXRsZT86IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG4gIGZvb3Rlcj86IFJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWFkZXJDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNvbnRlbnRDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGZvb3RlckNsYXNzTmFtZT86IHN0cmluZztcbiAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gICdkYXRhLXRlc3RpZCc/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogU3RhbmRhcmRpemVkIGNhcmQgY29tcG9uZW50IHRoYXQgY29uc29saWRhdGVzIHRoZSBjb21tb24gQ2FyZCArIENhcmRIZWFkZXIgKyBDYXJkVGl0bGUgcGF0dGVybi5cbiAqIFJlcGxhY2VzIHJlcGV0aXRpdmUgY2FyZCBib2lsZXJwbGF0ZSBhY3Jvc3MgNjQrIGNvbXBvbmVudHMgaW4gdGhlIGFwcC5cbiAqIFxuICogQHBhcmFtIHByb3BzIC0gQ2FyZCBjb25maWd1cmF0aW9uIHdpdGggb3B0aW9uYWwgdGl0bGUsIGRlc2NyaXB0aW9uLCBmb290ZXIsIGFuZCBzdHlsaW5nXG4gKiBAcmV0dXJucyBDb25zaXN0ZW50bHkgc3R5bGVkIGNhcmQgd2l0aCBwcm9wZXIgc3RydWN0dXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTdGFuZGFyZENhcmQoe1xuICB0aXRsZSxcbiAgZGVzY3JpcHRpb24sXG4gIGNoaWxkcmVuLFxuICBmb290ZXIsXG4gIGNsYXNzTmFtZSxcbiAgaGVhZGVyQ2xhc3NOYW1lLFxuICBjb250ZW50Q2xhc3NOYW1lLFxuICBmb290ZXJDbGFzc05hbWUsXG4gIG9uQ2xpY2ssXG4gICdkYXRhLXRlc3RpZCc6IHRlc3RJZCxcbn06IFN0YW5kYXJkQ2FyZFByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPENhcmQgXG4gICAgICBjbGFzc05hbWU9e2NuKCd3LWZ1bGwgb3ZlcmZsb3ctaGlkZGVuJywgY2xhc3NOYW1lKX0gXG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgZGF0YS10ZXN0aWQ9e3Rlc3RJZH1cbiAgICA+XG4gICAgICB7KHRpdGxlIHx8IGRlc2NyaXB0aW9uKSAmJiAoXG4gICAgICAgIDxDYXJkSGVhZGVyIGNsYXNzTmFtZT17Y24oJ3NwYWNlLXktMScsIGhlYWRlckNsYXNzTmFtZSl9PlxuICAgICAgICAgIHt0aXRsZSAmJiA8Q2FyZFRpdGxlIGNsYXNzTmFtZT1cImJyZWFrLXdvcmRzIGh5cGhlbnMtYXV0b1wiPnt0aXRsZX08L0NhcmRUaXRsZT59XG4gICAgICAgICAge2Rlc2NyaXB0aW9uICYmIDxDYXJkRGVzY3JpcHRpb24gY2xhc3NOYW1lPVwiYnJlYWstd29yZHMgaHlwaGVucy1hdXRvXCI+e2Rlc2NyaXB0aW9ufTwvQ2FyZERlc2NyaXB0aW9uPn1cbiAgICAgICAgPC9DYXJkSGVhZGVyPlxuICAgICAgKX1cbiAgICAgIDxDYXJkQ29udGVudCBjbGFzc05hbWU9e2NuKCdicmVhay13b3JkcyBvdmVyZmxvdy1oaWRkZW4nLCBjb250ZW50Q2xhc3NOYW1lKX0+e2NoaWxkcmVufTwvQ2FyZENvbnRlbnQ+XG4gICAgICB7Zm9vdGVyICYmIDxDYXJkRm9vdGVyIGNsYXNzTmFtZT17Y24oZm9vdGVyQ2xhc3NOYW1lKX0+e2Zvb3Rlcn08L0NhcmRGb290ZXI+fVxuICAgIDwvQ2FyZD5cbiAgKTtcbn0iXSwidmVyc2lvbiI6M30=