b120b7e55bf16c6bc3f68141446213ad
"use strict";
/**
 * Comprehensive Button Translation Test Suite
 * Validates that all buttons in the application are properly translated
 * and conform to Quebec Law 25 bilingual requirements
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const i18n_ts_1 = require("../../client/src/lib/i18n.ts");
(0, globals_1.describe)('Comprehensive Button Translation Coverage', () => {
    const languages = ['en', 'fr'];
    (0, globals_1.describe)('Fullscreen Button Translations', () => {
        (0, globals_1.it)('should have fullscreen translations in both languages', () => {
            languages.forEach(lang => {
                const t = i18n_ts_1.translations[lang];
                (0, globals_1.expect)(t.fullscreen).toBeDefined();
                (0, globals_1.expect)(typeof t.fullscreen).toBe('string');
                (0, globals_1.expect)(t.fullscreen.length).toBeGreaterThan(0);
                (0, globals_1.expect)(t.exitFullscreen).toBeDefined();
                (0, globals_1.expect)(typeof t.exitFullscreen).toBe('string');
                (0, globals_1.expect)(t.exitFullscreen.length).toBeGreaterThan(0);
            });
        });
        (0, globals_1.it)('should have French fullscreen translations with proper accent characters', () => {
            const fr = i18n_ts_1.translations.fr;
            (0, globals_1.expect)(fr.fullscreen).toBe('Plein écran');
            (0, globals_1.expect)(fr.exitFullscreen).toBe('Quitter le plein écran');
        });
        (0, globals_1.it)('should have English fullscreen translations', () => {
            const en = i18n_ts_1.translations.en;
            (0, globals_1.expect)(en.fullscreen).toBe('Fullscreen');
            (0, globals_1.expect)(en.exitFullscreen).toBe('Exit Fullscreen');
        });
    });
    (0, globals_1.describe)('Critical Button Translation Coverage', () => {
        const criticalButtonKeys = [
            'login',
            'logout',
            'getStarted',
            'cancel',
            'confirm',
            'save',
            'delete',
            'edit',
            'create',
            'update',
            'submit',
            'close',
            'back',
            'next',
            'finish',
            'continue',
            'fullscreen',
            'exitFullscreen'
        ];
        (0, globals_1.it)('should have all critical button translations in both languages', () => {
            criticalButtonKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Navigation Button Translation Coverage', () => {
        const navigationKeys = [
            'home',
            'dashboard',
            'buildings',
            'residents',
            'documents',
            'settings',
            'organizations',
            'calendar',
            'demands',
            'bills',
            'budget'
        ];
        (0, globals_1.it)('should have all navigation translations in both languages', () => {
            navigationKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                    (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                });
            });
        });
    });
    (0, globals_1.describe)('Action Button Translation Validation', () => {
        (0, globals_1.it)('should have consistent action button patterns', () => {
            const actionKeys = Object.keys(i18n_ts_1.translations.en).filter(key => key.includes('button') || key.includes('action') || key.includes('click'));
            actionKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                });
            });
        });
    });
    (0, globals_1.describe)('Quebec Law 25 Compliance for Buttons', () => {
        (0, globals_1.it)('should have French translations for all critical user interface elements', () => {
            const fr = i18n_ts_1.translations.fr;
            // Critical UI elements must be translated to French
            (0, globals_1.expect)(fr.login).toBeDefined();
            (0, globals_1.expect)(fr.logout).toBeDefined();
            (0, globals_1.expect)(fr.privacyPolicy).toBeDefined();
            (0, globals_1.expect)(fr.settings).toBeDefined();
            (0, globals_1.expect)(fr.language).toBeDefined();
            (0, globals_1.expect)(fr.fullscreen).toBeDefined();
            (0, globals_1.expect)(fr.exitFullscreen).toBeDefined();
        });
        (0, globals_1.it)('should use proper Quebec French terminology', () => {
            const fr = i18n_ts_1.translations.fr;
            // Validate Quebec-specific French terms
            (0, globals_1.expect)(fr.fullscreen).toContain('écran'); // "écran" not "screen"
            (0, globals_1.expect)(fr.exitFullscreen).toContain('Quitter'); // Proper Quebec French verb
            (0, globals_1.expect)(fr.language).toBe('Langue'); // Standard Quebec French
            (0, globals_1.expect)(fr.settings).toBe('Paramètres'); // Standard Quebec French
        });
    });
    (0, globals_1.describe)('Translation Consistency Validation', () => {
        (0, globals_1.it)('should have no missing translations between languages', () => {
            const enKeys = Object.keys(i18n_ts_1.translations.en);
            const frKeys = Object.keys(i18n_ts_1.translations.fr);
            (0, globals_1.expect)(enKeys.sort()).toEqual(frKeys.sort());
        });
        (0, globals_1.it)('should have no empty or undefined translations', () => {
            languages.forEach(lang => {
                const t = i18n_ts_1.translations[lang];
                Object.keys(t).forEach(key => {
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                    (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                });
            });
        });
    });
    (0, globals_1.describe)('Translation Quality Standards', () => {
        (0, globals_1.it)('should have proper capitalization for button text', () => {
            const buttonKeys = ['fullscreen', 'exitFullscreen', 'login', 'logout', 'getStarted'];
            buttonKeys.forEach(key => {
                const en = i18n_ts_1.translations.en[key];
                const fr = i18n_ts_1.translations.fr[key];
                if (en) {
                    // English buttons should start with capital letter
                    (0, globals_1.expect)(en.charAt(0)).toEqual(en.charAt(0).toUpperCase());
                }
                if (fr) {
                    // French buttons should start with capital letter
                    (0, globals_1.expect)(fr.charAt(0)).toEqual(fr.charAt(0).toUpperCase());
                }
            });
        });
        (0, globals_1.it)('should have reasonable length limits for button text', () => {
            const buttonKeys = Object.keys(i18n_ts_1.translations.en).filter(key => 
            // Filter for likely button text (exclude descriptions)
            !key.includes('Desc') && !key.includes('Description') &&
                !key.includes('Overview') && !key.includes('Subtitle') &&
                (key.includes('button') || key.includes('action') || key.includes('click') ||
                    ['login', 'logout', 'save', 'cancel', 'confirm', 'delete', 'edit', 'create',
                        'fullscreen', 'exitFullscreen', 'getStarted', 'submit', 'close'].includes(key)));
            languages.forEach(lang => {
                const t = i18n_ts_1.translations[lang];
                buttonKeys.forEach(key => {
                    if (typeof t[key] === 'string') {
                        (0, globals_1.expect)(t[key].length).toBeLessThan(50); // Button text should be concise
                    }
                });
            });
        });
    });
});
/**
 * Button Usage Pattern Validation
 * Tests that verify proper usage patterns for translated buttons
 */
(0, globals_1.describe)('Button Translation Usage Patterns', () => {
    (0, globals_1.it)('should validate translation key naming conventions', () => {
        const buttonLikeKeys = Object.keys(i18n_ts_1.translations.en).filter(key => 
        // Keys that are likely buttons or actions
        ['button', 'action', 'click', 'toggle', 'open', 'close', 'exit', 'enter', 'fullscreen'].some(pattern => key.toLowerCase().includes(pattern)));
        buttonLikeKeys.forEach(key => {
            // Button keys should follow camelCase convention
            (0, globals_1.expect)(key).toMatch(/^[a-z][a-zA-Z0-9]*$/);
        });
    });
    (0, globals_1.it)('should ensure all fullscreen functionality is properly translated', () => {
        const fullscreenKeys = ['fullscreen', 'exitFullscreen'];
        const languages = ['en', 'fr'];
        fullscreenKeys.forEach(key => {
            languages.forEach(lang => {
                const translation = i18n_ts_1.translations[lang][key];
                (0, globals_1.expect)(translation).toBeDefined();
                (0, globals_1.expect)(translation).not.toContain('{'); // No untranslated placeholders
                (0, globals_1.expect)(translation).not.toContain('}');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,