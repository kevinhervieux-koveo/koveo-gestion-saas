{"file":"/home/runner/workspace/shared/config/upload-config.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/shared/config/upload-config.ts"],"sourcesContent":["/**\n * Universal Upload Configuration System\n * \n * Defines AI analysis settings, storage directories, and form configurations\n * for all document upload functionality across the application.\n */\n\nexport interface UploadContext {\n  type: 'bills' | 'buildings' | 'residences' | 'bugs' | 'features' | 'documents' | 'maintenance';\n  organizationId?: string;\n  buildingId?: string;\n  residenceId?: string;\n  userRole?: string;\n  userId?: string;\n}\n\nexport interface UploadFormConfig {\n  /** Whether AI analysis is enabled for this form type */\n  aiAnalysisEnabled: boolean;\n  /** Custom fields specific to this upload context */\n  contextFields?: Record<string, any>;\n  /** Maximum file size in MB */\n  maxFileSize: number;\n  /** Allowed file types */\n  allowedFileTypes: string[];\n  /** Whether to show camera option for mobile uploads */\n  showCamera: boolean;\n}\n\n/**\n * Configuration for each upload form type\n */\nexport const UPLOAD_FORM_CONFIGS: Record<string, UploadFormConfig> = {\n  bills: {\n    aiAnalysisEnabled: true, // Bills have AI enabled by default\n    maxFileSize: 25,\n    allowedFileTypes: ['image/*', 'application/pdf'],\n    showCamera: true,\n    contextFields: {\n      category: 'string',\n      vendor: 'string',\n      amount: 'number',\n      date: 'string'\n    }\n  },\n  buildings: {\n    aiAnalysisEnabled: false, // Disabled by default\n    maxFileSize: 25,\n    allowedFileTypes: ['image/*', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    showCamera: true,\n    contextFields: {\n      documentType: 'string',\n      description: 'string'\n    }\n  },\n  residences: {\n    aiAnalysisEnabled: false, // Disabled by default\n    maxFileSize: 25,\n    allowedFileTypes: ['image/*', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    showCamera: true,\n    contextFields: {\n      documentType: 'string',\n      description: 'string'\n    }\n  },\n  bugs: {\n    aiAnalysisEnabled: false, // Disabled by default\n    maxFileSize: 15,\n    allowedFileTypes: ['image/*', 'application/pdf', '.txt', '.log', '.json', '.csv'],\n    showCamera: true,\n    contextFields: {\n      category: 'string',\n      priority: 'string',\n      steps: 'string'\n    }\n  },\n  features: {\n    aiAnalysisEnabled: false, // Disabled by default\n    maxFileSize: 20,\n    allowedFileTypes: ['image/*', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n    showCamera: true,\n    contextFields: {\n      category: 'string',\n      priority: 'string',\n      description: 'string'\n    }\n  },\n  documents: {\n    aiAnalysisEnabled: false, // Disabled by default\n    maxFileSize: 50,\n    allowedFileTypes: ['image/*', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],\n    showCamera: true,\n    contextFields: {\n      category: 'string',\n      accessLevel: 'string',\n      description: 'string'\n    }\n  },\n  maintenance: {\n    aiAnalysisEnabled: false, // Disabled by default\n    maxFileSize: 25,\n    allowedFileTypes: ['image/*', 'application/pdf'],\n    showCamera: true,\n    contextFields: {\n      priority: 'string',\n      category: 'string',\n      description: 'string'\n    }\n  }\n};\n\n/**\n * Generate secure storage directory path based on context and user role\n */\nexport function generateStorageDirectory(context: UploadContext): string {\n  const { type, organizationId, buildingId, residenceId, userRole, userId } = context;\n  \n  // Base directory structure: uploads/{type}/{org_or_default}/{building?}/{residence?}/{user_role}\n  const baseParts = ['uploads', type];\n  \n  // Organization level\n  const orgId = organizationId || 'default';\n  baseParts.push(`org_${orgId}`);\n  \n  // Building level (if applicable)\n  if (buildingId) {\n    baseParts.push(`building_${buildingId}`);\n  }\n  \n  // Residence level (if applicable)\n  if (residenceId) {\n    baseParts.push(`residence_${residenceId}`);\n  }\n  \n  // Role-based access control\n  if (userRole) {\n    baseParts.push(`role_${userRole}`);\n  }\n  \n  // User-specific directory for private uploads (if needed)\n  if (userRole === 'tenant' || userRole === 'resident') {\n    baseParts.push(`user_${userId}`);\n  }\n  \n  return baseParts.join('/');\n}\n\n/**\n * Get upload configuration for a specific form type\n */\nexport function getUploadConfig(formType: string): UploadFormConfig {\n  return UPLOAD_FORM_CONFIGS[formType] || UPLOAD_FORM_CONFIGS.documents;\n}\n\n/**\n * Check if AI analysis is enabled for a specific context\n */\nexport function isAiAnalysisEnabled(formType: string): boolean {\n  const config = getUploadConfig(formType);\n  return config.aiAnalysisEnabled;\n}\n\n/**\n * Validate upload context and ensure proper access control\n */\nexport function validateUploadContext(context: UploadContext, userRole: string): boolean {\n  // Admin can upload to any context\n  if (userRole === 'admin') {\n    return true;\n  }\n  \n  // Manager can upload to their organization's buildings and residences\n  if (userRole === 'manager') {\n    return !!context.organizationId;\n  }\n  \n  // Resident can upload to their specific building/residence\n  if (userRole === 'resident') {\n    return !!(context.organizationId && (context.buildingId || context.residenceId));\n  }\n  \n  // Tenant can only upload to their specific residence\n  if (userRole === 'tenant') {\n    return !!(context.organizationId && context.buildingId && context.residenceId);\n  }\n  \n  return false;\n}"],"version":3}