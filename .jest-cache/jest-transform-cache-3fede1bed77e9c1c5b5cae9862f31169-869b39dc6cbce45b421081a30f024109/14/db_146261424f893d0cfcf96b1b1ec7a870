5cc386439fce2eda2b2a14bbf79225a5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pool = exports.db = exports.sql = void 0;
const serverless_1 = require("@neondatabase/serverless");
const neon_http_1 = require("drizzle-orm/neon-http");
const index_1 = require("./config/index");
// Import only tables that exist, not relations to avoid circular dependency issues in production
const schema_1 = require("@shared/schema");
// Use correct database URL based on environment (production uses DATABASE_URL_KOVEO)
const databaseUrl = index_1.config.database.url;
if (!databaseUrl) {
    throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');
}
const isUsingKoveoDb = databaseUrl.includes('DATABASE_URL_KOVEO') || (index_1.config.server.isProduction && process.env.DATABASE_URL_KOVEO);
console.log('üîó Connecting to database with URL:', databaseUrl.substring(0, 50) + '...');
console.log('üåç Environment:', index_1.config.server.nodeEnv);
console.log(`üìä Database: Using ${index_1.config.server.isProduction ? 'PRODUCTION (DATABASE_URL_KOVEO)' : 'DEVELOPMENT (DATABASE_URL)'} database`);
/**
 * Neon serverless database connection using HTTP.
 * Uses the same pattern as your successful test code.
 * Optimized for serverless environments like Replit deployments.
 */
exports.sql = (0, serverless_1.neon)(databaseUrl, {
    arrayMode: false,
    fullResults: false,
});
// Test connection
(async () => {
    try {
        const result = await (0, exports.sql) `SELECT version()`;
        console.log('‚úÖ Database connection successful:', result[0].version.substring(0, 50) + '...');
    }
    catch (error) {
        console.error('‚ùå Database connection failed:', error.message);
    }
})();
// Create schema object with only tables (no relations to avoid production errors)
const schema = {
    users: schema_1.users,
    organizations: schema_1.organizations,
    buildings: schema_1.buildings,
    residences: schema_1.residences,
    userOrganizations: schema_1.userOrganizations,
    userResidences: schema_1.userResidences,
    invitations: schema_1.invitations,
    documents: schema_1.documents,
    bills: schema_1.bills,
    demands: schema_1.demands,
    commonSpaces: schema_1.commonSpaces,
    passwordResetTokens: schema_1.passwordResetTokens,
    maintenanceRequests: schema_1.maintenanceRequests,
    permissions: schema_1.permissions,
    userPermissions: schema_1.userPermissions,
    rolePermissions: schema_1.rolePermissions,
    budgets: schema_1.budgets,
    monthlyBudgets: schema_1.monthlyBudgets,
};
/**
 * Drizzle ORM database instance with table definitions only.
 * Provides type-safe database operations for the Quebec property management system.
 * Uses HTTP connection for better compatibility with serverless environments.
 */
exports.db = (0, neon_http_1.drizzle)(exports.sql, { schema });
// Log schema loading
console.log('üìä Database initialized with', Object.keys(schema).length, 'tables');
// For compatibility, export sql as pool for session store
exports.pool = exports.sql;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXJ2ZXIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEseURBQWdEO0FBQ2hELHFEQUFnRDtBQUNoRCwwQ0FBd0M7QUFFeEMsaUdBQWlHO0FBQ2pHLDJDQW1Cd0I7QUFFeEIscUZBQXFGO0FBQ3JGLE1BQU0sV0FBVyxHQUFHLGNBQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO0FBRXhDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLG1FQUFtRSxDQUFDLENBQUM7QUFDdkYsQ0FBQztBQUVELE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGNBQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNwSSxPQUFPLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQ3pGLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsY0FBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0RCxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixjQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsaUNBQWlDLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixXQUFXLENBQUMsQ0FBQztBQUU1STs7OztHQUlHO0FBQ1UsUUFBQSxHQUFHLEdBQUcsSUFBQSxpQkFBSSxFQUFDLFdBQVcsRUFBRTtJQUNuQyxTQUFTLEVBQUUsS0FBSztJQUNoQixXQUFXLEVBQUUsS0FBSztDQUNuQixDQUFDLENBQUM7QUFFSCxrQkFBa0I7QUFDbEIsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNWLElBQUksQ0FBQztRQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxXQUFHLEVBQUEsa0JBQWtCLENBQUM7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUFDLE9BQU8sS0FBVSxFQUFFLENBQUM7UUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztBQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFTCxrRkFBa0Y7QUFDbEYsTUFBTSxNQUFNLEdBQUc7SUFDYixLQUFLLEVBQUwsY0FBSztJQUNMLGFBQWEsRUFBYixzQkFBYTtJQUNiLFNBQVMsRUFBVCxrQkFBUztJQUNULFVBQVUsRUFBVixtQkFBVTtJQUNWLGlCQUFpQixFQUFqQiwwQkFBaUI7SUFDakIsY0FBYyxFQUFkLHVCQUFjO0lBQ2QsV0FBVyxFQUFYLG9CQUFXO0lBQ1gsU0FBUyxFQUFULGtCQUFTO0lBQ1QsS0FBSyxFQUFMLGNBQUs7SUFDTCxPQUFPLEVBQVAsZ0JBQU87SUFDUCxZQUFZLEVBQVoscUJBQVk7SUFDWixtQkFBbUIsRUFBbkIsNEJBQW1CO0lBQ25CLG1CQUFtQixFQUFuQiw0QkFBbUI7SUFDbkIsV0FBVyxFQUFYLG9CQUFXO0lBQ1gsZUFBZSxFQUFmLHdCQUFlO0lBQ2YsZUFBZSxFQUFmLHdCQUFlO0lBQ2YsT0FBTyxFQUFQLGdCQUFPO0lBQ1AsY0FBYyxFQUFkLHVCQUFjO0NBQ2YsQ0FBQztBQUVGOzs7O0dBSUc7QUFDVSxRQUFBLEVBQUUsR0FBRyxJQUFBLG1CQUFPLEVBQUMsV0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUUzQyxxQkFBcUI7QUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUVsRiwwREFBMEQ7QUFDN0MsUUFBQSxJQUFJLEdBQUcsV0FBRyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc2VydmVyL2RiLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5lb24gfSBmcm9tICdAbmVvbmRhdGFiYXNlL3NlcnZlcmxlc3MnO1xuaW1wb3J0IHsgZHJpenpsZSB9IGZyb20gJ2RyaXp6bGUtb3JtL25lb24taHR0cCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZy9pbmRleCc7XG5cbi8vIEltcG9ydCBvbmx5IHRhYmxlcyB0aGF0IGV4aXN0LCBub3QgcmVsYXRpb25zIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgaXNzdWVzIGluIHByb2R1Y3Rpb25cbmltcG9ydCB7XG4gIHVzZXJzLFxuICBvcmdhbml6YXRpb25zLFxuICBidWlsZGluZ3MsXG4gIHJlc2lkZW5jZXMsXG4gIHVzZXJPcmdhbml6YXRpb25zLFxuICB1c2VyUmVzaWRlbmNlcyxcbiAgaW52aXRhdGlvbnMsXG4gIGRvY3VtZW50cyxcbiAgYmlsbHMsXG4gIGRlbWFuZHMsXG4gIGNvbW1vblNwYWNlcyxcbiAgcGFzc3dvcmRSZXNldFRva2VucyxcbiAgbWFpbnRlbmFuY2VSZXF1ZXN0cyxcbiAgcGVybWlzc2lvbnMsXG4gIHVzZXJQZXJtaXNzaW9ucyxcbiAgcm9sZVBlcm1pc3Npb25zLFxuICBidWRnZXRzLFxuICBtb250aGx5QnVkZ2V0cyxcbn0gZnJvbSAnQHNoYXJlZC9zY2hlbWEnO1xuXG4vLyBVc2UgY29ycmVjdCBkYXRhYmFzZSBVUkwgYmFzZWQgb24gZW52aXJvbm1lbnQgKHByb2R1Y3Rpb24gdXNlcyBEQVRBQkFTRV9VUkxfS09WRU8pXG5jb25zdCBkYXRhYmFzZVVybCA9IGNvbmZpZy5kYXRhYmFzZS51cmw7XG5cbmlmICghZGF0YWJhc2VVcmwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdEQVRBQkFTRV9VUkwgbXVzdCBiZSBzZXQuIERpZCB5b3UgZm9yZ2V0IHRvIHByb3Zpc2lvbiBhIGRhdGFiYXNlPycpO1xufVxuXG5jb25zdCBpc1VzaW5nS292ZW9EYiA9IGRhdGFiYXNlVXJsLmluY2x1ZGVzKCdEQVRBQkFTRV9VUkxfS09WRU8nKSB8fCAoY29uZmlnLnNlcnZlci5pc1Byb2R1Y3Rpb24gJiYgcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMX0tPVkVPKTtcbmNvbnNvbGUubG9nKCfwn5SXIENvbm5lY3RpbmcgdG8gZGF0YWJhc2Ugd2l0aCBVUkw6JywgZGF0YWJhc2VVcmwuc3Vic3RyaW5nKDAsIDUwKSArICcuLi4nKTtcbmNvbnNvbGUubG9nKCfwn4yNIEVudmlyb25tZW50OicsIGNvbmZpZy5zZXJ2ZXIubm9kZUVudik7XG5jb25zb2xlLmxvZyhg8J+TiiBEYXRhYmFzZTogVXNpbmcgJHtjb25maWcuc2VydmVyLmlzUHJvZHVjdGlvbiA/ICdQUk9EVUNUSU9OIChEQVRBQkFTRV9VUkxfS09WRU8pJyA6ICdERVZFTE9QTUVOVCAoREFUQUJBU0VfVVJMKSd9IGRhdGFiYXNlYCk7XG5cbi8qKlxuICogTmVvbiBzZXJ2ZXJsZXNzIGRhdGFiYXNlIGNvbm5lY3Rpb24gdXNpbmcgSFRUUC5cbiAqIFVzZXMgdGhlIHNhbWUgcGF0dGVybiBhcyB5b3VyIHN1Y2Nlc3NmdWwgdGVzdCBjb2RlLlxuICogT3B0aW1pemVkIGZvciBzZXJ2ZXJsZXNzIGVudmlyb25tZW50cyBsaWtlIFJlcGxpdCBkZXBsb3ltZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHNxbCA9IG5lb24oZGF0YWJhc2VVcmwsIHtcbiAgYXJyYXlNb2RlOiBmYWxzZSxcbiAgZnVsbFJlc3VsdHM6IGZhbHNlLFxufSk7XG5cbi8vIFRlc3QgY29ubmVjdGlvblxuKGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzcWxgU0VMRUNUIHZlcnNpb24oKWA7XG4gICAgY29uc29sZS5sb2coJ+KchSBEYXRhYmFzZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWw6JywgcmVzdWx0WzBdLnZlcnNpb24uc3Vic3RyaW5nKDAsIDUwKSArICcuLi4nKTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvci5tZXNzYWdlKTtcbiAgfVxufSkoKTtcblxuLy8gQ3JlYXRlIHNjaGVtYSBvYmplY3Qgd2l0aCBvbmx5IHRhYmxlcyAobm8gcmVsYXRpb25zIHRvIGF2b2lkIHByb2R1Y3Rpb24gZXJyb3JzKVxuY29uc3Qgc2NoZW1hID0ge1xuICB1c2VycyxcbiAgb3JnYW5pemF0aW9ucyxcbiAgYnVpbGRpbmdzLFxuICByZXNpZGVuY2VzLFxuICB1c2VyT3JnYW5pemF0aW9ucyxcbiAgdXNlclJlc2lkZW5jZXMsXG4gIGludml0YXRpb25zLFxuICBkb2N1bWVudHMsXG4gIGJpbGxzLFxuICBkZW1hbmRzLFxuICBjb21tb25TcGFjZXMsXG4gIHBhc3N3b3JkUmVzZXRUb2tlbnMsXG4gIG1haW50ZW5hbmNlUmVxdWVzdHMsXG4gIHBlcm1pc3Npb25zLFxuICB1c2VyUGVybWlzc2lvbnMsXG4gIHJvbGVQZXJtaXNzaW9ucyxcbiAgYnVkZ2V0cyxcbiAgbW9udGhseUJ1ZGdldHMsXG59O1xuXG4vKipcbiAqIERyaXp6bGUgT1JNIGRhdGFiYXNlIGluc3RhbmNlIHdpdGggdGFibGUgZGVmaW5pdGlvbnMgb25seS5cbiAqIFByb3ZpZGVzIHR5cGUtc2FmZSBkYXRhYmFzZSBvcGVyYXRpb25zIGZvciB0aGUgUXVlYmVjIHByb3BlcnR5IG1hbmFnZW1lbnQgc3lzdGVtLlxuICogVXNlcyBIVFRQIGNvbm5lY3Rpb24gZm9yIGJldHRlciBjb21wYXRpYmlsaXR5IHdpdGggc2VydmVybGVzcyBlbnZpcm9ubWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBkYiA9IGRyaXp6bGUoc3FsLCB7IHNjaGVtYSB9KTtcblxuLy8gTG9nIHNjaGVtYSBsb2FkaW5nXG5jb25zb2xlLmxvZygn8J+TiiBEYXRhYmFzZSBpbml0aWFsaXplZCB3aXRoJywgT2JqZWN0LmtleXMoc2NoZW1hKS5sZW5ndGgsICd0YWJsZXMnKTtcblxuLy8gRm9yIGNvbXBhdGliaWxpdHksIGV4cG9ydCBzcWwgYXMgcG9vbCBmb3Igc2Vzc2lvbiBzdG9yZVxuZXhwb3J0IGNvbnN0IHBvb2wgPSBzcWw7XG4iXSwidmVyc2lvbiI6M30=