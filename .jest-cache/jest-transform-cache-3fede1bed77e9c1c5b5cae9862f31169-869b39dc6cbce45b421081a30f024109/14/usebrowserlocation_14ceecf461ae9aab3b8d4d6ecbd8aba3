d1f82b02a7f6290f8fea49a6e9c185db
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSearch = exports.usePathname = exports.useLocationProperty = exports.useHistoryState = exports.useBrowserLocation = exports.navigate = void 0;
const react_deps_js_1 = require("./react-deps.js");
/**
 * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History
 */
const eventPopstate = "popstate";
const eventPushState = "pushState";
const eventReplaceState = "replaceState";
const eventHashchange = "hashchange";
const events = [
    eventPopstate,
    eventPushState,
    eventReplaceState,
    eventHashchange,
];
const subscribeToLocationUpdates = (callback) => {
    for (const event of events) {
        addEventListener(event, callback);
    }
    return () => {
        for (const event of events) {
            removeEventListener(event, callback);
        }
    };
};
const useLocationProperty = (fn, ssrFn) => (0, react_deps_js_1.useSyncExternalStore)(subscribeToLocationUpdates, fn, ssrFn);
exports.useLocationProperty = useLocationProperty;
const currentSearch = () => location.search;
const useSearch = ({ ssrSearch = "" } = {}) => useLocationProperty(currentSearch, () => ssrSearch);
exports.useSearch = useSearch;
const currentPathname = () => location.pathname;
const usePathname = ({ ssrPath } = {}) => useLocationProperty(currentPathname, ssrPath ? () => ssrPath : currentPathname);
exports.usePathname = usePathname;
const currentHistoryState = () => history.state;
const useHistoryState = () => useLocationProperty(currentHistoryState, () => null);
exports.useHistoryState = useHistoryState;
const navigate = (to, { replace = false, state = null } = {}) => history[replace ? eventReplaceState : eventPushState](state, "", to);
exports.navigate = navigate;
// the 2nd argument of the `useBrowserLocation` return value is a function
// that allows to perform a navigation.
const useBrowserLocation = (opts = {}) => [usePathname(opts), navigate];
exports.useBrowserLocation = useBrowserLocation;
const patchKey = Symbol.for("wouter_v3");
// While History API does have `popstate` event, the only
// proper way to listen to changes via `push/replaceState`
// is to monkey-patch these methods.
//
// See https://stackoverflow.com/a/4585031
if (typeof history !== "undefined" && typeof window[patchKey] === "undefined") {
    for (const type of [eventPushState, eventReplaceState]) {
        const original = history[type];
        // TODO: we should be using unstable_batchedUpdates to avoid multiple re-renders,
        // however that will require an additional peer dependency on react-dom.
        // See: https://github.com/reactwg/react-18/discussions/86#discussioncomment-1567149
        history[type] = function () {
            const result = original.apply(this, arguments);
            const event = new Event(type);
            event.arguments = arguments;
            dispatchEvent(event);
            return result;
        };
    }
    // patch history object only once
    // See: https://github.com/molefrog/wouter/issues/167
    Object.defineProperty(window, patchKey, { value: true });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvd291dGVyL2VzbS91c2UtYnJvd3Nlci1sb2NhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFBdUQ7QUFFdkQ7O0dBRUc7QUFDSCxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUM7QUFDakMsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDO0FBQ25DLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDO0FBQ3pDLE1BQU0sZUFBZSxHQUFHLFlBQVksQ0FBQztBQUNyQyxNQUFNLE1BQU0sR0FBRztJQUNiLGFBQWE7SUFDYixjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLGVBQWU7Q0FDaEIsQ0FBQztBQUVGLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRTtJQUM5QyxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzNCLGdCQUFnQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsT0FBTyxHQUFHLEVBQUU7UUFDVixLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQzNCLG1CQUFtQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2QyxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUN4QyxJQUFBLG9DQUFvQixFQUFDLDBCQUEwQixFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQXNETixrREFBbUI7QUFwRDNFLE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFFNUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUM1QyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFpRG9DLDhCQUFTO0FBL0NuRyxNQUFNLGVBQWUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0FBRWhELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUN2QyxtQkFBbUIsQ0FDakIsZUFBZSxFQUNmLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQzFDLENBQUM7QUF5Q3lFLGtDQUFXO0FBdkN4RixNQUFNLG1CQUFtQixHQUFHLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDaEQsTUFBTSxlQUFlLEdBQUcsR0FBRyxFQUFFLENBQzNCLG1CQUFtQixDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBcUNoQiwwQ0FBZTtBQW5DdEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUM5RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQWtDOUQsNEJBQVE7QUFoQ2pCLDBFQUEwRTtBQUMxRSx1Q0FBdUM7QUFDdkMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBOEJyRCxnREFBa0I7QUE1QnJDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFekMseURBQXlEO0FBQ3pELDBEQUEwRDtBQUMxRCxvQ0FBb0M7QUFDcEMsRUFBRTtBQUNGLDBDQUEwQztBQUMxQyxJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUM5RSxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUN2RCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsaUZBQWlGO1FBQ2pGLHdFQUF3RTtRQUN4RSxvRkFBb0Y7UUFDcEYsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ2QsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDL0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUIsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7WUFFNUIsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxpQ0FBaUM7SUFDakMscURBQXFEO0lBQ3JELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNELENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvd291dGVyL2VzbS91c2UtYnJvd3Nlci1sb2NhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJy4vcmVhY3QtZGVwcy5qcyc7XG5cbi8qKlxuICogSGlzdG9yeSBBUEkgZG9jcyBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IaXN0b3J5XG4gKi9cbmNvbnN0IGV2ZW50UG9wc3RhdGUgPSBcInBvcHN0YXRlXCI7XG5jb25zdCBldmVudFB1c2hTdGF0ZSA9IFwicHVzaFN0YXRlXCI7XG5jb25zdCBldmVudFJlcGxhY2VTdGF0ZSA9IFwicmVwbGFjZVN0YXRlXCI7XG5jb25zdCBldmVudEhhc2hjaGFuZ2UgPSBcImhhc2hjaGFuZ2VcIjtcbmNvbnN0IGV2ZW50cyA9IFtcbiAgZXZlbnRQb3BzdGF0ZSxcbiAgZXZlbnRQdXNoU3RhdGUsXG4gIGV2ZW50UmVwbGFjZVN0YXRlLFxuICBldmVudEhhc2hjaGFuZ2UsXG5dO1xuXG5jb25zdCBzdWJzY3JpYmVUb0xvY2F0aW9uVXBkYXRlcyA9IChjYWxsYmFjaykgPT4ge1xuICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgfVxuICByZXR1cm4gKCkgPT4ge1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XG4gICAgfVxuICB9O1xufTtcblxuY29uc3QgdXNlTG9jYXRpb25Qcm9wZXJ0eSA9IChmbiwgc3NyRm4pID0+XG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZVRvTG9jYXRpb25VcGRhdGVzLCBmbiwgc3NyRm4pO1xuXG5jb25zdCBjdXJyZW50U2VhcmNoID0gKCkgPT4gbG9jYXRpb24uc2VhcmNoO1xuXG5jb25zdCB1c2VTZWFyY2ggPSAoeyBzc3JTZWFyY2ggPSBcIlwiIH0gPSB7fSkgPT5cbiAgdXNlTG9jYXRpb25Qcm9wZXJ0eShjdXJyZW50U2VhcmNoLCAoKSA9PiBzc3JTZWFyY2gpO1xuXG5jb25zdCBjdXJyZW50UGF0aG5hbWUgPSAoKSA9PiBsb2NhdGlvbi5wYXRobmFtZTtcblxuY29uc3QgdXNlUGF0aG5hbWUgPSAoeyBzc3JQYXRoIH0gPSB7fSkgPT5cbiAgdXNlTG9jYXRpb25Qcm9wZXJ0eShcbiAgICBjdXJyZW50UGF0aG5hbWUsXG4gICAgc3NyUGF0aCA/ICgpID0+IHNzclBhdGggOiBjdXJyZW50UGF0aG5hbWVcbiAgKTtcblxuY29uc3QgY3VycmVudEhpc3RvcnlTdGF0ZSA9ICgpID0+IGhpc3Rvcnkuc3RhdGU7XG5jb25zdCB1c2VIaXN0b3J5U3RhdGUgPSAoKSA9PlxuICB1c2VMb2NhdGlvblByb3BlcnR5KGN1cnJlbnRIaXN0b3J5U3RhdGUsICgpID0+IG51bGwpO1xuXG5jb25zdCBuYXZpZ2F0ZSA9ICh0bywgeyByZXBsYWNlID0gZmFsc2UsIHN0YXRlID0gbnVsbCB9ID0ge30pID0+XG4gIGhpc3RvcnlbcmVwbGFjZSA/IGV2ZW50UmVwbGFjZVN0YXRlIDogZXZlbnRQdXNoU3RhdGVdKHN0YXRlLCBcIlwiLCB0byk7XG5cbi8vIHRoZSAybmQgYXJndW1lbnQgb2YgdGhlIGB1c2VCcm93c2VyTG9jYXRpb25gIHJldHVybiB2YWx1ZSBpcyBhIGZ1bmN0aW9uXG4vLyB0aGF0IGFsbG93cyB0byBwZXJmb3JtIGEgbmF2aWdhdGlvbi5cbmNvbnN0IHVzZUJyb3dzZXJMb2NhdGlvbiA9IChvcHRzID0ge30pID0+IFt1c2VQYXRobmFtZShvcHRzKSwgbmF2aWdhdGVdO1xuXG5jb25zdCBwYXRjaEtleSA9IFN5bWJvbC5mb3IoXCJ3b3V0ZXJfdjNcIik7XG5cbi8vIFdoaWxlIEhpc3RvcnkgQVBJIGRvZXMgaGF2ZSBgcG9wc3RhdGVgIGV2ZW50LCB0aGUgb25seVxuLy8gcHJvcGVyIHdheSB0byBsaXN0ZW4gdG8gY2hhbmdlcyB2aWEgYHB1c2gvcmVwbGFjZVN0YXRlYFxuLy8gaXMgdG8gbW9ua2V5LXBhdGNoIHRoZXNlIG1ldGhvZHMuXG4vL1xuLy8gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80NTg1MDMxXG5pZiAodHlwZW9mIGhpc3RvcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvd1twYXRjaEtleV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yIChjb25zdCB0eXBlIG9mIFtldmVudFB1c2hTdGF0ZSwgZXZlbnRSZXBsYWNlU3RhdGVdKSB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSBoaXN0b3J5W3R5cGVdO1xuICAgIC8vIFRPRE86IHdlIHNob3VsZCBiZSB1c2luZyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyB0byBhdm9pZCBtdWx0aXBsZSByZS1yZW5kZXJzLFxuICAgIC8vIGhvd2V2ZXIgdGhhdCB3aWxsIHJlcXVpcmUgYW4gYWRkaXRpb25hbCBwZWVyIGRlcGVuZGVuY3kgb24gcmVhY3QtZG9tLlxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0d2cvcmVhY3QtMTgvZGlzY3Vzc2lvbnMvODYjZGlzY3Vzc2lvbmNvbW1lbnQtMTU2NzE0OVxuICAgIGhpc3RvcnlbdHlwZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQodHlwZSk7XG4gICAgICBldmVudC5hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgICAgIGRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9XG5cbiAgLy8gcGF0Y2ggaGlzdG9yeSBvYmplY3Qgb25seSBvbmNlXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vbGVmcm9nL3dvdXRlci9pc3N1ZXMvMTY3XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csIHBhdGNoS2V5LCB7IHZhbHVlOiB0cnVlIH0pO1xufVxuXG5leHBvcnQgeyBuYXZpZ2F0ZSwgdXNlQnJvd3NlckxvY2F0aW9uLCB1c2VIaXN0b3J5U3RhdGUsIHVzZUxvY2F0aW9uUHJvcGVydHksIHVzZVBhdGhuYW1lLCB1c2VTZWFyY2ggfTtcbiJdLCJ2ZXJzaW9uIjozfQ==