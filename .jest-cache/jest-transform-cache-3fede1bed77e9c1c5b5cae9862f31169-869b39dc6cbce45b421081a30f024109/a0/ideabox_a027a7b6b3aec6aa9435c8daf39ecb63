f56781559939b7e1c6a1d981db75a224
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = IdeaBox;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const collapsible_1 = require("@/components/ui/collapsible");
const lucide_react_1 = require("lucide-react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const use_auth_1 = require("@/hooks/use-auth");
const AttachedFileSection_1 = require("@/components/common/AttachedFileSection");
// Feature request form schema
const featureRequestFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Feature title is required').max(200, 'Title must be less than 200 characters'),
    description: zod_2.z
        .string()
        .min(10, 'Description must be at least 10 characters long')
        .max(2000, 'Description must be less than 2000 characters'),
    need: zod_2.z
        .string()
        .min(5, 'Need explanation must be at least 5 characters long')
        .max(500, 'Need explanation must be less than 500 characters'),
    category: zod_2.z.enum([
        'dashboard',
        'property_management',
        'resident_management',
        'financial_management',
        'maintenance',
        'document_management',
        'communication',
        'reports',
        'mobile_app',
        'integrations',
        'security',
        'performance',
        'other',
    ]),
    page: zod_2.z.string().min(1, 'Page location is required').max(100, 'Page location must be less than 100 characters'),
});
// Enhanced edit form schema for role-based editing
const editFormSchema = featureRequestFormSchema.extend({
    status: zod_2.z.enum(['submitted', 'under_review', 'planned', 'in_progress', 'completed', 'rejected']).optional(),
    adminNotes: zod_2.z.string().max(1000, 'Admin notes must be less than 1000 characters').optional(),
});
const categoryLabels = {
    dashboard: 'Dashboard',
    property_management: 'Property Management',
    resident_management: 'Resident Management',
    financial_management: 'Financial Management',
    maintenance: 'Maintenance',
    document_management: 'Document Management',
    communication: 'Communication',
    reports: 'Reports',
    mobile_app: 'Mobile App',
    integrations: 'Integrations',
    security: 'Security',
    performance: 'Performance',
    other: 'Other',
};
const statusColors = {
    submitted: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
    under_review: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',
    planned: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300',
    in_progress: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
    completed: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
    rejected: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300',
};
const categoryIcons = {
    dashboard: '📊',
    property_management: '🏢',
    resident_management: '👥',
    financial_management: '💰',
    maintenance: '🔧',
    document_management: '📁',
    communication: '💬',
    reports: '📈',
    mobile_app: '📱',
    integrations: '🔗',
    security: '🔒',
    performance: '⚡',
    other: '❓',
};
// Idea Card Component
function IdeaCard({ idea, onView, onEdit, onUpvote, canEdit, canUpvote }) {
    const formatDate = (dateString) => {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
        if (diffDays === 0)
            return 'Today';
        if (diffDays === 1)
            return 'Yesterday';
        if (diffDays < 7)
            return `${diffDays} days ago`;
        if (diffDays < 30)
            return `${Math.floor(diffDays / 7)} weeks ago`;
        return date.toLocaleDateString();
    };
    return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: "cursor-pointer hover:shadow-md transition-all duration-200 hover:border-blue-200 dark:hover:border-blue-700", onClick: () => onView(idea), "data-testid": `card-idea-${idea.id}`, children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { className: "pb-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-start justify-between gap-2", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center gap-2 flex-1 min-w-0", children: (0, jsx_runtime_1.jsx)("h3", { className: "font-semibold text-sm line-clamp-2 flex-1 break-words", "data-testid": `text-title-${idea.id}`, children: idea.title }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-1 flex-shrink-0", children: [canEdit && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: (e) => {
                                        e.stopPropagation();
                                        onEdit(idea);
                                    }, "data-testid": `button-edit-${idea.id}`, className: "h-7 w-7 p-0 hover:bg-blue-100 dark:hover:bg-blue-900", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Edit2, { className: "h-3 w-3" }) })), idea.filePath && ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: (e) => {
                                        e.stopPropagation();
                                        window.open(`/api/feature-requests/${idea.id}/file`, '_blank');
                                    }, "data-testid": `button-file-${idea.id}`, className: "h-7 w-7 p-0 hover:bg-gray-100 dark:hover:bg-gray-800", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Paperclip, { className: "h-3 w-3" }) }))] })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "pt-0", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-3", "data-testid": `text-description-${idea.id}`, children: idea.description }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[idea.status], "data-testid": `badge-status-${idea.id}`, children: idea.status.replace('_', ' ') }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", "data-testid": `text-page-${idea.id}`, children: idea.page })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "ghost", size: "sm", onClick: (e) => {
                                            e.stopPropagation();
                                            if (canUpvote)
                                                onUpvote(idea);
                                        }, disabled: !canUpvote, "data-testid": `button-upvote-${idea.id}`, className: "h-7 px-2 gap-1 hover:bg-green-100 dark:hover:bg-green-900", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ThumbsUp, { className: "h-3 w-3" }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs font-medium", children: idea.upvoteCount })] }), (0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", "data-testid": `text-date-${idea.id}`, children: formatDate(idea.createdAt) })] })] })] })] }));
}
function IdeaBox() {
    const [isCreateDialogOpen, setIsCreateDialogOpen] = (0, react_1.useState)(false);
    const [isEditDialogOpen, setIsEditDialogOpen] = (0, react_1.useState)(false);
    const [isViewDialogOpen, setIsViewDialogOpen] = (0, react_1.useState)(false);
    const [viewingFeatureRequest, setViewingFeatureRequest] = (0, react_1.useState)(null);
    const [editingFeatureRequest, setEditingFeatureRequest] = (0, react_1.useState)(null);
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('all');
    const [categoryFilter, setCategoryFilter] = (0, react_1.useState)('all');
    const [sortBy, setSortBy] = (0, react_1.useState)('newest');
    const [expandedCategories, setExpandedCategories] = (0, react_1.useState)(new Set(['dashboard']));
    // Attachment states
    const [attachmentMode, setAttachmentMode] = (0, react_1.useState)('file');
    const [attachmentText, setAttachmentText] = (0, react_1.useState)('');
    const [editAttachmentMode, setEditAttachmentMode] = (0, react_1.useState)('file');
    const [editAttachmentText, setEditAttachmentText] = (0, react_1.useState)('');
    const { toast } = (0, use_toast_1.useToast)();
    const { user } = (0, use_auth_1.useAuth)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(featureRequestFormSchema),
        defaultValues: {
            title: '',
            description: '',
            need: '',
            category: 'dashboard',
            page: '',
        }
    });
    const editForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(editFormSchema),
    });
    // Fetch feature requests
    const { data: featureRequests = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/feature-requests'],
        enabled: !!user,
    });
    // Helper functions
    const canEditIdea = (idea) => {
        if (!user)
            return false;
        return user.role === 'admin' ||
            (user.role === 'manager' && idea.createdBy === user.id) ||
            idea.createdBy === user.id;
    };
    const canUpvoteIdea = (idea) => {
        return !!user && user.id !== idea.createdBy;
    };
    // Filter and sort ideas
    const filteredIdeas = (0, react_1.useMemo)(() => {
        let filtered = featureRequests.filter((idea) => {
            const matchesSearch = searchTerm === '' ||
                idea.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                idea.description.toLowerCase().includes(searchTerm.toLowerCase());
            const matchesStatus = statusFilter === 'all' || idea.status === statusFilter;
            const matchesCategory = categoryFilter === 'all' || idea.category === categoryFilter;
            return matchesSearch && matchesStatus && matchesCategory;
        });
        // Sort ideas
        filtered.sort((a, b) => {
            switch (sortBy) {
                case 'upvotes':
                    return b.upvoteCount - a.upvoteCount;
                case 'oldest':
                    return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
                case 'newest':
                default:
                    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
            }
        });
        return filtered;
    }, [featureRequests, searchTerm, statusFilter, categoryFilter, sortBy]);
    // Group ideas by category
    const ideasByCategory = (0, react_1.useMemo)(() => {
        const grouped = {};
        filteredIdeas.forEach((idea) => {
            if (!grouped[idea.category]) {
                grouped[idea.category] = [];
            }
            grouped[idea.category].push(idea);
        });
        return grouped;
    }, [filteredIdeas]);
    // Create feature request mutation with file upload support
    const createMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const formData = new FormData();
            Object.entries(data).forEach(([key, value]) => {
                if (key !== 'file' && value !== undefined) {
                    formData.append(key, value.toString());
                }
            });
            if (data.file) {
                formData.append('file', data.file);
            }
            return fetch('/api/feature-requests', {
                method: 'POST',
                body: formData,
            }).then(res => res.json());
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            setIsCreateDialogOpen(false);
            form.reset();
            setAttachmentText('');
            setAttachmentMode('file');
            toast({
                title: 'Idea submitted!',
                description: 'Your feature idea has been submitted successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to submit idea',
                variant: 'destructive',
            });
        },
    });
    // Update feature request mutation with file upload support  
    const updateMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ id, data }) => {
            const formData = new FormData();
            Object.entries(data).forEach(([key, value]) => {
                if (key !== 'file' && value !== undefined && value !== null) {
                    formData.append(key, value.toString());
                }
            });
            if (data.file) {
                formData.append('file', data.file);
            }
            return fetch(`/api/feature-requests/${id}`, {
                method: 'PATCH',
                body: formData,
            }).then(res => res.json());
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            setIsEditDialogOpen(false);
            setEditingFeatureRequest(null);
            editForm.reset();
            setEditAttachmentText('');
            setEditAttachmentMode('file');
            toast({
                title: 'Idea updated!',
                description: 'Feature idea has been updated successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to update idea',
                variant: 'destructive',
            });
        },
    });
    // Upvote mutation
    const upvoteMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('POST', `/api/feature-requests/${id}/upvote`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            toast({
                title: 'Upvoted!',
                description: 'Your upvote has been recorded.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to upvote',
                variant: 'destructive',
            });
        },
    });
    // Delete mutation (admin only)
    const deleteMutation = (0, react_query_1.useMutation)({
        mutationFn: (id) => (0, queryClient_1.apiRequest)('DELETE', `/api/feature-requests/${id}`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/feature-requests'] });
            setIsEditDialogOpen(false);
            setEditingFeatureRequest(null);
            toast({
                title: 'Idea deleted!',
                description: 'The feature idea has been deleted successfully.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to delete idea',
                variant: 'destructive',
            });
        },
    });
    const handleSubmit = (data) => {
        if (attachmentMode === 'file') {
            const fileInput = document.querySelector('#file-upload');
            const file = fileInput?.files?.[0];
            createMutation.mutate({
                ...data,
                file,
            });
        }
        else {
            // For text mode, we could store the text as a text file or in a dedicated field
            // For now, let's append it to the description
            const enhancedData = {
                ...data,
                description: attachmentText ? `${data.description}\n\n**Additional Notes:**\n${attachmentText}` : data.description,
            };
            createMutation.mutate(enhancedData);
        }
    };
    const handleEditSubmit = (data) => {
        if (!editingFeatureRequest)
            return;
        if (editAttachmentMode === 'file') {
            const fileInput = document.querySelector('#edit-file-upload');
            const file = fileInput?.files?.[0];
            updateMutation.mutate({
                id: editingFeatureRequest.id,
                data: {
                    ...data,
                    file,
                },
            });
        }
        else {
            // For text mode, append to description
            const enhancedData = {
                ...data,
                description: editAttachmentText ? `${data.description}\n\n**Additional Notes:**\n${editAttachmentText}` : data.description,
            };
            updateMutation.mutate({
                id: editingFeatureRequest.id,
                data: enhancedData,
            });
        }
    };
    const handleViewIdea = (idea) => {
        setViewingFeatureRequest(idea);
        setIsViewDialogOpen(true);
    };
    const handleEditIdea = (idea) => {
        setEditingFeatureRequest(idea);
        editForm.reset({
            title: idea.title,
            description: idea.description,
            need: idea.need,
            category: idea.category,
            page: idea.page,
            status: idea.status,
            adminNotes: idea.adminNotes || '',
        });
        setEditAttachmentMode('file');
        setEditAttachmentText('');
        setIsEditDialogOpen(true);
    };
    const handleUpvoteIdea = (idea) => {
        upvoteMutation.mutate(idea.id);
    };
    const handleDeleteIdea = (idea) => {
        if (window.confirm(`Are you sure you want to delete "${idea.title}"? This action cannot be undone.`)) {
            deleteMutation.mutate(idea.id);
        }
    };
    const toggleCategory = (category) => {
        const newExpanded = new Set(expandedCategories);
        if (newExpanded.has(category)) {
            newExpanded.delete(category);
        }
        else {
            newExpanded.add(category);
        }
        setExpandedCategories(newExpanded);
    };
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 space-y-4 p-4 md:p-8 pt-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-between space-y-2", children: (0, jsx_runtime_1.jsx)("h2", { className: "text-3xl font-bold tracking-tight", children: "Idea Box" }) }), (0, jsx_runtime_1.jsx)("div", { className: "grid gap-4", children: [1, 2, 3].map(i => ((0, jsx_runtime_1.jsx)("div", { className: "h-32 bg-gray-100 dark:bg-gray-800 rounded-lg animate-pulse" }, i))) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 space-y-4 p-4 md:p-8 pt-6", children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: "Idea Box", subtitle: "Share your ideas to improve our platform" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-3xl font-bold tracking-tight", children: "Idea Box" }), (0, jsx_runtime_1.jsx)("p", { className: "text-muted-foreground", children: "Share your ideas to improve our platform" })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => setIsCreateDialogOpen(true), "data-testid": "button-create-idea", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "mr-2 h-4 w-4" }), "Submit New Idea"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col md:flex-row gap-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Search ideas...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "pl-10", "data-testid": "input-search" })] }) }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: statusFilter, onValueChange: setStatusFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: "w-48", "data-testid": "select-status-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Filter by status" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "all", children: "All Statuses" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "submitted", children: "Submitted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "under_review", children: "Under Review" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "planned", children: "Planned" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "in_progress", children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "completed", children: "Completed" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "rejected", children: "Rejected" })] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: categoryFilter, onValueChange: setCategoryFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: "w-48", "data-testid": "select-category-filter", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Filter by category" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "all", children: "All Categories" }), Object.entries(categoryLabels).map(([key, label]) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: key, children: label }, key)))] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: sortBy, onValueChange: setSortBy, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: "w-32", "data-testid": "select-sort", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "newest", children: "Newest" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "oldest", children: "Oldest" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "upvotes", children: "Most Upvoted" })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [Object.entries(categoryLabels).map(([categoryKey, categoryLabel]) => {
                        const categoryIdeas = ideasByCategory[categoryKey] || [];
                        if (categoryIdeas.length === 0)
                            return null;
                        const isExpanded = expandedCategories.has(categoryKey);
                        return ((0, jsx_runtime_1.jsx)("div", { className: "space-y-3", children: (0, jsx_runtime_1.jsxs)(collapsible_1.Collapsible, { open: isExpanded, onOpenChange: () => toggleCategory(categoryKey), children: [(0, jsx_runtime_1.jsxs)(collapsible_1.CollapsibleTrigger, { className: "flex items-center gap-2 p-2 w-full text-left hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg transition-colors", children: [isExpanded ? ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: "h-4 w-4" })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: "h-4 w-4" })), (0, jsx_runtime_1.jsx)("span", { className: "text-lg font-semibold", children: categoryLabel }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: "secondary", className: "ml-2", children: categoryIdeas.length })] }), (0, jsx_runtime_1.jsx)(collapsible_1.CollapsibleContent, { className: "space-y-3", children: (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 pl-6", children: categoryIdeas.map((idea) => ((0, jsx_runtime_1.jsx)(IdeaCard, { idea: idea, onView: handleViewIdea, onEdit: handleEditIdea, onUpvote: handleUpvoteIdea, canEdit: canEditIdea(idea), canUpvote: canUpvoteIdea(idea) }, idea.id))) }) })] }) }, categoryKey));
                    }), filteredIdeas.length === 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "text-center py-12", children: [(0, jsx_runtime_1.jsx)("h3", { className: "mt-2 text-sm font-medium text-gray-900 dark:text-gray-100", children: "No ideas found" }), (0, jsx_runtime_1.jsx)("p", { className: "mt-1 text-sm text-gray-500 dark:text-gray-400", children: searchTerm || statusFilter !== 'all' || categoryFilter !== 'all'
                                    ? 'Try adjusting your search or filters.'
                                    : 'Get started by submitting your first idea.' })] }))] }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isCreateDialogOpen, onOpenChange: setIsCreateDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "sm:max-w-[600px] max-h-[90vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Submit New Idea" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(handleSubmit), className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "title", children: "Feature Title *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "title", ...form.register('title'), placeholder: "e.g. Add bulk export for documents", "data-testid": "input-title" }), form.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: form.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "description", children: "Description *" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "description", ...form.register('description'), placeholder: "Describe your feature idea in detail...", rows: 4, "data-testid": "textarea-description" }), form.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: form.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "need", children: "Why is this needed? *" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "need", ...form.register('need'), placeholder: "Explain the specific need this feature addresses...", rows: 3, "data-testid": "textarea-need" }), form.formState.errors.need && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: form.formState.errors.need.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "category", children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: form.watch('category'), onValueChange: (value) => form.setValue('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: Object.entries(categoryLabels).map(([key, label]) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: key, children: label }, key))) })] }), form.formState.errors.category && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: form.formState.errors.category.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "page", children: "Page/Location *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "page", ...form.register('page'), placeholder: "e.g. Document Management", "data-testid": "input-page" }), form.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: form.formState.errors.page.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4 border-t pt-4", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Choose Document Type" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex space-x-3", children: [(0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setAttachmentMode('file'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${attachmentMode === 'file'
                                                        ? 'border-blue-500 bg-blue-50 text-blue-700 dark:bg-blue-900 dark:text-blue-300'
                                                        : 'border-gray-200 hover:border-gray-300 dark:border-gray-700 dark:hover:border-gray-600'}`, "data-testid": "button-file-mode", children: "\uD83D\uDCC1 Upload File" }), (0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setAttachmentMode('text'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${attachmentMode === 'text'
                                                        ? 'border-blue-500 bg-blue-50 text-blue-700 dark:bg-blue-900 dark:text-blue-300'
                                                        : 'border-gray-200 hover:border-gray-300 dark:border-gray-700 dark:hover:border-gray-600'}`, "data-testid": "button-text-mode", children: "\uD83D\uDCDD Text Document" })] }), attachmentMode === 'file' ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "file-upload", children: "Select File to Upload" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "file-upload", type: "file", accept: ".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif", "data-testid": "input-file", className: "mt-1" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "Attach a screenshot, mockup, or document to help explain your idea" })] })) : ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "text-content", children: "Document Content" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "text-content", value: attachmentText, onChange: (e) => setAttachmentText(e.target.value), rows: 5, className: "w-full mt-1", placeholder: "Add detailed notes, specifications, or any additional information about your idea...", "data-testid": "textarea-text-content" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "This will show as additional notes with your idea" })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end space-x-2 pt-4", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: () => setIsCreateDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: createMutation.isPending, "data-testid": "button-submit", children: createMutation.isPending ? 'Submitting...' : 'Submit Idea' })] })] })] }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isEditDialogOpen, onOpenChange: setIsEditDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "sm:max-w-[600px] max-h-[90vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Edit Idea" }) }), (0, jsx_runtime_1.jsxs)("form", { onSubmit: editForm.handleSubmit(handleEditSubmit), className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-title", children: "Feature Title *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "edit-title", ...editForm.register('title'), "data-testid": "input-edit-title" }), editForm.formState.errors.title && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: editForm.formState.errors.title.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-description", children: "Description *" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "edit-description", ...editForm.register('description'), rows: 4, "data-testid": "textarea-edit-description" }), editForm.formState.errors.description && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: editForm.formState.errors.description.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-need", children: "Why is this needed? *" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "edit-need", ...editForm.register('need'), rows: 3, "data-testid": "textarea-edit-need" }), editForm.formState.errors.need && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: editForm.formState.errors.need.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-category", children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('category'), onValueChange: (value) => editForm.setValue('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-edit-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: Object.entries(categoryLabels).map(([key, label]) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: key, children: label }, key))) })] }), editForm.formState.errors.category && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: editForm.formState.errors.category.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-page", children: "Page/Location *" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "edit-page", ...editForm.register('page'), "data-testid": "input-edit-page" }), editForm.formState.errors.page && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: editForm.formState.errors.page.message }))] })] }), user?.role === 'admin' && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-status", children: "Status" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: editForm.watch('status'), onValueChange: (value) => editForm.setValue('status', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-edit-status", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "submitted", children: "Submitted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "under_review", children: "Under Review" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "planned", children: "Planned" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "in_progress", children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "completed", children: "Completed" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "rejected", children: "Rejected" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-admin-notes", children: "Admin Notes" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "edit-admin-notes", ...editForm.register('adminNotes'), placeholder: "Internal notes (visible to admins only)", rows: 2, "data-testid": "textarea-admin-notes" })] })] })), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4 border-t pt-4", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: "text-sm font-medium", children: "Choose Document Type" }), (0, jsx_runtime_1.jsxs)("div", { className: "flex space-x-3", children: [(0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setEditAttachmentMode('file'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${editAttachmentMode === 'file'
                                                        ? 'border-blue-500 bg-blue-50 text-blue-700 dark:bg-blue-900 dark:text-blue-300'
                                                        : 'border-gray-200 hover:border-gray-300 dark:border-gray-700 dark:hover:border-gray-600'}`, "data-testid": "button-edit-file-mode", children: "\uD83D\uDCC1 Upload File" }), (0, jsx_runtime_1.jsx)("button", { type: "button", onClick: () => setEditAttachmentMode('text'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${editAttachmentMode === 'text'
                                                        ? 'border-blue-500 bg-blue-50 text-blue-700 dark:bg-blue-900 dark:text-blue-300'
                                                        : 'border-gray-200 hover:border-gray-300 dark:border-gray-700 dark:hover:border-gray-600'}`, "data-testid": "button-edit-text-mode", children: "\uD83D\uDCDD Text Document" })] }), editAttachmentMode === 'file' ? ((0, jsx_runtime_1.jsxs)("div", { children: [editingFeatureRequest?.filePath && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2 mb-4", children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: "Current Attachment" }), (0, jsx_runtime_1.jsx)(AttachedFileSection_1.AttachedFileSection, { entityType: "feature-request", entityId: editingFeatureRequest.id, filePath: editingFeatureRequest.filePath, fileName: editingFeatureRequest.fileName, fileSize: editingFeatureRequest.fileSize })] })), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-file-upload", children: "Select File to Upload" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: "edit-file-upload", type: "file", accept: ".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif", "data-testid": "input-edit-file", className: "mt-1" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: editingFeatureRequest?.filePath ? 'Upload a new file to replace the current attachment' : 'Attach a screenshot, mockup, or document' })] })) : ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "edit-text-content", children: "Document Content" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: "edit-text-content", value: editAttachmentText, onChange: (e) => setEditAttachmentText(e.target.value), rows: 5, className: "w-full mt-1", placeholder: "Add detailed notes, specifications, or any additional information...", "data-testid": "textarea-edit-text-content" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-500 mt-1", children: "This will show as additional notes with your idea" })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center pt-4", children: [(0, jsx_runtime_1.jsx)("div", { children: user?.role === 'admin' && editingFeatureRequest && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "destructive", onClick: () => handleDeleteIdea(editingFeatureRequest), disabled: deleteMutation.isPending, "data-testid": "button-delete-idea", children: deleteMutation.isPending ? 'Deleting...' : 'Delete Idea' })) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex space-x-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: () => setIsEditDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: updateMutation.isPending, "data-testid": "button-update", children: updateMutation.isPending ? 'Updating...' : 'Update Idea' })] })] })] })] }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isViewDialogOpen, onOpenChange: setIsViewDialogOpen, children: (0, jsx_runtime_1.jsx)(dialog_1.DialogContent, { className: "sm:max-w-[700px] max-h-[90vh] overflow-y-auto", children: viewingFeatureRequest && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-start justify-between gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex-1", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { className: "text-xl", children: viewingFeatureRequest.title }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2 mt-2", children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[viewingFeatureRequest.status], children: viewingFeatureRequest.status.replace('_', ' ') }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-500", children: categoryLabels[viewingFeatureRequest.category] }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-500", children: "\u2022" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-500", children: viewingFeatureRequest.page })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", onClick: () => handleUpvoteIdea(viewingFeatureRequest), disabled: !canUpvoteIdea(viewingFeatureRequest), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ThumbsUp, { className: "h-4 w-4 mr-1" }), viewingFeatureRequest.upvoteCount] }), canEditIdea(viewingFeatureRequest) && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", size: "sm", onClick: () => {
                                                        setIsViewDialogOpen(false);
                                                        handleEditIdea(viewingFeatureRequest);
                                                    }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit2, { className: "h-4 w-4 mr-1" }), "Edit"] }))] })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-semibold mb-2", children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-700 dark:text-gray-300 whitespace-pre-wrap", children: viewingFeatureRequest.description })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-semibold mb-2", children: "Why is this needed?" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-700 dark:text-gray-300 whitespace-pre-wrap", children: viewingFeatureRequest.need })] }), viewingFeatureRequest.filePath && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-semibold mb-2", children: "Attachment" }), (0, jsx_runtime_1.jsx)(AttachedFileSection_1.AttachedFileSection, { entityType: "feature-request", entityId: viewingFeatureRequest.id, filePath: viewingFeatureRequest.filePath, fileName: viewingFeatureRequest.fileName, fileSize: viewingFeatureRequest.fileSize })] })), user?.role === 'admin' && viewingFeatureRequest.adminNotes && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: "font-semibold mb-2", children: "Admin Notes" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-700 dark:text-gray-300 whitespace-pre-wrap bg-gray-50 dark:bg-gray-800 p-3 rounded", children: viewingFeatureRequest.adminNotes })] })), (0, jsx_runtime_1.jsxs)("div", { className: "text-sm text-gray-500 pt-2 border-t", children: [(0, jsx_runtime_1.jsxs)("p", { children: ["Submitted on ", new Date(viewingFeatureRequest.createdAt).toLocaleDateString()] }), viewingFeatureRequest.updatedAt !== viewingFeatureRequest.createdAt && ((0, jsx_runtime_1.jsxs)("p", { children: ["Last updated on ", new Date(viewingFeatureRequest.updatedAt).toLocaleDateString()] }))] })] })] })) }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,