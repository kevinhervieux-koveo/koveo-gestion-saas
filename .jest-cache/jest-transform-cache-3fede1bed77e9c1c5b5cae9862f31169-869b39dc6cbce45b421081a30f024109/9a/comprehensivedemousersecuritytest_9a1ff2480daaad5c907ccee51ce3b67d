39825d37eb128c2e792dd6bcc723bc80
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock WebSocket constructor for Jest environment
jest.mock('ws', () => ({
    __esModule: true,
    default: class MockWebSocket {
    }
}));
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
/**
 * Demo User Security Restrictions Test Suite
 *
 * Validates that demo users have proper security restrictions:
 * - Cannot modify critical data
 * - Have read-only access to most features
 * - Cannot access sensitive information
 * - Cannot perform administrative actions
 */
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('Demo User Security Restrictions', () => {
    let app;
    let demoUser;
    let demoOrg;
    let normalUser;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clean up test data
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'demo-security@example.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'normal-security@example.com'));
        // Create demo organization
        [demoOrg] = await db_1.db.insert(schema.organizations).values({
            name: 'Demo Organization',
            type: 'syndicate',
            address: '123 Demo St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
        }).returning();
        // Create demo user with demo prefix
        [demoUser] = await db_1.db.insert(schema.users).values({
            username: 'demo-user-security',
            email: 'demo-security@example.com',
            firstName: 'Demo',
            lastName: 'User',
            password: '$2b$12$demo.password.hash',
            role: 'manager',
        }).returning();
        // Create normal user for comparison
        [normalUser] = await db_1.db.insert(schema.users).values({
            username: 'normal-user-security',
            email: 'normal-security@example.com',
            firstName: 'Normal',
            lastName: 'User',
            password: '$2b$12$normal.password.hash',
            role: 'manager',
        }).returning();
        // Link users to demo organization
        await db_1.db.insert(schema.userOrganizations).values([
            { userId: demoUser[0].id, organizationId: demoOrg.id, organizationRole: 'manager' },
            { userId: normalUser[0].id, organizationId: demoOrg.id, organizationRole: 'manager' },
        ]);
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'demo-security@example.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'normal-security@example.com'));
        if (demoOrg?.id)
            await db_1.db.delete(schema.organizations).where((0, drizzle_orm_1.eq)(schema.organizations.id, demoOrg.id));
    });
    (0, globals_1.describe)('Write Operation Restrictions', () => {
        (0, globals_1.it)('should prevent demo users from creating new users', async () => {
            // Mock login session for demo user
            const agent = supertest_1.default.agent(app);
            // Set up demo user session
            const sessionData = {
                userId: demoUser.id,
                role: demoUser.role,
                organizationId: demoUser.organizationId,
            };
            // Try to create new user
            const createUserResponse = await agent
                .post('/api/users')
                .send({
                username: 'newuser',
                email: 'newuser@example.com',
                firstName: 'New',
                lastName: 'User',
                password: 'password123',
                role: 'resident',
            });
            // Demo users should not be able to create users
            (0, globals_1.expect)(createUserResponse.status).toBe(403);
            (0, globals_1.expect)(createUserResponse.body.error).toContain('Demo users cannot perform this action');
        });
        (0, globals_1.it)('should prevent demo users from deleting data', async () => {
            // Create test building
            const [testBuilding] = await db_1.db.insert(schema.buildings).values({
                name: 'Test Building for Demo',
                address: '456 Test Ave',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1B 1B1',
                organizationId: demoOrg.id,
                buildingType: 'apartment',
                totalUnits: 10,
            }).returning();
            const agent = supertest_1.default.agent(app);
            // Try to delete building as demo user
            const deleteResponse = await agent
                .delete(`/api/buildings/${testBuilding.id}`);
            (0, globals_1.expect)(deleteResponse.status).toBe(403);
            (0, globals_1.expect)(deleteResponse.body.error).toContain('Demo users cannot perform this action');
            // Clean up
            await db_1.db.delete(schema.buildings).where((0, drizzle_orm_1.eq)(schema.buildings.id, testBuilding.id));
        });
        (0, globals_1.it)('should prevent demo users from modifying financial data', async () => {
            const agent = supertest_1.default.agent(app);
            // Try to create/modify financial records
            const billResponse = await agent
                .post('/api/bills')
                .send({
                organizationId: demoOrg.id,
                name: 'Test Bill',
                amount: 100.00,
                dueDate: new Date(),
            });
            (0, globals_1.expect)(billResponse.status).toBe(403);
        });
    });
    (0, globals_1.describe)('Read Access Validation', () => {
        (0, globals_1.it)('should allow demo users to read non-sensitive data', async () => {
            const agent = supertest_1.default.agent(app);
            // Demo users should be able to read buildings
            const buildingsResponse = await agent
                .get('/api/buildings');
            (0, globals_1.expect)(buildingsResponse.status).toBe(200);
        });
        (0, globals_1.it)('should restrict demo users from accessing sensitive reports', async () => {
            const agent = supertest_1.default.agent(app);
            // Try to access financial reports
            const reportsResponse = await agent
                .get('/api/reports/financial');
            (0, globals_1.expect)(reportsResponse.status).toBe(403);
        });
    });
    (0, globals_1.describe)('Demo User Identification', () => {
        (0, globals_1.it)('should properly identify demo users by username prefix', async () => {
            // Test the demo user detection logic
            const isDemoUser = demoUser.username.startsWith('demo-');
            (0, globals_1.expect)(isDemoUser).toBe(true);
            const isNormalUser = normalUser.username.startsWith('demo-');
            (0, globals_1.expect)(isNormalUser).toBe(false);
        });
        (0, globals_1.it)('should apply demo restrictions consistently across all endpoints', async () => {
            const restrictedEndpoints = [
                { method: 'post', path: '/api/users' },
                { method: 'put', path: '/api/organizations/1' },
                { method: 'delete', path: '/api/buildings/1' },
                { method: 'post', path: '/api/bills' },
                { method: 'delete', path: '/api/documents/1' },
            ];
            const agent = supertest_1.default.agent(app);
            for (const endpoint of restrictedEndpoints) {
                let response;
                switch (endpoint.method) {
                    case 'post':
                        response = await agent.post(endpoint.path).send({});
                        break;
                    case 'put':
                        response = await agent.put(endpoint.path).send({});
                        break;
                    case 'delete':
                        response = await agent.delete(endpoint.path);
                        break;
                    default:
                        response = await agent.get(endpoint.path);
                }
                // All should be restricted for demo users
                (0, globals_1.expect)(response.status).toBe(403);
            }
        });
    });
    (0, globals_1.describe)('Security Edge Cases', () => {
        (0, globals_1.it)('should prevent demo users from changing their own permissions', async () => {
            const agent = supertest_1.default.agent(app);
            // Try to update own user role
            const updateResponse = await agent
                .put(`/api/users/${demoUser.id}`)
                .send({
                role: 'admin'
            });
            (0, globals_1.expect)(updateResponse.status).toBe(403);
        });
        (0, globals_1.it)('should prevent demo users from accessing user management features', async () => {
            const agent = supertest_1.default.agent(app);
            // Try to access user management endpoints
            const inviteResponse = await agent
                .post('/api/invitations')
                .send({
                email: 'test@example.com',
                role: 'resident',
            });
            (0, globals_1.expect)(inviteResponse.status).toBe(403);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,