{"file":"/home/runner/workspace/tests/integration/bug-reports-rbac.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/bug-reports-rbac.test.ts"],"sourcesContent":["/**\n * Integration Tests for Bug Reports Role-Based Access Control\n * \n * Tests cover the fix for redundant client-side filtering that prevented\n * admins from seeing all bugs. Now properly tests:\n * - Admin users can see all bug reports\n * - Regular users can only see their own bug reports\n * - Server-side access control works correctly\n * - Client-side filtering only applies to search/status/priority\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport session from 'express-session';\nimport { registerBugRoutes } from '../../server/api/bugs';\nimport { MemStorage } from '../../server/storage';\nimport { createTestUser } from '../utils/test-utils';\nimport type { Bug, InsertBug } from '../../shared/schema';\n\n// Mock storage\nlet mockStorage: MemStorage;\n\n// Create test Express app\nconst createTestApp = () => {\n  const app = express();\n  \n  // Setup middleware\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Session middleware for authentication\n  app.use(\n    session({\n      secret: 'test-secret',\n      resave: false,\n      saveUninitialized: false,\n      cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 },\n    })\n  );\n  \n  // Mock auth middleware\n  app.use((req: any, res, next) => {\n    if (req.session?.user) {\n      req.user = req.session.user;\n    }\n    next();\n  });\n  \n  // Register bug routes\n  registerBugRoutes(app);\n  \n  return app;\n};\n\ndescribe('Bug Reports Role-Based Access Control', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let user1: any;\n  let user2: any;\n  let adminAgent: request.SuperAgentTest;\n  let user1Agent: request.SuperAgentTest;\n  let user2Agent: request.SuperAgentTest;\n  let createdBugs: Bug[] = [];\n\n  beforeEach(async () => {\n    // Initialize mock storage\n    mockStorage = new MemStorage();\n    \n    // Mock the storage module\n    jest.doMock('../../server/storage', () => ({\n      storage: mockStorage\n    }));\n    \n    app = createTestApp();\n    \n    // Create test users\n    adminUser = await createTestUser({\n      email: 'admin@test.com',\n      role: 'admin',\n      firstName: 'Admin',\n      lastName: 'User'\n    });\n    \n    user1 = await createTestUser({\n      email: 'user1@test.com',\n      role: 'resident',\n      firstName: 'User',\n      lastName: 'One'\n    });\n    \n    user2 = await createTestUser({\n      email: 'user2@test.com',\n      role: 'resident',\n      firstName: 'User',\n      lastName: 'Two'\n    });\n    \n    // Create authenticated agents\n    adminAgent = request.agent(app);\n    user1Agent = request.agent(app);\n    user2Agent = request.agent(app);\n    \n    // Mock sessions for each agent\n    await adminAgent\n      .post('/mock-login')\n      .send(adminUser);\n      \n    await user1Agent\n      .post('/mock-login')\n      .send(user1);\n      \n    await user2Agent\n      .post('/mock-login')\n      .send(user2);\n      \n    // Create test bugs\n    const bugs = [\n      {\n        title: 'Admin Bug 1',\n        description: 'Bug created by admin',\n        category: 'functionality' as const,\n        page: '/admin/dashboard',\n        priority: 'high' as const,\n        createdBy: adminUser.id,\n        reproductionSteps: 'Step 1, Step 2',\n      },\n      {\n        title: 'User1 Bug 1',\n        description: 'Bug created by user1',\n        category: 'ui_ux' as const,\n        page: '/dashboard',\n        priority: 'medium' as const,\n        createdBy: user1.id,\n        reproductionSteps: 'User1 steps',\n      },\n      {\n        title: 'User1 Bug 2',\n        description: 'Another bug by user1',\n        category: 'performance' as const,\n        page: '/documents',\n        priority: 'low' as const,\n        createdBy: user1.id,\n        reproductionSteps: 'Performance issue steps',\n      },\n      {\n        title: 'User2 Bug 1',\n        description: 'Bug created by user2',\n        category: 'security' as const,\n        page: '/settings',\n        priority: 'critical' as const,\n        createdBy: user2.id,\n        reproductionSteps: 'Security bug steps',\n      },\n    ];\n    \n    // Create bugs in storage\n    for (const bugData of bugs) {\n      const created = await mockStorage.createBug(bugData as InsertBug);\n      createdBugs.push(created);\n    }\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.resetModules();\n    createdBugs = [];\n  });\n\n  describe('Admin Access Control', () => {\n    it('should allow admin to see all bugs from all users', async () => {\n      const response = await adminAgent\n        .get('/api/bugs')\n        .expect(200);\n        \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body).toHaveLength(4); // All 4 bugs\n      \n      // Verify admin can see bugs from all users\n      const creatorIds = response.body.map((bug: Bug) => bug.createdBy);\n      expect(creatorIds).toContain(adminUser.id);\n      expect(creatorIds).toContain(user1.id);\n      expect(creatorIds).toContain(user2.id);\n    });\n\n    it('should allow admin to access any specific bug', async () => {\n      // Test accessing user1's bug\n      const user1Bug = createdBugs.find(bug => bug.createdBy === user1.id);\n      const response = await adminAgent\n        .get(`/api/bugs/${user1Bug!.id}`)\n        .expect(200);\n        \n      expect(response.body.id).toBe(user1Bug!.id);\n      expect(response.body.createdBy).toBe(user1.id);\n    });\n\n    it('should allow admin to update any bug', async () => {\n      const user2Bug = createdBugs.find(bug => bug.createdBy === user2.id);\n      const response = await adminAgent\n        .patch(`/api/bugs/${user2Bug!.id}`)\n        .send({\n          status: 'in_progress',\n          assignedTo: adminUser.id\n        })\n        .expect(200);\n        \n      expect(response.body.status).toBe('in_progress');\n      expect(response.body.assignedTo).toBe(adminUser.id);\n    });\n\n    it('should allow admin to delete any bug', async () => {\n      const adminBug = createdBugs.find(bug => bug.createdBy === adminUser.id);\n      await adminAgent\n        .delete(`/api/bugs/${adminBug!.id}`)\n        .expect(204);\n        \n      // Verify bug is deleted\n      await adminAgent\n        .get(`/api/bugs/${adminBug!.id}`)\n        .expect(404);\n    });\n  });\n\n  describe('Regular User Access Control', () => {\n    it('should only show user1 their own bugs', async () => {\n      const response = await user1Agent\n        .get('/api/bugs')\n        .expect(200);\n        \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body).toHaveLength(2); // Only user1's 2 bugs\n      \n      // Verify all returned bugs belong to user1\n      response.body.forEach((bug: Bug) => {\n        expect(bug.createdBy).toBe(user1.id);\n      });\n    });\n\n    it('should only show user2 their own bugs', async () => {\n      const response = await user2Agent\n        .get('/api/bugs')\n        .expect(200);\n        \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body).toHaveLength(1); // Only user2's 1 bug\n      \n      // Verify returned bug belongs to user2\n      expect(response.body[0].createdBy).toBe(user2.id);\n    });\n\n    it('should deny user1 access to user2 bugs', async () => {\n      const user2Bug = createdBugs.find(bug => bug.createdBy === user2.id);\n      await user1Agent\n        .get(`/api/bugs/${user2Bug!.id}`)\n        .expect(404); // Returns 404 for access denied\n    });\n\n    it('should deny user2 access to user1 bugs', async () => {\n      const user1Bug = createdBugs.find(bug => bug.createdBy === user1.id);\n      await user2Agent\n        .get(`/api/bugs/${user1Bug!.id}`)\n        .expect(404); // Returns 404 for access denied\n    });\n\n    it('should allow users to update their own bugs', async () => {\n      const user1Bug = createdBugs.find(bug => bug.createdBy === user1.id);\n      const response = await user1Agent\n        .patch(`/api/bugs/${user1Bug!.id}`)\n        .send({\n          priority: 'high',\n          reproductionSteps: 'Updated steps'\n        })\n        .expect(200);\n        \n      expect(response.body.priority).toBe('high');\n      expect(response.body.reproductionSteps).toBe('Updated steps');\n    });\n\n    it('should deny users access to update other users bugs', async () => {\n      const user2Bug = createdBugs.find(bug => bug.createdBy === user2.id);\n      await user1Agent\n        .patch(`/api/bugs/${user2Bug!.id}`)\n        .send({\n          priority: 'high'\n        })\n        .expect(404); // Access denied\n    });\n  });\n\n  describe('Server-Side Filtering Logic', () => {\n    it('should properly filter bugs based on user role in storage layer', async () => {\n      // Test the actual storage method directly\n      const adminBugs = await mockStorage.getBugsForUser(adminUser.id, 'admin');\n      const user1Bugs = await mockStorage.getBugsForUser(user1.id, 'resident');\n      const user2Bugs = await mockStorage.getBugsForUser(user2.id, 'resident');\n      \n      expect(adminBugs).toHaveLength(4); // Admin sees all\n      expect(user1Bugs).toHaveLength(2); // User1 sees only their own\n      expect(user2Bugs).toHaveLength(1); // User2 sees only their own\n      \n      // Verify content\n      user1Bugs.forEach(bug => expect(bug.createdBy).toBe(user1.id));\n      user2Bugs.forEach(bug => expect(bug.createdBy).toBe(user2.id));\n    });\n\n    it('should handle manager role appropriately', async () => {\n      const managerUser = await createTestUser({\n        email: 'manager@test.com',\n        role: 'manager',\n        firstName: 'Manager',\n        lastName: 'User',\n        organizationId: 'test-org'\n      });\n      \n      const managerBugs = await mockStorage.getBugsForUser(\n        managerUser.id, \n        'manager', \n        'test-org'\n      );\n      \n      // Managers can see all bugs (or organization-specific based on implementation)\n      expect(managerBugs.length).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe('Bug Creation Access Control', () => {\n    it('should allow any authenticated user to create bugs', async () => {\n      const newBug = {\n        title: 'New User Bug',\n        description: 'New bug description',\n        category: 'functionality',\n        page: '/new-page',\n        priority: 'medium',\n        reproductionSteps: 'Steps to reproduce'\n      };\n\n      const response = await user1Agent\n        .post('/api/bugs')\n        .send(newBug)\n        .expect(201);\n        \n      expect(response.body.title).toBe(newBug.title);\n      expect(response.body.createdBy).toBe(user1.id);\n      expect(response.body.status).toBe('new');\n    });\n\n    it('should deny unauthenticated users from creating bugs', async () => {\n      const newBug = {\n        title: 'Unauthorized Bug',\n        description: 'Should not be created',\n        category: 'functionality',\n        page: '/page',\n        priority: 'medium'\n      };\n\n      await request(app)\n        .post('/api/bugs')\n        .send(newBug)\n        .expect(401);\n    });\n  });\n\n  describe('Authentication Requirements', () => {\n    it('should require authentication for all bug endpoints', async () => {\n      const endpoints = [\n        { method: 'get', path: '/api/bugs' },\n        { method: 'post', path: '/api/bugs' },\n        { method: 'get', path: `/api/bugs/${createdBugs[0].id}` },\n        { method: 'patch', path: `/api/bugs/${createdBugs[0].id}` },\n        { method: 'delete', path: `/api/bugs/${createdBugs[0].id}` },\n      ];\n\n      for (const endpoint of endpoints) {\n        await request(app)\n          [endpoint.method](endpoint.path)\n          .expect(401);\n      }\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid bug IDs gracefully', async () => {\n      await adminAgent\n        .get('/api/bugs/invalid-id')\n        .expect(404);\n    });\n\n    it('should handle malformed bug data gracefully', async () => {\n      const response = await user1Agent\n        .post('/api/bugs')\n        .send({\n          // Missing required fields\n          title: '',\n          description: 'short' // Too short\n        })\n        .expect(400);\n        \n      expect(response.body.error).toBe('Validation failed');\n    });\n  });\n});"],"version":3}