{"file":"/home/runner/workspace/client/src/components/auth/registration-wizard.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/auth/registration-wizard.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, ArrowLeft, ArrowRight } from 'lucide-react';\nimport { useLanguage } from '@/hooks/use-language';\n\n/**\n * Represents a single step in the registration wizard process.\n * Contains metadata and validation state for each step.\n */\nexport interface WizardStep {\n  id: string;\n  title: string;\n  description: string;\n  component: React.ComponentType<WizardStepProps>;\n  isComplete: boolean;\n  isValid: boolean;\n  canSkip?: boolean;\n}\n\n/**\n * Props passed to each wizard step component.\n * Provides data handling and navigation callbacks.\n */\nexport interface WizardStepProps {\n  _data: Record<string, unknown>;\n  onDataChange: (_data: Record<string, unknown>) => void;\n  onValidationChange: (_isValid: boolean) => void;\n  onNext: () => void;\n  onPrevious: () => void;\n  isActive: boolean;\n}\n\n/**\n * Props for the main RegistrationWizard component.\n * Configures the wizard steps and completion handlers.\n */\ninterface RegistrationWizardProps {\n  steps: WizardStep[];\n  initialData?: Record<string, unknown>;\n  onComplete: (_data: Record<string, unknown>) => void;\n  onCancel: () => void;\n  title?: string;\n  className?: string;\n}\n\n/**\n * Multi-Step Registration Wizard Component.\n *\n * Provides a guided registration flow with step validation,\n * progress tracking, and Quebec compliance features.\n * @param root0 - Component props object.\n * @param root0.steps - Array of wizard steps to render.\n * @param root0.initialData - Initial data for the wizard.\n * @param root0.onComplete - Function called when wizard is completed.\n * @param root0.onCancel - Function called when wizard is cancelled.\n * @param root0.title - Optional title for the wizard.\n * @param root0.className - Optional CSS class name.\n * @returns JSX element for the registration wizard.\n */\nexport function RegistrationWizard({\n  steps: initialSteps,\n  initialData = {},\n  onComplete,\n  onCancel,\n  title = 'Inscription',\n  className = '',\n}: RegistrationWizardProps) {\n  const { t: _t } = useLanguage();\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [steps, setSteps] = useState<WizardStep[]>(initialSteps);\n  const [wizardData, setWizardData] = useState(initialData);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const currentStep = steps[currentStepIndex];\n  const isFirstStep = currentStepIndex === 0;\n  const isLastStep = currentStepIndex === steps.length - 1;\n  const completedSteps = steps.filter((step) => step.isComplete).length;\n  const progress = (completedSteps / steps.length) * 100;\n\n  // Update step validation status\n  const updateStepValidation = (stepId: string, isValid: boolean) => {\n    setSteps((prevSteps) =>\n      prevSteps.map((step) => (step.id === stepId ? { ...step, isValid } : step))\n    );\n  };\n\n  // Update step completion status\n  const updateStepCompletion = (stepId: string, isComplete: boolean) => {\n    setSteps((prevSteps) =>\n      prevSteps.map((step) => (step.id === stepId ? { ...step, isComplete } : step))\n    );\n  };\n\n  // Handle data changes from step components - memoized to prevent infinite loops\n  const handleDataChange = useCallback((stepData: Record<string, unknown>) => {\n    setWizardData((prevData: Record<string, unknown>) => ({\n      ...prevData,\n      [currentStep.id]: stepData,\n    }));\n  }, [currentStep.id]);\n\n  // Handle validation changes from step components - memoized to prevent infinite loops\n  const handleValidationChange = useCallback((isValid: boolean) => {\n    setSteps((prevSteps) =>\n      prevSteps.map((step) => (step.id === currentStep.id ? { ...step, isValid } : step))\n    );\n    // Auto-complete step if valid and has required data\n    if (isValid) {\n      setSteps((prevSteps) =>\n        prevSteps.map((step) => (step.id === currentStep.id ? { ...step, isComplete: true } : step))\n      );\n    }\n  }, [currentStep.id]);\n\n  // Navigate to next step\n  const handleNext = () => {\n    if (currentStep.isValid && !isLastStep) {\n      updateStepCompletion(currentStep.id, true);\n      setCurrentStepIndex((prev) => prev + 1);\n    } else if (isLastStep && currentStep.isValid) {\n      handleComplete();\n    }\n  };\n\n  // Navigate to previous step\n  const handlePrevious = () => {\n    if (!isFirstStep) {\n      setCurrentStepIndex((prev) => prev - 1);\n    }\n  };\n\n  // Complete the wizard\n  const handleComplete = async () => {\n    setIsSubmitting(true);\n    try {\n      // Combine all wizard data\n      const completeData = {\n        ...wizardData,\n        [currentStep.id]: wizardData[currentStep.id] || {},\n      };\n\n      await onComplete(completeData);\n\n      // Only mark final step as complete after successful submission\n      updateStepCompletion(currentStep.id, true);\n    } catch (error) {\n      console.error('Wizard completion error:', error);\n      // Reset step completion on error to allow retry\n      updateStepCompletion(currentStep.id, false);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Jump to specific step (only if previous steps are complete)\n  const jumpToStep = (stepIndex: number) => {\n    // Can only go to completed steps or the next uncompleted step\n    const canJump =\n      stepIndex <= currentStepIndex || steps.slice(0, stepIndex).every((step) => step.isComplete);\n\n    if (canJump) {\n      setCurrentStepIndex(stepIndex);\n    }\n  };\n\n  return (\n    <div className={`max-w-4xl mx-auto p-6 ${className}`}>\n      <Card className='shadow-xl border-0'>\n        <CardHeader className='text-center pb-6'>\n          <CardTitle className='text-2xl font-bold text-gray-900'>{title}</CardTitle>\n          <div className='mt-4'>\n            <Progress value={progress} className='h-2' />\n            <p className='text-sm text-gray-600 mt-2'>\n              Étape {currentStepIndex + 1} sur {steps.length} • {Math.round(progress)}% terminé\n            </p>\n          </div>\n        </CardHeader>\n\n        <CardContent className='space-y-6'>\n          {/* Step Navigation */}\n          <div className='flex justify-center'>\n            <div className='flex items-center space-x-2 md:space-x-4 overflow-x-auto pb-2'>\n              {steps.map((step, _index) => (\n                <div key={step.id} className='flex items-center'>\n                  <button\n                    onClick={() => jumpToStep(_index)}\n                    disabled={\n                      _index > currentStepIndex &&\n                      !steps.slice(0, _index).every((s) => s.isComplete)\n                    }\n                    className={`\n                      flex items-center justify-center w-8 h-8 rounded-full border-2 transition-all\n                      ${\n                        _index === currentStepIndex\n                          ? 'border-primary bg-primary text-white'\n                          : step.isComplete\n                            ? 'border-green-500 bg-green-500 text-white cursor-pointer hover:bg-green-600'\n                            : 'border-gray-300 bg-white text-gray-400'\n                      }\n                      ${_index <= currentStepIndex || step.isComplete ? 'cursor-pointer' : 'cursor-not-allowed'}\n                    `}\n                    aria-label={`${step.title} - ${step.isComplete ? 'Terminé' : _index === currentStepIndex ? 'En cours' : 'En attente'}`}\n                  >\n                    {step.isComplete ? (\n                      <CheckCircle className='w-5 h-5' />\n                    ) : (\n                      <span className='text-sm font-medium'>{_index + 1}</span>\n                    )}\n                  </button>\n\n                  {_index < steps.length - 1 && (\n                    <div\n                      className={`w-8 md:w-16 h-0.5 ${\n                        steps[_index + 1].isComplete || _index < currentStepIndex\n                          ? 'bg-green-500'\n                          : 'bg-gray-300'\n                      }`}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Current Step Content */}\n          <div className='min-h-[400px]'>\n            <div className='text-center mb-6'>\n              <h3 className='text-xl font-semibold text-gray-900 mb-2'>{currentStep.title}</h3>\n              <p className='text-gray-600'>{currentStep.description}</p>\n              {currentStep.isValid && (\n                <Badge variant='secondary' className='mt-2 bg-green-100 text-green-800'>\n                  <CheckCircle className='w-4 h-4 mr-1' />\n                  Validé\n                </Badge>\n              )}\n            </div>\n\n            {/* Render current step component */}\n            <currentStep.component\n              _data={(wizardData[currentStep.id] as Record<string, unknown>) || {}}\n              onDataChange={handleDataChange}\n              onValidationChange={handleValidationChange}\n              onNext={handleNext}\n              onPrevious={handlePrevious}\n              isActive={true}\n            />\n          </div>\n\n          {/* Navigation Buttons */}\n          <div className='flex items-center justify-between pt-6 border-t border-gray-200'>\n            <div className='flex space-x-3'>\n              {!isFirstStep && (\n                <Button onClick={handlePrevious} variant='outline' className='flex items-center'>\n                  <ArrowLeft className='w-4 h-4 mr-2' />\n                  Précédent\n                </Button>\n              )}\n\n              <Button onClick={onCancel} variant='ghost' className='text-gray-600'>\n                Annuler\n              </Button>\n            </div>\n\n            <Button\n              onClick={handleNext}\n              disabled={!currentStep.isValid || isSubmitting}\n              className='flex items-center min-w-[120px]'\n            >\n              {isSubmitting ? (\n                <>\n                  <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2' />\n                  Traitement...\n                </>\n              ) : isLastStep ? (\n                'Terminer'\n              ) : (\n                <>\n                  Suivant\n                  <ArrowRight className='w-4 h-4 ml-2' />\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"version":3}