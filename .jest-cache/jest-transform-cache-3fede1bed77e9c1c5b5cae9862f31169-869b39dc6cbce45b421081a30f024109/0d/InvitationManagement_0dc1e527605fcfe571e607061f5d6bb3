bc871bfa6d62bc06bd94ec049feb28e0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvitationManagement = InvitationManagement;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const button_1 = require("@/components/ui/button");
const table_1 = require("@/components/ui/table");
const alert_dialog_1 = require("@/components/ui/alert-dialog");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const no_data_card_1 = require("@/components/ui/no-data-card");
const use_language_1 = require("@/hooks/use-language");
const lucide_react_1 = require("lucide-react");
function InvitationManagement() {
    const { toast } = (0, use_toast_1.useToast)();
    const { t } = (0, use_language_1.useLanguage)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [deletingInvitation, setDeletingInvitation] = (0, react_1.useState)(null);
    // Fetch pending invitations with role-based filtering
    const { data: invitations = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/invitations/pending'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/invitations/pending');
            return response.json();
        },
    });
    // Delete invitation mutation
    const deleteInvitationMutation = (0, react_query_1.useMutation)({
        mutationFn: async (invitationId) => {
            const response = await (0, queryClient_1.apiRequest)('DELETE', `/api/invitations/${invitationId}`);
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: t('invitationDeletedSuccess'),
            });
            setDeletingInvitation(null);
            queryClient.invalidateQueries({ queryKey: ['/api/invitations/pending'] });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: t('invitationDeletedError'),
                variant: 'destructive',
            });
        },
    });
    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('en-CA', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        });
    };
    const isExpired = (expiresAt) => {
        return new Date(expiresAt) < new Date();
    };
    const getRoleColor = (role) => {
        switch (role) {
            case 'admin':
                return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
            case 'manager':
                return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
            case 'tenant':
                return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
            case 'resident':
                return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';
            default:
                return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';
        }
    };
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: t('pendingInvitations') }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: t('loadingInvitations') })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-center py-8", children: (0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-primary" }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: "h-5 w-5" }), t('pendingInvitations')] }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { children: t('managePendingInvitations') })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: invitations.length === 0 ? ((0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Mail, titleKey: "noInvitationsFound", descriptionKey: "noInvitationsFound", testId: "no-invitations-message", iconSize: 12 })) : ((0, jsx_runtime_1.jsx)("div", { className: "overflow-x-auto", children: (0, jsx_runtime_1.jsxs)(table_1.Table, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHeader, { children: (0, jsx_runtime_1.jsxs)(table_1.TableRow, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHead, { children: t('email') }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: t('role') }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: t('organization') }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: t('building') }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: t('residence') }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: t('expires') }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { children: t('status') }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: "text-right", children: t('actions') })] }) }), (0, jsx_runtime_1.jsx)(table_1.TableBody, { children: invitations.map((invitation) => ((0, jsx_runtime_1.jsxs)(table_1.TableRow, { "data-testid": `invitation-row-${invitation.id}`, children: [(0, jsx_runtime_1.jsx)(table_1.TableCell, { className: "font-medium", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Mail, { className: "h-4 w-4 text-gray-400" }), invitation.email] }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: getRoleColor(invitation.role), children: invitation.role }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: invitation.organizationName ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building2, { className: "h-4 w-4 text-gray-400" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: invitation.organizationName })] })) : ((0, jsx_runtime_1.jsx)("span", { className: "text-gray-400 text-sm", children: "\u2014" })) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: invitation.buildingName ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building2, { className: "h-4 w-4 text-gray-400" }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm", children: invitation.buildingName })] })) : ((0, jsx_runtime_1.jsx)("span", { className: "text-gray-400 text-sm", children: "\u2014" })) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: invitation.residenceUnitNumber ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: "h-4 w-4 text-gray-400" }), (0, jsx_runtime_1.jsxs)("span", { className: "text-sm", children: [t('unit'), " ", invitation.residenceUnitNumber] })] })) : ((0, jsx_runtime_1.jsx)("span", { className: "text-gray-400 text-sm", children: "\u2014" })) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: "h-4 w-4 text-gray-400" }), (0, jsx_runtime_1.jsx)("span", { className: `text-sm ${isExpired(invitation.expiresAt) ? 'text-red-600' : ''}`, children: formatDate(invitation.expiresAt) })] }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { children: (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: isExpired(invitation.expiresAt) ? 'destructive' : 'default', children: isExpired(invitation.expiresAt) ? t('expired') : t('pending') }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: "text-right", children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "outline", size: "sm", onClick: () => setDeletingInvitation(invitation), "data-testid": `button-delete-invitation-${invitation.id}`, className: "text-red-600 hover:text-red-700 hover:bg-red-50", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: "h-4 w-4" }) }) })] }, invitation.id))) })] }) })) })] }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialog, { open: !!deletingInvitation, onOpenChange: (open) => !open && setDeletingInvitation(null), children: (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogContent, { children: [(0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogHeader, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogTitle, { children: t('deleteInvitation') }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogDescription, { children: t('deleteInvitationConfirm').replace('{email}', deletingInvitation?.email || '') })] }), (0, jsx_runtime_1.jsxs)(alert_dialog_1.AlertDialogFooter, { children: [(0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogCancel, { disabled: deleteInvitationMutation.isPending, "data-testid": "button-cancel-delete-invitation", children: t('cancel') }), (0, jsx_runtime_1.jsx)(alert_dialog_1.AlertDialogAction, { onClick: () => {
                                        if (deletingInvitation) {
                                            deleteInvitationMutation.mutate(deletingInvitation.id);
                                        }
                                    }, disabled: deleteInvitationMutation.isPending, "data-testid": "button-confirm-delete-invitation", className: "bg-red-600 hover:bg-red-700", children: deleteInvitationMutation.isPending ? 'Deleting...' : 'Delete' })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,