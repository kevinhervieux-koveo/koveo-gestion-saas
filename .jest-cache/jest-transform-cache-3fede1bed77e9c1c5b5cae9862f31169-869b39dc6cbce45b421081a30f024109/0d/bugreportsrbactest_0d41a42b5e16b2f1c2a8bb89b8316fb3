bc434deff971ee2e5c32f13a971be624
"use strict";
/**
 * Integration Tests for Bug Reports Role-Based Access Control
 *
 * Tests cover the fix for redundant client-side filtering that prevented
 * admins from seeing all bugs. Now properly tests:
 * - Admin users can see all bug reports
 * - Regular users can only see their own bug reports
 * - Server-side access control works correctly
 * - Client-side filtering only applies to search/status/priority
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const express_session_1 = __importDefault(require("express-session"));
const bugs_1 = require("../../server/api/bugs");
const storage_1 = require("../../server/storage");
const test_utils_1 = require("../utils/test-utils");
// Mock storage
let mockStorage;
// Create test Express app
const createTestApp = () => {
    const app = (0, express_1.default)();
    // Setup middleware
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Session middleware for authentication
    app.use((0, express_session_1.default)({
        secret: 'test-secret',
        resave: false,
        saveUninitialized: false,
        cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 },
    }));
    // Mock auth middleware
    app.use((req, res, next) => {
        if (req.session?.user) {
            req.user = req.session.user;
        }
        next();
    });
    // Register bug routes
    (0, bugs_1.registerBugRoutes)(app);
    return app;
};
(0, globals_1.describe)('Bug Reports Role-Based Access Control', () => {
    let app;
    let adminUser;
    let user1;
    let user2;
    let adminAgent;
    let user1Agent;
    let user2Agent;
    let createdBugs = [];
    (0, globals_1.beforeEach)(async () => {
        // Initialize mock storage
        mockStorage = new storage_1.MemStorage();
        // Mock the storage module
        globals_1.jest.doMock('../../server/storage', () => ({
            storage: mockStorage
        }));
        app = createTestApp();
        // Create test users
        adminUser = await (0, test_utils_1.createTestUser)({
            email: 'admin@test.com',
            role: 'admin',
            firstName: 'Admin',
            lastName: 'User'
        });
        user1 = await (0, test_utils_1.createTestUser)({
            email: 'user1@test.com',
            role: 'resident',
            firstName: 'User',
            lastName: 'One'
        });
        user2 = await (0, test_utils_1.createTestUser)({
            email: 'user2@test.com',
            role: 'resident',
            firstName: 'User',
            lastName: 'Two'
        });
        // Create authenticated agents
        adminAgent = supertest_1.default.agent(app);
        user1Agent = supertest_1.default.agent(app);
        user2Agent = supertest_1.default.agent(app);
        // Mock sessions for each agent
        await adminAgent
            .post('/mock-login')
            .send(adminUser);
        await user1Agent
            .post('/mock-login')
            .send(user1);
        await user2Agent
            .post('/mock-login')
            .send(user2);
        // Create test bugs
        const bugs = [
            {
                title: 'Admin Bug 1',
                description: 'Bug created by admin',
                category: 'functionality',
                page: '/admin/dashboard',
                priority: 'high',
                createdBy: adminUser.id,
                reproductionSteps: 'Step 1, Step 2',
            },
            {
                title: 'User1 Bug 1',
                description: 'Bug created by user1',
                category: 'ui_ux',
                page: '/dashboard',
                priority: 'medium',
                createdBy: user1.id,
                reproductionSteps: 'User1 steps',
            },
            {
                title: 'User1 Bug 2',
                description: 'Another bug by user1',
                category: 'performance',
                page: '/documents',
                priority: 'low',
                createdBy: user1.id,
                reproductionSteps: 'Performance issue steps',
            },
            {
                title: 'User2 Bug 1',
                description: 'Bug created by user2',
                category: 'security',
                page: '/settings',
                priority: 'critical',
                createdBy: user2.id,
                reproductionSteps: 'Security bug steps',
            },
        ];
        // Create bugs in storage
        for (const bugData of bugs) {
            const created = await mockStorage.createBug(bugData);
            createdBugs.push(created);
        }
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
        globals_1.jest.resetModules();
        createdBugs = [];
    });
    (0, globals_1.describe)('Admin Access Control', () => {
        (0, globals_1.it)('should allow admin to see all bugs from all users', async () => {
            const response = await adminAgent
                .get('/api/bugs')
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body).toHaveLength(4); // All 4 bugs
            // Verify admin can see bugs from all users
            const creatorIds = response.body.map((bug) => bug.createdBy);
            (0, globals_1.expect)(creatorIds).toContain(adminUser.id);
            (0, globals_1.expect)(creatorIds).toContain(user1.id);
            (0, globals_1.expect)(creatorIds).toContain(user2.id);
        });
        (0, globals_1.it)('should allow admin to access any specific bug', async () => {
            // Test accessing user1's bug
            const user1Bug = createdBugs.find(bug => bug.createdBy === user1.id);
            const response = await adminAgent
                .get(`/api/bugs/${user1Bug.id}`)
                .expect(200);
            (0, globals_1.expect)(response.body.id).toBe(user1Bug.id);
            (0, globals_1.expect)(response.body.createdBy).toBe(user1.id);
        });
        (0, globals_1.it)('should allow admin to update any bug', async () => {
            const user2Bug = createdBugs.find(bug => bug.createdBy === user2.id);
            const response = await adminAgent
                .patch(`/api/bugs/${user2Bug.id}`)
                .send({
                status: 'in_progress',
                assignedTo: adminUser.id
            })
                .expect(200);
            (0, globals_1.expect)(response.body.status).toBe('in_progress');
            (0, globals_1.expect)(response.body.assignedTo).toBe(adminUser.id);
        });
        (0, globals_1.it)('should allow admin to delete any bug', async () => {
            const adminBug = createdBugs.find(bug => bug.createdBy === adminUser.id);
            await adminAgent
                .delete(`/api/bugs/${adminBug.id}`)
                .expect(204);
            // Verify bug is deleted
            await adminAgent
                .get(`/api/bugs/${adminBug.id}`)
                .expect(404);
        });
    });
    (0, globals_1.describe)('Regular User Access Control', () => {
        (0, globals_1.it)('should only show user1 their own bugs', async () => {
            const response = await user1Agent
                .get('/api/bugs')
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body).toHaveLength(2); // Only user1's 2 bugs
            // Verify all returned bugs belong to user1
            response.body.forEach((bug) => {
                (0, globals_1.expect)(bug.createdBy).toBe(user1.id);
            });
        });
        (0, globals_1.it)('should only show user2 their own bugs', async () => {
            const response = await user2Agent
                .get('/api/bugs')
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
            (0, globals_1.expect)(response.body).toHaveLength(1); // Only user2's 1 bug
            // Verify returned bug belongs to user2
            (0, globals_1.expect)(response.body[0].createdBy).toBe(user2.id);
        });
        (0, globals_1.it)('should deny user1 access to user2 bugs', async () => {
            const user2Bug = createdBugs.find(bug => bug.createdBy === user2.id);
            await user1Agent
                .get(`/api/bugs/${user2Bug.id}`)
                .expect(404); // Returns 404 for access denied
        });
        (0, globals_1.it)('should deny user2 access to user1 bugs', async () => {
            const user1Bug = createdBugs.find(bug => bug.createdBy === user1.id);
            await user2Agent
                .get(`/api/bugs/${user1Bug.id}`)
                .expect(404); // Returns 404 for access denied
        });
        (0, globals_1.it)('should allow users to update their own bugs', async () => {
            const user1Bug = createdBugs.find(bug => bug.createdBy === user1.id);
            const response = await user1Agent
                .patch(`/api/bugs/${user1Bug.id}`)
                .send({
                priority: 'high',
                reproductionSteps: 'Updated steps'
            })
                .expect(200);
            (0, globals_1.expect)(response.body.priority).toBe('high');
            (0, globals_1.expect)(response.body.reproductionSteps).toBe('Updated steps');
        });
        (0, globals_1.it)('should deny users access to update other users bugs', async () => {
            const user2Bug = createdBugs.find(bug => bug.createdBy === user2.id);
            await user1Agent
                .patch(`/api/bugs/${user2Bug.id}`)
                .send({
                priority: 'high'
            })
                .expect(404); // Access denied
        });
    });
    (0, globals_1.describe)('Server-Side Filtering Logic', () => {
        (0, globals_1.it)('should properly filter bugs based on user role in storage layer', async () => {
            // Test the actual storage method directly
            const adminBugs = await mockStorage.getBugsForUser(adminUser.id, 'admin');
            const user1Bugs = await mockStorage.getBugsForUser(user1.id, 'resident');
            const user2Bugs = await mockStorage.getBugsForUser(user2.id, 'resident');
            (0, globals_1.expect)(adminBugs).toHaveLength(4); // Admin sees all
            (0, globals_1.expect)(user1Bugs).toHaveLength(2); // User1 sees only their own
            (0, globals_1.expect)(user2Bugs).toHaveLength(1); // User2 sees only their own
            // Verify content
            user1Bugs.forEach(bug => (0, globals_1.expect)(bug.createdBy).toBe(user1.id));
            user2Bugs.forEach(bug => (0, globals_1.expect)(bug.createdBy).toBe(user2.id));
        });
        (0, globals_1.it)('should handle manager role appropriately', async () => {
            const managerUser = await (0, test_utils_1.createTestUser)({
                email: 'manager@test.com',
                role: 'manager',
                firstName: 'Manager',
                lastName: 'User',
                organizationId: 'test-org'
            });
            const managerBugs = await mockStorage.getBugsForUser(managerUser.id, 'manager', 'test-org');
            // Managers can see all bugs (or organization-specific based on implementation)
            (0, globals_1.expect)(managerBugs.length).toBeGreaterThanOrEqual(0);
        });
    });
    (0, globals_1.describe)('Bug Creation Access Control', () => {
        (0, globals_1.it)('should allow any authenticated user to create bugs', async () => {
            const newBug = {
                title: 'New User Bug',
                description: 'New bug description',
                category: 'functionality',
                page: '/new-page',
                priority: 'medium',
                reproductionSteps: 'Steps to reproduce'
            };
            const response = await user1Agent
                .post('/api/bugs')
                .send(newBug)
                .expect(201);
            (0, globals_1.expect)(response.body.title).toBe(newBug.title);
            (0, globals_1.expect)(response.body.createdBy).toBe(user1.id);
            (0, globals_1.expect)(response.body.status).toBe('new');
        });
        (0, globals_1.it)('should deny unauthenticated users from creating bugs', async () => {
            const newBug = {
                title: 'Unauthorized Bug',
                description: 'Should not be created',
                category: 'functionality',
                page: '/page',
                priority: 'medium'
            };
            await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .send(newBug)
                .expect(401);
        });
    });
    (0, globals_1.describe)('Authentication Requirements', () => {
        (0, globals_1.it)('should require authentication for all bug endpoints', async () => {
            const endpoints = [
                { method: 'get', path: '/api/bugs' },
                { method: 'post', path: '/api/bugs' },
                { method: 'get', path: `/api/bugs/${createdBugs[0].id}` },
                { method: 'patch', path: `/api/bugs/${createdBugs[0].id}` },
                { method: 'delete', path: `/api/bugs/${createdBugs[0].id}` },
            ];
            for (const endpoint of endpoints) {
                await (0, supertest_1.default)(app)[endpoint.method](endpoint.path)
                    .expect(401);
            }
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle invalid bug IDs gracefully', async () => {
            await adminAgent
                .get('/api/bugs/invalid-id')
                .expect(404);
        });
        (0, globals_1.it)('should handle malformed bug data gracefully', async () => {
            const response = await user1Agent
                .post('/api/bugs')
                .send({
                // Missing required fields
                title: '',
                description: 'short' // Too short
            })
                .expect(400);
            (0, globals_1.expect)(response.body.error).toBe('Validation failed');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,