9e5447ccde808e34fda0a07d8e82a3e8
"use strict";
/**
 * @file Demands Schema Validation Tests.
 * @description Tests for demand and comment schema validation using Zod schemas.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const operations_test_1 = require("../../../shared/schemas/operations-test");
(0, globals_1.describe)('Demands Schema Validation Tests', () => {
    (0, globals_1.describe)('insertDemandSchema', () => {
        (0, globals_1.it)('should validate a valid demand object', () => {
            const validDemand = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: 'Faucet is leaking in the kitchen sink',
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
                assignationResidenceId: '223e4567-e89b-12d3-a456-426614174001',
                assignationBuildingId: '323e4567-e89b-12d3-a456-426614174002',
                status: 'submitted',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(validDemand)).not.toThrow();
        });
        (0, globals_1.it)('should validate demand with optional buildingId and residenceId', () => {
            const validDemandWithOptionalFields = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: 'Faucet is leaking in the kitchen sink',
                status: 'submitted',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(validDemandWithOptionalFields)).not.toThrow();
        });
        (0, globals_1.it)('should validate demand with only buildingId provided', () => {
            const validDemandWithBuildingOnly = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: 'Faucet is leaking in the kitchen sink',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
                status: 'submitted',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(validDemandWithBuildingOnly)).not.toThrow();
        });
        (0, globals_1.it)('should validate demand with only residenceId provided', () => {
            const validDemandWithResidenceOnly = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: 'Faucet is leaking in the kitchen sink',
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                status: 'submitted',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(validDemandWithResidenceOnly)).not.toThrow();
        });
        (0, globals_1.it)('should require submitterId', () => {
            const invalidDemand = {
                type: 'maintenance',
                description: 'Test description',
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(invalidDemand)).toThrow();
        });
        (0, globals_1.it)('should require only submitterId, type, and description as minimum fields', () => {
            const minimalValidDemand = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: 'Minimal test description',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(minimalValidDemand)).not.toThrow();
        });
        (0, globals_1.it)('should validate demand type enum', () => {
            const validTypes = ['maintenance', 'complaint', 'information', 'other'];
            validTypes.forEach((type) => {
                const demand = {
                    submitterId: '123e4567-e89b-12d3-a456-426614174000',
                    type,
                    description: 'Test description',
                    residenceId: '223e4567-e89b-12d3-a456-426614174001',
                    buildingId: '323e4567-e89b-12d3-a456-426614174002',
                };
                (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demand)).not.toThrow();
            });
        });
        (0, globals_1.it)('should reject invalid demand type', () => {
            const invalidDemand = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'invalid_type',
                description: 'Test description',
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(invalidDemand)).toThrow();
        });
        (0, globals_1.it)('should require description', () => {
            const invalidDemand = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(invalidDemand)).toThrow();
        });
        (0, globals_1.it)('should validate description length', () => {
            const shortDescription = 'This is a reasonable description for testing purposes';
            const longDescription = 'This is a longer description that provides more detail about the maintenance request and should still be within acceptable limits for the demand system';
            const demandWithShortDesc = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: shortDescription,
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
            };
            const demandWithLongDesc = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: longDescription,
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
            };
            // Both should pass with reasonable lengths
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demandWithShortDesc)).not.toThrow();
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demandWithLongDesc)).not.toThrow();
        });
        (0, globals_1.it)('should accept optional fields', () => {
            const demandWithOptionals = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: 'Test description with optional fields',
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
                assignationResidenceId: '223e4567-e89b-12d3-a456-426614174001',
                assignationBuildingId: '323e4567-e89b-12d3-a456-426614174002',
                reviewNotes: 'Initial review notes',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demandWithOptionals)).not.toThrow();
        });
    });
    (0, globals_1.describe)('insertDemandCommentSchema', () => {
        (0, globals_1.it)('should validate a valid comment object', () => {
            const validComment = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commenterId: '123e4567-e89b-12d3-a456-426614174000',
                commentText: 'This is a valid comment about the demand',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
        });
        (0, globals_1.it)('should require demandId', () => {
            const invalidComment = {
                orderIndex: 1.0,
                comment: 'Missing demand ID',
                createdBy: '123e4567-e89b-12d3-a456-426614174000',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should require commenterId', () => {
            const invalidComment = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commentText: 'Missing commenter ID',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should require commentText', () => {
            const invalidComment = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commenterId: '123e4567-e89b-12d3-a456-426614174000',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
        (0, globals_1.it)('should validate content length', () => {
            const shortContent = 'This is a reasonable comment.';
            const longContent = 'This is a longer comment that provides more detail about the demand and includes additional context that would be helpful for understanding the issue.';
            const commentWithShortContent = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commenterId: '123e4567-e89b-12d3-a456-426614174000',
                commentText: shortContent,
            };
            const commentWithLongContent = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commenterId: '123e4567-e89b-12d3-a456-426614174000',
                commentText: longContent,
            };
            // Both should pass with reasonable lengths
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(commentWithShortContent)).not.toThrow();
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(commentWithLongContent)).not.toThrow();
        });
        (0, globals_1.it)('should accept valid comment data', () => {
            const comment = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commenterId: '123e4567-e89b-12d3-a456-426614174000',
                commentText: 'Valid comment data',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(comment)).not.toThrow();
        });
        (0, globals_1.it)('should validate comment structure', () => {
            const validComment = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commenterId: '123e4567-e89b-12d3-a456-426614174000',
                commentText: 'Comment with proper structure',
            };
            const invalidComment = {
                demandId: '423e4567-e89b-12d3-a456-426614174003',
                commentText: 'Comment without commenter ID',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(validComment)).not.toThrow();
            (0, globals_1.expect)(() => operations_test_1.insertDemandCommentSchema.parse(invalidComment)).toThrow();
        });
    });
    (0, globals_1.describe)('Enum Validation', () => {
        (0, globals_1.it)('should validate demand types', () => {
            const validTypes = ['maintenance', 'complaint', 'information', 'other'];
            const invalidTypes = ['invalid', 'repair', 'request', ''];
            validTypes.forEach((type) => {
                (0, globals_1.expect)(operations_test_1.demandTypeEnum.enumValues).toContain(type);
            });
            invalidTypes.forEach((type) => {
                (0, globals_1.expect)(operations_test_1.demandTypeEnum.enumValues).not.toContain(type);
            });
        });
        (0, globals_1.it)('should validate demand statuses', () => {
            const validStatuses = [
                'draft',
                'submitted',
                'under_review',
                'approved',
                'in_progress',
                'completed',
                'rejected',
                'cancelled',
            ];
            const invalidStatuses = ['pending', 'open', 'closed', 'resolved'];
            validStatuses.forEach((status) => {
                (0, globals_1.expect)(operations_test_1.demandStatusEnum.enumValues).toContain(status);
            });
            invalidStatuses.forEach((status) => {
                (0, globals_1.expect)(operations_test_1.demandStatusEnum.enumValues).not.toContain(status);
            });
        });
    });
    (0, globals_1.describe)('Edge Cases', () => {
        (0, globals_1.it)('should handle UUID validation for IDs', () => {
            const validUUID = '123e4567-e89b-12d3-a456-426614174000';
            const invalidUUIDs = ['invalid', '123', '', null, undefined];
            const validDemand = {
                submitterId: validUUID,
                type: 'maintenance',
                description: 'Test with valid UUID',
                residenceId: validUUID,
                buildingId: validUUID,
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(validDemand)).not.toThrow();
            invalidUUIDs.forEach((invalidId) => {
                const invalidDemand = {
                    submitterId: invalidId,
                    type: 'maintenance',
                    description: 'Test with invalid UUID',
                    residenceId: validUUID,
                    buildingId: validUUID,
                };
                (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(invalidDemand)).toThrow();
            });
        });
        (0, globals_1.it)('should handle special characters in descriptions', () => {
            const descriptionsWithSpecialChars = [
                'Description with émojis 🏠 and açcénts',
                'Description with "quotes" and apostrophe\'s',
                'Description with <tags> and &symbols;',
                'Multi-line\ndescription\nwith breaks',
                'Description with numbers 123 and symbols !@#$%^&*()',
            ];
            descriptionsWithSpecialChars.forEach((description) => {
                const demand = {
                    submitterId: '123e4567-e89b-12d3-a456-426614174000',
                    type: 'maintenance',
                    description,
                    residenceId: '223e4567-e89b-12d3-a456-426614174001',
                    buildingId: '323e4567-e89b-12d3-a456-426614174002',
                };
                (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demand)).not.toThrow();
            });
        });
        (0, globals_1.it)('should handle boundary values for string lengths', () => {
            const minValidDescription = 'a'.repeat(10); // Minimum valid length
            const maxValidDescription = 'a'.repeat(2000); // Maximum valid length
            const belowMin = 'a'.repeat(9);
            const aboveMax = 'a'.repeat(2001);
            const demandMinValid = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: minValidDescription,
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
            };
            const demandMaxValid = {
                submitterId: '123e4567-e89b-12d3-a456-426614174000',
                type: 'maintenance',
                description: maxValidDescription,
                residenceId: '223e4567-e89b-12d3-a456-426614174001',
                buildingId: '323e4567-e89b-12d3-a456-426614174002',
            };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demandMinValid)).not.toThrow();
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demandMaxValid)).not.toThrow();
            const demandBelowMin = { ...demandMinValid, description: belowMin };
            const demandAboveMax = { ...demandMaxValid, description: aboveMax };
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demandBelowMin)).toThrow();
            (0, globals_1.expect)(() => operations_test_1.insertDemandSchema.parse(demandAboveMax)).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,