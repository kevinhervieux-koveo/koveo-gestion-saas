{"file":"/home/runner/workspace/tests/integration/document-upload-download-ai.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/document-upload-download-ai.test.ts"],"sourcesContent":["/**\n * Document Upload, Download, and AI Analysis Integration Tests\n * \n * Comprehensive testing suite for the standardized document management system\n * with AI analysis functionality. Tests validate:\n * \n * 1. Document Upload Operations\n *    - File upload with new filePath, fileName, fileSize structure\n *    - Multipart form handling\n *    - File validation and security checks\n *    - Database record creation with correct column names\n * \n * 2. Document Download Operations\n *    - Secure file serving\n *    - Access control validation\n *    - Proper headers and content disposition\n * \n * 3. AI Analysis Integration\n *    - Gemini AI document analysis\n *    - AI results storage in database\n *    - Analysis metadata handling\n *    - Error handling for AI failures\n * \n * 4. Cross-Form Document Handling\n *    - Bills document upload/download\n *    - Demands file attachments\n *    - Bug report file attachments\n *    - Feature request attachments\n *    - Document management uploads\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport fs from 'fs';\nimport path from 'path';\nimport { db } from '../../server/db';\nimport { bills, demands, bugs, featureRequests, documents } from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Mock authentication middleware\nconst mockAuth = {\n  user: {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    email: 'test@koveo.com',\n    role: 'admin',\n    organizationId: '123e4567-e89b-12d3-a456-426614174001'\n  }\n};\n\njest.mock('../../server/auth', () => ({\n  requireAuth: (req: any, res: any, next: any) => {\n    req.user = mockAuth.user;\n    next();\n  }\n}));\n\n// Mock Gemini AI service\nconst mockGeminiAnalysis = {\n  isAiAnalyzed: true,\n  aiAnalysisData: {\n    extractedText: 'Sample document text content',\n    keyFindings: ['Important finding 1', 'Important finding 2'],\n    documentType: 'invoice',\n    confidence: 0.95,\n    analysisTimestamp: new Date().toISOString()\n  }\n};\n\njest.mock('../../server/services/geminiService', () => ({\n  geminiService: {\n    analyzeDocument: jest.fn().mockResolvedValue(mockGeminiAnalysis)\n  }\n}));\n\njest.mock('../../server/services/gemini-bill-analyzer', () => ({\n  geminiBillAnalyzer: {\n    analyzeBillDocument: jest.fn().mockResolvedValue(mockGeminiAnalysis.aiAnalysisData)\n  }\n}));\n\n// Test utilities\nconst createTestFile = (name: string, content: string = 'test content', mimeType: string = 'text/plain') => {\n  const testDir = path.join(__dirname, 'test-files');\n  if (!fs.existsSync(testDir)) {\n    fs.mkdirSync(testDir, { recursive: true });\n  }\n  \n  const filePath = path.join(testDir, name);\n  fs.writeFileSync(filePath, content);\n  return filePath;\n};\n\nconst createTestImageFile = (name: string = 'test-image.png') => {\n  // Create a minimal PNG file (1x1 pixel)\n  const pngData = Buffer.from([\n    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,\n    0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53,\n    0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41,\n    0x54, 0x08, 0xD7, 0x63, 0xF8, 0x00, 0x00, 0x00,\n    0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42,\n    0x60, 0x82\n  ]);\n  \n  const testDir = path.join(__dirname, 'test-files');\n  if (!fs.existsSync(testDir)) {\n    fs.mkdirSync(testDir, { recursive: true });\n  }\n  \n  const filePath = path.join(testDir, name);\n  fs.writeFileSync(filePath, pngData);\n  return filePath;\n};\n\ndescribe('Document Upload, Download, and AI Analysis Integration Tests', () => {\n  const app = require('../../server/index').app;\n  \n  beforeEach(async () => {\n    jest.clearAllMocks();\n    \n    // Clean up test data\n    await db.delete(bills).where(eq(bills.createdBy, mockAuth.user.id));\n    await db.delete(demands).where(eq(demands.submitterId, mockAuth.user.id));\n    await db.delete(bugs).where(eq(bugs.createdBy, mockAuth.user.id));\n    await db.delete(featureRequests).where(eq(featureRequests.createdBy, mockAuth.user.id));\n    await db.delete(documents).where(eq(documents.uploadedById, mockAuth.user.id));\n  });\n\n  afterEach(async () => {\n    // Clean up test files\n    const testDir = path.join(__dirname, 'test-files');\n    if (fs.existsSync(testDir)) {\n      fs.rmSync(testDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('Document Upload Operations', () => {\n    it('should upload bill document with standardized column structure', async () => {\n      // First create a bill\n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'Test Bill',\n        category: 'maintenance',\n        paymentType: 'unique',\n        costs: ['100.00'],\n        totalAmount: '100.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      const billId = billResponse.body.id;\n\n      // Upload document to the bill\n      const testImagePath = createTestImageFile('bill-receipt.png');\n      \n      const uploadResponse = await request(app)\n        .post(`/api/bills/${billId}/upload-document`)\n        .attach('document', testImagePath)\n        .expect(200);\n\n      // Verify response contains AI analysis\n      expect(uploadResponse.body.message).toContain('uploaded and analyzed successfully');\n      expect(uploadResponse.body.bill.isAiAnalyzed).toBe(true);\n      expect(uploadResponse.body.bill.aiAnalysisData).toBeDefined();\n\n      // Verify database record uses new column structure\n      const updatedBill = await db.select()\n        .from(bills)\n        .where(eq(bills.id, billId))\n        .limit(1);\n\n      expect(updatedBill).toHaveLength(1);\n      expect(updatedBill[0].filePath).toBeDefined();\n      expect(updatedBill[0].filePath).toContain('bill-receipt.png');\n      expect(updatedBill[0].fileName).toBe('bill-receipt.png');\n      expect(updatedBill[0].fileSize).toBeGreaterThan(0);\n      expect(updatedBill[0].isAiAnalyzed).toBe(true);\n      expect(updatedBill[0].aiAnalysisData).toBeDefined();\n    });\n\n    it('should handle demand file upload with new structure', async () => {\n      const demandData = {\n        type: 'maintenance',\n        description: 'Testing demand with file attachment',\n        buildingId: '123e4567-e89b-12d3-a456-426614174001'\n      };\n\n      const testImagePath = createTestImageFile('demand-attachment.png');\n      \n      const response = await request(app)\n        .post('/api/demands')\n        .field('type', demandData.type)\n        .field('description', demandData.description)\n        .field('buildingId', demandData.buildingId)\n        .attach('file', testImagePath)\n        .expect(200);\n\n      // Verify database record has correct file information\n      const createdDemand = await db.select()\n        .from(demands)\n        .where(eq(demands.id, response.body.id))\n        .limit(1);\n\n      expect(createdDemand).toHaveLength(1);\n      expect(createdDemand[0].filePath).toBeDefined();\n      expect(createdDemand[0].fileName).toBe('demand-attachment.png');\n      expect(createdDemand[0].fileSize).toBeGreaterThan(0);\n    });\n\n    it('should handle bug report file upload with standardized structure', async () => {\n      const bugData = {\n        title: 'Test Bug Report',\n        description: 'Testing bug report with file attachment',\n        category: 'ui_ux',\n        priority: 'medium'\n      };\n\n      const testImagePath = createTestImageFile('bug-screenshot.png');\n      \n      const response = await request(app)\n        .post('/api/bugs')\n        .field('title', bugData.title)\n        .field('description', bugData.description)\n        .field('category', bugData.category)\n        .field('priority', bugData.priority)\n        .attach('file', testImagePath)\n        .expect(200);\n\n      // Verify database record uses new column names\n      const createdBug = await db.select()\n        .from(bugs)\n        .where(eq(bugs.id, response.body.id))\n        .limit(1);\n\n      expect(createdBug).toHaveLength(1);\n      expect(createdBug[0].filePath).toBeDefined();\n      expect(createdBug[0].fileName).toBe('bug-screenshot.png');\n      expect(createdBug[0].fileSize).toBeGreaterThan(0);\n    });\n\n    it('should validate file size limits during upload', async () => {\n      // Create a large test file (over 25MB)\n      const largeFilePath = createTestFile('large-file.txt', 'x'.repeat(26 * 1024 * 1024)); // 26MB\n      \n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'Test Bill',\n        category: 'maintenance',\n        paymentType: 'unique',\n        costs: ['100.00'],\n        totalAmount: '100.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      // Attempt to upload large file should fail\n      await request(app)\n        .post(`/api/bills/${billResponse.body.id}/upload-document`)\n        .attach('document', largeFilePath)\n        .expect(413); // Payload Too Large\n    });\n  });\n\n  describe('Document Download Operations', () => {\n    it('should download bill documents with proper headers', async () => {\n      // Create bill with document\n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'Test Bill for Download',\n        category: 'maintenance',\n        paymentType: 'unique',\n        costs: ['150.00'],\n        totalAmount: '150.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      const testImagePath = createTestImageFile('download-test.png');\n      \n      await request(app)\n        .post(`/api/bills/${billResponse.body.id}/upload-document`)\n        .attach('document', testImagePath)\n        .expect(200);\n\n      // Test document download\n      const downloadResponse = await request(app)\n        .get(`/api/bills/${billResponse.body.id}/download-document`)\n        .expect(200);\n\n      // Verify headers\n      expect(downloadResponse.headers['content-disposition']).toContain('attachment');\n      expect(downloadResponse.headers['content-disposition']).toContain('download-test.png');\n      expect(downloadResponse.headers['content-type']).toBe('application/octet-stream');\n    });\n\n    it('should handle download of non-existent documents', async () => {\n      // Create bill without document\n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'Bill Without Document',\n        category: 'maintenance',\n        paymentType: 'unique',\n        costs: ['100.00'],\n        totalAmount: '100.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      // Attempt to download non-existent document\n      await request(app)\n        .get(`/api/bills/${billResponse.body.id}/download-document`)\n        .expect(404);\n    });\n  });\n\n  describe('AI Analysis Integration', () => {\n    it('should analyze uploaded documents with Gemini AI', async () => {\n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'AI Analysis Test Bill',\n        category: 'utilities',\n        paymentType: 'unique',\n        costs: ['200.00'],\n        totalAmount: '200.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      const testPdfPath = createTestFile('invoice.pdf', 'Sample PDF invoice content', 'application/pdf');\n      \n      const uploadResponse = await request(app)\n        .post(`/api/bills/${billResponse.body.id}/upload-document`)\n        .attach('document', testPdfPath)\n        .expect(200);\n\n      // Verify AI analysis was performed\n      expect(uploadResponse.body.bill.isAiAnalyzed).toBe(true);\n      expect(uploadResponse.body.bill.aiAnalysisData).toBeDefined();\n      expect(uploadResponse.body.bill.aiAnalysisData.extractedText).toBeDefined();\n      expect(uploadResponse.body.bill.aiAnalysisData.confidence).toBeGreaterThan(0);\n\n      // Verify database record contains AI analysis\n      const updatedBill = await db.select()\n        .from(bills)\n        .where(eq(bills.id, billResponse.body.id))\n        .limit(1);\n\n      expect(updatedBill[0].isAiAnalyzed).toBe(true);\n      expect(updatedBill[0].aiAnalysisData).toBeDefined();\n    });\n\n    it('should handle AI analysis failures gracefully', async () => {\n      // Mock AI service to fail\n      const mockGeminiService = require('../../server/services/gemini-bill-analyzer').geminiBillAnalyzer;\n      mockGeminiService.analyzeBillDocument.mockRejectedValueOnce(new Error('AI service unavailable'));\n\n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'AI Failure Test Bill',\n        category: 'maintenance',\n        paymentType: 'unique',\n        costs: ['100.00'],\n        totalAmount: '100.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      const testImagePath = createTestImageFile('ai-fail-test.png');\n      \n      const uploadResponse = await request(app)\n        .post(`/api/bills/${billResponse.body.id}/upload-document`)\n        .attach('document', testImagePath)\n        .expect(200);\n\n      // Document should still upload successfully even if AI fails\n      expect(uploadResponse.body.message).toContain('uploaded');\n      expect(uploadResponse.body.bill.filePath).toBeDefined();\n      expect(uploadResponse.body.bill.fileName).toBe('ai-fail-test.png');\n      expect(uploadResponse.body.bill.isAiAnalyzed).toBe(false); // AI failed\n      expect(uploadResponse.body.bill.aiAnalysisData).toBeNull();\n    });\n  });\n\n  describe('Cross-Form Compatibility', () => {\n    it('should maintain consistent file structure across all forms', async () => {\n      const testImagePath = createTestImageFile('consistency-test.png');\n      \n      // Test different form types with same file structure\n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'Consistency Test Bill',\n        category: 'maintenance',\n        paymentType: 'unique',\n        costs: ['100.00'],\n        totalAmount: '100.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      // Create and upload to bill\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      await request(app)\n        .post(`/api/bills/${billResponse.body.id}/upload-document`)\n        .attach('document', testImagePath)\n        .expect(200);\n\n      // Create demand with file\n      const demandResponse = await request(app)\n        .post('/api/demands')\n        .field('type', 'maintenance')\n        .field('description', 'Consistency test demand')\n        .field('buildingId', '123e4567-e89b-12d3-a456-426614174001')\n        .attach('file', testImagePath)\n        .expect(200);\n\n      // Create bug report with file\n      const bugResponse = await request(app)\n        .post('/api/bugs')\n        .field('title', 'Consistency Test Bug')\n        .field('description', 'Testing file structure consistency')\n        .field('category', 'functionality')\n        .field('priority', 'low')\n        .attach('file', testImagePath)\n        .expect(200);\n\n      // Verify all records have consistent file structure\n      const [billRecord] = await db.select().from(bills).where(eq(bills.id, billResponse.body.id));\n      const [demandRecord] = await db.select().from(demands).where(eq(demands.id, demandResponse.body.id));\n      const [bugRecord] = await db.select().from(bugs).where(eq(bugs.id, bugResponse.body.id));\n\n      // All should have filePath, fileName, fileSize columns\n      expect(billRecord.filePath).toBeDefined();\n      expect(billRecord.fileName).toBe('consistency-test.png');\n      expect(billRecord.fileSize).toBeGreaterThan(0);\n\n      expect(demandRecord.filePath).toBeDefined();\n      expect(demandRecord.fileName).toBe('consistency-test.png');\n      expect(demandRecord.fileSize).toBeGreaterThan(0);\n\n      expect(bugRecord.filePath).toBeDefined();\n      expect(bugRecord.fileName).toBe('consistency-test.png');\n      expect(bugRecord.fileSize).toBeGreaterThan(0);\n    });\n\n    it('should validate file types consistently across forms', async () => {\n      const invalidFilePath = createTestFile('test.exe', 'executable content', 'application/x-executable');\n      \n      // All forms should reject executable files\n      const billData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174001',\n        title: 'Test Bill',\n        category: 'maintenance',\n        paymentType: 'unique',\n        costs: ['100.00'],\n        totalAmount: '100.00',\n        startDate: '2024-01-01',\n        status: 'draft'\n      };\n\n      const billResponse = await request(app)\n        .post('/api/bills')\n        .send(billData)\n        .expect(200);\n\n      // Should reject invalid file type\n      await request(app)\n        .post(`/api/bills/${billResponse.body.id}/upload-document`)\n        .attach('document', invalidFilePath)\n        .expect(400);\n\n      // Same for demands\n      await request(app)\n        .post('/api/demands')\n        .field('type', 'maintenance')\n        .field('description', 'Test demand')\n        .field('buildingId', '123e4567-e89b-12d3-a456-426614174001')\n        .attach('file', invalidFilePath)\n        .expect(400);\n\n      // Same for bugs\n      await request(app)\n        .post('/api/bugs')\n        .field('title', 'Test Bug')\n        .field('description', 'Test description')\n        .field('category', 'functionality')\n        .field('priority', 'low')\n        .attach('file', invalidFilePath)\n        .expect(400);\n    });\n  });\n});"],"version":3}