9f10df69170e6cb4e946f4dca526a2c1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const select_1 = require("@/components/ui/select");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const checkbox_1 = require("@/components/ui/checkbox");
const popover_1 = require("@/components/ui/popover");
const lucide_react_1 = require("lucide-react");
const ModularBillForm_1 = __importDefault(require("@/components/bill-management/ModularBillForm"));
const react_query_1 = require("@tanstack/react-query");
const utils_1 = require("@/lib/utils");
const use_language_1 = require("@/hooks/use-language");
const withHierarchicalSelection_1 = require("@/components/hoc/withHierarchicalSelection");
const wouter_1 = require("wouter");
const BILL_CATEGORIES = [
    'insurance',
    'maintenance',
    'salary',
    'utilities',
    'cleaning',
    'security',
    'landscaping',
    'professional_services',
    'administration',
    'repairs',
    'supplies',
    'taxes',
    'other',
];
const MONTHS = [
    { value: '1', label: 'January' },
    { value: '2', label: 'February' },
    { value: '3', label: 'March' },
    { value: '4', label: 'April' },
    { value: '5', label: 'May' },
    { value: '6', label: 'June' },
    { value: '7', label: 'July' },
    { value: '8', label: 'August' },
    { value: '9', label: 'September' },
    { value: '10', label: 'October' },
    { value: '11', label: 'November' },
    { value: '12', label: 'December' },
];
// Category labels using translation keys
const getCategoryLabel = (category, t) => {
    const categoryTranslationKeys = {
        insurance: 'insurance',
        maintenance: 'maintenance',
        salary: 'salary',
        utilities: 'utilities',
        cleaning: 'cleaning',
        security: 'security',
        landscaping: 'landscaping',
        professional_services: 'professionalServices',
        administration: 'administration',
        repairs: 'repairs',
        supplies: 'supplies',
        taxes: 'taxes',
        other: 'other'
    };
    return t(categoryTranslationKeys[category] || category);
};
/**
 * Bills management component
 */
function BillsPage({ buildingId, organizationId }) {
    const { t } = (0, use_language_1.useLanguage)();
    const [, navigate] = (0, wouter_1.useLocation)();
    const handleBackToBuilding = () => {
        // Navigate back to building selection, removing buildingId from URL
        if (organizationId) {
            navigate(`/manager/bills?organization=${organizationId}`);
        }
        else {
            navigate('/manager/bills');
        }
    };
    const [filters, setFilters] = (0, react_1.useState)({
        category: '',
        year: new Date().getFullYear().toString(),
        months: [],
    });
    const [showCreateDialog, setShowCreateDialog] = (0, react_1.useState)(false);
    const [showAllYears, setShowAllYears] = (0, react_1.useState)(false);
    const queryClient = (0, react_query_1.useQueryClient)();
    // Fetch bills based on filters
    const { data: bills = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/bills', buildingId, filters],
        queryFn: async () => {
            const params = new URLSearchParams(); /**
             * If function.
             * @param filters.buildingId - Filters.buildingId parameter.
             */ /**
            * If function.
            * @param filters.buildingId - Filters.buildingId parameter.
            */
            if (buildingId) {
                params.set('buildingId', buildingId);
            } /**
             * If function.
             * @param filters.category && filters.category !== 'all' - filters.category && filters.category !== 'all' parameter.
             */ /**
            * If function.
            * @param filters.category && filters.category !== 'all' - filters.category && filters.category !== 'all' parameter.
            */
            if (filters.category && filters.category !== 'all') {
                params.set('category', filters.category);
            } /**
             * If function.
             * @param filters.year - Filters.year parameter.
             */ /**
            * If function.
            * @param filters.year - Filters.year parameter.
            */
            if (filters.year) {
                params.set('year', filters.year);
            } /**
             * If function.
             * @param filters.months.length > 0 - filters.months.length > 0 parameter.
             */ /**
            * If function.
            * @param filters.months.length > 0 - filters.months.length > 0 parameter.
            */
            if (filters.months.length > 0) {
                params.set('months', filters.months.join(','));
            }
            const url = `/api/bills${params.toString() ? '?' + params.toString() : ''}`;
            const response = await fetch(url, { credentials: 'include' }); /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */ /**
            * If function.
            * @param !response.ok - !response.ok parameter.
            */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            if (!response.ok) {
                throw new Error(`Failed to fetch bills: ${response.statusText}`);
            }
            return response.json();
        },
        enabled: !!buildingId, // Only fetch when buildingId is available
    });
    // Group bills by category
    const billsByCategory = bills.reduce((acc, bill) => {
        const category = bill.category || 'other'; /**
         * If function.
         * @param !acc[category] - !acc[category] parameter.
         */ /**
        * If function.
        * @param !acc[category] - !acc[category] parameter.
        */
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(bill);
        return acc;
    }, {});
    const handleFilterChange = (key, value) => {
        setFilters((prev) => ({ ...prev, [key]: value }));
    };
    const handleMonthToggle = (monthValue) => {
        setFilters((prev) => ({
            ...prev,
            months: prev.months.includes(monthValue)
                ? prev.months.filter((m) => m !== monthValue)
                : [...prev.months, monthValue],
        }));
    };
    const handleAllMonthsToggle = () => {
        const allMonthValues = MONTHS.map((m) => m.value);
        setFilters((prev) => ({
            ...prev,
            months: prev.months.length === allMonthValues.length ? [] : allMonthValues,
        }));
    };
    const getMonthsDisplayText = () => {
        /**
         * If function.
         * @param filters.months.length === 0 - filters.months.length === 0 parameter.
         */ /**
        * If function.
        * @param filters.months.length === 0 - filters.months.length === 0 parameter.
        */
        if (filters.months.length === 0) {
            return 'All months';
        } /**
         * If function.
         * @param filters.months.length === MONTHS.length - filters.months.length === MONTHS.length parameter.
         */ /**
        * If function.
        * @param filters.months.length === MONTHS.length - filters.months.length === MONTHS.length parameter.
        */
        if (filters.months.length === MONTHS.length) {
            return 'All months';
        } /**
         * If function.
         * @param filters.months.length === 1 - filters.months.length === 1 parameter.
         */ /**
        * If function.
        * @param filters.months.length === 1 - filters.months.length === 1 parameter.
        */
        if (filters.months.length === 1) {
            const month = MONTHS.find((m) => m.value === filters.months[0]);
            return month?.label || 'All months';
        }
        return `${filters.months.length} months`;
    };
    // Get current year for year calculation
    const currentYear = new Date().getFullYear();
    // Generate year options based on show all years state
    const getYearOptions = () => {
        /**
         * If function.
         * @param showAllYears - ShowAllYears parameter.
         */ /**
        * If function.
        * @param showAllYears - ShowAllYears parameter.
        */
        if (showAllYears) {
            // Show years from 2000 to 25 years forward
            const startYear = 2000;
            const endYear = currentYear + 25;
            const totalYears = endYear - startYear + 1;
            return Array.from({ length: totalYears }, (_, i) => startYear + i);
        }
        else {
            // Show current year Â±3 years
            const startYear = currentYear - 3;
            const endYear = currentYear + 3;
            const totalYears = endYear - startYear + 1;
            return Array.from({ length: totalYears }, (_, i) => startYear + i);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('billsManagement'), subtitle: t('billsSubtitle') }), buildingId && ((0, jsx_runtime_1.jsx)("div", { className: "p-4 border-b border-gray-200", children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: handleBackToBuilding, className: "flex items-center gap-2", "data-testid": "button-back-to-building", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4" }), t('building')] }) })), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: 'w-5 h-5' }), t('filters')] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-4 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'category-filter', className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Tag, { className: 'w-4 h-4' }), t('category')] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.category, onValueChange: (value) => handleFilterChange('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: 'category-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('allCategories') }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: t('allCategories') }), BILL_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category, children: getCategoryLabel(category, t) }, category)))] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'year-filter', className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-4 h-4' }), t('year')] }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-2', children: (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.year, onValueChange: (value) => handleFilterChange('year', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: 'year-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { className: 'max-h-[300px] overflow-y-auto', children: [getYearOptions().map((year) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: year.toString(), children: [year, year === currentYear && ((0, jsx_runtime_1.jsx)("span", { className: 'ml-2 text-xs text-blue-500', children: "(Current)" }))] }, year))), !showAllYears && ((0, jsx_runtime_1.jsx)("div", { className: 'border-t border-gray-200 mt-2 pt-2', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', className: 'w-full text-left justify-start text-xs', onClick: () => setShowAllYears(true), children: ["Show more years (2000 - ", currentYear + 25, ")"] }) })), showAllYears && ((0, jsx_runtime_1.jsx)("div", { className: 'border-t border-gray-200 mt-2 pt-2', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', className: 'w-full text-left justify-start text-xs', onClick: () => setShowAllYears(false), children: ["Show fewer years (", currentYear - 3, " - ", currentYear + 3, ")"] }) }))] })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-4 h-4' }), t('months')] }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', className: (0, utils_1.cn)('w-full justify-between', filters.months.length === 0 && 'text-muted-foreground'), children: [getMonthsDisplayText(), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: 'ml-2 h-4 w-4 shrink-0 opacity-50' })] }) }), (0, jsx_runtime_1.jsxs)(popover_1.PopoverContent, { className: 'w-64 p-0', align: 'start', children: [(0, jsx_runtime_1.jsx)("div", { className: 'border-b p-3', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: 'all-months', checked: filters.months.length === MONTHS.length, onCheckedChange: handleAllMonthsToggle }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'all-months', className: 'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', children: "All Months" })] }) }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-2 gap-2 p-3', children: MONTHS.map((month) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: `month-${month.value}`, checked: filters.months.includes(month.value), onCheckedChange: () => handleMonthToggle(month.value) }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `month-${month.value}`, className: 'text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', children: month.label })] }, month.value))) })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'invisible', children: "Actions" }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: showCreateDialog, onOpenChange: setShowCreateDialog, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsx)(button_1.Button, { className: 'w-full', disabled: !buildingId, children: t('createBill') }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-4xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: t('createNewBill') }) }), (0, jsx_runtime_1.jsx)(ModularBillForm_1.default, { mode: "create", buildingId: buildingId, onCancel: () => setShowCreateDialog(false), onSuccess: () => {
                                                                            setShowCreateDialog(false);
                                                                            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
                                                                        } })] })] })] })] }) })] }), isLoading ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: t('loadingBills') })] }) })) : Object.keys(billsByCategory).length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: t('noBillsFound') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500 mb-4', children: "No bills found for the selected filters. Create your first bill to get started." }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: () => setShowCreateDialog(true), children: "Create First Bill" })] }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: BILL_CATEGORIES.filter((category) => (!filters.category || filters.category === category) &&
                                billsByCategory[category]?.length > 0).map((category) => ((0, jsx_runtime_1.jsx)(BillCategorySection, { category: category, bills: billsByCategory[category] || [], onBillUpdate: () => queryClient.invalidateQueries({ queryKey: ['/api/bills'] }), t: t }, category))) }))] }) })] }));
}
// Component for displaying bills in a category
/**
 *
 * @param root0
 * @param root0.category
 * @param root0.bills
 * @param root0.onBillUpdate
 */
/**
 * BillCategorySection function.
 * @param root0
 * @param root0.category
 * @param root0.bills
 * @param root0.onBillUpdate
 * @returns Function result.
 */
function BillCategorySection({ category, bills, onBillUpdate, t, }) {
    return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'flex items-center justify-between', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Tag, { className: 'w-5 h-5' }), getCategoryLabel(category, t), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', children: bills.length })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4', children: bills.map((bill) => ((0, jsx_runtime_1.jsx)(BillCard, { bill: bill, onUpdate: onBillUpdate }, bill.id))) }) })] }));
}
// Component for individual bill cards
/**
 *
 * @param root0
 * @param root0.bill
 * @param root0.onUpdate
 */
/**
 * BillCard function.
 * @param root0
 * @param root0.bill
 * @param root0.onUpdate
 * @returns Function result.
 */
function BillCard({ bill, onUpdate }) {
    const { t } = (0, use_language_1.useLanguage)();
    const [showDetailDialog, setShowDetailDialog] = (0, react_1.useState)(false);
    const [showEditDialog, setShowEditDialog] = (0, react_1.useState)(false);
    const statusColors = {
        draft: 'bg-gray-100 text-gray-800',
        sent: 'bg-blue-100 text-blue-800',
        overdue: 'bg-red-100 text-red-800',
        paid: 'bg-green-100 text-green-800',
        cancelled: 'bg-gray-100 text-gray-800',
    };
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-md transition-shadow cursor-pointer', onClick: () => setShowDetailDialog(true), children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-semibold text-sm', children: bill.title }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: ["#", bill.billNumber] })] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[bill.status], children: bill.status })] }), bill.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 line-clamp-2', children: bill.description })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between text-sm', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'font-medium', children: ["$", Number(bill.totalAmount).toLocaleString()] }), (0, jsx_runtime_1.jsx)("span", { className: 'text-gray-500', children: bill.paymentType })] }), bill.vendor && (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: ["Vendor: ", bill.vendor] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 pt-2', children: [bill.filePath && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-3 h-3 mr-1' }), "Document"] })), bill.isAiAnalyzed && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: "AI Analyzed" })), bill.notes?.includes('Auto-generated from:') && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: "Auto-Generated" }))] })] }) }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: showDetailDialog, onOpenChange: setShowDetailDialog, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[95vh] overflow-y-auto', "aria-describedby": "bill-details-description", children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Bill Details" }) }), (0, jsx_runtime_1.jsx)(BillDetail, { bill: bill, onSuccess: () => {
                                setShowDetailDialog(false);
                                onUpdate();
                            }, onCancel: () => setShowDetailDialog(false), onEditBill: () => {
                                setShowDetailDialog(false);
                                setShowEditDialog(true);
                            } })] }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: showEditDialog, onOpenChange: setShowEditDialog, children: (0, jsx_runtime_1.jsx)(dialog_1.DialogContent, { className: 'max-w-4xl max-h-[95vh] overflow-y-auto', "aria-describedby": "edit-bill-description", children: (0, jsx_runtime_1.jsx)(ModularBillForm_1.default, { mode: "edit", bill: bill, onSuccess: () => {
                            setShowEditDialog(false);
                            onUpdate();
                        }, onCancel: () => setShowEditDialog(false), buildingId: bill.buildingId }) }) })] }));
}
// Bill detail component
function BillDetail({ bill, onSuccess, onCancel, onEditBill, }) {
    const queryClient = (0, react_query_1.useQueryClient)();
    // Fetch fresh bill data to ensure we have updated document information
    const { data: freshBill, error: freshBillError, isLoading: freshBillLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/bills', bill.id],
        queryFn: async () => {
            const response = await fetch(`/api/bills/${bill.id}`, {
                credentials: 'include',
            });
            if (!response.ok) {
                throw new Error('Failed to fetch bill details');
            }
            return response.json();
        },
    });
    // Fetch documents attached to this bill
    const { data: billDocuments = [], isLoading: documentsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/documents', 'bill', bill.id],
        queryFn: async () => {
            const response = await fetch(`/api/documents?attachedToType=bill&attachedToId=${bill.id}`, {
                credentials: 'include',
            });
            if (!response.ok) {
                console.error('[BILL DOCS] Failed to fetch documents:', response.status, response.statusText);
                throw new Error('Failed to fetch bill documents');
            }
            const data = await response.json();
            return data.documents || [];
        },
    });
    // Use fresh bill data if available, fallback to props bill data
    const currentBill = freshBill || bill;
    // Keep basic logging for bills
    if (billDocuments.length > 0) {
        console.log('[BILL DOCS] Found documents:', billDocuments.length, 'for bill:', currentBill.billNumber);
    }
    const updateBillMutation = (0, react_query_1.useMutation)({
        mutationFn: async (updates) => {
            const response = await fetch(`/api/bills/${bill.id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(updates),
            });
            if (!response.ok) {
                throw new Error('Failed to update bill');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            onSuccess();
        },
    });
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Bill Number" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: currentBill.billNumber })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Status" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 capitalize', children: currentBill.status })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Category" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 capitalize', children: currentBill.category })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Payment Type" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 capitalize', children: currentBill.paymentType })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Total Amount" }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600', children: ["$", Number(currentBill.totalAmount).toLocaleString()] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Start Date" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: currentBill.startDate })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Title" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: currentBill.title })] }), currentBill.description && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: currentBill.description })] })), currentBill.vendor && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Vendor" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: currentBill.vendor })] })), currentBill.notes && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Notes" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: currentBill.notes })] })), currentBill.costs && currentBill.costs.length > 1 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Payment Breakdown" }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-1 mt-1', children: currentBill.costs.map((cost, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between text-sm', children: [(0, jsx_runtime_1.jsxs)("span", { children: ["Payment ", index + 1, ":"] }), (0, jsx_runtime_1.jsxs)("span", { children: ["$", Number(cost).toLocaleString()] })] }, index))) })] })), (currentBill.filePath || billDocuments.length > 0) && ((0, jsx_runtime_1.jsxs)("div", { className: 'border-t pt-4', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Uploaded Documents" }), (0, jsx_runtime_1.jsxs)("div", { className: 'mt-2 space-y-2', children: [currentBill.filePath && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-3 bg-gray-50 rounded-lg', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm', children: currentBill.fileName }), currentBill.isAiAnalyzed && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: "AI Analyzed" }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => {
                                                    // View the document (open in new tab)
                                                    window.open(`/api/bills/${currentBill.id}/download-document`, '_blank');
                                                }, className: 'flex items-center gap-1', "data-testid": `button-view-document-${currentBill.id}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-3 h-3' }), "View"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => {
                                                    // Download the document
                                                    const link = document.createElement('a');
                                                    link.href = `/api/bills/${currentBill.id}/download-document`;
                                                    link.download = currentBill.fileName || 'bill-document';
                                                    document.body.appendChild(link);
                                                    link.click();
                                                    document.body.removeChild(link);
                                                }, className: 'flex items-center gap-1', "data-testid": `button-download-document-${currentBill.id}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-3 h-3' }), "Download"] })] })] })), billDocuments.map((doc) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-3 bg-blue-50 rounded-lg', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm', children: doc.name }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: doc.documentType || 'Document' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: async () => {
                                                    try {
                                                        // Use fetch with credentials to ensure authentication
                                                        const response = await fetch(`/api/documents/${doc.id}/file`, {
                                                            method: 'GET',
                                                            credentials: 'include', // Include authentication cookies
                                                        });
                                                        if (!response.ok) {
                                                            throw new Error(`View failed: ${response.status} ${response.statusText}`);
                                                        }
                                                        // Convert response to blob and open in new tab
                                                        const blob = await response.blob();
                                                        const url = window.URL.createObjectURL(blob);
                                                        // Open in new tab
                                                        window.open(url, '_blank');
                                                        // Clean up the URL after a delay to allow the tab to load
                                                        setTimeout(() => {
                                                            window.URL.revokeObjectURL(url);
                                                        }, 1000);
                                                    }
                                                    catch (error) {
                                                        console.error('View failed:', error);
                                                    }
                                                }, className: 'flex items-center gap-1', "data-testid": `button-view-document-${doc.id}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-3 h-3' }), "View"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: async () => {
                                                    try {
                                                        // Use fetch with credentials to ensure authentication
                                                        const response = await fetch(`/api/documents/${doc.id}/file?download=true`, {
                                                            method: 'GET',
                                                            credentials: 'include', // Include authentication cookies
                                                        });
                                                        if (!response.ok) {
                                                            throw new Error(`Download failed: ${response.status} ${response.statusText}`);
                                                        }
                                                        // Convert response to blob and create download
                                                        const blob = await response.blob();
                                                        const url = window.URL.createObjectURL(blob);
                                                        const link = document.createElement('a');
                                                        link.href = url;
                                                        link.download = doc.fileName || doc.name || 'document';
                                                        document.body.appendChild(link);
                                                        link.click();
                                                        // Clean up
                                                        document.body.removeChild(link);
                                                        window.URL.revokeObjectURL(url);
                                                    }
                                                    catch (error) {
                                                        console.error('Download failed:', error);
                                                    }
                                                }, className: 'flex items-center gap-1', "data-testid": `button-download-document-${doc.id}`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-3 h-3' }), "Download"] })] })] }, doc.id)))] })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between items-center pt-4 border-t', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { onClick: onEditBill, className: 'flex items-center gap-1', "data-testid": `button-edit-bill-${bill.id}`, children: "Edit Bill" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: onCancel, "data-testid": `button-close-bill-modal-${bill.id}`, children: "Close" })] })] }));
}
// Export with hierarchical selection HOC - Manager buildings page uses 2-level hierarchy
exports.default = (0, withHierarchicalSelection_1.withHierarchicalSelection)(BillsPage, {
    hierarchy: ['organization', 'building']
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,