0dd4411b26f2f7bdb452da2b8185c8ac
"use strict";
/**
 * Document Upload, Download, and AI Analysis Integration Tests
 *
 * Comprehensive testing suite for the standardized document management system
 * with AI analysis functionality. Tests validate:
 *
 * 1. Document Upload Operations
 *    - File upload with new filePath, fileName, fileSize structure
 *    - Multipart form handling
 *    - File validation and security checks
 *    - Database record creation with correct column names
 *
 * 2. Document Download Operations
 *    - Secure file serving
 *    - Access control validation
 *    - Proper headers and content disposition
 *
 * 3. AI Analysis Integration
 *    - Gemini AI document analysis
 *    - AI results storage in database
 *    - Analysis metadata handling
 *    - Error handling for AI failures
 *
 * 4. Cross-Form Document Handling
 *    - Bills document upload/download
 *    - Demands file attachments
 *    - Bug report file attachments
 *    - Feature request attachments
 *    - Document management uploads
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
globals_1.jest.mock('../../server/auth', () => ({
    requireAuth: (req, res, next) => {
        req.user = mockAuth.user;
        next();
    }
}));
globals_1.jest.mock('../../server/services/geminiService', () => ({
    geminiService: {
        analyzeDocument: globals_1.jest.fn().mockResolvedValue(mockGeminiAnalysis)
    }
}));
globals_1.jest.mock('../../server/services/gemini-bill-analyzer', () => ({
    geminiBillAnalyzer: {
        analyzeBillDocument: globals_1.jest.fn().mockResolvedValue(mockGeminiAnalysis.aiAnalysisData)
    }
}));
const supertest_1 = __importDefault(require("supertest"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
// Mock authentication middleware
const mockAuth = {
    user: {
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'test@koveo.com',
        role: 'admin',
        organizationId: '123e4567-e89b-12d3-a456-426614174001'
    }
};
// Mock Gemini AI service
const mockGeminiAnalysis = {
    isAiAnalyzed: true,
    aiAnalysisData: {
        extractedText: 'Sample document text content',
        keyFindings: ['Important finding 1', 'Important finding 2'],
        documentType: 'invoice',
        confidence: 0.95,
        analysisTimestamp: new Date().toISOString()
    }
};
// Test utilities
const createTestFile = (name, content = 'test content', mimeType = 'text/plain') => {
    const testDir = path_1.default.join(__dirname, 'test-files');
    if (!fs_1.default.existsSync(testDir)) {
        fs_1.default.mkdirSync(testDir, { recursive: true });
    }
    const filePath = path_1.default.join(testDir, name);
    fs_1.default.writeFileSync(filePath, content);
    return filePath;
};
const createTestImageFile = (name = 'test-image.png') => {
    // Create a minimal PNG file (1x1 pixel)
    const pngData = Buffer.from([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53,
        0xDE, 0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41,
        0x54, 0x08, 0xD7, 0x63, 0xF8, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42,
        0x60, 0x82
    ]);
    const testDir = path_1.default.join(__dirname, 'test-files');
    if (!fs_1.default.existsSync(testDir)) {
        fs_1.default.mkdirSync(testDir, { recursive: true });
    }
    const filePath = path_1.default.join(testDir, name);
    fs_1.default.writeFileSync(filePath, pngData);
    return filePath;
};
(0, globals_1.describe)('Document Upload, Download, and AI Analysis Integration Tests', () => {
    const app = require('../../server/index').app;
    (0, globals_1.beforeEach)(async () => {
        globals_1.jest.clearAllMocks();
        // Clean up test data
        await db_1.db.delete(schema_1.bills).where((0, drizzle_orm_1.eq)(schema_1.bills.createdBy, mockAuth.user.id));
        await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.submitterId, mockAuth.user.id));
        await db_1.db.delete(schema_1.bugs).where((0, drizzle_orm_1.eq)(schema_1.bugs.createdBy, mockAuth.user.id));
        await db_1.db.delete(schema_1.featureRequests).where((0, drizzle_orm_1.eq)(schema_1.featureRequests.createdBy, mockAuth.user.id));
        await db_1.db.delete(schema_1.documents).where((0, drizzle_orm_1.eq)(schema_1.documents.uploadedById, mockAuth.user.id));
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test files
        const testDir = path_1.default.join(__dirname, 'test-files');
        if (fs_1.default.existsSync(testDir)) {
            fs_1.default.rmSync(testDir, { recursive: true, force: true });
        }
    });
    (0, globals_1.describe)('Document Upload Operations', () => {
        (0, globals_1.it)('should upload bill document with standardized column structure', async () => {
            // First create a bill
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'Test Bill',
                category: 'maintenance',
                paymentType: 'unique',
                costs: ['100.00'],
                totalAmount: '100.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            const billId = billResponse.body.id;
            // Upload document to the bill
            const testImagePath = createTestImageFile('bill-receipt.png');
            const uploadResponse = await (0, supertest_1.default)(app)
                .post(`/api/bills/${billId}/upload-document`)
                .attach('document', testImagePath)
                .expect(200);
            // Verify response contains AI analysis
            (0, globals_1.expect)(uploadResponse.body.message).toContain('uploaded and analyzed successfully');
            (0, globals_1.expect)(uploadResponse.body.bill.isAiAnalyzed).toBe(true);
            (0, globals_1.expect)(uploadResponse.body.bill.aiAnalysisData).toBeDefined();
            // Verify database record uses new column structure
            const updatedBill = await db_1.db.select()
                .from(schema_1.bills)
                .where((0, drizzle_orm_1.eq)(schema_1.bills.id, billId))
                .limit(1);
            (0, globals_1.expect)(updatedBill).toHaveLength(1);
            (0, globals_1.expect)(updatedBill[0].filePath).toBeDefined();
            (0, globals_1.expect)(updatedBill[0].filePath).toContain('bill-receipt.png');
            (0, globals_1.expect)(updatedBill[0].fileName).toBe('bill-receipt.png');
            (0, globals_1.expect)(updatedBill[0].fileSize).toBeGreaterThan(0);
            (0, globals_1.expect)(updatedBill[0].isAiAnalyzed).toBe(true);
            (0, globals_1.expect)(updatedBill[0].aiAnalysisData).toBeDefined();
        });
        (0, globals_1.it)('should handle demand file upload with new structure', async () => {
            const demandData = {
                type: 'maintenance',
                description: 'Testing demand with file attachment',
                buildingId: '123e4567-e89b-12d3-a456-426614174001'
            };
            const testImagePath = createTestImageFile('demand-attachment.png');
            const response = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .field('type', demandData.type)
                .field('description', demandData.description)
                .field('buildingId', demandData.buildingId)
                .attach('file', testImagePath)
                .expect(200);
            // Verify database record has correct file information
            const createdDemand = await db_1.db.select()
                .from(schema_1.demands)
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, response.body.id))
                .limit(1);
            (0, globals_1.expect)(createdDemand).toHaveLength(1);
            (0, globals_1.expect)(createdDemand[0].filePath).toBeDefined();
            (0, globals_1.expect)(createdDemand[0].fileName).toBe('demand-attachment.png');
            (0, globals_1.expect)(createdDemand[0].fileSize).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should handle bug report file upload with standardized structure', async () => {
            const bugData = {
                title: 'Test Bug Report',
                description: 'Testing bug report with file attachment',
                category: 'ui_ux',
                priority: 'medium'
            };
            const testImagePath = createTestImageFile('bug-screenshot.png');
            const response = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', bugData.title)
                .field('description', bugData.description)
                .field('category', bugData.category)
                .field('priority', bugData.priority)
                .attach('file', testImagePath)
                .expect(200);
            // Verify database record uses new column names
            const createdBug = await db_1.db.select()
                .from(schema_1.bugs)
                .where((0, drizzle_orm_1.eq)(schema_1.bugs.id, response.body.id))
                .limit(1);
            (0, globals_1.expect)(createdBug).toHaveLength(1);
            (0, globals_1.expect)(createdBug[0].filePath).toBeDefined();
            (0, globals_1.expect)(createdBug[0].fileName).toBe('bug-screenshot.png');
            (0, globals_1.expect)(createdBug[0].fileSize).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should validate file size limits during upload', async () => {
            // Create a large test file (over 25MB)
            const largeFilePath = createTestFile('large-file.txt', 'x'.repeat(26 * 1024 * 1024)); // 26MB
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'Test Bill',
                category: 'maintenance',
                paymentType: 'unique',
                costs: ['100.00'],
                totalAmount: '100.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            // Attempt to upload large file should fail
            await (0, supertest_1.default)(app)
                .post(`/api/bills/${billResponse.body.id}/upload-document`)
                .attach('document', largeFilePath)
                .expect(413); // Payload Too Large
        });
    });
    (0, globals_1.describe)('Document Download Operations', () => {
        (0, globals_1.it)('should download bill documents with proper headers', async () => {
            // Create bill with document
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'Test Bill for Download',
                category: 'maintenance',
                paymentType: 'unique',
                costs: ['150.00'],
                totalAmount: '150.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            const testImagePath = createTestImageFile('download-test.png');
            await (0, supertest_1.default)(app)
                .post(`/api/bills/${billResponse.body.id}/upload-document`)
                .attach('document', testImagePath)
                .expect(200);
            // Test document download
            const downloadResponse = await (0, supertest_1.default)(app)
                .get(`/api/bills/${billResponse.body.id}/download-document`)
                .expect(200);
            // Verify headers
            (0, globals_1.expect)(downloadResponse.headers['content-disposition']).toContain('attachment');
            (0, globals_1.expect)(downloadResponse.headers['content-disposition']).toContain('download-test.png');
            (0, globals_1.expect)(downloadResponse.headers['content-type']).toBe('application/octet-stream');
        });
        (0, globals_1.it)('should handle download of non-existent documents', async () => {
            // Create bill without document
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'Bill Without Document',
                category: 'maintenance',
                paymentType: 'unique',
                costs: ['100.00'],
                totalAmount: '100.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            // Attempt to download non-existent document
            await (0, supertest_1.default)(app)
                .get(`/api/bills/${billResponse.body.id}/download-document`)
                .expect(404);
        });
    });
    (0, globals_1.describe)('AI Analysis Integration', () => {
        (0, globals_1.it)('should analyze uploaded documents with Gemini AI', async () => {
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'AI Analysis Test Bill',
                category: 'utilities',
                paymentType: 'unique',
                costs: ['200.00'],
                totalAmount: '200.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            const testPdfPath = createTestFile('invoice.pdf', 'Sample PDF invoice content', 'application/pdf');
            const uploadResponse = await (0, supertest_1.default)(app)
                .post(`/api/bills/${billResponse.body.id}/upload-document`)
                .attach('document', testPdfPath)
                .expect(200);
            // Verify AI analysis was performed
            (0, globals_1.expect)(uploadResponse.body.bill.isAiAnalyzed).toBe(true);
            (0, globals_1.expect)(uploadResponse.body.bill.aiAnalysisData).toBeDefined();
            (0, globals_1.expect)(uploadResponse.body.bill.aiAnalysisData.extractedText).toBeDefined();
            (0, globals_1.expect)(uploadResponse.body.bill.aiAnalysisData.confidence).toBeGreaterThan(0);
            // Verify database record contains AI analysis
            const updatedBill = await db_1.db.select()
                .from(schema_1.bills)
                .where((0, drizzle_orm_1.eq)(schema_1.bills.id, billResponse.body.id))
                .limit(1);
            (0, globals_1.expect)(updatedBill[0].isAiAnalyzed).toBe(true);
            (0, globals_1.expect)(updatedBill[0].aiAnalysisData).toBeDefined();
        });
        (0, globals_1.it)('should handle AI analysis failures gracefully', async () => {
            // Mock AI service to fail
            const mockGeminiService = require('../../server/services/gemini-bill-analyzer').geminiBillAnalyzer;
            mockGeminiService.analyzeBillDocument.mockRejectedValueOnce(new Error('AI service unavailable'));
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'AI Failure Test Bill',
                category: 'maintenance',
                paymentType: 'unique',
                costs: ['100.00'],
                totalAmount: '100.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            const testImagePath = createTestImageFile('ai-fail-test.png');
            const uploadResponse = await (0, supertest_1.default)(app)
                .post(`/api/bills/${billResponse.body.id}/upload-document`)
                .attach('document', testImagePath)
                .expect(200);
            // Document should still upload successfully even if AI fails
            (0, globals_1.expect)(uploadResponse.body.message).toContain('uploaded');
            (0, globals_1.expect)(uploadResponse.body.bill.filePath).toBeDefined();
            (0, globals_1.expect)(uploadResponse.body.bill.fileName).toBe('ai-fail-test.png');
            (0, globals_1.expect)(uploadResponse.body.bill.isAiAnalyzed).toBe(false); // AI failed
            (0, globals_1.expect)(uploadResponse.body.bill.aiAnalysisData).toBeNull();
        });
    });
    (0, globals_1.describe)('Cross-Form Compatibility', () => {
        (0, globals_1.it)('should maintain consistent file structure across all forms', async () => {
            const testImagePath = createTestImageFile('consistency-test.png');
            // Test different form types with same file structure
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'Consistency Test Bill',
                category: 'maintenance',
                paymentType: 'unique',
                costs: ['100.00'],
                totalAmount: '100.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            // Create and upload to bill
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            await (0, supertest_1.default)(app)
                .post(`/api/bills/${billResponse.body.id}/upload-document`)
                .attach('document', testImagePath)
                .expect(200);
            // Create demand with file
            const demandResponse = await (0, supertest_1.default)(app)
                .post('/api/demands')
                .field('type', 'maintenance')
                .field('description', 'Consistency test demand')
                .field('buildingId', '123e4567-e89b-12d3-a456-426614174001')
                .attach('file', testImagePath)
                .expect(200);
            // Create bug report with file
            const bugResponse = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Consistency Test Bug')
                .field('description', 'Testing file structure consistency')
                .field('category', 'functionality')
                .field('priority', 'low')
                .attach('file', testImagePath)
                .expect(200);
            // Verify all records have consistent file structure
            const [billRecord] = await db_1.db.select().from(schema_1.bills).where((0, drizzle_orm_1.eq)(schema_1.bills.id, billResponse.body.id));
            const [demandRecord] = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, demandResponse.body.id));
            const [bugRecord] = await db_1.db.select().from(schema_1.bugs).where((0, drizzle_orm_1.eq)(schema_1.bugs.id, bugResponse.body.id));
            // All should have filePath, fileName, fileSize columns
            (0, globals_1.expect)(billRecord.filePath).toBeDefined();
            (0, globals_1.expect)(billRecord.fileName).toBe('consistency-test.png');
            (0, globals_1.expect)(billRecord.fileSize).toBeGreaterThan(0);
            (0, globals_1.expect)(demandRecord.filePath).toBeDefined();
            (0, globals_1.expect)(demandRecord.fileName).toBe('consistency-test.png');
            (0, globals_1.expect)(demandRecord.fileSize).toBeGreaterThan(0);
            (0, globals_1.expect)(bugRecord.filePath).toBeDefined();
            (0, globals_1.expect)(bugRecord.fileName).toBe('consistency-test.png');
            (0, globals_1.expect)(bugRecord.fileSize).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should validate file types consistently across forms', async () => {
            const invalidFilePath = createTestFile('test.exe', 'executable content', 'application/x-executable');
            // All forms should reject executable files
            const billData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174001',
                title: 'Test Bill',
                category: 'maintenance',
                paymentType: 'unique',
                costs: ['100.00'],
                totalAmount: '100.00',
                startDate: '2024-01-01',
                status: 'draft'
            };
            const billResponse = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .send(billData)
                .expect(200);
            // Should reject invalid file type
            await (0, supertest_1.default)(app)
                .post(`/api/bills/${billResponse.body.id}/upload-document`)
                .attach('document', invalidFilePath)
                .expect(400);
            // Same for demands
            await (0, supertest_1.default)(app)
                .post('/api/demands')
                .field('type', 'maintenance')
                .field('description', 'Test demand')
                .field('buildingId', '123e4567-e89b-12d3-a456-426614174001')
                .attach('file', invalidFilePath)
                .expect(400);
            // Same for bugs
            await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Test Bug')
                .field('description', 'Test description')
                .field('category', 'functionality')
                .field('priority', 'low')
                .attach('file', invalidFilePath)
                .expect(400);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,