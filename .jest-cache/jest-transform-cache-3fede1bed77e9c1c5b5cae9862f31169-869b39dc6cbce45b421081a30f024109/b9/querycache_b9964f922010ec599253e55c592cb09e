c0152caad1ddd848b812bf1796416f61
"use strict";
/**
 * Query caching system for Quebec property management SaaS.
 * Implements intelligent caching to reduce 132ms average query time.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CACHE_CONFIGS = exports.QueryCacheManager = exports.default = exports.CacheWarmer = exports.CacheMonitor = exports.CacheInvalidator = exports.queryCache = void 0;
exports.withCache = withCache;
const lru_cache_1 = require("lru-cache");
/**
 * Cache configurations optimized for property management workloads.
 */
const CACHE_CONFIGS = {
    // User data - frequently accessed, moderate changes
    // OPTIMIZED: Longer TTL for complex user assignments query
    users: { maxSize: 1500, ttl: 8 * 60 * 1000 }, // 8 minutes (was 5)
    // Organization data - stable, infrequent changes
    organizations: { maxSize: 200, ttl: 45 * 60 * 1000 }, // 45 minutes (was 30)
    // Building data - relatively stable
    // OPTIMIZED: Increased cache size and TTL for building queries
    buildings: { maxSize: 1000, ttl: 20 * 60 * 1000 }, // 20 minutes (was 15)
    // Residence data - stable structure, occasional updates
    // OPTIMIZED: Increased cache size for residence queries
    residences: { maxSize: 3000, ttl: 12 * 60 * 1000 }, // 12 minutes (was 10)
    // Documents - frequently accessed, moderate updates
    // OPTIMIZED: New cache category for document queries
    documents: { maxSize: 2000, ttl: 10 * 60 * 1000 }, // 10 minutes
    // Bills - time-sensitive, frequent updates
    bills: { maxSize: 1500, ttl: 3 * 60 * 1000 }, // 3 minutes (was 2)
    // Maintenance requests - dynamic, frequent status changes
    maintenance: { maxSize: 750, ttl: 90 * 1000 }, // 90 seconds (was 60)
    // Notifications - real-time, short cache
    notifications: { maxSize: 1000, ttl: 45 * 1000 }, // 45 seconds (was 30)
    // Quality metrics - stable for periods
    metrics: { maxSize: 300, ttl: 8 * 60 * 1000 }, // 8 minutes (was 5)
    // Features and roadmap - moderately stable
    features: { maxSize: 500, ttl: 5 * 60 * 1000 }, // 5 minutes (was 3)
    // Framework configuration - very stable
    config: { maxSize: 150, ttl: 90 * 60 * 1000 }, // 1.5 hours (was 1)
    // Bug reports - moderate changes, user-specific
    bugs: { maxSize: 750, ttl: 4 * 60 * 1000 }, // 4 minutes (was 2)
    // Financial data - moderate changes, important for dashboard
    financial: { maxSize: 500, ttl: 5 * 60 * 1000 }, // 5 minutes
    // Search results - temporary but frequently accessed
    search: { maxSize: 1000, ttl: 2 * 60 * 1000 }, // 2 minutes
    // Statistics and aggregations - expensive to compute
    stats: { maxSize: 300, ttl: 10 * 60 * 1000 }, // 10 minutes
};
exports.CACHE_CONFIGS = CACHE_CONFIGS;
/**
 * Cache instances for different data types.
 */
class QueryCacheManager {
    /**
     *
     */
    constructor() {
        this.caches = new Map();
        this.hitCounts = new Map();
        this.missCounts = new Map();
        // Initialize caches for each data type
        Object.entries(CACHE_CONFIGS).forEach(([type, config]) => {
            this.caches.set(type, new lru_cache_1.LRUCache({
                max: config.maxSize,
                ttl: config.ttl,
                updateAgeOnGet: true,
                updateAgeOnHas: true,
            }));
            this.hitCounts.set(type, 0);
            this.missCounts.set(type, 0);
        });
    }
    /**
     * Gets cached data if available.
     * @param cacheType Type of cache (users, buildings, etc.).
     * @param key Cache key.
     * @param _key
     * @returns Cached data or undefined.
     */
    get(cacheType, _key) {
        const cache = this.caches.get(cacheType);
        if (!cache) {
            return undefined;
        }
        const result = cache.get(_key);
        if (result !== undefined) {
            this.hitCounts.set(cacheType, (this.hitCounts.get(cacheType) || 0) + 1);
            return result;
        }
        this.missCounts.set(cacheType, (this.missCounts.get(cacheType) || 0) + 1);
        return undefined;
    }
    /**
     * Stores data in cache.
     * @param cacheType Type of cache.
     * @param key Cache key.
     * @param data Data to cache.
     * @param _key
     * @param _data
     */
    set(cacheType, _key, _data) {
        const cache = this.caches.get(cacheType);
        if (!cache) {
            return;
        }
        cache.set(_key, _data);
    }
    /**
     * Invalidates cache entries by pattern.
     * @param cacheType Type of cache.
     * @param pattern Key pattern to invalidate (supports wildcards).
     */
    invalidate(cacheType, pattern) {
        const cache = this.caches.get(cacheType);
        if (!cache) {
            return;
        }
        if (pattern) {
            // Remove entries matching pattern
            for (const key of cache.keys()) {
                if (this.matchesPattern(key, pattern)) {
                    cache.delete(key);
                }
            }
        }
        else {
            // Clear entire cache
            cache.clear();
        }
    }
    /**
     * Gets cache performance statistics.
     */
    getStats() {
        const stats = {};
        for (const [_type, cache] of this.caches) {
            const hits = this.hitCounts.get(_type) || 0;
            const misses = this.missCounts.get(_type) || 0;
            const total = hits + misses;
            const hitRate = total > 0 ? ((hits / total) * 100).toFixed(2) : '0.00';
            stats[_type] = {
                size: cache.size,
                maxSize: cache.max,
                hits,
                misses,
                hitRate: `${hitRate}%`,
                memoryUsage: this.estimateMemoryUsage(cache),
            };
        }
        return stats;
    }
    /**
     * Clears all caches.
     */
    clearAll() {
        for (const [_type, cache] of this.caches) {
            cache.clear();
            this.hitCounts.set(_type, 0);
            this.missCounts.set(_type, 0);
        }
    }
    /**
     * Pattern matching for cache key invalidation.
     * @param key
     * @param _key
     * @param pattern
     */
    matchesPattern(_key, pattern) {
        const regex = new RegExp(pattern.replace(/\*/g, '.*'));
        return regex.test(_key);
    }
    /**
     * Estimates memory usage of a cache.
     * @param cache
     */
    estimateMemoryUsage(cache) {
        let totalSize = 0;
        for (const value of cache.values()) {
            totalSize += JSON.stringify(value).length * 2; // Rough estimate
        }
        return `${(totalSize / 1024).toFixed(2)} KB`;
    }
}
exports.QueryCacheManager = QueryCacheManager;
/**
 * Global cache manager instance.
 */
exports.queryCache = new QueryCacheManager();
exports.default = exports.queryCache;
/**
 * Cached query helper function for database operations.
 * Replaces decorator approach for better compatibility.
 * @param cacheType
 * @param cacheKey
 * @param operation
 */
/**
 * WithCache function.
 * @param cacheType
 * @param cacheKey
 * @param operation
 * @returns Function result.
 */
function withCache(cacheType, cacheKey, operation) {
    return new Promise(async (resolve, reject) => {
        try {
            // Try to get from cache first
            const cached = exports.queryCache.get(cacheType, cacheKey);
            if (cached !== undefined) {
                resolve(cached);
                return;
            }
            // Execute operation
            const result = await operation();
            // Cache the result
            exports.queryCache.set(cacheType, cacheKey, result);
            resolve(result);
        }
        catch (error) {
            reject(error);
        }
    });
}
/**
 * Cache invalidation utilities for specific operations.
 * OPTIMIZED: Added smarter invalidation patterns and cascade invalidation.
 */
class CacheInvalidator {
    /**
     * Invalidates user-related caches when user data changes.
     * OPTIMIZED: More comprehensive user cache invalidation.
     * @param userId
     */
    static invalidateUserCaches(userId) {
        // Individual user caches
        exports.queryCache.invalidate('users', `user:${userId}*`);
        exports.queryCache.invalidate('users', `users_by_org:${userId}*`);
        exports.queryCache.invalidate('residences', `user_residences:${userId}*`);
        exports.queryCache.invalidate('residences', `user_residences_details:${userId}*`);
        exports.queryCache.invalidate('documents', `legacy_docs:${userId}*`);
        exports.queryCache.invalidate('notifications', `user_notifications:${userId}*`);
        // Invalidate aggregated user queries that include this user
        exports.queryCache.invalidate('users', 'all_users');
        exports.queryCache.invalidate('users', 'all_users_assignments*');
    }
    /**
     * Invalidates building-related caches when building data changes.
     * OPTIMIZED: Cascade invalidation for building dependencies.
     * @param buildingId
     */
    static invalidateBuildingCaches(buildingId) {
        // Building-specific caches
        exports.queryCache.invalidate('buildings', `building:${buildingId}*`);
        exports.queryCache.invalidate('residences', `building_residences:${buildingId}*`);
        exports.queryCache.invalidate('documents', `building_documents:${buildingId}*`);
        exports.queryCache.invalidate('financial', `building_budgets:${buildingId}*`);
        exports.queryCache.invalidate('stats', `building_stats:${buildingId}*`);
        // Invalidate aggregated building queries
        exports.queryCache.invalidate('buildings', 'all_buildings');
        exports.queryCache.invalidate('buildings', 'buildings_with_residents*');
        // Cascade invalidation - building changes affect user assignments
        exports.queryCache.invalidate('users', 'all_users_assignments*');
    }
    /**
     * Invalidates residence-related caches when residence data changes.
     * OPTIMIZED: Comprehensive residence cache invalidation.
     * @param residenceId
     */
    static invalidateResidenceCaches(residenceId) {
        // Residence-specific caches
        exports.queryCache.invalidate('residences', `residence:${residenceId}*`);
        exports.queryCache.invalidate('documents', `residence_documents:${residenceId}*`);
        exports.queryCache.invalidate('bills', `residence_bills:${residenceId}*`);
        exports.queryCache.invalidate('maintenance', `residence_maintenance:${residenceId}*`);
        // Invalidate aggregated queries that include this residence
        exports.queryCache.invalidate('residences', 'all_residences');
        exports.queryCache.invalidate('users', 'all_users_assignments*');
    }
    /**
     * Invalidates organization-related caches when organization data changes.
     * OPTIMIZED: New method for organization cache invalidation.
     * @param organizationId
     */
    static invalidateOrganizationCaches(organizationId) {
        // Organization-specific caches
        exports.queryCache.invalidate('organizations', `organization:${organizationId}*`);
        exports.queryCache.invalidate('buildings', `org_buildings:${organizationId}*`);
        exports.queryCache.invalidate('stats', `organization_overview:${organizationId}*`);
        // Invalidate aggregated queries
        exports.queryCache.invalidate('organizations', 'all_organizations');
        exports.queryCache.invalidate('users', 'all_users_assignments*');
    }
    /**
     * Invalidates document-related caches when document data changes.
     * OPTIMIZED: New method for document cache invalidation.
     * @param documentId
     * @param buildingId
     * @param residenceId
     */
    static invalidateDocumentCaches(documentId, buildingId, residenceId) {
        if (documentId) {
            exports.queryCache.invalidate('documents', `document:${documentId}*`);
        }
        if (buildingId) {
            exports.queryCache.invalidate('documents', `building_documents:${buildingId}*`);
        }
        if (residenceId) {
            exports.queryCache.invalidate('documents', `residence_documents:${residenceId}*`);
        }
        // Invalidate general document queries
        exports.queryCache.invalidate('documents', 'documents:*');
    }
    /**
     * Smart invalidation based on operation type.
     * OPTIMIZED: Intelligent cache invalidation based on operation context.
     * @param operation
     * @param entityType
     * @param entityId
     * @param additionalContext
     */
    static smartInvalidate(operation, entityType, entityId, additionalContext) {
        switch (entityType) {
            case 'user':
                this.invalidateUserCaches(entityId);
                break;
            case 'building':
                this.invalidateBuildingCaches(entityId);
                break;
            case 'residence':
                this.invalidateResidenceCaches(entityId);
                // Cascade to building if provided
                if (additionalContext?.buildingId) {
                    this.invalidateBuildingCaches(additionalContext.buildingId);
                }
                break;
            case 'organization':
                this.invalidateOrganizationCaches(entityId);
                break;
            case 'document':
                this.invalidateDocumentCaches(entityId, additionalContext?.buildingId, additionalContext?.residenceId);
                break;
        }
        // For delete operations, be more aggressive with cache clearing
        if (operation === 'delete') {
            // Clear search caches as deleted items should not appear
            exports.queryCache.invalidate('search');
        }
    }
    /**
     * Invalidates all caches (use sparingly).
     */
    static invalidateAll() {
        exports.queryCache.clearAll();
    }
}
exports.CacheInvalidator = CacheInvalidator;
/**
 * Performance monitoring for cache effectiveness.
 */
class CacheMonitor {
    /**
     * Logs cache performance statistics.
     */
    static logPerformanceStats() {
        const stats = exports.queryCache.getStats();
        console.table(stats);
    }
    /**
     * Monitors cache hit rates and suggests optimizations.
     */
    static analyzePerformance() {
        const stats = exports.queryCache.getStats();
        const suggestions = [];
        Object.entries(stats).forEach(([cacheType, stat]) => {
            const hitRate = parseFloat(stat.hitRate.replace('%', ''));
            if (hitRate < 50) {
                suggestions.push(`Low hit rate for ${cacheType} cache (${stat.hitRate}). Consider increasing TTL or cache size.`);
            }
            if (stat.size === stat.maxSize) {
                suggestions.push(`${cacheType} cache is at maximum capacity. Consider increasing max size.`);
            }
        });
        return suggestions;
    }
    /**
     * Gets memory usage summary for all caches.
     */
    static getMemoryUsage() {
        const stats = exports.queryCache.getStats();
        let totalMemory = 0;
        Object.values(stats).forEach((stat) => {
            totalMemory += parseFloat(stat.memoryUsage.replace(' KB', ''));
        });
        return `${totalMemory.toFixed(2)} KB`;
    }
}
exports.CacheMonitor = CacheMonitor;
/**
 * Automatic cache warming for frequently accessed data.
 */
class CacheWarmer {
    /**
     * Warms up caches with frequently accessed data.
     */
    static async warmCaches() {
        try {
            // This would be implemented with actual database calls
            // Example: Pre-load active users, organizations, etc.
        }
        catch (error) {
            console.error('❌ Error warming caches:', error);
        }
    }
}
exports.CacheWarmer = CacheWarmer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,