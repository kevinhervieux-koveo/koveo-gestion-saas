{"file":"/home/runner/workspace/tests/unit/auth/user-deletion.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/auth/user-deletion.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\nimport { registerRoutes } from '../../../server/routes';\nimport { db } from '../../../server/db';\nimport * as schema from '../../../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\n\n/**\n * User Deletion Test Suite\n * \n * Tests complete user deletion functionality including:\n * - Complete record removal (not marking inactive)\n * - Authentication requirements\n * - Admin vs self-deletion permissions\n * - Related data cleanup\n * - Error handling for non-existent users\n */\n\n// Create test app\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('User Deletion', () => {\n  let app: express.Application;\n  let testUser: any;\n  let adminUser: any;\n  let testOrganization: any;\n  let authCookie: string;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean up any existing test data\n    await db.delete(schema.users).where(eq(schema.users.email, 'test-deletion@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'admin-test@example.com'));\n\n    // Create test organization\n    testOrganization = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Test Deletion Org',\n        type: 'syndicate',\n        address: '456 Delete St',\n        city: 'Quebec City',\n        province: 'QC',\n        postalCode: 'G1A 1A1',\n      })\n      .returning();\n\n    // Create admin user for testing admin deletion\n    adminUser = await db\n      .insert(schema.users)\n      .values({\n        username: 'admintest',\n        email: 'admin-test@example.com',\n        firstName: 'Admin',\n        lastName: 'Test',\n        password: await bcrypt.hash('AdminPass123!', 12),\n        role: 'admin',\n      })\n      .returning();\n\n    // Create test user to be deleted\n    testUser = await db\n      .insert(schema.users)\n      .values({\n        username: 'testdeletion',\n        email: 'test-deletion@example.com',\n        firstName: 'Delete',\n        lastName: 'Me',\n        password: await bcrypt.hash('DeletePass123!', 12),\n        role: 'manager',\n      })\n      .returning();\n\n    // Create user-organization relationship\n    await db.insert(schema.userOrganizations).values({\n      userId: testUser[0].id,\n      organizationId: testOrganization[0].id,\n    });\n\n    // Authenticate as admin for admin deletion tests\n    const loginResponse = await request(app)\n      .post('/api/auth/login')\n      .send({\n        email: 'admin-test@example.com',\n        password: 'AdminPass123!',\n      });\n\n    authCookie = loginResponse.headers['set-cookie'][0];\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    if (testUser?.[0]?.id) {\n      await db.delete(schema.userOrganizations).where(eq(schema.userOrganizations.userId, testUser[0].id));\n    }\n    await db.delete(schema.users).where(eq(schema.users.email, 'test-deletion@example.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'admin-test@example.com'));\n    if (testOrganization?.[0]?.id) {\n      await db.delete(schema.organizations).where(eq(schema.organizations.id, testOrganization[0].id));\n    }\n  });\n\n  describe('Admin User Deletion', () => {\n    it('should completely remove user record from database', async () => {\n      const response = await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        message: 'User account deleted successfully',\n        success: true,\n      });\n\n      // Verify user is completely removed from database\n      const deletedUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, testUser[0].id))\n        .limit(1);\n\n      expect(deletedUser).toHaveLength(0);\n    });\n\n    it('should remove user-organization relationships', async () => {\n      await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      // Verify user-organization relationships are removed\n      const userOrgs = await db\n        .select()\n        .from(schema.userOrganizations)\n        .where(eq(schema.userOrganizations.userId, testUser[0].id));\n\n      expect(userOrgs).toHaveLength(0);\n    });\n\n    it('should require authentication for admin deletion', async () => {\n      const response = await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .expect(401);\n\n      expect(response.body).toMatchObject({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    });\n\n    it('should return error for non-existent user deletion', async () => {\n      const response = await request(app)\n        .post('/api/users/non-existent-user-id/delete-account')\n        .set('Cookie', authCookie)\n        .expect(404);\n\n      expect(response.body).toMatchObject({\n        message: 'User not found',\n        code: 'USER_NOT_FOUND',\n      });\n    });\n\n    it('should require valid user ID parameter', async () => {\n      const response = await request(app)\n        .post('/api/users//delete-account')\n        .set('Cookie', authCookie)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        message: 'User ID is required',\n        code: 'MISSING_USER_ID',\n      });\n    });\n  });\n\n  describe('Self Deletion', () => {\n    let userAuthCookie: string;\n\n    beforeEach(async () => {\n      // Login as the test user for self-deletion tests\n      const userLoginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'test-deletion@example.com',\n          password: 'DeletePass123!',\n        });\n\n      userAuthCookie = userLoginResponse.headers['set-cookie'][0];\n    });\n\n    it('should allow user to delete their own account', async () => {\n      const response = await request(app)\n        .post('/api/users/me/delete-account')\n        .set('Cookie', userAuthCookie)\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        message: 'Your account has been deleted successfully',\n        success: true,\n      });\n\n      // Verify user is completely removed\n      const deletedUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, testUser[0].id))\n        .limit(1);\n\n      expect(deletedUser).toHaveLength(0);\n    });\n\n    it('should require authentication for self deletion', async () => {\n      const response = await request(app)\n        .post('/api/users/me/delete-account')\n        .expect(401);\n\n      expect(response.body).toMatchObject({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    });\n\n    it('should clear session after self deletion', async () => {\n      await request(app)\n        .post('/api/users/me/delete-account')\n        .set('Cookie', userAuthCookie)\n        .expect(200);\n\n      // Try to access protected endpoint with same cookie\n      const protectedResponse = await request(app)\n        .get('/api/users/me/organizations')\n        .set('Cookie', userAuthCookie)\n        .expect(401);\n\n      expect(protectedResponse.body).toMatchObject({\n        message: 'Authentication required',\n      });\n    });\n  });\n\n  describe('Data Integrity', () => {\n    it('should maintain referential integrity after user deletion', async () => {\n      // Create some related data\n      const invitation = await db\n        .insert(schema.invitations)\n        .values({\n          email: 'related-invite@example.com',\n          token: 'related-token',\n          tokenHash: 'hash123',\n          role: 'tenant',\n          organizationId: testOrganization[0].id,\n          invitedByUserId: testUser[0].id,\n          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n          status: 'pending',\n        })\n        .returning();\n\n      // Delete the user\n      await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      // Verify related invitation still exists but references are handled properly\n      const relatedInvitation = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.id, invitation[0].id))\n        .limit(1);\n\n      expect(relatedInvitation).toHaveLength(1);\n      expect(relatedInvitation[0].invitedByUserId).toBe(testUser[0].id);\n\n      // Clean up\n      await db.delete(schema.invitations).where(eq(schema.invitations.id, invitation[0].id));\n    });\n  });\n\n  describe('Foreign Key Constraint Handling', () => {\n    let testBuilding: any;\n    let testResidence: any;\n\n    beforeEach(async () => {\n      // Create test building\n      testBuilding = await db\n        .insert(schema.buildings)\n        .values({\n          name: 'Test Building',\n          address: '123 Test St',\n          city: 'Test City',\n          province: 'QC',\n          postalCode: 'H1A 1A1',\n          buildingType: 'apartment',\n          totalUnits: 100,\n          organizationId: testOrganization[0].id,\n        })\n        .returning();\n\n      // Create test residence\n      testResidence = await db\n        .insert(schema.residences)\n        .values({\n          unitNumber: '101',\n          buildingId: testBuilding[0].id,\n        })\n        .returning();\n    });\n\n    afterEach(async () => {\n      // Clean up test data\n      if (testResidence?.[0]?.id) {\n        await db.delete(schema.residences).where(eq(schema.residences.id, testResidence[0].id));\n      }\n      if (testBuilding?.[0]?.id) {\n        await db.delete(schema.buildings).where(eq(schema.buildings.id, testBuilding[0].id));\n      }\n    });\n\n    it('should handle user deletion with demands and demand comments', async () => {\n      // Create a demand submitted by the test user\n      const demand = await db\n        .insert(schema.demands)\n        .values({\n          submitterId: testUser[0].id,\n          type: 'maintenance',\n          description: 'Test demand for deletion',\n          buildingId: testBuilding[0].id,\n          residenceId: testResidence[0].id,\n          status: 'submitted',\n        })\n        .returning();\n\n      // Create a comment on the demand\n      const comment = await db\n        .insert(schema.demandComments)\n        .values({\n          demandId: demand[0].id,\n          commenterId: testUser[0].id,\n          commentText: 'Test comment for deletion',\n          commentType: 'general',\n        })\n        .returning();\n\n      // Verify the demand and comment exist\n      const existingDemand = await db\n        .select()\n        .from(schema.demands)\n        .where(eq(schema.demands.id, demand[0].id))\n        .limit(1);\n      \n      const existingComment = await db\n        .select()\n        .from(schema.demandComments)\n        .where(eq(schema.demandComments.id, comment[0].id))\n        .limit(1);\n\n      expect(existingDemand).toHaveLength(1);\n      expect(existingComment).toHaveLength(1);\n\n      // Delete the user - this should now succeed\n      const response = await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .send({\n          confirmEmail: testUser[0].email,\n          reason: 'Testing foreign key constraint handling',\n        })\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        message: 'User account and all associated data have been permanently deleted',\n        deletedUserId: testUser[0].id,\n        deletedUserEmail: testUser[0].email,\n      });\n\n      // Verify the user is deleted\n      const deletedUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, testUser[0].id))\n        .limit(1);\n\n      expect(deletedUser).toHaveLength(0);\n\n      // Verify the demand and comment are also deleted\n      const deletedDemand = await db\n        .select()\n        .from(schema.demands)\n        .where(eq(schema.demands.id, demand[0].id))\n        .limit(1);\n      \n      const deletedComment = await db\n        .select()\n        .from(schema.demandComments)\n        .where(eq(schema.demandComments.id, comment[0].id))\n        .limit(1);\n\n      expect(deletedDemand).toHaveLength(0);\n      expect(deletedComment).toHaveLength(0);\n    });\n\n    it('should handle user deletion with bugs and feature requests', async () => {\n      // Create a bug submitted by the test user\n      const bug = await db\n        .insert(schema.bugs)\n        .values({\n          createdBy: testUser[0].id,\n          title: 'Test Bug',\n          description: 'Test bug for deletion',\n          category: 'functionality',\n          page: '/test-page',\n          priority: 'medium',\n          status: 'new',\n        })\n        .returning();\n\n      // Create a feature request submitted by the test user\n      const featureRequest = await db\n        .insert(schema.featureRequests)\n        .values({\n          createdBy: testUser[0].id,\n          title: 'Test Feature Request',\n          description: 'Test feature request for deletion',\n          need: 'Testing feature deletion',\n          category: 'dashboard',\n          page: '/test-page',\n          status: 'submitted',\n        })\n        .returning();\n\n      // Create an upvote by the test user\n      const upvote = await db\n        .insert(schema.featureRequestUpvotes)\n        .values({\n          featureRequestId: featureRequest[0].id,\n          userId: testUser[0].id,\n        })\n        .returning();\n\n      // Verify they exist\n      const existingBug = await db\n        .select()\n        .from(schema.bugs)\n        .where(eq(schema.bugs.id, bug[0].id))\n        .limit(1);\n      \n      const existingFeatureRequest = await db\n        .select()\n        .from(schema.featureRequests)\n        .where(eq(schema.featureRequests.id, featureRequest[0].id))\n        .limit(1);\n\n      const existingUpvote = await db\n        .select()\n        .from(schema.featureRequestUpvotes)\n        .where(eq(schema.featureRequestUpvotes.id, upvote[0].id))\n        .limit(1);\n\n      expect(existingBug).toHaveLength(1);\n      expect(existingFeatureRequest).toHaveLength(1);\n      expect(existingUpvote).toHaveLength(1);\n\n      // Delete the user\n      const response = await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .send({\n          confirmEmail: testUser[0].email,\n          reason: 'Testing bug and feature request deletion',\n        })\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        message: 'User account and all associated data have been permanently deleted',\n      });\n\n      // Verify the user is deleted\n      const deletedUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, testUser[0].id))\n        .limit(1);\n\n      expect(deletedUser).toHaveLength(0);\n\n      // Verify the bug, feature request, and upvote are also deleted\n      const deletedBug = await db\n        .select()\n        .from(schema.bugs)\n        .where(eq(schema.bugs.id, bug[0].id))\n        .limit(1);\n      \n      const deletedFeatureRequest = await db\n        .select()\n        .from(schema.featureRequests)\n        .where(eq(schema.featureRequests.id, featureRequest[0].id))\n        .limit(1);\n\n      const deletedUpvote = await db\n        .select()\n        .from(schema.featureRequestUpvotes)\n        .where(eq(schema.featureRequestUpvotes.id, upvote[0].id))\n        .limit(1);\n\n      expect(deletedBug).toHaveLength(0);\n      expect(deletedFeatureRequest).toHaveLength(0);\n      expect(deletedUpvote).toHaveLength(0);\n    });\n\n    it('should reproduce the original error scenario and verify fix', async () => {\n      // This test reproduces the exact scenario from the user's screenshot\n      // Create a demand that would cause the foreign key constraint error\n      const demand = await db\n        .insert(schema.demands)\n        .values({\n          submitterId: testUser[0].id,\n          type: 'complaint',\n          description: 'This demand will test the foreign key constraint fix',\n          buildingId: testBuilding[0].id,\n          status: 'submitted',\n        })\n        .returning();\n\n      // Verify the demand exists and references the user\n      const existingDemand = await db\n        .select()\n        .from(schema.demands)\n        .where(eq(schema.demands.submitterId, testUser[0].id))\n        .limit(1);\n\n      expect(existingDemand).toHaveLength(1);\n      expect(existingDemand[0].submitterId).toBe(testUser[0].id);\n\n      // This deletion should now succeed (previously would fail with foreign key constraint error)\n      const response = await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .send({\n          confirmEmail: testUser[0].email,\n          reason: 'Testing the fix for demands_submitter_id_users_id_fk constraint violation',\n        })\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        message: 'User account and all associated data have been permanently deleted',\n        deletedUserId: testUser[0].id,\n        deletedUserEmail: testUser[0].email,\n      });\n\n      // Verify the demand is also deleted (no orphaned records)\n      const deletedDemand = await db\n        .select()\n        .from(schema.demands)\n        .where(eq(schema.demands.id, demand[0].id))\n        .limit(1);\n\n      expect(deletedDemand).toHaveLength(0);\n\n      // Verify the user is completely removed\n      const deletedUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, testUser[0].id))\n        .limit(1);\n\n      expect(deletedUser).toHaveLength(0);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle deletion of user with no organization assignments', async () => {\n      // Remove organization assignments\n      await db\n        .delete(schema.userOrganizations)\n        .where(eq(schema.userOrganizations.userId, testUser[0].id));\n\n      const response = await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n\n      // Verify user is deleted\n      const deletedUser = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.id, testUser[0].id))\n        .limit(1);\n\n      expect(deletedUser).toHaveLength(0);\n    });\n\n    it('should prevent deletion of the last admin user', async () => {\n      // Make test user the only admin\n      await db\n        .update(schema.users)\n        .set({ role: 'admin' })\n        .where(eq(schema.users.id, testUser[0].id));\n\n      // Delete the current admin user\n      await db.delete(schema.users).where(eq(schema.users.id, adminUser[0].id));\n\n      const response = await request(app)\n        .post(`/api/users/${testUser[0].id}/delete-account`)\n        .set('Cookie', authCookie)\n        .expect(403);\n\n      expect(response.body).toMatchObject({\n        message: 'Cannot delete the last admin user',\n        code: 'CANNOT_DELETE_LAST_ADMIN',\n      });\n    });\n  });\n});"],"version":3}