d5e863326bf1462ac5fc7b4ea5740270
"use strict";
/**
 * Fast in-memory database mock for unit tests
 * Provides instant responses without network calls
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockSql = exports.mockSchemaObject = exports.mockDb = exports.createMockDatabase = void 0;
const createMockDatabase = () => {
    const mockData = new Map();
    return {
        // Mock query function that returns immediately
        query: jest.fn().mockImplementation(async (sql) => {
            // Return empty results for test queries
            if (sql.includes('SELECT version()')) {
                return [{ version: 'PostgreSQL 15.0 (Mock)' }];
            }
            return [];
        }),
        // Mock insert operations - proper Drizzle ORM structure
        insert: jest.fn().mockImplementation((table) => {
            const insertChain = {
                values: jest.fn().mockImplementation(async (data) => {
                    const id = Math.random().toString(36).substr(2, 9);
                    const result = Array.isArray(data)
                        ? data.map(item => ({ ...item, id: Math.random().toString(36).substr(2, 9) }))
                        : [{ ...data, id }];
                    mockData.set(id, data);
                    return result;
                }),
                returning: jest.fn().mockImplementation(async () => {
                    const id = Math.random().toString(36).substr(2, 9);
                    return [{ id }];
                })
            };
            // Create chainable methods that return properly structured objects
            const createValuesChain = (data) => {
                const id = Math.random().toString(36).substr(2, 9);
                const result = Array.isArray(data)
                    ? data.map(item => ({ ...item, id: Math.random().toString(36).substr(2, 9) }))
                    : [{ ...data, id }];
                mockData.set(id, data);
                return {
                    returning: jest.fn().mockImplementation(async () => result)
                };
            };
            insertChain.values = jest.fn().mockImplementation((data) => createValuesChain(data));
            insertChain.returning = jest.fn().mockImplementation(() => insertChain);
            return insertChain;
        }),
        // Mock select operations
        select: jest.fn().mockImplementation(() => ({
            from: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockImplementation(() => ({
                    limit: jest.fn().mockImplementation(async () => []),
                    orderBy: jest.fn().mockImplementation(async () => []),
                })),
                leftJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockImplementation(() => ({
                        limit: jest.fn().mockImplementation(async () => []),
                    })),
                })),
                innerJoin: jest.fn().mockImplementation(() => ({
                    where: jest.fn().mockImplementation(() => ({
                        limit: jest.fn().mockImplementation(async () => []),
                    })),
                })),
                limit: jest.fn().mockImplementation(async () => []),
                orderBy: jest.fn().mockImplementation(async () => []),
            })),
        })),
        // Mock delete operations - proper Drizzle ORM structure
        delete: jest.fn().mockImplementation((table) => ({
            where: jest.fn().mockImplementation(async () => {
                return Promise.resolve({ affectedRows: 0 });
            }),
        })),
        // Mock update operations
        update: jest.fn().mockImplementation((table) => ({
            set: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockImplementation(async () => {
                    return Promise.resolve({ affectedRows: 0 });
                }),
            })),
        })),
    };
};
exports.createMockDatabase = createMockDatabase;
// Global mock instance
// Create the complete mock database with all Drizzle operations
exports.mockDb = (0, exports.createMockDatabase)();
// Mock all the individual schema tables that tests import
exports.mockSchemaObject = {
    // Core tables
    users: { where: jest.fn() },
    organizations: { where: jest.fn() },
    userOrganizations: { where: jest.fn() },
    invitations: { where: jest.fn() },
    passwordResetTokens: { where: jest.fn() },
    // Property tables  
    buildings: { where: jest.fn() },
    residences: { where: jest.fn() },
    userResidences: { where: jest.fn() },
    // Document and financial tables
    documents: { where: jest.fn() },
    bills: { where: jest.fn() },
    budgets: { where: jest.fn() },
    monthlyBudgets: { where: jest.fn() },
    // Operations tables
    maintenanceRequests: { where: jest.fn() },
    commonSpaces: { where: jest.fn() },
    // System tables
    permissions: { where: jest.fn() },
    userPermissions: { where: jest.fn() },
    rolePermissions: { where: jest.fn() },
    demands: { where: jest.fn() }
};
// Mock SQL template function
exports.mockSql = jest.fn().mockImplementation(async (strings, ...values) => {
    const query = strings.join('?');
    if (query.includes('SELECT version()')) {
        return [{ version: 'PostgreSQL 15.0 (Mock)' }];
    }
    return [];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,