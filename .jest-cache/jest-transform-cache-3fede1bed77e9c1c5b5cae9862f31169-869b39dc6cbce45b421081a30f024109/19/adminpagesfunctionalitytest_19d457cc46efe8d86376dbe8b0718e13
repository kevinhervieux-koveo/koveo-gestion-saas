b71a647963f601cbc008d3dab010463d
"use strict";
/**
 * Integration Tests for Admin Pages Functionality
 *
 * Tests cover the fixes made to:
 * - /admin/roadmap page (feature-management.ts syntax errors)
 * - /admin/compliance page (law25-compliance.ts syntax errors)
 * - /admin/quality page (quality-metrics authentication issues)
 * - /admin/permissions page (overly restrictive authorization middleware)
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const express_session_1 = __importDefault(require("express-session"));
const routes_1 = require("../../server/routes");
const storage_1 = require("../../server/storage");
const test_utils_1 = require("../utils/test-utils");
// Mock storage
const mockStorage = new storage_1.MemStorage();
// Create test Express app
const createTestApp = () => {
    const app = (0, express_1.default)();
    // Setup middleware
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Session middleware for authentication
    app.use((0, express_session_1.default)({
        secret: 'test-secret',
        resave: false,
        saveUninitialized: false,
        cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 },
    }));
    // Register API routes
    (0, routes_1.registerApiRoutes)(app);
    return app;
};
(0, globals_1.describe)('Admin Pages Functionality', () => {
    let app;
    let adminUser;
    let regularUser;
    let adminAgent;
    let userAgent;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Create test users
        adminUser = await (0, test_utils_1.createTestUser)({
            email: 'admin@test.com',
            role: 'admin',
            firstName: 'Admin',
            lastName: 'User'
        });
        regularUser = await (0, test_utils_1.createTestUser)({
            email: 'user@test.com',
            role: 'resident',
            firstName: 'Regular',
            lastName: 'User'
        });
        // Create authenticated agents
        adminAgent = supertest_1.default.agent(app);
        userAgent = supertest_1.default.agent(app);
        // Login as admin
        await adminAgent
            .post('/api/auth/login')
            .send({
            email: 'admin@test.com',
            password: 'password123'
        });
        // Login as regular user
        await userAgent
            .post('/api/auth/login')
            .send({
            email: 'user@test.com',
            password: 'password123'
        });
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Admin Roadmap Page (/admin/roadmap)', () => {
        (0, globals_1.it)('should successfully load roadmap data for admin users', async () => {
            const response = await adminAgent
                .get('/api/feature-management/features')
                .expect(200);
            (0, globals_1.expect)(response.body).toBeDefined();
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
        });
        (0, globals_1.it)('should deny access to non-admin users', async () => {
            await userAgent
                .get('/api/feature-management/features')
                .expect(403);
        });
        (0, globals_1.it)('should handle feature creation without syntax errors', async () => {
            const newFeature = {
                title: 'Test Feature',
                description: 'Test Description',
                category: 'enhancement',
                priority: 'medium',
                estimatedEffort: 5,
                targetQuarter: 'Q1 2025',
                status: 'planned'
            };
            const response = await adminAgent
                .post('/api/feature-management/features')
                .send(newFeature)
                .expect(201);
            (0, globals_1.expect)(response.body.title).toBe(newFeature.title);
            (0, globals_1.expect)(response.body.status).toBe('planned');
        });
        (0, globals_1.it)('should handle feature updates without errors', async () => {
            // First create a feature
            const createResponse = await adminAgent
                .post('/api/feature-management/features')
                .send({
                title: 'Update Test',
                description: 'Test Description',
                category: 'enhancement',
                priority: 'medium',
                estimatedEffort: 3,
                targetQuarter: 'Q2 2025',
                status: 'planned'
            });
            const featureId = createResponse.body.id;
            // Then update it
            const updateResponse = await adminAgent
                .patch(`/api/feature-management/features/${featureId}`)
                .send({
                status: 'in_progress',
                priority: 'high'
            })
                .expect(200);
            (0, globals_1.expect)(updateResponse.body.status).toBe('in_progress');
            (0, globals_1.expect)(updateResponse.body.priority).toBe('high');
        });
    });
    (0, globals_1.describe)('Admin Compliance Page (/admin/compliance)', () => {
        (0, globals_1.it)('should successfully load compliance data for admin users', async () => {
            const response = await adminAgent
                .get('/api/law25-compliance')
                .expect(200);
            (0, globals_1.expect)(response.body).toBeDefined();
            (0, globals_1.expect)(response.body.overallStatus).toBeDefined();
        });
        (0, globals_1.it)('should deny access to non-admin users', async () => {
            await userAgent
                .get('/api/law25-compliance')
                .expect(403);
        });
        (0, globals_1.it)('should return proper compliance status structure', async () => {
            const response = await adminAgent
                .get('/api/law25-compliance')
                .expect(200);
            (0, globals_1.expect)(response.body).toHaveProperty('overallStatus');
            (0, globals_1.expect)(response.body).toHaveProperty('categories');
            (0, globals_1.expect)(response.body).toHaveProperty('recommendations');
            (0, globals_1.expect)(typeof response.body.overallStatus).toBe('string');
            (0, globals_1.expect)(Array.isArray(response.body.categories)).toBe(true);
        });
        (0, globals_1.it)('should handle compliance audit requests without syntax errors', async () => {
            const response = await adminAgent
                .post('/api/law25-compliance/audit')
                .send({
                auditType: 'full',
                includeSensitiveData: true
            })
                .expect(200);
            (0, globals_1.expect)(response.body.auditId).toBeDefined();
            (0, globals_1.expect)(response.body.status).toBe('initiated');
        });
    });
    (0, globals_1.describe)('Admin Quality Page (/admin/quality)', () => {
        (0, globals_1.it)('should successfully load quality metrics for authenticated admin users', async () => {
            const response = await adminAgent
                .get('/api/quality-metrics')
                .expect(200);
            (0, globals_1.expect)(response.body).toBeDefined();
            (0, globals_1.expect)(response.body.metrics).toBeDefined();
        });
        (0, globals_1.it)('should deny access to unauthenticated users', async () => {
            await (0, supertest_1.default)(app)
                .get('/api/quality-metrics')
                .expect(401);
        });
        (0, globals_1.it)('should deny access to non-admin users', async () => {
            await userAgent
                .get('/api/quality-metrics')
                .expect(403);
        });
        (0, globals_1.it)('should return properly structured quality metrics', async () => {
            const response = await adminAgent
                .get('/api/quality-metrics')
                .expect(200);
            (0, globals_1.expect)(response.body.metrics).toBeDefined();
            (0, globals_1.expect)(response.body.metrics.overall).toBeDefined();
            (0, globals_1.expect)(response.body.metrics.categories).toBeDefined();
            (0, globals_1.expect)(Array.isArray(response.body.metrics.categories)).toBe(true);
        });
        (0, globals_1.it)('should handle quality metric updates without authentication issues', async () => {
            const updateData = {
                category: 'performance',
                metric: 'response_time',
                value: 250,
                threshold: 300
            };
            const response = await adminAgent
                .post('/api/quality-metrics/update')
                .send(updateData)
                .expect(200);
            (0, globals_1.expect)(response.body.success).toBe(true);
        });
    });
    (0, globals_1.describe)('Admin Permissions Page (/admin/permissions)', () => {
        (0, globals_1.it)('should successfully load permissions data for admin users', async () => {
            const response = await adminAgent
                .get('/api/permissions')
                .expect(200);
            (0, globals_1.expect)(response.body).toBeDefined();
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
        });
        (0, globals_1.it)('should allow admin access without overly restrictive middleware', async () => {
            // This test ensures the authorization middleware fix
            const response = await adminAgent
                .get('/api/permissions')
                .expect(200);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.body).toBeDefined();
        });
        (0, globals_1.it)('should still deny access to non-admin users', async () => {
            await userAgent
                .get('/api/permissions')
                .expect(403);
        });
        (0, globals_1.it)('should handle permission updates for admin users', async () => {
            const permissionUpdate = {
                userId: regularUser.id,
                permissions: ['read_documents', 'create_demands'],
                role: 'resident'
            };
            const response = await adminAgent
                .patch('/api/permissions/user')
                .send(permissionUpdate)
                .expect(200);
            (0, globals_1.expect)(response.body.success).toBe(true);
        });
        (0, globals_1.it)('should handle role-based permission queries', async () => {
            const response = await adminAgent
                .get('/api/permissions?role=manager')
                .expect(200);
            (0, globals_1.expect)(Array.isArray(response.body)).toBe(true);
        });
    });
    (0, globals_1.describe)('Cross-Page Error Handling', () => {
        (0, globals_1.it)('should handle malformed requests gracefully across all admin endpoints', async () => {
            const endpoints = [
                '/api/feature-management/features',
                '/api/law25-compliance',
                '/api/quality-metrics',
                '/api/permissions'
            ];
            for (const endpoint of endpoints) {
                const response = await adminAgent
                    .post(endpoint)
                    .send({ malformed: 'data', invalid: true })
                    .expect(400);
                (0, globals_1.expect)(response.body.error).toBeDefined();
            }
        });
        (0, globals_1.it)('should return consistent error formats across admin pages', async () => {
            const response = await userAgent
                .get('/api/feature-management/features')
                .expect(403);
            (0, globals_1.expect)(response.body).toHaveProperty('error');
            (0, globals_1.expect)(response.body).toHaveProperty('message');
            (0, globals_1.expect)(response.body.error).toBe('Forbidden');
        });
    });
    (0, globals_1.describe)('Admin Page Authentication Flow', () => {
        (0, globals_1.it)('should require authentication for all admin endpoints', async () => {
            const endpoints = [
                '/api/feature-management/features',
                '/api/law25-compliance',
                '/api/quality-metrics',
                '/api/permissions'
            ];
            for (const endpoint of endpoints) {
                await (0, supertest_1.default)(app)
                    .get(endpoint)
                    .expect(401);
            }
        });
        (0, globals_1.it)('should maintain session across admin page requests', async () => {
            // Make multiple requests to ensure session persistence
            await adminAgent
                .get('/api/feature-management/features')
                .expect(200);
            await adminAgent
                .get('/api/law25-compliance')
                .expect(200);
            await adminAgent
                .get('/api/quality-metrics')
                .expect(200);
            await adminAgent
                .get('/api/permissions')
                .expect(200);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,