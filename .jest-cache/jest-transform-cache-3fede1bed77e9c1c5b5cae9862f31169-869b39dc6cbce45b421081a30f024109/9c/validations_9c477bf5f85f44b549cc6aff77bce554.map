{"file":"/home/runner/workspace/client/src/lib/validations.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/lib/validations.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Common enum definitions\nexport const USER_ROLES = ['admin', 'manager', 'tenant', 'resident'] as const;\nexport const DEMAND_TYPES = ['maintenance', 'complaint', 'information', 'other'] as const;\nexport const DEMAND_STATUSES = [\n  'submitted',\n  'under_review',\n  'approved',\n  'rejected',\n  'in_progress',\n  'completed',\n  'cancelled',\n] as const;\nexport const BILL_STATUSES = ['draft', 'sent', 'overdue', 'paid', 'cancelled'] as const;\nexport const PAYMENT_TYPES = ['unique', 'recurrent'] as const;\nexport const SCHEDULE_TYPES = ['weekly', 'monthly', 'quarterly', 'yearly'] as const;\nexport const BUILDING_TYPES = [\n  'condo',\n  'apartment',\n  'townhouse',\n  'commercial',\n  'mixed_use',\n  'other',\n] as const;\n\nexport const BILL_CATEGORIES = [\n  'insurance',\n  'maintenance',\n  'salary',\n  'utilities',\n  'cleaning',\n  'security',\n  'landscaping',\n  'professional_services',\n  'administration',\n  'repairs',\n  'supplies',\n  'taxes',\n  'technology',\n  'reserves',\n  'other',\n] as const;\n\nexport const BUILDING_DOCUMENT_TYPES = [\n  'bylaw',\n  'financial',\n  'maintenance',\n  'legal',\n  'meeting_minutes',\n  'insurance',\n  'contracts',\n  'permits',\n  'inspection',\n  'other',\n] as const;\n\nexport const RESIDENCE_DOCUMENT_TYPES = [\n  'lease',\n  'inspection',\n  'maintenance',\n  'legal',\n  'insurance',\n  'financial',\n  'communication',\n  'photos',\n  'other',\n] as const;\n\n// Common validation schemas\nexport const commonFields = {\n  // Required string fields\n  requiredString: (fieldName: string, maxLength?: number) =>\n    maxLength\n      ? z.string().min(1, `${fieldName} is required`).max(maxLength, `${fieldName} is too long`)\n      : z.string().min(1, `${fieldName} is required`),\n\n  // Optional string fields\n  optionalString: (maxLength?: number) =>\n    maxLength ? z.string().max(maxLength, 'Text is too long').optional() : z.string().optional(),\n\n  // Required ID fields\n  requiredId: (fieldName: string) => z.string().min(1, `${fieldName} is required`),\n\n  // Email validation\n  email: z.string().email('Invalid email address'),\n\n  // Description with minimum length\n  description: (minLength = 10) =>\n    z.string().min(minLength, `Description must be at least ${minLength} characters`),\n\n  // Amount/Price validation\n  amount: z.string().min(1, 'Amount is required'),\n\n  // Date validation\n  date: (fieldName: string) =>\n    z\n      .string()\n      .min(1, `${fieldName} is required`)\n      .refine(\n        (dateStr) => {\n          const date = new Date(dateStr);\n          return !isNaN(date.getTime());\n        },\n        {\n          message: `Valid ${fieldName.toLowerCase()} is required`,\n        }\n      ),\n\n  // Optional date validation\n  optionalDate: z.string().optional(),\n\n  // Boolean with default\n  booleanWithDefault: (defaultValue: boolean) => z.boolean().default(defaultValue),\n};\n\n// Enum validation schemas\nexport const enumFields = {\n  userRole: z.enum(USER_ROLES),\n  demandType: z.enum(DEMAND_TYPES),\n  demandStatus: z.enum(DEMAND_STATUSES),\n  billStatus: z.enum(BILL_STATUSES),\n  billCategory: z.enum(BILL_CATEGORIES),\n  paymentType: z.enum(PAYMENT_TYPES),\n  scheduleType: z.enum(SCHEDULE_TYPES).optional(),\n  buildingType: z.enum(BUILDING_TYPES),\n  buildingDocumentType: z.enum(BUILDING_DOCUMENT_TYPES),\n  residenceDocumentType: z.enum(RESIDENCE_DOCUMENT_TYPES),\n};\n\n// Complex field combinations\n// First define basic composites that don't depend on others\nconst addressFields = {\n  address: commonFields.requiredString('Address', 500),\n  city: commonFields.requiredString('City', 100),\n  province: commonFields.requiredString('Province', 100),\n  postalCode: commonFields.requiredString('Postal code', 20),\n};\n\nconst personNameFields = {\n  firstName: commonFields.requiredString('First name', 100),\n  lastName: commonFields.requiredString('Last name', 100),\n};\n\nexport const compositeFields = {\n  // Standard name fields\n  personName: personNameFields,\n\n  // Standard address fields\n  address: addressFields,\n\n  // Organization fields\n  organizationBase: {\n    name: commonFields.requiredString('Organization name', 200),\n    type: commonFields.requiredString('Organization type'),\n    ...addressFields,\n  },\n\n  // Building base fields\n  buildingBase: {\n    name: commonFields.requiredString('Building name', 255),\n    ...addressFields,\n    buildingType: enumFields.buildingType,\n    organizationId: commonFields.requiredId('Organization'),\n  },\n\n  // Document base fields\n  documentBase: {\n    name: commonFields.requiredString('Name', 255),\n    dateReference: commonFields.date('Reference date'),\n    isVisibleToTenants: commonFields.booleanWithDefault(true),\n  },\n\n  // Bill base fields\n  billBase: {\n    title: commonFields.requiredString('Title'),\n    description: commonFields.optionalString(),\n    category: enumFields.billCategory,\n    vendor: commonFields.optionalString(),\n    paymentType: enumFields.paymentType,\n    schedulePayment: enumFields.scheduleType,\n    totalAmount: commonFields.amount,\n    startDate: commonFields.date('Start date'),\n    endDate: commonFields.optionalDate,\n    status: enumFields.billStatus,\n    notes: commonFields.optionalString(),\n  },\n\n  // Demand base fields\n  demandBase: {\n    type: enumFields.demandType,\n    description: commonFields.description(10),\n    buildingId: commonFields.requiredId('Building'),\n    residenceId: commonFields.optionalString(),\n    assignationBuildingId: commonFields.optionalString(),\n    assignationResidenceId: commonFields.optionalString(),\n  },\n};\n\n// Pre-built schemas for common entities\nexport const schemas = {\n  // User schemas\n  userCreate: z.object({\n    ...compositeFields.personName,\n    email: commonFields.email,\n    role: enumFields.userRole,\n  }),\n\n  // Building document schema\n  buildingDocument: z.object({\n    ...compositeFields.documentBase,\n    type: enumFields.buildingDocumentType,\n    buildingId: commonFields.requiredId('Building'),\n  }),\n\n  // Residence document schema\n  residenceDocument: z.object({\n    ...compositeFields.documentBase,\n    type: enumFields.residenceDocumentType,\n    residenceId: commonFields.requiredId('Residence'),\n  }),\n\n  // Bill schema\n  bill: z.object(compositeFields.billBase),\n\n  // Demand schema\n  demand: z.object(compositeFields.demandBase),\n\n  // Demand review schema (for managers)\n  demandReview: z.object({\n    status: z.enum(['approved', 'rejected', 'under_review', 'in_progress', 'completed']),\n    reviewNotes: commonFields.optionalString(),\n    assignationBuildingId: commonFields.optionalString(),\n    assignationResidenceId: commonFields.optionalString(),\n  }),\n};\n\n// Utility functions for validation\nexport const validationHelpers = {\n  // Create form schema with common fields\n  createFormSchema: <T extends Record<string, z.ZodTypeAny>>(fields: T) => z.object(fields),\n\n  // Extend existing schema with additional fields\n  extendSchema: <T extends z.ZodRawShape, U extends z.ZodRawShape>(\n    baseSchema: z.ZodObject<T>,\n    extensions: U\n  ) => baseSchema.extend(extensions),\n\n  // Create optional version of schema\n  makeOptional: <T extends z.ZodRawShape>(schema: z.ZodObject<T>) => schema.partial(),\n\n  // Create pick schema with selected fields\n  pickFields: <T extends z.ZodRawShape, K extends keyof T>(schema: z.ZodObject<T>, keys: K[]) =>\n    schema.pick(Object.fromEntries(keys.map((k) => [k, true])) as any),\n\n  // Validate enum value\n  isValidEnum: <T extends readonly string[]>(enumArray: T, value: string): value is T[number] =>\n    enumArray.includes(value as T[number]),\n};\n\n// Type inference helpers\n/**\n *\n */\nexport type UserRole = z.infer<typeof enumFields.userRole>;\n/**\n *\n */\nexport type DemandType = z.infer<typeof enumFields.demandType>;\n/**\n *\n */\nexport type DemandStatus = z.infer<typeof enumFields.demandStatus>;\n/**\n *\n */\nexport type BillStatus = z.infer<typeof enumFields.billStatus>;\n/**\n *\n */\nexport type BillCategory = z.infer<typeof enumFields.billCategory>;\n/**\n *\n */\nexport type PaymentType = z.infer<typeof enumFields.paymentType>;\n/**\n *\n */\nexport type ScheduleType = z.infer<typeof enumFields.scheduleType>;\n/**\n *\n */\nexport type BuildingType = z.infer<typeof enumFields.buildingType>;\n/**\n *\n */\nexport type BuildingDocumentType = z.infer<typeof enumFields.buildingDocumentType>;\n/**\n *\n */\nexport type ResidenceDocumentType = z.infer<typeof enumFields.residenceDocumentType>;\n\n// Schema type exports\n/**\n *\n */\nexport type UserCreateSchema = z.infer<typeof schemas.userCreate>;\n/**\n *\n */\nexport type BuildingDocumentSchema = z.infer<typeof schemas.buildingDocument>;\n/**\n *\n */\nexport type ResidenceDocumentSchema = z.infer<typeof schemas.residenceDocument>;\n/**\n *\n */\nexport type BillSchema = z.infer<typeof schemas.bill>;\n/**\n *\n */\nexport type DemandSchema = z.infer<typeof schemas.demand>;\n/**\n *\n */\nexport type DemandReviewSchema = z.infer<typeof schemas.demandReview>;\n\nexport default {\n  commonFields,\n  enumFields,\n  compositeFields,\n  schemas,\n  validationHelpers,\n};\n"],"version":3}