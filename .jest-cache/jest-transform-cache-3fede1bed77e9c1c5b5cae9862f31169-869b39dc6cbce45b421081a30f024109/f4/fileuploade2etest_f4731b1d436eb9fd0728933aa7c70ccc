acbd66e5b257a5f9258e37a5f76b1ac1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * File Upload End-to-End Test Suite
 *
 * Complete end-to-end testing of file upload workflows across all forms.
 * This test suite simulates real user interactions with file uploads:
 * 1. Full form submission workflows with files
 * 2. User interface feedback during upload
 * 3. File viewing and downloading after upload
 * 4. Error handling and user notifications
 * 5. Cross-browser compatibility scenarios
 * 6. Mobile device file selection
 */
/// <reference path="../types/jest-dom.d.ts" />
const globals_1 = require("@jest/globals");
globals_1.jest.mock('@/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({ toast: mockToast }),
}));
globals_1.jest.mock('@/hooks/use-auth', () => ({
    useAuth: () => ({
        user: {
            id: '123e4567-e89b-12d3-a456-426614174000',
            email: 'test@koveo.com',
            role: 'admin',
        },
        login: globals_1.jest.fn(),
        logout: globals_1.jest.fn(),
    }),
}));
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_query_1 = require("@tanstack/react-query");
const react_2 = __importDefault(require("react"));
// Test utilities and setup
const createTestQueryClient = () => {
    return new react_query_1.QueryClient({
        defaultOptions: {
            queries: { retry: false },
            mutations: { retry: false },
        },
    });
};
const TestWrapper = ({ children }) => {
    const queryClient = createTestQueryClient();
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: children }));
};
// Mock functions
const mockApiRequest = globals_1.jest.fn();
const mockFetch = globals_1.jest.fn();
const mockToast = globals_1.jest.fn();
global.fetch = mockFetch;
// File creation utilities
const createMockFile = (name, size, type, content) => {
    const file = new File([content || 'mock content'], name, { type });
    Object.defineProperty(file, 'size', { value: size });
    return file;
};
(0, globals_1.describe)('File Upload End-to-End Workflows', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ id: 'test-id', success: true });
        mockFetch.mockResolvedValue({
            ok: true,
            json: async () => ({ id: 'test-id', success: true }),
        });
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.resetAllMocks();
    });
    (0, globals_1.describe)('Complete Bug Report Workflow with Files', () => {
        (0, globals_1.it)('should complete full bug report submission with multiple attachments', async () => {
            const BugReportPage = require('../../client/src/pages/settings/bug-reports.tsx').default;
            // Mock successful responses
            mockFetch
                .mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    id: 'bug-123',
                    title: 'Complete Bug Report',
                    attachmentCount: 3,
                    attachments: [
                        { id: 'att-1', name: 'screenshot.png', size: 50000 },
                        { id: 'att-2', name: 'error-log.txt', size: 2000 },
                        { id: 'att-3', name: 'config.json', size: 1500 }
                    ]
                })
            })
                .mockResolvedValueOnce({
                ok: true,
                json: async () => ([
                    {
                        id: 'bug-123',
                        title: 'Complete Bug Report',
                        attachmentCount: 3,
                        attachments: [
                            { id: 'att-1', name: 'screenshot.png', size: 50000 },
                            { id: 'att-2', name: 'error-log.txt', size: 2000 },
                            { id: 'att-3', name: 'config.json', size: 1500 }
                        ]
                    }
                ])
            });
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportPage, {}) }));
            // Step 1: Open bug report form
            const reportButton = await react_1.screen.findByTestId('button-report-bug');
            await user.click(reportButton);
            // Step 2: Fill in required form fields
            const titleInput = react_1.screen.getByLabelText(/title/i);
            const descriptionTextarea = react_1.screen.getByLabelText(/description/i);
            const pageInput = react_1.screen.getByLabelText(/page/i);
            await user.type(titleInput, 'Complete Bug Report');
            await user.type(descriptionTextarea, 'This is a comprehensive bug report with multiple file attachments including screenshots, logs, and configuration files.');
            await user.type(pageInput, 'Settings Page');
            // Step 3: Select category and priority
            const categorySelect = react_1.screen.getByLabelText(/category/i);
            const prioritySelect = react_1.screen.getByLabelText(/priority/i);
            await user.selectOptions(categorySelect, 'functionality');
            await user.selectOptions(prioritySelect, 'high');
            // Step 4: Add reproduction steps
            const stepsTextarea = react_1.screen.getByLabelText(/steps to reproduce/i);
            await user.type(stepsTextarea, 'Step 1: Navigate to Settings\nStep 2: Click on Advanced Options\nStep 3: Observe the error');
            // Step 5: Attach multiple files
            const fileInput = react_1.screen.getByRole('button', { name: /attach files/i });
            await user.click(fileInput);
            const hiddenFileInput = react_1.screen.getByRole('input', { type: 'file', hidden: true });
            const mockFiles = [
                createMockFile('screenshot.png', 50000, 'image/png'),
                createMockFile('error-log.txt', 2000, 'text/plain'),
                createMockFile('config.json', 1500, 'application/json')
            ];
            Object.defineProperty(hiddenFileInput, 'files', {
                value: mockFiles,
                writable: false,
            });
            react_1.fireEvent.change(hiddenFileInput, { target: { files: mockFiles } });
            // Step 6: Verify files are displayed
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('screenshot.png')).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByText('error-log.txt')).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByText('config.json')).toBeInTheDocument();
            });
            // Step 7: Submit the form
            const submitButton = react_1.screen.getByRole('button', { name: /submit bug report/i });
            await user.click(submitButton);
            // Step 8: Verify submission with multipart form data
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/bugs', globals_1.expect.objectContaining({
                    method: 'POST',
                    body: globals_1.expect.any(FormData),
                    credentials: 'include',
                }));
            });
            // Step 9: Verify success notification
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockToast).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                    title: 'Bug created',
                    description: globals_1.expect.stringContaining('successfully'),
                }));
            });
            // Step 10: Verify bug appears in list with attachment count
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Complete Bug Report')).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByText('3 files')).toBeInTheDocument();
            });
        });
        (0, globals_1.it)('should handle upload progress feedback', async () => {
            const BugReportPage = require('../../client/src/pages/settings/bug-reports.tsx').default;
            // Mock XMLHttpRequest for progress tracking
            const mockXHR = {
                upload: {
                    addEventListener: globals_1.jest.fn((event, callback) => {
                        if (event === 'progress') {
                            setTimeout(() => callback({ loaded: 25, total: 100 }), 50);
                            setTimeout(() => callback({ loaded: 50, total: 100 }), 100);
                            setTimeout(() => callback({ loaded: 75, total: 100 }), 150);
                            setTimeout(() => callback({ loaded: 100, total: 100 }), 200);
                        }
                    }),
                },
                addEventListener: globals_1.jest.fn((event, callback) => {
                    if (event === 'load') {
                        setTimeout(() => callback({ target: { response: '{"success": true}' } }), 250);
                    }
                }),
                open: globals_1.jest.fn(),
                send: globals_1.jest.fn(),
                setRequestHeader: globals_1.jest.fn(),
                readyState: 4,
                status: 200,
            };
            global.XMLHttpRequest = globals_1.jest.fn(() => mockXHR);
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportPage, {}) }));
            const reportButton = await react_1.screen.findByTestId('button-report-bug');
            await user.click(reportButton);
            // Fill minimum required fields
            await user.type(react_1.screen.getByLabelText(/title/i), 'Bug with Progress');
            await user.type(react_1.screen.getByLabelText(/description/i), 'Testing upload progress feedback.');
            await user.type(react_1.screen.getByLabelText(/page/i), 'Test Page');
            // Attach a large file
            const fileInput = react_1.screen.getByRole('button', { name: /attach files/i });
            await user.click(fileInput);
            const hiddenFileInput = react_1.screen.getByRole('input', { type: 'file', hidden: true });
            const largeFile = createMockFile('large-image.png', 10 * 1024 * 1024, 'image/png'); // 10MB
            Object.defineProperty(hiddenFileInput, 'files', {
                value: [largeFile],
                writable: false,
            });
            react_1.fireEvent.change(hiddenFileInput, { target: { files: [largeFile] } });
            const submitButton = react_1.screen.getByRole('button', { name: /submit bug report/i });
            await user.click(submitButton);
            // Verify progress indicators appear
            await (0, react_1.waitFor)(() => {
                const progressIndicators = react_1.screen.queryAllByText(/uploading|progress|\d+%/i);
                (0, globals_1.expect)(progressIndicators.length).toBeGreaterThan(0);
            }, { timeout: 3000 });
        });
    });
    (0, globals_1.describe)('Feature Request with Design Files Workflow', () => {
        (0, globals_1.it)('should handle feature request with design mockups and documentation', async () => {
            const IdeaBoxPage = require('../../client/src/pages/settings/idea-box.tsx').default;
            mockFetch.mockResolvedValue({
                ok: true,
                json: async () => ({
                    id: 'feature-456',
                    title: 'UI Redesign Feature',
                    attachmentCount: 2
                })
            });
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(IdeaBoxPage, {}) }));
            // Open feature request form
            const requestButton = await react_1.screen.findByRole('button', { name: /request feature|suggest idea/i });
            await user.click(requestButton);
            // Fill form fields
            await user.type(react_1.screen.getByLabelText(/title/i), 'UI Redesign Feature');
            await user.type(react_1.screen.getByLabelText(/description/i), 'Complete UI overhaul with modern design patterns and improved user experience.');
            // Select category
            const categorySelect = react_1.screen.getByLabelText(/category/i);
            await user.selectOptions(categorySelect, 'ui_ux');
            // Attach design files
            const fileInput = react_1.screen.getByRole('button', { name: /attach files/i });
            await user.click(fileInput);
            const hiddenInput = react_1.screen.getByRole('input', { type: 'file', hidden: true });
            const designFiles = [
                createMockFile('mockup.png', 75000, 'image/png'),
                createMockFile('requirements.pdf', 120000, 'application/pdf')
            ];
            Object.defineProperty(hiddenInput, 'files', {
                value: designFiles,
                writable: false,
            });
            react_1.fireEvent.change(hiddenInput, { target: { files: designFiles } });
            // Submit request
            const submitButton = react_1.screen.getByRole('button', { name: /submit/i });
            await user.click(submitButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith(globals_1.expect.stringMatching(/\/api\/(features|feature-requests)/), globals_1.expect.objectContaining({
                    method: 'POST',
                    body: globals_1.expect.any(FormData),
                }));
            });
            (0, globals_1.expect)(mockToast).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                title: globals_1.expect.stringMatching(/created|submitted/i),
            }));
        });
    });
    (0, globals_1.describe)('Document Upload and Management Workflow', () => {
        (0, globals_1.it)('should complete document upload with categorization and permissions', async () => {
            const DocumentManager = require('../../client/src/components/common/DocumentManager.tsx').default;
            mockApiRequest.mockResolvedValue({
                id: 'doc-789',
                name: 'Policy Document',
                filePath: 'general/policy-document.pdf',
                isVisibleToTenants: true
            });
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            // Open upload dialog
            const uploadButton = react_1.screen.getByRole('button', { name: /upload|add document/i });
            await user.click(uploadButton);
            // Fill document metadata
            await user.type(react_1.screen.getByLabelText(/name/i), 'Policy Document');
            await user.type(react_1.screen.getByLabelText(/description/i), 'Company policy document for all residents');
            // Set document type
            const typeSelect = react_1.screen.getByLabelText(/type/i);
            await user.selectOptions(typeSelect, 'policy');
            // Set visibility permissions
            const visibilityCheckbox = react_1.screen.getByLabelText(/visible to tenants/i);
            await user.click(visibilityCheckbox);
            // Upload file
            const fileInput = react_1.screen.getByRole('input', { type: 'file' });
            const policyDoc = createMockFile('policy-document.pdf', 500000, 'application/pdf');
            Object.defineProperty(fileInput, 'files', {
                value: [policyDoc],
                writable: false,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [policyDoc] } });
            // Submit
            const submitButton = react_1.screen.getByRole('button', { name: /upload|save/i });
            await user.click(submitButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', '/api/documents', globals_1.expect.objectContaining({
                    name: 'Policy Document',
                    description: 'Company policy document for all residents',
                    documentType: 'policy',
                    isVisibleToTenants: true
                }));
            });
        });
        (0, globals_1.it)('should handle document viewing after upload', async () => {
            const DocumentManager = require('../../client/src/components/common/DocumentManager.tsx').default;
            // Mock document list with uploaded document
            mockApiRequest.mockResolvedValue([
                {
                    id: 'doc-123',
                    name: 'Uploaded Document',
                    filePath: 'general/uploaded-document.pdf',
                    fileName: 'uploaded-document.pdf',
                    fileSize: '250000',
                    attachments: [
                        { id: 'att-1', name: 'uploaded-document.pdf', size: 250000 }
                    ]
                }
            ]);
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            // Wait for document to appear in list
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Uploaded Document')).toBeInTheDocument();
            });
            // Click view button
            const viewButton = react_1.screen.getByRole('button', { name: /view/i });
            await user.click(viewButton);
            // Verify view action (opening in new tab/window)
            (0, globals_1.expect)(window.open).toHaveBeenCalledWith(globals_1.expect.stringMatching(/\/api\/documents\/doc-123\/file/), '_blank');
        });
    });
    (0, globals_1.describe)('Error Handling and Recovery', () => {
        (0, globals_1.it)('should handle network errors during upload', async () => {
            const BugReportPage = require('../../client/src/pages/settings/bug-reports.tsx').default;
            mockFetch.mockRejectedValue(new Error('Network error'));
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportPage, {}) }));
            const reportButton = await react_1.screen.findByTestId('button-report-bug');
            await user.click(reportButton);
            // Fill form and attach file
            await user.type(react_1.screen.getByLabelText(/title/i), 'Network Error Test');
            await user.type(react_1.screen.getByLabelText(/description/i), 'Testing network error handling.');
            await user.type(react_1.screen.getByLabelText(/page/i), 'Test Page');
            const fileInput = react_1.screen.getByRole('button', { name: /attach files/i });
            await user.click(fileInput);
            const hiddenInput = react_1.screen.getByRole('input', { type: 'file', hidden: true });
            const testFile = createMockFile('test.png', 10000, 'image/png');
            Object.defineProperty(hiddenInput, 'files', {
                value: [testFile],
                writable: false,
            });
            react_1.fireEvent.change(hiddenInput, { target: { files: [testFile] } });
            const submitButton = react_1.screen.getByRole('button', { name: /submit/i });
            await user.click(submitButton);
            // Verify error notification
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockToast).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                    title: 'Error',
                    description: globals_1.expect.stringContaining('Network error'),
                    variant: 'destructive',
                }));
            });
        });
        (0, globals_1.it)('should handle file corruption detection', async () => {
            const DocumentManager = require('../../client/src/components/common/DocumentManager.tsx').default;
            mockApiRequest.mockRejectedValue({
                message: 'File appears to be corrupted or invalid format'
            });
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            const uploadButton = react_1.screen.getByRole('button', { name: /upload/i });
            await user.click(uploadButton);
            await user.type(react_1.screen.getByLabelText(/name/i), 'Corrupted File Test');
            const fileInput = react_1.screen.getByRole('input', { type: 'file' });
            const corruptedFile = createMockFile('corrupted.pdf', 50000, 'application/pdf', 'invalid pdf content');
            Object.defineProperty(fileInput, 'files', {
                value: [corruptedFile],
                writable: false,
            });
            react_1.fireEvent.change(fileInput, { target: { files: [corruptedFile] } });
            const submitButton = react_1.screen.getByRole('button', { name: /upload/i });
            await user.click(submitButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockToast).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                    title: 'Error',
                    description: globals_1.expect.stringContaining('corrupted'),
                    variant: 'destructive',
                }));
            });
        });
    });
    (0, globals_1.describe)('Mobile and Cross-Platform Compatibility', () => {
        (0, globals_1.it)('should handle mobile file selection', async () => {
            // Mock mobile user agent
            Object.defineProperty(navigator, 'userAgent', {
                value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15',
                configurable: true,
            });
            const BugReportPage = require('../../client/src/pages/settings/bug-reports.tsx').default;
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportPage, {}) }));
            const reportButton = await react_1.screen.findByTestId('button-report-bug');
            await user.click(reportButton);
            // Verify mobile-friendly file input
            const fileButton = react_1.screen.getByRole('button', { name: /attach files/i });
            (0, globals_1.expect)(fileButton).toHaveAttribute('accept', globals_1.expect.stringMatching(/image|pdf|text/));
            // Test camera integration on mobile
            const hiddenInput = react_1.screen.getByRole('input', { type: 'file', hidden: true });
            (0, globals_1.expect)(hiddenInput).toHaveAttribute('capture', 'environment'); // Should allow camera capture
        });
        (0, globals_1.it)('should handle drag and drop file upload', async () => {
            const DocumentManager = require('../../client/src/components/common/DocumentManager.tsx').default;
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(DocumentManager, {}) }));
            const uploadButton = react_1.screen.getByRole('button', { name: /upload/i });
            await user.click(uploadButton);
            // Find drag and drop area
            const dropZone = react_1.screen.getByText(/drag.*drop|drop.*files/i).closest('div');
            (0, globals_1.expect)(dropZone).toBeInTheDocument();
            // Simulate drag and drop
            const mockFile = createMockFile('dropped-file.pdf', 100000, 'application/pdf');
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(mockFile);
            react_1.fireEvent.dragOver(dropZone, { dataTransfer });
            react_1.fireEvent.drop(dropZone, { dataTransfer });
            // Verify file was added
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('dropped-file.pdf')).toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('Accessibility and User Experience', () => {
        (0, globals_1.it)('should provide proper accessibility attributes for file uploads', async () => {
            const BugReportPage = require('../../client/src/pages/settings/bug-reports.tsx').default;
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportPage, {}) }));
            const reportButton = await react_1.screen.findByTestId('button-report-bug');
            await user_event_1.default.click(reportButton);
            const fileButton = react_1.screen.getByRole('button', { name: /attach files/i });
            // Check accessibility attributes
            (0, globals_1.expect)(fileButton).toHaveAttribute('aria-describedby');
            (0, globals_1.expect)(fileButton).toHaveAttribute('tabindex', '0');
            // Check for screen reader support
            const srText = react_1.screen.getByText(/screenshots.*error logs.*console outputs/i);
            (0, globals_1.expect)(srText).toBeInTheDocument();
        });
        (0, globals_1.it)('should provide clear upload status feedback', async () => {
            const BugReportPage = require('../../client/src/pages/settings/bug-reports.tsx').default;
            const user = user_event_1.default.setup();
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(BugReportPage, {}) }));
            const reportButton = await react_1.screen.findByTestId('button-report-bug');
            await user.click(reportButton);
            // Add required fields
            await user.type(react_1.screen.getByLabelText(/title/i), 'Accessibility Test');
            await user.type(react_1.screen.getByLabelText(/description/i), 'Testing upload feedback.');
            await user.type(react_1.screen.getByLabelText(/page/i), 'Test Page');
            // Attach file
            const fileButton = react_1.screen.getByRole('button', { name: /attach files/i });
            await user.click(fileButton);
            const hiddenInput = react_1.screen.getByRole('input', { type: 'file', hidden: true });
            const testFile = createMockFile('test.png', 25000, 'image/png');
            Object.defineProperty(hiddenInput, 'files', {
                value: [testFile],
                writable: false,
            });
            react_1.fireEvent.change(hiddenInput, { target: { files: [testFile] } });
            // Verify file status display
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(react_1.screen.getByText('Selected files (1):')).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByText('test.png')).toBeInTheDocument();
            });
            // Submit and check for status updates
            const submitButton = react_1.screen.getByRole('button', { name: /submit/i });
            (0, globals_1.expect)(submitButton).not.toBeDisabled();
            await user.click(submitButton);
            // Button should show loading state
            await (0, react_1.waitFor)(() => {
                const loadingButton = react_1.screen.getByRole('button', { name: /submitting|uploading/i });
                (0, globals_1.expect)(loadingButton).toBeDisabled();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,