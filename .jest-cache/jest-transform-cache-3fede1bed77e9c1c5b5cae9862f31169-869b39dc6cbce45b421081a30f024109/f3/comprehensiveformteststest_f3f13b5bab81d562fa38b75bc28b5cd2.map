{"file":"/home/runner/workspace/tests/unit/comprehensive-form-tests.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/comprehensive-form-tests.test.ts"],"sourcesContent":["/**\n * Comprehensive Form Validation Test Suite\n * \n * This test suite covers ALL forms in the Koveo Gestion application to ensure\n * proper validation, UUID handling, error messages, and form submission logic.\n * \n * Forms covered:\n * 1. Authentication Forms (login, register, forgot/reset password)\n * 2. User Management Forms (invitations, profile settings, password change)\n * 3. Property Management Forms (buildings, residences, organization)\n * 4. Financial Forms (bills, budgets, payments)\n * 5. Document Management Forms (upload, categorization)\n * 6. Maintenance Forms (demands, bug reports, feature requests)\n * 7. Operational Forms (common spaces, bookings, settings)\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport { z } from 'zod';\n\n// Authentication form schemas\nconst loginSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'Email address is required to sign in')\n    .email('Please enter a valid email address (example: user@domain.com)')\n    .toLowerCase(),\n  password: z\n    .string()\n    .min(1, 'Password is required to sign in')\n    .min(8, 'Password must be at least 8 characters long'),\n});\n\nconst forgotPasswordSchema = z.object({\n  email: z.string()\n    .min(1, 'Adresse e-mail requise pour la réinitialisation')\n    .email('Veuillez entrer une adresse e-mail valide (exemple: utilisateur@domaine.com)'),\n});\n\nconst resetPasswordSchema = z\n  .object({\n    password: z\n      .string()\n      .min(1, 'Le nouveau mot de passe est requis')\n      .min(8, 'Le mot de passe doit contenir au moins 8 caractères')\n      .max(100, 'Le mot de passe ne peut pas dépasser 100 caractères')\n      .regex(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n        'Le mot de passe doit contenir au moins une minuscule, une majuscule et un chiffre'\n      ),\n    confirmPassword: z.string().min(1, 'La confirmation du mot de passe est requise'),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: 'Les mots de passe ne correspondent pas',\n    path: ['confirmPassword'],\n  });\n\n// User management form schemas\nconst invitationSchema = z\n  .object({\n    email: z.string().email('Please enter a valid email address').optional(),\n    firstName: z.string().max(50, 'First name must be less than 50 characters').optional(),\n    lastName: z.string().max(50, 'Last name must be less than 50 characters').optional(),\n    role: z.enum(['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident']),\n    organizationId: z.string().min(1, 'Please select an organization'),\n    buildingId: z.string().optional(),\n    residenceId: z.string().optional(),\n    personalMessage: z.string().max(500, 'Personal message must be less than 500 characters').optional(),\n    expiryDays: z.number().min(1, 'Expiry days must be between 1 and 30').max(30, 'Expiry days must be between 1 and 30'),\n  })\n  .refine(\n    (data) => {\n      if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {\n        return !!data.firstName && !!data.lastName;\n      }\n      return !!data.email;\n    },\n    {\n      message: 'Email is required for regular invitations, first and last name for demo users',\n      path: ['email'],\n    }\n  );\n\nconst profileSchema = z.object({\n  firstName: z.string().min(1, 'First name is required').max(50, 'First name must be less than 50 characters'),\n  lastName: z.string().min(1, 'Last name is required').max(50, 'Last name must be less than 50 characters'), \n  email: z.string().min(1, 'Email address is required').email('Please enter a valid email address'),\n  username: z.string().min(3, 'Username must be between 3 and 30 characters').max(30, 'Username must be between 3 and 30 characters'),\n  phone: z.string().optional(),\n  language: z.enum(['fr', 'en']),\n});\n\n// Property management form schemas\nconst organizationFormSchema = z.object({\n  name: z.string().min(1, 'Organization name is required').max(200, 'Organization name must be less than 200 characters'),\n  type: z.string().min(1, 'Please select an organization type'),\n  address: z.string().min(1, 'Street address is required').max(300, 'Address must be less than 300 characters'),\n  city: z.string().min(1, 'City name is required').max(100, 'City name must be less than 100 characters'),\n  province: z.string().min(1, 'Province is required').default('QC'),\n  postalCode: z.string().min(1, 'Postal code is required').regex(\n    /^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$|^[A-Z]\\d[A-Z]\\d[A-Z]\\d$/,\n    'Postal code must follow Canadian format (example: H1A 1B1)'\n  ),\n  phone: z.string().optional(),\n  email: z.string().email('Please enter a valid email address').optional().or(z.literal('')),\n  website: z.string().url('Website must be a valid URL').optional().or(z.literal('')),\n  registrationNumber: z.string().max(50, 'Registration number must be less than 50 characters').optional(),\n});\n\nconst buildingFormSchema = z.object({\n  name: z.string().min(1, 'Building name is required').max(255, 'Building name must be less than 255 characters'),\n  organizationId: z.string().min(1, 'Organization is required'),\n  address: z.string().min(1, 'Address is required').max(500, 'Address must be less than 500 characters'),\n  city: z.string().min(1, 'City is required').max(100, 'City must be less than 100 characters'),\n  province: z.string().min(1, 'Province is required'),\n  postalCode: z.string().min(1, 'Postal code is required').max(20, 'Postal code must be less than 20 characters'),\n  buildingType: z.enum(['apartment', 'condo', 'rental']),\n  totalUnits: z.number().min(1, 'Total units must be at least 1').max(1000, 'Total units must be less than 1000'),\n  yearBuilt: z.number().min(1800, 'Year built must be after 1800').max(new Date().getFullYear(), 'Year built cannot be in the future').optional(),\n  totalFloors: z.number().min(1, 'Total floors must be at least 1').max(200, 'Total floors must be less than 200').optional(),\n  parkingSpaces: z.number().min(0, 'Parking spaces cannot be negative').max(2000, 'Parking spaces must be less than 2000').optional(),\n  storageSpaces: z.number().min(0, 'Storage spaces cannot be negative').max(2000, 'Storage spaces must be less than 2000').optional(),\n  managementCompany: z.string().max(255, 'Management company name must be less than 255 characters').optional(),\n});\n\nconst residenceEditSchema = z.object({\n  unitNumber: z.string().min(1, 'Unit number is required'),\n  floor: z.coerce.number().min(0, 'Floor must be between 0 and 50').max(50, 'Floor must be between 0 and 50').optional(),\n  squareFootage: z.union([z.coerce.number().min(1, 'Square footage must be between 1 and 10,000').max(10000, 'Square footage must be between 1 and 10,000'), z.literal('')]).optional(),\n  bedrooms: z.coerce.number().min(0, 'Bedrooms must be between 0 and 10').max(10, 'Bedrooms must be between 0 and 10').optional(),\n  bathrooms: z.union([z.coerce.number().min(0, 'Bathrooms must be between 0 and 10').max(10, 'Bathrooms must be between 0 and 10'), z.literal('')]).optional(),\n  balcony: z.boolean(),\n  parkingSpaceNumbers: z.array(z.string()).optional(),\n  storageSpaceNumbers: z.array(z.string()).optional(),\n  ownershipPercentage: z.union([z.coerce.number().min(0, 'Ownership percentage must be between 0 and 100').max(100, 'Ownership percentage must be between 0 and 100'), z.literal('')]).optional(),\n  monthlyFees: z.union([z.coerce.number().min(0, 'Monthly fees must be a positive amount').max(99999, 'Monthly fees must be less than $99,999'), z.literal('')]).optional(),\n});\n\n// Financial form schemas\nconst billFormSchema = z.object({\n  title: z.string().min(1, 'Bill title is required').max(200, 'Title must be less than 200 characters'),\n  description: z.string().max(1000, 'Description must be less than 1000 characters').optional(),\n  category: z.enum([\n    'insurance', 'maintenance', 'salary', 'utilities', 'cleaning', 'security',\n    'landscaping', 'professional_services', 'administration', 'repairs',\n    'supplies', 'taxes', 'technology', 'reserves', 'other'\n  ]),\n  vendor: z.string().max(150, 'Vendor name must be less than 150 characters').optional(),\n  paymentType: z.enum(['unique', 'recurrent']),\n  schedulePayment: z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),\n  totalAmount: z.string().min(1, 'Amount is required').refine((val) => {\n    const num = parseFloat(val);\n    return !isNaN(num) && num > 0 && num <= 999999.99;\n  }, 'Amount must be between $0.01 and $999,999.99'),\n  startDate: z.string().min(1, 'Start date is required').refine((val) => {\n    return !isNaN(Date.parse(val));\n  }, 'Start date must be a valid date'),\n  endDate: z.string().optional().refine((val) => {\n    if (!val) return true;\n    return !isNaN(Date.parse(val));\n  }, 'End date must be a valid date'),\n  status: z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),\n  notes: z.string().max(2000, 'Notes must be less than 2000 characters').optional(),\n});\n\n// Maintenance and operational form schemas\nconst demandSchema = z.object({\n  type: z.enum(['maintenance', 'complaint', 'information', 'other']),\n  description: z.string().min(10, 'Description must be at least 10 characters').max(2000, 'Description must not exceed 2000 characters'),\n  buildingId: z.string().uuid('Building ID must be a valid UUID').optional(),\n  residenceId: z.string().uuid('Residence ID must be a valid UUID').optional(),\n  assignationBuildingId: z.string().uuid('Assignation building ID must be a valid UUID').optional(),\n  assignationResidenceId: z.string().uuid('Assignation residence ID must be a valid UUID').optional(),\n});\n\nconst bugFormSchema = z.object({\n  title: z.string().min(1, 'Bug title is required').max(200, 'Title must be less than 200 characters'),\n  description: z.string().min(10, 'Bug description must be at least 10 characters').max(2000, 'Description must be less than 2000 characters'),\n  category: z.enum(['ui_ux', 'functionality', 'performance', 'data', 'security', 'integration', 'other']),\n  page: z.string().min(1, 'Page is required'),\n  priority: z.enum(['low', 'medium', 'high', 'critical']).default('medium'),\n  reproductionSteps: z.string().max(1000, 'Reproduction steps must be less than 1000 characters').optional(),\n  environment: z.string().max(500, 'Environment info must be less than 500 characters').optional(),\n});\n\nconst featureRequestSchema = z.object({\n  title: z.string().min(1, 'Title is required').max(200, 'Title must be less than 200 characters'),\n  description: z.string().min(10, 'Description must be at least 10 characters').max(2000, 'Description must be less than 2000 characters'),\n  need: z.string().min(5, 'Need must be at least 5 characters').max(500, 'Need must be less than 500 characters'),\n  category: z.enum([\n    'dashboard', 'property_management', 'resident_management', 'financial_management',\n    'maintenance', 'document_management', 'communication', 'reports', 'mobile_app', 'integrations', 'other'\n  ]),\n  page: z.string().min(1, 'Page is required'),\n});\n\n// Document management schemas\nconst documentSchema = z.object({\n  name: z.string().min(1, 'Document name is required').max(255, 'Document name must be less than 255 characters'),\n  type: z.string().min(1, 'Document type is required'),\n  dateReference: z.string().min(1, 'Reference date is required').refine((val) => {\n    return !isNaN(Date.parse(val));\n  }, 'Reference date must be a valid date'),\n  isVisibleToTenants: z.boolean().default(true),\n  buildingId: z.string().uuid('Building ID must be a valid UUID').optional(),\n  residenceId: z.string().uuid('Residence ID must be a valid UUID').optional(),\n});\n\ndescribe('Comprehensive Form Validation Tests', () => {\n  describe('Authentication Forms', () => {\n    describe('Login Form', () => {\n      it('should validate correct login data', () => {\n        const validData = {\n          email: 'user@example.com',\n          password: 'validPassword123'\n        };\n        \n        expect(() => loginSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should reject invalid email format', () => {\n        const invalidData = {\n          email: 'invalid-email',\n          password: 'validPassword123'\n        };\n        \n        expect(() => loginSchema.parse(invalidData)).toThrow();\n      });\n\n      it('should reject short password', () => {\n        const invalidData = {\n          email: 'user@example.com',\n          password: 'short'\n        };\n        \n        expect(() => loginSchema.parse(invalidData)).toThrow();\n      });\n\n      it('should require both email and password', () => {\n        expect(() => loginSchema.parse({ email: 'user@example.com' })).toThrow();\n        expect(() => loginSchema.parse({ password: 'password123' })).toThrow();\n        expect(() => loginSchema.parse({})).toThrow();\n      });\n    });\n\n    describe('Forgot Password Form', () => {\n      it('should validate correct email', () => {\n        const validData = { email: 'user@example.com' };\n        expect(() => forgotPasswordSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should reject invalid email', () => {\n        const invalidData = { email: 'invalid-email' };\n        expect(() => forgotPasswordSchema.parse(invalidData)).toThrow();\n      });\n\n      it('should require email field', () => {\n        expect(() => forgotPasswordSchema.parse({})).toThrow();\n        expect(() => forgotPasswordSchema.parse({ email: '' })).toThrow();\n      });\n    });\n\n    describe('Reset Password Form', () => {\n      it('should validate strong password with confirmation', () => {\n        const validData = {\n          password: 'StrongPassword123!',\n          confirmPassword: 'StrongPassword123!'\n        };\n        \n        expect(() => resetPasswordSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should reject weak passwords', () => {\n        const weakPasswords = [\n          'short', // too short\n          'alllowercase123', // no uppercase\n          'ALLUPPERCASE123', // no lowercase\n          'NoNumbers!', // no numbers\n        ];\n\n        weakPasswords.forEach(password => {\n          const data = { password, confirmPassword: password };\n          expect(() => resetPasswordSchema.parse(data)).toThrow();\n        });\n      });\n\n      it('should reject mismatched password confirmation', () => {\n        const invalidData = {\n          password: 'StrongPassword123!',\n          confirmPassword: 'DifferentPassword123!'\n        };\n        \n        expect(() => resetPasswordSchema.parse(invalidData)).toThrow();\n      });\n    });\n  });\n\n  describe('User Management Forms', () => {\n    describe('Invitation Form', () => {\n      it('should validate regular user invitation', () => {\n        const validData = {\n          email: 'newuser@example.com',\n          role: 'resident' as const,\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          expiryDays: 7\n        };\n        \n        expect(() => invitationSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate demo user invitation', () => {\n        const validData = {\n          firstName: 'Demo',\n          lastName: 'User',\n          role: 'demo_resident' as const,\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          expiryDays: 30\n        };\n        \n        expect(() => invitationSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should require email for regular users', () => {\n        const invalidData = {\n          role: 'resident' as const,\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          expiryDays: 7\n        };\n        \n        expect(() => invitationSchema.parse(invalidData)).toThrow();\n      });\n\n      it('should require names for demo users', () => {\n        const invalidData = {\n          role: 'demo_resident' as const,\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          expiryDays: 7\n        };\n        \n        expect(() => invitationSchema.parse(invalidData)).toThrow();\n      });\n\n      it('should validate expiry days range', () => {\n        const baseData = {\n          email: 'user@example.com',\n          role: 'resident' as const,\n          organizationId: '123e4567-e89b-12d3-a456-426614174000'\n        };\n        \n        expect(() => invitationSchema.parse({ ...baseData, expiryDays: 0 })).toThrow();\n        expect(() => invitationSchema.parse({ ...baseData, expiryDays: 31 })).toThrow();\n        expect(() => invitationSchema.parse({ ...baseData, expiryDays: 15 })).not.toThrow();\n      });\n    });\n\n    describe('Profile Form', () => {\n      it('should validate complete profile data', () => {\n        const validData = {\n          firstName: 'Jean',\n          lastName: 'Dupont',\n          email: 'jean.dupont@example.com',\n          username: 'jdupont',\n          language: 'fr' as const\n        };\n        \n        expect(() => profileSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate name character restrictions', () => {\n        const validNames = ['Jean', 'Marie-Claire', \"O'Connor\", 'José'];\n        const invalidNames = ['123Jean', 'Jean@', 'Jean#Test'];\n        \n        validNames.forEach(name => {\n          const data = {\n            firstName: name,\n            lastName: 'Dupont',\n            email: 'test@example.com',\n            username: 'testuser',\n            language: 'fr' as const\n          };\n          expect(() => profileSchema.parse(data)).not.toThrow();\n        });\n        \n        invalidNames.forEach(name => {\n          const data = {\n            firstName: name,\n            lastName: 'Dupont',\n            email: 'test@example.com',\n            username: 'testuser',\n            language: 'fr' as const\n          };\n          expect(() => profileSchema.parse(data)).toThrow();\n        });\n      });\n\n      it('should validate username format', () => {\n        const validUsernames = ['user123', 'jean.dupont', 'user_name', 'test-user'];\n        const invalidUsernames = ['u', 'user name', 'user@name', 'a'.repeat(31)];\n        \n        const baseData = {\n          firstName: 'Jean',\n          lastName: 'Dupont',\n          email: 'test@example.com',\n          language: 'fr' as const\n        };\n        \n        validUsernames.forEach(username => {\n          expect(() => profileSchema.parse({ ...baseData, username })).not.toThrow();\n        });\n        \n        invalidUsernames.forEach(username => {\n          expect(() => profileSchema.parse({ ...baseData, username })).toThrow();\n        });\n      });\n    });\n  });\n\n  describe('Property Management Forms', () => {\n    describe('Organization Form', () => {\n      it('should validate complete organization data', () => {\n        const validData = {\n          name: 'Maple Property Management',\n          type: 'management_company',\n          address: '123 Rue Saint-Denis',\n          city: 'Montréal',\n          province: 'QC',\n          postalCode: 'H1A 1B1'\n        };\n        \n        expect(() => organizationFormSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate Canadian postal code format', () => {\n        const validPostalCodes = ['H1A 1B1', 'H1A1B1', 'M5V 3L9', 'K1A0A6'];\n        const invalidPostalCodes = ['12345', 'H1A', 'H1A 1B', '1A1 B1C', 'HH1 1B1'];\n        \n        const baseData = {\n          name: 'Test Org',\n          type: 'condo_association',\n          address: '123 Test St',\n          city: 'Montréal',\n          province: 'QC'\n        };\n        \n        validPostalCodes.forEach(postalCode => {\n          expect(() => organizationFormSchema.parse({ ...baseData, postalCode })).not.toThrow();\n        });\n        \n        invalidPostalCodes.forEach(postalCode => {\n          expect(() => organizationFormSchema.parse({ ...baseData, postalCode })).toThrow();\n        });\n      });\n\n      it('should validate optional fields properly', () => {\n        const baseData = {\n          name: 'Test Org',\n          type: 'condo_association',\n          address: '123 Test St',\n          city: 'Montréal',\n          province: 'QC',\n          postalCode: 'H1A 1B1'\n        };\n        \n        // Valid with optional fields\n        expect(() => organizationFormSchema.parse({\n          ...baseData,\n          email: 'contact@test.com',\n          website: 'https://test.com',\n          phone: '(514) 123-4567'\n        })).not.toThrow();\n        \n        // Valid with empty optional fields\n        expect(() => organizationFormSchema.parse({\n          ...baseData,\n          email: '',\n          website: ''\n        })).not.toThrow();\n        \n        // Invalid email format\n        expect(() => organizationFormSchema.parse({\n          ...baseData,\n          email: 'invalid-email'\n        })).toThrow();\n        \n        // Invalid website format\n        expect(() => organizationFormSchema.parse({\n          ...baseData,\n          website: 'not-a-url'\n        })).toThrow();\n      });\n    });\n\n    describe('Building Form', () => {\n      it('should validate complete building data', () => {\n        const validData = {\n          name: 'Sunset Towers',\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          address: '456 Main Street',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H3A 1B1',\n          buildingType: 'condo' as const,\n          totalUnits: 50,\n          yearBuilt: 2020,\n          totalFloors: 5,\n          parkingSpaces: 30,\n          storageSpaces: 20\n        };\n        \n        expect(() => buildingFormSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate required fields', () => {\n        const requiredFields = ['name', 'organizationId', 'address', 'city', 'province', 'postalCode', 'buildingType', 'totalUnits'];\n        const baseData = {\n          name: 'Test Building',\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          address: '123 Test St',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H1A 1B1',\n          buildingType: 'condo' as const,\n          totalUnits: 10\n        };\n        \n        requiredFields.forEach(field => {\n          const incompleteData = { ...baseData };\n          delete (incompleteData as any)[field];\n          expect(() => buildingFormSchema.parse(incompleteData)).toThrow();\n        });\n      });\n\n      it('should validate numeric ranges', () => {\n        const baseData = {\n          name: 'Test Building',\n          organizationId: '123e4567-e89b-12d3-a456-426614174000',\n          address: '123 Test St',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H1A 1B1',\n          buildingType: 'condo' as const\n        };\n        \n        // Valid ranges\n        expect(() => buildingFormSchema.parse({ ...baseData, totalUnits: 1 })).not.toThrow();\n        expect(() => buildingFormSchema.parse({ ...baseData, totalUnits: 500 })).not.toThrow();\n        expect(() => buildingFormSchema.parse({ ...baseData, totalUnits: 1000 })).not.toThrow();\n        \n        // Invalid ranges\n        expect(() => buildingFormSchema.parse({ ...baseData, totalUnits: 0 })).toThrow();\n        expect(() => buildingFormSchema.parse({ ...baseData, totalUnits: 1001 })).toThrow();\n        expect(() => buildingFormSchema.parse({ ...baseData, totalUnits: -5 })).toThrow();\n      });\n    });\n\n    describe('Residence Edit Form', () => {\n      it('should validate complete residence data', () => {\n        const validData = {\n          unitNumber: '101A',\n          floor: 1,\n          squareFootage: 1200,\n          bedrooms: 2,\n          bathrooms: 1.5,\n          balcony: true,\n          parkingSpaceNumbers: ['P1', 'P2'],\n          storageSpaceNumbers: ['S1'],\n          ownershipPercentage: 25.5,\n          monthlyFees: 350.00\n        };\n        \n        expect(() => residenceEditSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should handle optional fields correctly', () => {\n        const minimalData = {\n          unitNumber: '101',\n          balcony: false\n        };\n        \n        expect(() => residenceEditSchema.parse(minimalData)).not.toThrow();\n      });\n\n      it('should validate numeric ranges for optional fields', () => {\n        const baseData = {\n          unitNumber: '101',\n          balcony: true\n        };\n        \n        // Valid optional numeric values\n        expect(() => residenceEditSchema.parse({ ...baseData, floor: 0 })).not.toThrow();\n        expect(() => residenceEditSchema.parse({ ...baseData, floor: 50 })).not.toThrow();\n        expect(() => residenceEditSchema.parse({ ...baseData, bedrooms: 0 })).not.toThrow();\n        expect(() => residenceEditSchema.parse({ ...baseData, bedrooms: 10 })).not.toThrow();\n        \n        // Invalid ranges\n        expect(() => residenceEditSchema.parse({ ...baseData, floor: -1 })).toThrow();\n        expect(() => residenceEditSchema.parse({ ...baseData, floor: 51 })).toThrow();\n        expect(() => residenceEditSchema.parse({ ...baseData, bedrooms: -1 })).toThrow();\n        expect(() => residenceEditSchema.parse({ ...baseData, bedrooms: 11 })).toThrow();\n      });\n    });\n  });\n\n  describe('Financial Forms', () => {\n    describe('Bill Form', () => {\n      it('should validate complete bill data', () => {\n        const validData = {\n          title: 'Monthly Electricity Bill',\n          description: 'Electricity consumption for January 2025',\n          category: 'utilities' as const,\n          vendor: 'Hydro-Quebec',\n          paymentType: 'recurrent' as const,\n          schedulePayment: 'monthly' as const,\n          totalAmount: '150.75',\n          startDate: '2025-01-01',\n          endDate: '2025-12-31',\n          status: 'draft' as const,\n          notes: 'Annual electricity contract'\n        };\n        \n        expect(() => billFormSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate required fields', () => {\n        const requiredFields = ['title', 'category', 'paymentType', 'totalAmount', 'startDate', 'status'];\n        const baseData = {\n          title: 'Test Bill',\n          category: 'maintenance' as const,\n          paymentType: 'unique' as const,\n          totalAmount: '100.00',\n          startDate: '2025-01-01',\n          status: 'draft' as const\n        };\n        \n        requiredFields.forEach(field => {\n          const incompleteData = { ...baseData };\n          delete (incompleteData as any)[field];\n          expect(() => billFormSchema.parse(incompleteData)).toThrow();\n        });\n      });\n\n      it('should validate amount format and range', () => {\n        const baseData = {\n          title: 'Test Bill',\n          category: 'utilities' as const,\n          paymentType: 'unique' as const,\n          startDate: '2025-01-01',\n          status: 'draft' as const\n        };\n        \n        // Valid amounts\n        const validAmounts = ['0.01', '100.00', '1500.50', '999999.99'];\n        validAmounts.forEach(amount => {\n          expect(() => billFormSchema.parse({ ...baseData, totalAmount: amount })).not.toThrow();\n        });\n        \n        // Invalid amounts\n        const invalidAmounts = ['0', '0.00', '-100', '1000000.00', 'not-a-number', ''];\n        invalidAmounts.forEach(amount => {\n          expect(() => billFormSchema.parse({ ...baseData, totalAmount: amount })).toThrow();\n        });\n      });\n\n      it('should validate date formats', () => {\n        const baseData = {\n          title: 'Test Bill',\n          category: 'utilities' as const,\n          paymentType: 'unique' as const,\n          totalAmount: '100.00',\n          status: 'draft' as const\n        };\n        \n        // Valid dates\n        const validDates = ['2025-01-01', '2025-12-31', '2024-02-29'];\n        validDates.forEach(date => {\n          expect(() => billFormSchema.parse({ ...baseData, startDate: date })).not.toThrow();\n          expect(() => billFormSchema.parse({ ...baseData, startDate: '2025-01-01', endDate: date })).not.toThrow();\n        });\n        \n        // Invalid dates\n        const invalidDates = ['invalid-date', '2025-13-01', '2025-02-30', ''];\n        invalidDates.forEach(date => {\n          expect(() => billFormSchema.parse({ ...baseData, startDate: date })).toThrow();\n        });\n      });\n    });\n  });\n\n  describe('Maintenance and Operational Forms', () => {\n    describe('Demand Form', () => {\n      it('should validate complete demand data', () => {\n        const validData = {\n          type: 'maintenance' as const,\n          description: 'The heating system in unit 101 is not working properly and needs urgent repair.',\n          buildingId: '123e4567-e89b-12d3-a456-426614174000',\n          residenceId: '123e4567-e89b-12d3-a456-426614174001',\n          assignationBuildingId: '123e4567-e89b-12d3-a456-426614174002',\n          assignationResidenceId: '123e4567-e89b-12d3-a456-426614174003'\n        };\n        \n        expect(() => demandSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate description length requirements', () => {\n        const baseData = {\n          type: 'complaint' as const,\n          buildingId: '123e4567-e89b-12d3-a456-426614174000'\n        };\n        \n        // Valid descriptions\n        expect(() => demandSchema.parse({ ...baseData, description: 'This is a valid description that meets the minimum length requirement.' })).not.toThrow();\n        \n        // Too short\n        expect(() => demandSchema.parse({ ...baseData, description: 'Short' })).toThrow();\n        \n        // Too long\n        expect(() => demandSchema.parse({ ...baseData, description: 'A'.repeat(2001) })).toThrow();\n        \n        // Empty\n        expect(() => demandSchema.parse({ ...baseData, description: '' })).toThrow();\n      });\n\n      it('should handle optional UUID fields', () => {\n        const minimalData = {\n          type: 'information' as const,\n          description: 'This is a valid information request with sufficient length.'\n        };\n        \n        expect(() => demandSchema.parse(minimalData)).not.toThrow();\n      });\n\n      it('should validate UUID format when provided', () => {\n        const baseData = {\n          type: 'maintenance' as const,\n          description: 'This is a valid maintenance request with proper description length.'\n        };\n        \n        // Valid UUIDs\n        const validUUID = '123e4567-e89b-12d3-a456-426614174000';\n        expect(() => demandSchema.parse({ ...baseData, buildingId: validUUID })).not.toThrow();\n        \n        // Invalid UUIDs\n        const invalidUUIDs = ['not-a-uuid', '123', '', 'invalid-uuid-format'];\n        invalidUUIDs.forEach(uuid => {\n          expect(() => demandSchema.parse({ ...baseData, buildingId: uuid })).toThrow();\n        });\n      });\n    });\n\n    describe('Bug Report Form', () => {\n      it('should validate complete bug report', () => {\n        const validData = {\n          title: 'Login button not working on mobile devices',\n          description: 'When I try to click the login button on my iPhone, nothing happens and no error message is displayed.',\n          category: 'ui_ux' as const,\n          page: '/login',\n          priority: 'high' as const,\n          reproductionSteps: '1. Open app on iPhone\\n2. Navigate to login page\\n3. Click login button\\n4. Nothing happens',\n          environment: 'iPhone 12, iOS 15.0, Safari browser'\n        };\n        \n        expect(() => bugFormSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate required fields only', () => {\n        const minimalData = {\n          title: 'Simple bug report',\n          description: 'This is a minimal bug report with required fields only.',\n          category: 'functionality' as const,\n          page: '/dashboard'\n        };\n        \n        expect(() => bugFormSchema.parse(minimalData)).not.toThrow();\n      });\n\n      it('should validate text length limits', () => {\n        const baseData = {\n          category: 'other' as const,\n          page: '/test'\n        };\n        \n        // Title length validation\n        expect(() => bugFormSchema.parse({ ...baseData, title: '', description: 'Valid description text' })).toThrow();\n        expect(() => bugFormSchema.parse({ ...baseData, title: 'A'.repeat(201), description: 'Valid description' })).toThrow();\n        \n        // Description length validation\n        expect(() => bugFormSchema.parse({ ...baseData, title: 'Valid title', description: 'Short' })).toThrow();\n        expect(() => bugFormSchema.parse({ ...baseData, title: 'Valid title', description: 'A'.repeat(2001) })).toThrow();\n      });\n    });\n\n    describe('Feature Request Form', () => {\n      it('should validate complete feature request', () => {\n        const validData = {\n          title: 'Add dark mode theme option',\n          description: 'I would like to have a dark mode option in the application settings to reduce eye strain during evening use.',\n          need: 'Better user experience during low-light conditions',\n          category: 'ui_ux' as const,\n          page: '/settings'\n        };\n        \n        expect(() => featureRequestSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should validate required text lengths', () => {\n        const baseData = {\n          category: 'dashboard' as const,\n          page: '/dashboard'\n        };\n        \n        // Valid lengths\n        expect(() => featureRequestSchema.parse({\n          ...baseData,\n          title: 'Valid feature title',\n          description: 'This is a valid feature description with sufficient length.',\n          need: 'This addresses a specific user need'\n        })).not.toThrow();\n        \n        // Invalid lengths\n        expect(() => featureRequestSchema.parse({ ...baseData, title: '', description: 'Valid desc', need: 'Valid need' })).toThrow();\n        expect(() => featureRequestSchema.parse({ ...baseData, title: 'Valid', description: 'Short', need: 'Valid need' })).toThrow();\n        expect(() => featureRequestSchema.parse({ ...baseData, title: 'Valid', description: 'Valid description', need: 'No' })).toThrow();\n      });\n    });\n  });\n\n  describe('Document Management Forms', () => {\n    describe('Document Upload Form', () => {\n      it('should validate complete document data', () => {\n        const validData = {\n          name: 'Annual Financial Report 2024',\n          type: 'financial',\n          dateReference: '2024-12-31',\n          isVisibleToTenants: true,\n          buildingId: '123e4567-e89b-12d3-a456-426614174000'\n        };\n        \n        expect(() => documentSchema.parse(validData)).not.toThrow();\n      });\n\n      it('should handle optional building and residence IDs', () => {\n        const minimalData = {\n          name: 'Test Document',\n          type: 'other',\n          dateReference: '2025-01-01',\n          isVisibleToTenants: false\n        };\n        \n        expect(() => documentSchema.parse(minimalData)).not.toThrow();\n      });\n\n      it('should validate date format', () => {\n        const baseData = {\n          name: 'Test Document',\n          type: 'maintenance',\n          isVisibleToTenants: true\n        };\n        \n        // Valid dates\n        const validDates = ['2025-01-01', '2024-12-31', '2023-06-15'];\n        validDates.forEach(date => {\n          expect(() => documentSchema.parse({ ...baseData, dateReference: date })).not.toThrow();\n        });\n        \n        // Invalid dates\n        const invalidDates = ['invalid-date', '2025-13-01', '', '01/01/2025'];\n        invalidDates.forEach(date => {\n          expect(() => documentSchema.parse({ ...baseData, dateReference: date })).toThrow();\n        });\n      });\n\n      it('should validate UUID format for optional ID fields', () => {\n        const baseData = {\n          name: 'Test Document',\n          type: 'legal',\n          dateReference: '2025-01-01',\n          isVisibleToTenants: true\n        };\n        \n        // Valid UUIDs\n        const validUUID = '123e4567-e89b-12d3-a456-426614174000';\n        expect(() => documentSchema.parse({ ...baseData, buildingId: validUUID })).not.toThrow();\n        expect(() => documentSchema.parse({ ...baseData, residenceId: validUUID })).not.toThrow();\n        \n        // Invalid UUIDs\n        const invalidUUIDs = ['not-a-uuid', '123', 'invalid-format'];\n        invalidUUIDs.forEach(uuid => {\n          expect(() => documentSchema.parse({ ...baseData, buildingId: uuid })).toThrow();\n          expect(() => documentSchema.parse({ ...baseData, residenceId: uuid })).toThrow();\n        });\n      });\n    });\n  });\n\n  describe('Form Error Handling', () => {\n    it('should provide detailed error messages for validation failures', () => {\n      try {\n        loginSchema.parse({ email: 'invalid', password: 'short' });\n        fail('Should have thrown validation error');\n      } catch (error: any) {\n        expect(error.errors).toBeDefined();\n        expect(error.errors.length).toBeGreaterThan(0);\n        expect(error.errors.some((e: any) => e.path.includes('email'))).toBe(true);\n        expect(error.errors.some((e: any) => e.path.includes('password'))).toBe(true);\n      }\n    });\n\n    it('should handle empty object submissions', () => {\n      const schemas = [\n        { name: 'login', schema: loginSchema },\n        { name: 'organization', schema: organizationFormSchema },\n        { name: 'building', schema: buildingFormSchema },\n        { name: 'demand', schema: demandSchema },\n        { name: 'bill', schema: billFormSchema },\n      ];\n\n      schemas.forEach(({ name, schema }) => {\n        expect(() => schema.parse({})).toThrow();\n      });\n    });\n\n    it('should handle null and undefined values appropriately', () => {\n      // Required fields should reject null/undefined\n      expect(() => loginSchema.parse({ email: null, password: undefined })).toThrow();\n      \n      // Optional fields should accept undefined but may reject null depending on schema\n      expect(() => organizationFormSchema.parse({\n        name: 'Test',\n        type: 'test',\n        address: '123 St',\n        city: 'City',\n        province: 'QC',\n        postalCode: 'H1A 1B1',\n        email: undefined\n      })).not.toThrow();\n    });\n  });\n\n  describe('Integration and Edge Cases', () => {\n    it('should handle very long valid inputs', () => {\n      const longValidDescription = 'A'.repeat(1999); // Just under the 2000 limit\n      \n      expect(() => demandSchema.parse({\n        type: 'other' as const,\n        description: longValidDescription\n      })).not.toThrow();\n    });\n\n    it('should handle special characters in text fields', () => {\n      const specialCharacters = 'Événement spécial avec accents: café, naïve, résumé, français, à bientôt!';\n      \n      expect(() => organizationFormSchema.parse({\n        name: specialCharacters,\n        type: 'condo_association',\n        address: '123 Rue Saint-Denis',\n        city: 'Montréal',\n        province: 'QC',\n        postalCode: 'H1A 1B1'\n      })).not.toThrow();\n    });\n\n    it('should validate enum values strictly', () => {\n      // Valid enum values\n      expect(() => demandSchema.parse({\n        type: 'maintenance' as const,\n        description: 'Valid maintenance request description.'\n      })).not.toThrow();\n      \n      // Invalid enum values\n      expect(() => demandSchema.parse({\n        type: 'invalid_type' as any,\n        description: 'Valid description.'\n      })).toThrow();\n    });\n  });\n});\n"],"version":3}