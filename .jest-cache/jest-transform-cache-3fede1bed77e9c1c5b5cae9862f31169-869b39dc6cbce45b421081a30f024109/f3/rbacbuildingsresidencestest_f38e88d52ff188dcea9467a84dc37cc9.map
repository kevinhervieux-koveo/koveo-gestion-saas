{"file":"/home/runner/workspace/tests/integration/rbac-buildings-residences.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/rbac-buildings-residences.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\n// Create test app similar to existing tests\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Add test authentication middleware that bypasses real auth\n  app.use(async (req: any, res, next) => {\n    const testUserId = req.headers['x-test-user-id'];\n    if (testUserId) {\n      const [user] = await db.select().from(schema.users).where(eq(schema.users.id, testUserId)).limit(1);\n      if (user) {\n        req.session = { \n          userId: testUserId,\n          isAuthenticated: true,\n          role: user.role\n        };\n        req.user = user;\n      }\n    }\n    next();\n  });\n  \n  registerRoutes(app);\n  return app;\n};\n\ndescribe('RBAC Buildings and Residences Actions', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let managerUser: any;\n  let tenantUser: any;\n  let residentUser: any;\n  let demoManagerUser: any;\n  let testOrganization: any;\n  let otherOrganization: any;\n  let testBuilding: any;\n  let otherBuilding: any;\n  let testResidence: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    try {\n      // Clean test data\n      await db.delete(schema.userResidences);\n      await db.delete(schema.userOrganizations);\n      await db.delete(schema.residences);\n      await db.delete(schema.buildings);\n      await db.delete(schema.users);\n      await db.delete(schema.organizations);\n    } catch (error) {\n      console.warn('Test setup warning:', error);\n    }\n\n    // Create test organizations\n    const organizations = await db\n      .insert(schema.organizations)\n      .values([\n        {\n          name: 'Test Organization',\n          type: 'Standard',\n          address: '123 Test St',\n          city: 'Test City',\n          province: 'QC',\n          postalCode: 'H1H 1H1',\n          phone: '514-555-0123',\n          email: 'test@org.com',\n        },\n        {\n          name: 'Other Organization',\n          type: 'Standard',\n          address: '456 Other St',\n          city: 'Other City',\n          province: 'QC',\n          postalCode: 'H2H 2H2',\n          phone: '514-555-0456',\n          email: 'other@org.com',\n        }\n      ])\n      .returning();\n\n    testOrganization = organizations[0];\n    otherOrganization = organizations[1];\n\n    // Create test buildings\n    const buildings = await db\n      .insert(schema.buildings)\n      .values([\n        {\n          organizationId: testOrganization.id,\n          name: 'Test Building',\n          address: '123 Test St',\n          city: 'Test City',\n          province: 'QC',\n          postalCode: 'H1H 1H1',\n          totalUnits: 10,\n          buildingType: 'apartment',\n        },\n        {\n          organizationId: otherOrganization.id,\n          name: 'Other Building',\n          address: '456 Other St',\n          city: 'Other City',\n          province: 'QC',\n          postalCode: 'H2H 2H2',\n          totalUnits: 5,\n          buildingType: 'apartment',\n        }\n      ])\n      .returning();\n\n    testBuilding = buildings[0];\n    otherBuilding = buildings[1];\n\n    // Create test residence\n    const [residence] = await db\n      .insert(schema.residences)\n      .values({\n        buildingId: testBuilding.id,\n        unitNumber: '101',\n        squareFootage: '1000',\n        bedrooms: 2,\n        bathrooms: '1.0',\n      })\n      .returning();\n    testResidence = residence;\n\n    // Create test users\n    const users = await db\n      .insert(schema.users)\n      .values([\n        {\n          email: 'admin@test.com',\n          username: 'admin',\n          password: 'hashedpass',\n          firstName: 'Admin',\n          lastName: 'User',\n          role: 'admin',\n          isActive: true,\n          phone: '514-555-0001',\n        },\n        {\n          email: 'manager@test.com',\n          username: 'manager',\n          password: 'hashedpass',\n          firstName: 'Manager',\n          lastName: 'User',\n          role: 'manager',\n          isActive: true,\n          phone: '514-555-0002',\n        },\n        {\n          email: 'tenant@test.com',\n          username: 'tenant',\n          password: 'hashedpass',\n          firstName: 'Tenant',\n          lastName: 'User',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0003',\n        },\n        {\n          email: 'resident@test.com',\n          username: 'resident',\n          password: 'hashedpass',\n          firstName: 'Resident',\n          lastName: 'User',\n          role: 'resident',\n          isActive: true,\n          phone: '514-555-0004',\n        },\n        {\n          email: 'demo.manager@test.com',\n          username: 'demo_manager',\n          password: 'hashedpass',\n          firstName: 'Demo',\n          lastName: 'Manager',\n          role: 'demo_manager',\n          isActive: true,\n          phone: '514-555-0005',\n        }\n      ])\n      .returning();\n\n    adminUser = users.find(u => u.email === 'admin@test.com');\n    managerUser = users.find(u => u.email === 'manager@test.com');\n    tenantUser = users.find(u => u.email === 'tenant@test.com');\n    residentUser = users.find(u => u.email === 'resident@test.com');\n    demoManagerUser = users.find(u => u.email === 'demo.manager@test.com');\n\n    // Assign manager to test organization\n    await db\n      .insert(schema.userOrganizations)\n      .values({\n        userId: managerUser.id,\n        organizationId: testOrganization.id,\n        organizationRole: 'manager',\n        isActive: true,\n      });\n\n    // Assign tenant and resident to test organization and residence\n    await db\n      .insert(schema.userOrganizations)\n      .values([\n        {\n          userId: tenantUser.id,\n          organizationId: testOrganization.id,\n          organizationRole: 'tenant',\n          isActive: true,\n        },\n        {\n          userId: residentUser.id,\n          organizationId: testOrganization.id,\n          organizationRole: 'resident',\n          isActive: true,\n        }\n      ]);\n\n    await db\n      .insert(schema.userResidences)\n      .values([\n        {\n          userId: tenantUser.id,\n          residenceId: testResidence.id,\n          relationshipType: 'tenant',\n          startDate: '2024-01-01',\n          isActive: true,\n        },\n        {\n          userId: residentUser.id,\n          residenceId: testResidence.id,\n          relationshipType: 'occupant',\n          startDate: '2024-01-01',\n          isActive: true,\n        }\n      ]);\n  });\n\n  afterEach(async () => {\n    await db.delete(schema.userResidences);\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.residences);\n    await db.delete(schema.buildings);\n    await db.delete(schema.users);\n    await db.delete(schema.organizations);\n  });\n\n  describe('Building Field Editing by Role', () => {\n    const buildingUpdateData = {\n      name: 'Updated Building Name',\n      address: '999 Updated St',\n      city: 'Updated City',\n      province: 'QC',\n      postalCode: 'H9H 9H9',\n      totalUnits: 15,\n      buildingType: 'condo',\n      description: 'Updated building description',\n    };\n\n    it('should allow admin to edit all building fields', async () => {\n      const response = await request(app)\n        .put(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', adminUser.id)\n        .send(buildingUpdateData)\n        .expect(200);\n\n      expect(response.body.message).toBe('Building updated successfully');\n\n      // Verify the building was actually updated\n      const [updatedBuilding] = await db\n        .select()\n        .from(schema.buildings)\n        .where(eq(schema.buildings.id, testBuilding.id));\n\n      expect(updatedBuilding.name).toBe(buildingUpdateData.name);\n      expect(updatedBuilding.address).toBe(buildingUpdateData.address);\n      expect(updatedBuilding.totalUnits).toBe(buildingUpdateData.totalUnits);\n    });\n\n    it('should allow manager to edit buildings in their organization', async () => {\n      const response = await request(app)\n        .put(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', managerUser.id)\n        .send(buildingUpdateData)\n        .expect(200);\n\n      expect(response.body.message).toBe('Building updated successfully');\n\n      // Verify the building was updated\n      const [updatedBuilding] = await db\n        .select()\n        .from(schema.buildings)\n        .where(eq(schema.buildings.id, testBuilding.id));\n\n      expect(updatedBuilding.name).toBe(buildingUpdateData.name);\n    });\n\n    it('should prevent manager from editing buildings outside their organization', async () => {\n      const response = await request(app)\n        .put(`/api/buildings/${otherBuilding.id}`)\n        .set('x-test-user-id', managerUser.id)\n        .send(buildingUpdateData);\n\n      // Should fail with 403 or 404 (depending on implementation)\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n\n    it('should prevent tenant from editing building fields', async () => {\n      const response = await request(app)\n        .put(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', tenantUser.id)\n        .send(buildingUpdateData)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n\n    it('should prevent resident from editing building fields', async () => {\n      const response = await request(app)\n        .put(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', residentUser.id)\n        .send(buildingUpdateData)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n\n    it('should allow demo_manager to edit buildings (demo functionality)', async () => {\n      // Demo managers should have similar permissions to regular managers\n      const response = await request(app)\n        .put(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', demoManagerUser.id)\n        .send(buildingUpdateData);\n\n      // Demo managers might have restricted access depending on implementation\n      // This test validates the current behavior\n      if (response.status === 200) {\n        expect(response.body.message).toBe('Building updated successfully');\n      } else {\n        expect(response.status).toBeGreaterThanOrEqual(403);\n      }\n    });\n  });\n\n  describe('Building Creation by Role', () => {\n    it('should allow admin to create buildings', async () => {\n      const newBuildingData = {\n        organizationId: testOrganization.id,\n        name: 'New Test Building',\n        address: '789 New St',\n        city: 'New City',\n        province: 'QC',\n        postalCode: 'H3H 3H3',\n        totalUnits: 20,\n        buildingType: 'townhouse',\n      };\n\n      const response = await request(app)\n        .post('/api/buildings')\n        .set('x-test-user-id', adminUser.id)\n        .send(newBuildingData)\n        .expect(201);\n\n      expect(response.body.message).toBe('Building created successfully');\n      expect(response.body.building.name).toBe(newBuildingData.name);\n    });\n\n    it('should allow manager to create buildings in their organization', async () => {\n      const newBuildingData = {\n        organizationId: testOrganization.id,\n        name: 'Manager New Building',\n        address: '888 Manager St',\n        city: 'Manager City',\n        province: 'QC',\n        postalCode: 'H4H 4H4',\n        totalUnits: 12,\n        buildingType: 'apartment',\n      };\n\n      const response = await request(app)\n        .post('/api/buildings')\n        .set('x-test-user-id', managerUser.id)\n        .send(newBuildingData)\n        .expect(201);\n\n      expect(response.body.message).toBe('Building created successfully');\n    });\n\n    it('should prevent manager from creating buildings in other organizations', async () => {\n      const otherOrgBuildingData = {\n        organizationId: otherOrganization.id,\n        name: 'Unauthorized Building',\n        address: '999 Forbidden St',\n        city: 'Forbidden City',\n        province: 'QC',\n        postalCode: 'H5H 5H5',\n        totalUnits: 8,\n        buildingType: 'apartment',\n      };\n\n      const response = await request(app)\n        .post('/api/buildings')\n        .set('x-test-user-id', managerUser.id)\n        .send(otherOrgBuildingData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n\n    it('should prevent tenant from creating buildings', async () => {\n      const newBuildingData = {\n        organizationId: testOrganization.id,\n        name: 'Tenant Building',\n        address: '777 Tenant St',\n        city: 'Tenant City',\n        province: 'QC',\n        postalCode: 'H6H 6H6',\n        totalUnits: 6,\n        buildingType: 'apartment',\n      };\n\n      const response = await request(app)\n        .post('/api/buildings')\n        .set('x-test-user-id', tenantUser.id)\n        .send(newBuildingData)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n\n    it('should prevent resident from creating buildings', async () => {\n      const newBuildingData = {\n        organizationId: testOrganization.id,\n        name: 'Resident Building',\n        address: '666 Resident St',\n        city: 'Resident City',\n        province: 'QC',\n        postalCode: 'H7H 7H7',\n        totalUnits: 4,\n        buildingType: 'apartment',\n      };\n\n      const response = await request(app)\n        .post('/api/buildings')\n        .set('x-test-user-id', residentUser.id)\n        .send(newBuildingData)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n  });\n\n  describe('Residence Field Editing by Role', () => {\n    const residenceUpdateData = {\n      unitNumber: '102',\n      squareFootage: 1200,\n      bedrooms: 3,\n      bathrooms: 2,\n      description: 'Updated residence description',\n      parkingSpaces: 1,\n      storageSpaces: 1,\n    };\n\n    it('should allow admin to edit all residence fields', async () => {\n      const response = await request(app)\n        .put(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', adminUser.id)\n        .send(residenceUpdateData)\n        .expect(200);\n\n      expect(response.body.message).toBe('Residence updated successfully');\n\n      // Verify the residence was updated\n      const [updatedResidence] = await db\n        .select()\n        .from(schema.residences)\n        .where(eq(schema.residences.id, testResidence.id));\n\n      expect(updatedResidence.unitNumber).toBe(residenceUpdateData.unitNumber);\n      expect(updatedResidence.squareFootage).toBe(residenceUpdateData.squareFootage);\n      expect(updatedResidence.bedrooms).toBe(residenceUpdateData.bedrooms);\n    });\n\n    it('should allow manager to edit residences in their organization', async () => {\n      const response = await request(app)\n        .put(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', managerUser.id)\n        .send(residenceUpdateData)\n        .expect(200);\n\n      expect(response.body.message).toBe('Residence updated successfully');\n\n      // Verify the residence was updated\n      const [updatedResidence] = await db\n        .select()\n        .from(schema.residences)\n        .where(eq(schema.residences.id, testResidence.id));\n\n      expect(updatedResidence.unitNumber).toBe(residenceUpdateData.unitNumber);\n    });\n\n    it('should prevent tenant from editing residence structural fields', async () => {\n      const response = await request(app)\n        .put(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', tenantUser.id)\n        .send(residenceUpdateData);\n\n      // Tenants typically cannot edit structural information\n      // Should fail with 403 or only allow limited fields\n      if (response.status === 403) {\n        expect(response.body.message).toContain('Insufficient permissions');\n      } else if (response.status === 200) {\n        // If allowed, verify only certain fields can be updated by tenants\n        const [updatedResidence] = await db\n          .select()\n          .from(schema.residences)\n          .where(eq(schema.residences.id, testResidence.id));\n        \n        // Structural fields should not be changed by tenants\n        expect(updatedResidence.squareFootage).toBe(1000); // Original value\n        expect(updatedResidence.bedrooms).toBe(2); // Original value\n      }\n    });\n\n    it('should prevent resident from editing residence structural fields', async () => {\n      const response = await request(app)\n        .put(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', residentUser.id)\n        .send(residenceUpdateData);\n\n      // Residents typically cannot edit structural information\n      if (response.status === 403) {\n        expect(response.body.message).toContain('Insufficient permissions');\n      } else if (response.status === 200) {\n        // If allowed, verify only certain fields can be updated by residents\n        const [updatedResidence] = await db\n          .select()\n          .from(schema.residences)\n          .where(eq(schema.residences.id, testResidence.id));\n        \n        // Structural fields should not be changed by residents\n        expect(updatedResidence.squareFootage).toBe(1000); // Original value\n        expect(updatedResidence.bedrooms).toBe(2); // Original value\n      }\n    });\n\n    it('should allow demo_manager to edit residences (demo functionality)', async () => {\n      const response = await request(app)\n        .put(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', demoManagerUser.id)\n        .send(residenceUpdateData);\n\n      // Demo managers should have similar permissions to regular managers\n      if (response.status === 200) {\n        expect(response.body.message).toBe('Residence updated successfully');\n      } else {\n        expect(response.status).toBeGreaterThanOrEqual(403);\n      }\n    });\n  });\n\n  describe('Residence Creation by Role', () => {\n    it('should allow admin to create residences', async () => {\n      const newResidenceData = {\n        buildingId: testBuilding.id,\n        unitNumber: '103',\n        squareFootage: 900,\n        bedrooms: 1,\n        bathrooms: 1,\n      };\n\n      const response = await request(app)\n        .post('/api/residences')\n        .set('x-test-user-id', adminUser.id)\n        .send(newResidenceData)\n        .expect(201);\n\n      expect(response.body.message).toBe('Residence created successfully');\n      expect(response.body.residence.unitNumber).toBe(newResidenceData.unitNumber);\n    });\n\n    it('should allow manager to create residences in buildings they manage', async () => {\n      const newResidenceData = {\n        buildingId: testBuilding.id,\n        unitNumber: '104',\n        squareFootage: 1100,\n        bedrooms: 2,\n        bathrooms: 1,\n      };\n\n      const response = await request(app)\n        .post('/api/residences')\n        .set('x-test-user-id', managerUser.id)\n        .send(newResidenceData)\n        .expect(201);\n\n      expect(response.body.message).toBe('Residence created successfully');\n    });\n\n    it('should prevent manager from creating residences in buildings outside their organization', async () => {\n      const otherBuildingResidenceData = {\n        buildingId: otherBuilding.id,\n        unitNumber: '201',\n        squareFootage: 800,\n        bedrooms: 1,\n        bathrooms: 1,\n      };\n\n      const response = await request(app)\n        .post('/api/residences')\n        .set('x-test-user-id', managerUser.id)\n        .send(otherBuildingResidenceData);\n\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n\n    it('should prevent tenant from creating residences', async () => {\n      const newResidenceData = {\n        buildingId: testBuilding.id,\n        unitNumber: '105',\n        squareFootage: 950,\n        bedrooms: 2,\n        bathrooms: 1,\n      };\n\n      const response = await request(app)\n        .post('/api/residences')\n        .set('x-test-user-id', tenantUser.id)\n        .send(newResidenceData)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n\n    it('should prevent resident from creating residences', async () => {\n      const newResidenceData = {\n        buildingId: testBuilding.id,\n        unitNumber: '106',\n        squareFootage: 850,\n        bedrooms: 1,\n        bathrooms: 1,\n      };\n\n      const response = await request(app)\n        .post('/api/residences')\n        .set('x-test-user-id', residentUser.id)\n        .send(newResidenceData)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n  });\n\n  describe('Building and Residence Deletion by Role', () => {\n    it('should allow admin to delete buildings', async () => {\n      const response = await request(app)\n        .delete(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      expect(response.body.message).toBe('Building deleted successfully');\n\n      // Verify building is marked as inactive\n      const [deletedBuilding] = await db\n        .select()\n        .from(schema.buildings)\n        .where(eq(schema.buildings.id, testBuilding.id));\n\n      expect(deletedBuilding.isActive).toBe(false);\n    });\n\n    it('should allow manager to delete buildings in their organization', async () => {\n      const response = await request(app)\n        .delete(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', managerUser.id)\n        .expect(200);\n\n      expect(response.body.message).toBe('Building deleted successfully');\n    });\n\n    it('should prevent tenant from deleting buildings', async () => {\n      const response = await request(app)\n        .delete(`/api/buildings/${testBuilding.id}`)\n        .set('x-test-user-id', tenantUser.id)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n\n    it('should allow admin to delete residences', async () => {\n      const response = await request(app)\n        .delete(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      expect(response.body.message).toBe('Residence deleted successfully');\n\n      // Verify residence is marked as inactive\n      const [deletedResidence] = await db\n        .select()\n        .from(schema.residences)\n        .where(eq(schema.residences.id, testResidence.id));\n\n      expect(deletedResidence.isActive).toBe(false);\n    });\n\n    it('should allow manager to delete residences in their organization', async () => {\n      const response = await request(app)\n        .delete(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', managerUser.id)\n        .expect(200);\n\n      expect(response.body.message).toBe('Residence deleted successfully');\n    });\n\n    it('should prevent tenant from deleting residences', async () => {\n      const response = await request(app)\n        .delete(`/api/residences/${testResidence.id}`)\n        .set('x-test-user-id', tenantUser.id)\n        .expect(403);\n\n      expect(response.body.message).toContain('Insufficient permissions');\n    });\n  });\n\n  describe('Buildings API Access Control', () => {\n    it('should allow admin to access all buildings regardless of organization assignments', async () => {\n      // Test the specific bug scenario: admin user without organization assignments\n      // should still have access to all buildings\n      \n      // First, ensure admin user has no organization assignments\n      await db.delete(schema.userOrganizations).where(eq(schema.userOrganizations.userId, adminUser.id));\n      \n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      // Verify admin can see all buildings from different organizations\n      const buildingNames = response.body.map((b: any) => b.name);\n      expect(buildingNames).toContain('Test Building');\n      expect(buildingNames).toContain('Other Building');\n      \n      // Verify response includes proper organization information\n      const testBuildingResult = response.body.find((b: any) => b.name === 'Test Building');\n      expect(testBuildingResult).toBeDefined();\n      expect(testBuildingResult.organizationName).toBe('Test Organization');\n    });\n\n    it('should restrict manager to only buildings in their organizations', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', managerUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBe(1);\n      \n      // Manager should only see buildings from Test Organization\n      expect(response.body[0].name).toBe('Test Building');\n      expect(response.body[0].organizationName).toBe('Test Organization');\n    });\n\n    it('should return empty array for manager with no organization assignments', async () => {\n      // Remove manager's organization assignment\n      await db.delete(schema.userOrganizations).where(eq(schema.userOrganizations.userId, managerUser.id));\n      \n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', managerUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBe(0);\n    });\n\n    it('should allow tenant to access buildings through their residences', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', tenantUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBe(1);\n      expect(response.body[0].name).toBe('Test Building');\n    });\n\n    it('should allow resident to access buildings through their residences', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', residentUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBe(1);\n      expect(response.body[0].name).toBe('Test Building');\n    });\n  });\n\n  describe('Data Access by Role', () => {\n    it('should allow admin to view all buildings', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      expect(response.body.buildings).toBeDefined();\n      expect(response.body.buildings.length).toBeGreaterThanOrEqual(2);\n    });\n\n    it('should allow manager to view buildings in their organization', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', managerUser.id)\n        .expect(200);\n\n      expect(response.body.buildings).toBeDefined();\n      // Manager should see at least the test building\n      const buildingIds = response.body.buildings.map((b: any) => b.id);\n      expect(buildingIds).toContain(testBuilding.id);\n    });\n\n    it('should allow tenant to view their building', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', tenantUser.id)\n        .expect(200);\n\n      expect(response.body.buildings).toBeDefined();\n      // Tenant should see their building\n      const buildingIds = response.body.buildings.map((b: any) => b.id);\n      expect(buildingIds).toContain(testBuilding.id);\n    });\n\n    it('should allow admin to view all residences', async () => {\n      const response = await request(app)\n        .get('/api/residences')\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      expect(response.body.residences).toBeDefined();\n      expect(response.body.residences.length).toBeGreaterThanOrEqual(1);\n    });\n\n    it('should allow tenant to view their residence', async () => {\n      const response = await request(app)\n        .get('/api/residences')\n        .set('x-test-user-id', tenantUser.id)\n        .expect(200);\n\n      expect(response.body.residences).toBeDefined();\n      // Tenant should see their residence\n      const residenceIds = response.body.residences.map((r: any) => r.id);\n      expect(residenceIds).toContain(testResidence.id);\n    });\n  });\n});"],"version":3}