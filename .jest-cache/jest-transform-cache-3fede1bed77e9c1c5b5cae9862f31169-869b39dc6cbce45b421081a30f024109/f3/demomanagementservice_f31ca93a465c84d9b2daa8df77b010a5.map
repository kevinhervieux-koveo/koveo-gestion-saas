{"file":"/home/runner/workspace/server/services/demo-management-service.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/services/demo-management-service.ts"],"sourcesContent":["import { Pool } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport * as schema from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\n\n/**\n * Demo Management Service.\n *\n * Provides backend services for managing demo organizations in production.\n * This service ensures demo data is always available and properly synchronized.\n */\nexport class DemoManagementService {\n  private static readonly DEMO_ORG_NAME = 'Demo';\n  private static readonly OPEN_DEMO_ORG_NAME = 'Open Demo';\n\n  /**\n   * Check if demo organizations are healthy and properly configured.\n   */\n  public static async checkDemoHealth(): Promise<{\n    healthy: boolean;\n    status: any;\n    message: string;\n    timestamp: string;\n  }> {\n    return {\n      healthy: true,\n      status: { message: 'Demo sync functionality removed' },\n      message: 'Demo organizations managed locally only',\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Ensure demo organizations exist and are properly configured.\n   * This is a safe operation that can be called during application startup.\n   * DISABLED: Demo organization creation has been disabled per user request.\n   */\n  public static async ensureDemoOrganizations(): Promise<{\n    success: boolean;\n    message: string;\n    demoOrgId?: string;\n    openDemoOrgId?: string;\n  }> {\n    // Demo organizations functionality disabled per user request - no database operations\n    console.log('‚úÖ Demo organizations functionality disabled (skipped)');\n\n    return {\n      success: true,\n      message: 'Demo organizations functionality disabled - skipping all database operations',\n    };\n  }\n\n  /**\n   * Force recreation of demo organizations.\n   * DISABLED: Demo organization functionality has been disabled per user request.\n   */\n  public static async recreateDemoOrganizations(): Promise<{\n    success: boolean;\n    message: string;\n    demoOrgId?: string;\n    openDemoOrgId?: string;\n  }> {\n    console.log('‚úÖ Demo organizations recreation skipped (disabled)');\n\n    return {\n      success: true,\n      message: 'Demo organizations functionality disabled - recreation skipped',\n    };\n  }\n\n  /**\n   * Get demo organization information.\n   * DISABLED: Demo organization functionality has been disabled per user request.\n   */\n  public static async getDemoOrganizationInfo(): Promise<{\n    demo?: any;\n    openDemo?: any;\n    stats: {\n      demoBuildings: number;\n      demoUsers: number;\n      openDemoBuildings: number;\n      openDemoUsers: number;\n    };\n  }> {\n    console.log('‚úÖ Demo organizations info retrieval skipped (disabled)');\n\n    return {\n      stats: {\n        demoBuildings: 0,\n        demoUsers: 0,\n        openDemoBuildings: 0,\n        openDemoUsers: 0,\n      },\n    };\n  }\n\n  /**\n   * Initialize demo organizations during application startup.\n   * DISABLED: Demo organization functionality has been disabled per user request.\n   */\n  public static async initializeDemoOrganizations(): Promise<void> {\n    console.log('‚úÖ Demo organizations initialization skipped (disabled)');\n    // Demo organizations functionality disabled per user request\n    return;\n  }\n\n  /**\n   * PRODUCTION FIX: Create basic demo organizations if they don't exist.\n   * This ensures the database has the required organizations for production.\n   */\n  private static async createBasicOrganizationsIfMissing(): Promise<void> {\n    try {\n      const { Pool } = await import('@neondatabase/serverless');\n      const { drizzle } = await import('drizzle-orm/neon-serverless');\n      const { eq } = await import('drizzle-orm');\n      const schema = await import('../../shared/schema');\n\n      // Use shared database connection to avoid multiple pools\n      const { db } = await import('../db');\n\n      // Check if Demo organization exists\n      const existingDemo = await db\n        .select()\n        .from(schema.organizations)\n        .where(eq(schema.organizations.name, 'Demo'))\n        .limit(1);\n\n      if (existingDemo.length === 0) {\n        console.log('üìù Creating Demo organization...');\n        await db.insert(schema.organizations).values({\n          name: 'Demo',\n          type: 'demo',\n          address: '123 Demo Street',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H1A 1A1',\n          isActive: true,\n        });\n      }\n\n      // Check if Open Demo organization exists\n      const existingOpenDemo = await db\n        .select()\n        .from(schema.organizations)\n        .where(eq(schema.organizations.name, 'Open Demo'))\n        .limit(1);\n\n      if (existingOpenDemo.length === 0) {\n        console.log('üìù Creating Open Demo organization...');\n        await db.insert(schema.organizations).values({\n          name: 'Open Demo',\n          type: 'demo',\n          address: '456 Demo Avenue',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H1B 1B1',\n          isActive: true,\n        });\n      }\n\n      console.log('‚úÖ Demo organizations are properly configured');\n    } catch (error) {\n      // Continue anyway - this is not critical for production functionality\n      console.log('‚ö†Ô∏è Demo organizations setup failed, but continuing...');\n    }\n  }\n\n  /**\n   * Scheduled maintenance for demo organizations.\n   * This can be called periodically to ensure demo data stays fresh.\n   */\n  public static async scheduledMaintenance(): Promise<{\n    success: boolean;\n    message: string;\n    actions: string[];\n  }> {\n    const actions: string[] = [];\n\n    try {\n      console.log('üîß Running scheduled demo maintenance...');\n\n      // Check current health\n      const health = await this.checkDemoHealth();\n      actions.push(`Health check: ${health.healthy ? 'HEALTHY' : 'UNHEALTHY'}`);\n\n      if (!health.healthy) {\n        // Note: Demo sync to production has been removed\n        actions.push('Demo sync functionality removed - local management only');\n\n        // Re-check health\n        const newHealth = await this.checkDemoHealth();\n        actions.push(`Post-sync health: ${newHealth.healthy ? 'HEALTHY' : 'STILL_UNHEALTHY'}`);\n      }\n\n      console.log('‚úÖ Scheduled demo maintenance completed');\n\n      return {\n        success: true,\n        message: 'Scheduled maintenance completed successfully',\n        actions,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Scheduled maintenance failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        actions,\n      };\n    }\n  }\n}\n\nexport default DemoManagementService;\n"],"version":3}