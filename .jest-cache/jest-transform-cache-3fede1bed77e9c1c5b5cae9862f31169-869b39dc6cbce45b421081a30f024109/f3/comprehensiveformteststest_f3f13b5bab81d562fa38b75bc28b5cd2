a0142184e7d2c35179317d5f7a83d75f
"use strict";
/**
 * Comprehensive Form Validation Test Suite
 *
 * This test suite covers ALL forms in the Koveo Gestion application to ensure
 * proper validation, UUID handling, error messages, and form submission logic.
 *
 * Forms covered:
 * 1. Authentication Forms (login, register, forgot/reset password)
 * 2. User Management Forms (invitations, profile settings, password change)
 * 3. Property Management Forms (buildings, residences, organization)
 * 4. Financial Forms (bills, budgets, payments)
 * 5. Document Management Forms (upload, categorization)
 * 6. Maintenance Forms (demands, bug reports, feature requests)
 * 7. Operational Forms (common spaces, bookings, settings)
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const zod_1 = require("zod");
// Authentication form schemas
const loginSchema = zod_1.z.object({
    email: zod_1.z
        .string()
        .min(1, 'Email address is required to sign in')
        .email('Please enter a valid email address (example: user@domain.com)')
        .toLowerCase(),
    password: zod_1.z
        .string()
        .min(1, 'Password is required to sign in')
        .min(8, 'Password must be at least 8 characters long'),
});
const forgotPasswordSchema = zod_1.z.object({
    email: zod_1.z.string()
        .min(1, 'Adresse e-mail requise pour la réinitialisation')
        .email('Veuillez entrer une adresse e-mail valide (exemple: utilisateur@domaine.com)'),
});
const resetPasswordSchema = zod_1.z
    .object({
    password: zod_1.z
        .string()
        .min(1, 'Le nouveau mot de passe est requis')
        .min(8, 'Le mot de passe doit contenir au moins 8 caractères')
        .max(100, 'Le mot de passe ne peut pas dépasser 100 caractères')
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Le mot de passe doit contenir au moins une minuscule, une majuscule et un chiffre'),
    confirmPassword: zod_1.z.string().min(1, 'La confirmation du mot de passe est requise'),
})
    .refine((data) => data.password === data.confirmPassword, {
    message: 'Les mots de passe ne correspondent pas',
    path: ['confirmPassword'],
});
// User management form schemas
const invitationSchema = zod_1.z
    .object({
    email: zod_1.z.string().email('Please enter a valid email address').optional(),
    firstName: zod_1.z.string().max(50, 'First name must be less than 50 characters').optional(),
    lastName: zod_1.z.string().max(50, 'Last name must be less than 50 characters').optional(),
    role: zod_1.z.enum(['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident']),
    organizationId: zod_1.z.string().min(1, 'Please select an organization'),
    buildingId: zod_1.z.string().optional(),
    residenceId: zod_1.z.string().optional(),
    personalMessage: zod_1.z.string().max(500, 'Personal message must be less than 500 characters').optional(),
    expiryDays: zod_1.z.number().min(1, 'Expiry days must be between 1 and 30').max(30, 'Expiry days must be between 1 and 30'),
})
    .refine((data) => {
    if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {
        return !!data.firstName && !!data.lastName;
    }
    return !!data.email;
}, {
    message: 'Email is required for regular invitations, first and last name for demo users',
    path: ['email'],
});
const profileSchema = zod_1.z.object({
    firstName: zod_1.z.string().min(1, 'First name is required').max(50, 'First name must be less than 50 characters'),
    lastName: zod_1.z.string().min(1, 'Last name is required').max(50, 'Last name must be less than 50 characters'),
    email: zod_1.z.string().min(1, 'Email address is required').email('Please enter a valid email address'),
    username: zod_1.z.string().min(3, 'Username must be between 3 and 30 characters').max(30, 'Username must be between 3 and 30 characters'),
    phone: zod_1.z.string().optional(),
    language: zod_1.z.enum(['fr', 'en']),
});
// Property management form schemas
const organizationFormSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Organization name is required').max(200, 'Organization name must be less than 200 characters'),
    type: zod_1.z.string().min(1, 'Please select an organization type'),
    address: zod_1.z.string().min(1, 'Street address is required').max(300, 'Address must be less than 300 characters'),
    city: zod_1.z.string().min(1, 'City name is required').max(100, 'City name must be less than 100 characters'),
    province: zod_1.z.string().min(1, 'Province is required').default('QC'),
    postalCode: zod_1.z.string().min(1, 'Postal code is required').regex(/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$|^[A-Z]\d[A-Z]\d[A-Z]\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)'),
    phone: zod_1.z.string().optional(),
    email: zod_1.z.string().email('Please enter a valid email address').optional().or(zod_1.z.literal('')),
    website: zod_1.z.string().url('Website must be a valid URL').optional().or(zod_1.z.literal('')),
    registrationNumber: zod_1.z.string().max(50, 'Registration number must be less than 50 characters').optional(),
});
const buildingFormSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Building name is required').max(255, 'Building name must be less than 255 characters'),
    organizationId: zod_1.z.string().min(1, 'Organization is required'),
    address: zod_1.z.string().min(1, 'Address is required').max(500, 'Address must be less than 500 characters'),
    city: zod_1.z.string().min(1, 'City is required').max(100, 'City must be less than 100 characters'),
    province: zod_1.z.string().min(1, 'Province is required'),
    postalCode: zod_1.z.string().min(1, 'Postal code is required').max(20, 'Postal code must be less than 20 characters'),
    buildingType: zod_1.z.enum(['apartment', 'condo', 'rental']),
    totalUnits: zod_1.z.number().min(1, 'Total units must be at least 1').max(1000, 'Total units must be less than 1000'),
    yearBuilt: zod_1.z.number().min(1800, 'Year built must be after 1800').max(new Date().getFullYear(), 'Year built cannot be in the future').optional(),
    totalFloors: zod_1.z.number().min(1, 'Total floors must be at least 1').max(200, 'Total floors must be less than 200').optional(),
    parkingSpaces: zod_1.z.number().min(0, 'Parking spaces cannot be negative').max(2000, 'Parking spaces must be less than 2000').optional(),
    storageSpaces: zod_1.z.number().min(0, 'Storage spaces cannot be negative').max(2000, 'Storage spaces must be less than 2000').optional(),
    managementCompany: zod_1.z.string().max(255, 'Management company name must be less than 255 characters').optional(),
});
const residenceEditSchema = zod_1.z.object({
    unitNumber: zod_1.z.string().min(1, 'Unit number is required'),
    floor: zod_1.z.coerce.number().min(0, 'Floor must be between 0 and 50').max(50, 'Floor must be between 0 and 50').optional(),
    squareFootage: zod_1.z.union([zod_1.z.coerce.number().min(1, 'Square footage must be between 1 and 10,000').max(10000, 'Square footage must be between 1 and 10,000'), zod_1.z.literal('')]).optional(),
    bedrooms: zod_1.z.coerce.number().min(0, 'Bedrooms must be between 0 and 10').max(10, 'Bedrooms must be between 0 and 10').optional(),
    bathrooms: zod_1.z.union([zod_1.z.coerce.number().min(0, 'Bathrooms must be between 0 and 10').max(10, 'Bathrooms must be between 0 and 10'), zod_1.z.literal('')]).optional(),
    balcony: zod_1.z.boolean(),
    parkingSpaceNumbers: zod_1.z.array(zod_1.z.string()).optional(),
    storageSpaceNumbers: zod_1.z.array(zod_1.z.string()).optional(),
    ownershipPercentage: zod_1.z.union([zod_1.z.coerce.number().min(0, 'Ownership percentage must be between 0 and 100').max(100, 'Ownership percentage must be between 0 and 100'), zod_1.z.literal('')]).optional(),
    monthlyFees: zod_1.z.union([zod_1.z.coerce.number().min(0, 'Monthly fees must be a positive amount').max(99999, 'Monthly fees must be less than $99,999'), zod_1.z.literal('')]).optional(),
});
// Financial form schemas
const billFormSchema = zod_1.z.object({
    title: zod_1.z.string().min(1, 'Bill title is required').max(200, 'Title must be less than 200 characters'),
    description: zod_1.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_1.z.enum([
        'insurance', 'maintenance', 'salary', 'utilities', 'cleaning', 'security',
        'landscaping', 'professional_services', 'administration', 'repairs',
        'supplies', 'taxes', 'technology', 'reserves', 'other'
    ]),
    vendor: zod_1.z.string().max(150, 'Vendor name must be less than 150 characters').optional(),
    paymentType: zod_1.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_1.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    totalAmount: zod_1.z.string().min(1, 'Amount is required').refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num > 0 && num <= 999999.99;
    }, 'Amount must be between $0.01 and $999,999.99'),
    startDate: zod_1.z.string().min(1, 'Start date is required').refine((val) => {
        return !isNaN(Date.parse(val));
    }, 'Start date must be a valid date'),
    endDate: zod_1.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return !isNaN(Date.parse(val));
    }, 'End date must be a valid date'),
    status: zod_1.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),
    notes: zod_1.z.string().max(2000, 'Notes must be less than 2000 characters').optional(),
});
// Maintenance and operational form schemas
const demandSchema = zod_1.z.object({
    type: zod_1.z.enum(['maintenance', 'complaint', 'information', 'other']),
    description: zod_1.z.string().min(10, 'Description must be at least 10 characters').max(2000, 'Description must not exceed 2000 characters'),
    buildingId: zod_1.z.string().uuid('Building ID must be a valid UUID').optional(),
    residenceId: zod_1.z.string().uuid('Residence ID must be a valid UUID').optional(),
    assignationBuildingId: zod_1.z.string().uuid('Assignation building ID must be a valid UUID').optional(),
    assignationResidenceId: zod_1.z.string().uuid('Assignation residence ID must be a valid UUID').optional(),
});
const bugFormSchema = zod_1.z.object({
    title: zod_1.z.string().min(1, 'Bug title is required').max(200, 'Title must be less than 200 characters'),
    description: zod_1.z.string().min(10, 'Bug description must be at least 10 characters').max(2000, 'Description must be less than 2000 characters'),
    category: zod_1.z.enum(['ui_ux', 'functionality', 'performance', 'data', 'security', 'integration', 'other']),
    page: zod_1.z.string().min(1, 'Page is required'),
    priority: zod_1.z.enum(['low', 'medium', 'high', 'critical']).default('medium'),
    reproductionSteps: zod_1.z.string().max(1000, 'Reproduction steps must be less than 1000 characters').optional(),
    environment: zod_1.z.string().max(500, 'Environment info must be less than 500 characters').optional(),
});
const featureRequestSchema = zod_1.z.object({
    title: zod_1.z.string().min(1, 'Title is required').max(200, 'Title must be less than 200 characters'),
    description: zod_1.z.string().min(10, 'Description must be at least 10 characters').max(2000, 'Description must be less than 2000 characters'),
    need: zod_1.z.string().min(5, 'Need must be at least 5 characters').max(500, 'Need must be less than 500 characters'),
    category: zod_1.z.enum([
        'dashboard', 'property_management', 'resident_management', 'financial_management',
        'maintenance', 'document_management', 'communication', 'reports', 'mobile_app', 'integrations', 'other'
    ]),
    page: zod_1.z.string().min(1, 'Page is required'),
});
// Document management schemas
const documentSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Document name is required').max(255, 'Document name must be less than 255 characters'),
    type: zod_1.z.string().min(1, 'Document type is required'),
    dateReference: zod_1.z.string().min(1, 'Reference date is required').refine((val) => {
        return !isNaN(Date.parse(val));
    }, 'Reference date must be a valid date'),
    isVisibleToTenants: zod_1.z.boolean().default(true),
    buildingId: zod_1.z.string().uuid('Building ID must be a valid UUID').optional(),
    residenceId: zod_1.z.string().uuid('Residence ID must be a valid UUID').optional(),
});
(0, globals_1.describe)('Comprehensive Form Validation Tests', () => {
    (0, globals_1.describe)('Authentication Forms', () => {
        (0, globals_1.describe)('Login Form', () => {
            (0, globals_1.it)('should validate correct login data', () => {
                const validData = {
                    email: 'user@example.com',
                    password: 'validPassword123'
                };
                (0, globals_1.expect)(() => loginSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should reject invalid email format', () => {
                const invalidData = {
                    email: 'invalid-email',
                    password: 'validPassword123'
                };
                (0, globals_1.expect)(() => loginSchema.parse(invalidData)).toThrow();
            });
            (0, globals_1.it)('should reject short password', () => {
                const invalidData = {
                    email: 'user@example.com',
                    password: 'short'
                };
                (0, globals_1.expect)(() => loginSchema.parse(invalidData)).toThrow();
            });
            (0, globals_1.it)('should require both email and password', () => {
                (0, globals_1.expect)(() => loginSchema.parse({ email: 'user@example.com' })).toThrow();
                (0, globals_1.expect)(() => loginSchema.parse({ password: 'password123' })).toThrow();
                (0, globals_1.expect)(() => loginSchema.parse({})).toThrow();
            });
        });
        (0, globals_1.describe)('Forgot Password Form', () => {
            (0, globals_1.it)('should validate correct email', () => {
                const validData = { email: 'user@example.com' };
                (0, globals_1.expect)(() => forgotPasswordSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should reject invalid email', () => {
                const invalidData = { email: 'invalid-email' };
                (0, globals_1.expect)(() => forgotPasswordSchema.parse(invalidData)).toThrow();
            });
            (0, globals_1.it)('should require email field', () => {
                (0, globals_1.expect)(() => forgotPasswordSchema.parse({})).toThrow();
                (0, globals_1.expect)(() => forgotPasswordSchema.parse({ email: '' })).toThrow();
            });
        });
        (0, globals_1.describe)('Reset Password Form', () => {
            (0, globals_1.it)('should validate strong password with confirmation', () => {
                const validData = {
                    password: 'StrongPassword123!',
                    confirmPassword: 'StrongPassword123!'
                };
                (0, globals_1.expect)(() => resetPasswordSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should reject weak passwords', () => {
                const weakPasswords = [
                    'short', // too short
                    'alllowercase123', // no uppercase
                    'ALLUPPERCASE123', // no lowercase
                    'NoNumbers!', // no numbers
                ];
                weakPasswords.forEach(password => {
                    const data = { password, confirmPassword: password };
                    (0, globals_1.expect)(() => resetPasswordSchema.parse(data)).toThrow();
                });
            });
            (0, globals_1.it)('should reject mismatched password confirmation', () => {
                const invalidData = {
                    password: 'StrongPassword123!',
                    confirmPassword: 'DifferentPassword123!'
                };
                (0, globals_1.expect)(() => resetPasswordSchema.parse(invalidData)).toThrow();
            });
        });
    });
    (0, globals_1.describe)('User Management Forms', () => {
        (0, globals_1.describe)('Invitation Form', () => {
            (0, globals_1.it)('should validate regular user invitation', () => {
                const validData = {
                    email: 'newuser@example.com',
                    role: 'resident',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000',
                    expiryDays: 7
                };
                (0, globals_1.expect)(() => invitationSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate demo user invitation', () => {
                const validData = {
                    firstName: 'Demo',
                    lastName: 'User',
                    role: 'demo_resident',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000',
                    expiryDays: 30
                };
                (0, globals_1.expect)(() => invitationSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should require email for regular users', () => {
                const invalidData = {
                    role: 'resident',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000',
                    expiryDays: 7
                };
                (0, globals_1.expect)(() => invitationSchema.parse(invalidData)).toThrow();
            });
            (0, globals_1.it)('should require names for demo users', () => {
                const invalidData = {
                    role: 'demo_resident',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000',
                    expiryDays: 7
                };
                (0, globals_1.expect)(() => invitationSchema.parse(invalidData)).toThrow();
            });
            (0, globals_1.it)('should validate expiry days range', () => {
                const baseData = {
                    email: 'user@example.com',
                    role: 'resident',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000'
                };
                (0, globals_1.expect)(() => invitationSchema.parse({ ...baseData, expiryDays: 0 })).toThrow();
                (0, globals_1.expect)(() => invitationSchema.parse({ ...baseData, expiryDays: 31 })).toThrow();
                (0, globals_1.expect)(() => invitationSchema.parse({ ...baseData, expiryDays: 15 })).not.toThrow();
            });
        });
        (0, globals_1.describe)('Profile Form', () => {
            (0, globals_1.it)('should validate complete profile data', () => {
                const validData = {
                    firstName: 'Jean',
                    lastName: 'Dupont',
                    email: 'jean.dupont@example.com',
                    username: 'jdupont',
                    language: 'fr'
                };
                (0, globals_1.expect)(() => profileSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate name character restrictions', () => {
                const validNames = ['Jean', 'Marie-Claire', "O'Connor", 'José'];
                const invalidNames = ['123Jean', 'Jean@', 'Jean#Test'];
                validNames.forEach(name => {
                    const data = {
                        firstName: name,
                        lastName: 'Dupont',
                        email: 'test@example.com',
                        username: 'testuser',
                        language: 'fr'
                    };
                    (0, globals_1.expect)(() => profileSchema.parse(data)).not.toThrow();
                });
                invalidNames.forEach(name => {
                    const data = {
                        firstName: name,
                        lastName: 'Dupont',
                        email: 'test@example.com',
                        username: 'testuser',
                        language: 'fr'
                    };
                    (0, globals_1.expect)(() => profileSchema.parse(data)).toThrow();
                });
            });
            (0, globals_1.it)('should validate username format', () => {
                const validUsernames = ['user123', 'jean.dupont', 'user_name', 'test-user'];
                const invalidUsernames = ['u', 'user name', 'user@name', 'a'.repeat(31)];
                const baseData = {
                    firstName: 'Jean',
                    lastName: 'Dupont',
                    email: 'test@example.com',
                    language: 'fr'
                };
                validUsernames.forEach(username => {
                    (0, globals_1.expect)(() => profileSchema.parse({ ...baseData, username })).not.toThrow();
                });
                invalidUsernames.forEach(username => {
                    (0, globals_1.expect)(() => profileSchema.parse({ ...baseData, username })).toThrow();
                });
            });
        });
    });
    (0, globals_1.describe)('Property Management Forms', () => {
        (0, globals_1.describe)('Organization Form', () => {
            (0, globals_1.it)('should validate complete organization data', () => {
                const validData = {
                    name: 'Maple Property Management',
                    type: 'management_company',
                    address: '123 Rue Saint-Denis',
                    city: 'Montréal',
                    province: 'QC',
                    postalCode: 'H1A 1B1'
                };
                (0, globals_1.expect)(() => organizationFormSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate Canadian postal code format', () => {
                const validPostalCodes = ['H1A 1B1', 'H1A1B1', 'M5V 3L9', 'K1A0A6'];
                const invalidPostalCodes = ['12345', 'H1A', 'H1A 1B', '1A1 B1C', 'HH1 1B1'];
                const baseData = {
                    name: 'Test Org',
                    type: 'condo_association',
                    address: '123 Test St',
                    city: 'Montréal',
                    province: 'QC'
                };
                validPostalCodes.forEach(postalCode => {
                    (0, globals_1.expect)(() => organizationFormSchema.parse({ ...baseData, postalCode })).not.toThrow();
                });
                invalidPostalCodes.forEach(postalCode => {
                    (0, globals_1.expect)(() => organizationFormSchema.parse({ ...baseData, postalCode })).toThrow();
                });
            });
            (0, globals_1.it)('should validate optional fields properly', () => {
                const baseData = {
                    name: 'Test Org',
                    type: 'condo_association',
                    address: '123 Test St',
                    city: 'Montréal',
                    province: 'QC',
                    postalCode: 'H1A 1B1'
                };
                // Valid with optional fields
                (0, globals_1.expect)(() => organizationFormSchema.parse({
                    ...baseData,
                    email: 'contact@test.com',
                    website: 'https://test.com',
                    phone: '(514) 123-4567'
                })).not.toThrow();
                // Valid with empty optional fields
                (0, globals_1.expect)(() => organizationFormSchema.parse({
                    ...baseData,
                    email: '',
                    website: ''
                })).not.toThrow();
                // Invalid email format
                (0, globals_1.expect)(() => organizationFormSchema.parse({
                    ...baseData,
                    email: 'invalid-email'
                })).toThrow();
                // Invalid website format
                (0, globals_1.expect)(() => organizationFormSchema.parse({
                    ...baseData,
                    website: 'not-a-url'
                })).toThrow();
            });
        });
        (0, globals_1.describe)('Building Form', () => {
            (0, globals_1.it)('should validate complete building data', () => {
                const validData = {
                    name: 'Sunset Towers',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000',
                    address: '456 Main Street',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H3A 1B1',
                    buildingType: 'condo',
                    totalUnits: 50,
                    yearBuilt: 2020,
                    totalFloors: 5,
                    parkingSpaces: 30,
                    storageSpaces: 20
                };
                (0, globals_1.expect)(() => buildingFormSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate required fields', () => {
                const requiredFields = ['name', 'organizationId', 'address', 'city', 'province', 'postalCode', 'buildingType', 'totalUnits'];
                const baseData = {
                    name: 'Test Building',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000',
                    address: '123 Test St',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1A 1B1',
                    buildingType: 'condo',
                    totalUnits: 10
                };
                requiredFields.forEach(field => {
                    const incompleteData = { ...baseData };
                    delete incompleteData[field];
                    (0, globals_1.expect)(() => buildingFormSchema.parse(incompleteData)).toThrow();
                });
            });
            (0, globals_1.it)('should validate numeric ranges', () => {
                const baseData = {
                    name: 'Test Building',
                    organizationId: '123e4567-e89b-12d3-a456-426614174000',
                    address: '123 Test St',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1A 1B1',
                    buildingType: 'condo'
                };
                // Valid ranges
                (0, globals_1.expect)(() => buildingFormSchema.parse({ ...baseData, totalUnits: 1 })).not.toThrow();
                (0, globals_1.expect)(() => buildingFormSchema.parse({ ...baseData, totalUnits: 500 })).not.toThrow();
                (0, globals_1.expect)(() => buildingFormSchema.parse({ ...baseData, totalUnits: 1000 })).not.toThrow();
                // Invalid ranges
                (0, globals_1.expect)(() => buildingFormSchema.parse({ ...baseData, totalUnits: 0 })).toThrow();
                (0, globals_1.expect)(() => buildingFormSchema.parse({ ...baseData, totalUnits: 1001 })).toThrow();
                (0, globals_1.expect)(() => buildingFormSchema.parse({ ...baseData, totalUnits: -5 })).toThrow();
            });
        });
        (0, globals_1.describe)('Residence Edit Form', () => {
            (0, globals_1.it)('should validate complete residence data', () => {
                const validData = {
                    unitNumber: '101A',
                    floor: 1,
                    squareFootage: 1200,
                    bedrooms: 2,
                    bathrooms: 1.5,
                    balcony: true,
                    parkingSpaceNumbers: ['P1', 'P2'],
                    storageSpaceNumbers: ['S1'],
                    ownershipPercentage: 25.5,
                    monthlyFees: 350.00
                };
                (0, globals_1.expect)(() => residenceEditSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should handle optional fields correctly', () => {
                const minimalData = {
                    unitNumber: '101',
                    balcony: false
                };
                (0, globals_1.expect)(() => residenceEditSchema.parse(minimalData)).not.toThrow();
            });
            (0, globals_1.it)('should validate numeric ranges for optional fields', () => {
                const baseData = {
                    unitNumber: '101',
                    balcony: true
                };
                // Valid optional numeric values
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, floor: 0 })).not.toThrow();
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, floor: 50 })).not.toThrow();
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, bedrooms: 0 })).not.toThrow();
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, bedrooms: 10 })).not.toThrow();
                // Invalid ranges
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, floor: -1 })).toThrow();
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, floor: 51 })).toThrow();
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, bedrooms: -1 })).toThrow();
                (0, globals_1.expect)(() => residenceEditSchema.parse({ ...baseData, bedrooms: 11 })).toThrow();
            });
        });
    });
    (0, globals_1.describe)('Financial Forms', () => {
        (0, globals_1.describe)('Bill Form', () => {
            (0, globals_1.it)('should validate complete bill data', () => {
                const validData = {
                    title: 'Monthly Electricity Bill',
                    description: 'Electricity consumption for January 2025',
                    category: 'utilities',
                    vendor: 'Hydro-Quebec',
                    paymentType: 'recurrent',
                    schedulePayment: 'monthly',
                    totalAmount: '150.75',
                    startDate: '2025-01-01',
                    endDate: '2025-12-31',
                    status: 'draft',
                    notes: 'Annual electricity contract'
                };
                (0, globals_1.expect)(() => billFormSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate required fields', () => {
                const requiredFields = ['title', 'category', 'paymentType', 'totalAmount', 'startDate', 'status'];
                const baseData = {
                    title: 'Test Bill',
                    category: 'maintenance',
                    paymentType: 'unique',
                    totalAmount: '100.00',
                    startDate: '2025-01-01',
                    status: 'draft'
                };
                requiredFields.forEach(field => {
                    const incompleteData = { ...baseData };
                    delete incompleteData[field];
                    (0, globals_1.expect)(() => billFormSchema.parse(incompleteData)).toThrow();
                });
            });
            (0, globals_1.it)('should validate amount format and range', () => {
                const baseData = {
                    title: 'Test Bill',
                    category: 'utilities',
                    paymentType: 'unique',
                    startDate: '2025-01-01',
                    status: 'draft'
                };
                // Valid amounts
                const validAmounts = ['0.01', '100.00', '1500.50', '999999.99'];
                validAmounts.forEach(amount => {
                    (0, globals_1.expect)(() => billFormSchema.parse({ ...baseData, totalAmount: amount })).not.toThrow();
                });
                // Invalid amounts
                const invalidAmounts = ['0', '0.00', '-100', '1000000.00', 'not-a-number', ''];
                invalidAmounts.forEach(amount => {
                    (0, globals_1.expect)(() => billFormSchema.parse({ ...baseData, totalAmount: amount })).toThrow();
                });
            });
            (0, globals_1.it)('should validate date formats', () => {
                const baseData = {
                    title: 'Test Bill',
                    category: 'utilities',
                    paymentType: 'unique',
                    totalAmount: '100.00',
                    status: 'draft'
                };
                // Valid dates
                const validDates = ['2025-01-01', '2025-12-31', '2024-02-29'];
                validDates.forEach(date => {
                    (0, globals_1.expect)(() => billFormSchema.parse({ ...baseData, startDate: date })).not.toThrow();
                    (0, globals_1.expect)(() => billFormSchema.parse({ ...baseData, startDate: '2025-01-01', endDate: date })).not.toThrow();
                });
                // Invalid dates
                const invalidDates = ['invalid-date', '2025-13-01', '2025-02-30', ''];
                invalidDates.forEach(date => {
                    (0, globals_1.expect)(() => billFormSchema.parse({ ...baseData, startDate: date })).toThrow();
                });
            });
        });
    });
    (0, globals_1.describe)('Maintenance and Operational Forms', () => {
        (0, globals_1.describe)('Demand Form', () => {
            (0, globals_1.it)('should validate complete demand data', () => {
                const validData = {
                    type: 'maintenance',
                    description: 'The heating system in unit 101 is not working properly and needs urgent repair.',
                    buildingId: '123e4567-e89b-12d3-a456-426614174000',
                    residenceId: '123e4567-e89b-12d3-a456-426614174001',
                    assignationBuildingId: '123e4567-e89b-12d3-a456-426614174002',
                    assignationResidenceId: '123e4567-e89b-12d3-a456-426614174003'
                };
                (0, globals_1.expect)(() => demandSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate description length requirements', () => {
                const baseData = {
                    type: 'complaint',
                    buildingId: '123e4567-e89b-12d3-a456-426614174000'
                };
                // Valid descriptions
                (0, globals_1.expect)(() => demandSchema.parse({ ...baseData, description: 'This is a valid description that meets the minimum length requirement.' })).not.toThrow();
                // Too short
                (0, globals_1.expect)(() => demandSchema.parse({ ...baseData, description: 'Short' })).toThrow();
                // Too long
                (0, globals_1.expect)(() => demandSchema.parse({ ...baseData, description: 'A'.repeat(2001) })).toThrow();
                // Empty
                (0, globals_1.expect)(() => demandSchema.parse({ ...baseData, description: '' })).toThrow();
            });
            (0, globals_1.it)('should handle optional UUID fields', () => {
                const minimalData = {
                    type: 'information',
                    description: 'This is a valid information request with sufficient length.'
                };
                (0, globals_1.expect)(() => demandSchema.parse(minimalData)).not.toThrow();
            });
            (0, globals_1.it)('should validate UUID format when provided', () => {
                const baseData = {
                    type: 'maintenance',
                    description: 'This is a valid maintenance request with proper description length.'
                };
                // Valid UUIDs
                const validUUID = '123e4567-e89b-12d3-a456-426614174000';
                (0, globals_1.expect)(() => demandSchema.parse({ ...baseData, buildingId: validUUID })).not.toThrow();
                // Invalid UUIDs
                const invalidUUIDs = ['not-a-uuid', '123', '', 'invalid-uuid-format'];
                invalidUUIDs.forEach(uuid => {
                    (0, globals_1.expect)(() => demandSchema.parse({ ...baseData, buildingId: uuid })).toThrow();
                });
            });
        });
        (0, globals_1.describe)('Bug Report Form', () => {
            (0, globals_1.it)('should validate complete bug report', () => {
                const validData = {
                    title: 'Login button not working on mobile devices',
                    description: 'When I try to click the login button on my iPhone, nothing happens and no error message is displayed.',
                    category: 'ui_ux',
                    page: '/login',
                    priority: 'high',
                    reproductionSteps: '1. Open app on iPhone\n2. Navigate to login page\n3. Click login button\n4. Nothing happens',
                    environment: 'iPhone 12, iOS 15.0, Safari browser'
                };
                (0, globals_1.expect)(() => bugFormSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate required fields only', () => {
                const minimalData = {
                    title: 'Simple bug report',
                    description: 'This is a minimal bug report with required fields only.',
                    category: 'functionality',
                    page: '/dashboard'
                };
                (0, globals_1.expect)(() => bugFormSchema.parse(minimalData)).not.toThrow();
            });
            (0, globals_1.it)('should validate text length limits', () => {
                const baseData = {
                    category: 'other',
                    page: '/test'
                };
                // Title length validation
                (0, globals_1.expect)(() => bugFormSchema.parse({ ...baseData, title: '', description: 'Valid description text' })).toThrow();
                (0, globals_1.expect)(() => bugFormSchema.parse({ ...baseData, title: 'A'.repeat(201), description: 'Valid description' })).toThrow();
                // Description length validation
                (0, globals_1.expect)(() => bugFormSchema.parse({ ...baseData, title: 'Valid title', description: 'Short' })).toThrow();
                (0, globals_1.expect)(() => bugFormSchema.parse({ ...baseData, title: 'Valid title', description: 'A'.repeat(2001) })).toThrow();
            });
        });
        (0, globals_1.describe)('Feature Request Form', () => {
            (0, globals_1.it)('should validate complete feature request', () => {
                const validData = {
                    title: 'Add dark mode theme option',
                    description: 'I would like to have a dark mode option in the application settings to reduce eye strain during evening use.',
                    need: 'Better user experience during low-light conditions',
                    category: 'ui_ux',
                    page: '/settings'
                };
                (0, globals_1.expect)(() => featureRequestSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should validate required text lengths', () => {
                const baseData = {
                    category: 'dashboard',
                    page: '/dashboard'
                };
                // Valid lengths
                (0, globals_1.expect)(() => featureRequestSchema.parse({
                    ...baseData,
                    title: 'Valid feature title',
                    description: 'This is a valid feature description with sufficient length.',
                    need: 'This addresses a specific user need'
                })).not.toThrow();
                // Invalid lengths
                (0, globals_1.expect)(() => featureRequestSchema.parse({ ...baseData, title: '', description: 'Valid desc', need: 'Valid need' })).toThrow();
                (0, globals_1.expect)(() => featureRequestSchema.parse({ ...baseData, title: 'Valid', description: 'Short', need: 'Valid need' })).toThrow();
                (0, globals_1.expect)(() => featureRequestSchema.parse({ ...baseData, title: 'Valid', description: 'Valid description', need: 'No' })).toThrow();
            });
        });
    });
    (0, globals_1.describe)('Document Management Forms', () => {
        (0, globals_1.describe)('Document Upload Form', () => {
            (0, globals_1.it)('should validate complete document data', () => {
                const validData = {
                    name: 'Annual Financial Report 2024',
                    type: 'financial',
                    dateReference: '2024-12-31',
                    isVisibleToTenants: true,
                    buildingId: '123e4567-e89b-12d3-a456-426614174000'
                };
                (0, globals_1.expect)(() => documentSchema.parse(validData)).not.toThrow();
            });
            (0, globals_1.it)('should handle optional building and residence IDs', () => {
                const minimalData = {
                    name: 'Test Document',
                    type: 'other',
                    dateReference: '2025-01-01',
                    isVisibleToTenants: false
                };
                (0, globals_1.expect)(() => documentSchema.parse(minimalData)).not.toThrow();
            });
            (0, globals_1.it)('should validate date format', () => {
                const baseData = {
                    name: 'Test Document',
                    type: 'maintenance',
                    isVisibleToTenants: true
                };
                // Valid dates
                const validDates = ['2025-01-01', '2024-12-31', '2023-06-15'];
                validDates.forEach(date => {
                    (0, globals_1.expect)(() => documentSchema.parse({ ...baseData, dateReference: date })).not.toThrow();
                });
                // Invalid dates
                const invalidDates = ['invalid-date', '2025-13-01', '', '01/01/2025'];
                invalidDates.forEach(date => {
                    (0, globals_1.expect)(() => documentSchema.parse({ ...baseData, dateReference: date })).toThrow();
                });
            });
            (0, globals_1.it)('should validate UUID format for optional ID fields', () => {
                const baseData = {
                    name: 'Test Document',
                    type: 'legal',
                    dateReference: '2025-01-01',
                    isVisibleToTenants: true
                };
                // Valid UUIDs
                const validUUID = '123e4567-e89b-12d3-a456-426614174000';
                (0, globals_1.expect)(() => documentSchema.parse({ ...baseData, buildingId: validUUID })).not.toThrow();
                (0, globals_1.expect)(() => documentSchema.parse({ ...baseData, residenceId: validUUID })).not.toThrow();
                // Invalid UUIDs
                const invalidUUIDs = ['not-a-uuid', '123', 'invalid-format'];
                invalidUUIDs.forEach(uuid => {
                    (0, globals_1.expect)(() => documentSchema.parse({ ...baseData, buildingId: uuid })).toThrow();
                    (0, globals_1.expect)(() => documentSchema.parse({ ...baseData, residenceId: uuid })).toThrow();
                });
            });
        });
    });
    (0, globals_1.describe)('Form Error Handling', () => {
        (0, globals_1.it)('should provide detailed error messages for validation failures', () => {
            try {
                loginSchema.parse({ email: 'invalid', password: 'short' });
                fail('Should have thrown validation error');
            }
            catch (error) {
                (0, globals_1.expect)(error.errors).toBeDefined();
                (0, globals_1.expect)(error.errors.length).toBeGreaterThan(0);
                (0, globals_1.expect)(error.errors.some((e) => e.path.includes('email'))).toBe(true);
                (0, globals_1.expect)(error.errors.some((e) => e.path.includes('password'))).toBe(true);
            }
        });
        (0, globals_1.it)('should handle empty object submissions', () => {
            const schemas = [
                { name: 'login', schema: loginSchema },
                { name: 'organization', schema: organizationFormSchema },
                { name: 'building', schema: buildingFormSchema },
                { name: 'demand', schema: demandSchema },
                { name: 'bill', schema: billFormSchema },
            ];
            schemas.forEach(({ name, schema }) => {
                (0, globals_1.expect)(() => schema.parse({})).toThrow();
            });
        });
        (0, globals_1.it)('should handle null and undefined values appropriately', () => {
            // Required fields should reject null/undefined
            (0, globals_1.expect)(() => loginSchema.parse({ email: null, password: undefined })).toThrow();
            // Optional fields should accept undefined but may reject null depending on schema
            (0, globals_1.expect)(() => organizationFormSchema.parse({
                name: 'Test',
                type: 'test',
                address: '123 St',
                city: 'City',
                province: 'QC',
                postalCode: 'H1A 1B1',
                email: undefined
            })).not.toThrow();
        });
    });
    (0, globals_1.describe)('Integration and Edge Cases', () => {
        (0, globals_1.it)('should handle very long valid inputs', () => {
            const longValidDescription = 'A'.repeat(1999); // Just under the 2000 limit
            (0, globals_1.expect)(() => demandSchema.parse({
                type: 'other',
                description: longValidDescription
            })).not.toThrow();
        });
        (0, globals_1.it)('should handle special characters in text fields', () => {
            const specialCharacters = 'Événement spécial avec accents: café, naïve, résumé, français, à bientôt!';
            (0, globals_1.expect)(() => organizationFormSchema.parse({
                name: specialCharacters,
                type: 'condo_association',
                address: '123 Rue Saint-Denis',
                city: 'Montréal',
                province: 'QC',
                postalCode: 'H1A 1B1'
            })).not.toThrow();
        });
        (0, globals_1.it)('should validate enum values strictly', () => {
            // Valid enum values
            (0, globals_1.expect)(() => demandSchema.parse({
                type: 'maintenance',
                description: 'Valid maintenance request description.'
            })).not.toThrow();
            // Invalid enum values
            (0, globals_1.expect)(() => demandSchema.parse({
                type: 'invalid_type',
                description: 'Valid description.'
            })).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,