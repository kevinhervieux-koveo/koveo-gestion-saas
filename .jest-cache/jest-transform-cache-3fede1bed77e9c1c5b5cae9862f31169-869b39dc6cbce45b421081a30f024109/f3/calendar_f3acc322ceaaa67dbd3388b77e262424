4197e7272b6e2e5ca4bca264bde29b7e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DashboardCalendarPage;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const use_auth_1 = require("@/hooks/use-auth");
const use_language_1 = require("@/hooks/use-language");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const dialog_1 = require("@/components/ui/dialog");
const select_1 = require("@/components/ui/select");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const calendar_view_1 = require("@/components/common-spaces/calendar-view");
/**
 *
 */
function DashboardCalendarPage() {
    const { user } = (0, use_auth_1.useAuth)();
    const { language } = (0, use_language_1.useLanguage)();
    const [selectedBuildingId, setSelectedBuildingId] = (0, react_1.useState)('all');
    const [searchQuery, setSearchQuery] = (0, react_1.useState)('');
    const [viewMode, setViewMode] = (0, react_1.useState)('month');
    const [visibleSpaces, setVisibleSpaces] = (0, react_1.useState)(new Set());
    const [isLinkDialogOpen, setIsLinkDialogOpen] = (0, react_1.useState)(false);
    const [selectedCalendarType, setSelectedCalendarType] = (0, react_1.useState)(null);
    const [showProviderStep, setShowProviderStep] = (0, react_1.useState)(false);
    const [selectedProvider, setSelectedProvider] = (0, react_1.useState)(null);
    // Fetch buildings accessible to the user
    const { data: buildingsResponse, isLoading: buildingsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/manager/buildings'],
        enabled: !!user,
    });
    const buildings = buildingsResponse?.buildings || [];
    // Fetch all common spaces
    const { data: allSpaces = [], isLoading: spacesLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/common-spaces'],
        enabled: !!user,
    });
    // Filter spaces based on building and search
    const filteredSpaces = (0, react_1.useMemo)(() => {
        let spaces = allSpaces;
        // Filter by building
        if (selectedBuildingId !== 'all') {
            spaces = spaces.filter((space) => space.buildingId === selectedBuildingId);
        }
        // Filter by search query
        if (searchQuery) {
            const query = searchQuery.toLowerCase();
            spaces = spaces.filter((space) => space.name.toLowerCase().includes(query) ||
                space.description?.toLowerCase().includes(query) ||
                space.buildingName?.toLowerCase().includes(query));
        }
        return spaces;
    }, [allSpaces, selectedBuildingId, searchQuery]);
    const toggleSpaceVisibility = (spaceId) => {
        setVisibleSpaces((prev) => {
            const newSet = new Set(prev);
            if (newSet.has(spaceId)) {
                newSet.delete(spaceId);
            }
            else {
                newSet.add(spaceId);
            }
            return newSet;
        });
    };
    const showAllSpaces = () => {
        setVisibleSpaces(new Set(filteredSpaces.map((space) => space.id)));
    };
    const hideAllSpaces = () => {
        setVisibleSpaces(new Set());
    };
    const handleLinkCalendar = () => {
        // Get all visible spaces
        const visibleSpaceIds = Array.from(visibleSpaces);
        if (visibleSpaceIds.length === 0) {
            alert(language === 'fr'
                ? 'Veuillez sélectionner au moins un espace à inclure dans le calendrier.'
                : 'Please select at least one space to include in the calendar.');
            return;
        }
        // Create calendar link parameters
        const params = new URLSearchParams({
            spaces: visibleSpaceIds.join(','),
            view: viewMode,
            building: selectedBuildingId === 'all' ? '' : selectedBuildingId,
        });
        const calendarUrl = `${window.location.origin}/dashboard/calendar?${params}`;
        // Copy to clipboard
        navigator.clipboard
            .writeText(calendarUrl)
            .then(() => {
            alert(language === 'fr'
                ? 'Lien du calendrier copié dans le presse-papiers!'
                : 'Calendar link copied to clipboard!');
        })
            .catch(() => {
            // Fallback: show the URL in a prompt
            prompt(language === 'fr' ? 'Copiez ce lien de calendrier:' : 'Copy this calendar link:', calendarUrl);
        });
    };
    const handleExportCalendar = () => {
        const visibleSpaceIds = Array.from(visibleSpaces);
        if (visibleSpaceIds.length === 0) {
            alert(language === 'fr'
                ? 'Veuillez sélectionner au moins un espace à exporter.'
                : 'Please select at least one space to export.');
            return;
        }
        // Create export URL
        const params = new URLSearchParams({
            spaces: visibleSpaceIds.join(','),
            format: 'ics',
        });
        const exportUrl = `/api/common-spaces/export?${params}`;
        window.open(exportUrl, '_blank');
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', "data-testid": 'dashboard-calendar-page', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: language === 'fr' ? 'Calendrier des Espaces Communs' : 'Common Spaces Calendar', subtitle: language === 'fr' ? "Vue d'ensemble de tous les calendriers" : 'Overview of all calendars' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'mb-6', children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: 'w-5 h-5' }), language === 'fr' ? 'Filtres et Options' : 'Filters and Options'] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isLinkDialogOpen, onOpenChange: setIsLinkDialogOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'flex items-center gap-2', "data-testid": 'button-link-calendar', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ExternalLink, { className: 'w-4 h-4' }), language === 'fr' ? 'Lier calendrier' : 'Link calendar'] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'sm:max-w-[500px]', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: !showProviderStep
                                                                                ? language === 'fr'
                                                                                    ? 'Que souhaitez-vous lier ?'
                                                                                    : 'What do you want to link?'
                                                                                : language === 'fr'
                                                                                    ? 'Choisir le fournisseur de calendrier'
                                                                                    : 'Choose calendar provider' }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid gap-4 py-4', children: [!showProviderStep && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: language === 'fr'
                                                                                            ? 'Sélectionnez quel type de calendrier vous souhaitez synchroniser:'
                                                                                            : 'Select which type of calendar you want to sync:' }), (0, jsx_runtime_1.jsxs)("div", { className: `flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-colors ${selectedCalendarType === 'everything'
                                                                                            ? 'border-koveo-navy bg-koveo-navy/5'
                                                                                            : 'border-gray-200 hover:border-gray-300'}`, onClick: () => setSelectedCalendarType('everything'), "data-testid": 'option-everything-calendar', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: 'font-medium', children: language === 'fr' ? 'Tout lier' : 'Link everything' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-500', children: language === 'fr'
                                                                                                            ? `Synchroniser tous les espaces sélectionnés (${visibleSpaces.size} espaces)`
                                                                                                            : `Sync all selected spaces (${visibleSpaces.size} spaces)` })] }), selectedCalendarType === 'everything' && ((0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: 'w-5 h-5 text-koveo-navy' }))] }), (0, jsx_runtime_1.jsxs)("div", { className: `flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-colors ${selectedCalendarType === 'individual'
                                                                                            ? 'border-koveo-navy bg-koveo-navy/5'
                                                                                            : 'border-gray-200 hover:border-gray-300'}`, onClick: () => setSelectedCalendarType('individual'), "data-testid": 'option-individual-spaces', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: 'font-medium', children: language === 'fr' ? 'Espaces individuels' : 'Individual spaces' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-500', children: language === 'fr'
                                                                                                            ? 'Choisir des espaces spécifiques à synchroniser'
                                                                                                            : 'Choose specific spaces to sync' })] }), selectedCalendarType === 'individual' && ((0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: 'w-5 h-5 text-koveo-navy' }))] }), selectedCalendarType === 'everything' && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 p-4 bg-green-50 rounded-lg border border-green-200', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-green-900 mb-2', children: language === 'fr'
                                                                                                    ? 'Configuration complète'
                                                                                                    : 'Complete configuration' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-green-700', children: visibleSpaces.size > 0
                                                                                                    ? language === 'fr'
                                                                                                        ? `Cette option synchronisera tous les ${visibleSpaces.size} espaces actuellement sélectionnés avec votre calendrier externe.`
                                                                                                        : `This option will sync all ${visibleSpaces.size} currently selected spaces with your external calendar.`
                                                                                                    : language === 'fr'
                                                                                                        ? 'Aucun espace sélectionné. Veuillez en sélectionner au moins un avant de continuer.'
                                                                                                        : 'No spaces selected. Please select at least one before continuing.' })] })), selectedCalendarType === 'individual' && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-blue-900 mb-2', children: language === 'fr'
                                                                                                    ? 'Configuration individuelle'
                                                                                                    : 'Individual configuration' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-blue-700', children: language === 'fr'
                                                                                                    ? "Vous pourrez choisir précisément quels espaces synchroniser à l'étape suivante."
                                                                                                    : 'You will be able to choose precisely which spaces to sync in the next step.' })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-2 mt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => {
                                                                                                    setIsLinkDialogOpen(false);
                                                                                                    setSelectedCalendarType(null);
                                                                                                    setShowProviderStep(false);
                                                                                                    setSelectedProvider(null);
                                                                                                }, "data-testid": 'button-cancel-link', children: language === 'fr' ? 'Annuler' : 'Cancel' }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: () => {
                                                                                                    if (selectedCalendarType === 'everything' &&
                                                                                                        visibleSpaces.size === 0) {
                                                                                                        return; // Don't proceed if no spaces selected
                                                                                                    }
                                                                                                    if (selectedCalendarType) {
                                                                                                        setShowProviderStep(true);
                                                                                                    }
                                                                                                }, disabled: !selectedCalendarType ||
                                                                                                    (selectedCalendarType === 'everything' && visibleSpaces.size === 0), "data-testid": 'button-next-step', children: language === 'fr' ? 'Suivant' : 'Next' })] })] })), showProviderStep && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600 mb-4', children: language === 'fr'
                                                                                            ? 'Sélectionnez le fournisseur de calendrier où vous souhaitez synchroniser :'
                                                                                            : 'Select the calendar provider where you want to sync:' }), (0, jsx_runtime_1.jsxs)("div", { className: `flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-colors ${selectedProvider === 'google'
                                                                                            ? 'border-koveo-navy bg-koveo-navy/5'
                                                                                            : 'border-gray-200 hover:border-gray-300'}`, onClick: () => setSelectedProvider('google'), "data-testid": 'option-google-calendar', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-10 h-10 bg-red-500 rounded-full flex items-center justify-center text-white font-bold', children: "G" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: 'font-medium', children: "Google Calendar" }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-500', children: language === 'fr'
                                                                                                                    ? 'Synchroniser avec Google Calendar'
                                                                                                                    : 'Sync with Google Calendar' })] })] }), selectedProvider === 'google' && ((0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: 'w-5 h-5 text-koveo-navy' }))] }), (0, jsx_runtime_1.jsxs)("div", { className: `flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-colors ${selectedProvider === 'outlook'
                                                                                            ? 'border-koveo-navy bg-koveo-navy/5'
                                                                                            : 'border-gray-200 hover:border-gray-300'}`, onClick: () => setSelectedProvider('outlook'), "data-testid": 'option-outlook-calendar', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold', children: "O" }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: 'font-medium', children: "Outlook Calendar" }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-500', children: language === 'fr'
                                                                                                                    ? 'Synchroniser avec Outlook Calendar'
                                                                                                                    : 'Sync with Outlook Calendar' })] })] }), selectedProvider === 'outlook' && ((0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: 'w-5 h-5 text-koveo-navy' }))] }), (0, jsx_runtime_1.jsxs)("div", { className: `flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-colors ${selectedProvider === 'apple'
                                                                                            ? 'border-koveo-navy bg-koveo-navy/5'
                                                                                            : 'border-gray-200 hover:border-gray-300'}`, onClick: () => setSelectedProvider('apple'), "data-testid": 'option-apple-calendar', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-10 h-10 bg-gray-800 rounded-full flex items-center justify-center text-white font-bold' }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: 'font-medium', children: "Apple Calendar" }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-500', children: language === 'fr'
                                                                                                                    ? 'Synchroniser avec Apple Calendar'
                                                                                                                    : 'Sync with Apple Calendar' })] })] }), selectedProvider === 'apple' && ((0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: 'w-5 h-5 text-koveo-navy' }))] }), (0, jsx_runtime_1.jsxs)("div", { className: `flex items-center justify-between p-4 border rounded-lg cursor-pointer transition-colors ${selectedProvider === 'other'
                                                                                            ? 'border-koveo-navy bg-koveo-navy/5'
                                                                                            : 'border-gray-200 hover:border-gray-300'}`, onClick: () => setSelectedProvider('other'), "data-testid": 'option-other-calendar', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-10 h-10 bg-gray-500 rounded-full flex items-center justify-center text-white font-bold', children: "..." }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("div", { className: 'font-medium', children: language === 'fr' ? 'Autre calendrier' : 'Other calendar' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-500', children: language === 'fr'
                                                                                                                    ? 'Utiliser un fichier ICS ou autre'
                                                                                                                    : 'Use ICS file or other' })] })] }), selectedProvider === 'other' && ((0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: 'w-5 h-5 text-koveo-navy' }))] }), selectedProvider && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-blue-900 mb-2', children: language === 'fr' ? 'Configuration finale' : 'Final configuration' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-blue-700', children: language === 'fr'
                                                                                                    ? `Prêt à lier ${selectedCalendarType === 'everything' ? `tous les ${visibleSpaces.size} espaces sélectionnés` : 'les espaces individuels'} avec ${selectedProvider === 'google'
                                                                                                        ? 'Google Calendar'
                                                                                                        : selectedProvider === 'outlook'
                                                                                                            ? 'Outlook Calendar'
                                                                                                            : selectedProvider === 'apple'
                                                                                                                ? 'Apple Calendar'
                                                                                                                : 'votre calendrier'}.`
                                                                                                    : `Ready to link ${selectedCalendarType === 'everything' ? `all ${visibleSpaces.size} selected spaces` : 'individual spaces'} with ${selectedProvider === 'google'
                                                                                                        ? 'Google Calendar'
                                                                                                        : selectedProvider === 'outlook'
                                                                                                            ? 'Outlook Calendar'
                                                                                                            : selectedProvider === 'apple'
                                                                                                                ? 'Apple Calendar'
                                                                                                                : 'your calendar'}.` })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between gap-2 mt-4', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => {
                                                                                                    setShowProviderStep(false);
                                                                                                    setSelectedProvider(null);
                                                                                                }, "data-testid": 'button-back-step', children: language === 'fr' ? 'Retour' : 'Back' }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => {
                                                                                                            setIsLinkDialogOpen(false);
                                                                                                            setSelectedCalendarType(null);
                                                                                                            setShowProviderStep(false);
                                                                                                            setSelectedProvider(null);
                                                                                                        }, "data-testid": 'button-cancel-provider', children: language === 'fr' ? 'Annuler' : 'Cancel' }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: () => {
                                                                                                            // Handle final calendar linking here
                                                                                                            // Link calendar logic
                                                                                                            handleLinkCalendar();
                                                                                                            setIsLinkDialogOpen(false);
                                                                                                            setSelectedCalendarType(null);
                                                                                                            setShowProviderStep(false);
                                                                                                            setSelectedProvider(null);
                                                                                                        }, disabled: !selectedProvider, "data-testid": 'button-confirm-final-link', children: language === 'fr' ? 'Lier calendrier' : 'Link calendar' })] })] })] }))] })] })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handleExportCalendar, className: 'flex items-center gap-2', "data-testid": 'button-export-calendar', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: 'w-4 h-4' }), language === 'fr' ? 'Exporter' : 'Export'] })] })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-4 mb-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: language === 'fr' ? 'Bâtiment' : 'Building' }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedBuildingId, onValueChange: setSelectedBuildingId, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-building-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: language === 'fr' ? 'Tous les bâtiments' : 'All buildings' }), buildings.map((building) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: building.id, children: [building.name, " - ", building.address] }, building.id)))] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: language === 'fr' ? 'Rechercher un espace' : 'Search spaces' }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'text', placeholder: language === 'fr' ? "Nom de l'espace..." : 'Space name...', value: searchQuery, onChange: (e) => setSearchQuery(e.target.value), "data-testid": 'input-search-spaces' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { children: language === 'fr' ? 'Vue' : 'View' }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: viewMode, onValueChange: (value) => setViewMode(value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-view-mode', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'month', children: language === 'fr' ? 'Mensuelle' : 'Monthly' }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'week', children: language === 'fr' ? 'Hebdomadaire' : 'Weekly' })] })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between border-t pt-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: showAllSpaces, className: 'flex items-center gap-2', "data-testid": 'button-show-all', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-4 h-4' }), language === 'fr' ? 'Tout afficher' : 'Show all'] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: hideAllSpaces, className: 'flex items-center gap-2', "data-testid": 'button-hide-all', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'w-4 h-4' }), language === 'fr' ? 'Tout masquer' : 'Hide all'] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: language === 'fr'
                                                        ? `${visibleSpaces.size} espace(s) affiché(s) sur ${filteredSpaces.length}`
                                                        : `${visibleSpaces.size} space(s) shown out of ${filteredSpaces.length}` })] })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'mb-6', children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-5 h-5' }), language === 'fr' ? 'Espaces Communs' : 'Common Spaces'] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3', children: filteredSpaces.map((space) => {
                                                const isVisible = visibleSpaces.has(space.id);
                                                const building = buildings.find((b) => b.id === space.buildingId);
                                                return ((0, jsx_runtime_1.jsx)("div", { className: `p-3 rounded-lg border cursor-pointer transition-all ${isVisible
                                                        ? 'border-blue-200 bg-blue-50 shadow-sm'
                                                        : 'border-gray-200 hover:border-gray-300'}`, onClick: () => toggleSpaceVisibility(space.id), "data-testid": `space-card-${space.id}`, children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'font-medium text-gray-900', children: space.name }), building && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500 flex items-center gap-1 mt-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MapPin, { className: 'w-3 h-3' }), building.name] })), space.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-600 mt-1', children: space.description }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [!space.isReservable && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: language === 'fr' ? 'Non réservable' : 'Not bookable' })), isVisible ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-4 h-4 text-blue-600' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'w-4 h-4 text-gray-400' }))] })] }) }, space.id));
                                            }) }), filteredSpaces.length === 0 && ((0, jsx_runtime_1.jsx)("div", { className: 'text-center py-8 text-gray-500', children: language === 'fr'
                                                ? 'Aucun espace trouvé avec les filtres sélectionnés.'
                                                : 'No spaces found with the selected filters.' }))] })] }), visibleSpaces.size > 0 && ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: Array.from(visibleSpaces).map((spaceId) => {
                                const space = filteredSpaces.find((s) => s.id === spaceId);
                                if (!space) {
                                    return null;
                                }
                                const building = buildings.find((b) => b.id === space.buildingId);
                                return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-5 h-5' }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("span", { children: space.name }), building && ((0, jsx_runtime_1.jsxs)("span", { className: 'text-sm font-normal text-gray-500 ml-2', children: ["\u2022 ", building.name] }))] })] }), !space.isReservable && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', children: language === 'fr' ? 'Non réservable' : 'Not bookable' }))] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(calendar_view_1.CalendarView, { mode: 'space', spaceId: spaceId, buildingId: space.buildingId }) })] }, spaceId));
                            }) })), visibleSpaces.size === 0 && ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'text-center py-12', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-16 h-16 mx-auto mb-4 text-gray-300' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-medium text-gray-900 mb-2', children: language === 'fr' ? 'Aucun calendrier sélectionné' : 'No calendars selected' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mb-4', children: language === 'fr'
                                            ? 'Sélectionnez des espaces ci-dessus pour afficher leurs calendriers.'
                                            : 'Select spaces above to display their calendars.' }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: showAllSpaces, disabled: filteredSpaces.length === 0, className: 'flex items-center gap-2', "data-testid": 'button-show-all-bottom', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'w-4 h-4' }), language === 'fr' ? 'Afficher tous les calendriers' : 'Show all calendars'] })] }) }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,