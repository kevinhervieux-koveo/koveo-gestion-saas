415e5f1cafaeb5ee7ebc8f43305a4d4e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
/**
 * Calendar Features Unit Tests
 * Tests core calendar functionality using real demo users and data structures.
 */
(0, globals_1.describe)('Calendar Features Unit Tests', () => {
    // Real demo users from the system
    const DEMO_USERS = {
        ADMIN: {
            id: '222f5a0d-6bc6-4f28-9f4d-32c133eed333',
            email: 'admin@koveo.ca',
            role: 'admin',
            name: 'Marie Tremblay',
        },
        MANAGER: {
            id: 'cb8e5b4d-8f2a-4e8d-9c5a-1b2c3d4e5f6g',
            email: 'manager@koveo.ca',
            role: 'manager',
            name: 'Jean Dupuis',
        },
        RESIDENT: {
            id: '9a8b7c6d-5e4f-3a2b-1c0d-9e8f7a6b5c4d',
            email: 'resident@demo.ca',
            role: 'resident',
            name: 'Sophie Martin',
        },
    };
    const DEMO_ORGANIZATION = {
        id: 'e98cc553-c2d7-4854-877a-7cc9eeb8c6b6',
        name: 'Demo Organization',
    };
    const DEMO_BUILDING = {
        id: 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
        name: 'Complexe Rivière-des-Prairies',
    };
    // Calendar data with real demo users
    const mockCalendarData = {
        space: {
            id: '75c4f108-3ec1-437d-bdec-35d1f8e2a44d', // Real space ID from demo
            name: 'Salle communautaire',
            isReservable: true,
        },
        events: [
            {
                id: 'event-1',
                startTime: '2024-12-15T14:00:00Z',
                endTime: '2024-12-15T16:00:00Z',
                status: 'confirmed',
                userName: DEMO_USERS.RESIDENT.name, // Sophie Martin
                userEmail: DEMO_USERS.RESIDENT.email,
                userId: DEMO_USERS.RESIDENT.id,
                isOwnBooking: true,
            },
            {
                id: 'event-2',
                startTime: '2024-12-16T10:00:00Z',
                endTime: '2024-12-16T12:00:00Z',
                status: 'confirmed',
                userName: DEMO_USERS.MANAGER.name, // Jean Dupuis
                userEmail: DEMO_USERS.MANAGER.email,
                userId: DEMO_USERS.MANAGER.id,
                isOwnBooking: false,
            },
        ],
    };
    (0, globals_1.describe)('Calendar Data Structure', () => {
        (0, globals_1.test)('should have valid space information', () => {
            const { space } = mockCalendarData;
            (0, globals_1.expect)(space.id).toBe('75c4f108-3ec1-437d-bdec-35d1f8e2a44d'); // Real demo space ID
            (0, globals_1.expect)(space.name).toBe('Salle communautaire');
            (0, globals_1.expect)(space.isReservable).toBe(true);
            (0, globals_1.expect)(typeof space.id).toBe('string');
            (0, globals_1.expect)(typeof space.name).toBe('string');
            (0, globals_1.expect)(typeof space.isReservable).toBe('boolean');
        });
        (0, globals_1.test)('should have valid event data structure', () => {
            const { events } = mockCalendarData;
            (0, globals_1.expect)(events).toHaveLength(2);
            events.forEach((event) => {
                (0, globals_1.expect)(event).toHaveProperty('id');
                (0, globals_1.expect)(event).toHaveProperty('startTime');
                (0, globals_1.expect)(event).toHaveProperty('endTime');
                (0, globals_1.expect)(event).toHaveProperty('status');
                (0, globals_1.expect)(event).toHaveProperty('userName');
                (0, globals_1.expect)(event).toHaveProperty('isOwnBooking');
                (0, globals_1.expect)(typeof event.id).toBe('string');
                (0, globals_1.expect)(typeof event.startTime).toBe('string');
                (0, globals_1.expect)(typeof event.endTime).toBe('string');
                (0, globals_1.expect)(typeof event.status).toBe('string');
                (0, globals_1.expect)(typeof event.userName).toBe('string');
                (0, globals_1.expect)(typeof event.isOwnBooking).toBe('boolean');
            });
        });
        (0, globals_1.test)('should validate event time consistency', () => {
            const { events } = mockCalendarData;
            events.forEach((event) => {
                const startTime = new Date(event.startTime);
                const endTime = new Date(event.endTime);
                (0, globals_1.expect)(startTime).toBeInstanceOf(Date);
                (0, globals_1.expect)(endTime).toBeInstanceOf(Date);
                (0, globals_1.expect)(endTime.getTime()).toBeGreaterThan(startTime.getTime());
                // Validate ISO string format (allowing for milliseconds)
                (0, globals_1.expect)(event.startTime).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z$/);
                (0, globals_1.expect)(event.endTime).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?Z$/);
            });
        });
    });
    (0, globals_1.describe)('Calendar Linking Features', () => {
        (0, globals_1.test)('should define calendar linking options structure', () => {
            const linkingOptions = [
                { id: 'common-space', name: 'Espaces communs', available: true },
                { id: 'maintenance', name: 'Réparations/Maintenance', available: false },
                { id: 'building-events', name: 'Événements du bâtiment', available: false },
            ];
            (0, globals_1.expect)(linkingOptions).toHaveLength(3);
            linkingOptions.forEach((option) => {
                (0, globals_1.expect)(option).toHaveProperty('id');
                (0, globals_1.expect)(option).toHaveProperty('name');
                (0, globals_1.expect)(option).toHaveProperty('available');
                (0, globals_1.expect)(typeof option.id).toBe('string');
                (0, globals_1.expect)(typeof option.name).toBe('string');
                (0, globals_1.expect)(typeof option.available).toBe('boolean');
            });
            // Only common-space should be available
            (0, globals_1.expect)(linkingOptions[0].available).toBe(true);
            (0, globals_1.expect)(linkingOptions[1].available).toBe(false);
            (0, globals_1.expect)(linkingOptions[2].available).toBe(false);
        });
        (0, globals_1.test)('should handle calendar linking selection state', () => {
            let selectedOption = null;
            let isConfirmEnabled = false;
            // Initially no selection
            (0, globals_1.expect)(selectedOption).toBe(null);
            (0, globals_1.expect)(isConfirmEnabled).toBe(false);
            // Select common space option
            selectedOption = 'common-space';
            isConfirmEnabled = selectedOption !== null;
            (0, globals_1.expect)(selectedOption).toBe('common-space');
            (0, globals_1.expect)(isConfirmEnabled).toBe(true);
            // Reset selection
            selectedOption = null;
            isConfirmEnabled = selectedOption !== null;
            (0, globals_1.expect)(selectedOption).toBe(null);
            (0, globals_1.expect)(isConfirmEnabled).toBe(false);
        });
        (0, globals_1.test)('should provide configuration details for selected options', () => {
            const configurationText = {
                fr: {
                    title: 'Configuration des espaces communs',
                    description: 'Cette option synchronisera les réservations de "Salle communautaire" avec votre calendrier externe.',
                },
                en: {
                    title: 'Common spaces configuration',
                    description: 'This option will sync bookings for "Salle communautaire" with your external calendar.',
                },
            };
            (0, globals_1.expect)(configurationText.fr.title).toBe('Configuration des espaces communs');
            (0, globals_1.expect)(configurationText.en.title).toBe('Common spaces configuration');
            (0, globals_1.expect)(configurationText.fr.description).toContain('Salle communautaire');
            (0, globals_1.expect)(configurationText.en.description).toContain('Salle communautaire');
        });
    });
    (0, globals_1.describe)('Calendar Event Management', () => {
        (0, globals_1.test)('should distinguish between own and other bookings', () => {
            const { events } = mockCalendarData;
            const ownBookings = events.filter((event) => event.isOwnBooking);
            const otherBookings = events.filter((event) => !event.isOwnBooking);
            (0, globals_1.expect)(ownBookings).toHaveLength(1);
            (0, globals_1.expect)(otherBookings).toHaveLength(1);
            (0, globals_1.expect)(ownBookings[0].userName).toBe('Sophie Martin'); // Real demo resident
            (0, globals_1.expect)(otherBookings[0].userName).toBe('Jean Dupuis'); // Real demo manager
        });
        (0, globals_1.test)('should calculate event durations correctly', () => {
            const { events } = mockCalendarData;
            events.forEach((event) => {
                const startTime = new Date(event.startTime);
                const endTime = new Date(event.endTime);
                const duration = endTime.getTime() - startTime.getTime();
                const durationHours = duration / (60 * 60 * 1000);
                (0, globals_1.expect)(durationHours).toBe(2); // All test events are 2 hours
                (0, globals_1.expect)(duration).toBeGreaterThan(0);
            });
        });
        (0, globals_1.test)('should handle booking validation rules', () => {
            const validateBooking = (booking) => {
                const startTime = new Date(booking.startTime);
                const endTime = new Date(booking.endTime);
                const now = new Date();
                return {
                    isValidTimeRange: endTime > startTime,
                    isInFuture: startTime > now,
                    hasRequiredFields: !!(booking.spaceId &&
                        booking.userId &&
                        booking.startTime &&
                        booking.endTime),
                    isReasonableDuration: endTime.getTime() - startTime.getTime() <= 8 * 60 * 60 * 1000, // Max 8 hours
                };
            };
            const validBooking = {
                spaceId: '75c4f108-3ec1-437d-bdec-35d1f8e2a44d', // Real demo space ID
                userId: DEMO_USERS.RESIDENT.id, // Real demo user ID
                startTime: '2025-12-20T14:00:00Z',
                endTime: '2025-12-20T16:00:00Z',
            };
            const validation = validateBooking(validBooking);
            (0, globals_1.expect)(validation.isValidTimeRange).toBe(true);
            (0, globals_1.expect)(validation.isInFuture).toBe(true);
            (0, globals_1.expect)(validation.hasRequiredFields).toBe(true);
            (0, globals_1.expect)(validation.isReasonableDuration).toBe(true);
        });
    });
    (0, globals_1.describe)('Calendar Export Features', () => {
        (0, globals_1.test)('should support different export formats', () => {
            const exportFormats = {
                ics: {
                    mimeType: 'text/calendar',
                    extension: '.ics',
                    description: 'Standard calendar format',
                },
                csv: {
                    mimeType: 'text/csv',
                    extension: '.csv',
                    description: 'Spreadsheet format',
                },
            };
            (0, globals_1.expect)(exportFormats.ics.mimeType).toBe('text/calendar');
            (0, globals_1.expect)(exportFormats.csv.extension).toBe('.csv');
            (0, globals_1.expect)(Object.keys(exportFormats)).toContain('ics');
            (0, globals_1.expect)(Object.keys(exportFormats)).toContain('csv');
        });
        (0, globals_1.test)('should generate proper export data structure', () => {
            const { space, events } = mockCalendarData;
            const exportData = {
                format: 'ics',
                spaceName: space.name,
                events: events,
                filename: `${space.name.toLowerCase().replace(/\s+/g, '-')}-calendar.ics`,
                generatedAt: new Date().toISOString(),
            };
            (0, globals_1.expect)(exportData.format).toBe('ics');
            (0, globals_1.expect)(exportData.spaceName).toBe('Salle communautaire');
            (0, globals_1.expect)(exportData.events).toHaveLength(2);
            (0, globals_1.expect)(exportData.filename).toBe('salle-communautaire-calendar.ics');
            (0, globals_1.expect)(typeof exportData.generatedAt).toBe('string');
            (0, globals_1.expect)(new Date(exportData.generatedAt)).toBeInstanceOf(Date);
        });
    });
    (0, globals_1.describe)('Calendar View Modes', () => {
        (0, globals_1.test)('should support different calendar view modes', () => {
            const viewModes = ['space', 'user', 'building'];
            const calendarTitles = {
                space: 'Salle communautaire',
                user: 'Mon Calendrier',
                building: `${DEMO_BUILDING.name} - Calendrier`,
            };
            (0, globals_1.expect)(viewModes).toContain('space');
            (0, globals_1.expect)(viewModes).toContain('user');
            (0, globals_1.expect)(viewModes).toContain('building');
            (0, globals_1.expect)(calendarTitles.space).toBe('Salle communautaire');
            (0, globals_1.expect)(calendarTitles.user).toBe('Mon Calendrier');
            (0, globals_1.expect)(calendarTitles.building).toContain(DEMO_BUILDING.name);
        });
        (0, globals_1.test)('should handle calendar navigation controls', () => {
            const navigationControls = {
                prevMonth: 'prev-month',
                nextMonth: 'next-month',
                currentMonth: 'current-month',
                viewSelector: ['month', 'week'],
            };
            (0, globals_1.expect)(navigationControls.viewSelector).toContain('month');
            (0, globals_1.expect)(navigationControls.viewSelector).toContain('week');
            (0, globals_1.expect)(navigationControls.prevMonth).toBe('prev-month');
            (0, globals_1.expect)(navigationControls.nextMonth).toBe('next-month');
            (0, globals_1.expect)(navigationControls.currentMonth).toBe('current-month');
        });
        (0, globals_1.test)('should manage calendar loading states', () => {
            const loadingStates = ['loading', 'loaded', 'error'];
            const testStates = {
                loading: { isLoading: true, data: null, error: null },
                loaded: { isLoading: false, data: mockCalendarData, error: null },
                error: { isLoading: false, data: null, error: 'API Error' },
            };
            (0, globals_1.expect)(loadingStates).toContain('loading');
            (0, globals_1.expect)(loadingStates).toContain('loaded');
            (0, globals_1.expect)(loadingStates).toContain('error');
            (0, globals_1.expect)(testStates.loading.isLoading).toBe(true);
            (0, globals_1.expect)(testStates.loaded.data).toBe(mockCalendarData);
            (0, globals_1.expect)(testStates.error.error).toBe('API Error');
        });
    });
    (0, globals_1.describe)('Calendar Internationalization', () => {
        (0, globals_1.test)('should support French and English translations', () => {
            const translations = {
                linkButton: { fr: 'Lier calendrier', en: 'Link calendar' },
                exportButton: { fr: 'Exporter (.ics)', en: 'Export (.ics)' },
                bookButton: { fr: 'Réserver', en: 'Book' },
                cancelButton: { fr: 'Annuler', en: 'Cancel' },
                confirmButton: { fr: 'Lier calendrier', en: 'Link calendar' },
            };
            (0, globals_1.expect)(translations.linkButton.fr).toBe('Lier calendrier');
            (0, globals_1.expect)(translations.linkButton.en).toBe('Link calendar');
            (0, globals_1.expect)(translations.exportButton.fr).toBe('Exporter (.ics)');
            (0, globals_1.expect)(translations.bookButton.fr).toBe('Réserver');
            (0, globals_1.expect)(translations.cancelButton.fr).toBe('Annuler');
            (0, globals_1.expect)(translations.confirmButton.fr).toBe('Lier calendrier');
        });
        (0, globals_1.test)('should support Quebec-specific calendar features', () => {
            const quebecFeatures = {
                language: 'fr',
                dateFormat: 'DD/MM/YYYY',
                timeFormat: '24h',
                firstDayOfWeek: 'monday',
                holidays: ['Fête nationale du Québec', "Jour de l'An", 'Fête du Canada'],
            };
            (0, globals_1.expect)(quebecFeatures.language).toBe('fr');
            (0, globals_1.expect)(quebecFeatures.timeFormat).toBe('24h');
            (0, globals_1.expect)(quebecFeatures.firstDayOfWeek).toBe('monday');
            (0, globals_1.expect)(quebecFeatures.holidays).toContain('Fête nationale du Québec');
            (0, globals_1.expect)(quebecFeatures.holidays).toContain("Jour de l'An");
            (0, globals_1.expect)(quebecFeatures.holidays).toContain('Fête du Canada');
        });
        (0, globals_1.test)('should handle error messages in multiple languages', () => {
            const errorMessages = {
                fr: {
                    loadingError: 'Erreur lors du chargement du calendrier',
                    bookingError: 'Erreur lors de la réservation',
                    conflictError: 'Conflit de réservation détecté',
                },
                en: {
                    loadingError: 'Error loading calendar',
                    bookingError: 'Error creating booking',
                    conflictError: 'Booking conflict detected',
                },
            };
            (0, globals_1.expect)(errorMessages.fr.loadingError).toBe('Erreur lors du chargement du calendrier');
            (0, globals_1.expect)(errorMessages.en.loadingError).toBe('Error loading calendar');
            (0, globals_1.expect)(errorMessages.fr.conflictError).toBe('Conflit de réservation détecté');
            (0, globals_1.expect)(errorMessages.en.conflictError).toBe('Booking conflict detected');
        });
    });
    (0, globals_1.describe)('Calendar Performance and Optimization', () => {
        (0, globals_1.test)('should handle large event datasets efficiently', () => {
            const largeEventSet = Array.from({ length: 100 }, (_, i) => ({
                id: `event-${i}`,
                startTime: `2024-12-${String((i % 30) + 1).padStart(2, '0')}T14:00:00Z`,
                endTime: `2024-12-${String((i % 30) + 1).padStart(2, '0')}T16:00:00Z`,
                status: 'confirmed',
                userName: i % 2 === 0 ? DEMO_USERS.RESIDENT.name : DEMO_USERS.MANAGER.name,
                userId: i % 2 === 0 ? DEMO_USERS.RESIDENT.id : DEMO_USERS.MANAGER.id,
                isOwnBooking: i % 2 === 0,
            }));
            (0, globals_1.expect)(largeEventSet).toHaveLength(100);
            (0, globals_1.expect)(largeEventSet[0].id).toBe('event-0');
            (0, globals_1.expect)(largeEventSet[99].id).toBe('event-99');
            // Test performance characteristics
            const uniqueUsers = [...new Set(largeEventSet.map((e) => e.userName))].length;
            const totalEvents = largeEventSet.length;
            const ownBookings = largeEventSet.filter((e) => e.isOwnBooking).length;
            (0, globals_1.expect)(uniqueUsers).toBe(2); // Sophie Martin and Jean Dupuis
            (0, globals_1.expect)(totalEvents).toBe(100);
            (0, globals_1.expect)(ownBookings).toBe(50);
        });
        (0, globals_1.test)('should calculate calendar statistics efficiently', () => {
            const { events } = mockCalendarData;
            const statistics = {
                totalBookings: events.length,
                totalHours: events.reduce((total, event) => {
                    const duration = new Date(event.endTime).getTime() - new Date(event.startTime).getTime();
                    return total + duration / (60 * 60 * 1000);
                }, 0),
                uniqueUsers: [...new Set(events.map((e) => e.userName))].length,
                ownBookings: events.filter((e) => e.isOwnBooking).length,
                otherBookings: events.filter((e) => !e.isOwnBooking).length,
            };
            (0, globals_1.expect)(statistics.totalBookings).toBe(2);
            (0, globals_1.expect)(statistics.totalHours).toBe(4);
            (0, globals_1.expect)(statistics.uniqueUsers).toBe(2); // Sophie Martin + Jean Dupuis
            (0, globals_1.expect)(statistics.ownBookings).toBe(1);
            (0, globals_1.expect)(statistics.otherBookings).toBe(1);
        });
    });
    (0, globals_1.describe)('Calendar Accessibility and Test IDs', () => {
        (0, globals_1.test)('should define proper test IDs for calendar components', () => {
            const testIds = {
                calendar: ['calendar-view', 'calendar-loading', 'calendar-error'],
                navigation: ['prev-month', 'next-month', 'current-month'],
                events: ['calendar-event-event-1', 'calendar-event-event-2'],
                days: ['calendar-day-2024-12-15', 'calendar-day-2024-12-16'],
                buttons: [
                    'button-link-calendar',
                    'button-export-space-calendar',
                    'button-new-booking-inline',
                    'button-confirm-link',
                    'button-cancel-link',
                ],
                dialog: [
                    'option-common-space-calendar',
                    'option-maintenance-calendar',
                    'option-building-events-calendar',
                ],
            };
            (0, globals_1.expect)(testIds.calendar).toContain('calendar-view');
            (0, globals_1.expect)(testIds.navigation).toContain('prev-month');
            (0, globals_1.expect)(testIds.events).toContain('calendar-event-event-1');
            (0, globals_1.expect)(testIds.days).toContain('calendar-day-2024-12-15');
            (0, globals_1.expect)(testIds.buttons).toContain('button-link-calendar');
            (0, globals_1.expect)(testIds.dialog).toContain('option-common-space-calendar');
            // Ensure all arrays have expected lengths
            (0, globals_1.expect)(testIds.calendar.length).toBeGreaterThan(0);
            (0, globals_1.expect)(testIds.navigation.length).toBeGreaterThan(0);
            (0, globals_1.expect)(testIds.events.length).toBeGreaterThan(0);
            (0, globals_1.expect)(testIds.buttons.length).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should provide accessibility features', () => {
            const accessibilityFeatures = {
                ariaLabels: ['Calendar view', 'Previous month', 'Next month', 'Current month view'],
                legend: ['Mes réservations', 'Déjà réservé'],
                roles: ['button', 'dialog', 'grid', 'gridcell'],
            };
            (0, globals_1.expect)(accessibilityFeatures.ariaLabels).toContain('Calendar view');
            (0, globals_1.expect)(accessibilityFeatures.legend).toContain('Mes réservations');
            (0, globals_1.expect)(accessibilityFeatures.roles).toContain('button');
            (0, globals_1.expect)(accessibilityFeatures.roles).toContain('dialog');
        });
    });
    (0, globals_1.describe)('Calendar Integration Points', () => {
        (0, globals_1.test)('should integrate with booking system correctly', () => {
            const bookingIntegration = {
                createBooking: (spaceId, userId, startTime, endTime) => ({
                    id: 'new-booking-id',
                    spaceId,
                    userId,
                    startTime,
                    endTime,
                    status: 'confirmed',
                    createdAt: new Date().toISOString(),
                }),
                validateBooking: (booking) => {
                    return {
                        isValid: !!(booking.startTime < booking.endTime &&
                            new Date(booking.startTime) > new Date() &&
                            booking.spaceId &&
                            booking.userId),
                        errors: [],
                    };
                },
                checkConflicts: (spaceId, startTime, endTime, existingBookings) => {
                    return existingBookings.some((booking) => booking.spaceId === spaceId &&
                        ((new Date(startTime) >= new Date(booking.startTime) &&
                            new Date(startTime) < new Date(booking.endTime)) ||
                            (new Date(endTime) > new Date(booking.startTime) &&
                                new Date(endTime) <= new Date(booking.endTime)) ||
                            (new Date(startTime) <= new Date(booking.startTime) &&
                                new Date(endTime) >= new Date(booking.endTime))));
                },
            };
            const testBooking = bookingIntegration.createBooking('75c4f108-3ec1-437d-bdec-35d1f8e2a44d', // Real demo space ID
            DEMO_USERS.RESIDENT.id, // Real demo user ID
            '2025-12-25T14:00:00Z', '2025-12-25T16:00:00Z');
            (0, globals_1.expect)(testBooking.status).toBe('confirmed');
            (0, globals_1.expect)(testBooking.id).toBe('new-booking-id');
            (0, globals_1.expect)(typeof testBooking.createdAt).toBe('string');
            const validation = bookingIntegration.validateBooking(testBooking);
            (0, globals_1.expect)(validation.isValid).toBe(true);
            const hasConflict = bookingIntegration.checkConflicts('75c4f108-3ec1-437d-bdec-35d1f8e2a44d', // Real demo space ID
            '2025-12-25T15:00:00Z', '2025-12-25T17:00:00Z', [testBooking]);
            (0, globals_1.expect)(hasConflict).toBe(true);
        });
        (0, globals_1.test)('should support calendar synchronization features', () => {
            const syncFeatures = {
                exportToExternal: (events, format) => {
                    if (format === 'ics') {
                        const icsContent = [
                            'BEGIN:VCALENDAR',
                            'VERSION:2.0',
                            'PRODID:-//Koveo Gestion//Calendar Export//FR',
                        ];
                        events.forEach((event) => {
                            icsContent.push('BEGIN:VEVENT', `UID:${event.id}@koveo.ca`, `DTSTART:${event.startTime.replace(/[-:]/g, '').split('.')[0]}Z`, `DTEND:${event.endTime.replace(/[-:]/g, '').split('.')[0]}Z`, `SUMMARY:Réservation - ${event.userName}`, 'END:VEVENT');
                        });
                        icsContent.push('END:VCALENDAR');
                        return icsContent.join('\r\n');
                    }
                    return null;
                },
                linkCalendar: (spaceId, calendarType) => {
                    return {
                        success: calendarType === 'common-space',
                        message: calendarType === 'common-space'
                            ? 'Calendar linked successfully'
                            : 'Feature not yet available',
                        linkId: calendarType === 'common-space' ? `link-${spaceId}-${Date.now()}` : null,
                    };
                },
            };
            const icsExport = syncFeatures.exportToExternal(mockCalendarData.events, 'ics');
            (0, globals_1.expect)(icsExport).toContain('BEGIN:VCALENDAR');
            (0, globals_1.expect)(icsExport).toContain('BEGIN:VEVENT');
            (0, globals_1.expect)(icsExport).toContain(DEMO_USERS.RESIDENT.name); // Sophie Martin
            const linkResult = syncFeatures.linkCalendar('75c4f108-3ec1-437d-bdec-35d1f8e2a44d', 'common-space');
            (0, globals_1.expect)(linkResult.success).toBe(true);
            (0, globals_1.expect)(linkResult.linkId).toContain('link-75c4f108-3ec1-437d-bdec-35d1f8e2a44d');
            const futureFeatureResult = syncFeatures.linkCalendar('75c4f108-3ec1-437d-bdec-35d1f8e2a44d', 'maintenance');
            (0, globals_1.expect)(futureFeatureResult.success).toBe(false);
            (0, globals_1.expect)(futureFeatureResult.message).toBe('Feature not yet available');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2NhbGVuZGFyL2NhbGVuZGFyLWZlYXR1cmVzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBdUQ7QUFFdkQ7OztHQUdHO0FBRUgsSUFBQSxrQkFBUSxFQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUM1QyxrQ0FBa0M7SUFDbEMsTUFBTSxVQUFVLEdBQUc7UUFDakIsS0FBSyxFQUFFO1lBQ0wsRUFBRSxFQUFFLHNDQUFzQztZQUMxQyxLQUFLLEVBQUUsZ0JBQWdCO1lBQ3ZCLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLGdCQUFnQjtTQUN2QjtRQUNELE9BQU8sRUFBRTtZQUNQLEVBQUUsRUFBRSxzQ0FBc0M7WUFDMUMsS0FBSyxFQUFFLGtCQUFrQjtZQUN6QixJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxhQUFhO1NBQ3BCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsRUFBRSxFQUFFLHNDQUFzQztZQUMxQyxLQUFLLEVBQUUsa0JBQWtCO1lBQ3pCLElBQUksRUFBRSxVQUFVO1lBQ2hCLElBQUksRUFBRSxlQUFlO1NBQ3RCO0tBQ0YsQ0FBQztJQUVGLE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsRUFBRSxFQUFFLHNDQUFzQztRQUMxQyxJQUFJLEVBQUUsbUJBQW1CO0tBQzFCLENBQUM7SUFFRixNQUFNLGFBQWEsR0FBRztRQUNwQixFQUFFLEVBQUUsc0NBQXNDO1FBQzFDLElBQUksRUFBRSwrQkFBK0I7S0FDdEMsQ0FBQztJQUVGLHFDQUFxQztJQUNyQyxNQUFNLGdCQUFnQixHQUFHO1FBQ3ZCLEtBQUssRUFBRTtZQUNMLEVBQUUsRUFBRSxzQ0FBc0MsRUFBRSwwQkFBMEI7WUFDdEUsSUFBSSxFQUFFLHFCQUFxQjtZQUMzQixZQUFZLEVBQUUsSUFBSTtTQUNuQjtRQUNELE1BQU0sRUFBRTtZQUNOO2dCQUNFLEVBQUUsRUFBRSxTQUFTO2dCQUNiLFNBQVMsRUFBRSxzQkFBc0I7Z0JBQ2pDLE9BQU8sRUFB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QUFDLENBQUM7WUFDdEMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsMkNBQTJDLENBQUMsQ0FBQztZQUVqRixNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxZQUFZLENBQ25ELHNDQUFzQyxFQUN0QyxhQUFhLENBQ2QsQ0FBQztZQUNGLElBQUEsZ0JBQU0sRUFBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEQsSUFBQSxnQkFBTSxFQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3Rlc3RzL3VuaXQvY2FsZW5kYXIvY2FsZW5kYXItZmVhdHVyZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZSwgdGVzdCwgZXhwZWN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5cbi8qKlxuICogQ2FsZW5kYXIgRmVhdHVyZXMgVW5pdCBUZXN0c1xuICogVGVzdHMgY29yZSBjYWxlbmRhciBmdW5jdGlvbmFsaXR5IHVzaW5nIHJlYWwgZGVtbyB1c2VycyBhbmQgZGF0YSBzdHJ1Y3R1cmVzLlxuICovXG5cbmRlc2NyaWJlKCdDYWxlbmRhciBGZWF0dXJlcyBVbml0IFRlc3RzJywgKCkgPT4ge1xuICAvLyBSZWFsIGRlbW8gdXNlcnMgZnJvbSB0aGUgc3lzdGVtXG4gIGNvbnN0IERFTU9fVVNFUlMgPSB7XG4gICAgQURNSU46IHtcbiAgICAgIGlkOiAnMjIyZjVhMGQtNmJjNi00ZjI4LTlmNGQtMzJjMTMzZWVkMzMzJyxcbiAgICAgIGVtYWlsOiAnYWRtaW5Aa292ZW8uY2EnLFxuICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgIG5hbWU6ICdNYXJpZSBUcmVtYmxheScsXG4gICAgfSxcbiAgICBNQU5BR0VSOiB7XG4gICAgICBpZDogJ2NiOGU1YjRkLThmMmEtNGU4ZC05YzVhLTFiMmMzZDRlNWY2ZycsXG4gICAgICBlbWFpbDogJ21hbmFnZXJAa292ZW8uY2EnLFxuICAgICAgcm9sZTogJ21hbmFnZXInLFxuICAgICAgbmFtZTogJ0plYW4gRHVwdWlzJyxcbiAgICB9LFxuICAgIFJFU0lERU5UOiB7XG4gICAgICBpZDogJzlhOGI3YzZkLTVlNGYtM2EyYi0xYzBkLTllOGY3YTZiNWM0ZCcsXG4gICAgICBlbWFpbDogJ3Jlc2lkZW50QGRlbW8uY2EnLFxuICAgICAgcm9sZTogJ3Jlc2lkZW50JyxcbiAgICAgIG5hbWU6ICdTb3BoaWUgTWFydGluJyxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IERFTU9fT1JHQU5JWkFUSU9OID0ge1xuICAgIGlkOiAnZTk4Y2M1NTMtYzJkNy00ODU0LTg3N2EtN2NjOWVlYjhjNmI2JyxcbiAgICBuYW1lOiAnRGVtbyBPcmdhbml6YXRpb24nLFxuICB9O1xuXG4gIGNvbnN0IERFTU9fQlVJTERJTkcgPSB7XG4gICAgaWQ6ICdmNDdhYzEwYi01OGNjLTQzNzItYTU2Ny0wZTAyYjJjM2Q0NzknLFxuICAgIG5hbWU6ICdDb21wbGV4ZSBSaXZpw6hyZS1kZXMtUHJhaXJpZXMnLFxuICB9O1xuXG4gIC8vIENhbGVuZGFyIGRhdGEgd2l0aCByZWFsIGRlbW8gdXNlcnNcbiAgY29uc3QgbW9ja0NhbGVuZGFyRGF0YSA9IHtcbiAgICBzcGFjZToge1xuICAgICAgaWQ6ICc3NWM0ZjEwOC0zZWMxLTQzN2QtYmRlYy0zNWQxZjhlMmE0NGQnLCAvLyBSZWFsIHNwYWNlIElEIGZyb20gZGVtb1xuICAgICAgbmFtZTogJ1NhbGxlIGNvbW11bmF1dGFpcmUnLFxuICAgICAgaXNSZXNlcnZhYmxlOiB0cnVlLFxuICAgIH0sXG4gICAgZXZlbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAnZXZlbnQtMScsXG4gICAgICAgIHN0YXJ0VGltZTogJzIwMjQtMTItMTVUMTQ6MDA6MDBaJyxcbiAgICAgICAgZW5kVGltZTogJzIwMjQtMTItMTVUMTY6MDA6MDBaJyxcbiAgICAgICAgc3RhdHVzOiAnY29uZmlybWVkJyxcbiAgICAgICAgdXNlck5hbWU6IERFTU9fVVNFUlMuUkVTSURFTlQubmFtZSwgLy8gU29waGllIE1hcnRpblxuICAgICAgICB1c2VyRW1haWw6IERFTU9fVVNFUlMuUkVTSURFTlQuZW1haWwsXG4gICAgICAgIHVzZXJJZDogREVNT19VU0VSUy5SRVNJREVOVC5pZCxcbiAgICAgICAgaXNPd25Cb29raW5nOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdldmVudC0yJyxcbiAgICAgICAgc3RhcnRUaW1lOiAnMjAyNC0xMi0xNlQxMDowMDowMFonLFxuICAgICAgICBlbmRUaW1lOiAnMjAyNC0xMi0xNlQxMjowMDowMFonLFxuICAgICAgICBzdGF0dXM6ICdjb25maXJtZWQnLFxuICAgICAgICB1c2VyTmFtZTogREVNT19VU0VSUy5NQU5BR0VSLm5hbWUsIC8vIEplYW4gRHVwdWlzXG4gICAgICAgIHVzZXJFbWFpbDogREVNT19VU0VSUy5NQU5BR0VSLmVtYWlsLFxuICAgICAgICB1c2VySWQ6IERFTU9fVVNFUlMuTUFOQUdFUi5pZCxcbiAgICAgICAgaXNPd25Cb29raW5nOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcblxuICBkZXNjcmliZSgnQ2FsZW5kYXIgRGF0YSBTdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhdmUgdmFsaWQgc3BhY2UgaW5mb3JtYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHNwYWNlIH0gPSBtb2NrQ2FsZW5kYXJEYXRhO1xuXG4gICAgICBleHBlY3Qoc3BhY2UuaWQpLnRvQmUoJzc1YzRmMTA4LTNlYzEtNDM3ZC1iZGVjLTM1ZDFmOGUyYTQ0ZCcpOyAvLyBSZWFsIGRlbW8gc3BhY2UgSURcbiAgICAgIGV4cGVjdChzcGFjZS5uYW1lKS50b0JlKCdTYWxsZSBjb21tdW5hdXRhaXJlJyk7XG4gICAgICBleHBlY3Qoc3BhY2UuaXNSZXNlcnZhYmxlKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBzcGFjZS5pZCkudG9CZSgnc3RyaW5nJyk7XG4gICAgICBleHBlY3QodHlwZW9mIHNwYWNlLm5hbWUpLnRvQmUoJ3N0cmluZycpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBzcGFjZS5pc1Jlc2VydmFibGUpLnRvQmUoJ2Jvb2xlYW4nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYXZlIHZhbGlkIGV2ZW50IGRhdGEgc3RydWN0dXJlJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBldmVudHMgfSA9IG1vY2tDYWxlbmRhckRhdGE7XG5cbiAgICAgIGV4cGVjdChldmVudHMpLnRvSGF2ZUxlbmd0aCgyKTtcblxuICAgICAgZXZlbnRzLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICAgIGV4cGVjdChldmVudCkudG9IYXZlUHJvcGVydHkoJ2lkJyk7XG4gICAgICAgIGV4cGVjdChldmVudCkudG9IYXZlUHJvcGVydHkoJ3N0YXJ0VGltZScpO1xuICAgICAgICBleHBlY3QoZXZlbnQpLnRvSGF2ZVByb3BlcnR5KCdlbmRUaW1lJyk7XG4gICAgICAgIGV4cGVjdChldmVudCkudG9IYXZlUHJvcGVydHkoJ3N0YXR1cycpO1xuICAgICAgICBleHBlY3QoZXZlbnQpLnRvSGF2ZVByb3BlcnR5KCd1c2VyTmFtZScpO1xuICAgICAgICBleHBlY3QoZXZlbnQpLnRvSGF2ZVByb3BlcnR5KCdpc093bkJvb2tpbmcnKTtcblxuICAgICAgICBleHBlY3QodHlwZW9mIGV2ZW50LmlkKS50b0JlKCdzdHJpbmcnKTtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBldmVudC5zdGFydFRpbWUpLnRvQmUoJ3N0cmluZycpO1xuICAgICAgICBleHBlY3QodHlwZW9mIGV2ZW50LmVuZFRpbWUpLnRvQmUoJ3N0cmluZycpO1xuICAgICAgICBleHBlY3QodHlwZW9mIGV2ZW50LnN0YXR1cykudG9CZSgnc3RyaW5nJyk7XG4gICAgICAgIGV4cGVjdCh0eXBlb2YgZXZlbnQudXNlck5hbWUpLnRvQmUoJ3N0cmluZycpO1xuICAgICAgICBleHBlY3QodHlwZW9mIGV2ZW50LmlzT3duQm9va2luZykudG9CZSgnYm9vbGVhbicpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgZXZlbnQgdGltZSBjb25zaXN0ZW5jeScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgZXZlbnRzIH0gPSBtb2NrQ2FsZW5kYXJEYXRhO1xuXG4gICAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoZXZlbnQuc3RhcnRUaW1lKTtcbiAgICAgICAgY29uc3QgZW5kVGltZSA9IG5ldyBEYXRlKGV2ZW50LmVuZFRpbWUpO1xuXG4gICAgICAgIGV4cGVjdChzdGFydFRpbWUpLnRvQmVJbnN0YW5jZU9mKERhdGUpO1xuICAgICAgICBleHBlY3QoZW5kVGltZSkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gICAgICAgIGV4cGVjdChlbmRUaW1lLmdldFRpbWUoKSkudG9CZUdyZWF0ZXJUaGFuKHN0YXJ0VGltZS5nZXRUaW1lKCkpO1xuICAgICAgICAvLyBWYWxpZGF0ZSBJU08gc3RyaW5nIGZvcm1hdCAoYWxsb3dpbmcgZm9yIG1pbGxpc2Vjb25kcylcbiAgICAgICAgZXhwZWN0KGV2ZW50LnN0YXJ0VGltZSkudG9NYXRjaCgvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9VFxcZHsyfTpcXGR7Mn06XFxkezJ9KFxcLlxcZHszfSk/WiQvKTtcbiAgICAgICAgZXhwZWN0KGV2ZW50LmVuZFRpbWUpLnRvTWF0Y2goL15cXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfShcXC5cXGR7M30pP1okLyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NhbGVuZGFyIExpbmtpbmcgRmVhdHVyZXMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGRlZmluZSBjYWxlbmRhciBsaW5raW5nIG9wdGlvbnMgc3RydWN0dXJlJywgKCkgPT4ge1xuICAgICAgY29uc3QgbGlua2luZ09wdGlvbnMgPSBbXG4gICAgICAgIHsgaWQ6ICdjb21tb24tc3BhY2UnLCBuYW1lOiAnRXNwYWNlcyBjb21tdW5zJywgYXZhaWxhYmxlOiB0cnVlIH0sXG4gICAgICAgIHsgaWQ6ICdtYWludGVuYW5jZScsIG5hbWU6ICdSw6lwYXJhdGlvbnMvTWFpbnRlbmFuY2UnLCBhdmFpbGFibGU6IGZhbHNlIH0sXG4gICAgICAgIHsgaWQ6ICdidWlsZGluZy1ldmVudHMnLCBuYW1lOiAnw4l2w6luZW1lbnRzIGR1IGLDonRpbWVudCcsIGF2YWlsYWJsZTogZmFsc2UgfSxcbiAgICAgIF07XG5cbiAgICAgIGV4cGVjdChsaW5raW5nT3B0aW9ucykudG9IYXZlTGVuZ3RoKDMpO1xuXG4gICAgICBsaW5raW5nT3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgZXhwZWN0KG9wdGlvbikudG9IYXZlUHJvcGVydHkoJ2lkJyk7XG4gICAgICAgIGV4cGVjdChvcHRpb24pLnRvSGF2ZVByb3BlcnR5KCduYW1lJyk7XG4gICAgICAgIGV4cGVjdChvcHRpb24pLnRvSGF2ZVByb3BlcnR5KCdhdmFpbGFibGUnKTtcblxuICAgICAgICBleHBlY3QodHlwZW9mIG9wdGlvbi5pZCkudG9CZSgnc3RyaW5nJyk7XG4gICAgICAgIGV4cGVjdCh0eXBlb2Ygb3B0aW9uLm5hbWUpLnRvQmUoJ3N0cmluZycpO1xuICAgICAgICBleHBlY3QodHlwZW9mIG9wdGlvbi5hdmFpbGFibGUpLnRvQmUoJ2Jvb2xlYW4nKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBPbmx5IGNvbW1vbi1zcGFjZSBzaG91bGQgYmUgYXZhaWxhYmxlXG4gICAgICBleHBlY3QobGlua2luZ09wdGlvbnNbMF0uYXZhaWxhYmxlKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGxpbmtpbmdPcHRpb25zWzFdLmF2YWlsYWJsZSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QobGlua2luZ09wdGlvbnNbMl0uYXZhaWxhYmxlKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgY2FsZW5kYXIgbGlua2luZyBzZWxlY3Rpb24gc3RhdGUnLCAoKSA9PiB7XG4gICAgICBsZXQgc2VsZWN0ZWRPcHRpb246IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgbGV0IGlzQ29uZmlybUVuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgLy8gSW5pdGlhbGx5IG5vIHNlbGVjdGlvblxuICAgICAgZXhwZWN0KHNlbGVjdGVkT3B0aW9uKS50b0JlKG51bGwpO1xuICAgICAgZXhwZWN0KGlzQ29uZmlybUVuYWJsZWQpLnRvQmUoZmFsc2UpO1xuXG4gICAgICAvLyBTZWxlY3QgY29tbW9uIHNwYWNlIG9wdGlvblxuICAgICAgc2VsZWN0ZWRPcHRpb24gPSAnY29tbW9uLXNwYWNlJztcbiAgICAgIGlzQ29uZmlybUVuYWJsZWQgPSBzZWxlY3RlZE9wdGlvbiAhPT0gbnVsbDtcblxuICAgICAgZXhwZWN0KHNlbGVjdGVkT3B0aW9uKS50b0JlKCdjb21tb24tc3BhY2UnKTtcbiAgICAgIGV4cGVjdChpc0NvbmZpcm1FbmFibGVkKS50b0JlKHRydWUpO1xuXG4gICAgICAvLyBSZXNldCBzZWxlY3Rpb25cbiAgICAgIHNlbGVjdGVkT3B0aW9uID0gbnVsbDtcbiAgICAgIGlzQ29uZmlybUVuYWJsZWQgPSBzZWxlY3RlZE9wdGlvbiAhPT0gbnVsbDtcblxuICAgICAgZXhwZWN0KHNlbGVjdGVkT3B0aW9uKS50b0JlKG51bGwpO1xuICAgICAgZXhwZWN0KGlzQ29uZmlybUVuYWJsZWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHByb3ZpZGUgY29uZmlndXJhdGlvbiBkZXRhaWxzIGZvciBzZWxlY3RlZCBvcHRpb25zJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlndXJhdGlvblRleHQgPSB7XG4gICAgICAgIGZyOiB7XG4gICAgICAgICAgdGl0bGU6ICdDb25maWd1cmF0aW9uIGRlcyBlc3BhY2VzIGNvbW11bnMnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgJ0NldHRlIG9wdGlvbiBzeW5jaHJvbmlzZXJhIGxlcyByw6lzZXJ2YXRpb25zIGRlIFwiU2FsbGUgY29tbXVuYXV0YWlyZVwiIGF2ZWMgdm90cmUgY2FsZW5kcmllciBleHRlcm5lLicsXG4gICAgICAgIH0sXG4gICAgICAgIGVuOiB7XG4gICAgICAgICAgdGl0bGU6ICdDb21tb24gc3BhY2VzIGNvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgJ1RoaXMgb3B0aW9uIHdpbGwgc3luYyBib29raW5ncyBmb3IgXCJTYWxsZSBjb21tdW5hdXRhaXJlXCIgd2l0aCB5b3VyIGV4dGVybmFsIGNhbGVuZGFyLicsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoY29uZmlndXJhdGlvblRleHQuZnIudGl0bGUpLnRvQmUoJ0NvbmZpZ3VyYXRpb24gZGVzIGVzcGFjZXMgY29tbXVucycpO1xuICAgICAgZXhwZWN0KGNvbmZpZ3VyYXRpb25UZXh0LmVuLnRpdGxlKS50b0JlKCdDb21tb24gc3BhY2VzIGNvbmZpZ3VyYXRpb24nKTtcbiAgICAgIGV4cGVjdChjb25maWd1cmF0aW9uVGV4dC5mci5kZXNjcmlwdGlvbikudG9Db250YWluKCdTYWxsZSBjb21tdW5hdXRhaXJlJyk7XG4gICAgICBleHBlY3QoY29uZmlndXJhdGlvblRleHQuZW4uZGVzY3JpcHRpb24pLnRvQ29udGFpbignU2FsbGUgY29tbXVuYXV0YWlyZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2FsZW5kYXIgRXZlbnQgTWFuYWdlbWVudCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZGlzdGluZ3Vpc2ggYmV0d2VlbiBvd24gYW5kIG90aGVyIGJvb2tpbmdzJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBldmVudHMgfSA9IG1vY2tDYWxlbmRhckRhdGE7XG5cbiAgICAgIGNvbnN0IG93bkJvb2tpbmdzID0gZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+IGV2ZW50LmlzT3duQm9va2luZyk7XG4gICAgICBjb25zdCBvdGhlckJvb2tpbmdzID0gZXZlbnRzLmZpbHRlcigoZXZlbnQpID0+ICFldmVudC5pc093bkJvb2tpbmcpO1xuXG4gICAgICBleHBlY3Qob3duQm9va2luZ3MpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChvdGhlckJvb2tpbmdzKS50b0hhdmVMZW5ndGgoMSk7XG5cbiAgICAgIGV4cGVjdChvd25Cb29raW5nc1swXS51c2VyTmFtZSkudG9CZSgnU29waGllIE1hcnRpbicpOyAvLyBSZWFsIGRlbW8gcmVzaWRlbnRcbiAgICAgIGV4cGVjdChvdGhlckJvb2tpbmdzWzBdLnVzZXJOYW1lKS50b0JlKCdKZWFuIER1cHVpcycpOyAvLyBSZWFsIGRlbW8gbWFuYWdlclxuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBldmVudCBkdXJhdGlvbnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBldmVudHMgfSA9IG1vY2tDYWxlbmRhckRhdGE7XG5cbiAgICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZShldmVudC5zdGFydFRpbWUpO1xuICAgICAgICBjb25zdCBlbmRUaW1lID0gbmV3IERhdGUoZXZlbnQuZW5kVGltZSk7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gZW5kVGltZS5nZXRUaW1lKCkgLSBzdGFydFRpbWUuZ2V0VGltZSgpO1xuICAgICAgICBjb25zdCBkdXJhdGlvbkhvdXJzID0gZHVyYXRpb24gLyAoNjAgKiA2MCAqIDEwMDApO1xuXG4gICAgICAgIGV4cGVjdChkdXJhdGlvbkhvdXJzKS50b0JlKDIpOyAvLyBBbGwgdGVzdCBldmVudHMgYXJlIDIgaG91cnNcbiAgICAgICAgZXhwZWN0KGR1cmF0aW9uKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgYm9va2luZyB2YWxpZGF0aW9uIHJ1bGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmFsaWRhdGVCb29raW5nID0gKGJvb2tpbmc6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBuZXcgRGF0ZShib29raW5nLnN0YXJ0VGltZSk7XG4gICAgICAgIGNvbnN0IGVuZFRpbWUgPSBuZXcgRGF0ZShib29raW5nLmVuZFRpbWUpO1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNWYWxpZFRpbWVSYW5nZTogZW5kVGltZSA+IHN0YXJ0VGltZSxcbiAgICAgICAgICBpc0luRnV0dXJlOiBzdGFydFRpbWUgPiBub3csXG4gICAgICAgICAgaGFzUmVxdWlyZWRGaWVsZHM6ICEhKFxuICAgICAgICAgICAgYm9va2luZy5zcGFjZUlkICYmXG4gICAgICAgICAgICBib29raW5nLnVzZXJJZCAmJlxuICAgICAgICAgICAgYm9va2luZy5zdGFydFRpbWUgJiZcbiAgICAgICAgICAgIGJvb2tpbmcuZW5kVGltZVxuICAgICAgICAgICksXG4gICAgICAgICAgaXNSZWFzb25hYmxlRHVyYXRpb246IGVuZFRpbWUuZ2V0VGltZSgpIC0gc3RhcnRUaW1lLmdldFRpbWUoKSA8PSA4ICogNjAgKiA2MCAqIDEwMDAsIC8vIE1heCA4IGhvdXJzXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBjb25zdCB2YWxpZEJvb2tpbmcgPSB7XG4gICAgICAgIHNwYWNlSWQ6ICc3NWM0ZjEwOC0zZWMxLTQzN2QtYmRlYy0zNWQxZjhlMmE0NGQnLCAvLyBSZWFsIGRlbW8gc3BhY2UgSURcbiAgICAgICAgdXNlcklkOiBERU1PX1VTRVJTLlJFU0lERU5ULmlkLCAvLyBSZWFsIGRlbW8gdXNlciBJRFxuICAgICAgICBzdGFydFRpbWU6ICcyMDI1LTEyLTIwVDE0OjAwOjAwWicsXG4gICAgICAgIGVuZFRpbWU6ICcyMDI1LTEyLTIwVDE2OjAwOjAwWicsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB2YWxpZGF0aW9uID0gdmFsaWRhdGVCb29raW5nKHZhbGlkQm9va2luZyk7XG5cbiAgICAgIGV4cGVjdCh2YWxpZGF0aW9uLmlzVmFsaWRUaW1lUmFuZ2UpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5pc0luRnV0dXJlKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHZhbGlkYXRpb24uaGFzUmVxdWlyZWRGaWVsZHMpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5pc1JlYXNvbmFibGVEdXJhdGlvbikudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NhbGVuZGFyIEV4cG9ydCBGZWF0dXJlcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc3VwcG9ydCBkaWZmZXJlbnQgZXhwb3J0IGZvcm1hdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBleHBvcnRGb3JtYXRzID0ge1xuICAgICAgICBpY3M6IHtcbiAgICAgICAgICBtaW1lVHlwZTogJ3RleHQvY2FsZW5kYXInLFxuICAgICAgICAgIGV4dGVuc2lvbjogJy5pY3MnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnU3RhbmRhcmQgY2FsZW5kYXIgZm9ybWF0JyxcbiAgICAgICAgfSxcbiAgICAgICAgY3N2OiB7XG4gICAgICAgICAgbWltZVR5cGU6ICd0ZXh0L2NzdicsXG4gICAgICAgICAgZXh0ZW5zaW9uOiAnLmNzdicsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdTcHJlYWRzaGVldCBmb3JtYXQnLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGV4cG9ydEZvcm1hdHMuaWNzLm1pbWVUeXBlKS50b0JlKCd0ZXh0L2NhbGVuZGFyJyk7XG4gICAgICBleHBlY3QoZXhwb3J0Rm9ybWF0cy5jc3YuZXh0ZW5zaW9uKS50b0JlKCcuY3N2Jyk7XG4gICAgICBleHBlY3QoT2JqZWN0LmtleXMoZXhwb3J0Rm9ybWF0cykpLnRvQ29udGFpbignaWNzJyk7XG4gICAgICBleHBlY3QoT2JqZWN0LmtleXMoZXhwb3J0Rm9ybWF0cykpLnRvQ29udGFpbignY3N2Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgcHJvcGVyIGV4cG9ydCBkYXRhIHN0cnVjdHVyZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgc3BhY2UsIGV2ZW50cyB9ID0gbW9ja0NhbGVuZGFyRGF0YTtcblxuICAgICAgY29uc3QgZXhwb3J0RGF0YSA9IHtcbiAgICAgICAgZm9ybWF0OiAnaWNzJyxcbiAgICAgICAgc3BhY2VOYW1lOiBzcGFjZS5uYW1lLFxuICAgICAgICBldmVudHM6IGV2ZW50cyxcbiAgICAgICAgZmlsZW5hbWU6IGAke3NwYWNlLm5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICctJyl9LWNhbGVuZGFyLmljc2AsXG4gICAgICAgIGdlbmVyYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoZXhwb3J0RGF0YS5mb3JtYXQpLnRvQmUoJ2ljcycpO1xuICAgICAgZXhwZWN0KGV4cG9ydERhdGEuc3BhY2VOYW1lKS50b0JlKCdTYWxsZSBjb21tdW5hdXRhaXJlJyk7XG4gICAgICBleHBlY3QoZXhwb3J0RGF0YS5ldmVudHMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChleHBvcnREYXRhLmZpbGVuYW1lKS50b0JlKCdzYWxsZS1jb21tdW5hdXRhaXJlLWNhbGVuZGFyLmljcycpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBleHBvcnREYXRhLmdlbmVyYXRlZEF0KS50b0JlKCdzdHJpbmcnKTtcbiAgICAgIGV4cGVjdChuZXcgRGF0ZShleHBvcnREYXRhLmdlbmVyYXRlZEF0KSkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDYWxlbmRhciBWaWV3IE1vZGVzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzdXBwb3J0IGRpZmZlcmVudCBjYWxlbmRhciB2aWV3IG1vZGVzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgdmlld01vZGVzID0gWydzcGFjZScsICd1c2VyJywgJ2J1aWxkaW5nJ107XG4gICAgICBjb25zdCBjYWxlbmRhclRpdGxlcyA9IHtcbiAgICAgICAgc3BhY2U6ICdTYWxsZSBjb21tdW5hdXRhaXJlJyxcbiAgICAgICAgdXNlcjogJ01vbiBDYWxlbmRyaWVyJyxcbiAgICAgICAgYnVpbGRpbmc6IGAke0RFTU9fQlVJTERJTkcubmFtZX0gLSBDYWxlbmRyaWVyYCxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdCh2aWV3TW9kZXMpLnRvQ29udGFpbignc3BhY2UnKTtcbiAgICAgIGV4cGVjdCh2aWV3TW9kZXMpLnRvQ29udGFpbigndXNlcicpO1xuICAgICAgZXhwZWN0KHZpZXdNb2RlcykudG9Db250YWluKCdidWlsZGluZycpO1xuICAgICAgZXhwZWN0KGNhbGVuZGFyVGl0bGVzLnNwYWNlKS50b0JlKCdTYWxsZSBjb21tdW5hdXRhaXJlJyk7XG4gICAgICBleHBlY3QoY2FsZW5kYXJUaXRsZXMudXNlcikudG9CZSgnTW9uIENhbGVuZHJpZXInKTtcbiAgICAgIGV4cGVjdChjYWxlbmRhclRpdGxlcy5idWlsZGluZykudG9Db250YWluKERFTU9fQlVJTERJTkcubmFtZSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNhbGVuZGFyIG5hdmlnYXRpb24gY29udHJvbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBuYXZpZ2F0aW9uQ29udHJvbHMgPSB7XG4gICAgICAgIHByZXZNb250aDogJ3ByZXYtbW9udGgnLFxuICAgICAgICBuZXh0TW9udGg6ICduZXh0LW1vbnRoJyxcbiAgICAgICAgY3VycmVudE1vbnRoOiAnY3VycmVudC1tb250aCcsXG4gICAgICAgIHZpZXdTZWxlY3RvcjogWydtb250aCcsICd3ZWVrJ10sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QobmF2aWdhdGlvbkNvbnRyb2xzLnZpZXdTZWxlY3RvcikudG9Db250YWluKCdtb250aCcpO1xuICAgICAgZXhwZWN0KG5hdmlnYXRpb25Db250cm9scy52aWV3U2VsZWN0b3IpLnRvQ29udGFpbignd2VlaycpO1xuICAgICAgZXhwZWN0KG5hdmlnYXRpb25Db250cm9scy5wcmV2TW9udGgpLnRvQmUoJ3ByZXYtbW9udGgnKTtcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uQ29udHJvbHMubmV4dE1vbnRoKS50b0JlKCduZXh0LW1vbnRoJyk7XG4gICAgICBleHBlY3QobmF2aWdhdGlvbkNvbnRyb2xzLmN1cnJlbnRNb250aCkudG9CZSgnY3VycmVudC1tb250aCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIG1hbmFnZSBjYWxlbmRhciBsb2FkaW5nIHN0YXRlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGxvYWRpbmdTdGF0ZXMgPSBbJ2xvYWRpbmcnLCAnbG9hZGVkJywgJ2Vycm9yJ107XG4gICAgICBjb25zdCB0ZXN0U3RhdGVzID0ge1xuICAgICAgICBsb2FkaW5nOiB7IGlzTG9hZGluZzogdHJ1ZSwgZGF0YTogbnVsbCwgZXJyb3I6IG51bGwgfSxcbiAgICAgICAgbG9hZGVkOiB7IGlzTG9hZGluZzogZmFsc2UsIGRhdGE6IG1vY2tDYWxlbmRhckRhdGEsIGVycm9yOiBudWxsIH0sXG4gICAgICAgIGVycm9yOiB7IGlzTG9hZGluZzogZmFsc2UsIGRhdGE6IG51bGwsIGVycm9yOiAnQVBJIEVycm9yJyB9LFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGxvYWRpbmdTdGF0ZXMpLnRvQ29udGFpbignbG9hZGluZycpO1xuICAgICAgZXhwZWN0KGxvYWRpbmdTdGF0ZXMpLnRvQ29udGFpbignbG9hZGVkJyk7XG4gICAgICBleHBlY3QobG9hZGluZ1N0YXRlcykudG9Db250YWluKCdlcnJvcicpO1xuXG4gICAgICBleHBlY3QodGVzdFN0YXRlcy5sb2FkaW5nLmlzTG9hZGluZykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdCh0ZXN0U3RhdGVzLmxvYWRlZC5kYXRhKS50b0JlKG1vY2tDYWxlbmRhckRhdGEpO1xuICAgICAgZXhwZWN0KHRlc3RTdGF0ZXMuZXJyb3IuZXJyb3IpLnRvQmUoJ0FQSSBFcnJvcicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2FsZW5kYXIgSW50ZXJuYXRpb25hbGl6YXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHN1cHBvcnQgRnJlbmNoIGFuZCBFbmdsaXNoIHRyYW5zbGF0aW9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0aW9ucyA9IHtcbiAgICAgICAgbGlua0J1dHRvbjogeyBmcjogJ0xpZXIgY2FsZW5kcmllcicsIGVuOiAnTGluayBjYWxlbmRhcicgfSxcbiAgICAgICAgZXhwb3J0QnV0dG9uOiB7IGZyOiAnRXhwb3J0ZXIgKC5pY3MpJywgZW46ICdFeHBvcnQgKC5pY3MpJyB9LFxuICAgICAgICBib29rQnV0dG9uOiB7IGZyOiAnUsOpc2VydmVyJywgZW46ICdCb29rJyB9LFxuICAgICAgICBjYW5jZWxCdXR0b246IHsgZnI6ICdBbm51bGVyJywgZW46ICdDYW5jZWwnIH0sXG4gICAgICAgIGNvbmZpcm1CdXR0b246IHsgZnI6ICdMaWVyIGNhbGVuZHJpZXInLCBlbjogJ0xpbmsgY2FsZW5kYXInIH0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QodHJhbnNsYXRpb25zLmxpbmtCdXR0b24uZnIpLnRvQmUoJ0xpZXIgY2FsZW5kcmllcicpO1xuICAgICAgZXhwZWN0KHRyYW5zbGF0aW9ucy5saW5rQnV0dG9uLmVuKS50b0JlKCdMaW5rIGNhbGVuZGFyJyk7XG4gICAgICBleHBlY3QodHJhbnNsYXRpb25zLmV4cG9ydEJ1dHRvbi5mcikudG9CZSgnRXhwb3J0ZXIgKC5pY3MpJyk7XG4gICAgICBleHBlY3QodHJhbnNsYXRpb25zLmJvb2tCdXR0b24uZnIpLnRvQmUoJ1LDqXNlcnZlcicpO1xuICAgICAgZXhwZWN0KHRyYW5zbGF0aW9ucy5jYW5jZWxCdXR0b24uZnIpLnRvQmUoJ0FubnVsZXInKTtcbiAgICAgIGV4cGVjdCh0cmFuc2xhdGlvbnMuY29uZmlybUJ1dHRvbi5mcikudG9CZSgnTGllciBjYWxlbmRyaWVyJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgc3VwcG9ydCBRdWViZWMtc3BlY2lmaWMgY2FsZW5kYXIgZmVhdHVyZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBxdWViZWNGZWF0dXJlcyA9IHtcbiAgICAgICAgbGFuZ3VhZ2U6ICdmcicsXG4gICAgICAgIGRhdGVGb3JtYXQ6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgdGltZUZvcm1hdDogJzI0aCcsXG4gICAgICAgIGZpcnN0RGF5T2ZXZWVrOiAnbW9uZGF5JyxcbiAgICAgICAgaG9saWRheXM6IFsnRsOqdGUgbmF0aW9uYWxlIGR1IFF1w6liZWMnLCBcIkpvdXIgZGUgbCdBblwiLCAnRsOqdGUgZHUgQ2FuYWRhJ10sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QocXVlYmVjRmVhdHVyZXMubGFuZ3VhZ2UpLnRvQmUoJ2ZyJyk7XG4gICAgICBleHBlY3QocXVlYmVjRmVhdHVyZXMudGltZUZvcm1hdCkudG9CZSgnMjRoJyk7XG4gICAgICBleHBlY3QocXVlYmVjRmVhdHVyZXMuZmlyc3REYXlPZldlZWspLnRvQmUoJ21vbmRheScpO1xuICAgICAgZXhwZWN0KHF1ZWJlY0ZlYXR1cmVzLmhvbGlkYXlzKS50b0NvbnRhaW4oJ0bDqnRlIG5hdGlvbmFsZSBkdSBRdcOpYmVjJyk7XG4gICAgICBleHBlY3QocXVlYmVjRmVhdHVyZXMuaG9saWRheXMpLnRvQ29udGFpbihcIkpvdXIgZGUgbCdBblwiKTtcbiAgICAgIGV4cGVjdChxdWViZWNGZWF0dXJlcy5ob2xpZGF5cykudG9Db250YWluKCdGw6p0ZSBkdSBDYW5hZGEnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZXJyb3IgbWVzc2FnZXMgaW4gbXVsdGlwbGUgbGFuZ3VhZ2VzJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlcyA9IHtcbiAgICAgICAgZnI6IHtcbiAgICAgICAgICBsb2FkaW5nRXJyb3I6ICdFcnJldXIgbG9ycyBkdSBjaGFyZ2VtZW50IGR1IGNhbGVuZHJpZXInLFxuICAgICAgICAgIGJvb2tpbmdFcnJvcjogJ0VycmV1ciBsb3JzIGRlIGxhIHLDqXNlcnZhdGlvbicsXG4gICAgICAgICAgY29uZmxpY3RFcnJvcjogJ0NvbmZsaXQgZGUgcsOpc2VydmF0aW9uIGTDqXRlY3TDqScsXG4gICAgICAgIH0sXG4gICAgICAgIGVuOiB7XG4gICAgICAgICAgbG9hZGluZ0Vycm9yOiAnRXJyb3IgbG9hZGluZyBjYWxlbmRhcicsXG4gICAgICAgICAgYm9va2luZ0Vycm9yOiAnRXJyb3IgY3JlYXRpbmcgYm9va2luZycsXG4gICAgICAgICAgY29uZmxpY3RFcnJvcjogJ0Jvb2tpbmcgY29uZmxpY3QgZGV0ZWN0ZWQnLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGVycm9yTWVzc2FnZXMuZnIubG9hZGluZ0Vycm9yKS50b0JlKCdFcnJldXIgbG9ycyBkdSBjaGFyZ2VtZW50IGR1IGNhbGVuZHJpZXInKTtcbiAgICAgIGV4cGVjdChlcnJvck1lc3NhZ2VzLmVuLmxvYWRpbmdFcnJvcikudG9CZSgnRXJyb3IgbG9hZGluZyBjYWxlbmRhcicpO1xuICAgICAgZXhwZWN0KGVycm9yTWVzc2FnZXMuZnIuY29uZmxpY3RFcnJvcikudG9CZSgnQ29uZmxpdCBkZSByw6lzZXJ2YXRpb24gZMOpdGVjdMOpJyk7XG4gICAgICBleHBlY3QoZXJyb3JNZXNzYWdlcy5lbi5jb25mbGljdEVycm9yKS50b0JlKCdCb29raW5nIGNvbmZsaWN0IGRldGVjdGVkJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDYWxlbmRhciBQZXJmb3JtYW5jZSBhbmQgT3B0aW1pemF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbGFyZ2UgZXZlbnQgZGF0YXNldHMgZWZmaWNpZW50bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBsYXJnZUV2ZW50U2V0ID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwIH0sIChfLCBpKSA9PiAoe1xuICAgICAgICBpZDogYGV2ZW50LSR7aX1gLFxuICAgICAgICBzdGFydFRpbWU6IGAyMDI0LTEyLSR7U3RyaW5nKChpICUgMzApICsgMSkucGFkU3RhcnQoMiwgJzAnKX1UMTQ6MDA6MDBaYCxcbiAgICAgICAgZW5kVGltZTogYDIwMjQtMTItJHtTdHJpbmcoKGkgJSAzMCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpfVQxNjowMDowMFpgLFxuICAgICAgICBzdGF0dXM6ICdjb25maXJtZWQnLFxuICAgICAgICB1c2VyTmFtZTogaSAlIDIgPT09IDAgPyBERU1PX1VTRVJTLlJFU0lERU5ULm5hbWUgOiBERU1PX1VTRVJTLk1BTkFHRVIubmFtZSxcbiAgICAgICAgdXNlcklkOiBpICUgMiA9PT0gMCA/IERFTU9fVVNFUlMuUkVTSURFTlQuaWQgOiBERU1PX1VTRVJTLk1BTkFHRVIuaWQsXG4gICAgICAgIGlzT3duQm9va2luZzogaSAlIDIgPT09IDAsXG4gICAgICB9KSk7XG5cbiAgICAgIGV4cGVjdChsYXJnZUV2ZW50U2V0KS50b0hhdmVMZW5ndGgoMTAwKTtcbiAgICAgIGV4cGVjdChsYXJnZUV2ZW50U2V0WzBdLmlkKS50b0JlKCdldmVudC0wJyk7XG4gICAgICBleHBlY3QobGFyZ2VFdmVudFNldFs5OV0uaWQpLnRvQmUoJ2V2ZW50LTk5Jyk7XG5cbiAgICAgIC8vIFRlc3QgcGVyZm9ybWFuY2UgY2hhcmFjdGVyaXN0aWNzXG4gICAgICBjb25zdCB1bmlxdWVVc2VycyA9IFsuLi5uZXcgU2V0KGxhcmdlRXZlbnRTZXQubWFwKChlKSA9PiBlLnVzZXJOYW1lKSldLmxlbmd0aDtcbiAgICAgIGNvbnN0IHRvdGFsRXZlbnRzID0gbGFyZ2VFdmVudFNldC5sZW5ndGg7XG4gICAgICBjb25zdCBvd25Cb29raW5ncyA9IGxhcmdlRXZlbnRTZXQuZmlsdGVyKChlKSA9PiBlLmlzT3duQm9va2luZykubGVuZ3RoO1xuXG4gICAgICBleHBlY3QodW5pcXVlVXNlcnMpLnRvQmUoMik7IC8vIFNvcGhpZSBNYXJ0aW4gYW5kIEplYW4gRHVwdWlzXG4gICAgICBleHBlY3QodG90YWxFdmVudHMpLnRvQmUoMTAwKTtcbiAgICAgIGV4cGVjdChvd25Cb29raW5ncykudG9CZSg1MCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgY2FsY3VsYXRlIGNhbGVuZGFyIHN0YXRpc3RpY3MgZWZmaWNpZW50bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGV2ZW50cyB9ID0gbW9ja0NhbGVuZGFyRGF0YTtcblxuICAgICAgY29uc3Qgc3RhdGlzdGljcyA9IHtcbiAgICAgICAgdG90YWxCb29raW5nczogZXZlbnRzLmxlbmd0aCxcbiAgICAgICAgdG90YWxIb3VyczogZXZlbnRzLnJlZHVjZSgodG90YWwsIGV2ZW50KSA9PiB7XG4gICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBuZXcgRGF0ZShldmVudC5lbmRUaW1lKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShldmVudC5zdGFydFRpbWUpLmdldFRpbWUoKTtcbiAgICAgICAgICByZXR1cm4gdG90YWwgKyBkdXJhdGlvbiAvICg2MCAqIDYwICogMTAwMCk7XG4gICAgICAgIH0sIDApLFxuICAgICAgICB1bmlxdWVVc2VyczogWy4uLm5ldyBTZXQoZXZlbnRzLm1hcCgoZSkgPT4gZS51c2VyTmFtZSkpXS5sZW5ndGgsXG4gICAgICAgIG93bkJvb2tpbmdzOiBldmVudHMuZmlsdGVyKChlKSA9PiBlLmlzT3duQm9va2luZykubGVuZ3RoLFxuICAgICAgICBvdGhlckJvb2tpbmdzOiBldmVudHMuZmlsdGVyKChlKSA9PiAhZS5pc093bkJvb2tpbmcpLmxlbmd0aCxcbiAgICAgIH07XG5cbiAgICAgIGV4cGVjdChzdGF0aXN0aWNzLnRvdGFsQm9va2luZ3MpLnRvQmUoMik7XG4gICAgICBleHBlY3Qoc3RhdGlzdGljcy50b3RhbEhvdXJzKS50b0JlKDQpO1xuICAgICAgZXhwZWN0KHN0YXRpc3RpY3MudW5pcXVlVXNlcnMpLnRvQmUoMik7IC8vIFNvcGhpZSBNYXJ0aW4gKyBKZWFuIER1cHVpc1xuICAgICAgZXhwZWN0KHN0YXRpc3RpY3Mub3duQm9va2luZ3MpLnRvQmUoMSk7XG4gICAgICBleHBlY3Qoc3RhdGlzdGljcy5vdGhlckJvb2tpbmdzKS50b0JlKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2FsZW5kYXIgQWNjZXNzaWJpbGl0eSBhbmQgVGVzdCBJRHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGRlZmluZSBwcm9wZXIgdGVzdCBJRHMgZm9yIGNhbGVuZGFyIGNvbXBvbmVudHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0SWRzID0ge1xuICAgICAgICBjYWxlbmRhcjogWydjYWxlbmRhci12aWV3JywgJ2NhbGVuZGFyLWxvYWRpbmcnLCAnY2FsZW5kYXItZXJyb3InXSxcbiAgICAgICAgbmF2aWdhdGlvbjogWydwcmV2LW1vbnRoJywgJ25leHQtbW9udGgnLCAnY3VycmVudC1tb250aCddLFxuICAgICAgICBldmVudHM6IFsnY2FsZW5kYXItZXZlbnQtZXZlbnQtMScsICdjYWxlbmRhci1ldmVudC1ldmVudC0yJ10sXG4gICAgICAgIGRheXM6IFsnY2FsZW5kYXItZGF5LTIwMjQtMTItMTUnLCAnY2FsZW5kYXItZGF5LTIwMjQtMTItMTYnXSxcbiAgICAgICAgYnV0dG9uczogW1xuICAgICAgICAgICdidXR0b24tbGluay1jYWxlbmRhcicsXG4gICAgICAgICAgJ2J1dHRvbi1leHBvcnQtc3BhY2UtY2FsZW5kYXInLFxuICAgICAgICAgICdidXR0b24tbmV3LWJvb2tpbmctaW5saW5lJyxcbiAgICAgICAgICAnYnV0dG9uLWNvbmZpcm0tbGluaycsXG4gICAgICAgICAgJ2J1dHRvbi1jYW5jZWwtbGluaycsXG4gICAgICAgIF0sXG4gICAgICAgIGRpYWxvZzogW1xuICAgICAgICAgICdvcHRpb24tY29tbW9uLXNwYWNlLWNhbGVuZGFyJyxcbiAgICAgICAgICAnb3B0aW9uLW1haW50ZW5hbmNlLWNhbGVuZGFyJyxcbiAgICAgICAgICAnb3B0aW9uLWJ1aWxkaW5nLWV2ZW50cy1jYWxlbmRhcicsXG4gICAgICAgIF0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QodGVzdElkcy5jYWxlbmRhcikudG9Db250YWluKCdjYWxlbmRhci12aWV3Jyk7XG4gICAgICBleHBlY3QodGVzdElkcy5uYXZpZ2F0aW9uKS50b0NvbnRhaW4oJ3ByZXYtbW9udGgnKTtcbiAgICAgIGV4cGVjdCh0ZXN0SWRzLmV2ZW50cykudG9Db250YWluKCdjYWxlbmRhci1ldmVudC1ldmVudC0xJyk7XG4gICAgICBleHBlY3QodGVzdElkcy5kYXlzKS50b0NvbnRhaW4oJ2NhbGVuZGFyLWRheS0yMDI0LTEyLTE1Jyk7XG4gICAgICBleHBlY3QodGVzdElkcy5idXR0b25zKS50b0NvbnRhaW4oJ2J1dHRvbi1saW5rLWNhbGVuZGFyJyk7XG4gICAgICBleHBlY3QodGVzdElkcy5kaWFsb2cpLnRvQ29udGFpbignb3B0aW9uLWNvbW1vbi1zcGFjZS1jYWxlbmRhcicpO1xuXG4gICAgICAvLyBFbnN1cmUgYWxsIGFycmF5cyBoYXZlIGV4cGVjdGVkIGxlbmd0aHNcbiAgICAgIGV4cGVjdCh0ZXN0SWRzLmNhbGVuZGFyLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHRlc3RJZHMubmF2aWdhdGlvbi5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdCh0ZXN0SWRzLmV2ZW50cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdCh0ZXN0SWRzLmJ1dHRvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgcHJvdmlkZSBhY2Nlc3NpYmlsaXR5IGZlYXR1cmVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYWNjZXNzaWJpbGl0eUZlYXR1cmVzID0ge1xuICAgICAgICBhcmlhTGFiZWxzOiBbJ0NhbGVuZGFyIHZpZXcnLCAnUHJldmlvdXMgbW9udGgnLCAnTmV4dCBtb250aCcsICdDdXJyZW50IG1vbnRoIHZpZXcnXSxcbiAgICAgICAgbGVnZW5kOiBbJ01lcyByw6lzZXJ2YXRpb25zJywgJ0TDqWrDoCByw6lzZXJ2w6knXSxcbiAgICAgICAgcm9sZXM6IFsnYnV0dG9uJywgJ2RpYWxvZycsICdncmlkJywgJ2dyaWRjZWxsJ10sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoYWNjZXNzaWJpbGl0eUZlYXR1cmVzLmFyaWFMYWJlbHMpLnRvQ29udGFpbignQ2FsZW5kYXIgdmlldycpO1xuICAgICAgZXhwZWN0KGFjY2Vzc2liaWxpdHlGZWF0dXJlcy5sZWdlbmQpLnRvQ29udGFpbignTWVzIHLDqXNlcnZhdGlvbnMnKTtcbiAgICAgIGV4cGVjdChhY2Nlc3NpYmlsaXR5RmVhdHVyZXMucm9sZXMpLnRvQ29udGFpbignYnV0dG9uJyk7XG4gICAgICBleHBlY3QoYWNjZXNzaWJpbGl0eUZlYXR1cmVzLnJvbGVzKS50b0NvbnRhaW4oJ2RpYWxvZycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2FsZW5kYXIgSW50ZWdyYXRpb24gUG9pbnRzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBpbnRlZ3JhdGUgd2l0aCBib29raW5nIHN5c3RlbSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBib29raW5nSW50ZWdyYXRpb24gPSB7XG4gICAgICAgIGNyZWF0ZUJvb2tpbmc6IChzcGFjZUlkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nLCBzdGFydFRpbWU6IHN0cmluZywgZW5kVGltZTogc3RyaW5nKSA9PiAoe1xuICAgICAgICAgIGlkOiAnbmV3LWJvb2tpbmctaWQnLFxuICAgICAgICAgIHNwYWNlSWQsXG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgICBlbmRUaW1lLFxuICAgICAgICAgIHN0YXR1czogJ2NvbmZpcm1lZCcsXG4gICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0pLFxuICAgICAgICB2YWxpZGF0ZUJvb2tpbmc6IChib29raW5nOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNWYWxpZDogISEoXG4gICAgICAgICAgICAgIGJvb2tpbmcuc3RhcnRUaW1lIDwgYm9va2luZy5lbmRUaW1lICYmXG4gICAgICAgICAgICAgIG5ldyBEYXRlKGJvb2tpbmcuc3RhcnRUaW1lKSA+IG5ldyBEYXRlKCkgJiZcbiAgICAgICAgICAgICAgYm9va2luZy5zcGFjZUlkICYmXG4gICAgICAgICAgICAgIGJvb2tpbmcudXNlcklkXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZXJyb3JzOiBbXSxcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjaGVja0NvbmZsaWN0czogKFxuICAgICAgICAgIHNwYWNlSWQ6IHN0cmluZyxcbiAgICAgICAgICBzdGFydFRpbWU6IHN0cmluZyxcbiAgICAgICAgICBlbmRUaW1lOiBzdHJpbmcsXG4gICAgICAgICAgZXhpc3RpbmdCb29raW5nczogYW55W11cbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQm9va2luZ3Muc29tZShcbiAgICAgICAgICAgIChib29raW5nKSA9PlxuICAgICAgICAgICAgICBib29raW5nLnNwYWNlSWQgPT09IHNwYWNlSWQgJiZcbiAgICAgICAgICAgICAgKChuZXcgRGF0ZShzdGFydFRpbWUpID49IG5ldyBEYXRlKGJvb2tpbmcuc3RhcnRUaW1lKSAmJlxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKHN0YXJ0VGltZSkgPCBuZXcgRGF0ZShib29raW5nLmVuZFRpbWUpKSB8fFxuICAgICAgICAgICAgICAgIChuZXcgRGF0ZShlbmRUaW1lKSA+IG5ldyBEYXRlKGJvb2tpbmcuc3RhcnRUaW1lKSAmJlxuICAgICAgICAgICAgICAgICAgbmV3IERhdGUoZW5kVGltZSkgPD0gbmV3IERhdGUoYm9va2luZy5lbmRUaW1lKSkgfHxcbiAgICAgICAgICAgICAgICAobmV3IERhdGUoc3RhcnRUaW1lKSA8PSBuZXcgRGF0ZShib29raW5nLnN0YXJ0VGltZSkgJiZcbiAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKGVuZFRpbWUpID49IG5ldyBEYXRlKGJvb2tpbmcuZW5kVGltZSkpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB0ZXN0Qm9va2luZyA9IGJvb2tpbmdJbnRlZ3JhdGlvbi5jcmVhdGVCb29raW5nKFxuICAgICAgICAnNzVjNGYxMDgtM2VjMS00MzdkLWJkZWMtMzVkMWY4ZTJhNDRkJywgLy8gUmVhbCBkZW1vIHNwYWNlIElEXG4gICAgICAgIERFTU9fVVNFUlMuUkVTSURFTlQuaWQsIC8vIFJlYWwgZGVtbyB1c2VyIElEXG4gICAgICAgICcyMDI1LTEyLTI1VDE0OjAwOjAwWicsXG4gICAgICAgICcyMDI1LTEyLTI1VDE2OjAwOjAwWidcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdCh0ZXN0Qm9va2luZy5zdGF0dXMpLnRvQmUoJ2NvbmZpcm1lZCcpO1xuICAgICAgZXhwZWN0KHRlc3RCb29raW5nLmlkKS50b0JlKCduZXctYm9va2luZy1pZCcpO1xuICAgICAgZXhwZWN0KHR5cGVvZiB0ZXN0Qm9va2luZy5jcmVhdGVkQXQpLnRvQmUoJ3N0cmluZycpO1xuXG4gICAgICBjb25zdCB2YWxpZGF0aW9uID0gYm9va2luZ0ludGVncmF0aW9uLnZhbGlkYXRlQm9va2luZyh0ZXN0Qm9va2luZyk7XG4gICAgICBleHBlY3QodmFsaWRhdGlvbi5pc1ZhbGlkKS50b0JlKHRydWUpO1xuXG4gICAgICBjb25zdCBoYXNDb25mbGljdCA9IGJvb2tpbmdJbnRlZ3JhdGlvbi5jaGVja0NvbmZsaWN0cyhcbiAgICAgICAgJzc1YzRmMTA4LTNlYzEtNDM3ZC1iZGVjLTM1ZDFmOGUyYTQ0ZCcsIC8vIFJlYWwgZGVtbyBzcGFjZSBJRFxuICAgICAgICAnMjAyNS0xMi0yNVQxNTowMDowMFonLFxuICAgICAgICAnMjAyNS0xMi0yNVQxNzowMDowMFonLFxuICAgICAgICBbdGVzdEJvb2tpbmddXG4gICAgICApO1xuICAgICAgZXhwZWN0KGhhc0NvbmZsaWN0KS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHN1cHBvcnQgY2FsZW5kYXIgc3luY2hyb25pemF0aW9uIGZlYXR1cmVzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3luY0ZlYXR1cmVzID0ge1xuICAgICAgICBleHBvcnRUb0V4dGVybmFsOiAoZXZlbnRzOiBhbnlbXSwgZm9ybWF0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnaWNzJykge1xuICAgICAgICAgICAgY29uc3QgaWNzQ29udGVudCA9IFtcbiAgICAgICAgICAgICAgJ0JFR0lOOlZDQUxFTkRBUicsXG4gICAgICAgICAgICAgICdWRVJTSU9OOjIuMCcsXG4gICAgICAgICAgICAgICdQUk9ESUQ6LS8vS292ZW8gR2VzdGlvbi8vQ2FsZW5kYXIgRXhwb3J0Ly9GUicsXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgaWNzQ29udGVudC5wdXNoKFxuICAgICAgICAgICAgICAgICdCRUdJTjpWRVZFTlQnLFxuICAgICAgICAgICAgICAgIGBVSUQ6JHtldmVudC5pZH1Aa292ZW8uY2FgLFxuICAgICAgICAgICAgICAgIGBEVFNUQVJUOiR7ZXZlbnQuc3RhcnRUaW1lLnJlcGxhY2UoL1stOl0vZywgJycpLnNwbGl0KCcuJylbMF19WmAsXG4gICAgICAgICAgICAgICAgYERURU5EOiR7ZXZlbnQuZW5kVGltZS5yZXBsYWNlKC9bLTpdL2csICcnKS5zcGxpdCgnLicpWzBdfVpgLFxuICAgICAgICAgICAgICAgIGBTVU1NQVJZOlLDqXNlcnZhdGlvbiAtICR7ZXZlbnQudXNlck5hbWV9YCxcbiAgICAgICAgICAgICAgICAnRU5EOlZFVkVOVCdcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpY3NDb250ZW50LnB1c2goJ0VORDpWQ0FMRU5EQVInKTtcbiAgICAgICAgICAgIHJldHVybiBpY3NDb250ZW50LmpvaW4oJ1xcclxcbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgbGlua0NhbGVuZGFyOiAoc3BhY2VJZDogc3RyaW5nLCBjYWxlbmRhclR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiBjYWxlbmRhclR5cGUgPT09ICdjb21tb24tc3BhY2UnLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgY2FsZW5kYXJUeXBlID09PSAnY29tbW9uLXNwYWNlJ1xuICAgICAgICAgICAgICAgID8gJ0NhbGVuZGFyIGxpbmtlZCBzdWNjZXNzZnVsbHknXG4gICAgICAgICAgICAgICAgOiAnRmVhdHVyZSBub3QgeWV0IGF2YWlsYWJsZScsXG4gICAgICAgICAgICBsaW5rSWQ6IGNhbGVuZGFyVHlwZSA9PT0gJ2NvbW1vbi1zcGFjZScgPyBgbGluay0ke3NwYWNlSWR9LSR7RGF0ZS5ub3coKX1gIDogbnVsbCxcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgaWNzRXhwb3J0ID0gc3luY0ZlYXR1cmVzLmV4cG9ydFRvRXh0ZXJuYWwobW9ja0NhbGVuZGFyRGF0YS5ldmVudHMsICdpY3MnKTtcbiAgICAgIGV4cGVjdChpY3NFeHBvcnQpLnRvQ29udGFpbignQkVHSU46VkNBTEVOREFSJyk7XG4gICAgICBleHBlY3QoaWNzRXhwb3J0KS50b0NvbnRhaW4oJ0JFR0lOOlZFVkVOVCcpO1xuICAgICAgZXhwZWN0KGljc0V4cG9ydCkudG9Db250YWluKERFTU9fVVNFUlMuUkVTSURFTlQubmFtZSk7IC8vIFNvcGhpZSBNYXJ0aW5cblxuICAgICAgY29uc3QgbGlua1Jlc3VsdCA9IHN5bmNGZWF0dXJlcy5saW5rQ2FsZW5kYXIoXG4gICAgICAgICc3NWM0ZjEwOC0zZWMxLTQzN2QtYmRlYy0zNWQxZjhlMmE0NGQnLFxuICAgICAgICAnY29tbW9uLXNwYWNlJ1xuICAgICAgKTtcbiAgICAgIGV4cGVjdChsaW5rUmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QobGlua1Jlc3VsdC5saW5rSWQpLnRvQ29udGFpbignbGluay03NWM0ZjEwOC0zZWMxLTQzN2QtYmRlYy0zNWQxZjhlMmE0NGQnKTtcblxuICAgICAgY29uc3QgZnV0dXJlRmVhdHVyZVJlc3VsdCA9IHN5bmNGZWF0dXJlcy5saW5rQ2FsZW5kYXIoXG4gICAgICAgICc3NWM0ZjEwOC0zZWMxLTQzN2QtYmRlYy0zNWQxZjhlMmE0NGQnLFxuICAgICAgICAnbWFpbnRlbmFuY2UnXG4gICAgICApO1xuICAgICAgZXhwZWN0KGZ1dHVyZUZlYXR1cmVSZXN1bHQuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoZnV0dXJlRmVhdHVyZVJlc3VsdC5tZXNzYWdlKS50b0JlKCdGZWF0dXJlIG5vdCB5ZXQgYXZhaWxhYmxlJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=