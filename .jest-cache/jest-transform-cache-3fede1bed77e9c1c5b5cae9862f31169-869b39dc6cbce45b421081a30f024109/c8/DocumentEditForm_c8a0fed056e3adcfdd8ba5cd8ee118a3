ef86d4664f129f1862d71ca5f39abbc9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentEditForm = DocumentEditForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const label_1 = require("@/components/ui/label");
const switch_1 = require("@/components/ui/switch");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const card_1 = require("@/components/ui/card");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
const SharedUploader_1 = require("./SharedUploader");
// Document categories matching the ones used in DocumentCreateForm
const DOCUMENT_CATEGORIES = [
    { value: 'bylaw', label: 'Bylaws' },
    { value: 'financial', label: 'Financial' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'legal', label: 'Legal' },
    { value: 'meeting_minutes', label: 'Meeting Minutes' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'contracts', label: 'Contracts' },
    { value: 'permits', label: 'Permits' },
    { value: 'inspection', label: 'Inspection' },
    { value: 'other', label: 'Other' },
];
// Form schema for document editing
const documentEditSchema = zod_2.z.object({
    name: zod_2.z.string().min(1, 'Document name is required').max(255, 'Name must be less than 255 characters'),
    description: zod_2.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_2.z.enum([
        'bylaw',
        'financial',
        'maintenance',
        'legal',
        'meeting_minutes',
        'insurance',
        'contracts',
        'permits',
        'inspection',
        'other'
    ]),
    isVisibleToTenants: zod_2.z.boolean().optional(),
});
function DocumentEditForm({ document, onSuccess, onCancel, }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // State for file replacement
    const [selectedFile, setSelectedFile] = (0, react_1.useState)(null);
    const [textContent, setTextContent] = (0, react_1.useState)(null);
    const [isReplaceFile, setIsReplaceFile] = (0, react_1.useState)(false);
    // Upload context for secure storage
    const uploadContext = {
        type: document.buildingId ? 'buildings' : 'residences',
        buildingId: document.buildingId || undefined,
        residenceId: document.residenceId || undefined,
        userRole: 'admin', // This would be dynamic based on current user
        userId: 'current-user' // This would be dynamic based on current user
    };
    // Form setup with existing document data
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(documentEditSchema),
        defaultValues: {
            name: document.name || '',
            description: document.description || '',
            category: document.documentType || document.category || 'other',
            isVisibleToTenants: document.isVisibleToTenants || false,
        }
    });
    // Update document mutation
    const updateDocumentMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const formData = new FormData();
            // Add document metadata
            formData.append('name', data.name);
            formData.append('documentType', data.category);
            if (data.description) {
                formData.append('description', data.description);
            }
            formData.append('isVisibleToTenants', data.isVisibleToTenants ? 'true' : 'false');
            // Add entity associations
            if (document.buildingId) {
                formData.append('buildingId', document.buildingId);
            }
            if (document.residenceId) {
                formData.append('residenceId', document.residenceId);
            }
            // Add file if replacing
            if (isReplaceFile && selectedFile) {
                formData.append('file', selectedFile);
            }
            else if (isReplaceFile && textContent) {
                // Handle text content creation
                const textBlob = new Blob([textContent], { type: 'text/plain' });
                const textFile = new File([textBlob], `${data.name}.txt`, { type: 'text/plain' });
                formData.append('file', textFile);
            }
            const response = await (0, queryClient_1.apiRequest)('PUT', `/api/documents/${document.id}`, {
                body: formData,
            });
            if (!response.ok) {
                const error = await response.json().catch(() => ({ message: 'Unknown error' }));
                throw new Error(error.message || 'Failed to update document');
            }
            return response.json();
        },
        onSuccess: (data) => {
            toast({
                title: 'Document updated',
                description: 'The document has been successfully updated.',
            });
            // Invalidate relevant queries
            queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
            queryClient.invalidateQueries({ queryKey: ['/api/documents', document.id] });
            onSuccess();
        },
        onError: (error) => {
            toast({
                title: 'Update failed',
                description: error.message || 'Failed to update document. Please try again.',
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (data) => {
        updateDocumentMutation.mutate(data);
    };
    const handleFileUpload = (file, textContent) => {
        setSelectedFile(file);
        setTextContent(textContent);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "max-w-2xl mx-auto space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5 text-primary" }), (0, jsx_runtime_1.jsx)("h2", { className: "text-xl font-semibold", children: "Edit Document" })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "ghost", size: "sm", onClick: onCancel, "data-testid": "button-cancel-edit", children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4" }) })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-lg", children: "Document Information" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "name", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Document Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Enter document name", ...field, "data-testid": "input-document-name" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "category", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-document-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select a category" }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: DOCUMENT_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "description", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Enter document description (optional)", className: "resize-none", rows: 3, ...field, "data-testid": "input-document-description" }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Provide additional details about this document" }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "isVisibleToTenants", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-0.5", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "text-base", children: "Visible to Tenants" }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: "Allow tenants to view and download this document" })] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(switch_1.Switch, { checked: field.value || false, onCheckedChange: field.onChange, "data-testid": "switch-visible-to-tenants" }) })] })) })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-lg", children: "File Management" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "space-y-4", children: [document.filePath && ((0, jsx_runtime_1.jsx)("div", { className: "bg-gray-50 p-3 rounded-lg", children: (0, jsx_runtime_1.jsx)("div", { className: "flex items-center justify-between", children: (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm font-medium", children: "Current File" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-gray-600", children: document.fileName || document.name })] }) }) })), (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)("input", { type: "checkbox", id: "replace-file", checked: isReplaceFile, onChange: (e) => setIsReplaceFile(e.target.checked), className: "rounded", "data-testid": "checkbox-replace-file" }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: "replace-file", children: "Replace file" })] }), isReplaceFile && ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(SharedUploader_1.SharedUploader, { context: uploadContext, onFileSelect: handleFileUpload, maxFiles: 1, "data-testid": "uploader-replace-file" }) }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-end gap-3 pt-4", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: onCancel, disabled: updateDocumentMutation.isPending, "data-testid": "button-cancel", children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: updateDocumentMutation.isPending, "data-testid": "button-save-document", children: updateDocumentMutation.isPending ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "w-4 h-4 mr-2 animate-spin" }), "Saving..."] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Save, { className: "w-4 h-4 mr-2" }), "Save Changes"] })) })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,