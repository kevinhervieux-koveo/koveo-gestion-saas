e7e2fae7ac67102617b154c879fe7ce4
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModularBillForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const badge_1 = require("@/components/ui/badge");
const tabs_1 = require("@/components/ui/tabs");
const card_1 = require("@/components/ui/card");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
const utils_1 = require("@/lib/utils");
const document_management_1 = require("@/components/document-management");
const GeminiBillExtractor_1 = require("./GeminiBillExtractor");
// Unified form schema (simplified from original)
const billFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Bill title is required').max(200, 'Title must be less than 200 characters'),
    description: zod_2.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_2.z.enum([
        'insurance',
        'maintenance',
        'salary',
        'utilities',
        'cleaning',
        'security',
        'landscaping',
        'professional_services',
        'administration',
        'repairs',
        'supplies',
        'taxes',
        'technology',
        'reserves',
        'other',
    ]),
    vendor: zod_2.z.string().max(150, 'Vendor name must be less than 150 characters').optional(),
    paymentType: zod_2.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_2.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    customPayments: zod_2.z.array(zod_2.z.object({
        amount: zod_2.z.string().min(1, 'Amount is required').refine((val) => {
            const num = parseFloat(val);
            return !isNaN(num) && num > 0 && num <= 999999.99;
        }, 'Amount must be between $0.01 and $999,999.99'),
        date: zod_2.z.string().min(1, 'Date is required').refine((val) => {
            return !isNaN(Date.parse(val));
        }, 'Date must be a valid date'),
        description: zod_2.z.string().optional()
    })).optional(),
    totalAmount: zod_2.z.string().min(1, 'Amount is required and must be a valid number').refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num > 0 && num <= 999999.99;
    }, 'Amount must be between $0.01 and $999,999.99'),
    startDate: zod_2.z.string().min(1, 'Start date is required').refine((val) => {
        return !isNaN(Date.parse(val));
    }, 'Start date must be a valid date'),
    endDate: zod_2.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return !isNaN(Date.parse(val));
    }, 'End date must be a valid date'),
    status: zod_2.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),
    notes: zod_2.z.string().max(2000, 'Notes must be less than 2000 characters').optional(),
});
const BILL_CATEGORIES = [
    { value: 'utilities', label: 'Utilities' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'cleaning', label: 'Cleaning' },
    { value: 'security', label: 'Security' },
    { value: 'landscaping', label: 'Landscaping' },
    { value: 'professional_services', label: 'Professional Services' },
    { value: 'administration', label: 'Administration' },
    { value: 'repairs', label: 'Repairs' },
    { value: 'supplies', label: 'Supplies' },
    { value: 'taxes', label: 'Taxes' },
    { value: 'technology', label: 'Technology' },
    { value: 'salary', label: 'Salary' },
    { value: 'reserves', label: 'Reserves' },
    { value: 'other', label: 'Other' },
];
function ModularBillForm({ bill, onSuccess, onCancel, buildingId }) {
    const { t } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // State for AI extraction
    const [aiFile, setAiFile] = (0, react_1.useState)(null);
    const [isAiMode, setIsAiMode] = (0, react_1.useState)(false);
    const [aiExtractionData, setAiExtractionData] = (0, react_1.useState)(null);
    const [isExtracting, setIsExtracting] = (0, react_1.useState)(false);
    const [aiEnabled, setAiEnabled] = (0, react_1.useState)(true); // AI enabled by default for bills
    // State for manual document upload
    const [manualFile, setManualFile] = (0, react_1.useState)(null);
    const [customPayments, setCustomPayments] = (0, react_1.useState)([]);
    // Upload context for secure storage
    const uploadContext = {
        type: 'bills',
        organizationId: 'default', // Would be dynamic based on user's org
        buildingId,
        userRole: 'admin', // Would be dynamic based on user's role
        userId: 'current-user' // Would be dynamic based on current user
    };
    // Form setup
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(billFormSchema),
        defaultValues: {
            title: bill?.title || '',
            description: bill?.description || '',
            category: bill?.category || 'other',
            vendor: bill?.vendor || '',
            paymentType: bill?.paymentType || 'unique',
            schedulePayment: 'monthly',
            customPayments: [],
            totalAmount: bill?.totalAmount?.toString() || '',
            startDate: bill?.startDate || '',
            endDate: bill?.endDate || '',
            status: bill?.status || 'draft',
            notes: bill?.notes || '',
        }
    });
    const paymentType = form.watch('paymentType');
    const schedulePayment = form.watch('schedulePayment');
    // Handle AI extraction results
    const handleAiExtractionComplete = (data) => {
        // Handle loading state
        if (data.isLoading) {
            setIsExtracting(true);
            toast({
                title: 'AI Extraction Started',
                description: 'Processing your document... This may take a few seconds.',
            });
            return;
        }
        // Clear loading state
        setIsExtracting(false);
        if (data.success && data.formData) {
            setAiExtractionData(data.formData);
            // Auto-fill form with AI data
            Object.entries(data.formData).forEach(([key, value]) => {
                if (key === 'customPayments' && Array.isArray(value)) {
                    setCustomPayments(value);
                    form.setValue('customPayments', value);
                }
                else if (value && typeof value === 'string') {
                    form.setValue(key, value);
                }
            });
            toast({
                title: 'AI Extraction Complete',
                description: `Successfully extracted bill data with ${Math.round((data.confidence || 0.9) * 100)}% confidence`,
            });
        }
        else {
            toast({
                title: 'AI Extraction Failed',
                description: data.error || 'Failed to extract bill data',
                variant: 'destructive',
            });
        }
    };
    // Handle AI toggle
    const handleAiToggle = (enabled) => {
        setAiEnabled(enabled);
        if (!enabled) {
            setAiExtractionData(null);
            setIsExtracting(false);
        }
    };
    // Handle AI analysis completion
    const handleAiAnalysisComplete = (analysisData) => {
        if (analysisData.success) {
            setAiExtractionData(analysisData.extractedData);
            setIsExtracting(false);
            // Auto-populate form with extracted data
            if (analysisData.extractedData) {
                const data = analysisData.extractedData;
                if (data.title)
                    form.setValue('title', data.title);
                if (data.vendor)
                    form.setValue('vendor', data.vendor);
                if (data.amount)
                    form.setValue('totalAmount', data.amount.toString());
                if (data.category)
                    form.setValue('category', data.category);
                if (data.date)
                    form.setValue('startDate', data.date);
                if (data.description)
                    form.setValue('description', data.description);
            }
            toast({
                title: 'AI Analysis Complete',
                description: 'Bill data has been extracted and populated in the form.',
            });
        }
        else {
            setIsExtracting(false);
            toast({
                title: 'AI Analysis Failed',
                description: analysisData.error || 'Failed to analyze document',
                variant: 'destructive',
            });
        }
    };
    // Handle file upload from SharedUploader
    const handleFileUpload = (file, extractedText) => {
        if (file) {
            if (aiEnabled) {
                setAiFile(file);
                setIsAiMode(true);
                setIsExtracting(true);
            }
            else {
                setManualFile(file);
            }
        }
    };
    // Create/Update bill mutation
    const billMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const endpoint = bill ? `/api/bills/${bill.id}` : '/api/bills';
            const method = bill ? 'PUT' : 'POST';
            const billData = {
                ...data,
                buildingId: buildingId || bill?.buildingId,
                costs: [data.totalAmount], // Convert single amount to costs array
            };
            const response = await (0, queryClient_1.apiRequest)(method, endpoint, billData);
            const billResponse = await response.json();
            // Upload document if one was attached (either from AI extraction or manual entry)
            const fileToUpload = aiFile || manualFile;
            if (!bill && fileToUpload) {
                try {
                    console.log('[BILL FORM] Uploading document:', fileToUpload.name, 'for bill:', billResponse.id);
                    const formData = new FormData();
                    formData.append('document', fileToUpload);
                    const uploadResponse = await fetch(`/api/bills/${billResponse.id}/upload-document`, {
                        method: 'POST',
                        credentials: 'include',
                        body: formData,
                    });
                    if (!uploadResponse.ok) {
                        const errorText = await uploadResponse.text();
                        console.error('[BILL FORM] Upload failed with status:', uploadResponse.status, errorText);
                        throw new Error(`Upload failed: ${uploadResponse.status} ${errorText}`);
                    }
                    const uploadResult = await uploadResponse.json();
                    console.log('[BILL FORM] Document upload successful:', uploadResult);
                    // Update the bill response with the document information from the upload
                    if (uploadResult.bill) {
                        billResponse.filePath = uploadResult.bill.filePath;
                        billResponse.fileName = uploadResult.bill.fileName;
                        billResponse.fileSize = uploadResult.bill.fileSize;
                        billResponse.isAiAnalyzed = uploadResult.bill.isAiAnalyzed;
                        billResponse.aiAnalysisData = uploadResult.bill.aiAnalysisData;
                    }
                    // Show success toast for document upload
                    toast({
                        title: 'Document Uploaded',
                        description: `${fileToUpload.name} has been attached to the bill`,
                    });
                }
                catch (uploadError) {
                    console.error('[BILL FORM] Failed to upload document:', uploadError);
                    toast({
                        title: 'Document Upload Failed',
                        description: `Failed to upload ${fileToUpload.name}. The bill was created but without the document.`,
                        variant: 'destructive',
                    });
                    // Don't fail the bill creation if document upload fails
                }
            }
            return billResponse;
        },
        onSuccess: (data) => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            toast({
                title: 'Success',
                description: `Bill ${bill ? 'updated' : 'created'} successfully`,
            });
            onSuccess?.(data.id, bill ? 'updated' : 'created');
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || `Failed to ${bill ? 'update' : 'create'} bill`,
                variant: 'destructive',
            });
        }
    });
    // Delete bill mutation
    const deleteBillMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            if (!bill?.id)
                throw new Error('No bill ID provided for deletion');
            return (0, queryClient_1.apiRequest)('DELETE', `/api/bills/${bill.id}`, null);
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            toast({
                title: 'Success',
                description: 'Bill deleted successfully',
            });
            onSuccess?.(bill.id, 'updated'); // Trigger parent refresh
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to delete bill',
                variant: 'destructive',
            });
        }
    });
    const onSubmit = (data) => {
        billMutation.mutate(data);
    };
    const handleDelete = () => {
        if (!bill)
            return;
        if (confirm(`Are you sure you want to delete bill "${bill.title}"? This action cannot be undone.`)) {
            deleteBillMutation.mutate();
        }
    };
    // Custom Payment Management
    const addCustomPayment = () => {
        const newPayment = { amount: '', date: '', description: '' };
        setCustomPayments([...customPayments, newPayment]);
    };
    const removeCustomPayment = (index) => {
        const updated = customPayments.filter((_, i) => i !== index);
        setCustomPayments(updated);
        form.setValue('customPayments', updated);
    };
    const updateCustomPayment = (index, field, value) => {
        const updated = customPayments.map((payment, i) => i === index ? { ...payment, [field]: value } : payment);
        setCustomPayments(updated);
        form.setValue('customPayments', updated);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-semibold", children: bill ? 'Edit Bill' : 'Create New Bill' }), aiExtractionData && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "secondary", className: "flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-3 h-3" }), "AI Extracted"] }))] }), !bill && ((0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: "manual", className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: (0, utils_1.cn)("grid w-full", aiEnabled ? "grid-cols-2" : "grid-cols-1"), children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: "manual", "data-testid": "tab-manual", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-4 h-4 mr-2" }), "Manual Entry"] }), aiEnabled && ((0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: "ai", "data-testid": "tab-ai", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-4 h-4 mr-2" }), "AI Extraction"] }))] }), aiEnabled && ((0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "ai", className: "space-y-4", children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-5 h-5" }), "Upload Bill Document"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: handleFileUpload, formType: "bills", uploadContext: uploadContext, aiAnalysisEnabled: aiEnabled, onAiToggle: handleAiToggle, onAiAnalysisComplete: handleAiAnalysisComplete, showAiToggle: false, allowedFileTypes: ['image/*', 'application/pdf'], maxFileSize: 25 }), isExtracting && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-4 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg border border-blue-200 dark:border-blue-800", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600" }), (0, jsx_runtime_1.jsx)("span", { className: "text-blue-700 dark:text-blue-300 font-medium", children: "Extracting data from your document..." })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-blue-600 dark:text-blue-400 mt-1", children: "This may take a few seconds depending on document complexity." })] })), aiFile && ((0, jsx_runtime_1.jsx)(GeminiBillExtractor_1.GeminiBillExtractor, { file: aiFile, onExtractionComplete: handleAiExtractionComplete }))] })] }) })), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "manual", className: "space-y-4", children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5" }), "Upload Document (Optional)"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: handleFileUpload, formType: "bills", uploadContext: uploadContext, aiAnalysisEnabled: false, showAiToggle: false, allowedFileTypes: ['image/*', 'application/pdf'], maxFileSize: 25 }) })] }) })] })), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "title", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Title *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "e.g., Monthly Electricity Bill", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "vendor", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Vendor" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "e.g., Hydro Quebec", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "category", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select category" }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: BILL_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "paymentType", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Type *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select payment type" }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "unique", children: "One-time Payment" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "recurrent", children: "Recurring Payment" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "totalAmount", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Total Amount *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "0.00", type: "number", step: "0.01", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "startDate", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Start Date *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: "date", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), paymentType === 'recurrent' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "schedulePayment", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Schedule" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select schedule" }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "weekly", children: "Weekly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "monthly", children: "Monthly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "quarterly", children: "Quarterly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "yearly", children: "Yearly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "custom", children: "Custom Schedule" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), schedulePayment === 'custom' && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { children: "Custom Payment Schedule" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: addCustomPayment, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Add Payment"] })] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "space-y-3", children: customPayments.map((payment, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2 items-end", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Amount", type: "number", step: "0.01", value: payment.amount, onChange: (e) => updateCustomPayment(index, 'amount', e.target.value) }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: "date", value: payment.date, onChange: (e) => updateCustomPayment(index, 'date', e.target.value) }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Description", value: payment.description || '', onChange: (e) => updateCustomPayment(index, 'description', e.target.value) }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: () => removeCustomPayment(index), children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4" }) })] }, index))) })] }))] })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "description", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Additional details about this bill...", className: "min-h-[100px]", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "notes", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Notes" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Internal notes...", className: "min-h-[80px]", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("div", { children: bill && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "destructive", onClick: handleDelete, disabled: deleteBillMutation.isPending, children: deleteBillMutation.isPending ? 'Deleting...' : 'Delete Bill' })) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [onCancel && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: onCancel, children: "Cancel" })), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: billMutation.isPending, children: billMutation.isPending ? 'Processing...' : (bill ? 'Update Bill' : 'Create Bill') })] })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,