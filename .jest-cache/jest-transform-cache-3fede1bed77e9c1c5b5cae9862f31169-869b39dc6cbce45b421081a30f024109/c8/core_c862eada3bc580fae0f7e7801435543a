b7786f7e68fd6bb78359783ae3e33e44
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertUserPermissionSchema = exports.insertRolePermissionSchema = exports.insertPermissionSchema = exports.insertInvitationAuditLogSchema = exports.insertPasswordResetTokenSchema = exports.insertInvitationSchema = exports.insertUserOrganizationSchema = exports.insertOrganizationSchema = exports.insertUserSchema = exports.userPermissions = exports.rolePermissions = exports.permissions = exports.actionEnum = exports.resourceTypeEnum = exports.invitationAuditLog = exports.passwordResetTokens = exports.invitations = exports.userOrganizations = exports.organizations = exports.users = exports.invitationStatusEnum = exports.userRoleEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
// Core enums
/**
 * Enum defining user roles in the Quebec property management system.
 * Determines user permissions and access levels across the application.
 */
exports.userRoleEnum = (0, pg_core_1.pgEnum)('user_role', [
    'admin',
    'manager',
    'tenant',
    'resident',
    'demo_manager',
    'demo_tenant',
    'demo_resident',
]);
/**
 * Enum defining invitation status values for user invitation system.
 * Tracks the lifecycle of user invitations from creation to completion.
 */
exports.invitationStatusEnum = (0, pg_core_1.pgEnum)('invitation_status', [
    'pending',
    'accepted',
    'expired',
    'cancelled',
]);
// Core tables
/**
 * Users table for the Koveo Gestion property management system.
 * Stores user authentication and profile information for all system users.
 * Supports Quebec-specific language preferences and role-based access.
 */
exports.users = (0, pg_core_1.pgTable)('users', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    username: (0, pg_core_1.text)('username').notNull().unique(), // Username field required by database
    email: (0, pg_core_1.text)('email').notNull().unique(),
    password: (0, pg_core_1.text)('password').notNull(),
    firstName: (0, pg_core_1.text)('first_name').notNull(),
    lastName: (0, pg_core_1.text)('last_name').notNull(),
    phone: (0, pg_core_1.text)('phone'),
    profileImage: (0, pg_core_1.text)('profile_image'),
    language: (0, pg_core_1.text)('language').notNull().default('fr'), // Default to French for Quebec
    role: (0, exports.userRoleEnum)('role').notNull().default('tenant'),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    lastLoginAt: (0, pg_core_1.timestamp)('last_login_at'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Organizations table storing management companies, syndicates, and co-ownership entities.
 * Represents the legal entities responsible for property management in Quebec.
 */
exports.organizations = (0, pg_core_1.pgTable)('organizations', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)('name').notNull(),
    type: (0, pg_core_1.text)('type').notNull(), // 'management_company', 'syndicate', 'cooperative', 'condo_association', 'demo'
    address: (0, pg_core_1.text)('address').notNull(),
    city: (0, pg_core_1.text)('city').notNull(),
    province: (0, pg_core_1.text)('province').notNull().default('QC'),
    postalCode: (0, pg_core_1.text)('postal_code').notNull(),
    phone: (0, pg_core_1.text)('phone'),
    email: (0, pg_core_1.text)('email'),
    website: (0, pg_core_1.text)('website'),
    registrationNumber: (0, pg_core_1.text)('registration_number'), // Quebec business registration
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * User-Organization relationship table to manage users belonging to organizations.
 * Users can belong to multiple organizations with different roles.
 */
exports.userOrganizations = (0, pg_core_1.pgTable)('user_organizations', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => exports.users.id, { onDelete: 'cascade' }),
    organizationId: (0, pg_core_1.varchar)('organization_id')
        .notNull()
        .references(() => exports.organizations.id, { onDelete: 'cascade' }),
    organizationRole: (0, exports.userRoleEnum)('organization_role').notNull().default('tenant'),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    canAccessAllOrganizations: (0, pg_core_1.boolean)('can_access_all_organizations').notNull().default(false),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Invitations table for managing user invitations to organizations.
 * Supports role-based invitations with expiration and security features.
 */
exports.invitations = (0, pg_core_1.pgTable)('invitations', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    organizationId: (0, pg_core_1.varchar)('organization_id'),
    buildingId: (0, pg_core_1.varchar)('building_id'),
    residenceId: (0, pg_core_1.text)('residence_id'),
    email: (0, pg_core_1.text)('email').notNull(),
    token: (0, pg_core_1.text)('token').notNull().unique(),
    role: (0, exports.userRoleEnum)('role').notNull(),
    status: (0, exports.invitationStatusEnum)('status').notNull().default('pending'),
    invitedByUserId: (0, pg_core_1.varchar)('invited_by_user_id').notNull(),
    expiresAt: (0, pg_core_1.timestamp)('expires_at').notNull(),
    tokenHash: (0, pg_core_1.text)('token_hash').notNull(),
    usageCount: (0, pg_core_1.integer)('usage_count').notNull().default(0),
    maxUsageCount: (0, pg_core_1.integer)('max_usage_count').notNull().default(1),
    personalMessage: (0, pg_core_1.text)('personal_message'),
    invitationContext: (0, pg_core_1.json)('invitation_context'),
    securityLevel: (0, pg_core_1.text)('security_level'),
    requires2fa: (0, pg_core_1.boolean)('requires_2fa').notNull().default(false),
    acceptedAt: (0, pg_core_1.timestamp)('accepted_at'),
    acceptedBy: (0, pg_core_1.varchar)('accepted_by_user_id'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
    lastAccessedAt: (0, pg_core_1.timestamp)('last_accessed_at'),
    ipAddress: (0, pg_core_1.text)('ip_address'),
    userAgent: (0, pg_core_1.text)('user_agent'),
});
/**
 * Password reset tokens table for secure password reset functionality.
 * Stores temporary tokens that expire after a set time for security.
 */
exports.passwordResetTokens = (0, pg_core_1.pgTable)('password_reset_tokens', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => exports.users.id, { onDelete: 'cascade' }),
    token: (0, pg_core_1.text)('token').notNull().unique(),
    tokenHash: (0, pg_core_1.text)('token_hash').notNull(), // Hashed version for security
    expiresAt: (0, pg_core_1.timestamp)('expires_at').notNull(),
    usedAt: (0, pg_core_1.timestamp)('used_at'),
    isUsed: (0, pg_core_1.boolean)('is_used').notNull().default(false),
    ipAddress: (0, pg_core_1.text)('ip_address'),
    userAgent: (0, pg_core_1.text)('user_agent'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
/**
 * Invitation audit log table for tracking invitation operations and security events.
 * Provides comprehensive logging for invitation lifecycle and security monitoring.
 */
exports.invitationAuditLog = (0, pg_core_1.pgTable)('invitation_audit_log', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    invitationId: (0, pg_core_1.varchar)('invitation_id').references(() => exports.invitations.id, { onDelete: 'cascade' }),
    action: (0, pg_core_1.text)('action').notNull(),
    performedBy: (0, pg_core_1.varchar)('performed_by').references(() => exports.users.id),
    ipAddress: (0, pg_core_1.text)('ip_address'),
    userAgent: (0, pg_core_1.text)('user_agent'),
    details: (0, pg_core_1.json)('details'),
    previousStatus: (0, exports.invitationStatusEnum)('previous_status'),
    newStatus: (0, exports.invitationStatusEnum)('new_status'),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
// Permissions enums
exports.resourceTypeEnum = (0, pg_core_1.pgEnum)('resource_type', [
    'user',
    'users', // Added to handle existing production data
    'organization',
    'building',
    'residence',
    'bill',
    'budget',
    'maintenance_request',
    'document',
    'audit_log',
    'system_settings',
    'development_pillar',
    'quality_metric',
    'feature',
    'actionable_item',
    'improvement_suggestion',
]);
exports.actionEnum = (0, pg_core_1.pgEnum)('action', [
    'read',
    'create',
    'update',
    'delete',
    'manage',
    'approve',
    'assign',
    'share',
    'export',
    'backup',
    'restore',
]);
// Permissions tables
exports.permissions = (0, pg_core_1.pgTable)('permissions', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)('name').notNull().unique(),
    displayName: (0, pg_core_1.text)('display_name').notNull(),
    description: (0, pg_core_1.text)('description'),
    resourceType: (0, exports.resourceTypeEnum)('resource_type').notNull(),
    action: (0, exports.actionEnum)('action').notNull(),
    conditions: (0, pg_core_1.json)('conditions'),
    isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
exports.rolePermissions = (0, pg_core_1.pgTable)('role_permissions', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    role: (0, exports.userRoleEnum)('role').notNull(),
    permissionId: (0, pg_core_1.uuid)('permission_id')
        .notNull()
        .references(() => exports.permissions.id),
    grantedBy: (0, pg_core_1.varchar)('granted_by').references(() => exports.users.id),
    grantedAt: (0, pg_core_1.timestamp)('granted_at').defaultNow(),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
});
exports.userPermissions = (0, pg_core_1.pgTable)('user_permissions', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    userId: (0, pg_core_1.varchar)('user_id')
        .notNull()
        .references(() => exports.users.id),
    permissionId: (0, pg_core_1.uuid)('permission_id')
        .notNull()
        .references(() => exports.permissions.id),
    granted: (0, pg_core_1.boolean)('granted').notNull().default(true),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
// Insert schemas - manual Zod schemas to avoid drizzle-zod compatibility issues
exports.insertUserSchema = zod_1.z.object({
    username: zod_1.z.string().min(1).max(50, 'Username must be between 1-50 characters'),
    email: zod_1.z.string().email('Must be a valid email address').toLowerCase(),
    password: zod_1.z
        .string()
        .min(8, 'Password must be at least 8 characters')
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*(),.?":{}|<>])/, 'Password must contain uppercase, lowercase, number, and special character'),
    firstName: zod_1.z.string().min(1).max(100, 'First name must be 1-100 characters').trim(),
    lastName: zod_1.z.string().min(1).max(100, 'Last name must be 1-100 characters').trim(),
    phone: zod_1.z
        .string()
        .optional()
        .refine((phone) => !phone || /^(\+1\s?)?(\([0-9]{3}\)|[0-9]{3})[\s.-]?[0-9]{3}[\s.-]?[0-9]{4}$/.test(phone), 'Phone must be a valid North American format (e.g., 514-123-4567 or (514) 123-4567)'),
    profileImage: zod_1.z.string().optional(),
    language: zod_1.z.string().default('fr'),
    role: zod_1.z
        .enum([
        'admin',
        'manager',
        'tenant',
        'resident',
        'demo_manager',
        'demo_tenant',
        'demo_resident',
    ])
        .default('tenant'),
});
exports.insertOrganizationSchema = zod_1.z.object({
    name: zod_1.z.string().min(1),
    type: zod_1.z.string(),
    address: zod_1.z.string(),
    city: zod_1.z.string(),
    province: zod_1.z.string().default('QC'),
    postalCode: zod_1.z.string(),
    phone: zod_1.z.string().optional(),
    email: zod_1.z.string().email().optional(),
    website: zod_1.z.string().url().optional(),
    registrationNumber: zod_1.z.string().optional(),
});
exports.insertUserOrganizationSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    organizationId: zod_1.z.string().uuid(),
    organizationRole: zod_1.z
        .enum([
        'admin',
        'manager',
        'tenant',
        'resident',
        'demo_manager',
        'demo_tenant',
        'demo_resident',
    ])
        .default('tenant'),
    canAccessAllOrganizations: zod_1.z.boolean().default(false),
});
exports.insertInvitationSchema = zod_1.z.object({
    organizationId: zod_1.z.string().uuid().optional(),
    residenceId: zod_1.z.union([zod_1.z.string().uuid(), zod_1.z.null()]).optional(),
    email: zod_1.z.string().email(),
    role: zod_1.z.enum([
        'admin',
        'manager',
        'tenant',
        'resident',
        'demo_manager',
        'demo_tenant',
        'demo_resident',
    ]),
    invitedByUserId: zod_1.z.string().uuid(),
    expiresAt: zod_1.z.union([
        zod_1.z.date(),
        zod_1.z
            .string()
            .datetime()
            .transform((str) => new Date(str)),
    ]),
});
exports.insertPasswordResetTokenSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    token: zod_1.z.string(),
    tokenHash: zod_1.z.string(),
    expiresAt: zod_1.z.date(),
    ipAddress: zod_1.z.string().optional(),
    userAgent: zod_1.z.string().optional(),
});
exports.insertInvitationAuditLogSchema = zod_1.z.object({
    invitationId: zod_1.z.string().uuid(),
    action: zod_1.z.string(),
    performedBy: zod_1.z.string().uuid(),
    ipAddress: zod_1.z.string().optional(),
    userAgent: zod_1.z.string().optional(),
    details: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
    previousStatus: zod_1.z.string().optional(),
    newStatus: zod_1.z.string().optional(),
});
exports.insertPermissionSchema = zod_1.z.object({
    name: zod_1.z.string(),
    displayName: zod_1.z.string(),
    description: zod_1.z.string().optional(),
    resourceType: zod_1.z.string(),
    action: zod_1.z.string(),
    conditions: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
    isActive: zod_1.z.boolean().default(true),
});
exports.insertRolePermissionSchema = zod_1.z.object({
    role: zod_1.z.enum([
        'admin',
        'manager',
        'tenant',
        'resident',
        'demo_manager',
        'demo_tenant',
        'demo_resident',
    ]),
    permissionId: zod_1.z.string().uuid(),
});
exports.insertUserPermissionSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
    permissionId: zod_1.z.string().uuid(),
    granted: zod_1.z.boolean().default(true),
});
// Relations - Temporarily commented out due to drizzle-orm version compatibility
// TODO: Fix relations import compatibility with current drizzle-orm version
/*
export const usersRelations = relations(users, ({ many }) => ({
  userOrganizations: many(userOrganizations),
  sentInvitations: many(invitations, { relationName: 'invitedByUserId' }),
  acceptedInvitations: many(invitations, { relationName: 'acceptedBy' }),
  passwordResetTokens: many(passwordResetTokens),
}));
*/
/*
export const organizationsRelations = relations(organizations, ({ many }) => ({
  userOrganizations: many(userOrganizations),
  invitations: many(invitations),
}));
*/
/*
export const userOrganizationsRelations = relations(userOrganizations, ({ one }) => ({
  user: one(users, {
    fields: [userOrganizations.userId],
    references: [users.id],
  }),
  organization: one(organizations, {
    fields: [userOrganizations.organizationId],
    references: [organizations.id],
  }),
}));
*/
/*
export const invitationsRelations = relations(invitations, ({ one }) => ({
  organization: one(organizations, {
    fields: [invitations.organizationId],
    references: [organizations.id],
  }),
  invitedByUserId: one(users, {
    fields: [invitations.invitedByUserId],
    references: [users.id],
    relationName: 'invitedByUserId',
  }),
  acceptedBy: one(users, {
    fields: [invitations.acceptedBy],
    references: [users.id],
    relationName: 'acceptedBy',
  }),
}));
*/
/*
export const passwordResetTokensRelations = relations(passwordResetTokens, ({ one }) => ({
  user: one(users, {
    fields: [passwordResetTokens.userId],
    references: [users.id],
  }),
}));
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,