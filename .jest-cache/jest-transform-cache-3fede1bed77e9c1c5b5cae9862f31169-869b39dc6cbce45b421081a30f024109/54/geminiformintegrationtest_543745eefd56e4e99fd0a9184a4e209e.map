{"file":"/home/runner/workspace/tests/unit/gemini-form-integration.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/gemini-form-integration.test.tsx"],"sourcesContent":["/**\n * @file Gemini Integration Form Fill Test Suite\n * @description Comprehensive tests for AI-powered form filling functionality\n * Tests the integration between Gemini AI bill analysis and form auto-population\n * Designed to identify potential issues in the AI form filling workflow\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { describe, it, expect, beforeEach, jest, beforeAll, afterAll } from '@jest/globals';\nimport '@testing-library/jest-dom';\n\n// Mock the hooks and utils\njest.mock('@/hooks/use-language', () => ({\n  useLanguage: () => ({\n    t: (key: string) => key,\n  }),\n}));\n\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({\n    toast: jest.fn(),\n  }),\n}));\n\n// Mock fetch with proper typing\nconst mockFetch = jest.fn() as jest.MockedFunction<typeof fetch>;\nglobal.fetch = mockFetch;\n\n// Helper function to create proper Response objects\nconst createMockResponse = (data: any, options: { ok?: boolean; status?: number } = {}) => {\n  const { ok = true, status = 200 } = options;\n  return Promise.resolve({\n    ok,\n    status,\n    json: async () => data,\n    headers: new Headers(),\n    redirected: false,\n    statusText: ok ? 'OK' : 'Error',\n    type: 'basic' as ResponseType,\n    url: '',\n    clone: jest.fn(),\n    body: null,\n    bodyUsed: false,\n    arrayBuffer: jest.fn(),\n    blob: jest.fn(),\n    formData: jest.fn(),\n    text: jest.fn(),\n  } as Response);\n};\n\nconst createMockQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n      mutations: {\n        retry: false,\n      }\n    },\n  });\n\n// Mock bill analysis responses - testing various scenarios\nconst mockAnalysisResponses = {\n  successful: {\n    title: \"Hydro-Québec Electricity Bill\",\n    vendor: \"Hydro-Québec\", \n    totalAmount: \"245.67\",\n    category: \"utilities\",\n    description: \"Monthly electricity consumption\",\n    dueDate: \"2025-01-31\",\n    issueDate: \"2025-01-01\",\n    billNumber: \"HQ-2025-001234\",\n    confidence: 0.95\n  },\n  lowConfidence: {\n    title: \"Unclear Insurance Document\",\n    vendor: \"Unknown Provider\",\n    totalAmount: \"0.00\",\n    category: \"other\",\n    description: \"\",\n    confidence: 0.25\n  },\n  invalidData: {\n    title: \"\",\n    vendor: \"Valid Vendor\",\n    totalAmount: \"invalid-amount\",\n    category: \"invalid-category\",\n    confidence: 1.5 // Invalid confidence > 1.0\n  },\n  partialData: {\n    title: \"Property Maintenance Bill\",\n    vendor: \"ABC Maintenance\",\n    totalAmount: \"1250.00\",\n    category: \"maintenance\"\n    // Missing other fields to test partial filling\n  },\n  frenchContent: {\n    title: \"Facture d'Assurance Habitation\", \n    vendor: \"Assurances Desjardins\",\n    totalAmount: \"2400.00\",\n    category: \"insurance\",\n    description: \"Prime annuelle d'assurance habitation\",\n    dueDate: \"2025-12-31\",\n    confidence: 0.88\n  }\n};\n\n// Test component that simulates the BillForm AI integration\nconst TestBillFormWithAI = () => {\n  const [uploadedFile, setUploadedFile] = React.useState<File | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = React.useState(false);\n  const [aiAnalysisData, setAiAnalysisData] = React.useState<any>(null);\n  const [formData, setFormData] = React.useState({\n    title: '',\n    vendor: '',\n    category: 'other',\n    totalAmount: '',\n    description: '',\n    startDate: new Date().toISOString().split('T')[0],\n    paymentType: 'unique',\n    notes: ''\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setUploadedFile(file);\n    }\n  };\n\n  const analyzeDocument = async () => {\n    if (!uploadedFile) return;\n    \n    setIsAnalyzing(true);\n    \n    try {\n      const formData = new FormData();\n      formData.append('document', uploadedFile);\n\n      const response = await fetch('/api/bills/analyze-document', {\n        method: 'POST',\n        credentials: 'include',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to analyze document');\n      }\n\n      const result = await response.json();\n      setAiAnalysisData(result);\n      \n      // Simulate the smart form filling logic from BillForm.tsx\n      if (result) {\n        setFormData(current => {\n          const updated = { ...current };\n          \n          // Only fill empty fields (simulating the smart logic)\n          if (!current.title) {\n            updated.title = result.title || '';\n          }\n          if (!current.vendor) {\n            updated.vendor = result.vendor || '';\n          }\n          if (current.category === 'other') {\n            updated.category = result.category || 'other';\n          }\n          if (!current.totalAmount) {\n            updated.totalAmount = result.totalAmount || '';\n          }\n          if (!current.description) {\n            updated.description = result.description || '';\n          }\n          \n          // Add AI analysis info to notes\n          const aiNotes = [];\n          if (result.billNumber) {\n            aiNotes.push(`Bill Number: ${result.billNumber}`);\n          }\n          if (result.dueDate) {\n            aiNotes.push(`Due Date: ${result.dueDate}`);\n          }\n          aiNotes.push(`AI Analysis Confidence: ${(result.confidence * 100).toFixed(1)}%`);\n          \n          if (aiNotes.length > 0) {\n            const aiNotesText = aiNotes.join('\\n');\n            updated.notes = current.notes ? \n              `${current.notes}\\n\\n--- AI Analysis ---\\n${aiNotesText}` : \n              aiNotesText;\n          }\n          \n          return updated;\n        });\n      }\n    } catch (error) {\n      console.error('Analysis failed:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  return (\n    <div data-testid=\"ai-bill-form\">\n      <div data-testid=\"file-upload-section\">\n        <input\n          type=\"file\"\n          accept=\".pdf,.jpg,.jpeg,.png,.gif\"\n          onChange={handleFileUpload}\n          data-testid=\"file-input\"\n        />\n        <button\n          onClick={analyzeDocument}\n          disabled={!uploadedFile || isAnalyzing}\n          data-testid=\"analyze-button\"\n        >\n          {isAnalyzing ? 'Analyzing...' : 'Upload & Analyze'}\n        </button>\n      </div>\n\n      <form data-testid=\"bill-form\">\n        <div data-testid=\"form-fields\">\n          <input\n            data-testid=\"input-title\"\n            type=\"text\"\n            placeholder=\"Bill Title\"\n            value={formData.title}\n            onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n          />\n          <input\n            data-testid=\"input-vendor\"\n            type=\"text\"\n            placeholder=\"Vendor\"\n            value={formData.vendor}\n            onChange={(e) => setFormData(prev => ({ ...prev, vendor: e.target.value }))}\n          />\n          <select\n            data-testid=\"select-category\"\n            value={formData.category}\n            onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value }))}\n          >\n            <option value=\"other\">Other</option>\n            <option value=\"utilities\">Utilities</option>\n            <option value=\"maintenance\">Maintenance</option>\n            <option value=\"insurance\">Insurance</option>\n          </select>\n          <input\n            data-testid=\"input-amount\"\n            type=\"text\"\n            placeholder=\"Total Amount\"\n            value={formData.totalAmount}\n            onChange={(e) => setFormData(prev => ({ ...prev, totalAmount: e.target.value }))}\n          />\n          <textarea\n            data-testid=\"input-description\"\n            placeholder=\"Description\"\n            value={formData.description}\n            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n          />\n          <textarea\n            data-testid=\"input-notes\"\n            placeholder=\"Notes\"\n            value={formData.notes}\n            onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n          />\n        </div>\n      </form>\n\n      {aiAnalysisData && (\n        <div data-testid=\"analysis-result\">\n          <div data-testid=\"analysis-confidence\">\n            Confidence: {(aiAnalysisData.confidence * 100).toFixed(1)}%\n          </div>\n          <div data-testid=\"analysis-data\">\n            {JSON.stringify(aiAnalysisData)}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = createMockQueryClient();\n  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n};\n\ndescribe('Gemini Form Integration Tests', () => {\n  // Mock console.error to avoid test output pollution\n  const originalConsoleError = console.error;\n  \n  beforeEach(() => {\n    mockFetch.mockClear();\n    console.error = jest.fn();\n  });\n  \n  afterAll(() => {\n    console.error = originalConsoleError;\n  });\n\n  describe('Successful AI Analysis Scenarios', () => {\n    it('should successfully analyze a clear utility bill and fill form correctly', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(mockAnalysisResponses.successful)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      // Upload a file\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'hydro-bill.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      // Click analyze button\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      // Wait for analysis to complete\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/bills/analyze-document', expect.any(Object));\n      });\n\n      await waitFor(() => {\n        // Verify form fields were populated correctly\n        const titleInput = screen.getByTestId('input-title') as HTMLInputElement;\n        const vendorInput = screen.getByTestId('input-vendor') as HTMLInputElement;\n        const categorySelect = screen.getByTestId('select-category') as HTMLSelectElement;\n        const amountInput = screen.getByTestId('input-amount') as HTMLInputElement;\n        const descriptionInput = screen.getByTestId('input-description') as HTMLTextAreaElement;\n        const notesInput = screen.getByTestId('input-notes') as HTMLTextAreaElement;\n\n        expect(titleInput.value).toBe('Hydro-Québec Electricity Bill');\n        expect(vendorInput.value).toBe('Hydro-Québec');\n        expect(categorySelect.value).toBe('utilities');\n        expect(amountInput.value).toBe('245.67');\n        expect(descriptionInput.value).toBe('Monthly electricity consumption');\n        expect(notesInput.value).toContain('Bill Number: HQ-2025-001234');\n        expect(notesInput.value).toContain('Due Date: 2025-01-31');\n        expect(notesInput.value).toContain('AI Analysis Confidence: 95.0%');\n      });\n\n      // Verify confidence is displayed\n      const confidenceDisplay = screen.getByTestId('analysis-confidence');\n      expect(confidenceDisplay).toHaveTextContent('95.0%');\n    });\n\n    it('should handle French language bills correctly', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(mockAnalysisResponses.frenchContent)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['contenu français'], 'facture-assurance.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        const titleInput = screen.getByTestId('input-title') as HTMLInputElement;\n        const vendorInput = screen.getByTestId('input-vendor') as HTMLInputElement;\n        const categorySelect = screen.getByTestId('select-category') as HTMLSelectElement;\n\n        expect(titleInput.value).toBe(\"Facture d'Assurance Habitation\");\n        expect(vendorInput.value).toBe('Assurances Desjardins');\n        expect(categorySelect.value).toBe('insurance');\n      });\n    });\n  });\n\n  describe('Edge Cases and Error Scenarios', () => {\n    it('should handle low confidence analysis results appropriately', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(mockAnalysisResponses.lowConfidence)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['unclear content'], 'blurry-document.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        const confidenceDisplay = screen.getByTestId('analysis-confidence');\n        expect(confidenceDisplay).toHaveTextContent('25.0%');\n\n        // With low confidence, title should still be filled but amount should be empty or 0\n        const titleInput = screen.getByTestId('input-title') as HTMLInputElement;\n        const amountInput = screen.getByTestId('input-amount') as HTMLInputElement;\n        \n        expect(titleInput.value).toBe('Unclear Insurance Document');\n        expect(amountInput.value).toBe('0.00');\n      });\n    });\n\n    it('should handle invalid data from AI analysis gracefully', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(mockAnalysisResponses.invalidData)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['corrupted data'], 'corrupted.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        // Check that invalid data is handled\n        const titleInput = screen.getByTestId('input-title') as HTMLInputElement;\n        const vendorInput = screen.getByTestId('input-vendor') as HTMLInputElement;\n        const amountInput = screen.getByTestId('input-amount') as HTMLInputElement;\n        const categorySelect = screen.getByTestId('select-category') as HTMLSelectElement;\n\n        // Empty title should not be filled\n        expect(titleInput.value).toBe('');\n        // Valid vendor should be filled  \n        expect(vendorInput.value).toBe('Valid Vendor');\n        // Invalid amount should not crash the form\n        expect(amountInput.value).toBe('invalid-amount'); // This might be a bug!\n        // Invalid category should fall back to 'other'\n        expect(categorySelect.value).toBe('other');\n      });\n    });\n\n    it('should handle network errors during analysis', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        // Form should remain empty after error\n        const titleInput = screen.getByTestId('input-title') as HTMLInputElement;\n        expect(titleInput.value).toBe('');\n        \n        // Analysis button should be enabled again\n        expect(analyzeButton).not.toBeDisabled();\n      });\n    });\n\n    it('should handle server errors (500) appropriately', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse({ error: 'Internal server error' }, { ok: false, status: 500 })\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        // Should handle server error gracefully\n        const titleInput = screen.getByTestId('input-title') as HTMLInputElement;\n        expect(titleInput.value).toBe('');\n      });\n    });\n  });\n\n  describe('User Interaction and Data Preservation', () => {\n    it('should preserve user-entered data when AI analysis completes', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(mockAnalysisResponses.successful)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      // User fills some fields manually first\n      const titleInput = screen.getByTestId('input-title');\n      const vendorInput = screen.getByTestId('input-vendor');\n      const notesInput = screen.getByTestId('input-notes');\n\n      await userEvent.type(titleInput, 'My Custom Title');\n      await userEvent.type(vendorInput, 'My Custom Vendor');\n      await userEvent.type(notesInput, 'User notes here');\n\n      // Then user uploads and analyzes\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        // User data should be preserved\n        const titleInputAfter = screen.getByTestId('input-title') as HTMLInputElement;\n        const vendorInputAfter = screen.getByTestId('input-vendor') as HTMLInputElement;\n        const notesInputAfter = screen.getByTestId('input-notes') as HTMLTextAreaElement;\n\n        expect(titleInputAfter.value).toBe('My Custom Title'); // Preserved\n        expect(vendorInputAfter.value).toBe('My Custom Vendor'); // Preserved\n        expect(notesInputAfter.value).toContain('User notes here'); // Preserved\n        expect(notesInputAfter.value).toContain('AI Analysis'); // AI info added\n      });\n    });\n\n    it('should only fill empty fields, not overwrite user input', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(mockAnalysisResponses.successful)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      // Pre-fill amount field with user data\n      const amountInput = screen.getByTestId('input-amount');\n      await userEvent.type(amountInput, '999.99');\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        const amountInputAfter = screen.getByTestId('input-amount') as HTMLInputElement;\n        const titleInputAfter = screen.getByTestId('input-title') as HTMLInputElement;\n\n        // User amount should be preserved\n        expect(amountInputAfter.value).toBe('999.99');\n        // Empty title should be filled by AI\n        expect(titleInputAfter.value).toBe('Hydro-Québec Electricity Bill');\n      });\n    });\n  });\n\n  describe('File Type and Content Validation', () => {\n    it('should handle different file types appropriately', async () => {\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(mockAnalysisResponses.successful)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      // Test with image file\n      const fileInput = screen.getByTestId('file-input');\n      const imageFile = new File(['image data'], 'bill-scan.jpg', { type: 'image/jpeg' });\n      await userEvent.upload(fileInput, imageFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith('/api/bills/analyze-document', \n          expect.objectContaining({\n            method: 'POST',\n            body: expect.any(FormData),\n          })\n        );\n      });\n    });\n\n    it('should disable analyze button when no file is selected', () => {\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      expect(analyzeButton).toBeDisabled();\n    });\n\n    it('should show analyzing state while processing', async () => {\n      let resolvePromise: (value: any) => void;\n      const delayedPromise = new Promise((resolve) => {\n        resolvePromise = resolve;\n      });\n\n      mockFetch.mockReturnValueOnce(delayedPromise);\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      // Button should show analyzing state\n      expect(analyzeButton).toHaveTextContent('Analyzing...');\n      expect(analyzeButton).toBeDisabled();\n\n      // Resolve the promise\n      resolvePromise!(\n        createMockResponse(mockAnalysisResponses.successful)\n      );\n\n      await waitFor(() => {\n        expect(analyzeButton).toHaveTextContent('Upload & Analyze');\n        expect(analyzeButton).not.toBeDisabled();\n      });\n    });\n  });\n\n  describe('Data Integrity and Security Issues', () => {\n    it('should sanitize and validate AI response data', async () => {\n      // Mock response with potential security issues\n      const maliciousResponse = {\n        title: '<script>alert(\"xss\")</script>Legitimate Title',\n        vendor: 'javascript:void(0)',\n        totalAmount: 'SELECT * FROM users; --',\n        category: 'utilities',\n        confidence: 0.95,\n        billNumber: '\"><img src=x onerror=alert(1)>',\n      };\n\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(maliciousResponse)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        const titleInput = screen.getByTestId('input-title') as HTMLInputElement;\n        const vendorInput = screen.getByTestId('input-vendor') as HTMLInputElement;\n        const amountInput = screen.getByTestId('input-amount') as HTMLInputElement;\n        const notesInput = screen.getByTestId('input-notes') as HTMLTextAreaElement;\n\n        // Values should be filled (this test reveals potential XSS vulnerability)\n        expect(titleInput.value).toContain('<script>');\n        expect(vendorInput.value).toBe('javascript:void(0)');\n        expect(amountInput.value).toContain('SELECT');\n        expect(notesInput.value).toContain('onerror=alert(1)');\n      });\n    });\n\n    it('should validate amount field format after AI analysis', async () => {\n      const invalidAmountResponse = {\n        ...mockAnalysisResponses.successful,\n        totalAmount: '999,999.999', // Too many decimal places\n      };\n\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(invalidAmountResponse)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        const amountInput = screen.getByTestId('input-amount') as HTMLInputElement;\n        // Should the app validate and fix this format? This test will reveal the behavior\n        expect(amountInput.value).toBe('999,999.999');\n      });\n    });\n\n    it('should handle confidence values outside valid range', async () => {\n      const invalidConfidenceResponse = {\n        ...mockAnalysisResponses.successful,\n        confidence: 1.5, // Invalid: > 1.0\n      };\n\n      mockFetch.mockResolvedValueOnce(\n        createMockResponse(invalidConfidenceResponse)\n      );\n\n      render(\n        <TestWrapper>\n          <TestBillFormWithAI />\n        </TestWrapper>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const testFile = new File(['test content'], 'test.pdf', { type: 'application/pdf' });\n      await userEvent.upload(fileInput, testFile);\n\n      const analyzeButton = screen.getByTestId('analyze-button');\n      await userEvent.click(analyzeButton);\n\n      await waitFor(() => {\n        const confidenceDisplay = screen.getByTestId('analysis-confidence');\n        // Should be clamped to 100% or show error?\n        expect(confidenceDisplay).toHaveTextContent('150.0%'); // This reveals the issue\n      });\n    });\n  });\n});"],"version":3}