{"file":"/home/runner/workspace/tests/unit/buildings-validation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/buildings-validation.test.ts"],"sourcesContent":["/**\n * @file Validation tests for building schemas and business logic\n * Tests Zod schema validation, business rules, and data integrity constraints\n * for building management functionality.\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport { z } from 'zod';\n\n// Mock the building schema - in real implementation this would be imported\nconst buildingFormSchema = z.object({\n  name: z.string().min(1, 'Building name is required').max(200, 'Building name is too long'),\n  organizationId: z.string().min(1, 'Organization is required'),\n  address: z.string().optional(),\n  city: z.string().optional(),\n  province: z\n    .enum(['QC', 'ON', 'BC', 'AB', 'MB', 'SK', 'NS', 'NB', 'NL', 'PE', 'YT', 'NT', 'NU'])\n    .default('QC'),\n  postalCode: z\n    .string()\n    .regex(/^[A-Za-z]\\d[A-Za-z] ?\\d[A-Za-z]\\d$/, 'Invalid postal code format')\n    .optional(),\n  buildingType: z.enum(['condo', 'rental']).default('condo'),\n  yearBuilt: z\n    .number()\n    .int()\n    .min(1800)\n    .max(new Date().getFullYear() + 5)\n    .optional(),\n  totalUnits: z.number().int().min(0).max(10000).optional(),\n  totalFloors: z.number().int().min(1).max(200).optional(),\n  parkingSpaces: z.number().int().min(0).max(50000).optional(),\n  storageSpaces: z.number().int().min(0).max(50000).optional(),\n  managementCompany: z.string().max(200).optional(),\n});\n\nconst buildingSearchSchema = z.object({\n  search: z.string().max(100).optional(),\n  buildingType: z.enum(['condo', 'rental']).optional(),\n  organizationId: z.string().uuid().optional(),\n  city: z.string().max(100).optional(),\n  minUnits: z.number().int().min(0).optional(),\n  maxUnits: z.number().int().min(0).optional(),\n  minYear: z.number().int().min(1800).optional(),\n  maxYear: z\n    .number()\n    .int()\n    .max(new Date().getFullYear() + 5)\n    .optional(),\n});\n\ndescribe('Building Validation Tests', () => {\n  // Move validBuildingData to top level so all tests can access it\n  const validBuildingData = {\n    name: 'Maple Heights Condominiums',\n    organizationId: 'org-123e4567-e89b-12d3-a456-426614174000',\n    address: '123 Rue Sainte-Catherine Est',\n    city: 'Montréal',\n    province: 'QC' as const,\n    postalCode: 'H2X 1L4',\n    buildingType: 'condo' as const,\n    yearBuilt: 2020,\n    totalUnits: 50,\n    totalFloors: 10,\n    parkingSpaces: 30,\n    storageSpaces: 25,\n    managementCompany: 'Gestion Immobilière Koveo',\n  };\n\n  describe('Building Form Schema Validation', () => {\n    // validBuildingData moved to top level\n\n    describe('Required Fields', () => {\n      it('should validate correct building data', () => {\n        const result = buildingFormSchema.safeParse(validBuildingData);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data.name).toBe('Maple Heights Condominiums');\n          expect(result.data.province).toBe('QC');\n          expect(result.data.buildingType).toBe('condo');\n        }\n      });\n\n      it('should require building name', () => {\n        const invalidData = { ...validBuildingData, name: '' };\n        const result = buildingFormSchema.safeParse(invalidData);\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(\n            result.error.issues.some(\n              (issue) => issue.path.includes('name') && issue.message.includes('required')\n            )\n          ).toBe(true);\n        }\n      });\n\n      it('should require organization ID', () => {\n        const invalidData = { ...validBuildingData, organizationId: '' };\n        const result = buildingFormSchema.safeParse(invalidData);\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(\n            result.error.issues.some(\n              (issue) => issue.path.includes('organizationId') && issue.message.includes('required')\n            )\n          ).toBe(true);\n        }\n      });\n\n      it('should allow empty optional fields', () => {\n        const minimalData = {\n          name: 'Simple Building',\n          organizationId: 'org-123e4567-e89b-12d3-a456-426614174000',\n        };\n        const result = buildingFormSchema.safeParse(minimalData);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data.province).toBe('QC'); // Default value\n          expect(result.data.buildingType).toBe('condo'); // Default value\n        }\n      });\n    });\n\n    describe('String Field Validation', () => {\n      it('should reject excessively long building names', () => {\n        const invalidData = { ...validBuildingData, name: 'A'.repeat(201) };\n        const result = buildingFormSchema.safeParse(invalidData);\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(\n            result.error.issues.some(\n              (issue) => issue.path.includes('name') && issue.message.includes('too long')\n            )\n          ).toBe(true);\n        }\n      });\n\n      it('should accept building names at maximum length', () => {\n        const validData = { ...validBuildingData, name: 'A'.repeat(200) };\n        const result = buildingFormSchema.safeParse(validData);\n        expect(result.success).toBe(true);\n      });\n\n      it('should reject excessively long management company names', () => {\n        const invalidData = { ...validBuildingData, managementCompany: 'A'.repeat(201) };\n        const result = buildingFormSchema.safeParse(invalidData);\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(\n            result.error.issues.some((issue) => issue.path.includes('managementCompany'))\n          ).toBe(true);\n        }\n      });\n\n      it('should handle French characters in building names', () => {\n        const frenchData = {\n          ...validBuildingData,\n          name: 'Résidence Les Érables - Côte-des-Neiges',\n          address: 'Chemin de la Côte-des-Neiges',\n          city: 'Montréal',\n          managementCompany: 'Gestion Immobilière Québécoise Inc.',\n        };\n        const result = buildingFormSchema.safeParse(frenchData);\n        expect(result.success).toBe(true);\n      });\n    });\n\n    describe('Postal Code Validation', () => {\n      it('should accept valid Canadian postal codes', () => {\n        const validPostalCodes = ['H3A 1A1', 'M5V 3A8', 'V6B 1A1', 'T2P 2M7'];\n\n        validPostalCodes.forEach((postalCode) => {\n          const data = { ...validBuildingData, postalCode };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('should accept postal codes without spaces', () => {\n        const data = { ...validBuildingData, postalCode: 'H3A1A1' };\n        const result = buildingFormSchema.safeParse(data);\n        expect(result.success).toBe(true);\n      });\n\n      it('should reject invalid postal code formats', () => {\n        const invalidPostalCodes = ['12345', 'ABC 123', 'H3A1A', 'H3A 1A12'];\n\n        invalidPostalCodes.forEach((postalCode) => {\n          const data = { ...validBuildingData, postalCode };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(false);\n        });\n      });\n\n      it('should handle lowercase postal codes', () => {\n        const data = { ...validBuildingData, postalCode: 'h3a 1a1' };\n        const result = buildingFormSchema.safeParse(data);\n        expect(result.success).toBe(true);\n      });\n    });\n\n    describe('Province Validation', () => {\n      it('should accept all Canadian provinces and territories', () => {\n        const provinces = [\n          'QC',\n          'ON',\n          'BC',\n          'AB',\n          'MB',\n          'SK',\n          'NS',\n          'NB',\n          'NL',\n          'PE',\n          'YT',\n          'NT',\n          'NU',\n        ];\n\n        provinces.forEach((province) => {\n          const data = { ...validBuildingData, province: province as any };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('should reject invalid province codes', () => {\n        const invalidProvinces = ['XX', 'US', 'CA', 'Quebec', 'Ontario'];\n\n        invalidProvinces.forEach((province) => {\n          const data = { ...validBuildingData, province: province as any };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(false);\n        });\n      });\n\n      it('should default to QC when not provided', () => {\n        const dataWithoutProvince = {\n          name: 'Test Building',\n          organizationId: 'org-123',\n        };\n        const result = buildingFormSchema.safeParse(dataWithoutProvince);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data.province).toBe('QC');\n        }\n      });\n    });\n\n    describe('Building Type Validation', () => {\n      it('should accept valid building types', () => {\n        const validTypes = ['condo', 'rental'];\n\n        validTypes.forEach((buildingType) => {\n          const data = { ...validBuildingData, buildingType: buildingType as any };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('should reject invalid building types', () => {\n        const invalidTypes = ['apartment', 'house', 'commercial', 'mixed'];\n\n        invalidTypes.forEach((buildingType) => {\n          const data = { ...validBuildingData, buildingType: buildingType as any };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(false);\n        });\n      });\n\n      it('should default to condo when not provided', () => {\n        const dataWithoutType = {\n          name: 'Test Building',\n          organizationId: 'org-123',\n        };\n        const result = buildingFormSchema.safeParse(dataWithoutType);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data.buildingType).toBe('condo');\n        }\n      });\n    });\n\n    describe('Numeric Field Validation', () => {\n      it('should accept zero values for optional numeric fields', () => {\n        const dataWithZeros = {\n          ...validBuildingData,\n          yearBuilt: undefined,\n          totalUnits: 0,\n          totalFloors: undefined,\n          parkingSpaces: 0,\n          storageSpaces: 0,\n        };\n        const result = buildingFormSchema.safeParse(dataWithZeros);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data.totalUnits).toBe(0);\n          expect(result.data.parkingSpaces).toBe(0);\n          expect(result.data.storageSpaces).toBe(0);\n        }\n      });\n\n      it('should validate year built range', () => {\n        const currentYear = new Date().getFullYear();\n        const validYears = [1800, 1950, 2000, currentYear, currentYear + 5];\n\n        validYears.forEach((year) => {\n          const data = { ...validBuildingData, yearBuilt: year };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('should reject invalid year built values', () => {\n        const invalidYears = [1799, new Date().getFullYear() + 6, -100, 3000];\n\n        invalidYears.forEach((year) => {\n          const data = { ...validBuildingData, yearBuilt: year };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(false);\n        });\n      });\n\n      it('should validate total units range', () => {\n        const validUnits = [0, 1, 50, 500, 10000];\n\n        validUnits.forEach((units) => {\n          const data = { ...validBuildingData, totalUnits: units };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('should reject invalid total units values', () => {\n        const invalidUnits = [-1, 10001, 999999];\n\n        invalidUnits.forEach((units) => {\n          const data = { ...validBuildingData, totalUnits: units };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(false);\n        });\n      });\n\n      it('should validate total floors range', () => {\n        const validFloors = [1, 5, 50, 200];\n\n        validFloors.forEach((floors) => {\n          const data = { ...validBuildingData, totalFloors: floors };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('should reject invalid total floors values', () => {\n        const invalidFloors = [0, -1, 201, 1000];\n\n        invalidFloors.forEach((floors) => {\n          const data = { ...validBuildingData, totalFloors: floors };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(false);\n        });\n      });\n\n      it('should validate parking and storage spaces', () => {\n        const validSpaces = [0, 10, 100, 1000, 50000];\n\n        validSpaces.forEach((spaces) => {\n          const data = {\n            ...validBuildingData,\n            parkingSpaces: spaces,\n            storageSpaces: spaces,\n          };\n          const result = buildingFormSchema.safeParse(data);\n          expect(result.success).toBe(true);\n        });\n      });\n\n      it('should reject invalid parking and storage spaces', () => {\n        const invalidSpaces = [-1, 50001, 999999];\n\n        invalidSpaces.forEach((spaces) => {\n          const parkingData = { ...validBuildingData, parkingSpaces: spaces };\n          const storageData = { ...validBuildingData, storageSpaces: spaces };\n\n          expect(buildingFormSchema.safeParse(parkingData).success).toBe(false);\n          expect(buildingFormSchema.safeParse(storageData).success).toBe(false);\n        });\n      });\n\n      it('should handle decimal numbers by rejecting them', () => {\n        const decimalData = {\n          ...validBuildingData,\n          yearBuilt: 2020.5,\n          totalUnits: 50.7,\n          totalFloors: 10.2,\n        };\n        const result = buildingFormSchema.safeParse(decimalData);\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Building Search Schema Validation', () => {\n    it('should validate basic search parameters', () => {\n      const searchData = {\n        search: 'Maple Heights',\n        buildingType: 'condo' as const,\n        city: 'Montreal',\n      };\n      const result = buildingSearchSchema.safeParse(searchData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should validate numeric range parameters', () => {\n      const rangeData = {\n        minUnits: 10,\n        maxUnits: 100,\n        minYear: 2000,\n        maxYear: 2023,\n      };\n      const result = buildingSearchSchema.safeParse(rangeData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject overly long search terms', () => {\n      const invalidData = { search: 'A'.repeat(101) };\n      const result = buildingSearchSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should validate UUID format for organizationId', () => {\n      const validUuid = '123e4567-e89b-12d3-a456-426614174000';\n      const validData = { organizationId: validUuid };\n      const result = buildingSearchSchema.safeParse(validData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject invalid UUID format for organizationId', () => {\n      const invalidUuids = ['not-a-uuid', '123', 'abc-def-ghi'];\n\n      invalidUuids.forEach((uuid) => {\n        const data = { organizationId: uuid };\n        const result = buildingSearchSchema.safeParse(data);\n        expect(result.success).toBe(false);\n      });\n    });\n\n    it('should handle empty search parameters', () => {\n      const emptyData = {};\n      const result = buildingSearchSchema.safeParse(emptyData);\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('Business Logic Validation', () => {\n    it('should validate logical consistency between floors and units', () => {\n      // This would be implemented as a custom validation function\n      const validateBuildingLogic = (data: { totalFloors?: number; totalUnits?: number }) => {\n        if (data.totalFloors && data.totalUnits) {\n          const maxUnitsPerFloor = 50; // Business rule\n          return data.totalUnits <= data.totalFloors * maxUnitsPerFloor;\n        }\n        return true;\n      };\n\n      const logicalData = {\n        ...validBuildingData,\n        totalFloors: 10,\n        totalUnits: 50, // 5 units per floor - reasonable\n      };\n      expect(validateBuildingLogic(logicalData)).toBe(true);\n\n      const illogicalData = {\n        ...validBuildingData,\n        totalFloors: 2,\n        totalUnits: 200, // 100 units per floor - unreasonable\n      };\n      expect(validateBuildingLogic(illogicalData)).toBe(false);\n    });\n\n    it('should validate parking ratio constraints', () => {\n      const validateParkingRatio = (data: { parkingSpaces?: number; totalUnits?: number }) => {\n        if (data.parkingSpaces && data.totalUnits) {\n          const maxParkingRatio = 2; // Max 2 parking spaces per unit\n          return data.parkingSpaces <= data.totalUnits * maxParkingRatio;\n        }\n        return true;\n      };\n\n      const reasonableParking = {\n        totalUnits: 50,\n        parkingSpaces: 75, // 1.5 spaces per unit\n      };\n      expect(validateParkingRatio(reasonableParking)).toBe(true);\n\n      const excessiveParking = {\n        totalUnits: 50,\n        parkingSpaces: 150, // 3 spaces per unit\n      };\n      expect(validateParkingRatio(excessiveParking)).toBe(false);\n    });\n\n    it('should validate Quebec-specific business rules', () => {\n      const validateQuebecRules = (_data: any) => {\n        // Example: In Quebec, condo buildings typically have fewer rental restrictions\n        if (_data.province === 'QC' && _data.buildingType === 'condo') {\n          return true; // Quebec condos have specific regulations\n        }\n        return true;\n      };\n\n      const quebecCondo = {\n        province: 'QC',\n        buildingType: 'condo',\n        name: 'Résidence Québécoise',\n      };\n      expect(validateQuebecRules(quebecCondo)).toBe(true);\n    });\n\n    it('should validate year built against building type expectations', () => {\n      const validateYearBuildingType = (_data: any) => {\n        // Modern condos are typically built after 1980\n        if (_data.buildingType === 'condo' && _data.yearBuilt && _data.yearBuilt < 1980) {\n          return false; // Unusual but not impossible\n        }\n        return true;\n      };\n\n      const modernCondo = {\n        buildingType: 'condo',\n        yearBuilt: 2000,\n      };\n      expect(validateYearBuildingType(modernCondo)).toBe(true);\n\n      const oldCondo = {\n        buildingType: 'condo',\n        yearBuilt: 1950,\n      };\n      expect(validateYearBuildingType(oldCondo)).toBe(false);\n    });\n  });\n\n  describe('Edge Cases and Security', () => {\n    it('should handle special characters safely', () => {\n      const specialCharData = {\n        ...validBuildingData,\n        name: 'Building with \"quotes\" & <tags> and \\' apostrophes',\n        address: \"123 O'Connor St. - Unit #5 & 1/2\",\n      };\n      const result = buildingFormSchema.safeParse(specialCharData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle unicode characters in building names', () => {\n      const unicodeData = {\n        ...validBuildingData,\n        name: '🏢 Résidence Les Érables 🍁',\n        city: 'Montréal',\n      };\n      const result = buildingFormSchema.safeParse(unicodeData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should prevent injection attempts in string fields', () => {\n      const injectionData = {\n        ...validBuildingData,\n        name: \"<script>alert('xss')</script>\",\n        address: \"'; DROP TABLE buildings; --\",\n      };\n      const result = buildingFormSchema.safeParse(injectionData);\n      // Should still pass validation but application should sanitize\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle extremely large numbers gracefully', () => {\n      const extremeData = {\n        ...validBuildingData,\n        yearBuilt: Number.MAX_SAFE_INTEGER,\n        totalUnits: Number.MAX_SAFE_INTEGER,\n      };\n      const result = buildingFormSchema.safeParse(extremeData);\n      expect(result.success).toBe(false); // Should be rejected by range constraints\n    });\n\n    it('should handle null and undefined values appropriately', () => {\n      const nullData = {\n        name: 'Test Building',\n        organizationId: '123e4567-e89b-12d3-a456-426614174000',\n        // Provide string values instead of null for required fields\n        address: 'Test Address',\n        yearBuilt: undefined, // Optional field can be undefined\n        totalUnits: undefined, // Optional field can be undefined\n      };\n      const result = buildingFormSchema.safeParse(nullData);\n      // Zod should handle undefined optional fields properly\n      expect(result.success).toBe(true);\n    });\n  });\n});\n"],"version":3}