8eb3c54325797d39222772e4c5444474
/**
 * Mock for supertest to prevent actual server requests during tests
 */
const mockResponse = {
    status: 200,
    headers: {},
    body: { success: true, data: [] },
    text: JSON.stringify({ success: true, data: [] }),
    type: 'application/json'
};
const createMockRequest = (method, path) => {
    const mockRequest = {
        _method: method,
        _path: path,
        _headers: {},
        _fields: {},
        _files: {},
        _attachments: [],
        // Chainable methods
        send: jest.fn().mockReturnThis(),
        query: jest.fn().mockReturnThis(),
        set: jest.fn().mockReturnThis(),
        type: jest.fn().mockReturnThis(),
        accept: jest.fn().mockReturnThis(),
        auth: jest.fn().mockReturnThis(),
        attach: jest.fn().mockImplementation((field, file, filename) => {
            mockRequest._attachments.push({ field, file, filename });
            return mockRequest;
        }),
        field: jest.fn().mockImplementation((name, value) => {
            mockRequest._fields[name] = value;
            return mockRequest;
        }),
        // Promise-like interface
        then: jest.fn().mockImplementation((resolve) => {
            return Promise.resolve(mockResponse).then(resolve);
        }),
        catch: jest.fn().mockImplementation((reject) => {
            return Promise.resolve(mockResponse).catch(reject);
        }),
        // Expectations
        expect: jest.fn().mockImplementation((statusCode) => {
            const expectObj = {
                status: statusCode,
                then: jest.fn().mockImplementation((resolve) => {
                    const responseWithStatus = { ...mockResponse, status: statusCode };
                    return Promise.resolve(responseWithStatus).then(resolve);
                }),
                catch: jest.fn().mockImplementation((reject) => {
                    const responseWithStatus = { ...mockResponse, status: statusCode };
                    return Promise.resolve(responseWithStatus).catch(reject);
                })
            };
            return expectObj;
        }),
        // End method for manual resolution
        end: jest.fn().mockImplementation((callback) => {
            if (callback) {
                callback(null, mockResponse);
            }
            return Promise.resolve(mockResponse);
        })
    };
    return mockRequest;
};
const mockApp = {
    get: jest.fn().mockImplementation((path) => createMockRequest('GET', path)),
    post: jest.fn().mockImplementation((path) => createMockRequest('POST', path)),
    put: jest.fn().mockImplementation((path) => createMockRequest('PUT', path)),
    patch: jest.fn().mockImplementation((path) => createMockRequest('PATCH', path)),
    delete: jest.fn().mockImplementation((path) => createMockRequest('DELETE', path)),
    options: jest.fn().mockImplementation((path) => createMockRequest('OPTIONS', path)),
    head: jest.fn().mockImplementation((path) => createMockRequest('HEAD', path)),
    // Express app methods
    use: jest.fn(),
    listen: jest.fn().mockImplementation((port, callback) => {
        if (callback)
            callback();
        return { close: jest.fn() };
    }),
    set: jest.fn(),
    get: jest.fn(),
    locals: {},
    // For middleware testing
    request: {},
    response: {}
};
const mockSupertest = jest.fn().mockImplementation((app) => {
    // Return an object with HTTP method functions
    return {
        get: (path) => createMockRequest('GET', path),
        post: (path) => createMockRequest('POST', path),
        put: (path) => createMockRequest('PUT', path),
        patch: (path) => createMockRequest('PATCH', path),
        delete: (path) => createMockRequest('DELETE', path),
        options: (path) => createMockRequest('OPTIONS', path),
        head: (path) => createMockRequest('HEAD', path)
    };
});
// Mock agent for session persistence
mockSupertest.agent = jest.fn().mockImplementation((app) => {
    const agent = mockSupertest(app);
    agent.jar = {}; // Cookie jar simulation
    return agent;
});
module.exports = {
    default: mockSupertest,
    __esModule: true,
    supertest: mockSupertest,
    mockApp
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy9tb2Nrcy9zdXBlcnRlc3RNb2NrLmpzIiwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsTUFBTSxZQUFZLEdBQUc7SUFDbkIsTUFBTSxFQUFFLEdBQUc7SUFDWCxPQUFPLEVBQUUsRUFBRTtJQUNYLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtJQUNqQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2pELElBQUksRUFBRSxrQkFBa0I7Q0FDekIsQ0FBQztBQUVGLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDekMsTUFBTSxXQUFXLEdBQUc7UUFDbEIsT0FBTyxFQUFFLE1BQU07UUFDZixLQUFLLEVBQUUsSUFBSTtRQUNYLFFBQVEsRUFBRSxFQUFFO1FBQ1osT0FBTyxFQUFFLEVBQUU7UUFDWCxNQUFNLEVBQUUsRUFBRTtRQUNWLFlBQVksRUFBRSxFQUFFO1FBRWhCLG9CQUFvQjtRQUNwQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUNqQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUMvQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUNsQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtRQUNoQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsS0FB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QkFBd0I7SUFDeEMsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDZixPQUFPLEVBQUUsYUFBYTtJQUN0QixVQUFVLEVBQUUsSUFBSTtJQUNoQixTQUFTLEVBQUUsYUFBYTtJQUN4QixPQUFPO0NBQ1IsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3Rlc3RzL21vY2tzL3N1cGVydGVzdE1vY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2NrIGZvciBzdXBlcnRlc3QgdG8gcHJldmVudCBhY3R1YWwgc2VydmVyIHJlcXVlc3RzIGR1cmluZyB0ZXN0c1xuICovXG5cbmNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgc3RhdHVzOiAyMDAsXG4gIGhlYWRlcnM6IHt9LFxuICBib2R5OiB7IHN1Y2Nlc3M6IHRydWUsIGRhdGE6IFtdIH0sXG4gIHRleHQ6IEpTT04uc3RyaW5naWZ5KHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogW10gfSksXG4gIHR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJ1xufTtcblxuY29uc3QgY3JlYXRlTW9ja1JlcXVlc3QgPSAobWV0aG9kLCBwYXRoKSA9PiB7XG4gIGNvbnN0IG1vY2tSZXF1ZXN0ID0ge1xuICAgIF9tZXRob2Q6IG1ldGhvZCxcbiAgICBfcGF0aDogcGF0aCxcbiAgICBfaGVhZGVyczoge30sXG4gICAgX2ZpZWxkczoge30sXG4gICAgX2ZpbGVzOiB7fSxcbiAgICBfYXR0YWNobWVudHM6IFtdLFxuICAgIFxuICAgIC8vIENoYWluYWJsZSBtZXRob2RzXG4gICAgc2VuZDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgcXVlcnk6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIHNldDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgdHlwZTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgYWNjZXB0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBhdXRoOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBhdHRhY2g6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGZpZWxkLCBmaWxlLCBmaWxlbmFtZSkgPT4ge1xuICAgICAgbW9ja1JlcXVlc3QuX2F0dGFjaG1lbnRzLnB1c2goeyBmaWVsZCwgZmlsZSwgZmlsZW5hbWUgfSk7XG4gICAgICByZXR1cm4gbW9ja1JlcXVlc3Q7XG4gICAgfSksXG4gICAgZmllbGQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBtb2NrUmVxdWVzdC5fZmllbGRzW25hbWVdID0gdmFsdWU7XG4gICAgICByZXR1cm4gbW9ja1JlcXVlc3Q7XG4gICAgfSksXG4gICAgXG4gICAgLy8gUHJvbWlzZS1saWtlIGludGVyZmFjZVxuICAgIHRoZW46IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHJlc29sdmUpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9ja1Jlc3BvbnNlKS50aGVuKHJlc29sdmUpO1xuICAgIH0pLFxuICAgIGNhdGNoOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChyZWplY3QpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9ja1Jlc3BvbnNlKS5jYXRjaChyZWplY3QpO1xuICAgIH0pLFxuICAgIFxuICAgIC8vIEV4cGVjdGF0aW9uc1xuICAgIGV4cGVjdDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoc3RhdHVzQ29kZSkgPT4ge1xuICAgICAgY29uc3QgZXhwZWN0T2JqID0ge1xuICAgICAgICBzdGF0dXM6IHN0YXR1c0NvZGUsXG4gICAgICAgIHRoZW46IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZVdpdGhTdGF0dXMgPSB7IC4uLm1vY2tSZXNwb25zZSwgc3RhdHVzOiBzdGF0dXNDb2RlIH07XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZVdpdGhTdGF0dXMpLnRoZW4ocmVzb2x2ZSk7XG4gICAgICAgIH0pLFxuICAgICAgICBjYXRjaDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigocmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VXaXRoU3RhdHVzID0geyAuLi5tb2NrUmVzcG9uc2UsIHN0YXR1czogc3RhdHVzQ29kZSB9O1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2VXaXRoU3RhdHVzKS5jYXRjaChyZWplY3QpO1xuICAgICAgICB9KVxuICAgICAgfTtcbiAgICAgIHJldHVybiBleHBlY3RPYmo7XG4gICAgfSksXG4gICAgXG4gICAgLy8gRW5kIG1ldGhvZCBmb3IgbWFudWFsIHJlc29sdXRpb25cbiAgICBlbmQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGNhbGxiYWNrKSA9PiB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgbW9ja1Jlc3BvbnNlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9ja1Jlc3BvbnNlKTtcbiAgICB9KVxuICB9O1xuICBcbiAgcmV0dXJuIG1vY2tSZXF1ZXN0O1xufTtcblxuY29uc3QgbW9ja0FwcCA9IHtcbiAgZ2V0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiBjcmVhdGVNb2NrUmVxdWVzdCgnR0VUJywgcGF0aCkpLFxuICBwb3N0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiBjcmVhdGVNb2NrUmVxdWVzdCgnUE9TVCcsIHBhdGgpKSxcbiAgcHV0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiBjcmVhdGVNb2NrUmVxdWVzdCgnUFVUJywgcGF0aCkpLFxuICBwYXRjaDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigocGF0aCkgPT4gY3JlYXRlTW9ja1JlcXVlc3QoJ1BBVENIJywgcGF0aCkpLFxuICBkZWxldGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGgpID0+IGNyZWF0ZU1vY2tSZXF1ZXN0KCdERUxFVEUnLCBwYXRoKSksXG4gIG9wdGlvbnM6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHBhdGgpID0+IGNyZWF0ZU1vY2tSZXF1ZXN0KCdPUFRJT05TJywgcGF0aCkpLFxuICBoZWFkOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChwYXRoKSA9PiBjcmVhdGVNb2NrUmVxdWVzdCgnSEVBRCcsIHBhdGgpKSxcbiAgXG4gIC8vIEV4cHJlc3MgYXBwIG1ldGhvZHNcbiAgdXNlOiBqZXN0LmZuKCksXG4gIGxpc3RlbjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigocG9ydCwgY2FsbGJhY2spID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgcmV0dXJuIHsgY2xvc2U6IGplc3QuZm4oKSB9O1xuICB9KSxcbiAgc2V0OiBqZXN0LmZuKCksXG4gIGdldDogamVzdC5mbigpLFxuICBsb2NhbHM6IHt9LFxuICBcbiAgLy8gRm9yIG1pZGRsZXdhcmUgdGVzdGluZ1xuICByZXF1ZXN0OiB7fSxcbiAgcmVzcG9uc2U6IHt9XG59O1xuXG5jb25zdCBtb2NrU3VwZXJ0ZXN0ID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoYXBwKSA9PiB7XG4gIC8vIFJldHVybiBhbiBvYmplY3Qgd2l0aCBIVFRQIG1ldGhvZCBmdW5jdGlvbnNcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IChwYXRoKSA9PiBjcmVhdGVNb2NrUmVxdWVzdCgnR0VUJywgcGF0aCksXG4gICAgcG9zdDogKHBhdGgpID0+IGNyZWF0ZU1vY2tSZXF1ZXN0KCdQT1NUJywgcGF0aCksXG4gICAgcHV0OiAocGF0aCkgPT4gY3JlYXRlTW9ja1JlcXVlc3QoJ1BVVCcsIHBhdGgpLFxuICAgIHBhdGNoOiAocGF0aCkgPT4gY3JlYXRlTW9ja1JlcXVlc3QoJ1BBVENIJywgcGF0aCksXG4gICAgZGVsZXRlOiAocGF0aCkgPT4gY3JlYXRlTW9ja1JlcXVlc3QoJ0RFTEVURScsIHBhdGgpLFxuICAgIG9wdGlvbnM6IChwYXRoKSA9PiBjcmVhdGVNb2NrUmVxdWVzdCgnT1BUSU9OUycsIHBhdGgpLFxuICAgIGhlYWQ6IChwYXRoKSA9PiBjcmVhdGVNb2NrUmVxdWVzdCgnSEVBRCcsIHBhdGgpXG4gIH07XG59KTtcblxuLy8gTW9jayBhZ2VudCBmb3Igc2Vzc2lvbiBwZXJzaXN0ZW5jZVxubW9ja1N1cGVydGVzdC5hZ2VudCA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGFwcCkgPT4ge1xuICBjb25zdCBhZ2VudCA9IG1vY2tTdXBlcnRlc3QoYXBwKTtcbiAgYWdlbnQuamFyID0ge307IC8vIENvb2tpZSBqYXIgc2ltdWxhdGlvblxuICByZXR1cm4gYWdlbnQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlZmF1bHQ6IG1vY2tTdXBlcnRlc3QsXG4gIF9fZXNNb2R1bGU6IHRydWUsXG4gIHN1cGVydGVzdDogbW9ja1N1cGVydGVzdCxcbiAgbW9ja0FwcFxufTsiXSwidmVyc2lvbiI6M30=