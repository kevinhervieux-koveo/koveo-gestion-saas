47f8ff5d4329c9415fc76d056eacaa26
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _actCompat = require("./act-compat");
var _pure = require("./pure");
Object.keys(_pure).forEach(function (key) {
    if (key === "default" || key === "__esModule")
        return;
    if (key in exports && exports[key] === _pure[key])
        return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function () {
            return _pure[key];
        }
    });
});
// if we're running in a test runner that supports afterEach
// or teardown then we'll automatically run cleanup afterEach test
// this ensures that tests run in isolation from each other
// if you don't like this then either import the `pure` module
// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.
if (typeof process === 'undefined' || !process.env?.RTL_SKIP_AUTO_CLEANUP) {
    // ignore teardown() in code coverage because Jest does not support it
    /* istanbul ignore else */
    if (typeof afterEach === 'function') {
        afterEach(() => {
            (0, _pure.cleanup)();
        });
    }
    else if (typeof teardown === 'function') {
        // Block is guarded by `typeof` check.
        // eslint does not support `typeof` guards.
        // eslint-disable-next-line no-undef
        teardown(() => {
            (0, _pure.cleanup)();
        });
    }
    // No test setup with other test runners available
    /* istanbul ignore else */
    if (typeof beforeAll === 'function' && typeof afterAll === 'function') {
        // This matches the behavior of React < 18.
        let previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();
        beforeAll(() => {
            previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();
            (0, _actCompat.setReactActEnvironment)(true);
        });
        afterAll(() => {
            (0, _actCompat.setReactActEnvironment)(previousIsReactActEnvironment);
        });
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN6QyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHO0lBQ3RDLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssWUFBWTtRQUFFLE9BQU87SUFDdEQsSUFBSSxHQUFHLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQUUsT0FBTztJQUMxRCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDbEMsVUFBVSxFQUFFLElBQUk7UUFDaEIsR0FBRyxFQUFFO1lBQ0gsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0gsNERBQTREO0FBQzVELGtFQUFrRTtBQUNsRSwyREFBMkQ7QUFDM0QsOERBQThEO0FBQzlELDJEQUEyRDtBQUMzRCxJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsQ0FBQztJQUMxRSxzRUFBc0U7SUFDdEUsMEJBQTBCO0lBQzFCLElBQUksT0FBTyxTQUFTLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDcEMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNiLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztTQUFNLElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDMUMsc0NBQXNDO1FBQ3RDLDJDQUEyQztRQUMzQyxvQ0FBb0M7UUFDcEMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNaLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtEQUFrRDtJQUNsRCwwQkFBMEI7SUFDMUIsSUFBSSxPQUFPLFNBQVMsS0FBSyxVQUFVLElBQUksT0FBTyxRQUFRLEtBQUssVUFBVSxFQUFFLENBQUM7UUFDdEUsMkNBQTJDO1FBQzNDLElBQUksNkJBQTZCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQztRQUMvRSxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2IsNkJBQTZCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQztZQUMzRSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQztRQUNILFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDWixDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9hY3RDb21wYXQgPSByZXF1aXJlKFwiLi9hY3QtY29tcGF0XCIpO1xudmFyIF9wdXJlID0gcmVxdWlyZShcIi4vcHVyZVwiKTtcbk9iamVjdC5rZXlzKF9wdXJlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfcHVyZVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9wdXJlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xuLy8gaWYgd2UncmUgcnVubmluZyBpbiBhIHRlc3QgcnVubmVyIHRoYXQgc3VwcG9ydHMgYWZ0ZXJFYWNoXG4vLyBvciB0ZWFyZG93biB0aGVuIHdlJ2xsIGF1dG9tYXRpY2FsbHkgcnVuIGNsZWFudXAgYWZ0ZXJFYWNoIHRlc3Rcbi8vIHRoaXMgZW5zdXJlcyB0aGF0IHRlc3RzIHJ1biBpbiBpc29sYXRpb24gZnJvbSBlYWNoIG90aGVyXG4vLyBpZiB5b3UgZG9uJ3QgbGlrZSB0aGlzIHRoZW4gZWl0aGVyIGltcG9ydCB0aGUgYHB1cmVgIG1vZHVsZVxuLy8gb3Igc2V0IHRoZSBSVExfU0tJUF9BVVRPX0NMRUFOVVAgZW52IHZhcmlhYmxlIHRvICd0cnVlJy5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgIXByb2Nlc3MuZW52Py5SVExfU0tJUF9BVVRPX0NMRUFOVVApIHtcbiAgLy8gaWdub3JlIHRlYXJkb3duKCkgaW4gY29kZSBjb3ZlcmFnZSBiZWNhdXNlIEplc3QgZG9lcyBub3Qgc3VwcG9ydCBpdFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGFmdGVyRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICAoMCwgX3B1cmUuY2xlYW51cCkoKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdGVhcmRvd24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBCbG9jayBpcyBndWFyZGVkIGJ5IGB0eXBlb2ZgIGNoZWNrLlxuICAgIC8vIGVzbGludCBkb2VzIG5vdCBzdXBwb3J0IGB0eXBlb2ZgIGd1YXJkcy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB0ZWFyZG93bigoKSA9PiB7XG4gICAgICAoMCwgX3B1cmUuY2xlYW51cCkoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE5vIHRlc3Qgc2V0dXAgd2l0aCBvdGhlciB0ZXN0IHJ1bm5lcnMgYXZhaWxhYmxlXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgYmVmb3JlQWxsID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhZnRlckFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFRoaXMgbWF0Y2hlcyB0aGUgYmVoYXZpb3Igb2YgUmVhY3QgPCAxOC5cbiAgICBsZXQgcHJldmlvdXNJc1JlYWN0QWN0RW52aXJvbm1lbnQgPSAoMCwgX2FjdENvbXBhdC5nZXRJc1JlYWN0QWN0RW52aXJvbm1lbnQpKCk7XG4gICAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICAgIHByZXZpb3VzSXNSZWFjdEFjdEVudmlyb25tZW50ID0gKDAsIF9hY3RDb21wYXQuZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50KSgpO1xuICAgICAgKDAsIF9hY3RDb21wYXQuc2V0UmVhY3RBY3RFbnZpcm9ubWVudCkodHJ1ZSk7XG4gICAgfSk7XG4gICAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgICAgKDAsIF9hY3RDb21wYXQuc2V0UmVhY3RBY3RFbnZpcm9ubWVudCkocHJldmlvdXNJc1JlYWN0QWN0RW52aXJvbm1lbnQpO1xuICAgIH0pO1xuICB9XG59Il0sInZlcnNpb24iOjN9