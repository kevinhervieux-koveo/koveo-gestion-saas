5ddb9b703a4b9b089205a335fb35b37a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.memoryLocation = void 0;
const mitt_1 = __importDefault(require("mitt"));
const react_deps_js_1 = require("./react-deps.js");
/**
 * In-memory location that supports navigation
 */
const memoryLocation = ({ path = "/", searchPath = "", static: staticLocation, record, } = {}) => {
    let initialPath = path;
    if (searchPath) {
        // join with & if path contains search query, and ? otherwise
        initialPath += path.split("?")[1] ? "&" : "?";
        initialPath += searchPath;
    }
    let [currentPath, currentSearch = ""] = initialPath.split("?");
    const history = [initialPath];
    const emitter = (0, mitt_1.default)();
    const navigateImplementation = (path, { replace = false } = {}) => {
        if (record) {
            if (replace) {
                history.splice(history.length - 1, 1, path);
            }
            else {
                history.push(path);
            }
        }
        [currentPath, currentSearch = ""] = path.split("?");
        emitter.emit("navigate", path);
    };
    const navigate = !staticLocation ? navigateImplementation : () => null;
    const subscribe = (cb) => {
        emitter.on("navigate", cb);
        return () => emitter.off("navigate", cb);
    };
    const useMemoryLocation = () => [
        (0, react_deps_js_1.useSyncExternalStore)(subscribe, () => currentPath),
        navigate,
    ];
    const useMemoryQuery = () => (0, react_deps_js_1.useSyncExternalStore)(subscribe, () => currentSearch);
    function reset() {
        // clean history array with mutation to preserve link
        history.splice(0, history.length);
        navigateImplementation(initialPath);
    }
    return {
        hook: useMemoryLocation,
        searchHook: useMemoryQuery,
        navigate,
        history: record ? history : undefined,
        reset: record ? reset : undefined,
    };
};
exports.memoryLocation = memoryLocation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvd291dGVyL2VzbS9tZW1vcnktbG9jYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLG1EQUF1RDtBQUV2RDs7R0FFRztBQUVILE1BQU0sY0FBYyxHQUFHLENBQUMsRUFDdEIsSUFBSSxHQUFHLEdBQUcsRUFDVixVQUFVLEdBQUcsRUFBRSxFQUNmLE1BQU0sRUFBRSxjQUFjLEVBQ3RCLE1BQU0sR0FDUCxHQUFHLEVBQUUsRUFBRSxFQUFFO0lBQ1IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLElBQUksVUFBVSxFQUFFLENBQUM7UUFDZiw2REFBNkQ7UUFDN0QsV0FBVyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzlDLFdBQVcsSUFBSSxVQUFVLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksQ0FBQyxXQUFXLEVBQUUsYUFBYSxHQUFHLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0QsTUFBTSxPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5QixNQUFNLE9BQU8sR0FBRyxJQUFBLGNBQUksR0FBRSxDQUFDO0lBRXZCLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxPQUFPLEdBQUcsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUU7UUFDaEUsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLElBQUksT0FBTyxFQUFFLENBQUM7Z0JBQ1osT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDOUMsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckIsQ0FBQztRQUNILENBQUM7UUFFRCxDQUFDLFdBQVcsRUFBRSxhQUFhLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwRCxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUV2RSxNQUFNLFNBQVMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNCLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUM5QixJQUFBLG9DQUFvQixFQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUM7UUFDbEQsUUFBUTtLQUNULENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUUsQ0FDMUIsSUFBQSxvQ0FBb0IsRUFBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFdkQsU0FBUyxLQUFLO1FBQ1oscURBQXFEO1FBQ3JELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksRUFBRSxpQkFBaUI7UUFDdkIsVUFBVSxFQUFFLGNBQWM7UUFDMUIsUUFBUTtRQUNSLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUztRQUNyQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVM7S0FDbEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVPLHdDQUFjIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL3dvdXRlci9lc20vbWVtb3J5LWxvY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtaXR0IGZyb20gJ21pdHQnO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmUgfSBmcm9tICcuL3JlYWN0LWRlcHMuanMnO1xuXG4vKipcbiAqIEluLW1lbW9yeSBsb2NhdGlvbiB0aGF0IHN1cHBvcnRzIG5hdmlnYXRpb25cbiAqL1xuXG5jb25zdCBtZW1vcnlMb2NhdGlvbiA9ICh7XG4gIHBhdGggPSBcIi9cIixcbiAgc2VhcmNoUGF0aCA9IFwiXCIsXG4gIHN0YXRpYzogc3RhdGljTG9jYXRpb24sXG4gIHJlY29yZCxcbn0gPSB7fSkgPT4ge1xuICBsZXQgaW5pdGlhbFBhdGggPSBwYXRoO1xuICBpZiAoc2VhcmNoUGF0aCkge1xuICAgIC8vIGpvaW4gd2l0aCAmIGlmIHBhdGggY29udGFpbnMgc2VhcmNoIHF1ZXJ5LCBhbmQgPyBvdGhlcndpc2VcbiAgICBpbml0aWFsUGF0aCArPSBwYXRoLnNwbGl0KFwiP1wiKVsxXSA/IFwiJlwiIDogXCI/XCI7XG4gICAgaW5pdGlhbFBhdGggKz0gc2VhcmNoUGF0aDtcbiAgfVxuXG4gIGxldCBbY3VycmVudFBhdGgsIGN1cnJlbnRTZWFyY2ggPSBcIlwiXSA9IGluaXRpYWxQYXRoLnNwbGl0KFwiP1wiKTtcbiAgY29uc3QgaGlzdG9yeSA9IFtpbml0aWFsUGF0aF07XG4gIGNvbnN0IGVtaXR0ZXIgPSBtaXR0KCk7XG5cbiAgY29uc3QgbmF2aWdhdGVJbXBsZW1lbnRhdGlvbiA9IChwYXRoLCB7IHJlcGxhY2UgPSBmYWxzZSB9ID0ge30pID0+IHtcbiAgICBpZiAocmVjb3JkKSB7XG4gICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICBoaXN0b3J5LnNwbGljZShoaXN0b3J5Lmxlbmd0aCAtIDEsIDEsIHBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoKHBhdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFtjdXJyZW50UGF0aCwgY3VycmVudFNlYXJjaCA9IFwiXCJdID0gcGF0aC5zcGxpdChcIj9cIik7XG4gICAgZW1pdHRlci5lbWl0KFwibmF2aWdhdGVcIiwgcGF0aCk7XG4gIH07XG5cbiAgY29uc3QgbmF2aWdhdGUgPSAhc3RhdGljTG9jYXRpb24gPyBuYXZpZ2F0ZUltcGxlbWVudGF0aW9uIDogKCkgPT4gbnVsbDtcblxuICBjb25zdCBzdWJzY3JpYmUgPSAoY2IpID0+IHtcbiAgICBlbWl0dGVyLm9uKFwibmF2aWdhdGVcIiwgY2IpO1xuICAgIHJldHVybiAoKSA9PiBlbWl0dGVyLm9mZihcIm5hdmlnYXRlXCIsIGNiKTtcbiAgfTtcblxuICBjb25zdCB1c2VNZW1vcnlMb2NhdGlvbiA9ICgpID0+IFtcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsICgpID0+IGN1cnJlbnRQYXRoKSxcbiAgICBuYXZpZ2F0ZSxcbiAgXTtcblxuICBjb25zdCB1c2VNZW1vcnlRdWVyeSA9ICgpID0+XG4gICAgdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCAoKSA9PiBjdXJyZW50U2VhcmNoKTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAvLyBjbGVhbiBoaXN0b3J5IGFycmF5IHdpdGggbXV0YXRpb24gdG8gcHJlc2VydmUgbGlua1xuICAgIGhpc3Rvcnkuc3BsaWNlKDAsIGhpc3RvcnkubGVuZ3RoKTtcblxuICAgIG5hdmlnYXRlSW1wbGVtZW50YXRpb24oaW5pdGlhbFBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBob29rOiB1c2VNZW1vcnlMb2NhdGlvbixcbiAgICBzZWFyY2hIb29rOiB1c2VNZW1vcnlRdWVyeSxcbiAgICBuYXZpZ2F0ZSxcbiAgICBoaXN0b3J5OiByZWNvcmQgPyBoaXN0b3J5IDogdW5kZWZpbmVkLFxuICAgIHJlc2V0OiByZWNvcmQgPyByZXNldCA6IHVuZGVmaW5lZCxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IG1lbW9yeUxvY2F0aW9uIH07XG4iXSwidmVyc2lvbiI6M30=