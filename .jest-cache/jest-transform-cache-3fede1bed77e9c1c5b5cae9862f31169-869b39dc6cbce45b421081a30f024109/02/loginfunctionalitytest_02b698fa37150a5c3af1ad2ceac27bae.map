{"file":"/home/runner/workspace/tests/integration/login-functionality.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/login-functionality.test.ts"],"sourcesContent":["/**\n * Login Functionality Test with Real User Credentials\n * Tests login system with actual user account\n */\n\nimport { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\n\n// Create test server\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('Login Functionality with Real User', () => {\n  let app: express.Application;\n  let testUser: any;\n\n  beforeAll(async () => {\n    app = createTestApp();\n\n    // Find existing user or create if needed\n    try {\n      const [existingUser] = await db\n        .select()\n        .from(schema.users)\n        .where(eq(schema.users.email, 'kevin.hervieux@koveo-gestion.com'))\n        .limit(1);\n      \n      if (existingUser) {\n        testUser = existingUser;\n        console.log('✅ Using existing test user:', { id: existingUser.id, email: existingUser.email, role: existingUser.role });\n      } else {\n        // Create new user only if it doesn't exist\n        const hashedPassword = await bcrypt.hash('admin123', 12);\n        const [user] = await db\n          .insert(schema.users)\n          .values({\n            email: 'kevin.hervieux@koveo-gestion.com',\n            username: 'kevin.hervieux',\n            firstName: 'Kevin',\n            lastName: 'Hervieux',\n            role: 'admin',\n            password: hashedPassword,\n            language: 'fr',\n            isActive: true,\n          })\n          .returning();\n        testUser = user;\n        console.log('✅ New test user created:', { id: user.id, email: user.email, role: user.role });\n      }\n    } catch (error: any) {\n      console.error('❌ Error handling test user:', error);\n      throw error;\n    }\n  });\n\n  afterAll(async () => {\n    // Keep the user in database for actual login testing\n    console.log('📝 Test user kept in database for real login functionality');\n  });\n\n  describe('Real User Login Tests', () => {\n    it('should successfully login with valid credentials', async () => {\n      const loginData = {\n        email: 'kevin.hervieux@koveo-gestion.com',\n        password: 'admin123',\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(200);\n\n      expect(response.body.message).toBe('Login successful');\n      expect(response.body.user).toBeDefined();\n      expect(response.body.user.email).toBe('kevin.hervieux@koveo-gestion.com');\n      expect(response.body.user.role).toBe('admin');\n      \n      // Verify session cookie is set\n      expect(response.headers['set-cookie']).toBeDefined();\n      const cookie = response.headers['set-cookie'][0];\n      expect(cookie).toMatch(/koveo\\.sid/);\n    });\n\n    it('should fail login with wrong password', async () => {\n      const loginData = {\n        email: 'kevin.hervieux@koveo-gestion.com',\n        password: 'wrongpassword',\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.message).toMatch(/invalid.*credentials/i);\n    });\n\n    it('should fail login with wrong email', async () => {\n      const loginData = {\n        email: 'wrong@email.com',\n        password: 'admin123',\n      };\n\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send(loginData)\n        .expect(401);\n\n      expect(response.body.message).toMatch(/invalid.*credentials/i);\n    });\n\n    it('should check user session after login', async () => {\n      // First login\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'kevin.hervieux@koveo-gestion.com',\n          password: 'admin123',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n\n      // Check auth status with session\n      const authResponse = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', cookies)\n        .expect(200);\n\n      expect(authResponse.body.email).toBe('kevin.hervieux@koveo-gestion.com');\n      expect(authResponse.body.role).toBe('admin');\n    });\n\n    it('should logout and clear session', async () => {\n      // First login\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'kevin.hervieux@koveo-gestion.com',\n          password: 'admin123',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n\n      // Logout\n      const logoutResponse = await request(app)\n        .post('/api/auth/logout')\n        .set('Cookie', cookies)\n        .expect(200);\n\n      expect(logoutResponse.body.message).toMatch(/logout.*success/i);\n\n      // Try to access protected endpoint after logout\n      const protectedResponse = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', cookies);\n\n      expect(protectedResponse.status).toBe(401);\n    });\n  });\n\n  describe('Session Management', () => {\n    it('should handle multiple concurrent login attempts', async () => {\n      const loginData = {\n        email: 'kevin.hervieux@koveo-gestion.com',\n        password: 'admin123',\n      };\n\n      // Create multiple simultaneous login requests\n      const loginPromises = Array(3).fill(null).map(() =>\n        request(app)\n          .post('/api/auth/login')\n          .send(loginData)\n      );\n\n      const responses = await Promise.all(loginPromises);\n      \n      // All should succeed and get unique sessions\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.headers['set-cookie']).toBeDefined();\n      });\n\n      // Verify each got a different session\n      const sessionIds = responses.map(r => r.headers['set-cookie'][0]);\n      const uniqueSessions = new Set(sessionIds);\n      expect(uniqueSessions.size).toBe(3);\n    });\n  });\n});"],"version":3}