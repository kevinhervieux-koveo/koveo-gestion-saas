{"file":"/home/runner/workspace/tests/unit/button-functionality/dialog-buttons.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/button-functionality/dialog-buttons.test.tsx"],"sourcesContent":["/**\n * Dialog Button Functionality Tests\n * Tests all dialog and modal buttons (confirm, cancel, time limits, etc.)\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport '@testing-library/jest-dom';\nimport userEvent from '@testing-library/user-event';\n\n// Mock API requests\nconst mockApiRequest = jest.fn();\njest.mock('../../../client/src/lib/queryClient', () => ({\n  apiRequest: mockApiRequest,\n  queryClient: new (jest.requireActual('@tanstack/react-query').QueryClient)(),\n}));\n\ndescribe('Dialog Buttons Functionality', () => {\n  let queryClient: QueryClient;\n  let user: any;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n    user = userEvent.setup();\n    jest.clearAllMocks();\n    mockApiRequest.mockResolvedValue({ ok: true, json: () => Promise.resolve({}) });\n  });\n\n  const renderWithProvider = (component: React.ReactElement) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        {component}\n      </QueryClientProvider>\n    );\n  };\n\n  describe('Confirmation Dialog Buttons', () => {\n    it('should handle create confirmation flow', async () => {\n      const MockCreateDialog = () => {\n        const [showDialog, setShowDialog] = React.useState(false);\n        \n        return (\n          <div>\n            <button \n              data-testid=\"button-create-space\"\n              onClick={() => setShowDialog(true)}\n            >\n              Create Space\n            </button>\n            \n            {showDialog && (\n              <div>\n                <button \n                  data-testid=\"button-cancel-create\"\n                  onClick={() => setShowDialog(false)}\n                >\n                  Cancel Create\n                </button>\n                <button \n                  data-testid=\"button-confirm-create\"\n                  onClick={() => {\n                    mockApiRequest('/api/spaces', { method: 'POST' });\n                    setShowDialog(false);\n                  }}\n                >\n                  Confirm Create\n                </button>\n              </div>\n            )}\n          </div>\n        );\n      };\n\n      renderWithProvider(<MockCreateDialog />);\n      \n      const createButton = screen.getByTestId('button-create-space');\n      expect(createButton).toBeInTheDocument();\n      \n      await user.click(createButton);\n      \n      await waitFor(() => {\n        const cancelButton = screen.getByTestId('button-cancel-create');\n        const confirmButton = screen.getByTestId('button-confirm-create');\n        \n        expect(cancelButton).toBeInTheDocument();\n        expect(confirmButton).toBeInTheDocument();\n      });\n      \n      // Test cancel functionality\n      const cancelButton = screen.getByTestId('button-cancel-create');\n      await user.click(cancelButton);\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('button-cancel-create')).not.toBeInTheDocument();\n      });\n      \n      // Test confirm functionality\n      await user.click(createButton);\n      \n      await waitFor(() => {\n        const confirmButton = screen.getByTestId('button-confirm-create');\n        expect(confirmButton).toBeInTheDocument();\n      });\n      \n      const confirmButton = screen.getByTestId('button-confirm-create');\n      await user.click(confirmButton);\n      \n      expect(mockApiRequest).toHaveBeenCalledWith('/api/spaces', { method: 'POST' });\n    });\n\n    it('should handle delete confirmation flow', async () => {\n      const MockDeleteDialog = () => {\n        const [showDialog, setShowDialog] = React.useState(false);\n        \n        return (\n          <div>\n            <button \n              data-testid=\"button-delete\"\n              onClick={() => setShowDialog(true)}\n            >\n              Delete\n            </button>\n            \n            {showDialog && (\n              <div>\n                <button \n                  data-testid=\"button-cancel-delete\"\n                  onClick={() => setShowDialog(false)}\n                >\n                  Cancel Delete\n                </button>\n                <button \n                  data-testid=\"button-confirm-delete\"\n                  onClick={() => {\n                    mockApiRequest('/api/delete', { method: 'DELETE' });\n                    setShowDialog(false);\n                  }}\n                >\n                  Confirm Delete\n                </button>\n              </div>\n            )}\n          </div>\n        );\n      };\n\n      renderWithProvider(<MockDeleteDialog />);\n      \n      const deleteButton = screen.getByTestId('button-delete');\n      expect(deleteButton).toBeInTheDocument();\n      \n      await user.click(deleteButton);\n      \n      await waitFor(() => {\n        const cancelButton = screen.getByTestId('button-cancel-delete');\n        const confirmButton = screen.getByTestId('button-confirm-delete');\n        \n        expect(cancelButton).toBeInTheDocument();\n        expect(confirmButton).toBeInTheDocument();\n      });\n      \n      const confirmButton = screen.getByTestId('button-confirm-delete');\n      await user.click(confirmButton);\n      \n      expect(mockApiRequest).toHaveBeenCalledWith('/api/delete', { method: 'DELETE' });\n    });\n  });\n\n  describe('Time Limit Dialog Buttons', () => {\n    it('should handle time limit setting flow', async () => {\n      const MockTimeLimitDialog = () => {\n        const [showDialog, setShowDialog] = React.useState(false);\n        \n        return (\n          <div>\n            <button \n              data-testid=\"button-time-limit-user\"\n              onClick={() => setShowDialog(true)}\n            >\n              Set Time Limit\n            </button>\n            \n            {showDialog && (\n              <div>\n                <input \n                  type=\"number\" \n                  data-testid=\"time-limit-input\"\n                  defaultValue=\"10\"\n                />\n                <button \n                  data-testid=\"button-cancel-time-limit\"\n                  onClick={() => setShowDialog(false)}\n                >\n                  Cancel Time Limit\n                </button>\n                <button \n                  data-testid=\"button-confirm-time-limit\"\n                  onClick={() => {\n                    mockApiRequest('/api/time-limits', { \n                      method: 'POST',\n                      body: JSON.stringify({ limit: 10 })\n                    });\n                    setShowDialog(false);\n                  }}\n                >\n                  Confirm Time Limit\n                </button>\n              </div>\n            )}\n          </div>\n        );\n      };\n\n      renderWithProvider(<MockTimeLimitDialog />);\n      \n      const timeLimitButton = screen.getByTestId('button-time-limit-user');\n      expect(timeLimitButton).toBeInTheDocument();\n      \n      await user.click(timeLimitButton);\n      \n      await waitFor(() => {\n        const cancelButton = screen.getByTestId('button-cancel-time-limit');\n        const confirmButton = screen.getByTestId('button-confirm-time-limit');\n        const input = screen.getByTestId('time-limit-input');\n        \n        expect(cancelButton).toBeInTheDocument();\n        expect(confirmButton).toBeInTheDocument();\n        expect(input).toBeInTheDocument();\n      });\n      \n      const confirmButton = screen.getByTestId('button-confirm-time-limit');\n      await user.click(confirmButton);\n      \n      expect(mockApiRequest).toHaveBeenCalledWith('/api/time-limits', { \n        method: 'POST',\n        body: JSON.stringify({ limit: 10 })\n      });\n    });\n  });\n\n  describe('Multi-step Dialog Buttons', () => {\n    it('should handle multi-step dialog navigation', async () => {\n      const MockMultiStepDialog = () => {\n        const [step, setStep] = React.useState(0);\n        const [showDialog, setShowDialog] = React.useState(false);\n        \n        return (\n          <div>\n            <button \n              data-testid=\"button-start-process\"\n              onClick={() => {\n                setShowDialog(true);\n                setStep(1);\n              }}\n            >\n              Start Process\n            </button>\n            \n            {showDialog && (\n              <div>\n                {step === 1 && (\n                  <div>\n                    <button \n                      data-testid=\"button-next-step\"\n                      onClick={() => setStep(2)}\n                    >\n                      Next Step\n                    </button>\n                    <button \n                      data-testid=\"button-cancel-process\"\n                      onClick={() => setShowDialog(false)}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                )}\n                \n                {step === 2 && (\n                  <div>\n                    <button \n                      data-testid=\"button-back-step\"\n                      onClick={() => setStep(1)}\n                    >\n                      Back Step\n                    </button>\n                    <button \n                      data-testid=\"button-finish-process\"\n                      onClick={() => {\n                        mockApiRequest('/api/finish', { method: 'POST' });\n                        setShowDialog(false);\n                        setStep(0);\n                      }}\n                    >\n                      Finish\n                    </button>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        );\n      };\n\n      renderWithProvider(<MockMultiStepDialog />);\n      \n      const startButton = screen.getByTestId('button-start-process');\n      expect(startButton).toBeInTheDocument();\n      \n      await user.click(startButton);\n      \n      await waitFor(() => {\n        const nextButton = screen.getByTestId('button-next-step');\n        const cancelButton = screen.getByTestId('button-cancel-process');\n        \n        expect(nextButton).toBeInTheDocument();\n        expect(cancelButton).toBeInTheDocument();\n      });\n      \n      const nextButton = screen.getByTestId('button-next-step');\n      await user.click(nextButton);\n      \n      await waitFor(() => {\n        const backButton = screen.getByTestId('button-back-step');\n        const finishButton = screen.getByTestId('button-finish-process');\n        \n        expect(backButton).toBeInTheDocument();\n        expect(finishButton).toBeInTheDocument();\n      });\n      \n      const finishButton = screen.getByTestId('button-finish-process');\n      await user.click(finishButton);\n      \n      expect(mockApiRequest).toHaveBeenCalledWith('/api/finish', { method: 'POST' });\n    });\n  });\n\n  describe('Special Function Buttons', () => {\n    it('should handle generate insights button', async () => {\n      const MockInsightsButton = () => (\n        <button \n          data-testid=\"generate-insights-button\"\n          onClick={() => mockApiRequest('/api/generate-insights', { method: 'POST' })}\n        >\n          Generate Insights\n        </button>\n      );\n\n      renderWithProvider(<MockInsightsButton />);\n      \n      const insightsButton = screen.getByTestId('generate-insights-button');\n      expect(insightsButton).toBeInTheDocument();\n      \n      await user.click(insightsButton);\n      \n      expect(mockApiRequest).toHaveBeenCalledWith('/api/generate-insights', { method: 'POST' });\n    });\n  });\n\n  describe('Dialog State Management', () => {\n    it('should properly manage dialog open/close states', async () => {\n      const MockDialogManagement = () => {\n        const [dialogStates, setDialogStates] = React.useState({\n          create: false,\n          delete: false,\n          edit: false\n        });\n        \n        const toggleDialog = (type: string) => {\n          setDialogStates(prev => ({ ...prev, [type]: !prev[type as keyof typeof prev] }));\n        };\n        \n        return (\n          <div>\n            <button \n              data-testid=\"open-create-dialog\"\n              onClick={() => toggleDialog('create')}\n            >\n              Open Create\n            </button>\n            <button \n              data-testid=\"open-delete-dialog\"\n              onClick={() => toggleDialog('delete')}\n            >\n              Open Delete\n            </button>\n            \n            {dialogStates.create && (\n              <div data-testid=\"create-dialog\">\n                <button \n                  data-testid=\"close-create-dialog\"\n                  onClick={() => toggleDialog('create')}\n                >\n                  Close Create\n                </button>\n              </div>\n            )}\n            \n            {dialogStates.delete && (\n              <div data-testid=\"delete-dialog\">\n                <button \n                  data-testid=\"close-delete-dialog\"\n                  onClick={() => toggleDialog('delete')}\n                >\n                  Close Delete\n                </button>\n              </div>\n            )}\n          </div>\n        );\n      };\n\n      renderWithProvider(<MockDialogManagement />);\n      \n      const openCreateButton = screen.getByTestId('open-create-dialog');\n      const openDeleteButton = screen.getByTestId('open-delete-dialog');\n      \n      expect(openCreateButton).toBeInTheDocument();\n      expect(openDeleteButton).toBeInTheDocument();\n      \n      // Test create dialog\n      await user.click(openCreateButton);\n      \n      await waitFor(() => {\n        const createDialog = screen.getByTestId('create-dialog');\n        expect(createDialog).toBeInTheDocument();\n      });\n      \n      const closeCreateButton = screen.getByTestId('close-create-dialog');\n      await user.click(closeCreateButton);\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('create-dialog')).not.toBeInTheDocument();\n      });\n      \n      // Test delete dialog\n      await user.click(openDeleteButton);\n      \n      await waitFor(() => {\n        const deleteDialog = screen.getByTestId('delete-dialog');\n        expect(deleteDialog).toBeInTheDocument();\n      });\n      \n      const closeDeleteButton = screen.getByTestId('close-delete-dialog');\n      await user.click(closeDeleteButton);\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('delete-dialog')).not.toBeInTheDocument();\n      });\n    });\n  });\n});"],"version":3}