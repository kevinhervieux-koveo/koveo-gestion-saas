f490cd07c1aab4981e5a5820f2e91cdf
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../../client/src/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
    queryClient: new (jest.requireActual('@tanstack/react-query').QueryClient)(),
}));
/**
 * Dialog Button Functionality Tests
 * Tests all dialog and modal buttons (confirm, cancel, time limits, etc.)
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
// Mock API requests
const mockApiRequest = jest.fn();
describe('Dialog Buttons Functionality', () => {
    let queryClient;
    let user;
    beforeEach(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: { retry: false },
                mutations: { retry: false },
            },
        });
        user = user_event_1.default.setup();
        jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ ok: true, json: () => Promise.resolve({}) });
    });
    const renderWithProvider = (component) => {
        return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    describe('Confirmation Dialog Buttons', () => {
        it('should handle create confirmation flow', async () => {
            const MockCreateDialog = () => {
                const [showDialog, setShowDialog] = react_1.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-create-space", onClick: () => setShowDialog(true), children: "Create Space" }), showDialog && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-create", onClick: () => setShowDialog(false), children: "Cancel Create" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-confirm-create", onClick: () => {
                                        mockApiRequest('/api/spaces', { method: 'POST' });
                                        setShowDialog(false);
                                    }, children: "Confirm Create" })] }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockCreateDialog, {}));
            const createButton = react_2.screen.getByTestId('button-create-space');
            expect(createButton).toBeInTheDocument();
            await user.click(createButton);
            await (0, react_2.waitFor)(() => {
                const cancelButton = react_2.screen.getByTestId('button-cancel-create');
                const confirmButton = react_2.screen.getByTestId('button-confirm-create');
                expect(cancelButton).toBeInTheDocument();
                expect(confirmButton).toBeInTheDocument();
            });
            // Test cancel functionality
            const cancelButton = react_2.screen.getByTestId('button-cancel-create');
            await user.click(cancelButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.queryByTestId('button-cancel-create')).not.toBeInTheDocument();
            });
            // Test confirm functionality
            await user.click(createButton);
            await (0, react_2.waitFor)(() => {
                const confirmButton = react_2.screen.getByTestId('button-confirm-create');
                expect(confirmButton).toBeInTheDocument();
            });
            const confirmButton = react_2.screen.getByTestId('button-confirm-create');
            await user.click(confirmButton);
            expect(mockApiRequest).toHaveBeenCalledWith('/api/spaces', { method: 'POST' });
        });
        it('should handle delete confirmation flow', async () => {
            const MockDeleteDialog = () => {
                const [showDialog, setShowDialog] = react_1.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-delete", onClick: () => setShowDialog(true), children: "Delete" }), showDialog && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-delete", onClick: () => setShowDialog(false), children: "Cancel Delete" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-confirm-delete", onClick: () => {
                                        mockApiRequest('/api/delete', { method: 'DELETE' });
                                        setShowDialog(false);
                                    }, children: "Confirm Delete" })] }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockDeleteDialog, {}));
            const deleteButton = react_2.screen.getByTestId('button-delete');
            expect(deleteButton).toBeInTheDocument();
            await user.click(deleteButton);
            await (0, react_2.waitFor)(() => {
                const cancelButton = react_2.screen.getByTestId('button-cancel-delete');
                const confirmButton = react_2.screen.getByTestId('button-confirm-delete');
                expect(cancelButton).toBeInTheDocument();
                expect(confirmButton).toBeInTheDocument();
            });
            const confirmButton = react_2.screen.getByTestId('button-confirm-delete');
            await user.click(confirmButton);
            expect(mockApiRequest).toHaveBeenCalledWith('/api/delete', { method: 'DELETE' });
        });
    });
    describe('Time Limit Dialog Buttons', () => {
        it('should handle time limit setting flow', async () => {
            const MockTimeLimitDialog = () => {
                const [showDialog, setShowDialog] = react_1.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-time-limit-user", onClick: () => setShowDialog(true), children: "Set Time Limit" }), showDialog && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("input", { type: "number", "data-testid": "time-limit-input", defaultValue: "10" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-time-limit", onClick: () => setShowDialog(false), children: "Cancel Time Limit" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-confirm-time-limit", onClick: () => {
                                        mockApiRequest('/api/time-limits', {
                                            method: 'POST',
                                            body: JSON.stringify({ limit: 10 })
                                        });
                                        setShowDialog(false);
                                    }, children: "Confirm Time Limit" })] }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockTimeLimitDialog, {}));
            const timeLimitButton = react_2.screen.getByTestId('button-time-limit-user');
            expect(timeLimitButton).toBeInTheDocument();
            await user.click(timeLimitButton);
            await (0, react_2.waitFor)(() => {
                const cancelButton = react_2.screen.getByTestId('button-cancel-time-limit');
                const confirmButton = react_2.screen.getByTestId('button-confirm-time-limit');
                const input = react_2.screen.getByTestId('time-limit-input');
                expect(cancelButton).toBeInTheDocument();
                expect(confirmButton).toBeInTheDocument();
                expect(input).toBeInTheDocument();
            });
            const confirmButton = react_2.screen.getByTestId('button-confirm-time-limit');
            await user.click(confirmButton);
            expect(mockApiRequest).toHaveBeenCalledWith('/api/time-limits', {
                method: 'POST',
                body: JSON.stringify({ limit: 10 })
            });
        });
    });
    describe('Multi-step Dialog Buttons', () => {
        it('should handle multi-step dialog navigation', async () => {
            const MockMultiStepDialog = () => {
                const [step, setStep] = react_1.default.useState(0);
                const [showDialog, setShowDialog] = react_1.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-start-process", onClick: () => {
                                setShowDialog(true);
                                setStep(1);
                            }, children: "Start Process" }), showDialog && ((0, jsx_runtime_1.jsxs)("div", { children: [step === 1 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-next-step", onClick: () => setStep(2), children: "Next Step" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-process", onClick: () => setShowDialog(false), children: "Cancel" })] })), step === 2 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-back-step", onClick: () => setStep(1), children: "Back Step" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-finish-process", onClick: () => {
                                                mockApiRequest('/api/finish', { method: 'POST' });
                                                setShowDialog(false);
                                                setStep(0);
                                            }, children: "Finish" })] }))] }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockMultiStepDialog, {}));
            const startButton = react_2.screen.getByTestId('button-start-process');
            expect(startButton).toBeInTheDocument();
            await user.click(startButton);
            await (0, react_2.waitFor)(() => {
                const nextButton = react_2.screen.getByTestId('button-next-step');
                const cancelButton = react_2.screen.getByTestId('button-cancel-process');
                expect(nextButton).toBeInTheDocument();
                expect(cancelButton).toBeInTheDocument();
            });
            const nextButton = react_2.screen.getByTestId('button-next-step');
            await user.click(nextButton);
            await (0, react_2.waitFor)(() => {
                const backButton = react_2.screen.getByTestId('button-back-step');
                const finishButton = react_2.screen.getByTestId('button-finish-process');
                expect(backButton).toBeInTheDocument();
                expect(finishButton).toBeInTheDocument();
            });
            const finishButton = react_2.screen.getByTestId('button-finish-process');
            await user.click(finishButton);
            expect(mockApiRequest).toHaveBeenCalledWith('/api/finish', { method: 'POST' });
        });
    });
    describe('Special Function Buttons', () => {
        it('should handle generate insights button', async () => {
            const MockInsightsButton = () => ((0, jsx_runtime_1.jsx)("button", { "data-testid": "generate-insights-button", onClick: () => mockApiRequest('/api/generate-insights', { method: 'POST' }), children: "Generate Insights" }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockInsightsButton, {}));
            const insightsButton = react_2.screen.getByTestId('generate-insights-button');
            expect(insightsButton).toBeInTheDocument();
            await user.click(insightsButton);
            expect(mockApiRequest).toHaveBeenCalledWith('/api/generate-insights', { method: 'POST' });
        });
    });
    describe('Dialog State Management', () => {
        it('should properly manage dialog open/close states', async () => {
            const MockDialogManagement = () => {
                const [dialogStates, setDialogStates] = react_1.default.useState({
                    create: false,
                    delete: false,
                    edit: false
                });
                const toggleDialog = (type) => {
                    setDialogStates(prev => ({ ...prev, [type]: !prev[type] }));
                };
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "open-create-dialog", onClick: () => toggleDialog('create'), children: "Open Create" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "open-delete-dialog", onClick: () => toggleDialog('delete'), children: "Open Delete" }), dialogStates.create && ((0, jsx_runtime_1.jsx)("div", { "data-testid": "create-dialog", children: (0, jsx_runtime_1.jsx)("button", { "data-testid": "close-create-dialog", onClick: () => toggleDialog('create'), children: "Close Create" }) })), dialogStates.delete && ((0, jsx_runtime_1.jsx)("div", { "data-testid": "delete-dialog", children: (0, jsx_runtime_1.jsx)("button", { "data-testid": "close-delete-dialog", onClick: () => toggleDialog('delete'), children: "Close Delete" }) }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockDialogManagement, {}));
            const openCreateButton = react_2.screen.getByTestId('open-create-dialog');
            const openDeleteButton = react_2.screen.getByTestId('open-delete-dialog');
            expect(openCreateButton).toBeInTheDocument();
            expect(openDeleteButton).toBeInTheDocument();
            // Test create dialog
            await user.click(openCreateButton);
            await (0, react_2.waitFor)(() => {
                const createDialog = react_2.screen.getByTestId('create-dialog');
                expect(createDialog).toBeInTheDocument();
            });
            const closeCreateButton = react_2.screen.getByTestId('close-create-dialog');
            await user.click(closeCreateButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.queryByTestId('create-dialog')).not.toBeInTheDocument();
            });
            // Test delete dialog
            await user.click(openDeleteButton);
            await (0, react_2.waitFor)(() => {
                const deleteDialog = react_2.screen.getByTestId('delete-dialog');
                expect(deleteDialog).toBeInTheDocument();
            });
            const closeDeleteButton = react_2.screen.getByTestId('close-delete-dialog');
            await user.click(closeDeleteButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.queryByTestId('delete-dialog')).not.toBeInTheDocument();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2J1dHRvbi1mdW5jdGlvbmFsaXR5L2RpYWxvZy1idXR0b25zLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQWFBLElBQUksQ0FBQyxJQUFJLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN0RCxVQUFVLEVBQUUsY0FBYztJQUMxQixXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRTtDQUM3RSxDQUFDLENBQUMsQ0FBQztBQWhCSjs7O0dBR0c7QUFFSCxrREFBMEI7QUFDMUIsa0RBQTRFO0FBQzVFLHVEQUF5RTtBQUN6RSxxQ0FBbUM7QUFDbkMsNkVBQW9EO0FBRXBELG9CQUFvQjtBQUNwQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFNakMsUUFBUSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUM1QyxJQUFJLFdBQXdCLENBQUM7SUFDN0IsSUFBSSxJQUFTLENBQUM7SUFFZCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsV0FBVyxHQUFHLElBQUkseUJBQVcsQ0FBQztZQUM1QixjQUFjLEVBQUU7Z0JBQ2QsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtnQkFDekIsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTthQUM1QjtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksR0FBRyxvQkFBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixjQUFjLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsRixDQUFDLENBQUMsQ0FBQztJQUVILE1B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QixDQUFDLENBQUM7WUFFbkMsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7Z0JBQ2pCLE1BQU0sWUFBWSxHQUFHLGNBQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ3pELE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxpQkFBaUIsR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDcEUsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFcEMsTUFBTSxJQUFBLGVBQU8sRUFBQyxHQUFHLEVBQUU7Z0JBQ2pCLE1BQU0sQ0FBQyxjQUFNLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDeEUsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2J1dHRvbi1mdW5jdGlvbmFsaXR5L2RpYWxvZy1idXR0b25zLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGlhbG9nIEJ1dHRvbiBGdW5jdGlvbmFsaXR5IFRlc3RzXG4gKiBUZXN0cyBhbGwgZGlhbG9nIGFuZCBtb2RhbCBidXR0b25zIChjb25maXJtLCBjYW5jZWwsIHRpbWUgbGltaXRzLCBldGMuKVxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciB9IGZyb20gJ0B0YW5zdGFjay9yZWFjdC1xdWVyeSc7XG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xuaW1wb3J0IHVzZXJFdmVudCBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQnO1xuXG4vLyBNb2NrIEFQSSByZXF1ZXN0c1xuY29uc3QgbW9ja0FwaVJlcXVlc3QgPSBqZXN0LmZuKCk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uL2NsaWVudC9zcmMvbGliL3F1ZXJ5Q2xpZW50JywgKCkgPT4gKHtcbiAgYXBpUmVxdWVzdDogbW9ja0FwaVJlcXVlc3QsXG4gIHF1ZXJ5Q2xpZW50OiBuZXcgKGplc3QucmVxdWlyZUFjdHVhbCgnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JykuUXVlcnlDbGllbnQpKCksXG59KSk7XG5cbmRlc2NyaWJlKCdEaWFsb2cgQnV0dG9ucyBGdW5jdGlvbmFsaXR5JywgKCkgPT4ge1xuICBsZXQgcXVlcnlDbGllbnQ6IFF1ZXJ5Q2xpZW50O1xuICBsZXQgdXNlcjogYW55O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KHtcbiAgICAgIGRlZmF1bHRPcHRpb25zOiB7XG4gICAgICAgIHF1ZXJpZXM6IHsgcmV0cnk6IGZhbHNlIH0sXG4gICAgICAgIG11dGF0aW9uczogeyByZXRyeTogZmFsc2UgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgdXNlciA9IHVzZXJFdmVudC5zZXR1cCgpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIG1vY2tBcGlSZXF1ZXN0Lm1vY2tSZXNvbHZlZFZhbHVlKHsgb2s6IHRydWUsIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZSh7fSkgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlbmRlcldpdGhQcm92aWRlciA9IChjb21wb25lbnQ6IFJlYWN0LlJlYWN0RWxlbWVudCkgPT4ge1xuICAgIHJldHVybiByZW5kZXIoXG4gICAgICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAgICAge2NvbXBvbmVudH1cbiAgICAgIDwvUXVlcnlDbGllbnRQcm92aWRlcj5cbiAgICApO1xuICB9O1xuXG4gIGRlc2NyaWJlKCdDb25maXJtYXRpb24gRGlhbG9nIEJ1dHRvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY3JlYXRlIGNvbmZpcm1hdGlvbiBmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgTW9ja0NyZWF0ZURpYWxvZyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgW3Nob3dEaWFsb2csIHNldFNob3dEaWFsb2ddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tY3JlYXRlLXNwYWNlXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0RpYWxvZyh0cnVlKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgQ3JlYXRlIFNwYWNlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAge3Nob3dEaWFsb2cgJiYgKFxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImJ1dHRvbi1jYW5jZWwtY3JlYXRlXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dEaWFsb2coZmFsc2UpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIENhbmNlbCBDcmVhdGVcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tY29uZmlybS1jcmVhdGVcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtb2NrQXBpUmVxdWVzdCgnL2FwaS9zcGFjZXMnLCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZXRTaG93RGlhbG9nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgQ29uZmlybSBDcmVhdGVcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVyKDxNb2NrQ3JlYXRlRGlhbG9nIC8+KTtcbiAgICAgIFxuICAgICAgY29uc3QgY3JlYXRlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tY3JlYXRlLXNwYWNlJyk7XG4gICAgICBleHBlY3QoY3JlYXRlQnV0dG9uKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgXG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKGNyZWF0ZUJ1dHRvbik7XG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2J1dHRvbi1jYW5jZWwtY3JlYXRlJyk7XG4gICAgICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2J1dHRvbi1jb25maXJtLWNyZWF0ZScpO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KGNhbmNlbEJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgZXhwZWN0KGNvbmZpcm1CdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gVGVzdCBjYW5jZWwgZnVuY3Rpb25hbGl0eVxuICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tY2FuY2VsLWNyZWF0ZScpO1xuICAgICAgYXdhaXQgdXNlci5jbGljayhjYW5jZWxCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdidXR0b24tY2FuY2VsLWNyZWF0ZScpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBUZXN0IGNvbmZpcm0gZnVuY3Rpb25hbGl0eVxuICAgICAgYXdhaXQgdXNlci5jbGljayhjcmVhdGVCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLWNvbmZpcm0tY3JlYXRlJyk7XG4gICAgICAgIGV4cGVjdChjb25maXJtQnV0dG9uKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGNvbmZpcm1CdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2J1dHRvbi1jb25maXJtLWNyZWF0ZScpO1xuICAgICAgYXdhaXQgdXNlci5jbGljayhjb25maXJtQnV0dG9uKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tBcGlSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2FwaS9zcGFjZXMnLCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGVsZXRlIGNvbmZpcm1hdGlvbiBmbG93JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgTW9ja0RlbGV0ZURpYWxvZyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgW3Nob3dEaWFsb2csIHNldFNob3dEaWFsb2ddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tZGVsZXRlXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0RpYWxvZyh0cnVlKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgRGVsZXRlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAge3Nob3dEaWFsb2cgJiYgKFxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImJ1dHRvbi1jYW5jZWwtZGVsZXRlXCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dEaWFsb2coZmFsc2UpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIENhbmNlbCBEZWxldGVcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tY29uZmlybS1kZWxldGVcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtb2NrQXBpUmVxdWVzdCgnL2FwaS9kZWxldGUnLCB7IG1ldGhvZDogJ0RFTEVURScgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNldFNob3dEaWFsb2coZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBDb25maXJtIERlbGV0ZVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXIoPE1vY2tEZWxldGVEaWFsb2cgLz4pO1xuICAgICAgXG4gICAgICBjb25zdCBkZWxldGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2J1dHRvbi1kZWxldGUnKTtcbiAgICAgIGV4cGVjdChkZWxldGVCdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soZGVsZXRlQnV0dG9uKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLWNhbmNlbC1kZWxldGUnKTtcbiAgICAgICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLWNvbmZpcm0tZGVsZXRlJyk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QoY2FuY2VsQnV0dG9uKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgICBleHBlY3QoY29uZmlybUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBjb25maXJtQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tY29uZmlybS1kZWxldGUnKTtcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soY29uZmlybUJ1dHRvbik7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrQXBpUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvZGVsZXRlJywgeyBtZXRob2Q6ICdERUxFVEUnIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVGltZSBMaW1pdCBEaWFsb2cgQnV0dG9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB0aW1lIGxpbWl0IHNldHRpbmcgZmxvdycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IE1vY2tUaW1lTGltaXREaWFsb2cgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IFtzaG93RGlhbG9nLCBzZXRTaG93RGlhbG9nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLXRpbWUtbGltaXQtdXNlclwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dEaWFsb2codHJ1ZSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFNldCBUaW1lIExpbWl0XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAge3Nob3dEaWFsb2cgJiYgKFxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIiBcbiAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwidGltZS1saW1pdC1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9XCIxMFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tY2FuY2VsLXRpbWUtbGltaXRcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0RpYWxvZyhmYWxzZSl9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgQ2FuY2VsIFRpbWUgTGltaXRcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tY29uZmlybS10aW1lLWxpbWl0XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbW9ja0FwaVJlcXVlc3QoJy9hcGkvdGltZS1saW1pdHMnLCB7IFxuICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbGltaXQ6IDEwIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZXRTaG93RGlhbG9nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgQ29uZmlybSBUaW1lIExpbWl0XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIHJlbmRlcldpdGhQcm92aWRlcig8TW9ja1RpbWVMaW1pdERpYWxvZyAvPik7XG4gICAgICBcbiAgICAgIGNvbnN0IHRpbWVMaW1pdEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLXRpbWUtbGltaXQtdXNlcicpO1xuICAgICAgZXhwZWN0KHRpbWVMaW1pdEJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIFxuICAgICAgYXdhaXQgdXNlci5jbGljayh0aW1lTGltaXRCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tY2FuY2VsLXRpbWUtbGltaXQnKTtcbiAgICAgICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLWNvbmZpcm0tdGltZS1saW1pdCcpO1xuICAgICAgICBjb25zdCBpbnB1dCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgndGltZS1saW1pdC1pbnB1dCcpO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KGNhbmNlbEJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgZXhwZWN0KGNvbmZpcm1CdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChpbnB1dCkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBjb25maXJtQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tY29uZmlybS10aW1lLWxpbWl0Jyk7XG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKGNvbmZpcm1CdXR0b24pO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja0FwaVJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXBpL3RpbWUtbGltaXRzJywgeyBcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbGltaXQ6IDEwIH0pXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ011bHRpLXN0ZXAgRGlhbG9nIEJ1dHRvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbXVsdGktc3RlcCBkaWFsb2cgbmF2aWdhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IE1vY2tNdWx0aVN0ZXBEaWFsb2cgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IFtzdGVwLCBzZXRTdGVwXSA9IFJlYWN0LnVzZVN0YXRlKDApO1xuICAgICAgICBjb25zdCBbc2hvd0RpYWxvZywgc2V0U2hvd0RpYWxvZ10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImJ1dHRvbi1zdGFydC1wcm9jZXNzXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFNob3dEaWFsb2codHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2V0U3RlcCgxKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgU3RhcnQgUHJvY2Vzc1xuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHtzaG93RGlhbG9nICYmIChcbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICB7c3RlcCA9PT0gMSAmJiAoXG4gICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLW5leHQtc3RlcFwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U3RlcCgyKX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIE5leHQgU3RlcFxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImJ1dHRvbi1jYW5jZWwtcHJvY2Vzc1wiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0RpYWxvZyhmYWxzZSl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHtzdGVwID09PSAyICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJidXR0b24tYmFjay1zdGVwXCJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTdGVwKDEpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgQmFjayBTdGVwXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiYnV0dG9uLWZpbmlzaC1wcm9jZXNzXCJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2NrQXBpUmVxdWVzdCgnL2FwaS9maW5pc2gnLCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2hvd0RpYWxvZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGVwKDApO1xuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBGaW5pc2hcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXIoPE1vY2tNdWx0aVN0ZXBEaWFsb2cgLz4pO1xuICAgICAgXG4gICAgICBjb25zdCBzdGFydEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLXN0YXJ0LXByb2Nlc3MnKTtcbiAgICAgIGV4cGVjdChzdGFydEJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIFxuICAgICAgYXdhaXQgdXNlci5jbGljayhzdGFydEJ1dHRvbik7XG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXh0QnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tbmV4dC1zdGVwJyk7XG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLWNhbmNlbC1wcm9jZXNzJyk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QobmV4dEJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgICAgZXhwZWN0KGNhbmNlbEJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBuZXh0QnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tbmV4dC1zdGVwJyk7XG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKG5leHRCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgY29uc3QgYmFja0J1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnYnV0dG9uLWJhY2stc3RlcCcpO1xuICAgICAgICBjb25zdCBmaW5pc2hCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2J1dHRvbi1maW5pc2gtcHJvY2VzcycpO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KGJhY2tCdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICAgIGV4cGVjdChmaW5pc2hCdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgZmluaXNoQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdidXR0b24tZmluaXNoLXByb2Nlc3MnKTtcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soZmluaXNoQnV0dG9uKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tBcGlSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2FwaS9maW5pc2gnLCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3BlY2lhbCBGdW5jdGlvbiBCdXR0b25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGdlbmVyYXRlIGluc2lnaHRzIGJ1dHRvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IE1vY2tJbnNpZ2h0c0J1dHRvbiA9ICgpID0+IChcbiAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICBkYXRhLXRlc3RpZD1cImdlbmVyYXRlLWluc2lnaHRzLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gbW9ja0FwaVJlcXVlc3QoJy9hcGkvZ2VuZXJhdGUtaW5zaWdodHMnLCB7IG1ldGhvZDogJ1BPU1QnIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgR2VuZXJhdGUgSW5zaWdodHNcbiAgICAgICAgPC9idXR0b24+XG4gICAgICApO1xuXG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXIoPE1vY2tJbnNpZ2h0c0J1dHRvbiAvPik7XG4gICAgICBcbiAgICAgIGNvbnN0IGluc2lnaHRzQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdnZW5lcmF0ZS1pbnNpZ2h0cy1idXR0b24nKTtcbiAgICAgIGV4cGVjdChpbnNpZ2h0c0J1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIFxuICAgICAgYXdhaXQgdXNlci5jbGljayhpbnNpZ2h0c0J1dHRvbik7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrQXBpUmVxdWVzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hcGkvZ2VuZXJhdGUtaW5zaWdodHMnLCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRGlhbG9nIFN0YXRlIE1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwcm9wZXJseSBtYW5hZ2UgZGlhbG9nIG9wZW4vY2xvc2Ugc3RhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgTW9ja0RpYWxvZ01hbmFnZW1lbnQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IFtkaWFsb2dTdGF0ZXMsIHNldERpYWxvZ1N0YXRlc10gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgICAgICAgY3JlYXRlOiBmYWxzZSxcbiAgICAgICAgICBkZWxldGU6IGZhbHNlLFxuICAgICAgICAgIGVkaXQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdG9nZ2xlRGlhbG9nID0gKHR5cGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgIHNldERpYWxvZ1N0YXRlcyhwcmV2ID0+ICh7IC4uLnByZXYsIFt0eXBlXTogIXByZXZbdHlwZSBhcyBrZXlvZiB0eXBlb2YgcHJldl0gfSkpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJvcGVuLWNyZWF0ZS1kaWFsb2dcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVEaWFsb2coJ2NyZWF0ZScpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBPcGVuIENyZWF0ZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cIm9wZW4tZGVsZXRlLWRpYWxvZ1wiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZURpYWxvZygnZGVsZXRlJyl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIE9wZW4gRGVsZXRlXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAge2RpYWxvZ1N0YXRlcy5jcmVhdGUgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiY3JlYXRlLWRpYWxvZ1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgICBkYXRhLXRlc3RpZD1cImNsb3NlLWNyZWF0ZS1kaWFsb2dcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdG9nZ2xlRGlhbG9nKCdjcmVhdGUnKX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICBDbG9zZSBDcmVhdGVcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB7ZGlhbG9nU3RhdGVzLmRlbGV0ZSAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJkZWxldGUtZGlhbG9nXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiY2xvc2UtZGVsZXRlLWRpYWxvZ1wiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0b2dnbGVEaWFsb2coJ2RlbGV0ZScpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIENsb3NlIERlbGV0ZVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXIoPE1vY2tEaWFsb2dNYW5hZ2VtZW50IC8+KTtcbiAgICAgIFxuICAgICAgY29uc3Qgb3BlbkNyZWF0ZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnb3Blbi1jcmVhdGUtZGlhbG9nJyk7XG4gICAgICBjb25zdCBvcGVuRGVsZXRlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdvcGVuLWRlbGV0ZS1kaWFsb2cnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG9wZW5DcmVhdGVCdXR0b24pLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICBleHBlY3Qob3BlbkRlbGV0ZUJ1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIFxuICAgICAgLy8gVGVzdCBjcmVhdGUgZGlhbG9nXG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKG9wZW5DcmVhdGVCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgY29uc3QgY3JlYXRlRGlhbG9nID0gc2NyZWVuLmdldEJ5VGVzdElkKCdjcmVhdGUtZGlhbG9nJyk7XG4gICAgICAgIGV4cGVjdChjcmVhdGVEaWFsb2cpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgY2xvc2VDcmVhdGVCdXR0b24gPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2Nsb3NlLWNyZWF0ZS1kaWFsb2cnKTtcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soY2xvc2VDcmVhdGVCdXR0b24pO1xuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGVzdElkKCdjcmVhdGUtZGlhbG9nJykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIFRlc3QgZGVsZXRlIGRpYWxvZ1xuICAgICAgYXdhaXQgdXNlci5jbGljayhvcGVuRGVsZXRlQnV0dG9uKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRlbGV0ZURpYWxvZyA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnZGVsZXRlLWRpYWxvZycpO1xuICAgICAgICBleHBlY3QoZGVsZXRlRGlhbG9nKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGNsb3NlRGVsZXRlQnV0dG9uID0gc2NyZWVuLmdldEJ5VGVzdElkKCdjbG9zZS1kZWxldGUtZGlhbG9nJyk7XG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKGNsb3NlRGVsZXRlQnV0dG9uKTtcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnZGVsZXRlLWRpYWxvZycpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==