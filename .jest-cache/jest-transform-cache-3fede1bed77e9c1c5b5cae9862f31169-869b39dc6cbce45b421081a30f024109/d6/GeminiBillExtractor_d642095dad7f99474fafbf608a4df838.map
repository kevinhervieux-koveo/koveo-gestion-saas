{"file":"/home/runner/workspace/client/src/components/bill-management/GeminiBillExtractor.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/bill-management/GeminiBillExtractor.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface GeminiBillExtractorProps {\n  /** The bill/receipt file to process with AI extraction */\n  file: File | null;\n  /** Callback function to return extracted data to the parent component */\n  onExtractionComplete: (data: {\n    success: boolean;\n    formData?: any;\n    confidence?: number;\n    error?: string;\n    rawData?: any;\n    isLoading?: boolean;\n  }) => void;\n}\n\n/**\n * GeminiBillExtractor Component\n * \n * A client-side component that manages AI-powered bill and receipt data extraction.\n * This component does not render any UI - it purely handles the API integration\n * for sending uploaded files to the Gemini AI service for structured data extraction.\n * \n * Features:\n * - TanStack Query integration with useMutation\n * - Automatic extraction triggering when file changes\n * - Structured error handling and response formatting\n * - Form data conversion for easy integration with react-hook-form\n * - Confidence scoring and extraction metadata\n * - Specialized for bills, receipts, and vendor invoices\n */\nexport function GeminiBillExtractor({ file, onExtractionComplete }: GeminiBillExtractorProps) {\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetries = 2;\n  \n  // Mutation for AI bill data extraction\n  const extractionMutation = useMutation({\n    retry: (failureCount, error: any) => {\n      // Retry up to maxRetries times for network errors or 5xx errors\n      if (failureCount < maxRetries) {\n        const isRetryableError = \n          error.message?.includes('Failed to execute \\'fetch\\'') || \n          error.message?.includes('Network error') ||\n          error.message?.includes('500:') ||\n          error.message?.includes('502:') ||\n          error.message?.includes('503:') ||\n          error.message?.includes('504:');\n        \n        if (isRetryableError) {\n          console.log(`[GEMINI BILL EXTRACTOR] Retrying extraction (attempt ${failureCount + 1}/${maxRetries})`);\n          return true;\n        }\n      }\n      return false;\n    },\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\n    mutationFn: async (billFile: File) => {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('invoiceFile', billFile);\n      \n      // Make API request to bill extraction endpoint\n      const response = await apiRequest('POST', '/api/bills/extract-data', formData);\n      \n      // Parse JSON response\n      const jsonResponse = await response.json();\n      return jsonResponse;\n    },\n    onSuccess: (data) => {\n      console.log('[GEMINI BILL EXTRACTOR] Extraction successful:', data);\n      \n      // Convert AI response to form data format for bills\n      const formData = convertBillResponseToFormData(data.data);\n      \n      // Call the success callback with structured data\n      onExtractionComplete({\n        success: true,\n        formData,\n        confidence: data.metadata?.confidence,\n        rawData: data.data\n      });\n    },\n    onError: (error: any, variables, context) => {\n      console.error('[GEMINI BILL EXTRACTOR] Extraction failed:', error);\n      setRetryCount(context?.failureCount || 0);\n      \n      // Handle different error types\n      let errorMessage = 'Failed to extract bill data';\n      \n      // Check if it's a network or fetch error\n      if (error.message?.includes('Failed to execute \\'fetch\\'') || error.name === 'TypeError') {\n        errorMessage = 'Network error occurred. Please check your connection and try again.';\n      } else if (error.message?.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = 'Too many extraction requests. Please wait before trying again.';\n      } else if (error.message?.includes('UNSUPPORTED_FILE_TYPE')) {\n        errorMessage = 'Unsupported file type. Please upload a PDF or image file.';\n      } else if (error.message?.includes('FILE_TOO_LARGE')) {\n        errorMessage = 'File is too large. Please upload a file smaller than 25MB.';\n      } else if (error.message?.includes('GEMINI_API_ERROR')) {\n        errorMessage = 'AI service temporarily unavailable. Please try again later.';\n      } else if (error.message?.includes('400:') || error.message?.includes('500:')) {\n        // Extract server error message from status codes\n        const match = error.message.match(/\\d+:\\s*(.+)/);\n        if (match) {\n          try {\n            const errorData = JSON.parse(match[1]);\n            errorMessage = errorData.message || errorData.error || errorMessage;\n          } catch {\n            errorMessage = match[1] || errorMessage;\n          }\n        }\n      }\n      \n      // Add retry information if applicable\n      const currentRetries = context?.failureCount || 0;\n      if (currentRetries > 0) {\n        errorMessage += ` (after ${currentRetries} retry${currentRetries === 1 ? '' : 'ies'})`;\n      }\n      \n      // Call the error callback\n      onExtractionComplete({\n        success: false,\n        error: errorMessage\n      });\n    }\n  });\n\n  // Trigger extraction when file changes\n  useEffect(() => {\n    if (file) {\n      console.log('[GEMINI BILL EXTRACTOR] Starting extraction for file:', file.name);\n      \n      // Notify parent that extraction is starting\n      onExtractionComplete({\n        success: false,\n        isLoading: true\n      });\n      \n      extractionMutation.mutate(file);\n    }\n  }, [file]);\n\n  // This component doesn't render anything - it's purely functional\n  return null;\n}\n\n/**\n * Convert AI response to form data format suitable for bill forms\n * Maps AI-extracted fields to the expected form structure\n */\nfunction convertBillResponseToFormData(aiData: any) {\n  try {\n    console.log('[GEMINI BILL EXTRACTOR] Raw AI data for conversion:', aiData);\n    \n    // Handle null or undefined data gracefully\n    if (!aiData || typeof aiData !== 'object') {\n      console.warn('[GEMINI BILL EXTRACTOR] AI data is null or invalid:', aiData);\n      return {};\n    }\n    \n    // Map AI response to bill form fields with more robust null checking\n    const formData = {\n      title: aiData.description || aiData.vendorName || 'Extracted Bill',\n      vendor: aiData.vendorName || '',\n      totalAmount: (aiData.totalAmount !== null && aiData.totalAmount !== undefined) ? aiData.totalAmount.toString() : '',\n      category: aiData.category || mapVendorToCategory(aiData.vendorName),\n      paymentType: mapPaymentType(aiData.paymentType),\n      description: aiData.description || (aiData.vendorName ? `Bill from ${aiData.vendorName}` : 'Extracted bill'),\n      startDate: aiData.dueDate || aiData.startDate || '',\n      endDate: aiData.endDate || '',\n      schedulePayment: mapFrequencyToSchedule(aiData.frequency),\n      customPayments: aiData.customPaymentDates?.map((date: string, index: number) => ({\n        amount: (aiData.totalAmount || 0).toString(),\n        date: date,\n        description: `Payment ${index + 1}`\n      })) || []\n    };\n\n    console.log('[GEMINI BILL EXTRACTOR] Converted form data:', formData);\n    return formData;\n  } catch (error) {\n    console.error('[GEMINI BILL EXTRACTOR] Error converting AI response:', error);\n    return {};\n  }\n}\n\n/**\n * Map vendor name to appropriate bill category\n */\nfunction mapVendorToCategory(vendorName: string): string {\n  if (!vendorName) return 'other';\n  \n  const vendor = vendorName.toLowerCase();\n  \n  if (vendor.includes('hydro') || vendor.includes('electric') || vendor.includes('energy')) {\n    return 'utilities';\n  } else if (vendor.includes('gas') || vendor.includes('natural gas')) {\n    return 'utilities';\n  } else if (vendor.includes('water') || vendor.includes('aqua')) {\n    return 'utilities';\n  } else if (vendor.includes('insurance')) {\n    return 'insurance';\n  } else if (vendor.includes('security') || vendor.includes('alarm')) {\n    return 'security';\n  } else if (vendor.includes('clean') || vendor.includes('janitor')) {\n    return 'cleaning';\n  } else if (vendor.includes('lawn') || vendor.includes('garden') || vendor.includes('landscape')) {\n    return 'landscaping';\n  } else if (vendor.includes('repair') || vendor.includes('fix')) {\n    return 'repairs';\n  } else if (vendor.includes('maintenance')) {\n    return 'maintenance';\n  } else if (vendor.includes('professional') || vendor.includes('consulting')) {\n    return 'professional_services';\n  } else if (vendor.includes('supplies') || vendor.includes('material')) {\n    return 'supplies';\n  } else if (vendor.includes('tax') || vendor.includes('government')) {\n    return 'taxes';\n  } else if (vendor.includes('technology') || vendor.includes('software') || vendor.includes('internet')) {\n    return 'technology';\n  }\n  \n  return 'other';\n}\n\n/**\n * Map AI payment type to form payment type\n */\nfunction mapPaymentType(aiPaymentType: string): string {\n  if (!aiPaymentType) return 'unique';\n  \n  const type = aiPaymentType.toLowerCase();\n  if (type.includes('recurring') || type.includes('repeat')) {\n    return 'recurrent';\n  }\n  \n  return 'unique';\n}\n\n/**\n * Map AI frequency to form schedule payment\n */\nfunction mapFrequencyToSchedule(frequency: string): string {\n  if (!frequency) return 'monthly';\n  \n  const freq = frequency.toLowerCase();\n  \n  if (freq.includes('month')) return 'monthly';\n  if (freq.includes('quarter')) return 'quarterly';\n  if (freq.includes('year') || freq.includes('annual')) return 'yearly';\n  if (freq.includes('week')) return 'weekly';\n  if (freq.includes('custom')) return 'custom';\n  \n  return 'monthly';\n}"],"version":3}