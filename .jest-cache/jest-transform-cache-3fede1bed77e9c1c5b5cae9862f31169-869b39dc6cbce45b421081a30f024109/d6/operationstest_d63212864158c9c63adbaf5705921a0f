dc06e8e41a36d363fdebd674ea065850
"use strict";
/**
 * @file Operations Schemas for Testing
 * @description Test-only version of operations schemas without any ORM dependencies
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertDemandCommentSchema = exports.insertDemandSchema = exports.demandStatusEnum = exports.demandTypeEnum = void 0;
const zod_1 = require("zod");
// Simple enum values for testing (no Drizzle ORM dependencies)
const demandTypeValues = ['maintenance', 'complaint', 'information', 'other'];
const demandStatusValues = [
    'draft',
    'submitted',
    'under_review',
    'approved',
    'in_progress',
    'completed',
    'rejected',
    'cancelled',
];
// Create enum objects with enumValues property for test compatibility
exports.demandTypeEnum = Object.assign(zod_1.z.enum(demandTypeValues), { enumValues: demandTypeValues });
exports.demandStatusEnum = Object.assign(zod_1.z.enum(demandStatusValues), { enumValues: demandStatusValues });
// Zod schemas for validation (what the tests actually need)
exports.insertDemandSchema = zod_1.z.object({
    submitterId: zod_1.z.string().uuid(),
    type: zod_1.z.enum(['maintenance', 'complaint', 'information', 'other']),
    assignationResidenceId: zod_1.z.string().uuid().optional(),
    assignationBuildingId: zod_1.z.string().uuid().optional(),
    description: zod_1.z
        .string()
        .min(10, 'Description must be at least 10 characters')
        .max(2000, 'Description must not exceed 2000 characters'),
    filePath: zod_1.z.string().optional(),
    fileName: zod_1.z.string().optional(),
    fileSize: zod_1.z.number().int().optional(),
    residenceId: zod_1.z.string().uuid().optional(),
    buildingId: zod_1.z.string().uuid().optional(),
    status: zod_1.z.string().default('submitted'),
    reviewNotes: zod_1.z.string().optional(),
});
exports.insertDemandCommentSchema = zod_1.z.object({
    demandId: zod_1.z.string().uuid(),
    commenterId: zod_1.z.string().uuid(),
    commentText: zod_1.z
        .string()
        .min(1, 'Comment content is required')
        .max(1000, 'Comment must not exceed 1000 characters'),
    commentType: zod_1.z.string().optional(),
    isInternal: zod_1.z.boolean().default(false),
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zaGFyZWQvc2NoZW1hcy9vcGVyYXRpb25zLXRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsNkJBQXdCO0FBRXhCLCtEQUErRDtBQUMvRCxNQUFNLGdCQUFnQixHQUFHLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFVLENBQUM7QUFDdkYsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixPQUFPO0lBQ1AsV0FBVztJQUNYLGNBQWM7SUFDZCxVQUFVO0lBQ1YsYUFBYTtJQUNiLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztDQUNILENBQUM7QUFFWCxzRUFBc0U7QUFDekQsUUFBQSxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDekMsT0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUN4QixFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxDQUNqQyxDQUFDO0FBRVcsUUFBQSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUMzQyxPQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQzFCLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLENBQ25DLENBQUM7QUFFRiw0REFBNEQ7QUFDL0MsUUFBQSxrQkFBa0IsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3pDLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFO0lBQzlCLElBQUksRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEUsc0JBQXNCLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNwRCxxQkFBcUIsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ25ELFdBQVcsRUFBRSxPQUFDO1NBQ1gsTUFBTSxFQUFFO1NBQ1IsR0FBRyxDQUFDLEVBQUUsRUFBRSw0Q0FBNEMsQ0FBQztTQUNyRCxHQUFHLENBQUMsSUFBSSxFQUFFLDZDQUE2QyxDQUFDO0lBQzNELFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQy9CLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQy9CLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3JDLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3pDLFVBQVUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ3hDLE1BQU0sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUN2QyxXQUFXLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUNuQyxDQUFDLENBQUM7QUFFVSxRQUFBLHlCQUF5QixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDaEQsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUU7SUFDM0IsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUU7SUFDOUIsV0FBVyxFQUFFLE9BQUM7U0FDWCxNQUFNLEVBQUU7U0FDUixHQUFHLENBQUMsQ0FBQyxFQUFFLDZCQUE2QixDQUFDO1NBQ3JDLEdBQUcsQ0FBQyxJQUFJLEVBQUUseUNBQXlDLENBQUM7SUFDdkQsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDbEMsVUFBVSxFQUFFLE9BQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0NBQ3ZDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NoYXJlZC9zY2hlbWFzL29wZXJhdGlvbnMtdGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE9wZXJhdGlvbnMgU2NoZW1hcyBmb3IgVGVzdGluZ1xuICogQGRlc2NyaXB0aW9uIFRlc3Qtb25seSB2ZXJzaW9uIG9mIG9wZXJhdGlvbnMgc2NoZW1hcyB3aXRob3V0IGFueSBPUk0gZGVwZW5kZW5jaWVzXG4gKi9cblxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8vIFNpbXBsZSBlbnVtIHZhbHVlcyBmb3IgdGVzdGluZyAobm8gRHJpenpsZSBPUk0gZGVwZW5kZW5jaWVzKVxuY29uc3QgZGVtYW5kVHlwZVZhbHVlcyA9IFsnbWFpbnRlbmFuY2UnLCAnY29tcGxhaW50JywgJ2luZm9ybWF0aW9uJywgJ290aGVyJ10gYXMgY29uc3Q7XG5jb25zdCBkZW1hbmRTdGF0dXNWYWx1ZXMgPSBbXG4gICdkcmFmdCcsXG4gICdzdWJtaXR0ZWQnLCBcbiAgJ3VuZGVyX3JldmlldycsXG4gICdhcHByb3ZlZCcsXG4gICdpbl9wcm9ncmVzcycsXG4gICdjb21wbGV0ZWQnLFxuICAncmVqZWN0ZWQnLFxuICAnY2FuY2VsbGVkJyxcbl0gYXMgY29uc3Q7XG5cbi8vIENyZWF0ZSBlbnVtIG9iamVjdHMgd2l0aCBlbnVtVmFsdWVzIHByb3BlcnR5IGZvciB0ZXN0IGNvbXBhdGliaWxpdHlcbmV4cG9ydCBjb25zdCBkZW1hbmRUeXBlRW51bSA9IE9iamVjdC5hc3NpZ24oXG4gIHouZW51bShkZW1hbmRUeXBlVmFsdWVzKSxcbiAgeyBlbnVtVmFsdWVzOiBkZW1hbmRUeXBlVmFsdWVzIH1cbik7XG5cbmV4cG9ydCBjb25zdCBkZW1hbmRTdGF0dXNFbnVtID0gT2JqZWN0LmFzc2lnbihcbiAgei5lbnVtKGRlbWFuZFN0YXR1c1ZhbHVlcyksXG4gIHsgZW51bVZhbHVlczogZGVtYW5kU3RhdHVzVmFsdWVzIH1cbik7XG5cbi8vIFpvZCBzY2hlbWFzIGZvciB2YWxpZGF0aW9uICh3aGF0IHRoZSB0ZXN0cyBhY3R1YWxseSBuZWVkKVxuZXhwb3J0IGNvbnN0IGluc2VydERlbWFuZFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgc3VibWl0dGVySWQ6IHouc3RyaW5nKCkudXVpZCgpLFxuICB0eXBlOiB6LmVudW0oWydtYWludGVuYW5jZScsICdjb21wbGFpbnQnLCAnaW5mb3JtYXRpb24nLCAnb3RoZXInXSksXG4gIGFzc2lnbmF0aW9uUmVzaWRlbmNlSWQ6IHouc3RyaW5nKCkudXVpZCgpLm9wdGlvbmFsKCksXG4gIGFzc2lnbmF0aW9uQnVpbGRpbmdJZDogei5zdHJpbmcoKS51dWlkKCkub3B0aW9uYWwoKSxcbiAgZGVzY3JpcHRpb246IHpcbiAgICAuc3RyaW5nKClcbiAgICAubWluKDEwLCAnRGVzY3JpcHRpb24gbXVzdCBiZSBhdCBsZWFzdCAxMCBjaGFyYWN0ZXJzJylcbiAgICAubWF4KDIwMDAsICdEZXNjcmlwdGlvbiBtdXN0IG5vdCBleGNlZWQgMjAwMCBjaGFyYWN0ZXJzJyksXG4gIGZpbGVQYXRoOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGZpbGVOYW1lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGZpbGVTaXplOiB6Lm51bWJlcigpLmludCgpLm9wdGlvbmFsKCksXG4gIHJlc2lkZW5jZUlkOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICBidWlsZGluZ0lkOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICBzdGF0dXM6IHouc3RyaW5nKCkuZGVmYXVsdCgnc3VibWl0dGVkJyksXG4gIHJldmlld05vdGVzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IGluc2VydERlbWFuZENvbW1lbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGRlbWFuZElkOiB6LnN0cmluZygpLnV1aWQoKSxcbiAgY29tbWVudGVySWQ6IHouc3RyaW5nKCkudXVpZCgpLFxuICBjb21tZW50VGV4dDogelxuICAgIC5zdHJpbmcoKVxuICAgIC5taW4oMSwgJ0NvbW1lbnQgY29udGVudCBpcyByZXF1aXJlZCcpXG4gICAgLm1heCgxMDAwLCAnQ29tbWVudCBtdXN0IG5vdCBleGNlZWQgMTAwMCBjaGFyYWN0ZXJzJyksXG4gIGNvbW1lbnRUeXBlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGlzSW50ZXJuYWw6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxufSk7XG5cbi8vIFR5cGUgZXhwb3J0c1xuZXhwb3J0IHR5cGUgSW5zZXJ0RGVtYW5kID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0RGVtYW5kU2NoZW1hPjtcbmV4cG9ydCB0eXBlIEluc2VydERlbWFuZENvbW1lbnQgPSB6LmluZmVyPHR5cGVvZiBpbnNlcnREZW1hbmRDb21tZW50U2NoZW1hPjsiXSwidmVyc2lvbiI6M30=