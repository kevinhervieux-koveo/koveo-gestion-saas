{"file":"/home/runner/workspace/tests/unit/demands/demand-comment-schema.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/demands/demand-comment-schema.test.ts"],"sourcesContent":["/**\n * @file Demand Comment Schema Unit Tests\n * @description Comprehensive tests for demand comment validation schemas and business logic\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport { insertDemandCommentSchema } from '../../../shared/schemas/operations';\n\ndescribe('Demand Comment Schema Validation Tests', () => {\n  describe('insertDemandCommentSchema', () => {\n    it('should accept valid comment data', () => {\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'This is a valid comment on the demand.',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should require demandId field', () => {\n      const invalidComment = {\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Comment without demand ID',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should require commenterId field', () => {\n      const invalidComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commentText: 'Comment without commenter ID',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should require commentText field', () => {\n      const invalidComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should validate UUID format for demandId', () => {\n      const invalidComment = {\n        demandId: 'invalid-uuid',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Valid comment text',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should validate UUID format for commenterId', () => {\n      const invalidComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: 'invalid-uuid',\n        commentText: 'Valid comment text',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should reject empty comment text', () => {\n      const invalidComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: '',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should accept minimum length comment text', () => {\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'A',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should accept maximum length comment text', () => {\n      const longText = 'A'.repeat(1000);\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: longText,\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should reject comment text exceeding maximum length', () => {\n      const tooLongText = 'A'.repeat(1001);\n      const invalidComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: tooLongText,\n      };\n\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should accept optional commentType field', () => {\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Comment with type',\n        commentType: 'update',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should accept optional isInternal field', () => {\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Internal comment',\n        isInternal: true,\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should default isInternal to false when not provided', () => {\n      const comment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Public comment',\n      };\n\n      const parsed = insertDemandCommentSchema.parse(comment);\n      expect(parsed.isInternal).toBe(false);\n    });\n\n    it('should handle French characters in comment text', () => {\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Réparation nécessaire avec caractères spéciaux: éàùç!',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should handle emojis and special characters', () => {\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Great work! 👍 Thanks for fixing this issue @#$%^&*()',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should handle multiline comment text', () => {\n      const multilineComment = `This is a multiline comment.\n      \n      It contains multiple paragraphs and should be accepted.\n      \n      End of comment.`;\n\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: multilineComment,\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should validate complete comment with all optional fields', () => {\n      const completeComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Complete comment with all fields',\n        commentType: 'status_update',\n        isInternal: false,\n      };\n\n      const parsed = insertDemandCommentSchema.parse(completeComment);\n      expect(parsed.demandId).toBe(completeComment.demandId);\n      expect(parsed.commenterId).toBe(completeComment.commenterId);\n      expect(parsed.commentText).toBe(completeComment.commentText);\n      expect(parsed.commentType).toBe(completeComment.commentType);\n      expect(parsed.isInternal).toBe(completeComment.isInternal);\n    });\n\n    it('should handle whitespace in comment text', () => {\n      const commentWithWhitespace = '   This comment has leading and trailing spaces   ';\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: commentWithWhitespace,\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n\n    it('should reject whitespace-only comment text', () => {\n      const whitespaceOnlyComment = '   \\n\\t   \\r\\n   ';\n      const invalidComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: whitespaceOnlyComment,\n      };\n\n      // This should be rejected because after trimming it becomes empty\n      expect(() => insertDemandCommentSchema.parse(invalidComment)).toThrow();\n    });\n\n    it('should validate different comment types', () => {\n      const commentTypes = ['update', 'question', 'answer', 'status_change', 'internal_note'];\n      \n      commentTypes.forEach(type => {\n        const validComment = {\n          demandId: '123e4567-e89b-12d3-a456-426614174000',\n          commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n          commentText: `Comment of type ${type}`,\n          commentType: type,\n        };\n\n        expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n      });\n    });\n\n    it('should handle edge cases for boolean isInternal field', () => {\n      const testCases = [\n        { isInternal: true, expected: true },\n        { isInternal: false, expected: false },\n        { isInternal: 'true', expected: true }, // String coercion\n        { isInternal: 'false', expected: false }, // String coercion\n        { isInternal: 1, expected: true }, // Number coercion\n        { isInternal: 0, expected: false }, // Number coercion\n      ];\n\n      testCases.forEach(({ isInternal, expected }) => {\n        const comment = {\n          demandId: '123e4567-e89b-12d3-a456-426614174000',\n          commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n          commentText: 'Test comment',\n          isInternal,\n        };\n\n        try {\n          const parsed = insertDemandCommentSchema.parse(comment);\n          expect(parsed.isInternal).toBe(expected);\n        } catch (error) {\n          // Some coercions might not be supported by Zod, that's acceptable\n        }\n      });\n    });\n\n    it('should preserve comment text exactly as provided', () => {\n      const originalText = 'This comment has \"quotes\" and \\'apostrophes\\' and $pecial characters!';\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: originalText,\n      };\n\n      const parsed = insertDemandCommentSchema.parse(validComment);\n      expect(parsed.commentText).toBe(originalText);\n    });\n\n    it('should handle very long comment type strings', () => {\n      const longCommentType = 'very_long_comment_type_name_that_might_be_used_in_some_cases';\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Comment with long type',\n        commentType: longCommentType,\n      };\n\n      expect(() => insertDemandCommentSchema.parse(validComment)).not.toThrow();\n    });\n  });\n\n  describe('Comment Business Logic Validation', () => {\n    it('should validate that demandId corresponds to existing demand', () => {\n      // This would typically be handled at the database/API level, but we can test the schema validation\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Comment for existing demand',\n      };\n\n      const parsed = insertDemandCommentSchema.parse(validComment);\n      expect(parsed.demandId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);\n    });\n\n    it('should validate that commenterId corresponds to authenticated user', () => {\n      // Schema validation for user ID format\n      const validComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Comment from authenticated user',\n      };\n\n      const parsed = insertDemandCommentSchema.parse(validComment);\n      expect(parsed.commenterId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);\n    });\n\n    it('should handle comments with Quebec-specific formatting requirements', () => {\n      const quebecComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Commentaire en français avec numéro de téléphone (514) 555-1234 et code postal H3H 2Y7',\n      };\n\n      expect(() => insertDemandCommentSchema.parse(quebecComment)).not.toThrow();\n    });\n\n    it('should validate internal vs external comment permissions', () => {\n      // Test both internal and external comments\n      const externalComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'External comment visible to all',\n        isInternal: false,\n      };\n\n      const internalComment = {\n        demandId: '123e4567-e89b-12d3-a456-426614174000',\n        commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n        commentText: 'Internal comment for staff only',\n        isInternal: true,\n      };\n\n      expect(() => insertDemandCommentSchema.parse(externalComment)).not.toThrow();\n      expect(() => insertDemandCommentSchema.parse(internalComment)).not.toThrow();\n    });\n  });\n\n  describe('Comment Error Message Quality', () => {\n    it('should provide helpful error messages for validation failures', () => {\n      const testCases = [\n        {\n          data: { commentText: 'Missing required fields' },\n          expectedErrorField: 'demandId',\n        },\n        {\n          data: {\n            demandId: 'invalid-uuid',\n            commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n            commentText: 'Valid text',\n          },\n          expectedErrorField: 'demandId',\n        },\n        {\n          data: {\n            demandId: '123e4567-e89b-12d3-a456-426614174000',\n            commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n            commentText: '',\n          },\n          expectedErrorField: 'commentText',\n        },\n        {\n          data: {\n            demandId: '123e4567-e89b-12d3-a456-426614174000',\n            commenterId: '987fcdeb-51a2-43d1-9f32-123456789abc',\n            commentText: 'A'.repeat(1001),\n          },\n          expectedErrorField: 'commentText',\n        },\n      ];\n\n      testCases.forEach(({ data, expectedErrorField }) => {\n        try {\n          insertDemandCommentSchema.parse(data);\n          fail('Expected validation to fail');\n        } catch (error: any) {\n          expect(error.errors).toBeDefined();\n          expect(error.errors.some((err: any) => err.path.includes(expectedErrorField))).toBe(true);\n        }\n      });\n    });\n  });\n});"],"version":3}