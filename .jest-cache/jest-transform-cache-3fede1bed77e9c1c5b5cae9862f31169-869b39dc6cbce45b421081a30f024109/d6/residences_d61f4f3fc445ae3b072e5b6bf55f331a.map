{"version":3,"names":["cov_bfdkj9w4f","actualCoverage","s","exports","default","Residences","react_1","require","react_query_1","wouter_1","header_1","card_1","button_1","badge_1","input_1","select_1","skeleton_1","dialog_1","lucide_react_1","use_language_1","residence_edit_form_1","f","navigate","useLocation","t","useLanguage","searchTerm","setSearchTerm","useState","selectedBuilding","setSelectedBuilding","selectedFloor","setSelectedFloor","editingResidence","setEditingResidence","currentPage","setCurrentPage","itemsPerPage","useEffect","urlParams","URLSearchParams","window","location","search","buildingIdFromUrl","get","b","data","residences","isLoading","residencesLoading","refetch","useQuery","queryKey","queryFn","params","append","response","fetch","ok","Error","json","buildingsData","buildings","allResidences","availableFloors","Set","map","r","floor","filter","sort","a","handleBuildingChange","value","handleFloorChange","handleSearchChange","totalItems","length","totalPages","Math","ceil","startIndex","endIndex","currentResidences","slice","jsx_runtime_1","jsxs","className","children","jsx","Header","title","subtitle","Card","CardHeader","CardTitle","Search","CardContent","Input","placeholder","onChange","e","target","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","building","id","name","toString","Array","from","_","i","Skeleton","Home","residence","unitNumber","Building","MapPin","Badge","variant","isActive","Bed","bedrooms","Bath","bathrooms","squareFootage","parkingSpaceNumbers","Car","join","storageSpaceNumbers","Package","monthlyFees","Users","tenants","tenant","firstName","lastName","Button","size","onClick","FileText","Dialog","DialogTrigger","asChild","Edit","DialogContent","DialogHeader","DialogTitle","ResidenceEditForm","onSuccess","prev","max","disabled","type","min","page","parseInt","onBlur","isNaN"],"sources":["/home/runner/workspace/client/src/pages/manager/residences.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Header } from '@/components/layout/header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Home,\n  Search,\n  Edit,\n  Users,\n  Building,\n  MapPin,\n  Car,\n  Package,\n  Bed,\n  Bath,\n  FileText,\n} from 'lucide-react';\nimport { useLanguage } from '@/hooks/use-language';\nimport { ResidenceEditForm } from '@/components/forms/residence-edit-form';\n\n/**\n *\n */\ninterface Residence {\n  id: string;\n  unitNumber: string;\n  floor: number;\n  squareFootage: string;\n  bedrooms: number;\n  bathrooms: string;\n  balcony: boolean;\n  parkingSpaceNumbers: string[];\n  storageSpaceNumbers: string[];\n  ownershipPercentage: string;\n  monthlyFees: string;\n  isActive: boolean;\n  building: {\n    id: string;\n    name: string;\n    address: string;\n    city: string;\n  };\n  organization: {\n    id: string;\n    name: string;\n  };\n  tenants: Array<{\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  }>;\n}\n\n/**\n *\n */\ninterface Building {\n  id: string;\n  name: string;\n  totalFloors: number;\n}\n\n/**\n *\n */\nexport default function /**\n * Residences function.\n */ /**\n * Residences function.\n */\n\nResidences() {\n  const [, navigate] = useLocation();\n  const { t } = useLanguage();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedBuilding, setSelectedBuilding] = useState<string>('all');\n  const [selectedFloor, setSelectedFloor] = useState<string>('all');\n  const [editingResidence, setEditingResidence] = useState<Residence | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Check for URL parameters and set building filter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const buildingIdFromUrl = urlParams.get('buildingId');\n    if (buildingIdFromUrl && buildingIdFromUrl !== selectedBuilding) {\n      setSelectedBuilding(buildingIdFromUrl);\n    }\n  }, [selectedBuilding]);\n\n  // Fetch residences with search and filters\n  const {\n    data: residences,\n    isLoading: residencesLoading,\n    refetch,\n  } = useQuery({\n    queryKey: ['/api/residences', searchTerm, selectedBuilding, selectedFloor],\n    queryFn: async () => {\n      const params = new URLSearchParams(); /**\n       * If function.\n       * @param searchTerm - SearchTerm parameter.\n       */ /**\n       * If function.\n       * @param searchTerm - SearchTerm parameter.\n       */\n\n      if (searchTerm) {\n        params.append('search', searchTerm);\n      } /**\n       * If function.\n       * @param selectedBuilding && selectedBuilding !== 'all' - selectedBuilding && selectedBuilding !== 'all' parameter.\n       */ /**\n       * If function.\n       * @param selectedBuilding && selectedBuilding !== 'all' - selectedBuilding && selectedBuilding !== 'all' parameter.\n       */\n\n      if (selectedBuilding && selectedBuilding !== 'all') {\n        params.append('buildingId', selectedBuilding);\n      } /**\n       * If function.\n       * @param selectedFloor && selectedFloor !== 'all' - selectedFloor && selectedFloor !== 'all' parameter.\n       */ /**\n       * If function.\n       * @param selectedFloor && selectedFloor !== 'all' - selectedFloor && selectedFloor !== 'all' parameter.\n       */\n\n      if (selectedFloor && selectedFloor !== 'all') {\n        params.append('floor', selectedFloor);\n      }\n\n      const response = await fetch(`/api/residences?${params}`); /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */ /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch residences');\n      }\n      return response.json() as Promise<Residence[]>;\n    },\n  });\n\n  // Fetch buildings for filter dropdown - use manager endpoint for proper permissions\n  const { data: buildingsData } = useQuery({\n    queryKey: ['/api/manager/buildings'],\n    queryFn: async () => {\n      const response = await fetch('/api/manager/buildings');\n      if (!response.ok) {\n        throw new Error('Failed to fetch buildings');\n      }\n      return response.json();\n    },\n  });\n\n  // Extract buildings array from the response\n  const buildings = buildingsData?.buildings || [];\n\n  // Fetch all residences to get complete floor list for filter (without search/filter params)\n  const { data: allResidences } = useQuery({\n    queryKey: ['/api/residences/all'],\n    queryFn: async () => {\n      const response = await fetch('/api/residences');\n      if (!response.ok) {\n        throw new Error('Failed to fetch all residences');\n      }\n      return response.json() as Promise<Residence[]>;\n    },\n  });\n\n  // Get unique floors from all residences for filter dropdown\n  const availableFloors = allResidences\n    ? [...new Set(allResidences.map((r) => r.floor).filter((floor) => floor != null))].sort(\n        (a, b) => a - b\n      )\n    : [];\n\n  // Reset page when filters change\n  const handleBuildingChange = (value: string) => {\n    setSelectedBuilding(value);\n    setCurrentPage(1);\n  };\n\n  const handleFloorChange = (value: string) => {\n    setSelectedFloor(value);\n    setCurrentPage(1);\n  };\n\n  const handleSearchChange = (value: string) => {\n    setSearchTerm(value);\n    setCurrentPage(1);\n  };\n\n  // Pagination calculations\n  const totalItems = residences?.length || 0;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentResidences = residences?.slice(startIndex, endIndex) || [];\n\n  return (\n    <div className='flex-1 flex flex-col overflow-hidden'>\n      <Header title={t('residencesManagement')} subtitle={t('manageResidences')} />\n\n      <div className='flex-1 overflow-auto p-6'>\n        <div className='max-w-7xl mx-auto space-y-6'>\n          {/* Search and Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center gap-2'>\n                <Search className='w-5 h-5' />\n                {t('searchFilters')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>{t('searchResidences')}</label>\n                  <Input\n                    placeholder={t('searchUnitTenant')}\n                    value={searchTerm}\n                    onChange={(e) => handleSearchChange(e.target.value)}\n                    className='w-full'\n                  />\n                </div>\n\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>{t('buildingFilter')}</label>\n                  <Select value={selectedBuilding} onValueChange={handleBuildingChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('allBuildings')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value='all'>{t('allBuildings')}</SelectItem>\n                      {buildings?.map((building: any) => (\n                        <SelectItem key={building.id} value={building.id}>\n                          {building.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>{t('floorFilter')}</label>\n                  <Select value={selectedFloor} onValueChange={handleFloorChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('allFloors')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value='all'>{t('allFloors')}</SelectItem>\n                      {availableFloors.map((floor) => (\n                        <SelectItem key={floor} value={floor.toString()}>\n                          {t('floor')} {floor}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Residences Grid */}\n          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>\n            {residencesLoading ? (\n              // Loading skeletons\n              Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i}>\n                  <CardContent className='p-6'>\n                    <Skeleton className='h-6 w-24 mb-4' />\n                    <Skeleton className='h-4 w-full mb-2' />\n                    <Skeleton className='h-4 w-3/4 mb-4' />\n                    <div className='grid grid-cols-2 gap-2'>\n                      <Skeleton className='h-8 w-full' />\n                      <Skeleton className='h-8 w-full' />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : totalItems === 0 ? (\n              <Card className='col-span-full'>\n                <CardContent className='p-8 text-center'>\n                  <Home className='w-16 h-16 mx-auto text-gray-400 mb-4' />\n                  <h3 className='text-lg font-semibold text-gray-600 mb-2'>{t('noResidencesFound')}</h3>\n                  <p className='text-gray-500'>{t('adjustSearchCriteria')}</p>\n                </CardContent>\n              </Card>\n            ) : (\n              currentResidences.map((residence) => (\n                <Card key={residence.id} className='hover:shadow-lg transition-shadow'>\n                  <CardContent className='p-6'>\n                    <div className='flex justify-between items-start mb-4'>\n                      <div>\n                        <h3 className='font-semibold text-lg flex items-center gap-2'>\n                          <Home className='w-4 h-4' />\n                          {t('unitNumber')} {residence.unitNumber}\n                        </h3>\n                        <p className='text-sm text-gray-600 flex items-center gap-1'>\n                          <Building className='w-3 h-3' />\n                          {residence.building.name}\n                        </p>\n                        <p className='text-xs text-gray-500 flex items-center gap-1'>\n                          <MapPin className='w-3 h-3' />\n                          {t('floor')} {residence.floor || 'N/A'}\n                        </p>\n                      </div>\n                      <Badge variant={residence.isActive ? 'default' : 'secondary'}>\n                        {residence.isActive ? t('active') : t('inactive')}\n                      </Badge>\n                    </div>\n\n                    {/* Unit Details */}\n                    <div className='space-y-2 mb-4'>\n                      <div className='flex items-center gap-4 text-sm'>\n                        <span className='flex items-center gap-1'>\n                          <Bed className='w-3 h-3' />\n                          {residence.bedrooms || 0} {t('bed')}\n                        </span>\n                        <span className='flex items-center gap-1'>\n                          <Bath className='w-3 h-3' />\n                          {residence.bathrooms || 0} {t('bath')}\n                        </span>\n                      </div>\n\n                      {residence.squareFootage && (\n                        <p className='text-sm text-gray-600'>{residence.squareFootage} {t('sqFt')}</p>\n                      )}\n\n                      {residence.parkingSpaceNumbers?.length > 0 && (\n                        <p className='text-sm text-gray-600 flex items-center gap-1'>\n                          <Car className='w-3 h-3' />\n                          {t('parking')}: {residence.parkingSpaceNumbers.join(', ')}\n                        </p>\n                      )}\n\n                      {residence.storageSpaceNumbers?.length > 0 && (\n                        <p className='text-sm text-gray-600 flex items-center gap-1'>\n                          <Package className='w-3 h-3' />\n                          {t('storage')}: {residence.storageSpaceNumbers.join(', ')}\n                        </p>\n                      )}\n\n                      {residence.monthlyFees && (\n                        <p className='text-sm font-medium text-green-600'>\n                          ${residence.monthlyFees}/{t('monthShort')}\n                        </p>\n                      )}\n                    </div>\n\n                    {/* Tenants */}\n                    <div className='mb-4'>\n                      <h4 className='text-sm font-medium mb-2 flex items-center gap-1'>\n                        <Users className='w-3 h-3' />\n                        {t('residents')} ({residence.tenants.length})\n                      </h4>\n                      {residence.tenants.length === 0 ? (\n                        <p className='text-xs text-gray-500'>{t('noResidentsAssigned')}</p>\n                      ) : (\n                        <div className='space-y-1'>\n                          {residence.tenants.slice(0, 2).map((tenant) => (\n                            <p key={tenant.id} className='text-xs text-gray-600'>\n                              {tenant.firstName} {tenant.lastName}\n                            </p>\n                          ))}\n                          {residence.tenants.length > 2 && (\n                            <p className='text-xs text-gray-500'>\n                              +{residence.tenants.length - 2} {t('moreResidents')}\n                            </p>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className='flex gap-2'>\n                      <Button\n                        variant='outline'\n                        size='sm'\n                        className='flex-1'\n                        onClick={() =>\n                          navigate(`/manager/residences/documents?residenceId=${residence.id}`)\n                        }\n                        title={t('manageResidenceDocuments')}\n                      >\n                        <FileText className='w-3 h-3 mr-1' />\n                        {t('residenceDocumentsButton')}\n                      </Button>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant='outline'\n                            size='sm'\n                            className='flex-1'\n                            onClick={() => setEditingResidence(residence)}\n                          >\n                            <Edit className='w-3 h-3 mr-1' />\n                            Edit\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className='max-w-2xl max-h-[90vh] overflow-y-auto'>\n                          <DialogHeader>\n                            <DialogTitle>Edit Unit {residence.unitNumber}</DialogTitle>\n                          </DialogHeader>\n                          {editingResidence && (\n                            <ResidenceEditForm\n                              residence={editingResidence}\n                              onSuccess={() => {\n                                refetch();\n                                setEditingResidence(null);\n                              }}\n                            />\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n\n          {/* Pagination Controls */}\n          {totalPages > 1 && (\n            <div className='flex justify-center items-center gap-4 mt-6'>\n              <Button\n                variant='outline'\n                size='sm'\n                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\n                disabled={currentPage === 1}\n              >\n                Previous\n              </Button>\n\n              <div className='flex items-center gap-2'>\n                <span className='text-sm text-gray-600'>Page</span>\n                <Input\n                  type='number'\n                  min='1'\n                  max={totalPages}\n                  value={currentPage}\n                  onChange={(e) => {\n                    const page = parseInt(e.target.value);\n                    if (page >= 1 && page <= totalPages) {\n                      setCurrentPage(page);\n                    }\n                  }}\n                  onBlur={(e) => {\n                    const page = parseInt(e.target.value);\n                    if (isNaN(page) || page < 1) {\n                      setCurrentPage(1);\n                    } else if (page > totalPages) {\n                      setCurrentPage(totalPages);\n                    }\n                  }}\n                  className='w-16 text-center'\n                />\n                <span className='text-sm text-gray-600'>of {totalPages}</span>\n              </div>\n\n              <Button\n                variant='outline'\n                size='sm'\n                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}\n                disabled={currentPage === totalPages}\n              >\n                Next\n              </Button>\n\n              <div className='text-sm text-gray-600'>\n                Showing {startIndex + 1}-{Math.min(endIndex, totalItems)} of {totalItems} residences\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappingsuBA;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;AA8DAC,OAAA,CAAAC,OAAA,GAAAC,UAAA;;;;AArFA,MAAAC,OAAA;AAAA;AAAA,CAAAN,aAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAC,aAAA;AAAA;AAAA,CAAAR,aAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAE,QAAA;AAAA;AAAA,CAAAT,aAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAG,QAAA;AAAA;AAAA,CAAAV,aAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAI,MAAA;AAAA;AAAA,CAAAX,aAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAK,QAAA;AAAA;AAAA,CAAAZ,aAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAM,OAAA;AAAA;AAAA,CAAAb,aAAA,GAAAE,CAAA,OAAAK,OAAA;AACA,MAAAO,OAAA;AAAA;AAAA,CAAAd,aAAA,GAAAE,CAAA,QAAAK,OAAA;AACA,MAAAQ,QAAA;AAAA;AAAA,CAAAf,aAAA,GAAAE,CAAA,QAAAK,OAAA;AAOA,MAAAS,UAAA;AAAA;AAAA,CAAAhB,aAAA,GAAAE,CAAA,QAAAK,OAAA;AACA,MAAAU,QAAA;AAAA;AAAA,CAAAjB,aAAA,GAAAE,CAAA,QAAAK,OAAA;AAOA,MAAAW,cAAA;AAAA;AAAA,CAAAlB,aAAA,GAAAE,CAAA,QAAAK,OAAA;AAaA,MAAAY,cAAA;AAAA;AAAA,CAAAnB,aAAA,GAAAE,CAAA,QAAAK,OAAA;AACA,MAAAa,qBAAA;AAAA;AAAA,CAAApB,aAAA,GAAAE,CAAA,QAAAK,OAAA;AA6CA;;;AAGA,SAMAF,UAAUA,CAAA;EAAA;EAAAL,aAAA,GAAAqB,CAAA;EACR,MAAM,GAAGC,QAAQ,CAAC;EAAA;EAAA,CAAAtB,aAAA,GAAAE,CAAA,QAAG,IAAAO,QAAA,CAAAc,WAAW,GAAE;EAClC,MAAM;IAAEC;EAAC,CAAE;EAAA;EAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAG,IAAAiB,cAAA,CAAAM,WAAW,GAAE;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC;EAAA;EAAA,CAAA3B,aAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAsB,QAAQ,EAAC,EAAE,CAAC;EAChD,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC;EAAA;EAAA,CAAA9B,aAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAsB,QAAQ,EAAS,KAAK,CAAC;EACvE,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC;EAAA;EAAA,CAAAhC,aAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAsB,QAAQ,EAAS,KAAK,CAAC;EACjE,MAAM,CAACK,gBAAgB,EAAEC,mBAAmB,CAAC;EAAA;EAAA,CAAAlC,aAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAsB,QAAQ,EAAmB,IAAI,CAAC;EAChF,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC;EAAA;EAAA,CAAApC,aAAA,GAAAE,CAAA,QAAG,IAAAI,OAAA,CAAAsB,QAAQ,EAAC,CAAC,CAAC;EACjD,MAAMS,YAAY;EAAA;EAAA,CAAArC,aAAA,GAAAE,CAAA,QAAG,EAAE;EAEvB;EAAA;EAAAF,aAAA,GAAAE,CAAA;EACA,IAAAI,OAAA,CAAAgC,SAAS,EAAC,MAAK;IAAA;IAAAtC,aAAA,GAAAqB,CAAA;IACb,MAAMkB,SAAS;IAAA;IAAA,CAAAvC,aAAA,GAAAE,CAAA,QAAG,IAAIsC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,iBAAiB;IAAA;IAAA,CAAA5C,aAAA,GAAAE,CAAA,QAAGqC,SAAS,CAACM,GAAG,CAAC,YAAY,CAAC;IAAC;IAAA7C,aAAA,GAAAE,CAAA;IACtD;IAAI;IAAA,CAAAF,aAAA,GAAA8C,CAAA,UAAAF,iBAAiB;IAAA;IAAA,CAAA5C,aAAA,GAAA8C,CAAA,UAAIF,iBAAiB,KAAKf,gBAAgB,GAAE;MAAA;MAAA7B,aAAA,GAAA8C,CAAA;MAAA9C,aAAA,GAAAE,CAAA;MAC/D4B,mBAAmB,CAACc,iBAAiB,CAAC;IACxC,CAAC;IAAA;IAAA;MAAA5C,aAAA,GAAA8C,CAAA;IAAA;EACH,CAAC,EAAE,CAACjB,gBAAgB,CAAC,CAAC;EAEtB;EACA,MAAM;IACJkB,IAAI,EAAEC,UAAU;IAChBC,SAAS,EAAEC,iBAAiB;IAC5BC;EAAO,CACR;EAAA;EAAA,CAAAnD,aAAA,GAAAE,CAAA,QAAG,IAAAM,aAAA,CAAA4C,QAAQ,EAAC;IACXC,QAAQ,EAAE,CAAC,iBAAiB,EAAE3B,UAAU,EAAEG,gBAAgB,EAAEE,aAAa,CAAC;IAC1EuB,OAAO,EAAE,MAAAA,CAAA,KAAW;MAAA;MAAAtD,aAAA,GAAAqB,CAAA;MAClB,MAAMkC,MAAM;MAAA;MAAA,CAAAvD,aAAA,GAAAE,CAAA,QAAG,IAAIsC,eAAe,EAAE,EAAC,CAAC;;;0DAAA,CAGlC;;;;MAAA;MAAAxC,aAAA,GAAAE,CAAA;MAKJ,IAAIwB,UAAU,EAAE;QAAA;QAAA1B,aAAA,GAAA8C,CAAA;QAAA9C,aAAA,GAAAE,CAAA;QACdqD,MAAM,CAACC,MAAM,CAAC,QAAQ,EAAE9B,UAAU,CAAC;MACrC,CAAC;MAAA;MAAA;QAAA1B,aAAA,GAAA8C,CAAA;MAAA,EAAC;;;UAAA,CAGE;;;;MAAA9C,aAAA,GAAAE,CAAA;MAKJ;MAAI;MAAA,CAAAF,aAAA,GAAA8C,CAAA,UAAAjB,gBAAgB;MAAA;MAAA,CAAA7B,aAAA,GAAA8C,CAAA,UAAIjB,gBAAgB,KAAK,KAAK,GAAE;QAAA;QAAA7B,aAAA,GAAA8C,CAAA;QAAA9C,aAAA,GAAAE,CAAA;QAClDqD,MAAM,CAACC,MAAM,CAAC,YAAY,EAAE3B,gBAAgB,CAAC;MAC/C,CAAC;MAAA;MAAA;QAAA7B,aAAA,GAAA8C,CAAA;MAAA,EAAC;;;UAAA,CAGE;;;;MAAA9C,aAAA,GAAAE,CAAA;MAKJ;MAAI;MAAA,CAAAF,aAAA,GAAA8C,CAAA,UAAAf,aAAa;MAAA;MAAA,CAAA/B,aAAA,GAAA8C,CAAA,UAAIf,aAAa,KAAK,KAAK,GAAE;QAAA;QAAA/B,aAAA,GAAA8C,CAAA;QAAA9C,aAAA,GAAAE,CAAA;QAC5CqD,MAAM,CAACC,MAAM,CAAC,OAAO,EAAEzB,aAAa,CAAC;MACvC,CAAC;MAAA;MAAA;QAAA/B,aAAA,GAAA8C,CAAA;MAAA;MAED,MAAMW,QAAQ;MAAA;MAAA,CAAAzD,aAAA,GAAAE,CAAA,QAAG,MAAMwD,KAAK,CAAC,mBAAmBH,MAAM,EAAE,CAAC,EAAC,CAAC;;;;MAI3D;;;;MAIA;;;SAAA,CAGI;;;;MAKJ;;;;MAIA;;;;MAAA;MAAAvD,aAAA,GAAAE,CAAA;MAKA,IAAI,CAACuD,QAAQ,CAACE,EAAE,EAAE;QAAA;QAAA3D,aAAA,GAAA8C,CAAA;QAAA9C,aAAA,GAAAE,CAAA;QAChB,MAAM,IAAI0D,KAAK,CAAC,4BAA4B,CAAC;MAC/C,CAAC;MAAA;MAAA;QAAA5D,aAAA,GAAA8C,CAAA;MAAA;MAAA9C,aAAA,GAAAE,CAAA;MACD,OAAOuD,QAAQ,CAACI,IAAI,EAA0B;IAChD;GACD,CAAC;EAEF;EACA,MAAM;IAAEd,IAAI,EAAEe;EAAa,CAAE;EAAA;EAAA,CAAA9D,aAAA,GAAAE,CAAA,QAAG,IAAAM,aAAA,CAAA4C,QAAQ,EAAC;IACvCC,QAAQ,EAAE,CAAC,wBAAwB,CAAC;IACpCC,OAAO,EAAE,MAAAA,CAAA,KAAW;MAAA;MAAAtD,aAAA,GAAAqB,CAAA;MAClB,MAAMoC,QAAQ;MAAA;MAAA,CAAAzD,aAAA,GAAAE,CAAA,QAAG,MAAMwD,KAAK,CAAC,wBAAwB,CAAC;MAAC;MAAA1D,aAAA,GAAAE,CAAA;MACvD,IAAI,CAACuD,QAAQ,CAACE,EAAE,EAAE;QAAA;QAAA3D,aAAA,GAAA8C,CAAA;QAAA9C,aAAA,GAAAE,CAAA;QAChB,MAAM,IAAI0D,KAAK,CAAC,2BAA2B,CAAC;MAC9C,CAAC;MAAA;MAAA;QAAA5D,aAAA,GAAA8C,CAAA;MAAA;MAAA9C,aAAA,GAAAE,CAAA;MACD,OAAOuD,QAAQ,CAACI,IAAI,EAAE;IACxB;GACD,CAAC;EAEF;EACA,MAAME,SAAS;EAAA;EAAA,CAAA/D,aAAA,GAAAE,CAAA;EAAG;EAAA,CAAAF,aAAA,GAAA8C,CAAA,UAAAgB,aAAa,EAAEC,SAAS;EAAA;EAAA,CAAA/D,aAAA,GAAA8C,CAAA,UAAI,EAAE;EAEhD;EACA,MAAM;IAAEC,IAAI,EAAEiB;EAAa,CAAE;EAAA;EAAA,CAAAhE,aAAA,GAAAE,CAAA,QAAG,IAAAM,aAAA,CAAA4C,QAAQ,EAAC;IACvCC,QAAQ,EAAE,CAAC,qBAAqB,CAAC;IACjCC,OAAO,EAAE,MAAAA,CAAA,KAAW;MAAA;MAAAtD,aAAA,GAAAqB,CAAA;MAClB,MAAMoC,QAAQ;MAAA;MAAA,CAAAzD,aAAA,GAAAE,CAAA,QAAG,MAAMwD,KAAK,CAAC,iBAAiB,CAAC;MAAC;MAAA1D,aAAA,GAAAE,CAAA;MAChD,IAAI,CAACuD,QAAQ,CAACE,EAAE,EAAE;QAAA;QAAA3D,aAAA,GAAA8C,CAAA;QAAA9C,aAAA,GAAAE,CAAA;QAChB,MAAM,IAAI0D,KAAK,CAAC,gCAAgC,CAAC;MACnD,CAAC;MAAA;MAAA;QAAA5D,aAAA,GAAA8C,CAAA;MAAA;MAAA9C,aAAA,GAAAE,CAAA;MACD,OAAOuD,QAAQ,CAACI,IAAI,EAA0B;IAChD;GACD,CAAC;EAEF;EACA,MAAMI,eAAe;EAAA;EAAA,CAAAjE,aAAA,GAAAE,CAAA,QAAG8D,aAAa;EAAA;EAAA,CAAAhE,aAAA,GAAA8C,CAAA,WACjC,CAAC,GAAG,IAAIoB,GAAG,CAACF,aAAa,CAACG,GAAG,CAAEC,CAAC,IAAK;IAAA;IAAApE,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAE,CAAA;IAAA,OAAAkE,CAAC,CAACC,KAAK;EAAL,CAAK,CAAC,CAACC,MAAM,CAAED,KAAK,IAAK;IAAA;IAAArE,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAE,CAAA;IAAA,OAAAmE,KAAK,IAAI,IAAI;EAAJ,CAAI,CAAC,CAAC,CAAC,CAACE,IAAI,CACnF,CAACC,CAAC,EAAE1B,CAAC,KAAK;IAAA;IAAA9C,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAE,CAAA;IAAA,OAAAsE,CAAC,GAAG1B,CAAC;EAAD,CAAC,CAChB;EAAA;EAAA,CAAA9C,aAAA,GAAA8C,CAAA,WACD,EAAE;EAEN;EAAA;EAAA9C,aAAA,GAAAE,CAAA;EACA,MAAMuE,oBAAoB,GAAIC,KAAa,IAAI;IAAA;IAAA1E,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAE,CAAA;IAC7C4B,mBAAmB,CAAC4C,KAAK,CAAC;IAAC;IAAA1E,aAAA,GAAAE,CAAA;IAC3BkC,cAAc,CAAC,CAAC,CAAC;EACnB,CAAC;EAAC;EAAApC,aAAA,GAAAE,CAAA;EAEF,MAAMyE,iBAAiB,GAAID,KAAa,IAAI;IAAA;IAAA1E,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAE,CAAA;IAC1C8B,gBAAgB,CAAC0C,KAAK,CAAC;IAAC;IAAA1E,aAAA,GAAAE,CAAA;IACxBkC,cAAc,CAAC,CAAC,CAAC;EACnB,CAAC;EAAC;EAAApC,aAAA,GAAAE,CAAA;EAEF,MAAM0E,kBAAkB,GAAIF,KAAa,IAAI;IAAA;IAAA1E,aAAA,GAAAqB,CAAA;IAAArB,aAAA,GAAAE,CAAA;IAC3CyB,aAAa,CAAC+C,KAAK,CAAC;IAAC;IAAA1E,aAAA,GAAAE,CAAA;IACrBkC,cAAc,CAAC,CAAC,CAAC;EACnB,CAAC;EAED;EACA,MAAMyC,UAAU;EAAA;EAAA,CAAA7E,aAAA,GAAAE,CAAA;EAAG;EAAA,CAAAF,aAAA,GAAA8C,CAAA,WAAAE,UAAU,EAAE8B,MAAM;EAAA;EAAA,CAAA9E,aAAA,GAAA8C,CAAA,WAAI,CAAC;EAC1C,MAAMiC,UAAU;EAAA;EAAA,CAAA/E,aAAA,GAAAE,CAAA,QAAG8E,IAAI,CAACC,IAAI,CAACJ,UAAU,GAAGxC,YAAY,CAAC;EACvD,MAAM6C,UAAU;EAAA;EAAA,CAAAlF,aAAA,GAAAE,CAAA,QAAG,CAACiC,WAAW,GAAG,CAAC,IAAIE,YAAY;EACnD,MAAM8C,QAAQ;EAAA;EAAA,CAAAnF,aAAA,GAAAE,CAAA,QAAGgF,UAAU,GAAG7C,YAAY;EAC1C,MAAM+C,iBAAiB;EAAA;EAAA,CAAApF,aAAA,GAAAE,CAAA;EAAG;EAAA,CAAAF,aAAA,GAAA8C,CAAA,WAAAE,UAAU,EAAEqC,KAAK,CAACH,UAAU,EAAEC,QAAQ,CAAC;EAAA;EAAA,CAAAnF,aAAA,GAAA8C,CAAA,WAAI,EAAE;EAAC;EAAA9C,aAAA,GAAAE,CAAA;EAExE,OACE,IAAAoF,aAAA,CAAAC,IAAA;IAAKC,SAAS,EAAC,sCAAsC;IAAAC,QAAA,GACnD,IAAAH,aAAA,CAAAI,GAAA,EAAChF,QAAA,CAAAiF,MAAM;MAACC,KAAK,EAAEpE,CAAC,CAAC,sBAAsB,CAAC;MAAEqE,QAAQ,EAAErE,CAAC,CAAC,kBAAkB;IAAC,EAAI,EAE7E,IAAA8D,aAAA,CAAAI,GAAA;MAAKF,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EACvC,IAAAH,aAAA,CAAAC,IAAA;QAAKC,SAAS,EAAC,6BAA6B;QAAAC,QAAA,GAE1C,IAAAH,aAAA,CAAAC,IAAA,EAAC5E,MAAA,CAAAmF,IAAI;UAAAL,QAAA,GACH,IAAAH,aAAA,CAAAI,GAAA,EAAC/E,MAAA,CAAAoF,UAAU;YAAAN,QAAA,EACT,IAAAH,aAAA,CAAAC,IAAA,EAAC5E,MAAA,CAAAqF,SAAS;cAACR,SAAS,EAAC,yBAAyB;cAAAC,QAAA,GAC5C,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAA+E,MAAM;gBAACT,SAAS,EAAC;cAAS,EAAG,EAC7BhE,CAAC,CAAC,eAAe,CAAC;YAAA;UACT,EACD,EACb,IAAA8D,aAAA,CAAAI,GAAA,EAAC/E,MAAA,CAAAuF,WAAW;YAAAT,QAAA,EACV,IAAAH,aAAA,CAAAC,IAAA;cAAKC,SAAS,EAAC,uCAAuC;cAAAC,QAAA,GACpD,IAAAH,aAAA,CAAAC,IAAA;gBAAKC,SAAS,EAAC,WAAW;gBAAAC,QAAA,GACxB,IAAAH,aAAA,CAAAI,GAAA;kBAAOF,SAAS,EAAC,qBAAqB;kBAAAC,QAAA,EAAEjE,CAAC,CAAC,kBAAkB;gBAAC,EAAS,EACtE,IAAA8D,aAAA,CAAAI,GAAA,EAAC5E,OAAA,CAAAqF,KAAK;kBACJC,WAAW,EAAE5E,CAAC,CAAC,kBAAkB,CAAC;kBAClCkD,KAAK,EAAEhD,UAAU;kBACjB2E,QAAQ,EAAGC,CAAC,IAAK;oBAAA;oBAAAtG,aAAA,GAAAqB,CAAA;oBAAArB,aAAA,GAAAE,CAAA;oBAAA,OAAA0E,kBAAkB,CAAC0B,CAAC,CAACC,MAAM,CAAC7B,KAAK,CAAC;kBAAD,CAAC;kBACnDc,SAAS,EAAC;gBAAQ,EAClB;cAAA,EACE,EAEN,IAAAF,aAAA,CAAAC,IAAA;gBAAKC,SAAS,EAAC,WAAW;gBAAAC,QAAA,GACxB,IAAAH,aAAA,CAAAI,GAAA;kBAAOF,SAAS,EAAC,qBAAqB;kBAAAC,QAAA,EAAEjE,CAAC,CAAC,gBAAgB;gBAAC,EAAS,EACpE,IAAA8D,aAAA,CAAAC,IAAA,EAACxE,QAAA,CAAAyF,MAAM;kBAAC9B,KAAK,EAAE7C,gBAAgB;kBAAE4E,aAAa,EAAEhC,oBAAoB;kBAAAgB,QAAA,GAClE,IAAAH,aAAA,CAAAI,GAAA,EAAC3E,QAAA,CAAA2F,aAAa;oBAAAjB,QAAA,EACZ,IAAAH,aAAA,CAAAI,GAAA,EAAC3E,QAAA,CAAA4F,WAAW;sBAACP,WAAW,EAAE5E,CAAC,CAAC,cAAc;oBAAC;kBAAI,EACjC,EAChB,IAAA8D,aAAA,CAAAC,IAAA,EAACxE,QAAA,CAAA6F,aAAa;oBAAAnB,QAAA,GACZ,IAAAH,aAAA,CAAAI,GAAA,EAAC3E,QAAA,CAAA8F,UAAU;sBAACnC,KAAK,EAAC,KAAK;sBAAAe,QAAA,EAAEjE,CAAC,CAAC,cAAc;oBAAC,EAAc,EACvDuC,SAAS,EAAEI,GAAG,CAAE2C,QAAa,IAC5B;sBAAA;sBAAA9G,aAAA,GAAAqB,CAAA;sBAAArB,aAAA,GAAAE,CAAA;sBAAA,WAAAoF,aAAA,CAAAI,GAAA,EAAC3E,QAAA,CAAA8F,UAAU;wBAAmBnC,KAAK,EAAEoC,QAAQ,CAACC,EAAE;wBAAAtB,QAAA,EAC7CqB,QAAQ,CAACE;sBAAI,GADCF,QAAQ,CAACC,EAAE,CAEf;oBAFe,CAG7B,CAAC;kBAAA,EACY;gBAAA,EACT;cAAA,EACL,EAEN,IAAAzB,aAAA,CAAAC,IAAA;gBAAKC,SAAS,EAAC,WAAW;gBAAAC,QAAA,GACxB,IAAAH,aAAA,CAAAI,GAAA;kBAAOF,SAAS,EAAC,qBAAqB;kBAAAC,QAAA,EAAEjE,CAAC,CAAC,aAAa;gBAAC,EAAS,EACjE,IAAA8D,aAAA,CAAAC,IAAA,EAACxE,QAAA,CAAAyF,MAAM;kBAAC9B,KAAK,EAAE3C,aAAa;kBAAE0E,aAAa,EAAE9B,iBAAiB;kBAAAc,QAAA,GAC5D,IAAAH,aAAA,CAAAI,GAAA,EAAC3E,QAAA,CAAA2F,aAAa;oBAAAjB,QAAA,EACZ,IAAAH,aAAA,CAAAI,GAAA,EAAC3E,QAAA,CAAA4F,WAAW;sBAACP,WAAW,EAAE5E,CAAC,CAAC,WAAW;oBAAC;kBAAI,EAC9B,EAChB,IAAA8D,aAAA,CAAAC,IAAA,EAACxE,QAAA,CAAA6F,aAAa;oBAAAnB,QAAA,GACZ,IAAAH,aAAA,CAAAI,GAAA,EAAC3E,QAAA,CAAA8F,UAAU;sBAACnC,KAAK,EAAC,KAAK;sBAAAe,QAAA,EAAEjE,CAAC,CAAC,WAAW;oBAAC,EAAc,EACpDyC,eAAe,CAACE,GAAG,CAAEE,KAAK,IACzB;sBAAA;sBAAArE,aAAA,GAAAqB,CAAA;sBAAArB,aAAA,GAAAE,CAAA;sBAAA,WAAAoF,aAAA,CAAAC,IAAA,EAACxE,QAAA,CAAA8F,UAAU;wBAAanC,KAAK,EAAEL,KAAK,CAAC4C,QAAQ,EAAE;wBAAAxB,QAAA,GAC5CjE,CAAC,CAAC,OAAO,CAAC,OAAG6C,KAAK;sBAAA,GADJA,KAAK,CAET;oBAFS,CAGvB,CAAC;kBAAA,EACY;gBAAA,EACT;cAAA,EACL;YAAA;UACF,EACM;QAAA,EACT,EAGP,IAAAiB,aAAA,CAAAI,GAAA;UAAKF,SAAS,EAAC,sDAAsD;UAAAC,QAAA,EAClEvC,iBAAiB;UAAA;UAAA,CAChB;UAAAlD,aAAA,GAAA8C,CAAA,WACAoE,KAAK,CAACC,IAAI,CAAC;YAAErC,MAAM,EAAE;UAAC,CAAE,CAAC,CAACX,GAAG,CAAC,CAACiD,CAAC,EAAEC,CAAC,KACjC;YAAA;YAAArH,aAAA,GAAAqB,CAAA;YAAArB,aAAA,GAAAE,CAAA;YAAA,WAAAoF,aAAA,CAAAI,GAAA,EAAC/E,MAAA,CAAAmF,IAAI;cAAAL,QAAA,EACH,IAAAH,aAAA,CAAAC,IAAA,EAAC5E,MAAA,CAAAuF,WAAW;gBAACV,SAAS,EAAC,KAAK;gBAAAC,QAAA,GAC1B,IAAAH,aAAA,CAAAI,GAAA,EAAC1E,UAAA,CAAAsG,QAAQ;kBAAC9B,SAAS,EAAC;gBAAe,EAAG,EACtC,IAAAF,aAAA,CAAAI,GAAA,EAAC1E,UAAA,CAAAsG,QAAQ;kBAAC9B,SAAS,EAAC;gBAAiB,EAAG,EACxC,IAAAF,aAAA,CAAAI,GAAA,EAAC1E,UAAA,CAAAsG,QAAQ;kBAAC9B,SAAS,EAAC;gBAAgB,EAAG,EACvC,IAAAF,aAAA,CAAAC,IAAA;kBAAKC,SAAS,EAAC,wBAAwB;kBAAAC,QAAA,GACrC,IAAAH,aAAA,CAAAI,GAAA,EAAC1E,UAAA,CAAAsG,QAAQ;oBAAC9B,SAAS,EAAC;kBAAY,EAAG,EACnC,IAAAF,aAAA,CAAAI,GAAA,EAAC1E,UAAA,CAAAsG,QAAQ;oBAAC9B,SAAS,EAAC;kBAAY,EAAG;gBAAA,EAC/B;cAAA;YACM,GATL6B,CAAC,CAUL;UAVK,CAWb,CAAC;UAAA;UAAA,CAAArH,aAAA,GAAA8C,CAAA,WACA+B,UAAU,KAAK,CAAC;UAAA;UAAA,CAAA7E,aAAA,GAAA8C,CAAA,WAClB,IAAAwC,aAAA,CAAAI,GAAA,EAAC/E,MAAA,CAAAmF,IAAI;YAACN,SAAS,EAAC,eAAe;YAAAC,QAAA,EAC7B,IAAAH,aAAA,CAAAC,IAAA,EAAC5E,MAAA,CAAAuF,WAAW;cAACV,SAAS,EAAC,iBAAiB;cAAAC,QAAA,GACtC,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAqG,IAAI;gBAAC/B,SAAS,EAAC;cAAsC,EAAG,EACzD,IAAAF,aAAA,CAAAI,GAAA;gBAAIF,SAAS,EAAC,0CAA0C;gBAAAC,QAAA,EAAEjE,CAAC,CAAC,mBAAmB;cAAC,EAAM,EACtF,IAAA8D,aAAA,CAAAI,GAAA;gBAAGF,SAAS,EAAC,eAAe;gBAAAC,QAAA,EAAEjE,CAAC,CAAC,sBAAsB;cAAC,EAAK;YAAA;UAChD,EACT;UAAA;UAAA,CAAAxB,aAAA,GAAA8C,CAAA,WAEPsC,iBAAiB,CAACjB,GAAG,CAAEqD,SAAS,IAC9B;YAAA;YAAAxH,aAAA,GAAAqB,CAAA;YAAArB,aAAA,GAAAE,CAAA;YAAA,WAAAoF,aAAA,CAAAI,GAAA,EAAC/E,MAAA,CAAAmF,IAAI;cAAoBN,SAAS,EAAC,mCAAmC;cAAAC,QAAA,EACpE,IAAAH,aAAA,CAAAC,IAAA,EAAC5E,MAAA,CAAAuF,WAAW;gBAACV,SAAS,EAAC,KAAK;gBAAAC,QAAA,GAC1B,IAAAH,aAAA,CAAAC,IAAA;kBAAKC,SAAS,EAAC,uCAAuC;kBAAAC,QAAA,GACpD,IAAAH,aAAA,CAAAC,IAAA;oBAAAE,QAAA,GACE,IAAAH,aAAA,CAAAC,IAAA;sBAAIC,SAAS,EAAC,+CAA+C;sBAAAC,QAAA,GAC3D,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAqG,IAAI;wBAAC/B,SAAS,EAAC;sBAAS,EAAG,EAC3BhE,CAAC,CAAC,YAAY,CAAC,OAAGgG,SAAS,CAACC,UAAU;oBAAA,EACpC,EACL,IAAAnC,aAAA,CAAAC,IAAA;sBAAGC,SAAS,EAAC,+CAA+C;sBAAAC,QAAA,GAC1D,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAwG,QAAQ;wBAAClC,SAAS,EAAC;sBAAS,EAAG,EAC/BgC,SAAS,CAACV,QAAQ,CAACE,IAAI;oBAAA,EACtB,EACJ,IAAA1B,aAAA,CAAAC,IAAA;sBAAGC,SAAS,EAAC,+CAA+C;sBAAAC,QAAA,GAC1D,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAyG,MAAM;wBAACnC,SAAS,EAAC;sBAAS,EAAG,EAC7BhE,CAAC,CAAC,OAAO,CAAC;sBAAG;sBAAA,CAAAxB,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACnD,KAAK;sBAAA;sBAAA,CAAArE,aAAA,GAAA8C,CAAA,WAAI,KAAK;oBAAA,EACpC;kBAAA,EACA,EACN,IAAAwC,aAAA,CAAAI,GAAA,EAAC7E,OAAA,CAAA+G,KAAK;oBAACC,OAAO,EAAEL,SAAS,CAACM,QAAQ;oBAAA;oBAAA,CAAA9H,aAAA,GAAA8C,CAAA,WAAG,SAAS;oBAAA;oBAAA,CAAA9C,aAAA,GAAA8C,CAAA,WAAG,WAAW;oBAAA2C,QAAA,EACzD+B,SAAS,CAACM,QAAQ;oBAAA;oBAAA,CAAA9H,aAAA,GAAA8C,CAAA,WAAGtB,CAAC,CAAC,QAAQ,CAAC;oBAAA;oBAAA,CAAAxB,aAAA,GAAA8C,CAAA,WAAGtB,CAAC,CAAC,UAAU,CAAC;kBAAA,EAC3C;gBAAA,EACJ,EAGN,IAAA8D,aAAA,CAAAC,IAAA;kBAAKC,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,GAC7B,IAAAH,aAAA,CAAAC,IAAA;oBAAKC,SAAS,EAAC,iCAAiC;oBAAAC,QAAA,GAC9C,IAAAH,aAAA,CAAAC,IAAA;sBAAMC,SAAS,EAAC,yBAAyB;sBAAAC,QAAA,GACvC,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAA6G,GAAG;wBAACvC,SAAS,EAAC;sBAAS,EAAG;sBAC1B;sBAAA,CAAAxF,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACQ,QAAQ;sBAAA;sBAAA,CAAAhI,aAAA,GAAA8C,CAAA,WAAI,CAAC,QAAGtB,CAAC,CAAC,KAAK,CAAC;oBAAA,EAC9B,EACP,IAAA8D,aAAA,CAAAC,IAAA;sBAAMC,SAAS,EAAC,yBAAyB;sBAAAC,QAAA,GACvC,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAA+G,IAAI;wBAACzC,SAAS,EAAC;sBAAS,EAAG;sBAC3B;sBAAA,CAAAxF,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACU,SAAS;sBAAA;sBAAA,CAAAlI,aAAA,GAAA8C,CAAA,WAAI,CAAC,QAAGtB,CAAC,CAAC,MAAM,CAAC;oBAAA,EAChC;kBAAA,EACH;kBAEL;kBAAA,CAAAxB,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACW,aAAa;kBAAA;kBAAA,CAAAnI,aAAA,GAAA8C,CAAA,WACtB,IAAAwC,aAAA,CAAAC,IAAA;oBAAGC,SAAS,EAAC,uBAAuB;oBAAAC,QAAA,GAAE+B,SAAS,CAACW,aAAa,OAAG3G,CAAC,CAAC,MAAM,CAAC;kBAAA,EAAK,CAC/E;kBAEA;kBAAA,CAAAxB,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACY,mBAAmB,EAAEtD,MAAM,GAAG,CAAC;kBAAA;kBAAA,CAAA9E,aAAA,GAAA8C,CAAA,WACxC,IAAAwC,aAAA,CAAAC,IAAA;oBAAGC,SAAS,EAAC,+CAA+C;oBAAAC,QAAA,GAC1D,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAmH,GAAG;sBAAC7C,SAAS,EAAC;oBAAS,EAAG,EAC1BhE,CAAC,CAAC,SAAS,CAAC,QAAIgG,SAAS,CAACY,mBAAmB,CAACE,IAAI,CAAC,IAAI,CAAC;kBAAA,EACvD,CACL;kBAEA;kBAAA,CAAAtI,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACe,mBAAmB,EAAEzD,MAAM,GAAG,CAAC;kBAAA;kBAAA,CAAA9E,aAAA,GAAA8C,CAAA,WACxC,IAAAwC,aAAA,CAAAC,IAAA;oBAAGC,SAAS,EAAC,+CAA+C;oBAAAC,QAAA,GAC1D,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAsH,OAAO;sBAAChD,SAAS,EAAC;oBAAS,EAAG,EAC9BhE,CAAC,CAAC,SAAS,CAAC,QAAIgG,SAAS,CAACe,mBAAmB,CAACD,IAAI,CAAC,IAAI,CAAC;kBAAA,EACvD,CACL;kBAEA;kBAAA,CAAAtI,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACiB,WAAW;kBAAA;kBAAA,CAAAzI,aAAA,GAAA8C,CAAA,WACpB,IAAAwC,aAAA,CAAAC,IAAA;oBAAGC,SAAS,EAAC,oCAAoC;oBAAAC,QAAA,QAC7C+B,SAAS,CAACiB,WAAW,OAAGjH,CAAC,CAAC,YAAY,CAAC;kBAAA,EACvC,CACL;gBAAA,EACG,EAGN,IAAA8D,aAAA,CAAAC,IAAA;kBAAKC,SAAS,EAAC,MAAM;kBAAAC,QAAA,GACnB,IAAAH,aAAA,CAAAC,IAAA;oBAAIC,SAAS,EAAC,kDAAkD;oBAAAC,QAAA,GAC9D,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAwH,KAAK;sBAAClD,SAAS,EAAC;oBAAS,EAAG,EAC5BhE,CAAC,CAAC,WAAW,CAAC,QAAIgG,SAAS,CAACmB,OAAO,CAAC7D,MAAM;kBAAA,EACxC,EACJ0C,SAAS,CAACmB,OAAO,CAAC7D,MAAM,KAAK,CAAC;kBAAA;kBAAA,CAAA9E,aAAA,GAAA8C,CAAA,WAC7B,IAAAwC,aAAA,CAAAI,GAAA;oBAAGF,SAAS,EAAC,uBAAuB;oBAAAC,QAAA,EAAEjE,CAAC,CAAC,qBAAqB;kBAAC,EAAK;kBAAA;kBAAA,CAAAxB,aAAA,GAAA8C,CAAA,WAEnE,IAAAwC,aAAA,CAAAC,IAAA;oBAAKC,SAAS,EAAC,WAAW;oBAAAC,QAAA,GACvB+B,SAAS,CAACmB,OAAO,CAACtD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAClB,GAAG,CAAEyE,MAAM,IACxC;sBAAA;sBAAA5I,aAAA,GAAAqB,CAAA;sBAAArB,aAAA,GAAAE,CAAA;sBAAA,WAAAoF,aAAA,CAAAC,IAAA;wBAAmBC,SAAS,EAAC,uBAAuB;wBAAAC,QAAA,GACjDmD,MAAM,CAACC,SAAS,OAAGD,MAAM,CAACE,QAAQ;sBAAA,GAD7BF,MAAM,CAAC7B,EAAE,CAEb;oBAFa,CAGlB,CAAC;oBACD;oBAAA,CAAA/G,aAAA,GAAA8C,CAAA,WAAA0E,SAAS,CAACmB,OAAO,CAAC7D,MAAM,GAAG,CAAC;oBAAA;oBAAA,CAAA9E,aAAA,GAAA8C,CAAA,WAC3B,IAAAwC,aAAA,CAAAC,IAAA;sBAAGC,SAAS,EAAC,uBAAuB;sBAAAC,QAAA,QAChC+B,SAAS,CAACmB,OAAO,CAAC7D,MAAM,GAAG,CAAC,OAAGtD,CAAC,CAAC,eAAe,CAAC;oBAAA,EACjD,CACL;kBAAA,EACG,CACP;gBAAA,EACG,EAGN,IAAA8D,aAAA,CAAAC,IAAA;kBAAKC,SAAS,EAAC,YAAY;kBAAAC,QAAA,GACzB,IAAAH,aAAA,CAAAC,IAAA,EAAC3E,QAAA,CAAAmI,MAAM;oBACLlB,OAAO,EAAC,SAAS;oBACjBmB,IAAI,EAAC,IAAI;oBACTxD,SAAS,EAAC,QAAQ;oBAClByD,OAAO,EAAEA,CAAA,KACP;sBAAA;sBAAAjJ,aAAA,GAAAqB,CAAA;sBAAArB,aAAA,GAAAE,CAAA;sBAAA,OAAAoB,QAAQ,CAAC,6CAA6CkG,SAAS,CAACT,EAAE,EAAE,CAAC;oBAAD,CAAC;oBAEvEnB,KAAK,EAAEpE,CAAC,CAAC,0BAA0B,CAAC;oBAAAiE,QAAA,GAEpC,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAgI,QAAQ;sBAAC1D,SAAS,EAAC;oBAAc,EAAG,EACpChE,CAAC,CAAC,0BAA0B,CAAC;kBAAA,EACvB,EACT,IAAA8D,aAAA,CAAAC,IAAA,EAACtE,QAAA,CAAAkI,MAAM;oBAAA1D,QAAA,GACL,IAAAH,aAAA,CAAAI,GAAA,EAACzE,QAAA,CAAAmI,aAAa;sBAACC,OAAO;sBAAA5D,QAAA,EACpB,IAAAH,aAAA,CAAAC,IAAA,EAAC3E,QAAA,CAAAmI,MAAM;wBACLlB,OAAO,EAAC,SAAS;wBACjBmB,IAAI,EAAC,IAAI;wBACTxD,SAAS,EAAC,QAAQ;wBAClByD,OAAO,EAAEA,CAAA,KAAM;0BAAA;0BAAAjJ,aAAA,GAAAqB,CAAA;0BAAArB,aAAA,GAAAE,CAAA;0BAAA,OAAAgC,mBAAmB,CAACsF,SAAS,CAAC;wBAAD,CAAC;wBAAA/B,QAAA,GAE7C,IAAAH,aAAA,CAAAI,GAAA,EAACxE,cAAA,CAAAoI,IAAI;0BAAC9D,SAAS,EAAC;wBAAc,EAAG;sBAAA;oBAE1B,EACK,EAChB,IAAAF,aAAA,CAAAC,IAAA,EAACtE,QAAA,CAAAsI,aAAa;sBAAC/D,SAAS,EAAC,wCAAwC;sBAAAC,QAAA,GAC/D,IAAAH,aAAA,CAAAI,GAAA,EAACzE,QAAA,CAAAuI,YAAY;wBAAA/D,QAAA,EACX,IAAAH,aAAA,CAAAC,IAAA,EAACtE,QAAA,CAAAwI,WAAW;0BAAAhE,QAAA,iBAAY+B,SAAS,CAACC,UAAU;wBAAA;sBAAe,EAC9C;sBACd;sBAAA,CAAAzH,aAAA,GAAA8C,CAAA,WAAAb,gBAAgB;sBAAA;sBAAA,CAAAjC,aAAA,GAAA8C,CAAA,WACf,IAAAwC,aAAA,CAAAI,GAAA,EAACtE,qBAAA,CAAAsI,iBAAiB;wBAChBlC,SAAS,EAAEvF,gBAAgB;wBAC3B0H,SAAS,EAAEA,CAAA,KAAK;0BAAA;0BAAA3J,aAAA,GAAAqB,CAAA;0BAAArB,aAAA,GAAAE,CAAA;0BACdiD,OAAO,EAAE;0BAAC;0BAAAnD,aAAA,GAAAE,CAAA;0BACVgC,mBAAmB,CAAC,IAAI,CAAC;wBAC3B;sBAAC,EACD,CACH;oBAAA,EACa;kBAAA,EACT;gBAAA,EACL;cAAA;YACM,GA9HLsF,SAAS,CAACT,EAAE,CA+HhB;UA/HgB,CAgIxB,CAAC,CACH;QAAA,EACG;QAGL;QAAA,CAAA/G,aAAA,GAAA8C,CAAA,WAAAiC,UAAU,GAAG,CAAC;QAAA;QAAA,CAAA/E,aAAA,GAAA8C,CAAA,WACb,IAAAwC,aAAA,CAAAC,IAAA;UAAKC,SAAS,EAAC,6CAA6C;UAAAC,QAAA,GAC1D,IAAAH,aAAA,CAAAI,GAAA,EAAC9E,QAAA,CAAAmI,MAAM;YACLlB,OAAO,EAAC,SAAS;YACjBmB,IAAI,EAAC,IAAI;YACTC,OAAO,EAAEA,CAAA,KAAM;cAAA;cAAAjJ,aAAA,GAAAqB,CAAA;cAAArB,aAAA,GAAAE,CAAA;cAAA,OAAAkC,cAAc,CAAEwH,IAAI,IAAK;gBAAA;gBAAA5J,aAAA,GAAAqB,CAAA;gBAAArB,aAAA,GAAAE,CAAA;gBAAA,OAAA8E,IAAI,CAAC6E,GAAG,CAACD,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;cAAD,CAAC,CAAC;YAAD,CAAC;YAC9DE,QAAQ,EAAE3H,WAAW,KAAK,CAAC;YAAAsD,QAAA;UAAA,EAGpB,EAET,IAAAH,aAAA,CAAAC,IAAA;YAAKC,SAAS,EAAC,yBAAyB;YAAAC,QAAA,GACtC,IAAAH,aAAA,CAAAI,GAAA;cAAMF,SAAS,EAAC,uBAAuB;cAAAC,QAAA;YAAA,EAAY,EACnD,IAAAH,aAAA,CAAAI,GAAA,EAAC5E,OAAA,CAAAqF,KAAK;cACJ4D,IAAI,EAAC,QAAQ;cACbC,GAAG,EAAC,GAAG;cACPH,GAAG,EAAE9E,UAAU;cACfL,KAAK,EAAEvC,WAAW;cAClBkE,QAAQ,EAAGC,CAAC,IAAI;gBAAA;gBAAAtG,aAAA,GAAAqB,CAAA;gBACd,MAAM4I,IAAI;gBAAA;gBAAA,CAAAjK,aAAA,GAAAE,CAAA,QAAGgK,QAAQ,CAAC5D,CAAC,CAACC,MAAM,CAAC7B,KAAK,CAAC;gBAAC;gBAAA1E,aAAA,GAAAE,CAAA;gBACtC;gBAAI;gBAAA,CAAAF,aAAA,GAAA8C,CAAA,WAAAmH,IAAI,IAAI,CAAC;gBAAA;gBAAA,CAAAjK,aAAA,GAAA8C,CAAA,WAAImH,IAAI,IAAIlF,UAAU,GAAE;kBAAA;kBAAA/E,aAAA,GAAA8C,CAAA;kBAAA9C,aAAA,GAAAE,CAAA;kBACnCkC,cAAc,CAAC6H,IAAI,CAAC;gBACtB,CAAC;gBAAA;gBAAA;kBAAAjK,aAAA,GAAA8C,CAAA;gBAAA;cACH,CAAC;cACDqH,MAAM,EAAG7D,CAAC,IAAI;gBAAA;gBAAAtG,aAAA,GAAAqB,CAAA;gBACZ,MAAM4I,IAAI;gBAAA;gBAAA,CAAAjK,aAAA,GAAAE,CAAA,QAAGgK,QAAQ,CAAC5D,CAAC,CAACC,MAAM,CAAC7B,KAAK,CAAC;gBAAC;gBAAA1E,aAAA,GAAAE,CAAA;gBACtC;gBAAI;gBAAA,CAAAF,aAAA,GAAA8C,CAAA,WAAAsH,KAAK,CAACH,IAAI,CAAC;gBAAA;gBAAA,CAAAjK,aAAA,GAAA8C,CAAA,WAAImH,IAAI,GAAG,CAAC,GAAE;kBAAA;kBAAAjK,aAAA,GAAA8C,CAAA;kBAAA9C,aAAA,GAAAE,CAAA;kBAC3BkC,cAAc,CAAC,CAAC,CAAC;gBACnB,CAAC,MAAM;kBAAA;kBAAApC,aAAA,GAAA8C,CAAA;kBAAA9C,aAAA,GAAAE,CAAA;kBAAA,IAAI+J,IAAI,GAAGlF,UAAU,EAAE;oBAAA;oBAAA/E,aAAA,GAAA8C,CAAA;oBAAA9C,aAAA,GAAAE,CAAA;oBAC5BkC,cAAc,CAAC2C,UAAU,CAAC;kBAC5B,CAAC;kBAAA;kBAAA;oBAAA/E,aAAA,GAAA8C,CAAA;kBAAA;gBAAD;cACF,CAAC;cACD0C,SAAS,EAAC;YAAkB,EAC5B,EACF,IAAAF,aAAA,CAAAC,IAAA;cAAMC,SAAS,EAAC,uBAAuB;cAAAC,QAAA,UAAKV,UAAU;YAAA,EAAQ;UAAA,EAC1D,EAEN,IAAAO,aAAA,CAAAI,GAAA,EAAC9E,QAAA,CAAAmI,MAAM;YACLlB,OAAO,EAAC,SAAS;YACjBmB,IAAI,EAAC,IAAI;YACTC,OAAO,EAAEA,CAAA,KAAM;cAAA;cAAAjJ,aAAA,GAAAqB,CAAA;cAAArB,aAAA,GAAAE,CAAA;cAAA,OAAAkC,cAAc,CAAEwH,IAAI,IAAK;gBAAA;gBAAA5J,aAAA,GAAAqB,CAAA;gBAAArB,aAAA,GAAAE,CAAA;gBAAA,OAAA8E,IAAI,CAACgF,GAAG,CAACJ,IAAI,GAAG,CAAC,EAAE7E,UAAU,CAAC;cAAD,CAAC,CAAC;YAAD,CAAC;YACvE+E,QAAQ,EAAE3H,WAAW,KAAK4C,UAAU;YAAAU,QAAA;UAAA,EAG7B,EAET,IAAAH,aAAA,CAAAC,IAAA;YAAKC,SAAS,EAAC,uBAAuB;YAAAC,QAAA,eAC3BP,UAAU,GAAG,CAAC,OAAGF,IAAI,CAACgF,GAAG,CAAC7E,QAAQ,EAAEN,UAAU,CAAC,UAAMA,UAAU;UAAA,EACpE;QAAA,EACF,CACP;MAAA;IACG,EACF;EAAA,EACF;AAEV","ignoreList":[]}