{"file":"/home/runner/workspace/tests/integration/hierarchical-navigation-user-flows.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/hierarchical-navigation-user-flows.test.tsx"],"sourcesContent":["/**\n * Hierarchical Navigation User Flow Tests\n * Tests complete user scenarios and flows through the hierarchical navigation system\n */\n\nimport React, { useContext } from 'react';\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react';\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { withHierarchicalSelection, HierarchyContext } from '@/components/hoc/withHierarchicalSelection';\nimport '@testing-library/jest-dom';\n\n// Mock wouter\nconst mockSetLocation = jest.fn();\nlet mockCurrentLocation = '/residents/building';\nlet mockCurrentSearch = '';\n\njest.mock('wouter', () => ({\n  useLocation: () => [mockCurrentLocation, mockSetLocation],\n  useSearch: () => mockCurrentSearch,\n}));\n\n// Mock fetch for API calls\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Mock building data scenarios\nconst SINGLE_BUILDING_USER_DATA = [\n  { id: 'building-1', name: 'Building A', address: '123 Main St' }\n];\n\nconst MULTIPLE_BUILDINGS_USER_DATA = [\n  { id: 'building-1', name: 'Building A', address: '123 Main St' },\n  { id: 'building-2', name: 'Building B', address: '456 Oak Ave' },\n  { id: 'building-3', name: 'Building C', address: '789 Pine Rd' }\n];\n\nconst SINGLE_BUILDING_DETAILS = {\n  id: 'building-1',\n  name: 'Building A',\n  address: '123 Main St',\n  city: 'Montreal',\n  province: 'QC',\n  postalCode: 'H1A 1A1',\n  totalUnits: 50,\n  occupiedUnits: 45,\n  occupancyRate: 90,\n  buildingType: 'residential',\n  yearBuilt: 2020,\n};\n\n// Mock page components that use hierarchical navigation\nconst MockBuildingPage = () => {\n  const [showSelection, setShowSelection] = React.useState(true);\n  const [selectedBuilding, setSelectedBuilding] = React.useState<string | null>(null);\n  const [buildings, setBuildings] = React.useState<any[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    // Simulate API call based on URL\n    const urlParams = new URLSearchParams(mockCurrentSearch);\n    const buildingId = urlParams.get('building');\n    \n    if (buildingId) {\n      setSelectedBuilding(buildingId);\n      setShowSelection(false);\n    } else {\n      setShowSelection(true);\n    }\n\n    // Mock API call delay\n    setTimeout(() => {\n      setBuildings(MULTIPLE_BUILDINGS_USER_DATA);\n      setIsLoading(false);\n    }, 100);\n  }, [mockCurrentSearch]);\n\n  const handleBuildingSelect = (buildingId: string) => {\n    setSelectedBuilding(buildingId);\n    setShowSelection(false);\n    mockCurrentSearch = `?building=${buildingId}`;\n    mockSetLocation(`/residents/building?building=${buildingId}`);\n  };\n\n  const handleBack = () => {\n    setSelectedBuilding(null);\n    setShowSelection(true);\n    mockCurrentSearch = '';\n    mockSetLocation('/residents/building');\n  };\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"loading-state\">\n        <div data-testid=\"loading-spinner\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (showSelection) {\n    return (\n      <div data-testid=\"building-selection-screen\">\n        <h1 data-testid=\"selection-title\">Select Building</h1>\n        <div data-testid=\"buildings-grid\">\n          {buildings.map((building) => (\n            <button\n              key={building.id}\n              data-testid={`building-card-${building.id}`}\n              onClick={() => handleBuildingSelect(building.id)}\n              className=\"building-card\"\n            >\n              <h3>{building.name}</h3>\n              <p>{building.address}</p>\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-testid=\"building-details-screen\">\n      <div data-testid=\"header-with-back\">\n        {buildings.length > 1 && (\n          <button\n            data-testid=\"back-to-buildings\"\n            onClick={handleBack}\n          >\n            Back to Buildings\n          </button>\n        )}\n        <h1 data-testid=\"building-title\">Building Details</h1>\n      </div>\n      <div data-testid=\"building-info\">\n        <p data-testid=\"selected-building-id\">{selectedBuilding}</p>\n        <p>Building information and details</p>\n        <button data-testid=\"view-documents-btn\">View Documents</button>\n      </div>\n    </div>\n  );\n};\n\n// Mock single building scenario\nconst MockSingleBuildingPage = () => {\n  const [selectedBuilding, setSelectedBuilding] = React.useState('building-1');\n  const [buildings] = React.useState(SINGLE_BUILDING_USER_DATA);\n  \n  // Auto-forward for single building user\n  React.useEffect(() => {\n    if (buildings.length === 1 && !mockCurrentSearch.includes('building=')) {\n      mockCurrentSearch = `?building=${buildings[0].id}`;\n      mockSetLocation(`/residents/building?building=${buildings[0].id}`);\n    }\n  }, [buildings]);\n\n  return (\n    <div data-testid=\"single-building-details-screen\">\n      <div data-testid=\"header-no-back\">\n        <h1 data-testid=\"building-title\">Building Details</h1>\n      </div>\n      <div data-testid=\"building-info\">\n        <p data-testid=\"selected-building-id\">{selectedBuilding}</p>\n        <p>Single building - no back button</p>\n        <button data-testid=\"view-documents-btn\">View Documents</button>\n      </div>\n    </div>\n  );\n};\n\ndescribe('Hierarchical Navigation User Flows', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          retry: false,\n        },\n      },\n    });\n\n    // Reset mocks and state\n    jest.clearAllMocks();\n    mockSetLocation.mockClear();\n    mockCurrentLocation = '/residents/building';\n    mockCurrentSearch = '';\n\n    // Mock window.history\n    Object.defineProperty(window, 'history', {\n      value: {\n        pushState: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Mock successful API responses\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => MULTIPLE_BUILDINGS_USER_DATA,\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  const renderWithProviders = (component: React.ReactElement) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        {component}\n      </QueryClientProvider>\n    );\n  };\n\n  describe('Multiple Buildings User Flow', () => {\n    test('should complete full user flow: landing → selection → details → back', async () => {\n      renderWithProviders(<MockBuildingPage />);\n\n      // 1. Initial landing - should show loading then selection\n      expect(screen.getByTestId('loading-state')).toBeInTheDocument();\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('selection-title')).toHaveTextContent('Select Building');\n      expect(screen.getByTestId('buildings-grid')).toBeInTheDocument();\n\n      // Should show all available buildings\n      expect(screen.getByTestId('building-card-building-1')).toHaveTextContent('Building A');\n      expect(screen.getByTestId('building-card-building-2')).toHaveTextContent('Building B');\n      expect(screen.getByTestId('building-card-building-3')).toHaveTextContent('Building C');\n\n      // 2. User selects a building\n      const building2Card = screen.getByTestId('building-card-building-2');\n      fireEvent.click(building2Card);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n      });\n\n      // Should show building details with back button\n      expect(screen.getByTestId('building-title')).toHaveTextContent('Building Details');\n      expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-2');\n      expect(screen.getByTestId('back-to-buildings')).toBeInTheDocument();\n\n      // Should update router\n      expect(mockSetLocation).toHaveBeenCalledWith('/residents/building?building=building-2');\n\n      // 3. User clicks back\n      const backButton = screen.getByTestId('back-to-buildings');\n      fireEvent.click(backButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      // Should return to selection screen\n      expect(screen.getByTestId('selection-title')).toHaveTextContent('Select Building');\n      expect(screen.getByTestId('buildings-grid')).toBeInTheDocument();\n      expect(mockSetLocation).toHaveBeenCalledWith('/residents/building');\n    });\n\n    test('should handle direct URL navigation to building details', async () => {\n      // Simulate direct navigation to building details\n      mockCurrentSearch = '?building=building-1';\n      \n      renderWithProviders(<MockBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n      });\n\n      // Should land directly on building details\n      expect(screen.getByTestId('building-title')).toHaveTextContent('Building Details');\n      expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');\n      expect(screen.getByTestId('back-to-buildings')).toBeInTheDocument();\n    });\n\n    test('should show back button only when multiple buildings are available', async () => {\n      mockCurrentSearch = '?building=building-2';\n      \n      renderWithProviders(<MockBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n      });\n\n      // With multiple buildings, should show back button\n      expect(screen.getByTestId('back-to-buildings')).toBeInTheDocument();\n    });\n\n    test('should handle building selection errors gracefully', async () => {\n      // Mock API failure\n      mockFetch.mockRejectedValue(new Error('API Error'));\n      \n      renderWithProviders(<MockBuildingPage />);\n\n      // Should handle loading state\n      expect(screen.getByTestId('loading-state')).toBeInTheDocument();\n\n      // After timeout, should still show selection screen (even with empty data)\n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Single Building User Flow', () => {\n    test('should auto-forward single building users to details', async () => {\n      renderWithProviders(<MockSingleBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('single-building-details-screen')).toBeInTheDocument();\n      });\n\n      // Should land directly on details, no selection screen\n      expect(screen.getByTestId('building-title')).toHaveTextContent('Building Details');\n      expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');\n      \n      // Should NOT show back button (single building)\n      expect(screen.queryByTestId('back-to-buildings')).not.toBeInTheDocument();\n      expect(screen.getByTestId('header-no-back')).toBeInTheDocument();\n\n      // Should auto-forward URL\n      expect(mockSetLocation).toHaveBeenCalledWith('/residents/building?building=building-1');\n    });\n\n    test('should handle single building direct URL access', async () => {\n      // User directly accesses with building param\n      mockCurrentSearch = '?building=building-1';\n      \n      renderWithProviders(<MockSingleBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('single-building-details-screen')).toBeInTheDocument();\n      });\n\n      // Should show details without back button\n      expect(screen.getByTestId('building-title')).toHaveTextContent('Building Details');\n      expect(screen.queryByTestId('back-to-buildings')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('URL State Management', () => {\n    test('should maintain URL consistency throughout navigation', async () => {\n      renderWithProviders(<MockBuildingPage />);\n\n      // Start with base URL\n      expect(mockCurrentLocation).toBe('/residents/building');\n      expect(mockCurrentSearch).toBe('');\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      // Select building - should update URL\n      const buildingCard = screen.getByTestId('building-card-building-1');\n      fireEvent.click(buildingCard);\n\n      expect(mockCurrentSearch).toBe('?building=building-1');\n      expect(mockSetLocation).toHaveBeenCalledWith('/residents/building?building=building-1');\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n      });\n\n      // Go back - should clear URL parameters\n      const backButton = screen.getByTestId('back-to-buildings');\n      fireEvent.click(backButton);\n\n      expect(mockCurrentSearch).toBe('');\n      expect(mockSetLocation).toHaveBeenCalledWith('/residents/building');\n    });\n\n    test('should handle malformed URL parameters', async () => {\n      // Simulate malformed or non-existent building ID\n      mockCurrentSearch = '?building=nonexistent-id';\n      \n      renderWithProviders(<MockBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n      });\n\n      // Should still attempt to show details (graceful degradation)\n      expect(screen.getByTestId('selected-building-id')).toHaveTextContent('nonexistent-id');\n    });\n\n    test('should handle multiple URL parameters correctly', async () => {\n      // Simulate URL with extra parameters\n      mockCurrentSearch = '?building=building-1&extra=param&another=value';\n      \n      renderWithProviders(<MockBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n      });\n\n      // Should extract building parameter correctly\n      expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');\n    });\n  });\n\n  describe('User Experience Scenarios', () => {\n    test('should handle quick back-and-forth navigation', async () => {\n      renderWithProviders(<MockBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      // Quick selection\n      fireEvent.click(screen.getByTestId('building-card-building-1'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n      });\n\n      // Quick back\n      fireEvent.click(screen.getByTestId('back-to-buildings'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      // Select different building\n      fireEvent.click(screen.getByTestId('building-card-building-3'));\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n        expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-3');\n      });\n    });\n\n    test('should preserve selection when navigating away and back', async () => {\n      // Simulate user navigating to building details\n      mockCurrentSearch = '?building=building-2';\n      \n      renderWithProviders(<MockBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-details-screen')).toBeInTheDocument();\n        expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-2');\n      });\n\n      // Simulate user navigating away (e.g., to another page) and back\n      // In a real app, this would be handled by route changes\n      mockCurrentSearch = '';\n      \n      // Simulate returning to the page\n      renderWithProviders(<MockBuildingPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      // Should show selection screen (no preserved state without URL params)\n      expect(screen.getByTestId('buildings-grid')).toBeInTheDocument();\n    });\n  });\n\n  describe('Manager Residences Page Navigation Flow', () => {\n    // Mock Manager Residences page component with organization → building hierarchy\n    const MockManagerResidencesPage = withHierarchicalSelection(() => {\n      const { organizationId, buildingId, showBackButton, onBack } = useContext(HierarchyContext);\n      \n      return (\n        <div data-testid=\"manager-residences-screen\">\n          <div data-testid=\"residences-title\">Manager Residences</div>\n          <div data-testid=\"selected-organization-id\">{organizationId || 'none'}</div>\n          <div data-testid=\"selected-building-id\">{buildingId || 'none'}</div>\n          {showBackButton && (\n            <button data-testid=\"back-to-selection\" onClick={onBack}>\n              Back to Selection\n            </button>\n          )}\n        </div>\n      );\n    }, {\n      hierarchy: ['organization', 'building']\n    });\n\n    test('should navigate through organization → building flow for manager residences', async () => {\n      // Mock API responses for organizations and buildings\n      const mockOrganizationsData = [\n        { id: 'org-1', name: 'Organization A' },\n        { id: 'org-2', name: 'Organization B' },\n      ];\n\n      const mockBuildingsData = [\n        { id: 'building-1', name: 'Building A', organizationId: 'org-1' },\n        { id: 'building-2', name: 'Building B', organizationId: 'org-1' },\n      ];\n\n      let apiCallCount = 0;\n      mockFetch.mockImplementation((url) => {\n        apiCallCount++;\n        if (url.includes('/api/organizations')) {\n          return Promise.resolve({\n            ok: true,\n            json: async () => mockOrganizationsData,\n          });\n        }\n        if (url.includes('/api/manager/buildings')) {\n          return Promise.resolve({\n            ok: true,\n            json: async () => ({ buildings: mockBuildingsData }),\n          });\n        }\n        return Promise.reject(new Error(`Unexpected URL: ${url}`));\n      });\n\n      renderWithProviders(<MockManagerResidencesPage />);\n\n      // 1. Should start with organization selection\n      await waitFor(() => {\n        expect(screen.getByTestId('organization-selection-screen')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('selection-title')).toHaveTextContent('Select Organization');\n      expect(screen.getByTestId('org-card-org-1')).toHaveTextContent('Organization A');\n      expect(screen.getByTestId('org-card-org-2')).toHaveTextContent('Organization B');\n\n      // 2. Select an organization\n      fireEvent.click(screen.getByTestId('org-card-org-1'));\n\n      // 3. Should move to building selection\n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('selection-title')).toHaveTextContent('Select Building');\n      expect(screen.getByTestId('building-card-building-1')).toHaveTextContent('Building A');\n      expect(screen.getByTestId('building-card-building-2')).toHaveTextContent('Building B');\n\n      // 4. Select a building\n      fireEvent.click(screen.getByTestId('building-card-building-1'));\n\n      // 5. Should reach the manager residences screen\n      await waitFor(() => {\n        expect(screen.getByTestId('manager-residences-screen')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('residences-title')).toHaveTextContent('Manager Residences');\n      expect(screen.getByTestId('selected-organization-id')).toHaveTextContent('org-1');\n      expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');\n      expect(screen.getByTestId('back-to-selection')).toBeInTheDocument();\n    });\n\n    test('should auto-forward when manager has single building in organization', async () => {\n      // Mock single building response\n      const mockOrganizationsData = [\n        { id: 'org-1', name: 'Organization A' },\n      ];\n\n      const mockSingleBuildingData = [\n        { id: 'building-1', name: 'Single Building', organizationId: 'org-1' },\n      ];\n\n      mockFetch.mockImplementation((url) => {\n        if (url.includes('/api/organizations')) {\n          return Promise.resolve({\n            ok: true,\n            json: async () => mockOrganizationsData,\n          });\n        }\n        if (url.includes('/api/manager/buildings')) {\n          return Promise.resolve({\n            ok: true,\n            json: async () => ({ buildings: mockSingleBuildingData }),\n          });\n        }\n        return Promise.reject(new Error(`Unexpected URL: ${url}`));\n      });\n\n      // Start with organization already selected\n      mockCurrentSearch = '?organization=org-1';\n      \n      renderWithProviders(<MockManagerResidencesPage />);\n\n      // Should auto-forward through single building to final screen\n      await waitFor(() => {\n        expect(screen.getByTestId('manager-residences-screen')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('selected-organization-id')).toHaveTextContent('org-1');\n      expect(screen.getByTestId('selected-building-id')).toHaveTextContent('building-1');\n    });\n\n    test('should handle back navigation in manager residences hierarchy', async () => {\n      const mockOrganizationsData = [\n        { id: 'org-1', name: 'Organization A' },\n        { id: 'org-2', name: 'Organization B' },\n      ];\n\n      const mockBuildingsData = [\n        { id: 'building-1', name: 'Building A', organizationId: 'org-1' },\n        { id: 'building-2', name: 'Building B', organizationId: 'org-1' },\n      ];\n\n      mockFetch.mockImplementation((url) => {\n        if (url.includes('/api/organizations')) {\n          return Promise.resolve({\n            ok: true,\n            json: async () => mockOrganizationsData,\n          });\n        }\n        if (url.includes('/api/manager/buildings')) {\n          return Promise.resolve({\n            ok: true,\n            json: async () => ({ buildings: mockBuildingsData }),\n          });\n        }\n        return Promise.reject(new Error(`Unexpected URL: ${url}`));\n      });\n\n      // Start with both organization and building selected\n      mockCurrentSearch = '?organization=org-1&building=building-1';\n      \n      renderWithProviders(<MockManagerResidencesPage />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('manager-residences-screen')).toBeInTheDocument();\n      });\n\n      // Click back button\n      fireEvent.click(screen.getByTestId('back-to-selection'));\n\n      // Should return to building selection\n      await waitFor(() => {\n        expect(screen.getByTestId('building-selection-screen')).toBeInTheDocument();\n      });\n\n      expect(screen.getByTestId('selection-title')).toHaveTextContent('Select Building');\n    });\n  });\n});"],"version":3}