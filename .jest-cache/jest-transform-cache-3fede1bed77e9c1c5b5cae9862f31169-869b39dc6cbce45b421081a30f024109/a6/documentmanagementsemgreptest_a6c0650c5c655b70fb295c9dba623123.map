{"file":"/home/runner/workspace/tests/security/document-management-semgrep.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/security/document-management-semgrep.test.ts"],"sourcesContent":["/**\n * Document Management Security Tests (Semgrep Integration)\n * \n * This test suite validates security controls using patterns that would be detected\n * by Semgrep static analysis tool. Each test represents a security vulnerability\n * category that Semgrep would flag in real code.\n * \n * Test Categories:\n * 1. SQL Injection Prevention (semgrep: sql-injection)\n * 2. Path Traversal Protection (semgrep: path-traversal)\n * 3. File Upload Security (semgrep: file-upload-security)\n * 4. Input Validation (semgrep: input-validation)\n * 5. Authentication & Authorization (semgrep: auth-security)\n * \n * Each test demonstrates both vulnerable patterns that Semgrep would flag\n * and secure implementations that pass security validation.\n */\n\nimport { describe, it, expect } from '@jest/globals';\n\ndescribe('Document Management Security Tests (Semgrep Patterns)', () => {\n  \n  describe('SQL Injection Prevention (semgrep: sql-injection)', () => {\n    it('should use parameterized queries for document searches', () => {\n      // This simulates secure database query patterns that Semgrep would approve\n      const secureDocumentQuery = (searchTerm: string, userId: string) => {\n        // Good: Parameterized query (Semgrep would approve)\n        const query = 'SELECT * FROM documents WHERE title = ? AND user_id = ?';\n        const params = [searchTerm, userId];\n        return { query, params };\n      };\n\n      const result = secureDocumentQuery('test document', 'user123');\n      expect(result.query).toContain('?');\n      expect(result.params).toHaveLength(2);\n      expect(result.params[0]).toBe('test document');\n      expect(result.params[1]).toBe('user123');\n    });\n\n    it('should sanitize document metadata for database operations', () => {\n      const sanitizeForDB = (input: string): string => {\n        // Escape single quotes and remove null bytes\n        return input\n          .replace(/'/g, \"''\")\n          .replace(/\\0/g, '')\n          .trim();\n      };\n\n      expect(sanitizeForDB(\"O'Connor Document\")).toBe(\"O''Connor Document\");\n      expect(sanitizeForDB(\"Test\\0Document\")).toBe(\"TestDocument\");\n      expect(sanitizeForDB(\"  Normal Document  \")).toBe(\"Normal Document\");\n    });\n  });\n\n  describe('Path Traversal Protection (semgrep: path-traversal)', () => {\n    it('should prevent directory traversal in document file paths', () => {\n      const secureFilePath = (filename: string): string => {\n        // Remove path traversal patterns\n        const cleaned = filename\n          .replace(/\\.\\./g, '')  // Remove ..\n          .replace(/\\//g, '')    // Remove forward slashes\n          .replace(/\\\\/g, '')    // Remove backslashes\n          .replace(/:/g, '');    // Remove colons (Windows drive letters)\n        \n        return `documents/${cleaned}`;\n      };\n\n      // Test various path traversal attempts\n      expect(secureFilePath('../../../etc/passwd')).toBe('documents/etcpasswd');\n      expect(secureFilePath('..\\\\..\\\\windows\\\\system32\\\\config')).toBe('documents/windowssystem32config');\n      expect(secureFilePath('normal-document.pdf')).toBe('documents/normal-document.pdf');\n      expect(secureFilePath('c:\\\\temp\\\\file.txt')).toBe('documents/ctempfile.txt');\n    });\n\n    it('should validate document upload paths are within allowed directories', () => {\n      const isValidUploadPath = (path: string): boolean => {\n        const allowedPaths = ['/uploads/', '/documents/', '/temp/'];\n        const normalizedPath = path.replace(/\\\\/g, '/');\n        \n        // Check if path starts with allowed directory\n        const isInAllowedDir = allowedPaths.some(allowed => \n          normalizedPath.startsWith(allowed)\n        );\n        \n        // Check for path traversal\n        const hasTraversal = normalizedPath.includes('../') || normalizedPath.includes('..\\\\');\n        \n        return isInAllowedDir && !hasTraversal;\n      };\n\n      expect(isValidUploadPath('/uploads/document.pdf')).toBe(true);\n      expect(isValidUploadPath('/documents/legal/contract.pdf')).toBe(true);\n      expect(isValidUploadPath('/temp/processing.tmp')).toBe(true);\n      \n      // Should reject traversal attempts\n      expect(isValidUploadPath('/uploads/../../../etc/passwd')).toBe(false);\n      expect(isValidUploadPath('/documents/../../config/app.config')).toBe(false);\n      expect(isValidUploadPath('/unauthorized/file.pdf')).toBe(false);\n    });\n  });\n\n  describe('File Upload Security (semgrep: file-upload-security)', () => {\n    it('should validate file types against whitelist', () => {\n      const allowedMimeTypes = [\n        'application/pdf',\n        'image/jpeg',\n        'image/png',\n        'text/plain',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      ];\n\n      const isAllowedFileType = (mimeType: string): boolean => {\n        return allowedMimeTypes.includes(mimeType.toLowerCase());\n      };\n\n      // Valid file types\n      expect(isAllowedFileType('application/pdf')).toBe(true);\n      expect(isAllowedFileType('image/jpeg')).toBe(true);\n      expect(isAllowedFileType('text/plain')).toBe(true);\n\n      // Invalid/dangerous file types\n      expect(isAllowedFileType('application/x-executable')).toBe(false);\n      expect(isAllowedFileType('text/javascript')).toBe(false);\n      expect(isAllowedFileType('application/x-shockwave-flash')).toBe(false);\n    });\n\n    it('should detect potentially dangerous file extensions', () => {\n      const dangerousExtensions = [\n        '.exe', '.bat', '.cmd', '.scr', '.pif', '.com',\n        '.js', '.vbs', '.jar', '.sh', '.php', '.asp',\n        '.jsp', '.pl', '.py', '.rb'\n      ];\n\n      const isDangerousFileType = (filename: string, mimeType: string): boolean => {\n        const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));\n        return dangerousExtensions.includes(ext);\n      };\n\n      // Should detect dangerous files\n      expect(isDangerousFileType('malware.exe', 'application/octet-stream')).toBe(true);\n      expect(isDangerousFileType('script.js', 'text/javascript')).toBe(true);\n      expect(isDangerousFileType('virus.bat', 'text/plain')).toBe(true);\n\n      // Should allow safe files\n      expect(isDangerousFileType('document.pdf', 'application/pdf')).toBe(false);\n      expect(isDangerousFileType('image.jpg', 'image/jpeg')).toBe(false);\n      expect(isDangerousFileType('text.txt', 'text/plain')).toBe(false);\n    });\n\n    it('should enforce role-based file size limits', () => {\n      const getRoleBasedSizeLimit = (userRole: string): number => {\n        const limits: { [key: string]: number } = {\n          'admin': 100 * 1024 * 1024,    // 100MB\n          'manager': 50 * 1024 * 1024,   // 50MB\n          'resident': 25 * 1024 * 1024,  // 25MB\n          'tenant': 10 * 1024 * 1024     // 10MB\n        };\n        return limits[userRole] || 5 * 1024 * 1024; // Default 5MB\n      };\n\n      const validateFileSize = (fileSize: number, userRole: string): boolean => {\n        return fileSize <= getRoleBasedSizeLimit(userRole);\n      };\n\n      const largeFile = 30 * 1024 * 1024; // 30MB\n      \n      expect(validateFileSize(largeFile, 'admin')).toBe(true);\n      expect(validateFileSize(largeFile, 'manager')).toBe(true);\n      expect(validateFileSize(largeFile, 'resident')).toBe(false);\n      expect(validateFileSize(largeFile, 'tenant')).toBe(false);\n    });\n  });\n\n  describe('Input Validation (semgrep: input-validation)', () => {\n    it('should sanitize document metadata inputs', () => {\n      const sanitizeDocumentInput = (input: string): string => {\n        return input\n          // Remove script tags\n          .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n          // Remove all HTML tags\n          .replace(/<[^>]+>/g, '')\n          // Remove javascript: protocol\n          .replace(/javascript:/gi, '')\n          // Remove event handlers\n          .replace(/on\\w+\\s*=/gi, '')\n          // Remove data: URLs\n          .replace(/data:[^;]*;base64,/gi, '')\n          // Trim whitespace\n          .trim();\n      };\n\n      const maliciousInputs = [\n        '<script>alert(\"XSS\")</script>Document Title',\n        'Title<img src=x onerror=alert(1)>',\n        'javascript:alert(\"XSS\")Document',\n        '<iframe src=\"javascript:alert(1)\"></iframe>Title',\n        'Document<svg onload=alert(1)>',\n        'Title<body onload=alert(1)>'\n      ];\n\n      maliciousInputs.forEach(input => {\n        const sanitized = sanitizeDocumentInput(input);\n        expect(sanitized).not.toContain('<script>');\n        expect(sanitized).not.toContain('javascript:');\n        expect(sanitized).not.toContain('onerror=');\n        expect(sanitized).not.toContain('onload=');\n        expect(sanitized).not.toContain('<iframe>');\n      });\n    });\n\n    it('should validate document categories against whitelist', () => {\n      const allowedCategories = [\n        'legal', 'financial', 'maintenance', 'general',\n        'building_rules', 'meeting_minutes', 'insurance',\n        'contracts', 'correspondence', 'technical'\n      ];\n\n      const validateCategory = (category: string): boolean => {\n        const normalized = category.toLowerCase().trim();\n        return allowedCategories.includes(normalized);\n      };\n\n      expect(validateCategory('legal')).toBe(true);\n      expect(validateCategory('FINANCIAL')).toBe(true);\n      expect(validateCategory('invalid_category')).toBe(false);\n      expect(validateCategory('<script>alert(1)</script>legal')).toBe(false);\n    });\n  });\n});"],"version":3}