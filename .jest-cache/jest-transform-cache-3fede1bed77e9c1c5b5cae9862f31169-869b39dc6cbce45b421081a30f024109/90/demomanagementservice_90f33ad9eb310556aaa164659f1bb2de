a9442c0b39772c1b329d873d9463746d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DemoManagementService = void 0;
/**
 * Demo Management Service.
 *
 * Provides backend services for managing demo organizations in production.
 * This service ensures demo data is always available and properly synchronized.
 */
class DemoManagementService {
    static DEMO_ORG_NAME = 'Demo';
    static OPEN_DEMO_ORG_NAME = 'Open Demo';
    /**
     * Check if demo organizations are healthy and properly configured.
     */
    static async checkDemoHealth() {
        return {
            healthy: true,
            status: { message: 'Demo sync functionality removed' },
            message: 'Demo organizations managed locally only',
            timestamp: new Date().toISOString(),
        };
    }
    /**
     * Ensure demo organizations exist and are properly configured.
     * This is a safe operation that can be called during application startup.
     * DISABLED: Demo organization creation has been disabled per user request.
     */
    static async ensureDemoOrganizations() {
        // Demo organizations functionality disabled per user request - no database operations
        console.log('‚úÖ Demo organizations functionality disabled (skipped)');
        return {
            success: true,
            message: 'Demo organizations functionality disabled - skipping all database operations',
        };
    }
    /**
     * Force recreation of demo organizations.
     * DISABLED: Demo organization functionality has been disabled per user request.
     */
    static async recreateDemoOrganizations() {
        console.log('‚úÖ Demo organizations recreation skipped (disabled)');
        return {
            success: true,
            message: 'Demo organizations functionality disabled - recreation skipped',
        };
    }
    /**
     * Get demo organization information.
     * DISABLED: Demo organization functionality has been disabled per user request.
     */
    static async getDemoOrganizationInfo() {
        console.log('‚úÖ Demo organizations info retrieval skipped (disabled)');
        return {
            stats: {
                demoBuildings: 0,
                demoUsers: 0,
                openDemoBuildings: 0,
                openDemoUsers: 0,
            },
        };
    }
    /**
     * Initialize demo organizations during application startup.
     * DISABLED: Demo organization functionality has been disabled per user request.
     */
    static async initializeDemoOrganizations() {
        console.log('‚úÖ Demo organizations initialization skipped (disabled)');
        // Demo organizations functionality disabled per user request
        return;
    }
    /**
     * PRODUCTION FIX: Create basic demo organizations if they don't exist.
     * This ensures the database has the required organizations for production.
     */
    static async createBasicOrganizationsIfMissing() {
        try {
            const { Pool } = await Promise.resolve().then(() => __importStar(require('@neondatabase/serverless')));
            const { drizzle } = await Promise.resolve().then(() => __importStar(require('drizzle-orm/neon-serverless')));
            const { eq } = await Promise.resolve().then(() => __importStar(require('drizzle-orm')));
            const schema = await Promise.resolve().then(() => __importStar(require('../../shared/schema')));
            // Use shared database connection to avoid multiple pools
            const { db } = await Promise.resolve().then(() => __importStar(require('../db')));
            // Check if Demo organization exists
            const existingDemo = await db
                .select()
                .from(schema.organizations)
                .where(eq(schema.organizations.name, 'Demo'))
                .limit(1);
            if (existingDemo.length === 0) {
                console.log('üìù Creating Demo organization...');
                await db.insert(schema.organizations).values({
                    name: 'Demo',
                    type: 'demo',
                    address: '123 Demo Street',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1A 1A1',
                    isActive: true,
                });
            }
            // Check if Open Demo organization exists
            const existingOpenDemo = await db
                .select()
                .from(schema.organizations)
                .where(eq(schema.organizations.name, 'Open Demo'))
                .limit(1);
            if (existingOpenDemo.length === 0) {
                console.log('üìù Creating Open Demo organization...');
                await db.insert(schema.organizations).values({
                    name: 'Open Demo',
                    type: 'demo',
                    address: '456 Demo Avenue',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1B 1B1',
                    isActive: true,
                });
            }
            console.log('‚úÖ Demo organizations are properly configured');
        }
        catch (error) {
            // Continue anyway - this is not critical for production functionality
            console.log('‚ö†Ô∏è Demo organizations setup failed, but continuing...');
        }
    }
    /**
     * Scheduled maintenance for demo organizations.
     * This can be called periodically to ensure demo data stays fresh.
     */
    static async scheduledMaintenance() {
        const actions = [];
        try {
            console.log('üîß Running scheduled demo maintenance...');
            // Check current health
            const health = await this.checkDemoHealth();
            actions.push(`Health check: ${health.healthy ? 'HEALTHY' : 'UNHEALTHY'}`);
            if (!health.healthy) {
                // Note: Demo sync to production has been removed
                actions.push('Demo sync functionality removed - local management only');
                // Re-check health
                const newHealth = await this.checkDemoHealth();
                actions.push(`Post-sync health: ${newHealth.healthy ? 'HEALTHY' : 'STILL_UNHEALTHY'}`);
            }
            console.log('‚úÖ Scheduled demo maintenance completed');
            return {
                success: true,
                message: 'Scheduled maintenance completed successfully',
                actions,
            };
        }
        catch (error) {
            return {
                success: false,
                message: `Scheduled maintenance failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
                actions,
            };
        }
    }
}
exports.DemoManagementService = DemoManagementService;
exports.default = DemoManagementService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,