0765f8bb5efdc8e66884b487c28daf77
"use strict";
/**
 * Auto-forwarding and Back Button Logic Tests
 * Tests the smart navigation logic for auto-forwarding and back button visibility
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
(0, globals_1.describe)('Auto-forwarding Logic', () => {
    (0, globals_1.describe)('Single Option Auto-forwarding', () => {
        (0, globals_1.test)('should auto-forward when user has single organization', () => {
            const organizations = [
                { id: 'org-1', name: 'Organization A' }
            ];
            const currentLevel = 'organization';
            const organizationId = null;
            const shouldAutoForward = currentLevel === 'organization' &&
                organizations.length === 1 &&
                !organizationId;
            (0, globals_1.expect)(shouldAutoForward).toBe(true);
        });
        (0, globals_1.test)('should auto-forward when user has single building', () => {
            const buildings = [
                { id: 'building-1', name: 'Building A' }
            ];
            const currentLevel = 'building';
            const buildingId = null;
            const shouldAutoForward = currentLevel === 'building' &&
                buildings.length === 1 &&
                !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(true);
        });
        (0, globals_1.test)('should auto-forward when user has single residence', () => {
            const residences = [
                { id: 'residence-1', unitNumber: '101', buildingId: 'building-1' }
            ];
            const currentLevel = 'residence';
            const residenceId = null;
            const shouldAutoForward = currentLevel === 'residence' &&
                residences.length === 1 &&
                !residenceId;
            (0, globals_1.expect)(shouldAutoForward).toBe(true);
        });
    });
    (0, globals_1.describe)('Multiple Options - No Auto-forwarding', () => {
        (0, globals_1.test)('should NOT auto-forward when user has multiple organizations', () => {
            const organizations = [
                { id: 'org-1', name: 'Organization A' },
                { id: 'org-2', name: 'Organization B' }
            ];
            const currentLevel = 'organization';
            const organizationId = null;
            const shouldAutoForward = currentLevel === 'organization' &&
                organizations.length === 1 &&
                !organizationId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
        (0, globals_1.test)('should NOT auto-forward when user has multiple buildings', () => {
            const buildings = [
                { id: 'building-1', name: 'Building A' },
                { id: 'building-2', name: 'Building B' }
            ];
            const currentLevel = 'building';
            const buildingId = null;
            const shouldAutoForward = currentLevel === 'building' &&
                buildings.length === 1 &&
                !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
        (0, globals_1.test)('should NOT auto-forward when user has multiple residences', () => {
            const residences = [
                { id: 'residence-1', unitNumber: '101', buildingId: 'building-1' },
                { id: 'residence-2', unitNumber: '102', buildingId: 'building-1' }
            ];
            const currentLevel = 'residence';
            const residenceId = null;
            const shouldAutoForward = currentLevel === 'residence' &&
                residences.length === 1 &&
                !residenceId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
    });
    (0, globals_1.describe)('Already Selected - No Auto-forwarding', () => {
        (0, globals_1.test)('should NOT auto-forward when organization already selected', () => {
            const organizations = [
                { id: 'org-1', name: 'Organization A' }
            ];
            const currentLevel = 'organization';
            const organizationId = 'org-1'; // Already selected
            const shouldAutoForward = currentLevel === 'organization' &&
                organizations.length === 1 &&
                !organizationId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
        (0, globals_1.test)('should NOT auto-forward when building already selected', () => {
            const buildings = [
                { id: 'building-1', name: 'Building A' }
            ];
            const currentLevel = 'building';
            const buildingId = 'building-1'; // Already selected
            const shouldAutoForward = currentLevel === 'building' &&
                buildings.length === 1 &&
                !buildingId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
        (0, globals_1.test)('should NOT auto-forward when residence already selected', () => {
            const residences = [
                { id: 'residence-1', unitNumber: '101', buildingId: 'building-1' }
            ];
            const currentLevel = 'residence';
            const residenceId = 'residence-1'; // Already selected
            const shouldAutoForward = currentLevel === 'residence' &&
                residences.length === 1 &&
                !residenceId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
    });
    (0, globals_1.describe)('Wrong Level - No Auto-forwarding', () => {
        (0, globals_1.test)('should NOT auto-forward when at different level than expected', () => {
            const organizations = [
                { id: 'org-1', name: 'Organization A' }
            ];
            const currentLevel = 'building'; // Different level
            const organizationId = null;
            const shouldAutoForward = currentLevel === 'organization' &&
                organizations.length === 1 &&
                !organizationId;
            (0, globals_1.expect)(shouldAutoForward).toBe(false);
        });
    });
});
(0, globals_1.describe)('Back Button Logic', () => {
    (0, globals_1.describe)('Single-level Hierarchy (Residents)', () => {
        (0, globals_1.test)('should show back button for single-level hierarchy with multiple options', () => {
            const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };
            const buildingId = 'building-1';
            const buildings = [
                { id: 'building-1', name: 'Building A' },
                { id: 'building-2', name: 'Building B' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('building') &&
                hierarchyConfig.hierarchyLength === 1 &&
                !!buildingId &&
                buildings.length > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(true);
        });
        (0, globals_1.test)('should NOT show back button for single-level hierarchy with single option', () => {
            const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };
            const buildingId = 'building-1';
            const buildings = [
                { id: 'building-1', name: 'Building A' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('building') &&
                hierarchyConfig.hierarchyLength === 1 &&
                !!buildingId &&
                buildings.length > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(false);
        });
        (0, globals_1.test)('should NOT show back button when no selection made', () => {
            const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };
            const buildingId = null;
            const buildings = [
                { id: 'building-1', name: 'Building A' },
                { id: 'building-2', name: 'Building B' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('building') &&
                hierarchyConfig.hierarchyLength === 1 &&
                !!buildingId &&
                buildings.length > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(false);
        });
        (0, globals_1.test)('should NOT show back button for non-building single-level hierarchy', () => {
            const hierarchyConfig = { hierarchy: ['residence'], hierarchyLength: 1 };
            const buildingId = 'building-1';
            const buildings = [
                { id: 'building-1', name: 'Building A' },
                { id: 'building-2', name: 'Building B' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('building') &&
                hierarchyConfig.hierarchyLength === 1 &&
                !!buildingId &&
                buildings.length > 1;
            (0, globals_1.expect)(shouldShowBackButton).toBe(false);
        });
    });
    (0, globals_1.describe)('Multi-level Hierarchy (Managers)', () => {
        (0, globals_1.test)('should show back button for multi-level with multiple buildings', () => {
            const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };
            const buildingId = 'building-1';
            const buildings = [
                { id: 'building-1', name: 'Building A', organizationId: 'org-1' },
                { id: 'building-2', name: 'Building B', organizationId: 'org-1' },
                { id: 'building-3', name: 'Building C', organizationId: 'org-1' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('building') &&
                buildings.length > 1 &&
                !!buildingId;
            (0, globals_1.expect)(shouldShowBackButton).toBe(true);
        });
        (0, globals_1.test)('should show back button for multi-level with multiple organizations', () => {
            const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };
            const organizationId = 'org-1';
            const organizations = [
                { id: 'org-1', name: 'Organization A' },
                { id: 'org-2', name: 'Organization B' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('organization') &&
                organizations.length > 1 &&
                !!organizationId;
            (0, globals_1.expect)(shouldShowBackButton).toBe(true);
        });
        (0, globals_1.test)('should NOT show back button for multi-level with single building', () => {
            const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };
            const buildingId = 'building-1';
            const buildings = [
                { id: 'building-1', name: 'Building A', organizationId: 'org-1' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('building') &&
                buildings.length > 1 &&
                !!buildingId;
            (0, globals_1.expect)(shouldShowBackButton).toBe(false);
        });
    });
    (0, globals_1.describe)('Complex Hierarchy Scenarios', () => {
        (0, globals_1.test)('should show back button at residence level when multiple buildings exist', () => {
            const hierarchyConfig = { hierarchy: ['organization', 'building', 'residence'], hierarchyLength: 3 };
            const buildingId = 'building-1';
            const residenceId = 'residence-1';
            const buildings = [
                { id: 'building-1', name: 'Building A', organizationId: 'org-1' },
                { id: 'building-2', name: 'Building B', organizationId: 'org-1' }
            ];
            const shouldShowBackButton = hierarchyConfig.hierarchy.includes('building') &&
                buildings.length > 1 &&
                !!buildingId;
            (0, globals_1.expect)(shouldShowBackButton).toBe(true);
        });
        (0, globals_1.test)('should prioritize organization back button when multiple orgs and buildings exist', () => {
            const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };
            const organizationId = 'org-1';
            const buildingId = null; // At organization level
            const organizations = [
                { id: 'org-1', name: 'Organization A' },
                { id: 'org-2', name: 'Organization B' }
            ];
            const buildings = [
                { id: 'building-1', name: 'Building A', organizationId: 'org-1' },
                { id: 'building-2', name: 'Building B', organizationId: 'org-2' }
            ];
            // Should prioritize organization back button
            const shouldShowOrgBackButton = hierarchyConfig.hierarchy.includes('organization') &&
                organizations.length > 1 &&
                !!organizationId;
            const shouldShowBuildingBackButton = hierarchyConfig.hierarchy.includes('building') &&
                buildings.length > 1 &&
                !!buildingId;
            (0, globals_1.expect)(shouldShowOrgBackButton).toBe(true);
            (0, globals_1.expect)(shouldShowBuildingBackButton).toBe(false); // No buildingId
        });
    });
    (0, globals_1.describe)('Smart Back Button Behavior', () => {
        (0, globals_1.test)('should determine correct back button label for building level', () => {
            const currentLevel = 'complete'; // User is viewing details
            const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };
            const buildingId = 'building-1';
            const backButtonConfig = {
                showBackButton: hierarchyConfig.hierarchyLength === 1 && !!buildingId,
                backButtonLabel: 'Building'
            };
            (0, globals_1.expect)(backButtonConfig.showBackButton).toBe(true);
            (0, globals_1.expect)(backButtonConfig.backButtonLabel).toBe('Building');
        });
        (0, globals_1.test)('should determine correct back button label for organization level', () => {
            const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };
            const organizationId = 'org-1';
            const backButtonConfig = {
                showBackButton: !!organizationId,
                backButtonLabel: 'Organization'
            };
            (0, globals_1.expect)(backButtonConfig.showBackButton).toBe(true);
            (0, globals_1.expect)(backButtonConfig.backButtonLabel).toBe('Organization');
        });
        (0, globals_1.test)('should not show back button when no previous level exists', () => {
            const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };
            const buildingId = null; // At selection level
            const backButtonConfig = {
                showBackButton: hierarchyConfig.hierarchyLength === 1 && !!buildingId,
                backButtonLabel: undefined
            };
            (0, globals_1.expect)(backButtonConfig.showBackButton).toBe(false);
            (0, globals_1.expect)(backButtonConfig.backButtonLabel).toBe(undefined);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,