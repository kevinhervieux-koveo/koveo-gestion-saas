{"file":"/home/runner/workspace/tests/unit/hierarchical-selection-logic.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/hierarchical-selection-logic.test.ts"],"sourcesContent":["/**\n * Hierarchical Selection Logic Unit Tests\n * Tests the core logic functions for the hierarchical card-based navigation system\n */\n\nimport { describe, test, expect } from '@jest/globals';\n\n// Mock the getCurrentLevel function since it's not exported\nfunction getCurrentLevel(\n  hierarchy: ('organization' | 'building' | 'residence')[],\n  ids: { organizationId: string | null; buildingId: string | null; residenceId: string | null }\n): 'organization' | 'building' | 'residence' | 'complete' {\n  const { organizationId, buildingId, residenceId } = ids;\n\n  // Check each level in the hierarchy in order\n  for (let i = 0; i < hierarchy.length; i++) {\n    const level = hierarchy[i];\n    \n    if (level === 'organization' && !organizationId) {\n      return 'organization';\n    }\n    \n    // For building level, check if we need organization context\n    if (level === 'building' && !buildingId) {\n      // If organization is in hierarchy, we need organizationId first\n      if (hierarchy.includes('organization') && !organizationId) {\n        return 'organization';\n      }\n      // Otherwise, go directly to building selection\n      return 'building';\n    }\n    \n    if (level === 'residence' && !residenceId) {\n      // Need both organization and building if they're in hierarchy\n      if (hierarchy.includes('organization') && !organizationId) {\n        return 'organization';\n      }\n      if (hierarchy.includes('building') && !buildingId) {\n        return 'building';\n      }\n      return 'residence';\n    }\n  }\n\n  // All required levels in the hierarchy have been satisfied\n  return 'complete';\n}\n\ndescribe('Hierarchical Selection Logic', () => {\n  describe('getCurrentLevel function', () => {\n    \n    describe('Single-level hierarchies (Residents)', () => {\n      test('should return \"building\" when building hierarchy has no buildingId', () => {\n        const hierarchy: ('building')[] = ['building'];\n        const ids = { organizationId: null, buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('building');\n      });\n\n      test('should return \"complete\" when building hierarchy has buildingId', () => {\n        const hierarchy: ('building')[] = ['building'];\n        const ids = { organizationId: null, buildingId: 'building-123', residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('complete');\n      });\n\n      test('should return \"residence\" when residence hierarchy has no residenceId', () => {\n        const hierarchy: ('residence')[] = ['residence'];\n        const ids = { organizationId: null, buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('residence');\n      });\n\n      test('should return \"complete\" when residence hierarchy has residenceId', () => {\n        const hierarchy: ('residence')[] = ['residence'];\n        const ids = { organizationId: null, buildingId: null, residenceId: 'residence-123' };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('complete');\n      });\n    });\n\n    describe('Multi-level hierarchies (Managers)', () => {\n      test('should return \"organization\" when org->building hierarchy has no organizationId', () => {\n        const hierarchy: ('organization' | 'building')[] = ['organization', 'building'];\n        const ids = { organizationId: null, buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('organization');\n      });\n\n      test('should return \"building\" when org->building hierarchy has organizationId but no buildingId', () => {\n        const hierarchy: ('organization' | 'building')[] = ['organization', 'building'];\n        const ids = { organizationId: 'org-123', buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('building');\n      });\n\n      test('should return \"complete\" when org->building hierarchy has both IDs', () => {\n        const hierarchy: ('organization' | 'building')[] = ['organization', 'building'];\n        const ids = { organizationId: 'org-123', buildingId: 'building-123', residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('complete');\n      });\n\n      test('should return \"organization\" for full hierarchy when no organizationId', () => {\n        const hierarchy: ('organization' | 'building' | 'residence')[] = ['organization', 'building', 'residence'];\n        const ids = { organizationId: null, buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('organization');\n      });\n\n      test('should return \"building\" for full hierarchy when has org but no building', () => {\n        const hierarchy: ('organization' | 'building' | 'residence')[] = ['organization', 'building', 'residence'];\n        const ids = { organizationId: 'org-123', buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('building');\n      });\n\n      test('should return \"residence\" for full hierarchy when has org+building but no residence', () => {\n        const hierarchy: ('organization' | 'building' | 'residence')[] = ['organization', 'building', 'residence'];\n        const ids = { organizationId: 'org-123', buildingId: 'building-123', residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('residence');\n      });\n\n      test('should return \"complete\" for full hierarchy when has all IDs', () => {\n        const hierarchy: ('organization' | 'building' | 'residence')[] = ['organization', 'building', 'residence'];\n        const ids = { organizationId: 'org-123', buildingId: 'building-123', residenceId: 'residence-123' };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('complete');\n      });\n    });\n\n    describe('Complex dependency scenarios', () => {\n      test('should prioritize organization when building hierarchy requires it', () => {\n        const hierarchy: ('organization' | 'building')[] = ['organization', 'building'];\n        const ids = { organizationId: null, buildingId: 'building-123', residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        // Should still require organization first, even with buildingId present\n        expect(result).toBe('organization');\n      });\n\n      test('should prioritize organization when residence hierarchy requires it', () => {\n        const hierarchy: ('organization' | 'residence')[] = ['organization', 'residence'];\n        const ids = { organizationId: null, buildingId: null, residenceId: 'residence-123' };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        // Should still require organization first\n        expect(result).toBe('organization');\n      });\n\n      test('should prioritize building when residence hierarchy requires it', () => {\n        const hierarchy: ('building' | 'residence')[] = ['building', 'residence'];\n        const ids = { organizationId: null, buildingId: null, residenceId: 'residence-123' };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        // Should still require building first\n        expect(result).toBe('building');\n      });\n    });\n\n    describe('Edge cases', () => {\n      test('should handle empty hierarchy', () => {\n        const hierarchy: never[] = [];\n        const ids = { organizationId: null, buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('complete');\n      });\n\n      test('should handle single organization hierarchy', () => {\n        const hierarchy: ('organization')[] = ['organization'];\n        const ids = { organizationId: null, buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('organization');\n      });\n\n      test('should return complete for single organization when org provided', () => {\n        const hierarchy: ('organization')[] = ['organization'];\n        const ids = { organizationId: 'org-123', buildingId: null, residenceId: null };\n        \n        const result = getCurrentLevel(hierarchy, ids);\n        \n        expect(result).toBe('complete');\n      });\n    });\n  });\n\n  describe('Auto-forwarding Logic', () => {\n    test('should describe auto-forward conditions for single building', () => {\n      // Test logic: if (currentLevel === 'building' && buildings.length === 1 && !buildingId)\n      const currentLevel = 'building';\n      const buildingsLength = 1;\n      const buildingId = null;\n      \n      const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;\n      \n      expect(shouldAutoForward).toBe(true);\n    });\n\n    test('should not auto-forward when multiple buildings', () => {\n      const currentLevel = 'building';\n      const buildingsLength = 2;\n      const buildingId = null;\n      \n      const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n\n    test('should not auto-forward when building already selected', () => {\n      const currentLevel = 'building';\n      const buildingsLength = 1;\n      const buildingId = 'building-123';\n      \n      const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n\n    test('should not auto-forward when not at building level', () => {\n      const currentLevel = 'organization';\n      const buildingsLength = 1;\n      const buildingId = null;\n      \n      const shouldAutoForward = currentLevel === 'building' && buildingsLength === 1 && !buildingId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n  });\n\n  describe('Back Button Logic', () => {\n    test('should show back button for single-level hierarchy with multiple options', () => {\n      // Test logic: config.hierarchy.length === 1 && buildingId && buildings.length > 1\n      const hierarchyLength = 1;\n      const buildingId = 'building-123';\n      const buildingsLength = 2;\n      \n      const shouldShowBackButton = hierarchyLength === 1 && !!buildingId && buildingsLength > 1;\n      \n      expect(shouldShowBackButton).toBe(true);\n    });\n\n    test('should not show back button for single-level hierarchy with single option', () => {\n      const hierarchyLength = 1;\n      const buildingId = 'building-123';\n      const buildingsLength = 1;\n      \n      const shouldShowBackButton = hierarchyLength === 1 && !!buildingId && buildingsLength > 1;\n      \n      expect(shouldShowBackButton).toBe(false);\n    });\n\n    test('should not show back button when no selection made', () => {\n      const hierarchyLength = 1;\n      const buildingId = null;\n      const buildingsLength = 2;\n      \n      const shouldShowBackButton = hierarchyLength === 1 && !!buildingId && buildingsLength > 1;\n      \n      expect(shouldShowBackButton).toBe(false);\n    });\n\n    test('should show back button for multi-level hierarchy with multiple options', () => {\n      // Test logic: buildings.length > 1 && buildingId\n      const hierarchyLength = 2;\n      const buildingId = 'building-123';\n      const buildingsLength = 3;\n      \n      const shouldShowBackButton = buildingsLength > 1 && !!buildingId;\n      \n      expect(shouldShowBackButton).toBe(true);\n    });\n  });\n\n  describe('URL Parameter Parsing', () => {\n    test('should parse organization parameter correctly', () => {\n      const mockUrlParams = new URLSearchParams('?organization=org-123&building=building-456');\n      \n      const organizationId = mockUrlParams.get('organization');\n      const buildingId = mockUrlParams.get('building');\n      const residenceId = mockUrlParams.get('residence');\n      \n      expect(organizationId).toBe('org-123');\n      expect(buildingId).toBe('building-456');\n      expect(residenceId).toBe(null);\n    });\n\n    test('should handle missing parameters', () => {\n      const mockUrlParams = new URLSearchParams('?building=building-456');\n      \n      const organizationId = mockUrlParams.get('organization');\n      const buildingId = mockUrlParams.get('building');\n      const residenceId = mockUrlParams.get('residence');\n      \n      expect(organizationId).toBe(null);\n      expect(buildingId).toBe('building-456');\n      expect(residenceId).toBe(null);\n    });\n\n    test('should handle empty search params', () => {\n      const mockUrlParams = new URLSearchParams('');\n      \n      const organizationId = mockUrlParams.get('organization');\n      const buildingId = mockUrlParams.get('building');\n      const residenceId = mockUrlParams.get('residence');\n      \n      expect(organizationId).toBe(null);\n      expect(buildingId).toBe(null);\n      expect(residenceId).toBe(null);\n    });\n  });\n});"],"version":3}