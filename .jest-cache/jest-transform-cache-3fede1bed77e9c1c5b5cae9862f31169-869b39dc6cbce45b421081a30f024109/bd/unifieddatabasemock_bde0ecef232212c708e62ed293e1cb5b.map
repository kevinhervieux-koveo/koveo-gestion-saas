{"file":"/home/runner/workspace/tests/mocks/unified-database-mock.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/mocks/unified-database-mock.ts"],"sourcesContent":["/**\n * Unified Database Mock for Jest Tests\n * This provides a consistent mock interface that works across all test types\n */\n\nimport { jest } from '@jest/globals';\n\n// Global state management for test isolation\nlet mockIdCounter = 1;\nconst mockDataStore = new Map();\n\nexport const generateMockId = () => {\n  return `mock-${mockIdCounter++}-${Date.now().toString(36)}`;\n};\n\nexport const clearMockData = () => {\n  mockDataStore.clear();\n  mockIdCounter = 1;\n};\n\n// Create a chainable query builder that handles all Drizzle operations\nconst createQueryBuilder = (defaultResult: any = []) => {\n  const builder: any = {};\n  \n  // All chainable methods return the builder itself\n  const chainableMethods = [\n    'from', 'where', 'leftJoin', 'innerJoin', 'rightJoin',\n    'select', 'set', 'values', 'returning', 'orderBy', 'limit',\n    'offset', 'groupBy', 'having', 'onConflictDoUpdate', 'onConflictDoNothing'\n  ];\n  \n  chainableMethods.forEach(method => {\n    builder[method] = jest.fn().mockImplementation((...args) => {\n      // Special handling for values method to return proper data\n      if (method === 'values') {\n        const data = args[0];\n        builder._insertData = data;\n      }\n      return builder;\n    });\n  });\n  \n  // Make the builder thenable (promise-like)\n  builder.then = jest.fn().mockImplementation((resolve: any) => {\n    let result = defaultResult;\n    \n    // If this is an insert operation with data, return mock records\n    if (builder._insertData) {\n      const data = builder._insertData;\n      const now = new Date();\n      \n      if (Array.isArray(data)) {\n        result = data.map(item => ({\n          id: generateMockId(),\n          ...item,\n          createdAt: now,\n          updatedAt: now\n        }));\n      } else {\n        result = [{\n          id: generateMockId(),\n          ...data,\n          createdAt: now,\n          updatedAt: now\n        }];\n      }\n    }\n    \n    return Promise.resolve(result).then(resolve);\n  });\n  \n  builder.catch = jest.fn().mockImplementation((reject: any) => {\n    return Promise.resolve(defaultResult).catch(reject);\n  });\n  \n  builder.finally = jest.fn().mockImplementation((finallyFn: any) => {\n    return Promise.resolve(defaultResult).finally(finallyFn);\n  });\n\n  return builder;\n};\n\n// Main mock database object\nexport const mockDb = {\n  // Core database operations\n  query: jest.fn().mockImplementation(async (sql: string) => {\n    if (sql.includes('SELECT version()')) {\n      return [{ version: 'PostgreSQL 15.0 (Mock)' }];\n    }\n    return [];\n  }),\n  \n  // Insert operations\n  insert: jest.fn().mockImplementation((table: any) => {\n    return createQueryBuilder([{ id: generateMockId() }]);\n  }),\n  \n  // Select operations\n  select: jest.fn().mockImplementation((fields?: any) => {\n    return createQueryBuilder([]);\n  }),\n  \n  // Update operations\n  update: jest.fn().mockImplementation((table: any) => {\n    return createQueryBuilder({ affectedRows: 1 });\n  }),\n  \n  // Delete operations\n  delete: jest.fn().mockImplementation((table: any) => {\n    return createQueryBuilder({ affectedRows: 1 });\n  }),\n  \n  // Transaction support\n  transaction: jest.fn().mockImplementation(async (callback: any) => {\n    return await callback(mockDb);\n  }),\n  \n  // Batch operations\n  batch: jest.fn().mockImplementation(async (queries: any[]) => {\n    return queries.map(() => ({ affectedRows: 1 }));\n  }),\n  \n  // With clause support\n  $with: jest.fn().mockImplementation(() => createQueryBuilder([])),\n  \n  // Raw SQL support\n  execute: jest.fn().mockImplementation(async () => ({ rows: [] })),\n  \n  // Connection management (for integration tests)\n  end: jest.fn().mockResolvedValue(void 0),\n  connect: jest.fn().mockResolvedValue(void 0)\n};\n\n// Mock schema tables for type safety\nconst createMockTable = (tableName: string) => ({\n  _: {\n    name: tableName,\n    schema: undefined,\n    columns: {},\n    baseName: tableName\n  },\n  // Common column mocks\n  id: { name: 'id' },\n  email: { name: 'email' },\n  name: { name: 'name' },\n  role: { name: 'role' },\n  userId: { name: 'userId' },\n  organizationId: { name: 'organizationId' },\n  buildingId: { name: 'buildingId' },\n  residenceId: { name: 'residenceId' },\n  status: { name: 'status' },\n  createdAt: { name: 'createdAt' },\n  updatedAt: { name: 'updatedAt' }\n});\n\n// Export mock schema for tests to import\nexport const mockSchema = {\n  // Core tables\n  users: createMockTable('users'),\n  organizations: createMockTable('organizations'),\n  userOrganizations: createMockTable('userOrganizations'),\n  invitations: createMockTable('invitations'),\n  passwordResetTokens: createMockTable('passwordResetTokens'),\n  \n  // Property tables  \n  buildings: createMockTable('buildings'),\n  residences: createMockTable('residences'),\n  userResidences: createMockTable('userResidences'),\n  \n  // Document tables\n  documents: createMockTable('documents'),\n  \n  // Financial tables\n  bills: createMockTable('bills'),\n  budgets: createMockTable('budgets'),\n  monthlyBudgets: createMockTable('monthlyBudgets'),\n  \n  // Operations tables\n  maintenanceRequests: createMockTable('maintenanceRequests'),\n  commonSpaces: createMockTable('commonSpaces'),\n  \n  // System tables\n  permissions: createMockTable('permissions'),\n  userPermissions: createMockTable('userPermissions'),\n  rolePermissions: createMockTable('rolePermissions'),\n  demands: createMockTable('demands')\n};\n\n// Export test utilities\nexport const testUtils = {\n  clearMockData,\n  generateMockId,\n  getMockData: () => mockDataStore,\n  resetMocks: () => {\n    clearMockData();\n    jest.clearAllMocks();\n  }\n};\n\n// Default export for convenience\nexport default mockDb;"],"version":3}