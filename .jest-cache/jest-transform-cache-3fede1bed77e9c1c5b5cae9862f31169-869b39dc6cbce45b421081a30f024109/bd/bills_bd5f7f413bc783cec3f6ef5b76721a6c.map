{"file":"/home/runner/workspace/server/api/bills.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/bills.ts"],"sourcesContent":["import type { Express, Request, Response } from 'express';\nimport { eq, desc, and, sql, isNull } from 'drizzle-orm';\nimport { db } from '../db';\nimport { requireAuth } from '../auth';\nimport { storage } from '../storage';\nimport { z } from 'zod';\nimport { moneyFlowJob } from '../jobs/money_flow_job';\nimport { billGenerationService } from '../services/bill-generation-service';\nimport { delayedUpdateService } from '../services/delayed-update-service';\nimport { geminiBillAnalyzer } from '../services/gemini-bill-analyzer';\nimport multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\nimport * as schema from '@shared/schema';\n\nconst { buildings, bills } = schema;\n\n// Database-driven bills - no more mock data\n\n// Validation schemas\nconst billFilterSchema = z.object({\n  buildingId: z.string().uuid(),\n  category: z.string().optional(),\n  year: z.string().optional(),\n  status: z.enum(['all', 'draft', 'sent', 'overdue', 'paid', 'cancelled']).optional(),\n  months: z.string().optional(), // Comma-separated month numbers (e.g., \"1,3,6,12\")\n});\n\nconst createBillSchema = z.object({\n  buildingId: z.string().uuid(),\n  title: z.string().min(1),\n  description: z.string().optional(),\n  category: z.enum([\n    'insurance',\n    'maintenance',\n    'salary',\n    'utilities',\n    'cleaning',\n    'security',\n    'landscaping',\n    'professional_services',\n    'administration',\n    'repairs',\n    'supplies',\n    'taxes',\n    'technology',\n    'reserves',\n    'other',\n  ]),\n  vendor: z.string().optional(),\n  paymentType: z.enum(['unique', 'recurrent']),\n  schedulePayment: z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),\n  scheduleCustom: z.array(z.string()).optional(),\n  costs: z.array(z.string()),\n  totalAmount: z.string(),\n  startDate: z.string(),\n  endDate: z.string().optional(),\n  status: z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),\n  notes: z.string().optional(),\n});\n\nconst updateBillSchema = createBillSchema.partial();\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: '/tmp/uploads/',\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image and PDF files are allowed'));\n    }\n  },\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n});\n\n/**\n *\n * @param app\n */\n/**\n * RegisterBillRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerBillRoutes(app: Express) {\n  /**\n   * Get all bills with optional filtering\n   * GET /api/bills?buildingId=uuid&category=insurance&year=2024&status=draft&months=1,3,6.\n   */\n  app.get('/api/bills', requireAuth, async (req: any, res: any) => {\n    try {\n      const { buildingId, category, year, status = 'all', months } = req.query;\n\n      // Build the WHERE conditions\n      const conditions = [];\n\n      if (buildingId && buildingId !== 'all') {\n        conditions.push(eq(bills.buildingId, buildingId));\n      }\n\n      if (category && category !== 'all') {\n        conditions.push(eq(bills.category, category));\n      }\n\n      if (year) {\n        conditions.push(sql`EXTRACT(YEAR FROM ${bills.startDate}) = ${year}`);\n      }\n\n      if (status && status !== 'all') {\n        conditions.push(eq(bills.status, status));\n      }\n\n      if (months) {\n        const monthNumbers = months.split(',').map((m: string) => parseInt(m.trim()));\n        const monthConditions = monthNumbers.map(\n          (month: number) => sql`EXTRACT(MONTH FROM ${bills.startDate}) = ${month}`\n        );\n        conditions.push(sql`(${sql.join(monthConditions, sql` OR `)})`);\n      }\n\n      const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n\n      const billsList = await db\n        .select({\n          id: bills.id,\n          buildingId: bills.buildingId,\n          billNumber: bills.billNumber,\n          title: bills.title,\n          description: bills.description,\n          category: bills.category,\n          vendor: bills.vendor,\n          paymentType: bills.paymentType,\n          costs: bills.costs,\n          totalAmount: bills.totalAmount,\n          startDate: bills.startDate,\n          status: bills.status,\n          notes: bills.notes,\n          createdBy: bills.createdBy,\n          createdAt: bills.createdAt,\n          updatedAt: bills.updatedAt,\n        })\n        .from(bills)\n        .where(whereClause)\n        .orderBy(desc(bills.startDate));\n\n      res.json(billsList);\n    } catch (_error: any) {\n      console.error('❌ Error fetching bills:', _error);\n      res.status(500).json({\n        message: 'Failed to fetch bills',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Get a specific bill by ID\n   * GET /api/bills/:id.\n   */\n  app.get('/api/bills/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n\n      const bill = await db\n        .select({\n          id: bills.id,\n          buildingId: bills.buildingId,\n          billNumber: bills.billNumber,\n          title: bills.title,\n          description: bills.description,\n          category: bills.category,\n          vendor: bills.vendor,\n          paymentType: bills.paymentType,\n          costs: bills.costs,\n          totalAmount: bills.totalAmount,\n          startDate: bills.startDate,\n          status: bills.status,\n          notes: bills.notes,\n          createdBy: bills.createdBy,\n          createdAt: bills.createdAt,\n          updatedAt: bills.updatedAt,\n        })\n        .from(bills)\n        .where(eq(bills.id, id))\n        .limit(1);\n\n      if (bill.length === 0) {\n        return res.status(404).json({\n          message: 'Bill not found',\n        });\n      }\n\n      res.json(bill[0]);\n    } catch (_error: any) {\n      console.error('❌ Error fetching bill:', _error);\n      res.status(500).json({\n        message: 'Failed to fetch bill',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Create a new bill\n   * POST /api/bills.\n   */\n  app.post('/api/bills', requireAuth, async (req: any, res: any) => {\n    try {\n      const validation = createBillSchema.safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({\n          message: 'Invalid bill data',\n          errors: validation.error.issues,\n        });\n      }\n\n      const billData = validation.data;\n\n      const newBill = await db\n        .insert(bills)\n        .values({\n          buildingId: billData.buildingId,\n          billNumber: `BILL-${Date.now()}`,\n          title: billData.title,\n          description: billData.description,\n          category: billData.category,\n          vendor: billData.vendor,\n          paymentType: billData.paymentType,\n          schedulePayment: billData.schedulePayment,\n          scheduleCustom: billData.scheduleCustom,\n          costs: billData.costs.map((cost) => parseFloat(cost)),\n          totalAmount: parseFloat(billData.totalAmount),\n          startDate: billData.startDate,\n          endDate: billData.endDate,\n          status: billData.status,\n          notes: billData.notes,\n          createdBy: req.user.id,\n        })\n        .returning();\n\n      // Schedule delayed money flow and budget update for the new bill\n      try {\n        delayedUpdateService.scheduleBillUpdate(newBill[0].id);\n      } catch (schedulingError) {\n        console.warn('⚠️ Failed to schedule bill update:', schedulingError);\n        // Don't fail the bill creation if scheduling fails\n      }\n\n      res.status(201).json(newBill[0]);\n    } catch (_error: any) {\n      console.error('❌ Error creating bill:', _error);\n      res.status(500).json({\n        message: 'Failed to create bill',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Update a bill (PATCH)\n   * PATCH /api/bills/:id.\n   */\n  app.patch('/api/bills/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const validation = updateBillSchema.safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({\n          message: 'Invalid bill data',\n          errors: validation.error.issues,\n        });\n      }\n\n      const billData = validation.data;\n\n      const updateData: unknown = {};\n      if (billData.title) {\n        updateData.title = billData.title;\n      }\n      if (billData.description) {\n        updateData.description = billData.description;\n      }\n      if (billData.category) {\n        updateData.category = billData.category;\n      }\n      if (billData.vendor) {\n        updateData.vendor = billData.vendor;\n      }\n      if (billData.paymentType) {\n        updateData.paymentType = billData.paymentType;\n      }\n      if (billData.costs) {\n        updateData.costs = billData.costs.map((cost: string) => parseFloat(cost));\n      }\n      if (billData.totalAmount) {\n        updateData.totalAmount = parseFloat(billData.totalAmount);\n      }\n      if (billData.startDate) {\n        updateData.startDate = billData.startDate;\n      }\n      if (billData.endDate) {\n        updateData.endDate = billData.endDate;\n      }\n      if (billData.status) {\n        updateData.status = billData.status;\n      }\n      if (billData.notes) {\n        updateData.notes = billData.notes;\n      }\n      updateData.updatedAt = new Date();\n\n      const updatedBill = await db\n        .update(bills)\n        .set(updateData)\n        .where(eq(bills.id, id))\n        .returning();\n\n      if (updatedBill.length === 0) {\n        return res.status(404).json({\n          message: 'Bill not found',\n        });\n      }\n\n      res.json(updatedBill[0]);\n    } catch (_error: any) {\n      console.error('❌ Error updating bill (PATCH):', _error);\n      res.status(500).json({\n        message: 'Failed to update bill',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Update a bill (PUT)\n   * PUT /api/bills/:id.\n   */\n  app.put('/api/bills/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n      const validation = updateBillSchema.safeParse(req.body);\n\n      if (!validation.success) {\n        return res.status(400).json({\n          message: 'Invalid bill data',\n          errors: validation.error.issues,\n        });\n      }\n\n      const billData = validation.data;\n\n      const updateData: unknown = {};\n      if (billData.title) {\n        updateData.title = billData.title;\n      }\n      if (billData.description) {\n        updateData.description = billData.description;\n      }\n      if (billData.category) {\n        updateData.category = billData.category;\n      }\n      if (billData.vendor) {\n        updateData.vendor = billData.vendor;\n      }\n      if (billData.paymentType) {\n        updateData.paymentType = billData.paymentType;\n      }\n      if (billData.costs) {\n        updateData.costs = billData.costs.map((cost: string) => parseFloat(cost));\n      }\n      if (billData.totalAmount) {\n        updateData.totalAmount = parseFloat(billData.totalAmount);\n      }\n      if (billData.startDate) {\n        updateData.startDate = billData.startDate;\n      }\n      if (billData.status) {\n        updateData.status = billData.status;\n      }\n      if (billData.notes) {\n        updateData.notes = billData.notes;\n      }\n      updateData.updatedAt = new Date();\n\n      const updatedBill = await db\n        .update(bills)\n        .set(updateData)\n        .where(eq(bills.id, id))\n        .returning();\n\n      if (updatedBill.length === 0) {\n        return res.status(404).json({\n          message: 'Bill not found',\n        });\n      }\n\n      // Schedule delayed money flow and budget update for the updated bill\n      try {\n        delayedUpdateService.scheduleBillUpdate(id);\n      } catch (schedulingError) {\n        console.warn('⚠️ Failed to schedule bill update:', schedulingError);\n        // Don't fail the bill update if scheduling fails\n      }\n\n      res.json(updatedBill[0]);\n    } catch (_error: any) {\n      console.error('❌ Error updating bill (PUT):', _error);\n      res.status(500).json({\n        message: 'Failed to update bill',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Delete a bill\n   * DELETE /api/bills/:id.\n   */\n  app.delete('/api/bills/:id', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n\n      const deletedBill = await db.delete(bills).where(eq(bills.id, id)).returning();\n\n      if (deletedBill.length === 0) {\n        return res.status(404).json({\n          message: 'Bill not found',\n        });\n      }\n\n      res.json({\n        message: 'Bill deleted successfully',\n        bill: deletedBill[0],\n      });\n    } catch (_error: any) {\n      console.error('❌ Error deleting bill:', _error);\n      res.status(500).json({\n        message: 'Failed to delete bill',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Upload and analyze bill document with Gemini AI\n   * POST /api/bills/:id/upload-document.\n   */\n  app.post(\n    '/api/bills/:id/upload-document',\n    requireAuth,\n    upload.single('document'),\n    async (req: any, res: any) => {\n      try {\n        const { id } = req.params;\n\n        if (!req.file) {\n          return res.status(400).json({ message: 'No file uploaded' });\n        }\n\n        // Get organization ID for document organization\n        const organizations = await storage.getUserOrganizations(req.user.id);\n        const organizationId =\n          organizations.length > 0 ? organizations[0].organizationId : 'default';\n\n        // Note: File upload to external storage removed\n\n        // Create document path in the expected format\n        const documentPath = `prod_org_${organizationId}/${req.file.originalname}`;\n\n        // Analyze document with Gemini AI (only for images)\n        let analysisResult = null;\n        if (req.file.mimetype.startsWith('image/')) {\n          try {\n            analysisResult = await geminiBillAnalyzer.analyzeBillDocument(req.file.path);\n          } catch (aiError) {\n            console.warn('⚠️ AI analysis failed, continuing without analysis:', aiError);\n            // Continue without AI analysis\n          }\n        }\n\n        // Update bill with document info and AI analysis\n        const updateData: unknown = {\n          documentPath,\n          documentName: req.file.originalname,\n          isAiAnalyzed: !!analysisResult,\n          aiAnalysisData: analysisResult,\n          updatedAt: new Date(),\n        };\n\n        const updatedBill = await db\n          .update(bills)\n          .set(updateData)\n          .where(eq(bills.id, id))\n          .returning();\n\n        // Clean up temporary file\n        fs.unlinkSync(req.file.path);\n\n        res.json({\n          message: 'Document uploaded and analyzed successfully',\n          bill: updatedBill[0],\n          analysisResult,\n        });\n      } catch (_error: any) {\n        console.error('❌ Error uploading document:', _error);\n        \n        // Clean up temporary file if it exists\n        if (req.file?.path) {\n          try {\n            fs.unlinkSync(req.file.path);\n          } catch (___cleanupError) {\n            console.error('Error cleaning up temp file:', ___cleanupError);\n          }\n        }\n\n        res.status(500).json({\n          message: 'Failed to upload document',\n          _error: _error instanceof Error ? _error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * Download bill document using secure signed URL\n   * GET /api/bills/:id/download-document.\n   */\n  app.get('/api/bills/:id/download-document', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n\n      // Get the bill to check if it has a document\n      const bill = await db.select().from(bills).where(eq(bills.id, id)).limit(1);\n\n      if (bill.length === 0) {\n        return res.status(404).json({ message: 'Bill not found' });\n      }\n\n      const billData = bill[0];\n\n      if (!billData.documentPath || !billData.documentName) {\n        return res.status(404).json({ message: 'No document associated with this bill' });\n      }\n\n      // Get organization ID for document access\n      const organizations = await storage.getUserOrganizations(req.user.id);\n      const organizationId = organizations.length > 0 ? organizations[0].organizationId : 'default';\n\n      // Document download functionality removed (no external storage)\n      res.status(404).json({\n        message: 'Document download functionality has been disabled',\n      });\n    } catch (_error: any) {\n      console.error('❌ Error downloading document:', _error);\n      res.status(500).json({\n        message: 'Failed to generate document download URL',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Apply AI analysis to bill form data\n   * POST /api/bills/:id/apply-ai-analysis.\n   */\n  app.post('/api/bills/:id/apply-ai-analysis', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n\n      // Get the bill with AI analysis data\n      const bill = await db.select().from(bills).where(eq(bills.id, id)).limit(1);\n\n      if (bill.length === 0) {\n        return res.status(404).json({ message: 'Bill not found' });\n      }\n\n      const billData = bill[0];\n\n      if (!billData.isAiAnalyzed || !billData.aiAnalysisData) {\n        return res.status(400).json({ message: 'No AI analysis data available for this bill' });\n      }\n\n      const analysis = billData.aiAnalysisData as any;\n\n      // Get payment schedule suggestion\n      const scheduleSignestion = await geminiBillAnalyzer.suggestPaymentSchedule(\n        analysis.category,\n        parseFloat(analysis.totalAmount)\n      );\n\n      // Update bill with AI-extracted data\n      const updateData: unknown = {\n        title: analysis.title,\n        vendor: analysis.vendor,\n        totalAmount: parseFloat(analysis.totalAmount),\n        category: analysis.category,\n        description: analysis.description,\n        paymentType: scheduleSignestion.paymentType,\n        schedulePayment: scheduleSignestion.schedulePayment,\n        costs: [parseFloat(analysis.totalAmount)],\n        startDate: analysis.issueDate || analysis.dueDate || billData.startDate,\n        notes: `AI-analyzed document. Original bill number: ${analysis.billNumber || 'N/A'}. Confidence: ${(analysis.confidence * 100).toFixed(1)}%. ${scheduleSignestion.reasoning}`,\n        updatedAt: new Date(),\n      };\n\n      const updatedBill = await db\n        .update(bills)\n        .set(updateData)\n        .where(eq(bills.id, id))\n        .returning();\n\n      res.json({\n        message: 'AI analysis applied successfully',\n        bill: updatedBill[0],\n        analysis,\n        scheduleSignestion,\n      });\n    } catch (_error: any) {\n      console.error('❌ Error applying AI analysis:', _error);\n      res.status(500).json({\n        message: 'Failed to apply AI analysis',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Generate future bill instances for a recurrent bill\n   * POST /api/bills/:id/generate-future.\n   */\n  app.post('/api/bills/:id/generate-future', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n\n      const bill = await db\n        .select({\n          id: bills.id,\n          buildingId: bills.buildingId,\n          billNumber: bills.billNumber,\n          title: bills.title,\n          description: bills.description,\n          category: bills.category,\n          vendor: bills.vendor,\n          paymentType: bills.paymentType,\n          costs: bills.costs,\n          totalAmount: bills.totalAmount,\n          startDate: bills.startDate,\n          status: bills.status,\n          notes: bills.notes,\n          createdBy: bills.createdBy,\n          createdAt: bills.createdAt,\n          updatedAt: bills.updatedAt,\n        })\n        .from(bills)\n        .where(eq(bills.id, id))\n        .limit(1);\n\n      if (bill.length === 0) {\n        return res.status(404).json({\n          message: 'Bill not found',\n        });\n      }\n\n      // Check if user has access to this bill's building\n      const building = await db\n        .select({\n          id: buildings.id,\n          name: buildings.name,\n          organizationId: buildings.organizationId,\n        })\n        .from(buildings)\n        .where(eq(buildings.id, bill[0].buildingId))\n        .limit(1);\n\n      if (building.length === 0) {\n        return res.status(403).json({\n          message: 'Access denied to generate future bills',\n          code: 'ACCESS_DENIED',\n        });\n      }\n\n      if (bill[0].paymentType !== 'recurrent') {\n        return res.status(400).json({\n          message: 'Only recurrent bills can generate future instances',\n        });\n      }\n\n      // Generate future bills\n      const result = await billGenerationService.generateFutureBillInstances(bill[0] as any);\n\n      res.json({\n        message: 'Future bills generated successfully',\n        billsCreated: result.billsCreated,\n        generatedUntil: result.generatedUntil,\n      });\n    } catch (_error: any) {\n      console.error('❌ Error generating future bills:', _error);\n      res.status(500).json({\n        message: 'Failed to generate future bills',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Get bill categories for filter dropdown\n   * GET /api/bills/categories.\n   */\n  app.get('/api/bills/categories', requireAuth, async (req: any, res: any) => {\n    try {\n      const categories = [\n        'insurance',\n        'maintenance',\n        'salary',\n        'utilities',\n        'cleaning',\n        'security',\n        'landscaping',\n        'professional_services',\n        'administration',\n        'repairs',\n        'supplies',\n        'taxes',\n        'technology',\n        'reserves',\n        'other',\n      ];\n\n      res.json(categories);\n    } catch (_error: any) {\n      console.error('❌ Error fetching bill categories:', _error);\n      res.status(500).json({\n        message: 'Failed to fetch bill categories',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * Get statistics for auto-generated bills from a parent bill\n   * GET /api/bills/:id/generated-stats.\n   */\n  app.get('/api/bills/:id/generated-stats', requireAuth, async (req: any, res: any) => {\n    try {\n      const { id } = req.params;\n\n      const bill = await db\n        .select({\n          id: bills.id,\n          buildingId: bills.buildingId,\n          billNumber: bills.billNumber,\n          title: bills.title,\n          description: bills.description,\n          category: bills.category,\n          vendor: bills.vendor,\n          paymentType: bills.paymentType,\n          costs: bills.costs,\n          totalAmount: bills.totalAmount,\n          startDate: bills.startDate,\n          status: bills.status,\n          notes: bills.notes,\n          createdBy: bills.createdBy,\n          createdAt: bills.createdAt,\n          updatedAt: bills.updatedAt,\n        })\n        .from(bills)\n        .where(eq(bills.id, id))\n        .limit(1);\n\n      if (bill.length === 0) {\n        return res.status(404).json({\n          message: 'Bill not found',\n        });\n      }\n\n      // Find all bills generated from this parent bill (look for auto-generated bills)\n      const generatedBills = await db\n        .select({\n          id: bills.id,\n          buildingId: bills.buildingId,\n          billNumber: bills.billNumber,\n          title: bills.title,\n          description: bills.description,\n          category: bills.category,\n          vendor: bills.vendor,\n          paymentType: bills.paymentType,\n          costs: bills.costs,\n          totalAmount: bills.totalAmount,\n          startDate: bills.startDate,\n          status: bills.status,\n          notes: bills.notes,\n          createdBy: bills.createdBy,\n          createdAt: bills.createdAt,\n          updatedAt: bills.updatedAt,\n        })\n        .from(bills)\n        .where(sql`bills.notes LIKE '%Auto-generated from:%'`)\n        .orderBy(bills.startDate);\n\n      const stats = generatedBills.map((genBill) => ({\n        id: genBill.id,\n        title: genBill.title,\n        amount: genBill.totalAmount,\n        startDate: genBill.startDate,\n        status: genBill.status,\n        billNumber: genBill.billNumber,\n      }));\n\n      res.json({\n        parentBill: bill[0],\n        generatedBills: stats,\n      });\n    } catch (_error: any) {\n      console.error('❌ Error getting generated bills statistics:', _error);\n      res.status(500).json({\n        message: 'Failed to get generated bills statistics',\n        _error: _error instanceof Error ? _error.message : 'Unknown error',\n      });\n    }\n  });\n}\n"],"version":3}