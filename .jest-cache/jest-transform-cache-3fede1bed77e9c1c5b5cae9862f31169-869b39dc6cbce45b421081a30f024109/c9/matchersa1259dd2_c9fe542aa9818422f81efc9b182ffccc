87e51b0c291c6985e9e4aa5f81843e1c
'use strict';
var redent = require('redent');
var cssTools = require('@adobe/css-tools');
var domAccessibilityApi = require('dom-accessibility-api');
var ariaQuery = require('aria-query');
var pico = require('picocolors');
var escape = require('css.escape');
class GenericTypeError extends Error {
    constructor(expectedString, received, matcherFn, context) {
        super();
        /* istanbul ignore next */
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, matcherFn);
        }
        let withType = '';
        try {
            withType = context.utils.printWithType('Received', received, context.utils.printReceived);
        }
        catch (e) {
            // Can throw for Document:
            // https://github.com/jsdom/jsdom/issues/2304
        }
        this.message = [
            context.utils.matcherHint(`${context.isNot ? '.not' : ''}.${matcherFn.name}`, 'received', ''),
            '',
            // eslint-disable-next-line new-cap
            `${context.utils.RECEIVED_COLOR('received')} value must ${expectedString}.`,
            withType,
        ].join('\n');
    }
}
class HtmlElementTypeError extends GenericTypeError {
    constructor(...args) {
        super('be an HTMLElement or an SVGElement', ...args);
    }
}
class NodeTypeError extends GenericTypeError {
    constructor(...args) {
        super('be a Node', ...args);
    }
}
function checkHasWindow(htmlElement, ErrorClass, ...args) {
    if (!htmlElement ||
        !htmlElement.ownerDocument ||
        !htmlElement.ownerDocument.defaultView) {
        throw new ErrorClass(htmlElement, ...args);
    }
}
function checkNode(node, ...args) {
    checkHasWindow(node, NodeTypeError, ...args);
    const window = node.ownerDocument.defaultView;
    if (!(node instanceof window.Node)) {
        throw new NodeTypeError(node, ...args);
    }
}
function checkHtmlElement(htmlElement, ...args) {
    checkHasWindow(htmlElement, HtmlElementTypeError, ...args);
    const window = htmlElement.ownerDocument.defaultView;
    if (!(htmlElement instanceof window.HTMLElement) &&
        !(htmlElement instanceof window.SVGElement)) {
        throw new HtmlElementTypeError(htmlElement, ...args);
    }
}
class InvalidCSSError extends Error {
    constructor(received, matcherFn, context) {
        super();
        /* istanbul ignore next */
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, matcherFn);
        }
        this.message = [
            received.message,
            '',
            // eslint-disable-next-line new-cap
            context.utils.RECEIVED_COLOR(`Failing css:`),
            // eslint-disable-next-line new-cap
            context.utils.RECEIVED_COLOR(`${received.css}`),
        ].join('\n');
    }
}
function parseCSS(css, ...args) {
    const ast = cssTools.parse(`selector { ${css} }`, { silent: true }).stylesheet;
    if (ast.parsingErrors && ast.parsingErrors.length > 0) {
        const { reason, line } = ast.parsingErrors[0];
        throw new InvalidCSSError({
            css,
            message: `Syntax error parsing expected css: ${reason} on line: ${line}`,
        }, ...args);
    }
    const parsedRules = ast.rules[0].declarations
        .filter(d => d.type === 'declaration')
        .reduce((obj, { property, value }) => Object.assign(obj, { [property]: value }), {});
    return parsedRules;
}
function display(context, value) {
    return typeof value === 'string' ? value : context.utils.stringify(value);
}
function getMessage(context, matcher, expectedLabel, expectedValue, receivedLabel, receivedValue) {
    return [
        `${matcher}\n`,
        // eslint-disable-next-line new-cap
        `${expectedLabel}:\n${context.utils.EXPECTED_COLOR(redent(display(context, expectedValue), 2))}`,
        // eslint-disable-next-line new-cap
        `${receivedLabel}:\n${context.utils.RECEIVED_COLOR(redent(display(context, receivedValue), 2))}`,
    ].join('\n');
}
function matches(textToMatch, matcher) {
    if (matcher instanceof RegExp) {
        return matcher.test(textToMatch);
    }
    else {
        return textToMatch.includes(String(matcher));
    }
}
function deprecate(name, replacementText) {
    // Notify user that they are using deprecated functionality.
    // eslint-disable-next-line no-console
    console.warn(`Warning: ${name} has been deprecated and will be removed in future updates.`, replacementText);
}
function normalize(text) {
    return text.replace(/\s+/g, ' ').trim();
}
function getTag(element) {
    return element.tagName && element.tagName.toLowerCase();
}
function getSelectValue({ multiple, options }) {
    const selectedOptions = [...options].filter(option => option.selected);
    if (multiple) {
        return [...selectedOptions].map(opt => opt.value);
    }
    /* istanbul ignore if */
    if (selectedOptions.length === 0) {
        return undefined; // Couldn't make this happen, but just in case
    }
    return selectedOptions[0].value;
}
function getInputValue(inputElement) {
    switch (inputElement.type) {
        case 'number':
            return inputElement.value === '' ? null : Number(inputElement.value);
        case 'checkbox':
            return inputElement.checked;
        default:
            return inputElement.value;
    }
}
const rolesSupportingValues = ['meter', 'progressbar', 'slider', 'spinbutton'];
function getAccessibleValue(element) {
    if (!rolesSupportingValues.includes(element.getAttribute('role'))) {
        return undefined;
    }
    return Number(element.getAttribute('aria-valuenow'));
}
function getSingleElementValue(element) {
    /* istanbul ignore if */
    if (!element) {
        return undefined;
    }
    switch (element.tagName.toLowerCase()) {
        case 'input':
            return getInputValue(element);
        case 'select':
            return getSelectValue(element);
        default: {
            return element.value ?? getAccessibleValue(element);
        }
    }
}
function toSentence(array, { wordConnector = ', ', lastWordConnector = ' and ' } = {}) {
    return [array.slice(0, -1).join(wordConnector), array[array.length - 1]].join(array.length > 1 ? lastWordConnector : '');
}
function compareAsSet(val1, val2) {
    if (Array.isArray(val1) && Array.isArray(val2)) {
        return [...new Set(val1)].every(v => new Set(val2).has(v));
    }
    return val1 === val2;
}
function toBeInTheDOM(element, container) {
    deprecate('toBeInTheDOM', 'Please use toBeInTheDocument for searching the entire document and toContainElement for searching a specific container.');
    if (element) {
        checkHtmlElement(element, toBeInTheDOM, this);
    }
    if (container) {
        checkHtmlElement(container, toBeInTheDOM, this);
    }
    return {
        pass: container ? container.contains(element) : !!element,
        message: () => {
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeInTheDOM`, 'element', ''),
                '',
                'Received:',
                `  ${this.utils.printReceived(element ? element.cloneNode(false) : element)}`,
            ].join('\n');
        },
    };
}
function toBeInTheDocument(element) {
    if (element !== null || !this.isNot) {
        checkHtmlElement(element, toBeInTheDocument, this);
    }
    const pass = element === null
        ? false
        : element.ownerDocument === element.getRootNode({ composed: true });
    const errorFound = () => {
        return `expected document not to contain element, found ${this.utils.stringify(element.cloneNode(true))} instead`;
    };
    const errorNotFound = () => {
        return `element could not be found in the document`;
    };
    return {
        pass,
        message: () => {
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeInTheDocument`, 'element', ''),
                '',
                // eslint-disable-next-line new-cap
                this.utils.RECEIVED_COLOR(this.isNot ? errorFound() : errorNotFound()),
            ].join('\n');
        },
    };
}
function toBeEmpty(element) {
    deprecate('toBeEmpty', 'Please use instead toBeEmptyDOMElement for finding empty nodes in the DOM.');
    checkHtmlElement(element, toBeEmpty, this);
    return {
        pass: element.innerHTML === '',
        message: () => {
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEmpty`, 'element', ''),
                '',
                'Received:',
                `  ${this.utils.printReceived(element.innerHTML)}`,
            ].join('\n');
        },
    };
}
function toBeEmptyDOMElement(element) {
    checkHtmlElement(element, toBeEmptyDOMElement, this);
    return {
        pass: isEmptyElement(element),
        message: () => {
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEmptyDOMElement`, 'element', ''),
                '',
                'Received:',
                `  ${this.utils.printReceived(element.innerHTML)}`,
            ].join('\n');
        },
    };
}
/**
 * Identifies if an element doesn't contain child nodes (excluding comments)
 * â„¹ Node.COMMENT_NODE can't be used because of the following issue
 * https://github.com/jsdom/jsdom/issues/2220
 *
 * @param {*} element an HtmlElement or SVGElement
 * @return {*} true if the element only contains comments or none
 */
function isEmptyElement(element) {
    const nonCommentChildNodes = [...element.childNodes].filter(node => node.nodeType !== 8);
    return nonCommentChildNodes.length === 0;
}
function toContainElement(container, element) {
    checkHtmlElement(container, toContainElement, this);
    if (element !== null) {
        checkHtmlElement(element, toContainElement, this);
    }
    return {
        pass: container.contains(element),
        message: () => {
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toContainElement`, 'element', 'element'),
                '',
                // eslint-disable-next-line new-cap
                this.utils.RECEIVED_COLOR(`${this.utils.stringify(container.cloneNode(false))} ${this.isNot ? 'contains:' : 'does not contain:'} ${this.utils.stringify(element ? element.cloneNode(false) : element)}
        `),
            ].join('\n');
        },
    };
}
function getNormalizedHtml(container, htmlText) {
    const div = container.ownerDocument.createElement('div');
    div.innerHTML = htmlText;
    return div.innerHTML;
}
function toContainHTML(container, htmlText) {
    checkHtmlElement(container, toContainHTML, this);
    if (typeof htmlText !== 'string') {
        throw new Error(`.toContainHTML() expects a string value, got ${htmlText}`);
    }
    return {
        pass: container.outerHTML.includes(getNormalizedHtml(container, htmlText)),
        message: () => {
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toContainHTML`, 'element', ''),
                'Expected:',
                // eslint-disable-next-line new-cap
                `  ${this.utils.EXPECTED_COLOR(htmlText)}`,
                'Received:',
                `  ${this.utils.printReceived(container.cloneNode(true))}`,
            ].join('\n');
        },
    };
}
function toHaveTextContent(node, checkWith, options = { normalizeWhitespace: true }) {
    checkNode(node, toHaveTextContent, this);
    const textContent = options.normalizeWhitespace
        ? normalize(node.textContent)
        : node.textContent.replace(/\u00a0/g, ' '); // Replace &nbsp; with normal spaces
    const checkingWithEmptyString = textContent !== '' && checkWith === '';
    return {
        pass: !checkingWithEmptyString && matches(textContent, checkWith),
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString
                ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead`
                : `Expected element ${to} have text content`, checkWith, 'Received', textContent);
        },
    };
}
function toHaveAccessibleDescription(htmlElement, expectedAccessibleDescription) {
    checkHtmlElement(htmlElement, toHaveAccessibleDescription, this);
    const actualAccessibleDescription = domAccessibilityApi.computeAccessibleDescription(htmlElement);
    const missingExpectedValue = arguments.length === 1;
    let pass = false;
    if (missingExpectedValue) {
        // When called without an expected value we only want to validate that the element has an
        // accessible description, whatever it may be.
        pass = actualAccessibleDescription !== '';
    }
    else {
        pass =
            expectedAccessibleDescription instanceof RegExp
                ? expectedAccessibleDescription.test(actualAccessibleDescription)
                : this.equals(actualAccessibleDescription, expectedAccessibleDescription);
    }
    return {
        pass,
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleDescription.name}`, 'element', ''), `Expected element ${to} have accessible description`, expectedAccessibleDescription, 'Received', actualAccessibleDescription);
        },
    };
}
const ariaInvalidName = 'aria-invalid';
const validStates = ['false'];
// See `aria-errormessage` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage
function toHaveAccessibleErrorMessage(htmlElement, expectedAccessibleErrorMessage) {
    checkHtmlElement(htmlElement, toHaveAccessibleErrorMessage, this);
    const to = this.isNot ? 'not to' : 'to';
    const method = this.isNot
        ? '.not.toHaveAccessibleErrorMessage'
        : '.toHaveAccessibleErrorMessage';
    // Enforce Valid Id
    const errormessageId = htmlElement.getAttribute('aria-errormessage');
    const errormessageIdInvalid = !!errormessageId && /\s+/.test(errormessageId);
    if (errormessageIdInvalid) {
        return {
            pass: false,
            message: () => {
                return getMessage(this, this.utils.matcherHint(method, 'element'), "Expected element's `aria-errormessage` attribute to be empty or a single, valid ID", '', 'Received', `aria-errormessage="${errormessageId}"`);
            },
        };
    }
    // See `aria-invalid` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-invalid
    const ariaInvalidVal = htmlElement.getAttribute(ariaInvalidName);
    const fieldValid = !htmlElement.hasAttribute(ariaInvalidName) ||
        validStates.includes(ariaInvalidVal);
    // Enforce Valid `aria-invalid` Attribute
    if (fieldValid) {
        return {
            pass: false,
            message: () => {
                return getMessage(this, this.utils.matcherHint(method, 'element'), 'Expected element to be marked as invalid with attribute', `${ariaInvalidName}="${String(true)}"`, 'Received', htmlElement.hasAttribute('aria-invalid')
                    ? `${ariaInvalidName}="${htmlElement.getAttribute(ariaInvalidName)}`
                    : null);
            },
        };
    }
    const error = normalize(htmlElement.ownerDocument.getElementById(errormessageId)?.textContent ?? '');
    return {
        pass: expectedAccessibleErrorMessage === undefined
            ? Boolean(error)
            : expectedAccessibleErrorMessage instanceof RegExp
                ? expectedAccessibleErrorMessage.test(error)
                : this.equals(error, expectedAccessibleErrorMessage),
        message: () => {
            return getMessage(this, this.utils.matcherHint(method, 'element'), `Expected element ${to} have accessible error message`, expectedAccessibleErrorMessage ?? '', 'Received', error);
        },
    };
}
const elementRoleList = buildElementRoleList(ariaQuery.elementRoles);
function toHaveRole(htmlElement, expectedRole) {
    checkHtmlElement(htmlElement, toHaveRole, this);
    const actualRoles = getExplicitOrImplicitRoles(htmlElement);
    const pass = actualRoles.some(el => el === expectedRole);
    return {
        pass,
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveRole.name}`, 'element', ''), `Expected element ${to} have role`, expectedRole, 'Received', actualRoles.join(', '));
        },
    };
}
function getExplicitOrImplicitRoles(htmlElement) {
    const hasExplicitRole = htmlElement.hasAttribute('role');
    if (hasExplicitRole) {
        const roleValue = htmlElement.getAttribute('role');
        // Handle fallback roles, such as role="switch button"
        // testing-library gates this behind the `queryFallbacks` flag; it is
        // unclear why, but it makes sense to support this pattern out of the box
        // https://testing-library.com/docs/queries/byrole/#queryfallbacks
        return roleValue.split(' ').filter(Boolean);
    }
    const implicitRoles = getImplicitAriaRoles(htmlElement);
    return implicitRoles;
}
function getImplicitAriaRoles(currentNode) {
    for (const { match, roles } of elementRoleList) {
        if (match(currentNode)) {
            return [...roles];
        }
    }
    /* istanbul ignore next */
    return []; // this does not get reached in practice, since elements have at least a 'generic' role
}
/**
 * Transform the roles map (with required attributes and constraints) to a list
 * of roles. Each item in the list has functions to match an element against it.
 *
 * Essentially copied over from [dom-testing-library's
 * helpers](https://github.com/testing-library/dom-testing-library/blob/bd04cf95a1ed85a2238f7dfc1a77d5d16b4f59dc/src/role-helpers.js#L80)
 *
 * TODO: If we are truly just copying over stuff, would it make sense to move
 * this to a separate package?
 *
 * TODO: This technique relies on CSS selectors; are those consistently
 * available in all jest-dom environments? Why do other matchers in this package
 * not use them like this?
 */
function buildElementRoleList(elementRolesMap) {
    function makeElementSelector({ name, attributes }) {
        return `${name}${attributes
            .map(({ name: attributeName, value, constraints = [] }) => {
            const shouldNotExist = constraints.indexOf('undefined') !== -1;
            if (shouldNotExist) {
                return `:not([${attributeName}])`;
            }
            else if (value) {
                return `[${attributeName}="${value}"]`;
            }
            else {
                return `[${attributeName}]`;
            }
        })
            .join('')}`;
    }
    function getSelectorSpecificity({ attributes = [] }) {
        return attributes.length;
    }
    function bySelectorSpecificity({ specificity: leftSpecificity }, { specificity: rightSpecificity }) {
        return rightSpecificity - leftSpecificity;
    }
    function match(element) {
        let { attributes = [] } = element;
        // https://github.com/testing-library/dom-testing-library/issues/814
        const typeTextIndex = attributes.findIndex(attribute => attribute.value &&
            attribute.name === 'type' &&
            attribute.value === 'text');
        if (typeTextIndex >= 0) {
            // not using splice to not mutate the attributes array
            attributes = [
                ...attributes.slice(0, typeTextIndex),
                ...attributes.slice(typeTextIndex + 1),
            ];
        }
        const selector = makeElementSelector({ ...element, attributes });
        return node => {
            if (typeTextIndex >= 0 && node.type !== 'text') {
                return false;
            }
            return node.matches(selector);
        };
    }
    let result = [];
    for (const [element, roles] of elementRolesMap.entries()) {
        result = [
            ...result,
            {
                match: match(element),
                roles: Array.from(roles),
                specificity: getSelectorSpecificity(element),
            },
        ];
    }
    return result.sort(bySelectorSpecificity);
}
function toHaveAccessibleName(htmlElement, expectedAccessibleName) {
    checkHtmlElement(htmlElement, toHaveAccessibleName, this);
    const actualAccessibleName = domAccessibilityApi.computeAccessibleName(htmlElement);
    const missingExpectedValue = arguments.length === 1;
    let pass = false;
    if (missingExpectedValue) {
        // When called without an expected value we only want to validate that the element has an
        // accessible name, whatever it may be.
        pass = actualAccessibleName !== '';
    }
    else {
        pass =
            expectedAccessibleName instanceof RegExp
                ? expectedAccessibleName.test(actualAccessibleName)
                : this.equals(actualAccessibleName, expectedAccessibleName);
    }
    return {
        pass,
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleName.name}`, 'element', ''), `Expected element ${to} have accessible name`, expectedAccessibleName, 'Received', actualAccessibleName);
        },
    };
}
function printAttribute(stringify, name, value) {
    return value === undefined ? name : `${name}=${stringify(value)}`;
}
function getAttributeComment(stringify, name, value) {
    return value === undefined
        ? `element.hasAttribute(${stringify(name)})`
        : `element.getAttribute(${stringify(name)}) === ${stringify(value)}`;
}
function toHaveAttribute(htmlElement, name, expectedValue) {
    checkHtmlElement(htmlElement, toHaveAttribute, this);
    const isExpectedValuePresent = expectedValue !== undefined;
    const hasAttribute = htmlElement.hasAttribute(name);
    const receivedValue = htmlElement.getAttribute(name);
    return {
        pass: isExpectedValuePresent
            ? hasAttribute && this.equals(receivedValue, expectedValue)
            : hasAttribute,
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            const receivedAttribute = hasAttribute
                ? printAttribute(this.utils.stringify, name, receivedValue)
                : null;
            const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveAttribute`, 'element', this.utils.printExpected(name), {
                secondArgument: isExpectedValuePresent
                    ? this.utils.printExpected(expectedValue)
                    : undefined,
                comment: getAttributeComment(this.utils.stringify, name, expectedValue),
            });
            return getMessage(this, matcher, `Expected the element ${to} have attribute`, printAttribute(this.utils.stringify, name, expectedValue), 'Received', receivedAttribute);
        },
    };
}
function getExpectedClassNamesAndOptions(params) {
    const lastParam = params.pop();
    let expectedClassNames, options;
    if (typeof lastParam === 'object' && !(lastParam instanceof RegExp)) {
        expectedClassNames = params;
        options = lastParam;
    }
    else {
        expectedClassNames = params.concat(lastParam);
        options = { exact: false };
    }
    return { expectedClassNames, options };
}
function splitClassNames(str) {
    if (!str)
        return [];
    return str.split(/\s+/).filter(s => s.length > 0);
}
function isSubset$1(subset, superset) {
    return subset.every(strOrRegexp => typeof strOrRegexp === 'string'
        ? superset.includes(strOrRegexp)
        : superset.some(className => strOrRegexp.test(className)));
}
function toHaveClass(htmlElement, ...params) {
    checkHtmlElement(htmlElement, toHaveClass, this);
    const { expectedClassNames, options } = getExpectedClassNamesAndOptions(params);
    const received = splitClassNames(htmlElement.getAttribute('class'));
    const expected = expectedClassNames.reduce((acc, className) => acc.concat(typeof className === 'string' || !className
        ? splitClassNames(className)
        : className), []);
    const hasRegExp = expected.some(className => className instanceof RegExp);
    if (options.exact && hasRegExp) {
        throw new Error('Exact option does not support RegExp expected class names');
    }
    if (options.exact) {
        return {
            pass: isSubset$1(expected, received) && expected.length === received.length,
            message: () => {
                const to = this.isNot ? 'not to' : 'to';
                return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have EXACTLY defined classes`, expected.join(' '), 'Received', received.join(' '));
            },
        };
    }
    return expected.length > 0
        ? {
            pass: isSubset$1(expected, received),
            message: () => {
                const to = this.isNot ? 'not to' : 'to';
                return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));
            },
        }
        : {
            pass: this.isNot ? received.length > 0 : false,
            message: () => this.isNot
                ? getMessage(this, this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' '))
                : [
                    this.utils.matcherHint(`.toHaveClass`, 'element'),
                    'At least one expected class must be provided.',
                ].join('\n'),
        };
}
function getStyleDeclaration(document, css) {
    const styles = {};
    // The next block is necessary to normalize colors
    const copy = document.createElement('div');
    Object.keys(css).forEach(property => {
        copy.style[property] = css[property];
        styles[property] = copy.style[property];
    });
    return styles;
}
function isSubset(styles, computedStyle) {
    return (!!Object.keys(styles).length &&
        Object.entries(styles).every(([prop, value]) => {
            const isCustomProperty = prop.startsWith('--');
            const spellingVariants = [prop];
            if (!isCustomProperty)
                spellingVariants.push(prop.toLowerCase());
            return spellingVariants.some(name => computedStyle[name] === value ||
                computedStyle.getPropertyValue(name) === value);
        }));
}
function printoutStyles(styles) {
    return Object.keys(styles)
        .sort()
        .map(prop => `${prop}: ${styles[prop]};`)
        .join('\n');
}
// Highlights only style rules that were expected but were not found in the
// received computed styles
function expectedDiff(diffFn, expected, computedStyles) {
    const received = Array.from(computedStyles)
        .filter(prop => expected[prop] !== undefined)
        .reduce((obj, prop) => Object.assign(obj, { [prop]: computedStyles.getPropertyValue(prop) }), {});
    const diffOutput = diffFn(printoutStyles(expected), printoutStyles(received));
    // Remove the "+ Received" annotation because this is a one-way diff
    return diffOutput.replace(`${pico.red('+ Received')}\n`, '');
}
function toHaveStyle(htmlElement, css) {
    checkHtmlElement(htmlElement, toHaveStyle, this);
    const parsedCSS = typeof css === 'object' ? css : parseCSS(css, toHaveStyle, this);
    const { getComputedStyle } = htmlElement.ownerDocument.defaultView;
    const expected = getStyleDeclaration(htmlElement.ownerDocument, parsedCSS);
    const received = getComputedStyle(htmlElement);
    return {
        pass: isSubset(expected, received),
        message: () => {
            const matcher = `${this.isNot ? '.not' : ''}.toHaveStyle`;
            return [
                this.utils.matcherHint(matcher, 'element', ''),
                expectedDiff(this.utils.diff, expected, received),
            ].join('\n\n');
        },
    };
}
function toHaveFocus(element) {
    checkHtmlElement(element, toHaveFocus, this);
    return {
        pass: element.ownerDocument.activeElement === element,
        message: () => {
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveFocus`, 'element', ''),
                '',
                ...(this.isNot
                    ? [
                        'Received element is focused:',
                        `  ${this.utils.printReceived(element)}`,
                    ]
                    : [
                        'Expected element with focus:',
                        `  ${this.utils.printExpected(element)}`,
                        'Received element with focus:',
                        `  ${this.utils.printReceived(element.ownerDocument.activeElement)}`,
                    ]),
            ].join('\n');
        },
    };
}
// Returns the combined value of several elements that have the same name
// e.g. radio buttons or groups of checkboxes
function getMultiElementValue(elements) {
    const types = [...new Set(elements.map(element => element.type))];
    if (types.length !== 1) {
        throw new Error('Multiple form elements with the same name must be of the same type');
    }
    switch (types[0]) {
        case 'radio': {
            const theChosenOne = elements.find(radio => radio.checked);
            return theChosenOne ? theChosenOne.value : undefined;
        }
        case 'checkbox':
            return elements
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value);
        default:
            // NOTE: Not even sure this is a valid use case, but just in case...
            return elements.map(element => element.value);
    }
}
function getFormValue(container, name) {
    const elements = [...container.querySelectorAll(`[name="${escape(name)}"]`)];
    /* istanbul ignore if */
    if (elements.length === 0) {
        return undefined; // shouldn't happen, but just in case
    }
    switch (elements.length) {
        case 1:
            return getSingleElementValue(elements[0]);
        default:
            return getMultiElementValue(elements);
    }
}
// Strips the `[]` suffix off a form value name
function getPureName(name) {
    return /\[\]$/.test(name) ? name.slice(0, -2) : name;
}
function getAllFormValues(container) {
    const names = Array.from(container.elements).map(element => element.name);
    return names.reduce((obj, name) => ({
        ...obj,
        [getPureName(name)]: getFormValue(container, name),
    }), {});
}
function toHaveFormValues(formElement, expectedValues) {
    checkHtmlElement(formElement, toHaveFormValues, this);
    if (!formElement.elements) {
        // TODO: Change condition to use instanceof against the appropriate element classes instead
        throw new Error('toHaveFormValues must be called on a form or a fieldset');
    }
    const formValues = getAllFormValues(formElement);
    return {
        pass: Object.entries(expectedValues).every(([name, expectedValue]) => compareAsSet(formValues[name], expectedValue)),
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            const matcher = `${this.isNot ? '.not' : ''}.toHaveFormValues`;
            const commonKeyValues = Object.keys(formValues)
                .filter(key => expectedValues.hasOwnProperty(key))
                .reduce((obj, key) => ({ ...obj, [key]: formValues[key] }), {});
            return [
                this.utils.matcherHint(matcher, 'element', ''),
                `Expected the element ${to} have form values`,
                this.utils.diff(expectedValues, commonKeyValues),
            ].join('\n\n');
        },
    };
}
function isStyleVisible(element) {
    const { getComputedStyle } = element.ownerDocument.defaultView;
    const { display, visibility, opacity } = getComputedStyle(element);
    return (display !== 'none' &&
        visibility !== 'hidden' &&
        visibility !== 'collapse' &&
        opacity !== '0' &&
        opacity !== 0);
}
function isAttributeVisible(element, previousElement) {
    let detailsVisibility;
    if (previousElement) {
        detailsVisibility =
            element.nodeName === 'DETAILS' && previousElement.nodeName !== 'SUMMARY'
                ? element.hasAttribute('open')
                : true;
    }
    else {
        detailsVisibility =
            element.nodeName === 'DETAILS' ? element.hasAttribute('open') : true;
    }
    return !element.hasAttribute('hidden') && detailsVisibility;
}
function isElementVisible(element, previousElement) {
    return (isStyleVisible(element) &&
        isAttributeVisible(element, previousElement) &&
        (!element.parentElement || isElementVisible(element.parentElement, element)));
}
function toBeVisible(element) {
    checkHtmlElement(element, toBeVisible, this);
    const isInDocument = element.ownerDocument === element.getRootNode({ composed: true });
    const isVisible = isInDocument && isElementVisible(element);
    return {
        pass: isVisible,
        message: () => {
            const is = isVisible ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeVisible`, 'element', ''),
                '',
                `Received element ${is} visible${isInDocument ? '' : ' (element is not in the document)'}:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
// form elements that support 'disabled'
const FORM_TAGS$2 = [
    'fieldset',
    'input',
    'select',
    'optgroup',
    'option',
    'button',
    'textarea',
];
/*
 * According to specification:
 * If <fieldset> is disabled, the form controls that are its descendants,
 * except descendants of its first optional <legend> element, are disabled
 *
 * https://html.spec.whatwg.org/multipage/form-elements.html#concept-fieldset-disabled
 *
 * This method tests whether element is first legend child of fieldset parent
 */
function isFirstLegendChildOfFieldset(element, parent) {
    return (getTag(element) === 'legend' &&
        getTag(parent) === 'fieldset' &&
        element.isSameNode(Array.from(parent.children).find(child => getTag(child) === 'legend')));
}
function isElementDisabledByParent(element, parent) {
    return (isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent));
}
function isCustomElement(tag) {
    return tag.includes('-');
}
/*
 * Only certain form elements and custom elements can actually be disabled:
 * https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements
 */
function canElementBeDisabled(element) {
    const tag = getTag(element);
    return FORM_TAGS$2.includes(tag) || isCustomElement(tag);
}
function isElementDisabled(element) {
    return canElementBeDisabled(element) && element.hasAttribute('disabled');
}
function isAncestorDisabled(element) {
    const parent = element.parentElement;
    return (Boolean(parent) &&
        (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent)));
}
function isElementOrAncestorDisabled(element) {
    return (canElementBeDisabled(element) &&
        (isElementDisabled(element) || isAncestorDisabled(element)));
}
function toBeDisabled(element) {
    checkHtmlElement(element, toBeDisabled, this);
    const isDisabled = isElementOrAncestorDisabled(element);
    return {
        pass: isDisabled,
        message: () => {
            const is = isDisabled ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeDisabled`, 'element', ''),
                '',
                `Received element ${is} disabled:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
function toBeEnabled(element) {
    checkHtmlElement(element, toBeEnabled, this);
    const isEnabled = !isElementOrAncestorDisabled(element);
    return {
        pass: isEnabled,
        message: () => {
            const is = isEnabled ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEnabled`, 'element', ''),
                '',
                `Received element ${is} enabled:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
// form elements that support 'required'
const FORM_TAGS$1 = ['select', 'textarea'];
const ARIA_FORM_TAGS = ['input', 'select', 'textarea'];
const UNSUPPORTED_INPUT_TYPES = [
    'color',
    'hidden',
    'range',
    'submit',
    'image',
    'reset',
];
const SUPPORTED_ARIA_ROLES = [
    'checkbox',
    'combobox',
    'gridcell',
    'listbox',
    'radiogroup',
    'spinbutton',
    'textbox',
    'tree',
];
function isRequiredOnFormTagsExceptInput(element) {
    return FORM_TAGS$1.includes(getTag(element)) && element.hasAttribute('required');
}
function isRequiredOnSupportedInput(element) {
    return (getTag(element) === 'input' &&
        element.hasAttribute('required') &&
        ((element.hasAttribute('type') &&
            !UNSUPPORTED_INPUT_TYPES.includes(element.getAttribute('type'))) ||
            !element.hasAttribute('type')));
}
function isElementRequiredByARIA(element) {
    return (element.hasAttribute('aria-required') &&
        element.getAttribute('aria-required') === 'true' &&
        (ARIA_FORM_TAGS.includes(getTag(element)) ||
            (element.hasAttribute('role') &&
                SUPPORTED_ARIA_ROLES.includes(element.getAttribute('role')))));
}
function toBeRequired(element) {
    checkHtmlElement(element, toBeRequired, this);
    const isRequired = isRequiredOnFormTagsExceptInput(element) ||
        isRequiredOnSupportedInput(element) ||
        isElementRequiredByARIA(element);
    return {
        pass: isRequired,
        message: () => {
            const is = isRequired ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeRequired`, 'element', ''),
                '',
                `Received element ${is} required:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
const FORM_TAGS = ['form', 'input', 'select', 'textarea'];
function isElementHavingAriaInvalid(element) {
    return (element.hasAttribute('aria-invalid') &&
        element.getAttribute('aria-invalid') !== 'false');
}
function isSupportsValidityMethod(element) {
    return FORM_TAGS.includes(getTag(element));
}
function isElementInvalid(element) {
    const isHaveAriaInvalid = isElementHavingAriaInvalid(element);
    if (isSupportsValidityMethod(element)) {
        return isHaveAriaInvalid || !element.checkValidity();
    }
    else {
        return isHaveAriaInvalid;
    }
}
function toBeInvalid(element) {
    checkHtmlElement(element, toBeInvalid, this);
    const isInvalid = isElementInvalid(element);
    return {
        pass: isInvalid,
        message: () => {
            const is = isInvalid ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeInvalid`, 'element', ''),
                '',
                `Received element ${is} currently invalid:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
function toBeValid(element) {
    checkHtmlElement(element, toBeValid, this);
    const isValid = !isElementInvalid(element);
    return {
        pass: isValid,
        message: () => {
            const is = isValid ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeValid`, 'element', ''),
                '',
                `Received element ${is} currently valid:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
function toHaveValue(htmlElement, expectedValue) {
    checkHtmlElement(htmlElement, toHaveValue, this);
    if (htmlElement.tagName.toLowerCase() === 'input' &&
        ['checkbox', 'radio'].includes(htmlElement.type)) {
        throw new Error('input with type=checkbox or type=radio cannot be used with .toHaveValue(). Use .toBeChecked() for type=checkbox or .toHaveFormValues() instead');
    }
    const receivedValue = getSingleElementValue(htmlElement);
    const expectsValue = expectedValue !== undefined;
    let expectedTypedValue = expectedValue;
    let receivedTypedValue = receivedValue;
    if (expectedValue == receivedValue && expectedValue !== receivedValue) {
        expectedTypedValue = `${expectedValue} (${typeof expectedValue})`;
        receivedTypedValue = `${receivedValue} (${typeof receivedValue})`;
    }
    return {
        pass: expectsValue
            ? compareAsSet(receivedValue, expectedValue)
            : Boolean(receivedValue),
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveValue`, 'element', expectedValue);
            return getMessage(this, matcher, `Expected the element ${to} have value`, expectsValue ? expectedTypedValue : '(any)', 'Received', receivedTypedValue);
        },
    };
}
function toHaveDisplayValue(htmlElement, expectedValue) {
    checkHtmlElement(htmlElement, toHaveDisplayValue, this);
    const tagName = htmlElement.tagName.toLowerCase();
    if (!['select', 'input', 'textarea'].includes(tagName)) {
        throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');
    }
    if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {
        throw new Error(`.toHaveDisplayValue() currently does not support input[type="${htmlElement.type}"], try with another matcher instead.`);
    }
    const values = getValues(tagName, htmlElement);
    const expectedValues = getExpectedValues(expectedValue);
    const numberOfMatchesWithValues = expectedValues.filter(expected => values.some(value => expected instanceof RegExp
        ? expected.test(value)
        : this.equals(value, String(expected)))).length;
    const matchedWithAllValues = numberOfMatchesWithValues === values.length;
    const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;
    return {
        pass: matchedWithAllValues && matchedWithAllExpectedValues,
        message: () => getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${this.isNot ? 'not ' : ''}to have display value`, expectedValue, 'Received', values),
    };
}
function getValues(tagName, htmlElement) {
    return tagName === 'select'
        ? Array.from(htmlElement)
            .filter(option => option.selected)
            .map(option => option.textContent)
        : [htmlElement.value];
}
function getExpectedValues(expectedValue) {
    return expectedValue instanceof Array ? expectedValue : [expectedValue];
}
function toBeChecked(element) {
    checkHtmlElement(element, toBeChecked, this);
    const isValidInput = () => {
        return (element.tagName.toLowerCase() === 'input' &&
            ['checkbox', 'radio'].includes(element.type));
    };
    const isValidAriaElement = () => {
        return (roleSupportsChecked(element.getAttribute('role')) &&
            ['true', 'false'].includes(element.getAttribute('aria-checked')));
    };
    if (!isValidInput() && !isValidAriaElement()) {
        return {
            pass: false,
            message: () => `only inputs with type="checkbox" or type="radio" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`,
        };
    }
    const isChecked = () => {
        if (isValidInput())
            return element.checked;
        return element.getAttribute('aria-checked') === 'true';
    };
    return {
        pass: isChecked(),
        message: () => {
            const is = isChecked() ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeChecked`, 'element', ''),
                '',
                `Received element ${is} checked:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
function supportedRolesSentence() {
    return toSentence(supportedRoles().map(role => `role="${role}"`), { lastWordConnector: ' or ' });
}
function supportedRoles() {
    return ariaQuery.roles.keys().filter(roleSupportsChecked);
}
function roleSupportsChecked(role) {
    return ariaQuery.roles.get(role)?.props['aria-checked'] !== undefined;
}
function toBePartiallyChecked(element) {
    checkHtmlElement(element, toBePartiallyChecked, this);
    const isValidInput = () => {
        return (element.tagName.toLowerCase() === 'input' && element.type === 'checkbox');
    };
    const isValidAriaElement = () => {
        return element.getAttribute('role') === 'checkbox';
    };
    if (!isValidInput() && !isValidAriaElement()) {
        return {
            pass: false,
            message: () => 'only inputs with type="checkbox" or elements with role="checkbox" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead',
        };
    }
    const isPartiallyChecked = () => {
        const isAriaMixed = element.getAttribute('aria-checked') === 'mixed';
        if (isValidInput()) {
            return element.indeterminate || isAriaMixed;
        }
        return isAriaMixed;
    };
    return {
        pass: isPartiallyChecked(),
        message: () => {
            const is = isPartiallyChecked() ? 'is' : 'is not';
            return [
                this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBePartiallyChecked`, 'element', ''),
                '',
                `Received element ${is} partially checked:`,
                `  ${this.utils.printReceived(element.cloneNode(false))}`,
            ].join('\n');
        },
    };
}
// See algoritm: https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description
function toHaveDescription(htmlElement, checkWith) {
    deprecate('toHaveDescription', 'Please use toHaveAccessibleDescription.');
    checkHtmlElement(htmlElement, toHaveDescription, this);
    const expectsDescription = checkWith !== undefined;
    const descriptionIDRaw = htmlElement.getAttribute('aria-describedby') || '';
    const descriptionIDs = descriptionIDRaw.split(/\s+/).filter(Boolean);
    let description = '';
    if (descriptionIDs.length > 0) {
        const document = htmlElement.ownerDocument;
        const descriptionEls = descriptionIDs
            .map(descriptionID => document.getElementById(descriptionID))
            .filter(Boolean);
        description = normalize(descriptionEls.map(el => el.textContent).join(' '));
    }
    return {
        pass: expectsDescription
            ? checkWith instanceof RegExp
                ? checkWith.test(description)
                : this.equals(description, checkWith)
            : Boolean(description),
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDescription`, 'element', ''), `Expected the element ${to} have description`, this.utils.printExpected(checkWith), 'Received', this.utils.printReceived(description));
        },
    };
}
// See aria-errormessage spec https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage
function toHaveErrorMessage(htmlElement, checkWith) {
    deprecate('toHaveErrorMessage', 'Please use toHaveAccessibleErrorMessage.');
    checkHtmlElement(htmlElement, toHaveErrorMessage, this);
    if (!htmlElement.hasAttribute('aria-invalid') ||
        htmlElement.getAttribute('aria-invalid') === 'false') {
        const not = this.isNot ? '.not' : '';
        return {
            pass: false,
            message: () => {
                return getMessage(this, this.utils.matcherHint(`${not}.toHaveErrorMessage`, 'element', ''), `Expected the element to have invalid state indicated by`, 'aria-invalid="true"', 'Received', htmlElement.hasAttribute('aria-invalid')
                    ? `aria-invalid="${htmlElement.getAttribute('aria-invalid')}"`
                    : this.utils.printReceived(''));
            },
        };
    }
    const expectsErrorMessage = checkWith !== undefined;
    const errormessageIDRaw = htmlElement.getAttribute('aria-errormessage') || '';
    const errormessageIDs = errormessageIDRaw.split(/\s+/).filter(Boolean);
    let errormessage = '';
    if (errormessageIDs.length > 0) {
        const document = htmlElement.ownerDocument;
        const errormessageEls = errormessageIDs
            .map(errormessageID => document.getElementById(errormessageID))
            .filter(Boolean);
        errormessage = normalize(errormessageEls.map(el => el.textContent).join(' '));
    }
    return {
        pass: expectsErrorMessage
            ? checkWith instanceof RegExp
                ? checkWith.test(errormessage)
                : this.equals(errormessage, checkWith)
            : Boolean(errormessage),
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            return getMessage(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveErrorMessage`, 'element', ''), `Expected the element ${to} have error message`, this.utils.printExpected(checkWith), 'Received', this.utils.printReceived(errormessage));
        },
    };
}
/**
 * Returns the selection from the element.
 *
 * @param element {HTMLElement} The element to get the selection from.
 * @returns {String} The selection.
 */
function getSelection(element) {
    const selection = element.ownerDocument.getSelection();
    if (['input', 'textarea'].includes(element.tagName.toLowerCase())) {
        if (['radio', 'checkbox'].includes(element.type))
            return '';
        return element.value
            .toString()
            .substring(element.selectionStart, element.selectionEnd);
    }
    if (selection.anchorNode === null || selection.focusNode === null) {
        // No selection
        return '';
    }
    const originalRange = selection.getRangeAt(0);
    const temporaryRange = element.ownerDocument.createRange();
    if (selection.containsNode(element, false)) {
        // Whole element is inside selection
        temporaryRange.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(temporaryRange);
    }
    else if (element.contains(selection.anchorNode) &&
        element.contains(selection.focusNode))
        ;
    else {
        // Element is partially selected
        const selectionStartsWithinElement = element === originalRange.startContainer ||
            element.contains(originalRange.startContainer);
        const selectionEndsWithinElement = element === originalRange.endContainer ||
            element.contains(originalRange.endContainer);
        selection.removeAllRanges();
        if (selectionStartsWithinElement || selectionEndsWithinElement) {
            temporaryRange.selectNodeContents(element);
            if (selectionStartsWithinElement) {
                temporaryRange.setStart(originalRange.startContainer, originalRange.startOffset);
            }
            if (selectionEndsWithinElement) {
                temporaryRange.setEnd(originalRange.endContainer, originalRange.endOffset);
            }
            selection.addRange(temporaryRange);
        }
    }
    const result = selection.toString();
    selection.removeAllRanges();
    selection.addRange(originalRange);
    return result;
}
/**
 * Checks if the element has the string selected.
 *
 * @param htmlElement {HTMLElement} The html element to check the selection for.
 * @param expectedSelection {String} The selection as a string.
 */
function toHaveSelection(htmlElement, expectedSelection) {
    checkHtmlElement(htmlElement, toHaveSelection, this);
    const expectsSelection = expectedSelection !== undefined;
    if (expectsSelection && typeof expectedSelection !== 'string') {
        throw new Error(`expected selection must be a string or undefined`);
    }
    const receivedSelection = getSelection(htmlElement);
    return {
        pass: expectsSelection
            ? compareAsSet(receivedSelection, expectedSelection)
            : Boolean(receivedSelection),
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveSelection`, 'element', expectedSelection);
            return getMessage(this, matcher, `Expected the element ${to} have selection`, expectsSelection ? expectedSelection : '(any)', 'Received', receivedSelection);
        },
    };
}
function toBePressed(element) {
    checkHtmlElement(element, toBePressed, this);
    const roles = (element.getAttribute('role') || '')
        .split(' ')
        .map(role => role.trim());
    const isButton = element.tagName.toLowerCase() === 'button' ||
        (element.tagName.toLowerCase() === 'input' && element.type === 'button') ||
        roles.includes('button');
    const pressedAttribute = element.getAttribute('aria-pressed');
    const isValidAriaElement = pressedAttribute === 'true' || pressedAttribute === 'false';
    if (!isButton || !isValidAriaElement) {
        return {
            pass: false,
            message: () => `Only button or input with type="button" or element with role="button" and a valid aria-pressed attribute can be used with .toBePressed()`,
        };
    }
    const isPressed = pressedAttribute === 'true';
    return {
        pass: isButton && isPressed,
        message: () => {
            const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBePressed`, 'element', '');
            return getMessage(this, matcher, `Expected element to have`, `aria-pressed="${this.isNot ? 'false' : 'true'}"`, `Received`, `aria-pressed="${pressedAttribute}"`);
        },
    };
}
function toBePartiallyPressed(element) {
    checkHtmlElement(element, toBePartiallyPressed, this);
    const roles = (element.getAttribute('role') || '')
        .split(' ')
        .map(role => role.trim());
    const isButton = element.tagName.toLowerCase() === 'button' ||
        (element.tagName.toLowerCase() === 'input' && element.type === 'button') ||
        roles.includes('button');
    const pressedAttribute = element.getAttribute('aria-pressed');
    const isValidAriaElement = pressedAttribute === 'true' ||
        pressedAttribute === 'false' ||
        pressedAttribute === 'mixed';
    if (!isButton || !isValidAriaElement) {
        return {
            pass: false,
            message: () => `Only button or input with type="button" or element with role="button" and a valid aria-pressed attribute can be used with .toBePartiallyPressed()`,
        };
    }
    const isPartiallyPressed = pressedAttribute === 'mixed';
    return {
        pass: isButton && isPartiallyPressed,
        message: () => {
            const to = this.isNot ? 'not to' : 'to';
            const matcher = this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBePartiallyPressed`, 'element', '');
            return getMessage(this, matcher, `Expected element ${to} have`, `aria-pressed="mixed"`, `Received`, `aria-pressed="${pressedAttribute}"`);
        },
    };
}
var extensions = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    toBeChecked: toBeChecked,
    toBeDisabled: toBeDisabled,
    toBeEmpty: toBeEmpty,
    toBeEmptyDOMElement: toBeEmptyDOMElement,
    toBeEnabled: toBeEnabled,
    toBeInTheDOM: toBeInTheDOM,
    toBeInTheDocument: toBeInTheDocument,
    toBeInvalid: toBeInvalid,
    toBePartiallyChecked: toBePartiallyChecked,
    toBePartiallyPressed: toBePartiallyPressed,
    toBePressed: toBePressed,
    toBeRequired: toBeRequired,
    toBeValid: toBeValid,
    toBeVisible: toBeVisible,
    toContainElement: toContainElement,
    toContainHTML: toContainHTML,
    toHaveAccessibleDescription: toHaveAccessibleDescription,
    toHaveAccessibleErrorMessage: toHaveAccessibleErrorMessage,
    toHaveAccessibleName: toHaveAccessibleName,
    toHaveAttribute: toHaveAttribute,
    toHaveClass: toHaveClass,
    toHaveDescription: toHaveDescription,
    toHaveDisplayValue: toHaveDisplayValue,
    toHaveErrorMessage: toHaveErrorMessage,
    toHaveFocus: toHaveFocus,
    toHaveFormValues: toHaveFormValues,
    toHaveRole: toHaveRole,
    toHaveSelection: toHaveSelection,
    toHaveStyle: toHaveStyle,
    toHaveTextContent: toHaveTextContent,
    toHaveValue: toHaveValue
});
exports.extensions = extensions;
exports.toBeChecked = toBeChecked;
exports.toBeDisabled = toBeDisabled;
exports.toBeEmpty = toBeEmpty;
exports.toBeEmptyDOMElement = toBeEmptyDOMElement;
exports.toBeEnabled = toBeEnabled;
exports.toBeInTheDOM = toBeInTheDOM;
exports.toBeInTheDocument = toBeInTheDocument;
exports.toBeInvalid = toBeInvalid;
exports.toBePartiallyChecked = toBePartiallyChecked;
exports.toBePartiallyPressed = toBePartiallyPressed;
exports.toBePressed = toBePressed;
exports.toBeRequired = toBeRequired;
exports.toBeValid = toBeValid;
exports.toBeVisible = toBeVisible;
exports.toContainElement = toContainElement;
exports.toContainHTML = toContainHTML;
exports.toHaveAccessibleDescription = toHaveAccessibleDescription;
exports.toHaveAccessibleErrorMessage = toHaveAccessibleErrorMessage;
exports.toHaveAccessibleName = toHaveAccessibleName;
exports.toHaveAttribute = toHaveAttribute;
exports.toHaveClass = toHaveClass;
exports.toHaveDescription = toHaveDescription;
exports.toHaveDisplayValue = toHaveDisplayValue;
exports.toHaveErrorMessage = toHaveErrorMessage;
exports.toHaveFocus = toHaveFocus;
exports.toHaveFormValues = toHaveFormValues;
exports.toHaveRole = toHaveRole;
exports.toHaveSelection = toHaveSelection;
exports.toHaveStyle = toHaveStyle;
exports.toHaveTextContent = toHaveTextContent;
exports.toHaveValue = toHaveValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbS9kaXN0L21hdGNoZXJzLWExMjU5ZGQyLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMzQyxJQUFJLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzNELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN0QyxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDakMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRW5DLE1BQU0sZ0JBQWlCLFNBQVEsS0FBSztJQUNsQyxZQUFZLGNBQWMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU87UUFDdEQsS0FBSyxFQUFFLENBQUM7UUFFUiwwQkFBMEI7UUFDMUIsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUM1QixLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFDRCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDO1lBQ0gsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUNwQyxVQUFVLEVBQ1YsUUFBUSxFQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUM1QixDQUFDO1FBQ0osQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDWCwwQkFBMEI7WUFDMUIsNkNBQTZDO1FBQy9DLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3ZCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLElBQUksRUFBRSxFQUNsRCxVQUFVLEVBQ1YsRUFBRSxDQUNIO1lBQ0QsRUFBRTtZQUNGLG1DQUFtQztZQUNuQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUM3QixVQUFVLENBQ1gsZUFBZSxjQUFjLEdBQUc7WUFDakMsUUFBUTtTQUNULENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsTUFBTSxvQkFBcUIsU0FBUSxnQkFBZ0I7SUFDakQsWUFBWSxHQUFHLElBQUk7UUFDakIsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNGO0FBRUQsTUFBTSxhQUFjLFNBQVEsZ0JBQWdCO0lBQzFDLFlBQVksR0FBRyxJQUFJO1FBQ2pCLEtBQUssQ0FBQyxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFFRCxTQUFTLGNBQWMsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSTtJQUN0RCxJQUNFLENBQUMsV0FBVztRQUNaLENBQUMsV0FBVyxDQUFDLGFBQWE7UUFDMUIsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFDdEMsQ0FBQztRQUNELE1BQU0sSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDNUMsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxJQUFJO0lBQzlCLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFFOUMsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25DLE1BQU0sSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7SUFDeEMsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUk7SUFDNUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQzNELE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBRXJELElBQ0UsQ0FBQyxDQUFDLFdBQVcsWUFBWSxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxXQUFXLFlBQVksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUMzQyxDQUFDO1FBQ0QsTUFBTSxJQUFJLG9CQUFvQixDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ3RELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxlQUFnQixTQUFRLEtBQUs7SUFDakMsWUFBWSxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU87UUFDdEMsS0FBSyxFQUFFLENBQUM7UUFFUiwwQkFBMEI7UUFDMUIsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUM1QixLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsUUFBUSxDQUFDLE9BQU87WUFDaEIsRUFBRTtZQUNGLG1DQUFtQztZQUNuQyxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUM7WUFDNUMsbUNBQW1DO1lBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2hELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSTtJQUM1QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7SUFFN0UsSUFBSSxHQUFHLENBQUMsYUFBYSxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3RELE1BQU0sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1QyxNQUFNLElBQUksZUFBZSxDQUN2QjtZQUNFLEdBQUc7WUFDSCxPQUFPLEVBQUUsc0NBQXNDLE1BQU0sYUFBYSxJQUFJLEVBQUU7U0FDekUsRUFDRCxHQUFHLElBQUksQ0FDUixDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWTtTQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQztTQUNyQyxNQUFNLENBQ0wsQ0FBQyxHQUFHLEVBQUUsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxFQUNuRSxFQUFFLENBQ0gsQ0FBQztJQUNKLE9BQU8sV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSztJQUM3QixPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMzRSxDQUFDO0FBRUQsU0FBUyxVQUFVLENBQ2pCLE9BQU8sRUFDUCxPQUFPLEVBQ1AsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYTtJQUViLE9BQU87UUFDTCxHQUFHLE9BQU8sSUFBSTtRQUNkLG1DQUFtQztRQUNuQyxHQUFHLGFBQWEsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FDaEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQzNDLEVBQUU7UUFDSCxtQ0FBbUM7UUFDbkMsR0FBRyxhQUFhLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQ2hELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUMzQyxFQUFFO0tBQ0osQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDZCxDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU87SUFDbkMsSUFBSSxPQUFPLFlBQVksTUFBTSxFQUFFLENBQUM7UUFDOUIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ2xDLENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQzlDLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFLGVBQWU7SUFDdEMsNERBQTREO0lBQzVELHNDQUFzQztJQUN0QyxPQUFPLENBQUMsSUFBSSxDQUNWLFlBQVksSUFBSSw2REFBNkQsRUFDN0UsZUFBZSxDQUNoQixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLElBQUk7SUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUN6QyxDQUFDO0FBRUQsU0FBUyxNQUFNLENBQUMsT0FBTztJQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUN6RCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFDO0lBQ3pDLE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdkUsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0lBQ0Qsd0JBQXdCO0lBQ3hCLElBQUksZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNqQyxPQUFPLFNBQVMsQ0FBQSxDQUFDLDhDQUE4QztJQUNqRSxDQUFDO0lBQ0QsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ2pDLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxZQUFZO0lBQ2pDLFFBQVEsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzFCLEtBQUssUUFBUTtZQUNYLE9BQU8sWUFBWSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN0RSxLQUFLLFVBQVU7WUFDYixPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUE7UUFDN0I7WUFDRSxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUE7SUFDN0IsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLHFCQUFxQixHQUFHLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDL0UsU0FBUyxrQkFBa0IsQ0FBQyxPQUFPO0lBQ2pDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEUsT0FBTyxTQUFTLENBQUE7SUFDbEIsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtBQUN0RCxDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxPQUFPO0lBQ3BDLHdCQUF3QjtJQUN4QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDYixPQUFPLFNBQVMsQ0FBQTtJQUNsQixDQUFDO0lBRUQsUUFBUSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7UUFDdEMsS0FBSyxPQUFPO1lBQ1YsT0FBTyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDL0IsS0FBSyxRQUFRO1lBQ1gsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDaEMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNSLE9BQU8sT0FBTyxDQUFDLEtBQUssSUFBSSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNyRCxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FDakIsS0FBSyxFQUNMLEVBQUMsYUFBYSxHQUFHLElBQUksRUFBRSxpQkFBaUIsR0FBRyxPQUFPLEVBQUMsR0FBRyxFQUFFO0lBRXhELE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDM0UsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzFDLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUk7SUFDOUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzVELENBQUM7SUFDRCxPQUFPLElBQUksS0FBSyxJQUFJLENBQUE7QUFDdEIsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTO0lBQ3RDLFNBQVMsQ0FDUCxjQUFjLEVBQ2QseUhBQXlILENBQzFILENBQUM7SUFFRixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ1osZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNkLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTztRQUN6RCxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osT0FBTztnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUMxQyxTQUFTLEVBQ1QsRUFBRSxDQUNIO2dCQUNELEVBQUU7Z0JBQ0YsV0FBVztnQkFDWCxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUMzQixPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDN0MsRUFBRTthQUNKLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2QsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxPQUFPO0lBQ2hDLElBQUksT0FBTyxLQUFLLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELE1BQU0sSUFBSSxHQUNSLE9BQU8sS0FBSyxJQUFJO1FBQ2QsQ0FBQyxDQUFDLEtBQUs7UUFDUCxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsS0FBSyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFFdEUsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFO1FBQ3RCLE9BQU8sbURBQW1ELElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUM1RSxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUN4QixVQUFVLENBQUE7SUFDYixDQUFDLENBQUM7SUFDRixNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUU7UUFDekIsT0FBTyw0Q0FBNEMsQ0FBQTtJQUNyRCxDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsSUFBSTtRQUNKLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxvQkFBb0IsRUFDL0MsU0FBUyxFQUNULEVBQUUsQ0FDSDtnQkFDRCxFQUFFO2dCQUNGLG1DQUFtQztnQkFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3ZFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2QsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsT0FBTztJQUN4QixTQUFTLENBQ1AsV0FBVyxFQUNYLDRFQUE0RSxDQUM3RSxDQUFDO0lBQ0YsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUUzQyxPQUFPO1FBQ0wsSUFBSSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEtBQUssRUFBRTtRQUM5QixPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osT0FBTztnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUN2QyxTQUFTLEVBQ1QsRUFBRSxDQUNIO2dCQUNELEVBQUU7Z0JBQ0YsV0FBVztnQkFDWCxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTthQUNuRCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNkLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQUMsT0FBTztJQUNsQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFckQsT0FBTztRQUNMLElBQUksRUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDO1FBQzdCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxzQkFBc0IsRUFDakQsU0FBUyxFQUNULEVBQUUsQ0FDSDtnQkFDRCxFQUFFO2dCQUNGLFdBQVc7Z0JBQ1gsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7YUFDbkQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBUyxjQUFjLENBQUMsT0FBTztJQUM3QixNQUFNLG9CQUFvQixHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN6RixPQUFPLG9CQUFvQixDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLE9BQU87SUFDMUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXBELElBQUksT0FBTyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ3JCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUNqQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osT0FBTztnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsbUJBQW1CLEVBQzlDLFNBQVMsRUFDVCxTQUFTLENBQ1Y7Z0JBQ0QsRUFBRTtnQkFDRixtQ0FBbUM7Z0JBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQy9DLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQzNCLElBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxtQkFDN0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztTQUNyRSxDQUFDO2FBQ0gsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxRQUFRO0lBQzVDLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pELEdBQUcsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQ3pCLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQTtBQUN0QixDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsU0FBUyxFQUFFLFFBQVE7SUFDeEMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVqRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDN0UsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzFFLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsRUFDM0MsU0FBUyxFQUNULEVBQUUsQ0FDSDtnQkFDRCxXQUFXO2dCQUNYLG1DQUFtQztnQkFDbkMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDMUMsV0FBVztnQkFDWCxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTthQUMzRCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNkLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQ3hCLElBQUksRUFDSixTQUFTLEVBQ1QsT0FBTyxHQUFHLEVBQUMsbUJBQW1CLEVBQUUsSUFBSSxFQUFDO0lBRXJDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFekMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLG1CQUFtQjtRQUM3QyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDN0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztJQUVsRixNQUFNLHVCQUF1QixHQUFHLFdBQVcsS0FBSyxFQUFFLElBQUksU0FBUyxLQUFLLEVBQUUsQ0FBQztJQUV2RSxPQUFPO1FBQ0wsSUFBSSxFQUFFLENBQUMsdUJBQXVCLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUM7UUFDakUsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3hDLE9BQU8sVUFBVSxDQUNmLElBQUksRUFDSixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsb0JBQW9CLEVBQy9DLFNBQVMsRUFDVCxFQUFFLENBQ0gsRUFDRCx1QkFBdUI7Z0JBQ3JCLENBQUMsQ0FBQyxrRkFBa0Y7Z0JBQ3BGLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxvQkFBb0IsRUFDOUMsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLENBQ1osQ0FBQTtRQUNILENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsMkJBQTJCLENBQ2xDLFdBQVcsRUFDWCw2QkFBNkI7SUFFN0IsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLDJCQUEyQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sMkJBQTJCLEdBQUcsbUJBQW1CLENBQUMsNEJBQTRCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEcsTUFBTSxvQkFBb0IsR0FBRyxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUVwRCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7SUFDakIsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBQ3pCLHlGQUF5RjtRQUN6Riw4Q0FBOEM7UUFDOUMsSUFBSSxHQUFHLDJCQUEyQixLQUFLLEVBQUUsQ0FBQztJQUM1QyxDQUFDO1NBQU0sQ0FBQztRQUNOLElBQUk7WUFDRiw2QkFBNkIsWUFBWSxNQUFNO2dCQUM3QyxDQUFDLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDO2dCQUNqRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FDVCwyQkFBMkIsRUFDM0IsNkJBQTZCLENBQzlCLENBQUM7SUFDVixDQUFDO0lBRUQsT0FBTztRQUNMLElBQUk7UUFFSixPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDeEMsT0FBTyxVQUFVLENBQ2YsSUFBSSxFQUNKLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLDJCQUEyQixDQUFDLElBQUksRUFBRSxFQUNqRSxTQUFTLEVBQ1QsRUFBRSxDQUNILEVBQ0Qsb0JBQW9CLEVBQUUsOEJBQThCLEVBQ3BELDZCQUE2QixFQUM3QixVQUFVLEVBQ1YsMkJBQTJCLENBQzVCLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUM7QUFDdkMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUU5Qix3RkFBd0Y7QUFDeEYsU0FBUyw0QkFBNEIsQ0FDbkMsV0FBVyxFQUNYLDhCQUE4QjtJQUU5QixnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsNEJBQTRCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUs7UUFDdkIsQ0FBQyxDQUFDLG1DQUFtQztRQUNyQyxDQUFDLENBQUMsK0JBQStCLENBQUM7SUFFcEMsbUJBQW1CO0lBQ25CLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNyRSxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxjQUFjLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUU3RSxJQUFJLHFCQUFxQixFQUFFLENBQUM7UUFDMUIsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUN6QyxvRkFBb0YsRUFDcEYsRUFBRSxFQUNGLFVBQVUsRUFDVixzQkFBc0IsY0FBYyxHQUFHLENBQ3hDLENBQUE7WUFDSCxDQUFDO1NBQ0YsQ0FBQTtJQUNILENBQUM7SUFFRCw4RUFBOEU7SUFDOUUsTUFBTSxjQUFjLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNqRSxNQUFNLFVBQVUsR0FDZCxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDO1FBQzFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFdkMseUNBQXlDO0lBQ3pDLElBQUksVUFBVSxFQUFFLENBQUM7UUFDZixPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE9BQU8sVUFBVSxDQUNmLElBQUksRUFDSixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQ3pDLHlEQUF5RCxFQUN6RCxHQUFHLGVBQWUsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFDdEMsVUFBVSxFQUNWLFdBQVcsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDO29CQUN0QyxDQUFDLENBQUMsR0FBRyxlQUFlLEtBQUssV0FBVyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsRUFBRTtvQkFDcEUsQ0FBQyxDQUFDLElBQUksQ0FDVCxDQUFBO1lBQ0gsQ0FBQztTQUNGLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUNyQixXQUFXLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsRUFBRSxXQUFXLElBQUksRUFBRSxDQUM1RSxDQUFDO0lBRUYsT0FBTztRQUNMLElBQUksRUFDRiw4QkFBOEIsS0FBSyxTQUFTO1lBQzFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyw4QkFBOEIsWUFBWSxNQUFNO2dCQUNsRCxDQUFDLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDNUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLDhCQUE4QixDQUFDO1FBRXhELE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUN6QyxvQkFBb0IsRUFBRSxnQ0FBZ0MsRUFDdEQsOEJBQThCLElBQUksRUFBRSxFQUNwQyxVQUFVLEVBQ1YsS0FBSyxDQUNOLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFckUsU0FBUyxVQUFVLENBQUMsV0FBVyxFQUFFLFlBQVk7SUFDM0MsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVoRCxNQUFNLFdBQVcsR0FBRywwQkFBMEIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RCxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLFlBQVksQ0FBQyxDQUFDO0lBRXpELE9BQU87UUFDTCxJQUFJO1FBRUosT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3hDLE9BQU8sVUFBVSxDQUNmLElBQUksRUFDSixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQ2hELFNBQVMsRUFDVCxFQUFFLENBQ0gsRUFDRCxvQkFBb0IsRUFBRSxZQUFZLEVBQ2xDLFlBQVksRUFDWixVQUFVLEVBQ1YsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDdkIsQ0FBQTtRQUNILENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsMEJBQTBCLENBQUMsV0FBVztJQUM3QyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXpELElBQUksZUFBZSxFQUFFLENBQUM7UUFDcEIsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVuRCxzREFBc0Q7UUFDdEQscUVBQXFFO1FBQ3JFLHlFQUF5RTtRQUN6RSxrRUFBa0U7UUFDbEUsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRUQsTUFBTSxhQUFhLEdBQUcsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFeEQsT0FBTyxhQUFhLENBQUE7QUFDdEIsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQUMsV0FBVztJQUN2QyxLQUFLLE1BQU0sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDLElBQUksZUFBZSxFQUFFLENBQUM7UUFDN0MsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztZQUN2QixPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQTtRQUNuQixDQUFDO0lBQ0gsQ0FBQztJQUVELDBCQUEwQjtJQUMxQixPQUFPLEVBQUUsQ0FBQSxDQUFDLHVGQUF1RjtBQUNuRyxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILFNBQVMsb0JBQW9CLENBQUMsZUFBZTtJQUMzQyxTQUFTLG1CQUFtQixDQUFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBQztRQUM3QyxPQUFPLEdBQUcsSUFBSSxHQUFHLFVBQVU7YUFDeEIsR0FBRyxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxXQUFXLEdBQUcsRUFBRSxFQUFDLEVBQUUsRUFBRTtZQUN0RCxNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQy9ELElBQUksY0FBYyxFQUFFLENBQUM7Z0JBQ25CLE9BQU8sU0FBUyxhQUFhLElBQUksQ0FBQTtZQUNuQyxDQUFDO2lCQUFNLElBQUksS0FBSyxFQUFFLENBQUM7Z0JBQ2pCLE9BQU8sSUFBSSxhQUFhLEtBQUssS0FBSyxJQUFJLENBQUE7WUFDeEMsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE9BQU8sSUFBSSxhQUFhLEdBQUcsQ0FBQTtZQUM3QixDQUFDO1FBQ0gsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDZixDQUFDO0lBRUQsU0FBUyxzQkFBc0IsQ0FBQyxFQUFDLFVBQVUsR0FBRyxFQUFFLEVBQUM7UUFDL0MsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFBO0lBQzFCLENBQUM7SUFFRCxTQUFTLHFCQUFxQixDQUM1QixFQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUMsRUFDOUIsRUFBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUM7UUFFL0IsT0FBTyxnQkFBZ0IsR0FBRyxlQUFlLENBQUE7SUFDM0MsQ0FBQztJQUVELFNBQVMsS0FBSyxDQUFDLE9BQU87UUFDcEIsSUFBSSxFQUFDLFVBQVUsR0FBRyxFQUFFLEVBQUMsR0FBRyxPQUFPLENBQUM7UUFFaEMsb0VBQW9FO1FBQ3BFLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQ3hDLFNBQVMsQ0FBQyxFQUFFLENBQ1YsU0FBUyxDQUFDLEtBQUs7WUFDZixTQUFTLENBQUMsSUFBSSxLQUFLLE1BQU07WUFDekIsU0FBUyxDQUFDLEtBQUssS0FBSyxNQUFNLENBQzdCLENBQUM7UUFFRixJQUFJLGFBQWEsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN2QixzREFBc0Q7WUFDdEQsVUFBVSxHQUFHO2dCQUNYLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDO2dCQUNyQyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQzthQUN2QyxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDLEVBQUMsR0FBRyxPQUFPLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQztRQUUvRCxPQUFPLElBQUksQ0FBQyxFQUFFO1lBQ1osSUFBSSxhQUFhLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFLENBQUM7Z0JBQy9DLE9BQU8sS0FBSyxDQUFBO1lBQ2QsQ0FBQztZQUVELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMvQixDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWhCLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUN6RCxNQUFNLEdBQUc7WUFDUCxHQUFHLE1BQU07WUFDVDtnQkFDRSxLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQztnQkFDckIsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUN4QixXQUFXLEVBQUUsc0JBQXNCLENBQUMsT0FBTyxDQUFDO2FBQzdDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQTtBQUMzQyxDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsc0JBQXNCO0lBQy9ELGdCQUFnQixDQUFDLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRCxNQUFNLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BGLE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFFcEQsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLElBQUksb0JBQW9CLEVBQUUsQ0FBQztRQUN6Qix5RkFBeUY7UUFDekYsdUNBQXVDO1FBQ3ZDLElBQUksR0FBRyxvQkFBb0IsS0FBSyxFQUFFLENBQUM7SUFDckMsQ0FBQztTQUFNLENBQUM7UUFDTixJQUFJO1lBQ0Ysc0JBQXNCLFlBQVksTUFBTTtnQkFDdEMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUk7UUFFSixPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDeEMsT0FBTyxVQUFVLENBQ2YsSUFBSSxFQUNKLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLG9CQUFvQixDQUFDLElBQUksRUFBRSxFQUMxRCxTQUFTLEVBQ1QsRUFBRSxDQUNILEVBQ0Qsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQzdDLHNCQUFzQixFQUN0QixVQUFVLEVBQ1Ysb0JBQW9CLENBQ3JCLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUs7SUFDNUMsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFBO0FBQ25FLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSztJQUNqRCxPQUFPLEtBQUssS0FBSyxTQUFTO1FBQ3hCLENBQUMsQ0FBQyx3QkFBd0IsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHO1FBQzVDLENBQUMsQ0FBQyx3QkFBd0IsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFBO0FBQ3hFLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLGFBQWE7SUFDdkQsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRCxNQUFNLHNCQUFzQixHQUFHLGFBQWEsS0FBSyxTQUFTLENBQUM7SUFDM0QsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JELE9BQU87UUFDTCxJQUFJLEVBQUUsc0JBQXNCO1lBQzFCLENBQUMsQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO1lBQzNELENBQUMsQ0FBQyxZQUFZO1FBQ2hCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN4QyxNQUFNLGlCQUFpQixHQUFHLFlBQVk7Z0JBQ3BDLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQztnQkFDM0QsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNULE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsRUFDN0MsU0FBUyxFQUNULElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUM5QjtnQkFDRSxjQUFjLEVBQUUsc0JBQXNCO29CQUNwQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDO29CQUN6QyxDQUFDLENBQUMsU0FBUztnQkFDYixPQUFPLEVBQUUsbUJBQW1CLENBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUNwQixJQUFJLEVBQ0osYUFBYSxDQUNkO2FBQ0YsQ0FDRixDQUFDO1lBQ0YsT0FBTyxVQUFVLENBQ2YsSUFBSSxFQUNKLE9BQU8sRUFDUCx3QkFBd0IsRUFBRSxpQkFBaUIsRUFDM0MsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsRUFDekQsVUFBVSxFQUNWLGlCQUFpQixDQUNsQixDQUFBO1FBQ0gsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUywrQkFBK0IsQ0FBQyxNQUFNO0lBQzdDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUMvQixJQUFJLGtCQUFrQixFQUFFLE9BQU8sQ0FBQztJQUVoQyxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsU0FBUyxZQUFZLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDcEUsa0JBQWtCLEdBQUcsTUFBTSxDQUFDO1FBQzVCLE9BQU8sR0FBRyxTQUFTLENBQUM7SUFDdEIsQ0FBQztTQUFNLENBQUM7UUFDTixrQkFBa0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sR0FBRyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUMsQ0FBQztJQUMzQixDQUFDO0lBQ0QsT0FBTyxFQUFDLGtCQUFrQixFQUFFLE9BQU8sRUFBQyxDQUFBO0FBQ3RDLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFHO0lBQzFCLElBQUksQ0FBQyxHQUFHO1FBQUUsT0FBTyxFQUFFLENBQUE7SUFDbkIsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDbkQsQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLE1BQU0sRUFBRSxRQUFRO0lBQ2xDLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUNoQyxPQUFPLFdBQVcsS0FBSyxRQUFRO1FBQzdCLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNoQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDNUQsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxNQUFNO0lBQ3pDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsTUFBTSxFQUFDLGtCQUFrQixFQUFFLE9BQU8sRUFBQyxHQUFHLCtCQUErQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRTlFLE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDcEUsTUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUN4QyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUNqQixHQUFHLENBQUMsTUFBTSxDQUNSLE9BQU8sU0FBUyxLQUFLLFFBQVEsSUFBSSxDQUFDLFNBQVM7UUFDekMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUM7UUFDNUIsQ0FBQyxDQUFDLFNBQVMsQ0FDZCxFQUNILEVBQUUsQ0FDSCxDQUFDO0lBRUYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsWUFBWSxNQUFNLENBQUMsQ0FBQztJQUMxRSxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksU0FBUyxFQUFFLENBQUM7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFBO0lBQzlFLENBQUM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNsQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsTUFBTTtZQUMzRSxPQUFPLEVBQUUsR0FBRyxFQUFFO2dCQUNaLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUN4QyxPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFDekMsU0FBUyxFQUNULElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDN0MsRUFDRCx3QkFBd0IsRUFBRSwrQkFBK0IsRUFDekQsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDbEIsVUFBVSxFQUNWLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQ25CLENBQUE7WUFDSCxDQUFDO1NBQ0YsQ0FBQTtJQUNILENBQUM7SUFFRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUN4QixDQUFDLENBQUM7WUFDRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7WUFDcEMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDeEMsT0FBTyxVQUFVLENBQ2YsSUFBSSxFQUNKLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLEVBQ3pDLFNBQVMsRUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzdDLEVBQ0Qsd0JBQXdCLEVBQUUsYUFBYSxFQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNsQixVQUFVLEVBQ1YsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FDbkIsQ0FBQTtZQUNILENBQUM7U0FDRjtRQUNILENBQUMsQ0FBQztZQUNFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztZQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osSUFBSSxDQUFDLEtBQUs7Z0JBQ1IsQ0FBQyxDQUFDLFVBQVUsQ0FDUixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUN6RCxzQ0FBc0MsRUFDdEMsUUFBUSxFQUNSLFVBQVUsRUFDVixRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUNuQjtnQkFDSCxDQUFDLENBQUM7b0JBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQztvQkFDakQsK0NBQStDO2lCQUNoRCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDbkIsQ0FBQTtBQUNQLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxHQUFHO0lBQ3hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUVsQixrREFBa0Q7SUFDbEQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLE1BQU0sRUFBRSxhQUFhO0lBQ3JDLE9BQU8sQ0FDTCxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNO1FBQzVCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUM3QyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0MsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0I7Z0JBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBRWpFLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUMxQixJQUFJLENBQUMsRUFBRSxDQUNMLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLO2dCQUM3QixhQUFhLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUNqRCxDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxNQUFNO0lBQzVCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDdkIsSUFBSSxFQUFFO1NBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2YsQ0FBQztBQUVELDJFQUEyRTtBQUMzRSwyQkFBMkI7QUFDM0IsU0FBUyxZQUFZLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxjQUFjO0lBQ3BELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1NBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLENBQUM7U0FDNUMsTUFBTSxDQUNMLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFFLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLEVBQ3JFLEVBQUUsQ0FDSCxDQUFDO0lBQ0osTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5RSxvRUFBb0U7SUFDcEUsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQzlELENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxXQUFXLEVBQUUsR0FBRztJQUNuQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pELE1BQU0sU0FBUyxHQUNiLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuRSxNQUFNLEVBQUMsZ0JBQWdCLEVBQUMsR0FBRyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUVqRSxNQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNFLE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRS9DLE9BQU87UUFDTCxJQUFJLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDbEMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE1BQU0sT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsQ0FBQztZQUMxRCxPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDO2dCQUM5QyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQzthQUNsRCxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNoQixDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxPQUFPO0lBQzFCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFN0MsT0FBTztRQUNMLElBQUksRUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsS0FBSyxPQUFPO1FBQ3JELE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLEVBQ3pDLFNBQVMsRUFDVCxFQUFFLENBQ0g7Z0JBQ0QsRUFBRTtnQkFDRixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUs7b0JBQ1osQ0FBQyxDQUFDO3dCQUNFLDhCQUE4Qjt3QkFDOUIsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRTtxQkFDekM7b0JBQ0gsQ0FBQyxDQUFDO3dCQUNFLDhCQUE4Qjt3QkFDOUIsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRTt3QkFDeEMsOEJBQThCO3dCQUM5QixLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUMzQixPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FDcEMsRUFBRTtxQkFDSixDQUFDO2FBQ1AsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCx5RUFBeUU7QUFDekUsNkNBQTZDO0FBQzdDLFNBQVMsb0JBQW9CLENBQUMsUUFBUTtJQUNwQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQ2Isb0VBQW9FLENBQ3JFLENBQUE7SUFDSCxDQUFDO0lBQ0QsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqQixLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDYixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNELE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7UUFDdEQsQ0FBQztRQUNELEtBQUssVUFBVTtZQUNiLE9BQU8sUUFBUTtpQkFDWixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2lCQUNwQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDcEM7WUFDRSxvRUFBb0U7WUFDcEUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2pELENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsU0FBUyxFQUFFLElBQUk7SUFDbkMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3RSx3QkFBd0I7SUFDeEIsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzFCLE9BQU8sU0FBUyxDQUFBLENBQUMscUNBQXFDO0lBQ3hELENBQUM7SUFDRCxRQUFRLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN4QixLQUFLLENBQUM7WUFDSixPQUFPLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzNDO1lBQ0UsT0FBTyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0FBQ0gsQ0FBQztBQUVELCtDQUErQztBQUMvQyxTQUFTLFdBQVcsQ0FBQyxJQUFJO0lBQ3ZCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO0FBQ3RELENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLFNBQVM7SUFDakMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFFLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FDakIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxHQUFHO1FBQ04sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztLQUNuRCxDQUFDLEVBQ0YsRUFBRSxDQUNILENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsY0FBYztJQUNuRCxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUMxQiwyRkFBMkY7UUFDM0YsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFBO0lBQzVFLENBQUM7SUFDRCxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNqRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLEVBQUUsRUFBRSxDQUNuRSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUM5QztRQUNELE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN4QyxNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxtQkFBbUIsQ0FBQztZQUMvRCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztpQkFDNUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDakQsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoRSxPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDO2dCQUM5Qyx3QkFBd0IsRUFBRSxtQkFBbUI7Z0JBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxlQUFlLENBQUM7YUFDakQsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDaEIsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsT0FBTztJQUM3QixNQUFNLEVBQUMsZ0JBQWdCLEVBQUMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUU3RCxNQUFNLEVBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRSxPQUFPLENBQ0wsT0FBTyxLQUFLLE1BQU07UUFDbEIsVUFBVSxLQUFLLFFBQVE7UUFDdkIsVUFBVSxLQUFLLFVBQVU7UUFDekIsT0FBTyxLQUFLLEdBQUc7UUFDZixPQUFPLEtBQUssQ0FBQyxDQUNkLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsZUFBZTtJQUNsRCxJQUFJLGlCQUFpQixDQUFDO0lBRXRCLElBQUksZUFBZSxFQUFFLENBQUM7UUFDcEIsaUJBQWlCO1lBQ2YsT0FBTyxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksZUFBZSxDQUFDLFFBQVEsS0FBSyxTQUFTO2dCQUN0RSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7Z0JBQzlCLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDYixDQUFDO1NBQU0sQ0FBQztRQUNOLGlCQUFpQjtZQUNmLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDekUsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLGlCQUFpQixDQUFBO0FBQzdELENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxlQUFlO0lBQ2hELE9BQU8sQ0FDTCxjQUFjLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUM7UUFDNUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUM3RSxDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLE9BQU87SUFDMUIsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM3QyxNQUFNLFlBQVksR0FDaEIsT0FBTyxDQUFDLGFBQWEsS0FBSyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxTQUFTLEdBQUcsWUFBWSxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVELE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ3ZDLE9BQU87Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFDekMsU0FBUyxFQUNULEVBQUUsQ0FDSDtnQkFDRCxFQUFFO2dCQUNGLG9CQUFvQixFQUFFLFdBQ3BCLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxtQ0FDdEIsR0FBRztnQkFDSCxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTthQUMxRCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNkLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQUVELHdDQUF3QztBQUN4QyxNQUFNLFdBQVcsR0FBRztJQUNsQixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0NBQ1gsQ0FBQztBQUVGOzs7Ozs7OztHQVFHO0FBQ0gsU0FBUyw0QkFBNEIsQ0FBQyxPQUFPLEVBQUUsTUFBTTtJQUNuRCxPQUFPLENBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVE7UUFDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVU7UUFDN0IsT0FBTyxDQUFDLFVBQVUsQ0FDaEIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUN0RSxDQUNGLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsTUFBTTtJQUNoRCxPQUFPLENBQ0wsaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQzVFLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsR0FBRztJQUMxQixPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDMUIsQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQVMsb0JBQW9CLENBQUMsT0FBTztJQUNuQyxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUIsT0FBTyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUMxRCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxPQUFPO0lBQ2hDLE9BQU8sb0JBQW9CLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQTtBQUMxRSxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxPQUFPO0lBQ2pDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7SUFDckMsT0FBTyxDQUNMLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDZixDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUMzRSxDQUFBO0FBQ0gsQ0FBQztBQUVELFNBQVMsMkJBQTJCLENBQUMsT0FBTztJQUMxQyxPQUFPLENBQ0wsb0JBQW9CLENBQUMsT0FBTyxDQUFDO1FBQzdCLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FDNUQsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxPQUFPO0lBQzNCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFOUMsTUFBTSxVQUFVLEdBQUcsMkJBQTJCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFeEQsT0FBTztRQUNMLElBQUksRUFBRSxVQUFVO1FBQ2hCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ3hDLE9BQU87Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGVBQWUsRUFDMUMsU0FBUyxFQUNULEVBQUUsQ0FDSDtnQkFDRCxFQUFFO2dCQUNGLG9CQUFvQixFQUFFLFlBQVk7Z0JBQ2xDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2FBQzFELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2QsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsT0FBTztJQUMxQixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTdDLE1BQU0sU0FBUyxHQUFHLENBQUMsMkJBQTJCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFeEQsT0FBTztRQUNMLElBQUksRUFBRSxTQUFTO1FBQ2YsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDdkMsT0FBTztnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxFQUN6QyxTQUFTLEVBQ1QsRUFBRSxDQUNIO2dCQUNELEVBQUU7Z0JBQ0Ysb0JBQW9CLEVBQUUsV0FBVztnQkFDakMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7YUFDMUQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCx3Q0FBd0M7QUFDeEMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFM0MsTUFBTSxjQUFjLEdBQUcsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRXZELE1BQU0sdUJBQXVCLEdBQUc7SUFDOUIsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0NBQ1IsQ0FBQztBQUVGLE1BQU0sb0JBQW9CLEdBQUc7SUFDM0IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFlBQVk7SUFDWixZQUFZO0lBQ1osU0FBUztJQUNULE1BQU07Q0FDUCxDQUFDO0FBRUYsU0FBUywrQkFBK0IsQ0FBQyxPQUFPO0lBQzlDLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ2xGLENBQUM7QUFFRCxTQUFTLDBCQUEwQixDQUFDLE9BQU87SUFDekMsT0FBTyxDQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxPQUFPO1FBQzNCLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztZQUM1QixDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDaEUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ2pDLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyx1QkFBdUIsQ0FBQyxPQUFPO0lBQ3RDLE9BQU8sQ0FDTCxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQztRQUNyQyxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxLQUFLLE1BQU07UUFDaEQsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO2dCQUMzQixvQkFBb0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEUsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxPQUFPO0lBQzNCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFOUMsTUFBTSxVQUFVLEdBQ2QsK0JBQStCLENBQUMsT0FBTyxDQUFDO1FBQ3hDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQztRQUNuQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVuQyxPQUFPO1FBQ0wsSUFBSSxFQUFFLFVBQVU7UUFDaEIsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDeEMsT0FBTztnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUMxQyxTQUFTLEVBQ1QsRUFBRSxDQUNIO2dCQUNELEVBQUU7Z0JBQ0Ysb0JBQW9CLEVBQUUsWUFBWTtnQkFDbEMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7YUFDMUQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRTFELFNBQVMsMEJBQTBCLENBQUMsT0FBTztJQUN6QyxPQUFPLENBQ0wsT0FBTyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7UUFDcEMsT0FBTyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsS0FBSyxPQUFPLENBQ2pELENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyx3QkFBd0IsQ0FBQyxPQUFPO0lBQ3ZDLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtBQUM1QyxDQUFDO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxPQUFPO0lBQy9CLE1BQU0saUJBQWlCLEdBQUcsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUQsSUFBSSx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3RDLE9BQU8saUJBQWlCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDdEQsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLGlCQUFpQixDQUFBO0lBQzFCLENBQUM7QUFDSCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsT0FBTztJQUMxQixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBRTdDLE1BQU0sU0FBUyxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTVDLE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ3ZDLE9BQU87Z0JBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFDekMsU0FBUyxFQUNULEVBQUUsQ0FDSDtnQkFDRCxFQUFFO2dCQUNGLG9CQUFvQixFQUFFLHFCQUFxQjtnQkFDM0MsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7YUFDMUQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxPQUFPO0lBQ3hCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFM0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUzQyxPQUFPO1FBQ0wsSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUNyQyxPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQ3ZDLFNBQVMsRUFDVCxFQUFFLENBQ0g7Z0JBQ0QsRUFBRTtnQkFDRixvQkFBb0IsRUFBRSxtQkFBbUI7Z0JBQ3pDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2FBQzFELENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2QsQ0FBQztLQUNGLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsV0FBVyxFQUFFLGFBQWE7SUFDN0MsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUVqRCxJQUNFLFdBQVcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTztRQUM3QyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUNoRCxDQUFDO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FDYixnSkFBZ0osQ0FDakosQ0FBQTtJQUNILENBQUM7SUFFRCxNQUFNLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RCxNQUFNLFlBQVksR0FBRyxhQUFhLEtBQUssU0FBUyxDQUFDO0lBRWpELElBQUksa0JBQWtCLEdBQUcsYUFBYSxDQUFDO0lBQ3ZDLElBQUksa0JBQWtCLEdBQUcsYUFBYSxDQUFDO0lBQ3ZDLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLEtBQUssYUFBYSxFQUFFLENBQUM7UUFDdEUsa0JBQWtCLEdBQUcsR0FBRyxhQUFhLEtBQUssT0FBTyxhQUFhLEdBQUcsQ0FBQztRQUNsRSxrQkFBa0IsR0FBRyxHQUFHLGFBQWEsS0FBSyxPQUFPLGFBQWEsR0FBRyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLFlBQVk7WUFDaEIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO1lBQzVDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxFQUN6QyxTQUFTLEVBQ1QsYUFBYSxDQUNkLENBQUM7WUFDRixPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osT0FBTyxFQUNQLHdCQUF3QixFQUFFLGFBQWEsRUFDdkMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUMzQyxVQUFVLEVBQ1Ysa0JBQWtCLENBQ25CLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxhQUFhO0lBQ3BELGdCQUFnQixDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRWxELElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDdkQsTUFBTSxJQUFJLEtBQUssQ0FDYixxSEFBcUgsQ0FDdEgsQ0FBQTtJQUNILENBQUM7SUFFRCxJQUFJLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzVFLE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0VBQWdFLFdBQVcsQ0FBQyxJQUFJLHVDQUF1QyxDQUN4SCxDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDL0MsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEQsTUFBTSx5QkFBeUIsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQ2pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDbEIsUUFBUSxZQUFZLE1BQU07UUFDeEIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDekMsQ0FDRixDQUFDLE1BQU0sQ0FBQztJQUVULE1BQU0sb0JBQW9CLEdBQUcseUJBQXlCLEtBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUN6RSxNQUFNLDRCQUE0QixHQUNoQyx5QkFBeUIsS0FBSyxjQUFjLENBQUMsTUFBTSxDQUFDO0lBRXRELE9BQU87UUFDTCxJQUFJLEVBQUUsb0JBQW9CLElBQUksNEJBQTRCO1FBQzFELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FDWixVQUFVLENBQ1IsSUFBSSxFQUNKLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxxQkFBcUIsRUFDaEQsU0FBUyxFQUNULEVBQUUsQ0FDSCxFQUNELG9CQUFvQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsdUJBQXVCLEVBQ25FLGFBQWEsRUFDYixVQUFVLEVBQ1YsTUFBTSxDQUNQO0tBQ0osQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsV0FBVztJQUNyQyxPQUFPLE9BQU8sS0FBSyxRQUFRO1FBQ3pCLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzthQUNwQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2FBQ2pDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3pCLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLGFBQWE7SUFDdEMsT0FBTyxhQUFhLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDekUsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLE9BQU87SUFDMUIsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUU3QyxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUU7UUFDeEIsT0FBTyxDQUNMLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTztZQUN6QyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUM3QyxDQUFBO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUU7UUFDOUIsT0FBTyxDQUNMLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakQsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FDakUsQ0FBQTtJQUNILENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQztRQUM3QyxPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1oscUVBQXFFLHNCQUFzQixFQUFFLGlHQUFpRztTQUNqTSxDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNyQixJQUFJLFlBQVksRUFBRTtZQUFFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQTtRQUMxQyxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssTUFBTSxDQUFBO0lBQ3hELENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUyxFQUFFO1FBQ2pCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDekMsT0FBTztnQkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxFQUN6QyxTQUFTLEVBQ1QsRUFBRSxDQUNIO2dCQUNELEVBQUU7Z0JBQ0Ysb0JBQW9CLEVBQUUsV0FBVztnQkFDakMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7YUFDMUQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLHNCQUFzQjtJQUM3QixPQUFPLFVBQVUsQ0FDZixjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLElBQUksR0FBRyxDQUFDLEVBQzlDLEVBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFDLENBQzVCLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxjQUFjO0lBQ3JCLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtBQUMzRCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxJQUFJO0lBQy9CLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLFNBQVMsQ0FBQTtBQUN2RSxDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxPQUFPO0lBQ25DLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUV0RCxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUU7UUFDeEIsT0FBTyxDQUNMLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUN6RSxDQUFBO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUU7UUFDOUIsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsQ0FBQTtJQUNwRCxDQUFDLENBQUM7SUFFRixJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLENBQUM7UUFDN0MsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLDJLQUEySztTQUM5SyxDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxFQUFFO1FBQzlCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssT0FBTyxDQUFDO1FBRXJFLElBQUksWUFBWSxFQUFFLEVBQUUsQ0FBQztZQUNuQixPQUFPLE9BQU8sQ0FBQyxhQUFhLElBQUksV0FBVyxDQUFBO1FBQzdDLENBQUM7UUFFRCxPQUFPLFdBQVcsQ0FBQTtJQUNwQixDQUFDLENBQUM7SUFFRixPQUFPO1FBQ0wsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1FBQzFCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUNsRCxPQUFPO2dCQUNMLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSx1QkFBdUIsRUFDbEQsU0FBUyxFQUNULEVBQUUsQ0FDSDtnQkFDRCxFQUFFO2dCQUNGLG9CQUFvQixFQUFFLHFCQUFxQjtnQkFDM0MsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7YUFDMUQsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDZCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxxRkFBcUY7QUFDckYsU0FBUyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsU0FBUztJQUMvQyxTQUFTLENBQ1AsbUJBQW1CLEVBQ25CLHlDQUF5QyxDQUMxQyxDQUFDO0lBRUYsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXZELE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxLQUFLLFNBQVMsQ0FBQztJQUVuRCxNQUFNLGdCQUFnQixHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUUsTUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRSxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDckIsSUFBSSxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzlCLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUM7UUFDM0MsTUFBTSxjQUFjLEdBQUcsY0FBYzthQUNsQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQzVELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQixXQUFXLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLEVBQUUsa0JBQWtCO1lBQ3RCLENBQUMsQ0FBQyxTQUFTLFlBQVksTUFBTTtnQkFDM0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2dCQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ3hCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN4QyxPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLG9CQUFvQixFQUMvQyxTQUFTLEVBQ1QsRUFBRSxDQUNILEVBQ0Qsd0JBQXdCLEVBQUUsbUJBQW1CLEVBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUNuQyxVQUFVLEVBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQ3RDLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxtRkFBbUY7QUFDbkYsU0FBUyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsU0FBUztJQUNoRCxTQUFTLENBQUMsb0JBQW9CLEVBQUUsMENBQTBDLENBQUMsQ0FBQztJQUM1RSxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFeEQsSUFDRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDO1FBQ3pDLFdBQVcsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssT0FBTyxFQUNwRCxDQUFDO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFckMsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDWixPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLHFCQUFxQixFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFDbEUseURBQXlELEVBQ3pELHFCQUFxQixFQUNyQixVQUFVLEVBQ1YsV0FBVyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUM7b0JBQ3RDLENBQUMsQ0FBQyxpQkFBaUIsV0FBVyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsR0FBRztvQkFDOUQsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUNqQyxDQUFBO1lBQ0gsQ0FBQztTQUNGLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLEtBQUssU0FBUyxDQUFDO0lBRXBELE1BQU0saUJBQWlCLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5RSxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXZFLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUN0QixJQUFJLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDL0IsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLGFBQWEsQ0FBQztRQUUzQyxNQUFNLGVBQWUsR0FBRyxlQUFlO2FBQ3BDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7YUFDOUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRW5CLFlBQVksR0FBRyxTQUFTLENBQ3RCLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUNwRCxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLEVBQUUsbUJBQW1CO1lBQ3ZCLENBQUMsQ0FBQyxTQUFTLFlBQVksTUFBTTtnQkFDM0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUM5QixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDO1lBQ3hDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3pCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN4QyxPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLHFCQUFxQixFQUNoRCxTQUFTLEVBQ1QsRUFBRSxDQUNILEVBQ0Qsd0JBQXdCLEVBQUUscUJBQXFCLEVBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUNuQyxVQUFVLEVBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQ3ZDLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQVMsWUFBWSxDQUFDLE9BQU87SUFDM0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUV2RCxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNsRSxJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTyxFQUFFLENBQUE7UUFDM0QsT0FBTyxPQUFPLENBQUMsS0FBSzthQUNqQixRQUFRLEVBQUU7YUFDVixTQUFTLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVELElBQUksU0FBUyxDQUFDLFVBQVUsS0FBSyxJQUFJLElBQUksU0FBUyxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNsRSxlQUFlO1FBQ2YsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0lBRUQsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QyxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRTNELElBQUksU0FBUyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUMzQyxvQ0FBb0M7UUFDcEMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM1QixTQUFTLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7U0FBTSxJQUNMLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUN0QyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDckMsQ0FBQztTQUFNLENBQUM7UUFDUixnQ0FBZ0M7UUFDaEMsTUFBTSw0QkFBNEIsR0FDaEMsT0FBTyxLQUFLLGFBQWEsQ0FBQyxjQUFjO1lBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sMEJBQTBCLEdBQzlCLE9BQU8sS0FBSyxhQUFhLENBQUMsWUFBWTtZQUN0QyxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFNUIsSUFBSSw0QkFBNEIsSUFBSSwwQkFBMEIsRUFBRSxDQUFDO1lBQy9ELGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUzQyxJQUFJLDRCQUE0QixFQUFFLENBQUM7Z0JBQ2pDLGNBQWMsQ0FBQyxRQUFRLENBQ3JCLGFBQWEsQ0FBQyxjQUFjLEVBQzVCLGFBQWEsQ0FBQyxXQUFXLENBQzFCLENBQUM7WUFDSixDQUFDO1lBQ0QsSUFBSSwwQkFBMEIsRUFBRSxDQUFDO2dCQUMvQixjQUFjLENBQUMsTUFBTSxDQUNuQixhQUFhLENBQUMsWUFBWSxFQUMxQixhQUFhLENBQUMsU0FBUyxDQUN4QixDQUFDO1lBQ0osQ0FBQztZQUVELFNBQVMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckMsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFcEMsU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzVCLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEMsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFTLGVBQWUsQ0FBQyxXQUFXLEVBQUUsaUJBQWlCO0lBQ3JELGdCQUFnQixDQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFckQsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsS0FBSyxTQUFTLENBQUM7SUFFekQsSUFBSSxnQkFBZ0IsSUFBSSxPQUFPLGlCQUFpQixLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQzlELE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQTtJQUNyRSxDQUFDO0lBRUQsTUFBTSxpQkFBaUIsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7SUFFcEQsT0FBTztRQUNMLElBQUksRUFBRSxnQkFBZ0I7WUFDcEIsQ0FBQyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQztZQUNwRCxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQzlCLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDWixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FDcEMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLEVBQzdDLFNBQVMsRUFDVCxpQkFBaUIsQ0FDbEIsQ0FBQztZQUNGLE9BQU8sVUFBVSxDQUNmLElBQUksRUFDSixPQUFPLEVBQ1Asd0JBQXdCLEVBQUUsaUJBQWlCLEVBQzNDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUM5QyxVQUFVLEVBQ1YsaUJBQWlCLENBQ2xCLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxPQUFPO0lBQzFCLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFN0MsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMvQyxLQUFLLENBQUMsR0FBRyxDQUFDO1NBQ1YsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFFNUIsTUFBTSxRQUFRLEdBQ1osT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxRQUFRO1FBQzFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7UUFDeEUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUUzQixNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFOUQsTUFBTSxrQkFBa0IsR0FDdEIsZ0JBQWdCLEtBQUssTUFBTSxJQUFJLGdCQUFnQixLQUFLLE9BQU8sQ0FBQztJQUU5RCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUNyQyxPQUFPO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQ1osMElBQTBJO1NBQzdJLENBQUE7SUFDSCxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLEtBQUssTUFBTSxDQUFDO0lBRTlDLE9BQU87UUFDTCxJQUFJLEVBQUUsUUFBUSxJQUFJLFNBQVM7UUFFM0IsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNaLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUNwQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLEVBQ3pDLFNBQVMsRUFDVCxFQUFFLENBQ0gsQ0FBQztZQUVGLE9BQU8sVUFBVSxDQUNmLElBQUksRUFDSixPQUFPLEVBQ1AsMEJBQTBCLEVBQzFCLGlCQUFpQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxFQUNqRCxVQUFVLEVBQ1YsaUJBQWlCLGdCQUFnQixHQUFHLENBQ3JDLENBQUE7UUFDSCxDQUFDO0tBQ0YsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLG9CQUFvQixDQUFDLE9BQU87SUFDbkMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBRXRELE1BQU0sS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDL0MsS0FBSyxDQUFDLEdBQUcsQ0FBQztTQUNWLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTVCLE1BQU0sUUFBUSxHQUNaLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUTtRQUMxQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO1FBQ3hFLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFM0IsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRTlELE1BQU0sa0JBQWtCLEdBQ3RCLGdCQUFnQixLQUFLLE1BQU07UUFDM0IsZ0JBQWdCLEtBQUssT0FBTztRQUM1QixnQkFBZ0IsS0FBSyxPQUFPLENBQUM7SUFFL0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDckMsT0FBTztZQUNMLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUNaLG1KQUFtSjtTQUN0SixDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sa0JBQWtCLEdBQUcsZ0JBQWdCLEtBQUssT0FBTyxDQUFDO0lBRXhELE9BQU87UUFDTCxJQUFJLEVBQUUsUUFBUSxJQUFJLGtCQUFrQjtRQUVwQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ1osTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFFeEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQ3BDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLHVCQUF1QixFQUNsRCxTQUFTLEVBQ1QsRUFBRSxDQUNILENBQUM7WUFFRixPQUFPLFVBQVUsQ0FDZixJQUFJLEVBQ0osT0FBTyxFQUNQLG9CQUFvQixFQUFFLE9BQU8sRUFDN0Isc0JBQXNCLEVBQ3RCLFVBQVUsRUFDVixpQkFBaUIsZ0JBQWdCLEdBQUcsQ0FDckMsQ0FBQTtRQUNILENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQztBQUVELElBQUksVUFBVSxHQUFHLGFBQWEsQ0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzFDLFNBQVMsRUFBRSxJQUFJO0lBQ2YsV0FBVyxFQUFFLFdBQVc7SUFDeEIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsbUJBQW1CLEVBQUUsbUJBQW1CO0lBQ3hDLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLFlBQVksRUFBRSxZQUFZO0lBQzFCLGlCQUFpQixFQUFFLGlCQUFpQjtJQUNwQyxXQUFXLEVBQUUsV0FBVztJQUN4QixvQkFBb0IsRUFBRSxvQkFBb0I7SUFDMUMsb0JBQW9CLEVBQUUsb0JBQW9CO0lBQzFDLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLFlBQVksRUFBRSxZQUFZO0lBQzFCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLGdCQUFnQixFQUFFLGdCQUFnQjtJQUNsQyxhQUFhLEVBQUUsYUFBYTtJQUM1QiwyQkFBMkIsRUFBRSwyQkFBMkI7SUFDeEQsNEJBQTRCLEVBQUUsNEJBQTRCO0lBQzFELG9CQUFvQixFQUFFLG9CQUFvQjtJQUMxQyxlQUFlLEVBQUUsZUFBZTtJQUNoQyxXQUFXLEVBQUUsV0FBVztJQUN4QixpQkFBaUIsRUFBRSxpQkFBaUI7SUFDcEMsa0JBQWtCLEVBQUUsa0JBQWtCO0lBQ3RDLGtCQUFrQixFQUFFLGtCQUFrQjtJQUN0QyxXQUFXLEVBQUUsV0FBVztJQUN4QixnQkFBZ0IsRUFBRSxnQkFBZ0I7SUFDbEMsVUFBVSxFQUFFLFVBQVU7SUFDdEIsZUFBZSxFQUFFLGVBQWU7SUFDaEMsV0FBVyxFQUFFLFdBQVc7SUFDeEIsaUJBQWlCLEVBQUUsaUJBQWlCO0lBQ3BDLFdBQVcsRUFBRSxXQUFXO0NBQ3pCLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQ2hDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBQ3BDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQzlCLE9BQU8sQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNsQyxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNwQyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFDOUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFDbEMsT0FBTyxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNsQyxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNwQyxPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUM5QixPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNsQyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFDdEMsT0FBTyxDQUFDLDJCQUEyQixHQUFHLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sQ0FBQyw0QkFBNEIsR0FBRyw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7QUFDMUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFDbEMsT0FBTyxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7QUFDbEMsT0FBTyxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBQ2hDLE9BQU8sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0FBQzFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0FBQ2xDLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tL2Rpc3QvbWF0Y2hlcnMtYTEyNTlkZDIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVkZW50ID0gcmVxdWlyZSgncmVkZW50Jyk7XG52YXIgY3NzVG9vbHMgPSByZXF1aXJlKCdAYWRvYmUvY3NzLXRvb2xzJyk7XG52YXIgZG9tQWNjZXNzaWJpbGl0eUFwaSA9IHJlcXVpcmUoJ2RvbS1hY2Nlc3NpYmlsaXR5LWFwaScpO1xudmFyIGFyaWFRdWVyeSA9IHJlcXVpcmUoJ2FyaWEtcXVlcnknKTtcbnZhciBwaWNvID0gcmVxdWlyZSgncGljb2NvbG9ycycpO1xudmFyIGVzY2FwZSA9IHJlcXVpcmUoJ2Nzcy5lc2NhcGUnKTtcblxuY2xhc3MgR2VuZXJpY1R5cGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZXhwZWN0ZWRTdHJpbmcsIHJlY2VpdmVkLCBtYXRjaGVyRm4sIGNvbnRleHQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIG1hdGNoZXJGbik7XG4gICAgfVxuICAgIGxldCB3aXRoVHlwZSA9ICcnO1xuICAgIHRyeSB7XG4gICAgICB3aXRoVHlwZSA9IGNvbnRleHQudXRpbHMucHJpbnRXaXRoVHlwZShcbiAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgcmVjZWl2ZWQsXG4gICAgICAgIGNvbnRleHQudXRpbHMucHJpbnRSZWNlaXZlZCxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gQ2FuIHRocm93IGZvciBEb2N1bWVudDpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9qc2RvbS9pc3N1ZXMvMjMwNFxuICAgIH1cbiAgICB0aGlzLm1lc3NhZ2UgPSBbXG4gICAgICBjb250ZXh0LnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICBgJHtjb250ZXh0LmlzTm90ID8gJy5ub3QnIDogJyd9LiR7bWF0Y2hlckZuLm5hbWV9YCxcbiAgICAgICAgJ3JlY2VpdmVkJyxcbiAgICAgICAgJycsXG4gICAgICApLFxuICAgICAgJycsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgYCR7Y29udGV4dC51dGlscy5SRUNFSVZFRF9DT0xPUihcbiAgICAgICAgJ3JlY2VpdmVkJyxcbiAgICAgICl9IHZhbHVlIG11c3QgJHtleHBlY3RlZFN0cmluZ30uYCxcbiAgICAgIHdpdGhUeXBlLFxuICAgIF0uam9pbignXFxuJyk7XG4gIH1cbn1cblxuY2xhc3MgSHRtbEVsZW1lbnRUeXBlRXJyb3IgZXh0ZW5kcyBHZW5lcmljVHlwZUVycm9yIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKCdiZSBhbiBIVE1MRWxlbWVudCBvciBhbiBTVkdFbGVtZW50JywgLi4uYXJncyk7XG4gIH1cbn1cblxuY2xhc3MgTm9kZVR5cGVFcnJvciBleHRlbmRzIEdlbmVyaWNUeXBlRXJyb3Ige1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoJ2JlIGEgTm9kZScsIC4uLmFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSGFzV2luZG93KGh0bWxFbGVtZW50LCBFcnJvckNsYXNzLCAuLi5hcmdzKSB7XG4gIGlmIChcbiAgICAhaHRtbEVsZW1lbnQgfHxcbiAgICAhaHRtbEVsZW1lbnQub3duZXJEb2N1bWVudCB8fFxuICAgICFodG1sRWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3XG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvckNsYXNzKGh0bWxFbGVtZW50LCAuLi5hcmdzKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrTm9kZShub2RlLCAuLi5hcmdzKSB7XG4gIGNoZWNrSGFzV2luZG93KG5vZGUsIE5vZGVUeXBlRXJyb3IsIC4uLmFyZ3MpO1xuICBjb25zdCB3aW5kb3cgPSBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlKSkge1xuICAgIHRocm93IG5ldyBOb2RlVHlwZUVycm9yKG5vZGUsIC4uLmFyZ3MpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tIdG1sRWxlbWVudChodG1sRWxlbWVudCwgLi4uYXJncykge1xuICBjaGVja0hhc1dpbmRvdyhodG1sRWxlbWVudCwgSHRtbEVsZW1lbnRUeXBlRXJyb3IsIC4uLmFyZ3MpO1xuICBjb25zdCB3aW5kb3cgPSBodG1sRWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG4gIGlmIChcbiAgICAhKGh0bWxFbGVtZW50IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSAmJlxuICAgICEoaHRtbEVsZW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudClcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEh0bWxFbGVtZW50VHlwZUVycm9yKGh0bWxFbGVtZW50LCAuLi5hcmdzKVxuICB9XG59XG5cbmNsYXNzIEludmFsaWRDU1NFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IocmVjZWl2ZWQsIG1hdGNoZXJGbiwgY29udGV4dCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgbWF0Y2hlckZuKTtcbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlID0gW1xuICAgICAgcmVjZWl2ZWQubWVzc2FnZSxcbiAgICAgICcnLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICAgIGNvbnRleHQudXRpbHMuUkVDRUlWRURfQ09MT1IoYEZhaWxpbmcgY3NzOmApLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICAgIGNvbnRleHQudXRpbHMuUkVDRUlWRURfQ09MT1IoYCR7cmVjZWl2ZWQuY3NzfWApLFxuICAgIF0uam9pbignXFxuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VDU1MoY3NzLCAuLi5hcmdzKSB7XG4gIGNvbnN0IGFzdCA9IGNzc1Rvb2xzLnBhcnNlKGBzZWxlY3RvciB7ICR7Y3NzfSB9YCwge3NpbGVudDogdHJ1ZX0pLnN0eWxlc2hlZXQ7XG5cbiAgaWYgKGFzdC5wYXJzaW5nRXJyb3JzICYmIGFzdC5wYXJzaW5nRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB7cmVhc29uLCBsaW5lfSA9IGFzdC5wYXJzaW5nRXJyb3JzWzBdO1xuXG4gICAgdGhyb3cgbmV3IEludmFsaWRDU1NFcnJvcihcbiAgICAgIHtcbiAgICAgICAgY3NzLFxuICAgICAgICBtZXNzYWdlOiBgU3ludGF4IGVycm9yIHBhcnNpbmcgZXhwZWN0ZWQgY3NzOiAke3JlYXNvbn0gb24gbGluZTogJHtsaW5lfWAsXG4gICAgICB9LFxuICAgICAgLi4uYXJncyxcbiAgICApXG4gIH1cblxuICBjb25zdCBwYXJzZWRSdWxlcyA9IGFzdC5ydWxlc1swXS5kZWNsYXJhdGlvbnNcbiAgICAuZmlsdGVyKGQgPT4gZC50eXBlID09PSAnZGVjbGFyYXRpb24nKVxuICAgIC5yZWR1Y2UoXG4gICAgICAob2JqLCB7cHJvcGVydHksIHZhbHVlfSkgPT4gT2JqZWN0LmFzc2lnbihvYmosIHtbcHJvcGVydHldOiB2YWx1ZX0pLFxuICAgICAge30sXG4gICAgKTtcbiAgcmV0dXJuIHBhcnNlZFJ1bGVzXG59XG5cbmZ1bmN0aW9uIGRpc3BsYXkoY29udGV4dCwgdmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB2YWx1ZSA6IGNvbnRleHQudXRpbHMuc3RyaW5naWZ5KHZhbHVlKVxufVxuXG5mdW5jdGlvbiBnZXRNZXNzYWdlKFxuICBjb250ZXh0LFxuICBtYXRjaGVyLFxuICBleHBlY3RlZExhYmVsLFxuICBleHBlY3RlZFZhbHVlLFxuICByZWNlaXZlZExhYmVsLFxuICByZWNlaXZlZFZhbHVlLFxuKSB7XG4gIHJldHVybiBbXG4gICAgYCR7bWF0Y2hlcn1cXG5gLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgYCR7ZXhwZWN0ZWRMYWJlbH06XFxuJHtjb250ZXh0LnV0aWxzLkVYUEVDVEVEX0NPTE9SKFxuICAgICAgcmVkZW50KGRpc3BsYXkoY29udGV4dCwgZXhwZWN0ZWRWYWx1ZSksIDIpLFxuICAgICl9YCxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgIGAke3JlY2VpdmVkTGFiZWx9OlxcbiR7Y29udGV4dC51dGlscy5SRUNFSVZFRF9DT0xPUihcbiAgICAgIHJlZGVudChkaXNwbGF5KGNvbnRleHQsIHJlY2VpdmVkVmFsdWUpLCAyKSxcbiAgICApfWAsXG4gIF0uam9pbignXFxuJylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyh0ZXh0VG9NYXRjaCwgbWF0Y2hlcikge1xuICBpZiAobWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBtYXRjaGVyLnRlc3QodGV4dFRvTWF0Y2gpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRleHRUb01hdGNoLmluY2x1ZGVzKFN0cmluZyhtYXRjaGVyKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXByZWNhdGUobmFtZSwgcmVwbGFjZW1lbnRUZXh0KSB7XG4gIC8vIE5vdGlmeSB1c2VyIHRoYXQgdGhleSBhcmUgdXNpbmcgZGVwcmVjYXRlZCBmdW5jdGlvbmFsaXR5LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBjb25zb2xlLndhcm4oXG4gICAgYFdhcm5pbmc6ICR7bmFtZX0gaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSB1cGRhdGVzLmAsXG4gICAgcmVwbGFjZW1lbnRUZXh0LFxuICApO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUodGV4dCkge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC9cXHMrL2csICcgJykudHJpbSgpXG59XG5cbmZ1bmN0aW9uIGdldFRhZyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnRhZ05hbWUgJiYgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gZ2V0U2VsZWN0VmFsdWUoe211bHRpcGxlLCBvcHRpb25zfSkge1xuICBjb25zdCBzZWxlY3RlZE9wdGlvbnMgPSBbLi4ub3B0aW9uc10uZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24uc2VsZWN0ZWQpO1xuXG4gIGlmIChtdWx0aXBsZSkge1xuICAgIHJldHVybiBbLi4uc2VsZWN0ZWRPcHRpb25zXS5tYXAob3B0ID0+IG9wdC52YWx1ZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHNlbGVjdGVkT3B0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkIC8vIENvdWxkbid0IG1ha2UgdGhpcyBoYXBwZW4sIGJ1dCBqdXN0IGluIGNhc2VcbiAgfVxuICByZXR1cm4gc2VsZWN0ZWRPcHRpb25zWzBdLnZhbHVlXG59XG5cbmZ1bmN0aW9uIGdldElucHV0VmFsdWUoaW5wdXRFbGVtZW50KSB7XG4gIHN3aXRjaCAoaW5wdXRFbGVtZW50LnR5cGUpIHtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlucHV0RWxlbWVudC52YWx1ZSA9PT0gJycgPyBudWxsIDogTnVtYmVyKGlucHV0RWxlbWVudC52YWx1ZSlcbiAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICByZXR1cm4gaW5wdXRFbGVtZW50LmNoZWNrZWRcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGlucHV0RWxlbWVudC52YWx1ZVxuICB9XG59XG5cbmNvbnN0IHJvbGVzU3VwcG9ydGluZ1ZhbHVlcyA9IFsnbWV0ZXInLCAncHJvZ3Jlc3NiYXInLCAnc2xpZGVyJywgJ3NwaW5idXR0b24nXTtcbmZ1bmN0aW9uIGdldEFjY2Vzc2libGVWYWx1ZShlbGVtZW50KSB7XG4gIGlmICghcm9sZXNTdXBwb3J0aW5nVmFsdWVzLmluY2x1ZGVzKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHJldHVybiBOdW1iZXIoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnKSlcbn1cblxuZnVuY3Rpb24gZ2V0U2luZ2xlRWxlbWVudFZhbHVlKGVsZW1lbnQpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICByZXR1cm4gZ2V0SW5wdXRWYWx1ZShlbGVtZW50KVxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICByZXR1cm4gZ2V0U2VsZWN0VmFsdWUoZWxlbWVudClcbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gZWxlbWVudC52YWx1ZSA/PyBnZXRBY2Nlc3NpYmxlVmFsdWUoZWxlbWVudClcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9TZW50ZW5jZShcbiAgYXJyYXksXG4gIHt3b3JkQ29ubmVjdG9yID0gJywgJywgbGFzdFdvcmRDb25uZWN0b3IgPSAnIGFuZCAnfSA9IHt9LFxuKSB7XG4gIHJldHVybiBbYXJyYXkuc2xpY2UoMCwgLTEpLmpvaW4od29yZENvbm5lY3RvciksIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdXS5qb2luKFxuICAgIGFycmF5Lmxlbmd0aCA+IDEgPyBsYXN0V29yZENvbm5lY3RvciA6ICcnLFxuICApXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVBc1NldCh2YWwxLCB2YWwyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbDEpICYmIEFycmF5LmlzQXJyYXkodmFsMikpIHtcbiAgICByZXR1cm4gWy4uLm5ldyBTZXQodmFsMSldLmV2ZXJ5KHYgPT4gbmV3IFNldCh2YWwyKS5oYXModikpXG4gIH1cbiAgcmV0dXJuIHZhbDEgPT09IHZhbDJcbn1cblxuZnVuY3Rpb24gdG9CZUluVGhlRE9NKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICBkZXByZWNhdGUoXG4gICAgJ3RvQmVJblRoZURPTScsXG4gICAgJ1BsZWFzZSB1c2UgdG9CZUluVGhlRG9jdW1lbnQgZm9yIHNlYXJjaGluZyB0aGUgZW50aXJlIGRvY3VtZW50IGFuZCB0b0NvbnRhaW5FbGVtZW50IGZvciBzZWFyY2hpbmcgYSBzcGVjaWZpYyBjb250YWluZXIuJyxcbiAgKTtcblxuICBpZiAoZWxlbWVudCkge1xuICAgIGNoZWNrSHRtbEVsZW1lbnQoZWxlbWVudCwgdG9CZUluVGhlRE9NLCB0aGlzKTtcbiAgfVxuXG4gIGlmIChjb250YWluZXIpIHtcbiAgICBjaGVja0h0bWxFbGVtZW50KGNvbnRhaW5lciwgdG9CZUluVGhlRE9NLCB0aGlzKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFzczogY29udGFpbmVyID8gY29udGFpbmVyLmNvbnRhaW5zKGVsZW1lbnQpIDogISFlbGVtZW50LFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlSW5UaGVET01gLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgICdSZWNlaXZlZDonLFxuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChcbiAgICAgICAgICBlbGVtZW50ID8gZWxlbWVudC5jbG9uZU5vZGUoZmFsc2UpIDogZWxlbWVudCxcbiAgICAgICAgKX1gLFxuICAgICAgXS5qb2luKCdcXG4nKVxuICAgIH0sXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9CZUluVGhlRG9jdW1lbnQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCAhPT0gbnVsbCB8fCAhdGhpcy5pc05vdCkge1xuICAgIGNoZWNrSHRtbEVsZW1lbnQoZWxlbWVudCwgdG9CZUluVGhlRG9jdW1lbnQsIHRoaXMpO1xuICB9XG5cbiAgY29uc3QgcGFzcyA9XG4gICAgZWxlbWVudCA9PT0gbnVsbFxuICAgICAgPyBmYWxzZVxuICAgICAgOiBlbGVtZW50Lm93bmVyRG9jdW1lbnQgPT09IGVsZW1lbnQuZ2V0Um9vdE5vZGUoe2NvbXBvc2VkOiB0cnVlfSk7XG5cbiAgY29uc3QgZXJyb3JGb3VuZCA9ICgpID0+IHtcbiAgICByZXR1cm4gYGV4cGVjdGVkIGRvY3VtZW50IG5vdCB0byBjb250YWluIGVsZW1lbnQsIGZvdW5kICR7dGhpcy51dGlscy5zdHJpbmdpZnkoXG4gICAgICBlbGVtZW50LmNsb25lTm9kZSh0cnVlKSxcbiAgICApfSBpbnN0ZWFkYFxuICB9O1xuICBjb25zdCBlcnJvck5vdEZvdW5kID0gKCkgPT4ge1xuICAgIHJldHVybiBgZWxlbWVudCBjb3VsZCBub3QgYmUgZm91bmQgaW4gdGhlIGRvY3VtZW50YFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGFzcyxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZUluVGhlRG9jdW1lbnRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgICAgIHRoaXMudXRpbHMuUkVDRUlWRURfQ09MT1IodGhpcy5pc05vdCA/IGVycm9yRm91bmQoKSA6IGVycm9yTm90Rm91bmQoKSksXG4gICAgICBdLmpvaW4oJ1xcbicpXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0JlRW1wdHkoZWxlbWVudCkge1xuICBkZXByZWNhdGUoXG4gICAgJ3RvQmVFbXB0eScsXG4gICAgJ1BsZWFzZSB1c2UgaW5zdGVhZCB0b0JlRW1wdHlET01FbGVtZW50IGZvciBmaW5kaW5nIGVtcHR5IG5vZGVzIGluIHRoZSBET00uJyxcbiAgKTtcbiAgY2hlY2tIdG1sRWxlbWVudChlbGVtZW50LCB0b0JlRW1wdHksIHRoaXMpO1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogZWxlbWVudC5pbm5lckhUTUwgPT09ICcnLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlRW1wdHlgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgICdSZWNlaXZlZDonLFxuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChlbGVtZW50LmlubmVySFRNTCl9YCxcbiAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuICB9XG59XG5cbmZ1bmN0aW9uIHRvQmVFbXB0eURPTUVsZW1lbnQoZWxlbWVudCkge1xuICBjaGVja0h0bWxFbGVtZW50KGVsZW1lbnQsIHRvQmVFbXB0eURPTUVsZW1lbnQsIHRoaXMpO1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogaXNFbXB0eUVsZW1lbnQoZWxlbWVudCksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVFbXB0eURPTUVsZW1lbnRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgICdSZWNlaXZlZDonLFxuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChlbGVtZW50LmlubmVySFRNTCl9YCxcbiAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuICB9XG59XG5cbi8qKlxuICogSWRlbnRpZmllcyBpZiBhbiBlbGVtZW50IGRvZXNuJ3QgY29udGFpbiBjaGlsZCBub2RlcyAoZXhjbHVkaW5nIGNvbW1lbnRzKVxuICog4oS5IE5vZGUuQ09NTUVOVF9OT0RFIGNhbid0IGJlIHVzZWQgYmVjYXVzZSBvZiB0aGUgZm9sbG93aW5nIGlzc3VlIFxuICogaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8yMjIwXG4gKlxuICogQHBhcmFtIHsqfSBlbGVtZW50IGFuIEh0bWxFbGVtZW50IG9yIFNWR0VsZW1lbnRcbiAqIEByZXR1cm4geyp9IHRydWUgaWYgdGhlIGVsZW1lbnQgb25seSBjb250YWlucyBjb21tZW50cyBvciBub25lXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHlFbGVtZW50KGVsZW1lbnQpe1xuICBjb25zdCBub25Db21tZW50Q2hpbGROb2RlcyA9IFsuLi5lbGVtZW50LmNoaWxkTm9kZXNdLmZpbHRlcihub2RlID0+IG5vZGUubm9kZVR5cGUgIT09IDgpO1xuICByZXR1cm4gbm9uQ29tbWVudENoaWxkTm9kZXMubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiB0b0NvbnRhaW5FbGVtZW50KGNvbnRhaW5lciwgZWxlbWVudCkge1xuICBjaGVja0h0bWxFbGVtZW50KGNvbnRhaW5lciwgdG9Db250YWluRWxlbWVudCwgdGhpcyk7XG5cbiAgaWYgKGVsZW1lbnQgIT09IG51bGwpIHtcbiAgICBjaGVja0h0bWxFbGVtZW50KGVsZW1lbnQsIHRvQ29udGFpbkVsZW1lbnQsIHRoaXMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBjb250YWluZXIuY29udGFpbnMoZWxlbWVudCksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQ29udGFpbkVsZW1lbnRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnZWxlbWVudCcsXG4gICAgICAgICksXG4gICAgICAgICcnLFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgICB0aGlzLnV0aWxzLlJFQ0VJVkVEX0NPTE9SKGAke3RoaXMudXRpbHMuc3RyaW5naWZ5KFxuICAgICAgICAgIGNvbnRhaW5lci5jbG9uZU5vZGUoZmFsc2UpLFxuICAgICAgICApfSAke1xuICAgICAgICAgIHRoaXMuaXNOb3QgPyAnY29udGFpbnM6JyA6ICdkb2VzIG5vdCBjb250YWluOidcbiAgICAgICAgfSAke3RoaXMudXRpbHMuc3RyaW5naWZ5KGVsZW1lbnQgPyBlbGVtZW50LmNsb25lTm9kZShmYWxzZSkgOiBlbGVtZW50KX1cbiAgICAgICAgYCksXG4gICAgICBdLmpvaW4oJ1xcbicpXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXROb3JtYWxpemVkSHRtbChjb250YWluZXIsIGh0bWxUZXh0KSB7XG4gIGNvbnN0IGRpdiA9IGNvbnRhaW5lci5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gaHRtbFRleHQ7XG4gIHJldHVybiBkaXYuaW5uZXJIVE1MXG59XG5cbmZ1bmN0aW9uIHRvQ29udGFpbkhUTUwoY29udGFpbmVyLCBodG1sVGV4dCkge1xuICBjaGVja0h0bWxFbGVtZW50KGNvbnRhaW5lciwgdG9Db250YWluSFRNTCwgdGhpcyk7XG5cbiAgaWYgKHR5cGVvZiBodG1sVGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYC50b0NvbnRhaW5IVE1MKCkgZXhwZWN0cyBhIHN0cmluZyB2YWx1ZSwgZ290ICR7aHRtbFRleHR9YClcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFzczogY29udGFpbmVyLm91dGVySFRNTC5pbmNsdWRlcyhnZXROb3JtYWxpemVkSHRtbChjb250YWluZXIsIGh0bWxUZXh0KSksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQ29udGFpbkhUTUxgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJ0V4cGVjdGVkOicsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5FWFBFQ1RFRF9DT0xPUihodG1sVGV4dCl9YCxcbiAgICAgICAgJ1JlY2VpdmVkOicsXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGNvbnRhaW5lci5jbG9uZU5vZGUodHJ1ZSkpfWAsXG4gICAgICBdLmpvaW4oJ1xcbicpXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0hhdmVUZXh0Q29udGVudChcbiAgbm9kZSxcbiAgY2hlY2tXaXRoLFxuICBvcHRpb25zID0ge25vcm1hbGl6ZVdoaXRlc3BhY2U6IHRydWV9LFxuKSB7XG4gIGNoZWNrTm9kZShub2RlLCB0b0hhdmVUZXh0Q29udGVudCwgdGhpcyk7XG5cbiAgY29uc3QgdGV4dENvbnRlbnQgPSBvcHRpb25zLm5vcm1hbGl6ZVdoaXRlc3BhY2VcbiAgICA/IG5vcm1hbGl6ZShub2RlLnRleHRDb250ZW50KVxuICAgIDogbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKC9cXHUwMGEwL2csICcgJyk7IC8vIFJlcGxhY2UgJm5ic3A7IHdpdGggbm9ybWFsIHNwYWNlc1xuXG4gIGNvbnN0IGNoZWNraW5nV2l0aEVtcHR5U3RyaW5nID0gdGV4dENvbnRlbnQgIT09ICcnICYmIGNoZWNrV2l0aCA9PT0gJyc7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiAhY2hlY2tpbmdXaXRoRW1wdHlTdHJpbmcgJiYgbWF0Y2hlcyh0ZXh0Q29udGVudCwgY2hlY2tXaXRoKSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZVRleHRDb250ZW50YCxcbiAgICAgICAgICAnZWxlbWVudCcsXG4gICAgICAgICAgJycsXG4gICAgICAgICksXG4gICAgICAgIGNoZWNraW5nV2l0aEVtcHR5U3RyaW5nXG4gICAgICAgICAgPyBgQ2hlY2tpbmcgd2l0aCBlbXB0eSBzdHJpbmcgd2lsbCBhbHdheXMgbWF0Y2gsIHVzZSAudG9CZUVtcHR5RE9NRWxlbWVudCgpIGluc3RlYWRgXG4gICAgICAgICAgOiBgRXhwZWN0ZWQgZWxlbWVudCAke3RvfSBoYXZlIHRleHQgY29udGVudGAsXG4gICAgICAgIGNoZWNrV2l0aCxcbiAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgdGV4dENvbnRlbnQsXG4gICAgICApXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0hhdmVBY2Nlc3NpYmxlRGVzY3JpcHRpb24oXG4gIGh0bWxFbGVtZW50LFxuICBleHBlY3RlZEFjY2Vzc2libGVEZXNjcmlwdGlvbixcbikge1xuICBjaGVja0h0bWxFbGVtZW50KGh0bWxFbGVtZW50LCB0b0hhdmVBY2Nlc3NpYmxlRGVzY3JpcHRpb24sIHRoaXMpO1xuICBjb25zdCBhY3R1YWxBY2Nlc3NpYmxlRGVzY3JpcHRpb24gPSBkb21BY2Nlc3NpYmlsaXR5QXBpLmNvbXB1dGVBY2Nlc3NpYmxlRGVzY3JpcHRpb24oaHRtbEVsZW1lbnQpO1xuICBjb25zdCBtaXNzaW5nRXhwZWN0ZWRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDE7XG5cbiAgbGV0IHBhc3MgPSBmYWxzZTtcbiAgaWYgKG1pc3NpbmdFeHBlY3RlZFZhbHVlKSB7XG4gICAgLy8gV2hlbiBjYWxsZWQgd2l0aG91dCBhbiBleHBlY3RlZCB2YWx1ZSB3ZSBvbmx5IHdhbnQgdG8gdmFsaWRhdGUgdGhhdCB0aGUgZWxlbWVudCBoYXMgYW5cbiAgICAvLyBhY2Nlc3NpYmxlIGRlc2NyaXB0aW9uLCB3aGF0ZXZlciBpdCBtYXkgYmUuXG4gICAgcGFzcyA9IGFjdHVhbEFjY2Vzc2libGVEZXNjcmlwdGlvbiAhPT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgcGFzcyA9XG4gICAgICBleHBlY3RlZEFjY2Vzc2libGVEZXNjcmlwdGlvbiBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgICA/IGV4cGVjdGVkQWNjZXNzaWJsZURlc2NyaXB0aW9uLnRlc3QoYWN0dWFsQWNjZXNzaWJsZURlc2NyaXB0aW9uKVxuICAgICAgICA6IHRoaXMuZXF1YWxzKFxuICAgICAgICAgICAgYWN0dWFsQWNjZXNzaWJsZURlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZXhwZWN0ZWRBY2Nlc3NpYmxlRGVzY3JpcHRpb24sXG4gICAgICAgICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGFzcyxcblxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgIHJldHVybiBnZXRNZXNzYWdlKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30uJHt0b0hhdmVBY2Nlc3NpYmxlRGVzY3JpcHRpb24ubmFtZX1gLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgYEV4cGVjdGVkIGVsZW1lbnQgJHt0b30gaGF2ZSBhY2Nlc3NpYmxlIGRlc2NyaXB0aW9uYCxcbiAgICAgICAgZXhwZWN0ZWRBY2Nlc3NpYmxlRGVzY3JpcHRpb24sXG4gICAgICAgICdSZWNlaXZlZCcsXG4gICAgICAgIGFjdHVhbEFjY2Vzc2libGVEZXNjcmlwdGlvbixcbiAgICAgIClcbiAgICB9LFxuICB9XG59XG5cbmNvbnN0IGFyaWFJbnZhbGlkTmFtZSA9ICdhcmlhLWludmFsaWQnO1xuY29uc3QgdmFsaWRTdGF0ZXMgPSBbJ2ZhbHNlJ107XG5cbi8vIFNlZSBgYXJpYS1lcnJvcm1lc3NhZ2VgIHNwZWMgYXQgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLTEuMi8jYXJpYS1lcnJvcm1lc3NhZ2VcbmZ1bmN0aW9uIHRvSGF2ZUFjY2Vzc2libGVFcnJvck1lc3NhZ2UoXG4gIGh0bWxFbGVtZW50LFxuICBleHBlY3RlZEFjY2Vzc2libGVFcnJvck1lc3NhZ2UsXG4pIHtcbiAgY2hlY2tIdG1sRWxlbWVudChodG1sRWxlbWVudCwgdG9IYXZlQWNjZXNzaWJsZUVycm9yTWVzc2FnZSwgdGhpcyk7XG4gIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgY29uc3QgbWV0aG9kID0gdGhpcy5pc05vdFxuICAgID8gJy5ub3QudG9IYXZlQWNjZXNzaWJsZUVycm9yTWVzc2FnZSdcbiAgICA6ICcudG9IYXZlQWNjZXNzaWJsZUVycm9yTWVzc2FnZSc7XG5cbiAgLy8gRW5mb3JjZSBWYWxpZCBJZFxuICBjb25zdCBlcnJvcm1lc3NhZ2VJZCA9IGh0bWxFbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1lcnJvcm1lc3NhZ2UnKTtcbiAgY29uc3QgZXJyb3JtZXNzYWdlSWRJbnZhbGlkID0gISFlcnJvcm1lc3NhZ2VJZCAmJiAvXFxzKy8udGVzdChlcnJvcm1lc3NhZ2VJZCk7XG5cbiAgaWYgKGVycm9ybWVzc2FnZUlkSW52YWxpZCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGdldE1lc3NhZ2UoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KG1ldGhvZCwgJ2VsZW1lbnQnKSxcbiAgICAgICAgICBcIkV4cGVjdGVkIGVsZW1lbnQncyBgYXJpYS1lcnJvcm1lc3NhZ2VgIGF0dHJpYnV0ZSB0byBiZSBlbXB0eSBvciBhIHNpbmdsZSwgdmFsaWQgSURcIixcbiAgICAgICAgICAnJyxcbiAgICAgICAgICAnUmVjZWl2ZWQnLFxuICAgICAgICAgIGBhcmlhLWVycm9ybWVzc2FnZT1cIiR7ZXJyb3JtZXNzYWdlSWR9XCJgLFxuICAgICAgICApXG4gICAgICB9LFxuICAgIH1cbiAgfVxuXG4gIC8vIFNlZSBgYXJpYS1pbnZhbGlkYCBzcGVjIGF0IGh0dHBzOi8vd3d3LnczLm9yZy9UUi93YWktYXJpYS0xLjIvI2FyaWEtaW52YWxpZFxuICBjb25zdCBhcmlhSW52YWxpZFZhbCA9IGh0bWxFbGVtZW50LmdldEF0dHJpYnV0ZShhcmlhSW52YWxpZE5hbWUpO1xuICBjb25zdCBmaWVsZFZhbGlkID1cbiAgICAhaHRtbEVsZW1lbnQuaGFzQXR0cmlidXRlKGFyaWFJbnZhbGlkTmFtZSkgfHxcbiAgICB2YWxpZFN0YXRlcy5pbmNsdWRlcyhhcmlhSW52YWxpZFZhbCk7XG5cbiAgLy8gRW5mb3JjZSBWYWxpZCBgYXJpYS1pbnZhbGlkYCBBdHRyaWJ1dGVcbiAgaWYgKGZpZWxkVmFsaWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBnZXRNZXNzYWdlKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChtZXRob2QsICdlbGVtZW50JyksXG4gICAgICAgICAgJ0V4cGVjdGVkIGVsZW1lbnQgdG8gYmUgbWFya2VkIGFzIGludmFsaWQgd2l0aCBhdHRyaWJ1dGUnLFxuICAgICAgICAgIGAke2FyaWFJbnZhbGlkTmFtZX09XCIke1N0cmluZyh0cnVlKX1cImAsXG4gICAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgICBodG1sRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpXG4gICAgICAgICAgICA/IGAke2FyaWFJbnZhbGlkTmFtZX09XCIke2h0bWxFbGVtZW50LmdldEF0dHJpYnV0ZShhcmlhSW52YWxpZE5hbWUpfWBcbiAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgKVxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICBjb25zdCBlcnJvciA9IG5vcm1hbGl6ZShcbiAgICBodG1sRWxlbWVudC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVycm9ybWVzc2FnZUlkKT8udGV4dENvbnRlbnQgPz8gJycsXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOlxuICAgICAgZXhwZWN0ZWRBY2Nlc3NpYmxlRXJyb3JNZXNzYWdlID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBCb29sZWFuKGVycm9yKVxuICAgICAgICA6IGV4cGVjdGVkQWNjZXNzaWJsZUVycm9yTWVzc2FnZSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgICA/IGV4cGVjdGVkQWNjZXNzaWJsZUVycm9yTWVzc2FnZS50ZXN0KGVycm9yKVxuICAgICAgICA6IHRoaXMuZXF1YWxzKGVycm9yLCBleHBlY3RlZEFjY2Vzc2libGVFcnJvck1lc3NhZ2UpLFxuXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgcmV0dXJuIGdldE1lc3NhZ2UoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQobWV0aG9kLCAnZWxlbWVudCcpLFxuICAgICAgICBgRXhwZWN0ZWQgZWxlbWVudCAke3RvfSBoYXZlIGFjY2Vzc2libGUgZXJyb3IgbWVzc2FnZWAsXG4gICAgICAgIGV4cGVjdGVkQWNjZXNzaWJsZUVycm9yTWVzc2FnZSA/PyAnJyxcbiAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgZXJyb3IsXG4gICAgICApXG4gICAgfSxcbiAgfVxufVxuXG5jb25zdCBlbGVtZW50Um9sZUxpc3QgPSBidWlsZEVsZW1lbnRSb2xlTGlzdChhcmlhUXVlcnkuZWxlbWVudFJvbGVzKTtcblxuZnVuY3Rpb24gdG9IYXZlUm9sZShodG1sRWxlbWVudCwgZXhwZWN0ZWRSb2xlKSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoaHRtbEVsZW1lbnQsIHRvSGF2ZVJvbGUsIHRoaXMpO1xuXG4gIGNvbnN0IGFjdHVhbFJvbGVzID0gZ2V0RXhwbGljaXRPckltcGxpY2l0Um9sZXMoaHRtbEVsZW1lbnQpO1xuICBjb25zdCBwYXNzID0gYWN0dWFsUm9sZXMuc29tZShlbCA9PiBlbCA9PT0gZXhwZWN0ZWRSb2xlKTtcblxuICByZXR1cm4ge1xuICAgIHBhc3MsXG5cbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LiR7dG9IYXZlUm9sZS5uYW1lfWAsXG4gICAgICAgICAgJ2VsZW1lbnQnLFxuICAgICAgICAgICcnLFxuICAgICAgICApLFxuICAgICAgICBgRXhwZWN0ZWQgZWxlbWVudCAke3RvfSBoYXZlIHJvbGVgLFxuICAgICAgICBleHBlY3RlZFJvbGUsXG4gICAgICAgICdSZWNlaXZlZCcsXG4gICAgICAgIGFjdHVhbFJvbGVzLmpvaW4oJywgJyksXG4gICAgICApXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFeHBsaWNpdE9ySW1wbGljaXRSb2xlcyhodG1sRWxlbWVudCkge1xuICBjb25zdCBoYXNFeHBsaWNpdFJvbGUgPSBodG1sRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JvbGUnKTtcblxuICBpZiAoaGFzRXhwbGljaXRSb2xlKSB7XG4gICAgY29uc3Qgcm9sZVZhbHVlID0gaHRtbEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJyk7XG5cbiAgICAvLyBIYW5kbGUgZmFsbGJhY2sgcm9sZXMsIHN1Y2ggYXMgcm9sZT1cInN3aXRjaCBidXR0b25cIlxuICAgIC8vIHRlc3RpbmctbGlicmFyeSBnYXRlcyB0aGlzIGJlaGluZCB0aGUgYHF1ZXJ5RmFsbGJhY2tzYCBmbGFnOyBpdCBpc1xuICAgIC8vIHVuY2xlYXIgd2h5LCBidXQgaXQgbWFrZXMgc2Vuc2UgdG8gc3VwcG9ydCB0aGlzIHBhdHRlcm4gb3V0IG9mIHRoZSBib3hcbiAgICAvLyBodHRwczovL3Rlc3RpbmctbGlicmFyeS5jb20vZG9jcy9xdWVyaWVzL2J5cm9sZS8jcXVlcnlmYWxsYmFja3NcbiAgICByZXR1cm4gcm9sZVZhbHVlLnNwbGl0KCcgJykuZmlsdGVyKEJvb2xlYW4pXG4gIH1cblxuICBjb25zdCBpbXBsaWNpdFJvbGVzID0gZ2V0SW1wbGljaXRBcmlhUm9sZXMoaHRtbEVsZW1lbnQpO1xuXG4gIHJldHVybiBpbXBsaWNpdFJvbGVzXG59XG5cbmZ1bmN0aW9uIGdldEltcGxpY2l0QXJpYVJvbGVzKGN1cnJlbnROb2RlKSB7XG4gIGZvciAoY29uc3Qge21hdGNoLCByb2xlc30gb2YgZWxlbWVudFJvbGVMaXN0KSB7XG4gICAgaWYgKG1hdGNoKGN1cnJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIFsuLi5yb2xlc11cbiAgICB9XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gW10gLy8gdGhpcyBkb2VzIG5vdCBnZXQgcmVhY2hlZCBpbiBwcmFjdGljZSwgc2luY2UgZWxlbWVudHMgaGF2ZSBhdCBsZWFzdCBhICdnZW5lcmljJyByb2xlXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSByb2xlcyBtYXAgKHdpdGggcmVxdWlyZWQgYXR0cmlidXRlcyBhbmQgY29uc3RyYWludHMpIHRvIGEgbGlzdFxuICogb2Ygcm9sZXMuIEVhY2ggaXRlbSBpbiB0aGUgbGlzdCBoYXMgZnVuY3Rpb25zIHRvIG1hdGNoIGFuIGVsZW1lbnQgYWdhaW5zdCBpdC5cbiAqXG4gKiBFc3NlbnRpYWxseSBjb3BpZWQgb3ZlciBmcm9tIFtkb20tdGVzdGluZy1saWJyYXJ5J3NcbiAqIGhlbHBlcnNdKGh0dHBzOi8vZ2l0aHViLmNvbS90ZXN0aW5nLWxpYnJhcnkvZG9tLXRlc3RpbmctbGlicmFyeS9ibG9iL2JkMDRjZjk1YTFlZDg1YTIyMzhmN2RmYzFhNzdkNWQxNmI0ZjU5ZGMvc3JjL3JvbGUtaGVscGVycy5qcyNMODApXG4gKlxuICogVE9ETzogSWYgd2UgYXJlIHRydWx5IGp1c3QgY29weWluZyBvdmVyIHN0dWZmLCB3b3VsZCBpdCBtYWtlIHNlbnNlIHRvIG1vdmVcbiAqIHRoaXMgdG8gYSBzZXBhcmF0ZSBwYWNrYWdlP1xuICpcbiAqIFRPRE86IFRoaXMgdGVjaG5pcXVlIHJlbGllcyBvbiBDU1Mgc2VsZWN0b3JzOyBhcmUgdGhvc2UgY29uc2lzdGVudGx5XG4gKiBhdmFpbGFibGUgaW4gYWxsIGplc3QtZG9tIGVudmlyb25tZW50cz8gV2h5IGRvIG90aGVyIG1hdGNoZXJzIGluIHRoaXMgcGFja2FnZVxuICogbm90IHVzZSB0aGVtIGxpa2UgdGhpcz9cbiAqL1xuZnVuY3Rpb24gYnVpbGRFbGVtZW50Um9sZUxpc3QoZWxlbWVudFJvbGVzTWFwKSB7XG4gIGZ1bmN0aW9uIG1ha2VFbGVtZW50U2VsZWN0b3Ioe25hbWUsIGF0dHJpYnV0ZXN9KSB7XG4gICAgcmV0dXJuIGAke25hbWV9JHthdHRyaWJ1dGVzXG4gICAgICAubWFwKCh7bmFtZTogYXR0cmlidXRlTmFtZSwgdmFsdWUsIGNvbnN0cmFpbnRzID0gW119KSA9PiB7XG4gICAgICAgIGNvbnN0IHNob3VsZE5vdEV4aXN0ID0gY29uc3RyYWludHMuaW5kZXhPZigndW5kZWZpbmVkJykgIT09IC0xO1xuICAgICAgICBpZiAoc2hvdWxkTm90RXhpc3QpIHtcbiAgICAgICAgICByZXR1cm4gYDpub3QoWyR7YXR0cmlidXRlTmFtZX1dKWBcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBgWyR7YXR0cmlidXRlTmFtZX09XCIke3ZhbHVlfVwiXWBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYFske2F0dHJpYnV0ZU5hbWV9XWBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5qb2luKCcnKX1gXG4gIH1cblxuICBmdW5jdGlvbiBnZXRTZWxlY3RvclNwZWNpZmljaXR5KHthdHRyaWJ1dGVzID0gW119KSB7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXMubGVuZ3RoXG4gIH1cblxuICBmdW5jdGlvbiBieVNlbGVjdG9yU3BlY2lmaWNpdHkoXG4gICAge3NwZWNpZmljaXR5OiBsZWZ0U3BlY2lmaWNpdHl9LFxuICAgIHtzcGVjaWZpY2l0eTogcmlnaHRTcGVjaWZpY2l0eX0sXG4gICkge1xuICAgIHJldHVybiByaWdodFNwZWNpZmljaXR5IC0gbGVmdFNwZWNpZmljaXR5XG4gIH1cblxuICBmdW5jdGlvbiBtYXRjaChlbGVtZW50KSB7XG4gICAgbGV0IHthdHRyaWJ1dGVzID0gW119ID0gZWxlbWVudDtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZXN0aW5nLWxpYnJhcnkvZG9tLXRlc3RpbmctbGlicmFyeS9pc3N1ZXMvODE0XG4gICAgY29uc3QgdHlwZVRleHRJbmRleCA9IGF0dHJpYnV0ZXMuZmluZEluZGV4KFxuICAgICAgYXR0cmlidXRlID0+XG4gICAgICAgIGF0dHJpYnV0ZS52YWx1ZSAmJlxuICAgICAgICBhdHRyaWJ1dGUubmFtZSA9PT0gJ3R5cGUnICYmXG4gICAgICAgIGF0dHJpYnV0ZS52YWx1ZSA9PT0gJ3RleHQnLFxuICAgICk7XG5cbiAgICBpZiAodHlwZVRleHRJbmRleCA+PSAwKSB7XG4gICAgICAvLyBub3QgdXNpbmcgc3BsaWNlIHRvIG5vdCBtdXRhdGUgdGhlIGF0dHJpYnV0ZXMgYXJyYXlcbiAgICAgIGF0dHJpYnV0ZXMgPSBbXG4gICAgICAgIC4uLmF0dHJpYnV0ZXMuc2xpY2UoMCwgdHlwZVRleHRJbmRleCksXG4gICAgICAgIC4uLmF0dHJpYnV0ZXMuc2xpY2UodHlwZVRleHRJbmRleCArIDEpLFxuICAgICAgXTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3RvciA9IG1ha2VFbGVtZW50U2VsZWN0b3Ioey4uLmVsZW1lbnQsIGF0dHJpYnV0ZXN9KTtcblxuICAgIHJldHVybiBub2RlID0+IHtcbiAgICAgIGlmICh0eXBlVGV4dEluZGV4ID49IDAgJiYgbm9kZS50eXBlICE9PSAndGV4dCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2RlLm1hdGNoZXMoc2VsZWN0b3IpXG4gICAgfVxuICB9XG5cbiAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gIGZvciAoY29uc3QgW2VsZW1lbnQsIHJvbGVzXSBvZiBlbGVtZW50Um9sZXNNYXAuZW50cmllcygpKSB7XG4gICAgcmVzdWx0ID0gW1xuICAgICAgLi4ucmVzdWx0LFxuICAgICAge1xuICAgICAgICBtYXRjaDogbWF0Y2goZWxlbWVudCksXG4gICAgICAgIHJvbGVzOiBBcnJheS5mcm9tKHJvbGVzKSxcbiAgICAgICAgc3BlY2lmaWNpdHk6IGdldFNlbGVjdG9yU3BlY2lmaWNpdHkoZWxlbWVudCksXG4gICAgICB9LFxuICAgIF07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0LnNvcnQoYnlTZWxlY3RvclNwZWNpZmljaXR5KVxufVxuXG5mdW5jdGlvbiB0b0hhdmVBY2Nlc3NpYmxlTmFtZShodG1sRWxlbWVudCwgZXhwZWN0ZWRBY2Nlc3NpYmxlTmFtZSkge1xuICBjaGVja0h0bWxFbGVtZW50KGh0bWxFbGVtZW50LCB0b0hhdmVBY2Nlc3NpYmxlTmFtZSwgdGhpcyk7XG4gIGNvbnN0IGFjdHVhbEFjY2Vzc2libGVOYW1lID0gZG9tQWNjZXNzaWJpbGl0eUFwaS5jb21wdXRlQWNjZXNzaWJsZU5hbWUoaHRtbEVsZW1lbnQpO1xuICBjb25zdCBtaXNzaW5nRXhwZWN0ZWRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDE7XG5cbiAgbGV0IHBhc3MgPSBmYWxzZTtcbiAgaWYgKG1pc3NpbmdFeHBlY3RlZFZhbHVlKSB7XG4gICAgLy8gV2hlbiBjYWxsZWQgd2l0aG91dCBhbiBleHBlY3RlZCB2YWx1ZSB3ZSBvbmx5IHdhbnQgdG8gdmFsaWRhdGUgdGhhdCB0aGUgZWxlbWVudCBoYXMgYW5cbiAgICAvLyBhY2Nlc3NpYmxlIG5hbWUsIHdoYXRldmVyIGl0IG1heSBiZS5cbiAgICBwYXNzID0gYWN0dWFsQWNjZXNzaWJsZU5hbWUgIT09ICcnO1xuICB9IGVsc2Uge1xuICAgIHBhc3MgPVxuICAgICAgZXhwZWN0ZWRBY2Nlc3NpYmxlTmFtZSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgICA/IGV4cGVjdGVkQWNjZXNzaWJsZU5hbWUudGVzdChhY3R1YWxBY2Nlc3NpYmxlTmFtZSlcbiAgICAgICAgOiB0aGlzLmVxdWFscyhhY3R1YWxBY2Nlc3NpYmxlTmFtZSwgZXhwZWN0ZWRBY2Nlc3NpYmxlTmFtZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhc3MsXG5cbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LiR7dG9IYXZlQWNjZXNzaWJsZU5hbWUubmFtZX1gLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgYEV4cGVjdGVkIGVsZW1lbnQgJHt0b30gaGF2ZSBhY2Nlc3NpYmxlIG5hbWVgLFxuICAgICAgICBleHBlY3RlZEFjY2Vzc2libGVOYW1lLFxuICAgICAgICAnUmVjZWl2ZWQnLFxuICAgICAgICBhY3R1YWxBY2Nlc3NpYmxlTmFtZSxcbiAgICAgIClcbiAgICB9LFxuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50QXR0cmlidXRlKHN0cmluZ2lmeSwgbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBuYW1lIDogYCR7bmFtZX09JHtzdHJpbmdpZnkodmFsdWUpfWBcbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlQ29tbWVudChzdHJpbmdpZnksIG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgPyBgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJHtzdHJpbmdpZnkobmFtZSl9KWBcbiAgICA6IGBlbGVtZW50LmdldEF0dHJpYnV0ZSgke3N0cmluZ2lmeShuYW1lKX0pID09PSAke3N0cmluZ2lmeSh2YWx1ZSl9YFxufVxuXG5mdW5jdGlvbiB0b0hhdmVBdHRyaWJ1dGUoaHRtbEVsZW1lbnQsIG5hbWUsIGV4cGVjdGVkVmFsdWUpIHtcbiAgY2hlY2tIdG1sRWxlbWVudChodG1sRWxlbWVudCwgdG9IYXZlQXR0cmlidXRlLCB0aGlzKTtcbiAgY29uc3QgaXNFeHBlY3RlZFZhbHVlUHJlc2VudCA9IGV4cGVjdGVkVmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgY29uc3QgaGFzQXR0cmlidXRlID0gaHRtbEVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpO1xuICBjb25zdCByZWNlaXZlZFZhbHVlID0gaHRtbEVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICByZXR1cm4ge1xuICAgIHBhc3M6IGlzRXhwZWN0ZWRWYWx1ZVByZXNlbnRcbiAgICAgID8gaGFzQXR0cmlidXRlICYmIHRoaXMuZXF1YWxzKHJlY2VpdmVkVmFsdWUsIGV4cGVjdGVkVmFsdWUpXG4gICAgICA6IGhhc0F0dHJpYnV0ZSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICBjb25zdCByZWNlaXZlZEF0dHJpYnV0ZSA9IGhhc0F0dHJpYnV0ZVxuICAgICAgICA/IHByaW50QXR0cmlidXRlKHRoaXMudXRpbHMuc3RyaW5naWZ5LCBuYW1lLCByZWNlaXZlZFZhbHVlKVxuICAgICAgICA6IG51bGw7XG4gICAgICBjb25zdCBtYXRjaGVyID0gdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVBdHRyaWJ1dGVgLFxuICAgICAgICAnZWxlbWVudCcsXG4gICAgICAgIHRoaXMudXRpbHMucHJpbnRFeHBlY3RlZChuYW1lKSxcbiAgICAgICAge1xuICAgICAgICAgIHNlY29uZEFyZ3VtZW50OiBpc0V4cGVjdGVkVmFsdWVQcmVzZW50XG4gICAgICAgICAgICA/IHRoaXMudXRpbHMucHJpbnRFeHBlY3RlZChleHBlY3RlZFZhbHVlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgY29tbWVudDogZ2V0QXR0cmlidXRlQ29tbWVudChcbiAgICAgICAgICAgIHRoaXMudXRpbHMuc3RyaW5naWZ5LFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGV4cGVjdGVkVmFsdWUsXG4gICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dG99IGhhdmUgYXR0cmlidXRlYCxcbiAgICAgICAgcHJpbnRBdHRyaWJ1dGUodGhpcy51dGlscy5zdHJpbmdpZnksIG5hbWUsIGV4cGVjdGVkVmFsdWUpLFxuICAgICAgICAnUmVjZWl2ZWQnLFxuICAgICAgICByZWNlaXZlZEF0dHJpYnV0ZSxcbiAgICAgIClcbiAgICB9LFxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEV4cGVjdGVkQ2xhc3NOYW1lc0FuZE9wdGlvbnMocGFyYW1zKSB7XG4gIGNvbnN0IGxhc3RQYXJhbSA9IHBhcmFtcy5wb3AoKTtcbiAgbGV0IGV4cGVjdGVkQ2xhc3NOYW1lcywgb3B0aW9ucztcblxuICBpZiAodHlwZW9mIGxhc3RQYXJhbSA9PT0gJ29iamVjdCcgJiYgIShsYXN0UGFyYW0gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgZXhwZWN0ZWRDbGFzc05hbWVzID0gcGFyYW1zO1xuICAgIG9wdGlvbnMgPSBsYXN0UGFyYW07XG4gIH0gZWxzZSB7XG4gICAgZXhwZWN0ZWRDbGFzc05hbWVzID0gcGFyYW1zLmNvbmNhdChsYXN0UGFyYW0pO1xuICAgIG9wdGlvbnMgPSB7ZXhhY3Q6IGZhbHNlfTtcbiAgfVxuICByZXR1cm4ge2V4cGVjdGVkQ2xhc3NOYW1lcywgb3B0aW9uc31cbn1cblxuZnVuY3Rpb24gc3BsaXRDbGFzc05hbWVzKHN0cikge1xuICBpZiAoIXN0cikgcmV0dXJuIFtdXG4gIHJldHVybiBzdHIuc3BsaXQoL1xccysvKS5maWx0ZXIocyA9PiBzLmxlbmd0aCA+IDApXG59XG5cbmZ1bmN0aW9uIGlzU3Vic2V0JDEoc3Vic2V0LCBzdXBlcnNldCkge1xuICByZXR1cm4gc3Vic2V0LmV2ZXJ5KHN0ck9yUmVnZXhwID0+XG4gICAgdHlwZW9mIHN0ck9yUmVnZXhwID09PSAnc3RyaW5nJ1xuICAgICAgPyBzdXBlcnNldC5pbmNsdWRlcyhzdHJPclJlZ2V4cClcbiAgICAgIDogc3VwZXJzZXQuc29tZShjbGFzc05hbWUgPT4gc3RyT3JSZWdleHAudGVzdChjbGFzc05hbWUpKSxcbiAgKVxufVxuXG5mdW5jdGlvbiB0b0hhdmVDbGFzcyhodG1sRWxlbWVudCwgLi4ucGFyYW1zKSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoaHRtbEVsZW1lbnQsIHRvSGF2ZUNsYXNzLCB0aGlzKTtcbiAgY29uc3Qge2V4cGVjdGVkQ2xhc3NOYW1lcywgb3B0aW9uc30gPSBnZXRFeHBlY3RlZENsYXNzTmFtZXNBbmRPcHRpb25zKHBhcmFtcyk7XG5cbiAgY29uc3QgcmVjZWl2ZWQgPSBzcGxpdENsYXNzTmFtZXMoaHRtbEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpKTtcbiAgY29uc3QgZXhwZWN0ZWQgPSBleHBlY3RlZENsYXNzTmFtZXMucmVkdWNlKFxuICAgIChhY2MsIGNsYXNzTmFtZSkgPT5cbiAgICAgIGFjYy5jb25jYXQoXG4gICAgICAgIHR5cGVvZiBjbGFzc05hbWUgPT09ICdzdHJpbmcnIHx8ICFjbGFzc05hbWVcbiAgICAgICAgICA/IHNwbGl0Q2xhc3NOYW1lcyhjbGFzc05hbWUpXG4gICAgICAgICAgOiBjbGFzc05hbWUsXG4gICAgICApLFxuICAgIFtdLFxuICApO1xuXG4gIGNvbnN0IGhhc1JlZ0V4cCA9IGV4cGVjdGVkLnNvbWUoY2xhc3NOYW1lID0+IGNsYXNzTmFtZSBpbnN0YW5jZW9mIFJlZ0V4cCk7XG4gIGlmIChvcHRpb25zLmV4YWN0ICYmIGhhc1JlZ0V4cCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhhY3Qgb3B0aW9uIGRvZXMgbm90IHN1cHBvcnQgUmVnRXhwIGV4cGVjdGVkIGNsYXNzIG5hbWVzJylcbiAgfVxuXG4gIGlmIChvcHRpb25zLmV4YWN0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGlzU3Vic2V0JDEoZXhwZWN0ZWQsIHJlY2VpdmVkKSAmJiBleHBlY3RlZC5sZW5ndGggPT09IHJlY2VpdmVkLmxlbmd0aCxcbiAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgY29uc3QgdG8gPSB0aGlzLmlzTm90ID8gJ25vdCB0bycgOiAndG8nO1xuICAgICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZUNsYXNzYCxcbiAgICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAgIHRoaXMudXRpbHMucHJpbnRFeHBlY3RlZChleHBlY3RlZC5qb2luKCcgJykpLFxuICAgICAgICAgICksXG4gICAgICAgICAgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dG99IGhhdmUgRVhBQ1RMWSBkZWZpbmVkIGNsYXNzZXNgLFxuICAgICAgICAgIGV4cGVjdGVkLmpvaW4oJyAnKSxcbiAgICAgICAgICAnUmVjZWl2ZWQnLFxuICAgICAgICAgIHJlY2VpdmVkLmpvaW4oJyAnKSxcbiAgICAgICAgKVxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwZWN0ZWQubGVuZ3RoID4gMFxuICAgID8ge1xuICAgICAgICBwYXNzOiBpc1N1YnNldCQxKGV4cGVjdGVkLCByZWNlaXZlZCksXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICAgICAgcmV0dXJuIGdldE1lc3NhZ2UoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVDbGFzc2AsXG4gICAgICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAgICAgdGhpcy51dGlscy5wcmludEV4cGVjdGVkKGV4cGVjdGVkLmpvaW4oJyAnKSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dG99IGhhdmUgY2xhc3NgLFxuICAgICAgICAgICAgZXhwZWN0ZWQuam9pbignICcpLFxuICAgICAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgICAgIHJlY2VpdmVkLmpvaW4oJyAnKSxcbiAgICAgICAgICApXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgOiB7XG4gICAgICAgIHBhc3M6IHRoaXMuaXNOb3QgPyByZWNlaXZlZC5sZW5ndGggPiAwIDogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+XG4gICAgICAgICAgdGhpcy5pc05vdFxuICAgICAgICAgICAgPyBnZXRNZXNzYWdlKFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludCgnLm5vdC50b0hhdmVDbGFzcycsICdlbGVtZW50JywgJycpLFxuICAgICAgICAgICAgICAgICdFeHBlY3RlZCB0aGUgZWxlbWVudCB0byBoYXZlIGNsYXNzZXMnLFxuICAgICAgICAgICAgICAgICcobm9uZSknLFxuICAgICAgICAgICAgICAgICdSZWNlaXZlZCcsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQuam9pbignICcpLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KGAudG9IYXZlQ2xhc3NgLCAnZWxlbWVudCcpLFxuICAgICAgICAgICAgICAgICdBdCBsZWFzdCBvbmUgZXhwZWN0ZWQgY2xhc3MgbXVzdCBiZSBwcm92aWRlZC4nLFxuICAgICAgICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdHlsZURlY2xhcmF0aW9uKGRvY3VtZW50LCBjc3MpIHtcbiAgY29uc3Qgc3R5bGVzID0ge307XG5cbiAgLy8gVGhlIG5leHQgYmxvY2sgaXMgbmVjZXNzYXJ5IHRvIG5vcm1hbGl6ZSBjb2xvcnNcbiAgY29uc3QgY29weSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBPYmplY3Qua2V5cyhjc3MpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgIGNvcHkuc3R5bGVbcHJvcGVydHldID0gY3NzW3Byb3BlcnR5XTtcbiAgICBzdHlsZXNbcHJvcGVydHldID0gY29weS5zdHlsZVtwcm9wZXJ0eV07XG4gIH0pO1xuXG4gIHJldHVybiBzdHlsZXNcbn1cblxuZnVuY3Rpb24gaXNTdWJzZXQoc3R5bGVzLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiAoXG4gICAgISFPYmplY3Qua2V5cyhzdHlsZXMpLmxlbmd0aCAmJlxuICAgIE9iamVjdC5lbnRyaWVzKHN0eWxlcykuZXZlcnkoKFtwcm9wLCB2YWx1ZV0pID0+IHtcbiAgICAgIGNvbnN0IGlzQ3VzdG9tUHJvcGVydHkgPSBwcm9wLnN0YXJ0c1dpdGgoJy0tJyk7XG4gICAgICBjb25zdCBzcGVsbGluZ1ZhcmlhbnRzID0gW3Byb3BdO1xuICAgICAgaWYgKCFpc0N1c3RvbVByb3BlcnR5KSBzcGVsbGluZ1ZhcmlhbnRzLnB1c2gocHJvcC50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgcmV0dXJuIHNwZWxsaW5nVmFyaWFudHMuc29tZShcbiAgICAgICAgbmFtZSA9PlxuICAgICAgICAgIGNvbXB1dGVkU3R5bGVbbmFtZV0gPT09IHZhbHVlIHx8XG4gICAgICAgICAgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpID09PSB2YWx1ZSxcbiAgICAgIClcbiAgICB9KVxuICApXG59XG5cbmZ1bmN0aW9uIHByaW50b3V0U3R5bGVzKHN0eWxlcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVzKVxuICAgIC5zb3J0KClcbiAgICAubWFwKHByb3AgPT4gYCR7cHJvcH06ICR7c3R5bGVzW3Byb3BdfTtgKVxuICAgIC5qb2luKCdcXG4nKVxufVxuXG4vLyBIaWdobGlnaHRzIG9ubHkgc3R5bGUgcnVsZXMgdGhhdCB3ZXJlIGV4cGVjdGVkIGJ1dCB3ZXJlIG5vdCBmb3VuZCBpbiB0aGVcbi8vIHJlY2VpdmVkIGNvbXB1dGVkIHN0eWxlc1xuZnVuY3Rpb24gZXhwZWN0ZWREaWZmKGRpZmZGbiwgZXhwZWN0ZWQsIGNvbXB1dGVkU3R5bGVzKSB7XG4gIGNvbnN0IHJlY2VpdmVkID0gQXJyYXkuZnJvbShjb21wdXRlZFN0eWxlcylcbiAgICAuZmlsdGVyKHByb3AgPT4gZXhwZWN0ZWRbcHJvcF0gIT09IHVuZGVmaW5lZClcbiAgICAucmVkdWNlKFxuICAgICAgKG9iaiwgcHJvcCkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihvYmosIHtbcHJvcF06IGNvbXB1dGVkU3R5bGVzLmdldFByb3BlcnR5VmFsdWUocHJvcCl9KSxcbiAgICAgIHt9LFxuICAgICk7XG4gIGNvbnN0IGRpZmZPdXRwdXQgPSBkaWZmRm4ocHJpbnRvdXRTdHlsZXMoZXhwZWN0ZWQpLCBwcmludG91dFN0eWxlcyhyZWNlaXZlZCkpO1xuICAvLyBSZW1vdmUgdGhlIFwiKyBSZWNlaXZlZFwiIGFubm90YXRpb24gYmVjYXVzZSB0aGlzIGlzIGEgb25lLXdheSBkaWZmXG4gIHJldHVybiBkaWZmT3V0cHV0LnJlcGxhY2UoYCR7cGljby5yZWQoJysgUmVjZWl2ZWQnKX1cXG5gLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IYXZlU3R5bGUoaHRtbEVsZW1lbnQsIGNzcykge1xuICBjaGVja0h0bWxFbGVtZW50KGh0bWxFbGVtZW50LCB0b0hhdmVTdHlsZSwgdGhpcyk7XG4gIGNvbnN0IHBhcnNlZENTUyA9XG4gICAgdHlwZW9mIGNzcyA9PT0gJ29iamVjdCcgPyBjc3MgOiBwYXJzZUNTUyhjc3MsIHRvSGF2ZVN0eWxlLCB0aGlzKTtcbiAgY29uc3Qge2dldENvbXB1dGVkU3R5bGV9ID0gaHRtbEVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuICBjb25zdCBleHBlY3RlZCA9IGdldFN0eWxlRGVjbGFyYXRpb24oaHRtbEVsZW1lbnQub3duZXJEb2N1bWVudCwgcGFyc2VkQ1NTKTtcbiAgY29uc3QgcmVjZWl2ZWQgPSBnZXRDb21wdXRlZFN0eWxlKGh0bWxFbGVtZW50KTtcblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGlzU3Vic2V0KGV4cGVjdGVkLCByZWNlaXZlZCksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlciA9IGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlU3R5bGVgO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChtYXRjaGVyLCAnZWxlbWVudCcsICcnKSxcbiAgICAgICAgZXhwZWN0ZWREaWZmKHRoaXMudXRpbHMuZGlmZiwgZXhwZWN0ZWQsIHJlY2VpdmVkKSxcbiAgICAgIF0uam9pbignXFxuXFxuJylcbiAgICB9LFxuICB9XG59XG5cbmZ1bmN0aW9uIHRvSGF2ZUZvY3VzKGVsZW1lbnQpIHtcbiAgY2hlY2tIdG1sRWxlbWVudChlbGVtZW50LCB0b0hhdmVGb2N1cywgdGhpcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWxlbWVudCxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlRm9jdXNgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIC4uLih0aGlzLmlzTm90XG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICdSZWNlaXZlZCBlbGVtZW50IGlzIGZvY3VzZWQ6JyxcbiAgICAgICAgICAgICAgYCAgJHt0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZWxlbWVudCl9YCxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgJ0V4cGVjdGVkIGVsZW1lbnQgd2l0aCBmb2N1czonLFxuICAgICAgICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRFeHBlY3RlZChlbGVtZW50KX1gLFxuICAgICAgICAgICAgICAnUmVjZWl2ZWQgZWxlbWVudCB3aXRoIGZvY3VzOicsXG4gICAgICAgICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKFxuICAgICAgICAgICAgICAgIGVsZW1lbnQub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50LFxuICAgICAgICAgICAgICApfWAsXG4gICAgICAgICAgICBdKSxcbiAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIGNvbWJpbmVkIHZhbHVlIG9mIHNldmVyYWwgZWxlbWVudHMgdGhhdCBoYXZlIHRoZSBzYW1lIG5hbWVcbi8vIGUuZy4gcmFkaW8gYnV0dG9ucyBvciBncm91cHMgb2YgY2hlY2tib3hlc1xuZnVuY3Rpb24gZ2V0TXVsdGlFbGVtZW50VmFsdWUoZWxlbWVudHMpIHtcbiAgY29uc3QgdHlwZXMgPSBbLi4ubmV3IFNldChlbGVtZW50cy5tYXAoZWxlbWVudCA9PiBlbGVtZW50LnR5cGUpKV07XG4gIGlmICh0eXBlcy5sZW5ndGggIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnTXVsdGlwbGUgZm9ybSBlbGVtZW50cyB3aXRoIHRoZSBzYW1lIG5hbWUgbXVzdCBiZSBvZiB0aGUgc2FtZSB0eXBlJyxcbiAgICApXG4gIH1cbiAgc3dpdGNoICh0eXBlc1swXSkge1xuICAgIGNhc2UgJ3JhZGlvJzoge1xuICAgICAgY29uc3QgdGhlQ2hvc2VuT25lID0gZWxlbWVudHMuZmluZChyYWRpbyA9PiByYWRpby5jaGVja2VkKTtcbiAgICAgIHJldHVybiB0aGVDaG9zZW5PbmUgPyB0aGVDaG9zZW5PbmUudmFsdWUgOiB1bmRlZmluZWRcbiAgICB9XG4gICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgcmV0dXJuIGVsZW1lbnRzXG4gICAgICAgIC5maWx0ZXIoY2hlY2tib3ggPT4gY2hlY2tib3guY2hlY2tlZClcbiAgICAgICAgLm1hcChjaGVja2JveCA9PiBjaGVja2JveC52YWx1ZSlcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gTk9URTogTm90IGV2ZW4gc3VyZSB0aGlzIGlzIGEgdmFsaWQgdXNlIGNhc2UsIGJ1dCBqdXN0IGluIGNhc2UuLi5cbiAgICAgIHJldHVybiBlbGVtZW50cy5tYXAoZWxlbWVudCA9PiBlbGVtZW50LnZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEZvcm1WYWx1ZShjb250YWluZXIsIG5hbWUpIHtcbiAgY29uc3QgZWxlbWVudHMgPSBbLi4uY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoYFtuYW1lPVwiJHtlc2NhcGUobmFtZSl9XCJdYCldO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB1bmRlZmluZWQgLy8gc2hvdWxkbid0IGhhcHBlbiwgYnV0IGp1c3QgaW4gY2FzZVxuICB9XG4gIHN3aXRjaCAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGdldFNpbmdsZUVsZW1lbnRWYWx1ZShlbGVtZW50c1swXSlcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGdldE11bHRpRWxlbWVudFZhbHVlKGVsZW1lbnRzKVxuICB9XG59XG5cbi8vIFN0cmlwcyB0aGUgYFtdYCBzdWZmaXggb2ZmIGEgZm9ybSB2YWx1ZSBuYW1lXG5mdW5jdGlvbiBnZXRQdXJlTmFtZShuYW1lKSB7XG4gIHJldHVybiAvXFxbXFxdJC8udGVzdChuYW1lKSA/IG5hbWUuc2xpY2UoMCwgLTIpIDogbmFtZVxufVxuXG5mdW5jdGlvbiBnZXRBbGxGb3JtVmFsdWVzKGNvbnRhaW5lcikge1xuICBjb25zdCBuYW1lcyA9IEFycmF5LmZyb20oY29udGFpbmVyLmVsZW1lbnRzKS5tYXAoZWxlbWVudCA9PiBlbGVtZW50Lm5hbWUpO1xuICByZXR1cm4gbmFtZXMucmVkdWNlKFxuICAgIChvYmosIG5hbWUpID0+ICh7XG4gICAgICAuLi5vYmosXG4gICAgICBbZ2V0UHVyZU5hbWUobmFtZSldOiBnZXRGb3JtVmFsdWUoY29udGFpbmVyLCBuYW1lKSxcbiAgICB9KSxcbiAgICB7fSxcbiAgKVxufVxuXG5mdW5jdGlvbiB0b0hhdmVGb3JtVmFsdWVzKGZvcm1FbGVtZW50LCBleHBlY3RlZFZhbHVlcykge1xuICBjaGVja0h0bWxFbGVtZW50KGZvcm1FbGVtZW50LCB0b0hhdmVGb3JtVmFsdWVzLCB0aGlzKTtcbiAgaWYgKCFmb3JtRWxlbWVudC5lbGVtZW50cykge1xuICAgIC8vIFRPRE86IENoYW5nZSBjb25kaXRpb24gdG8gdXNlIGluc3RhbmNlb2YgYWdhaW5zdCB0aGUgYXBwcm9wcmlhdGUgZWxlbWVudCBjbGFzc2VzIGluc3RlYWRcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvSGF2ZUZvcm1WYWx1ZXMgbXVzdCBiZSBjYWxsZWQgb24gYSBmb3JtIG9yIGEgZmllbGRzZXQnKVxuICB9XG4gIGNvbnN0IGZvcm1WYWx1ZXMgPSBnZXRBbGxGb3JtVmFsdWVzKGZvcm1FbGVtZW50KTtcbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBPYmplY3QuZW50cmllcyhleHBlY3RlZFZhbHVlcykuZXZlcnkoKFtuYW1lLCBleHBlY3RlZFZhbHVlXSkgPT5cbiAgICAgIGNvbXBhcmVBc1NldChmb3JtVmFsdWVzW25hbWVdLCBleHBlY3RlZFZhbHVlKSxcbiAgICApLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgIGNvbnN0IG1hdGNoZXIgPSBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZUZvcm1WYWx1ZXNgO1xuICAgICAgY29uc3QgY29tbW9uS2V5VmFsdWVzID0gT2JqZWN0LmtleXMoZm9ybVZhbHVlcylcbiAgICAgICAgLmZpbHRlcihrZXkgPT4gZXhwZWN0ZWRWYWx1ZXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgLnJlZHVjZSgob2JqLCBrZXkpID0+ICh7Li4ub2JqLCBba2V5XTogZm9ybVZhbHVlc1trZXldfSksIHt9KTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQobWF0Y2hlciwgJ2VsZW1lbnQnLCAnJyksXG4gICAgICAgIGBFeHBlY3RlZCB0aGUgZWxlbWVudCAke3RvfSBoYXZlIGZvcm0gdmFsdWVzYCxcbiAgICAgICAgdGhpcy51dGlscy5kaWZmKGV4cGVjdGVkVmFsdWVzLCBjb21tb25LZXlWYWx1ZXMpLFxuICAgICAgXS5qb2luKCdcXG5cXG4nKVxuICAgIH0sXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTdHlsZVZpc2libGUoZWxlbWVudCkge1xuICBjb25zdCB7Z2V0Q29tcHV0ZWRTdHlsZX0gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cbiAgY29uc3Qge2Rpc3BsYXksIHZpc2liaWxpdHksIG9wYWNpdHl9ID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgcmV0dXJuIChcbiAgICBkaXNwbGF5ICE9PSAnbm9uZScgJiZcbiAgICB2aXNpYmlsaXR5ICE9PSAnaGlkZGVuJyAmJlxuICAgIHZpc2liaWxpdHkgIT09ICdjb2xsYXBzZScgJiZcbiAgICBvcGFjaXR5ICE9PSAnMCcgJiZcbiAgICBvcGFjaXR5ICE9PSAwXG4gIClcbn1cblxuZnVuY3Rpb24gaXNBdHRyaWJ1dGVWaXNpYmxlKGVsZW1lbnQsIHByZXZpb3VzRWxlbWVudCkge1xuICBsZXQgZGV0YWlsc1Zpc2liaWxpdHk7XG5cbiAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgIGRldGFpbHNWaXNpYmlsaXR5ID1cbiAgICAgIGVsZW1lbnQubm9kZU5hbWUgPT09ICdERVRBSUxTJyAmJiBwcmV2aW91c0VsZW1lbnQubm9kZU5hbWUgIT09ICdTVU1NQVJZJ1xuICAgICAgICA/IGVsZW1lbnQuaGFzQXR0cmlidXRlKCdvcGVuJylcbiAgICAgICAgOiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGRldGFpbHNWaXNpYmlsaXR5ID1cbiAgICAgIGVsZW1lbnQubm9kZU5hbWUgPT09ICdERVRBSUxTJyA/IGVsZW1lbnQuaGFzQXR0cmlidXRlKCdvcGVuJykgOiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnaGlkZGVuJykgJiYgZGV0YWlsc1Zpc2liaWxpdHlcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50VmlzaWJsZShlbGVtZW50LCBwcmV2aW91c0VsZW1lbnQpIHtcbiAgcmV0dXJuIChcbiAgICBpc1N0eWxlVmlzaWJsZShlbGVtZW50KSAmJlxuICAgIGlzQXR0cmlidXRlVmlzaWJsZShlbGVtZW50LCBwcmV2aW91c0VsZW1lbnQpICYmXG4gICAgKCFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNFbGVtZW50VmlzaWJsZShlbGVtZW50LnBhcmVudEVsZW1lbnQsIGVsZW1lbnQpKVxuICApXG59XG5cbmZ1bmN0aW9uIHRvQmVWaXNpYmxlKGVsZW1lbnQpIHtcbiAgY2hlY2tIdG1sRWxlbWVudChlbGVtZW50LCB0b0JlVmlzaWJsZSwgdGhpcyk7XG4gIGNvbnN0IGlzSW5Eb2N1bWVudCA9XG4gICAgZWxlbWVudC5vd25lckRvY3VtZW50ID09PSBlbGVtZW50LmdldFJvb3ROb2RlKHtjb21wb3NlZDogdHJ1ZX0pO1xuICBjb25zdCBpc1Zpc2libGUgPSBpc0luRG9jdW1lbnQgJiYgaXNFbGVtZW50VmlzaWJsZShlbGVtZW50KTtcbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc1Zpc2libGUsXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgaXMgPSBpc1Zpc2libGUgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZVZpc2libGVgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IHZpc2libGUke1xuICAgICAgICAgIGlzSW5Eb2N1bWVudCA/ICcnIDogJyAoZWxlbWVudCBpcyBub3QgaW4gdGhlIGRvY3VtZW50KSdcbiAgICAgICAgfTpgLFxuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChlbGVtZW50LmNsb25lTm9kZShmYWxzZSkpfWAsXG4gICAgICBdLmpvaW4oJ1xcbicpXG4gICAgfSxcbiAgfVxufVxuXG4vLyBmb3JtIGVsZW1lbnRzIHRoYXQgc3VwcG9ydCAnZGlzYWJsZWQnXG5jb25zdCBGT1JNX1RBR1MkMiA9IFtcbiAgJ2ZpZWxkc2V0JyxcbiAgJ2lucHV0JyxcbiAgJ3NlbGVjdCcsXG4gICdvcHRncm91cCcsXG4gICdvcHRpb24nLFxuICAnYnV0dG9uJyxcbiAgJ3RleHRhcmVhJyxcbl07XG5cbi8qXG4gKiBBY2NvcmRpbmcgdG8gc3BlY2lmaWNhdGlvbjpcbiAqIElmIDxmaWVsZHNldD4gaXMgZGlzYWJsZWQsIHRoZSBmb3JtIGNvbnRyb2xzIHRoYXQgYXJlIGl0cyBkZXNjZW5kYW50cyxcbiAqIGV4Y2VwdCBkZXNjZW5kYW50cyBvZiBpdHMgZmlyc3Qgb3B0aW9uYWwgPGxlZ2VuZD4gZWxlbWVudCwgYXJlIGRpc2FibGVkXG4gKlxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1lbGVtZW50cy5odG1sI2NvbmNlcHQtZmllbGRzZXQtZGlzYWJsZWRcbiAqXG4gKiBUaGlzIG1ldGhvZCB0ZXN0cyB3aGV0aGVyIGVsZW1lbnQgaXMgZmlyc3QgbGVnZW5kIGNoaWxkIG9mIGZpZWxkc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBpc0ZpcnN0TGVnZW5kQ2hpbGRPZkZpZWxkc2V0KGVsZW1lbnQsIHBhcmVudCkge1xuICByZXR1cm4gKFxuICAgIGdldFRhZyhlbGVtZW50KSA9PT0gJ2xlZ2VuZCcgJiZcbiAgICBnZXRUYWcocGFyZW50KSA9PT0gJ2ZpZWxkc2V0JyAmJlxuICAgIGVsZW1lbnQuaXNTYW1lTm9kZShcbiAgICAgIEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5maW5kKGNoaWxkID0+IGdldFRhZyhjaGlsZCkgPT09ICdsZWdlbmQnKSxcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50RGlzYWJsZWRCeVBhcmVudChlbGVtZW50LCBwYXJlbnQpIHtcbiAgcmV0dXJuIChcbiAgICBpc0VsZW1lbnREaXNhYmxlZChwYXJlbnQpICYmICFpc0ZpcnN0TGVnZW5kQ2hpbGRPZkZpZWxkc2V0KGVsZW1lbnQsIHBhcmVudClcbiAgKVxufVxuXG5mdW5jdGlvbiBpc0N1c3RvbUVsZW1lbnQodGFnKSB7XG4gIHJldHVybiB0YWcuaW5jbHVkZXMoJy0nKVxufVxuXG4vKlxuICogT25seSBjZXJ0YWluIGZvcm0gZWxlbWVudHMgYW5kIGN1c3RvbSBlbGVtZW50cyBjYW4gYWN0dWFsbHkgYmUgZGlzYWJsZWQ6XG4gKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3Mtb3RoZXIuaHRtbCNkaXNhYmxlZC1lbGVtZW50c1xuICovXG5mdW5jdGlvbiBjYW5FbGVtZW50QmVEaXNhYmxlZChlbGVtZW50KSB7XG4gIGNvbnN0IHRhZyA9IGdldFRhZyhlbGVtZW50KTtcbiAgcmV0dXJuIEZPUk1fVEFHUyQyLmluY2x1ZGVzKHRhZykgfHwgaXNDdXN0b21FbGVtZW50KHRhZylcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50RGlzYWJsZWQoZWxlbWVudCkge1xuICByZXR1cm4gY2FuRWxlbWVudEJlRGlzYWJsZWQoZWxlbWVudCkgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbn1cblxuZnVuY3Rpb24gaXNBbmNlc3RvckRpc2FibGVkKGVsZW1lbnQpIHtcbiAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICByZXR1cm4gKFxuICAgIEJvb2xlYW4ocGFyZW50KSAmJlxuICAgIChpc0VsZW1lbnREaXNhYmxlZEJ5UGFyZW50KGVsZW1lbnQsIHBhcmVudCkgfHwgaXNBbmNlc3RvckRpc2FibGVkKHBhcmVudCkpXG4gIClcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50T3JBbmNlc3RvckRpc2FibGVkKGVsZW1lbnQpIHtcbiAgcmV0dXJuIChcbiAgICBjYW5FbGVtZW50QmVEaXNhYmxlZChlbGVtZW50KSAmJlxuICAgIChpc0VsZW1lbnREaXNhYmxlZChlbGVtZW50KSB8fCBpc0FuY2VzdG9yRGlzYWJsZWQoZWxlbWVudCkpXG4gIClcbn1cblxuZnVuY3Rpb24gdG9CZURpc2FibGVkKGVsZW1lbnQpIHtcbiAgY2hlY2tIdG1sRWxlbWVudChlbGVtZW50LCB0b0JlRGlzYWJsZWQsIHRoaXMpO1xuXG4gIGNvbnN0IGlzRGlzYWJsZWQgPSBpc0VsZW1lbnRPckFuY2VzdG9yRGlzYWJsZWQoZWxlbWVudCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc0Rpc2FibGVkLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzID0gaXNEaXNhYmxlZCA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlRGlzYWJsZWRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IGRpc2FibGVkOmAsXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKSl9YCxcbiAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuICB9XG59XG5cbmZ1bmN0aW9uIHRvQmVFbmFibGVkKGVsZW1lbnQpIHtcbiAgY2hlY2tIdG1sRWxlbWVudChlbGVtZW50LCB0b0JlRW5hYmxlZCwgdGhpcyk7XG5cbiAgY29uc3QgaXNFbmFibGVkID0gIWlzRWxlbWVudE9yQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KTtcblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGlzRW5hYmxlZCxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCBpcyA9IGlzRW5hYmxlZCA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlRW5hYmxlZGAsXG4gICAgICAgICAgJ2VsZW1lbnQnLFxuICAgICAgICAgICcnLFxuICAgICAgICApLFxuICAgICAgICAnJyxcbiAgICAgICAgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gZW5hYmxlZDpgLFxuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChlbGVtZW50LmNsb25lTm9kZShmYWxzZSkpfWAsXG4gICAgICBdLmpvaW4oJ1xcbicpXG4gICAgfSxcbiAgfVxufVxuXG4vLyBmb3JtIGVsZW1lbnRzIHRoYXQgc3VwcG9ydCAncmVxdWlyZWQnXG5jb25zdCBGT1JNX1RBR1MkMSA9IFsnc2VsZWN0JywgJ3RleHRhcmVhJ107XG5cbmNvbnN0IEFSSUFfRk9STV9UQUdTID0gWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXTtcblxuY29uc3QgVU5TVVBQT1JURURfSU5QVVRfVFlQRVMgPSBbXG4gICdjb2xvcicsXG4gICdoaWRkZW4nLFxuICAncmFuZ2UnLFxuICAnc3VibWl0JyxcbiAgJ2ltYWdlJyxcbiAgJ3Jlc2V0Jyxcbl07XG5cbmNvbnN0IFNVUFBPUlRFRF9BUklBX1JPTEVTID0gW1xuICAnY2hlY2tib3gnLFxuICAnY29tYm9ib3gnLFxuICAnZ3JpZGNlbGwnLFxuICAnbGlzdGJveCcsXG4gICdyYWRpb2dyb3VwJyxcbiAgJ3NwaW5idXR0b24nLFxuICAndGV4dGJveCcsXG4gICd0cmVlJyxcbl07XG5cbmZ1bmN0aW9uIGlzUmVxdWlyZWRPbkZvcm1UYWdzRXhjZXB0SW5wdXQoZWxlbWVudCkge1xuICByZXR1cm4gRk9STV9UQUdTJDEuaW5jbHVkZXMoZ2V0VGFnKGVsZW1lbnQpKSAmJiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSgncmVxdWlyZWQnKVxufVxuXG5mdW5jdGlvbiBpc1JlcXVpcmVkT25TdXBwb3J0ZWRJbnB1dChlbGVtZW50KSB7XG4gIHJldHVybiAoXG4gICAgZ2V0VGFnKGVsZW1lbnQpID09PSAnaW5wdXQnICYmXG4gICAgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3JlcXVpcmVkJykgJiZcbiAgICAoKGVsZW1lbnQuaGFzQXR0cmlidXRlKCd0eXBlJykgJiZcbiAgICAgICFVTlNVUFBPUlRFRF9JTlBVVF9UWVBFUy5pbmNsdWRlcyhlbGVtZW50LmdldEF0dHJpYnV0ZSgndHlwZScpKSkgfHxcbiAgICAgICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgndHlwZScpKVxuICApXG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFJlcXVpcmVkQnlBUklBKGVsZW1lbnQpIHtcbiAgcmV0dXJuIChcbiAgICBlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1yZXF1aXJlZCcpICYmXG4gICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtcmVxdWlyZWQnKSA9PT0gJ3RydWUnICYmXG4gICAgKEFSSUFfRk9STV9UQUdTLmluY2x1ZGVzKGdldFRhZyhlbGVtZW50KSkgfHxcbiAgICAgIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgncm9sZScpICYmXG4gICAgICAgIFNVUFBPUlRFRF9BUklBX1JPTEVTLmluY2x1ZGVzKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykpKSlcbiAgKVxufVxuXG5mdW5jdGlvbiB0b0JlUmVxdWlyZWQoZWxlbWVudCkge1xuICBjaGVja0h0bWxFbGVtZW50KGVsZW1lbnQsIHRvQmVSZXF1aXJlZCwgdGhpcyk7XG5cbiAgY29uc3QgaXNSZXF1aXJlZCA9XG4gICAgaXNSZXF1aXJlZE9uRm9ybVRhZ3NFeGNlcHRJbnB1dChlbGVtZW50KSB8fFxuICAgIGlzUmVxdWlyZWRPblN1cHBvcnRlZElucHV0KGVsZW1lbnQpIHx8XG4gICAgaXNFbGVtZW50UmVxdWlyZWRCeUFSSUEoZWxlbWVudCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc1JlcXVpcmVkLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzID0gaXNSZXF1aXJlZCA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlUmVxdWlyZWRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IHJlcXVpcmVkOmAsXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKSl9YCxcbiAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuICB9XG59XG5cbmNvbnN0IEZPUk1fVEFHUyA9IFsnZm9ybScsICdpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXTtcblxuZnVuY3Rpb24gaXNFbGVtZW50SGF2aW5nQXJpYUludmFsaWQoZWxlbWVudCkge1xuICByZXR1cm4gKFxuICAgIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWludmFsaWQnKSAmJlxuICAgIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnKSAhPT0gJ2ZhbHNlJ1xuICApXG59XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydHNWYWxpZGl0eU1ldGhvZChlbGVtZW50KSB7XG4gIHJldHVybiBGT1JNX1RBR1MuaW5jbHVkZXMoZ2V0VGFnKGVsZW1lbnQpKVxufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnRJbnZhbGlkKGVsZW1lbnQpIHtcbiAgY29uc3QgaXNIYXZlQXJpYUludmFsaWQgPSBpc0VsZW1lbnRIYXZpbmdBcmlhSW52YWxpZChlbGVtZW50KTtcbiAgaWYgKGlzU3VwcG9ydHNWYWxpZGl0eU1ldGhvZChlbGVtZW50KSkge1xuICAgIHJldHVybiBpc0hhdmVBcmlhSW52YWxpZCB8fCAhZWxlbWVudC5jaGVja1ZhbGlkaXR5KClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaXNIYXZlQXJpYUludmFsaWRcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0JlSW52YWxpZChlbGVtZW50KSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoZWxlbWVudCwgdG9CZUludmFsaWQsIHRoaXMpO1xuXG4gIGNvbnN0IGlzSW52YWxpZCA9IGlzRWxlbWVudEludmFsaWQoZWxlbWVudCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc0ludmFsaWQsXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgaXMgPSBpc0ludmFsaWQgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZUludmFsaWRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IGN1cnJlbnRseSBpbnZhbGlkOmAsXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKSl9YCxcbiAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuICB9XG59XG5cbmZ1bmN0aW9uIHRvQmVWYWxpZChlbGVtZW50KSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoZWxlbWVudCwgdG9CZVZhbGlkLCB0aGlzKTtcblxuICBjb25zdCBpc1ZhbGlkID0gIWlzRWxlbWVudEludmFsaWQoZWxlbWVudCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc1ZhbGlkLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzID0gaXNWYWxpZCA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlVmFsaWRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IGN1cnJlbnRseSB2YWxpZDpgLFxuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChlbGVtZW50LmNsb25lTm9kZShmYWxzZSkpfWAsXG4gICAgICBdLmpvaW4oJ1xcbicpXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0hhdmVWYWx1ZShodG1sRWxlbWVudCwgZXhwZWN0ZWRWYWx1ZSkge1xuICBjaGVja0h0bWxFbGVtZW50KGh0bWxFbGVtZW50LCB0b0hhdmVWYWx1ZSwgdGhpcyk7XG5cbiAgaWYgKFxuICAgIGh0bWxFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyAmJlxuICAgIFsnY2hlY2tib3gnLCAncmFkaW8nXS5pbmNsdWRlcyhodG1sRWxlbWVudC50eXBlKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnaW5wdXQgd2l0aCB0eXBlPWNoZWNrYm94IG9yIHR5cGU9cmFkaW8gY2Fubm90IGJlIHVzZWQgd2l0aCAudG9IYXZlVmFsdWUoKS4gVXNlIC50b0JlQ2hlY2tlZCgpIGZvciB0eXBlPWNoZWNrYm94IG9yIC50b0hhdmVGb3JtVmFsdWVzKCkgaW5zdGVhZCcsXG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVjZWl2ZWRWYWx1ZSA9IGdldFNpbmdsZUVsZW1lbnRWYWx1ZShodG1sRWxlbWVudCk7XG4gIGNvbnN0IGV4cGVjdHNWYWx1ZSA9IGV4cGVjdGVkVmFsdWUgIT09IHVuZGVmaW5lZDtcblxuICBsZXQgZXhwZWN0ZWRUeXBlZFZhbHVlID0gZXhwZWN0ZWRWYWx1ZTtcbiAgbGV0IHJlY2VpdmVkVHlwZWRWYWx1ZSA9IHJlY2VpdmVkVmFsdWU7XG4gIGlmIChleHBlY3RlZFZhbHVlID09IHJlY2VpdmVkVmFsdWUgJiYgZXhwZWN0ZWRWYWx1ZSAhPT0gcmVjZWl2ZWRWYWx1ZSkge1xuICAgIGV4cGVjdGVkVHlwZWRWYWx1ZSA9IGAke2V4cGVjdGVkVmFsdWV9ICgke3R5cGVvZiBleHBlY3RlZFZhbHVlfSlgO1xuICAgIHJlY2VpdmVkVHlwZWRWYWx1ZSA9IGAke3JlY2VpdmVkVmFsdWV9ICgke3R5cGVvZiByZWNlaXZlZFZhbHVlfSlgO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBleHBlY3RzVmFsdWVcbiAgICAgID8gY29tcGFyZUFzU2V0KHJlY2VpdmVkVmFsdWUsIGV4cGVjdGVkVmFsdWUpXG4gICAgICA6IEJvb2xlYW4ocmVjZWl2ZWRWYWx1ZSksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgdG8gPSB0aGlzLmlzTm90ID8gJ25vdCB0bycgOiAndG8nO1xuICAgICAgY29uc3QgbWF0Y2hlciA9IHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlVmFsdWVgLFxuICAgICAgICAnZWxlbWVudCcsXG4gICAgICAgIGV4cGVjdGVkVmFsdWUsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGdldE1lc3NhZ2UoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIG1hdGNoZXIsXG4gICAgICAgIGBFeHBlY3RlZCB0aGUgZWxlbWVudCAke3RvfSBoYXZlIHZhbHVlYCxcbiAgICAgICAgZXhwZWN0c1ZhbHVlID8gZXhwZWN0ZWRUeXBlZFZhbHVlIDogJyhhbnkpJyxcbiAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgcmVjZWl2ZWRUeXBlZFZhbHVlLFxuICAgICAgKVxuICAgIH0sXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9IYXZlRGlzcGxheVZhbHVlKGh0bWxFbGVtZW50LCBleHBlY3RlZFZhbHVlKSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoaHRtbEVsZW1lbnQsIHRvSGF2ZURpc3BsYXlWYWx1ZSwgdGhpcyk7XG4gIGNvbnN0IHRhZ05hbWUgPSBodG1sRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKCFbJ3NlbGVjdCcsICdpbnB1dCcsICd0ZXh0YXJlYSddLmluY2x1ZGVzKHRhZ05hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJy50b0hhdmVEaXNwbGF5VmFsdWUoKSBjdXJyZW50bHkgc3VwcG9ydHMgb25seSBpbnB1dCwgdGV4dGFyZWEgb3Igc2VsZWN0IGVsZW1lbnRzLCB0cnkgd2l0aCBhbm90aGVyIG1hdGNoZXIgaW5zdGVhZC4nLFxuICAgIClcbiAgfVxuXG4gIGlmICh0YWdOYW1lID09PSAnaW5wdXQnICYmIFsncmFkaW8nLCAnY2hlY2tib3gnXS5pbmNsdWRlcyhodG1sRWxlbWVudC50eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGAudG9IYXZlRGlzcGxheVZhbHVlKCkgY3VycmVudGx5IGRvZXMgbm90IHN1cHBvcnQgaW5wdXRbdHlwZT1cIiR7aHRtbEVsZW1lbnQudHlwZX1cIl0sIHRyeSB3aXRoIGFub3RoZXIgbWF0Y2hlciBpbnN0ZWFkLmAsXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVzID0gZ2V0VmFsdWVzKHRhZ05hbWUsIGh0bWxFbGVtZW50KTtcbiAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSBnZXRFeHBlY3RlZFZhbHVlcyhleHBlY3RlZFZhbHVlKTtcbiAgY29uc3QgbnVtYmVyT2ZNYXRjaGVzV2l0aFZhbHVlcyA9IGV4cGVjdGVkVmFsdWVzLmZpbHRlcihleHBlY3RlZCA9PlxuICAgIHZhbHVlcy5zb21lKHZhbHVlID0+XG4gICAgICBleHBlY3RlZCBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgICA/IGV4cGVjdGVkLnRlc3QodmFsdWUpXG4gICAgICAgIDogdGhpcy5lcXVhbHModmFsdWUsIFN0cmluZyhleHBlY3RlZCkpLFxuICAgICksXG4gICkubGVuZ3RoO1xuXG4gIGNvbnN0IG1hdGNoZWRXaXRoQWxsVmFsdWVzID0gbnVtYmVyT2ZNYXRjaGVzV2l0aFZhbHVlcyA9PT0gdmFsdWVzLmxlbmd0aDtcbiAgY29uc3QgbWF0Y2hlZFdpdGhBbGxFeHBlY3RlZFZhbHVlcyA9XG4gICAgbnVtYmVyT2ZNYXRjaGVzV2l0aFZhbHVlcyA9PT0gZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoO1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogbWF0Y2hlZFdpdGhBbGxWYWx1ZXMgJiYgbWF0Y2hlZFdpdGhBbGxFeHBlY3RlZFZhbHVlcyxcbiAgICBtZXNzYWdlOiAoKSA9PlxuICAgICAgZ2V0TWVzc2FnZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZURpc3BsYXlWYWx1ZWAsXG4gICAgICAgICAgJ2VsZW1lbnQnLFxuICAgICAgICAgICcnLFxuICAgICAgICApLFxuICAgICAgICBgRXhwZWN0ZWQgZWxlbWVudCAke3RoaXMuaXNOb3QgPyAnbm90ICcgOiAnJ310byBoYXZlIGRpc3BsYXkgdmFsdWVgLFxuICAgICAgICBleHBlY3RlZFZhbHVlLFxuICAgICAgICAnUmVjZWl2ZWQnLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICApLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlcyh0YWdOYW1lLCBodG1sRWxlbWVudCkge1xuICByZXR1cm4gdGFnTmFtZSA9PT0gJ3NlbGVjdCdcbiAgICA/IEFycmF5LmZyb20oaHRtbEVsZW1lbnQpXG4gICAgICAgIC5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZClcbiAgICAgICAgLm1hcChvcHRpb24gPT4gb3B0aW9uLnRleHRDb250ZW50KVxuICAgIDogW2h0bWxFbGVtZW50LnZhbHVlXVxufVxuXG5mdW5jdGlvbiBnZXRFeHBlY3RlZFZhbHVlcyhleHBlY3RlZFZhbHVlKSB7XG4gIHJldHVybiBleHBlY3RlZFZhbHVlIGluc3RhbmNlb2YgQXJyYXkgPyBleHBlY3RlZFZhbHVlIDogW2V4cGVjdGVkVmFsdWVdXG59XG5cbmZ1bmN0aW9uIHRvQmVDaGVja2VkKGVsZW1lbnQpIHtcbiAgY2hlY2tIdG1sRWxlbWVudChlbGVtZW50LCB0b0JlQ2hlY2tlZCwgdGhpcyk7XG5cbiAgY29uc3QgaXNWYWxpZElucHV0ID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyAmJlxuICAgICAgWydjaGVja2JveCcsICdyYWRpbyddLmluY2x1ZGVzKGVsZW1lbnQudHlwZSlcbiAgICApXG4gIH07XG5cbiAgY29uc3QgaXNWYWxpZEFyaWFFbGVtZW50ID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICByb2xlU3VwcG9ydHNDaGVja2VkKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykpICYmXG4gICAgICBbJ3RydWUnLCAnZmFsc2UnXS5pbmNsdWRlcyhlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJykpXG4gICAgKVxuICB9O1xuXG4gIGlmICghaXNWYWxpZElucHV0KCkgJiYgIWlzVmFsaWRBcmlhRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogKCkgPT5cbiAgICAgICAgYG9ubHkgaW5wdXRzIHdpdGggdHlwZT1cImNoZWNrYm94XCIgb3IgdHlwZT1cInJhZGlvXCIgb3IgZWxlbWVudHMgd2l0aCAke3N1cHBvcnRlZFJvbGVzU2VudGVuY2UoKX0gYW5kIGEgdmFsaWQgYXJpYS1jaGVja2VkIGF0dHJpYnV0ZSBjYW4gYmUgdXNlZCB3aXRoIC50b0JlQ2hlY2tlZCgpLiBVc2UgLnRvSGF2ZVZhbHVlKCkgaW5zdGVhZGAsXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXNDaGVja2VkID0gKCkgPT4ge1xuICAgIGlmIChpc1ZhbGlkSW5wdXQoKSkgcmV0dXJuIGVsZW1lbnQuY2hlY2tlZFxuICAgIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJykgPT09ICd0cnVlJ1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogaXNDaGVja2VkKCksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgaXMgPSBpc0NoZWNrZWQoKSA/ICdpcycgOiAnaXMgbm90JztcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0JlQ2hlY2tlZGAsXG4gICAgICAgICAgJ2VsZW1lbnQnLFxuICAgICAgICAgICcnLFxuICAgICAgICApLFxuICAgICAgICAnJyxcbiAgICAgICAgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gY2hlY2tlZDpgLFxuICAgICAgICBgICAke3RoaXMudXRpbHMucHJpbnRSZWNlaXZlZChlbGVtZW50LmNsb25lTm9kZShmYWxzZSkpfWAsXG4gICAgICBdLmpvaW4oJ1xcbicpXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRSb2xlc1NlbnRlbmNlKCkge1xuICByZXR1cm4gdG9TZW50ZW5jZShcbiAgICBzdXBwb3J0ZWRSb2xlcygpLm1hcChyb2xlID0+IGByb2xlPVwiJHtyb2xlfVwiYCksXG4gICAge2xhc3RXb3JkQ29ubmVjdG9yOiAnIG9yICd9LFxuICApXG59XG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFJvbGVzKCkge1xuICByZXR1cm4gYXJpYVF1ZXJ5LnJvbGVzLmtleXMoKS5maWx0ZXIocm9sZVN1cHBvcnRzQ2hlY2tlZClcbn1cblxuZnVuY3Rpb24gcm9sZVN1cHBvcnRzQ2hlY2tlZChyb2xlKSB7XG4gIHJldHVybiBhcmlhUXVlcnkucm9sZXMuZ2V0KHJvbGUpPy5wcm9wc1snYXJpYS1jaGVja2VkJ10gIT09IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiB0b0JlUGFydGlhbGx5Q2hlY2tlZChlbGVtZW50KSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoZWxlbWVudCwgdG9CZVBhcnRpYWxseUNoZWNrZWQsIHRoaXMpO1xuXG4gIGNvbnN0IGlzVmFsaWRJbnB1dCA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgZWxlbWVudC50eXBlID09PSAnY2hlY2tib3gnXG4gICAgKVxuICB9O1xuXG4gIGNvbnN0IGlzVmFsaWRBcmlhRWxlbWVudCA9ICgpID0+IHtcbiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ2NoZWNrYm94J1xuICB9O1xuXG4gIGlmICghaXNWYWxpZElucHV0KCkgJiYgIWlzVmFsaWRBcmlhRWxlbWVudCgpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogKCkgPT5cbiAgICAgICAgJ29ubHkgaW5wdXRzIHdpdGggdHlwZT1cImNoZWNrYm94XCIgb3IgZWxlbWVudHMgd2l0aCByb2xlPVwiY2hlY2tib3hcIiBhbmQgYSB2YWxpZCBhcmlhLWNoZWNrZWQgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHdpdGggLnRvQmVQYXJ0aWFsbHlDaGVja2VkKCkuIFVzZSAudG9IYXZlVmFsdWUoKSBpbnN0ZWFkJyxcbiAgICB9XG4gIH1cblxuICBjb25zdCBpc1BhcnRpYWxseUNoZWNrZWQgPSAoKSA9PiB7XG4gICAgY29uc3QgaXNBcmlhTWl4ZWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJykgPT09ICdtaXhlZCc7XG5cbiAgICBpZiAoaXNWYWxpZElucHV0KCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmluZGV0ZXJtaW5hdGUgfHwgaXNBcmlhTWl4ZWRcbiAgICB9XG5cbiAgICByZXR1cm4gaXNBcmlhTWl4ZWRcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGlzUGFydGlhbGx5Q2hlY2tlZCgpLFxuICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IGlzID0gaXNQYXJ0aWFsbHlDaGVja2VkKCkgPyAnaXMnIDogJ2lzIG5vdCc7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZVBhcnRpYWxseUNoZWNrZWRgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgJycsXG4gICAgICAgIGBSZWNlaXZlZCBlbGVtZW50ICR7aXN9IHBhcnRpYWxseSBjaGVja2VkOmAsXG4gICAgICAgIGAgICR7dGhpcy51dGlscy5wcmludFJlY2VpdmVkKGVsZW1lbnQuY2xvbmVOb2RlKGZhbHNlKSl9YCxcbiAgICAgIF0uam9pbignXFxuJylcbiAgICB9LFxuICB9XG59XG5cbi8vIFNlZSBhbGdvcml0bTogaHR0cHM6Ly93d3cudzMub3JnL1RSL2FjY25hbWUtMS4xLyNtYXBwaW5nX2FkZGl0aW9uYWxfbmRfZGVzY3JpcHRpb25cbmZ1bmN0aW9uIHRvSGF2ZURlc2NyaXB0aW9uKGh0bWxFbGVtZW50LCBjaGVja1dpdGgpIHtcbiAgZGVwcmVjYXRlKFxuICAgICd0b0hhdmVEZXNjcmlwdGlvbicsXG4gICAgJ1BsZWFzZSB1c2UgdG9IYXZlQWNjZXNzaWJsZURlc2NyaXB0aW9uLicsXG4gICk7XG5cbiAgY2hlY2tIdG1sRWxlbWVudChodG1sRWxlbWVudCwgdG9IYXZlRGVzY3JpcHRpb24sIHRoaXMpO1xuXG4gIGNvbnN0IGV4cGVjdHNEZXNjcmlwdGlvbiA9IGNoZWNrV2l0aCAhPT0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0IGRlc2NyaXB0aW9uSURSYXcgPSBodG1sRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKSB8fCAnJztcbiAgY29uc3QgZGVzY3JpcHRpb25JRHMgPSBkZXNjcmlwdGlvbklEUmF3LnNwbGl0KC9cXHMrLykuZmlsdGVyKEJvb2xlYW4pO1xuICBsZXQgZGVzY3JpcHRpb24gPSAnJztcbiAgaWYgKGRlc2NyaXB0aW9uSURzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBkb2N1bWVudCA9IGh0bWxFbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgY29uc3QgZGVzY3JpcHRpb25FbHMgPSBkZXNjcmlwdGlvbklEc1xuICAgICAgLm1hcChkZXNjcmlwdGlvbklEID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRlc2NyaXB0aW9uSUQpKVxuICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICBkZXNjcmlwdGlvbiA9IG5vcm1hbGl6ZShkZXNjcmlwdGlvbkVscy5tYXAoZWwgPT4gZWwudGV4dENvbnRlbnQpLmpvaW4oJyAnKSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGV4cGVjdHNEZXNjcmlwdGlvblxuICAgICAgPyBjaGVja1dpdGggaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAgICAgPyBjaGVja1dpdGgudGVzdChkZXNjcmlwdGlvbilcbiAgICAgICAgOiB0aGlzLmVxdWFscyhkZXNjcmlwdGlvbiwgY2hlY2tXaXRoKVxuICAgICAgOiBCb29sZWFuKGRlc2NyaXB0aW9uKSxcbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdGhpcy51dGlscy5tYXRjaGVySGludChcbiAgICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvSGF2ZURlc2NyaXB0aW9uYCxcbiAgICAgICAgICAnZWxlbWVudCcsXG4gICAgICAgICAgJycsXG4gICAgICAgICksXG4gICAgICAgIGBFeHBlY3RlZCB0aGUgZWxlbWVudCAke3RvfSBoYXZlIGRlc2NyaXB0aW9uYCxcbiAgICAgICAgdGhpcy51dGlscy5wcmludEV4cGVjdGVkKGNoZWNrV2l0aCksXG4gICAgICAgICdSZWNlaXZlZCcsXG4gICAgICAgIHRoaXMudXRpbHMucHJpbnRSZWNlaXZlZChkZXNjcmlwdGlvbiksXG4gICAgICApXG4gICAgfSxcbiAgfVxufVxuXG4vLyBTZWUgYXJpYS1lcnJvcm1lc3NhZ2Ugc3BlYyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtMS4yLyNhcmlhLWVycm9ybWVzc2FnZVxuZnVuY3Rpb24gdG9IYXZlRXJyb3JNZXNzYWdlKGh0bWxFbGVtZW50LCBjaGVja1dpdGgpIHtcbiAgZGVwcmVjYXRlKCd0b0hhdmVFcnJvck1lc3NhZ2UnLCAnUGxlYXNlIHVzZSB0b0hhdmVBY2Nlc3NpYmxlRXJyb3JNZXNzYWdlLicpO1xuICBjaGVja0h0bWxFbGVtZW50KGh0bWxFbGVtZW50LCB0b0hhdmVFcnJvck1lc3NhZ2UsIHRoaXMpO1xuXG4gIGlmIChcbiAgICAhaHRtbEVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWludmFsaWQnKSB8fFxuICAgIGh0bWxFbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJykgPT09ICdmYWxzZSdcbiAgKSB7XG4gICAgY29uc3Qgbm90ID0gdGhpcy5pc05vdCA/ICcubm90JyA6ICcnO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoYCR7bm90fS50b0hhdmVFcnJvck1lc3NhZ2VgLCAnZWxlbWVudCcsICcnKSxcbiAgICAgICAgICBgRXhwZWN0ZWQgdGhlIGVsZW1lbnQgdG8gaGF2ZSBpbnZhbGlkIHN0YXRlIGluZGljYXRlZCBieWAsXG4gICAgICAgICAgJ2FyaWEtaW52YWxpZD1cInRydWVcIicsXG4gICAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgICBodG1sRWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpXG4gICAgICAgICAgICA/IGBhcmlhLWludmFsaWQ9XCIke2h0bWxFbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJyl9XCJgXG4gICAgICAgICAgICA6IHRoaXMudXRpbHMucHJpbnRSZWNlaXZlZCgnJyksXG4gICAgICAgIClcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgY29uc3QgZXhwZWN0c0Vycm9yTWVzc2FnZSA9IGNoZWNrV2l0aCAhPT0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0IGVycm9ybWVzc2FnZUlEUmF3ID0gaHRtbEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWVycm9ybWVzc2FnZScpIHx8ICcnO1xuICBjb25zdCBlcnJvcm1lc3NhZ2VJRHMgPSBlcnJvcm1lc3NhZ2VJRFJhdy5zcGxpdCgvXFxzKy8pLmZpbHRlcihCb29sZWFuKTtcblxuICBsZXQgZXJyb3JtZXNzYWdlID0gJyc7XG4gIGlmIChlcnJvcm1lc3NhZ2VJRHMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gaHRtbEVsZW1lbnQub3duZXJEb2N1bWVudDtcblxuICAgIGNvbnN0IGVycm9ybWVzc2FnZUVscyA9IGVycm9ybWVzc2FnZUlEc1xuICAgICAgLm1hcChlcnJvcm1lc3NhZ2VJRCA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlcnJvcm1lc3NhZ2VJRCkpXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgZXJyb3JtZXNzYWdlID0gbm9ybWFsaXplKFxuICAgICAgZXJyb3JtZXNzYWdlRWxzLm1hcChlbCA9PiBlbC50ZXh0Q29udGVudCkuam9pbignICcpLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGV4cGVjdHNFcnJvck1lc3NhZ2VcbiAgICAgID8gY2hlY2tXaXRoIGluc3RhbmNlb2YgUmVnRXhwXG4gICAgICAgID8gY2hlY2tXaXRoLnRlc3QoZXJyb3JtZXNzYWdlKVxuICAgICAgICA6IHRoaXMuZXF1YWxzKGVycm9ybWVzc2FnZSwgY2hlY2tXaXRoKVxuICAgICAgOiBCb29sZWFuKGVycm9ybWVzc2FnZSksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgdG8gPSB0aGlzLmlzTm90ID8gJ25vdCB0bycgOiAndG8nO1xuICAgICAgcmV0dXJuIGdldE1lc3NhZ2UoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgICAgYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVFcnJvck1lc3NhZ2VgLFxuICAgICAgICAgICdlbGVtZW50JyxcbiAgICAgICAgICAnJyxcbiAgICAgICAgKSxcbiAgICAgICAgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dG99IGhhdmUgZXJyb3IgbWVzc2FnZWAsXG4gICAgICAgIHRoaXMudXRpbHMucHJpbnRFeHBlY3RlZChjaGVja1dpdGgpLFxuICAgICAgICAnUmVjZWl2ZWQnLFxuICAgICAgICB0aGlzLnV0aWxzLnByaW50UmVjZWl2ZWQoZXJyb3JtZXNzYWdlKSxcbiAgICAgIClcbiAgICB9LFxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2VsZWN0aW9uIGZyb20gdGhlIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW1lbnQge0hUTUxFbGVtZW50fSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIHNlbGVjdGlvbiBmcm9tLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHNlbGVjdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKGVsZW1lbnQpIHtcbiAgY29uc3Qgc2VsZWN0aW9uID0gZWxlbWVudC5vd25lckRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuXG4gIGlmIChbJ2lucHV0JywgJ3RleHRhcmVhJ10uaW5jbHVkZXMoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgaWYgKFsncmFkaW8nLCAnY2hlY2tib3gnXS5pbmNsdWRlcyhlbGVtZW50LnR5cGUpKSByZXR1cm4gJydcbiAgICByZXR1cm4gZWxlbWVudC52YWx1ZVxuICAgICAgLnRvU3RyaW5nKClcbiAgICAgIC5zdWJzdHJpbmcoZWxlbWVudC5zZWxlY3Rpb25TdGFydCwgZWxlbWVudC5zZWxlY3Rpb25FbmQpXG4gIH1cblxuICBpZiAoc2VsZWN0aW9uLmFuY2hvck5vZGUgPT09IG51bGwgfHwgc2VsZWN0aW9uLmZvY3VzTm9kZSA9PT0gbnVsbCkge1xuICAgIC8vIE5vIHNlbGVjdGlvblxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgY29uc3Qgb3JpZ2luYWxSYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICBjb25zdCB0ZW1wb3JhcnlSYW5nZSA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuXG4gIGlmIChzZWxlY3Rpb24uY29udGFpbnNOb2RlKGVsZW1lbnQsIGZhbHNlKSkge1xuICAgIC8vIFdob2xlIGVsZW1lbnQgaXMgaW5zaWRlIHNlbGVjdGlvblxuICAgIHRlbXBvcmFyeVJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhlbGVtZW50KTtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgc2VsZWN0aW9uLmFkZFJhbmdlKHRlbXBvcmFyeVJhbmdlKTtcbiAgfSBlbHNlIGlmIChcbiAgICBlbGVtZW50LmNvbnRhaW5zKHNlbGVjdGlvbi5hbmNob3JOb2RlKSAmJlxuICAgIGVsZW1lbnQuY29udGFpbnMoc2VsZWN0aW9uLmZvY3VzTm9kZSlcbiAgKSA7IGVsc2Uge1xuICAgIC8vIEVsZW1lbnQgaXMgcGFydGlhbGx5IHNlbGVjdGVkXG4gICAgY29uc3Qgc2VsZWN0aW9uU3RhcnRzV2l0aGluRWxlbWVudCA9XG4gICAgICBlbGVtZW50ID09PSBvcmlnaW5hbFJhbmdlLnN0YXJ0Q29udGFpbmVyIHx8XG4gICAgICBlbGVtZW50LmNvbnRhaW5zKG9yaWdpbmFsUmFuZ2Uuc3RhcnRDb250YWluZXIpO1xuICAgIGNvbnN0IHNlbGVjdGlvbkVuZHNXaXRoaW5FbGVtZW50ID1cbiAgICAgIGVsZW1lbnQgPT09IG9yaWdpbmFsUmFuZ2UuZW5kQ29udGFpbmVyIHx8XG4gICAgICBlbGVtZW50LmNvbnRhaW5zKG9yaWdpbmFsUmFuZ2UuZW5kQ29udGFpbmVyKTtcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoc2VsZWN0aW9uU3RhcnRzV2l0aGluRWxlbWVudCB8fCBzZWxlY3Rpb25FbmRzV2l0aGluRWxlbWVudCkge1xuICAgICAgdGVtcG9yYXJ5UmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uU3RhcnRzV2l0aGluRWxlbWVudCkge1xuICAgICAgICB0ZW1wb3JhcnlSYW5nZS5zZXRTdGFydChcbiAgICAgICAgICBvcmlnaW5hbFJhbmdlLnN0YXJ0Q29udGFpbmVyLFxuICAgICAgICAgIG9yaWdpbmFsUmFuZ2Uuc3RhcnRPZmZzZXQsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZWN0aW9uRW5kc1dpdGhpbkVsZW1lbnQpIHtcbiAgICAgICAgdGVtcG9yYXJ5UmFuZ2Uuc2V0RW5kKFxuICAgICAgICAgIG9yaWdpbmFsUmFuZ2UuZW5kQ29udGFpbmVyLFxuICAgICAgICAgIG9yaWdpbmFsUmFuZ2UuZW5kT2Zmc2V0LFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UodGVtcG9yYXJ5UmFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IHNlbGVjdGlvbi50b1N0cmluZygpO1xuXG4gIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgc2VsZWN0aW9uLmFkZFJhbmdlKG9yaWdpbmFsUmFuZ2UpO1xuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGVsZW1lbnQgaGFzIHRoZSBzdHJpbmcgc2VsZWN0ZWQuXG4gKlxuICogQHBhcmFtIGh0bWxFbGVtZW50IHtIVE1MRWxlbWVudH0gVGhlIGh0bWwgZWxlbWVudCB0byBjaGVjayB0aGUgc2VsZWN0aW9uIGZvci5cbiAqIEBwYXJhbSBleHBlY3RlZFNlbGVjdGlvbiB7U3RyaW5nfSBUaGUgc2VsZWN0aW9uIGFzIGEgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b0hhdmVTZWxlY3Rpb24oaHRtbEVsZW1lbnQsIGV4cGVjdGVkU2VsZWN0aW9uKSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoaHRtbEVsZW1lbnQsIHRvSGF2ZVNlbGVjdGlvbiwgdGhpcyk7XG5cbiAgY29uc3QgZXhwZWN0c1NlbGVjdGlvbiA9IGV4cGVjdGVkU2VsZWN0aW9uICE9PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGV4cGVjdHNTZWxlY3Rpb24gJiYgdHlwZW9mIGV4cGVjdGVkU2VsZWN0aW9uICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgc2VsZWN0aW9uIG11c3QgYmUgYSBzdHJpbmcgb3IgdW5kZWZpbmVkYClcbiAgfVxuXG4gIGNvbnN0IHJlY2VpdmVkU2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGh0bWxFbGVtZW50KTtcblxuICByZXR1cm4ge1xuICAgIHBhc3M6IGV4cGVjdHNTZWxlY3Rpb25cbiAgICAgID8gY29tcGFyZUFzU2V0KHJlY2VpdmVkU2VsZWN0aW9uLCBleHBlY3RlZFNlbGVjdGlvbilcbiAgICAgIDogQm9vbGVhbihyZWNlaXZlZFNlbGVjdGlvbiksXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgdG8gPSB0aGlzLmlzTm90ID8gJ25vdCB0bycgOiAndG8nO1xuICAgICAgY29uc3QgbWF0Y2hlciA9IHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlU2VsZWN0aW9uYCxcbiAgICAgICAgJ2VsZW1lbnQnLFxuICAgICAgICBleHBlY3RlZFNlbGVjdGlvbixcbiAgICAgICk7XG4gICAgICByZXR1cm4gZ2V0TWVzc2FnZShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgYEV4cGVjdGVkIHRoZSBlbGVtZW50ICR7dG99IGhhdmUgc2VsZWN0aW9uYCxcbiAgICAgICAgZXhwZWN0c1NlbGVjdGlvbiA/IGV4cGVjdGVkU2VsZWN0aW9uIDogJyhhbnkpJyxcbiAgICAgICAgJ1JlY2VpdmVkJyxcbiAgICAgICAgcmVjZWl2ZWRTZWxlY3Rpb24sXG4gICAgICApXG4gICAgfSxcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0JlUHJlc3NlZChlbGVtZW50KSB7XG4gIGNoZWNrSHRtbEVsZW1lbnQoZWxlbWVudCwgdG9CZVByZXNzZWQsIHRoaXMpO1xuXG4gIGNvbnN0IHJvbGVzID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgfHwgJycpXG4gICAgLnNwbGl0KCcgJylcbiAgICAubWFwKHJvbGUgPT4gcm9sZS50cmltKCkpO1xuXG4gIGNvbnN0IGlzQnV0dG9uID1cbiAgICBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2J1dHRvbicgfHxcbiAgICAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgZWxlbWVudC50eXBlID09PSAnYnV0dG9uJykgfHxcbiAgICByb2xlcy5pbmNsdWRlcygnYnV0dG9uJyk7XG5cbiAgY29uc3QgcHJlc3NlZEF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnKTtcblxuICBjb25zdCBpc1ZhbGlkQXJpYUVsZW1lbnQgPVxuICAgIHByZXNzZWRBdHRyaWJ1dGUgPT09ICd0cnVlJyB8fCBwcmVzc2VkQXR0cmlidXRlID09PSAnZmFsc2UnO1xuXG4gIGlmICghaXNCdXR0b24gfHwgIWlzVmFsaWRBcmlhRWxlbWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICgpID0+XG4gICAgICAgIGBPbmx5IGJ1dHRvbiBvciBpbnB1dCB3aXRoIHR5cGU9XCJidXR0b25cIiBvciBlbGVtZW50IHdpdGggcm9sZT1cImJ1dHRvblwiIGFuZCBhIHZhbGlkIGFyaWEtcHJlc3NlZCBhdHRyaWJ1dGUgY2FuIGJlIHVzZWQgd2l0aCAudG9CZVByZXNzZWQoKWAsXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaXNQcmVzc2VkID0gcHJlc3NlZEF0dHJpYnV0ZSA9PT0gJ3RydWUnO1xuXG4gIHJldHVybiB7XG4gICAgcGFzczogaXNCdXR0b24gJiYgaXNQcmVzc2VkLFxuXG4gICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgY29uc3QgbWF0Y2hlciA9IHRoaXMudXRpbHMubWF0Y2hlckhpbnQoXG4gICAgICAgIGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZVByZXNzZWRgLFxuICAgICAgICAnZWxlbWVudCcsXG4gICAgICAgICcnLFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIGdldE1lc3NhZ2UoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIG1hdGNoZXIsXG4gICAgICAgIGBFeHBlY3RlZCBlbGVtZW50IHRvIGhhdmVgLFxuICAgICAgICBgYXJpYS1wcmVzc2VkPVwiJHt0aGlzLmlzTm90ID8gJ2ZhbHNlJyA6ICd0cnVlJ31cImAsXG4gICAgICAgIGBSZWNlaXZlZGAsXG4gICAgICAgIGBhcmlhLXByZXNzZWQ9XCIke3ByZXNzZWRBdHRyaWJ1dGV9XCJgLFxuICAgICAgKVxuICAgIH0sXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9CZVBhcnRpYWxseVByZXNzZWQoZWxlbWVudCkge1xuICBjaGVja0h0bWxFbGVtZW50KGVsZW1lbnQsIHRvQmVQYXJ0aWFsbHlQcmVzc2VkLCB0aGlzKTtcblxuICBjb25zdCByb2xlcyA9IChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpIHx8ICcnKVxuICAgIC5zcGxpdCgnICcpXG4gICAgLm1hcChyb2xlID0+IHJvbGUudHJpbSgpKTtcblxuICBjb25zdCBpc0J1dHRvbiA9XG4gICAgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdidXR0b24nIHx8XG4gICAgKGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIGVsZW1lbnQudHlwZSA9PT0gJ2J1dHRvbicpIHx8XG4gICAgcm9sZXMuaW5jbHVkZXMoJ2J1dHRvbicpO1xuXG4gIGNvbnN0IHByZXNzZWRBdHRyaWJ1dGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJyk7XG5cbiAgY29uc3QgaXNWYWxpZEFyaWFFbGVtZW50ID1cbiAgICBwcmVzc2VkQXR0cmlidXRlID09PSAndHJ1ZScgfHxcbiAgICBwcmVzc2VkQXR0cmlidXRlID09PSAnZmFsc2UnIHx8XG4gICAgcHJlc3NlZEF0dHJpYnV0ZSA9PT0gJ21peGVkJztcblxuICBpZiAoIWlzQnV0dG9uIHx8ICFpc1ZhbGlkQXJpYUVsZW1lbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGFzczogZmFsc2UsXG4gICAgICBtZXNzYWdlOiAoKSA9PlxuICAgICAgICBgT25seSBidXR0b24gb3IgaW5wdXQgd2l0aCB0eXBlPVwiYnV0dG9uXCIgb3IgZWxlbWVudCB3aXRoIHJvbGU9XCJidXR0b25cIiBhbmQgYSB2YWxpZCBhcmlhLXByZXNzZWQgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHdpdGggLnRvQmVQYXJ0aWFsbHlQcmVzc2VkKClgLFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGlzUGFydGlhbGx5UHJlc3NlZCA9IHByZXNzZWRBdHRyaWJ1dGUgPT09ICdtaXhlZCc7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXNzOiBpc0J1dHRvbiAmJiBpc1BhcnRpYWxseVByZXNzZWQsXG5cbiAgICBtZXNzYWdlOiAoKSA9PiB7XG4gICAgICBjb25zdCB0byA9IHRoaXMuaXNOb3QgPyAnbm90IHRvJyA6ICd0byc7XG5cbiAgICAgIGNvbnN0IG1hdGNoZXIgPSB0aGlzLnV0aWxzLm1hdGNoZXJIaW50KFxuICAgICAgICBgJHt0aGlzLmlzTm90ID8gJy5ub3QnIDogJyd9LnRvQmVQYXJ0aWFsbHlQcmVzc2VkYCxcbiAgICAgICAgJ2VsZW1lbnQnLFxuICAgICAgICAnJyxcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBnZXRNZXNzYWdlKFxuICAgICAgICB0aGlzLFxuICAgICAgICBtYXRjaGVyLFxuICAgICAgICBgRXhwZWN0ZWQgZWxlbWVudCAke3RvfSBoYXZlYCxcbiAgICAgICAgYGFyaWEtcHJlc3NlZD1cIm1peGVkXCJgLFxuICAgICAgICBgUmVjZWl2ZWRgLFxuICAgICAgICBgYXJpYS1wcmVzc2VkPVwiJHtwcmVzc2VkQXR0cmlidXRlfVwiYCxcbiAgICAgIClcbiAgICB9LFxuICB9XG59XG5cbnZhciBleHRlbnNpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIHRvQmVDaGVja2VkOiB0b0JlQ2hlY2tlZCxcbiAgdG9CZURpc2FibGVkOiB0b0JlRGlzYWJsZWQsXG4gIHRvQmVFbXB0eTogdG9CZUVtcHR5LFxuICB0b0JlRW1wdHlET01FbGVtZW50OiB0b0JlRW1wdHlET01FbGVtZW50LFxuICB0b0JlRW5hYmxlZDogdG9CZUVuYWJsZWQsXG4gIHRvQmVJblRoZURPTTogdG9CZUluVGhlRE9NLFxuICB0b0JlSW5UaGVEb2N1bWVudDogdG9CZUluVGhlRG9jdW1lbnQsXG4gIHRvQmVJbnZhbGlkOiB0b0JlSW52YWxpZCxcbiAgdG9CZVBhcnRpYWxseUNoZWNrZWQ6IHRvQmVQYXJ0aWFsbHlDaGVja2VkLFxuICB0b0JlUGFydGlhbGx5UHJlc3NlZDogdG9CZVBhcnRpYWxseVByZXNzZWQsXG4gIHRvQmVQcmVzc2VkOiB0b0JlUHJlc3NlZCxcbiAgdG9CZVJlcXVpcmVkOiB0b0JlUmVxdWlyZWQsXG4gIHRvQmVWYWxpZDogdG9CZVZhbGlkLFxuICB0b0JlVmlzaWJsZTogdG9CZVZpc2libGUsXG4gIHRvQ29udGFpbkVsZW1lbnQ6IHRvQ29udGFpbkVsZW1lbnQsXG4gIHRvQ29udGFpbkhUTUw6IHRvQ29udGFpbkhUTUwsXG4gIHRvSGF2ZUFjY2Vzc2libGVEZXNjcmlwdGlvbjogdG9IYXZlQWNjZXNzaWJsZURlc2NyaXB0aW9uLFxuICB0b0hhdmVBY2Nlc3NpYmxlRXJyb3JNZXNzYWdlOiB0b0hhdmVBY2Nlc3NpYmxlRXJyb3JNZXNzYWdlLFxuICB0b0hhdmVBY2Nlc3NpYmxlTmFtZTogdG9IYXZlQWNjZXNzaWJsZU5hbWUsXG4gIHRvSGF2ZUF0dHJpYnV0ZTogdG9IYXZlQXR0cmlidXRlLFxuICB0b0hhdmVDbGFzczogdG9IYXZlQ2xhc3MsXG4gIHRvSGF2ZURlc2NyaXB0aW9uOiB0b0hhdmVEZXNjcmlwdGlvbixcbiAgdG9IYXZlRGlzcGxheVZhbHVlOiB0b0hhdmVEaXNwbGF5VmFsdWUsXG4gIHRvSGF2ZUVycm9yTWVzc2FnZTogdG9IYXZlRXJyb3JNZXNzYWdlLFxuICB0b0hhdmVGb2N1czogdG9IYXZlRm9jdXMsXG4gIHRvSGF2ZUZvcm1WYWx1ZXM6IHRvSGF2ZUZvcm1WYWx1ZXMsXG4gIHRvSGF2ZVJvbGU6IHRvSGF2ZVJvbGUsXG4gIHRvSGF2ZVNlbGVjdGlvbjogdG9IYXZlU2VsZWN0aW9uLFxuICB0b0hhdmVTdHlsZTogdG9IYXZlU3R5bGUsXG4gIHRvSGF2ZVRleHRDb250ZW50OiB0b0hhdmVUZXh0Q29udGVudCxcbiAgdG9IYXZlVmFsdWU6IHRvSGF2ZVZhbHVlXG59KTtcblxuZXhwb3J0cy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcbmV4cG9ydHMudG9CZUNoZWNrZWQgPSB0b0JlQ2hlY2tlZDtcbmV4cG9ydHMudG9CZURpc2FibGVkID0gdG9CZURpc2FibGVkO1xuZXhwb3J0cy50b0JlRW1wdHkgPSB0b0JlRW1wdHk7XG5leHBvcnRzLnRvQmVFbXB0eURPTUVsZW1lbnQgPSB0b0JlRW1wdHlET01FbGVtZW50O1xuZXhwb3J0cy50b0JlRW5hYmxlZCA9IHRvQmVFbmFibGVkO1xuZXhwb3J0cy50b0JlSW5UaGVET00gPSB0b0JlSW5UaGVET007XG5leHBvcnRzLnRvQmVJblRoZURvY3VtZW50ID0gdG9CZUluVGhlRG9jdW1lbnQ7XG5leHBvcnRzLnRvQmVJbnZhbGlkID0gdG9CZUludmFsaWQ7XG5leHBvcnRzLnRvQmVQYXJ0aWFsbHlDaGVja2VkID0gdG9CZVBhcnRpYWxseUNoZWNrZWQ7XG5leHBvcnRzLnRvQmVQYXJ0aWFsbHlQcmVzc2VkID0gdG9CZVBhcnRpYWxseVByZXNzZWQ7XG5leHBvcnRzLnRvQmVQcmVzc2VkID0gdG9CZVByZXNzZWQ7XG5leHBvcnRzLnRvQmVSZXF1aXJlZCA9IHRvQmVSZXF1aXJlZDtcbmV4cG9ydHMudG9CZVZhbGlkID0gdG9CZVZhbGlkO1xuZXhwb3J0cy50b0JlVmlzaWJsZSA9IHRvQmVWaXNpYmxlO1xuZXhwb3J0cy50b0NvbnRhaW5FbGVtZW50ID0gdG9Db250YWluRWxlbWVudDtcbmV4cG9ydHMudG9Db250YWluSFRNTCA9IHRvQ29udGFpbkhUTUw7XG5leHBvcnRzLnRvSGF2ZUFjY2Vzc2libGVEZXNjcmlwdGlvbiA9IHRvSGF2ZUFjY2Vzc2libGVEZXNjcmlwdGlvbjtcbmV4cG9ydHMudG9IYXZlQWNjZXNzaWJsZUVycm9yTWVzc2FnZSA9IHRvSGF2ZUFjY2Vzc2libGVFcnJvck1lc3NhZ2U7XG5leHBvcnRzLnRvSGF2ZUFjY2Vzc2libGVOYW1lID0gdG9IYXZlQWNjZXNzaWJsZU5hbWU7XG5leHBvcnRzLnRvSGF2ZUF0dHJpYnV0ZSA9IHRvSGF2ZUF0dHJpYnV0ZTtcbmV4cG9ydHMudG9IYXZlQ2xhc3MgPSB0b0hhdmVDbGFzcztcbmV4cG9ydHMudG9IYXZlRGVzY3JpcHRpb24gPSB0b0hhdmVEZXNjcmlwdGlvbjtcbmV4cG9ydHMudG9IYXZlRGlzcGxheVZhbHVlID0gdG9IYXZlRGlzcGxheVZhbHVlO1xuZXhwb3J0cy50b0hhdmVFcnJvck1lc3NhZ2UgPSB0b0hhdmVFcnJvck1lc3NhZ2U7XG5leHBvcnRzLnRvSGF2ZUZvY3VzID0gdG9IYXZlRm9jdXM7XG5leHBvcnRzLnRvSGF2ZUZvcm1WYWx1ZXMgPSB0b0hhdmVGb3JtVmFsdWVzO1xuZXhwb3J0cy50b0hhdmVSb2xlID0gdG9IYXZlUm9sZTtcbmV4cG9ydHMudG9IYXZlU2VsZWN0aW9uID0gdG9IYXZlU2VsZWN0aW9uO1xuZXhwb3J0cy50b0hhdmVTdHlsZSA9IHRvSGF2ZVN0eWxlO1xuZXhwb3J0cy50b0hhdmVUZXh0Q29udGVudCA9IHRvSGF2ZVRleHRDb250ZW50O1xuZXhwb3J0cy50b0hhdmVWYWx1ZSA9IHRvSGF2ZVZhbHVlO1xuIl0sInZlcnNpb24iOjN9