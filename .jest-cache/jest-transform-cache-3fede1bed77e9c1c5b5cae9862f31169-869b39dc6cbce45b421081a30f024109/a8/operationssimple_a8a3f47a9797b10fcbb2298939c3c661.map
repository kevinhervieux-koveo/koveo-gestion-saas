{"file":"/home/runner/workspace/shared/schemas/operations-simple.ts","mappings":";AAAA;;;GAGG;;;AAEH,6BAAwB;AAExB,yDAAyD;AAC5C,QAAA,kBAAkB,GAAG,OAAC,CAAC,MAAM,CAAC;IACzC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAC9B,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,WAAW,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IAClE,sBAAsB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACpD,qBAAqB,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACnD,WAAW,EAAE,OAAC;SACX,MAAM,EAAE;SACR,GAAG,CAAC,EAAE,EAAE,4CAA4C,CAAC;SACrD,GAAG,CAAC,IAAI,EAAE,6CAA6C,CAAC;IAC3D,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IACrC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACzC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;IACxC,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC;IACvC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAEU,QAAA,yBAAyB,GAAG,OAAC,CAAC,MAAM,CAAC;IAChD,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAC3B,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAC9B,WAAW,EAAE,OAAC;SACX,MAAM,EAAE;SACR,GAAG,CAAC,CAAC,EAAE,6BAA6B,CAAC;SACrC,GAAG,CAAC,IAAI,EAAE,yCAAyC,CAAC;IACvD,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAClC,UAAU,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;CACvC,CAAC,CAAC;AAEH,0DAA0D;AAC1D,MAAM,gBAAgB,GAAG,CAAC,aAAa,EAAE,WAAW,EAAE,aAAa,EAAE,OAAO,CAAU,CAAC;AACvF,MAAM,kBAAkB,GAAG;IACzB,OAAO;IACP,WAAW;IACX,cAAc;IACd,UAAU;IACV,aAAa;IACb,WAAW;IACX,UAAU;IACV,WAAW;CACH,CAAC;AAEE,QAAA,cAAc,GAAG,MAAM,CAAC,MAAM,CACzC,OAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,EACxB,EAAE,UAAU,EAAE,gBAAgB,EAAE,CACjC,CAAC;AAEW,QAAA,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAC3C,OAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAC1B,EAAE,UAAU,EAAE,kBAAkB,EAAE,CACnC,CAAC","names":[],"sources":["/home/runner/workspace/shared/schemas/operations-simple.ts"],"sourcesContent":["/**\n * @file Simplified Operations Schemas - for testing\n * @description Simplified schema exports without complex table dependencies\n */\n\nimport { z } from 'zod';\n\n// Simplified schemas for testing without complex imports\nexport const insertDemandSchema = z.object({\n  submitterId: z.string().uuid(),\n  type: z.enum(['maintenance', 'complaint', 'information', 'other']),\n  assignationResidenceId: z.string().uuid().optional(),\n  assignationBuildingId: z.string().uuid().optional(),\n  description: z\n    .string()\n    .min(10, 'Description must be at least 10 characters')\n    .max(2000, 'Description must not exceed 2000 characters'),\n  filePath: z.string().optional(),\n  fileName: z.string().optional(),\n  fileSize: z.number().int().optional(),\n  residenceId: z.string().uuid().optional(),\n  buildingId: z.string().uuid().optional(),\n  status: z.string().default('submitted'),\n  reviewNotes: z.string().optional(),\n});\n\nexport const insertDemandCommentSchema = z.object({\n  demandId: z.string().uuid(),\n  commenterId: z.string().uuid(),\n  commentText: z\n    .string()\n    .min(1, 'Comment content is required')\n    .max(1000, 'Comment must not exceed 1000 characters'),\n  commentType: z.string().optional(),\n  isInternal: z.boolean().default(false),\n});\n\n// Create enums with enumValues property like the original\nconst demandTypeValues = ['maintenance', 'complaint', 'information', 'other'] as const;\nconst demandStatusValues = [\n  'draft',\n  'submitted',\n  'under_review',\n  'approved',\n  'in_progress',\n  'completed',\n  'rejected',\n  'cancelled',\n] as const;\n\nexport const demandTypeEnum = Object.assign(\n  z.enum(demandTypeValues),\n  { enumValues: demandTypeValues }\n);\n\nexport const demandStatusEnum = Object.assign(\n  z.enum(demandStatusValues),\n  { enumValues: demandStatusValues }\n);\n\nexport type InsertDemand = z.infer<typeof insertDemandSchema>;\nexport type InsertDemandComment = z.infer<typeof insertDemandCommentSchema>;"],"version":3}