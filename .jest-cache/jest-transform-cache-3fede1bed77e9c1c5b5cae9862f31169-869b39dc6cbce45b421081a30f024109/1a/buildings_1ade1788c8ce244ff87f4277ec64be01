4dfdbfb269b9e22c7f3f4b391c293897
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerBuildingRoutes = registerBuildingRoutes;
const db_1 = require("../db");
const schema_1 = require("@shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const auth_1 = require("../auth");
const crypto_1 = __importDefault(require("crypto"));
/**
 * Handles creating or deleting residences when building totalUnits changes
 */
async function handleResidenceChanges(buildingId, organizationId, newTotalUnits, currentResidenceCount, totalFloors) {
    try {
        // Object storage hierarchy will be created automatically when documents are uploaded
        if (newTotalUnits > currentResidenceCount) {
            // Need to create more residences
            const residencesToCreate = newTotalUnits - currentResidenceCount;
            // Get existing residence numbers to avoid conflicts
            const existingResidences = await db_1.db
                .select({ unitNumber: schema_1.residences.unitNumber })
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId));
            const existingUnitNumbers = new Set(existingResidences.map((r) => r.unitNumber));
            const floors = totalFloors || 1;
            const unitsPerFloor = Math.ceil(newTotalUnits / floors);
            const newResidences = [];
            let unitCounter = 1;
            for (let residenceIndex = 0; residenceIndex < residencesToCreate; residenceIndex++) {
                // Find next available unit number
                while (existingUnitNumbers.has(unitCounter.toString())) {
                    unitCounter++;
                }
                const floor = Math.ceil(unitCounter / unitsPerFloor);
                const unitNumber = unitCounter.toString();
                newResidences.push({
                    buildingId,
                    unitNumber,
                    floor: floor,
                    isActive: true,
                });
                existingUnitNumbers.add(unitNumber);
                unitCounter++;
            }
            // Create residences in batch
            if (newResidences.length > 0) {
                const createdResidences = await db_1.db.insert(schema_1.residences).values(newResidences).returning();
                // Create object storage hierarchy for each new residence
                for (const residence of createdResidences) {
                    try {
                        // TODO: Object storage service integration
                        // await objectStorageService.createResidenceHierarchy(
                        //   organizationId,
                        //   buildingId,
                        //   residence.id
                        // );
                    }
                    catch (storageError) {
                        console.error(`‚ö†Ô∏è Error creating storage hierarchy for residence ${residence.id}:`, storageError);
                        // Don't fail the whole operation for storage errors
                    }
                }
                console.log(`‚úÖ Created ${createdResidences.length} new residences for building ${buildingId}`);
            }
        }
        else if (newTotalUnits < currentResidenceCount) {
            // Need to delete some residences
            const residencesToDelete = currentResidenceCount - newTotalUnits;
            console.log(`üìâ Marking ${residencesToDelete} residences as inactive for building ${buildingId}`);
            // Get residences that can be safely deleted (no active user relationships)
            const deletableResidences = await db_1.db
                .select({ id: schema_1.residences.id, unitNumber: schema_1.residences.unitNumber })
                .from(schema_1.residences)
                .leftJoin(schema_1.userResidences, (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true), (0, drizzle_orm_1.isNull)(schema_1.userResidences.id) // No active user relationships
            ))
                .orderBy((0, drizzle_orm_1.sql) `${schema_1.residences.unitNumber}::integer DESC`) // Delete highest unit numbers first
                .limit(residencesToDelete);
            if (deletableResidences.length > 0) {
                const residenceIdsToDelete = deletableResidences.map((r) => r.id);
                // Soft delete residences (mark as inactive)
                await db_1.db
                    .update(schema_1.residences)
                    .set({
                    isActive: false,
                    updatedAt: new Date(),
                })
                    .where((0, drizzle_orm_1.inArray)(schema_1.residences.id, residenceIdsToDelete));
                console.log(`‚úÖ Marked ${deletableResidences.length} residences as inactive for building ${buildingId}`);
                // Log which residences couldn't be deleted due to user relationships
                const protectedCount = residencesToDelete - deletableResidences.length;
                if (protectedCount > 0) {
                    console.log(`‚ö†Ô∏è Could not delete ${protectedCount} residences - they have active user relationships`);
                }
            }
            else {
            }
        }
        else {
            console.log(`‚úì No residence changes needed - building ${buildingId} already has ${currentResidenceCount} residences`);
        }
        // Don't throw the error to avoid breaking the building update
    }
    catch (error) {
        console.error('‚ùå Error updating residence count:', error);
        // Don't throw the error to avoid breaking the building update
    }
}
/**
 *
 * @param app
 */
/**
 * RegisterBuildingRoutes function.
 * @param app
 * @returns Function result.
 */
function registerBuildingRoutes(app) {
    /**
     * GET /api/buildings - Retrieves buildings based on user role and organization access.
     * Used by bills page and other components.
     *
     * Access Control Logic:
     * - Admin: Can see all buildings if they have global access, or buildings in their organizations
     * - Manager: Can see only buildings in their organizations
     * - Others: No access to buildings list.
     */
    app.get('/api/buildings', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Role-based access control for buildings
            if (![
                'admin',
                'manager',
                'demo_manager',
                'demo_tenant',
                'demo_resident',
                'tenant',
                'resident',
            ].includes(user.role)) {
                return res.status(403).json({
                    message: 'Access denied. Insufficient permissions.',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            console.log('üè¢ [Buildings API] User accessing buildings:', {
                id: user.id,
                role: user.role,
                organizations: user.organizations,
                canAccessAllOrganizations: user.canAccessAllOrganizations,
            });
            let buildingsQuery;
            if (user.role === 'admin' && user.canAccessAllOrganizations) {
                // Admin with global access can see all buildings
                buildingsQuery = db_1.db
                    .select({
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                    city: schema_1.buildings.city,
                    province: schema_1.buildings.province,
                    postalCode: schema_1.buildings.postalCode,
                    buildingType: schema_1.buildings.buildingType,
                    yearBuilt: schema_1.buildings.yearBuilt,
                    totalUnits: schema_1.buildings.totalUnits,
                    totalFloors: schema_1.buildings.totalFloors,
                    parkingSpaces: schema_1.buildings.parkingSpaces,
                    storageSpaces: schema_1.buildings.storageSpaces,
                    organizationId: schema_1.buildings.organizationId,
                    isActive: schema_1.buildings.isActive,
                    createdAt: schema_1.buildings.createdAt,
                    organizationName: schema_1.organizations.name,
                })
                    .from(schema_1.buildings)
                    .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                    .where((0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true))
                    .orderBy(schema_1.organizations.name, schema_1.buildings.name);
            }
            else {
                // Manager or admin without global access: only buildings from their organizations
                console.log(`üîç [BUILDINGS DEBUG] Taking ELSE path - User ${user.id} organizations:`, user.organizations);
                if (!user.organizations || user.organizations.length === 0) {
                    console.log(`üîç [BUILDINGS DEBUG] User ${user.id} has no organizations, checking residence access...`);
                    // For tenant/resident roles: Get buildings through their residences
                    if (['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(user.role)) {
                        const userResidencesList = await db_1.db
                            .select({
                            buildingId: schema_1.residences.buildingId,
                        })
                            .from(schema_1.userResidences)
                            .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, user.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
                        console.log(`üîç [BUILDINGS DEBUG] Found ${userResidencesList.length} residences for user ${user.id}`);
                        if (userResidencesList.length === 0) {
                            return res.json([]); // No residences = no buildings
                        }
                        const accessibleBuildingIds = [
                            ...new Set(userResidencesList.map((ur) => ur.buildingId)),
                        ];
                        console.log(`üîç [BUILDINGS DEBUG] Accessible building IDs:`, accessibleBuildingIds);
                        buildingsQuery = db_1.db
                            .select({
                            id: schema_1.buildings.id,
                            name: schema_1.buildings.name,
                            address: schema_1.buildings.address,
                            city: schema_1.buildings.city,
                            province: schema_1.buildings.province,
                            postalCode: schema_1.buildings.postalCode,
                            buildingType: schema_1.buildings.buildingType,
                            yearBuilt: schema_1.buildings.yearBuilt,
                            totalUnits: schema_1.buildings.totalUnits,
                            totalFloors: schema_1.buildings.totalFloors,
                            parkingSpaces: schema_1.buildings.parkingSpaces,
                            storageSpaces: schema_1.buildings.storageSpaces,
                            organizationId: schema_1.buildings.organizationId,
                            isActive: schema_1.buildings.isActive,
                            createdAt: schema_1.buildings.createdAt,
                            organizationName: schema_1.organizations.name,
                        })
                            .from(schema_1.buildings)
                            .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true), (0, drizzle_orm_1.inArray)(schema_1.buildings.id, accessibleBuildingIds)))
                            .orderBy(schema_1.organizations.name, schema_1.buildings.name);
                    }
                    else {
                        return res.json([]); // No organizations = no buildings for managers/admins
                    }
                }
                else {
                    // User has organizations - use organization-based access
                    buildingsQuery = db_1.db
                        .select({
                        id: schema_1.buildings.id,
                        name: schema_1.buildings.name,
                        address: schema_1.buildings.address,
                        city: schema_1.buildings.city,
                        province: schema_1.buildings.province,
                        postalCode: schema_1.buildings.postalCode,
                        buildingType: schema_1.buildings.buildingType,
                        yearBuilt: schema_1.buildings.yearBuilt,
                        totalUnits: schema_1.buildings.totalUnits,
                        totalFloors: schema_1.buildings.totalFloors,
                        parkingSpaces: schema_1.buildings.parkingSpaces,
                        storageSpaces: schema_1.buildings.storageSpaces,
                        organizationId: schema_1.buildings.organizationId,
                        isActive: schema_1.buildings.isActive,
                        createdAt: schema_1.buildings.createdAt,
                        organizationName: schema_1.organizations.name,
                    })
                        .from(schema_1.buildings)
                        .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true), (0, drizzle_orm_1.inArray)(schema_1.buildings.organizationId, user.organizations)))
                        .orderBy(schema_1.organizations.name, schema_1.buildings.name);
                }
            }
            const result = await buildingsQuery;
            res.json(result);
        }
        catch (error) {
            console.error('‚ùå Error fetching buildings:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to fetch buildings',
            });
        }
    });
    /**
     * GET /api/manager/buildings - Retrieves buildings based on user role and associations.
     *
     * Access Control Logic:
     * - Admin: Can see all buildings in their organization + buildings where they have residences
     * - Manager: Can see all buildings in their organization + buildings where they have residences
     * - Resident/Tenant: Can see only buildings where they have residences (role is not used, only residence links).
     */
    app.get('/api/manager/buildings', async (req, res) => {
        // Authentication check
        if (!req.session?.userId && !req.session?.user) {
            return res.status(401).json({
                message: 'Authentication required',
                code: 'AUTH_REQUIRED',
            });
        }
        try {
            // Use session data directly for now
            let currentUser = req.user || req.session?.user;
            // If we only have userId, we need to fetch the user
            if (!currentUser && req.session?.userId) {
                // Import storage from the auth route pattern
                const { storage } = await Promise.resolve().then(() => __importStar(require('../storage')));
                currentUser = await storage.getUser(req.session.userId);
            }
            if (!currentUser) {
                return res.status(401).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            console.log(`üìä Fetching buildings for user ${currentUser.id} with role ${currentUser.role}`);
            const accessibleBuildings = [];
            const buildingIds = new Set();
            // Check if user belongs to Koveo organization (special global access)
            const userOrgs = await db_1.db
                .select({
                organizationId: schema_1.userOrganizations.organizationId,
                organizationName: schema_1.organizations.name,
                canAccessAllOrganizations: schema_1.userOrganizations.canAccessAllOrganizations,
            })
                .from(schema_1.userOrganizations)
                .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.userOrganizations.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true)));
            const hasGlobalAccess = currentUser.role === 'admin' ||
                userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);
            if (hasGlobalAccess) {
                console.log(`üåü Admin user or user with global access detected - granting access to ALL buildings`);
                // Koveo users can see ALL buildings from ALL organizations
                const allBuildings = await db_1.db
                    .select({
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                    city: schema_1.buildings.city,
                    province: schema_1.buildings.province,
                    postalCode: schema_1.buildings.postalCode,
                    buildingType: schema_1.buildings.buildingType,
                    yearBuilt: schema_1.buildings.yearBuilt,
                    totalUnits: schema_1.buildings.totalUnits,
                    totalFloors: schema_1.buildings.totalFloors,
                    parkingSpaces: schema_1.buildings.parkingSpaces,
                    storageSpaces: schema_1.buildings.storageSpaces,
                    amenities: schema_1.buildings.amenities,
                    managementCompany: schema_1.buildings.managementCompany,
                    organizationId: schema_1.buildings.organizationId,
                    isActive: schema_1.buildings.isActive,
                    createdAt: schema_1.buildings.createdAt,
                    updatedAt: schema_1.buildings.updatedAt,
                    organizationName: schema_1.organizations.name,
                    organizationType: schema_1.organizations.type,
                })
                    .from(schema_1.buildings)
                    .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                    .where((0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true))
                    .orderBy(schema_1.organizations.name, schema_1.buildings.name);
                // Add all buildings with special Koveo access type
                allBuildings.forEach((building) => {
                    if (!buildingIds.has(building.id)) {
                        buildingIds.add(building.id);
                        accessibleBuildings.push({
                            ...building,
                            accessType: 'koveo-global', // Special access type for Koveo users
                        });
                    }
                });
            }
            else {
                // Regular users: For Admin and Manager roles: Get buildings from their organizations only
                if (currentUser.role === 'admin' || currentUser.role === 'manager') {
                    if (userOrgs.length > 0) {
                        const orgIds = userOrgs.map((uo) => uo.organizationId);
                        // Get all buildings from these organizations only
                        const orgBuildings = await db_1.db
                            .select({
                            id: schema_1.buildings.id,
                            name: schema_1.buildings.name,
                            address: schema_1.buildings.address,
                            city: schema_1.buildings.city,
                            province: schema_1.buildings.province,
                            postalCode: schema_1.buildings.postalCode,
                            buildingType: schema_1.buildings.buildingType,
                            yearBuilt: schema_1.buildings.yearBuilt,
                            totalUnits: schema_1.buildings.totalUnits,
                            totalFloors: schema_1.buildings.totalFloors,
                            parkingSpaces: schema_1.buildings.parkingSpaces,
                            storageSpaces: schema_1.buildings.storageSpaces,
                            amenities: schema_1.buildings.amenities,
                            managementCompany: schema_1.buildings.managementCompany,
                            organizationId: schema_1.buildings.organizationId,
                            isActive: schema_1.buildings.isActive,
                            createdAt: schema_1.buildings.createdAt,
                            updatedAt: schema_1.buildings.updatedAt,
                            organizationName: schema_1.organizations.name,
                            organizationType: schema_1.organizations.type,
                        })
                            .from(schema_1.buildings)
                            .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
                        orgBuildings.forEach((building) => {
                            if (!buildingIds.has(building.id)) {
                                buildingIds.add(building.id);
                                accessibleBuildings.push({
                                    ...building,
                                    accessType: 'organization', // Track how user has access
                                });
                            }
                        });
                    }
                }
            }
            // For ALL roles (Admin, Manager, Resident, Tenant): Get buildings from their residences
            // This is the many-to-many relationship - users can have residences in different buildings
            const userResidenceRecords = await db_1.db
                .select({
                residenceId: schema_1.userResidences.residenceId,
                relationshipType: schema_1.userResidences.relationshipType,
            })
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            if (userResidenceRecords.length > 0) {
                const residenceIds = userResidenceRecords.map((ur) => ur.residenceId);
                // Get buildings through residences
                const residenceBuildings = await db_1.db
                    .select({
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                    city: schema_1.buildings.city,
                    province: schema_1.buildings.province,
                    postalCode: schema_1.buildings.postalCode,
                    buildingType: schema_1.buildings.buildingType,
                    yearBuilt: schema_1.buildings.yearBuilt,
                    totalUnits: schema_1.buildings.totalUnits,
                    totalFloors: schema_1.buildings.totalFloors,
                    parkingSpaces: schema_1.buildings.parkingSpaces,
                    storageSpaces: schema_1.buildings.storageSpaces,
                    amenities: schema_1.buildings.amenities,
                    managementCompany: schema_1.buildings.managementCompany,
                    organizationId: schema_1.buildings.organizationId,
                    isActive: schema_1.buildings.isActive,
                    createdAt: schema_1.buildings.createdAt,
                    updatedAt: schema_1.buildings.updatedAt,
                    organizationName: schema_1.organizations.name,
                    organizationType: schema_1.organizations.type,
                    residenceId: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    floor: schema_1.residences.floor,
                })
                    .from(schema_1.residences)
                    .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                    .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.residences.id, residenceIds), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
                // Add residence-based buildings (avoid duplicates)
                residenceBuildings.forEach((building) => {
                    if (!buildingIds.has(building.id)) {
                        buildingIds.add(building.id);
                        accessibleBuildings.push({
                            id: building.id,
                            name: building.name,
                            address: building.address,
                            city: building.city,
                            province: building.province,
                            postalCode: building.postalCode,
                            buildingType: building.buildingType,
                            yearBuilt: building.yearBuilt,
                            totalUnits: building.totalUnits,
                            totalFloors: building.totalFloors,
                            parkingSpaces: building.parkingSpaces,
                            storageSpaces: building.storageSpaces,
                            amenities: building.amenities,
                            managementCompany: building.managementCompany,
                            organizationId: building.organizationId,
                            isActive: building.isActive,
                            createdAt: building.createdAt,
                            updatedAt: building.updatedAt,
                            organizationName: building.organizationName,
                            organizationType: building.organizationType,
                            accessType: 'residence', // Track how user has access
                            userResidence: {
                                residenceId: building.residenceId,
                                unitNumber: building.unitNumber,
                                floor: building.floor,
                            },
                        });
                    }
                    else {
                        // Building already exists, but we might want to add residence info
                        const existingBuilding = accessibleBuildings.find((b) => b.id === building.id);
                        if (existingBuilding && !existingBuilding.userResidence) {
                            existingBuilding.userResidence = {
                                residenceId: building.residenceId,
                                unitNumber: building.unitNumber,
                                floor: building.floor,
                            };
                            // Update access type if this is from both organization and residence
                            if (existingBuilding.accessType === 'organization') {
                                existingBuilding.accessType = 'both';
                            }
                        }
                    }
                });
            }
            // Get statistics for each building
            const buildingsWithStats = await Promise.all(accessibleBuildings.map(async (building) => {
                // Get residence count
                const residenceCount = await db_1.db
                    .select({ count: (0, drizzle_orm_1.sql) `count(*)::int` })
                    .from(schema_1.residences)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, building.id), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
                // Calculate occupancy rate
                const occupiedUnits = residenceCount[0]?.count || 0;
                const occupancyRate = building.totalUnits > 0 ? Math.round((occupiedUnits / building.totalUnits) * 100) : 0;
                return {
                    ...building,
                    statistics: {
                        totalUnits: building.totalUnits,
                        occupiedUnits,
                        occupancyRate,
                        vacantUnits: building.totalUnits - occupiedUnits,
                    },
                };
            }));
            // Sort buildings by name
            buildingsWithStats.sort((a, b) => a.name.localeCompare(b.name));
            console.log(`‚úÖ Found ${buildingsWithStats.length} accessible buildings for user ${currentUser.id}`);
            res.json({
                buildings: buildingsWithStats,
                meta: {
                    total: buildingsWithStats.length,
                    userRole: currentUser.role,
                    userId: currentUser.id,
                },
            });
        }
        catch (error) {
            console.error('‚ùå Error fetching manager buildings:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to fetch buildings',
            });
        }
    });
    /**
     * GET /api/manager/buildings/:id - Get a specific building with detailed information
     * Uses the same access control logic as the list endpoint.
     */
    app.get('/api/manager/buildings/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user;
            const buildingId = req.params.id;
            if (!currentUser) {
                return res.status(401).json({
                    _error: 'Unauthorized',
                    message: 'Authentication required',
                });
            }
            console.log(`üìä Fetching building ${buildingId} for user ${currentUser.id} with role ${currentUser.role}`);
            let hasAccess = false;
            let accessType = '';
            // Check if user belongs to Koveo organization (special global access)
            const userOrgs = await db_1.db
                .select({
                organizationId: schema_1.userOrganizations.organizationId,
                organizationName: schema_1.organizations.name,
                canAccessAllOrganizations: schema_1.userOrganizations.canAccessAllOrganizations,
            })
                .from(schema_1.userOrganizations)
                .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.userOrganizations.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true)));
            const hasGlobalAccess = currentUser.role === 'admin' ||
                userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);
            if (hasGlobalAccess) {
                hasAccess = true;
                accessType = 'global';
            }
            else {
                // Check organization-based access for Admin and Manager
                if (currentUser.role === 'admin' || currentUser.role === 'manager') {
                    if (userOrgs.length > 0) {
                        const orgIds = userOrgs.map((uo) => uo.organizationId);
                        // Check if building belongs to user's organizations
                        const buildingOrg = await db_1.db
                            .select({ id: schema_1.buildings.id })
                            .from(schema_1.buildings)
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId), (0, drizzle_orm_1.inArray)(schema_1.buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
                        if (buildingOrg.length > 0) {
                            hasAccess = true;
                            accessType = 'organization';
                        }
                    }
                }
            }
            // Check residence-based access for all roles
            if (!hasAccess) {
                const userResidenceAccess = await db_1.db
                    .select({ residenceId: schema_1.userResidences.residenceId })
                    .from(schema_1.userResidences)
                    .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
                if (userResidenceAccess.length > 0) {
                    hasAccess = true;
                    accessType = accessType ? 'both' : 'residence';
                }
            }
            if (!hasAccess) {
                return res.status(403).json({
                    _error: 'Forbidden',
                    message: 'You do not have access to this building',
                });
            }
            // Get building details
            const buildingData = await db_1.db
                .select({
                id: schema_1.buildings.id,
                name: schema_1.buildings.name,
                address: schema_1.buildings.address,
                city: schema_1.buildings.city,
                province: schema_1.buildings.province,
                postalCode: schema_1.buildings.postalCode,
                buildingType: schema_1.buildings.buildingType,
                yearBuilt: schema_1.buildings.yearBuilt,
                totalUnits: schema_1.buildings.totalUnits,
                totalFloors: schema_1.buildings.totalFloors,
                parkingSpaces: schema_1.buildings.parkingSpaces,
                storageSpaces: schema_1.buildings.storageSpaces,
                amenities: schema_1.buildings.amenities,
                managementCompany: schema_1.buildings.managementCompany,
                organizationId: schema_1.buildings.organizationId,
                isActive: schema_1.buildings.isActive,
                createdAt: schema_1.buildings.createdAt,
                updatedAt: schema_1.buildings.updatedAt,
                organizationName: schema_1.organizations.name,
                organizationType: schema_1.organizations.type,
                organizationAddress: schema_1.organizations.address,
                organizationCity: schema_1.organizations.city,
                organizationPhone: schema_1.organizations.phone,
                organizationEmail: schema_1.organizations.email,
            })
                .from(schema_1.buildings)
                .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId));
            if (buildingData.length === 0) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'Building not found',
                });
            }
            const building = buildingData[0];
            // Get all residences for this building
            const buildingResidences = await db_1.db
                .select({
                id: schema_1.residences.id,
                unitNumber: schema_1.residences.unitNumber,
                floor: schema_1.residences.floor,
                squareFootage: schema_1.residences.squareFootage,
                bedrooms: schema_1.residences.bedrooms,
                bathrooms: schema_1.residences.bathrooms,
                balcony: schema_1.residences.balcony,
                parkingSpaceNumbers: schema_1.residences.parkingSpaceNumbers,
                storageSpaceNumbers: schema_1.residences.storageSpaceNumbers,
                monthlyFees: schema_1.residences.monthlyFees,
                isActive: schema_1.residences.isActive,
            })
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
            // Get user's residences in this building if any
            let userResidencesInBuilding = [];
            const userResidenceRecords = await db_1.db
                .select({
                residenceId: schema_1.userResidences.residenceId,
                relationshipType: schema_1.userResidences.relationshipType,
                startDate: schema_1.userResidences.startDate,
                endDate: schema_1.userResidences.endDate,
            })
                .from(schema_1.userResidences)
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            if (userResidenceRecords.length > 0) {
                userResidencesInBuilding = userResidenceRecords.map((ur) => {
                    const residence = buildingResidences.find((r) => r.id === ur.residenceId);
                    return {
                        ...residence,
                        relationshipType: ur.relationshipType,
                        startDate: ur.startDate,
                        endDate: ur.endDate,
                    };
                });
            }
            // Calculate statistics
            const occupiedUnits = buildingResidences.length;
            const occupancyRate = building.totalUnits > 0 ? Math.round((occupiedUnits / building.totalUnits) * 100) : 0;
            res.json({
                ...building,
                accessType,
                statistics: {
                    totalUnits: building.totalUnits,
                    occupiedUnits,
                    occupancyRate,
                    vacantUnits: building.totalUnits - occupiedUnits,
                    totalResidences: buildingResidences.length,
                },
                userResidences: userResidencesInBuilding,
                // Only include full residence list for managers/admins
                residences: currentUser.role === 'admin' || currentUser.role === 'manager'
                    ? buildingResidences
                    : undefined,
            });
        }
        catch (error) {
            console.error('‚ùå Error fetching building details:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to fetch building details',
            });
        }
    });
    /**
     * POST /api/admin/buildings - Create a new building (Admin only).
     */
    app.post('/api/admin/buildings', auth_1.requireAuth, async (req, res) => {
        try {
            // Check if user is admin
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required',
                    code: 'ADMIN_REQUIRED',
                });
            }
            const buildingData = req.body;
            // Validate required fields
            if (!buildingData.name || !buildingData.organizationId) {
                return res.status(400).json({
                    _error: 'Validation error',
                    message: 'Building name and organization are required',
                });
            }
            // Create building with ID
            const buildingId = crypto_1.default.randomUUID();
            const newBuilding = await db_1.db
                .insert(schema_1.buildings)
                .values({
                id: buildingId,
                name: buildingData.name,
                address: buildingData.address || '',
                city: buildingData.city || '',
                province: buildingData.province || 'QC',
                postalCode: buildingData.postalCode || '',
                buildingType: buildingData.buildingType || 'condo',
                yearBuilt: buildingData.yearBuilt,
                totalUnits: buildingData.totalUnits || 0,
                totalFloors: buildingData.totalFloors,
                parkingSpaces: buildingData.parkingSpaces,
                storageSpaces: buildingData.storageSpaces,
                amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,
                managementCompany: buildingData.managementCompany,
                organizationId: buildingData.organizationId,
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date(),
            })
                .returning();
            // Building storage hierarchy will be created automatically when documents are uploaded
            console.log('Building created - storage hierarchy will be created on first document upload');
            // Auto-generate residences if totalUnits is specified and <= 300
            if (buildingData.totalUnits &&
                buildingData.totalUnits > 0 &&
                buildingData.totalUnits <= 300) {
                try {
                    const totalUnits = buildingData.totalUnits;
                    const totalFloors = buildingData.totalFloors || 1;
                    const unitsPerFloor = Math.ceil(totalUnits / totalFloors);
                    const residencesToCreate = [];
                    for (let unit = 1; unit <= totalUnits; unit++) {
                        const floor = Math.ceil(unit / unitsPerFloor);
                        const unitOnFloor = ((unit - 1) % unitsPerFloor) + 1;
                        const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;
                        residencesToCreate.push({
                            buildingId: buildingId,
                            unitNumber,
                            floor,
                            isActive: true,
                        });
                    }
                    // Insert all residences at once
                    const createdResidences = await db_1.db
                        .insert(schema_1.residences)
                        .values(residencesToCreate)
                        .returning();
                    console.log(`‚úÖ Auto-generated ${createdResidences.length} residences for building ${buildingId}`);
                    // TODO: Object storage service integration
                    // Create object storage hierarchy for each residence
                    // for (const residence of createdResidences) {
                    //   await objectStorageService.createResidenceHierarchy(
                    //     buildingData.organizationId,
                    //     buildingId,
                    //     residence.id
                    //   );
                    // }
                }
                catch (___residenceError) {
                    console.error('‚ö†Ô∏è Error auto-generating residences:', ___residenceError);
                    // Don't fail the building creation if residence generation fails
                }
            }
            res.status(201).json({
                message: 'Building created successfully',
                building: newBuilding[0],
            });
        }
        catch (error) {
            console.error('‚ùå Error creating building:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to create building',
            });
        }
    });
    /**
     * GET /api/buildings/:id/residences-for-deletion - Get list of residences that can be selected for deletion
     * Only admins can access this endpoint
     */
    app.get('/api/buildings/:id/residences-for-deletion', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const buildingId = req.params.id;
            const maxToSelect = parseInt(req.query.maxToSelect) || 10;
            if (!user) {
                return res.status(401).json({ message: 'Authentication required' });
            }
            // Only admins can delete residences
            if (user.role !== 'admin') {
                return res.status(403).json({ message: 'Only admins can access residence deletion options' });
            }
            const { getResidencesForSelection } = await Promise.resolve().then(() => __importStar(require('./buildings/operations')));
            const residencesToSelect = await getResidencesForSelection(buildingId, maxToSelect);
            res.json({
                residences: residencesToSelect,
                message: `Found ${residencesToSelect.length} residences available for deletion`
            });
        }
        catch (error) {
            console.error('‚ùå Error fetching residences for deletion:', error);
            res.status(500).json({ message: 'Failed to fetch residences for deletion' });
        }
    });
    /**
     * DELETE /api/buildings/:id/residences - Delete selected residences
     * Only admins can delete residences
     */
    app.delete('/api/buildings/:id/residences', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const buildingId = req.params.id;
            const { residenceIds } = req.body;
            if (!user) {
                return res.status(401).json({ message: 'Authentication required' });
            }
            // Only admins can delete residences
            if (user.role !== 'admin') {
                return res.status(403).json({ message: 'Only admins can delete residences' });
            }
            if (!Array.isArray(residenceIds) || residenceIds.length === 0) {
                return res.status(400).json({ message: 'residenceIds array is required' });
            }
            const { deleteSelectedResidences } = await Promise.resolve().then(() => __importStar(require('./buildings/operations')));
            const result = await deleteSelectedResidences(buildingId, residenceIds, user.role);
            res.json({
                success: true,
                deletedCount: result.deletedCount,
                documentsDeleted: result.documentsDeleted,
                message: `Successfully deleted ${result.deletedCount} residences and ${result.documentsDeleted} associated documents`
            });
        }
        catch (error) {
            console.error('‚ùå Error deleting residences:', error);
            res.status(500).json({ message: error.message || 'Failed to delete residences' });
        }
    });
    /**
     * PUT /api/admin/buildings/:id - Update a building (Admin and Manager).
     */
    app.put('/api/admin/buildings/:id', auth_1.requireAuth, async (req, res) => {
        try {
            // Check if user is admin or manager
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {
                return res.status(403).json({
                    message: 'Admin or Manager access required',
                    code: 'ADMIN_MANAGER_REQUIRED',
                });
            }
            const buildingId = req.params.id;
            const buildingData = req.body;
            // Validate required fields
            if (!buildingData.name || !buildingData.organizationId) {
                return res.status(400).json({
                    _error: 'Validation error',
                    message: 'Building name and organization are required',
                });
            }
            // Check if building exists
            const existingBuilding = await db_1.db
                .select()
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
                .limit(1);
            if (existingBuilding.length === 0) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'Building not found',
                });
            }
            // Check current number of active residences
            const currentResidences = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(*)::int` })
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
            const currentResidenceCount = currentResidences[0]?.count || 0;
            const newTotalUnits = buildingData.totalUnits || 0;
            const previousTotalUnits = existingBuilding[0].totalUnits || 0;
            console.log(`üîÑ Building ${buildingId}: ${previousTotalUnits} ‚Üí ${newTotalUnits} units (currently has ${currentResidenceCount} active residences)`);
            // Update building
            const updatedBuilding = await db_1.db
                .update(schema_1.buildings)
                .set({
                name: buildingData.name,
                address: buildingData.address || '',
                city: buildingData.city || '',
                province: buildingData.province || 'QC',
                postalCode: buildingData.postalCode || '',
                buildingType: buildingData.buildingType || 'condo',
                yearBuilt: buildingData.yearBuilt,
                totalUnits: newTotalUnits,
                totalFloors: buildingData.totalFloors,
                parkingSpaces: buildingData.parkingSpaces,
                storageSpaces: buildingData.storageSpaces,
                amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,
                managementCompany: buildingData.managementCompany,
                organizationId: buildingData.organizationId,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
                .returning();
            // Handle residence count changes with new admin-only functionality
            if (newTotalUnits !== previousTotalUnits) {
                console.log(`üè† Building units changed from ${previousTotalUnits} to ${newTotalUnits}, adjusting residences...`);
                // Only admins can adjust residence counts
                if (currentUser.role !== 'admin') {
                    return res.status(403).json({
                        message: 'Only admins can increase or decrease building residence counts',
                        code: 'ADMIN_REQUIRED_FOR_RESIDENCE_CHANGES',
                    });
                }
                const { adjustResidenceCount } = await Promise.resolve().then(() => __importStar(require('./buildings/operations')));
                const adjustmentResult = await adjustResidenceCount(buildingId, existingBuilding[0].organizationId, newTotalUnits, previousTotalUnits, buildingData.totalFloors || existingBuilding[0].totalFloors || 1);
                // If residences need to be decreased, return the selection list to user
                if (adjustmentResult.action === 'decreased' && adjustmentResult.residencesToSelect) {
                    return res.json({
                        message: 'Building updated, but residence count needs to be reduced',
                        buildingUpdated: true,
                        needsResidenceSelection: true,
                        residencesToSelect: adjustmentResult.residencesToSelect,
                        instruction: `Please select ${previousTotalUnits - newTotalUnits} residences to delete from the list provided. Use DELETE /api/buildings/${buildingId}/residences with the selected residence IDs.`
                    });
                }
            }
            res.json({
                message: 'Building updated successfully',
                building: updatedBuilding[0],
            });
        }
        catch (error) {
            console.error('‚ùå Error updating building:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to update building',
            });
        }
    });
    /**
     * DELETE /api/admin/buildings/:id - Delete a building (Admin only).
     */
    app.delete('/api/admin/buildings/:id', auth_1.requireAuth, async (req, res) => {
        try {
            // Check if user is admin
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required',
                    code: 'ADMIN_REQUIRED',
                });
            }
            const buildingId = req.params.id;
            // Check if building exists
            const existingBuilding = await db_1.db
                .select()
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
                .limit(1);
            if (existingBuilding.length === 0) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'Building not found',
                });
            }
            // Soft delete by setting isActive to false
            await db_1.db
                .update(schema_1.buildings)
                .set({
                isActive: false,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId));
            // Object storage cleanup will be handled automatically
            console.log('Building deleted - storage cleanup will be handled automatically');
            res.json({
                message: 'Building deleted successfully',
            });
        }
        catch (error) {
            console.error('‚ùå Error deleting building:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to delete building',
            });
        }
    });
    /**
     * GET /api/admin/buildings/:id/deletion-impact - Get deletion impact analysis
     * Shows what will be deleted when removing a building.
     */
    app.get('/api/admin/buildings/:id/deletion-impact', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required',
                    code: 'ADMIN_REQUIRED',
                });
            }
            const buildingId = req.params.id;
            // Check if building exists
            const building = await db_1.db
                .select({ id: schema_1.buildings.id, name: schema_1.buildings.name })
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)))
                .limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'Building not found',
                });
            }
            // Count residences in this building
            const residencesCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
            // Count documents associated with this building or its residences
            const documentsCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                .from(schema_1.documents)
                .where((0, drizzle_orm_1.or)((0, drizzle_orm_1.eq)(schema_1.documents.buildingId, buildingId), (0, drizzle_orm_1.sql) `${schema_1.documents.residenceId} IN (SELECT id FROM residences WHERE building_id = ${buildingId})`));
            // Count users who will become orphaned (only have relationships with residences in this building)
            const potentialOrphansCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(distinct ${schema_1.userResidences.userId})` })
                .from(schema_1.userResidences)
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.userResidences.userId, schema_1.users.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema_1.users.isActive, true)));
            const impact = {
                building: building[0],
                residences: residencesCount[0]?.count || 0,
                documents: documentsCount[0]?.count || 0,
                potentialOrphanedUsers: potentialOrphansCount[0]?.count || 0,
            };
            res.json(impact);
        }
        catch (error) {
            console.error('‚ùå Error analyzing deletion impact:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to analyze deletion impact',
            });
        }
    });
    /**
     * DELETE /api/admin/buildings/:id/cascade - Cascade delete a building
     * Replaces the simple delete with cascading delete that removes residences and documents. Users are preserved for data safety.
     */
    app.delete('/api/admin/buildings/:id/cascade', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required',
                    code: 'ADMIN_REQUIRED',
                });
            }
            const buildingId = req.params.id;
            // Check if building exists
            const building = await db_1.db
                .select({ id: schema_1.buildings.id, name: schema_1.buildings.name })
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)))
                .limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'Building not found',
                });
            }
            // Start transaction for cascading delete
            await db_1.db.transaction(async (tx) => {
                // 1. Get all residences in this building
                const buildingResidences = await tx
                    .select({ id: schema_1.residences.id })
                    .from(schema_1.residences)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
                const residenceIds = buildingResidences.map((r) => r.id);
                if (residenceIds.length > 0) {
                    // 2. Delete documents associated with building or its residences
                    await tx
                        .delete(schema_1.documents)
                        .where((0, drizzle_orm_1.or)((0, drizzle_orm_1.eq)(schema_1.documents.buildingId, buildingId), (0, drizzle_orm_1.inArray)(schema_1.documents.residenceId, residenceIds)));
                    // 3. Soft delete user-residence relationships
                    await tx
                        .update(schema_1.userResidences)
                        .set({ isActive: false, updatedAt: new Date() })
                        .where((0, drizzle_orm_1.inArray)(schema_1.userResidences.residenceId, residenceIds));
                    // 4. DISABLED: User deletion prohibited for data safety
                    const orphanedUsers = await tx
                        .select({ id: schema_1.users.id })
                        .from(schema_1.users)
                        .leftJoin(schema_1.userOrganizations, (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userOrganizations.userId), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true)))
                        .leftJoin(schema_1.userResidences, (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userResidences.userId), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)))
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.isActive, true), (0, drizzle_orm_1.isNull)(schema_1.userOrganizations.userId), (0, drizzle_orm_1.isNull)(schema_1.userResidences.userId)));
                    if (orphanedUsers.length > 0) {
                        const orphanedUserIds = orphanedUsers.map((u) => u.id);
                        await tx
                            .update(schema_1.users)
                            .set({ isActive: false, updatedAt: new Date() })
                            .where((0, drizzle_orm_1.inArray)(schema_1.users.id, orphanedUserIds));
                    }
                    // 5. Soft delete residences
                    await tx
                        .update(schema_1.residences)
                        .set({ isActive: false, updatedAt: new Date() })
                        .where((0, drizzle_orm_1.inArray)(schema_1.residences.id, residenceIds));
                }
                else {
                    // Still delete documents associated directly with the building
                    await tx.delete(schema_1.documents).where((0, drizzle_orm_1.eq)(schema_1.documents.buildingId, buildingId));
                }
                // 6. Finally, soft delete the building
                await tx
                    .update(schema_1.buildings)
                    .set({ isActive: false, updatedAt: new Date() })
                    .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId));
            });
            // Clean up object storage hierarchy for the deleted building
            // Get organization ID from building before deletion
            const buildingOrg = await db_1.db
                .select({ organizationId: schema_1.buildings.organizationId })
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
                .limit(1);
            if (buildingOrg.length > 0) {
                // Object storage cleanup will be handled automatically
                console.log('Building deleted - storage cleanup will be handled automatically');
            }
            res.json({
                message: 'Building and related entities deleted successfully',
                deletedBuilding: building[0].name,
            });
        }
        catch (error) {
            console.error('‚ùå Error during cascade delete:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to delete building and related entities',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,