f58595e5ab7d00cc665af4a1f9b8d743
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleApiError = exports.toastUtils = void 0;
const use_toast_1 = require("@/hooks/use-toast");
/**
 * Common toast utilities for consistent error and success messaging.
 */
exports.toastUtils = {
    success: (title, description) => {
        (0, use_toast_1.toast)({
            title,
            description,
        });
    },
    error: (title, description) => {
        (0, use_toast_1.toast)({
            title,
            description,
            variant: 'destructive',
        });
    },
    // Common error patterns
    createError: (entity) => {
        (0, use_toast_1.toast)({
            title: 'Error',
            description: `Failed to create ${entity}`,
            variant: 'destructive',
        });
    },
    updateError: (entity) => {
        (0, use_toast_1.toast)({
            title: 'Error',
            description: `Failed to update ${entity}`,
            variant: 'destructive',
        });
    },
    deleteError: (entity) => {
        (0, use_toast_1.toast)({
            title: 'Error',
            description: `Failed to delete ${entity}`,
            variant: 'destructive',
        });
    },
    createSuccess: (entity) => {
        (0, use_toast_1.toast)({
            title: 'Success',
            description: `${entity} created successfully`,
        });
    },
    updateSuccess: (entity) => {
        (0, use_toast_1.toast)({
            title: 'Success',
            description: `${entity} updated successfully`,
        });
    },
    deleteSuccess: (entity) => {
        (0, use_toast_1.toast)({
            title: 'Success',
            description: `${entity} deleted successfully`,
        });
    },
};
/**
 * Handle API errors with automatic toast display.
 * @param error
 * @param fallbackMessage
 */
const handleApiError = (error, fallbackMessage = 'An error occurred') => {
    const message = error?.response?.data?.message || error?.message || fallbackMessage;
    exports.toastUtils.error('Error', message);
};
exports.handleApiError = handleApiError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2xpYi90b2FzdFV0aWxzLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUEwQztBQUUxQzs7R0FFRztBQUNVLFFBQUEsVUFBVSxHQUFHO0lBQ3hCLE9BQU8sRUFBRSxDQUFDLEtBQWEsRUFBRSxXQUFvQixFQUFFLEVBQUU7UUFDL0MsSUFBQSxpQkFBSyxFQUFDO1lBQ0osS0FBSztZQUNMLFdBQVc7U0FDWixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxFQUFFLENBQUMsS0FBYSxFQUFFLFdBQW9CLEVBQUUsRUFBRTtRQUM3QyxJQUFBLGlCQUFLLEVBQUM7WUFDSixLQUFLO1lBQ0wsV0FBVztZQUNYLE9BQU8sRUFBRSxhQUFhO1NBQ3ZCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsV0FBVyxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQUU7UUFDOUIsSUFBQSxpQkFBSyxFQUFDO1lBQ0osS0FBSyxFQUFFLE9BQU87WUFDZCxXQUFXLEVBQUUsb0JBQW9CLE1BQU0sRUFBRTtZQUN6QyxPQUFPLEVBQUUsYUFBYTtTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVyxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQUU7UUFDOUIsSUFBQSxpQkFBSyxFQUFDO1lBQ0osS0FBSyxFQUFFLE9BQU87WUFDZCxXQUFXLEVBQUUsb0JBQW9CLE1BQU0sRUFBRTtZQUN6QyxPQUFPLEVBQUUsYUFBYTtTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVyxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQUU7UUFDOUIsSUFBQSxpQkFBSyxFQUFDO1lBQ0osS0FBSyxFQUFFLE9BQU87WUFDZCxXQUFXLEVBQUUsb0JBQW9CLE1BQU0sRUFBRTtZQUN6QyxPQUFPLEVBQUUsYUFBYTtTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsYUFBYSxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQUU7UUFDaEMsSUFBQSxpQkFBSyxFQUFDO1lBQ0osS0FBSyxFQUFFLFNBQVM7WUFDaEIsV0FBVyxFQUFFLEdBQUcsTUFBTSx1QkFBdUI7U0FDOUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGFBQWEsRUFBRSxDQUFDLE1BQWMsRUFBRSxFQUFFO1FBQ2hDLElBQUEsaUJBQUssRUFBQztZQUNKLEtBQUssRUFBRSxTQUFTO1lBQ2hCLFdBQVcsRUFBRSxHQUFHLE1BQU0sdUJBQXVCO1NBQzlDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhLEVBQUUsQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUNoQyxJQUFBLGlCQUFLLEVBQUM7WUFDSixLQUFLLEVBQUUsU0FBUztZQUNoQixXQUFXLEVBQUUsR0FBRyxNQUFNLHVCQUF1QjtTQUM5QyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSSxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQVUsRUFBRSxlQUFlLEdBQUcsbUJBQW1CLEVBQUUsRUFBRTtJQUNsRixNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLElBQUksS0FBSyxFQUFFLE9BQU8sSUFBSSxlQUFlLENBQUM7SUFDcEYsa0JBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQUhXLFFBQUEsY0FBYyxrQkFHekIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2xpYi90b2FzdFV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvYXN0IH0gZnJvbSAnQC9ob29rcy91c2UtdG9hc3QnO1xuXG4vKipcbiAqIENvbW1vbiB0b2FzdCB1dGlsaXRpZXMgZm9yIGNvbnNpc3RlbnQgZXJyb3IgYW5kIHN1Y2Nlc3MgbWVzc2FnaW5nLlxuICovXG5leHBvcnQgY29uc3QgdG9hc3RVdGlscyA9IHtcbiAgc3VjY2VzczogKHRpdGxlOiBzdHJpbmcsIGRlc2NyaXB0aW9uPzogc3RyaW5nKSA9PiB7XG4gICAgdG9hc3Qoe1xuICAgICAgdGl0bGUsXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICB9KTtcbiAgfSxcblxuICBlcnJvcjogKHRpdGxlOiBzdHJpbmcsIGRlc2NyaXB0aW9uPzogc3RyaW5nKSA9PiB7XG4gICAgdG9hc3Qoe1xuICAgICAgdGl0bGUsXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXG4gICAgfSk7XG4gIH0sXG5cbiAgLy8gQ29tbW9uIGVycm9yIHBhdHRlcm5zXG4gIGNyZWF0ZUVycm9yOiAoZW50aXR5OiBzdHJpbmcpID0+IHtcbiAgICB0b2FzdCh7XG4gICAgICB0aXRsZTogJ0Vycm9yJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgRmFpbGVkIHRvIGNyZWF0ZSAke2VudGl0eX1gLFxuICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICB9KTtcbiAgfSxcblxuICB1cGRhdGVFcnJvcjogKGVudGl0eTogc3RyaW5nKSA9PiB7XG4gICAgdG9hc3Qoe1xuICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgICBkZXNjcmlwdGlvbjogYEZhaWxlZCB0byB1cGRhdGUgJHtlbnRpdHl9YCxcbiAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXG4gICAgfSk7XG4gIH0sXG5cbiAgZGVsZXRlRXJyb3I6IChlbnRpdHk6IHN0cmluZykgPT4ge1xuICAgIHRvYXN0KHtcbiAgICAgIHRpdGxlOiAnRXJyb3InLFxuICAgICAgZGVzY3JpcHRpb246IGBGYWlsZWQgdG8gZGVsZXRlICR7ZW50aXR5fWAsXG4gICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgIH0pO1xuICB9LFxuXG4gIGNyZWF0ZVN1Y2Nlc3M6IChlbnRpdHk6IHN0cmluZykgPT4ge1xuICAgIHRvYXN0KHtcbiAgICAgIHRpdGxlOiAnU3VjY2VzcycsXG4gICAgICBkZXNjcmlwdGlvbjogYCR7ZW50aXR5fSBjcmVhdGVkIHN1Y2Nlc3NmdWxseWAsXG4gICAgfSk7XG4gIH0sXG5cbiAgdXBkYXRlU3VjY2VzczogKGVudGl0eTogc3RyaW5nKSA9PiB7XG4gICAgdG9hc3Qoe1xuICAgICAgdGl0bGU6ICdTdWNjZXNzJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtlbnRpdHl9IHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5YCxcbiAgICB9KTtcbiAgfSxcblxuICBkZWxldGVTdWNjZXNzOiAoZW50aXR5OiBzdHJpbmcpID0+IHtcbiAgICB0b2FzdCh7XG4gICAgICB0aXRsZTogJ1N1Y2Nlc3MnLFxuICAgICAgZGVzY3JpcHRpb246IGAke2VudGl0eX0gZGVsZXRlZCBzdWNjZXNzZnVsbHlgLFxuICAgIH0pO1xuICB9LFxufTtcblxuLyoqXG4gKiBIYW5kbGUgQVBJIGVycm9ycyB3aXRoIGF1dG9tYXRpYyB0b2FzdCBkaXNwbGF5LlxuICogQHBhcmFtIGVycm9yXG4gKiBAcGFyYW0gZmFsbGJhY2tNZXNzYWdlXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVBcGlFcnJvciA9IChlcnJvcjogYW55LCBmYWxsYmFja01lc3NhZ2UgPSAnQW4gZXJyb3Igb2NjdXJyZWQnKSA9PiB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBlcnJvcj8ucmVzcG9uc2U/LmRhdGE/Lm1lc3NhZ2UgfHwgZXJyb3I/Lm1lc3NhZ2UgfHwgZmFsbGJhY2tNZXNzYWdlO1xuICB0b2FzdFV0aWxzLmVycm9yKCdFcnJvcicsIG1lc3NhZ2UpO1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==