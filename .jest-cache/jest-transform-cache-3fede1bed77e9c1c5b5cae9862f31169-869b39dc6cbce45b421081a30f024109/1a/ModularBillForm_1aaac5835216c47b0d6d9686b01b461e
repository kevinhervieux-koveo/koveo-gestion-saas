5853327edf0f07d42d1ea39a6b331915
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModularBillForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const badge_1 = require("@/components/ui/badge");
const tabs_1 = require("@/components/ui/tabs");
const card_1 = require("@/components/ui/card");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
const document_management_1 = require("@/components/document-management");
const GeminiBillExtractor_1 = require("./GeminiBillExtractor");
// Unified form schema (simplified from original)
const billFormSchema = zod_2.z.object({
    title: zod_2.z.string().min(1, 'Bill title is required').max(200, 'Title must be less than 200 characters'),
    description: zod_2.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_2.z.enum([
        'insurance',
        'maintenance',
        'salary',
        'utilities',
        'cleaning',
        'security',
        'landscaping',
        'professional_services',
        'administration',
        'repairs',
        'supplies',
        'taxes',
        'technology',
        'reserves',
        'other',
    ]),
    vendor: zod_2.z.string().max(150, 'Vendor name must be less than 150 characters').optional(),
    paymentType: zod_2.z.enum(['unique', 'recurrent']),
    schedulePayment: zod_2.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
    customPayments: zod_2.z.array(zod_2.z.object({
        amount: zod_2.z.string().min(1, 'Amount is required').refine((val) => {
            const num = parseFloat(val);
            return !isNaN(num) && num > 0 && num <= 999999.99;
        }, 'Amount must be between $0.01 and $999,999.99'),
        date: zod_2.z.string().min(1, 'Date is required').refine((val) => {
            return !isNaN(Date.parse(val));
        }, 'Date must be a valid date'),
        description: zod_2.z.string().optional()
    })).optional(),
    totalAmount: zod_2.z.string().min(1, 'Amount is required and must be a valid number').refine((val) => {
        const num = parseFloat(val);
        return !isNaN(num) && num > 0 && num <= 999999.99;
    }, 'Amount must be between $0.01 and $999,999.99'),
    startDate: zod_2.z.string().min(1, 'Start date is required').refine((val) => {
        return !isNaN(Date.parse(val));
    }, 'Start date must be a valid date'),
    endDate: zod_2.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return !isNaN(Date.parse(val));
    }, 'End date must be a valid date'),
    status: zod_2.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']),
    notes: zod_2.z.string().max(2000, 'Notes must be less than 2000 characters').optional(),
});
const BILL_CATEGORIES = [
    { value: 'utilities', label: 'Utilities' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'cleaning', label: 'Cleaning' },
    { value: 'security', label: 'Security' },
    { value: 'landscaping', label: 'Landscaping' },
    { value: 'professional_services', label: 'Professional Services' },
    { value: 'administration', label: 'Administration' },
    { value: 'repairs', label: 'Repairs' },
    { value: 'supplies', label: 'Supplies' },
    { value: 'taxes', label: 'Taxes' },
    { value: 'technology', label: 'Technology' },
    { value: 'salary', label: 'Salary' },
    { value: 'reserves', label: 'Reserves' },
    { value: 'other', label: 'Other' },
];
function ModularBillForm({ bill, onSuccess, onCancel, buildingId }) {
    const { t } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // State for AI extraction
    const [aiFile, setAiFile] = (0, react_1.useState)(null);
    const [isAiMode, setIsAiMode] = (0, react_1.useState)(false);
    const [aiExtractionData, setAiExtractionData] = (0, react_1.useState)(null);
    const [isExtracting, setIsExtracting] = (0, react_1.useState)(false);
    const [aiEnabled, setAiEnabled] = (0, react_1.useState)(true); // AI enabled by default for bills
    // State for manual document upload
    const [manualFile, setManualFile] = (0, react_1.useState)(null);
    const [customPayments, setCustomPayments] = (0, react_1.useState)([]);
    // Upload context for secure storage
    const uploadContext = {
        type: 'bills',
        organizationId: 'default', // Would be dynamic based on user's org
        buildingId,
        userRole: 'admin', // Would be dynamic based on user's role
        userId: 'current-user' // Would be dynamic based on current user
    };
    // Form setup
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(billFormSchema),
        defaultValues: {
            title: bill?.title || '',
            description: bill?.description || '',
            category: bill?.category || 'other',
            vendor: bill?.vendor || '',
            paymentType: bill?.paymentType || 'unique',
            schedulePayment: 'monthly',
            customPayments: [],
            totalAmount: bill?.totalAmount?.toString() || '',
            startDate: bill?.startDate || '',
            endDate: bill?.endDate || '',
            status: bill?.status || 'draft',
            notes: bill?.notes || '',
        }
    });
    const paymentType = form.watch('paymentType');
    const schedulePayment = form.watch('schedulePayment');
    // Handle AI extraction results
    const handleAiExtractionComplete = (data) => {
        // Handle loading state
        if (data.isLoading) {
            setIsExtracting(true);
            toast({
                title: 'AI Extraction Started',
                description: 'Processing your document... This may take a few seconds.',
            });
            return;
        }
        // Clear loading state
        setIsExtracting(false);
        if (data.success && data.formData) {
            setAiExtractionData(data.formData);
            // Auto-fill form with AI data
            Object.entries(data.formData).forEach(([key, value]) => {
                if (key === 'customPayments' && Array.isArray(value)) {
                    setCustomPayments(value);
                    form.setValue('customPayments', value);
                }
                else if (value && typeof value === 'string') {
                    form.setValue(key, value);
                }
            });
            toast({
                title: 'AI Extraction Complete',
                description: `Successfully extracted bill data with ${Math.round((data.confidence || 0.9) * 100)}% confidence`,
            });
        }
        else {
            toast({
                title: 'AI Extraction Failed',
                description: data.error || 'Failed to extract bill data',
                variant: 'destructive',
            });
        }
    };
    // Handle AI toggle
    const handleAiToggle = (enabled) => {
        setAiEnabled(enabled);
        if (!enabled) {
            setAiExtractionData(null);
            setIsExtracting(false);
        }
    };
    // Handle AI analysis completion
    const handleAiAnalysisComplete = (analysisData) => {
        if (analysisData.success) {
            setAiExtractionData(analysisData.extractedData);
            setIsExtracting(false);
            // Auto-populate form with extracted data
            if (analysisData.extractedData) {
                const data = analysisData.extractedData;
                if (data.title)
                    form.setValue('title', data.title);
                if (data.vendor)
                    form.setValue('vendor', data.vendor);
                if (data.amount)
                    form.setValue('totalAmount', data.amount.toString());
                if (data.category)
                    form.setValue('category', data.category);
                if (data.date)
                    form.setValue('startDate', data.date);
                if (data.description)
                    form.setValue('description', data.description);
            }
            toast({
                title: 'AI Analysis Complete',
                description: 'Bill data has been extracted and populated in the form.',
            });
        }
        else {
            setIsExtracting(false);
            toast({
                title: 'AI Analysis Failed',
                description: analysisData.error || 'Failed to analyze document',
                variant: 'destructive',
            });
        }
    };
    // Handle file upload from SharedUploader
    const handleFileUpload = (file, extractedText) => {
        if (file) {
            if (aiEnabled) {
                setAiFile(file);
                setIsAiMode(true);
                setIsExtracting(true);
            }
            else {
                setManualFile(file);
            }
        }
    };
    // Create/Update bill mutation
    const billMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const endpoint = bill ? `/api/bills/${bill.id}` : '/api/bills';
            const method = bill ? 'PUT' : 'POST';
            const billData = {
                ...data,
                buildingId: buildingId || bill?.buildingId,
                costs: [data.totalAmount], // Convert single amount to costs array
            };
            const response = await (0, queryClient_1.apiRequest)(method, endpoint, billData);
            const billResponse = await response.json();
            // Upload document if one was attached (either from AI extraction or manual entry)
            const fileToUpload = aiFile || manualFile;
            if (!bill && fileToUpload) {
                try {
                    console.log('[BILL FORM] Uploading document:', fileToUpload.name, 'for bill:', billResponse.id);
                    const formData = new FormData();
                    formData.append('document', fileToUpload);
                    const uploadResponse = await fetch(`/api/bills/${billResponse.id}/upload-document`, {
                        method: 'POST',
                        credentials: 'include',
                        body: formData,
                    });
                    if (!uploadResponse.ok) {
                        const errorText = await uploadResponse.text();
                        console.error('[BILL FORM] Upload failed with status:', uploadResponse.status, errorText);
                        throw new Error(`Upload failed: ${uploadResponse.status} ${errorText}`);
                    }
                    const uploadResult = await uploadResponse.json();
                    console.log('[BILL FORM] Document upload successful:', uploadResult);
                    // Update the bill response with the document information from the upload
                    if (uploadResult.bill) {
                        billResponse.filePath = uploadResult.bill.filePath;
                        billResponse.fileName = uploadResult.bill.fileName;
                        billResponse.fileSize = uploadResult.bill.fileSize;
                        billResponse.isAiAnalyzed = uploadResult.bill.isAiAnalyzed;
                        billResponse.aiAnalysisData = uploadResult.bill.aiAnalysisData;
                    }
                    // Show success toast for document upload
                    toast({
                        title: 'Document Uploaded',
                        description: `${fileToUpload.name} has been attached to the bill`,
                    });
                }
                catch (uploadError) {
                    console.error('[BILL FORM] Failed to upload document:', uploadError);
                    toast({
                        title: 'Document Upload Failed',
                        description: `Failed to upload ${fileToUpload.name}. The bill was created but without the document.`,
                        variant: 'destructive',
                    });
                    // Don't fail the bill creation if document upload fails
                }
            }
            return billResponse;
        },
        onSuccess: (data) => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            toast({
                title: 'Success',
                description: `Bill ${bill ? 'updated' : 'created'} successfully`,
            });
            onSuccess?.(data.id, bill ? 'updated' : 'created');
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || `Failed to ${bill ? 'update' : 'create'} bill`,
                variant: 'destructive',
            });
        }
    });
    // Delete bill mutation
    const deleteBillMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            if (!bill?.id)
                throw new Error('No bill ID provided for deletion');
            return (0, queryClient_1.apiRequest)('DELETE', `/api/bills/${bill.id}`, null);
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            toast({
                title: 'Success',
                description: 'Bill deleted successfully',
            });
            onSuccess?.(bill.id, 'updated'); // Trigger parent refresh
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to delete bill',
                variant: 'destructive',
            });
        }
    });
    const onSubmit = (data) => {
        billMutation.mutate(data);
    };
    const handleDelete = () => {
        if (!bill)
            return;
        if (confirm(`Are you sure you want to delete bill "${bill.title}"? This action cannot be undone.`)) {
            deleteBillMutation.mutate();
        }
    };
    // Custom Payment Management
    const addCustomPayment = () => {
        const newPayment = { amount: '', date: '', description: '' };
        setCustomPayments([...customPayments, newPayment]);
    };
    const removeCustomPayment = (index) => {
        const updated = customPayments.filter((_, i) => i !== index);
        setCustomPayments(updated);
        form.setValue('customPayments', updated);
    };
    const updateCustomPayment = (index, field, value) => {
        const updated = customPayments.map((payment, i) => i === index ? { ...payment, [field]: value } : payment);
        setCustomPayments(updated);
        form.setValue('customPayments', updated);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-semibold", children: bill ? 'Edit Bill' : 'Create New Bill' }), aiExtractionData && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "secondary", className: "flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-3 h-3" }), "AI Extracted"] }))] }), !bill && ((0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: "manual", className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: "grid w-full grid-cols-2", children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: "manual", "data-testid": "tab-manual", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-4 h-4 mr-2" }), "Manual Entry"] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: "ai", "data-testid": "tab-ai", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-4 h-4 mr-2" }), "AI Extraction"] })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "ai", className: "space-y-4", children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Sparkles, { className: "w-5 h-5" }), "Upload Bill Document"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: handleFileUpload, formType: "bills", uploadContext: uploadContext, aiAnalysisEnabled: aiEnabled, onAiToggle: handleAiToggle, onAiAnalysisComplete: handleAiAnalysisComplete, showAiToggle: true, allowedFileTypes: ['image/*', 'application/pdf'], maxFileSize: 25 }), isExtracting && ((0, jsx_runtime_1.jsxs)("div", { className: "mt-4 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg border border-blue-200 dark:border-blue-800", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600" }), (0, jsx_runtime_1.jsx)("span", { className: "text-blue-700 dark:text-blue-300 font-medium", children: "Extracting data from your document..." })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-blue-600 dark:text-blue-400 mt-1", children: "This may take a few seconds depending on document complexity." })] })), aiFile && ((0, jsx_runtime_1.jsx)(GeminiBillExtractor_1.GeminiBillExtractor, { file: aiFile, onExtractionComplete: handleAiExtractionComplete }))] })] }) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: "manual", className: "space-y-4", children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5" }), "Upload Document (Optional)"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(document_management_1.SharedUploader, { onDocumentChange: handleFileUpload, formType: "bills", uploadContext: uploadContext, aiAnalysisEnabled: false, showAiToggle: false, allowedFileTypes: ['image/*', 'application/pdf'], maxFileSize: 25 }) })] }) })] })), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "title", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Title *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "e.g., Monthly Electricity Bill", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "vendor", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Vendor" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "e.g., Hydro Quebec", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "category", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select category" }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: BILL_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "paymentType", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Type *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select payment type" }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "unique", children: "One-time Payment" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "recurrent", children: "Recurring Payment" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "totalAmount", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Total Amount *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "0.00", type: "number", step: "0.01", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "startDate", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Start Date *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: "date", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), paymentType === 'recurrent' && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "schedulePayment", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Payment Schedule" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select schedule" }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "weekly", children: "Weekly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "monthly", children: "Monthly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "quarterly", children: "Quarterly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "yearly", children: "Yearly" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "custom", children: "Custom Schedule" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), schedulePayment === 'custom' && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsx)("span", { children: "Custom Payment Schedule" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: addCustomPayment, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Add Payment"] })] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "space-y-3", children: customPayments.map((payment, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2 items-end", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Amount", type: "number", step: "0.01", value: payment.amount, onChange: (e) => updateCustomPayment(index, 'amount', e.target.value) }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: "date", value: payment.date, onChange: (e) => updateCustomPayment(index, 'date', e.target.value) }) }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Description", value: payment.description || '', onChange: (e) => updateCustomPayment(index, 'description', e.target.value) }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", size: "sm", onClick: () => removeCustomPayment(index), children: (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: "w-4 h-4" }) })] }, index))) })] }))] })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "description", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Additional details about this bill...", className: "min-h-[100px]", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "notes", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Notes" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Internal notes...", className: "min-h-[80px]", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("div", { children: bill && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "destructive", onClick: handleDelete, disabled: deleteBillMutation.isPending, children: deleteBillMutation.isPending ? 'Deleting...' : 'Delete Bill' })) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [onCancel && ((0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: onCancel, children: "Cancel" })), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: billMutation.isPending, children: billMutation.isPending ? 'Processing...' : (bill ? 'Update Bill' : 'Create Bill') })] })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9jbGllbnQvc3JjL2NvbXBvbmVudHMvYmlsbC1tYW5hZ2VtZW50L01vZHVsYXJCaWxsRm9ybS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzSEEsa0NBb29CQzs7QUExdkJELCtDQUFtRDtBQUNuRCxxREFBMEM7QUFDMUMsaURBQXNEO0FBQ3RELHVEQUFvRTtBQUNwRSw2QkFBd0I7QUFDeEIsbURBQWdEO0FBQ2hELGlEQUE4QztBQUM5Qyx1REFBb0Q7QUFDcEQsaURBQThDO0FBQzlDLCtDQUFnRjtBQUNoRiwrQ0FBZ0Y7QUFDaEYsK0NBUThCO0FBQzlCLG1EQU1nQztBQUNoQywrQ0FBcUU7QUFDckUsdURBQW1EO0FBQ25ELGlEQUE2QztBQUM3QyxtREFBK0M7QUFDL0MsMEVBQWtFO0FBQ2xFLCtEQUE0RDtBQUk1RCxpREFBaUQ7QUFDakQsTUFBTSxjQUFjLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUM5QixLQUFLLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHdDQUF3QyxDQUFDO0lBQ3JHLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSwrQ0FBK0MsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUM3RixRQUFRLEVBQUUsT0FBQyxDQUFDLElBQUksQ0FBQztRQUNmLFdBQVc7UUFDWCxhQUFhO1FBQ2IsUUFBUTtRQUNSLFdBQVc7UUFDWCxVQUFVO1FBQ1YsVUFBVTtRQUNWLGFBQWE7UUFDYix1QkFBdUI7UUFDdkIsZ0JBQWdCO1FBQ2hCLFNBQVM7UUFDVCxVQUFVO1FBQ1YsT0FBTztRQUNQLFlBQVk7UUFDWixVQUFVO1FBQ1YsT0FBTztLQUNSLENBQUM7SUFDRixNQUFNLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcs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LGFBQWEsRUFDckIsT0FBTyxFQUFFLFlBQVksRUFDckIsUUFBUSxFQUFFLGtCQUFrQixDQUFDLFNBQVMsWUFFckMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsR0FDdEQsQ0FDVixHQUNHLEVBR04saUNBQUssU0FBUyxFQUFDLFlBQVksYUFDeEIsUUFBUSxJQUFJLENBQ1gsdUJBQUMsZUFBTSxJQUFDLElBQUksRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxPQUFPLEVBQUUsUUFBUSx1QkFFaEQsQ0FDVixFQUNELHVCQUFDLGVBQU0sSUFBQyxJQUFJLEVBQUMsUUFBUSxFQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsU0FBUyxZQUNuRCxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUMzRSxJQUNMLElBQ0YsSUFDRCxHQUNGLElBQ0gsQ0FDUCxDQUFDO0FBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2NsaWVudC9zcmMvY29tcG9uZW50cy9iaWxsLW1hbmFnZW1lbnQvTW9kdWxhckJpbGxGb3JtLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuaW1wb3J0IHsgem9kUmVzb2x2ZXIgfSBmcm9tICdAaG9va2Zvcm0vcmVzb2x2ZXJzL3pvZCc7XG5pbXBvcnQgeyB1c2VNdXRhdGlvbiwgdXNlUXVlcnlDbGllbnQgfSBmcm9tICdAdGFuc3RhY2svcmVhY3QtcXVlcnknO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2lucHV0JztcbmltcG9ydCB7IFRleHRhcmVhIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3RleHRhcmVhJztcbmltcG9ydCB7IEJhZGdlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2JhZGdlJztcbmltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XG5pbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2NhcmQnO1xuaW1wb3J0IHtcbiAgRm9ybSxcbiAgRm9ybUNvbnRyb2wsXG4gIEZvcm1GaWVsZCxcbiAgRm9ybUl0ZW0sXG4gIEZvcm1MYWJlbCxcbiAgRm9ybU1lc3NhZ2UsXG4gIEZvcm1EZXNjcmlwdGlvbixcbn0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2Zvcm0nO1xuaW1wb3J0IHtcbiAgU2VsZWN0LFxuICBTZWxlY3RDb250ZW50LFxuICBTZWxlY3RJdGVtLFxuICBTZWxlY3RUcmlnZ2VyLFxuICBTZWxlY3RWYWx1ZSxcbn0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlbGVjdCc7XG5pbXBvcnQgeyBGaWxlVGV4dCwgU3BhcmtsZXMsIFBsdXMsIFgsIENhbGVuZGFyIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbmltcG9ydCB7IHVzZUxhbmd1YWdlIH0gZnJvbSAnQC9ob29rcy91c2UtbGFuZ3VhZ2UnO1xuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICdAL2hvb2tzL3VzZS10b2FzdCc7XG5pbXBvcnQgeyBhcGlSZXF1ZXN0IH0gZnJvbSAnQC9saWIvcXVlcnlDbGllbnQnO1xuaW1wb3J0IHsgU2hhcmVkVXBsb2FkZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvZG9jdW1lbnQtbWFuYWdlbWVudCc7XG5pbXBvcnQgeyBHZW1pbmlCaWxsRXh0cmFjdG9yIH0gZnJvbSAnLi9HZW1pbmlCaWxsRXh0cmFjdG9yJztcbmltcG9ydCB0eXBlIHsgQmlsbCB9IGZyb20gJ0BzaGFyZWQvc2NoZW1hJztcbmltcG9ydCB0eXBlIHsgVXBsb2FkQ29udGV4dCB9IGZyb20gJ0BzaGFyZWQvY29uZmlnL3VwbG9hZC1jb25maWcnO1xuXG4vLyBVbmlmaWVkIGZvcm0gc2NoZW1hIChzaW1wbGlmaWVkIGZyb20gb3JpZ2luYWwpXG5jb25zdCBiaWxsRm9ybVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdGl0bGU6IHouc3RyaW5nKCkubWluKDEsICdCaWxsIHRpdGxlIGlzIHJlcXVpcmVkJykubWF4KDIwMCwgJ1RpdGxlIG11c3QgYmUgbGVzcyB0aGFuIDIwMCBjaGFyYWN0ZXJzJyksXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm1heCgxMDAwLCAnRGVzY3JpcHRpb24gbXVzdCBiZSBsZXNzIHRoYW4gMTAwMCBjaGFyYWN0ZXJzJykub3B0aW9uYWwoKSxcbiAgY2F0ZWdvcnk6IHouZW51bShbXG4gICAgJ2luc3VyYW5jZScsXG4gICAgJ21haW50ZW5hbmNlJyxcbiAgICAnc2FsYXJ5JyxcbiAgICAndXRpbGl0aWVzJyxcbiAgICAnY2xlYW5pbmcnLFxuICAgICdzZWN1cml0eScsXG4gICAgJ2xhbmRzY2FwaW5nJyxcbiAgICAncHJvZmVzc2lvbmFsX3NlcnZpY2VzJyxcbiAgICAnYWRtaW5pc3RyYXRpb24nLFxuICAgICdyZXBhaXJzJyxcbiAgICAnc3VwcGxpZXMnLFxuICAgICd0YXhlcycsXG4gICAgJ3RlY2hub2xvZ3knLFxuICAgICdyZXNlcnZlcycsXG4gICAgJ290aGVyJyxcbiAgXSksXG4gIHZlbmRvcjogei5zdHJpbmcoKS5tYXgoMTUwLCAnVmVuZG9yIG5hbWUgbXVzdCBiZSBsZXNzIHRoYW4gMTUwIGNoYXJhY3RlcnMnKS5vcHRpb25hbCgpLFxuICBwYXltZW50VHlwZTogei5lbnVtKFsndW5pcXVlJywgJ3JlY3VycmVudCddKSxcbiAgc2NoZWR1bGVQYXltZW50OiB6LmVudW0oWyd3ZWVrbHknLCAnbW9udGhseScsICdxdWFydGVybHknLCAneWVhcmx5JywgJ2N1c3RvbSddKS5vcHRpb25hbCgpLFxuICBjdXN0b21QYXltZW50czogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgYW1vdW50OiB6LnN0cmluZygpLm1pbigxLCAnQW1vdW50IGlzIHJlcXVpcmVkJykucmVmaW5lKCh2YWwpID0+IHtcbiAgICAgIGNvbnN0IG51bSA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICAgIHJldHVybiAhaXNOYU4obnVtKSAmJiBudW0gPiAwICYmIG51bSA8PSA5OTk5OTkuOTk7XG4gICAgfSwgJ0Ftb3VudCBtdXN0IGJlIGJldHdlZW4gJDAuMDEgYW5kICQ5OTksOTk5Ljk5JyksXG4gICAgZGF0ZTogei5zdHJpbmcoKS5taW4oMSwgJ0RhdGUgaXMgcmVxdWlyZWQnKS5yZWZpbmUoKHZhbCkgPT4ge1xuICAgICAgcmV0dXJuICFpc05hTihEYXRlLnBhcnNlKHZhbCkpO1xuICAgIH0sICdEYXRlIG11c3QgYmUgYSB2YWxpZCBkYXRlJyksXG4gICAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKVxuICB9KSkub3B0aW9uYWwoKSxcbiAgdG90YWxBbW91bnQ6IHouc3RyaW5nKCkubWluKDEsICdBbW91bnQgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSB2YWxpZCBudW1iZXInKS5yZWZpbmUoKHZhbCkgPT4ge1xuICAgIGNvbnN0IG51bSA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICByZXR1cm4gIWlzTmFOKG51bSkgJiYgbnVtID4gMCAmJiBudW0gPD0gOTk5OTk5Ljk5O1xuICB9LCAnQW1vdW50IG11c3QgYmUgYmV0d2VlbiAkMC4wMSBhbmQgJDk5OSw5OTkuOTknKSxcbiAgc3RhcnREYXRlOiB6LnN0cmluZygpLm1pbigxLCAnU3RhcnQgZGF0ZSBpcyByZXF1aXJlZCcpLnJlZmluZSgodmFsKSA9PiB7XG4gICAgcmV0dXJuICFpc05hTihEYXRlLnBhcnNlKHZhbCkpO1xuICB9LCAnU3RhcnQgZGF0ZSBtdXN0IGJlIGEgdmFsaWQgZGF0ZScpLFxuICBlbmREYXRlOiB6LnN0cmluZygpLm9wdGlvbmFsKCkucmVmaW5lKCh2YWwpID0+IHtcbiAgICBpZiAoIXZhbCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICFpc05hTihEYXRlLnBhcnNlKHZhbCkpO1xuICB9LCAnRW5kIGRhdGUgbXVzdCBiZSBhIHZhbGlkIGRhdGUnKSxcbiAgc3RhdHVzOiB6LmVudW0oWydkcmFmdCcsICdzZW50JywgJ292ZXJkdWUnLCAncGFpZCcsICdjYW5jZWxsZWQnXSksXG4gIG5vdGVzOiB6LnN0cmluZygpLm1heCgyMDAwLCAnTm90ZXMgbXVzdCBiZSBsZXNzIHRoYW4gMjAwMCBjaGFyYWN0ZXJzJykub3B0aW9uYWwoKSxcbn0pO1xuXG50eXBlIEJpbGxGb3JtRGF0YSA9IHouaW5mZXI8dHlwZW9mIGJpbGxGb3JtU2NoZW1hPjtcblxudHlwZSBDdXN0b21QYXltZW50ID0ge1xuICBhbW91bnQ6IHN0cmluZztcbiAgZGF0ZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn07XG5cbmludGVyZmFjZSBNb2R1bGFyQmlsbEZvcm1Qcm9wcyB7XG4gIGJpbGw/OiBCaWxsIHwgbnVsbDtcbiAgb25TdWNjZXNzPzogKGJpbGxJZDogc3RyaW5nLCBhY3Rpb246ICdjcmVhdGVkJyB8ICd1cGRhdGVkJykgPT4gdm9pZDtcbiAgb25DYW5jZWw/OiAoKSA9PiB2b2lkO1xuICBidWlsZGluZ0lkPzogc3RyaW5nO1xufVxuXG5jb25zdCBCSUxMX0NBVEVHT1JJRVMgPSBbXG4gIHsgdmFsdWU6ICd1dGlsaXRpZXMnLCBsYWJlbDogJ1V0aWxpdGllcycgfSxcbiAgeyB2YWx1ZTogJ21haW50ZW5hbmNlJywgbGFiZWw6ICdNYWludGVuYW5jZScgfSxcbiAgeyB2YWx1ZTogJ2luc3VyYW5jZScsIGxhYmVsOiAnSW5zdXJhbmNlJyB9LFxuICB7IHZhbHVlOiAnY2xlYW5pbmcnLCBsYWJlbDogJ0NsZWFuaW5nJyB9LFxuICB7IHZhbHVlOiAnc2VjdXJpdHknLCBsYWJlbDogJ1NlY3VyaXR5JyB9LFxuICB7IHZhbHVlOiAnbGFuZHNjYXBpbmcnLCBsYWJlbDogJ0xhbmRzY2FwaW5nJyB9LFxuICB7IHZhbHVlOiAncHJvZmVzc2lvbmFsX3NlcnZpY2VzJywgbGFiZWw6ICdQcm9mZXNzaW9uYWwgU2VydmljZXMnIH0sXG4gIHsgdmFsdWU6ICdhZG1pbmlzdHJhdGlvbicsIGxhYmVsOiAnQWRtaW5pc3RyYXRpb24nIH0sXG4gIHsgdmFsdWU6ICdyZXBhaXJzJywgbGFiZWw6ICdSZXBhaXJzJyB9LFxuICB7IHZhbHVlOiAnc3VwcGxpZXMnLCBsYWJlbDogJ1N1cHBsaWVzJyB9LFxuICB7IHZhbHVlOiAndGF4ZXMnLCBsYWJlbDogJ1RheGVzJyB9LFxuICB7IHZhbHVlOiAndGVjaG5vbG9neScsIGxhYmVsOiAnVGVjaG5vbG9neScgfSxcbiAgeyB2YWx1ZTogJ3NhbGFyeScsIGxhYmVsOiAnU2FsYXJ5JyB9LFxuICB7IHZhbHVlOiAncmVzZXJ2ZXMnLCBsYWJlbDogJ1Jlc2VydmVzJyB9LFxuICB7IHZhbHVlOiAnb3RoZXInLCBsYWJlbDogJ090aGVyJyB9LFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW9kdWxhckJpbGxGb3JtKHsgYmlsbCwgb25TdWNjZXNzLCBvbkNhbmNlbCwgYnVpbGRpbmdJZCB9OiBNb2R1bGFyQmlsbEZvcm1Qcm9wcykge1xuICBjb25zdCB7IHQgfSA9IHVzZUxhbmd1YWdlKCk7XG4gIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKTtcbiAgXG4gIC8vIFN0YXRlIGZvciBBSSBleHRyYWN0aW9uXG4gIGNvbnN0IFthaUZpbGUsIHNldEFpRmlsZV0gPSB1c2VTdGF0ZTxGaWxlIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtpc0FpTW9kZSwgc2V0SXNBaU1vZGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWlFeHRyYWN0aW9uRGF0YSwgc2V0QWlFeHRyYWN0aW9uRGF0YV0gPSB1c2VTdGF0ZTxhbnk+KG51bGwpO1xuICBjb25zdCBbaXNFeHRyYWN0aW5nLCBzZXRJc0V4dHJhY3RpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbYWlFbmFibGVkLCBzZXRBaUVuYWJsZWRdID0gdXNlU3RhdGUodHJ1ZSk7IC8vIEFJIGVuYWJsZWQgYnkgZGVmYXVsdCBmb3IgYmlsbHNcbiAgXG4gIC8vIFN0YXRlIGZvciBtYW51YWwgZG9jdW1lbnQgdXBsb2FkXG4gIGNvbnN0IFttYW51YWxGaWxlLCBzZXRNYW51YWxGaWxlXSA9IHVzZVN0YXRlPEZpbGUgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2N1c3RvbVBheW1lbnRzLCBzZXRDdXN0b21QYXltZW50c10gPSB1c2VTdGF0ZTxDdXN0b21QYXltZW50W10+KFtdKTtcbiAgXG4gIC8vIFVwbG9hZCBjb250ZXh0IGZvciBzZWN1cmUgc3RvcmFnZVxuICBjb25zdCB1cGxvYWRDb250ZXh0OiBVcGxvYWRDb250ZXh0ID0ge1xuICAgIHR5cGU6ICdiaWxscycsXG4gICAgb3JnYW5pemF0aW9uSWQ6ICdkZWZhdWx0JywgLy8gV291bGQgYmUgZHluYW1pYyBiYXNlZCBvbiB1c2VyJ3Mgb3JnXG4gICAgYnVpbGRpbmdJZCxcbiAgICB1c2VyUm9sZTogJ2FkbWluJywgLy8gV291bGQgYmUgZHluYW1pYyBiYXNlZCBvbiB1c2VyJ3Mgcm9sZVxuICAgIHVzZXJJZDogJ2N1cnJlbnQtdXNlcicgLy8gV291bGQgYmUgZHluYW1pYyBiYXNlZCBvbiBjdXJyZW50IHVzZXJcbiAgfTtcblxuICAvLyBGb3JtIHNldHVwXG4gIGNvbnN0IGZvcm0gPSB1c2VGb3JtPEJpbGxGb3JtRGF0YT4oe1xuICAgIHJlc29sdmVyOiB6b2RSZXNvbHZlcihiaWxsRm9ybVNjaGVtYSksXG4gICAgZGVmYXVsdFZhbHVlczoge1xuICAgICAgdGl0bGU6IGJpbGw/LnRpdGxlIHx8ICcnLFxuICAgICAgZGVzY3JpcHRpb246IGJpbGw/LmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgY2F0ZWdvcnk6IGJpbGw/LmNhdGVnb3J5IHx8ICdvdGhlcicsXG4gICAgICB2ZW5kb3I6IGJpbGw/LnZlbmRvciB8fCAnJyxcbiAgICAgIHBheW1lbnRUeXBlOiBiaWxsPy5wYXltZW50VHlwZSB8fCAndW5pcXVlJyxcbiAgICAgIHNjaGVkdWxlUGF5bWVudDogJ21vbnRobHknLFxuICAgICAgY3VzdG9tUGF5bWVudHM6IFtdLFxuICAgICAgdG90YWxBbW91bnQ6IGJpbGw/LnRvdGFsQW1vdW50Py50b1N0cmluZygpIHx8ICcnLFxuICAgICAgc3RhcnREYXRlOiBiaWxsPy5zdGFydERhdGUgfHwgJycsXG4gICAgICBlbmREYXRlOiBiaWxsPy5lbmREYXRlIHx8ICcnLFxuICAgICAgc3RhdHVzOiBiaWxsPy5zdGF0dXMgfHwgJ2RyYWZ0JyxcbiAgICAgIG5vdGVzOiBiaWxsPy5ub3RlcyB8fCAnJyxcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHBheW1lbnRUeXBlID0gZm9ybS53YXRjaCgncGF5bWVudFR5cGUnKTtcbiAgY29uc3Qgc2NoZWR1bGVQYXltZW50ID0gZm9ybS53YXRjaCgnc2NoZWR1bGVQYXltZW50Jyk7XG5cbiAgLy8gSGFuZGxlIEFJIGV4dHJhY3Rpb24gcmVzdWx0c1xuICBjb25zdCBoYW5kbGVBaUV4dHJhY3Rpb25Db21wbGV0ZSA9IChkYXRhOiBhbnkpID0+IHtcbiAgICAvLyBIYW5kbGUgbG9hZGluZyBzdGF0ZVxuICAgIGlmIChkYXRhLmlzTG9hZGluZykge1xuICAgICAgc2V0SXNFeHRyYWN0aW5nKHRydWUpO1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ0FJIEV4dHJhY3Rpb24gU3RhcnRlZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUHJvY2Vzc2luZyB5b3VyIGRvY3VtZW50Li4uIFRoaXMgbWF5IHRha2UgYSBmZXcgc2Vjb25kcy4nLFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIENsZWFyIGxvYWRpbmcgc3RhdGVcbiAgICBzZXRJc0V4dHJhY3RpbmcoZmFsc2UpO1xuICAgIFxuICAgIGlmIChkYXRhLnN1Y2Nlc3MgJiYgZGF0YS5mb3JtRGF0YSkge1xuICAgICAgc2V0QWlFeHRyYWN0aW9uRGF0YShkYXRhLmZvcm1EYXRhKTtcbiAgICAgIFxuICAgICAgLy8gQXV0by1maWxsIGZvcm0gd2l0aCBBSSBkYXRhXG4gICAgICBPYmplY3QuZW50cmllcyhkYXRhLmZvcm1EYXRhKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ2N1c3RvbVBheW1lbnRzJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHNldEN1c3RvbVBheW1lbnRzKHZhbHVlKTtcbiAgICAgICAgICBmb3JtLnNldFZhbHVlKCdjdXN0b21QYXltZW50cycsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZm9ybS5zZXRWYWx1ZShrZXkgYXMga2V5b2YgQmlsbEZvcm1EYXRhLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAnQUkgRXh0cmFjdGlvbiBDb21wbGV0ZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgU3VjY2Vzc2Z1bGx5IGV4dHJhY3RlZCBiaWxsIGRhdGEgd2l0aCAke01hdGgucm91bmQoKGRhdGEuY29uZmlkZW5jZSB8fCAwLjkpICogMTAwKX0lIGNvbmZpZGVuY2VgLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvYXN0KHtcbiAgICAgICAgdGl0bGU6ICdBSSBFeHRyYWN0aW9uIEZhaWxlZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmVycm9yIHx8ICdGYWlsZWQgdG8gZXh0cmFjdCBiaWxsIGRhdGEnLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEhhbmRsZSBBSSB0b2dnbGVcbiAgY29uc3QgaGFuZGxlQWlUb2dnbGUgPSAoZW5hYmxlZDogYm9vbGVhbikgPT4ge1xuICAgIHNldEFpRW5hYmxlZChlbmFibGVkKTtcbiAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgIHNldEFpRXh0cmFjdGlvbkRhdGEobnVsbCk7XG4gICAgICBzZXRJc0V4dHJhY3RpbmcoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgXG4gIC8vIEhhbmRsZSBBSSBhbmFseXNpcyBjb21wbGV0aW9uXG4gIGNvbnN0IGhhbmRsZUFpQW5hbHlzaXNDb21wbGV0ZSA9IChhbmFseXNpc0RhdGE6IGFueSkgPT4ge1xuICAgIGlmIChhbmFseXNpc0RhdGEuc3VjY2Vzcykge1xuICAgICAgc2V0QWlFeHRyYWN0aW9uRGF0YShhbmFseXNpc0RhdGEuZXh0cmFjdGVkRGF0YSk7XG4gICAgICBzZXRJc0V4dHJhY3RpbmcoZmFsc2UpO1xuICAgICAgXG4gICAgICAvLyBBdXRvLXBvcHVsYXRlIGZvcm0gd2l0aCBleHRyYWN0ZWQgZGF0YVxuICAgICAgaWYgKGFuYWx5c2lzRGF0YS5leHRyYWN0ZWREYXRhKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhbmFseXNpc0RhdGEuZXh0cmFjdGVkRGF0YTtcbiAgICAgICAgaWYgKGRhdGEudGl0bGUpIGZvcm0uc2V0VmFsdWUoJ3RpdGxlJywgZGF0YS50aXRsZSk7XG4gICAgICAgIGlmIChkYXRhLnZlbmRvcikgZm9ybS5zZXRWYWx1ZSgndmVuZG9yJywgZGF0YS52ZW5kb3IpO1xuICAgICAgICBpZiAoZGF0YS5hbW91bnQpIGZvcm0uc2V0VmFsdWUoJ3RvdGFsQW1vdW50JywgZGF0YS5hbW91bnQudG9TdHJpbmcoKSk7XG4gICAgICAgIGlmIChkYXRhLmNhdGVnb3J5KSBmb3JtLnNldFZhbHVlKCdjYXRlZ29yeScsIGRhdGEuY2F0ZWdvcnkpO1xuICAgICAgICBpZiAoZGF0YS5kYXRlKSBmb3JtLnNldFZhbHVlKCdzdGFydERhdGUnLCBkYXRhLmRhdGUpO1xuICAgICAgICBpZiAoZGF0YS5kZXNjcmlwdGlvbikgZm9ybS5zZXRWYWx1ZSgnZGVzY3JpcHRpb24nLCBkYXRhLmRlc2NyaXB0aW9uKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ0FJIEFuYWx5c2lzIENvbXBsZXRlJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdCaWxsIGRhdGEgaGFzIGJlZW4gZXh0cmFjdGVkIGFuZCBwb3B1bGF0ZWQgaW4gdGhlIGZvcm0uJyxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRJc0V4dHJhY3RpbmcoZmFsc2UpO1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ0FJIEFuYWx5c2lzIEZhaWxlZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBhbmFseXNpc0RhdGEuZXJyb3IgfHwgJ0ZhaWxlZCB0byBhbmFseXplIGRvY3VtZW50JyxcbiAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBIYW5kbGUgZmlsZSB1cGxvYWQgZnJvbSBTaGFyZWRVcGxvYWRlclxuICBjb25zdCBoYW5kbGVGaWxlVXBsb2FkID0gKGZpbGU6IEZpbGUgfCBudWxsLCBleHRyYWN0ZWRUZXh0Pzogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgIGlmIChmaWxlKSB7XG4gICAgICBpZiAoYWlFbmFibGVkKSB7XG4gICAgICAgIHNldEFpRmlsZShmaWxlKTtcbiAgICAgICAgc2V0SXNBaU1vZGUodHJ1ZSk7XG4gICAgICAgIHNldElzRXh0cmFjdGluZyh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldE1hbnVhbEZpbGUoZmlsZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIENyZWF0ZS9VcGRhdGUgYmlsbCBtdXRhdGlvblxuICBjb25zdCBiaWxsTXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKGRhdGE6IEJpbGxGb3JtRGF0YSkgPT4ge1xuICAgICAgY29uc3QgZW5kcG9pbnQgPSBiaWxsID8gYC9hcGkvYmlsbHMvJHtiaWxsLmlkfWAgOiAnL2FwaS9iaWxscyc7XG4gICAgICBjb25zdCBtZXRob2QgPSBiaWxsID8gJ1BVVCcgOiAnUE9TVCc7XG4gICAgICBcbiAgICAgIGNvbnN0IGJpbGxEYXRhID0ge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBidWlsZGluZ0lkOiBidWlsZGluZ0lkIHx8IGJpbGw/LmJ1aWxkaW5nSWQsXG4gICAgICAgIGNvc3RzOiBbZGF0YS50b3RhbEFtb3VudF0sIC8vIENvbnZlcnQgc2luZ2xlIGFtb3VudCB0byBjb3N0cyBhcnJheVxuICAgICAgfTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlSZXF1ZXN0KG1ldGhvZCwgZW5kcG9pbnQsIGJpbGxEYXRhKTtcbiAgICAgIGNvbnN0IGJpbGxSZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIFxuICAgICAgLy8gVXBsb2FkIGRvY3VtZW50IGlmIG9uZSB3YXMgYXR0YWNoZWQgKGVpdGhlciBmcm9tIEFJIGV4dHJhY3Rpb24gb3IgbWFudWFsIGVudHJ5KVxuICAgICAgY29uc3QgZmlsZVRvVXBsb2FkID0gYWlGaWxlIHx8IG1hbnVhbEZpbGU7XG4gICAgICBpZiAoIWJpbGwgJiYgZmlsZVRvVXBsb2FkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tCSUxMIEZPUk1dIFVwbG9hZGluZyBkb2N1bWVudDonLCBmaWxlVG9VcGxvYWQubmFtZSwgJ2ZvciBiaWxsOicsIGJpbGxSZXNwb25zZS5pZCk7XG4gICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2RvY3VtZW50JywgZmlsZVRvVXBsb2FkKTtcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCB1cGxvYWRSZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2JpbGxzLyR7YmlsbFJlc3BvbnNlLmlkfS91cGxvYWQtZG9jdW1lbnRgLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoIXVwbG9hZFJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCB1cGxvYWRSZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbQklMTCBGT1JNXSBVcGxvYWQgZmFpbGVkIHdpdGggc3RhdHVzOicsIHVwbG9hZFJlc3BvbnNlLnN0YXR1cywgZXJyb3JUZXh0KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVXBsb2FkIGZhaWxlZDogJHt1cGxvYWRSZXNwb25zZS5zdGF0dXN9ICR7ZXJyb3JUZXh0fWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCB1cGxvYWRSZXN1bHQgPSBhd2FpdCB1cGxvYWRSZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tCSUxMIEZPUk1dIERvY3VtZW50IHVwbG9hZCBzdWNjZXNzZnVsOicsIHVwbG9hZFJlc3VsdCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBiaWxsIHJlc3BvbnNlIHdpdGggdGhlIGRvY3VtZW50IGluZm9ybWF0aW9uIGZyb20gdGhlIHVwbG9hZFxuICAgICAgICAgIGlmICh1cGxvYWRSZXN1bHQuYmlsbCkge1xuICAgICAgICAgICAgYmlsbFJlc3BvbnNlLmZpbGVQYXRoID0gdXBsb2FkUmVzdWx0LmJpbGwuZmlsZVBhdGg7XG4gICAgICAgICAgICBiaWxsUmVzcG9uc2UuZmlsZU5hbWUgPSB1cGxvYWRSZXN1bHQuYmlsbC5maWxlTmFtZTtcbiAgICAgICAgICAgIGJpbGxSZXNwb25zZS5maWxlU2l6ZSA9IHVwbG9hZFJlc3VsdC5iaWxsLmZpbGVTaXplO1xuICAgICAgICAgICAgYmlsbFJlc3BvbnNlLmlzQWlBbmFseXplZCA9IHVwbG9hZFJlc3VsdC5iaWxsLmlzQWlBbmFseXplZDtcbiAgICAgICAgICAgIGJpbGxSZXNwb25zZS5haUFuYWx5c2lzRGF0YSA9IHVwbG9hZFJlc3VsdC5iaWxsLmFpQW5hbHlzaXNEYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTaG93IHN1Y2Nlc3MgdG9hc3QgZm9yIGRvY3VtZW50IHVwbG9hZFxuICAgICAgICAgIHRvYXN0KHtcbiAgICAgICAgICAgIHRpdGxlOiAnRG9jdW1lbnQgVXBsb2FkZWQnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGAke2ZpbGVUb1VwbG9hZC5uYW1lfSBoYXMgYmVlbiBhdHRhY2hlZCB0byB0aGUgYmlsbGAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKHVwbG9hZEVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW0JJTEwgRk9STV0gRmFpbGVkIHRvIHVwbG9hZCBkb2N1bWVudDonLCB1cGxvYWRFcnJvcik7XG4gICAgICAgICAgdG9hc3Qoe1xuICAgICAgICAgICAgdGl0bGU6ICdEb2N1bWVudCBVcGxvYWQgRmFpbGVkJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgRmFpbGVkIHRvIHVwbG9hZCAke2ZpbGVUb1VwbG9hZC5uYW1lfS4gVGhlIGJpbGwgd2FzIGNyZWF0ZWQgYnV0IHdpdGhvdXQgdGhlIGRvY3VtZW50LmAsXG4gICAgICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIERvbid0IGZhaWwgdGhlIGJpbGwgY3JlYXRpb24gaWYgZG9jdW1lbnQgdXBsb2FkIGZhaWxzXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIGJpbGxSZXNwb25zZTtcbiAgICB9LFxuICAgIG9uU3VjY2VzczogKGRhdGEpID0+IHtcbiAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHsgcXVlcnlLZXk6IFsnL2FwaS9iaWxscyddIH0pO1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ1N1Y2Nlc3MnLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEJpbGwgJHtiaWxsID8gJ3VwZGF0ZWQnIDogJ2NyZWF0ZWQnfSBzdWNjZXNzZnVsbHlgLFxuICAgICAgfSk7XG4gICAgICBvblN1Y2Nlc3M/LihkYXRhLmlkLCBiaWxsID8gJ3VwZGF0ZWQnIDogJ2NyZWF0ZWQnKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAnRXJyb3InLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB8fCBgRmFpbGVkIHRvICR7YmlsbCA/ICd1cGRhdGUnIDogJ2NyZWF0ZSd9IGJpbGxgLFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBEZWxldGUgYmlsbCBtdXRhdGlvblxuICBjb25zdCBkZWxldGVCaWxsTXV0YXRpb24gPSB1c2VNdXRhdGlvbih7XG4gICAgbXV0YXRpb25GbjogYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCFiaWxsPy5pZCkgdGhyb3cgbmV3IEVycm9yKCdObyBiaWxsIElEIHByb3ZpZGVkIGZvciBkZWxldGlvbicpO1xuICAgICAgcmV0dXJuIGFwaVJlcXVlc3QoJ0RFTEVURScsIGAvYXBpL2JpbGxzLyR7YmlsbC5pZH1gLCBudWxsKTtcbiAgICB9LFxuICAgIG9uU3VjY2VzczogKCkgPT4ge1xuICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoeyBxdWVyeUtleTogWycvYXBpL2JpbGxzJ10gfSk7XG4gICAgICB0b2FzdCh7XG4gICAgICAgIHRpdGxlOiAnU3VjY2VzcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQmlsbCBkZWxldGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICB9KTtcbiAgICAgIG9uU3VjY2Vzcz8uKGJpbGwhLmlkLCAndXBkYXRlZCcpOyAvLyBUcmlnZ2VyIHBhcmVudCByZWZyZXNoXG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgdG9hc3Qoe1xuICAgICAgICB0aXRsZTogJ0Vycm9yJyxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBkZWxldGUgYmlsbCcsXG4gICAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gKGRhdGE6IEJpbGxGb3JtRGF0YSkgPT4ge1xuICAgIGJpbGxNdXRhdGlvbi5tdXRhdGUoZGF0YSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRGVsZXRlID0gKCkgPT4ge1xuICAgIGlmICghYmlsbCkgcmV0dXJuO1xuICAgIFxuICAgIGlmIChjb25maXJtKGBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIGJpbGwgXCIke2JpbGwudGl0bGV9XCI/IFRoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmUuYCkpIHtcbiAgICAgIGRlbGV0ZUJpbGxNdXRhdGlvbi5tdXRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ3VzdG9tIFBheW1lbnQgTWFuYWdlbWVudFxuICBjb25zdCBhZGRDdXN0b21QYXltZW50ID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld1BheW1lbnQ6IEN1c3RvbVBheW1lbnQgPSB7IGFtb3VudDogJycsIGRhdGU6ICcnLCBkZXNjcmlwdGlvbjogJycgfTtcbiAgICBzZXRDdXN0b21QYXltZW50cyhbLi4uY3VzdG9tUGF5bWVudHMsIG5ld1BheW1lbnRdKTtcbiAgfTtcblxuICBjb25zdCByZW1vdmVDdXN0b21QYXltZW50ID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICBjb25zdCB1cGRhdGVkID0gY3VzdG9tUGF5bWVudHMuZmlsdGVyKChfLCBpKSA9PiBpICE9PSBpbmRleCk7XG4gICAgc2V0Q3VzdG9tUGF5bWVudHModXBkYXRlZCk7XG4gICAgZm9ybS5zZXRWYWx1ZSgnY3VzdG9tUGF5bWVudHMnLCB1cGRhdGVkKTtcbiAgfTtcblxuICBjb25zdCB1cGRhdGVDdXN0b21QYXltZW50ID0gKGluZGV4OiBudW1iZXIsIGZpZWxkOiBrZXlvZiBDdXN0b21QYXltZW50LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlZCA9IGN1c3RvbVBheW1lbnRzLm1hcCgocGF5bWVudCwgaSkgPT4gXG4gICAgICBpID09PSBpbmRleCA/IHsgLi4ucGF5bWVudCwgW2ZpZWxkXTogdmFsdWUgfSA6IHBheW1lbnRcbiAgICApO1xuICAgIHNldEN1c3RvbVBheW1lbnRzKHVwZGF0ZWQpO1xuICAgIGZvcm0uc2V0VmFsdWUoJ2N1c3RvbVBheW1lbnRzJywgdXBkYXRlZCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNlwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW5cIj5cbiAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtc2VtaWJvbGRcIj5cbiAgICAgICAgICB7YmlsbCA/ICdFZGl0IEJpbGwnIDogJ0NyZWF0ZSBOZXcgQmlsbCd9XG4gICAgICAgIDwvaDI+XG4gICAgICAgIHthaUV4dHJhY3Rpb25EYXRhICYmIChcbiAgICAgICAgICA8QmFkZ2UgdmFyaWFudD1cInNlY29uZGFyeVwiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0xXCI+XG4gICAgICAgICAgICA8U3BhcmtsZXMgY2xhc3NOYW1lPVwidy0zIGgtM1wiIC8+XG4gICAgICAgICAgICBBSSBFeHRyYWN0ZWRcbiAgICAgICAgICA8L0JhZGdlPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIHshYmlsbCAmJiAoXG4gICAgICAgIDxUYWJzIGRlZmF1bHRWYWx1ZT1cIm1hbnVhbFwiIGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgIDxUYWJzTGlzdCBjbGFzc05hbWU9XCJncmlkIHctZnVsbCBncmlkLWNvbHMtMlwiPlxuICAgICAgICAgICAgPFRhYnNUcmlnZ2VyIHZhbHVlPVwibWFudWFsXCIgZGF0YS10ZXN0aWQ9XCJ0YWItbWFudWFsXCI+XG4gICAgICAgICAgICAgIDxGaWxlVGV4dCBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTJcIiAvPlxuICAgICAgICAgICAgICBNYW51YWwgRW50cnlcbiAgICAgICAgICAgIDwvVGFic1RyaWdnZXI+XG4gICAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJhaVwiIGRhdGEtdGVzdGlkPVwidGFiLWFpXCI+XG4gICAgICAgICAgICAgIDxTcGFya2xlcyBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTJcIiAvPlxuICAgICAgICAgICAgICBBSSBFeHRyYWN0aW9uXG4gICAgICAgICAgICA8L1RhYnNUcmlnZ2VyPlxuICAgICAgICAgIDwvVGFic0xpc3Q+XG5cbiAgICAgICAgICA8VGFic0NvbnRlbnQgdmFsdWU9XCJhaVwiIGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgICAgPENhcmQ+XG4gICAgICAgICAgICAgIDxDYXJkSGVhZGVyPlxuICAgICAgICAgICAgICAgIDxDYXJkVGl0bGUgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICAgICAgICAgICAgICAgIDxTcGFya2xlcyBjbGFzc05hbWU9XCJ3LTUgaC01XCIgLz5cbiAgICAgICAgICAgICAgICAgIFVwbG9hZCBCaWxsIERvY3VtZW50XG4gICAgICAgICAgICAgICAgPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgIDxTaGFyZWRVcGxvYWRlclxuICAgICAgICAgICAgICAgICAgb25Eb2N1bWVudENoYW5nZT17aGFuZGxlRmlsZVVwbG9hZH1cbiAgICAgICAgICAgICAgICAgIGZvcm1UeXBlPVwiYmlsbHNcIlxuICAgICAgICAgICAgICAgICAgdXBsb2FkQ29udGV4dD17dXBsb2FkQ29udGV4dH1cbiAgICAgICAgICAgICAgICAgIGFpQW5hbHlzaXNFbmFibGVkPXthaUVuYWJsZWR9XG4gICAgICAgICAgICAgICAgICBvbkFpVG9nZ2xlPXtoYW5kbGVBaVRvZ2dsZX1cbiAgICAgICAgICAgICAgICAgIG9uQWlBbmFseXNpc0NvbXBsZXRlPXtoYW5kbGVBaUFuYWx5c2lzQ29tcGxldGV9XG4gICAgICAgICAgICAgICAgICBzaG93QWlUb2dnbGU9e3RydWV9XG4gICAgICAgICAgICAgICAgICBhbGxvd2VkRmlsZVR5cGVzPXtbJ2ltYWdlLyonLCAnYXBwbGljYXRpb24vcGRmJ119XG4gICAgICAgICAgICAgICAgICBtYXhGaWxlU2l6ZT17MjV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB7aXNFeHRyYWN0aW5nICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtNCBwLTQgYmctYmx1ZS01MCBkYXJrOmJnLWJsdWUtOTUwIHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ibHVlLTIwMCBkYXJrOmJvcmRlci1ibHVlLTgwMFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlLXNwaW4gcm91bmRlZC1mdWxsIGgtNCB3LTQgYm9yZGVyLWItMiBib3JkZXItYmx1ZS02MDBcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LWJsdWUtNzAwIGRhcms6dGV4dC1ibHVlLTMwMCBmb250LW1lZGl1bVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgRXh0cmFjdGluZyBkYXRhIGZyb20geW91ciBkb2N1bWVudC4uLlxuICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ibHVlLTYwMCBkYXJrOnRleHQtYmx1ZS00MDAgbXQtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgIFRoaXMgbWF5IHRha2UgYSBmZXcgc2Vjb25kcyBkZXBlbmRpbmcgb24gZG9jdW1lbnQgY29tcGxleGl0eS5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB7YWlGaWxlICYmIChcbiAgICAgICAgICAgICAgICAgIDxHZW1pbmlCaWxsRXh0cmFjdG9yXG4gICAgICAgICAgICAgICAgICAgIGZpbGU9e2FpRmlsZX1cbiAgICAgICAgICAgICAgICAgICAgb25FeHRyYWN0aW9uQ29tcGxldGU9e2hhbmRsZUFpRXh0cmFjdGlvbkNvbXBsZXRlfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgIDwvVGFic0NvbnRlbnQ+XG5cbiAgICAgICAgICA8VGFic0NvbnRlbnQgdmFsdWU9XCJtYW51YWxcIiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICA8Q2FyZEhlYWRlcj5cbiAgICAgICAgICAgICAgICA8Q2FyZFRpdGxlIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgICAgICAgICAgICAgICA8RmlsZVRleHQgY2xhc3NOYW1lPVwidy01IGgtNVwiIC8+XG4gICAgICAgICAgICAgICAgICBVcGxvYWQgRG9jdW1lbnQgKE9wdGlvbmFsKVxuICAgICAgICAgICAgICAgIDwvQ2FyZFRpdGxlPlxuICAgICAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICAgIDxDYXJkQ29udGVudD5cbiAgICAgICAgICAgICAgICA8U2hhcmVkVXBsb2FkZXJcbiAgICAgICAgICAgICAgICAgIG9uRG9jdW1lbnRDaGFuZ2U9e2hhbmRsZUZpbGVVcGxvYWR9XG4gICAgICAgICAgICAgICAgICBmb3JtVHlwZT1cImJpbGxzXCJcbiAgICAgICAgICAgICAgICAgIHVwbG9hZENvbnRleHQ9e3VwbG9hZENvbnRleHR9XG4gICAgICAgICAgICAgICAgICBhaUFuYWx5c2lzRW5hYmxlZD17ZmFsc2V9IC8vIERpc2FibGVkIGluIG1hbnVhbCBlbnRyeVxuICAgICAgICAgICAgICAgICAgc2hvd0FpVG9nZ2xlPXtmYWxzZX0gLy8gRG9uJ3Qgc2hvdyB0b2dnbGUgaW4gbWFudWFsIGVudHJ5XG4gICAgICAgICAgICAgICAgICBhbGxvd2VkRmlsZVR5cGVzPXtbJ2ltYWdlLyonLCAnYXBwbGljYXRpb24vcGRmJ119XG4gICAgICAgICAgICAgICAgICBtYXhGaWxlU2l6ZT17MjV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICA8L1RhYnNDb250ZW50PlxuICAgICAgICA8L1RhYnM+XG4gICAgICApfVxuXG4gICAgICB7LyogQmlsbCBGb3JtICovfVxuICAgICAgPEZvcm0gey4uLmZvcm19PlxuICAgICAgICA8Zm9ybSBvblN1Ym1pdD17Zm9ybS5oYW5kbGVTdWJtaXQob25TdWJtaXQpfSBjbGFzc05hbWU9XCJzcGFjZS15LTZcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgZ2FwLTRcIj5cbiAgICAgICAgICAgIHsvKiBUaXRsZSAqL31cbiAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgY29udHJvbD17Zm9ybS5jb250cm9sfVxuICAgICAgICAgICAgICBuYW1lPVwidGl0bGVcIlxuICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICA8Rm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUxhYmVsPlRpdGxlICo8L0Zvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiZS5nLiwgTW9udGhseSBFbGVjdHJpY2l0eSBCaWxsXCIgey4uLmZpZWxkfSAvPlxuICAgICAgICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTWVzc2FnZSAvPlxuICAgICAgICAgICAgICAgIDwvRm9ybUl0ZW0+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICB7LyogVmVuZG9yICovfVxuICAgICAgICAgICAgPEZvcm1GaWVsZFxuICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgIG5hbWU9XCJ2ZW5kb3JcIlxuICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICA8Rm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUxhYmVsPlZlbmRvcjwvRm9ybUxhYmVsPlxuICAgICAgICAgICAgICAgICAgPEZvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9XCJlLmcuLCBIeWRybyBRdWViZWNcIiB7Li4uZmllbGR9IC8+XG4gICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgPEZvcm1NZXNzYWdlIC8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtSXRlbT5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIHsvKiBDYXRlZ29yeSAqL31cbiAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgY29udHJvbD17Zm9ybS5jb250cm9sfVxuICAgICAgICAgICAgICBuYW1lPVwiY2F0ZWdvcnlcIlxuICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICA8Rm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUxhYmVsPkNhdGVnb3J5ICo8L0Zvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3Qgb25WYWx1ZUNoYW5nZT17ZmllbGQub25DaGFuZ2V9IHZhbHVlPXtmaWVsZC52YWx1ZX0+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0VHJpZ2dlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RWYWx1ZSBwbGFjZWhvbGRlcj1cIlNlbGVjdCBjYXRlZ29yeVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RUcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Q29udGVudD5cbiAgICAgICAgICAgICAgICAgICAgICB7QklMTF9DQVRFR09SSUVTLm1hcCgoY2F0ZWdvcnkpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIGtleT17Y2F0ZWdvcnkudmFsdWV9IHZhbHVlPXtjYXRlZ29yeS52YWx1ZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtjYXRlZ29yeS5sYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RDb250ZW50PlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8Rm9ybU1lc3NhZ2UgLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm1JdGVtPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgey8qIFBheW1lbnQgVHlwZSAqL31cbiAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgY29udHJvbD17Zm9ybS5jb250cm9sfVxuICAgICAgICAgICAgICBuYW1lPVwicGF5bWVudFR5cGVcIlxuICAgICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgICA8Rm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUxhYmVsPlBheW1lbnQgVHlwZSAqPC9Gb3JtTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG9uVmFsdWVDaGFuZ2U9e2ZpZWxkLm9uQ2hhbmdlfSB2YWx1ZT17ZmllbGQudmFsdWV9PlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFRyaWdnZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0VmFsdWUgcGxhY2Vob2xkZXI9XCJTZWxlY3QgcGF5bWVudCB0eXBlXCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFRyaWdnZXI+XG4gICAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RDb250ZW50PlxuICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIHZhbHVlPVwidW5pcXVlXCI+T25lLXRpbWUgUGF5bWVudDwvU2VsZWN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0SXRlbSB2YWx1ZT1cInJlY3VycmVudFwiPlJlY3VycmluZyBQYXltZW50PC9TZWxlY3RJdGVtPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTWVzc2FnZSAvPlxuICAgICAgICAgICAgICAgIDwvRm9ybUl0ZW0+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICB7LyogVG90YWwgQW1vdW50ICovfVxuICAgICAgICAgICAgPEZvcm1GaWVsZFxuICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgIG5hbWU9XCJ0b3RhbEFtb3VudFwiXG4gICAgICAgICAgICAgIHJlbmRlcj17KHsgZmllbGQgfSkgPT4gKFxuICAgICAgICAgICAgICAgIDxGb3JtSXRlbT5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTGFiZWw+VG90YWwgQW1vdW50ICo8L0Zvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiMC4wMFwiIHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMC4wMVwiIHsuLi5maWVsZH0gLz5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICA8Rm9ybU1lc3NhZ2UgLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm1JdGVtPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgey8qIFN0YXJ0IERhdGUgKi99XG4gICAgICAgICAgICA8Rm9ybUZpZWxkXG4gICAgICAgICAgICAgIGNvbnRyb2w9e2Zvcm0uY29udHJvbH1cbiAgICAgICAgICAgICAgbmFtZT1cInN0YXJ0RGF0ZVwiXG4gICAgICAgICAgICAgIHJlbmRlcj17KHsgZmllbGQgfSkgPT4gKFxuICAgICAgICAgICAgICAgIDxGb3JtSXRlbT5cbiAgICAgICAgICAgICAgICAgIDxGb3JtTGFiZWw+U3RhcnQgRGF0ZSAqPC9Gb3JtTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dCB0eXBlPVwiZGF0ZVwiIHsuLi5maWVsZH0gLz5cbiAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICA8Rm9ybU1lc3NhZ2UgLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm1JdGVtPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIHsvKiBSZWN1cnJpbmcgUGF5bWVudCBTY2hlZHVsZSAqL31cbiAgICAgICAgICB7cGF5bWVudFR5cGUgPT09ICdyZWN1cnJlbnQnICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS00XCI+XG4gICAgICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgICAgICBjb250cm9sPXtmb3JtLmNvbnRyb2x9XG4gICAgICAgICAgICAgICAgbmFtZT1cInNjaGVkdWxlUGF5bWVudFwiXG4gICAgICAgICAgICAgICAgcmVuZGVyPXsoeyBmaWVsZCB9KSA9PiAoXG4gICAgICAgICAgICAgICAgICA8Rm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgICAgIDxGb3JtTGFiZWw+UGF5bWVudCBTY2hlZHVsZTwvRm9ybUxhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0IG9uVmFsdWVDaGFuZ2U9e2ZpZWxkLm9uQ2hhbmdlfSB2YWx1ZT17ZmllbGQudmFsdWV9PlxuICAgICAgICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RUcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0VmFsdWUgcGxhY2Vob2xkZXI9XCJTZWxlY3Qgc2NoZWR1bGVcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RUcmlnZ2VyPlxuICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdENvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0SXRlbSB2YWx1ZT1cIndlZWtseVwiPldlZWtseTwvU2VsZWN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIHZhbHVlPVwibW9udGhseVwiPk1vbnRobHk8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0SXRlbSB2YWx1ZT1cInF1YXJ0ZXJseVwiPlF1YXJ0ZXJseTwvU2VsZWN0SXRlbT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RJdGVtIHZhbHVlPVwieWVhcmx5XCI+WWVhcmx5PC9TZWxlY3RJdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdEl0ZW0gdmFsdWU9XCJjdXN0b21cIj5DdXN0b20gU2NoZWR1bGU8L1NlbGVjdEl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RDb250ZW50PlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgPEZvcm1NZXNzYWdlIC8+XG4gICAgICAgICAgICAgICAgICA8L0Zvcm1JdGVtPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAge3NjaGVkdWxlUGF5bWVudCA9PT0gJ2N1c3RvbScgJiYgKFxuICAgICAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICAgICAgPENhcmRIZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgIDxDYXJkVGl0bGUgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q3VzdG9tIFBheW1lbnQgU2NoZWR1bGU8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17YWRkQ3VzdG9tUGF5bWVudH1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UGx1cyBjbGFzc05hbWU9XCJ3LTQgaC00IG1yLTJcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgQWRkIFBheW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkVGl0bGU+XG4gICAgICAgICAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPVwic3BhY2UteS0zXCI+XG4gICAgICAgICAgICAgICAgICAgIHtjdXN0b21QYXltZW50cy5tYXAoKHBheW1lbnQsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJmbGV4IGdhcC0yIGl0ZW1zLWVuZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBbW91bnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA9XCIwLjAxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cGF5bWVudC5hbW91bnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB1cGRhdGVDdXN0b21QYXltZW50KGluZGV4LCAnYW1vdW50JywgZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3BheW1lbnQuZGF0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHVwZGF0ZUN1c3RvbVBheW1lbnQoaW5kZXgsICdkYXRlJywgZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cGF5bWVudC5kZXNjcmlwdGlvbiB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHVwZGF0ZUN1c3RvbVBheW1lbnQoaW5kZXgsICdkZXNjcmlwdGlvbicsIGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiByZW1vdmVDdXN0b21QYXltZW50KGluZGV4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPFggY2xhc3NOYW1lPVwidy00IGgtNFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICA8L0NhcmRDb250ZW50PlxuICAgICAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG5cbiAgICAgICAgICB7LyogRGVzY3JpcHRpb24gKi99XG4gICAgICAgICAgPEZvcm1GaWVsZFxuICAgICAgICAgICAgY29udHJvbD17Zm9ybS5jb250cm9sfVxuICAgICAgICAgICAgbmFtZT1cImRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgIHJlbmRlcj17KHsgZmllbGQgfSkgPT4gKFxuICAgICAgICAgICAgICA8Rm9ybUl0ZW0+XG4gICAgICAgICAgICAgICAgPEZvcm1MYWJlbD5EZXNjcmlwdGlvbjwvRm9ybUxhYmVsPlxuICAgICAgICAgICAgICAgIDxGb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICAgIDxUZXh0YXJlYVxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFkZGl0aW9uYWwgZGV0YWlscyBhYm91dCB0aGlzIGJpbGwuLi5cIlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtaW4taC1bMTAwcHhdXCJcbiAgICAgICAgICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm1Db250cm9sPlxuICAgICAgICAgICAgICAgIDxGb3JtTWVzc2FnZSAvPlxuICAgICAgICAgICAgICA8L0Zvcm1JdGVtPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgey8qIE5vdGVzICovfVxuICAgICAgICAgIDxGb3JtRmllbGRcbiAgICAgICAgICAgIGNvbnRyb2w9e2Zvcm0uY29udHJvbH1cbiAgICAgICAgICAgIG5hbWU9XCJub3Rlc1wiXG4gICAgICAgICAgICByZW5kZXI9eyh7IGZpZWxkIH0pID0+IChcbiAgICAgICAgICAgICAgPEZvcm1JdGVtPlxuICAgICAgICAgICAgICAgIDxGb3JtTGFiZWw+Tm90ZXM8L0Zvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2w+XG4gICAgICAgICAgICAgICAgICA8VGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJJbnRlcm5hbCBub3Rlcy4uLlwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1pbi1oLVs4MHB4XVwiXG4gICAgICAgICAgICAgICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtQ29udHJvbD5cbiAgICAgICAgICAgICAgICA8Rm9ybU1lc3NhZ2UgLz5cbiAgICAgICAgICAgICAgPC9Gb3JtSXRlbT5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cblxuICAgICAgICAgIHsvKiBGb3JtIEFjdGlvbnMgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgIHsvKiBEZWxldGUgYnV0dG9uIG9uIHRoZSBsZWZ0IChvbmx5IGZvciBleGlzdGluZyBiaWxscykgKi99XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICB7YmlsbCAmJiAoXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiBcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBcbiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJkZXN0cnVjdGl2ZVwiIFxuICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRGVsZXRlfSBcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkZWxldGVCaWxsTXV0YXRpb24uaXNQZW5kaW5nfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtkZWxldGVCaWxsTXV0YXRpb24uaXNQZW5kaW5nID8gJ0RlbGV0aW5nLi4uJyA6ICdEZWxldGUgQmlsbCd9XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgey8qIENhbmNlbCBhbmQgU2F2ZS9VcGRhdGUgYnV0dG9ucyBvbiB0aGUgcmlnaHQgKi99XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZ2FwLTJcIj5cbiAgICAgICAgICAgICAge29uQ2FuY2VsICYmIChcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJidXR0b25cIiB2YXJpYW50PVwib3V0bGluZVwiIG9uQ2xpY2s9e29uQ2FuY2VsfT5cbiAgICAgICAgICAgICAgICAgIENhbmNlbFxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17YmlsbE11dGF0aW9uLmlzUGVuZGluZ30+XG4gICAgICAgICAgICAgICAge2JpbGxNdXRhdGlvbi5pc1BlbmRpbmcgPyAnUHJvY2Vzc2luZy4uLicgOiAoYmlsbCA/ICdVcGRhdGUgQmlsbCcgOiAnQ3JlYXRlIEJpbGwnKX1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufSJdLCJ2ZXJzaW9uIjozfQ==