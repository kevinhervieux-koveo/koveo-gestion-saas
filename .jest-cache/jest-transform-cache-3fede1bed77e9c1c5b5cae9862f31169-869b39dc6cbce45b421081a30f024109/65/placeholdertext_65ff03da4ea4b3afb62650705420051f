50ad6dbeb60a78ec8370ff6e0ca78274
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByPlaceholderText = exports.queryAllByPlaceholderText = exports.getByPlaceholderText = exports.getAllByPlaceholderText = exports.findByPlaceholderText = exports.findAllByPlaceholderText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByPlaceholderText = (...args) => {
    (0, _helpers.checkContainerType)(args[0]);
    return (0, _allUtils.queryAllByAttribute)('placeholder', ...args);
};
const getMultipleError = (c, text) => `Found multiple elements with the placeholder text of: ${text}`;
const getMissingError = (c, text) => `Unable to find an element with the placeholder text of: ${text}`;
const queryAllByPlaceholderTextWithSuggestions = exports.queryAllByPlaceholderText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByPlaceholderText, queryAllByPlaceholderText.name, 'queryAll');
const [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = (0, _allUtils.buildQueries)(queryAllByPlaceholderText, getMultipleError, getMissingError);
exports.findByPlaceholderText = findByPlaceholderText;
exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL3BsYWNlaG9sZGVyLXRleHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLHNCQUFzQixHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsR0FBRyxPQUFPLENBQUMsb0JBQW9CLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxPQUFPLENBQUMsd0JBQXdCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDaE4sSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDaEQsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxNQUFNLHlCQUF5QixHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtJQUM1QyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxPQUFPLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGFBQWEsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQ3BFLENBQUMsQ0FBQztBQUNGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyx5REFBeUQsSUFBSSxFQUFFLENBQUM7QUFDdEcsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQywyREFBMkQsSUFBSSxFQUFFLENBQUM7QUFDdkcsTUFBTSx3Q0FBd0MsR0FBRyxPQUFPLENBQUMseUJBQXlCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLDRCQUE0QixDQUFDLENBQUMseUJBQXlCLEVBQUUseUJBQXlCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzVNLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSx1QkFBdUIsRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsRUFBRSxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyx5QkFBeUIsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUMzTixPQUFPLENBQUMscUJBQXFCLEdBQUcscUJBQXFCLENBQUM7QUFDdEQsT0FBTyxDQUFDLHdCQUF3QixHQUFHLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLENBQUMsdUJBQXVCLEdBQUcsdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxDQUFDLHNCQUFzQixHQUFHLHNCQUFzQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvcXVlcmllcy9wbGFjZWhvbGRlci10ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5nZXRCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMuZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLmZpbmRCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMuZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gdm9pZCAwO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSAoLi4uYXJncykgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShhcmdzWzBdKTtcbiAgcmV0dXJuICgwLCBfYWxsVXRpbHMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoJ3BsYWNlaG9sZGVyJywgLi4uYXJncyk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCB0ZXh0KSA9PiBgRm91bmQgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgcGxhY2Vob2xkZXIgdGV4dCBvZjogJHt0ZXh0fWA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdGV4dCkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgcGxhY2Vob2xkZXIgdGV4dCBvZjogJHt0ZXh0fWA7XG5jb25zdCBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0V2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCwgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dC5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlQbGFjZWhvbGRlclRleHQsIGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCwgZmluZEJ5UGxhY2Vob2xkZXJUZXh0XSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlQbGFjZWhvbGRlclRleHQgPSBmaW5kQnlQbGFjZWhvbGRlclRleHQ7XG5leHBvcnRzLmZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGZpbmRBbGxCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZ2V0QnlQbGFjZWhvbGRlclRleHQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQgPSBnZXRBbGxCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMucXVlcnlCeVBsYWNlaG9sZGVyVGV4dCA9IHF1ZXJ5QnlQbGFjZWhvbGRlclRleHQ7Il0sInZlcnNpb24iOjN9