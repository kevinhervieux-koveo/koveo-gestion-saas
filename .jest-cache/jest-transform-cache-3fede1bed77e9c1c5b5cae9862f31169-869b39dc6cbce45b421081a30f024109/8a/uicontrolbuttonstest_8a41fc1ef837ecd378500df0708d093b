e6f4728639a6b4c78ae01754b43972c1
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * UI Control Button Functionality Tests
 * Tests all UI control buttons (pagination, calendar navigation, filters, etc.)
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
describe('UI Control Buttons Functionality', () => {
    let queryClient;
    let user;
    beforeEach(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: { retry: false },
                mutations: { retry: false },
            },
        });
        user = user_event_1.default.setup();
        jest.clearAllMocks();
    });
    const renderWithProvider = (component) => {
        return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    describe('Pagination Control Buttons', () => {
        it('should handle pagination navigation', async () => {
            const mockSetPage = jest.fn();
            const currentPage = 2;
            const totalPages = 5;
            const MockPagination = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-previous-page", onClick: () => mockSetPage(currentPage - 1), disabled: currentPage <= 1, children: "Previous" }), [1, 2, 3, 4, 5].map(pageNum => ((0, jsx_runtime_1.jsx)("button", { "data-testid": `button-page-${pageNum}`, onClick: () => mockSetPage(pageNum), className: pageNum === currentPage ? 'active' : '', children: pageNum }, pageNum))), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-next-page", onClick: () => mockSetPage(currentPage + 1), disabled: currentPage >= totalPages, children: "Next" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockPagination, {}));
            const prevButton = react_2.screen.getByTestId('button-previous-page');
            const nextButton = react_2.screen.getByTestId('button-next-page');
            const page3Button = react_2.screen.getByTestId('button-page-3');
            expect(prevButton).toBeInTheDocument();
            expect(nextButton).toBeInTheDocument();
            expect(page3Button).toBeInTheDocument();
            await user.click(prevButton);
            expect(mockSetPage).toHaveBeenCalledWith(1);
            await user.click(nextButton);
            expect(mockSetPage).toHaveBeenCalledWith(3);
            await user.click(page3Button);
            expect(mockSetPage).toHaveBeenCalledWith(3);
        });
    });
    describe('Calendar Navigation Buttons', () => {
        it('should handle month navigation in calendar', async () => {
            const mockGoToPrevMonth = jest.fn();
            const mockGoToNextMonth = jest.fn();
            const MockCalendarNav = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "prev-month", onClick: mockGoToPrevMonth, children: "Previous Month" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "next-month", onClick: mockGoToNextMonth, children: "Next Month" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockCalendarNav, {}));
            const prevMonthButton = react_2.screen.getByTestId('prev-month');
            const nextMonthButton = react_2.screen.getByTestId('next-month');
            expect(prevMonthButton).toBeInTheDocument();
            expect(nextMonthButton).toBeInTheDocument();
            await user.click(prevMonthButton);
            expect(mockGoToPrevMonth).toHaveBeenCalled();
            await user.click(nextMonthButton);
            expect(mockGoToNextMonth).toHaveBeenCalled();
        });
    });
    describe('Calendar Feature Buttons', () => {
        it('should handle calendar linking and export functionality', async () => {
            const mockLinkCalendar = jest.fn();
            const mockExportCalendar = jest.fn();
            const mockCancelLink = jest.fn();
            const mockNextStep = jest.fn();
            const MockCalendarFeatures = () => {
                const [isLinking, setIsLinking] = react_1.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-link-calendar", onClick: () => {
                                mockLinkCalendar();
                                setIsLinking(true);
                            }, children: "Link Calendar" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-export-calendar", onClick: mockExportCalendar, children: "Export Calendar" }), isLinking && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-link", onClick: () => {
                                        mockCancelLink();
                                        setIsLinking(false);
                                    }, children: "Cancel Link" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-next-step", onClick: mockNextStep, children: "Next Step" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-back-step", onClick: () => console.log('Back step'), children: "Back Step" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-cancel-provider", onClick: () => setIsLinking(false), children: "Cancel Provider" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-confirm-final-link", onClick: () => {
                                        console.log('Confirming link');
                                        setIsLinking(false);
                                    }, children: "Confirm Link" })] }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockCalendarFeatures, {}));
            const linkButton = react_2.screen.getByTestId('button-link-calendar');
            const exportButton = react_2.screen.getByTestId('button-export-calendar');
            expect(linkButton).toBeInTheDocument();
            expect(exportButton).toBeInTheDocument();
            await user.click(exportButton);
            expect(mockExportCalendar).toHaveBeenCalled();
            await user.click(linkButton);
            expect(mockLinkCalendar).toHaveBeenCalled();
            await (0, react_2.waitFor)(() => {
                const cancelButton = react_2.screen.getByTestId('button-cancel-link');
                const nextButton = react_2.screen.getByTestId('button-next-step');
                expect(cancelButton).toBeInTheDocument();
                expect(nextButton).toBeInTheDocument();
            });
            const nextButton = react_2.screen.getByTestId('button-next-step');
            await user.click(nextButton);
            expect(mockNextStep).toHaveBeenCalled();
        });
    });
    describe('Filter and Reset Buttons', () => {
        it('should handle filter reset functionality', async () => {
            const mockResetUserFilters = jest.fn();
            const mockResetPermissionFilters = jest.fn();
            const MockFilterControls = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-reset-user-filters", onClick: mockResetUserFilters, children: "Reset User Filters" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-reset-permission-filters", onClick: mockResetPermissionFilters, children: "Reset Permission Filters" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockFilterControls, {}));
            const resetUserButton = react_2.screen.getByTestId('button-reset-user-filters');
            const resetPermissionButton = react_2.screen.getByTestId('button-reset-permission-filters');
            expect(resetUserButton).toBeInTheDocument();
            expect(resetPermissionButton).toBeInTheDocument();
            await user.click(resetUserButton);
            expect(mockResetUserFilters).toHaveBeenCalled();
            await user.click(resetPermissionButton);
            expect(mockResetPermissionFilters).toHaveBeenCalled();
        });
    });
    describe('Show/Hide Toggle Buttons', () => {
        it('should handle show all and hide all functionality', async () => {
            const mockShowAll = jest.fn();
            const mockHideAll = jest.fn();
            const MockToggleButtons = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-show-all", onClick: mockShowAll, children: "Show All" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-hide-all", onClick: mockHideAll, children: "Hide All" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-show-all-bottom", onClick: mockShowAll, children: "Show All Bottom" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockToggleButtons, {}));
            const showAllButton = react_2.screen.getByTestId('button-show-all');
            const hideAllButton = react_2.screen.getByTestId('button-hide-all');
            const showAllBottomButton = react_2.screen.getByTestId('button-show-all-bottom');
            expect(showAllButton).toBeInTheDocument();
            expect(hideAllButton).toBeInTheDocument();
            expect(showAllBottomButton).toBeInTheDocument();
            await user.click(showAllButton);
            expect(mockShowAll).toHaveBeenCalled();
            await user.click(hideAllButton);
            expect(mockHideAll).toHaveBeenCalled();
            await user.click(showAllBottomButton);
            expect(mockShowAll).toHaveBeenCalledTimes(2);
        });
    });
    describe('Fullscreen Toggle Buttons', () => {
        it('should handle fullscreen toggle functionality', async () => {
            const mockToggleFullscreen = jest.fn();
            const MockFullscreenToggle = () => ((0, jsx_runtime_1.jsx)("button", { "data-testid": "button-fullscreen-toggle", onClick: mockToggleFullscreen, children: "Toggle Fullscreen" }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockFullscreenToggle, {}));
            const fullscreenButton = react_2.screen.getByTestId('button-fullscreen-toggle');
            expect(fullscreenButton).toBeInTheDocument();
            await user.click(fullscreenButton);
            expect(mockToggleFullscreen).toHaveBeenCalled();
        });
    });
    describe('Menu Control Buttons', () => {
        it('should handle hamburger menu functionality', async () => {
            const MockHamburgerMenu = () => {
                const [isOpen, setIsOpen] = react_1.default.useState(false);
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "hamburger-button", onClick: () => setIsOpen(!isOpen), children: "Menu" }), isOpen && ((0, jsx_runtime_1.jsx)("button", { "data-testid": "menu-close-button", onClick: () => setIsOpen(false), children: "Close Menu" }))] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockHamburgerMenu, {}));
            const hamburgerButton = react_2.screen.getByTestId('hamburger-button');
            expect(hamburgerButton).toBeInTheDocument();
            await user.click(hamburgerButton);
            await (0, react_2.waitFor)(() => {
                const closeButton = react_2.screen.getByTestId('menu-close-button');
                expect(closeButton).toBeInTheDocument();
            });
            const closeButton = react_2.screen.getByTestId('menu-close-button');
            await user.click(closeButton);
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.queryByTestId('menu-close-button')).not.toBeInTheDocument();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,