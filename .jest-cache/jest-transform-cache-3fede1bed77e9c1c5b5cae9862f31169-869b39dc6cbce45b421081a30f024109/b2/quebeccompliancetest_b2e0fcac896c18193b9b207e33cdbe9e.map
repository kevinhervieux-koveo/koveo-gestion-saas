{"file":"/home/runner/workspace/tests/unit/i18n/quebec-compliance.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/i18n/quebec-compliance.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\n\n/**\n * Quebec Law 25 Compliance Test Suite\n * \n * Validates compliance with Quebec's Law 25 (privacy law):\n * - French language support\n * - Privacy consent mechanisms\n * - Data protection measures\n * - User rights implementation\n */\n\n// Mock language and compliance data for testing\nconst mockLanguageData = {\n  fr: {\n    privacy: {\n      consent: 'Je consens au traitement de mes données personnelles',\n      dataCollection: 'Collecte de données',\n      dataUse: 'Utilisation des données',\n      userRights: 'Droits des utilisateurs',\n    },\n    navigation: {\n      dashboard: 'Tableau de bord',\n      buildings: 'Bâtiments',\n      residents: 'Résidents',\n      documents: 'Documents',\n    },\n  },\n  en: {\n    privacy: {\n      consent: 'I consent to the processing of my personal data',\n      dataCollection: 'Data Collection',\n      dataUse: 'Data Use',\n      userRights: 'User Rights',\n    },\n    navigation: {\n      dashboard: 'Dashboard',\n      buildings: 'Buildings',\n      residents: 'Residents',\n      documents: 'Documents',\n    },\n  },\n};\n\ndescribe('Quebec Law 25 Compliance', () => {\n  describe('Language Support', () => {\n    it('should provide French translations for all privacy-related terms', () => {\n      const frenchPrivacy = mockLanguageData.fr.privacy;\n      \n      expect(frenchPrivacy.consent).toBeDefined();\n      expect(frenchPrivacy.consent).toContain('consens');\n      expect(frenchPrivacy.dataCollection).toBeDefined();\n      expect(frenchPrivacy.dataUse).toBeDefined();\n      expect(frenchPrivacy.userRights).toBeDefined();\n    });\n\n    it('should provide French translations for navigation elements', () => {\n      const frenchNav = mockLanguageData.fr.navigation;\n      \n      expect(frenchNav.dashboard).toBe('Tableau de bord');\n      expect(frenchNav.buildings).toBe('Bâtiments');\n      expect(frenchNav.residents).toBe('Résidents');\n      expect(frenchNav.documents).toBe('Documents');\n    });\n\n    it('should have corresponding English translations', () => {\n      const englishPrivacy = mockLanguageData.en.privacy;\n      const frenchPrivacy = mockLanguageData.fr.privacy;\n      \n      // Every French key should have an English equivalent\n      Object.keys(frenchPrivacy).forEach(key => {\n        expect(englishPrivacy[key as keyof typeof englishPrivacy]).toBeDefined();\n      });\n    });\n  });\n\n  describe('Privacy Consent Requirements', () => {\n    it('should validate privacy consent is explicit and informed', () => {\n      const consentText = mockLanguageData.fr.privacy.consent;\n      \n      // Consent must be explicit (not pre-checked)\n      expect(consentText).toContain('consens');\n      expect(consentText.length).toBeGreaterThan(10); // Meaningful consent text\n    });\n\n    it('should provide clear information about data collection', () => {\n      const dataCollectionInfo = mockLanguageData.fr.privacy.dataCollection;\n      \n      expect(dataCollectionInfo).toBeDefined();\n      expect(dataCollectionInfo).toContain('données');\n    });\n\n    it('should explain data use purposes clearly', () => {\n      const dataUseInfo = mockLanguageData.fr.privacy.dataUse;\n      \n      expect(dataUseInfo).toBeDefined();\n      expect(dataUseInfo).toContain('données');\n    });\n  });\n\n  describe('User Rights Implementation', () => {\n    it('should implement right to access personal data', () => {\n      // Test data access functionality\n      const userRightsText = mockLanguageData.fr.privacy.userRights;\n      expect(userRightsText).toBeDefined();\n    });\n\n    it('should implement right to data portability', () => {\n      // Quebec Law 25 requires data portability\n      // This would test export functionality when implemented\n      expect(true).toBe(true); // Placeholder for actual data export test\n    });\n\n    it('should implement right to rectification', () => {\n      // Users should be able to correct their personal information\n      // This would test profile editing functionality\n      expect(true).toBe(true); // Placeholder for actual profile editing test\n    });\n\n    it('should implement right to erasure', () => {\n      // Users should be able to request data deletion\n      // This would test account deletion functionality\n      expect(true).toBe(true); // Placeholder for actual account deletion test\n    });\n  });\n\n  describe('Data Protection Measures', () => {\n    it('should ensure data minimization principles', () => {\n      // Only collect necessary data\n      const requiredFields = ['email', 'firstName', 'lastName', 'role'];\n      const optionalFields = ['phone', 'preferredLanguage'];\n      \n      // Test that only necessary fields are marked as required\n      expect(requiredFields.length).toBeLessThanOrEqual(5);\n      expect(optionalFields).toContain('phone'); // Phone should be optional\n    });\n\n    it('should implement proper data retention policies', () => {\n      // Test that data retention periods are defined and enforced\n      const maxRetentionDays = 365 * 7; // 7 years for property management\n      expect(maxRetentionDays).toBeDefined();\n      expect(maxRetentionDays).toBeLessThanOrEqual(365 * 10); // Not excessive\n    });\n\n    it('should encrypt sensitive data at rest', () => {\n      // Passwords should be hashed, not plaintext\n      const isPasswordHashed = true; // This would check actual password storage\n      expect(isPasswordHashed).toBe(true);\n    });\n  });\n\n  describe('Quebec-Specific Requirements', () => {\n    it('should support Quebec postal code format', () => {\n      const quebecPostalCodeRegex = /^[A-Za-z]\\d[A-Za-z]\\s*\\d[A-Za-z]\\d$/;\n      const testPostalCodes = ['H1A 1A1', 'G1A1A1', 'J5R 2B3'];\n      \n      testPostalCodes.forEach(postalCode => {\n        expect(quebecPostalCodeRegex.test(postalCode)).toBe(true);\n      });\n    });\n\n    it('should support Quebec phone number formats', () => {\n      const quebecPhoneRegex = /^(\\+1[-.\\s]?)?\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})$/;\n      const testPhoneNumbers = [\n        '514-555-1234',\n        '(418) 555-1234',\n        '+1-450-555-1234',\n        '819.555.1234',\n      ];\n      \n      testPhoneNumbers.forEach(phoneNumber => {\n        expect(quebecPhoneRegex.test(phoneNumber)).toBe(true);\n      });\n    });\n\n    it('should default to French language for Quebec users', () => {\n      // Quebec users should default to French\n      const defaultLanguage = 'fr';\n      expect(defaultLanguage).toBe('fr');\n    });\n\n    it('should comply with Quebec business hour regulations', () => {\n      // Test business hours compliance (example: not sending notifications after 9 PM)\n      const businessHourStart = 8; // 8 AM\n      const businessHourEnd = 21; // 9 PM\n      \n      expect(businessHourStart).toBeGreaterThanOrEqual(6);\n      expect(businessHourEnd).toBeLessThanOrEqual(22);\n    });\n  });\n\n  describe('Consent Management', () => {\n    it('should track consent timestamps', () => {\n      // Consent should include when it was given\n      const consentRecord = {\n        userId: 'test-user-id',\n        consentType: 'data-processing',\n        consentGiven: true,\n        timestamp: new Date(),\n      };\n      \n      expect(consentRecord.timestamp).toBeInstanceOf(Date);\n      expect(consentRecord.consentGiven).toBe(true);\n    });\n\n    it('should allow consent withdrawal', () => {\n      // Users should be able to withdraw consent\n      const withdrawalSupported = true; // This would test actual withdrawal functionality\n      expect(withdrawalSupported).toBe(true);\n    });\n  });\n});"],"version":3}