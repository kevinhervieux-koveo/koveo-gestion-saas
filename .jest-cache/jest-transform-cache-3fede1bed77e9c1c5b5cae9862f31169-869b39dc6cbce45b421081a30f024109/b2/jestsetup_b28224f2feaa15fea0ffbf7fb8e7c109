3693658904a3477248f2a4b82b1c0f2c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Performance: Mock expensive external dependencies
jest.mock('@google/genai', () => ({
    GoogleGenAI: jest.fn().mockImplementation(() => ({
        getGenerativeModel: jest.fn().mockReturnValue({
            generateContent: jest.fn().mockResolvedValue({
                response: {
                    text: () => 'Mock AI response',
                },
            }),
        }),
    })),
}));
// Performance: Mock database for unit tests to avoid network calls
jest.mock('../server/db', () => {
    const { mockDb, mockSql } = require('./mocks/database');
    return {
        db: mockDb,
        sql: mockSql,
        pool: mockSql,
    };
});
// Performance: Mock Neon database for faster unit tests
jest.mock('@neondatabase/serverless', () => ({
    neon: jest.fn(() => {
        const { mockSql } = require('./mocks/database');
        return mockSql;
    }),
}));
// Jest setup file - global test configuration
require("@testing-library/jest-dom");
require("whatwg-fetch");
// Add TransformStream polyfill for MSW compatibility
if (typeof TransformStream === 'undefined') {
    const { TransformStream } = require('stream/web');
    global.TransformStream = TransformStream;
}
// Add ReadableStream polyfill
if (typeof ReadableStream === 'undefined') {
    const { ReadableStream } = require('stream/web');
    global.ReadableStream = ReadableStream;
}
// Add WritableStream polyfill
if (typeof WritableStream === 'undefined') {
    const { WritableStream } = require('stream/web');
    global.WritableStream = WritableStream;
}
// Add BroadcastChannel polyfill for MSW
if (typeof BroadcastChannel === 'undefined') {
    global.BroadcastChannel = class {
        constructor(name) { }
        postMessage(message) { }
        addEventListener(event, handler) { }
        removeEventListener(event, handler) { }
        close() { }
    };
}
// Mock runQuery function for integration tests
global.runQuery = jest.fn(() => Promise.resolve([]));
// Set up test database URL if missing
if (!process.env.DATABASE_URL) {
    process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/koveo_test';
}
// Mock implementations for browser APIs
global.ResizeObserver = function () {
    return {
        observe: function () { },
        unobserve: function () { },
        disconnect: function () { },
    };
};
global.IntersectionObserver = function () {
    return {
        observe: function () { },
        unobserve: function () { },
        disconnect: function () { },
    };
};
// Add TextEncoder/TextDecoder polyfills for Node.js environment
if (typeof TextEncoder === 'undefined') {
    const { TextEncoder, TextDecoder } = require('util');
    global.TextEncoder = TextEncoder;
    global.TextDecoder = TextDecoder;
}
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: function (query) {
        return {
            matches: false,
            media: query,
            onchange: null,
            addListener: function () { }, // deprecated
            removeListener: function () { }, // deprecated
            addEventListener: function () { },
            removeEventListener: function () { },
            dispatchEvent: function () { },
        };
    },
});
// Mock sessionStorage and localStorage
const createMockStorage = () => ({
    getItem: function () {
        return null;
    },
    setItem: function () { },
    removeItem: function () { },
    clear: function () { },
    length: 0,
    key: function () {
        return null;
    },
});
Object.defineProperty(window, 'sessionStorage', {
    value: createMockStorage(),
});
Object.defineProperty(window, 'localStorage', {
    value: createMockStorage(),
});
// Console error suppression will be handled by individual test files if needed
//# sourceMappingURL=data:application/json;charset=utf-8;base64,