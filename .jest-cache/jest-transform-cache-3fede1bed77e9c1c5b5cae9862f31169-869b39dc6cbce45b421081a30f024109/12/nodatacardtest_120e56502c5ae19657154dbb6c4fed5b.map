{"file":"/home/runner/workspace/tests/unit/no-data-card.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/no-data-card.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport { describe, it, expect, beforeEach } from '@jest/globals';\nimport { Building, Home, TrendingUp } from 'lucide-react';\nimport { NoDataCard } from '@/components/ui/no-data-card';\nimport { LanguageProvider } from '@/hooks/use-language';\n\n// Mock component for testing\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <LanguageProvider>{children}</LanguageProvider>\n);\n\ndescribe('NoDataCard Component', () => {\n  beforeEach(() => {\n    // Clear any existing DOM\n    document.body.innerHTML = '';\n  });\n\n  describe('Basic Functionality', () => {\n    it('should render with required props', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            testId=\"test-no-data\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('test-no-data')).toBeInTheDocument();\n      expect(screen.getByTestId('test-no-data-title')).toBeInTheDocument();\n      expect(screen.getByTestId('test-no-data-description')).toBeInTheDocument();\n    });\n\n    it('should render with different icons', () => {\n      const { rerender } = render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            testId=\"test-building\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('test-building')).toBeInTheDocument();\n\n      rerender(\n        <TestWrapper>\n          <NoDataCard\n            icon={Home}\n            titleKey=\"noResidencesFound\"\n            descriptionKey=\"notAssignedResidences\"\n            testId=\"test-home\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('test-home')).toBeInTheDocument();\n    });\n\n    it('should render with badge when badgeKey is provided', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            badgeKey=\"noData\"\n            testId=\"test-with-badge\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('test-with-badge-badge')).toBeInTheDocument();\n    });\n\n    it('should not render badge when badgeKey is not provided', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            testId=\"test-no-badge\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.queryByTestId('test-no-badge-badge')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Translation Coverage', () => {\n    it('should render French translations correctly', () => {\n      // Note: In a real test, we'd mock the language context to return French\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            badgeKey=\"noData\"\n            testId=\"test-french\"\n          />\n        </TestWrapper>\n      );\n\n      const title = screen.getByTestId('test-french-title');\n      const description = screen.getByTestId('test-french-description');\n      const badge = screen.getByTestId('test-french-badge');\n\n      // These should contain the actual translated text when language is set\n      expect(title).toBeInTheDocument();\n      expect(description).toBeInTheDocument();\n      expect(badge).toBeInTheDocument();\n    });\n\n    it('should handle all common no data translation keys', () => {\n      const testCases = [\n        {\n          titleKey: 'noBuildingsFound',\n          descriptionKey: 'noBuildingsAdminMessage',\n          testId: 'buildings-test',\n        },\n        {\n          titleKey: 'noResidencesFound',\n          descriptionKey: 'noResidencesFoundOrg',\n          testId: 'residences-test',\n        },\n        {\n          titleKey: 'noDataAvailable',\n          descriptionKey: 'noBookingsFoundMessage',\n          testId: 'bookings-test',\n        },\n        {\n          titleKey: 'selectCommonSpace',\n          descriptionKey: 'selectCommonSpaceMessage',\n          testId: 'select-space-test',\n        },\n      ];\n\n      testCases.forEach(({ titleKey, descriptionKey, testId }) => {\n        render(\n          <TestWrapper>\n            <NoDataCard\n              icon={Building}\n              titleKey={titleKey}\n              descriptionKey={descriptionKey}\n              testId={testId}\n            />\n          </TestWrapper>\n        );\n\n        expect(screen.getByTestId(testId)).toBeInTheDocument();\n        expect(screen.getByTestId(`${testId}-title`)).toBeInTheDocument();\n        expect(screen.getByTestId(`${testId}-description`)).toBeInTheDocument();\n\n        // Clean up for next test\n        document.body.innerHTML = '';\n      });\n    });\n  });\n\n  describe('Customization Options', () => {\n    it('should apply custom CSS classes', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            className=\"custom-card-class\"\n            contentClassName=\"custom-content-class\"\n            testId=\"test-custom-classes\"\n          />\n        </TestWrapper>\n      );\n\n      const card = screen.getByTestId('test-custom-classes');\n      expect(card).toHaveClass('custom-card-class');\n    });\n\n    it('should render custom children', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            testId=\"test-with-children\"\n          >\n            <div data-testid=\"custom-child\">Custom content</div>\n          </NoDataCard>\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('custom-child')).toBeInTheDocument();\n      expect(screen.getByText('Custom content')).toBeInTheDocument();\n    });\n\n    it('should handle different icon sizes', () => {\n      const { rerender } = render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            iconSize={12}\n            testId=\"test-small-icon\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('test-small-icon')).toBeInTheDocument();\n\n      rerender(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            iconSize={20}\n            testId=\"test-large-icon\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('test-large-icon')).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('should have proper test IDs for screen readers', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={TrendingUp}\n            titleKey=\"noDataAvailable\"\n            descriptionKey=\"noBookingsFoundMessage\"\n            badgeKey=\"noData\"\n            testId=\"accessibility-test\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('accessibility-test')).toBeInTheDocument();\n      expect(screen.getByTestId('accessibility-test-title')).toBeInTheDocument();\n      expect(screen.getByTestId('accessibility-test-description')).toBeInTheDocument();\n      expect(screen.getByTestId('accessibility-test-badge')).toBeInTheDocument();\n    });\n\n    it('should maintain semantic structure', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            testId=\"semantic-test\"\n          />\n        </TestWrapper>\n      );\n\n      const title = screen.getByTestId('semantic-test-title');\n      const description = screen.getByTestId('semantic-test-description');\n\n      expect(title.tagName.toLowerCase()).toBe('h3');\n      expect(description.tagName.toLowerCase()).toBe('p');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle missing translation keys gracefully', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"nonExistentKey\" as any\n            descriptionKey=\"anotherNonExistentKey\" as any\n            testId=\"error-handling-test\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('error-handling-test')).toBeInTheDocument();\n      expect(screen.getByTestId('error-handling-test-title')).toBeInTheDocument();\n      expect(screen.getByTestId('error-handling-test-description')).toBeInTheDocument();\n    });\n  });\n\n  describe('Common Use Cases', () => {\n    it('should render buildings no data scenario correctly', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Building}\n            titleKey=\"noBuildingsFound\"\n            descriptionKey=\"noBuildingsAdminMessage\"\n            badgeKey=\"noData\"\n            testId=\"buildings-scenario\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('buildings-scenario')).toBeInTheDocument();\n    });\n\n    it('should render residences no data scenario correctly', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={Home}\n            titleKey=\"noResidencesFound\"\n            descriptionKey=\"notAssignedResidences\"\n            testId=\"residences-scenario\"\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('residences-scenario')).toBeInTheDocument();\n    });\n\n    it('should render common spaces stats no data scenario correctly', () => {\n      render(\n        <TestWrapper>\n          <NoDataCard\n            icon={TrendingUp}\n            titleKey=\"noDataAvailable\"\n            descriptionKey=\"noBookingsFoundMessage\"\n            testId=\"stats-scenario\"\n            iconSize={12}\n          />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('stats-scenario')).toBeInTheDocument();\n    });\n  });\n});"],"version":3}