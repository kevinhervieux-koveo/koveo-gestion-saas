{"version":3,"names":["exports","useFeatureDuplicateAnalysis","cov_2cf4xlcy1w","s","getDuplicateBadge","getDuplicateNote","react_1","require","badge_1","lucide_react_1","features","f","duplicateAnalysis","useMemo","length","b","Map","analysis","forEach","feature","_index","duplicates","exactMatch","otherFeature","otherIndex","nameMatch","name","toLowerCase","trim","descMatch","description","push","featureWords","split","filter","w","otherWords","commonWords","word","includes","set","id","isDuplicate","duplicateCount","duplicateFeatures","similarityType","duplicateStats","exactDuplicates","Array","from","values","d","similarFeatures","totalExact","totalSimilar","totalWithDuplicates","featureId","dupInfo","get","jsx_runtime_1","jsxs","Badge","className","children","jsx","AlertTriangle","Copy","duplicateNames","map","join"],"sources":["/home/runner/workspace/client/src/components/roadmap/feature-duplicate-analysis.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { AlertTriangle, Copy } from 'lucide-react';\nimport type { Feature } from '@shared/schema';\n\n/**\n * Duplicate analysis result for a feature.\n */\nexport interface DuplicateInfo {\n  isDuplicate: boolean;\n  duplicateCount: number;\n  duplicateFeatures: Feature[];\n  similarityType: 'exact' | 'similar' | 'none';\n}\n\n/**\n * Props for duplicate analysis component.\n */\ninterface FeatureDuplicateAnalysisProps {\n  features: Feature[];\n}\n\n/**\n * Hook for analyzing feature duplicates and similarities.\n * @param features\n */\n/**\n * UseFeatureDuplicateAnalysis function.\n * @param features\n * @returns Function result.\n */\nexport function useFeatureDuplicateAnalysis(features: Feature[]) {\n  const duplicateAnalysis = useMemo(() => {\n    if (!features.length) {\n      return new Map<string, DuplicateInfo>();\n    }\n\n    const analysis = new Map<string, DuplicateInfo>();\n\n    features.forEach((feature: Feature, _index: number) => {\n      const duplicates: Feature[] = [];\n      let exactMatch = false;\n\n      // Compare with all other features\n      features.forEach((otherFeature: Feature, otherIndex: number) => {\n        if (_index === otherIndex) {\n          return;\n        }\n\n        const nameMatch =\n          feature.name.toLowerCase().trim() === otherFeature.name.toLowerCase().trim();\n        const descMatch =\n          feature.description?.toLowerCase().trim() ===\n          otherFeature.description?.toLowerCase().trim();\n\n        // Check for exact duplicates (same name OR same description)\n        if (nameMatch || (descMatch && feature.description && otherFeature.description)) {\n          duplicates.push(otherFeature);\n          exactMatch = true;\n        }\n        // Check for similar features (containing similar keywords)\n        else {\n          const featureWords = feature.name\n            .toLowerCase()\n            .split(/\\s+/)\n            .filter((w: string) => w.length > 3);\n          const otherWords = otherFeature.name\n            .toLowerCase()\n            .split(/\\s+/)\n            .filter((w: string) => w.length > 3);\n\n          const commonWords = featureWords.filter((word: string) => otherWords.includes(word));\n\n          // If more than 50% of significant words match, consider it similar\n          if (featureWords.length > 0 && commonWords.length / featureWords.length > 0.5) {\n            duplicates.push(otherFeature);\n          }\n        }\n      });\n\n      analysis.set(feature.id, {\n        isDuplicate: duplicates.length > 0,\n        duplicateCount: duplicates.length,\n        duplicateFeatures: duplicates,\n        similarityType: exactMatch ? 'exact' : duplicates.length > 0 ? 'similar' : 'none',\n      });\n    });\n\n    return analysis;\n  }, [features]);\n\n  const duplicateStats = useMemo(() => {\n    const exactDuplicates = Array.from(duplicateAnalysis.values()).filter(\n      (d) => d.similarityType === 'exact'\n    );\n    const similarFeatures = Array.from(duplicateAnalysis.values()).filter(\n      (d) => d.similarityType === 'similar'\n    );\n\n    return {\n      totalExact: exactDuplicates.length,\n      totalSimilar: similarFeatures.length,\n      totalWithDuplicates: Array.from(duplicateAnalysis.values()).filter((d) => d.isDuplicate)\n        .length,\n    };\n  }, [duplicateAnalysis]);\n\n  return { duplicateAnalysis, duplicateStats };\n}\n\n/**\n * Gets duplicate badge for a feature.\n * @param featureId\n * @param duplicateAnalysis\n */\n/**\n * GetDuplicateBadge function.\n * @param featureId\n * @param duplicateAnalysis\n * @returns Function result.\n */\nexport function getDuplicateBadge(\n  featureId: string,\n  duplicateAnalysis: Map<string, DuplicateInfo> | undefined\n) {\n  if (!duplicateAnalysis) {\n    return null;\n  }\n  const dupInfo = duplicateAnalysis.get(featureId);\n  if (!dupInfo || !dupInfo.isDuplicate) {\n    return null;\n  }\n\n  if (dupInfo.similarityType === 'exact') {\n    return (\n      <Badge className='bg-red-100 text-red-800 hover:bg-red-100 ml-2 flex items-center gap-1'>\n        <AlertTriangle className='h-3 w-3' />\n        Exact Duplicate ({dupInfo.duplicateCount})\n      </Badge>\n    );\n  } else {\n    return (\n      <Badge className='bg-orange-100 text-orange-800 hover:bg-orange-100 ml-2 flex items-center gap-1'>\n        <Copy className='h-3 w-3' />\n        Similar ({dupInfo.duplicateCount})\n      </Badge>\n    );\n  }\n}\n\n/**\n * Gets duplicate note text for a feature.\n * @param featureId\n * @param duplicateAnalysis\n */\n/**\n * GetDuplicateNote function.\n * @param featureId\n * @param duplicateAnalysis\n * @returns Function result.\n */\nexport function getDuplicateNote(\n  featureId: string,\n  duplicateAnalysis: Map<string, DuplicateInfo> | undefined\n) {\n  if (!duplicateAnalysis) {\n    return null;\n  }\n  const dupInfo = duplicateAnalysis.get(featureId);\n  if (!dupInfo || !dupInfo.isDuplicate) {\n    return null;\n  }\n\n  const duplicateNames = dupInfo.duplicateFeatures.map((f) => f.name).join(', ');\n\n  if (dupInfo.similarityType === 'exact') {\n    return `‚ö†Ô∏è This feature has ${dupInfo.duplicateCount} exact ${dupInfo.duplicateCount === 1 ? 'duplicate' : 'duplicates'}: ${duplicateNames}`;\n  } else {\n    return `üìã This feature is similar to ${dupInfo.duplicateCount} other ${dupInfo.duplicateCount === 1 ? 'feature' : 'features'}: ${duplicateNames}`;\n  }\n}\n"],"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","ignoreList":[]}