70efd3fca21bc4649847b2f1db9a49dc
"use strict";
/**
 * Document utility functions and constants.
 * Consolidates document-related functionality across the application.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.documentApi = exports.GENERAL_DOCUMENT_CATEGORIES = exports.RESIDENCE_DOCUMENT_CATEGORIES = exports.BUILDING_DOCUMENT_CATEGORIES = void 0;
exports.getDisplayableFileUrl = getDisplayableFileUrl;
exports.createUploadHandler = createUploadHandler;
exports.getCategoryLabel = getCategoryLabel;
const queryClient_1 = require("@/lib/queryClient");
/**
 * Document categories for building documents.
 */
exports.BUILDING_DOCUMENT_CATEGORIES = [
    { _value: 'bylaw', label: 'Bylaws' },
    { _value: 'financial', label: 'Financial' },
    { _value: 'maintenance', label: 'Maintenance' },
    { _value: 'legal', label: 'Legal' },
    { _value: 'meeting_minutes', label: 'Meeting Minutes' },
    { _value: 'insurance', label: 'Insurance' },
    { _value: 'contracts', label: 'Contracts' },
    { _value: 'permits', label: 'Permits' },
    { _value: 'inspection', label: 'Inspection' },
    { _value: 'other', label: 'Other' },
];
/**
 * Document categories for residence documents.
 */
exports.RESIDENCE_DOCUMENT_CATEGORIES = [
    { _value: 'lease', label: 'Lease Documents' },
    { _value: 'inspection', label: 'Inspections' },
    { _value: 'maintenance', label: 'Maintenance' },
    { _value: 'financial', label: 'Financial' },
    { _value: 'insurance', label: 'Insurance' },
    { _value: 'legal', label: 'Legal' },
    { _value: 'correspondence', label: 'Correspondence' },
    { _value: 'permits', label: 'Permits' },
    { _value: 'utilities', label: 'Utilities' },
    { _value: 'other', label: 'Other' },
];
/**
 * General document categories for resident use.
 */
exports.GENERAL_DOCUMENT_CATEGORIES = [
    { _value: 'lease', label: 'Lease Agreement' },
    { _value: 'insurance', label: 'Insurance' },
    { _value: 'inspection', label: 'Inspections' },
    { _value: 'maintenance', label: 'Maintenance' },
    { _value: 'financial', label: 'Financial' },
    { _value: 'legal', label: 'Legal Documents' },
    { _value: 'correspondence', label: 'Correspondence' },
    { _value: 'utilities', label: 'Utilities' },
    { _value: 'other', label: 'Other' },
];
/**
 * Utility function to convert raw object storage URLs to server routes.
 * @param fileUrl - The file URL to convert.
 * @returns The displayable file URL.
 */
/**
 * Get displayable file url.
 * @param fileUrl - FileUrl parameter.
 * @returns String result.
 */
function getDisplayableFileUrl(fileUrl) {
    /**
     * If function.
     * @param !fileUrl - !fileUrl parameter.
     */ /**
    * If function.
    * @param !fileUrl - !fileUrl parameter.
    */
    if (!fileUrl) {
        return '';
    }
    // If it's already a proper server route, return as-is
    if (fileUrl.startsWith('/objects/') || fileUrl.startsWith('/public-objects/')) {
        return fileUrl;
    }
    // If it starts with /objects/, use as-is
    if (fileUrl.startsWith('/objects/')) {
        return fileUrl;
    }
    // For other formats, try to use as objects route
    return `/objects/${fileUrl.replace(/^\/+/, '')}`;
}
/**
 * Document API operations.
 */
exports.documentApi = {
    /**
     * Create a new document.
     * @param data - Document data to create.
     * @param _data
     * @returns Promise with the created document.
     */
    create: (_data) => {
        return (0, queryClient_1.apiRequest)('POST', '/api/documents', _data);
    },
    /**
     * Update an existing document.
     * @param id - Document ID to update.
     * @param data - Updated document data.
     * @param _data
     * @returns Promise with the updated document.
     */
    update: (id, _data) => {
        return (0, queryClient_1.apiRequest)('PUT', `/api/documents/${id}`, _data);
    },
    /**
     * Delete a document.
     * @param id - Document ID to delete.
     * @returns Promise with deletion confirmation.
     */
    delete: (id) => {
        return (0, queryClient_1.apiRequest)('DELETE', `/api/documents/${id}`);
    },
    /**
     * Upload a file for a document.
     * @param id - Document ID.
     * @param fileData - File data to upload.
     * @returns Promise with upload result.
     */
    upload: (id, fileData) => {
        return (0, queryClient_1.apiRequest)('POST', `/api/documents/${id}/upload`, fileData);
    },
};
/**
 * Common upload handler factory.
 * @param documentId - The document ID.
 * @param onSuccess - Success callback.
 * @param onError - Error callback.
 * @returns Upload handler function.
 */
function createUploadHandler(documentId, onSuccess, onError) {
    return (_result) => {
        try {
            /**
             * If function.
             * @param result.successful && result.successful.length > 0 - result.successful && result.successful.length > 0 parameter.
             */ /**
            * If function.
            * @param result.successful && result.successful.length > 0 - result.successful && result.successful.length > 0 parameter.
            */
            if (_result.successful && _result.successful.length > 0) {
                onSuccess?.();
            }
            else if (_result.failed && _result.failed.length > 0) {
                const error = new Error(`Upload failed: ${_result.failed[0].error}`);
                onError?.(error);
            }
        }
        catch (error) {
            onError?.(error);
        }
    };
}
/**
 * Get category label by value.
 * @param categories - Array of category objects.
 * @param value - Category value to find.
 * @returns Category label or the original value.
 */
/**
 * Get category label.
 * @param categories - Categories parameter.
 * @param value - Value to process.
 * @param _value
 * @returns String result.
 */
function getCategoryLabel(categories, _value) {
    return categories.find((cat) => cat._value === _value)?.label || _value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,