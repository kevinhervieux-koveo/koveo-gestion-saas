ea89c5c066022a49a884a1ffc450a0ba
"use strict";
/**
 * Document Submission Security Test Suite
 *
 * Tests enhanced security features with Semgrep-focused security rules:
 * 1. Rate limiting (10 files per hour per user)
 * 2. Enhanced file validation (MIME type, size, filename)
 * 3. Path traversal protection (Semgrep: directory-traversal-prevention)
 * 4. Audit logging for all document operations
 * 5. Admin-only audit log access
 * 6. File size limits (25MB maximum)
 * 7. Command injection prevention (Semgrep: command-injection-risk)
 * 8. File upload security (Semgrep: file-upload-security)
 * 9. Input sanitization (Semgrep: input-validation)
 * 10. Access control validation (Semgrep: authorization-bypass)
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock document security functions
const mockAuditLog = [];
const logSecurityEvent = globals_1.jest.fn((event, user, success, details) => {
    mockAuditLog.push({
        id: `audit-${Date.now()}-${Math.random()}`,
        timestamp: new Date().toISOString(),
        event,
        userId: user?.id,
        userRole: user?.role,
        userEmail: user?.email,
        success,
        details: details || {},
        ipAddress: '127.0.0.1',
        userAgent: 'test-agent'
    });
});
// Rate limiting implementation
const rateLimitStore = new Map();
const checkRateLimit = (userId) => {
    const key = `uploads_${userId}`;
    const now = Date.now();
    const hour = 60 * 60 * 1000;
    const userUploads = rateLimitStore.get(key) || [];
    // Remove uploads older than 1 hour
    const recentUploads = userUploads.filter(time => now - time < hour);
    rateLimitStore.set(key, recentUploads);
    return recentUploads.length < 10; // 10 uploads per hour limit
};
const recordUpload = (userId) => {
    const key = `uploads_${userId}`;
    const uploads = rateLimitStore.get(key) || [];
    uploads.push(Date.now());
    rateLimitStore.set(key, uploads);
};
// File validation functions
const validateFileType = (filename, mimeType) => {
    const allowedTypes = [
        'application/pdf',
        'image/jpeg',
        'image/jpg',
        'image/png',
        'image/gif',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain'
    ];
    return allowedTypes.includes(mimeType.toLowerCase());
};
const validateFileSize = (size) => {
    const maxSize = 25 * 1024 * 1024; // 25MB limit (reduced from 50MB)
    return size <= maxSize;
};
const validateFileName = (fileName) => {
    // Check for path traversal attempts
    const dangerousPatterns = [
        '../', '..\\\\', '/etc/', '\\\\windows\\\\',
        '/home/', '/usr/', '/var/', '/root/',
        '..', './', '.\\\\', '~/'
    ];
    const lowerName = fileName.toLowerCase();
    return !dangerousPatterns.some(pattern => lowerName.includes(pattern));
};
// Mock users for testing
const mockUsers = {
    admin: {
        id: 'admin-123',
        role: 'admin',
        email: 'admin@koveo.com',
        organizationId: 'org-1'
    },
    manager: {
        id: 'manager-123',
        role: 'manager',
        email: 'manager@koveo.com',
        organizationId: 'org-1'
    },
    resident: {
        id: 'resident-123',
        role: 'resident',
        email: 'resident@koveo.com',
        organizationId: 'org-1'
    },
    tenant: {
        id: 'tenant-123',
        role: 'tenant',
        email: 'tenant@koveo.com',
        organizationId: 'org-1'
    }
};
(0, globals_1.describe)('Document Submission Security Tests', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        mockAuditLog.length = 0;
        rateLimitStore.clear();
    });
    (0, globals_1.describe)('Rate Limiting', () => {
        (0, globals_1.it)('should allow uploads within rate limit', () => {
            const userId = 'user-123';
            // Test uploading 9 files (within limit)
            for (let i = 0; i < 9; i++) {
                (0, globals_1.expect)(checkRateLimit(userId)).toBe(true);
                recordUpload(userId);
            }
            // 10th upload should still be allowed
            (0, globals_1.expect)(checkRateLimit(userId)).toBe(true);
        });
        (0, globals_1.it)('should reject uploads exceeding rate limit', () => {
            const userId = 'user-456';
            // Upload 10 files (at the limit)
            for (let i = 0; i < 10; i++) {
                (0, globals_1.expect)(checkRateLimit(userId)).toBe(true);
                recordUpload(userId);
            }
            // 11th upload should be rejected
            (0, globals_1.expect)(checkRateLimit(userId)).toBe(false);
        });
        (0, globals_1.it)('should reset rate limit after 1 hour', () => {
            const userId = 'user-789';
            // Fill up the rate limit
            for (let i = 0; i < 10; i++) {
                recordUpload(userId);
            }
            (0, globals_1.expect)(checkRateLimit(userId)).toBe(false);
            // Simulate time passing (more than 1 hour)
            const oldTime = Date.now() - (61 * 60 * 1000); // 61 minutes ago
            rateLimitStore.set(`uploads_${userId}`, [oldTime]);
            // Should allow uploads again
            (0, globals_1.expect)(checkRateLimit(userId)).toBe(true);
        });
    });
    (0, globals_1.describe)('File Validation', () => {
        (0, globals_1.it)('should accept valid file types', () => {
            const validFiles = [
                { name: 'document.pdf', type: 'application/pdf' },
                { name: 'image.jpg', type: 'image/jpeg' },
                { name: 'image.png', type: 'image/png' },
                { name: 'contract.docx', type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' },
                { name: 'notes.txt', type: 'text/plain' }
            ];
            validFiles.forEach(file => {
                (0, globals_1.expect)(validateFileType(file.name, file.type)).toBe(true);
            });
        });
        (0, globals_1.it)('should reject invalid file types', () => {
            const invalidFiles = [
                { name: 'script.js', type: 'application/javascript' },
                { name: 'executable.exe', type: 'application/x-msdownload' },
                { name: 'archive.zip', type: 'application/zip' },
                { name: 'music.mp3', type: 'audio/mpeg' },
                { name: 'video.mp4', type: 'video/mp4' }
            ];
            invalidFiles.forEach(file => {
                (0, globals_1.expect)(validateFileType(file.name, file.type)).toBe(false);
            });
        });
        (0, globals_1.it)('should enforce file size limits', () => {
            const size20MB = 20 * 1024 * 1024;
            const size25MB = 25 * 1024 * 1024;
            const size30MB = 30 * 1024 * 1024;
            (0, globals_1.expect)(validateFileSize(size20MB)).toBe(true);
            (0, globals_1.expect)(validateFileSize(size25MB)).toBe(true);
            (0, globals_1.expect)(validateFileSize(size30MB)).toBe(false);
        });
        (0, globals_1.it)('should prevent path traversal attacks', () => {
            const dangerousNames = [
                '../../../etc/passwd',
                '..\\\\..\\\\windows\\\\system32\\\\config',
                '/etc/shadow',
                '~/../../sensitive-file.txt',
                'normal/../../../etc/passwd',
                'file..\\\\..\\\\system'
            ];
            dangerousNames.forEach(name => {
                (0, globals_1.expect)(validateFileName(name)).toBe(false);
            });
        });
        (0, globals_1.it)('should allow safe filenames', () => {
            const safeNames = [
                'document.pdf',
                'my-file-2024.jpg',
                'Contract_v2.docx',
                'Invoice 123.pdf',
                'receipt (1).png'
            ];
            safeNames.forEach(name => {
                (0, globals_1.expect)(validateFileName(name)).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Audit Logging', () => {
        (0, globals_1.it)('should log successful document uploads', () => {
            const user = mockUsers.resident;
            logSecurityEvent('DOCUMENT_UPLOAD', user, true, {
                fileName: 'lease-agreement.pdf',
                fileSize: 1024000,
                documentType: 'legal'
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0]).toMatchObject({
                event: 'DOCUMENT_UPLOAD',
                userId: user.id,
                userRole: user.role,
                success: true,
                details: {
                    fileName: 'lease-agreement.pdf',
                    fileSize: 1024000,
                    documentType: 'legal'
                }
            });
        });
        (0, globals_1.it)('should log failed upload attempts', () => {
            const user = mockUsers.tenant;
            logSecurityEvent('DOCUMENT_UPLOAD_FAILED', user, false, {
                fileName: 'malicious.exe',
                reason: 'Invalid file type',
                fileSize: 500000
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0]).toMatchObject({
                event: 'DOCUMENT_UPLOAD_FAILED',
                userId: user.id,
                userRole: user.role,
                success: false,
                details: {
                    reason: 'Invalid file type'
                }
            });
        });
        (0, globals_1.it)('should log rate limit violations', () => {
            const user = mockUsers.manager;
            logSecurityEvent('RATE_LIMIT_EXCEEDED', user, false, {
                currentCount: 11,
                limit: 10,
                timeWindow: '1 hour'
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0]).toMatchObject({
                event: 'RATE_LIMIT_EXCEEDED',
                userId: user.id,
                success: false
            });
        });
        (0, globals_1.it)('should log document access attempts', () => {
            const user = mockUsers.tenant;
            logSecurityEvent('DOCUMENT_ACCESS', user, true, {
                documentId: 'doc-123',
                documentName: 'building-rules.pdf',
                accessType: 'view'
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0]).toMatchObject({
                event: 'DOCUMENT_ACCESS',
                userId: user.id,
                success: true
            });
        });
        (0, globals_1.it)('should log unauthorized access attempts', () => {
            const user = mockUsers.tenant;
            logSecurityEvent('UNAUTHORIZED_ACCESS', user, false, {
                documentId: 'private-doc-456',
                reason: 'Tenant role cannot access private documents'
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0]).toMatchObject({
                event: 'UNAUTHORIZED_ACCESS',
                userId: user.id,
                success: false
            });
        });
    });
    (0, globals_1.describe)('Admin Audit Log Access', () => {
        (0, globals_1.it)('should allow admin access to audit logs', () => {
            const admin = mockUsers.admin;
            // Simulate admin requesting audit logs
            const hasAccess = admin.role === 'admin';
            if (hasAccess) {
                logSecurityEvent('AUDIT_LOG_ACCESS', admin, true, {
                    requestedRecords: 50,
                    filters: {}
                });
            }
            (0, globals_1.expect)(hasAccess).toBe(true);
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0].event).toBe('AUDIT_LOG_ACCESS');
        });
        (0, globals_1.it)('should deny non-admin access to audit logs', () => {
            const nonAdminUsers = [mockUsers.manager, mockUsers.resident, mockUsers.tenant];
            nonAdminUsers.forEach(user => {
                const hasAccess = user.role === 'admin';
                if (!hasAccess) {
                    logSecurityEvent('UNAUTHORIZED_AUDIT_ACCESS', user, false, {
                        reason: 'Insufficient privileges for audit log access'
                    });
                }
                (0, globals_1.expect)(hasAccess).toBe(false);
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(3);
            mockAuditLog.forEach(log => {
                (0, globals_1.expect)(log.event).toBe('UNAUTHORIZED_AUDIT_ACCESS');
                (0, globals_1.expect)(log.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Integration Security Tests', () => {
        (0, globals_1.it)('should handle complete document submission flow with all security checks', () => {
            const user = mockUsers.resident;
            const fileName = 'lease-renewal.pdf';
            const fileSize = 2 * 1024 * 1024; // 2MB
            const mimeType = 'application/pdf';
            // 1. Check rate limit
            const withinRateLimit = checkRateLimit(user.id);
            (0, globals_1.expect)(withinRateLimit).toBe(true);
            // 2. Validate file
            const validType = validateFileType(fileName, mimeType);
            const validSize = validateFileSize(fileSize);
            const validName = validateFileName(fileName);
            (0, globals_1.expect)(validType).toBe(true);
            (0, globals_1.expect)(validSize).toBe(true);
            (0, globals_1.expect)(validName).toBe(true);
            // 3. Record successful upload
            recordUpload(user.id);
            logSecurityEvent('DOCUMENT_UPLOAD', user, true, {
                fileName,
                fileSize,
                mimeType,
                documentType: 'legal'
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0].success).toBe(true);
        });
        (0, globals_1.it)('should reject malicious file upload attempt', () => {
            const user = mockUsers.tenant;
            const fileName = '../../../etc/passwd';
            const fileSize = 1024;
            const mimeType = 'application/x-executable';
            // Security checks should fail
            const withinRateLimit = checkRateLimit(user.id);
            const validType = validateFileType(fileName, mimeType);
            const validSize = validateFileSize(fileSize);
            const validName = validateFileName(fileName);
            (0, globals_1.expect)(withinRateLimit).toBe(true);
            (0, globals_1.expect)(validType).toBe(false);
            (0, globals_1.expect)(validSize).toBe(true);
            (0, globals_1.expect)(validName).toBe(false);
            // Log the security violation
            logSecurityEvent('SECURITY_VIOLATION', user, false, {
                fileName,
                mimeType,
                violations: ['invalid_file_type', 'path_traversal_attempt'],
                severity: 'high'
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0]).toMatchObject({
                event: 'SECURITY_VIOLATION',
                success: false,
                details: {
                    severity: 'high'
                }
            });
        });
    });
    (0, globals_1.describe)('Quebec Compliance Security', () => {
        (0, globals_1.it)('should handle French filenames properly', () => {
            const frenchNames = [
                'Contrat_de_location.pdf',
                'Règlement_de_copropriété.docx',
                'Procès-verbal_assemblée.pdf',
                'États_financiers_2024.xlsx'
            ];
            frenchNames.forEach(name => {
                (0, globals_1.expect)(validateFileName(name)).toBe(true);
            });
        });
        (0, globals_1.it)('should log Quebec-specific document types', () => {
            const user = mockUsers.manager;
            logSecurityEvent('DOCUMENT_UPLOAD', user, true, {
                fileName: 'Déclaration_de_copropriété.pdf',
                documentType: 'quebec_legal',
                language: 'fr',
                quebecCompliant: true
            });
            (0, globals_1.expect)(mockAuditLog).toHaveLength(1);
            (0, globals_1.expect)(mockAuditLog[0].details.quebecCompliant).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,