{"file":"/home/runner/workspace/tests/setup.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/setup.ts"],"sourcesContent":["// Import jest-dom matchers for React Testing Library\nimport '@testing-library/jest-dom';\nimport { jest, beforeAll, afterEach, afterAll, expect } from '@jest/globals';\n\n// React 19 compatibility - configure React testing environment\nimport { configure } from '@testing-library/react';\n\nconfigure({\n  // React 19 uses concurrent rendering by default\n  // Adjust testing library to work better with React 19's concurrent features\n  asyncUtilTimeout: 10000,\n  // Make testing more stable\n  testIdAttribute: 'data-testid',\n});\n\n// MSW Server setup - try different import methods for better compatibility\nlet server: any;\n\ntry {\n  // Try different import methods for MSW server\n  try {\n    const mswModule = require('./mocks/server');\n    server = mswModule.server;\n  } catch (requireError) {\n    // MSW server not available - tests will run without API mocking\n    console.warn('MSW server setup skipped, tests will run without API mocking');\n  }\n} catch (_error) {\n  console.warn('MSW server setup failed, tests will run without API mocking');\n}\n\nbeforeAll(() => {\n  server?.listen();\n});\n\nafterEach(() => {\n  server?.resetHandlers();\n});\n\nafterAll(() => {\n  server?.close();\n});\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation((query) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // deprecated\n    removeListener: jest.fn(), // deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// Mock ResizeObserver\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n})) as any;\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n  root: null,\n  rootMargin: '',\n  thresholds: [],\n})) as any;\n\n// Global test configuration for DOM APIs\nObject.defineProperty(global, 'performance', {\n  value: {\n    now: () => Date.now(),\n    mark: () => {},\n    measure: () => {},\n    getEntriesByName: () => [],\n    getEntriesByType: () => [],\n  },\n  writable: true,\n});\n\n// Mock DOM APIs that may be missing in test environment\nObject.defineProperty(global, 'File', {\n  value: class MockFile {\n    name: string;\n    size: number;\n    type: string;\n    constructor(chunks: BlobPart[], filename: string, options?: FilePropertyBag) {\n      this.name = filename;\n      this.size = 0;\n      this.type = options?.type || '';\n    }\n  },\n  writable: true,\n});\n\nObject.defineProperty(global, 'FormData', {\n  value: class MockFormData {\n    private data = new Map<string, unknown>();\n    append(name: string, _value: unknown) {\n      this.data.set(name, _value);\n    }\n    get(name: string) {\n      return this.data.get(name);\n    }\n  },\n  writable: true,\n});\n\n// Mock Node and Element for DOM testing\nObject.defineProperty(global, 'Node', {\n  value: {\n    ELEMENT_NODE: 1,\n    TEXT_NODE: 3,\n    COMMENT_NODE: 8,\n  },\n  writable: true,\n});\n\nObject.defineProperty(global, 'Element', {\n  value: class MockElement {\n    tagName: string = '';\n    nodeType: number = 1;\n  },\n  writable: true,\n});\n\n// Global error handling for tests\nglobal.error = jest.fn();\n"],"version":3}