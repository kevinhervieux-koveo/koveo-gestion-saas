4e1cc6b14b5e262176e8294b161b272e
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../../client/src/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
    queryClient: new (jest.requireActual('@tanstack/react-query').QueryClient)(),
}));
jest.mock('../../../client/src/hooks/use-auth', () => ({
    useAuth: () => ({
        user: null,
        isAuthenticated: false,
        login: mockLogin,
        logout: mockLogout,
    }),
}));
/**
 * Authentication Button Functionality Tests
 * Tests all authentication-related buttons (login, logout, password toggle, etc.)
 */
const react_1 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_2 = __importDefault(require("react"));
// Mock API requests
const mockApiRequest = jest.fn();
// Mock authentication context
const mockLogin = jest.fn();
const mockLogout = jest.fn();
describe('Authentication Buttons Functionality', () => {
    let queryClient;
    let user;
    beforeEach(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: { retry: false },
                mutations: { retry: false },
            },
        });
        user = user_event_1.default.setup();
        jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ ok: true, json: () => Promise.resolve({}) });
    });
    const renderWithProvider = (component) => {
        return (0, react_1.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    describe('Password Toggle Buttons', () => {
        const passwordToggleTestIds = [
            'button-toggle-password',
            'button-toggle-confirm-password',
        ];
        passwordToggleTestIds.forEach(testId => {
            it(`should toggle password visibility for ${testId}`, async () => {
                const MockPasswordField = () => {
                    const [showPassword, setShowPassword] = react_2.default.useState(false);
                    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("input", { type: showPassword ? 'text' : 'password', "data-testid": "password-input", defaultValue: "testpassword" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": testId, onClick: () => setShowPassword(!showPassword), children: showPassword ? 'Hide' : 'Show' })] }));
                };
                renderWithProvider((0, jsx_runtime_1.jsx)(MockPasswordField, {}));
                const passwordInput = react_1.screen.getByTestId('password-input');
                const toggleButton = react_1.screen.getByTestId(testId);
                expect(passwordInput.type).toBe('password');
                expect(toggleButton).toBeInTheDocument();
                await user.click(toggleButton);
                await (0, react_1.waitFor)(() => {
                    expect(passwordInput.type).toBe('text');
                });
                await user.click(toggleButton);
                await (0, react_1.waitFor)(() => {
                    expect(passwordInput.type).toBe('password');
                });
            });
        });
    });
    describe('Language Toggle Buttons', () => {
        it('should switch to English when EN button is clicked', async () => {
            const mockSetLanguage = jest.fn();
            const MockLanguageSwitcher = () => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-language-en", onClick: () => mockSetLanguage('en'), children: "EN" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "button-language-fr", onClick: () => mockSetLanguage('fr'), children: "FR" })] }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockLanguageSwitcher, {}));
            const enButton = react_1.screen.getByTestId('button-language-en');
            const frButton = react_1.screen.getByTestId('button-language-fr');
            expect(enButton).toBeInTheDocument();
            expect(frButton).toBeInTheDocument();
            await user.click(enButton);
            expect(mockSetLanguage).toHaveBeenCalledWith('en');
            await user.click(frButton);
            expect(mockSetLanguage).toHaveBeenCalledWith('fr');
        });
    });
    describe('Login Form Buttons', () => {
        it('should handle login form submission', async () => {
            const MockLoginForm = () => {
                const handleSubmit = (e) => {
                    e.preventDefault();
                    mockLogin({ email: 'test@test.com', password: 'password' });
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, children: [(0, jsx_runtime_1.jsx)("input", { type: "email", name: "email", defaultValue: "test@test.com" }), (0, jsx_runtime_1.jsx)("input", { type: "password", name: "password", defaultValue: "password" }), (0, jsx_runtime_1.jsx)("button", { type: "submit", "data-testid": "button-login", children: "Login" })] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockLoginForm, {}));
            const loginButton = react_1.screen.getByTestId('button-login');
            expect(loginButton).toBeInTheDocument();
            await user.click(loginButton);
            await (0, react_1.waitFor)(() => {
                expect(mockLogin).toHaveBeenCalledWith({
                    email: 'test@test.com',
                    password: 'password'
                });
            });
        });
    });
    describe('Registration Buttons', () => {
        it('should handle registration navigation', async () => {
            const mockNavigate = jest.fn();
            const MockRegisterButton = () => ((0, jsx_runtime_1.jsx)("button", { "data-testid": "button-register", onClick: () => mockNavigate('/auth/register'), children: "Register" }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockRegisterButton, {}));
            const registerButton = react_1.screen.getByTestId('button-register');
            expect(registerButton).toBeInTheDocument();
            await user.click(registerButton);
            expect(mockNavigate).toHaveBeenCalledWith('/auth/register');
        });
    });
    describe('Password Reset Buttons', () => {
        it('should handle password reset request', async () => {
            const MockPasswordResetForm = () => {
                const handleReset = (e) => {
                    e.preventDefault();
                    mockApiRequest('/api/auth/reset-password', {
                        method: 'POST',
                        body: JSON.stringify({ email: 'test@test.com' })
                    });
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleReset, children: [(0, jsx_runtime_1.jsx)("input", { type: "email", name: "email", defaultValue: "test@test.com" }), (0, jsx_runtime_1.jsx)("button", { type: "submit", "data-testid": "button-reset-password", children: "Reset Password" })] }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockPasswordResetForm, {}));
            const resetButton = react_1.screen.getByTestId('button-reset-password');
            expect(resetButton).toBeInTheDocument();
            await user.click(resetButton);
            await (0, react_1.waitFor)(() => {
                expect(mockApiRequest).toHaveBeenCalledWith('/api/auth/reset-password', {
                    method: 'POST',
                    body: JSON.stringify({ email: 'test@test.com' })
                });
            });
        });
    });
    describe('Logout Buttons', () => {
        it('should handle logout action', async () => {
            const MockLogoutButton = () => ((0, jsx_runtime_1.jsx)("button", { "data-testid": "button-logout", onClick: mockLogout, children: "Logout" }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockLogoutButton, {}));
            const logoutButton = react_1.screen.getByTestId('button-logout');
            expect(logoutButton).toBeInTheDocument();
            await user.click(logoutButton);
            expect(mockLogout).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,