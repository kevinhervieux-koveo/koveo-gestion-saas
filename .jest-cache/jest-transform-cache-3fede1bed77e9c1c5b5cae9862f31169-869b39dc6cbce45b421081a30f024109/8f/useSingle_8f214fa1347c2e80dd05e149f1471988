50e39728b80794416d1fce07ee0f2c0b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSingle = useSingle;
const useControlledValue_js_1 = require("../helpers/useControlledValue.js");
/**
 * Hook to manage single-date selection in the DayPicker component.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param dateLib - The date utility library instance.
 * @returns An object containing the selected date, a function to select a date,
 *   and a function to check if a date is selected.
 */
function useSingle(props, dateLib) {
    const { selected: initiallySelected, required, onSelect, } = props;
    const [internallySelected, setSelected] = (0, useControlledValue_js_1.useControlledValue)(initiallySelected, onSelect ? initiallySelected : undefined);
    const selected = !onSelect ? internallySelected : initiallySelected;
    const { isSameDay } = dateLib;
    const isSelected = (compareDate) => {
        return selected ? isSameDay(selected, compareDate) : false;
    };
    const select = (triggerDate, modifiers, e) => {
        let newDate = triggerDate;
        if (!required && selected && selected && isSameDay(triggerDate, selected)) {
            // If the date is the same, clear the selection.
            newDate = undefined;
        }
        if (!onSelect) {
            setSelected(newDate);
        }
        if (required) {
            onSelect?.(newDate, triggerDate, modifiers, e);
        }
        else {
            onSelect?.(newDate, triggerDate, modifiers, e);
        }
        return newDate;
    };
    return {
        selected,
        select,
        isSelected,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9zZWxlY3Rpb24vdXNlU2luZ2xlLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQzlCLE1BQU0sdUJBQXVCLEdBQUcsT0FBTyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDNUU7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsT0FBTztJQUM3QixNQUFNLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxRQUFRLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDbkUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLHVCQUF1QixDQUFDLGtCQUFrQixDQUFDLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkosTUFBTSxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztJQUNwRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBQzlCLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUU7UUFDL0IsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMvRCxDQUFDLENBQUM7SUFDRixNQUFNLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDekMsSUFBSSxPQUFPLEdBQUcsV0FBVyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDeEUsZ0RBQWdEO1lBQ2hELE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNaLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QixDQUFDO1FBQ0QsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNYLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUM7YUFDSSxDQUFDO1lBQ0YsUUFBUSxFQUFFLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUNGLE9BQU87UUFDSCxRQUFRO1FBQ1IsTUFBTTtRQUNOLFVBQVU7S0FDYixDQUFDO0FBQ04sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9yZWFjdC1kYXktcGlja2VyL2Rpc3QvY2pzL3NlbGVjdGlvbi91c2VTaW5nbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZVNpbmdsZSA9IHVzZVNpbmdsZTtcbmNvbnN0IHVzZUNvbnRyb2xsZWRWYWx1ZV9qc18xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdXNlQ29udHJvbGxlZFZhbHVlLmpzXCIpO1xuLyoqXG4gKiBIb29rIHRvIG1hbmFnZSBzaW5nbGUtZGF0ZSBzZWxlY3Rpb24gaW4gdGhlIERheVBpY2tlciBjb21wb25lbnQuXG4gKlxuICogQHRlbXBsYXRlIFQgLSBUaGUgdHlwZSBvZiBEYXlQaWNrZXIgcHJvcHMuXG4gKiBAcGFyYW0gcHJvcHMgLSBUaGUgRGF5UGlja2VyIHByb3BzLlxuICogQHBhcmFtIGRhdGVMaWIgLSBUaGUgZGF0ZSB1dGlsaXR5IGxpYnJhcnkgaW5zdGFuY2UuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgc2VsZWN0ZWQgZGF0ZSwgYSBmdW5jdGlvbiB0byBzZWxlY3QgYSBkYXRlLFxuICogICBhbmQgYSBmdW5jdGlvbiB0byBjaGVjayBpZiBhIGRhdGUgaXMgc2VsZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHVzZVNpbmdsZShwcm9wcywgZGF0ZUxpYikge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWQ6IGluaXRpYWxseVNlbGVjdGVkLCByZXF1aXJlZCwgb25TZWxlY3QsIH0gPSBwcm9wcztcbiAgICBjb25zdCBbaW50ZXJuYWxseVNlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSAoMCwgdXNlQ29udHJvbGxlZFZhbHVlX2pzXzEudXNlQ29udHJvbGxlZFZhbHVlKShpbml0aWFsbHlTZWxlY3RlZCwgb25TZWxlY3QgPyBpbml0aWFsbHlTZWxlY3RlZCA6IHVuZGVmaW5lZCk7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSAhb25TZWxlY3QgPyBpbnRlcm5hbGx5U2VsZWN0ZWQgOiBpbml0aWFsbHlTZWxlY3RlZDtcbiAgICBjb25zdCB7IGlzU2FtZURheSB9ID0gZGF0ZUxpYjtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gKGNvbXBhcmVEYXRlKSA9PiB7XG4gICAgICAgIHJldHVybiBzZWxlY3RlZCA/IGlzU2FtZURheShzZWxlY3RlZCwgY29tcGFyZURhdGUpIDogZmFsc2U7XG4gICAgfTtcbiAgICBjb25zdCBzZWxlY3QgPSAodHJpZ2dlckRhdGUsIG1vZGlmaWVycywgZSkgPT4ge1xuICAgICAgICBsZXQgbmV3RGF0ZSA9IHRyaWdnZXJEYXRlO1xuICAgICAgICBpZiAoIXJlcXVpcmVkICYmIHNlbGVjdGVkICYmIHNlbGVjdGVkICYmIGlzU2FtZURheSh0cmlnZ2VyRGF0ZSwgc2VsZWN0ZWQpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZGF0ZSBpcyB0aGUgc2FtZSwgY2xlYXIgdGhlIHNlbGVjdGlvbi5cbiAgICAgICAgICAgIG5ld0RhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvblNlbGVjdCkge1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWQobmV3RGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcXVpcmVkKSB7XG4gICAgICAgICAgICBvblNlbGVjdD8uKG5ld0RhdGUsIHRyaWdnZXJEYXRlLCBtb2RpZmllcnMsIGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb25TZWxlY3Q/LihuZXdEYXRlLCB0cmlnZ2VyRGF0ZSwgbW9kaWZpZXJzLCBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0ZTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBzZWxlY3QsXG4gICAgICAgIGlzU2VsZWN0ZWQsXG4gICAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==