{"file":"/home/runner/workspace/tests/unit/residence-assignment-validation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/residence-assignment-validation.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport { db } from '../../server/db';\nimport { \n  users, \n  residences, \n  buildings, \n  organizations, \n  userResidences, \n  userOrganizations \n} from '../../shared/schema';\nimport { eq, and, inArray } from 'drizzle-orm';\nimport * as bcrypt from 'bcryptjs';\n\n/**\n * Residence Assignment Validation Test Suite\n * \n * This comprehensive test validates that users can properly access their assigned residences.\n * Specifically addresses the issue where Sophie Résidente (or demo resident users) \n * cannot see their assigned residences.\n * \n * Test Coverage:\n * - User-residence relationship data integrity\n * - Residence access control logic for demo users\n * - API endpoints for fetching user residences  \n * - Proper error messages when no residences found\n * - Authentication and authorization flows\n */\n\ndescribe('Residence Assignment Validation', () => {\n  // Test data setup\n  const testData = {\n    // Test organization\n    testOrg: {\n      id: 'test-org-residence-assignment',\n      name: 'Test Residence Organization',\n      type: 'management_company' as const,\n      address: '123 Test Residence Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n      isActive: true\n    },\n    // Test building\n    testBuilding: {\n      id: 'test-building-residence-assignment',\n      name: 'Test Residence Building',\n      address: '123 Test Building Street',\n      city: 'Montreal', \n      province: 'QC',\n      postalCode: 'H1A 1A1',\n      buildingType: 'condo' as const,\n      totalUnits: 5,\n      totalFloors: 2,\n      isActive: true\n    },\n    // Test residences\n    testResidences: [\n      {\n        id: 'test-residence-1',\n        unitNumber: '101',\n        floor: 1,\n        isActive: true\n      },\n      {\n        id: 'test-residence-2', \n        unitNumber: '102',\n        floor: 1,\n        isActive: true\n      },\n      {\n        id: 'test-residence-3',\n        unitNumber: '201',\n        floor: 2,\n        isActive: true\n      }\n    ],\n    // Test users - covering different roles including demo users\n    testUsers: [\n      {\n        id: 'test-user-demo-resident',\n        username: 'sophie.resident.test',\n        email: 'sophie.resident.test@koveo-gestion.com',\n        password: 'TestPass123!',\n        firstName: 'Sophie',\n        lastName: 'Résidente',\n        role: 'demo_resident' as const,\n        language: 'fr',\n        isActive: true\n      },\n      {\n        id: 'test-user-regular-resident',\n        username: 'regular.resident.test',\n        email: 'regular.resident.test@koveo-gestion.com', \n        password: 'TestPass123!',\n        firstName: 'Regular',\n        lastName: 'Resident',\n        role: 'resident' as const,\n        language: 'fr',\n        isActive: true\n      },\n      {\n        id: 'test-user-demo-tenant',\n        username: 'demo.tenant.test',\n        email: 'demo.tenant.test@koveo-gestion.com',\n        password: 'TestPass123!', \n        firstName: 'Demo',\n        lastName: 'Tenant',\n        role: 'demo_tenant' as const,\n        language: 'fr',\n        isActive: true\n      },\n      {\n        id: 'test-user-manager',\n        username: 'test.manager',\n        email: 'test.manager@koveo-gestion.com',\n        password: 'TestPass123!',\n        firstName: 'Test',\n        lastName: 'Manager',\n        role: 'manager' as const,\n        language: 'fr',\n        isActive: true\n      }\n    ]\n  };\n\n  let createdUserIds: string[] = [];\n  let createdOrgIds: string[] = [];\n  let createdBuildingIds: string[] = [];\n  let createdResidenceIds: string[] = [];\n\n  beforeAll(async () => {\n    console.log('🔧 Setting up residence assignment test data...');\n\n    // Clean up any existing test data\n    const testEmails = testData.testUsers.map(user => user.email);\n    const testUserIds = testData.testUsers.map(user => user.id);\n    const testResidenceIds = testData.testResidences.map(residence => residence.id);\n\n    await db.delete(userResidences).where(\n      inArray(userResidences.userId, testUserIds)\n    ).catch(() => {}); // Ignore if doesn't exist\n\n    await db.delete(userOrganizations).where(\n      inArray(userOrganizations.userId, testUserIds)  \n    ).catch(() => {});\n\n    await db.delete(users).where(\n      inArray(users.email, testEmails)\n    ).catch(() => {});\n\n    await db.delete(residences).where(\n      inArray(residences.id, testResidenceIds)\n    ).catch(() => {});\n\n    await db.delete(buildings).where(\n      eq(buildings.id, testData.testBuilding.id)\n    ).catch(() => {});\n\n    await db.delete(organizations).where(\n      eq(organizations.id, testData.testOrg.id)\n    ).catch(() => {});\n\n    // Create test organization\n    await db.insert(organizations).values({\n      ...testData.testOrg,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    createdOrgIds.push(testData.testOrg.id);\n\n    // Create test building\n    await db.insert(buildings).values({\n      ...testData.testBuilding,\n      organizationId: testData.testOrg.id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    createdBuildingIds.push(testData.testBuilding.id);\n\n    // Create test residences\n    const residencesToCreate = testData.testResidences.map(residence => ({\n      ...residence,\n      buildingId: testData.testBuilding.id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }));\n    \n    await db.insert(residences).values(residencesToCreate);\n    createdResidenceIds = testData.testResidences.map(r => r.id);\n\n    // Create test users with hashed passwords\n    const usersToCreate = await Promise.all(\n      testData.testUsers.map(async (user) => ({\n        ...user,\n        password: await bcrypt.hash(user.password, 12),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }))\n    );\n\n    await db.insert(users).values(usersToCreate);\n    createdUserIds = testData.testUsers.map(u => u.id);\n\n    // Create user-organization relationships for regular users\n    const userOrgRelationships = [\n      {\n        userId: testData.testUsers[1].id, // regular resident\n        organizationId: testData.testOrg.id,\n        organizationRole: 'resident' as const,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        userId: testData.testUsers[3].id, // manager\n        organizationId: testData.testOrg.id, \n        organizationRole: 'manager' as const,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    await db.insert(userOrganizations).values(userOrgRelationships);\n\n    console.log('✅ Test data setup complete');\n  });\n\n  afterAll(async () => {\n    console.log('🧹 Cleaning up residence assignment test data...');\n\n    // Clean up in reverse order due to foreign key constraints\n    await db.delete(userResidences).where(\n      inArray(userResidences.userId, createdUserIds)\n    ).catch(() => {});\n\n    await db.delete(userOrganizations).where(\n      inArray(userOrganizations.userId, createdUserIds)\n    ).catch(() => {});\n\n    await db.delete(users).where(\n      inArray(users.id, createdUserIds)\n    ).catch(() => {});\n\n    await db.delete(residences).where(\n      inArray(residences.id, createdResidenceIds)\n    ).catch(() => {});\n\n    await db.delete(buildings).where(\n      inArray(buildings.id, createdBuildingIds)\n    ).catch(() => {});\n\n    await db.delete(organizations).where(\n      inArray(organizations.id, createdOrgIds)\n    ).catch(() => {});\n\n    console.log('✅ Test cleanup complete');\n  });\n\n  describe('User-Residence Relationship Data Integrity', () => {\n    it('should create user-residence assignments correctly', async () => {\n      // Assign Sophie Résidente to residence 101\n      const sophieUser = testData.testUsers[0]; // demo_resident\n      const residence101 = testData.testResidences[0];\n\n      const userResidenceAssignment = {\n        userId: sophieUser.id,\n        residenceId: residence101.id,\n        relationshipType: 'tenant',\n        startDate: '2024-01-01',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(userResidences).values(userResidenceAssignment);\n\n      // Verify the assignment was created correctly\n      const createdAssignment = await db\n        .select()\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser.id),\n            eq(userResidences.residenceId, residence101.id)\n          )\n        );\n\n      expect(createdAssignment).toHaveLength(1);\n      expect(createdAssignment[0].relationshipType).toBe('tenant');\n      expect(createdAssignment[0].isActive).toBe(true);\n    });\n\n    it('should handle multiple residence assignments for the same user', async () => {\n      const regularResident = testData.testUsers[1]; // regular resident\n      \n      // Assign to multiple residences\n      const assignments = [\n        {\n          userId: regularResident.id,\n          residenceId: testData.testResidences[1].id, // residence 102\n          relationshipType: 'owner',\n          startDate: '2024-01-01',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          userId: regularResident.id, \n          residenceId: testData.testResidences[2].id, // residence 201\n          relationshipType: 'tenant',\n          startDate: '2024-06-01',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ];\n\n      await db.insert(userResidences).values(assignments);\n\n      // Verify multiple assignments\n      const userAssignments = await db\n        .select()\n        .from(userResidences)\n        .where(eq(userResidences.userId, regularResident.id));\n\n      expect(userAssignments).toHaveLength(2);\n      expect(userAssignments.every(a => a.isActive)).toBe(true);\n    });\n\n    it('should enforce referential integrity between users and residences', async () => {\n      // Try to create assignment with non-existent user ID\n      const invalidAssignment = {\n        userId: 'non-existent-user-id',\n        residenceId: testData.testResidences[0].id,\n        relationshipType: 'tenant',\n        startDate: '2024-01-01',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // This should fail due to foreign key constraint\n      await expect(\n        db.insert(userResidences).values(invalidAssignment)\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Residence Access Control Logic for Demo Users', () => {\n    beforeAll(async () => {\n      // Set up residence assignments for access control tests\n      const assignments = [\n        {\n          userId: testData.testUsers[0].id, // Sophie demo_resident\n          residenceId: testData.testResidences[0].id,\n          relationshipType: 'tenant',\n          startDate: '2024-01-01',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          userId: testData.testUsers[2].id, // demo_tenant\n          residenceId: testData.testResidences[1].id,\n          relationshipType: 'tenant', \n          startDate: '2024-01-01',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ];\n\n      await db.insert(userResidences).values(assignments);\n    });\n\n    it('should allow demo_resident users to access their assigned residences', async () => {\n      const sophieUser = testData.testUsers[0]; // demo_resident\n\n      // Query residences accessible to Sophie\n      const accessibleResidences = await db\n        .select({\n          residence: residences,\n          building: buildings,\n          userResidence: userResidences\n        })\n        .from(userResidences)\n        .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n        .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser.id),\n            eq(userResidences.isActive, true),\n            eq(residences.isActive, true)\n          )\n        );\n\n      expect(accessibleResidences).toHaveLength(1);\n      expect(accessibleResidences[0].residence.unitNumber).toBe('101');\n      expect(accessibleResidences[0].building.name).toBe('Test Residence Building');\n    });\n\n    it('should properly handle demo users with no residence assignments', async () => {\n      // Create a demo user with no assignments\n      const unassignedDemoUser = {\n        id: 'test-user-unassigned-demo',\n        username: 'unassigned.demo.test',\n        email: 'unassigned.demo.test@koveo-gestion.com',\n        password: await bcrypt.hash('TestPass123!', 12),\n        firstName: 'Unassigned',\n        lastName: 'Demo',\n        role: 'demo_resident' as const,\n        language: 'fr',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(users).values(unassignedDemoUser);\n      createdUserIds.push(unassignedDemoUser.id);\n\n      // Query residences for unassigned user\n      const accessibleResidences = await db\n        .select()\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, unassignedDemoUser.id),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      expect(accessibleResidences).toHaveLength(0);\n    });\n\n    it('should validate user access scope for building-level permissions', async () => {\n      const sophieUser = testData.testUsers[0]; // demo_resident\n\n      // Get buildings accessible through residence assignments\n      const accessibleBuildings = await db\n        .select({\n          buildingId: buildings.id,\n          buildingName: buildings.name\n        })\n        .from(userResidences)\n        .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n        .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser.id),\n            eq(userResidences.isActive, true),\n            eq(buildings.isActive, true)\n          )\n        );\n\n      expect(accessibleBuildings).toHaveLength(1);\n      expect(accessibleBuildings[0].buildingId).toBe(testData.testBuilding.id);\n    });\n  });\n\n  describe('API Endpoint Simulation Tests', () => {\n    it('should simulate /api/user/residences endpoint logic', async () => {\n      const sophieUser = testData.testUsers[0]; // demo_resident\n\n      // Simulate the logic from server/api/residences.ts\n      const userResidencesList = await db\n        .select({\n          residenceId: userResidences.residenceId,\n        })\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser.id),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      expect(userResidencesList).toHaveLength(1);\n      expect(userResidencesList[0].residenceId).toBe(testData.testResidences[0].id);\n    });\n\n    it('should simulate /api/residences endpoint with building access filter', async () => {\n      const sophieUser = testData.testUsers[0]; // demo_resident\n\n      // Simulate the access control logic from residences API\n      // First get user's accessible building IDs through residences\n      const userResidenceRecords = await db\n        .select({\n          residenceId: userResidences.residenceId,\n        })\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser.id),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      if (userResidenceRecords.length > 0) {\n        const residenceIds = userResidenceRecords.map(ur => ur.residenceId);\n\n        // Get buildings through residences  \n        const residenceBuildings = await db\n          .select({ \n            buildingId: buildings.id,\n            residenceId: residences.id,\n            unitNumber: residences.unitNumber\n          })\n          .from(residences)\n          .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n          .where(\n            and(\n              inArray(residences.id, residenceIds),\n              eq(buildings.isActive, true)\n            )\n          );\n\n        expect(residenceBuildings).toHaveLength(1);\n        expect(residenceBuildings[0].buildingId).toBe(testData.testBuilding.id);\n        expect(residenceBuildings[0].unitNumber).toBe('101');\n      }\n    });\n\n    it('should validate residence access for specific residence endpoint', async () => {\n      const sophieUser = testData.testUsers[0]; // demo_resident\n      const residenceId = testData.testResidences[0].id;\n\n      // Simulate /api/residences/:id access check\n      const accessCheck = await db\n        .select({\n          hasAccess: userResidences.isActive\n        })\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser.id),\n            eq(userResidences.residenceId, residenceId),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      expect(accessCheck).toHaveLength(1);\n      expect(accessCheck[0].hasAccess).toBe(true);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle inactive user residence assignments', async () => {\n      // Create an inactive assignment\n      const inactiveAssignment = {\n        userId: testData.testUsers[0].id, // Sophie\n        residenceId: testData.testResidences[2].id, // residence 201\n        relationshipType: 'former_tenant',\n        startDate: '2023-01-01',\n        endDate: '2023-12-31',\n        isActive: false, // INACTIVE\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(userResidences).values(inactiveAssignment);\n\n      // Query should only return active assignments\n      const activeAssignments = await db\n        .select()\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, testData.testUsers[0].id),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      // Should only have the active assignment (residence 101), not the inactive one\n      expect(activeAssignments).toHaveLength(1);\n      expect(activeAssignments[0].residenceId).toBe(testData.testResidences[0].id);\n    });\n\n    it('should handle users with expired residence assignments', async () => {\n      // Create an assignment with end date in the past\n      const expiredAssignment = {\n        userId: testData.testUsers[2].id, // demo_tenant\n        residenceId: testData.testResidences[2].id,\n        relationshipType: 'tenant',\n        startDate: '2023-01-01',\n        endDate: '2023-06-30', // Expired\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(userResidences).values(expiredAssignment);\n\n      // Application should implement logic to handle expired assignments\n      // For now, we test that the data structure supports this\n      const expiredAssignments = await db\n        .select()\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, testData.testUsers[2].id),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      expect(expiredAssignments.length).toBeGreaterThanOrEqual(1);\n      expect(expiredAssignments.some(a => a.endDate !== null)).toBe(true);\n    });\n\n    it('should provide meaningful error context for debugging', async () => {\n      const testUserId = testData.testUsers[0].id; // Sophie\n\n      // Gather debugging information that would help diagnose the issue\n      const debugInfo = {\n        // User exists check\n        userExists: await db\n          .select({ id: users.id, email: users.email, role: users.role, isActive: users.isActive })\n          .from(users)\n          .where(eq(users.id, testUserId)),\n\n        // User residence assignments\n        userResidenceAssignments: await db\n          .select()\n          .from(userResidences)\n          .where(eq(userResidences.userId, testUserId)),\n\n        // Available residences in the system\n        availableResidences: await db\n          .select({\n            id: residences.id,\n            unitNumber: residences.unitNumber,\n            buildingId: residences.buildingId,\n            isActive: residences.isActive\n          })\n          .from(residences)\n          .where(eq(residences.isActive, true)),\n\n        // Building information\n        buildingInfo: await db\n          .select({\n            id: buildings.id,\n            name: buildings.name,\n            organizationId: buildings.organizationId,\n            isActive: buildings.isActive\n          })\n          .from(buildings)\n          .where(eq(buildings.isActive, true))\n      };\n\n      // Validate that debugging info is comprehensive\n      expect(debugInfo.userExists).toHaveLength(1);\n      expect(debugInfo.userExists[0].email).toBe('sophie.resident.test@koveo-gestion.com');\n      expect(debugInfo.userResidenceAssignments.length).toBeGreaterThanOrEqual(0);\n      expect(debugInfo.availableResidences.length).toBeGreaterThanOrEqual(3);\n      expect(debugInfo.buildingInfo).toHaveLength(1);\n\n      // Log debug info for troubleshooting (would be helpful in real scenarios)\n      console.log('🔍 Residence Assignment Debug Info:', {\n        userId: testUserId,\n        userExists: debugInfo.userExists.length > 0,\n        assignmentCount: debugInfo.userResidenceAssignments.length,\n        activeAssignments: debugInfo.userResidenceAssignments.filter(a => a.isActive).length,\n        availableResidences: debugInfo.availableResidences.length,\n        buildings: debugInfo.buildingInfo.length\n      });\n    });\n  });\n\n  describe('Authentication Integration Tests', () => {\n    it('should validate that demo users have proper authentication credentials', async () => {\n      const sophieUser = testData.testUsers[0]; // demo_resident\n\n      // Verify user record exists with proper authentication data\n      const userRecord = await db\n        .select({\n          id: users.id,\n          email: users.email,\n          password: users.password,\n          role: users.role,\n          isActive: users.isActive\n        })\n        .from(users)\n        .where(eq(users.email, sophieUser.email));\n\n      expect(userRecord).toHaveLength(1);\n      expect(userRecord[0].role).toBe('demo_resident');\n      expect(userRecord[0].isActive).toBe(true);\n      expect(userRecord[0].password).toBeDefined();\n      expect(userRecord[0].password.length).toBeGreaterThan(10); // Hashed password\n    });\n\n    it('should verify password validation for demo users', async () => {\n      const sophieUser = testData.testUsers[0]; // demo_resident\n      const userRecord = await db\n        .select({ password: users.password })\n        .from(users)\n        .where(eq(users.email, sophieUser.email));\n\n      // Verify that the stored password can be validated\n      const isValidPassword = await bcrypt.compare('TestPass123!', userRecord[0].password);\n      expect(isValidPassword).toBe(true);\n\n      // Verify invalid password fails\n      const isInvalidPassword = await bcrypt.compare('WrongPassword', userRecord[0].password);\n      expect(isInvalidPassword).toBe(false);\n    });\n  });\n});"],"version":3}