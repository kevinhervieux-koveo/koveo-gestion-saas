a0ffbb19461ebd81ab832bdd3e8648aa
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByAltText = exports.queryAllByAltText = exports.getByAltText = exports.getAllByAltText = exports.findByAltText = exports.findAllByAltText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
// Valid tags are img, input, area and custom elements
const VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
const queryAllByAltText = (container, alt, options = {}) => {
    (0, _helpers.checkContainerType)(container);
    return (0, _queryHelpers.queryAllByAttribute)('alt', container, alt, options).filter(node => VALID_TAG_REGEXP.test(node.tagName));
};
const getMultipleError = (c, alt) => `Found multiple elements with the alt text: ${alt}`;
const getMissingError = (c, alt) => `Unable to find an element with the alt text: ${alt}`;
const queryAllByAltTextWithSuggestions = exports.queryAllByAltText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByAltText, queryAllByAltText.name, 'queryAll');
const [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = (0, _allUtils.buildQueries)(queryAllByAltText, getMultipleError, getMissingError);
exports.findByAltText = findByAltText;
exports.findAllByAltText = findAllByAltText;
exports.getByAltText = getByAltText;
exports.getAllByAltText = getAllByAltText;
exports.queryByAltText = queryByAltText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL2FsdC10ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtJQUMzQyxLQUFLLEVBQUUsSUFBSTtDQUNaLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUNoSyxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNoRCxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZDLHNEQUFzRDtBQUN0RCxNQUFNLGdCQUFnQixHQUFHLDJCQUEyQixDQUFDO0FBQ3JELE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsRUFBRTtJQUN6RCxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNwSSxDQUFDLENBQUM7QUFDRixNQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsOENBQThDLEdBQUcsRUFBRSxDQUFDO0FBQ3pGLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsZ0RBQWdELEdBQUcsRUFBRSxDQUFDO0FBQzFGLE1BQU0sZ0NBQWdDLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLGlCQUFpQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1SyxNQUFNLENBQUMsY0FBYyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzNLLE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNwQyxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUMxQyxPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L3F1ZXJpZXMvYWx0LXRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlBbHRUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5QWx0VGV4dCA9IGV4cG9ydHMuZ2V0QnlBbHRUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeUFsdFRleHQgPSBleHBvcnRzLmZpbmRCeUFsdFRleHQgPSBleHBvcnRzLmZpbmRBbGxCeUFsdFRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuLy8gVmFsaWQgdGFncyBhcmUgaW1nLCBpbnB1dCwgYXJlYSBhbmQgY3VzdG9tIGVsZW1lbnRzXG5jb25zdCBWQUxJRF9UQUdfUkVHRVhQID0gL14oaW1nfGlucHV0fGFyZWF8ListLispJC9pO1xuY29uc3QgcXVlcnlBbGxCeUFsdFRleHQgPSAoY29udGFpbmVyLCBhbHQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICByZXR1cm4gKDAsIF9xdWVyeUhlbHBlcnMucXVlcnlBbGxCeUF0dHJpYnV0ZSkoJ2FsdCcsIGNvbnRhaW5lciwgYWx0LCBvcHRpb25zKS5maWx0ZXIobm9kZSA9PiBWQUxJRF9UQUdfUkVHRVhQLnRlc3Qobm9kZS50YWdOYW1lKSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCBhbHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBhbHQgdGV4dDogJHthbHR9YDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCBhbHQpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIGFsdCB0ZXh0OiAke2FsdH1gO1xuY29uc3QgcXVlcnlBbGxCeUFsdFRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlBbHRUZXh0ID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeUFsdFRleHQsIHF1ZXJ5QWxsQnlBbHRUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlBbHRUZXh0LCBnZXRBbGxCeUFsdFRleHQsIGdldEJ5QWx0VGV4dCwgZmluZEFsbEJ5QWx0VGV4dCwgZmluZEJ5QWx0VGV4dF0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeUFsdFRleHQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeUFsdFRleHQgPSBmaW5kQnlBbHRUZXh0O1xuZXhwb3J0cy5maW5kQWxsQnlBbHRUZXh0ID0gZmluZEFsbEJ5QWx0VGV4dDtcbmV4cG9ydHMuZ2V0QnlBbHRUZXh0ID0gZ2V0QnlBbHRUZXh0O1xuZXhwb3J0cy5nZXRBbGxCeUFsdFRleHQgPSBnZXRBbGxCeUFsdFRleHQ7XG5leHBvcnRzLnF1ZXJ5QnlBbHRUZXh0ID0gcXVlcnlCeUFsdFRleHQ7Il0sInZlcnNpb24iOjN9