{"file":"/home/runner/workspace/client/src/pages/manager/residences.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/pages/manager/residences.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Header } from '@/components/layout/header';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Home,\n  Search,\n  Edit,\n  Users,\n  Building,\n  MapPin,\n  Car,\n  Package,\n  Bed,\n  Bath,\n  FileText,\n} from 'lucide-react';\nimport { useLanguage } from '@/hooks/use-language';\nimport { ResidenceEditForm } from '@/components/forms/residence-edit-form';\n\n/**\n *\n */\ninterface Residence {\n  id: string;\n  unitNumber: string;\n  floor: number;\n  squareFootage: string;\n  bedrooms: number;\n  bathrooms: string;\n  balcony: boolean;\n  parkingSpaceNumbers: string[];\n  storageSpaceNumbers: string[];\n  ownershipPercentage: string;\n  monthlyFees: string;\n  isActive: boolean;\n  building: {\n    id: string;\n    name: string;\n    address: string;\n    city: string;\n  };\n  organization: {\n    id: string;\n    name: string;\n  };\n  tenants: Array<{\n    id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  }>;\n}\n\n/**\n *\n */\ninterface Building {\n  id: string;\n  name: string;\n  totalFloors: number;\n}\n\n/**\n *\n */\nexport default function /**\n * Residences function.\n */ /**\n * Residences function.\n */\n\nResidences() {\n  const [, navigate] = useLocation();\n  const { t } = useLanguage();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedBuilding, setSelectedBuilding] = useState<string>('all');\n  const [selectedFloor, setSelectedFloor] = useState<string>('all');\n  const [editingResidence, setEditingResidence] = useState<Residence | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Check for URL parameters and set building filter\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const buildingIdFromUrl = urlParams.get('buildingId');\n    if (buildingIdFromUrl && buildingIdFromUrl !== selectedBuilding) {\n      setSelectedBuilding(buildingIdFromUrl);\n    }\n  }, [selectedBuilding]);\n\n  // Fetch residences with search and filters\n  const {\n    data: residences,\n    isLoading: residencesLoading,\n    refetch,\n  } = useQuery({\n    queryKey: ['/api/residences', searchTerm, selectedBuilding, selectedFloor],\n    queryFn: async () => {\n      const params = new URLSearchParams(); /**\n       * If function.\n       * @param searchTerm - SearchTerm parameter.\n       */ /**\n       * If function.\n       * @param searchTerm - SearchTerm parameter.\n       */\n\n      if (searchTerm) {\n        params.append('search', searchTerm);\n      } /**\n       * If function.\n       * @param selectedBuilding && selectedBuilding !== 'all' - selectedBuilding && selectedBuilding !== 'all' parameter.\n       */ /**\n       * If function.\n       * @param selectedBuilding && selectedBuilding !== 'all' - selectedBuilding && selectedBuilding !== 'all' parameter.\n       */\n\n      if (selectedBuilding && selectedBuilding !== 'all') {\n        params.append('buildingId', selectedBuilding);\n      } /**\n       * If function.\n       * @param selectedFloor && selectedFloor !== 'all' - selectedFloor && selectedFloor !== 'all' parameter.\n       */ /**\n       * If function.\n       * @param selectedFloor && selectedFloor !== 'all' - selectedFloor && selectedFloor !== 'all' parameter.\n       */\n\n      if (selectedFloor && selectedFloor !== 'all') {\n        params.append('floor', selectedFloor);\n      }\n\n      const response = await fetch(`/api/residences?${params}`); /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */ /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n      /**\n       * If function.\n       * @param !response.ok - !response.ok parameter.\n       */\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch residences');\n      }\n      return response.json() as Promise<Residence[]>;\n    },\n  });\n\n  // Fetch buildings for filter dropdown - use manager endpoint for proper permissions\n  const { data: buildingsData } = useQuery({\n    queryKey: ['/api/manager/buildings'],\n    queryFn: async () => {\n      const response = await fetch('/api/manager/buildings');\n      if (!response.ok) {\n        throw new Error('Failed to fetch buildings');\n      }\n      return response.json();\n    },\n  });\n\n  // Extract buildings array from the response\n  const buildings = buildingsData?.buildings || [];\n\n  // Fetch all residences to get complete floor list for filter (without search/filter params)\n  const { data: allResidences } = useQuery({\n    queryKey: ['/api/residences/all'],\n    queryFn: async () => {\n      const response = await fetch('/api/residences');\n      if (!response.ok) {\n        throw new Error('Failed to fetch all residences');\n      }\n      return response.json() as Promise<Residence[]>;\n    },\n  });\n\n  // Get unique floors from all residences for filter dropdown\n  const availableFloors = allResidences\n    ? [...new Set(allResidences.map((r) => r.floor).filter((floor) => floor != null))].sort(\n        (a, b) => a - b\n      )\n    : [];\n\n  // Reset page when filters change\n  const handleBuildingChange = (value: string) => {\n    setSelectedBuilding(value);\n    setCurrentPage(1);\n  };\n\n  const handleFloorChange = (value: string) => {\n    setSelectedFloor(value);\n    setCurrentPage(1);\n  };\n\n  const handleSearchChange = (value: string) => {\n    setSearchTerm(value);\n    setCurrentPage(1);\n  };\n\n  // Pagination calculations\n  const totalItems = residences?.length || 0;\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentResidences = residences?.slice(startIndex, endIndex) || [];\n\n  return (\n    <div className='flex-1 flex flex-col overflow-hidden'>\n      <Header title={t('residencesManagement')} subtitle={t('manageResidences')} />\n\n      <div className='flex-1 overflow-auto p-6'>\n        <div className='max-w-7xl mx-auto space-y-6'>\n          {/* Search and Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className='flex items-center gap-2'>\n                <Search className='w-5 h-5' />\n                {t('searchFilters')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className='grid grid-cols-1 md:grid-cols-3 gap-4'>\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>{t('searchResidences')}</label>\n                  <Input\n                    placeholder={t('searchUnitTenant')}\n                    value={searchTerm}\n                    onChange={(e) => handleSearchChange(e.target.value)}\n                    className='w-full'\n                  />\n                </div>\n\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>{t('buildingFilter')}</label>\n                  <Select value={selectedBuilding} onValueChange={handleBuildingChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('allBuildings')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value='all'>{t('allBuildings')}</SelectItem>\n                      {buildings?.map((building: any) => (\n                        <SelectItem key={building.id} value={building.id}>\n                          {building.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className='space-y-2'>\n                  <label className='text-sm font-medium'>{t('floorFilter')}</label>\n                  <Select value={selectedFloor} onValueChange={handleFloorChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder={t('allFloors')} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value='all'>{t('allFloors')}</SelectItem>\n                      {availableFloors.map((floor) => (\n                        <SelectItem key={floor} value={floor.toString()}>\n                          {t('floor')} {floor}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Residences Grid */}\n          <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>\n            {residencesLoading ? (\n              // Loading skeletons\n              Array.from({ length: 6 }).map((_, i) => (\n                <Card key={i}>\n                  <CardContent className='p-6'>\n                    <Skeleton className='h-6 w-24 mb-4' />\n                    <Skeleton className='h-4 w-full mb-2' />\n                    <Skeleton className='h-4 w-3/4 mb-4' />\n                    <div className='grid grid-cols-2 gap-2'>\n                      <Skeleton className='h-8 w-full' />\n                      <Skeleton className='h-8 w-full' />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : totalItems === 0 ? (\n              <Card className='col-span-full'>\n                <CardContent className='p-8 text-center'>\n                  <Home className='w-16 h-16 mx-auto text-gray-400 mb-4' />\n                  <h3 className='text-lg font-semibold text-gray-600 mb-2'>{t('noResidencesFound')}</h3>\n                  <p className='text-gray-500'>{t('adjustSearchCriteria')}</p>\n                </CardContent>\n              </Card>\n            ) : (\n              currentResidences.map((residence) => (\n                <Card key={residence.id} className='hover:shadow-lg transition-shadow'>\n                  <CardContent className='p-6'>\n                    <div className='flex justify-between items-start mb-4'>\n                      <div>\n                        <h3 className='font-semibold text-lg flex items-center gap-2'>\n                          <Home className='w-4 h-4' />\n                          {t('unitNumber')} {residence.unitNumber}\n                        </h3>\n                        <p className='text-sm text-gray-600 flex items-center gap-1'>\n                          <Building className='w-3 h-3' />\n                          {residence.building.name}\n                        </p>\n                        <p className='text-xs text-gray-500 flex items-center gap-1'>\n                          <MapPin className='w-3 h-3' />\n                          {t('floor')} {residence.floor || 'N/A'}\n                        </p>\n                      </div>\n                      <Badge variant={residence.isActive ? 'default' : 'secondary'}>\n                        {residence.isActive ? t('active') : t('inactive')}\n                      </Badge>\n                    </div>\n\n                    {/* Unit Details */}\n                    <div className='space-y-2 mb-4'>\n                      <div className='flex items-center gap-4 text-sm'>\n                        <span className='flex items-center gap-1'>\n                          <Bed className='w-3 h-3' />\n                          {residence.bedrooms || 0} {t('bed')}\n                        </span>\n                        <span className='flex items-center gap-1'>\n                          <Bath className='w-3 h-3' />\n                          {residence.bathrooms || 0} {t('bath')}\n                        </span>\n                      </div>\n\n                      {residence.squareFootage && (\n                        <p className='text-sm text-gray-600'>{residence.squareFootage} {t('sqFt')}</p>\n                      )}\n\n                      {residence.parkingSpaceNumbers?.length > 0 && (\n                        <p className='text-sm text-gray-600 flex items-center gap-1'>\n                          <Car className='w-3 h-3' />\n                          {t('parking')}: {residence.parkingSpaceNumbers.join(', ')}\n                        </p>\n                      )}\n\n                      {residence.storageSpaceNumbers?.length > 0 && (\n                        <p className='text-sm text-gray-600 flex items-center gap-1'>\n                          <Package className='w-3 h-3' />\n                          {t('storage')}: {residence.storageSpaceNumbers.join(', ')}\n                        </p>\n                      )}\n\n                      {residence.monthlyFees && (\n                        <p className='text-sm font-medium text-green-600'>\n                          ${residence.monthlyFees}/{t('monthShort')}\n                        </p>\n                      )}\n                    </div>\n\n                    {/* Tenants */}\n                    <div className='mb-4'>\n                      <h4 className='text-sm font-medium mb-2 flex items-center gap-1'>\n                        <Users className='w-3 h-3' />\n                        {t('residents')} ({residence.tenants.length})\n                      </h4>\n                      {residence.tenants.length === 0 ? (\n                        <p className='text-xs text-gray-500'>{t('noResidentsAssigned')}</p>\n                      ) : (\n                        <div className='space-y-1'>\n                          {residence.tenants.slice(0, 2).map((tenant) => (\n                            <p key={tenant.id} className='text-xs text-gray-600'>\n                              {tenant.firstName} {tenant.lastName}\n                            </p>\n                          ))}\n                          {residence.tenants.length > 2 && (\n                            <p className='text-xs text-gray-500'>\n                              +{residence.tenants.length - 2} {t('moreResidents')}\n                            </p>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className='flex gap-2'>\n                      <Button\n                        variant='outline'\n                        size='sm'\n                        className='flex-1'\n                        onClick={() =>\n                          navigate(`/manager/residences/documents?residenceId=${residence.id}`)\n                        }\n                        title={t('manageResidenceDocuments')}\n                      >\n                        <FileText className='w-3 h-3 mr-1' />\n                        {t('residenceDocumentsButton')}\n                      </Button>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant='outline'\n                            size='sm'\n                            className='flex-1'\n                            onClick={() => setEditingResidence(residence)}\n                          >\n                            <Edit className='w-3 h-3 mr-1' />\n                            Edit\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className='max-w-2xl max-h-[90vh] overflow-y-auto'>\n                          <DialogHeader>\n                            <DialogTitle>Edit Unit {residence.unitNumber}</DialogTitle>\n                          </DialogHeader>\n                          {editingResidence && (\n                            <ResidenceEditForm\n                              residence={editingResidence}\n                              onSuccess={() => {\n                                refetch();\n                                setEditingResidence(null);\n                              }}\n                            />\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n\n          {/* Pagination Controls */}\n          {totalPages > 1 && (\n            <div className='flex justify-center items-center gap-4 mt-6'>\n              <Button\n                variant='outline'\n                size='sm'\n                onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}\n                disabled={currentPage === 1}\n              >\n                Previous\n              </Button>\n\n              <div className='flex items-center gap-2'>\n                <span className='text-sm text-gray-600'>Page</span>\n                <Input\n                  type='number'\n                  min='1'\n                  max={totalPages}\n                  value={currentPage}\n                  onChange={(e) => {\n                    const page = parseInt(e.target.value);\n                    if (page >= 1 && page <= totalPages) {\n                      setCurrentPage(page);\n                    }\n                  }}\n                  onBlur={(e) => {\n                    const page = parseInt(e.target.value);\n                    if (isNaN(page) || page < 1) {\n                      setCurrentPage(1);\n                    } else if (page > totalPages) {\n                      setCurrentPage(totalPages);\n                    }\n                  }}\n                  className='w-16 text-center'\n                />\n                <span className='text-sm text-gray-600'>of {totalPages}</span>\n              </div>\n\n              <Button\n                variant='outline'\n                size='sm'\n                onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}\n                disabled={currentPage === totalPages}\n              >\n                Next\n              </Button>\n\n              <div className='text-sm text-gray-600'>\n                Showing {startIndex + 1}-{Math.min(endIndex, totalItems)} of {totalItems} residences\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"version":3}