4c35602863f06ff0d6f6ede34f10710b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.server = exports.app = void 0;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function (x) {
    if (typeof require !== "undefined")
        return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
    for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
};
// vite.config.ts
const vite_1 = require("vite");
const plugin_react_1 = __importDefault(require("@vitejs/plugin-react"));
const path_1 = __importDefault(require("path"));
const vite_plugin_runtime_error_modal_1 = __importDefault(require("@replit/vite-plugin-runtime-error-modal"));
var vite_config_default;
var init_vite_config = __esm({
    "vite.config.ts"() {
        vite_config_default = (0, vite_1.defineConfig)({
            plugins: [(0, plugin_react_1.default)(), (0, vite_plugin_runtime_error_modal_1.default)()],
            resolve: {
                alias: {
                    "@": path_1.default.resolve(import.meta.dirname, "client", "src"),
                    "@shared": path_1.default.resolve(import.meta.dirname, "shared"),
                    "@assets": path_1.default.resolve(import.meta.dirname, "attached_assets")
                }
            },
            root: path_1.default.resolve(import.meta.dirname, "client"),
            build: {
                outDir: path_1.default.resolve(import.meta.dirname, "dist/public"),
                emptyOutDir: true,
                rollupOptions: {
                    output: {
                        manualChunks: {
                            // Vendor chunks - group large libraries
                            "vendor-react": ["react", "react-dom"],
                            "vendor-ui": [
                                "@radix-ui/react-dialog",
                                "@radix-ui/react-dropdown-menu",
                                "@radix-ui/react-tabs",
                                "@radix-ui/react-toast",
                                "@radix-ui/react-select",
                                "@radix-ui/react-accordion",
                                "@radix-ui/react-popover"
                            ],
                            "vendor-forms": ["react-hook-form", "@hookform/resolvers", "zod"],
                            "vendor-query": ["@tanstack/react-query"],
                            "vendor-charts": ["recharts"],
                            "vendor-utils": ["clsx", "tailwind-merge", "class-variance-authority"]
                        }
                    }
                },
                chunkSizeWarningLimit: 800
                // Increase the warning limit
            },
            server: {
                host: "0.0.0.0",
                fs: {
                    strict: true,
                    deny: ["**/.*"]
                }
            }
        });
    }
});
// server/vite.ts
var vite_exports = {};
__export(vite_exports, {
    log: () => log,
    serveStatic: () => serveStatic,
    setupVite: () => setupVite
});
const express_1 = __importDefault(require("express"));
const fs_1 = __importDefault(require("fs"));
const path_2 = __importDefault(require("path"));
const vite_2 = require("vite");
const nanoid_1 = require("nanoid");
function log(message, source = "express") {
    const formattedTime = ( /* @__PURE__ */new Date()).toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit",
        second: "2-digit",
        hour12: true
    });
}
async function setupVite(app2, server2) {
    const serverOptions = {
        middlewareMode: true,
        hmr: { server: server2 },
        allowedHosts: true
    };
    const vite = await (0, vite_2.createServer)({
        ...vite_config_default,
        configFile: false,
        customLogger: {
            ...viteLogger,
            error: (msg, _options) => {
                viteLogger.error(msg, _options);
                process.exit(1);
            }
        },
        server: serverOptions,
        appType: "custom"
    });
    app2.use(vite.middlewares);
    app2.use("*", async (req, res, next) => {
        if (req.originalUrl.startsWith("/api/")) {
            return next();
        }
        const url = req.originalUrl;
        try {
            const clientTemplate = path_2.default.resolve(import.meta.dirname, "..", "client", "index.html");
            let template = await fs_1.default.promises.readFile(clientTemplate, "utf-8");
            template = template.replace(`src="/src/main.tsx"`, `src="/src/main.tsx?v=${(0, nanoid_1.nanoid)()}"`);
            const page = await vite.transformIndexHtml(url, template);
            res.status(200).set({ "Content-Type": "text/html" }).end(page);
        }
        catch (___e) {
            vite.ssrFixStacktrace(___e);
            next(___e);
        }
    });
}
function serveStatic(app2) {
    const distPath = path_2.default.resolve(process.cwd(), "dist", "public");
    if (!fs_1.default.existsSync(distPath)) {
        throw new Error(`Could not find the build directory: ${distPath}, make sure to build the client first`);
    }
    app2.use(express_1.default.static(distPath));
    app2.use("*", (req, res, next) => {
        if (req.originalUrl.startsWith("/api/")) {
            return next();
        }
        res.sendFile(path_2.default.resolve(distPath, "index.html"));
    });
}
var viteLogger;
var init_vite = __esm({
    "server/vite.ts"() {
        init_vite_config();
        viteLogger = (0, vite_2.createLogger)();
    }
});
// server/config/index.ts
const zod_1 = require("zod");
var envSchema, env, detectEnvironment, envConfig, config;
var init_config = __esm({
    "server/config/index.ts"() {
        envSchema = zod_1.z.object({
            PORT: zod_1.z.string().transform(Number).default(5e3),
            DATABASE_URL: zod_1.z.string().min(1, "DATABASE_URL is required"),
            DATABASE_URL_KOVEO: zod_1.z.string().optional(),
            // Production database
            SESSION_SECRET: zod_1.z.string().optional(),
            REPL_SLUG: zod_1.z.string().optional(),
            REPL_OWNER: zod_1.z.string().optional(),
            // Email configuration
            SENDGRID_API_KEY: zod_1.z.string().optional(),
            FROM_EMAIL: zod_1.z.string().email().optional(),
            // SSL configuration
            SSL_ENABLED: zod_1.z.string().transform((v) => v === "true").default(false),
            SSL_STAGING: zod_1.z.string().transform((v) => v === "true").default(true),
            // Performance configuration
            CACHE_TTL: zod_1.z.string().transform(Number).default(300),
            // 5 minutes
            MAX_CACHE_SIZE: zod_1.z.string().transform(Number).default(100),
            // Security configuration
            RATE_LIMIT_WINDOW: zod_1.z.string().transform(Number).default(9e5),
            // 15 minutes
            RATE_LIMIT_MAX: zod_1.z.string().transform(Number).default(100),
            // Database optimization
            DB_POOL_SIZE: zod_1.z.string().transform(Number).default(10),
            QUERY_TIMEOUT: zod_1.z.string().transform(Number).default(3e4)
            // 30 seconds
        });
        env = envSchema.parse(process.env);
        detectEnvironment = () => {
            const replDomain = env.REPL_SLUG && env.REPL_OWNER ? `${env.REPL_SLUG}.${env.REPL_OWNER}.repl.co` : null;
            const hostDomain = process.env.REPLIT_DOMAINS || process.env.HOST || process.env.DOMAIN;
            const requestHost = process.env.REQUEST_HOST || process.env.HTTP_HOST;
            const serverName = process.env.SERVER_NAME;
            const domain = requestHost || serverName || hostDomain || replDomain || "localhost";
            const productionDomains = ["koveo-gestion.com", "www.koveo-gestion.com", "app.koveo-gestion.com"];
            const isExplicitProduction = process.env.NODE_ENV === "production";
            const isDomainProduction = productionDomains.some((prodDomain) => domain.includes(prodDomain) || domain === prodDomain);
            const isKoveoProduction = domain.includes("koveo-gestion.com");
            const isProduction = isExplicitProduction || isKoveoProduction || isDomainProduction;
            const isDevelopment = !isProduction;
            console.log(`\u{1F30D} Environment detected: ${isDevelopment ? "development" : "production"} (domain: ${domain}, koveo: ${isKoveoProduction})`);
            return {
                environment: isDevelopment ? "development" : "production",
                isDevelopment,
                isProduction,
                isTest: false,
                domain
            };
        };
        envConfig = detectEnvironment();
        config = {
            // Server configuration
            server: {
                port: env.PORT,
                nodeEnv: envConfig.environment,
                isDevelopment: envConfig.isDevelopment,
                isProduction: envConfig.isProduction,
                isTest: envConfig.isTest,
                domain: envConfig.domain
            },
            // Database configuration
            database: {
                // Use DATABASE_URL_KOVEO only in production, otherwise use DATABASE_URL for development
                url: envConfig.isProduction ? env.DATABASE_URL_KOVEO || env.DATABASE_URL : env.DATABASE_URL,
                poolSize: env.DB_POOL_SIZE,
                queryTimeout: env.QUERY_TIMEOUT,
                // Helper function to get database URL at runtime based on request
                getRuntimeDatabaseUrl: (requestDomain) => {
                    return envConfig.isProduction ? env.DATABASE_URL_KOVEO || env.DATABASE_URL : env.DATABASE_URL;
                }
            },
            // Session configuration
            session: {
                secret: env.SESSION_SECRET || "koveo-gestion-secret-key",
                maxAge: 24 * 60 * 60 * 1e3,
                // 24 hours
                secure: envConfig.isProduction,
                httpOnly: true,
                sameSite: "strict"
            },
            // Email configuration
            email: {
                apiKey: env.SENDGRID_API_KEY,
                fromEmail: env.FROM_EMAIL || "noreply@koveo.ca",
                enabled: !!env.SENDGRID_API_KEY
            },
            // SSL configuration
            ssl: {
                enabled: env.SSL_ENABLED,
                staging: env.SSL_STAGING
            },
            // Cache configuration
            cache: {
                ttl: env.CACHE_TTL,
                maxSize: env.MAX_CACHE_SIZE
            },
            // Rate limiting configuration
            rateLimit: {
                windowMs: env.RATE_LIMIT_WINDOW,
                max: env.RATE_LIMIT_MAX
            },
            // Quebec compliance settings
            quebec: {
                defaultLanguage: "fr",
                supportedLanguages: ["en", "fr"],
                requireBilingual: true,
                law25Compliance: true
            }
        };
    }
});
// shared/schemas/core.ts
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_2 = require("zod");
var userRoleEnum, invitationStatusEnum, users, organizations, userOrganizations, invitations, passwordResetTokens, invitationAuditLog, resourceTypeEnum, actionEnum, permissions, rolePermissions, userPermissions, insertUserSchema, insertOrganizationSchema, insertUserOrganizationSchema, insertInvitationSchema, insertPasswordResetTokenSchema, insertInvitationAuditLogSchema, insertPermissionSchema, insertRolePermissionSchema, insertUserPermissionSchema;
var init_core = __esm({
    "shared/schemas/core.ts"() {
        userRoleEnum = (0, pg_core_1.pgEnum)("user_role", [
            "admin",
            "manager",
            "tenant",
            "resident",
            "demo_manager",
            "demo_tenant",
            "demo_resident"
        ]);
        invitationStatusEnum = (0, pg_core_1.pgEnum)("invitation_status", [
            "pending",
            "accepted",
            "expired",
            "cancelled"
        ]);
        users = (0, pg_core_1.pgTable)("users", {
            id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            username: (0, pg_core_1.text)("username").notNull().unique(),
            // Username field required by database
            email: (0, pg_core_1.text)("email").notNull().unique(),
            password: (0, pg_core_1.text)("password").notNull(),
            firstName: (0, pg_core_1.text)("first_name").notNull(),
            lastName: (0, pg_core_1.text)("last_name").notNull(),
            phone: (0, pg_core_1.text)("phone"),
            profileImage: (0, pg_core_1.text)("profile_image"),
            language: (0, pg_core_1.text)("language").notNull().default("fr"),
            // Default to French for Quebec
            role: userRoleEnum("role").notNull().default("tenant"),
            isActive: (0, pg_core_1.boolean)("is_active").notNull().default(true),
            lastLoginAt: (0, pg_core_1.timestamp)("last_login_at"),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow()
        });
        organizations = (0, pg_core_1.pgTable)("organizations", {
            id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            name: (0, pg_core_1.text)("name").notNull(),
            type: (0, pg_core_1.text)("type").notNull(),
            // 'management_company', 'syndicate', 'cooperative', 'condo_association', 'demo'
            address: (0, pg_core_1.text)("address").notNull(),
            city: (0, pg_core_1.text)("city").notNull(),
            province: (0, pg_core_1.text)("province").notNull().default("QC"),
            postalCode: (0, pg_core_1.text)("postal_code").notNull(),
            phone: (0, pg_core_1.text)("phone"),
            email: (0, pg_core_1.text)("email"),
            website: (0, pg_core_1.text)("website"),
            registrationNumber: (0, pg_core_1.text)("registration_number"),
            // Quebec business registration
            isActive: (0, pg_core_1.boolean)("is_active").notNull().default(true),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow()
        });
        userOrganizations = (0, pg_core_1.pgTable)("user_organizations", {
            id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
            organizationId: (0, pg_core_1.varchar)("organization_id").notNull().references(() => organizations.id, { onDelete: "cascade" }),
            organizationRole: userRoleEnum("organization_role").notNull().default("tenant"),
            isActive: (0, pg_core_1.boolean)("is_active").notNull().default(true),
            canAccessAllOrganizations: (0, pg_core_1.boolean)("can_access_all_organizations").notNull().default(false),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow()
        });
        invitations = (0, pg_core_1.pgTable)("invitations", {
            id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            organizationId: (0, pg_core_1.varchar)("organization_id"),
            buildingId: (0, pg_core_1.varchar)("building_id"),
            residenceId: (0, pg_core_1.text)("residence_id"),
            email: (0, pg_core_1.text)("email").notNull(),
            token: (0, pg_core_1.text)("token").notNull().unique(),
            role: userRoleEnum("role").notNull(),
            status: invitationStatusEnum("status").notNull().default("pending"),
            invitedByUserId: (0, pg_core_1.varchar)("invited_by_user_id").notNull(),
            expiresAt: (0, pg_core_1.timestamp)("expires_at").notNull(),
            tokenHash: (0, pg_core_1.text)("token_hash").notNull(),
            usageCount: (0, pg_core_1.integer)("usage_count").notNull().default(0),
            maxUsageCount: (0, pg_core_1.integer)("max_usage_count").notNull().default(1),
            personalMessage: (0, pg_core_1.text)("personal_message"),
            invitationContext: (0, pg_core_1.json)("invitation_context"),
            securityLevel: (0, pg_core_1.text)("security_level"),
            requires2fa: (0, pg_core_1.boolean)("requires_2fa").notNull().default(false),
            acceptedAt: (0, pg_core_1.timestamp)("accepted_at"),
            acceptedBy: (0, pg_core_1.varchar)("accepted_by_user_id"),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow(),
            lastAccessedAt: (0, pg_core_1.timestamp)("last_accessed_at"),
            ipAddress: (0, pg_core_1.text)("ip_address"),
            userAgent: (0, pg_core_1.text)("user_agent")
        });
        passwordResetTokens = (0, pg_core_1.pgTable)("password_reset_tokens", {
            id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
            token: (0, pg_core_1.text)("token").notNull().unique(),
            tokenHash: (0, pg_core_1.text)("token_hash").notNull(),
            // Hashed version for security
            expiresAt: (0, pg_core_1.timestamp)("expires_at").notNull(),
            usedAt: (0, pg_core_1.timestamp)("used_at"),
            isUsed: (0, pg_core_1.boolean)("is_used").notNull().default(false),
            ipAddress: (0, pg_core_1.text)("ip_address"),
            userAgent: (0, pg_core_1.text)("user_agent"),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow()
        });
        invitationAuditLog = (0, pg_core_1.pgTable)("invitation_audit_log", {
            id: (0, pg_core_1.varchar)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            invitationId: (0, pg_core_1.varchar)("invitation_id").references(() => invitations.id, { onDelete: "cascade" }),
            action: (0, pg_core_1.text)("action").notNull(),
            performedBy: (0, pg_core_1.varchar)("performed_by").references(() => users.id),
            ipAddress: (0, pg_core_1.text)("ip_address"),
            userAgent: (0, pg_core_1.text)("user_agent"),
            details: (0, pg_core_1.json)("details"),
            previousStatus: invitationStatusEnum("previous_status"),
            newStatus: invitationStatusEnum("new_status"),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow()
        });
        resourceTypeEnum = (0, pg_core_1.pgEnum)("resource_type", [
            "user",
            "users",
            // Added to handle existing production data
            "organization",
            "building",
            "residence",
            "bill",
            "budget",
            "maintenance_request",
            "document",
            "audit_log",
            "system_settings",
            "development_pillar",
            "quality_metric",
            "feature",
            "actionable_item",
            "improvement_suggestion"
        ]);
        actionEnum = (0, pg_core_1.pgEnum)("action", [
            "read",
            "create",
            "update",
            "delete",
            "manage",
            "approve",
            "assign",
            "share",
            "export",
            "backup",
            "restore"
        ]);
        permissions = (0, pg_core_1.pgTable)("permissions", {
            id: (0, pg_core_1.uuid)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            name: (0, pg_core_1.text)("name").notNull().unique(),
            displayName: (0, pg_core_1.text)("display_name").notNull(),
            description: (0, pg_core_1.text)("description"),
            resourceType: resourceTypeEnum("resource_type").notNull(),
            action: actionEnum("action").notNull(),
            conditions: (0, pg_core_1.json)("conditions"),
            isActive: (0, pg_core_1.boolean)("is_active").notNull().default(true),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow()
        });
        rolePermissions = (0, pg_core_1.pgTable)("role_permissions", {
            id: (0, pg_core_1.uuid)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            role: userRoleEnum("role").notNull(),
            permissionId: (0, pg_core_1.uuid)("permission_id").notNull().references(() => permissions.id),
            grantedBy: (0, pg_core_1.varchar)("granted_by").references(() => users.id),
            grantedAt: (0, pg_core_1.timestamp)("granted_at").defaultNow(),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow()
        });
        userPermissions = (0, pg_core_1.pgTable)("user_permissions", {
            id: (0, pg_core_1.uuid)("id").primaryKey().default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
            userId: (0, pg_core_1.varchar)("user_id").notNull().references(() => users.id),
            permissionId: (0, pg_core_1.uuid)("permission_id").notNull().references(() => permissions.id),
            granted: (0, pg_core_1.boolean)("granted").notNull().default(true),
            createdAt: (0, pg_core_1.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_1.timestamp)("updated_at").defaultNow()
        });
        insertUserSchema = zod_2.z.object({
            username: zod_2.z.string().min(1).max(50, "Username must be between 1-50 characters"),
            email: zod_2.z.string().email("Must be a valid email address").toLowerCase(),
            password: zod_2.z.string().min(8, "Password must be at least 8 characters").regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*(),.?":{}|<>])/, "Password must contain uppercase, lowercase, number, and special character"),
            firstName: zod_2.z.string().min(1).max(100, "First name must be 1-100 characters").trim(),
            lastName: zod_2.z.string().min(1).max(100, "Last name must be 1-100 characters").trim(),
            phone: zod_2.z.string().optional().refine((phone) => !phone || /^(\+1\s?)?(\([0-9]{3}\)|[0-9]{3})[\s.-]?[0-9]{3}[\s.-]?[0-9]{4}$/.test(phone), "Phone must be a valid North American format (e.g., 514-123-4567 or (514) 123-4567)"),
            profileImage: zod_2.z.string().optional(),
            language: zod_2.z.string().default("fr"),
            role: zod_2.z.enum([
                "admin",
                "manager",
                "tenant",
                "resident",
                "demo_manager",
                "demo_tenant",
                "demo_resident"
            ]).default("tenant")
        });
        insertOrganizationSchema = zod_2.z.object({
            name: zod_2.z.string().min(1),
            type: zod_2.z.string(),
            address: zod_2.z.string(),
            city: zod_2.z.string(),
            province: zod_2.z.string().default("QC"),
            postalCode: zod_2.z.string(),
            phone: zod_2.z.string().optional(),
            email: zod_2.z.string().email().optional(),
            website: zod_2.z.string().url().optional(),
            registrationNumber: zod_2.z.string().optional()
        });
        insertUserOrganizationSchema = zod_2.z.object({
            userId: zod_2.z.string().uuid(),
            organizationId: zod_2.z.string().uuid(),
            organizationRole: zod_2.z.enum([
                "admin",
                "manager",
                "tenant",
                "resident",
                "demo_manager",
                "demo_tenant",
                "demo_resident"
            ]).default("tenant"),
            canAccessAllOrganizations: zod_2.z.boolean().default(false)
        });
        insertInvitationSchema = zod_2.z.object({
            organizationId: zod_2.z.string().uuid().optional(),
            residenceId: zod_2.z.union([zod_2.z.string().uuid(), zod_2.z.null()]).optional(),
            email: zod_2.z.string().email(),
            role: zod_2.z.enum([
                "admin",
                "manager",
                "tenant",
                "resident",
                "demo_manager",
                "demo_tenant",
                "demo_resident"
            ]),
            invitedByUserId: zod_2.z.string().uuid(),
            expiresAt: zod_2.z.union([
                zod_2.z.date(),
                zod_2.z.string().datetime().transform((str) => new Date(str))
            ])
        });
        insertPasswordResetTokenSchema = zod_2.z.object({
            userId: zod_2.z.string().uuid(),
            token: zod_2.z.string(),
            tokenHash: zod_2.z.string(),
            expiresAt: zod_2.z.date(),
            ipAddress: zod_2.z.string().optional(),
            userAgent: zod_2.z.string().optional()
        });
        insertInvitationAuditLogSchema = zod_2.z.object({
            invitationId: zod_2.z.string().uuid(),
            action: zod_2.z.string(),
            performedBy: zod_2.z.string().uuid(),
            ipAddress: zod_2.z.string().optional(),
            userAgent: zod_2.z.string().optional(),
            details: zod_2.z.record(zod_2.z.string(), zod_2.z.any()).optional(),
            previousStatus: zod_2.z.string().optional(),
            newStatus: zod_2.z.string().optional()
        });
        insertPermissionSchema = zod_2.z.object({
            name: zod_2.z.string(),
            displayName: zod_2.z.string(),
            description: zod_2.z.string().optional(),
            resourceType: zod_2.z.string(),
            action: zod_2.z.string(),
            conditions: zod_2.z.record(zod_2.z.string(), zod_2.z.any()).optional(),
            isActive: zod_2.z.boolean().default(true)
        });
        insertRolePermissionSchema = zod_2.z.object({
            role: zod_2.z.enum([
                "admin",
                "manager",
                "tenant",
                "resident",
                "demo_manager",
                "demo_tenant",
                "demo_resident"
            ]),
            permissionId: zod_2.z.string().uuid()
        });
        insertUserPermissionSchema = zod_2.z.object({
            userId: zod_2.z.string().uuid(),
            permissionId: zod_2.z.string().uuid(),
            granted: zod_2.z.boolean().default(true)
        });
    }
});
// shared/schemas/property.ts
const drizzle_orm_2 = require("drizzle-orm");
const pg_core_2 = require("drizzle-orm/pg-core");
const zod_3 = require("zod");
var buildingTypeEnum, contactEntityEnum, contactCategoryEnum, bookingStatusEnum, buildings, residences, userResidences, contacts, commonSpaces, bookings, userBookingRestrictions, userTimeLimits, insertBuildingSchema, insertResidenceSchema, insertUserResidenceSchema, insertContactSchema, insertCommonSpaceSchema, insertBookingSchema, insertUserBookingRestrictionSchema, insertUserTimeLimitSchema;
var init_property = __esm({
    "shared/schemas/property.ts"() {
        init_core();
        buildingTypeEnum = (0, pg_core_2.pgEnum)("building_type", ["apartment", "condo", "rental"]);
        contactEntityEnum = (0, pg_core_2.pgEnum)("contact_entity", [
            "organization",
            "building",
            "residence"
        ]);
        contactCategoryEnum = (0, pg_core_2.pgEnum)("contact_category", [
            "resident",
            "manager",
            "tenant",
            "maintenance",
            "emergency",
            "other"
        ]);
        bookingStatusEnum = (0, pg_core_2.pgEnum)("booking_status", ["confirmed", "cancelled"]);
        buildings = (0, pg_core_2.pgTable)("buildings", {
            id: (0, pg_core_2.varchar)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            organizationId: (0, pg_core_2.varchar)("organization_id").notNull().references(() => organizations.id, { onDelete: "cascade" }),
            name: (0, pg_core_2.text)("name").notNull(),
            address: (0, pg_core_2.text)("address").notNull(),
            city: (0, pg_core_2.text)("city").notNull(),
            province: (0, pg_core_2.text)("province").notNull().default("QC"),
            postalCode: (0, pg_core_2.text)("postal_code").notNull(),
            buildingType: buildingTypeEnum("building_type").notNull(),
            yearBuilt: (0, pg_core_2.integer)("year_built"),
            totalUnits: (0, pg_core_2.integer)("total_units").notNull(),
            totalFloors: (0, pg_core_2.integer)("total_floors"),
            parkingSpaces: (0, pg_core_2.integer)("parking_spaces"),
            storageSpaces: (0, pg_core_2.integer)("storage_spaces"),
            amenities: (0, pg_core_2.jsonb)("amenities"),
            // Array of amenities
            managementCompany: (0, pg_core_2.text)("management_company"),
            bankAccountNumber: (0, pg_core_2.text)("bank_account_number"),
            bankAccountNotes: (0, pg_core_2.text)("bank_account_notes"),
            // For reconciliation notes when updating account number
            bankAccountUpdatedAt: (0, pg_core_2.timestamp)("bank_account_updated_at"),
            bankAccountStartDate: (0, pg_core_2.timestamp)("bank_account_start_date"),
            // Date when account started tracking
            bankAccountStartAmount: (0, pg_core_2.numeric)("bank_account_start_amount", { precision: 10, scale: 2 }),
            // Starting balance
            bankAccountMinimums: (0, pg_core_2.text)("bank_account_minimums"),
            // JSON string of minimum balance settings
            inflationSettings: (0, pg_core_2.text)("inflation_settings"),
            // JSON string of inflation configuration by category
            isActive: (0, pg_core_2.boolean)("is_active").notNull().default(true),
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        residences = (0, pg_core_2.pgTable)("residences", {
            id: (0, pg_core_2.varchar)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            buildingId: (0, pg_core_2.varchar)("building_id").notNull().references(() => buildings.id, { onDelete: "cascade" }),
            unitNumber: (0, pg_core_2.text)("unit_number").notNull(),
            floor: (0, pg_core_2.integer)("floor"),
            squareFootage: (0, pg_core_2.decimal)("square_footage", { precision: 8, scale: 2 }),
            bedrooms: (0, pg_core_2.integer)("bedrooms"),
            bathrooms: (0, pg_core_2.decimal)("bathrooms", { precision: 3, scale: 1 }),
            balcony: (0, pg_core_2.boolean)("balcony").default(false),
            parkingSpaceNumbers: (0, pg_core_2.text)("parking_space_numbers").array(),
            storageSpaceNumbers: (0, pg_core_2.text)("storage_space_numbers").array(),
            ownershipPercentage: (0, pg_core_2.decimal)("ownership_percentage", { precision: 5, scale: 2 }),
            // For condos, 0-100 scale
            monthlyFees: (0, pg_core_2.decimal)("monthly_fees", { precision: 10, scale: 2 }),
            isActive: (0, pg_core_2.boolean)("is_active").notNull().default(true),
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        userResidences = (0, pg_core_2.pgTable)("user_residences", {
            id: (0, pg_core_2.varchar)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            userId: (0, pg_core_2.varchar)("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
            residenceId: (0, pg_core_2.varchar)("residence_id").notNull().references(() => residences.id, { onDelete: "cascade" }),
            relationshipType: (0, pg_core_2.text)("relationship_type").notNull(),
            // 'owner', 'tenant', 'occupant'
            startDate: (0, pg_core_2.date)("start_date").notNull(),
            endDate: (0, pg_core_2.date)("end_date"),
            isActive: (0, pg_core_2.boolean)("is_active").notNull().default(true),
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        contacts = (0, pg_core_2.pgTable)("contacts", {
            id: (0, pg_core_2.uuid)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            name: (0, pg_core_2.text)("name").notNull(),
            email: (0, pg_core_2.text)("email"),
            phone: (0, pg_core_2.text)("phone"),
            entity: contactEntityEnum("entity").notNull(),
            entityId: (0, pg_core_2.varchar)("entity_id").notNull(),
            contactCategory: contactCategoryEnum("contact_category").notNull(),
            isActive: (0, pg_core_2.boolean)("is_active").notNull().default(true),
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        commonSpaces = (0, pg_core_2.pgTable)("common_spaces", {
            id: (0, pg_core_2.varchar)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            name: (0, pg_core_2.varchar)("name", { length: 255 }).notNull(),
            description: (0, pg_core_2.text)("description"),
            buildingId: (0, pg_core_2.varchar)("building_id").notNull().references(() => buildings.id, { onDelete: "cascade" }),
            isReservable: (0, pg_core_2.boolean)("is_reservable").notNull().default(false),
            capacity: (0, pg_core_2.integer)("capacity"),
            contactPersonId: (0, pg_core_2.varchar)("contact_person_id").references(() => users.id, { onDelete: "set null" }),
            openingHours: (0, pg_core_2.jsonb)("opening_hours"),
            // Enhanced structure with isOpen, breaks
            availableDays: (0, pg_core_2.jsonb)("available_days"),
            // Array of available days: ['monday', 'tuesday', etc.]
            unavailablePeriods: (0, pg_core_2.jsonb)("unavailable_periods"),
            // Specific periods when space is unavailable
            bookingRules: (0, pg_core_2.text)("booking_rules"),
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        bookings = (0, pg_core_2.pgTable)("bookings", {
            id: (0, pg_core_2.varchar)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            commonSpaceId: (0, pg_core_2.varchar)("common_space_id").notNull().references(() => commonSpaces.id, { onDelete: "cascade" }),
            userId: (0, pg_core_2.varchar)("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
            startTime: (0, pg_core_2.timestamp)("start_time", { withTimezone: true }).notNull(),
            endTime: (0, pg_core_2.timestamp)("end_time", { withTimezone: true }).notNull(),
            status: bookingStatusEnum("status").notNull().default("confirmed"),
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        userBookingRestrictions = (0, pg_core_2.pgTable)("user_booking_restrictions", {
            id: (0, pg_core_2.varchar)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            userId: (0, pg_core_2.varchar)("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
            commonSpaceId: (0, pg_core_2.varchar)("common_space_id").notNull().references(() => commonSpaces.id, { onDelete: "cascade" }),
            isBlocked: (0, pg_core_2.boolean)("is_blocked").notNull().default(true),
            reason: (0, pg_core_2.text)("reason"),
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        userTimeLimits = (0, pg_core_2.pgTable)("user_time_limits", {
            id: (0, pg_core_2.varchar)("id").primaryKey().default((0, drizzle_orm_2.sql) `gen_random_uuid()`),
            userId: (0, pg_core_2.varchar)("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
            commonSpaceId: (0, pg_core_2.varchar)("common_space_id").references(() => commonSpaces.id, { onDelete: "cascade" }),
            // null means applies to all spaces
            limitType: (0, pg_core_2.varchar)("limit_type", { length: 20 }).notNull(),
            // 'monthly' or 'yearly'
            limitHours: (0, pg_core_2.integer)("limit_hours").notNull(),
            // Maximum hours allowed
            createdAt: (0, pg_core_2.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_2.timestamp)("updated_at").defaultNow()
        });
        insertBuildingSchema = zod_3.z.object({
            organizationId: zod_3.z.string().uuid(),
            name: zod_3.z.string().min(1),
            address: zod_3.z.string(),
            city: zod_3.z.string(),
            province: zod_3.z.string().default("QC"),
            postalCode: zod_3.z.string(),
            buildingType: zod_3.z.string(),
            yearBuilt: zod_3.z.number().int().optional(),
            totalUnits: zod_3.z.number().int().optional(),
            totalFloors: zod_3.z.number().int().optional(),
            parkingSpaces: zod_3.z.number().int().optional(),
            storageSpaces: zod_3.z.number().int().optional(),
            amenities: zod_3.z.array(zod_3.z.string()).optional(),
            managementCompany: zod_3.z.string().optional(),
            bankAccountNumber: zod_3.z.string().optional(),
            bankAccountNotes: zod_3.z.string().optional(),
            bankAccountStartDate: zod_3.z.date().optional(),
            bankAccountStartAmount: zod_3.z.number().optional(),
            bankAccountMinimums: zod_3.z.record(zod_3.z.string(), zod_3.z.number()).optional()
        });
        insertResidenceSchema = zod_3.z.object({
            buildingId: zod_3.z.string().uuid(),
            unitNumber: zod_3.z.string(),
            floor: zod_3.z.number().int().optional(),
            squareFootage: zod_3.z.number().optional(),
            bedrooms: zod_3.z.number().int().optional(),
            bathrooms: zod_3.z.number().optional(),
            balcony: zod_3.z.boolean().optional(),
            parkingSpaceNumbers: zod_3.z.array(zod_3.z.string()).optional(),
            storageSpaceNumbers: zod_3.z.array(zod_3.z.string()).optional(),
            ownershipPercentage: zod_3.z.number().optional(),
            monthlyFees: zod_3.z.number().optional()
        });
        insertUserResidenceSchema = zod_3.z.object({
            userId: zod_3.z.string().uuid(),
            residenceId: zod_3.z.string().uuid(),
            relationshipType: zod_3.z.string(),
            startDate: zod_3.z.date(),
            endDate: zod_3.z.date().optional()
        });
        insertContactSchema = zod_3.z.object({
            name: zod_3.z.string(),
            email: zod_3.z.string().email().optional(),
            phone: zod_3.z.string().optional(),
            entity: zod_3.z.string(),
            entityId: zod_3.z.string().uuid(),
            contactCategory: zod_3.z.string()
        });
        insertCommonSpaceSchema = zod_3.z.object({
            name: zod_3.z.string().min(1).max(255),
            description: zod_3.z.string().optional(),
            buildingId: zod_3.z.string().uuid(),
            isReservable: zod_3.z.boolean().default(false),
            capacity: zod_3.z.number().int().optional(),
            contactPersonId: zod_3.z.string().uuid().optional(),
            openingHours: zod_3.z.array(zod_3.z.object({
                day: zod_3.z.enum(["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]),
                open: zod_3.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Time must be in HH:MM format"),
                close: zod_3.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Time must be in HH:MM format"),
                isOpen: zod_3.z.boolean().default(true),
                // Whether the space is open on this day
                breaks: zod_3.z.array(zod_3.z.object({
                    start: zod_3.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Time must be in HH:MM format"),
                    end: zod_3.z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, "Time must be in HH:MM format"),
                    reason: zod_3.z.string().optional()
                    // e.g., "Cleaning", "Maintenance"
                })).optional()
                // Optional breaks within opening hours (like lunch breaks)
            })).optional(),
            availableDays: zod_3.z.array(zod_3.z.enum(["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"])).optional(),
            unavailablePeriods: zod_3.z.array(zod_3.z.object({
                startDate: zod_3.z.string().datetime(),
                endDate: zod_3.z.string().datetime(),
                reason: zod_3.z.string().optional(),
                // e.g., "Renovation", "Maintenance", "Holiday closure"
                recurrence: zod_3.z.enum(["none", "weekly", "monthly", "yearly"]).default("none")
            })).optional(),
            // Specific periods when space is unavailable
            bookingRules: zod_3.z.string().optional()
        });
        insertBookingSchema = zod_3.z.object({
            commonSpaceId: zod_3.z.string().uuid(),
            userId: zod_3.z.string().uuid(),
            startTime: zod_3.z.date(),
            endTime: zod_3.z.date(),
            status: zod_3.z.enum(["confirmed", "cancelled"]).default("confirmed")
        });
        insertUserBookingRestrictionSchema = zod_3.z.object({
            userId: zod_3.z.string().uuid(),
            commonSpaceId: zod_3.z.string().uuid(),
            isBlocked: zod_3.z.boolean().default(true),
            reason: zod_3.z.string().optional()
        });
        insertUserTimeLimitSchema = zod_3.z.object({
            userId: zod_3.z.string().uuid(),
            commonSpaceId: zod_3.z.string().uuid().optional(),
            // null means applies to all spaces
            limitType: zod_3.z.enum(["monthly", "yearly"]),
            limitHours: zod_3.z.number().int().min(1).max(8760)
            // Max 1 year worth of hours
        });
    }
});
// shared/schemas/financial.ts
const drizzle_orm_3 = require("drizzle-orm");
const pg_core_3 = require("drizzle-orm/pg-core");
const drizzle_zod_1 = require("drizzle-zod");
const zod_4 = require("zod");
var billStatusEnum, oldBillTypeEnum, billCategoryEnum, paymentTypeEnum, schedulePaymentEnum, bills, oldBills, budgets, monthlyBudgets, insertBillSchema, insertOldBillSchema, insertBudgetSchema, insertMonthlyBudgetSchema;
var init_financial = __esm({
    "shared/schemas/financial.ts"() {
        init_core();
        init_property();
        billStatusEnum = (0, pg_core_3.pgEnum)("bill_status", [
            "draft",
            "sent",
            "overdue",
            "paid",
            "cancelled"
        ]);
        oldBillTypeEnum = (0, pg_core_3.pgEnum)("old_bill_type", [
            "condo_fees",
            "special_assessment",
            "utility",
            "maintenance",
            "other"
        ]);
        billCategoryEnum = (0, pg_core_3.pgEnum)("bill_category", [
            "insurance",
            "maintenance",
            "salary",
            "utilities",
            "cleaning",
            "security",
            "landscaping",
            "professional_services",
            "administration",
            "repairs",
            "supplies",
            "taxes",
            "technology",
            "reserves",
            "other"
        ]);
        paymentTypeEnum = (0, pg_core_3.pgEnum)("payment_type", ["unique", "recurrent"]);
        schedulePaymentEnum = (0, pg_core_3.pgEnum)("schedule_payment", [
            "weekly",
            "monthly",
            "quarterly",
            "yearly",
            "custom"
        ]);
        bills = (0, pg_core_3.pgTable)("bills", {
            id: (0, pg_core_3.varchar)("id").primaryKey().default((0, drizzle_orm_3.sql) `gen_random_uuid()`),
            buildingId: (0, pg_core_3.varchar)("building_id").notNull().references(() => buildings.id),
            billNumber: (0, pg_core_3.text)("bill_number").notNull().unique(),
            title: (0, pg_core_3.text)("title").notNull(),
            description: (0, pg_core_3.text)("description"),
            category: billCategoryEnum("category").notNull(),
            vendor: (0, pg_core_3.text)("vendor"),
            // Company or service provider
            paymentType: paymentTypeEnum("payment_type").notNull(),
            // unique or recurrent
            schedulePayment: schedulePaymentEnum("schedule_payment"),
            // Only for recurrent payments
            scheduleCustom: (0, pg_core_3.date)("schedule_custom").array(),
            // Custom dates for custom schedules
            costs: (0, pg_core_3.decimal)("costs", { precision: 12, scale: 2 }).array().notNull(),
            // Array of costs for payment plan
            totalAmount: (0, pg_core_3.decimal)("total_amount", { precision: 12, scale: 2 }).notNull(),
            startDate: (0, pg_core_3.date)("start_date").notNull(),
            // When the bill series starts
            endDate: (0, pg_core_3.date)("end_date"),
            // For recurrent bills, when they end (optional for ongoing)
            status: billStatusEnum("status").notNull().default("draft"),
            filePath: (0, pg_core_3.text)("file_path"),
            // Path to uploaded bill document
            fileName: (0, pg_core_3.text)("file_name"),
            // Original filename
            fileSize: (0, pg_core_3.integer)("file_size"),
            // File size in bytes
            isAiAnalyzed: (0, pg_core_3.boolean)("is_ai_analyzed").default(false),
            aiAnalysisData: (0, pg_core_3.jsonb)("ai_analysis_data"),
            // Store AI-extracted data
            notes: (0, pg_core_3.text)("notes"),
            autoGenerated: (0, pg_core_3.boolean)("auto_generated").notNull().default(false),
            // Indicates if this bill was auto-generated
            reference: (0, pg_core_3.varchar)("reference").references(() => bills.id),
            // References the original bill for auto-generated bills
            createdBy: (0, pg_core_3.varchar)("created_by").notNull().references(() => users.id),
            createdAt: (0, pg_core_3.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_3.timestamp)("updated_at").defaultNow()
        });
        oldBills = (0, pg_core_3.pgTable)("old_bills", {
            id: (0, pg_core_3.uuid)("id").primaryKey().default((0, drizzle_orm_3.sql) `gen_random_uuid()`),
            residenceId: (0, pg_core_3.varchar)("residence_id").notNull().references(() => residences.id),
            billNumber: (0, pg_core_3.text)("bill_number").notNull().unique(),
            type: oldBillTypeEnum("type").notNull(),
            description: (0, pg_core_3.text)("description").notNull(),
            amount: (0, pg_core_3.decimal)("amount", { precision: 12, scale: 2 }).notNull(),
            dueDate: (0, pg_core_3.date)("due_date").notNull(),
            issueDate: (0, pg_core_3.date)("issue_date").notNull(),
            status: billStatusEnum("status").notNull().default("draft"),
            notes: (0, pg_core_3.text)("notes"),
            lateFeeAmount: (0, pg_core_3.decimal)("late_fee_amount", { precision: 10, scale: 2 }),
            discountAmount: (0, pg_core_3.decimal)("discount_amount", { precision: 10, scale: 2 }),
            finalAmount: (0, pg_core_3.decimal)("final_amount", { precision: 12, scale: 2 }).notNull(),
            paymentReceivedDate: (0, pg_core_3.date)("payment_received_date"),
            createdBy: (0, pg_core_3.varchar)("created_by").notNull().references(() => users.id),
            createdAt: (0, pg_core_3.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_3.timestamp)("updated_at").defaultNow()
        });
        budgets = (0, pg_core_3.pgTable)("budgets", {
            id: (0, pg_core_3.varchar)("id").primaryKey().default((0, drizzle_orm_3.sql) `gen_random_uuid()`),
            buildingId: (0, pg_core_3.varchar)("building_id").notNull().references(() => buildings.id),
            year: (0, pg_core_3.integer)("year").notNull(),
            name: (0, pg_core_3.text)("name").notNull(),
            description: (0, pg_core_3.text)("description"),
            category: (0, pg_core_3.text)("category").notNull(),
            // 'operational', 'reserve', 'special_project'
            budgetedAmount: (0, pg_core_3.decimal)("budgeted_amount", { precision: 12, scale: 2 }).notNull(),
            actualAmount: (0, pg_core_3.decimal)("actual_amount", { precision: 12, scale: 2 }).default("0"),
            variance: (0, pg_core_3.decimal)("variance", { precision: 12, scale: 2 }).default("0"),
            approvedBy: (0, pg_core_3.varchar)("approved_by").references(() => users.id),
            approvedDate: (0, pg_core_3.date)("approved_date"),
            isActive: (0, pg_core_3.boolean)("is_active").notNull().default(true),
            createdBy: (0, pg_core_3.varchar)("created_by").notNull().references(() => users.id),
            createdAt: (0, pg_core_3.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_3.timestamp)("updated_at").defaultNow()
        });
        monthlyBudgets = (0, pg_core_3.pgTable)("monthly_budgets", {
            id: (0, pg_core_3.varchar)("id").primaryKey().default((0, drizzle_orm_3.sql) `gen_random_uuid()`),
            buildingId: (0, pg_core_3.varchar)("building_id").notNull().references(() => buildings.id),
            year: (0, pg_core_3.integer)("year").notNull(),
            month: (0, pg_core_3.integer)("month").notNull(),
            // 1-12
            incomeTypes: (0, pg_core_3.text)("income_types").array().notNull(),
            // Array of income categories from money_flow
            incomes: (0, pg_core_3.decimal)("incomes", { precision: 12, scale: 2 }).array().notNull(),
            // Array of income amounts corresponding to incomeTypes
            spendingTypes: (0, pg_core_3.text)("spending_types").array().notNull(),
            // Array of expense categories from money_flow
            spendings: (0, pg_core_3.decimal)("spendings", { precision: 12, scale: 2 }).array().notNull(),
            // Array of spending amounts corresponding to spendingTypes
            approved: (0, pg_core_3.boolean)("approved").notNull().default(false),
            approvedBy: (0, pg_core_3.varchar)("approved_by").references(() => users.id),
            approvedDate: (0, pg_core_3.timestamp)("approved_date"),
            originalBudgetId: (0, pg_core_3.varchar)("original_budget_id").references(() => monthlyBudgets.id),
            // References the original budget if this is an approved copy
            createdAt: (0, pg_core_3.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_3.timestamp)("updated_at").defaultNow()
        });
        insertBillSchema = (0, drizzle_zod_1.createInsertSchema)(bills, {
            // Custom validations for strict schema compliance
            billNumber: zod_4.z.string().min(1, "Bill number is required"),
            title: zod_4.z.string().min(1, "Title is required"),
            category: zod_4.z.enum(["insurance", "maintenance", "salary", "utilities", "cleaning", "security", "landscaping", "professional_services", "administration", "repairs", "supplies", "taxes", "technology", "reserves", "other"]),
            paymentType: zod_4.z.enum(["unique", "recurrent"]),
            schedulePayment: zod_4.z.enum(["weekly", "monthly", "quarterly", "yearly", "custom"]).optional(),
            scheduleCustom: zod_4.z.array(zod_4.z.coerce.date()).optional().refine((dates) => !dates || dates.length === 0 || dates.every((date7) => date7 instanceof Date && !isNaN(date7.getTime())), "All custom schedule dates must be valid dates"),
            costs: zod_4.z.array(zod_4.z.coerce.number().positive("All costs must be positive")).min(1, "At least one cost is required"),
            totalAmount: zod_4.z.coerce.number().positive("Total amount must be positive"),
            startDate: zod_4.z.coerce.date(),
            endDate: zod_4.z.coerce.date().optional(),
            status: zod_4.z.enum(["draft", "sent", "overdue", "paid", "cancelled"]).default("draft"),
            autoGenerated: zod_4.z.boolean().default(false)
        }).omit({
            id: true,
            createdAt: true,
            updatedAt: true
        });
        insertOldBillSchema = zod_4.z.object({
            residenceId: zod_4.z.string().uuid(),
            billNumber: zod_4.z.string(),
            type: zod_4.z.string(),
            description: zod_4.z.string().optional(),
            amount: zod_4.z.number(),
            dueDate: zod_4.z.date(),
            issueDate: zod_4.z.date().optional(),
            status: zod_4.z.string().default("unpaid"),
            notes: zod_4.z.string().optional(),
            lateFeeAmount: zod_4.z.number().optional(),
            discountAmount: zod_4.z.number().optional(),
            finalAmount: zod_4.z.number().optional(),
            paymentReceivedDate: zod_4.z.date().optional(),
            createdBy: zod_4.z.string().uuid()
        });
        insertBudgetSchema = zod_4.z.object({
            buildingId: zod_4.z.string().uuid(),
            year: zod_4.z.number().int(),
            name: zod_4.z.string(),
            description: zod_4.z.string().optional(),
            category: zod_4.z.string(),
            budgetedAmount: zod_4.z.number(),
            actualAmount: zod_4.z.number().optional(),
            createdBy: zod_4.z.string().uuid()
        });
        insertMonthlyBudgetSchema = (0, drizzle_zod_1.createInsertSchema)(monthlyBudgets).omit({
            id: true,
            createdAt: true,
            updatedAt: true
        });
    }
});
// shared/schemas/operations.ts
const drizzle_orm_4 = require("drizzle-orm");
const pg_core_4 = require("drizzle-orm/pg-core");
const zod_5 = require("zod");
var maintenanceStatusEnum, maintenancePriorityEnum, notificationTypeEnum, demandTypeEnum, demandStatusEnum, bugStatusEnum, bugPriorityEnum, bugCategoryEnum, featureRequestStatusEnum, featureRequestCategoryEnum, maintenanceRequests, notifications, demands, demandComments, bugs, featureRequests, featureRequestUpvotes, insertMaintenanceRequestSchema, insertNotificationSchema, insertDemandSchema, insertDemandCommentSchema, insertBugSchema, insertFeatureRequestSchema, insertFeatureRequestUpvoteSchema;
var init_operations = __esm({
    "shared/schemas/operations.ts"() {
        init_core();
        init_property();
        maintenanceStatusEnum = (0, pg_core_4.pgEnum)("maintenance_status", [
            "submitted",
            "acknowledged",
            "in_progress",
            "completed",
            "cancelled"
        ]);
        maintenancePriorityEnum = (0, pg_core_4.pgEnum)("maintenance_priority", [
            "low",
            "medium",
            "high",
            "urgent",
            "emergency"
        ]);
        notificationTypeEnum = (0, pg_core_4.pgEnum)("notification_type", [
            "bill_reminder",
            "maintenance_update",
            "announcement",
            "system",
            "emergency"
        ]);
        demandTypeEnum = (0, pg_core_4.pgEnum)("demand_type", [
            "maintenance",
            "complaint",
            "information",
            "other"
        ]);
        demandStatusEnum = (0, pg_core_4.pgEnum)("demand_status", [
            "draft",
            "submitted",
            "under_review",
            "approved",
            "in_progress",
            "completed",
            "rejected",
            "cancelled"
        ]);
        bugStatusEnum = (0, pg_core_4.pgEnum)("bug_status", [
            "new",
            "acknowledged",
            "in_progress",
            "resolved",
            "closed"
        ]);
        bugPriorityEnum = (0, pg_core_4.pgEnum)("bug_priority", ["low", "medium", "high", "critical"]);
        bugCategoryEnum = (0, pg_core_4.pgEnum)("bug_category", [
            "ui_ux",
            "functionality",
            "performance",
            "data",
            "security",
            "integration",
            "other"
        ]);
        featureRequestStatusEnum = (0, pg_core_4.pgEnum)("feature_request_status", [
            "submitted",
            "under_review",
            "planned",
            "in_progress",
            "completed",
            "rejected"
        ]);
        featureRequestCategoryEnum = (0, pg_core_4.pgEnum)("feature_request_category", [
            "dashboard",
            "property_management",
            "resident_management",
            "financial_management",
            "maintenance",
            "document_management",
            "communication",
            "reports",
            "mobile_app",
            "integrations",
            "security",
            "performance",
            "other"
        ]);
        maintenanceRequests = (0, pg_core_4.pgTable)("maintenance_requests", {
            id: (0, pg_core_4.uuid)("id").primaryKey().default((0, drizzle_orm_4.sql) `gen_random_uuid()`),
            residenceId: (0, pg_core_4.varchar)("residence_id").notNull().references(() => residences.id),
            submittedBy: (0, pg_core_4.varchar)("submitted_by").notNull().references(() => users.id),
            assignedTo: (0, pg_core_4.varchar)("assigned_to").references(() => users.id),
            title: (0, pg_core_4.text)("title").notNull(),
            description: (0, pg_core_4.text)("description").notNull(),
            category: (0, pg_core_4.text)("category").notNull(),
            // 'plumbing', 'electrical', 'hvac', 'general', etc.
            priority: maintenancePriorityEnum("priority").notNull().default("medium"),
            status: maintenanceStatusEnum("status").notNull().default("submitted"),
            estimatedCost: (0, pg_core_4.decimal)("estimated_cost", { precision: 10, scale: 2 }),
            actualCost: (0, pg_core_4.decimal)("actual_cost", { precision: 10, scale: 2 }),
            scheduledDate: (0, pg_core_4.timestamp)("scheduled_date"),
            completedDate: (0, pg_core_4.timestamp)("completed_date"),
            notes: (0, pg_core_4.text)("notes"),
            images: (0, pg_core_4.jsonb)("images"),
            // Array of image URLs
            createdAt: (0, pg_core_4.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_4.timestamp)("updated_at").defaultNow()
        });
        notifications = (0, pg_core_4.pgTable)("notifications", {
            id: (0, pg_core_4.varchar)("id").primaryKey().default((0, drizzle_orm_4.sql) `gen_random_uuid()`),
            userId: (0, pg_core_4.varchar)("user_id").notNull().references(() => users.id),
            type: notificationTypeEnum("type").notNull(),
            title: (0, pg_core_4.text)("title").notNull(),
            message: (0, pg_core_4.text)("message").notNull(),
            relatedEntityId: (0, pg_core_4.varchar)("related_entity_id"),
            // ID of related bill, maintenance request, etc.
            relatedEntityType: (0, pg_core_4.text)("related_entity_type"),
            // 'bill', 'maintenance_request', etc.
            isRead: (0, pg_core_4.boolean)("is_read").notNull().default(false),
            readAt: (0, pg_core_4.timestamp)("read_at"),
            createdAt: (0, pg_core_4.timestamp)("created_at").defaultNow()
        });
        demands = (0, pg_core_4.pgTable)("demands", {
            id: (0, pg_core_4.uuid)("id").primaryKey().default((0, drizzle_orm_4.sql) `gen_random_uuid()`),
            submitterId: (0, pg_core_4.varchar)("submitter_id").notNull().references(() => users.id),
            type: demandTypeEnum("type").notNull(),
            assignationResidenceId: (0, pg_core_4.varchar)("assignation_residence_id").references(() => residences.id),
            assignationBuildingId: (0, pg_core_4.varchar)("assignation_building_id").references(() => buildings.id),
            description: (0, pg_core_4.text)("description").notNull(),
            filePath: (0, pg_core_4.text)("file_path"),
            // Path to uploaded file
            fileName: (0, pg_core_4.text)("file_name"),
            // Original filename
            fileSize: (0, pg_core_4.integer)("file_size"),
            // File size in bytes
            residenceId: (0, pg_core_4.varchar)("residence_id").references(() => residences.id),
            buildingId: (0, pg_core_4.varchar)("building_id").notNull().references(() => buildings.id),
            status: demandStatusEnum("status").notNull().default("draft"),
            reviewedBy: (0, pg_core_4.varchar)("reviewed_by").references(() => users.id),
            reviewedAt: (0, pg_core_4.timestamp)("reviewed_at"),
            reviewNotes: (0, pg_core_4.text)("review_notes"),
            createdAt: (0, pg_core_4.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_4.timestamp)("updated_at").defaultNow()
        });
        demandComments = (0, pg_core_4.pgTable)("demands_comments", {
            id: (0, pg_core_4.text)("id").primaryKey().default((0, drizzle_orm_4.sql) `gen_random_uuid()`),
            demandId: (0, pg_core_4.uuid)("demand_id").notNull().references(() => demands.id),
            commenterId: (0, pg_core_4.text)("commenter_id").notNull().references(() => users.id),
            commentText: (0, pg_core_4.text)("comment_text").notNull(),
            commentType: (0, pg_core_4.text)("comment_type"),
            isInternal: (0, pg_core_4.boolean)("is_internal").default(false),
            createdAt: (0, pg_core_4.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_4.timestamp)("updated_at").defaultNow()
        });
        bugs = (0, pg_core_4.pgTable)("bugs", {
            id: (0, pg_core_4.varchar)("id").primaryKey().default((0, drizzle_orm_4.sql) `gen_random_uuid()`),
            createdBy: (0, pg_core_4.varchar)("created_by").notNull().references(() => users.id),
            title: (0, pg_core_4.text)("title").notNull(),
            description: (0, pg_core_4.text)("description").notNull(),
            category: bugCategoryEnum("category").notNull(),
            page: (0, pg_core_4.text)("page").notNull(),
            // The page where the bug was found
            priority: bugPriorityEnum("priority").notNull().default("medium"),
            status: bugStatusEnum("status").notNull().default("new"),
            assignedTo: (0, pg_core_4.varchar)("assigned_to").references(() => users.id),
            resolvedAt: (0, pg_core_4.timestamp)("resolved_at"),
            resolvedBy: (0, pg_core_4.varchar)("resolved_by").references(() => users.id),
            notes: (0, pg_core_4.text)("notes"),
            // Internal notes for resolution
            reproductionSteps: (0, pg_core_4.text)("reproduction_steps"),
            // Steps to reproduce the bug
            environment: (0, pg_core_4.text)("environment"),
            // Browser, OS, device info
            // File attachment fields (single file per bug like documents)
            filePath: (0, pg_core_4.text)("file_path"),
            // Path to the uploaded file
            fileName: (0, pg_core_4.text)("file_name"),
            // Original file name
            fileSize: (0, pg_core_4.integer)("file_size"),
            // File size in bytes
            createdAt: (0, pg_core_4.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_4.timestamp)("updated_at").defaultNow()
        });
        featureRequests = (0, pg_core_4.pgTable)("feature_requests", {
            id: (0, pg_core_4.varchar)("id").primaryKey().default((0, drizzle_orm_4.sql) `gen_random_uuid()`),
            createdBy: (0, pg_core_4.varchar)("created_by").notNull().references(() => users.id),
            title: (0, pg_core_4.text)("title").notNull(),
            description: (0, pg_core_4.text)("description").notNull(),
            need: (0, pg_core_4.text)("need").notNull(),
            // The specific need this feature addresses
            category: featureRequestCategoryEnum("category").notNull(),
            page: (0, pg_core_4.text)("page").notNull(),
            // The page/section where this feature should be added
            status: featureRequestStatusEnum("status").notNull().default("submitted"),
            upvoteCount: (0, pg_core_4.integer)("upvote_count").notNull().default(0),
            assignedTo: (0, pg_core_4.varchar)("assigned_to").references(() => users.id),
            reviewedBy: (0, pg_core_4.varchar)("reviewed_by").references(() => users.id),
            reviewedAt: (0, pg_core_4.timestamp)("reviewed_at"),
            adminNotes: (0, pg_core_4.text)("admin_notes"),
            // Internal notes for admins only
            mergedIntoId: (0, pg_core_4.varchar)("merged_into_id"),
            // If merged into another request
            // File attachment fields (single file per feature request like documents)
            filePath: (0, pg_core_4.text)("file_path"),
            // Path to the uploaded file
            fileName: (0, pg_core_4.text)("file_name"),
            // Original file name
            fileSize: (0, pg_core_4.integer)("file_size"),
            // File size in bytes
            createdAt: (0, pg_core_4.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_4.timestamp)("updated_at").defaultNow()
        });
        featureRequestUpvotes = (0, pg_core_4.pgTable)("feature_request_upvotes", {
            id: (0, pg_core_4.varchar)("id").primaryKey().default((0, drizzle_orm_4.sql) `gen_random_uuid()`),
            featureRequestId: (0, pg_core_4.varchar)("feature_request_id").notNull().references(() => featureRequests.id),
            userId: (0, pg_core_4.varchar)("user_id").notNull().references(() => users.id),
            createdAt: (0, pg_core_4.timestamp)("created_at").defaultNow()
        });
        insertMaintenanceRequestSchema = zod_5.z.object({
            residenceId: zod_5.z.string().uuid(),
            submittedBy: zod_5.z.string().uuid(),
            assignedTo: zod_5.z.string().uuid().optional(),
            title: zod_5.z.string(),
            description: zod_5.z.string(),
            category: zod_5.z.string(),
            priority: zod_5.z.string().default("medium"),
            estimatedCost: zod_5.z.number().optional(),
            scheduledDate: zod_5.z.date().optional(),
            notes: zod_5.z.string().optional(),
            images: zod_5.z.array(zod_5.z.string()).optional()
        });
        insertNotificationSchema = zod_5.z.object({
            userId: zod_5.z.string().uuid(),
            type: zod_5.z.enum(["bill_reminder", "maintenance_update", "announcement", "system", "emergency"]),
            title: zod_5.z.string(),
            message: zod_5.z.string(),
            relatedEntityId: zod_5.z.string().uuid().optional(),
            relatedEntityType: zod_5.z.string().optional()
        });
        insertDemandSchema = zod_5.z.object({
            submitterId: zod_5.z.string().uuid(),
            type: zod_5.z.enum(["maintenance", "complaint", "information", "other"]),
            assignationResidenceId: zod_5.z.string().uuid().optional(),
            assignationBuildingId: zod_5.z.string().uuid().optional(),
            description: zod_5.z.string().min(10, "Description must be at least 10 characters").max(2e3, "Description must not exceed 2000 characters"),
            filePath: zod_5.z.string().optional(),
            // Path to uploaded file
            fileName: zod_5.z.string().optional(),
            // Original filename  
            fileSize: zod_5.z.number().int().optional(),
            // File size in bytes
            residenceId: zod_5.z.string().uuid().optional(),
            buildingId: zod_5.z.string().uuid().optional(),
            status: zod_5.z.string().default("submitted"),
            reviewNotes: zod_5.z.string().optional()
        });
        insertDemandCommentSchema = zod_5.z.object({
            demandId: zod_5.z.string().uuid(),
            commenterId: zod_5.z.string().uuid(),
            commentText: zod_5.z.string().min(1, "Comment content is required").max(1e3, "Comment must not exceed 1000 characters"),
            commentType: zod_5.z.string().optional(),
            isInternal: zod_5.z.boolean().default(false)
        });
        insertBugSchema = zod_5.z.object({
            createdBy: zod_5.z.string().uuid(),
            title: zod_5.z.string().min(1, "Title is required").max(200, "Title must not exceed 200 characters"),
            description: zod_5.z.string().min(10, "Description must be at least 10 characters").max(2e3, "Description must not exceed 2000 characters"),
            category: zod_5.z.enum([
                "ui_ux",
                "functionality",
                "performance",
                "data",
                "security",
                "integration",
                "other"
            ]),
            page: zod_5.z.string().min(1, "Page is required"),
            priority: zod_5.z.enum(["low", "medium", "high", "critical"]).default("medium"),
            reproductionSteps: zod_5.z.string().optional(),
            environment: zod_5.z.string().optional()
        });
        insertFeatureRequestSchema = zod_5.z.object({
            createdBy: zod_5.z.string().uuid(),
            title: zod_5.z.string().min(1, "Title is required").max(200, "Title must not exceed 200 characters"),
            description: zod_5.z.string().min(10, "Description must be at least 10 characters").max(2e3, "Description must not exceed 2000 characters"),
            need: zod_5.z.string().min(5, "Need must be at least 5 characters").max(500, "Need must not exceed 500 characters"),
            category: zod_5.z.enum([
                "dashboard",
                "property_management",
                "resident_management",
                "financial_management",
                "maintenance",
                "document_management",
                "communication",
                "reports",
                "mobile_app",
                "integrations",
                "security",
                "performance",
                "other"
            ]),
            page: zod_5.z.string().min(1, "Page is required"),
            // File attachment fields
            filePath: zod_5.z.string().optional(),
            // Path to the uploaded file
            fileName: zod_5.z.string().optional(),
            // Original file name
            fileSize: zod_5.z.number().int().optional()
            // File size in bytes
        });
        insertFeatureRequestUpvoteSchema = zod_5.z.object({
            featureRequestId: zod_5.z.string().uuid(),
            userId: zod_5.z.string().uuid()
        });
    }
});
// shared/schemas/documents.ts
const drizzle_orm_5 = require("drizzle-orm");
const pg_core_5 = require("drizzle-orm/pg-core");
const zod_6 = require("zod");
var documents, insertDocumentSchema, attachDocumentSchema, DOCUMENT_TYPES, ATTACHABLE_ENTITY_TYPES;
var init_documents = __esm({
    "shared/schemas/documents.ts"() {
        init_property();
        documents = (0, pg_core_5.pgTable)("documents", {
            id: (0, pg_core_5.varchar)("id").primaryKey().default((0, drizzle_orm_5.sql) `gen_random_uuid()`),
            name: (0, pg_core_5.text)("name").notNull(),
            description: (0, pg_core_5.text)("description"),
            documentType: (0, pg_core_5.text)("document_type").notNull(),
            filePath: (0, pg_core_5.text)("file_path").notNull().unique(),
            fileName: (0, pg_core_5.text)("file_name"),
            // Original filename
            fileSize: (0, pg_core_5.integer)("file_size"),
            // File size in bytes
            mimeType: (0, pg_core_5.text)("mime_type"),
            // MIME type for proper handling
            isVisibleToTenants: (0, pg_core_5.boolean)("is_visible_to_tenants").default(false).notNull(),
            residenceId: (0, pg_core_5.varchar)("residence_id").references(() => residences.id),
            buildingId: (0, pg_core_5.varchar)("building_id").references(() => buildings.id),
            uploadedById: (0, pg_core_5.varchar)("uploaded_by_id").notNull(),
            // Support for document attachments to forms
            attachedToType: (0, pg_core_5.text)("attached_to_type"),
            // 'bill', 'feature_request', 'bug_report', etc.
            attachedToId: (0, pg_core_5.varchar)("attached_to_id"),
            // ID of the entity this document is attached to
            createdAt: (0, pg_core_5.timestamp)("created_at").defaultNow().notNull(),
            updatedAt: (0, pg_core_5.timestamp)("updated_at").defaultNow().notNull()
        });
        insertDocumentSchema = zod_6.z.object({
            name: zod_6.z.string().min(1, "Document name is required"),
            description: zod_6.z.string().optional(),
            documentType: zod_6.z.string().min(1, "Document type is required"),
            filePath: zod_6.z.string().min(1, "File path is required"),
            fileName: zod_6.z.string().optional(),
            fileSize: zod_6.z.number().int().optional(),
            mimeType: zod_6.z.string().optional(),
            isVisibleToTenants: zod_6.z.boolean().default(false),
            residenceId: zod_6.z.string().uuid().optional(),
            buildingId: zod_6.z.string().uuid().optional(),
            uploadedById: zod_6.z.string().uuid().min(1, "Uploaded by user ID is required"),
            attachedToType: zod_6.z.string().optional(),
            attachedToId: zod_6.z.string().uuid().optional()
        });
        attachDocumentSchema = zod_6.z.object({
            name: zod_6.z.string().min(1, "Document name is required"),
            description: zod_6.z.string().optional(),
            documentType: zod_6.z.enum(["attachment", "screenshot", "evidence", "supporting_document"]).default("attachment"),
            fileName: zod_6.z.string().min(1, "File name is required"),
            fileSize: zod_6.z.number().int().optional(),
            mimeType: zod_6.z.string().optional(),
            attachedToType: zod_6.z.enum(["bill", "feature_request", "bug_report", "maintenance_request"]),
            attachedToId: zod_6.z.string().uuid().min(1, "Attached entity ID is required"),
            uploadedById: zod_6.z.string().uuid().min(1, "Uploaded by user ID is required")
        });
        DOCUMENT_TYPES = {
            // Building/Residence documents
            BYLAW: "bylaw",
            FINANCIAL: "financial",
            MAINTENANCE: "maintenance",
            LEGAL: "legal",
            MEETING_MINUTES: "meeting_minutes",
            INSURANCE: "insurance",
            CONTRACTS: "contracts",
            PERMITS: "permits",
            INSPECTION: "inspection",
            LEASE: "lease",
            CORRESPONDENCE: "correspondence",
            UTILITIES: "utilities",
            OTHER: "other",
            // Form attachments
            ATTACHMENT: "attachment",
            SCREENSHOT: "screenshot",
            EVIDENCE: "evidence",
            SUPPORTING_DOCUMENT: "supporting_document"
        };
        ATTACHABLE_ENTITY_TYPES = {
            BILL: "bill",
            FEATURE_REQUEST: "feature_request",
            BUG_REPORT: "bug_report",
            MAINTENANCE_REQUEST: "maintenance_request"
        };
    }
});
// shared/schemas/invoices.ts
const drizzle_orm_6 = require("drizzle-orm");
const pg_core_6 = require("drizzle-orm/pg-core");
const drizzle_zod_2 = require("drizzle-zod");
const zod_7 = require("zod");
function convertAiResponseToFormData(aiResponse) {
    return {
        vendorName: aiResponse.vendorName || "",
        invoiceNumber: aiResponse.invoiceNumber || "",
        totalAmount: aiResponse.totalAmount || 0,
        dueDate: aiResponse.dueDate ? new Date(aiResponse.dueDate) : /* @__PURE__ */ new Date(),
        paymentType: aiResponse.paymentType || "one-time",
        frequency: aiResponse.frequency || void 0,
        startDate: aiResponse.startDate ? new Date(aiResponse.startDate) : void 0,
        customPaymentDates: aiResponse.customPaymentDates ? aiResponse.customPaymentDates.map((date7) => new Date(date7)) : void 0
    };
}
var invoicePaymentTypeEnum, invoiceFrequencyEnum, invoices, insertInvoiceSchema, baseInvoiceInsertSchema, invoiceFormSchema, aiExtractionResponseSchema;
var init_invoices = __esm({
    "shared/schemas/invoices.ts"() {
        init_core();
        init_property();
        init_documents();
        invoicePaymentTypeEnum = (0, pg_core_6.pgEnum)("invoice_payment_type", [
            "one-time",
            "recurring"
        ]);
        invoiceFrequencyEnum = (0, pg_core_6.pgEnum)("invoice_frequency", [
            "monthly",
            "quarterly",
            "annually",
            "custom"
        ]);
        invoices = (0, pg_core_6.pgTable)("invoices", {
            id: (0, pg_core_6.varchar)("id").primaryKey().default((0, drizzle_orm_6.sql) `gen_random_uuid()`),
            // Core invoice fields as specified in requirements
            vendorName: (0, pg_core_6.text)("vendor_name").notNull(),
            invoiceNumber: (0, pg_core_6.text)("invoice_number").notNull(),
            totalAmount: (0, pg_core_6.decimal)("total_amount", { precision: 12, scale: 2 }).notNull(),
            dueDate: (0, pg_core_6.date)("due_date").notNull(),
            // Payment structure fields
            paymentType: invoicePaymentTypeEnum("payment_type").notNull(),
            // Recurring payment fields (conditional based on paymentType)
            frequency: invoiceFrequencyEnum("frequency"),
            // Only for recurring payments
            startDate: (0, pg_core_6.date)("start_date"),
            // For standard frequencies (not custom)
            customPaymentDates: (0, pg_core_6.date)("custom_payment_dates").array(),
            // Only for custom frequency
            // Document integration - links to uploaded invoice file (optional for testing)
            documentId: (0, pg_core_6.varchar)("document_id").references(() => documents.id),
            // AI extraction tracking
            isAiExtracted: (0, pg_core_6.boolean)("is_ai_extracted").default(false).notNull(),
            aiExtractionData: (0, pg_core_6.jsonb)("ai_extraction_data"),
            // Raw AI response for debugging
            extractionConfidence: (0, pg_core_6.decimal)("extraction_confidence", { precision: 5, scale: 4 }),
            // AI confidence score
            // Building/residence association
            buildingId: (0, pg_core_6.varchar)("building_id").references(() => buildings.id),
            residenceId: (0, pg_core_6.varchar)("residence_id").references(() => residences.id),
            // Audit fields
            createdBy: (0, pg_core_6.varchar)("created_by").notNull().references(() => users.id),
            createdAt: (0, pg_core_6.timestamp)("created_at").defaultNow().notNull(),
            updatedAt: (0, pg_core_6.timestamp)("updated_at").defaultNow().notNull()
        });
        insertInvoiceSchema = (0, drizzle_zod_2.createInsertSchema)(invoices, {
            // Core field validations
            vendorName: zod_7.z.string().min(1, "Vendor name is required").max(255, "Vendor name too long"),
            invoiceNumber: zod_7.z.string().min(1, "Invoice number is required").max(100, "Invoice number too long"),
            totalAmount: zod_7.z.coerce.number().positive("Total amount must be positive"),
            dueDate: zod_7.z.coerce.date(),
            // Payment type validation
            paymentType: zod_7.z.enum(["one-time", "recurring"]),
            // Frequency validation (only for recurring)
            frequency: zod_7.z.enum(["monthly", "quarterly", "annually", "custom"]).optional(),
            // Start date validation (for standard frequencies)
            startDate: zod_7.z.coerce.date().optional(),
            // Custom dates validation (only for custom frequency)
            customPaymentDates: zod_7.z.array(zod_7.z.coerce.date()).optional().refine((dates) => !dates || dates.length === 0 || dates.every((date7) => date7 instanceof Date && !isNaN(date7.getTime())), "All custom payment dates must be valid dates"),
            // Document reference (optional for testing)
            documentId: zod_7.z.string().uuid("Invalid document ID").optional(),
            // Optional associations
            buildingId: zod_7.z.string().uuid().optional(),
            residenceId: zod_7.z.string().uuid().optional(),
            // AI fields
            isAiExtracted: zod_7.z.boolean().default(false),
            extractionConfidence: zod_7.z.coerce.number().min(0).max(1).optional()
        }).omit({
            id: true,
            createdAt: true,
            updatedAt: true
        });
        baseInvoiceInsertSchema = insertInvoiceSchema;
        invoiceFormSchema = zod_7.z.object({
            title: zod_7.z.string().min(1, "Title is required"),
            description: zod_7.z.string().optional(),
            amount: zod_7.z.string().min(1, "Amount is required"),
            dueDate: zod_7.z.coerce.date(),
            category: zod_7.z.string().min(1, "Category is required"),
            paymentType: zod_7.z.enum(["one-time", "recurring"]),
            frequency: zod_7.z.enum(["monthly", "quarterly", "annually", "custom"]).optional(),
            startDate: zod_7.z.coerce.date().optional(),
            customPaymentDates: zod_7.z.array(zod_7.z.coerce.date()).optional(),
            documentId: zod_7.z.string().uuid("Invalid document ID").optional(),
            buildingId: zod_7.z.string().uuid().optional(),
            residenceId: zod_7.z.string().uuid().optional(),
            isAiExtracted: zod_7.z.boolean().default(false),
            extractionConfidence: zod_7.z.coerce.number().min(0).max(1).optional()
        }).superRefine((data, ctx) => {
            if (data.paymentType === "recurring") {
                if (!data.frequency) {
                    ctx.addIssue({
                        code: zod_7.z.ZodIssueCode.custom,
                        message: "Frequency is required for recurring payments",
                        path: ["frequency"]
                    });
                }
                if (data.frequency && ["monthly", "quarterly", "annually"].includes(data.frequency)) {
                    if (!data.startDate) {
                        ctx.addIssue({
                            code: zod_7.z.ZodIssueCode.custom,
                            message: "Start date is required for standard recurring frequencies",
                            path: ["startDate"]
                        });
                    }
                    if (data.customPaymentDates && data.customPaymentDates.length > 0) {
                        ctx.addIssue({
                            code: zod_7.z.ZodIssueCode.custom,
                            message: "Custom payment dates should not be set for standard frequencies",
                            path: ["customPaymentDates"]
                        });
                    }
                }
                if (data.frequency === "custom") {
                    if (!data.customPaymentDates || data.customPaymentDates.length === 0) {
                        ctx.addIssue({
                            code: zod_7.z.ZodIssueCode.custom,
                            message: "At least one custom payment date is required for custom frequency",
                            path: ["customPaymentDates"]
                        });
                    }
                    if (data.startDate) {
                        ctx.addIssue({
                            code: zod_7.z.ZodIssueCode.custom,
                            message: "Start date should not be set for custom frequency",
                            path: ["startDate"]
                        });
                    }
                    if (data.customPaymentDates && data.customPaymentDates.length > 0) {
                        const today = /* @__PURE__ */ new Date();
                        today.setHours(0, 0, 0, 0);
                        const sortedDates = [...data.customPaymentDates].sort((a, b) => a.getTime() - b.getTime());
                        if (JSON.stringify(data.customPaymentDates) !== JSON.stringify(sortedDates)) {
                            ctx.addIssue({
                                code: zod_7.z.ZodIssueCode.custom,
                                message: "Custom payment dates must be in chronological order",
                                path: ["customPaymentDates"]
                            });
                        }
                        const uniqueDates = new Set(data.customPaymentDates.map((d) => d.toISOString()));
                        if (uniqueDates.size !== data.customPaymentDates.length) {
                            ctx.addIssue({
                                code: zod_7.z.ZodIssueCode.custom,
                                message: "Custom payment dates must be unique",
                                path: ["customPaymentDates"]
                            });
                        }
                    }
                }
            }
            else {
                if (data.frequency || data.startDate || data.customPaymentDates && data.customPaymentDates.length > 0) {
                    ctx.addIssue({
                        code: zod_7.z.ZodIssueCode.custom,
                        message: "Recurring payment fields should not be set for one-time payments",
                        path: ["paymentType"]
                    });
                }
            }
        });
        aiExtractionResponseSchema = zod_7.z.object({
            vendorName: zod_7.z.string().nullable(),
            invoiceNumber: zod_7.z.string().nullable(),
            totalAmount: zod_7.z.number().nullable(),
            dueDate: zod_7.z.string().nullable(),
            // Will be converted to Date
            paymentType: zod_7.z.enum(["one-time", "recurring"]).nullable(),
            frequency: zod_7.z.enum(["monthly", "quarterly", "annually", "custom"]).nullable(),
            startDate: zod_7.z.string().nullable(),
            // Will be converted to Date
            customPaymentDates: zod_7.z.array(zod_7.z.string()).nullable()
            // Will be converted to Date[]
        });
    }
});
// shared/schemas/development.ts
const drizzle_orm_7 = require("drizzle-orm");
const pg_core_7 = require("drizzle-orm/pg-core");
const zod_8 = require("zod");
var suggestionCategoryEnum, suggestionPriorityEnum, suggestionStatusEnum, featureStatusEnum, featurePriorityEnum, featureCategoryEnum, actionableItemStatusEnum, improvementSuggestions, features, actionableItems, developmentPillars, workspaceStatus, qualityMetrics, frameworkConfiguration, insertImprovementSuggestionSchema, insertFeatureSchema, insertActionableItemSchema, insertPillarSchema, insertWorkspaceStatusSchema, insertQualityMetricSchema, insertFrameworkConfigSchema;
var init_development = __esm({
    "shared/schemas/development.ts"() {
        init_core();
        suggestionCategoryEnum = (0, pg_core_7.pgEnum)("suggestion_category", [
            "Code Quality",
            "Security",
            "Testing",
            "Documentation",
            "Performance",
            "Continuous Improvement",
            "Replit AI Agent Monitoring",
            "Replit App"
        ]);
        suggestionPriorityEnum = (0, pg_core_7.pgEnum)("suggestion_priority", [
            "Low",
            "Medium",
            "High",
            "Critical"
        ]);
        suggestionStatusEnum = (0, pg_core_7.pgEnum)("suggestion_status", ["New", "Acknowledged", "Done"]);
        featureStatusEnum = (0, pg_core_7.pgEnum)("feature_status", [
            "submitted",
            "planned",
            "in-progress",
            "ai-analyzed",
            "completed",
            "cancelled"
        ]);
        featurePriorityEnum = (0, pg_core_7.pgEnum)("feature_priority", [
            "low",
            "medium",
            "high",
            "critical"
        ]);
        featureCategoryEnum = (0, pg_core_7.pgEnum)("feature_category", [
            "Dashboard & Home",
            "Property Management",
            "Resident Management",
            "Financial Management",
            "Maintenance & Requests",
            "Document Management",
            "Communication",
            "AI & Automation",
            "Compliance & Security",
            "Analytics & Reporting",
            "Integration & API",
            "Infrastructure & Performance",
            "Website"
        ]);
        actionableItemStatusEnum = (0, pg_core_7.pgEnum)("actionable_item_status", [
            "pending",
            "in-progress",
            "completed",
            "blocked"
        ]);
        improvementSuggestions = (0, pg_core_7.pgTable)("improvement_suggestions", {
            id: (0, pg_core_7.uuid)("id").primaryKey().default((0, drizzle_orm_7.sql) `gen_random_uuid()`),
            title: (0, pg_core_7.text)("title").notNull(),
            description: (0, pg_core_7.text)("description").notNull(),
            category: suggestionCategoryEnum("category").notNull(),
            priority: suggestionPriorityEnum("priority").notNull(),
            status: suggestionStatusEnum("status").notNull().default("New"),
            filePath: (0, pg_core_7.text)("file_path"),
            technicalDetails: (0, pg_core_7.text)("technical_details"),
            businessImpact: (0, pg_core_7.text)("business_impact"),
            implementationEffort: (0, pg_core_7.text)("implementation_effort"),
            quebecComplianceRelevance: (0, pg_core_7.text)("quebec_compliance_relevance"),
            suggestedBy: (0, pg_core_7.varchar)("suggested_by").references(() => users.id),
            assignedTo: (0, pg_core_7.varchar)("assigned_to").references(() => users.id),
            createdAt: (0, pg_core_7.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_7.timestamp)("updated_at").defaultNow(),
            acknowledgedAt: (0, pg_core_7.timestamp)("acknowledged_at"),
            completedAt: (0, pg_core_7.timestamp)("completed_at")
        });
        features = (0, pg_core_7.pgTable)("features", {
            id: (0, pg_core_7.uuid)("id").primaryKey().default((0, drizzle_orm_7.sql) `gen_random_uuid()`),
            name: (0, pg_core_7.text)("name").notNull(),
            description: (0, pg_core_7.text)("description").notNull(),
            category: featureCategoryEnum("category").notNull(),
            status: featureStatusEnum("status").notNull().default("submitted"),
            priority: featurePriorityEnum("priority").notNull().default("medium"),
            requestedBy: (0, pg_core_7.text)("requested_by"),
            assignedTo: (0, pg_core_7.text)("assigned_to"),
            estimatedHours: (0, pg_core_7.integer)("estimated_hours"),
            actualHours: (0, pg_core_7.integer)("actual_hours"),
            startDate: (0, pg_core_7.date)("start_date"),
            completedDate: (0, pg_core_7.date)("completed_date"),
            isPublicRoadmap: (0, pg_core_7.boolean)("is_public_roadmap").notNull().default(true),
            tags: (0, pg_core_7.jsonb)("tags"),
            metadata: (0, pg_core_7.jsonb)("metadata"),
            createdAt: (0, pg_core_7.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_7.timestamp)("updated_at").defaultNow(),
            businessObjective: (0, pg_core_7.text)("business_objective"),
            targetUsers: (0, pg_core_7.text)("target_users"),
            successMetrics: (0, pg_core_7.text)("success_metrics"),
            technicalComplexity: (0, pg_core_7.text)("technical_complexity"),
            dependencies: (0, pg_core_7.text)("dependencies"),
            userFlow: (0, pg_core_7.text)("user_flow"),
            aiAnalysisResult: (0, pg_core_7.jsonb)("ai_analysis_result"),
            aiAnalyzedAt: (0, pg_core_7.timestamp)("ai_analyzed_at"),
            isStrategicPath: (0, pg_core_7.boolean)("is_strategic_path").notNull().default(false),
            syncedAt: (0, pg_core_7.timestamp)("synced_at")
        });
        actionableItems = (0, pg_core_7.pgTable)("actionable_items", {
            id: (0, pg_core_7.uuid)("id").primaryKey().default((0, drizzle_orm_7.sql) `gen_random_uuid()`),
            featureId: (0, pg_core_7.uuid)("feature_id").notNull().references(() => features.id),
            title: (0, pg_core_7.text)("title").notNull(),
            description: (0, pg_core_7.text)("description").notNull(),
            type: (0, pg_core_7.text)("type").notNull(),
            // 'code', 'test', 'documentation', 'design', etc.
            status: actionableItemStatusEnum("status").notNull().default("pending"),
            estimatedHours: (0, pg_core_7.integer)("estimated_hours"),
            actualHours: (0, pg_core_7.integer)("actual_hours"),
            assignedTo: (0, pg_core_7.varchar)("assigned_to").references(() => users.id),
            dependencies: (0, pg_core_7.jsonb)("dependencies"),
            // Array of other actionable item IDs
            acceptanceCriteria: (0, pg_core_7.text)("acceptance_criteria"),
            implementation_notes: (0, pg_core_7.text)("implementation_notes"),
            // AI-generated analysis fields
            technicalDetails: (0, pg_core_7.text)("technical_details"),
            implementationPrompt: (0, pg_core_7.text)("implementation_prompt"),
            testingRequirements: (0, pg_core_7.text)("testing_requirements"),
            estimatedEffort: (0, pg_core_7.text)("estimated_effort"),
            orderIndex: (0, pg_core_7.integer)("order_index").default(0).notNull(),
            createdAt: (0, pg_core_7.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_7.timestamp)("updated_at").defaultNow(),
            startedAt: (0, pg_core_7.timestamp)("started_at"),
            completedAt: (0, pg_core_7.timestamp)("completed_at")
        });
        developmentPillars = (0, pg_core_7.pgTable)("development_pillars", {
            id: (0, pg_core_7.varchar)("id").primaryKey().default((0, drizzle_orm_7.sql) `gen_random_uuid()`),
            name: (0, pg_core_7.text)("name").notNull(),
            description: (0, pg_core_7.text)("description").notNull(),
            status: (0, pg_core_7.text)("status").notNull().default("pending"),
            // 'pending', 'in-progress', 'complete'
            order: (0, pg_core_7.text)("order").notNull(),
            configuration: (0, pg_core_7.jsonb)("configuration"),
            createdAt: (0, pg_core_7.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_7.timestamp)("updated_at").defaultNow()
        });
        workspaceStatus = (0, pg_core_7.pgTable)("workspace_status", {
            id: (0, pg_core_7.varchar)("id").primaryKey().default((0, drizzle_orm_7.sql) `gen_random_uuid()`),
            component: (0, pg_core_7.text)("component").notNull(),
            status: (0, pg_core_7.text)("status").notNull().default("pending"),
            // 'pending', 'in-progress', 'complete'
            lastUpdated: (0, pg_core_7.timestamp)("last_updated").defaultNow()
        });
        qualityMetrics = (0, pg_core_7.pgTable)("quality_metrics", {
            id: (0, pg_core_7.varchar)("id").primaryKey().default((0, drizzle_orm_7.sql) `gen_random_uuid()`),
            metricType: (0, pg_core_7.text)("metric_type").notNull(),
            _value: (0, pg_core_7.text)("value").notNull(),
            timestamp: (0, pg_core_7.timestamp)("timestamp").defaultNow()
        });
        frameworkConfiguration = (0, pg_core_7.pgTable)("framework_configuration", {
            id: (0, pg_core_7.varchar)("id").primaryKey().default((0, drizzle_orm_7.sql) `gen_random_uuid()`),
            _key: (0, pg_core_7.text)("key").notNull().unique(),
            _value: (0, pg_core_7.text)("value").notNull(),
            description: (0, pg_core_7.text)("description"),
            createdAt: (0, pg_core_7.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_7.timestamp)("updated_at").defaultNow()
        });
        insertImprovementSuggestionSchema = zod_8.z.object({
            title: zod_8.z.string(),
            description: zod_8.z.string(),
            category: zod_8.z.string(),
            priority: zod_8.z.string().default("medium"),
            status: zod_8.z.string().default("new"),
            filePath: zod_8.z.string().optional(),
            technicalDetails: zod_8.z.string().optional(),
            businessImpact: zod_8.z.string().optional(),
            implementationEffort: zod_8.z.string().optional(),
            quebecComplianceRelevance: zod_8.z.string().optional(),
            suggestedBy: zod_8.z.string().uuid().optional(),
            assignedTo: zod_8.z.string().uuid().optional()
        });
        insertFeatureSchema = zod_8.z.object({
            name: zod_8.z.string(),
            description: zod_8.z.string(),
            category: zod_8.z.string(),
            status: zod_8.z.string().default("planned"),
            priority: zod_8.z.string().default("medium"),
            requestedBy: zod_8.z.string().uuid().optional(),
            assignedTo: zod_8.z.string().uuid().optional(),
            estimatedHours: zod_8.z.number().optional(),
            businessObjective: zod_8.z.string().optional(),
            targetUsers: zod_8.z.string().optional(),
            successMetrics: zod_8.z.string().optional(),
            technicalComplexity: zod_8.z.string().optional(),
            dependencies: zod_8.z.array(zod_8.z.string()).optional(),
            userFlow: zod_8.z.string().optional()
        });
        insertActionableItemSchema = zod_8.z.object({
            featureId: zod_8.z.string().uuid().optional(),
            title: zod_8.z.string(),
            description: zod_8.z.string(),
            type: zod_8.z.string(),
            status: zod_8.z.string().default("pending"),
            estimatedHours: zod_8.z.number().optional(),
            assignedTo: zod_8.z.string().uuid().optional(),
            dependencies: zod_8.z.array(zod_8.z.string()).optional(),
            acceptanceCriteria: zod_8.z.string().optional(),
            implementation_notes: zod_8.z.string().optional()
        });
        insertPillarSchema = zod_8.z.object({
            name: zod_8.z.string(),
            description: zod_8.z.string().optional(),
            status: zod_8.z.string().default("pending"),
            order: zod_8.z.number().int(),
            configuration: zod_8.z.record(zod_8.z.string(), zod_8.z.any()).optional()
        });
        insertWorkspaceStatusSchema = zod_8.z.object({
            component: zod_8.z.string(),
            status: zod_8.z.string().default("pending")
        });
        insertQualityMetricSchema = zod_8.z.object({
            metricType: zod_8.z.string(),
            _value: zod_8.z.string()
        });
        insertFrameworkConfigSchema = zod_8.z.object({
            _key: zod_8.z.string(),
            _value: zod_8.z.string(),
            description: zod_8.z.string().optional()
        });
    }
});
// shared/schemas/monitoring.ts
const drizzle_orm_8 = require("drizzle-orm");
const pg_core_8 = require("drizzle-orm/pg-core");
const zod_9 = require("zod");
var validationStatusEnum, issueSeverityEnum, metricTypeEnum, metricEffectivenessTracking, metricPredictions, predictionValidations, metricCalibrationData, qualityIssues, insertMetricEffectivenessTrackingSchema, insertMetricPredictionSchema, insertPredictionValidationSchema, insertMetricCalibrationDataSchema, insertQualityIssueSchema;
var init_monitoring = __esm({
    "shared/schemas/monitoring.ts"() {
        init_core();
        validationStatusEnum = (0, pg_core_8.pgEnum)("validation_status", [
            "pending",
            "true_positive",
            // Metric correctly predicted an issue
            "false_positive",
            // Metric predicted issue but none found
            "true_negative",
            // Metric correctly predicted no issue
            "false_negative"
            // Metric missed a real issue
        ]);
        issueSeverityEnum = (0, pg_core_8.pgEnum)("issue_severity", [
            "info",
            // Minor suggestions
            "low",
            // Non-critical improvements
            "medium",
            // Important but not urgent
            "high",
            // Significant issues affecting operations
            "critical",
            // Severe issues affecting compliance or safety
            "quebec_compliance"
            // Issues affecting Quebec Law 25 or provincial regulations
        ]);
        metricTypeEnum = (0, pg_core_8.pgEnum)("metric_type", [
            "code_coverage",
            "code_quality",
            "security_vulnerabilities",
            "build_time",
            "translation_coverage",
            "api_response_time",
            "memory_usage",
            "bundle_size",
            "database_query_time",
            "page_load_time",
            "accessibility_score",
            "seo_score",
            "quebec_compliance_score"
        ]);
        metricEffectivenessTracking = (0, pg_core_8.pgTable)("metric_effectiveness_tracking", {
            id: (0, pg_core_8.uuid)("id").primaryKey().default((0, drizzle_orm_8.sql) `gen_random_uuid()`),
            metricType: metricTypeEnum("metric_type").notNull(),
            calculatedValue: (0, pg_core_8.decimal)("calculated_value", { precision: 10, scale: 4 }).notNull(),
            actualOutcome: (0, pg_core_8.text)("actual_outcome").notNull(),
            accuracy: (0, pg_core_8.decimal)("accuracy", { precision: 5, scale: 4 }).notNull(),
            precision: (0, pg_core_8.decimal)("precision", { precision: 5, scale: 4 }).notNull(),
            recall: (0, pg_core_8.decimal)("recall", { precision: 5, scale: 4 }).notNull(),
            f1Score: (0, pg_core_8.decimal)("f1_score", { precision: 5, scale: 4 }).notNull(),
            calibrationScore: (0, pg_core_8.decimal)("calibration_score", { precision: 5, scale: 4 }),
            predictionConfidence: (0, pg_core_8.decimal)("prediction_confidence", { precision: 5, scale: 4 }),
            validationDate: (0, pg_core_8.date)("validation_date").notNull(),
            quebecComplianceImpact: (0, pg_core_8.boolean)("quebec_compliance_impact").notNull().default(false),
            propertyManagementContext: (0, pg_core_8.text)("property_management_context"),
            createdAt: (0, pg_core_8.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_8.timestamp)("updated_at").defaultNow()
        });
        metricPredictions = (0, pg_core_8.pgTable)("metric_predictions", {
            id: (0, pg_core_8.uuid)("id").primaryKey().default((0, drizzle_orm_8.sql) `gen_random_uuid()`),
            metricType: metricTypeEnum("metric_type").notNull(),
            predictedValue: (0, pg_core_8.decimal)("predicted_value", { precision: 10, scale: 4 }).notNull(),
            confidenceLevel: (0, pg_core_8.decimal)("confidence_level", { precision: 5, scale: 4 }).notNull(),
            thresholdUsed: (0, pg_core_8.decimal)("threshold_used", { precision: 10, scale: 4 }).notNull(),
            contextData: (0, pg_core_8.jsonb)("context_data"),
            predictionReason: (0, pg_core_8.text)("prediction_reason"),
            expectedSeverity: issueSeverityEnum("expected_severity").notNull(),
            quebecComplianceRelevant: (0, pg_core_8.boolean)("quebec_compliance_relevant").notNull().default(false),
            propertyManagementCategory: (0, pg_core_8.text)("property_management_category"),
            filePath: (0, pg_core_8.text)("file_path"),
            lineNumber: (0, pg_core_8.integer)("line_number"),
            createdAt: (0, pg_core_8.timestamp)("created_at").defaultNow()
        });
        predictionValidations = (0, pg_core_8.pgTable)("prediction_validations", {
            id: (0, pg_core_8.uuid)("id").primaryKey().default((0, drizzle_orm_8.sql) `gen_random_uuid()`),
            predictionId: (0, pg_core_8.uuid)("prediction_id").notNull().references(() => metricPredictions.id),
            validationStatus: validationStatusEnum("validation_status").notNull(),
            actualOutcome: (0, pg_core_8.text)("actual_outcome").notNull(),
            validationMethod: (0, pg_core_8.text)("validation_method").notNull(),
            validatorId: (0, pg_core_8.varchar)("validator_id").references(() => users.id),
            timeTaken: (0, pg_core_8.integer)("time_taken"),
            // Hours to validate
            impactLevel: issueSeverityEnum("impact_level"),
            resolutionActions: (0, pg_core_8.text)("resolution_actions"),
            quebecComplianceNotes: (0, pg_core_8.text)("quebec_compliance_notes"),
            costImpact: (0, pg_core_8.decimal)("cost_impact", { precision: 10, scale: 2 }),
            validatedAt: (0, pg_core_8.timestamp)("validated_at").notNull(),
            createdAt: (0, pg_core_8.timestamp)("created_at").defaultNow()
        });
        metricCalibrationData = (0, pg_core_8.pgTable)("metric_calibration_data", {
            id: (0, pg_core_8.uuid)("id").primaryKey().default((0, drizzle_orm_8.sql) `gen_random_uuid()`),
            metricType: metricTypeEnum("metric_type").notNull(),
            calibrationModel: (0, pg_core_8.text)("calibration_model").notNull(),
            trainingDataSize: (0, pg_core_8.integer)("training_data_size").notNull(),
            accuracy: (0, pg_core_8.decimal)("accuracy", { precision: 5, scale: 4 }).notNull(),
            precision: (0, pg_core_8.decimal)("precision", { precision: 5, scale: 4 }).notNull(),
            recall: (0, pg_core_8.decimal)("recall", { precision: 5, scale: 4 }).notNull(),
            f1Score: (0, pg_core_8.decimal)("f1_score", { precision: 5, scale: 4 }).notNull(),
            crossValidationScore: (0, pg_core_8.decimal)("cross_validation_score", { precision: 5, scale: 4 }),
            featureImportance: (0, pg_core_8.jsonb)("feature_importance"),
            hyperparameters: (0, pg_core_8.jsonb)("hyperparameters"),
            quebecSpecificFactors: (0, pg_core_8.jsonb)("quebec_specific_factors"),
            lastTrainingDate: (0, pg_core_8.date)("last_training_date").notNull(),
            modelVersion: (0, pg_core_8.text)("model_version").notNull(),
            isActive: (0, pg_core_8.boolean)("is_active").notNull().default(true),
            performanceMetrics: (0, pg_core_8.jsonb)("performance_metrics"),
            createdAt: (0, pg_core_8.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_8.timestamp)("updated_at").defaultNow()
        });
        qualityIssues = (0, pg_core_8.pgTable)("quality_issues", {
            id: (0, pg_core_8.uuid)("id").primaryKey().default((0, drizzle_orm_8.sql) `gen_random_uuid()`),
            title: (0, pg_core_8.text)("title").notNull(),
            description: (0, pg_core_8.text)("description").notNull(),
            category: (0, pg_core_8.text)("category").notNull(),
            severity: issueSeverityEnum("severity").notNull(),
            filePath: (0, pg_core_8.text)("file_path").notNull(),
            lineNumber: (0, pg_core_8.integer)("line_number"),
            detectionMethod: (0, pg_core_8.text)("detection_method").notNull(),
            detectedBy: (0, pg_core_8.varchar)("detected_by").references(() => users.id),
            relatedMetricType: metricTypeEnum("related_metric_type"),
            wasPredicted: (0, pg_core_8.boolean)("was_predicted").notNull().default(false),
            predictionId: (0, pg_core_8.uuid)("prediction_id").references(() => metricPredictions.id),
            resolutionStatus: (0, pg_core_8.text)("resolution_status").notNull().default("open"),
            resolutionTime: (0, pg_core_8.integer)("resolution_time"),
            // Hours to resolve
            resolutionActions: (0, pg_core_8.text)("resolution_actions"),
            quebecComplianceRelated: (0, pg_core_8.boolean)("quebec_compliance_related").notNull().default(false),
            propertyManagementImpact: (0, pg_core_8.text)("property_management_impact"),
            costToFix: (0, pg_core_8.decimal)("cost_to_fix", { precision: 10, scale: 2 }),
            actualCost: (0, pg_core_8.decimal)("actual_cost", { precision: 10, scale: 2 }),
            discoveredAt: (0, pg_core_8.timestamp)("discovered_at").notNull(),
            resolvedAt: (0, pg_core_8.timestamp)("resolved_at"),
            createdAt: (0, pg_core_8.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_8.timestamp)("updated_at").defaultNow()
        });
        insertMetricEffectivenessTrackingSchema = zod_9.z.object({
            metricType: zod_9.z.enum([
                "code_coverage",
                "code_quality",
                "security_vulnerabilities",
                "build_time",
                "translation_coverage",
                "api_response_time",
                "deployment_success_rate",
                "user_satisfaction",
                "performance_score",
                "test_reliability",
                "quebec_compliance_score",
                "maintenance_productivity"
            ]),
            calculatedValue: zod_9.z.number(),
            actualOutcome: zod_9.z.number(),
            accuracy: zod_9.z.number(),
            precision: zod_9.z.number(),
            recall: zod_9.z.number(),
            f1Score: zod_9.z.number(),
            calibrationScore: zod_9.z.number(),
            predictionConfidence: zod_9.z.number(),
            validationDate: zod_9.z.date(),
            quebecComplianceImpact: zod_9.z.string().optional(),
            propertyManagementContext: zod_9.z.string().optional()
        });
        insertMetricPredictionSchema = zod_9.z.object({
            metricType: zod_9.z.enum([
                "code_coverage",
                "code_quality",
                "security_vulnerabilities",
                "build_time",
                "translation_coverage",
                "api_response_time",
                "deployment_success_rate",
                "user_satisfaction",
                "performance_score",
                "test_reliability",
                "quebec_compliance_score",
                "maintenance_productivity"
            ]),
            predictedValue: zod_9.z.number(),
            confidenceLevel: zod_9.z.number(),
            thresholdUsed: zod_9.z.number(),
            contextData: zod_9.z.record(zod_9.z.string(), zod_9.z.any()).optional(),
            predictionReason: zod_9.z.string(),
            expectedSeverity: zod_9.z.string(),
            quebecComplianceRelevant: zod_9.z.boolean().default(false),
            propertyManagementCategory: zod_9.z.string().optional(),
            filePath: zod_9.z.string(),
            lineNumber: zod_9.z.number().int().optional()
        });
        insertPredictionValidationSchema = zod_9.z.object({
            predictionId: zod_9.z.string().uuid(),
            validationStatus: zod_9.z.enum(["validated", "failed", "partially_validated", "needs_review"]),
            actualOutcome: zod_9.z.number(),
            validationMethod: zod_9.z.string(),
            validatorId: zod_9.z.string().uuid().optional(),
            timeTaken: zod_9.z.number().optional(),
            impactLevel: zod_9.z.string().optional(),
            resolutionActions: zod_9.z.string().optional(),
            quebecComplianceNotes: zod_9.z.string().optional(),
            costImpact: zod_9.z.number().optional(),
            validatedAt: zod_9.z.date()
        });
        insertMetricCalibrationDataSchema = zod_9.z.object({
            metricType: zod_9.z.string(),
            calibrationModel: zod_9.z.string(),
            trainingDataSize: zod_9.z.number().int(),
            accuracy: zod_9.z.number(),
            precision: zod_9.z.number(),
            recall: zod_9.z.number(),
            f1Score: zod_9.z.number(),
            crossValidationScore: zod_9.z.number(),
            featureImportance: zod_9.z.record(zod_9.z.string(), zod_9.z.number()).optional(),
            hyperparameters: zod_9.z.record(zod_9.z.string(), zod_9.z.any()).optional(),
            quebecSpecificFactors: zod_9.z.record(zod_9.z.string(), zod_9.z.any()).optional(),
            lastTrainingDate: zod_9.z.date(),
            modelVersion: zod_9.z.string(),
            isActive: zod_9.z.boolean().default(true),
            performanceMetrics: zod_9.z.record(zod_9.z.string(), zod_9.z.number()).optional()
        });
        insertQualityIssueSchema = zod_9.z.object({
            title: zod_9.z.string(),
            description: zod_9.z.string(),
            category: zod_9.z.string(),
            severity: zod_9.z.string(),
            filePath: zod_9.z.string(),
            lineNumber: zod_9.z.number().int().optional(),
            detectionMethod: zod_9.z.string(),
            detectedBy: zod_9.z.string().uuid().optional(),
            relatedMetricType: zod_9.z.string().optional(),
            wasPredicted: zod_9.z.boolean().default(false),
            predictionId: zod_9.z.string().uuid().optional(),
            resolutionStatus: zod_9.z.string().default("open"),
            resolutionTime: zod_9.z.number().int().optional(),
            resolutionActions: zod_9.z.string().optional(),
            quebecComplianceRelated: zod_9.z.boolean().default(false),
            propertyManagementImpact: zod_9.z.string().optional(),
            costToFix: zod_9.z.number().optional(),
            actualCost: zod_9.z.number().optional(),
            discoveredAt: zod_9.z.date(),
            resolvedAt: zod_9.z.date().optional()
        });
    }
});
// shared/schemas/infrastructure.ts
const drizzle_orm_9 = require("drizzle-orm");
const pg_core_9 = require("drizzle-orm/pg-core");
const zod_10 = require("zod");
var sslStatusEnum, sslCertificates, sessions, insertSslCertificateSchema, insertSessionSchema;
var init_infrastructure = __esm({
    "shared/schemas/infrastructure.ts"() {
        init_core();
        sslStatusEnum = (0, pg_core_9.pgEnum)("ssl_status", [
            "active",
            "pending",
            "expired",
            "revoked",
            "failed"
        ]);
        sslCertificates = (0, pg_core_9.pgTable)("ssl_certificates", {
            id: (0, pg_core_9.uuid)("id").primaryKey().default((0, drizzle_orm_9.sql) `gen_random_uuid()`),
            domain: (0, pg_core_9.text)("domain").notNull().unique(),
            certificateData: (0, pg_core_9.text)("certificate_data").notNull(),
            privateKey: (0, pg_core_9.text)("private_key").notNull(),
            issuer: (0, pg_core_9.text)("issuer").notNull(),
            subject: (0, pg_core_9.text)("subject").notNull(),
            serialNumber: (0, pg_core_9.text)("serial_number").notNull(),
            fingerprint: (0, pg_core_9.text)("fingerprint").notNull(),
            validFrom: (0, pg_core_9.timestamp)("valid_from").notNull(),
            validTo: (0, pg_core_9.timestamp)("valid_to").notNull(),
            status: sslStatusEnum("status").notNull().default("pending"),
            autoRenew: (0, pg_core_9.boolean)("auto_renew").notNull().default(true),
            renewalAttempts: (0, pg_core_9.integer)("renewal_attempts").notNull().default(0),
            maxRenewalAttempts: (0, pg_core_9.integer)("max_renewal_attempts").notNull().default(3),
            dnsProvider: (0, pg_core_9.text)("dns_provider"),
            lastRenewalAttempt: (0, pg_core_9.timestamp)("last_renewal_attempt"),
            nextRenewalDate: (0, pg_core_9.timestamp)("next_renewal_date"),
            // Additional SSL management fields
            certificateChain: (0, pg_core_9.text)("certificate_chain"),
            renewalError: (0, pg_core_9.text)("renewal_error"),
            dnsCredentials: (0, pg_core_9.text)("dns_credentials"),
            notificationEmails: (0, pg_core_9.text)("notification_emails"),
            createdBy: (0, pg_core_9.varchar)("created_by").notNull().references(() => users.id),
            createdAt: (0, pg_core_9.timestamp)("created_at").defaultNow(),
            updatedAt: (0, pg_core_9.timestamp)("updated_at").defaultNow()
        });
        sessions = (0, pg_core_9.pgTable)("session", {
            sid: (0, pg_core_9.varchar)("sid").primaryKey().notNull(),
            sess: (0, pg_core_9.json)("sess").notNull(),
            expire: (0, pg_core_9.timestamp)("expire", { precision: 6 }).notNull()
        });
        insertSslCertificateSchema = zod_10.z.object({
            domain: zod_10.z.string(),
            certificateData: zod_10.z.string(),
            privateKey: zod_10.z.string(),
            issuer: zod_10.z.string(),
            subject: zod_10.z.string(),
            serialNumber: zod_10.z.string(),
            fingerprint: zod_10.z.string(),
            validFrom: zod_10.z.date(),
            validTo: zod_10.z.date(),
            status: zod_10.z.string().default("pending"),
            autoRenew: zod_10.z.boolean().default(true),
            renewalAttempts: zod_10.z.number().int().default(0),
            maxRenewalAttempts: zod_10.z.number().int().default(3),
            dnsProvider: zod_10.z.string().optional(),
            lastRenewalAttempt: zod_10.z.date().optional(),
            nextRenewalDate: zod_10.z.date().optional(),
            createdBy: zod_10.z.string().uuid()
        });
        insertSessionSchema = zod_10.z.object({
            sid: zod_10.z.string(),
            sess: zod_10.z.any(),
            // JSON data
            expire: zod_10.z.date()
        });
    }
});
// shared/schema.ts
var schema_exports = {};
__export(schema_exports, {
    ATTACHABLE_ENTITY_TYPES: () => ATTACHABLE_ENTITY_TYPES,
    DOCUMENT_TYPES: () => DOCUMENT_TYPES,
    actionEnum: () => actionEnum,
    actionableItemStatusEnum: () => actionableItemStatusEnum,
    actionableItems: () => actionableItems,
    aiExtractionResponseSchema: () => aiExtractionResponseSchema,
    attachDocumentSchema: () => attachDocumentSchema,
    baseInvoiceInsertSchema: () => baseInvoiceInsertSchema,
    billCategoryEnum: () => billCategoryEnum,
    billStatusEnum: () => billStatusEnum,
    bills: () => bills,
    bookingStatusEnum: () => bookingStatusEnum,
    bookings: () => bookings,
    budgets: () => budgets,
    bugCategoryEnum: () => bugCategoryEnum,
    bugPriorityEnum: () => bugPriorityEnum,
    bugStatusEnum: () => bugStatusEnum,
    bugs: () => bugs,
    buildingTypeEnum: () => buildingTypeEnum,
    buildings: () => buildings,
    commonSpaces: () => commonSpaces,
    contactCategoryEnum: () => contactCategoryEnum,
    contactEntityEnum: () => contactEntityEnum,
    contacts: () => contacts,
    convertAiResponseToFormData: () => convertAiResponseToFormData,
    demandComments: () => demandComments,
    demandStatusEnum: () => demandStatusEnum,
    demandTypeEnum: () => demandTypeEnum,
    demands: () => demands,
    developmentPillars: () => developmentPillars,
    documents: () => documents,
    featureCategoryEnum: () => featureCategoryEnum,
    featurePriorityEnum: () => featurePriorityEnum,
    featureRequestCategoryEnum: () => featureRequestCategoryEnum,
    featureRequestStatusEnum: () => featureRequestStatusEnum,
    featureRequestUpvotes: () => featureRequestUpvotes,
    featureRequests: () => featureRequests,
    featureStatusEnum: () => featureStatusEnum,
    features: () => features,
    frameworkConfiguration: () => frameworkConfiguration,
    improvementSuggestions: () => improvementSuggestions,
    insertActionableItemSchema: () => insertActionableItemSchema,
    insertBillSchema: () => insertBillSchema,
    insertBookingSchema: () => insertBookingSchema,
    insertBudgetSchema: () => insertBudgetSchema,
    insertBugSchema: () => insertBugSchema,
    insertBuildingSchema: () => insertBuildingSchema,
    insertCommonSpaceSchema: () => insertCommonSpaceSchema,
    insertContactSchema: () => insertContactSchema,
    insertDemandCommentSchema: () => insertDemandCommentSchema,
    insertDemandSchema: () => insertDemandSchema,
    insertDocumentSchema: () => insertDocumentSchema,
    insertFeatureRequestSchema: () => insertFeatureRequestSchema,
    insertFeatureRequestUpvoteSchema: () => insertFeatureRequestUpvoteSchema,
    insertFeatureSchema: () => insertFeatureSchema,
    insertFrameworkConfigSchema: () => insertFrameworkConfigSchema,
    insertImprovementSuggestionSchema: () => insertImprovementSuggestionSchema,
    insertInvitationAuditLogSchema: () => insertInvitationAuditLogSchema,
    insertInvitationSchema: () => insertInvitationSchema,
    insertInvoiceSchema: () => insertInvoiceSchema,
    insertMaintenanceRequestSchema: () => insertMaintenanceRequestSchema,
    insertMetricCalibrationDataSchema: () => insertMetricCalibrationDataSchema,
    insertMetricEffectivenessTrackingSchema: () => insertMetricEffectivenessTrackingSchema,
    insertMetricPredictionSchema: () => insertMetricPredictionSchema,
    insertMonthlyBudgetSchema: () => insertMonthlyBudgetSchema,
    insertNotificationSchema: () => insertNotificationSchema,
    insertOldBillSchema: () => insertOldBillSchema,
    insertOrganizationSchema: () => insertOrganizationSchema,
    insertPasswordResetTokenSchema: () => insertPasswordResetTokenSchema,
    insertPermissionSchema: () => insertPermissionSchema,
    insertPillarSchema: () => insertPillarSchema,
    insertPredictionValidationSchema: () => insertPredictionValidationSchema,
    insertQualityIssueSchema: () => insertQualityIssueSchema,
    insertQualityMetricSchema: () => insertQualityMetricSchema,
    insertResidenceSchema: () => insertResidenceSchema,
    insertRolePermissionSchema: () => insertRolePermissionSchema,
    insertSessionSchema: () => insertSessionSchema,
    insertSslCertificateSchema: () => insertSslCertificateSchema,
    insertUserBookingRestrictionSchema: () => insertUserBookingRestrictionSchema,
    insertUserOrganizationSchema: () => insertUserOrganizationSchema,
    insertUserPermissionSchema: () => insertUserPermissionSchema,
    insertUserResidenceSchema: () => insertUserResidenceSchema,
    insertUserSchema: () => insertUserSchema,
    insertUserTimeLimitSchema: () => insertUserTimeLimitSchema,
    insertWorkspaceStatusSchema: () => insertWorkspaceStatusSchema,
    invitationAuditLog: () => invitationAuditLog,
    invitationStatusEnum: () => invitationStatusEnum,
    invitations: () => invitations,
    invoiceFormSchema: () => invoiceFormSchema,
    invoiceFrequencyEnum: () => invoiceFrequencyEnum,
    invoicePaymentTypeEnum: () => invoicePaymentTypeEnum,
    invoices: () => invoices,
    issueSeverityEnum: () => issueSeverityEnum,
    maintenancePriorityEnum: () => maintenancePriorityEnum,
    maintenanceRequests: () => maintenanceRequests,
    maintenanceStatusEnum: () => maintenanceStatusEnum,
    metricCalibrationData: () => metricCalibrationData,
    metricEffectivenessTracking: () => metricEffectivenessTracking,
    metricPredictions: () => metricPredictions,
    metricTypeEnum: () => metricTypeEnum,
    monthlyBudgets: () => monthlyBudgets,
    notificationTypeEnum: () => notificationTypeEnum,
    notifications: () => notifications,
    oldBillTypeEnum: () => oldBillTypeEnum,
    oldBills: () => oldBills,
    organizations: () => organizations,
    passwordResetTokens: () => passwordResetTokens,
    paymentTypeEnum: () => paymentTypeEnum,
    permissions: () => permissions,
    predictionValidations: () => predictionValidations,
    qualityIssues: () => qualityIssues,
    qualityMetrics: () => qualityMetrics,
    residences: () => residences,
    resourceTypeEnum: () => resourceTypeEnum,
    rolePermissions: () => rolePermissions,
    schedulePaymentEnum: () => schedulePaymentEnum,
    sessions: () => sessions,
    sslCertificates: () => sslCertificates,
    sslStatusEnum: () => sslStatusEnum,
    suggestionCategoryEnum: () => suggestionCategoryEnum,
    suggestionPriorityEnum: () => suggestionPriorityEnum,
    suggestionStatusEnum: () => suggestionStatusEnum,
    userBookingRestrictions: () => userBookingRestrictions,
    userOrganizations: () => userOrganizations,
    userPermissions: () => userPermissions,
    userResidences: () => userResidences,
    userRoleEnum: () => userRoleEnum,
    userTimeLimits: () => userTimeLimits,
    users: () => users,
    validationStatusEnum: () => validationStatusEnum,
    workspaceStatus: () => workspaceStatus
});
var init_schema = __esm({
    "shared/schema.ts"() {
        init_core();
        init_property();
        init_financial();
        init_operations();
        init_documents();
        init_invoices();
        init_development();
        init_monitoring();
        init_infrastructure();
        init_operations();
        init_documents();
        init_development();
        init_infrastructure();
    }
});
// server/db.ts
var db_exports = {};
__export(db_exports, {
    db: () => db,
    pool: () => pool,
    sql: () => sql11
});
const serverless_1 = require("@neondatabase/serverless");
const neon_http_1 = require("drizzle-orm/neon-http");
var databaseUrl, isUsingKoveoDb, sql11, schema, db, pool;
var init_db = __esm({
    "server/db.ts"() {
        init_config();
        init_schema();
        databaseUrl = config.database.url;
        if (!databaseUrl) {
            throw new Error("DATABASE_URL must be set. Did you forget to provision a database?");
        }
        isUsingKoveoDb = databaseUrl.includes("DATABASE_URL_KOVEO") || config.server.isProduction && process.env.DATABASE_URL_KOVEO;
        console.log("\u{1F517} Connecting to database with URL:", databaseUrl.substring(0, 50) + "...");
        console.log("\u{1F30D} Environment:", config.server.nodeEnv);
        console.log(`\u{1F4CA} Database: Using ${config.server.isProduction ? "PRODUCTION (DATABASE_URL_KOVEO)" : "DEVELOPMENT (DATABASE_URL)"} database`);
        sql11 = (0, serverless_1.neon)(databaseUrl, {
            arrayMode: false,
            fullResults: false
        });
        (async () => {
            try {
                const result = await sql11 `SELECT version()`;
                console.log("\u2705 Database connection successful:", result[0].version.substring(0, 50) + "...");
            }
            catch (error) {
                console.error("\u274C Database connection failed:", error.message);
            }
        })();
        schema = {
            users,
            organizations,
            buildings,
            residences,
            userOrganizations,
            userResidences,
            invitations,
            documents,
            bills,
            demands,
            commonSpaces,
            passwordResetTokens,
            maintenanceRequests,
            permissions,
            userPermissions,
            rolePermissions,
            budgets,
            monthlyBudgets
        };
        db = (0, neon_http_1.drizzle)(sql11, { schema });
        console.log("\u{1F4CA} Database initialized with", Object.keys(schema).length, "tables");
        pool = sql11;
    }
});
// server/database-optimization.ts
var database_optimization_exports = {};
__export(database_optimization_exports, {
    DatabaseMaintenance: () => DatabaseMaintenance,
    DatabaseOptimization: () => DatabaseOptimization,
    PaginationHelper: () => PaginationHelper,
    QueryOptimizer: () => QueryOptimizer
});
const drizzle_orm_10 = require("drizzle-orm");
var PaginationHelper, DatabaseOptimization, QueryOptimizer, DatabaseMaintenance;
var init_database_optimization = __esm({
    "server/database-optimization.ts"() {
        PaginationHelper = class {
            /**
             * Generates LIMIT and OFFSET clause for pagination.
             * @param options
             * @param _options
             */
            static getPaginationClause(_options) {
                const offset = (_options.page - 1) * _options.pageSize;
                return `LIMIT ${_options.pageSize} OFFSET ${offset}`;
            }
            /**
             * Generates ORDER BY clause for sorting.
             * @param options
             * @param _options
             */
            static getSortClause(_options) {
                if (!_options.sortBy) {
                    return "";
                }
                return `ORDER BY ${_options.sortBy} ${_options.sortDirection || "ASC"}`;
            }
            /**
             * Calculates total pages for pagination controls.
             * @param totalRecords
             * @param pageSize
             */
            static calculateTotalPages(totalRecords, pageSize) {
                return Math.ceil(totalRecords / pageSize);
            }
            /**
             * Validates pagination parameters.
             * @param options
             * @param _options
             */
            static validatePagination(_options) {
                if (_options.page < 1) {
                    throw new Error("Page number must be 1 or greater");
                }
                if (_options.pageSize < 1 || _options.pageSize > 1e3) {
                    throw new Error("Page size must be between 1 and 1000");
                }
            }
        };
        DatabaseOptimization = {
            /**
             * Core indexes for frequently queried foreign keys and search fields.
             * These indexes target the most common query patterns in property management.
             */
            coreIndexes: [
                // Users table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email ON users(email)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_role ON users(role)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_active ON users(is_active)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_last_login ON users(last_login_at)",
                // Organizations table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_type ON organizations(type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_active ON organizations(is_active)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_city ON organizations(city)",
                // Buildings table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_org_id ON buildings(organization_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_type ON buildings(building_type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_active ON buildings(is_active)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_city ON buildings(city)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_postal ON buildings(postal_code)",
                // Residences table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_building_id ON residences(building_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_unit ON residences(unit_number)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_active ON residences(is_active)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_floor ON residences(floor)",
                // User-Residences relationship indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_user_id ON user_residences(user_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_residence_id ON user_residences(residence_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_active ON user_residences(is_active)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_relationship ON user_residences(relationship_type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_dates ON user_residences(start_date, end_date)",
                // Bills table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_residence_id ON bills(residence_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_number ON bills(bill_number)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_status ON bills(status)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_type ON bills(type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_due_date ON bills(due_date)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_created_by ON bills(created_by)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_issue_date ON bills(issue_date)",
                // Maintenance requests indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_residence_id ON maintenance_requests(residence_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_submitted_by ON maintenance_requests(submitted_by)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_assigned_to ON maintenance_requests(assigned_to)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_status ON maintenance_requests(status)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_priority ON maintenance_requests(priority)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_category ON maintenance_requests(category)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_scheduled ON maintenance_requests(scheduled_date)",
                // Budgets table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_building_id ON budgets(building_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_year ON budgets(year)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_category ON budgets(category)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_active ON budgets(is_active)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_created_by ON budgets(created_by)",
                // Documents table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_org_id ON documents(organization_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_building_id ON documents(building_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_residence_id ON documents(residence_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_category ON documents(category)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_public ON documents(is_public)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_documents_uploaded_by ON documents(uploaded_by)",
                // Notifications table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_user_id ON notifications(user_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_type ON notifications(type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_read ON notifications(is_read)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_entity ON notifications(related_entity_id, related_entity_type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_created ON notifications(created_at)"
            ],
            /**
             * Development framework indexes for quality metrics and pillars.
             */
            frameworkIndexes: [
                // Quality metrics indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_quality_metrics_type ON quality_metrics(metric_type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_quality_metrics_timestamp ON quality_metrics(timestamp)",
                // Framework configuration indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_framework_config_key ON framework_configuration(_key)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_framework_config_updated ON framework_configuration(updated_at)",
                // Workspace status indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_workspace_component ON workspace_status(component)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_workspace_status ON workspace_status(status)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_workspace_updated ON workspace_status(last_updated)",
                // Development pillars indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pillars_status ON development_pillars(status)",
                'CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pillars_order ON development_pillars("order")',
                // Metric effectiveness tracking indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_effectiveness_type ON metric_effectiveness_tracking(metric_type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_effectiveness_validation ON metric_effectiveness_tracking(validation_date)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_effectiveness_compliance ON metric_effectiveness_tracking(quebec_compliance_impact)",
                // Metric predictions indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_type ON metric_predictions(metric_type)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_created ON metric_predictions(created_at)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_compliance ON metric_predictions(quebec_compliance_relevant)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metric_predictions_category ON metric_predictions(property_management_category)",
                // Prediction validations indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_prediction_validations_prediction_id ON prediction_validations(prediction_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_prediction_validations_status ON prediction_validations(validation_status)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_prediction_validations_validated ON prediction_validations(validated_at)",
                // Features table indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_status ON features(status)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_priority ON features(priority)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_category ON features(category)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_strategic ON features(is_strategic_path)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_roadmap ON features(show_on_roadmap)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_created ON features(created_at)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_synced ON features(synced_at)",
                // Actionable items indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_actionable_items_feature_id ON actionable_items(feature_id)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_actionable_items_status ON actionable_items(status)",
                // Improvement suggestions indexes
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_category ON improvement_suggestions(category)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_priority ON improvement_suggestions(priority)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_status ON improvement_suggestions(status)",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_improvement_suggestions_created ON improvement_suggestions(created_at)"
            ],
            /**
             * Composite indexes for complex query patterns.
             */
            compositeIndexes: [
                // User residence active relationships
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_residences_active_relationship ON user_residences(user_id, residence_id) WHERE is_active = true",
                // Active bills by residence and status
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_residence_status ON bills(residence_id, status, due_date)",
                // Active maintenance requests by residence
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_residence_status ON maintenance_requests(residence_id, status, priority)",
                // Active buildings by organization
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_org_active ON buildings(organization_id, is_active)",
                // Active residences by building
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_building_active ON residences(building_id, is_active)",
                // Unread notifications by user
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_user_unread ON notifications(user_id, created_at) WHERE is_read = false",
                // Current year budgets by building
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_budgets_building_year ON budgets(building_id, year, is_active)",
                // Recent features for roadmap
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_features_roadmap_recent ON features(show_on_roadmap, created_at) WHERE show_on_roadmap = true"
            ],
            /**
             * Partial indexes for improved performance on filtered queries.
             */
            partialIndexes: [
                // Only index active records for frequently filtered tables
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_active_email ON users(email) WHERE is_active = true",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_organizations_active_type ON organizations(type) WHERE is_active = true",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_active_org ON buildings(organization_id) WHERE is_active = true",
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_active_building ON residences(building_id) WHERE is_active = true",
                // Unpaid bills only
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_unpaid ON bills(residence_id, due_date) WHERE status IN ('sent', 'overdue')",
                // Open maintenance requests only
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_open ON maintenance_requests(residence_id, priority) WHERE status IN ('submitted', 'acknowledged', 'in_progress')",
                // Unread notifications only
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_unread ON notifications(user_id, created_at) WHERE is_read = false"
            ],
            /**
             * Covering indexes for SELECT-heavy queries to avoid table lookups.
             */
            coveringIndexes: [
                // User lookup with common fields
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_covering ON users(email) INCLUDE (first_name, last_name, role, is_active)",
                // Building details with organization info
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_buildings_covering ON buildings(organization_id) INCLUDE (name, address, city, building_type, is_active)",
                // Residence details with building info
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_residences_covering ON residences(building_id) INCLUDE (unit_number, floor, square_footage, is_active)",
                // Bill details for resident portals
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_bills_covering ON bills(residence_id, status) INCLUDE (bill_number, amount, due_date, type)",
                // Maintenance request details
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_maintenance_covering ON maintenance_requests(residence_id, status) INCLUDE (title, priority, category, scheduled_date)",
                // Notification details for user dashboards
                "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_notifications_covering ON notifications(user_id, is_read) INCLUDE (title, message, type, created_at)"
            ],
            /**
             * Materialized views for complex aggregations to improve dashboard performance.
             */
            materializedViews: [
                // Building dashboard statistics
                `CREATE MATERIALIZED VIEW IF NOT EXISTS mv_building_stats AS
     SELECT 
       b.id as building_id,
       b.name as building_name,
       COUNT(DISTINCT r.id) as total_residences,
       COUNT(DISTINCT ur.user_id) as total_residents,
       COUNT(DISTINCT CASE WHEN bill.status = 'overdue' THEN bill.id END) as overdue_bills,
       COUNT(DISTINCT CASE WHEN mr.status IN ('submitted', 'acknowledged', 'in_progress') THEN mr.id END) as open_maintenance,
       AVG(r.square_footage) as avg_square_footage,
       MAX(b.updated_at) as last_updated
     FROM buildings b
     LEFT JOIN residences r ON b.id = r.building_id AND r.is_active = true
     LEFT JOIN user_residences ur ON r.id = ur.residence_id AND ur.is_active = true
     LEFT JOIN bills bill ON r.id = bill.residence_id
     LEFT JOIN maintenance_requests mr ON r.id = mr.residence_id
     WHERE b.is_active = true
     GROUP BY b.id, b.name`,
                // Organization dashboard overview
                `CREATE MATERIALIZED VIEW IF NOT EXISTS mv_organization_overview AS
     SELECT 
       o.id as organization_id,
       o.name as organization_name,
       COUNT(DISTINCT b.id) as total_buildings,
       COUNT(DISTINCT r.id) as total_residences,
       COUNT(DISTINCT ur.user_id) as total_users,
       SUM(CASE WHEN bill.status = 'paid' THEN bill.amount ELSE 0 END) as paid_amount,
       SUM(CASE WHEN bill.status IN ('sent', 'overdue') THEN bill.amount ELSE 0 END) as outstanding_amount,
       COUNT(CASE WHEN mr.status IN ('submitted', 'acknowledged', 'in_progress') THEN 1 END) as open_requests
     FROM organizations o
     LEFT JOIN buildings b ON o.id = b.organization_id AND b.is_active = true
     LEFT JOIN residences r ON b.id = r.building_id AND r.is_active = true
     LEFT JOIN user_residences ur ON r.id = ur.residence_id AND ur.is_active = true
     LEFT JOIN bills bill ON r.id = bill.residence_id
     LEFT JOIN maintenance_requests mr ON r.id = mr.residence_id
     WHERE o.is_active = true
     GROUP BY o.id, o.name`,
                // Financial summary for budgeting
                `CREATE MATERIALIZED VIEW IF NOT EXISTS mv_financial_summary AS
     SELECT 
       b.building_id,
       DATE_TRUNC('month', bill.due_date) as month,
       SUM(CASE WHEN bill.status = 'paid' THEN bill.amount ELSE 0 END) as revenue,
       SUM(CASE WHEN bill.status IN ('sent', 'overdue') THEN bill.amount ELSE 0 END) as outstanding,
       COUNT(DISTINCT bill.residence_id) as billed_residences,
       AVG(bill.amount) as avg_bill_amount
     FROM bills bill
     JOIN residences r ON bill.residence_id = r.id
     JOIN buildings b ON r.building_id = b.id
     WHERE bill.due_date >= DATE_TRUNC('year', CURRENT_DATE)
     GROUP BY b.building_id, DATE_TRUNC('month', bill.due_date)`
            ]
        };
        QueryOptimizer = class {
            /**
             * Check if database indexes are already set up
             */
            static async areIndexesSetup() {
                try {
                    const result = await (0, drizzle_orm_10.sql) `
        SELECT COUNT(*) as count
        FROM pg_indexes 
        WHERE indexname IN (
          'idx_users_email',
          'idx_buildings_org_id', 
          'idx_residences_building_id',
          'idx_bills_residence_id'
        )
      `;
                    const row = Array.isArray(result) ? result[0] : result;
                    if (!row || typeof row.count === "undefined") {
                        if (process.env.NODE_ENV !== "production") {
                        }
                        return false;
                    }
                    const indexCount = parseInt(String(row.count));
                    return indexCount >= 4;
                }
                catch (error) {
                    console.error("\u274C Error checking database indexes:", error);
                    return false;
                }
            }
            /**
             * Applies all core database indexes for Quebec property management.
             */
            static async applyCoreOptimizations() {
                const allIndexes = [
                    ...DatabaseOptimization.coreIndexes,
                    ...DatabaseOptimization.frameworkIndexes,
                    ...DatabaseOptimization.compositeIndexes,
                    ...DatabaseOptimization.partialIndexes
                ];
                for (const indexQuery of allIndexes) {
                    try {
                        await (0, drizzle_orm_10.sql) `${indexQuery}`;
                    }
                    catch (error) {
                        console.error("\u274C Error applying core index:", error);
                    }
                }
                for (const indexQuery of DatabaseOptimization.coveringIndexes) {
                    try {
                        await (0, drizzle_orm_10.sql) `${indexQuery}`;
                    }
                    catch (error) {
                        console.error("\u274C Error applying covering index:", error);
                    }
                }
                for (const viewQuery of DatabaseOptimization.materializedViews) {
                    try {
                        await (0, drizzle_orm_10.sql) `${viewQuery}`;
                    }
                    catch (error) {
                        console.error("\u274C Error creating materialized view:", error);
                    }
                }
            }
            /**
             * Analyzes query performance and suggests optimizations.
             */
            static async analyzeQueryPerformance() {
                try {
                    await (0, drizzle_orm_10.sql) `SET log_min_duration_statement = 100`;
                    await (0, drizzle_orm_10.sql) `SET log_statement = 'all'`;
                    const slowQueries = await (0, drizzle_orm_10.sql) `
        SELECT query, mean_exec_time, calls, total_exec_time
        FROM pg_stat_statements
        WHERE mean_exec_time > 100
        ORDER BY mean_exec_time DESC
        LIMIT 10
      `;
                    const indexUsage = await (0, drizzle_orm_10.sql) `
        SELECT schemaname, tablename, indexname, idx_tup_read, idx_tup_fetch
        FROM pg_stat_user_indexes
        WHERE idx_tup_read > 0
        ORDER BY idx_tup_read DESC
        LIMIT 20
      `;
                }
                catch (error) {
                    console.error("\u274C Error analyzing query performance:", error);
                }
            }
            /**
             * Provides query optimization suggestions.
             */
            static getOptimizationSuggestions() {
                return [
                    "\u2705 Add indexes on frequently queried foreign keys",
                    "\u2705 Use partial indexes for filtered queries (e.g., WHERE is_active = true)",
                    "\u2705 Implement query result caching for expensive operations",
                    "\u2705 Use LIMIT clauses for large result sets",
                    "\u2705 Consider materialized views for complex aggregations",
                    "\u2705 Optimize JOIN order in complex queries",
                    "\u2705 Use EXISTS instead of IN for subqueries",
                    "\u2705 Implement pagination for large datasets",
                    "\u2705 Add covering indexes for SELECT-heavy queries",
                    "\u2705 Regular VACUUM and ANALYZE maintenance"
                ];
            }
            /**
             * Optimizes query structure for better performance.
             * @param baseQuery
             * @param options
             * @param _options
             */
            static optimizeQuery(baseQuery, _options = {}) {
                let optimizedQuery = baseQuery;
                if (_options.limit && !optimizedQuery.toLowerCase().includes("limit")) {
                    optimizedQuery += ` LIMIT ${_options.limit}`;
                }
                if (_options.useExists && optimizedQuery.toLowerCase().includes(" in (")) {
                }
                if (optimizedQuery.toLowerCase().includes("join") && _options.optimizeJoins) {
                }
                return optimizedQuery;
            }
            /**
             * Refreshes materialized views for up-to-date aggregated data.
             */
            static async refreshMaterializedViews() {
                const views = ["mv_building_stats", "mv_organization_overview", "mv_financial_summary"];
                for (const view of views) {
                    try {
                        await (0, drizzle_orm_10.sql) `REFRESH MATERIALIZED VIEW CONCURRENTLY ${view}`;
                    }
                    catch (error) {
                        console.error(`\u274C Error refreshing materialized view ${view}:`, error);
                    }
                }
            }
        };
        DatabaseMaintenance = class {
            /**
             * Performs routine database maintenance for optimal performance.
             */
            static async performMaintenance() {
                try {
                    await (0, drizzle_orm_10.sql) `ANALYZE`;
                    await (0, drizzle_orm_10.sql) `VACUUM`;
                    await (0, drizzle_orm_10.sql) `REINDEX DATABASE CONCURRENTLY ${process.env.PGDATABASE}`;
                    await QueryOptimizer.refreshMaterializedViews();
                }
                catch (error) {
                    console.error("\u274C Error performing database maintenance:", error);
                }
            }
            /**
             * Monitors database performance metrics.
             */
            static async getPerformanceMetrics() {
                try {
                    const metrics = await (0, drizzle_orm_10.sql) `
        SELECT 
          'connections' as metric,
          count(*) as value
        FROM pg_stat_activity
        UNION ALL
        SELECT 
          'slow_queries' as metric,
          count(*) as value
        FROM pg_stat_statements
        WHERE mean_exec_time > 100
        UNION ALL
        SELECT 
          'cache_hit_ratio' as metric,
          round(100.0 * sum(blks_hit) / (sum(blks_hit) + sum(blks_read)), 2) as value
        FROM pg_stat_database
        WHERE datname = current_database()
      `;
                    return metrics;
                }
                catch (error) {
                    console.error("\u274C Error getting performance metrics:", error);
                    return [];
                }
            }
        };
    }
});
// server/query-cache.ts
const lru_cache_1 = require("lru-cache");
function withCache(cacheType, cacheKey, operation) {
    return new Promise(async (resolve, reject) => {
        try {
            const cached = queryCache.get(cacheType, cacheKey);
            if (cached !== void 0) {
                resolve(cached);
                return;
            }
            const result = await operation();
            queryCache.set(cacheType, cacheKey, result);
            resolve(result);
        }
        catch (error) {
            reject(error);
        }
    });
}
var CACHE_CONFIGS, QueryCacheManager, queryCache, CacheInvalidator;
var init_query_cache = __esm({
    "server/query-cache.ts"() {
        CACHE_CONFIGS = {
            // User data - frequently accessed, moderate changes
            users: { maxSize: 1e3, ttl: 5 * 60 * 1e3 },
            // 5 minutes
            // Organization data - stable, infrequent changes
            organizations: { maxSize: 100, ttl: 30 * 60 * 1e3 },
            // 30 minutes
            // Building data - relatively stable
            buildings: { maxSize: 500, ttl: 15 * 60 * 1e3 },
            // 15 minutes
            // Residence data - stable structure, occasional updates
            residences: { maxSize: 2e3, ttl: 10 * 60 * 1e3 },
            // 10 minutes
            // Bills - time-sensitive, frequent updates
            bills: { maxSize: 1e3, ttl: 2 * 60 * 1e3 },
            // 2 minutes
            // Maintenance requests - dynamic, frequent status changes
            maintenance: { maxSize: 500, ttl: 1 * 60 * 1e3 },
            // 1 minute
            // Notifications - real-time, short cache
            notifications: { maxSize: 500, ttl: 30 * 1e3 },
            // 30 seconds
            // Quality metrics - stable for periods
            metrics: { maxSize: 200, ttl: 5 * 60 * 1e3 },
            // 5 minutes
            // Features and roadmap - moderately stable
            features: { maxSize: 300, ttl: 3 * 60 * 1e3 },
            // 3 minutes
            // Framework configuration - very stable
            config: { maxSize: 100, ttl: 60 * 60 * 1e3 },
            // 1 hour
            // Bug reports - moderate changes, user-specific
            bugs: { maxSize: 500, ttl: 2 * 60 * 1e3 }
            // 2 minutes
        };
        QueryCacheManager = class {
            /**
             *
             */
            constructor() {
                this.caches = /* @__PURE__ */ new Map();
                this.hitCounts = /* @__PURE__ */ new Map();
                this.missCounts = /* @__PURE__ */ new Map();
                Object.entries(CACHE_CONFIGS).forEach(([type, config2]) => {
                    this.caches.set(type, new lru_cache_1.LRUCache({
                        max: config2.maxSize,
                        ttl: config2.ttl,
                        updateAgeOnGet: true,
                        updateAgeOnHas: true
                    }));
                    this.hitCounts.set(type, 0);
                    this.missCounts.set(type, 0);
                });
            }
            /**
             * Gets cached data if available.
             * @param cacheType Type of cache (users, buildings, etc.).
             * @param key Cache key.
             * @param _key
             * @returns Cached data or undefined.
             */
            get(cacheType, _key) {
                const cache = this.caches.get(cacheType);
                if (!cache) {
                    return void 0;
                }
                const result = cache.get(_key);
                if (result !== void 0) {
                    this.hitCounts.set(cacheType, (this.hitCounts.get(cacheType) || 0) + 1);
                    return result;
                }
                this.missCounts.set(cacheType, (this.missCounts.get(cacheType) || 0) + 1);
                return void 0;
            }
            /**
             * Stores data in cache.
             * @param cacheType Type of cache.
             * @param key Cache key.
             * @param data Data to cache.
             * @param _key
             * @param _data
             */
            set(cacheType, _key, _data) {
                const cache = this.caches.get(cacheType);
                if (!cache) {
                    return;
                }
                cache.set(_key, _data);
            }
            /**
             * Invalidates cache entries by pattern.
             * @param cacheType Type of cache.
             * @param pattern Key pattern to invalidate (supports wildcards).
             */
            invalidate(cacheType, pattern) {
                const cache = this.caches.get(cacheType);
                if (!cache) {
                    return;
                }
                if (pattern) {
                    for (const key of cache.keys()) {
                        if (this.matchesPattern(key, pattern)) {
                            cache.delete(key);
                        }
                    }
                }
                else {
                    cache.clear();
                }
            }
            /**
             * Gets cache performance statistics.
             */
            getStats() {
                const stats = {};
                for (const [_type, cache] of this.caches) {
                    const hits = this.hitCounts.get(_type) || 0;
                    const misses = this.missCounts.get(_type) || 0;
                    const total = hits + misses;
                    const hitRate = total > 0 ? (hits / total * 100).toFixed(2) : "0.00";
                    stats[_type] = {
                        size: cache.size,
                        maxSize: cache.max,
                        hits,
                        misses,
                        hitRate: `${hitRate}%`,
                        memoryUsage: this.estimateMemoryUsage(cache)
                    };
                }
                return stats;
            }
            /**
             * Clears all caches.
             */
            clearAll() {
                for (const [_type, cache] of this.caches) {
                    cache.clear();
                    this.hitCounts.set(_type, 0);
                    this.missCounts.set(_type, 0);
                }
            }
            /**
             * Pattern matching for cache key invalidation.
             * @param key
             * @param _key
             * @param pattern
             */
            matchesPattern(_key, pattern) {
                const regex = new RegExp(pattern.replace(/\*/g, ".*"));
                return regex.test(_key);
            }
            /**
             * Estimates memory usage of a cache.
             * @param cache
             */
            estimateMemoryUsage(cache) {
                let totalSize = 0;
                for (const value of cache.values()) {
                    totalSize += JSON.stringify(value).length * 2;
                }
                return `${(totalSize / 1024).toFixed(2)} KB`;
            }
        };
        queryCache = new QueryCacheManager();
        CacheInvalidator = class {
            /**
             * Invalidates user-related caches when user data changes.
             * @param userId
             */
            static invalidateUserCaches(userId) {
                queryCache.invalidate("users", `user:${userId}*`);
                queryCache.invalidate("residences", `user_residences:${userId}*`);
                queryCache.invalidate("notifications", `user_notifications:${userId}*`);
            }
            /**
             * Invalidates building-related caches when building data changes.
             * @param buildingId
             */
            static invalidateBuildingCaches(buildingId) {
                queryCache.invalidate("buildings", `building:${buildingId}*`);
                queryCache.invalidate("residences", `building_residences:${buildingId}*`);
                queryCache.invalidate("budgets", `building_budgets:${buildingId}*`);
            }
            /**
             * Invalidates residence-related caches when residence data changes.
             * @param residenceId
             */
            static invalidateResidenceCaches(residenceId) {
                queryCache.invalidate("residences", `residence:${residenceId}*`);
                queryCache.invalidate("bills", `residence_bills:${residenceId}*`);
                queryCache.invalidate("maintenance", `residence_maintenance:${residenceId}*`);
            }
            /**
             * Invalidates all caches (use sparingly).
             */
            static invalidateAll() {
                queryCache.clearAll();
            }
        };
    }
});
// server/performance-monitoring.ts
const perf_hooks_1 = require("perf_hooks");
var DatabasePerformanceMonitor, dbPerformanceMonitor;
var init_performance_monitoring = __esm({
    "server/performance-monitoring.ts"() {
        DatabasePerformanceMonitor = class {
            constructor() {
                this.queryTimes = [];
                this.slowQueries = [];
                this.SLOW_QUERY_THRESHOLD = 100;
            }
            // ms
            /**
             * Tracks execution time of a database operation.
             * @param queryName
             * @param operation
             */
            trackQuery(queryName, operation) {
                const startTime = perf_hooks_1.performance.now();
                return operation().then((result) => {
                    const duration = perf_hooks_1.performance.now() - startTime;
                    this.recordQueryTime(queryName, duration);
                    return result;
                }).catch((error) => {
                    const duration = perf_hooks_1.performance.now() - startTime;
                    this.recordQueryTime(queryName, duration);
                    throw error;
                });
            }
            /**
             * Records query execution time.
             * @param queryName
             * @param duration
             */
            recordQueryTime(queryName, duration) {
                this.queryTimes.push(duration);
                if (this.queryTimes.length > 1e3) {
                    this.queryTimes.shift();
                }
                if (duration > this.SLOW_QUERY_THRESHOLD) {
                    this.slowQueries.push({
                        query: queryName,
                        duration,
                        timestamp: /* @__PURE__ */ new Date()
                    });
                    if (this.slowQueries.length > 100) {
                        this.slowQueries.shift();
                    }
                }
            }
            /**
             * Gets average query time.
             */
            getAverageQueryTime() {
                if (this.queryTimes.length === 0) {
                    return 0;
                }
                return this.queryTimes.reduce((a, b) => a + b, 0) / this.queryTimes.length;
            }
            /**
             * Gets performance statistics.
             */
            getPerformanceStats() {
                const avg = this.getAverageQueryTime();
                const max = Math.max(...this.queryTimes);
                const min = Math.min(...this.queryTimes);
                return {
                    averageQueryTime: `${avg.toFixed(2)}ms`,
                    maxQueryTime: `${max.toFixed(2)}ms`,
                    minQueryTime: `${min.toFixed(2)}ms`,
                    totalQueries: this.queryTimes.length,
                    slowQueries: this.slowQueries.length,
                    recentSlowQueries: this.slowQueries.slice(-10)
                };
            }
            /**
             * Provides optimization recommendations.
             */
            getOptimizationRecommendations() {
                const avg = this.getAverageQueryTime();
                const recommendations = [];
                if (avg > 100) {
                    recommendations.push("Average query time exceeds 100ms. Consider adding database indexes.");
                }
                if (this.slowQueries.length > 10) {
                    recommendations.push("Multiple slow queries detected. Review and optimize frequent queries.");
                }
                const commonSlowQueries = this.getCommonSlowQueries();
                if (commonSlowQueries.length > 0) {
                    recommendations.push(`Common slow queries: ${commonSlowQueries.join(", ")}`);
                }
                return recommendations;
            }
            /**
             * Identifies commonly slow queries.
             */
            getCommonSlowQueries() {
                const queryFrequency = {};
                this.slowQueries.forEach(({ query }) => {
                    queryFrequency[query] = (queryFrequency[query] || 0) + 1;
                });
                return Object.entries(queryFrequency).filter(([, count4]) => count4 > 2).map(([query]) => query);
            }
            /**
             * Resets performance tracking data.
             */
            reset() {
                this.queryTimes = [];
                this.slowQueries = [];
            }
        };
        dbPerformanceMonitor = new DatabasePerformanceMonitor();
    }
});
// server/optimized-db-storage.ts
const drizzle_orm_11 = require("drizzle-orm");
const crypto_1 = __importDefault(require("crypto"));
const drizzle_orm_12 = require("drizzle-orm");
var OptimizedDatabaseStorage;
var init_optimized_db_storage = __esm({
    "server/optimized-db-storage.ts"() {
        init_db();
        init_schema();
        init_database_optimization();
        init_query_cache();
        init_performance_monitoring();
        OptimizedDatabaseStorage = class {
            /**
             *
             */
            constructor() {
                if (process.env.TEST_ENV !== "integration" && !process.env.DISABLE_DB_OPTIMIZATIONS && process.env.NODE_ENV !== "test" && !process.env.JEST_WORKER_ID) {
                    this.initializeOptimizations();
                }
            }
            /**
             * Initializes database optimizations.
             */
            async initializeOptimizations() {
                if (process.env.NODE_ENV === "test" || process.env.JEST_WORKER_ID || process.env.SKIP_DB_OPTIMIZATION) {
                    return;
                }
                try {
                    await QueryOptimizer.applyCoreOptimizations();
                }
                catch (error) {
                    console.error("\u274C Error initializing database optimizations:", error);
                }
            }
            /**
             * Wrapper for performance tracking and caching.
             * @param operation
             * @param cacheKey
             * @param cacheType
             * @param fn
             */
            async withOptimizations(operation, cacheKey, cacheType, fn) {
                if (cacheKey) {
                    const cached = queryCache.get(cacheType, cacheKey);
                    if (cached !== void 0) {
                        return cached;
                    }
                }
                const result = await dbPerformanceMonitor.trackQuery(operation, fn);
                if (cacheKey && result !== void 0) {
                    queryCache.set(cacheType, cacheKey, result);
                }
                return result;
            }
            // User operations with optimization
            /**
             * Retrieves all active users with caching and performance tracking.
             */
            async getUsers() {
                return this.withOptimizations("getUsers", "all_users", "users", () => db.select().from(users).where((0, drizzle_orm_11.eq)(users.isActive, true)).limit(100).orderBy((0, drizzle_orm_11.desc)(users.createdAt)));
            }
            /**
             * Retrieves all active users with their assignments (organizations, buildings, residences).
             */
            async getUsersWithAssignments() {
                queryCache.invalidate("users", "all_users_assignments_v2");
                queryCache.invalidate("users", "all_users_assignments_v3");
                try {
                    const users5 = await db.select().from(users).where((0, drizzle_orm_11.eq)(users.isActive, true)).limit(100).orderBy((0, drizzle_orm_11.desc)(users.createdAt));
                    const batchSize = 5;
                    const usersWithAssignments = [];
                    for (let i = 0; i < users5.length; i += batchSize) {
                        const batch = users5.slice(i, i + batchSize);
                        const batchResults = await Promise.all(batch.map(async (user) => {
                            try {
                                const userOrgs = await db.select({
                                    id: organizations.id,
                                    name: organizations.name,
                                    type: organizations.type
                                }).from(userOrganizations).innerJoin(organizations, (0, drizzle_orm_11.eq)(userOrganizations.organizationId, organizations.id)).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(userOrganizations.userId, user.id), (0, drizzle_orm_11.eq)(userOrganizations.isActive, true), (0, drizzle_orm_11.eq)(organizations.isActive, true)));
                                const userBuildings = await db.select({
                                    id: buildings.id,
                                    name: buildings.name
                                }).from(userOrganizations).innerJoin(buildings, (0, drizzle_orm_11.eq)(userOrganizations.organizationId, buildings.organizationId)).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(userOrganizations.userId, user.id), (0, drizzle_orm_11.eq)(userOrganizations.isActive, true), (0, drizzle_orm_11.eq)(buildings.isActive, true)));
                                const userResidences4 = await db.select({
                                    id: residences.id,
                                    unitNumber: residences.unitNumber,
                                    buildingId: residences.buildingId,
                                    buildingName: buildings.name
                                }).from(userResidences).innerJoin(residences, (0, drizzle_orm_11.eq)(userResidences.residenceId, residences.id)).innerJoin(buildings, (0, drizzle_orm_11.eq)(residences.buildingId, buildings.id)).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(userResidences.userId, user.id), (0, drizzle_orm_11.eq)(userResidences.isActive, true), (0, drizzle_orm_11.eq)(residences.isActive, true)));
                                const result = {
                                    ...user,
                                    organizations: userOrgs || [],
                                    buildings: userBuildings || [],
                                    residences: userResidences4 || []
                                };
                                return result;
                            }
                            catch (error) {
                                console.error("\u274C Error getting user assignments:", error);
                                return {
                                    ...user,
                                    organizations: [],
                                    buildings: [],
                                    residences: []
                                };
                            }
                        }));
                        usersWithAssignments.push(...batchResults);
                    }
                    return usersWithAssignments;
                }
                catch (error) {
                    console.error("\u274C Critical error getting users with assignments:", error);
                    return [];
                }
            }
            /**
             * Retrieves users from organizations that a specific user has access to.
             * @param userId
             */
            async getUsersByOrganizations(userId) {
                return this.withOptimizations("getUsersByOrganizations", `users_by_org:${userId}`, "users", async () => {
                    const userOrgs = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(userOrganizations.userId, userId), (0, drizzle_orm_11.eq)(userOrganizations.isActive, true)));
                    if (userOrgs.length === 0) {
                        return [];
                    }
                    const organizationIds = userOrgs.map((org) => org.organizationId);
                    return db.select({
                        id: users.id,
                        username: users.username,
                        password: users.password,
                        email: users.email,
                        firstName: users.firstName,
                        lastName: users.lastName,
                        phone: users.phone,
                        profileImage: users.profileImage,
                        language: users.language,
                        role: users.role,
                        isActive: users.isActive,
                        lastLoginAt: users.lastLoginAt,
                        createdAt: users.createdAt,
                        updatedAt: users.updatedAt
                    }).from(users).innerJoin(userOrganizations, (0, drizzle_orm_11.eq)(users.id, userOrganizations.userId)).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(users.isActive, true), (0, drizzle_orm_11.eq)(userOrganizations.isActive, true), (0, drizzle_orm_11.inArray)(userOrganizations.organizationId, organizationIds))).orderBy(users.firstName, users.lastName);
                });
            }
            /**
             * Gets paginated users with optimized query structure.
             * @param options
             * @param _options
             */
            async getPaginatedUsers(_options) {
                PaginationHelper.validatePagination(_options);
                const cacheKey = `paginated_users:${_options.page}:${_options.pageSize}:${_options.sortBy}:${_options.sortDirection}`;
                const cached = queryCache.get("users", cacheKey);
                if (cached) {
                    return cached;
                }
                const [{ count: total }] = await db.select({ count: (0, drizzle_orm_11.count)() }).from(users).where((0, drizzle_orm_11.eq)(users.isActive, true));
                const users5 = await db.select().from(users).where((0, drizzle_orm_11.eq)(users.isActive, true)).orderBy(_options.sortDirection === "DESC" ? (0, drizzle_orm_11.desc)(users.createdAt) : users.createdAt).limit(_options.pageSize).offset((_options.page - 1) * _options.pageSize);
                const result = { users: users5, total };
                queryCache.set("users", cacheKey, result);
                return result;
            }
            /**
             * Gets buildings with residents using EXISTS instead of IN subquery.
             * @param organizationId
             * @param limit
             */
            async getBuildingsWithResidents(organizationId, limit = 50) {
                const cacheKey = `buildings_with_residents:${organizationId}:${limit}`;
                return this.withOptimizations("getBuildingsWithResidents", cacheKey, "buildings", () => db.select().from(buildings).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(buildings.organizationId, organizationId), (0, drizzle_orm_11.eq)(buildings.isActive, true), (0, drizzle_orm_12.exists)(db.select().from(residences).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(residences.buildingId, buildings.id), (0, drizzle_orm_11.eq)(residences.isActive, true)))))).limit(limit)
                // Always use LIMIT for large result sets
                );
            }
            /**
             * Searches users with optimized covering index and LIMIT.
             * @param query
             * @param limit
             */
            async searchUsers(query, limit = 20) {
                const cacheKey = `search_users:${query}:${limit}`;
                return this.withOptimizations("searchUsers", cacheKey, "users", () => db.select().from(users).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(users.isActive, true), (0, drizzle_orm_11.or)((0, drizzle_orm_11.like)(users.email, `%${query}%`), (0, drizzle_orm_11.like)(users.firstName, `%${query}%`), (0, drizzle_orm_11.like)(users.lastName, `%${query}%`)))).limit(limit).orderBy(users.lastName, users.firstName));
            }
            /**
             * Gets financial summary using materialized view for complex aggregations.
             * @param buildingId
             */
            async getFinancialSummary(buildingId) {
                const cacheKey = `financial_summary:${buildingId}`;
                return this.withOptimizations("getFinancialSummary", cacheKey, "financial", async () => {
                    const summary = await db.execute((0, drizzle_orm_12.sql) `SELECT * FROM mv_financial_summary WHERE building_id = ${buildingId} ORDER BY month DESC LIMIT 12`);
                    return summary.rows;
                });
            }
            /**
             * Gets building statistics using materialized view.
             * @param buildingId
             */
            async getBuildingStats(buildingId) {
                const cacheKey = `building_stats:${buildingId}`;
                return this.withOptimizations("getBuildingStats", cacheKey, "buildings", async () => {
                    const stats = await db.execute((0, drizzle_orm_12.sql) `SELECT * FROM mv_building_stats WHERE building_id = ${buildingId}`);
                    return stats.rows[0];
                });
            }
            /**
             * Retrieves a specific user by ID with caching.
             * @param id
             */
            async getUser(id) {
                return this.withOptimizations("getUser", `user:${id}`, "users", async () => {
                    const result = await db.select().from(users).where((0, drizzle_orm_11.eq)(users.id, id));
                    if (result.length > 0) {
                        console.log(`\u{1F50D} Storage.getUser: Found user:`, {
                            id: result[0].id,
                            email: result[0].email,
                            role: result[0].role
                        });
                    }
                    else {
                    }
                    return result[0];
                });
            }
            /**
             * Retrieves a user by email with caching.
             * @param email
             */
            async getUserByEmail(email) {
                return this.withOptimizations("getUserByEmail", `user_email:${email}`, "users", async () => {
                    const result = await db.select().from(users).where((0, drizzle_orm_11.eq)(users.email, email));
                    return result[0];
                });
            }
            /**
             * Creates a new user with cache invalidation.
             * @param insertUser
             */
            async createUser(insertUser) {
                const result = await dbPerformanceMonitor.trackQuery("createUser", async () => {
                    let password = insertUser.password;
                    const isDemoRole = ["demo_manager", "demo_tenant", "demo_resident"].includes(insertUser.role);
                    if (isDemoRole) {
                        password = "$2b$12$cOc/QjMjzlhqAQqF2b/MTOZr2QAtERbXJGd4OSa1CXMlF04FC3F02";
                        console.log("\u{1F3AD} Setting demo password for user with role:", insertUser.role);
                    }
                    const userData = {
                        username: insertUser.username,
                        email: insertUser.email,
                        password,
                        firstName: insertUser.firstName,
                        lastName: insertUser.lastName,
                        phone: insertUser.phone || "",
                        profileImage: insertUser.profileImage,
                        language: insertUser.language || "fr",
                        role: insertUser.role,
                        isActive: true
                        // Default value for new users
                    };
                    console.log("\u{1F50D} Creating user with data:", {
                        username: userData.username,
                        email: userData.email,
                        firstName: userData.firstName,
                        lastName: userData.lastName,
                        role: userData.role,
                        language: userData.language,
                        hasPassword: !!userData.password
                    });
                    try {
                        const inserted = await db.insert(users).values([userData]).returning();
                        return inserted;
                    }
                    catch (error) {
                        console.error("\u274C Error creating user:", error);
                        throw error;
                    }
                });
                CacheInvalidator.invalidateUserCaches("*");
                return result[0];
            }
            /**
             * Updates a user with cache invalidation.
             * @param id
             * @param updates
             */
            async updateUser(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateUser", async () => {
                    return db.update(users).set({ ...updates, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(users.id, id)).returning();
                });
                CacheInvalidator.invalidateUserCaches(id);
                return result[0];
            }
            /**
             * Retrieves organizations for a specific user.
             * @param userId
             */
            async getUserOrganizations(userId) {
                return this.withOptimizations("getUserOrganizations", `user_orgs:${userId}`, "users", async () => {
                    const result = await db.select({
                        organizationId: userOrganizations.organizationId
                    }).from(userOrganizations).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(userOrganizations.userId, userId), (0, drizzle_orm_11.eq)(userOrganizations.isActive, true)));
                    return result;
                });
            }
            /**
             * Retrieves residences for a specific user.
             * @param userId
             */
            async getUserResidences(userId) {
                return this.withOptimizations("getUserResidences", `user_residences:${userId}`, "residences", async () => {
                    const result = await db.select({
                        residenceId: userResidences.residenceId
                    }).from(userResidences).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(userResidences.userId, userId), (0, drizzle_orm_11.eq)(userResidences.isActive, true)));
                    return result;
                });
            }
            // Organization operations with optimization
            /**
             * Retrieves all active organizations with caching.
             */
            async getOrganizations() {
                return this.withOptimizations("getOrganizations", "all_organizations", "organizations", () => db.select().from(organizations).where((0, drizzle_orm_11.eq)(organizations.isActive, true)));
            }
            /**
             * Retrieves an organization by ID with caching.
             * @param id
             */
            async getOrganization(id) {
                return this.withOptimizations("getOrganization", `organization:${id}`, "organizations", async () => {
                    const result = await db.select().from(organizations).where((0, drizzle_orm_11.eq)(organizations.id, id));
                    return result[0];
                });
            }
            /**
             * Creates a new organization with cache invalidation.
             * @param insertOrganization
             */
            async createOrganization(insertOrganization) {
                const result = await dbPerformanceMonitor.trackQuery("createOrganization", async () => {
                    return db.insert(organizations).values(insertOrganization).returning();
                });
                queryCache.invalidate("organizations");
                return result[0];
            }
            // Building operations with optimization
            /**
             * Retrieves buildings by organization with caching.
             * @param organizationId
             */
            async getBuildingsByOrganization(organizationId) {
                return this.withOptimizations("getBuildingsByOrganization", `org_buildings:${organizationId}`, "buildings", () => db.select().from(buildings).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(buildings.organizationId, organizationId), (0, drizzle_orm_11.eq)(buildings.isActive, true))));
            }
            /**
             * Retrieves a building by ID with caching.
             * @param id
             */
            async getBuilding(id) {
                return this.withOptimizations("getBuilding", `building:${id}`, "buildings", async () => {
                    const result = await db.select().from(buildings).where((0, drizzle_orm_11.eq)(buildings.id, id));
                    return result[0];
                });
            }
            /**
             * Creates a new building with cache invalidation.
             * @param insertBuilding
             */
            async createBuilding(insertBuilding) {
                const result = await dbPerformanceMonitor.trackQuery("createBuilding", async () => {
                    return db.insert(buildings).values([insertBuilding]).returning();
                });
                CacheInvalidator.invalidateBuildingCaches("*");
                return result[0];
            }
            // Residence operations with optimization
            /**
             * Retrieves residences by building with caching.
             * @param buildingId
             */
            async getResidencesByBuilding(buildingId) {
                return this.withOptimizations("getResidencesByBuilding", `building_residences:${buildingId}`, "residences", () => db.select().from(residences).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(residences.buildingId, buildingId), (0, drizzle_orm_11.eq)(residences.isActive, true))).orderBy(residences.unitNumber));
            }
            /**
             * Retrieves a residence by ID with caching.
             * @param id
             */
            async getResidence(id) {
                return this.withOptimizations("getResidence", `residence:${id}`, "residences", async () => {
                    const result = await db.select().from(residences).where((0, drizzle_orm_11.eq)(residences.id, id));
                    return result[0];
                });
            }
            /**
             * Creates a new residence with cache invalidation.
             * @param insertResidence
             */
            async createResidence(insertResidence) {
                const result = await dbPerformanceMonitor.trackQuery("createResidence", async () => {
                    return db.insert(residences).values([insertResidence]).returning();
                });
                CacheInvalidator.invalidateResidenceCaches("*");
                return result[0];
            }
            // Additional optimized methods for frequently accessed data
            /**
             * Gets user residences with full details - for complex residence views.
             * @param userId
             */
            async getUserResidencesWithDetails(userId) {
                return this.withOptimizations("getUserResidencesWithDetails", `user_residences_details:${userId}`, "residences", () => db.select({
                    residence: residences,
                    building: buildings,
                    userResidence: userResidences
                }).from(userResidences).innerJoin(residences, (0, drizzle_orm_11.eq)(userResidences.residenceId, residences.id)).innerJoin(buildings, (0, drizzle_orm_11.eq)(residences.buildingId, buildings.id)).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(userResidences.userId, userId), (0, drizzle_orm_11.eq)(userResidences.isActive, true))));
            }
            /**
             * Gets active bills for a residence - frequently queried.
             * @param residenceId
             */
            async getActiveBillsByResidence(residenceId) {
                return this.withOptimizations("getActiveBillsByResidence", `residence_bills:${residenceId}`, "bills", () => db.select().from(bills).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(bills.residenceId, residenceId), (0, drizzle_orm_11.or)((0, drizzle_orm_11.eq)(bills.status, "sent"), (0, drizzle_orm_11.eq)(bills.status, "overdue")))).orderBy((0, drizzle_orm_11.desc)(bills.dueDate)));
            }
            /**
             * Gets maintenance requests for a residence - frequently accessed.
             * @param residenceId
             */
            async getMaintenanceRequestsByResidence(residenceId) {
                return this.withOptimizations("getMaintenanceRequestsByResidence", `residence_maintenance:${residenceId}`, "maintenance", () => db.select().from(maintenanceRequests).where((0, drizzle_orm_11.eq)(maintenanceRequests.residenceId, residenceId)).orderBy((0, drizzle_orm_11.desc)(maintenanceRequests.createdAt)));
            }
            // Missing Organization operations
            /**
             * Gets organization by name with caching.
             * @param name
             */
            async getOrganizationByName(name) {
                return this.withOptimizations("getOrganizationByName", `org_name:${name}`, "organizations", async () => {
                    const result = await db.select().from(organizations).where((0, drizzle_orm_11.eq)(organizations.name, name));
                    return result[0];
                });
            }
            /**
             * Updates organization with cache invalidation.
             * @param id
             * @param updates
             */
            async updateOrganization(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateOrganization", async () => {
                    return db.update(organizations).set({ ...updates, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(organizations.id, id)).returning();
                });
                CacheInvalidator.invalidateUserCaches("*");
                return result[0];
            }
            // Missing Building operations
            /**
             * Gets all buildings with caching.
             */
            async getBuildings() {
                return this.withOptimizations("getBuildings", "all_buildings", "buildings", () => db.select().from(buildings).where((0, drizzle_orm_11.eq)(buildings.isActive, true)));
            }
            /**
             * Updates building with cache invalidation.
             * @param id
             * @param updates
             */
            async updateBuilding(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateBuilding", async () => {
                    return db.update(buildings).set({ ...updates, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(buildings.id, id)).returning();
                });
                CacheInvalidator.invalidateBuildingCaches(id);
                return result[0];
            }
            /**
             * Deletes building (soft delete).
             * @param id
             */
            async deleteBuilding(id) {
                const result = await dbPerformanceMonitor.trackQuery("deleteBuilding", async () => {
                    return db.update(buildings).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(buildings.id, id)).returning();
                });
                CacheInvalidator.invalidateBuildingCaches(id);
                return result.length > 0;
            }
            // Missing Residence operations
            /**
             * Gets all residences with caching.
             */
            async getResidences() {
                return this.withOptimizations("getResidences", "all_residences", "residences", () => db.select().from(residences).where((0, drizzle_orm_11.eq)(residences.isActive, true)));
            }
            /**
             * Updates residence with cache invalidation.
             * @param id
             * @param updates
             */
            async updateResidence(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateResidence", async () => {
                    return db.update(residences).set({ ...updates, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(residences.id, id)).returning();
                });
                CacheInvalidator.invalidateResidenceCaches(id);
                return result[0];
            }
            /**
             * Deletes residence (soft delete).
             * @param id
             */
            async deleteResidence(id) {
                const result = await dbPerformanceMonitor.trackQuery("deleteResidence", async () => {
                    return db.update(residences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(residences.id, id)).returning();
                });
                CacheInvalidator.invalidateResidenceCaches(id);
                return result.length > 0;
            }
            // Development Pillar operations
            /**
             * Gets all development pillars.
             */
            async getPillars() {
                return this.withOptimizations("getPillars", "all_pillars", "pillars", () => db.select().from(developmentPillars));
            }
            /**
             * Gets development pillar by ID.
             * @param id
             */
            async getPillar(id) {
                return this.withOptimizations("getPillar", `pillar:${id}`, "pillars", async () => {
                    const result = await db.select().from(developmentPillars).where((0, drizzle_orm_11.eq)(developmentPillars.id, id));
                    return result[0];
                });
            }
            /**
             * Creates development pillar.
             * @param pillar
             */
            async createPillar(pillar) {
                const result = await dbPerformanceMonitor.trackQuery("createPillar", async () => {
                    return db.insert(developmentPillars).values(pillar).returning();
                });
                queryCache.invalidate("pillars");
                return result[0];
            }
            /**
             * Updates development pillar.
             * @param id
             * @param pillar
             */
            async updatePillar(id, pillar) {
                const result = await dbPerformanceMonitor.trackQuery("updatePillar", async () => {
                    return db.update(developmentPillars).set({ ...pillar, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(developmentPillars.id, id)).returning();
                });
                queryCache.invalidate("pillars");
                return result[0];
            }
            // Workspace Status operations
            /**
             * Gets all workspace statuses.
             */
            async getWorkspaceStatuses() {
                return this.withOptimizations("getWorkspaceStatuses", "all_workspace_statuses", "workspace_status", () => db.select().from(workspaceStatus));
            }
            /**
             * Gets workspace status by component.
             * @param component
             */
            async getWorkspaceStatus(component) {
                return this.withOptimizations("getWorkspaceStatus", `workspace_status:${component}`, "workspace_status", async () => {
                    const result = await db.select().from(workspaceStatus).where((0, drizzle_orm_11.eq)(workspaceStatus.component, component));
                    return result[0];
                });
            }
            /**
             * Creates workspace status.
             * @param status
             */
            async createWorkspaceStatus(status) {
                const result = await dbPerformanceMonitor.trackQuery("createWorkspaceStatus", async () => {
                    return db.insert(workspaceStatus).values(status).returning();
                });
                queryCache.invalidate("workspace_status");
                return result[0];
            }
            /**
             * Updates workspace status.
             * @param component
             * @param status
             */
            async updateWorkspaceStatus(component, status) {
                const result = await dbPerformanceMonitor.trackQuery("updateWorkspaceStatus", async () => {
                    return db.update(workspaceStatus).set({ status }).where((0, drizzle_orm_11.eq)(workspaceStatus.component, component)).returning();
                });
                queryCache.invalidate("workspace_status");
                return result[0];
            }
            // Quality Metrics operations
            /**
             * Gets all quality metrics.
             */
            async getQualityMetrics() {
                return this.withOptimizations("getQualityMetrics", "all_quality_metrics", "quality_metrics", () => db.select().from(qualityMetrics));
            }
            /**
             * Creates quality metric.
             * @param metric
             */
            async createQualityMetric(metric) {
                const result = await dbPerformanceMonitor.trackQuery("createQualityMetric", async () => {
                    return db.insert(qualityMetrics).values(metric).returning();
                });
                queryCache.invalidate("quality_metrics");
                return result[0];
            }
            // Framework Configuration operations
            /**
             * Gets all framework configurations.
             */
            async getFrameworkConfigs() {
                return this.withOptimizations("getFrameworkConfigs", "all_framework_configs", "framework_configs", () => db.select().from(frameworkConfiguration));
            }
            /**
             * Gets framework config by key.
             * @param key
             * @param _key
             */
            async getFrameworkConfig(_key) {
                return this.withOptimizations("getFrameworkConfig", `framework_config:${_key}`, "framework_configs", async () => {
                    const result = await db.select().from(frameworkConfiguration).where((0, drizzle_orm_11.eq)(frameworkConfiguration._key, _key));
                    return result[0];
                });
            }
            /**
             * Sets framework configuration.
             * @param config
             */
            async setFrameworkConfig(config2) {
                const result = await dbPerformanceMonitor.trackQuery("setFrameworkConfig", async () => {
                    return db.insert(frameworkConfiguration).values(config2).onConflictDoUpdate({
                        target: frameworkConfiguration._key,
                        set: { _value: config2._value, updatedAt: /* @__PURE__ */ new Date() }
                    }).returning();
                });
                queryCache.invalidate("framework_configs");
                return result[0];
            }
            // Improvement Suggestions operations
            /**
             * Gets all improvement suggestions.
             */
            async getImprovementSuggestions() {
                return this.withOptimizations("getImprovementSuggestions", "all_improvement_suggestions", "improvement_suggestions", () => db.select().from(improvementSuggestions));
            }
            /**
             * Gets top improvement suggestions.
             * @param limit
             */
            async getTopImprovementSuggestions(limit) {
                return this.withOptimizations("getTopImprovementSuggestions", `top_suggestions:${limit}`, "improvement_suggestions", () => db.select().from(improvementSuggestions).orderBy((0, drizzle_orm_11.desc)(improvementSuggestions.priority), (0, drizzle_orm_11.desc)(improvementSuggestions.createdAt)).limit(limit));
            }
            /**
             * Creates improvement suggestion.
             * @param suggestion
             */
            async createImprovementSuggestion(suggestion) {
                const result = await dbPerformanceMonitor.trackQuery("createImprovementSuggestion", async () => {
                    return db.insert(improvementSuggestions).values([
                        {
                            ...suggestion,
                            category: suggestion.category
                        }
                    ]).returning();
                });
                queryCache.invalidate("improvement_suggestions");
                return result[0];
            }
            /**
             * Clears new suggestions.
             */
            async clearNewSuggestions() {
                await dbPerformanceMonitor.trackQuery("clearNewSuggestions", async () => {
                    return db.update(improvementSuggestions).set({ status: "Acknowledged" }).where((0, drizzle_orm_11.eq)(improvementSuggestions.status, "New"));
                });
                queryCache.invalidate("improvement_suggestions");
            }
            /**
             * Updates suggestion status.
             * @param id
             * @param status
             */
            async updateSuggestionStatus(id, status) {
                const result = await dbPerformanceMonitor.trackQuery("updateSuggestionStatus", async () => {
                    return db.update(improvementSuggestions).set({ status }).where((0, drizzle_orm_11.eq)(improvementSuggestions.id, id)).returning();
                });
                queryCache.invalidate("improvement_suggestions");
                return result[0];
            }
            // Features operations
            /**
             * Gets all features.
             */
            async getFeatures() {
                return this.withOptimizations("getFeatures", "all_features", "features", () => db.select().from(features));
            }
            /**
             * Gets features by status.
             * @param status
             */
            async getFeaturesByStatus(status) {
                return this.withOptimizations("getFeaturesByStatus", `features_status:${status}`, "features", () => db.select().from(features).where((0, drizzle_orm_11.eq)(features.status, status)));
            }
            /**
             * Gets features by category.
             * @param category
             */
            async getFeaturesByCategory(category) {
                return this.withOptimizations("getFeaturesByCategory", `features_category:${category}`, "features", () => db.select().from(features).where((0, drizzle_orm_11.eq)(features.category, category)));
            }
            /**
             * Gets public roadmap features.
             */
            async getPublicRoadmapFeatures() {
                return this.withOptimizations("getPublicRoadmapFeatures", "public_roadmap_features", "features", () => db.select().from(features).where((0, drizzle_orm_11.eq)(features.isPublicRoadmap, true)));
            }
            /**
             * Creates feature.
             * @param feature
             */
            async createFeature(feature) {
                const result = await dbPerformanceMonitor.trackQuery("createFeature", async () => {
                    return db.insert(features).values([feature]).returning();
                });
                queryCache.invalidate("features");
                return result[0];
            }
            /**
             * Updates feature.
             * @param id
             * @param updates
             */
            async updateFeature(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateFeature", async () => {
                    return db.update(features).set(updates).where((0, drizzle_orm_11.eq)(features.id, id)).returning();
                });
                queryCache.invalidate("features");
                return result[0];
            }
            /**
             * Deletes feature.
             * @param id
             */
            async deleteFeature(id) {
                const result = await dbPerformanceMonitor.trackQuery("deleteFeature", async () => {
                    return db.delete(features).where((0, drizzle_orm_11.eq)(features.id, id)).returning();
                });
                queryCache.invalidate("features");
                return result.length > 0;
            }
            // Actionable Items operations
            /**
             * Gets actionable items by feature.
             * @param featureId
             */
            async getActionableItemsByFeature(featureId) {
                return this.withOptimizations("getActionableItemsByFeature", `actionable_items:${featureId}`, "actionable_items", () => db.select().from(actionableItems).where((0, drizzle_orm_11.eq)(actionableItems.featureId, featureId)));
            }
            /**
             * Gets actionable item by ID.
             * @param id
             */
            async getActionableItem(id) {
                return this.withOptimizations("getActionableItem", `actionable_item:${id}`, "actionable_items", async () => {
                    const result = await db.select().from(actionableItems).where((0, drizzle_orm_11.eq)(actionableItems.id, id));
                    return result[0];
                });
            }
            /**
             * Creates actionable item.
             * @param item
             */
            async createActionableItem(item) {
                const result = await dbPerformanceMonitor.trackQuery("createActionableItem", async () => {
                    return db.insert(actionableItems).values([item]).returning();
                });
                queryCache.invalidate("actionable_items");
                return result[0];
            }
            /**
             * Creates multiple actionable items.
             * @param items
             */
            async createActionableItems(items) {
                const result = await dbPerformanceMonitor.trackQuery("createActionableItems", async () => {
                    return db.insert(actionableItems).values(items).returning();
                });
                queryCache.invalidate("actionable_items");
                return result;
            }
            /**
             * Updates actionable item.
             * @param id
             * @param updates
             */
            async updateActionableItem(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateActionableItem", async () => {
                    return db.update(actionableItems).set(updates).where((0, drizzle_orm_11.eq)(actionableItems.id, id)).returning();
                });
                queryCache.invalidate("actionable_items");
                return result[0];
            }
            /**
             * Deletes actionable item.
             * @param id
             */
            async deleteActionableItem(id) {
                const result = await dbPerformanceMonitor.trackQuery("deleteActionableItem", async () => {
                    return db.delete(actionableItems).where((0, drizzle_orm_11.eq)(actionableItems.id, id)).returning();
                });
                queryCache.invalidate("actionable_items");
                return result.length > 0;
            }
            /**
             * Deletes actionable items by feature.
             * @param featureId
             */
            async deleteActionableItemsByFeature(featureId) {
                const result = await dbPerformanceMonitor.trackQuery("deleteActionableItemsByFeature", async () => {
                    return db.delete(actionableItems).where((0, drizzle_orm_11.eq)(actionableItems.featureId, featureId)).returning();
                });
                queryCache.invalidate("actionable_items");
                return result.length > 0;
            }
            // Invitation operations
            /**
             * Gets all invitations.
             */
            async getInvitations() {
                return this.withOptimizations("getInvitations", "all_invitations", "invitations", () => db.select().from(invitations));
            }
            /**
             * Gets invitation by ID.
             * @param id
             */
            async getInvitation(id) {
                return this.withOptimizations("getInvitation", `invitation:${id}`, "invitations", async () => {
                    const result = await db.select().from(invitations).where((0, drizzle_orm_11.eq)(invitations.id, id));
                    return result[0];
                });
            }
            /**
             * Gets invitation by token.
             * @param token
             */
            async getInvitationByToken(token) {
                return this.withOptimizations("getInvitationByToken", `invitation_token:${token}`, "invitations", async () => {
                    const result = await db.select().from(invitations).where((0, drizzle_orm_11.eq)(invitations.token, token));
                    return result[0];
                });
            }
            /**
             * Gets invitations by email.
             * @param email
             */
            async getInvitationsByEmail(email) {
                return this.withOptimizations("getInvitationsByEmail", `invitations_email:${email}`, "invitations", () => db.select().from(invitations).where((0, drizzle_orm_11.eq)(invitations.email, email)));
            }
            /**
             * Gets invitations by inviter.
             * @param userId
             */
            async getInvitationsByInviter(userId) {
                return this.withOptimizations("getInvitationsByInviter", `invitations_inviter:${userId}`, "invitations", () => db.select().from(invitations).where((0, drizzle_orm_11.eq)(invitations.invitedByUserId, userId)));
            }
            /**
             * Gets invitations by status.
             * @param status
             */
            async getInvitationsByStatus(status) {
                return this.withOptimizations("getInvitationsByStatus", `invitations_status:${status}`, "invitations", () => db.select().from(invitations).where((0, drizzle_orm_11.eq)(invitations.status, status)));
            }
            /**
             * Creates invitation.
             * @param invitation
             */
            async createInvitation(invitation) {
                const result = await dbPerformanceMonitor.trackQuery("createInvitation", async () => {
                    return db.insert(invitations).values([invitation]).returning();
                });
                queryCache.invalidate("invitations");
                return result[0];
            }
            /**
             * Updates invitation.
             * @param id
             * @param updates
             */
            async updateInvitation(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateInvitation", async () => {
                    return db.update(invitations).set(updates).where((0, drizzle_orm_11.eq)(invitations.id, id)).returning();
                });
                queryCache.invalidate("invitations");
                return result[0];
            }
            /**
             * Accepts invitation.
             * @param token
             * @param userData
             * @param userData.firstName
             * @param ipAddress
             * @param userData.lastName
             * @param userAgent
             * @param userData.password
             */
            async acceptInvitation(token, userData, ipAddress, userAgent) {
                return dbPerformanceMonitor.trackQuery("acceptInvitation", async () => {
                    const invitation = await this.getInvitationByToken(token);
                    if (!invitation || invitation.status !== "pending") {
                        return null;
                    }
                    const user = await this.createUser({
                        username: invitation.email.split("@")[0],
                        // Use email prefix as username
                        email: invitation.email,
                        firstName: userData.firstName,
                        lastName: userData.lastName,
                        password: userData.password,
                        // This should be hashed
                        language: "en",
                        // Default language
                        role: invitation.role
                    });
                    const updatedInvitation = await this.updateInvitation(invitation.id, {
                        status: "accepted",
                        acceptedAt: /* @__PURE__ */ new Date()
                    });
                    return { user, invitation: updatedInvitation };
                });
            }
            /**
             * Cancels invitation.
             * @param id
             * @param cancelledBy
             */
            async cancelInvitation(id, cancelledBy) {
                const result = await dbPerformanceMonitor.trackQuery("cancelInvitation", async () => {
                    return db.update(invitations).set({
                        status: "cancelled",
                        cancelledBy,
                        cancelledAt: /* @__PURE__ */ new Date(),
                        updatedAt: /* @__PURE__ */ new Date()
                    }).where((0, drizzle_orm_11.eq)(invitations.id, id)).returning();
                });
                queryCache.invalidate("invitations");
                return result[0];
            }
            /**
             * Expires old invitations.
             */
            async expireInvitations() {
                const result = await dbPerformanceMonitor.trackQuery("expireInvitations", async () => {
                    return db.update(invitations).set({ status: "expired", updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(invitations.status, "pending"), (0, drizzle_orm_11.lte)(invitations.expiresAt, /* @__PURE__ */ new Date()))).returning();
                });
                queryCache.invalidate("invitations");
                return result.length;
            }
            /**
             * Deletes invitation.
             * @param id
             */
            async deleteInvitation(id) {
                const result = await dbPerformanceMonitor.trackQuery("deleteInvitation", async () => {
                    return db.delete(invitations).where((0, drizzle_orm_11.eq)(invitations.id, id)).returning();
                });
                queryCache.invalidate("invitations");
                return result.length > 0;
            }
            // Invitation Audit Log operations
            /**
             * Gets invitation audit logs.
             * @param invitationId
             */
            async getInvitationAuditLogs(invitationId) {
                return this.withOptimizations("getInvitationAuditLogs", `invitation_logs:${invitationId}`, "invitation_logs", () => db.select().from(invitationAuditLog).where((0, drizzle_orm_11.eq)(invitationAuditLog.invitationId, invitationId)).orderBy((0, drizzle_orm_11.desc)(invitationAuditLog.createdAt)));
            }
            /**
             * Creates invitation audit log.
             * @param logEntry
             */
            async createInvitationAuditLog(logEntry) {
                const result = await dbPerformanceMonitor.trackQuery("createInvitationAuditLog", async () => {
                    return db.insert(invitationAuditLog).values(logEntry).returning();
                });
                queryCache.invalidate("invitation_logs");
                return result[0];
            }
            // Permission operations
            /**
             * Gets all permissions.
             */
            async getPermissions() {
                return this.withOptimizations("getPermissions", "permissions:all", "permissions", () => db.select().from(permissions).where((0, drizzle_orm_11.eq)(permissions.isActive, true)).orderBy(permissions.resourceType, permissions.action));
            }
            /**
             * Gets all role permissions.
             */
            async getRolePermissions() {
                return this.withOptimizations("getRolePermissions", "role_permissions:all", "role_permissions", () => db.select().from(rolePermissions).innerJoin(permissions, (0, drizzle_orm_11.eq)(rolePermissions.permissionId, permissions.id)).where((0, drizzle_orm_11.eq)(permissions.isActive, true)).orderBy(rolePermissions.role, permissions.resourceType));
            }
            /**
             * Gets all user permissions.
             */
            async getUserPermissions() {
                try {
                    const results = await db.select().from(userPermissions).innerJoin(permissions, (0, drizzle_orm_11.eq)(userPermissions.permissionId, permissions.id)).where((0, drizzle_orm_11.eq)(permissions.isActive, true)).orderBy(userPermissions.userId);
                    return results || [];
                }
                catch (error) {
                    console.error("\u274C Error getting user permissions:", error);
                    return [];
                }
            }
            // Old building document methods removed - using unified documents table
            // Unified Document operations
            async getDocuments(filters) {
                return this.withOptimizations("getDocuments", `documents:${JSON.stringify(filters)}`, "documents", async () => {
                    let query = db.select().from(documents);
                    const conditions = [];
                    if (filters?.buildingId) {
                        conditions.push((0, drizzle_orm_11.eq)(documents.buildingId, filters.buildingId));
                    }
                    if (filters?.residenceId) {
                        conditions.push((0, drizzle_orm_11.eq)(documents.residenceId, filters.residenceId));
                    }
                    if (filters?.documentType) {
                        conditions.push((0, drizzle_orm_11.eq)(documents.documentType, filters.documentType));
                    }
                    if (conditions.length > 0) {
                        query = query.where((0, drizzle_orm_11.and)(...conditions));
                    }
                    const result = await query.orderBy((0, drizzle_orm_11.desc)(documents.createdAt));
                    return result || [];
                });
            }
            async getDocument(id) {
                return this.withOptimizations("getDocument", `document:${id}`, "documents", async () => {
                    const result = await db.select().from(documents).where((0, drizzle_orm_11.eq)(documents.id, id)).limit(1);
                    return result[0];
                });
            }
            async createDocument(document) {
                return dbPerformanceMonitor.trackQuery("createDocument", async () => {
                    const result = await db.insert(documents).values(document).returning();
                    if (document.buildingId) {
                        queryCache.invalidate("documents", `*buildingId*${document.buildingId}*`);
                    }
                    if (document.residenceId) {
                        queryCache.invalidate("documents", `*residenceId*${document.residenceId}*`);
                    }
                    return result[0];
                });
            }
            async updateDocument(id, updates) {
                return dbPerformanceMonitor.trackQuery("updateDocument", async () => {
                    const result = await db.update(documents).set({ ...updates, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(documents.id, id)).returning();
                    if (result[0]) {
                        queryCache.invalidate("documents", `document:${id}`);
                        queryCache.invalidate("documents", "*");
                    }
                    return result[0];
                });
            }
            async deleteDocument(id) {
                return dbPerformanceMonitor.trackQuery("deleteDocument", async () => {
                    const result = await db.delete(documents).where((0, drizzle_orm_11.eq)(documents.id, id)).returning({ id: documents.id });
                    if (result.length > 0) {
                        queryCache.invalidate("documents", `document:${id}`);
                        queryCache.invalidate("documents", "*");
                        return true;
                    }
                    return false;
                });
            }
            // Old resident document methods removed - using unified documents table
            // Legacy Document operations (kept for migration purposes)
            /**
             * Gets legacy documents for user.
             * @param userId
             * @param userRole
             * @param organizationId
             * @param residenceIds
             */
            async getDocumentsForUser(userId, userRole, organizationId, residenceIds) {
                return this.withOptimizations("getDocumentsForUser", `legacy_docs:${userId}:${userRole}`, "documents", async () => {
                    return await db.select().from(documents).orderBy((0, drizzle_orm_11.desc)(documents.createdAt));
                });
            }
            // Password reset operations
            /**
             *
             * @param token
             */
            async createPasswordResetToken(token) {
                const result = await db.insert(passwordResetTokens).values(token).returning();
                return result[0];
            }
            /**
             *
             * @param tokenValue
             */
            async getPasswordResetToken(tokenValue) {
                return this.withOptimizations("getPasswordResetToken", `token_${tokenValue}`, "password_reset_tokens", async () => {
                    const result = await db.select().from(passwordResetTokens).where((0, drizzle_orm_11.eq)(passwordResetTokens.token, tokenValue)).limit(1);
                    return result[0];
                });
            }
            /**
             *
             * @param tokenId
             */
            async markPasswordResetTokenAsUsed(tokenId) {
                const result = await db.update(passwordResetTokens).set({
                    isUsed: true,
                    usedAt: /* @__PURE__ */ new Date()
                }).where((0, drizzle_orm_11.eq)(passwordResetTokens.id, tokenId)).returning();
                return result[0];
            }
            /**
             *
             */
            async cleanupExpiredPasswordResetTokens() {
                const result = await db.delete(passwordResetTokens).where((0, drizzle_orm_11.lte)(passwordResetTokens.expiresAt, /* @__PURE__ */ new Date())).returning();
                return result.length;
            }
            // Contact operations
            /**
             * Gets all contacts.
             */
            async getContacts() {
                return this.withOptimizations("getContacts", "all_contacts", "contacts", () => db.select().from(contacts).where((0, drizzle_orm_11.eq)(contacts.isActive, true)));
            }
            /**
             * Gets contacts by entity.
             * @param entityId
             * @param entity
             */
            async getContactsByEntity(entityId, entity) {
                return this.withOptimizations("getContactsByEntity", `contacts_entity:${entity}_${entityId}`, "contacts", () => db.select().from(contacts).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(contacts.entityId, entityId), (0, drizzle_orm_11.eq)(contacts.entity, entity), (0, drizzle_orm_11.eq)(contacts.isActive, true))));
            }
            /**
             * Gets contacts for residence with user data.
             * @param residenceId
             */
            async getContactsForResidence(residenceId) {
                return this.withOptimizations("getContactsForResidence", `contacts_residence:${residenceId}`, "contacts", () => db.select().from(contacts).innerJoin(users, (0, drizzle_orm_11.eq)(contacts.name, users.email)).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(contacts.entityId, residenceId), (0, drizzle_orm_11.eq)(contacts.entity, "residence"), (0, drizzle_orm_11.eq)(contacts.isActive, true))));
            }
            /**
             * Creates a new contact.
             * @param contact
             */
            async createContact(contact) {
                const result = await dbPerformanceMonitor.trackQuery("createContact", async () => {
                    return db.insert(contacts).values(contact).returning();
                });
                queryCache.invalidate("contacts");
                return result[0];
            }
            /**
             * Updates a contact.
             * @param id
             * @param updates
             */
            async updateContact(id, updates) {
                const result = await dbPerformanceMonitor.trackQuery("updateContact", async () => {
                    return db.update(contacts).set(updates).where((0, drizzle_orm_11.eq)(contacts.id, id)).returning();
                });
                queryCache.invalidate("contacts");
                return result[0];
            }
            /**
             * Deletes a contact.
             * @param id
             */
            async deleteContact(id) {
                const result = await dbPerformanceMonitor.trackQuery("deleteContact", async () => {
                    return db.update(contacts).set({ isActive: false }).where((0, drizzle_orm_11.eq)(contacts.id, id)).returning();
                });
                queryCache.invalidate("contacts");
                return result.length > 0;
            }
            /**
             * Gets demands for a user.
             * @param userId
             */
            async getDemandsForUser(userId) {
                return this.withOptimizations("getDemandsForUser", `demands_user:${userId}`, "demands", () => db.select().from(demands).where((0, drizzle_orm_11.eq)(demands.userId, userId)));
            }
            /**
             * Gets a specific demand.
             * @param id
             */
            async getDemand(id) {
                return this.withOptimizations("getDemand", `demand:${id}`, "demands", async () => {
                    const result = await db.select().from(demands).where((0, drizzle_orm_11.eq)(demands.id, id));
                    return result[0];
                });
            }
            // Bug operations implementation
            /**
             *
             * @param userId
             * @param userRole
             * @param organizationId
             */
            async getBugsForUser(userId, userRole, organizationId) {
                return this.withOptimizations("getBugsForUser", `bugs:${userRole}:${userId}`, "bugs", async () => {
                    let results;
                    if (userRole === "admin") {
                        results = await db.select().from(bugs).orderBy((0, drizzle_orm_11.desc)(bugs.createdAt));
                    }
                    else if (userRole === "manager" && organizationId) {
                        results = await db.select().from(bugs).orderBy((0, drizzle_orm_11.desc)(bugs.createdAt));
                    }
                    else {
                        results = await db.select().from(bugs).where((0, drizzle_orm_11.eq)(bugs.createdBy, userId)).orderBy((0, drizzle_orm_11.desc)(bugs.createdAt));
                    }
                    const bugsWithAttachments = await Promise.all(results.map(async (bug) => {
                        const attachments = await db.select({
                            id: documents.id,
                            name: documents.name,
                            fileName: documents.fileName,
                            fileSize: documents.fileSize,
                            filePath: documents.filePath
                        }).from(documents).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(documents.attachedToType, "bug"), (0, drizzle_orm_11.eq)(documents.attachedToId, bug.id)));
                        return {
                            ...bug,
                            attachmentCount: attachments.length,
                            attachments: attachments.map((att) => ({
                                id: att.id,
                                name: att.fileName || att.name,
                                size: parseInt(att.fileSize || "0"),
                                url: `/api/documents/${att.id}/file`,
                                type: att.fileName ? att.fileName.split(".").pop()?.toLowerCase() || "unknown" : "unknown"
                            }))
                        };
                    }));
                    return bugsWithAttachments;
                });
            }
            /**
             *
             * @param id
             * @param userId
             * @param userRole
             * @param organizationId
             */
            async getBug(id, userId, userRole, organizationId) {
                const key = `bug:${id}:user:${userId}:${userRole}`;
                console.log(`\u{1F50D} getBug called with key: ${key}`);
                return withCache("bug", key, async () => {
                    console.log(`\u{1F4CA} Cache miss for ${key}, querying database...`);
                    const result = await db.select().from(bugs).where((0, drizzle_orm_11.eq)(bugs.id, id));
                    const bug = result[0];
                    console.log(`\u{1F4CB} Database query result:`, bug ? { id: bug.id, title: bug.title, filePath: bug.filePath, file_path: bug.file_path } : "undefined");
                    if (!bug) {
                        return void 0;
                    }
                    if (userRole === "admin") {
                        return bug;
                    }
                    if (userRole === "manager") {
                        return bug;
                    }
                    return bug.createdBy === userId ? bug : void 0;
                });
            }
            /**
             *
             * @param bugData
             */
            async createBug(bugData) {
                const result = await db.insert(bugs).values({
                    ...bugData,
                    id: crypto_1.default.randomUUID(),
                    status: "new",
                    assignedTo: null,
                    resolvedAt: null,
                    resolvedBy: null,
                    notes: null,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                }).returning();
                queryCache.invalidate("bugs");
                queryCache.invalidate("bug", `bug:${result[0].id}:*`);
                return result[0];
            }
            /**
             *
             * @param id
             * @param updates
             * @param userId
             * @param userRole
             */
            async updateBug(id, updates, userId, userRole) {
                const [existingBug] = await db.select().from(bugs).where((0, drizzle_orm_11.eq)(bugs.id, id));
                if (!existingBug) {
                    return void 0;
                }
                const canEdit = userRole === "admin" || userRole === "manager" || existingBug.createdBy === userId;
                if (!canEdit) {
                    return void 0;
                }
                const result = await db.update(bugs).set({
                    ...updates,
                    updatedAt: /* @__PURE__ */ new Date()
                }).where((0, drizzle_orm_11.eq)(bugs.id, id)).returning();
                if (result[0]) {
                    queryCache.invalidate("bugs");
                }
                return result[0];
            }
            /**
             *
             * @param id
             * @param userId
             * @param userRole
             */
            async deleteBug(id, userId, userRole) {
                const [existingBug] = await db.select().from(bugs).where((0, drizzle_orm_11.eq)(bugs.id, id));
                if (!existingBug) {
                    return false;
                }
                const canDelete = userRole === "admin" || existingBug.createdBy === userId;
                if (!canDelete) {
                    return false;
                }
                const result = await db.delete(bugs).where((0, drizzle_orm_11.eq)(bugs.id, id)).returning();
                if (result.length > 0) {
                    queryCache.invalidate("bugs");
                    return true;
                }
                return false;
            }
            // Feature Request operations with optimization
            /**
             * Retrieves feature requests for a user with role-based access control.
             * @param userId
             * @param userRole
             * @param organizationId
             */
            async getFeatureRequestsForUser(userId, userRole, organizationId) {
                return this.withOptimizations("getFeatureRequestsForUser", `feature_requests:${userRole}:${userId}`, "feature_requests", async () => {
                    const results = await db.select().from(featureRequests).orderBy((0, drizzle_orm_11.desc)(featureRequests.createdAt));
                    const requestsWithAttachments = await Promise.all(results.map(async (request) => {
                        const attachments = await db.select({
                            id: documents.id,
                            name: documents.name,
                            filePath: documents.filePath,
                            fileSize: documents.fileSize,
                            mimeType: documents.mimeType
                        }).from(documents).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(documents.attachedToType, "feature_request"), (0, drizzle_orm_11.eq)(documents.attachedToId, request.id)));
                        return {
                            ...request,
                            attachmentCount: attachments.length,
                            attachments: attachments.map((att) => ({
                                id: att.id,
                                name: att.name,
                                url: `/api/documents/${att.id}/file`,
                                size: att.fileSize ? parseInt(att.fileSize) : 0,
                                mimeType: att.mimeType
                            }))
                        };
                    }));
                    if (userRole === "admin") {
                        return requestsWithAttachments;
                    }
                    return requestsWithAttachments.map((request) => ({
                        ...request,
                        createdBy: null
                    }));
                });
            }
            /**
             * Retrieves a specific feature request by ID with role-based access control.
             * @param id
             * @param userId
             * @param userRole
             * @param organizationId
             */
            async getFeatureRequest(id, userId, userRole, organizationId) {
                return this.withOptimizations("getFeatureRequest", `feature_request:${id}:${userRole}`, "feature_requests", async () => {
                    const result = await db.select().from(featureRequests).where((0, drizzle_orm_11.eq)(featureRequests.id, id));
                    const featureRequest = result[0];
                    if (!featureRequest) {
                        return void 0;
                    }
                    if (userRole === "admin") {
                        return featureRequest;
                    }
                    return {
                        ...featureRequest,
                        createdBy: null
                    };
                });
            }
            /**
             * Creates a new feature request.
             * @param featureRequestData
             */
            async createFeatureRequest(featureRequestData) {
                const result = await dbPerformanceMonitor.trackQuery("createFeatureRequest", async () => {
                    return db.insert(featureRequests).values({
                        ...featureRequestData,
                        id: crypto_1.default.randomUUID(),
                        status: "submitted",
                        upvoteCount: 0,
                        assignedTo: null,
                        reviewedBy: null,
                        reviewedAt: null,
                        adminNotes: null,
                        mergedIntoId: null,
                        createdAt: /* @__PURE__ */ new Date(),
                        updatedAt: /* @__PURE__ */ new Date()
                    }).returning();
                });
                queryCache.invalidate("feature_requests");
                return result[0];
            }
            /**
             * Updates a feature request with role-based permissions.
             * Users can edit their own, managers can edit within org, admins can edit all.
             * @param id
             * @param updates
             * @param userId
             * @param userRole
             */
            async updateFeatureRequest(id, updates, userId, userRole) {
                const existingFeatureRequest = await db.select().from(featureRequests).where((0, drizzle_orm_11.eq)(featureRequests.id, id)).limit(1);
                if (!existingFeatureRequest[0]) {
                    return void 0;
                }
                const canEdit = userRole === "admin" || existingFeatureRequest[0].createdBy === userId;
                if (!canEdit) {
                    return void 0;
                }
                const result = await dbPerformanceMonitor.trackQuery("updateFeatureRequest", async () => {
                    return db.update(featureRequests).set({
                        ...updates,
                        updatedAt: /* @__PURE__ */ new Date()
                    }).where((0, drizzle_orm_11.eq)(featureRequests.id, id)).returning();
                });
                if (result[0]) {
                    queryCache.invalidate("feature_requests");
                }
                return result[0];
            }
            /**
             * Deletes a feature request (admin only).
             * @param id
             * @param userId
             * @param userRole
             */
            async deleteFeatureRequest(id, userId, userRole) {
                if (userRole !== "admin") {
                    return false;
                }
                await db.delete(featureRequestUpvotes).where((0, drizzle_orm_11.eq)(featureRequestUpvotes.featureRequestId, id));
                const result = await db.delete(featureRequests).where((0, drizzle_orm_11.eq)(featureRequests.id, id)).returning();
                if (result.length > 0) {
                    queryCache.invalidate("feature_requests");
                    queryCache.invalidate("feature_request_upvotes");
                    return true;
                }
                return false;
            }
            /**
             * Upvotes a feature request.
             * @param upvoteData
             */
            async upvoteFeatureRequest(upvoteData) {
                const { featureRequestId, userId } = upvoteData;
                try {
                    const featureRequestResult = await db.select().from(featureRequests).where((0, drizzle_orm_11.eq)(featureRequests.id, featureRequestId));
                    if (featureRequestResult.length === 0) {
                        return {
                            success: false,
                            message: "Feature request not found"
                        };
                    }
                    const existingUpvote = await db.select().from(featureRequestUpvotes).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(featureRequestUpvotes.featureRequestId, featureRequestId), (0, drizzle_orm_11.eq)(featureRequestUpvotes.userId, userId)));
                    if (existingUpvote.length > 0) {
                        return {
                            success: false,
                            message: "You have already upvoted this feature request"
                        };
                    }
                    const upvoteResult = await db.insert(featureRequestUpvotes).values({
                        ...upvoteData,
                        id: crypto_1.default.randomUUID(),
                        createdAt: /* @__PURE__ */ new Date()
                    }).returning();
                    const updatedFeatureRequest = await db.update(featureRequests).set({
                        upvoteCount: sql `${featureRequests.upvoteCount} + 1`,
                        updatedAt: /* @__PURE__ */ new Date()
                    }).where((0, drizzle_orm_11.eq)(featureRequests.id, featureRequestId)).returning();
                    queryCache.invalidate("feature_requests");
                    queryCache.invalidate("feature_request_upvotes");
                    return {
                        success: true,
                        message: "Feature request upvoted successfully",
                        data: {
                            upvote: upvoteResult[0],
                            featureRequest: updatedFeatureRequest[0]
                        }
                    };
                }
                catch (error) {
                    console.error("\u274C Error upvoting feature request:", error);
                    return {
                        success: false,
                        message: "Failed to upvote feature request"
                    };
                }
            }
            /**
             * Removes an upvote from a feature request.
             * @param featureRequestId
             * @param userId
             */
            async removeFeatureRequestUpvote(featureRequestId, userId) {
                try {
                    const featureRequestResult = await db.select().from(featureRequests).where((0, drizzle_orm_11.eq)(featureRequests.id, featureRequestId));
                    if (featureRequestResult.length === 0) {
                        return {
                            success: false,
                            message: "Feature request not found"
                        };
                    }
                    const removedUpvote = await db.delete(featureRequestUpvotes).where((0, drizzle_orm_11.and)((0, drizzle_orm_11.eq)(featureRequestUpvotes.featureRequestId, featureRequestId), (0, drizzle_orm_11.eq)(featureRequestUpvotes.userId, userId))).returning();
                    if (removedUpvote.length === 0) {
                        return {
                            success: false,
                            message: "You have not upvoted this feature request"
                        };
                    }
                    const updatedFeatureRequest = await db.update(featureRequests).set({
                        upvoteCount: sql `GREATEST(0, ${featureRequests.upvoteCount} - 1)`,
                        updatedAt: /* @__PURE__ */ new Date()
                    }).where((0, drizzle_orm_11.eq)(featureRequests.id, featureRequestId)).returning();
                    queryCache.invalidate("feature_requests");
                    queryCache.invalidate("feature_request_upvotes");
                    return {
                        success: true,
                        message: "Upvote removed successfully",
                        data: {
                            featureRequest: updatedFeatureRequest[0]
                        }
                    };
                }
                catch (error) {
                    console.error("\u274C Error removing feature request upvote:", error);
                    return {
                        success: false,
                        message: "Failed to remove upvote"
                    };
                }
            }
            // Invoice operations
            async getInvoices(filters) {
                try {
                    let query = db.select().from(invoices);
                    const conditions = [];
                    if (filters) {
                        if (filters.buildingId) {
                            conditions.push((0, drizzle_orm_11.eq)(invoices.buildingId, filters.buildingId));
                        }
                        if (filters.residenceId) {
                            conditions.push((0, drizzle_orm_11.eq)(invoices.residenceId, filters.residenceId));
                        }
                        if (filters.userId && filters.userRole) {
                            if (filters.userRole === "tenant" || filters.userRole === "resident") {
                                conditions.push((0, drizzle_orm_11.eq)(invoices.createdBy, filters.userId));
                            }
                        }
                    }
                    if (conditions.length > 0) {
                        query = query.where((0, drizzle_orm_11.and)(...conditions));
                    }
                    const invoices2 = await query.orderBy((0, drizzle_orm_11.desc)(invoices.createdAt));
                    return invoices2;
                }
                catch (error) {
                    console.error("\u274C Error fetching invoices:", error);
                    return [];
                }
            }
            async getInvoice(id) {
                try {
                    const result = await db.select().from(invoices).where((0, drizzle_orm_11.eq)(invoices.id, id)).limit(1);
                    return result[0];
                }
                catch (error) {
                    console.error("\u274C Error fetching invoice:", error);
                    return void 0;
                }
            }
            async createInvoice(invoice) {
                try {
                    const result = await db.insert(invoices).values(invoice).returning();
                    return result[0];
                }
                catch (error) {
                    console.error("\u274C Error creating invoice:", error);
                    throw error;
                }
            }
            async updateInvoice(id, updates) {
                try {
                    const result = await db.update(invoices).set({ ...updates, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_11.eq)(invoices.id, id)).returning();
                    return result[0];
                }
                catch (error) {
                    console.error("\u274C Error updating invoice:", error);
                    return void 0;
                }
            }
            async deleteInvoice(id) {
                try {
                    const result = await db.delete(invoices).where((0, drizzle_orm_11.eq)(invoices.id, id)).returning();
                    return result.length > 0;
                }
                catch (error) {
                    console.error("\u274C Error deleting invoice:", error);
                    return false;
                }
            }
        };
    }
});
// server/storage.ts
var storage_exports = {};
__export(storage_exports, {
    MemStorage: () => MemStorage,
    OptimizedDatabaseStorage: () => OptimizedDatabaseStorage,
    storage: () => storage
});
const crypto_2 = require("crypto");
var MemStorage, storage;
var init_storage = __esm({
    "server/storage.ts"() {
        init_optimized_db_storage();
        init_optimized_db_storage();
        MemStorage = class {
            constructor() {
                this.users = /* @__PURE__ */ new Map();
                this.organizations = /* @__PURE__ */ new Map();
                this.buildings = /* @__PURE__ */ new Map();
                this.residences = /* @__PURE__ */ new Map();
                this.pillars = /* @__PURE__ */ new Map();
                this.workspaceStatuses = /* @__PURE__ */ new Map();
                this.qualityMetrics = /* @__PURE__ */ new Map();
                this.frameworkConfigs = /* @__PURE__ */ new Map();
                this.improvementSuggestions = /* @__PURE__ */ new Map();
                this.features = /* @__PURE__ */ new Map();
                this.actionableItems = /* @__PURE__ */ new Map();
                this.invitations = /* @__PURE__ */ new Map();
                this.invitationAuditLogs = /* @__PURE__ */ new Map();
                this.bugs = /* @__PURE__ */ new Map();
                this.featureRequests = /* @__PURE__ */ new Map();
                this.featureRequestUpvotes = /* @__PURE__ */ new Map();
                this.invoices = /* @__PURE__ */ new Map();
                this.initializeTestUser().catch(console.error);
            }
            async initializeTestUser() {
                const bcrypt3 = __require("bcryptjs");
                const securePassword = await bcrypt3.hash("admin123", 12);
                const user = {
                    id: "550e8400-e29b-41d4-a716-446655440000",
                    username: "kevin.hervieux@koveo-gestion.com",
                    email: "kevin.hervieux@koveo-gestion.com",
                    password: securePassword,
                    firstName: "Kevin",
                    lastName: "Hervieux",
                    phone: "",
                    profileImage: "",
                    language: "fr",
                    role: "admin",
                    isActive: true,
                    lastLoginAt: null,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.users.set(user.id, user);
            }
            // User operations
            async getUsers() {
                return Array.from(this.users.values());
            }
            async getUsersWithAssignments() {
                const users5 = Array.from(this.users.values());
                return users5.map((user) => ({
                    ...user,
                    organizations: [],
                    buildings: [],
                    residences: []
                }));
            }
            async getUsersByOrganizations(_userId) {
                return [];
            }
            async getUser(id) {
                return this.users.get(id);
            }
            async getUserOrganizations(_userId) {
                return [];
            }
            async getUserResidences(_userId) {
                return [];
            }
            async getUserByEmail(email) {
                return Array.from(this.users.values()).find((user) => user.email === email);
            }
            async createUser(insertUser) {
                const id = (0, crypto_2.randomUUID)();
                const user = {
                    ...insertUser,
                    id,
                    phone: insertUser.phone || null,
                    profileImage: insertUser.profileImage || "",
                    role: insertUser.role || "tenant",
                    language: insertUser.language || "fr",
                    isActive: true,
                    lastLoginAt: null,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.users.set(id, user);
                return user;
            }
            async updateUser(id, updates) {
                const existingUser = this.users.get(id);
                if (!existingUser) {
                    return void 0;
                }
                const updatedUser = {
                    ...existingUser,
                    ...updates,
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.users.set(id, updatedUser);
                return updatedUser;
            }
            // Minimal implementations for other required methods
            async createPasswordResetToken(_token) {
                return {
                    ..._token,
                    id: (0, crypto_2.randomUUID)(),
                    createdAt: /* @__PURE__ */ new Date(),
                    usedAt: null,
                    isUsed: false,
                    ipAddress: _token.ipAddress || "",
                    userAgent: _token.userAgent || ""
                };
            }
            async getPasswordResetToken(_token) {
                return void 0;
            }
            async markPasswordResetTokenAsUsed(_tokenId) {
                return void 0;
            }
            async cleanupExpiredPasswordResetTokens() {
                return 0;
            }
            async getOrganizations() {
                return Array.from(this.organizations.values());
            }
            async getOrganization(id) {
                return this.organizations.get(id);
            }
            async getOrganizationByName(name) {
                return Array.from(this.organizations.values()).find((org) => org.name === name);
            }
            async createOrganization(org) {
                const id = (0, crypto_2.randomUUID)();
                const organization = {
                    ...org,
                    id,
                    phone: org.phone || "",
                    email: org.email || "",
                    website: org.website || "",
                    registrationNumber: org.registrationNumber || "",
                    isActive: true,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.organizations.set(id, organization);
                return organization;
            }
            async updateOrganization(id, updates) {
                const existing = this.organizations.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.organizations.set(id, updated);
                return updated;
            }
            async getBuildingsByOrganization(orgId) {
                return Array.from(this.buildings.values()).filter((b) => b.organizationId === orgId);
            }
            async getBuildings() {
                return Array.from(this.buildings.values());
            }
            async getBuilding(id) {
                return this.buildings.get(id);
            }
            async createBuilding(building) {
                const id = (0, crypto_2.randomUUID)();
                const newBuilding = {
                    ...building,
                    id,
                    isActive: true,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    totalUnits: building.totalUnits || 0,
                    totalFloors: building.totalFloors || 0,
                    yearBuilt: building.yearBuilt || 0,
                    buildingType: building.buildingType,
                    bankAccountNumber: building.bankAccountNumber || "",
                    bankAccountMinimums: building.bankAccountMinimums ? JSON.stringify(building.bankAccountMinimums) : "",
                    bankAccountUpdatedAt: /* @__PURE__ */ new Date(),
                    inflationSettings: "",
                    parkingSpaces: building.parkingSpaces || 0,
                    storageSpaces: building.storageSpaces || 0,
                    amenities: building.amenities || null,
                    managementCompany: building.managementCompany || null,
                    bankAccountNotes: null,
                    bankAccountStartDate: null,
                    bankAccountStartAmount: null
                };
                this.buildings.set(id, newBuilding);
                return newBuilding;
            }
            async updateBuilding(id, updates) {
                const existing = this.buildings.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.buildings.set(id, updated);
                return updated;
            }
            async deleteBuilding(id) {
                const building = this.buildings.get(id);
                if (!building) {
                    return false;
                }
                const updatedBuilding = {
                    ...building,
                    isActive: false,
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.buildings.set(id, updatedBuilding);
                return true;
            }
            async getResidences() {
                return Array.from(this.residences.values());
            }
            async getResidence(id) {
                return this.residences.get(id);
            }
            async getResidencesByBuilding(buildingId) {
                return Array.from(this.residences.values()).filter((r) => r.buildingId === buildingId);
            }
            async createResidence(residence) {
                const id = (0, crypto_2.randomUUID)();
                const newResidence = {
                    ...residence,
                    id,
                    isActive: true,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    floor: residence.floor || 0,
                    squareFootage: residence.squareFootage?.toString() || "0",
                    bedrooms: residence.bedrooms || 0,
                    bathrooms: residence.bathrooms?.toString() || "0",
                    balcony: residence.balcony || false,
                    parkingSpaceNumbers: residence.parkingSpaceNumbers || [],
                    storageSpaceNumbers: residence.storageSpaceNumbers || [],
                    ownershipPercentage: residence.ownershipPercentage?.toString() || "0",
                    monthlyFees: residence.monthlyFees?.toString() || "0"
                };
                this.residences.set(id, newResidence);
                return newResidence;
            }
            async updateResidence(id, updates) {
                const existing = this.residences.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.residences.set(id, updated);
                return updated;
            }
            async deleteResidence(id) {
                return this.residences.delete(id);
            }
            async getContacts() {
                return [];
            }
            async getContactsByEntity() {
                return [];
            }
            async getContactsForResidence() {
                return [];
            }
            async createContact(contact) {
                const id = (0, crypto_2.randomUUID)();
                return {
                    ...contact,
                    id,
                    name: contact.name,
                    email: contact.email || "",
                    phone: contact.phone || "",
                    entity: contact.entity,
                    entityId: contact.entityId,
                    contactCategory: contact.contactCategory,
                    isActive: true,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
            }
            async updateContact() {
                return void 0;
            }
            async deleteContact() {
                return false;
            }
            async getDocuments(_filters) {
                return [];
            }
            async getDocument(_id) {
                return void 0;
            }
            async createDocument(doc) {
                const id = (0, crypto_2.randomUUID)();
                return {
                    ...doc,
                    id,
                    description: doc.description || "",
                    buildingId: doc.buildingId || "",
                    residenceId: doc.residenceId || "",
                    fileName: doc.fileName || "",
                    fileSize: doc.fileSize || "",
                    mimeType: doc.mimeType || "",
                    attachedToType: doc.attachedToType || "",
                    attachedToId: doc.attachedToId || "",
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
            }
            async updateDocument(_id, _updates) {
                return void 0;
            }
            async deleteDocument(_id) {
                return false;
            }
            // Invoice operations
            async getInvoices(filters) {
                let invoices2 = Array.from(this.invoices.values());
                if (filters) {
                    if (filters.buildingId) {
                        invoices2 = invoices2.filter((invoice) => invoice.buildingId === filters.buildingId);
                    }
                    if (filters.residenceId) {
                        invoices2 = invoices2.filter((invoice) => invoice.residenceId === filters.residenceId);
                    }
                    if (filters.userId && filters.userRole) {
                        if (filters.userRole === "tenant" || filters.userRole === "resident") {
                            invoices2 = invoices2.filter((invoice) => invoice.createdBy === filters.userId);
                        }
                    }
                }
                return invoices2.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
            }
            async getInvoice(id) {
                return this.invoices.get(id);
            }
            async createInvoice(invoice) {
                const id = (0, crypto_2.randomUUID)();
                const newInvoice = {
                    ...invoice,
                    id,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.invoices.set(id, newInvoice);
                return newInvoice;
            }
            async updateInvoice(id, updates) {
                const existing = this.invoices.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.invoices.set(id, updated);
                return updated;
            }
            async deleteInvoice(id) {
                return this.invoices.delete(id);
            }
            async getPermissions() {
                return [];
            }
            async getRolePermissions() {
                return [];
            }
            async getUserPermissions() {
                return [];
            }
            async getPillars() {
                return Array.from(this.pillars.values()).sort((a, b) => parseInt(a.order) - parseInt(b.order));
            }
            async getPillar(id) {
                return this.pillars.get(id);
            }
            async createPillar(pillar) {
                const id = (0, crypto_2.randomUUID)();
                const newPillar = {
                    ...pillar,
                    id,
                    name: pillar.name,
                    description: pillar.description || "",
                    status: pillar.status || "pending",
                    order: pillar.order.toString(),
                    configuration: pillar.configuration || null,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.pillars.set(id, newPillar);
                return newPillar;
            }
            async updatePillar(id, updates) {
                const existing = this.pillars.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.pillars.set(id, updated);
                return updated;
            }
            async getWorkspaceStatuses() {
                return Array.from(this.workspaceStatuses.values());
            }
            async getWorkspaceStatus(component) {
                return this.workspaceStatuses.get(component);
            }
            async createWorkspaceStatus(status) {
                const id = (0, crypto_2.randomUUID)();
                const newStatus = {
                    ...status,
                    id,
                    status: status.status,
                    component: status.component,
                    lastUpdated: /* @__PURE__ */ new Date()
                };
                this.workspaceStatuses.set(status.component, newStatus);
                return newStatus;
            }
            async updateWorkspaceStatus(component, updates) {
                const existing = this.workspaceStatuses.get(component);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.workspaceStatuses.set(component, updated);
                return updated;
            }
            async getQualityMetrics() {
                return Array.from(this.qualityMetrics.values());
            }
            async createQualityMetric(metric) {
                const id = (0, crypto_2.randomUUID)();
                const newMetric = {
                    ...metric,
                    id,
                    timestamp: /* @__PURE__ */ new Date()
                };
                this.qualityMetrics.set(id, newMetric);
                return newMetric;
            }
            async getFrameworkConfigurations() {
                return Array.from(this.frameworkConfigs.values());
            }
            async createFrameworkConfiguration(config2) {
                const id = (0, crypto_2.randomUUID)();
                const newConfig = {
                    ...config2,
                    id,
                    description: config2.description || "",
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.frameworkConfigs.set(config2._key, newConfig);
                return newConfig;
            }
            async updateFrameworkConfiguration(key, updates) {
                const existing = this.frameworkConfigs.get(key);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.frameworkConfigs.set(key, updated);
                return updated;
            }
            async getImprovementSuggestions() {
                return Array.from(this.improvementSuggestions.values());
            }
            async createImprovementSuggestion(suggestion) {
                const id = (0, crypto_2.randomUUID)();
                const newSuggestion = {
                    ...suggestion,
                    id,
                    filePath: suggestion.filePath || null,
                    status: suggestion.status,
                    category: suggestion.category,
                    priority: suggestion.priority || "Medium",
                    assignedTo: suggestion.assignedTo || null,
                    technicalDetails: suggestion.technicalDetails || null,
                    businessImpact: suggestion.businessImpact || null,
                    implementationEffort: suggestion.implementationEffort || null,
                    quebecComplianceRelevance: suggestion.quebecComplianceRelevance || null,
                    suggestedBy: suggestion.suggestedBy || null,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    acknowledgedAt: null,
                    completedAt: null
                };
                this.improvementSuggestions.set(id, newSuggestion);
                return newSuggestion;
            }
            async updateImprovementSuggestion(id, updates) {
                const existing = this.improvementSuggestions.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.improvementSuggestions.set(id, updated);
                return updated;
            }
            async getTopImprovementSuggestions(limit) {
                const suggestions = Array.from(this.improvementSuggestions.values());
                const priorityOrder = { "Critical": 0, "High": 1, "Medium": 2, "Low": 3 };
                return suggestions.sort((a, b) => {
                    const priorityA = priorityOrder[a.priority] ?? 999;
                    const priorityB = priorityOrder[b.priority] ?? 999;
                    const priorityDiff = priorityA - priorityB;
                    if (priorityDiff !== 0)
                        return priorityDiff;
                    return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
                }).slice(0, limit);
            }
            async clearNewSuggestions() {
                for (const [id, suggestion] of this.improvementSuggestions.entries()) {
                    if (suggestion.status === "New") {
                        this.improvementSuggestions.delete(id);
                    }
                }
            }
            async updateSuggestionStatus(id, status) {
                const suggestion = this.improvementSuggestions.get(id);
                if (!suggestion)
                    return void 0;
                const updatedSuggestion = {
                    ...suggestion,
                    status,
                    updatedAt: /* @__PURE__ */ new Date()
                };
                this.improvementSuggestions.set(id, updatedSuggestion);
                return updatedSuggestion;
            }
            async getFeatures() {
                return Array.from(this.features.values());
            }
            async getFeature(id) {
                return this.features.get(id);
            }
            async createFeature(feature) {
                const id = (0, crypto_2.randomUUID)();
                const newFeature = {
                    ...feature,
                    id,
                    isPublicRoadmap: true,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    requestedBy: feature.requestedBy || null,
                    assignedTo: feature.assignedTo || null,
                    estimatedHours: feature.estimatedHours || null,
                    businessObjective: feature.businessObjective || null,
                    targetUsers: feature.targetUsers || null,
                    successMetrics: feature.successMetrics || null,
                    technicalComplexity: feature.technicalComplexity || null,
                    dependencies: feature.dependencies?.join(",") || null,
                    userFlow: feature.userFlow || null,
                    actualHours: null,
                    startDate: null,
                    completedDate: null,
                    tags: null,
                    metadata: null,
                    aiAnalysisResult: null,
                    aiAnalyzedAt: null,
                    isStrategicPath: false,
                    syncedAt: null
                };
                this.features.set(id, newFeature);
                return newFeature;
            }
            async updateFeature(id, updates) {
                const existing = this.features.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.features.set(id, updated);
                return updated;
            }
            async getFeaturesByStatus(status) {
                return Array.from(this.features.values()).filter((f) => f.status === status);
            }
            async getPublicRoadmapFeatures() {
                return Array.from(this.features.values()).filter((f) => f.isPublicRoadmap);
            }
            async getActionableItems() {
                return Array.from(this.actionableItems.values());
            }
            async createActionableItem(item) {
                const id = (0, crypto_2.randomUUID)();
                const newItem = {
                    ...item,
                    id,
                    featureId: item.featureId || (0, crypto_2.randomUUID)(),
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    estimatedHours: item.estimatedHours || null,
                    actualHours: null,
                    dependencies: item.dependencies || null,
                    technicalDetails: null,
                    implementationPrompt: null,
                    testingRequirements: null,
                    estimatedEffort: null,
                    orderIndex: 0,
                    startedAt: null,
                    completedAt: null
                };
                this.actionableItems.set(id, newItem);
                return newItem;
            }
            async updateActionableItem(id, updates) {
                const existing = this.actionableItems.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.actionableItems.set(id, updated);
                return updated;
            }
            async deleteActionableItem(id) {
                return this.actionableItems.delete(id);
            }
            async getInvitations() {
                return Array.from(this.invitations.values());
            }
            async createInvitation(invitation) {
                const id = (0, crypto_2.randomUUID)();
                const newInvitation = {
                    ...invitation,
                    id,
                    token: (0, crypto_2.randomUUID)(),
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    status: "pending",
                    ipAddress: "",
                    userAgent: "",
                    tokenHash: null,
                    usedAt: null,
                    createdByUserId: invitation.invitedByUserId,
                    acceptedByUserId: null,
                    acceptedAt: null,
                    revokedAt: null,
                    revokedByUserId: null,
                    lastAccessedAt: null
                };
                this.invitations.set(id, newInvitation);
                return newInvitation;
            }
            async getInvitationByToken(token) {
                return Array.from(this.invitations.values()).find((inv) => inv.token === token);
            }
            async updateInvitation(id, updates) {
                const existing = this.invitations.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.invitations.set(id, updated);
                return updated;
            }
            async getInvitationAuditLogs() {
                return Array.from(this.invitationAuditLogs.values());
            }
            async createInvitationAuditLog(log2) {
                const id = (0, crypto_2.randomUUID)();
                const newLog = {
                    ...log2,
                    id,
                    createdAt: /* @__PURE__ */ new Date(),
                    ipAddress: log2.ipAddress || "",
                    userAgent: log2.userAgent || "",
                    details: log2.details || {},
                    previousStatus: log2.previousStatus || "pending",
                    newStatus: log2.newStatus || "pending"
                };
                this.invitationAuditLogs.set(id, newLog);
                return newLog;
            }
            async getCommentsByDemand() {
                return [];
            }
            async createDemandComment(comment) {
                const id = (0, crypto_2.randomUUID)();
                return {
                    ...comment,
                    id,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
            }
            async getBugs() {
                return Array.from(this.bugs.values());
            }
            async getBugsForUser(userId, userRole, organizationId) {
                const allBugs = Array.from(this.bugs.values());
                if (userRole === "admin") {
                    return allBugs;
                }
                else if (userRole === "manager" && organizationId) {
                    return allBugs;
                }
                else {
                    return allBugs.filter((bug) => bug.createdBy === userId);
                }
            }
            async getBug(id, userId, role, organizationId) {
                const bug = this.bugs.get(id);
                if (!bug)
                    return void 0;
                if (userId && role) {
                    if (role === "admin") {
                        return bug;
                    }
                    else if (role === "manager" && organizationId) {
                        return bug;
                    }
                    else if (bug.createdBy === userId) {
                        return bug;
                    }
                    else {
                        return void 0;
                    }
                }
                return bug;
            }
            async createBug(bug) {
                const id = (0, crypto_2.randomUUID)();
                const newBug = {
                    ...bug,
                    id,
                    status: "new",
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    reproductionSteps: bug.reproductionSteps || "",
                    assignedTo: null,
                    resolvedAt: null,
                    resolvedBy: null,
                    notes: null,
                    environment: bug.environment || ""
                };
                this.bugs.set(id, newBug);
                return newBug;
            }
            async updateBug(id, updates, userId, role) {
                const existing = this.bugs.get(id);
                if (!existing)
                    return void 0;
                if (userId && role) {
                    if (role === "admin" || role === "manager") {
                    }
                    else if (existing.createdBy === userId) {
                    }
                    else {
                        return void 0;
                    }
                }
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.bugs.set(id, updated);
                return updated;
            }
            async deleteBug(id, userId, role) {
                const existing = this.bugs.get(id);
                if (!existing)
                    return false;
                if (role === "admin" || existing.createdBy === userId) {
                    this.bugs.delete(id);
                    return true;
                }
                return false;
            }
            async getFeatureRequests() {
                const featureRequests2 = Array.from(this.featureRequests.values());
                const enrichedRequests = await Promise.all(featureRequests2.map(async (request) => {
                    const attachments = [];
                    return {
                        ...request,
                        attachmentCount: attachments.length,
                        attachments: []
                    };
                }));
                return enrichedRequests;
            }
            async getFeatureRequestsForUser(userId, role, organizationId) {
                return this.getFeatureRequests();
            }
            async getFeatureRequest(id, userId, role, organizationId) {
                const request = this.featureRequests.get(id);
                if (!request)
                    return void 0;
                const attachments = [];
                return {
                    ...request,
                    attachmentCount: attachments.length,
                    attachments: []
                };
            }
            async createFeatureRequest(request) {
                const id = (0, crypto_2.randomUUID)();
                const newRequest = {
                    ...request,
                    id,
                    status: "submitted",
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date(),
                    upvoteCount: 0,
                    assignedTo: null,
                    reviewedBy: null,
                    reviewedAt: null,
                    estimatedHours: null,
                    mergedIntoId: null
                };
                this.featureRequests.set(id, newRequest);
                return newRequest;
            }
            async updateFeatureRequest(id, updates) {
                const existing = this.featureRequests.get(id);
                if (!existing)
                    return void 0;
                const updated = { ...existing, ...updates, updatedAt: /* @__PURE__ */ new Date() };
                this.featureRequests.set(id, updated);
                return updated;
            }
            async addFeatureRequestUpvote() {
                return { success: true, message: "Upvote added" };
            }
            async removeFeatureRequestUpvote() {
                return { success: true, message: "Upvote removed" };
            }
        };
        storage = new OptimizedDatabaseStorage();
    }
});
// server/api/buildings/operations.ts
var operations_exports = {};
__export(operations_exports, {
    addResidencesAutomatically: () => addResidencesAutomatically,
    adjustResidenceCount: () => adjustResidenceCount,
    buildingExists: () => buildingExists,
    cascadeDeleteBuilding: () => cascadeDeleteBuilding,
    createBuilding: () => createBuilding,
    deleteBuilding: () => deleteBuilding,
    deleteSelectedResidences: () => deleteSelectedResidences,
    getResidencesForSelection: () => getResidencesForSelection,
    updateBuilding: () => updateBuilding
});
const drizzle_orm_13 = require("drizzle-orm");
const crypto_3 = __importDefault(require("crypto"));
async function createBuilding(buildingData) {
    const buildingId = crypto_3.default.randomUUID();
    const newBuilding = await db.insert(buildings).values({
        name: buildingData.name,
        address: buildingData.address || "",
        city: buildingData.city || "",
        province: buildingData.province || "QC",
        postalCode: buildingData.postalCode || "",
        buildingType: buildingData.buildingType || "condo",
        yearBuilt: buildingData.yearBuilt,
        totalUnits: buildingData.totalUnits || 0,
        totalFloors: buildingData.totalFloors,
        parkingSpaces: buildingData.parkingSpaces,
        storageSpaces: buildingData.storageSpaces,
        amenities: buildingData.amenities,
        managementCompany: buildingData.managementCompany,
        organizationId: buildingData.organizationId,
        isActive: true
    }).returning();
    if (buildingData.totalUnits && buildingData.totalUnits > 0 && buildingData.totalUnits <= 300) {
        try {
            const totalUnits = buildingData.totalUnits;
            const totalFloors = buildingData.totalFloors || 1;
            const unitsPerFloor = Math.ceil(totalUnits / totalFloors);
            const residencesToCreate = [];
            for (let unit = 1; unit <= totalUnits; unit++) {
                const floor = Math.ceil(unit / unitsPerFloor);
                const unitOnFloor = (unit - 1) % unitsPerFloor + 1;
                const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, "0")}`;
                residencesToCreate.push({
                    buildingId: newBuilding[0].id,
                    unitNumber,
                    floor,
                    isActive: true
                });
            }
            const createdResidences = await db.insert(residences).values(residencesToCreate).returning();
        }
        catch (___residenceError) {
            console.error("\u26A0\uFE0F Error auto-generating residences:", ___residenceError);
        }
    }
    return newBuilding[0];
}
async function adjustResidenceCount(buildingId, organizationId, newTotalUnits, currentTotalUnits, totalFloors) {
    const currentActiveResidences = await db.select({ id: residences.id, unitNumber: residences.unitNumber }).from(residences).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.eq)(residences.buildingId, buildingId), (0, drizzle_orm_13.eq)(residences.isActive, true)));
    const currentActiveCount = currentActiveResidences.length;
    if (newTotalUnits > currentActiveCount) {
        await addResidencesAutomatically(buildingId, newTotalUnits - currentActiveCount, totalFloors, currentActiveResidences);
        return { action: "increased" };
    }
    else if (newTotalUnits < currentActiveCount) {
        const deletableResidences = await getResidencesForSelection(buildingId, currentActiveCount - newTotalUnits);
        return { action: "decreased", residencesToSelect: deletableResidences };
    }
    return { action: "none" };
}
async function addResidencesAutomatically(buildingId, residencesToAdd, totalFloors, existingResidences) {
    const existingUnitNumbers = new Set(existingResidences.map((r) => r.unitNumber));
    const unitsPerFloor = Math.ceil((existingResidences.length + residencesToAdd) / totalFloors);
    const residencesToCreate = [];
    let unitCounter = 1;
    let created = 0;
    while (created < residencesToAdd) {
        const floor = Math.ceil(unitCounter / unitsPerFloor);
        const unitOnFloor = (unitCounter - 1) % unitsPerFloor + 1;
        const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, "0")}`;
        if (!existingUnitNumbers.has(unitNumber)) {
            residencesToCreate.push({
                buildingId,
                unitNumber,
                floor,
                isActive: true
            });
            existingUnitNumbers.add(unitNumber);
            created++;
        }
        unitCounter++;
    }
    if (residencesToCreate.length > 0) {
        await db.insert(residences).values(residencesToCreate);
        console.log(`\u2705 Auto-created ${residencesToCreate.length} residences for building ${buildingId}`);
    }
}
async function getResidencesForSelection(buildingId, maxToSelect) {
    const allActiveResidences = await db.select({
        id: residences.id,
        unitNumber: residences.unitNumber,
        floor: residences.floor
    }).from(residences).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.eq)(residences.buildingId, buildingId), (0, drizzle_orm_13.eq)(residences.isActive, true))).orderBy(residences.unitNumber);
    const residenceDetails = await Promise.all(allActiveResidences.map(async (residence) => {
        const docs = await db.select({ id: documents.id }).from(documents).where((0, drizzle_orm_13.eq)(documents.residenceId, residence.id)).limit(1);
        const userRels = await db.select({ id: userResidences.id }).from(userResidences).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.eq)(userResidences.residenceId, residence.id), (0, drizzle_orm_13.eq)(userResidences.isActive, true))).limit(1);
        return {
            id: residence.id,
            unitNumber: residence.unitNumber,
            hasDocuments: docs.length > 0,
            hasUsers: userRels.length > 0
        };
    }));
    return residenceDetails.sort((a, b) => {
        const aScore = (a.hasDocuments ? 1 : 0) + (a.hasUsers ? 1 : 0);
        const bScore = (b.hasDocuments ? 1 : 0) + (b.hasUsers ? 1 : 0);
        return aScore - bScore;
    });
}
async function deleteSelectedResidences(buildingId, residenceIds, userRole) {
    if (userRole !== "admin") {
        throw new Error("Only admins can delete residences");
    }
    const documentsToDelete = await db.select({ id: documents.id }).from(documents).where((0, drizzle_orm_13.inArray)(documents.residenceId, residenceIds));
    await db.delete(documents).where((0, drizzle_orm_13.inArray)(documents.residenceId, residenceIds));
    await db.update(userResidences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.inArray)(userResidences.residenceId, residenceIds), (0, drizzle_orm_13.eq)(userResidences.isActive, true)));
    await db.update(residences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.inArray)(residences.id, residenceIds), (0, drizzle_orm_13.eq)(residences.buildingId, buildingId)));
    console.log(`\u{1F5D1}\uFE0F Deleted ${residenceIds.length} residences and ${documentsToDelete.length} documents for building ${buildingId}`);
    return {
        deletedCount: residenceIds.length,
        documentsDeleted: documentsToDelete.length
    };
}
async function updateBuilding(buildingId, buildingData) {
    const currentBuilding = await db.select({ totalUnits: buildings.totalUnits, totalFloors: buildings.totalFloors, organizationId: buildings.organizationId }).from(buildings).where((0, drizzle_orm_13.eq)(buildings.id, buildingId)).limit(1);
    if (currentBuilding.length === 0) {
        throw new Error("Building not found");
    }
    const updatedBuilding = await db.update(buildings).set({
        name: buildingData.name,
        address: buildingData.address || "",
        city: buildingData.city || "",
        province: buildingData.province || "QC",
        postalCode: buildingData.postalCode || "",
        buildingType: buildingData.buildingType || "condo",
        yearBuilt: buildingData.yearBuilt,
        totalUnits: buildingData.totalUnits || 0,
        totalFloors: buildingData.totalFloors,
        parkingSpaces: buildingData.parkingSpaces,
        storageSpaces: buildingData.storageSpaces,
        amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,
        managementCompany: buildingData.managementCompany,
        organizationId: buildingData.organizationId,
        updatedAt: /* @__PURE__ */ new Date()
    }).where((0, drizzle_orm_13.eq)(buildings.id, buildingId)).returning();
    if (buildingData.totalUnits && buildingData.totalUnits !== currentBuilding[0].totalUnits) {
        await adjustResidenceCount(buildingId, currentBuilding[0].organizationId, buildingData.totalUnits, currentBuilding[0].totalUnits, buildingData.totalFloors || currentBuilding[0].totalFloors || 1);
    }
    return updatedBuilding[0];
}
async function deleteBuilding(buildingId) {
    const deletedBuilding = await db.update(buildings).set({
        isActive: false,
        updatedAt: /* @__PURE__ */ new Date()
    }).where((0, drizzle_orm_13.eq)(buildings.id, buildingId)).returning();
    return deletedBuilding[0];
}
async function cascadeDeleteBuilding(buildingId) {
    const building = await db.select({ id: buildings.id, name: buildings.name }).from(buildings).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.eq)(buildings.id, buildingId), (0, drizzle_orm_13.eq)(buildings.isActive, true))).limit(1);
    if (building.length === 0) {
        throw new Error("Building not found");
    }
    await db.transaction(async (tx) => {
        const buildingResidences = await tx.select({ id: residences.id }).from(residences).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.eq)(residences.buildingId, buildingId), (0, drizzle_orm_13.eq)(residences.isActive, true)));
        const residenceIds = buildingResidences.map((r) => r.id);
        if (residenceIds.length > 0) {
            await tx.delete(documents).where((0, drizzle_orm_13.inArray)(documents.residenceId, residenceIds));
            await tx.update(userResidences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_13.inArray)(userResidences.residenceId, residenceIds));
            console.log("\u26A0\uFE0F  User deletion disabled for data safety - users will be preserved");
            await tx.update(residences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_13.inArray)(residences.id, residenceIds));
        }
        await tx.update(buildings).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_13.eq)(buildings.id, buildingId));
    });
    return building[0];
}
async function buildingExists(buildingId) {
    const result = await db.select({ id: buildings.id }).from(buildings).where((0, drizzle_orm_13.and)((0, drizzle_orm_13.eq)(buildings.id, buildingId), (0, drizzle_orm_13.eq)(buildings.isActive, true))).limit(1);
    return result.length > 0;
}
var init_operations2 = __esm({
    "server/api/buildings/operations.ts"() {
        init_db();
        init_schema();
    }
});
// server/index.ts
const express_2 = __importDefault(require("express"));
const helmet_1 = __importDefault(require("helmet"));
// server/health-check.ts
function createFastHealthCheck() {
    return (req, res) => {
        req.setTimeout(200, () => {
            if (!res.headersSent) {
                res.status(200).send("OK");
            }
        });
        res.set({
            "Cache-Control": "no-cache, no-store, must-revalidate",
            Connection: "close",
            "Content-Type": "text/plain",
            "X-Health-Check": "OK",
            "X-Response-Time": Date.now().toString()
        });
        res.status(200).send("OK");
    };
}
function createStatusCheck() {
    return (req, res) => {
        req.setTimeout(200, () => {
            if (!res.headersSent) {
                res.status(200).json({ status: "ok" });
            }
        });
        res.set({
            "Cache-Control": "no-cache, no-store, must-revalidate",
            Connection: "close",
            "Content-Type": "application/json"
        });
        res.status(200).json({
            status: "ok",
            timestamp: Date.now()
        });
    };
}
// server/index.ts
init_vite();
// server/routes.ts
const express_3 = __importDefault(require("express"));
// server/auth.ts
init_storage();
init_db();
init_config();
init_schema();
const express_session_1 = __importDefault(require("express-session"));
const connect_pg_simple_1 = __importDefault(require("connect-pg-simple"));
const crypto_4 = require("crypto");
const bcrypt = __importStar(require("bcryptjs"));
const serverless_2 = require("@neondatabase/serverless");
const drizzle_orm_14 = require("drizzle-orm");
// server/services/email-service.ts
const mail_1 = require("@sendgrid/mail");
var EmailService = class {
    /**
     * Initializes the EmailService with SendGrid configuration.
     * Validates that the SENDGRID_API_KEY environment variable is set.
     *
     * @throws {Error} When SENDGRID_API_KEY environment variable is not set.
     *
     * @example
     * ```typescript
     * const emailService = new EmailService();
     * await emailService.sendPasswordResetEmail('user@example.com', 'John', 'https://reset-url');
     * ```
     */
    constructor() {
        this.fromEmail = "info@koveo-gestion.com";
        this.fromName = "Koveo Gestion";
        if (!process.env.SENDGRID_API_KEY) {
            throw new Error("SENDGRID_API_KEY environment variable must be set");
        }
        this.mailService = new mail_1.MailService();
        this.mailService.setApiKey(process.env.SENDGRID_API_KEY);
    }
    /**
     * Sends password reset email in French or English with Quebec Law 25 compliance.
     * Link tracking is disabled for direct URL access as required by security protocols.
     *
     * @param {string} to - Recipient email address.
     * @param {string} userName - User's display name for personalization.
     * @param {string} resetUrl - Complete password reset URL with token.
     * @param {'fr' | 'en'} [language='fr'] - Email language (defaults to French for Quebec).
     * @returns {Promise<boolean>} Promise resolving to true if email sent successfully.
     *
     * @throws {Error} When SendGrid API fails or invalid parameters provided.
     *
     * @example
     * ```typescript
     * const emailService = new EmailService();
     * const success = await emailService.sendPasswordResetEmail(
     *   'user@example.com',
     *   'Jean Dupont',
     *   'https://app.koveo.com/reset-password?token=abc123',
     *   'fr'
     * );
     * ```
     */
    async sendPasswordResetEmail(to, userName, resetUrl, language = "fr") {
        try {
            const templates = {
                fr: {
                    subject: "R\xE9initialisation de votre mot de passe - Koveo Gestion",
                    html: `
            <!DOCTYPE html>
            <html>
            <head>
              <meta charset="UTF-8">
              <title>R\xE9initialisation de mot de passe</title>
            </head>
            <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
              <div style="background: #f8f9fa; padding: 30px; border-radius: 8px;">
                <h1 style="color: #2563eb; margin-bottom: 20px;">Koveo Gestion</h1>
                
                <h2 style="color: #374151;">R\xE9initialisation de votre mot de passe</h2>
                
                <p>Bonjour ${userName},</p>
                
                <p>Vous avez demand\xE9 la r\xE9initialisation de votre mot de passe pour votre compte Koveo Gestion.</p>
                
                <p>Copiez et collez ce lien dans votre navigateur pour r\xE9initialiser votre mot de passe :</p>
                
                <div style="background: #f3f4f6; padding: 15px; border-radius: 6px; margin: 20px 0; word-break: break-all;">
                  <code style="font-size: 14px; color: #374151;">${resetUrl}</code>
                </div>
                
                <p style="text-align: center; margin: 20px 0;">
                  <strong style="color: #dc2626;">Important:</strong> Ce lien expire dans 1 heure.
                </p>
                
                <p><strong>Ce lien expire dans 1 heure pour votre s\xE9curit\xE9.</strong></p>
                
                <p>Si vous n'avez pas demand\xE9 cette r\xE9initialisation, ignorez ce courriel.</p>
                
                <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;">
                
                <div style="font-size: 12px; color: #6b7280;">
                  <p><strong>Confidentialit\xE9 & S\xE9curit\xE9</strong></p>
                  <p>Conforme \xE0 la Loi 25 du Qu\xE9bec. Vos donn\xE9es personnelles sont prot\xE9g\xE9es selon les normes de s\xE9curit\xE9 les plus strictes.</p>
                  
                  <p>\xA9 2025 Koveo Gestion. Tous droits r\xE9serv\xE9s.</p>
                </div>
              </div>
            </body>
            </html>
          `,
                    text: `R\xE9initialisation de votre mot de passe - Koveo Gestion

Bonjour ${userName},

Vous avez demand\xE9 la r\xE9initialisation de votre mot de passe pour votre compte Koveo Gestion.

Cliquez sur ce lien pour cr\xE9er un nouveau mot de passe :
${resetUrl}

Ce lien expire dans 1 heure pour votre s\xE9curit\xE9.

Si vous n'avez pas demand\xE9 cette r\xE9initialisation, ignorez ce courriel.

Conforme \xE0 la Loi 25 du Qu\xE9bec. Vos donn\xE9es personnelles sont prot\xE9g\xE9es selon les normes de s\xE9curit\xE9 les plus strictes.

\xA9 2025 Koveo Gestion. Tous droits r\xE9serv\xE9s.`
                },
                en: {
                    subject: "Password Reset - Koveo Gestion",
                    html: `
            <!DOCTYPE html>
            <html>
            <head>
              <meta charset="UTF-8">
              <title>Password Reset</title>
            </head>
            <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
              <div style="background: #f8f9fa; padding: 30px; border-radius: 8px;">
                <h1 style="color: #2563eb; margin-bottom: 20px;">Koveo Gestion</h1>
                
                <h2 style="color: #374151;">Reset Your Password</h2>
                
                <p>Hello ${userName},</p>
                
                <p>You have requested to reset your password for your Koveo Gestion account.</p>
                
                <p>Copy and paste this link into your browser to reset your password:</p>
                
                <div style="background: #f3f4f6; padding: 15px; border-radius: 6px; margin: 20px 0; word-break: break-all;">
                  <code style="font-size: 14px; color: #374151;">${resetUrl}</code>
                </div>
                
                <p style="text-align: center; margin: 20px 0;">
                  <strong style="color: #dc2626;">Important:</strong> This link expires in 1 hour.
                </p>
                
                <p><strong>This link expires in 1 hour for your security.</strong></p>
                
                <p>If you did not request this reset, please ignore this email.</p>
                
                <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;">
                
                <div style="font-size: 12px; color: #6b7280;">
                  <p><strong>Privacy & Security</strong></p>
                  <p>Quebec Law 25 compliant. Your personal data is protected according to the strictest security standards.</p>
                  
                  <p>\xA9 2025 Koveo Gestion. All rights reserved.</p>
                </div>
              </div>
            </body>
            </html>
          `,
                    text: `Password Reset - Koveo Gestion

Hello ${userName},

You have requested to reset your password for your Koveo Gestion account.

Click this link to create a new password:
${resetUrl}

This link expires in 1 hour for your security.

If you did not request this reset, please ignore this email.

Quebec Law 25 compliant. Your personal data is protected according to the strictest security standards.

\xA9 2025 Koveo Gestion. All rights reserved.`
                }
            };
            const template = templates[language];
            await this.mailService.send({
                to,
                from: {
                    email: this.fromEmail,
                    name: this.fromName
                },
                subject: template.subject,
                text: template.text,
                html: template.html,
                mailSettings: {
                    bypassListManagement: {
                        enable: false
                    },
                    footer: {
                        enable: false
                    },
                    sandboxMode: {
                        enable: false
                    }
                },
                trackingSettings: {
                    clickTracking: {
                        enable: false,
                        enableText: false
                    },
                    openTracking: {
                        enable: false
                    },
                    subscriptionTracking: {
                        enable: false
                    },
                    ganalytics: {
                        enable: false
                    }
                }
            });
            return true;
        }
        catch (error) {
            console.error("\u274C Error sending email:", error);
            return false;
        }
    }
    /**
     * Sends an invitation email to a new user with their invitation link.
     *
     * @param {string} to - Recipient's email address.
     * @param {string} recipientName - Name of the person being invited.
     * @param {string} token - Invitation token for the registration URL.
     * @param {string} organizationName - Name of the organization they're being invited to.
     * @param {string} inviterName - Name of the person sending the invitation.
     * @param {Date} expiresAt - When the invitation expires.
     * @param {string} language - Language preference (en/fr).
     * @param {string} personalMessage - Optional personal message from inviter.
     * @returns {Promise<boolean>} Promise resolving to true if email sent successfully.
     */
    async sendInvitationEmail(to, recipientName, token, organizationName, inviterName, expiresAt, language = "fr", personalMessage) {
        try {
            const isDevelopment = process.env.NODE_ENV !== "production";
            let baseUrl;
            if (isDevelopment) {
                const replitUrl = process.env.REPLIT_DOMAINS ? `https://${process.env.REPLIT_DOMAINS}` : null;
                baseUrl = replitUrl || "http://localhost:5000";
            }
            else {
                baseUrl = process.env.FRONTEND_URL || "http://localhost:5000";
            }
            const invitationUrl = `${baseUrl}/register?invitation=${token}`;
            const expiryDate = expiresAt.toLocaleDateString(language === "fr" ? "fr-CA" : "en-CA");
            const isFrench = language === "fr";
            const subject = isFrench ? `Invitation \xE0 rejoindre ${organizationName} - Koveo Gestion` : `Invitation to join ${organizationName} - Koveo Gestion`;
            const htmlContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">${isFrench ? "Invitation \xE0 Koveo Gestion" : "Koveo Gestion Invitation"}</h2>
          
          <p>${isFrench ? "Bonjour" : "Hello"} ${recipientName},</p>
          
          <p>${isFrench ? `${inviterName} vous invite \xE0 rejoindre <strong>${organizationName}</strong> sur Koveo Gestion.` : `${inviterName} has invited you to join <strong>${organizationName}</strong> on Koveo Gestion.`}</p>

          ${personalMessage ? `<div style="background: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <p style="margin: 0;"><strong>${isFrench ? "Message personnel" : "Personal message"}:</strong></p>
            <p style="margin: 10px 0 0 0; font-style: italic;">"${personalMessage}"</p>
          </div>` : ""}
          
          <p>${isFrench ? "Pour cr\xE9er votre compte et accepter cette invitation, cliquez sur le bouton ci-dessous :" : "To create your account and accept this invitation, click the button below:"}</p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${invitationUrl}" 
               style="background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ${isFrench ? "Cr\xE9er mon compte" : "Create My Account"}
            </a>
          </div>
          
          <p style="color: #6b7280; font-size: 14px;">
            ${isFrench ? `Cette invitation expire le ${expiryDate}. Si vous ne pouvez pas cliquer sur le bouton, copiez et collez ce lien dans votre navigateur :` : `This invitation expires on ${expiryDate}. If you can't click the button, copy and paste this link into your browser:`}
          </p>
          
          <p style="word-break: break-all; background: #f9f9f9; padding: 10px; border-radius: 4px; font-size: 12px;">
            ${invitationUrl}
          </p>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
          
          <p style="color: #9ca3af; font-size: 12px;">
            ${isFrench ? "Cet email a \xE9t\xE9 envoy\xE9 par Koveo Gestion. Si vous n'avez pas demand\xE9 cette invitation, vous pouvez ignorer cet email." : "This email was sent by Koveo Gestion. If you did not request this invitation, you can safely ignore this email."}
          </p>
        </div>
      `;
            const textContent = `
        ${isFrench ? "Bonjour" : "Hello"} ${recipientName},

        ${isFrench ? `${inviterName} vous invite \xE0 rejoindre ${organizationName} sur Koveo Gestion.` : `${inviterName} has invited you to join ${organizationName} on Koveo Gestion.`}

        ${personalMessage ? `${isFrench ? "Message personnel" : "Personal message"}: "${personalMessage}"` : ""}

        ${isFrench ? "Pour cr\xE9er votre compte et accepter cette invitation, visitez :" : "To create your account and accept this invitation, visit:"}
        ${invitationUrl}

        ${isFrench ? `Cette invitation expire le ${expiryDate}.` : `This invitation expires on ${expiryDate}.`}

        ${isFrench ? "Si vous n'avez pas demand\xE9 cette invitation, vous pouvez ignorer cet email." : "If you did not request this invitation, you can safely ignore this email."}
      `;
            await this.mailService.send({
                to,
                from: {
                    email: this.fromEmail,
                    name: this.fromName
                },
                subject,
                text: textContent.trim(),
                html: htmlContent,
                trackingSettings: {
                    clickTracking: {
                        enable: false
                    },
                    openTracking: {
                        enable: false
                    },
                    subscriptionTracking: {
                        enable: false
                    },
                    ganalytics: {
                        enable: false
                    }
                }
            });
            return true;
        }
        catch (error) {
            console.error("\u274C Error details:", JSON.stringify(error, null, 2));
            return false;
        }
    }
    /**
     * Sends a reminder email for pending invitations.
     *
     * @param {string} to - Recipient's email address.
     * @param {string} recipientName - Name of the person being reminded.
     * @param {string} token - Invitation token for the registration URL.
     * @param {string} organizationName - Name of the organization they're being invited to.
     * @param {Date} expiresAt - When the invitation expires.
     * @param {string} language - Language preference (en/fr).
     * @returns {Promise<boolean>} Promise resolving to true if email sent successfully.
     */
    async sendReminderEmail(to, recipientName, token, organizationName, expiresAt, language = "fr") {
        try {
            const isDevelopment = process.env.NODE_ENV !== "production";
            let baseUrl;
            if (isDevelopment) {
                const replitUrl = process.env.REPLIT_DOMAINS ? `https://${process.env.REPLIT_DOMAINS}` : null;
                baseUrl = replitUrl || "http://localhost:5000";
            }
            else {
                baseUrl = process.env.FRONTEND_URL || "http://localhost:5000";
            }
            const invitationUrl = `${baseUrl}/register?invitation=${token}`;
            const expiryDate = expiresAt.toLocaleDateString(language === "fr" ? "fr-CA" : "en-CA");
            const isFrench = language === "fr";
            const subject = isFrench ? `Rappel: Invitation \xE0 rejoindre ${organizationName} - Koveo Gestion` : `Reminder: Invitation to join ${organizationName} - Koveo Gestion`;
            const htmlContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">${isFrench ? "Rappel d'invitation - Koveo Gestion" : "Invitation Reminder - Koveo Gestion"}</h2>
          
          <p>${isFrench ? "Bonjour" : "Hello"} ${recipientName},</p>
          
          <p>${isFrench ? `Ceci est un rappel concernant votre invitation \xE0 rejoindre <strong>${organizationName}</strong> sur Koveo Gestion.` : `This is a reminder about your invitation to join <strong>${organizationName}</strong> on Koveo Gestion.`}</p>
          
          <p>${isFrench ? "Votre invitation expire bient\xF4t. Pour cr\xE9er votre compte, cliquez sur le bouton ci-dessous :" : "Your invitation expires soon. To create your account, click the button below:"}</p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${invitationUrl}" 
               style="background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">
              ${isFrench ? "Cr\xE9er mon compte" : "Create My Account"}
            </a>
          </div>
          
          <p style="color: #dc2626; font-weight: bold;">
            ${isFrench ? `\u26A0\uFE0F Cette invitation expire le ${expiryDate}.` : `\u26A0\uFE0F This invitation expires on ${expiryDate}.`}
          </p>
          
          <p style="word-break: break-all; background: #f9f9f9; padding: 10px; border-radius: 4px; font-size: 12px;">
            ${invitationUrl}
          </p>
          
          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
          
          <p style="color: #9ca3af; font-size: 12px;">
            ${isFrench ? "Cet email a \xE9t\xE9 envoy\xE9 par Koveo Gestion." : "This email was sent by Koveo Gestion."}
          </p>
        </div>
      `;
            const textContent = `
        ${isFrench ? "Bonjour" : "Hello"} ${recipientName},

        ${isFrench ? `Ceci est un rappel concernant votre invitation \xE0 rejoindre ${organizationName} sur Koveo Gestion.` : `This is a reminder about your invitation to join ${organizationName} on Koveo Gestion.`}

        ${isFrench ? "Pour cr\xE9er votre compte et accepter cette invitation, visitez :" : "To create your account and accept this invitation, visit:"}
        ${invitationUrl}

        ${isFrench ? `Cette invitation expire le ${expiryDate}.` : `This invitation expires on ${expiryDate}.`}
      `;
            await this.mailService.send({
                to,
                from: {
                    email: this.fromEmail,
                    name: this.fromName
                },
                subject,
                text: textContent.trim(),
                html: htmlContent,
                trackingSettings: {
                    clickTracking: {
                        enable: false
                    },
                    openTracking: {
                        enable: false
                    },
                    subscriptionTracking: {
                        enable: false
                    },
                    ganalytics: {
                        enable: false
                    }
                }
            });
            return true;
        }
        catch (error) {
            console.error("\u274C Error sending reminder email:", error);
            return false;
        }
    }
    /**
     * Verifies an unsubscribe token for security.
     *
     * @param {string} email - Email address to verify token for.
     * @param {string} token - Unsubscribe token to verify.
     * @returns {boolean} True if token is valid.
     */
    verifyUnsubscribeToken(email, token) {
        try {
            const expectedToken = Buffer.from(email).toString("base64");
            return token === expectedToken;
        }
        catch (error) {
            console.error("\u274C Error verifying unsubscribe token:", error);
            return false;
        }
    }
    /**
     * Sends a test email to verify SendGrid configuration and connectivity.
     * Used for troubleshooting email delivery issues and validating API setup.
     *
     * @param {string} to - Recipient email address for the test email.
     * @returns {Promise<boolean>} Promise resolving to true if test email sent successfully.
     *
     * @example
     * ```typescript
     * const emailService = new EmailService();
     * const success = await emailService.sendTestEmail('admin@example.com');
     * if (success) {
     * }
     * ```
     */
    async sendTestEmail(to) {
        try {
            await this.mailService.send({
                to,
                from: {
                    email: this.fromEmail,
                    name: this.fromName
                },
                subject: "Test Email - Koveo Gestion",
                text: "This is a test email to verify SendGrid configuration.",
                html: "<p>This is a test email to verify SendGrid configuration.</p>"
            });
            return true;
        }
        catch (error) {
            console.error("\u274C Error sending email:", error);
            return false;
        }
    }
};
var emailService = new EmailService();
// server/auth.ts
init_query_cache();
async function checkUserPermission(userRole, permissionName) {
    try {
        const permissionExists = await db.select().from(permissions).where((0, drizzle_orm_14.eq)(permissions.name, permissionName)).limit(1);
        const rolePermissions2 = await db.select().from(rolePermissions).where((0, drizzle_orm_14.eq)(rolePermissions.role, userRole));
        const result = await db.select().from(rolePermissions).leftJoin(permissions, (0, drizzle_orm_14.eq)(rolePermissions.permissionId, permissions.id)).where((0, drizzle_orm_14.and)((0, drizzle_orm_14.eq)(rolePermissions.role, userRole), (0, drizzle_orm_14.eq)(permissions.name, permissionName))).limit(1);
        if (result.length === 0) {
            if (userRole === "admin") {
                const adminPerms = await db.select({ name: permissions.name }).from(rolePermissions).leftJoin(permissions, (0, drizzle_orm_14.eq)(rolePermissions.permissionId, permissions.id)).where((0, drizzle_orm_14.eq)(rolePermissions.role, "admin"));
            }
        }
        return result.length > 0;
    }
    catch (error) {
        console.error("\u274C Permission check failed:", error);
        return false;
    }
}
var emailService2 = new EmailService();
var PostgreSqlStore = (0, connect_pg_simple_1.default)(express_session_1.default);
function getDatabaseUrl(requestDomain) {
    const selectedUrl = config.database.getRuntimeDatabaseUrl(requestDomain);
    const isKoveoRequest = requestDomain?.includes("koveo-gestion.com");
    const isProduction = config.server.isProduction || isKoveoRequest;
    console.log(`\u{1F517} Session store using ${isProduction ? "PRODUCTION" : "DEVELOPMENT"} database: ${selectedUrl?.substring(0, 50)}... (domain: ${requestDomain || "unknown"})`);
    if (!selectedUrl) {
        throw new Error("No database URL available for session store");
    }
    return selectedUrl;
}
function createSessionStore(requestDomain) {
    try {
        const sessionPool = new serverless_2.Pool({
            connectionString: getDatabaseUrl(requestDomain),
            max: 5,
            // Increased pool size for better production performance
            min: 1,
            maxUses: 1e4,
            // Increased reuse limit
            idleTimeoutMillis: 6e4,
            // Increased to 60 seconds for production stability
            allowExitOnIdle: false,
            // Keep connections alive in production
            connectionTimeoutMillis: 3e4
            // 30 second connection timeout
        });
        sessionPool.on("error", (err) => {
            console.error("\u274C Session pool error:", err);
        });
        sessionPool.on("connect", () => {
            console.log("\u2705 Session pool connection established");
        });
        const store = new PostgreSqlStore({
            pool: sessionPool,
            tableName: "session",
            createTableIfMissing: true,
            // Auto-create table in production if missing
            errorLog: process.env.NODE_ENV === "test" ? () => {
            } : console.error,
            // Suppress error logging in tests
            // Add explicit configuration for session retrieval
            pruneSessionInterval: process.env.NODE_ENV === "test" ? false : 5 * 60 * 1e3,
            // Every 5 minutes in production
            schemaName: "public",
            // Explicitly set schema
            // Additional production optimizations
            ttl: 7 * 24 * 60 * 60,
            // 7 days in seconds to match cookie maxAge
            disableTouch: false
            // Enable touch to extend session lifetime
        });
        console.log("\u2705 Session store: PostgreSQL session store created with proper pool");
        if (process.env.NODE_ENV !== "test") {
            const testSessionId = `test-${Date.now()}`;
            store.set(testSessionId, { test: true }, (err) => {
                if (err) {
                    console.error("\u274C Session store write test failed:", err);
                }
                else {
                    store.get(testSessionId, (getErr, session2) => {
                        if (getErr) {
                            console.error("\u274C Session store read test failed:", getErr);
                        }
                        else {
                            console.log("\u2705 Session store read/write test passed");
                            store.destroy(testSessionId, () => {
                            });
                        }
                    });
                }
            });
        }
        return store;
    }
    catch (error) {
        console.error("\u274C Session store creation failed:", error);
        console.log("\u26A0\uFE0F Falling back to memory store (sessions will not persist)");
        return void 0;
    }
}
var sessionStore;
try {
    sessionStore = createSessionStore();
}
catch (error) {
    console.error("\u274C Failed to create initial session store:", error);
    sessionStore = void 0;
}
var sessionConfig = (0, express_session_1.default)({
    store: sessionStore,
    // Use PostgreSQL session store for persistence
    secret: process.env.SESSION_SECRET || "fallback-secret-change-in-production",
    resave: false,
    // Don't save unchanged sessions
    saveUninitialized: false,
    rolling: true,
    // Reset expiry on each request
    cookie: {
        secure: config.server.isProduction,
        // Use HTTPS in production
        httpOnly: true,
        maxAge: 7 * 24 * 60 * 60 * 1e3,
        // 7 days - longer session duration
        sameSite: config.server.isProduction ? "strict" : "lax",
        // Stricter in production
        path: "/",
        // Explicitly set path
        domain: config.server.isProduction && config.server.domain.includes("koveo-gestion.com") ? ".koveo-gestion.com" : void 0
    },
    name: "koveo.sid",
    proxy: config.server.isProduction
    // Enable proxy trust in production
});
async function hashPassword(password) {
    const saltRounds = 12;
    return await bcrypt.hash(password, saltRounds);
}
async function verifyPassword(password, hashedPassword) {
    return await bcrypt.compare(password, hashedPassword);
}
async function requireAuth(req, res, next) {
    if (!req.session?.userId) {
        return res.status(401).json({
            message: "Authentication required",
            code: "AUTH_REQUIRED"
        });
    }
    try {
        if (req.session && req.session.touch && req.session.cookie) {
            const now = Date.now();
            const sessionAge = now - (req.session.cookie.originalMaxAge || 0) + (req.session.cookie.maxAge || 0);
            const sessionLifetime = req.session.cookie.originalMaxAge || 7 * 24 * 60 * 60 * 1e3;
            if (sessionAge > sessionLifetime * 0.1) {
                req.session.touch();
            }
        }
        queryCache.invalidate("users", `user:${req.session.userId}`);
        queryCache.invalidate("users", `user_email:*`);
        const user = await storage.getUser(req.session.userId);
        if (!user || !user.isActive) {
            req.session.destroy((err) => {
                if (err) {
                }
            });
            return res.status(401).json({
                message: "User account not found or inactive",
                code: "USER_INACTIVE"
            });
        }
        req.session.role = user.role;
        let userOrganizations4 = [];
        try {
            userOrganizations4 = await db.select({
                organizationId: userOrganizations.organizationId,
                canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations
            }).from(userOrganizations).where((0, drizzle_orm_14.and)((0, drizzle_orm_14.eq)(userOrganizations.userId, user.id), (0, drizzle_orm_14.eq)(userOrganizations.isActive, true)));
        }
        catch (orgError) {
            userOrganizations4 = [];
        }
        req.user = {
            ...user,
            organizations: userOrganizations4.map((uo) => uo.organizationId),
            canAccessAllOrganizations: userOrganizations4.some((uo) => uo.canAccessAllOrganizations)
        };
        if (user.role?.startsWith("demo_") && (!req.user.organizations || req.user.organizations.length === 0)) {
            try {
                const demoOrgs = await db.select({ id: organizations.id }).from(organizations).where((0, drizzle_orm_14.eq)(organizations.type, "demo")).limit(1);
                if (demoOrgs.length > 0) {
                    req.user.organizations = [demoOrgs[0].id];
                    req.user.canAccessAllOrganizations = false;
                }
            }
            catch (demoOrgError) {
            }
        }
        next();
    }
    catch (error) {
        console.error("\u274C Authentication error:", error);
        return res.status(500).json({
            message: "Authentication error",
            code: "AUTH_ERROR"
        });
    }
}
function requireRole(allowedRoles) {
    return async (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({
                message: "Authentication required",
                code: "AUTH_REQUIRED"
            });
        }
        if (!allowedRoles.includes(req.user.role)) {
            return res.status(403).json({
                message: "Insufficient permissions",
                code: "INSUFFICIENT_PERMISSIONS",
                required: allowedRoles,
                current: req.user.role
            });
        }
        next();
    };
}
function authorize(permission) {
    return async (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({
                message: "Authentication required",
                code: "AUTH_REQUIRED"
            });
        }
        try {
            const hasPermission = await checkUserPermission(req.user.role, permission);
            if (!hasPermission) {
                return res.status(403).json({
                    message: "Insufficient permissions",
                    code: "PERMISSION_DENIED",
                    required: permission,
                    userRole: req.user.role,
                    details: `User with role '${req.user.role}' does not have permission '${permission}'`
                });
            }
            next();
        }
        catch (error) {
            console.error("\u274C Authorization error:", error);
            return res.status(500).json({
                message: "Authorization check failed",
                code: "AUTHORIZATION_ERROR"
            });
        }
    };
}
function setupAuthRoutes(app2) {
    app2.post("/api/auth/login", async (req, res) => {
        try {
            const { email, password } = req.body;
            if (!email || !password) {
                return res.status(400).json({
                    message: "Email and password are required",
                    code: "MISSING_CREDENTIALS"
                });
            }
            const user = await storage.getUserByEmail(email.toLowerCase());
            if (!user) {
                return res.status(401).json({
                    message: "Invalid credentials",
                    code: "INVALID_CREDENTIALS"
                });
            }
            if (!user.isActive) {
                return res.status(401).json({
                    message: "Account is inactive",
                    code: "ACCOUNT_INACTIVE"
                });
            }
            const isValidPassword = await verifyPassword(password, user.password);
            if (!isValidPassword) {
                return res.status(401).json({
                    message: "Invalid credentials",
                    code: "INVALID_CREDENTIALS"
                });
            }
            await storage.updateUser(user.id, { lastLoginAt: /* @__PURE__ */ new Date() });
            req.session.userId = user.id;
            req.session.userRole = user.role;
            req.session.role = user.role;
            req.session.user = user;
            req.session.save((err) => {
                if (err) {
                    console.error("\u274C Session save error:", err);
                    return res.status(500).json({
                        message: "Session save failed",
                        code: "SESSION_SAVE_ERROR"
                    });
                }
                const { password: _, ...userData } = user;
                res.json({
                    user: userData,
                    message: "Login successful"
                });
            });
        }
        catch (_error) {
            console.error("Login error:", {
                error: _error,
                email: req.body?.email,
                hasPassword: !!req.body?.password,
                databaseUrl: !!process.env.DATABASE_URL,
                sessionSecret: !!process.env.SESSION_SECRET
            });
            res.status(500).json({
                message: "Login failed",
                code: "LOGIN_ERROR",
                ...process.env.NODE_ENV === "development" && { details: _error }
            });
        }
    });
    app2.post("/api/auth/logout", (req, res) => {
        req.session.destroy((err) => {
            if (err) {
                console.error("Logout error:", err);
                return res.status(500).json({
                    message: "Logout failed",
                    code: "LOGOUT_ERROR"
                });
            }
            const cookieOptions = {
                httpOnly: true,
                secure: config.server.isProduction,
                sameSite: config.server.isProduction ? "strict" : "lax",
                path: "/"
            };
            if (config.server.isProduction && config.server.domain.includes("koveo-gestion.com")) {
                cookieOptions.domain = ".koveo-gestion.com";
            }
            res.clearCookie("koveo.sid", cookieOptions);
            res.clearCookie("koveo.sid", {
                httpOnly: true,
                secure: config.server.isProduction,
                sameSite: config.server.isProduction ? "strict" : "lax",
                path: "/"
            });
            res.json({ message: "Logout successful" });
        });
    });
    app2.get("/api/auth/user", async (req, res) => {
        try {
            console.log("\u{1F50D} Auth check - Session exists:", !!req.session);
            console.log("\u{1F50D} Auth check - Session ID:", req.session?.id?.substring(0, 8) + "...");
            console.log("\u{1F50D} Auth check - User ID in session:", req.session?.userId);
            if (!req.session?.userId) {
                console.log("\u274C No valid session found");
                return res.status(401).json({
                    message: "Not authenticated",
                    code: "NOT_AUTHENTICATED"
                });
            }
            try {
                const user = await storage.getUser(req.session.userId);
                if (!user || !user.isActive) {
                    req.session.destroy((err) => {
                        if (err) {
                            console.error("Session destruction error:", err);
                        }
                    });
                    return res.status(401).json({
                        message: "User account not found or inactive",
                        code: "USER_INACTIVE"
                    });
                }
                if (req.session && req.session.touch && req.session.cookie) {
                    const now = Date.now();
                    const sessionAge = now - (req.session.cookie.originalMaxAge || 0) + (req.session.cookie.maxAge || 0);
                    const sessionLifetime = req.session.cookie.originalMaxAge || 7 * 24 * 60 * 60 * 1e3;
                    if (sessionAge > sessionLifetime * 0.1) {
                        req.session.touch();
                    }
                }
                const { password: _, ...userData } = user;
                res.json(userData);
            }
            catch (userError) {
                console.error("Database error getting user:", userError);
                return res.status(500).json({
                    message: "Authentication check failed",
                    code: "AUTH_CHECK_ERROR"
                });
            }
        }
        catch (error) {
            console.error("\u274C Auth check error:", error);
            res.status(500).json({
                message: "Authentication check failed",
                code: "AUTH_CHECK_ERROR"
            });
        }
    });
    app2.get("/api/auth/debug", async (req, res) => {
        const debugInfo = {
            hasSession: !!req.session,
            sessionId: req.sessionID,
            userId: req.session?.userId,
            userRole: req.session?.userRole,
            nodeEnv: process.env.NODE_ENV,
            hasDatabaseUrl: !!process.env.DATABASE_URL,
            hasSessionSecret: !!process.env.SESSION_SECRET,
            cookies: req.headers.cookie ? "present" : "missing",
            cookieHeader: req.headers.cookie,
            sessionStore: req.session?.store?.constructor?.name || "unknown",
            userAgent: req.headers["user-agent"],
            host: req.headers.host,
            protocol: req.protocol,
            secure: req.secure,
            trustProxy: !!req.app.get("trust proxy")
        };
        console.log("Auth debug info:", debugInfo);
        res.json(debugInfo);
    });
    app2.post("/api/auth/test-cookie", (req, res) => {
        req.session.testValue = "test-" + Date.now();
        req.session.save((err) => {
            if (err) {
                return res.status(500).json({ error: "Failed to save session", details: err.message });
            }
            res.json({
                message: "Test cookie set",
                sessionId: req.sessionID,
                testValue: req.session.testValue,
                cookieSettings: {
                    secure: process.env.NODE_ENV === "production",
                    httpOnly: true,
                    sameSite: "lax"
                }
            });
        });
    });
    app2.post("/api/auth/register", requireAuth, requireRole(["admin"]), async (req, res) => {
        try {
            const { email, password, firstName, lastName, role = "tenant", language = "fr" } = req.body;
            if (!email || !password || !firstName || !lastName) {
                return res.status(400).json({
                    message: "All fields are required",
                    code: "MISSING_FIELDS"
                });
            }
            const existingUser = await storage.getUserByEmail(email.toLowerCase());
            if (existingUser) {
                return res.status(409).json({
                    message: "User already exists",
                    code: "USER_EXISTS"
                });
            }
            const hashedPassword = await hashPassword(password);
            const newUser = await storage.createUser({
                email: email.toLowerCase(),
                password: hashedPassword,
                firstName,
                lastName,
                username: email.toLowerCase(),
                // Use email as username
                role,
                language
            });
            const { password: _, ...userData } = newUser;
            res.status(201).json({
                user: userData,
                message: "User created successfully"
            });
        }
        catch (error) {
            console.error("\u274C Registration error:", error);
            res.status(500).json({
                message: "Registration failed",
                code: "REGISTRATION_ERROR"
            });
        }
    });
    app2.post("/api/auth/forgot-password", async (req, res) => {
        try {
            const { email } = req.body;
            if (!email) {
                return res.status(400).json({
                    message: "Email is required",
                    code: "MISSING_EMAIL"
                });
            }
            const user = await storage.getUserByEmail(email.toLowerCase());
            if (!user || !user.isActive) {
                return res.json({
                    message: "If this email exists, a password reset link has been sent.",
                    success: true
                });
            }
            const resetToken = (0, crypto_4.randomBytes)(32).toString("hex");
            const tokenHash = (0, crypto_4.createHash)("sha256").update(resetToken).digest("hex");
            const expiresAt = /* @__PURE__ */ new Date();
            expiresAt.setHours(expiresAt.getHours() + 1);
            await storage.createPasswordResetToken({
                userId: user.id,
                token: resetToken,
                tokenHash,
                expiresAt,
                ipAddress: req.ip || req.connection?.remoteAddress || "unknown",
                userAgent: req.headers["user-agent"] || "unknown"
            });
            const host2 = req.get("host") || "";
            let frontendUrl;
            if (host2.includes("replit.dev") || host2.includes("replit.com") || host2.includes("replit.co") || process.env.NODE_ENV === "development") {
                frontendUrl = `${req.protocol}://${host2}`;
            }
            else {
                if (host2.includes("koveo-gestion.com")) {
                    frontendUrl = `https://${host2}`;
                }
                else {
                    frontendUrl = process.env.FRONTEND_URL || "https://koveo-gestion.com";
                }
            }
            const cleanUrl = frontendUrl.endsWith("/") ? frontendUrl.slice(0, -1) : frontendUrl;
            const resetUrl = `${cleanUrl}/reset-password?token=${resetToken}`;
            const emailSent = await emailService2.sendPasswordResetEmail(email.toLowerCase(), `${user.firstName} ${user.lastName}`, resetUrl);
            if (!emailSent) {
                console.error("Failed to send password reset email to:", email);
                return res.status(500).json({
                    message: "Failed to send password reset email",
                    code: "EMAIL_SEND_FAILED"
                });
            }
            res.json({
                message: "If this email exists, a password reset link has been sent.",
                success: true
            });
        }
        catch (error) {
            console.error("\u274C Password reset request error:", error);
            res.status(500).json({
                message: "Password reset request failed",
                code: "PASSWORD_RESET_REQUEST_ERROR"
            });
        }
    });
    app2.post("/api/auth/reset-password", async (req, res) => {
        try {
            const { token, password } = req.body;
            if (!token || !password) {
                return res.status(400).json({
                    message: "Token and password are required",
                    code: "MISSING_FIELDS"
                });
            }
            if (password.length < 8) {
                return res.status(400).json({
                    message: "Password must be at least 8 characters long",
                    code: "PASSWORD_TOO_SHORT"
                });
            }
            const hasUpperCase = /[A-Z]/.test(password);
            const hasLowerCase = /[a-z]/.test(password);
            const hasNumbers = /\d/.test(password);
            if (!hasUpperCase || !hasLowerCase || !hasNumbers) {
                return res.status(400).json({
                    message: "Password must contain at least one uppercase letter, one lowercase letter, and one number",
                    code: "PASSWORD_TOO_WEAK"
                });
            }
            const resetToken = await storage.getPasswordResetToken(token);
            if (!resetToken) {
                return res.status(400).json({
                    message: "Invalid or expired password reset token",
                    code: "INVALID_TOKEN"
                });
            }
            if ( /* @__PURE__ */new Date() > resetToken.expiresAt) {
                return res.status(400).json({
                    message: "Password reset token has expired",
                    code: "TOKEN_EXPIRED"
                });
            }
            if (resetToken.isUsed) {
                return res.status(400).json({
                    message: "Password reset token has already been used",
                    code: "TOKEN_ALREADY_USED"
                });
            }
            const tokenHash = (0, crypto_4.createHash)("sha256").update(token).digest("hex");
            if (tokenHash !== resetToken.tokenHash) {
                return res.status(400).json({
                    message: "Invalid password reset token",
                    code: "INVALID_TOKEN_HASH"
                });
            }
            const user = await storage.getUser(resetToken.userId);
            if (!user || !user.isActive) {
                return res.status(400).json({
                    message: "User account not found or inactive",
                    code: "USER_NOT_FOUND"
                });
            }
            const hashedPassword = await hashPassword(password);
            await storage.updateUser(user.id, {
                password: hashedPassword,
                updatedAt: /* @__PURE__ */ new Date()
            });
            await storage.markPasswordResetTokenAsUsed(resetToken.id);
            await storage.cleanupExpiredPasswordResetTokens();
            res.json({
                message: "Password has been reset successfully",
                success: true
            });
        }
        catch (error) {
            console.error("\u274C Password reset error:", error);
            res.status(500).json({
                message: "Password reset failed",
                code: "PASSWORD_RESET_ERROR"
            });
        }
    });
}
// server/routes.ts
const path_3 = __importDefault(require("path"));
const fs_2 = __importDefault(require("fs"));
const multer_1 = __importDefault(require("multer"));
// server/auth/invitation-rbac.ts
init_schema();
const drizzle_orm_15 = require("drizzle-orm");
const serverless_3 = require("@neondatabase/serverless");
init_db();
const ws_1 = __importDefault(require("ws"));
if (typeof serverless_3.neonConfig !== "undefined" && serverless_3.neonConfig) {
    serverless_3.neonConfig.webSocketConstructor = ws_1.default;
}
if (!process.env.DATABASE_URL) {
    throw new Error("DATABASE_URL must be set. Did you forget to provision a database?");
}
var InvitationSecurityMonitor = (_a = class {
        /**
         * Register callback for security alerts.
         * @param callback
         */
        static onAlert(callback) {
            this.alertCallbacks.push(callback);
        }
        /**
         * Trigger a security alert.
         * @param alert
         */
        static async triggerAlert(alert) {
            console.log("\u{1F6A8} Security Alert:", {
                description: alert.description,
                userId: alert.userId,
                ipAddress: alert.ipAddress,
                metadata: alert.metadata
            });
            this.alertCallbacks.forEach((callback) => {
                try {
                    callback(alert);
                }
                catch (error) {
                    console.error("\u274C Error in security alert callback:", error);
                }
            });
            try {
                await db.insert(invitationAuditLog).values({
                    invitationId: alert.metadata?.invitationId || null,
                    action: "security_alert",
                    performedBy: alert.userId || null,
                    ipAddress: alert.ipAddress,
                    userAgent: alert.metadata?.userAgent,
                    details: {
                        alertLevel: alert.level,
                        alertType: alert.type,
                        description: alert.description,
                        metadata: alert.metadata
                    },
                    previousStatus: null,
                    newStatus: null
                });
            }
            catch (error) {
                console.error("\u274C Error logging security alert to database:", error);
            }
        }
        /**
         * Monitor invitation access patterns for suspicious activity.
         * @param userId
         * @param action
         * @param ipAddress
         * @param userAgent
         * @param metadata
         */
        static async monitorInvitationAccess(userId, action, ipAddress, userAgent, metadata) {
            const key = `${userId}:${action}`;
            const now = Date.now();
            const windowStart = now - 5 * 60 * 1e3;
            const recentActions = await db.select({ count: (0, drizzle_orm_15.sql) `count(*)` }).from(invitationAuditLog).where((0, drizzle_orm_15.and)((0, drizzle_orm_15.eq)(invitationAuditLog.performedBy, userId), (0, drizzle_orm_15.eq)(invitationAuditLog.action, action), (0, drizzle_orm_15.gte)(invitationAuditLog.createdAt, new Date(windowStart))));
            const actionCount = recentActions[0]?.count || 0;
            if (actionCount > 10) {
                await this.triggerAlert({
                    level: "high" /* HIGH */,
                    type: "excessive_invitation_actions",
                    description: `User ${userId} performed ${actionCount} ${action} actions in 5 minutes`,
                    userId,
                    ipAddress,
                    metadata: { action, count: actionCount, userAgent, ...metadata }
                });
            }
            if (action === "validation_failed" && actionCount > 5) {
                await this.triggerAlert({
                    level: "medium" /* MEDIUM */,
                    type: "multiple_validation_failures",
                    description: `User ${userId} had ${actionCount} failed token validations`,
                    userId,
                    ipAddress,
                    metadata: { action, count: actionCount, userAgent, ...metadata }
                });
            }
            if (ipAddress) {
                const ipActions = await db.select({ count: (0, drizzle_orm_15.sql) `count(*)` }).from(invitationAuditLog).where((0, drizzle_orm_15.and)((0, drizzle_orm_15.eq)(invitationAuditLog.ipAddress, ipAddress), (0, drizzle_orm_15.eq)(invitationAuditLog.action, action), (0, drizzle_orm_15.gte)(invitationAuditLog.createdAt, new Date(windowStart))));
                const ipActionCount = ipActions[0]?.count || 0;
                if (ipActionCount > 20) {
                    await this.triggerAlert({
                        level: "critical" /* CRITICAL */,
                        type: "ip_based_attack",
                        description: `IP ${ipAddress} performed ${ipActionCount} ${action} actions in 5 minutes`,
                        ipAddress,
                        metadata: { action, count: ipActionCount, userAgent, ...metadata }
                    });
                }
            }
        }
    },
    __setFunctionName(_a, "InvitationSecurityMonitor"),
    (() => {
        _a.alertCallbacks = [];
    })(),
    _a);
InvitationSecurityMonitor.onAlert((alert) => {
});
// server/api/organizations.ts
init_db();
init_schema();
const drizzle_orm_16 = require("drizzle-orm");
function registerOrganizationRoutes(app2) {
    app2.get("/api/organizations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            console.log(`\u{1F4CA} Fetching organizations for user ${currentUser.id} with role ${currentUser.role}`);
            let organizationsQuery;
            if (currentUser.role === "admin") {
                organizationsQuery = db.select({
                    id: organizations.id,
                    name: organizations.name,
                    type: organizations.type,
                    address: organizations.address,
                    city: organizations.city,
                    province: organizations.province,
                    postalCode: organizations.postalCode,
                    phone: organizations.phone,
                    email: organizations.email,
                    website: organizations.website,
                    registrationNumber: organizations.registrationNumber,
                    isActive: organizations.isActive,
                    createdAt: organizations.createdAt
                }).from(organizations).where((0, drizzle_orm_16.eq)(organizations.isActive, true)).orderBy(organizations.name);
            }
            else {
                organizationsQuery = db.select({
                    id: organizations.id,
                    name: organizations.name,
                    type: organizations.type,
                    address: organizations.address,
                    city: organizations.city,
                    province: organizations.province,
                    postalCode: organizations.postalCode,
                    phone: organizations.phone,
                    email: organizations.email,
                    website: organizations.website,
                    registrationNumber: organizations.registrationNumber,
                    isActive: organizations.isActive,
                    createdAt: organizations.createdAt
                }).from(organizations).innerJoin(userOrganizations, (0, drizzle_orm_16.eq)(organizations.id, userOrganizations.organizationId)).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(organizations.isActive, true), (0, drizzle_orm_16.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_16.eq)(userOrganizations.isActive, true))).orderBy(organizations.name);
            }
            const accessibleOrganizations = await organizationsQuery;
            console.log(`\u2705 Found ${accessibleOrganizations.length} organizations for user ${currentUser.id}`);
            res.json(accessibleOrganizations);
        }
        catch (error) {
            console.error("\u274C Error fetching organizations:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to fetch organizations"
            });
        }
    });
    app2.get("/api/admin/organizations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required",
                    code: "ADMIN_REQUIRED"
                });
            }
            const allOrganizations = await db.select({
                id: organizations.id,
                name: organizations.name,
                type: organizations.type,
                address: organizations.address,
                city: organizations.city,
                province: organizations.province,
                postalCode: organizations.postalCode,
                phone: organizations.phone,
                email: organizations.email,
                website: organizations.website,
                registrationNumber: organizations.registrationNumber,
                isActive: organizations.isActive,
                createdAt: organizations.createdAt
            }).from(organizations).where((0, drizzle_orm_16.eq)(organizations.isActive, true)).orderBy(organizations.name);
            res.json({
                organizations: allOrganizations
            });
        }
        catch (error) {
            console.error("\u274C Error fetching organizations:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to fetch organizations"
            });
        }
    });
    app2.post("/api/organizations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required to create organizations",
                    code: "ADMIN_REQUIRED"
                });
            }
            const organizationData = req.body;
            const [newOrganization] = await db.insert(organizations).values({
                name: organizationData.name,
                type: organizationData.type,
                address: organizationData.address,
                city: organizationData.city,
                province: organizationData.province || "QC",
                postalCode: organizationData.postalCode,
                phone: organizationData.phone || null,
                email: organizationData.email || null,
                website: organizationData.website || null,
                registrationNumber: organizationData.registrationNumber || null
            }).returning({
                id: organizations.id,
                name: organizations.name,
                type: organizations.type,
                address: organizations.address,
                city: organizations.city,
                province: organizations.province,
                postalCode: organizations.postalCode,
                phone: organizations.phone,
                email: organizations.email,
                website: organizations.website,
                registrationNumber: organizations.registrationNumber,
                isActive: organizations.isActive,
                createdAt: organizations.createdAt
            });
            console.log("Organization created - storage hierarchy will be created on first document upload");
            res.status(201).json(newOrganization);
        }
        catch (error) {
            console.error("\u274C Error creating organization:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to create organization"
            });
        }
    });
    app2.get("/api/organizations/:id", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const organizationId = req.params.id;
            const [organization] = await db.select().from(organizations).where((0, drizzle_orm_16.eq)(organizations.id, organizationId));
            if (!organization) {
                return res.status(404).json({
                    message: "Organization not found",
                    code: "NOT_FOUND"
                });
            }
            res.json(organization);
        }
        catch (error) {
            console.error("\u274C Error fetching organization:", error);
            res.status(500).json({
                message: "Failed to fetch organization",
                code: "SERVER_ERROR"
            });
        }
    });
    app2.put("/api/organizations/:id", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required to update organizations",
                    code: "ADMIN_REQUIRED"
                });
            }
            const organizationId = req.params.id;
            const updateData = req.body;
            const existingOrg = await db.select().from(organizations).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(organizations.id, organizationId), (0, drizzle_orm_16.eq)(organizations.isActive, true))).limit(1);
            if (existingOrg.length === 0) {
                return res.status(404).json({
                    message: "Organization not found",
                    code: "NOT_FOUND"
                });
            }
            const [updatedOrganization] = await db.update(organizations).set({
                name: updateData.name,
                type: updateData.type,
                address: updateData.address,
                city: updateData.city,
                province: updateData.province || "QC",
                postalCode: updateData.postalCode,
                phone: updateData.phone || null,
                email: updateData.email || null,
                website: updateData.website || null,
                registrationNumber: updateData.registrationNumber || null,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_16.eq)(organizations.id, organizationId)).returning({
                id: organizations.id,
                name: organizations.name,
                type: organizations.type,
                address: organizations.address,
                city: organizations.city,
                province: organizations.province,
                postalCode: organizations.postalCode,
                phone: organizations.phone,
                email: organizations.email,
                website: organizations.website,
                registrationNumber: organizations.registrationNumber,
                isActive: organizations.isActive,
                createdAt: organizations.createdAt,
                updatedAt: organizations.updatedAt
            });
            res.json(updatedOrganization);
        }
        catch (error) {
            console.error("\u274C Error updating organization:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update organization"
            });
        }
    });
    app2.get("/api/organizations/:id/deletion-impact", requireAuth, async (req, res) => {
        const organizationId = req.params.id;
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required",
                    code: "ADMIN_REQUIRED"
                });
            }
            const organization = await db.select({ id: organizations.id, name: organizations.name }).from(organizations).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(organizations.id, organizationId), (0, drizzle_orm_16.eq)(organizations.isActive, true))).limit(1);
            if (organization.length === 0) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "Organization not found"
                });
            }
            const buildingsCount = await db.select({ count: (0, drizzle_orm_16.count)() }).from(buildings).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(buildings.organizationId, organizationId), (0, drizzle_orm_16.eq)(buildings.isActive, true)));
            const residencesCount = await db.select({ count: (0, drizzle_orm_16.count)() }).from(residences).innerJoin(buildings, (0, drizzle_orm_16.eq)(residences.buildingId, buildings.id)).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(buildings.organizationId, organizationId), (0, drizzle_orm_16.eq)(buildings.isActive, true), (0, drizzle_orm_16.eq)(residences.isActive, true)));
            let totalInvitations = 0;
            try {
                const invitationsCount = await db.select({ count: (0, drizzle_orm_16.count)() }).from(invitations).where((0, drizzle_orm_16.eq)(invitations.organizationId, organizationId));
                totalInvitations = invitationsCount[0]?.count || 0;
            }
            catch (___invError) {
                totalInvitations = 0;
            }
            const potentialOrphansCount = await db.select({ count: (0, drizzle_orm_16.count)() }).from(userOrganizations).innerJoin(users, (0, drizzle_orm_16.eq)(userOrganizations.userId, users.id)).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(userOrganizations.organizationId, organizationId), (0, drizzle_orm_16.eq)(userOrganizations.isActive, true), (0, drizzle_orm_16.eq)(users.isActive, true)));
            const impact = {
                organization: organization[0],
                buildings: buildingsCount[0]?.count || 0,
                residences: residencesCount[0]?.count || 0,
                invitations: totalInvitations,
                potentialOrphanedUsers: potentialOrphansCount[0]?.count || 0
            };
            res.json(impact);
        }
        catch (error) {
            console.error("\u274C Error analyzing deletion impact:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to analyze deletion impact"
            });
        }
    });
    app2.delete("/api/organizations/:id", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required",
                    code: "ADMIN_REQUIRED"
                });
            }
            const organizationId = req.params.id;
            const organization = await db.select({ id: organizations.id, name: organizations.name }).from(organizations).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(organizations.id, organizationId), (0, drizzle_orm_16.eq)(organizations.isActive, true))).limit(1);
            if (organization.length === 0) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "Organization not found"
                });
            }
            console.log(`\u{1F5D1}\uFE0F Deleting organization ${organizationId} with cascade delete...`);
            const orgBuildings = await db.select({ id: buildings.id }).from(buildings).where((0, drizzle_orm_16.eq)(buildings.organizationId, organizationId));
            if (orgBuildings.length > 0) {
                const orgBuildingIds = orgBuildings.map((b) => b.id);
                const affectedResidences = await db.update(residences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_16.inArray)(residences.buildingId, orgBuildingIds)).returning({ id: residences.id, unitNumber: residences.unitNumber });
                console.log(`\u{1F5D1}\uFE0F Soft deleted ${affectedResidences.length} residences in buildings: ${orgBuildingIds.join(", ")}`);
                const affectedBuildings = await db.update(buildings).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_16.inArray)(buildings.id, orgBuildingIds)).returning({ id: buildings.id, name: buildings.name });
                console.log(`\u{1F5D1}\uFE0F Soft deleted ${affectedBuildings.length} buildings: ${affectedBuildings.map((b) => b.name).join(", ")}`);
            }
            await db.delete(userOrganizations).where((0, drizzle_orm_16.eq)(userOrganizations.organizationId, organizationId));
            console.log("\u26A0\uFE0F  User deletion disabled for data safety - users will be preserved");
            const affectedUsers = await db.select({
                id: users.id,
                email: users.email,
                firstName: users.firstName,
                lastName: users.lastName
            }).from(users).leftJoin(userOrganizations, (0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(users.id, userOrganizations.userId), (0, drizzle_orm_16.eq)(userOrganizations.isActive, true))).where((0, drizzle_orm_16.and)((0, drizzle_orm_16.eq)(users.isActive, true), (0, drizzle_orm_16.isNull)(userOrganizations.userId)));
            if (affectedUsers.length > 0) {
                console.log(`\u26A0\uFE0F  ${affectedUsers.length} users are now without organization assignments but have been preserved:`, affectedUsers.map((u) => u.email));
            }
            await db.update(organizations).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_16.eq)(organizations.id, organizationId));
            try {
                console.log("Organization deleted - storage cleanup will be handled automatically");
            }
            catch (storageError) {
                console.error("\u26A0\uFE0F Object storage cleanup failed, but organization deletion succeeded:", storageError);
            }
            res.json({
                message: "Organization and related entities deleted successfully",
                deletedOrganization: organization[0].name
            });
        }
        catch (error) {
            console.error("\u274C Error deleting organization:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to delete organization and related entities"
            });
        }
    });
}
// server/api/users.ts
init_storage();
init_schema();
const zod_11 = require("zod");
init_db();
init_schema();
const crypto_5 = require("crypto");
const bcrypt2 = __importStar(require("bcryptjs"));
const drizzle_orm_17 = require("drizzle-orm");
// server/utils/input-sanitization.ts
function sanitizeString(input) {
    if (!input)
        return "";
    return input.trim().replace(/[<>]/g, "").replace(/['";]/g, "").substring(0, 500);
}
function normalizeEmail(email) {
    if (!email)
        return "";
    return email.toLowerCase().trim();
}
function sanitizeName(name) {
    if (!name)
        return "";
    return name.trim().replace(/[^a-zA-ZÀ-ÿ\s'-]/g, "").replace(/\s+/g, " ").substring(0, 100);
}
function generateUsernameFromEmail(email) {
    if (!email)
        return "";
    return email.split("@")[0].toLowerCase().replace(/[^a-z0-9]/g, "").substring(0, 30);
}
function validatePasswordStrength(password) {
    if (!password) {
        return { isValid: false, message: "Password is required" };
    }
    if (password.length < 8) {
        return { isValid: false, message: "Password must be at least 8 characters long" };
    }
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecialChar = /[@$!%*?&]/.test(password);
    if (!hasUppercase || !hasLowercase || !hasNumber || !hasSpecialChar) {
        return {
            isValid: false,
            message: "Password must contain uppercase, lowercase, number, and special character (@$!%*?&)"
        };
    }
    return { isValid: true };
}
// server/utils/user-creation-logger.ts
function logUserCreation(event) {
    const logData = {
        event: "user_creation",
        userId: event.userId,
        email: event.email.toLowerCase(),
        role: event.role,
        method: event.method,
        success: event.success,
        error: event.error,
        timestamp: event.timestamp.toISOString(),
        ipAddress: event.ipAddress,
        userAgent: event.userAgent
    };
    if (event.success) {
        console.log("\u2705 User creation successful:", JSON.stringify(logData));
    }
    else {
        console.error("\u274C User creation failed:", JSON.stringify(logData));
    }
}
// server/api/users.ts
init_query_cache();
function registerUserRoutes(app2) {
    app2.get("/api/users", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const usersWithAssignments = await storage.getUsersWithAssignments();
            let filteredUsers;
            if (currentUser.role === "admin") {
                filteredUsers = usersWithAssignments;
            }
            else if (["demo_manager", "demo_tenant", "demo_resident"].includes(currentUser.role)) {
                filteredUsers = usersWithAssignments.filter((user) => ["demo_manager", "demo_tenant", "demo_resident"].includes(user.role));
            }
            else {
                const userOrgIds = (await storage.getUserOrganizations(currentUser.id)).map((org) => org.organizationId);
                filteredUsers = usersWithAssignments.filter((user) => {
                    if (["demo_manager", "demo_tenant", "demo_resident"].includes(user.role)) {
                        return false;
                    }
                    const hasAccess = user.organizations?.some((org) => userOrgIds.includes(org.id)) || false;
                    return hasAccess;
                });
            }
            res.json(filteredUsers);
        }
        catch (error) {
            console.error("\u274C Error fetching users:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch users"
            });
        }
    });
    app2.get("/api/users/:id", async (req, res) => {
        try {
            const { id } = req.params;
            if (!id) {
                return res.status(400).json({
                    _error: "Bad request",
                    message: "User ID is required"
                });
            }
            const user = await storage.getUser(id);
            if (!user) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "User not found"
                });
            }
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error("\u274C Error fetching user:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch user"
            });
        }
    });
    app2.get("/api/users/email/:email", async (req, res) => {
        try {
            const { email } = req.params;
            if (!email) {
                return res.status(400).json({
                    _error: "Bad request",
                    message: "Email is required"
                });
            }
            const user = await storage.getUserByEmail(email);
            if (!user) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "User not found"
                });
            }
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error("\u274C Error fetching user by email:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch user"
            });
        }
    });
    app2.post("/api/users", async (req, res) => {
        try {
            if (req.body.password) {
                const passwordValidation = validatePasswordStrength(req.body.password);
                if (!passwordValidation.isValid) {
                    return res.status(400).json({
                        error: "Validation error",
                        message: passwordValidation.message,
                        code: "WEAK_PASSWORD"
                    });
                }
            }
            const normalizedData = {
                ...req.body,
                email: normalizeEmail(req.body.email || ""),
                firstName: sanitizeName(req.body.firstName || ""),
                lastName: sanitizeName(req.body.lastName || ""),
                phone: req.body.phone ? sanitizeString(req.body.phone) : "",
                language: req.body.language || "fr"
            };
            if (!normalizedData.username && normalizedData.email) {
                const baseUsername = generateUsernameFromEmail(normalizedData.email);
                let username = baseUsername;
                let usernameCounter = 1;
                let existingUsername = await db.select({ username: users.username }).from(users).where((0, drizzle_orm_17.eq)(users.username, username)).limit(1);
                while (existingUsername.length > 0) {
                    username = `${baseUsername}${usernameCounter}`;
                    usernameCounter++;
                    existingUsername = await db.select({ username: users.username }).from(users).where((0, drizzle_orm_17.eq)(users.username, username)).limit(1);
                }
                normalizedData.username = username;
            }
            const validatedData = insertUserSchema.parse(normalizedData);
            const existingUser = await storage.getUserByEmail(validatedData.email);
            if (existingUser) {
                return res.status(409).json({
                    _error: "Conflict",
                    message: "User with this email already exists"
                });
            }
            const user = await storage.createUser(validatedData);
            logUserCreation({
                userId: user.id,
                email: user.email,
                role: user.role,
                method: "direct",
                success: true,
                timestamp: /* @__PURE__ */ new Date(),
                ipAddress: req.ip,
                userAgent: req.get("User-Agent")
            });
            const { password, ...userWithoutPassword } = user;
            res.status(201).json(userWithoutPassword);
        }
        catch (error) {
            logUserCreation({
                email: req.body.email || "unknown",
                role: req.body.role || "unknown",
                method: "direct",
                success: false,
                error: error instanceof Error ? error.message : "Unknown error",
                timestamp: /* @__PURE__ */ new Date(),
                ipAddress: req.ip,
                userAgent: req.get("User-Agent")
            });
            if (error instanceof zod_11.z.ZodError) {
                return res.status(400).json({
                    error: "Validation error",
                    message: "Invalid user data",
                    details: error.issues
                });
            }
            console.error("\u274C Error creating user:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to create user"
            });
        }
    });
    app2.put("/api/users/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "User ID is required"
                });
            }
            const targetUser = await storage.getUser(id);
            if (!targetUser) {
                return res.status(404).json({
                    error: "Not found",
                    message: "User not found"
                });
            }
            const { role: newRole } = req.body;
            if (newRole && newRole !== targetUser.role) {
                if (currentUser.role === "admin") {
                }
                else if (currentUser.role === "manager") {
                    if (newRole === "admin") {
                        return res.status(403).json({
                            error: "Permission denied",
                            message: "Managers cannot assign admin role",
                            code: "ROLE_ESCALATION_DENIED"
                        });
                    }
                    if (!["manager", "tenant", "resident"].includes(newRole)) {
                        return res.status(403).json({
                            error: "Permission denied",
                            message: "Managers can only assign manager, tenant, or resident roles",
                            code: "INVALID_ROLE_ASSIGNMENT"
                        });
                    }
                }
                else if (currentUser.role === "demo_manager") {
                    if (!["demo_manager", "demo_tenant", "demo_resident"].includes(newRole)) {
                        return res.status(403).json({
                            error: "Permission denied",
                            message: "Demo managers can only assign demo roles",
                            code: "INVALID_DEMO_ROLE_ASSIGNMENT"
                        });
                    }
                }
                else {
                    return res.status(403).json({
                        error: "Permission denied",
                        message: "Insufficient permissions to assign roles",
                        code: "INSUFFICIENT_PERMISSIONS"
                    });
                }
                if (currentUser.role === "manager" || currentUser.role === "demo_manager") {
                    const currentUserOrgs = await storage.getUserOrganizations(currentUser.id);
                    const currentUserOrgIds = currentUserOrgs.map((org) => org.organizationId);
                    const targetUserOrgs = await storage.getUserOrganizations(id);
                    const targetUserOrgIds = targetUserOrgs.map((org) => org.organizationId);
                    const hasAccessToTargetOrgs = targetUserOrgIds.some((orgId) => currentUserOrgIds.includes(orgId));
                    if (!hasAccessToTargetOrgs && targetUserOrgIds.length > 0) {
                        return res.status(403).json({
                            error: "Permission denied",
                            message: "Cannot modify users outside your organization scope",
                            code: "ORGANIZATION_SCOPE_VIOLATION"
                        });
                    }
                    if (currentUser.role === "demo_manager") {
                        const targetOrgs = await db.select().from(organizations).where((0, drizzle_orm_17.inArray)(organizations.id, targetUserOrgIds));
                        const hasNonDemoOrgs = targetOrgs.some((org) => org.type !== "demo");
                        if (hasNonDemoOrgs) {
                            return res.status(403).json({
                                error: "Permission denied",
                                message: "Demo managers cannot assign roles to users in non-demo organizations",
                                code: "DEMO_SCOPE_VIOLATION"
                            });
                        }
                    }
                }
            }
            const updateSchema = insertUserSchema.partial().omit({ password: true });
            const validatedData = updateSchema.parse(req.body);
            const user = await storage.updateUser(id, {
                ...validatedData,
                updatedAt: /* @__PURE__ */ new Date()
            });
            if (!user) {
                return res.status(404).json({
                    error: "Not found",
                    message: "User not found"
                });
            }
            queryCache.invalidate("users", "all_users");
            queryCache.invalidate("users", `user:${id}`);
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            if (error instanceof zod_11.z.ZodError) {
                return res.status(400).json({
                    error: "Validation error",
                    message: "Invalid user data",
                    details: error.issues
                });
            }
            console.error("\u274C Error updating user:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update user"
            });
        }
    });
    app2.delete("/api/users/:id", async (req, res) => {
        try {
            const { id } = req.params;
            if (!id) {
                return res.status(400).json({
                    _error: "Bad request",
                    message: "User ID is required"
                });
            }
            const user = await storage.updateUser(id, {
                isActive: false,
                updatedAt: /* @__PURE__ */ new Date()
            });
            if (!user) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "User not found"
                });
            }
            res.json({
                message: "User deactivated successfully",
                id: user.id
            });
        }
        catch (error) {
            console.error("\u274C Error deactivating user:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to deactivate user"
            });
        }
    });
    app2.get("/api/user-organizations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const organizations3 = await storage.getUserOrganizations(currentUser.id);
            res.json(organizations3);
        }
        catch (error) {
            console.error("\u274C Error getting user organizations:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to get user organizations"
            });
        }
    });
    app2.get("/api/user-residences", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const residences2 = await storage.getUserResidences(currentUser.id);
            res.json(residences2);
        }
        catch (error) {
            console.error("\u274C Error getting user residences:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to get user residences"
            });
        }
    });
    app2.get("/api/admin/all-user-organizations", requireAuth, async (req, res) => {
        console.log("\u{1F50D} [API] all-user-organizations endpoint called by user:", req.user?.email);
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions to view user assignments",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            let userOrganizations4;
            if (currentUser.role === "admin") {
                userOrganizations4 = await db.select({
                    userId: userOrganizations.userId,
                    organizationId: userOrganizations.organizationId,
                    organizationRole: userOrganizations.organizationRole,
                    isActive: userOrganizations.isActive
                }).from(userOrganizations).where((0, drizzle_orm_17.eq)(userOrganizations.isActive, true));
            }
            else {
                const managerOrgs = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_17.eq)(userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                userOrganizations4 = await db.select({
                    userId: userOrganizations.userId,
                    organizationId: userOrganizations.organizationId,
                    organizationRole: userOrganizations.organizationRole,
                    isActive: userOrganizations.isActive
                }).from(userOrganizations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userOrganizations.isActive, true), (0, drizzle_orm_17.inArray)(userOrganizations.organizationId, orgIds)));
            }
            res.json(userOrganizations4);
        }
        catch (error) {
            console.error("\u274C Error getting all user organizations:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to get user organizations"
            });
        }
    });
    app2.get("/api/admin/all-user-residences", requireAuth, async (req, res) => {
        console.log("\u{1F50D} [API] all-user-residences endpoint called by user:", req.user?.email);
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions to view user assignments",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            let userResidences4;
            if (currentUser.role === "admin") {
                userResidences4 = await db.select({
                    userId: userResidences.userId,
                    residenceId: userResidences.residenceId,
                    relationshipType: userResidences.relationshipType,
                    startDate: userResidences.startDate,
                    endDate: userResidences.endDate,
                    isActive: userResidences.isActive
                }).from(userResidences).where((0, drizzle_orm_17.eq)(userResidences.isActive, true));
            }
            else {
                const managerOrgs = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_17.eq)(userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                const accessibleResidences = await db.select({ residenceId: residences.id }).from(residences).innerJoin(buildings, (0, drizzle_orm_17.eq)(residences.buildingId, buildings.id)).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.inArray)(buildings.organizationId, orgIds), (0, drizzle_orm_17.eq)(residences.isActive, true)));
                const residenceIds = accessibleResidences.map((res2) => res2.residenceId);
                if (residenceIds.length === 0) {
                    return res.json([]);
                }
                userResidences4 = await db.select({
                    userId: userResidences.userId,
                    residenceId: userResidences.residenceId,
                    relationshipType: userResidences.relationshipType,
                    startDate: userResidences.startDate,
                    endDate: userResidences.endDate,
                    isActive: userResidences.isActive
                }).from(userResidences).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userResidences.isActive, true), (0, drizzle_orm_17.inArray)(userResidences.residenceId, residenceIds)));
            }
            res.json(userResidences4);
        }
        catch (error) {
            console.error("\u274C Error getting all user residences:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to get user residences"
            });
        }
    });
    app2.get("/api/user/permissions", requireAuth, async (req, res) => {
        try {
            const userRole = req.user?.role;
            if (!userRole) {
                return res.status(400).json({
                    _error: "Bad request",
                    message: "User role not found in session"
                });
            }
            const rolePermissions2 = await storage.getRolePermissions();
            const userPermissions2 = rolePermissions2.filter((rp) => rp.role === userRole).map((rp) => rp.permission?.name).filter(Boolean);
            const responseData = {
                role: userRole,
                permissions: userPermissions2,
                permissionCount: userPermissions2.length
            };
            const permissionsResponseSchema = zod_11.z.object({
                role: zod_11.z.enum(["admin", "manager", "tenant", "resident"]),
                permissions: zod_11.z.array(zod_11.z.string()),
                permissionCount: zod_11.z.number()
            });
            const validatedResponse = permissionsResponseSchema.parse(responseData);
            res.json(validatedResponse);
        }
        catch (error) {
            if (error instanceof zod_11.z.ZodError) {
                return res.status(500).json({
                    error: "Internal server error",
                    message: "Failed to validate permissions response",
                    details: error.issues
                });
            }
            console.error("\u274C Error fetching user permissions:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch user permissions"
            });
        }
    });
    app2.put("/api/users/:id/organizations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { organizationIds } = req.body;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Only administrators can modify organization assignments",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            if (!userId || !Array.isArray(organizationIds)) {
                return res.status(400).json({
                    message: "User ID and organization IDs array are required",
                    code: "INVALID_REQUEST"
                });
            }
            const user = await storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            await db.delete(userOrganizations).where((0, drizzle_orm_17.eq)(userOrganizations.userId, userId));
            if (organizationIds.length > 0) {
                const newAssignments = organizationIds.map((orgId) => ({
                    userId,
                    organizationId: orgId,
                    organizationRole: user.role,
                    isActive: true
                }));
                await db.insert(userOrganizations).values(newAssignments);
            }
            res.json({
                message: "Organization assignments updated successfully",
                userId,
                organizationIds
            });
        }
        catch (error) {
            console.error("\u274C Error updating organization assignments:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update organization assignments"
            });
        }
    });
    app2.put("/api/users/:id/buildings", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { buildingIds } = req.body;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Only administrators and managers can modify building assignments",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            if (!userId || !Array.isArray(buildingIds)) {
                return res.status(400).json({
                    message: "User ID and building IDs array are required",
                    code: "INVALID_REQUEST"
                });
            }
            const user = await storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            const residences2 = await db.select().from(residences).where((0, drizzle_orm_17.inArray)(residences.buildingId, buildingIds));
            await db.delete(userResidences).where((0, drizzle_orm_17.eq)(userResidences.userId, userId));
            if (residences2.length > 0) {
                const buildingToResidence = /* @__PURE__ */ new Map();
                residences2.forEach((residence) => {
                    if (!buildingToResidence.has(residence.buildingId)) {
                        buildingToResidence.set(residence.buildingId, residence);
                    }
                });
                const newAssignments = Array.from(buildingToResidence.values()).map((residence) => ({
                    userId,
                    residenceId: residence.id,
                    relationshipType: user.role === "manager" ? "manager" : "tenant",
                    startDate: ( /* @__PURE__ */new Date()).toISOString().split("T")[0],
                    isActive: true
                }));
                await db.insert(userResidences).values(newAssignments);
            }
            res.json({
                message: "Building assignments updated successfully",
                userId,
                buildingIds
            });
        }
        catch (error) {
            console.error("\u274C Error updating building assignments:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update building assignments"
            });
        }
    });
    app2.get("/api/users/:id/residences", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.id !== userId && !["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const residencesWithDetails = await storage.getUserResidencesWithDetails(userId);
            const residences2 = residencesWithDetails.map((item) => ({
                id: item.residence.id,
                unitNumber: item.residence.unitNumber,
                floor: item.residence.floor,
                squareFootage: item.residence.squareFootage,
                bedrooms: item.residence.bedrooms,
                bathrooms: item.residence.bathrooms,
                balcony: item.residence.balcony,
                parkingSpaceNumbers: item.residence.parkingSpaceNumbers,
                storageSpaceNumbers: item.residence.storageSpaceNumbers,
                isActive: item.residence.isActive,
                buildingId: item.residence.buildingId,
                building: {
                    id: item.building.id,
                    name: item.building.name,
                    address: item.building.address,
                    city: item.building.city,
                    province: item.building.province,
                    postalCode: item.building.postalCode
                }
            }));
            res.json(residences2);
        }
        catch (error) {
            console.error("\u274C Error getting user residences:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to get user residences"
            });
        }
    });
    app2.get("/api/users/:id/buildings", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.id !== userId && !["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const userResidences4 = await db.select({
                residenceId: userResidences.residenceId,
                buildingId: residences.buildingId
            }).from(userResidences).innerJoin(residences, (0, drizzle_orm_17.eq)(userResidences.residenceId, residences.id)).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userResidences.userId, userId), (0, drizzle_orm_17.eq)(userResidences.isActive, true), (0, drizzle_orm_17.eq)(residences.isActive, true)));
            if (!userResidences4 || userResidences4.length === 0) {
                return res.json({ buildings: [] });
            }
            const buildingIds = [...new Set(userResidences4.map((ur) => ur.buildingId).filter(Boolean))];
            if (buildingIds.length === 0) {
                return res.json({ buildings: [] });
            }
            const buildingDetails = await db.select({
                id: buildings.id,
                name: buildings.name,
                address: buildings.address,
                city: buildings.city,
                province: buildings.province,
                postalCode: buildings.postalCode,
                buildingType: buildings.buildingType,
                yearBuilt: buildings.yearBuilt,
                totalFloors: buildings.totalFloors,
                parkingSpaces: buildings.parkingSpaces,
                storageSpaces: buildings.storageSpaces,
                managementCompany: buildings.managementCompany,
                amenities: buildings.amenities,
                organizationId: buildings.organizationId,
                organizationName: organizations.name,
                organizationType: organizations.type
            }).from(buildings).leftJoin(organizations, (0, drizzle_orm_17.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.inArray)(buildings.id, buildingIds), (0, drizzle_orm_17.eq)(buildings.isActive, true)));
            const buildingsWithStats = await Promise.all(buildingDetails.map(async (building) => {
                const [totalUnits, occupiedUnits] = await Promise.all([
                    db.select({ count: (0, drizzle_orm_17.sql) `count(*)` }).from(residences).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(residences.buildingId, building.id), (0, drizzle_orm_17.eq)(residences.isActive, true))).then((result) => result[0]?.count || 0),
                    db.select({ count: (0, drizzle_orm_17.sql) `count(distinct ${residences.id})` }).from(residences).leftJoin(userResidences, (0, drizzle_orm_17.eq)(userResidences.residenceId, residences.id)).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(residences.buildingId, building.id), (0, drizzle_orm_17.eq)(residences.isActive, true), (0, drizzle_orm_17.eq)(userResidences.isActive, true))).then((result) => result[0]?.count || 0)
                ]);
                const vacantUnits = totalUnits - occupiedUnits;
                const occupancyRate = totalUnits > 0 ? occupiedUnits / totalUnits * 100 : 0;
                return {
                    ...building,
                    totalUnits,
                    occupiedUnits,
                    vacantUnits,
                    occupancyRate
                };
            }));
            res.json({ buildings: buildingsWithStats });
        }
        catch (error) {
            console.error("\u274C Error getting user buildings:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to get user buildings"
            });
        }
    });
    app2.put("/api/users/:id/residences", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { residenceAssignments } = req.body;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions to modify residence assignments",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            if (!userId || !Array.isArray(residenceAssignments)) {
                return res.status(400).json({
                    message: "User ID and residence assignments array are required",
                    code: "INVALID_REQUEST"
                });
            }
            const user = await storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            if (currentUser.role === "manager") {
                for (const assignment of residenceAssignments) {
                    const residence = await db.select({ buildingId: residences.buildingId }).from(residences).where((0, drizzle_orm_17.eq)(residences.id, assignment.residenceId)).limit(1);
                    if (residence.length === 0) {
                        return res.status(404).json({
                            message: `Residence ${assignment.residenceId} not found`,
                            code: "RESIDENCE_NOT_FOUND"
                        });
                    }
                    const managerOrgs = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_17.eq)(userOrganizations.isActive, true)));
                    const orgIds = managerOrgs.map((org) => org.organizationId);
                    const accessibleBuildings = orgIds.length > 0 ? await db.select({ id: buildings.id }).from(buildings).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.inArray)(buildings.organizationId, orgIds), (0, drizzle_orm_17.eq)(buildings.isActive, true))) : [];
                    const hasAccess = accessibleBuildings.some((b) => b.id === residence[0].buildingId);
                    if (!hasAccess) {
                        return res.status(403).json({
                            message: `Insufficient permissions for residence ${assignment.residenceId}`,
                            code: "INSUFFICIENT_PERMISSIONS"
                        });
                    }
                }
            }
            await db.delete(userResidences).where((0, drizzle_orm_17.eq)(userResidences.userId, userId));
            if (residenceAssignments.length > 0) {
                const newAssignments = residenceAssignments.map((assignment) => ({
                    userId,
                    residenceId: assignment.residenceId,
                    relationshipType: assignment.relationshipType || "tenant",
                    startDate: assignment.startDate || ( /* @__PURE__ */new Date()).toISOString().split("T")[0],
                    endDate: assignment.endDate || null,
                    isActive: true
                }));
                await db.insert(userResidences).values(newAssignments);
            }
            res.json({
                message: "Residence assignments updated successfully",
                userId,
                assignmentCount: residenceAssignments.length
            });
        }
        catch (error) {
            console.error("\u274C Error updating residence assignments:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update residence assignments"
            });
        }
    });
    app2.get("/api/users/me/organizations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            console.log(`\u{1F4CA} Fetching user-accessible organizations for ${currentUser.email} (${currentUser.role})`);
            let organizationsQuery;
            if (currentUser.role === "admin") {
                organizationsQuery = db.select({
                    id: organizations.id,
                    name: organizations.name,
                    type: organizations.type,
                    address: organizations.address,
                    city: organizations.city,
                    province: organizations.province,
                    postalCode: organizations.postalCode,
                    phone: organizations.phone,
                    email: organizations.email,
                    website: organizations.website,
                    registrationNumber: organizations.registrationNumber,
                    isActive: organizations.isActive,
                    createdAt: organizations.createdAt
                }).from(organizations).where((0, drizzle_orm_17.eq)(organizations.isActive, true)).orderBy(organizations.name);
            }
            else {
                organizationsQuery = db.select({
                    id: organizations.id,
                    name: organizations.name,
                    type: organizations.type,
                    address: organizations.address,
                    city: organizations.city,
                    province: organizations.province,
                    postalCode: organizations.postalCode,
                    phone: organizations.phone,
                    email: organizations.email,
                    website: organizations.website,
                    registrationNumber: organizations.registrationNumber,
                    isActive: organizations.isActive,
                    createdAt: organizations.createdAt
                }).from(organizations).innerJoin(userOrganizations, (0, drizzle_orm_17.eq)(organizations.id, userOrganizations.organizationId)).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(organizations.isActive, true), (0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_17.eq)(userOrganizations.isActive, true))).orderBy(organizations.name);
            }
            const accessibleOrganizations = await organizationsQuery;
            console.log(`\u2705 Found ${accessibleOrganizations.length} organizations for user ${currentUser.id}`);
            res.json(accessibleOrganizations);
        }
        catch (error) {
            console.error("\u274C Error fetching user organizations:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch user organizations"
            });
        }
    });
    app2.get("/api/users/me/data-export", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const userData = await storage.getUser(currentUser.id);
            if (!userData) {
                return res.status(404).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            const { password, ...userDataExport } = userData;
            const [organizations3, residences2, bills3, documents3, notifications2, maintenanceRequests2] = await Promise.all([
                db.select().from(userOrganizations).where((0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id)),
                db.select().from(userResidences).where((0, drizzle_orm_17.eq)(userResidences.userId, currentUser.id)),
                db.select().from(bills).innerJoin(userResidences, (0, drizzle_orm_17.eq)(bills.residenceId, userResidences.residenceId)).where((0, drizzle_orm_17.eq)(userResidences.userId, currentUser.id)),
                db.select().from(documents).where((0, drizzle_orm_17.eq)(documents.uploadedById, currentUser.id)),
                db.select().from(notifications).where((0, drizzle_orm_17.eq)(notifications.userId, currentUser.id)),
                db.select().from(maintenanceRequests).where((0, drizzle_orm_17.eq)(maintenanceRequests.submittedBy, currentUser.id))
            ]);
            const exportData = {
                personalInformation: userDataExport,
                organizations: organizations3,
                residences: residences2,
                bills: bills3.map((b) => b.bills),
                documents: documents3,
                notifications: notifications2,
                maintenanceRequests: maintenanceRequests2,
                exportDate: ( /* @__PURE__ */new Date()).toISOString(),
                note: "This export contains all personal data we have on file for you in compliance with Quebec Law 25."
            };
            res.setHeader("Content-Type", "application/json");
            res.setHeader("Content-Disposition", `attachment; filename="user-data-export-${currentUser.id}-${( /* @__PURE__ */new Date()).toISOString().split("T")[0]}.json"`);
            res.json(exportData);
        }
        catch (error) {
            console.error("\u274C Error exporting user data:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to export user data"
            });
        }
    });
    app2.post("/api/users/me/delete-account", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const { confirmEmail, reason } = req.body;
            if (confirmEmail !== currentUser.email) {
                return res.status(400).json({
                    message: "Email confirmation does not match",
                    code: "EMAIL_MISMATCH"
                });
            }
            await Promise.all([
                // Delete user relationships
                db.delete(userOrganizations).where((0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id)),
                db.delete(userResidences).where((0, drizzle_orm_17.eq)(userResidences.userId, currentUser.id)),
                db.delete(documents).where((0, drizzle_orm_17.eq)(documents.uploadedById, currentUser.id)),
                // Delete user-created content
                db.delete(notifications).where((0, drizzle_orm_17.eq)(notifications.userId, currentUser.id)),
                db.delete(maintenanceRequests).where((0, drizzle_orm_17.eq)(maintenanceRequests.submittedBy, currentUser.id)),
                // Delete invitations
                db.delete(invitations).where((0, drizzle_orm_17.eq)(invitations.email, currentUser.email))
            ]);
            await db.delete(users).where((0, drizzle_orm_17.eq)(users.id, currentUser.id));
            console.log(`User account deleted: ${currentUser.email} (${currentUser.id}). Reason: ${reason || "Not provided"}`);
            if (req.session) {
                req.session.destroy((err) => {
                    if (err) {
                        console.error("Failed to destroy session after account deletion:", err);
                    }
                });
            }
            res.json({
                message: "Account successfully deleted. All personal data has been permanently removed from our systems.",
                deletionDate: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error deleting account:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to delete account. Please contact support."
            });
        }
    });
    app2.put("/api/users/me", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const updateSchema = insertUserSchema.partial().omit({ password: true, id: true, role: true });
            const validatedData = updateSchema.parse(req.body);
            const user = await storage.updateUser(currentUser.id, {
                ...validatedData,
                updatedAt: /* @__PURE__ */ new Date()
            });
            if (!user) {
                return res.status(404).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error("\u274C Error updating user profile:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update profile"
            });
        }
    });
    app2.post("/api/users/:id/delete-account", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: targetUserId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Only administrators can delete user accounts",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            console.warn(`\u26A0\uFE0F  CRITICAL: Admin ${currentUser.email} attempting to delete user ${targetUserId}`);
            if (!targetUserId) {
                return res.status(400).json({
                    message: "User ID is required",
                    code: "INVALID_REQUEST"
                });
            }
            const targetUser = await storage.getUser(targetUserId);
            if (!targetUser) {
                return res.status(404).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            const { confirmEmail, reason } = req.body;
            if (confirmEmail !== targetUser.email) {
                return res.status(400).json({
                    message: "Email confirmation does not match",
                    code: "EMAIL_MISMATCH"
                });
            }
            const deletionPromises = [
                // Delete user relationships
                db.delete(userOrganizations).where((0, drizzle_orm_17.eq)(userOrganizations.userId, targetUserId)),
                db.delete(userResidences).where((0, drizzle_orm_17.eq)(userResidences.userId, targetUserId)),
                db.delete(documents).where((0, drizzle_orm_17.eq)(documents.uploadedById, targetUserId)),
                // Delete invitations
                db.delete(invitations).where((0, drizzle_orm_17.eq)(invitations.email, targetUser.email)),
                // Delete demands and related comments (must be done before deleting user)
                db.delete(demandComments).where((0, drizzle_orm_17.eq)(demandComments.commenterId, targetUserId)),
                db.delete(demands).where((0, drizzle_orm_17.eq)(demands.submitterId, targetUserId)),
                // Delete bugs and feature requests submitted by the user
                db.delete(bugs).where((0, drizzle_orm_17.eq)(bugs.createdBy, targetUserId)),
                db.delete(featureRequests).where((0, drizzle_orm_17.eq)(featureRequests.createdBy, targetUserId)),
                db.delete(featureRequestUpvotes).where((0, drizzle_orm_17.eq)(featureRequestUpvotes.userId, targetUserId))
            ];
            const optionalDeletions = [
                async () => {
                    try {
                        await db.delete(notifications).where((0, drizzle_orm_17.eq)(notifications.userId, targetUserId));
                    }
                    catch (error) {
                        if (error.cause?.code === "42P01") {
                            console.log("Notifications table not found, skipping...");
                        }
                        else {
                            throw error;
                        }
                    }
                },
                async () => {
                    try {
                        await db.delete(maintenanceRequests).where((0, drizzle_orm_17.eq)(maintenanceRequests.submittedBy, targetUserId));
                    }
                    catch (error) {
                        if (error.cause?.code === "42P01") {
                            console.log("Maintenance requests table not found, skipping...");
                        }
                        else {
                            throw error;
                        }
                    }
                }
            ];
            await Promise.all(deletionPromises);
            await Promise.all(optionalDeletions.map((fn) => fn()));
            await db.delete(users).where((0, drizzle_orm_17.eq)(users.id, targetUserId));
            queryCache.invalidate("users", "all_users");
            queryCache.invalidate("users", `user:${targetUserId}`);
            queryCache.invalidate("users", `user_email:${targetUser.email}`);
            console.log(`User account deleted by admin ${currentUser.email} (${currentUser.id}): ${targetUser.email} (${targetUserId}). Reason: ${reason || "Not provided"}`);
            res.json({
                message: "User account and all associated data have been permanently deleted",
                deletedUserId: targetUserId,
                deletedUserEmail: targetUser.email
            });
        }
        catch (error) {
            console.error("\u274C Error deleting user account:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to delete user account"
            });
        }
    });
    app2.post("/api/users/me/change-password", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const { currentPassword, newPassword } = req.body;
            if (!currentPassword || !newPassword) {
                return res.status(400).json({
                    message: "Current password and new password are required",
                    code: "INVALID_INPUT"
                });
            }
            const user = await storage.getUser(currentUser.id);
            if (!user || !await bcrypt2.compare(currentPassword, user.password)) {
                return res.status(400).json({
                    message: "Current password is incorrect",
                    code: "INVALID_PASSWORD"
                });
            }
            const hashedPassword = await bcrypt2.hash(newPassword, 12);
            await storage.updateUser(currentUser.id, {
                password: hashedPassword,
                updatedAt: /* @__PURE__ */ new Date()
            });
            res.json({
                message: "Password changed successfully"
            });
        }
        catch (error) {
            console.error("\u274C Error changing password:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to change password"
            });
        }
    });
    app2.post("/api/users/demo", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const { firstName, lastName, role, organizationId, residenceId } = req.body;
            if (!["demo_manager", "demo_tenant", "demo_resident"].includes(role)) {
                return res.status(400).json({
                    message: "Invalid demo role",
                    code: "INVALID_ROLE"
                });
            }
            if (!firstName || !lastName || !organizationId) {
                return res.status(400).json({
                    message: "First name, last name, and organization are required",
                    code: "MISSING_REQUIRED_FIELDS"
                });
            }
            const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@demo.com`;
            const existingUser = await storage.getUserByEmail(email);
            if (existingUser) {
                return res.status(400).json({
                    message: "Demo user with this name already exists",
                    code: "USER_EXISTS"
                });
            }
            const randomPassword = (0, crypto_5.randomBytes)(12).toString("base64");
            const hashedPassword = await bcrypt2.hash(`Demo${randomPassword}!`, 12);
            const userData = {
                firstName: sanitizeName(firstName),
                lastName: sanitizeName(lastName),
                email: normalizeEmail(email),
                username: generateUsernameFromEmail(email),
                password: hashedPassword,
                language: "fr",
                // Default to French for Quebec
                role,
                isActive: true
            };
            const newUser = await storage.createUser(userData);
            logUserCreation({
                userId: newUser.id,
                email: newUser.email,
                method: "direct",
                role,
                success: true,
                timestamp: /* @__PURE__ */ new Date()
            });
            queryCache.invalidate("users", "all_users");
            res.status(201).json({
                message: "Demo user created successfully",
                user: {
                    id: newUser.id,
                    firstName: newUser.firstName,
                    lastName: newUser.lastName,
                    email: newUser.email,
                    role: newUser.role
                }
            });
        }
        catch (error) {
            console.error("\u274C Error creating demo user:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to create demo user"
            });
        }
    });
    app2.post("/api/invitations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const { organizationId, residenceId, email, role, invitedByUserId, expiresAt, personalMessage } = req.body;
            if (!organizationId || !email || !role || !expiresAt) {
                return res.status(400).json({
                    message: "Organization, email, role, and expiry date are required",
                    code: "MISSING_REQUIRED_FIELDS"
                });
            }
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                return res.status(400).json({
                    message: "Invalid email format",
                    code: "INVALID_EMAIL"
                });
            }
            if (currentUser.role === "manager") {
                if (role === "admin") {
                    return res.status(403).json({
                        message: "Managers can only invite resident, tenant, and manager roles",
                        code: "ROLE_PERMISSION_DENIED"
                    });
                }
                const targetOrg = await db.select().from(organizations).where((0, drizzle_orm_17.eq)(organizations.id, organizationId)).limit(1);
                if (targetOrg.length > 0 && targetOrg[0].type === "Demo") {
                    if (!["resident", "tenant", "manager"].includes(role)) {
                        return res.status(403).json({
                            message: "Invalid role for demo organization",
                            code: "INVALID_DEMO_ROLE"
                        });
                    }
                }
                else {
                    if (!["resident", "tenant", "manager"].includes(role)) {
                        return res.status(403).json({
                            message: "Managers can only invite resident, tenant, and manager roles",
                            code: "ROLE_PERMISSION_DENIED"
                        });
                    }
                }
            }
            const existingUser = await storage.getUserByEmail(email);
            if (existingUser) {
                return res.status(400).json({
                    message: "User with this email already exists",
                    code: "USER_EXISTS"
                });
            }
            const existingInvitations = await db.select().from(invitations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(invitations.email, email), (0, drizzle_orm_17.eq)(invitations.organizationId, organizationId), (0, drizzle_orm_17.eq)(invitations.status, "pending")));
            if (existingInvitations.length > 0) {
                console.log(`\u{1F504} Replacing ${existingInvitations.length} existing invitation(s) for email: ${email}`);
                await db.delete(invitations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(invitations.email, email), (0, drizzle_orm_17.eq)(invitations.organizationId, organizationId), (0, drizzle_orm_17.eq)(invitations.status, "pending")));
            }
            const token = (0, crypto_5.randomBytes)(32).toString("hex");
            const tokenHash = (0, crypto_5.createHash)("sha256").update(token).digest("hex");
            const invitationData = {
                organizationId,
                residenceId: residenceId || null,
                email,
                token,
                tokenHash,
                role,
                invitedByUserId: currentUser.id,
                expiresAt: new Date(expiresAt),
                personalMessage: personalMessage || null
            };
            const [newInvitation] = await db.insert(invitations).values(invitationData).returning();
            const [organization] = await db.select().from(organizations).where((0, drizzle_orm_17.eq)(organizations.id, organizationId)).limit(1);
            const recipientName = email.split("@")[0];
            const organizationName = organization?.name || "Koveo Gestion";
            const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ""}`.trim();
            const emailSent = await emailService.sendInvitationEmail(email, recipientName, token, 
            // Use the unhashed token for the email URL
            organizationName, inviterName, new Date(expiresAt), "fr", 
            // Default to French for Quebec
            personalMessage);
            console.log("\u2705 Invitation created:", {
                id: newInvitation.id,
                email,
                role,
                organizationId,
                invitedBy: currentUser.email,
                emailSent
            });
            if (!emailSent && process.env.NODE_ENV !== "test") {
                console.error("\u26A0\uFE0F Invitation created but email failed to send");
                return res.status(207).json({
                    message: "Invitation created but email failed to send",
                    invitationId: newInvitation.id,
                    emailSent: false
                });
            }
            res.status(201).json({
                message: "Invitation sent successfully",
                invitationId: newInvitation.id,
                emailSent: true
            });
        }
        catch (error) {
            console.error("\u274C Error creating invitation:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to create invitation"
            });
        }
    });
    app2.get("/api/invitations", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            let invitations2;
            if (currentUser.role === "admin") {
                invitations2 = await db.select().from(invitations).orderBy(invitations.createdAt);
            }
            else {
                invitations2 = await db.select().from(invitations).where((0, drizzle_orm_17.eq)(invitations.invitedByUserId, currentUser.id)).orderBy(invitations.createdAt);
            }
            res.json(invitations2);
        }
        catch (error) {
            console.error("\u274C Error fetching invitations:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch invitations"
            });
        }
    });
    app2.post("/api/invitations/validate", async (req, res) => {
        try {
            const { token } = req.body;
            if (!token) {
                return res.status(400).json({
                    isValid: false,
                    message: "Token is required",
                    code: "TOKEN_REQUIRED"
                });
            }
            const [invitation] = await db.select().from(invitations).where((0, drizzle_orm_17.eq)(invitations.token, token)).limit(1);
            if (!invitation) {
                return res.status(404).json({
                    isValid: false,
                    message: "Invitation not found or invalid token",
                    code: "INVITATION_NOT_FOUND"
                });
            }
            const now = /* @__PURE__ */ new Date();
            const expiresAt = new Date(invitation.expiresAt);
            if (now > expiresAt) {
                return res.status(400).json({
                    isValid: false,
                    message: "Invitation has expired",
                    code: "INVITATION_EXPIRED"
                });
            }
            if (invitation.status === "accepted") {
                return res.status(400).json({
                    isValid: false,
                    message: "Invitation has already been used",
                    code: "INVITATION_ALREADY_USED"
                });
            }
            const [organization] = await db.select().from(organizations).where((0, drizzle_orm_17.eq)(organizations.id, invitation.organizationId)).limit(1);
            const [inviter] = await db.select({
                id: users.id,
                firstName: users.firstName,
                lastName: users.lastName,
                email: users.email
            }).from(users).where((0, drizzle_orm_17.eq)(users.id, invitation.invitedByUserId)).limit(1);
            res.json({
                isValid: true,
                invitation: {
                    id: invitation.id,
                    email: invitation.email,
                    role: invitation.role,
                    expiresAt: invitation.expiresAt,
                    createdAt: invitation.createdAt
                },
                organizationName: organization?.name || "Unknown Organization",
                inviterName: inviter ? `${inviter.firstName} ${inviter.lastName}`.trim() : "Unknown User"
            });
        }
        catch (error) {
            console.error("\u274C Error validating invitation:", error);
            res.status(500).json({
                isValid: false,
                message: "Internal server error during validation",
                code: "VALIDATION_ERROR"
            });
        }
    });
    app2.post("/api/invitations/accept/:token", async (req, res) => {
        try {
            const { token } = req.params;
            const { firstName, lastName, password, phone, language, dataCollectionConsent, marketingConsent, analyticsConsent, thirdPartyConsent, acknowledgedRights } = req.body;
            if (!token) {
                return res.status(400).json({
                    message: "Token is required",
                    code: "TOKEN_REQUIRED"
                });
            }
            const [invitation] = await db.select().from(invitations).where((0, drizzle_orm_17.eq)(invitations.token, token)).limit(1);
            if (!invitation) {
                return res.status(404).json({
                    message: "Invitation not found or invalid token",
                    code: "INVITATION_NOT_FOUND"
                });
            }
            const now = /* @__PURE__ */ new Date();
            const expiresAt = new Date(invitation.expiresAt);
            if (now > expiresAt) {
                return res.status(400).json({
                    message: "Invitation has expired",
                    code: "INVITATION_EXPIRED"
                });
            }
            if (invitation.status === "accepted") {
                return res.status(400).json({
                    message: "Invitation has already been used",
                    code: "INVITATION_ALREADY_USED"
                });
            }
            if (!firstName || !lastName || !password) {
                return res.status(400).json({
                    message: "First name, last name, and password are required",
                    code: "MISSING_REQUIRED_FIELDS"
                });
            }
            if (!dataCollectionConsent || !acknowledgedRights) {
                return res.status(400).json({
                    message: "Required privacy consents must be given",
                    code: "MISSING_REQUIRED_CONSENTS"
                });
            }
            const hashedPassword = await bcrypt2.hash(password, 12);
            const userData = {
                firstName: sanitizeName(firstName),
                lastName: sanitizeName(lastName),
                email: normalizeEmail(invitation.email),
                username: generateUsernameFromEmail(invitation.email),
                password: hashedPassword,
                phone: phone ? sanitizeString(phone) : "",
                language: language || "fr",
                role: invitation.role,
                isActive: true,
                organizationId: invitation.organizationId
            };
            const newUser = await storage.createUser(userData);
            if (invitation.organizationId) {
                await db.insert(userOrganizations).values({
                    userId: newUser.id,
                    organizationId: invitation.organizationId,
                    organizationRole: invitation.role,
                    isActive: true
                });
                console.log("\u2705 User assigned to organization:", {
                    userId: newUser.id,
                    organizationId: invitation.organizationId,
                    role: invitation.role
                });
            }
            if (invitation.residenceId) {
                await db.insert(userResidences).values({
                    userId: newUser.id,
                    residenceId: invitation.residenceId,
                    relationshipType: invitation.role === "tenant" ? "tenant" : "occupant",
                    startDate: /* @__PURE__ */ new Date(),
                    isActive: true
                });
                console.log("\u2705 User assigned to residence:", {
                    userId: newUser.id,
                    residenceId: invitation.residenceId,
                    relationshipType: invitation.role === "tenant" ? "tenant" : "occupant"
                });
            }
            await db.update(invitations).set({
                status: "accepted",
                acceptedAt: /* @__PURE__ */ new Date(),
                acceptedBy: newUser.id,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_17.eq)(invitations.id, invitation.id));
            logUserCreation({
                userId: newUser.id,
                email: newUser.email,
                method: "invitation",
                role: invitation.role,
                success: true,
                timestamp: /* @__PURE__ */ new Date()
            });
            queryCache.invalidate("users", "all_users");
            queryCache.invalidate("invitations");
            console.log("\u2705 User created via invitation acceptance:", {
                userId: newUser.id,
                email: newUser.email,
                role: newUser.role,
                organizationId: invitation.organizationId,
                residenceId: invitation.residenceId,
                assignedToOrganization: !!invitation.organizationId,
                assignedToResidence: !!invitation.residenceId
            });
            res.status(201).json({
                message: "Account created successfully",
                user: {
                    id: newUser.id,
                    firstName: newUser.firstName,
                    lastName: newUser.lastName,
                    email: newUser.email,
                    role: newUser.role,
                    language: newUser.language
                }
            });
        }
        catch (error) {
            console.error("\u274C Error accepting invitation:", error);
            res.status(500).json({
                message: "Internal server error during account creation",
                code: "INVITATION_ACCEPT_ERROR"
            });
        }
    });
    app2.post("/api/invitations/:id/resend", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const { id } = req.params;
            const [invitation] = await db.select().from(invitations).where((0, drizzle_orm_17.eq)(invitations.id, id)).limit(1);
            if (!invitation) {
                return res.status(404).json({
                    message: "Invitation not found",
                    code: "INVITATION_NOT_FOUND"
                });
            }
            if (currentUser.role !== "admin" && invitation.invitedByUserId !== currentUser.id) {
                return res.status(403).json({
                    message: "Can only resend your own invitations",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const newExpiresAt = /* @__PURE__ */ new Date();
            newExpiresAt.setDate(newExpiresAt.getDate() + 7);
            await db.update(invitations).set({
                expiresAt: newExpiresAt,
                status: "pending",
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_17.eq)(invitations.id, id));
            const [organization] = await db.select().from(organizations).where((0, drizzle_orm_17.eq)(organizations.id, invitation.organizationId)).limit(1);
            const recipientName = invitation.email.split("@")[0];
            const organizationName = organization?.name || "Koveo Gestion";
            const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ""}`.trim();
            const emailSent = await emailService.sendInvitationEmail(invitation.email, recipientName, invitation.token, 
            // Use the existing token
            organizationName, inviterName, newExpiresAt, "fr", 
            // Default to French for Quebec
            invitation.personalMessage);
            console.log("\u2705 Invitation resent:", {
                id,
                email: invitation.email,
                newExpiresAt,
                emailSent
            });
            if (!emailSent) {
                console.error("\u26A0\uFE0F Invitation updated but email failed to resend");
                return res.status(207).json({
                    message: "Invitation updated but email failed to resend",
                    emailSent: false
                });
            }
            res.json({
                message: "Invitation resent successfully",
                emailSent: true
            });
        }
        catch (error) {
            console.error("\u274C Error resending invitation:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to resend invitation"
            });
        }
    });
    app2.get("/api/invitations/pending", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions to view invitations",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            let invitationsQuery;
            if (currentUser.role === "admin") {
                invitationsQuery = db.select({
                    id: invitations.id,
                    email: invitations.email,
                    role: invitations.role,
                    status: invitations.status,
                    expiresAt: invitations.expiresAt,
                    createdAt: invitations.createdAt,
                    organizationId: invitations.organizationId,
                    buildingId: invitations.buildingId,
                    residenceId: invitations.residenceId,
                    organizationName: organizations.name,
                    buildingName: (0, drizzle_orm_17.sql) `buildings.name`,
                    residenceUnitNumber: (0, drizzle_orm_17.sql) `residences.unit_number`,
                    invitedByName: (0, drizzle_orm_17.sql) `CONCAT(users.first_name, ' ', users.last_name)`
                }).from(invitations).leftJoin(organizations, (0, drizzle_orm_17.eq)(invitations.organizationId, organizations.id)).leftJoin((0, drizzle_orm_17.sql) `buildings`, (0, drizzle_orm_17.sql) `invitations.building_id = buildings.id`).leftJoin((0, drizzle_orm_17.sql) `residences`, (0, drizzle_orm_17.sql) `invitations.residence_id = residences.id`).leftJoin(users, (0, drizzle_orm_17.eq)(invitations.invitedByUserId, users.id)).where((0, drizzle_orm_17.eq)(invitations.status, "pending"));
            }
            else {
                const managerOrgs = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_17.eq)(userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                invitationsQuery = db.select({
                    id: invitations.id,
                    email: invitations.email,
                    role: invitations.role,
                    status: invitations.status,
                    expiresAt: invitations.expiresAt,
                    createdAt: invitations.createdAt,
                    organizationId: invitations.organizationId,
                    buildingId: invitations.buildingId,
                    residenceId: invitations.residenceId,
                    organizationName: organizations.name,
                    buildingName: (0, drizzle_orm_17.sql) `buildings.name`,
                    residenceUnitNumber: (0, drizzle_orm_17.sql) `residences.unit_number`,
                    invitedByName: (0, drizzle_orm_17.sql) `CONCAT(users.first_name, ' ', users.last_name)`
                }).from(invitations).leftJoin(organizations, (0, drizzle_orm_17.eq)(invitations.organizationId, organizations.id)).leftJoin((0, drizzle_orm_17.sql) `buildings`, (0, drizzle_orm_17.sql) `invitations.building_id = buildings.id`).leftJoin((0, drizzle_orm_17.sql) `residences`, (0, drizzle_orm_17.sql) `invitations.residence_id = residences.id`).leftJoin(users, (0, drizzle_orm_17.eq)(invitations.invitedByUserId, users.id)).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(invitations.status, "pending"), (0, drizzle_orm_17.inArray)(invitations.organizationId, orgIds)));
            }
            const invitations2 = await invitationsQuery;
            res.json(invitations2);
        }
        catch (error) {
            console.error("\u274C Error fetching pending invitations:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch pending invitations"
            });
        }
    });
    app2.delete("/api/invitations/:id", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: invitationId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!["admin", "manager"].includes(currentUser.role)) {
                return res.status(403).json({
                    message: "Insufficient permissions to delete invitations",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            if (!invitationId) {
                return res.status(400).json({
                    message: "Invitation ID is required",
                    code: "INVALID_REQUEST"
                });
            }
            const invitation = await db.select().from(invitations).where((0, drizzle_orm_17.eq)(invitations.id, invitationId)).limit(1);
            if (invitation.length === 0) {
                return res.status(404).json({
                    message: "Invitation not found",
                    code: "INVITATION_NOT_FOUND"
                });
            }
            const invitationData = invitation[0];
            if (currentUser.role === "manager") {
                const managerOrgs = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_17.and)((0, drizzle_orm_17.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_17.eq)(userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (!invitationData.organizationId || !orgIds.includes(invitationData.organizationId)) {
                    return res.status(403).json({
                        message: "You can only delete invitations from your organizations",
                        code: "INSUFFICIENT_PERMISSIONS"
                    });
                }
            }
            await db.delete(invitations).where((0, drizzle_orm_17.eq)(invitations.id, invitationId));
            res.json({
                message: "Invitation deleted successfully",
                invitationId
            });
        }
        catch (error) {
            console.error("\u274C Error deleting invitation:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to delete invitation"
            });
        }
    });
}
// server/api/buildings.ts
init_db();
init_schema();
const drizzle_orm_18 = require("drizzle-orm");
const crypto_6 = __importDefault(require("crypto"));
function registerBuildingRoutes(app2) {
    app2.get("/api/buildings", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (![
                "admin",
                "manager",
                "demo_manager",
                "demo_tenant",
                "demo_resident",
                "tenant",
                "resident"
            ].includes(user.role)) {
                return res.status(403).json({
                    message: "Access denied. Insufficient permissions.",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            console.log("\u{1F3E2} [Buildings API] User accessing buildings:", {
                id: user.id,
                role: user.role,
                organizations: user.organizations,
                canAccessAllOrganizations: user.canAccessAllOrganizations
            });
            let buildingsQuery;
            if (user.role === "admin") {
                console.log(`\u{1F3E2} [BUILDINGS DEBUG] Admin user detected - granting access to ALL buildings`);
                buildingsQuery = db.select({
                    id: buildings.id,
                    name: buildings.name,
                    address: buildings.address,
                    city: buildings.city,
                    province: buildings.province,
                    postalCode: buildings.postalCode,
                    buildingType: buildings.buildingType,
                    yearBuilt: buildings.yearBuilt,
                    totalUnits: buildings.totalUnits,
                    totalFloors: buildings.totalFloors,
                    parkingSpaces: buildings.parkingSpaces,
                    storageSpaces: buildings.storageSpaces,
                    organizationId: buildings.organizationId,
                    isActive: buildings.isActive,
                    createdAt: buildings.createdAt,
                    organizationName: organizations.name
                }).from(buildings).innerJoin(organizations, (0, drizzle_orm_18.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_18.eq)(buildings.isActive, true)).orderBy(organizations.name, buildings.name);
            }
            else {
                console.log(`\u{1F50D} [BUILDINGS DEBUG] Non-admin user (${user.role}) - checking organization access. User ${user.id} organizations:`, user.organizations);
                if (!user.organizations || user.organizations.length === 0) {
                    console.log(`\u{1F50D} [BUILDINGS DEBUG] User ${user.id} has no organizations, checking residence access...`);
                    if (["tenant", "resident", "demo_tenant", "demo_resident"].includes(user.role)) {
                        const userResidencesList = await db.select({
                            buildingId: residences.buildingId
                        }).from(userResidences).innerJoin(residences, (0, drizzle_orm_18.eq)(userResidences.residenceId, residences.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(userResidences.userId, user.id), (0, drizzle_orm_18.eq)(userResidences.isActive, true)));
                        console.log(`\u{1F50D} [BUILDINGS DEBUG] Found ${userResidencesList.length} residences for user ${user.id}`);
                        if (userResidencesList.length === 0) {
                            return res.json([]);
                        }
                        const accessibleBuildingIds = [
                            ...new Set(userResidencesList.map((ur) => ur.buildingId))
                        ];
                        console.log(`\u{1F50D} [BUILDINGS DEBUG] Accessible building IDs:`, accessibleBuildingIds);
                        buildingsQuery = db.select({
                            id: buildings.id,
                            name: buildings.name,
                            address: buildings.address,
                            city: buildings.city,
                            province: buildings.province,
                            postalCode: buildings.postalCode,
                            buildingType: buildings.buildingType,
                            yearBuilt: buildings.yearBuilt,
                            totalUnits: buildings.totalUnits,
                            totalFloors: buildings.totalFloors,
                            parkingSpaces: buildings.parkingSpaces,
                            storageSpaces: buildings.storageSpaces,
                            organizationId: buildings.organizationId,
                            isActive: buildings.isActive,
                            createdAt: buildings.createdAt,
                            organizationName: organizations.name
                        }).from(buildings).innerJoin(organizations, (0, drizzle_orm_18.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(buildings.isActive, true), (0, drizzle_orm_18.inArray)(buildings.id, accessibleBuildingIds))).orderBy(organizations.name, buildings.name);
                    }
                    else {
                        console.log(`\u{1F50D} [BUILDINGS DEBUG] Manager/other role user ${user.id} has no organizations - returning empty result`);
                        return res.json([]);
                    }
                }
                else {
                    buildingsQuery = db.select({
                        id: buildings.id,
                        name: buildings.name,
                        address: buildings.address,
                        city: buildings.city,
                        province: buildings.province,
                        postalCode: buildings.postalCode,
                        buildingType: buildings.buildingType,
                        yearBuilt: buildings.yearBuilt,
                        totalUnits: buildings.totalUnits,
                        totalFloors: buildings.totalFloors,
                        parkingSpaces: buildings.parkingSpaces,
                        storageSpaces: buildings.storageSpaces,
                        organizationId: buildings.organizationId,
                        isActive: buildings.isActive,
                        createdAt: buildings.createdAt,
                        organizationName: organizations.name
                    }).from(buildings).innerJoin(organizations, (0, drizzle_orm_18.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(buildings.isActive, true), (0, drizzle_orm_18.inArray)(buildings.organizationId, user.organizations))).orderBy(organizations.name, buildings.name);
                }
            }
            const result = await buildingsQuery;
            res.json(result);
        }
        catch (error) {
            console.error("\u274C Error fetching buildings:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to fetch buildings"
            });
        }
    });
    app2.get("/api/manager/buildings", async (req, res) => {
        if (!req.session?.userId && !req.session?.user) {
            return res.status(401).json({
                message: "Authentication required",
                code: "AUTH_REQUIRED"
            });
        }
        try {
            let currentUser = req.user || req.session?.user;
            if (!currentUser && req.session?.userId) {
                const { storage: storage4 } = await Promise.resolve().then(() => (init_storage(), storage_exports));
                currentUser = await storage4.getUser(req.session.userId);
            }
            if (!currentUser) {
                return res.status(401).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            console.log(`\u{1F4CA} Fetching buildings for user ${currentUser.id} with role ${currentUser.role}`);
            const accessibleBuildings = [];
            const buildingIds = /* @__PURE__ */ new Set();
            const userOrgs = await db.select({
                organizationId: userOrganizations.organizationId,
                organizationName: organizations.name,
                canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations
            }).from(userOrganizations).innerJoin(organizations, (0, drizzle_orm_18.eq)(userOrganizations.organizationId, organizations.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_18.eq)(userOrganizations.isActive, true)));
            const hasGlobalAccess = currentUser.role === "admin" || userOrgs.some((org) => org.organizationName === "Koveo" || org.canAccessAllOrganizations);
            if (hasGlobalAccess) {
                console.log(`\u{1F31F} Admin user or user with global access detected - granting access to ALL buildings`);
                const allBuildings = await db.select({
                    id: buildings.id,
                    name: buildings.name,
                    address: buildings.address,
                    city: buildings.city,
                    province: buildings.province,
                    postalCode: buildings.postalCode,
                    buildingType: buildings.buildingType,
                    yearBuilt: buildings.yearBuilt,
                    totalUnits: buildings.totalUnits,
                    totalFloors: buildings.totalFloors,
                    parkingSpaces: buildings.parkingSpaces,
                    storageSpaces: buildings.storageSpaces,
                    amenities: buildings.amenities,
                    managementCompany: buildings.managementCompany,
                    organizationId: buildings.organizationId,
                    isActive: buildings.isActive,
                    createdAt: buildings.createdAt,
                    updatedAt: buildings.updatedAt,
                    organizationName: organizations.name,
                    organizationType: organizations.type
                }).from(buildings).innerJoin(organizations, (0, drizzle_orm_18.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_18.eq)(buildings.isActive, true)).orderBy(organizations.name, buildings.name);
                allBuildings.forEach((building) => {
                    if (!buildingIds.has(building.id)) {
                        buildingIds.add(building.id);
                        accessibleBuildings.push({
                            ...building,
                            accessType: "koveo-global"
                            // Special access type for Koveo users
                        });
                    }
                });
            }
            else {
                if (currentUser.role === "admin" || currentUser.role === "manager") {
                    if (userOrgs.length > 0) {
                        const orgIds = userOrgs.map((uo) => uo.organizationId);
                        const orgBuildings = await db.select({
                            id: buildings.id,
                            name: buildings.name,
                            address: buildings.address,
                            city: buildings.city,
                            province: buildings.province,
                            postalCode: buildings.postalCode,
                            buildingType: buildings.buildingType,
                            yearBuilt: buildings.yearBuilt,
                            totalUnits: buildings.totalUnits,
                            totalFloors: buildings.totalFloors,
                            parkingSpaces: buildings.parkingSpaces,
                            storageSpaces: buildings.storageSpaces,
                            amenities: buildings.amenities,
                            managementCompany: buildings.managementCompany,
                            organizationId: buildings.organizationId,
                            isActive: buildings.isActive,
                            createdAt: buildings.createdAt,
                            updatedAt: buildings.updatedAt,
                            organizationName: organizations.name,
                            organizationType: organizations.type
                        }).from(buildings).innerJoin(organizations, (0, drizzle_orm_18.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.inArray)(buildings.organizationId, orgIds), (0, drizzle_orm_18.eq)(buildings.isActive, true)));
                        orgBuildings.forEach((building) => {
                            if (!buildingIds.has(building.id)) {
                                buildingIds.add(building.id);
                                accessibleBuildings.push({
                                    ...building,
                                    accessType: "organization"
                                    // Track how user has access
                                });
                            }
                        });
                    }
                }
            }
            const userResidenceRecords = await db.select({
                residenceId: userResidences.residenceId,
                relationshipType: userResidences.relationshipType
            }).from(userResidences).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(userResidences.userId, currentUser.id), (0, drizzle_orm_18.eq)(userResidences.isActive, true)));
            if (userResidenceRecords.length > 0) {
                const residenceIds = userResidenceRecords.map((ur) => ur.residenceId);
                const residenceBuildings = await db.select({
                    id: buildings.id,
                    name: buildings.name,
                    address: buildings.address,
                    city: buildings.city,
                    province: buildings.province,
                    postalCode: buildings.postalCode,
                    buildingType: buildings.buildingType,
                    yearBuilt: buildings.yearBuilt,
                    totalUnits: buildings.totalUnits,
                    totalFloors: buildings.totalFloors,
                    parkingSpaces: buildings.parkingSpaces,
                    storageSpaces: buildings.storageSpaces,
                    amenities: buildings.amenities,
                    managementCompany: buildings.managementCompany,
                    organizationId: buildings.organizationId,
                    isActive: buildings.isActive,
                    createdAt: buildings.createdAt,
                    updatedAt: buildings.updatedAt,
                    organizationName: organizations.name,
                    organizationType: organizations.type,
                    residenceId: residences.id,
                    unitNumber: residences.unitNumber,
                    floor: residences.floor
                }).from(residences).innerJoin(buildings, (0, drizzle_orm_18.eq)(residences.buildingId, buildings.id)).innerJoin(organizations, (0, drizzle_orm_18.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.inArray)(residences.id, residenceIds), (0, drizzle_orm_18.eq)(buildings.isActive, true)));
                residenceBuildings.forEach((building) => {
                    if (!buildingIds.has(building.id)) {
                        buildingIds.add(building.id);
                        accessibleBuildings.push({
                            id: building.id,
                            name: building.name,
                            address: building.address,
                            city: building.city,
                            province: building.province,
                            postalCode: building.postalCode,
                            buildingType: building.buildingType,
                            yearBuilt: building.yearBuilt,
                            totalUnits: building.totalUnits,
                            totalFloors: building.totalFloors,
                            parkingSpaces: building.parkingSpaces,
                            storageSpaces: building.storageSpaces,
                            amenities: building.amenities,
                            managementCompany: building.managementCompany,
                            organizationId: building.organizationId,
                            isActive: building.isActive,
                            createdAt: building.createdAt,
                            updatedAt: building.updatedAt,
                            organizationName: building.organizationName,
                            organizationType: building.organizationType,
                            accessType: "residence",
                            // Track how user has access
                            userResidence: {
                                residenceId: building.residenceId,
                                unitNumber: building.unitNumber,
                                floor: building.floor
                            }
                        });
                    }
                    else {
                        const existingBuilding = accessibleBuildings.find((b) => b.id === building.id);
                        if (existingBuilding && !existingBuilding.userResidence) {
                            existingBuilding.userResidence = {
                                residenceId: building.residenceId,
                                unitNumber: building.unitNumber,
                                floor: building.floor
                            };
                            if (existingBuilding.accessType === "organization") {
                                existingBuilding.accessType = "both";
                            }
                        }
                    }
                });
            }
            const buildingsWithStats = await Promise.all(accessibleBuildings.map(async (building) => {
                const residenceCount = await db.select({ count: (0, drizzle_orm_18.sql) `count(*)::int` }).from(residences).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(residences.buildingId, building.id), (0, drizzle_orm_18.eq)(residences.isActive, true)));
                const occupiedUnits = residenceCount[0]?.count || 0;
                const occupancyRate = building.totalUnits > 0 ? Math.round(occupiedUnits / building.totalUnits * 100) : 0;
                return {
                    ...building,
                    statistics: {
                        totalUnits: building.totalUnits,
                        occupiedUnits,
                        occupancyRate,
                        vacantUnits: building.totalUnits - occupiedUnits
                    }
                };
            }));
            buildingsWithStats.sort((a, b) => a.name.localeCompare(b.name));
            console.log(`\u2705 Found ${buildingsWithStats.length} accessible buildings for user ${currentUser.id}`);
            res.json({
                buildings: buildingsWithStats,
                meta: {
                    total: buildingsWithStats.length,
                    userRole: currentUser.role,
                    userId: currentUser.id
                }
            });
        }
        catch (error) {
            console.error("\u274C Error fetching manager buildings:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to fetch buildings"
            });
        }
    });
    app2.get("/api/manager/buildings/:id", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user;
            const buildingId = req.params.id;
            if (!currentUser) {
                return res.status(401).json({
                    _error: "Unauthorized",
                    message: "Authentication required"
                });
            }
            console.log(`\u{1F4CA} Fetching building ${buildingId} for user ${currentUser.id} with role ${currentUser.role}`);
            let hasAccess = false;
            let accessType = "";
            const userOrgs = await db.select({
                organizationId: userOrganizations.organizationId,
                organizationName: organizations.name,
                canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations
            }).from(userOrganizations).innerJoin(organizations, (0, drizzle_orm_18.eq)(userOrganizations.organizationId, organizations.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(userOrganizations.userId, currentUser.id), (0, drizzle_orm_18.eq)(userOrganizations.isActive, true)));
            const hasGlobalAccess = currentUser.role === "admin" || userOrgs.some((org) => org.organizationName === "Koveo" || org.canAccessAllOrganizations);
            if (hasGlobalAccess) {
                hasAccess = true;
                accessType = "global";
            }
            else {
                if (currentUser.role === "admin" || currentUser.role === "manager") {
                    if (userOrgs.length > 0) {
                        const orgIds = userOrgs.map((uo) => uo.organizationId);
                        const buildingOrg = await db.select({ id: buildings.id }).from(buildings).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(buildings.id, buildingId), (0, drizzle_orm_18.inArray)(buildings.organizationId, orgIds), (0, drizzle_orm_18.eq)(buildings.isActive, true)));
                        if (buildingOrg.length > 0) {
                            hasAccess = true;
                            accessType = "organization";
                        }
                    }
                }
            }
            if (!hasAccess) {
                const userResidenceAccess = await db.select({ residenceId: userResidences.residenceId }).from(userResidences).innerJoin(residences, (0, drizzle_orm_18.eq)(userResidences.residenceId, residences.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(userResidences.userId, currentUser.id), (0, drizzle_orm_18.eq)(residences.buildingId, buildingId), (0, drizzle_orm_18.eq)(userResidences.isActive, true)));
                if (userResidenceAccess.length > 0) {
                    hasAccess = true;
                    accessType = accessType ? "both" : "residence";
                }
            }
            if (!hasAccess) {
                return res.status(403).json({
                    _error: "Forbidden",
                    message: "You do not have access to this building"
                });
            }
            const buildingData = await db.select({
                id: buildings.id,
                name: buildings.name,
                address: buildings.address,
                city: buildings.city,
                province: buildings.province,
                postalCode: buildings.postalCode,
                buildingType: buildings.buildingType,
                yearBuilt: buildings.yearBuilt,
                totalUnits: buildings.totalUnits,
                totalFloors: buildings.totalFloors,
                parkingSpaces: buildings.parkingSpaces,
                storageSpaces: buildings.storageSpaces,
                amenities: buildings.amenities,
                managementCompany: buildings.managementCompany,
                organizationId: buildings.organizationId,
                isActive: buildings.isActive,
                createdAt: buildings.createdAt,
                updatedAt: buildings.updatedAt,
                organizationName: organizations.name,
                organizationType: organizations.type,
                organizationAddress: organizations.address,
                organizationCity: organizations.city,
                organizationPhone: organizations.phone,
                organizationEmail: organizations.email
            }).from(buildings).innerJoin(organizations, (0, drizzle_orm_18.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_18.eq)(buildings.id, buildingId));
            if (buildingData.length === 0) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "Building not found"
                });
            }
            const building = buildingData[0];
            const buildingResidences = await db.select({
                id: residences.id,
                unitNumber: residences.unitNumber,
                floor: residences.floor,
                squareFootage: residences.squareFootage,
                bedrooms: residences.bedrooms,
                bathrooms: residences.bathrooms,
                balcony: residences.balcony,
                parkingSpaceNumbers: residences.parkingSpaceNumbers,
                storageSpaceNumbers: residences.storageSpaceNumbers,
                monthlyFees: residences.monthlyFees,
                isActive: residences.isActive
            }).from(residences).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(residences.buildingId, buildingId), (0, drizzle_orm_18.eq)(residences.isActive, true)));
            let userResidencesInBuilding = [];
            const userResidenceRecords = await db.select({
                residenceId: userResidences.residenceId,
                relationshipType: userResidences.relationshipType,
                startDate: userResidences.startDate,
                endDate: userResidences.endDate
            }).from(userResidences).innerJoin(residences, (0, drizzle_orm_18.eq)(userResidences.residenceId, residences.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(userResidences.userId, currentUser.id), (0, drizzle_orm_18.eq)(residences.buildingId, buildingId), (0, drizzle_orm_18.eq)(userResidences.isActive, true)));
            if (userResidenceRecords.length > 0) {
                userResidencesInBuilding = userResidenceRecords.map((ur) => {
                    const residence = buildingResidences.find((r) => r.id === ur.residenceId);
                    return {
                        ...residence,
                        relationshipType: ur.relationshipType,
                        startDate: ur.startDate,
                        endDate: ur.endDate
                    };
                });
            }
            const occupiedUnits = buildingResidences.length;
            const occupancyRate = building.totalUnits > 0 ? Math.round(occupiedUnits / building.totalUnits * 100) : 0;
            res.json({
                ...building,
                accessType,
                statistics: {
                    totalUnits: building.totalUnits,
                    occupiedUnits,
                    occupancyRate,
                    vacantUnits: building.totalUnits - occupiedUnits,
                    totalResidences: buildingResidences.length
                },
                userResidences: userResidencesInBuilding,
                // Only include full residence list for managers/admins
                residences: currentUser.role === "admin" || currentUser.role === "manager" ? buildingResidences : void 0
            });
        }
        catch (error) {
            console.error("\u274C Error fetching building details:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to fetch building details"
            });
        }
    });
    app2.post("/api/admin/buildings", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required",
                    code: "ADMIN_REQUIRED"
                });
            }
            const buildingData = req.body;
            if (!buildingData.name || !buildingData.organizationId) {
                return res.status(400).json({
                    _error: "Validation error",
                    message: "Building name and organization are required"
                });
            }
            const buildingId = crypto_6.default.randomUUID();
            const newBuilding = await db.insert(buildings).values({
                id: buildingId,
                name: buildingData.name,
                address: buildingData.address || "",
                city: buildingData.city || "",
                province: buildingData.province || "QC",
                postalCode: buildingData.postalCode || "",
                buildingType: buildingData.buildingType || "condo",
                yearBuilt: buildingData.yearBuilt,
                totalUnits: buildingData.totalUnits || 0,
                totalFloors: buildingData.totalFloors,
                parkingSpaces: buildingData.parkingSpaces,
                storageSpaces: buildingData.storageSpaces,
                amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,
                managementCompany: buildingData.managementCompany,
                organizationId: buildingData.organizationId,
                isActive: true,
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date()
            }).returning();
            console.log("Building created - storage hierarchy will be created on first document upload");
            if (buildingData.totalUnits && buildingData.totalUnits > 0 && buildingData.totalUnits <= 300) {
                try {
                    const totalUnits = buildingData.totalUnits;
                    const totalFloors = buildingData.totalFloors || 1;
                    const unitsPerFloor = Math.ceil(totalUnits / totalFloors);
                    const residencesToCreate = [];
                    for (let unit = 1; unit <= totalUnits; unit++) {
                        const floor = Math.ceil(unit / unitsPerFloor);
                        const unitOnFloor = (unit - 1) % unitsPerFloor + 1;
                        const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, "0")}`;
                        residencesToCreate.push({
                            buildingId,
                            unitNumber,
                            floor,
                            isActive: true
                        });
                    }
                    const createdResidences = await db.insert(residences).values(residencesToCreate).returning();
                    console.log(`\u2705 Auto-generated ${createdResidences.length} residences for building ${buildingId}`);
                }
                catch (___residenceError) {
                    console.error("\u26A0\uFE0F Error auto-generating residences:", ___residenceError);
                }
            }
            res.status(201).json({
                message: "Building created successfully",
                building: newBuilding[0]
            });
        }
        catch (error) {
            console.error("\u274C Error creating building:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to create building"
            });
        }
    });
    app2.get("/api/buildings/:id/residences-for-deletion", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const buildingId = req.params.id;
            const maxToSelect = parseInt(req.query.maxToSelect) || 10;
            if (!user) {
                return res.status(401).json({ message: "Authentication required" });
            }
            if (user.role !== "admin") {
                return res.status(403).json({ message: "Only admins can access residence deletion options" });
            }
            const { getResidencesForSelection: getResidencesForSelection2 } = await Promise.resolve().then(() => (init_operations2(), operations_exports));
            const residencesToSelect = await getResidencesForSelection2(buildingId, maxToSelect);
            res.json({
                residences: residencesToSelect,
                message: `Found ${residencesToSelect.length} residences available for deletion`
            });
        }
        catch (error) {
            console.error("\u274C Error fetching residences for deletion:", error);
            res.status(500).json({ message: "Failed to fetch residences for deletion" });
        }
    });
    app2.delete("/api/buildings/:id/residences", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const buildingId = req.params.id;
            const { residenceIds } = req.body;
            if (!user) {
                return res.status(401).json({ message: "Authentication required" });
            }
            if (user.role !== "admin") {
                return res.status(403).json({ message: "Only admins can delete residences" });
            }
            if (!Array.isArray(residenceIds) || residenceIds.length === 0) {
                return res.status(400).json({ message: "residenceIds array is required" });
            }
            const { deleteSelectedResidences: deleteSelectedResidences2 } = await Promise.resolve().then(() => (init_operations2(), operations_exports));
            const result = await deleteSelectedResidences2(buildingId, residenceIds, user.role);
            res.json({
                success: true,
                deletedCount: result.deletedCount,
                documentsDeleted: result.documentsDeleted,
                message: `Successfully deleted ${result.deletedCount} residences and ${result.documentsDeleted} associated documents`
            });
        }
        catch (error) {
            console.error("\u274C Error deleting residences:", error);
            res.status(500).json({ message: error.message || "Failed to delete residences" });
        }
    });
    app2.put("/api/admin/buildings/:id", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin" && currentUser.role !== "manager") {
                return res.status(403).json({
                    message: "Admin or Manager access required",
                    code: "ADMIN_MANAGER_REQUIRED"
                });
            }
            const buildingId = req.params.id;
            const buildingData = req.body;
            if (!buildingData.name || !buildingData.organizationId) {
                return res.status(400).json({
                    _error: "Validation error",
                    message: "Building name and organization are required"
                });
            }
            const existingBuilding = await db.select().from(buildings).where((0, drizzle_orm_18.eq)(buildings.id, buildingId)).limit(1);
            if (existingBuilding.length === 0) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "Building not found"
                });
            }
            const currentResidences = await db.select({ count: (0, drizzle_orm_18.sql) `count(*)::int` }).from(residences).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(residences.buildingId, buildingId), (0, drizzle_orm_18.eq)(residences.isActive, true)));
            const currentResidenceCount = currentResidences[0]?.count || 0;
            const newTotalUnits = buildingData.totalUnits || 0;
            const previousTotalUnits = existingBuilding[0].totalUnits || 0;
            console.log(`\u{1F504} Building ${buildingId}: ${previousTotalUnits} \u2192 ${newTotalUnits} units (currently has ${currentResidenceCount} active residences)`);
            const updatedBuilding = await db.update(buildings).set({
                name: buildingData.name,
                address: buildingData.address || "",
                city: buildingData.city || "",
                province: buildingData.province || "QC",
                postalCode: buildingData.postalCode || "",
                buildingType: buildingData.buildingType || "condo",
                yearBuilt: buildingData.yearBuilt,
                totalUnits: newTotalUnits,
                totalFloors: buildingData.totalFloors,
                parkingSpaces: buildingData.parkingSpaces,
                storageSpaces: buildingData.storageSpaces,
                amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,
                managementCompany: buildingData.managementCompany,
                organizationId: buildingData.organizationId,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_18.eq)(buildings.id, buildingId)).returning();
            if (newTotalUnits !== previousTotalUnits) {
                console.log(`\u{1F3E0} Building units changed from ${previousTotalUnits} to ${newTotalUnits}, adjusting residences...`);
                if (currentUser.role !== "admin") {
                    return res.status(403).json({
                        message: "Only admins can increase or decrease building residence counts",
                        code: "ADMIN_REQUIRED_FOR_RESIDENCE_CHANGES"
                    });
                }
                const { adjustResidenceCount: adjustResidenceCount2 } = await Promise.resolve().then(() => (init_operations2(), operations_exports));
                const adjustmentResult = await adjustResidenceCount2(buildingId, existingBuilding[0].organizationId, newTotalUnits, previousTotalUnits, buildingData.totalFloors || existingBuilding[0].totalFloors || 1);
                if (adjustmentResult.action === "decreased" && adjustmentResult.residencesToSelect) {
                    return res.json({
                        message: "Building updated, but residence count needs to be reduced",
                        buildingUpdated: true,
                        needsResidenceSelection: true,
                        residencesToSelect: adjustmentResult.residencesToSelect,
                        instruction: `Please select ${previousTotalUnits - newTotalUnits} residences to delete from the list provided. Use DELETE /api/buildings/${buildingId}/residences with the selected residence IDs.`
                    });
                }
            }
            res.json({
                message: "Building updated successfully",
                building: updatedBuilding[0]
            });
        }
        catch (error) {
            console.error("\u274C Error updating building:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to update building"
            });
        }
    });
    app2.delete("/api/admin/buildings/:id", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required",
                    code: "ADMIN_REQUIRED"
                });
            }
            const buildingId = req.params.id;
            const existingBuilding = await db.select().from(buildings).where((0, drizzle_orm_18.eq)(buildings.id, buildingId)).limit(1);
            if (existingBuilding.length === 0) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "Building not found"
                });
            }
            await db.update(buildings).set({
                isActive: false,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_18.eq)(buildings.id, buildingId));
            console.log("Building deleted - storage cleanup will be handled automatically");
            res.json({
                message: "Building deleted successfully"
            });
        }
        catch (error) {
            console.error("\u274C Error deleting building:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to delete building"
            });
        }
    });
    app2.get("/api/admin/buildings/:id/deletion-impact", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required",
                    code: "ADMIN_REQUIRED"
                });
            }
            const buildingId = req.params.id;
            const building = await db.select({ id: buildings.id, name: buildings.name }).from(buildings).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(buildings.id, buildingId), (0, drizzle_orm_18.eq)(buildings.isActive, true))).limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "Building not found"
                });
            }
            const residencesCount = await db.select({ count: (0, drizzle_orm_18.sql) `count(*)` }).from(residences).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(residences.buildingId, buildingId), (0, drizzle_orm_18.eq)(residences.isActive, true)));
            const documentsCount = await db.select({ count: (0, drizzle_orm_18.sql) `count(*)` }).from(documents).where((0, drizzle_orm_18.or)((0, drizzle_orm_18.eq)(documents.buildingId, buildingId), (0, drizzle_orm_18.sql) `${documents.residenceId} IN (SELECT id FROM residences WHERE building_id = ${buildingId})`));
            const potentialOrphansCount = await db.select({ count: (0, drizzle_orm_18.sql) `count(distinct ${userResidences.userId})` }).from(userResidences).innerJoin(residences, (0, drizzle_orm_18.eq)(userResidences.residenceId, residences.id)).innerJoin(users, (0, drizzle_orm_18.eq)(userResidences.userId, users.id)).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(residences.buildingId, buildingId), (0, drizzle_orm_18.eq)(residences.isActive, true), (0, drizzle_orm_18.eq)(userResidences.isActive, true), (0, drizzle_orm_18.eq)(users.isActive, true)));
            const impact = {
                building: building[0],
                residences: residencesCount[0]?.count || 0,
                documents: documentsCount[0]?.count || 0,
                potentialOrphanedUsers: potentialOrphansCount[0]?.count || 0
            };
            res.json(impact);
        }
        catch (error) {
            console.error("\u274C Error analyzing deletion impact:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to analyze deletion impact"
            });
        }
    });
    app2.delete("/api/admin/buildings/:id/cascade", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    message: "Admin access required",
                    code: "ADMIN_REQUIRED"
                });
            }
            const buildingId = req.params.id;
            const building = await db.select({ id: buildings.id, name: buildings.name }).from(buildings).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(buildings.id, buildingId), (0, drizzle_orm_18.eq)(buildings.isActive, true))).limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    _error: "Not found",
                    message: "Building not found"
                });
            }
            await db.transaction(async (tx) => {
                const buildingResidences = await tx.select({ id: residences.id }).from(residences).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(residences.buildingId, buildingId), (0, drizzle_orm_18.eq)(residences.isActive, true)));
                const residenceIds = buildingResidences.map((r) => r.id);
                if (residenceIds.length > 0) {
                    await tx.delete(documents).where((0, drizzle_orm_18.or)((0, drizzle_orm_18.eq)(documents.buildingId, buildingId), (0, drizzle_orm_18.inArray)(documents.residenceId, residenceIds)));
                    await tx.update(userResidences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_18.inArray)(userResidences.residenceId, residenceIds));
                    const orphanedUsers = await tx.select({ id: users.id }).from(users).leftJoin(userOrganizations, (0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(users.id, userOrganizations.userId), (0, drizzle_orm_18.eq)(userOrganizations.isActive, true))).leftJoin(userResidences, (0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(users.id, userResidences.userId), (0, drizzle_orm_18.eq)(userResidences.isActive, true))).where((0, drizzle_orm_18.and)((0, drizzle_orm_18.eq)(users.isActive, true), (0, drizzle_orm_18.isNull)(userOrganizations.userId), (0, drizzle_orm_18.isNull)(userResidences.userId)));
                    if (orphanedUsers.length > 0) {
                        const orphanedUserIds = orphanedUsers.map((u) => u.id);
                        await tx.update(users).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_18.inArray)(users.id, orphanedUserIds));
                    }
                    await tx.update(residences).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_18.inArray)(residences.id, residenceIds));
                }
                else {
                    await tx.delete(documents).where((0, drizzle_orm_18.eq)(documents.buildingId, buildingId));
                }
                await tx.update(buildings).set({ isActive: false, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_18.eq)(buildings.id, buildingId));
            });
            const buildingOrg = await db.select({ organizationId: buildings.organizationId }).from(buildings).where((0, drizzle_orm_18.eq)(buildings.id, buildingId)).limit(1);
            if (buildingOrg.length > 0) {
                console.log("Building deleted - storage cleanup will be handled automatically");
            }
            res.json({
                message: "Building and related entities deleted successfully",
                deletedBuilding: building[0].name
            });
        }
        catch (error) {
            console.error("\u274C Error during cascade delete:", error);
            res.status(500).json({
                _error: "Internal server error",
                message: "Failed to delete building and related entities"
            });
        }
    });
}
// server/api/documents.ts
init_storage();
init_schema();
init_db();
const zod_12 = require("zod");
const multer_2 = __importDefault(require("multer"));
const path_4 = __importDefault(require("path"));
const fs_3 = __importDefault(require("fs"));
const crypto_7 = __importDefault(require("crypto"));
const uuid_1 = require("uuid");
const drizzle_orm_19 = require("drizzle-orm");
var SECURITY_CONFIG = {
    MAX_FILE_SIZE: 25 * 1024 * 1024,
    // Reduced to 25MB for better security
    MAX_FILES_PER_USER_PER_HOUR: 10,
    // Rate limiting
    ALLOWED_MIME_TYPES: [
        "application/pdf",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "text/plain",
        "image/jpeg",
        "image/png",
        "image/gif"
    ],
    ALLOWED_EXTENSIONS: ["pdf", "doc", "docx", "xls", "xlsx", "txt", "jpg", "jpeg", "png", "gif"]
};
var uploadRateTracker = /* @__PURE__ */ new Map();
function validateFile(file) {
    if (!file)
        return { isValid: false, error: "No file provided" };
    if (file.size > SECURITY_CONFIG.MAX_FILE_SIZE) {
        return { isValid: false, error: `File size exceeds ${SECURITY_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB limit` };
    }
    if (!SECURITY_CONFIG.ALLOWED_MIME_TYPES.includes(file.mimetype)) {
        return { isValid: false, error: `File type ${file.mimetype} not allowed` };
    }
    const extension = path_4.default.extname(file.originalname).toLowerCase().substring(1);
    if (!SECURITY_CONFIG.ALLOWED_EXTENSIONS.includes(extension)) {
        return { isValid: false, error: `File extension .${extension} not allowed` };
    }
    if (file.originalname.includes("..") || file.originalname.includes("/") || file.originalname.includes("\\")) {
        return { isValid: false, error: "Invalid filename detected" };
    }
    return { isValid: true };
}
function checkUploadRateLimit(userId) {
    const now = Date.now();
    const userUploads = uploadRateTracker.get(userId) || [];
    const recentUploads = userUploads.filter((timestamp10) => now - timestamp10 < 60 * 60 * 1e3);
    if (recentUploads.length >= SECURITY_CONFIG.MAX_FILES_PER_USER_PER_HOUR) {
        return { allowed: false, error: "Upload rate limit exceeded. Please try again later." };
    }
    recentUploads.push(now);
    uploadRateTracker.set(userId, recentUploads);
    return { allowed: true };
}
var upload = (0, multer_2.default)({
    dest: "/tmp/uploads/",
    limits: {
        fileSize: SECURITY_CONFIG.MAX_FILE_SIZE,
        files: 1
        // Only allow one file at a time
    },
    fileFilter: (req, file, cb) => {
        const validation = validateFile(file);
        if (validation.isValid) {
            cb(null, true);
        }
        else {
            cb(new Error(validation.error));
        }
    }
});
var DOCUMENT_CATEGORIES = [
    "bylaw",
    "financial",
    "maintenance",
    "legal",
    "meeting_minutes",
    "insurance",
    "contracts",
    "permits",
    "inspection",
    "lease",
    "correspondence",
    "utilities",
    "other"
];
var createDocumentSchema = insertDocumentSchema.extend({
    category: zod_12.z.enum(DOCUMENT_CATEGORIES),
    title: zod_12.z.string().min(1).max(255),
    description: zod_12.z.string().optional(),
    isVisibleToTenants: zod_12.z.boolean().default(false)
});
var createBuildingDocumentSchema = insertDocumentSchema.extend({
    type: zod_12.z.enum(DOCUMENT_CATEGORIES),
    title: zod_12.z.string().min(1).max(255).optional(),
    description: zod_12.z.string().optional()
});
var createResidentDocumentSchema = insertDocumentSchema.extend({
    type: zod_12.z.enum(DOCUMENT_CATEGORIES),
    title: zod_12.z.string().min(1).max(255).optional(),
    description: zod_12.z.string().optional()
});
var uploadDocumentRecordSchema = zod_12.z.object({
    name: zod_12.z.string().min(1).max(255),
    description: zod_12.z.string().optional(),
    documentType: zod_12.z.enum(DOCUMENT_CATEGORIES),
    isVisibleToTenants: zod_12.z.boolean().default(false),
    residenceId: zod_12.z.string().uuid().optional(),
    buildingId: zod_12.z.string().uuid().optional(),
    attachedToType: zod_12.z.string().optional(),
    attachedToId: zod_12.z.string().optional()
});
function registerDocumentRoutes(app2) {
    console.log(`[${( /* @__PURE__ */new Date()).toISOString()}] \u{1F527} Registering document routes...`);
    const auditLog = [];
    const errorLog = [];
    const logSecurityEvent = (action, user, success, documentId, details) => {
        const event = {
            timestamp: ( /* @__PURE__ */new Date()).toISOString(),
            action,
            userId: user.id,
            userRole: user.role,
            documentId,
            success,
            details
        };
        auditLog.push(event);
        if (auditLog.length > 1e3)
            auditLog.shift();
        console.log(`[SECURITY AUDIT] ${action}:`, event);
        return event;
    };
    const testDatabaseConnection = async () => {
        try {
            const result = await db.execute((0, drizzle_orm_19.sql) `SELECT 1 as test`);
            return {
                success: true,
                result: result.rows[0],
                url_truncated: process.env.DATABASE_URL?.substring(0, 50) + "..."
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message,
                url_truncated: process.env.DATABASE_URL?.substring(0, 50) + "..."
            };
        }
    };
    const testSampleQuery = async () => {
        try {
            const result = await db.execute((0, drizzle_orm_19.sql) `
        SELECT COUNT(*) as document_count 
        FROM documents 
        LIMIT 1
      `);
            return {
                success: true,
                document_count: result.rows[0]?.document_count || 0
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message,
                stack: error.stack?.substring(0, 200) + "..."
            };
        }
    };
    const checkEnumValues = async () => {
        try {
            const result = await db.execute((0, drizzle_orm_19.sql) `
        SELECT enumlabel 
        FROM pg_enum 
        WHERE enumtypid = (
          SELECT oid 
          FROM pg_type 
          WHERE typname = 'user_role'
        )
        ORDER BY enumsortorder
      `);
            return {
                success: true,
                production_enum_values: result.rows.map((row) => row.enumlabel)
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    };
    const checkUserOrganizationLinks = async () => {
        try {
            const userCount = await db.execute((0, drizzle_orm_19.sql) `SELECT COUNT(*) as total FROM users WHERE is_active = true`);
            const orgCount = await db.execute((0, drizzle_orm_19.sql) `SELECT COUNT(*) as total FROM organizations WHERE is_active = true`);
            const linkCount = await db.execute((0, drizzle_orm_19.sql) `SELECT COUNT(*) as total FROM user_organizations WHERE is_active = true`);
            const orphanUsers = await db.execute((0, drizzle_orm_19.sql) `
        SELECT u.id, u.email, u.role 
        FROM users u 
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true
        WHERE u.is_active = true AND uo.user_id IS NULL
        LIMIT 10
      `);
            const testUser = await db.execute((0, drizzle_orm_19.sql) `
        SELECT u.email, u.role, uo.organization_id, o.name as org_name
        FROM users u
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true  
        LEFT JOIN organizations o ON uo.organization_id = o.id
        WHERE u.id = '222f5a0d-6bc6-4f28-9f4d-32c133eed333'
      `);
            return {
                success: true,
                stats: {
                    total_users: userCount.rows[0]?.total || 0,
                    total_organizations: orgCount.rows[0]?.total || 0,
                    total_links: linkCount.rows[0]?.total || 0,
                    orphan_user_count: orphanUsers.rows.length
                },
                orphan_users: orphanUsers.rows,
                test_user_status: testUser.rows[0] || null
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    };
    app2.post("/api/documents/cleanup-enum", async (req, res) => {
        try {
            const userCheck = await db.execute((0, drizzle_orm_19.sql) `
        SELECT COUNT(*) as owner_count 
        FROM users 
        WHERE role = 'owner'
      `);
            const ownerCount = Number(userCheck.rows[0]?.owner_count) || 0;
            if (ownerCount > 0) {
                return res.status(400).json({
                    error: "Cannot remove owner role - users still assigned to it",
                    owner_count: ownerCount
                });
            }
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TYPE user_role DROP VALUE IF EXISTS 'owner'
      `);
            res.json({
                message: "Successfully removed unused owner role",
                safe_to_push_schema: true,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error during enum cleanup:", error);
            res.status(500).json({
                error: "Enum cleanup failed",
                message: error.message,
                suggestion: "Try running npm run db:push --force instead"
            });
        }
    });
    app2.post("/api/documents/fix-user-links", async (req, res) => {
        try {
            const orphanUsers = await db.execute((0, drizzle_orm_19.sql) `
        SELECT u.id, u.email, u.role 
        FROM users u 
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true
        WHERE u.is_active = true AND uo.user_id IS NULL
      `);
            if (orphanUsers.rows.length === 0) {
                return res.json({
                    message: "All users already have organization links",
                    action_taken: "none",
                    timestamp: ( /* @__PURE__ */new Date()).toISOString()
                });
            }
            let defaultOrg = await db.execute((0, drizzle_orm_19.sql) `
        SELECT id, name FROM organizations WHERE is_active = true LIMIT 1
      `);
            let organizationId;
            let organizationName;
            if (defaultOrg.rows.length === 0) {
                organizationId = crypto_7.default.randomUUID();
                organizationName = "Default Organization";
                await db.execute((0, drizzle_orm_19.sql) `
          INSERT INTO organizations (id, name, type, address, phone, email, is_active, created_at, updated_at)
          VALUES (${organizationId}, ${organizationName}, 'condominium', '123 Main St', '514-555-0100', 'admin@koveo.ca', true, NOW(), NOW())
        `);
            }
            else {
                organizationId = defaultOrg.rows[0].id;
                organizationName = defaultOrg.rows[0].name;
            }
            const linkPromises = orphanUsers.rows.map((user) => {
                const linkId = crypto_7.default.randomUUID();
                return db.execute((0, drizzle_orm_19.sql) `
          INSERT INTO user_organizations (id, user_id, organization_id, role, is_active, created_at, updated_at)
          VALUES (${linkId}, ${user.id}, ${organizationId}, ${user.role}, true, NOW(), NOW())
        `);
            });
            await Promise.all(linkPromises);
            res.json({
                message: "Successfully linked users to organizations",
                users_linked: orphanUsers.rows.length,
                organization_id: organizationId,
                organization_name: organizationName,
                linked_users: orphanUsers.rows.map((u) => ({ id: u.id, email: u.email, role: u.role })),
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error fixing user-organization links:", error);
            res.status(500).json({
                error: "Failed to fix user-organization links",
                message: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.post("/api/documents/fix-enum-migration", async (req, res) => {
        try {
            const enumCheck = await db.execute((0, drizzle_orm_19.sql) `
        SELECT enumlabel, enumsortorder 
        FROM pg_enum 
        WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'user_role')
        ORDER BY enumsortorder
      `);
            const currentEnumValues = enumCheck.rows.map((row) => row.enumlabel);
            const userRoleUsage = await db.execute((0, drizzle_orm_19.sql) `
        SELECT role, COUNT(*) as count 
        FROM users 
        GROUP BY role
      `);
            const targetEnumValues = ["admin", "manager", "tenant", "resident", "demo_manager", "demo_tenant", "demo_resident"];
            const orderMatches = JSON.stringify(currentEnumValues) === JSON.stringify(targetEnumValues);
            if (orderMatches) {
                return res.json({
                    message: "Enum values already in correct order",
                    current_values: currentEnumValues,
                    target_values: targetEnumValues,
                    migration_needed: false
                });
            }
            await db.execute((0, drizzle_orm_19.sql) `CREATE TYPE user_role_new AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')`);
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TABLE users 
        ALTER COLUMN role TYPE user_role_new 
        USING role::text::user_role_new
      `);
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TABLE user_organizations 
        ALTER COLUMN organization_role TYPE user_role_new 
        USING organization_role::text::user_role_new
      `);
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TABLE role_permissions 
        ALTER COLUMN role TYPE user_role_new 
        USING role::text::user_role_new
      `);
            await db.execute((0, drizzle_orm_19.sql) `DROP TYPE user_role`);
            await db.execute((0, drizzle_orm_19.sql) `ALTER TYPE user_role_new RENAME TO user_role`);
            res.json({
                message: "Successfully migrated user_role enum",
                old_values: currentEnumValues,
                new_values: targetEnumValues,
                user_role_usage: userRoleUsage.rows,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error during enum migration:", error);
            res.status(500).json({
                error: "Enum migration failed",
                message: error.message,
                suggestion: "This is a complex migration - may need manual intervention",
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.post("/api/documents/fix-invitations-dependency", async (req, res) => {
        try {
            const invitationsSchema = await db.execute((0, drizzle_orm_19.sql) `
        SELECT column_name, data_type, column_default
        FROM information_schema.columns 
        WHERE table_name = 'invitations' AND column_name = 'role'
      `);
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TABLE invitations 
        ALTER COLUMN role DROP DEFAULT
      `);
            const enumDependencies = await db.execute((0, drizzle_orm_19.sql) `
        SELECT 
          t.table_name,
          c.column_name,
          c.column_default
        FROM information_schema.tables t
        JOIN information_schema.columns c ON t.table_name = c.table_name
        WHERE c.data_type = 'USER-DEFINED' 
        AND c.udt_name = 'user_role'
        AND c.column_default IS NOT NULL
      `);
            res.json({
                message: "Successfully removed invitations table enum dependency",
                removed_defaults: invitationsSchema.rows,
                remaining_dependencies: enumDependencies.rows,
                next_step: "Run npm run db:push now, then call /api/documents/restore-invitations-default",
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error fixing invitations dependency:", error);
            res.status(500).json({
                error: "Failed to fix invitations dependency",
                message: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.post("/api/documents/restore-invitations-default", async (req, res) => {
        try {
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TABLE invitations 
        ALTER COLUMN role SET DEFAULT 'tenant'
      `);
            const verification = await db.execute((0, drizzle_orm_19.sql) `
        SELECT column_name, column_default
        FROM information_schema.columns 
        WHERE table_name = 'invitations' AND column_name = 'role'
      `);
            res.json({
                message: "Successfully restored invitations role default to tenant",
                current_default: verification.rows[0]?.column_default,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error restoring invitations default:", error);
            res.status(500).json({
                error: "Failed to restore invitations default",
                message: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.post("/api/documents/migrate-owner-to-admin", async (req, res) => {
        try {
            const ownerUsersCheck = await db.execute((0, drizzle_orm_19.sql) `
        SELECT id, email, first_name, last_name 
        FROM users 
        WHERE role = 'owner'
      `);
            const ownerCount = ownerUsersCheck.rows.length;
            if (ownerCount === 0) {
                return res.json({
                    message: "No owner users found - migration not needed",
                    owner_count: 0,
                    timestamp: ( /* @__PURE__ */new Date()).toISOString()
                });
            }
            await db.execute((0, drizzle_orm_19.sql) `
        UPDATE users 
        SET role = 'admin' 
        WHERE role = 'owner'
      `);
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          UPDATE user_organizations 
          SET organization_role = 'admin' 
          WHERE organization_role = 'owner'
        `);
            }
            catch (e) {
            }
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TYPE user_role RENAME TO user_role_old
      `);
            await db.execute((0, drizzle_orm_19.sql) `
        CREATE TYPE user_role AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')
      `);
            await db.execute((0, drizzle_orm_19.sql) `
        ALTER TABLE users 
        ALTER COLUMN role TYPE user_role 
        USING role::text::user_role
      `);
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role TYPE user_role 
          USING organization_role::text::user_role
        `);
            }
            catch (e) {
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE role_permissions 
          ALTER COLUMN role TYPE user_role 
          USING role::text::user_role
        `);
            }
            catch (e) {
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE invitations 
          ALTER COLUMN role TYPE user_role 
          USING role::text::user_role
        `);
            }
            catch (e) {
            }
            await db.execute((0, drizzle_orm_19.sql) `DROP TYPE user_role_old`);
            res.json({
                message: "Successfully migrated owner users to admin",
                migrated_users: ownerUsersCheck.rows,
                owner_count: ownerCount,
                new_enum_values: ["admin", "manager", "tenant", "resident", "demo_manager", "demo_tenant", "demo_resident"],
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error migrating owner users to admin:", error);
            res.status(500).json({
                error: "Owner to admin migration failed",
                message: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.post("/api/documents/remove-all-enum-dependencies", async (req, res) => {
        try {
            const results = [];
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE users 
          ALTER COLUMN role DROP DEFAULT
        `);
                results.push("users.role default removed");
            }
            catch (e) {
                results.push(`users.role: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role DROP DEFAULT
        `);
                results.push("user_organizations.organization_role default removed");
            }
            catch (e) {
                results.push(`user_organizations.organization_role: ${e.message}`);
            }
            const remainingDeps = await db.execute((0, drizzle_orm_19.sql) `
        SELECT 
          t.table_name,
          c.column_name,
          c.column_default
        FROM information_schema.tables t
        JOIN information_schema.columns c ON t.table_name = c.table_name
        WHERE c.data_type = 'USER-DEFINED' 
        AND c.udt_name = 'user_role'
        AND c.column_default IS NOT NULL
      `);
            res.json({
                message: "Removed all enum dependencies",
                operations: results,
                remaining_dependencies: remainingDeps.rows,
                next_step: "Run npm run db:push now",
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error removing enum dependencies:", error);
            res.status(500).json({
                error: "Failed to remove enum dependencies",
                message: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.post("/api/documents/restore-all-defaults", async (req, res) => {
        try {
            const results = [];
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE users 
          ALTER COLUMN role SET DEFAULT 'tenant'
        `);
                results.push("users.role default restored to tenant");
            }
            catch (e) {
                results.push(`users.role restore failed: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role SET DEFAULT 'tenant'
        `);
                results.push("user_organizations.organization_role default restored to tenant");
            }
            catch (e) {
                results.push(`user_organizations.organization_role restore failed: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE invitations 
          ALTER COLUMN role SET DEFAULT 'tenant'
        `);
                results.push("invitations.role default restored to tenant");
            }
            catch (e) {
                results.push(`invitations.role restore failed: ${e.message}`);
            }
            res.json({
                message: "Restored all default values",
                operations: results,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
        catch (error) {
            console.error("\u274C Error restoring defaults:", error);
            res.status(500).json({
                error: "Failed to restore defaults",
                message: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.post("/api/documents/complete-schema-sync", async (req, res) => {
        try {
            const results = [];
            try {
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE users ALTER COLUMN role DROP DEFAULT`);
                results.push("\u2713 Removed users.role default");
            }
            catch (e) {
                results.push(`users.role: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role DROP DEFAULT`);
                results.push("\u2713 Removed user_organizations.organization_role default");
            }
            catch (e) {
                results.push(`user_organizations.organization_role: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE invitations ALTER COLUMN role DROP DEFAULT`);
                results.push("\u2713 Removed invitations.role default");
            }
            catch (e) {
                results.push(`invitations.role: ${e.message}`);
            }
            const ownerUsers = await db.execute((0, drizzle_orm_19.sql) `SELECT count(*) as count FROM users WHERE role = 'owner'`);
            const ownerCount = Number(ownerUsers.rows[0]?.count || 0);
            if (ownerCount > 0) {
                await db.execute((0, drizzle_orm_19.sql) `UPDATE users SET role = 'admin' WHERE role = 'owner'`);
                results.push(`\u2713 Migrated ${ownerCount} owner users to admin`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `UPDATE user_organizations SET organization_role = 'admin' WHERE organization_role = 'owner'`);
                results.push("\u2713 Updated user_organizations owner roles to admin");
            }
            catch (e) {
                results.push(`user_organizations owner update: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `ALTER TYPE user_role RENAME TO user_role_old`);
                await db.execute((0, drizzle_orm_19.sql) `
          CREATE TYPE user_role AS ENUM (
            'admin', 'manager', 'tenant', 'resident', 
            'demo_manager', 'demo_tenant', 'demo_resident'
          )
        `);
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE users ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role TYPE user_role USING organization_role::text::user_role`);
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE invitations ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                try {
                    await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE role_permissions ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                    results.push("\u2713 Updated role_permissions enum");
                }
                catch (e) {
                    results.push(`role_permissions: ${e.message}`);
                }
                await db.execute((0, drizzle_orm_19.sql) `DROP TYPE user_role_old`);
                results.push("\u2713 Successfully updated user_role enum");
            }
            catch (e) {
                results.push(`Enum update failed: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE users ALTER COLUMN role SET DEFAULT 'tenant'`);
                results.push("\u2713 Restored users.role default to tenant");
            }
            catch (e) {
                results.push(`users.role default restore: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role SET DEFAULT 'tenant'`);
                results.push("\u2713 Restored user_organizations.organization_role default to tenant");
            }
            catch (e) {
                results.push(`user_organizations.organization_role default restore: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `ALTER TABLE invitations ALTER COLUMN role SET DEFAULT 'tenant'`);
                results.push("\u2713 Restored invitations.role default to tenant");
            }
            catch (e) {
                results.push(`invitations.role default restore: ${e.message}`);
            }
            try {
                await db.execute((0, drizzle_orm_19.sql) `
          ALTER TABLE invitation_audit_log 
          ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW()
        `);
                results.push("\u2713 Added created_at to invitation_audit_log");
            }
            catch (e) {
                results.push(`invitation_audit_log.created_at: ${e.message}`);
            }
            res.json({
                message: "Database schema synchronization complete",
                operations: results,
                timestamp: ( /* @__PURE__ */new Date()).toISOString(),
                success: true
            });
        }
        catch (error) {
            console.error("\u274C Error during schema synchronization:", error);
            res.status(500).json({
                error: "Schema synchronization failed",
                message: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString(),
                success: false
            });
        }
    });
    app2.get("/api/documents/diagnostic", async (req, res) => {
        try {
            let tableExists = false;
            let tableSchema = null;
            try {
                const result = await db.execute((0, drizzle_orm_19.sql) `
          SELECT column_name, data_type, is_nullable, column_default 
          FROM information_schema.columns 
          WHERE table_name = 'documents' 
          ORDER BY ordinal_position
        `);
                tableExists = result.rows.length > 0;
                tableSchema = result.rows;
            }
            catch (schemaError) {
                console.error("Schema check error:", schemaError);
            }
            res.json({
                message: "Document API diagnostic",
                gcs_disabled: true,
                session_fix_applied: true,
                timestamp: ( /* @__PURE__ */new Date()).toISOString(),
                environment: process.env.NODE_ENV,
                version: "v2.1-gcs-disabled",
                recent_errors: errorLog.slice(-5),
                // Last 5 errors
                storage_status: {
                    exists: !!storage,
                    type: storage?.constructor?.name,
                    methods: Object.getOwnPropertyNames(Object.getPrototypeOf(storage || {}))
                },
                database_status: {
                    documents_table_exists: tableExists,
                    documents_table_schema: tableSchema,
                    schema_columns_count: tableSchema?.length || 0,
                    connection_test: await testDatabaseConnection(),
                    sample_query_test: await testSampleQuery(),
                    enum_check: await checkEnumValues(),
                    user_organization_links: await checkUserOrganizationLinks()
                }
            });
        }
        catch (error) {
            console.error("\u274C Error running diagnostic:", error);
            res.status(500).json({
                error: "Diagnostic failed",
                message: error.message
            });
        }
    });
    const logError = (endpoint, error, user) => {
        const errorEntry = {
            timestamp: ( /* @__PURE__ */new Date()).toISOString(),
            endpoint,
            error: {
                message: error.message,
                stack: error.stack,
                name: error.name,
                details: error.toString()
            },
            user: user ? { id: user.id, role: user.role } : null
        };
        errorLog.push(errorEntry);
        if (errorLog.length > 50)
            errorLog.shift();
        console.error(`[${errorEntry.timestamp}] \u{1F6A8} ERROR in ${endpoint}:`, errorEntry);
        return errorEntry;
    };
    app2.get("/api/documents", requireAuth, async (req, res) => {
        const timestamp10 = ( /* @__PURE__ */new Date()).toISOString();
        console.log(`[${timestamp10}] \u{1F4C4} GET /api/documents - Starting request`, {
            userId: req.user?.id,
            userRole: req.user?.role,
            query: req.query,
            url: req.url,
            method: req.method
        });
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            console.log(`[${timestamp10}] \u{1F50D} User data extracted:`, {
                userId,
                userRole,
                hasValidUser: !!user
            });
            console.log(`[${timestamp10}] \u{1F4BE} Storage check:`, {
                storageExists: !!storage,
                storageType: storage?.constructor?.name,
                storageMethod: typeof storage?.getDocuments
            });
            const documentType = req.query.type;
            const specificResidenceId = req.query.residenceId;
            const specificBuildingId = req.query.buildingId;
            console.log(`[${timestamp10}] \u{1F50D} Fetching user data from storage...`);
            console.log(`[${timestamp10}] \u{1F4CB} Calling getUserOrganizations(${userId})...`);
            const organizations3 = await storage.getUserOrganizations(userId);
            console.log(`[${timestamp10}] \u2705 getUserOrganizations SUCCESS - Found ${organizations3.length} organizations`);
            console.log(`[${timestamp10}] \u{1F4CB} Calling getUserResidences(${userId})...`);
            const userResidences4 = await storage.getUserResidences(userId);
            console.log(`[${timestamp10}] \u2705 getUserResidences SUCCESS - Found ${userResidences4.length} user residences`);
            console.log(`[${timestamp10}] \u{1F4CB} Calling getBuildings()...`);
            const buildings5 = await storage.getBuildings();
            console.log(`[${timestamp10}] \u2705 getBuildings SUCCESS - Found ${buildings5.length} buildings`);
            const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : void 0;
            console.log(`[${timestamp10}] \u{1F3E2} Organization ID determined:`, organizationId);
            let residenceIds;
            if (specificResidenceId) {
                if (userRole === "admin" || userRole === "manager") {
                    residenceIds = [specificResidenceId];
                }
                else {
                    const hasAccess = userResidences4.some((ur) => {
                        if (ur.residenceId === specificResidenceId) {
                            return true;
                        }
                        if (ur.userResidence?.residenceId === specificResidenceId) {
                            return true;
                        }
                        if (ur.residence?.id === specificResidenceId) {
                            return true;
                        }
                        return false;
                    });
                    if (!hasAccess) {
                        return res.status(403).json({ message: "Access denied to this residence" });
                    }
                    residenceIds = [specificResidenceId];
                }
            }
            else {
                residenceIds = userResidences4.map((ur) => {
                    if (ur.residenceId) {
                        return ur.residenceId;
                    }
                    if (ur.userResidence?.residenceId) {
                        return ur.userResidence.residenceId;
                    }
                    if (ur.residence?.id) {
                        return ur.residence.id;
                    }
                    return null;
                }).filter((id) => id !== null);
            }
            const buildingIds = buildings5.map((b) => b.id);
            const allDocumentRecords = [];
            const filters = {
                userId,
                userRole
            };
            if (specificResidenceId) {
                filters.residenceId = specificResidenceId;
            }
            if (specificBuildingId) {
                filters.buildingId = specificBuildingId;
            }
            else if (documentType === "building") {
                if (buildingIds.length > 0) {
                }
            }
            else if (documentType === "resident") {
                if (residenceIds.length > 0) {
                }
            }
            console.log(`[${timestamp10}] \u{1F3AF} CRITICAL: About to call storage.getDocuments with filters:`, filters);
            console.log(`[${timestamp10}] \u{1F527} Storage instance:`, storage.constructor.name);
            console.log(`[${timestamp10}] \u{1F4CA} Filters being passed:`, JSON.stringify(filters, null, 2));
            const documents3 = await storage.getDocuments(filters);
            console.log(`[${timestamp10}] \u2705 CRITICAL: storage.getDocuments SUCCESS - returned ${documents3?.length || 0} documents`);
            console.log(`[${timestamp10}] \u{1F4CB} Document preview:`, documents3?.slice(0, 3)?.map((d) => ({
                id: d.id,
                name: d.name,
                uploadedById: d.uploadedById,
                buildingId: d.buildingId,
                residenceId: d.residenceId
            })));
            console.log("\u{1F50D} [DOCUMENTS API DEBUG]:", {
                filters,
                documentsFound: documents3?.length || 0,
                specificResidenceId,
                userRole,
                userId
            });
            const filteredDocumentRecords = documents3.filter((doc) => {
                if (specificBuildingId) {
                    if (doc.buildingId !== specificBuildingId) {
                        return false;
                    }
                }
                if (userRole === "admin") {
                    return true;
                }
                if (userRole === "manager" && organizationId) {
                    if (doc.buildingId && buildingIds.includes(doc.buildingId)) {
                        return true;
                    }
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                }
                if (userRole === "resident") {
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                    if (doc.buildingId) {
                        const userBuildingIds = userResidences4.map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId).filter(Boolean);
                        return userBuildingIds.includes(doc.buildingId);
                    }
                }
                if (userRole === "tenant") {
                    if (!doc.isVisibleToTenants) {
                        return false;
                    }
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                    if (doc.buildingId) {
                        const userBuildingIds = userResidences4.map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId).filter(Boolean);
                        return userBuildingIds.includes(doc.buildingId);
                    }
                }
                return false;
            });
            const enhancedDocumentRecords = filteredDocumentRecords.map((doc) => ({
                ...doc,
                title: doc.name,
                // Map database 'name' field to frontend 'title' field
                category: doc.documentType,
                // Map database 'documentType' to frontend 'category'
                documentCategory: doc.buildingId ? "building" : "resident",
                entityType: doc.buildingId ? "building" : "residence",
                entityId: doc.buildingId || doc.residenceId,
                uploadDate: doc.createdAt,
                // For backward compatibility
                fileUrl: doc.filePath ? `/api/documents/${doc.id}/file` : void 0
                // Generate file URL if file exists
            }));
            allDocumentRecords.push(...enhancedDocumentRecords);
            allDocumentRecords.sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime());
            const response = {
                documents: allDocumentRecords,
                total: allDocumentRecords.length,
                buildingCount: allDocumentRecords.filter((d) => d.documentCategory === "building").length,
                residentCount: allDocumentRecords.filter((d) => d.documentCategory === "resident").length,
                legacyCount: allDocumentRecords.filter((d) => d.documentCategory === "legacy").length
            };
            logSecurityEvent("DOCUMENT_LIST_ACCESS", user, true, void 0, {
                documentsReturned: allDocumentRecords.length,
                filters: { documentType, specificResidenceId, specificBuildingId }
            });
            res.json(response);
        }
        catch (_error) {
            const errorEntry = logError("GET /api/documents", _error, req.user);
            res.status(500).json({
                message: "Failed to fetch documents",
                error_id: errorEntry.timestamp,
                debug_info: process.env.NODE_ENV === "development" ? _error.message : void 0
            });
        }
    });
    app2.get("/api/documents/:id", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type;
            const organizations3 = await storage.getUserOrganizations(userId);
            const residences2 = await storage.getUserResidences(userId);
            const buildings5 = await storage.getBuildings();
            const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : void 0;
            const residenceIds = residences2.map((ur) => ur.residenceId);
            const buildingIds = buildings5.map((b) => b.id);
            let document = null;
            const hasNewDocumentRecordMethods = "getBuildingDocumentRecord" in storage;
            if (hasNewDocumentRecordMethods) {
                if (!documentType || documentType === "building") {
                    try {
                        document = await storage.getBuildingDocumentRecord(documentId, userId, userRole, organizationId, buildingIds);
                        if (document) {
                            document.documentCategory = "building";
                            document.entityType = "building";
                            document.entityId = document.buildingId;
                        }
                    }
                    catch (e) {
                        console.warn("\u26A0\uFE0F Error fetching building document:", e);
                    }
                }
                if (!document && (!documentType || documentType === "resident")) {
                    try {
                        document = await storage.getResidentDocumentRecord(documentId, userId, userRole, organizationId, residenceIds);
                        if (document) {
                            document.documentCategory = "resident";
                            document.entityType = "residence";
                            document.entityId = document.residenceId;
                        }
                    }
                    catch (e) {
                        console.warn("\u26A0\uFE0F Error fetching resident document:", e);
                    }
                }
            }
            if (!document && !documentType) {
                try {
                    document = await storage.getDocument(documentId);
                    if (document) {
                        document.documentCategory = "legacy";
                        document.entityType = "legacy";
                        document.entityId = null;
                    }
                }
                catch (e) {
                    console.warn("\u26A0\uFE0F Error fetching legacy document:", e);
                }
            }
            if (!document) {
                return res.status(404).json({ message: "DocumentRecord not found or access denied" });
            }
            res.json(document);
        }
        catch (error) {
            console.error("\u274C Error fetching document:", error);
            res.status(500).json({ message: "Failed to fetch document" });
        }
    });
    app2.post("/api/documents", requireAuth, upload.single("file"), async (req, res) => {
        console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Starting document upload/creation`);
        console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] User: ${req.user.id} (${req.user.role})`);
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const { documentType, buildingId, residenceId, textContent, type, ...otherData } = req.body;
            console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Request details:`, {
                documentType,
                type,
                buildingId,
                residenceId,
                hasFile: !!req.file,
                hasTextContent: !!textContent,
                otherDataKeys: Object.keys(otherData),
                fileName: req.file?.originalname,
                fileSize: req.file?.size,
                mimeType: req.file?.mimetype
            });
            if (req.file) {
                console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] File details:`, {
                    originalName: req.file.originalname,
                    mimeType: req.file.mimetype,
                    size: req.file.size,
                    tempPath: req.file.path,
                    encoding: req.file.encoding
                });
            }
            console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Checking rate limit for user ${userId}`);
            const rateLimitCheck = checkUploadRateLimit(userId);
            if (!rateLimitCheck.allowed) {
                console.log(`\u274C [DOCUMENTS UPLOAD] Rate limit exceeded for user ${userId}: ${rateLimitCheck.error}`);
                logSecurityEvent("UPLOAD_RATE_LIMIT_EXCEEDED", user, false, void 0, { error: rateLimitCheck.error });
                return res.status(429).json({ message: rateLimitCheck.error });
            }
            console.log(`\u2705 [DOCUMENTS UPLOAD] Rate limit check passed for user ${userId}`);
            console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Checking permissions for role: ${userRole}`);
            if (!["admin", "manager", "resident"].includes(userRole)) {
                console.log(`\u274C [DOCUMENTS UPLOAD] Insufficient permissions for role: ${userRole}`);
                logSecurityEvent("UNAUTHORIZED_UPLOAD_ATTEMPT", user, false, void 0, { requiredRoles: ["admin", "manager", "resident"] });
                return res.status(403).json({ message: "Insufficient permissions to create documents" });
            }
            console.log(`\u2705 [DOCUMENTS UPLOAD] Permission check passed for role: ${userRole}`);
            const isTextDocumentRecord = !req.file && textContent;
            const isFileDocumentRecord = !!req.file;
            const isMetadataDocumentRecord = !req.file && !textContent && (otherData.title || otherData.name);
            console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Document type determination:`, {
                isTextDocument: isTextDocumentRecord,
                isFileDocument: isFileDocumentRecord,
                isMetadataDocument: isMetadataDocumentRecord,
                hasTitle: !!otherData.title,
                hasName: !!otherData.name,
                hasTextContent: !!textContent
            });
            if (!isTextDocumentRecord && !isFileDocumentRecord && !isMetadataDocumentRecord) {
                console.log(`\u274C [DOCUMENTS UPLOAD] Invalid document request - no file, text, or metadata provided`);
                return res.status(400).json({ message: "Either a file, text content, or document title/name is required" });
            }
            if (isTextDocumentRecord) {
                const documentData = {
                    name: otherData.name || "Untitled DocumentRecord",
                    description: otherData.description || textContent.substring(0, 200) + (textContent.length > 200 ? "..." : ""),
                    documentType: documentType || "other",
                    filePath: `text-documents/${userId}/${(0, uuid_1.v4)()}.txt`,
                    // Virtual path for text documents
                    isVisibleToTenants: otherData.isVisibleToTenants === "true" || otherData.isVisibleToTenants === true,
                    residenceId: residenceId || void 0,
                    buildingId: buildingId || void 0,
                    uploadedById: userId
                };
                if (buildingId && userRole === "manager") {
                    const organizations3 = await storage.getUserOrganizations(userId);
                    const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : void 0;
                    const building = await storage.getBuilding(buildingId);
                    if (!building || building.organizationId !== organizationId) {
                        return res.status(403).json({ message: "Cannot assign document to building outside your organization" });
                    }
                }
                if (residenceId && userRole === "resident") {
                    const residences2 = await storage.getUserResidences(userId);
                    const residenceIds = residences2.map((ur) => ur.residenceId);
                    if (!residenceIds.includes(residenceId)) {
                        return res.status(403).json({ message: "Cannot assign document to residence you do not own" });
                    }
                }
                let documentRecordType;
                if (buildingId && !residenceId) {
                    documentRecordType = "building";
                }
                else if (residenceId && !buildingId) {
                    documentRecordType = "resident";
                }
                else {
                    return res.status(400).json({
                        message: "Must provide either buildingId (for building documents) or residenceId (for resident documents)"
                    });
                }
                let fileName;
                try {
                    const textFilePath = path_4.default.join(process.cwd(), "uploads", documentRecordType);
                    if (!fs_3.default.existsSync(textFilePath)) {
                        fs_3.default.mkdirSync(textFilePath, { recursive: true });
                    }
                    fileName = `${(0, uuid_1.v4)()}-text-document.txt`;
                    const fullPath = path_4.default.join(textFilePath, fileName);
                    fs_3.default.writeFileSync(fullPath, textContent, "utf8");
                }
                catch (fsError) {
                    console.error("Error saving text document to filesystem:", fsError);
                    return res.status(500).json({ message: "Failed to save text document" });
                }
                documentData.filePath = `${documentRecordType}/${fileName}`;
                const document = await storage.createDocument(documentData);
                return res.status(201).json({
                    message: "Text document created successfully",
                    document: {
                        ...document,
                        title: document.name,
                        // Map name to title for frontend compatibility
                        category: document.documentType,
                        // Map documentType to category for frontend compatibility
                        documentCategory: buildingId ? "building" : "resident",
                        entityType: buildingId ? "building" : "residence",
                        entityId: buildingId || residenceId
                    }
                });
            }
            if (isMetadataDocumentRecord) {
                const documentData = {
                    name: otherData.title || otherData.name || "Untitled Document",
                    description: otherData.description || "",
                    documentType: otherData.category || documentType || "other",
                    filePath: `metadata-documents/${userId}/${(0, uuid_1.v4)()}`,
                    // Placeholder path for metadata-only documents
                    isVisibleToTenants: otherData.isVisibleToTenants === "true" || otherData.isVisibleToTenants === true || false,
                    residenceId: residenceId || void 0,
                    buildingId: buildingId || void 0,
                    uploadedById: userId
                };
                if (!buildingId && !residenceId) {
                    return res.status(400).json({
                        message: "Must provide either buildingId (for building documents) or residenceId (for resident documents)"
                    });
                }
                if (buildingId && residenceId) {
                    return res.status(400).json({
                        message: "Cannot provide both buildingId and residenceId"
                    });
                }
                if (buildingId && userRole === "manager") {
                    const organizations3 = await storage.getUserOrganizations(userId);
                    const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : void 0;
                    const building = await storage.getBuilding(buildingId);
                    if (!building || building.organizationId !== organizationId) {
                        return res.status(403).json({ message: "Cannot assign document to building outside your organization" });
                    }
                }
                if (residenceId && userRole === "resident") {
                    const residences2 = await storage.getUserResidences(userId);
                    const residenceIds = residences2.map((ur) => ur.residenceId);
                    if (!residenceIds.includes(residenceId)) {
                        return res.status(403).json({ message: "Cannot assign document to residence you do not own" });
                    }
                }
                const document = await storage.createDocument(documentData);
                return res.status(201).json({
                    message: "Document created successfully",
                    document: {
                        ...document,
                        title: document.name,
                        // Map name to title for frontend compatibility
                        category: document.documentType,
                        // Map documentType to category for frontend compatibility
                        documentCategory: buildingId ? "building" : "resident",
                        entityType: buildingId ? "building" : "residence",
                        entityId: buildingId || residenceId,
                        fileUrl: void 0
                        // No file URL for metadata-only documents
                    }
                });
            }
            console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Starting file document processing`);
            let finalDocumentRecordType;
            if (buildingId && !residenceId) {
                finalDocumentRecordType = "building";
                console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Determined document type: BUILDING (ID: ${buildingId})`);
            }
            else if (residenceId && !buildingId) {
                finalDocumentRecordType = "resident";
                console.log(`\u{1F4C4} [DOCUMENTS UPLOAD] Determined document type: RESIDENCE (ID: ${residenceId})`);
            }
            else if (buildingId && residenceId) {
                console.log(`\u274C [DOCUMENTS UPLOAD] Both buildingId and residenceId provided: ${buildingId}, ${residenceId}`);
                return res.status(400).json({
                    message: "Cannot provide both buildingId and residenceId"
                });
            }
            else {
                console.log(`\u274C [DOCUMENTS UPLOAD] No buildingId or residenceId provided`);
                return res.status(400).json({
                    message: "Must provide either buildingId (for building documents) or residenceId (for resident documents)"
                });
            }
            if (finalDocumentRecordType === "building") {
                console.log(`\u{1F3E2} [BUILDING UPLOAD] Processing building document for building ID: ${buildingId}`);
                if (!buildingId) {
                    console.log(`\u274C [BUILDING UPLOAD] Missing buildingId`);
                    return res.status(400).json({ message: "buildingId is required for building documents" });
                }
                let filePath;
                let fileName;
                if (req.file) {
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] Processing file upload for building ${buildingId}`);
                    fileName = `${(0, uuid_1.v4)()}-${req.file.originalname}`;
                    const permanentDir = path_4.default.join(process.cwd(), "uploads", "buildings", buildingId);
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] File paths:`, {
                        originalName: req.file.originalname,
                        newFileName: fileName,
                        tempPath: req.file.path,
                        permanentDir,
                        directoryExists: fs_3.default.existsSync(permanentDir)
                    });
                    if (!fs_3.default.existsSync(permanentDir)) {
                        console.log(`\u{1F3E2} [BUILDING UPLOAD] Creating directory: ${permanentDir}`);
                        fs_3.default.mkdirSync(permanentDir, { recursive: true });
                    }
                    const permanentPath = path_4.default.join(permanentDir, fileName);
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] Copying file from ${req.file.path} to ${permanentPath}`);
                    fs_3.default.copyFileSync(req.file.path, permanentPath);
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] Cleaning up temporary file: ${req.file.path}`);
                    fs_3.default.unlinkSync(req.file.path);
                    filePath = `buildings/${buildingId}/${fileName}`;
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] File successfully moved to: ${filePath}`);
                }
                else {
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] No file provided, creating placeholder path`);
                    filePath = `temp-path-${Date.now()}`;
                }
                const dataToValidate = {
                    ...otherData,
                    buildingId,
                    uploadedById: userId,
                    filePath,
                    fileName,
                    fileSize: req.file?.size,
                    mimeType: req.file?.mimetype,
                    documentType: documentType || type || "other"
                    // Default to 'other' if not provided
                };
                console.log(`\u{1F3E2} [BUILDING UPLOAD] Data to validate:`, {
                    buildingId,
                    uploadedById: userId,
                    filePath,
                    fileName,
                    fileSize: req.file?.size,
                    mimeType: req.file?.mimetype,
                    documentType: documentType || type || "other",
                    otherDataKeys: Object.keys(otherData)
                });
                let validatedData;
                try {
                    validatedData = insertDocumentSchema.parse(dataToValidate);
                    console.log(`\u2705 [BUILDING UPLOAD] Document validation successful for building ${buildingId}`);
                }
                catch (validationError) {
                    console.log(`\u274C [BUILDING UPLOAD] Document validation failed for building ${buildingId}:`, validationError);
                    return res.status(400).json({
                        message: "Validation failed",
                        error: validationError.message || "Invalid data",
                        details: validationError.issues || validationError
                    });
                }
                console.log(`\u{1F3E2} [BUILDING UPLOAD] Checking permissions for role: ${userRole}`);
                if (userRole === "manager") {
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] Manager permission check for building ${buildingId}`);
                    const organizations3 = await storage.getUserOrganizations(userId);
                    const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : void 0;
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] Manager organization: ${organizationId}`);
                    const building = await storage.getBuilding(buildingId);
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] Building organization: ${building?.organizationId}`);
                    if (!building || building.organizationId !== organizationId) {
                        console.log(`\u274C [BUILDING UPLOAD] Manager permission denied - organization mismatch`);
                        return res.status(403).json({ message: "Cannot assign document to building outside your organization" });
                    }
                    console.log(`\u2705 [BUILDING UPLOAD] Manager permission check passed`);
                }
                if (userRole === "resident") {
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] Resident permission check for building ${buildingId}`);
                    const residences2 = await storage.getUserResidences(userId);
                    console.log(`\u{1F3E2} [BUILDING UPLOAD] User residences count: ${residences2.length}`);
                    const hasResidenceInBuilding = await Promise.all(residences2.map(async (ur) => {
                        const residence = await storage.getResidence(ur.residenceId);
                        const isInBuilding = residence && residence.buildingId === buildingId;
                        console.log(`\u{1F3E2} [BUILDING UPLOAD] Residence ${ur.residenceId} in building ${buildingId}: ${isInBuilding}`);
                        return isInBuilding;
                    }));
                    if (!hasResidenceInBuilding.some(Boolean)) {
                        console.log(`\u274C [BUILDING UPLOAD] Resident permission denied - no residence in building`);
                        return res.status(403).json({ message: "Cannot assign document to building where you have no residence" });
                    }
                    console.log(`\u2705 [BUILDING UPLOAD] Resident permission check passed`);
                }
                const unifiedDocument = {
                    name: validatedData.name || "Untitled",
                    description: validatedData.description,
                    documentType: validatedData.documentType,
                    filePath: validatedData.filePath || `temp-path-${Date.now()}`,
                    isVisibleToTenants: validatedData.isVisibleToTenants || false,
                    residenceId: void 0,
                    buildingId: validatedData.buildingId,
                    uploadedById: validatedData.uploadedById
                };
                console.log(`\u{1F3E2} [BUILDING UPLOAD] Creating document in database:`, {
                    name: unifiedDocument.name,
                    documentType: unifiedDocument.documentType,
                    filePath: unifiedDocument.filePath,
                    buildingId: unifiedDocument.buildingId,
                    uploadedById: unifiedDocument.uploadedById
                });
                const document = await storage.createDocument(unifiedDocument);
                console.log(`\u2705 [BUILDING UPLOAD] Document created successfully with ID: ${document.id}`);
                res.status(201).json({
                    ...document,
                    documentCategory: "building",
                    entityType: "building",
                    entityId: document.buildingId
                });
            }
            else if (finalDocumentRecordType === "resident") {
                console.log(`\u{1F3E0} [RESIDENCE UPLOAD] Processing residence document for residence ID: ${residenceId}`);
                if (!residenceId) {
                    console.log(`\u274C [RESIDENCE UPLOAD] Missing residenceId`);
                    return res.status(400).json({ message: "residenceId is required for resident documents" });
                }
                let filePath;
                let fileName;
                if (req.file) {
                    console.log(`\u{1F3E0} [RESIDENCE UPLOAD] Processing file upload for residence ${residenceId}`);
                    fileName = `${(0, uuid_1.v4)()}-${req.file.originalname}`;
                    const permanentDir = path_4.default.join(process.cwd(), "uploads", "residences", residenceId);
                    console.log(`\u{1F3E0} [RESIDENCE UPLOAD] File paths:`, {
                        originalName: req.file.originalname,
                        newFileName: fileName,
                        tempPath: req.file.path,
                        permanentDir,
                        directoryExists: fs_3.default.existsSync(permanentDir)
                    });
                    if (!fs_3.default.existsSync(permanentDir)) {
                        console.log(`\u{1F3E0} [RESIDENCE UPLOAD] Creating directory: ${permanentDir}`);
                        fs_3.default.mkdirSync(permanentDir, { recursive: true });
                    }
                    const permanentPath = path_4.default.join(permanentDir, fileName);
                    console.log(`\u{1F3E0} [RESIDENCE UPLOAD] Copying file from ${req.file.path} to ${permanentPath}`);
                    fs_3.default.copyFileSync(req.file.path, permanentPath);
                    console.log(`\u{1F3E0} [RESIDENCE UPLOAD] Cleaning up temporary file: ${req.file.path}`);
                    fs_3.default.unlinkSync(req.file.path);
                    filePath = `residences/${residenceId}/${fileName}`;
                    console.log(`\u{1F3E0} [RESIDENCE UPLOAD] File successfully moved to: ${filePath}`);
                }
                else {
                    console.log(`\u{1F3E0} [RESIDENCE UPLOAD] No file provided, creating placeholder path`);
                    filePath = `temp-path-${Date.now()}`;
                }
                const dataToValidate = {
                    ...otherData,
                    residenceId,
                    uploadedById: userId,
                    filePath,
                    fileName,
                    fileSize: req.file?.size,
                    mimeType: req.file?.mimetype,
                    documentType: documentType || type || "other"
                    // Default to 'other' if not provided
                };
                console.log("\u{1F50D} Residence document validation debug:", {
                    dataToValidate,
                    documentType,
                    otherDataKeys: Object.keys(otherData),
                    hasFile: !!req.file
                });
                let validatedData;
                try {
                    validatedData = insertDocumentSchema.parse(dataToValidate);
                    console.log("\u2705 Residence document validation SUCCESS");
                }
                catch (validationError) {
                    console.log("\u274C Residence document validation ERROR:", validationError);
                    return res.status(400).json({
                        message: "Validation failed",
                        error: validationError.message || "Invalid data",
                        details: validationError.issues || validationError
                    });
                }
                if (userRole === "manager") {
                    const organizations3 = await storage.getUserOrganizations(userId);
                    const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : void 0;
                    const residence = await storage.getResidence(residenceId);
                    if (residence) {
                        const building = await storage.getBuilding(residence.buildingId);
                        if (!building || building.organizationId !== organizationId) {
                            return res.status(403).json({ message: "Cannot assign document to residence outside your organization" });
                        }
                    }
                    else {
                        return res.status(404).json({ message: "Residence not found" });
                    }
                }
                if (userRole === "resident") {
                    const residences2 = await storage.getUserResidences(userId);
                    const residenceIds = residences2.map((ur) => ur.residenceId);
                    if (!residenceIds.includes(residenceId)) {
                        return res.status(403).json({ message: "Cannot assign document to residence you do not own" });
                    }
                }
                const unifiedDocument = {
                    name: validatedData.name || "Untitled",
                    description: validatedData.description,
                    documentType: validatedData.documentType,
                    filePath: validatedData.filePath || `temp-path-${Date.now()}`,
                    isVisibleToTenants: validatedData.isVisibleToTenants || false,
                    residenceId: validatedData.residenceId,
                    buildingId: void 0,
                    uploadedById: validatedData.uploadedById
                };
                const document = await storage.createDocument(unifiedDocument);
                console.log("\u{1F4DD} Created resident document:", document);
                console.log("\u{1F4DD} DocumentRecord ID:", document.id);
                const response = {
                    ...document,
                    documentCategory: "resident",
                    entityType: "residence",
                    entityId: document.residenceId
                };
                console.log("\u{1F4E4} Sending response:", response);
                res.status(201).json(response);
            }
            else {
                return res.status(400).json({
                    message: 'Invalid documentType. Must be either "building" or "resident"'
                });
            }
        }
        catch (_error) {
            if (req.file?.path) {
                try {
                    fs_3.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.warn("\u26A0\uFE0F Failed to cleanup temporary file:", cleanupError);
                }
            }
            console.error("\u274C Error creating document:", _error);
            if (_error instanceof zod_12.z.ZodError) {
                return res.status(400).json({
                    message: "Invalid document data",
                    errors: _error.issues
                });
            }
            res.status(500).json({ message: "Failed to create document" });
        }
    });
    app2.put("/api/documents/:id", requireAuth, upload.single("file"), async (req, res) => {
        console.log(`\u{1F4DD} [DOCUMENT UPDATE] Starting update for document ID: ${req.params.id}`);
        console.log(`\u{1F4DD} [DOCUMENT UPDATE] User: ${req.user.id} (${req.user.role})`);
        console.log(`\u{1F4DD} [DOCUMENT UPDATE] Body:`, req.body);
        console.log(`\u{1F4DD} [DOCUMENT UPDATE] File provided:`, !!req.file);
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const existingDocument = await storage.getDocuments({ documentId }).then((docs) => docs[0]);
            if (!existingDocument) {
                console.log(`\u274C [DOCUMENT UPDATE] Document not found: ${documentId}`);
                return res.status(404).json({ message: "Document not found" });
            }
            console.log(`\u{1F4DD} [DOCUMENT UPDATE] Existing document:`, {
                id: existingDocument.id,
                name: existingDocument.name,
                filePath: existingDocument.filePath,
                buildingId: existingDocument.buildingId,
                residenceId: existingDocument.residenceId
            });
            let hasAccess = false;
            if (userRole === "admin") {
                hasAccess = true;
                console.log(`\u2705 [DOCUMENT UPDATE] Admin access granted`);
            }
            else if (userRole === "manager") {
                const organizations3 = await storage.getUserOrganizations(userId);
                const buildings5 = await storage.getBuildings();
                const userOrganizations4 = organizations3.map((org) => org.organizationId);
                if (existingDocument.buildingId) {
                    const orgBuildings = buildings5.filter((building) => userOrganizations4.includes(building.organizationId || ""));
                    const orgBuildingIds = orgBuildings.map((b) => b.id);
                    hasAccess = orgBuildingIds.includes(existingDocument.buildingId);
                }
                console.log(`\u{1F4DD} [DOCUMENT UPDATE] Manager access: ${hasAccess}`);
            }
            if (!hasAccess) {
                console.log(`\u274C [DOCUMENT UPDATE] Access denied for user ${userId}`);
                return res.status(403).json({ message: "Access denied" });
            }
            const updateData = {};
            if (req.body.name)
                updateData.name = req.body.name;
            if (req.body.description !== void 0)
                updateData.description = req.body.description;
            if (req.body.documentType)
                updateData.documentType = req.body.documentType;
            if (req.body.isVisibleToTenants !== void 0) {
                updateData.isVisibleToTenants = req.body.isVisibleToTenants === "true";
            }
            console.log(`\u{1F4DD} [DOCUMENT UPDATE] Update data:`, updateData);
            if (req.file) {
                console.log(`\u{1F4DD} [DOCUMENT UPDATE] Processing file replacement:`, {
                    originalname: req.file.originalname,
                    size: req.file.size,
                    mimetype: req.file.mimetype,
                    tempPath: req.file.path
                });
                const fileValidation = validateFile(req.file);
                if (!fileValidation.isValid) {
                    try {
                        fs_3.default.unlinkSync(req.file.path);
                    }
                    catch (cleanupError) {
                        console.warn("\u26A0\uFE0F Failed to cleanup temp file:", cleanupError);
                    }
                    return res.status(400).json({ message: fileValidation.error });
                }
                const fileExtension = path_4.default.extname(req.file.originalname);
                const baseFileName = path_4.default.basename(req.file.originalname, fileExtension);
                const uniqueId = crypto_7.default.randomBytes(16).toString("hex");
                const entityType = existingDocument.buildingId ? "buildings" : "residences";
                const entityId = existingDocument.buildingId || existingDocument.residenceId;
                const documentsDir = path_4.default.join(process.cwd(), "uploads", entityType, entityId || "general");
                const uniqueFileName = `${uniqueId}-${baseFileName}${fileExtension}`;
                const finalPath = path_4.default.join(documentsDir, uniqueFileName);
                const relativePath = path_4.default.join(entityType, entityId || "general", uniqueFileName);
                if (!fs_3.default.existsSync(documentsDir)) {
                    fs_3.default.mkdirSync(documentsDir, { recursive: true });
                }
                fs_3.default.renameSync(req.file.path, finalPath);
                updateData.filePath = relativePath;
                updateData.fileName = req.file.originalname;
                updateData.fileSize = req.file.size;
                updateData.mimeType = req.file.mimetype;
                console.log(`\u2705 [DOCUMENT UPDATE] File stored at: ${finalPath}`);
                if (existingDocument.filePath) {
                    const oldFilePath = path_4.default.isAbsolute(existingDocument.filePath) ? existingDocument.filePath : path_4.default.join(process.cwd(), "uploads", existingDocument.filePath);
                    try {
                        if (fs_3.default.existsSync(oldFilePath)) {
                            fs_3.default.unlinkSync(oldFilePath);
                            console.log(`\u{1F5D1}\uFE0F [DOCUMENT UPDATE] Cleaned up old file: ${oldFilePath}`);
                        }
                    }
                    catch (cleanupError) {
                        console.warn("\u26A0\uFE0F Failed to cleanup old file:", cleanupError);
                    }
                }
            }
            const updatedDocument = await storage.updateDocument(documentId, updateData);
            if (!updatedDocument) {
                console.log(`\u274C [DOCUMENT UPDATE] Failed to update document: ${documentId}`);
                return res.status(404).json({ message: "Failed to update document" });
            }
            console.log(`\u2705 [DOCUMENT UPDATE] Document updated successfully:`, {
                id: updatedDocument.id,
                name: updatedDocument.name
            });
            updatedDocument.documentCategory = updatedDocument.buildingId ? "building" : "resident";
            updatedDocument.entityType = updatedDocument.buildingId ? "building" : "residence";
            updatedDocument.entityId = updatedDocument.buildingId || updatedDocument.residenceId;
            res.json(updatedDocument);
        }
        catch (_error) {
            if (req.file?.path) {
                try {
                    fs_3.default.unlinkSync(req.file.path);
                    console.log(`\u{1F5D1}\uFE0F [DOCUMENT UPDATE] Cleaned up temp file on error: ${req.file.path}`);
                }
                catch (cleanupError) {
                    console.warn("\u26A0\uFE0F Failed to cleanup temporary file:", cleanupError);
                }
            }
            console.error("\u274C Error updating document:", _error);
            if (_error instanceof zod_12.z.ZodError) {
                return res.status(400).json({
                    message: "Invalid document data",
                    errors: _error.issues
                });
            }
            res.status(500).json({ message: "Failed to update document" });
        }
    });
    app2.get("/api/documents/security/audit-log", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            if (user.role !== "admin") {
                logSecurityEvent("UNAUTHORIZED_AUDIT_ACCESS", user, false);
                return res.status(403).json({ message: "Access denied. Admin privileges required." });
            }
            const limit = Math.min(parseInt(req.query.limit) || 50, 100);
            const offset = parseInt(req.query.offset) || 0;
            const paginatedLogs = auditLog.slice(offset, offset + limit);
            logSecurityEvent("AUDIT_LOG_ACCESS", user, true, void 0, { limit, offset });
            res.json({
                events: paginatedLogs,
                total: auditLog.length,
                limit,
                offset
            });
        }
        catch (error) {
            console.error("Error accessing audit log:", error);
            res.status(500).json({ message: "Failed to retrieve audit log" });
        }
    });
    app2.delete("/api/documents/:id", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type;
            const organizations3 = await storage.getUserOrganizations(userId);
            const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : void 0;
            let deleted = false;
            try {
                deleted = await storage.deleteDocument(documentId);
            }
            catch (e) {
                console.warn("\u26A0\uFE0F Error deleting document:", e);
            }
            if (!deleted) {
                return res.status(404).json({ message: "DocumentRecord not found or access denied" });
            }
            res.status(204).send();
        }
        catch (error) {
            console.error("\u274C Error in document deletion:", error);
            res.status(500).json({ message: "Failed to delete document" });
        }
    });
    app2.post("/api/documents/:id/upload", requireAuth, upload.single("file"), async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const { documentType = "resident", residenceId, ...otherData } = req.body;
            console.log("\u{1F4E4} Upload request received:", {
                documentId,
                userId,
                userRole,
                hasFile: !!req.file,
                fileInfo: req.file ? {
                    fieldname: req.file.fieldname,
                    originalname: req.file.originalname,
                    encoding: req.file.encoding,
                    mimetype: req.file.mimetype,
                    size: req.file.size,
                    path: req.file.path
                } : null,
                bodyKeys: Object.keys(req.body),
                contentType: req.headers["content-type"]
            });
            if (!["admin", "manager", "resident"].includes(userRole)) {
                return res.status(403).json({ message: "Insufficient permissions to create documents" });
            }
            if (!req.file) {
                console.error("\u274C No file received in upload request");
                return res.status(400).json({ message: "File is required for upload" });
            }
            const documents3 = await storage.getDocuments({
                userId,
                userRole
            });
            const existingDocument = documents3.find((doc) => doc.id === documentId);
            if (!existingDocument) {
                return res.status(404).json({ message: "DocumentRecord not found" });
            }
            let organizationId;
            if (existingDocument.buildingId) {
                const building = await storage.getBuilding(existingDocument.buildingId);
                if (!building) {
                    return res.status(404).json({ message: "Building not found" });
                }
                organizationId = building.organizationId;
            }
            else if (existingDocument.residenceId) {
                const residence = await storage.getResidence(existingDocument.residenceId);
                if (!residence) {
                    return res.status(404).json({ message: "Residence not found" });
                }
                const building = await storage.getBuilding(residence.buildingId);
                if (!building) {
                    return res.status(404).json({ message: "Building not found" });
                }
                organizationId = building.organizationId;
            }
            else {
                return res.status(400).json({ message: "DocumentRecord must be associated with a building or residence" });
            }
            const updatedDocument = await storage.updateDocument(documentId, {
                filePath: `prod_org_${organizationId}/${req.file.originalname}`,
                name: req.file.originalname
                // Remove mimeType as it's not in schema
            });
            if (req.file && req.file.path && fs_3.default.existsSync(req.file.path)) {
                fs_3.default.unlinkSync(req.file.path);
            }
            res.status(200).json({
                document: updatedDocument,
                message: "File uploaded successfully"
            });
        }
        catch (error) {
            const errorTimestamp = ( /* @__PURE__ */new Date()).toISOString();
            console.error(`[${errorTimestamp}] Error type:`, error.constructor.name);
            console.error(`[${errorTimestamp}] Error message:`, error.message);
            console.error(`[${errorTimestamp}] Error stack:`, error.stack);
            if (req.file && req.file.path && fs_3.default.existsSync(req.file.path)) {
                try {
                    fs_3.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.error(`[${errorTimestamp}] Error cleaning up file:`, cleanupError);
                }
            }
            if (error.name === "ZodError") {
                return res.status(400).json({
                    message: "Validation error",
                    errors: error.errors
                });
            }
            res.status(500).json({ message: "Failed to upload document" });
        }
    });
    app2.post("/api/documents/upload", requireAuth, upload.single("file"), async (req, res) => {
        const timestamp10 = ( /* @__PURE__ */new Date()).toISOString();
        console.log(`[${timestamp10}] \u{1F4CB} POST /api/documents/upload - Starting upload`, {
            hasFile: !!req.file,
            fileName: req.file?.originalname,
            fileSize: req.file?.size,
            body: req.body,
            userId: req.user?.id
        });
        try {
            if (!req.file) {
                return res.status(400).json({ message: "No file uploaded" });
            }
            const formData = {
                name: req.body.name,
                description: req.body.description || "",
                documentType: req.body.documentType || req.body.type,
                // Handle both field names
                isVisibleToTenants: req.body.isVisibleToTenants === "true",
                residenceId: req.body.residenceId || void 0,
                buildingId: req.body.buildingId || void 0,
                attachedToType: req.body.attachedToType || void 0,
                attachedToId: req.body.attachedToId || void 0
            };
            if (process.env.NODE_ENV === "production") {
                console.log("[PROD DEBUG] Form data before validation:", formData);
            }
            const validatedData = uploadDocumentRecordSchema.parse(formData);
            console.log(`[${timestamp10}] \u{1F50D} VALIDATION DEBUG: Form data before validation:`, formData);
            console.log(`[${timestamp10}] \u{1F50D} VALIDATION DEBUG: Validated data:`, {
                ...validatedData,
                hasAttachedToType: !!validatedData.attachedToType,
                hasAttachedToId: !!validatedData.attachedToId
            });
            if (process.env.NODE_ENV === "production") {
                console.log("[PROD DEBUG] Form data validation passed:", validatedData);
            }
            const userId = req.user?.id;
            if (!userId) {
                return res.status(401).json({ message: "User not authenticated" });
            }
            console.log("\u{1F4C1} GCS disabled - skipping bucket configuration check");
            const fileExtension = path_4.default.extname(req.file.originalname);
            const baseFileName = path_4.default.basename(req.file.originalname, fileExtension);
            const uniqueFileName = `${(0, uuid_1.v4)()}-${baseFileName}${fileExtension}`;
            let filePath;
            if (validatedData.residenceId) {
                filePath = `residences/${validatedData.residenceId}/${uniqueFileName}`;
            }
            else if (validatedData.buildingId) {
                filePath = `buildings/${validatedData.buildingId}/${uniqueFileName}`;
            }
            else {
                filePath = `general/${uniqueFileName}`;
            }
            console.log("\u{1F4C1} GCS disabled - using local storage for all document operations");
            try {
                const localStoragePath = path_4.default.join(process.cwd(), "uploads");
                try {
                    if (!fs_3.default.existsSync(localStoragePath)) {
                        fs_3.default.mkdirSync(localStoragePath, { recursive: true });
                        console.log(`\u{1F4C1} Created uploads directory: ${localStoragePath}`);
                    }
                }
                catch (dirError) {
                    console.error("Failed to create uploads directory:", dirError);
                    throw new Error("Cannot create uploads directory - check permissions");
                }
                const localFilePath = path_4.default.join(localStoragePath, filePath);
                const localFileDir = path_4.default.dirname(localFilePath);
                try {
                    if (!fs_3.default.existsSync(localFileDir)) {
                        fs_3.default.mkdirSync(localFileDir, { recursive: true });
                        console.log(`\u{1F4C1} Created subdirectory: ${localFileDir}`);
                    }
                }
                catch (subdirError) {
                    console.error("Failed to create file subdirectory:", subdirError);
                    throw new Error("Cannot create file directory - check permissions");
                }
                try {
                    fs_3.default.copyFileSync(req.file.path, localFilePath);
                    console.log(`\u{1F4C1} File saved successfully at ${localFilePath}`);
                }
                catch (copyError) {
                    console.error("Failed to copy file:", copyError);
                    throw new Error("Cannot save file - check disk space and permissions");
                }
            }
            catch (localError) {
                console.error("Local storage error:", localError);
                throw new Error("Failed to save file locally");
            }
            const documentData = {
                name: validatedData.name,
                description: validatedData.description,
                documentType: validatedData.documentType,
                filePath,
                isVisibleToTenants: validatedData.isVisibleToTenants,
                residenceId: validatedData.residenceId,
                buildingId: validatedData.buildingId,
                uploadedById: userId,
                attachedToType: validatedData.attachedToType,
                attachedToId: validatedData.attachedToId
            };
            console.log(`[${timestamp10}] \u{1F3AF} CRITICAL: About to create document in database:`, {
                name: documentData.name,
                type: documentData.documentType,
                buildingId: documentData.buildingId,
                residenceId: documentData.residenceId,
                uploadedById: documentData.uploadedById,
                attachedToType: documentData.attachedToType,
                attachedToId: documentData.attachedToId
            });
            const newDocument = await storage.createDocument(documentData);
            console.log(`[${timestamp10}] \u2705 CRITICAL: DocumentRecord created successfully:`, {
                id: newDocument?.id,
                name: newDocument?.name,
                filePath: newDocument?.filePath
            });
            if (fs_3.default.existsSync(req.file.path)) {
                fs_3.default.unlinkSync(req.file.path);
            }
            res.status(201).json({
                message: "DocumentRecord uploaded successfully",
                document: newDocument
            });
        }
        catch (error) {
            const errorEntry = logError("POST /api/documents/upload", error, req.user);
            if (req.file && req.file.path && fs_3.default.existsSync(req.file.path)) {
                try {
                    fs_3.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.error("Error cleaning up temporary file:", cleanupError);
                }
            }
            if (error.name === "ZodError") {
                return res.status(400).json({
                    message: "Validation error",
                    errors: error.errors,
                    error_id: errorEntry.timestamp
                });
            }
            if (error.message && error.message.includes("Google Cloud Storage")) {
                return res.status(500).json({
                    message: "File upload failed",
                    error: "Storage service error",
                    error_id: errorEntry.timestamp
                });
            }
            if (error?.message?.includes("unique constraint") || error?.code === "23505") {
                return res.status(409).json({
                    message: "DocumentRecord path conflict - please try uploading again",
                    error: "Path already exists",
                    error_id: errorEntry.timestamp
                });
            }
            if (error.message && error.message.includes("database")) {
                return res.status(500).json({
                    message: "Failed to save document record",
                    error: "Database error",
                    error_id: errorEntry.timestamp
                });
            }
            res.status(500).json({
                message: "Internal server error",
                error: "DocumentRecord upload failed",
                error_id: errorEntry.timestamp,
                debug_info: process.env.NODE_ENV === "development" ? error.message : void 0
            });
        }
    });
    app2.get("/api/documents/:id/file", requireAuth, async (req, res) => {
        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] File download request for document ID: ${req.params.id}`);
        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] User: ${req.user.id} (${req.user.role})`);
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const isDownload = req.query.download === "true";
            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Request details:`, {
                documentId,
                userId,
                userRole,
                isDownload
            });
            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Fetching user permissions data...`);
            const organizations3 = await storage.getUserOrganizations(userId);
            const residences2 = await storage.getUserResidences(userId);
            const buildings5 = await storage.getBuildings();
            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] User permissions:`, {
                organizationsCount: organizations3.length,
                residencesCount: residences2.length,
                buildingsCount: buildings5.length
            });
            logSecurityEvent("DOCUMENT_FILE_ACCESS_ATTEMPT", user, false, documentId, {
                userRole,
                documentId,
                isDownload
            });
            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Looking for document ${documentId} in database...`);
            const allDocuments = await storage.getDocuments({});
            const document = allDocuments.find((doc) => doc.id === documentId);
            if (!document) {
                console.log(`\u274C [DOCUMENT DOWNLOAD] Document not found: ${documentId}`);
                logSecurityEvent("DOCUMENT_FILE_ACCESS_NOT_FOUND", user, false, documentId);
                return res.status(404).json({ message: "Document not found" });
            }
            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Document found:`, {
                id: document.id,
                name: document.name,
                filePath: document.filePath,
                buildingId: document.buildingId,
                residenceId: document.residenceId,
                isVisibleToTenants: document.isVisibleToTenants,
                uploadedById: document.uploadedById
            });
            const userOrganizations4 = organizations3.map((org) => org.organizationId);
            const userResidenceIds = residences2.map((ur) => ur.residenceId || ur.userResidence?.residenceId || ur.residence?.id).filter(Boolean);
            const userBuildingIds = [];
            for (const userResidence of residences2) {
                const residenceId = userResidence.residenceId;
                if (residenceId) {
                    const allResidences = await storage.getResidences();
                    const residence = allResidences.find((r) => r.id === residenceId);
                    if (residence?.buildingId) {
                        userBuildingIds.push(residence.buildingId);
                    }
                }
            }
            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Checking access permissions for role: ${userRole}`);
            let hasAccess = false;
            let accessReason = "";
            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Permission context:`, {
                userOrganizations: userOrganizations4,
                userResidenceIds,
                userBuildingIds,
                documentBuildingId: document.buildingId,
                documentResidenceId: document.residenceId,
                documentIsVisibleToTenants: document.isVisibleToTenants
            });
            if (userRole === "admin") {
                hasAccess = true;
                accessReason = "Admin has global access";
                console.log(`\u2705 [DOCUMENT DOWNLOAD] Admin granted access`);
            }
            else if (userRole === "manager") {
                console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Checking manager permissions...`);
                if (document.buildingId) {
                    console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Document is building-level, checking organization access`);
                    const orgBuildings = buildings5.filter((building) => userOrganizations4.includes(building.organizationId || ""));
                    const orgBuildingIds = orgBuildings.map((b) => b.id);
                    console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Manager organization buildings:`, {
                        userOrganizations: userOrganizations4,
                        orgBuildingIds,
                        documentBuildingId: document.buildingId
                    });
                    if (orgBuildingIds.includes(document.buildingId)) {
                        hasAccess = true;
                        accessReason = "Manager has access to organization buildings";
                        console.log(`\u2705 [DOCUMENT DOWNLOAD] Manager granted building access`);
                    }
                    else {
                        console.log(`\u274C [DOCUMENT DOWNLOAD] Manager denied building access - not in organization`);
                    }
                }
                if (document.residenceId) {
                    const allResidences = await storage.getResidences();
                    const residence = allResidences.find((r) => r.id === document.residenceId);
                    if (residence) {
                        const residenceBuilding = buildings5.find((b) => b.id === residence.buildingId);
                        if (residenceBuilding && userOrganizations4.includes(residenceBuilding.organizationId || "")) {
                            hasAccess = true;
                            accessReason = "Manager has access to organization residences";
                        }
                    }
                }
            }
            else if (userRole === "resident") {
                if (document.buildingId && userBuildingIds.includes(document.buildingId)) {
                    hasAccess = true;
                    accessReason = "Resident has access to assigned building documents";
                }
                if (document.residenceId && userResidenceIds.includes(document.residenceId)) {
                    hasAccess = true;
                    accessReason = "Resident has access to assigned residence documents";
                }
            }
            else if (userRole === "tenant") {
                if (document.isVisibleToTenants) {
                    if (document.buildingId && userBuildingIds.includes(document.buildingId)) {
                        hasAccess = true;
                        accessReason = "Tenant has access to assigned building documents marked for tenants";
                    }
                    if (document.residenceId && userResidenceIds.includes(document.residenceId)) {
                        hasAccess = true;
                        accessReason = "Tenant has access to assigned residence documents marked for tenants";
                    }
                }
            }
            if (!hasAccess) {
                console.log(`\u274C [DOCUMENT DOWNLOAD] Access denied for user ${userId} to document ${documentId}`);
                logSecurityEvent("DOCUMENT_FILE_ACCESS_DENIED", user, false, documentId, {
                    userRole,
                    documentBuildingId: document.buildingId,
                    documentResidenceId: document.residenceId,
                    userBuildingIds,
                    userResidenceIds,
                    isVisibleToTenants: document.isVisibleToTenants
                });
                return res.status(403).json({ message: "Access denied" });
            }
            console.log(`\u2705 [DOCUMENT DOWNLOAD] Access granted: ${accessReason}`);
            logSecurityEvent("DOCUMENT_FILE_ACCESS_GRANTED", user, true, documentId, {
                accessReason,
                userRole,
                documentType: document.documentType
            });
            if (document.filePath) {
                console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Serving file from local storage: ${document.filePath}`);
                try {
                    let filePathToServe = document.filePath;
                    console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Resolving file path from: ${document.filePath}`);
                    if (document.filePath.startsWith("/")) {
                        filePathToServe = document.filePath;
                        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Using absolute path: ${filePathToServe}`);
                    }
                    else if (document.filePath.includes("residences/") || document.filePath.includes("buildings/") || document.filePath.includes("text-documents/") || document.filePath.includes("general/")) {
                        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Relative path detected, checking common locations...`);
                        const possiblePaths = [
                            path_4.default.join(process.cwd(), "uploads", document.filePath),
                            // Main fallback location
                            `/tmp/uploads/${document.filePath}`,
                            `/uploads/${document.filePath}`,
                            `./uploads/${document.filePath}`,
                            path_4.default.join("/tmp", document.filePath)
                        ];
                        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Checking possible paths:`, possiblePaths);
                        for (const possiblePath of possiblePaths) {
                            console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Checking path: ${possiblePath} (exists: ${fs_3.default.existsSync(possiblePath)})`);
                            if (fs_3.default.existsSync(possiblePath)) {
                                filePathToServe = possiblePath;
                                console.log(`\u2705 [DOCUMENT DOWNLOAD] Found file at: ${filePathToServe}`);
                                break;
                            }
                        }
                    }
                    else if (document.filePath.includes("tmp")) {
                        filePathToServe = document.filePath;
                        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Using temp file path: ${filePathToServe}`);
                    }
                    if (fs_3.default.existsSync(filePathToServe)) {
                        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] File found, preparing to serve: ${filePathToServe}`);
                        let fileName = document.fileName || document.name || path_4.default.basename(document.filePath);
                        if (!path_4.default.extname(fileName) && document.filePath) {
                            const originalExt = path_4.default.extname(document.filePath);
                            if (originalExt) {
                                fileName += originalExt;
                            }
                        }
                        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] File details:`, {
                            originalFileName: fileName,
                            isDownload,
                            filePathToServe,
                            fileSize: fs_3.default.statSync(filePathToServe).size
                        });
                        if (isDownload) {
                            res.setHeader("Content-Disposition", `attachment; filename="${fileName}"`);
                        }
                        else {
                            res.setHeader("Content-Disposition", `inline; filename="${fileName}"`);
                        }
                        const ext = path_4.default.extname(fileName).toLowerCase();
                        console.log(`\u{1F4E5} [DOCUMENT DOWNLOAD] Setting content type for extension: ${ext}`);
                        if (ext === ".pdf") {
                            res.setHeader("Content-Type", "application/pdf");
                        }
                        else if (ext === ".jpg" || ext === ".jpeg") {
                            res.setHeader("Content-Type", "image/jpeg");
                        }
                        else if (ext === ".png") {
                            res.setHeader("Content-Type", "image/png");
                        }
                        else if (ext === ".gif") {
                            res.setHeader("Content-Type", "image/gif");
                        }
                        else if (ext === ".doc" || ext === ".docx") {
                            res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
                        }
                        else if (ext === ".txt") {
                            res.setHeader("Content-Type", "text/plain; charset=utf-8");
                        }
                        else {
                            res.setHeader("Content-Type", "application/octet-stream");
                        }
                        if (process.env.NODE_ENV === "production") {
                            const fileStats = fs_3.default.statSync(filePathToServe);
                            res.set({
                                "Cache-Control": "no-cache, no-store, must-revalidate",
                                "Pragma": "no-cache",
                                "Expires": "0",
                                "ETag": `"${document.id}-${fileStats.mtime.getTime()}"`,
                                "Last-Modified": fileStats.mtime.toUTCString()
                            });
                        }
                        console.log(`\u2705 [DOCUMENT DOWNLOAD] Serving file: ${filePathToServe} as ${fileName}`);
                        return res.sendFile(path_4.default.resolve(filePathToServe));
                    }
                    console.log(`\u274C [DOCUMENT DOWNLOAD] File not found at filePath: ${document.filePath}`);
                    console.log(`\u274C [DOCUMENT DOWNLOAD] Tried filePath: ${filePathToServe}`);
                    return res.status(404).json({ message: "File not found on server" });
                }
                catch (fileError) {
                    console.error("\u274C [DOCUMENT DOWNLOAD] Error serving file:", fileError);
                    return res.status(500).json({ message: "Failed to serve file" });
                }
            }
            console.log(`\u274C [DOCUMENT DOWNLOAD] No file associated with document ${documentId}`);
            return res.status(404).json({ message: "No file associated with this document" });
        }
        catch (error) {
            console.error("\u274C [DOCUMENT DOWNLOAD] Error serving document file:", error);
            res.status(500).json({ message: "Failed to serve document file" });
        }
    });
}
// server/api/bugs.ts
init_storage();
init_schema();
const zod_13 = require("zod");
const multer_3 = __importDefault(require("multer"));
const path_5 = __importDefault(require("path"));
const fs_4 = __importDefault(require("fs"));
const uuid_2 = require("uuid");
var storage_config = multer_3.default.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path_5.default.join(process.cwd(), "uploads", "general");
        if (!fs_4.default.existsSync(uploadDir)) {
            fs_4.default.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueId = (0, uuid_2.v4)();
        const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, "_");
        const fileName = `${uniqueId}-${originalName}`;
        cb(null, fileName);
    }
});
var upload2 = (0, multer_3.default)({ storage: storage_config });
function registerBugRoutes(app2) {
    app2.get("/api/bugs", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            console.log(`\u{1F4CB} Fetching bugs for user ${currentUser.id} with role ${currentUser.role}`);
            const bugs2 = await storage.getBugsForUser(currentUser.id, currentUser.role, currentUser.organizationId);
            console.log(`\u2705 Found ${bugs2.length} bugs for user ${currentUser.id}`);
            bugs2.forEach((bug) => {
                if (bug.file_path) {
                    console.log(`\u{1F517} Bug ${bug.id} has file: ${bug.file_name} at ${bug.file_path}`);
                }
            });
            res.json(bugs2);
        }
        catch (error) {
            console.error("\u274C Error fetching bugs:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch bugs"
            });
        }
    });
    app2.get("/api/bugs/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Bug ID is required"
                });
            }
            const bug = await storage.getBug(id, currentUser.id, currentUser.role, currentUser.organizationId);
            if (!bug) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Bug not found or access denied"
                });
            }
            res.json(bug);
        }
        catch (error) {
            console.error("\u274C Error fetching bug:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch bug"
            });
        }
    });
    app2.post("/api/bugs", requireAuth, upload2.single("attachment"), async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const validation = insertBugSchema.safeParse({
                ...req.body,
                createdBy: currentUser.id
            });
            if (!validation.success) {
                return res.status(400).json({
                    error: "Validation failed",
                    message: "Invalid bug data",
                    details: validation.error.issues
                });
            }
            let bugData = validation.data;
            if (req.file) {
                const originalname = Buffer.from(req.file.originalname, "latin1").toString("utf8");
                console.log(`\u{1F4CE} Processing attachment for new bug:`, {
                    originalname,
                    filename: req.file.filename,
                    size: req.file.size,
                    mimetype: req.file.mimetype
                });
                bugData = {
                    ...bugData,
                    filePath: `general/${req.file.filename}`,
                    fileName: originalname,
                    fileSize: req.file.size
                };
            }
            if (req.body.file_content && !req.file) {
                try {
                    const textFilePath = path_5.default.join(process.cwd(), "uploads", "bugs");
                    if (!fs_4.default.existsSync(textFilePath)) {
                        fs_4.default.mkdirSync(textFilePath, { recursive: true });
                    }
                    const fileName = `${(0, uuid_2.v4)()}-text-document.txt`;
                    const fullPath = path_5.default.join(textFilePath, fileName);
                    fs_4.default.writeFileSync(fullPath, req.body.file_content, "utf8");
                    bugData = {
                        ...bugData,
                        filePath: `bugs/${fileName}`,
                        fileName: `${bugData.title}-text-content.txt`,
                        fileSize: Buffer.byteLength(req.body.file_content, "utf8")
                    };
                }
                catch (fsError) {
                    console.error("Error saving bug text content:", fsError);
                    return res.status(500).json({
                        error: "Internal server error",
                        message: "Failed to save text content as file"
                    });
                }
            }
            console.log(`\u{1F41B} Creating bug with data:`, {
                title: bugData.title,
                hasFile: !!bugData.filePath,
                filePath: bugData.filePath,
                fileName: bugData.fileName,
                fileSize: bugData.fileSize
            });
            const bug = await storage.createBug(bugData);
            console.log(`\u2705 Created new bug ${bug.id} by user ${currentUser.id}`);
            res.status(201).json(bug);
        }
        catch (error) {
            console.error("\u274C Error creating bug:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to create bug"
            });
        }
    });
    app2.patch("/api/bugs/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Bug ID is required"
                });
            }
            const updateSchema = zod_13.z.object({
                title: zod_13.z.string().min(1, "Title is required").max(200, "Title must not exceed 200 characters").optional(),
                description: zod_13.z.string().min(10, "Description must be at least 10 characters").max(2e3, "Description must not exceed 2000 characters").optional(),
                category: zod_13.z.enum([
                    "ui_ux",
                    "functionality",
                    "performance",
                    "data",
                    "security",
                    "integration",
                    "other"
                ]).optional(),
                page: zod_13.z.string().min(1, "Page is required").optional(),
                priority: zod_13.z.enum(["low", "medium", "high", "critical"]).optional(),
                reproductionSteps: zod_13.z.string().optional(),
                environment: zod_13.z.string().optional(),
                status: zod_13.z.enum(["new", "acknowledged", "in_progress", "resolved", "closed"]).optional(),
                assignedTo: zod_13.z.string().uuid().nullable().optional(),
                notes: zod_13.z.string().optional(),
                resolvedBy: zod_13.z.string().uuid().nullable().optional(),
                resolvedAt: zod_13.z.date().nullable().optional()
            });
            const validation = updateSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    error: "Validation failed",
                    message: "Invalid update data",
                    details: validation.error.issues
                });
            }
            const updates = validation.data;
            const bug = await storage.updateBug(id, updates, currentUser.id, currentUser.role);
            if (!bug) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Bug not found or access denied"
                });
            }
            console.log(`\u{1F4DD} Updated bug ${id} by user ${currentUser.id}`);
            res.json(bug);
        }
        catch (error) {
            console.error("\u274C Error updating bug:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update bug"
            });
        }
    });
    app2.get("/api/bugs/:id/file", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const { download } = req.query;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const bug = await storage.getBug(id, currentUser.id, currentUser.role, currentUser.organizationId);
            console.log("\u{1F41B} getBug result:", bug ? { id: bug.id, filePath: bug.filePath, fileName: bug.fileName } : "undefined");
            if (!bug) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Bug not found"
                });
            }
            const filePath = bug.filePath || bug.file_path;
            const fileName = bug.fileName || bug.file_name;
            if (!filePath) {
                return res.status(404).json({
                    error: "Not found",
                    message: "No file attached to this bug"
                });
            }
            const fullPath = path_5.default.isAbsolute(filePath) ? filePath : path_5.default.join(process.cwd(), "uploads", filePath);
            if (!fs_4.default.existsSync(fullPath)) {
                return res.status(404).json({
                    error: "Not found",
                    message: "File not found on server"
                });
            }
            const getContentType = (filename) => {
                const ext = filename.toLowerCase().split(".").pop();
                switch (ext) {
                    case "pdf":
                        return "application/pdf";
                    case "jpg":
                    case "jpeg":
                        return "image/jpeg";
                    case "png":
                        return "image/png";
                    case "gif":
                        return "image/gif";
                    case "doc":
                        return "application/msword";
                    case "docx":
                        return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                    case "txt":
                        return "text/plain";
                    default:
                        return "application/octet-stream";
                }
            };
            const contentType = getContentType(fileName || "attachment");
            res.setHeader("Content-Type", contentType);
            const encodedFilename = Buffer.from(fileName || "attachment", "utf8").toString("binary");
            if (download === "true") {
                res.setHeader("Content-Disposition", `attachment; filename="${encodedFilename}"; filename*=UTF-8''${encodeURIComponent(fileName || "attachment")}`);
            }
            else {
                res.setHeader("Content-Disposition", `inline; filename="${encodedFilename}"; filename*=UTF-8''${encodeURIComponent(fileName || "attachment")}`);
            }
            const fileStream = fs_4.default.createReadStream(fullPath);
            fileStream.pipe(res);
            fileStream.on("error", (error) => {
                console.error(`\u274C Error streaming file for bug ${id}:`, error);
                if (!res.headersSent) {
                    res.status(500).json({ error: "Failed to stream file" });
                }
            });
        }
        catch (error) {
            console.error("\u274C Error serving bug file:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to serve file"
            });
        }
    });
    app2.delete("/api/bugs/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Bug ID is required"
                });
            }
            const deleted = await storage.deleteBug(id, currentUser.id, currentUser.role);
            if (!deleted) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Bug not found or access denied"
                });
            }
            console.log(`\u{1F5D1}\uFE0F Deleted bug ${id} by user ${currentUser.id}`);
            res.status(204).send();
        }
        catch (error) {
            console.error("\u274C Error deleting bug:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to delete bug"
            });
        }
    });
}
// server/api/bills.ts
init_db();
const drizzle_orm_20 = require("drizzle-orm");
init_storage();
const zod_14 = require("zod");
// server/services/bill-generation-service.ts
init_db();
init_financial();
init_schema();
const drizzle_orm_21 = require("drizzle-orm");
const uuid_3 = require("uuid");
var BillGenerationService = class {
    /**
     * Get bills by reference (auto-generated bills linked to a parent).
     * @param parentBillId
     */
    async getBillsByReference(parentBillId) {
        try {
            const existingBills = await db.select().from(bills).where((0, drizzle_orm_21.eq)(bills.reference, parentBillId));
            return existingBills;
        }
        catch (error) {
            console.error("\u274C Error getting bills by reference:", error);
            return [];
        }
    }
    /**
     * Set end date for a recurrent bill (stops future auto-generation).
     * @param billId
     * @param endDate
     */
    async setRecurrenceEndDate(billId, endDate) {
        try {
            await db.update(bills).set({
                endDate: endDate.toISOString().split("T")[0],
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_21.eq)(bills.id, billId));
        }
        catch (error) {
            console.error("\u274C Error setting recurrence end date:", error);
            throw error;
        }
    }
    /**
     * Generate future bill instances for a recurrent bill up to 3 years.
     * Creates actual bill records that users can interact with individually.
     * @param parentBill
     */
    async generateFutureBillInstances(parentBill) {
        if (parentBill.paymentType !== "recurrent") {
            throw new Error("Only recurrent bills can generate future instances");
        }
        const startDate = new Date(parentBill.startDate);
        startDate.setFullYear(startDate.getFullYear() + 1);
        let endDate;
        if (parentBill.endDate) {
            endDate = new Date(parentBill.endDate);
        }
        else {
            endDate = /* @__PURE__ */ new Date();
            endDate.setFullYear(endDate.getFullYear() + 3);
        }
        const existingBills = await this.getBillsByReference(parentBill.id);
        if (existingBills.length > 0) {
            console.log(`\u26A0\uFE0F Found ${existingBills.length} existing auto-generated bills, skipping generation`);
            return {
                billsCreated: 0,
                generatedUntil: endDate.toISOString().split("T")[0]
            };
        }
        const generatedBills = [];
        const currentDate = new Date(startDate);
        let billsCreated = 0;
        const scheduleType = this.detectScheduleType(parentBill);
        const occurrences = this.calculateOccurrences(currentDate, endDate, scheduleType);
        for (const occurrenceDate of occurrences) {
            const paymentParts = this.calculatePaymentParts(parentBill, occurrenceDate);
            for (let partIndex = 0; partIndex < paymentParts.length; partIndex++) {
                const paymentPart = paymentParts[partIndex];
                const generatedBill = {
                    id: (0, uuid_3.v4)(),
                    buildingId: parentBill.buildingId,
                    billNumber: this.generateBillNumber(parentBill, occurrenceDate, partIndex),
                    title: this.generateBillTitle(parentBill, occurrenceDate, partIndex, paymentParts.length),
                    description: `Auto-generated from: ${parentBill.title}`,
                    category: parentBill.category,
                    vendor: parentBill.vendor || "Auto-Generated",
                    paymentType: "unique",
                    // Generated bills are unique payments
                    schedulePayment: "unique",
                    costs: [paymentPart.amount.toString()],
                    totalAmount: paymentPart.amount.toString(),
                    startDate: paymentPart.dueDate.toISOString().split("T")[0],
                    endDate: null,
                    status: "draft",
                    documentPath: null,
                    documentName: null,
                    isAiAnalyzed: false,
                    aiAnalysisData: null,
                    notes: `Auto-generated from: ${parentBill.title} (Bill #${parentBill.billNumber}). Generated as part ${partIndex + 1}/${paymentParts.length} for ${occurrenceDate.toLocaleDateString()}.`,
                    autoGenerated: true,
                    reference: parentBill.id,
                    createdBy: parentBill.createdBy,
                    createdAt: /* @__PURE__ */ new Date(),
                    updatedAt: /* @__PURE__ */ new Date()
                };
                generatedBills.push(generatedBill);
                billsCreated++;
                if (generatedBills.length >= 100) {
                    await this.insertBillsBatch(generatedBills);
                    generatedBills.length = 0;
                }
            }
        }
        if (generatedBills.length > 0) {
            await this.insertBillsBatch(generatedBills);
        }
        return {
            billsCreated,
            generatedUntil: endDate.toISOString().split("T")[0]
        };
    }
    /**
     * Handle multiple payment logic for bills.
     * Examples:
     * - 60% now, 40% in 2 months
     * - 12 monthly payments of equal amounts
     * - Quarterly payments with varying amounts.
     * @param parentBill
     * @param occurrenceDate
     */
    calculatePaymentParts(parentBill, occurrenceDate) {
        const costs = parentBill.costs.map((cost) => parseFloat(cost));
        const paymentParts = [];
        if (costs.length === 1) {
            paymentParts.push({
                amount: costs[0],
                dueDate: new Date(occurrenceDate),
                partNumber: 1
            });
        }
        else {
            costs.forEach((amount, _index) => {
                const dueDate = new Date(occurrenceDate);
                dueDate.setMonth(dueDate.getMonth() + _index);
                paymentParts.push({
                    amount,
                    dueDate,
                    partNumber: _index + 1
                });
            });
        }
        return paymentParts;
    }
    /**
     * Detect schedule type from parent bill characteristics.
     * @param parentBill
     */
    detectScheduleType(parentBill) {
        const costs = parentBill.costs || [];
        if (costs.length === 12) {
            return "monthly";
        }
        else if (costs.length === 4) {
            return "quarterly";
        }
        else if (costs.length === 2) {
            return "yearly";
        }
        else if (costs.length === 1) {
            const title = parentBill.title.toLowerCase();
            if (title.includes("annual") || title.includes("yearly")) {
                return "yearly";
            }
            else if (title.includes("quarterly")) {
                return "quarterly";
            }
            else if (title.includes("monthly")) {
                return "monthly";
            }
            else {
                return "yearly";
            }
        }
        return "yearly";
    }
    /**
     * Calculate all occurrence dates based on schedule type.
     * @param startDate
     * @param endDate
     * @param scheduleType
     */
    calculateOccurrences(startDate, endDate, scheduleType) {
        const occurrences = [];
        const currentDate = new Date(startDate);
        while (currentDate <= endDate) {
            occurrences.push(new Date(currentDate));
            switch (scheduleType) {
                case "weekly":
                    currentDate.setDate(currentDate.getDate() + 7);
                    break;
                case "monthly":
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    break;
                case "quarterly":
                    currentDate.setMonth(currentDate.getMonth() + 3);
                    break;
                case "yearly":
                    currentDate.setFullYear(currentDate.getFullYear() + 1);
                    break;
                default:
                    throw new Error(`Unknown schedule type: ${scheduleType}`);
            }
            if (occurrences.length > 1e4) {
                break;
            }
        }
        return occurrences;
    }
    /**
     * Handle custom recurring dates (yearly repetition).
     * @param startDate
     * @param endDate
     * @param customDates
     */
    calculateCustomOccurrences(startDate, endDate, customDates) {
        const occurrences = [];
        const startYear = startDate.getFullYear();
        const endYear = endDate.getFullYear();
        for (let year = startYear; year <= endYear; year++) {
            for (const dateStr of customDates) {
                const customDate = new Date(dateStr);
                customDate.setFullYear(year);
                if (customDate >= startDate && customDate <= endDate) {
                    occurrences.push(new Date(customDate));
                }
            }
        }
        return occurrences.sort((a, b) => a.getTime() - b.getTime());
    }
    /**
     * Generate unique bill number for auto-generated bills.
     * @param parentBill
     * @param occurrenceDate
     * @param partIndex
     */
    generateBillNumber(parentBill, occurrenceDate, partIndex) {
        const dateStr = occurrenceDate.toISOString().slice(0, 7);
        const partSuffix = partIndex > 0 ? `-P${partIndex + 1}` : "";
        return `${parentBill.billNumber}-${dateStr}${partSuffix}`;
    }
    /**
     * Generate descriptive title for auto-generated bills.
     * @param parentBill
     * @param occurrenceDate
     * @param partIndex
     * @param totalParts
     */
    generateBillTitle(parentBill, occurrenceDate, partIndex, totalParts) {
        const monthYear = occurrenceDate.toLocaleDateString("en-US", {
            month: "long",
            year: "numeric"
        });
        if (totalParts > 1) {
            return `${parentBill.title} ${monthYear} (Auto-Generated)`;
        }
        else {
            return `${parentBill.title} ${monthYear} (Auto-Generated)`;
        }
    }
    /**
     * Clean up existing auto-generated bills for a parent bill.
     * @param parentBillId
     */
    async cleanupExistingGeneratedBills(parentBillId) {
        try {
            const result = await db.delete(bills).where((0, drizzle_orm_21.and)((0, drizzle_orm_21.eq)(bills.reference, parentBillId), (0, drizzle_orm_21.eq)(bills.autoGenerated, true), (0, drizzle_orm_21.or)((0, drizzle_orm_21.eq)(bills.status, "draft"), (0, drizzle_orm_21.eq)(bills.status, "sent"))));
            console.log(`\u{1F5D1}\uFE0F Cleaned up auto-generated bills for parent bill ${parentBillId}`);
        }
        catch (error) {
            console.error("\u274C Error cleaning up generated bills:", error);
            throw error;
        }
    }
    /**
     * Batch insert bills for performance.
     * @param billBatch
     */
    async insertBillsBatch(billBatch) {
        try {
            await db.insert(bills).values(billBatch);
            console.log(`\u2705 Batch inserted ${billBatch.length} bills`);
        }
        catch (error) {
            console.error("\u274C Error inserting bill batch:", error);
            throw error;
        }
    }
    /**
     * Update all future auto-generated bills when the parent bill is modified.
     * @param parentBillId
     * @param updates
     */
    async updateGeneratedBillsFromParent(parentBillId, updates) {
        const generatedBills = await db.select().from(bills).where((0, drizzle_orm_21.and)((0, drizzle_orm_21.eq)(bills.reference, parentBillId), (0, drizzle_orm_21.eq)(bills.autoGenerated, true)));
        let billsUpdated = 0;
        for (const generatedBill of generatedBills) {
            const updatedFields = {};
            if (updates.title) {
                const titleParts = generatedBill.title.split(" - ");
                if (titleParts.length >= 2) {
                    updatedFields.title = `${updates.title} - ${titleParts.slice(1).join(" - ")}`;
                }
            }
            if (updates.category) {
                updatedFields.category = updates.category;
            }
            if (updates.vendor) {
                updatedFields.vendor = updates.vendor;
            }
            if (updates.notes) {
                updatedFields.notes = `Auto-generated bill - ${updates.notes}`;
            }
            if (Object.keys(updatedFields).length > 0) {
                updatedFields.updatedAt = /* @__PURE__ */ new Date();
                await db.update(bills).set(updatedFields).where((0, drizzle_orm_21.eq)(bills.id, generatedBill.id));
                billsUpdated++;
            }
        }
        return { billsUpdated };
    }
    /**
     * Delete future auto-generated bills with cascade options.
     * @param parentBillId
     * @param deleteAllFuture
     */
    async deleteGeneratedBills(parentBillId, deleteAllFuture = false) {
        console.log(`\u{1F5D1}\uFE0F Deleting generated bills for parent ${parentBillId}, deleteAllFuture: ${deleteAllFuture}`);
        let whereCondition;
        if (deleteAllFuture) {
            whereCondition = (0, drizzle_orm_21.and)((0, drizzle_orm_21.eq)(bills.reference, parentBillId), (0, drizzle_orm_21.eq)(bills.autoGenerated, true), (0, drizzle_orm_21.gte)(bills.startDate, ( /* @__PURE__ */new Date()).toISOString().split("T")[0]));
        }
        else {
            whereCondition = (0, drizzle_orm_21.and)((0, drizzle_orm_21.eq)(bills.reference, parentBillId), (0, drizzle_orm_21.eq)(bills.autoGenerated, true), (0, drizzle_orm_21.or)((0, drizzle_orm_21.eq)(bills.status, "draft"), (0, drizzle_orm_21.eq)(bills.status, "sent")));
        }
        const result = await db.delete(bills).where(whereCondition);
        const billsDeleted = result.rowCount || 0;
        return { billsDeleted };
    }
    /**
     * Get statistics about generated bills for a parent bill.
     * @param parentBillId
     */
    async getGeneratedBillsStats(parentBillId) {
        const generatedBills = await db.select().from(bills).where((0, drizzle_orm_21.and)((0, drizzle_orm_21.eq)(bills.reference, parentBillId), (0, drizzle_orm_21.eq)(bills.autoGenerated, true)));
        const today = ( /* @__PURE__ */new Date()).toISOString().split("T")[0];
        const stats = {
            totalGenerated: generatedBills.length,
            paidBills: 0,
            pendingBills: 0,
            futureBills: 0,
            totalAmount: 0,
            paidAmount: 0
        };
        for (const bill of generatedBills) {
            const billAmount = parseFloat(bill.totalAmount);
            stats.totalAmount += billAmount;
            if (bill.status === "paid") {
                stats.paidBills++;
                stats.paidAmount += billAmount;
            }
            else if (bill.startDate > today) {
                stats.futureBills++;
            }
            else {
                stats.pendingBills++;
            }
        }
        return stats;
    }
    /**
     * Mark a bill as paid and update related tracking.
     * @param billId
     * @param paymentDate
     */
    async markBillAsPaid(billId, paymentDate) {
        const paymentReceivedDate = paymentDate || /* @__PURE__ */ new Date();
        await db.update(bills).set({
            status: "paid",
            notes: `Payment confirmed on ${paymentReceivedDate.toLocaleDateString()}`,
            updatedAt: /* @__PURE__ */ new Date()
        }).where((0, drizzle_orm_21.eq)(bills.id, billId));
    }
    /**
     * Get a system user for automated operations.
     */
    async getSystemUser() {
        const systemUsers = await db.select({ id: users.id }).from(users).where((0, drizzle_orm_21.eq)(users.role, "admin")).limit(1);
        if (systemUsers.length === 0) {
            throw new Error("No active users found for system operations");
        }
        return systemUsers[0];
    }
};
var billGenerationService = new BillGenerationService();
// server/services/money-flow-automation.ts
var moneyFlowAutomationService = {
    async generateForBill(billId) {
        return 0;
    },
    async generateForResidence(residenceId) {
        return 0;
    },
    async getMoneyFlowStatistics() {
        return {
            totalEntries: 0,
            billEntries: 0,
            residenceEntries: 0,
            lastGeneratedAt: null
        };
    }
};
// server/services/monthly-budget-service.ts
init_db();
init_schema();
const drizzle_orm_22 = require("drizzle-orm");
var { monthlyBudgets: monthlyBudgets2, moneyFlow, buildings: buildings2, users: users3 } = schema_exports;
var MonthlyBudgetService = class {
    constructor() {
        this.YEARS_TO_PROJECT = 3;
    }
    /**
     * Populate monthly budget entries for all buildings.
     * Creates entries from construction date to 3 years in the future.
     */
    async populateAllMonthlyBudgets() {
        let budgetsCreated = 0;
        let buildingsProcessed = 0;
        try {
            const activeBuildings = await db.select().from(buildings2).where((0, drizzle_orm_22.eq)(buildings2.isActive, true));
            for (const building of activeBuildings) {
                try {
                    const buildingBudgets = await this.populateBudgetsForBuilding(building);
                    budgetsCreated += buildingBudgets;
                    buildingsProcessed++;
                    console.log(`\u2705 Created ${buildingBudgets} budget entries for building: ${building.name}`);
                }
                catch (error) {
                    console.error(`\u274C Error processing building ${building.name}:`, error);
                }
            }
            console.log(`\u{1F4CA} Monthly budget population completed:
        - Buildings processed: ${buildingsProcessed}
        - Budget entries created: ${budgetsCreated}`);
            return {
                budgetsCreated,
                buildingsProcessed
            };
        }
        catch (error) {
            console.error("\u274C Error populating monthly budgets:", error);
            throw error;
        }
    }
    /**
     * Populate monthly budget entries for a specific building.
     * @param building
     */
    async populateBudgetsForBuilding(building) {
        const constructionDate = /* @__PURE__ */ new Date();
        if (building.yearBuilt) {
            constructionDate.setFullYear(building.yearBuilt, 0, 1);
        }
        else {
            constructionDate.setFullYear(constructionDate.getFullYear(), 0, 1);
        }
        const endDate = /* @__PURE__ */ new Date();
        endDate.setFullYear(endDate.getFullYear() + this.YEARS_TO_PROJECT, 11, 31);
        console.log(`\u{1F4C5} Processing building ${building.name} from ${constructionDate.toISOString().slice(0, 10)} to ${endDate.toISOString().slice(0, 10)}`);
        const { incomeCategories, expenseCategories } = await this.getCategoriesForBuilding(building.id);
        console.log(`\u{1F4CA} Found ${incomeCategories.length} income categories and ${expenseCategories.length} expense categories`);
        await this.cleanupExistingBudgets(building.id);
        const budgetEntries = [];
        const systemUser = await this.getSystemUser();
        const currentDate = new Date(constructionDate);
        while (currentDate <= endDate) {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth() + 1;
            const { incomes, spendings } = await this.getAggregatedAmountsForMonth(building.id, year, month, incomeCategories, expenseCategories);
            budgetEntries.push({
                buildingId: building.id,
                year,
                month,
                incomeTypes: incomeCategories,
                incomes,
                // Keep as number array
                spendingTypes: expenseCategories,
                spendings,
                // Keep as number array
                approved: false,
                approvedBy: void 0,
                originalBudgetId: void 0
            });
            currentDate.setMonth(currentDate.getMonth() + 1);
            if (budgetEntries.length > 5e3) {
                break;
            }
        }
        if (budgetEntries.length > 0) {
            await this.insertBudgetEntriesInBatches(budgetEntries);
        }
        return budgetEntries.length;
    }
    /**
     * Get distinct income and expense categories from money_flow for a specific building.
     * @param buildingId
     */
    async getCategoriesForBuilding(buildingId) {
        const incomeResult = await db.selectDistinct({ category: moneyFlow.category }).from(moneyFlow).where((0, drizzle_orm_22.and)((0, drizzle_orm_22.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_22.eq)(moneyFlow.type, "income")));
        const expenseResult = await db.selectDistinct({ category: moneyFlow.category }).from(moneyFlow).where((0, drizzle_orm_22.and)((0, drizzle_orm_22.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_22.eq)(moneyFlow.type, "expense")));
        const incomeCategories = incomeResult.map((r) => r.category);
        const expenseCategories = expenseResult.map((r) => r.category);
        const defaultIncomeCategories = [
            "monthly_fees",
            "special_assessment",
            "late_fees",
            "parking_fees",
            "utility_reimbursement",
            "insurance_claim",
            "other_income"
        ];
        const defaultExpenseCategories = [
            "bill_payment",
            "maintenance_expense",
            "administrative_expense",
            "professional_services",
            "other_expense"
        ];
        return {
            incomeCategories: incomeCategories.length > 0 ? incomeCategories : defaultIncomeCategories,
            expenseCategories: expenseCategories.length > 0 ? expenseCategories : defaultExpenseCategories
        };
    }
    /**
     * Get aggregated income and expense amounts for a specific month/year.
     * @param buildingId
     * @param year
     * @param month
     * @param incomeCategories
     * @param expenseCategories
     */
    async getAggregatedAmountsForMonth(buildingId, year, month, incomeCategories, expenseCategories) {
        const startDate = new Date(year, month - 1, 1);
        const endDate = new Date(year, month, 0);
        const startDateStr = startDate.toISOString().split("T")[0];
        const endDateStr = endDate.toISOString().split("T")[0];
        const incomes = [];
        for (const category of incomeCategories) {
            const result = await db.select({
                total: (0, drizzle_orm_22.sql) `COALESCE(SUM(CAST(${moneyFlow.amount} AS DECIMAL)), 0)`
            }).from(moneyFlow).where((0, drizzle_orm_22.and)((0, drizzle_orm_22.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_22.eq)(moneyFlow.type, "income"), (0, drizzle_orm_22.eq)(moneyFlow.category, category), (0, drizzle_orm_22.gte)(moneyFlow.transactionDate, startDateStr), (0, drizzle_orm_22.lte)(moneyFlow.transactionDate, endDateStr)));
            incomes.push(parseFloat(result[0]?.total || "0"));
        }
        const spendings = [];
        for (const category of expenseCategories) {
            const result = await db.select({
                total: (0, drizzle_orm_22.sql) `COALESCE(SUM(CAST(${moneyFlow.amount} AS DECIMAL)), 0)`
            }).from(moneyFlow).where((0, drizzle_orm_22.and)((0, drizzle_orm_22.eq)(moneyFlow.buildingId, buildingId), (0, drizzle_orm_22.eq)(moneyFlow.type, "expense"), (0, drizzle_orm_22.eq)(moneyFlow.category, category), (0, drizzle_orm_22.gte)(moneyFlow.transactionDate, startDateStr), (0, drizzle_orm_22.lte)(moneyFlow.transactionDate, endDateStr)));
            spendings.push(parseFloat(result[0]?.total || "0"));
        }
        return { incomes, spendings };
    }
    /**
     * Clean up existing budget entries for a building to avoid duplicates.
     * @param buildingId
     */
    async cleanupExistingBudgets(buildingId) {
        await db.delete(monthlyBudgets2).where((0, drizzle_orm_22.eq)(monthlyBudgets2.buildingId, buildingId));
    }
    /**
     * Insert budget entries in batches to avoid database constraints.
     * @param entries
     * @param batchSize
     */
    async insertBudgetEntriesInBatches(entries, batchSize = 100) {
        for (let i = 0; i < entries.length; i += batchSize) {
            const batch = entries.slice(i, i + batchSize);
            try {
                await db.insert(monthlyBudgets2).values(batch);
            }
            catch (error) {
                console.error(`\u274C Error inserting batch at index ${i}:`, error);
                for (const entry of batch) {
                    try {
                        await db.insert(monthlyBudgets2).values(entry);
                    }
                    catch (individualError) {
                        console.error(`\u274C Error inserting individual budget entry:`, individualError);
                    }
                }
            }
        }
    }
    /**
     * Get or create a system user for automated entries.
     */
    async getSystemUser() {
        const existingUser = await db.select({ id: users3.id }).from(users3).where((0, drizzle_orm_22.eq)(users3.email, "system@koveo-gestion.com")).limit(1);
        if (existingUser.length > 0) {
            return existingUser[0];
        }
        const adminUser = await db.select({ id: users3.id }).from(users3).where((0, drizzle_orm_22.eq)(users3.role, "admin")).limit(1);
        if (adminUser.length > 0) {
            return adminUser[0];
        }
        const anyUser = await db.select({ id: users3.id }).from(users3).where((0, drizzle_orm_22.eq)(users3.isActive, true)).limit(1);
        if (anyUser.length > 0) {
            return anyUser[0];
        }
        throw new Error("No active users found for system operations");
    }
    /**
     * Repopulate budgets for a specific building (useful when money flow data changes).
     * @param buildingId
     */
    async repopulateBudgetsForBuilding(buildingId) {
        const building = await db.select().from(buildings2).where((0, drizzle_orm_22.eq)(buildings2.id, buildingId)).limit(1);
        if (building.length === 0) {
            throw new Error(`Building ${buildingId} not found`);
        }
        const budgetsCreated = await this.populateBudgetsForBuilding(building[0]);
        console.log(`\u2705 Repopulated ${budgetsCreated} budget entries for building ${building[0].name}`);
        return budgetsCreated;
    }
    /**
     * Get budget statistics.
     */
    async getBudgetStatistics() {
        const [totalResult] = await db.select({ count: (0, drizzle_orm_22.sql) `count(*)::int` }).from(monthlyBudgets2);
        const [buildingsResult] = await db.select({ count: (0, drizzle_orm_22.sql) `count(DISTINCT ${monthlyBudgets2.buildingId})::int` }).from(monthlyBudgets2);
        const [oldestResult] = await db.select({
            year: monthlyBudgets2.year,
            month: monthlyBudgets2.month
        }).from(monthlyBudgets2).orderBy(monthlyBudgets2.year, monthlyBudgets2.month).limit(1);
        const [newestResult] = await db.select({
            year: monthlyBudgets2.year,
            month: monthlyBudgets2.month
        }).from(monthlyBudgets2).orderBy((0, drizzle_orm_22.sql) `${monthlyBudgets2.year} DESC, ${monthlyBudgets2.month} DESC`).limit(1);
        const oldestDate = oldestResult ? `${oldestResult.year}-${String(oldestResult.month).padStart(2, "0")}` : null;
        const newestDate = newestResult ? `${newestResult.year}-${String(newestResult.month).padStart(2, "0")}` : null;
        return {
            totalBudgetEntries: totalResult.count,
            buildingsWithBudgets: buildingsResult.count,
            oldestBudgetDate: oldestDate,
            newestBudgetDate: newestDate
        };
    }
};
var monthlyBudgetService = new MonthlyBudgetService();
// server/services/delayed-update-service.ts
var DelayedUpdateService = class _DelayedUpdateService {
    /**
     *
     */
    constructor() {
        this.DELAY_MINUTES = 15;
        this.DELAY_MS = this.DELAY_MINUTES * 60 * 1e3;
        // 15 minutes in milliseconds
        // Track pending updates to avoid duplicates
        this.pendingBillUpdates = /* @__PURE__ */ new Set();
        this.pendingResidenceUpdates = /* @__PURE__ */ new Set();
        this.pendingBuildingBudgetUpdates = /* @__PURE__ */ new Set();
    }
    /**
     *
     */
    static getInstance() {
        if (!_DelayedUpdateService.instance) {
            _DelayedUpdateService.instance = new _DelayedUpdateService();
        }
        return _DelayedUpdateService.instance;
    }
    /**
     * Schedule money flow update for a bill after 15-minute delay.
     * @param billId
     */
    scheduleBillUpdate(billId) {
        if (this.pendingBillUpdates.has(billId)) {
            return;
        }
        this.pendingBillUpdates.add(billId);
        console.log(`\u23F0 Scheduling money flow update for bill ${billId} in ${this.DELAY_MINUTES} minutes`);
        setTimeout(async () => {
            try {
                const moneyFlowEntries = await moneyFlowAutomationService.generateForBill(billId);
                const buildingId = await this.getBuildingIdFromBill(billId);
                if (buildingId) {
                    await this.scheduleBudgetUpdate(buildingId);
                }
            }
            finally {
                this.pendingBillUpdates.delete(billId);
            }
        }, this.DELAY_MS);
    }
    /**
     * Schedule money flow update for a residence after 15-minute delay.
     * @param residenceId
     */
    scheduleResidenceUpdate(residenceId) {
        if (this.pendingResidenceUpdates.has(residenceId)) {
            return;
        }
        this.pendingResidenceUpdates.add(residenceId);
        console.log(`\u23F0 Scheduling money flow update for residence ${residenceId} in ${this.DELAY_MINUTES} minutes`);
        setTimeout(async () => {
            try {
                const moneyFlowEntries = await moneyFlowAutomationService.generateForResidence(residenceId);
                console.log(`\u{1F4B0} Generated ${moneyFlowEntries} money flow entries for residence ${residenceId}`);
                const buildingId = await this.getBuildingIdFromResidence(residenceId);
                if (buildingId) {
                    await this.scheduleBudgetUpdate(buildingId);
                }
            }
            finally {
                this.pendingResidenceUpdates.delete(residenceId);
            }
        }, this.DELAY_MS);
    }
    /**
     * Schedule budget update for a building after money flow changes.
     * This is called internally after money flow updates complete.
     * @param buildingId
     */
    async scheduleBudgetUpdate(buildingId) {
        if (this.pendingBuildingBudgetUpdates.has(buildingId)) {
            console.log(`\u{1F3E2} Building ${buildingId} already has a pending budget update, skipping duplicate`);
            return;
        }
        this.pendingBuildingBudgetUpdates.add(buildingId);
        console.log(`\u23F0 Scheduling budget update for building ${buildingId} in ${this.DELAY_MINUTES} minutes`);
        setTimeout(async () => {
            try {
                const budgetEntries = await monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);
            }
            finally {
                this.pendingBuildingBudgetUpdates.delete(buildingId);
            }
        }, this.DELAY_MS);
    }
    /**
     * Get building ID from bill ID.
     * @param billId
     */
    async getBuildingIdFromBill(billId) {
        try {
            const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
            const { bills: bills3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
            const { eq: eq15 } = await Promise.resolve().then(() => __importStar(require("drizzle-orm")));
            const result = await db2.select({ buildingId: bills3.buildingId }).from(bills3).where(eq15(bills3.id, billId)).limit(1);
            return result.length > 0 ? result[0].buildingId : null;
        }
        catch (error) {
            console.error("\u274C Error getting building ID:", error);
            return null;
        }
    }
    /**
     * Get building ID from residence ID.
     * @param residenceId
     */
    async getBuildingIdFromResidence(residenceId) {
        try {
            const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
            const { residences: residences2 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
            const { eq: eq15 } = await Promise.resolve().then(() => __importStar(require("drizzle-orm")));
            const result = await db2.select({ buildingId: residences2.buildingId }).from(residences2).where(eq15(residences2.id, residenceId)).limit(1);
            return result.length > 0 ? result[0].buildingId : null;
        }
        catch (error) {
            console.error("\u274C Error getting building ID:", error);
            return null;
        }
    }
    /**
     * Force immediate update (for testing or urgent updates).
     * @param billId
     */
    async forceImmediateBillUpdate(billId) {
        const moneyFlowEntries = await moneyFlowAutomationService.generateForBill(billId);
        const buildingId = await this.getBuildingIdFromBill(billId);
        if (buildingId) {
            const budgetEntries = await monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);
        }
    }
    /**
     * Force immediate update (for testing or urgent updates).
     * @param residenceId
     */
    async forceImmediateResidenceUpdate(residenceId) {
        const moneyFlowEntries = await moneyFlowAutomationService.generateForResidence(residenceId);
        console.log(`\u{1F4B0} Generated ${moneyFlowEntries} money flow entries for residence ${residenceId}`);
        const buildingId = await this.getBuildingIdFromResidence(residenceId);
        if (buildingId) {
            const budgetEntries = await monthlyBudgetService.repopulateBudgetsForBuilding(buildingId);
        }
    }
    /**
     * Get current status of pending updates.
     */
    getStatus() {
        return {
            delayMinutes: this.DELAY_MINUTES,
            pendingBillUpdates: this.pendingBillUpdates.size,
            pendingResidenceUpdates: this.pendingResidenceUpdates.size,
            pendingBudgetUpdates: this.pendingBuildingBudgetUpdates.size
        };
    }
};
var delayedUpdateService = DelayedUpdateService.getInstance();
// server/services/gemini-bill-analyzer.ts
const fs4 = __importStar(require("fs"));
const genai_1 = require("@google/genai");
var ai = new genai_1.GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });
var GeminiBillAnalyzer = class {
    /**
     * Analyze a bill document using Gemini 2.5 Pro.
     * @param filePath
     * @param mimeType
     */
    async analyzeBillDocument(filePath, mimeType) {
        try {
            const fileBytes = fs4.readFileSync(filePath);
            const detectedMimeType = mimeType || this.detectMimeType(filePath);
            const systemPrompt = `You are an expert bill analysis AI. Analyze this bill/invoice document and extract key information.
      
      Extract the following information and respond with JSON in this exact format:
      {
        "title": "Brief descriptive title for this bill",
        "vendor": "Company or service provider name",
        "totalAmount": "Total amount as decimal string (e.g., '1234.56')",
        "category": "One of: insurance, maintenance, salary, utilities, cleaning, security, landscaping, professional_services, administration, repairs, supplies, taxes, technology, reserves, other",
        "description": "Brief description of services/products",
        "dueDate": "Due date in YYYY-MM-DD format if found",
        "issueDate": "Issue date in YYYY-MM-DD format if found", 
        "billNumber": "Bill/invoice number if found",
        "confidence": 0.85
      }
      
      Guidelines:
      - Use clear, concise titles (e.g., "Hydro-Qu\xE9bec Electricity Bill", "Property Insurance Premium")
      - Map categories intelligently (electricity = utilities, legal fees = professional_services, etc.)
      - Extract exact amounts without currency symbols
      - Confidence should reflect how clear the document is (0.0-1.0)
      - If information is unclear, use best guess but lower confidence
      
      **IMPORTANT: Your response MUST be a raw JSON object only, without any Markdown formatting, backticks, or explanatory text. Do not wrap the JSON in triple backticks or any other non-JSON characters.**`;
            const response = await ai.models.generateContent({
                model: "gemini-1.5-flash",
                contents: [
                    {
                        role: "user",
                        parts: [
                            { text: systemPrompt },
                            {
                                inlineData: {
                                    mimeType: detectedMimeType,
                                    data: fileBytes.toString("base64")
                                }
                            }
                        ]
                    }
                ]
            });
            const rawJson = response.text;
            if (rawJson) {
                const sanitizedJson = this.sanitizeJsonResponse(rawJson);
                let analysis;
                try {
                    analysis = JSON.parse(sanitizedJson);
                }
                catch (parseError) {
                    console.error("JSON parsing failed for AI response:", parseError);
                    throw new Error("Failed to parse AI response as JSON");
                }
                analysis = this.sanitizeAndValidateAnalysis(analysis);
                return analysis;
            }
            else {
                throw new Error("Empty response from Gemini");
            }
        }
        catch (error) {
            console.error("Error analyzing bill document:", error);
            throw new Error(`Failed to analyze bill document: ${error}`);
        }
    }
    /**
     * Sanitize JSON response by removing markdown code blocks and whitespace.
     * @param rawResponse The raw response from the AI
     * @returns Clean JSON string
     */
    sanitizeJsonResponse(rawResponse) {
        if (!rawResponse) {
            return rawResponse;
        }
        let cleaned = rawResponse.replace(/```json\s*/gi, "").replace(/```\s*$/g, "").replace(/^```\s*/g, "").trim();
        return cleaned;
    }
    /**
     * Detect MIME type from file path.
     * @param filePath
     */
    detectMimeType(filePath) {
        const extension = filePath.toLowerCase().split(".").pop();
        switch (extension) {
            case "pdf":
                return "application/pdf";
            case "jpg":
            case "jpeg":
                return "image/jpeg";
            case "png":
                return "image/png";
            case "gif":
                return "image/gif";
            case "webp":
                return "image/webp";
            default:
                return "application/pdf";
        }
    }
    /**
     * Comprehensive sanitization and validation of AI analysis results
     * Prevents XSS, SQL injection, and data integrity issues
     * @param analysis Raw analysis from AI
     * @returns Sanitized and validated analysis
     */
    sanitizeAndValidateAnalysis(analysis) {
        return {
            title: this.sanitizeString(analysis.title || ""),
            vendor: this.sanitizeString(analysis.vendor || ""),
            totalAmount: this.sanitizeAmount(analysis.totalAmount || "0"),
            category: this.validateCategory(analysis.category || "other"),
            description: this.sanitizeString(analysis.description || ""),
            dueDate: this.validateDate(analysis.dueDate),
            issueDate: this.validateDate(analysis.issueDate),
            billNumber: this.sanitizeString(analysis.billNumber || ""),
            confidence: this.validateConfidence(analysis.confidence || 0)
        };
    }
    /**
     * Sanitize string fields to prevent XSS and SQL injection
     * @param input Raw string input
     * @returns Sanitized string
     */
    sanitizeString(input) {
        if (!input || typeof input !== "string") {
            return "";
        }
        return input.replace(/<[^>]*>/g, "").replace(/javascript:/gi, "").replace(/(\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\b)/gi, "").replace(/[;&|`$(){}[\]]/g, "").substring(0, 1e3).trim();
    }
    /**
     * Sanitize and validate amount string.
     * @param amount Raw amount string
     * @returns Validated amount in decimal format
     */
    sanitizeAmount(amount) {
        if (!amount || typeof amount !== "string") {
            return "0.00";
        }
        const cleaned = amount.replace(/[^0-9.,-]/g, "");
        const normalizedAmount = cleaned.replace(/,/g, ".");
        const parts = normalizedAmount.split(".");
        const sanitized = parts.length > 1 ? parts.slice(0, -1).join("") + "." + parts[parts.length - 1] : parts[0];
        const parsed = parseFloat(sanitized);
        if (isNaN(parsed) || parsed < 0 || parsed > 999999.99) {
            return "0.00";
        }
        return parsed.toFixed(2);
    }
    /**
     * Validate and sanitize category
     * @param category Raw category from AI
     * @returns Valid category or 'other'
     */
    validateCategory(category) {
        const validCategories = [
            "insurance",
            "maintenance",
            "salary",
            "utilities",
            "cleaning",
            "security",
            "landscaping",
            "professional_services",
            "administration",
            "repairs",
            "supplies",
            "taxes",
            "technology",
            "reserves",
            "other"
        ];
        const sanitized = this.sanitizeString(category).toLowerCase();
        return validCategories.includes(sanitized) ? sanitized : "other";
    }
    /**
     * Validate date format
     * @param dateString Raw date string
     * @returns Valid ISO date string or undefined
     */
    validateDate(dateString) {
        if (!dateString || typeof dateString !== "string") {
            return void 0;
        }
        const sanitized = this.sanitizeString(dateString);
        const date7 = new Date(sanitized);
        const now = /* @__PURE__ */ new Date();
        const tenYearsAgo = new Date(now.getFullYear() - 10, 0, 1);
        const fiveYearsFromNow = new Date(now.getFullYear() + 5, 11, 31);
        if (isNaN(date7.getTime()) || date7 < tenYearsAgo || date7 > fiveYearsFromNow) {
            return void 0;
        }
        return date7.toISOString().split("T")[0];
    }
    /**
     * Validate confidence value
     * @param confidence Raw confidence value
     * @returns Clamped confidence between 0.0 and 1.0
     */
    validateConfidence(confidence) {
        if (typeof confidence !== "number" || isNaN(confidence)) {
            return 0;
        }
        return Math.max(0, Math.min(1, confidence));
    }
    /**
     * Get suggested payment schedule based on bill type and amount.
     * @param category
     * @param amount
     */
    async suggestPaymentSchedule(category, amount) {
        try {
            const prompt = `Based on this bill category "${category}" and amount $${amount}, suggest the most appropriate payment schedule.
      
      Common patterns:
      - Utilities: Usually monthly recurring
      - Insurance: Usually yearly recurring  
      - Maintenance: Usually unique payments
      - Professional services: Usually unique payments
      - Supplies: Usually unique payments
      - Taxes: Usually yearly recurring
      
      Respond with JSON:
      {
        "paymentType": "unique" or "recurrent",
        "schedulePayment": "monthly", "quarterly", or "yearly" (only if recurrent),
        "reasoning": "Brief explanation of the recommendation"
      }`;
            const response = await ai.models.generateContent({
                model: "gemini-2.5-flash",
                config: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "object",
                        properties: {
                            paymentType: { type: "string", enum: ["unique", "recurrent"] },
                            schedulePayment: { type: "string", enum: ["monthly", "quarterly", "yearly"] },
                            reasoning: { type: "string" }
                        },
                        required: ["paymentType", "reasoning"]
                    }
                },
                contents: prompt
            });
            const result = JSON.parse(response.text || "{}");
            return result;
        }
        catch (error) {
            console.error("\u274C Error suggesting payment schedule:", error);
            return {
                paymentType: "unique",
                reasoning: "Default to unique payment due to analysis error"
            };
        }
    }
};
var geminiBillAnalyzer = new GeminiBillAnalyzer();
// server/services/geminiService.ts
const genai_2 = require("@google/genai");
var GeminiService = class {
    constructor() {
        const apiKey = process.env.GEMINI_API_KEY;
        if (!apiKey) {
            throw new Error("GEMINI_API_KEY environment variable is required");
        }
        this.genAI = new genai_2.GoogleGenAI({ apiKey });
    }
    /**
     * Extract invoice data from uploaded file using Gemini Pro Vision.
     *
     * @param fileBuffer - The uploaded file buffer
     * @param mimeType - MIME type of the uploaded file
     * @returns Promise<AiExtractionResponse> - Structured invoice data
     */
    async extractInvoiceData(fileBuffer, mimeType) {
        try {
            const supportedTypes = [
                "application/pdf",
                "image/jpeg",
                "image/jpg",
                "image/png",
                "image/webp",
                "image/heic",
                "image/heif"
            ];
            if (!supportedTypes.includes(mimeType)) {
                throw new Error(`Unsupported file type: ${mimeType}. Supported types: ${supportedTypes.join(", ")}`);
            }
            const base64Data = fileBuffer.toString("base64");
            const imagePart = {
                inlineData: {
                    data: base64Data,
                    mimeType
                }
            };
            const prompt = `You are an intelligent accounting assistant for Koveo Gestion, a property management SaaS. Your task is to accurately extract information from the provided invoice document and return a single, minified JSON object with no additional text, explanations, or markdown.

Follow these steps in order:
1. First, analyze the document to determine the payment structure. Set the 'paymentType' field to either "one-time" or "recurring". This is the most critical step.
2. Extract the following primary fields and format them exactly as specified:
  - 'vendorName': string
  - 'invoiceNumber': string
  - 'totalAmount': number (use a floating-point number, no currency symbols)
  - 'dueDate': string (format as "YYYY-MM-DD")
3. If 'paymentType' is "recurring", determine the frequency.
  - If it is a standard period, set 'frequency' to one of: "monthly", "quarterly", or "annually" and extract the 'startDate' (format "YYYY-MM-DD").
  - If you identify a list of specific, non-standard payment dates, set 'frequency' to "custom".
4. If, and only if, 'frequency' is "custom", extract all individual payment dates into a 'customPaymentDates' array of strings, each formatted as "YYYY-MM-DD".
5. If any field cannot be found, its value must be null.

Your final output must be only the JSON object.
Example for a custom frequency: {"vendorName":"Hydro Quebec","invoiceNumber":"HQ-123","totalAmount":450.75,"dueDate":"2025-10-15","paymentType":"recurring","frequency":"custom","startDate":null,"customPaymentDates":["2025-10-15", "2025-11-15", "2026-01-15"]}`;
            const result = await this.genAI.models.generateContent({
                model: "gemini-1.5-pro",
                contents: [{
                        role: "user",
                        parts: [
                            { text: prompt },
                            imagePart
                        ]
                    }]
            });
            const responseText = result.candidates?.[0]?.content?.parts?.[0]?.text || "";
            console.log("[GEMINI] Raw response:", responseText);
            let cleanedResponse = responseText.trim();
            if (cleanedResponse.startsWith("```json")) {
                cleanedResponse = cleanedResponse.replace(/^```json\s*/, "").replace(/\s*```$/, "");
            }
            else if (cleanedResponse.startsWith("```")) {
                cleanedResponse = cleanedResponse.replace(/^```\s*/, "").replace(/\s*```$/, "");
            }
            const jsonMatch = cleanedResponse.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                cleanedResponse = jsonMatch[0];
            }
            let extractedData;
            try {
                extractedData = JSON.parse(cleanedResponse);
            }
            catch (parseError) {
                console.error("[GEMINI] JSON parse error:", parseError);
                console.error("[GEMINI] Cleaned response:", cleanedResponse);
                throw new Error(`Failed to parse AI response as JSON: ${parseError}`);
            }
            const validatedData = {
                vendorName: extractedData.vendorName || null,
                invoiceNumber: extractedData.invoiceNumber || null,
                totalAmount: typeof extractedData.totalAmount === "number" ? extractedData.totalAmount : null,
                dueDate: extractedData.dueDate || null,
                paymentType: extractedData.paymentType === "one-time" || extractedData.paymentType === "recurring" ? extractedData.paymentType : null,
                frequency: extractedData.frequency && ["monthly", "quarterly", "annually", "custom"].includes(extractedData.frequency) ? extractedData.frequency : null,
                startDate: extractedData.startDate || null,
                customPaymentDates: Array.isArray(extractedData.customPaymentDates) ? extractedData.customPaymentDates : null
            };
            console.log("[GEMINI] Validated extraction:", validatedData);
            return validatedData;
        }
        catch (error) {
            console.error("[GEMINI] Invoice extraction error:", error);
            return {
                vendorName: null,
                invoiceNumber: null,
                totalAmount: null,
                dueDate: null,
                paymentType: null,
                frequency: null,
                startDate: null,
                customPaymentDates: null
            };
        }
    }
    /**
     * Calculate confidence score based on how many fields were successfully extracted.
     *
     * @param extractionData - The AI extraction response
     * @returns number - Confidence score between 0 and 1
     */
    calculateConfidenceScore(extractionData) {
        const coreFields = ["vendorName", "invoiceNumber", "totalAmount", "dueDate", "paymentType"];
        const extractedCoreFields = coreFields.filter((field) => extractionData[field] !== null);
        let baseScore = extractedCoreFields.length / coreFields.length;
        if (extractionData.paymentType === "recurring" && extractionData.frequency) {
            if (extractionData.frequency === "custom" && extractionData.customPaymentDates) {
                baseScore += 0.1;
            }
            else if (extractionData.frequency !== "custom" && extractionData.startDate) {
                baseScore += 0.1;
            }
        }
        return Math.min(baseScore, 1);
    }
    /**
     * Validate that the API key is properly configured.
     *
     * @returns Promise<boolean> - True if API key is valid
     */
    async validateApiKey() {
        try {
            await this.genAI.models.generateContent({
                model: "gemini-1.5-pro",
                contents: [{
                        role: "user",
                        parts: [{ text: "Test connection" }]
                    }]
            });
            return true;
        }
        catch (error) {
            console.error("[GEMINI] API key validation failed:", error);
            return false;
        }
    }
    /**
     * Extract bill data from uploaded file using Gemini Pro Vision.
     * Specialized for bills, receipts, and vendor invoices.
     *
     * @param fileBuffer - The uploaded file buffer
     * @param mimeType - MIME type of the uploaded file
     * @returns Promise<any> - Structured bill data
     */
    async extractBillData(fileBuffer, mimeType) {
        try {
            const supportedTypes = [
                "application/pdf",
                "image/jpeg",
                "image/jpg",
                "image/png",
                "image/webp",
                "image/heic",
                "image/heif"
            ];
            if (!supportedTypes.includes(mimeType)) {
                throw new Error(`Unsupported file type: ${mimeType}. Supported types: ${supportedTypes.join(", ")}`);
            }
            const base64Data = fileBuffer.toString("base64");
            const imagePart = {
                inlineData: {
                    data: base64Data,
                    mimeType
                }
            };
            const prompt = `You are an intelligent accounting assistant for Koveo Gestion, a property management SaaS. Your task is to accurately extract information from the provided bill or receipt document and return a single, minified JSON object with no additional text, explanations, or markdown.

Follow these steps in order:
1. First, analyze the document to determine the payment structure. Set the 'paymentType' field to either "one-time" or "recurring". This is the most critical step.
2. Extract the following primary fields and format them exactly as specified:
  - 'vendorName': string (company/vendor name)
  - 'description': string (what the bill is for)
  - 'totalAmount': number (use a floating-point number, no currency symbols)
  - 'dueDate': string (format as "YYYY-MM-DD")
3. If 'paymentType' is "recurring", determine the frequency.
  - If it is a standard period, set 'frequency' to one of: "monthly", "quarterly", or "annually" and extract the 'startDate' (format "YYYY-MM-DD").
  - If you identify a list of specific, non-standard payment dates, set 'frequency' to "custom".
4. If, and only if, 'frequency' is "custom", extract all individual payment dates into a 'customPaymentDates' array of strings, each formatted as "YYYY-MM-DD".
5. Try to determine the bill category based on the vendor/service type and set 'category' to one of: "insurance", "maintenance", "salary", "utilities", "cleaning", "security", "landscaping", "professional_services", "administration", "repairs", "supplies", "taxes", "technology", "reserves", "other"
6. If any field cannot be found, its value must be null.

Your final output must be only the JSON object.
Example for utilities: {"vendorName":"Hydro Quebec","description":"Monthly electricity bill","totalAmount":127.45,"dueDate":"2025-01-15","paymentType":"recurring","frequency":"monthly","startDate":"2025-01-15","customPaymentDates":null,"category":"utilities"}
Example for one-time: {"vendorName":"ABC Repairs","description":"Emergency plumbing repair","totalAmount":350.00,"dueDate":"2025-01-30","paymentType":"one-time","frequency":null,"startDate":null,"customPaymentDates":null,"category":"repairs"}`;
            const result = await this.genAI.models.generateContent({
                model: "gemini-1.5-pro",
                contents: [{
                        role: "user",
                        parts: [
                            { text: prompt },
                            imagePart
                        ]
                    }]
            });
            const responseText = result.candidates?.[0]?.content?.parts?.[0]?.text || "";
            console.log("[GEMINI BILL] Raw response:", responseText);
            console.log("[GEMINI BILL] Response result structure:", JSON.stringify(result, null, 2));
            let cleanedResponse = responseText.trim();
            if (cleanedResponse.startsWith("```json")) {
                cleanedResponse = cleanedResponse.replace(/^```json\s*/, "").replace(/\s*```$/, "");
            }
            else if (cleanedResponse.startsWith("```")) {
                cleanedResponse = cleanedResponse.replace(/^```\s*/, "").replace(/\s*```$/, "");
            }
            const jsonMatch = cleanedResponse.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                cleanedResponse = jsonMatch[0];
            }
            let extractedData;
            try {
                extractedData = JSON.parse(cleanedResponse);
            }
            catch (parseError) {
                console.error("[GEMINI BILL] JSON parse error:", parseError);
                console.error("[GEMINI BILL] Cleaned response:", cleanedResponse);
                throw new Error(`Failed to parse AI response as JSON: ${parseError}`);
            }
            const validatedData = {
                vendorName: extractedData.vendorName || null,
                description: extractedData.description || null,
                totalAmount: typeof extractedData.totalAmount === "number" ? extractedData.totalAmount : null,
                dueDate: extractedData.dueDate || null,
                paymentType: extractedData.paymentType === "one-time" || extractedData.paymentType === "recurring" ? extractedData.paymentType : null,
                frequency: extractedData.frequency && ["monthly", "quarterly", "annually", "custom"].includes(extractedData.frequency) ? extractedData.frequency : null,
                startDate: extractedData.startDate || null,
                customPaymentDates: Array.isArray(extractedData.customPaymentDates) ? extractedData.customPaymentDates : null,
                category: extractedData.category && [
                    "insurance",
                    "maintenance",
                    "salary",
                    "utilities",
                    "cleaning",
                    "security",
                    "landscaping",
                    "professional_services",
                    "administration",
                    "repairs",
                    "supplies",
                    "taxes",
                    "technology",
                    "reserves",
                    "other"
                ].includes(extractedData.category) ? extractedData.category : "other"
            };
            console.log("[GEMINI BILL] Validated extraction:", validatedData);
            return validatedData;
        }
        catch (error) {
            console.error("[GEMINI BILL] Bill extraction error:", error);
            return {
                vendorName: null,
                description: null,
                totalAmount: null,
                dueDate: null,
                paymentType: null,
                frequency: null,
                startDate: null,
                customPaymentDates: null,
                category: "other"
            };
        }
    }
};
var geminiService = new GeminiService();
// server/middleware/fileUpload.ts
const multer_4 = __importDefault(require("multer"));
var storage2 = multer_4.default.memoryStorage();
var fileFilter = (req, file, cb) => {
    const supportedTypes = [
        "application/pdf",
        "image/jpeg",
        "image/jpg",
        "image/png",
        "image/webp",
        "image/heic",
        "image/heif"
    ];
    if (supportedTypes.includes(file.mimetype)) {
        cb(null, true);
    }
    else {
        cb(new Error(`Unsupported file type: ${file.mimetype}. Supported types: ${supportedTypes.join(", ")}`));
    }
};
var upload3 = (0, multer_4.default)({
    storage: storage2,
    fileFilter,
    limits: {
        fileSize: 25 * 1024 * 1024,
        // 25MB limit (matching SharedUploader component)
        files: 1
        // Only allow single file upload
    }
});
var uploadInvoiceFile = upload3.single("invoiceFile");
var handleUploadError = (err, req, res, next) => {
    if (err instanceof multer_4.default.MulterError) {
        switch (err.code) {
            case "LIMIT_FILE_SIZE":
                return res.status(400).json({
                    error: "File too large",
                    message: "File size must be less than 25MB",
                    code: "FILE_TOO_LARGE"
                });
            case "LIMIT_UNEXPECTED_FILE":
                return res.status(400).json({
                    error: "Unexpected file field",
                    message: "Only one file allowed in invoiceFile field",
                    code: "UNEXPECTED_FILE"
                });
            case "LIMIT_FILE_COUNT":
                return res.status(400).json({
                    error: "Too many files",
                    message: "Only one file allowed per request",
                    code: "TOO_MANY_FILES"
                });
            default:
                return res.status(400).json({
                    error: "File upload error",
                    message: err.message,
                    code: "UPLOAD_ERROR"
                });
        }
    }
    else if (err.message.includes("Unsupported file type")) {
        return res.status(400).json({
            error: "Unsupported file type",
            message: err.message,
            code: "UNSUPPORTED_FILE_TYPE"
        });
    }
    next(err);
};
// server/api/bills.ts
init_schema();
const express_rate_limit_1 = __importStar(require("express-rate-limit"));
const multer_5 = __importDefault(require("multer"));
const fs_5 = __importDefault(require("fs"));
var { buildings: buildings3, bills: bills2 } = schema_exports;
var billFilterSchema = zod_14.z.object({
    buildingId: zod_14.z.string().uuid(),
    category: zod_14.z.string().optional(),
    year: zod_14.z.string().optional(),
    status: zod_14.z.enum(["all", "draft", "sent", "overdue", "paid", "cancelled"]).optional(),
    months: zod_14.z.string().optional()
    // Comma-separated month numbers (e.g., "1,3,6,12")
});
var createBillSchema = zod_14.z.object({
    buildingId: zod_14.z.string().uuid(),
    title: zod_14.z.string().min(1),
    description: zod_14.z.string().optional(),
    category: zod_14.z.enum([
        "insurance",
        "maintenance",
        "salary",
        "utilities",
        "cleaning",
        "security",
        "landscaping",
        "professional_services",
        "administration",
        "repairs",
        "supplies",
        "taxes",
        "technology",
        "reserves",
        "other"
    ]),
    vendor: zod_14.z.string().optional(),
    paymentType: zod_14.z.enum(["unique", "recurrent"]),
    schedulePayment: zod_14.z.enum(["weekly", "monthly", "quarterly", "yearly", "custom"]).optional(),
    scheduleCustom: zod_14.z.array(zod_14.z.string()).optional(),
    costs: zod_14.z.array(zod_14.z.string()),
    totalAmount: zod_14.z.string(),
    startDate: zod_14.z.string(),
    endDate: zod_14.z.string().optional(),
    status: zod_14.z.enum(["draft", "sent", "overdue", "paid", "cancelled"]),
    notes: zod_14.z.string().optional()
});
var updateBillSchema = createBillSchema.partial();
var extractionRateLimit = (0, express_rate_limit_1.default)({
    windowMs: 15 * 60 * 1e3,
    // 15 minutes
    max: 10,
    // Limit each user to 10 extraction requests per windowMs
    message: {
        error: "Too many extraction requests",
        message: "Please wait before making another extraction request",
        code: "RATE_LIMIT_EXCEEDED"
    },
    standardHeaders: true,
    // Return rate limit info in the `RateLimit-*` headers
    legacyHeaders: false,
    // Disable the `X-RateLimit-*` headers
    keyGenerator: (req) => {
        return req.user?.id || (0, express_rate_limit_1.ipKeyGenerator)(req);
    },
    skip: (req) => {
        return !req.user?.id;
    }
});
var upload4 = (0, multer_5.default)({
    dest: "/tmp/uploads/",
    fileFilter: (req, file, cb) => {
        const allowedTypes = ["image/jpeg", "image/png", "image/gif", "application/pdf"];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error("Only image and PDF files are allowed"));
        }
    },
    limits: {
        fileSize: 10 * 1024 * 1024
        // 10MB limit
    }
});
function registerBillRoutes(app2) {
    app2.post("/api/bills/extract-data", requireAuth, extractionRateLimit, uploadInvoiceFile, handleUploadError, async (req, res) => {
        const startTime = Date.now();
        const userId = req.user.id;
        const userRole = req.user.role;
        console.log(`[BILL EXTRACTION] Starting extraction for user ${userId} (${userRole})`);
        try {
            if (!req.file) {
                console.log(`[BILL EXTRACTION] No file uploaded by user ${userId}`);
                return res.status(400).json({
                    error: "No file uploaded",
                    message: "Please upload a bill file",
                    code: "NO_FILE"
                });
            }
            const { buffer, mimetype, originalname, size } = req.file;
            console.log(`[BILL EXTRACTION] Processing file for user ${userId}:`, {
                filename: originalname,
                mimetype,
                size: `${Math.round(size / 1024)}KB`
            });
            const extractedData = await geminiService.extractBillData(buffer, mimetype);
            console.log(`[BILL EXTRACTION] Extraction completed for user ${userId} in ${Date.now() - startTime}ms`);
            res.status(200).json({
                success: true,
                data: extractedData,
                metadata: {
                    confidence: 0.9,
                    // Could be calculated based on field completeness
                    processingTime: Date.now() - startTime,
                    filename: originalname,
                    fileSize: size
                }
            });
        }
        catch (error) {
            console.error(`[BILL EXTRACTION] Error for user ${userId}:`, error);
            if (error.message?.includes("Unsupported file type")) {
                return res.status(400).json({
                    error: "Unsupported file type",
                    message: "Please upload a PDF or image file (JPEG, PNG, WebP, HEIC, HEIF)",
                    code: "UNSUPPORTED_FILE_TYPE"
                });
            }
            else if (error.message?.includes("FILE_TOO_LARGE")) {
                return res.status(400).json({
                    error: "File too large",
                    message: "Please upload a file smaller than 25MB",
                    code: "FILE_TOO_LARGE"
                });
            }
            else if (error.message?.includes("GEMINI_API_KEY")) {
                return res.status(500).json({
                    error: "AI service configuration error",
                    message: "AI extraction service is temporarily unavailable",
                    code: "GEMINI_API_ERROR"
                });
            }
            res.status(500).json({
                error: "Extraction failed",
                message: "Failed to extract bill data. Please try again.",
                code: "EXTRACTION_ERROR"
            });
        }
    });
    app2.get("/api/bills", requireAuth, async (req, res) => {
        try {
            const { buildingId, category, year, status = "all", months } = req.query;
            const conditions = [];
            if (buildingId && buildingId !== "all") {
                conditions.push((0, drizzle_orm_20.eq)(bills2.buildingId, buildingId));
            }
            if (category && category !== "all") {
                conditions.push((0, drizzle_orm_20.eq)(bills2.category, category));
            }
            if (year) {
                conditions.push((0, drizzle_orm_20.sql) `EXTRACT(YEAR FROM ${bills2.startDate}) = ${year}`);
            }
            if (status && status !== "all") {
                conditions.push((0, drizzle_orm_20.eq)(bills2.status, status));
            }
            if (months) {
                const monthNumbers = months.split(",").map((m) => parseInt(m.trim()));
                const monthConditions = monthNumbers.map((month) => (0, drizzle_orm_20.sql) `EXTRACT(MONTH FROM ${bills2.startDate}) = ${month}`);
                conditions.push((0, drizzle_orm_20.sql) `(${drizzle_orm_20.sql.join(monthConditions, (0, drizzle_orm_20.sql) ` OR `)})`);
            }
            const whereClause = conditions.length > 0 ? (0, drizzle_orm_20.and)(...conditions) : void 0;
            const billsList = await db.select({
                id: bills2.id,
                buildingId: bills2.buildingId,
                billNumber: bills2.billNumber,
                title: bills2.title,
                description: bills2.description,
                category: bills2.category,
                vendor: bills2.vendor,
                paymentType: bills2.paymentType,
                costs: bills2.costs,
                totalAmount: bills2.totalAmount,
                startDate: bills2.startDate,
                status: bills2.status,
                notes: bills2.notes,
                createdBy: bills2.createdBy,
                createdAt: bills2.createdAt,
                updatedAt: bills2.updatedAt
            }).from(bills2).where(whereClause).orderBy((0, drizzle_orm_20.desc)(bills2.startDate));
            res.json(billsList);
        }
        catch (_error) {
            console.error("\u274C Error fetching bills:", _error);
            res.status(500).json({
                message: "Failed to fetch bills",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/bills/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const bill = await db.select({
                id: bills2.id,
                buildingId: bills2.buildingId,
                billNumber: bills2.billNumber,
                title: bills2.title,
                description: bills2.description,
                category: bills2.category,
                vendor: bills2.vendor,
                paymentType: bills2.paymentType,
                costs: bills2.costs,
                totalAmount: bills2.totalAmount,
                startDate: bills2.startDate,
                status: bills2.status,
                notes: bills2.notes,
                filePath: bills2.filePath,
                fileName: bills2.fileName,
                fileSize: bills2.fileSize,
                isAiAnalyzed: bills2.isAiAnalyzed,
                createdBy: bills2.createdBy,
                createdAt: bills2.createdAt,
                updatedAt: bills2.updatedAt
            }).from(bills2).where((0, drizzle_orm_20.eq)(bills2.id, id)).limit(1);
            if (bill.length === 0) {
                return res.status(404).json({
                    message: "Bill not found"
                });
            }
            res.json(bill[0]);
        }
        catch (_error) {
            console.error("\u274C Error fetching bill:", _error);
            res.status(500).json({
                message: "Failed to fetch bill",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/bills", requireAuth, async (req, res) => {
        try {
            const validation = createBillSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    message: "Invalid bill data",
                    errors: validation.error.issues
                });
            }
            const billData = validation.data;
            const newBill = await db.insert(bills2).values({
                buildingId: billData.buildingId,
                billNumber: `BILL-${Date.now()}`,
                title: billData.title,
                description: billData.description,
                category: billData.category,
                vendor: billData.vendor,
                paymentType: billData.paymentType,
                schedulePayment: billData.schedulePayment,
                scheduleCustom: billData.scheduleCustom,
                costs: billData.costs.map((cost) => parseFloat(cost)),
                totalAmount: parseFloat(billData.totalAmount),
                startDate: billData.startDate,
                endDate: billData.endDate || null,
                status: billData.status,
                notes: billData.notes,
                createdBy: req.user.id
            }).returning();
            try {
                delayedUpdateService.scheduleBillUpdate(newBill[0].id);
            }
            catch (schedulingError) {
                console.warn("\u26A0\uFE0F Failed to schedule bill update:", schedulingError);
            }
            res.status(201).json(newBill[0]);
        }
        catch (_error) {
            console.error("\u274C Error creating bill:", _error);
            res.status(500).json({
                message: "Failed to create bill",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.patch("/api/bills/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const validation = updateBillSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    message: "Invalid bill data",
                    errors: validation.error.issues
                });
            }
            const billData = validation.data;
            const updateData = {};
            if (billData.title) {
                updateData.title = billData.title;
            }
            if (billData.description) {
                updateData.description = billData.description;
            }
            if (billData.category) {
                updateData.category = billData.category;
            }
            if (billData.vendor) {
                updateData.vendor = billData.vendor;
            }
            if (billData.paymentType) {
                updateData.paymentType = billData.paymentType;
            }
            if (billData.costs) {
                updateData.costs = billData.costs.map((cost) => parseFloat(cost));
            }
            if (billData.totalAmount) {
                updateData.totalAmount = parseFloat(billData.totalAmount);
            }
            if (billData.startDate) {
                updateData.startDate = billData.startDate;
            }
            if (billData.endDate) {
                updateData.endDate = billData.endDate;
            }
            if (billData.status) {
                updateData.status = billData.status;
            }
            if (billData.notes) {
                updateData.notes = billData.notes;
            }
            updateData.updatedAt = /* @__PURE__ */ new Date();
            const updatedBill = await db.update(bills2).set(updateData).where((0, drizzle_orm_20.eq)(bills2.id, id)).returning();
            if (updatedBill.length === 0) {
                return res.status(404).json({
                    message: "Bill not found"
                });
            }
            res.json(updatedBill[0]);
        }
        catch (_error) {
            console.error("\u274C Error updating bill (PATCH):", _error);
            res.status(500).json({
                message: "Failed to update bill",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.put("/api/bills/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const validation = updateBillSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    message: "Invalid bill data",
                    errors: validation.error.issues
                });
            }
            const billData = validation.data;
            const updateData = {};
            if (billData.title) {
                updateData.title = billData.title;
            }
            if (billData.description) {
                updateData.description = billData.description;
            }
            if (billData.category) {
                updateData.category = billData.category;
            }
            if (billData.vendor) {
                updateData.vendor = billData.vendor;
            }
            if (billData.paymentType) {
                updateData.paymentType = billData.paymentType;
            }
            if (billData.costs) {
                updateData.costs = billData.costs.map((cost) => parseFloat(cost));
            }
            if (billData.totalAmount) {
                updateData.totalAmount = parseFloat(billData.totalAmount);
            }
            if (billData.startDate) {
                updateData.startDate = billData.startDate;
            }
            if (billData.status) {
                updateData.status = billData.status;
            }
            if (billData.notes) {
                updateData.notes = billData.notes;
            }
            updateData.updatedAt = /* @__PURE__ */ new Date();
            const updatedBill = await db.update(bills2).set(updateData).where((0, drizzle_orm_20.eq)(bills2.id, id)).returning();
            if (updatedBill.length === 0) {
                return res.status(404).json({
                    message: "Bill not found"
                });
            }
            try {
                delayedUpdateService.scheduleBillUpdate(id);
            }
            catch (schedulingError) {
                console.warn("\u26A0\uFE0F Failed to schedule bill update:", schedulingError);
            }
            res.json(updatedBill[0]);
        }
        catch (_error) {
            console.error("\u274C Error updating bill (PUT):", _error);
            res.status(500).json({
                message: "Failed to update bill",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.delete("/api/bills/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const deletedBill = await db.delete(bills2).where((0, drizzle_orm_20.eq)(bills2.id, id)).returning();
            if (!deletedBill || Array.isArray(deletedBill) && deletedBill.length === 0) {
                return res.status(404).json({
                    message: "Bill not found"
                });
            }
            res.json({
                message: "Bill deleted successfully",
                bill: deletedBill[0]
            });
        }
        catch (_error) {
            console.error("\u274C Error deleting bill:", _error);
            res.status(500).json({
                message: "Failed to delete bill",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/bills/:id/upload-document", requireAuth, upload4.single("document"), async (req, res) => {
        console.log(`\u{1F4C4} [BILLS UPLOAD] Starting document upload for bill ID: ${req.params.id}`);
        console.log(`\u{1F4C4} [BILLS UPLOAD] User: ${req.user.id} (${req.user.role})`);
        try {
            const { id } = req.params;
            if (!req.file) {
                console.log("\u274C [BILLS UPLOAD] No file provided in request");
                return res.status(400).json({ message: "No file uploaded" });
            }
            console.log(`\u{1F4C4} [BILLS UPLOAD] File received:`, {
                originalName: req.file.originalname,
                mimeType: req.file.mimetype,
                size: req.file.size,
                tempPath: req.file.path
            });
            const organizations3 = await storage.getUserOrganizations(req.user.id);
            const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : "default";
            console.log(`\u{1F4C4} [BILLS UPLOAD] Organization ID determined: ${organizationId}`);
            const filePath = `prod_org_${organizationId}/${req.file.originalname}`;
            console.log(`\u{1F4C4} [BILLS UPLOAD] File path determined: ${filePath}`);
            const path8 = await Promise.resolve().then(() => __importStar(require("path")));
            const uploadsDir = path8.join(process.cwd(), "uploads");
            const orgDir = path8.join(uploadsDir, `prod_org_${organizationId}`);
            console.log(`\u{1F4C4} [BILLS UPLOAD] Directory paths:`, {
                uploadsDir,
                orgDir,
                uploadsExists: fs_5.default.existsSync(uploadsDir),
                orgDirExists: fs_5.default.existsSync(orgDir)
            });
            if (!fs_5.default.existsSync(uploadsDir)) {
                fs_5.default.mkdirSync(uploadsDir, { recursive: true });
                console.log(`\u{1F4C4} [BILLS UPLOAD] Created uploads directory: ${uploadsDir}`);
            }
            if (!fs_5.default.existsSync(orgDir)) {
                fs_5.default.mkdirSync(orgDir, { recursive: true });
                console.log(`\u{1F4C4} [BILLS UPLOAD] Created organization directory: ${orgDir}`);
            }
            const permanentFilePath = path8.join(uploadsDir, filePath);
            console.log(`\u{1F4C4} [BILLS UPLOAD] Copying file from ${req.file.path} to ${permanentFilePath}`);
            fs_5.default.copyFileSync(req.file.path, permanentFilePath);
            console.log(`\u{1F4C4} [BILLS UPLOAD] File successfully saved to permanent storage`);
            let analysisResult = null;
            if (req.file.mimetype.startsWith("image/") || req.file.mimetype === "application/pdf") {
                console.log(`\u{1F916} [BILLS UPLOAD] Starting AI analysis for ${req.file.mimetype} file`);
                try {
                    analysisResult = await geminiBillAnalyzer.analyzeBillDocument(req.file.path, req.file.mimetype);
                    console.log(`\u{1F916} [BILLS UPLOAD] AI analysis successful:`, {
                        hasResult: !!analysisResult,
                        analysisKeys: analysisResult ? Object.keys(analysisResult) : []
                    });
                }
                catch (aiError) {
                    console.warn("\u{1F916} [BILLS UPLOAD] AI analysis failed, continuing without analysis:", aiError);
                }
            }
            else {
                console.log(`\u{1F916} [BILLS UPLOAD] Skipping AI analysis for unsupported file type: ${req.file.mimetype}`);
            }
            const updateData = {
                filePath,
                fileName: req.file.originalname,
                fileSize: req.file.size,
                isAiAnalyzed: !!analysisResult,
                aiAnalysisData: analysisResult,
                updatedAt: /* @__PURE__ */ new Date()
            };
            console.log(`\u{1F4C4} [BILLS UPLOAD] Updating bill ${id} in database with:`, {
                filePath,
                fileName: req.file.originalname,
                fileSize: req.file.size,
                hasAiAnalysis: !!analysisResult
            });
            const updatedBill = await db.update(bills2).set(updateData).where((0, drizzle_orm_20.eq)(bills2.id, id)).returning();
            console.log(`\u{1F4C4} [BILLS UPLOAD] Database update successful for bill ${id}`);
            console.log(`\u{1F4C4} [BILLS UPLOAD] Cleaning up temporary file: ${req.file.path}`);
            fs_5.default.unlinkSync(req.file.path);
            console.log(`\u2705 [BILLS UPLOAD] Upload process completed successfully for bill ${id}`);
            res.json({
                message: "Document uploaded and analyzed successfully",
                bill: updatedBill[0],
                analysisResult
            });
        }
        catch (_error) {
            console.error("\u274C Error uploading document:", _error);
            if (req.file?.path) {
                try {
                    fs_5.default.unlinkSync(req.file.path);
                }
                catch (___cleanupError) {
                    console.error("Error cleaning up temp file:", ___cleanupError);
                }
            }
            res.status(500).json({
                message: "Failed to upload document",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/bills/:id/download-document", requireAuth, async (req, res) => {
        console.log(`\u{1F4E5} [BILLS DOWNLOAD] Document download request for bill ID: ${req.params.id}`);
        console.log(`\u{1F4E5} [BILLS DOWNLOAD] User: ${req.user.id} (${req.user.role})`);
        try {
            const { id } = req.params;
            console.log(`\u{1F4E5} [BILLS DOWNLOAD] Querying database for bill: ${id}`);
            const bill = await db.select().from(bills2).where((0, drizzle_orm_20.eq)(bills2.id, id)).limit(1);
            if (bill.length === 0) {
                console.log(`\u274C [BILLS DOWNLOAD] Bill not found: ${id}`);
                return res.status(404).json({ message: "Bill not found" });
            }
            const billData = bill[0];
            console.log(`\u{1F4E5} [BILLS DOWNLOAD] Bill found:`, {
                id: billData.id,
                hasFilePath: !!billData.filePath,
                hasFileName: !!billData.fileName,
                filePath: billData.filePath,
                fileName: billData.fileName
            });
            if (!billData.filePath || !billData.fileName) {
                console.log(`\u274C [BILLS DOWNLOAD] No document associated with bill ${id}`);
                return res.status(404).json({ message: "No document associated with this bill" });
            }
            const organizations3 = await storage.getUserOrganizations(req.user.id);
            const organizationId = organizations3.length > 0 ? organizations3[0].organizationId : "default";
            const path8 = await Promise.resolve().then(() => __importStar(require("path")));
            const uploadsDir = path8.join(process.cwd(), "uploads");
            const fileFullPath = path8.join(uploadsDir, billData.filePath);
            console.log(`\u{1F4E5} [BILLS DOWNLOAD] File paths:`, {
                uploadsDir,
                filePath: billData.filePath,
                fullFilePath: fileFullPath,
                fileName: billData.fileName,
                organizationId
            });
            if (!fs_5.default.existsSync(fileFullPath)) {
                console.log(`\u274C [BILLS DOWNLOAD] File not found at path: ${fileFullPath}`);
                return res.status(404).json({ message: "Document file not found on server" });
            }
            console.log(`\u{1F4E5} [BILLS DOWNLOAD] File found, setting headers and sending...`);
            res.setHeader("Content-Disposition", `attachment; filename="${billData.fileName}"`);
            res.setHeader("Content-Type", "application/octet-stream");
            console.log(`\u{1F4E5} [BILLS DOWNLOAD] Streaming file to client`);
            res.sendFile(fileFullPath);
            console.log(`\u2705 [BILLS DOWNLOAD] File download initiated successfully for bill ${id}`);
        }
        catch (_error) {
            console.error("\u274C Error downloading document:", _error);
            res.status(500).json({
                message: "Failed to download document",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/bills/:id/apply-ai-analysis", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const bill = await db.select().from(bills2).where((0, drizzle_orm_20.eq)(bills2.id, id)).limit(1);
            if (bill.length === 0) {
                return res.status(404).json({ message: "Bill not found" });
            }
            const billData = bill[0];
            if (!billData.isAiAnalyzed || !billData.aiAnalysisData) {
                return res.status(400).json({ message: "No AI analysis data available for this bill" });
            }
            const analysis = billData.aiAnalysisData;
            const scheduleSignestion = await geminiBillAnalyzer.suggestPaymentSchedule(analysis.category, parseFloat(analysis.totalAmount));
            const updateData = {
                title: analysis.title,
                vendor: analysis.vendor,
                totalAmount: parseFloat(analysis.totalAmount),
                category: analysis.category,
                description: analysis.description,
                paymentType: scheduleSignestion.paymentType,
                schedulePayment: scheduleSignestion.schedulePayment,
                costs: [parseFloat(analysis.totalAmount)],
                startDate: analysis.issueDate || analysis.dueDate || billData.startDate,
                notes: `AI-analyzed document. Original bill number: ${analysis.billNumber || "N/A"}. Confidence: ${(analysis.confidence * 100).toFixed(1)}%. ${scheduleSignestion.reasoning}`,
                updatedAt: /* @__PURE__ */ new Date()
            };
            const updatedBill = await db.update(bills2).set(updateData).where((0, drizzle_orm_20.eq)(bills2.id, id)).returning();
            res.json({
                message: "AI analysis applied successfully",
                bill: updatedBill[0],
                analysis,
                scheduleSignestion
            });
        }
        catch (_error) {
            console.error("\u274C Error applying AI analysis:", _error);
            res.status(500).json({
                message: "Failed to apply AI analysis",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/bills/:id/generate-future", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const bill = await db.select({
                id: bills2.id,
                buildingId: bills2.buildingId,
                billNumber: bills2.billNumber,
                title: bills2.title,
                description: bills2.description,
                category: bills2.category,
                vendor: bills2.vendor,
                paymentType: bills2.paymentType,
                costs: bills2.costs,
                totalAmount: bills2.totalAmount,
                startDate: bills2.startDate,
                status: bills2.status,
                notes: bills2.notes,
                createdBy: bills2.createdBy,
                createdAt: bills2.createdAt,
                updatedAt: bills2.updatedAt
            }).from(bills2).where((0, drizzle_orm_20.eq)(bills2.id, id)).limit(1);
            if (bill.length === 0) {
                return res.status(404).json({
                    message: "Bill not found"
                });
            }
            const building = await db.select({
                id: buildings3.id,
                name: buildings3.name,
                organizationId: buildings3.organizationId
            }).from(buildings3).where((0, drizzle_orm_20.eq)(buildings3.id, bill[0].buildingId)).limit(1);
            if (building.length === 0) {
                return res.status(403).json({
                    message: "Access denied to generate future bills",
                    code: "ACCESS_DENIED"
                });
            }
            if (bill[0].paymentType !== "recurrent") {
                return res.status(400).json({
                    message: "Only recurrent bills can generate future instances"
                });
            }
            const result = await billGenerationService.generateFutureBillInstances(bill[0]);
            res.json({
                message: "Future bills generated successfully",
                billsCreated: result.billsCreated,
                generatedUntil: result.generatedUntil
            });
        }
        catch (_error) {
            console.error("\u274C Error generating future bills:", _error);
            res.status(500).json({
                message: "Failed to generate future bills",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/bills/categories", requireAuth, async (req, res) => {
        try {
            const categories = [
                "insurance",
                "maintenance",
                "salary",
                "utilities",
                "cleaning",
                "security",
                "landscaping",
                "professional_services",
                "administration",
                "repairs",
                "supplies",
                "taxes",
                "technology",
                "reserves",
                "other"
            ];
            res.json(categories);
        }
        catch (_error) {
            console.error("\u274C Error fetching bill categories:", _error);
            res.status(500).json({
                message: "Failed to fetch bill categories",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/bills/:id/generated-stats", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const bill = await db.select({
                id: bills2.id,
                buildingId: bills2.buildingId,
                billNumber: bills2.billNumber,
                title: bills2.title,
                description: bills2.description,
                category: bills2.category,
                vendor: bills2.vendor,
                paymentType: bills2.paymentType,
                costs: bills2.costs,
                totalAmount: bills2.totalAmount,
                startDate: bills2.startDate,
                status: bills2.status,
                notes: bills2.notes,
                createdBy: bills2.createdBy,
                createdAt: bills2.createdAt,
                updatedAt: bills2.updatedAt
            }).from(bills2).where((0, drizzle_orm_20.eq)(bills2.id, id)).limit(1);
            if (bill.length === 0) {
                return res.status(404).json({
                    message: "Bill not found"
                });
            }
            const generatedBills = await db.select({
                id: bills2.id,
                buildingId: bills2.buildingId,
                billNumber: bills2.billNumber,
                title: bills2.title,
                description: bills2.description,
                category: bills2.category,
                vendor: bills2.vendor,
                paymentType: bills2.paymentType,
                costs: bills2.costs,
                totalAmount: bills2.totalAmount,
                startDate: bills2.startDate,
                status: bills2.status,
                notes: bills2.notes,
                createdBy: bills2.createdBy,
                createdAt: bills2.createdAt,
                updatedAt: bills2.updatedAt
            }).from(bills2).where((0, drizzle_orm_20.sql) `bills.notes LIKE '%Auto-generated from:%'`).orderBy(bills2.startDate);
            const stats = generatedBills.map((genBill) => ({
                id: genBill.id,
                title: genBill.title,
                amount: genBill.totalAmount,
                startDate: genBill.startDate,
                status: genBill.status,
                billNumber: genBill.billNumber
            }));
            res.json({
                parentBill: bill[0],
                generatedBills: stats
            });
        }
        catch (_error) {
            console.error("\u274C Error getting generated bills statistics:", _error);
            res.status(500).json({
                message: "Failed to get generated bills statistics",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/bills/analyze-document", requireAuth, upload4.single("document"), async (req, res) => {
        try {
            if (!req.file) {
                return res.status(400).json({
                    message: "No document file provided"
                });
            }
            const analysis = await geminiBillAnalyzer.analyzeBillDocument(req.file.path);
            res.json(analysis);
        }
        catch (_error) {
            console.error("Error analyzing document:", _error);
            res.status(500).json({
                message: "Failed to analyze document",
                _error: _error instanceof Error ? _error.message : "Unknown error"
            });
        }
    });
}
// server/api/residences.ts
init_db();
init_schema();
const drizzle_orm_23 = require("drizzle-orm");
function registerResidenceRoutes(app2) {
    app2.get("/api/user/residences", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userResidencesList = await db.select({
                residenceId: userResidences.residenceId
            }).from(userResidences).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.eq)(userResidences.userId, user.id), (0, drizzle_orm_23.eq)(userResidences.isActive, true)));
            res.json(userResidencesList);
        }
        catch (error) {
            console.error("\u274C Error fetching user residences:", error);
            res.status(500).json({ message: "Failed to fetch user residences" });
        }
    });
    app2.get("/api/residences/:residenceId/assigned-users", requireAuth, async (req, res) => {
        try {
            const { residenceId } = req.params;
            const currentUser = req.user;
            const assignedUsers = await db.select({
                id: users.id,
                username: users.username,
                email: users.email,
                firstName: users.firstName,
                lastName: users.lastName,
                phone: users.phone,
                relationshipType: userResidences.relationshipType,
                startDate: userResidences.startDate,
                endDate: userResidences.endDate,
                isActive: userResidences.isActive
            }).from(userResidences).innerJoin(users, (0, drizzle_orm_23.eq)(userResidences.userId, users.id)).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.eq)(userResidences.residenceId, residenceId), (0, drizzle_orm_23.eq)(userResidences.isActive, true)));
            res.json(assignedUsers);
        }
        catch (error) {
            console.error("\u274C Error fetching assigned users:", error);
            res.status(500).json({ message: "Failed to fetch assigned users" });
        }
    });
    app2.put("/api/residences/:residenceId/assigned-users/:userId", requireAuth, async (req, res) => {
        try {
            const { userId } = req.params;
            const { firstName, lastName, email, phone } = req.body;
            const currentUser = req.user;
            await db.update(users).set({
                firstName,
                lastName,
                email,
                phone,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_23.eq)(users.id, userId));
            res.json({ message: "User updated successfully" });
        }
        catch (error) {
            console.error("\u274C Error updating assigned user:", error);
            res.status(500).json({ message: "Failed to update assigned user" });
        }
    });
    app2.get("/api/residences", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const { search, buildingId, floor } = req.query;
            const conditions = [(0, drizzle_orm_23.eq)(residences.isActive, true)];
            if (buildingId) {
                conditions.push((0, drizzle_orm_23.eq)(residences.buildingId, buildingId));
            }
            if (floor) {
                conditions.push((0, drizzle_orm_23.eq)(residences.floor, parseInt(floor)));
            }
            const accessibleBuildingIds = /* @__PURE__ */ new Set();
            const userOrgs = await db.select({
                organizationId: organizations.id,
                organizationName: organizations.name,
                canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations
            }).from(organizations).innerJoin(userOrganizations, (0, drizzle_orm_23.eq)(userOrganizations.organizationId, organizations.id)).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.eq)(userOrganizations.userId, user.id), (0, drizzle_orm_23.eq)(userOrganizations.isActive, true)));
            const hasGlobalAccess = user.role === "admin" || userOrgs.some((org) => org.organizationName === "Koveo" || org.canAccessAllOrganizations);
            if (hasGlobalAccess) {
                console.log(`\u{1F31F} Admin user or user with global access detected - granting access to ALL residences`);
                const allBuildings = await db.select({ id: buildings.id }).from(buildings).where((0, drizzle_orm_23.eq)(buildings.isActive, true));
                allBuildings.forEach((building) => {
                    accessibleBuildingIds.add(building.id);
                });
            }
            else {
                if (user.role === "admin" || user.role === "manager" || user.role === "demo_manager") {
                    if (userOrgs.length > 0) {
                        const orgIds = userOrgs.map((uo) => uo.organizationId);
                        const orgBuildings = await db.select({ id: buildings.id }).from(buildings).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.inArray)(buildings.organizationId, orgIds), (0, drizzle_orm_23.eq)(buildings.isActive, true)));
                        orgBuildings.forEach((building) => {
                            accessibleBuildingIds.add(building.id);
                        });
                    }
                }
                console.log(`\u{1F50D} [ACCESS DEBUG] Checking residence access for user ${user.id} with role ${user.role}`);
                const userResidenceRecords = await db.select({
                    residenceId: userResidences.residenceId
                }).from(userResidences).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.eq)(userResidences.userId, user.id), (0, drizzle_orm_23.eq)(userResidences.isActive, true)));
                console.log(`\u{1F50D} [ACCESS DEBUG] Found ${userResidenceRecords.length} residence records for user ${user.id}`);
                if (userResidenceRecords.length > 0) {
                    const residenceIds2 = userResidenceRecords.map((ur) => ur.residenceId);
                    const residenceBuildings = await db.select({ id: buildings.id }).from(residences).innerJoin(buildings, (0, drizzle_orm_23.eq)(residences.buildingId, buildings.id)).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.inArray)(residences.id, residenceIds2), (0, drizzle_orm_23.eq)(buildings.isActive, true)));
                    residenceBuildings.forEach((building) => {
                        accessibleBuildingIds.add(building.id);
                    });
                }
            }
            console.log(`\u{1F50D} [ACCESS DEBUG] User ${user.id} has access to ${accessibleBuildingIds.size} buildings:`, Array.from(accessibleBuildingIds));
            if (accessibleBuildingIds.size > 0) {
                conditions.push((0, drizzle_orm_23.inArray)(residences.buildingId, Array.from(accessibleBuildingIds)));
            }
            else {
                return res.json([]);
            }
            const baseQuery = db.select({
                residence: residences,
                building: buildings,
                organization: organizations
            }).from(residences).leftJoin(buildings, (0, drizzle_orm_23.eq)(residences.buildingId, buildings.id)).leftJoin(organizations, (0, drizzle_orm_23.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_23.and)(...conditions));
            let results = await baseQuery;
            if (search) {
                const searchLower = search.toLowerCase();
                results = results.filter((result) => result.residence.unitNumber.toLowerCase().includes(searchLower) || result.building?.name.toLowerCase().includes(searchLower));
            }
            const residenceIds = results.map((r) => r.residence.id);
            const tenants = residenceIds.length > 0 ? await db.select({
                residenceId: userResidences.residenceId,
                tenant: users
            }).from(userResidences).innerJoin(users, (0, drizzle_orm_23.eq)(userResidences.userId, users.id)).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.inArray)(userResidences.residenceId, residenceIds), (0, drizzle_orm_23.eq)(userResidences.isActive, true))) : [];
            const tenantsByResidence = tenants.reduce((acc, { residenceId, tenant }) => {
                if (!acc[residenceId]) {
                    acc[residenceId] = [];
                }
                acc[residenceId].push({
                    id: tenant.id,
                    firstName: tenant.firstName,
                    lastName: tenant.lastName,
                    email: tenant.email
                });
                return acc;
            }, {});
            const residencesList = results.map((result) => ({
                ...result.residence,
                building: result.building,
                organization: result.organization,
                tenants: tenantsByResidence[result.residence.id] || []
            }));
            res.json(residencesList);
        }
        catch (error) {
            console.error("\u274C Error fetching residences:", error);
            res.status(500).json({ message: "Failed to fetch residences" });
        }
    });
    app2.get("/api/residences/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const result = await db.select({
                residence: residences,
                building: buildings,
                organization: organizations
            }).from(residences).leftJoin(buildings, (0, drizzle_orm_23.eq)(residences.buildingId, buildings.id)).leftJoin(organizations, (0, drizzle_orm_23.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.eq)(residences.id, id), (0, drizzle_orm_23.eq)(residences.isActive, true)));
            if (result.length === 0) {
                return res.status(404).json({ message: "Residence not found" });
            }
            const residence = result[0];
            if (user.role !== "admin" && !user.canAccessAllOrganizations) {
                const userHasAccess = await db.select({ count: (0, drizzle_orm_23.sql) `count(*)` }).from(userResidences).leftJoin(residences, (0, drizzle_orm_23.eq)(userResidences.residenceId, residences.id)).leftJoin(buildings, (0, drizzle_orm_23.eq)(residences.buildingId, buildings.id)).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.eq)(userResidences.userId, user.id), (0, drizzle_orm_23.eq)(buildings.organizationId, residence.organization.id)));
                if (userHasAccess[0].count === 0) {
                    return res.status(403).json({ message: "Access denied" });
                }
            }
            const tenants = await db.select({
                id: users.id,
                firstName: users.firstName,
                lastName: users.lastName,
                email: users.email,
                relationshipType: userResidences.relationshipType,
                startDate: userResidences.startDate,
                endDate: userResidences.endDate
            }).from(userResidences).leftJoin(users, (0, drizzle_orm_23.eq)(userResidences.userId, users.id)).where((0, drizzle_orm_23.and)((0, drizzle_orm_23.eq)(userResidences.residenceId, id), (0, drizzle_orm_23.eq)(userResidences.isActive, true)));
            res.json({
                ...residence.residence,
                building: residence.building,
                organization: residence.organization,
                tenants
            });
        }
        catch (error) {
            console.error("\u274C Error fetching residence:", error);
            res.status(500).json({ message: "Failed to fetch residence" });
        }
    });
    app2.put("/api/residences/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const updateData = req.body;
            console.log(`\u{1F3E0} Updating residence ${id} with data:`, updateData);
            delete updateData.id;
            delete updateData.createdAt;
            delete updateData.buildingId;
            const processedData = {
                ...updateData,
                updatedAt: /* @__PURE__ */ new Date()
            };
            if (processedData.squareFootage === null || processedData.squareFootage === "") {
                processedData.squareFootage = null;
            }
            if (processedData.bathrooms === null || processedData.bathrooms === "") {
                processedData.bathrooms = null;
            }
            if (processedData.ownershipPercentage === null || processedData.ownershipPercentage === "") {
                processedData.ownershipPercentage = null;
            }
            if (processedData.monthlyFees === null || processedData.monthlyFees === "") {
                processedData.monthlyFees = null;
            }
            console.log(`\u{1F3E0} Processed data for residence ${id}:`, processedData);
            const updated = await db.update(residences).set(processedData).where((0, drizzle_orm_23.eq)(residences.id, id)).returning();
            if (updated.length === 0) {
                return res.status(404).json({ message: "Residence not found" });
            }
            console.log(`\u2705 Successfully updated residence ${id}`);
            try {
                delayedUpdateService.scheduleResidenceUpdate(id);
            }
            catch (e) {
                console.warn("\u26A0\uFE0F Failed to schedule residence update:", e);
            }
            res.json(updated[0]);
        }
        catch (error) {
            console.error("\u274C Error updating residence:", error);
            console.error("\u274C Error details:", error.message);
            console.error("\u274C Error stack:", error.stack);
            res.status(500).json({
                message: "Failed to update residence",
                error: error.message,
                details: process.env.NODE_ENV === "development" ? error.stack : void 0
            });
        }
    });
    app2.post("/api/buildings/:buildingId/generate-residences", requireAuth, async (req, res) => {
        try {
            const { buildingId } = req.params;
            const building = await db.select().from(buildings).where((0, drizzle_orm_23.eq)(buildings.id, buildingId)).limit(1);
            if (building.length === 0) {
                return res.status(404).json({ message: "Building not found" });
            }
            const buildingData = building[0];
            const totalUnits = buildingData.totalUnits;
            const totalFloors = buildingData.totalFloors || 1;
            if (totalUnits > 300) {
                return res.status(400).json({ message: "Cannot create more than 300 residences per building" });
            }
            const existingResidences = await db.select({ count: (0, drizzle_orm_23.sql) `count(*)` }).from(residences).where((0, drizzle_orm_23.eq)(residences.buildingId, buildingId));
            if (existingResidences[0].count > 0) {
                return res.status(400).json({ message: "Residences already exist for this building" });
            }
            const residencesToCreate = [];
            const unitsPerFloor = Math.ceil(totalUnits / totalFloors);
            for (let unit = 1; unit <= totalUnits; unit++) {
                const floor = Math.ceil(unit / unitsPerFloor);
                const unitOnFloor = (unit - 1) % unitsPerFloor + 1;
                const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, "0")}`;
                residencesToCreate.push({
                    buildingId,
                    unitNumber,
                    floor,
                    isActive: true
                });
            }
            const createdResidences = await db.insert(residences).values(residencesToCreate).returning();
            res.json({
                message: `Successfully created ${createdResidences.length} residences`,
                residences: createdResidences
            });
        }
        catch (error) {
            console.error("\u274C Error generating residences:", error);
            res.status(500).json({ message: "Failed to generate residences" });
        }
    });
}
// server/api/demands.ts
init_db();
init_schema();
const drizzle_orm_24 = require("drizzle-orm");
init_operations();
function registerDemandRoutes(app2) {
    app2.get("/api/demands", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const { buildingId, residenceId, type, status, search } = req.query;
            let query = db.select({
                id: demands.id,
                submitterId: demands.submitterId,
                type: demands.type,
                assignationResidenceId: demands.assignationResidenceId,
                assignationBuildingId: demands.assignationBuildingId,
                description: demands.description,
                filePath: demands.filePath,
                fileName: demands.fileName,
                fileSize: demands.fileSize,
                residenceId: demands.residenceId,
                buildingId: demands.buildingId,
                status: demands.status,
                reviewedBy: demands.reviewedBy,
                reviewedAt: demands.reviewedAt,
                reviewNotes: demands.reviewNotes,
                createdAt: demands.createdAt,
                updatedAt: demands.updatedAt,
                submitter: {
                    id: users.id,
                    firstName: users.firstName,
                    lastName: users.lastName,
                    email: users.email
                },
                residence: {
                    id: residences.id,
                    unitNumber: residences.unitNumber,
                    buildingId: residences.buildingId
                },
                building: {
                    id: buildings.id,
                    name: buildings.name,
                    address: buildings.address
                }
            }).from(demands).innerJoin(users, (0, drizzle_orm_24.eq)(demands.submitterId, users.id)).innerJoin(residences, (0, drizzle_orm_24.eq)(demands.residenceId, residences.id)).innerJoin(buildings, (0, drizzle_orm_24.eq)(demands.buildingId, buildings.id));
            const conditions = [];
            if (user.role === "admin") {
            }
            else if (user.role === "manager") {
                const userOrganizationData = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_24.eq)(userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    const organizationBuildings = await db.select({ buildingId: buildings.id }).from(buildings).where((0, drizzle_orm_24.eq)(buildings.organizationId, organizationId));
                    if (organizationBuildings.length > 0) {
                        const buildingIds = organizationBuildings.map((b) => b.buildingId);
                        conditions.push((0, drizzle_orm_24.inArray)(demands.buildingId, buildingIds));
                    }
                    else {
                        conditions.push((0, drizzle_orm_24.eq)(demands.id, "never-match"));
                    }
                }
                else {
                    conditions.push((0, drizzle_orm_24.eq)(demands.id, "never-match"));
                }
            }
            else {
                conditions.push((0, drizzle_orm_24.eq)(demands.submitterId, user.id));
            }
            if (buildingId) {
                conditions.push((0, drizzle_orm_24.eq)(demands.buildingId, buildingId));
            }
            if (residenceId) {
                conditions.push((0, drizzle_orm_24.eq)(demands.residenceId, residenceId));
            }
            if (type) {
                conditions.push((0, drizzle_orm_24.eq)(demands.type, type));
            }
            if (status) {
                conditions.push((0, drizzle_orm_24.eq)(demands.status, status));
            }
            let finalQuery;
            if (conditions.length > 0) {
                finalQuery = query.where((0, drizzle_orm_24.and)(...conditions));
            }
            else {
                finalQuery = query;
            }
            const results = await finalQuery.orderBy((0, drizzle_orm_24.desc)(demands.createdAt));
            let filteredResults = results;
            if (search) {
                const searchTerm = search.toLowerCase();
                filteredResults = results.filter((demand) => demand.description.toLowerCase().includes(searchTerm) || demand.submitter.firstName?.toLowerCase().includes(searchTerm) || demand.submitter.lastName?.toLowerCase().includes(searchTerm) || demand.residence.unitNumber.toLowerCase().includes(searchTerm) || demand.building.name.toLowerCase().includes(searchTerm));
            }
            res.json(filteredResults);
        }
        catch (error) {
            res.status(500).json({ message: "Failed to fetch demands" });
        }
    });
    app2.get("/api/demands/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const demand = await db.select({
                id: demands.id,
                submitterId: demands.submitterId,
                type: demands.type,
                assignationResidenceId: demands.assignationResidenceId,
                assignationBuildingId: demands.assignationBuildingId,
                description: demands.description,
                filePath: demands.filePath,
                fileName: demands.fileName,
                fileSize: demands.fileSize,
                residenceId: demands.residenceId,
                buildingId: demands.buildingId,
                status: demands.status,
                reviewedBy: demands.reviewedBy,
                reviewedAt: demands.reviewedAt,
                reviewNotes: demands.reviewNotes,
                createdAt: demands.createdAt,
                updatedAt: demands.updatedAt,
                submitter: {
                    id: users.id,
                    firstName: users.firstName,
                    lastName: users.lastName,
                    email: users.email
                },
                residence: {
                    id: residences.id,
                    unitNumber: residences.unitNumber,
                    buildingId: residences.buildingId
                },
                building: {
                    id: buildings.id,
                    name: buildings.name,
                    address: buildings.address
                }
            }).from(demands).innerJoin(users, (0, drizzle_orm_24.eq)(demands.submitterId, users.id)).innerJoin(residences, (0, drizzle_orm_24.eq)(demands.residenceId, residences.id)).innerJoin(buildings, (0, drizzle_orm_24.eq)(demands.buildingId, buildings.id)).where((0, drizzle_orm_24.eq)(demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: "Demand not found" });
            }
            const demandData = demand[0];
            let hasAccess = false;
            if (user.role === "admin") {
                hasAccess = true;
            }
            else if (user.role === "manager") {
                const userOrganizationData = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_24.eq)(userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    const buildingOrganization = await db.select({ organizationId: buildings.organizationId }).from(buildings).where((0, drizzle_orm_24.eq)(buildings.id, demandData.buildingId)).limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        hasAccess = true;
                    }
                }
            }
            else {
                hasAccess = demandData.submitterId === user.id;
            }
            if (!hasAccess) {
                return res.status(403).json({ message: "Access denied" });
            }
            res.json(demandData);
        }
        catch (error) {
            res.status(500).json({ message: "Failed to fetch demand" });
        }
    });
    app2.post("/api/demands", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const demandData = req.body;
            const demandInputSchema = insertDemandSchema.omit({ submitterId: true });
            const validatedData = demandInputSchema.parse(demandData);
            console.log("\u2705 Demand validation passed:", validatedData);
            if (!validatedData.residenceId || !validatedData.buildingId) {
                const userResidenceData = await db.select({
                    residenceId: userResidences.residenceId,
                    buildingId: residences.buildingId
                }).from(userResidences).innerJoin(residences, (0, drizzle_orm_24.eq)(userResidences.residenceId, residences.id)).where((0, drizzle_orm_24.eq)(userResidences.userId, user.id)).limit(1);
                if (userResidenceData.length === 0) {
                    return res.status(400).json({ message: "User must be assigned to a residence to create demands" });
                }
                validatedData.residenceId = validatedData.residenceId || userResidenceData[0].residenceId;
                validatedData.buildingId = validatedData.buildingId || userResidenceData[0].buildingId;
            }
            if (!validatedData.buildingId || !validatedData.residenceId) {
                return res.status(400).json({
                    message: "Building and residence are required to create a demand"
                });
            }
            console.log("\u2705 Final demand data before insertion:", {
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                type: validatedData.type,
                description: validatedData.description
            });
            const demandInsertData = {
                ...validatedData,
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                submitterId: user.id,
                status: validatedData.status || "submitted"
            };
            const newDemand = await db.insert(demands).values([demandInsertData]).returning();
            res.status(201).json(newDemand[0]);
        }
        catch (error) {
            if (error.name === "ZodError") {
                return res.status(400).json({ message: "Invalid demand data", errors: error.errors });
            }
            res.status(500).json({ message: "Failed to create demand" });
        }
    });
    app2.put("/api/demands/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const updates = req.body;
            const currentDemand = await db.select().from(demands).where((0, drizzle_orm_24.eq)(demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: "Demand not found" });
            }
            const demand = currentDemand[0];
            let canUpdate = false;
            let allowedFields = [];
            if (user.role === "admin") {
                canUpdate = true;
                allowedFields = ["status", "reviewNotes", "reviewedBy", "reviewedAt", "description", "type"];
            }
            else if (user.role === "manager") {
                const userOrganizationData = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_24.eq)(userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    const buildingOrganization = await db.select({ organizationId: buildings.organizationId }).from(buildings).where((0, drizzle_orm_24.eq)(buildings.id, demand.buildingId)).limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        canUpdate = true;
                        allowedFields = ["status", "reviewNotes", "reviewedBy", "reviewedAt"];
                    }
                }
            }
            else if (demand.submitterId === user.id) {
                canUpdate = true;
                allowedFields = ["description", "type"];
            }
            if (!canUpdate) {
                return res.status(403).json({ message: "Access denied" });
            }
            const filteredUpdates = {};
            for (const [key, value] of Object.entries(updates)) {
                if (allowedFields.includes(key)) {
                    filteredUpdates[key] = value;
                }
            }
            if (user.role === "admin" || user.role === "manager") {
                if (updates.status && updates.status !== demand.status) {
                    filteredUpdates["reviewedBy"] = user.id;
                    filteredUpdates["reviewedAt"] = /* @__PURE__ */ new Date();
                }
            }
            const updatedDemand = await db.update(demands).set({ ...filteredUpdates, updatedAt: /* @__PURE__ */ new Date() }).where((0, drizzle_orm_24.eq)(demands.id, id)).returning();
            res.json(updatedDemand[0]);
        }
        catch (error) {
            res.status(500).json({ message: "Failed to update demand" });
        }
    });
    app2.delete("/api/demands/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const currentDemand = await db.select().from(demands).where((0, drizzle_orm_24.eq)(demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: "Demand not found" });
            }
            const demand = currentDemand[0];
            let canDelete = false;
            if (user.role === "admin") {
                canDelete = true;
            }
            else if (user.role === "manager") {
                const userOrganizationData = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_24.eq)(userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    const buildingOrganization = await db.select({ organizationId: buildings.organizationId }).from(buildings).where((0, drizzle_orm_24.eq)(buildings.id, demand.buildingId)).limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        canDelete = true;
                    }
                }
            }
            else if (demand.submitterId === user.id) {
                canDelete = true;
            }
            if (!canDelete) {
                return res.status(403).json({ message: "Access denied" });
            }
            await db.delete(demandComments).where((0, drizzle_orm_24.eq)(demandComments.demandId, id));
            await db.delete(demands).where((0, drizzle_orm_24.eq)(demands.id, id));
            res.json({ message: "Demand deleted successfully" });
        }
        catch (error) {
            res.status(500).json({ message: "Failed to delete demand" });
        }
    });
    app2.get("/api/demands/:id/comments", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const demand = await db.select().from(demands).where((0, drizzle_orm_24.eq)(demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: "Demand not found" });
            }
            const demandData = demand[0];
            let hasAccess = false;
            if (user.role === "admin") {
                hasAccess = true;
            }
            else if (user.role === "manager") {
                const userOrganizationData = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_24.eq)(userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    const buildingOrganization = await db.select({ organizationId: buildings.organizationId }).from(buildings).where((0, drizzle_orm_24.eq)(buildings.id, demandData.buildingId)).limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        hasAccess = true;
                    }
                }
            }
            else {
                hasAccess = demandData.submitterId === user.id;
            }
            if (!hasAccess) {
                return res.status(403).json({ message: "Access denied" });
            }
            const comments = await db.select({
                id: demandComments.id,
                demandId: demandComments.demandId,
                commentText: demandComments.commentText,
                commentType: demandComments.commentType,
                isInternal: demandComments.isInternal,
                commenterId: demandComments.commenterId,
                createdAt: demandComments.createdAt,
                author: {
                    id: users.id,
                    firstName: users.firstName,
                    lastName: users.lastName,
                    email: users.email
                }
            }).from(demandComments).innerJoin(users, (0, drizzle_orm_24.eq)(demandComments.commenterId, users.id)).where((0, drizzle_orm_24.eq)(demandComments.demandId, id)).orderBy((0, drizzle_orm_24.asc)(demandComments.createdAt));
            res.json(comments);
        }
        catch (error) {
            res.status(500).json({ message: "Failed to fetch demand comments" });
        }
    });
    app2.post("/api/demands/:id/comments", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const commentData = req.body;
            const validatedData = insertDemandCommentSchema.parse({
                ...commentData,
                demandId: id,
                commenterId: user.id
            });
            const demand = await db.select().from(demands).where((0, drizzle_orm_24.eq)(demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: "Demand not found" });
            }
            const demandData = demand[0];
            let hasAccess = false;
            if (user.role === "admin") {
                hasAccess = true;
            }
            else if (user.role === "manager") {
                const userOrganizationData = await db.select({ organizationId: userOrganizations.organizationId }).from(userOrganizations).where((0, drizzle_orm_24.eq)(userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    const buildingOrganization = await db.select({ organizationId: buildings.organizationId }).from(buildings).where((0, drizzle_orm_24.eq)(buildings.id, demandData.buildingId)).limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        hasAccess = true;
                    }
                }
            }
            else {
                hasAccess = demandData.submitterId === user.id;
            }
            if (!hasAccess) {
                return res.status(403).json({ message: "Access denied" });
            }
            const newComment = await db.insert(demandComments).values(validatedData).returning();
            res.status(201).json(newComment[0]);
        }
        catch (error) {
            if (error.name === "ZodError") {
                return res.status(400).json({ message: "Invalid comment data", errors: error.errors });
            }
            res.status(500).json({ message: "Failed to create comment" });
        }
    });
}
// server/api/feature-requests.ts
init_storage();
init_schema();
const zod_15 = require("zod");
const multer_6 = __importDefault(require("multer"));
const path_6 = __importDefault(require("path"));
const fs_6 = __importDefault(require("fs"));
const uuid_4 = require("uuid");
var storage_config2 = multer_6.default.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path_6.default.join(process.cwd(), "uploads", "feature-requests");
        if (!fs_6.default.existsSync(uploadDir)) {
            fs_6.default.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueId = (0, uuid_4.v4)();
        const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, "_");
        const fileName = `${uniqueId}-${originalName}`;
        cb(null, fileName);
    }
});
var upload5 = (0, multer_6.default)({ storage: storage_config2 });
function registerFeatureRequestRoutes(app2) {
    app2.get("/api/feature-requests", requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            console.log(`\u{1F4CB} Fetching feature requests for user ${currentUser.id} with role ${currentUser.role}`);
            const featureRequests2 = await storage.getFeatureRequestsForUser(currentUser.id, currentUser.role, currentUser.organizationId);
            console.log(`\u2705 Found ${featureRequests2.length} feature requests for user ${currentUser.id}`);
            res.json(featureRequests2);
        }
        catch (error) {
            console.error("\u274C Error fetching feature requests:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch feature requests"
            });
        }
    });
    app2.get("/api/feature-requests/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Feature request ID is required"
                });
            }
            const featureRequest = await storage.getFeatureRequest(id, currentUser.id, currentUser.role, currentUser.organizationId);
            if (!featureRequest) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Feature request not found or access denied"
                });
            }
            res.json(featureRequest);
        }
        catch (error) {
            console.error("\u274C Error fetching feature request:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to fetch feature request"
            });
        }
    });
    app2.post("/api/feature-requests", requireAuth, upload5.single("file"), async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const validation = insertFeatureRequestSchema.safeParse({
                ...req.body,
                createdBy: currentUser.id
            });
            if (!validation.success) {
                return res.status(400).json({
                    error: "Validation failed",
                    message: "Invalid feature request data",
                    details: validation.error.issues
                });
            }
            const featureRequestData = validation.data;
            if (req.file) {
                featureRequestData.filePath = req.file.path;
                featureRequestData.fileName = req.file.originalname;
                featureRequestData.fileSize = req.file.size;
            }
            if (req.body.file_content) {
                try {
                    const textFilePath = path_6.default.join(process.cwd(), "uploads", "feature-requests");
                    if (!fs_6.default.existsSync(textFilePath)) {
                        fs_6.default.mkdirSync(textFilePath, { recursive: true });
                    }
                    const fileName = `${(0, uuid_4.v4)()}-text-document.txt`;
                    const fullPath = path_6.default.join(textFilePath, fileName);
                    fs_6.default.writeFileSync(fullPath, req.body.file_content, "utf8");
                    featureRequestData.filePath = fullPath;
                    featureRequestData.fileName = fileName;
                    featureRequestData.fileSize = Buffer.byteLength(req.body.file_content, "utf8");
                }
                catch (fsError) {
                    console.error("Error saving feature request text content:", fsError);
                    return res.status(500).json({
                        error: "Internal server error",
                        message: "Failed to save text content as file"
                    });
                }
            }
            const featureRequest = await storage.createFeatureRequest(featureRequestData);
            console.log(`\u{1F4A1} Created new feature request ${featureRequest.id} by user ${currentUser.id}`);
            res.status(201).json(featureRequest);
        }
        catch (error) {
            console.error("\u274C Error creating feature request:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to create feature request"
            });
        }
    });
    app2.patch("/api/feature-requests/:id", requireAuth, upload5.single("file"), async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const existingFeatureRequest = await storage.getFeatureRequest(id, currentUser.id, currentUser.role, currentUser.organizationId);
            if (!existingFeatureRequest) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Feature request not found or access denied"
                });
            }
            const canEdit = currentUser.role === "admin" || currentUser.role === "manager" && existingFeatureRequest.createdBy === currentUser.id || existingFeatureRequest.createdBy === currentUser.id;
            if (!canEdit) {
                return res.status(403).json({
                    error: "Forbidden",
                    message: "You can only edit your own feature requests"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Feature request ID is required"
                });
            }
            const updateSchema = zod_15.z.object({
                title: zod_15.z.string().min(1, "Title is required").max(200, "Title must not exceed 200 characters").optional(),
                description: zod_15.z.string().min(10, "Description must be at least 10 characters").max(2e3, "Description must not exceed 2000 characters").optional(),
                need: zod_15.z.string().min(5, "Need must be at least 5 characters").max(500, "Need must not exceed 500 characters").optional(),
                category: zod_15.z.enum([
                    "dashboard",
                    "property_management",
                    "resident_management",
                    "financial_management",
                    "maintenance",
                    "document_management",
                    "communication",
                    "reports",
                    "mobile_app",
                    "integrations",
                    "security",
                    "performance",
                    "other"
                ]).optional(),
                page: zod_15.z.string().min(1, "Page is required").optional(),
                status: zod_15.z.enum(["submitted", "under_review", "planned", "in_progress", "completed", "rejected"]).optional(),
                assignedTo: zod_15.z.string().uuid().nullable().optional(),
                adminNotes: zod_15.z.string().optional(),
                mergedIntoId: zod_15.z.string().uuid().nullable().optional()
            });
            const validation = updateSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    error: "Validation failed",
                    message: "Invalid update data",
                    details: validation.error.issues
                });
            }
            const updates = validation.data;
            if (req.file) {
                updates.filePath = req.file.path;
                updates.fileName = req.file.originalname;
                updates.fileSize = req.file.size;
            }
            const featureRequest = await storage.updateFeatureRequest(id, updates, currentUser.id, currentUser.role);
            if (!featureRequest) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Feature request not found or access denied"
                });
            }
            console.log(`\u{1F4DD} Updated feature request ${id} by user ${currentUser.id}`);
            res.json(featureRequest);
        }
        catch (error) {
            console.error("\u274C Error updating feature request:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to update feature request"
            });
        }
    });
    app2.delete("/api/feature-requests/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (currentUser.role !== "admin") {
                return res.status(403).json({
                    error: "Forbidden",
                    message: "Only administrators can delete feature requests"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Feature request ID is required"
                });
            }
            const deleted = await storage.deleteFeatureRequest(id, currentUser.id, currentUser.role);
            if (!deleted) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Feature request not found or access denied"
                });
            }
            console.log(`\u{1F5D1}\uFE0F Deleted feature request ${id} by user ${currentUser.id}`);
            res.status(204).send();
        }
        catch (error) {
            console.error("\u274C Error deleting feature request:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to delete feature request"
            });
        }
    });
    app2.get("/api/feature-requests/:id/file", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const { download } = req.query;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Feature request ID is required"
                });
            }
            const featureRequest = await storage.getFeatureRequest(id, currentUser.id, currentUser.role, currentUser.organizationId);
            if (!featureRequest) {
                return res.status(404).json({
                    error: "Not found",
                    message: "Feature request not found or access denied"
                });
            }
            if (!featureRequest.filePath || !featureRequest.fileName) {
                return res.status(404).json({
                    error: "No file attachment",
                    message: "This feature request does not have a file attachment"
                });
            }
            const filePath = featureRequest.filePath;
            const fileName = featureRequest.fileName;
            const fullFilePath = path_6.default.isAbsolute(filePath) ? filePath : path_6.default.join(process.cwd(), "uploads", filePath);
            if (!fs_6.default.existsSync(fullFilePath)) {
                console.error(`\u274C File not found on disk: ${fullFilePath}`);
                return res.status(404).json({
                    error: "File not found",
                    message: "The file attachment could not be found"
                });
            }
            console.log(`\u{1F4CE} Serving file for feature request ${id}: ${fileName}`);
            const getContentType = (filename) => {
                const ext = filename.toLowerCase().split(".").pop();
                switch (ext) {
                    case "pdf":
                        return "application/pdf";
                    case "jpg":
                    case "jpeg":
                        return "image/jpeg";
                    case "png":
                        return "image/png";
                    case "gif":
                        return "image/gif";
                    case "doc":
                        return "application/msword";
                    case "docx":
                        return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                    case "txt":
                        return "text/plain";
                    default:
                        return "application/octet-stream";
                }
            };
            const contentType = getContentType(fileName);
            res.setHeader("Content-Type", contentType);
            const encodedFilename = Buffer.from(fileName, "utf8").toString("binary");
            if (download === "true") {
                res.setHeader("Content-Disposition", `attachment; filename="${encodedFilename}"; filename*=UTF-8''${encodeURIComponent(fileName)}`);
            }
            else {
                res.setHeader("Content-Disposition", `inline; filename="${encodedFilename}"; filename*=UTF-8''${encodeURIComponent(fileName)}`);
            }
            const fileStream = fs_6.default.createReadStream(fullFilePath);
            fileStream.pipe(res);
            fileStream.on("error", (error) => {
                console.error(`\u274C Error streaming file for feature request ${id}:`, error);
                if (!res.headersSent) {
                    res.status(500).json({ error: "Failed to stream file" });
                }
            });
        }
        catch (error) {
            console.error("\u274C Error serving feature request file:", error);
            if (!res.headersSent) {
                res.status(500).json({
                    error: "Internal server error",
                    message: "Failed to serve file"
                });
            }
        }
    });
    app2.post("/api/feature-requests/:id/upvote", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Feature request ID is required"
                });
            }
            const validation = insertFeatureRequestUpvoteSchema.safeParse({
                featureRequestId: id,
                userId: currentUser.id
            });
            if (!validation.success) {
                return res.status(400).json({
                    error: "Validation failed",
                    message: "Invalid upvote data",
                    details: validation.error.issues
                });
            }
            const upvoteData = validation.data;
            const result = await storage.upvoteFeatureRequest(upvoteData);
            if (!result.success) {
                return res.status(400).json({
                    error: "Upvote failed",
                    message: result.message
                });
            }
            console.log(`\u{1F44D} User ${currentUser.id} upvoted feature request ${id}`);
            res.json(result.data);
        }
        catch (error) {
            console.error("\u274C Error upvoting feature request:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to upvote feature request"
            });
        }
    });
    app2.delete("/api/feature-requests/:id/upvote", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: "Bad request",
                    message: "Feature request ID is required"
                });
            }
            const result = await storage.removeFeatureRequestUpvote(id, currentUser.id);
            if (!result.success) {
                return res.status(400).json({
                    error: "Remove upvote failed",
                    message: result.message
                });
            }
            console.log(`\u{1F44E} User ${currentUser.id} removed upvote from feature request ${id}`);
            res.json(result.data);
        }
        catch (error) {
            console.error("\u274C Error removing upvote from feature request:", error);
            res.status(500).json({
                error: "Internal server error",
                message: "Failed to remove upvote from feature request"
            });
        }
    });
}
// server/api/contacts.ts
init_db();
init_schema();
const drizzle_orm_25 = require("drizzle-orm");
function registerContactRoutes(app2) {
    app2.get("/api/contacts/:entity/:entityId", requireAuth, async (req, res) => {
        try {
            const { entity, entityId } = req.params;
            const user = req.user;
            if (!["organization", "building", "residence"].includes(entity)) {
                return res.status(400).json({ message: "Invalid entity type" });
            }
            const entityContacts = await db.select().from(contacts).where((0, drizzle_orm_25.and)((0, drizzle_orm_25.eq)(contacts.entity, entity), (0, drizzle_orm_25.eq)(contacts.entityId, entityId), (0, drizzle_orm_25.eq)(contacts.isActive, true)));
            res.json(entityContacts);
        }
        catch (error) {
            console.error("\u274C Error fetching entity contacts:", error);
            res.status(500).json({ message: "Failed to fetch contacts" });
        }
    });
    app2.get("/api/residences/:residenceId/contacts", requireAuth, async (req, res) => {
        try {
            const { residenceId } = req.params;
            const user = req.user;
            if (user.role !== "admin") {
                const hasAccess = await db.select().from(residences).innerJoin(buildings, (0, drizzle_orm_25.eq)(residences.buildingId, buildings.id)).innerJoin(organizations, (0, drizzle_orm_25.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_25.and)((0, drizzle_orm_25.eq)(residences.id, residenceId), (0, drizzle_orm_25.eq)(residences.isActive, true)));
                if (hasAccess.length === 0) {
                    return res.status(403).json({ message: "Access denied" });
                }
            }
            const residenceContacts = await db.select().from(contacts).where((0, drizzle_orm_25.and)((0, drizzle_orm_25.eq)(contacts.entity, "residence"), (0, drizzle_orm_25.eq)(contacts.entityId, residenceId), (0, drizzle_orm_25.eq)(contacts.isActive, true)));
            res.json(residenceContacts);
        }
        catch (error) {
            console.error("\u274C Error fetching residence contacts:", error);
            res.status(500).json({ message: "Failed to fetch residence contacts" });
        }
    });
    app2.get("/api/contacts", requireAuth, async (req, res) => {
        try {
            const { entity, entityId } = req.query;
            const user = req.user;
            if (!entity || !entityId) {
                return res.json([]);
            }
            if (entity === "building") {
                const hasAccess = await db.select().from(buildings).innerJoin(organizations, (0, drizzle_orm_25.eq)(buildings.organizationId, organizations.id)).where((0, drizzle_orm_25.and)((0, drizzle_orm_25.eq)(buildings.id, entityId), (0, drizzle_orm_25.eq)(buildings.isActive, true)));
                if (hasAccess.length === 0) {
                    return res.status(404).json({ message: "Building not found" });
                }
            }
            const entityContacts = await db.select().from(contacts).where((0, drizzle_orm_25.and)((0, drizzle_orm_25.eq)(contacts.entity, entity), (0, drizzle_orm_25.eq)(contacts.entityId, entityId), (0, drizzle_orm_25.eq)(contacts.isActive, true)));
            res.json(entityContacts);
        }
        catch (error) {
            console.error("\u274C Error fetching contacts:", error);
            res.status(500).json({ message: "Failed to fetch contacts" });
        }
    });
    app2.post("/api/contacts", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const validatedData = insertContactSchema.parse(req.body);
            const { entity, entityId, name, email, phone, contactCategory } = validatedData;
            if (entity === "building" && user.role !== "admin" && user.role !== "manager") {
                return res.status(403).json({ message: "Only managers and admins can add building contacts" });
            }
            if (entity === "residence") {
                const residence = await db.select().from(residences).where((0, drizzle_orm_25.eq)(residences.id, entityId)).limit(1);
                if (residence.length === 0) {
                    return res.status(400).json({ message: "Residence not found" });
                }
            }
            else if (entity === "building") {
                const building = await db.select().from(buildings).where((0, drizzle_orm_25.eq)(buildings.id, entityId)).limit(1);
                if (building.length === 0) {
                    return res.status(400).json({ message: "Building not found" });
                }
            }
            const [newContact] = await db.insert(contacts).values([
                {
                    ...validatedData,
                    entity: validatedData.entity,
                    contactCategory: validatedData.contactCategory
                }
            ]).returning();
            res.status(201).json(newContact);
        }
        catch (error) {
            console.error("\u274C Error creating contact:", error);
            res.status(500).json({ message: "Failed to create contact" });
        }
    });
    app2.patch("/api/contacts/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const updates = req.body;
            const existing = await db.select().from(contacts).where((0, drizzle_orm_25.eq)(contacts.id, id)).limit(1);
            if (existing.length === 0) {
                return res.status(404).json({ message: "Contact not found" });
            }
            const contact = existing[0];
            if (user.role !== "admin" && user.role !== "manager") {
                return res.status(403).json({ message: "Access denied" });
            }
            const [updatedContact] = await db.update(contacts).set({
                ...updates,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_25.eq)(contacts.id, id)).returning();
            res.json(updatedContact);
        }
        catch (error) {
            console.error("\u274C Error updating contact:", error);
            res.status(500).json({ message: "Failed to update contact" });
        }
    });
    app2.delete("/api/contacts/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const existing = await db.select().from(contacts).where((0, drizzle_orm_25.eq)(contacts.id, id)).limit(1);
            if (existing.length === 0) {
                return res.status(404).json({ message: "Contact not found" });
            }
            const contact = existing[0];
            if (user.role !== "admin" && user.role !== "manager" && user.role !== "resident") {
                return res.status(403).json({ message: "Access denied" });
            }
            await db.update(contacts).set({
                isActive: false,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_25.eq)(contacts.id, id));
            res.json({ message: "Contact deleted successfully" });
        }
        catch (error) {
            console.error("\u274C Error deleting contact:", error);
            res.status(500).json({ message: "Failed to delete contact" });
        }
    });
}
// server/api/common-spaces.ts
init_db();
const drizzle_orm_26 = require("drizzle-orm");
init_schema();
const zod_16 = require("zod");
var { commonSpaces: commonSpaces2, bookings: bookings2, userBookingRestrictions: userBookingRestrictions2, userTimeLimits: userTimeLimits2, buildings: buildings4, users: users4, userResidences: userResidences3, userOrganizations: userOrganizations3 } = schema_exports;
var commonSpaceFilterSchema = zod_16.z.object({
    building_id: zod_16.z.string().uuid().optional()
});
var bookingFilterSchema = zod_16.z.object({
    start_date: zod_16.z.string().datetime().optional(),
    end_date: zod_16.z.string().datetime().optional()
});
var calendarQuerySchema = zod_16.z.object({
    start_date: zod_16.z.string().datetime(),
    end_date: zod_16.z.string().datetime(),
    view: zod_16.z.enum(["month", "week", "day"]).optional().default("month")
});
var buildingCalendarSchema = zod_16.z.object({
    buildingId: zod_16.z.string().uuid()
});
var createBookingSchema = zod_16.z.object({
    start_time: zod_16.z.string().datetime(),
    end_time: zod_16.z.string().datetime()
});
var createRestrictionSchema = zod_16.z.object({
    common_space_id: zod_16.z.string().uuid(),
    is_blocked: zod_16.z.boolean(),
    reason: zod_16.z.string().optional()
});
var createCommonSpaceSchema = zod_16.z.object({
    name: zod_16.z.string().min(1, "Name is required").max(100, "Name too long"),
    description: zod_16.z.string().optional(),
    building_id: zod_16.z.string().uuid("Building ID must be a valid UUID"),
    is_reservable: zod_16.z.boolean().default(true),
    capacity: zod_16.z.number().int().min(1).max(200).optional(),
    opening_hours: zod_16.z.object({
        start: zod_16.z.string().regex(/^\d{2}:\d{2}$/, "Invalid time format"),
        end: zod_16.z.string().regex(/^\d{2}:\d{2}$/, "Invalid time format")
    }).optional(),
    weekly_hours: zod_16.z.record(zod_16.z.string(), zod_16.z.object({
        start: zod_16.z.string().regex(/^\d{2}:\d{2}$/, "Invalid time format"),
        end: zod_16.z.string().regex(/^\d{2}:\d{2}$/, "Invalid time format")
    })).optional(),
    available_days: zod_16.z.array(zod_16.z.enum(["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"])).optional()
});
var setTimeLimitSchema = zod_16.z.object({
    user_id: zod_16.z.string().uuid(),
    common_space_id: zod_16.z.string().uuid().optional(),
    // null means applies to all spaces
    limit_type: zod_16.z.enum(["monthly", "yearly"]),
    limit_hours: zod_16.z.number().int().min(1).max(8760)
    // Max 1 year worth of hours
});
var spaceIdSchema = zod_16.z.object({
    spaceId: zod_16.z.string().uuid()
});
var bookingIdSchema = zod_16.z.object({
    bookingId: zod_16.z.string().uuid()
});
var userIdSchema = zod_16.z.object({
    userId: zod_16.z.string().uuid()
});
async function getAccessibleBuildingIds(user) {
    if (user.role === "admin") {
        const allBuildings = await db.select({ buildingId: buildings4.id }).from(buildings4).where((0, drizzle_orm_26.eq)(buildings4.isActive, true));
        return allBuildings.map((b) => b.buildingId);
    }
    const userOrgs = await db.select({
        organizationId: organizations.id,
        organizationName: organizations.name,
        canAccessAllOrganizations: userOrganizations3.canAccessAllOrganizations
    }).from(organizations).innerJoin(userOrganizations3, (0, drizzle_orm_26.eq)(userOrganizations3.organizationId, organizations.id)).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(userOrganizations3.userId, user.id), (0, drizzle_orm_26.eq)(userOrganizations3.isActive, true)));
    const hasGlobalAccess = userOrgs.some((org) => org.organizationName === "Koveo" || org.canAccessAllOrganizations);
    if (hasGlobalAccess) {
        const allBuildings = await db.select({ buildingId: buildings4.id }).from(buildings4).where((0, drizzle_orm_26.eq)(buildings4.isActive, true));
        return allBuildings.map((b) => b.buildingId);
    }
    if (user.role === "manager" || user.role === "demo_manager") {
        if (userOrgs.length > 0) {
            const orgIds = userOrgs.map((uo) => uo.organizationId);
            const orgBuildings = await db.select({ buildingId: buildings4.id }).from(buildings4).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.inArray)(buildings4.organizationId, orgIds), (0, drizzle_orm_26.eq)(buildings4.isActive, true)));
            return orgBuildings.map((b) => b.buildingId);
        }
    }
    const userBuildingIds = await db.select({ buildingId: residences.buildingId }).from(userResidences3).innerJoin(residences, (0, drizzle_orm_26.eq)(userResidences3.residenceId, residences.id)).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(userResidences3.userId, user.id), (0, drizzle_orm_26.eq)(userResidences3.isActive, true)));
    return userBuildingIds.map((b) => b.buildingId);
}
async function getUserBookingHours(userId, commonSpaceId, limitType) {
    const now = /* @__PURE__ */ new Date();
    let startDate;
    if (limitType === "monthly") {
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    }
    else {
        startDate = new Date(now.getFullYear(), 0, 1);
    }
    const conditions = [
        (0, drizzle_orm_26.eq)(bookings2.userId, userId),
        (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"),
        (0, drizzle_orm_26.gte)(bookings2.startTime, startDate)
    ];
    if (commonSpaceId) {
        conditions.push((0, drizzle_orm_26.eq)(bookings2.commonSpaceId, commonSpaceId));
    }
    const userBookings = await db.select({
        totalHours: (0, drizzle_orm_26.sql) `EXTRACT(EPOCH FROM SUM(${bookings2.endTime} - ${bookings2.startTime})) / 3600`
    }).from(bookings2).where((0, drizzle_orm_26.and)(...conditions));
    return userBookings[0]?.totalHours || 0;
}
async function checkUserTimeLimit(userId, commonSpaceId, newBookingHours) {
    const timeLimits = await db.select().from(userTimeLimits2).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(userTimeLimits2.userId, userId), (0, drizzle_orm_26.or)((0, drizzle_orm_26.eq)(userTimeLimits2.commonSpaceId, commonSpaceId), (0, drizzle_orm_26.sql) `${userTimeLimits2.commonSpaceId} IS NULL`))).orderBy(userTimeLimits2.commonSpaceId);
    if (timeLimits.length === 0) {
        return { withinLimit: true };
    }
    const activeLimit = timeLimits[0];
    const currentHours = await getUserBookingHours(userId, activeLimit.commonSpaceId, activeLimit.limitType);
    const totalAfterBooking = currentHours + newBookingHours;
    const remainingHours = Math.max(0, activeLimit.limitHours - currentHours);
    if (totalAfterBooking > activeLimit.limitHours) {
        const limitPeriod = activeLimit.limitType === "monthly" ? "ce mois" : "cette ann\xE9e";
        return {
            withinLimit: false,
            message: `Limite de temps d\xE9pass\xE9e. Vous avez utilis\xE9 ${Math.round(currentHours)}h sur ${activeLimit.limitHours}h autoris\xE9es pour ${limitPeriod}. Il vous reste ${Math.round(remainingHours)}h disponibles.`,
            remainingHours
        };
    }
    return { withinLimit: true, remainingHours };
}
async function hasOverlappingBookings(commonSpaceId, startTime, endTime, excludeBookingId) {
    const conditions = [
        (0, drizzle_orm_26.eq)(bookings2.commonSpaceId, commonSpaceId),
        (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"),
        (0, drizzle_orm_26.or)(
        // New booking starts during existing booking
        (0, drizzle_orm_26.and)((0, drizzle_orm_26.gte)(bookings2.startTime, startTime), (0, drizzle_orm_26.lte)(bookings2.startTime, endTime)), 
        // New booking ends during existing booking
        (0, drizzle_orm_26.and)((0, drizzle_orm_26.gte)(bookings2.endTime, startTime), (0, drizzle_orm_26.lte)(bookings2.endTime, endTime)), 
        // New booking completely contains existing booking
        (0, drizzle_orm_26.and)((0, drizzle_orm_26.lte)(bookings2.startTime, startTime), (0, drizzle_orm_26.gte)(bookings2.endTime, endTime)), 
        // Existing booking completely contains new booking
        (0, drizzle_orm_26.and)((0, drizzle_orm_26.gte)(bookings2.startTime, startTime), (0, drizzle_orm_26.lte)(bookings2.endTime, endTime)))
    ];
    if (excludeBookingId) {
        conditions.push((0, drizzle_orm_26.sql) `${bookings2.id} != ${excludeBookingId}`);
    }
    const overlapping = await db.select({ id: bookings2.id }).from(bookings2).where((0, drizzle_orm_26.and)(...conditions)).limit(1);
    return overlapping.length > 0;
}
async function isUserBlocked(userId, commonSpaceId) {
    const restriction = await db.select({ isBlocked: userBookingRestrictions2.isBlocked }).from(userBookingRestrictions2).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(userBookingRestrictions2.userId, userId), (0, drizzle_orm_26.eq)(userBookingRestrictions2.commonSpaceId, commonSpaceId))).limit(1);
    return restriction.length > 0 && restriction[0].isBlocked;
}
function isWithinOpeningHours(startTime, endTime, openingHours) {
    if (!openingHours || openingHours.length === 0) {
        return true;
    }
    const startDay = startTime.toLocaleDateString("en-US", { weekday: "long" });
    const endDay = endTime.toLocaleDateString("en-US", { weekday: "long" });
    if (startDay !== endDay) {
        return false;
    }
    const dayHours = openingHours.find((oh) => oh.day === startDay);
    if (!dayHours) {
        return false;
    }
    const startTimeStr = startTime.toTimeString().slice(0, 5);
    const endTimeStr = endTime.toTimeString().slice(0, 5);
    return startTimeStr >= dayHours.open && endTimeStr <= dayHours.close;
}
function registerCommonSpacesRoutes(app2) {
    app2.get("/api/common-spaces", requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const queryValidation = commonSpaceFilterSchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: "Invalid query parameters",
                    errors: queryValidation.error.issues
                });
            }
            const { building_id } = queryValidation.data;
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (accessibleBuildingIds.length === 0) {
                return res.json([]);
            }
            const conditions = [(0, drizzle_orm_26.eq)(buildings4.isActive, true)];
            if (building_id) {
                if (!accessibleBuildingIds.includes(building_id)) {
                    return res.status(403).json({
                        message: "Access denied to this building",
                        code: "INSUFFICIENT_PERMISSIONS"
                    });
                }
                conditions.push((0, drizzle_orm_26.eq)(commonSpaces2.buildingId, building_id));
            }
            else {
                conditions.push((0, drizzle_orm_26.inArray)(commonSpaces2.buildingId, accessibleBuildingIds));
            }
            const spaces = await db.select({
                id: commonSpaces2.id,
                name: commonSpaces2.name,
                description: commonSpaces2.description,
                buildingId: commonSpaces2.buildingId,
                buildingName: buildings4.name,
                isReservable: commonSpaces2.isReservable,
                capacity: commonSpaces2.capacity,
                contactPersonId: commonSpaces2.contactPersonId,
                contactPersonName: (0, drizzle_orm_26.sql) `CONCAT(${users4.firstName}, ' ', ${users4.lastName})`,
                openingHours: commonSpaces2.openingHours,
                bookingRules: commonSpaces2.bookingRules,
                createdAt: commonSpaces2.createdAt,
                updatedAt: commonSpaces2.updatedAt
            }).from(commonSpaces2).innerJoin(buildings4, (0, drizzle_orm_26.eq)(commonSpaces2.buildingId, buildings4.id)).leftJoin(users4, (0, drizzle_orm_26.eq)(commonSpaces2.contactPersonId, users4.id)).where((0, drizzle_orm_26.and)(...conditions)).orderBy(buildings4.name, commonSpaces2.name);
            res.json(spaces);
        }
        catch (error) {
            res.status(500).json({
                message: "Failed to fetch common spaces",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/common-spaces/:spaceId/bookings", requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid space ID",
                    errors: paramValidation.error.issues
                });
            }
            const queryValidation = bookingFilterSchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: "Invalid query parameters",
                    errors: queryValidation.error.issues
                });
            }
            const { spaceId } = paramValidation.data;
            const { start_date, end_date } = queryValidation.data;
            const space = await db.select({
                id: commonSpaces2.id,
                buildingId: commonSpaces2.buildingId
            }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.id, spaceId)).limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: "Common space not found",
                    code: "NOT_FOUND"
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                return res.status(403).json({
                    message: "Access denied to this common space",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const conditions = [(0, drizzle_orm_26.eq)(bookings2.commonSpaceId, spaceId)];
            if (start_date) {
                conditions.push((0, drizzle_orm_26.gte)(bookings2.startTime, new Date(start_date)));
            }
            if (end_date) {
                conditions.push((0, drizzle_orm_26.lte)(bookings2.endTime, new Date(end_date)));
            }
            const spaceBookings = await db.select({
                id: bookings2.id,
                commonSpaceId: bookings2.commonSpaceId,
                userId: bookings2.userId,
                userName: (0, drizzle_orm_26.sql) `CONCAT(${users4.firstName}, ' ', ${users4.lastName})`,
                userEmail: users4.email,
                startTime: bookings2.startTime,
                endTime: bookings2.endTime,
                status: bookings2.status,
                createdAt: bookings2.createdAt,
                updatedAt: bookings2.updatedAt
            }).from(bookings2).innerJoin(users4, (0, drizzle_orm_26.eq)(bookings2.userId, users4.id)).where((0, drizzle_orm_26.and)(...conditions)).orderBy(bookings2.startTime);
            res.json(spaceBookings);
        }
        catch (error) {
            console.error("\u274C Error fetching bookings:", error);
            res.status(500).json({
                message: "Failed to fetch bookings",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/common-spaces/:spaceId/bookings", requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid space ID",
                    errors: paramValidation.error.issues
                });
            }
            console.log("\u{1F50D} Booking request body:", req.body);
            const bodyValidation = createBookingSchema.safeParse(req.body);
            if (!bodyValidation.success) {
                console.log("\u274C Validation failed:", bodyValidation.error.issues);
                return res.status(400).json({
                    message: "Invalid booking data",
                    errors: bodyValidation.error.issues
                });
            }
            const { spaceId } = paramValidation.data;
            const { start_time, end_time } = bodyValidation.data;
            const startTime = new Date(start_time);
            const endTime = new Date(end_time);
            if (startTime >= endTime) {
                return res.status(400).json({
                    message: "Start time must be before end time",
                    code: "INVALID_TIME_RANGE"
                });
            }
            const now = /* @__PURE__ */ new Date();
            const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1e3);
            if (startTime < fiveMinutesAgo) {
                return res.status(400).json({
                    message: "Cannot book in the past",
                    code: "INVALID_TIME_RANGE"
                });
            }
            const space = await db.select({
                id: commonSpaces2.id,
                name: commonSpaces2.name,
                buildingId: commonSpaces2.buildingId,
                isReservable: commonSpaces2.isReservable,
                openingHours: commonSpaces2.openingHours
            }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.id, spaceId)).limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: "Common space not found",
                    code: "NOT_FOUND"
                });
            }
            const commonSpace = space[0];
            if (!commonSpace.isReservable) {
                return res.status(400).json({
                    message: "This common space is not reservable",
                    code: "NOT_RESERVABLE"
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(commonSpace.buildingId)) {
                return res.status(403).json({
                    message: "Access denied to this common space",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const blocked = await isUserBlocked(user.id, spaceId);
            if (blocked) {
                return res.status(403).json({
                    message: "You are blocked from booking this space",
                    code: "USER_BLOCKED"
                });
            }
            if (commonSpace.openingHours && !isWithinOpeningHours(startTime, endTime, commonSpace.openingHours)) {
                return res.status(400).json({
                    message: "Booking time is outside opening hours",
                    code: "OUTSIDE_OPENING_HOURS"
                });
            }
            const hasOverlap = await hasOverlappingBookings(spaceId, startTime, endTime);
            if (hasOverlap) {
                return res.status(409).json({
                    message: "Time slot is already booked",
                    code: "TIME_CONFLICT"
                });
            }
            const bookingDurationHours = (endTime.getTime() - startTime.getTime()) / (1e3 * 60 * 60);
            const timeLimitCheck = await checkUserTimeLimit(user.id, spaceId, bookingDurationHours);
            if (!timeLimitCheck.withinLimit) {
                return res.status(403).json({
                    message: timeLimitCheck.message,
                    code: "TIME_LIMIT_EXCEEDED",
                    remainingHours: timeLimitCheck.remainingHours
                });
            }
            const newBooking = await db.insert(bookings2).values({
                commonSpaceId: spaceId,
                userId: user.id,
                startTime,
                endTime,
                status: "confirmed"
            }).returning();
            res.status(201).json({
                message: "Booking created successfully",
                booking: newBooking[0]
            });
        }
        catch (error) {
            console.error("\u274C Error creating booking:", error);
            res.status(500).json({
                message: "Failed to create booking",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/common-spaces/calendar/:spaceId", requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid space ID",
                    errors: paramValidation.error.issues
                });
            }
            const queryValidation = calendarQuerySchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: "Invalid query parameters",
                    errors: queryValidation.error.issues
                });
            }
            const { spaceId } = paramValidation.data;
            const { start_date, end_date, view } = queryValidation.data;
            const space = await db.select({
                id: commonSpaces2.id,
                name: commonSpaces2.name,
                buildingId: commonSpaces2.buildingId,
                isReservable: commonSpaces2.isReservable,
                openingHours: commonSpaces2.openingHours,
                capacity: commonSpaces2.capacity
            }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.id, spaceId)).limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: "Common space not found",
                    code: "NOT_FOUND"
                });
            }
            const commonSpace = space[0];
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(commonSpace.buildingId)) {
                return res.status(403).json({
                    message: "Access denied to this common space",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const conditions = [
                (0, drizzle_orm_26.eq)(bookings2.commonSpaceId, spaceId),
                (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"),
                (0, drizzle_orm_26.gte)(bookings2.startTime, new Date(start_date)),
                (0, drizzle_orm_26.lte)(bookings2.endTime, new Date(end_date))
            ];
            const spaceBookings = await db.select({
                id: bookings2.id,
                startTime: bookings2.startTime,
                endTime: bookings2.endTime,
                status: bookings2.status,
                userId: bookings2.userId,
                userName: (0, drizzle_orm_26.sql) `CONCAT(${users4.firstName}, ' ', ${users4.lastName})`,
                userEmail: users4.email,
                userRole: users4.role
            }).from(bookings2).innerJoin(users4, (0, drizzle_orm_26.eq)(bookings2.userId, users4.id)).where((0, drizzle_orm_26.and)(...conditions)).orderBy(bookings2.startTime);
            const canViewDetails = ["admin", "manager"].includes(user.role);
            const events = spaceBookings.map((booking) => ({
                id: booking.id,
                startTime: booking.startTime.toISOString(),
                endTime: booking.endTime.toISOString(),
                status: booking.status,
                userId: booking.userId,
                userName: canViewDetails || booking.userId === user.id ? booking.userName : "D\xE9j\xE0 R\xE9serv\xE9",
                userEmail: canViewDetails || booking.userId === user.id ? booking.userEmail : null,
                isOwnBooking: booking.userId === user.id,
                spaceId,
                spaceName: commonSpace.name,
                userRole: booking.userRole
            }));
            const totalBookings = events.length;
            const totalHours = events.reduce((sum, event) => {
                const duration = (new Date(event.endTime).getTime() - new Date(event.startTime).getTime()) / (1e3 * 60 * 60);
                return sum + duration;
            }, 0);
            const uniqueUsers = new Set(events.map((e) => e.userId)).size;
            const calendarData = {
                space: {
                    id: commonSpace.id,
                    name: commonSpace.name,
                    isReservable: commonSpace.isReservable,
                    openingHours: commonSpace.openingHours
                },
                calendar: {
                    view,
                    startDate: start_date,
                    endDate: end_date,
                    events
                },
                permissions: {
                    canViewDetails,
                    canCreateBookings: commonSpace.isReservable && !await isUserBlocked(user.id, spaceId)
                },
                summary: {
                    totalBookings,
                    totalHours: Math.round(totalHours * 10) / 10,
                    uniqueUsers
                }
            };
            res.json(calendarData);
        }
        catch (error) {
            console.error("\u274C Error fetching calendar data:", error);
            res.status(500).json({
                message: "Failed to fetch calendar data",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/common-spaces/my-bookings", requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userBookings = await db.select({
                id: bookings2.id,
                commonSpaceId: bookings2.commonSpaceId,
                startTime: bookings2.startTime,
                endTime: bookings2.endTime,
                status: bookings2.status,
                createdAt: bookings2.createdAt,
                commonSpaceName: commonSpaces2.name,
                buildingName: buildings4.name,
                buildingAddress: buildings4.address
            }).from(bookings2).innerJoin(commonSpaces2, (0, drizzle_orm_26.eq)(bookings2.commonSpaceId, commonSpaces2.id)).innerJoin(buildings4, (0, drizzle_orm_26.eq)(commonSpaces2.buildingId, buildings4.id)).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(bookings2.userId, user.id), (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"))).orderBy((0, drizzle_orm_26.desc)(bookings2.startTime));
            res.json(userBookings);
        }
        catch (error) {
            console.error("\u274C Error fetching user bookings:", error);
            res.status(500).json({
                message: "Failed to fetch user bookings",
                details: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.delete("/api/common-spaces/bookings/:bookingId", requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = bookingIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid booking ID",
                    errors: paramValidation.error.issues
                });
            }
            const { bookingId } = paramValidation.data;
            const booking = await db.select({
                id: bookings2.id,
                userId: bookings2.userId,
                commonSpaceId: bookings2.commonSpaceId,
                buildingId: commonSpaces2.buildingId,
                status: bookings2.status
            }).from(bookings2).innerJoin(commonSpaces2, (0, drizzle_orm_26.eq)(bookings2.commonSpaceId, commonSpaces2.id)).where((0, drizzle_orm_26.eq)(bookings2.id, bookingId)).limit(1);
            if (booking.length === 0) {
                return res.status(404).json({
                    message: "Booking not found",
                    code: "NOT_FOUND"
                });
            }
            const bookingDetails = booking[0];
            let canCancel = false;
            if (bookingDetails.userId === user.id) {
                canCancel = true;
            }
            else if (["admin", "manager"].includes(user.role)) {
                const accessibleBuildingIds = await getAccessibleBuildingIds(user);
                canCancel = accessibleBuildingIds.includes(bookingDetails.buildingId);
            }
            if (!canCancel) {
                return res.status(403).json({
                    message: "Can only cancel your own bookings",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            await db.update(bookings2).set({
                status: "cancelled",
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_26.eq)(bookings2.id, bookingId));
            res.json({
                message: "Booking cancelled successfully"
            });
        }
        catch (error) {
            console.error("\u274C Error cancelling booking:", error);
            res.status(500).json({
                message: "Failed to cancel booking",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/common-spaces/:spaceId/stats", requireAuth, requireRole(["admin", "manager"]), async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid space ID",
                    errors: paramValidation.error.issues
                });
            }
            const { spaceId } = paramValidation.data;
            const space = await db.select({
                id: commonSpaces2.id,
                buildingId: commonSpaces2.buildingId,
                name: commonSpaces2.name
            }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.id, spaceId)).limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: "Common space not found",
                    code: "NOT_FOUND"
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                return res.status(403).json({
                    message: "Access denied to this common space",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const oneYearAgo = /* @__PURE__ */ new Date();
            oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
            const stats = await db.select({
                userId: bookings2.userId,
                userName: (0, drizzle_orm_26.sql) `CONCAT(${users4.firstName}, ' ', ${users4.lastName})`,
                userEmail: users4.email,
                totalHours: (0, drizzle_orm_26.sql) `EXTRACT(EPOCH FROM SUM(${bookings2.endTime} - ${bookings2.startTime})) / 3600`,
                totalBookings: (0, drizzle_orm_26.sql) `COUNT(${bookings2.id})`
            }).from(bookings2).innerJoin(users4, (0, drizzle_orm_26.eq)(bookings2.userId, users4.id)).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(bookings2.commonSpaceId, spaceId), (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"), (0, drizzle_orm_26.gte)(bookings2.startTime, oneYearAgo))).groupBy(bookings2.userId, users4.firstName, users4.lastName, users4.email).orderBy((0, drizzle_orm_26.desc)((0, drizzle_orm_26.sql) `EXTRACT(EPOCH FROM SUM(${bookings2.endTime} - ${bookings2.startTime})) / 3600`));
            const totalStats = await db.select({
                totalBookings: (0, drizzle_orm_26.sql) `COUNT(${bookings2.id})`,
                totalHours: (0, drizzle_orm_26.sql) `EXTRACT(EPOCH FROM SUM(${bookings2.endTime} - ${bookings2.startTime})) / 3600`,
                uniqueUsers: (0, drizzle_orm_26.sql) `COUNT(DISTINCT ${bookings2.userId})`
            }).from(bookings2).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(bookings2.commonSpaceId, spaceId), (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"), (0, drizzle_orm_26.gte)(bookings2.startTime, oneYearAgo)));
            res.json({
                spaceName: space[0].name,
                period: "Last 12 months",
                summary: totalStats[0],
                userStats: stats
            });
        }
        catch (error) {
            console.error("\u274C Error fetching space statistics:", error);
            res.status(500).json({
                message: "Failed to fetch space statistics",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/common-spaces/users/:userId/restrictions", requireAuth, requireRole(["admin", "manager"]), async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = userIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid user ID",
                    errors: paramValidation.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const bodyValidation = createRestrictionSchema.safeParse(req.body);
            if (!bodyValidation.success) {
                return res.status(400).json({
                    message: "Invalid restriction data",
                    errors: bodyValidation.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const { userId } = paramValidation.data;
            const { common_space_id, is_blocked, reason } = bodyValidation.data;
            const targetUser = await db.select({ id: users4.id }).from(users4).where((0, drizzle_orm_26.eq)(users4.id, userId)).limit(1);
            if (targetUser.length === 0) {
                return res.status(404).json({
                    message: "User not found",
                    code: "NOT_FOUND"
                });
            }
            const space = await db.select({
                id: commonSpaces2.id,
                buildingId: commonSpaces2.buildingId
            }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.id, common_space_id)).limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: "Common space not found",
                    code: "NOT_FOUND"
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                return res.status(403).json({
                    message: "Access denied to this common space",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const existingRestriction = await db.select({ id: userBookingRestrictions2.id }).from(userBookingRestrictions2).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(userBookingRestrictions2.userId, userId), (0, drizzle_orm_26.eq)(userBookingRestrictions2.commonSpaceId, common_space_id))).limit(1);
            if (existingRestriction.length > 0) {
                await db.update(userBookingRestrictions2).set({
                    isBlocked: is_blocked,
                    reason,
                    updatedAt: /* @__PURE__ */ new Date()
                }).where((0, drizzle_orm_26.eq)(userBookingRestrictions2.id, existingRestriction[0].id));
            }
            else {
                await db.insert(userBookingRestrictions2).values({
                    userId,
                    commonSpaceId: common_space_id,
                    isBlocked: is_blocked,
                    reason
                });
            }
            res.json({
                message: `User ${is_blocked ? "blocked from" : "unblocked from"} booking this space`
            });
        }
        catch (error) {
            console.error("\u274C Error managing user restriction:", error);
            res.status(500).json({
                message: "Failed to manage user restriction",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/common-spaces", requireAuth, requireRole(["admin", "manager"]), async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const validationResult = createCommonSpaceSchema.safeParse(req.body);
            if (!validationResult.success) {
                return res.status(400).json({
                    message: "Invalid request data",
                    errors: validationResult.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const { name, description, building_id, is_reservable, capacity, opening_hours, weekly_hours, available_days } = validationResult.data;
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(building_id)) {
                return res.status(403).json({
                    message: "Access denied. You can only create spaces in buildings you manage.",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const building = await db.select({ id: buildings4.id, name: buildings4.name }).from(buildings4).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(buildings4.id, building_id), (0, drizzle_orm_26.eq)(buildings4.isActive, true))).limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    message: "Building not found or inactive",
                    code: "BUILDING_NOT_FOUND"
                });
            }
            const existingSpace = await db.select({ id: commonSpaces2.id }).from(commonSpaces2).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(commonSpaces2.name, name), (0, drizzle_orm_26.eq)(commonSpaces2.buildingId, building_id))).limit(1);
            if (existingSpace.length > 0) {
                return res.status(409).json({
                    message: "A common space with this name already exists in this building",
                    code: "DUPLICATE_NAME"
                });
            }
            const newSpace = await db.insert(commonSpaces2).values({
                name,
                description: description || null,
                buildingId: building_id,
                isReservable: is_reservable,
                capacity: capacity || null,
                openingHours: opening_hours ? [{ day: "all", open: opening_hours.start, close: opening_hours.end }] : weekly_hours ? Object.entries(weekly_hours).map(([day, hours]) => ({
                    day,
                    open: hours.start,
                    close: hours.end
                })) : null,
                availableDays: available_days || null
            }).returning();
            console.log(`\u2705 Created new common space: ${name} in building ${building[0].name}`);
            res.status(201).json({
                message: "Common space created successfully",
                space: {
                    id: newSpace[0].id,
                    name: newSpace[0].name,
                    description: newSpace[0].description,
                    buildingId: newSpace[0].buildingId,
                    buildingName: building[0].name,
                    isReservable: newSpace[0].isReservable,
                    capacity: newSpace[0].capacity,
                    openingHours: newSpace[0].openingHours,
                    createdAt: newSpace[0].createdAt
                }
            });
        }
        catch (error) {
            console.error("\u274C Error creating common space:", error);
            res.status(500).json({
                message: "Failed to create common space",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.put("/api/common-spaces/:spaceId", requireAuth, requireRole(["admin", "manager"]), async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid space ID",
                    errors: paramValidation.error.issues
                });
            }
            const validationResult = createCommonSpaceSchema.safeParse(req.body);
            if (!validationResult.success) {
                return res.status(400).json({
                    message: "Invalid request data",
                    errors: validationResult.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const { spaceId } = paramValidation.data;
            const { name, description, building_id, is_reservable, capacity, opening_hours, weekly_hours, available_days } = validationResult.data;
            const existingSpace = await db.select({
                id: commonSpaces2.id,
                buildingId: commonSpaces2.buildingId
            }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.id, spaceId)).limit(1);
            if (existingSpace.length === 0) {
                return res.status(404).json({
                    message: "Common space not found",
                    code: "NOT_FOUND"
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(existingSpace[0].buildingId)) {
                return res.status(403).json({
                    message: "Access denied. You can only update spaces in buildings you manage.",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const updatedSpace = await db.update(commonSpaces2).set({
                name,
                description: description || null,
                buildingId: building_id,
                isReservable: is_reservable,
                capacity: capacity || null,
                openingHours: opening_hours ? [{ day: "all", open: opening_hours.start, close: opening_hours.end }] : weekly_hours ? Object.entries(weekly_hours).map(([day, hours]) => ({
                    day,
                    open: hours.start,
                    close: hours.end
                })) : null,
                availableDays: available_days || null,
                updatedAt: /* @__PURE__ */ new Date()
            }).where((0, drizzle_orm_26.eq)(commonSpaces2.id, spaceId)).returning();
            console.log(`\u2705 Updated common space: ${name}`);
            res.json({
                message: "Common space updated successfully",
                space: {
                    id: updatedSpace[0].id,
                    name: updatedSpace[0].name,
                    description: updatedSpace[0].description,
                    buildingId: updatedSpace[0].buildingId,
                    isReservable: updatedSpace[0].isReservable,
                    capacity: updatedSpace[0].capacity,
                    openingHours: updatedSpace[0].openingHours,
                    availableDays: updatedSpace[0].availableDays,
                    updatedAt: updatedSpace[0].updatedAt
                }
            });
        }
        catch (error) {
            console.error("\u274C Error updating common space:", error);
            res.status(500).json({
                message: "Failed to update common space",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/common-spaces/users/:userId/time-limits", requireAuth, requireRole(["admin", "manager"]), async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = userIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid user ID",
                    errors: paramValidation.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const validationResult = setTimeLimitSchema.safeParse(req.body);
            if (!validationResult.success) {
                return res.status(400).json({
                    message: "Invalid time limit data",
                    errors: validationResult.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const { userId } = paramValidation.data;
            const { user_id, common_space_id, limit_type, limit_hours } = validationResult.data;
            const targetUser = await db.select({ id: users4.id, firstName: users4.firstName, lastName: users4.lastName }).from(users4).where((0, drizzle_orm_26.eq)(users4.id, userId)).limit(1);
            if (targetUser.length === 0) {
                return res.status(404).json({
                    message: "User not found",
                    code: "USER_NOT_FOUND"
                });
            }
            if (common_space_id) {
                const space = await db.select({
                    id: commonSpaces2.id,
                    name: commonSpaces2.name,
                    buildingId: commonSpaces2.buildingId
                }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.id, common_space_id)).limit(1);
                if (space.length === 0) {
                    return res.status(404).json({
                        message: "Common space not found",
                        code: "SPACE_NOT_FOUND"
                    });
                }
                const accessibleBuildingIds = await getAccessibleBuildingIds(user);
                if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                    return res.status(403).json({
                        message: "Access denied to this common space",
                        code: "INSUFFICIENT_PERMISSIONS"
                    });
                }
            }
            const existingLimit = await db.select({ id: userTimeLimits2.id }).from(userTimeLimits2).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(userTimeLimits2.userId, userId), common_space_id ? (0, drizzle_orm_26.eq)(userTimeLimits2.commonSpaceId, common_space_id) : (0, drizzle_orm_26.sql) `${userTimeLimits2.commonSpaceId} IS NULL`, (0, drizzle_orm_26.eq)(userTimeLimits2.limitType, limit_type))).limit(1);
            if (existingLimit.length > 0) {
                await db.update(userTimeLimits2).set({
                    limitHours: limit_hours,
                    updatedAt: /* @__PURE__ */ new Date()
                }).where((0, drizzle_orm_26.eq)(userTimeLimits2.id, existingLimit[0].id));
            }
            else {
                await db.insert(userTimeLimits2).values({
                    userId,
                    commonSpaceId: common_space_id || null,
                    limitType: limit_type,
                    limitHours: limit_hours
                });
            }
            console.log(`\u2705 Set time limit for user ${targetUser[0].firstName} ${targetUser[0].lastName}: ${limit_hours}h per ${limit_type}`);
            res.json({
                message: "Time limit set successfully",
                user: {
                    id: targetUser[0].id,
                    name: `${targetUser[0].firstName} ${targetUser[0].lastName}`,
                    limitType: limit_type,
                    limitHours: limit_hours,
                    spaceId: common_space_id
                }
            });
        }
        catch (error) {
            console.error("\u274C Error setting time limit:", error);
            res.status(500).json({
                message: "Failed to set time limit",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/common-spaces/users/:userId/time-limits", requireAuth, requireRole(["admin", "manager"]), async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const { userId } = req.params;
            const limits = await db.select({
                id: userTimeLimits2.id,
                userId: userTimeLimits2.userId,
                commonSpaceId: userTimeLimits2.commonSpaceId,
                spaceName: commonSpaces2.name,
                limitType: userTimeLimits2.limitType,
                limitHours: userTimeLimits2.limitHours,
                createdAt: userTimeLimits2.createdAt,
                updatedAt: userTimeLimits2.updatedAt
            }).from(userTimeLimits2).leftJoin(commonSpaces2, (0, drizzle_orm_26.eq)(userTimeLimits2.commonSpaceId, commonSpaces2.id)).where((0, drizzle_orm_26.eq)(userTimeLimits2.userId, userId)).orderBy(userTimeLimits2.limitType, userTimeLimits2.commonSpaceId);
            const limitsWithUsage = await Promise.all(limits.map(async (limit) => {
                const currentHours = await getUserBookingHours(userId, limit.commonSpaceId, limit.limitType);
                return {
                    ...limit,
                    currentHours: Math.round(currentHours * 100) / 100,
                    remainingHours: Math.max(0, limit.limitHours - currentHours)
                };
            }));
            res.json({
                limits: limitsWithUsage
            });
        }
        catch (error) {
            console.error("\u274C Error fetching time limits:", error);
            res.status(500).json({
                message: "Failed to fetch time limits",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/common-spaces/user-calendar", requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const queryValidation = calendarQuerySchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: "Invalid calendar query parameters",
                    errors: queryValidation.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const { start_date, end_date, view } = queryValidation.data;
            const userBookings = await db.select({
                id: bookings2.id,
                startTime: bookings2.startTime,
                endTime: bookings2.endTime,
                status: bookings2.status,
                spaceName: commonSpaces2.name,
                spaceId: commonSpaces2.id,
                buildingName: buildings4.name,
                buildingId: buildings4.id
            }).from(bookings2).innerJoin(commonSpaces2, (0, drizzle_orm_26.eq)(bookings2.commonSpaceId, commonSpaces2.id)).innerJoin(buildings4, (0, drizzle_orm_26.eq)(commonSpaces2.buildingId, buildings4.id)).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(bookings2.userId, user.id), (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"), (0, drizzle_orm_26.gte)(bookings2.startTime, new Date(start_date)), (0, drizzle_orm_26.lte)(bookings2.endTime, new Date(end_date)))).orderBy(bookings2.startTime);
            res.json({
                user: {
                    id: user.id,
                    name: `${user.firstName} ${user.lastName}`,
                    role: user.role
                },
                calendar: {
                    view,
                    startDate: start_date,
                    endDate: end_date,
                    bookings: userBookings
                },
                summary: {
                    totalBookings: userBookings.length,
                    totalHours: userBookings.reduce((total, booking) => {
                        const duration = (new Date(booking.endTime).getTime() - new Date(booking.startTime).getTime()) / (1e3 * 60 * 60);
                        return total + duration;
                    }, 0)
                }
            });
        }
        catch (error) {
            console.error("\u274C Error fetching user calendar:", error);
            res.status(500).json({
                message: "Failed to fetch user calendar",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/common-spaces/calendar/building/:buildingId", requireAuth, requireRole(["admin", "manager"]), async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: "Authentication required",
                    code: "AUTH_REQUIRED"
                });
            }
            const paramValidation = zod_16.z.object({ buildingId: zod_16.z.string().uuid() }).safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: "Invalid building ID",
                    errors: paramValidation.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const queryValidation = calendarQuerySchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: "Invalid calendar query parameters",
                    errors: queryValidation.error.issues.map((issue) => ({
                        field: issue.path.join("."),
                        message: issue.message
                    }))
                });
            }
            const { buildingId } = paramValidation.data;
            const { start_date, end_date, view } = queryValidation.data;
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(buildingId)) {
                return res.status(403).json({
                    message: "Access denied to this building",
                    code: "INSUFFICIENT_PERMISSIONS"
                });
            }
            const building = await db.select({
                id: buildings4.id,
                name: buildings4.name,
                address: buildings4.address
            }).from(buildings4).where((0, drizzle_orm_26.eq)(buildings4.id, buildingId)).limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    message: "Building not found",
                    code: "NOT_FOUND"
                });
            }
            const buildingBookings = await db.select({
                id: bookings2.id,
                startTime: bookings2.startTime,
                endTime: bookings2.endTime,
                status: bookings2.status,
                spaceName: commonSpaces2.name,
                spaceId: commonSpaces2.id,
                userId: bookings2.userId,
                userName: (0, drizzle_orm_26.sql) `CONCAT(${users4.firstName}, ' ', ${users4.lastName})`,
                userEmail: users4.email,
                userRole: users4.role
            }).from(bookings2).innerJoin(commonSpaces2, (0, drizzle_orm_26.eq)(bookings2.commonSpaceId, commonSpaces2.id)).innerJoin(users4, (0, drizzle_orm_26.eq)(bookings2.userId, users4.id)).where((0, drizzle_orm_26.and)((0, drizzle_orm_26.eq)(commonSpaces2.buildingId, buildingId), (0, drizzle_orm_26.eq)(bookings2.status, "confirmed"), (0, drizzle_orm_26.gte)(bookings2.startTime, new Date(start_date)), (0, drizzle_orm_26.lte)(bookings2.endTime, new Date(end_date)))).orderBy(bookings2.startTime);
            const buildingSpaces = await db.select({
                id: commonSpaces2.id,
                name: commonSpaces2.name,
                isReservable: commonSpaces2.isReservable,
                capacity: commonSpaces2.capacity
            }).from(commonSpaces2).where((0, drizzle_orm_26.eq)(commonSpaces2.buildingId, buildingId)).orderBy(commonSpaces2.name);
            const spaceUsage = buildingSpaces.map((space) => {
                const spaceBookings = buildingBookings.filter((booking) => booking.spaceId === space.id);
                const totalHours = spaceBookings.reduce((total, booking) => {
                    const duration = (new Date(booking.endTime).getTime() - new Date(booking.startTime).getTime()) / (1e3 * 60 * 60);
                    return total + duration;
                }, 0);
                return {
                    ...space,
                    bookingCount: spaceBookings.length,
                    totalHours: Math.round(totalHours * 10) / 10,
                    uniqueUsers: [...new Set(spaceBookings.map((b) => b.userId))].length
                };
            });
            res.json({
                building: building[0],
                calendar: {
                    view,
                    startDate: start_date,
                    endDate: end_date,
                    events: buildingBookings
                },
                spaces: spaceUsage,
                summary: {
                    totalBookings: buildingBookings.length,
                    totalSpaces: buildingSpaces.length,
                    activeSpaces: buildingSpaces.filter((s) => s.isReservable).length,
                    uniqueUsers: [...new Set(buildingBookings.map((b) => b.userId))].length
                }
            });
        }
        catch (error) {
            console.error("\u274C Error fetching building calendar:", error);
            res.status(500).json({
                message: "Failed to fetch building calendar",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
}
// server/api/permissions.ts
init_storage();
function registerPermissionsRoutes(app2) {
    app2.get("/api/permissions", requireAuth, authorize("read:users"), async (req, res) => {
        try {
            const permissions2 = await storage.getPermissions();
            res.json(permissions2);
        }
        catch (error) {
            console.error("\u274C Error fetching permissions:", error);
            res.status(500).json({ message: "Failed to fetch permissions" });
        }
    });
    app2.get("/api/role-permissions", requireAuth, authorize("read:users"), async (req, res) => {
        try {
            const rolePermissions2 = await storage.getRolePermissions();
            res.json(rolePermissions2);
        }
        catch (error) {
            console.error("\u274C Error fetching role permissions:", error);
            res.status(500).json({ message: "Failed to fetch role permissions" });
        }
    });
    app2.get("/api/permissions-matrix", requireAuth, authorize("read:users"), async (req, res) => {
        try {
            const permissions2 = await storage.getPermissions();
            const rolePermissions2 = await storage.getRolePermissions();
            const permissionsByResource = permissions2.reduce((acc, permission) => {
                if (!acc[permission.resourceType]) {
                    acc[permission.resourceType] = [];
                }
                acc[permission.resourceType].push(permission);
                return acc;
            }, {});
            const roleMatrix = ["admin", "manager", "resident", "tenant"].reduce((acc, role) => {
                acc[role] = rolePermissions2.filter((rp) => rp.role === role).map((rp) => rp.permissionId);
                return acc;
            }, {});
            res.json({
                permissionsByResource,
                roleMatrix,
                permissions: permissions2,
                rolePermissions: rolePermissions2
            });
        }
        catch (error) {
            console.error("\u274C Error fetching permissions matrix:", error);
            res.status(500).json({ message: "Failed to fetch permissions matrix" });
        }
    });
    app2.get("/api/user-permissions", requireAuth, authorize("read:users"), async (req, res) => {
        try {
            const userPermissions2 = await storage.getUserPermissions();
            res.json(userPermissions2);
        }
        catch (error) {
            console.error("\u274C Error fetching user permissions:", error);
            res.status(500).json({ message: "Failed to fetch user permissions" });
        }
    });
    app2.post("/api/user-permissions", requireAuth, authorize("manage_permissions:users"), async (req, res) => {
        try {
            const { userId, permissionId, reason } = req.body;
            if (!userId || !permissionId) {
                return res.status(400).json({
                    message: "userId and permissionId are required"
                });
            }
            const permission = await storage.getPermissions().then((perms) => perms.find((p) => p.id === permissionId || p.name === permissionId));
            if (!permission) {
                return res.status(400).json({
                    message: "Invalid permission"
                });
            }
            res.status(501).json({
                message: "User permission overrides not yet implemented",
                note: "This feature requires additional database schema for user_permission_overrides table"
            });
        }
        catch (error) {
            console.error("\u274C Error granting user permission:", error);
            res.status(500).json({ message: "Failed to grant user permission" });
        }
    });
    app2.delete("/api/user-permissions/:userId/:permissionId", requireAuth, authorize("manage:user_roles"), async (req, res) => {
        try {
            const { userId, permissionId } = req.params;
            res.status(501).json({
                message: "User permission overrides not yet implemented",
                note: "This feature requires additional database schema for user_permission_overrides table"
            });
        }
        catch (error) {
            console.error("\u274C Error revoking user permission:", error);
            res.status(500).json({ message: "Failed to revoke user permission" });
        }
    });
    app2.patch("/api/role-permissions/:role", requireAuth, authorize("manage:user_roles"), async (req, res) => {
        try {
            const { role } = req.params;
            const { permissions: permissions2 } = req.body;
            if (!["admin", "manager", "tenant", "resident"].includes(role)) {
                return res.status(400).json({ message: "Invalid role" });
            }
            if (!Array.isArray(permissions2)) {
                return res.status(400).json({ message: "Permissions must be an array" });
            }
            res.status(501).json({
                message: "Role permission updates not yet implemented",
                note: "This feature requires implementing a mechanism to update permissions.json or move permissions to database"
            });
        }
        catch (error) {
            console.error("\u274C Error updating role permissions:", error);
            res.status(500).json({ message: "Failed to update role permissions" });
        }
    });
    app2.get("/api/permission-categories", requireAuth, authorize("read:users"), async (req, res) => {
        try {
            const permissions2 = await storage.getPermissions();
            const categoryMap = {};
            permissions2.forEach((permission) => {
                const categoryName = {
                    users: "User Management",
                    organizations: "Organization Management",
                    buildings: "Building Management",
                    residences: "Residence Management",
                    bills: "Financial Management",
                    budgets: "Financial Management",
                    maintenance_requests: "Maintenance Management",
                    documents: "Document Management",
                    notifications: "Communication",
                    features: "System Features",
                    reports: "Reports & Analytics"
                }[permission.resourceType] || "Other";
                if (!categoryMap[categoryName]) {
                    categoryMap[categoryName] = [];
                }
                categoryMap[categoryName].push(permission);
            });
            const categories = Object.entries(categoryMap).map(([name, perms]) => ({
                id: name.toLowerCase().replace(/\s+/g, "-"),
                name,
                permissions: perms,
                count: perms.length
            }));
            res.json(categories);
        }
        catch (error) {
            console.error("\u274C Error fetching permission categories:", error);
            res.status(500).json({ message: "Failed to fetch permission categories" });
        }
    });
    app2.post("/api/permissions/validate", requireAuth, async (req, res) => {
        try {
            const { permission } = req.body;
            if (!permission) {
                return res.status(400).json({ message: "Permission is required" });
            }
            const rolePermissions2 = await storage.getRolePermissions();
            const hasPermission = rolePermissions2.some((rp) => rp.role === req.user.role && rp.permission && rp.permission.name === permission);
            res.json({
                hasPermission,
                role: req.user.role,
                permission,
                message: hasPermission ? "Permission granted" : "Permission denied"
            });
        }
        catch (error) {
            console.error("\u274C Error validating permission:", error);
            res.status(500).json({ message: "Failed to validate permission" });
        }
    });
}
// server/services/demo-management-service.ts
var DemoManagementService = (_b = class {
        /**
         * Check if demo organizations are healthy and properly configured.
         */
        static async checkDemoHealth() {
            return {
                healthy: true,
                status: { message: "Demo sync functionality removed" },
                message: "Demo organizations managed locally only",
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            };
        }
        /**
         * Ensure demo organizations exist and are properly configured.
         * This is a safe operation that can be called during application startup.
         * DISABLED: Demo organization creation has been disabled per user request.
         */
        static async ensureDemoOrganizations() {
            console.log("\u2705 Demo organizations functionality disabled (skipped)");
            return {
                success: true,
                message: "Demo organizations functionality disabled - skipping all database operations"
            };
        }
        /**
         * Force recreation of demo organizations.
         * DISABLED: Demo organization functionality has been disabled per user request.
         */
        static async recreateDemoOrganizations() {
            console.log("\u2705 Demo organizations recreation skipped (disabled)");
            return {
                success: true,
                message: "Demo organizations functionality disabled - recreation skipped"
            };
        }
        /**
         * Get demo organization information.
         * DISABLED: Demo organization functionality has been disabled per user request.
         */
        static async getDemoOrganizationInfo() {
            console.log("\u2705 Demo organizations info retrieval skipped (disabled)");
            return {
                stats: {
                    demoBuildings: 0,
                    demoUsers: 0,
                    openDemoBuildings: 0,
                    openDemoUsers: 0
                }
            };
        }
        /**
         * Initialize demo organizations during application startup.
         * DISABLED: Demo organization functionality has been disabled per user request.
         */
        static async initializeDemoOrganizations() {
            console.log("\u2705 Demo organizations initialization skipped (disabled)");
            return;
        }
        /**
         * PRODUCTION FIX: Create basic demo organizations if they don't exist.
         * This ensures the database has the required organizations for production.
         */
        static async createBasicOrganizationsIfMissing() {
            try {
                const { Pool: Pool3 } = await Promise.resolve().then(() => __importStar(require("@neondatabase/serverless")));
                const { drizzle: drizzle2 } = await Promise.resolve().then(() => __importStar(require("drizzle-orm/neon-serverless")));
                const { eq: eq15 } = await Promise.resolve().then(() => __importStar(require("drizzle-orm")));
                const schema2 = await Promise.resolve().then(() => (init_schema(), schema_exports));
                const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
                const existingDemo = await db2.select().from(schema2.organizations).where(eq15(schema2.organizations.name, "Demo")).limit(1);
                if (existingDemo.length === 0) {
                    console.log("\u{1F4DD} Creating Demo organization...");
                    await db2.insert(schema2.organizations).values({
                        name: "Demo",
                        type: "demo",
                        address: "123 Demo Street",
                        city: "Montreal",
                        province: "QC",
                        postalCode: "H1A 1A1",
                        isActive: true
                    });
                }
                const existingOpenDemo = await db2.select().from(schema2.organizations).where(eq15(schema2.organizations.name, "Open Demo")).limit(1);
                if (existingOpenDemo.length === 0) {
                    console.log("\u{1F4DD} Creating Open Demo organization...");
                    await db2.insert(schema2.organizations).values({
                        name: "Open Demo",
                        type: "demo",
                        address: "456 Demo Avenue",
                        city: "Montreal",
                        province: "QC",
                        postalCode: "H1B 1B1",
                        isActive: true
                    });
                }
                console.log("\u2705 Demo organizations are properly configured");
            }
            catch (error) {
                console.log("\u26A0\uFE0F Demo organizations setup failed, but continuing...");
            }
        }
        /**
         * Scheduled maintenance for demo organizations.
         * This can be called periodically to ensure demo data stays fresh.
         */
        static async scheduledMaintenance() {
            const actions = [];
            try {
                console.log("\u{1F527} Running scheduled demo maintenance...");
                const health = await this.checkDemoHealth();
                actions.push(`Health check: ${health.healthy ? "HEALTHY" : "UNHEALTHY"}`);
                if (!health.healthy) {
                    actions.push("Demo sync functionality removed - local management only");
                    const newHealth = await this.checkDemoHealth();
                    actions.push(`Post-sync health: ${newHealth.healthy ? "HEALTHY" : "STILL_UNHEALTHY"}`);
                }
                console.log("\u2705 Scheduled demo maintenance completed");
                return {
                    success: true,
                    message: "Scheduled maintenance completed successfully",
                    actions
                };
            }
            catch (error) {
                return {
                    success: false,
                    message: `Scheduled maintenance failed: ${error instanceof Error ? error.message : "Unknown error"}`,
                    actions
                };
            }
        }
    },
    __setFunctionName(_b, "DemoManagementService"),
    (() => {
        _b.DEMO_ORG_NAME = "Demo";
    })(),
    (() => {
        _b.OPEN_DEMO_ORG_NAME = "Open Demo";
    })(),
    _b);
var demo_management_service_default = DemoManagementService;
// server/api/demo-management.ts
function registerDemoManagementRoutes(app2) {
    app2.get("/api/demo/health", async (req, res) => {
        try {
            const health = await demo_management_service_default.checkDemoHealth();
            res.status(health.healthy ? 200 : 503).json({
                success: true,
                data: health
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: "Demo health check failed",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/demo/users", async (req, res) => {
        try {
            const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
            const { eq: eq15, and: and15, inArray: inArray10 } = await Promise.resolve().then(() => __importStar(require("drizzle-orm")));
            const schema2 = await Promise.resolve().then(() => (init_schema(), schema_exports));
            const demoOrgs = await db2.query.organizations.findMany({
                where: eq15(schema2.organizations.type, "demo")
            });
            if (demoOrgs.length === 0) {
                return res.status(404).json({
                    success: false,
                    message: "No demo organizations found"
                });
            }
            const demoUsers = await db2.query.users.findMany({
                where: and15(eq15(schema2.users.isActive, true), inArray10(schema2.users.role, ["demo_manager", "demo_tenant", "demo_resident"])),
                columns: {
                    id: true,
                    email: true,
                    firstName: true,
                    lastName: true,
                    role: true
                }
            });
            const usersByRole = {
                demo_manager: demoUsers.filter((user) => user.role === "demo_manager"),
                demo_tenant: demoUsers.filter((user) => user.role === "demo_tenant"),
                demo_resident: demoUsers.filter((user) => user.role === "demo_resident")
            };
            res.json({
                success: true,
                data: usersByRole
            });
        }
        catch (error) {
            console.error("\u274C Error fetching demo users:", error);
            res.status(500).json({
                success: false,
                message: "Failed to fetch demo users",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/demo/status", requireAuth, async (req, res) => {
        try {
            const info = await demo_management_service_default.getDemoOrganizationInfo();
            res.json({
                success: true,
                data: info
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: "Failed to get demo status",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/demo/ensure", requireAuth, requireRole(["admin"]), async (req, res) => {
        try {
            const result = await demo_management_service_default.ensureDemoOrganizations();
            res.status(result.success ? 200 : 500).json({
                success: result.success,
                message: result.message,
                data: {
                    demoOrgId: result.demoOrgId,
                    openDemoOrgId: result.openDemoOrgId
                }
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: "Failed to ensure demo organizations",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/demo/recreate", requireAuth, requireRole(["admin"]), async (req, res) => {
        try {
            const result = await demo_management_service_default.recreateDemoOrganizations();
            res.status(result.success ? 200 : 500).json({
                success: result.success,
                message: result.message,
                data: {
                    demoOrgId: result.demoOrgId,
                    openDemoOrgId: result.openDemoOrgId
                }
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: "Failed to recreate demo organizations",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.post("/api/demo/maintenance", requireAuth, requireRole(["admin"]), async (req, res) => {
        try {
            const result = await demo_management_service_default.scheduledMaintenance();
            res.status(result.success ? 200 : 500).json({
                success: result.success,
                message: result.message,
                data: {
                    actions: result.actions
                }
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                message: "Failed to run demo maintenance",
                error: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    console.log("\u2705 Demo management API routes registered");
}
// server/api/trial-request.ts
const express_4 = __importDefault(require("express"));
const zod_17 = require("zod");
const mail_2 = require("@sendgrid/mail");
var router = express_4.default.Router();
if (!process.env.SENDGRID_API_KEY) {
    console.warn("\u26A0\uFE0F SENDGRID_API_KEY environment variable is not set");
}
var mailService = new mail_2.MailService();
if (process.env.SENDGRID_API_KEY) {
    mailService.setApiKey(process.env.SENDGRID_API_KEY);
}
var trialRequestSchema = zod_17.z.object({
    firstName: zod_17.z.string().min(1, "First name is required"),
    lastName: zod_17.z.string().min(1, "Last name is required"),
    email: zod_17.z.string().email("Invalid email format"),
    phone: zod_17.z.string().min(1, "Phone number is required"),
    company: zod_17.z.string().min(1, "Company name is required"),
    address: zod_17.z.string().optional(),
    city: zod_17.z.string().optional(),
    province: zod_17.z.string().optional(),
    postalCode: zod_17.z.string().optional(),
    numberOfBuildings: zod_17.z.string().refine((val) => parseInt(val) > 0, "Must be a positive number"),
    numberOfResidences: zod_17.z.string().refine((val) => parseInt(val) > 0, "Must be a positive number"),
    message: zod_17.z.string().optional()
});
router.post("/trial-request", async (req, res) => {
    try {
        const validationResult = trialRequestSchema.safeParse(req.body);
        if (!validationResult.success) {
            return res.status(400).json({
                message: "Invalid request data",
                errors: validationResult.error.issues
            });
        }
        const data = validationResult.data;
        if (!process.env.SENDGRID_API_KEY) {
            return res.status(500).json({
                message: "Email service not configured"
            });
        }
        const emailSubject = `Nouvelle demande d'essai gratuit - ${data.company}`;
        const emailText = `
Nouvelle demande d'essai gratuit pour Koveo Gestion

INFORMATIONS DU CONTACT:
- Nom: ${data.firstName} ${data.lastName}
- Entreprise: ${data.company}
- Courriel: ${data.email}
- T\xE9l\xE9phone: ${data.phone}

ADRESSE:
${data.address ? `- Adresse: ${data.address}` : ""}
${data.city ? `- Ville: ${data.city}` : ""}
${data.province ? `- Province: ${data.province}` : ""}
${data.postalCode ? `- Code postal: ${data.postalCode}` : ""}

INFORMATIONS SUR LES PROPRI\xC9T\xC9S:
- Nombre de b\xE2timents: ${data.numberOfBuildings}
- Nombre de r\xE9sidences: ${data.numberOfResidences}

${data.message ? `MESSAGE ADDITIONNEL:
${data.message}` : ""}

---
Cette demande a \xE9t\xE9 soumise via le site web Koveo Gestion.
    `.trim();
        const emailHtml = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Nouvelle demande d'essai gratuit</title>
  <style>
    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
    .container { max-width: 600px; margin: 0 auto; padding: 20px; }
    .header { background-color: #2563eb; color: white; padding: 20px; text-align: center; }
    .content { padding: 20px; background-color: #f9fafb; }
    .section { margin-bottom: 20px; }
    .section h3 { color: #2563eb; margin-bottom: 10px; }
    .info-grid { display: grid; grid-template-columns: 1fr 2fr; gap: 10px; margin-bottom: 10px; }
    .label { font-weight: bold; }
    .highlight { background-color: #dbeafe; padding: 15px; border-radius: 5px; }
    .footer { text-align: center; color: #666; font-size: 12px; margin-top: 30px; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Nouvelle demande d'essai gratuit</h1>
      <p>Koveo Gestion</p>
    </div>
    
    <div class="content">
      <div class="section">
        <h3>Informations du contact</h3>
        <div class="info-grid">
          <span class="label">Nom:</span>
          <span>${data.firstName} ${data.lastName}</span>
          <span class="label">Entreprise:</span>
          <span>${data.company}</span>
          <span class="label">Courriel:</span>
          <span><a href="mailto:${data.email}">${data.email}</a></span>
          <span class="label">T\xE9l\xE9phone:</span>
          <span><a href="tel:${data.phone}">${data.phone}</a></span>
        </div>
      </div>

      ${data.address || data.city || data.province || data.postalCode ? `
      <div class="section">
        <h3>Adresse</h3>
        <div class="info-grid">
          ${data.address ? `<span class="label">Adresse:</span><span>${data.address}</span>` : ""}
          ${data.city ? `<span class="label">Ville:</span><span>${data.city}</span>` : ""}
          ${data.province ? `<span class="label">Province:</span><span>${data.province}</span>` : ""}
          ${data.postalCode ? `<span class="label">Code postal:</span><span>${data.postalCode}</span>` : ""}
        </div>
      </div>
      ` : ""}

      <div class="section highlight">
        <h3>Informations sur les propri\xE9t\xE9s</h3>
        <div class="info-grid">
          <span class="label">Nombre de b\xE2timents:</span>
          <span><strong>${data.numberOfBuildings}</strong></span>
          <span class="label">Nombre de r\xE9sidences:</span>
          <span><strong>${data.numberOfResidences}</strong></span>
        </div>
      </div>

      ${data.message ? `
      <div class="section">
        <h3>Message additionnel</h3>
        <p>${data.message.replace(/\n/g, "<br>")}</p>
      </div>
      ` : ""}
      
      <div class="footer">
        <p>Cette demande a \xE9t\xE9 soumise via le site web Koveo Gestion</p>
        <p>Date: ${( /* @__PURE__ */new Date()).toLocaleDateString("fr-CA", {
            year: "numeric",
            month: "long",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            timeZone: "America/Toronto"
        })}</p>
      </div>
    </div>
  </div>
</body>
</html>
    `.trim();
        const emailData = {
            to: "info@koveo-gestion.com",
            from: {
                email: "noreply@koveo-gestion.com",
                name: "Koveo Gestion - Demandes d'essai"
            },
            replyTo: {
                email: data.email,
                name: `${data.firstName} ${data.lastName}`
            },
            subject: emailSubject,
            text: emailText,
            html: emailHtml,
            trackingSettings: {
                clickTracking: { enable: false },
                openTracking: { enable: false },
                subscriptionTracking: { enable: false }
            },
            mailSettings: {
                sandboxMode: { enable: false }
            }
        };
        await mailService.send(emailData);
        console.log(`\u2705 Trial request sent successfully for ${data.company} (${data.email})`);
        res.status(200).json({
            message: "Trial request sent successfully",
            success: true
        });
    }
    catch (error) {
        console.error("\u274C Error processing trial request:", error);
        if (error.code) {
            const sgError = error;
            console.error("SendGrid error details:", sgError);
            return res.status(500).json({
                message: "Failed to send trial request email",
                error: "Email service error"
            });
        }
        res.status(500).json({
            message: "Internal server error",
            error: "Failed to process request"
        });
    }
});
function registerTrialRequestRoutes(app2) {
    app2.use("/api", router);
}
// server/api/invoices.ts
init_schema();
init_storage();
const express_rate_limit_2 = __importStar(require("express-rate-limit"));
var extractionRateLimit2 = (0, express_rate_limit_2.default)({
    windowMs: 15 * 60 * 1e3,
    // 15 minutes
    max: 10,
    // Limit each user to 10 extraction requests per windowMs
    message: {
        error: "Too many extraction requests",
        message: "Please wait before making another extraction request",
        code: "RATE_LIMIT_EXCEEDED"
    },
    standardHeaders: true,
    // Return rate limit info in the `RateLimit-*` headers
    legacyHeaders: false,
    // Disable the `X-RateLimit-*` headers
    keyGenerator: (req) => {
        return req.user?.id || (0, express_rate_limit_2.ipKeyGenerator)(req);
    },
    skip: (req) => {
        return !req.user?.id;
    }
});
function registerInvoiceRoutes(app2) {
    console.log("\u{1F504} Loading invoice routes...");
    app2.post("/api/invoices/extract-data", requireAuth, extractionRateLimit2, uploadInvoiceFile, handleUploadError, async (req, res) => {
        const startTime = Date.now();
        const userId = req.user.id;
        const userRole = req.user.role;
        console.log(`[INVOICE EXTRACTION] Starting extraction for user ${userId} (${userRole})`);
        try {
            if (!req.file) {
                console.log(`[INVOICE EXTRACTION] No file uploaded by user ${userId}`);
                return res.status(400).json({
                    error: "No file uploaded",
                    message: "Please upload an invoice file",
                    code: "NO_FILE"
                });
            }
            const { buffer, mimetype, originalname, size } = req.file;
            console.log(`[INVOICE EXTRACTION] Processing file for user ${userId}:`, {
                filename: originalname,
                mimetype,
                size: `${Math.round(size / 1024)}KB`
            });
            const apiKey = process.env.GEMINI_API_KEY;
            if (!apiKey) {
                console.error("[INVOICE EXTRACTION] GEMINI_API_KEY not configured");
                return res.status(500).json({
                    error: "AI service not configured",
                    message: "Invoice extraction service is not available",
                    code: "SERVICE_UNAVAILABLE"
                });
            }
            const extractionData = await geminiService.extractInvoiceData(buffer, mimetype);
            const confidenceScore = geminiService.calculateConfidenceScore(extractionData);
            const validatedData = aiExtractionResponseSchema.parse(extractionData);
            const processingTime = Date.now() - startTime;
            console.log(`[INVOICE EXTRACTION] Extraction completed for user ${userId}:`, {
                processingTime: `${processingTime}ms`,
                confidence: confidenceScore,
                extractedFields: Object.keys(validatedData).filter((key) => validatedData[key] !== null)
            });
            console.log(`[SECURITY AUDIT] INVOICE_EXTRACTION_SUCCESS:`, {
                timestamp: ( /* @__PURE__ */new Date()).toISOString(),
                action: "INVOICE_EXTRACTION_SUCCESS",
                userId,
                userRole,
                filename: originalname,
                fileSize: size,
                confidence: confidenceScore,
                processingTime,
                extractedFieldCount: Object.keys(validatedData).filter((key) => validatedData[key] !== null).length
            });
            res.json({
                success: true,
                data: validatedData,
                metadata: {
                    confidence: confidenceScore,
                    processingTime,
                    filename: originalname,
                    fileSize: size,
                    extractedAt: ( /* @__PURE__ */new Date()).toISOString()
                }
            });
        }
        catch (error) {
            const processingTime = Date.now() - startTime;
            console.error(`[INVOICE EXTRACTION] Error for user ${userId}:`, {
                error: error.message,
                processingTime,
                filename: req.file?.originalname || "unknown"
            });
            console.log(`[SECURITY AUDIT] INVOICE_EXTRACTION_ERROR:`, {
                timestamp: ( /* @__PURE__ */new Date()).toISOString(),
                action: "INVOICE_EXTRACTION_ERROR",
                userId,
                userRole,
                error: error.message,
                filename: req.file?.originalname || "unknown",
                processingTime
            });
            if (error.message.includes("GEMINI_API_KEY")) {
                return res.status(500).json({
                    error: "AI service configuration error",
                    message: "Invoice extraction service is not properly configured",
                    code: "CONFIG_ERROR"
                });
            }
            if (error.message.includes("Unsupported file type")) {
                return res.status(400).json({
                    error: "Unsupported file type",
                    message: error.message,
                    code: "UNSUPPORTED_FILE_TYPE"
                });
            }
            if (error.message.includes("JSON parse")) {
                return res.status(500).json({
                    error: "AI response parsing error",
                    message: "Failed to parse AI response. Please try again.",
                    code: "AI_PARSE_ERROR"
                });
            }
            return res.status(500).json({
                error: "Extraction failed",
                message: "Failed to extract invoice data. Please try again.",
                code: "EXTRACTION_ERROR"
            });
        }
    });
    app2.get("/api/invoices/health", requireAuth, async (req, res) => {
        try {
            const checks = {
                apiKeyConfigured: !!process.env.GEMINI_API_KEY,
                serviceInitialized: !!geminiService,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            };
            if (checks.apiKeyConfigured && checks.serviceInitialized) {
                try {
                    checks.apiConnected = await geminiService.validateApiKey();
                }
                catch (error) {
                    checks.apiConnected = false;
                    checks.apiError = "Connection test failed";
                }
            }
            const isHealthy = checks.apiKeyConfigured && checks.serviceInitialized && checks.apiConnected !== false;
            res.status(isHealthy ? 200 : 503).json({
                status: isHealthy ? "healthy" : "unhealthy",
                service: "invoice-extraction",
                checks
            });
        }
        catch (error) {
            console.error("[INVOICE HEALTH] Health check error:", error);
            res.status(503).json({
                status: "unhealthy",
                service: "invoice-extraction",
                error: error.message,
                timestamp: ( /* @__PURE__ */new Date()).toISOString()
            });
        }
    });
    app2.get("/api/invoices", requireAuth, async (req, res) => {
        try {
            const userId = req.user.id;
            const userRole = req.user.role;
            const { buildingId, residenceId } = req.query;
            const filters = {
                buildingId,
                residenceId,
                userId,
                userRole
            };
            const invoices2 = await storage.getInvoices(filters);
            res.json({
                success: true,
                data: invoices2,
                count: invoices2.length
            });
        }
        catch (error) {
            console.error("[INVOICES API] Error fetching invoices:", error);
            res.status(500).json({
                error: "Failed to fetch invoices",
                message: error.message
            });
        }
    });
    app2.get("/api/invoices/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const invoice = await storage.getInvoice(id);
            if (!invoice) {
                return res.status(404).json({
                    error: "Invoice not found",
                    message: "The requested invoice does not exist"
                });
            }
            res.json({
                success: true,
                data: invoice
            });
        }
        catch (error) {
            console.error("[INVOICES API] Error fetching invoice:", error);
            res.status(500).json({
                error: "Failed to fetch invoice",
                message: error.message
            });
        }
    });
    app2.post("/api/invoices", requireAuth, async (req, res) => {
        try {
            const userId = req.user.id;
            const userRole = req.user.role;
            if (userRole !== "admin" && userRole !== "manager") {
                return res.status(403).json({
                    error: "Insufficient permissions",
                    message: "Only admins and managers can create invoices"
                });
            }
            const invoiceData = {
                ...req.body,
                createdBy: userId,
                // Set defaults for required fields if not provided (for testing)
                paymentType: req.body.paymentType || "one-time",
                // Only include documentId if provided (now optional)
                ...req.body.documentId && { documentId: req.body.documentId }
            };
            const validatedData = insertInvoiceSchema.parse(invoiceData);
            const invoice = await storage.createInvoice(validatedData);
            console.log(`[INVOICES API] Invoice created by user ${userId}:`, invoice.id);
            res.status(201).json({
                success: true,
                data: invoice,
                message: "Invoice created successfully"
            });
        }
        catch (error) {
            console.error("[INVOICES API] Error creating invoice:", error);
            if (error.name === "ZodError") {
                return res.status(400).json({
                    error: "Validation error",
                    message: "Invalid invoice data",
                    details: error.errors
                });
            }
            res.status(500).json({
                error: "Failed to create invoice",
                message: error.message
            });
        }
    });
    app2.put("/api/invoices/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const userId = req.user.id;
            const userRole = req.user.role;
            const existingInvoice = await storage.getInvoice(id);
            if (!existingInvoice) {
                return res.status(404).json({
                    error: "Invoice not found",
                    message: "The requested invoice does not exist"
                });
            }
            if (userRole !== "admin" && userRole !== "manager" && existingInvoice.createdBy !== userId) {
                return res.status(403).json({
                    error: "Insufficient permissions",
                    message: "You can only edit your own invoices"
                });
            }
            const updateData = insertInvoiceSchema.partial().parse(req.body);
            const updatedInvoice = await storage.updateInvoice(id, updateData);
            if (!updatedInvoice) {
                return res.status(404).json({
                    error: "Invoice not found",
                    message: "The requested invoice does not exist"
                });
            }
            console.log(`[INVOICES API] Invoice updated by user ${userId}:`, id);
            res.json({
                success: true,
                data: updatedInvoice,
                message: "Invoice updated successfully"
            });
        }
        catch (error) {
            console.error("[INVOICES API] Error updating invoice:", error);
            if (error.name === "ZodError") {
                return res.status(400).json({
                    error: "Validation error",
                    message: "Invalid invoice data",
                    details: error.errors
                });
            }
            res.status(500).json({
                error: "Failed to update invoice",
                message: error.message
            });
        }
    });
    app2.delete("/api/invoices/:id", requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const userId = req.user.id;
            const userRole = req.user.role;
            const existingInvoice = await storage.getInvoice(id);
            if (!existingInvoice) {
                return res.status(404).json({
                    error: "Invoice not found",
                    message: "The requested invoice does not exist"
                });
            }
            if (userRole !== "admin" && userRole !== "manager" && existingInvoice.createdBy !== userId) {
                return res.status(403).json({
                    error: "Insufficient permissions",
                    message: "You can only delete your own invoices"
                });
            }
            const deleted = await storage.deleteInvoice(id);
            if (!deleted) {
                return res.status(404).json({
                    error: "Invoice not found",
                    message: "The requested invoice does not exist"
                });
            }
            console.log(`[INVOICES API] Invoice deleted by user ${userId}:`, id);
            res.json({
                success: true,
                message: "Invoice deleted successfully"
            });
        }
        catch (error) {
            console.error("[INVOICES API] Error deleting invoice:", error);
            res.status(500).json({
                error: "Failed to delete invoice",
                message: error.message
            });
        }
    });
    console.log("\u2705 Invoice routes registered on /api/invoices/");
}
// server/api/ai-document-analysis.ts
const multer_7 = __importDefault(require("multer"));
const express_rate_limit_3 = __importStar(require("express-rate-limit"));
// server/services/secure-file-storage.ts
const path_7 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const fs_7 = require("fs");
// shared/config/upload-config.ts
var UPLOAD_FORM_CONFIGS = {
    bills: {
        aiAnalysisEnabled: true,
        // Bills have AI enabled by default
        maxFileSize: 25,
        allowedFileTypes: ["image/*", "application/pdf"],
        showCamera: true,
        contextFields: {
            category: "string",
            vendor: "string",
            amount: "number",
            date: "string"
        }
    },
    buildings: {
        aiAnalysisEnabled: false,
        // Disabled by default
        maxFileSize: 25,
        allowedFileTypes: ["image/*", "application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
        showCamera: true,
        contextFields: {
            documentType: "string",
            description: "string"
        }
    },
    residences: {
        aiAnalysisEnabled: false,
        // Disabled by default
        maxFileSize: 25,
        allowedFileTypes: ["image/*", "application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
        showCamera: true,
        contextFields: {
            documentType: "string",
            description: "string"
        }
    },
    bugs: {
        aiAnalysisEnabled: false,
        // Disabled by default
        maxFileSize: 15,
        allowedFileTypes: ["image/*", "application/pdf", ".txt", ".log", ".json", ".csv"],
        showCamera: true,
        contextFields: {
            category: "string",
            priority: "string",
            steps: "string"
        }
    },
    features: {
        aiAnalysisEnabled: false,
        // Disabled by default
        maxFileSize: 20,
        allowedFileTypes: ["image/*", "application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "text/plain", "application/json", "text/csv"],
        showCamera: true,
        contextFields: {
            category: "string",
            priority: "string",
            description: "string"
        }
    },
    documents: {
        aiAnalysisEnabled: false,
        // Disabled by default
        maxFileSize: 50,
        allowedFileTypes: ["image/*", "application/pdf", "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
        showCamera: true,
        contextFields: {
            category: "string",
            accessLevel: "string",
            description: "string"
        }
    },
    maintenance: {
        aiAnalysisEnabled: false,
        // Disabled by default
        maxFileSize: 25,
        allowedFileTypes: ["image/*", "application/pdf"],
        showCamera: true,
        contextFields: {
            priority: "string",
            category: "string",
            description: "string"
        }
    }
};
function generateStorageDirectory(context) {
    const { type, organizationId, buildingId, residenceId, userRole, userId } = context;
    const baseParts = ["uploads", type];
    const orgId = organizationId || "default";
    baseParts.push(`org_${orgId}`);
    if (buildingId) {
        baseParts.push(`building_${buildingId}`);
    }
    if (residenceId) {
        baseParts.push(`residence_${residenceId}`);
    }
    if (userRole) {
        baseParts.push(`role_${userRole}`);
    }
    if (userRole === "tenant" || userRole === "resident") {
        baseParts.push(`user_${userId}`);
    }
    return baseParts.join("/");
}
function getUploadConfig(formType) {
    return UPLOAD_FORM_CONFIGS[formType] || UPLOAD_FORM_CONFIGS.documents;
}
function validateUploadContext(context, userRole) {
    if (userRole === "admin") {
        return true;
    }
    if (userRole === "manager") {
        return !!context.organizationId;
    }
    if (userRole === "resident") {
        return !!(context.organizationId && (context.buildingId || context.residenceId));
    }
    if (userRole === "tenant") {
        return !!(context.organizationId && context.buildingId && context.residenceId);
    }
    return false;
}
// server/services/secure-file-storage.ts
var SecureFileStorageService = class {
    constructor() {
        this.baseUploadDir = path_7.default.join(process.cwd(), "uploads");
    }
    /**
     * Store a file securely based on the upload context and user role
     */
    async storeFile(file, context, userRole, userId) {
        try {
            if (!validateUploadContext(context, userRole)) {
                return {
                    success: false,
                    error: `Insufficient permissions for ${userRole} to upload to this context`
                };
            }
            const contextWithUser = { ...context, userRole, userId };
            const relativePath = generateStorageDirectory(contextWithUser);
            const fullDirectory = path_7.default.join(this.baseUploadDir, relativePath);
            await this.ensureDirectoryExists(fullDirectory);
            const timestamp10 = ( /* @__PURE__ */new Date()).toISOString().replace(/[:.]/g, "-");
            const fileExtension = path_7.default.extname(file.originalname);
            const baseName = path_7.default.basename(file.originalname, fileExtension);
            const uniqueFileName = `${baseName}-${timestamp10}${fileExtension}`;
            const filePath = path_7.default.join(fullDirectory, uniqueFileName);
            if (file.path) {
                await promises_1.default.copyFile(file.path, filePath);
                await promises_1.default.unlink(file.path).catch(() => {
                });
            }
            else if (file.buffer) {
                await promises_1.default.writeFile(filePath, file.buffer);
            }
            else {
                return {
                    success: false,
                    error: "No file data available"
                };
            }
            await this.storeFileMetadata(filePath, {
                originalName: file.originalname,
                mimeType: file.mimetype,
                size: file.size,
                uploadedBy: userId,
                uploadedAt: /* @__PURE__ */ new Date(),
                context: contextWithUser
            });
            return {
                success: true,
                filePath: path_7.default.relative(this.baseUploadDir, filePath),
                directory: relativePath
            };
        }
        catch (error) {
            console.error("Error storing file:", error);
            return {
                success: false,
                error: error instanceof Error ? error.message : "Unknown error"
            };
        }
    }
    /**
     * Retrieve a file if the user has access to it
     */
    async retrieveFile(relativePath, userId, userRole) {
        try {
            const fullPath = path_7.default.join(this.baseUploadDir, relativePath);
            if (!(0, fs_7.existsSync)(fullPath)) {
                return {
                    success: false,
                    error: "File not found"
                };
            }
            const metadata = await this.getFileMetadata(fullPath);
            if (!metadata) {
                return {
                    success: false,
                    error: "File metadata not found"
                };
            }
            const hasAccess = this.checkFileAccess(metadata, userId, userRole);
            if (!hasAccess) {
                return {
                    success: false,
                    error: "Access denied"
                };
            }
            return {
                success: true,
                filePath: fullPath
            };
        }
        catch (error) {
            console.error("Error retrieving file:", error);
            return {
                success: false,
                error: error instanceof Error ? error.message : "Unknown error"
            };
        }
    }
    /**
     * Delete a file if the user has access to it
     */
    async deleteFile(relativePath, userId, userRole) {
        try {
            const fullPath = path_7.default.join(this.baseUploadDir, relativePath);
            if (!(0, fs_7.existsSync)(fullPath)) {
                return {
                    success: false,
                    error: "File not found"
                };
            }
            const metadata = await this.getFileMetadata(fullPath);
            if (!metadata) {
                return {
                    success: false,
                    error: "File metadata not found"
                };
            }
            const canDelete = this.checkDeleteAccess(metadata, userId, userRole);
            if (!canDelete) {
                return {
                    success: false,
                    error: "Delete access denied"
                };
            }
            await promises_1.default.unlink(fullPath);
            await this.deleteFileMetadata(fullPath);
            return { success: true };
        }
        catch (error) {
            console.error("Error deleting file:", error);
            return {
                success: false,
                error: error instanceof Error ? error.message : "Unknown error"
            };
        }
    }
    /**
     * List files accessible to the user in a specific context
     */
    async listFiles(context, userId, userRole) {
        try {
            if (!validateUploadContext(context, userRole)) {
                return {
                    success: false,
                    error: "Insufficient permissions to list files in this context"
                };
            }
            const contextWithUser = { ...context, userRole, userId };
            const relativePath = generateStorageDirectory(contextWithUser);
            const fullDirectory = path_7.default.join(this.baseUploadDir, relativePath);
            if (!(0, fs_7.existsSync)(fullDirectory)) {
                return { success: true, files: [] };
            }
            const files = await promises_1.default.readdir(fullDirectory);
            const fileMetadata = [];
            for (const file of files) {
                if (file.endsWith(".metadata.json"))
                    continue;
                const filePath = path_7.default.join(fullDirectory, file);
                const metadata = await this.getFileMetadata(filePath);
                if (metadata && this.checkFileAccess(metadata, userId, userRole)) {
                    fileMetadata.push(metadata);
                }
            }
            return {
                success: true,
                files: fileMetadata
            };
        }
        catch (error) {
            console.error("Error listing files:", error);
            return {
                success: false,
                error: error instanceof Error ? error.message : "Unknown error"
            };
        }
    }
    /**
     * Ensure a directory exists, creating it if necessary
     */
    async ensureDirectoryExists(directory) {
        if (!(0, fs_7.existsSync)(directory)) {
            await promises_1.default.mkdir(directory, { recursive: true });
        }
    }
    /**
     * Store file metadata
     */
    async storeFileMetadata(filePath, metadata) {
        const metadataPath = `${filePath}.metadata.json`;
        await promises_1.default.writeFile(metadataPath, JSON.stringify(metadata, null, 2));
    }
    /**
     * Get file metadata
     */
    async getFileMetadata(filePath) {
        try {
            const metadataPath = `${filePath}.metadata.json`;
            const metadataContent = await promises_1.default.readFile(metadataPath, "utf-8");
            return JSON.parse(metadataContent);
        }
        catch {
            return null;
        }
    }
    /**
     * Delete file metadata
     */
    async deleteFileMetadata(filePath) {
        try {
            const metadataPath = `${filePath}.metadata.json`;
            await promises_1.default.unlink(metadataPath);
        }
        catch {
        }
    }
    /**
     * Check if user has access to read a file
     */
    checkFileAccess(metadata, userId, userRole) {
        if (userRole === "admin") {
            return true;
        }
        if (metadata.uploadedBy === userId) {
            return true;
        }
        if (userRole === "manager" && metadata.context.organizationId) {
            return true;
        }
        if (userRole === "resident" && (metadata.context.buildingId || metadata.context.residenceId)) {
            return true;
        }
        return false;
    }
    /**
     * Check if user has access to delete a file
     */
    checkDeleteAccess(metadata, userId, userRole) {
        if (userRole === "admin") {
            return true;
        }
        if (metadata.uploadedBy === userId) {
            return true;
        }
        if (userRole === "manager" && metadata.context.organizationId) {
            return true;
        }
        return false;
    }
};
var secureFileStorage = new SecureFileStorageService();
// server/api/ai-document-analysis.ts
const zod_18 = require("zod");
var aiAnalysisRateLimit = (0, express_rate_limit_3.default)({
    windowMs: 15 * 60 * 1e3,
    // 15 minutes
    max: 20,
    // Limit each user to 20 analysis requests per windowMs
    message: {
        error: "Too many AI analysis requests",
        message: "Please wait before making another analysis request",
        code: "RATE_LIMIT_EXCEEDED"
    },
    keyGenerator: (req) => {
        return req.user?.id || (0, express_rate_limit_3.ipKeyGenerator)(req);
    }
});
var upload6 = (0, multer_7.default)({
    storage: multer_7.default.memoryStorage(),
    limits: {
        fileSize: 50 * 1024 * 1024
        // 50MB limit
    },
    fileFilter: (req, file, cb) => {
        const allowedTypes = [
            "image/jpeg",
            "image/png",
            "image/gif",
            "image/webp",
            "application/pdf",
            "application/msword",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        ];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error(`Unsupported file type: ${file.mimetype}`));
        }
    }
});
var aiAnalysisSchema = zod_18.z.object({
    formType: zod_18.z.string(),
    uploadContext: zod_18.z.string().optional().transform((val) => {
        if (!val)
            return void 0;
        try {
            return JSON.parse(val);
        }
        catch {
            return void 0;
        }
    })
});
function generateContextPrompt(formType, uploadContext) {
    const basePrompt = "Analyze this document and extract relevant information.";
    switch (formType) {
        case "bills":
            return `${basePrompt} This is a bill or invoice document. Extract:
      - Vendor/company name
      - Bill/invoice number
      - Amount(s) and currency
      - Due date or service period
      - Category (utilities, maintenance, insurance, etc.)
      - Payment details
      - Any recurring payment information
      Return the data as a structured JSON object with these fields.`;
        case "buildings":
            return `${basePrompt} This is a building-related document. Extract:
      - Document type (inspection report, maintenance record, permit, etc.)
      - Building information (name, address, details)
      - Date and any deadlines
      - Key findings or recommendations
      - Contact information
      - Any compliance or regulatory information
      Return the data as a structured JSON object.`;
        case "residences":
            return `${basePrompt} This is a residence-related document. Extract:
      - Unit or apartment details
      - Resident information
      - Document type (lease, inspection, maintenance, etc.)
      - Dates and deadlines
      - Key details or issues
      - Any fees or charges mentioned
      Return the data as a structured JSON object.`;
        case "bugs":
            return `${basePrompt} This is a bug report or technical issue document. Extract:
      - Issue description and symptoms
      - Steps to reproduce
      - Expected vs actual behavior
      - Error messages or codes
      - System or component affected
      - Severity or priority indicators
      - Any suggested solutions
      Return the data as a structured JSON object.`;
        case "maintenance":
            return `${basePrompt} This is a maintenance-related document. Extract:
      - Type of maintenance (preventive, corrective, emergency)
      - Equipment or system affected
      - Issue description
      - Work performed or required
      - Parts or materials needed
      - Timeline and priorities
      - Safety considerations
      Return the data as a structured JSON object.`;
        default:
            return `${basePrompt} Extract any structured information including:
      - Document type and purpose
      - Key dates and deadlines  
      - Important details and findings
      - Contact information
      - Action items or next steps
      Return the data as a structured JSON object.`;
    }
}
function registerAiAnalysisRoutes(app2) {
    app2.post("/api/ai/analyze-document", requireAuth, aiAnalysisRateLimit, upload6.single("document"), async (req, res) => {
        try {
            if (!req.file) {
                return res.status(400).json({
                    success: false,
                    error: "No document uploaded"
                });
            }
            const validation = aiAnalysisSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    success: false,
                    error: "Invalid request data",
                    details: validation.error.issues
                });
            }
            const { formType, uploadContext } = validation.data;
            const config2 = getUploadConfig(formType);
            if (!config2.aiAnalysisEnabled) {
                return res.status(400).json({
                    success: false,
                    error: `AI analysis is not enabled for ${formType}`
                });
            }
            const analysisPrompt = generateContextPrompt(formType, uploadContext);
            console.log(`[AI ANALYSIS] Starting analysis for ${formType} document: ${req.file.originalname}`);
            let analysisResult;
            try {
                if (req.file.mimetype.startsWith("image/")) {
                    analysisResult = await geminiService.analyzeImage(req.file.buffer, analysisPrompt);
                }
                else if (req.file.mimetype === "application/pdf") {
                    analysisResult = await geminiService.analyzeDocument(req.file.buffer, analysisPrompt, req.file.mimetype);
                }
                else {
                    analysisResult = await geminiService.analyzeDocument(req.file.buffer, analysisPrompt, req.file.mimetype);
                }
            }
            catch (aiError) {
                console.error("[AI ANALYSIS] Analysis failed:", aiError);
                return res.status(500).json({
                    success: false,
                    error: "AI analysis failed",
                    details: aiError instanceof Error ? aiError.message : "Unknown AI error"
                });
            }
            let storedFile;
            if (uploadContext) {
                const storageResult = await secureFileStorage.storeFile({
                    ...req.file,
                    path: ""
                    // Memory storage doesn't have path
                }, uploadContext, req.user.role, req.user.id);
                if (storageResult.success) {
                    storedFile = {
                        path: storageResult.filePath,
                        directory: storageResult.directory
                    };
                }
            }
            console.log(`[AI ANALYSIS] Analysis completed for ${formType}:`, analysisResult);
            res.json({
                success: true,
                formType,
                analysisResult,
                extractedData: analysisResult,
                confidence: 0.9,
                // Default confidence score
                storedFile,
                metadata: {
                    fileName: req.file.originalname,
                    fileSize: req.file.size,
                    mimeType: req.file.mimetype,
                    analyzedAt: ( /* @__PURE__ */new Date()).toISOString(),
                    analysisType: formType
                }
            });
        }
        catch (error) {
            console.error("[AI ANALYSIS] Unexpected error:", error);
            res.status(500).json({
                success: false,
                error: "Internal server error during AI analysis",
                details: error instanceof Error ? error.message : "Unknown error"
            });
        }
    });
    app2.get("/api/ai/analysis-status/:id", requireAuth, (req, res) => {
        res.json({
            success: true,
            status: "completed",
            message: "Synchronous analysis - always completed immediately"
        });
    });
    app2.post("/api/ai/reanalyze-document", requireAuth, aiAnalysisRateLimit, async (req, res) => {
        try {
            const { filePath, formType, uploadContext } = req.body;
            if (!filePath || !formType) {
                return res.status(400).json({
                    success: false,
                    error: "File path and form type are required"
                });
            }
            const fileResult = await secureFileStorage.retrieveFile(filePath, req.user.id, req.user.role);
            if (!fileResult.success) {
                return res.status(404).json({
                    success: false,
                    error: fileResult.error || "File not found"
                });
            }
            const analysisPrompt = generateContextPrompt(formType, uploadContext);
            res.json({
                success: true,
                message: "Re-analysis functionality coming soon",
                formType,
                filePath
            });
        }
        catch (error) {
            console.error("[AI ANALYSIS] Re-analysis error:", error);
            res.status(500).json({
                success: false,
                error: "Internal server error during re-analysis"
            });
        }
    });
}
// server/routes.ts
var storage3 = multer_1.default.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path_3.default.join(process.cwd(), "uploads", "demands");
        if (!fs_2.default.existsSync(uploadDir)) {
            fs_2.default.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
        const extension = path_3.default.extname(file.originalname);
        cb(null, `demand-${uniqueSuffix}${extension}`);
    }
});
var upload7 = (0, multer_1.default)({
    storage: storage3,
    limits: {
        fileSize: 10 * 1024 * 1024,
        // 10MB limit
        files: 5
        // Maximum 5 files
    },
    fileFilter: (req, file, cb) => {
        const allowedTypes = [
            "image/jpeg",
            "image/jpg",
            "image/png",
            "image/gif",
            "image/webp",
            "application/pdf",
            "application/msword",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "text/plain"
        ];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error(`File type ${file.mimetype} not allowed`));
        }
    }
});
async function registerRoutes(app2) {
    console.log("\u{1F504} Setting up session middleware...");
    app2.use(sessionConfig);
    console.log("\u2705 Session middleware configured");
    console.log("\u{1F504} Loading authentication routes...");
    setupAuthRoutes(app2);
    console.log("\u2705 Authentication routes loaded on /api/auth/");
    console.log("\u{1F504} Loading API routes...");
    registerOrganizationRoutes(app2);
    registerUserRoutes(app2);
    registerBuildingRoutes(app2);
    registerDocumentRoutes(app2);
    registerBugRoutes(app2);
    registerBillRoutes(app2);
    registerResidenceRoutes(app2);
    registerDemandRoutes(app2);
    registerFeatureRequestRoutes(app2);
    registerContactRoutes(app2);
    registerCommonSpacesRoutes(app2);
    registerPermissionsRoutes(app2);
    registerDemoManagementRoutes(app2);
    registerTrialRequestRoutes(app2);
    registerInvoiceRoutes(app2);
    registerAiAnalysisRoutes(app2);
    console.log("\u2705 All API routes registered");
    app2.get("/api/health", (req, res) => {
        res.json({ status: "ok", timestamp: ( /* @__PURE__ */new Date()).toISOString() });
    });
    app2.post("/api/test", (req, res) => {
        res.json({ message: "API working", body: req.body });
    });
    app2.post("/api/upload", requireAuth, upload7.array("file", 5), async (req, res) => {
        try {
            const files = req.files;
            if (!files || files.length === 0) {
                return res.status(400).json({ message: "No files uploaded" });
            }
            const fileUrls = files.map((file) => {
                return `/uploads/demands/${file.filename}`;
            });
            console.log(`\u2705 Successfully uploaded ${files.length} files for user ${req.user.id}:`, fileUrls);
            res.json({
                message: "Files uploaded successfully",
                fileUrls,
                fileCount: files.length
            });
        }
        catch (error) {
            console.error("\u274C File upload error:", error);
            res.status(500).json({
                message: "Failed to upload files",
                error: error.message
            });
        }
    });
    app2.use("/uploads", express_3.default.static(path_3.default.join(process.cwd(), "uploads")));
    app2.get("/api/debug/simple", (req, res) => {
        console.log("\u{1F50D} Simple debug endpoint called");
        res.json({
            status: "working",
            timestamp: ( /* @__PURE__ */new Date()).toISOString(),
            environment: process.env.NODE_ENV || "unknown",
            databaseUrl: process.env.DATABASE_URL ? "present" : "missing"
        });
    });
    app2.get("/api/debug/storage", async (req, res) => {
        const timestamp10 = ( /* @__PURE__ */new Date()).toISOString();
        console.log(`[${timestamp10}] \u{1F50D} Storage debug endpoint called`);
        try {
            console.log(`[${timestamp10}] \u{1F4E6} Testing storage import...`);
            const { storage: storage4 } = await Promise.resolve().then(() => (init_storage(), storage_exports));
            console.log(`[${timestamp10}] \u2705 Storage imported successfully`);
            console.log(`[${timestamp10}] \u{1F9EA} Testing basic storage method...`);
            const testResult = await storage4.getDocuments({ residenceId: "e27ac924-8120-4904-a791-d1e9db544d58" });
            console.log(`[${timestamp10}] \u2705 Storage test successful`);
            res.json({
                success: true,
                timestamp: timestamp10,
                documentsCount: testResult.length,
                storageType: storage4.constructor.name
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                timestamp: timestamp10,
                error: error.message,
                stack: error.stack
            });
        }
    });
    app2.get("/api/debug/user-info", async (req, res) => {
        try {
            if (!req.session?.userId && !req.session?.user) {
                return res.status(401).json({
                    message: "No session found",
                    session: req.session
                });
            }
            const user = req.user || req.session?.user;
            const userId = req.session?.userId;
            const { db: db2 } = await Promise.resolve().then(() => (init_db(), db_exports));
            const { users: users5, userOrganizations: userOrganizations4, organizations: organizations3 } = await Promise.resolve().then(() => (init_schema(), schema_exports));
            const { eq: eq15 } = await Promise.resolve().then(() => __importStar(require("drizzle-orm")));
            const userFromDb = await db2.select().from(users5).where(eq15(users5.id, userId));
            const userOrgs = await db2.select({
                organizationId: userOrganizations4.organizationId,
                organizationName: organizations3.name,
                canAccessAllOrganizations: userOrganizations4.canAccessAllOrganizations,
                isActive: userOrganizations4.isActive
            }).from(userOrganizations4).innerJoin(organizations3, eq15(userOrganizations4.organizationId, organizations3.id)).where(eq15(userOrganizations4.userId, userId));
            res.json({
                session: {
                    userId: req.session?.userId,
                    hasUser: !!user,
                    userRole: req.session?.userRole
                },
                userFromMiddleware: user,
                userFromDatabase: userFromDb[0],
                userOrganizations: userOrgs,
                rawSession: req.session
            });
        }
        catch (error) {
            res.status(500).json({
                error: error.message,
                stack: error.stack
            });
        }
    });
    const distPath = path_3.default.resolve(process.cwd(), "dist", "public");
    if (fs_2.default.existsSync(distPath)) {
        console.log("\u2705 Setting up static file serving from", distPath);
        app2.use(express_3.default.static(distPath, {
            // Disable caching for development to ensure fresh files
            setHeaders: (res, path8) => {
                if (process.env.NODE_ENV === "development") {
                    res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
                    res.setHeader("Pragma", "no-cache");
                    res.setHeader("Expires", "0");
                }
                else {
                    if (path8.endsWith(".html")) {
                        res.setHeader("Cache-Control", "no-cache, must-revalidate");
                    }
                    else {
                        res.setHeader("Cache-Control", "public, max-age=300, must-revalidate");
                    }
                }
            }
        }));
        app2.get("*", (req, res) => {
            if (req.path.startsWith("/api/")) {
                return res.status(404).json({ message: "API endpoint not found", error: "API endpoint not found" });
            }
            const indexPath = path_3.default.join(distPath, "index.html");
            if (fs_2.default.existsSync(indexPath)) {
                res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
                res.setHeader("Pragma", "no-cache");
                res.setHeader("Expires", "0");
                res.sendFile(indexPath);
            }
            else {
                res.status(404).send("Application not found - build missing");
            }
        });
    }
    else {
        console.log("\u26A0\uFE0F Static files not found, only API routes available");
        app2.get("*", (req, res) => {
            if (req.path.startsWith("/api/")) {
                return res.status(404).json({ message: "API endpoint not found", error: "API endpoint not found" });
            }
            res.status(503).send("Application is starting up...");
        });
    }
    console.log("\u2705 All routes registered successfully");
}
// server/index.ts
console.log("\u{1F680} Server starting with enhanced debugging...");
process.on("uncaughtException", (error) => {
    console.error("\u274C Uncaught Exception:", error);
    if (process.env.NODE_ENV !== "development") {
        setTimeout(() => process.exit(1), 1e3);
    }
});
process.on("unhandledRejection", (reason, promise) => {
    console.error("\u274C Unhandled Rejection at:", promise, "reason:", reason);
    if (process.env.NODE_ENV !== "development") {
        setTimeout(() => process.exit(1), 1e3);
    }
});
process.on("SIGTERM", () => {
    console.log("\u{1F504} SIGTERM received, gracefully shutting down...");
    if (server) {
        server.close(() => {
            console.log("\u2705 Server closed gracefully");
            process.exit(0);
        });
    }
});
process.on("SIGINT", () => {
    console.log("\u{1F504} SIGINT received, gracefully shutting down...");
    if (server) {
        server.close(() => {
            console.log("\u2705 Server closed gracefully");
            process.exit(0);
        });
    }
});
var app = (0, express_2.default)();
exports.app = app;
var port = parseInt(process.env.PORT || "5000", 10);
var host = "0.0.0.0";
if (isNaN(port) || port < 1 || port > 65535) {
    const fallback = process.env.NODE_ENV === "production" ? "5000" : "5000";
    console.error(`Invalid port configuration. Using default ${fallback}.`);
    if (process.env.NODE_ENV === "production" && process.env.TEST_ENV !== "integration") {
        process.exit(1);
    }
}
app.set("trust proxy", ["loopback", "linklocal", "uniquelocal"]);
app.use((0, helmet_1.default)({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'", "'unsafe-inline'", "https://replit.com"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            imgSrc: ["'self'", "data:", "https:"],
            connectSrc: ["'self'"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "data:"],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'"],
            frameSrc: ["'none'"]
        }
    },
    crossOriginEmbedderPolicy: false
    // Allow for development
}));
if (process.env.NODE_ENV === "production") {
    app.use((req, res, next) => {
        if (req.url.match(/\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$/)) {
            res.set({
                "Cache-Control": "public, max-age=31536000, immutable",
                // 1 year for hashed assets
                "ETag": `"${Date.now()}-${Math.random()}"`
                // Generate unique ETag
            });
        }
        else if (req.url.match(/\.html$/)) {
            res.set({
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            });
        }
        else if (req.url.startsWith("/api/")) {
            res.set({
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0",
                "ETag": `"api-${Date.now()}-${Math.random()}"`
            });
        }
        next();
    });
}
app.use((req, res, next) => {
    const host2 = req.get("host") || req.get("x-forwarded-host") || req.get("x-original-host");
    const proto = req.get("x-forwarded-proto") || req.protocol;
    req.domain = host2 || "localhost";
    req.isKoveoProduction = host2?.includes("koveo-gestion.com") || false;
    if (req.isKoveoProduction) {
        console.log(`\u{1F310} Koveo production request detected: ${req.domain} (${req.method} ${req.path})`);
    }
    next();
});
app.use(express_2.default.json({ limit: "10mb" }));
app.use(express_2.default.urlencoded({ extended: true, limit: "10mb" }));
app.use((req, res, next) => {
    const timeout = process.env.NODE_ENV === "development" ? 3e4 : 5e3;
    req.setTimeout(timeout, () => {
        if (!res.headersSent) {
            console.warn(`\u26A0\uFE0F Request timeout after ${timeout}ms: ${req.method} ${req.url}`);
            res.status(408).json({ error: "Request Timeout", url: req.url });
        }
    });
    res.on("error", (err) => {
        console.error("\u274C Response error:", err);
    });
    next();
});
app.get("/api/health", (req, res) => {
    res.json({
        status: "healthy",
        timestamp: ( /* @__PURE__ */new Date()).toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV || "development"
    });
});
app.get("/health", createFastHealthCheck());
app.get("/healthz", createFastHealthCheck());
app.get("/ready", createFastHealthCheck());
app.get("/ping", (req, res) => {
    res.set("Connection", "close");
    res.status(200).send("pong");
});
app.get("/status", createStatusCheck());
app.get("/api", (req, res) => {
    res.json({
        status: "ok",
        message: "Koveo Gestion API is running",
        version: "1.0.0",
        environment: process.env.NODE_ENV || "development",
        port,
        host
    });
});
app.get("/api/health", (req, res) => {
    res.json({
        status: "healthy",
        timestamp: ( /* @__PURE__ */new Date()).toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV || "development",
        port,
        host
    });
});
var server;
if (process.env.NODE_ENV !== "test" && !process.env.JEST_WORKER_ID) {
    try {
        if (process.env.NODE_ENV === "production") {
            log("\u{1F3ED} Production mode detected - applying production configurations");
            if (!process.env.DATABASE_URL && !process.env.DATABASE_URL_KOVEO) {
                log("\u274C Either DATABASE_URL or DATABASE_URL_KOVEO is required in production", "error");
                process.exit(1);
            }
            const dbUrl = process.env.DATABASE_URL_KOVEO || process.env.DATABASE_URL;
            if (dbUrl) {
                log(`\u2705 Database configured: ${dbUrl.substring(0, 20)}...`);
            }
            process.env.NODE_TLS_REJECT_UNAUTHORIZED = "1";
            log("\u2705 Production checks passed");
        }
        exports.server = server = app.listen(port, host, async () => {
            log(`\u{1F680} Server ready and health checks available on port ${port}`);
            log(`\u{1F310} Health check URLs:`);
            log(`   - http://${host}:${port}/health`);
            log(`   - http://${host}:${port}/healthz`);
            log(`   - http://${host}:${port}/ready`);
            log(`   - http://${host}:${port}/ping`);
            log(`   - http://${host}:${port}/status`);
            log(`   - http://${host}:${port}/api/health`);
            log(`\u{1F680} Server listening on http://${host}:${port} - Health checks ready`);
            log(`\u{1F527} Environment: ${process.env.NODE_ENV || "development"}`);
            log(`\u{1F3D7}\uFE0F  Build mode: ${process.env.NODE_ENV === "production" ? "Production" : "Development"}`);
            if (process.env.NODE_ENV === "development") {
                log("\u{1F504} Development mode: Setting up frontend immediately...");
                setTimeout(async () => {
                    try {
                        await loadFullApplication();
                        log("\u2705 Development setup complete with frontend serving");
                    }
                    catch (error) {
                        log(`\u274C Frontend setup failed: ${error.message}`, "error");
                        log(`\u274C Stack trace: ${error.stack}`, "error");
                    }
                }, 100);
            }
            else {
                log("\u{1F504} Production mode: Loading application features...");
                setTimeout(async () => {
                    try {
                        await loadFullApplication();
                        log("\u2705 Production setup complete");
                        try {
                            const { testDatabaseConnection } = await Promise.resolve().then(() => (init_db(), db_exports));
                            await testDatabaseConnection();
                            log("\u2705 Database connectivity verified");
                        }
                        catch (dbError) {
                            log(`\u26A0\uFE0F Database connectivity warning: ${dbError.message}`, "warn");
                        }
                    }
                    catch (error) {
                        log(`\u274C Application load failed in production: ${error.message}`, "error");
                        log(`\u274C Stack trace: ${error.stack}`, "error");
                    }
                }, 10);
            }
        });
        server.keepAliveTimeout = 3e4;
        server.headersTimeout = 35e3;
        server.requestTimeout = 1e4;
        server.timeout = 15e3;
        server.on("error", (error) => {
            log(`\u274C Server error: ${error?.message || error}`, "error");
            log(`\u274C Error code: ${error?.code}`, "error");
            log(`\u274C Error details: ${JSON.stringify(error, null, 2)}`, "error");
            if (error?.code === "EADDRINUSE") {
                log(`\u274C Port ${port} is already in use. Cannot start server.`, "error");
                process.exit(1);
            }
            else if (error?.code === "EACCES") {
                log(`\u274C Permission denied for port ${port}. Try a different port.`, "error");
                process.exit(1);
            }
            else {
                log(`\u274C Unexpected server error occurred.`, "error");
                process.exit(1);
            }
        });
        server.on("listening", () => {
            const addr = server.address();
            log(`\u2705 Server successfully bound to ${addr?.address}:${addr?.port}`);
            log(`\u2705 Server ready for connections`);
        });
        process.on("SIGTERM", () => {
            log("SIGTERM received, shutting down gracefully");
            server.close(() => {
                log("Server closed");
                process.exit(0);
            });
            setTimeout(() => process.exit(1), 1e4);
        });
    }
    catch (error) {
        log(`\u274C Critical failure starting server: ${error.message}`, "error");
        log(`\u274C Error stack: ${error.stack}`, "error");
        log(`\u274C Environment: ${process.env.NODE_ENV}`, "error");
        log(`\u274C Port: ${port}`, "error");
        log(`\u274C Host: ${host}`, "error");
        process.exit(1);
    }
}
process.on("uncaughtException", (error) => {
    log(`\u274C Uncaught Exception: ${error.message}`, "error");
    log(`\u274C Stack: ${error.stack}`, "error");
    process.exit(1);
});
process.on("unhandledRejection", (reason, promise) => {
    log(`\u274C Unhandled Rejection at: ${promise}`, "error");
    log(`\u274C Reason: ${reason}`, "error");
    process.exit(1);
});
if (process.env.NODE_ENV === "production") {
    setInterval(() => {
        const memUsage = process.memoryUsage();
        const memMB = Math.round(memUsage.rss / 1024 / 1024);
        log(`\u{1F4CA} Memory usage: ${memMB}MB`);
    }, 6e4);
}
async function loadFullApplication() {
    try {
        log("\u{1F504} Loading full application features...");
        if (process.env.NODE_ENV === "production") {
            log("\u{1F50D} Production validation: Checking application requirements...");
            const requiredEnvVars = ["DATABASE_URL"];
            for (const envVar of requiredEnvVars) {
                if (!process.env[envVar]) {
                    throw new Error(`Missing required environment variable: ${envVar}`);
                }
            }
            log("\u2705 Production environment validation passed");
        }
        log("\u{1F4E5} Setting up essential API routes...");
        try {
            await registerRoutes(app);
            log("\u2705 Full application routes loaded including authentication");
        }
        catch (routesError) {
            log(`\u274C Failed to load full routes: ${routesError.message}`, "error");
            app.get("/api/health", (req, res) => {
                res.json({ status: "ok", timestamp: ( /* @__PURE__ */new Date()).toISOString() });
            });
            app.post("/api/test", (req, res) => {
                res.json({ message: "API working", body: req.body });
            });
            log("\u2705 Essential API routes loaded (minimal setup)");
        }
        const fs9 = await Promise.resolve().then(() => __importStar(require("fs")));
        const pathModule = await Promise.resolve().then(() => __importStar(require("path")));
        const hasProductionBuild = fs9.existsSync(pathModule.resolve(process.cwd(), "dist", "public"));
        const isActualProduction = process.env.NODE_ENV === "production" && (hasProductionBuild || process.env.FORCE_PRODUCTION_SERVE === "true");
        const isViteDevMode = !isActualProduction;
        log(`\u{1F50D} Environment check: NODE_ENV=${process.env.NODE_ENV}, REPLIT_DOMAINS=${!!process.env.REPLIT_DOMAINS}, isViteDevMode=${isViteDevMode}`);
        if (isViteDevMode) {
            log("\u{1F504} Setting up Vite development server...");
            try {
                const { setupVite: setupVite2 } = await Promise.resolve().then(() => (init_vite(), vite_exports));
                await setupVite2(app, server);
                log("\u2705 Vite development server configured");
            }
            catch (frontendError) {
                log(`\u274C Vite setup failed: ${frontendError.message}`, "error");
                throw frontendError;
            }
        }
        else {
            log("\u{1F504} Setting up production static file serving (deployment detected)...");
            const distPath = pathModule.resolve(process.cwd(), "dist", "public");
            if (!fs9.existsSync(distPath)) {
                log(`\u26A0\uFE0F Build directory not found at: ${distPath}`, "error");
                log("\u26A0\uFE0F Continuing without static file serving - API routes still available", "error");
            }
            else {
                log(`\u2705 Found build directory: ${distPath}`);
            }
            log("\u2705 Production static file serving configured with API route protection");
        }
        const dbDelay = process.env.NODE_ENV === "production" ? 500 : 1e3;
        setTimeout(async () => {
            try {
                await initializeDatabaseInBackground();
                log("\u2705 Background database initialization completed");
            }
            catch (error) {
                log(`\u26A0\uFE0F Background database initialization failed: ${error.message}`, "error");
                if (process.env.NODE_ENV === "production") {
                    log("\u26A0\uFE0F Continuing in production mode despite database optimization failure");
                }
            }
        }, dbDelay);
    }
    catch (error) {
        log(`\u274C Failed to load full application: ${error.message}`, "error");
        log(`\u274C Stack trace: ${error.stack}`, "error");
        if (process.env.NODE_ENV === "production") {
            log("\u274C Critical application failure in production", "error");
            log("\u26A0\uFE0F Health checks may still be available");
        }
    }
}
async function initializeDatabaseInBackground() {
    try {
        if (process.env.NODE_ENV !== "test" && !process.env.DISABLE_DB_OPTIMIZATIONS) {
            log("\u{1F504} Checking database optimization status...");
            if (process.env.NODE_ENV === "production") {
                log("\u{1F3ED} Production mode: Performing safe database checks...");
            }
            const { QueryOptimizer: QueryOptimizer2 } = await Promise.resolve().then(() => (init_database_optimization(), database_optimization_exports));
            let indexesExist = false;
            try {
                const indexCheckPromise = QueryOptimizer2.areIndexesSetup();
                const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error("Database check timeout")), 1e4));
                indexesExist = await Promise.race([indexCheckPromise, timeoutPromise]);
            }
            catch (dbError) {
                if (process.env.NODE_ENV === "production") {
                    log(`\u26A0\uFE0F Production: Database connection failed, skipping optimization: ${dbError.message}`);
                    return;
                }
                else {
                    log(`\u26A0\uFE0F Development: Database check failed: ${dbError.message}`);
                }
            }
            if (indexesExist) {
                log("\u2705 Database indexes already exist - skipping optimization");
                log("\u{1F680} Database is ready for high performance queries");
            }
            else {
                if (process.env.NODE_ENV === "production") {
                    log("\u{1F527} Production mode: Using existing database configuration");
                }
                else {
                    log("\u{1F504} Setting up database indexes for first time...");
                    await QueryOptimizer2.applyCoreOptimizations();
                    log("\u2705 Database optimizations complete");
                }
            }
        }
        log("\u{1F504} Background work complete - all routes already loaded");
    }
    catch (error) {
        if (process.env.NODE_ENV === "production") {
            log(`\u26A0\uFE0F Production: Background initialization failed (non-critical): ${error.message}`, "error");
        }
        else {
            log(`\u26A0\uFE0F Background initialization failed: ${error.message}`, "error");
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,