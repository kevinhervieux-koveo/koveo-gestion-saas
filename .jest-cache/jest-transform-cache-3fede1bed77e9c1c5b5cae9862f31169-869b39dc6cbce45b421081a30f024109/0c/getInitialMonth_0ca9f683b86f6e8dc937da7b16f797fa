5a37b2c10146d0e7fee3159792fdbbaa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInitialMonth = getInitialMonth;
/**
 * Determines the initial month to display in the calendar based on the provided
 * props.
 *
 * This function calculates the starting month, considering constraints such as
 * `startMonth`, `endMonth`, and the number of months to display.
 *
 * @param props The DayPicker props, including navigation and date constraints.
 * @param dateLib The date library to use for date manipulation.
 * @returns The initial month to display.
 */
function getInitialMonth(props, navStart, navEnd, dateLib) {
    const { month, defaultMonth, today = dateLib.today(), numberOfMonths = 1, } = props;
    let initialMonth = month || defaultMonth || today;
    const { differenceInCalendarMonths, addMonths, startOfMonth } = dateLib;
    if (navEnd &&
        differenceInCalendarMonths(navEnd, initialMonth) < numberOfMonths - 1) {
        const offset = -1 * (numberOfMonths - 1);
        initialMonth = addMonths(navEnd, offset);
    }
    if (navStart && differenceInCalendarMonths(initialMonth, navStart) < 0) {
        initialMonth = navStart;
    }
    return startOfMonth(initialMonth);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldEluaXRpYWxNb250aC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUMxQzs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBUyxlQUFlLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTztJQUNyRCxNQUFNLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLGNBQWMsR0FBRyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDcEYsSUFBSSxZQUFZLEdBQUcsS0FBSyxJQUFJLFlBQVksSUFBSSxLQUFLLENBQUM7SUFDbEQsTUFBTSxFQUFFLDBCQUEwQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDeEUsSUFBSSxNQUFNO1FBQ04sMEJBQTBCLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN4RSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxZQUFZLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsSUFBSSxRQUFRLElBQUksMEJBQTBCLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3JFLFlBQVksR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQUNELE9BQU8sWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3RDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldEluaXRpYWxNb250aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0SW5pdGlhbE1vbnRoID0gZ2V0SW5pdGlhbE1vbnRoO1xuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBpbml0aWFsIG1vbnRoIHRvIGRpc3BsYXkgaW4gdGhlIGNhbGVuZGFyIGJhc2VkIG9uIHRoZSBwcm92aWRlZFxuICogcHJvcHMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBzdGFydGluZyBtb250aCwgY29uc2lkZXJpbmcgY29uc3RyYWludHMgc3VjaCBhc1xuICogYHN0YXJ0TW9udGhgLCBgZW5kTW9udGhgLCBhbmQgdGhlIG51bWJlciBvZiBtb250aHMgdG8gZGlzcGxheS5cbiAqXG4gKiBAcGFyYW0gcHJvcHMgVGhlIERheVBpY2tlciBwcm9wcywgaW5jbHVkaW5nIG5hdmlnYXRpb24gYW5kIGRhdGUgY29uc3RyYWludHMuXG4gKiBAcGFyYW0gZGF0ZUxpYiBUaGUgZGF0ZSBsaWJyYXJ5IHRvIHVzZSBmb3IgZGF0ZSBtYW5pcHVsYXRpb24uXG4gKiBAcmV0dXJucyBUaGUgaW5pdGlhbCBtb250aCB0byBkaXNwbGF5LlxuICovXG5mdW5jdGlvbiBnZXRJbml0aWFsTW9udGgocHJvcHMsIG5hdlN0YXJ0LCBuYXZFbmQsIGRhdGVMaWIpIHtcbiAgICBjb25zdCB7IG1vbnRoLCBkZWZhdWx0TW9udGgsIHRvZGF5ID0gZGF0ZUxpYi50b2RheSgpLCBudW1iZXJPZk1vbnRocyA9IDEsIH0gPSBwcm9wcztcbiAgICBsZXQgaW5pdGlhbE1vbnRoID0gbW9udGggfHwgZGVmYXVsdE1vbnRoIHx8IHRvZGF5O1xuICAgIGNvbnN0IHsgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMsIGFkZE1vbnRocywgc3RhcnRPZk1vbnRoIH0gPSBkYXRlTGliO1xuICAgIGlmIChuYXZFbmQgJiZcbiAgICAgICAgZGlmZmVyZW5jZUluQ2FsZW5kYXJNb250aHMobmF2RW5kLCBpbml0aWFsTW9udGgpIDwgbnVtYmVyT2ZNb250aHMgLSAxKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IC0xICogKG51bWJlck9mTW9udGhzIC0gMSk7XG4gICAgICAgIGluaXRpYWxNb250aCA9IGFkZE1vbnRocyhuYXZFbmQsIG9mZnNldCk7XG4gICAgfVxuICAgIGlmIChuYXZTdGFydCAmJiBkaWZmZXJlbmNlSW5DYWxlbmRhck1vbnRocyhpbml0aWFsTW9udGgsIG5hdlN0YXJ0KSA8IDApIHtcbiAgICAgICAgaW5pdGlhbE1vbnRoID0gbmF2U3RhcnQ7XG4gICAgfVxuICAgIHJldHVybiBzdGFydE9mTW9udGgoaW5pdGlhbE1vbnRoKTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==