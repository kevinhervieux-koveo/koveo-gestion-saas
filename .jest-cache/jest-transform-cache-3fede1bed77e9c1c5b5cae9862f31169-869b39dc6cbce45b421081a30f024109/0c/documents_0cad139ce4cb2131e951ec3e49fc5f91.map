{"file":"/home/runner/workspace/server/api/documents.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/documents.ts"],"sourcesContent":["import type { Express } from 'express';\nimport { requireAuth, requireRole } from '../auth';\nimport { storage } from '../storage';\nimport {\n  documents,\n  insertDocumentSchema,\n  type InsertDocument,\n  type Document,\n} from '../../shared/schema';\n\n// Use the generated Document type from schema to avoid DOM Document collision\ntype DocumentRecord = Document;\nimport { z } from 'zod';\nimport multer from 'multer';\nimport path from 'path';\nimport fs from 'fs';\nimport crypto from 'crypto';\nimport { v4 as uuidv4 } from 'uuid';\nimport { sql } from 'drizzle-orm';\nimport { db } from '../db';\n\n// Enhanced security configuration for file uploads\nconst SECURITY_CONFIG = {\n  MAX_FILE_SIZE: 25 * 1024 * 1024, // Reduced to 25MB for better security\n  MAX_FILES_PER_USER_PER_HOUR: 10, // Rate limiting\n  ALLOWED_MIME_TYPES: [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'text/plain',\n    'image/jpeg',\n    'image/png',\n    'image/gif'\n  ],\n  ALLOWED_EXTENSIONS: ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'txt', 'jpg', 'jpeg', 'png', 'gif']\n};\n\n// Rate limiting storage for uploads\nconst uploadRateTracker = new Map();\n\n// Enhanced file validation function\nfunction validateFile(file: any): { isValid: boolean; error?: string } {\n  if (!file) return { isValid: false, error: 'No file provided' };\n  \n  // Check file size\n  if (file.size > SECURITY_CONFIG.MAX_FILE_SIZE) {\n    return { isValid: false, error: `File size exceeds ${SECURITY_CONFIG.MAX_FILE_SIZE / (1024 * 1024)}MB limit` };\n  }\n  \n  // Check MIME type\n  if (!SECURITY_CONFIG.ALLOWED_MIME_TYPES.includes(file.mimetype)) {\n    return { isValid: false, error: `File type ${file.mimetype} not allowed` };\n  }\n  \n  // Check file extension\n  const extension = path.extname(file.originalname).toLowerCase().substring(1);\n  if (!SECURITY_CONFIG.ALLOWED_EXTENSIONS.includes(extension)) {\n    return { isValid: false, error: `File extension .${extension} not allowed` };\n  }\n  \n  // Check filename for path traversal attempts\n  if (file.originalname.includes('..') || file.originalname.includes('/') || file.originalname.includes('\\\\')) {\n    return { isValid: false, error: 'Invalid filename detected' };\n  }\n  \n  return { isValid: true };\n}\n\n// Rate limiting function\nfunction checkUploadRateLimit(userId: string): { allowed: boolean; error?: string } {\n  const now = Date.now();\n  const userUploads = uploadRateTracker.get(userId) || [];\n  \n  // Clean old uploads (older than 1 hour)\n  const recentUploads = userUploads.filter((timestamp: number) => now - timestamp < 60 * 60 * 1000);\n  \n  if (recentUploads.length >= SECURITY_CONFIG.MAX_FILES_PER_USER_PER_HOUR) {\n    return { allowed: false, error: 'Upload rate limit exceeded. Please try again later.' };\n  }\n  \n  // Update tracker\n  recentUploads.push(now);\n  uploadRateTracker.set(userId, recentUploads);\n  \n  return { allowed: true };\n}\n\n// Configure multer for file uploads with enhanced security\nconst upload = multer({\n  dest: '/tmp/uploads/',\n  limits: {\n    fileSize: SECURITY_CONFIG.MAX_FILE_SIZE,\n    files: 1, // Only allow one file at a time\n  },\n  fileFilter: (req, file, cb) => {\n    const validation = validateFile(file);\n    if (validation.isValid) {\n      cb(null, true);\n    } else {\n      cb(new Error(validation.error));\n    }\n  },\n});\n\n// DocumentRecord categories for validation - synchronized with frontend\nconst DOCUMENT_CATEGORIES = [\n  'bylaw',\n  'financial',\n  'maintenance',\n  'legal',\n  'meeting_minutes',\n  'insurance',\n  'contracts',\n  'permits',\n  'inspection',\n  'lease',\n  'correspondence',\n  'utilities',\n  'other',\n] as const;\n\n// Enhanced schemas for different document types\nconst createDocumentSchema = insertDocumentSchema.extend({\n  category: z.enum(DOCUMENT_CATEGORIES),\n  title: z.string().min(1).max(255),\n  description: z.string().optional(),\n  isVisibleToTenants: z.boolean().default(false),\n});\n\nconst createBuildingDocumentSchema = insertDocumentSchema.extend({\n  type: z.enum(DOCUMENT_CATEGORIES),\n  title: z.string().min(1).max(255).optional(),\n  description: z.string().optional(),\n});\n\nconst createResidentDocumentSchema = insertDocumentSchema.extend({\n  type: z.enum(DOCUMENT_CATEGORIES),\n  title: z.string().min(1).max(255).optional(),\n  description: z.string().optional(),\n});\n\n// Schema for unified document upload\nconst uploadDocumentRecordSchema = z.object({\n  name: z.string().min(1).max(255),\n  description: z.string().optional(),\n  documentType: z.enum(DOCUMENT_CATEGORIES),\n  isVisibleToTenants: z.boolean().default(false),\n  residenceId: z.string().uuid().optional(),\n  buildingId: z.string().uuid().optional(),\n  attachedToType: z.string().optional(),\n  attachedToId: z.string().optional(),\n});\n\n/**\n *\n * @param app\n */\n/**\n * RegisterDocumentRecordRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerDocumentRoutes(app: Express): void {\n  console.log(`[${new Date().toISOString()}] 🔧 Registering document routes...`);\n  \n  // Security audit logging\n  const auditLog: Array<{\n    timestamp: string;\n    action: string;\n    userId: string;\n    userRole: string;\n    documentId?: string;\n    success: boolean;\n    details?: any;\n  }> = [];\n  \n  // Error tracking for production debugging\n  const errorLog: Array<{timestamp: string, error: any, endpoint: string, user?: any}> = [];\n  \n  // Security audit logging function\n  const logSecurityEvent = (action: string, user: any, success: boolean, documentId?: string, details?: any) => {\n    const event = {\n      timestamp: new Date().toISOString(),\n      action,\n      userId: user.id,\n      userRole: user.role,\n      documentId,\n      success,\n      details\n    };\n    \n    auditLog.push(event);\n    if (auditLog.length > 1000) auditLog.shift(); // Keep last 1000 events\n    \n    console.log(`[SECURITY AUDIT] ${action}:`, event);\n    return event;\n  };\n\n  // Database connection testing functions\n  const testDatabaseConnection = async () => {\n    try {\n      const result = await db.execute(sql`SELECT 1 as test`);\n      return {\n        success: true,\n        result: result.rows[0],\n        url_truncated: process.env.DATABASE_URL?.substring(0, 50) + '...'\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n        url_truncated: process.env.DATABASE_URL?.substring(0, 50) + '...'\n      };\n    }\n  };\n\n  const testSampleQuery = async () => {\n    try {\n      // Test the exact query that's failing\n      const result = await db.execute(sql`\n        SELECT COUNT(*) as document_count \n        FROM documents \n        LIMIT 1\n      `);\n      return {\n        success: true,\n        document_count: result.rows[0]?.document_count || 0\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n        stack: error.stack?.substring(0, 200) + '...'\n      };\n    }\n  };\n\n  const checkEnumValues = async () => {\n    try {\n      // Check current enum values in production\n      const result = await db.execute(sql`\n        SELECT enumlabel \n        FROM pg_enum \n        WHERE enumtypid = (\n          SELECT oid \n          FROM pg_type \n          WHERE typname = 'user_role'\n        )\n        ORDER BY enumsortorder\n      `);\n      return {\n        success: true,\n        production_enum_values: result.rows.map(row => row.enumlabel)\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  const checkUserOrganizationLinks = async () => {\n    try {\n      // Check user-organization relationships\n      const userCount = await db.execute(sql`SELECT COUNT(*) as total FROM users WHERE is_active = true`);\n      const orgCount = await db.execute(sql`SELECT COUNT(*) as total FROM organizations WHERE is_active = true`);\n      const linkCount = await db.execute(sql`SELECT COUNT(*) as total FROM user_organizations WHERE is_active = true`);\n      \n      // Check users without organization links\n      const orphanUsers = await db.execute(sql`\n        SELECT u.id, u.email, u.role \n        FROM users u \n        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true\n        WHERE u.is_active = true AND uo.user_id IS NULL\n        LIMIT 10\n      `);\n\n      // Check current test user specifically (from error logs)\n      const testUser = await db.execute(sql`\n        SELECT u.email, u.role, uo.organization_id, o.name as org_name\n        FROM users u\n        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true  \n        LEFT JOIN organizations o ON uo.organization_id = o.id\n        WHERE u.id = '222f5a0d-6bc6-4f28-9f4d-32c133eed333'\n      `);\n\n      return {\n        success: true,\n        stats: {\n          total_users: userCount.rows[0]?.total || 0,\n          total_organizations: orgCount.rows[0]?.total || 0,\n          total_links: linkCount.rows[0]?.total || 0,\n          orphan_user_count: orphanUsers.rows.length\n        },\n        orphan_users: orphanUsers.rows,\n        test_user_status: testUser.rows[0] || null\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  \n  // Enum cleanup endpoint for safe schema migration  \n  app.post('/api/documents/cleanup-enum', async (req, res) => {\n    try {\n      // First, verify no users have the 'owner' role\n      const userCheck = await db.execute(sql`\n        SELECT COUNT(*) as owner_count \n        FROM users \n        WHERE role = 'owner'\n      `);\n      \n      const ownerCount = Number(userCheck.rows[0]?.owner_count) || 0;\n      \n      if (ownerCount > 0) {\n        return res.status(400).json({\n          error: 'Cannot remove owner role - users still assigned to it',\n          owner_count: ownerCount\n        });\n      }\n\n      // Safe to remove - no users have 'owner' role\n      await db.execute(sql`\n        ALTER TYPE user_role DROP VALUE IF EXISTS 'owner'\n      `);\n\n      res.json({\n        message: 'Successfully removed unused owner role',\n        safe_to_push_schema: true,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error during enum cleanup:', error);\n      res.status(500).json({\n        error: 'Enum cleanup failed',\n        message: error.message,\n        suggestion: 'Try running npm run db:push --force instead'\n      });\n    }\n  });\n\n  // Fix user-organization relationships\n  app.post('/api/documents/fix-user-links', async (req, res) => {\n    try {\n      // Step 1: Find users without organization links\n      const orphanUsers = await db.execute(sql`\n        SELECT u.id, u.email, u.role \n        FROM users u \n        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true\n        WHERE u.is_active = true AND uo.user_id IS NULL\n      `);\n\n      if (orphanUsers.rows.length === 0) {\n        return res.json({\n          message: 'All users already have organization links',\n          action_taken: 'none',\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      // Step 2: Get the first available organization (or create default one)\n      let defaultOrg = await db.execute(sql`\n        SELECT id, name FROM organizations WHERE is_active = true LIMIT 1\n      `);\n\n      let organizationId: string;\n      let organizationName: string;\n\n      if (defaultOrg.rows.length === 0) {\n        // Create a default organization if none exists\n        organizationId = crypto.randomUUID();\n        organizationName = 'Default Organization';\n        await db.execute(sql`\n          INSERT INTO organizations (id, name, type, address, phone, email, is_active, created_at, updated_at)\n          VALUES (${organizationId}, ${organizationName}, 'condominium', '123 Main St', '514-555-0100', 'admin@koveo.ca', true, NOW(), NOW())\n        `);\n      } else {\n        organizationId = defaultOrg.rows[0].id as string;\n        organizationName = defaultOrg.rows[0].name as string;\n      }\n\n      // Step 3: Link all orphan users to the default organization\n      const linkPromises = orphanUsers.rows.map(user => {\n        const linkId = crypto.randomUUID();\n        return db.execute(sql`\n          INSERT INTO user_organizations (id, user_id, organization_id, role, is_active, created_at, updated_at)\n          VALUES (${linkId}, ${user.id}, ${organizationId}, ${user.role}, true, NOW(), NOW())\n        `);\n      });\n\n      await Promise.all(linkPromises);\n\n      res.json({\n        message: 'Successfully linked users to organizations',\n        users_linked: orphanUsers.rows.length,\n        organization_id: organizationId,\n        organization_name: organizationName,\n        linked_users: orphanUsers.rows.map(u => ({ id: u.id, email: u.email, role: u.role })),\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error fixing user-organization links:', error);\n      res.status(500).json({\n        error: 'Failed to fix user-organization links',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Safe enum migration endpoint\n  app.post('/api/documents/fix-enum-migration', async (req, res) => {\n    try {\n      // Step 1: Check current enum values and usage\n      const enumCheck = await db.execute(sql`\n        SELECT enumlabel, enumsortorder \n        FROM pg_enum \n        WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'user_role')\n        ORDER BY enumsortorder\n      `);\n\n      const currentEnumValues = enumCheck.rows.map(row => row.enumlabel);\n      \n      // Step 2: Check if we have any data that would prevent migration\n      const userRoleUsage = await db.execute(sql`\n        SELECT role, COUNT(*) as count \n        FROM users \n        GROUP BY role\n      `);\n\n      // Step 3: Since enum reordering is the issue, let's use a different approach\n      // We'll create a new enum with correct order, migrate data, then swap\n      const targetEnumValues = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];\n      \n      // Check if current order matches target\n      const orderMatches = JSON.stringify(currentEnumValues) === JSON.stringify(targetEnumValues);\n      \n      if (orderMatches) {\n        return res.json({\n          message: 'Enum values already in correct order',\n          current_values: currentEnumValues,\n          target_values: targetEnumValues,\n          migration_needed: false\n        });\n      }\n\n      // Step 4: Create new enum with correct order\n      await db.execute(sql`CREATE TYPE user_role_new AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')`);\n\n      // Step 5: Update all tables to use new enum\n      await db.execute(sql`\n        ALTER TABLE users \n        ALTER COLUMN role TYPE user_role_new \n        USING role::text::user_role_new\n      `);\n\n      await db.execute(sql`\n        ALTER TABLE user_organizations \n        ALTER COLUMN organization_role TYPE user_role_new \n        USING organization_role::text::user_role_new\n      `);\n\n      await db.execute(sql`\n        ALTER TABLE role_permissions \n        ALTER COLUMN role TYPE user_role_new \n        USING role::text::user_role_new\n      `);\n\n      // Step 6: Drop old enum and rename new one\n      await db.execute(sql`DROP TYPE user_role`);\n      await db.execute(sql`ALTER TYPE user_role_new RENAME TO user_role`);\n\n      res.json({\n        message: 'Successfully migrated user_role enum',\n        old_values: currentEnumValues,\n        new_values: targetEnumValues,\n        user_role_usage: userRoleUsage.rows,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error during enum migration:', error);\n      res.status(500).json({\n        error: 'Enum migration failed',\n        message: error.message,\n        suggestion: 'This is a complex migration - may need manual intervention',\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Fix invitations table enum dependency\n  app.post('/api/documents/fix-invitations-dependency', async (req, res) => {\n    try {\n      // Step 1: Check current invitations table structure\n      const invitationsSchema = await db.execute(sql`\n        SELECT column_name, data_type, column_default\n        FROM information_schema.columns \n        WHERE table_name = 'invitations' AND column_name = 'role'\n      `);\n\n      // Step 2: Remove default value from invitations.role column temporarily\n      await db.execute(sql`\n        ALTER TABLE invitations \n        ALTER COLUMN role DROP DEFAULT\n      `);\n\n      // Step 3: Check what other tables might have enum dependencies\n      const enumDependencies = await db.execute(sql`\n        SELECT \n          t.table_name,\n          c.column_name,\n          c.column_default\n        FROM information_schema.tables t\n        JOIN information_schema.columns c ON t.table_name = c.table_name\n        WHERE c.data_type = 'USER-DEFINED' \n        AND c.udt_name = 'user_role'\n        AND c.column_default IS NOT NULL\n      `);\n\n      res.json({\n        message: 'Successfully removed invitations table enum dependency',\n        removed_defaults: invitationsSchema.rows,\n        remaining_dependencies: enumDependencies.rows,\n        next_step: 'Run npm run db:push now, then call /api/documents/restore-invitations-default',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error fixing invitations dependency:', error);\n      res.status(500).json({\n        error: 'Failed to fix invitations dependency',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Restore invitations default value after schema sync\n  app.post('/api/documents/restore-invitations-default', async (req, res) => {\n    try {\n      // Restore default value to 'tenant' for invitations.role column\n      await db.execute(sql`\n        ALTER TABLE invitations \n        ALTER COLUMN role SET DEFAULT 'tenant'\n      `);\n\n      // Verify the change\n      const verification = await db.execute(sql`\n        SELECT column_name, column_default\n        FROM information_schema.columns \n        WHERE table_name = 'invitations' AND column_name = 'role'\n      `);\n\n      res.json({\n        message: 'Successfully restored invitations role default to tenant',\n        current_default: verification.rows[0]?.column_default,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error restoring invitations default:', error);\n      res.status(500).json({\n        error: 'Failed to restore invitations default',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Migrate owner users to admin before enum cleanup\n  app.post('/api/documents/migrate-owner-to-admin', async (req, res) => {\n    try {\n      // Step 1: Check how many users have 'owner' role\n      const ownerUsersCheck = await db.execute(sql`\n        SELECT id, email, first_name, last_name \n        FROM users \n        WHERE role = 'owner'\n      `);\n\n      const ownerCount = ownerUsersCheck.rows.length;\n\n      if (ownerCount === 0) {\n        return res.json({\n          message: 'No owner users found - migration not needed',\n          owner_count: 0,\n          timestamp: new Date().toISOString()\n        });\n      }\n\n      // Step 2: Update all owner users to admin\n      await db.execute(sql`\n        UPDATE users \n        SET role = 'admin' \n        WHERE role = 'owner'\n      `);\n\n      // Step 3: Update user_organizations table if it exists\n      try {\n        await db.execute(sql`\n          UPDATE user_organizations \n          SET organization_role = 'admin' \n          WHERE organization_role = 'owner'\n        `);\n      } catch (e) {\n        // Table might not exist, that's OK\n      }\n\n      // Step 4: Remove 'owner' from enum\n      await db.execute(sql`\n        ALTER TYPE user_role RENAME TO user_role_old\n      `);\n\n      await db.execute(sql`\n        CREATE TYPE user_role AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')\n      `);\n\n      // Step 5: Update all tables to use new enum\n      await db.execute(sql`\n        ALTER TABLE users \n        ALTER COLUMN role TYPE user_role \n        USING role::text::user_role\n      `);\n\n      try {\n        await db.execute(sql`\n          ALTER TABLE user_organizations \n          ALTER COLUMN organization_role TYPE user_role \n          USING organization_role::text::user_role\n        `);\n      } catch (e) {\n        // Table might not exist\n      }\n\n      try {\n        await db.execute(sql`\n          ALTER TABLE role_permissions \n          ALTER COLUMN role TYPE user_role \n          USING role::text::user_role\n        `);\n      } catch (e) {\n        // Table might not exist\n      }\n\n      try {\n        await db.execute(sql`\n          ALTER TABLE invitations \n          ALTER COLUMN role TYPE user_role \n          USING role::text::user_role\n        `);\n      } catch (e) {\n        // Column might not exist\n      }\n\n      // Step 6: Drop old enum\n      await db.execute(sql`DROP TYPE user_role_old`);\n\n      res.json({\n        message: 'Successfully migrated owner users to admin',\n        migrated_users: ownerUsersCheck.rows,\n        owner_count: ownerCount,\n        new_enum_values: ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'],\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error migrating owner users to admin:', error);\n      res.status(500).json({\n        error: 'Owner to admin migration failed',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Remove all remaining enum dependencies\n  app.post('/api/documents/remove-all-enum-dependencies', async (req, res) => {\n    try {\n      const results = [];\n\n      // Remove default from users.role\n      try {\n        await db.execute(sql`\n          ALTER TABLE users \n          ALTER COLUMN role DROP DEFAULT\n        `);\n        results.push('users.role default removed');\n      } catch (e) {\n        results.push(`users.role: ${e.message}`);\n      }\n\n      // Remove default from user_organizations.organization_role\n      try {\n        await db.execute(sql`\n          ALTER TABLE user_organizations \n          ALTER COLUMN organization_role DROP DEFAULT\n        `);\n        results.push('user_organizations.organization_role default removed');\n      } catch (e) {\n        results.push(`user_organizations.organization_role: ${e.message}`);\n      }\n\n      // Check remaining dependencies\n      const remainingDeps = await db.execute(sql`\n        SELECT \n          t.table_name,\n          c.column_name,\n          c.column_default\n        FROM information_schema.tables t\n        JOIN information_schema.columns c ON t.table_name = c.table_name\n        WHERE c.data_type = 'USER-DEFINED' \n        AND c.udt_name = 'user_role'\n        AND c.column_default IS NOT NULL\n      `);\n\n      res.json({\n        message: 'Removed all enum dependencies',\n        operations: results,\n        remaining_dependencies: remainingDeps.rows,\n        next_step: 'Run npm run db:push now',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error removing enum dependencies:', error);\n      res.status(500).json({\n        error: 'Failed to remove enum dependencies',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Restore all default values after schema sync\n  app.post('/api/documents/restore-all-defaults', async (req, res) => {\n    try {\n      const results = [];\n\n      // Restore users.role default\n      try {\n        await db.execute(sql`\n          ALTER TABLE users \n          ALTER COLUMN role SET DEFAULT 'tenant'\n        `);\n        results.push('users.role default restored to tenant');\n      } catch (e) {\n        results.push(`users.role restore failed: ${e.message}`);\n      }\n\n      // Restore user_organizations.organization_role default\n      try {\n        await db.execute(sql`\n          ALTER TABLE user_organizations \n          ALTER COLUMN organization_role SET DEFAULT 'tenant'\n        `);\n        results.push('user_organizations.organization_role default restored to tenant');\n      } catch (e) {\n        results.push(`user_organizations.organization_role restore failed: ${e.message}`);\n      }\n\n      // Restore invitations.role default\n      try {\n        await db.execute(sql`\n          ALTER TABLE invitations \n          ALTER COLUMN role SET DEFAULT 'tenant'\n        `);\n        results.push('invitations.role default restored to tenant');\n      } catch (e) {\n        results.push(`invitations.role restore failed: ${e.message}`);\n      }\n\n      res.json({\n        message: 'Restored all default values',\n        operations: results,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error('❌ Error restoring defaults:', error);\n      res.status(500).json({\n        error: 'Failed to restore defaults',\n        message: error.message,\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  // Complete database schema sync endpoint\n  app.post('/api/documents/complete-schema-sync', async (req, res) => {\n    try {\n      const results = [];\n\n      // Step 1: Remove all enum dependencies temporarily\n      try {\n        await db.execute(sql`ALTER TABLE users ALTER COLUMN role DROP DEFAULT`);\n        results.push('✓ Removed users.role default');\n      } catch (e) {\n        results.push(`users.role: ${e.message}`);\n      }\n\n      try {\n        await db.execute(sql`ALTER TABLE user_organizations ALTER COLUMN organization_role DROP DEFAULT`);\n        results.push('✓ Removed user_organizations.organization_role default');\n      } catch (e) {\n        results.push(`user_organizations.organization_role: ${e.message}`);\n      }\n\n      try {\n        await db.execute(sql`ALTER TABLE invitations ALTER COLUMN role DROP DEFAULT`);\n        results.push('✓ Removed invitations.role default');\n      } catch (e) {\n        results.push(`invitations.role: ${e.message}`);\n      }\n\n      // Step 2: Migrate any 'owner' users to 'admin'\n      const ownerUsers = await db.execute(sql`SELECT count(*) as count FROM users WHERE role = 'owner'`);\n      const ownerCount = Number(ownerUsers.rows[0]?.count || 0);\n      if (ownerCount > 0) {\n        await db.execute(sql`UPDATE users SET role = 'admin' WHERE role = 'owner'`);\n        results.push(`✓ Migrated ${ownerCount} owner users to admin`);\n      }\n\n      try {\n        await db.execute(sql`UPDATE user_organizations SET organization_role = 'admin' WHERE organization_role = 'owner'`);\n        results.push('✓ Updated user_organizations owner roles to admin');\n      } catch (e) {\n        results.push(`user_organizations owner update: ${e.message}`);\n      }\n\n      // Step 3: Fix the enum to match development schema\n      try {\n        // Rename current enum\n        await db.execute(sql`ALTER TYPE user_role RENAME TO user_role_old`);\n        \n        // Create new enum with correct values\n        await db.execute(sql`\n          CREATE TYPE user_role AS ENUM (\n            'admin', 'manager', 'tenant', 'resident', \n            'demo_manager', 'demo_tenant', 'demo_resident'\n          )\n        `);\n\n        // Update all tables\n        await db.execute(sql`ALTER TABLE users ALTER COLUMN role TYPE user_role USING role::text::user_role`);\n        await db.execute(sql`ALTER TABLE user_organizations ALTER COLUMN organization_role TYPE user_role USING organization_role::text::user_role`);\n        await db.execute(sql`ALTER TABLE invitations ALTER COLUMN role TYPE user_role USING role::text::user_role`);\n        \n        try {\n          await db.execute(sql`ALTER TABLE role_permissions ALTER COLUMN role TYPE user_role USING role::text::user_role`);\n          results.push('✓ Updated role_permissions enum');\n        } catch (e) {\n          results.push(`role_permissions: ${e.message}`);\n        }\n\n        // Drop old enum\n        await db.execute(sql`DROP TYPE user_role_old`);\n        \n        results.push('✓ Successfully updated user_role enum');\n      } catch (e) {\n        results.push(`Enum update failed: ${e.message}`);\n      }\n\n      // Step 4: Restore default values\n      try {\n        await db.execute(sql`ALTER TABLE users ALTER COLUMN role SET DEFAULT 'tenant'`);\n        results.push('✓ Restored users.role default to tenant');\n      } catch (e) {\n        results.push(`users.role default restore: ${e.message}`);\n      }\n\n      try {\n        await db.execute(sql`ALTER TABLE user_organizations ALTER COLUMN organization_role SET DEFAULT 'tenant'`);\n        results.push('✓ Restored user_organizations.organization_role default to tenant');\n      } catch (e) {\n        results.push(`user_organizations.organization_role default restore: ${e.message}`);\n      }\n\n      try {\n        await db.execute(sql`ALTER TABLE invitations ALTER COLUMN role SET DEFAULT 'tenant'`);\n        results.push('✓ Restored invitations.role default to tenant');\n      } catch (e) {\n        results.push(`invitations.role default restore: ${e.message}`);\n      }\n\n      // Step 5: Add missing columns that exist in production but not development\n      try {\n        await db.execute(sql`\n          ALTER TABLE invitation_audit_log \n          ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW()\n        `);\n        results.push('✓ Added created_at to invitation_audit_log');\n      } catch (e) {\n        results.push(`invitation_audit_log.created_at: ${e.message}`);\n      }\n\n      res.json({\n        message: 'Database schema synchronization complete',\n        operations: results,\n        timestamp: new Date().toISOString(),\n        success: true\n      });\n    } catch (error: any) {\n      console.error('❌ Error during schema synchronization:', error);\n      res.status(500).json({\n        error: 'Schema synchronization failed',\n        message: error.message,\n        timestamp: new Date().toISOString(),\n        success: false\n      });\n    }\n  });\n\n  // Enhanced diagnostic endpoint with database schema check\n  app.get('/api/documents/diagnostic', async (req, res) => {\n    try {\n      // Check if documents table exists\n      let tableExists = false;\n      let tableSchema = null;\n      \n      try {\n        const result = await db.execute(sql`\n          SELECT column_name, data_type, is_nullable, column_default \n          FROM information_schema.columns \n          WHERE table_name = 'documents' \n          ORDER BY ordinal_position\n        `);\n        tableExists = result.rows.length > 0;\n        tableSchema = result.rows;\n      } catch (schemaError) {\n        console.error('Schema check error:', schemaError);\n      }\n\n      res.json({\n        message: 'Document API diagnostic',\n        gcs_disabled: true,\n        session_fix_applied: true,\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV,\n        version: 'v2.1-gcs-disabled',\n        recent_errors: errorLog.slice(-5), // Last 5 errors\n        storage_status: {\n          exists: !!storage,\n          type: storage?.constructor?.name,\n          methods: Object.getOwnPropertyNames(Object.getPrototypeOf(storage || {}))\n        },\n        database_status: {\n          documents_table_exists: tableExists,\n          documents_table_schema: tableSchema,\n          schema_columns_count: tableSchema?.length || 0,\n          connection_test: await testDatabaseConnection(),\n          sample_query_test: await testSampleQuery(),\n          enum_check: await checkEnumValues(),\n          user_organization_links: await checkUserOrganizationLinks()\n        }\n      });\n    } catch (error: any) {\n      console.error('❌ Error running diagnostic:', error);\n      res.status(500).json({\n        error: 'Diagnostic failed',\n        message: error.message\n      });\n    }\n  });\n  \n  // Error logging helper\n  const logError = (endpoint: string, error: any, user?: any) => {\n    const errorEntry = {\n      timestamp: new Date().toISOString(),\n      endpoint,\n      error: {\n        message: error.message,\n        stack: error.stack,\n        name: error.name,\n        details: error.toString()\n      },\n      user: user ? { id: user.id, role: user.role } : null\n    };\n    \n    errorLog.push(errorEntry);\n    if (errorLog.length > 50) errorLog.shift(); // Keep only last 50 errors\n    \n    console.error(`[${errorEntry.timestamp}] 🚨 ERROR in ${endpoint}:`, errorEntry);\n    return errorEntry;\n  };\n  \n  // Get all documents for the authenticated user\n  app.get('/api/documents', requireAuth, async (req: any, res) => {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] 📄 GET /api/documents - Starting request`, {\n      userId: req.user?.id,\n      userRole: req.user?.role,\n      query: req.query,\n      url: req.url,\n      method: req.method\n    });\n    \n    try {\n      const user = req.user;\n      const userRole = user.role;\n      const userId = user.id;\n      \n      // Production debugging: Log the request details\n      console.log(`[${timestamp}] 🔍 User data extracted:`, {\n        userId,\n        userRole,\n        hasValidUser: !!user\n      });\n      \n      // Critical: Check if storage object exists and is properly initialized\n      console.log(`[${timestamp}] 💾 Storage check:`, {\n        storageExists: !!storage,\n        storageType: storage?.constructor?.name,\n        storageMethod: typeof storage?.getDocuments\n      });\n      const documentType = req.query.type as string; // 'building', 'resident', or undefined for both\n      const specificResidenceId = req.query.residenceId as string; // Filter by specific residence\n      const specificBuildingId = req.query.buildingId as string; // Filter by specific building\n\n      // Get user's organization and residences for filtering\n      console.log(`[${timestamp}] 🔍 Fetching user data from storage...`);\n      \n      console.log(`[${timestamp}] 📋 Calling getUserOrganizations(${userId})...`);\n      const organizations = await storage.getUserOrganizations(userId);\n      console.log(`[${timestamp}] ✅ getUserOrganizations SUCCESS - Found ${organizations.length} organizations`);\n      \n      console.log(`[${timestamp}] 📋 Calling getUserResidences(${userId})...`);\n      const userResidences = await storage.getUserResidences(userId);\n      console.log(`[${timestamp}] ✅ getUserResidences SUCCESS - Found ${userResidences.length} user residences`);\n      \n      console.log(`[${timestamp}] 📋 Calling getBuildings()...`);\n      const buildings = await storage.getBuildings();\n      console.log(`[${timestamp}] ✅ getBuildings SUCCESS - Found ${buildings.length} buildings`);\n\n      const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;\n      console.log(`[${timestamp}] 🏢 Organization ID determined:`, organizationId);\n\n      // If specific residence ID provided, filter to only that residence\n      let residenceIds: string[];\n      if (specificResidenceId) {\n        // Admin users have access to all residences\n        if (userRole === 'admin' || userRole === 'manager') {\n          residenceIds = [specificResidenceId];\n        } else {\n          // Verify user has access to this specific residence\n          // Handle both simple {residenceId: string} and complex nested structures\n          const hasAccess = userResidences.some((ur: any) => {\n            // Handle simple structure\n            if (ur.residenceId === specificResidenceId) {\n              return true;\n            }\n            // Handle complex nested structure\n            if (ur.userResidence?.residenceId === specificResidenceId) {\n              return true;\n            }\n            // Handle residence nested structure\n            if (ur.residence?.id === specificResidenceId) {\n              return true;\n            }\n            return false;\n          });\n          if (!hasAccess) {\n            return res.status(403).json({ message: 'Access denied to this residence' });\n          }\n          residenceIds = [specificResidenceId];\n        }\n      } else {\n        // Extract residence IDs from both simple and complex structures\n        residenceIds = userResidences\n          .map((ur: any) => {\n            // Handle simple structure\n            if (ur.residenceId) {\n              return ur.residenceId;\n            }\n            // Handle complex nested structure\n            if (ur.userResidence?.residenceId) {\n              return ur.userResidence.residenceId;\n            }\n            // Handle residence nested structure\n            if (ur.residence?.id) {\n              return ur.residence.id;\n            }\n            return null;\n          })\n          .filter((id: any) => id !== null);\n      }\n\n      const buildingIds = buildings.map((b) => b.id);\n\n      const allDocumentRecords: any[] = [];\n\n      // Use unified documents system\n      const filters: any = {\n        userId,\n        userRole,\n      };\n\n      // Filter by specific residence if provided\n      if (specificResidenceId) {\n        filters.residenceId = specificResidenceId;\n      }\n\n      // Filter by specific building if provided\n      if (specificBuildingId) {\n        filters.buildingId = specificBuildingId;\n      } else if (documentType === 'building') {\n        // For building documents, search in buildings user has access to\n        if (buildingIds.length > 0) {\n          // Get all documents for buildings, will filter later\n        }\n      } else if (documentType === 'resident') {\n        // For resident documents, search in residences user has access to\n        if (residenceIds.length > 0) {\n          // Get all documents for residences, will filter later\n        }\n      }\n\n      // CRITICAL DEBUG POINT: This is where 500 errors likely occur\n      console.log(`[${timestamp}] 🎯 CRITICAL: About to call storage.getDocuments with filters:`, filters);\n      console.log(`[${timestamp}] 🔧 Storage instance:`, storage.constructor.name);\n      console.log(`[${timestamp}] 📊 Filters being passed:`, JSON.stringify(filters, null, 2));\n      \n      const documents = await storage.getDocuments(filters);\n\n      // CRITICAL: Log successful database response\n      console.log(`[${timestamp}] ✅ CRITICAL: storage.getDocuments SUCCESS - returned ${documents?.length || 0} documents`);\n      console.log(`[${timestamp}] 📋 Document preview:`, documents?.slice(0, 3)?.map(d => ({ \n        id: d.id, \n        name: d.name, \n        uploadedById: d.uploadedById,\n        buildingId: d.buildingId,\n        residenceId: d.residenceId \n      })));\n\n      // Debug logging\n      console.log('🔍 [DOCUMENTS API DEBUG]:', {\n        filters,\n        documentsFound: documents?.length || 0,\n        specificResidenceId,\n        userRole,\n        userId,\n      });\n\n      // Apply role-based filtering with tenant visibility rules\n      const filteredDocumentRecords = documents.filter((doc) => {\n        // If filtering by specific building, only show documents for that building\n        if (specificBuildingId) {\n          if (doc.buildingId !== specificBuildingId) {\n            return false;\n          }\n        }\n\n        // Admin can see all documents\n        if (userRole === 'admin') {\n          return true;\n        }\n\n        // Manager can see all documents in their organization\n        if (userRole === 'manager' && organizationId) {\n          if (doc.buildingId && buildingIds.includes(doc.buildingId)) {\n            return true;\n          }\n          if (doc.residenceId && residenceIds.includes(doc.residenceId)) {\n            return true;\n          }\n        }\n\n        // Resident access rules\n        if (userRole === 'resident') {\n          // Residents can see documents in their residence\n          if (doc.residenceId && residenceIds.includes(doc.residenceId)) {\n            return true;\n          }\n          // Residents can see building documents related to their residences\n          if (doc.buildingId) {\n            // Check if any of user's residences belong to this building\n            const userBuildingIds = userResidences\n              .map((ur: any) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)\n              .filter(Boolean);\n            return userBuildingIds.includes(doc.buildingId);\n          }\n        }\n\n        // Tenant access rules - more restrictive\n        if (userRole === 'tenant') {\n          // Tenants can only see documents marked as visible to tenants\n          if (!doc.isVisibleToTenants) {\n            return false;\n          }\n\n          // Tenants can see visible documents in their residence\n          if (doc.residenceId && residenceIds.includes(doc.residenceId)) {\n            return true;\n          }\n\n          // Tenants can see visible building documents related to their residences\n          if (doc.buildingId) {\n            // Check if any of user's residences belong to this building\n            const userBuildingIds = userResidences\n              .map((ur: any) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)\n              .filter(Boolean);\n            return userBuildingIds.includes(doc.buildingId);\n          }\n        }\n\n        return false;\n      });\n\n      // Add document type indicators for frontend compatibility and field mapping\n      const enhancedDocumentRecords = filteredDocumentRecords.map((doc) => ({\n        ...doc,\n        title: doc.name, // Map database 'name' field to frontend 'title' field\n        category: doc.documentType, // Map database 'documentType' to frontend 'category'\n        documentCategory: doc.buildingId ? 'building' : 'resident',\n        entityType: doc.buildingId ? 'building' : 'residence',\n        entityId: doc.buildingId || doc.residenceId,\n        uploadDate: doc.createdAt, // For backward compatibility\n        fileUrl: doc.filePath ? `/api/documents/${doc.id}/file` : undefined, // Generate file URL if file exists\n      }));\n\n      allDocumentRecords.push(...enhancedDocumentRecords);\n\n      // Sort by upload date, most recent first\n      allDocumentRecords.sort(\n        (a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime()\n      );\n\n      const response = {\n        documents: allDocumentRecords,\n        total: allDocumentRecords.length,\n        buildingCount: allDocumentRecords.filter((d) => d.documentCategory === 'building').length,\n        residentCount: allDocumentRecords.filter((d) => d.documentCategory === 'resident').length,\n        legacyCount: allDocumentRecords.filter((d) => d.documentCategory === 'legacy').length,\n      };\n      // Log successful document access\n      logSecurityEvent('DOCUMENT_LIST_ACCESS', user, true, undefined, {\n        documentsReturned: allDocumentRecords.length,\n        filters: { documentType, specificResidenceId, specificBuildingId }\n      });\n      \n      res.json(response);\n    } catch (_error: any) {\n      const errorEntry = logError('GET /api/documents', _error, req.user);\n      res.status(500).json({ \n        message: 'Failed to fetch documents',\n        error_id: errorEntry.timestamp,\n        debug_info: process.env.NODE_ENV === 'development' ? _error.message : undefined\n      });\n    }\n  });\n\n  // Get a specific document by ID\n  app.get('/api/documents/:id', requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const userRole = user.role;\n      const userId = user.id;\n      const documentId = req.params.id;\n      const documentType = req.query.type as string; // Optional type hint\n\n      // Get user's organization and residences for filtering\n      const organizations = await storage.getUserOrganizations(userId);\n      const residences = await storage.getUserResidences(userId);\n      const buildings = await storage.getBuildings();\n\n      const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;\n      const residenceIds = residences.map((ur) => ur.residenceId);\n      const buildingIds = buildings.map((b) => b.id);\n\n      let document: DocumentRecord | null = null;\n\n      // Try to find the document in the appropriate table(s)\n      const hasNewDocumentRecordMethods = 'getBuildingDocumentRecord' in storage;\n\n      if (hasNewDocumentRecordMethods) {\n        if (!documentType || documentType === 'building') {\n          try {\n            document = await (storage as any).getBuildingDocumentRecord(\n              documentId,\n              userId,\n              userRole,\n              organizationId,\n              buildingIds\n            );\n            if (document) {\n              (document as any).documentCategory = 'building';\n              (document as any).entityType = 'building';\n              (document as any).entityId = (document as any).buildingId;\n            }\n          } catch (e) {\n            console.warn('⚠️ Error fetching building document:', e);\n          }\n        }\n\n        if (!document && (!documentType || documentType === 'resident')) {\n          try {\n            document = await (storage as any).getResidentDocumentRecord(\n              documentId,\n              userId,\n              userRole,\n              organizationId,\n              residenceIds\n            );\n            if (document) {\n              (document as any).documentCategory = 'resident';\n              (document as any).entityType = 'residence';\n              (document as any).entityId = (document as any).residenceId;\n            }\n          } catch (e) {\n            console.warn('⚠️ Error fetching resident document:', e);\n          }\n        }\n      }\n\n      // Fallback to legacy documents if not found and no type specified\n      if (!document && !documentType) {\n        try {\n          document = await storage.getDocument(documentId);\n          if (document) {\n            (document as any).documentCategory = 'legacy';\n            (document as any).entityType = 'legacy';\n            (document as any).entityId = null;\n          }\n        } catch (e) {\n          console.warn('⚠️ Error fetching legacy document:', e);\n        }\n      }\n\n      if (!document) {\n        return res.status(404).json({ message: 'DocumentRecord not found or access denied' });\n      }\n\n      res.json(document);\n    } catch (error: any) {\n      console.error('❌ Error fetching document:', error);\n      res.status(500).json({ message: 'Failed to fetch document' });\n    }\n  });\n\n  // Create a new document (supports both file upload and text-only documents)\n  app.post('/api/documents', requireAuth, upload.single('file'), async (req: any, res) => {\n    console.log(`📄 [DOCUMENTS UPLOAD] Starting document upload/creation`);\n    console.log(`📄 [DOCUMENTS UPLOAD] User: ${req.user.id} (${req.user.role})`);\n    \n    try {\n      const user = req.user;\n      const userRole = user.role;\n      const userId = user.id;\n      const { documentType, buildingId, residenceId, textContent, type, ...otherData } = req.body;\n      \n      // Enhanced debug logging with context information\n      console.log(`📄 [DOCUMENTS UPLOAD] Request details:`, {\n        documentType,\n        type,\n        buildingId, \n        residenceId,\n        hasFile: !!req.file,\n        hasTextContent: !!textContent,\n        otherDataKeys: Object.keys(otherData),\n        fileName: req.file?.originalname,\n        fileSize: req.file?.size,\n        mimeType: req.file?.mimetype\n      });\n\n      if (req.file) {\n        console.log(`📄 [DOCUMENTS UPLOAD] File details:`, {\n          originalName: req.file.originalname,\n          mimeType: req.file.mimetype,\n          size: req.file.size,\n          tempPath: req.file.path,\n          encoding: req.file.encoding\n        });\n      }\n\n      // Enhanced rate limiting check\n      console.log(`📄 [DOCUMENTS UPLOAD] Checking rate limit for user ${userId}`);\n      const rateLimitCheck = checkUploadRateLimit(userId);\n      if (!rateLimitCheck.allowed) {\n        console.log(`❌ [DOCUMENTS UPLOAD] Rate limit exceeded for user ${userId}: ${rateLimitCheck.error}`);\n        logSecurityEvent('UPLOAD_RATE_LIMIT_EXCEEDED', user, false, undefined, { error: rateLimitCheck.error });\n        return res.status(429).json({ message: rateLimitCheck.error });\n      }\n      console.log(`✅ [DOCUMENTS UPLOAD] Rate limit check passed for user ${userId}`);\n      \n      // Validate permissions - only admin, manager, and resident can create documents\n      console.log(`📄 [DOCUMENTS UPLOAD] Checking permissions for role: ${userRole}`);\n      if (!['admin', 'manager', 'resident'].includes(userRole)) {\n        console.log(`❌ [DOCUMENTS UPLOAD] Insufficient permissions for role: ${userRole}`);\n        logSecurityEvent('UNAUTHORIZED_UPLOAD_ATTEMPT', user, false, undefined, { requiredRoles: ['admin', 'manager', 'resident'] });\n        return res.status(403).json({ message: 'Insufficient permissions to create documents' });\n      }\n      console.log(`✅ [DOCUMENTS UPLOAD] Permission check passed for role: ${userRole}`);\n\n      // Check if this is a text-only document, file upload, or metadata-only document\n      const isTextDocumentRecord = !req.file && textContent;\n      const isFileDocumentRecord = !!req.file;\n      const isMetadataDocumentRecord = !req.file && !textContent && (otherData.title || otherData.name);\n\n      console.log(`📄 [DOCUMENTS UPLOAD] Document type determination:`, {\n        isTextDocument: isTextDocumentRecord,\n        isFileDocument: isFileDocumentRecord,\n        isMetadataDocument: isMetadataDocumentRecord,\n        hasTitle: !!otherData.title,\n        hasName: !!otherData.name,\n        hasTextContent: !!textContent\n      });\n\n      if (!isTextDocumentRecord && !isFileDocumentRecord && !isMetadataDocumentRecord) {\n        console.log(`❌ [DOCUMENTS UPLOAD] Invalid document request - no file, text, or metadata provided`);\n        return res.status(400).json({ message: 'Either a file, text content, or document title/name is required' });\n      }\n\n      // For text documents, create unified document directly\n      if (isTextDocumentRecord) {\n        // Create text document without file storage\n        const documentData: InsertDocument = {\n          name: otherData.name || 'Untitled DocumentRecord',\n          description: otherData.description || textContent.substring(0, 200) + (textContent.length > 200 ? '...' : ''),\n          documentType: documentType || 'other',\n          filePath: `text-documents/${userId}/${uuidv4()}.txt`, // Virtual path for text documents\n          isVisibleToTenants: otherData.isVisibleToTenants === 'true' || otherData.isVisibleToTenants === true,\n          residenceId: residenceId || undefined,\n          buildingId: buildingId || undefined,\n          uploadedById: userId,\n        };\n\n        // Permission checks\n        if (buildingId && userRole === 'manager') {\n          const organizations = await storage.getUserOrganizations(userId);\n          const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;\n          const building = await storage.getBuilding(buildingId);\n          if (!building || building.organizationId !== organizationId) {\n            return res.status(403).json({ message: 'Cannot assign document to building outside your organization' });\n          }\n        }\n\n        if (residenceId && userRole === 'resident') {\n          const residences = await storage.getUserResidences(userId);\n          const residenceIds = residences.map((ur) => ur.residenceId);\n          if (!residenceIds.includes(residenceId)) {\n            return res.status(403).json({ message: 'Cannot assign document to residence you do not own' });\n          }\n        }\n\n        // Determine document record type for directory structure\n        let documentRecordType;\n        if (buildingId && !residenceId) {\n          documentRecordType = 'building';\n        } else if (residenceId && !buildingId) {\n          documentRecordType = 'resident';\n        } else {\n          return res.status(400).json({\n            message: 'Must provide either buildingId (for building documents) or residenceId (for resident documents)',\n          });\n        }\n\n        // Save text content to local file system with proper directory structure\n        let fileName: string;\n        try {\n          const textFilePath = path.join(process.cwd(), 'uploads', documentRecordType);\n          if (!fs.existsSync(textFilePath)) {\n            fs.mkdirSync(textFilePath, { recursive: true });\n          }\n          fileName = `${uuidv4()}-text-document.txt`;\n          const fullPath = path.join(textFilePath, fileName);\n          fs.writeFileSync(fullPath, textContent, 'utf8');\n        } catch (fsError) {\n          console.error('Error saving text document to filesystem:', fsError);\n          return res.status(500).json({ message: 'Failed to save text document' });\n        }\n        \n        // Update file path to match regular document uploads\n        documentData.filePath = `${documentRecordType}/${fileName}`;\n\n        // Create document record in database\n        const document = await storage.createDocument(documentData);\n        \n        return res.status(201).json({\n          message: 'Text document created successfully',\n          document: {\n            ...document,\n            title: document.name, // Map name to title for frontend compatibility\n            category: document.documentType, // Map documentType to category for frontend compatibility\n            documentCategory: buildingId ? 'building' : 'resident',\n            entityType: buildingId ? 'building' : 'residence',\n            entityId: buildingId || residenceId,\n          },\n        });\n      }\n\n      // Handle metadata-only documents (create document record without file)\n      if (isMetadataDocumentRecord) {\n        // Map frontend 'title' field to database 'name' field and 'category' to 'documentType'\n        const documentData: InsertDocument = {\n          name: otherData.title || otherData.name || 'Untitled Document',\n          description: otherData.description || '',\n          documentType: otherData.category || documentType || 'other',\n          filePath: `metadata-documents/${userId}/${uuidv4()}`, // Placeholder path for metadata-only documents\n          isVisibleToTenants: otherData.isVisibleToTenants === 'true' || otherData.isVisibleToTenants === true || false,\n          residenceId: residenceId || undefined,\n          buildingId: buildingId || undefined,\n          uploadedById: userId,\n        };\n\n        // Validate building/residence requirement\n        if (!buildingId && !residenceId) {\n          return res.status(400).json({\n            message: 'Must provide either buildingId (for building documents) or residenceId (for resident documents)',\n          });\n        }\n\n        if (buildingId && residenceId) {\n          return res.status(400).json({\n            message: 'Cannot provide both buildingId and residenceId',\n          });\n        }\n\n        // Permission checks\n        if (buildingId && userRole === 'manager') {\n          const organizations = await storage.getUserOrganizations(userId);\n          const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;\n          const building = await storage.getBuilding(buildingId);\n          if (!building || building.organizationId !== organizationId) {\n            return res.status(403).json({ message: 'Cannot assign document to building outside your organization' });\n          }\n        }\n\n        if (residenceId && userRole === 'resident') {\n          const residences = await storage.getUserResidences(userId);\n          const residenceIds = residences.map((ur) => ur.residenceId);\n          if (!residenceIds.includes(residenceId)) {\n            return res.status(403).json({ message: 'Cannot assign document to residence you do not own' });\n          }\n        }\n\n        // Create document record in database\n        const document = await storage.createDocument(documentData);\n        \n        return res.status(201).json({\n          message: 'Document created successfully',\n          document: {\n            ...document,\n            title: document.name, // Map name to title for frontend compatibility\n            category: document.documentType, // Map documentType to category for frontend compatibility\n            documentCategory: buildingId ? 'building' : 'resident',\n            entityType: buildingId ? 'building' : 'residence',\n            entityId: buildingId || residenceId,\n            fileUrl: undefined, // No file URL for metadata-only documents\n          },\n        });\n      }\n\n      // Handle file uploads (existing logic)\n      console.log(`📄 [DOCUMENTS UPLOAD] Starting file document processing`);\n      \n      // Determine document record type based on buildingId/residenceId (not from documentType field)\n      let finalDocumentRecordType;\n      if (buildingId && !residenceId) {\n        finalDocumentRecordType = 'building';\n        console.log(`📄 [DOCUMENTS UPLOAD] Determined document type: BUILDING (ID: ${buildingId})`);\n      } else if (residenceId && !buildingId) {\n        finalDocumentRecordType = 'resident';\n        console.log(`📄 [DOCUMENTS UPLOAD] Determined document type: RESIDENCE (ID: ${residenceId})`);\n      } else if (buildingId && residenceId) {\n        console.log(`❌ [DOCUMENTS UPLOAD] Both buildingId and residenceId provided: ${buildingId}, ${residenceId}`);\n        return res.status(400).json({\n          message: 'Cannot provide both buildingId and residenceId',\n        });\n      } else {\n        console.log(`❌ [DOCUMENTS UPLOAD] No buildingId or residenceId provided`);\n        return res.status(400).json({\n          message:\n            'Must provide either buildingId (for building documents) or residenceId (for resident documents)',\n        });\n      }\n\n      if (finalDocumentRecordType === 'building') {\n        console.log(`🏢 [BUILDING UPLOAD] Processing building document for building ID: ${buildingId}`);\n        \n        // Validate and create building document\n        if (!buildingId) {\n          console.log(`❌ [BUILDING UPLOAD] Missing buildingId`);\n          return res.status(400).json({ message: 'buildingId is required for building documents' });\n        }\n\n        // Prepare the permanent file path and move file if needed\n        let filePath: string;\n        let fileName: string | undefined;\n        \n        if (req.file) {\n          console.log(`🏢 [BUILDING UPLOAD] Processing file upload for building ${buildingId}`);\n          \n          // Generate unique filename and move to permanent location\n          fileName = `${uuidv4()}-${req.file.originalname}`;\n          const permanentDir = path.join(process.cwd(), 'uploads', 'buildings', buildingId);\n          \n          console.log(`🏢 [BUILDING UPLOAD] File paths:`, {\n            originalName: req.file.originalname,\n            newFileName: fileName,\n            tempPath: req.file.path,\n            permanentDir,\n            directoryExists: fs.existsSync(permanentDir)\n          });\n          \n          // Ensure directory exists\n          if (!fs.existsSync(permanentDir)) {\n            console.log(`🏢 [BUILDING UPLOAD] Creating directory: ${permanentDir}`);\n            fs.mkdirSync(permanentDir, { recursive: true });\n          }\n          \n          // Move file from temporary to permanent location (copy + delete for cross-filesystem)\n          const permanentPath = path.join(permanentDir, fileName);\n          console.log(`🏢 [BUILDING UPLOAD] Copying file from ${req.file.path} to ${permanentPath}`);\n          fs.copyFileSync(req.file.path, permanentPath);\n          console.log(`🏢 [BUILDING UPLOAD] Cleaning up temporary file: ${req.file.path}`);\n          fs.unlinkSync(req.file.path); // Clean up temporary file\n          filePath = `buildings/${buildingId}/${fileName}`;\n          console.log(`🏢 [BUILDING UPLOAD] File successfully moved to: ${filePath}`);\n        } else {\n          console.log(`🏢 [BUILDING UPLOAD] No file provided, creating placeholder path`);\n          filePath = `temp-path-${Date.now()}`;\n        }\n        \n        const dataToValidate = {\n          ...otherData,\n          buildingId,\n          uploadedById: userId,\n          filePath,\n          fileName,\n          fileSize: req.file?.size,\n          mimeType: req.file?.mimetype,\n          documentType: documentType || type || 'other', // Default to 'other' if not provided\n        };\n        \n        console.log(`🏢 [BUILDING UPLOAD] Data to validate:`, {\n          buildingId,\n          uploadedById: userId,\n          filePath,\n          fileName,\n          fileSize: req.file?.size,\n          mimeType: req.file?.mimetype,\n          documentType: documentType || type || 'other',\n          otherDataKeys: Object.keys(otherData)\n        });\n        \n        let validatedData;\n        try {\n          validatedData = insertDocumentSchema.parse(dataToValidate);\n          console.log(`✅ [BUILDING UPLOAD] Document validation successful for building ${buildingId}`);\n        } catch (validationError) {\n          console.log(`❌ [BUILDING UPLOAD] Document validation failed for building ${buildingId}:`, validationError);\n          return res.status(400).json({ \n            message: 'Validation failed', \n            error: validationError.message || 'Invalid data',\n            details: validationError.issues || validationError\n          });\n        }\n\n        // Permission checks for building documents\n        console.log(`🏢 [BUILDING UPLOAD] Checking permissions for role: ${userRole}`);\n        \n        if (userRole === 'manager') {\n          console.log(`🏢 [BUILDING UPLOAD] Manager permission check for building ${buildingId}`);\n          const organizations = await storage.getUserOrganizations(userId);\n          const organizationId =\n            organizations.length > 0 ? organizations[0].organizationId : undefined;\n          console.log(`🏢 [BUILDING UPLOAD] Manager organization: ${organizationId}`);\n          \n          const building = await storage.getBuilding(buildingId);\n          console.log(`🏢 [BUILDING UPLOAD] Building organization: ${building?.organizationId}`);\n          \n          if (!building || building.organizationId !== organizationId) {\n            console.log(`❌ [BUILDING UPLOAD] Manager permission denied - organization mismatch`);\n            return res\n              .status(403)\n              .json({ message: 'Cannot assign document to building outside your organization' });\n          }\n          console.log(`✅ [BUILDING UPLOAD] Manager permission check passed`);\n        }\n\n        if (userRole === 'resident') {\n          console.log(`🏢 [BUILDING UPLOAD] Resident permission check for building ${buildingId}`);\n          const residences = await storage.getUserResidences(userId);\n          console.log(`🏢 [BUILDING UPLOAD] User residences count: ${residences.length}`);\n          \n          const hasResidenceInBuilding = await Promise.all(\n            residences.map(async (ur) => {\n              const residence = await storage.getResidence(ur.residenceId);\n              const isInBuilding = residence && residence.buildingId === buildingId;\n              console.log(`🏢 [BUILDING UPLOAD] Residence ${ur.residenceId} in building ${buildingId}: ${isInBuilding}`);\n              return isInBuilding;\n            })\n          );\n\n          if (!hasResidenceInBuilding.some(Boolean)) {\n            console.log(`❌ [BUILDING UPLOAD] Resident permission denied - no residence in building`);\n            return res\n              .status(403)\n              .json({ message: 'Cannot assign document to building where you have no residence' });\n          }\n          console.log(`✅ [BUILDING UPLOAD] Resident permission check passed`);\n        }\n\n        // Create unified document instead of separate building document\n        const unifiedDocument: InsertDocument = {\n          name: validatedData.name || 'Untitled',\n          description: validatedData.description,\n          documentType: validatedData.documentType,\n          filePath: validatedData.filePath || `temp-path-${Date.now()}`,\n          isVisibleToTenants: validatedData.isVisibleToTenants || false,\n          residenceId: undefined,\n          buildingId: validatedData.buildingId,\n          uploadedById: validatedData.uploadedById,\n        };\n\n        console.log(`🏢 [BUILDING UPLOAD] Creating document in database:`, {\n          name: unifiedDocument.name,\n          documentType: unifiedDocument.documentType,\n          filePath: unifiedDocument.filePath,\n          buildingId: unifiedDocument.buildingId,\n          uploadedById: unifiedDocument.uploadedById\n        });\n\n        const document = await storage.createDocument(unifiedDocument);\n        console.log(`✅ [BUILDING UPLOAD] Document created successfully with ID: ${document.id}`);\n\n        // File has been moved to permanent location, no cleanup needed\n\n        res.status(201).json({\n          ...document,\n          documentCategory: 'building',\n          entityType: 'building',\n          entityId: document.buildingId,\n        });\n      } else if (finalDocumentRecordType === 'resident') {\n        console.log(`🏠 [RESIDENCE UPLOAD] Processing residence document for residence ID: ${residenceId}`);\n        \n        // Validate and create resident document\n        if (!residenceId) {\n          console.log(`❌ [RESIDENCE UPLOAD] Missing residenceId`);\n          return res\n            .status(400)\n            .json({ message: 'residenceId is required for resident documents' });\n        }\n\n        // Prepare the permanent file path and move file if needed\n        let filePath: string;\n        let fileName: string | undefined;\n        \n        if (req.file) {\n          console.log(`🏠 [RESIDENCE UPLOAD] Processing file upload for residence ${residenceId}`);\n          \n          // Generate unique filename and move to permanent location\n          fileName = `${uuidv4()}-${req.file.originalname}`;\n          const permanentDir = path.join(process.cwd(), 'uploads', 'residences', residenceId);\n          \n          console.log(`🏠 [RESIDENCE UPLOAD] File paths:`, {\n            originalName: req.file.originalname,\n            newFileName: fileName,\n            tempPath: req.file.path,\n            permanentDir,\n            directoryExists: fs.existsSync(permanentDir)\n          });\n          \n          // Ensure directory exists\n          if (!fs.existsSync(permanentDir)) {\n            console.log(`🏠 [RESIDENCE UPLOAD] Creating directory: ${permanentDir}`);\n            fs.mkdirSync(permanentDir, { recursive: true });\n          }\n          \n          // Move file from temporary to permanent location (copy + delete for cross-filesystem)\n          const permanentPath = path.join(permanentDir, fileName);\n          console.log(`🏠 [RESIDENCE UPLOAD] Copying file from ${req.file.path} to ${permanentPath}`);\n          fs.copyFileSync(req.file.path, permanentPath);\n          console.log(`🏠 [RESIDENCE UPLOAD] Cleaning up temporary file: ${req.file.path}`);\n          fs.unlinkSync(req.file.path); // Clean up temporary file\n          filePath = `residences/${residenceId}/${fileName}`;\n          console.log(`🏠 [RESIDENCE UPLOAD] File successfully moved to: ${filePath}`);\n        } else {\n          console.log(`🏠 [RESIDENCE UPLOAD] No file provided, creating placeholder path`);\n          filePath = `temp-path-${Date.now()}`;\n        }\n\n        const dataToValidate = {\n          ...otherData,\n          residenceId,\n          uploadedById: userId,\n          filePath,\n          fileName,\n          fileSize: req.file?.size,\n          mimeType: req.file?.mimetype,\n          documentType: documentType || type || 'other', // Default to 'other' if not provided\n        };\n        \n        console.log('🔍 Residence document validation debug:', {\n          dataToValidate,\n          documentType,\n          otherDataKeys: Object.keys(otherData),\n          hasFile: !!req.file\n        });\n        \n        let validatedData;\n        try {\n          validatedData = insertDocumentSchema.parse(dataToValidate);\n          console.log('✅ Residence document validation SUCCESS');\n        } catch (validationError) {\n          console.log('❌ Residence document validation ERROR:', validationError);\n          return res.status(400).json({ \n            message: 'Validation failed', \n            error: validationError.message || 'Invalid data',\n            details: validationError.issues || validationError\n          });\n        }\n\n        // Permission checks for resident documents\n        if (userRole === 'manager') {\n          const organizations = await storage.getUserOrganizations(userId);\n          const organizationId =\n            organizations.length > 0 ? organizations[0].organizationId : undefined;\n          const residence = await storage.getResidence(residenceId);\n          if (residence) {\n            const building = await storage.getBuilding(residence.buildingId);\n            if (!building || building.organizationId !== organizationId) {\n              return res\n                .status(403)\n                .json({ message: 'Cannot assign document to residence outside your organization' });\n            }\n          } else {\n            return res.status(404).json({ message: 'Residence not found' });\n          }\n        }\n\n        if (userRole === 'resident') {\n          const residences = await storage.getUserResidences(userId);\n          const residenceIds = residences.map((ur) => ur.residenceId);\n\n          if (!residenceIds.includes(residenceId)) {\n            return res\n              .status(403)\n              .json({ message: 'Cannot assign document to residence you do not own' });\n          }\n        }\n\n        // Convert to unified document format\n        const unifiedDocument: InsertDocument = {\n          name: validatedData.name || 'Untitled',\n          description: validatedData.description,\n          documentType: validatedData.documentType,\n          filePath: validatedData.filePath || `temp-path-${Date.now()}`,\n          isVisibleToTenants: validatedData.isVisibleToTenants || false,\n          residenceId: validatedData.residenceId,\n          buildingId: undefined,\n          uploadedById: validatedData.uploadedById,\n        };\n\n        const document = await storage.createDocument(unifiedDocument) ;\n\n        console.log('📝 Created resident document:', document);\n        console.log('📝 DocumentRecord ID:', document.id);\n\n        const response = {\n          ...document,\n          documentCategory: 'resident',\n          entityType: 'residence',\n          entityId: document.residenceId,\n        };\n\n        console.log('📤 Sending response:', response);\n        res.status(201).json(response);\n      } else {\n        return res.status(400).json({\n          message: 'Invalid documentType. Must be either \\\"building\\\" or \\\"resident\\\"',\n        });\n      }\n    } catch (_error: any) {\n      // Clean up temporary file on error\n      if (req.file?.path) {\n        try {\n          fs.unlinkSync(req.file.path);\n        } catch (cleanupError) {\n          console.warn('⚠️ Failed to cleanup temporary file:', cleanupError);\n        }\n      }\n\n      console.error('❌ Error creating document:', _error);\n      \n      if (_error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: 'Invalid document data',\n          errors: _error.issues,\n        });\n      }\n\n      res.status(500).json({ message: 'Failed to create document' });\n    }\n  });\n\n  // Update a document\n  app.put('/api/documents/:id', requireAuth, upload.single('file'), async (req: any, res) => {\n    console.log(`📝 [DOCUMENT UPDATE] Starting update for document ID: ${req.params.id}`);\n    console.log(`📝 [DOCUMENT UPDATE] User: ${req.user.id} (${req.user.role})`);\n    console.log(`📝 [DOCUMENT UPDATE] Body:`, req.body);\n    console.log(`📝 [DOCUMENT UPDATE] File provided:`, !!req.file);\n    \n    try {\n      const user = req.user;\n      const userRole = user.role;\n      const userId = user.id;\n      const documentId = req.params.id;\n\n      // Get existing document first to check permissions and get current file path\n      const existingDocument = await storage.getDocuments({ documentId }).then(docs => docs[0]);\n      \n      if (!existingDocument) {\n        console.log(`❌ [DOCUMENT UPDATE] Document not found: ${documentId}`);\n        return res.status(404).json({ message: 'Document not found' });\n      }\n\n      console.log(`📝 [DOCUMENT UPDATE] Existing document:`, {\n        id: existingDocument.id,\n        name: existingDocument.name,\n        filePath: existingDocument.filePath,\n        buildingId: existingDocument.buildingId,\n        residenceId: existingDocument.residenceId\n      });\n\n      // Check permissions (similar to view permissions)\n      let hasAccess = false;\n      if (userRole === 'admin') {\n        hasAccess = true;\n        console.log(`✅ [DOCUMENT UPDATE] Admin access granted`);\n      } else if (userRole === 'manager') {\n        // Manager should have access to documents in their organization\n        const organizations = await storage.getUserOrganizations(userId);\n        const buildings = await storage.getBuildings();\n        const userOrganizations = organizations.map(org => org.organizationId);\n        \n        if (existingDocument.buildingId) {\n          const orgBuildings = buildings.filter(building => \n            userOrganizations.includes(building.organizationId || '')\n          );\n          const orgBuildingIds = orgBuildings.map(b => b.id);\n          hasAccess = orgBuildingIds.includes(existingDocument.buildingId);\n        }\n        console.log(`📝 [DOCUMENT UPDATE] Manager access: ${hasAccess}`);\n      }\n\n      if (!hasAccess) {\n        console.log(`❌ [DOCUMENT UPDATE] Access denied for user ${userId}`);\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      // Prepare update data\n      const updateData: any = {};\n      \n      if (req.body.name) updateData.name = req.body.name;\n      if (req.body.description !== undefined) updateData.description = req.body.description;\n      if (req.body.documentType) updateData.documentType = req.body.documentType;\n      if (req.body.isVisibleToTenants !== undefined) {\n        updateData.isVisibleToTenants = req.body.isVisibleToTenants === 'true';\n      }\n\n      console.log(`📝 [DOCUMENT UPDATE] Update data:`, updateData);\n\n      // Handle file replacement if provided\n      if (req.file) {\n        console.log(`📝 [DOCUMENT UPDATE] Processing file replacement:`, {\n          originalname: req.file.originalname,\n          size: req.file.size,\n          mimetype: req.file.mimetype,\n          tempPath: req.file.path\n        });\n\n        // Validate the file\n        const fileValidation = validateFile(req.file);\n        if (!fileValidation.isValid) {\n          // Clean up temp file\n          try {\n            fs.unlinkSync(req.file.path);\n          } catch (cleanupError) {\n            console.warn('⚠️ Failed to cleanup temp file:', cleanupError);\n          }\n          return res.status(400).json({ message: fileValidation.error });\n        }\n\n        // Generate unique file path\n        const fileExtension = path.extname(req.file.originalname);\n        const baseFileName = path.basename(req.file.originalname, fileExtension);\n        const uniqueId = crypto.randomBytes(16).toString('hex');\n        const entityType = existingDocument.buildingId ? 'buildings' : 'residences';\n        const entityId = existingDocument.buildingId || existingDocument.residenceId;\n        \n        const documentsDir = path.join(process.cwd(), 'uploads', entityType, entityId || 'general');\n        const uniqueFileName = `${uniqueId}-${baseFileName}${fileExtension}`;\n        const finalPath = path.join(documentsDir, uniqueFileName);\n        const relativePath = path.join(entityType, entityId || 'general', uniqueFileName);\n\n        // Ensure directory exists\n        if (!fs.existsSync(documentsDir)) {\n          fs.mkdirSync(documentsDir, { recursive: true });\n        }\n\n        // Move file from temp to final location\n        fs.renameSync(req.file.path, finalPath);\n        \n        // Update file-related fields\n        updateData.filePath = relativePath;\n        updateData.fileName = req.file.originalname;\n        updateData.fileSize = req.file.size;\n        updateData.mimeType = req.file.mimetype;\n\n        console.log(`✅ [DOCUMENT UPDATE] File stored at: ${finalPath}`);\n\n        // Clean up old file if it exists\n        if (existingDocument.filePath) {\n          const oldFilePath = path.isAbsolute(existingDocument.filePath) \n            ? existingDocument.filePath \n            : path.join(process.cwd(), 'uploads', existingDocument.filePath);\n          \n          try {\n            if (fs.existsSync(oldFilePath)) {\n              fs.unlinkSync(oldFilePath);\n              console.log(`🗑️ [DOCUMENT UPDATE] Cleaned up old file: ${oldFilePath}`);\n            }\n          } catch (cleanupError) {\n            console.warn('⚠️ Failed to cleanup old file:', cleanupError);\n          }\n        }\n      }\n\n      // Update the document\n      const updatedDocument = await storage.updateDocument(documentId, updateData);\n\n      if (!updatedDocument) {\n        console.log(`❌ [DOCUMENT UPDATE] Failed to update document: ${documentId}`);\n        return res.status(404).json({ message: 'Failed to update document' });\n      }\n\n      console.log(`✅ [DOCUMENT UPDATE] Document updated successfully:`, {\n        id: (updatedDocument as any).id,\n        name: (updatedDocument as any).name\n      });\n\n      // Add compatibility fields for frontend\n      (updatedDocument as any).documentCategory = (updatedDocument as any).buildingId ? 'building' : 'resident';\n      (updatedDocument as any).entityType = (updatedDocument as any).buildingId ? 'building' : 'residence';\n      (updatedDocument as any).entityId = (updatedDocument as any).buildingId || (updatedDocument as any).residenceId;\n\n      res.json(updatedDocument);\n    } catch (_error: any) {\n      // Clean up temporary file on error\n      if (req.file?.path) {\n        try {\n          fs.unlinkSync(req.file.path);\n          console.log(`🗑️ [DOCUMENT UPDATE] Cleaned up temp file on error: ${req.file.path}`);\n        } catch (cleanupError) {\n          console.warn('⚠️ Failed to cleanup temporary file:', cleanupError);\n        }\n      }\n\n      console.error('❌ Error updating document:', _error);\n      \n      if (_error instanceof z.ZodError) {\n        return res.status(400).json({\n          message: 'Invalid document data',\n          errors: _error.issues,\n        });\n      }\n\n      res.status(500).json({ message: 'Failed to update document' });\n    }\n  });\n\n  // Security audit endpoint - admin only\n  app.get('/api/documents/security/audit-log', requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      \n      // Only admins can access audit logs\n      if (user.role !== 'admin') {\n        logSecurityEvent('UNAUTHORIZED_AUDIT_ACCESS', user, false);\n        return res.status(403).json({ message: 'Access denied. Admin privileges required.' });\n      }\n      \n      // Get last 100 audit events with pagination support\n      const limit = Math.min(parseInt(req.query.limit as string) || 50, 100);\n      const offset = parseInt(req.query.offset as string) || 0;\n      \n      const paginatedLogs = auditLog.slice(offset, offset + limit);\n      \n      logSecurityEvent('AUDIT_LOG_ACCESS', user, true, undefined, { limit, offset });\n      \n      res.json({\n        events: paginatedLogs,\n        total: auditLog.length,\n        limit,\n        offset\n      });\n    } catch (error: any) {\n      console.error('Error accessing audit log:', error);\n      res.status(500).json({ message: 'Failed to retrieve audit log' });\n    }\n  });\n  \n  // Delete document with enhanced security logging\n  app.delete('/api/documents/:id', requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const userRole = user.role;\n      const userId = user.id;\n      const documentId = req.params.id;\n      const documentType = req.query.type as string; // Optional type hint\n\n      // Get user's organization for permission checking\n      const organizations = await storage.getUserOrganizations(userId);\n      const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;\n\n      // Use unified documents system for deletion\n      let deleted = false;\n\n      try {\n        deleted = await storage.deleteDocument(documentId);\n      } catch (e) {\n        console.warn('⚠️ Error deleting document:', e);\n      }\n\n      if (!deleted) {\n        return res.status(404).json({ message: 'DocumentRecord not found or access denied' });\n      }\n\n      res.status(204).send();\n    } catch (error: any) {\n      console.error('❌ Error in document deletion:', error);\n      res.status(500).json({ message: 'Failed to delete document' });\n    }\n  });\n\n  // Upload endpoint that matches frontend expectation: /api/documents/:id/upload\n  app.post(\n    '/api/documents/:id/upload',\n    requireAuth,\n    upload.single('file'),\n    async (req: any, res) => {\n      try {\n        const user = req.user;\n        const userRole = user.role;\n        const userId = user.id;\n        const documentId = req.params.id; // The :id in the URL is the document ID (from frontend)\n        const { documentType = 'resident', residenceId, ...otherData } = req.body;\n\n        console.log('📤 Upload request received:', {\n          documentId,\n          userId,\n          userRole,\n          hasFile: !!req.file,\n          fileInfo: req.file\n            ? {\n                fieldname: req.file.fieldname,\n                originalname: req.file.originalname,\n                encoding: req.file.encoding,\n                mimetype: req.file.mimetype,\n                size: req.file.size,\n                path: req.file.path,\n              }\n            : null,\n          bodyKeys: Object.keys(req.body),\n          contentType: req.headers['content-type'],\n        });\n\n        // Validate permissions - only admin, manager, and resident can create documents\n        if (!['admin', 'manager', 'resident'].includes(userRole)) {\n          return res.status(403).json({ message: 'Insufficient permissions to create documents' });\n        }\n\n        if (!req.file) {\n          console.error('❌ No file received in upload request');\n          return res.status(400).json({ message: 'File is required for upload' });\n        }\n\n        // Get the existing document to determine where to store the file\n        const documents = await storage.getDocuments({\n          userId,\n          userRole,\n        });\n\n        const existingDocument = documents.find((doc) => doc.id === documentId);\n\n        if (!existingDocument) {\n          return res.status(404).json({ message: 'DocumentRecord not found' });\n        }\n\n        // File validation passed - file exists and is ready for upload\n\n        // Determine organization ID based on document context\n        let organizationId: string;\n\n        if (existingDocument.buildingId) {\n          const building = await storage.getBuilding(existingDocument.buildingId);\n          if (!building) {\n            return res.status(404).json({ message: 'Building not found' });\n          }\n          organizationId = building.organizationId;\n        } else if (existingDocument.residenceId) {\n          const residence = await storage.getResidence(existingDocument.residenceId);\n          if (!residence) {\n            return res.status(404).json({ message: 'Residence not found' });\n          }\n          const building = await storage.getBuilding(residence.buildingId);\n          if (!building) {\n            return res.status(404).json({ message: 'Building not found' });\n          }\n          organizationId = building.organizationId;\n        } else {\n          return res\n            .status(400)\n            .json({ message: 'DocumentRecord must be associated with a building or residence' });\n        }\n\n        // Note: File upload to external storage removed\n\n        // Update document with file information\n        const updatedDocument = await storage.updateDocument(documentId, {\n          filePath: `prod_org_${organizationId}/${req.file.originalname}`,\n          name: req.file.originalname,\n          // Remove mimeType as it's not in schema\n        });\n\n        // Clean up temporary file\n        if (req.file && req.file.path && fs.existsSync(req.file.path)) {\n          fs.unlinkSync(req.file.path);\n        }\n\n        res.status(200).json({\n          document: updatedDocument,\n          message: 'File uploaded successfully',\n        });\n      } catch (error: any) {\n        const errorTimestamp = new Date().toISOString();\n        console.error(`[${errorTimestamp}] Error type:`, error.constructor.name);\n        console.error(`[${errorTimestamp}] Error message:`, error.message);\n        console.error(`[${errorTimestamp}] Error stack:`, error.stack);\n\n        // Clean up temporary file on error\n        if (req.file && req.file.path && fs.existsSync(req.file.path)) {\n          try {\n            fs.unlinkSync(req.file.path);\n          } catch (cleanupError) {\n            console.error(`[${errorTimestamp}] Error cleaning up file:`, cleanupError);\n          }\n        }\n\n        if (error.name === 'ZodError') {\n          return res.status(400).json({\n            message: 'Validation error',\n            errors: error.errors,\n          });\n        }\n\n        res.status(500).json({ message: 'Failed to upload document' });\n      }\n    }\n  );\n\n  // POST /api/documents/upload - Upload file to GCS and create unified document record\n  app.post('/api/documents/upload', requireAuth, upload.single('file'), async (req: any, res) => {\n    const timestamp = new Date().toISOString();\n    console.log(`[${timestamp}] 📋 POST /api/documents/upload - Starting upload`, {\n      hasFile: !!req.file,\n      fileName: req.file?.originalname,\n      fileSize: req.file?.size,\n      body: req.body,\n      userId: req.user?.id\n    });\n    \n    try {\n      \n      // Check if file was uploaded\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      // Parse form data\n      const formData = {\n        name: req.body.name,\n        description: req.body.description || '',\n        documentType: req.body.documentType || req.body.type, // Handle both field names\n        isVisibleToTenants: req.body.isVisibleToTenants === 'true',\n        residenceId: req.body.residenceId || undefined,\n        buildingId: req.body.buildingId || undefined,\n        attachedToType: req.body.attachedToType || undefined,\n        attachedToId: req.body.attachedToId || undefined,\n      };\n\n      // Production debugging: Log form data before validation\n      if (process.env.NODE_ENV === 'production') {\n        console.log('[PROD DEBUG] Form data before validation:', formData);\n      }\n\n      // Validate form data\n      const validatedData = uploadDocumentRecordSchema.parse(formData);\n      \n      // DEBUG: Log validated data to see what's being passed\n      console.log(`[${timestamp}] 🔍 VALIDATION DEBUG: Form data before validation:`, formData);\n      console.log(`[${timestamp}] 🔍 VALIDATION DEBUG: Validated data:`, {\n        ...validatedData,\n        hasAttachedToType: !!validatedData.attachedToType,\n        hasAttachedToId: !!validatedData.attachedToId\n      });\n      \n      // Production debugging: Log after validation\n      if (process.env.NODE_ENV === 'production') {\n        console.log('[PROD DEBUG] Form data validation passed:', validatedData);\n      }\n\n      // Get user info from auth middleware\n      const userId = req.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n\n      // GCS DISABLED: Skip bucket configuration (using local storage only)\n      console.log('📁 GCS disabled - skipping bucket configuration check');\n\n      // Generate unique GCS path\n      const fileExtension = path.extname(req.file.originalname);\n      const baseFileName = path.basename(req.file.originalname, fileExtension);\n      const uniqueFileName = `${uuidv4()}-${baseFileName}${fileExtension}`;\n\n      let filePath: string;\n      if (validatedData.residenceId) {\n        filePath = `residences/${validatedData.residenceId}/${uniqueFileName}`;\n      } else if (validatedData.buildingId) {\n        filePath = `buildings/${validatedData.buildingId}/${uniqueFileName}`;\n      } else {\n        filePath = `general/${uniqueFileName}`;\n      }\n\n      // DISABLED GCS: Force local storage for all environments\n      console.log('📁 GCS disabled - using local storage for all document operations');\n      \n      // Always use local storage (GCS disabled)\n      try {\n        // Use local storage with robust error handling\n        const localStoragePath = path.join(process.cwd(), 'uploads');\n        \n        // Ensure uploads directory exists\n        try {\n          if (!fs.existsSync(localStoragePath)) {\n            fs.mkdirSync(localStoragePath, { recursive: true });\n            console.log(`📁 Created uploads directory: ${localStoragePath}`);\n          }\n        } catch (dirError) {\n          console.error('Failed to create uploads directory:', dirError);\n          throw new Error('Cannot create uploads directory - check permissions');\n        }\n\n        // Create directory structure for file\n        const localFilePath = path.join(localStoragePath, filePath);\n        const localFileDir = path.dirname(localFilePath);\n        \n        try {\n          if (!fs.existsSync(localFileDir)) {\n            fs.mkdirSync(localFileDir, { recursive: true });\n            console.log(`📁 Created subdirectory: ${localFileDir}`);\n          }\n        } catch (subdirError) {\n          console.error('Failed to create file subdirectory:', subdirError);\n          throw new Error('Cannot create file directory - check permissions');\n        }\n\n        // Copy uploaded file to local storage\n        try {\n          fs.copyFileSync(req.file!.path, localFilePath);\n          console.log(`📁 File saved successfully at ${localFilePath}`);\n        } catch (copyError) {\n          console.error('Failed to copy file:', copyError);\n          throw new Error('Cannot save file - check disk space and permissions');\n        }\n      } catch (localError) {\n        console.error('Local storage error:', localError);\n        throw new Error('Failed to save file locally');\n      }\n\n      // Create document record in database\n      const documentData: InsertDocument = {\n        name: validatedData.name,\n        description: validatedData.description,\n        documentType: validatedData.documentType,\n        filePath: filePath,\n        isVisibleToTenants: validatedData.isVisibleToTenants,\n        residenceId: validatedData.residenceId,\n        buildingId: validatedData.buildingId,\n        uploadedById: userId,\n        attachedToType: validatedData.attachedToType,\n        attachedToId: validatedData.attachedToId,\n      };\n\n      // CRITICAL DEBUG POINT: Database creation\n      console.log(`[${timestamp}] 🎯 CRITICAL: About to create document in database:`, {\n        name: documentData.name,\n        type: documentData.documentType,\n        buildingId: documentData.buildingId,\n        residenceId: documentData.residenceId,\n        uploadedById: documentData.uploadedById,\n        attachedToType: documentData.attachedToType,\n        attachedToId: documentData.attachedToId\n      });\n\n      // Create document record in database  \n      const newDocument = await storage.createDocument(documentData);\n      \n      // CRITICAL: Log successful database creation\n      console.log(`[${timestamp}] ✅ CRITICAL: DocumentRecord created successfully:`, { \n        id: newDocument?.id, \n        name: newDocument?.name,\n        filePath: newDocument?.filePath \n      });\n\n      // Clean up temporary file\n      if (fs.existsSync(req.file.path)) {\n        fs.unlinkSync(req.file.path);\n      }\n\n      // Return success response\n      res.status(201).json({\n        message: 'DocumentRecord uploaded successfully',\n        document: newDocument,\n      });\n    } catch (error: any) {\n      const errorEntry = logError('POST /api/documents/upload', error, req.user);\n\n      // Clean up temporary file on error\n      if (req.file && req.file.path && fs.existsSync(req.file.path)) {\n        try {\n          fs.unlinkSync(req.file.path);\n        } catch (cleanupError) {\n          console.error('Error cleaning up temporary file:', cleanupError);\n        }\n      }\n\n      // Handle validation errors\n      if (error.name === 'ZodError') {\n        return res.status(400).json({\n          message: 'Validation error',\n          errors: error.errors,\n          error_id: errorEntry.timestamp\n        });\n      }\n\n      // Handle GCS errors\n      if (error.message && error.message.includes('Google Cloud Storage')) {\n        return res.status(500).json({\n          message: 'File upload failed',\n          error: 'Storage service error',\n          error_id: errorEntry.timestamp\n        });\n      }\n\n      // Handle unique constraint violations (path conflicts)\n      if (error?.message?.includes('unique constraint') || error?.code === '23505') {\n        return res.status(409).json({\n          message: 'DocumentRecord path conflict - please try uploading again',\n          error: 'Path already exists',\n          error_id: errorEntry.timestamp\n        });\n      }\n\n      // Handle database errors\n      if (error.message && error.message.includes('database')) {\n        return res.status(500).json({\n          message: 'Failed to save document record',\n          error: 'Database error',\n          error_id: errorEntry.timestamp\n        });\n      }\n\n      // Generic error response\n      res.status(500).json({\n        message: 'Internal server error',\n        error: 'DocumentRecord upload failed',\n        error_id: errorEntry.timestamp,\n        debug_info: process.env.NODE_ENV === 'development' ? error.message : undefined\n      });\n    }\n  });\n\n  // Serve document files\n  // Serve document files with proper role-based access control\n  app.get('/api/documents/:id/file', requireAuth, async (req: any, res) => {\n    console.log(`📥 [DOCUMENT DOWNLOAD] File download request for document ID: ${req.params.id}`);\n    console.log(`📥 [DOCUMENT DOWNLOAD] User: ${req.user.id} (${req.user.role})`);\n    \n    try {\n      const user = req.user;\n      const userRole = user.role;\n      const userId = user.id;\n      const documentId = req.params.id;\n      const isDownload = req.query.download === 'true';\n\n      console.log(`📥 [DOCUMENT DOWNLOAD] Request details:`, {\n        documentId,\n        userId,\n        userRole,\n        isDownload\n      });\n\n      // Get user's organization and residences for permission checking\n      console.log(`📥 [DOCUMENT DOWNLOAD] Fetching user permissions data...`);\n      const organizations = await storage.getUserOrganizations(userId);\n      const residences = await storage.getUserResidences(userId);\n      const buildings = await storage.getBuildings();\n\n      console.log(`📥 [DOCUMENT DOWNLOAD] User permissions:`, {\n        organizationsCount: organizations.length,\n        residencesCount: residences.length,\n        buildingsCount: buildings.length\n      });\n\n      // Log access attempt for security auditing\n      logSecurityEvent('DOCUMENT_FILE_ACCESS_ATTEMPT', user, false, documentId, {\n        userRole,\n        documentId,\n        isDownload\n      });\n\n      // Find the document directly from database without filtering by user\n      console.log(`📥 [DOCUMENT DOWNLOAD] Looking for document ${documentId} in database...`);\n      const allDocuments = await storage.getDocuments({});\n      const document = allDocuments.find((doc) => doc.id === documentId);\n\n      if (!document) {\n        console.log(`❌ [DOCUMENT DOWNLOAD] Document not found: ${documentId}`);\n        logSecurityEvent('DOCUMENT_FILE_ACCESS_NOT_FOUND', user, false, documentId);\n        return res.status(404).json({ message: 'Document not found' });\n      }\n\n      console.log(`📥 [DOCUMENT DOWNLOAD] Document found:`, {\n        id: document.id,\n        name: document.name,\n        filePath: document.filePath,\n        buildingId: document.buildingId,\n        residenceId: document.residenceId,\n        isVisibleToTenants: document.isVisibleToTenants,\n        uploadedById: document.uploadedById\n      });\n\n      // Get user's organization info\n      const userOrganizations = organizations.map(org => org.organizationId);\n      const userResidenceIds = residences\n        .map((ur: any) => ur.residenceId || ur.userResidence?.residenceId || ur.residence?.id)\n        .filter(Boolean);\n\n      // Get building IDs that user's residences belong to\n      const userBuildingIds = [];\n      for (const userResidence of residences) {\n        // Handle different residence data structures\n        const residenceId = userResidence.residenceId;\n        if (residenceId) {\n          // Find the actual residence to get building ID\n          const allResidences = await storage.getResidences();\n          const residence = allResidences.find(r => r.id === residenceId);\n          if (residence?.buildingId) {\n            userBuildingIds.push(residence.buildingId);\n          }\n        }\n      }\n\n      // Check permissions based on the specified rules\n      console.log(`📥 [DOCUMENT DOWNLOAD] Checking access permissions for role: ${userRole}`);\n      let hasAccess = false;\n      let accessReason = '';\n\n      console.log(`📥 [DOCUMENT DOWNLOAD] Permission context:`, {\n        userOrganizations,\n        userResidenceIds,\n        userBuildingIds,\n        documentBuildingId: document.buildingId,\n        documentResidenceId: document.residenceId,\n        documentIsVisibleToTenants: document.isVisibleToTenants\n      });\n\n      if (userRole === 'admin') {\n        hasAccess = true;\n        accessReason = 'Admin has global access';\n        console.log(`✅ [DOCUMENT DOWNLOAD] Admin granted access`);\n      } else if (userRole === 'manager') {\n        console.log(`📥 [DOCUMENT DOWNLOAD] Checking manager permissions...`);\n        \n        // Manager should have access to buildings they are assigned to\n        if (document.buildingId) {\n          console.log(`📥 [DOCUMENT DOWNLOAD] Document is building-level, checking organization access`);\n          // Get buildings for the manager's organization\n          const orgBuildings = buildings.filter(building => \n            userOrganizations.includes(building.organizationId || '')\n          );\n          const orgBuildingIds = orgBuildings.map(b => b.id);\n          \n          console.log(`📥 [DOCUMENT DOWNLOAD] Manager organization buildings:`, {\n            userOrganizations,\n            orgBuildingIds,\n            documentBuildingId: document.buildingId\n          });\n          \n          if (orgBuildingIds.includes(document.buildingId)) {\n            hasAccess = true;\n            accessReason = 'Manager has access to organization buildings';\n            console.log(`✅ [DOCUMENT DOWNLOAD] Manager granted building access`);\n          } else {\n            console.log(`❌ [DOCUMENT DOWNLOAD] Manager denied building access - not in organization`);\n          }\n        }\n        \n        // Manager has access to all residences in their organization\n        if (document.residenceId) {\n          // Check if residence belongs to manager's organization\n          const allResidences = await storage.getResidences();\n          const residence = allResidences.find(r => r.id === document.residenceId);\n          if (residence) {\n            // Check if residence building belongs to manager's organization\n            const residenceBuilding = buildings.find(b => b.id === residence.buildingId);\n            if (residenceBuilding && userOrganizations.includes(residenceBuilding.organizationId || '')) {\n              hasAccess = true;\n              accessReason = 'Manager has access to organization residences';\n            }\n          }\n        }\n      } else if (userRole === 'resident') {\n        // Resident has access to building files they are assigned to\n        if (document.buildingId && userBuildingIds.includes(document.buildingId)) {\n          hasAccess = true;\n          accessReason = 'Resident has access to assigned building documents';\n        }\n        \n        // Resident has access to residence files they are assigned to\n        if (document.residenceId && userResidenceIds.includes(document.residenceId)) {\n          hasAccess = true;\n          accessReason = 'Resident has access to assigned residence documents';\n        }\n      } else if (userRole === 'tenant') {\n        // Tenants can only access documents marked as visible to tenants\n        if (document.isVisibleToTenants) {\n          // Tenant has access to building files they are assigned to and marked for tenant\n          if (document.buildingId && userBuildingIds.includes(document.buildingId)) {\n            hasAccess = true;\n            accessReason = 'Tenant has access to assigned building documents marked for tenants';\n          }\n          \n          // Tenant has access to residence files they are assigned to and marked for tenant\n          if (document.residenceId && userResidenceIds.includes(document.residenceId)) {\n            hasAccess = true;\n            accessReason = 'Tenant has access to assigned residence documents marked for tenants';\n          }\n        }\n      }\n\n      if (!hasAccess) {\n        console.log(`❌ [DOCUMENT DOWNLOAD] Access denied for user ${userId} to document ${documentId}`);\n        logSecurityEvent('DOCUMENT_FILE_ACCESS_DENIED', user, false, documentId, {\n          userRole,\n          documentBuildingId: document.buildingId,\n          documentResidenceId: document.residenceId,\n          userBuildingIds,\n          userResidenceIds,\n          isVisibleToTenants: document.isVisibleToTenants\n        });\n        return res.status(403).json({ message: 'Access denied' });\n      }\n\n      console.log(`✅ [DOCUMENT DOWNLOAD] Access granted: ${accessReason}`);\n\n      // Log successful access\n      logSecurityEvent('DOCUMENT_FILE_ACCESS_GRANTED', user, true, documentId, {\n        accessReason,\n        userRole,\n        documentType: document.documentType\n      });\n\n      // Serve from local storage\n      if (document.filePath) {\n        console.log(`📥 [DOCUMENT DOWNLOAD] Serving file from local storage: ${document.filePath}`);\n        try {\n          // Always serve from local storage (GCS disabled)\n          let filePathToServe = document.filePath;\n\n          console.log(`📥 [DOCUMENT DOWNLOAD] Resolving file path from: ${document.filePath}`);\n\n          // Check if it's an absolute path\n          if (document.filePath.startsWith('/')) {\n            filePathToServe = document.filePath;\n            console.log(`📥 [DOCUMENT DOWNLOAD] Using absolute path: ${filePathToServe}`);\n          }\n          // Check if it's a relative file path\n          else if (\n            document.filePath.includes('residences/') ||\n            document.filePath.includes('buildings/') ||\n            document.filePath.includes('text-documents/') ||\n            document.filePath.includes('general/')\n          ) {\n            console.log(`📥 [DOCUMENT DOWNLOAD] Relative path detected, checking common locations...`);\n            \n            // For development, try to find the file in common upload directories\n            const possiblePaths = [\n              path.join(process.cwd(), 'uploads', document.filePath), // Main fallback location\n              `/tmp/uploads/${document.filePath}`,\n              `/uploads/${document.filePath}`,\n              `./uploads/${document.filePath}`,\n              path.join('/tmp', document.filePath),\n            ];\n\n            console.log(`📥 [DOCUMENT DOWNLOAD] Checking possible paths:`, possiblePaths);\n\n            // Try to find the file in any of these locations\n            for (const possiblePath of possiblePaths) {\n              console.log(`📥 [DOCUMENT DOWNLOAD] Checking path: ${possiblePath} (exists: ${fs.existsSync(possiblePath)})`);\n              if (fs.existsSync(possiblePath)) {\n                filePathToServe = possiblePath;\n                console.log(`✅ [DOCUMENT DOWNLOAD] Found file at: ${filePathToServe}`);\n                break;\n              }\n            }\n          }\n          // Check if it's a temp file path\n          else if (document.filePath.includes('tmp')) {\n            filePathToServe = document.filePath;\n            console.log(`📥 [DOCUMENT DOWNLOAD] Using temp file path: ${filePathToServe}`);\n          }\n\n          // Try to serve the file\n          if (fs.existsSync(filePathToServe)) {\n            console.log(`📥 [DOCUMENT DOWNLOAD] File found, preparing to serve: ${filePathToServe}`);\n            \n            // Get the original filename with extension, or construct one from the document name\n            let fileName = (document as any).fileName || document.name || path.basename(document.filePath);\n\n            // If the fileName doesn't have an extension, add it from the original file path\n            if (!path.extname(fileName) && document.filePath) {\n              const originalExt = path.extname(document.filePath);\n              if (originalExt) {\n                fileName += originalExt;\n              }\n            }\n\n            console.log(`📥 [DOCUMENT DOWNLOAD] File details:`, {\n              originalFileName: fileName,\n              isDownload,\n              filePathToServe,\n              fileSize: fs.statSync(filePathToServe).size\n            });\n\n            if (isDownload) {\n              res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n            } else {\n              res.setHeader('Content-Disposition', `inline; filename=\"${fileName}\"`);\n            }\n\n            // Set appropriate content type based on file extension\n            const ext = path.extname(fileName).toLowerCase();\n            console.log(`📥 [DOCUMENT DOWNLOAD] Setting content type for extension: ${ext}`);\n            \n            if (ext === '.pdf') {\n              res.setHeader('Content-Type', 'application/pdf');\n            } else if (ext === '.jpg' || ext === '.jpeg') {\n              res.setHeader('Content-Type', 'image/jpeg');\n            } else if (ext === '.png') {\n              res.setHeader('Content-Type', 'image/png');\n            } else if (ext === '.gif') {\n              res.setHeader('Content-Type', 'image/gif');\n            } else if (ext === '.doc' || ext === '.docx') {\n              res.setHeader(\n                'Content-Type',\n                'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n              );\n            } else if (ext === '.txt') {\n              res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n            } else {\n              res.setHeader('Content-Type', 'application/octet-stream');\n            }\n\n            // Production cache busting for documents\n            if (process.env.NODE_ENV === 'production') {\n              const fileStats = fs.statSync(filePathToServe);\n              res.set({\n                'Cache-Control': 'no-cache, no-store, must-revalidate',\n                'Pragma': 'no-cache',\n                'Expires': '0',\n                'ETag': `\"${document.id}-${fileStats.mtime.getTime()}\"`,\n                'Last-Modified': fileStats.mtime.toUTCString(),\n              });\n            }\n\n            console.log(`✅ [DOCUMENT DOWNLOAD] Serving file: ${filePathToServe} as ${fileName}`);\n            return res.sendFile(path.resolve(filePathToServe));\n          }\n\n          // If file not found locally, log for debugging\n          console.log(`❌ [DOCUMENT DOWNLOAD] File not found at filePath: ${document.filePath}`);\n          console.log(`❌ [DOCUMENT DOWNLOAD] Tried filePath: ${filePathToServe}`);\n          return res.status(404).json({ message: 'File not found on server' });\n        } catch (fileError: any) {\n          console.error('❌ [DOCUMENT DOWNLOAD] Error serving file:', fileError);\n          return res.status(500).json({ message: 'Failed to serve file' });\n        }\n      }\n\n      console.log(`❌ [DOCUMENT DOWNLOAD] No file associated with document ${documentId}`);\n      return res.status(404).json({ message: 'No file associated with this document' });\n    } catch (error: any) {\n      console.error('❌ [DOCUMENT DOWNLOAD] Error serving document file:', error);\n      res.status(500).json({ message: 'Failed to serve document file' });\n    }\n  });\n\n}\n"],"version":3}