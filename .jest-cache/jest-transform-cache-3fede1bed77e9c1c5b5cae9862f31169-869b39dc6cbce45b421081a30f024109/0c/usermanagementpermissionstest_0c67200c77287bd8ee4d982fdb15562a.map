{"file":"/home/runner/workspace/tests/integration/user-management-permissions.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/user-management-permissions.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\n// Create test app similar to existing tests\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Add test authentication middleware that bypasses real auth\n  app.use(async (req: any, res, next) => {\n    const testUserId = req.headers['x-test-user-id'];\n    if (testUserId) {\n      const [user] = await db.select().from(schema.users).where(eq(schema.users.id, testUserId)).limit(1);\n      if (user) {\n        req.session = { \n          userId: testUserId,\n          isAuthenticated: true,\n          role: user.role\n        };\n        req.user = user;\n      }\n    }\n    next();\n  });\n  \n  registerRoutes(app);\n  return app;\n};\n\ndescribe('User Management Permissions', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let demoManager: any;\n  let regularManager: any;\n  let testOrg: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean test data\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.users);\n    await db.delete(schema.organizations);\n\n    // Create test organization\n    const [org] = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Test Organization',\n        type: 'Standard',\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        phone: '514-555-0123',\n        email: 'test@org.com',\n      })\n      .returning();\n    testOrg = org;\n\n    // Create test users\n    const users = await db\n      .insert(schema.users)\n      .values([\n        {\n          email: 'admin@test.com',\n          username: 'admin',\n          password: 'hashedpass',\n          firstName: 'Admin',\n          lastName: 'User',\n          role: 'admin',\n          isActive: true,\n          phone: '514-555-0001',\n        },\n        {\n          email: 'demo.manager@test.com',\n          username: 'demo_manager',\n          password: 'hashedpass',\n          firstName: 'Demo',\n          lastName: 'Manager',\n          role: 'demo_manager',\n          isActive: true,\n          phone: '514-555-0002',\n        },\n        {\n          email: 'regular.manager@test.com',\n          username: 'regular_manager',\n          password: 'hashedpass',\n          firstName: 'Regular',\n          lastName: 'Manager',\n          role: 'manager',\n          isActive: true,\n          phone: '514-555-0003',\n        },\n        {\n          email: 'demo.tenant@test.com',\n          username: 'demo_tenant',\n          password: 'hashedpass',\n          firstName: 'Demo',\n          lastName: 'Tenant',\n          role: 'demo_tenant',\n          isActive: true,\n          phone: '514-555-0004',\n        },\n        {\n          email: 'regular.tenant@test.com',\n          username: 'regular_tenant',\n          password: 'hashedpass',\n          firstName: 'Regular',\n          lastName: 'Tenant',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0005',\n        }\n      ])\n      .returning();\n\n    adminUser = users.find(u => u.email === 'admin@test.com');\n    demoManager = users.find(u => u.email === 'demo.manager@test.com');\n    regularManager = users.find(u => u.email === 'regular.manager@test.com');\n    const regularTenant = users.find(u => u.email === 'regular.tenant@test.com');\n\n    // Assign regular manager and tenant to organization\n    await db\n      .insert(schema.userOrganizations)\n      .values([\n        {\n          userId: regularManager.id,\n          organizationId: testOrg.id,\n          organizationRole: 'manager',\n          isActive: true,\n        },\n        {\n          userId: regularTenant.id,\n          organizationId: testOrg.id,\n          organizationRole: 'tenant',\n          isActive: true,\n        }\n      ]);\n  });\n\n  afterEach(async () => {\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.users);\n    await db.delete(schema.organizations);\n  });\n\n  describe('Demo User Visibility', () => {\n    it('should show only demo users to demo manager', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('x-test-user-id', demoManager.id)\n        .expect(200);\n\n      const users = response.body;\n      const visibleRoles = users.map((user: any) => user.role);\n      \n      // Demo manager should only see demo users\n      expect(visibleRoles).toContain('demo_manager');\n      expect(visibleRoles).toContain('demo_tenant');\n      \n      // Should NOT see regular roles\n      expect(visibleRoles).not.toContain('admin');\n      expect(visibleRoles).not.toContain('manager');\n      expect(visibleRoles).not.toContain('tenant');\n    });\n\n    it('should allow regular manager to see non-demo users in their organization', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('x-test-user-id', regularManager.id)\n        .expect(200);\n\n      const users = response.body;\n      const visibleEmails = users.map((user: any) => user.email);\n      \n      // Should see users in their organization\n      expect(visibleEmails).toContain('regular.tenant@test.com');\n      expect(visibleEmails).toContain('regular.manager@test.com');\n      \n      // Should NOT see demo users\n      expect(visibleEmails).not.toContain('demo.tenant@test.com');\n      expect(visibleEmails).not.toContain('demo.manager@test.com');\n    });\n\n    it('should allow admin to see all users', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      const users = response.body;\n      const visibleEmails = users.map((user: any) => user.email);\n      \n      // Admin should see all users\n      expect(visibleEmails).toContain('admin@test.com');\n      expect(visibleEmails).toContain('regular.manager@test.com');\n      expect(visibleEmails).toContain('demo.manager@test.com');\n      expect(visibleEmails).toContain('demo.tenant@test.com');\n      expect(visibleEmails).toContain('regular.tenant@test.com');\n    });\n  });\n\n  describe('Organization Assignment Restrictions', () => {\n    it('should prevent regular manager from modifying organization assignments', async () => {\n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'testuser@test.com',\n          username: 'testuser',\n          password: 'hashedpass',\n          firstName: 'Test',\n          lastName: 'User',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0006',\n        })\n        .returning();\n\n      // Manager tries to assign organization (should fail)\n      const response = await request(app)\n        .put(`/api/users/${user.id}/organizations`)\n        .set('x-test-user-id', regularManager.id)\n        .send({ organizationIds: [testOrg.id] })\n        .expect(403);\n\n      expect(response.body.message).toContain('Only administrators can modify organization assignments');\n    });\n\n    it('should allow admin to modify organization assignments', async () => {\n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'testuser2@test.com',\n          username: 'testuser2',\n          password: 'hashedpass',\n          firstName: 'Test2',\n          lastName: 'User2',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0007',\n        })\n        .returning();\n\n      // Admin assigns organization (should succeed)\n      const response = await request(app)\n        .put(`/api/users/${user.id}/organizations`)\n        .set('x-test-user-id', adminUser.id)\n        .send({ organizationIds: [testOrg.id] })\n        .expect(200);\n\n      expect(response.body.message).toBe('Organization assignments updated successfully');\n\n      // Verify assignment was created\n      const assignments = await db\n        .select()\n        .from(schema.userOrganizations)\n        .where(eq(schema.userOrganizations.userId, user.id));\n\n      expect(assignments).toHaveLength(1);\n      expect(assignments[0].organizationId).toBe(testOrg.id);\n    });\n  });\n\n  describe('Residence Assignment Permissions', () => {\n    it('should prevent managers from assigning residences outside their organization', async () => {\n      // This test validates that the existing permission checks work\n      // The implementation is already in place in the residence assignment endpoint\n      \n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          email: 'testresuser@test.com',\n          username: 'testresuser',\n          password: 'hashedpass',\n          firstName: 'TestRes',\n          lastName: 'User',\n          role: 'tenant',\n          isActive: true,\n          phone: '514-555-0008',\n        })\n        .returning();\n\n      // Try to assign non-existent residence (should fail gracefully)\n      const response = await request(app)\n        .put(`/api/users/${user.id}/residences`)\n        .set('x-test-user-id', regularManager.id)\n        .send({ \n          residenceAssignments: [\n            {\n              residenceId: 'non-existent-residence-id',\n              relationshipType: 'tenant',\n              startDate: new Date().toISOString().split('T')[0],\n            }\n          ]\n        });\n\n      // Should fail with 404 for non-existent residence\n      expect(response.status).toBeGreaterThanOrEqual(400);\n    });\n  });\n});"],"version":3}