da0804594e7014ff0c94db647f16c9c2
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
// Create test app similar to existing tests
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Add test authentication middleware that bypasses real auth
    app.use(async (req, res, next) => {
        const testUserId = req.headers['x-test-user-id'];
        if (testUserId) {
            const [user] = await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, testUserId)).limit(1);
            if (user) {
                req.session = {
                    userId: testUserId,
                    isAuthenticated: true,
                    role: user.role
                };
                req.user = user;
            }
        }
        next();
    });
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('User Management Permissions', () => {
    let app;
    let adminUser;
    let demoManager;
    let regularManager;
    let testOrg;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clean test data
        await db_1.db.delete(schema.userOrganizations);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.organizations);
        // Create test organization
        const [org] = await db_1.db
            .insert(schema.organizations)
            .values({
            name: 'Test Organization',
            type: 'Standard',
            address: '123 Test St',
            city: 'Test City',
            province: 'QC',
            postalCode: 'H1H 1H1',
            phone: '514-555-0123',
            email: 'test@org.com',
        })
            .returning();
        testOrg = org;
        // Create test users
        const users = await db_1.db
            .insert(schema.users)
            .values([
            {
                email: 'admin@test.com',
                username: 'admin',
                password: 'hashedpass',
                firstName: 'Admin',
                lastName: 'User',
                role: 'admin',
                isActive: true,
                phone: '514-555-0001',
            },
            {
                email: 'demo.manager@test.com',
                username: 'demo_manager',
                password: 'hashedpass',
                firstName: 'Demo',
                lastName: 'Manager',
                role: 'demo_manager',
                isActive: true,
                phone: '514-555-0002',
            },
            {
                email: 'regular.manager@test.com',
                username: 'regular_manager',
                password: 'hashedpass',
                firstName: 'Regular',
                lastName: 'Manager',
                role: 'manager',
                isActive: true,
                phone: '514-555-0003',
            },
            {
                email: 'demo.tenant@test.com',
                username: 'demo_tenant',
                password: 'hashedpass',
                firstName: 'Demo',
                lastName: 'Tenant',
                role: 'demo_tenant',
                isActive: true,
                phone: '514-555-0004',
            },
            {
                email: 'regular.tenant@test.com',
                username: 'regular_tenant',
                password: 'hashedpass',
                firstName: 'Regular',
                lastName: 'Tenant',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0005',
            }
        ])
            .returning();
        adminUser = users.find(u => u.email === 'admin@test.com');
        demoManager = users.find(u => u.email === 'demo.manager@test.com');
        regularManager = users.find(u => u.email === 'regular.manager@test.com');
        const regularTenant = users.find(u => u.email === 'regular.tenant@test.com');
        // Assign regular manager and tenant to organization
        await db_1.db
            .insert(schema.userOrganizations)
            .values([
            {
                userId: regularManager.id,
                organizationId: testOrg.id,
                organizationRole: 'manager',
                isActive: true,
            },
            {
                userId: regularTenant.id,
                organizationId: testOrg.id,
                organizationRole: 'tenant',
                isActive: true,
            }
        ]);
    });
    (0, globals_1.afterEach)(async () => {
        await db_1.db.delete(schema.userOrganizations);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.organizations);
    });
    (0, globals_1.describe)('Demo User Visibility', () => {
        (0, globals_1.it)('should show only demo users to demo manager', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('x-test-user-id', demoManager.id)
                .expect(200);
            const users = response.body;
            const visibleRoles = users.map((user) => user.role);
            // Demo manager should only see demo users
            (0, globals_1.expect)(visibleRoles).toContain('demo_manager');
            (0, globals_1.expect)(visibleRoles).toContain('demo_tenant');
            // Should NOT see regular roles
            (0, globals_1.expect)(visibleRoles).not.toContain('admin');
            (0, globals_1.expect)(visibleRoles).not.toContain('manager');
            (0, globals_1.expect)(visibleRoles).not.toContain('tenant');
        });
        (0, globals_1.it)('should allow regular manager to see non-demo users in their organization', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('x-test-user-id', regularManager.id)
                .expect(200);
            const users = response.body;
            const visibleEmails = users.map((user) => user.email);
            // Should see users in their organization
            (0, globals_1.expect)(visibleEmails).toContain('regular.tenant@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('regular.manager@test.com');
            // Should NOT see demo users
            (0, globals_1.expect)(visibleEmails).not.toContain('demo.tenant@test.com');
            (0, globals_1.expect)(visibleEmails).not.toContain('demo.manager@test.com');
        });
        (0, globals_1.it)('should allow admin to see all users', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            const users = response.body;
            const visibleEmails = users.map((user) => user.email);
            // Admin should see all users
            (0, globals_1.expect)(visibleEmails).toContain('admin@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('regular.manager@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('demo.manager@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('demo.tenant@test.com');
            (0, globals_1.expect)(visibleEmails).toContain('regular.tenant@test.com');
        });
    });
    (0, globals_1.describe)('Organization Assignment Restrictions', () => {
        (0, globals_1.it)('should prevent regular manager from modifying organization assignments', async () => {
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'testuser@test.com',
                username: 'testuser',
                password: 'hashedpass',
                firstName: 'Test',
                lastName: 'User',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0006',
            })
                .returning();
            // Manager tries to assign organization (should fail)
            const response = await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/organizations`)
                .set('x-test-user-id', regularManager.id)
                .send({ organizationIds: [testOrg.id] })
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Only administrators can modify organization assignments');
        });
        (0, globals_1.it)('should allow admin to modify organization assignments', async () => {
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'testuser2@test.com',
                username: 'testuser2',
                password: 'hashedpass',
                firstName: 'Test2',
                lastName: 'User2',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0007',
            })
                .returning();
            // Admin assigns organization (should succeed)
            const response = await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/organizations`)
                .set('x-test-user-id', adminUser.id)
                .send({ organizationIds: [testOrg.id] })
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Organization assignments updated successfully');
            // Verify assignment was created
            const assignments = await db_1.db
                .select()
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, user.id));
            (0, globals_1.expect)(assignments).toHaveLength(1);
            (0, globals_1.expect)(assignments[0].organizationId).toBe(testOrg.id);
        });
    });
    (0, globals_1.describe)('Residence Assignment Permissions', () => {
        (0, globals_1.it)('should prevent managers from assigning residences outside their organization', async () => {
            // This test validates that the existing permission checks work
            // The implementation is already in place in the residence assignment endpoint
            const [user] = await db_1.db
                .insert(schema.users)
                .values({
                email: 'testresuser@test.com',
                username: 'testresuser',
                password: 'hashedpass',
                firstName: 'TestRes',
                lastName: 'User',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0008',
            })
                .returning();
            // Try to assign non-existent residence (should fail gracefully)
            const response = await (0, supertest_1.default)(app)
                .put(`/api/users/${user.id}/residences`)
                .set('x-test-user-id', regularManager.id)
                .send({
                residenceAssignments: [
                    {
                        residenceId: 'non-existent-residence-id',
                        relationshipType: 'tenant',
                        startDate: new Date().toISOString().split('T')[0],
                    }
                ]
            });
            // Should fail with 404 for non-existent residence
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,