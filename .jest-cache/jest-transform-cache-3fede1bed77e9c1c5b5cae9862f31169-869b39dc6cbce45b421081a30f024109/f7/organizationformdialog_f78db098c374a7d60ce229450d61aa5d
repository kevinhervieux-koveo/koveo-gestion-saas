cc88afc999ecf37a94c917e4128a923c
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationFormDialog = OrganizationFormDialog;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const dialog_1 = require("@/components/ui/dialog");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
// Organization form schema matching the database schema
const organizationSchema = zod_2.z.object({
    name: zod_2.z.string().min(1, 'Organization name is required (example: Maple Property Management)').max(200, 'Organization name must be less than 200 characters'),
    type: zod_2.z.string().min(1, 'Please select an organization type from the dropdown'),
    address: zod_2.z.string().min(1, 'Street address is required (example: 123 Rue Saint-Denis)').max(300, 'Address must be less than 300 characters'),
    city: zod_2.z.string().min(1, 'City name is required (example: Montréal)').max(100, 'City name must be less than 100 characters').regex(/^[a-zA-ZÀ-ÿ\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens'),
    province: zod_2.z.string().min(1, 'Province is required'),
    postalCode: zod_2.z.string().min(1, 'Postal code is required').regex(/^[A-Z]\d[A-Z]\s?\d[A-Z]\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)'),
    phone: zod_2.z.string().optional().refine((val) => {
        if (!val)
            return true;
        return /^(\+1\s?)?(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/.test(val);
    }, 'Phone number must be a valid North American format (example: (514) 123-4567)'),
    email: zod_2.z.string().email('Please enter a valid email address (example: contact@organization.com)').optional().or(zod_2.z.literal('')),
    website: zod_2.z.string().url('Website must be a valid URL (example: https://www.organization.com)').optional().or(zod_2.z.literal('')),
    registrationNumber: zod_2.z.string().max(50, 'Registration number must be less than 50 characters').optional(),
});
/**
 * Dialog component for creating and editing organizations with form validation.
 *
 * @param props - Component properties.
 * @param props.open - Whether the dialog is open.
 * @param props.onOpenChange - Callback to handle dialog open state changes.
 * @param props.organization - Organization data for editing, null for creating new.
 * @param props.onSuccess - Callback called after successful form submission.
 * @returns JSX element for the organization form dialog.
 */
function OrganizationFormDialog({ open, onOpenChange, organization, onSuccess, }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const isEditing = !!organization;
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(organizationSchema),
        defaultValues: {
            name: '',
            type: 'management_company',
            address: '',
            city: '',
            province: 'QC',
            postalCode: '',
            phone: '',
            email: '',
            website: '',
            registrationNumber: '',
        },
    });
    // Reset form when organization data changes
    (0, react_1.useEffect)(() => {
        if (organization) {
            form.reset({
                name: organization.name || '',
                type: organization.type || 'management_company',
                address: organization.address || '',
                city: organization.city || '',
                province: organization.province || 'QC',
                postalCode: organization.postalCode || '',
                phone: organization.phone || '',
                email: organization.email || '',
                website: organization.website || '',
                registrationNumber: organization.registrationNumber || '',
            });
        }
        else {
            form.reset({
                name: '',
                type: 'management_company',
                address: '',
                city: '',
                province: 'QC',
                postalCode: '',
                phone: '',
                email: '',
                website: '',
                registrationNumber: '',
            });
        }
    }, [organization, form]);
    const mutation = (0, react_query_1.useMutation)({
        mutationFn: async (_data) => {
            const url = isEditing ? `/api/organizations/${organization.id}` : '/api/organizations';
            const method = isEditing ? 'PUT' : 'POST';
            return (0, queryClient_1.apiRequest)(method, url, _data);
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/organizations'] });
            toast({
                title: isEditing ? 'Organization Updated' : 'Organization Created',
                description: isEditing
                    ? 'Organization updated successfully'
                    : 'Organization created successfully',
            });
            onOpenChange(false);
            form.reset();
            onSuccess?.();
        },
        onError: (_error) => {
            toast({
                title: 'Error',
                description: _error.message || 'Something went wrong',
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (_data) => {
        mutation.mutate(_data);
    };
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: open, onOpenChange: onOpenChange, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: isEditing ? 'Edit Organization' : 'Create Organization' }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: isEditing
                                ? 'Update the organization information below.'
                                : 'Fill in the details to create a new organization.' })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'name', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Organization Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Enter organization name', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'type', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Organization Type *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select type' }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'management_company', children: "Management Company" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'syndicate', children: "Syndicate" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cooperative', children: "Cooperative" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'condo_association', children: "Condo Association" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'demo', children: "Demo" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'address', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Address *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Enter address', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-3 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'city', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "City *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Enter city', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'province', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Province *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'QC', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'postalCode', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Postal Code *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'H1H 1H1', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'phone', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Phone" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: '+1 (514) 555-0123', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'email', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Email" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Contact email', type: 'email', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'website', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Website" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Website URL', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'registrationNumber', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Registration Number" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Enter registration number', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => onOpenChange(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: mutation.isPending, children: mutation.isPending
                                            ? 'Saving...'
                                            : isEditing
                                                ? 'Update Organization'
                                                : 'Create Organization' })] })] }) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,