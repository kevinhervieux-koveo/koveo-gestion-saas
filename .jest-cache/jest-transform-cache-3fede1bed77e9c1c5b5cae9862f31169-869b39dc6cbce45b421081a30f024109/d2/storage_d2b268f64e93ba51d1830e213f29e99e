f299aff77143f78b32b89295479612dd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptimizedDatabaseStorage = exports.storage = exports.MemStorage = void 0;
const crypto_1 = require("crypto");
class MemStorage {
    users;
    organizations;
    buildings;
    residences;
    pillars;
    workspaceStatuses;
    qualityMetrics;
    frameworkConfigs;
    improvementSuggestions;
    features;
    actionableItems;
    invitations;
    invitationAuditLogs;
    bugs;
    featureRequests;
    featureRequestUpvotes;
    constructor() {
        this.users = new Map();
        this.organizations = new Map();
        this.buildings = new Map();
        this.residences = new Map();
        this.pillars = new Map();
        this.workspaceStatuses = new Map();
        this.qualityMetrics = new Map();
        this.frameworkConfigs = new Map();
        this.improvementSuggestions = new Map();
        this.features = new Map();
        this.actionableItems = new Map();
        this.invitations = new Map();
        this.invitationAuditLogs = new Map();
        this.bugs = new Map();
        this.featureRequests = new Map();
        this.featureRequestUpvotes = new Map();
        // Initialize test user asynchronously
        this.initializeTestUser().catch(console.error);
    }
    async initializeTestUser() {
        // Use known admin123 password for demo mode
        const bcrypt = require('bcryptjs');
        const securePassword = await bcrypt.hash('admin123', 12);
        const user = {
            id: '550e8400-e29b-41d4-a716-446655440000',
            username: 'kevin.hervieux@koveo-gestion.com',
            email: 'kevin.hervieux@koveo-gestion.com',
            password: securePassword,
            firstName: 'Kevin',
            lastName: 'Hervieux',
            phone: '',
            profileImage: '',
            language: 'fr',
            role: 'admin',
            isActive: true,
            lastLoginAt: null,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        this.users.set(user.id, user);
    }
    // User operations
    async getUsers() {
        return Array.from(this.users.values());
    }
    async getUsersWithAssignments() {
        // For MemStorage, just return users with empty assignments arrays
        const users = Array.from(this.users.values());
        return users.map(user => ({
            ...user,
            organizations: [],
            buildings: [],
            residences: []
        }));
    }
    async getUsersByOrganizations(_userId) {
        return [];
    }
    async getUser(id) {
        return this.users.get(id);
    }
    async getUserOrganizations(_userId) {
        return [];
    }
    async getUserResidences(_userId) {
        return [];
    }
    async getUserByEmail(email) {
        return Array.from(this.users.values()).find((user) => user.email === email);
    }
    async createUser(insertUser) {
        const id = (0, crypto_1.randomUUID)();
        const user = {
            ...insertUser,
            id,
            phone: insertUser.phone || null,
            profileImage: insertUser.profileImage || '',
            role: insertUser.role || 'tenant',
            language: insertUser.language || 'fr',
            isActive: true,
            lastLoginAt: null,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        this.users.set(id, user);
        return user;
    }
    async updateUser(id, updates) {
        const existingUser = this.users.get(id);
        if (!existingUser) {
            return undefined;
        }
        const updatedUser = {
            ...existingUser,
            ...updates,
            updatedAt: new Date(),
        };
        this.users.set(id, updatedUser);
        return updatedUser;
    }
    // Minimal implementations for other required methods
    async createPasswordResetToken(_token) {
        return {
            ..._token,
            id: (0, crypto_1.randomUUID)(),
            createdAt: new Date(),
            usedAt: null,
            isUsed: false,
            ipAddress: _token.ipAddress || '',
            userAgent: _token.userAgent || '',
        };
    }
    async getPasswordResetToken(_token) {
        return undefined;
    }
    async markPasswordResetTokenAsUsed(_tokenId) {
        return undefined;
    }
    async cleanupExpiredPasswordResetTokens() {
        return 0;
    }
    async getOrganizations() {
        return Array.from(this.organizations.values());
    }
    async getOrganization(id) {
        return this.organizations.get(id);
    }
    async getOrganizationByName(name) {
        return Array.from(this.organizations.values()).find((org) => org.name === name);
    }
    async createOrganization(org) {
        const id = (0, crypto_1.randomUUID)();
        const organization = {
            ...org,
            id,
            phone: org.phone || '',
            email: org.email || '',
            website: org.website || '',
            registrationNumber: org.registrationNumber || '',
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        this.organizations.set(id, organization);
        return organization;
    }
    async updateOrganization(id, updates) {
        const existing = this.organizations.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.organizations.set(id, updated);
        return updated;
    }
    async getBuildingsByOrganization(orgId) {
        return Array.from(this.buildings.values()).filter((b) => b.organizationId === orgId);
    }
    async getBuildings() {
        return Array.from(this.buildings.values());
    }
    async getBuilding(id) {
        return this.buildings.get(id);
    }
    async createBuilding(building) {
        const id = (0, crypto_1.randomUUID)();
        const newBuilding = {
            ...building,
            id,
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date(),
            totalUnits: building.totalUnits || 0,
            totalFloors: building.totalFloors || 0,
            yearBuilt: building.yearBuilt || 0,
            buildingType: building.buildingType,
            bankAccountNumber: building.bankAccountNumber || '',
            bankAccountMinimums: building.bankAccountMinimums ? JSON.stringify(building.bankAccountMinimums) : '',
            bankAccountUpdatedAt: new Date(),
            inflationSettings: '',
            parkingSpaces: building.parkingSpaces || 0,
            storageSpaces: building.storageSpaces || 0,
            amenities: building.amenities || null,
            managementCompany: building.managementCompany || null,
            bankAccountNotes: null,
            bankAccountStartDate: null,
            bankAccountStartAmount: null,
        };
        this.buildings.set(id, newBuilding);
        return newBuilding;
    }
    async updateBuilding(id, updates) {
        const existing = this.buildings.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.buildings.set(id, updated);
        return updated;
    }
    async deleteBuilding(id) {
        const building = this.buildings.get(id);
        if (!building) {
            return false;
        }
        // Soft delete by setting isActive to false
        const updatedBuilding = {
            ...building,
            isActive: false,
            updatedAt: new Date(),
        };
        this.buildings.set(id, updatedBuilding);
        return true;
    }
    async getResidences() {
        return Array.from(this.residences.values());
    }
    async getResidence(id) {
        return this.residences.get(id);
    }
    async getResidencesByBuilding(buildingId) {
        return Array.from(this.residences.values()).filter((r) => r.buildingId === buildingId);
    }
    async createResidence(residence) {
        const id = (0, crypto_1.randomUUID)();
        const newResidence = {
            ...residence,
            id,
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date(),
            floor: residence.floor || 0,
            squareFootage: residence.squareFootage?.toString() || '0',
            bedrooms: residence.bedrooms || 0,
            bathrooms: residence.bathrooms?.toString() || '0',
            balcony: residence.balcony || false,
            parkingSpaceNumbers: residence.parkingSpaceNumbers || [],
            storageSpaceNumbers: residence.storageSpaceNumbers || [],
            ownershipPercentage: residence.ownershipPercentage?.toString() || '0',
            monthlyFees: residence.monthlyFees?.toString() || '0',
        };
        this.residences.set(id, newResidence);
        return newResidence;
    }
    async updateResidence(id, updates) {
        const existing = this.residences.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.residences.set(id, updated);
        return updated;
    }
    async deleteResidence(id) {
        return this.residences.delete(id);
    }
    async getContacts() {
        return [];
    }
    async getContactsByEntity() {
        return [];
    }
    async getContactsForResidence() {
        return [];
    }
    async createContact(contact) {
        const id = (0, crypto_1.randomUUID)();
        return {
            ...contact,
            id,
            name: contact.name,
            email: contact.email || '',
            phone: contact.phone || '',
            entity: contact.entity,
            entityId: contact.entityId,
            contactCategory: contact.contactCategory,
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
    }
    async updateContact() {
        return undefined;
    }
    async deleteContact() {
        return false;
    }
    async getDocuments(_filters) {
        return [];
    }
    async getDocument(_id) {
        return undefined;
    }
    async createDocument(doc) {
        const id = (0, crypto_1.randomUUID)();
        return {
            ...doc,
            id,
            description: doc.description || '',
            buildingId: doc.buildingId || '',
            residenceId: doc.residenceId || '',
            fileName: doc.fileName || '',
            fileSize: doc.fileSize || '',
            mimeType: doc.mimeType || '',
            attachedToType: doc.attachedToType || '',
            attachedToId: doc.attachedToId || '',
            createdAt: new Date(),
            updatedAt: new Date(),
        };
    }
    async updateDocument(_id, _updates) {
        return undefined;
    }
    async deleteDocument(_id) {
        return false;
    }
    async getPermissions() {
        return [];
    }
    async getRolePermissions() {
        return [];
    }
    async getUserPermissions() {
        return [];
    }
    async getPillars() {
        return Array.from(this.pillars.values()).sort((a, b) => parseInt(a.order) - parseInt(b.order));
    }
    async getPillar(id) {
        return this.pillars.get(id);
    }
    async createPillar(pillar) {
        const id = (0, crypto_1.randomUUID)();
        const newPillar = {
            ...pillar,
            id,
            name: pillar.name,
            description: pillar.description || '',
            status: pillar.status || 'pending',
            order: pillar.order.toString(),
            configuration: pillar.configuration || null,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        this.pillars.set(id, newPillar);
        return newPillar;
    }
    async updatePillar(id, updates) {
        const existing = this.pillars.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.pillars.set(id, updated);
        return updated;
    }
    async getWorkspaceStatuses() {
        return Array.from(this.workspaceStatuses.values());
    }
    async getWorkspaceStatus(component) {
        return this.workspaceStatuses.get(component);
    }
    async createWorkspaceStatus(status) {
        const id = (0, crypto_1.randomUUID)();
        const newStatus = {
            ...status,
            id,
            status: status.status,
            component: status.component,
            lastUpdated: new Date(),
        };
        this.workspaceStatuses.set(status.component, newStatus);
        return newStatus;
    }
    async updateWorkspaceStatus(component, updates) {
        const existing = this.workspaceStatuses.get(component);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.workspaceStatuses.set(component, updated);
        return updated;
    }
    async getQualityMetrics() {
        return Array.from(this.qualityMetrics.values());
    }
    async createQualityMetric(metric) {
        const id = (0, crypto_1.randomUUID)();
        const newMetric = {
            ...metric,
            id,
            timestamp: new Date(),
        };
        this.qualityMetrics.set(id, newMetric);
        return newMetric;
    }
    async getFrameworkConfigurations() {
        return Array.from(this.frameworkConfigs.values());
    }
    async createFrameworkConfiguration(config) {
        const id = (0, crypto_1.randomUUID)();
        const newConfig = {
            ...config,
            id,
            description: config.description || '',
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        this.frameworkConfigs.set(config._key, newConfig);
        return newConfig;
    }
    async updateFrameworkConfiguration(key, updates) {
        const existing = this.frameworkConfigs.get(key);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.frameworkConfigs.set(key, updated);
        return updated;
    }
    async getImprovementSuggestions() {
        return Array.from(this.improvementSuggestions.values());
    }
    async createImprovementSuggestion(suggestion) {
        const id = (0, crypto_1.randomUUID)();
        const newSuggestion = {
            ...suggestion,
            id,
            filePath: suggestion.filePath || null,
            status: suggestion.status,
            category: suggestion.category,
            priority: suggestion.priority || 'Medium',
            assignedTo: suggestion.assignedTo || null,
            technicalDetails: suggestion.technicalDetails || null,
            businessImpact: suggestion.businessImpact || null,
            implementationEffort: suggestion.implementationEffort || null,
            quebecComplianceRelevance: suggestion.quebecComplianceRelevance || null,
            suggestedBy: suggestion.suggestedBy || null,
            createdAt: new Date(),
            updatedAt: new Date(),
            acknowledgedAt: null,
            completedAt: null,
        };
        this.improvementSuggestions.set(id, newSuggestion);
        return newSuggestion;
    }
    async updateImprovementSuggestion(id, updates) {
        const existing = this.improvementSuggestions.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.improvementSuggestions.set(id, updated);
        return updated;
    }
    async getTopImprovementSuggestions(limit) {
        const suggestions = Array.from(this.improvementSuggestions.values());
        // Sort by priority (Critical > High > Medium > Low) then by creation date
        const priorityOrder = { 'Critical': 0, 'High': 1, 'Medium': 2, 'Low': 3 };
        return suggestions
            .sort((a, b) => {
            const priorityA = priorityOrder[a.priority] ?? 999;
            const priorityB = priorityOrder[b.priority] ?? 999;
            const priorityDiff = priorityA - priorityB;
            if (priorityDiff !== 0)
                return priorityDiff;
            return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
        })
            .slice(0, limit);
    }
    async clearNewSuggestions() {
        for (const [id, suggestion] of this.improvementSuggestions.entries()) {
            if (suggestion.status === 'New') {
                this.improvementSuggestions.delete(id);
            }
        }
    }
    async updateSuggestionStatus(id, status) {
        const suggestion = this.improvementSuggestions.get(id);
        if (!suggestion)
            return undefined;
        const updatedSuggestion = {
            ...suggestion,
            status,
            updatedAt: new Date(),
        };
        this.improvementSuggestions.set(id, updatedSuggestion);
        return updatedSuggestion;
    }
    async getFeatures() {
        return Array.from(this.features.values());
    }
    async getFeature(id) {
        return this.features.get(id);
    }
    async createFeature(feature) {
        const id = (0, crypto_1.randomUUID)();
        const newFeature = {
            ...feature,
            id,
            isPublicRoadmap: true,
            createdAt: new Date(),
            updatedAt: new Date(),
            requestedBy: feature.requestedBy || null,
            assignedTo: feature.assignedTo || null,
            estimatedHours: feature.estimatedHours || null,
            businessObjective: feature.businessObjective || null,
            targetUsers: feature.targetUsers || null,
            successMetrics: feature.successMetrics || null,
            technicalComplexity: feature.technicalComplexity || null,
            dependencies: feature.dependencies?.join(',') || null,
            userFlow: feature.userFlow || null,
            actualHours: null,
            startDate: null,
            completedDate: null,
            tags: null,
            metadata: null,
            aiAnalysisResult: null,
            aiAnalyzedAt: null,
            isStrategicPath: false,
            syncedAt: null,
        };
        this.features.set(id, newFeature);
        return newFeature;
    }
    async updateFeature(id, updates) {
        const existing = this.features.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.features.set(id, updated);
        return updated;
    }
    async getFeaturesByStatus(status) {
        return Array.from(this.features.values()).filter((f) => f.status === status);
    }
    async getPublicRoadmapFeatures() {
        return Array.from(this.features.values()).filter((f) => f.isPublicRoadmap);
    }
    async getActionableItems() {
        return Array.from(this.actionableItems.values());
    }
    async createActionableItem(item) {
        const id = (0, crypto_1.randomUUID)();
        const newItem = {
            ...item,
            id,
            featureId: item.featureId || (0, crypto_1.randomUUID)(),
            createdAt: new Date(),
            updatedAt: new Date(),
            estimatedHours: item.estimatedHours || null,
            actualHours: null,
            dependencies: item.dependencies || null,
            technicalDetails: null,
            implementationPrompt: null,
            testingRequirements: null,
            estimatedEffort: null,
            orderIndex: 0,
            startedAt: null,
            completedAt: null,
        };
        this.actionableItems.set(id, newItem);
        return newItem;
    }
    async updateActionableItem(id, updates) {
        const existing = this.actionableItems.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.actionableItems.set(id, updated);
        return updated;
    }
    async deleteActionableItem(id) {
        return this.actionableItems.delete(id);
    }
    async getInvitations() {
        return Array.from(this.invitations.values());
    }
    async createInvitation(invitation) {
        const id = (0, crypto_1.randomUUID)();
        const newInvitation = {
            ...invitation,
            id,
            token: (0, crypto_1.randomUUID)(),
            createdAt: new Date(),
            updatedAt: new Date(),
            status: 'pending',
            ipAddress: '',
            userAgent: '',
            tokenHash: null,
            usedAt: null,
            createdByUserId: invitation.invitedByUserId,
            acceptedByUserId: null,
            acceptedAt: null,
            revokedAt: null,
            revokedByUserId: null,
            lastAccessedAt: null,
        };
        this.invitations.set(id, newInvitation);
        return newInvitation;
    }
    async getInvitationByToken(token) {
        return Array.from(this.invitations.values()).find((inv) => inv.token === token);
    }
    async updateInvitation(id, updates) {
        const existing = this.invitations.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.invitations.set(id, updated);
        return updated;
    }
    async getInvitationAuditLogs() {
        return Array.from(this.invitationAuditLogs.values());
    }
    async createInvitationAuditLog(log) {
        const id = (0, crypto_1.randomUUID)();
        const newLog = {
            ...log,
            id,
            createdAt: new Date(),
            ipAddress: log.ipAddress || '',
            userAgent: log.userAgent || '',
            details: log.details || {},
            previousStatus: log.previousStatus || 'pending',
            newStatus: log.newStatus || 'pending'
        };
        this.invitationAuditLogs.set(id, newLog);
        return newLog;
    }
    async getCommentsByDemand() {
        return [];
    }
    async createDemandComment(comment) {
        const id = (0, crypto_1.randomUUID)();
        return {
            ...comment,
            id,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
    }
    async getBugs() {
        return Array.from(this.bugs.values());
    }
    async getBugsForUser(userId, userRole, organizationId) {
        const allBugs = Array.from(this.bugs.values());
        if (userRole === 'admin') {
            // Admin can see all bugs
            return allBugs;
        }
        else if (userRole === 'manager' && organizationId) {
            // For managers, return all bugs for now (can be refined later based on organization)
            return allBugs;
        }
        else {
            // For residents and tenants, return only their own bugs
            return allBugs.filter(bug => bug.createdBy === userId);
        }
    }
    async getBug(id, userId, role, organizationId) {
        const bug = this.bugs.get(id);
        if (!bug)
            return undefined;
        // If access control parameters are provided, check permissions
        if (userId && role) {
            if (role === 'admin') {
                return bug;
            }
            else if (role === 'manager' && organizationId) {
                return bug;
            }
            else if (bug.createdBy === userId) {
                return bug;
            }
            else {
                return undefined; // Access denied
            }
        }
        return bug;
    }
    async createBug(bug) {
        const id = (0, crypto_1.randomUUID)();
        const newBug = {
            ...bug,
            id,
            status: 'new',
            createdAt: new Date(),
            updatedAt: new Date(),
            reproductionSteps: bug.reproductionSteps || '',
            assignedTo: null,
            resolvedAt: null,
            resolvedBy: null,
            notes: null,
            environment: bug.environment || '',
        };
        this.bugs.set(id, newBug);
        return newBug;
    }
    async updateBug(id, updates, userId, role) {
        const existing = this.bugs.get(id);
        if (!existing)
            return undefined;
        // If access control parameters are provided, check permissions
        if (userId && role) {
            if (role === 'admin' || role === 'manager') {
                // Admin and managers can edit any bug
            }
            else if (existing.createdBy === userId) {
                // Users can edit their own bugs
            }
            else {
                return undefined; // Access denied
            }
        }
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.bugs.set(id, updated);
        return updated;
    }
    async deleteBug(id, userId, role) {
        const existing = this.bugs.get(id);
        if (!existing)
            return false;
        // Check permissions - only admins and bug creators can delete bugs
        if (role === 'admin' || existing.createdBy === userId) {
            this.bugs.delete(id);
            return true;
        }
        return false; // Access denied
    }
    async getFeatureRequests() {
        const featureRequests = Array.from(this.featureRequests.values());
        // Add attachment information to each feature request
        const enrichedRequests = await Promise.all(featureRequests.map(async (request) => {
            // For now, return empty attachments - will be implemented once storage is fixed
            const attachments = [];
            return {
                ...request,
                attachmentCount: attachments.length,
                attachments: []
            };
        }));
        return enrichedRequests;
    }
    async getFeatureRequestsForUser(userId, role, organizationId) {
        // For now, just return all feature requests - proper filtering can be added later
        return this.getFeatureRequests();
    }
    async getFeatureRequest(id, userId, role, organizationId) {
        const request = this.featureRequests.get(id);
        if (!request)
            return undefined;
        // For now, return empty attachments - will be implemented once storage is fixed
        const attachments = [];
        return {
            ...request,
            attachmentCount: attachments.length,
            attachments: []
        };
    }
    async createFeatureRequest(request) {
        const id = (0, crypto_1.randomUUID)();
        const newRequest = {
            ...request,
            id,
            status: 'submitted',
            createdAt: new Date(),
            updatedAt: new Date(),
            upvoteCount: 0,
            assignedTo: null,
            reviewedBy: null,
            reviewedAt: null,
            estimatedHours: null,
            mergedIntoId: null,
        };
        this.featureRequests.set(id, newRequest);
        return newRequest;
    }
    async updateFeatureRequest(id, updates) {
        const existing = this.featureRequests.get(id);
        if (!existing)
            return undefined;
        const updated = { ...existing, ...updates, updatedAt: new Date() };
        this.featureRequests.set(id, updated);
        return updated;
    }
    async addFeatureRequestUpvote() {
        return { success: true, message: 'Upvote added' };
    }
    async removeFeatureRequestUpvote() {
        return { success: true, message: 'Upvote removed' };
    }
}
exports.MemStorage = MemStorage;
// Import the database storage implementation
const optimized_db_storage_1 = require("./optimized-db-storage");
// Production fallback storage - try database first, fall back to memory if authentication fails
class ProductionFallbackStorage {
    dbStorage;
    memStorage;
    usingFallback = false;
    constructor() {
        this.dbStorage = new optimized_db_storage_1.OptimizedDatabaseStorage();
        this.memStorage = new MemStorage();
    }
    async safeDbOperation(operation) {
        if (this.usingFallback) {
            throw new Error('Database unavailable, using memory storage');
        }
        try {
            return await operation();
        }
        catch (error) {
            // Check if it's a database authentication error
            if (error.message?.includes('password authentication failed') ||
                error.message?.includes('neondb_owner') ||
                error.cause?.message?.includes('password authentication failed')) {
                // Database authentication failed, switching to memory storage for production stability
                this.usingFallback = true;
                // Initialize memory storage with production admin user
                await this.initializeFallbackData();
                throw new Error('Database unavailable, using memory storage');
            }
            throw error;
        }
    }
    async initializeFallbackData() {
        // Create the production admin user in memory storage
        const adminUser = {
            id: 'f35647de-5f16-46f2-b30b-09e0469356b1',
            username: 'kevin.hervieux',
            email: 'kevin.hervieux@koveo-gestion.com',
            password: '$2b$12$sAJXEcITZg5ItQou312JsucLyzByPC6lF7CLvrrLkhxKd1EyfSxda', // admin123
            firstName: 'Kevin',
            lastName: 'Hervieux',
            phone: '',
            profileImage: '',
            language: 'fr',
            role: 'admin',
            isActive: true,
            lastLoginAt: null,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        await this.memStorage.createUser(adminUser);
        // Create default organization for admin user
        const defaultOrg = {
            id: 'koveo-org-main',
            name: 'Koveo Gestion',
            type: 'property_management',
            address: '123 Quebec Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
            phone: '+1-514-555-0100',
            email: 'contact@koveo-gestion.com',
            website: 'https://koveo-gestion.com',
            description: 'Main Koveo property management organization',
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        await this.memStorage.createOrganization(defaultOrg);
        // Associate admin user with the organization
        // For memory storage, we'll just ensure the user has access to the organization
        // This is handled by the user's role being 'admin' which gives access to all organizations
        // Production fallback initialized successfully
    }
    // User operations with fallback
    async getUserByEmail(email) {
        // Debug logging removed
        try {
            const user = await this.safeDbOperation(() => this.dbStorage.getUserByEmail(email));
            // Debug logging removed
            return user;
        }
        catch (error) {
            // Error handling maintained without debug logging
            throw error;
        }
    }
    async getUsers() {
        return await this.safeDbOperation(() => this.dbStorage.getUsers());
    }
    async getUsersWithAssignments() {
        return await this.safeDbOperation(() => this.dbStorage.getUsersWithAssignments());
    }
    async getUsersByOrganizations(userId) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getUsersByOrganizations(userId));
        }
        catch {
            return this.memStorage.getUsersByOrganizations(userId);
        }
    }
    async getUser(id) {
        return await this.safeDbOperation(() => this.dbStorage.getUser(id));
    }
    async getUserOrganizations(userId) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getUserOrganizations(userId));
        }
        catch {
            return this.memStorage.getUserOrganizations(userId);
        }
    }
    async getUserResidences(userId) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getUserResidences(userId));
        }
        catch {
            return this.memStorage.getUserResidences(userId);
        }
    }
    async createUser(user) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.createUser(user));
        }
        catch {
            return this.memStorage.createUser(user);
        }
    }
    async updateUser(id, updates) {
        return await this.safeDbOperation(() => this.dbStorage.updateUser(id, updates));
    }
    // Password reset operations
    async createPasswordResetToken(token) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.createPasswordResetToken(token));
        }
        catch {
            return this.memStorage.createPasswordResetToken(token);
        }
    }
    async getPasswordResetToken(token) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getPasswordResetToken(token));
        }
        catch {
            return this.memStorage.getPasswordResetToken(token);
        }
    }
    async markPasswordResetTokenAsUsed(tokenId) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.markPasswordResetTokenAsUsed(tokenId));
        }
        catch {
            return this.memStorage.markPasswordResetTokenAsUsed(tokenId);
        }
    }
    async cleanupExpiredPasswordResetTokens() {
        try {
            return await this.safeDbOperation(() => this.dbStorage.cleanupExpiredPasswordResetTokens());
        }
        catch {
            return this.memStorage.cleanupExpiredPasswordResetTokens();
        }
    }
    // Delegate all other methods to the appropriate storage
    async getOrganizations() {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getOrganizations());
        }
        catch {
            return this.memStorage.getOrganizations();
        }
    }
    async getOrganization(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getOrganization(id));
        }
        catch {
            return this.memStorage.getOrganization(id);
        }
    }
    async createOrganization(org) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.createOrganization(org));
        }
        catch {
            return this.memStorage.createOrganization(org);
        }
    }
    async updateOrganization(id, updates) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.updateOrganization(id, updates));
        }
        catch {
            return this.memStorage.updateOrganization(id, updates);
        }
    }
    async deleteOrganization(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.deleteOrganization(id));
        }
        catch {
            return this.memStorage.deleteOrganization(id);
        }
    }
    // Buildings
    async getBuildings() {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getBuildings());
        }
        catch {
            return this.memStorage.getBuildings();
        }
    }
    async getBuildingsByOrganization(organizationId) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getBuildingsByOrganization(organizationId));
        }
        catch {
            return this.memStorage.getBuildingsByOrganization(organizationId);
        }
    }
    async getBuilding(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getBuilding(id));
        }
        catch {
            return this.memStorage.getBuilding(id);
        }
    }
    async createBuilding(building) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.createBuilding(building));
        }
        catch {
            return this.memStorage.createBuilding(building);
        }
    }
    async updateBuilding(id, updates) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.updateBuilding(id, updates));
        }
        catch {
            return this.memStorage.updateBuilding(id, updates);
        }
    }
    async deleteBuilding(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.deleteBuilding(id));
        }
        catch {
            return this.memStorage.deleteBuilding(id);
        }
    }
    // Residences
    async getResidences() {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getResidences());
        }
        catch {
            return this.memStorage.getResidences();
        }
    }
    async getResidencesByBuilding(buildingId) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getResidencesByBuilding(buildingId));
        }
        catch {
            return this.memStorage.getResidencesByBuilding(buildingId);
        }
    }
    async getResidence(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getResidence(id));
        }
        catch {
            return this.memStorage.getResidence(id);
        }
    }
    async createResidence(residence) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.createResidence(residence));
        }
        catch {
            return this.memStorage.createResidence(residence);
        }
    }
    async updateResidence(id, updates) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.updateResidence(id, updates));
        }
        catch {
            return this.memStorage.updateResidence(id, updates);
        }
    }
    async deleteResidence(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.deleteResidence(id));
        }
        catch {
            return this.memStorage.deleteResidence(id);
        }
    }
    // All other methods - implement fallback pattern for remaining interface methods
    async getContacts() {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getContacts());
        }
        catch {
            return this.memStorage.getContacts();
        }
    }
    async getContact(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.getContact(id));
        }
        catch {
            return this.memStorage.getContact(id);
        }
    }
    async createContact(contact) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.createContact(contact));
        }
        catch {
            return this.memStorage.createContact(contact);
        }
    }
    async updateContact(id, updates) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.updateContact(id, updates));
        }
        catch {
            return this.memStorage.updateContact(id, updates);
        }
    }
    async deleteContact(id) {
        try {
            return await this.safeDbOperation(() => this.dbStorage.deleteContact(id));
        }
        catch {
            return this.memStorage.deleteContact(id);
        }
    }
    // Stub implementations for remaining interface methods - add all other required methods
    async getDocuments() {
        return [];
    }
    async getDocument(id) {
        return undefined;
    }
    async createDocument(doc) {
        throw new Error('Not implemented in fallback');
    }
    async updateDocument(id, updates) {
        return undefined;
    }
    async deleteDocument(id) {
        return false;
    }
    async getDocumentsByBuilding(buildingId) {
        return [];
    }
    async createDocumentBuilding(doc) {
        // Note: External storage integration removed
        const id = (0, crypto_1.randomUUID)();
        return {
            ...doc,
            id,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
    }
    async deleteDocumentBuilding(documentId, buildingId) {
        return false;
    }
    async getDocumentsByResident(residentId) {
        return [];
    }
    async createDocumentResident(doc) {
        // Note: External storage integration removed
        const id = (0, crypto_1.randomUUID)();
        return {
            ...doc,
            id,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
    }
    async deleteDocumentResident(documentId, residentId) {
        return false;
    }
    async getPillars() {
        return [];
    }
    async getPillar(id) {
        return undefined;
    }
    async createPillar(pillar) {
        throw new Error('Not implemented in fallback');
    }
    async updatePillar(id, updates) {
        return undefined;
    }
    async getWorkspaceStatuses() {
        return [];
    }
    async getWorkspaceStatus(id) {
        return undefined;
    }
    async createWorkspaceStatus(status) {
        throw new Error('Not implemented in fallback');
    }
    async updateWorkspaceStatus(id, updates) {
        return undefined;
    }
    async getQualityMetrics() {
        return [];
    }
    async getQualityMetric(id) {
        return undefined;
    }
    async createQualityMetric(metric) {
        throw new Error('Not implemented in fallback');
    }
    async updateQualityMetric(id, updates) {
        return undefined;
    }
    async getFrameworkConfigurations() {
        return [];
    }
    async getFrameworkConfiguration(id) {
        return undefined;
    }
    async createFrameworkConfiguration(config) {
        throw new Error('Not implemented in fallback');
    }
    async updateFrameworkConfiguration(id, updates) {
        return undefined;
    }
    async getImprovementSuggestions() {
        return [];
    }
    async getImprovementSuggestion(id) {
        return undefined;
    }
    async createImprovementSuggestion(suggestion) {
        throw new Error('Not implemented in fallback');
    }
    async updateImprovementSuggestion(id, updates) {
        return undefined;
    }
    async getFeatures() {
        return [];
    }
    async getFeature(id) {
        return undefined;
    }
    async createFeature(feature) {
        throw new Error('Not implemented in fallback');
    }
    async updateFeature(id, updates) {
        return undefined;
    }
    async getActionableItems() {
        return [];
    }
    async getActionableItem(id) {
        return undefined;
    }
    async createActionableItem(item) {
        throw new Error('Not implemented in fallback');
    }
    async updateActionableItem(id, updates) {
        return undefined;
    }
    async getInvitations() {
        return [];
    }
    async getInvitation(id) {
        return undefined;
    }
    async getInvitationByToken(token) {
        return undefined;
    }
    async createInvitation(invitation) {
        throw new Error('Not implemented in fallback');
    }
    async updateInvitation(id, updates) {
        return undefined;
    }
    async deleteInvitation(id) {
        return false;
    }
    async getPermissions() {
        return [];
    }
    async getPermission(id) {
        return undefined;
    }
    async getRolePermissions(role) {
        return [];
    }
    async getUserPermissions(userId) {
        return [];
    }
    async hasPermission(userId, permission) {
        return true;
    } // Admin fallback
    async getBugs() {
        return [];
    }
    async getBugsForUser(userId, userRole, organizationId) {
        return [];
    }
    async getBug(id, userId, role, organizationId) {
        return undefined;
    }
    async createBug(bug) {
        throw new Error('Not implemented in fallback');
    }
    async updateBug(id, updates, userId, role) {
        return undefined;
    }
    async deleteBug(id, userId, role) {
        return false;
    }
    async getFeatureRequests() {
        return [];
    }
    async getFeatureRequest(id) {
        return undefined;
    }
    async createFeatureRequest(request) {
        throw new Error('Not implemented in fallback');
    }
    async updateFeatureRequest(id, updates) {
        return undefined;
    }
    async addFeatureRequestUpvote(featureRequestId, userId) {
        return { success: true, message: 'Fallback mode' };
    }
    async removeFeatureRequestUpvote(featureRequestId, userId) {
        return { success: true, message: 'Fallback mode' };
    }
}
// Use optimized database storage for production
exports.storage = new optimized_db_storage_1.OptimizedDatabaseStorage();
// Export the OptimizedDatabaseStorage class for direct usage
var optimized_db_storage_2 = require("./optimized-db-storage");
Object.defineProperty(exports, "OptimizedDatabaseStorage", { enumerable: true, get: function () { return optimized_db_storage_2.OptimizedDatabaseStorage; } });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,