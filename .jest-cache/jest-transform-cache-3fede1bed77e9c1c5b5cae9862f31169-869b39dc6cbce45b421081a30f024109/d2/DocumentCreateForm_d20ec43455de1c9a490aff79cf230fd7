c436b450dab78e233ee9da690e646779
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentCreateForm = DocumentCreateForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const zod_2 = require("zod");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const dialog_1 = require("@/components/ui/dialog");
const form_1 = require("@/components/ui/form");
const select_1 = require("@/components/ui/select");
const card_1 = require("@/components/ui/card");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const SharedUploader_1 = require("./SharedUploader");
// Document categories matching the ones used in ModularDocumentPageWrapper
const DOCUMENT_CATEGORIES = [
    { value: 'bylaw', label: 'Bylaws' },
    { value: 'financial', label: 'Financial' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'legal', label: 'Legal' },
    { value: 'meeting_minutes', label: 'Meeting Minutes' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'contracts', label: 'Contracts' },
    { value: 'permits', label: 'Permits' },
    { value: 'inspection', label: 'Inspection' },
    { value: 'other', label: 'Other' },
];
// Form schema for document creation
const documentCreateSchema = zod_2.z.object({
    name: zod_2.z.string().min(1, 'Document name is required').max(255, 'Name must be less than 255 characters'),
    description: zod_2.z.string().max(1000, 'Description must be less than 1000 characters').optional(),
    category: zod_2.z.enum([
        'bylaw',
        'financial',
        'maintenance',
        'legal',
        'meeting_minutes',
        'insurance',
        'contracts',
        'permits',
        'inspection',
        'other'
    ]),
});
function DocumentCreateForm({ isOpen, onClose, onSuccess, entityType, entityId, entityName, }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // State for file upload
    const [selectedFile, setSelectedFile] = (0, react_1.useState)(null);
    const [textContent, setTextContent] = (0, react_1.useState)(null);
    // Upload context for secure storage
    const uploadContext = {
        type: entityType === 'building' ? 'buildings' : 'residences',
        buildingId: entityType === 'building' ? entityId : undefined,
        residenceId: entityType === 'residence' ? entityId : undefined,
        userRole: 'admin', // This would be dynamic based on current user
        userId: 'current-user' // This would be dynamic based on current user
    };
    // Form setup
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(documentCreateSchema),
        defaultValues: {
            name: '',
            description: '',
            category: 'other',
        }
    });
    // Create document mutation
    const createDocumentMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const formData = new FormData();
            // Add document metadata
            formData.append('name', data.name);
            formData.append('documentType', data.category);
            if (data.description) {
                formData.append('description', data.description);
            }
            // Add entity association
            if (entityType === 'building') {
                formData.append('buildingId', entityId);
            }
            else {
                formData.append('residenceId', entityId);
            }
            // Add file or text content
            if (selectedFile) {
                formData.append('file', selectedFile);
            }
            else if (textContent) {
                formData.append('textContent', textContent);
            }
            // Make the API request
            const response = await fetch('/api/documents', {
                method: 'POST',
                credentials: 'include',
                body: formData,
            });
            if (!response.ok) {
                const errorText = await response.text();
                let errorData = {};
                try {
                    errorData = JSON.parse(errorText);
                }
                catch (e) {
                    console.error('Failed to parse error response as JSON');
                }
                throw new Error(errorData.error || errorData.message || `Failed to create document: ${response.status}`);
            }
            return response.json();
        },
        onSuccess: (data) => {
            // Invalidate documents cache to refresh the list
            queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
            toast({
                title: 'Document Created',
                description: `"${data.name}" has been created successfully`,
            });
            // Reset form and close dialog
            form.reset();
            setSelectedFile(null);
            setTextContent(null);
            onClose();
            onSuccess?.(data.id);
        },
        onError: (error) => {
            toast({
                title: 'Error Creating Document',
                description: error.message || 'Failed to create document',
                variant: 'destructive',
            });
        }
    });
    // Handle file/text changes from SharedUploader
    const handleDocumentChange = (file, text) => {
        setSelectedFile(file);
        setTextContent(text);
        // Auto-populate name if file was uploaded and name is empty
        if (file && !form.getValues('name')) {
            const nameWithoutExtension = file.name.replace(/\.[^/.]+$/, '');
            form.setValue('name', nameWithoutExtension);
        }
    };
    const onSubmit = (data) => {
        // Validate that we have either a file or text content
        if (!selectedFile && !textContent) {
            toast({
                title: 'Missing Content',
                description: 'Please either upload a file or enter text content for the document.',
                variant: 'destructive',
            });
            return;
        }
        createDocumentMutation.mutate(data);
    };
    const handleClose = () => {
        if (!createDocumentMutation.isPending) {
            form.reset();
            setSelectedFile(null);
            setTextContent(null);
            onClose();
        }
    };
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isOpen, onOpenChange: handleClose, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: "max-w-2xl max-h-[90vh] overflow-y-auto", children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-5 h-5" }), "Create New Document"] }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogDescription, { children: ["Create a new document for ", entityName || `this ${entityType}`] })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "name", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Document Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "e.g., Building Bylaws 2024", ...field, "data-testid": "input-document-name" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "category", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Category *" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-document-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select category" }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: DOCUMENT_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: "description", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description (Optional)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Describe the document content and purpose...", className: "min-h-[80px]", ...field, "data-testid": "textarea-document-description" }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Upload, { className: "w-5 h-5" }), "Document Content"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsx)(SharedUploader_1.SharedUploader, { onDocumentChange: handleDocumentChange, formType: "documents", uploadContext: uploadContext, showAiToggle: false, allowedFileTypes: [
                                                    'application/pdf',
                                                    'application/msword',
                                                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                                                    'application/vnd.ms-excel',
                                                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                                                    'text/plain',
                                                    'image/*'
                                                ], maxFileSize: 25, defaultTab: "file" }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-muted-foreground mt-2", children: "Upload a file or create a text document. Maximum file size: 25MB." })] })] }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: "button", variant: "outline", onClick: handleClose, disabled: createDocumentMutation.isPending, children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: "submit", disabled: createDocumentMutation.isPending, "data-testid": "button-create-document", children: createDocumentMutation.isPending ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: "animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" }), "Creating..."] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "w-4 h-4 mr-2" }), "Create Document"] })) })] })] }) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,