64936e999cf5aae2d9c05119cce4874b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pool = exports.db = exports.sql = void 0;
const serverless_1 = require("@neondatabase/serverless");
const neon_http_1 = require("drizzle-orm/neon-http");
const index_1 = require("./config/index");
// Import only tables that exist, not relations to avoid circular dependency issues in production
const schema_1 = require("@shared/schema");
const databaseUrl = index_1.config.database.url;
if (!databaseUrl) {
    throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');
}
const isUsingKoveoDb = databaseUrl.includes('DATABASE_URL_KOVEO') || (index_1.config.server.isProduction && process.env.DATABASE_URL_KOVEO);
console.log('üîó Connecting to database with URL:', databaseUrl.substring(0, 50) + '...');
console.log('üåç Environment:', index_1.config.server.nodeEnv);
console.log(`üìä Database: Using ${index_1.config.server.isProduction ? 'PRODUCTION (DATABASE_URL_KOVEO)' : 'DEVELOPMENT (DATABASE_URL)'} database`);
/**
 * Neon serverless database connection using HTTP.
 * Uses the same pattern as your successful test code.
 * Optimized for serverless environments like Replit deployments.
 */
exports.sql = (0, serverless_1.neon)(databaseUrl);
// Test connection
(async () => {
    try {
        const result = await (0, exports.sql) `SELECT version()`;
        console.log('‚úÖ Database connection successful:', result[0].version.substring(0, 50) + '...');
    }
    catch (error) {
        console.error('‚ùå Database connection failed:', error.message);
    }
})();
// Create schema object with only tables (no relations to avoid production errors)
const schema = {
    users: schema_1.users,
    organizations: schema_1.organizations,
    buildings: schema_1.buildings,
    residences: schema_1.residences,
    userOrganizations: schema_1.userOrganizations,
    userResidences: schema_1.userResidences,
    invitations: schema_1.invitations,
    documents: schema_1.documents,
    bills: schema_1.bills,
    demands: schema_1.demands,
    commonSpaces: schema_1.commonSpaces,
    passwordResetTokens: schema_1.passwordResetTokens,
    maintenanceRequests: schema_1.maintenanceRequests,
    permissions: schema_1.permissions,
    userPermissions: schema_1.userPermissions,
    rolePermissions: schema_1.rolePermissions,
    budgets: schema_1.budgets,
    monthlyBudgets: schema_1.monthlyBudgets,
};
/**
 * Drizzle ORM database instance with table definitions only.
 * Provides type-safe database operations for the Quebec property management system.
 * Uses HTTP connection for better compatibility with serverless environments.
 */
exports.db = (0, neon_http_1.drizzle)(exports.sql, { schema });
// Log schema loading
console.log('üìä Database initialized with', Object.keys(schema).length, 'tables');
// For compatibility, export sql as pool for session store
exports.pool = exports.sql;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NlcnZlci9kYi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZW9uIH0gZnJvbSAnQG5lb25kYXRhYmFzZS9zZXJ2ZXJsZXNzJztcbmltcG9ydCB7IGRyaXp6bGUgfSBmcm9tICdkcml6emxlLW9ybS9uZW9uLWh0dHAnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcvaW5kZXgnO1xuXG4vLyBJbXBvcnQgb25seSB0YWJsZXMgdGhhdCBleGlzdCwgbm90IHJlbGF0aW9ucyB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5IGlzc3VlcyBpbiBwcm9kdWN0aW9uXG5pbXBvcnQge1xuICB1c2VycyxcbiAgb3JnYW5pemF0aW9ucyxcbiAgYnVpbGRpbmdzLFxuICByZXNpZGVuY2VzLFxuICB1c2VyT3JnYW5pemF0aW9ucyxcbiAgdXNlclJlc2lkZW5jZXMsXG4gIGludml0YXRpb25zLFxuICBkb2N1bWVudHMsXG4gIGJpbGxzLFxuICBkZW1hbmRzLFxuICBjb21tb25TcGFjZXMsXG4gIHBhc3N3b3JkUmVzZXRUb2tlbnMsXG4gIG1haW50ZW5hbmNlUmVxdWVzdHMsXG4gIHBlcm1pc3Npb25zLFxuICB1c2VyUGVybWlzc2lvbnMsXG4gIHJvbGVQZXJtaXNzaW9ucyxcbiAgYnVkZ2V0cyxcbiAgbW9udGhseUJ1ZGdldHMsXG59IGZyb20gJ0BzaGFyZWQvc2NoZW1hJztcblxuY29uc3QgZGF0YWJhc2VVcmwgPSBjb25maWcuZGF0YWJhc2UudXJsO1xuXG5pZiAoIWRhdGFiYXNlVXJsKSB7XG4gIHRocm93IG5ldyBFcnJvcignREFUQUJBU0VfVVJMIG11c3QgYmUgc2V0LiBEaWQgeW91IGZvcmdldCB0byBwcm92aXNpb24gYSBkYXRhYmFzZT8nKTtcbn1cblxuY29uc3QgaXNVc2luZ0tvdmVvRGIgPSBkYXRhYmFzZVVybC5pbmNsdWRlcygnREFUQUJBU0VfVVJMX0tPVkVPJykgfHwgKGNvbmZpZy5zZXJ2ZXIuaXNQcm9kdWN0aW9uICYmIHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTF9LT1ZFTyk7XG5jb25zb2xlLmxvZygn8J+UlyBDb25uZWN0aW5nIHRvIGRhdGFiYXNlIHdpdGggVVJMOicsIGRhdGFiYXNlVXJsLnN1YnN0cmluZygwLCA1MCkgKyAnLi4uJyk7XG5jb25zb2xlLmxvZygn8J+MjSBFbnZpcm9ubWVudDonLCBjb25maWcuc2VydmVyLm5vZGVFbnYpO1xuY29uc29sZS5sb2coYPCfk4ogRGF0YWJhc2U6IFVzaW5nICR7Y29uZmlnLnNlcnZlci5pc1Byb2R1Y3Rpb24gPyAnUFJPRFVDVElPTiAoREFUQUJBU0VfVVJMX0tPVkVPKScgOiAnREVWRUxPUE1FTlQgKERBVEFCQVNFX1VSTCknfSBkYXRhYmFzZWApO1xuXG4vKipcbiAqIE5lb24gc2VydmVybGVzcyBkYXRhYmFzZSBjb25uZWN0aW9uIHVzaW5nIEhUVFAuXG4gKiBVc2VzIHRoZSBzYW1lIHBhdHRlcm4gYXMgeW91ciBzdWNjZXNzZnVsIHRlc3QgY29kZS5cbiAqIE9wdGltaXplZCBmb3Igc2VydmVybGVzcyBlbnZpcm9ubWVudHMgbGlrZSBSZXBsaXQgZGVwbG95bWVudHMuXG4gKi9cbmV4cG9ydCBjb25zdCBzcWwgPSBuZW9uKGRhdGFiYXNlVXJsKTtcblxuLy8gVGVzdCBjb25uZWN0aW9uXG4oYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNxbGBTRUxFQ1QgdmVyc2lvbigpYDtcbiAgICBjb25zb2xlLmxvZygn4pyFIERhdGFiYXNlIGNvbm5lY3Rpb24gc3VjY2Vzc2Z1bDonLCByZXN1bHRbMF0udmVyc2lvbi5zdWJzdHJpbmcoMCwgNTApICsgJy4uLicpO1xuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIERhdGFiYXNlIGNvbm5lY3Rpb24gZmFpbGVkOicsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG59KSgpO1xuXG4vLyBDcmVhdGUgc2NoZW1hIG9iamVjdCB3aXRoIG9ubHkgdGFibGVzIChubyByZWxhdGlvbnMgdG8gYXZvaWQgcHJvZHVjdGlvbiBlcnJvcnMpXG5jb25zdCBzY2hlbWEgPSB7XG4gIHVzZXJzLFxuICBvcmdhbml6YXRpb25zLFxuICBidWlsZGluZ3MsXG4gIHJlc2lkZW5jZXMsXG4gIHVzZXJPcmdhbml6YXRpb25zLFxuICB1c2VyUmVzaWRlbmNlcyxcbiAgaW52aXRhdGlvbnMsXG4gIGRvY3VtZW50cyxcbiAgYmlsbHMsXG4gIGRlbWFuZHMsXG4gIGNvbW1vblNwYWNlcyxcbiAgcGFzc3dvcmRSZXNldFRva2VucyxcbiAgbWFpbnRlbmFuY2VSZXF1ZXN0cyxcbiAgcGVybWlzc2lvbnMsXG4gIHVzZXJQZXJtaXNzaW9ucyxcbiAgcm9sZVBlcm1pc3Npb25zLFxuICBidWRnZXRzLFxuICBtb250aGx5QnVkZ2V0cyxcbn07XG5cbi8qKlxuICogRHJpenpsZSBPUk0gZGF0YWJhc2UgaW5zdGFuY2Ugd2l0aCB0YWJsZSBkZWZpbml0aW9ucyBvbmx5LlxuICogUHJvdmlkZXMgdHlwZS1zYWZlIGRhdGFiYXNlIG9wZXJhdGlvbnMgZm9yIHRoZSBRdWViZWMgcHJvcGVydHkgbWFuYWdlbWVudCBzeXN0ZW0uXG4gKiBVc2VzIEhUVFAgY29ubmVjdGlvbiBmb3IgYmV0dGVyIGNvbXBhdGliaWxpdHkgd2l0aCBzZXJ2ZXJsZXNzIGVudmlyb25tZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IGRiID0gZHJpenpsZShzcWwsIHsgc2NoZW1hIH0pO1xuXG4vLyBMb2cgc2NoZW1hIGxvYWRpbmdcbmNvbnNvbGUubG9nKCfwn5OKIERhdGFiYXNlIGluaXRpYWxpemVkIHdpdGgnLCBPYmplY3Qua2V5cyhzY2hlbWEpLmxlbmd0aCwgJ3RhYmxlcycpO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSwgZXhwb3J0IHNxbCBhcyBwb29sIGZvciBzZXNzaW9uIHN0b3JlXG5leHBvcnQgY29uc3QgcG9vbCA9IHNxbDtcbiJdLCJ2ZXJzaW9uIjozfQ==