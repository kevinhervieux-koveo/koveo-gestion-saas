ddfa2a41d77a47cb9a1241ac6b793c9b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../../server/routes");
/**
 * Security Headers Validation Test Suite
 *
 * Validates that proper security headers are set:
 * - Content Security Policy (CSP)
 * - X-Content-Type-Options
 * - X-Frame-Options
 * - X-XSS-Protection
 * - Strict-Transport-Security
 * - Referrer-Policy
 */
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('Security Headers Validation', () => {
    let app;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
    });
    (0, globals_1.describe)('Essential Security Headers', () => {
        (0, globals_1.it)('should set X-Content-Type-Options header', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health');
            (0, globals_1.expect)(response.headers['x-content-type-options']).toBe('nosniff');
        });
        (0, globals_1.it)('should set X-Frame-Options header', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health');
            (0, globals_1.expect)(response.headers['x-frame-options']).toMatch(/^(DENY|SAMEORIGIN)$/);
        });
        (0, globals_1.it)('should set X-XSS-Protection header', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health');
            (0, globals_1.expect)(response.headers['x-xss-protection']).toBe('1; mode=block');
        });
        (0, globals_1.it)('should set Referrer-Policy header', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health');
            (0, globals_1.expect)(response.headers['referrer-policy']).toBeDefined();
            (0, globals_1.expect)(response.headers['referrer-policy']).toMatch(/^(strict-origin-when-cross-origin|same-origin|no-referrer)$/);
        });
    });
    (0, globals_1.describe)('Content Security Policy', () => {
        (0, globals_1.it)('should set Content-Security-Policy header', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health');
            const csp = response.headers['content-security-policy'];
            (0, globals_1.expect)(csp).toBeDefined();
            // Should contain basic CSP directives
            if (csp) {
                (0, globals_1.expect)(csp).toContain('default-src');
            }
        });
        (0, globals_1.it)('should prevent inline script execution via CSP', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health');
            const csp = response.headers['content-security-policy'];
            if (csp) {
                // Should not allow unsafe-inline for scripts
                (0, globals_1.expect)(csp).not.toContain("script-src 'unsafe-inline'");
            }
        });
    });
    (0, globals_1.describe)('HTTPS Security Headers', () => {
        (0, globals_1.it)('should set Strict-Transport-Security when using HTTPS', async () => {
            // Test with HTTPS simulation
            const response = await (0, supertest_1.default)(app)
                .get('/api/health')
                .set('X-Forwarded-Proto', 'https');
            // In production, should have HSTS header
            if (process.env.NODE_ENV === 'production') {
                (0, globals_1.expect)(response.headers['strict-transport-security']).toBeDefined();
            }
        });
    });
    (0, globals_1.describe)('API-Specific Security Headers', () => {
        (0, globals_1.it)('should set proper CORS headers for API endpoints', async () => {
            const response = await (0, supertest_1.default)(app)
                .options('/api/users');
            // Should handle CORS preflight properly
            (0, globals_1.expect)(response.headers['access-control-allow-methods']).toBeDefined();
        });
        (0, globals_1.it)('should set Cache-Control headers for sensitive endpoints', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/auth/profile');
            // Sensitive endpoints should have no-cache directive
            const cacheControl = response.headers['cache-control'];
            if (cacheControl) {
                (0, globals_1.expect)(cacheControl).toMatch(/(no-cache|no-store|private)/);
            }
        });
        (0, globals_1.it)('should not expose server information', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health');
            // Should not expose Express version or server details
            (0, globals_1.expect)(response.headers['x-powered-by']).toBeUndefined();
            (0, globals_1.expect)(response.headers['server']).not.toContain('Express');
        });
    });
    (0, globals_1.describe)('Error Response Security', () => {
        (0, globals_1.it)('should not leak sensitive information in error messages', async () => {
            // Try to trigger various error conditions
            const responses = await Promise.all([
                (0, supertest_1.default)(app).get('/api/nonexistent').expect(404),
                (0, supertest_1.default)(app).post('/api/users').send({ invalid: 'data' }).expect(400),
                (0, supertest_1.default)(app).get('/api/buildings/999999').expect(404),
            ]);
            responses.forEach(response => {
                const body = response.body;
                const errorText = JSON.stringify(body).toLowerCase();
                // Should not contain internal paths, stack traces, or database info
                (0, globals_1.expect)(errorText).not.toContain('/home/runner');
                (0, globals_1.expect)(errorText).not.toContain('node_modules');
                (0, globals_1.expect)(errorText).not.toContain('postgresql');
                (0, globals_1.expect)(errorText).not.toContain('stack trace');
                (0, globals_1.expect)(errorText).not.toContain('at object.');
            });
        });
        (0, globals_1.it)('should set appropriate status codes for security violations', async () => {
            // Test unauthorized access
            const unauthorizedResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/profile');
            (0, globals_1.expect)(unauthorizedResponse.status).toBe(401);
            // Test forbidden access (would need proper auth setup for realistic test)
            const forbiddenResponse = await (0, supertest_1.default)(app)
                .delete('/api/users/1');
            (0, globals_1.expect)([401, 403]).toContain(forbiddenResponse.status);
        });
    });
    (0, globals_1.describe)('Input Validation Security', () => {
        (0, globals_1.it)('should handle malicious input safely', async () => {
            const maliciousInputs = [
                '<script>alert("xss")</script>',
                "'; DROP TABLE users; --",
                '../../../etc/passwd',
                '{{constructor.constructor("return process")().env}}',
                '\x00\x01\x02', // Binary data
            ];
            for (const maliciousInput of maliciousInputs) {
                const response = await (0, supertest_1.default)(app)
                    .post('/api/organizations')
                    .send({
                    name: maliciousInput,
                    type: 'syndicate',
                    address: '123 Test St',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H1A 1A1',
                });
                // Should either reject the input or sanitize it properly
                (0, globals_1.expect)([400, 401, 403]).toContain(response.status);
                if (response.body.error) {
                    // Error message should not echo back the malicious input
                    (0, globals_1.expect)(response.body.error).not.toContain('<script>');
                    (0, globals_1.expect)(response.body.error).not.toContain('DROP TABLE');
                }
            }
        });
        (0, globals_1.it)('should enforce request size limits', async () => {
            // Create oversized payload
            const largePayload = 'a'.repeat(10 * 1024 * 1024); // 10MB
            const response = await (0, supertest_1.default)(app)
                .post('/api/organizations')
                .send({
                name: largePayload,
                type: 'syndicate',
                address: '123 Test St',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1A 1A1',
            });
            // Should reject oversized requests
            (0, globals_1.expect)(response.status).toBe(413);
        });
    });
    (0, globals_1.describe)('Authentication Security', () => {
        (0, globals_1.it)('should handle authentication bypass attempts', async () => {
            const bypassAttempts = [
                { 'x-user-id': '1' },
                { 'x-role': 'admin' },
                { 'authorization': 'Bearer fake-token' },
                { 'x-forwarded-user': 'admin' },
            ];
            for (const headers of bypassAttempts) {
                const response = await (0, supertest_1.default)(app)
                    .get('/api/auth/profile')
                    .set(headers);
                // Should not bypass authentication
                (0, globals_1.expect)(response.status).toBe(401);
            }
        });
        (0, globals_1.it)('should handle session manipulation attempts', async () => {
            const manipulationAttempts = [
                'admin-session-id',
                '../admin-session',
                'null',
                'undefined',
                JSON.stringify({ userId: 1, role: 'admin' }),
            ];
            for (const sessionId of manipulationAttempts) {
                const response = await (0, supertest_1.default)(app)
                    .get('/api/auth/profile')
                    .set('Cookie', `koveo.sid=${sessionId}`);
                // Should not accept manipulated sessions
                (0, globals_1.expect)(response.status).toBe(401);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,