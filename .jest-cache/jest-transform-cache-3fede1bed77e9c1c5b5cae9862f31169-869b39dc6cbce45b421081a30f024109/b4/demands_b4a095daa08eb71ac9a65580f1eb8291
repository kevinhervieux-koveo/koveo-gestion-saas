7553ee0356e36fe9d17bf8db69a0b0b8
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ManagerDemandsPage;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_query_1 = require("@tanstack/react-query");
const lucide_react_1 = require("lucide-react");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const tabs_1 = require("@/components/ui/tabs");
const select_1 = require("@/components/ui/select");
const dialog_1 = require("@/components/ui/dialog");
const textarea_1 = require("@/components/ui/textarea");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const form_1 = require("@/components/ui/form");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
const use_language_1 = require("@/hooks/use-language");
const demand_details_popup_1 = __importDefault(require("@/components/demands/demand-details-popup"));
const header_1 = require("@/components/layout/header");
// Form schemas
const demandSchema = zod_2.z.object({
    type: zod_2.z.enum(['maintenance', 'complaint', 'information', 'other']),
    description: zod_2.z.string().min(10, 'Description must be at least 10 characters'),
    buildingId: zod_2.z.string().min(1, 'Building is required'),
    residenceId: zod_2.z.string().optional(),
    assignationBuildingId: zod_2.z.string().optional(),
    assignationResidenceId: zod_2.z.string().optional(),
});
const statusColors = {
    draft: 'bg-gray-100 text-gray-800',
    submitted: 'bg-blue-100 text-blue-800',
    under_review: 'bg-yellow-100 text-yellow-800',
    approved: 'bg-green-100 text-green-800',
    rejected: 'bg-red-100 text-red-800',
    in_progress: 'bg-purple-100 text-purple-800',
    completed: 'bg-emerald-100 text-emerald-800',
    cancelled: 'bg-gray-100 text-gray-800',
};
// Type labels will use translation function instead of static object
/**
 *
 */
function ManagerDemandsPage() {
    const { toast } = (0, use_toast_1.useToast)();
    const { t } = (0, use_language_1.useLanguage)();
    // Function to get translated type labels
    const getTypeLabel = (type) => {
        switch (type) {
            case 'maintenance': return t('maintenanceType');
            case 'complaint': return t('complaintType');
            case 'information': return t('informationType');
            case 'other': return t('otherType');
            default: return type;
        }
    };
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [statusFilter, setStatusFilter] = (0, react_1.useState)('all');
    const [typeFilter, setTypeFilter] = (0, react_1.useState)('all');
    const [selectedDemand, setSelectedDemand] = (0, react_1.useState)(null);
    const [isNewDemandOpen, setIsNewDemandOpen] = (0, react_1.useState)(false);
    const [isDetailsOpen, setIsDetailsOpen] = (0, react_1.useState)(false);
    // Fetch demands
    const { data: demands = [], isLoading, error, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/demands'],
        refetchInterval: 30000, // Refresh every 30 seconds
    });
    // Fetch buildings
    const { data: buildings = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/buildings'],
    });
    // Fetch residences
    const { data: residences = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences'],
    });
    // Fetch current user
    const { data: currentUser } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
    });
    // Provide default user to prevent type errors
    const defaultUser = currentUser || {
        id: '',
        role: 'tenant',
        email: '',
        firstName: '',
        lastName: '',
        isActive: true,
        createdAt: '',
        updatedAt: '',
    };
    // Create demand mutation
    const createDemandMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const response = await fetch('/api/demands', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });
            if (!response.ok) {
                throw new Error('Failed to create demand');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/demands'] });
            setIsNewDemandOpen(false);
            newDemandForm.reset();
            toast({
                title: t('success'),
                description: t('demandCreatedSuccess'),
            });
        },
        onError: (error) => {
            // Error creating demand
            toast({
                title: t('error'),
                description: t('failedCreateDemand'),
                variant: 'destructive',
            });
        },
    });
    // Forms
    const newDemandForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(demandSchema),
        defaultValues: {
            type: 'maintenance',
            description: '',
            buildingId: '',
            residenceId: '',
            assignationBuildingId: '',
            assignationResidenceId: '',
        },
    });
    // Filter demands - ensure demands is an array
    const demandsArray = Array.isArray(demands) ? demands : [];
    const filteredDemands = demandsArray.filter((demand) => {
        const matchesSearch = demand.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            getTypeLabel(demand.type)?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            demand.submitter?.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            demand.submitter?.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
            demand.building?.name?.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesStatus = statusFilter === 'all' || demand.status === statusFilter;
        const matchesType = typeFilter === 'all' || demand.type === typeFilter;
        return matchesSearch && matchesStatus && matchesType;
    });
    // Group demands by status for manager view
    const pendingDemands = filteredDemands.filter((d) => ['submitted', 'under_review'].includes(d.status));
    const activeDemands = filteredDemands.filter((d) => ['approved', 'in_progress'].includes(d.status));
    const completedDemands = filteredDemands.filter((d) => ['completed', 'rejected', 'cancelled'].includes(d.status));
    const allDemands = filteredDemands;
    const handleCreateDemand = (data) => {
        createDemandMutation.mutate(data);
    };
    const handleDemandClick = (demand) => {
        setSelectedDemand(demand);
        setIsDetailsOpen(true);
    };
    const handleDemandUpdated = () => {
        queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/demands'] });
    };
    const DemandCard = ({ demand }) => {
        const building = buildings.find((b) => b.id === demand.buildingId);
        const residence = residences.find((r) => r.id === demand.residenceId);
        return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'cursor-pointer hover:shadow-md transition-shadow', onClick: () => handleDemandClick(demand), children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'pb-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-between', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', children: getTypeLabel(demand.type) }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[demand.status], children: demand.status.replace('_', ' ') })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'text-base line-clamp-2', children: [demand.description.substring(0, 100), demand.description.length > 100 && '...'] })] }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'pt-0', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-muted-foreground space-y-1', children: [(0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsxs)("strong", { children: [t('submittedBy'), ":"] }), " ", demand.submitter?.firstName, ' ', demand.submitter?.lastName] }), (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsxs)("strong", { children: [t('building'), ":"] }), " ", building?.name || t('unknown')] }), residence && ((0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsxs)("strong", { children: [t('residence'), ":"] }), " ", residence.name] })), (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsxs)("strong", { children: [t('created'), ":"] }), " ", new Date(demand.createdAt).toLocaleDateString()] })] }) })] }));
    }; /**
     * If function.
     * @param isLoading - IsLoading parameter.
     */ /**
    * If function.
    * @param isLoading - IsLoading parameter.
    */
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('demandsManagement'), subtitle: t('demandsSubtitle') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center justify-center h-64', children: (0, jsx_runtime_1.jsx)("div", { className: 'text-center', children: t('loadingDemands') }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('demandsManagement'), subtitle: t('demandsSubtitle') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h2", { className: 'text-2xl font-bold', children: t('allDemands') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground', children: t('reviewManageDemands') })] }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isNewDemandOpen, onOpenChange: setIsNewDemandOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'h-4 w-4 mr-2' }), t('newDemand')] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-md', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: t('createNewDemand') }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: t('createDemandBehalf') })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...newDemandForm, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: newDemandForm.handleSubmit(handleCreateDemand), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: newDemandForm.control, name: 'type', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('type') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectType') }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'maintenance', children: t('maintenanceType') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'complaint', children: t('complaintType') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'information', children: t('informationType') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'other', children: t('otherType') })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: newDemandForm.control, name: 'buildingId', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('building') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectBuilding') }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: buildings.map((building) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: building.id, children: building.name }, building.id))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: newDemandForm.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('description') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: t('describeDemandDetail'), className: 'min-h-[100px]', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(dialog_1.DialogFooter, { children: (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: createDemandMutation.isPending, children: createDemandMutation.isPending ? t('creating') : t('create') }) })] }) })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'relative flex-1 max-w-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'absolute left-3 top-3 h-4 w-4 text-muted-foreground' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('searchDemands'), value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: 'pl-10' })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: statusFilter, onValueChange: setStatusFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('status') }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: t('allStatus') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'draft', children: t('draft') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'submitted', children: t('submitted') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'under_review', children: t('underReview') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'approved', children: t('approved') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in_progress', children: t('inProgress') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'completed', children: t('completed') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'rejected', children: t('rejected') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cancelled', children: t('cancelled') })] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: typeFilter, onValueChange: setTypeFilter, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('type') }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: t('allTypes') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'maintenance', children: t('maintenanceType') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'complaint', children: t('complaintType') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'information', children: t('informationType') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'other', children: t('otherType') })] })] })] }), (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { defaultValue: 'pending', className: 'w-full', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'pending', children: [t('pendingReview'), " (", pendingDemands.length, ")"] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'active', children: [t('activeTab'), " (", activeDemands.length, ")"] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'completed', children: [t('completedTab'), " (", completedDemands.length, ")"] }), (0, jsx_runtime_1.jsxs)(tabs_1.TabsTrigger, { value: 'all', children: [t('all'), " (", allDemands.length, ")"] })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'pending', className: 'space-y-4', children: pendingDemands.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6 text-center', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground', children: t('noDemandsPending') }) }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'grid gap-4 md:grid-cols-2 lg:grid-cols-3', children: pendingDemands.map((demand) => ((0, jsx_runtime_1.jsx)(DemandCard, { demand: demand }, demand.id))) })) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'active', className: 'space-y-4', children: activeDemands.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6 text-center', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground', children: t('noActiveDemands') }) }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'grid gap-4 md:grid-cols-2 lg:grid-cols-3', children: activeDemands.map((demand) => ((0, jsx_runtime_1.jsx)(DemandCard, { demand: demand }, demand.id))) })) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'completed', className: 'space-y-4', children: completedDemands.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6 text-center', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground', children: t('noCompletedDemands') }) }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'grid gap-4 md:grid-cols-2 lg:grid-cols-3', children: completedDemands.map((demand) => ((0, jsx_runtime_1.jsx)(DemandCard, { demand: demand }, demand.id))) })) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'all', className: 'space-y-4', children: isLoading ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6 text-center', children: (0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground', children: t('loadingDemands') }) }) })) : allDemands.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-6 text-center', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-muted-foreground', children: t('noDemandsFound') }), demandsArray.length > 0 && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-400 mt-2', children: ["(", demandsArray.length, " ", t('totalDemandsLoaded'), ")"] }))] }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'grid gap-4 md:grid-cols-2 lg:grid-cols-3', children: allDemands.map((demand) => ((0, jsx_runtime_1.jsx)(DemandCard, { demand: demand }, demand.id))) })) })] }), (0, jsx_runtime_1.jsx)(demand_details_popup_1.default, { demand: selectedDemand, isOpen: isDetailsOpen, onClose: () => setIsDetailsOpen(false), user: currentUser, onDemandUpdated: handleDemandUpdated })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,