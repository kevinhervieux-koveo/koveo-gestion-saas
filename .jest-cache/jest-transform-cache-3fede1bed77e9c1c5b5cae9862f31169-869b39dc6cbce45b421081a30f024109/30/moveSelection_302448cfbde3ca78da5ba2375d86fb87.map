{"file":"/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/event/selection/moveSelection.js","mappings":"AAAA,YAAY,CAAC;AAEb,IAAI,EAAE,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AACzC,OAAO,CAAC,uCAAuC,CAAC,CAAC;AACjD,IAAI,MAAM,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC;AACpD,IAAI,SAAS,GAAG,OAAO,CAAC,gCAAgC,CAAC,CAAC;AAC1D,IAAI,YAAY,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAEhD;;GAEG,CAAC,SAAS,aAAa,CAAC,IAAI,EAAE,SAAS;IACtC,wBAAwB;IACxB,IAAI,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;QAClC,MAAM,SAAS,GAAG,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1C,YAAY,CAAC,YAAY,CAAC;YACtB,SAAS,EAAE,IAAI;YACf,WAAW,EAAE,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS;SAC/J,CAAC,CAAC;IACP,CAAC;SAAM,CAAC;QACJ,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;QACpD,IAAI,CAAC,CAAC,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;YACrF,OAAO;QACX,CAAC;QACD,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;YACxB,MAAM,YAAY,GAAG,MAAM,CAAC,qBAAqB,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACzG,IAAI,YAAY,EAAE,CAAC;gBACf,YAAY,CAAC,YAAY,CAAC;oBACtB,SAAS,EAAE,YAAY,CAAC,IAAI;oBAC5B,WAAW,EAAE,YAAY,CAAC,MAAM;iBACnC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,SAAS,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC;QACrE,CAAC;IACL,CAAC;AACL,CAAC;AAED,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/event/selection/moveSelection.js"],"sourcesContent":["'use strict';\n\nvar UI = require('../../document/UI.js');\nrequire('../../utils/dataTransfer/Clipboard.js');\nvar cursor = require('../../utils/focus/cursor.js');\nvar selection = require('../../utils/focus/selection.js');\nvar setSelection = require('./setSelection.js');\n\n/**\n * Move the selection\n */ function moveSelection(node, direction) {\n    // TODO: implement shift\n    if (selection.hasOwnSelection(node)) {\n        const selection = UI.getUISelection(node);\n        setSelection.setSelection({\n            focusNode: node,\n            focusOffset: selection.startOffset === selection.endOffset ? selection.focusOffset + direction : direction < 0 ? selection.startOffset : selection.endOffset\n        });\n    } else {\n        const selection = node.ownerDocument.getSelection();\n        if (!(selection === null || selection === undefined ? undefined : selection.focusNode)) {\n            return;\n        }\n        if (selection.isCollapsed) {\n            const nextPosition = cursor.getNextCursorPosition(selection.focusNode, selection.focusOffset, direction);\n            if (nextPosition) {\n                setSelection.setSelection({\n                    focusNode: nextPosition.node,\n                    focusOffset: nextPosition.offset\n                });\n            }\n        } else {\n            selection[direction < 0 ? 'collapseToStart' : 'collapseToEnd']();\n        }\n    }\n}\n\nexports.moveSelection = moveSelection;\n"],"version":3}