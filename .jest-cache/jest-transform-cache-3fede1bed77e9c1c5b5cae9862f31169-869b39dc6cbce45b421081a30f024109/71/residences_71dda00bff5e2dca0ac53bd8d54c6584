ed0fb8bc15a5a447b754f791a95ec208
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerResidenceRoutes = registerResidenceRoutes;
const db_1 = require("../db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const index_1 = require("../auth/index");
const delayed_update_service_1 = require("../services/delayed-update-service");
/**
 *
 * @param app
 */
/**
 * RegisterResidenceRoutes function.
 * @param app
 * @returns Function result.
 */
function registerResidenceRoutes(app) {
    // Get user's residences
    app.get('/api/user/residences', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userResidencesList = await db_1.db
                .select({
                residenceId: schema_1.userResidences.residenceId,
            })
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, user.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            res.json(userResidencesList);
        }
        catch (error) {
            console.error('❌ Error fetching user residences:', error);
            res.status(500).json({ message: 'Failed to fetch user residences' });
        }
    });
    // Get assigned users for a specific residence
    app.get('/api/residences/:residenceId/assigned-users', index_1.requireAuth, async (req, res) => {
        try {
            const { residenceId } = req.params;
            const currentUser = req.user;
            // Get assigned users with their details
            const assignedUsers = await db_1.db
                .select({
                id: schema_1.users.id,
                username: schema_1.users.username,
                email: schema_1.users.email,
                firstName: schema_1.users.firstName,
                lastName: schema_1.users.lastName,
                phone: schema_1.users.phone,
                relationshipType: schema_1.userResidences.relationshipType,
                startDate: schema_1.userResidences.startDate,
                endDate: schema_1.userResidences.endDate,
                isActive: schema_1.userResidences.isActive,
            })
                .from(schema_1.userResidences)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.userResidences.userId, schema_1.users.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, residenceId), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            res.json(assignedUsers);
        }
        catch (error) {
            console.error('❌ Error fetching assigned users:', error);
            res.status(500).json({ message: 'Failed to fetch assigned users' });
        }
    });
    // Update assigned user information
    app.put('/api/residences/:residenceId/assigned-users/:userId', index_1.requireAuth, async (req, res) => {
        try {
            const { userId } = req.params;
            const { firstName, lastName, email, phone } = req.body;
            const currentUser = req.user;
            // Update user information
            await db_1.db
                .update(schema_1.users)
                .set({
                firstName,
                lastName,
                email,
                phone,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema_1.users.id, userId));
            res.json({ message: 'User updated successfully' });
        }
        catch (error) {
            console.error('❌ Error updating assigned user:', error);
            res.status(500).json({ message: 'Failed to update assigned user' });
        }
    });
    // Get all residences with filtering and search
    app.get('/api/residences', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const { search, buildingId, floor } = req.query;
            // Start with base conditions
            const conditions = [(0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)];
            // Apply filters
            if (buildingId) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId));
            }
            if (floor) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.residences.floor, parseInt(floor)));
            }
            // Use the same access control logic as /api/manager/buildings
            const accessibleBuildingIds = new Set();
            // Check if user belongs to Koveo organization (special global access)
            const userOrgs = await db_1.db
                .select({
                organizationId: schema_1.organizations.id,
                organizationName: schema_1.organizations.name,
                canAccessAllOrganizations: schema_1.userOrganizations.canAccessAllOrganizations,
            })
                .from(schema_1.organizations)
                .innerJoin(schema_1.userOrganizations, (0, drizzle_orm_1.eq)(schema_1.userOrganizations.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true)));
            const hasGlobalAccess = user.role === 'admin' ||
                userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);
            if (hasGlobalAccess) {
                console.log(`🌟 Admin user or user with global access detected - granting access to ALL residences`);
                // Koveo users can see ALL residences from ALL buildings
                const allBuildings = await db_1.db
                    .select({ id: schema_1.buildings.id })
                    .from(schema_1.buildings)
                    .where((0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true));
                allBuildings.forEach((building) => {
                    accessibleBuildingIds.add(building.id);
                });
            }
            else {
                // Regular users: Get buildings from their organizations
                if (user.role === 'admin' || user.role === 'manager' || user.role === 'demo_manager') {
                    if (userOrgs.length > 0) {
                        const orgIds = userOrgs.map((uo) => uo.organizationId);
                        // Get all buildings from these organizations
                        const orgBuildings = await db_1.db
                            .select({ id: schema_1.buildings.id })
                            .from(schema_1.buildings)
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
                        orgBuildings.forEach((building) => {
                            accessibleBuildingIds.add(building.id);
                        });
                    }
                }
                // For ALL roles (Admin, Manager, Resident, Tenant): Get buildings from their residences
                console.log(`🔍 [ACCESS DEBUG] Checking residence access for user ${user.id} with role ${user.role}`);
                const userResidenceRecords = await db_1.db
                    .select({
                    residenceId: schema_1.userResidences.residenceId,
                })
                    .from(schema_1.userResidences)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, user.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
                console.log(`🔍 [ACCESS DEBUG] Found ${userResidenceRecords.length} residence records for user ${user.id}`);
                if (userResidenceRecords.length > 0) {
                    const residenceIds = userResidenceRecords.map((ur) => ur.residenceId);
                    // Get buildings through residences
                    const residenceBuildings = await db_1.db
                        .select({ id: schema_1.buildings.id })
                        .from(schema_1.residences)
                        .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.residences.id, residenceIds), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
                    residenceBuildings.forEach((building) => {
                        accessibleBuildingIds.add(building.id);
                    });
                }
            }
            // Add building access filter to conditions
            console.log(`🔍 [ACCESS DEBUG] User ${user.id} has access to ${accessibleBuildingIds.size} buildings:`, Array.from(accessibleBuildingIds));
            if (accessibleBuildingIds.size > 0) {
                conditions.push((0, drizzle_orm_1.inArray)(schema_1.residences.buildingId, Array.from(accessibleBuildingIds)));
            }
            else {
                // User has no access to any buildings, return empty result
                return res.json([]);
            }
            // Get residences with building and organization info
            const baseQuery = db_1.db
                .select({
                residence: schema_1.residences,
                building: schema_1.buildings,
                organization: schema_1.organizations,
            })
                .from(schema_1.residences)
                .leftJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                .leftJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.and)(...conditions));
            let results = await baseQuery;
            // Apply search filter
            if (search) {
                const searchLower = search.toLowerCase();
                results = results.filter((result) => result.residence.unitNumber.toLowerCase().includes(searchLower) ||
                    result.building?.name.toLowerCase().includes(searchLower));
            }
            // Get tenants for each residence
            const residenceIds = results.map((r) => r.residence.id);
            const tenants = residenceIds.length > 0
                ? await db_1.db
                    .select({
                    residenceId: schema_1.userResidences.residenceId,
                    tenant: schema_1.users,
                })
                    .from(schema_1.userResidences)
                    .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.userResidences.userId, schema_1.users.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.userResidences.residenceId, residenceIds), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)))
                : [];
            // Group tenants by residence
            const tenantsByResidence = tenants.reduce((acc, { residenceId, tenant }) => {
                if (!acc[residenceId]) {
                    acc[residenceId] = [];
                }
                acc[residenceId].push({
                    id: tenant.id,
                    firstName: tenant.firstName,
                    lastName: tenant.lastName,
                    email: tenant.email,
                });
                return acc;
            }, {});
            // Combine results
            const residencesList = results.map((result) => ({
                ...result.residence,
                building: result.building,
                organization: result.organization,
                tenants: tenantsByResidence[result.residence.id] || [],
            }));
            res.json(residencesList);
        }
        catch (error) {
            console.error('❌ Error fetching residences:', error);
            res.status(500).json({ message: 'Failed to fetch residences' });
        }
    });
    // Get a specific residence by ID
    app.get('/api/residences/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const result = await db_1.db
                .select({
                residence: schema_1.residences,
                building: schema_1.buildings,
                organization: schema_1.organizations,
            })
                .from(schema_1.residences)
                .leftJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                .leftJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.id, id), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
            if (result.length === 0) {
                return res.status(404).json({ message: 'Residence not found' });
            }
            const residence = result[0];
            // Apply RBAC check
            if (user.role !== 'admin' && !user.canAccessAllOrganizations) {
                // Check if user has access to this residence's organization
                const userHasAccess = await db_1.db
                    .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                    .from(schema_1.userResidences)
                    .leftJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                    .leftJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, user.id), (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, residence.organization.id)));
                if (userHasAccess[0].count === 0) {
                    return res.status(403).json({ message: 'Access denied' });
                }
            }
            // Get tenants for this residence
            const tenants = await db_1.db
                .select({
                id: schema_1.users.id,
                firstName: schema_1.users.firstName,
                lastName: schema_1.users.lastName,
                email: schema_1.users.email,
                relationshipType: schema_1.userResidences.relationshipType,
                startDate: schema_1.userResidences.startDate,
                endDate: schema_1.userResidences.endDate,
            })
                .from(schema_1.userResidences)
                .leftJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.userResidences.userId, schema_1.users.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            res.json({
                ...residence.residence,
                building: residence.building,
                organization: residence.organization,
                tenants,
            });
        }
        catch (error) {
            console.error('❌ Error fetching residence:', error);
            res.status(500).json({ message: 'Failed to fetch residence' });
        }
    });
    // Update a residence
    app.put('/api/residences/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const updateData = req.body;
            console.log(`🏠 Updating residence ${id} with data:`, updateData);
            // Remove readonly fields
            delete updateData.id;
            delete updateData.createdAt;
            delete updateData.buildingId; // Don't allow changing building
            // Validate and sanitize numeric fields
            const processedData = {
                ...updateData,
                updatedAt: new Date(),
            };
            // Convert null/empty values to null for optional fields
            if (processedData.squareFootage === null || processedData.squareFootage === '') {
                processedData.squareFootage = null;
            }
            if (processedData.bathrooms === null || processedData.bathrooms === '') {
                processedData.bathrooms = null;
            }
            if (processedData.ownershipPercentage === null || processedData.ownershipPercentage === '') {
                processedData.ownershipPercentage = null;
            }
            if (processedData.monthlyFees === null || processedData.monthlyFees === '') {
                processedData.monthlyFees = null;
            }
            console.log(`🏠 Processed data for residence ${id}:`, processedData);
            const updated = await db_1.db
                .update(schema_1.residences)
                .set(processedData)
                .where((0, drizzle_orm_1.eq)(schema_1.residences.id, id))
                .returning();
            if (updated.length === 0) {
                return res.status(404).json({ message: 'Residence not found' });
            }
            console.log(`✅ Successfully updated residence ${id}`);
            // Schedule delayed money flow and budget update for the updated residence
            try {
                delayed_update_service_1.delayedUpdateService.scheduleResidenceUpdate(id);
                // Don't fail the residence update if scheduling fails
            }
            catch (e) {
                console.warn('⚠️ Failed to schedule residence update:', e);
            }
            res.json(updated[0]);
        }
        catch (error) {
            console.error('❌ Error updating residence:', error);
            console.error('❌ Error details:', error.message);
            console.error('❌ Error stack:', error.stack);
            res.status(500).json({
                message: 'Failed to update residence',
                error: error.message,
                details: process.env.NODE_ENV === 'development' ? error.stack : undefined
            });
        }
    });
    // Create residences when a building is created (called internally)
    app.post('/api/buildings/:buildingId/generate-residences', index_1.requireAuth, async (req, res) => {
        try {
            const { buildingId } = req.params;
            // Get building details
            const building = await db_1.db
                .select()
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
                .limit(1);
            if (building.length === 0) {
                return res.status(404).json({ message: 'Building not found' });
            }
            const buildingData = building[0];
            const totalUnits = buildingData.totalUnits;
            const totalFloors = buildingData.totalFloors || 1;
            if (totalUnits > 300) {
                return res
                    .status(400)
                    .json({ message: 'Cannot create more than 300 residences per building' });
            }
            // Check if residences already exist for this building
            const existingResidences = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId));
            if (existingResidences[0].count > 0) {
                return res.status(400).json({ message: 'Residences already exist for this building' });
            }
            // Generate residences
            const residencesToCreate = [];
            const unitsPerFloor = Math.ceil(totalUnits / totalFloors);
            for (let unit = 1; unit <= totalUnits; unit++) {
                const floor = Math.ceil(unit / unitsPerFloor);
                const unitOnFloor = ((unit - 1) % unitsPerFloor) + 1;
                const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;
                residencesToCreate.push({
                    buildingId,
                    unitNumber,
                    floor,
                    isActive: true,
                });
            }
            // Insert all residences at once
            const createdResidences = await db_1.db
                .insert(schema_1.residences)
                .values(residencesToCreate)
                .returning();
            res.json({
                message: `Successfully created ${createdResidences.length} residences`,
                residences: createdResidences,
            });
        }
        catch (error) {
            console.error('❌ Error generating residences:', error);
            res.status(500).json({ message: 'Failed to generate residences' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,