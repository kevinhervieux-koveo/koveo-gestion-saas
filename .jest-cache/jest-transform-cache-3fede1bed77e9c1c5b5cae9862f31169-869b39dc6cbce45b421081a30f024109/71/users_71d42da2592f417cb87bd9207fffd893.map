{"file":"/home/runner/workspace/server/api/users.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/users.ts"],"sourcesContent":["import type { Express } from 'express';\nimport { storage } from '../storage';\nimport { insertUserSchema, type User, type InsertUser } from '@shared/schema';\nimport { z } from 'zod';\nimport { requireAuth } from '../auth';\nimport { createHash, randomBytes } from 'crypto';\nimport * as bcrypt from 'bcryptjs';\n// Database-based permissions - no config imports needed\nimport { db } from '../db';\nimport * as schema from '../../shared/schema';\nimport { eq, and, inArray, sql, lt } from 'drizzle-orm';\nimport {\n  sanitizeString,\n  sanitizeName,\n  normalizeEmail,\n  validatePasswordStrength,\n  generateUsernameFromEmail,\n} from '../utils/input-sanitization';\nimport { logUserCreation } from '../utils/user-creation-logger';\nimport { queryCache } from '../query-cache';\nimport { emailService } from '../services/email-service';\n\n/**\n * Registers all user-related API endpoints.\n *\n * @param app - Express application instance.\n */\n/**\n * RegisterUserRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerUserRoutes(app: Express): void {\n  /**\n   * GET /api/users - Retrieves users with their assignments based on current user's role and organizations.\n   */\n  app.get('/api/users', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Parse pagination parameters\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const offset = (page - 1) * limit;\n\n      // Parse filter parameters\n      const filters = {\n        role: req.query.role as string,\n        status: req.query.status as string,\n        organization: req.query.organization as string,\n        orphan: req.query.orphan as string,\n        search: req.query.search as string,\n      };\n      \n      console.log('🎯 [API] Raw query parameters:', {\n        role: req.query.role,\n        status: req.query.status,\n        organization: req.query.organization,\n        orphan: req.query.orphan,\n        search: req.query.search\n      });\n      \n      // Special debug for orphan filter\n      if (req.query.orphan) {\n        console.log('👻 [API DEBUG] Orphan filter detected:', req.query.orphan, typeof req.query.orphan);\n      }\n\n      // Apply role-based prefiltering at database level\n      let roleBasedFilters = { ...filters };\n      \n      console.log(`🔐 [USER FILTER] Current user role: ${currentUser.role}, applying role-based filters...`);\n      \n      if (currentUser.role === 'admin') {\n        // Admin can see all users - no additional filtering\n        console.log('🔓 [ADMIN] No role-based filtering applied - admin can see all users');\n      } else if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(currentUser.role)) {\n        // Demo users can only see other demo users\n        if (!roleBasedFilters.role) {\n          // If no role filter is applied, restrict to demo roles only\n          roleBasedFilters.demoOnly = 'true';\n        }\n      } else {\n        // Regular managers can only see users from their organizations\n        console.log('👔 [MANAGER] Restricting to users from manager\\'s organizations');\n        const userOrgIds = (await storage.getUserOrganizations(currentUser.id)).map(org => org.organizationId);\n        console.log(`   → Manager organizations: [${userOrgIds.join(', ')}]`);\n        if (userOrgIds.length > 0) {\n          roleBasedFilters.managerOrganizations = userOrgIds.join(',');\n          console.log('   → Added managerOrganizations filter');\n        } else {\n          // Manager has no organizations, return empty result\n          return res.json({\n            users: [],\n            pagination: {\n              page,\n              limit,\n              total: 0,\n              totalPages: 0,\n              hasNext: false,\n              hasPrev: false\n            }\n          });\n        }\n      }\n\n      // Get users with their full assignment data and pagination (now with role-based prefiltering)\n      console.log('📊 [QUERY] Applying filters:', JSON.stringify(roleBasedFilters, null, 2));\n      const result = await storage.getUsersWithAssignmentsPaginated(offset, limit, roleBasedFilters);\n      console.log(`📈 [RESULT] Found ${result.users.length} users out of ${result.total} total (page ${page})`);\n\n      \n\n      // Role-based filtering is now handled at database level in roleBasedFilters\n      // No additional application-level filtering needed\n      const filteredUsers = result.users;\n\n      // Return paginated response with metadata\n      res.json({\n        users: filteredUsers,\n        pagination: {\n          page,\n          limit,\n          total: result.total,\n          totalPages: Math.ceil(result.total / limit),\n          hasNext: page * limit < result.total,\n          hasPrev: page > 1\n        }\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching users:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch users',\n      });\n    }\n  });\n\n  /**\n   * GET /api/users/filter-options - Get distinct values for filter dropdowns\n   */\n  app.get('/api/users/filter-options', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Get distinct roles (including null values)\n      const rolesResult = await db\n        .selectDistinct({ role: schema.users.role })\n        .from(schema.users)\n        .orderBy(schema.users.role);\n\n      // Get distinct status values (including null values)\n      const statusResult = await db\n        .selectDistinct({ isActive: schema.users.isActive })\n        .from(schema.users)\n        .orderBy(schema.users.isActive);\n\n      // Role-based organization filtering for filter options\n      let organizations = [];\n      if (currentUser.role === 'admin') {\n        // Admin can see all organizations\n        const orgsResult = await db\n          .select({ id: schema.organizations.id, name: schema.organizations.name })\n          .from(schema.organizations)\n          .where(eq(schema.organizations.isActive, true))\n          .orderBy(schema.organizations.name);\n        organizations = orgsResult;\n      } else if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(currentUser.role)) {\n        // Demo users can only see demo organizations\n        const orgsResult = await db\n          .select({ id: schema.organizations.id, name: schema.organizations.name })\n          .from(schema.organizations)\n          .where(\n            and(\n              eq(schema.organizations.isActive, true),\n              eq(schema.organizations.type, 'demo')\n            )\n          )\n          .orderBy(schema.organizations.name);\n        organizations = orgsResult;\n      } else {\n        // Regular managers see only their organizations\n        const userOrgIds = (await storage.getUserOrganizations(currentUser.id)).map(org => org.organizationId);\n        if (userOrgIds.length > 0) {\n          const orgsResult = await db\n            .select({ id: schema.organizations.id, name: schema.organizations.name })\n            .from(schema.organizations)\n            .where(\n              and(\n                eq(schema.organizations.isActive, true),\n                inArray(schema.organizations.id, userOrgIds)\n              )\n            )\n            .orderBy(schema.organizations.name);\n          organizations = orgsResult;\n        }\n      }\n\n      // Prepare filter options with All and null handling\n      const roleOptions = [\n        { value: '', label: 'All Roles' },\n        ...rolesResult.map(r => ({\n          value: r.role || 'null',\n          label: r.role ? r.role.charAt(0).toUpperCase() + r.role.slice(1).replace('_', ' ') : 'No Role'\n        }))\n      ];\n\n      const statusOptions = [\n        { value: '', label: 'All Statuses' },\n        ...statusResult.map(s => ({\n          value: s.isActive === null ? 'null' : s.isActive.toString(),\n          label: s.isActive === null ? 'No Status' : (s.isActive ? 'Active' : 'Inactive')\n        }))\n      ];\n\n      const organizationOptions = [\n        { value: '', label: 'All Organizations' },\n        ...organizations.map(org => ({\n          value: org.id,\n          label: org.name\n        }))\n      ];\n\n      const orphanOptions = currentUser.role === 'admin' ? [\n        { value: '', label: 'All Users' },\n        { value: 'true', label: 'Orphan Users' },\n        { value: 'false', label: 'Assigned Users' }\n      ] : [];\n\n      res.json({\n        roles: roleOptions,\n        statuses: statusOptions,\n        organizations: organizationOptions,\n        orphanOptions\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching filter options:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch filter options',\n      });\n    }\n  });\n\n  /**\n   * GET /api/users/:id - Retrieves a specific user by ID.\n   */\n  app.get('/api/users/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        return res.status(400).json({\n          _error: 'Bad request',\n          message: 'User ID is required',\n        });\n      }\n\n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'User not found',\n        });\n      }\n\n      // Remove sensitive information before sending response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      console.error('❌ Error fetching user:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch user',\n      });\n    }\n  });\n\n  /**\n   * GET /api/users/email/:email - Retrieves a user by email address.\n   */\n  app.get('/api/users/email/:email', async (req, res) => {\n    try {\n      const { email } = req.params;\n\n      if (!email) {\n        return res.status(400).json({\n          _error: 'Bad request',\n          message: 'Email is required',\n        });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'User not found',\n        });\n      }\n\n      // Remove sensitive information before sending response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      console.error('❌ Error fetching user by email:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch user',\n      });\n    }\n  });\n\n  /**\n   * POST /api/users - Creates a new user.\n   */\n  app.post('/api/users', async (req, res) => {\n    try {\n      // Enhanced password validation using utility\n      if (req.body.password) {\n        const passwordValidation = validatePasswordStrength(req.body.password);\n        if (!passwordValidation.isValid) {\n          return res.status(400).json({\n            error: 'Validation error',\n            message: passwordValidation.message,\n            code: 'WEAK_PASSWORD',\n          });\n        }\n      }\n\n      // Sanitize and normalize all input data\n      const normalizedData = {\n        ...req.body,\n        email: normalizeEmail(req.body.email || ''),\n        firstName: sanitizeName(req.body.firstName || ''),\n        lastName: sanitizeName(req.body.lastName || ''),\n        phone: req.body.phone ? sanitizeString(req.body.phone) : '',\n        language: req.body.language || 'fr',\n      };\n\n      // Generate unique username if not provided\n      if (!normalizedData.username && normalizedData.email) {\n        const baseUsername = generateUsernameFromEmail(normalizedData.email);\n        let username = baseUsername;\n\n        // Ensure username uniqueness\n        let usernameCounter = 1;\n        let existingUsername = await db\n          .select({ username: schema.users.username })\n          .from(schema.users)\n          .where(eq(schema.users.username, username))\n          .limit(1);\n\n        while (existingUsername.length > 0) {\n          username = `${baseUsername}${usernameCounter}`;\n          usernameCounter++;\n          existingUsername = await db\n            .select({ username: schema.users.username })\n            .from(schema.users)\n            .where(eq(schema.users.username, username))\n            .limit(1);\n        }\n\n        normalizedData.username = username;\n      }\n\n      const validatedData = insertUserSchema.parse(normalizedData);\n\n      // Check if user with email already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(409).json({\n          _error: 'Conflict',\n          message: 'User with this email already exists',\n        });\n      }\n\n      const user = await storage.createUser(validatedData);\n\n      // Log successful user creation\n      logUserCreation({\n        userId: user.id,\n        email: user.email,\n        role: user.role,\n        method: 'direct',\n        success: true,\n        timestamp: new Date(),\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      // Remove sensitive information before sending response\n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error: any) {\n      // Log failed user creation attempt\n      logUserCreation({\n        email: req.body.email || 'unknown',\n        role: req.body.role || 'unknown',\n        method: 'direct',\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date(),\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: 'Validation error',\n          message: 'Invalid user data',\n          details: error.issues,\n        });\n      }\n\n      console.error('❌ Error creating user:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to create user',\n      });\n    }\n  });\n\n  /**\n   * PUT /api/users/:id - Updates an existing user.\n   */\n  app.put('/api/users/:id', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'User ID is required',\n        });\n      }\n\n      // Get the target user being updated\n      const targetUser = await storage.getUser(id);\n      if (!targetUser) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'User not found',\n        });\n      }\n\n      // Role-based access control for user updates\n      const { role: newRole } = req.body;\n      \n      // Validate role assignment permissions\n      if (newRole && newRole !== targetUser.role) {\n        // Admin can assign any role\n        if (currentUser.role === 'admin') {\n          // Admin has no restrictions\n        } \n        // Manager restrictions\n        else if (currentUser.role === 'manager') {\n          // Managers cannot escalate to admin\n          if (newRole === 'admin') {\n            return res.status(403).json({\n              error: 'Permission denied',\n              message: 'Managers cannot assign admin role',\n              code: 'ROLE_ESCALATION_DENIED',\n            });\n          }\n          // Managers can only assign manager/tenant/resident roles\n          if (!['manager', 'tenant', 'resident'].includes(newRole)) {\n            return res.status(403).json({\n              error: 'Permission denied',\n              message: 'Managers can only assign manager, tenant, or resident roles',\n              code: 'INVALID_ROLE_ASSIGNMENT',\n            });\n          }\n        }\n        // Demo manager restrictions\n        else if (currentUser.role === 'demo_manager') {\n          // Demo managers can only assign demo roles\n          if (!['demo_manager', 'demo_tenant', 'demo_resident'].includes(newRole)) {\n            return res.status(403).json({\n              error: 'Permission denied',\n              message: 'Demo managers can only assign demo roles',\n              code: 'INVALID_DEMO_ROLE_ASSIGNMENT',\n            });\n          }\n        }\n        // Other roles cannot assign roles\n        else {\n          return res.status(403).json({\n            error: 'Permission denied',\n            message: 'Insufficient permissions to assign roles',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n\n        // Organization scope validation for role assignments\n        if (currentUser.role === 'manager' || currentUser.role === 'demo_manager') {\n          // Get current user's organizations\n          const currentUserOrgs = await storage.getUserOrganizations(currentUser.id);\n          const currentUserOrgIds = currentUserOrgs.map(org => org.organizationId);\n          \n          // Get target user's organizations\n          const targetUserOrgs = await storage.getUserOrganizations(id);\n          const targetUserOrgIds = targetUserOrgs.map(org => org.organizationId);\n          \n          // Check if current user has access to target user's organizations\n          const hasAccessToTargetOrgs = targetUserOrgIds.some(orgId => \n            currentUserOrgIds.includes(orgId)\n          );\n          \n          if (!hasAccessToTargetOrgs && targetUserOrgIds.length > 0) {\n            return res.status(403).json({\n              error: 'Permission denied',\n              message: 'Cannot modify users outside your organization scope',\n              code: 'ORGANIZATION_SCOPE_VIOLATION',\n            });\n          }\n\n          // For demo managers, validate demo role assignments\n          if (currentUser.role === 'demo_manager') {\n            // Check if target organizations are demo organizations\n            const targetOrgs = await db\n              .select()\n              .from(schema.organizations)\n              .where(inArray(schema.organizations.id, targetUserOrgIds));\n            \n            const hasNonDemoOrgs = targetOrgs.some(org => org.type !== 'demo');\n            if (hasNonDemoOrgs) {\n              return res.status(403).json({\n                error: 'Permission denied',\n                message: 'Demo managers cannot assign roles to users in non-demo organizations',\n                code: 'DEMO_SCOPE_VIOLATION',\n              });\n            }\n          }\n        }\n      }\n\n      // Validate the update data (excluding password updates for security)\n      const updateSchema = insertUserSchema.partial().omit({ password: true });\n      const validatedData = updateSchema.parse(req.body);\n\n      const user = await storage.updateUser(id, {\n        ...validatedData,\n        updatedAt: new Date(),\n      } as any);\n\n      if (!user) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'User not found',\n        });\n      }\n\n      // Clear relevant caches\n      queryCache.invalidate('users', 'all_users');\n      queryCache.invalidate('users', `user:${id}`);\n\n      // Remove sensitive information before sending response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: 'Validation error',\n          message: 'Invalid user data',\n          details: error.issues,\n        });\n      }\n\n      console.error('❌ Error updating user:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update user',\n      });\n    }\n  });\n\n  // Admin-only endpoint to delete orphan users\n  app.delete('/api/users/orphans', requireAuth, async (req: any, res) => {\n    console.log('🔥 [DELETE ORPHANS API] ===== DELETE ORPHAN USERS REQUEST STARTED =====');\n    console.log('⏰ [DELETE ORPHANS API] Request timestamp:', new Date().toISOString());\n    console.log('🛡️ [DELETE ORPHANS API] Request authentication info:', {\n      userId: req.user?.id,\n      userEmail: req.user?.email,\n      userRole: req.user?.role,\n      sessionExists: !!req.session,\n      sessionId: req.session?.id\n    });\n\n    try {\n      console.log('🗑️ [DELETE ORPHANS API] Processing request from user:', req.user?.id, 'role:', req.user?.role);\n      \n      // Check if user is admin\n      if (req.user?.role !== 'admin') {\n        console.log('❌ [DELETE ORPHANS API] Access denied - user role is:', req.user?.role, '(expected: admin)');\n        return res.status(403).json({ \n          error: 'Access denied. Admin role required.',\n          userRole: req.user?.role \n        });\n      }\n\n      console.log('✅ [DELETE ORPHANS API] Admin authorization confirmed');\n      console.log('🔍 [DELETE ORPHANS API] Calling storage.countOrphanUsers()...');\n\n      // Get count of orphan users before deletion\n      const orphanCount = await storage.countOrphanUsers();\n      console.log('📊 [DELETE ORPHANS API] Storage returned orphan count:', orphanCount);\n\n      if (orphanCount === 0) {\n        console.log('ℹ️ [DELETE ORPHANS API] No orphan users found, returning success with 0 count');\n        return res.json({ \n          success: true, \n          message: 'No orphan users found to delete',\n          deletedCount: 0 \n        });\n      }\n\n      console.log('🚀 [DELETE ORPHANS API] Proceeding with deletion of', orphanCount, 'orphan users');\n      console.log('🔒 [DELETE ORPHANS API] Excluding current admin user:', req.user.id);\n      console.log('🔍 [DELETE ORPHANS API] Calling storage.deleteOrphanUsers()...');\n\n      // Delete orphan users (excluding current admin)\n      const startTime = Date.now();\n      const deletedCount = await storage.deleteOrphanUsers(req.user.id);\n      const endTime = Date.now();\n      \n      console.log('⏱️ [DELETE ORPHANS API] Storage operation completed in:', (endTime - startTime), 'ms');\n      console.log('📈 [DELETE ORPHANS API] Storage returned deleted count:', deletedCount);\n\n      if (deletedCount !== orphanCount) {\n        console.log('⚠️ [DELETE ORPHANS API] Warning: Deleted count differs from initial count:', {\n          initialCount: orphanCount,\n          deletedCount: deletedCount,\n          difference: orphanCount - deletedCount\n        });\n      }\n\n      const responseData = { \n        success: true, \n        message: `Successfully deleted ${deletedCount} orphan users`,\n        deletedCount,\n        initialCount: orphanCount\n      };\n\n      console.log('✅ [DELETE ORPHANS API] Operation completed successfully:', responseData);\n      console.log('🔥 [DELETE ORPHANS API] ===== DELETE ORPHAN USERS REQUEST COMPLETED =====');\n      \n      res.json(responseData);\n\n    } catch (error) {\n      console.error('💥 [DELETE ORPHANS API] ===== CRITICAL ERROR =====');\n      console.error('❌ [DELETE ORPHANS API] Error details:', {\n        message: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined,\n        name: error instanceof Error ? error.name : undefined,\n        timestamp: new Date().toISOString()\n      });\n      console.error('💥 [DELETE ORPHANS API] ===== END CRITICAL ERROR =====');\n      \n      res.status(500).json({ \n        error: 'Failed to delete orphan users',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/users/:id - Deactivates a user (soft delete).\n   */\n  app.delete('/api/users/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      if (!id) {\n        return res.status(400).json({\n          _error: 'Bad request',\n          message: 'User ID is required',\n        });\n      }\n\n      // Soft delete by setting isActive to false\n      const user = await storage.updateUser(id, {\n        isActive: false,\n        updatedAt: new Date(),\n      });\n\n      if (!user) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'User not found',\n        });\n      }\n\n      res.json({\n        message: 'User deactivated successfully',\n        id: user.id,\n      });\n    } catch (error: any) {\n      console.error('❌ Error deactivating user:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to deactivate user',\n      });\n    }\n  });\n\n  /**\n   * GET /api/user-organizations - Get current user's organizations.\n   */\n  app.get('/api/user-organizations', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      const organizations = await storage.getUserOrganizations(currentUser.id);\n      res.json(organizations);\n    } catch (error: any) {\n      console.error('❌ Error getting user organizations:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to get user organizations',\n      });\n    }\n  });\n\n  /**\n   * GET /api/user-residences - Get current user's residences.\n   */\n  app.get('/api/user-residences', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      const residences = await storage.getUserResidences(currentUser.id);\n      res.json(residences);\n    } catch (error: any) {\n      console.error('❌ Error getting user residences:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to get user residences',\n      });\n    }\n  });\n\n  /**\n   * GET /api/admin/all-user-organizations - Get user-organization relationships (admin: all, manager: filtered by their orgs).\n   */\n  app.get('/api/admin/all-user-organizations', requireAuth, async (req: any, res) => {\n    console.log('🔍 [API] all-user-organizations endpoint called by user:', req.user?.email);\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can access user assignments\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions to view user assignments',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      let userOrganizations;\n\n      if (currentUser.role === 'admin') {\n        // Admin sees all user-organization relationships\n        userOrganizations = await db\n          .select({\n            userId: schema.userOrganizations.userId,\n            organizationId: schema.userOrganizations.organizationId,\n            organizationRole: schema.userOrganizations.organizationRole,\n            isActive: schema.userOrganizations.isActive,\n          })\n          .from(schema.userOrganizations)\n          .where(eq(schema.userOrganizations.isActive, true));\n      } else {\n        // Manager sees only relationships for their organizations\n        const managerOrgs = await db\n          .select({ organizationId: schema.userOrganizations.organizationId })\n          .from(schema.userOrganizations)\n          .where(\n            and(\n              eq(schema.userOrganizations.userId, currentUser.id),\n              eq(schema.userOrganizations.isActive, true)\n            )\n          );\n\n        const orgIds = managerOrgs.map((org) => org.organizationId);\n\n        if (orgIds.length === 0) {\n          return res.json([]);\n        }\n\n        userOrganizations = await db\n          .select({\n            userId: schema.userOrganizations.userId,\n            organizationId: schema.userOrganizations.organizationId,\n            organizationRole: schema.userOrganizations.organizationRole,\n            isActive: schema.userOrganizations.isActive,\n          })\n          .from(schema.userOrganizations)\n          .where(\n            and(\n              eq(schema.userOrganizations.isActive, true),\n              inArray(schema.userOrganizations.organizationId, orgIds)\n            )\n          );\n      }\n\n      res.json(userOrganizations);\n    } catch (error: any) {\n      console.error('❌ Error getting all user organizations:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to get user organizations',\n      });\n    }\n  });\n\n  /**\n   * GET /api/admin/all-user-residences - Get user-residence relationships (admin: all, manager: filtered by their orgs).\n   */\n  app.get('/api/admin/all-user-residences', requireAuth, async (req: any, res) => {\n    console.log('🔍 [API] all-user-residences endpoint called by user:', req.user?.email);\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can access user assignments\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions to view user assignments',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      let userResidences;\n\n      if (currentUser.role === 'admin') {\n        // Admin sees all user-residence relationships\n        userResidences = await db\n          .select({\n            userId: schema.userResidences.userId,\n            residenceId: schema.userResidences.residenceId,\n            relationshipType: schema.userResidences.relationshipType,\n            startDate: schema.userResidences.startDate,\n            endDate: schema.userResidences.endDate,\n            isActive: schema.userResidences.isActive,\n          })\n          .from(schema.userResidences)\n          .where(eq(schema.userResidences.isActive, true));\n      } else {\n        // Manager sees only relationships for residences in their organizations\n        const managerOrgs = await db\n          .select({ organizationId: schema.userOrganizations.organizationId })\n          .from(schema.userOrganizations)\n          .where(\n            and(\n              eq(schema.userOrganizations.userId, currentUser.id),\n              eq(schema.userOrganizations.isActive, true)\n            )\n          );\n\n        const orgIds = managerOrgs.map((org) => org.organizationId);\n\n        if (orgIds.length === 0) {\n          return res.json([]);\n        }\n\n        // Get residences in manager's organizations\n        const accessibleResidences = await db\n          .select({ residenceId: schema.residences.id })\n          .from(schema.residences)\n          .innerJoin(schema.buildings, eq(schema.residences.buildingId, schema.buildings.id))\n          .where(\n            and(\n              inArray(schema.buildings.organizationId, orgIds),\n              eq(schema.residences.isActive, true)\n            )\n          );\n\n        const residenceIds = accessibleResidences.map((res) => res.residenceId);\n\n        if (residenceIds.length === 0) {\n          return res.json([]);\n        }\n\n        userResidences = await db\n          .select({\n            userId: schema.userResidences.userId,\n            residenceId: schema.userResidences.residenceId,\n            relationshipType: schema.userResidences.relationshipType,\n            startDate: schema.userResidences.startDate,\n            endDate: schema.userResidences.endDate,\n            isActive: schema.userResidences.isActive,\n          })\n          .from(schema.userResidences)\n          .where(\n            and(\n              eq(schema.userResidences.isActive, true),\n              inArray(schema.userResidences.residenceId, residenceIds)\n            )\n          );\n      }\n\n      res.json(userResidences);\n    } catch (error: any) {\n      console.error('❌ Error getting all user residences:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to get user residences',\n      });\n    }\n  });\n\n  /**\n   * GET /api/user/permissions - Retrieves the current user's permissions based on their role.\n   * Protected endpoint that requires authentication.\n   */\n  app.get('/api/user/permissions', requireAuth, async (req: any, res) => {\n    try {\n      // Get user role from session\n      const userRole = req.user?.role;\n\n      if (!userRole) {\n        return res.status(400).json({\n          _error: 'Bad request',\n          message: 'User role not found in session',\n        });\n      }\n\n      // Get permissions for the user's role from database\n      const rolePermissions = await storage.getRolePermissions();\n      const userPermissions = rolePermissions\n        .filter((rp: any) => rp.role === userRole)\n        .map((rp: any) => rp.permission?.name)\n        .filter(Boolean);\n\n      // Create response with Zod validation\n      const responseData = {\n        role: userRole,\n        permissions: userPermissions,\n        permissionCount: userPermissions.length,\n      };\n\n      // Validate response with Zod schema\n      const permissionsResponseSchema = z.object({\n        role: z.enum(['admin', 'manager', 'tenant', 'resident']),\n        permissions: z.array(z.string()),\n        permissionCount: z.number(),\n      });\n\n      const validatedResponse = permissionsResponseSchema.parse(responseData);\n\n      res.json(validatedResponse);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(500).json({\n          error: 'Internal server error',\n          message: 'Failed to validate permissions response',\n          details: error.issues,\n        });\n      }\n\n      console.error('❌ Error fetching user permissions:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch user permissions',\n      });\n    }\n  });\n\n  /**\n   * PUT /api/users/:id/organizations - Updates user's organization assignments.\n   * Admin: can assign/remove any organization\n   * Manager: cannot modify organization assignments.\n   */\n  app.put('/api/users/:id/organizations', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      const { id: userId } = req.params;\n      const { organizationIds } = req.body;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins can modify organization assignments\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Only administrators can modify organization assignments',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      if (!userId || !Array.isArray(organizationIds)) {\n        return res.status(400).json({\n          message: 'User ID and organization IDs array are required',\n          code: 'INVALID_REQUEST',\n        });\n      }\n\n      // Verify user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({\n          message: 'User not found',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      // Remove existing organization assignments\n      await db.delete(schema.userOrganizations).where(eq(schema.userOrganizations.userId, userId));\n\n      // Add new organization assignments\n      if (organizationIds.length > 0) {\n        const newAssignments = organizationIds.map((orgId: string) => ({\n          userId,\n          organizationId: orgId,\n          organizationRole: user.role,\n          isActive: true,\n        }));\n\n        await db.insert(schema.userOrganizations).values(newAssignments);\n      }\n\n      res.json({\n        message: 'Organization assignments updated successfully',\n        userId,\n        organizationIds,\n      });\n    } catch (error: any) {\n      console.error('❌ Error updating organization assignments:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update organization assignments',\n      });\n    }\n  });\n\n  /**\n   * PUT /api/users/:id/buildings - Updates user's building assignments.\n   * Admin and Manager: can assign/remove buildings they have access to\n   */\n  app.put('/api/users/:id/buildings', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      const { id: userId } = req.params;\n      const { buildingIds } = req.body;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can modify building assignments\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Only administrators and managers can modify building assignments',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      if (!userId || !Array.isArray(buildingIds)) {\n        return res.status(400).json({\n          message: 'User ID and building IDs array are required',\n          code: 'INVALID_REQUEST',\n        });\n      }\n\n      // Verify user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({\n          message: 'User not found',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      // For now, we'll create user-residence relationships for each building\n      // This is a simplified approach - in a real system you'd have user-building relationships\n      \n      // Get residences for the selected buildings\n      const residences = await db\n        .select()\n        .from(schema.residences)\n        .where(inArray(schema.residences.buildingId, buildingIds));\n\n      // Remove existing residence assignments for this user\n      await db.delete(schema.userResidences).where(eq(schema.userResidences.userId, userId));\n\n      // Add new residence assignments (one per building - taking the first residence)\n      if (residences.length > 0) {\n        const buildingToResidence = new Map();\n        residences.forEach(residence => {\n          if (!buildingToResidence.has(residence.buildingId)) {\n            buildingToResidence.set(residence.buildingId, residence);\n          }\n        });\n\n        const newAssignments = Array.from(buildingToResidence.values()).map((residence: any) => ({\n          userId,\n          residenceId: residence.id,\n          relationshipType: user.role === 'manager' ? 'manager' : 'tenant',\n          startDate: new Date().toISOString().split('T')[0],\n          isActive: true,\n        }));\n\n        await db.insert(schema.userResidences).values(newAssignments);\n      }\n\n      res.json({\n        message: 'Building assignments updated successfully',\n        userId,\n        buildingIds,\n      });\n    } catch (error: any) {\n      console.error('❌ Error updating building assignments:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update building assignments',\n      });\n    }\n  });\n\n  /**\n   * GET /api/users/:id/residences - Get user's accessible residences.\n   */\n  app.get('/api/users/:id/residences', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      const { id: userId } = req.params;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Users can only access their own residences unless they're admin/manager\n      if (currentUser.id !== userId && !['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      // Get full residence details with building information\n      const residencesWithDetails = await storage.getUserResidencesWithDetails(userId);\n      \n      // Transform the data to match the expected frontend format\n      const residences = residencesWithDetails.map(item => ({\n        id: item.residence.id,\n        unitNumber: item.residence.unitNumber,\n        floor: item.residence.floor,\n        squareFootage: item.residence.squareFootage,\n        bedrooms: item.residence.bedrooms,\n        bathrooms: item.residence.bathrooms,\n        balcony: item.residence.balcony,\n        parkingSpaceNumbers: item.residence.parkingSpaceNumbers,\n        storageSpaceNumbers: item.residence.storageSpaceNumbers,\n        isActive: item.residence.isActive,\n        buildingId: item.residence.buildingId,\n        building: {\n          id: item.building.id,\n          name: item.building.name,\n          address: item.building.address,\n          city: item.building.city,\n          province: item.building.province,\n          postalCode: item.building.postalCode,\n        },\n      }));\n\n      res.json(residences);\n    } catch (error: any) {\n      console.error('❌ Error getting user residences:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to get user residences',\n      });\n    }\n  });\n\n  /**\n   * GET /api/users/:id/buildings - Get user's accessible buildings based on their residences.\n   */\n  app.get('/api/users/:id/buildings', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      const { id: userId } = req.params;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Users can only access their own buildings unless they're admin/manager\n      if (currentUser.id !== userId && !['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      // Get user's residences with building information\n      const userResidences = await db\n        .select({\n          residenceId: schema.userResidences.residenceId,\n          buildingId: schema.residences.buildingId,\n        })\n        .from(schema.userResidences)\n        .innerJoin(schema.residences, eq(schema.userResidences.residenceId, schema.residences.id))\n        .where(and(\n          eq(schema.userResidences.userId, userId),\n          eq(schema.userResidences.isActive, true),\n          eq(schema.residences.isActive, true)\n        ));\n      \n      if (!userResidences || userResidences.length === 0) {\n        return res.json({ buildings: [] });\n      }\n\n      // Get unique building IDs from user's residences\n      const buildingIds = [...new Set(userResidences.map(ur => ur.buildingId).filter(Boolean))];\n      \n      if (buildingIds.length === 0) {\n        return res.json({ buildings: [] });\n      }\n\n      // Fetch building details with stats using the existing logic from /api/manager/buildings\n      const buildingDetails = await db\n        .select({\n          id: schema.buildings.id,\n          name: schema.buildings.name,\n          address: schema.buildings.address,\n          city: schema.buildings.city,\n          province: schema.buildings.province,\n          postalCode: schema.buildings.postalCode,\n          buildingType: schema.buildings.buildingType,\n          yearBuilt: schema.buildings.yearBuilt,\n          totalFloors: schema.buildings.totalFloors,\n          parkingSpaces: schema.buildings.parkingSpaces,\n          storageSpaces: schema.buildings.storageSpaces,\n          managementCompany: schema.buildings.managementCompany,\n          amenities: schema.buildings.amenities,\n          organizationId: schema.buildings.organizationId,\n          organizationName: schema.organizations.name,\n          organizationType: schema.organizations.type,\n        })\n        .from(schema.buildings)\n        .leftJoin(schema.organizations, eq(schema.buildings.organizationId, schema.organizations.id))\n        .where(and(\n          inArray(schema.buildings.id, buildingIds),\n          eq(schema.buildings.isActive, true)\n        ));\n\n      // Calculate stats for each building\n      const buildingsWithStats = await Promise.all(\n        buildingDetails.map(async (building) => {\n          const [totalUnits, occupiedUnits] = await Promise.all([\n            db\n              .select({ count: sql<number>`count(*)` })\n              .from(schema.residences)\n              .where(and(eq(schema.residences.buildingId, building.id), eq(schema.residences.isActive, true)))\n              .then(result => result[0]?.count || 0),\n            \n            db\n              .select({ count: sql<number>`count(distinct ${schema.residences.id})` })\n              .from(schema.residences)\n              .leftJoin(schema.userResidences, eq(schema.userResidences.residenceId, schema.residences.id))\n              .where(and(\n                eq(schema.residences.buildingId, building.id),\n                eq(schema.residences.isActive, true),\n                eq(schema.userResidences.isActive, true)\n              ))\n              .then(result => result[0]?.count || 0),\n          ]);\n\n          const vacantUnits = totalUnits - occupiedUnits;\n          const occupancyRate = totalUnits > 0 ? (occupiedUnits / totalUnits) * 100 : 0;\n\n          return {\n            ...building,\n            totalUnits,\n            occupiedUnits,\n            vacantUnits,\n            occupancyRate,\n          };\n        })\n      );\n\n      res.json({ buildings: buildingsWithStats });\n    } catch (error: any) {\n      console.error('❌ Error getting user buildings:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to get user buildings',\n      });\n    }\n  });\n\n  /**\n   * PUT /api/users/:id/residences - Updates user's residence assignments.\n   * Admin: can assign/remove any residence\n   * Manager: can assign/remove residences within their organizations only.\n   */\n  app.put('/api/users/:id/residences', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      const { id: userId } = req.params;\n      const { residenceAssignments } = req.body; // Array of { residenceId, relationshipType, startDate, endDate }\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can modify residence assignments\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions to modify residence assignments',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      if (!userId || !Array.isArray(residenceAssignments)) {\n        return res.status(400).json({\n          message: 'User ID and residence assignments array are required',\n          code: 'INVALID_REQUEST',\n        });\n      }\n\n      // Verify user exists\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({\n          message: 'User not found',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      // For managers, verify they can access all requested residences\n      if (currentUser.role === 'manager') {\n        for (const assignment of residenceAssignments) {\n          // Get the building for this residence\n          const residence = await db\n            .select({ buildingId: schema.residences.buildingId })\n            .from(schema.residences)\n            .where(eq(schema.residences.id, assignment.residenceId))\n            .limit(1);\n\n          if (residence.length === 0) {\n            return res.status(404).json({\n              message: `Residence ${assignment.residenceId} not found`,\n              code: 'RESIDENCE_NOT_FOUND',\n            });\n          }\n\n          // Check if manager has access to this building\n          // Get buildings accessible to this manager through their organizations\n          const managerOrgs = await db\n            .select({ organizationId: schema.userOrganizations.organizationId })\n            .from(schema.userOrganizations)\n            .where(\n              and(\n                eq(schema.userOrganizations.userId, currentUser.id),\n                eq(schema.userOrganizations.isActive, true)\n              )\n            );\n\n          const orgIds = managerOrgs.map((org) => org.organizationId);\n\n          const accessibleBuildings =\n            orgIds.length > 0\n              ? await db\n                  .select({ id: schema.buildings.id })\n                  .from(schema.buildings)\n                  .where(\n                    and(\n                      inArray(schema.buildings.organizationId, orgIds),\n                      eq(schema.buildings.isActive, true)\n                    )\n                  )\n              : [];\n\n          const hasAccess = accessibleBuildings.some((b) => b.id === residence[0].buildingId);\n          if (!hasAccess) {\n            return res.status(403).json({\n              message: `Insufficient permissions for residence ${assignment.residenceId}`,\n              code: 'INSUFFICIENT_PERMISSIONS',\n            });\n          }\n        }\n      }\n\n      // Remove existing residence assignments\n      await db.delete(schema.userResidences).where(eq(schema.userResidences.userId, userId));\n\n      // Add new residence assignments\n      if (residenceAssignments.length > 0) {\n        const newAssignments = residenceAssignments.map((assignment: any) => ({\n          userId,\n          residenceId: assignment.residenceId,\n          relationshipType: assignment.relationshipType || 'tenant',\n          startDate: assignment.startDate || new Date().toISOString().split('T')[0],\n          endDate: assignment.endDate || null,\n          isActive: true,\n        }));\n\n        await db.insert(schema.userResidences).values(newAssignments);\n      }\n\n      res.json({\n        message: 'Residence assignments updated successfully',\n        userId,\n        assignmentCount: residenceAssignments.length,\n      });\n    } catch (error: any) {\n      console.error('❌ Error updating residence assignments:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update residence assignments',\n      });\n    }\n  });\n\n  /**\n   * GET /api/users/me/organizations - Get organizations accessible to current user.\n   * Used by invite form to populate organization dropdown.\n   */\n  app.get('/api/users/me/organizations', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      console.log(`📊 Fetching user-accessible organizations for ${currentUser.email} (${currentUser.role})`);\n\n      // Get organizations based on user role - same logic as /api/organizations\n      let organizationsQuery;\n\n      if (currentUser.role === 'admin') {\n        // Admin can see all organizations\n        organizationsQuery = db\n          .select({\n            id: schema.organizations.id,\n            name: schema.organizations.name,\n            type: schema.organizations.type,\n            address: schema.organizations.address,\n            city: schema.organizations.city,\n            province: schema.organizations.province,\n            postalCode: schema.organizations.postalCode,\n            phone: schema.organizations.phone,\n            email: schema.organizations.email,\n            website: schema.organizations.website,\n            registrationNumber: schema.organizations.registrationNumber,\n            isActive: schema.organizations.isActive,\n            createdAt: schema.organizations.createdAt,\n          })\n          .from(schema.organizations)\n          .where(eq(schema.organizations.isActive, true))\n          .orderBy(schema.organizations.name);\n      } else {\n        // Other users see organizations they have access to through user_organizations\n        organizationsQuery = db\n          .select({\n            id: schema.organizations.id,\n            name: schema.organizations.name,\n            type: schema.organizations.type,\n            address: schema.organizations.address,\n            city: schema.organizations.city,\n            province: schema.organizations.province,\n            postalCode: schema.organizations.postalCode,\n            phone: schema.organizations.phone,\n            email: schema.organizations.email,\n            website: schema.organizations.website,\n            registrationNumber: schema.organizations.registrationNumber,\n            isActive: schema.organizations.isActive,\n            createdAt: schema.organizations.createdAt,\n          })\n          .from(schema.organizations)\n          .innerJoin(schema.userOrganizations, eq(schema.organizations.id, schema.userOrganizations.organizationId))\n          .where(\n            and(\n              eq(schema.organizations.isActive, true),\n              eq(schema.userOrganizations.userId, currentUser.id),\n              eq(schema.userOrganizations.isActive, true)\n            )\n          )\n          .orderBy(schema.organizations.name);\n      }\n\n      const accessibleOrganizations = await organizationsQuery;\n      console.log(`✅ Found ${accessibleOrganizations.length} organizations for user ${currentUser.id}`);\n\n      // Return array directly (not wrapped in object) - same format as /api/organizations\n      res.json(accessibleOrganizations);\n    } catch (error: any) {\n      console.error('❌ Error fetching user organizations:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch user organizations',\n      });\n    }\n  });\n\n  /**\n   * GET /api/users/me/data-export - Download user data for Law 25 compliance.\n   */\n  app.get('/api/users/me/data-export', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Get all user data for export\n      const userData = await storage.getUser(currentUser.id);\n      if (!userData) {\n        return res.status(404).json({\n          message: 'User not found',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      // Remove sensitive fields\n      const { password, ...userDataExport } = userData;\n\n      // Get related data\n      const [organizations, residences, bills, documents, notifications, maintenanceRequests] =\n        await Promise.all([\n          db\n            .select()\n            .from(schema.userOrganizations)\n            .where(eq(schema.userOrganizations.userId, currentUser.id)),\n          db\n            .select()\n            .from(schema.userResidences)\n            .where(eq(schema.userResidences.userId, currentUser.id)),\n          db\n            .select()\n            .from(schema.bills)\n            .innerJoin(\n              schema.userResidences,\n              eq(schema.bills.residenceId, schema.userResidences.residenceId)\n            )\n            .where(eq(schema.userResidences.userId, currentUser.id)),\n          db\n            .select()\n            .from(schema.documents)\n            .where(eq(schema.documents.uploadedById, currentUser.id)),\n          db\n            .select()\n            .from(schema.notifications)\n            .where(eq(schema.notifications.userId, currentUser.id)),\n          db\n            .select()\n            .from(schema.maintenanceRequests)\n            .where(eq(schema.maintenanceRequests.submittedBy, currentUser.id)),\n        ]);\n\n      const exportData = {\n        personalInformation: userDataExport,\n        organizations,\n        residences,\n        bills: bills.map((b) => b.bills),\n        documents: documents,\n        notifications,\n        maintenanceRequests,\n        exportDate: new Date().toISOString(),\n        note: 'This export contains all personal data we have on file for you in compliance with Quebec Law 25.',\n      };\n\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader(\n        'Content-Disposition',\n        `attachment; filename=\"user-data-export-${currentUser.id}-${new Date().toISOString().split('T')[0]}.json\"`\n      );\n      res.json(exportData);\n    } catch (error: any) {\n      console.error('❌ Error exporting user data:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to export user data',\n      });\n    }\n  });\n\n  /**\n   * POST /api/users/me/delete-account - Complete account deletion for Law 25 compliance.\n   */\n  app.post('/api/users/me/delete-account', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      const { confirmEmail, reason } = req.body;\n\n      // Verify email confirmation\n      if (confirmEmail !== currentUser.email) {\n        return res.status(400).json({\n          message: 'Email confirmation does not match',\n          code: 'EMAIL_MISMATCH',\n        });\n      }\n\n      // Delete all related data in the correct order to handle foreign key constraints\n      await Promise.all([\n        // Delete user relationships\n        db\n          .delete(schema.userOrganizations)\n          .where(eq(schema.userOrganizations.userId, currentUser.id)),\n        db.delete(schema.userResidences).where(eq(schema.userResidences.userId, currentUser.id)),\n        db\n          .delete(schema.documents)\n          .where(eq(schema.documents.uploadedById, currentUser.id)),\n\n        // Delete user-created content\n        db.delete(schema.notifications).where(eq(schema.notifications.userId, currentUser.id)),\n        db\n          .delete(schema.maintenanceRequests)\n          .where(eq(schema.maintenanceRequests.submittedBy, currentUser.id)),\n\n        // Delete invitations\n        db.delete(schema.invitations).where(eq(schema.invitations.email, currentUser.email)),\n      ]);\n\n      // Finally, delete the user account\n      await db.delete(schema.users).where(eq(schema.users.id, currentUser.id));\n\n      // Log the deletion for audit purposes\n      console.log(\n        `User account deleted: ${currentUser.email} (${currentUser.id}). Reason: ${reason || 'Not provided'}`\n      );\n\n      // Clear session\n      if (req.session) {\n        req.session.destroy((err: any) => {\n          if (err) {\n            console.error('Failed to destroy session after account deletion:', err);\n          }\n        });\n      }\n\n      res.json({\n        message:\n          'Account successfully deleted. All personal data has been permanently removed from our systems.',\n        deletionDate: new Date().toISOString(),\n      });\n    } catch (error: any) {\n      console.error('❌ Error deleting account:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to delete account. Please contact support.',\n      });\n    }\n  });\n\n  /**\n   * PUT /api/users/me - Update current user's profile.\n   */\n  app.put('/api/users/me', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Validate the update data (excluding password updates for security)\n      const updateSchema = insertUserSchema\n        .partial()\n        .omit({ password: true, id: true, role: true });\n      const validatedData = updateSchema.parse(req.body);\n\n      const user = await storage.updateUser(currentUser.id, {\n        ...validatedData,\n        updatedAt: new Date(),\n      } as any);\n\n      if (!user) {\n        return res.status(404).json({\n          message: 'User not found',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      // Remove sensitive information before sending response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error: any) {\n      console.error('❌ Error updating user profile:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update profile',\n      });\n    }\n  });\n\n  /**\n   * POST /api/users/:id/delete-account - RESTRICTED Admin endpoint to delete any user account.\n   * SAFETY: Requires email confirmation and deletion reason for audit trail.\n   * WARNING: This is a permanent operation that should only be used in exceptional cases.\n   */\n  app.post('/api/users/:id/delete-account', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      const { id: targetUserId } = req.params;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins can delete other users' accounts\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Only administrators can delete user accounts',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n      \n      // Additional safety check: Log this critical operation\n      console.warn(`⚠️  CRITICAL: Admin ${currentUser.email} attempting to delete user ${targetUserId}`);\n\n      if (!targetUserId) {\n        return res.status(400).json({\n          message: 'User ID is required',\n          code: 'INVALID_REQUEST',\n        });\n      }\n\n      // Verify target user exists\n      const targetUser = await storage.getUser(targetUserId);\n      if (!targetUser) {\n        return res.status(404).json({\n          message: 'User not found',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      const { confirmEmail, reason } = req.body;\n\n      // Verify email confirmation\n      if (confirmEmail !== targetUser.email) {\n        return res.status(400).json({\n          message: 'Email confirmation does not match',\n          code: 'EMAIL_MISMATCH',\n        });\n      }\n\n      // Delete all related data in the correct order to handle foreign key constraints\n      const deletionPromises = [\n        // Delete user relationships\n        db\n          .delete(schema.userOrganizations)\n          .where(eq(schema.userOrganizations.userId, targetUserId)),\n        db.delete(schema.userResidences).where(eq(schema.userResidences.userId, targetUserId)),\n        db\n          .delete(schema.documents)\n          .where(eq(schema.documents.uploadedById, targetUserId)),\n\n        // Delete invitations\n        db.delete(schema.invitations).where(eq(schema.invitations.email, targetUser.email)),\n        \n        // Delete demands and related comments (must be done before deleting user)\n        db.delete(schema.demandComments).where(eq(schema.demandComments.commenterId, targetUserId)),\n        db.delete(schema.demands).where(eq(schema.demands.submitterId, targetUserId)),\n        \n        // Delete bugs and feature requests submitted by the user\n        db.delete(schema.bugs).where(eq(schema.bugs.createdBy, targetUserId)),\n        db.delete(schema.featureRequests).where(eq(schema.featureRequests.createdBy, targetUserId)),\n        db.delete(schema.featureRequestUpvotes).where(eq(schema.featureRequestUpvotes.userId, targetUserId)),\n      ];\n\n      // Try to delete from optional tables that might not exist\n      const optionalDeletions = [\n        async () => {\n          try {\n            await db\n              .delete(schema.notifications)\n              .where(eq(schema.notifications.userId, targetUserId));\n          } catch (error: any) {\n            if (error.cause?.code === '42P01') {\n              console.log('Notifications table not found, skipping...');\n            } else {\n              throw error;\n            }\n          }\n        },\n        async () => {\n          try {\n            await db\n              .delete(schema.maintenanceRequests)\n              .where(eq(schema.maintenanceRequests.submittedBy, targetUserId));\n          } catch (error: any) {\n            if (error.cause?.code === '42P01') {\n              console.log('Maintenance requests table not found, skipping...');\n            } else {\n              throw error;\n            }\n          }\n        },\n      ];\n\n      // Execute core deletions first\n      await Promise.all(deletionPromises);\n\n      // Execute optional deletions\n      await Promise.all(optionalDeletions.map((fn) => fn()));\n\n      // Finally, delete the user account\n      await db.delete(schema.users).where(eq(schema.users.id, targetUserId));\n\n      // Clear all caches to ensure the user list updates immediately\n      queryCache.invalidate('users', 'all_users');\n      queryCache.invalidate('users', `user:${targetUserId}`);\n      queryCache.invalidate('users', `user_email:${targetUser.email}`);\n\n      // Log the deletion for audit purposes\n      console.log(\n        `User account deleted by admin ${currentUser.email} (${currentUser.id}): ${targetUser.email} (${targetUserId}). Reason: ${reason || 'Not provided'}`\n      );\n\n      res.json({\n        message: 'User account and all associated data have been permanently deleted',\n        deletedUserId: targetUserId,\n        deletedUserEmail: targetUser.email,\n      });\n    } catch (error: any) {\n      console.error('❌ Error deleting user account:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to delete user account',\n      });\n    }\n  });\n\n  /**\n   * POST /api/users/me/change-password - Change current user's password.\n   */\n  app.post('/api/users/me/change-password', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      const { currentPassword, newPassword } = req.body;\n\n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({\n          message: 'Current password and new password are required',\n          code: 'INVALID_INPUT',\n        });\n      }\n\n      // Verify current password\n      const user = await storage.getUser(currentUser.id);\n      if (!user || !(await bcrypt.compare(currentPassword, user.password))) {\n        return res.status(400).json({\n          message: 'Current password is incorrect',\n          code: 'INVALID_PASSWORD',\n        });\n      }\n\n      // Hash new password\n      const hashedPassword = await bcrypt.hash(newPassword, 12);\n\n      // Update password\n      await storage.updateUser(currentUser.id, {\n        password: hashedPassword,\n        updatedAt: new Date(),\n      } as any);\n\n      res.json({\n        message: 'Password changed successfully',\n      });\n    } catch (error: any) {\n      console.error('❌ Error changing password:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to change password',\n      });\n    }\n  });\n\n  /**\n   * POST /api/users/demo - Creates a demo user directly without invitation\n   */\n  app.post('/api/users/demo', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can create demo users\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      const { firstName, lastName, role, organizationId, residenceId } = req.body;\n\n      // Validate demo role\n      if (!['demo_manager', 'demo_tenant', 'demo_resident'].includes(role)) {\n        return res.status(400).json({\n          message: 'Invalid demo role',\n          code: 'INVALID_ROLE',\n        });\n      }\n\n      // Validate required fields\n      if (!firstName || !lastName || !organizationId) {\n        return res.status(400).json({\n          message: 'First name, last name, and organization are required',\n          code: 'MISSING_REQUIRED_FIELDS',\n        });\n      }\n\n      // Generate demo email\n      const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@demo.com`;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({\n          message: 'Demo user with this name already exists',\n          code: 'USER_EXISTS',\n        });\n      }\n\n      // Create demo user with secure random password\n      const randomPassword = randomBytes(12).toString('base64');\n      const hashedPassword = await bcrypt.hash(`Demo${randomPassword}!`, 12);\n\n      const userData = {\n        firstName: sanitizeName(firstName),\n        lastName: sanitizeName(lastName),\n        email: normalizeEmail(email),\n        username: generateUsernameFromEmail(email),\n        password: hashedPassword,\n        language: 'fr', // Default to French for Quebec\n        role: role as any,\n        isActive: true,\n      };\n\n      const newUser = await storage.createUser(userData as InsertUser);\n\n      // Log the user creation\n      logUserCreation({\n        userId: newUser.id,\n        email: newUser.email,\n        method: 'direct',\n        role,\n        success: true,\n        timestamp: new Date(),\n      });\n\n      // Clear cache\n      queryCache.invalidate('users', 'all_users');\n\n      res.status(201).json({\n        message: 'Demo user created successfully',\n        user: {\n          id: newUser.id,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          email: newUser.email,\n          role: newUser.role,\n        },\n      });\n    } catch (error: any) {\n      console.error('❌ Error creating demo user:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to create demo user',\n      });\n    }\n  });\n\n  /**\n   * POST /api/invitations - Creates a new invitation\n   */\n  app.post('/api/invitations', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can send invitations\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      const {\n        organizationId,\n        residenceId,\n        email,\n        role,\n        invitedByUserId,\n        expiresAt,\n        personalMessage,\n      } = req.body;\n\n      // Validate required fields first\n      if (!organizationId || !email || !role || !expiresAt) {\n        return res.status(400).json({\n          message: 'Organization, email, role, and expiry date are required',\n          code: 'MISSING_REQUIRED_FIELDS',\n        });\n      }\n\n      // Then validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({\n          message: 'Invalid email format',\n          code: 'INVALID_EMAIL',\n        });\n      }\n\n      // Validate role permissions\n      if (currentUser.role === 'manager') {\n        // Check if manager is trying to invite admin\n        if (role === 'admin') {\n          return res.status(403).json({\n            message: 'Managers can only invite resident, tenant, and manager roles',\n            code: 'ROLE_PERMISSION_DENIED',\n          });\n        }\n\n        // Get the demo organization to check if it's a demo org\n        const targetOrg = await db\n          .select()\n          .from(schema.organizations)\n          .where(eq(schema.organizations.id, organizationId))\n          .limit(1);\n\n        if (targetOrg.length > 0 && targetOrg[0].type === 'Demo') {\n          // For demo organizations, allow normal roles (resident, tenant, manager)\n          if (!['resident', 'tenant', 'manager'].includes(role)) {\n            return res.status(403).json({\n              message: 'Invalid role for demo organization',\n              code: 'INVALID_DEMO_ROLE',\n            });\n          }\n        } else {\n          // For regular organizations, managers can invite resident, tenant, manager\n          if (!['resident', 'tenant', 'manager'].includes(role)) {\n            return res.status(403).json({\n              message: 'Managers can only invite resident, tenant, and manager roles',\n              code: 'ROLE_PERMISSION_DENIED',\n            });\n          }\n        }\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({\n          message: 'User with this email already exists',\n          code: 'USER_EXISTS',\n        });\n      }\n\n      // Check for existing pending invitations for the same email and organization\n      // If found, delete them to replace with new invitation\n      const existingInvitations = await db\n        .select()\n        .from(schema.invitations)\n        .where(\n          and(\n            eq(schema.invitations.email, email),\n            eq(schema.invitations.organizationId, organizationId),\n            eq(schema.invitations.status, 'pending')\n          )\n        );\n\n      if (existingInvitations.length > 0) {\n        console.log(`🔄 Replacing ${existingInvitations.length} existing invitation(s) for email: ${email}`);\n        // Delete existing pending invitations for this email/organization\n        await db\n          .delete(schema.invitations)\n          .where(\n            and(\n              eq(schema.invitations.email, email),\n              eq(schema.invitations.organizationId, organizationId),\n              eq(schema.invitations.status, 'pending')\n            )\n          );\n      }\n\n      // Generate secure invitation token\n      const token = randomBytes(32).toString('hex');\n      const tokenHash = createHash('sha256').update(token).digest('hex');\n\n      // Create invitation record\n      const invitationData = {\n        organizationId,\n        residenceId: residenceId || null,\n        email,\n        token,\n        tokenHash,\n        role: role as any,\n        invitedByUserId: currentUser.id,\n        expiresAt: new Date(expiresAt),\n        personalMessage: personalMessage || null,\n      };\n\n      const [newInvitation] = await db\n        .insert(schema.invitations)\n        .values(invitationData)\n        .returning();\n\n      // Get organization details for email\n      const [organization] = await db\n        .select()\n        .from(schema.organizations)\n        .where(eq(schema.organizations.id, organizationId))\n        .limit(1);\n\n      // Send invitation email\n      const recipientName = email.split('@')[0]; // Use email prefix as name\n      const organizationName = organization?.name || 'Koveo Gestion';\n      const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ''}`.trim();\n      \n      const emailSent = await emailService.sendInvitationEmail(\n        email,\n        recipientName,\n        token, // Use the unhashed token for the email URL\n        organizationName,\n        inviterName,\n        new Date(expiresAt),\n        'fr', // Default to French for Quebec\n        personalMessage\n      );\n\n      // Log invitation creation\n      console.log('✅ Invitation created:', {\n        id: newInvitation.id,\n        email,\n        role,\n        organizationId,\n        invitedBy: currentUser.email,\n        emailSent,\n      });\n\n      // For tests, we'll treat email failure as success since tests may not have email configured\n      if (!emailSent && process.env.NODE_ENV !== 'test') {\n        // If email failed but invitation was created, log the issue\n        console.error('⚠️ Invitation created but email failed to send');\n        return res.status(207).json({\n          message: 'Invitation created but email failed to send',\n          invitationId: newInvitation.id,\n          emailSent: false,\n        });\n      }\n\n      res.status(201).json({\n        message: 'Invitation sent successfully',\n        invitationId: newInvitation.id,\n        emailSent: true,\n      });\n    } catch (error: any) {\n      console.error('❌ Error creating invitation:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to create invitation',\n      });\n    }\n  });\n\n  /**\n   * GET /api/invitations - Gets all invitations (admin/manager only)\n   */\n  app.get('/api/invitations', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can view invitations\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      let invitations;\n      if (currentUser.role === 'admin') {\n        // Admin can see all invitations\n        invitations = await db\n          .select()\n          .from(schema.invitations)\n          .orderBy(schema.invitations.createdAt);\n      } else {\n        // Managers can only see invitations they sent\n        invitations = await db\n          .select()\n          .from(schema.invitations)\n          .where(eq(schema.invitations.invitedByUserId, currentUser.id))\n          .orderBy(schema.invitations.createdAt);\n      }\n\n      res.json(invitations);\n    } catch (error: any) {\n      console.error('❌ Error fetching invitations:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch invitations',\n      });\n    }\n  });\n\n  /**\n   * POST /api/invitations/validate - Validates an invitation token\n   * Public endpoint for invitation validation during registration\n   */\n  app.post('/api/invitations/validate', async (req: any, res) => {\n    try {\n      const { token } = req.body;\n\n      if (!token) {\n        return res.status(400).json({\n          isValid: false,\n          message: 'Token is required',\n          code: 'TOKEN_REQUIRED',\n        });\n      }\n\n      // Get invitation by token\n      const [invitation] = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.token, token))\n        .limit(1);\n\n      if (!invitation) {\n        return res.status(404).json({\n          isValid: false,\n          message: 'Invitation not found or invalid token',\n          code: 'INVITATION_NOT_FOUND',\n        });\n      }\n\n      // Check if invitation is expired\n      const now = new Date();\n      const expiresAt = new Date(invitation.expiresAt);\n      if (now > expiresAt) {\n        return res.status(400).json({\n          isValid: false,\n          message: 'Invitation has expired',\n          code: 'INVITATION_EXPIRED',\n        });\n      }\n\n      // Check if invitation is already used\n      if (invitation.status === 'accepted') {\n        return res.status(400).json({\n          isValid: false,\n          message: 'Invitation has already been used',\n          code: 'INVITATION_ALREADY_USED',\n        });\n      }\n\n      // Get organization information\n      const [organization] = await db\n        .select()\n        .from(schema.organizations)\n        .where(eq(schema.organizations.id, invitation.organizationId))\n        .limit(1);\n\n      // Get inviter information\n      const [inviter] = await db\n        .select({\n          id: schema.users.id,\n          firstName: schema.users.firstName,\n          lastName: schema.users.lastName,\n          email: schema.users.email,\n        })\n        .from(schema.users)\n        .where(eq(schema.users.id, invitation.invitedByUserId))\n        .limit(1);\n\n      // Return successful validation\n      res.json({\n        isValid: true,\n        invitation: {\n          id: invitation.id,\n          email: invitation.email,\n          role: invitation.role,\n          expiresAt: invitation.expiresAt,\n          createdAt: invitation.createdAt,\n        },\n        organizationName: organization?.name || 'Unknown Organization',\n        inviterName: inviter ? `${inviter.firstName} ${inviter.lastName}`.trim() : 'Unknown User',\n      });\n    } catch (error: any) {\n      console.error('❌ Error validating invitation:', error);\n      res.status(500).json({\n        isValid: false,\n        message: 'Internal server error during validation',\n        code: 'VALIDATION_ERROR',\n      });\n    }\n  });\n\n  /**\n   * POST /api/invitations/accept/:token - Accept an invitation and create user account\n   * Public endpoint for completing registration via invitation\n   */\n  app.post('/api/invitations/accept/:token', async (req: any, res) => {\n    try {\n      const { token } = req.params;\n      const {\n        firstName,\n        lastName,\n        password,\n        phone,\n        language,\n        dataCollectionConsent,\n        marketingConsent,\n        analyticsConsent,\n        thirdPartyConsent,\n        acknowledgedRights,\n      } = req.body;\n\n      if (!token) {\n        return res.status(400).json({\n          message: 'Token is required',\n          code: 'TOKEN_REQUIRED',\n        });\n      }\n\n      // Get invitation by token\n      const [invitation] = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.token, token))\n        .limit(1);\n\n      if (!invitation) {\n        return res.status(404).json({\n          message: 'Invitation not found or invalid token',\n          code: 'INVITATION_NOT_FOUND',\n        });\n      }\n\n      // Check if invitation is expired\n      const now = new Date();\n      const expiresAt = new Date(invitation.expiresAt);\n      if (now > expiresAt) {\n        return res.status(400).json({\n          message: 'Invitation has expired',\n          code: 'INVITATION_EXPIRED',\n        });\n      }\n\n      // Check if invitation is already used\n      if (invitation.status === 'accepted') {\n        return res.status(400).json({\n          message: 'Invitation has already been used',\n          code: 'INVITATION_ALREADY_USED',\n        });\n      }\n\n      // Validate required fields\n      if (!firstName || !lastName || !password) {\n        return res.status(400).json({\n          message: 'First name, last name, and password are required',\n          code: 'MISSING_REQUIRED_FIELDS',\n        });\n      }\n\n      // Validate required consents\n      if (!dataCollectionConsent || !acknowledgedRights) {\n        return res.status(400).json({\n          message: 'Required privacy consents must be given',\n          code: 'MISSING_REQUIRED_CONSENTS',\n        });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 12);\n\n      // Create user account\n      const userData = {\n        firstName: sanitizeName(firstName),\n        lastName: sanitizeName(lastName),\n        email: normalizeEmail(invitation.email),\n        username: generateUsernameFromEmail(invitation.email),\n        password: hashedPassword,\n        phone: phone ? sanitizeString(phone) : '',\n        language: language || 'fr',\n        role: invitation.role as any,\n        isActive: true,\n        organizationId: invitation.organizationId,\n      };\n\n      const newUser = await storage.createUser(userData as InsertUser);\n\n      // Create organization assignment if organizationId is provided\n      if (invitation.organizationId) {\n        await db.insert(schema.userOrganizations).values({\n          userId: newUser.id,\n          organizationId: invitation.organizationId,\n          organizationRole: invitation.role,\n          isActive: true,\n        });\n        console.log('✅ User assigned to organization:', {\n          userId: newUser.id,\n          organizationId: invitation.organizationId,\n          role: invitation.role,\n        });\n      }\n\n      // Create residence assignment if residenceId is provided\n      if (invitation.residenceId) {\n        await db.insert(schema.userResidences).values({\n          userId: newUser.id,\n          residenceId: invitation.residenceId,\n          relationshipType: invitation.role === 'tenant' ? 'tenant' : 'occupant',\n          startDate: new Date(),\n          isActive: true,\n        });\n        console.log('✅ User assigned to residence:', {\n          userId: newUser.id,\n          residenceId: invitation.residenceId,\n          relationshipType: invitation.role === 'tenant' ? 'tenant' : 'occupant',\n        });\n      }\n\n      // Mark invitation as accepted\n      await db\n        .update(schema.invitations)\n        .set({\n          status: 'accepted',\n          acceptedAt: new Date(),\n          acceptedBy: newUser.id,\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.invitations.id, invitation.id));\n\n      // Log user creation\n      logUserCreation({\n        userId: newUser.id,\n        email: newUser.email,\n        method: 'invitation',\n        role: invitation.role,\n        success: true,\n        timestamp: new Date(),\n      });\n\n      // Clear cache\n      queryCache.invalidate('users', 'all_users');\n      queryCache.invalidate('invitations');\n\n      console.log('✅ User created via invitation acceptance:', {\n        userId: newUser.id,\n        email: newUser.email,\n        role: newUser.role,\n        organizationId: invitation.organizationId,\n        residenceId: invitation.residenceId,\n        assignedToOrganization: !!invitation.organizationId,\n        assignedToResidence: !!invitation.residenceId,\n      });\n\n      res.status(201).json({\n        message: 'Account created successfully',\n        user: {\n          id: newUser.id,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n          email: newUser.email,\n          role: newUser.role,\n          language: newUser.language,\n        },\n      });\n    } catch (error: any) {\n      console.error('❌ Error accepting invitation:', error);\n      res.status(500).json({\n        message: 'Internal server error during account creation',\n        code: 'INVITATION_ACCEPT_ERROR',\n      });\n    }\n  });\n\n  /**\n   * POST /api/invitations/:id/resend - Resends an invitation\n   */\n  app.post('/api/invitations/:id/resend', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      const { id } = req.params;\n\n      // Get invitation\n      const [invitation] = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.id, id))\n        .limit(1);\n\n      if (!invitation) {\n        return res.status(404).json({\n          message: 'Invitation not found',\n          code: 'INVITATION_NOT_FOUND',\n        });\n      }\n\n      // Check permissions\n      if (currentUser.role !== 'admin' && invitation.invitedByUserId !== currentUser.id) {\n        return res.status(403).json({\n          message: 'Can only resend your own invitations',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      // Update invitation with new expiry\n      const newExpiresAt = new Date();\n      newExpiresAt.setDate(newExpiresAt.getDate() + 7); // Extend by 7 days\n\n      await db\n        .update(schema.invitations)\n        .set({\n          expiresAt: newExpiresAt,\n          status: 'pending',\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.invitations.id, id));\n\n      // Get organization details for email\n      const [organization] = await db\n        .select()\n        .from(schema.organizations)\n        .where(eq(schema.organizations.id, invitation.organizationId))\n        .limit(1);\n\n      // Send invitation email again\n      const recipientName = invitation.email.split('@')[0]; // Use email prefix as name\n      const organizationName = organization?.name || 'Koveo Gestion';\n      const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ''}`.trim();\n      \n      const emailSent = await emailService.sendInvitationEmail(\n        invitation.email,\n        recipientName,\n        invitation.token, // Use the existing token\n        organizationName,\n        inviterName,\n        newExpiresAt,\n        'fr', // Default to French for Quebec\n        invitation.personalMessage\n      );\n\n      console.log('✅ Invitation resent:', {\n        id,\n        email: invitation.email,\n        newExpiresAt,\n        emailSent,\n      });\n\n      if (!emailSent) {\n        console.error('⚠️ Invitation updated but email failed to resend');\n        return res.status(207).json({\n          message: 'Invitation updated but email failed to resend',\n          emailSent: false,\n        });\n      }\n\n      res.json({\n        message: 'Invitation resent successfully',\n        emailSent: true,\n      });\n    } catch (error: any) {\n      console.error('❌ Error resending invitation:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to resend invitation',\n      });\n    }\n  });\n\n  /**\n   * GET /api/invitations/pending - Get pending invitations with role-based filtering.\n   * Admin: can see all pending invitations\n   * Manager: can only see pending invitations in their organizations\n   */\n  app.get('/api/invitations/pending', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can view invitations\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions to view invitations',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      let invitationsQuery;\n\n      if (currentUser.role === 'admin') {\n        // Admin sees all pending invitations\n        invitationsQuery = db\n          .select({\n            id: schema.invitations.id,\n            email: schema.invitations.email,\n            role: schema.invitations.role,\n            status: schema.invitations.status,\n            expiresAt: schema.invitations.expiresAt,\n            createdAt: schema.invitations.createdAt,\n            organizationId: schema.invitations.organizationId,\n            buildingId: schema.invitations.buildingId,\n            residenceId: schema.invitations.residenceId,\n            organizationName: schema.organizations.name,\n            buildingName: sql<string>`buildings.name`,\n            residenceUnitNumber: sql<string>`residences.unit_number`,\n            invitedByName: sql<string>`CONCAT(users.first_name, ' ', users.last_name)`,\n          })\n          .from(schema.invitations)\n          .leftJoin(schema.organizations, eq(schema.invitations.organizationId, schema.organizations.id))\n          .leftJoin(\n            sql`buildings`,\n            sql`invitations.building_id = buildings.id`\n          )\n          .leftJoin(\n            sql`residences`,\n            sql`invitations.residence_id = residences.id`\n          )\n          .leftJoin(schema.users, eq(schema.invitations.invitedByUserId, schema.users.id))\n          .where(eq(schema.invitations.status, 'pending'));\n      } else {\n        // Manager sees only invitations for their organizations\n        const managerOrgs = await db\n          .select({ organizationId: schema.userOrganizations.organizationId })\n          .from(schema.userOrganizations)\n          .where(\n            and(\n              eq(schema.userOrganizations.userId, currentUser.id),\n              eq(schema.userOrganizations.isActive, true)\n            )\n          );\n\n        const orgIds = managerOrgs.map((org) => org.organizationId);\n\n        if (orgIds.length === 0) {\n          return res.json([]);\n        }\n\n        invitationsQuery = db\n          .select({\n            id: schema.invitations.id,\n            email: schema.invitations.email,\n            role: schema.invitations.role,\n            status: schema.invitations.status,\n            expiresAt: schema.invitations.expiresAt,\n            createdAt: schema.invitations.createdAt,\n            organizationId: schema.invitations.organizationId,\n            buildingId: schema.invitations.buildingId,\n            residenceId: schema.invitations.residenceId,\n            organizationName: schema.organizations.name,\n            buildingName: sql<string>`buildings.name`,\n            residenceUnitNumber: sql<string>`residences.unit_number`,\n            invitedByName: sql<string>`CONCAT(users.first_name, ' ', users.last_name)`,\n          })\n          .from(schema.invitations)\n          .leftJoin(schema.organizations, eq(schema.invitations.organizationId, schema.organizations.id))\n          .leftJoin(\n            sql`buildings`,\n            sql`invitations.building_id = buildings.id`\n          )\n          .leftJoin(\n            sql`residences`,\n            sql`invitations.residence_id = residences.id`\n          )\n          .leftJoin(schema.users, eq(schema.invitations.invitedByUserId, schema.users.id))\n          .where(\n            and(\n              eq(schema.invitations.status, 'pending'),\n              inArray(schema.invitations.organizationId, orgIds)\n            )\n          );\n      }\n\n      const invitations = await invitationsQuery;\n\n      res.json(invitations);\n    } catch (error: any) {\n      console.error('❌ Error fetching pending invitations:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch pending invitations',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/invitations/:id - Delete a pending invitation.\n   * Admin: can delete any invitation\n   * Manager: can only delete invitations from their organizations\n   */\n  app.delete('/api/invitations/:id', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      const { id: invitationId } = req.params;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins and managers can delete invitations\n      if (!['admin', 'manager'].includes(currentUser.role)) {\n        return res.status(403).json({\n          message: 'Insufficient permissions to delete invitations',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      if (!invitationId) {\n        return res.status(400).json({\n          message: 'Invitation ID is required',\n          code: 'INVALID_REQUEST',\n        });\n      }\n\n      // Get the invitation to check permissions\n      const invitation = await db\n        .select()\n        .from(schema.invitations)\n        .where(eq(schema.invitations.id, invitationId))\n        .limit(1);\n\n      if (invitation.length === 0) {\n        return res.status(404).json({\n          message: 'Invitation not found',\n          code: 'INVITATION_NOT_FOUND',\n        });\n      }\n\n      const invitationData = invitation[0];\n\n      // Check if manager has permission to delete this invitation\n      if (currentUser.role === 'manager') {\n        const managerOrgs = await db\n          .select({ organizationId: schema.userOrganizations.organizationId })\n          .from(schema.userOrganizations)\n          .where(\n            and(\n              eq(schema.userOrganizations.userId, currentUser.id),\n              eq(schema.userOrganizations.isActive, true)\n            )\n          );\n\n        const orgIds = managerOrgs.map((org) => org.organizationId);\n\n        if (!invitationData.organizationId || !orgIds.includes(invitationData.organizationId)) {\n          return res.status(403).json({\n            message: 'You can only delete invitations from your organizations',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n      }\n\n      // Delete the invitation\n      await db.delete(schema.invitations).where(eq(schema.invitations.id, invitationId));\n\n      res.json({\n        message: 'Invitation deleted successfully',\n        invitationId,\n      });\n    } catch (error: any) {\n      console.error('❌ Error deleting invitation:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to delete invitation',\n      });\n    }\n  });\n}\n"],"version":3}