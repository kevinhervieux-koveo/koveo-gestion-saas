2ac6aa004e5d5330bc6d1083189de21d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = OwnerRoadmap;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const header_1 = require("@/components/layout/header");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const use_toast_1 = require("@/hooks/use-toast");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const select_1 = require("@/components/ui/select");
const switch_1 = require("@/components/ui/switch");
const label_1 = require("@/components/ui/label");
const accordion_1 = require("@/components/ui/accordion");
const lucide_react_1 = require("lucide-react");
const react_query_1 = require("@tanstack/react-query");
const queryClient_1 = require("@/lib/queryClient");
const forms_1 = require("@/components/forms");
const feature_duplicate_analysis_1 = require("@/components/roadmap/feature-duplicate-analysis");
const llm_help_form_1 = require("@/components/roadmap/llm-help-form");
const feature_status_badges_1 = require("@/components/roadmap/feature-status-badges");
/**
 * Owner roadmap page displaying all features with planning capabilities.
 * Users can click on any feature to open a detailed planning dialog.
 */
function OwnerRoadmap() {
    const { toast } = (0, use_toast_1.useToast)();
    // Status change mutation
    const statusMutation = (0, react_query_1.useMutation)({
        mutationFn: ({ featureId, status }) => (0, queryClient_1.apiRequest)('POST', `/api/features/${featureId}/update-status`, { status }),
        onSuccess: () => {
            toast({
                title: 'Status Updated',
                description: 'Feature status has been updated successfully.',
            });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/features'] });
        },
        onError: () => {
            toast({
                title: 'Error',
                description: 'Failed to update feature status.',
                variant: 'destructive',
            });
        },
    });
    // Actionable item status update mutation
    const actionableItemMutation = (0, react_query_1.useMutation)({
        mutationFn: ({ itemId, status }) => (0, queryClient_1.apiRequest)('PUT', `/api/actionable-items/${itemId}`, {
            status,
            completedAt: status === 'completed' ? new Date() : null,
        }),
        onSuccess: () => {
            toast({
                title: 'Task Updated',
                description: 'Actionable item status has been updated successfully.',
            });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/features'] });
            // Note: Individual actionable items will invalidate their own queries
        },
        onError: () => {
            toast({
                title: 'Error',
                description: 'Failed to update actionable item status.',
                variant: 'destructive',
            });
        },
    });
    // Strategic path toggle mutation
    const strategicMutation = (0, react_query_1.useMutation)({
        mutationFn: ({ featureId, isStrategicPath }) => (0, queryClient_1.apiRequest)('POST', `/api/features/${featureId}/toggle-strategic`, { isStrategicPath }),
        onSuccess: () => {
            toast({
                title: 'Strategic Path Updated',
                description: 'Feature strategic path status has been updated.',
            });
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/features'] });
        },
        onError: () => {
            toast({
                title: 'Error',
                description: 'Failed to update strategic path status.',
                variant: 'destructive',
            });
        },
    });
    // Sync mutation for manual synchronization
    const syncMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            const response = await fetch('/api/features/trigger-sync', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to sync features');
            }
            return response.json();
        },
        onSuccess: (data) => {
            toast({
                title: 'Sync Completed',
                description: data.message || 'All features have been synchronized to production.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Sync Failed',
                description: error.message || 'Failed to synchronize features to production.',
                variant: 'destructive',
            });
        },
    });
    const [selectedFeature, setSelectedFeature] = (0, react_1.useState)(null);
    const [dialogOpen, setDialogOpen] = (0, react_1.useState)(false);
    const [expandedSections, setExpandedSections] = (0, react_1.useState)([]);
    const [expandedFeatures, setExpandedFeatures] = (0, react_1.useState)([]);
    const [actionableItems, setActionableItems] = (0, react_1.useState)({});
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    // Fetch features from the database
    const { data: features = [], isLoading, error, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/features', 'roadmap'],
        queryFn: async () => {
            const res = await fetch('/api/features?roadmap=true', {
                credentials: 'include',
            });
            if (!res.ok) {
                throw new Error(`HTTP ${res.status}: ${res.statusText}`);
            }
            return res.json();
        },
    });
    // Minimal debug logging only for actual errors
    /**
     * Fetches actionable items for a specific feature.
     */
    const fetchActionableItems = (0, react_1.useCallback)(async (featureId) => {
        // Check if already fetched to prevent duplicate requests
        setActionableItems((prev) => {
            if (prev[featureId]) {
                return prev; // Already fetched, don't update state
            }
            // Set as loading/empty to prevent duplicate requests
            return { ...prev, [featureId]: [] };
        });
        try {
            const response = await fetch(`/api/features/${featureId}/actionable-items`);
            if (response.ok) {
                const items = await response.json();
                setActionableItems((current) => ({ ...current, [featureId]: items }));
            }
            else {
                // Failed to fetch actionable items
            }
        }
        catch (error) {
            // Error fetching actionable items
        }
    }, []);
    /**
     * Copies text to clipboard with toast feedback.
     * @param prompt
     */
    const handleCopyPrompt = async (prompt) => {
        try {
            await navigator.clipboard.writeText(prompt);
            toast({
                title: 'Prompt copied!',
                description: 'The implementation prompt has been copied to your clipboard.',
            });
        }
        catch (error) {
            // Error copying to clipboard
            toast({
                title: 'Failed to copy',
                description: 'Could not copy the prompt to clipboard.',
                variant: 'destructive',
            });
        }
    };
    /**
     * Handles toggling actionable item status between pending and completed.
     * @param item
     */
    const handleToggleActionableItem = (item) => {
        const newStatus = item.status === 'completed' ? 'pending' : 'completed';
        actionableItemMutation.mutate({ itemId: item.id, status: newStatus });
    };
    /**
     * Handles updating actionable item status via dropdown.
     * @param item
     * @param newStatus
     */
    const handleActionableItemStatusChange = (item, newStatus) => {
        actionableItemMutation.mutate({ itemId: item.id, status: newStatus });
    };
    /**
     * Toggles feature expansion and fetches actionable items if needed.
     * @param featureId
     */
    const toggleFeatureExpansion = (0, react_1.useCallback)((featureId) => {
        setExpandedFeatures((prev) => {
            const isExpanded = prev.includes(featureId);
            if (isExpanded) {
                return prev.filter((id) => id !== featureId);
            }
            else {
                // Fetch actionable items when expanding
                fetchActionableItems(featureId);
                return [...prev, featureId];
            }
        });
    }, [fetchActionableItems]);
    // Use the duplicate analysis hook
    const { duplicateAnalysis, duplicateStats } = (0, feature_duplicate_analysis_1.useFeatureDuplicateAnalysis)(features);
    /**
     * Handles clicking on a feature item to open the planning dialog.
     * @param feature
     */
    const handleFeatureClick = (feature) => {
        setSelectedFeature(feature);
        setDialogOpen(true);
    };
    /**
     * Handles creating a new feature item.
     */
    const handleCreateNewItem = () => {
        setSelectedFeature(null);
        setDialogOpen(true);
    };
    /**
     * Copies LLM help form to clipboard for feature discussion.
     */
    const handleCopyLLMForm = async () => {
        try {
            await navigator.clipboard.writeText((0, llm_help_form_1.generateLLMHelpForm)());
            toast({
                title: 'Enhanced LLM Help Form Copied',
                description: 'The enhanced feature discussion form with Koveo Gestion context has been copied. The LLM will focus specifically on your requirements.',
                duration: 3000,
            });
        }
        catch (error) {
            // Error copying LLM form
            toast({
                title: 'Copy Failed',
                description: 'Failed to copy the form to clipboard.',
                variant: 'destructive',
            });
        }
    };
    // Filter features based on search term
    const filteredFeatures = (0, react_1.useMemo)(() => {
        if (!searchTerm.trim()) {
            return features;
        }
        const searchLower = searchTerm.toLowerCase().trim();
        return features.filter((feature) => feature.name.toLowerCase().includes(searchLower) ||
            feature.description?.toLowerCase().includes(searchLower) ||
            feature.category.toLowerCase().includes(searchLower));
    }, [features, searchTerm]);
    // Group features by category and strategic path
    const groupedFeatures = filteredFeatures.reduce((acc, feature) => {
        // Handle Strategic Path as a special case
        if (feature.isStrategicPath) {
            if (!acc['Strategic Path']) {
                acc['Strategic Path'] = [];
            }
            acc['Strategic Path'].push(feature);
        }
        // Also group by category
        if (!acc[feature.category]) {
            acc[feature.category] = [];
        }
        acc[feature.category].push(feature);
        return acc;
    }, {});
    // Debug logging
    const sections = [
        {
            title: 'Strategic Path',
            icon: lucide_react_1.Target,
            description: 'High-level strategic initiatives and business objectives',
            features: groupedFeatures['Strategic Path'] || [],
        },
        {
            title: 'Dashboard & Home',
            icon: lucide_react_1.Home,
            description: 'Central hub for property management overview',
            features: groupedFeatures['Dashboard & Home'] || [],
        },
        {
            title: 'Property Management',
            icon: lucide_react_1.Building,
            description: 'Building and residence management features',
            features: groupedFeatures['Property Management'] || [],
        },
        {
            title: 'Resident Management',
            icon: lucide_react_1.Users,
            description: 'Resident and tenant management system',
            features: groupedFeatures['Resident Management'] || [],
        },
        {
            title: 'Financial Management',
            icon: lucide_react_1.DollarSign,
            description: 'Comprehensive financial and billing system',
            features: groupedFeatures['Financial Management'] || [],
        },
        {
            title: 'Maintenance & Requests',
            icon: lucide_react_1.Wrench,
            description: 'Maintenance request and work order management',
            features: groupedFeatures['Maintenance & Requests'] || [],
        },
        {
            title: 'Document Management',
            icon: lucide_react_1.FileText,
            description: 'Centralized document storage and management',
            features: groupedFeatures['Document Management'] || [],
        },
        {
            title: 'Communication',
            icon: lucide_react_1.Bell,
            description: 'Multi-channel communication system',
            features: groupedFeatures.Communication || [],
        },
        {
            title: 'AI & Automation',
            icon: lucide_react_1.Bot,
            description: 'Artificial intelligence and automation features',
            features: groupedFeatures['AI & Automation'] || [],
        },
        {
            title: 'Compliance & Security',
            icon: lucide_react_1.Shield,
            description: 'Quebec Law 25 compliance and security features',
            features: groupedFeatures['Compliance & Security'] || [],
        },
        {
            title: 'Analytics & Reporting',
            icon: lucide_react_1.BarChart3,
            description: 'Business intelligence and reporting tools',
            features: groupedFeatures['Analytics & Reporting'] || [],
        },
        {
            title: 'Integration & API',
            icon: lucide_react_1.Database,
            description: 'Third-party integrations and API access',
            features: groupedFeatures['Integration & API'] || [],
        },
        {
            title: 'Infrastructure & Performance',
            icon: lucide_react_1.Cloud,
            description: 'Platform infrastructure and optimization',
            features: groupedFeatures['Infrastructure & Performance'] || [],
        },
        {
            title: 'Website',
            icon: lucide_react_1.Globe,
            description: 'Website features, SEO, and automation tools',
            features: groupedFeatures.Website || [],
        },
    ];
    const calculateProgress = (_features) => {
        const completed = _features.filter((f) => f.status === 'completed').length;
        const inProgress = _features.filter((f) => f.status === 'in-progress').length;
        const total = _features.length;
        const progress = total > 0 ? ((completed + inProgress * 0.5) / total) * 100 : 0;
        return {
            completed,
            inProgress,
            planned: _features.filter((f) => f.status === 'planned').length,
            progress: Math.round(progress),
        };
    };
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Product Roadmap', subtitle: 'Loading roadmap data...' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-12 w-12 border-b-2 border-koveo-navy mx-auto' }), (0, jsx_runtime_1.jsx)("p", { className: 'mt-4 text-gray-600', children: "Loading features..." })] }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Product Roadmap', subtitle: 'Complete feature list and development progress (Live Data)' }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-white border-b px-6 py-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'relative max-w-md', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4' }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'text', placeholder: 'Search features by name, description, or category...', value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: 'pl-10 pr-4' })] }), searchTerm && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-2 text-sm text-gray-600', children: ["Found ", filteredFeatures.length, " feature", filteredFeatures.length !== 1 ? 's' : '', ' ', "matching \"", searchTerm, "\"", filteredFeatures.length !== features.length && ((0, jsx_runtime_1.jsx)("button", { onClick: () => setSearchTerm(''), className: 'ml-2 text-blue-600 hover:text-blue-800 underline', children: "Clear search" }))] }))] }), (0, jsx_runtime_1.jsx)("div", { className: 'border-b bg-gray-50 px-6 py-3', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-7xl mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm text-gray-600', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Terminal, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)("span", { className: 'font-medium', children: "Refresh Command:" }), (0, jsx_runtime_1.jsx)("code", { className: 'bg-gray-100 px-2 py-1 rounded text-xs font-mono', children: "npm run validate" })] }) }) }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsx)(card_1.Card, { className: 'bg-blue-50 border-blue-200', children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Database, { className: 'w-4 h-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-blue-800', children: "Automatic Synchronization" })] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-xs text-blue-600', children: process.env.NODE_ENV === 'development'
                                                    ? 'DEV → PROD Sync Enabled'
                                                    : 'Production Environment' })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-blue-700 mt-2', children: process.env.NODE_ENV === 'development'
                                            ? 'New feature requests automatically appear as "Submitted" status and sync to production. Updates to roadmap features are automatically synchronized.'
                                            : 'This is the production roadmap. Changes are synchronized from the development environment.' })] }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-end gap-3 mb-6', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCopyLLMForm, variant: 'outline', className: 'border-purple-200 text-purple-700 hover:bg-purple-50', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MessageCircle, { className: 'w-4 h-4 mr-2' }), "LLM Help Form"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => syncMutation.mutate(), variant: 'outline', disabled: syncMutation.isPending, className: 'border-blue-200 text-blue-700 hover:bg-blue-50', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Database, { className: 'w-4 h-4 mr-2' }), syncMutation.isPending ? 'Syncing...' : 'Sync to Production'] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCreateNewItem, className: 'bg-koveo-navy hover:bg-koveo-navy/90', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4 mr-2' }), "Create New Item"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-6 gap-4 mb-6', children: [(0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-green-600', children: sections.reduce((acc, s) => acc + s.features.filter((f) => f.status === 'completed').length, 0) }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: "Completed Features" })] }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-blue-600', children: sections.reduce((acc, s) => acc + s.features.filter((f) => f.status === 'in-progress').length, 0) }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: "In Progress" })] }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-gray-600', children: sections.reduce((acc, s) => acc + s.features.filter((f) => f.status === 'planned').length, 0) }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: "Planned Features" })] }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-koveo-navy', children: sections.reduce((acc, s) => acc + s.features.length, 0) }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: "Total Features" })] }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-red-600', children: duplicateStats.totalExact }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: "Exact Duplicates" })] }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-2xl font-bold text-orange-600', children: duplicateStats.totalSimilar }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: "Similar Features" })] }) })] }), (0, jsx_runtime_1.jsx)(accordion_1.Accordion, { type: 'multiple', value: expandedSections, onValueChange: setExpandedSections, className: 'space-y-4', children: sections.map((section) => {
                                const SectionIcon = section.icon;
                                const stats = calculateProgress(section.features);
                                return ((0, jsx_runtime_1.jsxs)(accordion_1.AccordionItem, { value: section.title, className: 'border rounded-lg overflow-hidden', children: [(0, jsx_runtime_1.jsx)(accordion_1.AccordionTrigger, { className: 'hover:no-underline', children: (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'w-full shadow-none border-none', children: (0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'bg-gray-50', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-10 h-10 bg-koveo-navy rounded-lg flex items-center justify-center', children: (0, jsx_runtime_1.jsx)(SectionIcon, { className: 'w-5 h-5 text-white' }) }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-lg text-left', children: section.title }), (0, jsx_runtime_1.jsx)(card_1.CardDescription, { className: 'mt-1 text-left', children: section.description })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-right', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'text-2xl font-bold text-koveo-navy', children: [stats.progress, "%"] }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-gray-500', children: [stats.completed, "/", section.features.length, " complete"] })] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'mt-4', children: (0, jsx_runtime_1.jsx)("div", { className: 'w-full bg-gray-200 rounded-full h-2 overflow-hidden', children: (0, jsx_runtime_1.jsx)("div", { className: 'h-full bg-gradient-to-r from-green-500 to-green-600 transition-all duration-500', style: { width: `${stats.progress}%` } }) }) })] }) }) }), (0, jsx_runtime_1.jsx)(accordion_1.AccordionContent, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-0 bg-white', children: (0, jsx_runtime_1.jsx)("div", { className: 'divide-y divide-gray-100', children: section.features.length === 0 ? ((0, jsx_runtime_1.jsxs)("div", { className: 'p-8 text-center text-gray-500', children: [(0, jsx_runtime_1.jsx)("div", { className: 'mb-2', children: "No features in this category yet" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: (e) => {
                                                                    e.stopPropagation();
                                                                    handleCreateNewItem();
                                                                }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4 mr-1' }), "Add First Feature"] })] })) : (section.features.map((feature) => {
                                                        const isExpanded = expandedFeatures.includes(feature.id || feature.name);
                                                        const items = actionableItems[feature.id || feature.name] || [];
                                                        return ((0, jsx_runtime_1.jsxs)("div", { className: 'border-l-4 border-transparent hover:border-blue-400', children: [(0, jsx_runtime_1.jsx)("div", { className: 'p-4 hover:bg-blue-50 transition-colors', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, feature_status_badges_1.getStatusIcon)(feature.status), (0, jsx_runtime_1.jsx)("button", { onClick: (e) => {
                                                                                            e.stopPropagation();
                                                                                            toggleFeatureExpansion(feature.id || feature.name);
                                                                                        }, className: 'p-1 hover:bg-gray-200 rounded transition-colors', children: isExpanded ? ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: 'w-4 h-4 text-gray-500' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: 'w-4 h-4 text-gray-500' })) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center flex-wrap', children: [(0, jsx_runtime_1.jsx)("span", { className: 'font-medium text-gray-900 hover:text-blue-600 transition-colors cursor-pointer', onClick: () => handleFeatureClick(feature), children: feature.name }), (0, feature_status_badges_1.getStatusBadge)(feature.status), feature.priority && (0, feature_status_badges_1.getPriorityBadge)(feature.priority), (0, feature_duplicate_analysis_1.getDuplicateBadge)(feature.id || feature.name, undefined), items.length > 0 && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: 'bg-purple-100 text-purple-800 hover:bg-purple-100 ml-2 text-xs', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ListTodo, { className: 'w-3 h-3 mr-1' }), items.length, " ", items.length === 1 ? 'task' : 'tasks'] })), feature.isStrategicPath && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { className: 'bg-orange-100 text-orange-800 hover:bg-orange-100 ml-2 text-xs', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Target, { className: 'w-3 h-3 mr-1' }), "Strategic"] }))] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 mt-1', children: feature.description }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 mt-3 pt-2 border-t border-gray-100', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `status-${feature.id}`, className: 'text-xs text-gray-600', children: "Status:" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: feature.status, onValueChange: (value) => statusMutation.mutate({
                                                                                                            featureId: feature.id,
                                                                                                            status: value,
                                                                                                        }), disabled: statusMutation.isPending, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: `status-${feature.id}`, className: 'w-32 h-7 text-xs', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'submitted', children: "Submitted" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'planned', children: "Planned" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in-progress', children: "In Progress" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'ai-analyzed', children: "AI Analyzed" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'completed', children: "Completed" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'cancelled', children: "Cancelled" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `strategic-${feature.id}`, className: 'text-xs text-gray-600', children: "Strategic Path:" }), (0, jsx_runtime_1.jsx)(switch_1.Switch, { id: `strategic-${feature.id}`, checked: feature.isStrategicPath || false, onCheckedChange: (checked) => strategicMutation.mutate({
                                                                                                            featureId: feature.id,
                                                                                                            isStrategicPath: checked,
                                                                                                        }), disabled: strategicMutation.isPending, className: 'scale-75' })] })] }), (0, feature_duplicate_analysis_1.getDuplicateNote)(feature.id || feature.name, undefined) && ((0, jsx_runtime_1.jsx)("div", { className: 'mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs text-yellow-800', children: (0, feature_duplicate_analysis_1.getDuplicateNote)(feature.id || feature.name, undefined) }))] })] }) }), isExpanded && ((0, jsx_runtime_1.jsx)("div", { className: 'bg-gray-50 border-t border-gray-200', children: items.length === 0 ? ((0, jsx_runtime_1.jsxs)("div", { className: 'p-4 text-center text-gray-500 text-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ListTodo, { className: 'w-6 h-6 mx-auto mb-2 text-gray-400' }), "No actionable items yet.", (0, jsx_runtime_1.jsx)("br", {}), (0, jsx_runtime_1.jsx)("span", { className: 'text-xs', children: "Generate a development prompt to create tasks." })] })) : ((0, jsx_runtime_1.jsx)("div", { className: 'divide-y divide-gray-200', children: items.map((item, _index) => ((0, jsx_runtime_1.jsx)("div", { className: 'p-3 pl-12 hover:bg-white transition-colors', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start space-x-3', children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => handleToggleActionableItem(item), className: 'p-1 hover:bg-gray-100 rounded transition-colors', title: `Mark as ${item.status === 'completed' ? 'pending' : 'completed'}`, children: (0, feature_status_badges_1.getActionableItemStatusIcon)(item.status) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-gray-900', children: item.title }), (0, feature_status_badges_1.getActionableItemStatusBadge)(item.status), item.estimatedEffort && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: item.estimatedEffort }))] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-2', children: (0, jsx_runtime_1.jsxs)(select_1.Select, { value: item.status, onValueChange: (_value) => handleActionableItemStatusChange(item, _value), disabled: actionableItemMutation.isPending, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-24 h-6 text-xs', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'pending', children: "Todo" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'in-progress', children: "Working" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'completed', children: "Done" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'blocked', children: "Blocked" })] })] }) })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-600 mt-1', children: item.description }), item.technicalDetails && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500 mt-1', children: [(0, jsx_runtime_1.jsx)("strong", { children: "Technical:" }), ' ', item.technicalDetails] })), item.implementationPrompt && ((0, jsx_runtime_1.jsx)("div", { className: 'mt-2 p-2 bg-blue-50 border border-blue-200 rounded', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-xs font-medium text-blue-900 mb-1', children: "Replit AI Agent Prompt:" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-blue-800 whitespace-pre-wrap font-mono', children: item.implementationPrompt })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', className: 'ml-2 h-6 px-2', onClick: () => handleCopyPrompt(item.implementationPrompt || ''), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Copy, { className: 'w-3 h-3 mr-1' }), "Copy"] })] }) }))] })] }) }, item.id || _index))) })) }))] }, feature.id || feature.name));
                                                    })) }) }) })] }, section.title));
                            }) })] }) }), (0, jsx_runtime_1.jsx)(forms_1.FeatureForm, { feature: selectedFeature, open: dialogOpen, onOpenChange: setDialogOpen })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,