1f6a23e54370c16a34a2c319545d9230
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMulti = useMulti;
const useControlledValue_js_1 = require("../helpers/useControlledValue.js");
/**
 * Hook to manage multiple-date selection in the DayPicker component.
 *
 * @template T - The type of DayPicker props.
 * @param props - The DayPicker props.
 * @param dateLib - The date utility library instance.
 * @returns An object containing the selected dates, a function to select dates,
 *   and a function to check if a date is selected.
 */
function useMulti(props, dateLib) {
    const { selected: initiallySelected, required, onSelect, } = props;
    const [internallySelected, setSelected] = (0, useControlledValue_js_1.useControlledValue)(initiallySelected, onSelect ? initiallySelected : undefined);
    const selected = !onSelect ? internallySelected : initiallySelected;
    const { isSameDay } = dateLib;
    const isSelected = (date) => {
        return selected?.some((d) => isSameDay(d, date)) ?? false;
    };
    const { min, max } = props;
    const select = (triggerDate, modifiers, e) => {
        let newDates = [...(selected ?? [])];
        if (isSelected(triggerDate)) {
            if (selected?.length === min) {
                // Min value reached, do nothing
                return;
            }
            if (required && selected?.length === 1) {
                // Required value already selected do nothing
                return;
            }
            newDates = selected?.filter((d) => !isSameDay(d, triggerDate));
        }
        else {
            if (selected?.length === max) {
                // Max value reached, reset the selection to date
                newDates = [triggerDate];
            }
            else {
                // Add the date to the selection
                newDates = [...newDates, triggerDate];
            }
        }
        if (!onSelect) {
            setSelected(newDates);
        }
        onSelect?.(newDates, triggerDate, modifiers, e);
        return newDates;
    };
    return {
        selected,
        select,
        isSelected,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9zZWxlY3Rpb24vdXNlTXVsdGkuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDNUIsTUFBTSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQUM1RTs7Ozs7Ozs7R0FRRztBQUNILFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPO0lBQzVCLE1BQU0sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLFFBQVEsR0FBRyxHQUFHLEtBQUssQ0FBQztJQUNuRSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsdUJBQXVCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2SixNQUFNLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO0lBQ3BFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDOUIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUN4QixPQUFPLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUM7SUFDOUQsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3pDLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDMUIsSUFBSSxRQUFRLEVBQUUsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO2dCQUMzQixnQ0FBZ0M7Z0JBQ2hDLE9BQU87WUFDWCxDQUFDO1lBQ0QsSUFBSSxRQUFRLElBQUksUUFBUSxFQUFFLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDckMsNkNBQTZDO2dCQUM3QyxPQUFPO1lBQ1gsQ0FBQztZQUNELFFBQVEsR0FBRyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNuRSxDQUFDO2FBQ0ksQ0FBQztZQUNGLElBQUksUUFBUSxFQUFFLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDM0IsaURBQWlEO2dCQUNqRCxRQUFRLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM3QixDQUFDO2lCQUNJLENBQUM7Z0JBQ0YsZ0NBQWdDO2dCQUNoQyxRQUFRLEdBQUcsQ0FBQyxHQUFHLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUMxQyxDQUFDO1FBQ0wsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNaLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQixDQUFDO1FBQ0QsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0lBQ0YsT0FBTztRQUNILFFBQVE7UUFDUixNQUFNO1FBQ04sVUFBVTtLQUNiLENBQUM7QUFDTixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL3JlYWN0LWRheS1waWNrZXIvZGlzdC9janMvc2VsZWN0aW9uL3VzZU11bHRpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VNdWx0aSA9IHVzZU11bHRpO1xuY29uc3QgdXNlQ29udHJvbGxlZFZhbHVlX2pzXzEgPSByZXF1aXJlKFwiLi4vaGVscGVycy91c2VDb250cm9sbGVkVmFsdWUuanNcIik7XG4vKipcbiAqIEhvb2sgdG8gbWFuYWdlIG11bHRpcGxlLWRhdGUgc2VsZWN0aW9uIGluIHRoZSBEYXlQaWNrZXIgY29tcG9uZW50LlxuICpcbiAqIEB0ZW1wbGF0ZSBUIC0gVGhlIHR5cGUgb2YgRGF5UGlja2VyIHByb3BzLlxuICogQHBhcmFtIHByb3BzIC0gVGhlIERheVBpY2tlciBwcm9wcy5cbiAqIEBwYXJhbSBkYXRlTGliIC0gVGhlIGRhdGUgdXRpbGl0eSBsaWJyYXJ5IGluc3RhbmNlLlxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHNlbGVjdGVkIGRhdGVzLCBhIGZ1bmN0aW9uIHRvIHNlbGVjdCBkYXRlcyxcbiAqICAgYW5kIGEgZnVuY3Rpb24gdG8gY2hlY2sgaWYgYSBkYXRlIGlzIHNlbGVjdGVkLlxuICovXG5mdW5jdGlvbiB1c2VNdWx0aShwcm9wcywgZGF0ZUxpYikge1xuICAgIGNvbnN0IHsgc2VsZWN0ZWQ6IGluaXRpYWxseVNlbGVjdGVkLCByZXF1aXJlZCwgb25TZWxlY3QsIH0gPSBwcm9wcztcbiAgICBjb25zdCBbaW50ZXJuYWxseVNlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSAoMCwgdXNlQ29udHJvbGxlZFZhbHVlX2pzXzEudXNlQ29udHJvbGxlZFZhbHVlKShpbml0aWFsbHlTZWxlY3RlZCwgb25TZWxlY3QgPyBpbml0aWFsbHlTZWxlY3RlZCA6IHVuZGVmaW5lZCk7XG4gICAgY29uc3Qgc2VsZWN0ZWQgPSAhb25TZWxlY3QgPyBpbnRlcm5hbGx5U2VsZWN0ZWQgOiBpbml0aWFsbHlTZWxlY3RlZDtcbiAgICBjb25zdCB7IGlzU2FtZURheSB9ID0gZGF0ZUxpYjtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gKGRhdGUpID0+IHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkPy5zb21lKChkKSA9PiBpc1NhbWVEYXkoZCwgZGF0ZSkpID8/IGZhbHNlO1xuICAgIH07XG4gICAgY29uc3QgeyBtaW4sIG1heCB9ID0gcHJvcHM7XG4gICAgY29uc3Qgc2VsZWN0ID0gKHRyaWdnZXJEYXRlLCBtb2RpZmllcnMsIGUpID0+IHtcbiAgICAgICAgbGV0IG5ld0RhdGVzID0gWy4uLihzZWxlY3RlZCA/PyBbXSldO1xuICAgICAgICBpZiAoaXNTZWxlY3RlZCh0cmlnZ2VyRGF0ZSkpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZD8ubGVuZ3RoID09PSBtaW4pIHtcbiAgICAgICAgICAgICAgICAvLyBNaW4gdmFsdWUgcmVhY2hlZCwgZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXF1aXJlZCAmJiBzZWxlY3RlZD8ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVxdWlyZWQgdmFsdWUgYWxyZWFkeSBzZWxlY3RlZCBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3RGF0ZXMgPSBzZWxlY3RlZD8uZmlsdGVyKChkKSA9PiAhaXNTYW1lRGF5KGQsIHRyaWdnZXJEYXRlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWQ/Lmxlbmd0aCA9PT0gbWF4KSB7XG4gICAgICAgICAgICAgICAgLy8gTWF4IHZhbHVlIHJlYWNoZWQsIHJlc2V0IHRoZSBzZWxlY3Rpb24gdG8gZGF0ZVxuICAgICAgICAgICAgICAgIG5ld0RhdGVzID0gW3RyaWdnZXJEYXRlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgZGF0ZSB0byB0aGUgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgbmV3RGF0ZXMgPSBbLi4ubmV3RGF0ZXMsIHRyaWdnZXJEYXRlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9uU2VsZWN0KSB7XG4gICAgICAgICAgICBzZXRTZWxlY3RlZChuZXdEYXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgb25TZWxlY3Q/LihuZXdEYXRlcywgdHJpZ2dlckRhdGUsIG1vZGlmaWVycywgZSk7XG4gICAgICAgIHJldHVybiBuZXdEYXRlcztcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHNlbGVjdGVkLFxuICAgICAgICBzZWxlY3QsXG4gICAgICAgIGlzU2VsZWN0ZWQsXG4gICAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==