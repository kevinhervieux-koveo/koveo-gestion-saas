ecee951f37cf5bb94202437fc7a62252
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock WebSocket constructor for Jest environment
jest.mock('ws', () => ({
    __esModule: true,
    default: class MockWebSocket {
    }
}));
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
/**
 * Database Permissions and Access Control Security Tests
 *
 * Validates that:
 * - Users can only access data within their organization
 * - Role-based access controls are properly enforced
 * - Cross-organization data leakage is prevented
 * - Sensitive data is protected according to user roles
 */
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('Database Permissions Security', () => {
    let app;
    let org1, org2;
    let admin1, manager1, resident1;
    let admin2, manager2, resident2;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clean up test data
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-admin1@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-admin2@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-manager1@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-manager2@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-resident1@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-resident2@test.com'));
        // Create test organizations
        [org1] = await db_1.db.insert(schema.organizations).values({
            name: 'Security Test Org 1',
            type: 'syndicate',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
        }).returning();
        [org2] = await db_1.db.insert(schema.organizations).values({
            name: 'Security Test Org 2',
            type: 'syndicate',
            address: '456 Test Ave',
            city: 'Quebec',
            province: 'QC',
            postalCode: 'G1A 1A1',
        }).returning();
        // Create users in different organizations with different roles
        [admin1] = await db_1.db.insert(schema.users).values({
            username: 'admin1',
            email: 'dbperm-admin1@test.com',
            firstName: 'Admin',
            lastName: 'One',
            password: await bcryptjs_1.default.hash('password123', 12),
            role: 'admin',
            organizationId: org1.id,
        }).returning();
        [manager1] = await db_1.db.insert(schema.users).values({
            username: 'manager1',
            email: 'dbperm-manager1@test.com',
            firstName: 'Manager',
            lastName: 'One',
            password: await bcryptjs_1.default.hash('password123', 12),
            role: 'manager',
            organizationId: org1.id,
        }).returning();
        [resident1] = await db_1.db.insert(schema.users).values({
            username: 'resident1',
            email: 'dbperm-resident1@test.com',
            firstName: 'Resident',
            lastName: 'One',
            password: await bcryptjs_1.default.hash('password123', 12),
            role: 'resident',
            organizationId: org1.id,
        }).returning();
        [admin2] = await db_1.db.insert(schema.users).values({
            username: 'admin2',
            email: 'dbperm-admin2@test.com',
            firstName: 'Admin',
            lastName: 'Two',
            password: await bcryptjs_1.default.hash('password123', 12),
            role: 'admin',
            organizationId: org2.id,
        }).returning();
        [manager2] = await db_1.db.insert(schema.users).values({
            username: 'manager2',
            email: 'dbperm-manager2@test.com',
            firstName: 'Manager',
            lastName: 'Two',
            password: await bcryptjs_1.default.hash('password123', 12),
            role: 'manager',
            organizationId: org2.id,
        }).returning();
        [resident2] = await db_1.db.insert(schema.users).values({
            username: 'resident2',
            email: 'dbperm-resident2@test.com',
            firstName: 'Resident',
            lastName: 'Two',
            password: await bcryptjs_1.default.hash('password123', 12),
            role: 'resident',
            organizationId: org2.id,
        }).returning();
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-admin1@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-admin2@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-manager1@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-manager2@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-resident1@test.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'dbperm-resident2@test.com'));
        if (org1?.id)
            await db_1.db.delete(schema.organizations).where((0, drizzle_orm_1.eq)(schema.organizations.id, org1.id));
        if (org2?.id)
            await db_1.db.delete(schema.organizations).where((0, drizzle_orm_1.eq)(schema.organizations.id, org2.id));
    });
    (0, globals_1.describe)('Cross-Organization Access Prevention', () => {
        (0, globals_1.it)('should prevent users from accessing data in other organizations', async () => {
            // Attempt to login as user from org1 and access org2 data
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'manager1',
                password: 'password123',
            });
            (0, globals_1.expect)(loginResponse.status).toBe(200);
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Try to access users from org2 (should be forbidden)
            const usersResponse = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Cookie', sessionCookie)
                .query({ organizationId: org2.id });
            (0, globals_1.expect)(usersResponse.status).toBe(403);
        });
        (0, globals_1.it)('should prevent cross-organization building access', async () => {
            // Create buildings in both organizations
            const [building1] = await db_1.db.insert(schema.buildings).values({
                name: 'Org 1 Building',
                address: '123 Org1 St',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1A 1A1',
                organizationId: org1.id,
            }).returning();
            const [building2] = await db_1.db.insert(schema.buildings).values({
                name: 'Org 2 Building',
                address: '456 Org2 Ave',
                city: 'Quebec',
                province: 'QC',
                postalCode: 'G1A 1A1',
                organizationId: org2.id,
            }).returning();
            // Login as org1 user
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'manager1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Try to access org2 building (should fail)
            const buildingResponse = await (0, supertest_1.default)(app)
                .get(`/api/buildings/${building2.id}`)
                .set('Cookie', sessionCookie);
            (0, globals_1.expect)(buildingResponse.status).toBe(403);
            // Clean up
            await db_1.db.delete(schema.buildings).where((0, drizzle_orm_1.eq)(schema.buildings.id, building1.id));
            await db_1.db.delete(schema.buildings).where((0, drizzle_orm_1.eq)(schema.buildings.id, building2.id));
        });
    });
    (0, globals_1.describe)('Role-Based Data Access', () => {
        (0, globals_1.it)('should enforce document access based on user roles', async () => {
            // Test document access permissions by role
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'resident1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Resident should not be able to access admin documents
            const adminDocsResponse = await (0, supertest_1.default)(app)
                .get('/api/documents')
                .set('Cookie', sessionCookie)
                .query({ category: 'administrative' });
            // Verify access is properly restricted
            (0, globals_1.expect)(adminDocsResponse.status).toBe(200);
            // Residents should only see documents they have access to
        });
        (0, globals_1.it)('should prevent privilege escalation attempts', async () => {
            // Login as resident
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'resident1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Try to update own role (should fail)
            const roleUpdateResponse = await (0, supertest_1.default)(app)
                .patch(`/api/users/${resident1.id}`)
                .set('Cookie', sessionCookie)
                .send({
                role: 'admin'
            });
            (0, globals_1.expect)(roleUpdateResponse.status).toBe(403);
        });
    });
    (0, globals_1.describe)('Data Isolation', () => {
        (0, globals_1.it)('should ensure users only see their organization data in listings', async () => {
            // Login as org1 manager
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'manager1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Get users list - should only contain org1 users
            const usersResponse = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Cookie', sessionCookie);
            (0, globals_1.expect)(usersResponse.status).toBe(200);
            const users = usersResponse.body;
            // Verify all returned users belong to org1
            users.forEach((user) => {
                (0, globals_1.expect)(user.organizationId).toBe(org1.id);
            });
        });
        (0, globals_1.it)('should prevent SQL injection in organization filtering', async () => {
            // Login as user
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'manager1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Try SQL injection attack in query parameters
            const maliciousResponse = await (0, supertest_1.default)(app)
                .get('/api/users')
                .set('Cookie', sessionCookie)
                .query({ organizationId: `${org1.id}' OR '1'='1` });
            // Should still only return org1 users, not all users
            (0, globals_1.expect)(maliciousResponse.status).toBe(200);
            const users = maliciousResponse.body;
            users.forEach((user) => {
                (0, globals_1.expect)(user.organizationId).toBe(org1.id);
            });
        });
    });
    (0, globals_1.describe)('Sensitive Data Protection', () => {
        (0, globals_1.it)('should not expose password hashes in user data', async () => {
            // Login and get user profile
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'manager1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            const profileResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/profile')
                .set('Cookie', sessionCookie);
            (0, globals_1.expect)(profileResponse.status).toBe(200);
            const profile = profileResponse.body;
            // Password should never be included in profile data
            (0, globals_1.expect)(profile.password).toBeUndefined();
        });
        (0, globals_1.it)('should protect session data from unauthorized access', async () => {
            // Try to access session data without authentication
            const sessionResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/profile');
            (0, globals_1.expect)(sessionResponse.status).toBe(401);
        });
        (0, globals_1.it)('should sanitize database error messages', async () => {
            // Try to create user with invalid data to trigger database error
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'admin1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            const createUserResponse = await (0, supertest_1.default)(app)
                .post('/api/users')
                .set('Cookie', sessionCookie)
                .send({
                // Invalid data to trigger database constraints
                username: '', // Empty username should trigger error
                email: 'invalid-email', // Invalid email format
            });
            (0, globals_1.expect)(createUserResponse.status).toBe(400);
            // Error message should not contain internal database details
            const errorMessage = createUserResponse.body.error || createUserResponse.body.message || '';
            (0, globals_1.expect)(errorMessage).not.toContain('constraint');
            (0, globals_1.expect)(errorMessage).not.toContain('violation');
            (0, globals_1.expect)(errorMessage).not.toContain('postgresql');
        });
    });
    (0, globals_1.describe)('Session Security', () => {
        (0, globals_1.it)('should invalidate sessions on logout', async () => {
            // Login
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'manager1',
                password: 'password123',
            });
            (0, globals_1.expect)(loginResponse.status).toBe(200);
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Verify session works
            const profileResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/profile')
                .set('Cookie', sessionCookie);
            (0, globals_1.expect)(profileResponse.status).toBe(200);
            // Logout
            const logoutResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .set('Cookie', sessionCookie);
            (0, globals_1.expect)(logoutResponse.status).toBe(200);
            // Try to use session after logout (should fail)
            const postLogoutResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/profile')
                .set('Cookie', sessionCookie);
            (0, globals_1.expect)(postLogoutResponse.status).toBe(401);
        });
        (0, globals_1.it)('should prevent session fixation attacks', async () => {
            // Get initial session
            const initialResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/profile');
            const initialCookie = initialResponse.headers['set-cookie'];
            // Login should create new session
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .set('Cookie', initialCookie)
                .send({
                username: 'manager1',
                password: 'password123',
            });
            (0, globals_1.expect)(loginResponse.status).toBe(200);
            const loginCookie = loginResponse.headers['set-cookie'];
            // Session ID should have changed after login
            (0, globals_1.expect)(loginCookie).toBeDefined();
            (0, globals_1.expect)(loginCookie).not.toEqual(initialCookie);
        });
    });
    (0, globals_1.describe)('Input Validation Security', () => {
        (0, globals_1.it)('should prevent NoSQL/SQL injection in user queries', async () => {
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                username: 'admin1',
                password: 'password123',
            });
            const sessionCookie = loginResponse.headers['set-cookie'];
            // Try injection attempts in various endpoints
            const injectionAttempts = [
                "'; DROP TABLE users; --",
                "1' OR '1'='1",
                "$where: '1 == 1'",
                "{ $ne: null }",
                "../../../etc/passwd"
            ];
            for (const injection of injectionAttempts) {
                const response = await (0, supertest_1.default)(app)
                    .get('/api/users')
                    .set('Cookie', sessionCookie)
                    .query({ search: injection });
                // Should not cause server errors or return unexpected data
                (0, globals_1.expect)(response.status).toBeLessThan(500);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,