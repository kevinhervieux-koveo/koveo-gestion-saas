{"file":"/home/runner/workspace/server/api/buildings/operations.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/buildings/operations.ts"],"sourcesContent":["import { db } from '../../db';\nimport {\n  buildings,\n  residences,\n  userResidences,\n  users,\n  userOrganizations,\n  documents,\n} from '@shared/schema';\nimport { eq, and, inArray, isNull } from 'drizzle-orm';\nimport crypto from 'crypto';\nimport { preserveUsersInCascadeOperation, validateUserDeletionPolicy } from '../policies/user-retention-policy';\n\n/**\n * Building creation data.\n */\nexport interface BuildingCreateData {\n  name: string;\n  address?: string;\n  city?: string;\n  province?: string;\n  postalCode?: string;\n  buildingType?: 'apartment' | 'condo' | 'rental';\n  yearBuilt?: number;\n  totalUnits?: number;\n  totalFloors?: number;\n  parkingSpaces?: number;\n  storageSpaces?: number;\n  amenities?: any;\n  managementCompany?: string;\n  organizationId: string;\n}\n\n/**\n * Building update data.\n */\nexport interface BuildingUpdateData extends Partial<BuildingCreateData> {\n  name: string;\n  organizationId: string;\n}\n\n/**\n * Creates a new building with auto-generated residences.\n * @param buildingData\n */\n/**\n * CreateBuilding function.\n * @param buildingData\n * @returns Function result.\n */\nexport async function createBuilding(buildingData: BuildingCreateData) {\n  const buildingId = crypto.randomUUID();\n\n  const newBuilding = await db\n    .insert(buildings)\n    .values({\n      name: buildingData.name,\n      address: buildingData.address || '',\n      city: buildingData.city || '',\n      province: buildingData.province || 'QC',\n      postalCode: buildingData.postalCode || '',\n      buildingType: (buildingData.buildingType as 'apartment' | 'condo' | 'rental') || 'condo',\n      yearBuilt: buildingData.yearBuilt,\n      totalUnits: buildingData.totalUnits || 0,\n      totalFloors: buildingData.totalFloors,\n      parkingSpaces: buildingData.parkingSpaces,\n      storageSpaces: buildingData.storageSpaces,\n      amenities: buildingData.amenities,\n      managementCompany: buildingData.managementCompany,\n      organizationId: buildingData.organizationId,\n      isActive: true,\n    })\n    .returning();\n\n  // Auto-generate residences if totalUnits is specified and <= 300\n  if (buildingData.totalUnits && buildingData.totalUnits > 0 && buildingData.totalUnits <= 300) {\n    try {\n      const totalUnits = buildingData.totalUnits;\n      const totalFloors = buildingData.totalFloors || 1;\n      const unitsPerFloor = Math.ceil(totalUnits / totalFloors);\n\n      const residencesToCreate = [];\n      for (let unit = 1; unit <= totalUnits; unit++) {\n        const floor = Math.ceil(unit / unitsPerFloor);\n        const unitOnFloor = ((unit - 1) % unitsPerFloor) + 1;\n        const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;\n\n        residencesToCreate.push({\n          buildingId: newBuilding[0].id,\n          unitNumber,\n          floor,\n          isActive: true,\n        });\n      }\n\n      // Insert all residences at once\n      const createdResidences = await db.insert(residences).values(residencesToCreate).returning();\n    } catch (___residenceError) {\n      console.error('⚠️ Error auto-generating residences:', ___residenceError);\n      // Don't fail the building creation if residence generation fails\n    }\n  }\n\n  return newBuilding[0];\n}\n\n/**\n * Updates a building.\n * @param buildingId\n * @param buildingData\n */\n/**\n * UpdateBuilding function.\n * @param buildingId\n * @param buildingData\n * @returns Function result.\n */\n\n/**\n * Adjusts residence count when building totalUnits changes.\n * For increases: Auto-generates residences with names like 'unit 109'\n * For decreases: Returns list of deletable residences for user selection\n */\nexport async function adjustResidenceCount(\n  buildingId: string,\n  organizationId: string,\n  newTotalUnits: number,\n  currentTotalUnits: number,\n  totalFloors: number\n): Promise<{ \n  action: 'increased' | 'decreased' | 'none',\n  residencesToSelect?: { id: string, unitNumber: string, hasDocuments: boolean, hasUsers: boolean }[]\n}> {\n  // Get current active residence count\n  const currentActiveResidences = await db\n    .select({ id: residences.id, unitNumber: residences.unitNumber })\n    .from(residences)\n    .where(and(eq(residences.buildingId, buildingId), eq(residences.isActive, true)));\n\n  const currentActiveCount = currentActiveResidences.length;\n\n  if (newTotalUnits > currentActiveCount) {\n    // Need to add residences - do it automatically\n    await addResidencesAutomatically(buildingId, newTotalUnits - currentActiveCount, totalFloors, currentActiveResidences);\n    return { action: 'increased' };\n  } else if (newTotalUnits < currentActiveCount) {\n    // Need to reduce residences - return list for user selection\n    const deletableResidences = await getResidencesForSelection(buildingId, currentActiveCount - newTotalUnits);\n    return { action: 'decreased', residencesToSelect: deletableResidences };\n  }\n\n  return { action: 'none' };\n}\n\n/**\n * Automatically adds residences when building count increases\n */\nexport async function addResidencesAutomatically(\n  buildingId: string,\n  residencesToAdd: number,\n  totalFloors: number,\n  existingResidences: { id: string, unitNumber: string }[]\n): Promise<void> {\n  const existingUnitNumbers = new Set(existingResidences.map(r => r.unitNumber));\n  const unitsPerFloor = Math.ceil((existingResidences.length + residencesToAdd) / totalFloors);\n  \n  const residencesToCreate = [];\n  let unitCounter = 1;\n  let created = 0;\n\n  // Find available unit numbers and create residences\n  while (created < residencesToAdd) {\n    const floor = Math.ceil(unitCounter / unitsPerFloor);\n    const unitOnFloor = ((unitCounter - 1) % unitsPerFloor) + 1;\n    const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;\n\n    if (!existingUnitNumbers.has(unitNumber)) {\n      residencesToCreate.push({\n        buildingId,\n        unitNumber,\n        floor,\n        isActive: true,\n      });\n      existingUnitNumbers.add(unitNumber);\n      created++;\n    }\n    unitCounter++;\n  }\n\n  if (residencesToCreate.length > 0) {\n    await db.insert(residences).values(residencesToCreate);\n    console.log(`✅ Auto-created ${residencesToCreate.length} residences for building ${buildingId}`);\n  }\n}\n\n/**\n * Gets list of residences that can be selected for deletion\n * Returns residences with metadata about documents and users\n */\nexport async function getResidencesForSelection(\n  buildingId: string,\n  maxToSelect: number\n): Promise<{ id: string, unitNumber: string, hasDocuments: boolean, hasUsers: boolean }[]> {\n  const allActiveResidences = await db\n    .select({ \n      id: residences.id, \n      unitNumber: residences.unitNumber,\n      floor: residences.floor \n    })\n    .from(residences)\n    .where(and(eq(residences.buildingId, buildingId), eq(residences.isActive, true)))\n    .orderBy(residences.unitNumber);\n\n  // Check each residence for documents and user relationships\n  const residenceDetails = await Promise.all(\n    allActiveResidences.map(async (residence) => {\n      // Check for documents\n      const docs = await db\n        .select({ id: documents.id })\n        .from(documents)\n        .where(eq(documents.residenceId, residence.id))\n        .limit(1);\n\n      // Check for active user relationships\n      const userRels = await db\n        .select({ id: userResidences.id })\n        .from(userResidences)\n        .where(and(eq(userResidences.residenceId, residence.id), eq(userResidences.isActive, true)))\n        .limit(1);\n\n      return {\n        id: residence.id,\n        unitNumber: residence.unitNumber,\n        hasDocuments: docs.length > 0,\n        hasUsers: userRels.length > 0,\n      };\n    })\n  );\n\n  // Prioritize empty residences first (no documents or users)\n  return residenceDetails.sort((a, b) => {\n    const aScore = (a.hasDocuments ? 1 : 0) + (a.hasUsers ? 1 : 0);\n    const bScore = (b.hasDocuments ? 1 : 0) + (b.hasUsers ? 1 : 0);\n    return aScore - bScore; // Empty residences first\n  });\n}\n\n/**\n * Deletes selected residences and their related documents\n * Only admins can call this function\n */\nexport async function deleteSelectedResidences(\n  buildingId: string,\n  residenceIds: string[],\n  userRole: string\n): Promise<{ deletedCount: number, documentsDeleted: number }> {\n  if (userRole !== 'admin') {\n    throw new Error('Only admins can delete residences');\n  }\n\n  // Count documents that will be deleted\n  const documentsToDelete = await db\n    .select({ id: documents.id })\n    .from(documents)\n    .where(inArray(documents.residenceId, residenceIds));\n\n  // Delete documents (hard delete since no isActive field)\n  await db\n    .delete(documents)\n    .where(inArray(documents.residenceId, residenceIds));\n\n  // Soft delete user-residence relationships\n  await db\n    .update(userResidences)\n    .set({ isActive: false, updatedAt: new Date() })\n    .where(and(inArray(userResidences.residenceId, residenceIds), eq(userResidences.isActive, true)));\n\n  // Soft delete residences\n  await db\n    .update(residences)\n    .set({ isActive: false, updatedAt: new Date() })\n    .where(and(inArray(residences.id, residenceIds), eq(residences.buildingId, buildingId)));\n\n  console.log(`🗑️ Deleted ${residenceIds.length} residences and ${documentsToDelete.length} documents for building ${buildingId}`);\n  \n  return {\n    deletedCount: residenceIds.length,\n    documentsDeleted: documentsToDelete.length\n  };\n}\n\nexport async function updateBuilding(buildingId: string, buildingData: BuildingUpdateData) {\n  // Get current building to check for residence count changes\n  const currentBuilding = await db\n    .select({ totalUnits: buildings.totalUnits, totalFloors: buildings.totalFloors, organizationId: buildings.organizationId })\n    .from(buildings)\n    .where(eq(buildings.id, buildingId))\n    .limit(1);\n\n  if (currentBuilding.length === 0) {\n    throw new Error('Building not found');\n  }\n\n  const updatedBuilding = await db\n    .update(buildings)\n    .set({\n      name: buildingData.name,\n      address: buildingData.address || '',\n      city: buildingData.city || '',\n      province: buildingData.province || 'QC',\n      postalCode: buildingData.postalCode || '',\n      buildingType: (buildingData.buildingType as 'apartment' | 'condo' | 'rental') || 'condo',\n      yearBuilt: buildingData.yearBuilt,\n      totalUnits: buildingData.totalUnits || 0,\n      totalFloors: buildingData.totalFloors,\n      parkingSpaces: buildingData.parkingSpaces,\n      storageSpaces: buildingData.storageSpaces,\n      amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,\n      managementCompany: buildingData.managementCompany,\n      organizationId: buildingData.organizationId,\n      updatedAt: new Date(),\n    })\n    .where(eq(buildings.id, buildingId))\n    .returning();\n\n  // Handle residence count changes if totalUnits changed\n  if (buildingData.totalUnits && buildingData.totalUnits !== currentBuilding[0].totalUnits) {\n    await adjustResidenceCount(\n      buildingId,\n      currentBuilding[0].organizationId,\n      buildingData.totalUnits,\n      currentBuilding[0].totalUnits,\n      buildingData.totalFloors || currentBuilding[0].totalFloors || 1\n    );\n  }\n\n  return updatedBuilding[0];\n}\n\n/**\n * Soft deletes a building.\n * @param buildingId\n */\n/**\n * DeleteBuilding function.\n * @param buildingId\n * @returns Function result.\n */\nexport async function deleteBuilding(buildingId: string) {\n  const deletedBuilding = await db\n    .update(buildings)\n    .set({\n      isActive: false,\n      updatedAt: new Date(),\n    })\n    .where(eq(buildings.id, buildingId))\n    .returning();\n\n  return deletedBuilding[0];\n}\n\n/**\n * Performs cascade delete of a building and all related entities.\n * @param buildingId\n */\n/**\n * CascadeDeleteBuilding function.\n * @param buildingId\n * @returns Function result.\n */\nexport async function cascadeDeleteBuilding(buildingId: string) {\n  // Check if building exists\n  const building = await db\n    .select({ id: buildings.id, name: buildings.name })\n    .from(buildings)\n    .where(and(eq(buildings.id, buildingId), eq(buildings.isActive, true)))\n    .limit(1);\n\n  if (building.length === 0) {\n    throw new Error('Building not found');\n  }\n\n  // Start transaction for cascading delete\n  await db.transaction(async (tx) => {\n    // 1. Get all residences in this building\n    const buildingResidences = await tx\n      .select({ id: residences.id })\n      .from(residences)\n      .where(and(eq(residences.buildingId, buildingId), eq(residences.isActive, true)));\n\n    const residenceIds = buildingResidences.map((r) => r.id);\n\n    if (residenceIds.length > 0) {\n      // 2. Delete documents associated with building or its residences\n      // Note: Document table uses boolean flags, not foreign keys\n      await tx.delete(documents).where(inArray(documents.residenceId, residenceIds));\n\n      // 3. Soft delete user-residence relationships\n      await tx\n        .update(userResidences)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(inArray(userResidences.residenceId, residenceIds));\n\n      // 4. DISABLED: User deletion is now prohibited for data safety\n      // Users are never deleted during cascade operations to prevent data loss\n      // This ensures user accounts and their data are preserved even when buildings are removed\n      console.log('⚠️  User deletion disabled for data safety - users will be preserved');\n\n      // 5. Soft delete residences\n      await tx\n        .update(residences)\n        .set({ isActive: false, updatedAt: new Date() })\n        .where(inArray(residences.id, residenceIds));\n    }\n\n    // 6. Finally, soft delete the building\n    await tx\n      .update(buildings)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(buildings.id, buildingId));\n  });\n\n  return building[0];\n}\n\n/**\n * Checks if a building exists and is active.\n * @param buildingId\n */\n/**\n * BuildingExists function.\n * @param buildingId\n * @returns Function result.\n */\nexport async function buildingExists(buildingId: string): Promise<boolean> {\n  const result = await db\n    .select({ id: buildings.id })\n    .from(buildings)\n    .where(and(eq(buildings.id, buildingId), eq(buildings.isActive, true)))\n    .limit(1);\n\n  return result.length > 0;\n}\n"],"version":3}