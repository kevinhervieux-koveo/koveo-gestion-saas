{"file":"/home/runner/workspace/tests/security/database-permissions.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/security/database-permissions.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\n\n// Mock WebSocket constructor for Jest environment\njest.mock('ws', () => ({\n  __esModule: true,\n  default: class MockWebSocket {}\n}));\n\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\n\n/**\n * Database Permissions and Access Control Security Tests\n * \n * Validates that:\n * - Users can only access data within their organization\n * - Role-based access controls are properly enforced\n * - Cross-organization data leakage is prevented\n * - Sensitive data is protected according to user roles\n */\n\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('Database Permissions Security', () => {\n  let app: express.Application;\n  let org1: any, org2: any;\n  let admin1: any, manager1: any, resident1: any;\n  let admin2: any, manager2: any, resident2: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean up test data\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-admin1@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-admin2@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-manager1@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-manager2@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-resident1@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-resident2@test.com'));\n    \n    // Create test organizations\n    [org1] = await db.insert(schema.organizations).values({\n      name: 'Security Test Org 1',\n      type: 'syndicate',\n      address: '123 Test St',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n    }).returning();\n\n    [org2] = await db.insert(schema.organizations).values({\n      name: 'Security Test Org 2', \n      type: 'syndicate',\n      address: '456 Test Ave',\n      city: 'Quebec',\n      province: 'QC',\n      postalCode: 'G1A 1A1',\n    }).returning();\n\n    // Create users in different organizations with different roles\n    [admin1] = await db.insert(schema.users).values({\n      username: 'admin1',\n      email: 'dbperm-admin1@test.com',\n      firstName: 'Admin',\n      lastName: 'One',\n      password: await bcrypt.hash('password123', 12),\n      role: 'admin',\n      organizationId: org1.id,\n    }).returning();\n\n    [manager1] = await db.insert(schema.users).values({\n      username: 'manager1',\n      email: 'dbperm-manager1@test.com',\n      firstName: 'Manager',\n      lastName: 'One',\n      password: await bcrypt.hash('password123', 12),\n      role: 'manager',\n      organizationId: org1.id,\n    }).returning();\n\n    [resident1] = await db.insert(schema.users).values({\n      username: 'resident1',\n      email: 'dbperm-resident1@test.com',\n      firstName: 'Resident',\n      lastName: 'One',\n      password: await bcrypt.hash('password123', 12),\n      role: 'resident',\n      organizationId: org1.id,\n    }).returning();\n\n    [admin2] = await db.insert(schema.users).values({\n      username: 'admin2',\n      email: 'dbperm-admin2@test.com',\n      firstName: 'Admin',\n      lastName: 'Two',\n      password: await bcrypt.hash('password123', 12),\n      role: 'admin',\n      organizationId: org2.id,\n    }).returning();\n\n    [manager2] = await db.insert(schema.users).values({\n      username: 'manager2',\n      email: 'dbperm-manager2@test.com',\n      firstName: 'Manager',\n      lastName: 'Two',\n      password: await bcrypt.hash('password123', 12),\n      role: 'manager',\n      organizationId: org2.id,\n    }).returning();\n\n    [resident2] = await db.insert(schema.users).values({\n      username: 'resident2',\n      email: 'dbperm-resident2@test.com',\n      firstName: 'Resident',\n      lastName: 'Two',\n      password: await bcrypt.hash('password123', 12),\n      role: 'resident',\n      organizationId: org2.id,\n    }).returning();\n  });\n\n  afterEach(async () => {\n    // Clean up test data\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-admin1@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-admin2@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-manager1@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-manager2@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-resident1@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'dbperm-resident2@test.com'));\n    \n    if (org1?.id) await db.delete(schema.organizations).where(eq(schema.organizations.id, org1.id));\n    if (org2?.id) await db.delete(schema.organizations).where(eq(schema.organizations.id, org2.id));\n  });\n\n  describe('Cross-Organization Access Prevention', () => {\n    it('should prevent users from accessing data in other organizations', async () => {\n      // Attempt to login as user from org1 and access org2 data\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'manager1',\n          password: 'password123',\n        });\n\n      expect(loginResponse.status).toBe(200);\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Try to access users from org2 (should be forbidden)\n      const usersResponse = await request(app)\n        .get('/api/users')\n        .set('Cookie', sessionCookie)\n        .query({ organizationId: org2.id });\n\n      expect(usersResponse.status).toBe(403);\n    });\n\n    it('should prevent cross-organization building access', async () => {\n      // Create buildings in both organizations\n      const [building1] = await db.insert(schema.buildings).values({\n        name: 'Org 1 Building',\n        address: '123 Org1 St',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1A 1A1',\n        organizationId: org1.id,\n      }).returning();\n\n      const [building2] = await db.insert(schema.buildings).values({\n        name: 'Org 2 Building',\n        address: '456 Org2 Ave',\n        city: 'Quebec',\n        province: 'QC',\n        postalCode: 'G1A 1A1',\n        organizationId: org2.id,\n      }).returning();\n\n      // Login as org1 user\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'manager1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Try to access org2 building (should fail)\n      const buildingResponse = await request(app)\n        .get(`/api/buildings/${building2.id}`)\n        .set('Cookie', sessionCookie);\n\n      expect(buildingResponse.status).toBe(403);\n\n      // Clean up\n      await db.delete(schema.buildings).where(eq(schema.buildings.id, building1.id));\n      await db.delete(schema.buildings).where(eq(schema.buildings.id, building2.id));\n    });\n  });\n\n  describe('Role-Based Data Access', () => {\n    it('should enforce document access based on user roles', async () => {\n      // Test document access permissions by role\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'resident1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Resident should not be able to access admin documents\n      const adminDocsResponse = await request(app)\n        .get('/api/documents')\n        .set('Cookie', sessionCookie)\n        .query({ category: 'administrative' });\n\n      // Verify access is properly restricted\n      expect(adminDocsResponse.status).toBe(200);\n      // Residents should only see documents they have access to\n    });\n\n    it('should prevent privilege escalation attempts', async () => {\n      // Login as resident\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'resident1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Try to update own role (should fail)\n      const roleUpdateResponse = await request(app)\n        .patch(`/api/users/${resident1.id}`)\n        .set('Cookie', sessionCookie)\n        .send({\n          role: 'admin'\n        });\n\n      expect(roleUpdateResponse.status).toBe(403);\n    });\n  });\n\n  describe('Data Isolation', () => {\n    it('should ensure users only see their organization data in listings', async () => {\n      // Login as org1 manager\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'manager1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Get users list - should only contain org1 users\n      const usersResponse = await request(app)\n        .get('/api/users')\n        .set('Cookie', sessionCookie);\n\n      expect(usersResponse.status).toBe(200);\n      const users = usersResponse.body;\n      \n      // Verify all returned users belong to org1\n      users.forEach((user: any) => {\n        expect(user.organizationId).toBe(org1.id);\n      });\n    });\n\n    it('should prevent SQL injection in organization filtering', async () => {\n      // Login as user\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'manager1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Try SQL injection attack in query parameters\n      const maliciousResponse = await request(app)\n        .get('/api/users')\n        .set('Cookie', sessionCookie)\n        .query({ organizationId: `${org1.id}' OR '1'='1` });\n\n      // Should still only return org1 users, not all users\n      expect(maliciousResponse.status).toBe(200);\n      const users = maliciousResponse.body;\n      users.forEach((user: any) => {\n        expect(user.organizationId).toBe(org1.id);\n      });\n    });\n  });\n\n  describe('Sensitive Data Protection', () => {\n    it('should not expose password hashes in user data', async () => {\n      // Login and get user profile\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'manager1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n      \n      const profileResponse = await request(app)\n        .get('/api/auth/profile')\n        .set('Cookie', sessionCookie);\n\n      expect(profileResponse.status).toBe(200);\n      const profile = profileResponse.body;\n      \n      // Password should never be included in profile data\n      expect(profile.password).toBeUndefined();\n    });\n\n    it('should protect session data from unauthorized access', async () => {\n      // Try to access session data without authentication\n      const sessionResponse = await request(app)\n        .get('/api/auth/profile');\n\n      expect(sessionResponse.status).toBe(401);\n    });\n\n    it('should sanitize database error messages', async () => {\n      // Try to create user with invalid data to trigger database error\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'admin1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      const createUserResponse = await request(app)\n        .post('/api/users')\n        .set('Cookie', sessionCookie)\n        .send({\n          // Invalid data to trigger database constraints\n          username: '', // Empty username should trigger error\n          email: 'invalid-email', // Invalid email format\n        });\n\n      expect(createUserResponse.status).toBe(400);\n      \n      // Error message should not contain internal database details\n      const errorMessage = createUserResponse.body.error || createUserResponse.body.message || '';\n      expect(errorMessage).not.toContain('constraint');\n      expect(errorMessage).not.toContain('violation');\n      expect(errorMessage).not.toContain('postgresql');\n    });\n  });\n\n  describe('Session Security', () => {\n    it('should invalidate sessions on logout', async () => {\n      // Login\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'manager1',\n          password: 'password123',\n        });\n\n      expect(loginResponse.status).toBe(200);\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Verify session works\n      const profileResponse = await request(app)\n        .get('/api/auth/profile')\n        .set('Cookie', sessionCookie);\n      expect(profileResponse.status).toBe(200);\n\n      // Logout\n      const logoutResponse = await request(app)\n        .post('/api/auth/logout')\n        .set('Cookie', sessionCookie);\n      expect(logoutResponse.status).toBe(200);\n\n      // Try to use session after logout (should fail)\n      const postLogoutResponse = await request(app)\n        .get('/api/auth/profile')\n        .set('Cookie', sessionCookie);\n      expect(postLogoutResponse.status).toBe(401);\n    });\n\n    it('should prevent session fixation attacks', async () => {\n      // Get initial session\n      const initialResponse = await request(app)\n        .get('/api/auth/profile');\n\n      const initialCookie = initialResponse.headers['set-cookie'];\n\n      // Login should create new session\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .set('Cookie', initialCookie)\n        .send({\n          username: 'manager1',\n          password: 'password123',\n        });\n\n      expect(loginResponse.status).toBe(200);\n      const loginCookie = loginResponse.headers['set-cookie'];\n\n      // Session ID should have changed after login\n      expect(loginCookie).toBeDefined();\n      expect(loginCookie).not.toEqual(initialCookie);\n    });\n  });\n\n  describe('Input Validation Security', () => {\n    it('should prevent NoSQL/SQL injection in user queries', async () => {\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          username: 'admin1',\n          password: 'password123',\n        });\n\n      const sessionCookie = loginResponse.headers['set-cookie'];\n\n      // Try injection attempts in various endpoints\n      const injectionAttempts = [\n        \"'; DROP TABLE users; --\",\n        \"1' OR '1'='1\",\n        \"$where: '1 == 1'\",\n        \"{ $ne: null }\",\n        \"../../../etc/passwd\"\n      ];\n\n      for (const injection of injectionAttempts) {\n        const response = await request(app)\n          .get('/api/users')\n          .set('Cookie', sessionCookie)\n          .query({ search: injection });\n\n        // Should not cause server errors or return unexpected data\n        expect(response.status).toBeLessThan(500);\n      }\n    });\n  });\n});"],"version":3}