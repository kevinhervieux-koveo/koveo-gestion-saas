2cb631580ddcff4cbf161553def4464b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentEditForm = DocumentEditForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const zod_1 = require("zod");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const form_1 = require("@/components/ui/form");
const switch_1 = require("@/components/ui/switch");
const DocumentFormBase_1 = require("@/components/forms/DocumentFormBase");
const StandardFormField_1 = require("@/components/forms/StandardFormField");
// Document categories
const DOCUMENT_CATEGORIES = [
    { value: 'bylaw', label: 'Bylaws' },
    { value: 'financial', label: 'Financial' },
    { value: 'maintenance', label: 'Maintenance' },
    { value: 'legal', label: 'Legal' },
    { value: 'meeting_minutes', label: 'Meeting Minutes' },
    { value: 'insurance', label: 'Insurance' },
    { value: 'contracts', label: 'Contracts' },
    { value: 'permits', label: 'Permits' },
    { value: 'inspection', label: 'Inspection' },
    { value: 'other', label: 'Other' },
];
// Simplified document edit schema using our standard patterns
const documentEditSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Document name is required').max(255),
    description: zod_1.z.string().max(1000).optional(),
    category: zod_1.z.enum(['bylaw', 'financial', 'maintenance', 'legal', 'meeting_minutes', 'insurance', 'contracts', 'permits', 'inspection', 'other']),
    isVisible: zod_1.z.boolean().default(true),
    tags: zod_1.z.string().optional(),
});
/**
 * Document Edit Form using the new consolidated DocumentFormBase pattern.
 * Demonstrates Phase 3 migration to standardized components.
 */
function DocumentEditForm({ document, onSuccess, onCancel, buildingId, residenceId }) {
    const defaultValues = {
        name: document.name || '',
        description: document.description || '',
        category: document.documentType || 'other',
        isVisible: document.isVisibleToTenants ?? true,
        tags: '', // documents don't have tags in current schema
    };
    const handleSuccess = () => {
        if (onSuccess) {
            onSuccess(document.id, 'updated');
        }
    };
    return ((0, jsx_runtime_1.jsx)(DocumentFormBase_1.DocumentFormBase, { title: "Edit Document", schema: documentEditSchema, defaultValues: defaultValues, apiEndpoint: `/api/documents/${document.id}`, queryKey: ['documents'], mode: "edit", itemId: document.id, buildingId: buildingId, residenceId: residenceId, onSuccess: handleSuccess, onCancel: onCancel, successMessages: {
            update: 'Document updated successfully',
        }, uploadContext: {
            type: 'documents',
            buildingId,
            residenceId,
        }, showTabs: false, "data-testid": "document-edit-form", children: (formControls) => ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(StandardFormField_1.StandardFormField, { control: formControls.form.control, name: "name", label: "Document Name", placeholder: "Enter document name", "data-testid": "input-name" }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: formControls.form.control, name: "category", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Category" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, defaultValue: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": "select-category", children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Select category" }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: DOCUMENT_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category.value, children: category.label }, category.value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: formControls.form.control, name: "description", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: "Enter document description (optional)", "data-testid": "textarea-description", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: formControls.form.control, name: "tags", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Tags" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Enter tags separated by commas", "data-testid": "input-tags", ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: formControls.form.control, name: "isVisible", render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: "flex flex-row items-center justify-between rounded-lg border p-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-0.5", children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { className: "text-base", children: "Document Visibility" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-muted-foreground", children: "Make this document visible to relevant users" })] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(switch_1.Switch, { checked: field.value, onCheckedChange: field.onChange, "data-testid": "switch-visibility" }) })] })) })] })) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,