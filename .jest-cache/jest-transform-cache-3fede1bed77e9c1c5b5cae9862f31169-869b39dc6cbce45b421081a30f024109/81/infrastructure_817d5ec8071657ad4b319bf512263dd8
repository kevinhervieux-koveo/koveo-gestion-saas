ef372cb67adfc1da462a8013717ed9e9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertSessionSchema = exports.insertSslCertificateSchema = exports.sessions = exports.sslCertificates = exports.sslStatusEnum = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const core_1 = require("./core");
// Infrastructure enums
exports.sslStatusEnum = (0, pg_core_1.pgEnum)('ssl_status', [
    'active',
    'pending',
    'expired',
    'revoked',
    'failed',
]);
// Infrastructure tables
/**
 * SSL certificates table for managing domain SSL certificates.
 * Supports automated certificate management and renewal tracking.
 */
exports.sslCertificates = (0, pg_core_1.pgTable)('ssl_certificates', {
    id: (0, pg_core_1.uuid)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    domain: (0, pg_core_1.text)('domain').notNull().unique(),
    certificateData: (0, pg_core_1.text)('certificate_data').notNull(),
    privateKey: (0, pg_core_1.text)('private_key').notNull(),
    issuer: (0, pg_core_1.text)('issuer').notNull(),
    subject: (0, pg_core_1.text)('subject').notNull(),
    serialNumber: (0, pg_core_1.text)('serial_number').notNull(),
    fingerprint: (0, pg_core_1.text)('fingerprint').notNull(),
    validFrom: (0, pg_core_1.timestamp)('valid_from').notNull(),
    validTo: (0, pg_core_1.timestamp)('valid_to').notNull(),
    status: (0, exports.sslStatusEnum)('status').notNull().default('pending'),
    autoRenew: (0, pg_core_1.boolean)('auto_renew').notNull().default(true),
    renewalAttempts: (0, pg_core_1.integer)('renewal_attempts').notNull().default(0),
    maxRenewalAttempts: (0, pg_core_1.integer)('max_renewal_attempts').notNull().default(3),
    dnsProvider: (0, pg_core_1.text)('dns_provider'),
    lastRenewalAttempt: (0, pg_core_1.timestamp)('last_renewal_attempt'),
    nextRenewalDate: (0, pg_core_1.timestamp)('next_renewal_date'),
    // Additional SSL management fields
    certificateChain: (0, pg_core_1.text)('certificate_chain'),
    renewalError: (0, pg_core_1.text)('renewal_error'),
    dnsCredentials: (0, pg_core_1.text)('dns_credentials'),
    notificationEmails: (0, pg_core_1.text)('notification_emails'),
    createdBy: (0, pg_core_1.uuid)('created_by')
        .notNull()
        .references(() => core_1.users.id),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow(),
});
/**
 * Session table for PostgreSQL session store.
 * This table stores user session data for authentication.
 * CRITICAL: This table must never be deleted as it's required for user sessions.
 */
exports.sessions = (0, pg_core_1.pgTable)('session', {
    sid: (0, pg_core_1.varchar)('sid').primaryKey().notNull(),
    sess: (0, pg_core_1.json)('sess').notNull(),
    expire: (0, pg_core_1.timestamp)('expire', { precision: 6 }).notNull(),
});
// Insert schemas
exports.insertSslCertificateSchema = zod_1.z.object({
    domain: zod_1.z.string(),
    certificateData: zod_1.z.string(),
    privateKey: zod_1.z.string(),
    issuer: zod_1.z.string(),
    subject: zod_1.z.string(),
    serialNumber: zod_1.z.string(),
    fingerprint: zod_1.z.string(),
    validFrom: zod_1.z.date(),
    validTo: zod_1.z.date(),
    status: zod_1.z.string().default('pending'),
    autoRenew: zod_1.z.boolean().default(true),
    renewalAttempts: zod_1.z.number().int().default(0),
    maxRenewalAttempts: zod_1.z.number().int().default(3),
    dnsProvider: zod_1.z.string().optional(),
    lastRenewalAttempt: zod_1.z.date().optional(),
    nextRenewalDate: zod_1.z.date().optional(),
    createdBy: zod_1.z.string().uuid(),
});
// Types
// Session table schema (no insert schema needed - managed by connect-pg-simple)
exports.insertSessionSchema = zod_1.z.object({
    sid: zod_1.z.string(),
    sess: zod_1.z.any(), // JSON data
    expire: zod_1.z.date(),
});
// Relations - temporarily commented out due to drizzle-orm version compatibility
// export const sslCertificatesRelations = relations(sslCertificates, ({ one }) => ({
//   createdBy: one(users, {
//     fields: [sslCertificates.createdBy],
//     references: [users.id],
//   }),
// }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,