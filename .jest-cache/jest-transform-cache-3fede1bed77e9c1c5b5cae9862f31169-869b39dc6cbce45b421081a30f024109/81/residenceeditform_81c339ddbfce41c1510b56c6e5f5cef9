348fbdbd0db76c2c0c85ec22e35dc8b4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResidenceEditForm = ResidenceEditForm;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const react_query_1 = require("@tanstack/react-query");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const switch_1 = require("@/components/ui/switch");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const residenceEditSchema = zod_2.z.object({
    unitNumber: zod_2.z.string().min(1, 'Unit number is required and must be alphanumeric (example: 101A)'),
    floor: zod_2.z.coerce.number().min(0, 'Floor must be between 0 and 50 (example: 2)').max(50, 'Floor must be between 0 and 50 (example: 2)').optional(),
    squareFootage: zod_2.z.union([zod_2.z.coerce.number().min(1, 'Square footage must be between 1 and 10,000 sq ft (example: 1200)').max(10000, 'Square footage must be between 1 and 10,000 sq ft (example: 1200)'), zod_2.z.literal('')]).optional(),
    bedrooms: zod_2.z.coerce.number().min(0, 'Bedrooms must be between 0 and 10 (example: 2)').max(10, 'Bedrooms must be between 0 and 10 (example: 2)').optional(),
    bathrooms: zod_2.z.union([zod_2.z.coerce.number().min(0, 'Bathrooms must be between 0 and 10 (example: 1.5)').max(10, 'Bathrooms must be between 0 and 10 (example: 1.5)'), zod_2.z.literal('')]).optional(),
    balcony: zod_2.z.boolean(),
    parkingSpaceNumbers: zod_2.z.array(zod_2.z.string()).optional(),
    storageSpaceNumbers: zod_2.z.array(zod_2.z.string()).optional(),
    ownershipPercentage: zod_2.z.union([zod_2.z.coerce.number().min(0, 'Ownership percentage must be between 0 and 100 (example: 25)').max(100, 'Ownership percentage must be between 0 and 100 (example: 25)'), zod_2.z.literal('')]).optional(),
    monthlyFees: zod_2.z.union([zod_2.z.coerce.number().min(0, 'Monthly fees must be a positive amount in CAD (example: 350.00)').max(99999, 'Monthly fees must be less than $99,999 CAD (example: 350.00)'), zod_2.z.literal('')]).optional(),
});
/**
 *
 * @param root0
 * @param root0.residence
 * @param root0.onSuccess
 */
/**
 * ResidenceEditForm function.
 * @param root0
 * @param root0.residence
 * @param root0.onSuccess
 * @returns Function result.
 */
function ResidenceEditForm({ residence, onSuccess }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [parkingSpaces, setParkingSpaces] = (0, react_1.useState)(residence.parkingSpaceNumbers || []);
    const [storageSpaces, setStorageSpaces] = (0, react_1.useState)(residence.storageSpaceNumbers || []);
    const [newParkingSpace, setNewParkingSpace] = (0, react_1.useState)('');
    const [newStorageSpace, setNewStorageSpace] = (0, react_1.useState)('');
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(residenceEditSchema),
        defaultValues: {
            unitNumber: residence.unitNumber,
            floor: residence.floor || 0,
            squareFootage: residence.squareFootage ? Number(residence.squareFootage) : '',
            bedrooms: residence.bedrooms || 0,
            bathrooms: residence.bathrooms ? Number(residence.bathrooms) : '',
            balcony: residence.balcony || false,
            parkingSpaceNumbers: residence.parkingSpaceNumbers || [],
            storageSpaceNumbers: residence.storageSpaceNumbers || [],
            ownershipPercentage: residence.ownershipPercentage ?
                (Number(residence.ownershipPercentage) < 1 ? Number(residence.ownershipPercentage) * 100 : Number(residence.ownershipPercentage)) : '',
            monthlyFees: residence.monthlyFees ? Number(residence.monthlyFees) : '',
        },
    });
    const updateResidenceMutation = (0, react_query_1.useMutation)({
        mutationFn: async (_data) => {
            // Convert empty strings to null for optional numeric fields
            const processedData = {
                ..._data,
                squareFootage: _data.squareFootage === '' ? null : _data.squareFootage,
                bathrooms: _data.bathrooms === '' ? null : _data.bathrooms,
                ownershipPercentage: _data.ownershipPercentage === '' ? null : Number(_data.ownershipPercentage),
                monthlyFees: _data.monthlyFees === '' ? null : _data.monthlyFees,
                parkingSpaceNumbers: parkingSpaces,
                storageSpaceNumbers: storageSpaces,
            };
            const response = await fetch(`/api/residences/${residence.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(processedData),
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Failed to update residence: ${errorText}`);
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: 'Residence updated successfully',
            });
            queryClient.invalidateQueries({ queryKey: ['/api/residences'] });
            onSuccess();
        },
        onError: (_error) => {
            toast({
                title: 'Error',
                description: _error?.message || 'Failed to update residence',
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (_data) => {
        updateResidenceMutation.mutate(_data);
    };
    const addParkingSpace = () => {
        if (newParkingSpace.trim() && !parkingSpaces.includes(newParkingSpace.trim())) {
            setParkingSpaces([...parkingSpaces, newParkingSpace.trim()]);
            setNewParkingSpace('');
        }
    };
    const removeParkingSpace = (index) => {
        setParkingSpaces(parkingSpaces.filter((_, i) => i !== index));
    };
    const addStorageSpace = () => {
        if (newStorageSpace.trim() && !storageSpaces.includes(newStorageSpace.trim())) {
            setStorageSpaces([...storageSpaces, newStorageSpace.trim()]);
            setNewStorageSpace('');
        }
    };
    const removeStorageSpace = (index) => {
        setStorageSpaces(storageSpaces.filter((_, i) => i !== index));
    };
    return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Basic Information" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'unitNumber', children: "Unit Number" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'unitNumber', ...form.register('unitNumber') }), form.formState.errors.unitNumber && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-500', children: form.formState.errors.unitNumber.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'floor', children: "Floor" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'floor', type: 'number', min: '0', ...form.register('floor', { valueAsNumber: true }) }), form.formState.errors.floor && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-500', children: form.formState.errors.floor.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'squareFootage', children: "Square Footage" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'squareFootage', placeholder: 'e.g., 1200', ...form.register('squareFootage') }), form.formState.errors.squareFootage && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-500', children: form.formState.errors.squareFootage.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'monthlyFees', children: "Monthly Fees ($)" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'monthlyFees', placeholder: 'e.g., 350.00', ...form.register('monthlyFees') }), form.formState.errors.monthlyFees && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-500', children: form.formState.errors.monthlyFees.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-3 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'bedrooms', children: "Bedrooms" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'bedrooms', type: 'number', min: '0', ...form.register('bedrooms', { valueAsNumber: true }) }), form.formState.errors.bedrooms && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-500', children: form.formState.errors.bedrooms.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'bathrooms', children: "Bathrooms" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'bathrooms', placeholder: 'e.g., 2.5', ...form.register('bathrooms') }), form.formState.errors.bathrooms && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-500', children: form.formState.errors.bathrooms.message }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'ownershipPercentage', children: "Ownership 0-100%" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'ownershipPercentage', placeholder: 'e.g., 17', ...form.register('ownershipPercentage') }), form.formState.errors.ownershipPercentage && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-red-500', children: form.formState.errors.ownershipPercentage.message }))] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(switch_1.Switch, { id: 'balcony', checked: form.watch('balcony'), onCheckedChange: (checked) => form.setValue('balcony', checked) }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'balcony', children: "Has Balcony" })] })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Parking Spaces" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex flex-wrap gap-2', children: parkingSpaces.map((space, index) => ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'secondary', className: 'flex items-center gap-1', children: [space, (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: 'w-3 h-3 cursor-pointer', onClick: () => removeParkingSpace(index) })] }, index))) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Add parking space number', value: newParkingSpace, onChange: (e) => setNewParkingSpace(e.target.value), onKeyPress: (e) => e.key === 'Enter' && (e.preventDefault(), addParkingSpace()) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', onClick: addParkingSpace, size: 'sm', children: (0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4' }) })] })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { children: "Storage Spaces" }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex flex-wrap gap-2', children: storageSpaces.map((space, index) => ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'secondary', className: 'flex items-center gap-1', children: [space, (0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: 'w-3 h-3 cursor-pointer', onClick: () => removeStorageSpace(index) })] }, index))) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Add storage space number', value: newStorageSpace, onChange: (e) => setNewStorageSpace(e.target.value), onKeyPress: (e) => e.key === 'Enter' && (e.preventDefault(), addStorageSpace()) }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', onClick: addStorageSpace, size: 'sm', children: (0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4' }) })] })] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex justify-end gap-2', children: (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: updateResidenceMutation.isPending, children: updateResidenceMutation.isPending ? 'Updating...' : 'Update Residence' }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,