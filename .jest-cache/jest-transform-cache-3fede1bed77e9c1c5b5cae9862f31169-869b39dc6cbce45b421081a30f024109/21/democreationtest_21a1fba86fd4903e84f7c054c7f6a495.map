{"file":"/home/runner/workspace/tests/integration/demo-creation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/demo-creation.test.ts"],"sourcesContent":["/**\n * Demo Creation Script Tests\n * Tests the create-demo-environment.ts script functionality\n */\n\nimport { promises as fs } from 'fs';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport { jest } from '@jest/globals';\n\nconst execAsync = promisify(exec);\n\n// Mock database connection for testing\njest.mock('../../server/storage', () => ({\n  db: {\n    select: jest.fn(),\n    insert: jest.fn(),\n    delete: jest.fn(),\n    execute: jest.fn(),\n  },\n  sql: {\n    raw: jest.fn()\n  }\n}));\n\n// Mock schema imports\njest.mock('../../shared/schema', () => ({\n  organizations: {\n    id: 'id',\n    name: 'name',\n    type: 'type'\n  },\n  users: {\n    id: 'id',\n    username: 'username',\n    email: 'email'\n  },\n  buildings: {\n    id: 'id',\n    name: 'name'\n  },\n  residences: {\n    id: 'id',\n    unitNumber: 'unit_number'\n  }\n}));\n\ndescribe('Demo Creation Script', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  test('script file exists and is executable', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    \n    try {\n      const stats = await fs.stat(scriptPath);\n      expect(stats.isFile()).toBe(true);\n    } catch (error) {\n      throw new Error(`Demo script file does not exist at ${scriptPath}`);\n    }\n  });\n\n  test('script has proper imports and structure', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for essential imports\n    expect(content).toContain('import * as schema');\n    expect(content).toContain('initializeDatabase');\n    expect(content).toContain('faker');\n    \n    // Check for main functionality\n    expect(content).toContain('Demo 123');\n    expect(content).toContain('buildings');\n    expect(content).toContain('residences');\n    expect(content).toContain('users');\n  });\n\n  test('script can be compiled without errors', async () => {\n    try {\n      const { stderr } = await execAsync('npx tsc --noEmit scripts/create-demo-environment.ts');\n      if (stderr && !stderr.includes('No inputs were found')) {\n        console.warn('TypeScript warnings:', stderr);\n      }\n    } catch (error: any) {\n      throw new Error(`Script compilation failed: ${error.message}`);\n    }\n  });\n\n  test('demo data generation functions exist with proper file paths', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for data generation functions\n    expect(content).toContain('seedUsers');\n    expect(content).toContain('seedBuildings');\n    expect(content).toContain('seedResidences');\n    expect(content).toContain('seedBookings');\n    expect(content).toContain('seedMaintenanceRequests');\n    expect(content).toContain('seedBills');\n    expect(content).toContain('seedDocuments');\n    \n    // Check for proper file path structure (no uploads prefix)\n    expect(content).toContain('writeDocumentFile(filePath');\n    expect(content).not.toContain('writeDocumentFile(`uploads/${filePath}`');\n  });\n\n  test('script includes data validation and ASCII-safe encoding', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for validation logic\n    expect(content).toContain('validation');\n    expect(content).toContain('unique');\n    expect(content).toContain('email');\n    expect(content).toContain('phone');\n    \n    // Check for ASCII-safe encoding fixes\n    expect(content).not.toContain('✓'); // Unicode checkmarks should be replaced\n    expect(content).not.toContain('⚠️'); // Unicode warning symbols should be replaced\n    expect(content).toContain('+ Electrical systems'); // Should use ASCII alternatives\n    expect(content).toContain('- On Time'); // Should use ASCII alternatives\n  });\n\n  test('script has proper error handling', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for error handling\n    expect(content).toContain('try');\n    expect(content).toContain('catch');\n    expect(content).toContain('console.error');\n    expect(content).toContain('process.exit');\n  });\n\n  test('demo organization creation logic', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for organization creation\n    expect(content).toContain('\"Demo 123\"');\n    expect(content).toContain('condo');\n    expect(content).toContain('organization');\n  });\n\n  test('demo user creation includes all roles', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for different user roles\n    expect(content).toContain('admin');\n    expect(content).toContain('manager');\n    expect(content).toContain('demo_resident');\n    expect(content).toContain('tenant');\n  });\n\n  test('building generation creates multiple buildings', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for multiple building creation\n    expect(content).toMatch(/building.*\\d+/i);\n    expect(content).toContain('name');\n    expect(content).toContain('address');\n  });\n\n  test('residence generation includes unit numbers', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for unit number generation\n    expect(content).toContain('unit');\n    expect(content).toContain('floor');\n    expect(content).toMatch(/\\d{3}/); // Unit number pattern\n  });\n\n  test('booking generation includes realistic data', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for booking data\n    expect(content).toContain('booking');\n    expect(content).toContain('startDate');\n    expect(content).toContain('endDate');\n    expect(content).toContain('status');\n  });\n\n  test('maintenance request generation', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for maintenance request data\n    expect(content).toContain('maintenance');\n    expect(content).toContain('priority');\n    expect(content).toContain('category');\n    expect(content).toContain('description');\n  });\n\n  test('bill generation includes financial data', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for bill/financial data\n    expect(content).toContain('bill');\n    expect(content).toContain('amount');\n    expect(content).toContain('dueDate');\n    expect(content).toContain('category');\n  });\n\n  test('script uses Faker for realistic data', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for Faker usage\n    expect(content).toContain('@faker-js/faker');\n    expect(content).toContain('faker.');\n  });\n\n  test('script includes cleanup functionality', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for cleanup/deletion logic\n    expect(content).toContain('cleanup');\n    expect(content).toContain('delete');\n    expect(content).toContain('existing');\n  });\n\n  test('script has logging and progress indicators', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for logging\n    expect(content).toContain('console.log');\n    expect(content).toContain('Creating');\n    expect(content).toContain('Generated');\n    expect(content).toContain('✅');\n  });\n\n  test('data relationships are properly established with manager organization access', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for relationship setup\n    expect(content).toContain('user_organizations');\n    expect(content).toContain('user_residences');\n    expect(content).toContain('organization_id');\n    expect(content).toContain('building_id');\n    expect(content).toContain('user_id');\n    \n    // Check for manager organization association comment\n    expect(content).toContain('critical for manager building access');\n    expect(content).toContain('userOrganizations');\n  });\n\n  test('script validates required environment variables', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for environment validation\n    expect(content).toMatch(/(DATABASE_URL|process\\.env)/);\n  });\n\n  test('script includes data seeding summary', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for summary/reporting\n    expect(content).toMatch(/(total|summary|created)/);\n  });\n\n  test('script can run without breaking existing data', async () => {\n    const scriptPath = 'scripts/create-demo-environment.ts';\n    const content = await fs.readFile(scriptPath, 'utf-8');\n    \n    // Check for safe execution patterns\n    expect(content).toMatch(/(exists|findFirst|upsert)/);\n  });\n});\n\ndescribe('Demo Data Validation', () => {\n  test('generated emails are unique and valid', () => {\n    const emails = [\n      'melody.effertz@hotmail.com',\n      'reyes.gislason85@yahoo.com',\n      'ethan.kirtlin@hotmail.com'\n    ];\n    \n    // Check uniqueness\n    const uniqueEmails = new Set(emails);\n    expect(uniqueEmails.size).toBe(emails.length);\n    \n    // Check format\n    emails.forEach(email => {\n      expect(email).toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n    });\n  });\n\n  test('document content uses ASCII-safe characters', () => {\n    const sampleContent = `+ Electrical systems - Good condition\n+ Plumbing - Good condition\n* Minor paint touch-up needed\n- Rent Payment - On Time`;\n    \n    // Should not contain Unicode characters\n    expect(sampleContent).not.toMatch(/[✓⚠️]/u);\n    \n    // Should contain ASCII alternatives\n    expect(sampleContent).toContain('+ Electrical');\n    expect(sampleContent).toContain('* Minor');\n    expect(sampleContent).toContain('- On Time');\n  });\n\n  test('document categorization separates bills from financial documents', () => {\n    const billCategories = ['utilities', 'maintenance', 'insurance', 'cleaning'];\n    const financialTypes = ['loan', 'bank_statement', 'financial_report'];\n    \n    // Bill categories should map to proper document types\n    expect(billCategories).toContain('utilities');\n    expect(billCategories).toContain('maintenance');\n    \n    // Financial document types should be separate\n    expect(financialTypes).toContain('loan');\n    expect(financialTypes).toContain('bank_statement');\n    \n    // They should not overlap\n    const overlap = billCategories.filter(cat => financialTypes.includes(cat));\n    expect(overlap).toHaveLength(0);\n  });\n\n  test('generated phone numbers are valid format', () => {\n    const phones = [\n      '514-555-0123',\n      '438-555-0456',\n      '450-555-0789'\n    ];\n    \n    phones.forEach(phone => {\n      expect(phone).toMatch(/^\\d{3}-\\d{3}-\\d{4}$/);\n    });\n  });\n\n  test('unit numbers follow correct pattern', () => {\n    const units = ['101', '102', '201', '202', '301'];\n    \n    units.forEach(unit => {\n      expect(unit).toMatch(/^\\d{3}$/);\n      expect(parseInt(unit)).toBeGreaterThan(100);\n      expect(parseInt(unit)).toBeLessThan(1000);\n    });\n  });\n\n  test('financial amounts are realistic', () => {\n    const amounts = [1500.00, 2200.50, 850.75, 3200.00];\n    \n    amounts.forEach(amount => {\n      expect(amount).toBeGreaterThan(0);\n      expect(amount).toBeLessThan(10000);\n      expect(Number.isFinite(amount)).toBe(true);\n    });\n  });\n\n  test('dates are logical and in valid range', () => {\n    const startDate = new Date('2024-01-01');\n    const endDate = new Date('2024-12-31');\n    const testDate = new Date('2024-06-15');\n    \n    expect(testDate.getTime()).toBeGreaterThanOrEqual(startDate.getTime());\n    expect(testDate.getTime()).toBeLessThanOrEqual(endDate.getTime());\n  });\n\n  test('file paths use direct user directories', () => {\n    const validPaths = [\n      'bills/invoice-bill123-abcd1234.txt',\n      'residences/uuid-123/lease-101.txt',\n      'buildings/uuid-456/insurance-building-name.txt'\n    ];\n    \n    validPaths.forEach(path => {\n      // Should not start with uploads/\n      expect(path).not.toMatch(/^uploads\\//);\n      \n      // Should follow direct directory structure\n      expect(path).toMatch(/^(bills|residences|buildings)\\//); \n    });\n  });\n\n  test('manager organization associations are properly configured', () => {\n    const managerConfig = {\n      hasOrganizationAssociation: true,\n      canAccessBuildings: true,\n      roleType: 'demo_manager'\n    };\n    \n    expect(managerConfig.hasOrganizationAssociation).toBe(true);\n    expect(managerConfig.canAccessBuildings).toBe(true);\n    expect(managerConfig.roleType).toContain('manager');\n  });\n});"],"version":3}