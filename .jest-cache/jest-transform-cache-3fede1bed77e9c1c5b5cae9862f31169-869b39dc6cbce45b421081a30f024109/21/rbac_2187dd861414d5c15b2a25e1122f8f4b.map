{"file":"/home/runner/workspace/server/rbac.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/rbac.ts"],"sourcesContent":["import { Pool } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport * as schema from '../shared/schema';\nimport { eq, and, or, inArray } from 'drizzle-orm';\nimport { Request, Response, NextFunction } from 'express';\n\n// Use shared database connection to avoid multiple pools\nimport { db } from './db';\n\n/**\n * Authenticated user object with role-based access control information.\n * Contains user identity, role, and organization access rights for Quebec property management.\n * Used throughout the RBAC system for authorization decisions.\n *\n * @interface AuthenticatedUser\n * @property {string} id - Unique user identifier (UUID).\n * @property {string} username - User's login username.\n * @property {string} email - User's email address.\n * @property {string} firstName - User's first name.\n * @property {string} lastName - User's last name.\n * @property {'admin' | 'manager' | 'tenant' | 'resident' | 'demo_manager' | 'demo_tenant' | 'demo_resident'} role - User's primary role in the system.\n * @property {boolean} isActive - Whether the user account is active.\n * @property {string[]} [organizations] - Array of organization IDs the user can access.\n * @property {boolean} [canAccessAllOrganizations] - Whether user has global organization access (Koveo org).\n */\nexport interface AuthenticatedUser {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'admin' | 'manager' | 'tenant' | 'resident' | 'demo_manager' | 'demo_tenant' | 'demo_resident';\n  isActive: boolean;\n  organizations?: string[];\n  canAccessAllOrganizations?: boolean;\n}\n\n/**\n * Context object for evaluating resource access permissions in the RBAC system.\n * Provides all necessary information to determine if a user can perform an action\n * on a specific resource within the property management hierarchy.\n *\n * @interface AccessContext\n * @property {AuthenticatedUser} user - The authenticated user requesting access.\n * @property {string} [organizationId] - Target organization ID for access check.\n * @property {string} [buildingId] - Target building ID for access check.\n * @property {string} [residenceId] - Target residence ID for access check.\n * @property {'organization' | 'building' | 'residence' | 'user' | 'bill' | 'maintenance' | 'document'} resourceType - Type of resource being accessed.\n * @property {'create' | 'read' | 'update' | 'delete'} action - Action being performed on the resource.\n */\nexport interface AccessContext {\n  user: AuthenticatedUser;\n  organizationId?: string;\n  buildingId?: string;\n  residenceId?: string;\n  resourceType:\n    | 'organization'\n    | 'building'\n    | 'residence'\n    | 'user'\n    | 'bill'\n    | 'maintenance'\n    | 'document';\n  action: 'create' | 'read' | 'update' | 'delete';\n}\n\n/**\n * Retrieves all organization IDs that a user can access based on RBAC rules and memberships.\n * Implements Quebec property management access patterns including Demo organization access\n * for all users and Koveo organization global access privileges.\n *\n * @param {string} userId - UUID of the user to check organization access for.\n * @returns {Promise<string[]>} Promise resolving to array of accessible organization IDs.\n *\n * @example\n * ```typescript\n * const orgIds = await getUserAccessibleOrganizations('user-uuid');\n * ```\n */\n/**\n * GetUserAccessibleOrganizations function.\n * @param userId\n * @returns Function result.\n */\nexport async function getUserAccessibleOrganizations(userId: string): Promise<string[]> {\n  try {\n\n    // Get user's organization memberships\n    const userOrgs = await db.query.userOrganizations.findMany({\n      where: and(\n        eq(schema.userOrganizations.userId, userId),\n        eq(schema.userOrganizations.isActive, true)\n      ),\n    });\n\n\n    // Get Demo organization ID (always accessible)\n    const demoOrg = await db.query.organizations.findFirst({\n      where: eq(schema.organizations.name, 'Demo'),\n    });\n\n\n    const accessibleOrgIds = new Set<string>();\n\n    // Add Demo organization (accessible to everyone)\n    if (demoOrg) {\n      accessibleOrgIds.add(demoOrg.id);\n    }\n\n    // Check each user organization membership\n    for (const userOrg of userOrgs) {\n      if (userOrg.canAccessAllOrganizations) {\n        // User can access all organizations\n        const allOrgs = await db.query.organizations.findMany({\n          where: eq(schema.organizations.isActive, true),\n        });\n        allOrgs.forEach((org) => accessibleOrgIds.add(org.id));\n        break;\n      } else {\n        // Check if this is the Koveo organization (also grants global access)\n        const org = await db.query.organizations.findFirst({\n          where: eq(schema.organizations.id, userOrg.organizationId),\n        });\n        \n        if (org && org.name && org.name.toLowerCase() === 'koveo') {\n          // Koveo organization grants access to all\n          const allOrgs = await db.query.organizations.findMany({\n            where: eq(schema.organizations.isActive, true),\n          });\n          allOrgs.forEach((allOrg) => accessibleOrgIds.add(allOrg.id));\n          break;\n        } else {\n          // User can access their own organization\n          accessibleOrgIds.add(userOrg.organizationId);\n        }\n      }\n    }\n\n    const result = Array.from(accessibleOrgIds);\n    return result;\n  } catch (error) {\n    console.error('Error getting user accessible organizations:', error);\n    return [];\n  }\n}\n\n/**\n * Retrieves all residence IDs that a user can access based on tenant/resident assignments.\n * Used primarily for tenant and resident roles to determine which specific residences\n * they can view and interact with in the property management system.\n *\n * @param {string} userId - UUID of the user to check residence access for.\n * @returns {Promise<string[]>} Promise resolving to array of accessible residence IDs.\n *\n * @example\n * ```typescript\n * const residenceIds = await getUserAccessibleResidences('tenant-user-uuid');\n * ```\n */\n/**\n * GetUserAccessibleResidences function.\n * @param userId\n * @returns Function result.\n */\nexport async function getUserAccessibleResidences(userId: string): Promise<string[]> {\n  try {\n    const userResidences = await db.query.userResidences.findMany({\n      where: and(\n        eq(schema.userResidences.userId, userId),\n        eq(schema.userResidences.isActive, true)\n      ),\n    });\n\n    return userResidences.map((ur) => ur.residenceId);\n  } catch (error) {\n    console.error('Error getting user accessible residences:', error);\n    return [];\n  }\n}\n\n/**\n * Checks if a user belongs to the Open Demo organization (view-only demo users).\n * Open Demo users have restricted permissions and can only view/read data.\n *\n * @param {string} userId - UUID of the user to check.\n * @returns {Promise<boolean>} Promise resolving to true if user is an Open Demo user.\n */\nexport async function isOpenDemoUser(userId: string): Promise<boolean> {\n  try {\n    // Get Open Demo organization\n    const openDemoOrg = await db.query.organizations.findFirst({\n      where: eq(schema.organizations.name, 'Open Demo'),\n    });\n\n    if (!openDemoOrg) {\n      return false;\n    }\n\n    // Check if user belongs to Open Demo organization\n    const userOrg = await db.query.userOrganizations.findFirst({\n      where: and(\n        eq(schema.userOrganizations.userId, userId),\n        eq(schema.userOrganizations.organizationId, openDemoOrg.id),\n        eq(schema.userOrganizations.isActive, true)\n      ),\n    });\n\n    return !!userOrg;\n  } catch (error) {\n    console.error('Error checking open demo user:', error);\n    return false;\n  }\n}\n\n/**\n * Checks if a user can perform a write operation (create, update, delete).\n * Open Demo users are restricted to read-only access.\n *\n * @param {string} userId - UUID of the user to check.\n * @param {'create' | 'update' | 'delete' | 'manage' | 'approve' | 'assign' | 'share' | 'export' | 'backup' | 'restore'} action - The action to check.\n * @returns {Promise<boolean>} Promise resolving to true if user can perform write operations.\n */\nexport async function canUserPerformWriteOperation(\n  userId: string,\n  action:\n    | 'create'\n    | 'update'\n    | 'delete'\n    | 'manage'\n    | 'approve'\n    | 'assign'\n    | 'share'\n    | 'export'\n    | 'backup'\n    | 'restore'\n): Promise<boolean> {\n  // Check if user is from Open Demo organization (view-only)\n  const isOpenDemo = await isOpenDemoUser(userId);\n  if (isOpenDemo) {\n    return false; // Open Demo users cannot perform any write operations\n  }\n\n  return true; // Regular users can perform write operations based on their permissions\n}\n\n/**\n * Checks if a user has access to a specific organization based on RBAC rules.\n * Validates access through user organization memberships, Demo organization access,\n * and Koveo organization global privileges.\n *\n * @param {string} userId - UUID of the user to check access for.\n * @param {string} organizationId - UUID of the organization to check access to.\n * @returns {Promise<boolean>} Promise resolving to true if user can access the organization.\n *\n * @example\n * ```typescript\n * const hasAccess = await canUserAccessOrganization('user-uuid', 'org-uuid');\n * if (hasAccess) {\n *   // Allow access to organization data\n * }\n * ```\n */\n/**\n * CanUserAccessOrganization function.\n * @param userId\n * @param organizationId\n * @returns Function result.\n */\nexport async function canUserAccessOrganization(\n  userId: string,\n  organizationId: string\n): Promise<boolean> {\n  const accessibleOrgs = await getUserAccessibleOrganizations(userId);\n  return accessibleOrgs.includes(organizationId);\n}\n\n/**\n * Checks if a user has access to a specific building through organization membership.\n * Buildings are accessible if the user can access the organization that owns the building.\n *\n * @param {string} userId - UUID of the user to check access for.\n * @param {string} buildingId - UUID of the building to check access to.\n * @returns {Promise<boolean>} Promise resolving to true if user can access the building.\n *\n * @example\n * ```typescript\n * const canView = await canUserAccessBuilding('user-uuid', 'building-uuid');\n * if (canView) {\n *   // Show building information\n * }\n * ```\n */\n/**\n * CanUserAccessBuilding function.\n * @param userId\n * @param buildingId\n * @returns Function result.\n */\nexport async function canUserAccessBuilding(userId: string, buildingId: string): Promise<boolean> {\n  try {\n    const building = await db.query.buildings.findFirst({\n      where: eq(schema.buildings.id, buildingId),\n    });\n\n    if (!building) {\n      return false;\n    }\n\n    return await canUserAccessOrganization(userId, building.organizationId);\n  } catch (error) {\n    console.error('Error checking building access:', error);\n    return false;\n  }\n}\n\n/**\n * Checks if a user has access to a specific residence based on role and assignments.\n * Admin/Manager roles can access residences in their organizations.\n * Tenant/Resident roles can only access their specifically assigned residences.\n *\n * @param {string} userId - UUID of the user to check access for.\n * @param {string} residenceId - UUID of the residence to check access to.\n * @returns {Promise<boolean>} Promise resolving to true if user can access the residence.\n *\n * @example\n * ```typescript\n * const canAccess = await canUserAccessResidence('tenant-uuid', 'residence-uuid');\n * if (canAccess) {\n *   // Show residence details and related data\n * }\n * ```\n */\n/**\n * CanUserAccessResidence function.\n * @param userId\n * @param residenceId\n * @returns Function result.\n */\nexport async function canUserAccessResidence(\n  userId: string,\n  residenceId: string\n): Promise<boolean> {\n  try {\n    const user = await db.query.users.findFirst({\n      where: eq(schema.users.id, userId),\n    });\n\n    if (!user) {\n      return false;\n    }\n\n    // Admins and managers can access any residence in their accessible organizations\n    if (['admin', 'manager', 'demo_manager'].includes(user.role)) {\n      const residence = await db.query.residences.findFirst({\n        where: eq(schema.residences.id, residenceId),\n      });\n\n      if (!residence) {\n        return false;\n      }\n\n      // Get the building to find the organization\n      const building = await db.query.buildings.findFirst({\n        where: eq(schema.buildings.id, residence.buildingId),\n      });\n\n      if (!building) {\n        return false;\n      }\n\n      return await canUserAccessOrganization(userId, building.organizationId);\n    }\n\n    // Tenants/residents can only access their own residences\n    const accessibleResidences = await getUserAccessibleResidences(userId);\n    return accessibleResidences.includes(residenceId);\n  } catch (error) {\n    console.error('Error checking residence access:', error);\n    return false;\n  }\n}\n\n/**\n * Middleware to check organization access.\n * @param param\n */\n/**\n * RequireOrganizationAccess function.\n * @param param\n * @returns Function result.\n */\nexport function requireOrganizationAccess(param: string = 'organizationId') {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    const organizationId = req.params[param] || req.body[param] || req.query[param];\n\n    if (!organizationId) {\n      return res.status(400).json({\n        message: 'Organization ID is required',\n        code: 'MISSING_ORGANIZATION_ID',\n      });\n    }\n\n    try {\n      const hasAccess = await canUserAccessOrganization(req.user.id, organizationId);\n\n      if (!hasAccess) {\n        return res.status(403).json({\n          message: 'Access denied to this organization',\n          code: 'ORGANIZATION_ACCESS_DENIED',\n        });\n      }\n\n      next();\n    } catch (error) {\n      console.error('Error checking organization access:', error);\n      return res.status(500).json({\n        message: 'Authorization check failed',\n        code: 'AUTHORIZATION_ERROR',\n      });\n    }\n  };\n}\n\n/**\n * Middleware to check building access.\n * @param param\n */\n/**\n * RequireBuildingAccess function.\n * @param param\n * @returns Function result.\n */\nexport function requireBuildingAccess(param: string = 'buildingId') {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    const buildingId = req.params[param] || req.body[param] || req.query[param];\n\n    if (!buildingId) {\n      return res.status(400).json({\n        message: 'Building ID is required',\n        code: 'MISSING_BUILDING_ID',\n      });\n    }\n\n    try {\n      const hasAccess = await canUserAccessBuilding(req.user.id, buildingId);\n\n      if (!hasAccess) {\n        return res.status(403).json({\n          message: 'Access denied to this building',\n          code: 'BUILDING_ACCESS_DENIED',\n        });\n      }\n\n      next();\n    } catch (error) {\n      console.error('Error checking building access:', error);\n      return res.status(500).json({\n        message: 'Authorization check failed',\n        code: 'AUTHORIZATION_ERROR',\n      });\n    }\n  };\n}\n\n/**\n * Middleware to check residence access.\n * @param param\n */\n/**\n * RequireResidenceAccess function.\n * @param param\n * @returns Function result.\n */\nexport function requireResidenceAccess(param: string = 'residenceId') {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    const residenceId = req.params[param] || req.body[param] || req.query[param];\n\n    if (!residenceId) {\n      return res.status(400).json({\n        message: 'Residence ID is required',\n        code: 'MISSING_RESIDENCE_ID',\n      });\n    }\n\n    try {\n      const hasAccess = await canUserAccessResidence(req.user.id, residenceId);\n\n      if (!hasAccess) {\n        return res.status(403).json({\n          message: 'Access denied to this residence',\n          code: 'RESIDENCE_ACCESS_DENIED',\n        });\n      }\n\n      next();\n    } catch (error) {\n      console.error('Error checking residence access:', error);\n      return res.status(500).json({\n        message: 'Authorization check failed',\n        code: 'AUTHORIZATION_ERROR',\n      });\n    }\n  };\n}\n\n/**\n * Filter organizations based on user access.\n * @param userId\n * @param organizations\n */\n/**\n * FilterOrganizationsByAccess function.\n * @param userId\n * @param organizations\n * @returns Function result.\n */\nexport async function filterOrganizationsByAccess(\n  userId: string,\n  organizations: any[]\n): Promise<any[]> {\n  const accessibleOrgIds = await getUserAccessibleOrganizations(userId);\n  return organizations.filter((org) => accessibleOrgIds.includes(org.id));\n}\n\n/**\n * Filter buildings based on user access.\n * @param userId\n * @param buildings\n */\n/**\n * FilterBuildingsByAccess function.\n * @param userId\n * @param buildings\n * @returns Function result.\n */\nexport async function filterBuildingsByAccess(userId: string, buildings: any[]): Promise<any[]> {\n  const accessibleOrgIds = await getUserAccessibleOrganizations(userId);\n  return buildings.filter((building) => accessibleOrgIds.includes(building.organizationId));\n}\n\n/**\n * Filter residences based on user access.\n * @param userId\n * @param residences\n */\n/**\n * FilterResidencesByAccess function.\n * @param userId\n * @param residences\n * @returns Function result.\n */\nexport async function filterResidencesByAccess(userId: string, residences: any[]): Promise<any[]> {\n  const user = await db.query.users.findFirst({\n    where: eq(schema.users.id, userId),\n  });\n\n  if (!user) {\n    return [];\n  }\n\n  // For admins/managers, filter by organization access\n  if (['admin', 'manager', 'demo_manager'].includes(user.role)) {\n    const accessibleOrgIds = await getUserAccessibleOrganizations(userId);\n\n    // Get all buildings in accessible organizations\n    const accessibleBuildings = await db.query.buildings.findMany({\n      where: inArray(schema.buildings.organizationId, accessibleOrgIds),\n    });\n\n    const accessibleBuildingIds = accessibleBuildings.map((b) => b.id);\n    return residences.filter((residence: any) =>\n      accessibleBuildingIds.includes(residence.buildingId)\n    );\n  }\n\n  // For tenants/residents, only show their own residences\n  const accessibleResidenceIds = await getUserAccessibleResidences(userId);\n  return residences.filter((residence: any) => accessibleResidenceIds.includes(residence.id));\n}\n\n/**\n * Get organization filter for database queries.\n * @param userId\n */\n/**\n * GetOrganizationFilter function.\n * @param userId\n * @returns Function result.\n */\nexport async function getOrganizationFilter(userId: string) {\n  const accessibleOrgIds = await getUserAccessibleOrganizations(userId);\n  return inArray(schema.organizations.id, accessibleOrgIds);\n}\n\n/**\n * Get building filter for database queries.\n * @param userId\n */\n/**\n * GetBuildingFilter function.\n * @param userId\n * @returns Function result.\n */\nexport async function getBuildingFilter(userId: string) {\n  const accessibleOrgIds = await getUserAccessibleOrganizations(userId);\n  return inArray(schema.buildings.organizationId, accessibleOrgIds);\n}\n\n/**\n * Get residence filter for database queries.\n * @param userId\n */\n/**\n * GetResidenceFilter function.\n * @param userId\n * @returns Function result.\n */\nexport async function getResidenceFilter(userId: string) {\n  const user = await db.query.users.findFirst({\n    where: eq(schema.users.id, userId),\n  });\n\n  if (!user) {\n    return eq(schema.residences.id, 'never-match');\n  }\n\n  // For admins/managers, filter by organization access\n  if (['admin', 'manager', 'demo_manager'].includes(user.role)) {\n    const accessibleOrgIds = await getUserAccessibleOrganizations(userId);\n\n    // Get all buildings in accessible organizations\n    const accessibleBuildings = await db.query.buildings.findMany({\n      where: inArray(schema.buildings.organizationId, accessibleOrgIds),\n    });\n\n    const accessibleBuildingIds = accessibleBuildings.map((b) => b.id);\n    return inArray(schema.residences.buildingId, accessibleBuildingIds);\n  }\n\n  // For tenants/residents, only show their own residences\n  const accessibleResidenceIds = await getUserAccessibleResidences(userId);\n  return inArray(schema.residences.id, accessibleResidenceIds);\n}\n"],"version":3}