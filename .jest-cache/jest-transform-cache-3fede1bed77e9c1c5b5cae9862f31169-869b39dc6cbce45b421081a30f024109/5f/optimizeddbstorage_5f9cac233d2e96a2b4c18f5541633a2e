debc4b65069338b253c25a73aabc0ec8
"use strict";
/**
 * Optimized database storage with caching and performance monitoring.
 * Replaces decorators with direct implementation for better compatibility.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptimizedDatabaseStorage = void 0;
const drizzle_orm_1 = require("drizzle-orm");
// Use shared database connection to avoid multiple pools in production
const db_1 = require("./db");
const crypto_1 = __importDefault(require("crypto"));
const schema = __importStar(require("@shared/schema"));
const database_optimization_1 = require("./database-optimization");
const query_cache_1 = require("./query-cache");
const performance_monitoring_1 = require("./performance-monitoring");
const drizzle_orm_2 = require("drizzle-orm");
// Database connection imported from shared db.ts
/**
 * Enhanced database storage with built-in caching and performance monitoring.
 */
class OptimizedDatabaseStorage {
    /**
     *
     */
    constructor() {
        // Skip optimizations in test environment
        if (process.env.TEST_ENV !== 'integration' &&
            !process.env.DISABLE_DB_OPTIMIZATIONS &&
            process.env.NODE_ENV !== 'test' &&
            !process.env.JEST_WORKER_ID) {
            this.initializeOptimizations();
        }
    }
    /**
     * Initializes database optimizations.
     */
    async initializeOptimizations() {
        // Skip database optimization during tests
        if (process.env.NODE_ENV === 'test' ||
            process.env.JEST_WORKER_ID ||
            process.env.SKIP_DB_OPTIMIZATION) {
            // Database optimizations skipped in test environment
            return;
        }
        try {
            await database_optimization_1.QueryOptimizer.applyCoreOptimizations();
            // Database optimizations applied
        }
        catch (error) {
            console.error('‚ùå Error initializing database optimizations:', error);
        }
    }
    /**
     * Wrapper for performance tracking and caching.
     * @param operation
     * @param cacheKey
     * @param cacheType
     * @param fn
     */
    async withOptimizations(operation, cacheKey, cacheType, fn) {
        // Try cache first
        if (cacheKey) {
            const cached = query_cache_1.queryCache.get(cacheType, cacheKey);
            if (cached !== undefined) {
                return cached;
            }
        }
        // Execute with performance tracking
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery(operation, fn);
        // Cache result
        if (cacheKey && result !== undefined) {
            query_cache_1.queryCache.set(cacheType, cacheKey, result);
        }
        return result;
    }
    // User operations with optimization
    /**
     * Retrieves all active users with caching and performance tracking.
     */
    async getUsers() {
        return this.withOptimizations('getUsers', 'all_users', 'users', () => db_1.db
            .select()
            .from(schema.users)
            .where((0, drizzle_orm_1.eq)(schema.users.isActive, true))
            .limit(100) // Always use LIMIT for large result sets
            .orderBy((0, drizzle_orm_1.desc)(schema.users.createdAt)));
    }
    /**
     * Retrieves all active users with their assignments (organizations, buildings, residences).
     * OPTIMIZED: Uses single query with JOINs and aggregation instead of N+1 queries.
     */
    async getUsersWithAssignments() {
        return this.withOptimizations('getUsersWithAssignments', 'all_users_assignments_optimized_v4', 'users', async () => {
            try {
                // Single optimized query using CTEs and aggregation
                const result = await db_1.db.execute((0, drizzle_orm_1.sql) `
            WITH user_orgs AS (
              SELECT 
                uo.user_id,
                COALESCE(
                  json_agg(
                    json_build_object(
                      'id', o.id,
                      'name', o.name,
                      'type', o.type
                    )
                  ) FILTER (WHERE o.id IS NOT NULL),
                  '[]'::json
                ) as organizations
              FROM user_organizations uo
              INNER JOIN organizations o ON uo.organization_id = o.id
              WHERE uo.is_active = true AND o.is_active = true
              GROUP BY uo.user_id
            ),
            user_buildings AS (
              SELECT 
                uo.user_id,
                COALESCE(
                  json_agg(
                    json_build_object(
                      'id', buildings_distinct.id,
                      'name', buildings_distinct.name
                    )
                  ),
                  '[]'::json
                ) as buildings
              FROM user_organizations uo
              INNER JOIN (
                SELECT DISTINCT uo2.user_id, b.id, b.name
                FROM user_organizations uo2
                INNER JOIN buildings b ON uo2.organization_id = b.organization_id
                WHERE uo2.is_active = true AND b.is_active = true
              ) buildings_distinct ON uo.user_id = buildings_distinct.user_id
              WHERE uo.is_active = true
              GROUP BY uo.user_id
            ),
            user_residences AS (
              SELECT 
                ur.user_id,
                COALESCE(
                  json_agg(
                    json_build_object(
                      'id', r.id,
                      'unitNumber', r.unit_number,
                      'buildingId', r.building_id,
                      'buildingName', b.name
                    )
                  ) FILTER (WHERE r.id IS NOT NULL),
                  '[]'::json
                ) as residences
              FROM user_residences ur
              INNER JOIN residences r ON ur.residence_id = r.id
              INNER JOIN buildings b ON r.building_id = b.id
              WHERE ur.is_active = true AND r.is_active = true
              GROUP BY ur.user_id
            )
            SELECT 
              u.*,
              COALESCE(uo.organizations, '[]'::json) as organizations,
              COALESCE(ub.buildings, '[]'::json) as buildings,
              COALESCE(ur.residences, '[]'::json) as residences
            FROM users u
            LEFT JOIN user_orgs uo ON u.id = uo.user_id
            LEFT JOIN user_buildings ub ON u.id = ub.user_id
            LEFT JOIN user_residences ur ON u.id = ur.user_id
            WHERE u.is_active = true
            ORDER BY u.created_at DESC
            LIMIT 100
          `);
                // Transform the raw SQL result to match the expected TypeScript types
                return result.rows.map((row) => ({
                    id: row.id,
                    username: row.username,
                    password: row.password,
                    email: row.email,
                    firstName: row.first_name,
                    lastName: row.last_name,
                    phone: row.phone,
                    profileImage: row.profile_image,
                    language: row.language,
                    role: row.role,
                    isActive: row.is_active,
                    lastLoginAt: row.last_login_at,
                    createdAt: row.created_at,
                    updatedAt: row.updated_at,
                    organizations: typeof row.organizations === 'string'
                        ? JSON.parse(row.organizations)
                        : row.organizations || [],
                    buildings: typeof row.buildings === 'string'
                        ? JSON.parse(row.buildings)
                        : row.buildings || [],
                    residences: typeof row.residences === 'string'
                        ? JSON.parse(row.residences)
                        : row.residences || []
                }));
            }
            catch (error) {
                console.error('‚ùå Error in optimized getUsersWithAssignments:', error);
                // Fallback to the original implementation if optimized query fails
                console.log('üîÑ Falling back to original implementation...');
                return this.getUsersWithAssignmentsFallback();
            }
        });
    }
    /**
     * Retrieves paginated active users with their assignments (organizations, buildings, residences).
     * OPTIMIZED: Uses single query with JOINs, aggregation, and LIMIT/OFFSET for pagination.
     */
    async getUsersWithAssignmentsPaginated(offset = 0, limit = 10, filters = {}) {
        return this.withOptimizations('getUsersWithAssignmentsPaginated', `paginated_users_${offset}_${limit}_${JSON.stringify(filters)}_v4`, 'users', async () => {
            try {
                console.log('üîç [DB FILTER] Input filters:', JSON.stringify(filters, null, 2));
                // Build WHERE conditions for filtering
                let whereConditions = [];
                let countWhereConditions = [];
                if (filters.role) {
                    if (filters.role === 'null') {
                        whereConditions.push('u.role IS NULL');
                        countWhereConditions.push('role IS NULL');
                    }
                    else {
                        whereConditions.push(`u.role = '${filters.role}'`);
                        countWhereConditions.push(`role = '${filters.role}'`);
                    }
                }
                if (filters.status) {
                    if (filters.status === 'null') {
                        whereConditions.push('u.is_active IS NULL');
                        countWhereConditions.push('is_active IS NULL');
                    }
                    else {
                        const isActive = filters.status === 'true';
                        whereConditions.push(`u.is_active = ${isActive}`);
                        countWhereConditions.push(`is_active = ${isActive}`);
                    }
                }
                else {
                    // Default: only show active users if no status filter is applied
                    whereConditions.push('u.is_active = true');
                    countWhereConditions.push('is_active = true');
                }
                // Demo-only filter for demo users
                if (filters.demoOnly === 'true') {
                    whereConditions.push("(u.role LIKE 'demo_%')");
                    countWhereConditions.push("(role LIKE 'demo_%')");
                }
                // Search filter for name/email
                if (filters.search && filters.search.trim()) {
                    const searchTerm = filters.search.trim().toLowerCase();
                    whereConditions.push(`(
              LOWER(u.first_name || ' ' || u.last_name) LIKE '%${searchTerm}%' OR 
              LOWER(u.email) LIKE '%${searchTerm}%' OR 
              LOWER(u.username) LIKE '%${searchTerm}%'
            )`);
                    countWhereConditions.push(`(
              LOWER(first_name || ' ' || last_name) LIKE '%${searchTerm}%' OR 
              LOWER(email) LIKE '%${searchTerm}%' OR 
              LOWER(username) LIKE '%${searchTerm}%'
            )`);
                    console.log('üîç [SEARCH FILTER] Applied search for:', searchTerm);
                }
                // Manager organizations filter - only show users from specific organizations
                if (filters.managerOrganizations && filters.managerOrganizations.trim()) {
                    const orgIds = filters.managerOrganizations.split(',').map(id => `'${id.trim()}'`).join(',');
                    whereConditions.push(`EXISTS (
              SELECT 1 FROM user_organizations uo_mgr 
              WHERE uo_mgr.user_id = u.id 
              AND uo_mgr.organization_id IN (${orgIds})
              AND uo_mgr.is_active = true
            )`);
                    countWhereConditions.push(`EXISTS (
              SELECT 1 FROM user_organizations uo_mgr 
              WHERE uo_mgr.user_id = users.id 
              AND uo_mgr.organization_id IN (${orgIds})
              AND uo_mgr.is_active = true
            )`);
                    console.log('üëî [MANAGER FILTER] Applied organization filter for:', orgIds);
                }
                // First get total count for pagination metadata with filters
                const countQuery = `
            SELECT COUNT(*) as total 
            FROM users 
            WHERE ${countWhereConditions.length > 0 ? countWhereConditions.join(' AND ') : '1=1'}
            ${filters.organization && filters.organization.trim() ? `AND EXISTS (
              SELECT 1 FROM user_organizations uo_filter 
              WHERE uo_filter.user_id = users.id 
              AND uo_filter.organization_id = '${filters.organization.trim()}'
              AND uo_filter.is_active = true
            )` : ''}
            ${!filters.organization && filters.orphan === 'true' ? `AND NOT EXISTS (
              SELECT 1 FROM user_organizations uo_count_orphan 
              WHERE uo_count_orphan.user_id = users.id AND uo_count_orphan.is_active = true
            ) AND NOT EXISTS (
              SELECT 1 FROM user_residences ur_count_orphan 
              WHERE ur_count_orphan.user_id = users.id AND ur_count_orphan.is_active = true
            )` : ''}
            ${!filters.organization && filters.orphan === 'false' ? `AND (EXISTS (
              SELECT 1 FROM user_organizations uo_count_assigned 
              WHERE uo_count_assigned.user_id = users.id AND uo_count_assigned.is_active = true
            ) OR EXISTS (
              SELECT 1 FROM user_residences ur_count_assigned 
              WHERE ur_count_assigned.user_id = users.id AND ur_count_assigned.is_active = true
            ))` : ''}
            ${filters.search && filters.search.trim() ? `AND (
              LOWER(first_name || ' ' || last_name) LIKE '%${filters.search.trim().toLowerCase()}%' OR 
              LOWER(email) LIKE '%${filters.search.trim().toLowerCase()}%' OR 
              LOWER(username) LIKE '%${filters.search.trim().toLowerCase()}%'
            )` : ''}
          `;
                console.log('üìä [COUNT SQL]:', countQuery);
                const countResult = await db_1.db.execute(drizzle_orm_1.sql.raw(countQuery));
                const total = parseInt(countResult.rows[0]?.total || '0');
                console.log('üìä [COUNT RESULT]:', total);
                // Single optimized query using CTEs and aggregation with pagination and filters
                const mainQuery = `
            WITH user_orgs AS (
              SELECT 
                uo.user_id,
                COALESCE(
                  json_agg(
                    json_build_object(
                      'id', o.id,
                      'name', o.name,
                      'type', o.type
                    )
                  ) FILTER (WHERE o.id IS NOT NULL),
                  '[]'::json
                ) as organizations
              FROM user_organizations uo
              INNER JOIN organizations o ON uo.organization_id = o.id
              WHERE uo.is_active = true AND o.is_active = true
              GROUP BY uo.user_id
            ),
            user_buildings AS (
              SELECT 
                uo.user_id,
                COALESCE(
                  json_agg(
                    json_build_object(
                      'id', buildings_distinct.id,
                      'name', buildings_distinct.name
                    )
                  ),
                  '[]'::json
                ) as buildings
              FROM user_organizations uo
              INNER JOIN (
                SELECT DISTINCT uo2.user_id, b.id, b.name
                FROM user_organizations uo2
                INNER JOIN buildings b ON uo2.organization_id = b.organization_id
                WHERE uo2.is_active = true AND b.is_active = true
              ) buildings_distinct ON uo.user_id = buildings_distinct.user_id
              WHERE uo.is_active = true
              GROUP BY uo.user_id
            ),
            user_residences AS (
              SELECT 
                ur.user_id,
                COALESCE(
                  json_agg(
                    json_build_object(
                      'id', r.id,
                      'unitNumber', r.unit_number,
                      'buildingId', r.building_id,
                      'buildingName', b.name
                    )
                  ) FILTER (WHERE r.id IS NOT NULL),
                  '[]'::json
                ) as residences
              FROM user_residences ur
              INNER JOIN residences r ON ur.residence_id = r.id
              INNER JOIN buildings b ON r.building_id = b.id
              WHERE ur.is_active = true AND r.is_active = true
              GROUP BY ur.user_id
            )
            SELECT 
              u.*,
              COALESCE(uo.organizations, '[]'::json) as organizations,
              COALESCE(ub.buildings, '[]'::json) as buildings,
              COALESCE(ur.residences, '[]'::json) as residences
            FROM users u
            LEFT JOIN user_orgs uo ON u.id = uo.user_id
            LEFT JOIN user_buildings ub ON u.id = ub.user_id
            LEFT JOIN user_residences ur ON u.id = ur.user_id
            WHERE ${whereConditions.length > 0 ? whereConditions.join(' AND ') : '1=1'}
            ${filters.organization && filters.organization.trim() ? (() => {
                    console.log('üè¢ [ORG FILTER] Applying organization filter:', filters.organization.trim());
                    return `AND EXISTS (
                SELECT 1 FROM user_organizations uo_filter 
                WHERE uo_filter.user_id = u.id 
                AND uo_filter.organization_id = '${filters.organization.trim()}'
                AND uo_filter.is_active = true
              )`;
                })() : (() => {
                    console.log('üè¢ [ORG FILTER] No organization filter applied (empty or undefined)');
                    return '';
                })()}
            ${!filters.organization && filters.orphan === 'true' ? (() => {
                    console.log('üëª [ORPHAN FILTER] Applying orphan filter: true (users with no assignments)');
                    return `AND NOT EXISTS (
                SELECT 1 FROM user_organizations uo_filter_orphan 
                WHERE uo_filter_orphan.user_id = u.id AND uo_filter_orphan.is_active = true
              ) AND NOT EXISTS (
                SELECT 1 FROM user_residences ur_filter_orphan 
                WHERE ur_filter_orphan.user_id = u.id AND ur_filter_orphan.is_active = true
              )`;
                })() : !filters.organization && filters.orphan === 'false' ? (() => {
                    console.log('üëª [ORPHAN FILTER] Applying orphan filter: false (users with assignments)');
                    return `AND (EXISTS (
                SELECT 1 FROM user_organizations uo_filter_assigned 
                WHERE uo_filter_assigned.user_id = u.id AND uo_filter_assigned.is_active = true
              ) OR EXISTS (
                SELECT 1 FROM user_residences ur_filter_assigned 
                WHERE ur_filter_assigned.user_id = u.id AND ur_filter_assigned.is_active = true
              ))`;
                })() : filters.organization && filters.orphan ? (() => {
                    console.log('üëª [ORPHAN FILTER] Ignoring orphan filter - conflicts with organization filter');
                    return '';
                })() : (() => {
                    console.log('üëª [ORPHAN FILTER] No orphan filter applied (empty or undefined)');
                    return '';
                })()}
            ORDER BY u.created_at DESC
            LIMIT ${limit} OFFSET ${offset}
          `;
                console.log('üìä [MAIN SQL]:', mainQuery);
                const result = await db_1.db.execute(drizzle_orm_1.sql.raw(mainQuery));
                console.log('üìä [MAIN RESULT]:', result.rows.length, 'users found');
                // Transform the raw SQL result to match the expected TypeScript types
                const users = result.rows.map((row) => ({
                    id: row.id,
                    username: row.username,
                    password: row.password,
                    email: row.email,
                    firstName: row.first_name,
                    lastName: row.last_name,
                    phone: row.phone,
                    profileImage: row.profile_image,
                    language: row.language,
                    role: row.role,
                    isActive: row.is_active,
                    lastLoginAt: row.last_login_at,
                    createdAt: row.created_at,
                    updatedAt: row.updated_at,
                    organizations: typeof row.organizations === 'string'
                        ? JSON.parse(row.organizations)
                        : row.organizations || [],
                    buildings: typeof row.buildings === 'string'
                        ? JSON.parse(row.buildings)
                        : row.buildings || [],
                    residences: typeof row.residences === 'string'
                        ? JSON.parse(row.residences)
                        : row.residences || []
                }));
                return { users, total };
            }
            catch (error) {
                console.error('‚ùå Error in optimized getUsersWithAssignmentsPaginated:', error);
                // Fallback to paginated version of the original implementation if optimized query fails
                console.log('üîÑ Falling back to paginated original implementation...');
                return this.getUsersWithAssignmentsPaginatedFallback(offset, limit, filters);
            }
        });
    }
    /**
     * Fallback implementation for getUsersWithAssignments if optimized version fails.
     * This is the original N+1 query implementation kept for reliability.
     */
    async getUsersWithAssignmentsFallback() {
        try {
            // Get all users first
            const users = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.isActive, true))
                .orderBy((0, drizzle_orm_1.desc)(schema.users.createdAt));
            // For each user, fetch their assignments with limited concurrency to prevent connection issues
            const batchSize = 5; // Process 5 users at a time to avoid connection pool exhaustion
            const usersWithAssignments = [];
            for (let i = 0; i < users.length; i += batchSize) {
                const batch = users.slice(i, i + batchSize);
                const batchResults = await Promise.all(batch.map(async (user) => {
                    try {
                        // Get user organizations
                        const userOrgs = await db_1.db
                            .select({
                            id: schema.organizations.id,
                            name: schema.organizations.name,
                            type: schema.organizations.type,
                        })
                            .from(schema.userOrganizations)
                            .innerJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.userOrganizations.organizationId, schema.organizations.id))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, user.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true), (0, drizzle_orm_1.eq)(schema.organizations.isActive, true)));
                        // Get user buildings (through organization relationships)
                        const userBuildings = await db_1.db
                            .select({
                            id: schema.buildings.id,
                            name: schema.buildings.name,
                        })
                            .from(schema.userOrganizations)
                            .innerJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.userOrganizations.organizationId, schema.buildings.organizationId))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, user.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true)));
                        // Get user residences
                        const userResidences = await db_1.db
                            .select({
                            id: schema.residences.id,
                            unitNumber: schema.residences.unitNumber,
                            buildingId: schema.residences.buildingId,
                            buildingName: schema.buildings.name,
                        })
                            .from(schema.userResidences)
                            .innerJoin(schema.residences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                            .innerJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, user.id), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)));
                        return {
                            ...user,
                            organizations: userOrgs || [],
                            buildings: userBuildings || [],
                            residences: userResidences || [],
                        };
                    }
                    catch (error) {
                        console.error('‚ùå Error getting user assignments:', error);
                        // Return user with empty assignments if there's an error
                        return {
                            ...user,
                            organizations: [],
                            buildings: [],
                            residences: [],
                        };
                    }
                }));
                usersWithAssignments.push(...batchResults);
            }
            return usersWithAssignments;
        }
        catch (error) {
            console.error('‚ùå Critical error getting users with assignments:', error);
            // Return empty array on critical error
            return [];
        }
    }
    /**
     * Paginated fallback implementation for getUsersWithAssignmentsPaginated if optimized version fails.
     * This is the original N+1 query implementation with pagination support.
     */
    async getUsersWithAssignmentsPaginatedFallback(offset = 0, limit = 10, filters = {}) {
        try {
            // Build WHERE conditions for filtering
            let whereConditions = [];
            if (filters.role) {
                if (filters.role === 'null') {
                    whereConditions.push((0, drizzle_orm_1.isNull)(schema.users.role));
                }
                else {
                    whereConditions.push((0, drizzle_orm_1.eq)(schema.users.role, filters.role));
                }
            }
            if (filters.status) {
                if (filters.status === 'null') {
                    whereConditions.push((0, drizzle_orm_1.isNull)(schema.users.isActive));
                }
                else {
                    const isActive = filters.status === 'true';
                    whereConditions.push((0, drizzle_orm_1.eq)(schema.users.isActive, isActive));
                }
            }
            else {
                // Default: only show active users if no status filter is applied
                whereConditions.push((0, drizzle_orm_1.eq)(schema.users.isActive, true));
            }
            // Demo-only filter for demo users
            if (filters.demoOnly === 'true') {
                whereConditions.push((0, drizzle_orm_1.sql) `${schema.users.role} LIKE 'demo_%'`);
            }
            // Search filter for name/email
            if (filters.search && filters.search.trim()) {
                const searchTerm = `%${filters.search.trim().toLowerCase()}%`;
                whereConditions.push((0, drizzle_orm_1.or)((0, drizzle_orm_1.sql) `LOWER(${schema.users.firstName} || ' ' || ${schema.users.lastName}) LIKE ${searchTerm}`, (0, drizzle_orm_1.sql) `LOWER(${schema.users.email}) LIKE ${searchTerm}`, (0, drizzle_orm_1.sql) `LOWER(${schema.users.username}) LIKE ${searchTerm}`));
                console.log('üîç [SEARCH FILTER FALLBACK] Applied search for:', filters.search.trim());
            }
            // Manager organizations filter
            if (filters.managerOrganizations) {
                const orgIds = filters.managerOrganizations.split(',');
                const orgFilterQuery = db_1.db
                    .select({ userId: schema.userOrganizations.userId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema.userOrganizations.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                whereConditions.push((0, drizzle_orm_1.inArray)(schema.users.id, orgFilterQuery));
            }
            // Orphan filter implementation for fallback
            if (filters.orphan === 'true') {
                // Users with no organization AND no residence assignments
                console.log('üëª [FALLBACK] Applying orphan filter: true (users with no assignments)');
                const usersWithOrgs = db_1.db
                    .selectDistinct({ userId: schema.userOrganizations.userId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true));
                const usersWithResidences = db_1.db
                    .selectDistinct({ userId: schema.userResidences.userId })
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.isActive, true));
                // Users who are NOT in either of these subqueries
                whereConditions.push((0, drizzle_orm_1.and)((0, drizzle_orm_1.notInArray)(schema.users.id, usersWithOrgs), (0, drizzle_orm_1.notInArray)(schema.users.id, usersWithResidences)));
            }
            else if (filters.orphan === 'false') {
                // Users with at least one organization OR residence assignment
                console.log('üëª [FALLBACK] Applying orphan filter: false (users with assignments)');
                const usersWithOrgs = db_1.db
                    .selectDistinct({ userId: schema.userOrganizations.userId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true));
                const usersWithResidences = db_1.db
                    .selectDistinct({ userId: schema.userResidences.userId })
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.isActive, true));
                // Users who are in at least one of these subqueries
                whereConditions.push((0, drizzle_orm_1.or)((0, drizzle_orm_1.inArray)(schema.users.id, usersWithOrgs), (0, drizzle_orm_1.inArray)(schema.users.id, usersWithResidences)));
            }
            // First get total count with filters
            const totalResult = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                .from(schema.users)
                .where((0, drizzle_orm_1.and)(...whereConditions));
            const total = Number(totalResult[0]?.count || 0);
            // Get paginated users with filters
            const users = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.and)(...whereConditions))
                .orderBy((0, drizzle_orm_1.desc)(schema.users.createdAt))
                .limit(limit)
                .offset(offset);
            // For each user, fetch their assignments with limited concurrency to prevent connection issues
            const batchSize = 5; // Process 5 users at a time to avoid connection pool exhaustion
            const usersWithAssignments = [];
            for (let i = 0; i < users.length; i += batchSize) {
                const batch = users.slice(i, i + batchSize);
                const batchResults = await Promise.all(batch.map(async (user) => {
                    try {
                        // Get user organizations
                        const userOrgs = await db_1.db
                            .select({
                            id: schema.organizations.id,
                            name: schema.organizations.name,
                            type: schema.organizations.type,
                        })
                            .from(schema.userOrganizations)
                            .innerJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.userOrganizations.organizationId, schema.organizations.id))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, user.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true), (0, drizzle_orm_1.eq)(schema.organizations.isActive, true)));
                        // Get user buildings (through organization relationships)
                        const userBuildings = await db_1.db
                            .select({
                            id: schema.buildings.id,
                            name: schema.buildings.name,
                        })
                            .from(schema.userOrganizations)
                            .innerJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.userOrganizations.organizationId, schema.buildings.organizationId))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, user.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true)));
                        // Get user residences
                        const userResidences = await db_1.db
                            .select({
                            id: schema.residences.id,
                            unitNumber: schema.residences.unitNumber,
                            buildingId: schema.residences.buildingId,
                            buildingName: schema.buildings.name,
                        })
                            .from(schema.userResidences)
                            .innerJoin(schema.residences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                            .innerJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id))
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, user.id), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)));
                        return {
                            ...user,
                            organizations: userOrgs || [],
                            buildings: userBuildings || [],
                            residences: userResidences || [],
                        };
                    }
                    catch (error) {
                        console.error('‚ùå Error getting user assignments:', error);
                        // Return user with empty assignments if there's an error
                        return {
                            ...user,
                            organizations: [],
                            buildings: [],
                            residences: [],
                        };
                    }
                }));
                usersWithAssignments.push(...batchResults);
            }
            return { users: usersWithAssignments, total };
        }
        catch (error) {
            console.error('‚ùå Critical error getting paginated users with assignments:', error);
            // Return empty result on critical error
            return { users: [], total: 0 };
        }
    }
    /**
     * Retrieves users from organizations that a specific user has access to.
     * @param userId
     */
    async getUsersByOrganizations(userId) {
        return this.withOptimizations('getUsersByOrganizations', `users_by_org:${userId}`, 'users', async () => {
            // First, get organization IDs that the user has access to
            const userOrgs = await db_1.db
                .select({ organizationId: schema.userOrganizations.organizationId })
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, userId), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
            if (userOrgs.length === 0) {
                return [];
            }
            const organizationIds = userOrgs.map((org) => org.organizationId);
            // Then get all users from those organizations
            return db_1.db
                .select({
                id: schema.users.id,
                username: schema.users.username,
                password: schema.users.password,
                email: schema.users.email,
                firstName: schema.users.firstName,
                lastName: schema.users.lastName,
                phone: schema.users.phone,
                profileImage: schema.users.profileImage,
                language: schema.users.language,
                role: schema.users.role,
                isActive: schema.users.isActive,
                lastLoginAt: schema.users.lastLoginAt,
                createdAt: schema.users.createdAt,
                updatedAt: schema.users.updatedAt,
            })
                .from(schema.users)
                .innerJoin(schema.userOrganizations, (0, drizzle_orm_1.eq)(schema.users.id, schema.userOrganizations.userId))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.users.isActive, true), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true), (0, drizzle_orm_1.inArray)(schema.userOrganizations.organizationId, organizationIds)))
                .orderBy(schema.users.firstName, schema.users.lastName);
        });
    }
    /**
     * Gets paginated users with optimized query structure.
     * @param options
     * @param _options
     */
    async getPaginatedUsers(_options) {
        database_optimization_1.PaginationHelper.validatePagination(_options);
        const cacheKey = `paginated_users:${_options.page}:${_options.pageSize}:${_options.sortBy}:${_options.sortDirection}`;
        // Try cache first
        const cached = query_cache_1.queryCache.get('users', cacheKey);
        if (cached) {
            return cached;
        }
        // Get total count using covering index
        const [{ count: total }] = await db_1.db
            .select({ count: (0, drizzle_orm_1.count)() })
            .from(schema.users)
            .where((0, drizzle_orm_1.eq)(schema.users.isActive, true));
        // Get paginated results with LIMIT and optimized ORDER BY
        const users = await db_1.db
            .select()
            .from(schema.users)
            .where((0, drizzle_orm_1.eq)(schema.users.isActive, true))
            .orderBy(_options.sortDirection === 'DESC' ? (0, drizzle_orm_1.desc)(schema.users.createdAt) : schema.users.createdAt)
            .limit(_options.pageSize)
            .offset((_options.page - 1) * _options.pageSize);
        const result = { users, total };
        query_cache_1.queryCache.set('users', cacheKey, result);
        return result;
    }
    /**
     * Gets buildings with residents using EXISTS instead of IN subquery.
     * @param organizationId
     * @param limit
     */
    async getBuildingsWithResidents(organizationId, limit = 50) {
        const cacheKey = `buildings_with_residents:${organizationId}:${limit}`;
        return this.withOptimizations('getBuildingsWithResidents', cacheKey, 'buildings', () => db_1.db
            .select()
            .from(schema.buildings)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.buildings.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true), (0, drizzle_orm_2.exists)(db_1.db
            .select()
            .from(schema.residences)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id), (0, drizzle_orm_1.eq)(schema.residences.isActive, true))))))
            .limit(limit) // Always use LIMIT for large result sets
        );
    }
    /**
     * Searches users with optimized covering index and LIMIT.
     * @param query
     * @param limit
     */
    async searchUsers(query, limit = 20) {
        const cacheKey = `search_users:${query}:${limit}`;
        return this.withOptimizations('searchUsers', cacheKey, 'users', () => db_1.db
            .select()
            .from(schema.users)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.users.isActive, true), (0, drizzle_orm_1.or)((0, drizzle_orm_1.like)(schema.users.email, `%${query}%`), (0, drizzle_orm_1.like)(schema.users.firstName, `%${query}%`), (0, drizzle_orm_1.like)(schema.users.lastName, `%${query}%`))))
            .limit(limit) // Always limit search results
            .orderBy(schema.users.lastName, schema.users.firstName));
    }
    /**
     * Gets financial summary using materialized view for complex aggregations.
     * @param buildingId
     */
    async getFinancialSummary(buildingId) {
        const cacheKey = `financial_summary:${buildingId}`;
        return this.withOptimizations('getFinancialSummary', cacheKey, 'financial', async () => {
            // Use materialized view for complex aggregations
            const summary = await db_1.db.execute((0, drizzle_orm_2.sql) `SELECT * FROM mv_financial_summary WHERE building_id = ${buildingId} ORDER BY month DESC LIMIT 12`);
            return summary.rows;
        });
    }
    /**
     * Gets building statistics using materialized view.
     * @param buildingId
     */
    async getBuildingStats(buildingId) {
        const cacheKey = `building_stats:${buildingId}`;
        return this.withOptimizations('getBuildingStats', cacheKey, 'buildings', async () => {
            // Use materialized view for dashboard statistics
            const stats = await db_1.db.execute((0, drizzle_orm_2.sql) `SELECT * FROM mv_building_stats WHERE building_id = ${buildingId}`);
            return stats.rows[0];
        });
    }
    /**
     * Retrieves a specific user by ID with caching.
     * @param id
     */
    async getUser(id) {
        return this.withOptimizations('getUser', `user:${id}`, 'users', async () => {
            const result = await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, id));
            // User lookup completed
            return result[0];
        });
    }
    /**
     * Retrieves a user by email with caching.
     * @param email
     */
    async getUserByEmail(email) {
        return this.withOptimizations('getUserByEmail', `user_email:${email}`, 'users', async () => {
            const result = await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, email));
            return result[0];
        });
    }
    /**
     * Creates a new user with cache invalidation.
     * @param insertUser
     */
    async createUser(insertUser) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createUser', async () => {
            // Automatically set demo password for demo role users
            let password = insertUser.password;
            const isDemoRole = ['demo_manager', 'demo_tenant', 'demo_resident'].includes(insertUser.role);
            if (isDemoRole) {
                // Always set the standard demo password hash for demo users, regardless of provided password
                password = '$2b$12$cOc/QjMjzlhqAQqF2b/MTOZr2QAtERbXJGd4OSa1CXMlF04FC3F02'; // demo123456
                console.log('üé≠ Setting demo password for user with role:', insertUser.role);
            }
            // Ensure username uniqueness with random numbers if collision occurs
            let uniqueUsername = insertUser.username;
            let attempts = 0;
            const maxAttempts = 10;
            // Check for username collision
            let existingUser = await db_1.db
                .select({ username: schema.users.username })
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.username, uniqueUsername))
                .limit(1);
            while (existingUser.length > 0 && attempts < maxAttempts) {
                // Generate random 4-digit suffix
                const randomSuffix = Math.floor(1000 + Math.random() * 9000);
                uniqueUsername = `${insertUser.username}${randomSuffix}`;
                attempts++;
                existingUser = await db_1.db
                    .select({ username: schema.users.username })
                    .from(schema.users)
                    .where((0, drizzle_orm_1.eq)(schema.users.username, uniqueUsername))
                    .limit(1);
            }
            if (attempts >= maxAttempts && existingUser.length > 0) {
                throw new Error('Unable to generate unique username after maximum attempts');
            }
            // Filter only the fields that exist in the database schema
            const userData = {
                username: uniqueUsername,
                email: insertUser.email,
                password,
                firstName: insertUser.firstName,
                lastName: insertUser.lastName,
                phone: insertUser.phone || '',
                profileImage: insertUser.profileImage,
                language: insertUser.language || 'fr',
                role: insertUser.role,
                isActive: true, // Default value for new users
            };
            try {
                const inserted = await db_1.db.insert(schema.users).values([userData]).returning();
                return inserted;
            }
            catch (error) {
                console.error('‚ùå Error creating user:', error);
                throw error;
            }
        });
        // Invalidate related caches
        query_cache_1.CacheInvalidator.invalidateUserCaches('*');
        return result[0];
    }
    /**
     * Updates a user with cache invalidation.
     * @param id
     * @param updates
     */
    async updateUser(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateUser', async () => {
            return db_1.db
                .update(schema.users)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.users.id, id))
                .returning();
        });
        // Invalidate specific user caches
        query_cache_1.CacheInvalidator.invalidateUserCaches(id);
        return result[0];
    }
    /**
     * Retrieves organizations for a specific user.
     * @param userId
     */
    async getUserOrganizations(userId) {
        return this.withOptimizations('getUserOrganizations', `user_orgs:${userId}`, 'users', async () => {
            const result = await db_1.db
                .select({
                organizationId: schema.userOrganizations.organizationId,
            })
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, userId), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
            return result;
        });
    }
    /**
     * Retrieves residences for a specific user.
     * @param userId
     */
    async getUserResidences(userId) {
        return this.withOptimizations('getUserResidences', `user_residences:${userId}`, 'residences', async () => {
            const result = await db_1.db
                .select({
                residenceId: schema.userResidences.residenceId,
            })
                .from(schema.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, userId), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true)));
            return result;
        });
    }
    // Organization operations with optimization
    /**
     * Retrieves all active organizations with caching.
     */
    async getOrganizations() {
        return this.withOptimizations('getOrganizations', 'all_organizations', 'organizations', () => db_1.db.select().from(schema.organizations).where((0, drizzle_orm_1.eq)(schema.organizations.isActive, true)));
    }
    /**
     * Retrieves an organization by ID with caching.
     * @param id
     */
    async getOrganization(id) {
        return this.withOptimizations('getOrganization', `organization:${id}`, 'organizations', async () => {
            const result = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, id));
            return result[0];
        });
    }
    /**
     * Creates a new organization with cache invalidation.
     * @param insertOrganization
     */
    async createOrganization(insertOrganization) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createOrganization', async () => {
            return db_1.db.insert(schema.organizations).values(insertOrganization).returning();
        });
        // Invalidate organization caches
        query_cache_1.queryCache.invalidate('organizations');
        return result[0];
    }
    // Building operations with optimization
    /**
     * Retrieves buildings by organization with caching.
     * @param organizationId
     */
    async getBuildingsByOrganization(organizationId) {
        return this.withOptimizations('getBuildingsByOrganization', `org_buildings:${organizationId}`, 'buildings', () => db_1.db
            .select()
            .from(schema.buildings)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.buildings.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true))));
    }
    /**
     * Retrieves a building by ID with caching.
     * @param id
     */
    async getBuilding(id) {
        return this.withOptimizations('getBuilding', `building:${id}`, 'buildings', async () => {
            const result = await db_1.db.select().from(schema.buildings).where((0, drizzle_orm_1.eq)(schema.buildings.id, id));
            return result[0];
        });
    }
    /**
     * Creates a new building with cache invalidation.
     * @param insertBuilding
     */
    async createBuilding(insertBuilding) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createBuilding', async () => {
            return db_1.db.insert(schema.buildings).values([insertBuilding]).returning();
        });
        // Invalidate building caches
        query_cache_1.CacheInvalidator.invalidateBuildingCaches('*');
        return result[0];
    }
    // Residence operations with optimization
    /**
     * Retrieves residences by building with caching.
     * @param buildingId
     */
    async getResidencesByBuilding(buildingId) {
        return this.withOptimizations('getResidencesByBuilding', `building_residences:${buildingId}`, 'residences', () => db_1.db
            .select()
            .from(schema.residences)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)))
            .orderBy(schema.residences.unitNumber));
    }
    /**
     * Retrieves a residence by ID with caching.
     * @param id
     */
    async getResidence(id) {
        return this.withOptimizations('getResidence', `residence:${id}`, 'residences', async () => {
            const result = await db_1.db.select().from(schema.residences).where((0, drizzle_orm_1.eq)(schema.residences.id, id));
            return result[0];
        });
    }
    /**
     * Creates a new residence with cache invalidation.
     * @param insertResidence
     */
    async createResidence(insertResidence) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createResidence', async () => {
            return db_1.db.insert(schema.residences).values([insertResidence]).returning();
        });
        // Invalidate residence caches
        query_cache_1.CacheInvalidator.invalidateResidenceCaches('*');
        return result[0];
    }
    // Additional optimized methods for frequently accessed data
    /**
     * Gets user residences with full details - for complex residence views.
     * @param userId
     */
    async getUserResidencesWithDetails(userId) {
        return this.withOptimizations('getUserResidencesWithDetails', `user_residences_details:${userId}`, 'residences', () => db_1.db
            .select({
            residence: schema.residences,
            building: schema.buildings,
            userResidence: schema.userResidences,
        })
            .from(schema.userResidences)
            .innerJoin(schema.residences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
            .innerJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id))
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, userId), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true))));
    }
    /**
     * Gets active bills for a residence - frequently queried.
     * @param residenceId
     */
    async getActiveBillsByResidence(residenceId) {
        return this.withOptimizations('getActiveBillsByResidence', `residence_bills:${residenceId}`, 'bills', () => db_1.db
            .select()
            .from(schema.bills)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.bills.residenceId, residenceId), (0, drizzle_orm_1.or)((0, drizzle_orm_1.eq)(schema.bills.status, 'sent'), (0, drizzle_orm_1.eq)(schema.bills.status, 'overdue'))))
            .orderBy((0, drizzle_orm_1.desc)(schema.bills.dueDate)));
    }
    /**
     * Gets maintenance requests for a residence - frequently accessed.
     * @param residenceId
     */
    async getMaintenanceRequestsByResidence(residenceId) {
        return this.withOptimizations('getMaintenanceRequestsByResidence', `residence_maintenance:${residenceId}`, 'maintenance', () => db_1.db
            .select()
            .from(schema.maintenanceRequests)
            .where((0, drizzle_orm_1.eq)(schema.maintenanceRequests.residenceId, residenceId))
            .orderBy((0, drizzle_orm_1.desc)(schema.maintenanceRequests.createdAt)));
    }
    // Missing Organization operations
    /**
     * Gets organization by name with caching.
     * @param name
     */
    async getOrganizationByName(name) {
        return this.withOptimizations('getOrganizationByName', `org_name:${name}`, 'organizations', async () => {
            const result = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.name, name));
            return result[0];
        });
    }
    /**
     * Updates organization with cache invalidation.
     * @param id
     * @param updates
     */
    async updateOrganization(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateOrganization', async () => {
            return db_1.db
                .update(schema.organizations)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, id))
                .returning();
        });
        query_cache_1.CacheInvalidator.invalidateUserCaches('*');
        return result[0];
    }
    // Missing Building operations
    /**
     * Gets all buildings with caching.
     */
    async getBuildings() {
        return this.withOptimizations('getBuildings', 'all_buildings', 'buildings', () => db_1.db.select().from(schema.buildings).where((0, drizzle_orm_1.eq)(schema.buildings.isActive, true)));
    }
    /**
     * Updates building with cache invalidation.
     * @param id
     * @param updates
     */
    async updateBuilding(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateBuilding', async () => {
            return db_1.db
                .update(schema.buildings)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.buildings.id, id))
                .returning();
        });
        query_cache_1.CacheInvalidator.invalidateBuildingCaches(id);
        return result[0];
    }
    /**
     * Deletes building (soft delete).
     * @param id
     */
    async deleteBuilding(id) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteBuilding', async () => {
            return db_1.db
                .update(schema.buildings)
                .set({ isActive: false, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.buildings.id, id))
                .returning();
        });
        query_cache_1.CacheInvalidator.invalidateBuildingCaches(id);
        return result.length > 0;
    }
    // Missing Residence operations
    /**
     * Gets all residences with caching.
     */
    async getResidences() {
        return this.withOptimizations('getResidences', 'all_residences', 'residences', () => db_1.db.select().from(schema.residences).where((0, drizzle_orm_1.eq)(schema.residences.isActive, true)));
    }
    /**
     * Updates residence with cache invalidation.
     * @param id
     * @param updates
     */
    async updateResidence(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateResidence', async () => {
            return db_1.db
                .update(schema.residences)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.residences.id, id))
                .returning();
        });
        query_cache_1.CacheInvalidator.invalidateResidenceCaches(id);
        return result[0];
    }
    /**
     * Deletes residence (soft delete).
     * @param id
     */
    async deleteResidence(id) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteResidence', async () => {
            return db_1.db
                .update(schema.residences)
                .set({ isActive: false, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.residences.id, id))
                .returning();
        });
        query_cache_1.CacheInvalidator.invalidateResidenceCaches(id);
        return result.length > 0;
    }
    // Development Pillar operations
    /**
     * Gets all development pillars.
     */
    async getPillars() {
        return this.withOptimizations('getPillars', 'all_pillars', 'pillars', () => db_1.db.select().from(schema.developmentPillars));
    }
    /**
     * Gets development pillar by ID.
     * @param id
     */
    async getPillar(id) {
        return this.withOptimizations('getPillar', `pillar:${id}`, 'pillars', async () => {
            const result = await db_1.db
                .select()
                .from(schema.developmentPillars)
                .where((0, drizzle_orm_1.eq)(schema.developmentPillars.id, id));
            return result[0];
        });
    }
    /**
     * Creates development pillar.
     * @param pillar
     */
    async createPillar(pillar) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createPillar', async () => {
            return db_1.db.insert(schema.developmentPillars).values(pillar).returning();
        });
        query_cache_1.queryCache.invalidate('pillars');
        return result[0];
    }
    /**
     * Updates development pillar.
     * @param id
     * @param pillar
     */
    async updatePillar(id, pillar) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updatePillar', async () => {
            return db_1.db
                .update(schema.developmentPillars)
                .set({ ...pillar, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.developmentPillars.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('pillars');
        return result[0];
    }
    // Workspace Status operations
    /**
     * Gets all workspace statuses.
     */
    async getWorkspaceStatuses() {
        return this.withOptimizations('getWorkspaceStatuses', 'all_workspace_statuses', 'workspace_status', () => db_1.db.select().from(schema.workspaceStatus));
    }
    /**
     * Gets workspace status by component.
     * @param component
     */
    async getWorkspaceStatus(component) {
        return this.withOptimizations('getWorkspaceStatus', `workspace_status:${component}`, 'workspace_status', async () => {
            const result = await db_1.db
                .select()
                .from(schema.workspaceStatus)
                .where((0, drizzle_orm_1.eq)(schema.workspaceStatus.component, component));
            return result[0];
        });
    }
    /**
     * Creates workspace status.
     * @param status
     */
    async createWorkspaceStatus(status) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createWorkspaceStatus', async () => {
            return db_1.db.insert(schema.workspaceStatus).values(status).returning();
        });
        query_cache_1.queryCache.invalidate('workspace_status');
        return result[0];
    }
    /**
     * Updates workspace status.
     * @param component
     * @param status
     */
    async updateWorkspaceStatus(component, status) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateWorkspaceStatus', async () => {
            return db_1.db
                .update(schema.workspaceStatus)
                .set({ status })
                .where((0, drizzle_orm_1.eq)(schema.workspaceStatus.component, component))
                .returning();
        });
        query_cache_1.queryCache.invalidate('workspace_status');
        return result[0];
    }
    // Quality Metrics operations
    /**
     * Gets all quality metrics.
     */
    async getQualityMetrics() {
        return this.withOptimizations('getQualityMetrics', 'all_quality_metrics', 'quality_metrics', () => db_1.db.select().from(schema.qualityMetrics));
    }
    /**
     * Creates quality metric.
     * @param metric
     */
    async createQualityMetric(metric) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createQualityMetric', async () => {
            return db_1.db.insert(schema.qualityMetrics).values(metric).returning();
        });
        query_cache_1.queryCache.invalidate('quality_metrics');
        return result[0];
    }
    // Framework Configuration operations
    /**
     * Gets all framework configurations.
     */
    async getFrameworkConfigs() {
        return this.withOptimizations('getFrameworkConfigs', 'all_framework_configs', 'framework_configs', () => db_1.db.select().from(schema.frameworkConfiguration));
    }
    /**
     * Gets framework config by key.
     * @param key
     * @param _key
     */
    async getFrameworkConfig(_key) {
        return this.withOptimizations('getFrameworkConfig', `framework_config:${_key}`, 'framework_configs', async () => {
            const result = await db_1.db
                .select()
                .from(schema.frameworkConfiguration)
                .where((0, drizzle_orm_1.eq)(schema.frameworkConfiguration._key, _key));
            return result[0];
        });
    }
    /**
     * Sets framework configuration.
     * @param config
     */
    async setFrameworkConfig(config) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('setFrameworkConfig', async () => {
            return db_1.db
                .insert(schema.frameworkConfiguration)
                .values(config)
                .onConflictDoUpdate({
                target: schema.frameworkConfiguration._key,
                set: { _value: config._value, updatedAt: new Date() },
            })
                .returning();
        });
        query_cache_1.queryCache.invalidate('framework_configs');
        return result[0];
    }
    // Improvement Suggestions operations
    /**
     * Gets all improvement suggestions.
     */
    async getImprovementSuggestions() {
        return this.withOptimizations('getImprovementSuggestions', 'all_improvement_suggestions', 'improvement_suggestions', () => db_1.db.select().from(schema.improvementSuggestions));
    }
    /**
     * Gets top improvement suggestions.
     * @param limit
     */
    async getTopImprovementSuggestions(limit) {
        return this.withOptimizations('getTopImprovementSuggestions', `top_suggestions:${limit}`, 'improvement_suggestions', () => db_1.db
            .select()
            .from(schema.improvementSuggestions)
            .orderBy((0, drizzle_orm_1.desc)(schema.improvementSuggestions.priority), (0, drizzle_orm_1.desc)(schema.improvementSuggestions.createdAt))
            .limit(limit));
    }
    /**
     * Creates improvement suggestion.
     * @param suggestion
     */
    async createImprovementSuggestion(suggestion) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createImprovementSuggestion', async () => {
            return db_1.db
                .insert(schema.improvementSuggestions)
                .values([
                {
                    ...suggestion,
                    category: suggestion.category,
                },
            ])
                .returning();
        });
        query_cache_1.queryCache.invalidate('improvement_suggestions');
        return result[0];
    }
    /**
     * Clears new suggestions.
     */
    async clearNewSuggestions() {
        await performance_monitoring_1.dbPerformanceMonitor.trackQuery('clearNewSuggestions', async () => {
            return db_1.db
                .update(schema.improvementSuggestions)
                .set({ status: 'Acknowledged' })
                .where((0, drizzle_orm_1.eq)(schema.improvementSuggestions.status, 'New'));
        });
        query_cache_1.queryCache.invalidate('improvement_suggestions');
    }
    /**
     * Updates suggestion status.
     * @param id
     * @param status
     */
    async updateSuggestionStatus(id, status) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateSuggestionStatus', async () => {
            return db_1.db
                .update(schema.improvementSuggestions)
                .set({ status })
                .where((0, drizzle_orm_1.eq)(schema.improvementSuggestions.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('improvement_suggestions');
        return result[0];
    }
    // Features operations
    /**
     * Gets all features.
     */
    async getFeatures() {
        return this.withOptimizations('getFeatures', 'all_features', 'features', () => db_1.db.select().from(schema.features));
    }
    /**
     * Gets features by status.
     * @param status
     */
    async getFeaturesByStatus(status) {
        return this.withOptimizations('getFeaturesByStatus', `features_status:${status}`, 'features', () => db_1.db
            .select()
            .from(schema.features)
            .where((0, drizzle_orm_1.eq)(schema.features.status, status)));
    }
    /**
     * Gets features by category.
     * @param category
     */
    async getFeaturesByCategory(category) {
        return this.withOptimizations('getFeaturesByCategory', `features_category:${category}`, 'features', () => db_1.db
            .select()
            .from(schema.features)
            .where((0, drizzle_orm_1.eq)(schema.features.category, category)));
    }
    /**
     * Gets public roadmap features.
     */
    async getPublicRoadmapFeatures() {
        return this.withOptimizations('getPublicRoadmapFeatures', 'public_roadmap_features', 'features', () => db_1.db.select().from(schema.features).where((0, drizzle_orm_1.eq)(schema.features.isPublicRoadmap, true)));
    }
    /**
     * Creates feature.
     * @param feature
     */
    async createFeature(feature) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createFeature', async () => {
            return db_1.db.insert(schema.features).values([feature]).returning();
        });
        query_cache_1.queryCache.invalidate('features');
        return result[0];
    }
    /**
     * Updates feature.
     * @param id
     * @param updates
     */
    async updateFeature(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateFeature', async () => {
            return db_1.db
                .update(schema.features)
                .set(updates)
                .where((0, drizzle_orm_1.eq)(schema.features.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('features');
        return result[0];
    }
    /**
     * Deletes feature.
     * @param id
     */
    async deleteFeature(id) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteFeature', async () => {
            return db_1.db.delete(schema.features).where((0, drizzle_orm_1.eq)(schema.features.id, id)).returning();
        });
        query_cache_1.queryCache.invalidate('features');
        return result.length > 0;
    }
    // Actionable Items operations
    /**
     * Gets actionable items by feature.
     * @param featureId
     */
    async getActionableItemsByFeature(featureId) {
        return this.withOptimizations('getActionableItemsByFeature', `actionable_items:${featureId}`, 'actionable_items', () => db_1.db
            .select()
            .from(schema.actionableItems)
            .where((0, drizzle_orm_1.eq)(schema.actionableItems.featureId, featureId)));
    }
    /**
     * Gets actionable item by ID.
     * @param id
     */
    async getActionableItem(id) {
        return this.withOptimizations('getActionableItem', `actionable_item:${id}`, 'actionable_items', async () => {
            const result = await db_1.db
                .select()
                .from(schema.actionableItems)
                .where((0, drizzle_orm_1.eq)(schema.actionableItems.id, id));
            return result[0];
        });
    }
    /**
     * Creates actionable item.
     * @param item
     */
    async createActionableItem(item) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createActionableItem', async () => {
            return db_1.db.insert(schema.actionableItems).values([item]).returning();
        });
        query_cache_1.queryCache.invalidate('actionable_items');
        return result[0];
    }
    /**
     * Creates multiple actionable items.
     * @param items
     */
    async createActionableItems(items) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createActionableItems', async () => {
            return db_1.db.insert(schema.actionableItems).values(items).returning();
        });
        query_cache_1.queryCache.invalidate('actionable_items');
        return result;
    }
    /**
     * Updates actionable item.
     * @param id
     * @param updates
     */
    async updateActionableItem(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateActionableItem', async () => {
            return db_1.db
                .update(schema.actionableItems)
                .set(updates)
                .where((0, drizzle_orm_1.eq)(schema.actionableItems.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('actionable_items');
        return result[0];
    }
    /**
     * Deletes actionable item.
     * @param id
     */
    async deleteActionableItem(id) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteActionableItem', async () => {
            return db_1.db.delete(schema.actionableItems).where((0, drizzle_orm_1.eq)(schema.actionableItems.id, id)).returning();
        });
        query_cache_1.queryCache.invalidate('actionable_items');
        return result.length > 0;
    }
    /**
     * Deletes actionable items by feature.
     * @param featureId
     */
    async deleteActionableItemsByFeature(featureId) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteActionableItemsByFeature', async () => {
            return db_1.db
                .delete(schema.actionableItems)
                .where((0, drizzle_orm_1.eq)(schema.actionableItems.featureId, featureId))
                .returning();
        });
        query_cache_1.queryCache.invalidate('actionable_items');
        return result.length > 0;
    }
    // Invitation operations
    /**
     * Gets all invitations.
     */
    async getInvitations() {
        return this.withOptimizations('getInvitations', 'all_invitations', 'invitations', () => db_1.db.select().from(schema.invitations));
    }
    /**
     * Gets invitation by ID.
     * @param id
     */
    async getInvitation(id) {
        return this.withOptimizations('getInvitation', `invitation:${id}`, 'invitations', async () => {
            const result = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, id));
            return result[0];
        });
    }
    /**
     * Gets invitation by token.
     * @param token
     */
    async getInvitationByToken(token) {
        return this.withOptimizations('getInvitationByToken', `invitation_token:${token}`, 'invitations', async () => {
            const result = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.token, token));
            return result[0];
        });
    }
    /**
     * Gets invitations by email.
     * @param email
     */
    async getInvitationsByEmail(email) {
        return this.withOptimizations('getInvitationsByEmail', `invitations_email:${email}`, 'invitations', () => db_1.db.select().from(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.email, email)));
    }
    /**
     * Gets invitations by inviter.
     * @param userId
     */
    async getInvitationsByInviter(userId) {
        return this.withOptimizations('getInvitationsByInviter', `invitations_inviter:${userId}`, 'invitations', () => db_1.db.select().from(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.invitedByUserId, userId)));
    }
    /**
     * Gets invitations by status.
     * @param status
     */
    async getInvitationsByStatus(status) {
        return this.withOptimizations('getInvitationsByStatus', `invitations_status:${status}`, 'invitations', () => db_1.db.select().from(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.status, status)));
    }
    /**
     * Creates invitation.
     * @param invitation
     */
    async createInvitation(invitation) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createInvitation', async () => {
            return db_1.db.insert(schema.invitations).values([invitation]).returning();
        });
        query_cache_1.queryCache.invalidate('invitations');
        return result[0];
    }
    /**
     * Updates invitation.
     * @param id
     * @param updates
     */
    async updateInvitation(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateInvitation', async () => {
            return db_1.db
                .update(schema.invitations)
                .set(updates)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('invitations');
        return result[0];
    }
    /**
     * Accepts invitation.
     * @param token
     * @param userData
     * @param userData.firstName
     * @param ipAddress
     * @param userData.lastName
     * @param userAgent
     * @param userData.password
     */
    async acceptInvitation(token, userData, ipAddress, userAgent) {
        return performance_monitoring_1.dbPerformanceMonitor.trackQuery('acceptInvitation', async () => {
            const invitation = await this.getInvitationByToken(token);
            if (!invitation || invitation.status !== 'pending') {
                return null;
            }
            // Create user with required fields
            const user = await this.createUser({
                username: invitation.email.split('@')[0], // Use email prefix as username
                email: invitation.email,
                firstName: userData.firstName,
                lastName: userData.lastName,
                password: userData.password, // This should be hashed
                language: 'en', // Default language
                role: invitation.role,
            });
            // Update invitation
            const updatedInvitation = await this.updateInvitation(invitation.id, {
                status: 'accepted',
                acceptedAt: new Date(),
            });
            return { user, invitation: updatedInvitation };
        });
    }
    /**
     * Cancels invitation.
     * @param id
     * @param cancelledBy
     */
    async cancelInvitation(id, cancelledBy) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('cancelInvitation', async () => {
            return db_1.db
                .update(schema.invitations)
                .set({
                status: 'cancelled',
                cancelledBy,
                cancelledAt: new Date(),
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('invitations');
        return result[0];
    }
    /**
     * Expires old invitations.
     */
    async expireInvitations() {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('expireInvitations', async () => {
            return db_1.db
                .update(schema.invitations)
                .set({ status: 'expired', updatedAt: new Date() })
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitations.status, 'pending'), (0, drizzle_orm_1.lte)(schema.invitations.expiresAt, new Date())))
                .returning();
        });
        query_cache_1.queryCache.invalidate('invitations');
        return result.length;
    }
    /**
     * Deletes invitation.
     * @param id
     */
    async deleteInvitation(id) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteInvitation', async () => {
            return db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.id, id)).returning();
        });
        query_cache_1.queryCache.invalidate('invitations');
        return result.length > 0;
    }
    // Invitation Audit Log operations
    /**
     * Gets invitation audit logs.
     * @param invitationId
     */
    async getInvitationAuditLogs(invitationId) {
        return this.withOptimizations('getInvitationAuditLogs', `invitation_logs:${invitationId}`, 'invitation_logs', () => db_1.db
            .select()
            .from(schema.invitationAuditLog)
            .where((0, drizzle_orm_1.eq)(schema.invitationAuditLog.invitationId, invitationId))
            .orderBy((0, drizzle_orm_1.desc)(schema.invitationAuditLog.createdAt)));
    }
    /**
     * Creates invitation audit log.
     * @param logEntry
     */
    async createInvitationAuditLog(logEntry) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createInvitationAuditLog', async () => {
            return db_1.db.insert(schema.invitationAuditLog).values(logEntry).returning();
        });
        query_cache_1.queryCache.invalidate('invitation_logs');
        return result[0];
    }
    // Permission operations
    /**
     * Gets all permissions.
     */
    async getPermissions() {
        return this.withOptimizations('getPermissions', 'permissions:all', 'permissions', () => db_1.db
            .select()
            .from(schema.permissions)
            .where((0, drizzle_orm_1.eq)(schema.permissions.isActive, true))
            .orderBy(schema.permissions.resourceType, schema.permissions.action));
    }
    /**
     * Gets all role permissions.
     */
    async getRolePermissions() {
        return this.withOptimizations('getRolePermissions', 'role_permissions:all', 'role_permissions', () => db_1.db
            .select()
            .from(schema.rolePermissions)
            .innerJoin(schema.permissions, (0, drizzle_orm_1.eq)(schema.rolePermissions.permissionId, schema.permissions.id))
            .where((0, drizzle_orm_1.eq)(schema.permissions.isActive, true))
            .orderBy(schema.rolePermissions.role, schema.permissions.resourceType));
    }
    /**
     * Gets all user permissions.
     */
    async getUserPermissions() {
        try {
            const results = await db_1.db
                .select()
                .from(schema.userPermissions)
                .innerJoin(schema.permissions, (0, drizzle_orm_1.eq)(schema.userPermissions.permissionId, schema.permissions.id))
                .where((0, drizzle_orm_1.eq)(schema.permissions.isActive, true))
                .orderBy(schema.userPermissions.userId);
            return results || [];
        }
        catch (error) {
            console.error('‚ùå Error getting user permissions:', error);
            return [];
        }
    }
    // Old building document methods removed - using unified documents table
    // Unified Document operations
    async getDocuments(filters) {
        return this.withOptimizations('getDocuments', `documents:${JSON.stringify(filters)}`, 'documents', async () => {
            let query = db_1.db.select().from(schema.documents);
            const conditions = [];
            if (filters?.buildingId) {
                conditions.push((0, drizzle_orm_1.eq)(schema.documents.buildingId, filters.buildingId));
            }
            if (filters?.residenceId) {
                conditions.push((0, drizzle_orm_1.eq)(schema.documents.residenceId, filters.residenceId));
            }
            if (filters?.documentType) {
                conditions.push((0, drizzle_orm_1.eq)(schema.documents.documentType, filters.documentType));
            }
            if (conditions.length > 0) {
                query = query.where((0, drizzle_orm_1.and)(...conditions));
            }
            const result = await query.orderBy((0, drizzle_orm_1.desc)(schema.documents.createdAt));
            return result || [];
        });
    }
    async getDocument(id) {
        return this.withOptimizations('getDocument', `document:${id}`, 'documents', async () => {
            const result = await db_1.db
                .select()
                .from(schema.documents)
                .where((0, drizzle_orm_1.eq)(schema.documents.id, id))
                .limit(1);
            return result[0];
        });
    }
    async createDocument(document) {
        return performance_monitoring_1.dbPerformanceMonitor.trackQuery('createDocument', async () => {
            const result = await db_1.db.insert(schema.documents).values(document).returning();
            // Invalidate related caches
            if (document.buildingId) {
                query_cache_1.queryCache.invalidate('documents', `*buildingId*${document.buildingId}*`);
            }
            if (document.residenceId) {
                query_cache_1.queryCache.invalidate('documents', `*residenceId*${document.residenceId}*`);
            }
            return result[0];
        });
    }
    async updateDocument(id, updates) {
        return performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateDocument', async () => {
            const result = await db_1.db
                .update(schema.documents)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.documents.id, id))
                .returning();
            if (result[0]) {
                // Invalidate caches
                query_cache_1.queryCache.invalidate('documents', `document:${id}`);
                query_cache_1.queryCache.invalidate('documents', '*');
            }
            return result[0];
        });
    }
    async deleteDocument(id) {
        return performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteDocument', async () => {
            const result = await db_1.db
                .delete(schema.documents)
                .where((0, drizzle_orm_1.eq)(schema.documents.id, id))
                .returning({ id: schema.documents.id });
            if (result.length > 0) {
                // Invalidate caches
                query_cache_1.queryCache.invalidate('documents', `document:${id}`);
                query_cache_1.queryCache.invalidate('documents', '*');
                return true;
            }
            return false;
        });
    }
    // Old resident document methods removed - using unified documents table
    // Legacy Document operations (kept for migration purposes)
    /**
     * Gets legacy documents for user.
     * @param userId
     * @param userRole
     * @param organizationId
     * @param residenceIds
     */
    async getDocumentsForUser(userId, userRole, organizationId, residenceIds) {
        return this.withOptimizations('getDocumentsForUser', `legacy_docs:${userId}:${userRole}`, 'documents', async () => {
            return await db_1.db.select().from(schema.documents).orderBy((0, drizzle_orm_1.desc)(schema.documents.createdAt));
        });
    }
    // Password reset operations
    /**
     *
     * @param token
     */
    async createPasswordResetToken(token) {
        const result = await db_1.db.insert(schema.passwordResetTokens).values(token).returning();
        // Token created successfully
        return result[0];
    }
    /**
     *
     * @param tokenValue
     */
    async getPasswordResetToken(tokenValue) {
        return this.withOptimizations('getPasswordResetToken', `token_${tokenValue}`, 'password_reset_tokens', async () => {
            const result = await db_1.db
                .select()
                .from(schema.passwordResetTokens)
                .where((0, drizzle_orm_1.eq)(schema.passwordResetTokens.token, tokenValue))
                .limit(1);
            return result[0];
        });
    }
    /**
     *
     * @param tokenId
     */
    async markPasswordResetTokenAsUsed(tokenId) {
        const result = await db_1.db
            .update(schema.passwordResetTokens)
            .set({
            isUsed: true,
            usedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema.passwordResetTokens.id, tokenId))
            .returning();
        // Token marked as used
        return result[0];
    }
    /**
     *
     */
    async cleanupExpiredPasswordResetTokens() {
        const result = await db_1.db
            .delete(schema.passwordResetTokens)
            .where((0, drizzle_orm_1.lte)(schema.passwordResetTokens.expiresAt, new Date()))
            .returning();
        // Expired tokens cleaned up
        return result.length;
    }
    // Contact operations
    /**
     * Gets all contacts.
     */
    async getContacts() {
        return this.withOptimizations('getContacts', 'all_contacts', 'contacts', () => db_1.db.select().from(schema.contacts).where((0, drizzle_orm_1.eq)(schema.contacts.isActive, true)));
    }
    /**
     * Gets contacts by entity.
     * @param entityId
     * @param entity
     */
    async getContactsByEntity(entityId, entity) {
        return this.withOptimizations('getContactsByEntity', `contacts_entity:${entity}_${entityId}`, 'contacts', () => db_1.db
            .select()
            .from(schema.contacts)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.contacts.entityId, entityId), (0, drizzle_orm_1.eq)(schema.contacts.entity, entity), (0, drizzle_orm_1.eq)(schema.contacts.isActive, true))));
    }
    /**
     * Gets contacts for residence with user data.
     * @param residenceId
     */
    async getContactsForResidence(residenceId) {
        return this.withOptimizations('getContactsForResidence', `contacts_residence:${residenceId}`, 'contacts', () => db_1.db
            .select()
            .from(schema.contacts)
            .innerJoin(schema.users, (0, drizzle_orm_1.eq)(schema.contacts.name, schema.users.email))
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.contacts.entityId, residenceId), (0, drizzle_orm_1.eq)(schema.contacts.entity, 'residence'), (0, drizzle_orm_1.eq)(schema.contacts.isActive, true))));
    }
    /**
     * Creates a new contact.
     * @param contact
     */
    async createContact(contact) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createContact', async () => {
            return db_1.db.insert(schema.contacts).values(contact).returning();
        });
        query_cache_1.queryCache.invalidate('contacts');
        return result[0];
    }
    /**
     * Updates a contact.
     * @param id
     * @param updates
     */
    async updateContact(id, updates) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateContact', async () => {
            return db_1.db
                .update(schema.contacts)
                .set(updates)
                .where((0, drizzle_orm_1.eq)(schema.contacts.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('contacts');
        return result[0];
    }
    /**
     * Deletes a contact.
     * @param id
     */
    async deleteContact(id) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('deleteContact', async () => {
            return db_1.db
                .update(schema.contacts)
                .set({ isActive: false })
                .where((0, drizzle_orm_1.eq)(schema.contacts.id, id))
                .returning();
        });
        query_cache_1.queryCache.invalidate('contacts');
        return result.length > 0;
    }
    /**
     * Gets demands for a user.
     * @param userId
     */
    async getDemandsForUser(userId) {
        return this.withOptimizations('getDemandsForUser', `demands_user:${userId}`, 'demands', () => db_1.db.select().from(schema.demands).where((0, drizzle_orm_1.eq)(schema.demands.userId, userId)));
    }
    /**
     * Gets a specific demand.
     * @param id
     */
    async getDemand(id) {
        return this.withOptimizations('getDemand', `demand:${id}`, 'demands', async () => {
            const result = await db_1.db.select().from(schema.demands).where((0, drizzle_orm_1.eq)(schema.demands.id, id));
            return result[0];
        });
    }
    // Bug operations implementation
    /**
     *
     * @param userId
     * @param userRole
     * @param organizationId
     */
    async getBugsForUser(userId, userRole, organizationId) {
        return this.withOptimizations('getBugsForUser', `bugs:${userRole}:${userId}`, 'bugs', async () => {
            let results;
            if (userRole === 'admin') {
                // Admin can see all bugs
                results = await db_1.db
                    .select()
                    .from(schema.bugs)
                    .orderBy((0, drizzle_orm_1.desc)(schema.bugs.createdAt));
            }
            else if (userRole === 'manager' && organizationId) {
                // For managers, return all bugs for now (can be refined later)
                results = await db_1.db
                    .select()
                    .from(schema.bugs)
                    .orderBy((0, drizzle_orm_1.desc)(schema.bugs.createdAt));
            }
            else {
                // For residents and tenants, return only their own bugs
                results = await db_1.db
                    .select()
                    .from(schema.bugs)
                    .where((0, drizzle_orm_1.eq)(schema.bugs.createdBy, userId))
                    .orderBy((0, drizzle_orm_1.desc)(schema.bugs.createdAt));
            }
            // Get attachment counts and details for each bug
            const bugsWithAttachments = await Promise.all(results.map(async (bug) => {
                const attachments = await db_1.db
                    .select({
                    id: schema.documents.id,
                    name: schema.documents.name,
                    fileName: schema.documents.fileName,
                    fileSize: schema.documents.fileSize,
                    filePath: schema.documents.filePath,
                })
                    .from(schema.documents)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.documents.attachedToType, 'bug'), (0, drizzle_orm_1.eq)(schema.documents.attachedToId, bug.id)));
                return {
                    ...bug,
                    attachmentCount: attachments.length,
                    attachments: attachments.map(att => ({
                        id: att.id,
                        name: att.fileName || att.name,
                        size: parseInt(att.fileSize || '0'),
                        url: `/api/documents/${att.id}/file`,
                        type: att.fileName ? att.fileName.split('.').pop()?.toLowerCase() || 'unknown' : 'unknown'
                    }))
                };
            }));
            return bugsWithAttachments;
        });
    }
    /**
     *
     * @param id
     * @param userId
     * @param userRole
     * @param organizationId
     */
    async getBug(id, userId, userRole, organizationId) {
        const key = `bug:${id}:user:${userId}:${userRole}`;
        console.log(`üîç getBug called with key: ${key}`);
        return (0, query_cache_1.withCache)('bug', key, async () => {
            console.log(`üìä Cache miss for ${key}, querying database...`);
            const result = await db_1.db.select().from(schema.bugs).where((0, drizzle_orm_1.eq)(schema.bugs.id, id));
            const bug = result[0];
            console.log(`üìã Database query result:`, bug ? { id: bug.id, title: bug.title, filePath: bug.filePath, file_path: bug.file_path } : 'undefined');
            if (!bug) {
                return undefined;
            }
            if (userRole === 'admin') {
                return bug;
            }
            if (userRole === 'manager') {
                return bug; // Managers can see all bugs for now
            }
            // Residents and tenants can only see their own bugs
            return bug.createdBy === userId ? bug : undefined;
        });
    }
    /**
     *
     * @param bugData
     */
    async createBug(bugData) {
        const result = await db_1.db
            .insert(schema.bugs)
            .values({
            ...bugData,
            id: crypto_1.default.randomUUID(),
            status: 'new',
            assignedTo: null,
            resolvedAt: null,
            resolvedBy: null,
            notes: null,
            createdAt: new Date(),
            updatedAt: new Date(),
        })
            .returning();
        // Invalidate cache for this user and specific bug queries  
        query_cache_1.queryCache.invalidate('bugs');
        query_cache_1.queryCache.invalidate('bug', `bug:${result[0].id}:*`);
        return result[0];
    }
    /**
     *
     * @param id
     * @param updates
     * @param userId
     * @param userRole
     */
    async updateBug(id, updates, userId, userRole) {
        // First check if the bug exists and get its current data
        const [existingBug] = await db_1.db.select().from(schema.bugs).where((0, drizzle_orm_1.eq)(schema.bugs.id, id));
        if (!existingBug) {
            return undefined;
        }
        // Access control: users can edit their own bugs, admins and managers can edit any bug
        const canEdit = userRole === 'admin' || userRole === 'manager' || existingBug.createdBy === userId;
        if (!canEdit) {
            return undefined;
        }
        const result = await db_1.db
            .update(schema.bugs)
            .set({
            ...updates,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(schema.bugs.id, id))
            .returning();
        if (result[0]) {
            // Invalidate related cache entries
            query_cache_1.queryCache.invalidate('bugs');
        }
        return result[0];
    }
    /**
     *
     * @param id
     * @param userId
     * @param userRole
     */
    async deleteBug(id, userId, userRole) {
        // First check if the bug exists and get its current data
        const [existingBug] = await db_1.db.select().from(schema.bugs).where((0, drizzle_orm_1.eq)(schema.bugs.id, id));
        if (!existingBug) {
            return false;
        }
        // Access control: users can delete their own bugs, admins can delete any bug
        const canDelete = userRole === 'admin' || existingBug.createdBy === userId;
        if (!canDelete) {
            return false;
        }
        const result = await db_1.db.delete(schema.bugs).where((0, drizzle_orm_1.eq)(schema.bugs.id, id)).returning();
        if (result.length > 0) {
            // Invalidate related cache entries
            query_cache_1.queryCache.invalidate('bugs');
            return true;
        }
        return false;
    }
    // Feature Request operations with optimization
    /**
     * Retrieves feature requests for a user with role-based access control.
     * @param userId
     * @param userRole
     * @param organizationId
     */
    async getFeatureRequestsForUser(userId, userRole, organizationId) {
        return this.withOptimizations('getFeatureRequestsForUser', `feature_requests:${userRole}:${userId}`, 'feature_requests', async () => {
            const results = await db_1.db
                .select()
                .from(schema.featureRequests)
                .orderBy((0, drizzle_orm_1.desc)(schema.featureRequests.createdAt));
            // Get attachment counts and details for each feature request
            const requestsWithAttachments = await Promise.all(results.map(async (request) => {
                const attachments = await db_1.db
                    .select({
                    id: schema.documents.id,
                    name: schema.documents.name,
                    filePath: schema.documents.filePath,
                    fileSize: schema.documents.fileSize,
                    mimeType: schema.documents.mimeType,
                })
                    .from(schema.documents)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.documents.attachedToType, 'feature_request'), (0, drizzle_orm_1.eq)(schema.documents.attachedToId, request.id)));
                return {
                    ...request,
                    attachmentCount: attachments.length,
                    attachments: attachments.map(att => ({
                        id: att.id,
                        name: att.name,
                        url: `/api/documents/${att.id}/file`,
                        size: att.fileSize ? parseInt(att.fileSize) : 0,
                        mimeType: att.mimeType,
                    })),
                };
            }));
            // All users can see all feature requests, but non-admins don't see who submitted
            if (userRole === 'admin') {
                return requestsWithAttachments;
            }
            // For non-admin users, hide the createdBy field
            return requestsWithAttachments.map((request) => ({
                ...request,
                createdBy: null,
            }));
        });
    }
    /**
     * Retrieves a specific feature request by ID with role-based access control.
     * @param id
     * @param userId
     * @param userRole
     * @param organizationId
     */
    async getFeatureRequest(id, userId, userRole, organizationId) {
        return this.withOptimizations('getFeatureRequest', `feature_request:${id}:${userRole}`, 'feature_requests', async () => {
            const result = await db_1.db
                .select()
                .from(schema.featureRequests)
                .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, id));
            const featureRequest = result[0];
            if (!featureRequest) {
                return undefined;
            }
            // All users can see any feature request
            if (userRole === 'admin') {
                return featureRequest;
            }
            // For non-admin users, hide the createdBy field
            return {
                ...featureRequest,
                createdBy: null,
            };
        });
    }
    /**
     * Creates a new feature request.
     * @param featureRequestData
     */
    async createFeatureRequest(featureRequestData) {
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('createFeatureRequest', async () => {
            return db_1.db
                .insert(schema.featureRequests)
                .values({
                ...featureRequestData,
                id: crypto_1.default.randomUUID(),
                status: 'submitted',
                upvoteCount: 0,
                assignedTo: null,
                reviewedBy: null,
                reviewedAt: null,
                adminNotes: null,
                mergedIntoId: null,
                createdAt: new Date(),
                updatedAt: new Date(),
            })
                .returning();
        });
        // Invalidate cache
        query_cache_1.queryCache.invalidate('feature_requests');
        return result[0];
    }
    /**
     * Updates a feature request with role-based permissions.
     * Users can edit their own, managers can edit within org, admins can edit all.
     * @param id
     * @param updates
     * @param userId
     * @param userRole
     */
    async updateFeatureRequest(id, updates, userId, userRole) {
        // Get existing feature request to check permissions
        const existingFeatureRequest = await db_1.db
            .select()
            .from(schema.featureRequests)
            .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, id))
            .limit(1);
        if (!existingFeatureRequest[0]) {
            return undefined;
        }
        // Check permissions: users can edit their own, admins can edit all
        const canEdit = userRole === 'admin' || existingFeatureRequest[0].createdBy === userId;
        if (!canEdit) {
            return undefined;
        }
        const result = await performance_monitoring_1.dbPerformanceMonitor.trackQuery('updateFeatureRequest', async () => {
            return db_1.db
                .update(schema.featureRequests)
                .set({
                ...updates,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, id))
                .returning();
        });
        if (result[0]) {
            // Invalidate related cache entries
            query_cache_1.queryCache.invalidate('feature_requests');
        }
        return result[0];
    }
    /**
     * Deletes a feature request (admin only).
     * @param id
     * @param userId
     * @param userRole
     */
    async deleteFeatureRequest(id, userId, userRole) {
        // Only admins can delete feature requests
        if (userRole !== 'admin') {
            return false;
        }
        // First delete all upvotes for this feature request
        await db_1.db
            .delete(schema.featureRequestUpvotes)
            .where((0, drizzle_orm_1.eq)(schema.featureRequestUpvotes.featureRequestId, id));
        const result = await db_1.db
            .delete(schema.featureRequests)
            .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, id))
            .returning();
        if (result.length > 0) {
            // Invalidate related cache entries
            query_cache_1.queryCache.invalidate('feature_requests');
            query_cache_1.queryCache.invalidate('feature_request_upvotes');
            return true;
        }
        return false;
    }
    /**
     * Upvotes a feature request.
     * @param upvoteData
     */
    async upvoteFeatureRequest(upvoteData) {
        const { featureRequestId, userId } = upvoteData;
        try {
            // Check if feature request exists
            const featureRequestResult = await db_1.db
                .select()
                .from(schema.featureRequests)
                .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, featureRequestId));
            if (featureRequestResult.length === 0) {
                return {
                    success: false,
                    message: 'Feature request not found',
                };
            }
            // Check if user has already upvoted this feature request
            const existingUpvote = await db_1.db
                .select()
                .from(schema.featureRequestUpvotes)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.featureRequestUpvotes.featureRequestId, featureRequestId), (0, drizzle_orm_1.eq)(schema.featureRequestUpvotes.userId, userId)));
            if (existingUpvote.length > 0) {
                return {
                    success: false,
                    message: 'You have already upvoted this feature request',
                };
            }
            // Create the upvote
            const upvoteResult = await db_1.db
                .insert(schema.featureRequestUpvotes)
                .values({
                ...upvoteData,
                id: crypto_1.default.randomUUID(),
                createdAt: new Date(),
            })
                .returning();
            // Update the upvote count on the feature request
            const updatedFeatureRequest = await db_1.db
                .update(schema.featureRequests)
                .set({
                upvoteCount: (0, drizzle_orm_1.sql) `${schema.featureRequests.upvoteCount} + 1`,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, featureRequestId))
                .returning();
            // Invalidate cache
            query_cache_1.queryCache.invalidate('feature_requests');
            query_cache_1.queryCache.invalidate('feature_request_upvotes');
            return {
                success: true,
                message: 'Feature request upvoted successfully',
                data: {
                    upvote: upvoteResult[0],
                    featureRequest: updatedFeatureRequest[0],
                },
            };
        }
        catch (error) {
            console.error('‚ùå Error upvoting feature request:', error);
            return {
                success: false,
                message: 'Failed to upvote feature request',
            };
        }
    }
    /**
     * Removes an upvote from a feature request.
     * @param featureRequestId
     * @param userId
     */
    async removeFeatureRequestUpvote(featureRequestId, userId) {
        try {
            // Check if feature request exists
            const featureRequestResult = await db_1.db
                .select()
                .from(schema.featureRequests)
                .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, featureRequestId));
            if (featureRequestResult.length === 0) {
                return {
                    success: false,
                    message: 'Feature request not found',
                };
            }
            // Find and remove the upvote
            const removedUpvote = await db_1.db
                .delete(schema.featureRequestUpvotes)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.featureRequestUpvotes.featureRequestId, featureRequestId), (0, drizzle_orm_1.eq)(schema.featureRequestUpvotes.userId, userId)))
                .returning();
            if (removedUpvote.length === 0) {
                return {
                    success: false,
                    message: 'You have not upvoted this feature request',
                };
            }
            // Update the upvote count on the feature request
            const updatedFeatureRequest = await db_1.db
                .update(schema.featureRequests)
                .set({
                upvoteCount: (0, drizzle_orm_1.sql) `GREATEST(0, ${schema.featureRequests.upvoteCount} - 1)`,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.featureRequests.id, featureRequestId))
                .returning();
            // Invalidate cache
            query_cache_1.queryCache.invalidate('feature_requests');
            query_cache_1.queryCache.invalidate('feature_request_upvotes');
            return {
                success: true,
                message: 'Upvote removed successfully',
                data: {
                    featureRequest: updatedFeatureRequest[0],
                },
            };
        }
        catch (error) {
            console.error('‚ùå Error removing feature request upvote:', error);
            return {
                success: false,
                message: 'Failed to remove upvote',
            };
        }
    }
    // Invoice operations
    async getInvoices(filters) {
        try {
            let query = db_1.db.select().from(schema.invoices);
            const conditions = [];
            if (filters) {
                if (filters.buildingId) {
                    conditions.push((0, drizzle_orm_1.eq)(schema.invoices.buildingId, filters.buildingId));
                }
                if (filters.residenceId) {
                    conditions.push((0, drizzle_orm_1.eq)(schema.invoices.residenceId, filters.residenceId));
                }
                if (filters.userId && filters.userRole) {
                    // Apply role-based filtering
                    if (filters.userRole === 'tenant' || filters.userRole === 'resident') {
                        conditions.push((0, drizzle_orm_1.eq)(schema.invoices.createdBy, filters.userId));
                    }
                    // Admin and manager can see all invoices (already filtered by building/residence above)
                }
            }
            if (conditions.length > 0) {
                query = query.where((0, drizzle_orm_1.and)(...conditions));
            }
            const invoices = await query.orderBy((0, drizzle_orm_1.desc)(schema.invoices.createdAt));
            return invoices;
        }
        catch (error) {
            console.error('‚ùå Error fetching invoices:', error);
            return [];
        }
    }
    async getInvoice(id) {
        try {
            const result = await db_1.db
                .select()
                .from(schema.invoices)
                .where((0, drizzle_orm_1.eq)(schema.invoices.id, id))
                .limit(1);
            return result[0];
        }
        catch (error) {
            console.error('‚ùå Error fetching invoice:', error);
            return undefined;
        }
    }
    async createInvoice(invoice) {
        try {
            const result = await db_1.db
                .insert(schema.invoices)
                .values(invoice)
                .returning();
            return result[0];
        }
        catch (error) {
            console.error('‚ùå Error creating invoice:', error);
            throw error;
        }
    }
    async updateInvoice(id, updates) {
        try {
            const result = await db_1.db
                .update(schema.invoices)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema.invoices.id, id))
                .returning();
            return result[0];
        }
        catch (error) {
            console.error('‚ùå Error updating invoice:', error);
            return undefined;
        }
    }
    async deleteInvoice(id) {
        try {
            const result = await db_1.db
                .delete(schema.invoices)
                .where((0, drizzle_orm_1.eq)(schema.invoices.id, id))
                .returning();
            return result.length > 0;
        }
        catch (error) {
            console.error('‚ùå Error deleting invoice:', error);
            return false;
        }
    }
    // Admin-only method to count orphan users
    async countOrphanUsers() {
        console.log('üìä [STORAGE - COUNT] ===== COUNT ORPHAN USERS STARTED =====');
        console.log('‚è∞ [STORAGE - COUNT] Timestamp:', new Date().toISOString());
        try {
            const countQuery = `
        SELECT COUNT(*) as total 
        FROM users u
        WHERE u.is_active = true
          AND NOT EXISTS (
            SELECT 1 FROM user_organizations uo 
            WHERE uo.user_id = u.id AND uo.is_active = true
          )
          AND NOT EXISTS (
            SELECT 1 FROM user_residences ur 
            WHERE ur.user_id = u.id AND ur.is_active = true
          )
      `;
            console.log('üîç [STORAGE - COUNT] Executing SQL query:', countQuery.trim());
            console.log('‚è±Ô∏è [STORAGE - COUNT] Starting database execution...');
            const startTime = Date.now();
            const result = await db_1.db.execute(drizzle_orm_1.sql.raw(countQuery));
            const endTime = Date.now();
            console.log('‚è±Ô∏è [STORAGE - COUNT] Database query completed in:', (endTime - startTime), 'ms');
            console.log('üìà [STORAGE - COUNT] Raw database result:', result.rows);
            const count = parseInt(result.rows[0]?.total || '0');
            console.log('üî¢ [STORAGE - COUNT] Parsed orphan count:', count);
            console.log('üìä [STORAGE - COUNT] ===== COUNT ORPHAN USERS COMPLETED =====');
            return count;
        }
        catch (error) {
            console.error('üí• [STORAGE - COUNT] ===== CRITICAL ERROR =====');
            console.error('‚ùå [STORAGE - COUNT] Error details:', {
                message: error.message,
                stack: error.stack,
                name: error.name,
                code: error.code,
                timestamp: new Date().toISOString()
            });
            console.error('üí• [STORAGE - COUNT] ===== END CRITICAL ERROR =====');
            return 0;
        }
    }
    // Admin-only method to count all users except specified admin
    async countAllUsersExcept(excludeUserId) {
        console.log('üìä [STORAGE - COUNT ALL] ===== COUNT ALL USERS EXCEPT ADMIN STARTED =====');
        console.log('‚è∞ [STORAGE - COUNT ALL] Timestamp:', new Date().toISOString());
        console.log('üîí [STORAGE - COUNT ALL] Excluding admin user ID:', excludeUserId);
        try {
            const countQuery = `
        SELECT COUNT(*) as total 
        FROM users u
        WHERE u.is_active = true
        AND u.id != '${excludeUserId}'
      `;
            console.log('üîç [STORAGE - COUNT ALL] Executing SQL query:', countQuery.trim());
            console.log('‚è±Ô∏è [STORAGE - COUNT ALL] Starting database execution...');
            const startTime = Date.now();
            const result = await db_1.db.execute(drizzle_orm_1.sql.raw(countQuery));
            const endTime = Date.now();
            console.log('‚è±Ô∏è [STORAGE - COUNT ALL] Database query completed in:', (endTime - startTime), 'ms');
            console.log('üìà [STORAGE - COUNT ALL] Raw database result:', result.rows);
            const count = parseInt(result.rows[0]?.total || '0');
            console.log('üî¢ [STORAGE - COUNT ALL] Parsed user count:', count);
            console.log('üìä [STORAGE - COUNT ALL] ===== COUNT ALL USERS EXCEPT ADMIN COMPLETED =====');
            return count;
        }
        catch (error) {
            console.error('üí• [STORAGE - COUNT ALL] ===== CRITICAL ERROR =====');
            console.error('‚ùå [STORAGE - COUNT ALL] Error details:', {
                message: error.message,
                stack: error.stack,
                name: error.name,
                code: error.code,
                timestamp: new Date().toISOString()
            });
            console.error('üí• [STORAGE - COUNT ALL] ===== END CRITICAL ERROR =====');
            return 0;
        }
    }
    // Admin-only method to delete all users except specified admin
    async deleteAllUsersExcept(excludeUserId) {
        console.log('üóëÔ∏è [STORAGE - DELETE ALL] ===== DELETE ALL USERS EXCEPT ADMIN STARTED =====');
        console.log('‚è∞ [STORAGE - DELETE ALL] Timestamp:', new Date().toISOString());
        console.log('üîí [STORAGE - DELETE ALL] Excluding admin user ID:', excludeUserId);
        try {
            // First, let's get the list of users that will be affected for debugging
            const previewQuery = (0, drizzle_orm_1.sql) `SELECT u.id, u.email, u.first_name, u.last_name, u.role
        FROM users u
        WHERE u.is_active = true
          AND u.id != ${excludeUserId}`;
            console.log('üîç [STORAGE - DELETE ALL] Getting preview of users to be deleted...');
            const previewResult = await db_1.db.execute(previewQuery);
            console.log('üë• [STORAGE - DELETE ALL] Users to be deleted:', previewResult.rows);
            // Mark all other users as inactive
            const updateQuery = (0, drizzle_orm_1.sql) `UPDATE users 
        SET is_active = false,
            updated_at = CURRENT_TIMESTAMP
        WHERE is_active = true
          AND id != ${excludeUserId}`;
            console.log('üîß [STORAGE - DELETE ALL] Executing UPDATE query to mark users as inactive...');
            console.log('‚è±Ô∏è [STORAGE - DELETE ALL] Starting update operation...');
            const startTime = Date.now();
            const result = await db_1.db.execute(updateQuery);
            const updateTime = Date.now();
            console.log('‚è±Ô∏è [STORAGE - DELETE ALL] Update operation completed in:', (updateTime - startTime), 'ms');
            console.log('üìä [STORAGE - DELETE ALL] Update result:', result);
            // Count the affected rows
            const countQuery = (0, drizzle_orm_1.sql) `SELECT COUNT(*) as deleted_count
        FROM users u
        WHERE u.is_active = false
          AND u.id != ${excludeUserId}
          AND u.updated_at >= CURRENT_TIMESTAMP - INTERVAL '1 minute'`;
            console.log('üîç [STORAGE - DELETE ALL] Executing count query to verify deletion...');
            const countStartTime = Date.now();
            const countResult = await db_1.db.execute(countQuery);
            const countEndTime = Date.now();
            console.log('‚è±Ô∏è [STORAGE - DELETE ALL] Count query completed in:', (countEndTime - countStartTime), 'ms');
            console.log('üìà [STORAGE - DELETE ALL] Raw count result:', countResult.rows);
            const deletedCount = parseInt(countResult.rows[0]?.deleted_count || '0');
            console.log('üî¢ [STORAGE - DELETE ALL] Final deleted count:', deletedCount);
            console.log('‚è±Ô∏è [STORAGE - DELETE ALL] Total operation time:', (countEndTime - startTime), 'ms');
            console.log('üóëÔ∏è [STORAGE - DELETE ALL] ===== DELETE ALL USERS EXCEPT ADMIN COMPLETED =====');
            return deletedCount;
        }
        catch (error) {
            console.error('üí• [STORAGE - DELETE ALL] ===== CRITICAL ERROR =====');
            console.error('‚ùå [STORAGE - DELETE ALL] Error details:', {
                message: error.message,
                stack: error.stack,
                name: error.name,
                code: error.code,
                excludeUserId: excludeUserId,
                timestamp: new Date().toISOString()
            });
            console.error('üí• [STORAGE - DELETE ALL] ===== END CRITICAL ERROR =====');
            throw error;
        }
    }
    // Admin-only method to delete orphan users (excluding specified admin user)
    async deleteOrphanUsers(excludeUserId) {
        console.log('üóëÔ∏è [STORAGE - DELETE] ===== DELETE ORPHAN USERS STARTED =====');
        console.log('‚è∞ [STORAGE - DELETE] Timestamp:', new Date().toISOString());
        console.log('üîí [STORAGE - DELETE] Excluding admin user ID:', excludeUserId);
        try {
            // First, let's get the list of users that will be affected for debugging
            const previewQuery = (0, drizzle_orm_1.sql) `SELECT u.id, u.email, u.first_name, u.last_name, u.role
        FROM users u
        WHERE u.is_active = true
          AND u.id != ${excludeUserId}
          AND NOT EXISTS (
            SELECT 1 FROM user_organizations uo 
            WHERE uo.user_id = u.id AND uo.is_active = true
          )
          AND NOT EXISTS (
            SELECT 1 FROM user_residences ur 
            WHERE ur.user_id = u.id AND ur.is_active = true
          )`;
            console.log('üîç [STORAGE - DELETE] Getting preview of users to be deleted...');
            const previewResult = await db_1.db.execute(previewQuery);
            console.log('üë• [STORAGE - DELETE] Users to be deleted:', previewResult.rows);
            // Mark orphan users as inactive to avoid foreign key issues
            const updateQuery = (0, drizzle_orm_1.sql) `UPDATE users 
        SET is_active = false,
            updated_at = CURRENT_TIMESTAMP
        WHERE is_active = true
          AND id != ${excludeUserId}
          AND NOT EXISTS (
            SELECT 1 FROM user_organizations uo 
            WHERE uo.user_id = id AND uo.is_active = true
          )
          AND NOT EXISTS (
            SELECT 1 FROM user_residences ur 
            WHERE ur.user_id = id AND ur.is_active = true
          )`;
            console.log('üîß [STORAGE - DELETE] Executing UPDATE query to mark users as inactive...');
            console.log('‚è±Ô∏è [STORAGE - DELETE] Starting update operation...');
            const startTime = Date.now();
            const result = await db_1.db.execute(updateQuery);
            const updateTime = Date.now();
            console.log('‚è±Ô∏è [STORAGE - DELETE] Update operation completed in:', (updateTime - startTime), 'ms');
            console.log('üìä [STORAGE - DELETE] Update result:', result);
            // Count the affected rows
            const countQuery = (0, drizzle_orm_1.sql) `SELECT COUNT(*) as deleted_count
        FROM users u
        WHERE u.is_active = false
          AND u.id != ${excludeUserId}
          AND u.updated_at >= CURRENT_TIMESTAMP - INTERVAL '1 minute'
          AND NOT EXISTS (
            SELECT 1 FROM user_organizations uo 
            WHERE uo.user_id = u.id AND uo.is_active = true
          )
          AND NOT EXISTS (
            SELECT 1 FROM user_residences ur 
            WHERE ur.user_id = u.id AND ur.is_active = true
          )`;
            console.log('üîç [STORAGE - DELETE] Executing count query to verify deletion...');
            const countStartTime = Date.now();
            const countResult = await db_1.db.execute(countQuery);
            const countEndTime = Date.now();
            console.log('‚è±Ô∏è [STORAGE - DELETE] Count query completed in:', (countEndTime - countStartTime), 'ms');
            console.log('üìà [STORAGE - DELETE] Raw count result:', countResult.rows);
            const deletedCount = parseInt(countResult.rows[0]?.deleted_count || '0');
            console.log('üî¢ [STORAGE - DELETE] Final deleted count:', deletedCount);
            console.log('‚è±Ô∏è [STORAGE - DELETE] Total operation time:', (countEndTime - startTime), 'ms');
            console.log('üóëÔ∏è [STORAGE - DELETE] ===== DELETE ORPHAN USERS COMPLETED =====');
            return deletedCount;
        }
        catch (error) {
            console.error('üí• [STORAGE - DELETE] ===== CRITICAL ERROR =====');
            console.error('‚ùå [STORAGE - DELETE] Error details:', {
                message: error.message,
                stack: error.stack,
                name: error.name,
                code: error.code,
                excludeUserId: excludeUserId,
                timestamp: new Date().toISOString()
            });
            console.error('üí• [STORAGE - DELETE] ===== END CRITICAL ERROR =====');
            throw error;
        }
    }
}
exports.OptimizedDatabaseStorage = OptimizedDatabaseStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,