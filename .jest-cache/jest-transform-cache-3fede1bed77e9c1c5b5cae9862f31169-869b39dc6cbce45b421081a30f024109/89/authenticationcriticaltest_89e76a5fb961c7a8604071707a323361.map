{"file":"/home/runner/workspace/tests/critical/authentication-critical.test.ts","mappings":";;AAAA,2CAA0E;AAC1E,wCAAqC;AACrC,gDAA4C;AAC5C,6CAAsC;AAEtC;;;;;;;;;GASG;AAEH,IAAA,kBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAA,kBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,YAAE,EAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,MAAM,SAAS,GAAG,MAAM,OAAE;iBACvB,MAAM,CAAC,EAAE,KAAK,EAAE,IAAA,iBAAG,EAAQ,eAAe,EAAE,CAAC;iBAC7C,IAAI,CAAC,cAAK,CAAC;iBACX,KAAK,CAAC,IAAA,gBAAE,EAAC,cAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;iBAC/B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;YAEzC,qCAAqC;YACrC,IAAI,SAAS,KAAK,CAAC,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC;;;;;;;;;;SAUf,CAAC,CAAC;YACL,CAAC;YAED,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,kFAAkF;YAClF,MAAM,UAAU,GAAG,MAAM,OAAE;iBACxB,MAAM,EAAE;iBACR,IAAI,CAAC,cAAK,CAAC;iBACX,KAAK,CAAC,IAAA,iBAAG,EAAA,mDAAmD,CAAC;iBAC7D,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAE5B,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,MAAM,IAAI,KAAK,CAAC;;;;;;SAMf,CAAC,CAAC;YACL,CAAC;YAED,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAA,gBAAM,EAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1D,IAAA,gBAAM,EAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,0DAA0D;YAC1D,MAAM,WAAW,GAAG,MAAM,OAAE;iBACzB,MAAM,EAAE;iBACR,IAAI,CAAC,cAAK,CAAC;iBACX,KAAK,CAAC,CAAC,CAAC;iBACR,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;YAErB,IAAI,WAAW,KAAK,IAAI,EAAE,CAAC;gBACzB,MAAM,IAAI,KAAK,CAAC;;;;;;SAMf,CAAC,CAAC;YACL,CAAC;YAED,yBAAyB;YACzB,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,IAAA,YAAE,EAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,mDAAmD;YACnD,IAAI,QAAQ,CAAC;YACb,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,IAAI,CAAC;gBACH,QAAQ,GAAG,MAAM,KAAK,CAAC,sCAAsC,EAAE;oBAC7D,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,cAAc,EAAE,kBAAkB;qBACnC;oBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,KAAK,EAAE,kBAAkB;wBACzB,QAAQ,EAAE,eAAe;qBAC1B,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,CAAU,EAAE,CAAC;gBACpB,KAAK,GAAG,CAAC,CAAC;YACZ,CAAC;YAED,IAAI,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC;;;;SAIf,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,sBAAsB;;SAE/D,CAAC,CAAC;YACL,CAAC;YAED,yEAAyE;YACzE,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,wBAAwB;QACjE,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,IAAI,QAAQ,CAAC;YACb,IAAI,KAAK,GAAG,IAAI,CAAC;YAEjB,IAAI,CAAC;gBACH,QAAQ,GAAG,MAAM,KAAK,CAAC,qCAAqC,CAAC,CAAC;YAChE,CAAC;YAAC,OAAO,CAAU,EAAE,CAAC;gBACpB,KAAK,GAAG,CAAC,CAAC;YACZ,CAAC;YAED,IAAI,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACvB,MAAM,IAAI,KAAK,CAAC;;;;SAIf,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,sBAAsB;;SAE/D,CAAC,CAAC;YACL,CAAC;YAED,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,wBAAwB;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,IAAI,aAAa,GAAG,yBAAyB,CAAC;QAC9C,IAAI,UAAkB,CAAC;QAEvB,IAAA,mBAAS,EAAC,KAAK,IAAI,EAAE;YACnB,qDAAqD;YACrD,MAAM,QAAQ,GAAG,MAAM,OAAE,CAAC,MAAM,CAAC,cAAK,CAAC,CAAC,MAAM,CAAC;gBAC7C,QAAQ,EAAE,cAAc;gBACxB,KAAK,EAAE,aAAa;gBACpB,QAAQ,EAAE,8DAA8D,EAAE,UAAU;gBACpF,SAAS,EAAE,UAAU;gBACrB,QAAQ,EAAE,MAAM;gBAChB,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,cAAK,CAAC,EAAE,EAAE,CAAC,CAAC;YAE/B,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,IAAA,kBAAQ,EAAC,KAAK,IAAI,EAAE;YAClB,qBAAqB;YACrB,MAAM,OAAE,CAAC,MAAM,CAAC,cAAK,CAAC,CAAC,KAAK,CAAC,IAAA,gBAAE,EAAC,cAAK,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,oCAAoC;YACpC,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,sCAAsC,EAAE;gBACxE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,KAAK,EAAE,aAAa;oBACpB,QAAQ,EAAE,SAAS;iBACpB,CAAC;aACH,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,CAAC;gBACtB,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC/D,MAAM,IAAI,KAAK,CAAC;;;;UAId,aAAa,CAAC,MAAM;SACrB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;QAC1B,aAAa;;;;SAIZ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;YAC7C,IAAA,gBAAM,EAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACnD,IAAA,gBAAM,EAAC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;YACrC,IAAA,gBAAM,EAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAEjD,sCAAsC;YACtC,MAAM,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACxD,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;YAE9B,6CAA6C;YAC7C,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,qCAAqC,EAAE;gBACtE,OAAO,EAAE;oBACP,QAAQ,EAAE,OAAO,IAAI,EAAE;iBACxB;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC;;;;;UAKd,YAAY,CAAC,MAAM;;SAEpB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;YAC3C,IAAA,gBAAM,EAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YAClC,IAAA,gBAAM,EAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,QAAQ,GAAG,MAAM,OAAE;iBACtB,MAAM,EAAE;iBACR,IAAI,CAAC,cAAK,CAAC;iBACX,KAAK,CAAC,IAAA,gBAAE,EAAC,cAAK,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;iBACrC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAE/B,IAAA,gBAAM,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAA,gBAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;YACxC,IAAA,gBAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB;YAEvE,8CAA8C;YAC9C,IAAA,gBAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,IAAA,YAAE,EAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,0CAA0C;YAC1C,IAAI,cAAc,CAAC;YAEnB,IAAI,CAAC;gBACH,cAAc,GAAG,MAAM,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACnE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC;;;;SAIf,KAAK,CAAC,OAAO;;SAEb,CAAC,CAAC;YACL,CAAC;YAED,IAAA,gBAAM,EAAC,cAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAErC,MAAM,UAAU,GAAG,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;YAC/C,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,OAAE,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAA,iBAAG,EAAQ,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,cAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzF,IAAA,gBAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;gBAC7B,IAAA,gBAAM,EAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC;;;;SAIf,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;;SAExD,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/tests/critical/authentication-critical.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport { db } from '../../server/db';\nimport { users } from '../../shared/schema';\nimport { eq, sql } from 'drizzle-orm';\n\n/**\n * Critical Authentication Test Suite\n * \n * This test MUST catch critical authentication failures that prevent users\n * from accessing the application. It validates:\n * - Essential user accounts exist\n * - Login endpoints are functional\n * - Database connectivity is working\n * - Authentication flow is complete\n */\n\ndescribe('CRITICAL Authentication System', () => {\n  describe('Database User Existence', () => {\n    it('CRITICAL: should have at least one active user in the system', async () => {\n      const userCount = await db\n        .select({ count: sql<number>`count(*)::int` })\n        .from(users)\n        .where(eq(users.isActive, true))\n        .then(result => result[0]?.count || 0);\n\n      // CRITICAL FAILURE if no users exist\n      if (userCount === 0) {\n        throw new Error(`\nðŸš¨ CRITICAL AUTHENTICATION FAILURE ðŸš¨\nNo active users found in database!\n\nThis means:\n- Nobody can login to the application\n- The system is completely inaccessible\n- All authentication will fail with 401 errors\n\nRequired Action: Create at least one user account immediately\n        `);\n      }\n\n      expect(userCount).toBeGreaterThan(0);\n    });\n\n    it('CRITICAL: should verify admin or manager users exist', async () => {\n      // Check for any admin or manager user account (more flexible than specific email)\n      const adminUsers = await db\n        .select()\n        .from(users)\n        .where(sql`role IN ('admin', 'manager') AND is_active = true`)\n        .then(results => results);\n\n      if (adminUsers.length === 0) {\n        throw new Error(`\nðŸš¨ NO ADMIN/MANAGER ACCOUNTS FOUND ðŸš¨\nNo active admin or manager accounts found in the database!\n\nThis prevents administrative access to the application.\nRequired Action: Create at least one admin or manager account immediately\n        `);\n      }\n\n      expect(adminUsers.length).toBeGreaterThan(0);\n      expect(adminUsers.some(user => user.isActive)).toBe(true);\n      expect(adminUsers.some(user => ['admin', 'manager'].includes(user.role))).toBe(true);\n    });\n\n    it('CRITICAL: should have working user table structure', async () => {\n      // Verify the users table exists and has correct structure\n      const tableExists = await db\n        .select()\n        .from(users)\n        .limit(1)\n        .catch(() => null);\n\n      if (tableExists === null) {\n        throw new Error(`\nðŸš¨ DATABASE STRUCTURE FAILURE ðŸš¨\nUsers table is inaccessible or corrupted!\n\nThis means the authentication system cannot function.\nRequired Action: Fix database schema immediately\n        `);\n      }\n\n      // Should not throw error\n      expect(tableExists).not.toBeNull();\n    });\n  });\n\n  describe('Authentication Endpoint Functionality', () => {\n    it('CRITICAL: login endpoint should be accessible and functional', async () => {\n      // Test that the login endpoint exists and responds\n      let response;\n      let error = null;\n\n      try {\n        response = await fetch('http://localhost:5000/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: 'test@example.com',\n            password: 'wrongpassword'\n          })\n        });\n      } catch (e: unknown) {\n        error = e;\n      }\n\n      if (error || !response) {\n        throw new Error(`\nðŸš¨ LOGIN ENDPOINT FAILURE ðŸš¨\nLogin endpoint is not accessible or server is down!\n\nError: ${error instanceof Error ? error.message : 'No response received'}\nRequired Action: Fix server startup or routing immediately\n        `);\n      }\n\n      // Should return proper HTTP response (even if 401 for wrong credentials)\n      expect(response.status).toBeGreaterThan(0);\n      expect(response.status).not.toBe(404); // Endpoint should exist\n    });\n\n    it('CRITICAL: user endpoint should be accessible', async () => {\n      let response;\n      let error = null;\n\n      try {\n        response = await fetch('http://localhost:5000/api/auth/user');\n      } catch (e: unknown) {\n        error = e;\n      }\n\n      if (error || !response) {\n        throw new Error(`\nðŸš¨ USER ENDPOINT FAILURE ðŸš¨\nUser authentication endpoint is not accessible!\n\nError: ${error instanceof Error ? error.message : 'No response received'}\nRequired Action: Fix authentication routes immediately\n        `);\n      }\n\n      expect(response.status).toBeGreaterThan(0);\n      expect(response.status).not.toBe(404); // Endpoint should exist\n    });\n  });\n\n  describe('Authentication Flow Validation', () => {\n    let testUserEmail = 'critical-test@koveo.com';\n    let testUserId: string;\n\n    beforeAll(async () => {\n      // Create a test user for authentication flow testing\n      const testUser = await db.insert(users).values({\n        username: 'criticaltest',\n        email: testUserEmail,\n        password: '$2b$10$MmG3jXpKuT44AMynBAe9JutoL6eSvKvlJ/za/lSY9AFp/J7sB5HYG', // test123\n        firstName: 'Critical',\n        lastName: 'Test',\n        role: 'manager',\n        language: 'en',\n        isActive: true\n      }).returning({ id: users.id });\n\n      testUserId = testUser[0].id;\n    });\n\n    afterAll(async () => {\n      // Clean up test user\n      await db.delete(users).where(eq(users.id, testUserId));\n    });\n\n    it('CRITICAL: complete login flow should work end-to-end', async () => {\n      // Test complete authentication flow\n      const loginResponse = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: testUserEmail,\n          password: 'test123'\n        })\n      });\n\n      if (!loginResponse.ok) {\n        const errorData = await loginResponse.json().catch(() => ({}));\n        throw new Error(`\nðŸš¨ LOGIN FLOW FAILURE ðŸš¨\nAuthentication login failed for valid user!\n\nStatus: ${loginResponse.status}\nError: ${JSON.stringify(errorData)}\nUser: ${testUserEmail}\n\nThis means users cannot login even with correct credentials.\nRequired Action: Fix authentication logic immediately\n        `);\n      }\n\n      const loginData = await loginResponse.json();\n      expect(loginData.message).toBe('Login successful');\n      expect(loginData.user).toBeDefined();\n      expect(loginData.user.email).toBe(testUserEmail);\n\n      // Get session cookie for next request\n      const cookies = loginResponse.headers.get('set-cookie');\n      expect(cookies).toBeDefined();\n\n      // Test that user endpoint works with session\n      const userResponse = await fetch('http://localhost:5000/api/auth/user', {\n        headers: {\n          'Cookie': cookies || ''\n        }\n      });\n\n      if (!userResponse.ok) {\n        throw new Error(`\nðŸš¨ SESSION PERSISTENCE FAILURE ðŸš¨\nUser cannot stay logged in - session not working!\n\nLogin succeeds but user endpoint fails with session.\nStatus: ${userResponse.status}\nRequired Action: Fix session management immediately\n        `);\n      }\n\n      const userData = await userResponse.json();\n      expect(userData.id).toBeDefined();\n      expect(userData.email).toBe(testUserEmail);\n    });\n\n    it('CRITICAL: should validate password hashing is working', async () => {\n      const testUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testUserEmail))\n        .then(results => results[0]);\n\n      expect(testUser).toBeDefined();\n      expect(testUser.password).toBeDefined();\n      expect(testUser.password.startsWith('$2')).toBe(true); // bcrypt format\n\n      // Verify password is not stored in plain text\n      expect(testUser.password).not.toBe('test123');\n      expect(testUser.password.length).toBeGreaterThan(10);\n    });\n  });\n\n  describe('Production Readiness Checks', () => {\n    it('CRITICAL: should ensure application is accessible', async () => {\n      // Test that the main application responds\n      let healthResponse;\n      \n      try {\n        healthResponse = await fetch('http://localhost:5000/api/health');\n      } catch (error) {\n        throw new Error(`\nðŸš¨ APPLICATION INACCESSIBLE ðŸš¨\nApplication server is not responding!\n\nError: ${error.message}\nRequired Action: Fix server startup immediately\n        `);\n      }\n\n      expect(healthResponse.ok).toBe(true);\n      \n      const healthData = await healthResponse.json();\n      expect(healthData.status).toBe('ok');\n    });\n\n    it('CRITICAL: database connection should be working', async () => {\n      try {\n        const dbTest = await db.select({ version: sql<string>`version()` }).from(users).limit(1);\n        expect(dbTest).toBeDefined();\n        expect(Array.isArray(dbTest)).toBe(true);\n      } catch (error) {\n        throw new Error(`\nðŸš¨ DATABASE CONNECTION FAILURE ðŸš¨\nCannot connect to database!\n\nError: ${error instanceof Error ? error.message : 'Unknown error'}\nRequired Action: Fix database connection immediately\n        `);\n      }\n    });\n  });\n});"],"version":3}