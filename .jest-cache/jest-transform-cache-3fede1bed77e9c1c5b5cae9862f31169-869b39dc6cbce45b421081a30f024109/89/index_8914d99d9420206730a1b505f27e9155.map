{"file":"/home/runner/workspace/config/index.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/config/index.ts"],"sourcesContent":["/**\n * Koveo Gestion Utility Configuration.\n *\n * This module provides utility functions and constants for the Quebec property\n * management SaaS platform. All permissions are now managed via database.\n */\n\n/**\n * Quick access to role hierarchies for common permission checks.\n * Hierarchy: admin > manager > resident > tenant.\n */\nexport const ROLE_HIERARCHY = {\n  admin: 4,\n  manager: 3,\n  resident: 2,\n  tenant: 1,\n} as const;\n\n/**\n * Helper function to check if one role has higher or equal privileges than another.\n *\n * @param userRole - The role to check.\n * @param requiredRole - The minimum required role.\n * @returns Boolean indicating if the user role meets the requirement.\n *\n * @example\n * ```typescript\n * const hasAccess = hasRoleOrHigher('admin', 'manager'); // true\n * const hasAccess2 = hasRoleOrHigher('tenant', 'admin'); // false\n * ```\n */\nexport function hasRoleOrHigher(\n  userRole: keyof typeof ROLE_HIERARCHY,\n  requiredRole: keyof typeof ROLE_HIERARCHY\n): boolean {\n  return ROLE_HIERARCHY[userRole] >= ROLE_HIERARCHY[requiredRole];\n}\n\n// Note: All permissions are now managed via database tables:\n// - permissions: stores all available permissions\n// - role_permissions: maps roles to permissions\n// - user_permissions: stores user-specific permission overrides\n\n// Types for backwards compatibility with tests\nexport type Role = 'admin' | 'manager' | 'tenant' | 'resident';\nexport type Permission = string;\nexport interface PermissionsConfig {\n  [role: string]: Permission[];\n}\n\n// Mock permissions for testing - in production, these come from database\nexport const permissions: PermissionsConfig = {\n  admin: [\n    'create:user',\n    'read:user',\n    'update:user',\n    'delete:user',\n    'create:organization',\n    'read:organization',\n    'update:organization',\n    'delete:organization',\n    'create:building',\n    'read:building',\n    'update:building',\n    'delete:building',\n    'create:residence',\n    'read:residence',\n    'update:residence',\n    'delete:residence',\n    'create:document',\n    'read:document',\n    'update:document',\n    'delete:document',\n    'create:invitation',\n    'read:invitation',\n    'update:invitation',\n    'delete:invitation',\n    'create:bill',\n    'read:bill',\n    'update:bill',\n    'delete:bill',\n    'create:maintenance',\n    'read:maintenance',\n    'update:maintenance',\n    'delete:maintenance',\n    'create:audit_log',\n    'read:audit_log',\n    'manage:system',\n    'manage:settings',\n    'assign:roles',\n    'update:framework_config',\n    'read:maintenance_request',\n    'delete:maintenance_request',\n    'create:financial_report',\n    'read:financial_report',\n    'update:financial_report',\n    'delete:financial_report',\n    'approve:bill',\n    'read:budget',\n    'create:budget',\n    'update:budget',\n    'delete:budget',\n    'create:maintenance_request',\n    'update:maintenance_request',\n    'export:financial_report',\n    'delete:improvement_suggestion',\n    'delete:feature',\n    'delete:actionable_item',\n    'cancel:invitation',\n    'resend:invitation',\n    'audit:invitation',\n    'read:notification',\n    'create:notification',\n    'read:ai_analysis',\n    'create:ai_analysis',\n    'backup:system',\n    'read:profile',\n    'update:profile',\n  ],\n  manager: [\n    'read:user',\n    'update:user',\n    'read:organization',\n    'update:organization',\n    'create:building',\n    'read:building',\n    'update:building',\n    'create:residence',\n    'read:residence',\n    'update:residence',\n    'create:document',\n    'read:document',\n    'update:document',\n    'create:invitation',\n    'read:invitation',\n    'update:invitation',\n    'cancel:invitation',\n    'resend:invitation',\n    'create:bill',\n    'read:bill',\n    'update:bill',\n    'create:maintenance',\n    'read:maintenance',\n    'update:maintenance',\n    'approve:bill',\n    'read:budget',\n    'create:budget',\n    'update:budget',\n    'read:maintenance_request',\n    'create:maintenance_request',\n    'assign:maintenance_request',\n    'read:profile',\n    'update:profile',\n  ],\n  tenant: [\n    'read:building',\n    'read:residence',\n    'read:document',\n    'read:bill',\n    'create:maintenance',\n    'read:maintenance',\n    'read:maintenance_request',\n    'create:maintenance_request',\n    'update:own_maintenance_request',\n    'read:profile',\n    'update:profile',\n  ],\n  resident: [\n    'read:building',\n    'read:residence',\n    'read:document',\n    'create:document',\n    'read:bill',\n    'create:maintenance',\n    'read:maintenance',\n    'read:maintenance_request',\n    'create:maintenance_request',\n    'update:own_maintenance_request',\n    'read:profile',\n    'update:profile',\n  ],\n};\n\n// Helper functions for tests\nexport function getRolePermissions(config: PermissionsConfig, role: Role): Permission[] {\n  return config[role] || [];\n}\n\nexport function checkPermission(\n  config: PermissionsConfig,\n  role: Role,\n  permission: Permission\n): boolean {\n  // Throw error for invalid roles\n  if (!(role in config)) {\n    throw new Error(`Invalid role: ${role}`);\n  }\n  \n  const rolePermissions = getRolePermissions(config, role);\n  return rolePermissions.includes(permission);\n}\n\nexport function validatePermissions(config: PermissionsConfig): boolean {\n  // Basic validation - ensure all roles exist\n  const requiredRoles: Role[] = ['admin', 'manager', 'tenant', 'resident'];\n  return requiredRoles.every((role) => role in config);\n}\n"],"version":3}