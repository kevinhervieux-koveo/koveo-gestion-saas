{"file":"/home/runner/workspace/shared/schemas/invoices.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/shared/schemas/invoices.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  decimal,\n  date,\n  jsonb,\n  boolean,\n  pgEnum,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { users } from './core';\nimport { buildings, residences } from './property';\nimport { documents } from './documents';\n\n// Invoice-specific enums following exact requirements\nexport const invoicePaymentTypeEnum = pgEnum('invoice_payment_type', [\n  'one-time',\n  'recurring'\n]);\n\nexport const invoiceFrequencyEnum = pgEnum('invoice_frequency', [\n  'monthly',\n  'quarterly', \n  'annually',\n  'custom'\n]);\n\n/**\n * Invoices table for AI-powered invoice management.\n * Integrates with document management system and supports recurring payments\n * with standard frequencies (monthly, quarterly, annually) and custom scheduling.\n */\nexport const invoices = pgTable('invoices', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  \n  // Core invoice fields as specified in requirements\n  vendorName: text('vendor_name').notNull(),\n  invoiceNumber: text('invoice_number').notNull(),\n  totalAmount: decimal('total_amount', { precision: 12, scale: 2 }).notNull(),\n  dueDate: date('due_date').notNull(),\n  \n  // Payment structure fields\n  paymentType: invoicePaymentTypeEnum('payment_type').notNull(),\n  \n  // Recurring payment fields (conditional based on paymentType)\n  frequency: invoiceFrequencyEnum('frequency'), // Only for recurring payments\n  startDate: date('start_date'), // For standard frequencies (not custom)\n  customPaymentDates: date('custom_payment_dates').array(), // Only for custom frequency\n  \n  // Document integration - links to uploaded invoice file (optional for testing)\n  documentId: varchar('document_id')\n    .references(() => documents.id),\n  \n  // AI extraction tracking\n  isAiExtracted: boolean('is_ai_extracted').default(false).notNull(),\n  aiExtractionData: jsonb('ai_extraction_data'), // Raw AI response for debugging\n  extractionConfidence: decimal('extraction_confidence', { precision: 5, scale: 4 }), // AI confidence score\n  \n  // Building/residence association\n  buildingId: varchar('building_id').references(() => buildings.id),\n  residenceId: varchar('residence_id').references(() => residences.id),\n  \n  // Audit fields\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Zod validation schemas with conditional logic for recurring payments\nexport const insertInvoiceSchema = createInsertSchema(invoices, {\n  // Core field validations\n  vendorName: z.string().min(1, 'Vendor name is required').max(255, 'Vendor name too long'),\n  invoiceNumber: z.string().min(1, 'Invoice number is required').max(100, 'Invoice number too long'),\n  totalAmount: z.coerce.number().positive('Total amount must be positive'),\n  dueDate: z.coerce.date(),\n  \n  // Payment type validation\n  paymentType: z.enum(['one-time', 'recurring']),\n  \n  // Frequency validation (only for recurring)\n  frequency: z.enum(['monthly', 'quarterly', 'annually', 'custom']).optional(),\n  \n  // Start date validation (for standard frequencies)\n  startDate: z.coerce.date().optional(),\n  \n  // Custom dates validation (only for custom frequency)\n  customPaymentDates: z.array(z.coerce.date()).optional().refine(\n    (dates) => !dates || dates.length === 0 || dates.every(date => date instanceof Date && !isNaN(date.getTime())),\n    \"All custom payment dates must be valid dates\"\n  ),\n  \n  // Document reference (optional for testing)\n  documentId: z.string().uuid('Invalid document ID').optional(),\n  \n  // Optional associations\n  buildingId: z.string().uuid().optional(),\n  residenceId: z.string().uuid().optional(),\n  \n  // AI fields\n  isAiExtracted: z.boolean().default(false),\n  extractionConfidence: z.coerce.number().min(0).max(1).optional(),\n}).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\n// Base insert schema without refinements\nexport const baseInvoiceInsertSchema = insertInvoiceSchema;\n\n// Enhanced validation with conditional logic for recurring payments\nexport const invoiceFormSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  amount: z.string().min(1, 'Amount is required'),\n  dueDate: z.coerce.date(),\n  category: z.string().min(1, 'Category is required'),\n  paymentType: z.enum(['one-time', 'recurring']),\n  frequency: z.enum(['monthly', 'quarterly', 'annually', 'custom']).optional(),\n  startDate: z.coerce.date().optional(),\n  customPaymentDates: z.array(z.coerce.date()).optional(),\n  documentId: z.string().uuid('Invalid document ID').optional(),\n  buildingId: z.string().uuid().optional(),\n  residenceId: z.string().uuid().optional(),\n  isAiExtracted: z.boolean().default(false),\n  extractionConfidence: z.coerce.number().min(0).max(1).optional(),\n}).superRefine((data, ctx) => {\n  // Recurring payment validation\n  if (data.paymentType === 'recurring') {\n    if (!data.frequency) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'Frequency is required for recurring payments',\n        path: ['frequency'],\n      });\n    }\n    \n    // Standard frequency validation (monthly, quarterly, annually)\n    if (data.frequency && ['monthly', 'quarterly', 'annually'].includes(data.frequency)) {\n      if (!data.startDate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Start date is required for standard recurring frequencies',\n          path: ['startDate'],\n        });\n      }\n      \n      // Ensure custom dates are not set for standard frequencies\n      if (data.customPaymentDates && data.customPaymentDates.length > 0) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Custom payment dates should not be set for standard frequencies',\n          path: ['customPaymentDates'],\n        });\n      }\n    }\n    \n    // Custom frequency validation\n    if (data.frequency === 'custom') {\n      if (!data.customPaymentDates || data.customPaymentDates.length === 0) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'At least one custom payment date is required for custom frequency',\n          path: ['customPaymentDates'],\n        });\n      }\n      \n      // Ensure start date is not set for custom frequency\n      if (data.startDate) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: 'Start date should not be set for custom frequency',\n          path: ['startDate'],\n        });\n      }\n      \n      // Validate custom dates are in the future and sorted\n      if (data.customPaymentDates && data.customPaymentDates.length > 0) {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        \n        const sortedDates = [...data.customPaymentDates].sort((a, b) => a.getTime() - b.getTime());\n        \n        // Check if dates are in chronological order\n        if (JSON.stringify(data.customPaymentDates) !== JSON.stringify(sortedDates)) {\n          ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: 'Custom payment dates must be in chronological order',\n            path: ['customPaymentDates'],\n          });\n        }\n        \n        // Check for duplicate dates\n        const uniqueDates = new Set(data.customPaymentDates.map(d => d.toISOString()));\n        if (uniqueDates.size !== data.customPaymentDates.length) {\n          ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: 'Custom payment dates must be unique',\n            path: ['customPaymentDates'],\n          });\n        }\n      }\n    }\n  } else {\n    // One-time payment validation - ensure recurring fields are not set\n    if (data.frequency || data.startDate || (data.customPaymentDates && data.customPaymentDates.length > 0)) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: 'Recurring payment fields should not be set for one-time payments',\n        path: ['paymentType'],\n      });\n    }\n  }\n});\n\n// AI extraction response schema for Gemini API\nexport const aiExtractionResponseSchema = z.object({\n  vendorName: z.string().nullable(),\n  invoiceNumber: z.string().nullable(),\n  totalAmount: z.number().nullable(),\n  dueDate: z.string().nullable(), // Will be converted to Date\n  paymentType: z.enum(['one-time', 'recurring']).nullable(),\n  frequency: z.enum(['monthly', 'quarterly', 'annually', 'custom']).nullable(),\n  startDate: z.string().nullable(), // Will be converted to Date\n  customPaymentDates: z.array(z.string()).nullable(), // Will be converted to Date[]\n});\n\n// Types\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InvoiceFormData = z.infer<typeof invoiceFormSchema>;\nexport type AiExtractionResponse = z.infer<typeof aiExtractionResponseSchema>;\n\n// Helper function to convert AI response to form data\nexport function convertAiResponseToFormData(aiResponse: AiExtractionResponse): Partial<InvoiceFormData> {\n  return {\n    vendorName: aiResponse.vendorName || '',\n    invoiceNumber: aiResponse.invoiceNumber || '',\n    totalAmount: aiResponse.totalAmount || 0,\n    dueDate: aiResponse.dueDate ? new Date(aiResponse.dueDate) : new Date(),\n    paymentType: aiResponse.paymentType || 'one-time',\n    frequency: aiResponse.frequency || undefined,\n    startDate: aiResponse.startDate ? new Date(aiResponse.startDate) : undefined,\n    customPaymentDates: aiResponse.customPaymentDates \n      ? aiResponse.customPaymentDates.map(date => new Date(date))\n      : undefined,\n  };\n}"],"version":3}