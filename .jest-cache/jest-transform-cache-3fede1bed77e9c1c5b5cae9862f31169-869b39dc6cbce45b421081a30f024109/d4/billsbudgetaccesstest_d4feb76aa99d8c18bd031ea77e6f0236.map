{"file":"/home/runner/workspace/tests/unit/access-control/bills-budget-access.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/access-control/bills-budget-access.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\n\n// Role-based permission mapping for Quebec property management\nconst ROLE_PERMISSIONS: Record<string, string[]> = {\n  admin: [\n    'building:view',\n    'building:manage',\n    'building:create',\n    'building:delete',\n    'budget:view',\n    'budget:manage',\n    'budget:create',\n    'budget:delete',\n    'bill:view',\n    'bill:manage',\n    'bill:create',\n    'bill:delete',\n    'finance:view',\n    'finance:export',\n  ],\n  manager: [\n    'building:view',\n    'building:manage',\n    'building:create',\n    'budget:view',\n    'budget:manage',\n    'budget:create',\n    'bill:view',\n    'bill:manage',\n    'bill:create',\n    'finance:view',\n  ],\n  tenant: [\n    'bill:own_view', // Only view their own bills\n  ],\n  resident: [\n    'bill:own_view', // Only view their own bills\n  ],\n};\n\n// Helper functions for testing access control\nfunction hasPermission(role: string, permission: string): boolean {\n  return ROLE_PERMISSIONS[role]?.includes(permission) || false;\n}\n\nfunction canAccessResource(\n  user: any,\n  resourceType: string,\n  resourceId: string,\n  organizationId: string\n): boolean {\n  // Admin with global access can access everything\n  if (user.role === 'admin' && user.canAccessAllOrganizations) {\n    return true;\n  }\n\n  // Users can only access resources from their organizations\n  if (user.organizations && user.organizations.includes(organizationId)) {\n    return (\n      hasPermission(user.role, `${resourceType}:view`) ||\n      hasPermission(user.role, `${resourceType}:manage`)\n    );\n  }\n\n  return false;\n}\n\ndescribe('Bills and Budget Pages Access Control', () => {\n  // Test data setup\n  const adminUser = {\n    id: 'admin-test-id',\n    role: 'admin' as const,\n    organizations: [],\n    canAccessAllOrganizations: true,\n  };\n\n  const managerUser = {\n    id: 'manager-test-id',\n    role: 'manager' as const,\n    organizations: ['test-org-id'],\n    canAccessAllOrganizations: false,\n  };\n\n  const tenantUser = {\n    id: 'tenant-test-id',\n    role: 'tenant' as const,\n    organizations: [],\n    canAccessAllOrganizations: false,\n  };\n\n  const residentUser = {\n    id: 'resident-test-id',\n    role: 'resident' as const,\n    organizations: [],\n    canAccessAllOrganizations: false,\n  };\n\n  const koveoBuilding = {\n    id: 'koveo-building-id',\n    organizationId: 'koveo-org-id',\n    name: 'Koveo Test Building',\n  };\n\n  const testBuilding = {\n    id: 'test-building-id',\n    organizationId: 'test-org-id',\n    name: 'Test Organization Building',\n  };\n\n  describe('Buildings Access Control for Bills and Budget Pages', () => {\n    it('should allow admin to access all buildings', () => {\n      // Admin should have permission to view buildings\n      expect(hasPermission(adminUser.role, 'building:view')).toBe(true);\n      expect(hasPermission(adminUser.role, 'building:manage')).toBe(true);\n\n      // Admin should be able to access any building resource\n      expect(\n        canAccessResource(adminUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(true);\n      expect(\n        canAccessResource(adminUser, 'building', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n    });\n\n    it('should allow manager to access only their organization buildings', () => {\n      // Manager should have permission to view buildings\n      expect(hasPermission(managerUser.role, 'building:view')).toBe(true);\n      expect(hasPermission(managerUser.role, 'building:manage')).toBe(true);\n\n      // Manager should be able to access buildings from their organization\n      expect(\n        canAccessResource(managerUser, 'building', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n\n      // Manager should NOT be able to access buildings from other organizations\n      expect(\n        canAccessResource(managerUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n    });\n\n    it('should deny tenant access to building management', () => {\n      // Tenant should NOT have permission to view or manage buildings list\n      expect(hasPermission(tenantUser.role, 'building:view')).toBe(false);\n      expect(hasPermission(tenantUser.role, 'building:manage')).toBe(false);\n\n      // Tenant should NOT be able to access building resources for bills/budget\n      expect(\n        canAccessResource(tenantUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(tenantUser, 'building', testBuilding.id, testBuilding.organizationId)\n      ).toBe(false);\n    });\n\n    it('should deny resident access to building management', () => {\n      // Resident should NOT have permission to view or manage buildings list\n      expect(hasPermission(residentUser.role, 'building:view')).toBe(false);\n      expect(hasPermission(residentUser.role, 'building:manage')).toBe(false);\n\n      // Resident should NOT be able to access building resources for bills/budget\n      expect(\n        canAccessResource(residentUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(residentUser, 'building', testBuilding.id, testBuilding.organizationId)\n      ).toBe(false);\n    });\n  });\n\n  describe('Budget Access Control for Budget Pages', () => {\n    it('should allow admin to access budget data for any building', () => {\n      // Admin should have permission to view and manage budgets\n      expect(hasPermission(adminUser.role, 'budget:view')).toBe(true);\n      expect(hasPermission(adminUser.role, 'budget:manage')).toBe(true);\n\n      // Admin should be able to access budget resources from any organization\n      expect(\n        canAccessResource(adminUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(true);\n      expect(\n        canAccessResource(adminUser, 'budget', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n    });\n\n    it('should allow manager to access budget only for their organization buildings', () => {\n      // Manager should have permission to view and manage budgets\n      expect(hasPermission(managerUser.role, 'budget:view')).toBe(true);\n      expect(hasPermission(managerUser.role, 'budget:manage')).toBe(true);\n\n      // Manager should be able to access budgets from their organization\n      expect(\n        canAccessResource(managerUser, 'budget', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n\n      // Manager should NOT be able to access budgets from other organizations\n      expect(\n        canAccessResource(managerUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n    });\n\n    it('should deny tenant access to budget data', () => {\n      // Tenant should NOT have permission to view or manage budgets\n      expect(hasPermission(tenantUser.role, 'budget:view')).toBe(false);\n      expect(hasPermission(tenantUser.role, 'budget:manage')).toBe(false);\n\n      // Tenant should NOT be able to access budget resources\n      expect(\n        canAccessResource(tenantUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(tenantUser, 'budget', testBuilding.id, testBuilding.organizationId)\n      ).toBe(false);\n    });\n\n    it('should deny resident access to budget data', () => {\n      // Resident should NOT have permission to view or manage budgets\n      expect(hasPermission(residentUser.role, 'budget:view')).toBe(false);\n      expect(hasPermission(residentUser.role, 'budget:manage')).toBe(false);\n\n      // Resident should NOT be able to access budget resources\n      expect(\n        canAccessResource(residentUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(residentUser, 'budget', testBuilding.id, testBuilding.organizationId)\n      ).toBe(false);\n    });\n  });\n\n  describe('Bills Access Control for Bills Pages', () => {\n    it('should allow admin to access bills data for any building', () => {\n      // Admin should have permission to view and manage bills\n      expect(hasPermission(adminUser.role, 'bill:view')).toBe(true);\n      expect(hasPermission(adminUser.role, 'bill:manage')).toBe(true);\n\n      // Admin should be able to access bill resources from any organization\n      expect(\n        canAccessResource(adminUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(true);\n      expect(\n        canAccessResource(adminUser, 'bill', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n    });\n\n    it('should allow manager to access bills only for their organization buildings', () => {\n      // Manager should have permission to view and manage bills\n      expect(hasPermission(managerUser.role, 'bill:view')).toBe(true);\n      expect(hasPermission(managerUser.role, 'bill:manage')).toBe(true);\n\n      // Manager should be able to access bills from their organization\n      expect(\n        canAccessResource(managerUser, 'bill', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n\n      // Manager should NOT be able to access bills from other organizations\n      expect(\n        canAccessResource(managerUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n    });\n\n    it('should prevent unauthorized users from accessing bills data', () => {\n      // Tenant should NOT have permission to view or manage bills\n      expect(hasPermission(tenantUser.role, 'bill:view')).toBe(false);\n      expect(hasPermission(tenantUser.role, 'bill:manage')).toBe(false);\n\n      // Resident should NOT have permission to view or manage bills\n      expect(hasPermission(residentUser.role, 'bill:view')).toBe(false);\n      expect(hasPermission(residentUser.role, 'bill:manage')).toBe(false);\n\n      // Both should NOT be able to access bill resources\n      expect(\n        canAccessResource(tenantUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(residentUser, 'bill', testBuilding.id, testBuilding.organizationId)\n      ).toBe(false);\n    });\n  });\n\n  describe('Quebec Law 25 Compliance for Bills and Budget Access', () => {\n    it('should properly restrict financial data access based on user role', () => {\n      // Admin should have full access to financial data for compliance reporting\n      expect(hasPermission(adminUser.role, 'finance:view')).toBe(true);\n      expect(hasPermission(adminUser.role, 'finance:export')).toBe(true);\n\n      // Manager should have limited financial access within their organization\n      expect(hasPermission(managerUser.role, 'finance:view')).toBe(true);\n      expect(hasPermission(managerUser.role, 'finance:export')).toBe(false); // Limited export rights\n\n      // Tenant and Resident should not have access to financial management data\n      expect(hasPermission(tenantUser.role, 'finance:view')).toBe(false);\n      expect(hasPermission(tenantUser.role, 'finance:export')).toBe(false);\n      expect(hasPermission(residentUser.role, 'finance:view')).toBe(false);\n      expect(hasPermission(residentUser.role, 'finance:export')).toBe(false);\n    });\n\n    it('should enforce data minimization principles for budget and bill access', () => {\n      // Verify that permissions follow Quebec Law 25 data minimization principles\n\n      // Only admin and manager roles should access financial data\n      const financialRoles = ['admin', 'manager'];\n      const nonFinancialRoles = ['tenant', 'resident'];\n\n      financialRoles.forEach((role) => {\n        expect(hasPermission(role as any, 'budget:view')).toBe(true);\n        expect(hasPermission(role as any, 'bill:view')).toBe(true);\n      });\n\n      nonFinancialRoles.forEach((role) => {\n        expect(hasPermission(role as any, 'budget:view')).toBe(false);\n        expect(hasPermission(role as any, 'bill:view')).toBe(false);\n      });\n    });\n  });\n\n  describe('Manager Organization Boundary Tests', () => {\n    it('should strictly enforce organization boundaries for managers', () => {\n      // Manager with no organizations should not be able to access any resources\n      const isolatedManager = {\n        id: 'isolated-manager-id',\n        role: 'manager' as const,\n        organizations: [], // No organizations\n        canAccessAllOrganizations: false,\n      };\n\n      // Should not be able to access any building resources\n      expect(\n        canAccessResource(\n          isolatedManager,\n          'building',\n          koveoBuilding.id,\n          koveoBuilding.organizationId\n        )\n      ).toBe(false);\n      expect(\n        canAccessResource(isolatedManager, 'building', testBuilding.id, testBuilding.organizationId)\n      ).toBe(false);\n\n      // Should not be able to access any financial resources\n      expect(\n        canAccessResource(isolatedManager, 'budget', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(isolatedManager, 'bill', testBuilding.id, testBuilding.organizationId)\n      ).toBe(false);\n    });\n\n    it('should allow managers to access only their specific organization resources', () => {\n      // Manager should only access resources from their assigned organization\n      expect(\n        canAccessResource(managerUser, 'building', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n      expect(\n        canAccessResource(managerUser, 'budget', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n      expect(\n        canAccessResource(managerUser, 'bill', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n\n      // Should not access resources from other organizations\n      expect(\n        canAccessResource(managerUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(managerUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n      expect(\n        canAccessResource(managerUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)\n      ).toBe(false);\n\n      // Test with a hypothetical third organization\n      const extraOrgId = 'extra-org-id';\n      expect(canAccessResource(managerUser, 'building', 'extra-building-id', extraOrgId)).toBe(\n        false\n      );\n      expect(canAccessResource(managerUser, 'budget', 'extra-building-id', extraOrgId)).toBe(false);\n      expect(canAccessResource(managerUser, 'bill', 'extra-building-id', extraOrgId)).toBe(false);\n    });\n\n    it('should validate cross-organizational access patterns', () => {\n      // Create a multi-organization manager\n      const multiOrgManager = {\n        id: 'multi-org-manager-id',\n        role: 'manager' as const,\n        organizations: ['test-org-id', 'second-org-id'],\n        canAccessAllOrganizations: false,\n      };\n\n      // Should access resources from both assigned organizations\n      expect(\n        canAccessResource(multiOrgManager, 'building', testBuilding.id, testBuilding.organizationId)\n      ).toBe(true);\n      expect(\n        canAccessResource(multiOrgManager, 'building', 'second-building-id', 'second-org-id')\n      ).toBe(true);\n\n      // Should NOT access resources from unassigned organizations\n      expect(\n        canAccessResource(\n          multiOrgManager,\n          'building',\n          koveoBuilding.id,\n          koveoBuilding.organizationId\n        )\n      ).toBe(false);\n    });\n  });\n});\n"],"version":3}