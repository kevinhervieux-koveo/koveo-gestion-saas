c52d80db97366bd785e58402489ec520
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Role-based permission mapping for Quebec property management
const ROLE_PERMISSIONS = {
    admin: [
        'building:view',
        'building:manage',
        'building:create',
        'building:delete',
        'budget:view',
        'budget:manage',
        'budget:create',
        'budget:delete',
        'bill:view',
        'bill:manage',
        'bill:create',
        'bill:delete',
        'finance:view',
        'finance:export',
    ],
    manager: [
        'building:view',
        'building:manage',
        'building:create',
        'budget:view',
        'budget:manage',
        'budget:create',
        'bill:view',
        'bill:manage',
        'bill:create',
        'finance:view',
    ],
    tenant: [
        'bill:own_view', // Only view their own bills
    ],
    resident: [
        'bill:own_view', // Only view their own bills
    ],
};
// Helper functions for testing access control
function hasPermission(role, permission) {
    return ROLE_PERMISSIONS[role]?.includes(permission) || false;
}
function canAccessResource(user, resourceType, resourceId, organizationId) {
    // Admin with global access can access everything
    if (user.role === 'admin' && user.canAccessAllOrganizations) {
        return true;
    }
    // Users can only access resources from their organizations
    if (user.organizations && user.organizations.includes(organizationId)) {
        return (hasPermission(user.role, `${resourceType}:view`) ||
            hasPermission(user.role, `${resourceType}:manage`));
    }
    return false;
}
(0, globals_1.describe)('Bills and Budget Pages Access Control', () => {
    // Test data setup
    const adminUser = {
        id: 'admin-test-id',
        role: 'admin',
        organizations: [],
        canAccessAllOrganizations: true,
    };
    const managerUser = {
        id: 'manager-test-id',
        role: 'manager',
        organizations: ['test-org-id'],
        canAccessAllOrganizations: false,
    };
    const tenantUser = {
        id: 'tenant-test-id',
        role: 'tenant',
        organizations: [],
        canAccessAllOrganizations: false,
    };
    const residentUser = {
        id: 'resident-test-id',
        role: 'resident',
        organizations: [],
        canAccessAllOrganizations: false,
    };
    const koveoBuilding = {
        id: 'koveo-building-id',
        organizationId: 'koveo-org-id',
        name: 'Koveo Test Building',
    };
    const testBuilding = {
        id: 'test-building-id',
        organizationId: 'test-org-id',
        name: 'Test Organization Building',
    };
    (0, globals_1.describe)('Buildings Access Control for Bills and Budget Pages', () => {
        (0, globals_1.it)('should allow admin to access all buildings', () => {
            // Admin should have permission to view buildings
            (0, globals_1.expect)(hasPermission(adminUser.role, 'building:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(adminUser.role, 'building:manage')).toBe(true);
            // Admin should be able to access any building resource
            (0, globals_1.expect)(canAccessResource(adminUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)).toBe(true);
            (0, globals_1.expect)(canAccessResource(adminUser, 'building', testBuilding.id, testBuilding.organizationId)).toBe(true);
        });
        (0, globals_1.it)('should allow manager to access only their organization buildings', () => {
            // Manager should have permission to view buildings
            (0, globals_1.expect)(hasPermission(managerUser.role, 'building:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(managerUser.role, 'building:manage')).toBe(true);
            // Manager should be able to access buildings from their organization
            (0, globals_1.expect)(canAccessResource(managerUser, 'building', testBuilding.id, testBuilding.organizationId)).toBe(true);
            // Manager should NOT be able to access buildings from other organizations
            (0, globals_1.expect)(canAccessResource(managerUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
        });
        (0, globals_1.it)('should deny tenant access to building management', () => {
            // Tenant should NOT have permission to view or manage buildings list
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'building:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'building:manage')).toBe(false);
            // Tenant should NOT be able to access building resources for bills/budget
            (0, globals_1.expect)(canAccessResource(tenantUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(tenantUser, 'building', testBuilding.id, testBuilding.organizationId)).toBe(false);
        });
        (0, globals_1.it)('should deny resident access to building management', () => {
            // Resident should NOT have permission to view or manage buildings list
            (0, globals_1.expect)(hasPermission(residentUser.role, 'building:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(residentUser.role, 'building:manage')).toBe(false);
            // Resident should NOT be able to access building resources for bills/budget
            (0, globals_1.expect)(canAccessResource(residentUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(residentUser, 'building', testBuilding.id, testBuilding.organizationId)).toBe(false);
        });
    });
    (0, globals_1.describe)('Budget Access Control for Budget Pages', () => {
        (0, globals_1.it)('should allow admin to access budget data for any building', () => {
            // Admin should have permission to view and manage budgets
            (0, globals_1.expect)(hasPermission(adminUser.role, 'budget:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(adminUser.role, 'budget:manage')).toBe(true);
            // Admin should be able to access budget resources from any organization
            (0, globals_1.expect)(canAccessResource(adminUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)).toBe(true);
            (0, globals_1.expect)(canAccessResource(adminUser, 'budget', testBuilding.id, testBuilding.organizationId)).toBe(true);
        });
        (0, globals_1.it)('should allow manager to access budget only for their organization buildings', () => {
            // Manager should have permission to view and manage budgets
            (0, globals_1.expect)(hasPermission(managerUser.role, 'budget:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(managerUser.role, 'budget:manage')).toBe(true);
            // Manager should be able to access budgets from their organization
            (0, globals_1.expect)(canAccessResource(managerUser, 'budget', testBuilding.id, testBuilding.organizationId)).toBe(true);
            // Manager should NOT be able to access budgets from other organizations
            (0, globals_1.expect)(canAccessResource(managerUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
        });
        (0, globals_1.it)('should deny tenant access to budget data', () => {
            // Tenant should NOT have permission to view or manage budgets
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'budget:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'budget:manage')).toBe(false);
            // Tenant should NOT be able to access budget resources
            (0, globals_1.expect)(canAccessResource(tenantUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(tenantUser, 'budget', testBuilding.id, testBuilding.organizationId)).toBe(false);
        });
        (0, globals_1.it)('should deny resident access to budget data', () => {
            // Resident should NOT have permission to view or manage budgets
            (0, globals_1.expect)(hasPermission(residentUser.role, 'budget:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(residentUser.role, 'budget:manage')).toBe(false);
            // Resident should NOT be able to access budget resources
            (0, globals_1.expect)(canAccessResource(residentUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(residentUser, 'budget', testBuilding.id, testBuilding.organizationId)).toBe(false);
        });
    });
    (0, globals_1.describe)('Bills Access Control for Bills Pages', () => {
        (0, globals_1.it)('should allow admin to access bills data for any building', () => {
            // Admin should have permission to view and manage bills
            (0, globals_1.expect)(hasPermission(adminUser.role, 'bill:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(adminUser.role, 'bill:manage')).toBe(true);
            // Admin should be able to access bill resources from any organization
            (0, globals_1.expect)(canAccessResource(adminUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)).toBe(true);
            (0, globals_1.expect)(canAccessResource(adminUser, 'bill', testBuilding.id, testBuilding.organizationId)).toBe(true);
        });
        (0, globals_1.it)('should allow manager to access bills only for their organization buildings', () => {
            // Manager should have permission to view and manage bills
            (0, globals_1.expect)(hasPermission(managerUser.role, 'bill:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(managerUser.role, 'bill:manage')).toBe(true);
            // Manager should be able to access bills from their organization
            (0, globals_1.expect)(canAccessResource(managerUser, 'bill', testBuilding.id, testBuilding.organizationId)).toBe(true);
            // Manager should NOT be able to access bills from other organizations
            (0, globals_1.expect)(canAccessResource(managerUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
        });
        (0, globals_1.it)('should prevent unauthorized users from accessing bills data', () => {
            // Tenant should NOT have permission to view or manage bills
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'bill:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'bill:manage')).toBe(false);
            // Resident should NOT have permission to view or manage bills
            (0, globals_1.expect)(hasPermission(residentUser.role, 'bill:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(residentUser.role, 'bill:manage')).toBe(false);
            // Both should NOT be able to access bill resources
            (0, globals_1.expect)(canAccessResource(tenantUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(residentUser, 'bill', testBuilding.id, testBuilding.organizationId)).toBe(false);
        });
    });
    (0, globals_1.describe)('Quebec Law 25 Compliance for Bills and Budget Access', () => {
        (0, globals_1.it)('should properly restrict financial data access based on user role', () => {
            // Admin should have full access to financial data for compliance reporting
            (0, globals_1.expect)(hasPermission(adminUser.role, 'finance:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(adminUser.role, 'finance:export')).toBe(true);
            // Manager should have limited financial access within their organization
            (0, globals_1.expect)(hasPermission(managerUser.role, 'finance:view')).toBe(true);
            (0, globals_1.expect)(hasPermission(managerUser.role, 'finance:export')).toBe(false); // Limited export rights
            // Tenant and Resident should not have access to financial management data
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'finance:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(tenantUser.role, 'finance:export')).toBe(false);
            (0, globals_1.expect)(hasPermission(residentUser.role, 'finance:view')).toBe(false);
            (0, globals_1.expect)(hasPermission(residentUser.role, 'finance:export')).toBe(false);
        });
        (0, globals_1.it)('should enforce data minimization principles for budget and bill access', () => {
            // Verify that permissions follow Quebec Law 25 data minimization principles
            // Only admin and manager roles should access financial data
            const financialRoles = ['admin', 'manager'];
            const nonFinancialRoles = ['tenant', 'resident'];
            financialRoles.forEach((role) => {
                (0, globals_1.expect)(hasPermission(role, 'budget:view')).toBe(true);
                (0, globals_1.expect)(hasPermission(role, 'bill:view')).toBe(true);
            });
            nonFinancialRoles.forEach((role) => {
                (0, globals_1.expect)(hasPermission(role, 'budget:view')).toBe(false);
                (0, globals_1.expect)(hasPermission(role, 'bill:view')).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Manager Organization Boundary Tests', () => {
        (0, globals_1.it)('should strictly enforce organization boundaries for managers', () => {
            // Manager with no organizations should not be able to access any resources
            const isolatedManager = {
                id: 'isolated-manager-id',
                role: 'manager',
                organizations: [], // No organizations
                canAccessAllOrganizations: false,
            };
            // Should not be able to access any building resources
            (0, globals_1.expect)(canAccessResource(isolatedManager, 'building', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(isolatedManager, 'building', testBuilding.id, testBuilding.organizationId)).toBe(false);
            // Should not be able to access any financial resources
            (0, globals_1.expect)(canAccessResource(isolatedManager, 'budget', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(isolatedManager, 'bill', testBuilding.id, testBuilding.organizationId)).toBe(false);
        });
        (0, globals_1.it)('should allow managers to access only their specific organization resources', () => {
            // Manager should only access resources from their assigned organization
            (0, globals_1.expect)(canAccessResource(managerUser, 'building', testBuilding.id, testBuilding.organizationId)).toBe(true);
            (0, globals_1.expect)(canAccessResource(managerUser, 'budget', testBuilding.id, testBuilding.organizationId)).toBe(true);
            (0, globals_1.expect)(canAccessResource(managerUser, 'bill', testBuilding.id, testBuilding.organizationId)).toBe(true);
            // Should not access resources from other organizations
            (0, globals_1.expect)(canAccessResource(managerUser, 'building', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(managerUser, 'budget', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(managerUser, 'bill', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
            // Test with a hypothetical third organization
            const extraOrgId = 'extra-org-id';
            (0, globals_1.expect)(canAccessResource(managerUser, 'building', 'extra-building-id', extraOrgId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(managerUser, 'budget', 'extra-building-id', extraOrgId)).toBe(false);
            (0, globals_1.expect)(canAccessResource(managerUser, 'bill', 'extra-building-id', extraOrgId)).toBe(false);
        });
        (0, globals_1.it)('should validate cross-organizational access patterns', () => {
            // Create a multi-organization manager
            const multiOrgManager = {
                id: 'multi-org-manager-id',
                role: 'manager',
                organizations: ['test-org-id', 'second-org-id'],
                canAccessAllOrganizations: false,
            };
            // Should access resources from both assigned organizations
            (0, globals_1.expect)(canAccessResource(multiOrgManager, 'building', testBuilding.id, testBuilding.organizationId)).toBe(true);
            (0, globals_1.expect)(canAccessResource(multiOrgManager, 'building', 'second-building-id', 'second-org-id')).toBe(true);
            // Should NOT access resources from unassigned organizations
            (0, globals_1.expect)(canAccessResource(multiOrgManager, 'building', koveoBuilding.id, koveoBuilding.organizationId)).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,