4e3c02b2242c50d177cfd91e87afe668
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectionGrid = SelectionGrid;
const jsx_runtime_1 = require("react/jsx-runtime");
const lucide_react_1 = require("lucide-react");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const loading_spinner_1 = require("@/components/ui/loading-spinner");
const no_data_card_1 = require("@/components/ui/no-data-card");
const use_language_1 = require("@/hooks/use-language");
/**
 * Get appropriate icon for item type
 */
function getIconForType(type) {
    switch (type) {
        case 'organization':
            return lucide_react_1.Users;
        case 'building':
            return lucide_react_1.Building;
        case 'residence':
            return lucide_react_1.Home;
        default:
            return lucide_react_1.Building;
    }
}
/**
 * SelectionGrid component - displays a grid of selectable cards for hierarchical navigation
 * Used for Organization â†’ Building â†’ Residence selection flows
 */
function SelectionGrid({ title, items, onSelectItem, onBack, backButtonText = 'back', isLoading }) {
    const { t } = (0, use_language_1.useLanguage)();
    // Show loading state
    if (isLoading) {
        return (0, jsx_runtime_1.jsx)(loading_spinner_1.LoadingSpinner, {});
    }
    // Show no data state
    if (items.length === 0) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col h-full", children: [onBack && ((0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-6", children: [(0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-bold text-gray-900", "data-testid": "selection-title", children: title }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: onBack, className: "flex items-center gap-2", "data-testid": "button-back", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4" }), backButtonText] })] })), (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noItemsFound", descriptionKey: "noItemsMessage", badgeKey: "noData", testId: "no-items-message" })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col h-full", children: [(title && title.trim() !== '') || onBack ? ((0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-6", children: [title && title.trim() !== '' && ((0, jsx_runtime_1.jsx)("h2", { className: "text-2xl font-bold text-gray-900", "data-testid": "selection-title", children: title })), onBack && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: onBack, className: "flex items-center gap-2", "data-testid": "button-back", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4" }), backButtonText] }))] })) : null, (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: items.map((item) => {
                    const Icon = getIconForType(item.type);
                    const isDisabled = item.disabled || false;
                    return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: `transition-shadow ${isDisabled ? 'opacity-60 cursor-not-allowed' : 'hover:shadow-md cursor-pointer'}`, "data-testid": `card-${item.type}-${item.id}`, children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { className: "pb-3", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-3", children: [(0, jsx_runtime_1.jsx)(Icon, { className: `w-5 h-5 ${isDisabled ? 'text-gray-400' : 'text-blue-600'}` }), (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: `text-lg ${isDisabled ? 'text-gray-500' : ''}`, "data-testid": `text-name-${item.id}`, children: item.name })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)("p", { className: `text-sm ${isDisabled ? 'text-gray-400' : 'text-gray-600'}`, "data-testid": `text-details-${item.id}`, children: item.details }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: () => {
                                            if (!isDisabled) {
                                                console.log('ðŸŽ¯ [SELECTION GRID DEBUG] Button clicked:', { itemId: item.id, itemName: item.name });
                                                onSelectItem(item.id);
                                            }
                                        }, disabled: isDisabled, className: "w-full", variant: isDisabled ? "secondary" : "default", "data-testid": `button-select-${item.id}`, children: isDisabled && item.disabledReason ? item.disabledReason : t('select') })] })] }, item.id));
                }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,