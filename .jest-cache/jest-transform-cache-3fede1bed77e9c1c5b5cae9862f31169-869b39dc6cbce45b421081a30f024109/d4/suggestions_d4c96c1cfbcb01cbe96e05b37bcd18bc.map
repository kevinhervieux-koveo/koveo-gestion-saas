{"version":3,"names":["cov_1s1tgqdkm9","actualCoverage","s","exports","default","OwnerSuggestions","react_query_1","require","header_1","card_1","button_1","badge_1","lucide_react_1","queryClient_1","use_toast_1","react_1","categoryConfig","name","icon","Code","color","CheckCircle","FileText","Shield","Zap","Terminal","MessageSquare","f","toast","useToast","data","suggestions","b","isLoading","useQuery","queryKey","refetchInterval","staleTime","categorizedSuggestions","useMemo","grouped","reduce","acc","suggestion","category","status","length","push","priorityOrder","Critical","High","Medium","Low","Object","keys","forEach","sort","a","priority","acknowledgeMutation","useMutation","mutationFn","id","apiRequest","onSuccess","queryClient","invalidateQueries","completeMutation","title","description","getPriorityColor","getStatusColor","getAIPrompt","baseContext","getCategoryIcon","categoryName","config","find","c","getCategoryColor","jsx_runtime_1","jsxs","className","children","jsx","Header","subtitle","Card","CardContent","Badge","values","flat","map","categorySuggestions","Icon","variant","CardHeader","CardTitle","CardDescription","size","Date","createdAt","toLocaleDateString","Button","onClick","mutate","disabled","isPending","Clock"],"sources":["/home/runner/workspace/client/src/pages/admin/suggestions.tsx"],"sourcesContent":["import { useQuery, useMutation } from '@tanstack/react-query';\nimport { Header } from '@/components/layout/header';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  CheckCircle,\n  Clock,\n  MessageSquare,\n  AlertCircle,\n  Shield,\n  Code,\n  FileText,\n  Zap,\n  Terminal,\n} from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useMemo } from 'react';\n\n/**\n *\n */\ninterface ImprovementSuggestion {\n  id: string;\n  title: string;\n  description: string;\n  priority: 'High' | 'Medium' | 'Low' | 'Critical';\n  status: 'New' | 'Acknowledged' | 'Done';\n  category: string;\n  createdAt: string;\n}\n\n// Category configuration with icons and colors\nconst categoryConfig = [\n  { name: 'Code Quality', icon: Code, color: 'bg-blue-50 text-blue-700 border-blue-200' },\n  { name: 'Testing', icon: CheckCircle, color: 'bg-green-50 text-green-700 border-green-200' },\n  {\n    name: 'Documentation',\n    icon: FileText,\n    color: 'bg-purple-50 text-purple-700 border-purple-200',\n  },\n  { name: 'Security', icon: Shield, color: 'bg-red-50 text-red-700 border-red-200' },\n  { name: 'Performance', icon: Zap, color: 'bg-yellow-50 text-yellow-700 border-yellow-200' },\n  {\n    name: 'Continuous Improvement',\n    icon: Terminal,\n    color: 'bg-indigo-50 text-indigo-700 border-indigo-200',\n  },\n  {\n    name: 'Replit AI Agent Monitoring',\n    icon: MessageSquare,\n    color: 'bg-teal-50 text-teal-700 border-teal-200',\n  },\n];\n\n/**\n *\n */\nexport default function OwnerSuggestions() {\n  const { toast } = useToast();\n  const { data: suggestions = [], isLoading } = useQuery<ImprovementSuggestion[]>({\n    queryKey: ['/api/pillars/suggestions'],\n    refetchInterval: 30000, // Refetch every 30 seconds to ensure fresh data\n    staleTime: 0, // Data is always considered stale\n  });\n\n  // Group suggestions by category and take 2 from each\n  const categorizedSuggestions = useMemo(() => {\n    const grouped = suggestions.reduce(\n      (acc, suggestion) => {\n        if (!acc[suggestion.category]) {\n          acc[suggestion.category] = [];\n        }\n        // Only add if not done and we have less than 2 in this category\n        if (suggestion.status !== 'Done' && acc[suggestion.category].length < 2) {\n          acc[suggestion.category].push(suggestion);\n        }\n        return acc;\n      },\n      {} as Record<string, ImprovementSuggestion[]>\n    );\n\n    // Sort suggestions within each category by priority\n    const priorityOrder = { Critical: 0, High: 1, Medium: 2, Low: 3 };\n    Object.keys(grouped).forEach((category) => {\n      grouped[category].sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);\n    });\n\n    return grouped;\n  }, [suggestions]);\n\n  const acknowledgeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('POST', `/api/pillars/suggestions/${id}/acknowledge`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pillars/suggestions'] });\n    },\n  });\n\n  const completeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('POST', `/api/pillars/suggestions/${id}/complete`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pillars/suggestions'] });\n      // Show success message indicating deletion and continuous improvement update\n      toast({\n        title: 'Suggestion Completed',\n        description:\n          'Suggestion has been removed and continuous improvement analysis is running in the background.',\n      });\n    },\n  });\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'Critical':\n        return 'bg-purple-100 text-purple-800';\n      case 'High':\n        return 'bg-red-100 text-red-800';\n      case 'Medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'Low':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Done':\n        return 'bg-green-100 text-green-800';\n      case 'Acknowledged':\n        return 'bg-blue-100 text-blue-800';\n      case 'New':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getAIPrompt = (suggestion: ImprovementSuggestion) => {\n    const baseContext =\n      'You are working on a Quebec property management SaaS called Koveo Gestion. ';\n\n    switch (suggestion.category) {\n      case 'Code Quality':\n        return `${baseContext}${suggestion.description} Focus on improving code maintainability while preserving existing functionality. Follow existing TypeScript patterns and ensure all changes maintain type safety.`;\n\n      case 'Testing':\n        return `${baseContext}${suggestion.description} Add comprehensive unit tests using Jest and React Testing Library. Focus on critical paths and edge cases. Ensure tests follow the existing test structure in /tests/ directory.`;\n\n      case 'Documentation':\n        return `${baseContext}${suggestion.description} Add JSDoc comments to all exported functions and classes. Follow the existing documentation style and include parameter descriptions, return values, and usage examples where appropriate.`;\n\n      case 'Security':\n        return `${baseContext}${suggestion.description} Address security vulnerabilities while maintaining Law 25 compliance for Quebec privacy regulations. Update dependencies safely and validate all changes don't break authentication or data protection.`;\n\n      case 'Performance':\n        return `${baseContext}${suggestion.description} Optimize performance while maintaining the existing user experience. Consider code splitting, lazy loading, and bundle optimization. Test changes thoroughly to ensure no regressions.`;\n\n      default:\n        return `${baseContext}${suggestion.description} Implement this improvement following the existing codebase patterns and Quebec property management requirements. Ensure all changes are well-tested and documented.`;\n    }\n  };\n\n  const getCategoryIcon = (categoryName: string) => {\n    const config = categoryConfig.find((c) => c.name === categoryName);\n    return config?.icon || MessageSquare;\n  };\n\n  const getCategoryColor = (categoryName: string) => {\n    const config = categoryConfig.find((c) => c.name === categoryName);\n    return config?.color || 'bg-gray-50 text-gray-700 border-gray-200';\n  };\n\n  return (\n    <div className='flex-1 flex flex-col overflow-hidden'>\n      <Header\n        title='Improvement Suggestions'\n        subtitle='Review and manage system improvement recommendations'\n      />\n\n      {/* Refresh Command */}\n      <div className='border-b bg-gray-50 px-6 py-3'>\n        <div className='max-w-7xl mx-auto'>\n          <div className='flex items-center gap-2 text-sm text-gray-600'>\n            <Terminal className='h-4 w-4' />\n            <span className='font-medium'>Refresh Command:</span>\n            <code className='bg-gray-100 px-2 py-1 rounded text-xs font-mono'>\n              npm run quality:check\n            </code>\n          </div>\n        </div>\n      </div>\n\n      <div className='flex-1 overflow-auto p-6'>\n        <div className='max-w-7xl mx-auto'>\n          {/* Category Summary */}\n          <Card className='mb-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200'>\n            <CardContent className='pt-6'>\n              <div className='flex items-center justify-between'>\n                <div>\n                  <h3 className='text-lg font-semibold text-blue-900'>\n                    Continuous Improvement Overview\n                  </h3>\n                  <p className='text-sm text-blue-700 mt-1'>\n                    Displaying 2 priority suggestions per category for focused improvements\n                  </p>\n                </div>\n                <Badge className='bg-blue-100 text-blue-800'>\n                  {Object.values(categorizedSuggestions).flat().length} Active Suggestions\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          {isLoading ? (\n            <div className='flex items-center justify-center h-64'>\n              <div className='animate-spin rounded-full h-32 w-32 border-b-2 border-koveo-navy'></div>\n            </div>\n          ) : (\n            <div className='space-y-8'>\n              {categoryConfig.map((category) => {\n                const categorySuggestions = categorizedSuggestions[category.name] || [];\n                const Icon = category.icon;\n\n                if (categorySuggestions.length === 0) {\n                  return null;\n                }\n\n                return (\n                  <div key={category.name} className='space-y-4'>\n                    {/* Category Header */}\n                    <div\n                      className={`flex items-center gap-3 p-3 rounded-lg border ${category.color}`}\n                    >\n                      <Icon className='h-5 w-5' />\n                      <h2 className='text-lg font-semibold'>{category.name}</h2>\n                      <Badge variant='outline' className='ml-auto'>\n                        {categorySuggestions.length}{' '}\n                        {categorySuggestions.length === 1 ? 'suggestion' : 'suggestions'}\n                      </Badge>\n                    </div>\n\n                    {/* Category Suggestions */}\n                    <div className='grid gap-4 md:grid-cols-2'>\n                      {categorySuggestions.map((suggestion) => (\n                        <Card\n                          key={suggestion.id}\n                          className='hover:shadow-lg transition-all hover:scale-[1.02]'\n                        >\n                          <CardHeader>\n                            <div className='flex items-start justify-between'>\n                              <div className='flex-1'>\n                                <CardTitle className='text-lg font-semibold text-koveo-navy'>\n                                  {suggestion.title}\n                                </CardTitle>\n                                <CardDescription className='mt-2'>\n                                  {suggestion.description}\n                                </CardDescription>\n                              </div>\n                              <div className='flex flex-col gap-2 ml-4'>\n                                <Badge className={getPriorityColor(suggestion.priority)}>\n                                  {suggestion.priority} Priority\n                                </Badge>\n                                <Badge className={getStatusColor(suggestion.status)}>\n                                  {suggestion.status}\n                                </Badge>\n                              </div>\n                            </div>\n                          </CardHeader>\n\n                          <CardContent>\n                            <div className='mb-4'>\n                              <div className='flex items-center gap-4 text-sm text-gray-600 mb-3'>\n                                <span className='flex items-center gap-1'>\n                                  <MessageSquare size={16} />\n                                  {suggestion.category}\n                                </span>\n                                <span>\n                                  Created: {new Date(suggestion.createdAt).toLocaleDateString()}\n                                </span>\n                              </div>\n\n                              {/* AI Agent Prompt */}\n                              <div className='bg-blue-50 border border-blue-200 rounded-lg p-3'>\n                                <div className='text-xs font-semibold text-blue-800 mb-2 uppercase tracking-wide'>\n                                  AI Agent Prompt\n                                </div>\n                                <div className='text-sm text-blue-900 font-mono bg-white border rounded px-3 py-2 select-all cursor-pointer'>\n                                  {getAIPrompt(suggestion)}\n                                </div>\n                                <div className='text-xs text-blue-600 mt-1'>\n                                  Click to select and copy the prompt above\n                                </div>\n                              </div>\n                            </div>\n\n                            <div className='flex items-center justify-between'>\n                              <div></div>\n\n                              <div className='flex gap-2'>\n                                {suggestion.status === 'New' && (\n                                  <Button\n                                    size='sm'\n                                    variant='outline'\n                                    onClick={() => acknowledgeMutation.mutate(suggestion.id)}\n                                    disabled={acknowledgeMutation.isPending}\n                                    className='flex items-center gap-2'\n                                  >\n                                    <Clock size={16} />\n                                    Acknowledge\n                                  </Button>\n                                )}\n\n                                {(suggestion.status === 'New' ||\n                                  suggestion.status === 'Acknowledged') && (\n                                  <Button\n                                    size='sm'\n                                    onClick={() => completeMutation.mutate(suggestion.id)}\n                                    disabled={completeMutation.isPending}\n                                    className='flex items-center gap-2'\n                                  >\n                                    <CheckCircle size={16} />\n                                    Mark Complete\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n\n              {/* Empty State */}\n              {Object.values(categorizedSuggestions).flat().length === 0 && (\n                <Card>\n                  <CardContent className='flex flex-col items-center justify-center py-16'>\n                    <MessageSquare size={48} className='text-gray-400 mb-4' />\n                    <h3 className='text-lg font-semibold text-gray-600 mb-2'>\n                      No Active Suggestions\n                    </h3>\n                    <p className='text-gray-500 text-center max-w-md'>\n                      All suggestions have been completed or no improvement suggestions have been\n                      generated yet. Run the quality check to generate new recommendations.\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"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","ignoreList":[]}