7024eea69d455259b3d95e1b4e4d6287
// Mock database for Jest tests
const mockQuery = jest.fn(() => Promise.resolve({ rows: [] }));
const mockSql = jest.fn(() => Promise.resolve({ rows: [] }));
mockSql.begin = jest.fn(() => Promise.resolve());
mockSql.commit = jest.fn(() => Promise.resolve());
mockSql.rollback = jest.fn(() => Promise.resolve());
const mockDb = {
    select: jest.fn(() => ({
        from: jest.fn(() => ({
            where: jest.fn(() => Promise.resolve([])),
            limit: jest.fn(() => Promise.resolve([])),
            orderBy: jest.fn(() => Promise.resolve([])),
        })),
    })),
    insert: jest.fn(() => ({
        into: jest.fn(() => ({
            values: jest.fn(() => ({
                returning: jest.fn(() => Promise.resolve([])),
            })),
        })),
    })),
    update: jest.fn(() => ({
        set: jest.fn(() => ({
            where: jest.fn(() => Promise.resolve([])),
        })),
    })),
    delete: jest.fn(() => ({
        from: jest.fn(() => ({
            where: jest.fn(() => Promise.resolve([])),
        })),
    })),
};
// Mock schema object
const mockSchemaObject = {
    users: {
        id: 'id',
        email: 'email',
        role: 'role',
    },
    organizations: {
        id: 'id',
        name: 'name',
    },
    invitations: {
        id: 'id',
        email: 'email',
        token: 'token',
    },
    buildings: {
        id: 'id',
        name: 'name',
    },
    residences: {
        id: 'id',
        buildingId: 'buildingId',
    },
    documents: {
        id: 'id',
        name: 'name',
    },
    demands: {
        id: 'id',
        title: 'title',
    },
};
module.exports = {
    mockDb,
    mockSql,
    mockQuery,
    mockSchemaObject,
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy9tb2Nrcy9kYXRhYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUUvRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzdELE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNqRCxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDbEQsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBRXBELE1BQU0sTUFBTSxHQUFHO0lBQ2IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ25CLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN6QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzVDLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzlDLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNsQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzFDLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzFDLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztDQUNKLENBQUM7QUFFRixxQkFBcUI7QUFDckIsTUFBTSxnQkFBZ0IsR0FBRztJQUN2QixLQUFLLEVBQUU7UUFDTCxFQUFFLEVBQUUsSUFBSTtRQUNSLEtBQUssRUFBRSxPQUFPO1FBQ2QsSUFBSSxFQUFFLE1BQU07S0FDYjtJQUNELGFBQWEsRUFBRTtRQUNiLEVBQUUsRUFBRSxJQUFJO1FBQ1IsSUFBSSxFQUFFLE1BQU07S0FDYjtJQUNELFdBQVcsRUFBRTtRQUNYLEVBQUUsRUFBRSxJQUFJO1FBQ1IsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsT0FBTztLQUNmO0lBQ0QsU0FBUyxFQUFFO1FBQ1QsRUFBRSxFQUFFLElBQUk7UUFDUixJQUFJLEVBQUUsTUFBTTtLQUNiO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsRUFBRSxFQUFFLElBQUk7UUFDUixVQUFVLEVBQUUsWUFBWTtLQUN6QjtJQUNELFNBQVMsRUFBRTtRQUNULEVBQUUsRUFBRSxJQUFJO1FBQ1IsSUFBSSxFQUFFLE1BQU07S0FDYjtJQUNELE9BQU8sRUFBRTtRQUNQLEVBQUUsRUFBRSxJQUFJO1FBQ1IsS0FBSyxFQUFFLE9BQU87S0FDZjtDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsT0FBTyxHQUFHO0lBQ2YsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsZ0JBQWdCO0NBQ2pCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy9tb2Nrcy9kYXRhYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2NrIGRhdGFiYXNlIGZvciBKZXN0IHRlc3RzXG5jb25zdCBtb2NrUXVlcnkgPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IHJvd3M6IFtdIH0pKTtcblxuY29uc3QgbW9ja1NxbCA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgcm93czogW10gfSkpO1xubW9ja1NxbC5iZWdpbiA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpO1xubW9ja1NxbC5jb21taXQgPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcbm1vY2tTcWwucm9sbGJhY2sgPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcblxuY29uc3QgbW9ja0RiID0ge1xuICBzZWxlY3Q6IGplc3QuZm4oKCkgPT4gKHtcbiAgICBmcm9tOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICB3aGVyZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcbiAgICAgIGxpbWl0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShbXSkpLFxuICAgICAgb3JkZXJCeTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcbiAgICB9KSksXG4gIH0pKSxcbiAgaW5zZXJ0OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgaW50bzogamVzdC5mbigoKSA9PiAoe1xuICAgICAgdmFsdWVzOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgIHJldHVybmluZzogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcbiAgICAgIH0pKSxcbiAgICB9KSksXG4gIH0pKSxcbiAgdXBkYXRlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgc2V0OiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICB3aGVyZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcbiAgICB9KSksXG4gIH0pKSxcbiAgZGVsZXRlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgZnJvbTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgd2hlcmU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFtdKSksXG4gICAgfSkpLFxuICB9KSksXG59O1xuXG4vLyBNb2NrIHNjaGVtYSBvYmplY3RcbmNvbnN0IG1vY2tTY2hlbWFPYmplY3QgPSB7XG4gIHVzZXJzOiB7XG4gICAgaWQ6ICdpZCcsXG4gICAgZW1haWw6ICdlbWFpbCcsXG4gICAgcm9sZTogJ3JvbGUnLFxuICB9LFxuICBvcmdhbml6YXRpb25zOiB7XG4gICAgaWQ6ICdpZCcsXG4gICAgbmFtZTogJ25hbWUnLFxuICB9LFxuICBpbnZpdGF0aW9uczoge1xuICAgIGlkOiAnaWQnLFxuICAgIGVtYWlsOiAnZW1haWwnLFxuICAgIHRva2VuOiAndG9rZW4nLFxuICB9LFxuICBidWlsZGluZ3M6IHtcbiAgICBpZDogJ2lkJyxcbiAgICBuYW1lOiAnbmFtZScsXG4gIH0sXG4gIHJlc2lkZW5jZXM6IHtcbiAgICBpZDogJ2lkJyxcbiAgICBidWlsZGluZ0lkOiAnYnVpbGRpbmdJZCcsXG4gIH0sXG4gIGRvY3VtZW50czoge1xuICAgIGlkOiAnaWQnLFxuICAgIG5hbWU6ICduYW1lJyxcbiAgfSxcbiAgZGVtYW5kczoge1xuICAgIGlkOiAnaWQnLFxuICAgIHRpdGxlOiAndGl0bGUnLFxuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1vY2tEYixcbiAgbW9ja1NxbCxcbiAgbW9ja1F1ZXJ5LFxuICBtb2NrU2NoZW1hT2JqZWN0LFxufTsiXSwidmVyc2lvbiI6M30=