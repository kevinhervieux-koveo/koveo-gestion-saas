e62e4ffcc466ba984665252aabde7232
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rangeOverlaps = rangeOverlaps;
const index_js_1 = require("../classes/index.js");
const rangeIncludesDate_js_1 = require("./rangeIncludesDate.js");
/**
 * Determines if two date ranges overlap.
 *
 * @since 9.2.2
 * @param rangeLeft - The first date range.
 * @param rangeRight - The second date range.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the ranges overlap, otherwise `false`.
 * @group Utilities
 */
function rangeOverlaps(rangeLeft, rangeRight, dateLib = index_js_1.defaultDateLib) {
    return ((0, rangeIncludesDate_js_1.rangeIncludesDate)(rangeLeft, rangeRight.from, false, dateLib) ||
        (0, rangeIncludesDate_js_1.rangeIncludesDate)(rangeLeft, rangeRight.to, false, dateLib) ||
        (0, rangeIncludesDate_js_1.rangeIncludesDate)(rangeRight, rangeLeft.from, false, dateLib) ||
        (0, rangeIncludesDate_js_1.rangeIncludesDate)(rangeRight, rangeLeft.to, false, dateLib));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy91dGlscy9yYW5nZU92ZXJsYXBzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE9BQU8sQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0FBQ3RDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sc0JBQXNCLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDakU7Ozs7Ozs7OztHQVNHO0FBQ0gsU0FBUyxhQUFhLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsVUFBVSxDQUFDLGNBQWM7SUFDN0UsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQztRQUM3RixDQUFDLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUM7UUFDdkYsQ0FBQyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQ3pGLENBQUMsQ0FBQyxFQUFFLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDakcsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9yZWFjdC1kYXktcGlja2VyL2Rpc3QvY2pzL3V0aWxzL3JhbmdlT3ZlcmxhcHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJhbmdlT3ZlcmxhcHMgPSByYW5nZU92ZXJsYXBzO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9jbGFzc2VzL2luZGV4LmpzXCIpO1xuY29uc3QgcmFuZ2VJbmNsdWRlc0RhdGVfanNfMSA9IHJlcXVpcmUoXCIuL3JhbmdlSW5jbHVkZXNEYXRlLmpzXCIpO1xuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBkYXRlIHJhbmdlcyBvdmVybGFwLlxuICpcbiAqIEBzaW5jZSA5LjIuMlxuICogQHBhcmFtIHJhbmdlTGVmdCAtIFRoZSBmaXJzdCBkYXRlIHJhbmdlLlxuICogQHBhcmFtIHJhbmdlUmlnaHQgLSBUaGUgc2Vjb25kIGRhdGUgcmFuZ2UuXG4gKiBAcGFyYW0gZGF0ZUxpYiAtIFRoZSBkYXRlIHV0aWxpdHkgbGlicmFyeSBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmFuZ2VzIG92ZXJsYXAsIG90aGVyd2lzZSBgZmFsc2VgLlxuICogQGdyb3VwIFV0aWxpdGllc1xuICovXG5mdW5jdGlvbiByYW5nZU92ZXJsYXBzKHJhbmdlTGVmdCwgcmFuZ2VSaWdodCwgZGF0ZUxpYiA9IGluZGV4X2pzXzEuZGVmYXVsdERhdGVMaWIpIHtcbiAgICByZXR1cm4gKCgwLCByYW5nZUluY2x1ZGVzRGF0ZV9qc18xLnJhbmdlSW5jbHVkZXNEYXRlKShyYW5nZUxlZnQsIHJhbmdlUmlnaHQuZnJvbSwgZmFsc2UsIGRhdGVMaWIpIHx8XG4gICAgICAgICgwLCByYW5nZUluY2x1ZGVzRGF0ZV9qc18xLnJhbmdlSW5jbHVkZXNEYXRlKShyYW5nZUxlZnQsIHJhbmdlUmlnaHQudG8sIGZhbHNlLCBkYXRlTGliKSB8fFxuICAgICAgICAoMCwgcmFuZ2VJbmNsdWRlc0RhdGVfanNfMS5yYW5nZUluY2x1ZGVzRGF0ZSkocmFuZ2VSaWdodCwgcmFuZ2VMZWZ0LmZyb20sIGZhbHNlLCBkYXRlTGliKSB8fFxuICAgICAgICAoMCwgcmFuZ2VJbmNsdWRlc0RhdGVfanNfMS5yYW5nZUluY2x1ZGVzRGF0ZSkocmFuZ2VSaWdodCwgcmFuZ2VMZWZ0LnRvLCBmYWxzZSwgZGF0ZUxpYikpO1xufVxuIl0sInZlcnNpb24iOjN9