2ed7a7140c02ac6f9cbe1d58582f36b6
'use strict';
// It is not possible to create a real FileList programmatically.
// Therefore assigning `files` property with a programmatically created FileList results in an error.
// Just assigning the property (as per fireEvent) breaks the interweaving with the `value` property.
const fakeFiles = Symbol('files and value properties are mocked');
function restoreProperty(obj, prop, descriptor) {
    if (descriptor) {
        Object.defineProperty(obj, prop, descriptor);
    }
    else {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete obj[prop];
    }
}
function setFiles(el, files) {
    var _el_fakeFiles;
    (_el_fakeFiles = el[fakeFiles]) === null || _el_fakeFiles === undefined ? undefined : _el_fakeFiles.restore();
    const typeDescr = Object.getOwnPropertyDescriptor(el, 'type');
    const valueDescr = Object.getOwnPropertyDescriptor(el, 'value');
    const filesDescr = Object.getOwnPropertyDescriptor(el, 'files');
    function restore() {
        restoreProperty(el, 'type', typeDescr);
        restoreProperty(el, 'value', valueDescr);
        restoreProperty(el, 'files', filesDescr);
    }
    el[fakeFiles] = {
        restore
    };
    Object.defineProperties(el, {
        files: {
            configurable: true,
            get: () => files
        },
        value: {
            configurable: true,
            get: () => files.length ? `C:\\fakepath\\${files[0].name}` : '',
            set(v) {
                if (v === '') {
                    restore();
                }
                else {
                    var _valueDescr_set;
                    valueDescr === null || valueDescr === undefined ? undefined : (_valueDescr_set = valueDescr.set) === null || _valueDescr_set === undefined ? undefined : _valueDescr_set.call(el, v);
                }
            }
        },
        type: {
            configurable: true,
            get: () => 'file',
            set(v) {
                if (v !== 'file') {
                    restore();
                    el.type = v;
                }
            }
        }
    });
}
exports.setFiles = setFiles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3V0aWxzL2VkaXQvc2V0RmlsZXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsaUVBQWlFO0FBQ2pFLHFHQUFxRztBQUNyRyxvR0FBb0c7QUFDcEcsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDbEUsU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVO0lBQzFDLElBQUksVUFBVSxFQUFFLENBQUM7UUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDakQsQ0FBQztTQUFNLENBQUM7UUFDSixnRUFBZ0U7UUFDaEUsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsQ0FBQztBQUNMLENBQUM7QUFDRCxTQUFTLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBSztJQUN2QixJQUFJLGFBQWEsQ0FBQztJQUNsQixDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksYUFBYSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDOUcsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsU0FBUyxPQUFPO1FBQ1osZUFBZSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdkMsZUFBZSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDekMsZUFBZSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNELEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRztRQUNaLE9BQU87S0FDVixDQUFDO0lBQ0YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtRQUN4QixLQUFLLEVBQUU7WUFDSCxZQUFZLEVBQUUsSUFBSTtZQUNsQixHQUFHLEVBQUUsR0FBRSxFQUFFLENBQUEsS0FBSztTQUNqQjtRQUNELEtBQUssRUFBRTtZQUNILFlBQVksRUFBRSxJQUFJO1lBQ2xCLEdBQUcsRUFBRSxHQUFFLEVBQUUsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdELEdBQUcsQ0FBRSxDQUFDO2dCQUNGLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO29CQUNYLE9BQU8sRUFBRSxDQUFDO2dCQUNkLENBQUM7cUJBQU0sQ0FBQztvQkFDSixJQUFJLGVBQWUsQ0FBQztvQkFDcEIsVUFBVSxLQUFLLElBQUksSUFBSSxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLElBQUksZUFBZSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDekwsQ0FBQztZQUNMLENBQUM7U0FDSjtRQUNELElBQUksRUFBRTtZQUNGLFlBQVksRUFBRSxJQUFJO1lBQ2xCLEdBQUcsRUFBRSxHQUFFLEVBQUUsQ0FBQSxNQUFNO1lBQ2YsR0FBRyxDQUFFLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLEtBQUssTUFBTSxFQUFFLENBQUM7b0JBQ2YsT0FBTyxFQUFFLENBQUM7b0JBQ1YsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7Z0JBQ2hCLENBQUM7WUFDTCxDQUFDO1NBQ0o7S0FDSixDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3V0aWxzL2VkaXQvc2V0RmlsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBJdCBpcyBub3QgcG9zc2libGUgdG8gY3JlYXRlIGEgcmVhbCBGaWxlTGlzdCBwcm9ncmFtbWF0aWNhbGx5LlxuLy8gVGhlcmVmb3JlIGFzc2lnbmluZyBgZmlsZXNgIHByb3BlcnR5IHdpdGggYSBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgRmlsZUxpc3QgcmVzdWx0cyBpbiBhbiBlcnJvci5cbi8vIEp1c3QgYXNzaWduaW5nIHRoZSBwcm9wZXJ0eSAoYXMgcGVyIGZpcmVFdmVudCkgYnJlYWtzIHRoZSBpbnRlcndlYXZpbmcgd2l0aCB0aGUgYHZhbHVlYCBwcm9wZXJ0eS5cbmNvbnN0IGZha2VGaWxlcyA9IFN5bWJvbCgnZmlsZXMgYW5kIHZhbHVlIHByb3BlcnRpZXMgYXJlIG1vY2tlZCcpO1xuZnVuY3Rpb24gcmVzdG9yZVByb3BlcnR5KG9iaiwgcHJvcCwgZGVzY3JpcHRvcikge1xuICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIGRlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgZGVsZXRlIG9ialtwcm9wXTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRGaWxlcyhlbCwgZmlsZXMpIHtcbiAgICB2YXIgX2VsX2Zha2VGaWxlcztcbiAgICAoX2VsX2Zha2VGaWxlcyA9IGVsW2Zha2VGaWxlc10pID09PSBudWxsIHx8IF9lbF9mYWtlRmlsZXMgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9lbF9mYWtlRmlsZXMucmVzdG9yZSgpO1xuICAgIGNvbnN0IHR5cGVEZXNjciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZWwsICd0eXBlJyk7XG4gICAgY29uc3QgdmFsdWVEZXNjciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZWwsICd2YWx1ZScpO1xuICAgIGNvbnN0IGZpbGVzRGVzY3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVsLCAnZmlsZXMnKTtcbiAgICBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgICAgICByZXN0b3JlUHJvcGVydHkoZWwsICd0eXBlJywgdHlwZURlc2NyKTtcbiAgICAgICAgcmVzdG9yZVByb3BlcnR5KGVsLCAndmFsdWUnLCB2YWx1ZURlc2NyKTtcbiAgICAgICAgcmVzdG9yZVByb3BlcnR5KGVsLCAnZmlsZXMnLCBmaWxlc0Rlc2NyKTtcbiAgICB9XG4gICAgZWxbZmFrZUZpbGVzXSA9IHtcbiAgICAgICAgcmVzdG9yZVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZWwsIHtcbiAgICAgICAgZmlsZXM6IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogKCk9PmZpbGVzXG4gICAgICAgIH0sXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6ICgpPT5maWxlcy5sZW5ndGggPyBgQzpcXFxcZmFrZXBhdGhcXFxcJHtmaWxlc1swXS5uYW1lfWAgOiAnJyxcbiAgICAgICAgICAgIHNldCAodikge1xuICAgICAgICAgICAgICAgIGlmICh2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF92YWx1ZURlc2NyX3NldDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVEZXNjciA9PT0gbnVsbCB8fCB2YWx1ZURlc2NyID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAoX3ZhbHVlRGVzY3Jfc2V0ID0gdmFsdWVEZXNjci5zZXQpID09PSBudWxsIHx8IF92YWx1ZURlc2NyX3NldCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX3ZhbHVlRGVzY3Jfc2V0LmNhbGwoZWwsIHYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiAoKT0+J2ZpbGUnLFxuICAgICAgICAgICAgc2V0ICh2KSB7XG4gICAgICAgICAgICAgICAgaWYgKHYgIT09ICdmaWxlJykge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLnR5cGUgPSB2O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5leHBvcnRzLnNldEZpbGVzID0gc2V0RmlsZXM7XG4iXSwidmVyc2lvbiI6M30=