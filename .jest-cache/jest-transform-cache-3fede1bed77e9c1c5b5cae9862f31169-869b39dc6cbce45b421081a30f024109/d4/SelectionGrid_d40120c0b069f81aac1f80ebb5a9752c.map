{"file":"/home/runner/workspace/client/src/components/common/SelectionGrid.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/common/SelectionGrid.tsx"],"sourcesContent":["import { Building, Home, Users, ArrowLeft } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { LoadingSpinner } from '@/components/ui/loading-spinner';\nimport { NoDataCard } from '@/components/ui/no-data-card';\nimport { useLanguage } from '@/hooks/use-language';\n\n/**\n * Item type for selection grid\n */\nexport interface SelectionGridItem {\n  id: string;\n  name: string;\n  details: string;\n  type: 'organization' | 'building' | 'residence';\n  disabled?: boolean;\n  disabledReason?: string;\n}\n\n/**\n * Props for SelectionGrid component\n */\ninterface SelectionGridProps {\n  /**\n   * Title to display above the grid\n   */\n  title: string;\n  \n  /**\n   * Array of items to display as cards\n   */\n  items: SelectionGridItem[];\n  \n  /**\n   * Callback when an item is selected\n   */\n  onSelectItem: (id: string) => void;\n  \n  /**\n   * Optional callback for back navigation\n   */\n  onBack: (() => void) | null;\n  \n  /**\n   * Custom text for back button (defaults to 'back')\n   */\n  backButtonText?: string;\n  \n  /**\n   * Loading state flag\n   */\n  isLoading: boolean;\n}\n\n/**\n * Get appropriate icon for item type\n */\nfunction getIconForType(type: SelectionGridItem['type']) {\n  switch (type) {\n    case 'organization':\n      return Users;\n    case 'building':\n      return Building;\n    case 'residence':\n      return Home;\n    default:\n      return Building;\n  }\n}\n\n/**\n * SelectionGrid component - displays a grid of selectable cards for hierarchical navigation\n * Used for Organization â†’ Building â†’ Residence selection flows\n */\nexport function SelectionGrid({ \n  title, \n  items, \n  onSelectItem, \n  onBack, \n  backButtonText = 'back',\n  isLoading \n}: SelectionGridProps) {\n  const { t } = useLanguage();\n\n  // Show loading state\n  if (isLoading) {\n    return <LoadingSpinner />;\n  }\n\n  // Show no data state\n  if (items.length === 0) {\n    return (\n      <div className=\"flex flex-col h-full\">\n        {onBack && (\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"selection-title\">\n              {title}\n            </h2>\n            <Button\n              variant=\"outline\"\n              onClick={onBack}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              {backButtonText}\n            </Button>\n          </div>\n        )}\n        \n        <NoDataCard\n          icon={Building}\n          titleKey=\"noItemsFound\"\n          descriptionKey=\"noItemsMessage\"\n          badgeKey=\"noData\"\n          testId=\"no-items-message\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header with title and optional back button - only show if title exists or back button is needed */}\n      {(title && title.trim() !== '') || onBack ? (\n        <div className=\"flex justify-between items-center mb-6\">\n          {title && title.trim() !== '' && (\n            <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"selection-title\">\n              {title}\n            </h2>\n          )}\n          \n          {onBack && (\n            <Button\n              variant=\"outline\"\n              onClick={onBack}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              {backButtonText}\n            </Button>\n          )}\n        </div>\n      ) : null}\n\n      {/* Grid of selection cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {items.map((item) => {\n          const Icon = getIconForType(item.type);\n          const isDisabled = item.disabled || false;\n          \n          return (\n            <Card \n              key={item.id} \n              className={`transition-shadow ${isDisabled ? 'opacity-60 cursor-not-allowed' : 'hover:shadow-md cursor-pointer'}`}\n              data-testid={`card-${item.type}-${item.id}`}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Icon className={`w-5 h-5 ${isDisabled ? 'text-gray-400' : 'text-blue-600'}`} />\n                  <CardTitle className={`text-lg ${isDisabled ? 'text-gray-500' : ''}`} data-testid={`text-name-${item.id}`}>\n                    {item.name}\n                  </CardTitle>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <p \n                  className={`text-sm ${isDisabled ? 'text-gray-400' : 'text-gray-600'}`}\n                  data-testid={`text-details-${item.id}`}\n                >\n                  {item.details}\n                </p>\n                \n                <Button\n                  onClick={() => {\n                    if (!isDisabled) {\n                      console.log('ðŸŽ¯ [SELECTION GRID DEBUG] Button clicked:', { itemId: item.id, itemName: item.name });\n                      onSelectItem(item.id);\n                    }\n                  }}\n                  disabled={isDisabled}\n                  className=\"w-full\"\n                  variant={isDisabled ? \"secondary\" : \"default\"}\n                  data-testid={`button-select-${item.id}`}\n                >\n                  {isDisabled && item.disabledReason ? item.disabledReason : t('select' as any)}\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}"],"version":3}