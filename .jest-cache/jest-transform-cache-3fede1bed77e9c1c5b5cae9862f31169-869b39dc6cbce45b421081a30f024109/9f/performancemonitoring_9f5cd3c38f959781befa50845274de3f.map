{"file":"/home/runner/workspace/server/performance-monitoring.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/performance-monitoring.ts"],"sourcesContent":["/**\n * Server-side performance monitoring for Quebec property management SaaS.\n * Tracks database query performance and provides optimization insights.\n */\n\nimport { performance } from 'perf_hooks';\n\n/**\n * Query performance tracker.\n */\nclass DatabasePerformanceMonitor {\n  private queryTimes: number[] = [];\n  private slowQueries: Array<{ query: string; duration: number; timestamp: Date }> = [];\n  private readonly SLOW_QUERY_THRESHOLD = 100; // ms\n\n  /**\n   * Tracks execution time of a database operation.\n   * @param queryName\n   * @param operation\n   */\n  trackQuery<T>(queryName: string, operation: () => Promise<T>): Promise<T> {\n    const startTime = performance.now();\n\n    return operation()\n      .then((result) => {\n        const duration = performance.now() - startTime;\n        this.recordQueryTime(queryName, duration);\n        return result;\n      })\n      .catch((error) => {\n        const duration = performance.now() - startTime;\n        this.recordQueryTime(queryName, duration);\n        throw error;\n      });\n  }\n\n  /**\n   * Records query execution time.\n   * @param queryName\n   * @param duration\n   */\n  private recordQueryTime(queryName: string, duration: number): void {\n    this.queryTimes.push(duration);\n\n    // Keep only last 1000 query times for memory efficiency\n    if (this.queryTimes.length > 1000) {\n      this.queryTimes.shift();\n    }\n\n    // Track slow queries\n    if (duration > this.SLOW_QUERY_THRESHOLD) {\n      this.slowQueries.push({\n        query: queryName,\n        duration,\n        timestamp: new Date(),\n      });\n\n      // Keep only last 100 slow queries\n      if (this.slowQueries.length > 100) {\n        this.slowQueries.shift();\n      }\n\n    }\n  }\n\n  /**\n   * Gets average query time.\n   */\n  getAverageQueryTime(): number {\n    if (this.queryTimes.length === 0) {\n      return 0;\n    }\n    return this.queryTimes.reduce((a, b) => a + b, 0) / this.queryTimes.length;\n  }\n\n  /**\n   * Gets performance statistics.\n   */\n  getPerformanceStats(): any {\n    const avg = this.getAverageQueryTime();\n    const max = Math.max(...this.queryTimes);\n    const min = Math.min(...this.queryTimes);\n\n    return {\n      averageQueryTime: `${avg.toFixed(2)}ms`,\n      maxQueryTime: `${max.toFixed(2)}ms`,\n      minQueryTime: `${min.toFixed(2)}ms`,\n      totalQueries: this.queryTimes.length,\n      slowQueries: this.slowQueries.length,\n      recentSlowQueries: this.slowQueries.slice(-10),\n    };\n  }\n\n  /**\n   * Provides optimization recommendations.\n   */\n  getOptimizationRecommendations(): string[] {\n    const avg = this.getAverageQueryTime();\n    const recommendations: string[] = [];\n\n    if (avg > 100) {\n      recommendations.push('Average query time exceeds 100ms. Consider adding database indexes.');\n    }\n\n    if (this.slowQueries.length > 10) {\n      recommendations.push('Multiple slow queries detected. Review and optimize frequent queries.');\n    }\n\n    const commonSlowQueries = this.getCommonSlowQueries();\n    if (commonSlowQueries.length > 0) {\n      recommendations.push(`Common slow queries: ${commonSlowQueries.join(', ')}`);\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Identifies commonly slow queries.\n   */\n  private getCommonSlowQueries(): string[] {\n    const queryFrequency: Record<string, number> = {};\n\n    this.slowQueries.forEach(({ query }) => {\n      queryFrequency[query] = (queryFrequency[query] || 0) + 1;\n    });\n\n    return Object.entries(queryFrequency)\n      .filter(([, count]) => count > 2)\n      .map(([query]) => query);\n  }\n\n  /**\n   * Resets performance tracking data.\n   */\n  reset(): void {\n    this.queryTimes = [];\n    this.slowQueries = [];\n  }\n}\n\n/**\n * Global performance monitor instance.\n */\nexport const dbPerformanceMonitor = new DatabasePerformanceMonitor();\n\n/**\n * Decorator for tracking database operation performance.\n * @param queryName\n */\n/**\n * TrackPerformance function.\n * @param queryName\n * @returns Function result.\n */\nexport function trackPerformance(queryName: string) {\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n\n    descriptor.value = async function (...args: unknown[]) {\n      return dbPerformanceMonitor.trackQuery(queryName, () => method.apply(this, args));\n    };\n\n    return descriptor;\n  };\n}\n"],"version":3}