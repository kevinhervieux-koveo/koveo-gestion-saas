07e85f1188f65ec192944c9e7a4bf32e
'use strict';
var isContentEditable = require('../edit/isContentEditable.js');
var isElementType = require('../misc/isElementType.js');
function getNextCursorPosition(node, offset, direction, inputType) {
    // The behavior at text node zero offset is inconsistent.
    // When walking backwards:
    // Firefox always moves to zero offset and jumps over last offset.
    // Chrome jumps over zero offset per default but over last offset when Shift is pressed.
    // The cursor always moves to zero offset if the focus area (contenteditable or body) ends there.
    // When walking forward both ignore zero offset.
    // When walking over input elements the cursor moves before or after that element.
    // When walking over line breaks the cursor moves inside any following text node.
    if (isTextNode(node) && offset + direction >= 0 && offset + direction <= node.nodeValue.length) {
        return {
            node,
            offset: offset + direction
        };
    }
    const nextNode = getNextCharacterContentNode(node, offset, direction);
    if (nextNode) {
        if (isTextNode(nextNode)) {
            return {
                node: nextNode,
                offset: direction > 0 ? Math.min(1, nextNode.nodeValue.length) : Math.max(nextNode.nodeValue.length - 1, 0)
            };
        }
        else if (isElementType.isElementType(nextNode, 'br')) {
            const nextPlusOne = getNextCharacterContentNode(nextNode, undefined, direction);
            if (!nextPlusOne) {
                // The behavior when there is no possible cursor position beyond the line break is inconsistent.
                // In Chrome outside of contenteditable moving before a leading line break is possible.
                // A leading line break can still be removed per deleteContentBackward.
                // A trailing line break on the other hand is not removed by deleteContentForward.
                if (direction < 0 && inputType === 'deleteContentBackward') {
                    return {
                        node: nextNode.parentNode,
                        offset: getOffset(nextNode)
                    };
                }
                return undefined;
            }
            else if (isTextNode(nextPlusOne)) {
                return {
                    node: nextPlusOne,
                    offset: direction > 0 ? 0 : nextPlusOne.nodeValue.length
                };
            }
            else if (direction < 0 && isElementType.isElementType(nextPlusOne, 'br')) {
                return {
                    node: nextNode.parentNode,
                    offset: getOffset(nextNode)
                };
            }
            else {
                return {
                    node: nextPlusOne.parentNode,
                    offset: getOffset(nextPlusOne) + (direction > 0 ? 0 : 1)
                };
            }
        }
        else {
            return {
                node: nextNode.parentNode,
                offset: getOffset(nextNode) + (direction > 0 ? 1 : 0)
            };
        }
    }
}
function getNextCharacterContentNode(node, offset, direction) {
    const nextOffset = Number(offset) + (direction < 0 ? -1 : 0);
    if (offset !== undefined && isElement(node) && nextOffset >= 0 && nextOffset < node.children.length) {
        node = node.children[nextOffset];
    }
    return walkNodes(node, direction === 1 ? 'next' : 'previous', isTreatedAsCharacterContent);
}
function isTreatedAsCharacterContent(node) {
    if (isTextNode(node)) {
        return true;
    }
    if (isElement(node)) {
        if (isElementType.isElementType(node, [
            'input',
            'textarea'
        ])) {
            return node.type !== 'hidden';
        }
        else if (isElementType.isElementType(node, 'br')) {
            return true;
        }
    }
    return false;
}
function getOffset(node) {
    let i = 0;
    while (node.previousSibling) {
        i++;
        node = node.previousSibling;
    }
    return i;
}
function isElement(node) {
    return node.nodeType === 1;
}
function isTextNode(node) {
    return node.nodeType === 3;
}
function walkNodes(node, direction, callback) {
    for (;;) {
        var _node_ownerDocument;
        const sibling = node[`${direction}Sibling`];
        if (sibling) {
            node = getDescendant(sibling, direction === 'next' ? 'first' : 'last');
            if (callback(node)) {
                return node;
            }
        }
        else if (node.parentNode && (!isElement(node.parentNode) || !isContentEditable.isContentEditable(node.parentNode) && node.parentNode !== ((_node_ownerDocument = node.ownerDocument) === null || _node_ownerDocument === undefined ? undefined : _node_ownerDocument.body))) {
            node = node.parentNode;
        }
        else {
            break;
        }
    }
}
function getDescendant(node, direction) {
    while (node.hasChildNodes()) {
        node = node[`${direction}Child`];
    }
    return node;
}
exports.getNextCursorPosition = getNextCursorPosition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3V0aWxzL2ZvY3VzL2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQ2hFLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBRXhELFNBQVMscUJBQXFCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUztJQUM3RCx5REFBeUQ7SUFDekQsMEJBQTBCO0lBQzFCLGtFQUFrRTtJQUNsRSx3RkFBd0Y7SUFDeEYsaUdBQWlHO0lBQ2pHLGdEQUFnRDtJQUNoRCxrRkFBa0Y7SUFDbEYsaUZBQWlGO0lBQ2pGLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sR0FBRyxTQUFTLElBQUksQ0FBQyxJQUFJLE1BQU0sR0FBRyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3RixPQUFPO1lBQ0gsSUFBSTtZQUNKLE1BQU0sRUFBRSxNQUFNLEdBQUcsU0FBUztTQUM3QixDQUFDO0lBQ04sQ0FBQztJQUNELE1BQU0sUUFBUSxHQUFHLDJCQUEyQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdEUsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNYLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDdkIsT0FBTztnQkFDSCxJQUFJLEVBQUUsUUFBUTtnQkFDZCxNQUFNLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzlHLENBQUM7UUFDTixDQUFDO2FBQU0sSUFBSSxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ3JELE1BQU0sV0FBVyxHQUFHLDJCQUEyQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDaEYsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUNmLGdHQUFnRztnQkFDaEcsdUZBQXVGO2dCQUN2Rix1RUFBdUU7Z0JBQ3ZFLGtGQUFrRjtnQkFDbEYsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLFNBQVMsS0FBSyx1QkFBdUIsRUFBRSxDQUFDO29CQUN6RCxPQUFPO3dCQUNILElBQUksRUFBRSxRQUFRLENBQUMsVUFBVTt3QkFDekIsTUFBTSxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUM7cUJBQzlCLENBQUM7Z0JBQ04sQ0FBQztnQkFDRCxPQUFPLFNBQVMsQ0FBQztZQUNyQixDQUFDO2lCQUFNLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7Z0JBQ2pDLE9BQU87b0JBQ0gsSUFBSSxFQUFFLFdBQVc7b0JBQ2pCLE1BQU0sRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTTtpQkFDM0QsQ0FBQztZQUNOLENBQUM7aUJBQU0sSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ3pFLE9BQU87b0JBQ0gsSUFBSSxFQUFFLFFBQVEsQ0FBQyxVQUFVO29CQUN6QixNQUFNLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQztpQkFDOUIsQ0FBQztZQUNOLENBQUM7aUJBQU0sQ0FBQztnQkFDSixPQUFPO29CQUNILElBQUksRUFBRSxXQUFXLENBQUMsVUFBVTtvQkFDNUIsTUFBTSxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUMzRCxDQUFDO1lBQ04sQ0FBQztRQUNMLENBQUM7YUFBTSxDQUFDO1lBQ0osT0FBTztnQkFDSCxJQUFJLEVBQUUsUUFBUSxDQUFDLFVBQVU7Z0JBQ3pCLE1BQU0sRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4RCxDQUFDO1FBQ04sQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDO0FBQ0QsU0FBUywyQkFBMkIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVM7SUFDeEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxJQUFJLENBQUMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLDJCQUEyQixDQUFDLENBQUM7QUFDL0YsQ0FBQztBQUNELFNBQVMsMkJBQTJCLENBQUMsSUFBSTtJQUNyQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2xCLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUU7WUFDbEMsT0FBTztZQUNQLFVBQVU7U0FDYixDQUFDLEVBQUUsQ0FBQztZQUNELE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7UUFDbEMsQ0FBQzthQUFNLElBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNqRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO0lBQ0wsQ0FBQztJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUM7QUFDRCxTQUFTLFNBQVMsQ0FBQyxJQUFJO0lBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU0sSUFBSSxDQUFDLGVBQWUsRUFBQyxDQUFDO1FBQ3hCLENBQUMsRUFBRSxDQUFDO1FBQ0osSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDaEMsQ0FBQztJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUNELFNBQVMsU0FBUyxDQUFDLElBQUk7SUFDbkIsT0FBTyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBQ0QsU0FBUyxVQUFVLENBQUMsSUFBSTtJQUNwQixPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFDRCxTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVE7SUFDeEMsU0FBTyxDQUFDO1FBQ0osSUFBSSxtQkFBbUIsQ0FBQztRQUN4QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxTQUFTLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLElBQUksT0FBTyxFQUFFLENBQUM7WUFDVixJQUFJLEdBQUcsYUFBYSxDQUFDLE9BQU8sRUFBRSxTQUFTLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZFLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDO1lBQ2hCLENBQUM7UUFDTCxDQUFDO2FBQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLElBQUksbUJBQW1CLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM1USxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMzQixDQUFDO2FBQU0sQ0FBQztZQUNKLE1BQU07UUFDVixDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUM7QUFDRCxTQUFTLGFBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUztJQUNsQyxPQUFNLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBQyxDQUFDO1FBQ3hCLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxTQUFTLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsT0FBTyxDQUFDLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudC9kaXN0L2Nqcy91dGlscy9mb2N1cy9jdXJzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNDb250ZW50RWRpdGFibGUgPSByZXF1aXJlKCcuLi9lZGl0L2lzQ29udGVudEVkaXRhYmxlLmpzJyk7XG52YXIgaXNFbGVtZW50VHlwZSA9IHJlcXVpcmUoJy4uL21pc2MvaXNFbGVtZW50VHlwZS5qcycpO1xuXG5mdW5jdGlvbiBnZXROZXh0Q3Vyc29yUG9zaXRpb24obm9kZSwgb2Zmc2V0LCBkaXJlY3Rpb24sIGlucHV0VHlwZSkge1xuICAgIC8vIFRoZSBiZWhhdmlvciBhdCB0ZXh0IG5vZGUgemVybyBvZmZzZXQgaXMgaW5jb25zaXN0ZW50LlxuICAgIC8vIFdoZW4gd2Fsa2luZyBiYWNrd2FyZHM6XG4gICAgLy8gRmlyZWZveCBhbHdheXMgbW92ZXMgdG8gemVybyBvZmZzZXQgYW5kIGp1bXBzIG92ZXIgbGFzdCBvZmZzZXQuXG4gICAgLy8gQ2hyb21lIGp1bXBzIG92ZXIgemVybyBvZmZzZXQgcGVyIGRlZmF1bHQgYnV0IG92ZXIgbGFzdCBvZmZzZXQgd2hlbiBTaGlmdCBpcyBwcmVzc2VkLlxuICAgIC8vIFRoZSBjdXJzb3IgYWx3YXlzIG1vdmVzIHRvIHplcm8gb2Zmc2V0IGlmIHRoZSBmb2N1cyBhcmVhIChjb250ZW50ZWRpdGFibGUgb3IgYm9keSkgZW5kcyB0aGVyZS5cbiAgICAvLyBXaGVuIHdhbGtpbmcgZm9yd2FyZCBib3RoIGlnbm9yZSB6ZXJvIG9mZnNldC5cbiAgICAvLyBXaGVuIHdhbGtpbmcgb3ZlciBpbnB1dCBlbGVtZW50cyB0aGUgY3Vyc29yIG1vdmVzIGJlZm9yZSBvciBhZnRlciB0aGF0IGVsZW1lbnQuXG4gICAgLy8gV2hlbiB3YWxraW5nIG92ZXIgbGluZSBicmVha3MgdGhlIGN1cnNvciBtb3ZlcyBpbnNpZGUgYW55IGZvbGxvd2luZyB0ZXh0IG5vZGUuXG4gICAgaWYgKGlzVGV4dE5vZGUobm9kZSkgJiYgb2Zmc2V0ICsgZGlyZWN0aW9uID49IDAgJiYgb2Zmc2V0ICsgZGlyZWN0aW9uIDw9IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICsgZGlyZWN0aW9uXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IG5leHROb2RlID0gZ2V0TmV4dENoYXJhY3RlckNvbnRlbnROb2RlKG5vZGUsIG9mZnNldCwgZGlyZWN0aW9uKTtcbiAgICBpZiAobmV4dE5vZGUpIHtcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUobmV4dE5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5vZGU6IG5leHROb2RlLFxuICAgICAgICAgICAgICAgIG9mZnNldDogZGlyZWN0aW9uID4gMCA/IE1hdGgubWluKDEsIG5leHROb2RlLm5vZGVWYWx1ZS5sZW5ndGgpIDogTWF0aC5tYXgobmV4dE5vZGUubm9kZVZhbHVlLmxlbmd0aCAtIDEsIDApXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZShuZXh0Tm9kZSwgJ2JyJykpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRQbHVzT25lID0gZ2V0TmV4dENoYXJhY3RlckNvbnRlbnROb2RlKG5leHROb2RlLCB1bmRlZmluZWQsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICBpZiAoIW5leHRQbHVzT25lKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGJlaGF2aW9yIHdoZW4gdGhlcmUgaXMgbm8gcG9zc2libGUgY3Vyc29yIHBvc2l0aW9uIGJleW9uZCB0aGUgbGluZSBicmVhayBpcyBpbmNvbnNpc3RlbnQuXG4gICAgICAgICAgICAgICAgLy8gSW4gQ2hyb21lIG91dHNpZGUgb2YgY29udGVudGVkaXRhYmxlIG1vdmluZyBiZWZvcmUgYSBsZWFkaW5nIGxpbmUgYnJlYWsgaXMgcG9zc2libGUuXG4gICAgICAgICAgICAgICAgLy8gQSBsZWFkaW5nIGxpbmUgYnJlYWsgY2FuIHN0aWxsIGJlIHJlbW92ZWQgcGVyIGRlbGV0ZUNvbnRlbnRCYWNrd2FyZC5cbiAgICAgICAgICAgICAgICAvLyBBIHRyYWlsaW5nIGxpbmUgYnJlYWsgb24gdGhlIG90aGVyIGhhbmQgaXMgbm90IHJlbW92ZWQgYnkgZGVsZXRlQ29udGVudEZvcndhcmQuXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA8IDAgJiYgaW5wdXRUeXBlID09PSAnZGVsZXRlQ29udGVudEJhY2t3YXJkJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogbmV4dE5vZGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogZ2V0T2Zmc2V0KG5leHROb2RlKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RleHROb2RlKG5leHRQbHVzT25lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IG5leHRQbHVzT25lLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGRpcmVjdGlvbiA+IDAgPyAwIDogbmV4dFBsdXNPbmUubm9kZVZhbHVlLmxlbmd0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA8IDAgJiYgaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKG5leHRQbHVzT25lLCAnYnInKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IG5leHROb2RlLnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogZ2V0T2Zmc2V0KG5leHROb2RlKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IG5leHRQbHVzT25lLnBhcmVudE5vZGUsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogZ2V0T2Zmc2V0KG5leHRQbHVzT25lKSArIChkaXJlY3Rpb24gPiAwID8gMCA6IDEpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbm9kZTogbmV4dE5vZGUucGFyZW50Tm9kZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGdldE9mZnNldChuZXh0Tm9kZSkgKyAoZGlyZWN0aW9uID4gMCA/IDEgOiAwKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldE5leHRDaGFyYWN0ZXJDb250ZW50Tm9kZShub2RlLCBvZmZzZXQsIGRpcmVjdGlvbikge1xuICAgIGNvbnN0IG5leHRPZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSArIChkaXJlY3Rpb24gPCAwID8gLTEgOiAwKTtcbiAgICBpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQgJiYgaXNFbGVtZW50KG5vZGUpICYmIG5leHRPZmZzZXQgPj0gMCAmJiBuZXh0T2Zmc2V0IDwgbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5bbmV4dE9mZnNldF07XG4gICAgfVxuICAgIHJldHVybiB3YWxrTm9kZXMobm9kZSwgZGlyZWN0aW9uID09PSAxID8gJ25leHQnIDogJ3ByZXZpb3VzJywgaXNUcmVhdGVkQXNDaGFyYWN0ZXJDb250ZW50KTtcbn1cbmZ1bmN0aW9uIGlzVHJlYXRlZEFzQ2hhcmFjdGVyQ29udGVudChub2RlKSB7XG4gICAgaWYgKGlzVGV4dE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChpc0VsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgaWYgKGlzRWxlbWVudFR5cGUuaXNFbGVtZW50VHlwZShub2RlLCBbXG4gICAgICAgICAgICAnaW5wdXQnLFxuICAgICAgICAgICAgJ3RleHRhcmVhJ1xuICAgICAgICBdKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUudHlwZSAhPT0gJ2hpZGRlbic7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKG5vZGUsICdicicpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRPZmZzZXQobm9kZSkge1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZShub2RlLnByZXZpb3VzU2libGluZyl7XG4gICAgICAgIGkrKztcbiAgICAgICAgbm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDE7XG59XG5mdW5jdGlvbiBpc1RleHROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMztcbn1cbmZ1bmN0aW9uIHdhbGtOb2Rlcyhub2RlLCBkaXJlY3Rpb24sIGNhbGxiYWNrKSB7XG4gICAgZm9yKDs7KXtcbiAgICAgICAgdmFyIF9ub2RlX293bmVyRG9jdW1lbnQ7XG4gICAgICAgIGNvbnN0IHNpYmxpbmcgPSBub2RlW2Ake2RpcmVjdGlvbn1TaWJsaW5nYF07XG4gICAgICAgIGlmIChzaWJsaW5nKSB7XG4gICAgICAgICAgICBub2RlID0gZ2V0RGVzY2VuZGFudChzaWJsaW5nLCBkaXJlY3Rpb24gPT09ICduZXh0JyA/ICdmaXJzdCcgOiAnbGFzdCcpO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICYmICghaXNFbGVtZW50KG5vZGUucGFyZW50Tm9kZSkgfHwgIWlzQ29udGVudEVkaXRhYmxlLmlzQ29udGVudEVkaXRhYmxlKG5vZGUucGFyZW50Tm9kZSkgJiYgbm9kZS5wYXJlbnROb2RlICE9PSAoKF9ub2RlX293bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQpID09PSBudWxsIHx8IF9ub2RlX293bmVyRG9jdW1lbnQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9ub2RlX293bmVyRG9jdW1lbnQuYm9keSkpKSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXREZXNjZW5kYW50KG5vZGUsIGRpcmVjdGlvbikge1xuICAgIHdoaWxlKG5vZGUuaGFzQ2hpbGROb2RlcygpKXtcbiAgICAgICAgbm9kZSA9IG5vZGVbYCR7ZGlyZWN0aW9ufUNoaWxkYF07XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xufVxuXG5leHBvcnRzLmdldE5leHRDdXJzb3JQb3NpdGlvbiA9IGdldE5leHRDdXJzb3JQb3NpdGlvbjtcbiJdLCJ2ZXJzaW9uIjozfQ==