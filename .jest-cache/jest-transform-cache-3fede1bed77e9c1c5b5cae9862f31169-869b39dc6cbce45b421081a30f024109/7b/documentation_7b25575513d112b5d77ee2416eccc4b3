9bf68137472887958ce1e8b8f361ebb5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = OwnerDocumentation;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
/**
 * Owner documentation center page for generating and managing project documentation.
 * Provides comprehensive documentation generation, export capabilities for Google Suite,
 * LLM-optimized documentation, and automatic refresh functionality for development environments.
 *
 * Features:
 * - Real-time documentation generation
 * - Google Suite export (DOCX, XLSX formats)
 * - LLM-optimized documentation for AI processing
 * - Auto-refresh in Replit environment
 * - Manual refresh capabilities.
 *
 * @returns {JSX.Element} Rendered documentation center with export and generation tools.
 */
function OwnerDocumentation() {
    const [isExportingGoogleSuite, setIsExportingGoogleSuite] = (0, react_1.useState)(false);
    const [isGeneratingLLM, setIsGeneratingLLM] = (0, react_1.useState)(false);
    const [gitStatus, setGitStatus] = (0, react_1.useState)(null);
    const [lastRefresh, setLastRefresh] = (0, react_1.useState)(new Date());
    const [isAutoRefreshing, setIsAutoRefreshing] = (0, react_1.useState)(false);
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    // Fetch comprehensive documentation data from the real API
    const { data: docData, isLoading, refetch, isFetching, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/documentation/comprehensive'],
        staleTime: 5 * 60 * 1000, // 5 minutes
        gcTime: 30 * 60 * 1000, // 30 minutes
        queryFn: async () => {
            console.log('ðŸ“š Fetching real documentation data...');
            const response = await fetch('/api/documentation/comprehensive', {
                credentials: 'include',
            });
            if (!response.ok) {
                throw new Error(`Failed to fetch documentation: ${response.statusText}`);
            }
            const data = await response.json();
            setLastRefresh(new Date());
            console.log('âœ… Documentation data fetched successfully:', {
                components: data.components?.length || 0,
                apis: data.apis?.length || 0,
                tables: data.database?.tables?.length || 0,
                files: data.documentationFiles?.length || 0,
            });
            return data;
        },
    });
    // Auto-refresh documentation every 30 minutes when working in Replit
    (0, react_1.useEffect)(() => {
        let intervalId;
        // Check if we're in a Replit environment
        const isReplit = window.location.hostname.includes('replit') ||
            window.location.hostname.includes('.repl.') ||
            import.meta.env.REPLIT_ENV;
        if (isReplit) {
            // Set up 30-minute auto-refresh
            intervalId = setInterval(() => {
                setIsAutoRefreshing(true);
                refetch().finally(() => {
                    setIsAutoRefreshing(false);
                    toast({
                        title: 'Documentation Updated',
                        description: 'Documentation has been automatically refreshed.',
                    });
                });
            }, 30 * 60 * 1000); // 30 minutes
        }
        return () => {
            if (intervalId) {
                clearInterval(intervalId);
            }
        };
    }, [refetch, toast]);
    // Listen for deployment events or page visibility changes
    (0, react_1.useEffect)(() => {
        const handleVisibilityChange = () => {
            if (!document.hidden) {
                // Page became visible, check if we should refresh
                const timeSinceLastRefresh = Date.now() - lastRefresh.getTime();
                const fiveMinutes = 5 * 60 * 1000;
                if (timeSinceLastRefresh > fiveMinutes) {
                    setIsAutoRefreshing(true);
                    refetch().finally(() => setIsAutoRefreshing(false));
                }
            }
        };
        document.addEventListener('visibilitychange', handleVisibilityChange);
        return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
    }, [lastRefresh, refetch]);
    // Manual refresh function
    const handleManualRefresh = async () => {
        setIsAutoRefreshing(true);
        try {
            await refetch();
            toast({
                title: 'Documentation Refreshed',
                description: 'Documentation data has been updated with the latest information.',
            });
        }
        catch (error) {
            console.error('Refresh error:', error);
            toast({
                variant: 'destructive',
                title: 'Refresh Failed',
                description: 'Failed to refresh documentation. Please try again.',
            });
        }
        finally {
            setIsAutoRefreshing(false);
        }
    };
    const handleExportGoogleSuite = async () => {
        setIsExportingGoogleSuite(true);
        try {
            // Simulate generating Google Suite documents
            await new Promise((resolve) => setTimeout(resolve, 2000));
            // Create documentation files structure
            const documentationFiles = {
                'project-overview.docx': generateProjectOverviewDocx(docData),
                'component-specifications.xlsx': generateComponentSpreadsheet(docData),
                'api-documentation.docx': generateApiDocumentation(docData),
                'database-schema.xlsx': generateDatabaseSchema(docData),
                'dependencies-list.docx': generateDependenciesList(docData),
            };
            // Create and download ZIP
            const zip = await createDocumentationZip(documentationFiles);
            downloadFile(zip, 'koveo-gestion-documentation.zip');
            toast({
                title: 'Documentation Exported',
                description: 'Google Suite documentation package has been downloaded successfully.',
            });
        }
        catch (error) {
            console.error('Export error:', error);
            toast({
                variant: 'destructive',
                title: 'Export Failed',
                description: 'Failed to export Google Suite documentation. Please try again.',
            });
        }
        finally {
            setIsExportingGoogleSuite(false);
        }
    };
    const handleGenerateLLMDocumentation = async () => {
        setIsGeneratingLLM(true);
        try {
            // Generate comprehensive LLM documentation
            const llmDoc = generateComprehensiveLLMDocumentation(docData);
            // Create and download the text file
            const blob = new Blob([llmDoc], { type: 'text/plain;charset=utf-8' });
            const filename = `koveo-gestion-llm-documentation-${new Date().toISOString().split('T')[0]}.txt`;
            downloadFile(blob, filename);
            toast({
                title: 'LLM Documentation Exported',
                description: 'Comprehensive documentation for AI processing has been downloaded as a text file.',
            });
        }
        catch (error) {
            console.error('LLM documentation generation error:', error);
            toast({
                variant: 'destructive',
                title: 'Export Failed',
                description: 'Failed to export LLM documentation. Please try again.',
            });
        }
        finally {
            setIsGeneratingLLM(false);
        }
    };
    const generateProjectOverviewDocx = (_data) => {
        if (!_data) {
            return '';
        }
        return `PROJECT OVERVIEW
    
Name: ${_data.projectOverview.name}
Description: ${_data.projectOverview.description}
Version: ${_data.projectOverview.version}
Architecture: ${_data.projectOverview.architecture}

FEATURES:
- Property management for Quebec residential communities
- Multi-tenant architecture supporting owners, managers, and residents
- AI-powered improvement suggestions
- Real-time quality assurance monitoring
- Comprehensive filter and sort capabilities
- Multi-language support (French/English)

COMPLIANCE:
- Quebec Law 25 privacy regulations
- Responsive design for all devices
- Accessibility standards (WCAG)
`;
    };
    const generateComponentSpreadsheet = (_data) => {
        if (!_data) {
            return '';
        }
        let csv = 'Component Name,Type,Dependencies,Exports,Complexity\n';
        _data.components.forEach((comp) => {
            csv += `"${comp.name}","${comp.type}","${comp.dependencies.join(', ')}","${comp.exports.join(', ')}",${comp.complexity}\n`;
        });
        return csv;
    };
    const generateApiDocumentation = (_data) => {
        if (!_data) {
            return '';
        }
        let doc = 'API DOCUMENTATION\n\n';
        _data.apis.forEach((api) => {
            doc += `Endpoint: ${api.endpoint}\n`;
            doc += `Method: ${api.method}\n`;
            doc += `Description: ${api.description}\n`;
            doc += `Parameters: ${api.parameters.join(', ')}\n`;
            doc += `Response: ${api._response}\n\n`;
        });
        return doc;
    };
    const generateDatabaseSchema = (_data) => {
        if (!_data) {
            return '';
        }
        let csv = 'Table,Column,Type,Nullable,Primary Key\n';
        _data.database.tables.forEach((table) => {
            table.columns.forEach((col) => {
                csv += `"${table.name}","${col.name}","${col.type}",${col.nullable},${col.primary}\n`;
            });
        });
        return csv;
    };
    const generateDependenciesList = (_data) => {
        if (!_data) {
            return '';
        }
        let doc = 'DEPENDENCIES LIST\n\n';
        doc += 'PRODUCTION DEPENDENCIES:\n';
        _data.dependencies
            .filter((d) => d.type === 'production')
            .forEach((dep) => {
            doc += `- ${dep.name} (${dep.version}): ${dep.description}\n`;
        });
        doc += '\nDEVELOPMENT DEPENDENCIES:\n';
        _data.dependencies
            .filter((d) => d.type === 'development')
            .forEach((dep) => {
            doc += `- ${dep.name} (${dep.version}): ${dep.description}\n`;
        });
        return doc;
    };
    const createDocumentationZip = async (files) => {
        // Create ZIP content for documentation download
        const zipContent = Object.entries(files)
            .map(([filename, content]) => `=== ${filename} ===\n${content}\n\n`)
            .join('');
        return new Blob([zipContent], { type: 'application/zip' });
    };
    const generateComprehensiveLLMDocumentation = (_data) => {
        if (!_data) {
            return '';
        }
        const lastUpdated = _data.projectOverview.lastUpdated || new Date().toISOString();
        return `KOVEO_GESTION_COMPREHENSIVE_DOCUMENTATION_FOR_LLM_PROCESSING

=== EXECUTIVE SUMMARY ===
${_data.projectOverview.description}

Generated on: ${new Date(lastUpdated).toLocaleString()}
Project Version: ${_data.projectOverview.version}
Architecture: ${_data.projectOverview.architecture}

=== PROJECT_OVERVIEW ===
PROJECT_IDENTITY:
- Name: ${_data.projectOverview.name}
- Version: ${_data.projectOverview.version}
- Description: ${_data.projectOverview.description}
- Architecture: ${_data.projectOverview.architecture}
- Last Updated: ${lastUpdated}

=== SYSTEM_COMPONENTS ===
Total Components: ${_data.components.length}

${_data.components.map(component => `
COMPONENT: ${component.name}
- Type: ${component.type}
- Dependencies: ${component.dependencies.join(', ')}
- Exports: ${component.exports.join(', ')}
- Complexity Score: ${component.complexity}
`).join('')}

=== API_ENDPOINTS ===
Total API Endpoints: ${_data.apis.length}

${_data.apis.map(api => `
ENDPOINT: ${api.method} ${api.endpoint}
- Description: ${api.description}
- Parameters: ${api.parameters.length > 0 ? api.parameters.join(', ') : 'None'}
- Response Type: ${api.response}
`).join('')}

=== DATABASE_SCHEMA ===
Total Tables: ${_data.database.tables.length}

${_data.database.tables.map(table => `
TABLE: ${table.name}
Columns:
${table.columns.map(col => `  - ${col.name}: ${col.type} ${col.nullable ? '(nullable)' : '(required)'} ${col.primary ? '(primary key)' : ''}`).join('\n')}
`).join('')}

=== DEPENDENCIES ===
Total Dependencies: ${_data.dependencies.length}

PRODUCTION DEPENDENCIES (${_data.dependencies.filter(d => d.type === 'production').length}):
${_data.dependencies.filter(d => d.type === 'production').map(dep => `
- ${dep.name} (${dep.version}): ${dep.description}
`).join('')}

DEVELOPMENT DEPENDENCIES (${_data.dependencies.filter(d => d.type === 'development').length}):
${_data.dependencies.filter(d => d.type === 'development').map(dep => `
- ${dep.name} (${dep.version}): ${dep.description}
`).join('')}

=== DOCUMENTATION_FILES ===
Total Documentation Files: ${_data.documentationFiles.length}

Documentation by Category:
${Object.entries(_data.documentationFiles.reduce((groups, file) => {
            const category = file.category || 'general';
            if (!groups[category])
                groups[category] = [];
            groups[category].push(file);
            return groups;
        }, {})).map(([category, files]) => `
${category.toUpperCase()} (${files.length} files):
${files.map(file => `  - ${file.name} (${(file.size / 1024).toFixed(1)} KB) - ${file.path}`).join('\n')}
`).join('')}

=== TECHNICAL_METRICS ===
- Components: ${_data.components.length}
- API Endpoints: ${_data.apis.length}  
- Database Tables: ${_data.database.tables.length}
- Dependencies: ${_data.dependencies.length}
- Documentation Files: ${_data.documentationFiles.length}
- Average Component Complexity: ${(_data.components.reduce((sum, c) => sum + c.complexity, 0) / _data.components.length).toFixed(2)}

LAST_UPDATED: ${lastUpdated}
DOCUMENTATION_VERSION: 3.0
SYSTEM_VERSION: ${_data.projectOverview.version}
GENERATED_BY: Koveo Gestion Documentation System`;
    };
    const downloadFile = (blob, filename) => {
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Documentation Center', subtitle: 'Generate and export comprehensive project documentation' }), (0, jsx_runtime_1.jsx)("div", { className: 'border-b bg-gray-50 px-6 py-3', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-7xl mx-auto', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm text-gray-600', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Terminal, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)("span", { className: 'font-medium', children: "Refresh Command:" }), (0, jsx_runtime_1.jsx)("code", { className: 'bg-gray-100 px-2 py-1 rounded text-xs font-mono', children: "npm run docs:generate" })] }) }) }), (0, jsx_runtime_1.jsx)("div", { className: 'px-6 py-2 bg-gray-50 border-b', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto flex items-center justify-between text-sm', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 text-gray-600', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsxs)("span", { children: ["Last updated: ", lastRefresh.toLocaleDateString(), " at", ' ', lastRefresh.toLocaleTimeString()] })] }), isAutoRefreshing && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-blue-600', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: 'h-4 w-4 animate-spin' }), (0, jsx_runtime_1.jsx)("span", { children: "Auto-refreshing..." })] }))] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', onClick: handleManualRefresh, disabled: isFetching || isAutoRefreshing, className: 'h-8', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.RefreshCw, { className: `h-4 w-4 mr-1 ${isFetching || isAutoRefreshing ? 'animate-spin' : ''}` }), "Refresh Now"] })] }) }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 lg:grid-cols-2 gap-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: 'h-5 w-5' }), "Human Documentation (Google Suite)"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: "Export comprehensive documentation in human-readable formats including Word documents, Excel spreadsheets, and other Google Suite compatible files." }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'h-4 w-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { children: "Project Overview (.docx)" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileSpreadsheet, { className: 'h-4 w-4 text-green-600' }), (0, jsx_runtime_1.jsx)("span", { children: "Component Specifications (.xlsx)" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'h-4 w-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { children: "API Documentation (.docx)" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileSpreadsheet, { className: 'h-4 w-4 text-green-600' }), (0, jsx_runtime_1.jsx)("span", { children: "Database Schema (.xlsx)" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 text-sm', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'h-4 w-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { children: "Dependencies List (.docx)" })] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: handleExportGoogleSuite, disabled: isExportingGoogleSuite || isLoading, className: 'w-full', children: isExportingGoogleSuite ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: 'mr-2 h-4 w-4 animate-spin' }), "Exporting Documentation..."] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Package, { className: 'mr-2 h-4 w-4' }), "Export Google Suite Package"] })) })] })] }), (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Cpu, { className: 'h-5 w-5' }), "LLM Documentation"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: "Generate exhaustive technical documentation with detailed schema relationships and business logic optimized for AI/LLM processing." }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: 'w-3 h-3 mr-1' }), "Enhanced Schema Analysis"] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'w-3 h-3 mr-1' }), "Business Logic Mapping"] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: handleGenerateLLMDocumentation, disabled: isGeneratingLLM || isLoading, className: 'w-full', variant: 'outline', children: isGeneratingLLM ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: 'mr-2 h-4 w-4 animate-spin' }), "Generating Documentation..."] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Cpu, { className: 'mr-2 h-4 w-4' }), "Generate LLM Documentation"] })) })] })] })] }), docData?.documentationFiles && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Folder, { className: 'h-5 w-5' }), "Documentation Files (", docData.documentationFiles.length, ")"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: "Browse existing documentation files in the project. Updates only occur during git pushes and deployments." }), Object.entries(docData.documentationFiles.reduce((groups, file) => {
                                            const category = file.category || 'general';
                                            if (!groups[category])
                                                groups[category] = [];
                                            groups[category].push(file);
                                            return groups;
                                        }, {})).map(([category, files]) => ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("h4", { className: 'font-medium text-sm text-gray-700 capitalize flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.BookOpen, { className: 'h-4 w-4' }), category, " (", files.length, ")"] }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2', children: files.map((file) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-3 bg-gray-50 rounded-lg border hover:bg-gray-100 transition-colors', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 min-w-0 flex-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'h-4 w-4 text-blue-600 flex-shrink-0' }), (0, jsx_runtime_1.jsxs)("div", { className: 'min-w-0 flex-1', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-900 truncate', children: file.name }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: [(file.size / 1024).toFixed(1), " KB \u2022 ", ' ', new Date(file.lastModified).toLocaleDateString()] })] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'ghost', size: 'sm', className: 'h-8 w-8 p-0 flex-shrink-0', onClick: () => {
                                                                    window.open(`/api/documentation/file/${file.path}`, '_blank');
                                                                }, children: (0, jsx_runtime_1.jsx)(lucide_react_1.ExternalLink, { className: 'h-4 w-4' }) })] }, file.path))) })] }, category))), docData.documentationFiles.length === 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-8 text-gray-500', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.BookOpen, { className: 'h-8 w-8 mx-auto mb-2 text-gray-400' }), (0, jsx_runtime_1.jsx)("p", { children: "No documentation files found in the docs directory." })] }))] })] })), isLoading && ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'flex items-center justify-center py-16', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Loader2, { className: 'h-8 w-8 animate-spin text-koveo-navy mr-3' }), (0, jsx_runtime_1.jsx)("span", { children: "Loading documentation data..." })] }) }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,