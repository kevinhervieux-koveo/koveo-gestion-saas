a400c1f5cdd85f7828d1974a267332eb
'use strict';
var isElementType = require('../utils/misc/isElementType.js');
var FileList = require('../utils/dataTransfer/FileList.js');
require('../utils/dataTransfer/Clipboard.js');
var setFiles = require('../utils/edit/setFiles.js');
var isDisabled = require('../utils/misc/isDisabled.js');
var getWindow = require('../utils/misc/getWindow.js');
async function upload(element, fileOrFiles) {
    const input = isElementType.isElementType(element, 'label') ? element.control : element;
    if (!input || !isElementType.isElementType(input, 'input', {
        type: 'file'
    })) {
        throw new TypeError(`The ${input === element ? 'given' : 'associated'} ${input === null || input === undefined ? undefined : input.tagName} element does not accept file uploads`);
    }
    if (isDisabled.isDisabled(element))
        return;
    const files = (Array.isArray(fileOrFiles) ? fileOrFiles : [
        fileOrFiles
    ]).filter((file) => !this.config.applyAccept || isAcceptableFile(file, input.accept)).slice(0, input.multiple ? undefined : 1);
    const fileDialog = () => {
        var _input_files;
        // do not fire an input event if the file selection does not change
        if (files.length === ((_input_files = input.files) === null || _input_files === undefined ? undefined : _input_files.length) && files.every((f, i) => {
            var _input_files;
            return f === ((_input_files = input.files) === null || _input_files === undefined ? undefined : _input_files.item(i));
        })) {
            return;
        }
        setFiles.setFiles(input, FileList.createFileList(getWindow.getWindow(element), files));
        this.dispatchUIEvent(input, 'input');
        this.dispatchUIEvent(input, 'change');
    };
    input.addEventListener('fileDialog', fileDialog);
    await this.click(element);
    input.removeEventListener('fileDialog', fileDialog);
}
// When matching files, browsers ignore case and consider jpeg/jpg interchangeable.
function normalize(nameOrType) {
    return nameOrType.toLowerCase().replace(/(\.|\/)jpg\b/g, '$1jpeg');
}
function isAcceptableFile(file, accept) {
    if (!accept) {
        return true;
    }
    const wildcards = [
        'audio/*',
        'image/*',
        'video/*'
    ];
    return normalize(accept).trim().split(/\s*,\s*/).some((acceptToken) => {
        // tokens starting with a dot represent a file extension
        if (acceptToken.startsWith('.')) {
            return normalize(file.name).endsWith(acceptToken);
        }
        else if (wildcards.includes(acceptToken)) {
            return normalize(file.type).startsWith(acceptToken.replace('*', ''));
        }
        return normalize(file.type) === acceptToken;
    });
}
exports.upload = upload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3V0aWxpdHkvdXBsb2FkLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBQzlELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQzVELE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBQzlDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ3BELElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0FBQ3hELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRXRELEtBQUssVUFBVSxNQUFNLENBQUMsT0FBTyxFQUFFLFdBQVc7SUFDdEMsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUN4RixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO1FBQ3ZELElBQUksRUFBRSxNQUFNO0tBQ2YsQ0FBQyxFQUFFLENBQUM7UUFDRCxNQUFNLElBQUksU0FBUyxDQUFDLE9BQU8sS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLHVDQUF1QyxDQUFDLENBQUM7SUFDdkwsQ0FBQztJQUNELElBQUksVUFBVSxDQUFDLFVBQVUsQ0FB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Q0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO1lBQ3pDLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RSxDQUFDO1FBQ0QsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLFdBQVcsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQvZGlzdC9janMvdXRpbGl0eS91cGxvYWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNFbGVtZW50VHlwZSA9IHJlcXVpcmUoJy4uL3V0aWxzL21pc2MvaXNFbGVtZW50VHlwZS5qcycpO1xudmFyIEZpbGVMaXN0ID0gcmVxdWlyZSgnLi4vdXRpbHMvZGF0YVRyYW5zZmVyL0ZpbGVMaXN0LmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgc2V0RmlsZXMgPSByZXF1aXJlKCcuLi91dGlscy9lZGl0L3NldEZpbGVzLmpzJyk7XG52YXIgaXNEaXNhYmxlZCA9IHJlcXVpcmUoJy4uL3V0aWxzL21pc2MvaXNEaXNhYmxlZC5qcycpO1xudmFyIGdldFdpbmRvdyA9IHJlcXVpcmUoJy4uL3V0aWxzL21pc2MvZ2V0V2luZG93LmpzJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIHVwbG9hZChlbGVtZW50LCBmaWxlT3JGaWxlcykge1xuICAgIGNvbnN0IGlucHV0ID0gaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKGVsZW1lbnQsICdsYWJlbCcpID8gZWxlbWVudC5jb250cm9sIDogZWxlbWVudDtcbiAgICBpZiAoIWlucHV0IHx8ICFpc0VsZW1lbnRUeXBlLmlzRWxlbWVudFR5cGUoaW5wdXQsICdpbnB1dCcsIHtcbiAgICAgICAgdHlwZTogJ2ZpbGUnXG4gICAgfSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVGhlICR7aW5wdXQgPT09IGVsZW1lbnQgPyAnZ2l2ZW4nIDogJ2Fzc29jaWF0ZWQnfSAke2lucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBpbnB1dC50YWdOYW1lfSBlbGVtZW50IGRvZXMgbm90IGFjY2VwdCBmaWxlIHVwbG9hZHNgKTtcbiAgICB9XG4gICAgaWYgKGlzRGlzYWJsZWQuaXNEaXNhYmxlZChlbGVtZW50KSkgcmV0dXJuO1xuICAgIGNvbnN0IGZpbGVzID0gKEFycmF5LmlzQXJyYXkoZmlsZU9yRmlsZXMpID8gZmlsZU9yRmlsZXMgOiBbXG4gICAgICAgIGZpbGVPckZpbGVzXG4gICAgXSkuZmlsdGVyKChmaWxlKT0+IXRoaXMuY29uZmlnLmFwcGx5QWNjZXB0IHx8IGlzQWNjZXB0YWJsZUZpbGUoZmlsZSwgaW5wdXQuYWNjZXB0KSkuc2xpY2UoMCwgaW5wdXQubXVsdGlwbGUgPyB1bmRlZmluZWQgOiAxKTtcbiAgICBjb25zdCBmaWxlRGlhbG9nID0gKCk9PntcbiAgICAgICAgdmFyIF9pbnB1dF9maWxlcztcbiAgICAgICAgLy8gZG8gbm90IGZpcmUgYW4gaW5wdXQgZXZlbnQgaWYgdGhlIGZpbGUgc2VsZWN0aW9uIGRvZXMgbm90IGNoYW5nZVxuICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAoKF9pbnB1dF9maWxlcyA9IGlucHV0LmZpbGVzKSA9PT0gbnVsbCB8fCBfaW5wdXRfZmlsZXMgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9pbnB1dF9maWxlcy5sZW5ndGgpICYmIGZpbGVzLmV2ZXJ5KChmLCBpKT0+e1xuICAgICAgICAgICAgdmFyIF9pbnB1dF9maWxlcztcbiAgICAgICAgICAgIHJldHVybiBmID09PSAoKF9pbnB1dF9maWxlcyA9IGlucHV0LmZpbGVzKSA9PT0gbnVsbCB8fCBfaW5wdXRfZmlsZXMgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9pbnB1dF9maWxlcy5pdGVtKGkpKTtcbiAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRGaWxlcy5zZXRGaWxlcyhpbnB1dCwgRmlsZUxpc3QuY3JlYXRlRmlsZUxpc3QoZ2V0V2luZG93LmdldFdpbmRvdyhlbGVtZW50KSwgZmlsZXMpKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaFVJRXZlbnQoaW5wdXQsICdpbnB1dCcpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoVUlFdmVudChpbnB1dCwgJ2NoYW5nZScpO1xuICAgIH07XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZmlsZURpYWxvZycsIGZpbGVEaWFsb2cpO1xuICAgIGF3YWl0IHRoaXMuY2xpY2soZWxlbWVudCk7XG4gICAgaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZmlsZURpYWxvZycsIGZpbGVEaWFsb2cpO1xufVxuLy8gV2hlbiBtYXRjaGluZyBmaWxlcywgYnJvd3NlcnMgaWdub3JlIGNhc2UgYW5kIGNvbnNpZGVyIGpwZWcvanBnIGludGVyY2hhbmdlYWJsZS5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShuYW1lT3JUeXBlKSB7XG4gICAgcmV0dXJuIG5hbWVPclR5cGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oXFwufFxcLylqcGdcXGIvZywgJyQxanBlZycpO1xufVxuZnVuY3Rpb24gaXNBY2NlcHRhYmxlRmlsZShmaWxlLCBhY2NlcHQpIHtcbiAgICBpZiAoIWFjY2VwdCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgd2lsZGNhcmRzID0gW1xuICAgICAgICAnYXVkaW8vKicsXG4gICAgICAgICdpbWFnZS8qJyxcbiAgICAgICAgJ3ZpZGVvLyonXG4gICAgXTtcbiAgICByZXR1cm4gbm9ybWFsaXplKGFjY2VwdCkudHJpbSgpLnNwbGl0KC9cXHMqLFxccyovKS5zb21lKChhY2NlcHRUb2tlbik9PntcbiAgICAgICAgLy8gdG9rZW5zIHN0YXJ0aW5nIHdpdGggYSBkb3QgcmVwcmVzZW50IGEgZmlsZSBleHRlbnNpb25cbiAgICAgICAgaWYgKGFjY2VwdFRva2VuLnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShmaWxlLm5hbWUpLmVuZHNXaXRoKGFjY2VwdFRva2VuKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aWxkY2FyZHMuaW5jbHVkZXMoYWNjZXB0VG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKGZpbGUudHlwZSkuc3RhcnRzV2l0aChhY2NlcHRUb2tlbi5yZXBsYWNlKCcqJywgJycpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9ybWFsaXplKGZpbGUudHlwZSkgPT09IGFjY2VwdFRva2VuO1xuICAgIH0pO1xufVxuXG5leHBvcnRzLnVwbG9hZCA9IHVwbG9hZDtcbiJdLCJ2ZXJzaW9uIjozfQ==