b25b85a31717981980bcd842d1c2b230
"use strict";
/**
 * Password validation utilities with strength indicators for secure registration.
 * Implements Quebec-compliant security standards for property management systems.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePasswordStrength = validatePasswordStrength;
exports.getPasswordCriteria = getPasswordCriteria;
exports.getPasswordStrengthLabel = getPasswordStrengthLabel;
exports.getPasswordStrengthColor = getPasswordStrengthColor;
exports.getPasswordStrengthBarColor = getPasswordStrengthBarColor;
/**
 * Common weak passwords and patterns to avoid.
 */
const COMMON_PATTERNS = [
    'password',
    '123456',
    'admin',
    'user',
    'test',
    'demo',
    'qwerty',
    'azerty',
    'letmein',
    'welcome',
    'monkey',
    'dragon',
    'master',
    'shadow',
    'superman',
    'batman',
];
/**
 * Validates password strength and provides detailed feedback.
 * @param password
 */
/**
 * ValidatePasswordStrength function.
 * @param password
 * @returns Function result.
 */
function validatePasswordStrength(password) {
    // Safety guard: handle undefined/null inputs
    if (!password || typeof password !== 'string') {
        return {
            score: 0,
            feedback: ['Veuillez entrer un mot de passe'],
            isValid: false,
        };
    }
    const criteria = getPasswordCriteria(password);
    const feedback = [];
    let score = 0;
    // Check minimum length (8+ characters)
    if (!criteria.minLength) {
        feedback.push('Mot de passe doit contenir au moins 8 caractères');
    }
    else {
        score += 1;
    }
    // Check character variety
    if (!criteria.hasUpperCase) {
        feedback.push('Ajouter au moins une lettre majuscule');
    }
    else {
        score += 0.5;
    }
    if (!criteria.hasLowerCase) {
        feedback.push('Ajouter au moins une lettre minuscule');
    }
    else {
        score += 0.5;
    }
    if (!criteria.hasNumbers) {
        feedback.push('Ajouter au moins un chiffre');
    }
    else {
        score += 1;
    }
    if (!criteria.hasSymbols) {
        feedback.push('Ajouter au moins un symbole (@, #, !, etc.)');
    }
    else {
        score += 1;
    }
    // Check for common patterns
    if (!criteria.noCommonPatterns) {
        feedback.push('Éviter les mots de passe communs');
    }
    else {
        score += 0.5;
    }
    // Bonus points for length
    if (password.length >= 12) {
        score += 0.5;
    }
    // Ensure score is within bounds
    score = Math.min(4, Math.max(0, score));
    // Determine if password is valid (minimum requirements met)
    const isValid = criteria.minLength &&
        criteria.hasUpperCase &&
        criteria.hasLowerCase &&
        (criteria.hasNumbers || criteria.hasSymbols) &&
        criteria.noCommonPatterns;
    return {
        score: Math.round(score),
        feedback: feedback.length > 0 ? feedback : ['Mot de passe sécurisé'],
        isValid,
    };
}
/**
 * Gets detailed password criteria evaluation.
 * @param password
 */
/**
 * GetPasswordCriteria function.
 * @param password
 * @returns Function result.
 */
function getPasswordCriteria(password) {
    // Safety guard: handle undefined/null inputs
    if (!password || typeof password !== 'string') {
        return {
            minLength: false,
            hasUpperCase: false,
            hasLowerCase: false,
            hasNumbers: false,
            hasSymbols: false,
            noCommonPatterns: true, // Empty strings don't contain common patterns
        };
    }
    return {
        minLength: password.length >= 8,
        hasUpperCase: /[A-Z]/.test(password),
        hasLowerCase: /[a-z]/.test(password),
        hasNumbers: /\d/.test(password),
        hasSymbols: /[!@#$%^&*(),.?":{}|<>]/.test(password),
        noCommonPatterns: !COMMON_PATTERNS.some((pattern) => password.toLowerCase().includes(pattern.toLowerCase())),
    };
}
/**
 * Gets password strength level text with Quebec French labels.
 * @param score
 */
/**
 * GetPasswordStrengthLabel function.
 * @param score
 * @returns Function result.
 */
function getPasswordStrengthLabel(score) {
    switch (score) {
        case 0:
        case 1:
            return 'Très faible';
        case 2:
            return 'Faible';
        case 3:
            return 'Moyen';
        case 4:
            return 'Fort';
        default:
            return 'Très faible';
    }
}
/**
 * Gets password strength color for UI indicators.
 * @param score
 */
/**
 * GetPasswordStrengthColor function.
 * @param score
 * @returns Function result.
 */
function getPasswordStrengthColor(score) {
    switch (score) {
        case 0:
        case 1:
            return 'text-red-600';
        case 2:
            return 'text-orange-500';
        case 3:
            return 'text-yellow-500';
        case 4:
            return 'text-green-600';
        default:
            return 'text-red-600';
    }
}
/**
 * Gets progress bar color for password strength visualization.
 * @param score
 */
/**
 * GetPasswordStrengthBarColor function.
 * @param score
 * @returns Function result.
 */
function getPasswordStrengthBarColor(score) {
    switch (score) {
        case 0:
        case 1:
            return 'bg-red-500';
        case 2:
            return 'bg-orange-500';
        case 3:
            return 'bg-yellow-500';
        case 4:
            return 'bg-green-500';
        default:
            return 'bg-red-500';
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,