437acfc488193d19d271a4bc9c7e6db2
"use strict";
/**
 * Comprehensive UI Elements Translation Test Suite
 * Validates that ALL user interface elements are properly translated:
 * - Residence cards and all their labels
 * - Building cards and all their labels
 * - Titles and subtitles
 * - Pagination elements
 * - All buttons in cards
 * - All form labels and field names
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const i18n_ts_1 = require("../../client/src/lib/i18n.ts");
(0, globals_1.describe)('Comprehensive UI Elements Translation Coverage', () => {
    const languages = ['en', 'fr'];
    (0, globals_1.describe)('Residence Card Elements Translation', () => {
        const residenceCardKeys = [
            'address',
            'floor',
            'sqFt',
            'bedrooms',
            'bathrooms',
            'parkingSpaces',
            'storageSpaces',
            'parking',
            'storage'
        ];
        (0, globals_1.it)('should have all residence card field labels translated', () => {
            residenceCardKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(t[key]).toBeDefined();
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should have proper French translations for residence fields', () => {
            const fr = i18n_ts_1.translations.fr;
            (0, globals_1.expect)(fr.address).toBe('Adresse');
            (0, globals_1.expect)(fr.floor).toBe('Étage');
            (0, globals_1.expect)(fr.bedrooms).toBe('Chambres');
            (0, globals_1.expect)(fr.bathrooms).toBe('Salles de bain');
        });
        (0, globals_1.it)('should have residence card buttons translated', () => {
            const residenceButtonKeys = [
                'viewDocuments',
                'viewDocuments2',
                'buildingDocuments'
            ];
            residenceButtonKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Building Card Elements Translation', () => {
        const buildingCardKeys = [
            'address',
            'buildingType',
            'yearBuilt',
            'totalUnits',
            'managementCompany',
            'occupancyStats',
            'occupancy'
        ];
        (0, globals_1.it)('should have all building card field labels translated', () => {
            buildingCardKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(t[key]).toBeDefined();
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should have building occupancy translations', () => {
            languages.forEach(lang => {
                const t = i18n_ts_1.translations[lang];
                if (t.occupancy) {
                    (0, globals_1.expect)(typeof t.occupancy).toBe('string');
                }
            });
        });
    });
    (0, globals_1.describe)('Page Titles and Subtitles Translation', () => {
        const titleSubtitleKeys = [
            'myResidence',
            'myResidenceInfo',
            'viewResidenceInfo',
            'myBuilding',
            'myBuildings',
            'viewBuildingsAccess',
            'noBuildingsFound',
            'noResidencesFound'
        ];
        (0, globals_1.it)('should have all page titles and subtitles translated', () => {
            titleSubtitleKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                    (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                });
            });
        });
        (0, globals_1.it)('should have proper French page titles', () => {
            const fr = i18n_ts_1.translations.fr;
            (0, globals_1.expect)(fr.myResidence).toBe('Ma résidence');
            (0, globals_1.expect)(fr.myBuildings).toBe('Mes bâtiments');
        });
    });
    (0, globals_1.describe)('Pagination Elements Translation', () => {
        const paginationKeys = [
            'showing',
            'showingResults',
            'previous',
            'next',
            'page',
            'of',
            'total',
            'results',
            'residences',
            'buildings'
        ];
        (0, globals_1.it)('should have pagination text translations', () => {
            paginationKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should have pagination pattern support for dynamic text', () => {
            // Test patterns like "Showing X to Y of Z residences"
            const patterns = ['showingResults', 'showingXtoYofZ'];
            patterns.forEach(pattern => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[pattern]) {
                        (0, globals_1.expect)(typeof t[pattern]).toBe('string');
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Button Translation Coverage', () => {
        const cardButtonKeys = [
            'viewDocuments',
            'viewDocuments2',
            'buildingDocuments',
            'previous',
            'next',
            'close',
            'cancel',
            'save',
            'edit',
            'delete',
            'add',
            'create',
            'update'
        ];
        (0, globals_1.it)('should have all card buttons translated', () => {
            cardButtonKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should have French button translations using proper Quebec terminology', () => {
            const fr = i18n_ts_1.translations.fr;
            // Common button verbs in Quebec French
            if (fr.save)
                (0, globals_1.expect)(fr.save).toBe('Enregistrer');
            if (fr.cancel)
                (0, globals_1.expect)(fr.cancel).toBe('Annuler');
            if (fr.close)
                (0, globals_1.expect)(fr.close).toBe('Fermer');
            if (fr.edit)
                (0, globals_1.expect)(fr.edit).toBe('Modifier');
        });
    });
    (0, globals_1.describe)('Form Labels and Field Names Translation', () => {
        const formLabelKeys = [
            'firstName',
            'lastName',
            'email',
            'phone',
            'address',
            'city',
            'province',
            'postalCode',
            'unitNumber',
            'buildingName',
            'organization',
            'role',
            'type'
        ];
        (0, globals_1.it)('should have all form labels translated', () => {
            formLabelKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should use proper Quebec French form terminology', () => {
            const fr = i18n_ts_1.translations.fr;
            if (fr.email)
                (0, globals_1.expect)(fr.email).toBe('Courriel'); // Quebec French for email
            if (fr.phone)
                (0, globals_1.expect)(fr.phone).toBe('Téléphone');
            if (fr.address)
                (0, globals_1.expect)(fr.address).toBe('Adresse');
        });
    });
    (0, globals_1.describe)('Unit Measurements and Technical Terms', () => {
        const measurementKeys = [
            'sqFt',
            'units',
            'occupied',
            'vacant',
            'apartment',
            'condo',
            'house'
        ];
        (0, globals_1.it)('should have measurement and property type translations', () => {
            measurementKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Status and State Indicators Translation', () => {
        const statusKeys = [
            'active',
            'inactive',
            'occupied',
            'vacant',
            'available',
            'unavailable',
            'pending',
            'approved',
            'rejected',
            'complete',
            'loading'
        ];
        (0, globals_1.it)('should have all status indicators translated', () => {
            statusKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should have proper Quebec French status terms', () => {
            const fr = i18n_ts_1.translations.fr;
            if (fr.loading)
                (0, globals_1.expect)(fr.loading).toBe('Chargement...');
            if (fr.complete)
                (0, globals_1.expect)(fr.complete).toBe('Terminé');
            if (fr.pending)
                (0, globals_1.expect)(fr.pending).toBe('En attente');
        });
    });
    (0, globals_1.describe)('Card Content and Labels Translation', () => {
        (0, globals_1.it)('should translate all residence card content labels', () => {
            const residenceLabels = [
                'unit',
                'building2', // "Building" label
                'residence',
                'floor',
                'bedrooms',
                'bathrooms',
                'parkingSpaces',
                'storageSpaces'
            ];
            residenceLabels.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                    (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                });
            });
        });
        (0, globals_1.it)('should translate all building card content labels', () => {
            const buildingLabels = [
                'address',
                'buildingType',
                'totalUnits',
                'occupancy',
                'managementCompany'
            ];
            buildingLabels.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Missing Translation Detection', () => {
        (0, globals_1.it)('should identify any UI elements that might be missing translations', () => {
            // Common UI patterns that should be translated
            const commonUIPatterns = [
                'viewDocuments',
                'buildingDocuments',
                'showingResults',
                'loading',
                'noDataFound',
                'errorLoading'
            ];
            commonUIPatterns.forEach(pattern => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[pattern]) {
                        (0, globals_1.expect)(typeof t[pattern]).toBe('string');
                        (0, globals_1.expect)(t[pattern].length).toBeGreaterThan(0);
                        // Should not contain placeholder brackets
                        (0, globals_1.expect)(t[pattern]).not.toMatch(/\{[^}]*\}/);
                    }
                });
            });
        });
        (0, globals_1.it)('should ensure no hardcoded English text in common UI patterns', () => {
            // These are patterns that commonly appear untranslated
            const problematicPatterns = [
                /^View Documents?$/i,
                /^Building Documents?$/i,
                /^Address$/i,
                /^Sq Ft$/i,
                /^Bedrooms?$/i,
                /^Bathrooms?$/i,
                /^Parking$/i,
                /^Storage$/i,
                /^Showing \d+ to \d+ of \d+ /i,
                /^Previous$/i,
                /^Next$/i
            ];
            // This test documents patterns to watch for - would need actual component scanning
            // to detect hardcoded text, but serves as a reminder of what to look for
            (0, globals_1.expect)(problematicPatterns.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,