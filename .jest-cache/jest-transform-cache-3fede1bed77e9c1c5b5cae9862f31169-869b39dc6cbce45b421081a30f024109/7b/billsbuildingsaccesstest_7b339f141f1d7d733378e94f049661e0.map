{"file":"/home/runner/workspace/tests/integration/bills-buildings-access.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/bills-buildings-access.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\n// Create test app similar to existing tests\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Add test authentication middleware that bypasses real auth\n  app.use(async (req: any, res, next) => {\n    const testUserId = req.headers['x-test-user-id'];\n    if (testUserId) {\n      const [user] = await db.select().from(schema.users).where(eq(schema.users.id, testUserId)).limit(1);\n      if (user) {\n        req.session = { \n          userId: testUserId,\n          isAuthenticated: true,\n          role: user.role\n        };\n        req.user = user;\n      }\n    }\n    next();\n  });\n  \n  registerRoutes(app);\n  return app;\n};\n\ndescribe('Bills Page Buildings Access Issue', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let managerUser: any;\n  let testOrganization: any;\n  let testBuilding: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    try {\n      // Clean test data\n      await db.delete(schema.userOrganizations);\n      await db.delete(schema.buildings);\n      await db.delete(schema.users);\n      await db.delete(schema.organizations);\n    } catch (error) {\n      console.warn('Test setup warning:', error);\n    }\n\n    // Create test organization\n    const [organization] = await db\n      .insert(schema.organizations)\n      .values({\n        name: 'Test Organization',\n        type: 'Standard',\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        phone: '514-555-0123',\n        email: 'test@org.com',\n      })\n      .returning();\n\n    testOrganization = organization;\n\n    // Create test building\n    const [building] = await db\n      .insert(schema.buildings)\n      .values({\n        organizationId: testOrganization.id,\n        name: 'Test Building',\n        address: '123 Test St',\n        city: 'Test City',\n        province: 'QC',\n        postalCode: 'H1H 1H1',\n        totalUnits: 10,\n        buildingType: 'apartment',\n      })\n      .returning();\n\n    testBuilding = building;\n\n    // Create test users\n    const users = await db\n      .insert(schema.users)\n      .values([\n        {\n          email: 'admin@koveo-gestion.com',\n          username: 'admin',\n          password: 'hashedpass',\n          firstName: 'Admin',\n          lastName: 'User',\n          role: 'admin',\n          isActive: true,\n          phone: '514-555-0001',\n        },\n        {\n          email: 'manager@test.com',\n          username: 'manager',\n          password: 'hashedpass',\n          firstName: 'Manager',\n          lastName: 'User',\n          role: 'manager',\n          isActive: true,\n          phone: '514-555-0002',\n        }\n      ])\n      .returning();\n\n    adminUser = users.find(u => u.email === 'admin@koveo-gestion.com');\n    managerUser = users.find(u => u.email === 'manager@test.com');\n\n    // Assign manager to organization (but NOT admin - this is the bug scenario)\n    await db\n      .insert(schema.userOrganizations)\n      .values({\n        userId: managerUser.id,\n        organizationId: testOrganization.id,\n        organizationRole: 'manager',\n        isActive: true,\n      });\n  });\n\n  afterEach(async () => {\n    await db.delete(schema.userOrganizations);\n    await db.delete(schema.buildings);\n    await db.delete(schema.users);\n    await db.delete(schema.organizations);\n  });\n\n  describe('Bills Page Buildings API Bug Scenario', () => {\n    it('REGRESSION TEST: admin without organization assignments should see all buildings', async () => {\n      // This test reproduces the exact bug reported by the user:\n      // Admin user Kevin Hervieux has no organization assignments but should see all buildings\n      // in the bills page dropdown\n      \n      // Verify admin has no organization assignments (reproduces bug condition)\n      const adminOrgs = await db\n        .select()\n        .from(schema.userOrganizations)\n        .where(eq(schema.userOrganizations.userId, adminUser.id));\n      expect(adminOrgs.length).toBe(0);\n\n      // This should return buildings even though admin has no org assignments\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0].name).toBe('Test Building');\n      expect(response.body[0].organizationName).toBe('Test Organization');\n    });\n\n    it('manager with organization assignments should see only their buildings', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', managerUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBe(1);\n      expect(response.body[0].name).toBe('Test Building');\n      expect(response.body[0].organizationName).toBe('Test Organization');\n    });\n\n    it('manager without organization assignments should see no buildings', async () => {\n      // Remove manager's organization assignment\n      await db.delete(schema.userOrganizations)\n        .where(eq(schema.userOrganizations.userId, managerUser.id));\n\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', managerUser.id)\n        .expect(200);\n\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBe(0);\n    });\n  });\n\n  describe('Bills Page Building Selection Component Data', () => {\n    it('should return properly formatted building data for BuildingSelectionGrid component', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .set('x-test-user-id', adminUser.id)\n        .expect(200);\n\n      expect(response.body.length).toBeGreaterThan(0);\n      \n      const building = response.body[0];\n      \n      // Verify all required fields for BuildingSelectionGrid component are present\n      expect(building).toHaveProperty('id');\n      expect(building).toHaveProperty('name');\n      expect(building).toHaveProperty('address');\n      expect(building).toHaveProperty('city');\n      expect(building).toHaveProperty('buildingType');\n      expect(building).toHaveProperty('organizationName');\n      \n      // Verify data types\n      expect(typeof building.id).toBe('string');\n      expect(typeof building.name).toBe('string');\n      expect(typeof building.address).toBe('string');\n      expect(typeof building.organizationName).toBe('string');\n    });\n  });\n});"],"version":3}