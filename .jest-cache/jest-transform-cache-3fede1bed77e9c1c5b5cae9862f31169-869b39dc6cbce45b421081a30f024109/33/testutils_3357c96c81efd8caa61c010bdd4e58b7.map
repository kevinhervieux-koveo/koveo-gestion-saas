{"file":"/home/runner/workspace/tests/utils/test-utils.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/utils/test-utils.tsx"],"sourcesContent":["import React from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Mock providers that match the real application structure\nconst TestLanguageProvider = ({ children }: { children: React.ReactNode }) => {\n  // Create a React context that provides the language hook values\n  const mockLanguageContext = React.createContext({\n    t: (key: string, options?: any) => {\n      if (options && typeof options === 'object') {\n        let result = key;\n        Object.keys(options).forEach(k => {\n          result = result.replace(new RegExp(`{{${k}}}`, 'g'), options[k]);\n        });\n        return result;\n      }\n      return key;\n    },\n    language: 'en',\n    setLanguage: jest.fn(),\n  });\n  \n  return (\n    <mockLanguageContext.Provider value={{\n      t: jest.fn((key: string, options?: any) => {\n        if (options && typeof options === 'object') {\n          let result = key;\n          Object.keys(options).forEach(k => {\n            result = result.replace(new RegExp(`{{${k}}}`, 'g'), options[k]);\n          });\n          return result;\n        }\n        return key;\n      }),\n      language: 'en',\n      setLanguage: jest.fn(),\n    }}>\n      <div data-testid=\"language-provider\">{children}</div>\n    </mockLanguageContext.Provider>\n  );\n};\n\nconst TestAuthProvider = ({ children }: { children: React.ReactNode }) => {\n  return <div data-testid=\"auth-provider\">{children}</div>;\n};\n\nconst TestMobileMenuProvider = ({ children }: { children: React.ReactNode }) => {\n  return <div data-testid=\"mobile-menu-provider\">{children}</div>;\n};\n\ninterface AllTheProvidersProps {\n  children: React.ReactNode;\n}\n\nconst AllTheProviders = ({ children }: AllTheProvidersProps) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TestLanguageProvider>\n        <TestAuthProvider>\n          <TestMobileMenuProvider>\n            {children}\n          </TestMobileMenuProvider>\n        </TestAuthProvider>\n      </TestLanguageProvider>\n    </QueryClientProvider>\n  );\n};\n\nconst customRender = (\n  ui: React.ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>\n) => render(ui, { wrapper: AllTheProviders, ...options });\n\n// Re-export everything\nexport * from '@testing-library/react';\n\n// Override render method\nexport { customRender as render };\n\n// Create mock user data for tests\nexport const createMockUser = (overrides = {}) => ({\n  id: 'test-user-id',\n  username: 'testuser',\n  email: 'test@example.com',\n  role: 'admin' as const,\n  firstName: 'Test',\n  lastName: 'User',\n  language: 'en' as const,\n  ...overrides,\n});\n\n// Create mock organization data for tests\nexport const createMockOrganization = (overrides = {}) => ({\n  id: 'test-org-id',\n  name: 'Test Organization',\n  type: 'property_management' as const,\n  ...overrides,\n});\n\n// Create mock building data for tests\nexport const createMockBuilding = (overrides = {}) => ({\n  id: 'test-building-id',\n  name: 'Test Building',\n  organizationId: 'test-org-id',\n  address: '123 Test St',\n  city: 'Montreal',\n  province: 'QC',\n  postalCode: 'H1A 1A1',\n  ...overrides,\n});\n\n// Mock form data helpers\nexport const createMockFormData = (overrides = {}) => ({\n  title: 'Test Form',\n  description: 'Test description',\n  ...overrides,\n});"],"version":3}