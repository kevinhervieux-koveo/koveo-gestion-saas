{"version":3,"names":["exports","GeminiBillExtractor","react_1","cov_261pjaul2n","s","require","react_query_1","queryClient_1","file","onExtractionComplete","f","retryCount","setRetryCount","useState","maxRetries","extractionMutation","useMutation","retry","failureCount","error","b","isRetryableError","message","includes","console","log","retryDelay","attemptIndex","Math","min","mutationFn","billFile","formData","FormData","append","response","apiRequest","jsonResponse","json","onSuccess","data","convertBillResponseToFormData","success","confidence","metadata","rawData","onError","variables","context","errorMessage","name","match","errorData","JSON","parse","currentRetries","useEffect","isLoading","mutate","aiData","warn","title","description","vendorName","vendor","totalAmount","undefined","toString","category","mapVendorToCategory","paymentType","mapPaymentType","startDate","dueDate","endDate","schedulePayment","mapFrequencyToSchedule","frequency","customPayments","customPaymentDates","map","date","index","amount","toLowerCase","aiPaymentType","type","freq"],"sources":["/home/runner/workspace/client/src/components/bill-management/GeminiBillExtractor.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface GeminiBillExtractorProps {\n  /** The bill/receipt file to process with AI extraction */\n  file: File | null;\n  /** Callback function to return extracted data to the parent component */\n  onExtractionComplete: (data: {\n    success: boolean;\n    formData?: any;\n    confidence?: number;\n    error?: string;\n    rawData?: any;\n    isLoading?: boolean;\n  }) => void;\n}\n\n/**\n * GeminiBillExtractor Component\n * \n * A client-side component that manages AI-powered bill and receipt data extraction.\n * This component does not render any UI - it purely handles the API integration\n * for sending uploaded files to the Gemini AI service for structured data extraction.\n * \n * Features:\n * - TanStack Query integration with useMutation\n * - Automatic extraction triggering when file changes\n * - Structured error handling and response formatting\n * - Form data conversion for easy integration with react-hook-form\n * - Confidence scoring and extraction metadata\n * - Specialized for bills, receipts, and vendor invoices\n */\nexport function GeminiBillExtractor({ file, onExtractionComplete }: GeminiBillExtractorProps) {\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetries = 2;\n  \n  // Mutation for AI bill data extraction\n  const extractionMutation = useMutation({\n    retry: (failureCount, error: any) => {\n      // Retry up to maxRetries times for network errors or 5xx errors\n      if (failureCount < maxRetries) {\n        const isRetryableError = \n          error.message?.includes('Failed to execute \\'fetch\\'') || \n          error.message?.includes('Network error') ||\n          error.message?.includes('500:') ||\n          error.message?.includes('502:') ||\n          error.message?.includes('503:') ||\n          error.message?.includes('504:');\n        \n        if (isRetryableError) {\n          console.log(`[GEMINI BILL EXTRACTOR] Retrying extraction (attempt ${failureCount + 1}/${maxRetries})`);\n          return true;\n        }\n      }\n      return false;\n    },\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000), // Exponential backoff\n    mutationFn: async (billFile: File) => {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('invoiceFile', billFile);\n      \n      // Make API request to bill extraction endpoint\n      const response = await apiRequest('POST', '/api/bills/extract-data', formData);\n      \n      // Parse JSON response\n      const jsonResponse = await response.json();\n      return jsonResponse;\n    },\n    onSuccess: (data) => {\n      console.log('[GEMINI BILL EXTRACTOR] Extraction successful:', data);\n      \n      // Convert AI response to form data format for bills\n      const formData = convertBillResponseToFormData(data.data);\n      \n      // Call the success callback with structured data\n      onExtractionComplete({\n        success: true,\n        formData,\n        confidence: data.metadata?.confidence,\n        rawData: data.data\n      });\n    },\n    onError: (error: any, variables, context) => {\n      console.error('[GEMINI BILL EXTRACTOR] Extraction failed:', error);\n      setRetryCount(context?.failureCount || 0);\n      \n      // Handle different error types\n      let errorMessage = 'Failed to extract bill data';\n      \n      // Check if it's a network or fetch error\n      if (error.message?.includes('Failed to execute \\'fetch\\'') || error.name === 'TypeError') {\n        errorMessage = 'Network error occurred. Please check your connection and try again.';\n      } else if (error.message?.includes('RATE_LIMIT_EXCEEDED')) {\n        errorMessage = 'Too many extraction requests. Please wait before trying again.';\n      } else if (error.message?.includes('UNSUPPORTED_FILE_TYPE')) {\n        errorMessage = 'Unsupported file type. Please upload a PDF or image file.';\n      } else if (error.message?.includes('FILE_TOO_LARGE')) {\n        errorMessage = 'File is too large. Please upload a file smaller than 25MB.';\n      } else if (error.message?.includes('GEMINI_API_ERROR')) {\n        errorMessage = 'AI service temporarily unavailable. Please try again later.';\n      } else if (error.message?.includes('400:') || error.message?.includes('500:')) {\n        // Extract server error message from status codes\n        const match = error.message.match(/\\d+:\\s*(.+)/);\n        if (match) {\n          try {\n            const errorData = JSON.parse(match[1]);\n            errorMessage = errorData.message || errorData.error || errorMessage;\n          } catch {\n            errorMessage = match[1] || errorMessage;\n          }\n        }\n      }\n      \n      // Add retry information if applicable\n      const currentRetries = context?.failureCount || 0;\n      if (currentRetries > 0) {\n        errorMessage += ` (after ${currentRetries} retry${currentRetries === 1 ? '' : 'ies'})`;\n      }\n      \n      // Call the error callback\n      onExtractionComplete({\n        success: false,\n        error: errorMessage\n      });\n    }\n  });\n\n  // Trigger extraction when file changes\n  useEffect(() => {\n    if (file) {\n      console.log('[GEMINI BILL EXTRACTOR] Starting extraction for file:', file.name);\n      \n      // Notify parent that extraction is starting\n      onExtractionComplete({\n        success: false,\n        isLoading: true\n      });\n      \n      extractionMutation.mutate(file);\n    }\n  }, [file]);\n\n  // This component doesn't render anything - it's purely functional\n  return null;\n}\n\n/**\n * Convert AI response to form data format suitable for bill forms\n * Maps AI-extracted fields to the expected form structure\n */\nfunction convertBillResponseToFormData(aiData: any) {\n  try {\n    console.log('[GEMINI BILL EXTRACTOR] Raw AI data for conversion:', aiData);\n    \n    // Handle null or undefined data gracefully\n    if (!aiData || typeof aiData !== 'object') {\n      console.warn('[GEMINI BILL EXTRACTOR] AI data is null or invalid:', aiData);\n      return {};\n    }\n    \n    // Map AI response to bill form fields with more robust null checking\n    const formData = {\n      title: aiData.description || aiData.vendorName || 'Extracted Bill',\n      vendor: aiData.vendorName || '',\n      totalAmount: (aiData.totalAmount !== null && aiData.totalAmount !== undefined) ? aiData.totalAmount.toString() : '',\n      category: aiData.category || mapVendorToCategory(aiData.vendorName),\n      paymentType: mapPaymentType(aiData.paymentType),\n      description: aiData.description || (aiData.vendorName ? `Bill from ${aiData.vendorName}` : 'Extracted bill'),\n      startDate: aiData.dueDate || aiData.startDate || '',\n      endDate: aiData.endDate || '',\n      schedulePayment: mapFrequencyToSchedule(aiData.frequency),\n      customPayments: aiData.customPaymentDates?.map((date: string, index: number) => ({\n        amount: (aiData.totalAmount || 0).toString(),\n        date: date,\n        description: `Payment ${index + 1}`\n      })) || []\n    };\n\n    console.log('[GEMINI BILL EXTRACTOR] Converted form data:', formData);\n    return formData;\n  } catch (error) {\n    console.error('[GEMINI BILL EXTRACTOR] Error converting AI response:', error);\n    return {};\n  }\n}\n\n/**\n * Map vendor name to appropriate bill category\n */\nfunction mapVendorToCategory(vendorName: string): string {\n  if (!vendorName) return 'other';\n  \n  const vendor = vendorName.toLowerCase();\n  \n  if (vendor.includes('hydro') || vendor.includes('electric') || vendor.includes('energy')) {\n    return 'utilities';\n  } else if (vendor.includes('gas') || vendor.includes('natural gas')) {\n    return 'utilities';\n  } else if (vendor.includes('water') || vendor.includes('aqua')) {\n    return 'utilities';\n  } else if (vendor.includes('insurance')) {\n    return 'insurance';\n  } else if (vendor.includes('security') || vendor.includes('alarm')) {\n    return 'security';\n  } else if (vendor.includes('clean') || vendor.includes('janitor')) {\n    return 'cleaning';\n  } else if (vendor.includes('lawn') || vendor.includes('garden') || vendor.includes('landscape')) {\n    return 'landscaping';\n  } else if (vendor.includes('repair') || vendor.includes('fix')) {\n    return 'repairs';\n  } else if (vendor.includes('maintenance')) {\n    return 'maintenance';\n  } else if (vendor.includes('professional') || vendor.includes('consulting')) {\n    return 'professional_services';\n  } else if (vendor.includes('supplies') || vendor.includes('material')) {\n    return 'supplies';\n  } else if (vendor.includes('tax') || vendor.includes('government')) {\n    return 'taxes';\n  } else if (vendor.includes('technology') || vendor.includes('software') || vendor.includes('internet')) {\n    return 'technology';\n  }\n  \n  return 'other';\n}\n\n/**\n * Map AI payment type to form payment type\n */\nfunction mapPaymentType(aiPaymentType: string): string {\n  if (!aiPaymentType) return 'unique';\n  \n  const type = aiPaymentType.toLowerCase();\n  if (type.includes('recurring') || type.includes('repeat')) {\n    return 'recurrent';\n  }\n  \n  return 'unique';\n}\n\n/**\n * Map AI frequency to form schedule payment\n */\nfunction mapFrequencyToSchedule(frequency: string): string {\n  if (!frequency) return 'monthly';\n  \n  const freq = frequency.toLowerCase();\n  \n  if (freq.includes('month')) return 'monthly';\n  if (freq.includes('quarter')) return 'quarterly';\n  if (freq.includes('year') || freq.includes('annual')) return 'yearly';\n  if (freq.includes('week')) return 'weekly';\n  if (freq.includes('custom')) return 'custom';\n  \n  return 'monthly';\n}"],"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","ignoreList":[]}