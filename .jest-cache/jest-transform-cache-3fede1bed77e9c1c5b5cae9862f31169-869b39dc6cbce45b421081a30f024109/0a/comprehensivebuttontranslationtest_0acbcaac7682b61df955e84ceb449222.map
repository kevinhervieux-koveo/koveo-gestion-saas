{"file":"/home/runner/workspace/tests/unit/comprehensive-button-translation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/comprehensive-button-translation.test.ts"],"sourcesContent":["/**\n * Comprehensive Button Translation Test Suite\n * Validates that all buttons in the application are properly translated\n * and conform to Quebec Law 25 bilingual requirements\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport { translations, type Language } from '../../client/src/lib/i18n.ts';\n\ndescribe('Comprehensive Button Translation Coverage', () => {\n  const languages: Language[] = ['en', 'fr'];\n  \n  describe('Fullscreen Button Translations', () => {\n    it('should have fullscreen translations in both languages', () => {\n      languages.forEach(lang => {\n        const t = translations[lang];\n        \n        expect(t.fullscreen).toBeDefined();\n        expect(typeof t.fullscreen).toBe('string');\n        expect(t.fullscreen.length).toBeGreaterThan(0);\n        \n        expect(t.exitFullscreen).toBeDefined();\n        expect(typeof t.exitFullscreen).toBe('string');\n        expect(t.exitFullscreen.length).toBeGreaterThan(0);\n      });\n    });\n\n    it('should have French fullscreen translations with proper accent characters', () => {\n      const fr = translations.fr;\n      expect(fr.fullscreen).toBe('Plein écran');\n      expect(fr.exitFullscreen).toBe('Quitter le plein écran');\n    });\n\n    it('should have English fullscreen translations', () => {\n      const en = translations.en;\n      expect(en.fullscreen).toBe('Fullscreen');\n      expect(en.exitFullscreen).toBe('Exit Fullscreen');\n    });\n  });\n\n  describe('Critical Button Translation Coverage', () => {\n    const criticalButtonKeys = [\n      'login',\n      'logout', \n      'getStarted',\n      'cancel',\n      'confirm',\n      'save',\n      'delete',\n      'edit',\n      'create',\n      'update',\n      'submit',\n      'close',\n      'back',\n      'next',\n      'finish',\n      'continue',\n      'fullscreen',\n      'exitFullscreen'\n    ];\n\n    it('should have all critical button translations in both languages', () => {\n      criticalButtonKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n  });\n\n  describe('Navigation Button Translation Coverage', () => {\n    const navigationKeys = [\n      'home',\n      'dashboard', \n      'buildings',\n      'residents',\n      'documents',\n      'settings',\n      'organizations',\n      'calendar',\n      'demands',\n      'bills',\n      'budget'\n    ];\n\n    it('should have all navigation translations in both languages', () => {\n      navigationKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n          expect(t[key].length).toBeGreaterThan(0);\n        });\n      });\n    });\n  });\n\n  describe('Action Button Translation Validation', () => {\n    it('should have consistent action button patterns', () => {\n      const actionKeys = Object.keys(translations.en).filter(key => \n        key.includes('button') || key.includes('action') || key.includes('click')\n      );\n\n      actionKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n        });\n      });\n    });\n  });\n\n  describe('Quebec Law 25 Compliance for Buttons', () => {\n    it('should have French translations for all critical user interface elements', () => {\n      const fr = translations.fr;\n      \n      // Critical UI elements must be translated to French\n      expect(fr.login).toBeDefined();\n      expect(fr.logout).toBeDefined(); \n      expect(fr.privacyPolicy).toBeDefined();\n      expect(fr.settings).toBeDefined();\n      expect(fr.language).toBeDefined();\n      expect(fr.fullscreen).toBeDefined();\n      expect(fr.exitFullscreen).toBeDefined();\n    });\n\n    it('should use proper Quebec French terminology', () => {\n      const fr = translations.fr;\n      \n      // Validate Quebec-specific French terms\n      expect(fr.fullscreen).toContain('écran'); // \"écran\" not \"screen\"\n      expect(fr.exitFullscreen).toContain('Quitter'); // Proper Quebec French verb\n      expect(fr.language).toBe('Langue'); // Standard Quebec French\n      expect(fr.settings).toBe('Paramètres'); // Standard Quebec French\n    });\n  });\n\n  describe('Translation Consistency Validation', () => {\n    it('should have no missing translations between languages', () => {\n      const enKeys = Object.keys(translations.en);\n      const frKeys = Object.keys(translations.fr);\n      \n      expect(enKeys.sort()).toEqual(frKeys.sort());\n    });\n\n    it('should have no empty or undefined translations', () => {\n      languages.forEach(lang => {\n        const t = translations[lang] as any;\n        Object.keys(t).forEach(key => {\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n          expect(t[key].length).toBeGreaterThan(0);\n        });\n      });\n    });\n  });\n\n  describe('Translation Quality Standards', () => {\n    it('should have proper capitalization for button text', () => {\n      const buttonKeys = ['fullscreen', 'exitFullscreen', 'login', 'logout', 'getStarted'];\n      \n      buttonKeys.forEach(key => {\n        const en = (translations.en as any)[key];\n        const fr = (translations.fr as any)[key];\n        \n        if (en) {\n          // English buttons should start with capital letter\n          expect(en.charAt(0)).toEqual(en.charAt(0).toUpperCase());\n        }\n        \n        if (fr) {\n          // French buttons should start with capital letter\n          expect(fr.charAt(0)).toEqual(fr.charAt(0).toUpperCase());\n        }\n      });\n    });\n\n    it('should have reasonable length limits for button text', () => {\n      languages.forEach(lang => {\n        const t = translations[lang] as any;\n        Object.keys(t).forEach(key => {\n          // Button text should be reasonable length (not too long for UI)\n          if (typeof t[key] === 'string') {\n            expect(t[key].length).toBeLessThan(70); // Reasonable button text length (adjusted for Quebec French)\n          }\n        });\n      });\n    });\n  });\n});\n\n/**\n * Button Usage Pattern Validation\n * Tests that verify proper usage patterns for translated buttons\n */\ndescribe('Button Translation Usage Patterns', () => {\n  it('should validate translation key naming conventions', () => {\n    const buttonLikeKeys = Object.keys(translations.en).filter(key => \n      // Keys that are likely buttons or actions\n      ['button', 'action', 'click', 'toggle', 'open', 'close', 'exit', 'enter', 'fullscreen'].some(pattern => \n        key.toLowerCase().includes(pattern)\n      )\n    );\n\n    buttonLikeKeys.forEach(key => {\n      // Button keys should follow camelCase convention\n      expect(key).toMatch(/^[a-z][a-zA-Z0-9]*$/);\n    });\n  });\n\n  it('should ensure all fullscreen functionality is properly translated', () => {\n    const fullscreenKeys = ['fullscreen', 'exitFullscreen'];\n    \n    const languages: Language[] = ['en', 'fr'];\n    \n    fullscreenKeys.forEach(key => {\n      languages.forEach(lang => {\n        const translation = (translations[lang] as any)[key];\n        expect(translation).toBeDefined();\n        expect(translation).not.toContain('{'); // No untranslated placeholders\n        expect(translation).not.toContain('}');\n      });\n    });\n  });\n});"],"version":3}