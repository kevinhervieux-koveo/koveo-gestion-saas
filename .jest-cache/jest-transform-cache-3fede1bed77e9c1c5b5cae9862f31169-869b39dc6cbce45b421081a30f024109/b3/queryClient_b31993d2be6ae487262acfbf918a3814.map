{"file":"/home/runner/workspace/client/src/lib/queryClient.ts","mappings":";;;AAqCA,gCAmBC;AAxDD,uDAA8F;AAE9F,yFAAyF;AACzF,MAAM,cAAc,GAAG,EAAE,CAAC,CAAC,4BAA4B;AACvD,MAAM,uBAAuB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,YAAY;AAE3D,kDAAkD;AAClD,IAAI,UAAU,GAAG,CAAC,CAAC;AACnB,MAAM,iBAAiB,GAAG,GAAG,EAAE;IAC7B,IAAI,UAAU,GAAG,cAAc,EAAE,CAAC;QAChC,mBAAW,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,CAAC;QACpC,UAAU,GAAG,CAAC,CAAC;IACjB,CAAC;AACH,CAAC,CAAC;AAEF;;;;;GAKG;AACH,KAAK,UAAU,eAAe,CAAC,GAAa;IAC1C,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;QACZ,MAAM,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC;QAClD,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC,CAAC;IAC5C,CAAC;AACH,CAAC;AAED;;;;;;;;GAQG;AACI,KAAK,UAAU,UAAU,CAAC,MAAc,EAAE,GAAW,EAAE,IAAc;IAC1E,MAAM,OAAO,GAA2B,EAAE,CAAC;IAE3C,+BAA+B;IAC/B,IAAI,IAAI,YAAY,QAAQ,EAAE,CAAC;QAC7B,yEAAyE;IAC3E,CAAC;SAAM,IAAI,IAAI,EAAE,CAAC;QAChB,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB,CAAC;IAC/C,CAAC;IAED,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;QAC3B,MAAM;QACN,OAAO;QACP,IAAI,EAAE,IAAI,YAAY,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;QAC/E,WAAW,EAAE,SAAS;KACvB,CAAC,CAAC;IAEH,MAAM,eAAe,CAAC,GAAG,CAAC,CAAC;IAC3B,OAAO,GAAG,CAAC;AACb,CAAC;AASD;;;;;;GAMG;AACI,MAAM,UAAU,GACrB,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,EAAE,EAAE,CACpC,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;IACrB,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAW,EAAE;QACpD,WAAW,EAAE,SAAS;KACvB,CAAC,CAAC;IAEH,IAAI,oBAAoB,KAAK,YAAY,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;QAChE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,eAAe,CAAC,GAAG,CAAC,CAAC;IAE3B,2CAA2C;IAC3C,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACpD,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;QAC9D,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CACb,uCAAuC,WAAW,IAAI,sBAAsB,eAAe,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CACvH,CAAC;IACJ,CAAC;IAED,OAAO,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;AAC1B,CAAC,CAAC;AAvBS,QAAA,UAAU,cAuBnB;AAEJ;;;;GAIG;AACU,QAAA,WAAW,GAAG,IAAI,yBAAW,CAAC;IACzC,cAAc,EAAE;QACd,OAAO,EAAE;YACP,OAAO,EAAE,IAAA,kBAAU,EAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;YACvC,eAAe,EAAE,KAAK;YACtB,oBAAoB,EAAE,KAAK;YAC3B,oEAAoE;YACpE,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,YAAY;YACtC,kEAAkE;YAClE,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,iCAAiC;YACxD,KAAK,EAAE,CAAC,YAAY,EAAE,KAAU,EAAE,EAAE;gBAClC,gDAAgD;gBAChD,IACE,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC;oBAC9B,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC;oBAC/B,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,yBAAyB,CAAC,CAAC;oBACtD,YAAY,GAAG,CAAC,EAChB,CAAC;oBACD,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,wCAAwC;gBACxC,IAAI,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;oBAClC,OAAO,KAAK,CAAC;gBACf,CAAC;gBACD,OAAO,YAAY,GAAG,CAAC,CAAC;YAC1B,CAAC;SACF;QACD,SAAS,EAAE;YACT,KAAK,EAAE,KAAK;YACZ,4CAA4C;YAC5C,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,YAAY;SACpC;KACF;IACD,iDAAiD;IACjD,UAAU,EAAE,IAAI,wBAAU,CAAC;QACzB,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACjB,qDAAqD;YACrD,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBACvF,sDAAsD;gBACtD,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC7C,MAAM,YAAY,GAAG;oBACnB,GAAG;oBACH,aAAa;oBACb,gBAAgB;oBAChB,WAAW;oBACX,UAAU;oBACV,WAAW;oBACX,QAAQ;iBACT,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAExB,IAAI,CAAC,YAAY,EAAE,CAAC;oBAClB,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,aAAa,CAAC;oBACrC,OAAO;gBACT,CAAC;YACH,CAAC;YAED,uCAAuC;YACvC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;gBAC3C,0FAA0F;gBAC1F,IACE,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;oBAC7B,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC;oBACjD,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;oBAC7B,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,wBAAwB,CAAC,EAChD,CAAC;oBACD,OAAO,CAAC,sEAAsE;gBAChF,CAAC;gBAED,wDAAwD;gBACxD,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;oBACpF,OAAO,CAAC,KAAK,CAAC,0DAA0D,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;oBACzF,OAAO,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBAChD,OAAO,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;oBACrD,OAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;gBACjE,CAAC;qBAAM,CAAC;oBACN,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;gBAClD,CAAC;YACH,CAAC;QACH,CAAC;QACD,SAAS,EAAE,GAAG,EAAE;YACd,UAAU,EAAE,CAAC;YACb,IAAI,UAAU,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC;gBAC1B,sCAAsC;gBACtC,iBAAiB,EAAE,CAAC;YACtB,CAAC;QACH,CAAC;KACF,CAAC;IACF,4BAA4B;IAC5B,aAAa,EAAE,IAAI,2BAAa,CAAC;QAC/B,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACjB,mEAAmE;YACnE,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,EAAE,CAAC;gBACvF,sDAAsD;gBACtD,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC7C,MAAM,YAAY,GAAG;oBACnB,GAAG;oBACH,aAAa;oBACb,gBAAgB;oBAChB,WAAW;oBACX,UAAU;oBACV,WAAW;oBACX,QAAQ;iBACT,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAExB,IAAI,CAAC,YAAY,EAAE,CAAC;oBAClB,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,aAAa,CAAC;oBACrC,OAAO;gBACT,CAAC;YACH,CAAC;YAED,0CAA0C;YAC1C,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;gBAC3C,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YACrD,CAAC;QACH,CAAC;KACF,CAAC;CACH,CAAC,CAAC;AAEH,kCAAkC;AAClC,WAAW,CAAC,GAAG,EAAE;IACf,iBAAiB,EAAE,CAAC;AACtB,CAAC,EAAE,uBAAuB,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/client/src/lib/queryClient.ts"],"sourcesContent":["import { QueryClient, QueryFunction, QueryCache, MutationCache } from '@tanstack/react-query';\n\n// Enhanced query client with aggressive memory management for Quebec property management\nconst MAX_CACHE_SIZE = 50; // Limit cache to 50 queries\nconst MEMORY_CLEANUP_INTERVAL = 3 * 60 * 1000; // 3 minutes\n\n// Track query cache size and clean up when needed\nlet queryCount = 0;\nconst cleanupOldQueries = () => {\n  if (queryCount > MAX_CACHE_SIZE) {\n    queryClient.getQueryCache().clear();\n    queryCount = 0;\n  }\n};\n\n/**\n * Throws an error if the HTTP response is not successful (status not ok).\n * Extracts error message from response body or uses status text as fallback.\n * @param res - Fetch API Response object to check.\n * @throws Error with status code and message if response is not ok.\n */\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n/**\n * Makes an HTTP API request with proper error handling and JSON serialization.\n * Automatically includes credentials and sets Content-Type header for JSON data.\n * @param method - HTTP method (GET, POST, PUT, DELETE, etc.).\n * @param url - API endpoint URL.\n * @param data - Optional data to send in request body (will be JSON stringified).\n * @returns Fetch API Response object.\n * @throws Error if response status is not ok.\n */\nexport async function apiRequest(method: string, url: string, data?: unknown): Promise<Response> {\n  const headers: Record<string, string> = {};\n\n  // Handle FormData vs JSON data\n  if (data instanceof FormData) {\n    // Don't set Content-Type for FormData - let browser set it with boundary\n  } else if (data) {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data instanceof FormData ? data : data ? JSON.stringify(data) : undefined,\n    credentials: 'include',\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\n/**\n * Defines behavior when encountering 401 Unauthorized responses.\n * - 'returnNull': Returns null for 401 responses (useful for optional authentication)\n * - 'throw': Throws error for 401 responses (default behavior).\n */\ntype UnauthorizedBehavior = 'returnNull' | 'throw';\n\n/**\n * Creates a query function for React Query with configurable 401 handling.\n * Used as default query function for all React Query queries in the application.\n * @param options - Configuration options.\n * @param options.on401 - How to handle 401 responses.\n * @returns Configured query function for React Query.\n */\nexport const getQueryFn: <T>(_options: { on401: UnauthorizedBehavior }) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join('/') as string, {\n      credentials: 'include',\n    });\n\n    if (unauthorizedBehavior === 'returnNull' && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n\n    // Check if response is JSON before parsing\n    const contentType = res.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      const text = await res.text();\n      throw new Error(\n        `Expected JSON response but received ${contentType || 'unknown content type'}. Response: ${text.substring(0, 100)}...`\n      );\n    }\n\n    return await res.json();\n  };\n\n/**\n * Global React Query client instance with configured defaults.\n * Provides centralized data fetching, caching, and synchronization for the application.\n * Configured with custom error handling and optimized memory management.\n */\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: 'throw' }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      // Allow data to become stale after 2 minutes for better performance\n      staleTime: 2 * 60 * 1000, // 2 minutes\n      // Cache data for 5 minutes before removal to prevent memory bloat\n      gcTime: 5 * 60 * 1000, // 5 minutes (formerly cacheTime)\n      retry: (failureCount, error: any) => {\n        // Retry authentication and common timing errors\n        if (\n          (error?.message?.includes('401') ||\n            error?.message?.includes('404') ||\n            error?.message?.includes('Authentication required')) &&\n          failureCount < 2\n        ) {\n          return true;\n        }\n        // Don't retry other client errors (4xx)\n        if (error?.message?.includes('4')) {\n          return false;\n        }\n        return failureCount < 2;\n      },\n    },\n    mutations: {\n      retry: false,\n      // Don't cache mutation results indefinitely\n      gcTime: 2 * 60 * 1000, // 2 minutes\n    },\n  },\n  // Limit query cache size to prevent memory bloat\n  queryCache: new QueryCache({\n    onError: (error) => {\n      // Handle session expiry globally - redirect to login\n      if (error.message.includes('401') || error.message.includes('Authentication required')) {\n        // Check if we're not already on login or public pages\n        const currentPath = window.location.pathname;\n        const isPublicPath = [\n          '/',\n          '/auth/login',\n          '/auth/register',\n          '/features',\n          '/pricing',\n          '/security',\n          '/story',\n        ].includes(currentPath);\n\n        if (!isPublicPath) {\n          window.location.href = '/auth/login';\n          return;\n        }\n      }\n\n      // Only log query errors in development\n      if (process.env.NODE_ENV === 'development') {\n        // Skip logging authentication timing errors and common API errors to reduce console noise\n        if (\n          error.message.includes('401') ||\n          error.message.includes('Authentication required') ||\n          error.message.includes('404') ||\n          error.message.includes('API endpoint not found')\n        ) {\n          return; // Authentication timing issues and 404s will be retried automatically\n        }\n\n        // Provide more helpful error messages for common issues\n        if (error.message.includes('DOCTYPE') || error.message.includes('Unexpected token')) {\n          console.error('❌ API returned HTML instead of JSON. This usually means:', error.message);\n          console.error('• API endpoint not found (404)');\n          console.error('• Server error returning error page');\n          console.error('• Route mismatch between frontend and backend');\n        } else {\n          console.error('❌ Query failed:', error.message);\n        }\n      }\n    },\n    onSuccess: () => {\n      queryCount++;\n      if (queryCount % 10 === 0) {\n        // Check memory usage every 10 queries\n        cleanupOldQueries();\n      }\n    },\n  }),\n  // Limit mutation cache size\n  mutationCache: new MutationCache({\n    onError: (error) => {\n      // Handle session expiry globally for mutations - redirect to login\n      if (error.message.includes('401') || error.message.includes('Authentication required')) {\n        // Check if we're not already on login or public pages\n        const currentPath = window.location.pathname;\n        const isPublicPath = [\n          '/',\n          '/auth/login',\n          '/auth/register',\n          '/features',\n          '/pricing',\n          '/security',\n          '/story',\n        ].includes(currentPath);\n\n        if (!isPublicPath) {\n          window.location.href = '/auth/login';\n          return;\n        }\n      }\n\n      // Only log mutation errors in development\n      if (process.env.NODE_ENV === 'development') {\n        console.error('❌ Mutation failed:', error.message);\n      }\n    },\n  }),\n});\n\n// Set up automatic memory cleanup\nsetInterval(() => {\n  cleanupOldQueries();\n}, MEMORY_CLEANUP_INTERVAL);\n"],"version":3}