2877e8a2854983586d9074dad821232a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
// Create test app similar to existing tests
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Add test authentication middleware that bypasses real auth
    app.use(async (req, res, next) => {
        const testUserId = req.headers['x-test-user-id'];
        if (testUserId) {
            const [user] = await db_1.db.select().from(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, testUserId)).limit(1);
            if (user) {
                req.session = {
                    userId: testUserId,
                    isAuthenticated: true,
                    role: user.role
                };
                req.user = user;
            }
        }
        next();
    });
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('RBAC Buildings and Residences Actions', () => {
    let app;
    let adminUser;
    let managerUser;
    let tenantUser;
    let residentUser;
    let demoManagerUser;
    let testOrganization;
    let otherOrganization;
    let testBuilding;
    let otherBuilding;
    let testResidence;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        try {
            // Clean test data
            await db_1.db.delete(schema.userResidences);
            await db_1.db.delete(schema.userOrganizations);
            await db_1.db.delete(schema.residences);
            await db_1.db.delete(schema.buildings);
            await db_1.db.delete(schema.users);
            await db_1.db.delete(schema.organizations);
        }
        catch (error) {
            console.warn('Test setup warning:', error);
        }
        // Create test organizations
        const organizations = await db_1.db
            .insert(schema.organizations)
            .values([
            {
                name: 'Test Organization',
                type: 'Standard',
                address: '123 Test St',
                city: 'Test City',
                province: 'QC',
                postalCode: 'H1H 1H1',
                phone: '514-555-0123',
                email: 'test@org.com',
            },
            {
                name: 'Other Organization',
                type: 'Standard',
                address: '456 Other St',
                city: 'Other City',
                province: 'QC',
                postalCode: 'H2H 2H2',
                phone: '514-555-0456',
                email: 'other@org.com',
            }
        ])
            .returning();
        testOrganization = organizations[0];
        otherOrganization = organizations[1];
        // Create test buildings
        const buildings = await db_1.db
            .insert(schema.buildings)
            .values([
            {
                organizationId: testOrganization.id,
                name: 'Test Building',
                address: '123 Test St',
                city: 'Test City',
                province: 'QC',
                postalCode: 'H1H 1H1',
                totalUnits: 10,
                buildingType: 'apartment',
            },
            {
                organizationId: otherOrganization.id,
                name: 'Other Building',
                address: '456 Other St',
                city: 'Other City',
                province: 'QC',
                postalCode: 'H2H 2H2',
                totalUnits: 5,
                buildingType: 'apartment',
            }
        ])
            .returning();
        testBuilding = buildings[0];
        otherBuilding = buildings[1];
        // Create test residence
        const [residence] = await db_1.db
            .insert(schema.residences)
            .values({
            buildingId: testBuilding.id,
            unitNumber: '101',
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1.0',
        })
            .returning();
        testResidence = residence;
        // Create test users
        const users = await db_1.db
            .insert(schema.users)
            .values([
            {
                email: 'admin@test.com',
                username: 'admin',
                password: 'hashedpass',
                firstName: 'Admin',
                lastName: 'User',
                role: 'admin',
                isActive: true,
                phone: '514-555-0001',
            },
            {
                email: 'manager@test.com',
                username: 'manager',
                password: 'hashedpass',
                firstName: 'Manager',
                lastName: 'User',
                role: 'manager',
                isActive: true,
                phone: '514-555-0002',
            },
            {
                email: 'tenant@test.com',
                username: 'tenant',
                password: 'hashedpass',
                firstName: 'Tenant',
                lastName: 'User',
                role: 'tenant',
                isActive: true,
                phone: '514-555-0003',
            },
            {
                email: 'resident@test.com',
                username: 'resident',
                password: 'hashedpass',
                firstName: 'Resident',
                lastName: 'User',
                role: 'resident',
                isActive: true,
                phone: '514-555-0004',
            },
            {
                email: 'demo.manager@test.com',
                username: 'demo_manager',
                password: 'hashedpass',
                firstName: 'Demo',
                lastName: 'Manager',
                role: 'demo_manager',
                isActive: true,
                phone: '514-555-0005',
            }
        ])
            .returning();
        adminUser = users.find(u => u.email === 'admin@test.com');
        managerUser = users.find(u => u.email === 'manager@test.com');
        tenantUser = users.find(u => u.email === 'tenant@test.com');
        residentUser = users.find(u => u.email === 'resident@test.com');
        demoManagerUser = users.find(u => u.email === 'demo.manager@test.com');
        // Assign manager to test organization
        await db_1.db
            .insert(schema.userOrganizations)
            .values({
            userId: managerUser.id,
            organizationId: testOrganization.id,
            organizationRole: 'manager',
            isActive: true,
        });
        // Assign tenant and resident to test organization and residence
        await db_1.db
            .insert(schema.userOrganizations)
            .values([
            {
                userId: tenantUser.id,
                organizationId: testOrganization.id,
                organizationRole: 'tenant',
                isActive: true,
            },
            {
                userId: residentUser.id,
                organizationId: testOrganization.id,
                organizationRole: 'resident',
                isActive: true,
            }
        ]);
        await db_1.db
            .insert(schema.userResidences)
            .values([
            {
                userId: tenantUser.id,
                residenceId: testResidence.id,
                relationshipType: 'tenant',
                startDate: '2024-01-01',
                isActive: true,
            },
            {
                userId: residentUser.id,
                residenceId: testResidence.id,
                relationshipType: 'occupant',
                startDate: '2024-01-01',
                isActive: true,
            }
        ]);
    });
    (0, globals_1.afterEach)(async () => {
        await db_1.db.delete(schema.userResidences);
        await db_1.db.delete(schema.userOrganizations);
        await db_1.db.delete(schema.residences);
        await db_1.db.delete(schema.buildings);
        await db_1.db.delete(schema.users);
        await db_1.db.delete(schema.organizations);
    });
    (0, globals_1.describe)('Building Field Editing by Role', () => {
        const buildingUpdateData = {
            name: 'Updated Building Name',
            address: '999 Updated St',
            city: 'Updated City',
            province: 'QC',
            postalCode: 'H9H 9H9',
            totalUnits: 15,
            buildingType: 'condo',
            description: 'Updated building description',
        };
        (0, globals_1.it)('should allow admin to edit all building fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', adminUser.id)
                .send(buildingUpdateData)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Building updated successfully');
            // Verify the building was actually updated
            const [updatedBuilding] = await db_1.db
                .select()
                .from(schema.buildings)
                .where((0, drizzle_orm_1.eq)(schema.buildings.id, testBuilding.id));
            (0, globals_1.expect)(updatedBuilding.name).toBe(buildingUpdateData.name);
            (0, globals_1.expect)(updatedBuilding.address).toBe(buildingUpdateData.address);
            (0, globals_1.expect)(updatedBuilding.totalUnits).toBe(buildingUpdateData.totalUnits);
        });
        (0, globals_1.it)('should allow manager to edit buildings in their organization', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', managerUser.id)
                .send(buildingUpdateData)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Building updated successfully');
            // Verify the building was updated
            const [updatedBuilding] = await db_1.db
                .select()
                .from(schema.buildings)
                .where((0, drizzle_orm_1.eq)(schema.buildings.id, testBuilding.id));
            (0, globals_1.expect)(updatedBuilding.name).toBe(buildingUpdateData.name);
        });
        (0, globals_1.it)('should prevent manager from editing buildings outside their organization', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/buildings/${otherBuilding.id}`)
                .set('x-test-user-id', managerUser.id)
                .send(buildingUpdateData);
            // Should fail with 403 or 404 (depending on implementation)
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
        (0, globals_1.it)('should prevent tenant from editing building fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', tenantUser.id)
                .send(buildingUpdateData)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
        (0, globals_1.it)('should prevent resident from editing building fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', residentUser.id)
                .send(buildingUpdateData)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
        (0, globals_1.it)('should allow demo_manager to edit buildings (demo functionality)', async () => {
            // Demo managers should have similar permissions to regular managers
            const response = await (0, supertest_1.default)(app)
                .put(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', demoManagerUser.id)
                .send(buildingUpdateData);
            // Demo managers might have restricted access depending on implementation
            // This test validates the current behavior
            if (response.status === 200) {
                (0, globals_1.expect)(response.body.message).toBe('Building updated successfully');
            }
            else {
                (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(403);
            }
        });
    });
    (0, globals_1.describe)('Building Creation by Role', () => {
        (0, globals_1.it)('should allow admin to create buildings', async () => {
            const newBuildingData = {
                organizationId: testOrganization.id,
                name: 'New Test Building',
                address: '789 New St',
                city: 'New City',
                province: 'QC',
                postalCode: 'H3H 3H3',
                totalUnits: 20,
                buildingType: 'townhouse',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/buildings')
                .set('x-test-user-id', adminUser.id)
                .send(newBuildingData)
                .expect(201);
            (0, globals_1.expect)(response.body.message).toBe('Building created successfully');
            (0, globals_1.expect)(response.body.building.name).toBe(newBuildingData.name);
        });
        (0, globals_1.it)('should allow manager to create buildings in their organization', async () => {
            const newBuildingData = {
                organizationId: testOrganization.id,
                name: 'Manager New Building',
                address: '888 Manager St',
                city: 'Manager City',
                province: 'QC',
                postalCode: 'H4H 4H4',
                totalUnits: 12,
                buildingType: 'apartment',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/buildings')
                .set('x-test-user-id', managerUser.id)
                .send(newBuildingData)
                .expect(201);
            (0, globals_1.expect)(response.body.message).toBe('Building created successfully');
        });
        (0, globals_1.it)('should prevent manager from creating buildings in other organizations', async () => {
            const otherOrgBuildingData = {
                organizationId: otherOrganization.id,
                name: 'Unauthorized Building',
                address: '999 Forbidden St',
                city: 'Forbidden City',
                province: 'QC',
                postalCode: 'H5H 5H5',
                totalUnits: 8,
                buildingType: 'apartment',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/buildings')
                .set('x-test-user-id', managerUser.id)
                .send(otherOrgBuildingData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
        (0, globals_1.it)('should prevent tenant from creating buildings', async () => {
            const newBuildingData = {
                organizationId: testOrganization.id,
                name: 'Tenant Building',
                address: '777 Tenant St',
                city: 'Tenant City',
                province: 'QC',
                postalCode: 'H6H 6H6',
                totalUnits: 6,
                buildingType: 'apartment',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/buildings')
                .set('x-test-user-id', tenantUser.id)
                .send(newBuildingData)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
        (0, globals_1.it)('should prevent resident from creating buildings', async () => {
            const newBuildingData = {
                organizationId: testOrganization.id,
                name: 'Resident Building',
                address: '666 Resident St',
                city: 'Resident City',
                province: 'QC',
                postalCode: 'H7H 7H7',
                totalUnits: 4,
                buildingType: 'apartment',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/buildings')
                .set('x-test-user-id', residentUser.id)
                .send(newBuildingData)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
    });
    (0, globals_1.describe)('Residence Field Editing by Role', () => {
        const residenceUpdateData = {
            unitNumber: '102',
            squareFootage: 1200,
            bedrooms: 3,
            bathrooms: 2,
            description: 'Updated residence description',
            parkingSpaces: 1,
            storageSpaces: 1,
        };
        (0, globals_1.it)('should allow admin to edit all residence fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', adminUser.id)
                .send(residenceUpdateData)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Residence updated successfully');
            // Verify the residence was updated
            const [updatedResidence] = await db_1.db
                .select()
                .from(schema.residences)
                .where((0, drizzle_orm_1.eq)(schema.residences.id, testResidence.id));
            (0, globals_1.expect)(updatedResidence.unitNumber).toBe(residenceUpdateData.unitNumber);
            (0, globals_1.expect)(updatedResidence.squareFootage).toBe(residenceUpdateData.squareFootage);
            (0, globals_1.expect)(updatedResidence.bedrooms).toBe(residenceUpdateData.bedrooms);
        });
        (0, globals_1.it)('should allow manager to edit residences in their organization', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', managerUser.id)
                .send(residenceUpdateData)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Residence updated successfully');
            // Verify the residence was updated
            const [updatedResidence] = await db_1.db
                .select()
                .from(schema.residences)
                .where((0, drizzle_orm_1.eq)(schema.residences.id, testResidence.id));
            (0, globals_1.expect)(updatedResidence.unitNumber).toBe(residenceUpdateData.unitNumber);
        });
        (0, globals_1.it)('should prevent tenant from editing residence structural fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', tenantUser.id)
                .send(residenceUpdateData);
            // Tenants typically cannot edit structural information
            // Should fail with 403 or only allow limited fields
            if (response.status === 403) {
                (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
            }
            else if (response.status === 200) {
                // If allowed, verify only certain fields can be updated by tenants
                const [updatedResidence] = await db_1.db
                    .select()
                    .from(schema.residences)
                    .where((0, drizzle_orm_1.eq)(schema.residences.id, testResidence.id));
                // Structural fields should not be changed by tenants
                (0, globals_1.expect)(updatedResidence.squareFootage).toBe(1000); // Original value
                (0, globals_1.expect)(updatedResidence.bedrooms).toBe(2); // Original value
            }
        });
        (0, globals_1.it)('should prevent resident from editing residence structural fields', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', residentUser.id)
                .send(residenceUpdateData);
            // Residents typically cannot edit structural information
            if (response.status === 403) {
                (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
            }
            else if (response.status === 200) {
                // If allowed, verify only certain fields can be updated by residents
                const [updatedResidence] = await db_1.db
                    .select()
                    .from(schema.residences)
                    .where((0, drizzle_orm_1.eq)(schema.residences.id, testResidence.id));
                // Structural fields should not be changed by residents
                (0, globals_1.expect)(updatedResidence.squareFootage).toBe(1000); // Original value
                (0, globals_1.expect)(updatedResidence.bedrooms).toBe(2); // Original value
            }
        });
        (0, globals_1.it)('should allow demo_manager to edit residences (demo functionality)', async () => {
            const response = await (0, supertest_1.default)(app)
                .put(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', demoManagerUser.id)
                .send(residenceUpdateData);
            // Demo managers should have similar permissions to regular managers
            if (response.status === 200) {
                (0, globals_1.expect)(response.body.message).toBe('Residence updated successfully');
            }
            else {
                (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(403);
            }
        });
    });
    (0, globals_1.describe)('Residence Creation by Role', () => {
        (0, globals_1.it)('should allow admin to create residences', async () => {
            const newResidenceData = {
                buildingId: testBuilding.id,
                unitNumber: '103',
                squareFootage: 900,
                bedrooms: 1,
                bathrooms: 1,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/residences')
                .set('x-test-user-id', adminUser.id)
                .send(newResidenceData)
                .expect(201);
            (0, globals_1.expect)(response.body.message).toBe('Residence created successfully');
            (0, globals_1.expect)(response.body.residence.unitNumber).toBe(newResidenceData.unitNumber);
        });
        (0, globals_1.it)('should allow manager to create residences in buildings they manage', async () => {
            const newResidenceData = {
                buildingId: testBuilding.id,
                unitNumber: '104',
                squareFootage: 1100,
                bedrooms: 2,
                bathrooms: 1,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/residences')
                .set('x-test-user-id', managerUser.id)
                .send(newResidenceData)
                .expect(201);
            (0, globals_1.expect)(response.body.message).toBe('Residence created successfully');
        });
        (0, globals_1.it)('should prevent manager from creating residences in buildings outside their organization', async () => {
            const otherBuildingResidenceData = {
                buildingId: otherBuilding.id,
                unitNumber: '201',
                squareFootage: 800,
                bedrooms: 1,
                bathrooms: 1,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/residences')
                .set('x-test-user-id', managerUser.id)
                .send(otherBuildingResidenceData);
            (0, globals_1.expect)(response.status).toBeGreaterThanOrEqual(400);
        });
        (0, globals_1.it)('should prevent tenant from creating residences', async () => {
            const newResidenceData = {
                buildingId: testBuilding.id,
                unitNumber: '105',
                squareFootage: 950,
                bedrooms: 2,
                bathrooms: 1,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/residences')
                .set('x-test-user-id', tenantUser.id)
                .send(newResidenceData)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
        (0, globals_1.it)('should prevent resident from creating residences', async () => {
            const newResidenceData = {
                buildingId: testBuilding.id,
                unitNumber: '106',
                squareFootage: 850,
                bedrooms: 1,
                bathrooms: 1,
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/residences')
                .set('x-test-user-id', residentUser.id)
                .send(newResidenceData)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
    });
    (0, globals_1.describe)('Building and Residence Deletion by Role', () => {
        (0, globals_1.it)('should allow admin to delete buildings', async () => {
            const response = await (0, supertest_1.default)(app)
                .delete(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Building deleted successfully');
            // Verify building is marked as inactive
            const [deletedBuilding] = await db_1.db
                .select()
                .from(schema.buildings)
                .where((0, drizzle_orm_1.eq)(schema.buildings.id, testBuilding.id));
            (0, globals_1.expect)(deletedBuilding.isActive).toBe(false);
        });
        (0, globals_1.it)('should allow manager to delete buildings in their organization', async () => {
            const response = await (0, supertest_1.default)(app)
                .delete(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', managerUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Building deleted successfully');
        });
        (0, globals_1.it)('should prevent tenant from deleting buildings', async () => {
            const response = await (0, supertest_1.default)(app)
                .delete(`/api/buildings/${testBuilding.id}`)
                .set('x-test-user-id', tenantUser.id)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
        (0, globals_1.it)('should allow admin to delete residences', async () => {
            const response = await (0, supertest_1.default)(app)
                .delete(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Residence deleted successfully');
            // Verify residence is marked as inactive
            const [deletedResidence] = await db_1.db
                .select()
                .from(schema.residences)
                .where((0, drizzle_orm_1.eq)(schema.residences.id, testResidence.id));
            (0, globals_1.expect)(deletedResidence.isActive).toBe(false);
        });
        (0, globals_1.it)('should allow manager to delete residences in their organization', async () => {
            const response = await (0, supertest_1.default)(app)
                .delete(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', managerUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Residence deleted successfully');
        });
        (0, globals_1.it)('should prevent tenant from deleting residences', async () => {
            const response = await (0, supertest_1.default)(app)
                .delete(`/api/residences/${testResidence.id}`)
                .set('x-test-user-id', tenantUser.id)
                .expect(403);
            (0, globals_1.expect)(response.body.message).toContain('Insufficient permissions');
        });
    });
    (0, globals_1.describe)('Data Access by Role', () => {
        (0, globals_1.it)('should allow admin to view all buildings', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.buildings).toBeDefined();
            (0, globals_1.expect)(response.body.buildings.length).toBeGreaterThanOrEqual(2);
        });
        (0, globals_1.it)('should allow manager to view buildings in their organization', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('x-test-user-id', managerUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.buildings).toBeDefined();
            // Manager should see at least the test building
            const buildingIds = response.body.buildings.map((b) => b.id);
            (0, globals_1.expect)(buildingIds).toContain(testBuilding.id);
        });
        (0, globals_1.it)('should allow tenant to view their building', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .set('x-test-user-id', tenantUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.buildings).toBeDefined();
            // Tenant should see their building
            const buildingIds = response.body.buildings.map((b) => b.id);
            (0, globals_1.expect)(buildingIds).toContain(testBuilding.id);
        });
        (0, globals_1.it)('should allow admin to view all residences', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/residences')
                .set('x-test-user-id', adminUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.residences).toBeDefined();
            (0, globals_1.expect)(response.body.residences.length).toBeGreaterThanOrEqual(1);
        });
        (0, globals_1.it)('should allow tenant to view their residence', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/residences')
                .set('x-test-user-id', tenantUser.id)
                .expect(200);
            (0, globals_1.expect)(response.body.residences).toBeDefined();
            // Tenant should see their residence
            const residenceIds = response.body.residences.map((r) => r.id);
            (0, globals_1.expect)(residenceIds).toContain(testResidence.id);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,