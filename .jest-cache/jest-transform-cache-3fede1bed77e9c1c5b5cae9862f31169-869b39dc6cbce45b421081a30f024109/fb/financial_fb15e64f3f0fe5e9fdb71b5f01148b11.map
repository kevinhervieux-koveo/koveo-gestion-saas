{"version":3,"names":["cov_rgrjhyh38","actualCoverage","s","drizzle_orm_1","require","pg_core_1","drizzle_zod_1","zod_1","core_1","property_1","exports","billStatusEnum","pgEnum","oldBillTypeEnum","billCategoryEnum","paymentTypeEnum","schedulePaymentEnum","bills","pgTable","id","varchar","primaryKey","default","sql","buildingId","notNull","references","f","buildings","billNumber","text","unique","title","description","category","vendor","paymentType","schedulePayment","scheduleCustom","date","array","costs","decimal","precision","scale","totalAmount","startDate","endDate","status","filePath","fileName","fileSize","integer","isAiAnalyzed","boolean","aiAnalysisData","jsonb","notes","autoGenerated","reference","createdBy","users","createdAt","timestamp","defaultNow","updatedAt","oldBills","uuid","residenceId","residences","type","amount","dueDate","issueDate","lateFeeAmount","discountAmount","finalAmount","paymentReceivedDate","budgets","year","name","budgetedAmount","actualAmount","variance","approvedBy","approvedDate","isActive","monthlyBudgets","month","incomeTypes","incomes","spendingTypes","spendings","approved","originalBudgetId","insertBillSchema","createInsertSchema","z","string","min","enum","optional","coerce","refine","dates","b","length","every","Date","isNaN","getTime","number","positive","omit","insertOldBillSchema","object","insertBudgetSchema","int","insertMonthlyBudgetSchema"],"sources":["/home/runner/workspace/shared/schemas/financial.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  timestamp,\n  uuid,\n  pgEnum,\n  boolean,\n  integer,\n  decimal,\n  date,\n  jsonb,\n  varchar,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\nimport { users } from './core';\nimport { residences, buildings } from './property';\n\n// Financial enums\nexport const billStatusEnum = pgEnum('bill_status', [\n  'draft',\n  'sent',\n  'overdue',\n  'paid',\n  'cancelled',\n]);\n\nexport const oldBillTypeEnum = pgEnum('old_bill_type', [\n  'condo_fees',\n  'special_assessment',\n  'utility',\n  'maintenance',\n  'other',\n]);\n\nexport const billCategoryEnum = pgEnum('bill_category', [\n  'insurance',\n  'maintenance',\n  'salary',\n  'utilities',\n  'cleaning',\n  'security',\n  'landscaping',\n  'professional_services',\n  'administration',\n  'repairs',\n  'supplies',\n  'taxes',\n  'technology',\n  'reserves',\n  'other',\n]);\n\nexport const paymentTypeEnum = pgEnum('payment_type', ['unique', 'recurrent']);\n\nexport const schedulePaymentEnum = pgEnum('schedule_payment', [\n  'weekly',\n  'monthly',\n  'quarterly',\n  'yearly',\n  'custom',\n]);\n\n// Financial tables\n/**\n * Enhanced bills table for tracking financial obligations with advanced scheduling.\n * Supports unique and recurrent payments with custom scheduling options.\n */\nexport const bills = pgTable('bills', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id),\n  billNumber: text('bill_number').notNull().unique(),\n  title: text('title').notNull(),\n  description: text('description'),\n  category: billCategoryEnum('category').notNull(),\n  vendor: text('vendor'), // Company or service provider\n  paymentType: paymentTypeEnum('payment_type').notNull(), // unique or recurrent\n  schedulePayment: schedulePaymentEnum('schedule_payment'), // Only for recurrent payments\n  scheduleCustom: date('schedule_custom').array(), // Custom dates for custom schedules\n  costs: decimal('costs', { precision: 12, scale: 2 }).array().notNull(), // Array of costs for payment plan\n  totalAmount: decimal('total_amount', { precision: 12, scale: 2 }).notNull(),\n  startDate: date('start_date').notNull(), // When the bill series starts\n  endDate: date('end_date'), // For recurrent bills, when they end (optional for ongoing)\n  status: billStatusEnum('status').notNull().default('draft'),\n  filePath: text('file_path'), // Path to uploaded bill document\n  fileName: text('file_name'), // Original filename\n  fileSize: integer('file_size'), // File size in bytes\n  isAiAnalyzed: boolean('is_ai_analyzed').default(false),\n  aiAnalysisData: jsonb('ai_analysis_data'), // Store AI-extracted data\n  notes: text('notes'),\n  autoGenerated: boolean('auto_generated').notNull().default(false), // Indicates if this bill was auto-generated\n  reference: varchar('reference').references(() => bills.id), // References the original bill for auto-generated bills\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Legacy bills table - keeping for backward compatibility.\n * Will be migrated to new bills table structure.\n */\nexport const oldBills = pgTable('old_bills', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  residenceId: varchar('residence_id')\n    .notNull()\n    .references(() => residences.id),\n  billNumber: text('bill_number').notNull().unique(),\n  type: oldBillTypeEnum('type').notNull(),\n  description: text('description').notNull(),\n  amount: decimal('amount', { precision: 12, scale: 2 }).notNull(),\n  dueDate: date('due_date').notNull(),\n  issueDate: date('issue_date').notNull(),\n  status: billStatusEnum('status').notNull().default('draft'),\n  notes: text('notes'),\n  lateFeeAmount: decimal('late_fee_amount', { precision: 10, scale: 2 }),\n  discountAmount: decimal('discount_amount', { precision: 10, scale: 2 }),\n  finalAmount: decimal('final_amount', { precision: 12, scale: 2 }).notNull(),\n  paymentReceivedDate: date('payment_received_date'),\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Budgets table for tracking financial planning by building and category.\n * Supports operational, reserve, and special project budgets.\n */\nexport const budgets = pgTable('budgets', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id),\n  year: integer('year').notNull(),\n  name: text('name').notNull(),\n  description: text('description'),\n  category: text('category').notNull(), // 'operational', 'reserve', 'special_project'\n  budgetedAmount: decimal('budgeted_amount', { precision: 12, scale: 2 }).notNull(),\n  actualAmount: decimal('actual_amount', { precision: 12, scale: 2 }).default('0'),\n  variance: decimal('variance', { precision: 12, scale: 2 }).default('0'),\n  approvedBy: varchar('approved_by').references(() => users.id),\n  approvedDate: date('approved_date'),\n  isActive: boolean('is_active').notNull().default(true),\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Monthly budgets table for detailed monthly tracking of income and spending by building.\n * Automatically populated for each building from construction date to 25 years in the future.\n * Updated monthly on the 1st and supports approval workflow.\n */\nexport const monthlyBudgets = pgTable('monthly_budgets', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id),\n  year: integer('year').notNull(),\n  month: integer('month').notNull(), // 1-12\n  incomeTypes: text('income_types').array().notNull(), // Array of income categories from money_flow\n  incomes: decimal('incomes', { precision: 12, scale: 2 }).array().notNull(), // Array of income amounts corresponding to incomeTypes\n  spendingTypes: text('spending_types').array().notNull(), // Array of expense categories from money_flow\n  spendings: decimal('spendings', { precision: 12, scale: 2 }).array().notNull(), // Array of spending amounts corresponding to spendingTypes\n  approved: boolean('approved').notNull().default(false),\n  approvedBy: varchar('approved_by').references(() => users.id),\n  approvedDate: timestamp('approved_date'),\n  originalBudgetId: varchar('original_budget_id').references(() => monthlyBudgets.id), // References the original budget if this is an approved copy\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Insert schemas\n// Removed insertMoneyFlowSchema - money flow table deleted\n\nexport const insertBillSchema = createInsertSchema(bills, {\n  // Custom validations for strict schema compliance\n  billNumber: z.string().min(1, \"Bill number is required\"),\n  title: z.string().min(1, \"Title is required\"),\n  category: z.enum(['insurance', 'maintenance', 'salary', 'utilities', 'cleaning', 'security', 'landscaping', 'professional_services', 'administration', 'repairs', 'supplies', 'taxes', 'technology', 'reserves', 'other']),\n  paymentType: z.enum(['unique', 'recurrent']),\n  schedulePayment: z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),\n  scheduleCustom: z.array(z.coerce.date()).optional().refine(\n    (dates) => !dates || dates.length === 0 || dates.every(date => date instanceof Date && !isNaN(date.getTime())),\n    \"All custom schedule dates must be valid dates\"\n  ),\n  costs: z.array(z.coerce.number().positive(\"All costs must be positive\")).min(1, \"At least one cost is required\"),\n  totalAmount: z.coerce.number().positive(\"Total amount must be positive\"),\n  startDate: z.coerce.date(),\n  endDate: z.coerce.date().optional(),\n  status: z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']).default('draft'),\n  autoGenerated: z.boolean().default(false),\n}).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertOldBillSchema = z.object({\n  residenceId: z.string().uuid(),\n  billNumber: z.string(),\n  type: z.string(),\n  description: z.string().optional(),\n  amount: z.number(),\n  dueDate: z.date(),\n  issueDate: z.date().optional(),\n  status: z.string().default('unpaid'),\n  notes: z.string().optional(),\n  lateFeeAmount: z.number().optional(),\n  discountAmount: z.number().optional(),\n  finalAmount: z.number().optional(),\n  paymentReceivedDate: z.date().optional(),\n  createdBy: z.string().uuid(),\n});\n\nexport const insertBudgetSchema = z.object({\n  buildingId: z.string().uuid(),\n  year: z.number().int(),\n  name: z.string(),\n  description: z.string().optional(),\n  category: z.string(),\n  budgetedAmount: z.number(),\n  actualAmount: z.number().optional(),\n  createdBy: z.string().uuid(),\n});\n\nexport const insertMonthlyBudgetSchema = createInsertSchema(monthlyBudgets).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\n// Types\n\n/**\n * Bills insert and select types.\n */\nexport type InsertBill = z.infer<typeof insertBillSchema>;\n/**\n *\n */\nexport type Bill = typeof bills.$inferSelect;\n\n/**\n * Legacy bills types for backward compatibility.\n */\nexport type InsertOldBill = z.infer<typeof insertOldBillSchema>;\n/**\n *\n */\nexport type OldBill = typeof oldBills.$inferSelect;\n\n/**\n * Budget insert and select types.\n */\nexport type InsertBudget = z.infer<typeof insertBudgetSchema>;\n/**\n *\n */\nexport type Budget = typeof budgets.$inferSelect;\n\n/**\n * Monthly budget insert and select types.\n */\nexport type InsertMonthlyBudget = typeof monthlyBudgets.$inferInsert;\n/**\n *\n */\nexport type MonthlyBudget = typeof monthlyBudgets.$inferSelect;\n\n// Relations - temporarily commented out due to drizzle-orm version compatibility\n// Removed moneyFlow relations\n//   }),\n//   residence: one(residences, {\n//   (removed money flow relations)\n//   }),\n// }));\n\n// export const billsRelations = relations(bills, ({ one, many }) => ({\n//   building: one(buildings, {\n//     fields: [bills.buildingId],\n//     references: [buildings.id],\n//   }),\n//   createdBy: one(users, {\n//     fields: [bills.createdBy],\n//     references: [users.id],\n//   }),\n//   originalBill: one(bills, {\n//     fields: [bills.reference],\n//     references: [bills.id],\n//     relationName: 'billReference'\n//   }),\n//   generatedBills: many(bills, {\n//     relationName: 'billReference'\n//   }),\n//   (removed money flow relations),\n// }));\n\n// export const oldBillsRelations = relations(oldBills, ({ one }) => ({\n//   residence: one(residences, {\n//     fields: [oldBills.residenceId],\n//     references: [residences.id],\n//   }),\n//   createdBy: one(users, {\n//     fields: [oldBills.createdBy],\n//     references: [users.id],\n//   }),\n// }));\n\n// export const budgetsRelations = relations(budgets, ({ one }) => ({\n//   building: one(buildings, {\n//     fields: [budgets.buildingId],\n//     references: [buildings.id],\n//   }),\n//   createdBy: one(users, {\n//     fields: [budgets.createdBy],\n//     references: [users.id],\n//   }),\n//   approvedBy: one(users, {\n//     fields: [budgets.approvedBy],\n//     references: [users.id],\n//   }),\n// }));\n\n// export const monthlyBudgetsRelations = relations(monthlyBudgets, ({ one }) => ({\n//   building: one(buildings, {\n//     fields: [monthlyBudgets.buildingId],\n//     references: [buildings.id],\n//   }),\n//   approvedBy: one(users, {\n//     fields: [monthlyBudgets.approvedBy],\n//     references: [users.id],\n//   }),\n//   originalBudget: one(monthlyBudgets, {\n//     fields: [monthlyBudgets.originalBudgetId],\n//     references: [monthlyBudgets.id],\n//     relationName: 'budgetCopy'\n//   }),\n// }));\n"],"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","ignoreList":[]}