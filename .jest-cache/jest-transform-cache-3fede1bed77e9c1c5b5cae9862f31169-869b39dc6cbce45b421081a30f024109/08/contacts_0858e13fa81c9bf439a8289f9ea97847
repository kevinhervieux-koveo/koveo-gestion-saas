10fabb773e76864bd9c73b0cefde6181
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerContactRoutes = registerContactRoutes;
const db_1 = require("../db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const index_1 = require("../auth/index");
/**
 * Register contact routes for managing entity contacts.
 *
 * @param app - Express application instance.
 */
/**
 * RegisterContactRoutes function.
 * @param app
 * @returns Function result.
 */
function registerContactRoutes(app) {
    // Get contacts for a specific entity
    app.get('/api/contacts/:entity/:entityId', index_1.requireAuth, async (req, res) => {
        try {
            const { entity, entityId } = req.params;
            const user = req.user;
            // Validate entity type
            if (!['organization', 'building', 'residence'].includes(entity)) {
                return res.status(400).json({ message: 'Invalid entity type' });
            }
            // Get contacts
            const entityContacts = await db_1.db
                .select()
                .from(schema_1.contacts)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.contacts.entity, entity), (0, drizzle_orm_1.eq)(schema_1.contacts.entityId, entityId), (0, drizzle_orm_1.eq)(schema_1.contacts.isActive, true)));
            res.json(entityContacts);
        }
        catch (error) {
            console.error('❌ Error fetching entity contacts:', error);
            res.status(500).json({ message: 'Failed to fetch contacts' });
        }
    });
    // Get contacts for a residence with access control
    app.get('/api/residences/:residenceId/contacts', index_1.requireAuth, async (req, res) => {
        try {
            const { residenceId } = req.params;
            const user = req.user;
            // Check if user has access to this residence
            if (user.role !== 'admin') {
                const hasAccess = await db_1.db
                    .select()
                    .from(schema_1.residences)
                    .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                    .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.id, residenceId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
                if (hasAccess.length === 0) {
                    return res.status(403).json({ message: 'Access denied' });
                }
            }
            // Get contacts for the residence
            const residenceContacts = await db_1.db
                .select()
                .from(schema_1.contacts)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.contacts.entity, 'residence'), (0, drizzle_orm_1.eq)(schema_1.contacts.entityId, residenceId), (0, drizzle_orm_1.eq)(schema_1.contacts.isActive, true)));
            res.json(residenceContacts);
        }
        catch (error) {
            console.error('❌ Error fetching residence contacts:', error);
            res.status(500).json({ message: 'Failed to fetch residence contacts' });
        }
    });
    // Get contacts with filtering by entity and entityId
    app.get('/api/contacts', index_1.requireAuth, async (req, res) => {
        try {
            const { entity, entityId } = req.query;
            const user = req.user;
            if (!entity || !entityId) {
                // Return empty array instead of error for missing parameters
                return res.json([]);
            }
            // Check permissions for building contacts
            if (entity === 'building') {
                // Anyone can view building contacts for buildings they have access to
                const hasAccess = await db_1.db
                    .select()
                    .from(schema_1.buildings)
                    .innerJoin(schema_1.organizations, (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, schema_1.organizations.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.id, entityId), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
                if (hasAccess.length === 0) {
                    return res.status(404).json({ message: 'Building not found' });
                }
            }
            // Get contacts for the specified entity
            const entityContacts = await db_1.db
                .select()
                .from(schema_1.contacts)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.contacts.entity, entity), (0, drizzle_orm_1.eq)(schema_1.contacts.entityId, entityId), (0, drizzle_orm_1.eq)(schema_1.contacts.isActive, true)));
            res.json(entityContacts);
        }
        catch (error) {
            console.error('❌ Error fetching contacts:', error);
            res.status(500).json({ message: 'Failed to fetch contacts' });
        }
    });
    // Create a new contact
    app.post('/api/contacts', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const validatedData = schema_1.insertContactSchema.parse(req.body);
            // Check permissions based on user role and entity
            const { entity, entityId, name, email, phone, contactCategory } = validatedData;
            // Only managers and admins can add building contacts
            if (entity === 'building' && user.role !== 'admin' && user.role !== 'manager') {
                return res
                    .status(403)
                    .json({ message: 'Only managers and admins can add building contacts' });
            }
            // Verify entity exists based on type
            if (entity === 'residence') {
                const residence = await db_1.db
                    .select()
                    .from(schema_1.residences)
                    .where((0, drizzle_orm_1.eq)(schema_1.residences.id, entityId))
                    .limit(1);
                if (residence.length === 0) {
                    return res.status(400).json({ message: 'Residence not found' });
                }
            }
            else if (entity === 'building') {
                const building = await db_1.db
                    .select()
                    .from(schema_1.buildings)
                    .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, entityId))
                    .limit(1);
                if (building.length === 0) {
                    return res.status(400).json({ message: 'Building not found' });
                }
            }
            // Create the contact
            const [newContact] = await db_1.db
                .insert(schema_1.contacts)
                .values([
                {
                    ...validatedData,
                    entity: validatedData.entity,
                    contactCategory: validatedData.contactCategory,
                },
            ])
                .returning();
            res.status(201).json(newContact);
        }
        catch (error) {
            console.error('❌ Error creating contact:', error);
            res.status(500).json({ message: 'Failed to create contact' });
        }
    });
    // Update a contact
    app.patch('/api/contacts/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const updates = req.body;
            // Get the existing contact
            const existing = await db_1.db.select().from(schema_1.contacts).where((0, drizzle_orm_1.eq)(schema_1.contacts.id, id)).limit(1);
            if (existing.length === 0) {
                return res.status(404).json({ message: 'Contact not found' });
            }
            const contact = existing[0];
            // Check permissions - only managers and admins can edit contacts
            if (user.role !== 'admin' && user.role !== 'manager') {
                return res.status(403).json({ message: 'Access denied' });
            }
            // Update the contact
            const [updatedContact] = await db_1.db
                .update(schema_1.contacts)
                .set({
                ...updates,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema_1.contacts.id, id))
                .returning();
            res.json(updatedContact);
        }
        catch (error) {
            console.error('❌ Error updating contact:', error);
            res.status(500).json({ message: 'Failed to update contact' });
        }
    });
    // Delete a contact
    app.delete('/api/contacts/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            // Get the existing contact
            const existing = await db_1.db.select().from(schema_1.contacts).where((0, drizzle_orm_1.eq)(schema_1.contacts.id, id)).limit(1);
            if (existing.length === 0) {
                return res.status(404).json({ message: 'Contact not found' });
            }
            const contact = existing[0];
            // Check permissions - residents, managers and admins can delete contacts
            if (user.role !== 'admin' && user.role !== 'manager' && user.role !== 'resident') {
                return res.status(403).json({ message: 'Access denied' });
            }
            // Soft delete the contact
            await db_1.db
                .update(schema_1.contacts)
                .set({
                isActive: false,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema_1.contacts.id, id));
            res.json({ message: 'Contact deleted successfully' });
        }
        catch (error) {
            console.error('❌ Error deleting contact:', error);
            res.status(500).json({ message: 'Failed to delete contact' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,