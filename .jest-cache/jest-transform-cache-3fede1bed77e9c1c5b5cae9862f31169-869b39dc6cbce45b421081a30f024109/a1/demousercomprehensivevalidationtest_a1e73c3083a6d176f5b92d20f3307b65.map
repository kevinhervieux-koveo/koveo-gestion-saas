{"file":"/home/runner/workspace/tests/security/demo-user-comprehensive-validation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/security/demo-user-comprehensive-validation.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport express from 'express';\nimport request from 'supertest';\n\n// Mock WebSocket for Jest environment\njest.mock('ws', () => ({\n  __esModule: true,\n  default: class MockWebSocket {}\n}));\n\nimport { registerRoutes } from '../../server/routes';\nimport { db } from '../../server/db';\nimport * as schema from '../../shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport { isOpenDemoUser, canUserPerformWriteOperation } from '../../server/rbac';\n\n/**\n * Comprehensive Demo User Validation Test Suite\n * \n * This test suite focuses on specific scenarios and edge cases for demo user restrictions:\n * - Validates demo users cannot edit, submit, create, or delete anything\n * - Tests specific business logic restrictions\n * - Validates data integrity protection\n * - Tests permission escalation prevention\n */\n\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  registerRoutes(app);\n  return app;\n};\n\ndescribe('Demo User Comprehensive Validation', () => {\n  let app: express.Application;\n  let demoManagerUser: any;\n  let demoTenantUser: any;\n  let demoResidentUser: any;\n  let regularUser: any;\n  let openDemoOrg: any;\n  let regularOrg: any;\n  let testBuilding: any;\n  let testResidence: any;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Clean up test data\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-manager@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-tenant@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-resident@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'regular@test.com'));\n\n    // Create Open Demo organization (view-only restrictions)\n    [openDemoOrg] = await db.insert(schema.organizations).values({\n      name: 'Open Demo',\n      type: 'demo',\n      address: '123 Demo Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n    }).returning();\n\n    // Create regular organization\n    [regularOrg] = await db.insert(schema.organizations).values({\n      name: 'Test Organization',\n      type: 'syndicate',\n      address: '456 Test Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1B 1B1',\n    }).returning();\n\n    // Create demo users with different roles\n    [demoManagerUser] = await db.insert(schema.users).values({\n      username: 'demo-manager-user',\n      email: 'demo-manager@test.com',\n      firstName: 'Demo',\n      lastName: 'Manager',\n      password: '$2b$12$demo.hash',\n      role: 'demo_manager',\n    }).returning();\n\n    [demoTenantUser] = await db.insert(schema.users).values({\n      username: 'demo-tenant-user',\n      email: 'demo-tenant@test.com',\n      firstName: 'Demo',\n      lastName: 'Tenant',\n      password: '$2b$12$demo.hash',\n      role: 'demo_tenant',\n    }).returning();\n\n    [demoResidentUser] = await db.insert(schema.users).values({\n      username: 'demo-resident-user',\n      email: 'demo-resident@test.com',\n      firstName: 'Demo',\n      lastName: 'Resident',\n      password: '$2b$12$demo.hash',\n      role: 'demo_resident',\n    }).returning();\n\n    // Create regular user for comparison\n    [regularUser] = await db.insert(schema.users).values({\n      username: 'regular-user',\n      email: 'regular@test.com',\n      firstName: 'Regular',\n      lastName: 'User',\n      password: '$2b$12$regular.hash',\n      role: 'manager',\n    }).returning();\n\n    // Link users to appropriate organizations\n    await db.insert(schema.userOrganizations).values([\n      { userId: demoManagerUser.id, organizationId: openDemoOrg.id, organizationRole: 'manager' },\n      { userId: demoTenantUser.id, organizationId: openDemoOrg.id, organizationRole: 'tenant' },\n      { userId: demoResidentUser.id, organizationId: openDemoOrg.id, organizationRole: 'resident' },\n      { userId: regularUser.id, organizationId: regularOrg.id, organizationRole: 'manager' },\n    ]);\n\n    // Create test building and residence\n    [testBuilding] = await db.insert(schema.buildings).values({\n      name: 'Test Building',\n      address: '789 Test Avenue',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1C 1C1',\n      organizationId: openDemoOrg.id,\n      buildingType: 'apartment',\n      totalUnits: 10,\n    }).returning();\n\n    [testResidence] = await db.insert(schema.residences).values({\n      buildingId: testBuilding.id,\n      unitNumber: '101',\n      floor: 1,\n      isActive: true,\n    }).returning();\n  });\n\n  afterEach(async () => {\n    // Clean up all test data\n    await db.delete(schema.userOrganizations).where(\n      eq(schema.userOrganizations.organizationId, openDemoOrg?.id)\n    );\n    await db.delete(schema.userOrganizations).where(\n      eq(schema.userOrganizations.organizationId, regularOrg?.id)\n    );\n    await db.delete(schema.residences).where(eq(schema.residences.id, testResidence?.id));\n    await db.delete(schema.buildings).where(eq(schema.buildings.id, testBuilding?.id));\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-manager@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-tenant@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'demo-resident@test.com'));\n    await db.delete(schema.users).where(eq(schema.users.email, 'regular@test.com'));\n    if (openDemoOrg?.id) await db.delete(schema.organizations).where(eq(schema.organizations.id, openDemoOrg.id));\n    if (regularOrg?.id) await db.delete(schema.organizations).where(eq(schema.organizations.id, regularOrg.id));\n  });\n\n  describe('Demo User Role Validation', () => {\n    it('should correctly identify all demo users as Open Demo users', async () => {\n      const demoManagerIsOpenDemo = await isOpenDemoUser(demoManagerUser.id);\n      const demoTenantIsOpenDemo = await isOpenDemoUser(demoTenantUser.id);\n      const demoResidentIsOpenDemo = await isOpenDemoUser(demoResidentUser.id);\n      const regularUserIsOpenDemo = await isOpenDemoUser(regularUser.id);\n\n      expect(demoManagerIsOpenDemo).toBe(true);\n      expect(demoTenantIsOpenDemo).toBe(true);\n      expect(demoResidentIsOpenDemo).toBe(true);\n      expect(regularUserIsOpenDemo).toBe(false);\n\n      console.log('✅ All demo users correctly identified as Open Demo users');\n    });\n\n    it('should prevent all demo users from performing write operations', async () => {\n      const users = [\n        { user: demoManagerUser, role: 'demo_manager' },\n        { user: demoTenantUser, role: 'demo_tenant' },\n        { user: demoResidentUser, role: 'demo_resident' }\n      ];\n\n      for (const { user, role } of users) {\n        const canCreate = await canUserPerformWriteOperation(user.id, 'create');\n        const canUpdate = await canUserPerformWriteOperation(user.id, 'update');\n        const canDelete = await canUserPerformWriteOperation(user.id, 'delete');\n        const canManage = await canUserPerformWriteOperation(user.id, 'manage');\n\n        expect(canCreate).toBe(false);\n        expect(canUpdate).toBe(false);\n        expect(canDelete).toBe(false);\n        expect(canManage).toBe(false);\n\n        console.log(`✅ ${role} cannot perform any write operations`);\n      }\n    });\n  });\n\n  describe('Demo User Data Creation Restrictions', () => {\n    it('should prevent demo users from creating organizations', async () => {\n      const agent = request.agent(app);\n      \n      // Test with demo manager\n      const response = await agent\n        .post('/api/organizations')\n        .send({\n          name: 'New Organization',\n          type: 'syndicate',\n          address: '123 New Street',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H2A 2A2'\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from creating buildings', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .post('/api/buildings')\n        .send({\n          name: 'New Building',\n          address: '456 New Avenue',\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H2B 2B2',\n          organizationId: openDemoOrg.id,\n          buildingType: 'apartment',\n          totalUnits: 20\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from creating residences', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .post('/api/residences')\n        .send({\n          buildingId: testBuilding.id,\n          unitNumber: '201',\n          floor: 2\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from creating documents', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .post('/api/documents')\n        .send({\n          name: 'New Document',\n          category: 'legal',\n          organizationId: openDemoOrg.id,\n          buildingId: testBuilding.id\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n  });\n\n  describe('Demo User Data Modification Restrictions', () => {\n    it('should prevent demo users from updating organizations', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .put(`/api/organizations/${openDemoOrg.id}`)\n        .send({\n          name: 'Updated Demo Organization',\n          phone: '514-555-0123'\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from updating buildings', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .put(`/api/buildings/${testBuilding.id}`)\n        .send({\n          name: 'Updated Test Building',\n          totalUnits: 15\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from updating their own profiles', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .put(`/api/users/${demoManagerUser.id}`)\n        .send({\n          firstName: 'Updated',\n          lastName: 'Name'\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n  });\n\n  describe('Demo User Data Deletion Restrictions', () => {\n    it('should prevent demo users from deleting organizations', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.delete(`/api/organizations/${openDemoOrg.id}`);\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from deleting buildings', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.delete(`/api/buildings/${testBuilding.id}`);\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from deleting residences', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.delete(`/api/residences/${testResidence.id}`);\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from deleting their own accounts', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.delete(`/api/users/${demoManagerUser.id}`);\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n  });\n\n  describe('Demo User File Operations Restrictions', () => {\n    it('should prevent demo users from uploading files', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .post('/api/upload')\n        .attach('file', Buffer.from('test file content'), 'test.txt');\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from uploading documents', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .post('/api/documents/upload')\n        .attach('file', Buffer.from('test document content'), 'document.pdf');\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n  });\n\n  describe('Demo User Permission Escalation Prevention', () => {\n    it('should prevent demo users from changing roles', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .put(`/api/users/${demoTenantUser.id}`)\n        .send({\n          role: 'admin'\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from creating admin users', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .post('/api/users')\n        .send({\n          username: 'new-admin',\n          email: 'admin@example.com',\n          firstName: 'New',\n          lastName: 'Admin',\n          password: 'password123',\n          role: 'admin'\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n\n    it('should prevent demo users from assigning users to organizations', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent\n        .post('/api/organizations/assign-user')\n        .send({\n          userId: regularUser.id,\n          organizationId: openDemoOrg.id,\n          role: 'manager'\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body?.code).toMatch(/DEMO_RESTRICTED|AUTH_REQUIRED/);\n    });\n  });\n\n  describe('Demo User Read Access Validation', () => {\n    it('should allow demo users to view organizations', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.get('/api/organizations');\n      \n      // Should either be successful or fail due to auth (but not demo restrictions)\n      expect([200, 401, 422].includes(response.status)).toBe(true);\n      if (response.status === 403) {\n        expect(response.body?.code).not.toBe('DEMO_RESTRICTED');\n      }\n    });\n\n    it('should allow demo users to view buildings', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.get('/api/buildings');\n      \n      expect([200, 401, 422].includes(response.status)).toBe(true);\n      if (response.status === 403) {\n        expect(response.body?.code).not.toBe('DEMO_RESTRICTED');\n      }\n    });\n\n    it('should allow demo users to view residences', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.get('/api/residences');\n      \n      expect([200, 401, 422].includes(response.status)).toBe(true);\n      if (response.status === 403) {\n        expect(response.body?.code).not.toBe('DEMO_RESTRICTED');\n      }\n    });\n\n    it('should allow demo users to view documents', async () => {\n      const agent = request.agent(app);\n      \n      const response = await agent.get('/api/documents');\n      \n      expect([200, 401, 422].includes(response.status)).toBe(true);\n      if (response.status === 403) {\n        expect(response.body?.code).not.toBe('DEMO_RESTRICTED');\n      }\n    });\n  });\n\n  describe('Edge Cases and Security Boundaries', () => {\n    it('should handle invalid demo user operations gracefully', async () => {\n      const agent = request.agent(app);\n      \n      // Test with malformed requests\n      const malformedRequests = [\n        { method: 'POST', path: '/api/organizations', body: { malformed: 'data' } },\n        { method: 'PUT', path: '/api/buildings/invalid-id', body: {} },\n        { method: 'DELETE', path: '/api/users/nonexistent' }\n      ];\n\n      for (const req of malformedRequests) {\n        let response;\n        switch (req.method) {\n          case 'POST':\n            response = await agent.post(req.path).send(req.body);\n            break;\n          case 'PUT':\n            response = await agent.put(req.path).send(req.body);\n            break;\n          case 'DELETE':\n            response = await agent.delete(req.path);\n            break;\n        }\n\n        // Should be blocked by demo restrictions, not just fail due to malformed data\n        expect([400, 403, 422].includes(response.status)).toBe(true);\n      }\n    });\n\n    it('should maintain demo restrictions under concurrent requests', async () => {\n      const agent = request.agent(app);\n      \n      // Create multiple concurrent write requests\n      const concurrentRequests = Array.from({ length: 5 }, (_, i) => \n        agent.post('/api/organizations').send({\n          name: `Concurrent Org ${i}`,\n          type: 'syndicate',\n          address: `${i} Concurrent St`,\n          city: 'Montreal',\n          province: 'QC',\n          postalCode: 'H3A 3A3'\n        })\n      );\n\n      const responses = await Promise.allSettled(concurrentRequests);\n      \n      // All should be rejected due to demo restrictions\n      responses.forEach((result, index) => {\n        if (result.status === 'fulfilled') {\n          expect([403, 401].includes(result.value.status)).toBe(true);\n        }\n      });\n    });\n  });\n});"],"version":3}