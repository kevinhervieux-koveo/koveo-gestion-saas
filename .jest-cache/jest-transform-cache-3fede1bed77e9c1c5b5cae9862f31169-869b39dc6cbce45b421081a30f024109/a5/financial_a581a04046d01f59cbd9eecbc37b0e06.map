{"file":"/home/runner/workspace/shared/schemas/financial.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/shared/schemas/financial.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  timestamp,\n  uuid,\n  pgEnum,\n  boolean,\n  integer,\n  decimal,\n  date,\n  jsonb,\n  varchar,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\nimport { users } from './core';\nimport { residences, buildings } from './property';\n\n// Financial enums\nexport const billStatusEnum = pgEnum('bill_status', [\n  'draft',\n  'sent',\n  'overdue',\n  'paid',\n  'cancelled',\n]);\n\nexport const oldBillTypeEnum = pgEnum('old_bill_type', [\n  'condo_fees',\n  'special_assessment',\n  'utility',\n  'maintenance',\n  'other',\n]);\n\nexport const billCategoryEnum = pgEnum('bill_category', [\n  'insurance',\n  'maintenance',\n  'salary',\n  'utilities',\n  'cleaning',\n  'security',\n  'landscaping',\n  'professional_services',\n  'administration',\n  'repairs',\n  'supplies',\n  'taxes',\n  'technology',\n  'reserves',\n  'other',\n]);\n\nexport const paymentTypeEnum = pgEnum('payment_type', ['unique', 'recurrent']);\n\nexport const schedulePaymentEnum = pgEnum('schedule_payment', [\n  'weekly',\n  'monthly',\n  'quarterly',\n  'yearly',\n  'custom',\n]);\n\n// Financial tables\n/**\n * Enhanced bills table for tracking financial obligations with advanced scheduling.\n * Supports unique and recurrent payments with custom scheduling options.\n */\nexport const bills = pgTable('bills', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id),\n  billNumber: text('bill_number').notNull().unique(),\n  title: text('title').notNull(),\n  description: text('description'),\n  category: billCategoryEnum('category').notNull(),\n  vendor: text('vendor'), // Company or service provider\n  paymentType: paymentTypeEnum('payment_type').notNull(), // unique or recurrent\n  schedulePayment: schedulePaymentEnum('schedule_payment'), // Only for recurrent payments\n  scheduleCustom: date('schedule_custom').array(), // Custom dates for custom schedules\n  costs: decimal('costs', { precision: 12, scale: 2 }).array().notNull(), // Array of costs for payment plan\n  totalAmount: decimal('total_amount', { precision: 12, scale: 2 }).notNull(),\n  startDate: date('start_date').notNull(), // When the bill series starts\n  endDate: date('end_date'), // For recurrent bills, when they end (optional for ongoing)\n  status: billStatusEnum('status').notNull().default('draft'),\n  documentPath: text('document_path'), // Path to uploaded bill document\n  documentName: text('document_name'), // Original filename\n  isAiAnalyzed: boolean('is_ai_analyzed').default(false),\n  aiAnalysisData: jsonb('ai_analysis_data'), // Store AI-extracted data\n  notes: text('notes'),\n  autoGenerated: boolean('auto_generated').notNull().default(false), // Indicates if this bill was auto-generated\n  reference: varchar('reference').references(() => bills.id), // References the original bill for auto-generated bills\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Legacy bills table - keeping for backward compatibility.\n * Will be migrated to new bills table structure.\n */\nexport const oldBills = pgTable('old_bills', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  residenceId: varchar('residence_id')\n    .notNull()\n    .references(() => residences.id),\n  billNumber: text('bill_number').notNull().unique(),\n  type: oldBillTypeEnum('type').notNull(),\n  description: text('description').notNull(),\n  amount: decimal('amount', { precision: 12, scale: 2 }).notNull(),\n  dueDate: date('due_date').notNull(),\n  issueDate: date('issue_date').notNull(),\n  status: billStatusEnum('status').notNull().default('draft'),\n  notes: text('notes'),\n  lateFeeAmount: decimal('late_fee_amount', { precision: 10, scale: 2 }),\n  discountAmount: decimal('discount_amount', { precision: 10, scale: 2 }),\n  finalAmount: decimal('final_amount', { precision: 12, scale: 2 }).notNull(),\n  paymentReceivedDate: date('payment_received_date'),\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Budgets table for tracking financial planning by building and category.\n * Supports operational, reserve, and special project budgets.\n */\nexport const budgets = pgTable('budgets', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id),\n  year: integer('year').notNull(),\n  name: text('name').notNull(),\n  description: text('description'),\n  category: text('category').notNull(), // 'operational', 'reserve', 'special_project'\n  budgetedAmount: decimal('budgeted_amount', { precision: 12, scale: 2 }).notNull(),\n  actualAmount: decimal('actual_amount', { precision: 12, scale: 2 }).default('0'),\n  variance: decimal('variance', { precision: 12, scale: 2 }).default('0'),\n  approvedBy: varchar('approved_by').references(() => users.id),\n  approvedDate: date('approved_date'),\n  isActive: boolean('is_active').notNull().default(true),\n  createdBy: varchar('created_by')\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Monthly budgets table for detailed monthly tracking of income and spending by building.\n * Automatically populated for each building from construction date to 25 years in the future.\n * Updated monthly on the 1st and supports approval workflow.\n */\nexport const monthlyBudgets = pgTable('monthly_budgets', {\n  id: varchar('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  buildingId: varchar('building_id')\n    .notNull()\n    .references(() => buildings.id),\n  year: integer('year').notNull(),\n  month: integer('month').notNull(), // 1-12\n  incomeTypes: text('income_types').array().notNull(), // Array of income categories from money_flow\n  incomes: decimal('incomes', { precision: 12, scale: 2 }).array().notNull(), // Array of income amounts corresponding to incomeTypes\n  spendingTypes: text('spending_types').array().notNull(), // Array of expense categories from money_flow\n  spendings: decimal('spendings', { precision: 12, scale: 2 }).array().notNull(), // Array of spending amounts corresponding to spendingTypes\n  approved: boolean('approved').notNull().default(false),\n  approvedBy: varchar('approved_by').references(() => users.id),\n  approvedDate: timestamp('approved_date'),\n  originalBudgetId: varchar('original_budget_id').references(() => monthlyBudgets.id), // References the original budget if this is an approved copy\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Insert schemas\n// Removed insertMoneyFlowSchema - money flow table deleted\n\nexport const insertBillSchema = createInsertSchema(bills, {\n  // Custom validations for strict schema compliance\n  billNumber: z.string().min(1, \"Bill number is required\"),\n  title: z.string().min(1, \"Title is required\"),\n  category: z.enum(['insurance', 'maintenance', 'salary', 'utilities', 'cleaning', 'security', 'landscaping', 'professional_services', 'administration', 'repairs', 'supplies', 'taxes', 'technology', 'reserves', 'other']),\n  paymentType: z.enum(['unique', 'recurrent']),\n  schedulePayment: z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),\n  scheduleCustom: z.array(z.coerce.date()).optional().refine(\n    (dates) => !dates || dates.length === 0 || dates.every(date => date instanceof Date && !isNaN(date.getTime())),\n    \"All custom schedule dates must be valid dates\"\n  ),\n  costs: z.array(z.coerce.number().positive(\"All costs must be positive\")).min(1, \"At least one cost is required\"),\n  totalAmount: z.coerce.number().positive(\"Total amount must be positive\"),\n  startDate: z.coerce.date(),\n  endDate: z.coerce.date().optional(),\n  status: z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']).default('draft'),\n  autoGenerated: z.boolean().default(false),\n}).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\nexport const insertOldBillSchema = z.object({\n  residenceId: z.string().uuid(),\n  billNumber: z.string(),\n  type: z.string(),\n  description: z.string().optional(),\n  amount: z.number(),\n  dueDate: z.date(),\n  issueDate: z.date().optional(),\n  status: z.string().default('unpaid'),\n  notes: z.string().optional(),\n  lateFeeAmount: z.number().optional(),\n  discountAmount: z.number().optional(),\n  finalAmount: z.number().optional(),\n  paymentReceivedDate: z.date().optional(),\n  createdBy: z.string().uuid(),\n});\n\nexport const insertBudgetSchema = z.object({\n  buildingId: z.string().uuid(),\n  year: z.number().int(),\n  name: z.string(),\n  description: z.string().optional(),\n  category: z.string(),\n  budgetedAmount: z.number(),\n  actualAmount: z.number().optional(),\n  createdBy: z.string().uuid(),\n});\n\nexport const insertMonthlyBudgetSchema = createInsertSchema(monthlyBudgets).omit({ \n  id: true, \n  createdAt: true, \n  updatedAt: true \n});\n\n// Types\n\n/**\n * Bills insert and select types.\n */\nexport type InsertBill = z.infer<typeof insertBillSchema>;\n/**\n *\n */\nexport type Bill = typeof bills.$inferSelect;\n\n/**\n * Legacy bills types for backward compatibility.\n */\nexport type InsertOldBill = z.infer<typeof insertOldBillSchema>;\n/**\n *\n */\nexport type OldBill = typeof oldBills.$inferSelect;\n\n/**\n * Budget insert and select types.\n */\nexport type InsertBudget = z.infer<typeof insertBudgetSchema>;\n/**\n *\n */\nexport type Budget = typeof budgets.$inferSelect;\n\n/**\n * Monthly budget insert and select types.\n */\nexport type InsertMonthlyBudget = typeof monthlyBudgets.$inferInsert;\n/**\n *\n */\nexport type MonthlyBudget = typeof monthlyBudgets.$inferSelect;\n\n// Relations - temporarily commented out due to drizzle-orm version compatibility\n// Removed moneyFlow relations\n//   }),\n//   residence: one(residences, {\n//   (removed money flow relations)\n//   }),\n// }));\n\n// export const billsRelations = relations(bills, ({ one, many }) => ({\n//   building: one(buildings, {\n//     fields: [bills.buildingId],\n//     references: [buildings.id],\n//   }),\n//   createdBy: one(users, {\n//     fields: [bills.createdBy],\n//     references: [users.id],\n//   }),\n//   originalBill: one(bills, {\n//     fields: [bills.reference],\n//     references: [bills.id],\n//     relationName: 'billReference'\n//   }),\n//   generatedBills: many(bills, {\n//     relationName: 'billReference'\n//   }),\n//   (removed money flow relations),\n// }));\n\n// export const oldBillsRelations = relations(oldBills, ({ one }) => ({\n//   residence: one(residences, {\n//     fields: [oldBills.residenceId],\n//     references: [residences.id],\n//   }),\n//   createdBy: one(users, {\n//     fields: [oldBills.createdBy],\n//     references: [users.id],\n//   }),\n// }));\n\n// export const budgetsRelations = relations(budgets, ({ one }) => ({\n//   building: one(buildings, {\n//     fields: [budgets.buildingId],\n//     references: [buildings.id],\n//   }),\n//   createdBy: one(users, {\n//     fields: [budgets.createdBy],\n//     references: [users.id],\n//   }),\n//   approvedBy: one(users, {\n//     fields: [budgets.approvedBy],\n//     references: [users.id],\n//   }),\n// }));\n\n// export const monthlyBudgetsRelations = relations(monthlyBudgets, ({ one }) => ({\n//   building: one(buildings, {\n//     fields: [monthlyBudgets.buildingId],\n//     references: [buildings.id],\n//   }),\n//   approvedBy: one(users, {\n//     fields: [monthlyBudgets.approvedBy],\n//     references: [users.id],\n//   }),\n//   originalBudget: one(monthlyBudgets, {\n//     fields: [monthlyBudgets.originalBudgetId],\n//     references: [monthlyBudgets.id],\n//     relationName: 'budgetCopy'\n//   }),\n// }));\n"],"version":3}