6de068bd634aaed4343c7cefb22a3c8f
"use strict";
/**
 * Login Functionality Test with Real User Credentials
 * Tests login system with actual user account
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../server/routes");
const db_1 = require("../../server/db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
// Create test server
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('Login Functionality with Real User', () => {
    let app;
    let testUser;
    (0, globals_1.beforeAll)(async () => {
        app = createTestApp();
        // Find existing user or create if needed
        try {
            const [existingUser] = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.email, 'kevin.hervieux@koveo-gestion.com'))
                .limit(1);
            if (existingUser) {
                testUser = existingUser;
                console.log('✅ Using existing test user:', { id: existingUser.id, email: existingUser.email, role: existingUser.role });
            }
            else {
                // Create new user only if it doesn't exist
                const hashedPassword = await bcryptjs_1.default.hash('admin123', 12);
                const [user] = await db_1.db
                    .insert(schema.users)
                    .values({
                    email: 'kevin.hervieux@koveo-gestion.com',
                    username: 'kevin.hervieux',
                    firstName: 'Kevin',
                    lastName: 'Hervieux',
                    role: 'admin',
                    password: hashedPassword,
                    language: 'fr',
                    isActive: true,
                })
                    .returning();
                testUser = user;
                console.log('✅ New test user created:', { id: user.id, email: user.email, role: user.role });
            }
        }
        catch (error) {
            console.error('❌ Error handling test user:', error);
            throw error;
        }
    });
    (0, globals_1.afterAll)(async () => {
        // Keep the user in database for actual login testing
        console.log('📝 Test user kept in database for real login functionality');
    });
    (0, globals_1.describe)('Real User Login Tests', () => {
        (0, globals_1.it)('should successfully login with valid credentials', async () => {
            const loginData = {
                email: 'kevin.hervieux@koveo-gestion.com',
                password: 'admin123',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData)
                .expect(200);
            (0, globals_1.expect)(response.body.message).toBe('Login successful');
            (0, globals_1.expect)(response.body.user).toBeDefined();
            (0, globals_1.expect)(response.body.user.email).toBe('kevin.hervieux@koveo-gestion.com');
            (0, globals_1.expect)(response.body.user.role).toBe('admin');
            // Verify session cookie is set
            (0, globals_1.expect)(response.headers['set-cookie']).toBeDefined();
            const cookie = response.headers['set-cookie'][0];
            (0, globals_1.expect)(cookie).toMatch(/koveo\.sid/);
        });
        (0, globals_1.it)('should fail login with wrong password', async () => {
            const loginData = {
                email: 'kevin.hervieux@koveo-gestion.com',
                password: 'wrongpassword',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData)
                .expect(401);
            (0, globals_1.expect)(response.body.message).toMatch(/invalid.*credentials/i);
        });
        (0, globals_1.it)('should fail login with wrong email', async () => {
            const loginData = {
                email: 'wrong@email.com',
                password: 'admin123',
            };
            const response = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData)
                .expect(401);
            (0, globals_1.expect)(response.body.message).toMatch(/invalid.*credentials/i);
        });
        (0, globals_1.it)('should check user session after login', async () => {
            // First login
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'kevin.hervieux@koveo-gestion.com',
                password: 'admin123',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            // Check auth status with session
            const authResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', cookies)
                .expect(200);
            (0, globals_1.expect)(authResponse.body.email).toBe('kevin.hervieux@koveo-gestion.com');
            (0, globals_1.expect)(authResponse.body.role).toBe('admin');
        });
        (0, globals_1.it)('should logout and clear session', async () => {
            // First login
            const loginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'kevin.hervieux@koveo-gestion.com',
                password: 'admin123',
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            // Logout
            const logoutResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/logout')
                .set('Cookie', cookies)
                .expect(200);
            (0, globals_1.expect)(logoutResponse.body.message).toMatch(/logout.*success/i);
            // Try to access protected endpoint after logout
            const protectedResponse = await (0, supertest_1.default)(app)
                .get('/api/auth/user')
                .set('Cookie', cookies);
            (0, globals_1.expect)(protectedResponse.status).toBe(401);
        });
    });
    (0, globals_1.describe)('Session Management', () => {
        (0, globals_1.it)('should handle multiple concurrent login attempts', async () => {
            const loginData = {
                email: 'kevin.hervieux@koveo-gestion.com',
                password: 'admin123',
            };
            // Create multiple simultaneous login requests
            const loginPromises = Array(3).fill(null).map(() => (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send(loginData));
            const responses = await Promise.all(loginPromises);
            // All should succeed and get unique sessions
            responses.forEach(response => {
                (0, globals_1.expect)(response.status).toBe(200);
                (0, globals_1.expect)(response.headers['set-cookie']).toBeDefined();
            });
            // Verify each got a different session
            const sessionIds = responses.map(r => r.headers['set-cookie'][0]);
            const uniqueSessions = new Set(sessionIds);
            (0, globals_1.expect)(uniqueSessions.size).toBe(3);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,