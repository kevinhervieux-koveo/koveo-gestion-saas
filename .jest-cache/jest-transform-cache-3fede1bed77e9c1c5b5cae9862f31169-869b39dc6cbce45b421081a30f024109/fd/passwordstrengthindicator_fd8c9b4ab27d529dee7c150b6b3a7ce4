905b9a709b3f7421e255ffa31c80733c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordStrengthIndicator = PasswordStrengthIndicator;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const lucide_react_1 = require("lucide-react");
const password_validation_1 = require("@/utils/password-validation");
/**
 * Password Strength Indicator Component.
 *
 * Provides real-time password strength feedback with Quebec French labels
 * and visual indicators for security compliance.
 * @param root0 - Component props object.
 * @param root0.password - Current password value to validate.
 * @param root0.showPassword - Whether password is visible.
 * @param root0.onToggleVisibility - Function to toggle password visibility.
 * @param root0.className - Optional CSS class name.
 * @returns JSX element for password strength indicator.
 */
function PasswordStrengthIndicator({ password, showPassword, onToggleVisibility, className = '', }) {
    const strength = (0, password_validation_1.validatePasswordStrength)(password);
    const criteria = (0, password_validation_1.getPasswordCriteria)(password);
    return ((0, jsx_runtime_1.jsxs)("div", { className: `space-y-3 ${className}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium text-gray-700', children: "Force du mot de passe" }), (0, jsx_runtime_1.jsx)("button", { type: 'button', onClick: onToggleVisibility, className: 'flex items-center text-sm text-gray-500 hover:text-gray-700', "aria-label": showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe', children: showPassword ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4 mr-1' }), "Masquer"] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4 mr-1' }), "Afficher"] })) })] }), password && password.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsx)("span", { className: `text-sm font-medium ${(0, password_validation_1.getPasswordStrengthColor)(strength.score)}`, children: (0, password_validation_1.getPasswordStrengthLabel)(strength.score) }), (0, jsx_runtime_1.jsxs)("span", { className: 'text-xs text-gray-500', children: [strength.score, "/4"] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'w-full bg-gray-200 rounded-full h-2', children: (0, jsx_runtime_1.jsx)("div", { className: `h-2 rounded-full transition-all duration-300 ${(0, password_validation_1.getPasswordStrengthBarColor)(strength.score)}`, style: { width: `${(strength.score / 4) * 100}%` } }) })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'text-sm font-medium text-gray-700 mb-2', children: "Exigences du mot de passe:" }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 gap-1 text-xs', children: [(0, jsx_runtime_1.jsx)(CriteriaItem, { met: criteria.minLength, text: 'Au moins 8 caract\u00E8res' }), (0, jsx_runtime_1.jsx)(CriteriaItem, { met: criteria.hasUpperCase, text: 'Une lettre majuscule' }), (0, jsx_runtime_1.jsx)(CriteriaItem, { met: criteria.hasLowerCase, text: 'Une lettre minuscule' }), (0, jsx_runtime_1.jsx)(CriteriaItem, { met: criteria.hasNumbers, text: 'Un chiffre' }), (0, jsx_runtime_1.jsx)(CriteriaItem, { met: criteria.hasSymbols, text: 'Un symbole (!@#$%^&*)' }), (0, jsx_runtime_1.jsx)(CriteriaItem, { met: criteria.noCommonPatterns, text: '\u00C9viter les mots de passe communs' })] })] }), password &&
                password.length > 0 &&
                strength &&
                strength.feedback &&
                strength.feedback.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-1', children: strength.feedback.map((message, _index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-gray-600 flex items-start', children: [(0, jsx_runtime_1.jsx)("span", { className: 'mr-1', children: "\u2022" }), (0, jsx_runtime_1.jsx)("span", { children: message })] }, _index))) }))] }));
}
/**
 * Displays an individual password criteria item with check/x icon.
 * Shows whether the criterion is met with appropriate styling.
 * @param root0 - The props object.
 * @param root0.met - Whether the password criterion is satisfied.
 * @param root0.text - The text description of the criterion.
 * @returns JSX element for the criteria item.
 */
/**
 * CriteriaItem function.
 * @param root0
 * @param root0.met
 * @param root0.text
 * @returns Function result.
 */
function CriteriaItem({ met, text }) {
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [met ? ((0, jsx_runtime_1.jsx)(lucide_react_1.Check, { className: 'h-3 w-3 text-green-500 flex-shrink-0' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: 'h-3 w-3 text-red-500 flex-shrink-0' })), (0, jsx_runtime_1.jsx)("span", { className: met ? 'text-green-700' : 'text-red-600', children: text })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,