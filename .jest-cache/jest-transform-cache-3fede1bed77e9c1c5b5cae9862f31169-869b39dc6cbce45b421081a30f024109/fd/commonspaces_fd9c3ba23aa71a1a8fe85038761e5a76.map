{"file":"/home/runner/workspace/server/api/common-spaces.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgVA,gEA0/CC;AAz0DD,6CAAiF;AACjF,8BAA2B;AAC3B,kCAAmD;AACnD,6BAAwB;AACxB,uDAAyC;AAEzC,MAAM,EACJ,YAAY,EACZ,QAAQ,EACR,uBAAuB,EACvB,cAAc,EACd,SAAS,EACT,KAAK,EACL,cAAc,EACd,iBAAiB,GAClB,GAAG,MAAM,CAAC;AAEX,qBAAqB;AACrB,MAAM,uBAAuB,GAAG,OAAC,CAAC,MAAM,CAAC;IACvC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;CAC1C,CAAC,CAAC;AAEH,MAAM,mBAAmB,GAAG,OAAC,CAAC,MAAM,CAAC;IACnC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;IAC5C,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE;CAC3C,CAAC,CAAC;AAEH,4BAA4B;AAC5B,MAAM,mBAAmB,GAAG,OAAC,CAAC,MAAM,CAAC;IACnC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACjC,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;CACnE,CAAC,CAAC;AAEH,MAAM,sBAAsB,GAAG,OAAC,CAAC,MAAM,CAAC;IACtC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;CAC9B,CAAC,CAAC;AAEH,MAAM,mBAAmB,GAAG,OAAC,CAAC,MAAM,CAAC;IACnC,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACjC,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAChC,CAAC,CAAC;AAEH,MAAM,uBAAuB,GAAG,OAAC,CAAC,MAAM,CAAC;IACvC,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAClC,UAAU,EAAE,OAAC,CAAC,OAAO,EAAE;IACvB,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC9B,CAAC,CAAC;AAEH,MAAM,uBAAuB,GAAG,OAAC,CAAC,MAAM,CAAC;IACvC,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC;IACrE,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAClC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,kCAAkC,CAAC;IAChE,aAAa,EAAE,OAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;IACxC,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE;IACrD,aAAa,EAAE,OAAC;SACb,MAAM,CAAC;QACN,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,qBAAqB,CAAC;QAC/D,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,qBAAqB,CAAC;KAC9D,CAAC;SACD,QAAQ,EAAE;IACb,YAAY,EAAE,OAAC,CAAC,MAAM,CAAC,OAAC,CAAC,MAAM,EAAE,EAAE,OAAC,CAAC,MAAM,CAAC;QAC1C,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,qBAAqB,CAAC;QAC/D,GAAG,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,qBAAqB,CAAC;KAC9D,CAAC,CAAC,CAAC,QAAQ,EAAE;IACd,cAAc,EAAE,OAAC;SACd,KAAK,CACJ,OAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,CACvF;SACA,QAAQ,EAAE;CACd,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,OAAC,CAAC,MAAM,CAAC;IAClC,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;IAC1B,eAAe,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,mCAAmC;IAClF,UAAU,EAAE,OAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACzC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,4BAA4B;CAC7E,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG,OAAC,CAAC,MAAM,CAAC;IAC7B,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;CAC3B,CAAC,CAAC;AAEH,MAAM,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IAC/B,SAAS,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;CAC7B,CAAC,CAAC;AAEH,MAAM,YAAY,GAAG,OAAC,CAAC,MAAM,CAAC;IAC5B,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE;CAC1B,CAAC,CAAC;AAEH;;;GAGG;AACH,KAAK,UAAU,wBAAwB,CAAC,IAAS;IAC/C,2CAA2C;IAC3C,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QAC1B,MAAM,YAAY,GAAG,MAAM,OAAE;aAC1B,MAAM,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC;aACpC,IAAI,CAAC,SAAS,CAAC;aACf,KAAK,CAAC,IAAA,gBAAE,EAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;QACvC,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAED,sEAAsE;IACtE,MAAM,QAAQ,GAAG,MAAM,OAAE;SACtB,MAAM,CAAC;QACN,cAAc,EAAE,MAAM,CAAC,aAAa,CAAC,EAAE;QACvC,gBAAgB,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI;QAC3C,yBAAyB,EAAE,iBAAiB,CAAC,yBAAyB;KACvE,CAAC;SACD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;SAC1B,SAAS,CAAC,iBAAiB,EAAE,IAAA,gBAAE,EAAC,iBAAiB,CAAC,cAAc,EAAE,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;SAC3F,KAAK,CAAC,IAAA,iBAAG,EAAC,IAAA,gBAAE,EAAC,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,IAAA,gBAAE,EAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAE3F,MAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,gBAAgB,KAAK,OAAO,IAAI,GAAG,CAAC,yBAAyB,CAAC,CAAC;IAElH,IAAI,eAAe,EAAE,CAAC;QACpB,MAAM,YAAY,GAAG,MAAM,OAAE;aAC1B,MAAM,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC;aACpC,IAAI,CAAC,SAAS,CAAC;aACf,KAAK,CAAC,IAAA,gBAAE,EAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;QACvC,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAED,qEAAqE;IACrE,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;QAC5D,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACxB,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;YACvD,MAAM,YAAY,GAAG,MAAM,OAAE;iBAC1B,MAAM,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC;iBACpC,IAAI,CAAC,SAAS,CAAC;iBACf,KAAK,CAAC,IAAA,iBAAG,EAAC,IAAA,qBAAO,EAAC,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE,IAAA,gBAAE,EAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YACvF,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED,iEAAiE;IACjE,MAAM,eAAe,GAAG,MAAM,OAAE;SAC7B,MAAM,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;SACpD,IAAI,CAAC,cAAc,CAAC;SACpB,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,IAAA,gBAAE,EAAC,cAAc,CAAC,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SAClF,KAAK,CAAC,IAAA,iBAAG,EAAC,IAAA,gBAAE,EAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,IAAA,gBAAE,EAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACrF,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;AAClD,CAAC;AAED;;;;;GAKG;AACH,KAAK,UAAU,mBAAmB,CAChC,MAAc,EACd,aAA4B,EAC5B,SAA+B;IAE/B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,IAAI,SAAe,CAAC;IAEpB,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;QAC5B,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;SAAM,CAAC;QACN,SAAS,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,UAAU,GAAG;QACjB,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC;QAC3B,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC;QAChC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC;KACnC,CAAC;IAEF,IAAI,aAAa,EAAE,CAAC;QAClB,UAAU,CAAC,IAAI,CAAC,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,MAAM,YAAY,GAAG,MAAM,OAAE;SAC1B,MAAM,CAAC;QACN,UAAU,EAAE,IAAA,iBAAG,EAAQ,0BAA0B,QAAQ,CAAC,OAAO,MAAM,QAAQ,CAAC,SAAS,WAAW;KACrG,CAAC;SACD,IAAI,CAAC,QAAQ,CAAC;SACd,KAAK,CAAC,IAAA,iBAAG,EAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IAE7B,OAAO,YAAY,CAAC,CAAC,CAAC,EAAE,UAAU,IAAI,CAAC,CAAC;AAC1C,CAAC;AAED;;;;;GAKG;AACH,KAAK,UAAU,kBAAkB,CAC/B,MAAc,EACd,aAAqB,EACrB,eAAuB;IAEvB,6DAA6D;IAC7D,MAAM,UAAU,GAAG,MAAM,OAAE;SACxB,MAAM,EAAE;SACR,IAAI,CAAC,cAAc,CAAC;SACpB,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,EACjC,IAAA,gBAAE,EACA,IAAA,gBAAE,EAAC,cAAc,CAAC,aAAa,EAAE,aAAa,CAAC,EAC/C,IAAA,iBAAG,EAAA,GAAG,cAAc,CAAC,aAAa,UAAU,CAC7C,CACF,CACF;SACA,OAAO,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC,0CAA0C;IAEpF,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC5B,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,gBAAgB;IAChD,CAAC;IAED,2DAA2D;IAC3D,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;IAClC,MAAM,YAAY,GAAG,MAAM,mBAAmB,CAC5C,MAAM,EACN,WAAW,CAAC,aAAa,EACzB,WAAW,CAAC,SAAiC,CAC9C,CAAC;IAEF,MAAM,iBAAiB,GAAG,YAAY,GAAG,eAAe,CAAC;IACzD,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;IAE1E,IAAI,iBAAiB,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;QAC/C,MAAM,WAAW,GAAG,WAAW,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC;QACpF,OAAO;YACL,WAAW,EAAE,KAAK;YAClB,OAAO,EAAE,+CAA+C,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,WAAW,CAAC,UAAU,qBAAqB,WAAW,mBAAmB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,gBAAgB;YAC5M,cAAc;SACf,CAAC;IACJ,CAAC;IAED,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;AAC/C,CAAC;AAED;;;;;;GAMG;AACH,KAAK,UAAU,sBAAsB,CACnC,aAAqB,EACrB,SAAe,EACf,OAAa,EACb,gBAAyB;IAEzB,MAAM,UAAU,GAAG;QACjB,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,aAAa,CAAC;QACzC,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC;QAChC,IAAA,gBAAE;QACA,6CAA6C;QAC7C,IAAA,iBAAG,EAAC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACzE,2CAA2C;QAC3C,IAAA,iBAAG,EAAC,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACrE,mDAAmD;QACnD,IAAA,iBAAG,EAAC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACvE,mDAAmD;QACnD,IAAA,iBAAG,EAAC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CACxE;KACF,CAAC;IAEF,IAAI,gBAAgB,EAAE,CAAC;QACrB,UAAU,CAAC,IAAI,CAAC,IAAA,iBAAG,EAAA,GAAG,QAAQ,CAAC,EAAE,OAAO,gBAAgB,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,MAAM,WAAW,GAAG,MAAM,OAAE;SACzB,MAAM,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC;SAC3B,IAAI,CAAC,QAAQ,CAAC;SACd,KAAK,CAAC,IAAA,iBAAG,EAAC,GAAG,UAAU,CAAC,CAAC;SACzB,KAAK,CAAC,CAAC,CAAC,CAAC;IAEZ,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;AAChC,CAAC;AAED;;;;GAIG;AACH,KAAK,UAAU,aAAa,CAAC,MAAc,EAAE,aAAqB;IAChE,MAAM,WAAW,GAAG,MAAM,OAAE;SACzB,MAAM,CAAC,EAAE,SAAS,EAAE,uBAAuB,CAAC,SAAS,EAAE,CAAC;SACxD,IAAI,CAAC,uBAAuB,CAAC;SAC7B,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC,EAC1C,IAAA,gBAAE,EAAC,uBAAuB,CAAC,aAAa,EAAE,aAAa,CAAC,CACzD,CACF;SACA,KAAK,CAAC,CAAC,CAAC,CAAC;IAEZ,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5D,CAAC;AAED;;;;;GAKG;AACH,SAAS,oBAAoB,CAAC,SAAe,EAAE,OAAa,EAAE,YAAmB;IAC/E,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC/C,OAAO,IAAI,CAAC,CAAC,8CAA8C;IAC7D,CAAC;IAED,MAAM,QAAQ,GAAG,SAAS,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;IAC5E,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;IAExE,wDAAwD;IACxD,IAAI,QAAQ,KAAK,MAAM,EAAE,CAAC;QACxB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC;IAChE,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,KAAK,CAAC,CAAC,gCAAgC;IAChD,CAAC;IAED,MAAM,YAAY,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe;IAC1E,MAAM,UAAU,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEtD,OAAO,YAAY,IAAI,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,QAAQ,CAAC,KAAK,CAAC;AACvE,CAAC;AAED;;;GAGG;AACH,SAAgB,0BAA0B,CAAC,GAAY;IACrD;;OAEG;IACH,GAAG,CAAC,GAAG,CAAC,oBAAoB,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAC3E,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,4BAA4B;YAC5B,MAAM,eAAe,GAAG,uBAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACrE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,0BAA0B;oBACnC,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,WAAW,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAG7C,8BAA8B;YAC9B,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YAEnE,IAAI,qBAAqB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvC,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACtB,CAAC;YAED,mBAAmB;YACnB,MAAM,UAAU,GAAG,CAAC,IAAA,gBAAE,EAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;YAElD,IAAI,WAAW,EAAE,CAAC;gBAChB,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;oBACjD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,OAAO,EAAE,gCAAgC;wBACzC,IAAI,EAAE,0BAA0B;qBACjC,CAAC,CAAC;gBACL,CAAC;gBACD,UAAU,CAAC,IAAI,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;YAC5D,CAAC;iBAAM,CAAC;gBACN,UAAU,CAAC,IAAI,CAAC,IAAA,qBAAO,EAAC,YAAY,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC,CAAC;YAC3E,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,OAAE;iBACpB,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,WAAW,EAAE,YAAY,CAAC,WAAW;gBACrC,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,YAAY,EAAE,SAAS,CAAC,IAAI;gBAC5B,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,QAAQ,EAAE,YAAY,CAAC,QAAQ;gBAC/B,eAAe,EAAE,YAAY,CAAC,eAAe;gBAC7C,iBAAiB,EAAE,IAAA,iBAAG,EAAQ,UAAU,KAAK,CAAC,SAAS,UAAU,KAAK,CAAC,QAAQ,GAAG;gBAClF,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,SAAS,EAAE,YAAY,CAAC,SAAS;gBACjC,SAAS,EAAE,YAAY,CAAC,SAAS;aAClC,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,SAAS,CAAC,SAAS,EAAE,IAAA,gBAAE,EAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;iBAC/D,QAAQ,CAAC,KAAK,EAAE,IAAA,gBAAE,EAAC,YAAY,CAAC,eAAe,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;iBAC3D,KAAK,CAAC,IAAA,iBAAG,EAAC,GAAG,UAAU,CAAC,CAAC;iBACzB,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;YAE9C,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,GAAG,CAAC,GAAG,CAAC,sCAAsC,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAC7F,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,sBAAsB;YACtB,MAAM,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,kBAAkB;oBAC3B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,eAAe,GAAG,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,0BAA0B;oBACnC,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YACzC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAEtD,yCAAyC;YACzC,MAAM,KAAK,GAAG,MAAM,OAAE;iBACnB,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,UAAU,EAAE,YAAY,CAAC,UAAU;aACpC,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACnC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,wBAAwB;oBACjC,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gBACzD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oCAAoC;oBAC7C,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,yBAAyB;YACzB,MAAM,UAAU,GAAG,CAAC,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC;YAEzD,IAAI,UAAU,EAAE,CAAC;gBACf,UAAU,CAAC,IAAI,CAAC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACjE,CAAC;YAED,IAAI,QAAQ,EAAE,CAAC;gBACb,UAAU,CAAC,IAAI,CAAC,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC7D,CAAC;YAED,MAAM,aAAa,GAAG,MAAM,OAAE;iBAC3B,MAAM,CAAC;gBACN,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,aAAa,EAAE,QAAQ,CAAC,aAAa;gBACrC,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,QAAQ,EAAE,IAAA,iBAAG,EAAQ,UAAU,KAAK,CAAC,SAAS,UAAU,KAAK,CAAC,QAAQ,GAAG;gBACzE,SAAS,EAAE,KAAK,CAAC,KAAK;gBACtB,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,SAAS,EAAE,QAAQ,CAAC,SAAS;aAC9B,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,SAAS,CAAC,KAAK,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;iBAC/C,KAAK,CAAC,IAAA,iBAAG,EAAC,GAAG,UAAU,CAAC,CAAC;iBACzB,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAE/B,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YACnD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,0BAA0B;gBACnC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,GAAG,CAAC,IAAI,CAAC,sCAAsC,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAC9F,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,+BAA+B;YAC/B,MAAM,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,kBAAkB;oBAC3B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YAClD,MAAM,cAAc,GAAG,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/D,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACjE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,sBAAsB;oBAC/B,MAAM,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM;iBACpC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YACzC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,cAAc,CAAC,IAAI,CAAC;YAErD,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;YACvC,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEnC,sBAAsB;YACtB,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;gBACzB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oCAAoC;oBAC7C,IAAI,EAAE,oBAAoB;iBAC3B,CAAC,CAAC;YACL,CAAC;YAED,oFAAoF;YACpF,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAE/D,IAAI,SAAS,GAAG,cAAc,EAAE,CAAC;gBAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,oBAAoB;iBAC3B,CAAC,CAAC;YACL,CAAC;YAED,2BAA2B;YAC3B,MAAM,KAAK,GAAG,MAAM,OAAE;iBACnB,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,YAAY,EAAE,YAAY,CAAC,YAAY;aACxC,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACnC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,wBAAwB;oBACjC,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAE7B,+BAA+B;YAC/B,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;gBAC9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,qCAAqC;oBAC9C,IAAI,EAAE,gBAAgB;iBACvB,CAAC,CAAC;YACL,CAAC;YAED,gCAAgC;YAChC,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC5D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oCAAoC;oBAC7C,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,2BAA2B;YAC3B,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YACtD,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yCAAyC;oBAClD,IAAI,EAAE,cAAc;iBACrB,CAAC,CAAC;YACL,CAAC;YAED,sBAAsB;YACtB,IACE,WAAW,CAAC,YAAY;gBACxB,CAAC,oBAAoB,CAAC,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC,YAAqB,CAAC,EAC5E,CAAC;gBACD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,uCAAuC;oBAChD,IAAI,EAAE,uBAAuB;iBAC9B,CAAC,CAAC;YACL,CAAC;YAED,iCAAiC;YACjC,MAAM,UAAU,GAAG,MAAM,sBAAsB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7E,IAAI,UAAU,EAAE,CAAC;gBACf,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,6BAA6B;oBACtC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,2BAA2B;YAC3B,MAAM,oBAAoB,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;YAC1F,MAAM,cAAc,GAAG,MAAM,kBAAkB,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,oBAAoB,CAAC,CAAC;YAExF,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;gBAChC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,cAAc,CAAC,OAAO;oBAC/B,IAAI,EAAE,qBAAqB;oBAC3B,cAAc,EAAE,cAAc,CAAC,cAAc;iBAC9C,CAAC,CAAC;YACL,CAAC;YAED,iBAAiB;YACjB,MAAM,UAAU,GAAG,MAAM,OAAE;iBACxB,MAAM,CAAC,QAAQ,CAAC;iBAChB,MAAM,CAAC;gBACN,aAAa,EAAE,OAAO;gBACtB,MAAM,EAAE,IAAI,CAAC,EAAE;gBACf,SAAS;gBACT,OAAO;gBACP,MAAM,EAAE,WAAW;aACpB,CAAC;iBACD,SAAS,EAAE,CAAC;YAEf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,8BAA8B;gBACvC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;aACvB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAClD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,0BAA0B;gBACnC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,GAAG,CAAC,GAAG,CAAC,sCAAsC,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAC7F,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,sBAAsB;YACtB,MAAM,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,kBAAkB;oBAC3B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,eAAe,GAAG,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,0BAA0B;oBACnC,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YACzC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAE5D,qCAAqC;YACrC,MAAM,KAAK,GAAG,MAAM,OAAE;iBACnB,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,QAAQ,EAAE,YAAY,CAAC,QAAQ;aAChC,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACnC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,wBAAwB;oBACjC,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAE7B,gCAAgC;YAChC,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC5D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oCAAoC;oBAC7C,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,4CAA4C;YAC5C,MAAM,UAAU,GAAG;gBACjB,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC;gBACnC,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC;gBAChC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC7C,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC1C,CAAC;YAEF,MAAM,aAAa,GAAG,MAAM,OAAE;iBAC3B,MAAM,CAAC;gBACN,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,QAAQ,EAAE,IAAA,iBAAG,EAAQ,UAAU,KAAK,CAAC,SAAS,UAAU,KAAK,CAAC,QAAQ,GAAG;gBACzE,SAAS,EAAE,KAAK,CAAC,KAAK;gBACtB,QAAQ,EAAE,KAAK,CAAC,IAAI;aACrB,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,SAAS,CAAC,KAAK,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;iBAC/C,KAAK,CAAC,IAAA,iBAAG,EAAC,GAAG,UAAU,CAAC,CAAC;iBACzB,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAE/B,wBAAwB;YACxB,MAAM,cAAc,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEhE,wCAAwC;YACxC,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;gBAC7C,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE;gBAC1C,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE;gBACtC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,QAAQ,EAAE,cAAc,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc;gBAC1F,SAAS,EAAE,cAAc,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI;gBAClF,YAAY,EAAE,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE;gBACxC,OAAO,EAAE,OAAO;gBAChB,SAAS,EAAE,WAAW,CAAC,IAAI;gBAC3B,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC3B,CAAC,CAAC,CAAC;YAEJ,+BAA+B;YAC/B,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC;YACpC,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBAC9C,MAAM,QAAQ,GACZ,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;oBACzE,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;gBACnB,OAAO,GAAG,GAAG,QAAQ,CAAC;YACxB,CAAC,EAAE,CAAC,CAAC,CAAC;YACN,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;YAE9D,0BAA0B;YAC1B,MAAM,YAAY,GAAG;gBACnB,KAAK,EAAE;oBACL,EAAE,EAAE,WAAW,CAAC,EAAE;oBAClB,IAAI,EAAE,WAAW,CAAC,IAAI;oBACtB,YAAY,EAAE,WAAW,CAAC,YAAY;oBACtC,YAAY,EAAE,WAAW,CAAC,YAAY;iBACvC;gBACD,QAAQ,EAAE;oBACR,IAAI;oBACJ,SAAS,EAAE,UAAU;oBACrB,OAAO,EAAE,QAAQ;oBACjB,MAAM;iBACP;gBACD,WAAW,EAAE;oBACX,cAAc;oBACd,iBAAiB,EAAE,WAAW,CAAC,YAAY,IAAI,CAAC,CAAC,MAAM,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACxF;gBACD,OAAO,EAAE;oBACP,aAAa;oBACb,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;oBAC5C,WAAW;iBACZ;aACF,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,GAAG,CAAC,GAAG,CAAC,gCAAgC,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QACvF,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YAEtB,iEAAiE;YACjE,MAAM,YAAY,GAAG,MAAM,OAAE;iBAC1B,MAAM,CAAC;gBACN,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,aAAa,EAAE,QAAQ,CAAC,aAAa;gBACrC,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,eAAe,EAAE,YAAY,CAAC,IAAI;gBAClC,YAAY,EAAE,SAAS,CAAC,IAAI;gBAC5B,eAAe,EAAE,SAAS,CAAC,OAAO;aACnC,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,SAAS,CAAC,YAAY,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;iBACpE,SAAS,CAAC,SAAS,EAAE,IAAA,gBAAE,EAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;iBAC/D,KAAK,CAAC,IAAA,iBAAG,EAAC,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;iBAC1E,OAAO,CAAC,IAAA,kBAAI,EAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YAErC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzB,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,+BAA+B;gBACxC,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAClE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;OAEG;IACH,GAAG,CAAC,MAAM,CACR,wCAAwC,EACxC,kBAAW,EACX,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAChC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,sBAAsB;YACtB,MAAM,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oBAAoB;oBAC7B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,SAAS,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAE3C,sBAAsB;YACtB,MAAM,OAAO,GAAG,MAAM,OAAE;iBACrB,MAAM,CAAC;gBACN,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,aAAa,EAAE,QAAQ,CAAC,aAAa;gBACrC,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,MAAM,EAAE,QAAQ,CAAC,MAAM;aACxB,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,SAAS,CAAC,YAAY,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;iBACpE,KAAK,CAAC,IAAA,gBAAE,EAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;iBACjC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACzB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,mBAAmB;oBAC5B,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,cAAc,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YAElC,qGAAqG;YACrG,IAAI,SAAS,GAAG,KAAK,CAAC;YAEtB,IAAI,cAAc,CAAC,MAAM,KAAK,IAAI,CAAC,EAAE,EAAE,CAAC;gBACtC,SAAS,GAAG,IAAI,CAAC,CAAC,6CAA6C;YACjE,CAAC;iBAAM,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBACpD,gEAAgE;gBAChE,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;gBACnE,SAAS,GAAG,qBAAqB,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YACxE,CAAC;YAED,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,mCAAmC;oBAC5C,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,qCAAqC;YACrC,MAAM,OAAE;iBACL,MAAM,CAAC,QAAQ,CAAC;iBAChB,GAAG,CAAC;gBACH,MAAM,EAAE,WAAW;gBACnB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;iBACD,KAAK,CAAC,IAAA,gBAAE,EAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC;YAErC,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,gCAAgC;aAC1C,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,0BAA0B;gBACnC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAEF;;OAEG;IACH,GAAG,CAAC,GAAG,CACL,mCAAmC,EACnC,kBAAW,EACX,IAAA,kBAAW,EAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,EACjC,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAChC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,sBAAsB;YACtB,MAAM,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,kBAAkB;oBAC3B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAEzC,wBAAwB;YACxB,MAAM,KAAK,GAAG,MAAM,OAAE;iBACnB,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,IAAI,EAAE,YAAY,CAAC,IAAI;aACxB,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACnC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,wBAAwB;oBACjC,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gBACzD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oCAAoC;oBAC7C,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,gCAAgC;YAChC,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;YAErD,MAAM,KAAK,GAAG,MAAM,OAAE;iBACnB,MAAM,CAAC;gBACN,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,QAAQ,EAAE,IAAA,iBAAG,EAAQ,UAAU,KAAK,CAAC,SAAS,UAAU,KAAK,CAAC,QAAQ,GAAG;gBACzE,SAAS,EAAE,KAAK,CAAC,KAAK;gBACtB,UAAU,EAAE,IAAA,iBAAG,EAAQ,0BAA0B,QAAQ,CAAC,OAAO,MAAM,QAAQ,CAAC,SAAS,WAAW;gBACpG,aAAa,EAAE,IAAA,iBAAG,EAAQ,SAAS,QAAQ,CAAC,EAAE,GAAG;aAClD,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,SAAS,CAAC,KAAK,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;iBAC/C,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,EACnC,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,EAChC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,CAAC,CACpC,CACF;iBACA,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC;iBACtE,OAAO,CACN,IAAA,kBAAI,EACF,IAAA,iBAAG,EAAQ,0BAA0B,QAAQ,CAAC,OAAO,MAAM,QAAQ,CAAC,SAAS,WAAW,CACzF,CACF,CAAC;YAEJ,MAAM,UAAU,GAAG,MAAM,OAAE;iBACxB,MAAM,CAAC;gBACN,aAAa,EAAE,IAAA,iBAAG,EAAQ,SAAS,QAAQ,CAAC,EAAE,GAAG;gBACjD,UAAU,EAAE,IAAA,iBAAG,EAAQ,0BAA0B,QAAQ,CAAC,OAAO,MAAM,QAAQ,CAAC,SAAS,WAAW;gBACpG,WAAW,EAAE,IAAA,iBAAG,EAAQ,kBAAkB,QAAQ,CAAC,MAAM,GAAG;aAC7D,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,EACnC,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,EAChC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,CAAC,CACpC,CACF,CAAC;YAEJ,GAAG,CAAC,IAAI,CAAC;gBACP,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;gBACxB,MAAM,EAAE,gBAAgB;gBACxB,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;gBACtB,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,kCAAkC;gBAC3C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAEF;;OAEG;IACH,GAAG,CAAC,IAAI,CACN,+CAA+C,EAC/C,kBAAW,EACX,IAAA,kBAAW,EAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,EACjC,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAChC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,+BAA+B;YAC/B,MAAM,eAAe,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC3D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,iBAAiB;oBAC1B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACnD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,cAAc,GAAG,uBAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAC5B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,0BAA0B;oBACnC,MAAM,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBAClD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,MAAM,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YACxC,MAAM,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,cAAc,CAAC,IAAI,CAAC;YAEpE,8BAA8B;YAC9B,MAAM,UAAU,GAAG,MAAM,OAAE;iBACxB,MAAM,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;iBACxB,IAAI,CAAC,KAAK,CAAC;iBACX,KAAK,CAAC,IAAA,gBAAE,EAAC,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;iBAC3B,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,gBAAgB;oBACzB,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,mDAAmD;YACnD,MAAM,KAAK,GAAG,MAAM,OAAE;iBACnB,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,UAAU,EAAE,YAAY,CAAC,UAAU;aACpC,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;iBAC3C,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,wBAAwB;oBACjC,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gBACzD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oCAAoC;oBAC7C,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,sCAAsC;YACtC,MAAM,mBAAmB,GAAG,MAAM,OAAE;iBACjC,MAAM,CAAC,EAAE,EAAE,EAAE,uBAAuB,CAAC,EAAE,EAAE,CAAC;iBAC1C,IAAI,CAAC,uBAAuB,CAAC;iBAC7B,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC,EAC1C,IAAA,gBAAE,EAAC,uBAAuB,CAAC,aAAa,EAAE,eAAe,CAAC,CAC3D,CACF;iBACA,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACnC,8BAA8B;gBAC9B,MAAM,OAAE;qBACL,MAAM,CAAC,uBAAuB,CAAC;qBAC/B,GAAG,CAAC;oBACH,SAAS,EAAE,UAAU;oBACrB,MAAM;oBACN,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC;qBACD,KAAK,CAAC,IAAA,gBAAE,EAAC,uBAAuB,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtE,CAAC;iBAAM,CAAC;gBACN,yBAAyB;gBACzB,MAAM,OAAE,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,MAAM,CAAC;oBAC9C,MAAM;oBACN,aAAa,EAAE,eAAe;oBAC9B,SAAS,EAAE,UAAU;oBACrB,MAAM;iBACP,CAAC,CAAC;YACL,CAAC;YAED,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,QAAQ,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,gBAAgB,qBAAqB;aACrF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAEF;;OAEG;IACH,GAAG,CAAC,IAAI,CACN,oBAAoB,EACpB,kBAAW,EACX,IAAA,kBAAW,EAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,EACjC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;QACpC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,wBAAwB;YACxB,MAAM,gBAAgB,GAAG,uBAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACrE,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;gBAC9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,sBAAsB;oBAC/B,MAAM,EAAE,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACpD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,YAAY,EAAE,cAAc,EAAE,GAC5G,gBAAgB,CAAC,IAAI,CAAC;YAExB,4CAA4C;YAC5C,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;gBACjD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oEAAoE;oBAC7E,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,uCAAuC;YACvC,MAAM,QAAQ,GAAG,MAAM,OAAE;iBACtB,MAAM,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,CAAC;iBAClD,IAAI,CAAC,SAAS,CAAC;iBACf,KAAK,CAAC,IAAA,iBAAG,EAAC,IAAA,gBAAE,EAAC,SAAS,CAAC,EAAE,EAAE,WAAW,CAAC,EAAE,IAAA,gBAAE,EAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;iBACvE,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC1B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,gCAAgC;oBACzC,IAAI,EAAE,oBAAoB;iBAC3B,CAAC,CAAC;YACL,CAAC;YAED,sEAAsE;YACtE,MAAM,aAAa,GAAG,MAAM,OAAE;iBAC3B,MAAM,CAAC,EAAE,EAAE,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC;iBAC/B,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,iBAAG,EAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,IAAA,gBAAE,EAAC,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;iBACjF,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,+DAA+D;oBACxE,IAAI,EAAE,gBAAgB;iBACvB,CAAC,CAAC;YACL,CAAC;YAED,8BAA8B;YAC9B,MAAM,QAAQ,GAAG,MAAM,OAAE;iBACtB,MAAM,CAAC,YAAY,CAAC;iBACpB,MAAM,CAAC;gBACN,IAAI;gBACJ,WAAW,EAAE,WAAW,IAAI,IAAI;gBAChC,UAAU,EAAE,WAAW;gBACvB,YAAY,EAAE,aAAa;gBAC3B,QAAQ,EAAE,QAAQ,IAAI,IAAI;gBAC1B,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACxF,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;wBACjE,GAAG;wBACH,IAAI,EAAE,KAAK,CAAC,KAAK;wBACjB,KAAK,EAAE,KAAK,CAAC,GAAG;qBACjB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;gBACvB,aAAa,EAAE,cAAc,IAAI,IAAI;aACtC,CAAC;iBACD,SAAS,EAAE,CAAC;YAEf,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,gBAAgB,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAEnF,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAE;oBACL,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;oBAClB,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;oBACtB,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW;oBACpC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU;oBAClC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI;oBAC9B,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY;oBACtC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ;oBAC9B,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY;oBACtC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS;iBACjC;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAEF;;OAEG;IACH,GAAG,CAAC,GAAG,CACL,6BAA6B,EAC7B,kBAAW,EACX,IAAA,kBAAW,EAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,EACjC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;QACpC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,sBAAsB;YACtB,MAAM,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,kBAAkB;oBAC3B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM;iBACrC,CAAC,CAAC;YACL,CAAC;YAED,wBAAwB;YACxB,MAAM,gBAAgB,GAAG,uBAAuB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACrE,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;gBAC9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,sBAAsB;oBAC/B,MAAM,EAAE,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACpD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,OAAO,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YACzC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,YAAY,EAAE,cAAc,EAAE,GAC5G,gBAAgB,CAAC,IAAI,CAAC;YAExB,4CAA4C;YAC5C,MAAM,aAAa,GAAG,MAAM,OAAE;iBAC3B,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,UAAU,EAAE,YAAY,CAAC,UAAU;aACpC,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACnC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC/B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,wBAAwB;oBACjC,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,4CAA4C;YAC5C,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gBACjE,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oEAAoE;oBAC7E,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,0BAA0B;YAC1B,MAAM,YAAY,GAAG,MAAM,OAAE;iBAC1B,MAAM,CAAC,YAAY,CAAC;iBACpB,GAAG,CAAC;gBACH,IAAI;gBACJ,WAAW,EAAE,WAAW,IAAI,IAAI;gBAChC,UAAU,EAAE,WAAW;gBACvB,YAAY,EAAE,aAAa;gBAC3B,QAAQ,EAAE,QAAQ,IAAI,IAAI;gBAC1B,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBACxF,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;wBACjE,GAAG;wBACH,IAAI,EAAE,KAAK,CAAC,KAAK;wBACjB,KAAK,EAAE,KAAK,CAAC,GAAG;qBACjB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;gBACvB,aAAa,EAAE,cAAc,IAAI,IAAI;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;iBACD,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;iBACnC,SAAS,EAAE,CAAC;YAEf,OAAO,CAAC,GAAG,CAAC,2BAA2B,IAAI,EAAE,CAAC,CAAC;YAE/C,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAE;oBACL,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE;oBACtB,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;oBAC1B,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW;oBACxC,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU;oBACtC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY;oBAC1C,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,QAAQ;oBAClC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY;oBAC1C,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,aAAa;oBAC5C,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS;iBACrC;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAEF;;OAEG;IACH,GAAG,CAAC,IAAI,CACN,8CAA8C,EAC9C,kBAAW,EACX,IAAA,kBAAW,EAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,EACjC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;QACpC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,sBAAsB;YACtB,MAAM,eAAe,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC3D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,iBAAiB;oBAC1B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACnD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,wBAAwB;YACxB,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChE,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;gBAC9B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,MAAM,EAAE,gBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACpD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,MAAM,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YACxC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC;YAEpF,qBAAqB;YACrB,MAAM,UAAU,GAAG,MAAM,OAAE;iBACxB,MAAM,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC;iBAC9E,IAAI,CAAC,KAAK,CAAC;iBACX,KAAK,CAAC,IAAA,gBAAE,EAAC,KAAK,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;iBAC3B,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,gBAAgB;oBACzB,IAAI,EAAE,gBAAgB;iBACvB,CAAC,CAAC;YACL,CAAC;YAED,0EAA0E;YAC1E,IAAI,eAAe,EAAE,CAAC;gBACpB,MAAM,KAAK,GAAG,MAAM,OAAE;qBACnB,MAAM,CAAC;oBACN,EAAE,EAAE,YAAY,CAAC,EAAE;oBACnB,IAAI,EAAE,YAAY,CAAC,IAAI;oBACvB,UAAU,EAAE,YAAY,CAAC,UAAU;iBACpC,CAAC;qBACD,IAAI,CAAC,YAAY,CAAC;qBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;qBAC3C,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEZ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,OAAO,EAAE,wBAAwB;wBACjC,IAAI,EAAE,iBAAiB;qBACxB,CAAC,CAAC;gBACL,CAAC;gBAED,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;gBACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;oBACzD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,OAAO,EAAE,oCAAoC;wBAC7C,IAAI,EAAE,0BAA0B;qBACjC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;YAED,uCAAuC;YACvC,MAAM,aAAa,GAAG,MAAM,OAAE;iBAC3B,MAAM,CAAC,EAAE,EAAE,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC;iBACjC,IAAI,CAAC,cAAc,CAAC;iBACpB,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,EACjC,eAAe;gBACb,CAAC,CAAC,IAAA,gBAAE,EAAC,cAAc,CAAC,aAAa,EAAE,eAAe,CAAC;gBACnD,CAAC,CAAC,IAAA,iBAAG,EAAA,GAAG,cAAc,CAAC,aAAa,UAAU,EAChD,IAAA,gBAAE,EAAC,cAAc,CAAC,SAAS,EAAE,UAAU,CAAC,CACzC,CACF;iBACA,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC7B,wBAAwB;gBACxB,MAAM,OAAE;qBACL,MAAM,CAAC,cAAc,CAAC;qBACtB,GAAG,CAAC;oBACH,UAAU,EAAE,WAAW;oBACvB,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB,CAAC;qBACD,KAAK,CAAC,IAAA,gBAAE,EAAC,cAAc,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,CAAC;iBAAM,CAAC;gBACN,mBAAmB;gBACnB,MAAM,OAAE,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC;oBACrC,MAAM;oBACN,aAAa,EAAE,eAAe,IAAI,IAAI;oBACtC,SAAS,EAAE,UAAU;oBACrB,UAAU,EAAE,WAAW;iBACxB,CAAC,CAAC;YACL,CAAC;YAED,OAAO,CAAC,GAAG,CACT,6BAA6B,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,KAAK,WAAW,SAAS,UAAU,EAAE,CACpH,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC;gBACP,OAAO,EAAE,6BAA6B;gBACtC,IAAI,EAAE;oBACJ,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;oBACpB,IAAI,EAAE,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;oBAC5D,SAAS,EAAE,UAAU;oBACrB,UAAU,EAAE,WAAW;oBACvB,OAAO,EAAE,eAAe;iBACzB;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,0BAA0B;gBACnC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAEF;;OAEG;IACH,GAAG,CAAC,GAAG,CACL,8CAA8C,EAC9C,kBAAW,EACX,IAAA,kBAAW,EAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,EACjC,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,EAAE;QACpC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACtB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAE9B,yBAAyB;YACzB,MAAM,MAAM,GAAG,MAAM,OAAE;iBACpB,MAAM,CAAC;gBACN,EAAE,EAAE,cAAc,CAAC,EAAE;gBACrB,MAAM,EAAE,cAAc,CAAC,MAAM;gBAC7B,aAAa,EAAE,cAAc,CAAC,aAAa;gBAC3C,SAAS,EAAE,YAAY,CAAC,IAAI;gBAC5B,SAAS,EAAE,cAAc,CAAC,SAAS;gBACnC,UAAU,EAAE,cAAc,CAAC,UAAU;gBACrC,SAAS,EAAE,cAAc,CAAC,SAAS;gBACnC,SAAS,EAAE,cAAc,CAAC,SAAS;aACpC,CAAC;iBACD,IAAI,CAAC,cAAc,CAAC;iBACpB,QAAQ,CAAC,YAAY,EAAE,IAAA,gBAAE,EAAC,cAAc,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;iBACzE,KAAK,CAAC,IAAA,gBAAE,EAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;iBACxC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;YAEnE,yCAAyC;YACzC,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CACvC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBACzB,MAAM,YAAY,GAAG,MAAM,mBAAmB,CAC5C,MAAM,EACN,KAAK,CAAC,aAAa,EACnB,KAAK,CAAC,SAAiC,CACxC,CAAC;gBAEF,OAAO;oBACL,GAAG,KAAK;oBACR,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC,GAAG,GAAG;oBAClD,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,UAAU,GAAG,YAAY,CAAC;iBAC7D,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC;gBACP,MAAM,EAAE,eAAe;aACxB,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;YACtD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,6BAA6B;gBACtC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;IAEF;;;OAGG;IACH,GAAG,CAAC,GAAG,CAAC,kCAAkC,EAAE,kBAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QACzF,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,eAAe,GAAG,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,mCAAmC;oBAC5C,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACnD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAE5D,wCAAwC;YACxC,MAAM,YAAY,GAAG,MAAM,OAAE;iBAC1B,MAAM,CAAC;gBACN,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,SAAS,EAAE,YAAY,CAAC,IAAI;gBAC5B,OAAO,EAAE,YAAY,CAAC,EAAE;gBACxB,YAAY,EAAE,SAAS,CAAC,IAAI;gBAC5B,UAAU,EAAE,SAAS,CAAC,EAAE;aACzB,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,SAAS,CAAC,YAAY,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;iBACpE,SAAS,CAAC,SAAS,EAAE,IAAA,gBAAE,EAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;iBAC/D,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,EAC5B,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,EAChC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,EAC7C,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAC1C,CACF;iBACA,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAE/B,GAAG,CAAC,IAAI,CAAC;gBACP,IAAI,EAAE;oBACJ,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAC1C,IAAI,EAAE,IAAI,CAAC,IAAI;iBAChB;gBACD,QAAQ,EAAE;oBACR,IAAI;oBACJ,SAAS,EAAE,UAAU;oBACrB,OAAO,EAAE,QAAQ;oBACjB,QAAQ,EAAE,YAAY;iBACvB;gBACD,OAAO,EAAE;oBACP,aAAa,EAAE,YAAY,CAAC,MAAM;oBAClC,UAAU,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;wBACjD,MAAM,QAAQ,GACZ,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;4BAC7E,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;wBACnB,OAAO,KAAK,GAAG,QAAQ,CAAC;oBAC1B,CAAC,EAAE,CAAC,CAAC;iBACN;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;YACxD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,+BAA+B;gBACxC,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH;;;OAGG;IACH,GAAG,CAAC,GAAG,CACL,kDAAkD,EAClD,kBAAW,EACX,IAAA,kBAAW,EAAC,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,EACjC,KAAK,EAAE,GAAQ,EAAE,GAAa,EAAE,EAAE;QAChC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,yBAAyB;oBAClC,IAAI,EAAE,eAAe;iBACtB,CAAC,CAAC;YACL,CAAC;YAED,MAAM,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC1F,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,qBAAqB;oBAC9B,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACnD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,eAAe,GAAG,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACjE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,mCAAmC;oBAC5C,MAAM,EAAE,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACnD,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;wBAC3B,OAAO,EAAE,KAAK,CAAC,OAAO;qBACvB,CAAC,CAAC;iBACJ,CAAC,CAAC;YACL,CAAC;YAED,MAAM,EAAE,UAAU,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAC5C,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC;YAE5D,wBAAwB;YACxB,MAAM,qBAAqB,GAAG,MAAM,wBAAwB,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBAChD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,gCAAgC;oBACzC,IAAI,EAAE,0BAA0B;iBACjC,CAAC,CAAC;YACL,CAAC;YAED,uBAAuB;YACvB,MAAM,QAAQ,GAAG,MAAM,OAAE;iBACtB,MAAM,CAAC;gBACN,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,OAAO,EAAE,SAAS,CAAC,OAAO;aAC3B,CAAC;iBACD,IAAI,CAAC,SAAS,CAAC;iBACf,KAAK,CAAC,IAAA,gBAAE,EAAC,SAAS,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;iBACnC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEZ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC1B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,OAAO,EAAE,oBAAoB;oBAC7B,IAAI,EAAE,WAAW;iBAClB,CAAC,CAAC;YACL,CAAC;YAED,iEAAiE;YACjE,MAAM,gBAAgB,GAAG,MAAM,OAAE;iBAC9B,MAAM,CAAC;gBACN,EAAE,EAAE,QAAQ,CAAC,EAAE;gBACf,SAAS,EAAE,QAAQ,CAAC,SAAS;gBAC7B,OAAO,EAAE,QAAQ,CAAC,OAAO;gBACzB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,SAAS,EAAE,YAAY,CAAC,IAAI;gBAC5B,OAAO,EAAE,YAAY,CAAC,EAAE;gBACxB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,QAAQ,EAAE,IAAA,iBAAG,EAAQ,UAAU,KAAK,CAAC,SAAS,UAAU,KAAK,CAAC,QAAQ,GAAG;gBACzE,SAAS,EAAE,KAAK,CAAC,KAAK;gBACtB,QAAQ,EAAE,KAAK,CAAC,IAAI;aACrB,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC;iBACd,SAAS,CAAC,YAAY,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,aAAa,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;iBACpE,SAAS,CAAC,KAAK,EAAE,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;iBAC/C,KAAK,CACJ,IAAA,iBAAG,EACD,IAAA,gBAAE,EAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,EACvC,IAAA,gBAAE,EAAC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC,EAChC,IAAA,iBAAG,EAAC,QAAQ,CAAC,SAAS,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,EAC7C,IAAA,iBAAG,EAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAC1C,CACF;iBACA,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAE/B,yCAAyC;YACzC,MAAM,cAAc,GAAG,MAAM,OAAE;iBAC5B,MAAM,CAAC;gBACN,EAAE,EAAE,YAAY,CAAC,EAAE;gBACnB,IAAI,EAAE,YAAY,CAAC,IAAI;gBACvB,YAAY,EAAE,YAAY,CAAC,YAAY;gBACvC,QAAQ,EAAE,YAAY,CAAC,QAAQ;aAChC,CAAC;iBACD,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,IAAA,gBAAE,EAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;iBAC9C,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAE9B,4BAA4B;YAC5B,MAAM,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC9C,MAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC;gBACzF,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;oBACzD,MAAM,QAAQ,GACZ,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;wBAC7E,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;oBACnB,OAAO,KAAK,GAAG,QAAQ,CAAC;gBAC1B,CAAC,EAAE,CAAC,CAAC,CAAC;gBAEN,OAAO;oBACL,GAAG,KAAK;oBACR,YAAY,EAAE,aAAa,CAAC,MAAM;oBAClC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;oBAC5C,WAAW,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM;iBACrE,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC;gBACP,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACrB,QAAQ,EAAE;oBACR,IAAI;oBACJ,SAAS,EAAE,UAAU;oBACrB,OAAO,EAAE,QAAQ;oBACjB,MAAM,EAAE,gBAAgB;iBACzB;gBACD,MAAM,EAAE,UAAU;gBAClB,OAAO,EAAE;oBACP,aAAa,EAAE,gBAAgB,CAAC,MAAM;oBACtC,WAAW,EAAE,cAAc,CAAC,MAAM;oBAClC,YAAY,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,MAAM;oBACjE,WAAW,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM;iBACxE;aACF,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAC5D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,mCAAmC;gBAC5C,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CACF,CAAC;AACJ,CAAC","names":[],"sources":["/home/runner/workspace/server/api/common-spaces.ts"],"sourcesContent":["import type { Express, Request, Response } from 'express';\nimport { eq, desc, and, sql, or, gte, lte, between, inArray } from 'drizzle-orm';\nimport { db } from '../db';\nimport { requireAuth, requireRole } from '../auth';\nimport { z } from 'zod';\nimport * as schema from '@shared/schema';\n\nconst {\n  commonSpaces,\n  bookings,\n  userBookingRestrictions,\n  userTimeLimits,\n  buildings,\n  users,\n  userResidences,\n  userOrganizations,\n} = schema;\n\n// Validation schemas\nconst commonSpaceFilterSchema = z.object({\n  building_id: z.string().uuid().optional(),\n});\n\nconst bookingFilterSchema = z.object({\n  start_date: z.string().datetime().optional(),\n  end_date: z.string().datetime().optional(),\n});\n\n// Calendar-specific schemas\nconst calendarQuerySchema = z.object({\n  start_date: z.string().datetime(),\n  end_date: z.string().datetime(),\n  view: z.enum(['month', 'week', 'day']).optional().default('month'),\n});\n\nconst buildingCalendarSchema = z.object({\n  buildingId: z.string().uuid(),\n});\n\nconst createBookingSchema = z.object({\n  start_time: z.string().datetime(),\n  end_time: z.string().datetime(),\n});\n\nconst createRestrictionSchema = z.object({\n  common_space_id: z.string().uuid(),\n  is_blocked: z.boolean(),\n  reason: z.string().optional(),\n});\n\nconst createCommonSpaceSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100, 'Name too long'),\n  description: z.string().optional(),\n  building_id: z.string().uuid('Building ID must be a valid UUID'),\n  is_reservable: z.boolean().default(true),\n  capacity: z.number().int().min(1).max(200).optional(),\n  opening_hours: z\n    .object({\n      start: z.string().regex(/^\\d{2}:\\d{2}$/, 'Invalid time format'),\n      end: z.string().regex(/^\\d{2}:\\d{2}$/, 'Invalid time format'),\n    })\n    .optional(),\n  weekly_hours: z.record(z.string(), z.object({\n    start: z.string().regex(/^\\d{2}:\\d{2}$/, 'Invalid time format'),\n    end: z.string().regex(/^\\d{2}:\\d{2}$/, 'Invalid time format'),\n  })).optional(),\n  available_days: z\n    .array(\n      z.enum(['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'])\n    )\n    .optional(),\n});\n\nconst setTimeLimitSchema = z.object({\n  user_id: z.string().uuid(),\n  common_space_id: z.string().uuid().optional(), // null means applies to all spaces\n  limit_type: z.enum(['monthly', 'yearly']),\n  limit_hours: z.number().int().min(1).max(8760), // Max 1 year worth of hours\n});\n\nconst spaceIdSchema = z.object({\n  spaceId: z.string().uuid(),\n});\n\nconst bookingIdSchema = z.object({\n  bookingId: z.string().uuid(),\n});\n\nconst userIdSchema = z.object({\n  userId: z.string().uuid(),\n});\n\n/**\n * Helper function to get accessible building IDs for a user based on their role.\n * @param user\n */\nasync function getAccessibleBuildingIds(user: any): Promise<string[]> {\n  // Admin users have access to all buildings\n  if (user.role === 'admin') {\n    const allBuildings = await db\n      .select({ buildingId: buildings.id })\n      .from(buildings)\n      .where(eq(buildings.isActive, true));\n    return allBuildings.map((b) => b.buildingId);\n  }\n\n  // Check if user belongs to Koveo organization (special global access)\n  const userOrgs = await db\n    .select({\n      organizationId: schema.organizations.id,\n      organizationName: schema.organizations.name,\n      canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,\n    })\n    .from(schema.organizations)\n    .innerJoin(userOrganizations, eq(userOrganizations.organizationId, schema.organizations.id))\n    .where(and(eq(userOrganizations.userId, user.id), eq(userOrganizations.isActive, true)));\n\n  const hasGlobalAccess = userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);\n\n  if (hasGlobalAccess) {\n    const allBuildings = await db\n      .select({ buildingId: buildings.id })\n      .from(buildings)\n      .where(eq(buildings.isActive, true));\n    return allBuildings.map((b) => b.buildingId);\n  }\n\n  // Regular users and managers: Get buildings from their organizations\n  if (user.role === 'manager' || user.role === 'demo_manager') {\n    if (userOrgs.length > 0) {\n      const orgIds = userOrgs.map((uo) => uo.organizationId);\n      const orgBuildings = await db\n        .select({ buildingId: buildings.id })\n        .from(buildings)\n        .where(and(inArray(buildings.organizationId, orgIds), eq(buildings.isActive, true)));\n      return orgBuildings.map((b) => b.buildingId);\n    }\n  }\n\n  // All users can also access buildings where they have residences\n  const userBuildingIds = await db\n    .select({ buildingId: schema.residences.buildingId })\n    .from(userResidences)\n    .innerJoin(schema.residences, eq(userResidences.residenceId, schema.residences.id))\n    .where(and(eq(userResidences.userId, user.id), eq(userResidences.isActive, true)));\n  return userBuildingIds.map((b) => b.buildingId);\n}\n\n/**\n * Helper function to calculate user's total booking hours for a time period.\n * @param userId\n * @param commonSpaceId\n * @param limitType\n */\nasync function getUserBookingHours(\n  userId: string,\n  commonSpaceId: string | null,\n  limitType: 'monthly' | 'yearly'\n): Promise<number> {\n  const now = new Date();\n  let startDate: Date;\n\n  if (limitType === 'monthly') {\n    startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n  } else {\n    startDate = new Date(now.getFullYear(), 0, 1);\n  }\n\n  const conditions = [\n    eq(bookings.userId, userId),\n    eq(bookings.status, 'confirmed'),\n    gte(bookings.startTime, startDate),\n  ];\n\n  if (commonSpaceId) {\n    conditions.push(eq(bookings.commonSpaceId, commonSpaceId));\n  }\n\n  const userBookings = await db\n    .select({\n      totalHours: sql<number>`EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`,\n    })\n    .from(bookings)\n    .where(and(...conditions));\n\n  return userBookings[0]?.totalHours || 0;\n}\n\n/**\n * Helper function to check if user has exceeded their booking time limit.\n * @param userId\n * @param commonSpaceId\n * @param newBookingHours\n */\nasync function checkUserTimeLimit(\n  userId: string,\n  commonSpaceId: string,\n  newBookingHours: number\n): Promise<{ withinLimit: boolean; message?: string; remainingHours?: number }> {\n  // Get user's time limits for this space (specific or global)\n  const timeLimits = await db\n    .select()\n    .from(userTimeLimits)\n    .where(\n      and(\n        eq(userTimeLimits.userId, userId),\n        or(\n          eq(userTimeLimits.commonSpaceId, commonSpaceId),\n          sql`${userTimeLimits.commonSpaceId} IS NULL`\n        )\n      )\n    )\n    .orderBy(userTimeLimits.commonSpaceId); // Specific limits come first (nulls last)\n\n  if (timeLimits.length === 0) {\n    return { withinLimit: true }; // No limits set\n  }\n\n  // Use the most specific limit (space-specific over global)\n  const activeLimit = timeLimits[0];\n  const currentHours = await getUserBookingHours(\n    userId,\n    activeLimit.commonSpaceId,\n    activeLimit.limitType as 'monthly' | 'yearly'\n  );\n\n  const totalAfterBooking = currentHours + newBookingHours;\n  const remainingHours = Math.max(0, activeLimit.limitHours - currentHours);\n\n  if (totalAfterBooking > activeLimit.limitHours) {\n    const limitPeriod = activeLimit.limitType === 'monthly' ? 'ce mois' : 'cette année';\n    return {\n      withinLimit: false,\n      message: `Limite de temps dépassée. Vous avez utilisé ${Math.round(currentHours)}h sur ${activeLimit.limitHours}h autorisées pour ${limitPeriod}. Il vous reste ${Math.round(remainingHours)}h disponibles.`,\n      remainingHours,\n    };\n  }\n\n  return { withinLimit: true, remainingHours };\n}\n\n/**\n * Helper function to check if a time slot overlaps with existing bookings.\n * @param commonSpaceId\n * @param startTime\n * @param endTime\n * @param excludeBookingId\n */\nasync function hasOverlappingBookings(\n  commonSpaceId: string,\n  startTime: Date,\n  endTime: Date,\n  excludeBookingId?: string\n): Promise<boolean> {\n  const conditions = [\n    eq(bookings.commonSpaceId, commonSpaceId),\n    eq(bookings.status, 'confirmed'),\n    or(\n      // New booking starts during existing booking\n      and(gte(bookings.startTime, startTime), lte(bookings.startTime, endTime)),\n      // New booking ends during existing booking\n      and(gte(bookings.endTime, startTime), lte(bookings.endTime, endTime)),\n      // New booking completely contains existing booking\n      and(lte(bookings.startTime, startTime), gte(bookings.endTime, endTime)),\n      // Existing booking completely contains new booking\n      and(gte(bookings.startTime, startTime), lte(bookings.endTime, endTime))\n    ),\n  ];\n\n  if (excludeBookingId) {\n    conditions.push(sql`${bookings.id} != ${excludeBookingId}`);\n  }\n\n  const overlapping = await db\n    .select({ id: bookings.id })\n    .from(bookings)\n    .where(and(...conditions))\n    .limit(1);\n\n  return overlapping.length > 0;\n}\n\n/**\n * Helper function to check if user is blocked from booking a space.\n * @param userId\n * @param commonSpaceId\n */\nasync function isUserBlocked(userId: string, commonSpaceId: string): Promise<boolean> {\n  const restriction = await db\n    .select({ isBlocked: userBookingRestrictions.isBlocked })\n    .from(userBookingRestrictions)\n    .where(\n      and(\n        eq(userBookingRestrictions.userId, userId),\n        eq(userBookingRestrictions.commonSpaceId, commonSpaceId)\n      )\n    )\n    .limit(1);\n\n  return restriction.length > 0 && restriction[0].isBlocked;\n}\n\n/**\n * Helper function to check if booking time is within opening hours.\n * @param startTime\n * @param endTime\n * @param openingHours\n */\nfunction isWithinOpeningHours(startTime: Date, endTime: Date, openingHours: any[]): boolean {\n  if (!openingHours || openingHours.length === 0) {\n    return true; // No restrictions if no opening hours defined\n  }\n\n  const startDay = startTime.toLocaleDateString('en-US', { weekday: 'long' });\n  const endDay = endTime.toLocaleDateString('en-US', { weekday: 'long' });\n\n  // For simplicity, require booking to be within same day\n  if (startDay !== endDay) {\n    return false;\n  }\n\n  const dayHours = openingHours.find((oh) => oh.day === startDay);\n  if (!dayHours) {\n    return false; // No hours defined for this day\n  }\n\n  const startTimeStr = startTime.toTimeString().slice(0, 5); // HH:MM format\n  const endTimeStr = endTime.toTimeString().slice(0, 5);\n\n  return startTimeStr >= dayHours.open && endTimeStr <= dayHours.close;\n}\n\n/**\n * Registers all common spaces API endpoints.\n * @param app\n */\nexport function registerCommonSpacesRoutes(app: Express): void {\n  /**\n   * GET /api/common-spaces - Retrieve common spaces for accessible buildings.\n   */\n  app.get('/api/common-spaces', requireAuth, async (req: any, res: Response) => {\n    try {\n      const user = req.user || req.session?.user;\n      if (!user) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Validate query parameters\n      const queryValidation = commonSpaceFilterSchema.safeParse(req.query);\n      if (!queryValidation.success) {\n        return res.status(400).json({\n          message: 'Invalid query parameters',\n          errors: queryValidation.error.issues,\n        });\n      }\n\n      const { building_id } = queryValidation.data;\n\n\n      // Get accessible building IDs\n      const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n\n      if (accessibleBuildingIds.length === 0) {\n        return res.json([]);\n      }\n\n      // Build conditions\n      const conditions = [eq(buildings.isActive, true)];\n\n      if (building_id) {\n        if (!accessibleBuildingIds.includes(building_id)) {\n          return res.status(403).json({\n            message: 'Access denied to this building',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n        conditions.push(eq(commonSpaces.buildingId, building_id));\n      } else {\n        conditions.push(inArray(commonSpaces.buildingId, accessibleBuildingIds));\n      }\n\n      const spaces = await db\n        .select({\n          id: commonSpaces.id,\n          name: commonSpaces.name,\n          description: commonSpaces.description,\n          buildingId: commonSpaces.buildingId,\n          buildingName: buildings.name,\n          isReservable: commonSpaces.isReservable,\n          capacity: commonSpaces.capacity,\n          contactPersonId: commonSpaces.contactPersonId,\n          contactPersonName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n          openingHours: commonSpaces.openingHours,\n          bookingRules: commonSpaces.bookingRules,\n          createdAt: commonSpaces.createdAt,\n          updatedAt: commonSpaces.updatedAt,\n        })\n        .from(commonSpaces)\n        .innerJoin(buildings, eq(commonSpaces.buildingId, buildings.id))\n        .leftJoin(users, eq(commonSpaces.contactPersonId, users.id))\n        .where(and(...conditions))\n        .orderBy(buildings.name, commonSpaces.name);\n\n      res.json(spaces);\n    } catch (error: any) {\n      res.status(500).json({\n        message: 'Failed to fetch common spaces',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * GET /api/common-spaces/:spaceId/bookings - Get bookings for a specific space.\n   */\n  app.get('/api/common-spaces/:spaceId/bookings', requireAuth, async (req: any, res: Response) => {\n    try {\n      const user = req.user || req.session?.user;\n      if (!user) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Validate parameters\n      const paramValidation = spaceIdSchema.safeParse(req.params);\n      if (!paramValidation.success) {\n        return res.status(400).json({\n          message: 'Invalid space ID',\n          errors: paramValidation.error.issues,\n        });\n      }\n\n      const queryValidation = bookingFilterSchema.safeParse(req.query);\n      if (!queryValidation.success) {\n        return res.status(400).json({\n          message: 'Invalid query parameters',\n          errors: queryValidation.error.issues,\n        });\n      }\n\n      const { spaceId } = paramValidation.data;\n      const { start_date, end_date } = queryValidation.data;\n\n      // Check if user has access to this space\n      const space = await db\n        .select({\n          id: commonSpaces.id,\n          buildingId: commonSpaces.buildingId,\n        })\n        .from(commonSpaces)\n        .where(eq(commonSpaces.id, spaceId))\n        .limit(1);\n\n      if (space.length === 0) {\n        return res.status(404).json({\n          message: 'Common space not found',\n          code: 'NOT_FOUND',\n        });\n      }\n\n      const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n      if (!accessibleBuildingIds.includes(space[0].buildingId)) {\n        return res.status(403).json({\n          message: 'Access denied to this common space',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      // Build query conditions\n      const conditions = [eq(bookings.commonSpaceId, spaceId)];\n\n      if (start_date) {\n        conditions.push(gte(bookings.startTime, new Date(start_date)));\n      }\n\n      if (end_date) {\n        conditions.push(lte(bookings.endTime, new Date(end_date)));\n      }\n\n      const spaceBookings = await db\n        .select({\n          id: bookings.id,\n          commonSpaceId: bookings.commonSpaceId,\n          userId: bookings.userId,\n          userName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n          userEmail: users.email,\n          startTime: bookings.startTime,\n          endTime: bookings.endTime,\n          status: bookings.status,\n          createdAt: bookings.createdAt,\n          updatedAt: bookings.updatedAt,\n        })\n        .from(bookings)\n        .innerJoin(users, eq(bookings.userId, users.id))\n        .where(and(...conditions))\n        .orderBy(bookings.startTime);\n\n      res.json(spaceBookings);\n    } catch (error: any) {\n      console.error('❌ Error fetching bookings:', error);\n      res.status(500).json({\n        message: 'Failed to fetch bookings',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * POST /api/common-spaces/:spaceId/bookings - Create a new booking.\n   */\n  app.post('/api/common-spaces/:spaceId/bookings', requireAuth, async (req: any, res: Response) => {\n    try {\n      const user = req.user || req.session?.user;\n      if (!user) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Validate parameters and body\n      const paramValidation = spaceIdSchema.safeParse(req.params);\n      if (!paramValidation.success) {\n        return res.status(400).json({\n          message: 'Invalid space ID',\n          errors: paramValidation.error.issues,\n        });\n      }\n\n      console.log('🔍 Booking request body:', req.body);\n      const bodyValidation = createBookingSchema.safeParse(req.body);\n      if (!bodyValidation.success) {\n        console.log('❌ Validation failed:', bodyValidation.error.issues);\n        return res.status(400).json({\n          message: 'Invalid booking data',\n          errors: bodyValidation.error.issues,\n        });\n      }\n\n      const { spaceId } = paramValidation.data;\n      const { start_time, end_time } = bodyValidation.data;\n\n      const startTime = new Date(start_time);\n      const endTime = new Date(end_time);\n\n      // Validate time range\n      if (startTime >= endTime) {\n        return res.status(400).json({\n          message: 'Start time must be before end time',\n          code: 'INVALID_TIME_RANGE',\n        });\n      }\n\n      // Allow bookings for today and future dates (with 5-minute buffer for current time)\n      const now = new Date();\n      const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n\n      if (startTime < fiveMinutesAgo) {\n        return res.status(400).json({\n          message: 'Cannot book in the past',\n          code: 'INVALID_TIME_RANGE',\n        });\n      }\n\n      // Get common space details\n      const space = await db\n        .select({\n          id: commonSpaces.id,\n          name: commonSpaces.name,\n          buildingId: commonSpaces.buildingId,\n          isReservable: commonSpaces.isReservable,\n          openingHours: commonSpaces.openingHours,\n        })\n        .from(commonSpaces)\n        .where(eq(commonSpaces.id, spaceId))\n        .limit(1);\n\n      if (space.length === 0) {\n        return res.status(404).json({\n          message: 'Common space not found',\n          code: 'NOT_FOUND',\n        });\n      }\n\n      const commonSpace = space[0];\n\n      // Check if space is reservable\n      if (!commonSpace.isReservable) {\n        return res.status(400).json({\n          message: 'This common space is not reservable',\n          code: 'NOT_RESERVABLE',\n        });\n      }\n\n      // Check user access to building\n      const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n      if (!accessibleBuildingIds.includes(commonSpace.buildingId)) {\n        return res.status(403).json({\n          message: 'Access denied to this common space',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      // Check if user is blocked\n      const blocked = await isUserBlocked(user.id, spaceId);\n      if (blocked) {\n        return res.status(403).json({\n          message: 'You are blocked from booking this space',\n          code: 'USER_BLOCKED',\n        });\n      }\n\n      // Check opening hours\n      if (\n        commonSpace.openingHours &&\n        !isWithinOpeningHours(startTime, endTime, commonSpace.openingHours as any[])\n      ) {\n        return res.status(400).json({\n          message: 'Booking time is outside opening hours',\n          code: 'OUTSIDE_OPENING_HOURS',\n        });\n      }\n\n      // Check for overlapping bookings\n      const hasOverlap = await hasOverlappingBookings(spaceId, startTime, endTime);\n      if (hasOverlap) {\n        return res.status(409).json({\n          message: 'Time slot is already booked',\n          code: 'TIME_CONFLICT',\n        });\n      }\n\n      // Check user's time limits\n      const bookingDurationHours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);\n      const timeLimitCheck = await checkUserTimeLimit(user.id, spaceId, bookingDurationHours);\n\n      if (!timeLimitCheck.withinLimit) {\n        return res.status(403).json({\n          message: timeLimitCheck.message,\n          code: 'TIME_LIMIT_EXCEEDED',\n          remainingHours: timeLimitCheck.remainingHours,\n        });\n      }\n\n      // Create booking\n      const newBooking = await db\n        .insert(bookings)\n        .values({\n          commonSpaceId: spaceId,\n          userId: user.id,\n          startTime,\n          endTime,\n          status: 'confirmed',\n        })\n        .returning();\n\n      res.status(201).json({\n        message: 'Booking created successfully',\n        booking: newBooking[0],\n      });\n    } catch (error: any) {\n      console.error('❌ Error creating booking:', error);\n      res.status(500).json({\n        message: 'Failed to create booking',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * GET /api/common-spaces/calendar/:spaceId - Get calendar data for a specific space.\n   */\n  app.get('/api/common-spaces/calendar/:spaceId', requireAuth, async (req: any, res: Response) => {\n    try {\n      const user = req.user || req.session?.user;\n      if (!user) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Validate parameters\n      const paramValidation = spaceIdSchema.safeParse(req.params);\n      if (!paramValidation.success) {\n        return res.status(400).json({\n          message: 'Invalid space ID',\n          errors: paramValidation.error.issues,\n        });\n      }\n\n      const queryValidation = calendarQuerySchema.safeParse(req.query);\n      if (!queryValidation.success) {\n        return res.status(400).json({\n          message: 'Invalid query parameters',\n          errors: queryValidation.error.issues,\n        });\n      }\n\n      const { spaceId } = paramValidation.data;\n      const { start_date, end_date, view } = queryValidation.data;\n\n      // Get space details and check access\n      const space = await db\n        .select({\n          id: commonSpaces.id,\n          name: commonSpaces.name,\n          buildingId: commonSpaces.buildingId,\n          isReservable: commonSpaces.isReservable,\n          openingHours: commonSpaces.openingHours,\n          capacity: commonSpaces.capacity,\n        })\n        .from(commonSpaces)\n        .where(eq(commonSpaces.id, spaceId))\n        .limit(1);\n\n      if (space.length === 0) {\n        return res.status(404).json({\n          message: 'Common space not found',\n          code: 'NOT_FOUND',\n        });\n      }\n\n      const commonSpace = space[0];\n\n      // Check user access to building\n      const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n      if (!accessibleBuildingIds.includes(commonSpace.buildingId)) {\n        return res.status(403).json({\n          message: 'Access denied to this common space',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      // Get bookings for the specified date range\n      const conditions = [\n        eq(bookings.commonSpaceId, spaceId),\n        eq(bookings.status, 'confirmed'),\n        gte(bookings.startTime, new Date(start_date)),\n        lte(bookings.endTime, new Date(end_date)),\n      ];\n\n      const spaceBookings = await db\n        .select({\n          id: bookings.id,\n          startTime: bookings.startTime,\n          endTime: bookings.endTime,\n          status: bookings.status,\n          userId: bookings.userId,\n          userName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n          userEmail: users.email,\n          userRole: users.role,\n        })\n        .from(bookings)\n        .innerJoin(users, eq(bookings.userId, users.id))\n        .where(and(...conditions))\n        .orderBy(bookings.startTime);\n\n      // Determine permissions\n      const canViewDetails = ['admin', 'manager'].includes(user.role);\n\n      // Transform bookings to calendar events\n      const events = spaceBookings.map((booking) => ({\n        id: booking.id,\n        startTime: booking.startTime.toISOString(),\n        endTime: booking.endTime.toISOString(),\n        status: booking.status,\n        userId: booking.userId,\n        userName: canViewDetails || booking.userId === user.id ? booking.userName : 'Déjà Réservé',\n        userEmail: canViewDetails || booking.userId === user.id ? booking.userEmail : null,\n        isOwnBooking: booking.userId === user.id,\n        spaceId: spaceId,\n        spaceName: commonSpace.name,\n        userRole: booking.userRole,\n      }));\n\n      // Calculate summary statistics\n      const totalBookings = events.length;\n      const totalHours = events.reduce((sum, event) => {\n        const duration =\n          (new Date(event.endTime).getTime() - new Date(event.startTime).getTime()) /\n          (1000 * 60 * 60);\n        return sum + duration;\n      }, 0);\n      const uniqueUsers = new Set(events.map((e) => e.userId)).size;\n\n      // Build calendar response\n      const calendarData = {\n        space: {\n          id: commonSpace.id,\n          name: commonSpace.name,\n          isReservable: commonSpace.isReservable,\n          openingHours: commonSpace.openingHours,\n        },\n        calendar: {\n          view,\n          startDate: start_date,\n          endDate: end_date,\n          events,\n        },\n        permissions: {\n          canViewDetails,\n          canCreateBookings: commonSpace.isReservable && !(await isUserBlocked(user.id, spaceId)),\n        },\n        summary: {\n          totalBookings,\n          totalHours: Math.round(totalHours * 10) / 10,\n          uniqueUsers,\n        },\n      };\n\n      res.json(calendarData);\n    } catch (error: any) {\n      console.error('❌ Error fetching calendar data:', error);\n      res.status(500).json({\n        message: 'Failed to fetch calendar data',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * GET /api/common-spaces/my-bookings - Get current user's bookings.\n   */\n  app.get('/api/common-spaces/my-bookings', requireAuth, async (req: any, res: Response) => {\n    try {\n      const user = req.user;\n\n      // Get all user's confirmed bookings with space and building info\n      const userBookings = await db\n        .select({\n          id: bookings.id,\n          commonSpaceId: bookings.commonSpaceId,\n          startTime: bookings.startTime,\n          endTime: bookings.endTime,\n          status: bookings.status,\n          createdAt: bookings.createdAt,\n          commonSpaceName: commonSpaces.name,\n          buildingName: buildings.name,\n          buildingAddress: buildings.address,\n        })\n        .from(bookings)\n        .innerJoin(commonSpaces, eq(bookings.commonSpaceId, commonSpaces.id))\n        .innerJoin(buildings, eq(commonSpaces.buildingId, buildings.id))\n        .where(and(eq(bookings.userId, user.id), eq(bookings.status, 'confirmed')))\n        .orderBy(desc(bookings.startTime));\n\n      res.json(userBookings);\n    } catch (error: any) {\n      console.error('❌ Error fetching user bookings:', error);\n      res.status(500).json({\n        message: 'Failed to fetch user bookings',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/common-spaces/bookings/:bookingId - Cancel a booking.\n   */\n  app.delete(\n    '/api/common-spaces/bookings/:bookingId',\n    requireAuth,\n    async (req: any, res: Response) => {\n      try {\n        const user = req.user || req.session?.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        // Validate parameters\n        const paramValidation = bookingIdSchema.safeParse(req.params);\n        if (!paramValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid booking ID',\n            errors: paramValidation.error.issues,\n          });\n        }\n\n        const { bookingId } = paramValidation.data;\n\n        // Get booking details\n        const booking = await db\n          .select({\n            id: bookings.id,\n            userId: bookings.userId,\n            commonSpaceId: bookings.commonSpaceId,\n            buildingId: commonSpaces.buildingId,\n            status: bookings.status,\n          })\n          .from(bookings)\n          .innerJoin(commonSpaces, eq(bookings.commonSpaceId, commonSpaces.id))\n          .where(eq(bookings.id, bookingId))\n          .limit(1);\n\n        if (booking.length === 0) {\n          return res.status(404).json({\n            message: 'Booking not found',\n            code: 'NOT_FOUND',\n          });\n        }\n\n        const bookingDetails = booking[0];\n\n        // Check permissions: users can cancel their own bookings, managers can cancel any in their buildings\n        let canCancel = false;\n\n        if (bookingDetails.userId === user.id) {\n          canCancel = true; // Users can always cancel their own bookings\n        } else if (['admin', 'manager'].includes(user.role)) {\n          // Managers can cancel bookings in buildings they have access to\n          const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n          canCancel = accessibleBuildingIds.includes(bookingDetails.buildingId);\n        }\n\n        if (!canCancel) {\n          return res.status(403).json({\n            message: 'Can only cancel your own bookings',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n\n        // Update booking status to cancelled\n        await db\n          .update(bookings)\n          .set({\n            status: 'cancelled',\n            updatedAt: new Date(),\n          })\n          .where(eq(bookings.id, bookingId));\n\n        res.json({\n          message: 'Booking cancelled successfully',\n        });\n      } catch (error: any) {\n        console.error('❌ Error cancelling booking:', error);\n        res.status(500).json({\n          message: 'Failed to cancel booking',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/common-spaces/:spaceId/stats - Get usage statistics (Manager/Admin only).\n   */\n  app.get(\n    '/api/common-spaces/:spaceId/stats',\n    requireAuth,\n    requireRole(['admin', 'manager']),\n    async (req: any, res: Response) => {\n      try {\n        const user = req.user || req.session?.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        // Validate parameters\n        const paramValidation = spaceIdSchema.safeParse(req.params);\n        if (!paramValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid space ID',\n            errors: paramValidation.error.issues,\n          });\n        }\n\n        const { spaceId } = paramValidation.data;\n\n        // Check access to space\n        const space = await db\n          .select({\n            id: commonSpaces.id,\n            buildingId: commonSpaces.buildingId,\n            name: commonSpaces.name,\n          })\n          .from(commonSpaces)\n          .where(eq(commonSpaces.id, spaceId))\n          .limit(1);\n\n        if (space.length === 0) {\n          return res.status(404).json({\n            message: 'Common space not found',\n            code: 'NOT_FOUND',\n          });\n        }\n\n        const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n        if (!accessibleBuildingIds.includes(space[0].buildingId)) {\n          return res.status(403).json({\n            message: 'Access denied to this common space',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n\n        // Calculate stats for last year\n        const oneYearAgo = new Date();\n        oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n\n        const stats = await db\n          .select({\n            userId: bookings.userId,\n            userName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n            userEmail: users.email,\n            totalHours: sql<number>`EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`,\n            totalBookings: sql<number>`COUNT(${bookings.id})`,\n          })\n          .from(bookings)\n          .innerJoin(users, eq(bookings.userId, users.id))\n          .where(\n            and(\n              eq(bookings.commonSpaceId, spaceId),\n              eq(bookings.status, 'confirmed'),\n              gte(bookings.startTime, oneYearAgo)\n            )\n          )\n          .groupBy(bookings.userId, users.firstName, users.lastName, users.email)\n          .orderBy(\n            desc(\n              sql<number>`EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`\n            )\n          );\n\n        const totalStats = await db\n          .select({\n            totalBookings: sql<number>`COUNT(${bookings.id})`,\n            totalHours: sql<number>`EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`,\n            uniqueUsers: sql<number>`COUNT(DISTINCT ${bookings.userId})`,\n          })\n          .from(bookings)\n          .where(\n            and(\n              eq(bookings.commonSpaceId, spaceId),\n              eq(bookings.status, 'confirmed'),\n              gte(bookings.startTime, oneYearAgo)\n            )\n          );\n\n        res.json({\n          spaceName: space[0].name,\n          period: 'Last 12 months',\n          summary: totalStats[0],\n          userStats: stats,\n        });\n      } catch (error: any) {\n        console.error('❌ Error fetching space statistics:', error);\n        res.status(500).json({\n          message: 'Failed to fetch space statistics',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/common-spaces/users/:userId/restrictions - Block/unblock user (Manager/Admin only).\n   */\n  app.post(\n    '/api/common-spaces/users/:userId/restrictions',\n    requireAuth,\n    requireRole(['admin', 'manager']),\n    async (req: any, res: Response) => {\n      try {\n        const user = req.user || req.session?.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        // Validate parameters and body\n        const paramValidation = userIdSchema.safeParse(req.params);\n        if (!paramValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid user ID',\n            errors: paramValidation.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        const bodyValidation = createRestrictionSchema.safeParse(req.body);\n        if (!bodyValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid restriction data',\n            errors: bodyValidation.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        const { userId } = paramValidation.data;\n        const { common_space_id, is_blocked, reason } = bodyValidation.data;\n\n        // Check if target user exists\n        const targetUser = await db\n          .select({ id: users.id })\n          .from(users)\n          .where(eq(users.id, userId))\n          .limit(1);\n\n        if (targetUser.length === 0) {\n          return res.status(404).json({\n            message: 'User not found',\n            code: 'NOT_FOUND',\n          });\n        }\n\n        // Check if common space exists and user has access\n        const space = await db\n          .select({\n            id: commonSpaces.id,\n            buildingId: commonSpaces.buildingId,\n          })\n          .from(commonSpaces)\n          .where(eq(commonSpaces.id, common_space_id))\n          .limit(1);\n\n        if (space.length === 0) {\n          return res.status(404).json({\n            message: 'Common space not found',\n            code: 'NOT_FOUND',\n          });\n        }\n\n        const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n        if (!accessibleBuildingIds.includes(space[0].buildingId)) {\n          return res.status(403).json({\n            message: 'Access denied to this common space',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n\n        // Check if restriction already exists\n        const existingRestriction = await db\n          .select({ id: userBookingRestrictions.id })\n          .from(userBookingRestrictions)\n          .where(\n            and(\n              eq(userBookingRestrictions.userId, userId),\n              eq(userBookingRestrictions.commonSpaceId, common_space_id)\n            )\n          )\n          .limit(1);\n\n        if (existingRestriction.length > 0) {\n          // Update existing restriction\n          await db\n            .update(userBookingRestrictions)\n            .set({\n              isBlocked: is_blocked,\n              reason,\n              updatedAt: new Date(),\n            })\n            .where(eq(userBookingRestrictions.id, existingRestriction[0].id));\n        } else {\n          // Create new restriction\n          await db.insert(userBookingRestrictions).values({\n            userId,\n            commonSpaceId: common_space_id,\n            isBlocked: is_blocked,\n            reason,\n          });\n        }\n\n        res.json({\n          message: `User ${is_blocked ? 'blocked from' : 'unblocked from'} booking this space`,\n        });\n      } catch (error: any) {\n        console.error('❌ Error managing user restriction:', error);\n        res.status(500).json({\n          message: 'Failed to manage user restriction',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/common-spaces - Create a new common space (Manager/Admin only).\n   */\n  app.post(\n    '/api/common-spaces',\n    requireAuth,\n    requireRole(['admin', 'manager']),\n    async (req: Request, res: Response) => {\n      try {\n        const user = req.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        // Validate request body\n        const validationResult = createCommonSpaceSchema.safeParse(req.body);\n        if (!validationResult.success) {\n          return res.status(400).json({\n            message: 'Invalid request data',\n            errors: validationResult.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        const { name, description, building_id, is_reservable, capacity, opening_hours, weekly_hours, available_days } =\n          validationResult.data;\n\n        // Check if user has access to this building\n        const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n        if (!accessibleBuildingIds.includes(building_id)) {\n          return res.status(403).json({\n            message: 'Access denied. You can only create spaces in buildings you manage.',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n\n        // Verify building exists and is active\n        const building = await db\n          .select({ id: buildings.id, name: buildings.name })\n          .from(buildings)\n          .where(and(eq(buildings.id, building_id), eq(buildings.isActive, true)))\n          .limit(1);\n\n        if (building.length === 0) {\n          return res.status(404).json({\n            message: 'Building not found or inactive',\n            code: 'BUILDING_NOT_FOUND',\n          });\n        }\n\n        // Check if a space with the same name already exists in this building\n        const existingSpace = await db\n          .select({ id: commonSpaces.id })\n          .from(commonSpaces)\n          .where(and(eq(commonSpaces.name, name), eq(commonSpaces.buildingId, building_id)))\n          .limit(1);\n\n        if (existingSpace.length > 0) {\n          return res.status(409).json({\n            message: 'A common space with this name already exists in this building',\n            code: 'DUPLICATE_NAME',\n          });\n        }\n\n        // Create the new common space\n        const newSpace = await db\n          .insert(commonSpaces)\n          .values({\n            name,\n            description: description || null,\n            buildingId: building_id,\n            isReservable: is_reservable,\n            capacity: capacity || null,\n            openingHours: opening_hours ? [{ day: 'all', open: opening_hours.start, close: opening_hours.end }] : \n                         weekly_hours ? Object.entries(weekly_hours).map(([day, hours]) => ({ \n                           day, \n                           open: hours.start, \n                           close: hours.end \n                         })) : null,\n            availableDays: available_days || null,\n          })\n          .returning();\n\n        console.log(`✅ Created new common space: ${name} in building ${building[0].name}`);\n\n        res.status(201).json({\n          message: 'Common space created successfully',\n          space: {\n            id: newSpace[0].id,\n            name: newSpace[0].name,\n            description: newSpace[0].description,\n            buildingId: newSpace[0].buildingId,\n            buildingName: building[0].name,\n            isReservable: newSpace[0].isReservable,\n            capacity: newSpace[0].capacity,\n            openingHours: newSpace[0].openingHours,\n            createdAt: newSpace[0].createdAt,\n          },\n        });\n      } catch (error: any) {\n        console.error('❌ Error creating common space:', error);\n        res.status(500).json({\n          message: 'Failed to create common space',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * PUT /api/common-spaces/:spaceId - Update a common space (Manager/Admin only).\n   */\n  app.put(\n    '/api/common-spaces/:spaceId',\n    requireAuth,\n    requireRole(['admin', 'manager']),\n    async (req: Request, res: Response) => {\n      try {\n        const user = req.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        // Validate parameters\n        const paramValidation = spaceIdSchema.safeParse(req.params);\n        if (!paramValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid space ID',\n            errors: paramValidation.error.issues,\n          });\n        }\n\n        // Validate request body\n        const validationResult = createCommonSpaceSchema.safeParse(req.body);\n        if (!validationResult.success) {\n          return res.status(400).json({\n            message: 'Invalid request data',\n            errors: validationResult.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        const { spaceId } = paramValidation.data;\n        const { name, description, building_id, is_reservable, capacity, opening_hours, weekly_hours, available_days } =\n          validationResult.data;\n\n        // Check if space exists and user has access\n        const existingSpace = await db\n          .select({\n            id: commonSpaces.id,\n            buildingId: commonSpaces.buildingId,\n          })\n          .from(commonSpaces)\n          .where(eq(commonSpaces.id, spaceId))\n          .limit(1);\n\n        if (existingSpace.length === 0) {\n          return res.status(404).json({\n            message: 'Common space not found',\n            code: 'NOT_FOUND',\n          });\n        }\n\n        // Check if user has access to this building\n        const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n        if (!accessibleBuildingIds.includes(existingSpace[0].buildingId)) {\n          return res.status(403).json({\n            message: 'Access denied. You can only update spaces in buildings you manage.',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n\n        // Update the common space\n        const updatedSpace = await db\n          .update(commonSpaces)\n          .set({\n            name,\n            description: description || null,\n            buildingId: building_id,\n            isReservable: is_reservable,\n            capacity: capacity || null,\n            openingHours: opening_hours ? [{ day: 'all', open: opening_hours.start, close: opening_hours.end }] : \n                         weekly_hours ? Object.entries(weekly_hours).map(([day, hours]) => ({ \n                           day, \n                           open: hours.start, \n                           close: hours.end \n                         })) : null,\n            availableDays: available_days || null,\n            updatedAt: new Date(),\n          })\n          .where(eq(commonSpaces.id, spaceId))\n          .returning();\n\n        console.log(`✅ Updated common space: ${name}`);\n\n        res.json({\n          message: 'Common space updated successfully',\n          space: {\n            id: updatedSpace[0].id,\n            name: updatedSpace[0].name,\n            description: updatedSpace[0].description,\n            buildingId: updatedSpace[0].buildingId,\n            isReservable: updatedSpace[0].isReservable,\n            capacity: updatedSpace[0].capacity,\n            openingHours: updatedSpace[0].openingHours,\n            availableDays: updatedSpace[0].availableDays,\n            updatedAt: updatedSpace[0].updatedAt,\n          },\n        });\n      } catch (error: any) {\n        console.error('❌ Error updating common space:', error);\n        res.status(500).json({\n          message: 'Failed to update common space',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * POST /api/common-spaces/users/:userId/time-limits - Set user time limits (Manager/Admin only).\n   */\n  app.post(\n    '/api/common-spaces/users/:userId/time-limits',\n    requireAuth,\n    requireRole(['admin', 'manager']),\n    async (req: Request, res: Response) => {\n      try {\n        const user = req.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        // Validate parameters\n        const paramValidation = userIdSchema.safeParse(req.params);\n        if (!paramValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid user ID',\n            errors: paramValidation.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        // Validate request body\n        const validationResult = setTimeLimitSchema.safeParse(req.body);\n        if (!validationResult.success) {\n          return res.status(400).json({\n            message: 'Invalid time limit data',\n            errors: validationResult.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        const { userId } = paramValidation.data;\n        const { user_id, common_space_id, limit_type, limit_hours } = validationResult.data;\n\n        // Verify user exists\n        const targetUser = await db\n          .select({ id: users.id, firstName: users.firstName, lastName: users.lastName })\n          .from(users)\n          .where(eq(users.id, userId))\n          .limit(1);\n\n        if (targetUser.length === 0) {\n          return res.status(404).json({\n            message: 'User not found',\n            code: 'USER_NOT_FOUND',\n          });\n        }\n\n        // If common_space_id is provided, verify space exists and user has access\n        if (common_space_id) {\n          const space = await db\n            .select({\n              id: commonSpaces.id,\n              name: commonSpaces.name,\n              buildingId: commonSpaces.buildingId,\n            })\n            .from(commonSpaces)\n            .where(eq(commonSpaces.id, common_space_id))\n            .limit(1);\n\n          if (space.length === 0) {\n            return res.status(404).json({\n              message: 'Common space not found',\n              code: 'SPACE_NOT_FOUND',\n            });\n          }\n\n          const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n          if (!accessibleBuildingIds.includes(space[0].buildingId)) {\n            return res.status(403).json({\n              message: 'Access denied to this common space',\n              code: 'INSUFFICIENT_PERMISSIONS',\n            });\n          }\n        }\n\n        // Check if a time limit already exists\n        const existingLimit = await db\n          .select({ id: userTimeLimits.id })\n          .from(userTimeLimits)\n          .where(\n            and(\n              eq(userTimeLimits.userId, userId),\n              common_space_id\n                ? eq(userTimeLimits.commonSpaceId, common_space_id)\n                : sql`${userTimeLimits.commonSpaceId} IS NULL`,\n              eq(userTimeLimits.limitType, limit_type)\n            )\n          )\n          .limit(1);\n\n        if (existingLimit.length > 0) {\n          // Update existing limit\n          await db\n            .update(userTimeLimits)\n            .set({\n              limitHours: limit_hours,\n              updatedAt: new Date(),\n            })\n            .where(eq(userTimeLimits.id, existingLimit[0].id));\n        } else {\n          // Create new limit\n          await db.insert(userTimeLimits).values({\n            userId,\n            commonSpaceId: common_space_id || null,\n            limitType: limit_type,\n            limitHours: limit_hours,\n          });\n        }\n\n        console.log(\n          `✅ Set time limit for user ${targetUser[0].firstName} ${targetUser[0].lastName}: ${limit_hours}h per ${limit_type}`\n        );\n\n        res.json({\n          message: 'Time limit set successfully',\n          user: {\n            id: targetUser[0].id,\n            name: `${targetUser[0].firstName} ${targetUser[0].lastName}`,\n            limitType: limit_type,\n            limitHours: limit_hours,\n            spaceId: common_space_id,\n          },\n        });\n      } catch (error: any) {\n        console.error('❌ Error setting time limit:', error);\n        res.status(500).json({\n          message: 'Failed to set time limit',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/common-spaces/users/:userId/time-limits - Get user time limits.\n   */\n  app.get(\n    '/api/common-spaces/users/:userId/time-limits',\n    requireAuth,\n    requireRole(['admin', 'manager']),\n    async (req: Request, res: Response) => {\n      try {\n        const user = req.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        const { userId } = req.params;\n\n        // Get user's time limits\n        const limits = await db\n          .select({\n            id: userTimeLimits.id,\n            userId: userTimeLimits.userId,\n            commonSpaceId: userTimeLimits.commonSpaceId,\n            spaceName: commonSpaces.name,\n            limitType: userTimeLimits.limitType,\n            limitHours: userTimeLimits.limitHours,\n            createdAt: userTimeLimits.createdAt,\n            updatedAt: userTimeLimits.updatedAt,\n          })\n          .from(userTimeLimits)\n          .leftJoin(commonSpaces, eq(userTimeLimits.commonSpaceId, commonSpaces.id))\n          .where(eq(userTimeLimits.userId, userId))\n          .orderBy(userTimeLimits.limitType, userTimeLimits.commonSpaceId);\n\n        // Calculate current usage for each limit\n        const limitsWithUsage = await Promise.all(\n          limits.map(async (limit) => {\n            const currentHours = await getUserBookingHours(\n              userId,\n              limit.commonSpaceId,\n              limit.limitType as 'monthly' | 'yearly'\n            );\n\n            return {\n              ...limit,\n              currentHours: Math.round(currentHours * 100) / 100,\n              remainingHours: Math.max(0, limit.limitHours - currentHours),\n            };\n          })\n        );\n\n        res.json({\n          limits: limitsWithUsage,\n        });\n      } catch (error: any) {\n        console.error('❌ Error fetching time limits:', error);\n        res.status(500).json({\n          message: 'Failed to fetch time limits',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n\n  /**\n   * GET /api/common-spaces/user-calendar - Get user's personal calendar\n   * Shows all user's bookings across all spaces they have access to.\n   */\n  app.get('/api/common-spaces/user-calendar', requireAuth, async (req: any, res: Response) => {\n    try {\n      const user = req.user || req.session?.user;\n      if (!user) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      const queryValidation = calendarQuerySchema.safeParse(req.query);\n      if (!queryValidation.success) {\n        return res.status(400).json({\n          message: 'Invalid calendar query parameters',\n          errors: queryValidation.error.issues.map((issue) => ({\n            field: issue.path.join('.'),\n            message: issue.message,\n          })),\n        });\n      }\n\n      const { start_date, end_date, view } = queryValidation.data;\n\n      // Get user's bookings within date range\n      const userBookings = await db\n        .select({\n          id: bookings.id,\n          startTime: bookings.startTime,\n          endTime: bookings.endTime,\n          status: bookings.status,\n          spaceName: commonSpaces.name,\n          spaceId: commonSpaces.id,\n          buildingName: buildings.name,\n          buildingId: buildings.id,\n        })\n        .from(bookings)\n        .innerJoin(commonSpaces, eq(bookings.commonSpaceId, commonSpaces.id))\n        .innerJoin(buildings, eq(commonSpaces.buildingId, buildings.id))\n        .where(\n          and(\n            eq(bookings.userId, user.id),\n            eq(bookings.status, 'confirmed'),\n            gte(bookings.startTime, new Date(start_date)),\n            lte(bookings.endTime, new Date(end_date))\n          )\n        )\n        .orderBy(bookings.startTime);\n\n      res.json({\n        user: {\n          id: user.id,\n          name: `${user.firstName} ${user.lastName}`,\n          role: user.role,\n        },\n        calendar: {\n          view,\n          startDate: start_date,\n          endDate: end_date,\n          bookings: userBookings,\n        },\n        summary: {\n          totalBookings: userBookings.length,\n          totalHours: userBookings.reduce((total, booking) => {\n            const duration =\n              (new Date(booking.endTime).getTime() - new Date(booking.startTime).getTime()) /\n              (1000 * 60 * 60);\n            return total + duration;\n          }, 0),\n        },\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching user calendar:', error);\n      res.status(500).json({\n        message: 'Failed to fetch user calendar',\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  /**\n   * GET /api/common-spaces/calendar/building/:buildingId - Get building-wide calendar (Manager/Admin only)\n   * Shows all bookings across all spaces in a building with full details.\n   */\n  app.get(\n    '/api/common-spaces/calendar/building/:buildingId',\n    requireAuth,\n    requireRole(['admin', 'manager']),\n    async (req: any, res: Response) => {\n      try {\n        const user = req.user || req.session?.user;\n        if (!user) {\n          return res.status(401).json({\n            message: 'Authentication required',\n            code: 'AUTH_REQUIRED',\n          });\n        }\n\n        const paramValidation = z.object({ buildingId: z.string().uuid() }).safeParse(req.params);\n        if (!paramValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid building ID',\n            errors: paramValidation.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        const queryValidation = calendarQuerySchema.safeParse(req.query);\n        if (!queryValidation.success) {\n          return res.status(400).json({\n            message: 'Invalid calendar query parameters',\n            errors: queryValidation.error.issues.map((issue) => ({\n              field: issue.path.join('.'),\n              message: issue.message,\n            })),\n          });\n        }\n\n        const { buildingId } = paramValidation.data;\n        const { start_date, end_date, view } = queryValidation.data;\n\n        // Check building access\n        const accessibleBuildingIds = await getAccessibleBuildingIds(user);\n        if (!accessibleBuildingIds.includes(buildingId)) {\n          return res.status(403).json({\n            message: 'Access denied to this building',\n            code: 'INSUFFICIENT_PERMISSIONS',\n          });\n        }\n\n        // Get building details\n        const building = await db\n          .select({\n            id: buildings.id,\n            name: buildings.name,\n            address: buildings.address,\n          })\n          .from(buildings)\n          .where(eq(buildings.id, buildingId))\n          .limit(1);\n\n        if (building.length === 0) {\n          return res.status(404).json({\n            message: 'Building not found',\n            code: 'NOT_FOUND',\n          });\n        }\n\n        // Get all bookings for spaces in this building within date range\n        const buildingBookings = await db\n          .select({\n            id: bookings.id,\n            startTime: bookings.startTime,\n            endTime: bookings.endTime,\n            status: bookings.status,\n            spaceName: commonSpaces.name,\n            spaceId: commonSpaces.id,\n            userId: bookings.userId,\n            userName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n            userEmail: users.email,\n            userRole: users.role,\n          })\n          .from(bookings)\n          .innerJoin(commonSpaces, eq(bookings.commonSpaceId, commonSpaces.id))\n          .innerJoin(users, eq(bookings.userId, users.id))\n          .where(\n            and(\n              eq(commonSpaces.buildingId, buildingId),\n              eq(bookings.status, 'confirmed'),\n              gte(bookings.startTime, new Date(start_date)),\n              lte(bookings.endTime, new Date(end_date))\n            )\n          )\n          .orderBy(bookings.startTime);\n\n        // Get all common spaces in this building\n        const buildingSpaces = await db\n          .select({\n            id: commonSpaces.id,\n            name: commonSpaces.name,\n            isReservable: commonSpaces.isReservable,\n            capacity: commonSpaces.capacity,\n          })\n          .from(commonSpaces)\n          .where(eq(commonSpaces.buildingId, buildingId))\n          .orderBy(commonSpaces.name);\n\n        // Generate usage statistics\n        const spaceUsage = buildingSpaces.map((space) => {\n          const spaceBookings = buildingBookings.filter((booking) => booking.spaceId === space.id);\n          const totalHours = spaceBookings.reduce((total, booking) => {\n            const duration =\n              (new Date(booking.endTime).getTime() - new Date(booking.startTime).getTime()) /\n              (1000 * 60 * 60);\n            return total + duration;\n          }, 0);\n\n          return {\n            ...space,\n            bookingCount: spaceBookings.length,\n            totalHours: Math.round(totalHours * 10) / 10,\n            uniqueUsers: [...new Set(spaceBookings.map((b) => b.userId))].length,\n          };\n        });\n\n        res.json({\n          building: building[0],\n          calendar: {\n            view,\n            startDate: start_date,\n            endDate: end_date,\n            events: buildingBookings,\n          },\n          spaces: spaceUsage,\n          summary: {\n            totalBookings: buildingBookings.length,\n            totalSpaces: buildingSpaces.length,\n            activeSpaces: buildingSpaces.filter((s) => s.isReservable).length,\n            uniqueUsers: [...new Set(buildingBookings.map((b) => b.userId))].length,\n          },\n        });\n      } catch (error: any) {\n        console.error('❌ Error fetching building calendar:', error);\n        res.status(500).json({\n          message: 'Failed to fetch building calendar',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n  );\n}\n"],"version":3}