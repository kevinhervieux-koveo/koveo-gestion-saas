{"file":"/home/runner/workspace/server/api/feature-requests.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/feature-requests.ts"],"sourcesContent":["import type { Express } from 'express';\nimport { storage } from '../storage';\nimport {\n  insertFeatureRequestSchema,\n  insertFeatureRequestUpvoteSchema,\n  type FeatureRequest,\n  type InsertFeatureRequest,\n  type FeatureRequestUpvote,\n  type InsertFeatureRequestUpvote,\n} from '@shared/schema';\nimport { z } from 'zod';\nimport { requireAuth } from '../auth';\n\n/**\n * Registers all feature request related API endpoints.\n *\n * @param app - Express application instance.\n */\nexport function registerFeatureRequestRoutes(app: Express): void {\n  /**\n   * GET /api/feature-requests - Retrieves feature requests based on current user's role and access.\n   */\n  app.get('/api/feature-requests', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      console.log(\n        `📋 Fetching feature requests for user ${currentUser.id} with role ${currentUser.role}`\n      );\n\n      const featureRequests = await storage.getFeatureRequestsForUser(\n        currentUser.id,\n        currentUser.role,\n        currentUser.organizationId\n      );\n\n      console.log(`✅ Found ${featureRequests.length} feature requests for user ${currentUser.id}`);\n      res.json(featureRequests);\n    } catch (error: any) {\n      console.error('❌ Error fetching feature requests:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch feature requests',\n      });\n    }\n  });\n\n  /**\n   * GET /api/feature-requests/:id - Retrieves a specific feature request by ID.\n   */\n  app.get('/api/feature-requests/:id', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Feature request ID is required',\n        });\n      }\n\n      const featureRequest = await storage.getFeatureRequest(\n        id,\n        currentUser.id,\n        currentUser.role,\n        currentUser.organizationId\n      );\n\n      if (!featureRequest) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'Feature request not found or access denied',\n        });\n      }\n\n      res.json(featureRequest);\n    } catch (error: any) {\n      console.error('❌ Error fetching feature request:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to fetch feature request',\n      });\n    }\n  });\n\n  /**\n   * POST /api/feature-requests - Creates a new feature request.\n   */\n  app.post('/api/feature-requests', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Validate the request body\n      const validation = insertFeatureRequestSchema.safeParse({\n        ...req.body,\n        createdBy: currentUser.id,\n      });\n\n      if (!validation.success) {\n        return res.status(400).json({\n          error: 'Validation failed',\n          message: 'Invalid feature request data',\n          details: validation.error.issues,\n        });\n      }\n\n      const featureRequestData = validation.data;\n      const featureRequest = await storage.createFeatureRequest(featureRequestData);\n\n      console.log(`💡 Created new feature request ${featureRequest.id} by user ${currentUser.id}`);\n      res.status(201).json(featureRequest);\n    } catch (error: any) {\n      console.error('❌ Error creating feature request:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to create feature request',\n      });\n    }\n  });\n\n  /**\n   * PATCH /api/feature-requests/:id - Updates an existing feature request.\n   * Only admins can edit feature requests.\n   */\n  app.patch('/api/feature-requests/:id', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins can edit feature requests\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          error: 'Forbidden',\n          message: 'Only administrators can edit feature requests',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Feature request ID is required',\n        });\n      }\n\n      // Validate the request body\n      const updateSchema = z.object({\n        title: z\n          .string()\n          .min(1, 'Title is required')\n          .max(200, 'Title must not exceed 200 characters')\n          .optional(),\n        description: z\n          .string()\n          .min(10, 'Description must be at least 10 characters')\n          .max(2000, 'Description must not exceed 2000 characters')\n          .optional(),\n        need: z\n          .string()\n          .min(5, 'Need must be at least 5 characters')\n          .max(500, 'Need must not exceed 500 characters')\n          .optional(),\n        category: z\n          .enum([\n            'dashboard',\n            'property_management',\n            'resident_management',\n            'financial_management',\n            'maintenance',\n            'document_management',\n            'communication',\n            'reports',\n            'mobile_app',\n            'integrations',\n            'security',\n            'performance',\n            'other',\n          ])\n          .optional(),\n        page: z.string().min(1, 'Page is required').optional(),\n        status: z\n          .enum(['submitted', 'under_review', 'planned', 'in_progress', 'completed', 'rejected'])\n          .optional(),\n        assignedTo: z.string().uuid().nullable().optional(),\n        adminNotes: z.string().optional(),\n        mergedIntoId: z.string().uuid().nullable().optional(),\n      });\n\n      const validation = updateSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({\n          error: 'Validation failed',\n          message: 'Invalid update data',\n          details: validation.error.issues,\n        });\n      }\n\n      const updates = validation.data;\n      const featureRequest = await storage.updateFeatureRequest(\n        id,\n        updates,\n        currentUser.id,\n        currentUser.role\n      );\n\n      if (!featureRequest) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'Feature request not found or access denied',\n        });\n      }\n\n      console.log(`📝 Updated feature request ${id} by user ${currentUser.id}`);\n      res.json(featureRequest);\n    } catch (error: any) {\n      console.error('❌ Error updating feature request:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to update feature request',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/feature-requests/:id - Deletes a feature request.\n   * Only admins can delete feature requests.\n   */\n  app.delete('/api/feature-requests/:id', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Only admins can delete feature requests\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          error: 'Forbidden',\n          message: 'Only administrators can delete feature requests',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Feature request ID is required',\n        });\n      }\n\n      const deleted = await storage.deleteFeatureRequest(id, currentUser.id, currentUser.role);\n\n      if (!deleted) {\n        return res.status(404).json({\n          error: 'Not found',\n          message: 'Feature request not found or access denied',\n        });\n      }\n\n      console.log(`🗑️ Deleted feature request ${id} by user ${currentUser.id}`);\n      res.status(204).send();\n    } catch (error: any) {\n      console.error('❌ Error deleting feature request:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to delete feature request',\n      });\n    }\n  });\n\n  /**\n   * POST /api/feature-requests/:id/upvote - Upvotes a feature request.\n   * Users can upvote any feature request (only once per user).\n   */\n  app.post('/api/feature-requests/:id/upvote', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Feature request ID is required',\n        });\n      }\n\n      // Validate the upvote data\n      const validation = insertFeatureRequestUpvoteSchema.safeParse({\n        featureRequestId: id,\n        userId: currentUser.id,\n      });\n\n      if (!validation.success) {\n        return res.status(400).json({\n          error: 'Validation failed',\n          message: 'Invalid upvote data',\n          details: validation.error.issues,\n        });\n      }\n\n      const upvoteData = validation.data;\n      const result = await storage.upvoteFeatureRequest(upvoteData);\n\n      if (!result.success) {\n        return res.status(400).json({\n          error: 'Upvote failed',\n          message: result.message,\n        });\n      }\n\n      console.log(`👍 User ${currentUser.id} upvoted feature request ${id}`);\n      res.json(result.data);\n    } catch (error: any) {\n      console.error('❌ Error upvoting feature request:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to upvote feature request',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/feature-requests/:id/upvote - Removes an upvote from a feature request.\n   * Users can remove their own upvote.\n   */\n  app.delete('/api/feature-requests/:id/upvote', requireAuth, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const currentUser = req.user || req.session?.user;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (!id) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Feature request ID is required',\n        });\n      }\n\n      const result = await storage.removeFeatureRequestUpvote(id, currentUser.id);\n\n      if (!result.success) {\n        return res.status(400).json({\n          error: 'Remove upvote failed',\n          message: result.message,\n        });\n      }\n\n      console.log(`👎 User ${currentUser.id} removed upvote from feature request ${id}`);\n      res.json(result.data);\n    } catch (error: any) {\n      console.error('❌ Error removing upvote from feature request:', error);\n      res.status(500).json({\n        error: 'Internal server error',\n        message: 'Failed to remove upvote from feature request',\n      });\n    }\n  });\n}\n"],"version":3}