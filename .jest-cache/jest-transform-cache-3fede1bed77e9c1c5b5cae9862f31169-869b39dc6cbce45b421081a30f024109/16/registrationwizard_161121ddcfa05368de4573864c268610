3b9117d0e4e461ec75f1cdec78e0f7f8
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistrationWizard = RegistrationWizard;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const progress_1 = require("@/components/ui/progress");
const badge_1 = require("@/components/ui/badge");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
/**
 * Multi-Step Registration Wizard Component.
 *
 * Provides a guided registration flow with step validation,
 * progress tracking, and Quebec compliance features.
 * @param root0 - Component props object.
 * @param root0.steps - Array of wizard steps to render.
 * @param root0.initialData - Initial data for the wizard.
 * @param root0.onComplete - Function called when wizard is completed.
 * @param root0.onCancel - Function called when wizard is cancelled.
 * @param root0.title - Optional title for the wizard.
 * @param root0.className - Optional CSS class name.
 * @returns JSX element for the registration wizard.
 */
function RegistrationWizard({ steps: initialSteps, initialData = {}, onComplete, onCancel, title = 'Inscription', className = '', }) {
    const { t: _t } = (0, use_language_1.useLanguage)();
    const [currentStepIndex, setCurrentStepIndex] = (0, react_1.useState)(0);
    const [steps, setSteps] = (0, react_1.useState)(initialSteps);
    const [wizardData, setWizardData] = (0, react_1.useState)(initialData);
    const [isSubmitting, setIsSubmitting] = (0, react_1.useState)(false);
    const currentStep = steps[currentStepIndex];
    const isFirstStep = currentStepIndex === 0;
    const isLastStep = currentStepIndex === steps.length - 1;
    const completedSteps = steps.filter((step) => step.isComplete).length;
    const progress = (completedSteps / steps.length) * 100;
    // Update step validation status
    const updateStepValidation = (stepId, isValid) => {
        setSteps((prevSteps) => prevSteps.map((step) => (step.id === stepId ? { ...step, isValid } : step)));
    };
    // Update step completion status
    const updateStepCompletion = (stepId, isComplete) => {
        setSteps((prevSteps) => prevSteps.map((step) => (step.id === stepId ? { ...step, isComplete } : step)));
    };
    // Handle data changes from step components - memoized to prevent infinite loops
    const handleDataChange = (0, react_1.useCallback)((stepData) => {
        setWizardData((prevData) => ({
            ...prevData,
            [currentStep.id]: stepData,
        }));
    }, [currentStep.id]);
    // Handle validation changes from step components - memoized to prevent infinite loops
    const handleValidationChange = (0, react_1.useCallback)((isValid) => {
        setSteps((prevSteps) => prevSteps.map((step) => (step.id === currentStep.id ? { ...step, isValid } : step)));
        // Auto-complete step if valid and has required data
        if (isValid) {
            setSteps((prevSteps) => prevSteps.map((step) => (step.id === currentStep.id ? { ...step, isComplete: true } : step)));
        }
    }, [currentStep.id]);
    // Navigate to next step
    const handleNext = () => {
        if (currentStep.isValid && !isLastStep) {
            updateStepCompletion(currentStep.id, true);
            setCurrentStepIndex((prev) => prev + 1);
        }
        else if (isLastStep && currentStep.isValid) {
            handleComplete();
        }
    };
    // Navigate to previous step
    const handlePrevious = () => {
        if (!isFirstStep) {
            setCurrentStepIndex((prev) => prev - 1);
        }
    };
    // Complete the wizard
    const handleComplete = async () => {
        setIsSubmitting(true);
        try {
            // Combine all wizard data
            const completeData = {
                ...wizardData,
                [currentStep.id]: wizardData[currentStep.id] || {},
            };
            await onComplete(completeData);
            // Only mark final step as complete after successful submission
            updateStepCompletion(currentStep.id, true);
        }
        catch (error) {
            console.error('Wizard completion error:', error);
            // Reset step completion on error to allow retry
            updateStepCompletion(currentStep.id, false);
        }
        finally {
            setIsSubmitting(false);
        }
    };
    // Jump to specific step (only if previous steps are complete)
    const jumpToStep = (stepIndex) => {
        // Can only go to completed steps or the next uncompleted step
        const canJump = stepIndex <= currentStepIndex || steps.slice(0, stepIndex).every((step) => step.isComplete);
        if (canJump) {
            setCurrentStepIndex(stepIndex);
        }
    };
    return ((0, jsx_runtime_1.jsx)("div", { className: `max-w-4xl mx-auto p-6 ${className}`, children: (0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'shadow-xl border-0', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { className: 'text-center pb-6', children: [(0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-2xl font-bold text-gray-900', children: title }), (0, jsx_runtime_1.jsxs)("div", { className: 'mt-4', children: [(0, jsx_runtime_1.jsx)(progress_1.Progress, { value: progress, className: 'h-2' }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600 mt-2', children: ["\u00C9tape ", currentStepIndex + 1, " sur ", steps.length, " \u2022 ", Math.round(progress), "% termin\u00E9"] })] })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-6', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex justify-center', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center space-x-2 md:space-x-4 overflow-x-auto pb-2', children: steps.map((step, _index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center', children: [(0, jsx_runtime_1.jsx)("button", { onClick: () => jumpToStep(_index), disabled: _index > currentStepIndex &&
                                                !steps.slice(0, _index).every((s) => s.isComplete), className: `
                      flex items-center justify-center w-8 h-8 rounded-full border-2 transition-all
                      ${_index === currentStepIndex
                                                ? 'border-primary bg-primary text-white'
                                                : step.isComplete
                                                    ? 'border-green-500 bg-green-500 text-white cursor-pointer hover:bg-green-600'
                                                    : 'border-gray-300 bg-white text-gray-400'}
                      ${_index <= currentStepIndex || step.isComplete ? 'cursor-pointer' : 'cursor-not-allowed'}
                    `, "aria-label": `${step.title} - ${step.isComplete ? 'TerminÃ©' : _index === currentStepIndex ? 'En cours' : 'En attente'}`, children: step.isComplete ? ((0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'w-5 h-5' })) : ((0, jsx_runtime_1.jsx)("span", { className: 'text-sm font-medium', children: _index + 1 })) }), _index < steps.length - 1 && ((0, jsx_runtime_1.jsx)("div", { className: `w-8 md:w-16 h-0.5 ${steps[_index + 1].isComplete || _index < currentStepIndex
                                                ? 'bg-green-500'
                                                : 'bg-gray-300'}` }))] }, step.id))) }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'min-h-[400px]', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'text-center mb-6', children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-xl font-semibold text-gray-900 mb-2', children: currentStep.title }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600', children: currentStep.description }), currentStep.isValid && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'secondary', className: 'mt-2 bg-green-100 text-green-800', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: 'w-4 h-4 mr-1' }), "Valid\u00E9"] }))] }), (0, jsx_runtime_1.jsx)(currentStep.component, { _data: wizardData[currentStep.id] || {}, onDataChange: handleDataChange, onValidationChange: handleValidationChange, onNext: handleNext, onPrevious: handlePrevious, isActive: true })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between pt-6 border-t border-gray-200', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex space-x-3', children: [!isFirstStep && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handlePrevious, variant: 'outline', className: 'flex items-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), "Pr\u00E9c\u00E9dent"] })), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: onCancel, variant: 'ghost', className: 'text-gray-600', children: "Annuler" })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: handleNext, disabled: !currentStep.isValid || isSubmitting, className: 'flex items-center min-w-[120px]', children: isSubmitting ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2' }), "Traitement..."] })) : isLastStep ? ('Terminer') : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: ["Suivant", (0, jsx_runtime_1.jsx)(lucide_react_1.ArrowRight, { className: 'w-4 h-4 ml-2' })] })) })] })] })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,