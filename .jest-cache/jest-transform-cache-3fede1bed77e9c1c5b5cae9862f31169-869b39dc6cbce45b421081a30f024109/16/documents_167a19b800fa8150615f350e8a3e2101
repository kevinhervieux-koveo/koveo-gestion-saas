cba7629c9cc3d03632072e597dc53d67
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertDocumentSchema = exports.documents = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const pg_core_1 = require("drizzle-orm/pg-core");
const zod_1 = require("zod");
const property_1 = require("./property");
// Unified documents table
/**
 * Unified documents table for all document types across the system.
 * Stores documents that can be associated with either residences, buildings, or neither.
 */
exports.documents = (0, pg_core_1.pgTable)('documents', {
    id: (0, pg_core_1.varchar)('id')
        .primaryKey()
        .default((0, drizzle_orm_1.sql) `gen_random_uuid()`),
    name: (0, pg_core_1.text)('name').notNull(),
    description: (0, pg_core_1.text)('description'),
    documentType: (0, pg_core_1.text)('document_type').notNull(),
    filePath: (0, pg_core_1.text)('file_path').notNull().unique(),
    isVisibleToTenants: (0, pg_core_1.boolean)('is_visible_to_tenants').default(false).notNull(),
    residenceId: (0, pg_core_1.varchar)('residence_id').references(() => property_1.residences.id),
    buildingId: (0, pg_core_1.varchar)('building_id').references(() => property_1.buildings.id),
    uploadedById: (0, pg_core_1.varchar)('uploaded_by_id').notNull(),
    createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow().notNull(),
    updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow().notNull(),
});
// Unified document schema
exports.insertDocumentSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Document name is required'),
    description: zod_1.z.string().optional(),
    documentType: zod_1.z.string().min(1, 'Document type is required'),
    filePath: zod_1.z.string().min(1, 'File path is required'),
    isVisibleToTenants: zod_1.z.boolean().default(false),
    residenceId: zod_1.z.string().uuid().optional(),
    buildingId: zod_1.z.string().uuid().optional(),
    uploadedById: zod_1.z.string().uuid().min(1, 'Uploaded by user ID is required'),
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zaGFyZWQvc2NoZW1hcy9kb2N1bWVudHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQWtDO0FBQ2xDLGlEQUF1RjtBQUV2Riw2QkFBd0I7QUFDeEIseUNBQW1EO0FBR25ELDBCQUEwQjtBQUMxQjs7O0dBR0c7QUFDVSxRQUFBLFNBQVMsR0FBRyxJQUFBLGlCQUFPLEVBQUMsV0FBVyxFQUFFO0lBQzVDLEVBQUUsRUFBRSxJQUFBLGlCQUFPLEVBQUMsSUFBSSxDQUFDO1NBQ2QsVUFBVSxFQUFFO1NBQ1osT0FBTyxDQUFDLElBQUEsaUJBQUcsRUFBQSxtQkFBbUIsQ0FBQztJQUNsQyxJQUFJLEVBQUUsSUFBQSxjQUFJLEVBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFO0lBQzVCLFdBQVcsRUFBRSxJQUFBLGNBQUksRUFBQyxhQUFhLENBQUM7SUFDaEMsWUFBWSxFQUFFLElBQUEsY0FBSSxFQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUM3QyxRQUFRLEVBQUUsSUFBQSxjQUFJLEVBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFO0lBQzlDLGtCQUFrQixFQUFFLElBQUEsaUJBQU8sRUFBQyx1QkFBdUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUU7SUFDN0UsV0FBVyxFQUFFLElBQUEsaUJBQU8sRUFBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMscUJBQVUsQ0FBQyxFQUFFLENBQUM7SUFDcEUsVUFBVSxFQUFFLElBQUEsaUJBQU8sRUFBQyxhQUFhLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsb0JBQVMsQ0FBQyxFQUFFLENBQUM7SUFDakUsWUFBWSxFQUFFLElBQUEsaUJBQU8sRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sRUFBRTtJQUNqRCxTQUFTLEVBQUUsSUFBQSxtQkFBUyxFQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sRUFBRTtJQUN6RCxTQUFTLEVBQUUsSUFBQSxtQkFBUyxFQUFDLFlBQVksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLE9BQU8sRUFBRTtDQUMxRCxDQUFDLENBQUM7QUFFSCwwQkFBMEI7QUFDYixRQUFBLG9CQUFvQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDM0MsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDJCQUEyQixDQUFDO0lBQ3BELFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0lBQ2xDLFlBQVksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSwyQkFBMkIsQ0FBQztJQUM1RCxRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsdUJBQXVCLENBQUM7SUFDcEQsa0JBQWtCLEVBQUUsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7SUFDOUMsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDekMsVUFBVSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDeEMsWUFBWSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLGlDQUFpQyxDQUFDO0NBQzFFLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NoYXJlZC9zY2hlbWFzL2RvY3VtZW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcWwgfSBmcm9tICdkcml6emxlLW9ybSc7XG5pbXBvcnQgeyBwZ1RhYmxlLCB0ZXh0LCB0aW1lc3RhbXAsIGJvb2xlYW4sIHZhcmNoYXIsIHV1aWQgfSBmcm9tICdkcml6emxlLW9ybS9wZy1jb3JlJztcbmltcG9ydCB7IGNyZWF0ZUluc2VydFNjaGVtYSB9IGZyb20gJ2RyaXp6bGUtem9kJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgYnVpbGRpbmdzLCByZXNpZGVuY2VzIH0gZnJvbSAnLi9wcm9wZXJ0eSc7XG5cblxuLy8gVW5pZmllZCBkb2N1bWVudHMgdGFibGVcbi8qKlxuICogVW5pZmllZCBkb2N1bWVudHMgdGFibGUgZm9yIGFsbCBkb2N1bWVudCB0eXBlcyBhY3Jvc3MgdGhlIHN5c3RlbS5cbiAqIFN0b3JlcyBkb2N1bWVudHMgdGhhdCBjYW4gYmUgYXNzb2NpYXRlZCB3aXRoIGVpdGhlciByZXNpZGVuY2VzLCBidWlsZGluZ3MsIG9yIG5laXRoZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBkb2N1bWVudHMgPSBwZ1RhYmxlKCdkb2N1bWVudHMnLCB7XG4gIGlkOiB2YXJjaGFyKCdpZCcpXG4gICAgLnByaW1hcnlLZXkoKVxuICAgIC5kZWZhdWx0KHNxbGBnZW5fcmFuZG9tX3V1aWQoKWApLFxuICBuYW1lOiB0ZXh0KCduYW1lJykubm90TnVsbCgpLFxuICBkZXNjcmlwdGlvbjogdGV4dCgnZGVzY3JpcHRpb24nKSxcbiAgZG9jdW1lbnRUeXBlOiB0ZXh0KCdkb2N1bWVudF90eXBlJykubm90TnVsbCgpLFxuICBmaWxlUGF0aDogdGV4dCgnZmlsZV9wYXRoJykubm90TnVsbCgpLnVuaXF1ZSgpLFxuICBpc1Zpc2libGVUb1RlbmFudHM6IGJvb2xlYW4oJ2lzX3Zpc2libGVfdG9fdGVuYW50cycpLmRlZmF1bHQoZmFsc2UpLm5vdE51bGwoKSxcbiAgcmVzaWRlbmNlSWQ6IHZhcmNoYXIoJ3Jlc2lkZW5jZV9pZCcpLnJlZmVyZW5jZXMoKCkgPT4gcmVzaWRlbmNlcy5pZCksXG4gIGJ1aWxkaW5nSWQ6IHZhcmNoYXIoJ2J1aWxkaW5nX2lkJykucmVmZXJlbmNlcygoKSA9PiBidWlsZGluZ3MuaWQpLFxuICB1cGxvYWRlZEJ5SWQ6IHZhcmNoYXIoJ3VwbG9hZGVkX2J5X2lkJykubm90TnVsbCgpLFxuICBjcmVhdGVkQXQ6IHRpbWVzdGFtcCgnY3JlYXRlZF9hdCcpLmRlZmF1bHROb3coKS5ub3ROdWxsKCksXG4gIHVwZGF0ZWRBdDogdGltZXN0YW1wKCd1cGRhdGVkX2F0JykuZGVmYXVsdE5vdygpLm5vdE51bGwoKSxcbn0pO1xuXG4vLyBVbmlmaWVkIGRvY3VtZW50IHNjaGVtYVxuZXhwb3J0IGNvbnN0IGluc2VydERvY3VtZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICBuYW1lOiB6LnN0cmluZygpLm1pbigxLCAnRG9jdW1lbnQgbmFtZSBpcyByZXF1aXJlZCcpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBkb2N1bWVudFR5cGU6IHouc3RyaW5nKCkubWluKDEsICdEb2N1bWVudCB0eXBlIGlzIHJlcXVpcmVkJyksXG4gIGZpbGVQYXRoOiB6LnN0cmluZygpLm1pbigxLCAnRmlsZSBwYXRoIGlzIHJlcXVpcmVkJyksXG4gIGlzVmlzaWJsZVRvVGVuYW50czogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gIHJlc2lkZW5jZUlkOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICBidWlsZGluZ0lkOiB6LnN0cmluZygpLnV1aWQoKS5vcHRpb25hbCgpLFxuICB1cGxvYWRlZEJ5SWQ6IHouc3RyaW5nKCkudXVpZCgpLm1pbigxLCAnVXBsb2FkZWQgYnkgdXNlciBJRCBpcyByZXF1aXJlZCcpLFxufSk7XG5cbi8qKlxuICogSW5zZXJ0IHR5cGUgZm9yIHVuaWZpZWQgZG9jdW1lbnRzXG4gKi9cbmV4cG9ydCB0eXBlIEluc2VydERvY3VtZW50ID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0RG9jdW1lbnRTY2hlbWE+O1xuXG4vKipcbiAqIFNlbGVjdCB0eXBlIGZvciB1bmlmaWVkIGRvY3VtZW50c1xuICovXG5leHBvcnQgdHlwZSBEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudHMuJGluZmVyU2VsZWN0O1xuIl0sInZlcnNpb24iOjN9