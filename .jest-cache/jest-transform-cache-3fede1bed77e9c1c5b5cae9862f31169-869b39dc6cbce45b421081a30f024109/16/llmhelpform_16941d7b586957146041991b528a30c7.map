{"file":"/home/runner/workspace/client/src/components/roadmap/llm-help-form.tsx","mappings":";;AAOA,kDAsHC;AA7HD;;GAEG;AACH;;;GAGG;AACH,SAAgB,mBAAmB;IACjC,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAoHwB,CAAC;AAClC,CAAC","names":[],"sources":["/home/runner/workspace/client/src/components/roadmap/llm-help-form.tsx"],"sourcesContent":["/**\n * Generates and copies the LLM help form for feature discussions.\n */\n/**\n * GenerateLLMHelpForm function.\n * @returns Function result.\n */\nexport function generateLLMHelpForm(): string {\n  return `# Koveo Gestion Feature Development Discussion Form\n\n## üìñ APPLICATION CONTEXT\n**Koveo Gestion** is a comprehensive property management platform for Quebec residential communities.\n\n### Tech Stack:\n- **Frontend**: React 18 with TypeScript, Vite, shadcn/ui components, Tailwind CSS\n- **Backend**: Express.js with TypeScript, RESTful API\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Express sessions with PostgreSQL session store\n- **Validation**: Zod schemas for runtime type validation\n- **State Management**: TanStack Query for server state, React Hook Form for forms\n\n### Key Patterns:\n- Monorepo structure with shared types between frontend and backend\n- Type-safe database operations with Drizzle ORM\n- Comprehensive validation with Zod schemas\n- Internationalization supporting French and English\n- Role-based access control (admin, manager, owner, tenant)\n\n### Database Schema includes:\n- Users, Organizations, Buildings, Residences\n- Bills, Maintenance Requests, Budgets\n- Documents, Notifications\n- Features and Actionable Items for roadmap management\n\n### Security Considerations:\n- Quebec Law 25 compliance required\n- Secure authentication with bcrypt password hashing\n- Session management with secure cookies\n- Input validation and sanitization\n\n---\n\n## üéØ Feature Overview\n**What feature do you want to build?**\n[Describe the feature in one sentence]\n\n**What problem does this solve?**\n[Explain the user problem or business need]\n\n## üë• User Context\n**Who will use this feature?**\n[Target users: Property managers, Tenants, Owners, etc.]\n\n**How will they use it?**\n[Describe the user's workflow and interaction]\n\n## üìã Requirements\n**What should this feature do? (List 3-5 key capabilities)**\n1. \n2. \n3. \n4. \n5. \n\n**What should this feature NOT do? (Any constraints or boundaries)**\n- \n- \n- \n\n## üîß Technical Considerations\n**Does this feature need to:**\n- [ ] Store new data in the database?\n- [ ] Create new API endpoints?\n- [ ] Add new UI components?\n- [ ] Integrate with external services?\n- [ ] Handle file uploads?\n- [ ] Send notifications?\n- [ ] Support Quebec Law 25 compliance?\n- [ ] Work in both French and English?\n\n**Database Changes Needed:**\n[Describe any new tables or columns needed]\n\n**API Endpoints Needed:**\n[List any new routes like GET /api/new-feature]\n\n## üé® User Experience\n**How should this look and feel?**\n[Describe the UI/UX requirements]\n\n**What pages or components are involved?**\n[List the specific parts of the app this affects]\n\n## üîç Acceptance Criteria\n**How will we know this feature works correctly?**\n1. \n2. \n3. \n\n**Edge cases to consider:**\n- \n- \n- \n\n## üìä Success Metrics\n**How will we measure if this feature is successful?**\n[Describe measurable outcomes]\n\n## üöÄ Implementation Notes\n**Any specific technical requirements or constraints:**\n[Add any additional context or requirements]\n\n---\n\n## üí° Tips for AI Implementation\n- Start with the database schema changes first\n- Create API endpoints before frontend components\n- Use existing patterns from the codebase\n- Test with real data scenarios\n- Ensure proper error handling\n- Consider mobile responsiveness\n- Add proper loading states\n- Include user feedback/toast notifications\n- Follow accessibility guidelines\n- Test role-based access control`;\n}\n"],"version":3}