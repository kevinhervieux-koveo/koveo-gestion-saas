f5cf8c3f1d6ea3c3109567883dcd52b2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const date_fns_1 = require("date-fns");
const locale_1 = require("date-fns/locale");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const withHierarchicalSelection_1 = require("@/components/hoc/withHierarchicalSelection");
const wouter_1 = require("wouter");
const dialog_1 = require("@/components/ui/dialog");
const form_1 = require("@/components/ui/form");
const tooltip_1 = require("@/components/ui/tooltip");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
const use_auth_1 = require("@/hooks/use-auth");
const use_language_1 = require("@/hooks/use-language");
const queryClient_1 = require("@/lib/queryClient");
const common_space_calendar_1 = require("@/components/common-spaces/common-space-calendar");
/**
 * Booking form schema.
 */
const bookingFormSchema = zod_2.z
    .object({
    date: zod_2.z.date({
        message: 'Please select a booking date from the calendar',
    }),
    startTime: zod_2.z.string().min(1, 'Start time is required (example: 09:00)').regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Start time must be in HH:MM format (example: 09:00)'),
    endTime: zod_2.z.string().min(1, 'End time is required (example: 11:00)').regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'End time must be in HH:MM format (example: 11:00)'),
})
    .refine((data) => {
    const start = (0, date_fns_1.parse)(data.startTime, 'HH:mm', new Date());
    const end = (0, date_fns_1.parse)(data.endTime, 'HH:mm', new Date());
    return end > start;
}, {
    message: 'End time must be after start time (example: start at 09:00, end at 11:00)',
    path: ['endTime'],
});
/**
 *
 * @param root0
 * @param root0.selected
 * @param root0.onSelect
 * @param root0.space
 * @param root0.bookings
 * @param root0.language
 * @param root0.'data-testid'
 */
function BookingCalendar({ selected, onSelect, space, bookings, language, 'data-testid': testId, }) {
    const [currentDate, setCurrentDate] = (0, react_1.useState)(selected || new Date());
    const monthDays = (0, react_1.useMemo)(() => {
        const start = (0, date_fns_1.startOfMonth)(currentDate);
        const end = (0, date_fns_1.endOfMonth)(currentDate);
        return (0, date_fns_1.eachDayOfInterval)({ start, end });
    }, [currentDate]);
    const getBookingsForDay = (day) => {
        return bookings.filter((booking) => (0, date_fns_1.isSameDay)((0, date_fns_1.parseISO)(booking.startTime), day) && booking.status === 'confirmed');
    };
    const isDayAvailable = (day) => {
        // Past dates are not available
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const checkDay = new Date(day);
        checkDay.setHours(0, 0, 0, 0);
        if (checkDay < today) {
            return false;
        }
        // Check if day falls within any unavailable periods
        if (space.unavailablePeriods && Array.isArray(space.unavailablePeriods)) {
            for (const period of space.unavailablePeriods) {
                const startDate = new Date(period.startDate);
                const endDate = new Date(period.endDate);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 999);
                if (checkDay >= startDate && checkDay <= endDate) {
                    return false;
                }
            }
        }
        // Check opening hours if available
        if (space.openingHours && Array.isArray(space.openingHours)) {
            const dayName = day.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            const todayHours = space.openingHours.find((h) => h.day.toLowerCase() === dayName);
            // If no hours defined for this day, it's unavailable
            if (!todayHours) {
                return false;
            }
            // If explicitly marked as closed
            if (todayHours.isOpen === false) {
                return false;
            }
        }
        return true;
    };
    const goToPrevMonth = () => {
        setCurrentDate((prev) => {
            const newDate = new Date(prev);
            newDate.setMonth(prev.getMonth() - 1);
            return newDate;
        });
    };
    const goToNextMonth = () => {
        setCurrentDate((prev) => {
            const newDate = new Date(prev);
            newDate.setMonth(prev.getMonth() + 1);
            return newDate;
        });
    };
    return ((0, jsx_runtime_1.jsx)(tooltip_1.TooltipProvider, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'border rounded-md bg-white', "data-testid": testId, children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between p-3 border-b', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: goToPrevMonth, className: 'h-8 w-8 p-0', children: (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeft, { className: 'h-4 w-4' }) }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-sm font-semibold', children: (0, date_fns_1.format)(currentDate, 'MMMM yyyy', { locale: language === 'fr' ? locale_1.fr : undefined }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: goToNextMonth, className: 'h-8 w-8 p-0', children: (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: 'h-4 w-4' }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'p-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-7 gap-1 mb-2', children: [
                                language === 'fr' ? 'L' : 'M',
                                language === 'fr' ? 'M' : 'T',
                                language === 'fr' ? 'M' : 'W',
                                language === 'fr' ? 'J' : 'T',
                                language === 'fr' ? 'V' : 'F',
                                language === 'fr' ? 'S' : 'S',
                                language === 'fr' ? 'D' : 'S',
                            ].map((day, index) => ((0, jsx_runtime_1.jsx)("div", { className: 'p-1 text-center text-xs font-medium text-gray-500', children: day }, index))) }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-7 gap-1', children: monthDays.map((day, index) => {
                                const dayBookings = getBookingsForDay(day);
                                const isCurrentDay = (0, date_fns_1.isToday)(day);
                                const isSelected = selected && (0, date_fns_1.isSameDay)(day, selected);
                                const isAvailable = isDayAvailable(day);
                                return ((0, jsx_runtime_1.jsxs)(tooltip_1.Tooltip, { children: [(0, jsx_runtime_1.jsx)(tooltip_1.TooltipTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)("div", { className: `
                        h-8 p-1 text-xs rounded cursor-pointer transition-colors flex items-center justify-center
                        ${!isAvailable
                                                    ? 'bg-red-100 text-red-600 cursor-not-allowed border border-red-200'
                                                    : isSelected
                                                        ? 'bg-blue-600 text-white'
                                                        : isCurrentDay
                                                            ? 'bg-blue-100 text-blue-900 hover:bg-blue-200'
                                                            : dayBookings.length > 0
                                                                ? 'bg-orange-100 text-orange-900 hover:bg-orange-200'
                                                                : 'hover:bg-gray-100'}
                      `, onClick: () => isAvailable && onSelect(day), children: [(0, jsx_runtime_1.jsx)("span", { className: 'font-medium', children: (0, date_fns_1.format)(day, 'd') }), dayBookings.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: 'absolute -mt-3 -mr-1', children: (0, jsx_runtime_1.jsx)("div", { className: 'w-1.5 h-1.5 bg-orange-500 rounded-full' }) }))] }) }), (0, jsx_runtime_1.jsx)(tooltip_1.TooltipContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1', children: [(0, jsx_runtime_1.jsx)("p", { className: 'font-medium', children: (0, date_fns_1.format)(day, 'EEEE, d MMMM yyyy', {
                                                            locale: language === 'fr' ? locale_1.fr : undefined,
                                                        }) }), !isAvailable && ((0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-red-500', children: language === 'fr' ? 'Non disponible' : 'Not available' })), dayBookings.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-xs', children: [(0, jsx_runtime_1.jsxs)("p", { className: 'text-orange-600', children: [dayBookings.length, ' ', language === 'fr' ? 'rÃ©servation(s)' : 'booking(s)'] }), dayBookings.slice(0, 2).map((booking, idx) => ((0, jsx_runtime_1.jsxs)("p", { className: 'text-gray-600', children: [(0, date_fns_1.format)((0, date_fns_1.parseISO)(booking.startTime), 'HH:mm'), " -", ' ', (0, date_fns_1.format)((0, date_fns_1.parseISO)(booking.endTime), 'HH:mm')] }, idx))), dayBookings.length > 2 && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-gray-500', children: ["+", dayBookings.length - 2, " ", language === 'fr' ? 'autres' : 'more'] }))] }))] }) })] }, index));
                            }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-center gap-4 mt-3 pt-2 border-t text-xs', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-2 h-2 bg-blue-600 rounded' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-gray-600', children: language === 'fr' ? 'SÃ©lectionnÃ©' : 'Selected' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-2 h-2 bg-orange-500 rounded' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-gray-600', children: language === 'fr' ? 'RÃ©servÃ©' : 'Booked' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-2 h-2 bg-red-500 rounded' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-gray-600', children: language === 'fr' ? 'Non disponible' : 'Unavailable' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-2 h-2 bg-blue-200 rounded' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-gray-600', children: language === 'fr' ? "Aujourd'hui" : 'Today' })] })] })] })] }) }));
}
/**
 * Utility function to generate .ics calendar content.
 * @param bookings
 * @param allSpaces
 */
function generateICS(bookings, allSpaces) {
    const now = new Date();
    const icsHeader = [
        'BEGIN:VCALENDAR',
        'VERSION:2.0',
        'PRODID:-//Koveo Gestion//Common Spaces//FR',
        'CALSCALE:GREGORIAN',
        'METHOD:PUBLISH',
    ].join('\r\n');
    const icsEvents = bookings.map((booking) => {
        const startDate = new Date(booking.startTime);
        const endDate = new Date(booking.endTime);
        // Format dates for ICS (YYYYMMDDTHHMMSSZ)
        const formatICSDate = (date) => {
            return date
                .toISOString()
                .replace(/[-:]/g, '')
                .replace(/\.\d{3}/, '');
        };
        const title = allSpaces ? `RÃ©servation d'espace commun` : `Espace commun rÃ©servÃ©`;
        return [
            'BEGIN:VEVENT',
            `UID:${booking.id}@koveogestion.com`,
            `DTSTAMP:${formatICSDate(now)}`,
            `DTSTART:${formatICSDate(startDate)}`,
            `DTEND:${formatICSDate(endDate)}`,
            `SUMMARY:${title}`,
            `DESCRIPTION:RÃ©servation confirmÃ©e pour un espace commun`,
            'STATUS:CONFIRMED',
            'END:VEVENT',
        ].join('\r\n');
    });
    const icsFooter = 'END:VCALENDAR';
    return [icsHeader, ...icsEvents, icsFooter].join('\r\n');
}
/**
 * Common Spaces page component for residents.
 */
function CommonSpacesPageInner({ buildingId, showBackButton, backButtonLabel, onBack }) {
    const { user } = (0, use_auth_1.useAuth)();
    const { language } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [, navigate] = (0, wouter_1.useLocation)();
    const [selectedSpace, setSelectedSpace] = (0, react_1.useState)(null);
    const [selectedDate, setSelectedDate] = (0, react_1.useState)(new Date());
    const [isBookingDialogOpen, setIsBookingDialogOpen] = (0, react_1.useState)(false);
    const [expandedSpaceId, setExpandedSpaceId] = (0, react_1.useState)(null);
    const [preSelectedDate, setPreSelectedDate] = (0, react_1.useState)(null);
    // Form for booking creation
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(bookingFormSchema),
        defaultValues: {
            date: new Date(),
            startTime: '09:00',
            endTime: '10:00',
        },
    });
    // Back navigation is now handled by the HOC
    // Fetch common spaces in user's buildings (filtered by building if provided)
    const { data: commonSpaces = [], isLoading: spacesLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/common-spaces', buildingId],
        queryFn: async () => {
            const url = buildingId ? `/api/common-spaces?building_id=${buildingId}` : '/api/common-spaces';
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error('Failed to fetch common spaces');
            }
            return response.json();
        },
        enabled: !!user && !!buildingId,
    });
    // Fetch bookings for selected space
    const { data: bookings = [], isLoading: bookingsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/common-spaces', selectedSpace?.id, 'bookings'],
        enabled: !!selectedSpace,
    });
    // Fetch all user's bookings for export
    const { data: userBookings = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/common-spaces/my-bookings'],
        enabled: !!user,
    });
    // Create booking mutation
    const createBookingMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            if (!selectedSpace) {
                throw new Error('No space selected');
            }
            // More robust date handling to avoid timezone issues
            const baseDate = data.date instanceof Date ? data.date : new Date(data.date);
            // Create start time by setting the time on a date object in local timezone
            const startDateTime = new Date(baseDate.getFullYear(), baseDate.getMonth(), baseDate.getDate());
            const [startHour, startMinute] = data.startTime.split(':').map(Number);
            startDateTime.setHours(startHour, startMinute, 0, 0);
            // Create end time similarly
            const endDateTime = new Date(baseDate.getFullYear(), baseDate.getMonth(), baseDate.getDate());
            const [endHour, endMinute] = data.endTime.split(':').map(Number);
            endDateTime.setHours(endHour, endMinute, 0, 0);
            // Booking creation handling
            return (0, queryClient_1.apiRequest)('POST', `/api/common-spaces/${selectedSpace.id}/bookings`, {
                start_time: startDateTime.toISOString(),
                end_time: endDateTime.toISOString(),
            });
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/common-spaces'] });
            toast({
                title: 'RÃ©servation confirmÃ©e',
                description: 'Votre rÃ©servation a Ã©tÃ© crÃ©Ã©e avec succÃ¨s.',
            });
            setIsBookingDialogOpen(false);
            form.reset();
        },
        onError: (error) => {
            toast({
                title: 'Erreur de rÃ©servation',
                description: error.message || 'Une erreur est survenue lors de la crÃ©ation de la rÃ©servation.',
                variant: 'destructive',
            });
        },
    });
    // Get bookings for selected date
    const bookingsForDate = (0, react_1.useMemo)(() => {
        if (!bookings || !selectedDate) {
            return [];
        }
        return bookings.filter((booking) => {
            const bookingDate = (0, date_fns_1.parseISO)(booking.startTime);
            return (0, date_fns_1.isSameDay)(bookingDate, selectedDate);
        });
    }, [bookings, selectedDate]);
    // Get time slots availability
    const timeSlots = (0, react_1.useMemo)(() => {
        const slots = [];
        for (let hour = 6; hour <= 22; hour++) {
            slots.push(`${hour.toString().padStart(2, '0')}:00`);
            slots.push(`${hour.toString().padStart(2, '0')}:30`);
        }
        return slots;
    }, []);
    // Helper function to check if a day is available (moved from BookingCalendar)
    const isDayAvailable = (day) => {
        if (!selectedSpace) {
            return false;
        }
        // Past dates are not available
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const checkDay = new Date(day);
        checkDay.setHours(0, 0, 0, 0);
        if (checkDay < today) {
            return false;
        }
        // Check if day falls within any unavailable periods
        if (selectedSpace.unavailablePeriods && Array.isArray(selectedSpace.unavailablePeriods)) {
            for (const period of selectedSpace.unavailablePeriods) {
                const startDate = new Date(period.startDate);
                const endDate = new Date(period.endDate);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(23, 59, 59, 999);
                if (checkDay >= startDate && checkDay <= endDate) {
                    return false;
                }
            }
        }
        // Check opening hours if available
        if (selectedSpace.openingHours && Array.isArray(selectedSpace.openingHours)) {
            const dayName = day.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            const todayHours = selectedSpace.openingHours.find((h) => h.day.toLowerCase() === dayName);
            // If no hours defined for this day, it's unavailable
            if (!todayHours) {
                return false;
            }
            // If explicitly marked as closed
            if (todayHours.isOpen === false) {
                return false;
            }
        }
        return true;
    };
    // Check if time slot is available
    const isTimeSlotAvailable = (time, duration = 60) => {
        if (!selectedSpace || !selectedDate) {
            return false;
        }
        const [hour, minute] = time.split(':').map(Number);
        const slotStart = new Date(selectedDate);
        slotStart.setHours(hour, minute, 0, 0);
        const slotEnd = new Date(slotStart);
        slotEnd.setMinutes(slotEnd.getMinutes() + duration);
        // Check if day is available first (uses our enhanced availability logic)
        if (!isDayAvailable(selectedDate)) {
            return false;
        }
        // Check opening hours
        if (selectedSpace.openingHours && Array.isArray(selectedSpace.openingHours)) {
            const dayName = selectedDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            const todayHours = selectedSpace.openingHours.find((h) => h.day.toLowerCase() === dayName);
            if (!todayHours || todayHours.isOpen === false) {
                return false;
            }
            const openTime = (0, date_fns_1.parse)(todayHours.open, 'HH:mm', selectedDate);
            const closeTime = (0, date_fns_1.parse)(todayHours.close, 'HH:mm', selectedDate);
            // Check if slot is within opening hours
            if (!(0, date_fns_1.isWithinInterval)(slotStart, { start: openTime, end: closeTime }) ||
                !(0, date_fns_1.isWithinInterval)(slotEnd, { start: openTime, end: closeTime })) {
                return false;
            }
            // Check if slot conflicts with any breaks
            if (todayHours.breaks && Array.isArray(todayHours.breaks)) {
                for (const breakPeriod of todayHours.breaks) {
                    const breakStart = (0, date_fns_1.parse)(breakPeriod.start, 'HH:mm', selectedDate);
                    const breakEnd = (0, date_fns_1.parse)(breakPeriod.end, 'HH:mm', selectedDate);
                    // Check if slot overlaps with break period
                    if ((slotStart >= breakStart && slotStart < breakEnd) ||
                        (slotEnd > breakStart && slotEnd <= breakEnd) ||
                        (slotStart <= breakStart && slotEnd >= breakEnd)) {
                        return false;
                    }
                }
            }
        }
        // Check conflicts with existing bookings
        return !bookingsForDate.some((booking) => {
            const bookingStart = (0, date_fns_1.parseISO)(booking.startTime);
            const bookingEnd = (0, date_fns_1.parseISO)(booking.endTime);
            return ((slotStart >= bookingStart && slotStart < bookingEnd) ||
                (slotEnd > bookingStart && slotEnd <= bookingEnd) ||
                (slotStart <= bookingStart && slotEnd >= bookingEnd));
        });
    };
    // Export functions
    const exportMyBookings = () => {
        const icsContent = generateICS(userBookings, false);
        const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `mes-reservations-${(0, date_fns_1.format)(new Date(), 'yyyy-MM-dd')}.ics`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    const exportAllBookings = () => {
        if (!selectedSpace) {
            return;
        }
        const icsContent = generateICS(bookings, true);
        const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `agenda-${selectedSpace.name.toLowerCase().replace(/\s+/g, '-')}-${(0, date_fns_1.format)(new Date(), 'yyyy-MM-dd')}.ics`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    const onSubmit = (data) => {
        createBookingMutation.mutate(data);
    };
    const handleSpaceClick = (space) => {
        setSelectedSpace(space);
        setExpandedSpaceId(expandedSpaceId === space.id ? null : space.id);
    };
    const handleDateClick = (date) => {
        setPreSelectedDate(date);
        form.setValue('date', date);
        setIsBookingDialogOpen(true);
    };
    const handleNewBooking = (space, date) => {
        setSelectedSpace(space);
        if (date) {
            setPreSelectedDate(date);
            form.setValue('date', date);
        }
        setIsBookingDialogOpen(true);
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', "data-testid": 'common-spaces-page', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: language === 'fr' ? 'Espaces Communs' : 'Common Spaces', subtitle: language === 'fr' ? 'RÃ©servez vos espaces communs' : 'Book your common spaces' }), showBackButton && onBack && ((0, jsx_runtime_1.jsx)("div", { className: "px-6 pt-6 pb-0", children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: onBack, className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4" }), backButtonLabel] }) })), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-7xl mx-auto space-y-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsx)("h2", { className: 'text-2xl font-bold text-gray-900', "data-testid": 'spaces-list-title', children: language === 'fr' ? 'Espaces Disponibles' : 'Available Spaces' }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => window.open('https://calendar.google.com/calendar/u/0/r/settings/addbyurl', '_blank'), variant: 'outline', size: 'sm', className: 'flex items-center gap-2', "data-testid": 'button-link-calendar', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Link, { className: 'w-4 h-4' }), language === 'fr' ? 'Lier calendrier' : 'Link calendar'] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: exportMyBookings, variant: 'outline', size: 'sm', className: 'flex items-center gap-2', "data-testid": 'button-export-my-bookings', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: 'w-4 h-4' }), language === 'fr'
                                                        ? 'Exporter mes rÃ©servations (.ics)'
                                                        : 'Export my bookings (.ics)'] })] })] }), spacesLoading ? ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-4', children: [...Array(3)].map((_, i) => ((0, jsx_runtime_1.jsx)("div", { className: 'h-32 bg-gray-200 rounded-lg animate-pulse' }, i))) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-4', "data-testid": 'spaces-list', children: commonSpaces.map((space) => ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { className: `cursor-pointer transition-all duration-200 hover:shadow-md ${expandedSpaceId === space.id ? 'ring-2 ring-koveo-navy bg-koveo-light/10' : ''}`, onClick: () => handleSpaceClick(space), "data-testid": `space-card-${space.id}`, children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { className: 'pb-3', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2 text-lg', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building2, { className: 'w-5 h-5 text-koveo-navy' }), space.name, expandedSpaceId === space.id ? ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronUp, { className: 'w-4 h-4 text-gray-500' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: 'w-4 h-4 text-gray-500' }))] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-2', children: space.isReservable ? ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'bg-green-100 text-green-800', children: language === 'fr' ? 'RÃ©servable' : 'Bookable' })) : ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'bg-gray-100 text-gray-600', children: language === 'fr' ? 'Non RÃ©servable' : 'Non Bookable' })) })] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-3', children: [space.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 text-sm', "data-testid": `space-description-${space.id}`, children: space.description })), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-4 text-sm text-gray-500', children: space.capacity && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'w-4 h-4' }), (0, jsx_runtime_1.jsxs)("span", { "data-testid": `space-capacity-${space.id}`, children: [space.capacity, " ", language === 'fr' ? 'personnes max' : 'people max'] })] })) }), space.openingHours && space.openingHours.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-3', children: [(0, jsx_runtime_1.jsxs)("h4", { className: 'font-medium text-sm text-gray-700 mb-2 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Clock, { className: 'w-4 h-4' }), language === 'fr' ? "Heures d'ouverture" : 'Opening Hours'] }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 gap-1 text-xs text-gray-600', "data-testid": `space-hours-${space.id}`, children: space.openingHours.map((hours, idx) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between', children: [(0, jsx_runtime_1.jsx)("span", { className: 'capitalize', children: hours.day }), (0, jsx_runtime_1.jsxs)("span", { children: [hours.open, " - ", hours.close] })] }, idx))) })] })), space.bookingRules && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-3', children: [(0, jsx_runtime_1.jsxs)("h4", { className: 'font-medium text-sm text-gray-700 mb-1 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4' }), language === 'fr' ? 'RÃ¨gles de rÃ©servation' : 'Booking Rules'] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-600', "data-testid": `space-rules-${space.id}`, children: space.bookingRules })] }))] })] }), expandedSpaceId === space.id && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_space_calendar_1.CommonSpaceCalendar, { space: space, onExport: exportAllBookings, onNewBooking: (date) => handleNewBooking(space, date), className: 'mt-4' }), space.isReservable && ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isBookingDialogOpen, onOpenChange: setIsBookingDialogOpen, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-lg max-h-[90vh] overflow-y-auto', "data-testid": 'booking-dialog', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: language === 'fr' ? 'Nouvelle rÃ©servation' : 'New Booking' }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: language === 'fr'
                                                                            ? `RÃ©server ${space.name}`
                                                                            : `Book ${space.name}` })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'p-4 bg-blue-50 border border-blue-200 rounded-lg', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-blue-900 mb-1', children: language === 'fr' ? 'Date sÃ©lectionnÃ©e' : 'Selected Date' }), (0, jsx_runtime_1.jsx)("div", { className: 'text-lg font-semibold text-blue-800', children: (0, date_fns_1.format)(form.watch('date'), 'EEEE, d MMMM yyyy', {
                                                                                        locale: language === 'fr' ? locale_1.fr : undefined,
                                                                                    }) })] }), selectedSpace?.openingHours && Array.isArray(selectedSpace.openingHours) && ((0, jsx_runtime_1.jsxs)("div", { className: 'p-3 bg-green-50 border border-green-200 rounded-lg', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-green-900 mb-2', children: language === 'fr' ? 'Heures d\'ouverture' : 'Opening Hours' }), selectedSpace.openingHours.map((hours, index) => {
                                                                                    const dayName = form.watch('date').toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
                                                                                    if (hours.day.toLowerCase() === dayName) {
                                                                                        return ((0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-green-800', children: [hours.open, " - ", hours.close] }, index));
                                                                                    }
                                                                                    return null;
                                                                                })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-gray-900', children: language === 'fr' ? 'CrÃ©neaux horaires disponibles' : 'Available Time Slots' }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-4 gap-2 max-h-60 overflow-y-auto p-2 border rounded-lg bg-gray-50', children: timeSlots.map((time) => {
                                                                                        const isAvailable = isTimeSlotAvailable(time);
                                                                                        const hasBooking = bookingsForDate.some((booking) => {
                                                                                            const bookingStart = (0, date_fns_1.parseISO)(booking.startTime);
                                                                                            const bookingEnd = (0, date_fns_1.parseISO)(booking.endTime);
                                                                                            const timeSlot = (0, date_fns_1.parse)(time, 'HH:mm', form.watch('date'));
                                                                                            return timeSlot >= bookingStart && timeSlot < bookingEnd;
                                                                                        });
                                                                                        const currentStartTime = form.watch('startTime');
                                                                                        const currentEndTime = form.watch('endTime');
                                                                                        const isSelected = time === currentStartTime || time === currentEndTime;
                                                                                        return ((0, jsx_runtime_1.jsxs)("button", { type: 'button', disabled: !isAvailable || hasBooking, onClick: () => {
                                                                                                if (!currentStartTime || (currentStartTime && currentEndTime)) {
                                                                                                    // Set start time
                                                                                                    form.setValue('startTime', time);
                                                                                                    form.setValue('endTime', '');
                                                                                                }
                                                                                                else {
                                                                                                    // Set end time if start time is already set
                                                                                                    if (time > currentStartTime) {
                                                                                                        form.setValue('endTime', time);
                                                                                                    }
                                                                                                    else {
                                                                                                        // If selected time is before start time, make it the new start time
                                                                                                        form.setValue('startTime', time);
                                                                                                        form.setValue('endTime', '');
                                                                                                    }
                                                                                                }
                                                                                            }, className: `
                                            p-2 text-xs rounded-md border transition-colors relative
                                            ${!isAvailable
                                                                                                ? 'bg-red-100 border-red-200 text-red-600 cursor-not-allowed'
                                                                                                : hasBooking
                                                                                                    ? 'bg-orange-100 border-orange-200 text-orange-700 cursor-not-allowed'
                                                                                                    : isSelected
                                                                                                        ? 'bg-blue-500 border-blue-600 text-white font-semibold'
                                                                                                        : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-100 hover:border-gray-300'}
                                          `, children: [(0, jsx_runtime_1.jsx)("div", { className: 'font-medium', children: time }), hasBooking && ((0, jsx_runtime_1.jsx)("div", { className: 'text-[10px] mt-1 text-orange-600', children: language === 'fr' ? 'RÃ©servÃ©' : 'Booked' })), !isAvailable && !hasBooking && ((0, jsx_runtime_1.jsx)("div", { className: 'text-[10px] mt-1 text-red-600', children: language === 'fr' ? 'FermÃ©' : 'Closed' })), isSelected && ((0, jsx_runtime_1.jsx)("div", { className: 'text-[10px] mt-1 text-white', children: time === currentStartTime
                                                                                                        ? (language === 'fr' ? 'DÃ©but' : 'Start')
                                                                                                        : (language === 'fr' ? 'Fin' : 'End') }))] }, time));
                                                                                    }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4 text-xs', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-3 h-3 bg-white border border-gray-200 rounded' }), (0, jsx_runtime_1.jsx)("span", { children: language === 'fr' ? 'Disponible' : 'Available' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-3 h-3 bg-blue-500 rounded' }), (0, jsx_runtime_1.jsx)("span", { children: language === 'fr' ? 'SÃ©lectionnÃ©' : 'Selected' })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-3 h-3 bg-orange-100 border border-orange-200 rounded' }), (0, jsx_runtime_1.jsx)("span", { children: language === 'fr' ? 'RÃ©servÃ©' : 'Booked' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-3 h-3 bg-red-100 border border-red-200 rounded' }), (0, jsx_runtime_1.jsx)("span", { children: language === 'fr' ? 'FermÃ©' : 'Closed' })] })] })] })] }), form.watch('startTime') && ((0, jsx_runtime_1.jsxs)("div", { className: 'p-3 bg-gray-50 border border-gray-200 rounded-lg', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-gray-900 mb-1', children: language === 'fr' ? 'RÃ©servation sÃ©lectionnÃ©e' : 'Selected Booking' }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-gray-700', children: [(0, jsx_runtime_1.jsx)("span", { className: 'font-medium', children: language === 'fr' ? 'DÃ©but:' : 'Start:' }), " ", form.watch('startTime'), form.watch('endTime') && ((0, jsx_runtime_1.jsxs)("span", { className: 'ml-4', children: [(0, jsx_runtime_1.jsx)("span", { className: 'font-medium', children: language === 'fr' ? 'Fin:' : 'End:' }), " ", form.watch('endTime')] }))] }), form.watch('endTime') && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-gray-500 mt-1', children: [language === 'fr' ? 'DurÃ©e:' : 'Duration:', (() => {
                                                                                            const start = (0, date_fns_1.parse)(form.watch('startTime'), 'HH:mm', new Date());
                                                                                            const end = (0, date_fns_1.parse)(form.watch('endTime'), 'HH:mm', new Date());
                                                                                            const duration = (end.getTime() - start.getTime()) / (1000 * 60);
                                                                                            return `${Math.floor(duration / 60)}h ${duration % 60 > 0 ? `${duration % 60}min` : ''}`;
                                                                                        })()] }))] })), !form.watch('startTime') && ((0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-amber-600 bg-amber-50 border border-amber-200 rounded-lg p-3', children: language === 'fr'
                                                                                ? 'Veuillez sÃ©lectionner une heure de dÃ©but'
                                                                                : 'Please select a start time' })), form.watch('startTime') && !form.watch('endTime') && ((0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-amber-600 bg-amber-50 border border-amber-200 rounded-lg p-3', children: language === 'fr'
                                                                                ? 'Veuillez sÃ©lectionner une heure de fin'
                                                                                : 'Please select an end time' })), (0, jsx_runtime_1.jsxs)("div", { className: 'hidden', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'date', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)("input", { ...field, value: field.value?.toISOString() || '', readOnly: true }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'startTime', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)("input", { ...field, readOnly: true }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'endTime', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)("input", { ...field, readOnly: true }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => {
                                                                                        setIsBookingDialogOpen(false);
                                                                                        form.reset();
                                                                                    }, "data-testid": 'button-cancel-booking', children: language === 'fr' ? 'Annuler' : 'Cancel' }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: createBookingMutation.isPending ||
                                                                                        !form.watch('startTime') ||
                                                                                        !form.watch('endTime'), "data-testid": 'button-confirm-booking', children: createBookingMutation.isPending
                                                                                        ? language === 'fr'
                                                                                            ? 'RÃ©servation...'
                                                                                            : 'Booking...'
                                                                                        : language === 'fr'
                                                                                            ? 'Confirmer la rÃ©servation'
                                                                                            : 'Confirm Booking' })] })] }) })] }) }))] }))] }, space.id))) }))] }) }) })] }));
}
// Wrap with hierarchical selection HOC using building hierarchy (residents only see buildings they have residences in)
const CommonSpacesPage = (0, withHierarchicalSelection_1.withHierarchicalSelection)(CommonSpacesPageInner, {
    hierarchy: ['building']
});
exports.default = CommonSpacesPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,