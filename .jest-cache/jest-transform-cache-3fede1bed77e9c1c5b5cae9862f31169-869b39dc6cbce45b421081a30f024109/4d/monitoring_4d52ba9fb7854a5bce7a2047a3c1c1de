fb4f67e6aa9459071b7a941926702f05
"use strict";

/* istanbul ignore next */
function cov_1ydlbwr7x7() {
  var path = "/home/runner/workspace/shared/schemas/monitoring.ts";
  var hash = "66214653378cc5ba936d3b05af7bdeb63b81da80";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/runner/workspace/shared/schemas/monitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 456
        }
      },
      "2": {
        start: {
          line: 4,
          column: 22
        },
        end: {
          line: 4,
          column: 44
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 48
        }
      },
      "4": {
        start: {
          line: 6,
          column: 14
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 32
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 15,
          column: 3
        }
      },
      "7": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "8": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "9": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 62,
          column: 3
        }
      },
      "10": {
        start: {
          line: 67,
          column: 0
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "11": {
        start: {
          line: 88,
          column: 0
        },
        end: {
          line: 106,
          column: 3
        }
      },
      "12": {
        start: {
          line: 94,
          column: 26
        },
        end: {
          line: 94,
          column: 54
        }
      },
      "13": {
        start: {
          line: 98,
          column: 73
        },
        end: {
          line: 98,
          column: 88
        }
      },
      "14": {
        start: {
          line: 111,
          column: 0
        },
        end: {
          line: 132,
          column: 3
        }
      },
      "15": {
        start: {
          line: 137,
          column: 0
        },
        end: {
          line: 163,
          column: 3
        }
      },
      "16": {
        start: {
          line: 148,
          column: 71
        },
        end: {
          line: 148,
          column: 86
        }
      },
      "17": {
        start: {
          line: 151,
          column: 72
        },
        end: {
          line: 151,
          column: 100
        }
      },
      "18": {
        start: {
          line: 165,
          column: 0
        },
        end: {
          line: 191,
          column: 3
        }
      },
      "19": {
        start: {
          line: 192,
          column: 0
        },
        end: {
          line: 217,
          column: 3
        }
      },
      "20": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 230,
          column: 3
        }
      },
      "21": {
        start: {
          line: 231,
          column: 0
        },
        end: {
          line: 247,
          column: 3
        }
      },
      "22": {
        start: {
          line: 248,
          column: 0
        },
        end: {
          line: 269,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 94,
            column: 21
          }
        },
        loc: {
          start: {
            line: 94,
            column: 26
          },
          end: {
            line: 94,
            column: 54
          }
        },
        line: 94
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 98,
            column: 67
          },
          end: {
            line: 98,
            column: 68
          }
        },
        loc: {
          start: {
            line: 98,
            column: 73
          },
          end: {
            line: 98,
            column: 88
          }
        },
        line: 98
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 148,
            column: 65
          },
          end: {
            line: 148,
            column: 66
          }
        },
        loc: {
          start: {
            line: 148,
            column: 71
          },
          end: {
            line: 148,
            column: 86
          }
        },
        line: 148
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 151,
            column: 66
          },
          end: {
            line: 151,
            column: 67
          }
        },
        loc: {
          start: {
            line: 151,
            column: 72
          },
          end: {
            line: 151,
            column: 100
          }
        },
        line: 151
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {},
    inputSourceMap: {
      file: "/home/runner/workspace/shared/schemas/monitoring.ts",
      mappings: "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",
      names: [],
      sources: ["/home/runner/workspace/shared/schemas/monitoring.ts"],
      sourcesContent: ["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  uuid,\n  pgEnum,\n  boolean,\n  integer,\n  decimal,\n  date,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\nimport { users } from './core';\n\n// Monitoring enums\nexport const validationStatusEnum = pgEnum('validation_status', [\n  'pending',\n  'true_positive', // Metric correctly predicted an issue\n  'false_positive', // Metric predicted issue but none found\n  'true_negative', // Metric correctly predicted no issue\n  'false_negative', // Metric missed a real issue\n]);\n\nexport const issueSeverityEnum = pgEnum('issue_severity', [\n  'info', // Minor suggestions\n  'low', // Non-critical improvements\n  'medium', // Important but not urgent\n  'high', // Significant issues affecting operations\n  'critical', // Severe issues affecting compliance or safety\n  'quebec_compliance', // Issues affecting Quebec Law 25 or provincial regulations\n]);\n\nexport const metricTypeEnum = pgEnum('metric_type', [\n  'code_coverage',\n  'code_quality',\n  'security_vulnerabilities',\n  'build_time',\n  'translation_coverage',\n  'api_response_time',\n  'memory_usage',\n  'bundle_size',\n  'database_query_time',\n  'page_load_time',\n  'accessibility_score',\n  'seo_score',\n  'quebec_compliance_score',\n]);\n\n// Monitoring tables\n/**\n * Tracks effectiveness of quality metrics in predicting real issues.\n * Used for continuous improvement of the quality assessment system.\n */\nexport const metricEffectivenessTracking = pgTable('metric_effectiveness_tracking', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  metricType: metricTypeEnum('metric_type').notNull(),\n  calculatedValue: decimal('calculated_value', { precision: 10, scale: 4 }).notNull(),\n  actualOutcome: text('actual_outcome').notNull(),\n  accuracy: decimal('accuracy', { precision: 5, scale: 4 }).notNull(),\n  precision: decimal('precision', { precision: 5, scale: 4 }).notNull(),\n  recall: decimal('recall', { precision: 5, scale: 4 }).notNull(),\n  f1Score: decimal('f1_score', { precision: 5, scale: 4 }).notNull(),\n  calibrationScore: decimal('calibration_score', { precision: 5, scale: 4 }),\n  predictionConfidence: decimal('prediction_confidence', { precision: 5, scale: 4 }),\n  validationDate: date('validation_date').notNull(),\n  quebecComplianceImpact: boolean('quebec_compliance_impact').notNull().default(false),\n  propertyManagementContext: text('property_management_context'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Stores predictions made by quality metrics before validation.\n * Links predictions to actual outcomes for effectiveness tracking.\n */\nexport const metricPredictions = pgTable('metric_predictions', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  metricType: metricTypeEnum('metric_type').notNull(),\n  predictedValue: decimal('predicted_value', { precision: 10, scale: 4 }).notNull(),\n  confidenceLevel: decimal('confidence_level', { precision: 5, scale: 4 }).notNull(),\n  thresholdUsed: decimal('threshold_used', { precision: 10, scale: 4 }).notNull(),\n  contextData: jsonb('context_data'),\n  predictionReason: text('prediction_reason'),\n  expectedSeverity: issueSeverityEnum('expected_severity').notNull(),\n  quebecComplianceRelevant: boolean('quebec_compliance_relevant').notNull().default(false),\n  propertyManagementCategory: text('property_management_category'),\n  filePath: text('file_path'),\n  lineNumber: integer('line_number'),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n/**\n * Validates metric predictions against real outcomes.\n * Essential for measuring and improving metric effectiveness.\n */\nexport const predictionValidations = pgTable('prediction_validations', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  predictionId: uuid('prediction_id')\n    .notNull()\n    .references(() => metricPredictions.id),\n  validationStatus: validationStatusEnum('validation_status').notNull(),\n  actualOutcome: text('actual_outcome').notNull(),\n  validationMethod: text('validation_method').notNull(),\n  validatorId: varchar('validator_id').references(() => users.id),\n  timeTaken: integer('time_taken'), // Hours to validate\n  impactLevel: issueSeverityEnum('impact_level'),\n  resolutionActions: text('resolution_actions'),\n  quebecComplianceNotes: text('quebec_compliance_notes'),\n  costImpact: decimal('cost_impact', { precision: 10, scale: 2 }),\n  validatedAt: timestamp('validated_at').notNull(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n/**\n * Stores calibration data for improving metric accuracy.\n * Used for machine learning model optimization and threshold tuning.\n */\nexport const metricCalibrationData = pgTable('metric_calibration_data', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  metricType: metricTypeEnum('metric_type').notNull(),\n  calibrationModel: text('calibration_model').notNull(),\n  trainingDataSize: integer('training_data_size').notNull(),\n  accuracy: decimal('accuracy', { precision: 5, scale: 4 }).notNull(),\n  precision: decimal('precision', { precision: 5, scale: 4 }).notNull(),\n  recall: decimal('recall', { precision: 5, scale: 4 }).notNull(),\n  f1Score: decimal('f1_score', { precision: 5, scale: 4 }).notNull(),\n  crossValidationScore: decimal('cross_validation_score', { precision: 5, scale: 4 }),\n  featureImportance: jsonb('feature_importance'),\n  hyperparameters: jsonb('hyperparameters'),\n  quebecSpecificFactors: jsonb('quebec_specific_factors'),\n  lastTrainingDate: date('last_training_date').notNull(),\n  modelVersion: text('model_version').notNull(),\n  isActive: boolean('is_active').notNull().default(true),\n  performanceMetrics: jsonb('performance_metrics'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Tracks quality issues found in the codebase and their resolution.\n * Links back to metric predictions for effectiveness validation.\n */\nexport const qualityIssues = pgTable('quality_issues', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  title: text('title').notNull(),\n  description: text('description').notNull(),\n  category: text('category').notNull(),\n  severity: issueSeverityEnum('severity').notNull(),\n  filePath: text('file_path').notNull(),\n  lineNumber: integer('line_number'),\n  detectionMethod: text('detection_method').notNull(),\n  detectedBy: varchar('detected_by').references(() => users.id),\n  relatedMetricType: metricTypeEnum('related_metric_type'),\n  wasPredicted: boolean('was_predicted').notNull().default(false),\n  predictionId: uuid('prediction_id').references(() => metricPredictions.id),\n  resolutionStatus: text('resolution_status').notNull().default('open'),\n  resolutionTime: integer('resolution_time'), // Hours to resolve\n  resolutionActions: text('resolution_actions'),\n  quebecComplianceRelated: boolean('quebec_compliance_related').notNull().default(false),\n  propertyManagementImpact: text('property_management_impact'),\n  costToFix: decimal('cost_to_fix', { precision: 10, scale: 2 }),\n  actualCost: decimal('actual_cost', { precision: 10, scale: 2 }),\n  discoveredAt: timestamp('discovered_at').notNull(),\n  resolvedAt: timestamp('resolved_at'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Insert schemas\nexport const insertMetricEffectivenessTrackingSchema = z.object({\n  metricType: z.enum([\n    'code_coverage',\n    'code_quality',\n    'security_vulnerabilities',\n    'build_time',\n    'translation_coverage',\n    'api_response_time',\n    'deployment_success_rate',\n    'user_satisfaction',\n    'performance_score',\n    'test_reliability',\n    'quebec_compliance_score',\n    'maintenance_productivity',\n  ]),\n  calculatedValue: z.number(),\n  actualOutcome: z.number(),\n  accuracy: z.number(),\n  precision: z.number(),\n  recall: z.number(),\n  f1Score: z.number(),\n  calibrationScore: z.number(),\n  predictionConfidence: z.number(),\n  validationDate: z.date(),\n  quebecComplianceImpact: z.string().optional(),\n  propertyManagementContext: z.string().optional(),\n});\n\nexport const insertMetricPredictionSchema = z.object({\n  metricType: z.enum([\n    'code_coverage',\n    'code_quality',\n    'security_vulnerabilities',\n    'build_time',\n    'translation_coverage',\n    'api_response_time',\n    'deployment_success_rate',\n    'user_satisfaction',\n    'performance_score',\n    'test_reliability',\n    'quebec_compliance_score',\n    'maintenance_productivity',\n  ]),\n  predictedValue: z.number(),\n  confidenceLevel: z.number(),\n  thresholdUsed: z.number(),\n  contextData: z.record(z.string(), z.any()).optional(),\n  predictionReason: z.string(),\n  expectedSeverity: z.string(),\n  quebecComplianceRelevant: z.boolean().default(false),\n  propertyManagementCategory: z.string().optional(),\n  filePath: z.string(),\n  lineNumber: z.number().int().optional(),\n});\n\nexport const insertPredictionValidationSchema = z.object({\n  predictionId: z.string().uuid(),\n  validationStatus: z.enum(['validated', 'failed', 'partially_validated', 'needs_review']),\n  actualOutcome: z.number(),\n  validationMethod: z.string(),\n  validatorId: z.string().uuid().optional(),\n  timeTaken: z.number().optional(),\n  impactLevel: z.string().optional(),\n  resolutionActions: z.string().optional(),\n  quebecComplianceNotes: z.string().optional(),\n  costImpact: z.number().optional(),\n  validatedAt: z.date(),\n});\n\nexport const insertMetricCalibrationDataSchema = z.object({\n  metricType: z.string(),\n  calibrationModel: z.string(),\n  trainingDataSize: z.number().int(),\n  accuracy: z.number(),\n  precision: z.number(),\n  recall: z.number(),\n  f1Score: z.number(),\n  crossValidationScore: z.number(),\n  featureImportance: z.record(z.string(), z.number()).optional(),\n  hyperparameters: z.record(z.string(), z.any()).optional(),\n  quebecSpecificFactors: z.record(z.string(), z.any()).optional(),\n  lastTrainingDate: z.date(),\n  modelVersion: z.string(),\n  isActive: z.boolean().default(true),\n  performanceMetrics: z.record(z.string(), z.number()).optional(),\n});\n\nexport const insertQualityIssueSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  category: z.string(),\n  severity: z.string(),\n  filePath: z.string(),\n  lineNumber: z.number().int().optional(),\n  detectionMethod: z.string(),\n  detectedBy: z.string().uuid().optional(),\n  relatedMetricType: z.string().optional(),\n  wasPredicted: z.boolean().default(false),\n  predictionId: z.string().uuid().optional(),\n  resolutionStatus: z.string().default('open'),\n  resolutionTime: z.number().int().optional(),\n  resolutionActions: z.string().optional(),\n  quebecComplianceRelated: z.boolean().default(false),\n  propertyManagementImpact: z.string().optional(),\n  costToFix: z.number().optional(),\n  actualCost: z.number().optional(),\n  discoveredAt: z.date(),\n  resolvedAt: z.date().optional(),\n});\n\n// Types\n/**\n *\n */\nexport type InsertMetricEffectivenessTracking = z.infer<\n  typeof insertMetricEffectivenessTrackingSchema\n>;\n/**\n *\n */\nexport type MetricEffectivenessTracking = typeof metricEffectivenessTracking.$inferSelect;\n\n/**\n *\n */\nexport type InsertMetricPrediction = z.infer<typeof insertMetricPredictionSchema>;\n/**\n *\n */\nexport type MetricPrediction = typeof metricPredictions.$inferSelect;\n\n/**\n *\n */\nexport type InsertPredictionValidation = z.infer<typeof insertPredictionValidationSchema>;\n/**\n *\n */\nexport type PredictionValidation = typeof predictionValidations.$inferSelect;\n\n/**\n *\n */\nexport type InsertMetricCalibrationData = z.infer<typeof insertMetricCalibrationDataSchema>;\n/**\n *\n */\nexport type MetricCalibrationData = typeof metricCalibrationData.$inferSelect;\n\n/**\n *\n */\nexport type InsertQualityIssue = z.infer<typeof insertQualityIssueSchema>;\n/**\n *\n */\nexport type QualityIssue = typeof qualityIssues.$inferSelect;\n\n// Relations\n// Relations - temporarily commented out due to drizzle-orm version compatibility\n// export const metricPredictionsRelations = relations(metricPredictions, ({ many }) => ({\n//   validations: many(predictionValidations),\n//   qualityIssues: many(qualityIssues),\n// }));\n\n// export const predictionValidationsRelations = relations(predictionValidations, ({ one }) => ({\n//   prediction: one(metricPredictions, {\n//     fields: [predictionValidations.predictionId],\n//     references: [metricPredictions.id],\n//   }),\n//   validator: one(users, {\n//     fields: [predictionValidations.validatorId],\n//     references: [users.id],\n//   }),\n// }));\n\n// export const qualityIssuesRelations = relations(qualityIssues, ({ one }) => ({\n//   detectedBy: one(users, {\n//     fields: [qualityIssues.detectedBy],\n//     references: [users.id],\n//   }),\n//   prediction: one(metricPredictions, {\n//     fields: [qualityIssues.predictionId],\n//     references: [metricPredictions.id],\n//   }),\n// }));\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "66214653378cc5ba936d3b05af7bdeb63b81da80"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ydlbwr7x7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ydlbwr7x7();
cov_1ydlbwr7x7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ydlbwr7x7().s[1]++;
exports.insertQualityIssueSchema = exports.insertMetricCalibrationDataSchema = exports.insertPredictionValidationSchema = exports.insertMetricPredictionSchema = exports.insertMetricEffectivenessTrackingSchema = exports.qualityIssues = exports.metricCalibrationData = exports.predictionValidations = exports.metricPredictions = exports.metricEffectivenessTracking = exports.metricTypeEnum = exports.issueSeverityEnum = exports.validationStatusEnum = void 0;
const drizzle_orm_1 =
/* istanbul ignore next */
(cov_1ydlbwr7x7().s[2]++, require("drizzle-orm"));
const pg_core_1 =
/* istanbul ignore next */
(cov_1ydlbwr7x7().s[3]++, require("drizzle-orm/pg-core"));
const zod_1 =
/* istanbul ignore next */
(cov_1ydlbwr7x7().s[4]++, require("zod"));
const core_1 =
/* istanbul ignore next */
(cov_1ydlbwr7x7().s[5]++, require("./core"));
// Monitoring enums
/* istanbul ignore next */
cov_1ydlbwr7x7().s[6]++;
exports.validationStatusEnum = (0, pg_core_1.pgEnum)('validation_status', ['pending', 'true_positive',
// Metric correctly predicted an issue
'false_positive',
// Metric predicted issue but none found
'true_negative',
// Metric correctly predicted no issue
'false_negative' // Metric missed a real issue
]);
/* istanbul ignore next */
cov_1ydlbwr7x7().s[7]++;
exports.issueSeverityEnum = (0, pg_core_1.pgEnum)('issue_severity', ['info',
// Minor suggestions
'low',
// Non-critical improvements
'medium',
// Important but not urgent
'high',
// Significant issues affecting operations
'critical',
// Severe issues affecting compliance or safety
'quebec_compliance' // Issues affecting Quebec Law 25 or provincial regulations
]);
/* istanbul ignore next */
cov_1ydlbwr7x7().s[8]++;
exports.metricTypeEnum = (0, pg_core_1.pgEnum)('metric_type', ['code_coverage', 'code_quality', 'security_vulnerabilities', 'build_time', 'translation_coverage', 'api_response_time', 'memory_usage', 'bundle_size', 'database_query_time', 'page_load_time', 'accessibility_score', 'seo_score', 'quebec_compliance_score']);
// Monitoring tables
/**
 * Tracks effectiveness of quality metrics in predicting real issues.
 * Used for continuous improvement of the quality assessment system.
 */
/* istanbul ignore next */
cov_1ydlbwr7x7().s[9]++;
exports.metricEffectivenessTracking = (0, pg_core_1.pgTable)('metric_effectiveness_tracking', {
  id: (0, pg_core_1.uuid)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  metricType: (0, exports.metricTypeEnum)('metric_type').notNull(),
  calculatedValue: (0, pg_core_1.decimal)('calculated_value', {
    precision: 10,
    scale: 4
  }).notNull(),
  actualOutcome: (0, pg_core_1.text)('actual_outcome').notNull(),
  accuracy: (0, pg_core_1.decimal)('accuracy', {
    precision: 5,
    scale: 4
  }).notNull(),
  precision: (0, pg_core_1.decimal)('precision', {
    precision: 5,
    scale: 4
  }).notNull(),
  recall: (0, pg_core_1.decimal)('recall', {
    precision: 5,
    scale: 4
  }).notNull(),
  f1Score: (0, pg_core_1.decimal)('f1_score', {
    precision: 5,
    scale: 4
  }).notNull(),
  calibrationScore: (0, pg_core_1.decimal)('calibration_score', {
    precision: 5,
    scale: 4
  }),
  predictionConfidence: (0, pg_core_1.decimal)('prediction_confidence', {
    precision: 5,
    scale: 4
  }),
  validationDate: (0, pg_core_1.date)('validation_date').notNull(),
  quebecComplianceImpact: (0, pg_core_1.boolean)('quebec_compliance_impact').notNull().default(false),
  propertyManagementContext: (0, pg_core_1.text)('property_management_context'),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * Stores predictions made by quality metrics before validation.
 * Links predictions to actual outcomes for effectiveness tracking.
 */
/* istanbul ignore next */
cov_1ydlbwr7x7().s[10]++;
exports.metricPredictions = (0, pg_core_1.pgTable)('metric_predictions', {
  id: (0, pg_core_1.uuid)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  metricType: (0, exports.metricTypeEnum)('metric_type').notNull(),
  predictedValue: (0, pg_core_1.decimal)('predicted_value', {
    precision: 10,
    scale: 4
  }).notNull(),
  confidenceLevel: (0, pg_core_1.decimal)('confidence_level', {
    precision: 5,
    scale: 4
  }).notNull(),
  thresholdUsed: (0, pg_core_1.decimal)('threshold_used', {
    precision: 10,
    scale: 4
  }).notNull(),
  contextData: (0, pg_core_1.jsonb)('context_data'),
  predictionReason: (0, pg_core_1.text)('prediction_reason'),
  expectedSeverity: (0, exports.issueSeverityEnum)('expected_severity').notNull(),
  quebecComplianceRelevant: (0, pg_core_1.boolean)('quebec_compliance_relevant').notNull().default(false),
  propertyManagementCategory: (0, pg_core_1.text)('property_management_category'),
  filePath: (0, pg_core_1.text)('file_path'),
  lineNumber: (0, pg_core_1.integer)('line_number'),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow()
});
/**
 * Validates metric predictions against real outcomes.
 * Essential for measuring and improving metric effectiveness.
 */
/* istanbul ignore next */
cov_1ydlbwr7x7().s[11]++;
exports.predictionValidations = (0, pg_core_1.pgTable)('prediction_validations', {
  id: (0, pg_core_1.uuid)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  predictionId: (0, pg_core_1.uuid)('prediction_id').notNull().references(() => {
    /* istanbul ignore next */
    cov_1ydlbwr7x7().f[0]++;
    cov_1ydlbwr7x7().s[12]++;
    return exports.metricPredictions.id;
  }),
  validationStatus: (0, exports.validationStatusEnum)('validation_status').notNull(),
  actualOutcome: (0, pg_core_1.text)('actual_outcome').notNull(),
  validationMethod: (0, pg_core_1.text)('validation_method').notNull(),
  validatorId: (0, pg_core_1.varchar)('validator_id').references(() => {
    /* istanbul ignore next */
    cov_1ydlbwr7x7().f[1]++;
    cov_1ydlbwr7x7().s[13]++;
    return core_1.users.id;
  }),
  timeTaken: (0, pg_core_1.integer)('time_taken'),
  // Hours to validate
  impactLevel: (0, exports.issueSeverityEnum)('impact_level'),
  resolutionActions: (0, pg_core_1.text)('resolution_actions'),
  quebecComplianceNotes: (0, pg_core_1.text)('quebec_compliance_notes'),
  costImpact: (0, pg_core_1.decimal)('cost_impact', {
    precision: 10,
    scale: 2
  }),
  validatedAt: (0, pg_core_1.timestamp)('validated_at').notNull(),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow()
});
/**
 * Stores calibration data for improving metric accuracy.
 * Used for machine learning model optimization and threshold tuning.
 */
/* istanbul ignore next */
cov_1ydlbwr7x7().s[14]++;
exports.metricCalibrationData = (0, pg_core_1.pgTable)('metric_calibration_data', {
  id: (0, pg_core_1.uuid)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  metricType: (0, exports.metricTypeEnum)('metric_type').notNull(),
  calibrationModel: (0, pg_core_1.text)('calibration_model').notNull(),
  trainingDataSize: (0, pg_core_1.integer)('training_data_size').notNull(),
  accuracy: (0, pg_core_1.decimal)('accuracy', {
    precision: 5,
    scale: 4
  }).notNull(),
  precision: (0, pg_core_1.decimal)('precision', {
    precision: 5,
    scale: 4
  }).notNull(),
  recall: (0, pg_core_1.decimal)('recall', {
    precision: 5,
    scale: 4
  }).notNull(),
  f1Score: (0, pg_core_1.decimal)('f1_score', {
    precision: 5,
    scale: 4
  }).notNull(),
  crossValidationScore: (0, pg_core_1.decimal)('cross_validation_score', {
    precision: 5,
    scale: 4
  }),
  featureImportance: (0, pg_core_1.jsonb)('feature_importance'),
  hyperparameters: (0, pg_core_1.jsonb)('hyperparameters'),
  quebecSpecificFactors: (0, pg_core_1.jsonb)('quebec_specific_factors'),
  lastTrainingDate: (0, pg_core_1.date)('last_training_date').notNull(),
  modelVersion: (0, pg_core_1.text)('model_version').notNull(),
  isActive: (0, pg_core_1.boolean)('is_active').notNull().default(true),
  performanceMetrics: (0, pg_core_1.jsonb)('performance_metrics'),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
/**
 * Tracks quality issues found in the codebase and their resolution.
 * Links back to metric predictions for effectiveness validation.
 */
/* istanbul ignore next */
cov_1ydlbwr7x7().s[15]++;
exports.qualityIssues = (0, pg_core_1.pgTable)('quality_issues', {
  id: (0, pg_core_1.uuid)('id').primaryKey().default((0, drizzle_orm_1.sql)`gen_random_uuid()`),
  title: (0, pg_core_1.text)('title').notNull(),
  description: (0, pg_core_1.text)('description').notNull(),
  category: (0, pg_core_1.text)('category').notNull(),
  severity: (0, exports.issueSeverityEnum)('severity').notNull(),
  filePath: (0, pg_core_1.text)('file_path').notNull(),
  lineNumber: (0, pg_core_1.integer)('line_number'),
  detectionMethod: (0, pg_core_1.text)('detection_method').notNull(),
  detectedBy: (0, pg_core_1.varchar)('detected_by').references(() => {
    /* istanbul ignore next */
    cov_1ydlbwr7x7().f[2]++;
    cov_1ydlbwr7x7().s[16]++;
    return core_1.users.id;
  }),
  relatedMetricType: (0, exports.metricTypeEnum)('related_metric_type'),
  wasPredicted: (0, pg_core_1.boolean)('was_predicted').notNull().default(false),
  predictionId: (0, pg_core_1.uuid)('prediction_id').references(() => {
    /* istanbul ignore next */
    cov_1ydlbwr7x7().f[3]++;
    cov_1ydlbwr7x7().s[17]++;
    return exports.metricPredictions.id;
  }),
  resolutionStatus: (0, pg_core_1.text)('resolution_status').notNull().default('open'),
  resolutionTime: (0, pg_core_1.integer)('resolution_time'),
  // Hours to resolve
  resolutionActions: (0, pg_core_1.text)('resolution_actions'),
  quebecComplianceRelated: (0, pg_core_1.boolean)('quebec_compliance_related').notNull().default(false),
  propertyManagementImpact: (0, pg_core_1.text)('property_management_impact'),
  costToFix: (0, pg_core_1.decimal)('cost_to_fix', {
    precision: 10,
    scale: 2
  }),
  actualCost: (0, pg_core_1.decimal)('actual_cost', {
    precision: 10,
    scale: 2
  }),
  discoveredAt: (0, pg_core_1.timestamp)('discovered_at').notNull(),
  resolvedAt: (0, pg_core_1.timestamp)('resolved_at'),
  createdAt: (0, pg_core_1.timestamp)('created_at').defaultNow(),
  updatedAt: (0, pg_core_1.timestamp)('updated_at').defaultNow()
});
// Insert schemas
/* istanbul ignore next */
cov_1ydlbwr7x7().s[18]++;
exports.insertMetricEffectivenessTrackingSchema = zod_1.z.object({
  metricType: zod_1.z.enum(['code_coverage', 'code_quality', 'security_vulnerabilities', 'build_time', 'translation_coverage', 'api_response_time', 'deployment_success_rate', 'user_satisfaction', 'performance_score', 'test_reliability', 'quebec_compliance_score', 'maintenance_productivity']),
  calculatedValue: zod_1.z.number(),
  actualOutcome: zod_1.z.number(),
  accuracy: zod_1.z.number(),
  precision: zod_1.z.number(),
  recall: zod_1.z.number(),
  f1Score: zod_1.z.number(),
  calibrationScore: zod_1.z.number(),
  predictionConfidence: zod_1.z.number(),
  validationDate: zod_1.z.date(),
  quebecComplianceImpact: zod_1.z.string().optional(),
  propertyManagementContext: zod_1.z.string().optional()
});
/* istanbul ignore next */
cov_1ydlbwr7x7().s[19]++;
exports.insertMetricPredictionSchema = zod_1.z.object({
  metricType: zod_1.z.enum(['code_coverage', 'code_quality', 'security_vulnerabilities', 'build_time', 'translation_coverage', 'api_response_time', 'deployment_success_rate', 'user_satisfaction', 'performance_score', 'test_reliability', 'quebec_compliance_score', 'maintenance_productivity']),
  predictedValue: zod_1.z.number(),
  confidenceLevel: zod_1.z.number(),
  thresholdUsed: zod_1.z.number(),
  contextData: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
  predictionReason: zod_1.z.string(),
  expectedSeverity: zod_1.z.string(),
  quebecComplianceRelevant: zod_1.z.boolean().default(false),
  propertyManagementCategory: zod_1.z.string().optional(),
  filePath: zod_1.z.string(),
  lineNumber: zod_1.z.number().int().optional()
});
/* istanbul ignore next */
cov_1ydlbwr7x7().s[20]++;
exports.insertPredictionValidationSchema = zod_1.z.object({
  predictionId: zod_1.z.string().uuid(),
  validationStatus: zod_1.z.enum(['validated', 'failed', 'partially_validated', 'needs_review']),
  actualOutcome: zod_1.z.number(),
  validationMethod: zod_1.z.string(),
  validatorId: zod_1.z.string().uuid().optional(),
  timeTaken: zod_1.z.number().optional(),
  impactLevel: zod_1.z.string().optional(),
  resolutionActions: zod_1.z.string().optional(),
  quebecComplianceNotes: zod_1.z.string().optional(),
  costImpact: zod_1.z.number().optional(),
  validatedAt: zod_1.z.date()
});
/* istanbul ignore next */
cov_1ydlbwr7x7().s[21]++;
exports.insertMetricCalibrationDataSchema = zod_1.z.object({
  metricType: zod_1.z.string(),
  calibrationModel: zod_1.z.string(),
  trainingDataSize: zod_1.z.number().int(),
  accuracy: zod_1.z.number(),
  precision: zod_1.z.number(),
  recall: zod_1.z.number(),
  f1Score: zod_1.z.number(),
  crossValidationScore: zod_1.z.number(),
  featureImportance: zod_1.z.record(zod_1.z.string(), zod_1.z.number()).optional(),
  hyperparameters: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
  quebecSpecificFactors: zod_1.z.record(zod_1.z.string(), zod_1.z.any()).optional(),
  lastTrainingDate: zod_1.z.date(),
  modelVersion: zod_1.z.string(),
  isActive: zod_1.z.boolean().default(true),
  performanceMetrics: zod_1.z.record(zod_1.z.string(), zod_1.z.number()).optional()
});
/* istanbul ignore next */
cov_1ydlbwr7x7().s[22]++;
exports.insertQualityIssueSchema = zod_1.z.object({
  title: zod_1.z.string(),
  description: zod_1.z.string(),
  category: zod_1.z.string(),
  severity: zod_1.z.string(),
  filePath: zod_1.z.string(),
  lineNumber: zod_1.z.number().int().optional(),
  detectionMethod: zod_1.z.string(),
  detectedBy: zod_1.z.string().uuid().optional(),
  relatedMetricType: zod_1.z.string().optional(),
  wasPredicted: zod_1.z.boolean().default(false),
  predictionId: zod_1.z.string().uuid().optional(),
  resolutionStatus: zod_1.z.string().default('open'),
  resolutionTime: zod_1.z.number().int().optional(),
  resolutionActions: zod_1.z.string().optional(),
  quebecComplianceRelated: zod_1.z.boolean().default(false),
  propertyManagementImpact: zod_1.z.string().optional(),
  costToFix: zod_1.z.number().optional(),
  actualCost: zod_1.z.number().optional(),
  discoveredAt: zod_1.z.date(),
  resolvedAt: zod_1.z.date().optional()
});
// Relations
// Relations - temporarily commented out due to drizzle-orm version compatibility
// export const metricPredictionsRelations = relations(metricPredictions, ({ many }) => ({
//   validations: many(predictionValidations),
//   qualityIssues: many(qualityIssues),
// }));
// export const predictionValidationsRelations = relations(predictionValidations, ({ one }) => ({
//   prediction: one(metricPredictions, {
//     fields: [predictionValidations.predictionId],
//     references: [metricPredictions.id],
//   }),
//   validator: one(users, {
//     fields: [predictionValidations.validatorId],
//     references: [users.id],
//   }),
// }));
// export const qualityIssuesRelations = relations(qualityIssues, ({ one }) => ({
//   detectedBy: one(users, {
//     fields: [qualityIssues.detectedBy],
//     references: [users.id],
//   }),
//   prediction: one(metricPredictions, {
//     fields: [qualityIssues.predictionId],
//     references: [metricPredictions.id],
//   }),
// }));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,