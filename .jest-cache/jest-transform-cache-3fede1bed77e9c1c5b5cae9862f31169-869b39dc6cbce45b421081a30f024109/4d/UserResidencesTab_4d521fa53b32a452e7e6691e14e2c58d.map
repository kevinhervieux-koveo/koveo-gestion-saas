{"file":"/home/runner/workspace/client/src/components/user-tabs/UserResidencesTab.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/user-tabs/UserResidencesTab.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport type { UserWithAssignments, Residence } from '@shared/schema';\n\ninterface UserResidencesTabProps {\n  user: UserWithAssignments | null;\n  residences: Residence[];\n  onSave: (residenceAssignments: any[]) => void;\n  isLoading?: boolean;\n}\n\nexport function UserResidencesTab({ user, residences, onSave, isLoading = false }: UserResidencesTabProps) {\n  const [selectedResidences, setSelectedResidences] = useState<{ \n    residenceId: string; \n    relationshipType: string; \n  }[]>([]);\n\n  useEffect(() => {\n    if (user && user.residences) {\n      setSelectedResidences(\n        user.residences.map((residence: any) => ({\n          residenceId: residence.id,\n          relationshipType: residence.relationshipType || 'tenant'\n        }))\n      );\n    }\n  }, [user]);\n\n  const handleResidenceToggle = (residenceId: string) => {\n    setSelectedResidences(prev => {\n      const exists = prev.find(r => r.residenceId === residenceId);\n      if (exists) {\n        return prev.filter(r => r.residenceId !== residenceId);\n      } else {\n        return [...prev, { residenceId, relationshipType: 'tenant' }];\n      }\n    });\n  };\n\n  const handleRelationshipTypeChange = (residenceId: string, relationshipType: string) => {\n    setSelectedResidences(prev =>\n      prev.map(r => \n        r.residenceId === residenceId \n          ? { ...r, relationshipType }\n          : r\n      )\n    );\n  };\n\n  const handleSave = () => {\n    const assignments = selectedResidences.map(assignment => ({\n      ...assignment,\n      startDate: new Date().toISOString().split('T')[0],\n      isActive: true\n    }));\n    onSave(assignments);\n  };\n\n  if (!user) return null;\n\n  const isResidenceSelected = (residenceId: string) => \n    selectedResidences.some(r => r.residenceId === residenceId);\n\n  const getResidenceRelationshipType = (residenceId: string) => \n    selectedResidences.find(r => r.residenceId === residenceId)?.relationshipType || 'tenant';\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Residence Assignments</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid gap-4 max-h-60 overflow-y-auto\">\n          {residences.map((residence) => (\n            <div key={residence.id} className=\"flex items-center space-x-2 p-2 border rounded\">\n              <Checkbox\n                id={`residence-${residence.id}`}\n                checked={isResidenceSelected(residence.id)}\n                onCheckedChange={() => handleResidenceToggle(residence.id)}\n                data-testid={`checkbox-residence-${residence.id}`}\n              />\n              <div className=\"flex-1\">\n                <label\n                  htmlFor={`residence-${residence.id}`}\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                >\n                  Unit {residence.unitNumber}\n                </label>\n                <p className=\"text-xs text-gray-500\">\n                  {residence.bedrooms} bed, {residence.bathrooms} bath\n                </p>\n                {residence.squareFootage && (\n                  <p className=\"text-xs text-gray-400\">{residence.squareFootage} sq ft</p>\n                )}\n              </div>\n              {isResidenceSelected(residence.id) && (\n                <Select\n                  value={getResidenceRelationshipType(residence.id)}\n                  onValueChange={(value) => handleRelationshipTypeChange(residence.id, value)}\n                >\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"tenant\">Tenant</SelectItem>\n                    <SelectItem value=\"resident\">Resident</SelectItem>\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"flex justify-end pt-4\">\n          <Button onClick={handleSave} disabled={isLoading} data-testid=\"save-residences\">\n            {isLoading ? 'Saving...' : 'Save Residence Assignments'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"],"version":3}