{"file":"/home/runner/workspace/client/src/hooks/use-auth.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/hooks/use-auth.tsx"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { User } from '@shared/schema';\n\n/**\n * Authentication context interface for Koveo Gestion.\n * Provides user authentication state and actions throughout the application.\n */\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<{ user: User }>;\n  logout: () => Promise<void>;\n  hasRole: (role: string | string[]) => boolean;\n  hasAnyRole: (roles: string[]) => boolean;\n}\n\n/**\n * Authentication context for managing user state across the application.\n */\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n/**\n * Authentication provider component that wraps the application.\n * Manages user authentication state and provides authentication actions.\n * @param props - Component props.\n * @param props.children - Child components to wrap with authentication context.\n * @returns JSX element providing authentication context.\n */\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n\n  // Check if we're on a public page that doesn't need auth\n  const isPublicPage =\n    window.location.pathname.includes('/register') ||\n    window.location.pathname.includes('/login') ||\n    window.location.pathname.includes('/forgot-password') ||\n    window.location.pathname.includes('/reset-password') ||\n    window.location.pathname.includes('/accept-invitation') ||\n    window.location.pathname === '/' ||\n    window.location.pathname === '/features' ||\n    window.location.pathname === '/pricing' ||\n    window.location.pathname === '/security' ||\n    window.location.pathname === '/story' ||\n    window.location.pathname === '/privacy-policy' ||\n    window.location.pathname === '/terms-of-service';\n\n  // Query to get current user (always enabled, but we handle public pages differently)\n  const {\n    data: userData,\n    isLoading,\n    isError,\n  } = useQuery<User | null>({\n    queryKey: ['/api/auth/user'],\n    enabled: true, // Always run auth query to prevent reload redirects\n    queryFn: async () => {\n      try {\n        const response = await fetch('/api/auth/user', {\n          credentials: 'include',\n        });\n\n        if (response.status === 401) {\n          return null; // Not authenticated\n        }\n\n        if (!response.ok) {\n          throw new Error(`${response.status}: ${response.statusText}`);\n        }\n\n        return (await response.json()) as User;\n      } catch (error) {\n        // Silently handle auth failures on public pages\n        if (!isPublicPage) {\n          console.error('Auth error:', error);\n        }\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: 60 * 60 * 1000, // 1 hour - reduced frequency to prevent session issues\n    gcTime: 2 * 60 * 60 * 1000, // 2 hours\n    refetchOnWindowFocus: false, // Disable frequent focus checks to prevent session issues\n    refetchOnMount: true, // Always check on mount to handle page refreshes\n    refetchInterval: false, // Disable automatic refetch to prevent frequent session validation\n  });\n\n  useEffect(() => {\n    setUser(userData || null);\n\n    // Only redirect if we've completed the auth check AND user is null AND not on public page\n    // Important: Wait for both !isLoading AND !isError to avoid race conditions\n    if (userData === null && !isPublicPage && !isLoading && !isError) {\n      setLocation('/login');\n    }\n  }, [userData, isPublicPage, isLoading, isError, setLocation]);\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setUser(data.user);\n      queryClient.setQueryData(['/api/auth/user'], data.user);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      // Redirect to dashboard after successful login\n      setLocation('/dashboard/quick-actions');\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      setUser(null);\n      queryClient.setQueryData(['/api/auth/user'], null);\n      queryClient.clear();\n      // Redirect to login page after logout\n      setLocation('/login');\n    },\n  });\n\n  /**\n   * Login function that authenticates a user with email and password.\n   *\n   * @param email - User's email address.\n   * @param password - User's password.\n   * @returns Promise resolving to user data.\n   */\n  const login =\n    /**\n     * Async function.\n     * @param email - Email parameter.\n     * @param password - Password parameter.\n     * @returns Promise resolving to .\n     */ /**\n     * Async function.\n     * @param email - Email parameter.\n     * @param password - Password parameter.\n     * @returns Promise resolving to .\n     */\n\n    async (email: string, password: string): Promise<{ user: User }> => {\n      const result = await loginMutation.mutateAsync({ email, password });\n      return result;\n    };\n\n  /**\n   * Logout function that ends the user session.\n   */\n  const logout =\n    /**\n     * Async function.\n     * @returns Promise resolving to void=.\n     */ /**\n     * Async function.\n     * @returns Promise resolving to void=.\n     */\n\n    async (): Promise<void> => {\n      await logoutMutation.mutateAsync();\n    };\n\n  /**\n   * Check if the current user has a specific role or any of the provided roles.\n   *\n   * @param role - Single role string or array of roles to check.\n   * @returns True if user has the required role(s).\n   */\n  const hasRole = (role: string | string[]): boolean => {\n    /**\n     * If function.\n     * @param !user - !user parameter.\n     */\n    /**\n     * If function.\n     * @param !user - !user parameter.\n     */ /**\n     * If function.\n     * @param !user - !user parameter.\n     */\n\n    /**\n     * If function.\n     * @param !user - !user parameter.\n     */\n\n    if (!user) {\n      return false;\n    }\n    if (Array.isArray(role)) {\n      return role.includes(user.role);\n    }\n    return user.role === role;\n  };\n\n  /**\n   * Check if the current user has any of the provided roles.\n   *\n   * @param roles - Array of roles to check against.\n   * @returns True if user has any of the specified roles.\n   */\n  const hasAnyRole = (roles: string[]): boolean => {\n    if (!user) {\n      return false;\n    }\n    return roles.includes(user.role);\n  };\n\n  const _value: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    logout,\n    hasRole,\n    hasAnyRole,\n  };\n\n  return <AuthContext.Provider value={_value}>{children}</AuthContext.Provider>;\n}\n\n/**\n * Hook to access authentication context.\n * Must be used within an AuthProvider.\n *\n * @returns Authentication context with user state and actions.\n * @throws Error if used outside of AuthProvider.\n */\n/**\n * UseAuth function.\n * @returns Function result.\n */\n/**\n * Use auth function.\n * @returns AuthContextType result.\n */\nexport function /**\n * Use auth function.\n * @returns AuthContextType result.\n */ /**\n * Use auth function.\n * @returns AuthContextType result.\n */\n\nuseAuth(): AuthContextType {\n  const context = useContext(AuthContext); /**\n   * If function.\n   * @param context === undefined - context === undefined parameter.\n   */ /**\n   * If function.\n   * @param context === undefined - context === undefined parameter.\n   */\n\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n"],"version":3}