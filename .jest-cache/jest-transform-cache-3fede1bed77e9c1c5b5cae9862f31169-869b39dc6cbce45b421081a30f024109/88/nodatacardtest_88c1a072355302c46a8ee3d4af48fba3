a216f4c7eea8ab2a85060356ba5b986c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
const react_1 = require("@testing-library/react");
const lucide_react_1 = require("lucide-react");
const no_data_card_1 = require("@/components/ui/no-data-card");
const use_language_1 = require("@/hooks/use-language");
// Mock component for testing
const TestWrapper = ({ children }) => ((0, jsx_runtime_1.jsx)(use_language_1.LanguageProvider, { children: children }));
(0, globals_1.describe)('NoDataCard Component', () => {
    (0, globals_1.beforeEach)(() => {
        // Clear any existing DOM
        document.body.innerHTML = '';
    });
    (0, globals_1.describe)('Basic Functionality', () => {
        (0, globals_1.it)('should render with required props', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", testId: "test-no-data" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('test-no-data')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('test-no-data-title')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('test-no-data-description')).toBeInTheDocument();
        });
        (0, globals_1.it)('should render with different icons', () => {
            const { rerender } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", testId: "test-building" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('test-building')).toBeInTheDocument();
            rerender((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Home, titleKey: "noResidencesFound", descriptionKey: "notAssignedResidences", testId: "test-home" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('test-home')).toBeInTheDocument();
        });
        (0, globals_1.it)('should render with badge when badgeKey is provided', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", badgeKey: "noData", testId: "test-with-badge" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('test-with-badge-badge')).toBeInTheDocument();
        });
        (0, globals_1.it)('should not render badge when badgeKey is not provided', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", testId: "test-no-badge" }) }));
            (0, globals_1.expect)(react_1.screen.queryByTestId('test-no-badge-badge')).not.toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Translation Coverage', () => {
        (0, globals_1.it)('should render French translations correctly', () => {
            // Note: In a real test, we'd mock the language context to return French
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", badgeKey: "noData", testId: "test-french" }) }));
            const title = react_1.screen.getByTestId('test-french-title');
            const description = react_1.screen.getByTestId('test-french-description');
            const badge = react_1.screen.getByTestId('test-french-badge');
            // These should contain the actual translated text when language is set
            (0, globals_1.expect)(title).toBeInTheDocument();
            (0, globals_1.expect)(description).toBeInTheDocument();
            (0, globals_1.expect)(badge).toBeInTheDocument();
        });
        (0, globals_1.it)('should handle all common no data translation keys', () => {
            const testCases = [
                {
                    titleKey: 'noBuildingsFound',
                    descriptionKey: 'noBuildingsAdminMessage',
                    testId: 'buildings-test',
                },
                {
                    titleKey: 'noResidencesFound',
                    descriptionKey: 'noResidencesFoundOrg',
                    testId: 'residences-test',
                },
                {
                    titleKey: 'noDataAvailable',
                    descriptionKey: 'noBookingsFoundMessage',
                    testId: 'bookings-test',
                },
                {
                    titleKey: 'selectCommonSpace',
                    descriptionKey: 'selectCommonSpaceMessage',
                    testId: 'select-space-test',
                },
            ];
            testCases.forEach(({ titleKey, descriptionKey, testId }) => {
                (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: titleKey, descriptionKey: descriptionKey, testId: testId }) }));
                (0, globals_1.expect)(react_1.screen.getByTestId(testId)).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByTestId(`${testId}-title`)).toBeInTheDocument();
                (0, globals_1.expect)(react_1.screen.getByTestId(`${testId}-description`)).toBeInTheDocument();
                // Clean up for next test
                document.body.innerHTML = '';
            });
        });
    });
    (0, globals_1.describe)('Customization Options', () => {
        (0, globals_1.it)('should apply custom CSS classes', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", className: "custom-card-class", contentClassName: "custom-content-class", testId: "test-custom-classes" }) }));
            const card = react_1.screen.getByTestId('test-custom-classes');
            (0, globals_1.expect)(card).toHaveClass('custom-card-class');
        });
        (0, globals_1.it)('should render custom children', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", testId: "test-with-children", children: (0, jsx_runtime_1.jsx)("div", { "data-testid": "custom-child", children: "Custom content" }) }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('custom-child')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByText('Custom content')).toBeInTheDocument();
        });
        (0, globals_1.it)('should handle different icon sizes', () => {
            const { rerender } = (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", iconSize: 12, testId: "test-small-icon" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('test-small-icon')).toBeInTheDocument();
            rerender((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", iconSize: 20, testId: "test-large-icon" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('test-large-icon')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Accessibility', () => {
        (0, globals_1.it)('should have proper test IDs for screen readers', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.TrendingUp, titleKey: "noDataAvailable", descriptionKey: "noBookingsFoundMessage", badgeKey: "noData", testId: "accessibility-test" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('accessibility-test')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('accessibility-test-title')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('accessibility-test-description')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('accessibility-test-badge')).toBeInTheDocument();
        });
        (0, globals_1.it)('should maintain semantic structure', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", testId: "semantic-test" }) }));
            const title = react_1.screen.getByTestId('semantic-test-title');
            const description = react_1.screen.getByTestId('semantic-test-description');
            (0, globals_1.expect)(title.tagName.toLowerCase()).toBe('h3');
            (0, globals_1.expect)(description.tagName.toLowerCase()).toBe('p');
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle missing translation keys gracefully', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "nonExistentKey", as: true, any: true, descriptionKey: "anotherNonExistentKey", as: true, any: true, testId: "error-handling-test" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('error-handling-test')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('error-handling-test-title')).toBeInTheDocument();
            (0, globals_1.expect)(react_1.screen.getByTestId('error-handling-test-description')).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Common Use Cases', () => {
        (0, globals_1.it)('should render buildings no data scenario correctly', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: "noBuildingsAdminMessage", badgeKey: "noData", testId: "buildings-scenario" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('buildings-scenario')).toBeInTheDocument();
        });
        (0, globals_1.it)('should render residences no data scenario correctly', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Home, titleKey: "noResidencesFound", descriptionKey: "notAssignedResidences", testId: "residences-scenario" }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('residences-scenario')).toBeInTheDocument();
        });
        (0, globals_1.it)('should render common spaces stats no data scenario correctly', () => {
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.TrendingUp, titleKey: "noDataAvailable", descriptionKey: "noBookingsFoundMessage", testId: "stats-scenario", iconSize: 12 }) }));
            (0, globals_1.expect)(react_1.screen.getByTestId('stats-scenario')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,