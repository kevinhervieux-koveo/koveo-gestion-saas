3ddcbf6be87d2250b395f326019ec262
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthProvider = AuthProvider;
exports.useAuth = useAuth;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
/**
 * Authentication context for managing user state across the application.
 */
const AuthContext = (0, react_1.createContext)(undefined);
/**
 * Authentication provider component that wraps the application.
 * Manages user authentication state and provides authentication actions.
 * @param props - Component props.
 * @param props.children - Child components to wrap with authentication context.
 * @returns JSX element providing authentication context.
 */
function AuthProvider({ children }) {
    const queryClient = (0, react_query_1.useQueryClient)();
    const [, setLocation] = (0, wouter_1.useLocation)();
    const [user, setUser] = (0, react_1.useState)(null);
    // Check if we're on a public page that doesn't need auth
    const isPublicPage = window.location.pathname.includes('/register') ||
        window.location.pathname.includes('/login') ||
        window.location.pathname.includes('/forgot-password') ||
        window.location.pathname.includes('/reset-password') ||
        window.location.pathname.includes('/accept-invitation') ||
        window.location.pathname === '/' ||
        window.location.pathname === '/features' ||
        window.location.pathname === '/pricing' ||
        window.location.pathname === '/security' ||
        window.location.pathname === '/story' ||
        window.location.pathname === '/privacy-policy' ||
        window.location.pathname === '/terms-of-service';
    // Query to get current user (always enabled, but we handle public pages differently)
    const { data: userData, isLoading, isError, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        enabled: true, // Always run auth query to prevent reload redirects
        queryFn: async () => {
            try {
                const response = await fetch('/api/auth/user', {
                    credentials: 'include',
                });
                if (response.status === 401) {
                    return null; // Not authenticated
                }
                if (!response.ok) {
                    throw new Error(`${response.status}: ${response.statusText}`);
                }
                return (await response.json());
            }
            catch (error) {
                // Silently handle auth failures on public pages
                if (!isPublicPage) {
                    console.error('Auth error:', error);
                }
                return null;
            }
        },
        retry: false,
        staleTime: 60 * 60 * 1000, // 1 hour - reduced frequency to prevent session issues
        gcTime: 2 * 60 * 60 * 1000, // 2 hours
        refetchOnWindowFocus: false, // Disable frequent focus checks to prevent session issues
        refetchOnMount: true, // Always check on mount to handle page refreshes
        refetchInterval: false, // Disable automatic refetch to prevent frequent session validation
    });
    (0, react_1.useEffect)(() => {
        setUser(userData || null);
        // Only redirect if we've completed the auth check AND user is null AND not on public page
        // Important: Wait for both !isLoading AND !isError to avoid race conditions
        if (userData === null && !isPublicPage && !isLoading && !isError) {
            setLocation('/login');
        }
    }, [userData, isPublicPage, isLoading, isError, setLocation]);
    // Login mutation
    const loginMutation = (0, react_query_1.useMutation)({
        mutationFn: async ({ email, password }) => {
            const response = await fetch('/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email, password }),
                credentials: 'include',
            });
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Login failed');
            }
            return response.json();
        },
        onSuccess: (data) => {
            setUser(data.user);
            queryClient.setQueryData(['/api/auth/user'], data.user);
            queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });
            // Redirect to dashboard after successful login
            setLocation('/dashboard/quick-actions');
        },
    });
    // Logout mutation
    const logoutMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            const response = await fetch('/api/auth/logout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
            });
            if (!response.ok) {
                throw new Error('Logout failed');
            }
            return response.json();
        },
        onSuccess: () => {
            setUser(null);
            queryClient.setQueryData(['/api/auth/user'], null);
            queryClient.clear();
            // Redirect to login page after logout
            setLocation('/login');
        },
    });
    /**
     * Login function that authenticates a user with email and password.
     *
     * @param email - User's email address.
     * @param password - User's password.
     * @returns Promise resolving to user data.
     */
    const login = 
    /**
     * Async function.
     * @param email - Email parameter.
     * @param password - Password parameter.
     * @returns Promise resolving to .
     */ /**
    * Async function.
    * @param email - Email parameter.
    * @param password - Password parameter.
    * @returns Promise resolving to .
    */
    async (email, password) => {
        const result = await loginMutation.mutateAsync({ email, password });
        return result;
    };
    /**
     * Logout function that ends the user session.
     */
    const logout = 
    /**
     * Async function.
     * @returns Promise resolving to void=.
     */ /**
    * Async function.
    * @returns Promise resolving to void=.
    */
    async () => {
        await logoutMutation.mutateAsync();
    };
    /**
     * Check if the current user has a specific role or any of the provided roles.
     *
     * @param role - Single role string or array of roles to check.
     * @returns True if user has the required role(s).
     */
    const hasRole = (role) => {
        /**
         * If function.
         * @param !user - !user parameter.
         */
        /**
         * If function.
         * @param !user - !user parameter.
         */ /**
        * If function.
        * @param !user - !user parameter.
        */
        /**
         * If function.
         * @param !user - !user parameter.
         */
        if (!user) {
            return false;
        }
        if (Array.isArray(role)) {
            return role.includes(user.role);
        }
        return user.role === role;
    };
    /**
     * Check if the current user has any of the provided roles.
     *
     * @param roles - Array of roles to check against.
     * @returns True if user has any of the specified roles.
     */
    const hasAnyRole = (roles) => {
        if (!user) {
            return false;
        }
        return roles.includes(user.role);
    };
    const _value = {
        user,
        isLoading,
        isAuthenticated: !!user,
        login,
        logout,
        hasRole,
        hasAnyRole,
    };
    return (0, jsx_runtime_1.jsx)(AuthContext.Provider, { value: _value, children: children });
}
/**
 * Hook to access authentication context.
 * Must be used within an AuthProvider.
 *
 * @returns Authentication context with user state and actions.
 * @throws Error if used outside of AuthProvider.
 */
/**
 * UseAuth function.
 * @returns Function result.
 */
/**
 * Use auth function.
 * @returns AuthContextType result.
 */
function useAuth() {
    const context = (0, react_1.useContext)(AuthContext); /**
     * If function.
     * @param context === undefined - context === undefined parameter.
     */ /**
    * If function.
    * @param context === undefined - context === undefined parameter.
    */
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,