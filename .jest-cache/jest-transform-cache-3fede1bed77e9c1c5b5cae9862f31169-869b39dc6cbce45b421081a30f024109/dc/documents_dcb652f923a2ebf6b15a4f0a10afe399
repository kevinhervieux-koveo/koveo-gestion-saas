abb7215c0a259fe5cd82ed11979246a4
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDocumentRoutes = registerDocumentRoutes;
const auth_1 = require("../auth");
const storage_1 = require("../storage");
const documents_1 = require("../../shared/schemas/documents");
const zod_1 = require("zod");
const multer_1 = __importDefault(require("multer"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const crypto_1 = __importDefault(require("crypto"));
const uuid_1 = require("uuid");
const drizzle_orm_1 = require("drizzle-orm");
const db_1 = require("../db");
// Configure multer for file uploads
const upload = (0, multer_1.default)({
    dest: '/tmp/uploads/',
    limits: {
        fileSize: 50 * 1024 * 1024, // 50MB limit
    },
    fileFilter: (req, file, cb) => {
        // Allow most common document and image types
        const allowedTypes = /\.(pdf|doc|docx|xls|xlsx|ppt|pptx|txt|jpg|jpeg|png|gif|bmp|tiff)$/i;
        if (allowedTypes.test(file.originalname)) {
            cb(null, true);
        }
        else {
            cb(new Error('Invalid file type. Only documents and images are allowed.'));
        }
    },
});
// DocumentRecord categories for validation - synchronized with frontend
const DOCUMENT_CATEGORIES = [
    'bylaw',
    'financial',
    'maintenance',
    'legal',
    'meeting_minutes',
    'insurance',
    'contracts',
    'permits',
    'inspection',
    'lease',
    'correspondence',
    'utilities',
    'other',
];
// Enhanced schemas for different document types
const createDocumentSchema = documents_1.insertDocumentSchema.extend({
    category: zod_1.z.enum(DOCUMENT_CATEGORIES),
    title: zod_1.z.string().min(1).max(255),
    description: zod_1.z.string().optional(),
    isVisibleToTenants: zod_1.z.boolean().default(false),
});
const createBuildingDocumentSchema = documents_1.insertDocumentSchema.extend({
    type: zod_1.z.enum(DOCUMENT_CATEGORIES),
    title: zod_1.z.string().min(1).max(255).optional(),
    description: zod_1.z.string().optional(),
});
const createResidentDocumentSchema = documents_1.insertDocumentSchema.extend({
    type: zod_1.z.enum(DOCUMENT_CATEGORIES),
    title: zod_1.z.string().min(1).max(255).optional(),
    description: zod_1.z.string().optional(),
});
// Schema for unified document upload
const uploadDocumentRecordSchema = zod_1.z.object({
    name: zod_1.z.string().min(1).max(255),
    description: zod_1.z.string().optional(),
    documentType: zod_1.z.enum(DOCUMENT_CATEGORIES),
    isVisibleToTenants: zod_1.z.boolean().default(false),
    residenceId: zod_1.z.string().uuid().optional(),
    buildingId: zod_1.z.string().uuid().optional(),
});
/**
 *
 * @param app
 */
/**
 * RegisterDocumentRecordRoutes function.
 * @param app
 * @returns Function result.
 */
function registerDocumentRoutes(app) {
    console.log(`[${new Date().toISOString()}] 🔧 Registering document routes...`);
    // Error tracking for production debugging
    const errorLog = [];
    // Database connection testing functions
    const testDatabaseConnection = async () => {
        try {
            const result = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT 1 as test`);
            return {
                success: true,
                result: result.rows[0],
                url_truncated: process.env.DATABASE_URL?.substring(0, 50) + '...'
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message,
                url_truncated: process.env.DATABASE_URL?.substring(0, 50) + '...'
            };
        }
    };
    const testSampleQuery = async () => {
        try {
            // Test the exact query that's failing
            const result = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT COUNT(*) as document_count 
        FROM documents 
        LIMIT 1
      `);
            return {
                success: true,
                document_count: result.rows[0]?.document_count || 0
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message,
                stack: error.stack?.substring(0, 200) + '...'
            };
        }
    };
    const checkEnumValues = async () => {
        try {
            // Check current enum values in production
            const result = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT enumlabel 
        FROM pg_enum 
        WHERE enumtypid = (
          SELECT oid 
          FROM pg_type 
          WHERE typname = 'user_role'
        )
        ORDER BY enumsortorder
      `);
            return {
                success: true,
                production_enum_values: result.rows.map(row => row.enumlabel)
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    };
    const checkUserOrganizationLinks = async () => {
        try {
            // Check user-organization relationships
            const userCount = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT COUNT(*) as total FROM users WHERE is_active = true`);
            const orgCount = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT COUNT(*) as total FROM organizations WHERE is_active = true`);
            const linkCount = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT COUNT(*) as total FROM user_organizations WHERE is_active = true`);
            // Check users without organization links
            const orphanUsers = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT u.id, u.email, u.role 
        FROM users u 
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true
        WHERE u.is_active = true AND uo.user_id IS NULL
        LIMIT 10
      `);
            // Check current test user specifically (from error logs)
            const testUser = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT u.email, u.role, uo.organization_id, o.name as org_name
        FROM users u
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true  
        LEFT JOIN organizations o ON uo.organization_id = o.id
        WHERE u.id = '222f5a0d-6bc6-4f28-9f4d-32c133eed333'
      `);
            return {
                success: true,
                stats: {
                    total_users: userCount.rows[0]?.total || 0,
                    total_organizations: orgCount.rows[0]?.total || 0,
                    total_links: linkCount.rows[0]?.total || 0,
                    orphan_user_count: orphanUsers.rows.length
                },
                orphan_users: orphanUsers.rows,
                test_user_status: testUser.rows[0] || null
            };
        }
        catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    };
    // Enum cleanup endpoint for safe schema migration  
    app.post('/api/documents/cleanup-enum', async (req, res) => {
        try {
            // First, verify no users have the 'owner' role
            const userCheck = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT COUNT(*) as owner_count 
        FROM users 
        WHERE role = 'owner'
      `);
            const ownerCount = Number(userCheck.rows[0]?.owner_count) || 0;
            if (ownerCount > 0) {
                return res.status(400).json({
                    error: 'Cannot remove owner role - users still assigned to it',
                    owner_count: ownerCount
                });
            }
            // Safe to remove - no users have 'owner' role
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TYPE user_role DROP VALUE IF EXISTS 'owner'
      `);
            res.json({
                message: 'Successfully removed unused owner role',
                safe_to_push_schema: true,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error during enum cleanup:', error);
            res.status(500).json({
                error: 'Enum cleanup failed',
                message: error.message,
                suggestion: 'Try running npm run db:push --force instead'
            });
        }
    });
    // Fix user-organization relationships
    app.post('/api/documents/fix-user-links', async (req, res) => {
        try {
            // Step 1: Find users without organization links
            const orphanUsers = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT u.id, u.email, u.role 
        FROM users u 
        LEFT JOIN user_organizations uo ON u.id = uo.user_id AND uo.is_active = true
        WHERE u.is_active = true AND uo.user_id IS NULL
      `);
            if (orphanUsers.rows.length === 0) {
                return res.json({
                    message: 'All users already have organization links',
                    action_taken: 'none',
                    timestamp: new Date().toISOString()
                });
            }
            // Step 2: Get the first available organization (or create default one)
            let defaultOrg = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT id, name FROM organizations WHERE is_active = true LIMIT 1
      `);
            let organizationId;
            let organizationName;
            if (defaultOrg.rows.length === 0) {
                // Create a default organization if none exists
                organizationId = crypto_1.default.randomUUID();
                organizationName = 'Default Organization';
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          INSERT INTO organizations (id, name, type, address, phone, email, is_active, created_at, updated_at)
          VALUES (${organizationId}, ${organizationName}, 'condominium', '123 Main St', '514-555-0100', 'admin@koveo.ca', true, NOW(), NOW())
        `);
            }
            else {
                organizationId = defaultOrg.rows[0].id;
                organizationName = defaultOrg.rows[0].name;
            }
            // Step 3: Link all orphan users to the default organization
            const linkPromises = orphanUsers.rows.map(user => {
                const linkId = crypto_1.default.randomUUID();
                return db_1.db.execute((0, drizzle_orm_1.sql) `
          INSERT INTO user_organizations (id, user_id, organization_id, role, is_active, created_at, updated_at)
          VALUES (${linkId}, ${user.id}, ${organizationId}, ${user.role}, true, NOW(), NOW())
        `);
            });
            await Promise.all(linkPromises);
            res.json({
                message: 'Successfully linked users to organizations',
                users_linked: orphanUsers.rows.length,
                organization_id: organizationId,
                organization_name: organizationName,
                linked_users: orphanUsers.rows.map(u => ({ id: u.id, email: u.email, role: u.role })),
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error fixing user-organization links:', error);
            res.status(500).json({
                error: 'Failed to fix user-organization links',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Safe enum migration endpoint
    app.post('/api/documents/fix-enum-migration', async (req, res) => {
        try {
            // Step 1: Check current enum values and usage
            const enumCheck = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT enumlabel, enumsortorder 
        FROM pg_enum 
        WHERE enumtypid = (SELECT oid FROM pg_type WHERE typname = 'user_role')
        ORDER BY enumsortorder
      `);
            const currentEnumValues = enumCheck.rows.map(row => row.enumlabel);
            // Step 2: Check if we have any data that would prevent migration
            const userRoleUsage = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT role, COUNT(*) as count 
        FROM users 
        GROUP BY role
      `);
            // Step 3: Since enum reordering is the issue, let's use a different approach
            // We'll create a new enum with correct order, migrate data, then swap
            const targetEnumValues = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];
            // Check if current order matches target
            const orderMatches = JSON.stringify(currentEnumValues) === JSON.stringify(targetEnumValues);
            if (orderMatches) {
                return res.json({
                    message: 'Enum values already in correct order',
                    current_values: currentEnumValues,
                    target_values: targetEnumValues,
                    migration_needed: false
                });
            }
            // Step 4: Create new enum with correct order
            await db_1.db.execute((0, drizzle_orm_1.sql) `CREATE TYPE user_role_new AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')`);
            // Step 5: Update all tables to use new enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE users 
        ALTER COLUMN role TYPE user_role_new 
        USING role::text::user_role_new
      `);
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE user_organizations 
        ALTER COLUMN organization_role TYPE user_role_new 
        USING organization_role::text::user_role_new
      `);
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE role_permissions 
        ALTER COLUMN role TYPE user_role_new 
        USING role::text::user_role_new
      `);
            // Step 6: Drop old enum and rename new one
            await db_1.db.execute((0, drizzle_orm_1.sql) `DROP TYPE user_role`);
            await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TYPE user_role_new RENAME TO user_role`);
            res.json({
                message: 'Successfully migrated user_role enum',
                old_values: currentEnumValues,
                new_values: targetEnumValues,
                user_role_usage: userRoleUsage.rows,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error during enum migration:', error);
            res.status(500).json({
                error: 'Enum migration failed',
                message: error.message,
                suggestion: 'This is a complex migration - may need manual intervention',
                timestamp: new Date().toISOString()
            });
        }
    });
    // Fix invitations table enum dependency
    app.post('/api/documents/fix-invitations-dependency', async (req, res) => {
        try {
            // Step 1: Check current invitations table structure
            const invitationsSchema = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT column_name, data_type, column_default
        FROM information_schema.columns 
        WHERE table_name = 'invitations' AND column_name = 'role'
      `);
            // Step 2: Remove default value from invitations.role column temporarily
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE invitations 
        ALTER COLUMN role DROP DEFAULT
      `);
            // Step 3: Check what other tables might have enum dependencies
            const enumDependencies = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT 
          t.table_name,
          c.column_name,
          c.column_default
        FROM information_schema.tables t
        JOIN information_schema.columns c ON t.table_name = c.table_name
        WHERE c.data_type = 'USER-DEFINED' 
        AND c.udt_name = 'user_role'
        AND c.column_default IS NOT NULL
      `);
            res.json({
                message: 'Successfully removed invitations table enum dependency',
                removed_defaults: invitationsSchema.rows,
                remaining_dependencies: enumDependencies.rows,
                next_step: 'Run npm run db:push now, then call /api/documents/restore-invitations-default',
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error fixing invitations dependency:', error);
            res.status(500).json({
                error: 'Failed to fix invitations dependency',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Restore invitations default value after schema sync
    app.post('/api/documents/restore-invitations-default', async (req, res) => {
        try {
            // Restore default value to 'tenant' for invitations.role column
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE invitations 
        ALTER COLUMN role SET DEFAULT 'tenant'
      `);
            // Verify the change
            const verification = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT column_name, column_default
        FROM information_schema.columns 
        WHERE table_name = 'invitations' AND column_name = 'role'
      `);
            res.json({
                message: 'Successfully restored invitations role default to tenant',
                current_default: verification.rows[0]?.column_default,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error restoring invitations default:', error);
            res.status(500).json({
                error: 'Failed to restore invitations default',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Migrate owner users to admin before enum cleanup
    app.post('/api/documents/migrate-owner-to-admin', async (req, res) => {
        try {
            // Step 1: Check how many users have 'owner' role
            const ownerUsersCheck = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT id, email, first_name, last_name 
        FROM users 
        WHERE role = 'owner'
      `);
            const ownerCount = ownerUsersCheck.rows.length;
            if (ownerCount === 0) {
                return res.json({
                    message: 'No owner users found - migration not needed',
                    owner_count: 0,
                    timestamp: new Date().toISOString()
                });
            }
            // Step 2: Update all owner users to admin
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        UPDATE users 
        SET role = 'admin' 
        WHERE role = 'owner'
      `);
            // Step 3: Update user_organizations table if it exists
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          UPDATE user_organizations 
          SET organization_role = 'admin' 
          WHERE organization_role = 'owner'
        `);
            }
            catch (e) {
                // Table might not exist, that's OK
            }
            // Step 4: Remove 'owner' from enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TYPE user_role RENAME TO user_role_old
      `);
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        CREATE TYPE user_role AS ENUM ('admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident')
      `);
            // Step 5: Update all tables to use new enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `
        ALTER TABLE users 
        ALTER COLUMN role TYPE user_role 
        USING role::text::user_role
      `);
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role TYPE user_role 
          USING organization_role::text::user_role
        `);
            }
            catch (e) {
                // Table might not exist
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE role_permissions 
          ALTER COLUMN role TYPE user_role 
          USING role::text::user_role
        `);
            }
            catch (e) {
                // Table might not exist
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE invitations 
          ALTER COLUMN role TYPE user_role 
          USING role::text::user_role
        `);
            }
            catch (e) {
                // Column might not exist
            }
            // Step 6: Drop old enum
            await db_1.db.execute((0, drizzle_orm_1.sql) `DROP TYPE user_role_old`);
            res.json({
                message: 'Successfully migrated owner users to admin',
                migrated_users: ownerUsersCheck.rows,
                owner_count: ownerCount,
                new_enum_values: ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'],
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error migrating owner users to admin:', error);
            res.status(500).json({
                error: 'Owner to admin migration failed',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Remove all remaining enum dependencies
    app.post('/api/documents/remove-all-enum-dependencies', async (req, res) => {
        try {
            const results = [];
            // Remove default from users.role
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE users 
          ALTER COLUMN role DROP DEFAULT
        `);
                results.push('users.role default removed');
            }
            catch (e) {
                results.push(`users.role: ${e.message}`);
            }
            // Remove default from user_organizations.organization_role
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role DROP DEFAULT
        `);
                results.push('user_organizations.organization_role default removed');
            }
            catch (e) {
                results.push(`user_organizations.organization_role: ${e.message}`);
            }
            // Check remaining dependencies
            const remainingDeps = await db_1.db.execute((0, drizzle_orm_1.sql) `
        SELECT 
          t.table_name,
          c.column_name,
          c.column_default
        FROM information_schema.tables t
        JOIN information_schema.columns c ON t.table_name = c.table_name
        WHERE c.data_type = 'USER-DEFINED' 
        AND c.udt_name = 'user_role'
        AND c.column_default IS NOT NULL
      `);
            res.json({
                message: 'Removed all enum dependencies',
                operations: results,
                remaining_dependencies: remainingDeps.rows,
                next_step: 'Run npm run db:push now',
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error removing enum dependencies:', error);
            res.status(500).json({
                error: 'Failed to remove enum dependencies',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Restore all default values after schema sync
    app.post('/api/documents/restore-all-defaults', async (req, res) => {
        try {
            const results = [];
            // Restore users.role default
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE users 
          ALTER COLUMN role SET DEFAULT 'tenant'
        `);
                results.push('users.role default restored to tenant');
            }
            catch (e) {
                results.push(`users.role restore failed: ${e.message}`);
            }
            // Restore user_organizations.organization_role default
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE user_organizations 
          ALTER COLUMN organization_role SET DEFAULT 'tenant'
        `);
                results.push('user_organizations.organization_role default restored to tenant');
            }
            catch (e) {
                results.push(`user_organizations.organization_role restore failed: ${e.message}`);
            }
            // Restore invitations.role default
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE invitations 
          ALTER COLUMN role SET DEFAULT 'tenant'
        `);
                results.push('invitations.role default restored to tenant');
            }
            catch (e) {
                results.push(`invitations.role restore failed: ${e.message}`);
            }
            res.json({
                message: 'Restored all default values',
                operations: results,
                timestamp: new Date().toISOString()
            });
        }
        catch (error) {
            console.error('❌ Error restoring defaults:', error);
            res.status(500).json({
                error: 'Failed to restore defaults',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        }
    });
    // Complete database schema sync endpoint
    app.post('/api/documents/complete-schema-sync', async (req, res) => {
        try {
            const results = [];
            // Step 1: Remove all enum dependencies temporarily
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE users ALTER COLUMN role DROP DEFAULT`);
                results.push('✓ Removed users.role default');
            }
            catch (e) {
                results.push(`users.role: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role DROP DEFAULT`);
                results.push('✓ Removed user_organizations.organization_role default');
            }
            catch (e) {
                results.push(`user_organizations.organization_role: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE invitations ALTER COLUMN role DROP DEFAULT`);
                results.push('✓ Removed invitations.role default');
            }
            catch (e) {
                results.push(`invitations.role: ${e.message}`);
            }
            // Step 2: Migrate any 'owner' users to 'admin'
            const ownerUsers = await db_1.db.execute((0, drizzle_orm_1.sql) `SELECT count(*) as count FROM users WHERE role = 'owner'`);
            const ownerCount = Number(ownerUsers.rows[0]?.count || 0);
            if (ownerCount > 0) {
                await db_1.db.execute((0, drizzle_orm_1.sql) `UPDATE users SET role = 'admin' WHERE role = 'owner'`);
                results.push(`✓ Migrated ${ownerCount} owner users to admin`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `UPDATE user_organizations SET organization_role = 'admin' WHERE organization_role = 'owner'`);
                results.push('✓ Updated user_organizations owner roles to admin');
            }
            catch (e) {
                results.push(`user_organizations owner update: ${e.message}`);
            }
            // Step 3: Fix the enum to match development schema
            try {
                // Rename current enum
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TYPE user_role RENAME TO user_role_old`);
                // Create new enum with correct values
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          CREATE TYPE user_role AS ENUM (
            'admin', 'manager', 'tenant', 'resident', 
            'demo_manager', 'demo_tenant', 'demo_resident'
          )
        `);
                // Update all tables
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE users ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role TYPE user_role USING organization_role::text::user_role`);
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE invitations ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                try {
                    await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE role_permissions ALTER COLUMN role TYPE user_role USING role::text::user_role`);
                    results.push('✓ Updated role_permissions enum');
                }
                catch (e) {
                    results.push(`role_permissions: ${e.message}`);
                }
                // Drop old enum
                await db_1.db.execute((0, drizzle_orm_1.sql) `DROP TYPE user_role_old`);
                results.push('✓ Successfully updated user_role enum');
            }
            catch (e) {
                results.push(`Enum update failed: ${e.message}`);
            }
            // Step 4: Restore default values
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE users ALTER COLUMN role SET DEFAULT 'tenant'`);
                results.push('✓ Restored users.role default to tenant');
            }
            catch (e) {
                results.push(`users.role default restore: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE user_organizations ALTER COLUMN organization_role SET DEFAULT 'tenant'`);
                results.push('✓ Restored user_organizations.organization_role default to tenant');
            }
            catch (e) {
                results.push(`user_organizations.organization_role default restore: ${e.message}`);
            }
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `ALTER TABLE invitations ALTER COLUMN role SET DEFAULT 'tenant'`);
                results.push('✓ Restored invitations.role default to tenant');
            }
            catch (e) {
                results.push(`invitations.role default restore: ${e.message}`);
            }
            // Step 5: Add missing columns that exist in production but not development
            try {
                await db_1.db.execute((0, drizzle_orm_1.sql) `
          ALTER TABLE invitation_audit_log 
          ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW()
        `);
                results.push('✓ Added created_at to invitation_audit_log');
            }
            catch (e) {
                results.push(`invitation_audit_log.created_at: ${e.message}`);
            }
            res.json({
                message: 'Database schema synchronization complete',
                operations: results,
                timestamp: new Date().toISOString(),
                success: true
            });
        }
        catch (error) {
            console.error('❌ Error during schema synchronization:', error);
            res.status(500).json({
                error: 'Schema synchronization failed',
                message: error.message,
                timestamp: new Date().toISOString(),
                success: false
            });
        }
    });
    // Enhanced diagnostic endpoint with database schema check
    app.get('/api/documents/diagnostic', async (req, res) => {
        try {
            // Check if documents table exists
            let tableExists = false;
            let tableSchema = null;
            try {
                const result = await db_1.db.execute((0, drizzle_orm_1.sql) `
          SELECT column_name, data_type, is_nullable, column_default 
          FROM information_schema.columns 
          WHERE table_name = 'documents' 
          ORDER BY ordinal_position
        `);
                tableExists = result.rows.length > 0;
                tableSchema = result.rows;
            }
            catch (schemaError) {
                console.error('Schema check error:', schemaError);
            }
            res.json({
                message: 'Document API diagnostic',
                gcs_disabled: true,
                session_fix_applied: true,
                timestamp: new Date().toISOString(),
                environment: process.env.NODE_ENV,
                version: 'v2.1-gcs-disabled',
                recent_errors: errorLog.slice(-5), // Last 5 errors
                storage_status: {
                    exists: !!storage_1.storage,
                    type: storage_1.storage?.constructor?.name,
                    methods: Object.getOwnPropertyNames(Object.getPrototypeOf(storage_1.storage || {}))
                },
                database_status: {
                    documents_table_exists: tableExists,
                    documents_table_schema: tableSchema,
                    schema_columns_count: tableSchema?.length || 0,
                    connection_test: await testDatabaseConnection(),
                    sample_query_test: await testSampleQuery(),
                    enum_check: await checkEnumValues(),
                    user_organization_links: await checkUserOrganizationLinks()
                }
            });
        }
        catch (error) {
            console.error('❌ Error running diagnostic:', error);
            res.status(500).json({
                error: 'Diagnostic failed',
                message: error.message
            });
        }
    });
    // Error logging helper
    const logError = (endpoint, error, user) => {
        const errorEntry = {
            timestamp: new Date().toISOString(),
            endpoint,
            error: {
                message: error.message,
                stack: error.stack,
                name: error.name,
                details: error.toString()
            },
            user: user ? { id: user.id, role: user.role } : null
        };
        errorLog.push(errorEntry);
        if (errorLog.length > 50)
            errorLog.shift(); // Keep only last 50 errors
        console.error(`[${errorEntry.timestamp}] 🚨 ERROR in ${endpoint}:`, errorEntry);
        return errorEntry;
    };
    // Get all documents for the authenticated user
    app.get('/api/documents', auth_1.requireAuth, async (req, res) => {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] 📄 GET /api/documents - Starting request`, {
            userId: req.user?.id,
            userRole: req.user?.role,
            query: req.query,
            url: req.url,
            method: req.method
        });
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            // Production debugging: Log the request details
            console.log(`[${timestamp}] 🔍 User data extracted:`, {
                userId,
                userRole,
                hasValidUser: !!user
            });
            // Critical: Check if storage object exists and is properly initialized
            console.log(`[${timestamp}] 💾 Storage check:`, {
                storageExists: !!storage_1.storage,
                storageType: storage_1.storage?.constructor?.name,
                storageMethod: typeof storage_1.storage?.getDocuments
            });
            const documentType = req.query.type; // 'building', 'resident', or undefined for both
            const specificResidenceId = req.query.residenceId; // Filter by specific residence
            const specificBuildingId = req.query.buildingId; // Filter by specific building
            // Get user's organization and residences for filtering
            console.log(`[${timestamp}] 🔍 Fetching user data from storage...`);
            console.log(`[${timestamp}] 📋 Calling getUserOrganizations(${userId})...`);
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            console.log(`[${timestamp}] ✅ getUserOrganizations SUCCESS - Found ${organizations.length} organizations`);
            console.log(`[${timestamp}] 📋 Calling getUserResidences(${userId})...`);
            const userResidences = await storage_1.storage.getUserResidences(userId);
            console.log(`[${timestamp}] ✅ getUserResidences SUCCESS - Found ${userResidences.length} user residences`);
            console.log(`[${timestamp}] 📋 Calling getBuildings()...`);
            const buildings = await storage_1.storage.getBuildings();
            console.log(`[${timestamp}] ✅ getBuildings SUCCESS - Found ${buildings.length} buildings`);
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            console.log(`[${timestamp}] 🏢 Organization ID determined:`, organizationId);
            // If specific residence ID provided, filter to only that residence
            let residenceIds;
            if (specificResidenceId) {
                // Admin users have access to all residences
                if (userRole === 'admin' || userRole === 'manager') {
                    residenceIds = [specificResidenceId];
                }
                else {
                    // Verify user has access to this specific residence
                    // Handle both simple {residenceId: string} and complex nested structures
                    const hasAccess = userResidences.some((ur) => {
                        // Handle simple structure
                        if (ur.residenceId === specificResidenceId) {
                            return true;
                        }
                        // Handle complex nested structure
                        if (ur.userResidence?.residenceId === specificResidenceId) {
                            return true;
                        }
                        // Handle residence nested structure
                        if (ur.residence?.id === specificResidenceId) {
                            return true;
                        }
                        return false;
                    });
                    if (!hasAccess) {
                        return res.status(403).json({ message: 'Access denied to this residence' });
                    }
                    residenceIds = [specificResidenceId];
                }
            }
            else {
                // Extract residence IDs from both simple and complex structures
                residenceIds = userResidences
                    .map((ur) => {
                    // Handle simple structure
                    if (ur.residenceId) {
                        return ur.residenceId;
                    }
                    // Handle complex nested structure
                    if (ur.userResidence?.residenceId) {
                        return ur.userResidence.residenceId;
                    }
                    // Handle residence nested structure
                    if (ur.residence?.id) {
                        return ur.residence.id;
                    }
                    return null;
                })
                    .filter((id) => id !== null);
            }
            const buildingIds = buildings.map((b) => b.id);
            const allDocumentRecords = [];
            // Use unified documents system
            const filters = {
                userId,
                userRole,
            };
            // Filter by specific residence if provided
            if (specificResidenceId) {
                filters.residenceId = specificResidenceId;
            }
            // Filter by specific building if provided
            if (specificBuildingId) {
                filters.buildingId = specificBuildingId;
            }
            else if (documentType === 'building') {
                // For building documents, search in buildings user has access to
                if (buildingIds.length > 0) {
                    // Get all documents for buildings, will filter later
                }
            }
            else if (documentType === 'resident') {
                // For resident documents, search in residences user has access to
                if (residenceIds.length > 0) {
                    // Get all documents for residences, will filter later
                }
            }
            // CRITICAL DEBUG POINT: This is where 500 errors likely occur
            console.log(`[${timestamp}] 🎯 CRITICAL: About to call storage.getDocuments with filters:`, filters);
            console.log(`[${timestamp}] 🔧 Storage instance:`, storage_1.storage.constructor.name);
            console.log(`[${timestamp}] 📊 Filters being passed:`, JSON.stringify(filters, null, 2));
            const documents = await storage_1.storage.getDocuments(filters);
            // CRITICAL: Log successful database response
            console.log(`[${timestamp}] ✅ CRITICAL: storage.getDocuments SUCCESS - returned ${documents?.length || 0} documents`);
            console.log(`[${timestamp}] 📋 Document preview:`, documents?.slice(0, 3)?.map(d => ({
                id: d.id,
                name: d.name,
                uploadedById: d.uploadedById,
                buildingId: d.buildingId,
                residenceId: d.residenceId
            })));
            // Debug logging
            console.log('🔍 [DOCUMENTS API DEBUG]:', {
                filters,
                documentsFound: documents?.length || 0,
                specificResidenceId,
                userRole,
                userId,
            });
            // Apply role-based filtering with tenant visibility rules
            const filteredDocumentRecords = documents.filter((doc) => {
                // If filtering by specific building, only show documents for that building
                if (specificBuildingId) {
                    if (doc.buildingId !== specificBuildingId) {
                        return false;
                    }
                }
                // Admin can see all documents
                if (userRole === 'admin') {
                    return true;
                }
                // Manager can see all documents in their organization
                if (userRole === 'manager' && organizationId) {
                    if (doc.buildingId && buildingIds.includes(doc.buildingId)) {
                        return true;
                    }
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                }
                // Resident access rules
                if (userRole === 'resident') {
                    // Residents can see documents in their residence
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                    // Residents can see building documents related to their residences
                    if (doc.buildingId) {
                        // Check if any of user's residences belong to this building
                        const userBuildingIds = userResidences
                            .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                            .filter(Boolean);
                        return userBuildingIds.includes(doc.buildingId);
                    }
                }
                // Tenant access rules - more restrictive
                if (userRole === 'tenant') {
                    // Tenants can only see documents marked as visible to tenants
                    if (!doc.isVisibleToTenants) {
                        return false;
                    }
                    // Tenants can see visible documents in their residence
                    if (doc.residenceId && residenceIds.includes(doc.residenceId)) {
                        return true;
                    }
                    // Tenants can see visible building documents related to their residences
                    if (doc.buildingId) {
                        // Check if any of user's residences belong to this building
                        const userBuildingIds = userResidences
                            .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                            .filter(Boolean);
                        return userBuildingIds.includes(doc.buildingId);
                    }
                }
                return false;
            });
            // Add document type indicators for frontend compatibility
            const enhancedDocumentRecords = filteredDocumentRecords.map((doc) => ({
                ...doc,
                documentCategory: doc.buildingId ? 'building' : 'resident',
                entityType: doc.buildingId ? 'building' : 'residence',
                entityId: doc.buildingId || doc.residenceId,
                uploadDate: doc.createdAt, // For backward compatibility
            }));
            allDocumentRecords.push(...enhancedDocumentRecords);
            // Sort by upload date, most recent first
            allDocumentRecords.sort((a, b) => new Date(b.uploadDate).getTime() - new Date(a.uploadDate).getTime());
            const response = {
                documents: allDocumentRecords,
                total: allDocumentRecords.length,
                buildingCount: allDocumentRecords.filter((d) => d.documentCategory === 'building').length,
                residentCount: allDocumentRecords.filter((d) => d.documentCategory === 'resident').length,
                legacyCount: allDocumentRecords.filter((d) => d.documentCategory === 'legacy').length,
            };
            res.json(response);
        }
        catch (_error) {
            const errorEntry = logError('GET /api/documents', _error, req.user);
            res.status(500).json({
                message: 'Failed to fetch documents',
                error_id: errorEntry.timestamp,
                debug_info: process.env.NODE_ENV === 'development' ? _error.message : undefined
            });
        }
    });
    // Get a specific document by ID
    app.get('/api/documents/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type; // Optional type hint
            // Get user's organization and residences for filtering
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const residences = await storage_1.storage.getUserResidences(userId);
            const buildings = await storage_1.storage.getBuildings();
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            const residenceIds = residences.map((ur) => ur.residenceId);
            const buildingIds = buildings.map((b) => b.id);
            let document = null;
            // Try to find the document in the appropriate table(s)
            const hasNewDocumentRecordMethods = 'getBuildingDocumentRecord' in storage_1.storage;
            if (hasNewDocumentRecordMethods) {
                if (!documentType || documentType === 'building') {
                    try {
                        document = await storage_1.storage.getBuildingDocumentRecord(documentId, userId, userRole, organizationId, buildingIds);
                        if (document) {
                            document.documentCategory = 'building';
                            document.entityType = 'building';
                            document.entityId = document.buildingId;
                        }
                    }
                    catch (e) {
                        console.warn('⚠️ Error fetching building document:', e);
                    }
                }
                if (!document && (!documentType || documentType === 'resident')) {
                    try {
                        document = await storage_1.storage.getResidentDocumentRecord(documentId, userId, userRole, organizationId, residenceIds);
                        if (document) {
                            document.documentCategory = 'resident';
                            document.entityType = 'residence';
                            document.entityId = document.residenceId;
                        }
                    }
                    catch (e) {
                        console.warn('⚠️ Error fetching resident document:', e);
                    }
                }
            }
            // Fallback to legacy documents if not found and no type specified
            if (!document && !documentType) {
                try {
                    document = await storage_1.storage.getDocument(documentId);
                    if (document) {
                        document.documentCategory = 'legacy';
                        document.entityType = 'legacy';
                        document.entityId = null;
                    }
                }
                catch (e) {
                    console.warn('⚠️ Error fetching legacy document:', e);
                }
            }
            if (!document) {
                return res.status(404).json({ message: 'DocumentRecord not found or access denied' });
            }
            res.json(document);
        }
        catch (error) {
            console.error('❌ Error fetching document:', error);
            res.status(500).json({ message: 'Failed to fetch document' });
        }
    });
    // Create a new document (supports both file upload and text-only documents)
    app.post('/api/documents', auth_1.requireAuth, upload.single('file'), async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const { documentType, buildingId, residenceId, textContent, ...otherData } = req.body;
            // Validate permissions - only admin, manager, and resident can create documents
            if (!['admin', 'manager', 'resident'].includes(userRole)) {
                return res.status(403).json({ message: 'Insufficient permissions to create documents' });
            }
            // Check if this is a text-only document or file upload
            const isTextDocumentRecord = !req.file && textContent;
            const isFileDocumentRecord = !!req.file;
            if (!isTextDocumentRecord && !isFileDocumentRecord) {
                return res.status(400).json({ message: 'Either a file or text content is required' });
            }
            // For text documents, create unified document directly
            if (isTextDocumentRecord) {
                // Create text document without file storage
                const documentData = {
                    name: otherData.name || 'Untitled DocumentRecord',
                    description: otherData.description || textContent.substring(0, 200) + (textContent.length > 200 ? '...' : ''),
                    documentType: documentType || 'other',
                    filePath: `text-documents/${userId}/${(0, uuid_1.v4)()}.txt`, // Virtual path for text documents
                    isVisibleToTenants: otherData.isVisibleToTenants === 'true' || otherData.isVisibleToTenants === true,
                    residenceId: residenceId || undefined,
                    buildingId: buildingId || undefined,
                    uploadedById: userId,
                };
                // Permission checks
                if (buildingId && userRole === 'manager') {
                    const organizations = await storage_1.storage.getUserOrganizations(userId);
                    const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
                    const building = await storage_1.storage.getBuilding(buildingId);
                    if (!building || building.organizationId !== organizationId) {
                        return res.status(403).json({ message: 'Cannot assign document to building outside your organization' });
                    }
                }
                if (residenceId && userRole === 'resident') {
                    const residences = await storage_1.storage.getUserResidences(userId);
                    const residenceIds = residences.map((ur) => ur.residenceId);
                    if (!residenceIds.includes(residenceId)) {
                        return res.status(403).json({ message: 'Cannot assign document to residence you do not own' });
                    }
                }
                // Save text content to local file system for text documents
                let fileName;
                try {
                    const textFilePath = path_1.default.join(process.cwd(), 'uploads', 'text-documents', userId);
                    if (!fs_1.default.existsSync(textFilePath)) {
                        fs_1.default.mkdirSync(textFilePath, { recursive: true });
                    }
                    fileName = `${(0, uuid_1.v4)()}.txt`;
                    const fullPath = path_1.default.join(textFilePath, fileName);
                    fs_1.default.writeFileSync(fullPath, textContent, 'utf8');
                }
                catch (fsError) {
                    console.error('Error saving text document to filesystem:', fsError);
                    return res.status(500).json({ message: 'Failed to save text document' });
                }
                // Update file path to actual local path
                documentData.filePath = `text-documents/${userId}/${fileName}`;
                // Create document record in database
                const document = await storage_1.storage.createDocument(documentData);
                return res.status(201).json({
                    message: 'Text document created successfully',
                    document: {
                        ...document,
                        documentCategory: buildingId ? 'building' : 'resident',
                        entityType: buildingId ? 'building' : 'residence',
                        entityId: buildingId || residenceId,
                    },
                });
            }
            // Handle file uploads (existing logic)
            // Determine document type based on buildingId/residenceId if not explicitly provided
            let finalDocumentRecordType = documentType;
            if (!finalDocumentRecordType) {
                if (buildingId && !residenceId) {
                    finalDocumentRecordType = 'building';
                }
                else if (residenceId && !buildingId) {
                    finalDocumentRecordType = 'resident';
                }
                else if (buildingId && residenceId) {
                    return res.status(400).json({
                        message: 'Please specify documentType when providing both buildingId and residenceId',
                    });
                }
                else {
                    return res.status(400).json({
                        message: 'Must provide either buildingId (for building documents) or residenceId (for resident documents)',
                    });
                }
            }
            if (finalDocumentRecordType === 'building') {
                // Validate and create building document
                if (!buildingId) {
                    return res.status(400).json({ message: 'buildingId is required for building documents' });
                }
                const validatedData = createBuildingDocumentSchema.parse({
                    ...otherData,
                    buildingId,
                    uploadedById: userId,
                    filePath: req.file ? req.file.path : undefined,
                    // fileName is handled via name field
                });
                // Permission checks for building documents
                if (userRole === 'manager') {
                    const organizations = await storage_1.storage.getUserOrganizations(userId);
                    const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
                    const building = await storage_1.storage.getBuilding(buildingId);
                    if (!building || building.organizationId !== organizationId) {
                        return res
                            .status(403)
                            .json({ message: 'Cannot assign document to building outside your organization' });
                    }
                }
                if (userRole === 'resident') {
                    const residences = await storage_1.storage.getUserResidences(userId);
                    const hasResidenceInBuilding = await Promise.all(residences.map(async (ur) => {
                        const residence = await storage_1.storage.getResidence(ur.residenceId);
                        return residence && residence.buildingId === buildingId;
                    }));
                    if (!hasResidenceInBuilding.some(Boolean)) {
                        return res
                            .status(403)
                            .json({ message: 'Cannot assign document to building where you have no residence' });
                    }
                }
                // Create unified document instead of separate building document
                const unifiedDocument = {
                    name: validatedData.name || validatedData.title || 'Untitled',
                    description: validatedData.description,
                    documentType: validatedData.type,
                    filePath: validatedData.filePath || `temp-path-${Date.now()}`,
                    isVisibleToTenants: validatedData.isVisibleToTenants || false,
                    residenceId: undefined,
                    buildingId: validatedData.buildingId,
                    uploadedById: validatedData.uploadedById,
                };
                const document = await storage_1.storage.createDocument(unifiedDocument);
                // Clean up temporary file after successful upload
                if (req.file?.path) {
                    try {
                        fs_1.default.unlinkSync(req.file.path);
                    }
                    catch (cleanupError) {
                    }
                }
                res.status(201).json({
                    ...document,
                    documentCategory: 'building',
                    entityType: 'building',
                    entityId: document.buildingId,
                });
            }
            else if (finalDocumentRecordType === 'resident') {
                // Validate and create resident document
                if (!residenceId) {
                    return res
                        .status(400)
                        .json({ message: 'residenceId is required for resident documents' });
                }
                const validatedData = createResidentDocumentSchema.parse({
                    ...otherData,
                    residenceId,
                    uploadedById: userId,
                    filePath: req.file ? req.file.path : undefined,
                    // fileName is handled via name field
                });
                // Permission checks for resident documents
                if (userRole === 'manager') {
                    const organizations = await storage_1.storage.getUserOrganizations(userId);
                    const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
                    const residence = await storage_1.storage.getResidence(residenceId);
                    if (residence) {
                        const building = await storage_1.storage.getBuilding(residence.buildingId);
                        if (!building || building.organizationId !== organizationId) {
                            return res
                                .status(403)
                                .json({ message: 'Cannot assign document to residence outside your organization' });
                        }
                    }
                    else {
                        return res.status(404).json({ message: 'Residence not found' });
                    }
                }
                if (userRole === 'resident') {
                    const residences = await storage_1.storage.getUserResidences(userId);
                    const residenceIds = residences.map((ur) => ur.residenceId);
                    if (!residenceIds.includes(residenceId)) {
                        return res
                            .status(403)
                            .json({ message: 'Cannot assign document to residence you do not own' });
                    }
                }
                // Convert to unified document format
                const unifiedDocument = {
                    name: validatedData.name,
                    description: undefined,
                    documentType: validatedData.type,
                    filePath: validatedData.filePath || `temp-path-${Date.now()}`,
                    isVisibleToTenants: validatedData.isVisibleToTenants,
                    residenceId: validatedData.residenceId,
                    buildingId: undefined,
                    uploadedById: validatedData.uploadedById,
                };
                const document = await storage_1.storage.createDocument(unifiedDocument);
                console.log('📝 Created resident document:', document);
                console.log('📝 DocumentRecord ID:', document.id);
                const response = {
                    ...document,
                    documentCategory: 'resident',
                    entityType: 'residence',
                    entityId: document.residenceId,
                };
                console.log('📤 Sending response:', response);
                res.status(201).json(response);
            }
            else {
                return res.status(400).json({
                    message: 'Invalid documentType. Must be either \"building\" or \"resident\"',
                });
            }
        }
        catch (_error) {
            // Clean up temporary file on error
            if (req.file?.path) {
                try {
                    fs_1.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.warn('⚠️ Failed to cleanup temporary file:', cleanupError);
                }
            }
            console.error('❌ Error creating document:', _error);
            if (_error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    message: 'Invalid document data',
                    errors: _error.issues,
                });
            }
            res.status(500).json({ message: 'Failed to create document' });
        }
    });
    // Update a document
    app.put('/api/documents/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type; // Optional type hint
            // Get user's organization for permission checking
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const residences = await storage_1.storage.getUserResidences(userId);
            const buildings = await storage_1.storage.getBuildings();
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            const residenceIds = residences.map((ur) => ur.residenceId);
            const buildingIds = buildings.map((b) => b.id);
            // Use unified documents system for updates
            let updatedDocument = null;
            try {
                const validatedData = createDocumentSchema.partial().parse(req.body);
                updatedDocument = await storage_1.storage.updateDocument(documentId, validatedData);
                if (updatedDocument) {
                    // Add compatibility fields for frontend
                    updatedDocument.documentCategory = updatedDocument.buildingId ? 'building' : 'resident';
                    updatedDocument.entityType = updatedDocument.buildingId ? 'building' : 'residence';
                    updatedDocument.entityId = updatedDocument.buildingId || updatedDocument.residenceId;
                }
            }
            catch (e) {
                console.warn('⚠️ Error in document update:', e);
            }
            if (!updatedDocument) {
                return res.status(404).json({ message: 'DocumentRecord not found or access denied' });
            }
            res.json(updatedDocument);
        }
        catch (_error) {
            console.error('❌ Error updating document:', _error);
            if (_error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    message: 'Invalid document data',
                    errors: _error.issues,
                });
            }
            res.status(500).json({ message: 'Failed to update document' });
        }
    });
    // Delete a document
    app.delete('/api/documents/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const documentType = req.query.type; // Optional type hint
            // Get user's organization for permission checking
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            // Use unified documents system for deletion
            let deleted = false;
            try {
                deleted = await storage_1.storage.deleteDocument(documentId);
            }
            catch (e) {
                console.warn('⚠️ Error deleting document:', e);
            }
            if (!deleted) {
                return res.status(404).json({ message: 'DocumentRecord not found or access denied' });
            }
            res.status(204).send();
        }
        catch (error) {
            console.error('❌ Error in document deletion:', error);
            res.status(500).json({ message: 'Failed to delete document' });
        }
    });
    // Upload endpoint that matches frontend expectation: /api/documents/:id/upload
    app.post('/api/documents/:id/upload', auth_1.requireAuth, upload.single('file'), async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id; // The :id in the URL is the document ID (from frontend)
            const { documentType = 'resident', residenceId, ...otherData } = req.body;
            console.log('📤 Upload request received:', {
                documentId,
                userId,
                userRole,
                hasFile: !!req.file,
                fileInfo: req.file
                    ? {
                        fieldname: req.file.fieldname,
                        originalname: req.file.originalname,
                        encoding: req.file.encoding,
                        mimetype: req.file.mimetype,
                        size: req.file.size,
                        path: req.file.path,
                    }
                    : null,
                bodyKeys: Object.keys(req.body),
                contentType: req.headers['content-type'],
            });
            // Validate permissions - only admin, manager, and resident can create documents
            if (!['admin', 'manager', 'resident'].includes(userRole)) {
                return res.status(403).json({ message: 'Insufficient permissions to create documents' });
            }
            if (!req.file) {
                console.error('❌ No file received in upload request');
                return res.status(400).json({ message: 'File is required for upload' });
            }
            // Get the existing document to determine where to store the file
            const documents = await storage_1.storage.getDocuments({
                userId,
                userRole,
            });
            const existingDocument = documents.find((doc) => doc.id === documentId);
            if (!existingDocument) {
                return res.status(404).json({ message: 'DocumentRecord not found' });
            }
            // File validation passed - file exists and is ready for upload
            // Determine organization ID based on document context
            let organizationId;
            if (existingDocument.buildingId) {
                const building = await storage_1.storage.getBuilding(existingDocument.buildingId);
                if (!building) {
                    return res.status(404).json({ message: 'Building not found' });
                }
                organizationId = building.organizationId;
            }
            else if (existingDocument.residenceId) {
                const residence = await storage_1.storage.getResidence(existingDocument.residenceId);
                if (!residence) {
                    return res.status(404).json({ message: 'Residence not found' });
                }
                const building = await storage_1.storage.getBuilding(residence.buildingId);
                if (!building) {
                    return res.status(404).json({ message: 'Building not found' });
                }
                organizationId = building.organizationId;
            }
            else {
                return res
                    .status(400)
                    .json({ message: 'DocumentRecord must be associated with a building or residence' });
            }
            // Note: File upload to external storage removed
            // Update document with file information
            const updatedDocument = await storage_1.storage.updateDocument(documentId, {
                filePath: `prod_org_${organizationId}/${req.file.originalname}`,
                name: req.file.originalname,
                // Remove mimeType as it's not in schema
            });
            // Clean up temporary file
            if (req.file && req.file.path && fs_1.default.existsSync(req.file.path)) {
                fs_1.default.unlinkSync(req.file.path);
            }
            res.status(200).json({
                document: updatedDocument,
                message: 'File uploaded successfully',
            });
        }
        catch (error) {
            const errorTimestamp = new Date().toISOString();
            console.error(`[${errorTimestamp}] Error type:`, error.constructor.name);
            console.error(`[${errorTimestamp}] Error message:`, error.message);
            console.error(`[${errorTimestamp}] Error stack:`, error.stack);
            // Clean up temporary file on error
            if (req.file && req.file.path && fs_1.default.existsSync(req.file.path)) {
                try {
                    fs_1.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.error(`[${errorTimestamp}] Error cleaning up file:`, cleanupError);
                }
            }
            if (error.name === 'ZodError') {
                return res.status(400).json({
                    message: 'Validation error',
                    errors: error.errors,
                });
            }
            res.status(500).json({ message: 'Failed to upload document' });
        }
    });
    // POST /api/documents/upload - Upload file to GCS and create unified document record
    app.post('/api/documents/upload', auth_1.requireAuth, upload.single('file'), async (req, res) => {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] 📋 POST /api/documents/upload - Starting upload`, {
            hasFile: !!req.file,
            fileName: req.file?.originalname,
            fileSize: req.file?.size,
            body: req.body,
            userId: req.user?.id
        });
        try {
            // Check if file was uploaded
            if (!req.file) {
                return res.status(400).json({ message: 'No file uploaded' });
            }
            // Parse form data
            const formData = {
                name: req.body.name,
                description: req.body.description || '',
                documentType: req.body.documentType || req.body.type, // Handle both field names
                isVisibleToTenants: req.body.isVisibleToTenants === 'true',
                residenceId: req.body.residenceId || undefined,
                buildingId: req.body.buildingId || undefined,
            };
            // Production debugging: Log form data before validation
            if (process.env.NODE_ENV === 'production') {
                console.log('[PROD DEBUG] Form data before validation:', formData);
            }
            // Validate form data
            const validatedData = uploadDocumentRecordSchema.parse(formData);
            // Production debugging: Log after validation
            if (process.env.NODE_ENV === 'production') {
                console.log('[PROD DEBUG] Form data validation passed:', validatedData);
            }
            // Get user info from auth middleware
            const userId = req.user?.id;
            if (!userId) {
                return res.status(401).json({ message: 'User not authenticated' });
            }
            // GCS DISABLED: Skip bucket configuration (using local storage only)
            console.log('📁 GCS disabled - skipping bucket configuration check');
            // Generate unique GCS path
            const fileExtension = path_1.default.extname(req.file.originalname);
            const baseFileName = path_1.default.basename(req.file.originalname, fileExtension);
            const uniqueFileName = `${(0, uuid_1.v4)()}-${baseFileName}${fileExtension}`;
            let filePath;
            if (validatedData.residenceId) {
                filePath = `residences/${validatedData.residenceId}/${uniqueFileName}`;
            }
            else if (validatedData.buildingId) {
                filePath = `buildings/${validatedData.buildingId}/${uniqueFileName}`;
            }
            else {
                filePath = `general/${uniqueFileName}`;
            }
            // DISABLED GCS: Force local storage for all environments
            console.log('📁 GCS disabled - using local storage for all document operations');
            // Always use local storage (GCS disabled)
            try {
                // Use local storage with robust error handling
                const localStoragePath = path_1.default.join(process.cwd(), 'uploads');
                // Ensure uploads directory exists
                try {
                    if (!fs_1.default.existsSync(localStoragePath)) {
                        fs_1.default.mkdirSync(localStoragePath, { recursive: true });
                        console.log(`📁 Created uploads directory: ${localStoragePath}`);
                    }
                }
                catch (dirError) {
                    console.error('Failed to create uploads directory:', dirError);
                    throw new Error('Cannot create uploads directory - check permissions');
                }
                // Create directory structure for file
                const localFilePath = path_1.default.join(localStoragePath, filePath);
                const localFileDir = path_1.default.dirname(localFilePath);
                try {
                    if (!fs_1.default.existsSync(localFileDir)) {
                        fs_1.default.mkdirSync(localFileDir, { recursive: true });
                        console.log(`📁 Created subdirectory: ${localFileDir}`);
                    }
                }
                catch (subdirError) {
                    console.error('Failed to create file subdirectory:', subdirError);
                    throw new Error('Cannot create file directory - check permissions');
                }
                // Copy uploaded file to local storage
                try {
                    fs_1.default.copyFileSync(req.file.path, localFilePath);
                    console.log(`📁 File saved successfully at ${localFilePath}`);
                }
                catch (copyError) {
                    console.error('Failed to copy file:', copyError);
                    throw new Error('Cannot save file - check disk space and permissions');
                }
            }
            catch (localError) {
                console.error('Local storage error:', localError);
                throw new Error('Failed to save file locally');
            }
            // Create document record in database
            const documentData = {
                name: validatedData.name,
                description: validatedData.description,
                documentType: validatedData.documentType,
                filePath: filePath,
                isVisibleToTenants: validatedData.isVisibleToTenants,
                residenceId: validatedData.residenceId,
                buildingId: validatedData.buildingId,
                uploadedById: userId,
            };
            // CRITICAL DEBUG POINT: Database creation
            console.log(`[${timestamp}] 🎯 CRITICAL: About to create document in database:`, {
                name: documentData.name,
                type: documentData.documentType,
                buildingId: documentData.buildingId,
                residenceId: documentData.residenceId,
                uploadedById: documentData.uploadedById
            });
            // Create document record in database  
            const newDocument = await storage_1.storage.createDocument(documentData);
            // CRITICAL: Log successful database creation
            console.log(`[${timestamp}] ✅ CRITICAL: DocumentRecord created successfully:`, {
                id: newDocument?.id,
                name: newDocument?.name,
                filePath: newDocument?.filePath
            });
            // Clean up temporary file
            if (fs_1.default.existsSync(req.file.path)) {
                fs_1.default.unlinkSync(req.file.path);
            }
            // Return success response
            res.status(201).json({
                message: 'DocumentRecord uploaded successfully',
                document: newDocument,
            });
        }
        catch (error) {
            const errorEntry = logError('POST /api/documents/upload', error, req.user);
            // Clean up temporary file on error
            if (req.file && req.file.path && fs_1.default.existsSync(req.file.path)) {
                try {
                    fs_1.default.unlinkSync(req.file.path);
                }
                catch (cleanupError) {
                    console.error('Error cleaning up temporary file:', cleanupError);
                }
            }
            // Handle validation errors
            if (error.name === 'ZodError') {
                return res.status(400).json({
                    message: 'Validation error',
                    errors: error.errors,
                    error_id: errorEntry.timestamp
                });
            }
            // Handle GCS errors
            if (error.message && error.message.includes('Google Cloud Storage')) {
                return res.status(500).json({
                    message: 'File upload failed',
                    error: 'Storage service error',
                    error_id: errorEntry.timestamp
                });
            }
            // Handle unique constraint violations (path conflicts)
            if (error?.message?.includes('unique constraint') || error?.code === '23505') {
                return res.status(409).json({
                    message: 'DocumentRecord path conflict - please try uploading again',
                    error: 'Path already exists',
                    error_id: errorEntry.timestamp
                });
            }
            // Handle database errors
            if (error.message && error.message.includes('database')) {
                return res.status(500).json({
                    message: 'Failed to save document record',
                    error: 'Database error',
                    error_id: errorEntry.timestamp
                });
            }
            // Generic error response
            res.status(500).json({
                message: 'Internal server error',
                error: 'DocumentRecord upload failed',
                error_id: errorEntry.timestamp,
                debug_info: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    });
    // Serve document files
    // Serve document files with full access control
    app.get('/api/documents/:id/file', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const userRole = user.role;
            const userId = user.id;
            const documentId = req.params.id;
            const isDownload = req.query.download === 'true';
            // Get user's organization and residences for permission checking
            const organizations = await storage_1.storage.getUserOrganizations(userId);
            const residences = await storage_1.storage.getUserResidences(userId);
            const buildings = await storage_1.storage.getBuildings();
            const organizationId = organizations.length > 0 ? organizations[0].organizationId : undefined;
            const residenceIds = residences
                .map((ur) => ur.residenceId || ur.userResidence?.residenceId || ur.residence?.id)
                .filter(Boolean);
            const buildingIds = buildings.map((b) => b.id);
            // Find the document
            const filters = {
                userId,
                userRole,
            };
            const documents = await storage_1.storage.getDocuments(filters);
            const document = documents.find((doc) => doc.id === documentId);
            if (!document) {
                return res.status(404).json({ message: 'DocumentRecord not found' });
            }
            // Check permissions with tenant visibility rules
            let hasAccess = false;
            if (userRole === 'admin') {
                hasAccess = true;
            }
            else if (userRole === 'manager' && organizationId) {
                if (document.buildingId && buildingIds.includes(document.buildingId)) {
                    hasAccess = true;
                }
                if (document.residenceId && residenceIds.includes(document.residenceId)) {
                    hasAccess = true;
                }
            }
            else if (userRole === 'resident') {
                // Residents can access documents in their residence
                if (document.residenceId && residenceIds.includes(document.residenceId)) {
                    hasAccess = true;
                }
                // Residents can access building documents related to their residences
                if (document.buildingId) {
                    const userBuildingIds = residences
                        .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                        .filter(Boolean);
                    if (userBuildingIds.includes(document.buildingId)) {
                        hasAccess = true;
                    }
                }
            }
            else if (userRole === 'tenant') {
                // Tenants can only access documents marked as visible to tenants
                if (!document.isVisibleToTenants) {
                    hasAccess = false;
                }
                else {
                    // Tenants can access visible documents in their residence
                    if (document.residenceId && residenceIds.includes(document.residenceId)) {
                        hasAccess = true;
                    }
                    // Tenants can access visible building documents related to their residences
                    if (document.buildingId) {
                        const userBuildingIds = residences
                            .map((ur) => ur.residence?.buildingId || ur.userResidence?.residence?.buildingId)
                            .filter(Boolean);
                        if (userBuildingIds.includes(document.buildingId)) {
                            hasAccess = true;
                        }
                    }
                }
            }
            if (!hasAccess) {
                return res.status(403).json({ message: 'Access denied' });
            }
            // Serve from local storage
            if (document.filePath) {
                console.log('📁 GCS disabled - serving from local storage');
                try {
                    // Always serve from local storage (GCS disabled)
                    let filePathToServe = document.filePath;
                    // Check if it's an absolute path
                    if (document.filePath.startsWith('/')) {
                        filePathToServe = document.filePath;
                    }
                    // Check if it's a relative file path
                    else if (document.filePath.includes('residences/') ||
                        document.filePath.includes('buildings/') ||
                        document.filePath.includes('text-documents/')) {
                        // For development, try to find the file in common upload directories
                        const possiblePaths = [
                            path_1.default.join(process.cwd(), 'uploads', document.filePath), // Main fallback location
                            `/tmp/uploads/${document.filePath}`,
                            `/uploads/${document.filePath}`,
                            `./uploads/${document.filePath}`,
                            path_1.default.join('/tmp', document.filePath),
                        ];
                        // Try to find the file in any of these locations
                        for (const possiblePath of possiblePaths) {
                            if (fs_1.default.existsSync(possiblePath)) {
                                filePathToServe = possiblePath;
                                console.log(`📂 Found file at: ${filePathToServe}`);
                                break;
                            }
                        }
                    }
                    // Check if it's a temp file path
                    else if (document.filePath.includes('tmp')) {
                        filePathToServe = document.filePath;
                    }
                    // Try to serve the file
                    if (fs_1.default.existsSync(filePathToServe)) {
                        // Get the original filename with extension, or construct one from the document name
                        let fileName = document.fileName || document.name || path_1.default.basename(document.filePath);
                        // If the fileName doesn't have an extension, add it from the original file path
                        if (!path_1.default.extname(fileName) && document.filePath) {
                            const originalExt = path_1.default.extname(document.filePath);
                            if (originalExt) {
                                fileName += originalExt;
                            }
                        }
                        if (isDownload) {
                            res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
                        }
                        else {
                            res.setHeader('Content-Disposition', `inline; filename="${fileName}"`);
                        }
                        // Set appropriate content type based on file extension
                        const ext = path_1.default.extname(fileName).toLowerCase();
                        if (ext === '.pdf') {
                            res.setHeader('Content-Type', 'application/pdf');
                        }
                        else if (ext === '.jpg' || ext === '.jpeg') {
                            res.setHeader('Content-Type', 'image/jpeg');
                        }
                        else if (ext === '.png') {
                            res.setHeader('Content-Type', 'image/png');
                        }
                        else if (ext === '.gif') {
                            res.setHeader('Content-Type', 'image/gif');
                        }
                        else if (ext === '.doc' || ext === '.docx') {
                            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
                        }
                        else if (ext === '.txt') {
                            res.setHeader('Content-Type', 'text/plain; charset=utf-8');
                        }
                        else {
                            res.setHeader('Content-Type', 'application/octet-stream');
                        }
                        // Production cache busting for documents
                        if (process.env.NODE_ENV === 'production') {
                            const fileStats = fs_1.default.statSync(filePathToServe);
                            res.set({
                                'Cache-Control': 'no-cache, no-store, must-revalidate',
                                'Pragma': 'no-cache',
                                'Expires': '0',
                                'ETag': `"${document.id}-${fileStats.mtime.getTime()}"`,
                                'Last-Modified': fileStats.mtime.toUTCString(),
                            });
                        }
                        console.log(`📂 Serving file: ${filePathToServe} as ${fileName}`);
                        return res.sendFile(path_1.default.resolve(filePathToServe));
                    }
                    // If file not found locally, log for debugging
                    console.log(`❌ File not found at filePath: ${document.filePath}`);
                    console.log(`❌ Tried filePath: ${filePathToServe}`);
                    return res.status(404).json({ message: 'File not found on server' });
                }
                catch (fileError) {
                    console.error('❌ Error serving file:', fileError);
                    return res.status(500).json({ message: 'Failed to serve file' });
                }
            }
            return res.status(404).json({ message: 'No file associated with this document' });
        }
        catch (error) {
            console.error('❌ Error serving document file:', error);
            res.status(500).json({ message: 'Failed to serve document file' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUsQ0FBQztZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLENBQUMsQ0FBQztRQUNyRSxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc2VydmVyL2FwaS9kb2N1bWVudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFeHByZXNzIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyByZXF1aXJlQXV0aCwgcmVxdWlyZVJvbGUgfSBmcm9tICcuLi9hdXRoJztcbmltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICcuLi9zdG9yYWdlJztcbmltcG9ydCB7XG4gIGluc2VydERvY3VtZW50U2NoZW1hLFxuICB0eXBlIEluc2VydERvY3VtZW50LFxuICB0eXBlIERvY3VtZW50LFxufSBmcm9tICcuLi8uLi9zaGFyZWQvc2NoZW1hcy9kb2N1bWVudHMnO1xuXG4vLyBVc2UgdGhlIGdlbmVyYXRlZCBEb2N1bWVudCB0eXBlIGZyb20gc2NoZW1hIHRvIGF2b2lkIERPTSBEb2N1bWVudCBjb2xsaXNpb25cbnR5cGUgRG9jdW1lbnRSZWNvcmQgPSBEb2N1bWVudDtcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IG11bHRlciBmcm9tICdtdWx0ZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBzcWwgfSBmcm9tICdkcml6emxlLW9ybSc7XG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uL2RiJztcblxuLy8gQ29uZmlndXJlIG11bHRlciBmb3IgZmlsZSB1cGxvYWRzXG5jb25zdCB1cGxvYWQgPSBtdWx0ZXIoe1xuICBkZXN0OiAnL3RtcC91cGxvYWRzLycsXG4gIGxpbWl0czoge1xuICAgIGZpbGVTaXplOiA1MCAqIDEwMjQgKiAxMDI0LCAvLyA1ME1CIGxpbWl0XG4gIH0sXG4gIGZpbGVGaWx0ZXI6IChyZXEsIGZpbGUsIGNiKSA9PiB7XG4gICAgLy8gQWxsb3cgbW9zdCBjb21tb24gZG9jdW1lbnQgYW5kIGltYWdlIHR5cGVzXG4gICAgY29uc3QgYWxsb3dlZFR5cGVzID0gL1xcLihwZGZ8ZG9jfGRvY3h8eGxzfHhsc3h8cHB0fHBwdHh8dHh0fGpwZ3xqcGVnfHBuZ3xnaWZ8Ym1wfHRpZmYpJC9pO1xuICAgIGlmIChhbGxvd2VkVHlwZXMudGVzdChmaWxlLm9yaWdpbmFsbmFtZSkpIHtcbiAgICAgIGNiKG51bGwsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYihuZXcgRXJyb3IoJ0ludmFsaWQgZmlsZSB0eXBlLiBPbmx5IGRvY3VtZW50cyBhbmQgaW1hZ2VzIGFyZSBhbGxvd2VkLicpKTtcbiAgICB9XG4gIH0sXG59KTtcblxuLy8gRG9jdW1lbnRSZWNvcmQgY2F0ZWdvcmllcyBmb3IgdmFsaWRhdGlvbiAtIHN5bmNocm9uaXplZCB3aXRoIGZyb250ZW5kXG5jb25zdCBET0NVTUVOVF9DQVRFR09SSUVTID0gW1xuICAnYnlsYXcnLFxuICAnZmluYW5jaWFsJyxcbiAgJ21haW50ZW5hbmNlJyxcbiAgJ2xlZ2FsJyxcbiAgJ21lZXRpbmdfbWludXRlcycsXG4gICdpbnN1cmFuY2UnLFxuICAnY29udHJhY3RzJyxcbiAgJ3Blcm1pdHMnLFxuICAnaW5zcGVjdGlvbicsXG4gICdsZWFzZScsXG4gICdjb3JyZXNwb25kZW5jZScsXG4gICd1dGlsaXRpZXMnLFxuICAnb3RoZXInLFxuXSBhcyBjb25zdDtcblxuLy8gRW5oYW5jZWQgc2NoZW1hcyBmb3IgZGlmZmVyZW50IGRvY3VtZW50IHR5cGVzXG5jb25zdCBjcmVhdGVEb2N1bWVudFNjaGVtYSA9IGluc2VydERvY3VtZW50U2NoZW1hLmV4dGVuZCh7XG4gIGNhdGVnb3J5OiB6LmVudW0oRE9DVU1FTlRfQ0FURUdPUklFUyksXG4gIHRpdGxlOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjU1KSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgaXNWaXNpYmxlVG9UZW5hbnRzOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbn0pO1xuXG5jb25zdCBjcmVhdGVCdWlsZGluZ0RvY3VtZW50U2NoZW1hID0gaW5zZXJ0RG9jdW1lbnRTY2hlbWEuZXh0ZW5kKHtcbiAgdHlwZTogei5lbnVtKERPQ1VNRU5UX0NBVEVHT1JJRVMpLFxuICB0aXRsZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1NSkub3B0aW9uYWwoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBjcmVhdGVSZXNpZGVudERvY3VtZW50U2NoZW1hID0gaW5zZXJ0RG9jdW1lbnRTY2hlbWEuZXh0ZW5kKHtcbiAgdHlwZTogei5lbnVtKERPQ1VNRU5UX0NBVEVHT1JJRVMpLFxuICB0aXRsZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1NSkub3B0aW9uYWwoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG4vLyBTY2hlbWEgZm9yIHVuaWZpZWQgZG9jdW1lbnQgdXBsb2FkXG5jb25zdCB1cGxvYWREb2N1bWVudFJlY29yZFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgbmFtZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1NSksXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGRvY3VtZW50VHlwZTogei5lbnVtKERPQ1VNRU5UX0NBVEVHT1JJRVMpLFxuICBpc1Zpc2libGVUb1RlbmFudHM6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICByZXNpZGVuY2VJZDogei5zdHJpbmcoKS51dWlkKCkub3B0aW9uYWwoKSxcbiAgYnVpbGRpbmdJZDogei5zdHJpbmcoKS51dWlkKCkub3B0aW9uYWwoKSxcbn0pO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gYXBwXG4gKi9cbi8qKlxuICogUmVnaXN0ZXJEb2N1bWVudFJlY29yZFJvdXRlcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSBhcHBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRG9jdW1lbnRSb3V0ZXMoYXBwOiBFeHByZXNzKTogdm9pZCB7XG4gIGNvbnNvbGUubG9nKGBbJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XSDwn5SnIFJlZ2lzdGVyaW5nIGRvY3VtZW50IHJvdXRlcy4uLmApO1xuICBcbiAgLy8gRXJyb3IgdHJhY2tpbmcgZm9yIHByb2R1Y3Rpb24gZGVidWdnaW5nXG4gIGNvbnN0IGVycm9yTG9nOiBBcnJheTx7dGltZXN0YW1wOiBzdHJpbmcsIGVycm9yOiBhbnksIGVuZHBvaW50OiBzdHJpbmcsIHVzZXI/OiBhbnl9PiA9IFtdO1xuXG4gIC8vIERhdGFiYXNlIGNvbm5lY3Rpb24gdGVzdGluZyBmdW5jdGlvbnNcbiAgY29uc3QgdGVzdERhdGFiYXNlQ29ubmVjdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgU0VMRUNUIDEgYXMgdGVzdGApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgcmVzdWx0OiByZXN1bHQucm93c1swXSxcbiAgICAgICAgdXJsX3RydW5jYXRlZDogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMPy5zdWJzdHJpbmcoMCwgNTApICsgJy4uLidcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB1cmxfdHJ1bmNhdGVkOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkw/LnN1YnN0cmluZygwLCA1MCkgKyAnLi4uJ1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdGVzdFNhbXBsZVF1ZXJ5ID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBUZXN0IHRoZSBleGFjdCBxdWVyeSB0aGF0J3MgZmFpbGluZ1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBDT1VOVCgqKSBhcyBkb2N1bWVudF9jb3VudCBcbiAgICAgICAgRlJPTSBkb2N1bWVudHMgXG4gICAgICAgIExJTUlUIDFcbiAgICAgIGApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZG9jdW1lbnRfY291bnQ6IHJlc3VsdC5yb3dzWzBdPy5kb2N1bWVudF9jb3VudCB8fCAwXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3RhY2s6IGVycm9yLnN0YWNrPy5zdWJzdHJpbmcoMCwgMjAwKSArICcuLi4nXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBjaGVja0VudW1WYWx1ZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIENoZWNrIGN1cnJlbnQgZW51bSB2YWx1ZXMgaW4gcHJvZHVjdGlvblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBlbnVtbGFiZWwgXG4gICAgICAgIEZST00gcGdfZW51bSBcbiAgICAgICAgV0hFUkUgZW51bXR5cGlkID0gKFxuICAgICAgICAgIFNFTEVDVCBvaWQgXG4gICAgICAgICAgRlJPTSBwZ190eXBlIFxuICAgICAgICAgIFdIRVJFIHR5cG5hbWUgPSAndXNlcl9yb2xlJ1xuICAgICAgICApXG4gICAgICAgIE9SREVSIEJZIGVudW1zb3J0b3JkZXJcbiAgICAgIGApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgcHJvZHVjdGlvbl9lbnVtX3ZhbHVlczogcmVzdWx0LnJvd3MubWFwKHJvdyA9PiByb3cuZW51bWxhYmVsKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrVXNlck9yZ2FuaXphdGlvbkxpbmtzID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDaGVjayB1c2VyLW9yZ2FuaXphdGlvbiByZWxhdGlvbnNoaXBzXG4gICAgICBjb25zdCB1c2VyQ291bnQgPSBhd2FpdCBkYi5leGVjdXRlKHNxbGBTRUxFQ1QgQ09VTlQoKikgYXMgdG90YWwgRlJPTSB1c2VycyBXSEVSRSBpc19hY3RpdmUgPSB0cnVlYCk7XG4gICAgICBjb25zdCBvcmdDb3VudCA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFNFTEVDVCBDT1VOVCgqKSBhcyB0b3RhbCBGUk9NIG9yZ2FuaXphdGlvbnMgV0hFUkUgaXNfYWN0aXZlID0gdHJ1ZWApO1xuICAgICAgY29uc3QgbGlua0NvdW50ID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgU0VMRUNUIENPVU5UKCopIGFzIHRvdGFsIEZST00gdXNlcl9vcmdhbml6YXRpb25zIFdIRVJFIGlzX2FjdGl2ZSA9IHRydWVgKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgdXNlcnMgd2l0aG91dCBvcmdhbml6YXRpb24gbGlua3NcbiAgICAgIGNvbnN0IG9ycGhhblVzZXJzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCB1LmlkLCB1LmVtYWlsLCB1LnJvbGUgXG4gICAgICAgIEZST00gdXNlcnMgdSBcbiAgICAgICAgTEVGVCBKT0lOIHVzZXJfb3JnYW5pemF0aW9ucyB1byBPTiB1LmlkID0gdW8udXNlcl9pZCBBTkQgdW8uaXNfYWN0aXZlID0gdHJ1ZVxuICAgICAgICBXSEVSRSB1LmlzX2FjdGl2ZSA9IHRydWUgQU5EIHVvLnVzZXJfaWQgSVMgTlVMTFxuICAgICAgICBMSU1JVCAxMFxuICAgICAgYCk7XG5cbiAgICAgIC8vIENoZWNrIGN1cnJlbnQgdGVzdCB1c2VyIHNwZWNpZmljYWxseSAoZnJvbSBlcnJvciBsb2dzKVxuICAgICAgY29uc3QgdGVzdFVzZXIgPSBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgU0VMRUNUIHUuZW1haWwsIHUucm9sZSwgdW8ub3JnYW5pemF0aW9uX2lkLCBvLm5hbWUgYXMgb3JnX25hbWVcbiAgICAgICAgRlJPTSB1c2VycyB1XG4gICAgICAgIExFRlQgSk9JTiB1c2VyX29yZ2FuaXphdGlvbnMgdW8gT04gdS5pZCA9IHVvLnVzZXJfaWQgQU5EIHVvLmlzX2FjdGl2ZSA9IHRydWUgIFxuICAgICAgICBMRUZUIEpPSU4gb3JnYW5pemF0aW9ucyBvIE9OIHVvLm9yZ2FuaXphdGlvbl9pZCA9IG8uaWRcbiAgICAgICAgV0hFUkUgdS5pZCA9ICcyMjJmNWEwZC02YmM2LTRmMjgtOWY0ZC0zMmMxMzNlZWQzMzMnXG4gICAgICBgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICB0b3RhbF91c2VyczogdXNlckNvdW50LnJvd3NbMF0/LnRvdGFsIHx8IDAsXG4gICAgICAgICAgdG90YWxfb3JnYW5pemF0aW9uczogb3JnQ291bnQucm93c1swXT8udG90YWwgfHwgMCxcbiAgICAgICAgICB0b3RhbF9saW5rczogbGlua0NvdW50LnJvd3NbMF0/LnRvdGFsIHx8IDAsXG4gICAgICAgICAgb3JwaGFuX3VzZXJfY291bnQ6IG9ycGhhblVzZXJzLnJvd3MubGVuZ3RoXG4gICAgICAgIH0sXG4gICAgICAgIG9ycGhhbl91c2Vyczogb3JwaGFuVXNlcnMucm93cyxcbiAgICAgICAgdGVzdF91c2VyX3N0YXR1czogdGVzdFVzZXIucm93c1swXSB8fCBudWxsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIFxuICAvLyBFbnVtIGNsZWFudXAgZW5kcG9pbnQgZm9yIHNhZmUgc2NoZW1hIG1pZ3JhdGlvbiAgXG4gIGFwcC5wb3N0KCcvYXBpL2RvY3VtZW50cy9jbGVhbnVwLWVudW0nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gRmlyc3QsIHZlcmlmeSBubyB1c2VycyBoYXZlIHRoZSAnb3duZXInIHJvbGVcbiAgICAgIGNvbnN0IHVzZXJDaGVjayA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgQ09VTlQoKikgYXMgb3duZXJfY291bnQgXG4gICAgICAgIEZST00gdXNlcnMgXG4gICAgICAgIFdIRVJFIHJvbGUgPSAnb3duZXInXG4gICAgICBgKTtcbiAgICAgIFxuICAgICAgY29uc3Qgb3duZXJDb3VudCA9IE51bWJlcih1c2VyQ2hlY2sucm93c1swXT8ub3duZXJfY291bnQpIHx8IDA7XG4gICAgICBcbiAgICAgIGlmIChvd25lckNvdW50ID4gMCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIGVycm9yOiAnQ2Fubm90IHJlbW92ZSBvd25lciByb2xlIC0gdXNlcnMgc3RpbGwgYXNzaWduZWQgdG8gaXQnLFxuICAgICAgICAgIG93bmVyX2NvdW50OiBvd25lckNvdW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBTYWZlIHRvIHJlbW92ZSAtIG5vIHVzZXJzIGhhdmUgJ293bmVyJyByb2xlXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgQUxURVIgVFlQRSB1c2VyX3JvbGUgRFJPUCBWQUxVRSBJRiBFWElTVFMgJ293bmVyJ1xuICAgICAgYCk7XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSByZW1vdmVkIHVudXNlZCBvd25lciByb2xlJyxcbiAgICAgICAgc2FmZV90b19wdXNoX3NjaGVtYTogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBkdXJpbmcgZW51bSBjbGVhbnVwOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdFbnVtIGNsZWFudXAgZmFpbGVkJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3VnZ2VzdGlvbjogJ1RyeSBydW5uaW5nIG5wbSBydW4gZGI6cHVzaCAtLWZvcmNlIGluc3RlYWQnXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEZpeCB1c2VyLW9yZ2FuaXphdGlvbiByZWxhdGlvbnNoaXBzXG4gIGFwcC5wb3N0KCcvYXBpL2RvY3VtZW50cy9maXgtdXNlci1saW5rcycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBTdGVwIDE6IEZpbmQgdXNlcnMgd2l0aG91dCBvcmdhbml6YXRpb24gbGlua3NcbiAgICAgIGNvbnN0IG9ycGhhblVzZXJzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCB1LmlkLCB1LmVtYWlsLCB1LnJvbGUgXG4gICAgICAgIEZST00gdXNlcnMgdSBcbiAgICAgICAgTEVGVCBKT0lOIHVzZXJfb3JnYW5pemF0aW9ucyB1byBPTiB1LmlkID0gdW8udXNlcl9pZCBBTkQgdW8uaXNfYWN0aXZlID0gdHJ1ZVxuICAgICAgICBXSEVSRSB1LmlzX2FjdGl2ZSA9IHRydWUgQU5EIHVvLnVzZXJfaWQgSVMgTlVMTFxuICAgICAgYCk7XG5cbiAgICAgIGlmIChvcnBoYW5Vc2Vycy5yb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdBbGwgdXNlcnMgYWxyZWFkeSBoYXZlIG9yZ2FuaXphdGlvbiBsaW5rcycsXG4gICAgICAgICAgYWN0aW9uX3Rha2VuOiAnbm9uZScsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgMjogR2V0IHRoZSBmaXJzdCBhdmFpbGFibGUgb3JnYW5pemF0aW9uIChvciBjcmVhdGUgZGVmYXVsdCBvbmUpXG4gICAgICBsZXQgZGVmYXVsdE9yZyA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgaWQsIG5hbWUgRlJPTSBvcmdhbml6YXRpb25zIFdIRVJFIGlzX2FjdGl2ZSA9IHRydWUgTElNSVQgMVxuICAgICAgYCk7XG5cbiAgICAgIGxldCBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xuICAgICAgbGV0IG9yZ2FuaXphdGlvbk5hbWU6IHN0cmluZztcblxuICAgICAgaWYgKGRlZmF1bHRPcmcucm93cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZGVmYXVsdCBvcmdhbml6YXRpb24gaWYgbm9uZSBleGlzdHNcbiAgICAgICAgb3JnYW5pemF0aW9uSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgICAgICBvcmdhbml6YXRpb25OYW1lID0gJ0RlZmF1bHQgT3JnYW5pemF0aW9uJztcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgSU5TRVJUIElOVE8gb3JnYW5pemF0aW9ucyAoaWQsIG5hbWUsIHR5cGUsIGFkZHJlc3MsIHBob25lLCBlbWFpbCwgaXNfYWN0aXZlLCBjcmVhdGVkX2F0LCB1cGRhdGVkX2F0KVxuICAgICAgICAgIFZBTFVFUyAoJHtvcmdhbml6YXRpb25JZH0sICR7b3JnYW5pemF0aW9uTmFtZX0sICdjb25kb21pbml1bScsICcxMjMgTWFpbiBTdCcsICc1MTQtNTU1LTAxMDAnLCAnYWRtaW5Aa292ZW8uY2EnLCB0cnVlLCBOT1coKSwgTk9XKCkpXG4gICAgICAgIGApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3JnYW5pemF0aW9uSWQgPSBkZWZhdWx0T3JnLnJvd3NbMF0uaWQgYXMgc3RyaW5nO1xuICAgICAgICBvcmdhbml6YXRpb25OYW1lID0gZGVmYXVsdE9yZy5yb3dzWzBdLm5hbWUgYXMgc3RyaW5nO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDM6IExpbmsgYWxsIG9ycGhhbiB1c2VycyB0byB0aGUgZGVmYXVsdCBvcmdhbml6YXRpb25cbiAgICAgIGNvbnN0IGxpbmtQcm9taXNlcyA9IG9ycGhhblVzZXJzLnJvd3MubWFwKHVzZXIgPT4ge1xuICAgICAgICBjb25zdCBsaW5rSWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgICAgICByZXR1cm4gZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgSU5TRVJUIElOVE8gdXNlcl9vcmdhbml6YXRpb25zIChpZCwgdXNlcl9pZCwgb3JnYW5pemF0aW9uX2lkLCByb2xlLCBpc19hY3RpdmUsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQpXG4gICAgICAgICAgVkFMVUVTICgke2xpbmtJZH0sICR7dXNlci5pZH0sICR7b3JnYW5pemF0aW9uSWR9LCAke3VzZXIucm9sZX0sIHRydWUsIE5PVygpLCBOT1coKSlcbiAgICAgICAgYCk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwobGlua1Byb21pc2VzKTtcblxuICAgICAgcmVzLmpzb24oe1xuICAgICAgICBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IGxpbmtlZCB1c2VycyB0byBvcmdhbml6YXRpb25zJyxcbiAgICAgICAgdXNlcnNfbGlua2VkOiBvcnBoYW5Vc2Vycy5yb3dzLmxlbmd0aCxcbiAgICAgICAgb3JnYW5pemF0aW9uX2lkOiBvcmdhbml6YXRpb25JZCxcbiAgICAgICAgb3JnYW5pemF0aW9uX25hbWU6IG9yZ2FuaXphdGlvbk5hbWUsXG4gICAgICAgIGxpbmtlZF91c2Vyczogb3JwaGFuVXNlcnMucm93cy5tYXAodSA9PiAoeyBpZDogdS5pZCwgZW1haWw6IHUuZW1haWwsIHJvbGU6IHUucm9sZSB9KSksXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZml4aW5nIHVzZXItb3JnYW5pemF0aW9uIGxpbmtzOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gZml4IHVzZXItb3JnYW5pemF0aW9uIGxpbmtzJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gU2FmZSBlbnVtIG1pZ3JhdGlvbiBlbmRwb2ludFxuICBhcHAucG9zdCgnL2FwaS9kb2N1bWVudHMvZml4LWVudW0tbWlncmF0aW9uJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFN0ZXAgMTogQ2hlY2sgY3VycmVudCBlbnVtIHZhbHVlcyBhbmQgdXNhZ2VcbiAgICAgIGNvbnN0IGVudW1DaGVjayA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgZW51bWxhYmVsLCBlbnVtc29ydG9yZGVyIFxuICAgICAgICBGUk9NIHBnX2VudW0gXG4gICAgICAgIFdIRVJFIGVudW10eXBpZCA9IChTRUxFQ1Qgb2lkIEZST00gcGdfdHlwZSBXSEVSRSB0eXBuYW1lID0gJ3VzZXJfcm9sZScpXG4gICAgICAgIE9SREVSIEJZIGVudW1zb3J0b3JkZXJcbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBjdXJyZW50RW51bVZhbHVlcyA9IGVudW1DaGVjay5yb3dzLm1hcChyb3cgPT4gcm93LmVudW1sYWJlbCk7XG4gICAgICBcbiAgICAgIC8vIFN0ZXAgMjogQ2hlY2sgaWYgd2UgaGF2ZSBhbnkgZGF0YSB0aGF0IHdvdWxkIHByZXZlbnQgbWlncmF0aW9uXG4gICAgICBjb25zdCB1c2VyUm9sZVVzYWdlID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCByb2xlLCBDT1VOVCgqKSBhcyBjb3VudCBcbiAgICAgICAgRlJPTSB1c2VycyBcbiAgICAgICAgR1JPVVAgQlkgcm9sZVxuICAgICAgYCk7XG5cbiAgICAgIC8vIFN0ZXAgMzogU2luY2UgZW51bSByZW9yZGVyaW5nIGlzIHRoZSBpc3N1ZSwgbGV0J3MgdXNlIGEgZGlmZmVyZW50IGFwcHJvYWNoXG4gICAgICAvLyBXZSdsbCBjcmVhdGUgYSBuZXcgZW51bSB3aXRoIGNvcnJlY3Qgb3JkZXIsIG1pZ3JhdGUgZGF0YSwgdGhlbiBzd2FwXG4gICAgICBjb25zdCB0YXJnZXRFbnVtVmFsdWVzID0gWydhZG1pbicsICdtYW5hZ2VyJywgJ3RlbmFudCcsICdyZXNpZGVudCcsICdkZW1vX21hbmFnZXInLCAnZGVtb190ZW5hbnQnLCAnZGVtb19yZXNpZGVudCddO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBpZiBjdXJyZW50IG9yZGVyIG1hdGNoZXMgdGFyZ2V0XG4gICAgICBjb25zdCBvcmRlck1hdGNoZXMgPSBKU09OLnN0cmluZ2lmeShjdXJyZW50RW51bVZhbHVlcykgPT09IEpTT04uc3RyaW5naWZ5KHRhcmdldEVudW1WYWx1ZXMpO1xuICAgICAgXG4gICAgICBpZiAob3JkZXJNYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0VudW0gdmFsdWVzIGFscmVhZHkgaW4gY29ycmVjdCBvcmRlcicsXG4gICAgICAgICAgY3VycmVudF92YWx1ZXM6IGN1cnJlbnRFbnVtVmFsdWVzLFxuICAgICAgICAgIHRhcmdldF92YWx1ZXM6IHRhcmdldEVudW1WYWx1ZXMsXG4gICAgICAgICAgbWlncmF0aW9uX25lZWRlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgNDogQ3JlYXRlIG5ldyBlbnVtIHdpdGggY29ycmVjdCBvcmRlclxuICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQ1JFQVRFIFRZUEUgdXNlcl9yb2xlX25ldyBBUyBFTlVNICgnYWRtaW4nLCAnbWFuYWdlcicsICd0ZW5hbnQnLCAncmVzaWRlbnQnLCAnZGVtb19tYW5hZ2VyJywgJ2RlbW9fdGVuYW50JywgJ2RlbW9fcmVzaWRlbnQnKWApO1xuXG4gICAgICAvLyBTdGVwIDU6IFVwZGF0ZSBhbGwgdGFibGVzIHRvIHVzZSBuZXcgZW51bVxuICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIEFMVEVSIFRBQkxFIHVzZXJzIFxuICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZV9uZXcgXG4gICAgICAgIFVTSU5HIHJvbGU6OnRleHQ6OnVzZXJfcm9sZV9uZXdcbiAgICAgIGApO1xuXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgQUxURVIgVEFCTEUgdXNlcl9vcmdhbml6YXRpb25zIFxuICAgICAgICBBTFRFUiBDT0xVTU4gb3JnYW5pemF0aW9uX3JvbGUgVFlQRSB1c2VyX3JvbGVfbmV3IFxuICAgICAgICBVU0lORyBvcmdhbml6YXRpb25fcm9sZTo6dGV4dDo6dXNlcl9yb2xlX25ld1xuICAgICAgYCk7XG5cbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBBTFRFUiBUQUJMRSByb2xlX3Blcm1pc3Npb25zIFxuICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZV9uZXcgXG4gICAgICAgIFVTSU5HIHJvbGU6OnRleHQ6OnVzZXJfcm9sZV9uZXdcbiAgICAgIGApO1xuXG4gICAgICAvLyBTdGVwIDY6IERyb3Agb2xkIGVudW0gYW5kIHJlbmFtZSBuZXcgb25lXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBEUk9QIFRZUEUgdXNlcl9yb2xlYCk7XG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUWVBFIHVzZXJfcm9sZV9uZXcgUkVOQU1FIFRPIHVzZXJfcm9sZWApO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzZnVsbHkgbWlncmF0ZWQgdXNlcl9yb2xlIGVudW0nLFxuICAgICAgICBvbGRfdmFsdWVzOiBjdXJyZW50RW51bVZhbHVlcyxcbiAgICAgICAgbmV3X3ZhbHVlczogdGFyZ2V0RW51bVZhbHVlcyxcbiAgICAgICAgdXNlcl9yb2xlX3VzYWdlOiB1c2VyUm9sZVVzYWdlLnJvd3MsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgZHVyaW5nIGVudW0gbWlncmF0aW9uOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdFbnVtIG1pZ3JhdGlvbiBmYWlsZWQnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBzdWdnZXN0aW9uOiAnVGhpcyBpcyBhIGNvbXBsZXggbWlncmF0aW9uIC0gbWF5IG5lZWQgbWFudWFsIGludGVydmVudGlvbicsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEZpeCBpbnZpdGF0aW9ucyB0YWJsZSBlbnVtIGRlcGVuZGVuY3lcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL2ZpeC1pbnZpdGF0aW9ucy1kZXBlbmRlbmN5JywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFN0ZXAgMTogQ2hlY2sgY3VycmVudCBpbnZpdGF0aW9ucyB0YWJsZSBzdHJ1Y3R1cmVcbiAgICAgIGNvbnN0IGludml0YXRpb25zU2NoZW1hID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBjb2x1bW5fbmFtZSwgZGF0YV90eXBlLCBjb2x1bW5fZGVmYXVsdFxuICAgICAgICBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zIFxuICAgICAgICBXSEVSRSB0YWJsZV9uYW1lID0gJ2ludml0YXRpb25zJyBBTkQgY29sdW1uX25hbWUgPSAncm9sZSdcbiAgICAgIGApO1xuXG4gICAgICAvLyBTdGVwIDI6IFJlbW92ZSBkZWZhdWx0IHZhbHVlIGZyb20gaW52aXRhdGlvbnMucm9sZSBjb2x1bW4gdGVtcG9yYXJpbHlcbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBcbiAgICAgICAgQUxURVIgQ09MVU1OIHJvbGUgRFJPUCBERUZBVUxUXG4gICAgICBgKTtcblxuICAgICAgLy8gU3RlcCAzOiBDaGVjayB3aGF0IG90aGVyIHRhYmxlcyBtaWdodCBoYXZlIGVudW0gZGVwZW5kZW5jaWVzXG4gICAgICBjb25zdCBlbnVtRGVwZW5kZW5jaWVzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBcbiAgICAgICAgICB0LnRhYmxlX25hbWUsXG4gICAgICAgICAgYy5jb2x1bW5fbmFtZSxcbiAgICAgICAgICBjLmNvbHVtbl9kZWZhdWx0XG4gICAgICAgIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyB0XG4gICAgICAgIEpPSU4gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgYyBPTiB0LnRhYmxlX25hbWUgPSBjLnRhYmxlX25hbWVcbiAgICAgICAgV0hFUkUgYy5kYXRhX3R5cGUgPSAnVVNFUi1ERUZJTkVEJyBcbiAgICAgICAgQU5EIGMudWR0X25hbWUgPSAndXNlcl9yb2xlJ1xuICAgICAgICBBTkQgYy5jb2x1bW5fZGVmYXVsdCBJUyBOT1QgTlVMTFxuICAgICAgYCk7XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSByZW1vdmVkIGludml0YXRpb25zIHRhYmxlIGVudW0gZGVwZW5kZW5jeScsXG4gICAgICAgIHJlbW92ZWRfZGVmYXVsdHM6IGludml0YXRpb25zU2NoZW1hLnJvd3MsXG4gICAgICAgIHJlbWFpbmluZ19kZXBlbmRlbmNpZXM6IGVudW1EZXBlbmRlbmNpZXMucm93cyxcbiAgICAgICAgbmV4dF9zdGVwOiAnUnVuIG5wbSBydW4gZGI6cHVzaCBub3csIHRoZW4gY2FsbCAvYXBpL2RvY3VtZW50cy9yZXN0b3JlLWludml0YXRpb25zLWRlZmF1bHQnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZpeGluZyBpbnZpdGF0aW9ucyBkZXBlbmRlbmN5OicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gZml4IGludml0YXRpb25zIGRlcGVuZGVuY3knLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBSZXN0b3JlIGludml0YXRpb25zIGRlZmF1bHQgdmFsdWUgYWZ0ZXIgc2NoZW1hIHN5bmNcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL3Jlc3RvcmUtaW52aXRhdGlvbnMtZGVmYXVsdCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBSZXN0b3JlIGRlZmF1bHQgdmFsdWUgdG8gJ3RlbmFudCcgZm9yIGludml0YXRpb25zLnJvbGUgY29sdW1uXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgQUxURVIgVEFCTEUgaW52aXRhdGlvbnMgXG4gICAgICAgIEFMVEVSIENPTFVNTiByb2xlIFNFVCBERUZBVUxUICd0ZW5hbnQnXG4gICAgICBgKTtcblxuICAgICAgLy8gVmVyaWZ5IHRoZSBjaGFuZ2VcbiAgICAgIGNvbnN0IHZlcmlmaWNhdGlvbiA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgY29sdW1uX25hbWUsIGNvbHVtbl9kZWZhdWx0XG4gICAgICAgIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgXG4gICAgICAgIFdIRVJFIHRhYmxlX25hbWUgPSAnaW52aXRhdGlvbnMnIEFORCBjb2x1bW5fbmFtZSA9ICdyb2xlJ1xuICAgICAgYCk7XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSByZXN0b3JlZCBpbnZpdGF0aW9ucyByb2xlIGRlZmF1bHQgdG8gdGVuYW50JyxcbiAgICAgICAgY3VycmVudF9kZWZhdWx0OiB2ZXJpZmljYXRpb24ucm93c1swXT8uY29sdW1uX2RlZmF1bHQsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgcmVzdG9yaW5nIGludml0YXRpb25zIGRlZmF1bHQ6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0ZhaWxlZCB0byByZXN0b3JlIGludml0YXRpb25zIGRlZmF1bHQnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBNaWdyYXRlIG93bmVyIHVzZXJzIHRvIGFkbWluIGJlZm9yZSBlbnVtIGNsZWFudXBcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL21pZ3JhdGUtb3duZXItdG8tYWRtaW4nLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gU3RlcCAxOiBDaGVjayBob3cgbWFueSB1c2VycyBoYXZlICdvd25lcicgcm9sZVxuICAgICAgY29uc3Qgb3duZXJVc2Vyc0NoZWNrID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIFNFTEVDVCBpZCwgZW1haWwsIGZpcnN0X25hbWUsIGxhc3RfbmFtZSBcbiAgICAgICAgRlJPTSB1c2VycyBcbiAgICAgICAgV0hFUkUgcm9sZSA9ICdvd25lcidcbiAgICAgIGApO1xuXG4gICAgICBjb25zdCBvd25lckNvdW50ID0gb3duZXJVc2Vyc0NoZWNrLnJvd3MubGVuZ3RoO1xuXG4gICAgICBpZiAob3duZXJDb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdObyBvd25lciB1c2VycyBmb3VuZCAtIG1pZ3JhdGlvbiBub3QgbmVlZGVkJyxcbiAgICAgICAgICBvd25lcl9jb3VudDogMCxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCAyOiBVcGRhdGUgYWxsIG93bmVyIHVzZXJzIHRvIGFkbWluXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgVVBEQVRFIHVzZXJzIFxuICAgICAgICBTRVQgcm9sZSA9ICdhZG1pbicgXG4gICAgICAgIFdIRVJFIHJvbGUgPSAnb3duZXInXG4gICAgICBgKTtcblxuICAgICAgLy8gU3RlcCAzOiBVcGRhdGUgdXNlcl9vcmdhbml6YXRpb25zIHRhYmxlIGlmIGl0IGV4aXN0c1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgVVBEQVRFIHVzZXJfb3JnYW5pemF0aW9ucyBcbiAgICAgICAgICBTRVQgb3JnYW5pemF0aW9uX3JvbGUgPSAnYWRtaW4nIFxuICAgICAgICAgIFdIRVJFIG9yZ2FuaXphdGlvbl9yb2xlID0gJ293bmVyJ1xuICAgICAgICBgKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGFibGUgbWlnaHQgbm90IGV4aXN0LCB0aGF0J3MgT0tcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCA0OiBSZW1vdmUgJ293bmVyJyBmcm9tIGVudW1cbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBBTFRFUiBUWVBFIHVzZXJfcm9sZSBSRU5BTUUgVE8gdXNlcl9yb2xlX29sZFxuICAgICAgYCk7XG5cbiAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBDUkVBVEUgVFlQRSB1c2VyX3JvbGUgQVMgRU5VTSAoJ2FkbWluJywgJ21hbmFnZXInLCAndGVuYW50JywgJ3Jlc2lkZW50JywgJ2RlbW9fbWFuYWdlcicsICdkZW1vX3RlbmFudCcsICdkZW1vX3Jlc2lkZW50JylcbiAgICAgIGApO1xuXG4gICAgICAvLyBTdGVwIDU6IFVwZGF0ZSBhbGwgdGFibGVzIHRvIHVzZSBuZXcgZW51bVxuICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgIEFMVEVSIFRBQkxFIHVzZXJzIFxuICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgVVNJTkcgcm9sZTo6dGV4dDo6dXNlcl9yb2xlXG4gICAgICBgKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgdXNlcl9vcmdhbml6YXRpb25zIFxuICAgICAgICAgIEFMVEVSIENPTFVNTiBvcmdhbml6YXRpb25fcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgICBVU0lORyBvcmdhbml6YXRpb25fcm9sZTo6dGV4dDo6dXNlcl9yb2xlXG4gICAgICAgIGApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBUYWJsZSBtaWdodCBub3QgZXhpc3RcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgcm9sZV9wZXJtaXNzaW9ucyBcbiAgICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgICBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVcbiAgICAgICAgYCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFRhYmxlIG1pZ2h0IG5vdCBleGlzdFxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgICBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBcbiAgICAgICAgICBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBcbiAgICAgICAgICBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVcbiAgICAgICAgYCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIENvbHVtbiBtaWdodCBub3QgZXhpc3RcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCA2OiBEcm9wIG9sZCBlbnVtXG4gICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBEUk9QIFRZUEUgdXNlcl9yb2xlX29sZGApO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdTdWNjZXNzZnVsbHkgbWlncmF0ZWQgb3duZXIgdXNlcnMgdG8gYWRtaW4nLFxuICAgICAgICBtaWdyYXRlZF91c2Vyczogb3duZXJVc2Vyc0NoZWNrLnJvd3MsXG4gICAgICAgIG93bmVyX2NvdW50OiBvd25lckNvdW50LFxuICAgICAgICBuZXdfZW51bV92YWx1ZXM6IFsnYWRtaW4nLCAnbWFuYWdlcicsICd0ZW5hbnQnLCAncmVzaWRlbnQnLCAnZGVtb19tYW5hZ2VyJywgJ2RlbW9fdGVuYW50JywgJ2RlbW9fcmVzaWRlbnQnXSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBtaWdyYXRpbmcgb3duZXIgdXNlcnMgdG8gYWRtaW46JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ093bmVyIHRvIGFkbWluIG1pZ3JhdGlvbiBmYWlsZWQnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBSZW1vdmUgYWxsIHJlbWFpbmluZyBlbnVtIGRlcGVuZGVuY2llc1xuICBhcHAucG9zdCgnL2FwaS9kb2N1bWVudHMvcmVtb3ZlLWFsbC1lbnVtLWRlcGVuZGVuY2llcycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHRzID0gW107XG5cbiAgICAgIC8vIFJlbW92ZSBkZWZhdWx0IGZyb20gdXNlcnMucm9sZVxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgdXNlcnMgXG4gICAgICAgICAgQUxURVIgQ09MVU1OIHJvbGUgRFJPUCBERUZBVUxUXG4gICAgICAgIGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ3VzZXJzLnJvbGUgZGVmYXVsdCByZW1vdmVkJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcnMucm9sZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBkZWZhdWx0IGZyb20gdXNlcl9vcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbl9yb2xlXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgICBBTFRFUiBUQUJMRSB1c2VyX29yZ2FuaXphdGlvbnMgXG4gICAgICAgICAgQUxURVIgQ09MVU1OIG9yZ2FuaXphdGlvbl9yb2xlIERST1AgREVGQVVMVFxuICAgICAgICBgKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKCd1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgZGVmYXVsdCByZW1vdmVkJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcl9vcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbl9yb2xlOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgcmVtYWluaW5nIGRlcGVuZGVuY2llc1xuICAgICAgY29uc3QgcmVtYWluaW5nRGVwcyA9IGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICBTRUxFQ1QgXG4gICAgICAgICAgdC50YWJsZV9uYW1lLFxuICAgICAgICAgIGMuY29sdW1uX25hbWUsXG4gICAgICAgICAgYy5jb2x1bW5fZGVmYXVsdFxuICAgICAgICBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgdFxuICAgICAgICBKT0lOIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zIGMgT04gdC50YWJsZV9uYW1lID0gYy50YWJsZV9uYW1lXG4gICAgICAgIFdIRVJFIGMuZGF0YV90eXBlID0gJ1VTRVItREVGSU5FRCcgXG4gICAgICAgIEFORCBjLnVkdF9uYW1lID0gJ3VzZXJfcm9sZSdcbiAgICAgICAgQU5EIGMuY29sdW1uX2RlZmF1bHQgSVMgTk9UIE5VTExcbiAgICAgIGApO1xuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdSZW1vdmVkIGFsbCBlbnVtIGRlcGVuZGVuY2llcycsXG4gICAgICAgIG9wZXJhdGlvbnM6IHJlc3VsdHMsXG4gICAgICAgIHJlbWFpbmluZ19kZXBlbmRlbmNpZXM6IHJlbWFpbmluZ0RlcHMucm93cyxcbiAgICAgICAgbmV4dF9zdGVwOiAnUnVuIG5wbSBydW4gZGI6cHVzaCBub3cnLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlbW92aW5nIGVudW0gZGVwZW5kZW5jaWVzOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gcmVtb3ZlIGVudW0gZGVwZW5kZW5jaWVzJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gUmVzdG9yZSBhbGwgZGVmYXVsdCB2YWx1ZXMgYWZ0ZXIgc2NoZW1hIHN5bmNcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL3Jlc3RvcmUtYWxsLWRlZmF1bHRzJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcblxuICAgICAgLy8gUmVzdG9yZSB1c2Vycy5yb2xlIGRlZmF1bHRcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICAgIEFMVEVSIFRBQkxFIHVzZXJzIFxuICAgICAgICAgIEFMVEVSIENPTFVNTiByb2xlIFNFVCBERUZBVUxUICd0ZW5hbnQnXG4gICAgICAgIGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ3VzZXJzLnJvbGUgZGVmYXVsdCByZXN0b3JlZCB0byB0ZW5hbnQnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGB1c2Vycy5yb2xlIHJlc3RvcmUgZmFpbGVkOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVzdG9yZSB1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgZGVmYXVsdFxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgdXNlcl9vcmdhbml6YXRpb25zIFxuICAgICAgICAgIEFMVEVSIENPTFVNTiBvcmdhbml6YXRpb25fcm9sZSBTRVQgREVGQVVMVCAndGVuYW50J1xuICAgICAgICBgKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKCd1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgZGVmYXVsdCByZXN0b3JlZCB0byB0ZW5hbnQnKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGB1c2VyX29yZ2FuaXphdGlvbnMub3JnYW5pemF0aW9uX3JvbGUgcmVzdG9yZSBmYWlsZWQ6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXN0b3JlIGludml0YXRpb25zLnJvbGUgZGVmYXVsdFxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgXG4gICAgICAgICAgQUxURVIgVEFCTEUgaW52aXRhdGlvbnMgXG4gICAgICAgICAgQUxURVIgQ09MVU1OIHJvbGUgU0VUIERFRkFVTFQgJ3RlbmFudCdcbiAgICAgICAgYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaCgnaW52aXRhdGlvbnMucm9sZSBkZWZhdWx0IHJlc3RvcmVkIHRvIHRlbmFudCcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYGludml0YXRpb25zLnJvbGUgcmVzdG9yZSBmYWlsZWQ6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICByZXMuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdSZXN0b3JlZCBhbGwgZGVmYXVsdCB2YWx1ZXMnLFxuICAgICAgICBvcGVyYXRpb25zOiByZXN1bHRzLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHJlc3RvcmluZyBkZWZhdWx0czonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIGVycm9yOiAnRmFpbGVkIHRvIHJlc3RvcmUgZGVmYXVsdHMnLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBDb21wbGV0ZSBkYXRhYmFzZSBzY2hlbWEgc3luYyBlbmRwb2ludFxuICBhcHAucG9zdCgnL2FwaS9kb2N1bWVudHMvY29tcGxldGUtc2NoZW1hLXN5bmMnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgICAvLyBTdGVwIDE6IFJlbW92ZSBhbGwgZW51bSBkZXBlbmRlbmNpZXMgdGVtcG9yYXJpbHlcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYEFMVEVSIFRBQkxFIHVzZXJzIEFMVEVSIENPTFVNTiByb2xlIERST1AgREVGQVVMVGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZW1vdmVkIHVzZXJzLnJvbGUgZGVmYXVsdCcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYHVzZXJzLnJvbGU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSB1c2VyX29yZ2FuaXphdGlvbnMgQUxURVIgQ09MVU1OIG9yZ2FuaXphdGlvbl9yb2xlIERST1AgREVGQVVMVGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZW1vdmVkIHVzZXJfb3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25fcm9sZSBkZWZhdWx0Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcl9vcmdhbml6YXRpb25zLm9yZ2FuaXphdGlvbl9yb2xlOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVEFCTEUgaW52aXRhdGlvbnMgQUxURVIgQ09MVU1OIHJvbGUgRFJPUCBERUZBVUxUYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaCgn4pyTIFJlbW92ZWQgaW52aXRhdGlvbnMucm9sZSBkZWZhdWx0Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgaW52aXRhdGlvbnMucm9sZTogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0ZXAgMjogTWlncmF0ZSBhbnkgJ293bmVyJyB1c2VycyB0byAnYWRtaW4nXG4gICAgICBjb25zdCBvd25lclVzZXJzID0gYXdhaXQgZGIuZXhlY3V0ZShzcWxgU0VMRUNUIGNvdW50KCopIGFzIGNvdW50IEZST00gdXNlcnMgV0hFUkUgcm9sZSA9ICdvd25lcidgKTtcbiAgICAgIGNvbnN0IG93bmVyQ291bnQgPSBOdW1iZXIob3duZXJVc2Vycy5yb3dzWzBdPy5jb3VudCB8fCAwKTtcbiAgICAgIGlmIChvd25lckNvdW50ID4gMCkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBVUERBVEUgdXNlcnMgU0VUIHJvbGUgPSAnYWRtaW4nIFdIRVJFIHJvbGUgPSAnb3duZXInYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaChg4pyTIE1pZ3JhdGVkICR7b3duZXJDb3VudH0gb3duZXIgdXNlcnMgdG8gYWRtaW5gKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgVVBEQVRFIHVzZXJfb3JnYW5pemF0aW9ucyBTRVQgb3JnYW5pemF0aW9uX3JvbGUgPSAnYWRtaW4nIFdIRVJFIG9yZ2FuaXphdGlvbl9yb2xlID0gJ293bmVyJ2ApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBVcGRhdGVkIHVzZXJfb3JnYW5pemF0aW9ucyBvd25lciByb2xlcyB0byBhZG1pbicpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYHVzZXJfb3JnYW5pemF0aW9ucyBvd25lciB1cGRhdGU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDM6IEZpeCB0aGUgZW51bSB0byBtYXRjaCBkZXZlbG9wbWVudCBzY2hlbWFcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFJlbmFtZSBjdXJyZW50IGVudW1cbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVFlQRSB1c2VyX3JvbGUgUkVOQU1FIFRPIHVzZXJfcm9sZV9vbGRgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgZW51bSB3aXRoIGNvcnJlY3QgdmFsdWVzXG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICAgIENSRUFURSBUWVBFIHVzZXJfcm9sZSBBUyBFTlVNIChcbiAgICAgICAgICAgICdhZG1pbicsICdtYW5hZ2VyJywgJ3RlbmFudCcsICdyZXNpZGVudCcsIFxuICAgICAgICAgICAgJ2RlbW9fbWFuYWdlcicsICdkZW1vX3RlbmFudCcsICdkZW1vX3Jlc2lkZW50J1xuICAgICAgICAgIClcbiAgICAgICAgYCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIGFsbCB0YWJsZXNcbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVEFCTEUgdXNlcnMgQUxURVIgQ09MVU1OIHJvbGUgVFlQRSB1c2VyX3JvbGUgVVNJTkcgcm9sZTo6dGV4dDo6dXNlcl9yb2xlYCk7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYEFMVEVSIFRBQkxFIHVzZXJfb3JnYW5pemF0aW9ucyBBTFRFUiBDT0xVTU4gb3JnYW5pemF0aW9uX3JvbGUgVFlQRSB1c2VyX3JvbGUgVVNJTkcgb3JnYW5pemF0aW9uX3JvbGU6OnRleHQ6OnVzZXJfcm9sZWApO1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVgKTtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgQUxURVIgVEFCTEUgcm9sZV9wZXJtaXNzaW9ucyBBTFRFUiBDT0xVTU4gcm9sZSBUWVBFIHVzZXJfcm9sZSBVU0lORyByb2xlOjp0ZXh0Ojp1c2VyX3JvbGVgKTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBVcGRhdGVkIHJvbGVfcGVybWlzc2lvbnMgZW51bScpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKGByb2xlX3Blcm1pc3Npb25zOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERyb3Agb2xkIGVudW1cbiAgICAgICAgYXdhaXQgZGIuZXhlY3V0ZShzcWxgRFJPUCBUWVBFIHVzZXJfcm9sZV9vbGRgKTtcbiAgICAgICAgXG4gICAgICAgIHJlc3VsdHMucHVzaCgn4pyTIFN1Y2Nlc3NmdWxseSB1cGRhdGVkIHVzZXJfcm9sZSBlbnVtJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgRW51bSB1cGRhdGUgZmFpbGVkOiAke2UubWVzc2FnZX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RlcCA0OiBSZXN0b3JlIGRlZmF1bHQgdmFsdWVzXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSB1c2VycyBBTFRFUiBDT0xVTU4gcm9sZSBTRVQgREVGQVVMVCAndGVuYW50J2ApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZXN0b3JlZCB1c2Vycy5yb2xlIGRlZmF1bHQgdG8gdGVuYW50Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgdXNlcnMucm9sZSBkZWZhdWx0IHJlc3RvcmU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSB1c2VyX29yZ2FuaXphdGlvbnMgQUxURVIgQ09MVU1OIG9yZ2FuaXphdGlvbl9yb2xlIFNFVCBERUZBVUxUICd0ZW5hbnQnYCk7XG4gICAgICAgIHJlc3VsdHMucHVzaCgn4pyTIFJlc3RvcmVkIHVzZXJfb3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25fcm9sZSBkZWZhdWx0IHRvIHRlbmFudCcpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXN1bHRzLnB1c2goYHVzZXJfb3JnYW5pemF0aW9ucy5vcmdhbml6YXRpb25fcm9sZSBkZWZhdWx0IHJlc3RvcmU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBkYi5leGVjdXRlKHNxbGBBTFRFUiBUQUJMRSBpbnZpdGF0aW9ucyBBTFRFUiBDT0xVTU4gcm9sZSBTRVQgREVGQVVMVCAndGVuYW50J2ApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBSZXN0b3JlZCBpbnZpdGF0aW9ucy5yb2xlIGRlZmF1bHQgdG8gdGVuYW50Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgaW52aXRhdGlvbnMucm9sZSBkZWZhdWx0IHJlc3RvcmU6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGVwIDU6IEFkZCBtaXNzaW5nIGNvbHVtbnMgdGhhdCBleGlzdCBpbiBwcm9kdWN0aW9uIGJ1dCBub3QgZGV2ZWxvcG1lbnRcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRiLmV4ZWN1dGUoc3FsYFxuICAgICAgICAgIEFMVEVSIFRBQkxFIGludml0YXRpb25fYXVkaXRfbG9nIFxuICAgICAgICAgIEFERCBDT0xVTU4gSUYgTk9UIEVYSVNUUyBjcmVhdGVkX2F0IFRJTUVTVEFNUCBERUZBVUxUIE5PVygpXG4gICAgICAgIGApO1xuICAgICAgICByZXN1bHRzLnB1c2goJ+KckyBBZGRlZCBjcmVhdGVkX2F0IHRvIGludml0YXRpb25fYXVkaXRfbG9nJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChgaW52aXRhdGlvbl9hdWRpdF9sb2cuY3JlYXRlZF9hdDogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0RhdGFiYXNlIHNjaGVtYSBzeW5jaHJvbml6YXRpb24gY29tcGxldGUnLFxuICAgICAgICBvcGVyYXRpb25zOiByZXN1bHRzLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGR1cmluZyBzY2hlbWEgc3luY2hyb25pemF0aW9uOicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAgICAgZXJyb3I6ICdTY2hlbWEgc3luY2hyb25pemF0aW9uIGZhaWxlZCcsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBzdWNjZXNzOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBFbmhhbmNlZCBkaWFnbm9zdGljIGVuZHBvaW50IHdpdGggZGF0YWJhc2Ugc2NoZW1hIGNoZWNrXG4gIGFwcC5nZXQoJy9hcGkvZG9jdW1lbnRzL2RpYWdub3N0aWMnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgaWYgZG9jdW1lbnRzIHRhYmxlIGV4aXN0c1xuICAgICAgbGV0IHRhYmxlRXhpc3RzID0gZmFsc2U7XG4gICAgICBsZXQgdGFibGVTY2hlbWEgPSBudWxsO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYi5leGVjdXRlKHNxbGBcbiAgICAgICAgICBTRUxFQ1QgY29sdW1uX25hbWUsIGRhdGFfdHlwZSwgaXNfbnVsbGFibGUsIGNvbHVtbl9kZWZhdWx0IFxuICAgICAgICAgIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgXG4gICAgICAgICAgV0hFUkUgdGFibGVfbmFtZSA9ICdkb2N1bWVudHMnIFxuICAgICAgICAgIE9SREVSIEJZIG9yZGluYWxfcG9zaXRpb25cbiAgICAgICAgYCk7XG4gICAgICAgIHRhYmxlRXhpc3RzID0gcmVzdWx0LnJvd3MubGVuZ3RoID4gMDtcbiAgICAgICAgdGFibGVTY2hlbWEgPSByZXN1bHQucm93cztcbiAgICAgIH0gY2F0Y2ggKHNjaGVtYUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NjaGVtYSBjaGVjayBlcnJvcjonLCBzY2hlbWFFcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0RvY3VtZW50IEFQSSBkaWFnbm9zdGljJyxcbiAgICAgICAgZ2NzX2Rpc2FibGVkOiB0cnVlLFxuICAgICAgICBzZXNzaW9uX2ZpeF9hcHBsaWVkOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WLFxuICAgICAgICB2ZXJzaW9uOiAndjIuMS1nY3MtZGlzYWJsZWQnLFxuICAgICAgICByZWNlbnRfZXJyb3JzOiBlcnJvckxvZy5zbGljZSgtNSksIC8vIExhc3QgNSBlcnJvcnNcbiAgICAgICAgc3RvcmFnZV9zdGF0dXM6IHtcbiAgICAgICAgICBleGlzdHM6ICEhc3RvcmFnZSxcbiAgICAgICAgICB0eXBlOiBzdG9yYWdlPy5jb25zdHJ1Y3Rvcj8ubmFtZSxcbiAgICAgICAgICBtZXRob2RzOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc3RvcmFnZSB8fCB7fSkpXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGFiYXNlX3N0YXR1czoge1xuICAgICAgICAgIGRvY3VtZW50c190YWJsZV9leGlzdHM6IHRhYmxlRXhpc3RzLFxuICAgICAgICAgIGRvY3VtZW50c190YWJsZV9zY2hlbWE6IHRhYmxlU2NoZW1hLFxuICAgICAgICAgIHNjaGVtYV9jb2x1bW5zX2NvdW50OiB0YWJsZVNjaGVtYT8ubGVuZ3RoIHx8IDAsXG4gICAgICAgICAgY29ubmVjdGlvbl90ZXN0OiBhd2FpdCB0ZXN0RGF0YWJhc2VDb25uZWN0aW9uKCksXG4gICAgICAgICAgc2FtcGxlX3F1ZXJ5X3Rlc3Q6IGF3YWl0IHRlc3RTYW1wbGVRdWVyeSgpLFxuICAgICAgICAgIGVudW1fY2hlY2s6IGF3YWl0IGNoZWNrRW51bVZhbHVlcygpLFxuICAgICAgICAgIHVzZXJfb3JnYW5pemF0aW9uX2xpbmtzOiBhd2FpdCBjaGVja1VzZXJPcmdhbml6YXRpb25MaW5rcygpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBydW5uaW5nIGRpYWdub3N0aWM6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICBlcnJvcjogJ0RpYWdub3N0aWMgZmFpbGVkJyxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgXG4gIC8vIEVycm9yIGxvZ2dpbmcgaGVscGVyXG4gIGNvbnN0IGxvZ0Vycm9yID0gKGVuZHBvaW50OiBzdHJpbmcsIGVycm9yOiBhbnksIHVzZXI/OiBhbnkpID0+IHtcbiAgICBjb25zdCBlcnJvckVudHJ5ID0ge1xuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBlbmRwb2ludCxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHN0YWNrOiBlcnJvci5zdGFjayxcbiAgICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgICAgZGV0YWlsczogZXJyb3IudG9TdHJpbmcoKVxuICAgICAgfSxcbiAgICAgIHVzZXI6IHVzZXIgPyB7IGlkOiB1c2VyLmlkLCByb2xlOiB1c2VyLnJvbGUgfSA6IG51bGxcbiAgICB9O1xuICAgIFxuICAgIGVycm9yTG9nLnB1c2goZXJyb3JFbnRyeSk7XG4gICAgaWYgKGVycm9yTG9nLmxlbmd0aCA+IDUwKSBlcnJvckxvZy5zaGlmdCgpOyAvLyBLZWVwIG9ubHkgbGFzdCA1MCBlcnJvcnNcbiAgICBcbiAgICBjb25zb2xlLmVycm9yKGBbJHtlcnJvckVudHJ5LnRpbWVzdGFtcH1dIPCfmqggRVJST1IgaW4gJHtlbmRwb2ludH06YCwgZXJyb3JFbnRyeSk7XG4gICAgcmV0dXJuIGVycm9yRW50cnk7XG4gIH07XG4gIFxuICAvLyBHZXQgYWxsIGRvY3VtZW50cyBmb3IgdGhlIGF1dGhlbnRpY2F0ZWQgdXNlclxuICBhcHAuZ2V0KCcvYXBpL2RvY3VtZW50cycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+ThCBHRVQgL2FwaS9kb2N1bWVudHMgLSBTdGFydGluZyByZXF1ZXN0YCwge1xuICAgICAgdXNlcklkOiByZXEudXNlcj8uaWQsXG4gICAgICB1c2VyUm9sZTogcmVxLnVzZXI/LnJvbGUsXG4gICAgICBxdWVyeTogcmVxLnF1ZXJ5LFxuICAgICAgdXJsOiByZXEudXJsLFxuICAgICAgbWV0aG9kOiByZXEubWV0aG9kXG4gICAgfSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IHVzZXJSb2xlID0gdXNlci5yb2xlO1xuICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgIFxuICAgICAgLy8gUHJvZHVjdGlvbiBkZWJ1Z2dpbmc6IExvZyB0aGUgcmVxdWVzdCBkZXRhaWxzXG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+UjSBVc2VyIGRhdGEgZXh0cmFjdGVkOmAsIHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgaGFzVmFsaWRVc2VyOiAhIXVzZXJcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBDcml0aWNhbDogQ2hlY2sgaWYgc3RvcmFnZSBvYmplY3QgZXhpc3RzIGFuZCBpcyBwcm9wZXJseSBpbml0aWFsaXplZFxuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCfkr4gU3RvcmFnZSBjaGVjazpgLCB7XG4gICAgICAgIHN0b3JhZ2VFeGlzdHM6ICEhc3RvcmFnZSxcbiAgICAgICAgc3RvcmFnZVR5cGU6IHN0b3JhZ2U/LmNvbnN0cnVjdG9yPy5uYW1lLFxuICAgICAgICBzdG9yYWdlTWV0aG9kOiB0eXBlb2Ygc3RvcmFnZT8uZ2V0RG9jdW1lbnRzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IHJlcS5xdWVyeS50eXBlIGFzIHN0cmluZzsgLy8gJ2J1aWxkaW5nJywgJ3Jlc2lkZW50Jywgb3IgdW5kZWZpbmVkIGZvciBib3RoXG4gICAgICBjb25zdCBzcGVjaWZpY1Jlc2lkZW5jZUlkID0gcmVxLnF1ZXJ5LnJlc2lkZW5jZUlkIGFzIHN0cmluZzsgLy8gRmlsdGVyIGJ5IHNwZWNpZmljIHJlc2lkZW5jZVxuICAgICAgY29uc3Qgc3BlY2lmaWNCdWlsZGluZ0lkID0gcmVxLnF1ZXJ5LmJ1aWxkaW5nSWQgYXMgc3RyaW5nOyAvLyBGaWx0ZXIgYnkgc3BlY2lmaWMgYnVpbGRpbmdcblxuICAgICAgLy8gR2V0IHVzZXIncyBvcmdhbml6YXRpb24gYW5kIHJlc2lkZW5jZXMgZm9yIGZpbHRlcmluZ1xuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCflI0gRmV0Y2hpbmcgdXNlciBkYXRhIGZyb20gc3RvcmFnZS4uLmApO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+TiyBDYWxsaW5nIGdldFVzZXJPcmdhbml6YXRpb25zKCR7dXNlcklkfSkuLi5gKTtcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKHVzZXJJZCk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g4pyFIGdldFVzZXJPcmdhbml6YXRpb25zIFNVQ0NFU1MgLSBGb3VuZCAke29yZ2FuaXphdGlvbnMubGVuZ3RofSBvcmdhbml6YXRpb25zYCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDwn5OLIENhbGxpbmcgZ2V0VXNlclJlc2lkZW5jZXMoJHt1c2VySWR9KS4uLmApO1xuICAgICAgY29uc3QgdXNlclJlc2lkZW5jZXMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJSZXNpZGVuY2VzKHVzZXJJZCk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g4pyFIGdldFVzZXJSZXNpZGVuY2VzIFNVQ0NFU1MgLSBGb3VuZCAke3VzZXJSZXNpZGVuY2VzLmxlbmd0aH0gdXNlciByZXNpZGVuY2VzYCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDwn5OLIENhbGxpbmcgZ2V0QnVpbGRpbmdzKCkuLi5gKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5ncyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmdzKCk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g4pyFIGdldEJ1aWxkaW5ncyBTVUNDRVNTIC0gRm91bmQgJHtidWlsZGluZ3MubGVuZ3RofSBidWlsZGluZ3NgKTtcblxuICAgICAgY29uc3Qgb3JnYW5pemF0aW9uSWQgPSBvcmdhbml6YXRpb25zLmxlbmd0aCA+IDAgPyBvcmdhbml6YXRpb25zWzBdLm9yZ2FuaXphdGlvbklkIDogdW5kZWZpbmVkO1xuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCfj6IgT3JnYW5pemF0aW9uIElEIGRldGVybWluZWQ6YCwgb3JnYW5pemF0aW9uSWQpO1xuXG4gICAgICAvLyBJZiBzcGVjaWZpYyByZXNpZGVuY2UgSUQgcHJvdmlkZWQsIGZpbHRlciB0byBvbmx5IHRoYXQgcmVzaWRlbmNlXG4gICAgICBsZXQgcmVzaWRlbmNlSWRzOiBzdHJpbmdbXTtcbiAgICAgIGlmIChzcGVjaWZpY1Jlc2lkZW5jZUlkKSB7XG4gICAgICAgIC8vIEFkbWluIHVzZXJzIGhhdmUgYWNjZXNzIHRvIGFsbCByZXNpZGVuY2VzXG4gICAgICAgIGlmICh1c2VyUm9sZSA9PT0gJ2FkbWluJyB8fCB1c2VyUm9sZSA9PT0gJ21hbmFnZXInKSB7XG4gICAgICAgICAgcmVzaWRlbmNlSWRzID0gW3NwZWNpZmljUmVzaWRlbmNlSWRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFZlcmlmeSB1c2VyIGhhcyBhY2Nlc3MgdG8gdGhpcyBzcGVjaWZpYyByZXNpZGVuY2VcbiAgICAgICAgICAvLyBIYW5kbGUgYm90aCBzaW1wbGUge3Jlc2lkZW5jZUlkOiBzdHJpbmd9IGFuZCBjb21wbGV4IG5lc3RlZCBzdHJ1Y3R1cmVzXG4gICAgICAgICAgY29uc3QgaGFzQWNjZXNzID0gdXNlclJlc2lkZW5jZXMuc29tZSgodXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHNpbXBsZSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci5yZXNpZGVuY2VJZCA9PT0gc3BlY2lmaWNSZXNpZGVuY2VJZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEhhbmRsZSBjb21wbGV4IG5lc3RlZCBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci51c2VyUmVzaWRlbmNlPy5yZXNpZGVuY2VJZCA9PT0gc3BlY2lmaWNSZXNpZGVuY2VJZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEhhbmRsZSByZXNpZGVuY2UgbmVzdGVkIHN0cnVjdHVyZVxuICAgICAgICAgICAgaWYgKHVyLnJlc2lkZW5jZT8uaWQgPT09IHNwZWNpZmljUmVzaWRlbmNlSWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCFoYXNBY2Nlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IG1lc3NhZ2U6ICdBY2Nlc3MgZGVuaWVkIHRvIHRoaXMgcmVzaWRlbmNlJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzaWRlbmNlSWRzID0gW3NwZWNpZmljUmVzaWRlbmNlSWRdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFeHRyYWN0IHJlc2lkZW5jZSBJRHMgZnJvbSBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzdHJ1Y3R1cmVzXG4gICAgICAgIHJlc2lkZW5jZUlkcyA9IHVzZXJSZXNpZGVuY2VzXG4gICAgICAgICAgLm1hcCgodXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHNpbXBsZSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci5yZXNpZGVuY2VJZCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXIucmVzaWRlbmNlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBIYW5kbGUgY29tcGxleCBuZXN0ZWQgc3RydWN0dXJlXG4gICAgICAgICAgICBpZiAodXIudXNlclJlc2lkZW5jZT8ucmVzaWRlbmNlSWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVyLnVzZXJSZXNpZGVuY2UucmVzaWRlbmNlSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBIYW5kbGUgcmVzaWRlbmNlIG5lc3RlZCBzdHJ1Y3R1cmVcbiAgICAgICAgICAgIGlmICh1ci5yZXNpZGVuY2U/LmlkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1ci5yZXNpZGVuY2UuaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5maWx0ZXIoKGlkOiBhbnkpID0+IGlkICE9PSBudWxsKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYnVpbGRpbmdJZHMgPSBidWlsZGluZ3MubWFwKChiKSA9PiBiLmlkKTtcblxuICAgICAgY29uc3QgYWxsRG9jdW1lbnRSZWNvcmRzOiBhbnlbXSA9IFtdO1xuXG4gICAgICAvLyBVc2UgdW5pZmllZCBkb2N1bWVudHMgc3lzdGVtXG4gICAgICBjb25zdCBmaWx0ZXJzOiBhbnkgPSB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgdXNlclJvbGUsXG4gICAgICB9O1xuXG4gICAgICAvLyBGaWx0ZXIgYnkgc3BlY2lmaWMgcmVzaWRlbmNlIGlmIHByb3ZpZGVkXG4gICAgICBpZiAoc3BlY2lmaWNSZXNpZGVuY2VJZCkge1xuICAgICAgICBmaWx0ZXJzLnJlc2lkZW5jZUlkID0gc3BlY2lmaWNSZXNpZGVuY2VJZDtcbiAgICAgIH1cblxuICAgICAgLy8gRmlsdGVyIGJ5IHNwZWNpZmljIGJ1aWxkaW5nIGlmIHByb3ZpZGVkXG4gICAgICBpZiAoc3BlY2lmaWNCdWlsZGluZ0lkKSB7XG4gICAgICAgIGZpbHRlcnMuYnVpbGRpbmdJZCA9IHNwZWNpZmljQnVpbGRpbmdJZDtcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRUeXBlID09PSAnYnVpbGRpbmcnKSB7XG4gICAgICAgIC8vIEZvciBidWlsZGluZyBkb2N1bWVudHMsIHNlYXJjaCBpbiBidWlsZGluZ3MgdXNlciBoYXMgYWNjZXNzIHRvXG4gICAgICAgIGlmIChidWlsZGluZ0lkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gR2V0IGFsbCBkb2N1bWVudHMgZm9yIGJ1aWxkaW5ncywgd2lsbCBmaWx0ZXIgbGF0ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudFR5cGUgPT09ICdyZXNpZGVudCcpIHtcbiAgICAgICAgLy8gRm9yIHJlc2lkZW50IGRvY3VtZW50cywgc2VhcmNoIGluIHJlc2lkZW5jZXMgdXNlciBoYXMgYWNjZXNzIHRvXG4gICAgICAgIGlmIChyZXNpZGVuY2VJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIEdldCBhbGwgZG9jdW1lbnRzIGZvciByZXNpZGVuY2VzLCB3aWxsIGZpbHRlciBsYXRlclxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENSSVRJQ0FMIERFQlVHIFBPSU5UOiBUaGlzIGlzIHdoZXJlIDUwMCBlcnJvcnMgbGlrZWx5IG9jY3VyXG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+OryBDUklUSUNBTDogQWJvdXQgdG8gY2FsbCBzdG9yYWdlLmdldERvY3VtZW50cyB3aXRoIGZpbHRlcnM6YCwgZmlsdGVycyk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+UpyBTdG9yYWdlIGluc3RhbmNlOmAsIHN0b3JhZ2UuY29uc3RydWN0b3IubmFtZSk7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+TiiBGaWx0ZXJzIGJlaW5nIHBhc3NlZDpgLCBKU09OLnN0cmluZ2lmeShmaWx0ZXJzLCBudWxsLCAyKSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGRvY3VtZW50cyA9IGF3YWl0IHN0b3JhZ2UuZ2V0RG9jdW1lbnRzKGZpbHRlcnMpO1xuXG4gICAgICAvLyBDUklUSUNBTDogTG9nIHN1Y2Nlc3NmdWwgZGF0YWJhc2UgcmVzcG9uc2VcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDinIUgQ1JJVElDQUw6IHN0b3JhZ2UuZ2V0RG9jdW1lbnRzIFNVQ0NFU1MgLSByZXR1cm5lZCAke2RvY3VtZW50cz8ubGVuZ3RoIHx8IDB9IGRvY3VtZW50c2ApO1xuICAgICAgY29uc29sZS5sb2coYFske3RpbWVzdGFtcH1dIPCfk4sgRG9jdW1lbnQgcHJldmlldzpgLCBkb2N1bWVudHM/LnNsaWNlKDAsIDMpPy5tYXAoZCA9PiAoeyBcbiAgICAgICAgaWQ6IGQuaWQsIFxuICAgICAgICBuYW1lOiBkLm5hbWUsIFxuICAgICAgICB1cGxvYWRlZEJ5SWQ6IGQudXBsb2FkZWRCeUlkLFxuICAgICAgICBidWlsZGluZ0lkOiBkLmJ1aWxkaW5nSWQsXG4gICAgICAgIHJlc2lkZW5jZUlkOiBkLnJlc2lkZW5jZUlkIFxuICAgICAgfSkpKTtcblxuICAgICAgLy8gRGVidWcgbG9nZ2luZ1xuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RPQ1VNRU5UUyBBUEkgREVCVUddOicsIHtcbiAgICAgICAgZmlsdGVycyxcbiAgICAgICAgZG9jdW1lbnRzRm91bmQ6IGRvY3VtZW50cz8ubGVuZ3RoIHx8IDAsXG4gICAgICAgIHNwZWNpZmljUmVzaWRlbmNlSWQsXG4gICAgICAgIHVzZXJSb2xlLFxuICAgICAgICB1c2VySWQsXG4gICAgICB9KTtcblxuICAgICAgLy8gQXBwbHkgcm9sZS1iYXNlZCBmaWx0ZXJpbmcgd2l0aCB0ZW5hbnQgdmlzaWJpbGl0eSBydWxlc1xuICAgICAgY29uc3QgZmlsdGVyZWREb2N1bWVudFJlY29yZHMgPSBkb2N1bWVudHMuZmlsdGVyKChkb2MpID0+IHtcbiAgICAgICAgLy8gSWYgZmlsdGVyaW5nIGJ5IHNwZWNpZmljIGJ1aWxkaW5nLCBvbmx5IHNob3cgZG9jdW1lbnRzIGZvciB0aGF0IGJ1aWxkaW5nXG4gICAgICAgIGlmIChzcGVjaWZpY0J1aWxkaW5nSWQpIHtcbiAgICAgICAgICBpZiAoZG9jLmJ1aWxkaW5nSWQgIT09IHNwZWNpZmljQnVpbGRpbmdJZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkbWluIGNhbiBzZWUgYWxsIGRvY3VtZW50c1xuICAgICAgICBpZiAodXNlclJvbGUgPT09ICdhZG1pbicpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1hbmFnZXIgY2FuIHNlZSBhbGwgZG9jdW1lbnRzIGluIHRoZWlyIG9yZ2FuaXphdGlvblxuICAgICAgICBpZiAodXNlclJvbGUgPT09ICdtYW5hZ2VyJyAmJiBvcmdhbml6YXRpb25JZCkge1xuICAgICAgICAgIGlmIChkb2MuYnVpbGRpbmdJZCAmJiBidWlsZGluZ0lkcy5pbmNsdWRlcyhkb2MuYnVpbGRpbmdJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZG9jLnJlc2lkZW5jZUlkICYmIHJlc2lkZW5jZUlkcy5pbmNsdWRlcyhkb2MucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNpZGVudCBhY2Nlc3MgcnVsZXNcbiAgICAgICAgaWYgKHVzZXJSb2xlID09PSAncmVzaWRlbnQnKSB7XG4gICAgICAgICAgLy8gUmVzaWRlbnRzIGNhbiBzZWUgZG9jdW1lbnRzIGluIHRoZWlyIHJlc2lkZW5jZVxuICAgICAgICAgIGlmIChkb2MucmVzaWRlbmNlSWQgJiYgcmVzaWRlbmNlSWRzLmluY2x1ZGVzKGRvYy5yZXNpZGVuY2VJZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXNpZGVudHMgY2FuIHNlZSBidWlsZGluZyBkb2N1bWVudHMgcmVsYXRlZCB0byB0aGVpciByZXNpZGVuY2VzXG4gICAgICAgICAgaWYgKGRvYy5idWlsZGluZ0lkKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBhbnkgb2YgdXNlcidzIHJlc2lkZW5jZXMgYmVsb25nIHRvIHRoaXMgYnVpbGRpbmdcbiAgICAgICAgICAgIGNvbnN0IHVzZXJCdWlsZGluZ0lkcyA9IHVzZXJSZXNpZGVuY2VzXG4gICAgICAgICAgICAgIC5tYXAoKHVyOiBhbnkpID0+IHVyLnJlc2lkZW5jZT8uYnVpbGRpbmdJZCB8fCB1ci51c2VyUmVzaWRlbmNlPy5yZXNpZGVuY2U/LmJ1aWxkaW5nSWQpXG4gICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgICByZXR1cm4gdXNlckJ1aWxkaW5nSWRzLmluY2x1ZGVzKGRvYy5idWlsZGluZ0lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZW5hbnQgYWNjZXNzIHJ1bGVzIC0gbW9yZSByZXN0cmljdGl2ZVxuICAgICAgICBpZiAodXNlclJvbGUgPT09ICd0ZW5hbnQnKSB7XG4gICAgICAgICAgLy8gVGVuYW50cyBjYW4gb25seSBzZWUgZG9jdW1lbnRzIG1hcmtlZCBhcyB2aXNpYmxlIHRvIHRlbmFudHNcbiAgICAgICAgICBpZiAoIWRvYy5pc1Zpc2libGVUb1RlbmFudHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUZW5hbnRzIGNhbiBzZWUgdmlzaWJsZSBkb2N1bWVudHMgaW4gdGhlaXIgcmVzaWRlbmNlXG4gICAgICAgICAgaWYgKGRvYy5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jLnJlc2lkZW5jZUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGVuYW50cyBjYW4gc2VlIHZpc2libGUgYnVpbGRpbmcgZG9jdW1lbnRzIHJlbGF0ZWQgdG8gdGhlaXIgcmVzaWRlbmNlc1xuICAgICAgICAgIGlmIChkb2MuYnVpbGRpbmdJZCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgYW55IG9mIHVzZXIncyByZXNpZGVuY2VzIGJlbG9uZyB0byB0aGlzIGJ1aWxkaW5nXG4gICAgICAgICAgICBjb25zdCB1c2VyQnVpbGRpbmdJZHMgPSB1c2VyUmVzaWRlbmNlc1xuICAgICAgICAgICAgICAubWFwKCh1cjogYW55KSA9PiB1ci5yZXNpZGVuY2U/LmJ1aWxkaW5nSWQgfHwgdXIudXNlclJlc2lkZW5jZT8ucmVzaWRlbmNlPy5idWlsZGluZ0lkKVxuICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgICAgICAgICAgcmV0dXJuIHVzZXJCdWlsZGluZ0lkcy5pbmNsdWRlcyhkb2MuYnVpbGRpbmdJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFkZCBkb2N1bWVudCB0eXBlIGluZGljYXRvcnMgZm9yIGZyb250ZW5kIGNvbXBhdGliaWxpdHlcbiAgICAgIGNvbnN0IGVuaGFuY2VkRG9jdW1lbnRSZWNvcmRzID0gZmlsdGVyZWREb2N1bWVudFJlY29yZHMubWFwKChkb2MpID0+ICh7XG4gICAgICAgIC4uLmRvYyxcbiAgICAgICAgZG9jdW1lbnRDYXRlZ29yeTogZG9jLmJ1aWxkaW5nSWQgPyAnYnVpbGRpbmcnIDogJ3Jlc2lkZW50JyxcbiAgICAgICAgZW50aXR5VHlwZTogZG9jLmJ1aWxkaW5nSWQgPyAnYnVpbGRpbmcnIDogJ3Jlc2lkZW5jZScsXG4gICAgICAgIGVudGl0eUlkOiBkb2MuYnVpbGRpbmdJZCB8fCBkb2MucmVzaWRlbmNlSWQsXG4gICAgICAgIHVwbG9hZERhdGU6IGRvYy5jcmVhdGVkQXQsIC8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICB9KSk7XG5cbiAgICAgIGFsbERvY3VtZW50UmVjb3Jkcy5wdXNoKC4uLmVuaGFuY2VkRG9jdW1lbnRSZWNvcmRzKTtcblxuICAgICAgLy8gU29ydCBieSB1cGxvYWQgZGF0ZSwgbW9zdCByZWNlbnQgZmlyc3RcbiAgICAgIGFsbERvY3VtZW50UmVjb3Jkcy5zb3J0KFxuICAgICAgICAoYSwgYikgPT4gbmV3IERhdGUoYi51cGxvYWREYXRlKS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShhLnVwbG9hZERhdGUpLmdldFRpbWUoKVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRvY3VtZW50czogYWxsRG9jdW1lbnRSZWNvcmRzLFxuICAgICAgICB0b3RhbDogYWxsRG9jdW1lbnRSZWNvcmRzLmxlbmd0aCxcbiAgICAgICAgYnVpbGRpbmdDb3VudDogYWxsRG9jdW1lbnRSZWNvcmRzLmZpbHRlcigoZCkgPT4gZC5kb2N1bWVudENhdGVnb3J5ID09PSAnYnVpbGRpbmcnKS5sZW5ndGgsXG4gICAgICAgIHJlc2lkZW50Q291bnQ6IGFsbERvY3VtZW50UmVjb3Jkcy5maWx0ZXIoKGQpID0+IGQuZG9jdW1lbnRDYXRlZ29yeSA9PT0gJ3Jlc2lkZW50JykubGVuZ3RoLFxuICAgICAgICBsZWdhY3lDb3VudDogYWxsRG9jdW1lbnRSZWNvcmRzLmZpbHRlcigoZCkgPT4gZC5kb2N1bWVudENhdGVnb3J5ID09PSAnbGVnYWN5JykubGVuZ3RoLFxuICAgICAgfTtcbiAgICAgIHJlcy5qc29uKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChfZXJyb3I6IGFueSkge1xuICAgICAgY29uc3QgZXJyb3JFbnRyeSA9IGxvZ0Vycm9yKCdHRVQgL2FwaS9kb2N1bWVudHMnLCBfZXJyb3IsIHJlcS51c2VyKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggZG9jdW1lbnRzJyxcbiAgICAgICAgZXJyb3JfaWQ6IGVycm9yRW50cnkudGltZXN0YW1wLFxuICAgICAgICBkZWJ1Z19pbmZvOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IF9lcnJvci5tZXNzYWdlIDogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdldCBhIHNwZWNpZmljIGRvY3VtZW50IGJ5IElEXG4gIGFwcC5nZXQoJy9hcGkvZG9jdW1lbnRzLzppZCcsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXI7XG4gICAgICBjb25zdCB1c2VyUm9sZSA9IHVzZXIucm9sZTtcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXIuaWQ7XG4gICAgICBjb25zdCBkb2N1bWVudElkID0gcmVxLnBhcmFtcy5pZDtcbiAgICAgIGNvbnN0IGRvY3VtZW50VHlwZSA9IHJlcS5xdWVyeS50eXBlIGFzIHN0cmluZzsgLy8gT3B0aW9uYWwgdHlwZSBoaW50XG5cbiAgICAgIC8vIEdldCB1c2VyJ3Mgb3JnYW5pemF0aW9uIGFuZCByZXNpZGVuY2VzIGZvciBmaWx0ZXJpbmdcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKHVzZXJJZCk7XG4gICAgICBjb25zdCByZXNpZGVuY2VzID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyUmVzaWRlbmNlcyh1c2VySWQpO1xuICAgICAgY29uc3QgYnVpbGRpbmdzID0gYXdhaXQgc3RvcmFnZS5nZXRCdWlsZGluZ3MoKTtcblxuICAgICAgY29uc3Qgb3JnYW5pemF0aW9uSWQgPSBvcmdhbml6YXRpb25zLmxlbmd0aCA+IDAgPyBvcmdhbml6YXRpb25zWzBdLm9yZ2FuaXphdGlvbklkIDogdW5kZWZpbmVkO1xuICAgICAgY29uc3QgcmVzaWRlbmNlSWRzID0gcmVzaWRlbmNlcy5tYXAoKHVyKSA9PiB1ci5yZXNpZGVuY2VJZCk7XG4gICAgICBjb25zdCBidWlsZGluZ0lkcyA9IGJ1aWxkaW5ncy5tYXAoKGIpID0+IGIuaWQpO1xuXG4gICAgICBsZXQgZG9jdW1lbnQ6IERvY3VtZW50UmVjb3JkIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBkb2N1bWVudCBpbiB0aGUgYXBwcm9wcmlhdGUgdGFibGUocylcbiAgICAgIGNvbnN0IGhhc05ld0RvY3VtZW50UmVjb3JkTWV0aG9kcyA9ICdnZXRCdWlsZGluZ0RvY3VtZW50UmVjb3JkJyBpbiBzdG9yYWdlO1xuXG4gICAgICBpZiAoaGFzTmV3RG9jdW1lbnRSZWNvcmRNZXRob2RzKSB7XG4gICAgICAgIGlmICghZG9jdW1lbnRUeXBlIHx8IGRvY3VtZW50VHlwZSA9PT0gJ2J1aWxkaW5nJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb2N1bWVudCA9IGF3YWl0IChzdG9yYWdlIGFzIGFueSkuZ2V0QnVpbGRpbmdEb2N1bWVudFJlY29yZChcbiAgICAgICAgICAgICAgZG9jdW1lbnRJZCxcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICAgIGJ1aWxkaW5nSWRzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50KSB7XG4gICAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmRvY3VtZW50Q2F0ZWdvcnkgPSAnYnVpbGRpbmcnO1xuICAgICAgICAgICAgICAoZG9jdW1lbnQgYXMgYW55KS5lbnRpdHlUeXBlID0gJ2J1aWxkaW5nJztcbiAgICAgICAgICAgICAgKGRvY3VtZW50IGFzIGFueSkuZW50aXR5SWQgPSAoZG9jdW1lbnQgYXMgYW55KS5idWlsZGluZ0lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGZldGNoaW5nIGJ1aWxkaW5nIGRvY3VtZW50OicsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZG9jdW1lbnQgJiYgKCFkb2N1bWVudFR5cGUgfHwgZG9jdW1lbnRUeXBlID09PSAncmVzaWRlbnQnKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkb2N1bWVudCA9IGF3YWl0IChzdG9yYWdlIGFzIGFueSkuZ2V0UmVzaWRlbnREb2N1bWVudFJlY29yZChcbiAgICAgICAgICAgICAgZG9jdW1lbnRJZCxcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICAgIHJlc2lkZW5jZUlkc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgICAgICAgICAoZG9jdW1lbnQgYXMgYW55KS5kb2N1bWVudENhdGVnb3J5ID0gJ3Jlc2lkZW50JztcbiAgICAgICAgICAgICAgKGRvY3VtZW50IGFzIGFueSkuZW50aXR5VHlwZSA9ICdyZXNpZGVuY2UnO1xuICAgICAgICAgICAgICAoZG9jdW1lbnQgYXMgYW55KS5lbnRpdHlJZCA9IChkb2N1bWVudCBhcyBhbnkpLnJlc2lkZW5jZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEVycm9yIGZldGNoaW5nIHJlc2lkZW50IGRvY3VtZW50OicsIGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGYWxsYmFjayB0byBsZWdhY3kgZG9jdW1lbnRzIGlmIG5vdCBmb3VuZCBhbmQgbm8gdHlwZSBzcGVjaWZpZWRcbiAgICAgIGlmICghZG9jdW1lbnQgJiYgIWRvY3VtZW50VHlwZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRvY3VtZW50ID0gYXdhaXQgc3RvcmFnZS5nZXREb2N1bWVudChkb2N1bWVudElkKTtcbiAgICAgICAgICBpZiAoZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmRvY3VtZW50Q2F0ZWdvcnkgPSAnbGVnYWN5JztcbiAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmVudGl0eVR5cGUgPSAnbGVnYWN5JztcbiAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLmVudGl0eUlkID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBFcnJvciBmZXRjaGluZyBsZWdhY3kgZG9jdW1lbnQ6JywgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnRG9jdW1lbnRSZWNvcmQgbm90IGZvdW5kIG9yIGFjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICByZXMuanNvbihkb2N1bWVudCk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGZldGNoaW5nIGRvY3VtZW50OicsIGVycm9yKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byBmZXRjaCBkb2N1bWVudCcgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBDcmVhdGUgYSBuZXcgZG9jdW1lbnQgKHN1cHBvcnRzIGJvdGggZmlsZSB1cGxvYWQgYW5kIHRleHQtb25seSBkb2N1bWVudHMpXG4gIGFwcC5wb3N0KCcvYXBpL2RvY3VtZW50cycsIHJlcXVpcmVBdXRoLCB1cGxvYWQuc2luZ2xlKCdmaWxlJyksIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IHVzZXJSb2xlID0gdXNlci5yb2xlO1xuICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgIGNvbnN0IHsgZG9jdW1lbnRUeXBlLCBidWlsZGluZ0lkLCByZXNpZGVuY2VJZCwgdGV4dENvbnRlbnQsIC4uLm90aGVyRGF0YSB9ID0gcmVxLmJvZHk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIHBlcm1pc3Npb25zIC0gb25seSBhZG1pbiwgbWFuYWdlciwgYW5kIHJlc2lkZW50IGNhbiBjcmVhdGUgZG9jdW1lbnRzXG4gICAgICBpZiAoIVsnYWRtaW4nLCAnbWFuYWdlcicsICdyZXNpZGVudCddLmluY2x1ZGVzKHVzZXJSb2xlKSkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zIHRvIGNyZWF0ZSBkb2N1bWVudHMnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgdGV4dC1vbmx5IGRvY3VtZW50IG9yIGZpbGUgdXBsb2FkXG4gICAgICBjb25zdCBpc1RleHREb2N1bWVudFJlY29yZCA9ICFyZXEuZmlsZSAmJiB0ZXh0Q29udGVudDtcbiAgICAgIGNvbnN0IGlzRmlsZURvY3VtZW50UmVjb3JkID0gISFyZXEuZmlsZTtcblxuICAgICAgaWYgKCFpc1RleHREb2N1bWVudFJlY29yZCAmJiAhaXNGaWxlRG9jdW1lbnRSZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0VpdGhlciBhIGZpbGUgb3IgdGV4dCBjb250ZW50IGlzIHJlcXVpcmVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIHRleHQgZG9jdW1lbnRzLCBjcmVhdGUgdW5pZmllZCBkb2N1bWVudCBkaXJlY3RseVxuICAgICAgaWYgKGlzVGV4dERvY3VtZW50UmVjb3JkKSB7XG4gICAgICAgIC8vIENyZWF0ZSB0ZXh0IGRvY3VtZW50IHdpdGhvdXQgZmlsZSBzdG9yYWdlXG4gICAgICAgIGNvbnN0IGRvY3VtZW50RGF0YTogSW5zZXJ0RG9jdW1lbnQgPSB7XG4gICAgICAgICAgbmFtZTogb3RoZXJEYXRhLm5hbWUgfHwgJ1VudGl0bGVkIERvY3VtZW50UmVjb3JkJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogb3RoZXJEYXRhLmRlc2NyaXB0aW9uIHx8IHRleHRDb250ZW50LnN1YnN0cmluZygwLCAyMDApICsgKHRleHRDb250ZW50Lmxlbmd0aCA+IDIwMCA/ICcuLi4nIDogJycpLFxuICAgICAgICAgIGRvY3VtZW50VHlwZTogZG9jdW1lbnRUeXBlIHx8ICdvdGhlcicsXG4gICAgICAgICAgZmlsZVBhdGg6IGB0ZXh0LWRvY3VtZW50cy8ke3VzZXJJZH0vJHt1dWlkdjQoKX0udHh0YCwgLy8gVmlydHVhbCBwYXRoIGZvciB0ZXh0IGRvY3VtZW50c1xuICAgICAgICAgIGlzVmlzaWJsZVRvVGVuYW50czogb3RoZXJEYXRhLmlzVmlzaWJsZVRvVGVuYW50cyA9PT0gJ3RydWUnIHx8IG90aGVyRGF0YS5pc1Zpc2libGVUb1RlbmFudHMgPT09IHRydWUsXG4gICAgICAgICAgcmVzaWRlbmNlSWQ6IHJlc2lkZW5jZUlkIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBidWlsZGluZ0lkOiBidWlsZGluZ0lkIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICB1cGxvYWRlZEJ5SWQ6IHVzZXJJZCxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQZXJtaXNzaW9uIGNoZWNrc1xuICAgICAgICBpZiAoYnVpbGRpbmdJZCAmJiB1c2VyUm9sZSA9PT0gJ21hbmFnZXInKSB7XG4gICAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlck9yZ2FuaXphdGlvbnModXNlcklkKTtcbiAgICAgICAgICBjb25zdCBvcmdhbml6YXRpb25JZCA9IG9yZ2FuaXphdGlvbnMubGVuZ3RoID4gMCA/IG9yZ2FuaXphdGlvbnNbMF0ub3JnYW5pemF0aW9uSWQgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3QgYnVpbGRpbmcgPSBhd2FpdCBzdG9yYWdlLmdldEJ1aWxkaW5nKGJ1aWxkaW5nSWQpO1xuICAgICAgICAgIGlmICghYnVpbGRpbmcgfHwgYnVpbGRpbmcub3JnYW5pemF0aW9uSWQgIT09IG9yZ2FuaXphdGlvbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnQ2Fubm90IGFzc2lnbiBkb2N1bWVudCB0byBidWlsZGluZyBvdXRzaWRlIHlvdXIgb3JnYW5pemF0aW9uJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzaWRlbmNlSWQgJiYgdXNlclJvbGUgPT09ICdyZXNpZGVudCcpIHtcbiAgICAgICAgICBjb25zdCByZXNpZGVuY2VzID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyUmVzaWRlbmNlcyh1c2VySWQpO1xuICAgICAgICAgIGNvbnN0IHJlc2lkZW5jZUlkcyA9IHJlc2lkZW5jZXMubWFwKCh1cikgPT4gdXIucmVzaWRlbmNlSWQpO1xuICAgICAgICAgIGlmICghcmVzaWRlbmNlSWRzLmluY2x1ZGVzKHJlc2lkZW5jZUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ0Nhbm5vdCBhc3NpZ24gZG9jdW1lbnQgdG8gcmVzaWRlbmNlIHlvdSBkbyBub3Qgb3duJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIHRleHQgY29udGVudCB0byBsb2NhbCBmaWxlIHN5c3RlbSBmb3IgdGV4dCBkb2N1bWVudHNcbiAgICAgICAgbGV0IGZpbGVOYW1lOiBzdHJpbmc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdGV4dEZpbGVQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd1cGxvYWRzJywgJ3RleHQtZG9jdW1lbnRzJywgdXNlcklkKTtcbiAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmModGV4dEZpbGVQYXRoKSkge1xuICAgICAgICAgICAgZnMubWtkaXJTeW5jKHRleHRGaWxlUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpbGVOYW1lID0gYCR7dXVpZHY0KCl9LnR4dGA7XG4gICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoLmpvaW4odGV4dEZpbGVQYXRoLCBmaWxlTmFtZSk7XG4gICAgICAgICAgZnMud3JpdGVGaWxlU3luYyhmdWxsUGF0aCwgdGV4dENvbnRlbnQsICd1dGY4Jyk7XG4gICAgICAgIH0gY2F0Y2ggKGZzRXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgdGV4dCBkb2N1bWVudCB0byBmaWxlc3lzdGVtOicsIGZzRXJyb3IpO1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gc2F2ZSB0ZXh0IGRvY3VtZW50JyB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIGZpbGUgcGF0aCB0byBhY3R1YWwgbG9jYWwgcGF0aFxuICAgICAgICBkb2N1bWVudERhdGEuZmlsZVBhdGggPSBgdGV4dC1kb2N1bWVudHMvJHt1c2VySWR9LyR7ZmlsZU5hbWV9YDtcblxuICAgICAgICAvLyBDcmVhdGUgZG9jdW1lbnQgcmVjb3JkIGluIGRhdGFiYXNlXG4gICAgICAgIGNvbnN0IGRvY3VtZW50ID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVEb2N1bWVudChkb2N1bWVudERhdGEpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcbiAgICAgICAgICBtZXNzYWdlOiAnVGV4dCBkb2N1bWVudCBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgZG9jdW1lbnQ6IHtcbiAgICAgICAgICAgIC4uLmRvY3VtZW50LFxuICAgICAgICAgICAgZG9jdW1lbnRDYXRlZ29yeTogYnVpbGRpbmdJZCA/ICdidWlsZGluZycgOiAncmVzaWRlbnQnLFxuICAgICAgICAgICAgZW50aXR5VHlwZTogYnVpbGRpbmdJZCA/ICdidWlsZGluZycgOiAncmVzaWRlbmNlJyxcbiAgICAgICAgICAgIGVudGl0eUlkOiBidWlsZGluZ0lkIHx8IHJlc2lkZW5jZUlkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBIYW5kbGUgZmlsZSB1cGxvYWRzIChleGlzdGluZyBsb2dpYylcbiAgICAgIC8vIERldGVybWluZSBkb2N1bWVudCB0eXBlIGJhc2VkIG9uIGJ1aWxkaW5nSWQvcmVzaWRlbmNlSWQgaWYgbm90IGV4cGxpY2l0bHkgcHJvdmlkZWRcbiAgICAgIGxldCBmaW5hbERvY3VtZW50UmVjb3JkVHlwZSA9IGRvY3VtZW50VHlwZTtcbiAgICAgIGlmICghZmluYWxEb2N1bWVudFJlY29yZFR5cGUpIHtcbiAgICAgICAgaWYgKGJ1aWxkaW5nSWQgJiYgIXJlc2lkZW5jZUlkKSB7XG4gICAgICAgICAgZmluYWxEb2N1bWVudFJlY29yZFR5cGUgPSAnYnVpbGRpbmcnO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc2lkZW5jZUlkICYmICFidWlsZGluZ0lkKSB7XG4gICAgICAgICAgZmluYWxEb2N1bWVudFJlY29yZFR5cGUgPSAncmVzaWRlbnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1aWxkaW5nSWQgJiYgcmVzaWRlbmNlSWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBzcGVjaWZ5IGRvY3VtZW50VHlwZSB3aGVuIHByb3ZpZGluZyBib3RoIGJ1aWxkaW5nSWQgYW5kIHJlc2lkZW5jZUlkJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgJ011c3QgcHJvdmlkZSBlaXRoZXIgYnVpbGRpbmdJZCAoZm9yIGJ1aWxkaW5nIGRvY3VtZW50cykgb3IgcmVzaWRlbmNlSWQgKGZvciByZXNpZGVudCBkb2N1bWVudHMpJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxEb2N1bWVudFJlY29yZFR5cGUgPT09ICdidWlsZGluZycpIHtcbiAgICAgICAgLy8gVmFsaWRhdGUgYW5kIGNyZWF0ZSBidWlsZGluZyBkb2N1bWVudFxuICAgICAgICBpZiAoIWJ1aWxkaW5nSWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnYnVpbGRpbmdJZCBpcyByZXF1aXJlZCBmb3IgYnVpbGRpbmcgZG9jdW1lbnRzJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZERhdGEgPSBjcmVhdGVCdWlsZGluZ0RvY3VtZW50U2NoZW1hLnBhcnNlKHtcbiAgICAgICAgICAuLi5vdGhlckRhdGEsXG4gICAgICAgICAgYnVpbGRpbmdJZCxcbiAgICAgICAgICB1cGxvYWRlZEJ5SWQ6IHVzZXJJZCxcbiAgICAgICAgICBmaWxlUGF0aDogcmVxLmZpbGUgPyByZXEuZmlsZS5wYXRoIDogdW5kZWZpbmVkLFxuICAgICAgICAgIC8vIGZpbGVOYW1lIGlzIGhhbmRsZWQgdmlhIG5hbWUgZmllbGRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUGVybWlzc2lvbiBjaGVja3MgZm9yIGJ1aWxkaW5nIGRvY3VtZW50c1xuICAgICAgICBpZiAodXNlclJvbGUgPT09ICdtYW5hZ2VyJykge1xuICAgICAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKHVzZXJJZCk7XG4gICAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9uSWQgPVxuICAgICAgICAgICAgb3JnYW5pemF0aW9ucy5sZW5ndGggPiAwID8gb3JnYW5pemF0aW9uc1swXS5vcmdhbml6YXRpb25JZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb25zdCBidWlsZGluZyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmcoYnVpbGRpbmdJZCk7XG4gICAgICAgICAgaWYgKCFidWlsZGluZyB8fCBidWlsZGluZy5vcmdhbml6YXRpb25JZCAhPT0gb3JnYW5pemF0aW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgICAgLnN0YXR1cyg0MDMpXG4gICAgICAgICAgICAgIC5qc29uKHsgbWVzc2FnZTogJ0Nhbm5vdCBhc3NpZ24gZG9jdW1lbnQgdG8gYnVpbGRpbmcgb3V0c2lkZSB5b3VyIG9yZ2FuaXphdGlvbicgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXJSb2xlID09PSAncmVzaWRlbnQnKSB7XG4gICAgICAgICAgY29uc3QgcmVzaWRlbmNlcyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlclJlc2lkZW5jZXModXNlcklkKTtcbiAgICAgICAgICBjb25zdCBoYXNSZXNpZGVuY2VJbkJ1aWxkaW5nID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICByZXNpZGVuY2VzLm1hcChhc3luYyAodXIpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzaWRlbmNlID0gYXdhaXQgc3RvcmFnZS5nZXRSZXNpZGVuY2UodXIucmVzaWRlbmNlSWQpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzaWRlbmNlICYmIHJlc2lkZW5jZS5idWlsZGluZ0lkID09PSBidWlsZGluZ0lkO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKCFoYXNSZXNpZGVuY2VJbkJ1aWxkaW5nLnNvbWUoQm9vbGVhbikpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgICAgLnN0YXR1cyg0MDMpXG4gICAgICAgICAgICAgIC5qc29uKHsgbWVzc2FnZTogJ0Nhbm5vdCBhc3NpZ24gZG9jdW1lbnQgdG8gYnVpbGRpbmcgd2hlcmUgeW91IGhhdmUgbm8gcmVzaWRlbmNlJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgdW5pZmllZCBkb2N1bWVudCBpbnN0ZWFkIG9mIHNlcGFyYXRlIGJ1aWxkaW5nIGRvY3VtZW50XG4gICAgICAgIGNvbnN0IHVuaWZpZWREb2N1bWVudDogSW5zZXJ0RG9jdW1lbnQgPSB7XG4gICAgICAgICAgbmFtZTogdmFsaWRhdGVkRGF0YS5uYW1lIHx8IHZhbGlkYXRlZERhdGEudGl0bGUgfHwgJ1VudGl0bGVkJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogdmFsaWRhdGVkRGF0YS5kZXNjcmlwdGlvbixcbiAgICAgICAgICBkb2N1bWVudFR5cGU6IHZhbGlkYXRlZERhdGEudHlwZSxcbiAgICAgICAgICBmaWxlUGF0aDogdmFsaWRhdGVkRGF0YS5maWxlUGF0aCB8fCBgdGVtcC1wYXRoLSR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgIGlzVmlzaWJsZVRvVGVuYW50czogdmFsaWRhdGVkRGF0YS5pc1Zpc2libGVUb1RlbmFudHMgfHwgZmFsc2UsXG4gICAgICAgICAgcmVzaWRlbmNlSWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBidWlsZGluZ0lkOiB2YWxpZGF0ZWREYXRhLmJ1aWxkaW5nSWQsXG4gICAgICAgICAgdXBsb2FkZWRCeUlkOiB2YWxpZGF0ZWREYXRhLnVwbG9hZGVkQnlJZCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBkb2N1bWVudCA9IGF3YWl0IHN0b3JhZ2UuY3JlYXRlRG9jdW1lbnQodW5pZmllZERvY3VtZW50KSA7XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgdGVtcG9yYXJ5IGZpbGUgYWZ0ZXIgc3VjY2Vzc2Z1bCB1cGxvYWRcbiAgICAgICAgaWYgKHJlcS5maWxlPy5wYXRoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XG4gICAgICAgICAgfSBjYXRjaCAoY2xlYW51cEVycm9yKSB7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgICAgIC4uLmRvY3VtZW50LFxuICAgICAgICAgIGRvY3VtZW50Q2F0ZWdvcnk6ICdidWlsZGluZycsXG4gICAgICAgICAgZW50aXR5VHlwZTogJ2J1aWxkaW5nJyxcbiAgICAgICAgICBlbnRpdHlJZDogZG9jdW1lbnQuYnVpbGRpbmdJZCxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGZpbmFsRG9jdW1lbnRSZWNvcmRUeXBlID09PSAncmVzaWRlbnQnKSB7XG4gICAgICAgIC8vIFZhbGlkYXRlIGFuZCBjcmVhdGUgcmVzaWRlbnQgZG9jdW1lbnRcbiAgICAgICAgaWYgKCFyZXNpZGVuY2VJZCkge1xuICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIC5zdGF0dXMoNDAwKVxuICAgICAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAncmVzaWRlbmNlSWQgaXMgcmVxdWlyZWQgZm9yIHJlc2lkZW50IGRvY3VtZW50cycgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gY3JlYXRlUmVzaWRlbnREb2N1bWVudFNjaGVtYS5wYXJzZSh7XG4gICAgICAgICAgLi4ub3RoZXJEYXRhLFxuICAgICAgICAgIHJlc2lkZW5jZUlkLFxuICAgICAgICAgIHVwbG9hZGVkQnlJZDogdXNlcklkLFxuICAgICAgICAgIGZpbGVQYXRoOiByZXEuZmlsZSA/IHJlcS5maWxlLnBhdGggOiB1bmRlZmluZWQsXG4gICAgICAgICAgLy8gZmlsZU5hbWUgaXMgaGFuZGxlZCB2aWEgbmFtZSBmaWVsZFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQZXJtaXNzaW9uIGNoZWNrcyBmb3IgcmVzaWRlbnQgZG9jdW1lbnRzXG4gICAgICAgIGlmICh1c2VyUm9sZSA9PT0gJ21hbmFnZXInKSB7XG4gICAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlck9yZ2FuaXphdGlvbnModXNlcklkKTtcbiAgICAgICAgICBjb25zdCBvcmdhbml6YXRpb25JZCA9XG4gICAgICAgICAgICBvcmdhbml6YXRpb25zLmxlbmd0aCA+IDAgPyBvcmdhbml6YXRpb25zWzBdLm9yZ2FuaXphdGlvbklkIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGNvbnN0IHJlc2lkZW5jZSA9IGF3YWl0IHN0b3JhZ2UuZ2V0UmVzaWRlbmNlKHJlc2lkZW5jZUlkKTtcbiAgICAgICAgICBpZiAocmVzaWRlbmNlKSB7XG4gICAgICAgICAgICBjb25zdCBidWlsZGluZyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmcocmVzaWRlbmNlLmJ1aWxkaW5nSWQpO1xuICAgICAgICAgICAgaWYgKCFidWlsZGluZyB8fCBidWlsZGluZy5vcmdhbml6YXRpb25JZCAhPT0gb3JnYW5pemF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgICAgIC5zdGF0dXMoNDAzKVxuICAgICAgICAgICAgICAgIC5qc29uKHsgbWVzc2FnZTogJ0Nhbm5vdCBhc3NpZ24gZG9jdW1lbnQgdG8gcmVzaWRlbmNlIG91dHNpZGUgeW91ciBvcmdhbml6YXRpb24nIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnUmVzaWRlbmNlIG5vdCBmb3VuZCcgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXJSb2xlID09PSAncmVzaWRlbnQnKSB7XG4gICAgICAgICAgY29uc3QgcmVzaWRlbmNlcyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlclJlc2lkZW5jZXModXNlcklkKTtcbiAgICAgICAgICBjb25zdCByZXNpZGVuY2VJZHMgPSByZXNpZGVuY2VzLm1hcCgodXIpID0+IHVyLnJlc2lkZW5jZUlkKTtcblxuICAgICAgICAgIGlmICghcmVzaWRlbmNlSWRzLmluY2x1ZGVzKHJlc2lkZW5jZUlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgICAuc3RhdHVzKDQwMylcbiAgICAgICAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnQ2Fubm90IGFzc2lnbiBkb2N1bWVudCB0byByZXNpZGVuY2UgeW91IGRvIG5vdCBvd24nIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgdG8gdW5pZmllZCBkb2N1bWVudCBmb3JtYXRcbiAgICAgICAgY29uc3QgdW5pZmllZERvY3VtZW50OiBJbnNlcnREb2N1bWVudCA9IHtcbiAgICAgICAgICBuYW1lOiB2YWxpZGF0ZWREYXRhLm5hbWUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICBkb2N1bWVudFR5cGU6IHZhbGlkYXRlZERhdGEudHlwZSxcbiAgICAgICAgICBmaWxlUGF0aDogdmFsaWRhdGVkRGF0YS5maWxlUGF0aCB8fCBgdGVtcC1wYXRoLSR7RGF0ZS5ub3coKX1gLFxuICAgICAgICAgIGlzVmlzaWJsZVRvVGVuYW50czogdmFsaWRhdGVkRGF0YS5pc1Zpc2libGVUb1RlbmFudHMsXG4gICAgICAgICAgcmVzaWRlbmNlSWQ6IHZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWQsXG4gICAgICAgICAgYnVpbGRpbmdJZDogdW5kZWZpbmVkLFxuICAgICAgICAgIHVwbG9hZGVkQnlJZDogdmFsaWRhdGVkRGF0YS51cGxvYWRlZEJ5SWQsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBhd2FpdCBzdG9yYWdlLmNyZWF0ZURvY3VtZW50KHVuaWZpZWREb2N1bWVudCkgO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OdIENyZWF0ZWQgcmVzaWRlbnQgZG9jdW1lbnQ6JywgZG9jdW1lbnQpO1xuICAgICAgICBjb25zb2xlLmxvZygn8J+TnSBEb2N1bWVudFJlY29yZCBJRDonLCBkb2N1bWVudC5pZCk7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgLi4uZG9jdW1lbnQsXG4gICAgICAgICAgZG9jdW1lbnRDYXRlZ29yeTogJ3Jlc2lkZW50JyxcbiAgICAgICAgICBlbnRpdHlUeXBlOiAncmVzaWRlbmNlJyxcbiAgICAgICAgICBlbnRpdHlJZDogZG9jdW1lbnQucmVzaWRlbmNlSWQsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk6QgU2VuZGluZyByZXNwb25zZTonLCByZXNwb25zZSk7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHJlc3BvbnNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgZG9jdW1lbnRUeXBlLiBNdXN0IGJlIGVpdGhlciBcXFwiYnVpbGRpbmdcXFwiIG9yIFxcXCJyZXNpZGVudFxcXCInLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChfZXJyb3I6IGFueSkge1xuICAgICAgLy8gQ2xlYW4gdXAgdGVtcG9yYXJ5IGZpbGUgb24gZXJyb3JcbiAgICAgIGlmIChyZXEuZmlsZT8ucGF0aCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGNsZWFudXBFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2Fybign4pqg77iPIEZhaWxlZCB0byBjbGVhbnVwIHRlbXBvcmFyeSBmaWxlOicsIGNsZWFudXBFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGNyZWF0aW5nIGRvY3VtZW50OicsIF9lcnJvcik7XG4gICAgICBcbiAgICAgIGlmIChfZXJyb3IgaW5zdGFuY2VvZiB6LlpvZEVycm9yKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgZG9jdW1lbnQgZGF0YScsXG4gICAgICAgICAgZXJyb3JzOiBfZXJyb3IuaXNzdWVzLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIGNyZWF0ZSBkb2N1bWVudCcgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBVcGRhdGUgYSBkb2N1bWVudFxuICBhcHAucHV0KCcvYXBpL2RvY3VtZW50cy86aWQnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyO1xuICAgICAgY29uc3QgdXNlclJvbGUgPSB1c2VyLnJvbGU7XG4gICAgICBjb25zdCB1c2VySWQgPSB1c2VyLmlkO1xuICAgICAgY29uc3QgZG9jdW1lbnRJZCA9IHJlcS5wYXJhbXMuaWQ7XG4gICAgICBjb25zdCBkb2N1bWVudFR5cGUgPSByZXEucXVlcnkudHlwZSBhcyBzdHJpbmc7IC8vIE9wdGlvbmFsIHR5cGUgaGludFxuXG4gICAgICAvLyBHZXQgdXNlcidzIG9yZ2FuaXphdGlvbiBmb3IgcGVybWlzc2lvbiBjaGVja2luZ1xuICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlck9yZ2FuaXphdGlvbnModXNlcklkKTtcbiAgICAgIGNvbnN0IHJlc2lkZW5jZXMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJSZXNpZGVuY2VzKHVzZXJJZCk7XG4gICAgICBjb25zdCBidWlsZGluZ3MgPSBhd2FpdCBzdG9yYWdlLmdldEJ1aWxkaW5ncygpO1xuXG4gICAgICBjb25zdCBvcmdhbml6YXRpb25JZCA9IG9yZ2FuaXphdGlvbnMubGVuZ3RoID4gMCA/IG9yZ2FuaXphdGlvbnNbMF0ub3JnYW5pemF0aW9uSWQgOiB1bmRlZmluZWQ7XG4gICAgICBjb25zdCByZXNpZGVuY2VJZHMgPSByZXNpZGVuY2VzLm1hcCgodXIpID0+IHVyLnJlc2lkZW5jZUlkKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5nSWRzID0gYnVpbGRpbmdzLm1hcCgoYikgPT4gYi5pZCk7XG5cbiAgICAgIC8vIFVzZSB1bmlmaWVkIGRvY3VtZW50cyBzeXN0ZW0gZm9yIHVwZGF0ZXNcbiAgICAgIGxldCB1cGRhdGVkRG9jdW1lbnQ6IHVua25vd24gPSBudWxsO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gY3JlYXRlRG9jdW1lbnRTY2hlbWEucGFydGlhbCgpLnBhcnNlKHJlcS5ib2R5KTtcbiAgICAgICAgdXBkYXRlZERvY3VtZW50ID0gYXdhaXQgc3RvcmFnZS51cGRhdGVEb2N1bWVudChkb2N1bWVudElkLCB2YWxpZGF0ZWREYXRhKTtcblxuICAgICAgICBpZiAodXBkYXRlZERvY3VtZW50KSB7XG4gICAgICAgICAgLy8gQWRkIGNvbXBhdGliaWxpdHkgZmllbGRzIGZvciBmcm9udGVuZFxuICAgICAgICAgICh1cGRhdGVkRG9jdW1lbnQgYXMgYW55KS5kb2N1bWVudENhdGVnb3J5ID0gKHVwZGF0ZWREb2N1bWVudCBhcyBhbnkpLmJ1aWxkaW5nSWQgPyAnYnVpbGRpbmcnIDogJ3Jlc2lkZW50JztcbiAgICAgICAgICAodXBkYXRlZERvY3VtZW50IGFzIGFueSkuZW50aXR5VHlwZSA9ICh1cGRhdGVkRG9jdW1lbnQgYXMgYW55KS5idWlsZGluZ0lkID8gJ2J1aWxkaW5nJyA6ICdyZXNpZGVuY2UnO1xuICAgICAgICAgICh1cGRhdGVkRG9jdW1lbnQgYXMgYW55KS5lbnRpdHlJZCA9ICh1cGRhdGVkRG9jdW1lbnQgYXMgYW55KS5idWlsZGluZ0lkIHx8ICh1cGRhdGVkRG9jdW1lbnQgYXMgYW55KS5yZXNpZGVuY2VJZDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBFcnJvciBpbiBkb2N1bWVudCB1cGRhdGU6JywgZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXBkYXRlZERvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdEb2N1bWVudFJlY29yZCBub3QgZm91bmQgb3IgYWNjZXNzIGRlbmllZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKHVwZGF0ZWREb2N1bWVudCk7XG4gICAgfSBjYXRjaCAoX2Vycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciB1cGRhdGluZyBkb2N1bWVudDonLCBfZXJyb3IpO1xuICAgICAgXG4gICAgICBpZiAoX2Vycm9yIGluc3RhbmNlb2Ygei5ab2RFcnJvcikge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGRvY3VtZW50IGRhdGEnLFxuICAgICAgICAgIGVycm9yczogX2Vycm9yLmlzc3VlcyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgZG9jdW1lbnQnIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gRGVsZXRlIGEgZG9jdW1lbnRcbiAgYXBwLmRlbGV0ZSgnL2FwaS9kb2N1bWVudHMvOmlkJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IHVzZXJSb2xlID0gdXNlci5yb2xlO1xuICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgIGNvbnN0IGRvY3VtZW50SWQgPSByZXEucGFyYW1zLmlkO1xuICAgICAgY29uc3QgZG9jdW1lbnRUeXBlID0gcmVxLnF1ZXJ5LnR5cGUgYXMgc3RyaW5nOyAvLyBPcHRpb25hbCB0eXBlIGhpbnRcblxuICAgICAgLy8gR2V0IHVzZXIncyBvcmdhbml6YXRpb24gZm9yIHBlcm1pc3Npb24gY2hlY2tpbmdcbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbnMgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJPcmdhbml6YXRpb25zKHVzZXJJZCk7XG4gICAgICBjb25zdCBvcmdhbml6YXRpb25JZCA9IG9yZ2FuaXphdGlvbnMubGVuZ3RoID4gMCA/IG9yZ2FuaXphdGlvbnNbMF0ub3JnYW5pemF0aW9uSWQgOiB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIFVzZSB1bmlmaWVkIGRvY3VtZW50cyBzeXN0ZW0gZm9yIGRlbGV0aW9uXG4gICAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICBkZWxldGVkID0gYXdhaXQgc3RvcmFnZS5kZWxldGVEb2N1bWVudChkb2N1bWVudElkKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gRXJyb3IgZGVsZXRpbmcgZG9jdW1lbnQ6JywgZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZGVsZXRlZCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnRG9jdW1lbnRSZWNvcmQgbm90IGZvdW5kIG9yIGFjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICByZXMuc3RhdHVzKDIwNCkuc2VuZCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBpbiBkb2N1bWVudCBkZWxldGlvbjonLCBlcnJvcik7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gZGVsZXRlIGRvY3VtZW50JyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVwbG9hZCBlbmRwb2ludCB0aGF0IG1hdGNoZXMgZnJvbnRlbmQgZXhwZWN0YXRpb246IC9hcGkvZG9jdW1lbnRzLzppZC91cGxvYWRcbiAgYXBwLnBvc3QoXG4gICAgJy9hcGkvZG9jdW1lbnRzLzppZC91cGxvYWQnLFxuICAgIHJlcXVpcmVBdXRoLFxuICAgIHVwbG9hZC5zaW5nbGUoJ2ZpbGUnKSxcbiAgICBhc3luYyAocmVxOiBhbnksIHJlcykgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyO1xuICAgICAgICBjb25zdCB1c2VyUm9sZSA9IHVzZXIucm9sZTtcbiAgICAgICAgY29uc3QgdXNlcklkID0gdXNlci5pZDtcbiAgICAgICAgY29uc3QgZG9jdW1lbnRJZCA9IHJlcS5wYXJhbXMuaWQ7IC8vIFRoZSA6aWQgaW4gdGhlIFVSTCBpcyB0aGUgZG9jdW1lbnQgSUQgKGZyb20gZnJvbnRlbmQpXG4gICAgICAgIGNvbnN0IHsgZG9jdW1lbnRUeXBlID0gJ3Jlc2lkZW50JywgcmVzaWRlbmNlSWQsIC4uLm90aGVyRGF0YSB9ID0gcmVxLmJvZHk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk6QgVXBsb2FkIHJlcXVlc3QgcmVjZWl2ZWQ6Jywge1xuICAgICAgICAgIGRvY3VtZW50SWQsXG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHVzZXJSb2xlLFxuICAgICAgICAgIGhhc0ZpbGU6ICEhcmVxLmZpbGUsXG4gICAgICAgICAgZmlsZUluZm86IHJlcS5maWxlXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBmaWVsZG5hbWU6IHJlcS5maWxlLmZpZWxkbmFtZSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbG5hbWU6IHJlcS5maWxlLm9yaWdpbmFsbmFtZSxcbiAgICAgICAgICAgICAgICBlbmNvZGluZzogcmVxLmZpbGUuZW5jb2RpbmcsXG4gICAgICAgICAgICAgICAgbWltZXR5cGU6IHJlcS5maWxlLm1pbWV0eXBlLFxuICAgICAgICAgICAgICAgIHNpemU6IHJlcS5maWxlLnNpemUsXG4gICAgICAgICAgICAgICAgcGF0aDogcmVxLmZpbGUucGF0aCxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgIGJvZHlLZXlzOiBPYmplY3Qua2V5cyhyZXEuYm9keSksXG4gICAgICAgICAgY29udGVudFR5cGU6IHJlcS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgcGVybWlzc2lvbnMgLSBvbmx5IGFkbWluLCBtYW5hZ2VyLCBhbmQgcmVzaWRlbnQgY2FuIGNyZWF0ZSBkb2N1bWVudHNcbiAgICAgICAgaWYgKCFbJ2FkbWluJywgJ21hbmFnZXInLCAncmVzaWRlbnQnXS5pbmNsdWRlcyh1c2VyUm9sZSkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zIHRvIGNyZWF0ZSBkb2N1bWVudHMnIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZXEuZmlsZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBObyBmaWxlIHJlY2VpdmVkIGluIHVwbG9hZCByZXF1ZXN0Jyk7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0ZpbGUgaXMgcmVxdWlyZWQgZm9yIHVwbG9hZCcgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGV4aXN0aW5nIGRvY3VtZW50IHRvIGRldGVybWluZSB3aGVyZSB0byBzdG9yZSB0aGUgZmlsZVxuICAgICAgICBjb25zdCBkb2N1bWVudHMgPSBhd2FpdCBzdG9yYWdlLmdldERvY3VtZW50cyh7XG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHVzZXJSb2xlLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBleGlzdGluZ0RvY3VtZW50ID0gZG9jdW1lbnRzLmZpbmQoKGRvYykgPT4gZG9jLmlkID09PSBkb2N1bWVudElkKTtcblxuICAgICAgICBpZiAoIWV4aXN0aW5nRG9jdW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnRG9jdW1lbnRSZWNvcmQgbm90IGZvdW5kJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbGUgdmFsaWRhdGlvbiBwYXNzZWQgLSBmaWxlIGV4aXN0cyBhbmQgaXMgcmVhZHkgZm9yIHVwbG9hZFxuXG4gICAgICAgIC8vIERldGVybWluZSBvcmdhbml6YXRpb24gSUQgYmFzZWQgb24gZG9jdW1lbnQgY29udGV4dFxuICAgICAgICBsZXQgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcblxuICAgICAgICBpZiAoZXhpc3RpbmdEb2N1bWVudC5idWlsZGluZ0lkKSB7XG4gICAgICAgICAgY29uc3QgYnVpbGRpbmcgPSBhd2FpdCBzdG9yYWdlLmdldEJ1aWxkaW5nKGV4aXN0aW5nRG9jdW1lbnQuYnVpbGRpbmdJZCk7XG4gICAgICAgICAgaWYgKCFidWlsZGluZykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0J1aWxkaW5nIG5vdCBmb3VuZCcgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9yZ2FuaXphdGlvbklkID0gYnVpbGRpbmcub3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdEb2N1bWVudC5yZXNpZGVuY2VJZCkge1xuICAgICAgICAgIGNvbnN0IHJlc2lkZW5jZSA9IGF3YWl0IHN0b3JhZ2UuZ2V0UmVzaWRlbmNlKGV4aXN0aW5nRG9jdW1lbnQucmVzaWRlbmNlSWQpO1xuICAgICAgICAgIGlmICghcmVzaWRlbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnUmVzaWRlbmNlIG5vdCBmb3VuZCcgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gYXdhaXQgc3RvcmFnZS5nZXRCdWlsZGluZyhyZXNpZGVuY2UuYnVpbGRpbmdJZCk7XG4gICAgICAgICAgaWYgKCFidWlsZGluZykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0J1aWxkaW5nIG5vdCBmb3VuZCcgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9yZ2FuaXphdGlvbklkID0gYnVpbGRpbmcub3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICAgICAgLnN0YXR1cyg0MDApXG4gICAgICAgICAgICAuanNvbih7IG1lc3NhZ2U6ICdEb2N1bWVudFJlY29yZCBtdXN0IGJlIGFzc29jaWF0ZWQgd2l0aCBhIGJ1aWxkaW5nIG9yIHJlc2lkZW5jZScgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3RlOiBGaWxlIHVwbG9hZCB0byBleHRlcm5hbCBzdG9yYWdlIHJlbW92ZWRcblxuICAgICAgICAvLyBVcGRhdGUgZG9jdW1lbnQgd2l0aCBmaWxlIGluZm9ybWF0aW9uXG4gICAgICAgIGNvbnN0IHVwZGF0ZWREb2N1bWVudCA9IGF3YWl0IHN0b3JhZ2UudXBkYXRlRG9jdW1lbnQoZG9jdW1lbnRJZCwge1xuICAgICAgICAgIGZpbGVQYXRoOiBgcHJvZF9vcmdfJHtvcmdhbml6YXRpb25JZH0vJHtyZXEuZmlsZS5vcmlnaW5hbG5hbWV9YCxcbiAgICAgICAgICBuYW1lOiByZXEuZmlsZS5vcmlnaW5hbG5hbWUsXG4gICAgICAgICAgLy8gUmVtb3ZlIG1pbWVUeXBlIGFzIGl0J3Mgbm90IGluIHNjaGVtYVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZVxuICAgICAgICBpZiAocmVxLmZpbGUgJiYgcmVxLmZpbGUucGF0aCAmJiBmcy5leGlzdHNTeW5jKHJlcS5maWxlLnBhdGgpKSB7XG4gICAgICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgICBkb2N1bWVudDogdXBkYXRlZERvY3VtZW50LFxuICAgICAgICAgIG1lc3NhZ2U6ICdGaWxlIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zdCBlcnJvclRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihgWyR7ZXJyb3JUaW1lc3RhbXB9XSBFcnJvciB0eXBlOmAsIGVycm9yLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbJHtlcnJvclRpbWVzdGFtcH1dIEVycm9yIG1lc3NhZ2U6YCwgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFske2Vycm9yVGltZXN0YW1wfV0gRXJyb3Igc3RhY2s6YCwgZXJyb3Iuc3RhY2spO1xuXG4gICAgICAgIC8vIENsZWFuIHVwIHRlbXBvcmFyeSBmaWxlIG9uIGVycm9yXG4gICAgICAgIGlmIChyZXEuZmlsZSAmJiByZXEuZmlsZS5wYXRoICYmIGZzLmV4aXN0c1N5bmMocmVxLmZpbGUucGF0aCkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcbiAgICAgICAgICB9IGNhdGNoIChjbGVhbnVwRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFske2Vycm9yVGltZXN0YW1wfV0gRXJyb3IgY2xlYW5pbmcgdXAgZmlsZTpgLCBjbGVhbnVwRXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvci5uYW1lID09PSAnWm9kRXJyb3InKSB7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdWYWxpZGF0aW9uIGVycm9yJyxcbiAgICAgICAgICAgIGVycm9yczogZXJyb3IuZXJyb3JzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIHVwbG9hZCBkb2N1bWVudCcgfSk7XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIC8vIFBPU1QgL2FwaS9kb2N1bWVudHMvdXBsb2FkIC0gVXBsb2FkIGZpbGUgdG8gR0NTIGFuZCBjcmVhdGUgdW5pZmllZCBkb2N1bWVudCByZWNvcmRcbiAgYXBwLnBvc3QoJy9hcGkvZG9jdW1lbnRzL3VwbG9hZCcsIHJlcXVpcmVBdXRoLCB1cGxvYWQuc2luZ2xlKCdmaWxlJyksIGFzeW5jIChyZXE6IGFueSwgcmVzKSA9PiB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDwn5OLIFBPU1QgL2FwaS9kb2N1bWVudHMvdXBsb2FkIC0gU3RhcnRpbmcgdXBsb2FkYCwge1xuICAgICAgaGFzRmlsZTogISFyZXEuZmlsZSxcbiAgICAgIGZpbGVOYW1lOiByZXEuZmlsZT8ub3JpZ2luYWxuYW1lLFxuICAgICAgZmlsZVNpemU6IHJlcS5maWxlPy5zaXplLFxuICAgICAgYm9keTogcmVxLmJvZHksXG4gICAgICB1c2VySWQ6IHJlcS51c2VyPy5pZFxuICAgIH0pO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIGZpbGUgd2FzIHVwbG9hZGVkXG4gICAgICBpZiAoIXJlcS5maWxlKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdObyBmaWxlIHVwbG9hZGVkJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gUGFyc2UgZm9ybSBkYXRhXG4gICAgICBjb25zdCBmb3JtRGF0YSA9IHtcbiAgICAgICAgbmFtZTogcmVxLmJvZHkubmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHJlcS5ib2R5LmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgICBkb2N1bWVudFR5cGU6IHJlcS5ib2R5LmRvY3VtZW50VHlwZSB8fCByZXEuYm9keS50eXBlLCAvLyBIYW5kbGUgYm90aCBmaWVsZCBuYW1lc1xuICAgICAgICBpc1Zpc2libGVUb1RlbmFudHM6IHJlcS5ib2R5LmlzVmlzaWJsZVRvVGVuYW50cyA9PT0gJ3RydWUnLFxuICAgICAgICByZXNpZGVuY2VJZDogcmVxLmJvZHkucmVzaWRlbmNlSWQgfHwgdW5kZWZpbmVkLFxuICAgICAgICBidWlsZGluZ0lkOiByZXEuYm9keS5idWlsZGluZ0lkIHx8IHVuZGVmaW5lZCxcbiAgICAgIH07XG5cbiAgICAgIC8vIFByb2R1Y3Rpb24gZGVidWdnaW5nOiBMb2cgZm9ybSBkYXRhIGJlZm9yZSB2YWxpZGF0aW9uXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1BST0QgREVCVUddIEZvcm0gZGF0YSBiZWZvcmUgdmFsaWRhdGlvbjonLCBmb3JtRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIGZvcm0gZGF0YVxuICAgICAgY29uc3QgdmFsaWRhdGVkRGF0YSA9IHVwbG9hZERvY3VtZW50UmVjb3JkU2NoZW1hLnBhcnNlKGZvcm1EYXRhKTtcbiAgICAgIFxuICAgICAgLy8gUHJvZHVjdGlvbiBkZWJ1Z2dpbmc6IExvZyBhZnRlciB2YWxpZGF0aW9uXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1BST0QgREVCVUddIEZvcm0gZGF0YSB2YWxpZGF0aW9uIHBhc3NlZDonLCB2YWxpZGF0ZWREYXRhKTtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHVzZXIgaW5mbyBmcm9tIGF1dGggbWlkZGxld2FyZVxuICAgICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXI/LmlkO1xuICAgICAgaWYgKCF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ1VzZXIgbm90IGF1dGhlbnRpY2F0ZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHQ1MgRElTQUJMRUQ6IFNraXAgYnVja2V0IGNvbmZpZ3VyYXRpb24gKHVzaW5nIGxvY2FsIHN0b3JhZ2Ugb25seSlcbiAgICAgIGNvbnNvbGUubG9nKCfwn5OBIEdDUyBkaXNhYmxlZCAtIHNraXBwaW5nIGJ1Y2tldCBjb25maWd1cmF0aW9uIGNoZWNrJyk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSBHQ1MgcGF0aFxuICAgICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IHBhdGguZXh0bmFtZShyZXEuZmlsZS5vcmlnaW5hbG5hbWUpO1xuICAgICAgY29uc3QgYmFzZUZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShyZXEuZmlsZS5vcmlnaW5hbG5hbWUsIGZpbGVFeHRlbnNpb24pO1xuICAgICAgY29uc3QgdW5pcXVlRmlsZU5hbWUgPSBgJHt1dWlkdjQoKX0tJHtiYXNlRmlsZU5hbWV9JHtmaWxlRXh0ZW5zaW9ufWA7XG5cbiAgICAgIGxldCBmaWxlUGF0aDogc3RyaW5nO1xuICAgICAgaWYgKHZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWQpIHtcbiAgICAgICAgZmlsZVBhdGggPSBgcmVzaWRlbmNlcy8ke3ZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWR9LyR7dW5pcXVlRmlsZU5hbWV9YDtcbiAgICAgIH0gZWxzZSBpZiAodmFsaWRhdGVkRGF0YS5idWlsZGluZ0lkKSB7XG4gICAgICAgIGZpbGVQYXRoID0gYGJ1aWxkaW5ncy8ke3ZhbGlkYXRlZERhdGEuYnVpbGRpbmdJZH0vJHt1bmlxdWVGaWxlTmFtZX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsZVBhdGggPSBgZ2VuZXJhbC8ke3VuaXF1ZUZpbGVOYW1lfWA7XG4gICAgICB9XG5cbiAgICAgIC8vIERJU0FCTEVEIEdDUzogRm9yY2UgbG9jYWwgc3RvcmFnZSBmb3IgYWxsIGVudmlyb25tZW50c1xuICAgICAgY29uc29sZS5sb2coJ/Cfk4EgR0NTIGRpc2FibGVkIC0gdXNpbmcgbG9jYWwgc3RvcmFnZSBmb3IgYWxsIGRvY3VtZW50IG9wZXJhdGlvbnMnKTtcbiAgICAgIFxuICAgICAgLy8gQWx3YXlzIHVzZSBsb2NhbCBzdG9yYWdlIChHQ1MgZGlzYWJsZWQpXG4gICAgICB0cnkge1xuICAgICAgICAvLyBVc2UgbG9jYWwgc3RvcmFnZSB3aXRoIHJvYnVzdCBlcnJvciBoYW5kbGluZ1xuICAgICAgICBjb25zdCBsb2NhbFN0b3JhZ2VQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd1cGxvYWRzJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBFbnN1cmUgdXBsb2FkcyBkaXJlY3RvcnkgZXhpc3RzXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGxvY2FsU3RvcmFnZVBhdGgpKSB7XG4gICAgICAgICAgICBmcy5ta2RpclN5bmMobG9jYWxTdG9yYWdlUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TgSBDcmVhdGVkIHVwbG9hZHMgZGlyZWN0b3J5OiAke2xvY2FsU3RvcmFnZVBhdGh9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChkaXJFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdXBsb2FkcyBkaXJlY3Rvcnk6JywgZGlyRXJyb3IpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSB1cGxvYWRzIGRpcmVjdG9yeSAtIGNoZWNrIHBlcm1pc3Npb25zJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgZGlyZWN0b3J5IHN0cnVjdHVyZSBmb3IgZmlsZVxuICAgICAgICBjb25zdCBsb2NhbEZpbGVQYXRoID0gcGF0aC5qb2luKGxvY2FsU3RvcmFnZVBhdGgsIGZpbGVQYXRoKTtcbiAgICAgICAgY29uc3QgbG9jYWxGaWxlRGlyID0gcGF0aC5kaXJuYW1lKGxvY2FsRmlsZVBhdGgpO1xuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMobG9jYWxGaWxlRGlyKSkge1xuICAgICAgICAgICAgZnMubWtkaXJTeW5jKGxvY2FsRmlsZURpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TgSBDcmVhdGVkIHN1YmRpcmVjdG9yeTogJHtsb2NhbEZpbGVEaXJ9YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChzdWJkaXJFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgZmlsZSBzdWJkaXJlY3Rvcnk6Jywgc3ViZGlyRXJyb3IpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNyZWF0ZSBmaWxlIGRpcmVjdG9yeSAtIGNoZWNrIHBlcm1pc3Npb25zJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb3B5IHVwbG9hZGVkIGZpbGUgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGZzLmNvcHlGaWxlU3luYyhyZXEuZmlsZSEucGF0aCwgbG9jYWxGaWxlUGF0aCk7XG4gICAgICAgICAgY29uc29sZS5sb2coYPCfk4EgRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkgYXQgJHtsb2NhbEZpbGVQYXRofWApO1xuICAgICAgICB9IGNhdGNoIChjb3B5RXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29weSBmaWxlOicsIGNvcHlFcnJvcik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2F2ZSBmaWxlIC0gY2hlY2sgZGlzayBzcGFjZSBhbmQgcGVybWlzc2lvbnMnKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAobG9jYWxFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdMb2NhbCBzdG9yYWdlIGVycm9yOicsIGxvY2FsRXJyb3IpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGZpbGUgbG9jYWxseScpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgZG9jdW1lbnQgcmVjb3JkIGluIGRhdGFiYXNlXG4gICAgICBjb25zdCBkb2N1bWVudERhdGE6IEluc2VydERvY3VtZW50ID0ge1xuICAgICAgICBuYW1lOiB2YWxpZGF0ZWREYXRhLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB2YWxpZGF0ZWREYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICBkb2N1bWVudFR5cGU6IHZhbGlkYXRlZERhdGEuZG9jdW1lbnRUeXBlLFxuICAgICAgICBmaWxlUGF0aDogZmlsZVBhdGgsXG4gICAgICAgIGlzVmlzaWJsZVRvVGVuYW50czogdmFsaWRhdGVkRGF0YS5pc1Zpc2libGVUb1RlbmFudHMsXG4gICAgICAgIHJlc2lkZW5jZUlkOiB2YWxpZGF0ZWREYXRhLnJlc2lkZW5jZUlkLFxuICAgICAgICBidWlsZGluZ0lkOiB2YWxpZGF0ZWREYXRhLmJ1aWxkaW5nSWQsXG4gICAgICAgIHVwbG9hZGVkQnlJZDogdXNlcklkLFxuICAgICAgfTtcblxuICAgICAgLy8gQ1JJVElDQUwgREVCVUcgUE9JTlQ6IERhdGFiYXNlIGNyZWF0aW9uXG4gICAgICBjb25zb2xlLmxvZyhgWyR7dGltZXN0YW1wfV0g8J+OryBDUklUSUNBTDogQWJvdXQgdG8gY3JlYXRlIGRvY3VtZW50IGluIGRhdGFiYXNlOmAsIHtcbiAgICAgICAgbmFtZTogZG9jdW1lbnREYXRhLm5hbWUsXG4gICAgICAgIHR5cGU6IGRvY3VtZW50RGF0YS5kb2N1bWVudFR5cGUsXG4gICAgICAgIGJ1aWxkaW5nSWQ6IGRvY3VtZW50RGF0YS5idWlsZGluZ0lkLFxuICAgICAgICByZXNpZGVuY2VJZDogZG9jdW1lbnREYXRhLnJlc2lkZW5jZUlkLFxuICAgICAgICB1cGxvYWRlZEJ5SWQ6IGRvY3VtZW50RGF0YS51cGxvYWRlZEJ5SWRcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgZG9jdW1lbnQgcmVjb3JkIGluIGRhdGFiYXNlICBcbiAgICAgIGNvbnN0IG5ld0RvY3VtZW50ID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVEb2N1bWVudChkb2N1bWVudERhdGEpO1xuICAgICAgXG4gICAgICAvLyBDUklUSUNBTDogTG9nIHN1Y2Nlc3NmdWwgZGF0YWJhc2UgY3JlYXRpb25cbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0aW1lc3RhbXB9XSDinIUgQ1JJVElDQUw6IERvY3VtZW50UmVjb3JkIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5OmAsIHsgXG4gICAgICAgIGlkOiBuZXdEb2N1bWVudD8uaWQsIFxuICAgICAgICBuYW1lOiBuZXdEb2N1bWVudD8ubmFtZSxcbiAgICAgICAgZmlsZVBhdGg6IG5ld0RvY3VtZW50Py5maWxlUGF0aCBcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZVxuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMocmVxLmZpbGUucGF0aCkpIHtcbiAgICAgICAgZnMudW5saW5rU3luYyhyZXEuZmlsZS5wYXRoKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHN1Y2Nlc3MgcmVzcG9uc2VcbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0RvY3VtZW50UmVjb3JkIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgIGRvY3VtZW50OiBuZXdEb2N1bWVudCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnN0IGVycm9yRW50cnkgPSBsb2dFcnJvcignUE9TVCAvYXBpL2RvY3VtZW50cy91cGxvYWQnLCBlcnJvciwgcmVxLnVzZXIpO1xuXG4gICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZSBvbiBlcnJvclxuICAgICAgaWYgKHJlcS5maWxlICYmIHJlcS5maWxlLnBhdGggJiYgZnMuZXhpc3RzU3luYyhyZXEuZmlsZS5wYXRoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZzLnVubGlua1N5bmMocmVxLmZpbGUucGF0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGNsZWFudXBFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFuaW5nIHVwIHRlbXBvcmFyeSBmaWxlOicsIGNsZWFudXBFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIHZhbGlkYXRpb24gZXJyb3JzXG4gICAgICBpZiAoZXJyb3IubmFtZSA9PT0gJ1pvZEVycm9yJykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdWYWxpZGF0aW9uIGVycm9yJyxcbiAgICAgICAgICBlcnJvcnM6IGVycm9yLmVycm9ycyxcbiAgICAgICAgICBlcnJvcl9pZDogZXJyb3JFbnRyeS50aW1lc3RhbXBcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBHQ1MgZXJyb3JzXG4gICAgICBpZiAoZXJyb3IubWVzc2FnZSAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdHb29nbGUgQ2xvdWQgU3RvcmFnZScpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ZpbGUgdXBsb2FkIGZhaWxlZCcsXG4gICAgICAgICAgZXJyb3I6ICdTdG9yYWdlIHNlcnZpY2UgZXJyb3InLFxuICAgICAgICAgIGVycm9yX2lkOiBlcnJvckVudHJ5LnRpbWVzdGFtcFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSGFuZGxlIHVuaXF1ZSBjb25zdHJhaW50IHZpb2xhdGlvbnMgKHBhdGggY29uZmxpY3RzKVxuICAgICAgaWYgKGVycm9yPy5tZXNzYWdlPy5pbmNsdWRlcygndW5pcXVlIGNvbnN0cmFpbnQnKSB8fCBlcnJvcj8uY29kZSA9PT0gJzIzNTA1Jykge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDkpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdEb2N1bWVudFJlY29yZCBwYXRoIGNvbmZsaWN0IC0gcGxlYXNlIHRyeSB1cGxvYWRpbmcgYWdhaW4nLFxuICAgICAgICAgIGVycm9yOiAnUGF0aCBhbHJlYWR5IGV4aXN0cycsXG4gICAgICAgICAgZXJyb3JfaWQ6IGVycm9yRW50cnkudGltZXN0YW1wXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBIYW5kbGUgZGF0YWJhc2UgZXJyb3JzXG4gICAgICBpZiAoZXJyb3IubWVzc2FnZSAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdkYXRhYmFzZScpKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBzYXZlIGRvY3VtZW50IHJlY29yZCcsXG4gICAgICAgICAgZXJyb3I6ICdEYXRhYmFzZSBlcnJvcicsXG4gICAgICAgICAgZXJyb3JfaWQ6IGVycm9yRW50cnkudGltZXN0YW1wXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmljIGVycm9yIHJlc3BvbnNlXG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICBlcnJvcjogJ0RvY3VtZW50UmVjb3JkIHVwbG9hZCBmYWlsZWQnLFxuICAgICAgICBlcnJvcl9pZDogZXJyb3JFbnRyeS50aW1lc3RhbXAsXG4gICAgICAgIGRlYnVnX2luZm86IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gZXJyb3IubWVzc2FnZSA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBTZXJ2ZSBkb2N1bWVudCBmaWxlc1xuICAvLyBTZXJ2ZSBkb2N1bWVudCBmaWxlcyB3aXRoIGZ1bGwgYWNjZXNzIGNvbnRyb2xcbiAgYXBwLmdldCgnL2FwaS9kb2N1bWVudHMvOmlkL2ZpbGUnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyO1xuICAgICAgY29uc3QgdXNlclJvbGUgPSB1c2VyLnJvbGU7XG4gICAgICBjb25zdCB1c2VySWQgPSB1c2VyLmlkO1xuICAgICAgY29uc3QgZG9jdW1lbnRJZCA9IHJlcS5wYXJhbXMuaWQ7XG4gICAgICBjb25zdCBpc0Rvd25sb2FkID0gcmVxLnF1ZXJ5LmRvd25sb2FkID09PSAndHJ1ZSc7XG5cbiAgICAgIC8vIEdldCB1c2VyJ3Mgb3JnYW5pemF0aW9uIGFuZCByZXNpZGVuY2VzIGZvciBwZXJtaXNzaW9uIGNoZWNraW5nXG4gICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyT3JnYW5pemF0aW9ucyh1c2VySWQpO1xuICAgICAgY29uc3QgcmVzaWRlbmNlcyA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlclJlc2lkZW5jZXModXNlcklkKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5ncyA9IGF3YWl0IHN0b3JhZ2UuZ2V0QnVpbGRpbmdzKCk7XG5cbiAgICAgIGNvbnN0IG9yZ2FuaXphdGlvbklkID0gb3JnYW5pemF0aW9ucy5sZW5ndGggPiAwID8gb3JnYW5pemF0aW9uc1swXS5vcmdhbml6YXRpb25JZCA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IHJlc2lkZW5jZUlkcyA9IHJlc2lkZW5jZXNcbiAgICAgICAgLm1hcCgodXI6IGFueSkgPT4gdXIucmVzaWRlbmNlSWQgfHwgdXIudXNlclJlc2lkZW5jZT8ucmVzaWRlbmNlSWQgfHwgdXIucmVzaWRlbmNlPy5pZClcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIGNvbnN0IGJ1aWxkaW5nSWRzID0gYnVpbGRpbmdzLm1hcCgoYikgPT4gYi5pZCk7XG5cbiAgICAgIC8vIEZpbmQgdGhlIGRvY3VtZW50XG4gICAgICBjb25zdCBmaWx0ZXJzID0ge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIHVzZXJSb2xlLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgc3RvcmFnZS5nZXREb2N1bWVudHMoZmlsdGVycyk7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IGRvY3VtZW50cy5maW5kKChkb2MpID0+IGRvYy5pZCA9PT0gZG9jdW1lbnRJZCk7XG5cbiAgICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0RvY3VtZW50UmVjb3JkIG5vdCBmb3VuZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIHBlcm1pc3Npb25zIHdpdGggdGVuYW50IHZpc2liaWxpdHkgcnVsZXNcbiAgICAgIGxldCBoYXNBY2Nlc3MgPSBmYWxzZTtcblxuICAgICAgaWYgKHVzZXJSb2xlID09PSAnYWRtaW4nKSB7XG4gICAgICAgIGhhc0FjY2VzcyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHVzZXJSb2xlID09PSAnbWFuYWdlcicgJiYgb3JnYW5pemF0aW9uSWQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LmJ1aWxkaW5nSWQgJiYgYnVpbGRpbmdJZHMuaW5jbHVkZXMoZG9jdW1lbnQuYnVpbGRpbmdJZCkpIHtcbiAgICAgICAgICBoYXNBY2Nlc3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb2N1bWVudC5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jdW1lbnQucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh1c2VyUm9sZSA9PT0gJ3Jlc2lkZW50Jykge1xuICAgICAgICAvLyBSZXNpZGVudHMgY2FuIGFjY2VzcyBkb2N1bWVudHMgaW4gdGhlaXIgcmVzaWRlbmNlXG4gICAgICAgIGlmIChkb2N1bWVudC5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jdW1lbnQucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXNpZGVudHMgY2FuIGFjY2VzcyBidWlsZGluZyBkb2N1bWVudHMgcmVsYXRlZCB0byB0aGVpciByZXNpZGVuY2VzXG4gICAgICAgIGlmIChkb2N1bWVudC5idWlsZGluZ0lkKSB7XG4gICAgICAgICAgY29uc3QgdXNlckJ1aWxkaW5nSWRzID0gcmVzaWRlbmNlc1xuICAgICAgICAgICAgLm1hcCgodXI6IGFueSkgPT4gdXIucmVzaWRlbmNlPy5idWlsZGluZ0lkIHx8IHVyLnVzZXJSZXNpZGVuY2U/LnJlc2lkZW5jZT8uYnVpbGRpbmdJZClcbiAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgICAgICAgaWYgKHVzZXJCdWlsZGluZ0lkcy5pbmNsdWRlcyhkb2N1bWVudC5idWlsZGluZ0lkKSkge1xuICAgICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodXNlclJvbGUgPT09ICd0ZW5hbnQnKSB7XG4gICAgICAgIC8vIFRlbmFudHMgY2FuIG9ubHkgYWNjZXNzIGRvY3VtZW50cyBtYXJrZWQgYXMgdmlzaWJsZSB0byB0ZW5hbnRzXG4gICAgICAgIGlmICghZG9jdW1lbnQuaXNWaXNpYmxlVG9UZW5hbnRzKSB7XG4gICAgICAgICAgaGFzQWNjZXNzID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGVuYW50cyBjYW4gYWNjZXNzIHZpc2libGUgZG9jdW1lbnRzIGluIHRoZWlyIHJlc2lkZW5jZVxuICAgICAgICAgIGlmIChkb2N1bWVudC5yZXNpZGVuY2VJZCAmJiByZXNpZGVuY2VJZHMuaW5jbHVkZXMoZG9jdW1lbnQucmVzaWRlbmNlSWQpKSB7XG4gICAgICAgICAgICBoYXNBY2Nlc3MgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUZW5hbnRzIGNhbiBhY2Nlc3MgdmlzaWJsZSBidWlsZGluZyBkb2N1bWVudHMgcmVsYXRlZCB0byB0aGVpciByZXNpZGVuY2VzXG4gICAgICAgICAgaWYgKGRvY3VtZW50LmJ1aWxkaW5nSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJCdWlsZGluZ0lkcyA9IHJlc2lkZW5jZXNcbiAgICAgICAgICAgICAgLm1hcCgodXI6IGFueSkgPT4gdXIucmVzaWRlbmNlPy5idWlsZGluZ0lkIHx8IHVyLnVzZXJSZXNpZGVuY2U/LnJlc2lkZW5jZT8uYnVpbGRpbmdJZClcbiAgICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgICAgICAgIGlmICh1c2VyQnVpbGRpbmdJZHMuaW5jbHVkZXMoZG9jdW1lbnQuYnVpbGRpbmdJZCkpIHtcbiAgICAgICAgICAgICAgaGFzQWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXNBY2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ0FjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXJ2ZSBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgICAgIGlmIChkb2N1bWVudC5maWxlUGF0aCkge1xuICAgICAgICBjb25zb2xlLmxvZygn8J+TgSBHQ1MgZGlzYWJsZWQgLSBzZXJ2aW5nIGZyb20gbG9jYWwgc3RvcmFnZScpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEFsd2F5cyBzZXJ2ZSBmcm9tIGxvY2FsIHN0b3JhZ2UgKEdDUyBkaXNhYmxlZClcbiAgICAgICAgICBsZXQgZmlsZVBhdGhUb1NlcnZlID0gZG9jdW1lbnQuZmlsZVBhdGg7XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiBpdCdzIGFuIGFic29sdXRlIHBhdGhcbiAgICAgICAgICBpZiAoZG9jdW1lbnQuZmlsZVBhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICBmaWxlUGF0aFRvU2VydmUgPSBkb2N1bWVudC5maWxlUGF0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhIHJlbGF0aXZlIGZpbGUgcGF0aFxuICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgZG9jdW1lbnQuZmlsZVBhdGguaW5jbHVkZXMoJ3Jlc2lkZW5jZXMvJykgfHxcbiAgICAgICAgICAgIGRvY3VtZW50LmZpbGVQYXRoLmluY2x1ZGVzKCdidWlsZGluZ3MvJykgfHxcbiAgICAgICAgICAgIGRvY3VtZW50LmZpbGVQYXRoLmluY2x1ZGVzKCd0ZXh0LWRvY3VtZW50cy8nKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gRm9yIGRldmVsb3BtZW50LCB0cnkgdG8gZmluZCB0aGUgZmlsZSBpbiBjb21tb24gdXBsb2FkIGRpcmVjdG9yaWVzXG4gICAgICAgICAgICBjb25zdCBwb3NzaWJsZVBhdGhzID0gW1xuICAgICAgICAgICAgICBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3VwbG9hZHMnLCBkb2N1bWVudC5maWxlUGF0aCksIC8vIE1haW4gZmFsbGJhY2sgbG9jYXRpb25cbiAgICAgICAgICAgICAgYC90bXAvdXBsb2Fkcy8ke2RvY3VtZW50LmZpbGVQYXRofWAsXG4gICAgICAgICAgICAgIGAvdXBsb2Fkcy8ke2RvY3VtZW50LmZpbGVQYXRofWAsXG4gICAgICAgICAgICAgIGAuL3VwbG9hZHMvJHtkb2N1bWVudC5maWxlUGF0aH1gLFxuICAgICAgICAgICAgICBwYXRoLmpvaW4oJy90bXAnLCBkb2N1bWVudC5maWxlUGF0aCksXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAvLyBUcnkgdG8gZmluZCB0aGUgZmlsZSBpbiBhbnkgb2YgdGhlc2UgbG9jYXRpb25zXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBvc3NpYmxlUGF0aCBvZiBwb3NzaWJsZVBhdGhzKSB7XG4gICAgICAgICAgICAgIGlmIChmcy5leGlzdHNTeW5jKHBvc3NpYmxlUGF0aCkpIHtcbiAgICAgICAgICAgICAgICBmaWxlUGF0aFRvU2VydmUgPSBwb3NzaWJsZVBhdGg7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYPCfk4IgRm91bmQgZmlsZSBhdDogJHtmaWxlUGF0aFRvU2VydmV9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhIHRlbXAgZmlsZSBwYXRoXG4gICAgICAgICAgZWxzZSBpZiAoZG9jdW1lbnQuZmlsZVBhdGguaW5jbHVkZXMoJ3RtcCcpKSB7XG4gICAgICAgICAgICBmaWxlUGF0aFRvU2VydmUgPSBkb2N1bWVudC5maWxlUGF0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUcnkgdG8gc2VydmUgdGhlIGZpbGVcbiAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhmaWxlUGF0aFRvU2VydmUpKSB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIG9yaWdpbmFsIGZpbGVuYW1lIHdpdGggZXh0ZW5zaW9uLCBvciBjb25zdHJ1Y3Qgb25lIGZyb20gdGhlIGRvY3VtZW50IG5hbWVcbiAgICAgICAgICAgIGxldCBmaWxlTmFtZSA9IChkb2N1bWVudCBhcyBhbnkpLmZpbGVOYW1lIHx8IGRvY3VtZW50Lm5hbWUgfHwgcGF0aC5iYXNlbmFtZShkb2N1bWVudC5maWxlUGF0aCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBmaWxlTmFtZSBkb2Vzbid0IGhhdmUgYW4gZXh0ZW5zaW9uLCBhZGQgaXQgZnJvbSB0aGUgb3JpZ2luYWwgZmlsZSBwYXRoXG4gICAgICAgICAgICBpZiAoIXBhdGguZXh0bmFtZShmaWxlTmFtZSkgJiYgZG9jdW1lbnQuZmlsZVBhdGgpIHtcbiAgICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxFeHQgPSBwYXRoLmV4dG5hbWUoZG9jdW1lbnQuZmlsZVBhdGgpO1xuICAgICAgICAgICAgICBpZiAob3JpZ2luYWxFeHQpIHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZSArPSBvcmlnaW5hbEV4dDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNEb3dubG9hZCkge1xuICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPVwiJHtmaWxlTmFtZX1cImApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1EaXNwb3NpdGlvbicsIGBpbmxpbmU7IGZpbGVuYW1lPVwiJHtmaWxlTmFtZX1cImApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYXBwcm9wcmlhdGUgY29udGVudCB0eXBlIGJhc2VkIG9uIGZpbGUgZXh0ZW5zaW9uXG4gICAgICAgICAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZU5hbWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoZXh0ID09PSAnLnBkZicpIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3BkZicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChleHQgPT09ICcuanBnJyB8fCBleHQgPT09ICcuanBlZycpIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2ltYWdlL2pwZWcnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXh0ID09PSAnLnBuZycpIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2ltYWdlL3BuZycpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChleHQgPT09ICcuZ2lmJykge1xuICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnaW1hZ2UvZ2lmJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV4dCA9PT0gJy5kb2MnIHx8IGV4dCA9PT0gJy5kb2N4Jykge1xuICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnLFxuICAgICAgICAgICAgICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCdcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXh0ID09PSAnLnR4dCcpIHtcbiAgICAgICAgICAgICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW47IGNoYXJzZXQ9dXRmLTgnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHJvZHVjdGlvbiBjYWNoZSBidXN0aW5nIGZvciBkb2N1bWVudHNcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpbGVTdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGVQYXRoVG9TZXJ2ZSk7XG4gICAgICAgICAgICAgIHJlcy5zZXQoe1xuICAgICAgICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlJyxcbiAgICAgICAgICAgICAgICAnUHJhZ21hJzogJ25vLWNhY2hlJyxcbiAgICAgICAgICAgICAgICAnRXhwaXJlcyc6ICcwJyxcbiAgICAgICAgICAgICAgICAnRVRhZyc6IGBcIiR7ZG9jdW1lbnQuaWR9LSR7ZmlsZVN0YXRzLm10aW1lLmdldFRpbWUoKX1cImAsXG4gICAgICAgICAgICAgICAgJ0xhc3QtTW9kaWZpZWQnOiBmaWxlU3RhdHMubXRpbWUudG9VVENTdHJpbmcoKSxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5OCIFNlcnZpbmcgZmlsZTogJHtmaWxlUGF0aFRvU2VydmV9IGFzICR7ZmlsZU5hbWV9YCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzLnNlbmRGaWxlKHBhdGgucmVzb2x2ZShmaWxlUGF0aFRvU2VydmUpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiBmaWxlIG5vdCBmb3VuZCBsb2NhbGx5LCBsb2cgZm9yIGRlYnVnZ2luZ1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDinYwgRmlsZSBub3QgZm91bmQgYXQgZmlsZVBhdGg6ICR7ZG9jdW1lbnQuZmlsZVBhdGh9YCk7XG4gICAgICAgICAgY29uc29sZS5sb2coYOKdjCBUcmllZCBmaWxlUGF0aDogJHtmaWxlUGF0aFRvU2VydmV9YCk7XG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0ZpbGUgbm90IGZvdW5kIG9uIHNlcnZlcicgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGZpbGVFcnJvcjogYW55KSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIHNlcnZpbmcgZmlsZTonLCBmaWxlRXJyb3IpO1xuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gc2VydmUgZmlsZScgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ05vIGZpbGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZG9jdW1lbnQnIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBzZXJ2aW5nIGRvY3VtZW50IGZpbGU6JywgZXJyb3IpO1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIHNlcnZlIGRvY3VtZW50IGZpbGUnIH0pO1xuICAgIH1cbiAgfSk7XG5cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==