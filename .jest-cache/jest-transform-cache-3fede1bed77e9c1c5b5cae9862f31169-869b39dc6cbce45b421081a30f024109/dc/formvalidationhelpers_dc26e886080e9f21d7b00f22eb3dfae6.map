{"file":"/home/runner/workspace/client/src/utils/form-validation-helpers.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/utils/form-validation-helpers.ts"],"sourcesContent":["/**\n * Form Validation Helper Utilities\n * Utility functions to enforce validation standards across all forms\n */\n\nimport { z } from 'zod';\n\n/**\n * Validation Templates for Common Field Types\n * Use these templates to ensure consistency across all forms\n */\nexport const ValidationTemplates = {\n  /**\n   * Email field validation with format example\n   */\n  email: () => z.string()\n    .min(1, 'Email address is required')\n    .email('Please enter a valid email address (example: user@domain.com)'),\n\n  /**\n   * Quebec-compliant name field validation with French character support\n   */\n  quebecName: (fieldName: string, example: string) => z.string()\n    .min(1, `${fieldName} is required (example: ${example})`)\n    .max(50, `${fieldName} must be less than 50 characters`)\n    .regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, `${fieldName} can only contain letters, spaces, apostrophes and hyphens`),\n\n  /**\n   * North American phone number validation\n   */\n  phone: () => z.string()\n    .regex(/^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)')\n    .optional(),\n\n  /**\n   * Monetary amount validation with decimal support\n   */\n  amount: (fieldName: string = 'Amount') => z.string()\n    .min(1, `${fieldName} is required (example: 125.50)`)\n    .regex(/^\\d+(\\.\\d{1,2})?$/, `${fieldName} must be a valid number with up to 2 decimal places (example: 125.50)`),\n\n  /**\n   * Canadian postal code validation\n   */\n  postalCode: () => z.string()\n    .regex(/^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)'),\n\n  /**\n   * Selection field validation with dropdown guidance\n   */\n  selection: (fieldName: string) => z.string()\n    .min(1, `Please select ${fieldName} from the dropdown`),\n\n  /**\n   * Text description field with character limits\n   */\n  description: (maxLength: number = 1000, minLength: number = 0) => {\n    let schema = z.string().max(maxLength, `Description must be less than ${maxLength} characters`);\n    if (minLength > 0) {\n      schema = schema.min(minLength, 'Description must be at least 10 characters long (example: Detailed explanation of the issue)');\n    }\n    return schema;\n  },\n\n  /**\n   * Title field validation with example\n   */\n  title: (fieldName: string = 'Title', example: string = 'Descriptive Title', maxLength: number = 200) => z.string()\n    .min(1, `${fieldName} is required (example: ${example})`)\n    .max(maxLength, `${fieldName} must be less than ${maxLength} characters`),\n\n  /**\n   * Password validation with security requirements\n   */\n  password: (fieldName: string = 'Password') => z.string()\n    .min(8, `${fieldName} must be at least 8 characters long (example: MonNouveauMotDePasse123!)`)\n    .max(100, `${fieldName} must be less than 100 characters`)\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, `${fieldName} must contain at least one lowercase letter, one uppercase letter, and one number`),\n\n  /**\n   * Numeric range validation\n   */\n  numericRange: (fieldName: string, min: number, max: number) => z.number()\n    .min(min, `${fieldName} must be between ${min} and ${max}`)\n    .max(max, `${fieldName} must be between ${min} and ${max}`),\n\n  /**\n   * Time format validation\n   */\n  time: () => z.string()\n    .regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format (example: 09:00)')\n};\n\n/**\n * Validation Quality Checkers\n * Functions to check if validation messages meet quality standards\n */\nexport const ValidationQualityCheckers = {\n  /**\n   * Check if an error message meets quality standards\n   */\n  checkErrorMessageQuality: (message: string, fieldType: string): {\n    isCompliant: boolean;\n    issues: string[];\n    message: string;\n  } => {\n    const issues: string[] = [];\n\n    // Check message length\n    if (message.length < 15) {\n      issues.push('Error message too short - should be at least 15 characters');\n    }\n    if (message.length > 200) {\n      issues.push('Error message too long - should be less than 200 characters');\n    }\n\n    // Check for helpful language\n    if (!/please|must be|should be|required/i.test(message)) {\n      issues.push('Error message should use helpful language (please, must be, required, etc.)');\n    }\n\n    // Check for examples where needed\n    const needsExample = ['email', 'phone', 'postal', 'amount', 'time', 'name', 'password'].includes(fieldType.toLowerCase());\n    if (needsExample && !message.includes('example:')) {\n      issues.push(`${fieldType} field should include format example in error message`);\n    }\n\n    // Check for vague language\n    if (/^(invalid|error|wrong|bad)$/i.test(message)) {\n      issues.push('Error message too vague - provide specific guidance');\n    }\n\n    // Check for actionable guidance\n    if (!/enter|select|choose|type|provide|format|between|at least|less than/i.test(message)) {\n      issues.push('Error message should provide actionable guidance on how to fix the error');\n    }\n\n    return {\n      isCompliant: issues.length === 0,\n      issues,\n      message\n    };\n  },\n\n  /**\n   * Check if a Zod schema follows validation standards\n   */\n  checkSchemaCompliance: (schema: z.ZodType, fieldType: string): {\n    isCompliant: boolean;\n    issues: string[];\n  } => {\n    const issues: string[] = [];\n\n    try {\n      // Test schema with empty string to trigger validation\n      const result = schema.safeParse('');\n      if (!result.success && result.error.issues.length > 0) {\n        const errorMessage = result.error.issues[0].message;\n        const messageCheck = ValidationQualityCheckers.checkErrorMessageQuality(errorMessage, fieldType);\n        \n        if (!messageCheck.isCompliant) {\n          issues.push(...messageCheck.issues);\n        }\n      }\n\n      // Additional schema structure checks\n      if (fieldType === 'email' && schema._def && 'typeName' in schema._def && schema._def.typeName !== 'ZodString') {\n        issues.push('Email fields should use string schema with email validation');\n      }\n\n    } catch (error) {\n      issues.push('Schema validation check failed - invalid schema structure');\n    }\n\n    return {\n      isCompliant: issues.length === 0,\n      issues\n    };\n  },\n\n  /**\n   * Check if form component follows UI standards\n   */\n  checkFormComponentCompliance: (componentStructure: {\n    hasFormLabel: boolean;\n    hasFormMessage: boolean;\n    hasDataTestIds: boolean;\n    hasProperStyling: boolean;\n  }): {\n    isCompliant: boolean;\n    issues: string[];\n  } => {\n    const issues: string[] = [];\n\n    if (!componentStructure.hasFormLabel) {\n      issues.push('Form should use FormLabel component for consistent styling');\n    }\n    if (!componentStructure.hasFormMessage) {\n      issues.push('Form should use FormMessage component to display validation errors');\n    }\n    if (!componentStructure.hasDataTestIds) {\n      issues.push('Form elements should have data-testid attributes for testing');\n    }\n    if (!componentStructure.hasProperStyling) {\n      issues.push('Form should follow responsive design patterns with proper styling');\n    }\n\n    return {\n      isCompliant: issues.length === 0,\n      issues\n    };\n  }\n};\n\n/**\n * Quebec-Specific Validation Patterns\n * Validation patterns specific to Quebec compliance requirements\n */\nexport const QuebecValidationPatterns = {\n  /**\n   * Quebec name validation supporting French characters\n   */\n  quebecName: /^[a-zA-ZÀ-ÿ\\s'-]+$/,\n\n  /**\n   * Canadian postal code format\n   */\n  canadianPostalCode: /^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$/,\n\n  /**\n   * North American phone number format\n   */\n  northAmericanPhone: /^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/,\n\n  /**\n   * Quebec city name validation\n   */\n  quebecCity: /^[a-zA-ZÀ-ÿ\\s'-]+$/\n};\n\n/**\n * Form Validation Standards Enforcement\n * Functions to ensure forms meet all validation requirements\n */\nexport const FormValidationStandards = {\n  /**\n   * Validate that a form schema meets all requirements\n   */\n  validateFormSchema: (schema: Record<string, z.ZodType>, formName: string): {\n    isCompliant: boolean;\n    issues: string[];\n    recommendations: string[];\n  } => {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Check each field in the schema\n    Object.entries(schema).forEach(([fieldName, fieldSchema]) => {\n      const fieldType = detectFieldType(fieldName);\n      const compliance = ValidationQualityCheckers.checkSchemaCompliance(fieldSchema, fieldType);\n      \n      if (!compliance.isCompliant) {\n        issues.push(`Field '${fieldName}': ${compliance.issues.join(', ')}`);\n      }\n\n      // Add recommendations based on field type\n      if (fieldType === 'email' && !fieldName.includes('confirm')) {\n        recommendations.push(`Consider adding email confirmation field for ${fieldName} in security-sensitive forms`);\n      }\n      if (fieldType === 'password') {\n        recommendations.push(`Ensure ${fieldName} has proper strength indicators in the UI`);\n      }\n    });\n\n    return {\n      isCompliant: issues.length === 0,\n      issues,\n      recommendations\n    };\n  },\n\n  /**\n   * Generate validation report for development team\n   */\n  generateValidationReport: (formFiles: string[]): {\n    compliantForms: string[];\n    nonCompliantForms: Array<{ file: string; issues: string[] }>;\n    totalForms: number;\n    compliancePercentage: number;\n  } => {\n    const compliantForms: string[] = [];\n    const nonCompliantForms: Array<{ file: string; issues: string[] }> = [];\n\n    // For demo purposes, assume all listed forms are compliant\n    // In real implementation, this would analyze actual form files\n    formFiles.forEach(file => {\n      compliantForms.push(file);\n    });\n\n    return {\n      compliantForms,\n      nonCompliantForms,\n      totalForms: formFiles.length,\n      compliancePercentage: (compliantForms.length / formFiles.length) * 100\n    };\n  }\n};\n\n/**\n * Helper function to detect field type from field name\n */\nfunction detectFieldType(fieldName: string): string {\n  const name = fieldName.toLowerCase();\n  \n  if (name.includes('email')) return 'email';\n  if (name.includes('phone') || name.includes('telephone')) return 'phone';\n  if (name.includes('postal') || name.includes('zipcode')) return 'postal';\n  if (name.includes('amount') || name.includes('price') || name.includes('cost')) return 'amount';\n  if (name.includes('time') || name.includes('hour')) return 'time';\n  if (name.includes('password') || name.includes('pwd')) return 'password';\n  if (name.includes('name') || name.includes('nom')) return 'name';\n  if (name.includes('description') || name.includes('note')) return 'description';\n  if (name.includes('title') || name.includes('titre')) return 'title';\n  if (name.includes('date')) return 'date';\n  if (name.includes('select') || name.includes('choice') || name.includes('option')) return 'selection';\n  \n  return 'text';\n}\n\n/**\n * Runtime validation checker for development\n * Use in development to ensure new forms follow standards\n */\nexport const DevValidationChecker = {\n  /**\n   * Check if a form follows all validation standards\n   * Call this during development to validate form compliance\n   */\n  checkFormCompliance: (\n    formSchema: Record<string, z.ZodType>,\n    formName: string\n  ): void => {\n    if (process.env.NODE_ENV === 'development') {\n      const validation = FormValidationStandards.validateFormSchema(formSchema, formName);\n      \n      if (!validation.isCompliant) {\n        console.warn(`⚠️  Form validation compliance issues in ${formName}:`);\n        validation.issues.forEach(issue => {\n          console.warn(`  - ${issue}`);\n        });\n      }\n\n      if (validation.recommendations.length > 0) {\n        console.info(`💡 Form validation recommendations for ${formName}:`);\n        validation.recommendations.forEach(rec => {\n          console.info(`  - ${rec}`);\n        });\n      }\n\n      if (validation.isCompliant) {\n        console.log(`✅ Form ${formName} meets all validation standards`);\n      }\n    }\n  }\n};"],"version":3}