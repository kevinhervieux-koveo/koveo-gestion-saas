02448a69432124d653dfe1929bbb933e
"use strict";
/**
 * Fast in-memory database mock for unit tests
 * Provides instant responses without network calls
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockSql = exports.mockDb = exports.createMockDatabase = void 0;
const createMockDatabase = () => {
    const mockData = new Map();
    return {
        // Mock query function that returns immediately
        query: jest.fn().mockImplementation(async (sql) => {
            // Return empty results for test queries
            if (sql.includes('SELECT version()')) {
                return [{ version: 'PostgreSQL 15.0 (Mock)' }];
            }
            return [];
        }),
        // Mock insert operations
        insert: jest.fn().mockImplementation(async (table) => ({
            values: jest.fn().mockImplementation(async (data) => {
                const id = Math.random().toString(36).substr(2, 9);
                mockData.set(id, data);
                return [{ ...data, id }];
            }),
        })),
        // Mock select operations
        select: jest.fn().mockImplementation(() => ({
            from: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockImplementation(() => ({
                    limit: jest.fn().mockImplementation(async () => []),
                })),
            })),
        })),
        // Mock delete operations
        delete: jest.fn().mockImplementation(() => ({
            where: jest.fn().mockImplementation(async () => ({ affectedRows: 0 })),
        })),
        // Mock update operations
        update: jest.fn().mockImplementation(() => ({
            set: jest.fn().mockImplementation(() => ({
                where: jest.fn().mockImplementation(async () => ({ affectedRows: 0 })),
            })),
        })),
    };
};
exports.createMockDatabase = createMockDatabase;
// Global mock instance
exports.mockDb = (0, exports.createMockDatabase)();
// Mock SQL template function
exports.mockSql = jest.fn().mockImplementation(async (strings, ...values) => {
    const query = strings.join('?');
    if (query.includes('SELECT version()')) {
        return [{ version: 'PostgreSQL 15.0 (Mock)' }];
    }
    return [];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxNQUFNLEdBQUcsSUFBQSwwQkFBa0IsR0FBRSxDQUFDO0FBRTNDLDZCQUE2QjtBQUNoQixRQUFBLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE9BQTZCLEVBQUUsR0FBRyxNQUFhLEVBQUUsRUFBRTtJQUM1RyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUM7UUFDdkMsT0FBTyxDQUFDLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3Rlc3RzL21vY2tzL2RhdGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmFzdCBpbi1tZW1vcnkgZGF0YWJhc2UgbW9jayBmb3IgdW5pdCB0ZXN0c1xuICogUHJvdmlkZXMgaW5zdGFudCByZXNwb25zZXMgd2l0aG91dCBuZXR3b3JrIGNhbGxzXG4gKi9cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tEYXRhYmFzZSA9ICgpID0+IHtcbiAgY29uc3QgbW9ja0RhdGEgPSBuZXcgTWFwKCk7XG4gIFxuICByZXR1cm4ge1xuICAgIC8vIE1vY2sgcXVlcnkgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGltbWVkaWF0ZWx5XG4gICAgcXVlcnk6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oYXN5bmMgKHNxbDogc3RyaW5nKSA9PiB7XG4gICAgICAvLyBSZXR1cm4gZW1wdHkgcmVzdWx0cyBmb3IgdGVzdCBxdWVyaWVzXG4gICAgICBpZiAoc3FsLmluY2x1ZGVzKCdTRUxFQ1QgdmVyc2lvbigpJykpIHtcbiAgICAgICAgcmV0dXJuIFt7IHZlcnNpb246ICdQb3N0Z3JlU1FMIDE1LjAgKE1vY2spJyB9XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9KSxcbiAgICBcbiAgICAvLyBNb2NrIGluc2VydCBvcGVyYXRpb25zXG4gICAgaW5zZXJ0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKGFzeW5jICh0YWJsZTogc3RyaW5nKSA9PiAoe1xuICAgICAgdmFsdWVzOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKGFzeW5jIChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG4gICAgICAgIG1vY2tEYXRhLnNldChpZCwgZGF0YSk7XG4gICAgICAgIHJldHVybiBbeyAuLi5kYXRhLCBpZCB9XTtcbiAgICAgIH0pLFxuICAgIH0pKSxcbiAgICBcbiAgICAvLyBNb2NrIHNlbGVjdCBvcGVyYXRpb25zXG4gICAgc2VsZWN0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICBmcm9tOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICAgIHdoZXJlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICAgICAgbGltaXQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oYXN5bmMgKCkgPT4gW10pLFxuICAgICAgICB9KSksXG4gICAgICB9KSksXG4gICAgfSkpLFxuICAgIFxuICAgIC8vIE1vY2sgZGVsZXRlIG9wZXJhdGlvbnNcbiAgICBkZWxldGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHdoZXJlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKGFzeW5jICgpID0+ICh7IGFmZmVjdGVkUm93czogMCB9KSksXG4gICAgfSkpLFxuICAgIFxuICAgIC8vIE1vY2sgdXBkYXRlIG9wZXJhdGlvbnNcbiAgICB1cGRhdGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgIHNldDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihhc3luYyAoKSA9PiAoeyBhZmZlY3RlZFJvd3M6IDAgfSkpLFxuICAgICAgfSkpLFxuICAgIH0pKSxcbiAgfTtcbn07XG5cbi8vIEdsb2JhbCBtb2NrIGluc3RhbmNlXG5leHBvcnQgY29uc3QgbW9ja0RiID0gY3JlYXRlTW9ja0RhdGFiYXNlKCk7XG5cbi8vIE1vY2sgU1FMIHRlbXBsYXRlIGZ1bmN0aW9uXG5leHBvcnQgY29uc3QgbW9ja1NxbCA9IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oYXN5bmMgKHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi52YWx1ZXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IHF1ZXJ5ID0gc3RyaW5ncy5qb2luKCc/Jyk7XG4gIGlmIChxdWVyeS5pbmNsdWRlcygnU0VMRUNUIHZlcnNpb24oKScpKSB7XG4gICAgcmV0dXJuIFt7IHZlcnNpb246ICdQb3N0Z3JlU1FMIDE1LjAgKE1vY2spJyB9XTtcbiAgfVxuICByZXR1cm4gW107XG59KTsiXSwidmVyc2lvbiI6M30=