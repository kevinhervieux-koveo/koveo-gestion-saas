{"file":"/home/runner/workspace/tests/unit/file-upload-forms.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/file-upload-forms.test.tsx"],"sourcesContent":["/**\n * File Upload Forms Test Suite\n * \n * Comprehensive testing for all submission forms that support file uploads or image attachments.\n * This test suite validates:\n * 1. File selection and validation\n * 2. Form submission with multipart data\n * 3. Error handling for file uploads\n * 4. File type and size restrictions\n * 5. Multiple file handling\n * 6. UI feedback during upload process\n * \n * Forms tested:\n * - Bug Reports (with file attachments)\n * - Feature Requests/Ideas (with file attachments)\n * - Document Upload Forms\n * - Bills (with receipt attachments)\n */\n\nimport { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { screen, fireEvent, waitFor } from '@testing-library/react';\nimport { render } from '../utils/test-utils';\nimport '@testing-library/jest-dom';\nimport '../types/jest-dom';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\n\n// Test utilities - using shared test-utils wrapper\n\n// Mock API request function\nconst mockApiRequest = jest.fn() as jest.MockedFunction<any>;\nconst mockFetch = jest.fn() as jest.MockedFunction<any>;\n\njest.mock('@/lib/queryClient', () => ({\n  apiRequest: mockApiRequest,\n}));\n\n// Mock authentication hook\nconst mockAuth = {\n  user: {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    email: 'test@koveo.com',\n    role: 'admin',\n    organizationId: '123e4567-e89b-12d3-a456-426614174001'\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n};\n\njest.mock('@/hooks/use-auth', () => ({\n  useAuth: () => mockAuth,\n}));\n\n// Mock toast hook\nconst mockToast = jest.fn();\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({ toast: mockToast }),\n}));\n\n// Mock global fetch\nglobal.fetch = mockFetch as any;\n\n// Create mock files for testing\nconst createMockFile = (name: string, size: number, type: string) => {\n  const file = new File(['mock content'], name, { type });\n  Object.defineProperty(file, 'size', { value: size });\n  return file;\n};\n\nconst createMockImage = (name: string, size: number = 50000) => \n  createMockFile(name, size, 'image/png');\n\nconst createMockPDF = (name: string, size: number = 100000) => \n  createMockFile(name, size, 'application/pdf');\n\nconst createMockTextFile = (name: string, size: number = 1000) => \n  createMockFile(name, size, 'text/plain');\n\ndescribe('File Upload Forms Test Suite', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockApiRequest.mockResolvedValue({ id: 'test-id', success: true });\n    mockFetch.mockResolvedValue({\n      ok: true,\n      json: async () => ({ id: 'test-id', success: true }),\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  describe('Bug Report Form with File Attachments', () => {\n    const BugReportForm = require('../../client/src/pages/settings/bug-reports.tsx').default;\n\n    beforeEach(() => {\n      // Reset mocks for this test suite\n      jest.clearAllMocks();\n    });\n\n    it('should render bug report form with file upload capability', async () => {\n      render(\n        <>\n          <BugReportForm />\n        </>\n      );\n\n      // Check for bug report button\n      const reportButton = screen.queryByTestId('button-report-bug') || \n                          screen.queryByText(/report bug/i);\n      \n      if (reportButton) {\n        await userEvent.click(reportButton);\n\n        // Look for file upload components\n        const attachButton = screen.queryByText(/attach files/i) ||\n                            screen.queryByText(/screenshots/i) ||\n                            screen.queryByRole('button', { name: /attach/i });\n        \n        expect(attachButton).toBeTruthy();\n      }\n    });\n\n    it('should handle single file attachment to bug reports', async () => {\n      render(\n        <>\n          <BugReportForm />\n        </>\n      );\n\n      const reportButton = screen.queryByTestId('button-report-bug') || \n                          screen.queryByText(/report bug/i);\n      \n      if (reportButton) {\n        await userEvent.click(reportButton);\n\n        // Fill required fields\n        const titleInput = screen.queryByLabelText(/title/i) || \n                          screen.queryByPlaceholderText(/title/i);\n        const descriptionInput = screen.queryByLabelText(/description/i) ||\n                                screen.queryByPlaceholderText(/description/i);\n        const pageInput = screen.queryByLabelText(/page/i) ||\n                         screen.queryByPlaceholderText(/page/i);\n\n        if (titleInput && descriptionInput && pageInput) {\n          await userEvent.type(titleInput, 'Test Bug Report with File');\n          await userEvent.type(descriptionInput, 'This is a test bug report with file attachment for testing purposes.');\n          await userEvent.type(pageInput, 'Test Page');\n\n          // Try to find and interact with file upload\n          const fileInput = screen.queryByRole('button', { name: /attach/i }) ||\n                           screen.queryByText(/attach files/i);\n\n          if (fileInput) {\n            const mockFile = createMockImage('screenshot.png');\n            \n            // Simulate file selection\n            Object.defineProperty(fileInput, 'files', {\n              value: [mockFile],\n              writable: false,\n            });\n\n            fireEvent.change(fileInput, { target: { files: [mockFile] } });\n\n            // Submit form\n            const submitButton = screen.queryByTestId('button-submit-bug') ||\n                               screen.queryByRole('button', { name: /submit/i });\n            \n            if (submitButton) {\n              await userEvent.click(submitButton);\n\n              await waitFor(() => {\n                expect(mockFetch).toHaveBeenCalledWith(\n                  '/api/bugs',\n                  expect.objectContaining({\n                    method: 'POST',\n                    body: expect.any(FormData),\n                    credentials: 'include',\n                  })\n                );\n              });\n            }\n          }\n        }\n      }\n    });\n\n    it('should handle multiple file attachments to bug reports', async () => {\n      render(\n        <>\n          <BugReportForm />\n        </>\n      );\n\n      const reportButton = screen.queryByTestId('button-report-bug') || \n                          screen.queryByText(/report bug/i);\n      \n      if (reportButton) {\n        await userEvent.click(reportButton);\n\n        const titleInput = screen.queryByLabelText(/title/i) || \n                          screen.queryByPlaceholderText(/title/i);\n        const descriptionInput = screen.queryByLabelText(/description/i) ||\n                                screen.queryByPlaceholderText(/description/i);\n        const pageInput = screen.queryByLabelText(/page/i) ||\n                         screen.queryByPlaceholderText(/page/i);\n\n        if (titleInput && descriptionInput && pageInput) {\n          await userEvent.type(titleInput, 'Multi-file Bug Report');\n          await userEvent.type(descriptionInput, 'Testing multiple file attachments in bug reports.');\n          await userEvent.type(pageInput, 'Test Page');\n\n          const fileInput = screen.queryByRole('button', { name: /attach/i });\n\n          if (fileInput) {\n            const mockFiles = [\n              createMockImage('screenshot1.png'),\n              createMockImage('screenshot2.png'),\n              createMockPDF('error-log.pdf')\n            ];\n\n            // Simulate multiple file selection\n            Object.defineProperty(fileInput, 'files', {\n              value: mockFiles,\n              writable: false,\n            });\n\n            fireEvent.change(fileInput, { target: { files: mockFiles } });\n\n            const submitButton = screen.queryByTestId('button-submit-bug') ||\n                               screen.queryByRole('button', { name: /submit/i });\n            \n            if (submitButton) {\n              await userEvent.click(submitButton);\n\n              await waitFor(() => {\n                expect(mockFetch).toHaveBeenCalledWith(\n                  '/api/bugs',\n                  expect.objectContaining({\n                    method: 'POST',\n                    body: expect.any(FormData),\n                  })\n                );\n              });\n            }\n          }\n        }\n      }\n    });\n\n    it('should validate file size limits for bug report attachments', async () => {\n      render(\n        <>\n          <BugReportForm />\n        </>\n      );\n\n      const reportButton = screen.queryByTestId('button-report-bug') || \n                          screen.queryByText(/report bug/i);\n      \n      if (reportButton) {\n        await userEvent.click(reportButton);\n\n        const fileInput = screen.queryByRole('button', { name: /attach/i });\n\n        if (fileInput) {\n          // Create oversized file (50MB)\n          const oversizedFile = createMockImage('huge-file.png', 50 * 1024 * 1024);\n\n          Object.defineProperty(fileInput, 'files', {\n            value: [oversizedFile],\n            writable: false,\n          });\n\n          fireEvent.change(fileInput, { target: { files: [oversizedFile] } });\n\n          // Should show error message for oversized file\n          await waitFor(() => {\n            const errorMessage = screen.queryByText(/file.*too large/i) ||\n                                screen.queryByText(/size.*exceeded/i) ||\n                                screen.queryByText(/maximum.*size/i);\n            \n            if (errorMessage) {\n              expect(errorMessage).toBeInTheDocument();\n            }\n          });\n        }\n      }\n    });\n  });\n\n  describe('Feature Request Form with File Attachments', () => {\n    const FeatureRequestForm = require('../../client/src/pages/settings/idea-box.tsx').default;\n\n    it('should render feature request form with file upload capability', async () => {\n      render(\n        <>\n          <FeatureRequestForm />\n        </>\n      );\n\n      const requestButton = screen.queryByTestId('button-request-feature') || \n                           screen.queryByText(/request feature/i) ||\n                           screen.queryByText(/suggest idea/i);\n      \n      if (requestButton) {\n        await userEvent.click(requestButton);\n\n        const attachButton = screen.queryByText(/attach files/i) ||\n                            screen.queryByText(/attachments/i) ||\n                            screen.queryByRole('button', { name: /attach/i });\n        \n        expect(attachButton).toBeTruthy();\n      }\n    });\n\n    it('should submit feature request with file attachments', async () => {\n      render(\n        <>\n          <FeatureRequestForm />\n        </>\n      );\n\n      const requestButton = screen.queryByTestId('button-request-feature') || \n                           screen.queryByText(/request feature/i);\n      \n      if (requestButton) {\n        await userEvent.click(requestButton);\n\n        const titleInput = screen.queryByLabelText(/title/i) || \n                          screen.queryByPlaceholderText(/title/i);\n        const descriptionInput = screen.queryByLabelText(/description/i) ||\n                                screen.queryByPlaceholderText(/description/i);\n\n        if (titleInput && descriptionInput) {\n          await userEvent.type(titleInput, 'New Feature with Mockups');\n          await userEvent.type(descriptionInput, 'Feature request with design mockups and documentation.');\n\n          const fileInput = screen.queryByRole('button', { name: /attach/i });\n\n          if (fileInput) {\n            const mockFiles = [\n              createMockImage('mockup.png'),\n              createMockPDF('requirements.pdf')\n            ];\n\n            Object.defineProperty(fileInput, 'files', {\n              value: mockFiles,\n              writable: false,\n            });\n\n            fireEvent.change(fileInput, { target: { files: mockFiles } });\n\n            const submitButton = screen.queryByRole('button', { name: /submit/i });\n            \n            if (submitButton) {\n              await userEvent.click(submitButton);\n\n              await waitFor(() => {\n                expect(mockFetch).toHaveBeenCalledWith(\n                  expect.stringMatching(/\\/api\\/(features|feature-requests)/),\n                  expect.objectContaining({\n                    method: 'POST',\n                    body: expect.any(FormData),\n                  })\n                );\n              });\n            }\n          }\n        }\n      }\n    });\n  });\n\n  describe('Document Upload Forms', () => {\n    const DocumentManager = require('../../client/src/components/common/DocumentManager.tsx').default;\n\n    it('should handle document upload with metadata', async () => {\n      render(\n        <>\n          <DocumentManager />\n        </>\n      );\n\n      const uploadButton = screen.queryByTestId('button-upload-document') ||\n                          screen.queryByText(/upload/i) ||\n                          screen.queryByRole('button', { name: /add.*document/i });\n\n      if (uploadButton) {\n        await userEvent.click(uploadButton);\n\n        const fileInput = screen.queryByRole('input', { name: /file/i }) ||\n                         screen.queryByRole('button', { name: /choose.*file/i });\n\n        if (fileInput) {\n          const mockDocument = createMockPDF('contract.pdf');\n\n          Object.defineProperty(fileInput, 'files', {\n            value: [mockDocument],\n            writable: false,\n          });\n\n          fireEvent.change(fileInput, { target: { files: [mockDocument] } });\n\n          // Fill document metadata\n          const nameInput = screen.queryByLabelText(/name/i) ||\n                           screen.queryByPlaceholderText(/document.*name/i);\n          const descriptionInput = screen.queryByLabelText(/description/i);\n\n          if (nameInput) {\n            await userEvent.type(nameInput, 'Test Contract Document');\n          }\n          if (descriptionInput) {\n            await userEvent.type(descriptionInput, 'Legal contract for testing purposes');\n          }\n\n          const submitButton = screen.queryByRole('button', { name: /upload/i }) ||\n                              screen.queryByRole('button', { name: /save/i });\n\n          if (submitButton) {\n            await userEvent.click(submitButton);\n\n            await waitFor(() => {\n              expect(mockApiRequest).toHaveBeenCalledWith(\n                'POST',\n                expect.stringMatching(/\\/api\\/documents/),\n                expect.any(Object)\n              );\n            });\n          }\n        }\n      }\n    });\n\n    it('should validate document file types', async () => {\n      render(\n        <>\n          <DocumentManager />\n        </>\n      );\n\n      const uploadButton = screen.queryByTestId('button-upload-document') ||\n                          screen.queryByText(/upload/i);\n\n      if (uploadButton) {\n        await userEvent.click(uploadButton);\n\n        const fileInput = screen.queryByRole('input', { name: /file/i });\n\n        if (fileInput) {\n          // Try uploading invalid file type\n          const invalidFile = createMockFile('malicious.exe', 1000, 'application/x-executable');\n\n          Object.defineProperty(fileInput, 'files', {\n            value: [invalidFile],\n            writable: false,\n          });\n\n          fireEvent.change(fileInput, { target: { files: [invalidFile] } });\n\n          await waitFor(() => {\n            const errorMessage = screen.queryByText(/file.*type.*not.*allowed/i) ||\n                                screen.queryByText(/invalid.*file.*type/i) ||\n                                screen.queryByText(/unsupported.*format/i);\n            \n            if (errorMessage) {\n              expect(errorMessage).toBeInTheDocument();\n            }\n          });\n        }\n      }\n    });\n  });\n\n  describe('Bill Form with Receipt Attachments', () => {\n    const BillForm = require('../../client/src/components/common/BillForm.tsx').default;\n\n    it('should handle bill submission with receipt attachments', async () => {\n      const mockProps = {\n        isOpen: true,\n        onClose: jest.fn(),\n        onSubmit: jest.fn(),\n        buildings: [],\n        residences: []\n      };\n\n      render(\n        <>\n          <BillForm {...mockProps} />\n        </>\n      );\n\n      // Fill bill details\n      const titleInput = screen.queryByLabelText(/title/i) ||\n                        screen.queryByPlaceholderText(/bill.*title/i);\n      const amountInput = screen.queryByLabelText(/amount/i) ||\n                         screen.queryByPlaceholderText(/amount/i);\n\n      if (titleInput && amountInput) {\n        await userEvent.type(titleInput, 'Electricity Bill - January 2025');\n        await userEvent.type(amountInput, '150.75');\n\n        // Look for file attachment\n        const attachButton = screen.queryByText(/attach.*receipt/i) ||\n                            screen.queryByText(/add.*attachment/i) ||\n                            screen.queryByRole('button', { name: /attach/i });\n\n        if (attachButton) {\n          await userEvent.click(attachButton);\n\n          const fileInput = screen.queryByRole('input', { type: 'file' });\n\n          if (fileInput) {\n            const receiptFile = createMockPDF('receipt.pdf');\n\n            Object.defineProperty(fileInput, 'files', {\n              value: [receiptFile],\n              writable: false,\n            });\n\n            fireEvent.change(fileInput, { target: { files: [receiptFile] } });\n\n            const submitButton = screen.queryByRole('button', { name: /save.*bill/i }) ||\n                                screen.queryByRole('button', { name: /submit/i });\n\n            if (submitButton) {\n              await userEvent.click(submitButton);\n\n              await waitFor(() => {\n                expect(mockProps.onSubmit).toHaveBeenCalledWith(\n                  expect.objectContaining({\n                    title: 'Electricity Bill - January 2025',\n                    amount: expect.any(String),\n                  })\n                );\n              });\n            }\n          }\n        }\n      }\n    });\n\n    it('should validate receipt file format', async () => {\n      const mockProps = {\n        isOpen: true,\n        onClose: jest.fn(),\n        onSubmit: jest.fn(),\n        buildings: [],\n        residences: []\n      };\n\n      render(\n        <>\n          <BillForm {...mockProps} />\n        </>\n      );\n\n      const attachButton = screen.queryByText(/attach/i);\n\n      if (attachButton) {\n        await userEvent.click(attachButton);\n\n        const fileInput = screen.queryByRole('input', { type: 'file' });\n\n        if (fileInput) {\n          // Try invalid file format\n          const invalidFile = createMockFile('receipt.txt', 1000, 'text/plain');\n\n          Object.defineProperty(fileInput, 'files', {\n            value: [invalidFile],\n            writable: false,\n          });\n\n          fireEvent.change(fileInput, { target: { files: [invalidFile] } });\n\n          await waitFor(() => {\n            const errorMessage = screen.queryByText(/invalid.*format/i) ||\n                                screen.queryByText(/only.*pdf.*jpg.*png/i);\n            \n            if (errorMessage) {\n              expect(errorMessage).toBeInTheDocument();\n            }\n          });\n        }\n      }\n    });\n  });\n\n  describe('Demands Form with File Attachments', () => {\n    const DemandsPage = require('../../client/src/pages/ResidentDemandsPage.tsx').default;\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n      // Mock successful upload response\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: async () => ({\n          fileUrls: ['/uploads/demands/test-file.png'],\n          fileCount: 1,\n          message: 'Files uploaded successfully'\n        }),\n      });\n    });\n\n    it('should render demands form with file upload capability', async () => {\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      // Look for submit demand button\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i) ||\n                          screen.queryByText(/create.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        // Look for file upload component\n        const fileUpload = screen.queryByTestId('file-upload-container') ||\n                          screen.queryByText(/drag.*drop/i) ||\n                          screen.queryByText(/attach.*files/i) ||\n                          screen.queryByRole('button', { name: /upload/i });\n        \n        expect(fileUpload).toBeTruthy();\n      }\n    });\n\n    it('should handle single file attachment to demands', async () => {\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        // Fill required fields\n        const typeSelect = screen.queryByTestId('select-demand-type') ||\n                          screen.queryByLabelText(/type/i);\n        const descriptionInput = screen.queryByTestId('textarea-demand-description') ||\n                                screen.queryByLabelText(/description/i) ||\n                                screen.queryByPlaceholderText(/description/i);\n\n        if (typeSelect && descriptionInput) {\n          await userEvent.selectOptions(typeSelect, 'maintenance');\n          await userEvent.type(descriptionInput, 'Kitchen faucet is leaking and needs immediate repair. Water is dripping constantly.');\n\n          // Find file upload area\n          const fileUploadArea = screen.queryByTestId('file-upload-container') ||\n                                screen.queryByText(/drag.*drop/i);\n\n          if (fileUploadArea) {\n            const mockFile = createMockImage('leak-photo.png');\n            \n            // Simulate file drop\n            const fileInput = screen.queryByRole('input', { hidden: true }) ||\n                             document.querySelector('input[type=\"file\"]');\n\n            if (fileInput) {\n              Object.defineProperty(fileInput, 'files', {\n                value: [mockFile],\n                writable: false,\n              });\n\n              fireEvent.change(fileInput, { target: { files: [mockFile] } });\n\n              // Wait for file to be processed\n              await waitFor(() => {\n                const filePreview = screen.queryByText('leak-photo.png') ||\n                                   screen.queryByTestId('file-preview-0');\n                expect(filePreview).toBeTruthy();\n              });\n\n              // Submit the demand\n              const finalSubmitButton = screen.queryByTestId('button-submit-demand-form') ||\n                                       screen.queryByRole('button', { name: /submit.*demand/i });\n              \n              if (finalSubmitButton) {\n                await userEvent.click(finalSubmitButton);\n\n                await waitFor(() => {\n                  // Verify file upload was called\n                  expect(mockFetch).toHaveBeenCalledWith(\n                    '/api/upload',\n                    expect.objectContaining({\n                      method: 'POST',\n                      body: expect.any(FormData),\n                    })\n                  );\n\n                  // Verify demand creation was called with attachments\n                  expect(mockFetch).toHaveBeenCalledWith(\n                    '/api/demands',\n                    expect.objectContaining({\n                      method: 'POST',\n                      headers: expect.objectContaining({\n                        'Content-Type': 'application/json',\n                      }),\n                      body: expect.stringContaining('attachments'),\n                    })\n                  );\n                });\n              }\n            }\n          }\n        }\n      }\n    });\n\n    it('should handle multiple file attachments to demands', async () => {\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        const typeSelect = screen.queryByTestId('select-demand-type');\n        const descriptionInput = screen.queryByTestId('textarea-demand-description') ||\n                                screen.queryByLabelText(/description/i);\n\n        if (typeSelect && descriptionInput) {\n          await userEvent.selectOptions(typeSelect, 'complaint');\n          await userEvent.type(descriptionInput, 'Multiple issues with apartment including water damage and electrical problems. Photos attached for evidence.');\n\n          const fileInput = document.querySelector('input[type=\"file\"]');\n\n          if (fileInput) {\n            const mockFiles = [\n              createMockImage('water-damage.jpg'),\n              createMockImage('electrical-issue.png'),\n              createMockPDF('inspection-report.pdf')\n            ];\n\n            // Simulate multiple file selection\n            Object.defineProperty(fileInput, 'files', {\n              value: mockFiles,\n              writable: false,\n            });\n\n            fireEvent.change(fileInput, { target: { files: mockFiles } });\n\n            // Wait for files to be processed\n            await waitFor(() => {\n              const fileCount = screen.queryByText(/3.*files/i) ||\n                               screen.queryAllByTestId(/file-preview-/);\n              expect(fileCount).toBeTruthy();\n            });\n\n            // Update mock for multiple files\n            mockFetch.mockResolvedValueOnce({\n              ok: true,\n              json: async () => ({\n                fileUrls: [\n                  '/uploads/demands/water-damage.jpg',\n                  '/uploads/demands/electrical-issue.png', \n                  '/uploads/demands/inspection-report.pdf'\n                ],\n                fileCount: 3\n              }),\n            });\n\n            const finalSubmitButton = screen.queryByTestId('button-submit-demand-form') ||\n                                     screen.queryByRole('button', { name: /submit/i });\n            \n            if (finalSubmitButton) {\n              await userEvent.click(finalSubmitButton);\n\n              await waitFor(() => {\n                expect(mockFetch).toHaveBeenCalledWith(\n                  '/api/upload',\n                  expect.objectContaining({\n                    method: 'POST',\n                    body: expect.any(FormData),\n                  })\n                );\n              });\n            }\n          }\n        }\n      }\n    });\n\n    it('should validate file size limits for demand attachments', async () => {\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        const fileInput = document.querySelector('input[type=\"file\"]');\n\n        if (fileInput) {\n          // Create oversized file (15MB - above 10MB limit)\n          const oversizedFile = createMockImage('huge-screenshot.png', 15 * 1024 * 1024);\n\n          Object.defineProperty(fileInput, 'files', {\n            value: [oversizedFile],\n            writable: false,\n          });\n\n          fireEvent.change(fileInput, { target: { files: [oversizedFile] } });\n\n          // Should show error message for oversized file\n          await waitFor(() => {\n            const errorMessage = screen.queryByText(/file.*too large/i) ||\n                                screen.queryByText(/size.*exceeded/i) ||\n                                screen.queryByText(/10.*mb.*limit/i) ||\n                                screen.queryByText(/maximum.*file.*size/i);\n            \n            if (errorMessage) {\n              expect(errorMessage).toBeInTheDocument();\n            }\n          });\n        }\n      }\n    });\n\n    it('should validate maximum file count for demand attachments', async () => {\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        const fileInput = document.querySelector('input[type=\"file\"]');\n\n        if (fileInput) {\n          // Try to upload 6 files (above 5 file limit)\n          const tooManyFiles = [\n            createMockImage('file1.png'),\n            createMockImage('file2.png'),\n            createMockImage('file3.png'),\n            createMockImage('file4.png'),\n            createMockImage('file5.png'),\n            createMockImage('file6.png') // This should trigger error\n          ];\n\n          Object.defineProperty(fileInput, 'files', {\n            value: tooManyFiles,\n            writable: false,\n          });\n\n          fireEvent.change(fileInput, { target: { files: tooManyFiles } });\n\n          // Should show error message for too many files\n          await waitFor(() => {\n            const errorMessage = screen.queryByText(/maximum.*5.*files/i) ||\n                                screen.queryByText(/too many.*files/i) ||\n                                screen.queryByText(/file.*limit.*exceeded/i);\n            \n            if (errorMessage) {\n              expect(errorMessage).toBeInTheDocument();\n            }\n          });\n        }\n      }\n    });\n\n    it('should validate allowed file types for demand attachments', async () => {\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        const fileInput = document.querySelector('input[type=\"file\"]');\n\n        if (fileInput) {\n          // Try uploading invalid file type\n          const invalidFile = createMockFile('malicious.exe', 1000, 'application/x-executable');\n\n          Object.defineProperty(fileInput, 'files', {\n            value: [invalidFile],\n            writable: false,\n          });\n\n          fireEvent.change(fileInput, { target: { files: [invalidFile] } });\n\n          await waitFor(() => {\n            const errorMessage = screen.queryByText(/file.*type.*not.*supported/i) ||\n                                screen.queryByText(/invalid.*file.*format/i) ||\n                                screen.queryByText(/only.*images.*pdf.*documents/i);\n            \n            if (errorMessage) {\n              expect(errorMessage).toBeInTheDocument();\n            }\n          });\n        }\n      }\n    });\n\n    it('should handle screenshot paste functionality (Ctrl+V)', async () => {\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        const fileUploadArea = screen.queryByTestId('file-upload-container');\n\n        if (fileUploadArea) {\n          // Mock clipboard data\n          const clipboardData = {\n            items: [\n              {\n                kind: 'file',\n                type: 'image/png',\n                getAsFile: () => createMockImage('pasted-screenshot.png')\n              }\n            ]\n          };\n\n          // Simulate paste event\n          fireEvent.paste(fileUploadArea, {\n            clipboardData: clipboardData\n          });\n\n          // Should show pasted file\n          await waitFor(() => {\n            const pastedFile = screen.queryByText(/pasted.*screenshot/i) ||\n                              screen.queryByText(/screenshot.*pasted/i) ||\n                              screen.queryByTestId('file-preview-0');\n            \n            if (pastedFile) {\n              expect(pastedFile).toBeInTheDocument();\n            }\n          });\n        }\n      }\n    });\n\n    it('should handle network errors during file upload in demands', async () => {\n      // Mock upload failure\n      mockFetch.mockRejectedValueOnce(new Error('Upload failed'));\n\n      render(\n        <>\n          <DemandsPage />\n        </>\n      );\n\n      const submitButton = screen.queryByTestId('button-submit-demand') || \n                          screen.queryByText(/submit.*demand/i);\n      \n      if (submitButton) {\n        await userEvent.click(submitButton);\n\n        const typeSelect = screen.queryByTestId('select-demand-type');\n        const descriptionInput = screen.queryByTestId('textarea-demand-description') ||\n                                screen.queryByLabelText(/description/i);\n\n        if (typeSelect && descriptionInput) {\n          await userEvent.selectOptions(typeSelect, 'maintenance');\n          await userEvent.type(descriptionInput, 'Test demand with file that will fail to upload');\n\n          const fileInput = document.querySelector('input[type=\"file\"]');\n\n          if (fileInput) {\n            const mockFile = createMockImage('test-file.png');\n\n            Object.defineProperty(fileInput, 'files', {\n              value: [mockFile],\n              writable: false,\n            });\n\n            fireEvent.change(fileInput, { target: { files: [mockFile] } });\n\n            const finalSubmitButton = screen.queryByTestId('button-submit-demand-form') ||\n                                     screen.queryByRole('button', { name: /submit/i });\n            \n            if (finalSubmitButton) {\n              await userEvent.click(finalSubmitButton);\n\n              // Should show error message for upload failure\n              await waitFor(() => {\n                const errorMessage = screen.queryByText(/upload.*failed/i) ||\n                                    screen.queryByText(/error.*uploading/i) ||\n                                    screen.queryByText(/failed.*attach/i);\n                \n                if (errorMessage) {\n                  expect(errorMessage).toBeInTheDocument();\n                }\n              });\n            }\n          }\n        }\n      }\n    });\n\n    it('should display attached files in demand details popup', async () => {\n      // Mock demand with attachments\n      const mockDemandWithAttachments = {\n        id: 'demand-123',\n        type: 'maintenance',\n        description: 'Leak in bathroom ceiling',\n        attachments: [\n          '/uploads/demands/leak-photo-1.jpg',\n          '/uploads/demands/damage-report.pdf'\n        ],\n        status: 'submitted',\n        submitterId: 'user-123',\n        buildingId: 'building-123',\n        createdAt: '2024-09-05T10:00:00Z',\n        updatedAt: '2024-09-05T10:00:00Z',\n        submitter: {\n          id: 'user-123',\n          firstName: 'Test',\n          lastName: 'User',\n          email: 'test@test.com'\n        },\n        building: {\n          id: 'building-123',\n          name: 'Test Building',\n          address: '123 Test St'\n        }\n      };\n\n      // Mock the demand details popup component\n      const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;\n\n      mockApiRequest.mockResolvedValue([]); // Mock comments\n\n      render(\n        <>\n          <DemandDetailsPopup\n            demand={mockDemandWithAttachments}\n            isOpen={true}\n            onClose={jest.fn()}\n            user={mockAuth.user}\n          />\n        </>\n      );\n\n      // Should show attachments section\n      await waitFor(() => {\n        const attachmentsLabel = screen.queryByText(/attachments/i) ||\n                                screen.queryByText(/attached.*files/i);\n        expect(attachmentsLabel).toBeTruthy();\n      });\n\n      // Should show file count\n      const fileCount = screen.queryByText(/2/i) || // (2) in label\n                       screen.queryByText(/2.*files/i);\n      expect(fileCount).toBeTruthy();\n\n      // Should show individual files\n      const photoFile = screen.queryByText(/leak-photo-1\\.jpg/i);\n      const pdfFile = screen.queryByText(/damage-report\\.pdf/i);\n      expect(photoFile).toBeTruthy();\n      expect(pdfFile).toBeTruthy();\n\n      // Should have view/download buttons\n      const viewButtons = screen.queryAllByText(/view|download/i);\n      expect(viewButtons.length).toBeGreaterThan(0);\n    });\n\n    it('should handle viewing attached files from demand details', async () => {\n      const mockDemandWithImage = {\n        id: 'demand-456',\n        type: 'complaint',\n        description: 'Issue with windows',\n        attachments: ['/uploads/demands/window-problem.png'],\n        status: 'submitted',\n        submitterId: 'user-123',\n        buildingId: 'building-123',\n        createdAt: '2024-09-05T10:00:00Z',\n        updatedAt: '2024-09-05T10:00:00Z'\n      };\n\n      const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;\n\n      mockApiRequest.mockResolvedValue([]);\n      \n      // Mock window.open\n      global.open = jest.fn() as jest.MockedFunction<typeof window.open>;\n\n      render(\n        <>\n          <DemandDetailsPopup\n            demand={mockDemandWithImage}\n            isOpen={true}\n            onClose={jest.fn()}\n            user={mockAuth.user}\n          />\n        </>\n      );\n\n      await waitFor(() => {\n        const viewButton = screen.queryByTestId('button-view-attachment-0') ||\n                          screen.queryByText(/view/i);\n        \n        if (viewButton) {\n          expect(viewButton).toBeInTheDocument();\n        }\n      });\n\n      // Click view button\n      const viewButton = screen.queryByTestId('button-view-attachment-0') ||\n                        screen.queryByText(/view/i);\n      \n      if (viewButton) {\n        await userEvent.click(viewButton);\n\n        // Should open file in new window\n        expect(global.open).toHaveBeenCalledWith('/uploads/demands/window-problem.png', '_blank');\n      }\n    });\n\n    it('should not show attachments section when demand has no files', async () => {\n      const mockDemandWithoutAttachments = {\n        id: 'demand-789',\n        type: 'information',\n        description: 'General inquiry',\n        attachments: [], // No attachments\n        status: 'submitted',\n        submitterId: 'user-123',\n        buildingId: 'building-123',\n        createdAt: '2024-09-05T10:00:00Z',\n        updatedAt: '2024-09-05T10:00:00Z'\n      };\n\n      const DemandDetailsPopup = require('../../client/src/components/demands/demand-details-popup.tsx').default;\n\n      mockApiRequest.mockResolvedValue([]);\n\n      render(\n        <>\n          <DemandDetailsPopup\n            demand={mockDemandWithoutAttachments}\n            isOpen={true}\n            onClose={jest.fn()}\n            user={mockAuth.user}\n          />\n        </>\n      );\n\n      // Should NOT show attachments section\n      await waitFor(() => {\n        const attachmentsSection = screen.queryByText(/attachments/i);\n        expect(attachmentsSection).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('General File Upload Validation', () => {\n    it('should handle network errors during file upload', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      render(\n        <>\n          <div data-testid=\"test-upload-form\">\n            {/* Minimal form for testing */}\n            <input \n              type=\"file\" \n              data-testid=\"file-input\"\n              onChange={(e) => {\n                const formData = new FormData();\n                if (e.target.files?.[0]) {\n                  formData.append('file', e.target.files[0]);\n                  fetch('/api/upload', { method: 'POST', body: formData });\n                }\n              }}\n            />\n          </div>\n        </>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const mockFile = createMockImage('test.png');\n\n      Object.defineProperty(fileInput, 'files', {\n        value: [mockFile],\n        writable: false,\n      });\n\n      fireEvent.change(fileInput, { target: { files: [mockFile] } });\n\n      await waitFor(() => {\n        expect(mockFetch).toHaveBeenCalledWith(\n          '/api/upload',\n          expect.objectContaining({\n            method: 'POST',\n            body: expect.any(FormData),\n          })\n        );\n      });\n    });\n\n    it('should handle empty file selection', () => {\n      render(\n        <>\n          <input \n            type=\"file\" \n            data-testid=\"file-input\"\n            onChange={() => {\n              // Should not trigger any upload\n            }}\n          />\n        </>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n\n      // Simulate empty file selection\n      fireEvent.change(fileInput, { target: { files: [] } });\n\n      expect(mockFetch).not.toHaveBeenCalled();\n      expect(mockApiRequest).not.toHaveBeenCalled();\n    });\n\n    it('should respect maximum file count limits', () => {\n      const MAX_FILES = 3;\n\n      render(\n        <>\n          <input \n            type=\"file\" \n            multiple\n            data-testid=\"file-input\"\n            onChange={(e) => {\n              if (e.target.files && e.target.files.length > MAX_FILES) {\n                throw new Error(`Maximum ${MAX_FILES} files allowed`);\n              }\n            }}\n          />\n        </>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const tooManyFiles = [\n        createMockImage('1.png'),\n        createMockImage('2.png'),\n        createMockImage('3.png'),\n        createMockImage('4.png'), // One too many\n      ];\n\n      Object.defineProperty(fileInput, 'files', {\n        value: tooManyFiles,\n        writable: false,\n      });\n\n      expect(() => {\n        fireEvent.change(fileInput, { target: { files: tooManyFiles } });\n      }).toThrow(/Maximum.*files.*allowed/);\n    });\n  });\n\n  describe('File Upload Progress and Feedback', () => {\n    it('should show upload progress for large files', async () => {\n      const mockUploadProgress = jest.fn();\n      \n      // Mock XMLHttpRequest for progress tracking\n      const mockXHR = {\n        upload: {\n          addEventListener: jest.fn((event, callback) => {\n            if (event === 'progress') {\n              // Simulate progress updates\n              setTimeout(() => callback({ loaded: 50, total: 100 }), 100);\n              setTimeout(() => callback({ loaded: 100, total: 100 }), 200);\n            }\n          }),\n        },\n        addEventListener: jest.fn(),\n        open: jest.fn(),\n        send: jest.fn(),\n        setRequestHeader: jest.fn(),\n      };\n\n      global.XMLHttpRequest = jest.fn(() => mockXHR) as any;\n\n      render(\n        <>\n          <div data-testid=\"upload-with-progress\">\n            <input \n              type=\"file\"\n              data-testid=\"file-input\"\n              onChange={mockUploadProgress}\n            />\n            <div data-testid=\"progress-indicator\">0%</div>\n          </div>\n        </>\n      );\n\n      const fileInput = screen.getByTestId('file-input');\n      const largeFile = createMockImage('large-image.png', 10 * 1024 * 1024); // 10MB\n\n      Object.defineProperty(fileInput, 'files', {\n        value: [largeFile],\n        writable: false,\n      });\n\n      fireEvent.change(fileInput, { target: { files: [largeFile] } });\n\n      expect(mockUploadProgress).toHaveBeenCalledWith(\n        expect.objectContaining({\n          target: expect.objectContaining({\n            files: expect.arrayContaining([largeFile])\n          })\n        })\n      );\n    });\n  });\n});"],"version":3}