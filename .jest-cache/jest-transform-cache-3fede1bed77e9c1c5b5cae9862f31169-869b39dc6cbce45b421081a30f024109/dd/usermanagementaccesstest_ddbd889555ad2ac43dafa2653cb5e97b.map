{"file":"/home/runner/workspace/tests/integration/user-management-access.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/user-management-access.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport { db } from '../../server/db';\nimport { users, organizations, userOrganizations } from '../../shared/schema';\nimport { eq, inArray } from 'drizzle-orm';\nimport * as bcrypt from 'bcryptjs';\n\n/**\n * User Management Access Control Test\n * \n * Tests access control for /manager/user-management route:\n * - Managers should see, edit, delete, create users in their organization\n * - Demo managers should only see other demo role users\n * - Regular managers should not see demo users\n * - Proper CRUD operations based on role permissions\n */\n\ndescribe('User Management Access Control', () => {\n  // Test data setup\n  const testData = {\n    // Organizations\n    regularOrg: {\n      id: 'org-regular-test',\n      name: 'Regular Test Organization',\n      type: 'management_company',\n      address: '123 Test Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1'\n    },\n    demoOrg: {\n      id: 'org-demo-test',\n      name: 'Demo Test Organization',\n      type: 'demo',\n      address: '456 Demo Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1B 1B1'\n    },\n    // Users\n    adminUser: {\n      username: 'admin-test',\n      email: 'admin@test.koveo.com',\n      password: 'admin123',\n      firstName: 'Admin',\n      lastName: 'User',\n      role: 'admin' as const,\n      language: 'en',\n      isActive: true\n    },\n    regularManager: {\n      username: 'manager-regular',\n      email: 'manager@test.koveo.com', \n      password: 'manager123',\n      firstName: 'Regular',\n      lastName: 'Manager',\n      role: 'manager' as const,\n      language: 'en',\n      isActive: true\n    },\n    demoManager: {\n      username: 'demo-manager',\n      email: 'demo-manager@test.koveo.com',\n      password: 'demo123',\n      firstName: 'Demo',\n      lastName: 'Manager',\n      role: 'demo_manager' as const,\n      language: 'en',\n      isActive: true\n    },\n    regularTenant: {\n      username: 'tenant-regular',\n      email: 'tenant@test.koveo.com',\n      password: 'tenant123',\n      firstName: 'Regular',\n      lastName: 'Tenant',\n      role: 'tenant' as const,\n      language: 'en',\n      isActive: true\n    },\n    demoTenant: {\n      username: 'demo-tenant',\n      email: 'demo-tenant@test.koveo.com',\n      password: 'demo123',\n      firstName: 'Demo',\n      lastName: 'Tenant',\n      role: 'demo_tenant' as const,\n      language: 'en',\n      isActive: true\n    },\n    demoResident: {\n      username: 'demo-resident',\n      email: 'demo-resident@test.koveo.com',\n      password: 'demo123',\n      firstName: 'Demo',\n      lastName: 'Resident',\n      role: 'demo_resident' as const,\n      language: 'en',\n      isActive: true\n    }\n  };\n\n  let createdUserIds: string[] = [];\n  let createdOrgIds: string[] = [];\n\n  beforeAll(async () => {\n    // Clean up any existing test data\n    await db.delete(users).where(inArray(users.email, [\n      testData.adminUser.email,\n      testData.regularManager.email,\n      testData.demoManager.email,\n      testData.regularTenant.email,\n      testData.demoTenant.email,\n      testData.demoResident.email\n    ]));\n    \n    await db.delete(organizations).where(inArray(organizations.id, [\n      testData.regularOrg.id,\n      testData.demoOrg.id\n    ]));\n\n    // Create test organizations\n    await db.insert(organizations).values([testData.regularOrg, testData.demoOrg]);\n    createdOrgIds = [testData.regularOrg.id, testData.demoOrg.id];\n\n    // Create test users with hashed passwords\n    const usersToCreate = [\n      testData.adminUser,\n      testData.regularManager,\n      testData.demoManager,\n      testData.regularTenant,\n      testData.demoTenant,\n      testData.demoResident\n    ];\n\n    for (const user of usersToCreate) {\n      const hashedPassword = await bcrypt.hash(user.password, 10);\n      const createdUser = await db.insert(users).values({\n        username: user.username,\n        email: user.email,\n        password: hashedPassword,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role,\n        language: user.language,\n        isActive: user.isActive\n      }).returning({ id: users.id });\n      \n      createdUserIds.push(createdUser[0].id);\n      \n      // Assign users to organizations\n      if (user.role.startsWith('demo')) {\n        // Demo users go to demo organization\n        await db.insert(userOrganizations).values({\n          userId: createdUser[0].id,\n          organizationId: testData.demoOrg.id\n        });\n      } else {\n        // Regular users go to regular organization\n        await db.insert(userOrganizations).values({\n          userId: createdUser[0].id,\n          organizationId: testData.regularOrg.id\n        });\n      }\n    }\n  });\n\n  afterAll(async () => {\n    // Clean up test data\n    if (createdUserIds.length > 0) {\n      await db.delete(userOrganizations).where(inArray(userOrganizations.userId, createdUserIds));\n      await db.delete(users).where(inArray(users.id, createdUserIds));\n    }\n    \n    if (createdOrgIds.length > 0) {\n      await db.delete(organizations).where(inArray(organizations.id, createdOrgIds));\n    }\n  });\n\n  describe('Organization-based User Access', () => {\n    it('should verify test users are in correct organizations', async () => {\n      // Verify regular manager is in regular org\n      const regularManagerOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .leftJoin(users, eq(userOrganizations.userId, users.id))\n        .where(eq(users.email, testData.regularManager.email));\n\n      expect(regularManagerOrgs).toHaveLength(1);\n      expect(regularManagerOrgs[0].organizationId).toBe(testData.regularOrg.id);\n\n      // Verify demo manager is in demo org\n      const demoManagerOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .leftJoin(users, eq(userOrganizations.userId, users.id))\n        .where(eq(users.email, testData.demoManager.email));\n\n      expect(demoManagerOrgs).toHaveLength(1);\n      expect(demoManagerOrgs[0].organizationId).toBe(testData.demoOrg.id);\n    });\n\n    it('should have demo users only in demo organization', async () => {\n      const demoUsers = await db\n        .select({ \n          email: users.email,\n          role: users.role,\n          organizationId: userOrganizations.organizationId \n        })\n        .from(users)\n        .leftJoin(userOrganizations, eq(users.id, userOrganizations.userId))\n        .where(inArray(users.role, ['demo_manager', 'demo_tenant', 'demo_resident']));\n\n      expect(demoUsers.length).toBeGreaterThan(0);\n      \n      // All demo users should be in demo organization\n      for (const user of demoUsers) {\n        expect(user.organizationId).toBe(testData.demoOrg.id);\n      }\n    });\n\n    it('should have regular users only in regular organization', async () => {\n      const regularUsers = await db\n        .select({\n          email: users.email,\n          role: users.role,\n          organizationId: userOrganizations.organizationId\n        })\n        .from(users)\n        .leftJoin(userOrganizations, eq(users.id, userOrganizations.userId))\n        .where(inArray(users.role, ['manager', 'tenant', 'resident']));\n\n      const testUsers = regularUsers.filter(u => \n        u.email && u.email.includes('@test.koveo.com')\n      );\n\n      expect(testUsers.length).toBeGreaterThan(0);\n      \n      // All regular test users should be in regular organization  \n      for (const user of testUsers) {\n        expect(user.organizationId).toBe(testData.regularOrg.id);\n      }\n    });\n  });\n\n  describe('API Endpoint Access Control', () => {\n    async function loginUser(email: string, password: string): Promise<string | null> {\n      try {\n        const response = await fetch('http://localhost:5000/api/auth/login', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ email, password })\n        });\n\n        if (response.ok) {\n          const cookies = response.headers.get('set-cookie');\n          return cookies;\n        }\n        return null;\n      } catch (error) {\n        console.error('Login failed:', error);\n        return null;\n      }\n    }\n\n    async function fetchUsersAsRole(email: string, password: string): Promise<any[]> {\n      const cookies = await loginUser(email, password);\n      if (!cookies) {\n        throw new Error(`Failed to login as ${email}`);\n      }\n\n      const response = await fetch('http://localhost:5000/api/users', {\n        headers: { 'Cookie': cookies }\n      });\n\n      if (response.ok) {\n        return await response.json();\n      } else {\n        throw new Error(`Failed to fetch users: ${response.status}`);\n      }\n    }\n\n    it('should allow admin to see all users including demo users', async () => {\n      const users = await fetchUsersAsRole(testData.adminUser.email, testData.adminUser.password);\n      \n      expect(users.length).toBeGreaterThan(0);\n      \n      // Admin should see both regular and demo users\n      const userRoles = users.map(u => u.role);\n      const hasRegularUsers = userRoles.some(role => ['manager', 'tenant', 'resident'].includes(role));\n      const hasDemoUsers = userRoles.some(role => role.startsWith('demo'));\n      \n      expect(hasRegularUsers).toBe(true);\n      expect(hasDemoUsers).toBe(true);\n    });\n\n    it('should allow regular manager to see only users in their organization', async () => {\n      const users = await fetchUsersAsRole(testData.regularManager.email, testData.regularManager.password);\n      \n      expect(users.length).toBeGreaterThan(0);\n      \n      // Regular manager should only see regular users, no demo users\n      const userRoles = users.map(u => u.role);\n      const hasDemoUsers = userRoles.some(role => role.startsWith('demo'));\n      \n      expect(hasDemoUsers).toBe(false);\n      \n      // Should see users from their organization (including themselves)\n      const hasRegularUsers = userRoles.some(role => ['admin', 'manager', 'tenant', 'resident'].includes(role));\n      expect(hasRegularUsers).toBe(true);\n    });\n\n    it('should allow demo manager to see only demo role users', async () => {\n      const users = await fetchUsersAsRole(testData.demoManager.email, testData.demoManager.password);\n      \n      expect(users.length).toBeGreaterThan(0);\n      \n      // Demo manager should only see demo users\n      const userRoles = users.map(u => u.role);\n      const hasNonDemoUsers = userRoles.some(role => !role.startsWith('demo'));\n      \n      expect(hasNonDemoUsers).toBe(false);\n      \n      // Should see demo users (including themselves)\n      const hasDemoUsers = userRoles.some(role => role.startsWith('demo'));\n      expect(hasDemoUsers).toBe(true);\n    });\n  });\n\n  describe('User Management CRUD Operations', () => {\n    it('should verify manager can edit users in their organization', async () => {\n      // This test would check the PUT /api/users/:id endpoint\n      // For now, we'll test the access logic by verifying organization membership\n      \n      const regularManager = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testData.regularManager.email))\n        .then(results => results[0]);\n\n      const regularTenant = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testData.regularTenant.email))\n        .then(results => results[0]);\n\n      expect(regularManager).toBeDefined();\n      expect(regularTenant).toBeDefined();\n\n      // Verify they're in the same organization\n      const managerOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .where(eq(userOrganizations.userId, regularManager.id));\n\n      const tenantOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .where(eq(userOrganizations.userId, regularTenant.id));\n\n      expect(managerOrgs[0]?.organizationId).toBe(tenantOrgs[0]?.organizationId);\n    });\n\n    it('should verify demo manager cannot access regular users', async () => {\n      const demoManager = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testData.demoManager.email))\n        .then(results => results[0]);\n\n      const regularTenant = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testData.regularTenant.email))\n        .then(results => results[0]);\n\n      expect(demoManager).toBeDefined();\n      expect(regularTenant).toBeDefined();\n\n      // Verify they're in different organizations\n      const demoManagerOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .where(eq(userOrganizations.userId, demoManager.id));\n\n      const regularTenantOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .where(eq(userOrganizations.userId, regularTenant.id));\n\n      expect(demoManagerOrgs[0]?.organizationId).not.toBe(regularTenantOrgs[0]?.organizationId);\n    });\n\n    it('should verify role-based access permissions', async () => {\n      const allUsers = await db.select().from(users);\n      const testUsers = allUsers.filter(u => u.email.includes('@test.koveo.com'));\n\n      // Group users by role\n      const usersByRole = {\n        admin: testUsers.filter(u => u.role === 'admin'),\n        manager: testUsers.filter(u => u.role === 'manager'),\n        demo_manager: testUsers.filter(u => u.role === 'demo_manager'),\n        tenant: testUsers.filter(u => u.role === 'tenant'),\n        demo_tenant: testUsers.filter(u => u.role === 'demo_tenant'),\n        demo_resident: testUsers.filter(u => u.role === 'demo_resident')\n      };\n\n      // Verify we have the expected roles\n      expect(usersByRole.admin.length).toBeGreaterThanOrEqual(1);\n      expect(usersByRole.manager.length).toBeGreaterThanOrEqual(1);\n      expect(usersByRole.demo_manager.length).toBeGreaterThanOrEqual(1);\n      expect(usersByRole.tenant.length).toBeGreaterThanOrEqual(1);\n      expect(usersByRole.demo_tenant.length).toBeGreaterThanOrEqual(1);\n      expect(usersByRole.demo_resident.length).toBeGreaterThanOrEqual(1);\n    });\n  });\n\n  describe('Demo User Isolation', () => {\n    it('should ensure demo and regular users are properly isolated', async () => {\n      // Get all demo users\n      const demoUsers = await db\n        .select({ \n          id: users.id,\n          role: users.role,\n          organizationId: userOrganizations.organizationId \n        })\n        .from(users)\n        .leftJoin(userOrganizations, eq(users.id, userOrganizations.userId))\n        .where(inArray(users.role, ['demo_manager', 'demo_tenant', 'demo_resident']));\n\n      // Get all regular users from our test data\n      const regularUsers = await db\n        .select({\n          id: users.id, \n          role: users.role,\n          organizationId: userOrganizations.organizationId\n        })\n        .from(users)\n        .leftJoin(userOrganizations, eq(users.id, userOrganizations.userId))\n        .where(inArray(users.email, [\n          testData.adminUser.email,\n          testData.regularManager.email,\n          testData.regularTenant.email\n        ]));\n\n      // Verify demo users are only in demo organization\n      for (const demoUser of demoUsers) {\n        if (demoUser.organizationId) {\n          expect(demoUser.organizationId).toBe(testData.demoOrg.id);\n        }\n      }\n\n      // Verify regular users are not in demo organization\n      for (const regularUser of regularUsers) {\n        if (regularUser.organizationId && regularUser.role !== 'admin') {\n          expect(regularUser.organizationId).not.toBe(testData.demoOrg.id);\n        }\n      }\n    });\n\n    it('should verify demo organization type is properly set', async () => {\n      const demoOrg = await db\n        .select()\n        .from(organizations)\n        .where(eq(organizations.id, testData.demoOrg.id))\n        .then(results => results[0]);\n\n      expect(demoOrg).toBeDefined();\n      expect(demoOrg.type).toBe('demo');\n    });\n\n    it('should verify regular organization type is not demo', async () => {\n      const regularOrg = await db\n        .select()\n        .from(organizations)\n        .where(eq(organizations.id, testData.regularOrg.id))\n        .then(results => results[0]);\n\n      expect(regularOrg).toBeDefined();\n      expect(regularOrg.type).not.toBe('demo');\n      expect(regularOrg.type).toBe('management_company');\n    });\n  });\n\n  describe('Critical Access Control Issues', () => {\n    it('should detect if manager can access users outside their organization', async () => {\n      // This is a security test to ensure managers cannot access users from other organizations\n      const regularManagerUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testData.regularManager.email))\n        .then(results => results[0]);\n\n      const demoUsers = await db\n        .select()\n        .from(users)\n        .where(inArray(users.role, ['demo_manager', 'demo_tenant', 'demo_resident']));\n\n      expect(regularManagerUser).toBeDefined();\n      expect(demoUsers.length).toBeGreaterThan(0);\n\n      // Regular manager should not be able to access demo users\n      // This would be enforced by the API endpoint logic\n      const managerOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .where(eq(userOrganizations.userId, regularManagerUser.id));\n\n      const managerOrgIds = managerOrgs.map(org => org.organizationId);\n      \n      for (const demoUser of demoUsers) {\n        const demoUserOrgs = await db\n          .select({ organizationId: userOrganizations.organizationId })\n          .from(userOrganizations)\n          .where(eq(userOrganizations.userId, demoUser.id));\n        \n        const demoUserOrgIds = demoUserOrgs.map(org => org.organizationId);\n        const hasOverlap = managerOrgIds.some(id => demoUserOrgIds.includes(id));\n        \n        // Should have no organization overlap between regular manager and demo users\n        expect(hasOverlap).toBe(false);\n      }\n    });\n\n    it('should ensure demo manager can only see demo users', async () => {\n      const demoManagerUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, testData.demoManager.email))\n        .then(results => results[0]);\n\n      expect(demoManagerUser).toBeDefined();\n      expect(demoManagerUser.role).toBe('demo_manager');\n\n      // Demo manager should only have access to demo organization\n      const demoManagerOrgs = await db\n        .select({ organizationId: userOrganizations.organizationId })\n        .from(userOrganizations)\n        .where(eq(userOrganizations.userId, demoManagerUser.id));\n\n      expect(demoManagerOrgs).toHaveLength(1);\n      expect(demoManagerOrgs[0].organizationId).toBe(testData.demoOrg.id);\n    });\n  });\n});"],"version":3}