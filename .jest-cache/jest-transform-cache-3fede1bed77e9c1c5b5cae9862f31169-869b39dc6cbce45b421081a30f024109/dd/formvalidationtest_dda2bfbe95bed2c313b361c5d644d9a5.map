{"file":"/home/runner/workspace/tests/unit/form-validation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/form-validation.test.ts"],"sourcesContent":["/**\n * Comprehensive Form Validation Test Suite\n * Tests all form validation rules and ensures consistency across the application\n */\n\nimport { z } from 'zod';\nimport { describe, test, expect } from '@jest/globals';\n\ndescribe('Form Validation Rules Compliance', () => {\n  describe('Error Message Quality Standards', () => {\n    test('should require detailed error messages with examples for string fields', () => {\n      // Test that error messages are descriptive and include examples\n      const emailSchema = z.string().email('Please enter a valid email address (example: user@domain.com)');\n      const nameSchema = z.string().min(1, 'First name is required (example: Jean)');\n      const phoneSchema = z.string().regex(/^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)');\n\n      // Test valid inputs\n      expect(() => emailSchema.parse('user@domain.com')).not.toThrow();\n      expect(() => nameSchema.parse('Jean')).not.toThrow();\n      expect(() => phoneSchema.parse('(514) 123-4567')).not.toThrow();\n\n      // Test invalid inputs return detailed error messages\n      const emailResult = emailSchema.safeParse('invalid-email');\n      const nameResult = nameSchema.safeParse('');\n      const phoneResult = phoneSchema.safeParse('123');\n\n      expect(emailResult.success).toBe(false);\n      expect(nameResult.success).toBe(false);\n      expect(phoneResult.success).toBe(false);\n\n      if (!emailResult.success) {\n        expect(emailResult.error.issues[0].message).toContain('example:');\n        expect(emailResult.error.issues[0].message).toContain('@');\n      }\n      if (!nameResult.success) {\n        expect(nameResult.error.issues[0].message).toContain('example:');\n      }\n      if (!phoneResult.success) {\n        expect(phoneResult.error.issues[0].message).toContain('example:');\n        expect(phoneResult.error.issues[0].message).toContain('(514)');\n      }\n    });\n\n    test('should enforce length limits with clear error messages', () => {\n      const titleSchema = z.string().min(1, 'Title is required (example: Monthly Meeting Minutes)').max(200, 'Title must be less than 200 characters');\n      const descriptionSchema = z.string().max(1000, 'Description must be less than 1000 characters');\n\n      // Test length violations\n      const longTitle = 'A'.repeat(201);\n      const longDescription = 'A'.repeat(1001);\n\n      const titleResult = titleSchema.safeParse(longTitle);\n      const descriptionResult = descriptionSchema.safeParse(longDescription);\n\n      expect(titleResult.success).toBe(false);\n      expect(descriptionResult.success).toBe(false);\n\n      if (!titleResult.success) {\n        expect(titleResult.error.issues[0].message).toContain('less than');\n        expect(titleResult.error.issues[0].message).toContain('200');\n      }\n      if (!descriptionResult.success) {\n        expect(descriptionResult.error.issues[0].message).toContain('less than');\n        expect(descriptionResult.error.issues[0].message).toContain('1000');\n      }\n    });\n\n    test('should validate Quebec-specific formats', () => {\n      const postalCodeSchema = z.string().regex(/^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)');\n      const citySchema = z.string().regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens');\n\n      // Test valid Quebec formats\n      expect(() => postalCodeSchema.parse('H1A 1B1')).not.toThrow();\n      expect(() => postalCodeSchema.parse('H1A1B1')).not.toThrow();\n      expect(() => citySchema.parse('Montréal')).not.toThrow();\n      expect(() => citySchema.parse(\"Saint-Jean-sur-Richelieu\")).not.toThrow();\n\n      // Test invalid formats\n      const postalResult = postalCodeSchema.safeParse('12345');\n      const cityResult = citySchema.safeParse('City123');\n\n      expect(postalResult.success).toBe(false);\n      expect(cityResult.success).toBe(false);\n\n      if (!postalResult.success) {\n        expect(postalResult.error.issues[0].message).toContain('Canadian format');\n        expect(postalResult.error.issues[0].message).toContain('H1A 1B1');\n      }\n      if (!cityResult.success) {\n        expect(cityResult.error.issues[0].message).toContain('letters, spaces, apostrophes');\n      }\n    });\n  });\n\n  describe('Numeric Field Validation Standards', () => {\n    test('should validate numeric ranges with clear bounds', () => {\n      const ageSchema = z.number().min(18, 'Age must be between 18 and 120 years').max(120, 'Age must be between 18 and 120 years');\n      const amountSchema = z.string().regex(/^\\d+(\\.\\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)');\n      const capacitySchema = z.number().min(1, 'Capacity must be between 1 and 500 people').max(500, 'Capacity must be between 1 and 500 people');\n\n      // Test valid ranges\n      expect(() => ageSchema.parse(25)).not.toThrow();\n      expect(() => amountSchema.parse('125.50')).not.toThrow();\n      expect(() => capacitySchema.parse(50)).not.toThrow();\n\n      // Test boundary violations\n      const ageResult = ageSchema.safeParse(17);\n      const amountResult = amountSchema.safeParse('125.555');\n      const capacityResult = capacitySchema.safeParse(501);\n\n      expect(ageResult.success).toBe(false);\n      expect(amountResult.success).toBe(false);\n      expect(capacityResult.success).toBe(false);\n\n      if (!ageResult.success) {\n        expect(ageResult.error.issues[0].message).toContain('between');\n      }\n      if (!amountResult.success) {\n        expect(amountResult.error.issues[0].message).toContain('decimal places');\n        expect(amountResult.error.issues[0].message).toContain('example:');\n      }\n    });\n  });\n\n  describe('Required Field Validation', () => {\n    test('should provide clear guidance for required selections', () => {\n      const organizationSchema = z.string().min(1, 'Please select an organization from the dropdown');\n      const roleSchema = z.string().min(1, 'Please select a user role');\n      const typeSchema = z.string().min(1, 'Please select an organization type from the dropdown');\n\n      const orgResult = organizationSchema.safeParse('');\n      const roleResult = roleSchema.safeParse('');\n      const typeResult = typeSchema.safeParse('');\n\n      expect(orgResult.success).toBe(false);\n      expect(roleResult.success).toBe(false);\n      expect(typeResult.success).toBe(false);\n\n      if (!orgResult.success) {\n        expect(orgResult.error.issues[0].message).toContain('select');\n        expect(orgResult.error.issues[0].message).toContain('dropdown');\n      }\n      if (!roleResult.success) {\n        expect(roleResult.error.issues[0].message).toContain('select');\n      }\n    });\n  });\n\n  describe('Quebec Law 25 Compliance Validation', () => {\n    test('should enforce privacy-compliant field validation', () => {\n      // Personal information fields must have enhanced protection\n      const firstNameSchema = z.string().min(1, 'First name is required (example: Jean)').max(50, 'First name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'First name can only contain letters, spaces, apostrophes and hyphens');\n      const lastNameSchema = z.string().min(1, 'Last name is required (example: Dupont)').max(50, 'Last name must be less than 50 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'Last name can only contain letters, spaces, apostrophes and hyphens');\n\n      // Test valid Quebec names\n      expect(() => firstNameSchema.parse('Jean-Baptiste')).not.toThrow();\n      expect(() => firstNameSchema.parse('Marie-Ève')).not.toThrow();\n      expect(() => lastNameSchema.parse(\"O'Connor\")).not.toThrow();\n      expect(() => lastNameSchema.parse('Lafleur-Dufresne')).not.toThrow();\n\n      // Test invalid inputs\n      const invalidFirst = firstNameSchema.safeParse('Jean123');\n      const invalidLast = lastNameSchema.safeParse('');\n\n      expect(invalidFirst.success).toBe(false);\n      expect(invalidLast.success).toBe(false);\n\n      if (!invalidFirst.success) {\n        expect(invalidFirst.error.issues[0].message).toContain('letters, spaces, apostrophes');\n      }\n      if (!invalidLast.success) {\n        expect(invalidLast.error.issues[0].message).toContain('example:');\n      }\n    });\n\n    test('should validate password security requirements', () => {\n      const passwordSchema = z.string()\n        .min(8, 'Password must be at least 8 characters long (example: MonNouveauMotDePasse123!)')\n        .max(100, 'Password must be less than 100 characters')\n        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, 'Password must contain at least one lowercase letter, one uppercase letter, and one number');\n\n      // Test valid passwords\n      expect(() => passwordSchema.parse('MonMotDePasse123!')).not.toThrow();\n      expect(() => passwordSchema.parse('SecurePass123')).not.toThrow();\n\n      // Test invalid passwords\n      const shortResult = passwordSchema.safeParse('short');\n      const noUpperResult = passwordSchema.safeParse('password123');\n      const noNumberResult = passwordSchema.safeParse('Password');\n\n      expect(shortResult.success).toBe(false);\n      expect(noUpperResult.success).toBe(false);\n      expect(noNumberResult.success).toBe(false);\n\n      if (!shortResult.success) {\n        expect(shortResult.error.issues[0].message).toContain('at least 8');\n        expect(shortResult.error.issues[0].message).toContain('example:');\n      }\n    });\n  });\n\n  describe('Time and Date Validation', () => {\n    test('should validate time formats with clear examples', () => {\n      const timeSchema = z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Time must be in HH:MM format (example: 09:00)');\n      const dateSchema = z.string().min(1, 'Date is required (select from calendar)');\n\n      // Test valid times\n      expect(() => timeSchema.parse('09:00')).not.toThrow();\n      expect(() => timeSchema.parse('23:59')).not.toThrow();\n      expect(() => timeSchema.parse('00:00')).not.toThrow();\n\n      // Test invalid times\n      const invalidTime = timeSchema.safeParse('25:00');\n      const invalidFormat = timeSchema.safeParse('9:0');\n\n      expect(invalidTime.success).toBe(false);\n      expect(invalidFormat.success).toBe(false);\n\n      if (!invalidTime.success) {\n        expect(invalidTime.error.issues[0].message).toContain('HH:MM');\n        expect(invalidTime.error.issues[0].message).toContain('example:');\n      }\n    });\n  });\n\n  describe('Business Logic Validation', () => {\n    test('should validate refinements with helpful error messages', () => {\n      const timeRangeSchema = z\n        .object({\n          startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'Start time must be in HH:MM format (example: 09:00)'),\n          endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, 'End time must be in HH:MM format (example: 11:00)'),\n        })\n        .refine(\n          (data) => {\n            const [startHour, startMin] = data.startTime.split(':').map(Number);\n            const [endHour, endMin] = data.endTime.split(':').map(Number);\n            const startMinutes = startHour * 60 + startMin;\n            const endMinutes = endHour * 60 + endMin;\n            return endMinutes > startMinutes;\n          },\n          {\n            message: 'End time must be after start time (example: start at 09:00, end at 11:00)',\n            path: ['endTime'],\n          }\n        );\n\n      // Test valid time range\n      expect(() => timeRangeSchema.parse({ startTime: '09:00', endTime: '11:00' })).not.toThrow();\n\n      // Test invalid time range\n      const result = timeRangeSchema.safeParse({ startTime: '11:00', endTime: '09:00' });\n      expect(result.success).toBe(false);\n\n      if (!result.success) {\n        expect(result.error.issues[0].message).toContain('after start time');\n        expect(result.error.issues[0].message).toContain('example:');\n      }\n    });\n\n    test('should validate password confirmation with clear messaging', () => {\n      const passwordSchema = z\n        .object({\n          newPassword: z.string().min(8, 'New password must be at least 8 characters long (example: MonNouveauMotDePasse123!)'),\n          confirmPassword: z.string().min(1, 'Please confirm your new password by typing it again'),\n        })\n        .refine((data) => data.newPassword === data.confirmPassword, {\n          message: \"Passwords don't match - please enter the same password in both fields\",\n          path: ['confirmPassword'],\n        });\n\n      // Test valid password confirmation\n      expect(() => passwordSchema.parse({ \n        newPassword: 'TestPassword123!', \n        confirmPassword: 'TestPassword123!' \n      })).not.toThrow();\n\n      // Test password mismatch\n      const result = passwordSchema.safeParse({ \n        newPassword: 'TestPassword123!', \n        confirmPassword: 'DifferentPassword123!' \n      });\n      expect(result.success).toBe(false);\n\n      if (!result.success) {\n        expect(result.error.issues[0].message).toContain(\"don't match\");\n        expect(result.error.issues[0].message).toContain('same password');\n      }\n    });\n  });\n\n  describe('Validation Pattern Enforcement', () => {\n    test('should enforce minimum character requirements for text fields', () => {\n      // All meaningful text fields should have minimum length requirements\n      const shortDescriptionSchema = z.string().min(10, 'Description must be at least 10 characters long (example: Detailed explanation of the issue)');\n      const titleSchema = z.string().min(1, 'Title is required (example: Document Title)');\n\n      const shortResult = shortDescriptionSchema.safeParse('short');\n      const emptyResult = titleSchema.safeParse('');\n\n      expect(shortResult.success).toBe(false);\n      expect(emptyResult.success).toBe(false);\n\n      if (!shortResult.success) {\n        expect(shortResult.error.issues[0].message).toContain('at least');\n        expect(shortResult.error.issues[0].message).toContain('example:');\n      }\n    });\n\n    test('should validate selection fields with guidance', () => {\n      const categorySchema = z.enum(['maintenance', 'complaint', 'information', 'other']);\n      const organizationSchema = z.string().min(1, 'Please select an organization from the dropdown');\n\n      // Test empty selection\n      const orgResult = organizationSchema.safeParse('');\n      expect(orgResult.success).toBe(false);\n\n      if (!orgResult.success) {\n        expect(orgResult.error.issues[0].message).toContain('select');\n        expect(orgResult.error.issues[0].message).toContain('dropdown');\n      }\n    });\n  });\n\n  describe('Bilingual Support Validation', () => {\n    test('should support both English and French error messages', () => {\n      // Some forms may use French error messages for Quebec compliance\n      const frenchDateSchema = z.date({ message: 'Please select a booking date from the calendar' });\n      const englishEmailSchema = z.string().email('Please enter a valid email address (example: user@domain.com)');\n\n      // Both should work and provide clear guidance\n      const dateResult = frenchDateSchema.safeParse('invalid-date');\n      const emailResult = englishEmailSchema.safeParse('invalid-email');\n\n      expect(dateResult.success).toBe(false);\n      expect(emailResult.success).toBe(false);\n\n      if (!dateResult.success) {\n        expect(dateResult.error.issues[0].message).toContain('select');\n        expect(dateResult.error.issues[0].message).toContain('calendar');\n      }\n      if (!emailResult.success) {\n        expect(emailResult.error.issues[0].message).toContain('valid email');\n        expect(emailResult.error.issues[0].message).toContain('example:');\n      }\n    });\n  });\n\n  describe('Form Consistency Standards', () => {\n    test('should enforce consistent error message patterns', () => {\n      // Test that all error messages follow consistent patterns:\n      // 1. Clear explanation of what's wrong\n      // 2. Include examples where helpful\n      // 3. Specify valid ranges/formats\n      // 4. Use friendly, helpful language\n\n      const patterns = [\n        {\n          schema: z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)'),\n          invalidInput: 'invalid-email',\n          shouldContain: ['valid email', 'example:', '@']\n        },\n        {\n          schema: z.string().min(1, 'First name is required (example: Jean)').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'First name can only contain letters, spaces, apostrophes and hyphens'),\n          invalidInput: 'John123',\n          shouldContain: ['can only contain', 'letters, spaces']\n        },\n        {\n          schema: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),\n          invalidInput: '125.555',\n          shouldContain: ['valid number', 'decimal places', 'example:']\n        }\n      ];\n\n      patterns.forEach(({ schema, invalidInput, shouldContain }) => {\n        const result = schema.safeParse(invalidInput);\n        expect(result.success).toBe(false);\n\n        if (!result.success) {\n          const errorMessage = result.error.issues[0].message;\n          shouldContain.forEach(pattern => {\n            expect(errorMessage).toContain(pattern);\n          });\n        }\n      });\n    });\n\n    test('should validate that all forms use proper character limits', () => {\n      // Standard character limits across the application\n      const limits = {\n        title: { max: 200, min: 1 },\n        description: { max: 1000, min: 10 },\n        shortText: { max: 100, min: 1 },\n        longText: { max: 2000, min: 10 },\n        name: { max: 50, min: 1 }\n      };\n\n      Object.entries(limits).forEach(([fieldType, { max, min }]) => {\n        const schema = z.string()\n          .min(min, `${fieldType} must be at least ${min} characters`)\n          .max(max, `${fieldType} must be less than ${max} characters`);\n\n        // Test boundary conditions\n        const tooShort = 'a'.repeat(min - 1);\n        const tooLong = 'a'.repeat(max + 1);\n        const justRight = 'a'.repeat(min);\n\n        expect(schema.safeParse(tooShort).success).toBe(false);\n        expect(schema.safeParse(tooLong).success).toBe(false);\n        expect(schema.safeParse(justRight).success).toBe(true);\n      });\n    });\n  });\n\n  describe('Security Validation Standards', () => {\n    test('should validate email confirmation for destructive actions', () => {\n      const deleteConfirmSchema = z.object({\n        confirmEmail: z.string().min(1, 'Email confirmation is required to delete account').email('Please enter a valid email address that matches your account'),\n        reason: z.string().max(500, 'Reason must be less than 500 characters').optional(),\n      });\n\n      const validResult = deleteConfirmSchema.safeParse({\n        confirmEmail: 'user@domain.com',\n        reason: 'No longer needed'\n      });\n\n      const invalidResult = deleteConfirmSchema.safeParse({\n        confirmEmail: '',\n        reason: 'a'.repeat(501)\n      });\n\n      expect(validResult.success).toBe(true);\n      expect(invalidResult.success).toBe(false);\n\n      if (!invalidResult.success) {\n        const errors = invalidResult.error.issues;\n        expect(errors.some(e => e.message.includes('Email confirmation is required'))).toBe(true);\n        expect(errors.some(e => e.message.includes('less than 500 characters'))).toBe(true);\n      }\n    });\n  });\n\n  describe('Future Form Compliance Validation', () => {\n    test('should provide template for future form validation schemas', () => {\n      // Template that all future forms should follow\n      const futureFormTemplate = z.object({\n        // Required text field with example\n        title: z.string()\n          .min(1, 'Title is required (example: Descriptive Title)')\n          .max(200, 'Title must be less than 200 characters'),\n        \n        // Optional text field with validation\n        description: z.string()\n          .max(1000, 'Description must be less than 1000 characters')\n          .optional(),\n        \n        // Email field with format example\n        email: z.string()\n          .min(1, 'Email address is required')\n          .email('Please enter a valid email address (example: user@domain.com)'),\n        \n        // Quebec-specific phone number\n        phone: z.string()\n          .regex(/^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)')\n          .optional(),\n        \n        // Numeric field with range\n        amount: z.string()\n          .min(1, 'Amount is required (example: 125.50)')\n          .regex(/^\\d+(\\.\\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),\n        \n        // Selection field\n        category: z.string()\n          .min(1, 'Please select a category from the dropdown')\n      });\n\n      // Test the template works correctly\n      const validData = {\n        title: 'Test Document',\n        description: 'This is a test description',\n        email: 'test@example.com',\n        phone: '(514) 123-4567',\n        amount: '125.50',\n        category: 'test'\n      };\n\n      const invalidData = {\n        title: '',\n        description: 'a'.repeat(1001),\n        email: 'invalid-email',\n        phone: '123',\n        amount: '125.555',\n        category: ''\n      };\n\n      expect(futureFormTemplate.safeParse(validData).success).toBe(true);\n      \n      const result = futureFormTemplate.safeParse(invalidData);\n      expect(result.success).toBe(false);\n\n      if (!result.success) {\n        const messages = result.error.issues.map(i => i.message);\n        expect(messages.some(m => m.includes('example:'))).toBe(true);\n        expect(messages.some(m => m.includes('valid email'))).toBe(true);\n        expect(messages.some(m => m.includes('select'))).toBe(true);\n      }\n    });\n  });\n});\n\n/**\n * Validation Rules Enforcement Tests\n * Tests to ensure all forms follow the established validation patterns\n */\ndescribe('Validation Rules Enforcement', () => {\n  describe('Error Message Quality Checks', () => {\n    test('should validate error messages contain examples where appropriate', () => {\n      const fieldsRequiringExamples = [\n        'email',\n        'phone',\n        'postalCode', \n        'amount',\n        'time',\n        'name',\n        'title',\n        'password'\n      ];\n\n      // Mock schema validation that should include examples\n      fieldsRequiringExamples.forEach(fieldType => {\n        // Each field type should have validation that includes examples\n        switch (fieldType) {\n          case 'email':\n            const emailSchema = z.string().email('Please enter a valid email address (example: user@domain.com)');\n            const emailResult = emailSchema.safeParse('invalid');\n            expect(emailResult.success).toBe(false);\n            if (!emailResult.success) {\n              expect(emailResult.error.issues[0].message).toContain('example:');\n            }\n            break;\n          \n          case 'phone':\n            const phoneSchema = z.string().regex(/phone-regex/, 'Phone number must be a valid North American format (example: (514) 123-4567)');\n            const phoneResult = phoneSchema.safeParse('invalid');\n            expect(phoneResult.success).toBe(false);\n            if (!phoneResult.success) {\n              expect(phoneResult.error.issues[0].message).toContain('example:');\n            }\n            break;\n        }\n      });\n    });\n\n    test('should enforce consistent language and tone', () => {\n      // Error messages should be:\n      // - Polite and helpful\n      // - Clear about what's wrong\n      // - Provide guidance on how to fix\n      // - Use consistent language patterns\n\n      const goodMessagePatterns = [\n        /please enter/i,\n        /must be/i,\n        /should be/i,\n        /example:/i,\n        /between \\d+ and \\d+/i,\n        /valid .+ format/i\n      ];\n\n      const badMessagePatterns = [\n        /invalid/i, // Too vague without explanation\n        /error/i,   // Doesn't help user understand what to do\n        /wrong/i,   // Negative tone\n      ];\n\n      // Test that good patterns are used appropriately\n      const emailMessage = 'Please enter a valid email address (example: user@domain.com)';\n      const nameMessage = 'First name is required (example: Jean)';\n      const rangeMessage = 'Age must be between 18 and 120 years';\n\n      expect(goodMessagePatterns.some(pattern => pattern.test(emailMessage))).toBe(true);\n      expect(goodMessagePatterns.some(pattern => pattern.test(nameMessage))).toBe(true);\n      expect(goodMessagePatterns.some(pattern => pattern.test(rangeMessage))).toBe(true);\n    });\n  });\n\n  describe('Field-Specific Validation Standards', () => {\n    test('should validate Quebec-specific field requirements', () => {\n      // Quebec-specific validations should be properly handled\n      const quebecFields = {\n        postalCode: z.string().regex(/^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$/, 'Postal code must follow Canadian format (example: H1A 1B1)'),\n        city: z.string().regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens'),\n        phone: z.string().regex(/^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/, 'Phone number must be a valid North American format (example: (514) 123-4567)')\n      };\n\n      // Test valid Quebec formats\n      expect(quebecFields.postalCode.safeParse('H1A 1B1').success).toBe(true);\n      expect(quebecFields.city.safeParse('Montréal').success).toBe(true);\n      expect(quebecFields.phone.safeParse('(514) 123-4567').success).toBe(true);\n\n      // Test invalid formats have helpful messages\n      const testInvalidInputs = {\n        postalCode: '12345',\n        city: 'City123',\n        phone: '123'\n      };\n\n      Object.entries(quebecFields).forEach(([fieldName, schema]) => {\n        const invalidInput = testInvalidInputs[fieldName as keyof typeof testInvalidInputs];\n        const result = schema.safeParse(invalidInput);\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(result.error.issues[0].message).toContain('example:');\n        }\n      });\n    });\n\n    test('should validate numeric fields have proper constraints', () => {\n      const numericValidations = [\n        {\n          name: 'amount',\n          schema: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, 'Amount must be a valid number with up to 2 decimal places (example: 125.50)'),\n          valid: ['125.50', '0.99', '1000'],\n          invalid: ['125.555', 'abc', '']\n        },\n        {\n          name: 'capacity',\n          schema: z.number().min(1, 'Capacity must be between 1 and 500 people').max(500, 'Capacity must be between 1 and 500 people'),\n          valid: [1, 50, 500],\n          invalid: [0, 501, -1]\n        }\n      ];\n\n      numericValidations.forEach(({ name, schema, valid, invalid }) => {\n        // Test valid inputs\n        valid.forEach(input => {\n          expect(schema.safeParse(input).success).toBe(true);\n        });\n\n        // Test invalid inputs have helpful messages\n        invalid.forEach(input => {\n          const result = schema.safeParse(input);\n          expect(result.success).toBe(false);\n          if (!result.success && name === 'amount') {\n            expect(result.error.issues[0].message).toContain('example:');\n          }\n        });\n      });\n    });\n  });\n});\n\n/**\n * Future Form Compliance Guard\n * Utility functions to ensure new forms follow validation standards\n */\ndescribe('Future Form Compliance Guards', () => {\n  describe('Validation Schema Checkers', () => {\n    test('should validate that schema has proper error messages', () => {\n      const validateSchemaCompliance = (schema: z.ZodType, fieldName: string) => {\n        const result = schema.safeParse('');\n        if (!result.success) {\n          const errorMessage = result.error.issues[0].message;\n          \n          // Check for required elements in error messages\n          const hasExample = errorMessage.includes('example:');\n          const hasGuidance = errorMessage.includes('must be') || errorMessage.includes('should be') || errorMessage.includes('please');\n          const isNotVague = !errorMessage.match(/^(invalid|error|wrong)$/i);\n\n          return {\n            hasExample,\n            hasGuidance,\n            isNotVague,\n            errorMessage,\n            compliance: hasGuidance && isNotVague\n          };\n        }\n        return { compliance: true };\n      };\n\n      // Test with compliant schema\n      const goodSchema = z.string().min(1, 'Email address is required').email('Please enter a valid email address (example: user@domain.com)');\n      const goodResult = validateSchemaCompliance(goodSchema, 'email');\n      // The compliance should be true because it has guidance and is not vague\n      expect(goodResult.compliance).toBe(true);\n\n      // Test with non-compliant schema\n      const badSchema = z.string().email('Invalid email');\n      const badResult = validateSchemaCompliance(badSchema, 'email');\n      expect(badResult.compliance).toBe(false);\n    });\n  });\n});"],"version":3}