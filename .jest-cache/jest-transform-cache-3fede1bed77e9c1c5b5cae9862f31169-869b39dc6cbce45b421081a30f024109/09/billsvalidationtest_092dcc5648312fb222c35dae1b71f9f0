3296bd4ca44f9dc10d41bfa4075105cf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const zod_1 = require("zod");
// Bill validation schemas (would normally be imported from the API)
const billCategorySchema = zod_1.z.enum([
    'insurance',
    'maintenance',
    'salary',
    'utilities',
    'cleaning',
    'security',
    'landscaping',
    'professional_services',
    'administration',
    'repairs',
    'supplies',
    'taxes',
    'other',
]);
const paymentTypeSchema = zod_1.z.enum(['unique', 'recurrent']);
const schedulePaymentSchema = zod_1.z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']);
const billStatusSchema = zod_1.z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']);
const createBillSchema = zod_1.z.object({
    buildingId: zod_1.z.string().uuid(),
    title: zod_1.z.string().min(1),
    description: zod_1.z.string().optional(),
    category: billCategorySchema,
    vendor: zod_1.z.string().optional(),
    paymentType: paymentTypeSchema,
    schedulePayment: schedulePaymentSchema.optional(),
    scheduleCustom: zod_1.z.array(zod_1.z.string()).optional(),
    costs: zod_1.z.array(zod_1.z.number().positive()).min(1),
    totalAmount: zod_1.z.number().positive(),
    startDate: zod_1.z.string(),
    endDate: zod_1.z.string().optional(),
    status: billStatusSchema.optional(),
    notes: zod_1.z.string().optional(),
});
const billFilterSchema = zod_1.z.object({
    buildingId: zod_1.z.string().uuid(),
    category: zod_1.z.string().optional(),
    year: zod_1.z.string().optional(),
    status: billStatusSchema.optional(),
});
(0, globals_1.describe)('Bills Validation Tests', () => {
    (0, globals_1.describe)('Bill Category Validation', () => {
        (0, globals_1.it)('should accept all valid bill categories', () => {
            const validCategories = [
                'insurance',
                'maintenance',
                'salary',
                'utilities',
                'cleaning',
                'security',
                'landscaping',
                'professional_services',
                'administration',
                'repairs',
                'supplies',
                'taxes',
                'other',
            ];
            validCategories.forEach((category) => {
                const result = billCategorySchema.safeParse(category);
                (0, globals_1.expect)(result.success).toBe(true);
                if (result.success) {
                    (0, globals_1.expect)(result.data).toBe(category);
                }
            });
        });
        (0, globals_1.it)('should reject invalid bill categories', () => {
            const invalidCategories = [
                'invalid_category',
                'INSURANCE', // wrong case
                'misc',
                '',
                null,
                undefined,
                123,
            ];
            invalidCategories.forEach((category) => {
                const result = billCategorySchema.safeParse(category);
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Payment Type Validation', () => {
        (0, globals_1.it)('should accept valid payment types', () => {
            const validTypes = ['unique', 'recurrent'];
            validTypes.forEach((type) => {
                const result = paymentTypeSchema.safeParse(type);
                (0, globals_1.expect)(result.success).toBe(true);
                if (result.success) {
                    (0, globals_1.expect)(result.data).toBe(type);
                }
            });
        });
        (0, globals_1.it)('should reject invalid payment types', () => {
            const invalidTypes = ['one_time', 'recurring', 'UNIQUE', '', null, undefined];
            invalidTypes.forEach((type) => {
                const result = paymentTypeSchema.safeParse(type);
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Schedule Payment Validation', () => {
        (0, globals_1.it)('should accept valid schedule payment options', () => {
            const validSchedules = ['weekly', 'monthly', 'quarterly', 'yearly', 'custom'];
            validSchedules.forEach((schedule) => {
                const result = schedulePaymentSchema.safeParse(schedule);
                (0, globals_1.expect)(result.success).toBe(true);
                if (result.success) {
                    (0, globals_1.expect)(result.data).toBe(schedule);
                }
            });
        });
        (0, globals_1.it)('should reject invalid schedule payment options', () => {
            const invalidSchedules = ['daily', 'biweekly', 'annually', 'MONTHLY', '', null];
            invalidSchedules.forEach((schedule) => {
                const result = schedulePaymentSchema.safeParse(schedule);
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Bill Status Validation', () => {
        (0, globals_1.it)('should accept valid bill statuses', () => {
            const validStatuses = ['draft', 'sent', 'overdue', 'paid', 'cancelled'];
            validStatuses.forEach((status) => {
                const result = billStatusSchema.safeParse(status);
                (0, globals_1.expect)(result.success).toBe(true);
                if (result.success) {
                    (0, globals_1.expect)(result.data).toBe(status);
                }
            });
        });
        (0, globals_1.it)('should reject invalid bill statuses', () => {
            const invalidStatuses = ['pending', 'completed', 'PAID', 'active', '', null];
            invalidStatuses.forEach((status) => {
                const result = billStatusSchema.safeParse(status);
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Create Bill Schema Validation', () => {
        const validBillData = {
            buildingId: '123e4567-e89b-12d3-a456-426614174000',
            title: 'Test Bill',
            description: 'Test description',
            category: 'maintenance',
            vendor: 'Test Vendor',
            paymentType: 'unique',
            costs: [100.5],
            totalAmount: 100.5,
            startDate: '2024-01-01',
            status: 'draft',
        };
        (0, globals_1.it)('should accept valid bill data', () => {
            const result = createBillSchema.safeParse(validBillData);
            (0, globals_1.expect)(result.success).toBe(true);
            if (result.success) {
                (0, globals_1.expect)(result.data.title).toBe('Test Bill');
                (0, globals_1.expect)(result.data.category).toBe('maintenance');
            }
        });
        (0, globals_1.it)('should require buildingId to be a valid UUID', () => {
            const invalidData = { ...validBillData, buildingId: 'invalid-uuid' };
            const result = createBillSchema.safeParse(invalidData);
            (0, globals_1.expect)(result.success).toBe(false);
        });
        (0, globals_1.it)('should require title to be non-empty', () => {
            const invalidData = { ...validBillData, title: '' };
            const result = createBillSchema.safeParse(invalidData);
            (0, globals_1.expect)(result.success).toBe(false);
        });
        (0, globals_1.it)('should require costs to be positive numbers', () => {
            const invalidData = { ...validBillData, costs: [-100, 0] };
            const result = createBillSchema.safeParse(invalidData);
            (0, globals_1.expect)(result.success).toBe(false);
        });
        (0, globals_1.it)('should require totalAmount to be positive', () => {
            const invalidData = { ...validBillData, totalAmount: -100 };
            const result = createBillSchema.safeParse(invalidData);
            (0, globals_1.expect)(result.success).toBe(false);
        });
        (0, globals_1.it)('should accept optional fields', () => {
            const minimalData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                title: 'Minimal Bill',
                category: 'other',
                paymentType: 'unique',
                costs: [50],
                totalAmount: 50,
                startDate: '2024-01-01',
            };
            const result = createBillSchema.safeParse(minimalData);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should validate recurrent bill with schedule', () => {
            const recurrentData = {
                ...validBillData,
                paymentType: 'recurrent',
                schedulePayment: 'monthly',
                endDate: '2024-12-31',
            };
            const result = createBillSchema.safeParse(recurrentData);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should validate custom schedule with dates array', () => {
            const customData = {
                ...validBillData,
                paymentType: 'recurrent',
                schedulePayment: 'custom',
                scheduleCustom: ['2024-01-15', '2024-04-15', '2024-07-15', '2024-10-15'],
            };
            const result = createBillSchema.safeParse(customData);
            (0, globals_1.expect)(result.success).toBe(true);
        });
    });
    (0, globals_1.describe)('Bill Filter Schema Validation', () => {
        (0, globals_1.it)('should accept valid filter data', () => {
            const validFilters = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                category: 'insurance',
                year: '2024',
                status: 'paid',
            };
            const result = billFilterSchema.safeParse(validFilters);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should require buildingId to be UUID', () => {
            const invalidFilters = {
                buildingId: 'invalid-uuid',
                category: 'insurance',
            };
            const result = billFilterSchema.safeParse(invalidFilters);
            (0, globals_1.expect)(result.success).toBe(false);
        });
        (0, globals_1.it)('should accept minimal filter with only buildingId', () => {
            const minimalFilters = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
            };
            const result = billFilterSchema.safeParse(minimalFilters);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject invalid status in filters', () => {
            const invalidFilters = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                status: 'invalid_status',
            };
            const result = billFilterSchema.safeParse(invalidFilters);
            (0, globals_1.expect)(result.success).toBe(false);
        });
    });
    (0, globals_1.describe)('Edge Cases and Data Integrity', () => {
        (0, globals_1.it)('should handle very large cost amounts', () => {
            const largeCostData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                title: 'Large Cost Bill',
                category: 'other',
                paymentType: 'unique',
                costs: [999999.99],
                totalAmount: 999999.99,
                startDate: '2024-01-01',
            };
            const result = createBillSchema.safeParse(largeCostData);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should handle multiple costs in array', () => {
            const multiCostData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                title: 'Multi-Cost Bill',
                category: 'maintenance',
                paymentType: 'recurrent',
                schedulePayment: 'quarterly',
                costs: [500, 600, 700, 800],
                totalAmount: 2600,
                startDate: '2024-01-01',
            };
            const result = createBillSchema.safeParse(multiCostData);
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject empty costs array', () => {
            const emptyCostsData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                title: 'Empty Costs Bill',
                category: 'other',
                paymentType: 'unique',
                costs: [],
                totalAmount: 100,
                startDate: '2024-01-01',
            };
            const result = createBillSchema.safeParse(emptyCostsData);
            (0, globals_1.expect)(result.success).toBe(false);
        });
        (0, globals_1.it)('should handle very long title and description', () => {
            const longTextData = {
                buildingId: '123e4567-e89b-12d3-a456-426614174000',
                title: 'A'.repeat(1000), // Very long title
                description: 'B'.repeat(5000), // Very long description
                category: 'other',
                paymentType: 'unique',
                costs: [100],
                totalAmount: 100,
                startDate: '2024-01-01',
            };
            const result = createBillSchema.safeParse(longTextData);
            (0, globals_1.expect)(result.success).toBe(true); // Schema doesn't enforce max length currently
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,