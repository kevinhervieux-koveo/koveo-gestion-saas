4b34575ecd17ce5b5b15d2a875636c06
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../../client/src/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
    queryClient: new (jest.requireActual('@tanstack/react-query').QueryClient)(),
}));
// Mock authentication context
jest.mock('../../../client/src/hooks/use-auth', () => ({
    useAuth: () => ({
        user: { id: '1', email: 'test@test.com', role: 'admin' },
        isAuthenticated: true,
        login: jest.fn(),
        logout: jest.fn(),
    }),
}));
jest.mock('../../../client/src/hooks/use-toast', () => ({
    useToast: () => ({
        toast: mockToast,
    }),
}));
/**
 * Form Action Button Functionality Tests
 * Tests all form submission, saving, and action buttons
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
// Mock API requests
const mockApiRequest = jest.fn();
// Mock toast notifications
const mockToast = jest.fn();
describe('Form Action Buttons Functionality', () => {
    let queryClient;
    let user;
    beforeEach(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: { retry: false },
                mutations: { retry: false },
            },
        });
        user = user_event_1.default.setup();
        jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ ok: true, json: () => Promise.resolve({}) });
    });
    const renderWithProvider = (component) => {
        return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    describe('Save Buttons', () => {
        const saveButtonTestIds = [
            'save-residences',
            'save-buildings',
            'save-organizations',
            'button-save-text-file',
            'button-save-edit',
        ];
        saveButtonTestIds.forEach(testId => {
            it(`should handle save action for ${testId}`, async () => {
                // Create a mock component with the save button
                const MockComponent = () => {
                    const handleSave = () => {
                        mockApiRequest('/api/save', { method: 'POST' });
                    };
                    return ((0, jsx_runtime_1.jsx)("button", { "data-testid": testId, onClick: handleSave, children: "Save" }));
                };
                renderWithProvider((0, jsx_runtime_1.jsx)(MockComponent, {}));
                const saveButton = react_2.screen.getByTestId(testId);
                expect(saveButton).toBeInTheDocument();
                await user.click(saveButton);
                await (0, react_2.waitFor)(() => {
                    expect(mockApiRequest).toHaveBeenCalledWith('/api/save', { method: 'POST' });
                });
            });
        });
    });
    describe('Submit Buttons', () => {
        const submitButtonTestIds = [
            'button-submit-bug',
            'button-submit-feature-request',
        ];
        submitButtonTestIds.forEach(testId => {
            it(`should handle form submission for ${testId}`, async () => {
                const MockForm = () => {
                    const handleSubmit = (e) => {
                        e.preventDefault();
                        mockApiRequest('/api/submit', { method: 'POST' });
                    };
                    return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, children: [(0, jsx_runtime_1.jsx)("input", { type: "text", name: "title", defaultValue: "Test Title" }), (0, jsx_runtime_1.jsx)("button", { type: "submit", "data-testid": testId, children: "Submit" })] }));
                };
                renderWithProvider((0, jsx_runtime_1.jsx)(MockForm, {}));
                const submitButton = react_2.screen.getByTestId(testId);
                expect(submitButton).toBeInTheDocument();
                await user.click(submitButton);
                await (0, react_2.waitFor)(() => {
                    expect(mockApiRequest).toHaveBeenCalledWith('/api/submit', { method: 'POST' });
                });
            });
        });
    });
    describe('Update Buttons', () => {
        const updateButtonTestIds = [
            'button-update-bug',
            'button-update-feature-request',
        ];
        updateButtonTestIds.forEach(testId => {
            it(`should handle update action for ${testId}`, async () => {
                const MockComponent = () => {
                    const handleUpdate = () => {
                        mockApiRequest('/api/update', { method: 'PATCH' });
                    };
                    return ((0, jsx_runtime_1.jsx)("button", { "data-testid": testId, onClick: handleUpdate, children: "Update" }));
                };
                renderWithProvider((0, jsx_runtime_1.jsx)(MockComponent, {}));
                const updateButton = react_2.screen.getByTestId(testId);
                expect(updateButton).toBeInTheDocument();
                await user.click(updateButton);
                await (0, react_2.waitFor)(() => {
                    expect(mockApiRequest).toHaveBeenCalledWith('/api/update', { method: 'PATCH' });
                });
            });
        });
    });
    describe('Create Buttons', () => {
        const createButtonTestIds = [
            'button-create-bug',
            'button-create-feature-request',
            'button-create-space',
            'button-invite-user',
        ];
        createButtonTestIds.forEach(testId => {
            it(`should handle create action for ${testId}`, async () => {
                const MockComponent = () => {
                    const handleCreate = () => {
                        mockApiRequest('/api/create', { method: 'POST' });
                    };
                    return ((0, jsx_runtime_1.jsx)("button", { "data-testid": testId, onClick: handleCreate, children: "Create" }));
                };
                renderWithProvider((0, jsx_runtime_1.jsx)(MockComponent, {}));
                const createButton = react_2.screen.getByTestId(testId);
                expect(createButton).toBeInTheDocument();
                await user.click(createButton);
                await (0, react_2.waitFor)(() => {
                    expect(mockApiRequest).toHaveBeenCalledWith('/api/create', { method: 'POST' });
                });
            });
        });
    });
    describe('Button States', () => {
        it('should handle loading states correctly', () => {
            const MockComponent = () => {
                const [isLoading, setIsLoading] = react_1.default.useState(false);
                const handleClick = () => {
                    setIsLoading(true);
                    setTimeout(() => setIsLoading(false), 1000);
                };
                return ((0, jsx_runtime_1.jsx)("button", { "data-testid": "loading-button", onClick: handleClick, disabled: isLoading, children: isLoading ? 'Loading...' : 'Click Me' }));
            };
            renderWithProvider((0, jsx_runtime_1.jsx)(MockComponent, {}));
            const button = react_2.screen.getByTestId('loading-button');
            expect(button).toBeInTheDocument();
            expect(button).not.toBeDisabled();
            react_2.fireEvent.click(button);
            expect(button).toBeDisabled();
        });
        it('should handle disabled states correctly', () => {
            const MockComponent = () => ((0, jsx_runtime_1.jsx)("button", { "data-testid": "disabled-button", disabled: true, children: "Disabled Button" }));
            renderWithProvider((0, jsx_runtime_1.jsx)(MockComponent, {}));
            const button = react_2.screen.getByTestId('disabled-button');
            expect(button).toBeInTheDocument();
            expect(button).toBeDisabled();
        });
        it('should handle Create Demand button and API error coverage', async () => {
            // Test that the Create Demand button exists and is testable now
            const MockCreateDraftComponent = () => {
                const [isSubmitting, setIsSubmitting] = react_1.default.useState(false);
                const [errorMessage, setErrorMessage] = react_1.default.useState('');
                const handleCreateDraft = async () => {
                    setIsSubmitting(true);
                    setErrorMessage('');
                    try {
                        const response = await fetch('/api/demands', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                type: 'maintenance',
                                buildingId: 'test-building',
                                residenceId: 'test-residence',
                                description: 'Test demand'
                            })
                        });
                        if (!response.ok) {
                            const error = await response.json();
                            throw new Error(error.message || 'Failed to create demand');
                        }
                    }
                    catch (error) {
                        setErrorMessage(error.message);
                    }
                    finally {
                        setIsSubmitting(false);
                    }
                };
                return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "button-create-demand", onClick: handleCreateDraft, disabled: isSubmitting, children: isSubmitting ? 'Creating...' : 'Create Demand' }), errorMessage && (0, jsx_runtime_1.jsx)("div", { "data-testid": "error-message", children: errorMessage })] }));
            };
            // Mock fetch to simulate API error that was happening
            global.fetch = jest.fn().mockResolvedValue({
                ok: false,
                status: 400,
                json: () => Promise.resolve({ message: 'Failed to create demand' })
            });
            renderWithProvider((0, jsx_runtime_1.jsx)(MockCreateDraftComponent, {}));
            const createDemandButton = react_2.screen.getByTestId('button-create-demand');
            expect(createDemandButton).toBeInTheDocument();
            expect(createDemandButton).toHaveTextContent('Create Demand');
            // Click the button and verify it calls the API
            await user.click(createDemandButton);
            // Verify the API was called correctly
            expect(global.fetch).toHaveBeenCalledWith('/api/demands', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    type: 'maintenance',
                    buildingId: 'test-building',
                    residenceId: 'test-residence',
                    description: 'Test demand'
                })
            });
            // Verify error handling shows the error message
            await (0, react_2.waitFor)(() => {
                expect(react_2.screen.getByTestId('error-message')).toHaveTextContent('Failed to create demand');
            });
            // Verify button is no longer disabled after error
            expect(createDemandButton).not.toBeDisabled();
            expect(createDemandButton).toHaveTextContent('Create Demand');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,