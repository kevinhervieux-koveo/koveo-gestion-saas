ee00b494f3b706581fda38a57393f9a0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMatch = void 0;
exports.dateMatchModifiers = dateMatchModifiers;
const DateLib_js_1 = require("../classes/DateLib.js");
const rangeIncludesDate_js_1 = require("./rangeIncludesDate.js");
const typeguards_js_1 = require("./typeguards.js");
/**
 * Checks if a given date matches at least one of the specified {@link Matcher}.
 *
 * @param date - The date to check.
 * @param matchers - The matchers to check against.
 * @param dateLib - The date utility library instance.
 * @returns `true` if the date matches any of the matchers, otherwise `false`.
 * @group Utilities
 */
function dateMatchModifiers(date, matchers, dateLib = DateLib_js_1.defaultDateLib) {
    const matchersArr = !Array.isArray(matchers) ? [matchers] : matchers;
    const { isSameDay, differenceInCalendarDays, isAfter } = dateLib;
    return matchersArr.some((matcher) => {
        if (typeof matcher === "boolean") {
            return matcher;
        }
        if (dateLib.isDate(matcher)) {
            return isSameDay(date, matcher);
        }
        if ((0, typeguards_js_1.isDatesArray)(matcher, dateLib)) {
            return matcher.includes(date);
        }
        if ((0, typeguards_js_1.isDateRange)(matcher)) {
            return (0, rangeIncludesDate_js_1.rangeIncludesDate)(matcher, date, false, dateLib);
        }
        if ((0, typeguards_js_1.isDayOfWeekType)(matcher)) {
            if (!Array.isArray(matcher.dayOfWeek)) {
                return matcher.dayOfWeek === date.getDay();
            }
            return matcher.dayOfWeek.includes(date.getDay());
        }
        if ((0, typeguards_js_1.isDateInterval)(matcher)) {
            const diffBefore = differenceInCalendarDays(matcher.before, date);
            const diffAfter = differenceInCalendarDays(matcher.after, date);
            const isDayBefore = diffBefore > 0;
            const isDayAfter = diffAfter < 0;
            const isClosedInterval = isAfter(matcher.before, matcher.after);
            if (isClosedInterval) {
                return isDayAfter && isDayBefore;
            }
            else {
                return isDayBefore || isDayAfter;
            }
        }
        if ((0, typeguards_js_1.isDateAfterType)(matcher)) {
            return differenceInCalendarDays(date, matcher.after) > 0;
        }
        if ((0, typeguards_js_1.isDateBeforeType)(matcher)) {
            return differenceInCalendarDays(matcher.before, date) > 0;
        }
        if (typeof matcher === "function") {
            return matcher(date);
        }
        return false;
    });
}
/**
 * @private
 * @deprecated Use {@link dateMatchModifiers} instead.
 */
exports.isMatch = dateMatchModifiers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy91dGlscy9kYXRlTWF0Y2hNb2RpZmllcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6QixPQUFPLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7QUFDaEQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDdEQsTUFBTSxzQkFBc0IsR0FBRyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUNqRSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNuRDs7Ozs7Ozs7R0FRRztBQUNILFNBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQUcsWUFBWSxDQUFDLGNBQWM7SUFDN0UsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDckUsTUFBTSxFQUFFLFNBQVMsRUFBRSx3QkFBd0IsRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDakUsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDaEMsSUFBSSxPQUFPLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUMvQixPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDO1FBQ0QsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDMUIsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUN0RCxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDLEVBQUUsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDNUMsT0FBTyxDQUFDLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hGLENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO2dCQUNwQyxPQUFPLE9BQU8sQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQy9DLENBQUM7WUFDRCxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFDRCxJQUFJLENBQUMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQy9DLE1BQU0sVUFBVSxHQUFHLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbEUsTUFBTSxTQUFTLEdBQUcsd0JBQXdCLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRSxNQUFNLFdBQVcsR0FBRyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sVUFBVSxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUM7WUFDakMsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEUsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO2dCQUNuQixPQUFPLFVBQVUsSUFBSSxXQUFXLENBQUM7WUFDckMsQ0FBQztpQkFDSSxDQUFDO2dCQUNGLE9BQU8sV0FBVyxJQUFJLFVBQVUsQ0FBQztZQUNyQyxDQUFDO1FBQ0wsQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDLEVBQUUsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDaEQsT0FBTyx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBQ0QsSUFBSSxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ2pELE9BQU8sd0JBQXdCLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUNELElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFLENBQUM7WUFDaEMsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsQ0FBQztRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUNEOzs7R0FHRztBQUNILE9BQU8sQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy91dGlscy9kYXRlTWF0Y2hNb2RpZmllcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzTWF0Y2ggPSB2b2lkIDA7XG5leHBvcnRzLmRhdGVNYXRjaE1vZGlmaWVycyA9IGRhdGVNYXRjaE1vZGlmaWVycztcbmNvbnN0IERhdGVMaWJfanNfMSA9IHJlcXVpcmUoXCIuLi9jbGFzc2VzL0RhdGVMaWIuanNcIik7XG5jb25zdCByYW5nZUluY2x1ZGVzRGF0ZV9qc18xID0gcmVxdWlyZShcIi4vcmFuZ2VJbmNsdWRlc0RhdGUuanNcIik7XG5jb25zdCB0eXBlZ3VhcmRzX2pzXzEgPSByZXF1aXJlKFwiLi90eXBlZ3VhcmRzLmpzXCIpO1xuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBkYXRlIG1hdGNoZXMgYXQgbGVhc3Qgb25lIG9mIHRoZSBzcGVjaWZpZWQge0BsaW5rIE1hdGNoZXJ9LlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdG8gY2hlY2suXG4gKiBAcGFyYW0gbWF0Y2hlcnMgLSBUaGUgbWF0Y2hlcnMgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEBwYXJhbSBkYXRlTGliIC0gVGhlIGRhdGUgdXRpbGl0eSBsaWJyYXJ5IGluc3RhbmNlLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBkYXRlIG1hdGNoZXMgYW55IG9mIHRoZSBtYXRjaGVycywgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gKiBAZ3JvdXAgVXRpbGl0aWVzXG4gKi9cbmZ1bmN0aW9uIGRhdGVNYXRjaE1vZGlmaWVycyhkYXRlLCBtYXRjaGVycywgZGF0ZUxpYiA9IERhdGVMaWJfanNfMS5kZWZhdWx0RGF0ZUxpYikge1xuICAgIGNvbnN0IG1hdGNoZXJzQXJyID0gIUFycmF5LmlzQXJyYXkobWF0Y2hlcnMpID8gW21hdGNoZXJzXSA6IG1hdGNoZXJzO1xuICAgIGNvbnN0IHsgaXNTYW1lRGF5LCBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMsIGlzQWZ0ZXIgfSA9IGRhdGVMaWI7XG4gICAgcmV0dXJuIG1hdGNoZXJzQXJyLnNvbWUoKG1hdGNoZXIpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBtYXRjaGVyID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGVMaWIuaXNEYXRlKG1hdGNoZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNTYW1lRGF5KGRhdGUsIG1hdGNoZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgdHlwZWd1YXJkc19qc18xLmlzRGF0ZXNBcnJheSkobWF0Y2hlciwgZGF0ZUxpYikpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVyLmluY2x1ZGVzKGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgdHlwZWd1YXJkc19qc18xLmlzRGF0ZVJhbmdlKShtYXRjaGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCByYW5nZUluY2x1ZGVzRGF0ZV9qc18xLnJhbmdlSW5jbHVkZXNEYXRlKShtYXRjaGVyLCBkYXRlLCBmYWxzZSwgZGF0ZUxpYik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCB0eXBlZ3VhcmRzX2pzXzEuaXNEYXlPZldlZWtUeXBlKShtYXRjaGVyKSkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1hdGNoZXIuZGF5T2ZXZWVrKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVyLmRheU9mV2VlayA9PT0gZGF0ZS5nZXREYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVyLmRheU9mV2Vlay5pbmNsdWRlcyhkYXRlLmdldERheSgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHR5cGVndWFyZHNfanNfMS5pc0RhdGVJbnRlcnZhbCkobWF0Y2hlcikpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpZmZCZWZvcmUgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMobWF0Y2hlci5iZWZvcmUsIGRhdGUpO1xuICAgICAgICAgICAgY29uc3QgZGlmZkFmdGVyID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKG1hdGNoZXIuYWZ0ZXIsIGRhdGUpO1xuICAgICAgICAgICAgY29uc3QgaXNEYXlCZWZvcmUgPSBkaWZmQmVmb3JlID4gMDtcbiAgICAgICAgICAgIGNvbnN0IGlzRGF5QWZ0ZXIgPSBkaWZmQWZ0ZXIgPCAwO1xuICAgICAgICAgICAgY29uc3QgaXNDbG9zZWRJbnRlcnZhbCA9IGlzQWZ0ZXIobWF0Y2hlci5iZWZvcmUsIG1hdGNoZXIuYWZ0ZXIpO1xuICAgICAgICAgICAgaWYgKGlzQ2xvc2VkSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNEYXlBZnRlciAmJiBpc0RheUJlZm9yZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0RheUJlZm9yZSB8fCBpc0RheUFmdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgdHlwZWd1YXJkc19qc18xLmlzRGF0ZUFmdGVyVHlwZSkobWF0Y2hlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGF0ZSwgbWF0Y2hlci5hZnRlcikgPiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgdHlwZWd1YXJkc19qc18xLmlzRGF0ZUJlZm9yZVR5cGUpKG1hdGNoZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKG1hdGNoZXIuYmVmb3JlLCBkYXRlKSA+IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtYXRjaGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVyKGRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgZGF0ZU1hdGNoTW9kaWZpZXJzfSBpbnN0ZWFkLlxuICovXG5leHBvcnRzLmlzTWF0Y2ggPSBkYXRlTWF0Y2hNb2RpZmllcnM7XG4iXSwidmVyc2lvbiI6M30=