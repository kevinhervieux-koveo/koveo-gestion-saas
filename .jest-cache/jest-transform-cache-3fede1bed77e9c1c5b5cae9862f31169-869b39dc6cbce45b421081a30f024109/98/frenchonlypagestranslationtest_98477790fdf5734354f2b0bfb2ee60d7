5c937eb5496af9c911b11d72e93ea9d4
"use strict";
/**
 * French-Only Pages Translation Test Suite
 * Validates that French-only pages (/security, /story, /privacy-policy)
 * handle language switching appropriately and provide proper navigation support
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const i18n_ts_1 = require("../../client/src/lib/i18n.ts");
(0, globals_1.describe)('French-Only Pages Translation Support', () => {
    const languages = ['en', 'fr'];
    const frenchOnlyPages = [
        { page: 'security', route: '/security' },
        { page: 'story', route: '/story' },
        { page: 'privacy-policy', route: '/privacy-policy' }
    ];
    (0, globals_1.describe)('Navigation Translation Support', () => {
        (0, globals_1.it)('should have navigation translations for French-only pages in both languages', () => {
            const requiredNavigationKeys = [
                'security',
                'ourStory',
                'privacyPolicy',
                'menu',
                'navigation'
            ];
            requiredNavigationKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                    (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                });
            });
        });
        (0, globals_1.it)('should provide clear navigation labels for English users accessing French pages', () => {
            const en = i18n_ts_1.translations.en;
            // English navigation should clearly indicate what these pages contain
            (0, globals_1.expect)(en.security).toBe('Security');
            (0, globals_1.expect)(en.ourStory).toBe('Our Story');
            (0, globals_1.expect)(en.privacyPolicy).toBe('Privacy Policy');
            // Should have helpful navigation context
            (0, globals_1.expect)(en.menu).toBe('Menu');
            (0, globals_1.expect)(en.navigation).toBe('Navigation');
        });
        (0, globals_1.it)('should provide proper French navigation labels', () => {
            const fr = i18n_ts_1.translations.fr;
            // French navigation should use proper Quebec French terminology
            (0, globals_1.expect)(fr.security).toBe('Sécurité');
            (0, globals_1.expect)(fr.ourStory).toBe('Notre histoire');
            (0, globals_1.expect)(fr.privacyPolicy).toBe('Politique de confidentialité');
        });
    });
    (0, globals_1.describe)('Language Support for French-Only Content', () => {
        (0, globals_1.it)('should have consistent language switching support keys', () => {
            const languageSupportKeys = [
                'language',
                'openMenu',
                'closeMenu',
                'home',
                'features'
            ];
            languageSupportKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                    (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                });
            });
        });
        (0, globals_1.it)('should support returning to homepage from French-only pages', () => {
            languages.forEach(lang => {
                const t = i18n_ts_1.translations[lang];
                (0, globals_1.expect)(t.home).toBeDefined();
                (0, globals_1.expect)(t.home.length).toBeGreaterThan(0);
            });
            // Validate specific home translations
            (0, globals_1.expect)(i18n_ts_1.translations.en.home).toBe('Home');
            (0, globals_1.expect)(i18n_ts_1.translations.fr.home).toBe('Accueil');
        });
    });
    (0, globals_1.describe)('User Experience for Language Switching', () => {
        (0, globals_1.it)('should have Quebec Law 25 related translations for privacy policy navigation', () => {
            const quebecKeys = [
                'law25Compliant',
                'quebecCompliance',
                'privacyPolicy'
            ];
            quebecKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should provide bilingual support indicators', () => {
            languages.forEach(lang => {
                const t = i18n_ts_1.translations[lang];
                (0, globals_1.expect)(t.bilingualSupport).toBeDefined();
                (0, globals_1.expect)(t.language).toBeDefined();
            });
            // Validate bilingual support translations
            (0, globals_1.expect)(i18n_ts_1.translations.en.bilingualSupport).toBe('Bilingual Support');
            (0, globals_1.expect)(i18n_ts_1.translations.fr.bilingualSupport).toBe('Support bilingue');
        });
    });
    (0, globals_1.describe)('Accessibility and Navigation Flow', () => {
        (0, globals_1.it)('should support breadcrumb navigation translations', () => {
            const navigationFlowKeys = [
                'home',
                'features',
                'security',
                'ourStory',
                'privacyPolicy'
            ];
            navigationFlowKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                });
            });
        });
        (0, globals_1.it)('should have menu control translations for both languages', () => {
            const menuKeys = ['menu', 'openMenu', 'closeMenu'];
            menuKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                });
            });
        });
    });
    (0, globals_1.describe)('Content Understanding Support', () => {
        (0, globals_1.it)('should help users understand French-only page content through navigation', () => {
            // English navigation should clearly indicate page purpose
            const en = i18n_ts_1.translations.en;
            (0, globals_1.expect)(en.security).toMatch(/security/i);
            (0, globals_1.expect)(en.ourStory).toMatch(/story/i);
            (0, globals_1.expect)(en.privacyPolicy).toMatch(/privacy/i);
        });
        (0, globals_1.it)('should maintain Quebec compliance messaging in both languages', () => {
            const complianceKeys = Object.keys(i18n_ts_1.translations.en).filter(key => key.toLowerCase().includes('quebec') ||
                key.toLowerCase().includes('law25') ||
                key.toLowerCase().includes('compliance'));
            complianceKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                        // Should reference appropriate jurisdiction
                        if (lang === 'en') {
                            (0, globals_1.expect)(t[key].toLowerCase()).toMatch(/quebec|law 25/i);
                        }
                        else {
                            (0, globals_1.expect)(t[key].toLowerCase()).toMatch(/québec|loi 25/i);
                        }
                    }
                });
            });
        });
    });
});
/**
 * French-Only Pages Integration Test
 * Tests the actual user experience of navigating between languages
 * when accessing French-only content
 */
(0, globals_1.describe)('French-Only Pages Integration', () => {
    (0, globals_1.it)('should provide consistent translation structure for navigation', () => {
        const enKeys = Object.keys(i18n_ts_1.translations.en);
        const frKeys = Object.keys(i18n_ts_1.translations.fr);
        // Both language sets should be identical
        (0, globals_1.expect)(enKeys.length).toBe(frKeys.length);
        (0, globals_1.expect)(enKeys.sort()).toEqual(frKeys.sort());
    });
    (0, globals_1.it)('should support Quebec-specific terminology consistently', () => {
        const quebecTerms = [
            'privacyPolicy',
            'law25Compliant',
            'quebecCompliance',
            'bilingualSupport'
        ];
        quebecTerms.forEach(key => {
            const en = i18n_ts_1.translations.en[key];
            const fr = i18n_ts_1.translations.fr[key];
            if (en && fr) {
                // Both should exist and be non-empty
                (0, globals_1.expect)(en.length).toBeGreaterThan(0);
                (0, globals_1.expect)(fr.length).toBeGreaterThan(0);
                // Should contain relevant Quebec terminology
                (0, globals_1.expect)(en.toLowerCase()).toMatch(/quebec|privacy|bilingual|law 25/i);
                (0, globals_1.expect)(fr.toLowerCase()).toMatch(/québec|confidentialité|bilingue|loi 25/i);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,