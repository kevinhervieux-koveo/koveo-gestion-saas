{"file":"/home/runner/workspace/tests/unit/french-only-pages-translation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/french-only-pages-translation.test.ts"],"sourcesContent":["/**\n * French-Only Pages Translation Test Suite\n * Validates that French-only pages (/security, /story, /privacy-policy) \n * handle language switching appropriately and provide proper navigation support\n */\n\nimport { describe, it, expect } from '@jest/globals';\nimport { translations, type Language } from '../../client/src/lib/i18n.ts';\n\ndescribe('French-Only Pages Translation Support', () => {\n  const languages: Language[] = ['en', 'fr'];\n  const frenchOnlyPages = [\n    { page: 'security', route: '/security' },\n    { page: 'story', route: '/story' },  \n    { page: 'privacy-policy', route: '/privacy-policy' }\n  ];\n\n  describe('Navigation Translation Support', () => {\n    it('should have navigation translations for French-only pages in both languages', () => {\n      const requiredNavigationKeys = [\n        'security',\n        'ourStory',\n        'privacyPolicy',\n        'menu',\n        'navigation'\n      ];\n\n      requiredNavigationKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n          expect(t[key].length).toBeGreaterThan(0);\n        });\n      });\n    });\n\n    it('should provide clear navigation labels for English users accessing French pages', () => {\n      const en = translations.en;\n      \n      // English navigation should clearly indicate what these pages contain\n      expect(en.security).toBe('Security');\n      expect(en.ourStory).toBe('Our Story');  \n      expect(en.privacyPolicy).toBe('Privacy Policy');\n      \n      // Should have helpful navigation context\n      expect(en.menu).toBe('Menu');\n      expect(en.navigation).toBe('Navigation');\n    });\n\n    it('should provide proper French navigation labels', () => {\n      const fr = translations.fr;\n      \n      // French navigation should use proper Quebec French terminology\n      expect(fr.security).toBe('Sécurité');\n      expect(fr.ourStory).toBe('Notre histoire');\n      expect(fr.privacyPolicy).toBe('Politique de confidentialité');\n    });\n  });\n\n  describe('Language Support for French-Only Content', () => {\n    it('should have consistent language switching support keys', () => {\n      const languageSupportKeys = [\n        'language',\n        'openMenu', \n        'closeMenu',\n        'home',\n        'features'\n      ];\n\n      languageSupportKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n          expect(t[key].length).toBeGreaterThan(0);\n        });\n      });\n    });\n\n    it('should support returning to homepage from French-only pages', () => {\n      languages.forEach(lang => {\n        const t = translations[lang] as any;\n        expect(t.home).toBeDefined();\n        expect(t.home.length).toBeGreaterThan(0);\n      });\n\n      // Validate specific home translations\n      expect(translations.en.home).toBe('Home');\n      expect(translations.fr.home).toBe('Accueil');\n    });\n  });\n\n  describe('User Experience for Language Switching', () => {\n    it('should have Quebec Law 25 related translations for privacy policy navigation', () => {\n      const quebecKeys = [\n        'law25Compliant',\n        'quebecCompliance',\n        'privacyPolicy'\n      ];\n\n      quebecKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n          }\n        });\n      });\n    });\n\n    it('should provide bilingual support indicators', () => {\n      languages.forEach(lang => {\n        const t = translations[lang] as any;\n        expect(t.bilingualSupport).toBeDefined();\n        expect(t.language).toBeDefined();\n      });\n\n      // Validate bilingual support translations\n      expect(translations.en.bilingualSupport).toBe('Bilingual Support');\n      expect(translations.fr.bilingualSupport).toBe('Support bilingue');\n    });\n  });\n\n  describe('Accessibility and Navigation Flow', () => {\n    it('should support breadcrumb navigation translations', () => {\n      const navigationFlowKeys = [\n        'home',\n        'features',\n        'security',\n        'ourStory',\n        'privacyPolicy'\n      ];\n\n      navigationFlowKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n        });\n      });\n    });\n\n    it('should have menu control translations for both languages', () => {\n      const menuKeys = ['menu', 'openMenu', 'closeMenu'];\n\n      menuKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          expect(t[key]).toBeDefined();\n          expect(typeof t[key]).toBe('string');\n        });\n      });\n    });\n  });\n\n  describe('Content Understanding Support', () => {\n    it('should help users understand French-only page content through navigation', () => {\n      // English navigation should clearly indicate page purpose\n      const en = translations.en;\n      \n      expect(en.security).toMatch(/security/i);\n      expect(en.ourStory).toMatch(/story/i);\n      expect(en.privacyPolicy).toMatch(/privacy/i);\n    });\n\n    it('should maintain Quebec compliance messaging in both languages', () => {\n      const complianceKeys = Object.keys(translations.en).filter(key => \n        key.toLowerCase().includes('quebec') || \n        key.toLowerCase().includes('law25') ||\n        key.toLowerCase().includes('compliance')\n      );\n\n      complianceKeys.forEach(key => {\n        languages.forEach(lang => {\n          const t = translations[lang] as any;\n          if (t[key]) {\n            expect(typeof t[key]).toBe('string');\n            expect(t[key].length).toBeGreaterThan(0);\n            \n            // Should reference appropriate jurisdiction\n            if (lang === 'en') {\n              expect(t[key].toLowerCase()).toMatch(/quebec|law 25/i);\n            } else {\n              expect(t[key].toLowerCase()).toMatch(/québec|loi 25/i);\n            }\n          }\n        });\n      });\n    });\n  });\n});\n\n/**\n * French-Only Pages Integration Test\n * Tests the actual user experience of navigating between languages\n * when accessing French-only content\n */\ndescribe('French-Only Pages Integration', () => {\n  it('should provide consistent translation structure for navigation', () => {\n    const enKeys = Object.keys(translations.en);\n    const frKeys = Object.keys(translations.fr);\n    \n    // Both language sets should be identical\n    expect(enKeys.length).toBe(frKeys.length);\n    expect(enKeys.sort()).toEqual(frKeys.sort());\n  });\n\n  it('should support Quebec-specific terminology consistently', () => {\n    const quebecTerms = [\n      'privacyPolicy',\n      'law25Compliant', \n      'quebecCompliance',\n      'bilingualSupport'\n    ];\n\n    quebecTerms.forEach(key => {\n      const en = (translations.en as any)[key];\n      const fr = (translations.fr as any)[key];\n      \n      if (en && fr) {\n        // Both should exist and be non-empty\n        expect(en.length).toBeGreaterThan(0);\n        expect(fr.length).toBeGreaterThan(0);\n        \n        // Should contain relevant Quebec terminology\n        expect(en.toLowerCase()).toMatch(/quebec|privacy|bilingual|law 25/i);\n        expect(fr.toLowerCase()).toMatch(/québec|confidentialité|bilingue|loi 25/i);\n      }\n    });\n  });\n});"],"version":3}