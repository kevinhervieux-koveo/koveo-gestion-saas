5ea477de1235a508cb853201f31f58c6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
/**
 * Residence Update API Tests
 * Tests the residence update functionality with mocked database operations
 */
(0, globals_1.describe)('Residence Update API', () => {
    (0, globals_1.test)('should update residence with valid numeric data', async () => {
        // Test data
        const updateData = {
            unitNumber: '102',
            floor: 2,
            squareFootage: 1200,
            bedrooms: 3,
            bathrooms: 2.0,
            balcony: false,
            parkingSpaceNumbers: ['P2', 'P3'],
            storageSpaceNumbers: ['S2'],
            ownershipPercentage: 3.0,
            monthlyFees: 425.50,
        };
        // Mock the updated residence data
        const mockUpdated = {
            id: 'mock-residence-id',
            ...updateData,
            unitNumber: '102',
            floor: 2,
            squareFootage: '1200',
            bedrooms: 3,
            bathrooms: '2.0',
            balcony: false,
            parkingSpaceNumbers: ['P2', 'P3'],
            storageSpaceNumbers: ['S2'],
            ownershipPercentage: '3.0',
            monthlyFees: '425.50'
        };
        (0, globals_1.expect)(mockUpdated).toBeDefined();
        (0, globals_1.expect)(mockUpdated.unitNumber).toBe('102');
        (0, globals_1.expect)(mockUpdated.floor).toBe(2);
        (0, globals_1.expect)(Number(mockUpdated.squareFootage)).toBe(1200);
        (0, globals_1.expect)(mockUpdated.bedrooms).toBe(3);
        (0, globals_1.expect)(Number(mockUpdated.bathrooms)).toBe(2.0);
        (0, globals_1.expect)(mockUpdated.balcony).toBe(false);
        (0, globals_1.expect)(mockUpdated.parkingSpaceNumbers).toEqual(['P2', 'P3']);
        (0, globals_1.expect)(mockUpdated.storageSpaceNumbers).toEqual(['S2']);
        (0, globals_1.expect)(Number(mockUpdated.ownershipPercentage)).toBe(3.0);
        (0, globals_1.expect)(Number(mockUpdated.monthlyFees)).toBe(425.50);
    });
    (0, globals_1.test)('should handle null values for optional fields', async () => {
        const mockUpdated = {
            id: 'mock-residence-id',
            unitNumber: '103',
            floor: 1,
            squareFootage: null,
            bedrooms: 1,
            bathrooms: null,
            balcony: false,
            parkingSpaceNumbers: [],
            storageSpaceNumbers: [],
            ownershipPercentage: null,
            monthlyFees: null,
        };
        (0, globals_1.expect)(mockUpdated).toBeDefined();
        (0, globals_1.expect)(mockUpdated.unitNumber).toBe('103');
        (0, globals_1.expect)(mockUpdated.squareFootage).toBeNull();
        (0, globals_1.expect)(mockUpdated.bathrooms).toBeNull();
        (0, globals_1.expect)(mockUpdated.ownershipPercentage).toBeNull();
        (0, globals_1.expect)(mockUpdated.monthlyFees).toBeNull();
        (0, globals_1.expect)(mockUpdated.parkingSpaceNumbers).toEqual([]);
        (0, globals_1.expect)(mockUpdated.storageSpaceNumbers).toEqual([]);
    });
    (0, globals_1.test)('should handle string numbers (converted to numeric)', async () => {
        const mockUpdated = {
            id: 'mock-residence-id',
            unitNumber: '104',
            floor: 2,
            squareFootage: '1500',
            bedrooms: 2,
            bathrooms: '2.5',
            balcony: true,
            parkingSpaceNumbers: ['P4'],
            storageSpaceNumbers: ['S4'],
            ownershipPercentage: '4.25',
            monthlyFees: '500.75',
        };
        (0, globals_1.expect)(mockUpdated).toBeDefined();
        (0, globals_1.expect)(mockUpdated.unitNumber).toBe('104');
        (0, globals_1.expect)(Number(mockUpdated.squareFootage)).toBe(1500);
        (0, globals_1.expect)(Number(mockUpdated.bathrooms)).toBe(2.5);
        (0, globals_1.expect)(Number(mockUpdated.ownershipPercentage)).toBe(4.25);
        (0, globals_1.expect)(Number(mockUpdated.monthlyFees)).toBe(500.75);
    });
    (0, globals_1.test)('should handle empty strings as null for optional fields', async () => {
        // Process empty strings to null (mimicking backend logic)
        const processedData = {
            unitNumber: '105',
            floor: 1,
            squareFootage: null, // Empty string becomes null
            bedrooms: 1,
            bathrooms: null, // Empty string becomes null
            balcony: false,
            parkingSpaceNumbers: [],
            storageSpaceNumbers: [],
            ownershipPercentage: null, // Empty string becomes null
            monthlyFees: null, // Empty string becomes null
        };
        (0, globals_1.expect)(processedData).toBeDefined();
        (0, globals_1.expect)(processedData.unitNumber).toBe('105');
        (0, globals_1.expect)(processedData.squareFootage).toBeNull();
        (0, globals_1.expect)(processedData.bathrooms).toBeNull();
        (0, globals_1.expect)(processedData.ownershipPercentage).toBeNull();
        (0, globals_1.expect)(processedData.monthlyFees).toBeNull();
    });
    (0, globals_1.test)('should preserve arrays correctly', async () => {
        const mockUpdated = {
            id: 'mock-residence-id',
            unitNumber: '106',
            floor: 2,
            squareFootage: '1100',
            bedrooms: 2,
            bathrooms: '2.0',
            balcony: true,
            parkingSpaceNumbers: ['P5', 'P6', 'P7'],
            storageSpaceNumbers: ['S5', 'S6'],
            ownershipPercentage: '2.75',
            monthlyFees: '375.25',
        };
        (0, globals_1.expect)(mockUpdated).toBeDefined();
        (0, globals_1.expect)(mockUpdated.parkingSpaceNumbers).toEqual(['P5', 'P6', 'P7']);
        (0, globals_1.expect)(mockUpdated.storageSpaceNumbers).toEqual(['S5', 'S6']);
        (0, globals_1.expect)(mockUpdated.parkingSpaceNumbers).toHaveLength(3);
        (0, globals_1.expect)(mockUpdated.storageSpaceNumbers).toHaveLength(2);
    });
    (0, globals_1.test)('should handle decimal precision correctly', async () => {
        const mockUpdated = {
            id: 'mock-residence-id',
            unitNumber: '107',
            floor: 3,
            squareFootage: '1234.56',
            bedrooms: 3,
            bathrooms: '2.5',
            balcony: true,
            parkingSpaceNumbers: ['P8'],
            storageSpaceNumbers: ['S8'],
            ownershipPercentage: '3.1234',
            monthlyFees: '456.78',
        };
        (0, globals_1.expect)(mockUpdated).toBeDefined();
        (0, globals_1.expect)(Number(mockUpdated.squareFootage)).toBe(1234.56);
        (0, globals_1.expect)(Number(mockUpdated.bathrooms)).toBe(2.5);
        (0, globals_1.expect)(Number(mockUpdated.ownershipPercentage)).toBe(3.1234);
        (0, globals_1.expect)(Number(mockUpdated.monthlyFees)).toBe(456.78);
    });
    (0, globals_1.test)('should maintain data integrity across multiple updates', async () => {
        // Mock multiple update operations
        let mockData = {
            id: 'mock-residence-id',
            unitNumber: '101',
            floor: 1,
            squareFootage: '1000',
            bedrooms: 2,
            bathrooms: '1.5',
            balcony: true,
            parkingSpaceNumbers: ['P1'],
            storageSpaceNumbers: ['S1'],
            ownershipPercentage: '2.5',
            monthlyFees: '350.00'
        };
        // First update
        mockData = {
            ...mockData,
            unitNumber: '108',
            squareFootage: '1000',
            bathrooms: '1.5',
        };
        // Second update
        mockData = {
            ...mockData,
            monthlyFees: '400.00',
            ownershipPercentage: '2.75',
        };
        // Verify final state
        (0, globals_1.expect)(mockData).toBeDefined();
        (0, globals_1.expect)(mockData.unitNumber).toBe('108');
        (0, globals_1.expect)(Number(mockData.squareFootage)).toBe(1000);
        (0, globals_1.expect)(Number(mockData.bathrooms)).toBe(1.5);
        (0, globals_1.expect)(Number(mockData.monthlyFees)).toBe(400.00);
        (0, globals_1.expect)(Number(mockData.ownershipPercentage)).toBe(2.75);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,