45ba35d3f8739616cd14625ec3f0dac2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Residence;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const no_data_card_1 = require("@/components/ui/no-data-card");
const button_1 = require("@/components/ui/button");
const label_1 = require("@/components/ui/label");
const select_1 = require("@/components/ui/select");
const lucide_react_1 = require("lucide-react");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const use_toast_1 = require("@/hooks/use-toast");
const use_language_1 = require("@/hooks/use-language");
const queryClient_1 = require("@/lib/queryClient");
const wouter_1 = require("wouter");
// Contact form schema
const contactFormSchema = zod_2.z.object({
    firstName: zod_2.z.string().min(1, 'First name is required'),
    lastName: zod_2.z.string().min(1, 'Last name is required'),
    email: zod_2.z.string().email('Invalid email address'),
    phone: zod_2.z.string().optional(),
    type: zod_2.z.enum(['primary', 'emergency', 'other']),
});
/**
 *
 */
function Residence() {
    const { toast } = (0, use_toast_1.useToast)();
    const { t } = (0, use_language_1.useLanguage)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [selectedBuildingId, setSelectedBuildingId] = (0, react_1.useState)('');
    const [selectedResidenceId, setSelectedResidenceId] = (0, react_1.useState)('');
    const [isContactDialogOpen, setIsContactDialogOpen] = (0, react_1.useState)(false);
    const [editingContact, setEditingContact] = (0, react_1.useState)(null);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const itemsPerPage = 10;
    // Form for contact management
    const contactForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(contactFormSchema),
        defaultValues: {
            firstName: '',
            lastName: '',
            email: '',
            phone: '',
            type: 'primary',
        },
    });
    // Fetch current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // All users see only their assigned residences
    const { data: accessibleResidences = [], isLoading, error: residencesError, refetch: refetchResidences, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/users/residences', user?.id],
        queryFn: async () => {
            if (!user?.id) {
                return [];
            }
            // All users (including admin/manager) see only their assigned residences
            const url = `/api/users/${user.id}/residences`;
            const response = await fetch(url, {
                credentials: 'include',
                headers: {
                    'Cache-Control': 'no-cache',
                },
            });
            if (!response.ok) {
                throw new Error('Failed to fetch residences');
            }
            return response.json();
        },
        enabled: !!user?.id,
        refetchOnMount: true,
        staleTime: 0,
    });
    // Ensure accessibleResidences is always an array
    const safeAccessibleResidences = Array.isArray(accessibleResidences) ? accessibleResidences : [];
    // Extract buildings from user's residences for filtering
    const buildings = (0, react_1.useMemo)(() => {
        const buildingMap = new Map();
        safeAccessibleResidences.forEach((residence) => {
            if (residence.building && !buildingMap.has(residence.building.id)) {
                buildingMap.set(residence.building.id, residence.building);
            }
        });
        return Array.from(buildingMap.values());
    }, [safeAccessibleResidences]);
    // Filter residences based on selected building (if multiple residences exist)
    const filteredResidences = (0, react_1.useMemo)(() => {
        // If no building filter is selected, return all residences
        if (!selectedBuildingId) {
            return safeAccessibleResidences;
        }
        // Filter by selected building
        return safeAccessibleResidences.filter((r) => r.buildingId === selectedBuildingId);
    }, [safeAccessibleResidences, selectedBuildingId]);
    // Pagination calculations
    const totalPages = Math.ceil(filteredResidences.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentResidences = filteredResidences.slice(startIndex, endIndex);
    const handlePreviousPage = () => {
        setCurrentPage((prev) => Math.max(1, prev - 1));
    };
    const handleNextPage = () => {
        setCurrentPage((prev) => Math.min(totalPages, prev + 1));
    };
    const handlePageClick = (page) => {
        setCurrentPage(page);
    };
    // Reset pagination when filters change
    const resetToFirstPage = () => {
        setCurrentPage(1);
    };
    // Select first residence by default
    const selectedResidence = (0, react_1.useMemo)(() => {
        if (!selectedResidenceId && filteredResidences.length > 0) {
            setSelectedResidenceId(filteredResidences[0].id);
            return filteredResidences[0];
        }
        return filteredResidences.find((r) => r.id === selectedResidenceId) || null;
    }, [selectedResidenceId, filteredResidences]);
    // Fetch contacts for selected residence
    const { data: contacts = [], isLoading: contactsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/contacts', selectedResidenceId],
        queryFn: async () => {
            if (!selectedResidenceId) {
                return [];
            }
            const response = await (0, queryClient_1.apiRequest)('GET', `/api/contacts?entity=residence&entityId=${selectedResidenceId}`);
            return Array.isArray(response) ? response : [];
        },
        enabled: !!selectedResidenceId,
    });
    // Fetch building contacts (read-only for residents)
    const { data: buildingContacts = [], isLoading: buildingContactsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/contacts', 'building', selectedResidence?.buildingId],
        queryFn: async () => {
            if (!selectedResidence?.buildingId) {
                return [];
            }
            const response = await (0, queryClient_1.apiRequest)('GET', `/api/contacts?entity=building&entityId=${selectedResidence.buildingId}`);
            return Array.isArray(response) ? response : [];
        },
        enabled: !!selectedResidence?.buildingId,
    });
    // Mutations for contact management
    const addContactMutation = (0, react_query_1.useMutation)({
        mutationFn: (data) => (0, queryClient_1.apiRequest)('POST', '/api/contacts', {
            ...data,
            residenceId: selectedResidenceId,
        }),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/contacts', selectedResidenceId] });
            setIsContactDialogOpen(false);
            setEditingContact(null);
            contactForm.reset();
            toast({
                title: 'Contact added successfully',
                description: 'The new contact has been added to this residence.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Failed to add contact',
                description: error.message || 'Something went wrong',
                variant: 'destructive',
            });
        },
    });
    const updateContactMutation = (0, react_query_1.useMutation)({
        mutationFn: (data) => (0, queryClient_1.apiRequest)('PATCH', `/api/contacts/${editingContact?.id}`, data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/contacts', selectedResidenceId] });
            setIsContactDialogOpen(false);
            setEditingContact(null);
            contactForm.reset();
            toast({
                title: 'Contact updated successfully',
                description: 'The contact information has been updated.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Failed to update contact',
                description: error.message || 'Something went wrong',
                variant: 'destructive',
            });
        },
    });
    const deleteContactMutation = (0, react_query_1.useMutation)({
        mutationFn: (contactId) => (0, queryClient_1.apiRequest)('DELETE', `/api/contacts/${contactId}`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/contacts', selectedResidenceId] });
            toast({
                title: 'Contact deleted successfully',
                description: 'The contact has been removed.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Failed to delete contact',
                description: error.message || 'Something went wrong',
                variant: 'destructive',
            });
        },
    });
    const handleAddContact = (data) => {
        if (editingContact) {
            updateContactMutation.mutate(data);
        }
        else {
            addContactMutation.mutate(data);
        }
    };
    const handleEditContact = (contact) => {
        setEditingContact(contact);
        contactForm.reset({
            firstName: contact.firstName,
            lastName: contact.lastName,
            email: contact.email,
            phone: contact.phone || '',
            type: contact.type,
        });
        setIsContactDialogOpen(true);
    };
    const handleDeleteContact = (contact) => {
        if (confirm('Are you sure you want to delete this contact?')) {
            deleteContactMutation.mutate(contact.id);
        }
    };
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myResidence'), subtitle: t('viewResidenceInfo') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600', children: t('loading') })] }) })] }));
    }
    if (filteredResidences.length === 0) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myResidence'), subtitle: t('viewResidenceInfo') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center p-6', children: (0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Home, titleKey: "noResidencesFound", descriptionKey: user?.role && ['admin', 'manager'].includes(user.role)
                            ? 'noResidencesFoundOrg'
                            : 'notAssignedResidences', testId: "no-residences-message" }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('myResidence'), subtitle: t('myResidenceInfo') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(buildings.length > 1 || filteredResidences.length > 1) && ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-5 h-5' }), "Select Residence"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col md:flex-row gap-4', children: [buildings.length > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium mb-2 block', children: t('building2') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedBuildingId, onValueChange: (value) => {
                                                            setSelectedBuildingId(value);
                                                            setSelectedResidenceId(''); // Reset residence selection when building changes
                                                        }, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectABuilding') }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "all", children: t('allBuildings') }), buildings.map((building) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: building.id, children: [building.name, " - ", building.address] }, building.id)))] })] })] })), filteredResidences.length > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium mb-2 block', children: t('selectResidence') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedResidenceId, onValueChange: setSelectedResidenceId, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectAResidence') }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: filteredResidences.map((residence) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: residence.id, children: [t('unit'), " ", residence.unitNumber, " - ", residence.building?.name || 'N/A'] }, residence.id))) })] })] }))] }) })] })), currentResidences.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6', children: currentResidences.map((residence) => ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'hover:shadow-lg transition-shadow', children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-5 h-5' }), t('unit'), " ", residence.unitNumber] }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: residence.building?.name || t('buildingInfoUnavailable') })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 gap-3', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('address') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: residence.building?.address || t('addressUnavailable') }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-700', children: [residence.building?.city || 'N/A', ",", ' ', residence.building?.province || 'N/A', ' ', residence.building?.postalCode || ''] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-3', children: [residence.floor && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('floor') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: residence.floor })] })), residence.squareFootage && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('sqFt') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-700', children: residence.squareFootage })] })), residence.bedrooms && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('bedrooms') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bed, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: residence.bedrooms })] })] })), residence.bathrooms && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('bathrooms') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bath, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: residence.bathrooms })] })] }))] }), residence.parkingSpaceNumbers &&
                                                        residence.parkingSpaceNumbers.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('parking') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Car, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: residence.parkingSpaceNumbers.join(', ') })] })] })), residence.storageSpaceNumbers &&
                                                        residence.storageSpaceNumbers.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-xs font-medium text-gray-500', children: t('storage') }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Package, { className: 'w-3 h-3' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-700', children: residence.storageSpaceNumbers.join(', ') })] })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col gap-2 pt-4 border-t', children: [(0, jsx_runtime_1.jsx)(wouter_1.Link, { href: `/residents/residences/${residence.id}/documents`, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'w-full justify-start', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 mr-2' }), t('residenceDocumentsButton')] }) }), (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: `/residents/buildings/${residence.buildingId}/documents`, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'w-full justify-start', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-4 h-4 mr-2' }), t('buildingDocumentsButton')] }) })] })] })] }, residence.id))) })), totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-center gap-2 mt-8', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handlePreviousPage, disabled: currentPage === 1, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ChevronLeft, { className: 'h-4 w-4' }), t('previous')] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex gap-1', children: Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                        let pageNum;
                                        if (totalPages <= 5) {
                                            pageNum = i + 1;
                                        }
                                        else if (currentPage <= 3) {
                                            pageNum = i + 1;
                                        }
                                        else if (currentPage >= totalPages - 2) {
                                            pageNum = totalPages - 4 + i;
                                        }
                                        else {
                                            pageNum = currentPage - 2 + i;
                                        }
                                        return ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: currentPage === pageNum ? 'default' : 'outline', size: 'sm', onClick: () => handlePageClick(pageNum), children: pageNum }, pageNum));
                                    }) }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: handleNextPage, disabled: currentPage === totalPages, children: [t('next'), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronRight, { className: 'h-4 w-4' })] })] })), filteredResidences.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center text-sm text-muted-foreground mt-4', children: [t('showing'), " ", startIndex + 1, " to ", Math.min(endIndex, filteredResidences.length), " of", ' ', filteredResidences.length, " ", t('residences')] }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,