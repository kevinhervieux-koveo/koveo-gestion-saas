304001d487b2cfdf3aa9ca84ac4675c8
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const bcrypt = __importStar(require("bcryptjs"));
/**
 * User Management Access Control Test
 *
 * Tests access control for /manager/user-management route:
 * - Managers should see, edit, delete, create users in their organization
 * - Demo managers should only see other demo role users
 * - Regular managers should not see demo users
 * - Proper CRUD operations based on role permissions
 */
(0, globals_1.describe)('User Management Access Control', () => {
    // Test data setup
    const testData = {
        // Organizations
        regularOrg: {
            id: 'org-regular-test',
            name: 'Regular Test Organization',
            type: 'management_company',
            address: '123 Test Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1'
        },
        demoOrg: {
            id: 'org-demo-test',
            name: 'Demo Test Organization',
            type: 'demo',
            address: '456 Demo Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1B 1B1'
        },
        // Users
        adminUser: {
            username: 'admin-test',
            email: 'admin@test.koveo.com',
            password: 'admin123',
            firstName: 'Admin',
            lastName: 'User',
            role: 'admin',
            language: 'en',
            isActive: true
        },
        regularManager: {
            username: 'manager-regular',
            email: 'manager@test.koveo.com',
            password: 'manager123',
            firstName: 'Regular',
            lastName: 'Manager',
            role: 'manager',
            language: 'en',
            isActive: true
        },
        demoManager: {
            username: 'demo-manager',
            email: 'demo-manager@test.koveo.com',
            password: 'demo123',
            firstName: 'Demo',
            lastName: 'Manager',
            role: 'demo_manager',
            language: 'en',
            isActive: true
        },
        regularTenant: {
            username: 'tenant-regular',
            email: 'tenant@test.koveo.com',
            password: 'tenant123',
            firstName: 'Regular',
            lastName: 'Tenant',
            role: 'tenant',
            language: 'en',
            isActive: true
        },
        demoTenant: {
            username: 'demo-tenant',
            email: 'demo-tenant@test.koveo.com',
            password: 'demo123',
            firstName: 'Demo',
            lastName: 'Tenant',
            role: 'demo_tenant',
            language: 'en',
            isActive: true
        },
        demoResident: {
            username: 'demo-resident',
            email: 'demo-resident@test.koveo.com',
            password: 'demo123',
            firstName: 'Demo',
            lastName: 'Resident',
            role: 'demo_resident',
            language: 'en',
            isActive: true
        }
    };
    let createdUserIds = [];
    let createdOrgIds = [];
    (0, globals_1.beforeAll)(async () => {
        // Clean up any existing test data
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.inArray)(schema_1.users.email, [
            testData.adminUser.email,
            testData.regularManager.email,
            testData.demoManager.email,
            testData.regularTenant.email,
            testData.demoTenant.email,
            testData.demoResident.email
        ]));
        await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.inArray)(schema_1.organizations.id, [
            testData.regularOrg.id,
            testData.demoOrg.id
        ]));
        // Create test organizations
        await db_1.db.insert(schema_1.organizations).values([testData.regularOrg, testData.demoOrg]);
        createdOrgIds = [testData.regularOrg.id, testData.demoOrg.id];
        // Create test users with hashed passwords
        const usersToCreate = [
            testData.adminUser,
            testData.regularManager,
            testData.demoManager,
            testData.regularTenant,
            testData.demoTenant,
            testData.demoResident
        ];
        for (const user of usersToCreate) {
            const hashedPassword = await bcrypt.hash(user.password, 10);
            const createdUser = await db_1.db.insert(schema_1.users).values({
                username: user.username,
                email: user.email,
                password: hashedPassword,
                firstName: user.firstName,
                lastName: user.lastName,
                role: user.role,
                language: user.language,
                isActive: user.isActive
            }).returning({ id: schema_1.users.id });
            createdUserIds.push(createdUser[0].id);
            // Assign users to organizations
            if (user.role.startsWith('demo')) {
                // Demo users go to demo organization
                await db_1.db.insert(schema_1.userOrganizations).values({
                    userId: createdUser[0].id,
                    organizationId: testData.demoOrg.id
                });
            }
            else {
                // Regular users go to regular organization
                await db_1.db.insert(schema_1.userOrganizations).values({
                    userId: createdUser[0].id,
                    organizationId: testData.regularOrg.id
                });
            }
        }
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test data
        if (createdUserIds.length > 0) {
            await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.inArray)(schema_1.userOrganizations.userId, createdUserIds));
            await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.inArray)(schema_1.users.id, createdUserIds));
        }
        if (createdOrgIds.length > 0) {
            await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.inArray)(schema_1.organizations.id, createdOrgIds));
        }
    });
    (0, globals_1.describe)('Organization-based User Access', () => {
        (0, globals_1.it)('should verify test users are in correct organizations', async () => {
            // Verify regular manager is in regular org
            const regularManagerOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .leftJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, schema_1.users.id))
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.regularManager.email));
            (0, globals_1.expect)(regularManagerOrgs).toHaveLength(1);
            (0, globals_1.expect)(regularManagerOrgs[0].organizationId).toBe(testData.regularOrg.id);
            // Verify demo manager is in demo org
            const demoManagerOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .leftJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, schema_1.users.id))
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.demoManager.email));
            (0, globals_1.expect)(demoManagerOrgs).toHaveLength(1);
            (0, globals_1.expect)(demoManagerOrgs[0].organizationId).toBe(testData.demoOrg.id);
        });
        (0, globals_1.it)('should have demo users only in demo organization', async () => {
            const demoUsers = await db_1.db
                .select({
                email: schema_1.users.email,
                role: schema_1.users.role,
                organizationId: schema_1.userOrganizations.organizationId
            })
                .from(schema_1.users)
                .leftJoin(schema_1.userOrganizations, (0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userOrganizations.userId))
                .where((0, drizzle_orm_1.inArray)(schema_1.users.role, ['demo_manager', 'demo_tenant', 'demo_resident']));
            (0, globals_1.expect)(demoUsers.length).toBeGreaterThan(0);
            // All demo users should be in demo organization
            for (const user of demoUsers) {
                (0, globals_1.expect)(user.organizationId).toBe(testData.demoOrg.id);
            }
        });
        (0, globals_1.it)('should have regular users only in regular organization', async () => {
            const regularUsers = await db_1.db
                .select({
                email: schema_1.users.email,
                role: schema_1.users.role,
                organizationId: schema_1.userOrganizations.organizationId
            })
                .from(schema_1.users)
                .leftJoin(schema_1.userOrganizations, (0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userOrganizations.userId))
                .where((0, drizzle_orm_1.inArray)(schema_1.users.role, ['manager', 'tenant', 'resident']));
            const testUsers = regularUsers.filter(u => u.email && u.email.includes('@test.koveo.com'));
            (0, globals_1.expect)(testUsers.length).toBeGreaterThan(0);
            // All regular test users should be in regular organization  
            for (const user of testUsers) {
                (0, globals_1.expect)(user.organizationId).toBe(testData.regularOrg.id);
            }
        });
    });
    (0, globals_1.describe)('API Endpoint Access Control', () => {
        async function loginUser(email, password) {
            try {
                const response = await fetch('http://localhost:5000/api/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                if (response.ok) {
                    const cookies = response.headers.get('set-cookie');
                    return cookies;
                }
                return null;
            }
            catch (error) {
                console.error('Login failed:', error);
                return null;
            }
        }
        async function fetchUsersAsRole(email, password) {
            const cookies = await loginUser(email, password);
            if (!cookies) {
                throw new Error(`Failed to login as ${email}`);
            }
            const response = await fetch('http://localhost:5000/api/users', {
                headers: { 'Cookie': cookies }
            });
            if (response.ok) {
                return await response.json();
            }
            else {
                throw new Error(`Failed to fetch users: ${response.status}`);
            }
        }
        (0, globals_1.it)('should allow admin to see all users including demo users', async () => {
            const users = await fetchUsersAsRole(testData.adminUser.email, testData.adminUser.password);
            (0, globals_1.expect)(users.length).toBeGreaterThan(0);
            // Admin should see both regular and demo users
            const userRoles = users.map(u => u.role);
            const hasRegularUsers = userRoles.some(role => ['manager', 'tenant', 'resident'].includes(role));
            const hasDemoUsers = userRoles.some(role => role.startsWith('demo'));
            (0, globals_1.expect)(hasRegularUsers).toBe(true);
            (0, globals_1.expect)(hasDemoUsers).toBe(true);
        });
        (0, globals_1.it)('should allow regular manager to see only users in their organization', async () => {
            const users = await fetchUsersAsRole(testData.regularManager.email, testData.regularManager.password);
            (0, globals_1.expect)(users.length).toBeGreaterThan(0);
            // Regular manager should only see regular users, no demo users
            const userRoles = users.map(u => u.role);
            const hasDemoUsers = userRoles.some(role => role.startsWith('demo'));
            (0, globals_1.expect)(hasDemoUsers).toBe(false);
            // Should see users from their organization (including themselves)
            const hasRegularUsers = userRoles.some(role => ['admin', 'manager', 'tenant', 'resident'].includes(role));
            (0, globals_1.expect)(hasRegularUsers).toBe(true);
        });
        (0, globals_1.it)('should allow demo manager to see only demo role users', async () => {
            const users = await fetchUsersAsRole(testData.demoManager.email, testData.demoManager.password);
            (0, globals_1.expect)(users.length).toBeGreaterThan(0);
            // Demo manager should only see demo users
            const userRoles = users.map(u => u.role);
            const hasNonDemoUsers = userRoles.some(role => !role.startsWith('demo'));
            (0, globals_1.expect)(hasNonDemoUsers).toBe(false);
            // Should see demo users (including themselves)
            const hasDemoUsers = userRoles.some(role => role.startsWith('demo'));
            (0, globals_1.expect)(hasDemoUsers).toBe(true);
        });
    });
    (0, globals_1.describe)('User Management CRUD Operations', () => {
        (0, globals_1.it)('should verify manager can edit users in their organization', async () => {
            // This test would check the PUT /api/users/:id endpoint
            // For now, we'll test the access logic by verifying organization membership
            const regularManager = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.regularManager.email))
                .then(results => results[0]);
            const regularTenant = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.regularTenant.email))
                .then(results => results[0]);
            (0, globals_1.expect)(regularManager).toBeDefined();
            (0, globals_1.expect)(regularTenant).toBeDefined();
            // Verify they're in the same organization
            const managerOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, regularManager.id));
            const tenantOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, regularTenant.id));
            (0, globals_1.expect)(managerOrgs[0]?.organizationId).toBe(tenantOrgs[0]?.organizationId);
        });
        (0, globals_1.it)('should verify demo manager cannot access regular users', async () => {
            const demoManager = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.demoManager.email))
                .then(results => results[0]);
            const regularTenant = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.regularTenant.email))
                .then(results => results[0]);
            (0, globals_1.expect)(demoManager).toBeDefined();
            (0, globals_1.expect)(regularTenant).toBeDefined();
            // Verify they're in different organizations
            const demoManagerOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, demoManager.id));
            const regularTenantOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, regularTenant.id));
            (0, globals_1.expect)(demoManagerOrgs[0]?.organizationId).not.toBe(regularTenantOrgs[0]?.organizationId);
        });
        (0, globals_1.it)('should verify role-based access permissions', async () => {
            const allUsers = await db_1.db.select().from(schema_1.users);
            const testUsers = allUsers.filter(u => u.email.includes('@test.koveo.com'));
            // Group users by role
            const usersByRole = {
                admin: testUsers.filter(u => u.role === 'admin'),
                manager: testUsers.filter(u => u.role === 'manager'),
                demo_manager: testUsers.filter(u => u.role === 'demo_manager'),
                tenant: testUsers.filter(u => u.role === 'tenant'),
                demo_tenant: testUsers.filter(u => u.role === 'demo_tenant'),
                demo_resident: testUsers.filter(u => u.role === 'demo_resident')
            };
            // Verify we have the expected roles
            (0, globals_1.expect)(usersByRole.admin.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(usersByRole.manager.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(usersByRole.demo_manager.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(usersByRole.tenant.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(usersByRole.demo_tenant.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(usersByRole.demo_resident.length).toBeGreaterThanOrEqual(1);
        });
    });
    (0, globals_1.describe)('Demo User Isolation', () => {
        (0, globals_1.it)('should ensure demo and regular users are properly isolated', async () => {
            // Get all demo users
            const demoUsers = await db_1.db
                .select({
                id: schema_1.users.id,
                role: schema_1.users.role,
                organizationId: schema_1.userOrganizations.organizationId
            })
                .from(schema_1.users)
                .leftJoin(schema_1.userOrganizations, (0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userOrganizations.userId))
                .where((0, drizzle_orm_1.inArray)(schema_1.users.role, ['demo_manager', 'demo_tenant', 'demo_resident']));
            // Get all regular users from our test data
            const regularUsers = await db_1.db
                .select({
                id: schema_1.users.id,
                role: schema_1.users.role,
                organizationId: schema_1.userOrganizations.organizationId
            })
                .from(schema_1.users)
                .leftJoin(schema_1.userOrganizations, (0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userOrganizations.userId))
                .where((0, drizzle_orm_1.inArray)(schema_1.users.email, [
                testData.adminUser.email,
                testData.regularManager.email,
                testData.regularTenant.email
            ]));
            // Verify demo users are only in demo organization
            for (const demoUser of demoUsers) {
                if (demoUser.organizationId) {
                    (0, globals_1.expect)(demoUser.organizationId).toBe(testData.demoOrg.id);
                }
            }
            // Verify regular users are not in demo organization
            for (const regularUser of regularUsers) {
                if (regularUser.organizationId && regularUser.role !== 'admin') {
                    (0, globals_1.expect)(regularUser.organizationId).not.toBe(testData.demoOrg.id);
                }
            }
        });
        (0, globals_1.it)('should verify demo organization type is properly set', async () => {
            const demoOrg = await db_1.db
                .select()
                .from(schema_1.organizations)
                .where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testData.demoOrg.id))
                .then(results => results[0]);
            (0, globals_1.expect)(demoOrg).toBeDefined();
            (0, globals_1.expect)(demoOrg.type).toBe('demo');
        });
        (0, globals_1.it)('should verify regular organization type is not demo', async () => {
            const regularOrg = await db_1.db
                .select()
                .from(schema_1.organizations)
                .where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testData.regularOrg.id))
                .then(results => results[0]);
            (0, globals_1.expect)(regularOrg).toBeDefined();
            (0, globals_1.expect)(regularOrg.type).not.toBe('demo');
            (0, globals_1.expect)(regularOrg.type).toBe('management_company');
        });
    });
    (0, globals_1.describe)('Critical Access Control Issues', () => {
        (0, globals_1.it)('should detect if manager can access users outside their organization', async () => {
            // This is a security test to ensure managers cannot access users from other organizations
            const regularManagerUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.regularManager.email))
                .then(results => results[0]);
            const demoUsers = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.inArray)(schema_1.users.role, ['demo_manager', 'demo_tenant', 'demo_resident']));
            (0, globals_1.expect)(regularManagerUser).toBeDefined();
            (0, globals_1.expect)(demoUsers.length).toBeGreaterThan(0);
            // Regular manager should not be able to access demo users
            // This would be enforced by the API endpoint logic
            const managerOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, regularManagerUser.id));
            const managerOrgIds = managerOrgs.map(org => org.organizationId);
            for (const demoUser of demoUsers) {
                const demoUserOrgs = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, demoUser.id));
                const demoUserOrgIds = demoUserOrgs.map(org => org.organizationId);
                const hasOverlap = managerOrgIds.some(id => demoUserOrgIds.includes(id));
                // Should have no organization overlap between regular manager and demo users
                (0, globals_1.expect)(hasOverlap).toBe(false);
            }
        });
        (0, globals_1.it)('should ensure demo manager can only see demo users', async () => {
            const demoManagerUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, testData.demoManager.email))
                .then(results => results[0]);
            (0, globals_1.expect)(demoManagerUser).toBeDefined();
            (0, globals_1.expect)(demoManagerUser.role).toBe('demo_manager');
            // Demo manager should only have access to demo organization
            const demoManagerOrgs = await db_1.db
                .select({ organizationId: schema_1.userOrganizations.organizationId })
                .from(schema_1.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, demoManagerUser.id));
            (0, globals_1.expect)(demoManagerOrgs).toHaveLength(1);
            (0, globals_1.expect)(demoManagerOrgs[0].organizationId).toBe(testData.demoOrg.id);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,