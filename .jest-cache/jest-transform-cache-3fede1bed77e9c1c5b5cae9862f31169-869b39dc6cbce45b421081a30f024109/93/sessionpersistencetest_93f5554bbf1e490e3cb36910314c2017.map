{"file":"/home/runner/workspace/tests/critical/session-persistence.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/critical/session-persistence.test.ts"],"sourcesContent":["/**\n * Critical Session Persistence Tests\n * \n * Tests for session loss scenarios that affect both development and production environments.\n * Detects issues with session storage, cookie management, and auth state persistence.\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport '../setup';\nimport { storage } from '../../server/storage';\nimport { hashPassword, sessionConfig, setupAuthRoutes } from '../../server/auth';\n\ndescribe('Session Persistence Critical Tests', () => {\n  let app: any;\n  let testUser: any;\n  let sessionCookie: string;\n\n  beforeEach(async () => {\n    // Create test Express app with session management\n    app = express();\n    app.use(express.json());\n    app.use(sessionConfig);\n    setupAuthRoutes(app);\n    \n    // Create test user\n    testUser = {\n      email: 'test-session@koveo-gestion.com',\n      password: await hashPassword('TestPassword123!'),\n      firstName: 'Session',\n      lastName: 'Test',\n      username: 'sessiontest',\n      role: 'admin' as const,\n      isActive: true,\n    };\n\n    const createdUser = await storage.createUser(testUser);\n    testUser.id = createdUser.id;\n  });\n\n  afterEach(async () => {\n    // Clean up test user\n    if (testUser?.id) {\n      try {\n        await storage.deleteUser(testUser.id);\n      } catch (error) {\n        // User might already be deleted\n      }\n    }\n  });\n\n  describe('Session Loss Detection', () => {\n    it('should maintain session after login and user check', async () => {\n      // Step 1: Login and capture session cookie\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'TestPassword123!',\n        })\n        .expect(200);\n\n      expect(loginResponse.body.user).toBeDefined();\n      expect(loginResponse.body.user.id).toBe(testUser.id);\n\n      // Extract session cookie\n      const cookies = loginResponse.headers['set-cookie'];\n      expect(cookies).toBeDefined();\n      sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n      expect(sessionCookie).toBeDefined();\n\n      // Step 2: Use session cookie to check user auth (should work)\n      const userCheckResponse = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      expect(userCheckResponse.body.id).toBe(testUser.id);\n      expect(userCheckResponse.body.email).toBe(testUser.email);\n      expect(userCheckResponse.body.firstName).toBe('Session');\n      expect(userCheckResponse.body.lastName).toBe('Test');\n\n      // Step 3: Make another request to ensure session persists\n      const secondCheckResponse = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      expect(secondCheckResponse.body.id).toBe(testUser.id);\n      expect(secondCheckResponse.body.email).toBe(testUser.email);\n    });\n\n    it('should detect session loss after multiple requests', async () => {\n      // Login first\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'TestPassword123!',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n      sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n\n      // Make multiple requests to simulate session usage\n      for (let i = 0; i < 5; i++) {\n        const response = await request(app)\n          .get('/api/auth/user')\n          .set('Cookie', sessionCookie);\n\n        // Should maintain auth across all requests\n        expect(response.status).toBe(200);\n        expect(response.body.id).toBe(testUser.id);\n        expect(response.body.firstName).toBe('Session');\n        expect(response.body.lastName).toBe('Test');\n        \n        // Session should return defined user data, not \"undefined undefined\"\n        expect(response.body.firstName).not.toBe('undefined');\n        expect(response.body.lastName).not.toBe('undefined');\n        expect(response.body.email).not.toBe('undefined');\n      }\n    });\n\n    it('should handle session store connection issues gracefully', async () => {\n      // Login successfully\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'TestPassword123!',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n      sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n\n      // Verify session works\n      await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      // Test session persistence under load\n      const requests = Array.from({ length: 10 }, (_, i) =>\n        request(app)\n          .get('/api/auth/user')\n          .set('Cookie', sessionCookie)\n      );\n\n      const responses = await Promise.all(requests);\n      \n      // All requests should succeed\n      responses.forEach((response, index) => {\n        expect(response.status).toBe(200);\n        expect(response.body.id).toBe(testUser.id);\n        expect(response.body.firstName).toBe('Session');\n        expect(response.body.lastName).toBe('Test');\n      });\n    });\n\n    it('should properly handle session refresh and extension', async () => {\n      // Login\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'TestPassword123!',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n      sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n\n      // Simulate multiple API calls that should extend session\n      const initialCheck = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      // Wait a moment and make another request (simulates user activity)\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      const extendedCheck = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      // Both should return valid user data\n      expect(initialCheck.body.id).toBe(testUser.id);\n      expect(extendedCheck.body.id).toBe(testUser.id);\n      expect(extendedCheck.body.firstName).toBe('Session');\n      expect(extendedCheck.body.lastName).toBe('Test');\n    });\n\n    it('should detect undefined user data patterns', async () => {\n      // Login\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'TestPassword123!',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n      sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n\n      // Check user data structure\n      const userResponse = await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      const user = userResponse.body;\n\n      // Ensure no undefined values that cause \"undefined undefined\" display\n      expect(user.firstName).toBeDefined();\n      expect(user.firstName).not.toBe('undefined');\n      expect(user.firstName).not.toBe(null);\n      expect(typeof user.firstName).toBe('string');\n      expect(user.firstName.length).toBeGreaterThan(0);\n\n      expect(user.lastName).toBeDefined();\n      expect(user.lastName).not.toBe('undefined');\n      expect(user.lastName).not.toBe(null);\n      expect(typeof user.lastName).toBe('string');\n      expect(user.lastName.length).toBeGreaterThan(0);\n\n      expect(user.email).toBeDefined();\n      expect(user.email).not.toBe('undefined');\n      expect(user.email).toBe(testUser.email);\n\n      expect(user.role).toBeDefined();\n      expect(user.role).not.toBe('undefined');\n      expect(user.role).toBe('admin');\n\n      // Verify the complete user object structure\n      expect(user).toMatchObject({\n        id: expect.any(String),\n        firstName: expect.any(String),\n        lastName: expect.any(String),\n        email: expect.any(String),\n        role: expect.any(String),\n        isActive: expect.any(Boolean),\n      });\n    });\n  });\n\n  describe('Session Cookie Management', () => {\n    it('should set proper cookie attributes for session persistence', async () => {\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'TestPassword123!',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n      const sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n      \n      expect(sessionCookie).toBeDefined();\n      \n      // Check cookie attributes for proper session management\n      expect(sessionCookie).toMatch(/HttpOnly/i);\n      expect(sessionCookie).toMatch(/Path=\\//);\n      \n      // Should have a reasonable max age (7 days = 604800 seconds)\n      expect(sessionCookie).toMatch(/Max-Age=\\d+/);\n    });\n\n    it('should handle logout and clear session properly', async () => {\n      // Login first\n      const loginResponse = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'TestPassword123!',\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n      sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n\n      // Verify session works\n      await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      // Logout\n      const logoutResponse = await request(app)\n        .post('/api/auth/logout')\n        .set('Cookie', sessionCookie)\n        .expect(200);\n\n      // Verify session is cleared\n      await request(app)\n        .get('/api/auth/user')\n        .set('Cookie', sessionCookie)\n        .expect(401);\n    });\n  });\n\n  describe('Production Environment Simulation', () => {\n    it('should work with production-like cookie settings', async () => {\n      // This test simulates production environment cookie behavior\n      const originalNodeEnv = process.env.NODE_ENV;\n      process.env.NODE_ENV = 'production';\n\n      try {\n        const loginResponse = await request(app)\n          .post('/api/auth/login')\n          .send({\n            email: testUser.email,\n            password: 'TestPassword123!',\n          })\n          .expect(200);\n\n        const cookies = loginResponse.headers['set-cookie'];\n        sessionCookie = cookies.find((cookie: string) => cookie.startsWith('koveo.sid='));\n\n        // Should still work with production cookie settings\n        const userResponse = await request(app)\n          .get('/api/auth/user')\n          .set('Cookie', sessionCookie)\n          .expect(200);\n\n        expect(userResponse.body.id).toBe(testUser.id);\n        expect(userResponse.body.firstName).toBe('Session');\n        expect(userResponse.body.lastName).toBe('Test');\n      } finally {\n        process.env.NODE_ENV = originalNodeEnv;\n      }\n    });\n  });\n});"],"version":3}