{"file":"/home/runner/workspace/tests/unit/calendar/enhanced-calendar-features.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/calendar/enhanced-calendar-features.test.ts"],"sourcesContent":["import { describe, test, expect, beforeEach } from '@jest/globals';\nimport { addDays, format } from 'date-fns';\n\n/**\n * Enhanced Calendar Features Unit Tests\n * Tests the new opening hours visibility and reservation functionality\n */\n\ndescribe('Enhanced Calendar Features', () => {\n  // Test data structures matching the enhanced schema\n  const mockCommonSpace = {\n    id: '75c4f108-3ec1-437d-bdec-35d1f8e2a44d',\n    name: 'Salle communautaire',\n    isReservable: true,\n    openingHours: [\n      {\n        day: 'monday',\n        open: '08:00',\n        close: '20:00',\n        isOpen: true,\n        breaks: [\n          { start: '12:00', end: '13:00', reason: 'Cleaning' }\n        ]\n      },\n      {\n        day: 'tuesday',\n        open: '08:00',\n        close: '20:00',\n        isOpen: true,\n        breaks: []\n      },\n      {\n        day: 'wednesday',\n        open: '08:00',\n        close: '20:00',\n        isOpen: false\n      },\n      {\n        day: 'thursday',\n        open: '10:00',\n        close: '18:00',\n        isOpen: true,\n        breaks: []\n      },\n      {\n        day: 'friday',\n        open: '08:00',\n        close: '22:00',\n        isOpen: true,\n        breaks: []\n      },\n      {\n        day: 'saturday',\n        open: '09:00',\n        close: '17:00',\n        isOpen: true,\n        breaks: []\n      }\n      // Sunday not defined (closed)\n    ],\n    unavailablePeriods: [\n      {\n        startDate: '2025-12-24T00:00:00Z',\n        endDate: '2025-12-26T23:59:59Z',\n        reason: 'Holiday closure',\n        recurrence: 'yearly'\n      },\n      {\n        startDate: '2025-01-15T00:00:00Z',\n        endDate: '2025-01-17T23:59:59Z',\n        reason: 'Maintenance',\n        recurrence: 'none'\n      }\n    ]\n  };\n\n  const mockBookings = [\n    {\n      id: 'booking-1',\n      startTime: '2025-01-20T14:00:00Z',\n      endTime: '2025-01-20T16:00:00Z',\n      status: 'confirmed' as const,\n      userId: 'user-1'\n    },\n    {\n      id: 'booking-2',\n      startTime: '2025-01-20T10:00:00Z',\n      endTime: '2025-01-20T11:30:00Z',\n      status: 'confirmed' as const,\n      userId: 'user-2'\n    }\n  ];\n\n  describe('Opening Hours Structure Validation', () => {\n    test('should validate enhanced opening hours structure', () => {\n      const { openingHours } = mockCommonSpace;\n      \n      expect(openingHours).toBeDefined();\n      expect(Array.isArray(openingHours)).toBe(true);\n      \n      // Check Monday entry with breaks\n      const mondayHours = openingHours?.find(h => h.day === 'monday');\n      expect(mondayHours).toBeDefined();\n      expect(mondayHours?.isOpen).toBe(true);\n      expect(mondayHours?.open).toBe('08:00');\n      expect(mondayHours?.close).toBe('20:00');\n      expect(mondayHours?.breaks).toBeDefined();\n      expect(Array.isArray(mondayHours?.breaks)).toBe(true);\n      expect(mondayHours?.breaks?.length).toBe(1);\n      expect(mondayHours?.breaks?.[0].start).toBe('12:00');\n      expect(mondayHours?.breaks?.[0].end).toBe('13:00');\n      expect(mondayHours?.breaks?.[0].reason).toBe('Cleaning');\n\n      // Check Wednesday (closed day)\n      const wednesdayHours = openingHours?.find(h => h.day === 'wednesday');\n      expect(wednesdayHours).toBeDefined();\n      expect(wednesdayHours?.isOpen).toBe(false);\n    });\n\n    test('should validate unavailable periods structure', () => {\n      const { unavailablePeriods } = mockCommonSpace;\n      \n      expect(unavailablePeriods).toBeDefined();\n      expect(Array.isArray(unavailablePeriods)).toBe(true);\n      expect(unavailablePeriods?.length).toBe(2);\n\n      // Holiday closure\n      const holidayClosure = unavailablePeriods?.[0];\n      expect(holidayClosure?.startDate).toBe('2025-12-24T00:00:00Z');\n      expect(holidayClosure?.endDate).toBe('2025-12-26T23:59:59Z');\n      expect(holidayClosure?.reason).toBe('Holiday closure');\n      expect(holidayClosure?.recurrence).toBe('yearly');\n\n      // Maintenance period\n      const maintenancePeriod = unavailablePeriods?.[1];\n      expect(maintenancePeriod?.startDate).toBe('2025-01-15T00:00:00Z');\n      expect(maintenancePeriod?.endDate).toBe('2025-01-17T23:59:59Z');\n      expect(maintenancePeriod?.reason).toBe('Maintenance');\n      expect(maintenancePeriod?.recurrence).toBe('none');\n    });\n  });\n\n  describe('Day Availability Logic', () => {\n    const isDayAvailable = (checkDate: Date, space = mockCommonSpace): boolean => {\n      // Past dates are not available\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const dayToCheck = new Date(checkDate);\n      dayToCheck.setHours(0, 0, 0, 0);\n      \n      if (dayToCheck < today) {\n        return false;\n      }\n\n      // Check unavailable periods\n      if (space.unavailablePeriods) {\n        for (const period of space.unavailablePeriods) {\n          const startDate = new Date(period.startDate);\n          const endDate = new Date(period.endDate);\n          startDate.setHours(0, 0, 0, 0);\n          endDate.setHours(23, 59, 59, 999);\n          \n          if (dayToCheck >= startDate && dayToCheck <= endDate) {\n            return false;\n          }\n        }\n      }\n\n      // Check opening hours\n      if (space.openingHours) {\n        const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n        const dayHours = space.openingHours.find(h => h.day.toLowerCase() === dayName);\n        \n        if (!dayHours || dayHours.isOpen === false) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    test('should correctly identify available days', () => {\n      const today = new Date();\n      const tomorrow = addDays(today, 1);\n      // Use a more future date to avoid any edge cases\n      const futureMonday = addDays(today, 14); // Two weeks from today, ensure it's Monday\n      while (futureMonday.getDay() !== 1) { // 1 = Monday\n        futureMonday.setDate(futureMonday.getDate() + 1);\n      }\n\n      expect(isDayAvailable(tomorrow)).toBe(true);\n      expect(isDayAvailable(futureMonday)).toBe(true);\n    });\n\n    test('should correctly identify past dates as unavailable', () => {\n      const yesterday = addDays(new Date(), -1);\n      expect(isDayAvailable(yesterday)).toBe(false);\n    });\n\n    test('should correctly identify closed days as unavailable', () => {\n      const today = new Date();\n      // Find next Wednesday (closed day)\n      const futureWednesday = addDays(today, 7);\n      while (futureWednesday.getDay() !== 3) { // 3 = Wednesday\n        futureWednesday.setDate(futureWednesday.getDate() + 1);\n      }\n      \n      // Find next Sunday (no hours defined)  \n      const futureSunday = addDays(today, 7);\n      while (futureSunday.getDay() !== 0) { // 0 = Sunday\n        futureSunday.setDate(futureSunday.getDate() + 1);\n      }\n      \n      expect(isDayAvailable(futureWednesday)).toBe(false);\n      expect(isDayAvailable(futureSunday)).toBe(false);\n    });\n\n    test('should correctly identify unavailable periods', () => {\n      const christmasEve = new Date('2025-12-24');\n      const christmasDay = new Date('2025-12-25');\n      const boxingDay = new Date('2025-12-26');\n      const maintenanceDay = new Date('2025-01-16');\n      \n      expect(isDayAvailable(christmasEve)).toBe(false);\n      expect(isDayAvailable(christmasDay)).toBe(false);\n      expect(isDayAvailable(boxingDay)).toBe(false);\n      expect(isDayAvailable(maintenanceDay)).toBe(false);\n    });\n  });\n\n  describe('Time Slot Availability Logic', () => {\n    const isTimeSlotAvailable = (date: Date, time: string, duration: number = 60): boolean => {\n      // Check if day is available\n      if (!isDayAvailable(date)) {\n        return false;\n      }\n\n      const [hour, minute] = time.split(':').map(Number);\n      const slotStart = new Date(date);\n      slotStart.setHours(hour, minute, 0, 0);\n      const slotEnd = new Date(slotStart);\n      slotEnd.setMinutes(slotEnd.getMinutes() + duration);\n\n      // Check opening hours\n      const dayName = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n      const dayHours = mockCommonSpace.openingHours?.find(h => h.day.toLowerCase() === dayName);\n\n      if (!dayHours || dayHours.isOpen === false) {\n        return false;\n      }\n\n      // Parse opening hours\n      const openTime = new Date(date);\n      const [openHour, openMinute] = dayHours.open.split(':').map(Number);\n      openTime.setHours(openHour, openMinute, 0, 0);\n\n      const closeTime = new Date(date);\n      const [closeHour, closeMinute] = dayHours.close.split(':').map(Number);\n      closeTime.setHours(closeHour, closeMinute, 0, 0);\n\n      // Check if slot is within opening hours\n      if (slotStart < openTime || slotEnd > closeTime) {\n        return false;\n      }\n\n      // Check breaks\n      if (dayHours.breaks) {\n        for (const breakPeriod of dayHours.breaks) {\n          const breakStart = new Date(date);\n          const [breakStartHour, breakStartMinute] = breakPeriod.start.split(':').map(Number);\n          breakStart.setHours(breakStartHour, breakStartMinute, 0, 0);\n\n          const breakEnd = new Date(date);\n          const [breakEndHour, breakEndMinute] = breakPeriod.end.split(':').map(Number);\n          breakEnd.setHours(breakEndHour, breakEndMinute, 0, 0);\n\n          // Check if slot overlaps with break\n          if (\n            (slotStart >= breakStart && slotStart < breakEnd) ||\n            (slotEnd > breakStart && slotEnd <= breakEnd) ||\n            (slotStart <= breakStart && slotEnd >= breakEnd)\n          ) {\n            return false;\n          }\n        }\n      }\n\n      // Check conflicts with existing bookings\n      const dayBookings = mockBookings.filter(booking => {\n        const bookingDate = new Date(booking.startTime);\n        return bookingDate.toDateString() === date.toDateString() && booking.status === 'confirmed';\n      });\n\n      return !dayBookings.some(booking => {\n        const bookingStart = new Date(booking.startTime);\n        const bookingEnd = new Date(booking.endTime);\n\n        return (\n          (slotStart >= bookingStart && slotStart < bookingEnd) ||\n          (slotEnd > bookingStart && slotEnd <= bookingEnd) ||\n          (slotStart <= bookingStart && slotEnd >= bookingEnd)\n        );\n      });\n    };\n\n    const isDayAvailable = (checkDate: Date): boolean => {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const dayToCheck = new Date(checkDate);\n      dayToCheck.setHours(0, 0, 0, 0);\n      \n      if (dayToCheck < today) {\n        return false;\n      }\n\n      if (mockCommonSpace.unavailablePeriods) {\n        for (const period of mockCommonSpace.unavailablePeriods) {\n          const startDate = new Date(period.startDate);\n          const endDate = new Date(period.endDate);\n          startDate.setHours(0, 0, 0, 0);\n          endDate.setHours(23, 59, 59, 999);\n          \n          if (dayToCheck >= startDate && dayToCheck <= endDate) {\n            return false;\n          }\n        }\n      }\n\n      if (mockCommonSpace.openingHours) {\n        const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n        const dayHours = mockCommonSpace.openingHours.find(h => h.day.toLowerCase() === dayName);\n        \n        if (!dayHours || dayHours.isOpen === false) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    test('should allow available time slots within opening hours', () => {\n      const today = new Date();\n      const futureMonday = addDays(today, 14);\n      while (futureMonday.getDay() !== 1) { // 1 = Monday\n        futureMonday.setDate(futureMonday.getDate() + 1);\n      }\n      \n      expect(isTimeSlotAvailable(futureMonday, '08:00')).toBe(true); // Opening time\n      expect(isTimeSlotAvailable(futureMonday, '09:00')).toBe(true); // Within hours\n      expect(isTimeSlotAvailable(futureMonday, '19:00')).toBe(true); // Before closing\n    });\n\n    test('should reject time slots outside opening hours', () => {\n      const today = new Date();\n      const futureMonday = addDays(today, 14);\n      while (futureMonday.getDay() !== 1) { // 1 = Monday\n        futureMonday.setDate(futureMonday.getDate() + 1);\n      }\n      \n      expect(isTimeSlotAvailable(futureMonday, '07:00')).toBe(false); // Before opening\n      expect(isTimeSlotAvailable(futureMonday, '20:00')).toBe(false); // At closing time (would end after)\n      expect(isTimeSlotAvailable(futureMonday, '21:00')).toBe(false); // After closing\n    });\n\n    test('should reject time slots during breaks', () => {\n      const today = new Date();\n      const futureMonday = addDays(today, 14);\n      while (futureMonday.getDay() !== 1) { // 1 = Monday\n        futureMonday.setDate(futureMonday.getDate() + 1);\n      }\n      \n      expect(isTimeSlotAvailable(futureMonday, '12:00')).toBe(false); // During break\n      expect(isTimeSlotAvailable(futureMonday, '12:30')).toBe(false); // During break\n      expect(isTimeSlotAvailable(futureMonday, '11:30')).toBe(false); // Would extend into break\n      expect(isTimeSlotAvailable(futureMonday, '13:00')).toBe(true); // After break\n    });\n\n    test('should reject time slots that conflict with existing bookings', () => {\n      const bookingDate = new Date('2025-01-20T00:00:00'); // Same date as mock bookings\n      \n      // Booking exists 14:00-16:00\n      expect(isTimeSlotAvailable(bookingDate, '14:00')).toBe(false);\n      expect(isTimeSlotAvailable(bookingDate, '15:00')).toBe(false);\n      expect(isTimeSlotAvailable(bookingDate, '13:30')).toBe(false); // Would extend into booking\n      // Booking ends at 16:00, so 16:00 should be available (no conflict)\n      expect(isTimeSlotAvailable(bookingDate, '16:00')).toBe(true); // After booking\n      \n      // Booking exists 10:00-11:30\n      expect(isTimeSlotAvailable(bookingDate, '10:00')).toBe(false);\n      expect(isTimeSlotAvailable(bookingDate, '11:00')).toBe(false);\n      expect(isTimeSlotAvailable(bookingDate, '11:30')).toBe(true); // After booking\n    });\n  });\n\n  describe('Visual Indicators Logic', () => {\n    test('should correctly identify booked time slots', () => {\n      const bookingDate = new Date('2025-01-20');\n      const bookingTimes = ['14:00', '14:30', '15:00', '15:30'];\n      \n      bookingTimes.forEach(time => {\n        const hasBooking = mockBookings.some(booking => {\n          const bookingStart = new Date(booking.startTime);\n          const bookingEnd = new Date(booking.endTime);\n          const timeSlot = new Date(bookingDate);\n          const [hour, minute] = time.split(':').map(Number);\n          timeSlot.setHours(hour, minute, 0, 0);\n          \n          return timeSlot >= bookingStart && timeSlot < bookingEnd;\n        });\n        \n        expect(hasBooking).toBe(true);\n      });\n    });\n\n    test('should correctly identify available time slots', () => {\n      const bookingDate = new Date('2025-01-20');\n      const availableTimes = ['08:00', '09:00', '12:00', '17:00'];\n      \n      availableTimes.forEach(time => {\n        const hasBooking = mockBookings.some(booking => {\n          const bookingStart = new Date(booking.startTime);\n          const bookingEnd = new Date(booking.endTime);\n          const timeSlot = new Date(bookingDate);\n          const [hour, minute] = time.split(':').map(Number);\n          timeSlot.setHours(hour, minute, 0, 0);\n          \n          return timeSlot >= bookingStart && timeSlot < bookingEnd;\n        });\n        \n        expect(hasBooking).toBe(false);\n      });\n    });\n  });\n\n  describe('Calendar Display Logic', () => {\n    test('should provide correct CSS classes for different day states', () => {\n      const getDateClass = (date: Date) => {\n        const today = new Date();\n        const isCurrentDay = date.toDateString() === today.toDateString();\n        const isAvailable = isDayAvailable(date);\n        \n        if (!isAvailable) {\n          return 'bg-red-100 text-red-600 cursor-not-allowed border border-red-200';\n        } else if (isCurrentDay) {\n          return 'bg-blue-100 text-blue-900 hover:bg-blue-200';\n        } else {\n          return 'hover:bg-gray-100';\n        }\n      };\n\n      const today = new Date();\n      const futureWednesday = new Date('2025-06-04'); // Closed day\n      const futureMonday = addDays(new Date(), 21); // Use a date in the future\n      while (futureMonday.getDay() !== 1) { // 1 = Monday\n        futureMonday.setDate(futureMonday.getDate() + 1);\n      }\n      \n      expect(getDateClass(today)).toContain('bg-blue-100'); // Today\n      expect(getDateClass(futureWednesday)).toContain('bg-red-100'); // Unavailable\n      expect(getDateClass(futureMonday)).toBe('hover:bg-gray-100'); // Available\n    });\n\n    const isDayAvailable = (checkDate: Date): boolean => {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const dayToCheck = new Date(checkDate);\n      dayToCheck.setHours(0, 0, 0, 0);\n      \n      if (dayToCheck < today) {\n        return false;\n      }\n\n      if (mockCommonSpace.unavailablePeriods) {\n        for (const period of mockCommonSpace.unavailablePeriods) {\n          const startDate = new Date(period.startDate);\n          const endDate = new Date(period.endDate);\n          startDate.setHours(0, 0, 0, 0);\n          endDate.setHours(23, 59, 59, 999);\n          \n          if (dayToCheck >= startDate && dayToCheck <= endDate) {\n            return false;\n          }\n        }\n      }\n\n      if (mockCommonSpace.openingHours) {\n        const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n        const dayHours = mockCommonSpace.openingHours.find(h => h.day.toLowerCase() === dayName);\n        \n        if (!dayHours || dayHours.isOpen === false) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    test('should show correct legend items', () => {\n      const legendItems = [\n        { color: 'bg-blue-600', label: 'Selected' },\n        { color: 'bg-orange-500', label: 'Booked' },\n        { color: 'bg-red-500', label: 'Unavailable' },\n        { color: 'bg-blue-200', label: 'Today' }\n      ];\n      \n      expect(legendItems).toHaveLength(4);\n      expect(legendItems.find(item => item.label === 'Unavailable')).toBeDefined();\n    });\n  });\n\n  describe('Integration Testing', () => {\n    test('should handle complete booking flow validation', () => {\n      const testDate = new Date('2025-06-02'); // Monday\n      const testTime = '15:00';\n      \n      // Step 1: Check if day is available - use future date to ensure it's available\n      const futureTestDate = addDays(new Date(), 14);\n      while (futureTestDate.getDay() !== 1) { // 1 = Monday\n        futureTestDate.setDate(futureTestDate.getDate() + 1);\n      }\n      const dayAvailable = isDayAvailable(futureTestDate);\n      expect(dayAvailable).toBe(true);\n      \n      // Step 2: Check if time slot is available\n      const timeAvailable = isTimeSlotAvailable(futureTestDate, testTime);\n      expect(timeAvailable).toBe(true);\n      \n      // Step 3: Validate booking constraints\n      const [hour, minute] = testTime.split(':').map(Number);\n      expect(hour).toBeGreaterThanOrEqual(8); // After opening\n      expect(hour).toBeLessThan(20); // Before closing\n    });\n\n    const isDayAvailable = (checkDate: Date): boolean => {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const dayToCheck = new Date(checkDate);\n      dayToCheck.setHours(0, 0, 0, 0);\n      \n      if (dayToCheck < today) {\n        return false;\n      }\n\n      if (mockCommonSpace.unavailablePeriods) {\n        for (const period of mockCommonSpace.unavailablePeriods) {\n          const startDate = new Date(period.startDate);\n          const endDate = new Date(period.endDate);\n          startDate.setHours(0, 0, 0, 0);\n          endDate.setHours(23, 59, 59, 999);\n          \n          if (dayToCheck >= startDate && dayToCheck <= endDate) {\n            return false;\n          }\n        }\n      }\n\n      if (mockCommonSpace.openingHours) {\n        const dayName = checkDate.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n        const dayHours = mockCommonSpace.openingHours.find(h => h.day.toLowerCase() === dayName);\n        \n        if (!dayHours || dayHours.isOpen === false) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    const isTimeSlotAvailable = (date: Date, time: string): boolean => {\n      if (!isDayAvailable(date)) {\n        return false;\n      }\n\n      const [hour, minute] = time.split(':').map(Number);\n      const slotStart = new Date(date);\n      slotStart.setHours(hour, minute, 0, 0);\n      const slotEnd = new Date(slotStart);\n      slotEnd.setMinutes(slotEnd.getMinutes() + 60);\n\n      const dayName = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n      const dayHours = mockCommonSpace.openingHours?.find(h => h.day.toLowerCase() === dayName);\n\n      if (!dayHours || dayHours.isOpen === false) {\n        return false;\n      }\n\n      const openTime = new Date(date);\n      const [openHour, openMinute] = dayHours.open.split(':').map(Number);\n      openTime.setHours(openHour, openMinute, 0, 0);\n\n      const closeTime = new Date(date);\n      const [closeHour, closeMinute] = dayHours.close.split(':').map(Number);\n      closeTime.setHours(closeHour, closeMinute, 0, 0);\n\n      if (slotStart < openTime || slotEnd > closeTime) {\n        return false;\n      }\n\n      if (dayHours.breaks) {\n        for (const breakPeriod of dayHours.breaks) {\n          const breakStart = new Date(date);\n          const [breakStartHour, breakStartMinute] = breakPeriod.start.split(':').map(Number);\n          breakStart.setHours(breakStartHour, breakStartMinute, 0, 0);\n\n          const breakEnd = new Date(date);\n          const [breakEndHour, breakEndMinute] = breakPeriod.end.split(':').map(Number);\n          breakEnd.setHours(breakEndHour, breakEndMinute, 0, 0);\n\n          if (\n            (slotStart >= breakStart && slotStart < breakEnd) ||\n            (slotEnd > breakStart && slotEnd <= breakEnd) ||\n            (slotStart <= breakStart && slotEnd >= breakEnd)\n          ) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    };\n\n    test('should handle edge cases correctly', () => {\n      // Test exactly at opening/closing times\n      const thursday = new Date('2025-06-05'); // Thursday 10:00-18:00\n      \n      // Thursday 10:00-18:00, let's use a future Thursday to avoid date issues\n      const futureThursday = addDays(new Date(), 14);\n      while (futureThursday.getDay() !== 4) { // 4 = Thursday\n        futureThursday.setDate(futureThursday.getDate() + 1);\n      }\n      \n      expect(isTimeSlotAvailable(futureThursday, '10:00')).toBe(true); // Opening time\n      expect(isTimeSlotAvailable(futureThursday, '17:00')).toBe(true); // Last valid slot\n      expect(isTimeSlotAvailable(futureThursday, '18:00')).toBe(false); // Would end after closing\n      \n      // Test break boundaries - use future Monday\n      const futureMonday = addDays(new Date(), 14);\n      while (futureMonday.getDay() !== 1) { // 1 = Monday\n        futureMonday.setDate(futureMonday.getDate() + 1);\n      }\n      \n      expect(isTimeSlotAvailable(futureMonday, '11:00')).toBe(true); // Before break\n      expect(isTimeSlotAvailable(futureMonday, '11:30')).toBe(false); // Would extend into break\n      expect(isTimeSlotAvailable(futureMonday, '13:00')).toBe(true); // After break\n    });\n  });\n});"],"version":3}