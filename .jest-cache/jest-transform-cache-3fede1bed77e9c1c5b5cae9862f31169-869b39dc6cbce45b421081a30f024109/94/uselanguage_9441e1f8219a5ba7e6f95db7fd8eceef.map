{"file":"/home/runner/workspace/client/src/hooks/use-language.tsx","mappings":";;AAgCA,4CA8BC;AAeD,kCAOC;;AApFD,iCAAkF;AAClF,qCAAoD;AAapD,MAAM,eAAe,GAAG,IAAA,qBAAa,EAAkC,SAAS,CAAC,CAAC;AASlF;;;;;;;;GAQG;AACH,SAAgB,gBAAgB,CAAC,EAAE,QAAQ,EAAyB;IAClE,wEAAwE;IACxE,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,IAAA,gBAAQ,EAAW,GAAG,EAAE;QACtD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YAClC,MAAM,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAa,CAAC;YACzE,OAAO,aAAa,IAAI,IAAI,CAAC,CAAC,+BAA+B;QAC/D,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,+DAA+D;IAC/D,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YAClC,YAAY,CAAC,OAAO,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QACnD,CAAC;IACH,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,MAAM,cAAc,GAAG,GAAG,EAAE;QAC1B,WAAW,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC;IAEF,MAAM,CAAC,GAAG,CAAC,IAAkC,EAAU,EAAE;QACvD,OAAO,mBAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;IAC9C,CAAC,CAAC;IAEF,OAAO,CACL,uBAAC,eAAe,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC,EAAE,YAC1E,QAAQ,GACgB,CAC5B,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,SAAgB,WAAW;IACzB,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,eAAe,CAAC,CAAC;IAE5C,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","names":[],"sources":["/home/runner/workspace/client/src/hooks/use-language.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Language, translations } from '@/lib/i18n';\n\n/**\n * Context type definition for the language provider.\n * Provides language state management and translation function.\n */\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  toggleLanguage: () => void;\n  t: (_key: keyof typeof translations.en) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\n/**\n * Props interface for the LanguageProvider component.\n */\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Language provider component that manages application language state.\n * Provides translation functionality and language switching for the entire app.\n * Defaults to French ('fr') for Quebec property management context.\n *\n * @param {LanguageProviderProps} props - Component props.\n * @param {ReactNode} props.children - Child components that will have access to language context.\n * @returns {JSX.Element} Language context provider wrapper.\n */\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  // Initialize language from localStorage or default to French for Quebec\n  const [language, setLanguage] = useState<Language>(() => {\n    if (typeof window !== 'undefined') {\n      const savedLanguage = localStorage.getItem('koveo-language') as Language;\n      return savedLanguage || 'fr'; // Default to French for Quebec\n    }\n    return 'fr';\n  });\n\n  // Save language preference to localStorage whenever it changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('koveo-language', language);\n    }\n  }, [language]);\n\n  const toggleLanguage = () => {\n    setLanguage((current) => (current === 'en' ? 'fr' : 'en'));\n  };\n\n  const t = (_key: keyof typeof translations.en): string => {\n    return translations[language][_key] || _key;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, toggleLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\n/**\n * Custom hook to access language context and translation functionality.\n * Must be used within a LanguageProvider component tree.\n *\n * @returns {LanguageContextType} Language context with current language, setter, and translation function.\n * @throws {Error} If used outside of LanguageProvider.\n * @example\n * ```typescript\n * const { language, setLanguage, t } = useLanguage();\n * const title = t('welcome'); // Gets translated text\n * setLanguage('fr'); // Switch to French\n * ```\n */\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n"],"version":3}