e64918b6f93a6db4e886c7d73241881f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByDisplayValue = exports.queryAllByDisplayValue = exports.getByDisplayValue = exports.getAllByDisplayValue = exports.findByDisplayValue = exports.findAllByDisplayValue = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByDisplayValue = (container, value, { exact = true, collapseWhitespace, trim, normalizer } = {}) => {
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    return Array.from(container.querySelectorAll(`input,textarea,select`)).filter(node => {
        if (node.tagName === 'SELECT') {
            const selectedOptions = Array.from(node.options).filter(option => option.selected);
            return selectedOptions.some(optionNode => matcher((0, _allUtils.getNodeText)(optionNode), optionNode, value, matchNormalizer));
        }
        else {
            return matcher(node.value, node, value, matchNormalizer);
        }
    });
};
const getMultipleError = (c, value) => `Found multiple elements with the display value: ${value}.`;
const getMissingError = (c, value) => `Unable to find an element with the display value: ${value}.`;
const queryAllByDisplayValueWithSuggestions = exports.queryAllByDisplayValue = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByDisplayValue, queryAllByDisplayValue.name, 'queryAll');
const [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = (0, _allUtils.buildQueries)(queryAllByDisplayValue, getMultipleError, getMissingError);
exports.findByDisplayValue = findByDisplayValue;
exports.findAllByDisplayValue = findAllByDisplayValue;
exports.getByDisplayValue = getByDisplayValue;
exports.getAllByDisplayValue = getAllByDisplayValue;
exports.queryByDisplayValue = queryByDisplayValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL2Rpc3BsYXktdmFsdWUuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyxPQUFPLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDOUwsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDaEQsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JDLElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxNQUFNLHNCQUFzQixHQUFHLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUNoRCxLQUFLLEdBQUcsSUFBSSxFQUNaLGtCQUFrQixFQUNsQixJQUFJLEVBQ0osVUFBVSxFQUNYLEdBQUcsRUFBRSxFQUFFLEVBQUU7SUFDUixDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDbkUsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BELGtCQUFrQjtRQUNsQixJQUFJO1FBQ0osVUFBVTtLQUNYLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuRixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDOUIsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25GLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQ2pJLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzNELENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUNGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxtREFBbUQsS0FBSyxHQUFHLENBQUM7QUFDbkcsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxxREFBcUQsS0FBSyxHQUFHLENBQUM7QUFDcEcsTUFBTSxxQ0FBcUMsR0FBRyxPQUFPLENBQUMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLDRCQUE0QixDQUFDLENBQUMsc0JBQXNCLEVBQUUsc0JBQXNCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2hNLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUN6TSxPQUFPLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxDQUFDLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL0B0ZXN0aW5nLWxpYnJhcnkvZG9tL2Rpc3QvcXVlcmllcy9kaXNwbGF5LXZhbHVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5xdWVyeUFsbEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5nZXRCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZ2V0QWxsQnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmZpbmRCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZmluZEFsbEJ5RGlzcGxheVZhbHVlID0gdm9pZCAwO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUgPSAoY29udGFpbmVyLCB2YWx1ZSwge1xuICBleGFjdCA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgdHJpbSxcbiAgbm9ybWFsaXplclxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGNvbnN0IG1hdGNoZXIgPSBleGFjdCA/IF9hbGxVdGlscy5tYXRjaGVzIDogX2FsbFV0aWxzLmZ1enp5TWF0Y2hlcztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIHJldHVybiBBcnJheS5mcm9tKGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKGBpbnB1dCx0ZXh0YXJlYSxzZWxlY3RgKSkuZmlsdGVyKG5vZGUgPT4ge1xuICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdTRUxFQ1QnKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZE9wdGlvbnMgPSBBcnJheS5mcm9tKG5vZGUub3B0aW9ucykuZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24uc2VsZWN0ZWQpO1xuICAgICAgcmV0dXJuIHNlbGVjdGVkT3B0aW9ucy5zb21lKG9wdGlvbk5vZGUgPT4gbWF0Y2hlcigoMCwgX2FsbFV0aWxzLmdldE5vZGVUZXh0KShvcHRpb25Ob2RlKSwgb3B0aW9uTm9kZSwgdmFsdWUsIG1hdGNoTm9ybWFsaXplcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWF0Y2hlcihub2RlLnZhbHVlLCBub2RlLCB2YWx1ZSwgbWF0Y2hOb3JtYWxpemVyKTtcbiAgICB9XG4gIH0pO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdmFsdWUpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBkaXNwbGF5IHZhbHVlOiAke3ZhbHVlfS5gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIHZhbHVlKSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSBkaXNwbGF5IHZhbHVlOiAke3ZhbHVlfS5gO1xuY29uc3QgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZVdpdGhTdWdnZXN0aW9ucyA9IGV4cG9ydHMucXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUsIHF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUubmFtZSwgJ3F1ZXJ5QWxsJyk7XG5jb25zdCBbcXVlcnlCeURpc3BsYXlWYWx1ZSwgZ2V0QWxsQnlEaXNwbGF5VmFsdWUsIGdldEJ5RGlzcGxheVZhbHVlLCBmaW5kQWxsQnlEaXNwbGF5VmFsdWUsIGZpbmRCeURpc3BsYXlWYWx1ZV0gPSAoMCwgX2FsbFV0aWxzLmJ1aWxkUXVlcmllcykocXVlcnlBbGxCeURpc3BsYXlWYWx1ZSwgZ2V0TXVsdGlwbGVFcnJvciwgZ2V0TWlzc2luZ0Vycm9yKTtcbmV4cG9ydHMuZmluZEJ5RGlzcGxheVZhbHVlID0gZmluZEJ5RGlzcGxheVZhbHVlO1xuZXhwb3J0cy5maW5kQWxsQnlEaXNwbGF5VmFsdWUgPSBmaW5kQWxsQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmdldEJ5RGlzcGxheVZhbHVlID0gZ2V0QnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmdldEFsbEJ5RGlzcGxheVZhbHVlID0gZ2V0QWxsQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLnF1ZXJ5QnlEaXNwbGF5VmFsdWUgPSBxdWVyeUJ5RGlzcGxheVZhbHVlOyJdLCJ2ZXJzaW9uIjozfQ==