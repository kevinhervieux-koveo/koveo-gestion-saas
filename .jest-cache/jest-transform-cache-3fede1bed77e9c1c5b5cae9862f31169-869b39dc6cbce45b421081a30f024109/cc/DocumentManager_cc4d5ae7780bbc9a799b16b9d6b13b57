2c1a8e24d8b01d552185720373d998ef
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DocumentManager;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const dialog_1 = require("@/components/ui/dialog");
const form_1 = require("@/components/ui/form");
const use_toast_1 = require("@/hooks/use-toast");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const queryClient_1 = require("@/lib/queryClient");
const lucide_react_1 = require("lucide-react");
const header_1 = require("@/components/layout/header");
const wouter_1 = require("wouter");
const documents_1 = require("@/lib/documents");
const createDocumentSchema = (type) => {
    const documentCategories = type === 'building' ? documents_1.BUILDING_DOCUMENT_CATEGORIES : documents_1.RESIDENCE_DOCUMENT_CATEGORIES;
    const validTypes = documentCategories.map((cat) => cat._value);
    const baseSchema = {
        name: zod_2.z.string().min(1, 'Name is required').max(255, 'Name too long'),
        description: zod_2.z.string().optional(),
        documentType: zod_2.z.enum(validTypes),
        isVisibleToTenants: zod_2.z.boolean().default(false),
    };
    if (type === 'building') {
        return zod_2.z.object({
            ...baseSchema,
            buildingId: zod_2.z.string().min(1, 'Building ID is required'),
        });
    }
    else {
        return zod_2.z.object({
            ...baseSchema,
            residenceId: zod_2.z.string().min(1, 'Residence ID is required'),
        });
    }
};
function DocumentManager({ config }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const [, navigate] = (0, wouter_1.useLocation)();
    // State management
    const [isUploadDialogOpen, setIsUploadDialogOpen] = (0, react_1.useState)(false);
    const [isViewDialogOpen, setIsViewDialogOpen] = (0, react_1.useState)(false);
    const [createMode, setCreateMode] = (0, react_1.useState)('file');
    const [textContent, setTextContent] = (0, react_1.useState)('');
    const [isEditMode, setIsEditMode] = (0, react_1.useState)(false);
    const [selectedDocument, setSelectedDocument] = (0, react_1.useState)(null);
    const [selectedFile, setSelectedFile] = (0, react_1.useState)(null);
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [selectedCategory, setSelectedCategory] = (0, react_1.useState)('all');
    const [selectedYear, setSelectedYear] = (0, react_1.useState)('all');
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const [isTextEditorOpen, setIsTextEditorOpen] = (0, react_1.useState)(false);
    const [textEditorDocument, setTextEditorDocument] = (0, react_1.useState)(null);
    const itemsPerPage = 12;
    const documentSchema = createDocumentSchema(config.type);
    const documentCategories = config.type === 'building' ? documents_1.BUILDING_DOCUMENT_CATEGORIES : documents_1.RESIDENCE_DOCUMENT_CATEGORIES;
    // Form setup
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(documentSchema),
        defaultValues: {
            name: '',
            description: '',
            documentType: 'other',
            ...(config.type === 'building'
                ? { buildingId: config.entityId }
                : { residenceId: config.entityId }),
            isVisibleToTenants: false,
        },
    });
    // API queries and mutations
    const queryKey = config.type === 'building'
        ? [`/api/documents?buildingId=${config.entityId}`]
        : [`/api/documents?residenceId=${config.entityId}`];
    const { data: entity } = (0, react_query_1.useQuery)({
        queryKey: config.type === 'building'
            ? ['/api/manager/buildings', config.entityId]
            : ['/api/residences', config.entityId],
        enabled: !!config.entityId,
    });
    const { data: documents = [], isLoading: documentsLoading } = (0, react_query_1.useQuery)({
        queryKey,
        enabled: !!config.entityId,
        queryFn: async () => {
            const response = await fetch(queryKey[0], {
                credentials: 'include',
            });
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const data = await response.json();
            // The API returns {documents: Array, total: number, ...} but we need just the documents array
            return data.documents || [];
        },
    });
    // Filter and group documents
    const filteredDocuments = (0, react_1.useMemo)(() => {
        const filtered = documents.filter((doc) => {
            const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase());
            const matchesCategory = selectedCategory === 'all' || doc.documentType === selectedCategory;
            const matchesYear = selectedYear === 'all' || new Date(doc.createdAt).getFullYear().toString() === selectedYear;
            return matchesSearch && matchesCategory && matchesYear;
        });
        return filtered;
    }, [documents, searchTerm, selectedCategory, selectedYear]);
    const documentsByCategory = (0, react_1.useMemo)(() => {
        const grouped = {};
        documentCategories.forEach((category) => {
            grouped[category._value] = filteredDocuments.filter((doc) => doc.documentType === category._value);
        });
        return grouped;
    }, [filteredDocuments, documentCategories]);
    // Create mutation (supports both file upload and text-only)
    const createMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            if (createMode === 'file') {
                if (!selectedFile) {
                    throw new Error('No file selected');
                }
                const formData = new FormData();
                formData.append('file', selectedFile);
                formData.append('name', data.name);
                formData.append('description', data.description || '');
                formData.append('documentType', data.documentType);
                formData.append('isVisibleToTenants', data.isVisibleToTenants.toString());
                if (data.residenceId) {
                    formData.append('residenceId', data.residenceId);
                }
                if (data.buildingId) {
                    formData.append('buildingId', data.buildingId);
                }
                const response = await fetch('/api/documents/upload', {
                    method: 'POST',
                    body: formData,
                });
                if (!response.ok) {
                    throw new Error('Internal server error');
                }
                return response.json();
            }
            else {
                // Text-only document creation
                const payload = {
                    name: data.name,
                    description: data.description || '',
                    documentType: data.documentType,
                    isVisibleToTenants: data.isVisibleToTenants,
                    textContent: textContent,
                    ...(data.residenceId ? { residenceId: data.residenceId } : {}),
                    ...(data.buildingId ? { buildingId: data.buildingId } : {}),
                };
                return (0, queryClient_1.apiRequest)('POST', '/api/documents', payload);
            }
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: createMode === 'file' ? 'Document uploaded successfully' : 'Document created successfully',
            });
            queryClient.invalidateQueries({ queryKey });
            setIsUploadDialogOpen(false);
            form.reset();
            setSelectedFile(null);
            setTextContent('');
            setCreateMode('file');
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || (createMode === 'file' ? 'Failed to upload document' : 'Failed to create document'),
                variant: 'destructive',
            });
        },
    });
    // Delete mutation
    const deleteMutation = (0, react_query_1.useMutation)({
        mutationFn: async (documentId) => {
            return (0, queryClient_1.apiRequest)('DELETE', `/api/documents/${documentId}`);
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: 'Document deleted successfully',
            });
            queryClient.invalidateQueries({ queryKey });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to delete document',
                variant: 'destructive',
            });
        },
    });
    // Event handlers
    const handleCreateDocument = async (data) => {
        await createMutation.mutateAsync(data);
    };
    const handleDeleteDocument = async (document) => {
        if (window.confirm('Are you sure you want to delete this document?')) {
            await deleteMutation.mutateAsync(document.id);
        }
    };
    const handleViewDocument = (document) => {
        setSelectedDocument(document);
        setIsViewDialogOpen(true);
    };
    const handleDownloadDocument = (document) => {
        if (document.filePath) {
            const link = window.document.createElement('a');
            link.href = `/api/documents/${document.id}/file?download=true`;
            link.download = document.fileName || document.name;
            window.document.body.appendChild(link);
            link.click();
            window.document.body.removeChild(link);
        }
    };
    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString();
    };
    const formatFileSize = (bytes) => {
        if (!bytes)
            return 'Unknown size';
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round((bytes / Math.pow(1024, i)) * 100) / 100 + ' ' + sizes[i];
    };
    if (!config.entityId) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: `${config.type === 'building' ? 'Building' : 'Residence'} Documents`, subtitle: 'Entity ID is required' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'flex flex-col items-center justify-center py-12', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'h-12 w-12 text-gray-400 mb-4' }), (0, jsx_runtime_1.jsxs)("h3", { className: 'text-lg font-medium text-gray-900 mb-2', children: [config.type === 'building' ? 'Building' : 'Residence', " ID Required"] }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-gray-500', children: ["Please provide a ", config.type, " ID to view documents."] })] }) }) })] }));
    }
    const entityNotFound = config.entityId && !entity && !documentsLoading;
    if (entityNotFound) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: `${config.type === 'building' ? 'Building' : 'Residence'} Not Found`, subtitle: `The ${config.type} ID provided does not exist` }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'flex flex-col items-center justify-center py-12', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'h-12 w-12 text-gray-400 mb-4' }), (0, jsx_runtime_1.jsxs)("h3", { className: 'text-lg font-medium text-gray-900 mb-2', children: [config.type === 'building' ? 'Building' : 'Residence', " Not Found"] }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-gray-500', children: ["The ", config.type, " with ID \"", config.entityId, "\" does not exist or you don't have access to it."] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', className: 'mt-4', onClick: () => navigate(`/${config.userRole}s/${config.type}s`), children: ["Back to ", config.type === 'building' ? 'Buildings' : 'Residences'] })] }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: `${config.type === 'building' ? entity?.name || 'Building' : entity?.unitNumber ? `Unit ${entity.unitNumber}` : 'Residence'} Documents`, subtitle: `${config.userRole === 'manager' ? 'Manage' : 'View'} documents for ${config.type === 'building' ? entity?.name || 'this building' : entity?.unitNumber ? `Unit ${entity.unitNumber}` : 'this residence'}` }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto', children: [config.userRole === 'resident' && ((0, jsx_runtime_1.jsx)("div", { className: 'mb-6', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', onClick: () => navigate(`/${config.userRole}s/${config.type}s`), className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4' }), "Back to ", config.type === 'building' ? 'Building' : 'Residence'] }) })), (0, jsx_runtime_1.jsxs)("div", { className: 'mb-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col sm:flex-row gap-4 mb-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'relative flex-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'absolute left-3 top-3 h-4 w-4 text-gray-400' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Search documents...', value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: 'pl-10', "data-testid": 'input-search' })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedCategory, onValueChange: setSelectedCategory, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-full sm:w-48', "data-testid": 'select-category', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'All Categories' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Categories" }), documentCategories.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category._value, children: category.label }, category._value)))] })] })] }), (config.allowUpload || config.allowCreate) && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between items-center', children: [(0, jsx_runtime_1.jsx)("div", {}), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: isUploadDialogOpen, onOpenChange: setIsUploadDialogOpen, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { "data-testid": 'button-upload', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4 mr-2' }), "Upload Document"] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-md max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Create New Document" }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogDescription, { children: ["Add a new document to this ", config.type, ". You can attach a file or create a text-only document entry."] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3 border-b pb-4', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Choose Document Type" }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex space-x-3', children: [(0, jsx_runtime_1.jsx)("button", { type: 'button', onClick: () => setCreateMode('file'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${createMode === 'file'
                                                                                ? 'border-blue-500 bg-blue-50 text-blue-700'
                                                                                : 'border-gray-200 hover:border-gray-300'}`, "data-testid": 'button-file-mode', children: "\uD83D\uDCC1 Upload File" }), (0, jsx_runtime_1.jsx)("button", { type: 'button', onClick: () => setCreateMode('text'), className: `flex-1 p-3 rounded-lg border text-sm font-medium transition-colors ${createMode === 'text'
                                                                                ? 'border-blue-500 bg-blue-50 text-blue-700'
                                                                                : 'border-gray-200 hover:border-gray-300'}`, "data-testid": 'button-text-mode', children: "\uD83D\uDCDD Text Document" })] })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(handleCreateDocument), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'name', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Document Name" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": 'input-document-name' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description (Optional)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, "data-testid": 'input-description' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'documentType', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Document Category" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-document-type', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: documentCategories.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category._value, children: category.label }, category._value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), createMode === 'file' ? ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'file-upload', children: "Select File to Upload" }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'file-upload', type: 'file', onChange: (e) => setSelectedFile(e.target.files?.[0] || null), className: 'mt-1', "data-testid": 'input-file' }), selectedFile && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-500 mt-1', children: ["Selected: ", selectedFile.name, " (", Math.round(selectedFile.size / 1024), ' ', "KB)"] }))] })) : ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'text-content', children: "Document Content" }), (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { id: 'text-content', value: textContent, onChange: (e) => setTextContent(e.target.value), placeholder: 'Enter the document content here...', className: 'mt-1 min-h-[120px]', "data-testid": 'textarea-content' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-500 mt-1', children: "This will create a text document that can be viewed and edited online." })] })), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'isVisibleToTenants', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: 'flex flex-row items-center space-x-3 space-y-0', children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)("input", { type: 'checkbox', checked: field.value, onChange: (e) => field.onChange(e.target.checked), "data-testid": 'checkbox-visible-tenants' }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1 leading-none', children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Visible to Tenants" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-muted-foreground', children: "Allow tenants to view this document" })] })] })) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => setIsUploadDialogOpen(false), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: createMutation.isPending || (createMode === 'file' && !selectedFile) || (createMode === 'text' && !textContent.trim()), "data-testid": 'button-create', children: createMutation.isPending
                                                                                    ? (createMode === 'file' ? 'Uploading...' : 'Creating...')
                                                                                    : 'Create' })] })] }) })] })] })] }))] }), documentsLoading ? ((0, jsx_runtime_1.jsx)("div", { className: 'text-center py-8', children: "Loading documents..." })) : filteredDocuments.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-16 h-16 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: "No Documents Found" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: searchTerm || selectedCategory !== 'all' || selectedYear !== 'all'
                                            ? 'No documents match your current filters.'
                                            : `No documents are available for this ${config.type}.` })] }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: documentCategories.map((category) => {
                                const categoryDocuments = documentsByCategory[category._value] || [];
                                if (categoryDocuments.length === 0) {
                                    return null;
                                }
                                return ((0, jsx_runtime_1.jsxs)(card_1.Card, { "data-testid": `category-${category._value}`, children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'h-5 w-5' }), category.label, (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', children: categoryDocuments.length })] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4', children: categoryDocuments.map((document) => ((0, jsx_runtime_1.jsx)(card_1.Card, { className: 'cursor-pointer hover:shadow-md transition-shadow', "data-testid": `document-card-${document.id}`, onClick: () => handleViewDocument(document), children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between mb-2', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-medium text-sm truncate flex-1 mr-2', "data-testid": `document-name-${document.id}`, children: document.name }), (0, jsx_runtime_1.jsx)("div", { className: 'flex gap-1', children: config.allowEdit && ((0, jsx_runtime_1.jsx)(button_1.Button, { size: 'sm', variant: 'ghost', onClick: (e) => {
                                                                                e.stopPropagation();
                                                                                setSelectedDocument(document);
                                                                                setIsEditMode(true);
                                                                                setIsViewDialogOpen(true);
                                                                            }, "data-testid": `button-edit-${document.id}`, children: (0, jsx_runtime_1.jsx)(lucide_react_1.Edit, { className: 'h-3 w-3' }) })) })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 mb-2', "data-testid": `document-date-${document.id}`, children: formatDate(document.createdAt) }), document.filePath && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: formatFileSize(document.fileSize) }))] }) }, document.id))) }) })] }, category._value));
                            }) }))] }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isViewDialogOpen && !isEditMode, onOpenChange: (open) => {
                    setIsViewDialogOpen(open);
                    if (!open) {
                        setSelectedDocument(null);
                    }
                }, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Document Details" }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: "View document information and access options." })] }), selectedDocument && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold', children: selectedDocument.name }), selectedDocument.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-gray-600 mt-2', children: selectedDocument.description }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4 text-sm', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Category:" }), ' ', (0, documents_1.getCategoryLabel)(documentCategories, selectedDocument.documentType) ||
                                                    selectedDocument.documentType ||
                                                    'Unknown'] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Date:" }), " ", formatDate(selectedDocument.createdAt)] }), selectedDocument.fileSize && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "Size:" }), " ", formatFileSize(selectedDocument.fileSize)] })), selectedDocument.fileName && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("strong", { children: "File:" }), " ", selectedDocument.fileName] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2 pt-4', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => {
                                                if (selectedDocument.filePath) {
                                                    const fileUrl = `/api/documents/${selectedDocument.id}/file`;
                                                    window.open(fileUrl, '_blank');
                                                }
                                            }, disabled: !selectedDocument.filePath, "data-testid": 'button-view', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 mr-2' }), "View"] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => {
                                                if (selectedDocument.filePath) {
                                                    const link = window.document.createElement('a');
                                                    link.href = `/api/documents/${selectedDocument.id}/file?download=true`;
                                                    link.download = selectedDocument.fileName || selectedDocument.name;
                                                    window.document.body.appendChild(link);
                                                    link.click();
                                                    window.document.body.removeChild(link);
                                                }
                                            }, disabled: !selectedDocument.filePath, "data-testid": 'button-download', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Download, { className: 'w-4 h-4 mr-2' }), "Download"] }), config.allowEdit && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => {
                                                setIsEditMode(true);
                                            }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit, { className: 'w-4 h-4 mr-2' }), "Edit"] })), config.allowDelete && ((0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => {
                                                handleDeleteDocument(selectedDocument);
                                                setIsViewDialogOpen(false);
                                            }, className: 'text-red-600 hover:text-red-700', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'w-4 h-4 mr-2' }), "Delete"] }))] })] }))] }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isViewDialogOpen && isEditMode, onOpenChange: (open) => {
                    setIsViewDialogOpen(open);
                    if (!open) {
                        setSelectedDocument(null);
                        setIsEditMode(false);
                    }
                }, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-md max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Edit Document" }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: "Update the document information. Note: File content cannot be changed, only metadata." })] }), selectedDocument && ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(async (data) => {
                                    try {
                                        const response = await (0, queryClient_1.apiRequest)('PUT', `/api/documents/${selectedDocument.id}`, data);
                                        toast({
                                            title: 'Success',
                                            description: 'Document updated successfully',
                                        });
                                        queryClient.invalidateQueries({ queryKey });
                                        setIsViewDialogOpen(false);
                                        setIsEditMode(false);
                                        setSelectedDocument(null);
                                    }
                                    catch (error) {
                                        toast({
                                            title: 'Error',
                                            description: error.message || 'Failed to update document',
                                            variant: 'destructive',
                                        });
                                    }
                                }), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'name', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Document Name" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, value: field.value || selectedDocument.name, "data-testid": 'input-edit-name' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'description', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Description (Optional)" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { ...field, value: field.value || selectedDocument.description || '', "data-testid": 'input-edit-description' }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'documentType', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Document Category" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value || selectedDocument.documentType, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { "data-testid": 'select-edit-type', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select category' }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: documentCategories.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category._value, children: category.label }, category._value))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'isVisibleToTenants', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: 'flex flex-row items-center space-x-3 space-y-0', children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)("input", { type: 'checkbox', checked: field.value !== undefined ? field.value : selectedDocument.isVisibleToTenants, onChange: (e) => field.onChange(e.target.checked), "data-testid": 'checkbox-edit-visible-tenants' }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1 leading-none', children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Visible to Tenants" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-muted-foreground', children: "Allow tenants to view this document" })] })] })) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => {
                                                    setIsEditMode(false);
                                                }, children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', "data-testid": 'button-save-edit', children: "Save Changes" })] })] }) }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,