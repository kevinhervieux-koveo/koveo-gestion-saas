08c1ba68662e5a02a8a9734a42fc3c9c
"use strict";
/**
 * File Upload API Integration Tests
 *
 * Tests the server-side handling of file uploads for all submission forms.
 * This test suite validates:
 * 1. Multipart form data processing
 * 2. File storage and database record creation
 * 3. Enhanced file validation on the server side (NEW)
 * 4. Error handling for upload failures
 * 5. File serving and download functionality
 * 6. Proper cleanup of temporary files
 * 7. Rate limiting enforcement (NEW - 10 files per hour)
 * 8. Security audit logging (NEW)
 * 9. Path traversal protection (NEW)
 * 10. File size limits (NEW - 25MB max)
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
globals_1.jest.mock('../server/optimized-db-storage', () => ({
    OptimizedDatabaseStorage: globals_1.jest.fn(() => mockStorage)
}));
// Mock authentication middleware
globals_1.jest.mock('../server/middleware/auth', () => ({
    isAuthenticated: (req, res, next) => {
        req.user = {
            id: '123e4567-e89b-12d3-a456-426614174000',
            email: 'test@koveo.com',
            role: 'admin'
        };
        next();
    }
}));
const supertest_1 = __importDefault(require("supertest"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
// Mock the database and storage
const mockStorage = {
    createBug: globals_1.jest.fn(),
    createFeatureRequest: globals_1.jest.fn(),
    createDocument: globals_1.jest.fn(),
    createBill: globals_1.jest.fn(),
    getUserById: globals_1.jest.fn(),
    getUser: globals_1.jest.fn(),
};
// Import after mocking
const app = require('../server/index').app;
(0, globals_1.describe)('File Upload API Integration Tests', () => {
    const testFilesDir = path_1.default.join(__dirname, 'test-files');
    const uploadDir = path_1.default.join(__dirname, '../../uploads');
    // Mock security audit log
    const mockAuditLog = [];
    const logSecurityEvent = globals_1.jest.fn((event, user, success, details) => {
        mockAuditLog.push({
            timestamp: new Date().toISOString(),
            event,
            userId: user?.id,
            success,
            details
        });
    });
    // Mock rate limiting
    const mockRateLimitStore = new Map();
    const checkRateLimit = globals_1.jest.fn((userId) => {
        const uploads = mockRateLimitStore.get(userId) || [];
        return uploads.length < 10; // 10 uploads per hour limit
    });
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        // Create test files directory
        if (!fs_1.default.existsSync(testFilesDir)) {
            fs_1.default.mkdirSync(testFilesDir, { recursive: true });
        }
        // Create test files
        fs_1.default.writeFileSync(path_1.default.join(testFilesDir, 'test-image.png'), 'mock png content');
        fs_1.default.writeFileSync(path_1.default.join(testFilesDir, 'test-document.pdf'), 'mock pdf content');
        fs_1.default.writeFileSync(path_1.default.join(testFilesDir, 'test-receipt.jpg'), 'mock jpg content');
        fs_1.default.writeFileSync(path_1.default.join(testFilesDir, 'error-log.txt'), 'mock error log content');
        // Mock storage methods
        mockStorage.createBug.mockResolvedValue({
            id: 'bug-123',
            title: 'Test Bug',
            attachmentCount: 1
        });
        mockStorage.createFeatureRequest.mockResolvedValue({
            id: 'feature-123',
            title: 'Test Feature',
            attachmentCount: 1
        });
        mockStorage.createDocument.mockResolvedValue({
            id: 'doc-123',
            name: 'Test Document',
            filePath: 'general/test-file.pdf'
        });
        mockStorage.createBill.mockResolvedValue({
            id: 'bill-123',
            title: 'Test Bill',
            attachmentCount: 1
        });
        mockStorage.getUser.mockResolvedValue({
            id: '123e4567-e89b-12d3-a456-426614174000',
            email: 'test@koveo.com',
            role: 'admin'
        });
    });
    (0, globals_1.afterEach)(() => {
        // Clean up test files
        if (fs_1.default.existsSync(testFilesDir)) {
            fs_1.default.rmSync(testFilesDir, { recursive: true, force: true });
        }
        // Clean up upload directory
        if (fs_1.default.existsSync(uploadDir)) {
            const files = fs_1.default.readdirSync(uploadDir);
            files.forEach(file => {
                if (file.startsWith('test-') || file.includes('mock')) {
                    fs_1.default.unlinkSync(path_1.default.join(uploadDir, file));
                }
            });
        }
    });
    (0, globals_1.describe)('Bug Report File Uploads', () => {
        (0, globals_1.it)('should handle bug report with single file attachment', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Bug with Screenshot')
                .field('description', 'This is a test bug report with file attachment.')
                .field('category', 'ui_ux')
                .field('page', 'Test Page')
                .field('priority', 'medium')
                .field('reproductionSteps', 'Step 1: Open app\nStep 2: Click button\nStep 3: See error')
                .attach('attachments', path_1.default.join(testFilesDir, 'test-image.png'))
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                id: globals_1.expect.any(String),
                title: 'Bug with Screenshot',
                attachmentCount: globals_1.expect.any(Number)
            });
            (0, globals_1.expect)(mockStorage.createBug).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                title: 'Bug with Screenshot',
                description: 'This is a test bug report with file attachment.',
                category: 'ui_ux',
                page: 'Test Page',
                priority: 'medium'
            }));
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                name: 'test-image.png',
                documentType: 'attachment',
                fileName: 'test-image.png',
                attachedToType: 'bug',
                uploadedById: '123e4567-e89b-12d3-a456-426614174000'
            }));
        });
        (0, globals_1.it)('should handle bug report with multiple file attachments', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Bug with Multiple Files')
                .field('description', 'Bug report with multiple attachments.')
                .field('category', 'functionality')
                .field('page', 'Dashboard')
                .field('priority', 'high')
                .attach('attachments', path_1.default.join(testFilesDir, 'test-image.png'))
                .attach('attachments', path_1.default.join(testFilesDir, 'test-document.pdf'))
                .attach('attachments', path_1.default.join(testFilesDir, 'error-log.txt'))
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                id: globals_1.expect.any(String),
                title: 'Bug with Multiple Files'
            });
            // Should create document for each attachment
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledTimes(3);
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                name: 'test-image.png',
                attachedToType: 'bug'
            }));
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                name: 'test-document.pdf',
                attachedToType: 'bug'
            }));
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                name: 'error-log.txt',
                attachedToType: 'bug'
            }));
        });
        (0, globals_1.it)('should reject oversized files in bug reports', async () => {
            // Create a large file (over 10MB limit)
            const largeFile = path_1.default.join(testFilesDir, 'large-file.png');
            const largeContent = Buffer.alloc(11 * 1024 * 1024, 'x'); // 11MB
            fs_1.default.writeFileSync(largeFile, largeContent);
            const response = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Bug with Large File')
                .field('description', 'Testing file size limits.')
                .field('category', 'ui_ux')
                .field('page', 'Test Page')
                .field('priority', 'medium')
                .attach('attachments', largeFile)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.stringMatching(/file.*too large|size.*limit/i)
            });
            (0, globals_1.expect)(mockStorage.createBug).not.toHaveBeenCalled();
            (0, globals_1.expect)(mockStorage.createDocument).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should reject invalid file types in bug reports', async () => {
            // Create an executable file
            const execFile = path_1.default.join(testFilesDir, 'malicious.exe');
            fs_1.default.writeFileSync(execFile, 'fake executable content');
            const response = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Bug with Invalid File')
                .field('description', 'Testing file type validation.')
                .field('category', 'security')
                .field('page', 'Test Page')
                .field('priority', 'critical')
                .attach('attachments', execFile)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.stringMatching(/file.*type.*not.*allowed|invalid.*file.*type/i)
            });
            (0, globals_1.expect)(mockStorage.createBug).not.toHaveBeenCalled();
            (0, globals_1.expect)(mockStorage.createDocument).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Feature Request File Uploads', () => {
        (0, globals_1.it)('should handle feature request with design mockups', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/feature-requests')
                .field('title', 'New UI Feature')
                .field('description', 'Feature request with design mockups.')
                .field('category', 'ui_ux')
                .field('priority', 'medium')
                .attach('attachments', path_1.default.join(testFilesDir, 'test-image.png'))
                .attach('attachments', path_1.default.join(testFilesDir, 'test-document.pdf'))
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                id: globals_1.expect.any(String),
                title: 'New UI Feature'
            });
            (0, globals_1.expect)(mockStorage.createFeatureRequest).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                title: 'New UI Feature',
                description: 'Feature request with design mockups.',
                category: 'ui_ux',
                priority: 'medium'
            }));
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledTimes(2);
        });
        (0, globals_1.it)('should validate feature request file types', async () => {
            const scriptFile = path_1.default.join(testFilesDir, 'script.js');
            fs_1.default.writeFileSync(scriptFile, 'console.log("potentially dangerous");');
            const response = await (0, supertest_1.default)(app)
                .post('/api/feature-requests')
                .field('title', 'Feature with Script')
                .field('description', 'Testing script file upload.')
                .field('category', 'functionality')
                .field('priority', 'low')
                .attach('attachments', scriptFile)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.stringMatching(/file.*type.*not.*allowed/i)
            });
        });
    });
    (0, globals_1.describe)('Document Upload API', () => {
        (0, globals_1.it)('should handle document upload with metadata', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/documents')
                .field('name', 'Legal Contract')
                .field('description', 'Important legal document')
                .field('documentType', 'contract')
                .field('isVisibleToTenants', 'false')
                .attach('file', path_1.default.join(testFilesDir, 'test-document.pdf'))
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                id: globals_1.expect.any(String),
                name: 'Legal Contract',
                filePath: globals_1.expect.stringMatching(/general\/.*\.pdf$/)
            });
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                name: 'Legal Contract',
                description: 'Important legal document',
                documentType: 'contract',
                fileName: 'test-document.pdf',
                isVisibleToTenants: false,
                uploadedById: '123e4567-e89b-12d3-a456-426614174000'
            }));
        });
        (0, globals_1.it)('should serve uploaded documents', async () => {
            // First upload a document
            const uploadResponse = await (0, supertest_1.default)(app)
                .post('/api/documents')
                .field('name', 'Test Document')
                .field('documentType', 'general')
                .attach('file', path_1.default.join(testFilesDir, 'test-document.pdf'))
                .expect(201);
            const documentId = uploadResponse.body.id;
            // Mock the document retrieval
            mockStorage.getDocument = globals_1.jest.fn().mockResolvedValue({
                id: documentId,
                name: 'Test Document',
                filePath: 'general/test-document.pdf',
                fileName: 'test-document.pdf',
                mimeType: 'application/pdf'
            });
            // Then try to access the document
            const accessResponse = await (0, supertest_1.default)(app)
                .get(`/api/documents/${documentId}/file`)
                .expect(200);
            (0, globals_1.expect)(accessResponse.headers['content-type']).toMatch(/application\/pdf/);
        });
        (0, globals_1.it)('should validate document access permissions', async () => {
            // Mock unauthorized user
            globals_1.jest.clearAllMocks();
            const response = await (0, supertest_1.default)(app)
                .get('/api/documents/unauthorized-doc/file')
                .expect(404);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.any(String)
            });
        });
    });
    (0, globals_1.describe)('Bill Receipt Uploads', () => {
        (0, globals_1.it)('should handle bill creation with receipt attachment', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .field('title', 'Electricity Bill - January 2025')
                .field('amount', '150.75')
                .field('dueDate', '2025-02-15')
                .field('category', 'utilities')
                .attach('receipts', path_1.default.join(testFilesDir, 'test-receipt.jpg'))
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                id: globals_1.expect.any(String),
                title: 'Electricity Bill - January 2025',
                amount: 150.75
            });
            (0, globals_1.expect)(mockStorage.createBill).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                title: 'Electricity Bill - January 2025',
                amount: 150.75,
                category: 'utilities'
            }));
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                name: 'test-receipt.jpg',
                documentType: 'receipt',
                attachedToType: 'bill'
            }));
        });
        (0, globals_1.it)('should validate receipt file formats', async () => {
            const invalidReceiptFile = path_1.default.join(testFilesDir, 'receipt.txt');
            fs_1.default.writeFileSync(invalidReceiptFile, 'This is not an image receipt');
            const response = await (0, supertest_1.default)(app)
                .post('/api/bills')
                .field('title', 'Bill with Invalid Receipt')
                .field('amount', '100.00')
                .field('dueDate', '2025-03-01')
                .field('category', 'maintenance')
                .attach('receipts', invalidReceiptFile)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.stringMatching(/receipt.*must.*be.*image|invalid.*receipt.*format/i)
            });
        });
    });
    (0, globals_1.describe)('File Storage and Cleanup', () => {
        (0, globals_1.it)('should clean up temporary files on upload failure', async () => {
            // Mock a storage failure
            mockStorage.createBug.mockRejectedValue(new Error('Database error'));
            const response = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Bug that will fail')
                .field('description', 'This should trigger cleanup.')
                .field('category', 'ui_ux')
                .field('page', 'Test Page')
                .field('priority', 'medium')
                .attach('attachments', path_1.default.join(testFilesDir, 'test-image.png'))
                .expect(500);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.any(String)
            });
            // Verify temporary files were cleaned up
            const tempFiles = fs_1.default.readdirSync(uploadDir).filter(file => file.includes('test-image') || file.includes('temp'));
            (0, globals_1.expect)(tempFiles).toHaveLength(0);
        });
        (0, globals_1.it)('should handle concurrent file uploads', async () => {
            const uploadPromises = Array.from({ length: 5 }, (_, i) => (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', `Concurrent Bug ${i + 1}`)
                .field('description', `Concurrent upload test ${i + 1}`)
                .field('category', 'performance')
                .field('page', 'Test Page')
                .field('priority', 'low')
                .attach('attachments', path_1.default.join(testFilesDir, 'test-image.png')));
            const responses = await Promise.all(uploadPromises);
            responses.forEach((response, i) => {
                (0, globals_1.expect)(response.status).toBe(201);
                (0, globals_1.expect)(response.body).toMatchObject({
                    id: globals_1.expect.any(String),
                    title: `Concurrent Bug ${i + 1}`
                });
            });
            (0, globals_1.expect)(mockStorage.createBug).toHaveBeenCalledTimes(5);
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledTimes(5);
        });
    });
    (0, globals_1.describe)('File Validation Edge Cases', () => {
        (0, globals_1.it)('should handle empty files', async () => {
            const emptyFile = path_1.default.join(testFilesDir, 'empty.png');
            fs_1.default.writeFileSync(emptyFile, '');
            const response = await (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Bug with Empty File')
                .field('description', 'Testing empty file handling.')
                .field('category', 'ui_ux')
                .field('page', 'Test Page')
                .field('priority', 'medium')
                .attach('attachments', emptyFile)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.stringMatching(/file.*empty|invalid.*file.*size/i)
            });
        });
        (0, globals_1.it)('should handle corrupted files', async () => {
            const corruptedFile = path_1.default.join(testFilesDir, 'corrupted.pdf');
            fs_1.default.writeFileSync(corruptedFile, 'This is not a valid PDF content but claims to be');
            const response = await (0, supertest_1.default)(app)
                .post('/api/documents')
                .field('name', 'Corrupted Document')
                .field('documentType', 'general')
                .attach('file', corruptedFile)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.stringMatching(/invalid.*file.*format|corrupted.*file/i)
            });
        });
        (0, globals_1.it)('should handle filename with special characters', async () => {
            const specialNameFile = path_1.default.join(testFilesDir, 'file with spaces & símböls.pdf');
            fs_1.default.writeFileSync(specialNameFile, 'mock pdf content');
            const response = await (0, supertest_1.default)(app)
                .post('/api/documents')
                .field('name', 'Document with Special Filename')
                .field('documentType', 'general')
                .attach('file', specialNameFile)
                .expect(201);
            (0, globals_1.expect)(response.body).toMatchObject({
                id: globals_1.expect.any(String),
                name: 'Document with Special Filename'
            });
            (0, globals_1.expect)(mockStorage.createDocument).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                name: 'Document with Special Filename',
                fileName: globals_1.expect.stringMatching(/^[a-zA-Z0-9_-]+\.pdf$/), // Should be sanitized
                filePath: globals_1.expect.stringMatching(/general\/.*\.pdf$/)
            }));
        });
        (0, globals_1.it)('should handle maximum total upload size limit', async () => {
            // Create multiple large files that exceed total limit
            const largeFiles = [];
            for (let i = 0; i < 3; i++) {
                const fileName = `large-file-${i}.png`;
                const filePath = path_1.default.join(testFilesDir, fileName);
                const content = Buffer.alloc(5 * 1024 * 1024, 'x'); // 5MB each
                fs_1.default.writeFileSync(filePath, content);
                largeFiles.push(filePath);
            }
            const request_builder = (0, supertest_1.default)(app)
                .post('/api/bugs')
                .field('title', 'Bug with Multiple Large Files')
                .field('description', 'Testing total size limits.')
                .field('category', 'performance')
                .field('page', 'Test Page')
                .field('priority', 'medium');
            // Attach all large files
            largeFiles.forEach(filePath => {
                request_builder.attach('attachments', filePath);
            });
            const response = await request_builder.expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                error: globals_1.expect.stringMatching(/total.*size.*exceeded|too many.*large.*files/i)
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,