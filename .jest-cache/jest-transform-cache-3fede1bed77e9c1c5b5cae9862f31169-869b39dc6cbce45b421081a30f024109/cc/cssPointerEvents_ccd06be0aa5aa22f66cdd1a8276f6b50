3d31d1792dbffba41ac26f459e327387
'use strict';
var options = require('../../options.js');
var getWindow = require('../misc/getWindow.js');
var isElementType = require('../misc/isElementType.js');
var level = require('../misc/level.js');
function hasPointerEvents(instance, element) {
    var _checkPointerEvents;
    return ((_checkPointerEvents = checkPointerEvents(instance, element)) === null || _checkPointerEvents === undefined ? undefined : _checkPointerEvents.pointerEvents) !== 'none';
}
function closestPointerEventsDeclaration(element) {
    const window = getWindow.getWindow(element);
    for (let el = element, tree = []; el === null || el === undefined ? undefined : el.ownerDocument; el = el.parentElement) {
        tree.push(el);
        const pointerEvents = window.getComputedStyle(el).pointerEvents;
        if (pointerEvents && ![
            'inherit',
            'unset'
        ].includes(pointerEvents)) {
            return {
                pointerEvents,
                tree
            };
        }
    }
    return undefined;
}
const PointerEventsCheck = Symbol('Last check for pointer-events');
function checkPointerEvents(instance, element) {
    const lastCheck = element[PointerEventsCheck];
    const needsCheck = instance.config.pointerEventsCheck !== options.PointerEventsCheckLevel.Never && (!lastCheck || hasBitFlag(instance.config.pointerEventsCheck, options.PointerEventsCheckLevel.EachApiCall) && lastCheck[level.ApiLevel.Call] !== level.getLevelRef(instance, level.ApiLevel.Call) || hasBitFlag(instance.config.pointerEventsCheck, options.PointerEventsCheckLevel.EachTrigger) && lastCheck[level.ApiLevel.Trigger] !== level.getLevelRef(instance, level.ApiLevel.Trigger));
    if (!needsCheck) {
        return lastCheck === null || lastCheck === undefined ? undefined : lastCheck.result;
    }
    const declaration = closestPointerEventsDeclaration(element);
    element[PointerEventsCheck] = {
        [level.ApiLevel.Call]: level.getLevelRef(instance, level.ApiLevel.Call),
        [level.ApiLevel.Trigger]: level.getLevelRef(instance, level.ApiLevel.Trigger),
        result: declaration
    };
    return declaration;
}
function assertPointerEvents(instance, element) {
    const declaration = checkPointerEvents(instance, element);
    if ((declaration === null || declaration === undefined ? undefined : declaration.pointerEvents) === 'none') {
        throw new Error([
            `Unable to perform pointer interaction as the element ${declaration.tree.length > 1 ? 'inherits' : 'has'} \`pointer-events: none\`:`,
            '',
            printTree(declaration.tree)
        ].join('\n'));
    }
}
function printTree(tree) {
    return tree.reverse().map((el, i) => [
        ''.padEnd(i),
        el.tagName,
        el.id && `#${el.id}`,
        el.hasAttribute('data-testid') && `(testId=${el.getAttribute('data-testid')})`,
        getLabelDescr(el),
        tree.length > 1 && i === 0 && '  <-- This element declared `pointer-events: none`',
        tree.length > 1 && i === tree.length - 1 && '  <-- Asserted pointer events here'
    ].filter(Boolean).join('')).join('\n');
}
function getLabelDescr(element) {
    var _element_labels;
    let label;
    if (element.hasAttribute('aria-label')) {
        label = element.getAttribute('aria-label');
    }
    else if (element.hasAttribute('aria-labelledby')) {
        var _element_ownerDocument_getElementById_textContent, _element_ownerDocument_getElementById;
        label = (_element_ownerDocument_getElementById = element.ownerDocument.getElementById(element.getAttribute('aria-labelledby'))) === null || _element_ownerDocument_getElementById === undefined ? undefined : (_element_ownerDocument_getElementById_textContent = _element_ownerDocument_getElementById.textContent) === null || _element_ownerDocument_getElementById_textContent === undefined ? undefined : _element_ownerDocument_getElementById_textContent.trim();
    }
    else if (isElementType.isElementType(element, [
        'button',
        'input',
        'meter',
        'output',
        'progress',
        'select',
        'textarea'
    ]) && ((_element_labels = element.labels) === null || _element_labels === undefined ? undefined : _element_labels.length)) {
        label = Array.from(element.labels).map((el) => {
            var _el_textContent;
            return (_el_textContent = el.textContent) === null || _el_textContent === undefined ? undefined : _el_textContent.trim();
        }).join('|');
    }
    else if (isElementType.isElementType(element, 'button')) {
        var _element_textContent;
        label = (_element_textContent = element.textContent) === null || _element_textContent === undefined ? undefined : _element_textContent.trim();
    }
    label = label === null || label === undefined ? undefined : label.replace(/\n/g, '  ');
    if (Number(label === null || label === undefined ? undefined : label.length) > 30) {
        label = `${label === null || label === undefined ? undefined : label.substring(0, 29)}â€¦`;
    }
    return label ? `(label=${label})` : '';
}
// With the eslint rule and prettier the bitwise operation isn't nice to read
function hasBitFlag(conf, flag) {
    // eslint-disable-next-line no-bitwise
    return (conf & flag) > 0;
}
exports.assertPointerEvents = assertPointerEvents;
exports.hasPointerEvents = hasPointerEvents;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3V0aWxzL3BvaW50ZXIvY3NzUG9pbnRlckV2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUMxQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNoRCxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN4RCxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUV4QyxTQUFTLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxPQUFPO0lBQ3ZDLElBQUksbUJBQW1CLENBQUM7SUFDeEIsT0FBTyxDQUFDLENBQUMsbUJBQW1CLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLG1CQUFtQixLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsS0FBSyxNQUFNLENBQUM7QUFDcEwsQ0FBQztBQUNELFNBQVMsK0JBQStCLENBQUMsT0FBTztJQUM1QyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLEtBQUksSUFBSSxFQUFFLEdBQUcsT0FBTyxFQUFFLElBQUksR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLElBQUksSUFBSSxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhLEVBQUMsQ0FBQztRQUNwSCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxhQUFh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ZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL3V0aWxzL3BvaW50ZXIvY3NzUG9pbnRlckV2ZW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBvcHRpb25zID0gcmVxdWlyZSgnLi4vLi4vb3B0aW9ucy5qcycpO1xudmFyIGdldFdpbmRvdyA9IHJlcXVpcmUoJy4uL21pc2MvZ2V0V2luZG93LmpzJyk7XG52YXIgaXNFbGVtZW50VHlwZSA9IHJlcXVpcmUoJy4uL21pc2MvaXNFbGVtZW50VHlwZS5qcycpO1xudmFyIGxldmVsID0gcmVxdWlyZSgnLi4vbWlzYy9sZXZlbC5qcycpO1xuXG5mdW5jdGlvbiBoYXNQb2ludGVyRXZlbnRzKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gICAgdmFyIF9jaGVja1BvaW50ZXJFdmVudHM7XG4gICAgcmV0dXJuICgoX2NoZWNrUG9pbnRlckV2ZW50cyA9IGNoZWNrUG9pbnRlckV2ZW50cyhpbnN0YW5jZSwgZWxlbWVudCkpID09PSBudWxsIHx8IF9jaGVja1BvaW50ZXJFdmVudHMgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9jaGVja1BvaW50ZXJFdmVudHMucG9pbnRlckV2ZW50cykgIT09ICdub25lJztcbn1cbmZ1bmN0aW9uIGNsb3Nlc3RQb2ludGVyRXZlbnRzRGVjbGFyYXRpb24oZWxlbWVudCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdy5nZXRXaW5kb3coZWxlbWVudCk7XG4gICAgZm9yKGxldCBlbCA9IGVsZW1lbnQsIHRyZWUgPSBbXTsgZWwgPT09IG51bGwgfHwgZWwgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGVsLm93bmVyRG9jdW1lbnQ7IGVsID0gZWwucGFyZW50RWxlbWVudCl7XG4gICAgICAgIHRyZWUucHVzaChlbCk7XG4gICAgICAgIGNvbnN0IHBvaW50ZXJFdmVudHMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkucG9pbnRlckV2ZW50cztcbiAgICAgICAgaWYgKHBvaW50ZXJFdmVudHMgJiYgIVtcbiAgICAgICAgICAgICdpbmhlcml0JyxcbiAgICAgICAgICAgICd1bnNldCdcbiAgICAgICAgXS5pbmNsdWRlcyhwb2ludGVyRXZlbnRzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyRXZlbnRzLFxuICAgICAgICAgICAgICAgIHRyZWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmNvbnN0IFBvaW50ZXJFdmVudHNDaGVjayA9IFN5bWJvbCgnTGFzdCBjaGVjayBmb3IgcG9pbnRlci1ldmVudHMnKTtcbmZ1bmN0aW9uIGNoZWNrUG9pbnRlckV2ZW50cyhpbnN0YW5jZSwgZWxlbWVudCkge1xuICAgIGNvbnN0IGxhc3RDaGVjayA9IGVsZW1lbnRbUG9pbnRlckV2ZW50c0NoZWNrXTtcbiAgICBjb25zdCBuZWVkc0NoZWNrID0gaW5zdGFuY2UuY29uZmlnLnBvaW50ZXJFdmVudHNDaGVjayAhPT0gb3B0aW9ucy5Qb2ludGVyRXZlbnRzQ2hlY2tMZXZlbC5OZXZlciAmJiAoIWxhc3RDaGVjayB8fCBoYXNCaXRGbGFnKGluc3RhbmNlLmNvbmZpZy5wb2ludGVyRXZlbnRzQ2hlY2ssIG9wdGlvbnMuUG9pbnRlckV2ZW50c0NoZWNrTGV2ZWwuRWFjaEFwaUNhbGwpICYmIGxhc3RDaGVja1tsZXZlbC5BcGlMZXZlbC5DYWxsXSAhPT0gbGV2ZWwuZ2V0TGV2ZWxSZWYoaW5zdGFuY2UsIGxldmVsLkFwaUxldmVsLkNhbGwpIHx8IGhhc0JpdEZsYWcoaW5zdGFuY2UuY29uZmlnLnBvaW50ZXJFdmVudHNDaGVjaywgb3B0aW9ucy5Qb2ludGVyRXZlbnRzQ2hlY2tMZXZlbC5FYWNoVHJpZ2dlcikgJiYgbGFzdENoZWNrW2xldmVsLkFwaUxldmVsLlRyaWdnZXJdICE9PSBsZXZlbC5nZXRMZXZlbFJlZihpbnN0YW5jZSwgbGV2ZWwuQXBpTGV2ZWwuVHJpZ2dlcikpO1xuICAgIGlmICghbmVlZHNDaGVjaykge1xuICAgICAgICByZXR1cm4gbGFzdENoZWNrID09PSBudWxsIHx8IGxhc3RDaGVjayA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbGFzdENoZWNrLnJlc3VsdDtcbiAgICB9XG4gICAgY29uc3QgZGVjbGFyYXRpb24gPSBjbG9zZXN0UG9pbnRlckV2ZW50c0RlY2xhcmF0aW9uKGVsZW1lbnQpO1xuICAgIGVsZW1lbnRbUG9pbnRlckV2ZW50c0NoZWNrXSA9IHtcbiAgICAgICAgW2xldmVsLkFwaUxldmVsLkNhbGxdOiBsZXZlbC5nZXRMZXZlbFJlZihpbnN0YW5jZSwgbGV2ZWwuQXBpTGV2ZWwuQ2FsbCksXG4gICAgICAgIFtsZXZlbC5BcGlMZXZlbC5UcmlnZ2VyXTogbGV2ZWwuZ2V0TGV2ZWxSZWYoaW5zdGFuY2UsIGxldmVsLkFwaUxldmVsLlRyaWdnZXIpLFxuICAgICAgICByZXN1bHQ6IGRlY2xhcmF0aW9uXG4gICAgfTtcbiAgICByZXR1cm4gZGVjbGFyYXRpb247XG59XG5mdW5jdGlvbiBhc3NlcnRQb2ludGVyRXZlbnRzKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gICAgY29uc3QgZGVjbGFyYXRpb24gPSBjaGVja1BvaW50ZXJFdmVudHMoaW5zdGFuY2UsIGVsZW1lbnQpO1xuICAgIGlmICgoZGVjbGFyYXRpb24gPT09IG51bGwgfHwgZGVjbGFyYXRpb24gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGRlY2xhcmF0aW9uLnBvaW50ZXJFdmVudHMpID09PSAnbm9uZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFtcbiAgICAgICAgICAgIGBVbmFibGUgdG8gcGVyZm9ybSBwb2ludGVyIGludGVyYWN0aW9uIGFzIHRoZSBlbGVtZW50ICR7ZGVjbGFyYXRpb24udHJlZS5sZW5ndGggPiAxID8gJ2luaGVyaXRzJyA6ICdoYXMnfSBcXGBwb2ludGVyLWV2ZW50czogbm9uZVxcYDpgLFxuICAgICAgICAgICAgJycsXG4gICAgICAgICAgICBwcmludFRyZWUoZGVjbGFyYXRpb24udHJlZSlcbiAgICAgICAgXS5qb2luKCdcXG4nKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcHJpbnRUcmVlKHRyZWUpIHtcbiAgICByZXR1cm4gdHJlZS5yZXZlcnNlKCkubWFwKChlbCwgaSk9PltcbiAgICAgICAgICAgICcnLnBhZEVuZChpKSxcbiAgICAgICAgICAgIGVsLnRhZ05hbWUsXG4gICAgICAgICAgICBlbC5pZCAmJiBgIyR7ZWwuaWR9YCxcbiAgICAgICAgICAgIGVsLmhhc0F0dHJpYnV0ZSgnZGF0YS10ZXN0aWQnKSAmJiBgKHRlc3RJZD0ke2VsLmdldEF0dHJpYnV0ZSgnZGF0YS10ZXN0aWQnKX0pYCxcbiAgICAgICAgICAgIGdldExhYmVsRGVzY3IoZWwpLFxuICAgICAgICAgICAgdHJlZS5sZW5ndGggPiAxICYmIGkgPT09IDAgJiYgJyAgPC0tIFRoaXMgZWxlbWVudCBkZWNsYXJlZCBgcG9pbnRlci1ldmVudHM6IG5vbmVgJyxcbiAgICAgICAgICAgIHRyZWUubGVuZ3RoID4gMSAmJiBpID09PSB0cmVlLmxlbmd0aCAtIDEgJiYgJyAgPC0tIEFzc2VydGVkIHBvaW50ZXIgZXZlbnRzIGhlcmUnXG4gICAgICAgIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJycpKS5qb2luKCdcXG4nKTtcbn1cbmZ1bmN0aW9uIGdldExhYmVsRGVzY3IoZWxlbWVudCkge1xuICAgIHZhciBfZWxlbWVudF9sYWJlbHM7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKSB7XG4gICAgICAgIGxhYmVsID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKSkge1xuICAgICAgICB2YXIgX2VsZW1lbnRfb3duZXJEb2N1bWVudF9nZXRFbGVtZW50QnlJZF90ZXh0Q29udGVudCwgX2VsZW1lbnRfb3duZXJEb2N1bWVudF9nZXRFbGVtZW50QnlJZDtcbiAgICAgICAgbGFiZWwgPSAoX2VsZW1lbnRfb3duZXJEb2N1bWVudF9nZXRFbGVtZW50QnlJZCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JykpKSA9PT0gbnVsbCB8fCBfZWxlbWVudF9vd25lckRvY3VtZW50X2dldEVsZW1lbnRCeUlkID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAoX2VsZW1lbnRfb3duZXJEb2N1bWVudF9nZXRFbGVtZW50QnlJZF90ZXh0Q29udGVudCA9IF9lbGVtZW50X293bmVyRG9jdW1lbnRfZ2V0RWxlbWVudEJ5SWQudGV4dENvbnRlbnQpID09PSBudWxsIHx8IF9lbGVtZW50X293bmVyRG9jdW1lbnRfZ2V0RWxlbWVudEJ5SWRfdGV4dENvbnRlbnQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9lbGVtZW50X293bmVyRG9jdW1lbnRfZ2V0RWxlbWVudEJ5SWRfdGV4dENvbnRlbnQudHJpbSgpO1xuICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKGVsZW1lbnQsIFtcbiAgICAgICAgJ2J1dHRvbicsXG4gICAgICAgICdpbnB1dCcsXG4gICAgICAgICdtZXRlcicsXG4gICAgICAgICdvdXRwdXQnLFxuICAgICAgICAncHJvZ3Jlc3MnLFxuICAgICAgICAnc2VsZWN0JyxcbiAgICAgICAgJ3RleHRhcmVhJ1xuICAgIF0pICYmICgoX2VsZW1lbnRfbGFiZWxzID0gZWxlbWVudC5sYWJlbHMpID09PSBudWxsIHx8IF9lbGVtZW50X2xhYmVscyA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX2VsZW1lbnRfbGFiZWxzLmxlbmd0aCkpIHtcbiAgICAgICAgbGFiZWwgPSBBcnJheS5mcm9tKGVsZW1lbnQubGFiZWxzKS5tYXAoKGVsKT0+e1xuICAgICAgICAgICAgdmFyIF9lbF90ZXh0Q29udGVudDtcbiAgICAgICAgICAgIHJldHVybiAoX2VsX3RleHRDb250ZW50ID0gZWwudGV4dENvbnRlbnQpID09PSBudWxsIHx8IF9lbF90ZXh0Q29udGVudCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogX2VsX3RleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgfSkuam9pbignfCcpO1xuICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50VHlwZS5pc0VsZW1lbnRUeXBlKGVsZW1lbnQsICdidXR0b24nKSkge1xuICAgICAgICB2YXIgX2VsZW1lbnRfdGV4dENvbnRlbnQ7XG4gICAgICAgIGxhYmVsID0gKF9lbGVtZW50X3RleHRDb250ZW50ID0gZWxlbWVudC50ZXh0Q29udGVudCkgPT09IG51bGwgfHwgX2VsZW1lbnRfdGV4dENvbnRlbnQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IF9lbGVtZW50X3RleHRDb250ZW50LnRyaW0oKTtcbiAgICB9XG4gICAgbGFiZWwgPSBsYWJlbCA9PT0gbnVsbCB8fCBsYWJlbCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbGFiZWwucmVwbGFjZSgvXFxuL2csICcgICcpO1xuICAgIGlmIChOdW1iZXIobGFiZWwgPT09IG51bGwgfHwgbGFiZWwgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGxhYmVsLmxlbmd0aCkgPiAzMCkge1xuICAgICAgICBsYWJlbCA9IGAke2xhYmVsID09PSBudWxsIHx8IGxhYmVsID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBsYWJlbC5zdWJzdHJpbmcoMCwgMjkpfeKApmA7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbCA/IGAobGFiZWw9JHtsYWJlbH0pYCA6ICcnO1xufVxuLy8gV2l0aCB0aGUgZXNsaW50IHJ1bGUgYW5kIHByZXR0aWVyIHRoZSBiaXR3aXNlIG9wZXJhdGlvbiBpc24ndCBuaWNlIHRvIHJlYWRcbmZ1bmN0aW9uIGhhc0JpdEZsYWcoY29uZiwgZmxhZykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgcmV0dXJuIChjb25mICYgZmxhZykgPiAwO1xufVxuXG5leHBvcnRzLmFzc2VydFBvaW50ZXJFdmVudHMgPSBhc3NlcnRQb2ludGVyRXZlbnRzO1xuZXhwb3J0cy5oYXNQb2ludGVyRXZlbnRzID0gaGFzUG9pbnRlckV2ZW50cztcbiJdLCJ2ZXJzaW9uIjozfQ==