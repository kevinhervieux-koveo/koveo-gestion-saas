{"file":"/home/runner/workspace/tests/integration/file-upload-api.test.ts","mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;;;AAEH,2CAAkF;AAelF,cAAI,CAAC,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE,CAAC,CAAC;IACjD,wBAAwB,EAAE,cAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC;CACrD,CAAC,CAAC,CAAC;AAEJ,iCAAiC;AACjC,cAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE,CAAC,CAAC;IAC5C,eAAe,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;QACjD,GAAG,CAAC,IAAI,GAAG;YACT,EAAE,EAAE,sCAAsC;YAC1C,KAAK,EAAE,gBAAgB;YACvB,IAAI,EAAE,OAAO;SACd,CAAC;QACF,IAAI,EAAE,CAAC;IACT,CAAC;CACF,CAAC,CAAC,CAAC;AA5BJ,0DAAgC;AAChC,4CAAoB;AACpB,gDAAwB;AAExB,gCAAgC;AAChC,MAAM,WAAW,GAAG;IAClB,SAAS,EAAE,cAAI,CAAC,EAAE,EAAE;IACpB,oBAAoB,EAAE,cAAI,CAAC,EAAE,EAAE;IAC/B,cAAc,EAAE,cAAI,CAAC,EAAE,EAAE;IACzB,UAAU,EAAE,cAAI,CAAC,EAAE,EAAE;IACrB,WAAW,EAAE,cAAI,CAAC,EAAE,EAAE;IACtB,OAAO,EAAE,cAAI,CAAC,EAAE,EAAE;CACnB,CAAC;AAkBF,uBAAuB;AACvB,MAAM,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC;AAE3C,IAAA,kBAAQ,EAAC,mCAAmC,EAAE,GAAG,EAAE;IACjD,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;IACxD,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IAExD,0BAA0B;IAC1B,MAAM,YAAY,GAAU,EAAE,CAAC;IAC/B,MAAM,gBAAgB,GAAG,cAAI,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE;QACjE,YAAY,CAAC,IAAI,CAAC;YAChB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,KAAK;YACL,MAAM,EAAE,IAAI,EAAE,EAAE;YAChB,OAAO;YACP,OAAO;SACR,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,qBAAqB;IACrB,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;IACrC,MAAM,cAAc,GAAG,cAAI,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE;QACxC,MAAM,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACrD,OAAO,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,4BAA4B;IAC1D,CAAC,CAAC,CAAC;IAEH,IAAA,oBAAU,EAAC,GAAG,EAAE;QACd,cAAI,CAAC,aAAa,EAAE,CAAC;QAErB,8BAA8B;QAC9B,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YACjC,YAAE,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC;QAED,oBAAoB;QACpB,YAAE,CAAC,aAAa,CAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAChF,YAAE,CAAC,aAAa,CAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,mBAAmB,CAAC,EAAE,kBAAkB,CAAC,CAAC;QACnF,YAAE,CAAC,aAAa,CAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,kBAAkB,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAClF,YAAE,CAAC,aAAa,CAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,EAAE,wBAAwB,CAAC,CAAC;QAErF,uBAAuB;QACvB,WAAW,CAAC,SAAS,CAAC,iBAAiB,CAAC;YACtC,EAAE,EAAE,SAAS;YACb,KAAK,EAAE,UAAU;YACjB,eAAe,EAAE,CAAC;SACnB,CAAC,CAAC;QAEH,WAAW,CAAC,oBAAoB,CAAC,iBAAiB,CAAC;YACjD,EAAE,EAAE,aAAa;YACjB,KAAK,EAAE,cAAc;YACrB,eAAe,EAAE,CAAC;SACnB,CAAC,CAAC;QAEH,WAAW,CAAC,cAAc,CAAC,iBAAiB,CAAC;YAC3C,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,eAAe;YACrB,QAAQ,EAAE,uBAAuB;SAClC,CAAC,CAAC;QAEH,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC;YACvC,EAAE,EAAE,UAAU;YACd,KAAK,EAAE,WAAW;YAClB,eAAe,EAAE,CAAC;SACnB,CAAC,CAAC;QAEH,WAAW,CAAC,OAAO,CAAC,iBAAiB,CAAC;YACpC,EAAE,EAAE,sCAAsC;YAC1C,KAAK,EAAE,gBAAgB;YACvB,IAAI,EAAE,OAAO;SACd,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,mBAAS,EAAC,GAAG,EAAE;QACb,sBAAsB;QACtB,IAAI,YAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YAChC,YAAE,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,4BAA4B;QAC5B,IAAI,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YAC7B,MAAM,KAAK,GAAG,YAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACxC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACnB,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;oBACtD,YAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC5C,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,YAAE,EAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,qBAAqB,CAAC;iBACrC,KAAK,CAAC,aAAa,EAAE,iDAAiD,CAAC;iBACvE,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC;iBAC1B,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;iBAC3B,KAAK,CAAC,mBAAmB,EAAE,2DAA2D,CAAC;iBACvF,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;iBAChE,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,KAAK,EAAE,qBAAqB;gBAC5B,eAAe,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aACpC,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAChD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,KAAK,EAAE,qBAAqB;gBAC5B,WAAW,EAAE,iDAAiD;gBAC9D,QAAQ,EAAE,OAAO;gBACjB,IAAI,EAAE,WAAW;gBACjB,QAAQ,EAAE,QAAQ;aACnB,CAAC,CACH,CAAC;YAEF,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACrD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,gBAAgB;gBACtB,YAAY,EAAE,YAAY;gBAC1B,QAAQ,EAAE,gBAAgB;gBAC1B,cAAc,EAAE,KAAK;gBACrB,YAAY,EAAE,sCAAsC;aACrD,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,yBAAyB,CAAC;iBACzC,KAAK,CAAC,aAAa,EAAE,uCAAuC,CAAC;iBAC7D,KAAK,CAAC,UAAU,EAAE,eAAe,CAAC;iBAClC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC;iBACzB,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;iBAChE,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;iBACnE,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;iBAC/D,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,KAAK,EAAE,yBAAyB;aACjC,CAAC,CAAC;YAEH,6CAA6C;YAC7C,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACrD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,gBAAgB;gBACtB,cAAc,EAAE,KAAK;aACtB,CAAC,CACH,CAAC;YACF,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACrD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,mBAAmB;gBACzB,cAAc,EAAE,KAAK;aACtB,CAAC,CACH,CAAC;YACF,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACrD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,eAAe;gBACrB,cAAc,EAAE,KAAK;aACtB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,wCAAwC;YACxC,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;YAC5D,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO;YACjE,YAAE,CAAC,aAAa,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAE1C,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,qBAAqB,CAAC;iBACrC,KAAK,CAAC,aAAa,EAAE,2BAA2B,CAAC;iBACjD,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC;iBAC1B,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;iBAC3B,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;iBAChC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,cAAc,CAAC,8BAA8B,CAAC;aAC7D,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YACrD,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,4BAA4B;YAC5B,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;YAC1D,YAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CAAC;YAEtD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,uBAAuB,CAAC;iBACvC,KAAK,CAAC,aAAa,EAAE,+BAA+B,CAAC;iBACrD,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;iBAC7B,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC;iBAC7B,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,cAAc,CAAC,+CAA+C,CAAC;aAC9E,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YACrD,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAA,YAAE,EAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,uBAAuB,CAAC;iBAC7B,KAAK,CAAC,OAAO,EAAE,gBAAgB,CAAC;iBAChC,KAAK,CAAC,aAAa,EAAE,sCAAsC,CAAC;iBAC5D,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;iBAC3B,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;iBAChE,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;iBACnE,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,KAAK,EAAE,gBAAgB;aACxB,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,oBAAoB,CAC3D,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,KAAK,EAAE,gBAAgB;gBACvB,WAAW,EAAE,sCAAsC;gBACnD,QAAQ,EAAE,OAAO;gBACjB,QAAQ,EAAE,QAAQ;aACnB,CAAC,CACH,CAAC;YAEF,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;YACxD,YAAE,CAAC,aAAa,CAAC,UAAU,EAAE,uCAAuC,CAAC,CAAC;YAEtE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,uBAAuB,CAAC;iBAC7B,KAAK,CAAC,OAAO,EAAE,qBAAqB,CAAC;iBACrC,KAAK,CAAC,aAAa,EAAE,6BAA6B,CAAC;iBACnD,KAAK,CAAC,UAAU,EAAE,eAAe,CAAC;iBAClC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC;iBACxB,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC;iBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,cAAc,CAAC,2BAA2B,CAAC;aAC1D,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,IAAA,YAAE,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,gBAAgB,CAAC;iBACtB,KAAK,CAAC,MAAM,EAAE,gBAAgB,CAAC;iBAC/B,KAAK,CAAC,aAAa,EAAE,0BAA0B,CAAC;iBAChD,KAAK,CAAC,cAAc,EAAE,UAAU,CAAC;iBACjC,KAAK,CAAC,oBAAoB,EAAE,OAAO,CAAC;iBACpC,MAAM,CAAC,MAAM,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;iBAC5D,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,IAAI,EAAE,gBAAgB;gBACtB,QAAQ,EAAE,gBAAM,CAAC,cAAc,CAAC,mBAAmB,CAAC;aACrD,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACrD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,gBAAgB;gBACtB,WAAW,EAAE,0BAA0B;gBACvC,YAAY,EAAE,UAAU;gBACxB,QAAQ,EAAE,mBAAmB;gBAC7B,kBAAkB,EAAE,KAAK;gBACzB,YAAY,EAAE,sCAAsC;aACrD,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,0BAA0B;YAC1B,MAAM,cAAc,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACtC,IAAI,CAAC,gBAAgB,CAAC;iBACtB,KAAK,CAAC,MAAM,EAAE,eAAe,CAAC;iBAC9B,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC;iBAChC,MAAM,CAAC,MAAM,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;iBAC5D,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;YAE1C,8BAA8B;YAC9B,WAAW,CAAC,WAAW,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACpD,EAAE,EAAE,UAAU;gBACd,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,2BAA2B;gBACrC,QAAQ,EAAE,mBAAmB;gBAC7B,QAAQ,EAAE,iBAAiB;aAC5B,CAAC,CAAC;YAEH,kCAAkC;YAClC,MAAM,cAAc,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACtC,GAAG,CAAC,kBAAkB,UAAU,OAAO,CAAC;iBACxC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,yBAAyB;YACzB,cAAI,CAAC,aAAa,EAAE,CAAC;YAErB,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,GAAG,CAAC,sCAAsC,CAAC;iBAC3C,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC1B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,IAAA,YAAE,EAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,OAAO,EAAE,iCAAiC,CAAC;iBACjD,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;iBACzB,KAAK,CAAC,SAAS,EAAE,YAAY,CAAC;iBAC9B,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC;iBAC9B,MAAM,CAAC,UAAU,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC;iBAC/D,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,KAAK,EAAE,iCAAiC;gBACxC,MAAM,EAAE,MAAM;aACf,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACjD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,KAAK,EAAE,iCAAiC;gBACxC,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,WAAW;aACtB,CAAC,CACH,CAAC;YAEF,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACrD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,kBAAkB;gBACxB,YAAY,EAAE,SAAS;gBACvB,cAAc,EAAE,MAAM;aACvB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,kBAAkB,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YAClE,YAAE,CAAC,aAAa,CAAC,kBAAkB,EAAE,8BAA8B,CAAC,CAAC;YAErE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,YAAY,CAAC;iBAClB,KAAK,CAAC,OAAO,EAAE,2BAA2B,CAAC;iBAC3C,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;iBACzB,KAAK,CAAC,SAAS,EAAE,YAAY,CAAC;iBAC9B,KAAK,CAAC,UAAU,EAAE,aAAa,CAAC;iBAChC,MAAM,CAAC,UAAU,EAAE,kBAAkB,CAAC;iBACtC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,cAAc,CAAC,oDAAoD,CAAC;aACnF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAA,YAAE,EAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,yBAAyB;YACzB,WAAW,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAErE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,oBAAoB,CAAC;iBACpC,KAAK,CAAC,aAAa,EAAE,8BAA8B,CAAC;iBACpD,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC;iBAC1B,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;iBAC3B,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;iBAChE,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC1B,CAAC,CAAC;YAEH,yCAAyC;YACzC,MAAM,SAAS,GAAG,YAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CACxD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CACrD,CAAC;YACF,IAAA,gBAAM,EAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACxD,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACT,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,kBAAkB,CAAC,GAAG,CAAC,EAAE,CAAC;iBACzC,KAAK,CAAC,aAAa,EAAE,0BAA0B,CAAC,GAAG,CAAC,EAAE,CAAC;iBACvD,KAAK,CAAC,UAAU,EAAE,aAAa,CAAC;iBAChC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC;iBACxB,MAAM,CAAC,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC,CACpE,CAAC;YAEF,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAEpD,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAChC,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClC,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;oBAClC,EAAE,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;oBACtB,KAAK,EAAE,kBAAkB,CAAC,GAAG,CAAC,EAAE;iBACjC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,SAAS,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;YACvD,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,IAAA,YAAE,EAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YACzC,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;YACvD,YAAE,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAEhC,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,qBAAqB,CAAC;iBACrC,KAAK,CAAC,aAAa,EAAE,8BAA8B,CAAC;iBACpD,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC;iBAC1B,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC;iBAC3B,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC;iBAChC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,cAAc,CAAC,kCAAkC,CAAC;aACjE,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,aAAa,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;YAC/D,YAAE,CAAC,aAAa,CAAC,aAAa,EAAE,kDAAkD,CAAC,CAAC;YAEpF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,gBAAgB,CAAC;iBACtB,KAAK,CAAC,MAAM,EAAE,oBAAoB,CAAC;iBACnC,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC;iBAChC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC;iBAC7B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,cAAc,CAAC,wCAAwC,CAAC;aACvE,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,eAAe,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gCAAgC,CAAC,CAAC;YAClF,YAAE,CAAC,aAAa,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC;YAEtD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC;iBAChC,IAAI,CAAC,gBAAgB,CAAC;iBACtB,KAAK,CAAC,MAAM,EAAE,gCAAgC,CAAC;iBAC/C,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC;iBAChC,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,EAAE,EAAE,gBAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,IAAI,EAAE,gCAAgC;aACvC,CAAC,CAAC;YAEH,IAAA,gBAAM,EAAC,WAAW,CAAC,cAAc,CAAC,CAAC,oBAAoB,CACrD,gBAAM,CAAC,gBAAgB,CAAC;gBACtB,IAAI,EAAE,gCAAgC;gBACtC,QAAQ,EAAE,gBAAM,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE,sBAAsB;gBAChF,QAAQ,EAAE,gBAAM,CAAC,cAAc,CAAC,mBAAmB,CAAC;aACrD,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,sDAAsD;YACtD,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC;gBACvC,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;gBACnD,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,WAAW;gBAC/D,YAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACpC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5B,CAAC;YAED,MAAM,eAAe,GAAG,IAAA,mBAAO,EAAC,GAAG,CAAC;iBACjC,IAAI,CAAC,WAAW,CAAC;iBACjB,KAAK,CAAC,OAAO,EAAE,+BAA+B,CAAC;iBAC/C,KAAK,CAAC,aAAa,EAAE,4BAA4B,CAAC;iBAClD,KAAK,CAAC,UAAU,EAAE,aAAa,CAAC;iBAChC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;iBAC1B,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAE/B,yBAAyB;YACzB,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC5B,eAAe,CAAC,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEnD,IAAA,gBAAM,EAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC;gBAClC,KAAK,EAAE,gBAAM,CAAC,cAAc,CAAC,+CAA+C,CAAC;aAC9E,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/tests/integration/file-upload-api.test.ts"],"sourcesContent":["/**\n * File Upload API Integration Tests\n * \n * Tests the server-side handling of file uploads for all submission forms.\n * This test suite validates:\n * 1. Multipart form data processing\n * 2. File storage and database record creation\n * 3. Enhanced file validation on the server side (NEW)\n * 4. Error handling for upload failures\n * 5. File serving and download functionality\n * 6. Proper cleanup of temporary files\n * 7. Rate limiting enforcement (NEW - 10 files per hour)\n * 8. Security audit logging (NEW)\n * 9. Path traversal protection (NEW)\n * 10. File size limits (NEW - 25MB max)\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport fs from 'fs';\nimport path from 'path';\n\n// Mock the database and storage\nconst mockStorage = {\n  createBug: jest.fn(),\n  createFeatureRequest: jest.fn(),\n  createDocument: jest.fn(),\n  createBill: jest.fn(),\n  getUserById: jest.fn(),\n  getUser: jest.fn(),\n};\n\njest.mock('../server/optimized-db-storage', () => ({\n  OptimizedDatabaseStorage: jest.fn(() => mockStorage)\n}));\n\n// Mock authentication middleware\njest.mock('../server/middleware/auth', () => ({\n  isAuthenticated: (req: any, res: any, next: any) => {\n    req.user = {\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      email: 'test@koveo.com',\n      role: 'admin'\n    };\n    next();\n  }\n}));\n\n// Import after mocking\nconst app = require('../server/index').app;\n\ndescribe('File Upload API Integration Tests', () => {\n  const testFilesDir = path.join(__dirname, 'test-files');\n  const uploadDir = path.join(__dirname, '../../uploads');\n  \n  // Mock security audit log\n  const mockAuditLog: any[] = [];\n  const logSecurityEvent = jest.fn((event, user, success, details) => {\n    mockAuditLog.push({\n      timestamp: new Date().toISOString(),\n      event,\n      userId: user?.id,\n      success,\n      details\n    });\n  });\n  \n  // Mock rate limiting\n  const mockRateLimitStore = new Map();\n  const checkRateLimit = jest.fn((userId) => {\n    const uploads = mockRateLimitStore.get(userId) || [];\n    return uploads.length < 10; // 10 uploads per hour limit\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Create test files directory\n    if (!fs.existsSync(testFilesDir)) {\n      fs.mkdirSync(testFilesDir, { recursive: true });\n    }\n\n    // Create test files\n    fs.writeFileSync(path.join(testFilesDir, 'test-image.png'), 'mock png content');\n    fs.writeFileSync(path.join(testFilesDir, 'test-document.pdf'), 'mock pdf content');\n    fs.writeFileSync(path.join(testFilesDir, 'test-receipt.jpg'), 'mock jpg content');\n    fs.writeFileSync(path.join(testFilesDir, 'error-log.txt'), 'mock error log content');\n\n    // Mock storage methods\n    mockStorage.createBug.mockResolvedValue({ \n      id: 'bug-123',\n      title: 'Test Bug',\n      attachmentCount: 1 \n    });\n    \n    mockStorage.createFeatureRequest.mockResolvedValue({ \n      id: 'feature-123',\n      title: 'Test Feature',\n      attachmentCount: 1 \n    });\n    \n    mockStorage.createDocument.mockResolvedValue({ \n      id: 'doc-123',\n      name: 'Test Document',\n      filePath: 'general/test-file.pdf'\n    });\n    \n    mockStorage.createBill.mockResolvedValue({ \n      id: 'bill-123',\n      title: 'Test Bill',\n      attachmentCount: 1 \n    });\n\n    mockStorage.getUser.mockResolvedValue({\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      email: 'test@koveo.com',\n      role: 'admin'\n    });\n  });\n\n  afterEach(() => {\n    // Clean up test files\n    if (fs.existsSync(testFilesDir)) {\n      fs.rmSync(testFilesDir, { recursive: true, force: true });\n    }\n    \n    // Clean up upload directory\n    if (fs.existsSync(uploadDir)) {\n      const files = fs.readdirSync(uploadDir);\n      files.forEach(file => {\n        if (file.startsWith('test-') || file.includes('mock')) {\n          fs.unlinkSync(path.join(uploadDir, file));\n        }\n      });\n    }\n  });\n\n  describe('Bug Report File Uploads', () => {\n    it('should handle bug report with single file attachment', async () => {\n      const response = await request(app)\n        .post('/api/bugs')\n        .field('title', 'Bug with Screenshot')\n        .field('description', 'This is a test bug report with file attachment.')\n        .field('category', 'ui_ux')\n        .field('page', 'Test Page')\n        .field('priority', 'medium')\n        .field('reproductionSteps', 'Step 1: Open app\\nStep 2: Click button\\nStep 3: See error')\n        .attach('attachments', path.join(testFilesDir, 'test-image.png'))\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        id: expect.any(String),\n        title: 'Bug with Screenshot',\n        attachmentCount: expect.any(Number)\n      });\n\n      expect(mockStorage.createBug).toHaveBeenCalledWith(\n        expect.objectContaining({\n          title: 'Bug with Screenshot',\n          description: 'This is a test bug report with file attachment.',\n          category: 'ui_ux',\n          page: 'Test Page',\n          priority: 'medium'\n        })\n      );\n\n      expect(mockStorage.createDocument).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'test-image.png',\n          documentType: 'attachment',\n          fileName: 'test-image.png',\n          attachedToType: 'bug',\n          uploadedById: '123e4567-e89b-12d3-a456-426614174000'\n        })\n      );\n    });\n\n    it('should handle bug report with multiple file attachments', async () => {\n      const response = await request(app)\n        .post('/api/bugs')\n        .field('title', 'Bug with Multiple Files')\n        .field('description', 'Bug report with multiple attachments.')\n        .field('category', 'functionality')\n        .field('page', 'Dashboard')\n        .field('priority', 'high')\n        .attach('attachments', path.join(testFilesDir, 'test-image.png'))\n        .attach('attachments', path.join(testFilesDir, 'test-document.pdf'))\n        .attach('attachments', path.join(testFilesDir, 'error-log.txt'))\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        id: expect.any(String),\n        title: 'Bug with Multiple Files'\n      });\n\n      // Should create document for each attachment\n      expect(mockStorage.createDocument).toHaveBeenCalledTimes(3);\n      expect(mockStorage.createDocument).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'test-image.png',\n          attachedToType: 'bug'\n        })\n      );\n      expect(mockStorage.createDocument).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'test-document.pdf',\n          attachedToType: 'bug'\n        })\n      );\n      expect(mockStorage.createDocument).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'error-log.txt',\n          attachedToType: 'bug'\n        })\n      );\n    });\n\n    it('should reject oversized files in bug reports', async () => {\n      // Create a large file (over 10MB limit)\n      const largeFile = path.join(testFilesDir, 'large-file.png');\n      const largeContent = Buffer.alloc(11 * 1024 * 1024, 'x'); // 11MB\n      fs.writeFileSync(largeFile, largeContent);\n\n      const response = await request(app)\n        .post('/api/bugs')\n        .field('title', 'Bug with Large File')\n        .field('description', 'Testing file size limits.')\n        .field('category', 'ui_ux')\n        .field('page', 'Test Page')\n        .field('priority', 'medium')\n        .attach('attachments', largeFile)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        error: expect.stringMatching(/file.*too large|size.*limit/i)\n      });\n\n      expect(mockStorage.createBug).not.toHaveBeenCalled();\n      expect(mockStorage.createDocument).not.toHaveBeenCalled();\n    });\n\n    it('should reject invalid file types in bug reports', async () => {\n      // Create an executable file\n      const execFile = path.join(testFilesDir, 'malicious.exe');\n      fs.writeFileSync(execFile, 'fake executable content');\n\n      const response = await request(app)\n        .post('/api/bugs')\n        .field('title', 'Bug with Invalid File')\n        .field('description', 'Testing file type validation.')\n        .field('category', 'security')\n        .field('page', 'Test Page')\n        .field('priority', 'critical')\n        .attach('attachments', execFile)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        error: expect.stringMatching(/file.*type.*not.*allowed|invalid.*file.*type/i)\n      });\n\n      expect(mockStorage.createBug).not.toHaveBeenCalled();\n      expect(mockStorage.createDocument).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Feature Request File Uploads', () => {\n    it('should handle feature request with design mockups', async () => {\n      const response = await request(app)\n        .post('/api/feature-requests')\n        .field('title', 'New UI Feature')\n        .field('description', 'Feature request with design mockups.')\n        .field('category', 'ui_ux')\n        .field('priority', 'medium')\n        .attach('attachments', path.join(testFilesDir, 'test-image.png'))\n        .attach('attachments', path.join(testFilesDir, 'test-document.pdf'))\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        id: expect.any(String),\n        title: 'New UI Feature'\n      });\n\n      expect(mockStorage.createFeatureRequest).toHaveBeenCalledWith(\n        expect.objectContaining({\n          title: 'New UI Feature',\n          description: 'Feature request with design mockups.',\n          category: 'ui_ux',\n          priority: 'medium'\n        })\n      );\n\n      expect(mockStorage.createDocument).toHaveBeenCalledTimes(2);\n    });\n\n    it('should validate feature request file types', async () => {\n      const scriptFile = path.join(testFilesDir, 'script.js');\n      fs.writeFileSync(scriptFile, 'console.log(\"potentially dangerous\");');\n\n      const response = await request(app)\n        .post('/api/feature-requests')\n        .field('title', 'Feature with Script')\n        .field('description', 'Testing script file upload.')\n        .field('category', 'functionality')\n        .field('priority', 'low')\n        .attach('attachments', scriptFile)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        error: expect.stringMatching(/file.*type.*not.*allowed/i)\n      });\n    });\n  });\n\n  describe('Document Upload API', () => {\n    it('should handle document upload with metadata', async () => {\n      const response = await request(app)\n        .post('/api/documents')\n        .field('name', 'Legal Contract')\n        .field('description', 'Important legal document')\n        .field('documentType', 'contract')\n        .field('isVisibleToTenants', 'false')\n        .attach('file', path.join(testFilesDir, 'test-document.pdf'))\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        id: expect.any(String),\n        name: 'Legal Contract',\n        filePath: expect.stringMatching(/general\\/.*\\.pdf$/)\n      });\n\n      expect(mockStorage.createDocument).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'Legal Contract',\n          description: 'Important legal document',\n          documentType: 'contract',\n          fileName: 'test-document.pdf',\n          isVisibleToTenants: false,\n          uploadedById: '123e4567-e89b-12d3-a456-426614174000'\n        })\n      );\n    });\n\n    it('should serve uploaded documents', async () => {\n      // First upload a document\n      const uploadResponse = await request(app)\n        .post('/api/documents')\n        .field('name', 'Test Document')\n        .field('documentType', 'general')\n        .attach('file', path.join(testFilesDir, 'test-document.pdf'))\n        .expect(201);\n\n      const documentId = uploadResponse.body.id;\n\n      // Mock the document retrieval\n      mockStorage.getDocument = jest.fn().mockResolvedValue({\n        id: documentId,\n        name: 'Test Document',\n        filePath: 'general/test-document.pdf',\n        fileName: 'test-document.pdf',\n        mimeType: 'application/pdf'\n      });\n\n      // Then try to access the document\n      const accessResponse = await request(app)\n        .get(`/api/documents/${documentId}/file`)\n        .expect(200);\n\n      expect(accessResponse.headers['content-type']).toMatch(/application\\/pdf/);\n    });\n\n    it('should validate document access permissions', async () => {\n      // Mock unauthorized user\n      jest.clearAllMocks();\n      \n      const response = await request(app)\n        .get('/api/documents/unauthorized-doc/file')\n        .expect(404);\n\n      expect(response.body).toMatchObject({\n        error: expect.any(String)\n      });\n    });\n  });\n\n  describe('Bill Receipt Uploads', () => {\n    it('should handle bill creation with receipt attachment', async () => {\n      const response = await request(app)\n        .post('/api/bills')\n        .field('title', 'Electricity Bill - January 2025')\n        .field('amount', '150.75')\n        .field('dueDate', '2025-02-15')\n        .field('category', 'utilities')\n        .attach('receipts', path.join(testFilesDir, 'test-receipt.jpg'))\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        id: expect.any(String),\n        title: 'Electricity Bill - January 2025',\n        amount: 150.75\n      });\n\n      expect(mockStorage.createBill).toHaveBeenCalledWith(\n        expect.objectContaining({\n          title: 'Electricity Bill - January 2025',\n          amount: 150.75,\n          category: 'utilities'\n        })\n      );\n\n      expect(mockStorage.createDocument).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'test-receipt.jpg',\n          documentType: 'receipt',\n          attachedToType: 'bill'\n        })\n      );\n    });\n\n    it('should validate receipt file formats', async () => {\n      const invalidReceiptFile = path.join(testFilesDir, 'receipt.txt');\n      fs.writeFileSync(invalidReceiptFile, 'This is not an image receipt');\n\n      const response = await request(app)\n        .post('/api/bills')\n        .field('title', 'Bill with Invalid Receipt')\n        .field('amount', '100.00')\n        .field('dueDate', '2025-03-01')\n        .field('category', 'maintenance')\n        .attach('receipts', invalidReceiptFile)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        error: expect.stringMatching(/receipt.*must.*be.*image|invalid.*receipt.*format/i)\n      });\n    });\n  });\n\n  describe('File Storage and Cleanup', () => {\n    it('should clean up temporary files on upload failure', async () => {\n      // Mock a storage failure\n      mockStorage.createBug.mockRejectedValue(new Error('Database error'));\n\n      const response = await request(app)\n        .post('/api/bugs')\n        .field('title', 'Bug that will fail')\n        .field('description', 'This should trigger cleanup.')\n        .field('category', 'ui_ux')\n        .field('page', 'Test Page')\n        .field('priority', 'medium')\n        .attach('attachments', path.join(testFilesDir, 'test-image.png'))\n        .expect(500);\n\n      expect(response.body).toMatchObject({\n        error: expect.any(String)\n      });\n\n      // Verify temporary files were cleaned up\n      const tempFiles = fs.readdirSync(uploadDir).filter(file => \n        file.includes('test-image') || file.includes('temp')\n      );\n      expect(tempFiles).toHaveLength(0);\n    });\n\n    it('should handle concurrent file uploads', async () => {\n      const uploadPromises = Array.from({ length: 5 }, (_, i) => \n        request(app)\n          .post('/api/bugs')\n          .field('title', `Concurrent Bug ${i + 1}`)\n          .field('description', `Concurrent upload test ${i + 1}`)\n          .field('category', 'performance')\n          .field('page', 'Test Page')\n          .field('priority', 'low')\n          .attach('attachments', path.join(testFilesDir, 'test-image.png'))\n      );\n\n      const responses = await Promise.all(uploadPromises);\n\n      responses.forEach((response, i) => {\n        expect(response.status).toBe(201);\n        expect(response.body).toMatchObject({\n          id: expect.any(String),\n          title: `Concurrent Bug ${i + 1}`\n        });\n      });\n\n      expect(mockStorage.createBug).toHaveBeenCalledTimes(5);\n      expect(mockStorage.createDocument).toHaveBeenCalledTimes(5);\n    });\n  });\n\n  describe('File Validation Edge Cases', () => {\n    it('should handle empty files', async () => {\n      const emptyFile = path.join(testFilesDir, 'empty.png');\n      fs.writeFileSync(emptyFile, '');\n\n      const response = await request(app)\n        .post('/api/bugs')\n        .field('title', 'Bug with Empty File')\n        .field('description', 'Testing empty file handling.')\n        .field('category', 'ui_ux')\n        .field('page', 'Test Page')\n        .field('priority', 'medium')\n        .attach('attachments', emptyFile)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        error: expect.stringMatching(/file.*empty|invalid.*file.*size/i)\n      });\n    });\n\n    it('should handle corrupted files', async () => {\n      const corruptedFile = path.join(testFilesDir, 'corrupted.pdf');\n      fs.writeFileSync(corruptedFile, 'This is not a valid PDF content but claims to be');\n\n      const response = await request(app)\n        .post('/api/documents')\n        .field('name', 'Corrupted Document')\n        .field('documentType', 'general')\n        .attach('file', corruptedFile)\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        error: expect.stringMatching(/invalid.*file.*format|corrupted.*file/i)\n      });\n    });\n\n    it('should handle filename with special characters', async () => {\n      const specialNameFile = path.join(testFilesDir, 'file with spaces & símböls.pdf');\n      fs.writeFileSync(specialNameFile, 'mock pdf content');\n\n      const response = await request(app)\n        .post('/api/documents')\n        .field('name', 'Document with Special Filename')\n        .field('documentType', 'general')\n        .attach('file', specialNameFile)\n        .expect(201);\n\n      expect(response.body).toMatchObject({\n        id: expect.any(String),\n        name: 'Document with Special Filename'\n      });\n\n      expect(mockStorage.createDocument).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'Document with Special Filename',\n          fileName: expect.stringMatching(/^[a-zA-Z0-9_-]+\\.pdf$/), // Should be sanitized\n          filePath: expect.stringMatching(/general\\/.*\\.pdf$/)\n        })\n      );\n    });\n\n    it('should handle maximum total upload size limit', async () => {\n      // Create multiple large files that exceed total limit\n      const largeFiles = [];\n      for (let i = 0; i < 3; i++) {\n        const fileName = `large-file-${i}.png`;\n        const filePath = path.join(testFilesDir, fileName);\n        const content = Buffer.alloc(5 * 1024 * 1024, 'x'); // 5MB each\n        fs.writeFileSync(filePath, content);\n        largeFiles.push(filePath);\n      }\n\n      const request_builder = request(app)\n        .post('/api/bugs')\n        .field('title', 'Bug with Multiple Large Files')\n        .field('description', 'Testing total size limits.')\n        .field('category', 'performance')\n        .field('page', 'Test Page')\n        .field('priority', 'medium');\n\n      // Attach all large files\n      largeFiles.forEach(filePath => {\n        request_builder.attach('attachments', filePath);\n      });\n\n      const response = await request_builder.expect(400);\n\n      expect(response.body).toMatchObject({\n        error: expect.stringMatching(/total.*size.*exceeded|too many.*large.*files/i)\n      });\n    });\n  });\n});"],"version":3}