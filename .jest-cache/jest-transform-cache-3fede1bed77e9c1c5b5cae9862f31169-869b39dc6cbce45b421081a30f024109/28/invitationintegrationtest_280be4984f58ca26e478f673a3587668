0d40feed2651706e231730277ff5ae2e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Using mock database for unit tests - real database testing moved to integration tests
// import { mockDb } from '../../../server/mockDb';
const schema = __importStar(require("../../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
// Mock database for unit testing
const mockDb = {
    delete: jest.fn().mockResolvedValue([]),
    insert: jest.fn().mockImplementation(() => ({
        values: jest.fn().mockImplementation(() => ({
            returning: jest.fn().mockResolvedValue([{ id: 'mock-id', name: 'Mock Data' }])
        }))
    })),
    select: jest.fn().mockImplementation(() => ({
        from: jest.fn().mockImplementation(() => ({
            where: jest.fn().mockResolvedValue([])
        }))
    })),
    update: jest.fn().mockImplementation(() => ({
        set: jest.fn().mockImplementation(() => ({
            where: jest.fn().mockImplementation(() => ({
                returning: jest.fn().mockResolvedValue([{ id: 'mock-id' }])
            }))
        }))
    }))
};
(0, globals_1.describe)('Invitation Table Integration Tests', () => {
    let adminUser;
    let managerUser;
    let organization1;
    let organization2;
    (0, globals_1.beforeEach)(async () => {
        // Clean up tables (mocked for unit tests)
        await mockDb.delete(schema.invitations);
        await mockDb.delete(schema.userOrganizations);
        await mockDb.delete(schema.users);
        await mockDb.delete(schema.organizations);
        // Create test organizations
        const [org1] = await mockDb.insert(schema.organizations).values({
            name: 'Test Organization 1',
            type: 'management_company',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
        }).returning();
        const [org2] = await mockDb.insert(schema.organizations).values({
            name: 'Test Organization 2',
            type: 'syndicate',
            address: '456 Test Ave',
            city: 'Quebec City',
            province: 'QC',
            postalCode: 'G1A 1A1',
        }).returning();
        organization1 = org1;
        organization2 = org2;
        // Create test users
        const hashedPassword = await bcryptjs_1.default.hash('password123', 10);
        const [admin] = await mockDb.insert(schema.users).values({
            username: 'admin@test.com',
            email: 'admin@test.com',
            password: hashedPassword,
            firstName: 'Admin',
            lastName: 'User',
            role: 'admin',
        }).returning();
        const [manager] = await mockDb.insert(schema.users).values({
            username: 'manager@test.com',
            email: 'manager@test.com',
            password: hashedPassword,
            firstName: 'Manager',
            lastName: 'User',
            role: 'manager',
        }).returning();
        adminUser = admin;
        managerUser = manager;
        // Assign manager to organization1
        await mockDb.insert(schema.userOrganizations).values({
            userId: managerUser.id,
            organizationId: organization1.id,
            organizationRole: 'manager',
            isActive: true,
        });
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await mockDb.delete(schema.invitations);
        await mockDb.delete(schema.userOrganizations);
        await mockDb.delete(schema.users);
        await mockDb.delete(schema.organizations);
    });
    (0, globals_1.describe)('Invitation Data Validation', () => {
        (0, globals_1.it)('should create invitations with required fields', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await mockDb.insert(schema.invitations).values({
                email: 'test@example.com',
                token: 'test-token',
                tokenHash: 'test-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            (0, globals_1.expect)(invitation).toBeDefined();
            (0, globals_1.expect)(invitation.id).toBeDefined();
            (0, globals_1.expect)(invitation.email).toBe('test@example.com');
            (0, globals_1.expect)(invitation.role).toBe('tenant');
            (0, globals_1.expect)(invitation.status).toBe('pending');
            (0, globals_1.expect)(invitation.organizationId).toBe(organization1.id);
        });
        (0, globals_1.it)('should handle invitations with null building and residence references', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await mockDb.insert(schema.invitations).values({
                email: 'test@example.com',
                token: 'test-token',
                tokenHash: 'test-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                buildingId: null,
                residenceId: null,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            (0, globals_1.expect)(invitation.buildingId).toBeNull();
            (0, globals_1.expect)(invitation.residenceId).toBeNull();
        });
        (0, globals_1.it)('should validate invitation roles', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const validRoles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];
            for (const role of validRoles) {
                const [invitation] = await mockDb.insert(schema.invitations).values({
                    email: `test-${role}@example.com`,
                    token: `test-token-${role}`,
                    tokenHash: `test-hash-${role}`,
                    role: role,
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                }).returning();
                (0, globals_1.expect)(invitation.role).toBe(role);
            }
        });
        (0, globals_1.it)('should validate invitation status values', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const validStatuses = ['pending', 'accepted', 'expired', 'cancelled'];
            for (const status of validStatuses) {
                const [invitation] = await mockDb.insert(schema.invitations).values({
                    email: `test-${status}@example.com`,
                    token: `test-token-${status}`,
                    tokenHash: `test-hash-${status}`,
                    role: 'tenant',
                    status: status,
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                }).returning();
                (0, globals_1.expect)(invitation.status).toBe(status);
            }
        });
    });
    (0, globals_1.describe)('Invitation Queries and Filtering', () => {
        (0, globals_1.beforeEach)(async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            // Create test invitations
            await mockDb.insert(schema.invitations).values([
                {
                    email: 'pending1@example.com',
                    token: 'token1',
                    tokenHash: 'hash1',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                },
                {
                    email: 'pending2@example.com',
                    token: 'token2',
                    tokenHash: 'hash2',
                    role: 'resident',
                    status: 'pending',
                    organizationId: organization2.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                },
                {
                    email: 'accepted@example.com',
                    token: 'token3',
                    tokenHash: 'hash3',
                    role: 'tenant',
                    status: 'accepted',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                },
            ]);
        });
        (0, globals_1.it)('should filter pending invitations correctly', async () => {
            const pendingInvitations = await mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.status, 'pending'));
            (0, globals_1.expect)(pendingInvitations).toHaveLength(2);
            (0, globals_1.expect)(pendingInvitations.every(inv => inv.status === 'pending')).toBe(true);
        });
        (0, globals_1.it)('should join with organizations table for admin view', async () => {
            const invitationsWithOrgs = await mockDb
                .select({
                id: schema.invitations.id,
                email: schema.invitations.email,
                role: schema.invitations.role,
                status: schema.invitations.status,
                organizationName: schema.organizations.name,
            })
                .from(schema.invitations)
                .leftJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.invitations.organizationId, schema.organizations.id))
                .where((0, drizzle_orm_1.eq)(schema.invitations.status, 'pending'));
            (0, globals_1.expect)(invitationsWithOrgs).toHaveLength(2);
            const org1Invitation = invitationsWithOrgs.find(inv => inv.email === 'pending1@example.com');
            const org2Invitation = invitationsWithOrgs.find(inv => inv.email === 'pending2@example.com');
            (0, globals_1.expect)(org1Invitation?.organizationName).toBe('Test Organization 1');
            (0, globals_1.expect)(org2Invitation?.organizationName).toBe('Test Organization 2');
        });
        (0, globals_1.it)('should filter invitations by organization for manager view', async () => {
            const managerInvitations = await mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.organizationId, organization1.id));
            (0, globals_1.expect)(managerInvitations).toHaveLength(2); // 1 pending + 1 accepted from org1
            (0, globals_1.expect)(managerInvitations.every(inv => inv.organizationId === organization1.id)).toBe(true);
        });
    });
    (0, globals_1.describe)('Invitation Deletion', () => {
        let testInvitation;
        (0, globals_1.beforeEach)(async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await mockDb.insert(schema.invitations).values({
                email: 'delete-test@example.com',
                token: 'delete-token',
                tokenHash: 'delete-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            testInvitation = invitation;
        });
        (0, globals_1.it)('should successfully delete invitation', async () => {
            // Verify invitation exists
            const beforeDelete = await mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation.id));
            (0, globals_1.expect)(beforeDelete).toHaveLength(1);
            // Delete invitation
            await mockDb
                .delete(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation.id));
            // Verify invitation is deleted
            const afterDelete = await mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, testInvitation.id));
            (0, globals_1.expect)(afterDelete).toHaveLength(0);
        });
        (0, globals_1.it)('should handle deletion of non-existent invitation', async () => {
            // Try to delete non-existent invitation
            const result = await mockDb
                .delete(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, 'non-existent-id'));
            // Should not throw error, just return 0 affected rows
            (0, globals_1.expect)(result).toBeDefined();
        });
    });
    (0, globals_1.describe)('Invitation Expiration', () => {
        (0, globals_1.it)('should handle expired invitations', async () => {
            const expiredDate = new Date();
            expiredDate.setDate(expiredDate.getDate() - 1); // Yesterday
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 7); // Next week
            await mockDb.insert(schema.invitations).values([
                {
                    email: 'expired@example.com',
                    token: 'expired-token',
                    tokenHash: 'expired-hash',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expiredDate,
                },
                {
                    email: 'valid@example.com',
                    token: 'valid-token',
                    tokenHash: 'valid-hash',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: futureDate,
                },
            ]);
            // Get all pending invitations
            const allPending = await mockDb
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.status, 'pending'));
            (0, globals_1.expect)(allPending).toHaveLength(2);
            // Check expiration dates
            const expiredInvitation = allPending.find(inv => inv.email === 'expired@example.com');
            const validInvitation = allPending.find(inv => inv.email === 'valid@example.com');
            (0, globals_1.expect)(expiredInvitation?.expiresAt).toBeInstanceOf(Date);
            (0, globals_1.expect)(validInvitation?.expiresAt).toBeInstanceOf(Date);
            (0, globals_1.expect)(expiredInvitation.expiresAt < new Date()).toBe(true);
            (0, globals_1.expect)(validInvitation.expiresAt > new Date()).toBe(true);
        });
    });
    (0, globals_1.describe)('Database Constraints', () => {
        (0, globals_1.it)('should enforce unique token constraint', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            // Create first invitation
            await mockDb.insert(schema.invitations).values({
                email: 'first@example.com',
                token: 'unique-token',
                tokenHash: 'hash1',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            });
            // Try to create second invitation with same token
            await (0, globals_1.expect)(async () => {
                await mockDb.insert(schema.invitations).values({
                    email: 'second@example.com',
                    token: 'unique-token', // Same token
                    tokenHash: 'hash2',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                });
            }).rejects.toThrow();
        });
        (0, globals_1.it)('should allow null values for optional fields', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await mockDb.insert(schema.invitations).values({
                email: 'null-test@example.com',
                token: 'null-token',
                tokenHash: 'null-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: null, // Allow null
                buildingId: null, // Allow null
                residenceId: null, // Allow null
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            (0, globals_1.expect)(invitation.organizationId).toBeNull();
            (0, globals_1.expect)(invitation.buildingId).toBeNull();
            (0, globals_1.expect)(invitation.residenceId).toBeNull();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2ludml0YXRpb24vaW52aXRhdGlvbi1pbnRlZ3JhdGlvbi50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTRFO0FBQzVFLHdGQUF3RjtBQUN4RixtREFBbUQ7QUFDbkQsK0RBQWlEO0FBQ2pELDZDQUFpQztBQUNqQyx3REFBOEI7QUFFOUIsaUNBQWlDO0FBQ2pDLE1BQU0sTUFBTSxHQUFHO0lBQ2IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7SUFDdkMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUMxQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQy9FLENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDeEMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7U0FDdkMsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0lBQ0gsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUs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R0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ2xDLGNBQWMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRXJELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztnQkFDbEUsS0FBSyxFQUFFLHVCQUF1QjtnQkFDOUIsS0FBSyxFQUFFLFlBQVk7Z0JBQ25CLFNBQVMsRUFBRSxXQUFXO2dCQUN0QixJQUFJLEVBQUUsUUFBUTtnQkFDZCxNQUFNLEVBQUUsU0FBUztnQkFDakIsY0FBYyxFQUFFLElBQUksRUFBRSxhQUFhO2dCQUNuQyxVQUFVLEVBQUUsSUFBSSxFQUFNLGFBQWE7Z0JBQ25DLFdBQVcsRUFBRSxJQUFJLEVBQUssYUFBYTtnQkFDbkMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxFQUFFO2dCQUM3QixTQUFTLEVBQUUsY0FBYzthQUMxQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFZixJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzdDLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDekMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2ludml0YXRpb24vaW52aXRhdGlvbi1pbnRlZ3JhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVFYWNoLCBhZnRlckVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbi8vIFVzaW5nIG1vY2sgZGF0YWJhc2UgZm9yIHVuaXQgdGVzdHMgLSByZWFsIGRhdGFiYXNlIHRlc3RpbmcgbW92ZWQgdG8gaW50ZWdyYXRpb24gdGVzdHNcbi8vIGltcG9ydCB7IG1vY2tEYiB9IGZyb20gJy4uLy4uLy4uL3NlcnZlci9tb2NrRGInO1xuaW1wb3J0ICogYXMgc2NoZW1hIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9zY2hlbWEnO1xuaW1wb3J0IHsgZXEgfSBmcm9tICdkcml6emxlLW9ybSc7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdGpzJztcblxuLy8gTW9jayBkYXRhYmFzZSBmb3IgdW5pdCB0ZXN0aW5nXG5jb25zdCBtb2NrRGIgPSB7XG4gIGRlbGV0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKSxcbiAgaW5zZXJ0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgdmFsdWVzOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICByZXR1cm5pbmc6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbeyBpZDogJ21vY2staWQnLCBuYW1lOiAnTW9jayBEYXRhJyB9XSlcbiAgICB9KSlcbiAgfSkpLFxuICBzZWxlY3Q6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBmcm9tOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgICB3aGVyZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtdKVxuICAgIH0pKVxuICB9KSksXG4gIHVwZGF0ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgIHNldDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgd2hlcmU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICAgICAgcmV0dXJuaW5nOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW3sgaWQ6ICdtb2NrLWlkJyB9XSlcbiAgICAgIH0pKVxuICAgIH0pKVxuICB9KSlcbn07XG5cbmRlc2NyaWJlKCdJbnZpdGF0aW9uIFRhYmxlIEludGVncmF0aW9uIFRlc3RzJywgKCkgPT4ge1xuICBsZXQgYWRtaW5Vc2VyOiBhbnk7XG4gIGxldCBtYW5hZ2VyVXNlcjogYW55O1xuICBsZXQgb3JnYW5pemF0aW9uMTogYW55O1xuICBsZXQgb3JnYW5pemF0aW9uMjogYW55O1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIC8vIENsZWFuIHVwIHRhYmxlcyAobW9ja2VkIGZvciB1bml0IHRlc3RzKVxuICAgIGF3YWl0IG1vY2tEYi5kZWxldGUoc2NoZW1hLmludml0YXRpb25zKTtcbiAgICBhd2FpdCBtb2NrRGIuZGVsZXRlKHNjaGVtYS51c2VyT3JnYW5pemF0aW9ucyk7XG4gICAgYXdhaXQgbW9ja0RiLmRlbGV0ZShzY2hlbWEudXNlcnMpO1xuICAgIGF3YWl0IG1vY2tEYi5kZWxldGUoc2NoZW1hLm9yZ2FuaXphdGlvbnMpO1xuXG4gICAgLy8gQ3JlYXRlIHRlc3Qgb3JnYW5pemF0aW9uc1xuICAgIGNvbnN0IFtvcmcxXSA9IGF3YWl0IG1vY2tEYi5pbnNlcnQoc2NoZW1hLm9yZ2FuaXphdGlvbnMpLnZhbHVlcyh7XG4gICAgICBuYW1lOiAnVGVzdCBPcmdhbml6YXRpb24gMScsXG4gICAgICB0eXBlOiAnbWFuYWdlbWVudF9jb21wYW55JyxcbiAgICAgIGFkZHJlc3M6ICcxMjMgVGVzdCBTdCcsXG4gICAgICBjaXR5OiAnTW9udHJlYWwnLFxuICAgICAgcHJvdmluY2U6ICdRQycsXG4gICAgICBwb3N0YWxDb2RlOiAnSDFBIDFBMScsXG4gICAgfSkucmV0dXJuaW5nKCk7XG5cbiAgICBjb25zdCBbb3JnMl0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KHNjaGVtYS5vcmdhbml6YXRpb25zKS52YWx1ZXMoe1xuICAgICAgbmFtZTogJ1Rlc3QgT3JnYW5pemF0aW9uIDInLFxuICAgICAgdHlwZTogJ3N5bmRpY2F0ZScsXG4gICAgICBhZGRyZXNzOiAnNDU2IFRlc3QgQXZlJyxcbiAgICAgIGNpdHk6ICdRdWViZWMgQ2l0eScsXG4gICAgICBwcm92aW5jZTogJ1FDJyxcbiAgICAgIHBvc3RhbENvZGU6ICdHMUEgMUExJyxcbiAgICB9KS5yZXR1cm5pbmcoKTtcblxuICAgIG9yZ2FuaXphdGlvbjEgPSBvcmcxO1xuICAgIG9yZ2FuaXphdGlvbjIgPSBvcmcyO1xuXG4gICAgLy8gQ3JlYXRlIHRlc3QgdXNlcnNcbiAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKCdwYXNzd29yZDEyMycsIDEwKTtcbiAgICBcbiAgICBjb25zdCBbYWRtaW5dID0gYXdhaXQgbW9ja0RiLmluc2VydChzY2hlbWEudXNlcnMpLnZhbHVlcyh7XG4gICAgICB1c2VybmFtZTogJ2FkbWluQHRlc3QuY29tJyxcbiAgICAgIGVtYWlsOiAnYWRtaW5AdGVzdC5jb20nLFxuICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgZmlyc3ROYW1lOiAnQWRtaW4nLFxuICAgICAgbGFzdE5hbWU6ICdVc2VyJyxcbiAgICAgIHJvbGU6ICdhZG1pbicsXG4gICAgfSkucmV0dXJuaW5nKCk7XG5cbiAgICBjb25zdCBbbWFuYWdlcl0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KHNjaGVtYS51c2VycykudmFsdWVzKHtcbiAgICAgIHVzZXJuYW1lOiAnbWFuYWdlckB0ZXN0LmNvbScsXG4gICAgICBlbWFpbDogJ21hbmFnZXJAdGVzdC5jb20nLFxuICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgZmlyc3ROYW1lOiAnTWFuYWdlcicsXG4gICAgICBsYXN0TmFtZTogJ1VzZXInLFxuICAgICAgcm9sZTogJ21hbmFnZXInLFxuICAgIH0pLnJldHVybmluZygpO1xuXG4gICAgYWRtaW5Vc2VyID0gYWRtaW47XG4gICAgbWFuYWdlclVzZXIgPSBtYW5hZ2VyO1xuXG4gICAgLy8gQXNzaWduIG1hbmFnZXIgdG8gb3JnYW5pemF0aW9uMVxuICAgIGF3YWl0IG1vY2tEYi5pbnNlcnQoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zKS52YWx1ZXMoe1xuICAgICAgdXNlcklkOiBtYW5hZ2VyVXNlci5pZCxcbiAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24xLmlkLFxuICAgICAgb3JnYW5pemF0aW9uUm9sZTogJ21hbmFnZXInLFxuICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgLy8gQ2xlYW4gdXAgdGVzdCBkYXRhXG4gICAgYXdhaXQgbW9ja0RiLmRlbGV0ZShzY2hlbWEuaW52aXRhdGlvbnMpO1xuICAgIGF3YWl0IG1vY2tEYi5kZWxldGUoc2NoZW1hLnVzZXJPcmdhbml6YXRpb25zKTtcbiAgICBhd2FpdCBtb2NrRGIuZGVsZXRlKHNjaGVtYS51c2Vycyk7XG4gICAgYXdhaXQgbW9ja0RiLmRlbGV0ZShzY2hlbWEub3JnYW5pemF0aW9ucyk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnZpdGF0aW9uIERhdGEgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBpbnZpdGF0aW9ucyB3aXRoIHJlcXVpcmVkIGZpZWxkcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGV4cGlyYXRpb25EYXRlLnNldERhdGUoZXhwaXJhdGlvbkRhdGUuZ2V0RGF0ZSgpICsgNyk7XG5cbiAgICAgIGNvbnN0IFtpbnZpdGF0aW9uXSA9IGF3YWl0IG1vY2tEYi5pbnNlcnQoc2NoZW1hLmludml0YXRpb25zKS52YWx1ZXMoe1xuICAgICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgICB0b2tlbjogJ3Rlc3QtdG9rZW4nLFxuICAgICAgICB0b2tlbkhhc2g6ICd0ZXN0LWhhc2gnLFxuICAgICAgICByb2xlOiAndGVuYW50JyxcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24xLmlkLFxuICAgICAgICBpbnZpdGVkQnlVc2VySWQ6IGFkbWluVXNlci5pZCxcbiAgICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICAgIH0pLnJldHVybmluZygpO1xuXG4gICAgICBleHBlY3QoaW52aXRhdGlvbikudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uLmlkKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGludml0YXRpb24uZW1haWwpLnRvQmUoJ3Rlc3RAZXhhbXBsZS5jb20nKTtcbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uLnJvbGUpLnRvQmUoJ3RlbmFudCcpO1xuICAgICAgZXhwZWN0KGludml0YXRpb24uc3RhdHVzKS50b0JlKCdwZW5kaW5nJyk7XG4gICAgICBleHBlY3QoaW52aXRhdGlvbi5vcmdhbml6YXRpb25JZCkudG9CZShvcmdhbml6YXRpb24xLmlkKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludml0YXRpb25zIHdpdGggbnVsbCBidWlsZGluZyBhbmQgcmVzaWRlbmNlIHJlZmVyZW5jZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBleHBpcmF0aW9uRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBleHBpcmF0aW9uRGF0ZS5zZXREYXRlKGV4cGlyYXRpb25EYXRlLmdldERhdGUoKSArIDcpO1xuXG4gICAgICBjb25zdCBbaW52aXRhdGlvbl0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KHNjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKHtcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgdG9rZW46ICd0ZXN0LXRva2VuJyxcbiAgICAgICAgdG9rZW5IYXNoOiAndGVzdC1oYXNoJyxcbiAgICAgICAgcm9sZTogJ3RlbmFudCcsXG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uMS5pZCxcbiAgICAgICAgYnVpbGRpbmdJZDogbnVsbCxcbiAgICAgICAgcmVzaWRlbmNlSWQ6IG51bGwsXG4gICAgICAgIGludml0ZWRCeVVzZXJJZDogYWRtaW5Vc2VyLmlkLFxuICAgICAgICBleHBpcmVzQXQ6IGV4cGlyYXRpb25EYXRlLFxuICAgICAgfSkucmV0dXJuaW5nKCk7XG5cbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uLmJ1aWxkaW5nSWQpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QoaW52aXRhdGlvbi5yZXNpZGVuY2VJZCkudG9CZU51bGwoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgaW52aXRhdGlvbiByb2xlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGV4cGlyYXRpb25EYXRlLnNldERhdGUoZXhwaXJhdGlvbkRhdGUuZ2V0RGF0ZSgpICsgNyk7XG5cbiAgICAgIGNvbnN0IHZhbGlkUm9sZXMgPSBbJ2FkbWluJywgJ21hbmFnZXInLCAndGVuYW50JywgJ3Jlc2lkZW50JywgJ2RlbW9fbWFuYWdlcicsICdkZW1vX3RlbmFudCcsICdkZW1vX3Jlc2lkZW50J107XG5cbiAgICAgIGZvciAoY29uc3Qgcm9sZSBvZiB2YWxpZFJvbGVzKSB7XG4gICAgICAgIGNvbnN0IFtpbnZpdGF0aW9uXSA9IGF3YWl0IG1vY2tEYi5pbnNlcnQoc2NoZW1hLmludml0YXRpb25zKS52YWx1ZXMoe1xuICAgICAgICAgIGVtYWlsOiBgdGVzdC0ke3JvbGV9QGV4YW1wbGUuY29tYCxcbiAgICAgICAgICB0b2tlbjogYHRlc3QtdG9rZW4tJHtyb2xlfWAsXG4gICAgICAgICAgdG9rZW5IYXNoOiBgdGVzdC1oYXNoLSR7cm9sZX1gLFxuICAgICAgICAgIHJvbGU6IHJvbGUgYXMgYW55LFxuICAgICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24xLmlkLFxuICAgICAgICAgIGludml0ZWRCeVVzZXJJZDogYWRtaW5Vc2VyLmlkLFxuICAgICAgICAgIGV4cGlyZXNBdDogZXhwaXJhdGlvbkRhdGUsXG4gICAgICAgIH0pLnJldHVybmluZygpO1xuXG4gICAgICAgIGV4cGVjdChpbnZpdGF0aW9uLnJvbGUpLnRvQmUocm9sZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGludml0YXRpb24gc3RhdHVzIHZhbHVlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGV4cGlyYXRpb25EYXRlLnNldERhdGUoZXhwaXJhdGlvbkRhdGUuZ2V0RGF0ZSgpICsgNyk7XG5cbiAgICAgIGNvbnN0IHZhbGlkU3RhdHVzZXMgPSBbJ3BlbmRpbmcnLCAnYWNjZXB0ZWQnLCAnZXhwaXJlZCcsICdjYW5jZWxsZWQnXTtcblxuICAgICAgZm9yIChjb25zdCBzdGF0dXMgb2YgdmFsaWRTdGF0dXNlcykge1xuICAgICAgICBjb25zdCBbaW52aXRhdGlvbl0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KHNjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKHtcbiAgICAgICAgICBlbWFpbDogYHRlc3QtJHtzdGF0dXN9QGV4YW1wbGUuY29tYCxcbiAgICAgICAgICB0b2tlbjogYHRlc3QtdG9rZW4tJHtzdGF0dXN9YCxcbiAgICAgICAgICB0b2tlbkhhc2g6IGB0ZXN0LWhhc2gtJHtzdGF0dXN9YCxcbiAgICAgICAgICByb2xlOiAndGVuYW50JyxcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyBhcyBhbnksXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ2FuaXphdGlvbjEuaWQsXG4gICAgICAgICAgaW52aXRlZEJ5VXNlcklkOiBhZG1pblVzZXIuaWQsXG4gICAgICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICAgICAgfSkucmV0dXJuaW5nKCk7XG5cbiAgICAgICAgZXhwZWN0KGludml0YXRpb24uc3RhdHVzKS50b0JlKHN0YXR1cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnZpdGF0aW9uIFF1ZXJpZXMgYW5kIEZpbHRlcmluZycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGV4cGlyYXRpb25EYXRlLnNldERhdGUoZXhwaXJhdGlvbkRhdGUuZ2V0RGF0ZSgpICsgNyk7XG5cbiAgICAgIC8vIENyZWF0ZSB0ZXN0IGludml0YXRpb25zXG4gICAgICBhd2FpdCBtb2NrRGIuaW5zZXJ0KHNjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKFtcbiAgICAgICAge1xuICAgICAgICAgIGVtYWlsOiAncGVuZGluZzFAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHRva2VuOiAndG9rZW4xJyxcbiAgICAgICAgICB0b2tlbkhhc2g6ICdoYXNoMScsXG4gICAgICAgICAgcm9sZTogJ3RlbmFudCcsXG4gICAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ2FuaXphdGlvbjEuaWQsXG4gICAgICAgICAgaW52aXRlZEJ5VXNlcklkOiBhZG1pblVzZXIuaWQsXG4gICAgICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGVtYWlsOiAncGVuZGluZzJAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHRva2VuOiAndG9rZW4yJyxcbiAgICAgICAgICB0b2tlbkhhc2g6ICdoYXNoMicsXG4gICAgICAgICAgcm9sZTogJ3Jlc2lkZW50JyxcbiAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uMi5pZCxcbiAgICAgICAgICBpbnZpdGVkQnlVc2VySWQ6IGFkbWluVXNlci5pZCxcbiAgICAgICAgICBleHBpcmVzQXQ6IGV4cGlyYXRpb25EYXRlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZW1haWw6ICdhY2NlcHRlZEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgdG9rZW46ICd0b2tlbjMnLFxuICAgICAgICAgIHRva2VuSGFzaDogJ2hhc2gzJyxcbiAgICAgICAgICByb2xlOiAndGVuYW50JyxcbiAgICAgICAgICBzdGF0dXM6ICdhY2NlcHRlZCcsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ2FuaXphdGlvbjEuaWQsXG4gICAgICAgICAgaW52aXRlZEJ5VXNlcklkOiBhZG1pblVzZXIuaWQsXG4gICAgICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBmaWx0ZXIgcGVuZGluZyBpbnZpdGF0aW9ucyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwZW5kaW5nSW52aXRhdGlvbnMgPSBhd2FpdCBtb2NrRGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5zdGF0dXMsICdwZW5kaW5nJykpO1xuXG4gICAgICBleHBlY3QocGVuZGluZ0ludml0YXRpb25zKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QocGVuZGluZ0ludml0YXRpb25zLmV2ZXJ5KGludiA9PiBpbnYuc3RhdHVzID09PSAncGVuZGluZycpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBqb2luIHdpdGggb3JnYW5pemF0aW9ucyB0YWJsZSBmb3IgYWRtaW4gdmlldycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludml0YXRpb25zV2l0aE9yZ3MgPSBhd2FpdCBtb2NrRGJcbiAgICAgICAgLnNlbGVjdCh7XG4gICAgICAgICAgaWQ6IHNjaGVtYS5pbnZpdGF0aW9ucy5pZCxcbiAgICAgICAgICBlbWFpbDogc2NoZW1hLmludml0YXRpb25zLmVtYWlsLFxuICAgICAgICAgIHJvbGU6IHNjaGVtYS5pbnZpdGF0aW9ucy5yb2xlLFxuICAgICAgICAgIHN0YXR1czogc2NoZW1hLmludml0YXRpb25zLnN0YXR1cyxcbiAgICAgICAgICBvcmdhbml6YXRpb25OYW1lOiBzY2hlbWEub3JnYW5pemF0aW9ucy5uYW1lLFxuICAgICAgICB9KVxuICAgICAgICAuZnJvbShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC5sZWZ0Sm9pbihzY2hlbWEub3JnYW5pemF0aW9ucywgZXEoc2NoZW1hLmludml0YXRpb25zLm9yZ2FuaXphdGlvbklkLCBzY2hlbWEub3JnYW5pemF0aW9ucy5pZCkpXG4gICAgICAgIC53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuc3RhdHVzLCAncGVuZGluZycpKTtcblxuICAgICAgZXhwZWN0KGludml0YXRpb25zV2l0aE9yZ3MpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIFxuICAgICAgY29uc3Qgb3JnMUludml0YXRpb24gPSBpbnZpdGF0aW9uc1dpdGhPcmdzLmZpbmQoaW52ID0+IGludi5lbWFpbCA9PT0gJ3BlbmRpbmcxQGV4YW1wbGUuY29tJyk7XG4gICAgICBjb25zdCBvcmcySW52aXRhdGlvbiA9IGludml0YXRpb25zV2l0aE9yZ3MuZmluZChpbnYgPT4gaW52LmVtYWlsID09PSAncGVuZGluZzJAZXhhbXBsZS5jb20nKTtcblxuICAgICAgZXhwZWN0KG9yZzFJbnZpdGF0aW9uPy5vcmdhbml6YXRpb25OYW1lKS50b0JlKCdUZXN0IE9yZ2FuaXphdGlvbiAxJyk7XG4gICAgICBleHBlY3Qob3JnMkludml0YXRpb24/Lm9yZ2FuaXphdGlvbk5hbWUpLnRvQmUoJ1Rlc3QgT3JnYW5pemF0aW9uIDInKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmlsdGVyIGludml0YXRpb25zIGJ5IG9yZ2FuaXphdGlvbiBmb3IgbWFuYWdlciB2aWV3JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWFuYWdlckludml0YXRpb25zID0gYXdhaXQgbW9ja0RiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC53aGVyZShcbiAgICAgICAgICBlcShzY2hlbWEuaW52aXRhdGlvbnMub3JnYW5pemF0aW9uSWQsIG9yZ2FuaXphdGlvbjEuaWQpXG4gICAgICAgICk7XG5cbiAgICAgIGV4cGVjdChtYW5hZ2VySW52aXRhdGlvbnMpLnRvSGF2ZUxlbmd0aCgyKTsgLy8gMSBwZW5kaW5nICsgMSBhY2NlcHRlZCBmcm9tIG9yZzFcbiAgICAgIGV4cGVjdChtYW5hZ2VySW52aXRhdGlvbnMuZXZlcnkoaW52ID0+IGludi5vcmdhbml6YXRpb25JZCA9PT0gb3JnYW5pemF0aW9uMS5pZCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnZpdGF0aW9uIERlbGV0aW9uJywgKCkgPT4ge1xuICAgIGxldCB0ZXN0SW52aXRhdGlvbjogYW55O1xuXG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBleHBpcmF0aW9uRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBleHBpcmF0aW9uRGF0ZS5zZXREYXRlKGV4cGlyYXRpb25EYXRlLmdldERhdGUoKSArIDcpO1xuXG4gICAgICBjb25zdCBbaW52aXRhdGlvbl0gPSBhd2FpdCBtb2NrRGIuaW5zZXJ0KHNjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKHtcbiAgICAgICAgZW1haWw6ICdkZWxldGUtdGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHRva2VuOiAnZGVsZXRlLXRva2VuJyxcbiAgICAgICAgdG9rZW5IYXNoOiAnZGVsZXRlLWhhc2gnLFxuICAgICAgICByb2xlOiAndGVuYW50JyxcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24xLmlkLFxuICAgICAgICBpbnZpdGVkQnlVc2VySWQ6IGFkbWluVXNlci5pZCxcbiAgICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICAgIH0pLnJldHVybmluZygpO1xuXG4gICAgICB0ZXN0SW52aXRhdGlvbiA9IGludml0YXRpb247XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHN1Y2Nlc3NmdWxseSBkZWxldGUgaW52aXRhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFZlcmlmeSBpbnZpdGF0aW9uIGV4aXN0c1xuICAgICAgY29uc3QgYmVmb3JlRGVsZXRlID0gYXdhaXQgbW9ja0RiXG4gICAgICAgIC5zZWxlY3QoKVxuICAgICAgICAuZnJvbShzY2hlbWEuaW52aXRhdGlvbnMpXG4gICAgICAgIC53aGVyZShlcShzY2hlbWEuaW52aXRhdGlvbnMuaWQsIHRlc3RJbnZpdGF0aW9uLmlkKSk7XG5cbiAgICAgIGV4cGVjdChiZWZvcmVEZWxldGUpLnRvSGF2ZUxlbmd0aCgxKTtcblxuICAgICAgLy8gRGVsZXRlIGludml0YXRpb25cbiAgICAgIGF3YWl0IG1vY2tEYlxuICAgICAgICAuZGVsZXRlKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5pZCwgdGVzdEludml0YXRpb24uaWQpKTtcblxuICAgICAgLy8gVmVyaWZ5IGludml0YXRpb24gaXMgZGVsZXRlZFxuICAgICAgY29uc3QgYWZ0ZXJEZWxldGUgPSBhd2FpdCBtb2NrRGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5pZCwgdGVzdEludml0YXRpb24uaWQpKTtcblxuICAgICAgZXhwZWN0KGFmdGVyRGVsZXRlKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBkZWxldGlvbiBvZiBub24tZXhpc3RlbnQgaW52aXRhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRyeSB0byBkZWxldGUgbm9uLWV4aXN0ZW50IGludml0YXRpb25cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tEYlxuICAgICAgICAuZGVsZXRlKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5pZCwgJ25vbi1leGlzdGVudC1pZCcpKTtcblxuICAgICAgLy8gU2hvdWxkIG5vdCB0aHJvdyBlcnJvciwganVzdCByZXR1cm4gMCBhZmZlY3RlZCByb3dzXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW52aXRhdGlvbiBFeHBpcmF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGV4cGlyZWQgaW52aXRhdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBleHBpcmVkRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBleHBpcmVkRGF0ZS5zZXREYXRlKGV4cGlyZWREYXRlLmdldERhdGUoKSAtIDEpOyAvLyBZZXN0ZXJkYXlcblxuICAgICAgY29uc3QgZnV0dXJlRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBmdXR1cmVEYXRlLnNldERhdGUoZnV0dXJlRGF0ZS5nZXREYXRlKCkgKyA3KTsgLy8gTmV4dCB3ZWVrXG5cbiAgICAgIGF3YWl0IG1vY2tEYi5pbnNlcnQoc2NoZW1hLmludml0YXRpb25zKS52YWx1ZXMoW1xuICAgICAgICB7XG4gICAgICAgICAgZW1haWw6ICdleHBpcmVkQGV4YW1wbGUuY29tJyxcbiAgICAgICAgICB0b2tlbjogJ2V4cGlyZWQtdG9rZW4nLFxuICAgICAgICAgIHRva2VuSGFzaDogJ2V4cGlyZWQtaGFzaCcsXG4gICAgICAgICAgcm9sZTogJ3RlbmFudCcsXG4gICAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG9yZ2FuaXphdGlvbjEuaWQsXG4gICAgICAgICAgaW52aXRlZEJ5VXNlcklkOiBhZG1pblVzZXIuaWQsXG4gICAgICAgICAgZXhwaXJlc0F0OiBleHBpcmVkRGF0ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGVtYWlsOiAndmFsaWRAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHRva2VuOiAndmFsaWQtdG9rZW4nLFxuICAgICAgICAgIHRva2VuSGFzaDogJ3ZhbGlkLWhhc2gnLFxuICAgICAgICAgIHJvbGU6ICd0ZW5hbnQnLFxuICAgICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24xLmlkLFxuICAgICAgICAgIGludml0ZWRCeVVzZXJJZDogYWRtaW5Vc2VyLmlkLFxuICAgICAgICAgIGV4cGlyZXNBdDogZnV0dXJlRGF0ZSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuXG4gICAgICAvLyBHZXQgYWxsIHBlbmRpbmcgaW52aXRhdGlvbnNcbiAgICAgIGNvbnN0IGFsbFBlbmRpbmcgPSBhd2FpdCBtb2NrRGJcbiAgICAgICAgLnNlbGVjdCgpXG4gICAgICAgIC5mcm9tKHNjaGVtYS5pbnZpdGF0aW9ucylcbiAgICAgICAgLndoZXJlKGVxKHNjaGVtYS5pbnZpdGF0aW9ucy5zdGF0dXMsICdwZW5kaW5nJykpO1xuXG4gICAgICBleHBlY3QoYWxsUGVuZGluZykudG9IYXZlTGVuZ3RoKDIpO1xuXG4gICAgICAvLyBDaGVjayBleHBpcmF0aW9uIGRhdGVzXG4gICAgICBjb25zdCBleHBpcmVkSW52aXRhdGlvbiA9IGFsbFBlbmRpbmcuZmluZChpbnYgPT4gaW52LmVtYWlsID09PSAnZXhwaXJlZEBleGFtcGxlLmNvbScpO1xuICAgICAgY29uc3QgdmFsaWRJbnZpdGF0aW9uID0gYWxsUGVuZGluZy5maW5kKGludiA9PiBpbnYuZW1haWwgPT09ICd2YWxpZEBleGFtcGxlLmNvbScpO1xuXG4gICAgICBleHBlY3QoZXhwaXJlZEludml0YXRpb24/LmV4cGlyZXNBdCkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gICAgICBleHBlY3QodmFsaWRJbnZpdGF0aW9uPy5leHBpcmVzQXQpLnRvQmVJbnN0YW5jZU9mKERhdGUpO1xuICAgICAgZXhwZWN0KGV4cGlyZWRJbnZpdGF0aW9uIS5leHBpcmVzQXQgPCBuZXcgRGF0ZSgpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHZhbGlkSW52aXRhdGlvbiEuZXhwaXJlc0F0ID4gbmV3IERhdGUoKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RhdGFiYXNlIENvbnN0cmFpbnRzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZW5mb3JjZSB1bmlxdWUgdG9rZW4gY29uc3RyYWludCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoKTtcbiAgICAgIGV4cGlyYXRpb25EYXRlLnNldERhdGUoZXhwaXJhdGlvbkRhdGUuZ2V0RGF0ZSgpICsgNyk7XG5cbiAgICAgIC8vIENyZWF0ZSBmaXJzdCBpbnZpdGF0aW9uXG4gICAgICBhd2FpdCBtb2NrRGIuaW5zZXJ0KHNjaGVtYS5pbnZpdGF0aW9ucykudmFsdWVzKHtcbiAgICAgICAgZW1haWw6ICdmaXJzdEBleGFtcGxlLmNvbScsXG4gICAgICAgIHRva2VuOiAndW5pcXVlLXRva2VuJyxcbiAgICAgICAgdG9rZW5IYXNoOiAnaGFzaDEnLFxuICAgICAgICByb2xlOiAndGVuYW50JyxcbiAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBvcmdhbml6YXRpb24xLmlkLFxuICAgICAgICBpbnZpdGVkQnlVc2VySWQ6IGFkbWluVXNlci5pZCxcbiAgICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBUcnkgdG8gY3JlYXRlIHNlY29uZCBpbnZpdGF0aW9uIHdpdGggc2FtZSB0b2tlblxuICAgICAgYXdhaXQgZXhwZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgbW9ja0RiLmluc2VydChzY2hlbWEuaW52aXRhdGlvbnMpLnZhbHVlcyh7XG4gICAgICAgICAgZW1haWw6ICdzZWNvbmRAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIHRva2VuOiAndW5pcXVlLXRva2VuJywgLy8gU2FtZSB0b2tlblxuICAgICAgICAgIHRva2VuSGFzaDogJ2hhc2gyJyxcbiAgICAgICAgICByb2xlOiAndGVuYW50JyxcbiAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgICAgICBvcmdhbml6YXRpb25JZDogb3JnYW5pemF0aW9uMS5pZCxcbiAgICAgICAgICBpbnZpdGVkQnlVc2VySWQ6IGFkbWluVXNlci5pZCxcbiAgICAgICAgICBleHBpcmVzQXQ6IGV4cGlyYXRpb25EYXRlLFxuICAgICAgICB9KTtcbiAgICAgIH0pLnJlamVjdHMudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBudWxsIHZhbHVlcyBmb3Igb3B0aW9uYWwgZmllbGRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXhwaXJhdGlvbkRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgZXhwaXJhdGlvbkRhdGUuc2V0RGF0ZShleHBpcmF0aW9uRGF0ZS5nZXREYXRlKCkgKyA3KTtcblxuICAgICAgY29uc3QgW2ludml0YXRpb25dID0gYXdhaXQgbW9ja0RiLmluc2VydChzY2hlbWEuaW52aXRhdGlvbnMpLnZhbHVlcyh7XG4gICAgICAgIGVtYWlsOiAnbnVsbC10ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgICAgdG9rZW46ICdudWxsLXRva2VuJyxcbiAgICAgICAgdG9rZW5IYXNoOiAnbnVsbC1oYXNoJyxcbiAgICAgICAgcm9sZTogJ3RlbmFudCcsXG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICBvcmdhbml6YXRpb25JZDogbnVsbCwgLy8gQWxsb3cgbnVsbFxuICAgICAgICBidWlsZGluZ0lkOiBudWxsLCAgICAgLy8gQWxsb3cgbnVsbFxuICAgICAgICByZXNpZGVuY2VJZDogbnVsbCwgICAgLy8gQWxsb3cgbnVsbFxuICAgICAgICBpbnZpdGVkQnlVc2VySWQ6IGFkbWluVXNlci5pZCxcbiAgICAgICAgZXhwaXJlc0F0OiBleHBpcmF0aW9uRGF0ZSxcbiAgICAgIH0pLnJldHVybmluZygpO1xuXG4gICAgICBleHBlY3QoaW52aXRhdGlvbi5vcmdhbml6YXRpb25JZCkudG9CZU51bGwoKTtcbiAgICAgIGV4cGVjdChpbnZpdGF0aW9uLmJ1aWxkaW5nSWQpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QoaW52aXRhdGlvbi5yZXNpZGVuY2VJZCkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=