{"file":"/home/runner/workspace/scripts/create-demo-environment.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/scripts/create-demo-environment.ts"],"sourcesContent":["\n\n/**\n * Koveo Gestion Demo Environment Script\n * \n * Creates or updates a comprehensive demo environment with realistic, fictional data\n * for product demonstrations and QA testing. Complies with Quebec's Law 25.\n * \n * Usage:\n *   npx tsx scripts/create-demo-environment.ts --type demo --name \"Demo Organization\"\n *   npx tsx scripts/create-demo-environment.ts --type production --name \"Test Company\"\n *   npx tsx scripts/create-demo-environment.ts --type demo --name \"Demo Organization\" --database prod\n * \n * Features:\n * - Idempotent upsert logic (updates existing organizations)\n * - Role-based user creation (demo vs production types)\n * - Comprehensive realistic data using @faker-js/faker\n * - Quebec-specific data generation\n * - Complete building, residence, and user ecosystem\n * - Realistic bookings, demands, and financial data\n */\n\nimport { eq, and, gte, sql } from 'drizzle-orm';\nimport { faker } from '@faker-js/faker';\nimport * as bcrypt from 'bcryptjs';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as schema from '../shared/schema';\n\n// Database connection variables\nlet db: any;\nlet closeConnection: () => Promise<void>;\n\nasync function initializeDatabase(targetDatabase: 'dev' | 'prod') {\n  if (targetDatabase === 'prod') {\n    console.log('⚠️ WARNING: Targeting PRODUCTION database (DATABASE_URL_KOVEO)');\n    console.log('⚠️ This will create demo data in the production environment!');\n    console.log('');\n    \n    // Use production database\n    const DATABASE_URL_KOVEO = process.env.DATABASE_URL_KOVEO;\n    if (!DATABASE_URL_KOVEO) {\n      console.error('❌ DATABASE_URL_KOVEO environment variable is required for production database');\n      process.exit(1);\n    }\n    \n    const { Pool } = await import('@neondatabase/serverless');\n    const { drizzle } = await import('drizzle-orm/neon-serverless');\n    \n    const pool = new Pool({ connectionString: DATABASE_URL_KOVEO });\n    db = drizzle({ client: pool, schema });\n    closeConnection = async () => {\n      await pool.end();\n    };\n    \n    console.log('🔗 Connected to PRODUCTION database (DATABASE_URL_KOVEO)');\n  } else {\n    // Use development database (default)\n    const { db: sharedDb } = await import('../server/db');\n    db = sharedDb;\n    closeConnection = async () => {\n      // Connection will be managed by the shared pool\n    };\n    \n    console.log('🔗 Connected to DEVELOPMENT database (DATABASE_URL)');\n  }\n}\n\n// Types\ninterface CliArgs {\n  type: 'demo' | 'production';\n  name: string;\n  database: 'dev' | 'prod';\n}\n\ninterface CreatedBuilding {\n  id: string;\n  name: string;\n  organizationId: string;\n}\n\ninterface CreatedResidence {\n  id: string;\n  unitNumber: string;\n  buildingId: string;\n  buildingName: string;\n}\n\ninterface CreatedUser {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n  buildingId?: string;\n  residenceId?: string;\n}\n\ninterface CreatedCommonSpace {\n  id: string;\n  name: string;\n  buildingId: string;\n  isReservable: boolean;\n}\n\ninterface CreatedBill {\n  id: string;\n  billNumber: string;\n  title: string;\n  category: string;\n  vendor: string;\n  totalAmount: string;\n  buildingId: string;\n  description: string;\n}\n\n// Configuration constants\nconst BUILDINGS_PER_ORG = 5;\nconst MIN_RESIDENCES_PER_BUILDING = 5;\nconst MAX_RESIDENCES_PER_BUILDING = 10;\nconst COMMON_SPACES_PER_BUILDING = 4;\nconst BOOKINGS_PER_RESERVABLE_SPACE = 8;\nconst DEMANDS_PER_RESIDENT = 2;\nconst BILLS_PER_BUILDING_PER_MONTH = 3;\n\n// Quebec-specific data\nconst QUEBEC_CITIES = [\n  'Montreal', 'Quebec City', 'Laval', 'Gatineau', 'Longueuil',\n  'Sherbrooke', 'Saguenay', 'Trois-Rivières', 'Terrebonne', 'Saint-Jean-sur-Richelieu'\n];\n\nconst COMMON_SPACE_TYPES = [\n  { name: 'Gym', isBookable: false },\n  { name: 'Rooftop Terrace', isBookable: true },\n  { name: 'Pool', isBookable: false },\n  { name: 'Conference Room', isBookable: true },\n  { name: 'Party Room', isBookable: true },\n  { name: 'Lobby', isBookable: false },\n  { name: 'Storage Room', isBookable: false },\n  { name: 'Laundry Room', isBookable: false }\n];\n\nconst MAINTENANCE_CATEGORIES = [\n  'Plumbing', 'Electrical', 'HVAC', 'Structural', 'Appliances', 'General Maintenance'\n];\n\nconst BILL_CATEGORIES = [\n  'insurance', 'maintenance', 'utilities', 'cleaning', 'security', \n  'landscaping', 'professional_services', 'administration', 'supplies'\n] as const;\n\n/**\n * Parse command line arguments\n */\nfunction parseArguments(): CliArgs {\n  const args = process.argv.slice(2);\n  \n  let type: 'demo' | 'production' | undefined;\n  let name: string | undefined;\n  let database: 'dev' | 'prod' = 'dev'; // Default to development database\n  \n  for (let i = 0; i < args.length; i++) {\n    if (args[i] === '--type' && i + 1 < args.length) {\n      const typeValue = args[i + 1];\n      if (typeValue === 'demo' || typeValue === 'production') {\n        type = typeValue;\n      } else {\n        console.error('❌ --type must be either \"demo\" or \"production\"');\n        process.exit(1);\n      }\n      i++; // Skip next argument as it's the value\n    } else if (args[i] === '--name' && i + 1 < args.length) {\n      name = args[i + 1];\n      i++; // Skip next argument as it's the value\n    } else if (args[i] === '--database' && i + 1 < args.length) {\n      const databaseValue = args[i + 1];\n      if (databaseValue === 'dev' || databaseValue === 'prod') {\n        database = databaseValue;\n      } else {\n        console.error('❌ --database must be either \"dev\" or \"prod\"');\n        process.exit(1);\n      }\n      i++; // Skip next argument as it's the value\n    }\n  }\n  \n  if (!type) {\n    console.error('❌ --type argument is required (demo or production)');\n    console.error('Usage: npx tsx scripts/create-demo-environment.ts --type demo --name \"Demo Organization\" [--database dev|prod]');\n    process.exit(1);\n  }\n  \n  if (!name) {\n    console.error('❌ --name argument is required');\n    console.error('Usage: npx tsx scripts/create-demo-environment.ts --type demo --name \"Demo Organization\" [--database dev|prod]');\n    process.exit(1);\n  }\n  \n  return { type, name, database };\n}\n\n/**\n * Generate Quebec-specific postal code\n */\nfunction generateQuebecPostalCode(): string {\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const digits = '0123456789';\n  \n  return `H${digits[Math.floor(Math.random() * digits.length)]}${letters[Math.floor(Math.random() * letters.length)]} ${digits[Math.floor(Math.random() * digits.length)]}${letters[Math.floor(Math.random() * letters.length)]}${digits[Math.floor(Math.random() * digits.length)]}`;\n}\n\n/**\n * Generate Quebec phone number in format (514) 555-0123\n */\nfunction generateQuebecPhone(): string {\n  const areaCodes = ['514', '438', '450', '579', '418', '581', '819', '873'];\n  const areaCode = areaCodes[Math.floor(Math.random() * areaCodes.length)];\n  const exchange = faker.string.numeric(3);\n  const number = faker.string.numeric(4);\n  \n  return `(${areaCode}) ${exchange}-${number}`;\n}\n\n/**\n * Generate realistic Quebec street address\n */\nfunction generateQuebecAddress(): string {\n  const streetTypes = ['rue', 'avenue', 'boulevard', 'montée', 'chemin'];\n  const streetNames = [\n    'Saint-Laurent', 'Notre-Dame', 'Sainte-Catherine', 'Sherbrooke', 'René-Lévesque',\n    'de la Montagne', 'du Parc', 'des Érables', 'des Pins', 'de Maisonneuve'\n  ];\n  \n  const number = faker.number.int({ min: 100, max: 9999 });\n  const streetType = streetTypes[Math.floor(Math.random() * streetTypes.length)];\n  const streetName = streetNames[Math.floor(Math.random() * streetNames.length)];\n  \n  return `${number} ${streetType} ${streetName}`;\n}\n\n/**\n * Upsert organization (find existing or create new)\n */\nasync function upsertOrganization(name: string, type: 'demo' | 'production'): Promise<schema.Organization> {\n  try {\n    console.log(`🔍 Looking for existing organization: \"${name}\"`);\n    \n    // Check if organization already exists\n    const existingOrgs = await db\n      .select()\n      .from(schema.organizations)\n      .where(eq(schema.organizations.name, name))\n      .limit(1);\n    \n    if (existingOrgs.length > 0) {\n      console.log(`✅ Found existing organization: \"${name}\" (ID: ${existingOrgs[0].id})`);\n      \n      // Update the existing organization with new data\n      const [updatedOrg] = await db\n        .update(schema.organizations)\n        .set({\n          type: type === 'demo' ? 'demo' : 'management_company',\n          address: generateQuebecAddress(),\n          city: QUEBEC_CITIES[Math.floor(Math.random() * QUEBEC_CITIES.length)],\n          province: 'QC',\n          postalCode: generateQuebecPostalCode(),\n          phone: generateQuebecPhone(),\n          email: faker.internet.email().toLowerCase(),\n          website: faker.internet.url(),\n          registrationNumber: `${type.toUpperCase()}-${faker.string.alphanumeric(6).toUpperCase()}`,\n          isActive: true,\n          updatedAt: new Date()\n        })\n        .where(eq(schema.organizations.id, existingOrgs[0].id))\n        .returning();\n      \n      console.log(`📝 Updated organization \"${name}\" with new demo data`);\n      return updatedOrg;\n    } else {\n      console.log(`➕ Creating new organization: \"${name}\"`);\n      \n      // Create new organization\n      const [newOrg] = await db\n        .insert(schema.organizations)\n        .values({\n          name,\n          type: type === 'demo' ? 'demo' : 'management_company',\n          address: generateQuebecAddress(),\n          city: QUEBEC_CITIES[Math.floor(Math.random() * QUEBEC_CITIES.length)],\n          province: 'QC',\n          postalCode: generateQuebecPostalCode(),\n          phone: generateQuebecPhone(),\n          email: faker.internet.email().toLowerCase(),\n          website: faker.internet.url(),\n          registrationNumber: `${type.toUpperCase()}-${faker.string.alphanumeric(6).toUpperCase()}`,\n          isActive: true\n        })\n        .returning();\n      \n      console.log(`✅ Created new organization: \"${name}\" (ID: ${newOrg.id})`);\n      return newOrg;\n    }\n  } catch (error) {\n    console.error(`❌ Failed to upsert organization \"${name}\":`, error);\n    throw error;\n  }\n}\n\n/**\n * Create buildings for an organization\n */\nasync function seedBuildings(organizationId: string): Promise<{ buildings: CreatedBuilding[], newBuildingsCreated: number }> {\n  try {\n    console.log(`🔍 Checking buildings for organization ID: ${organizationId}`);\n    \n    // Check for existing ACTIVE buildings in this organization\n    const existingBuildings = await db\n      .select({\n        id: schema.buildings.id,\n        name: schema.buildings.name,\n        organizationId: schema.buildings.organizationId\n      })\n      .from(schema.buildings)\n      .where(\n        and(\n          eq(schema.buildings.organizationId, organizationId),\n          eq(schema.buildings.isActive, true)\n        )\n      );\n    \n    const maxBuildings = 5; // Maximum buildings per organization\n    const buildingsToCreate = Math.max(0, maxBuildings - existingBuildings.length);\n    \n    console.log(`🏢 Found ${existingBuildings.length} existing buildings for this organization (max: ${maxBuildings}).`);\n    console.log(`🏢 Will create ${buildingsToCreate} additional buildings.`);\n    \n    if (existingBuildings.length >= maxBuildings) {\n      console.log(`🏢 Organization already has maximum buildings. Skipping building creation.`);\n      return {\n        buildings: existingBuildings.map(b => ({\n          id: b.id,\n          name: b.name,\n          organizationId: b.organizationId\n        })),\n        newBuildingsCreated: 0\n      };\n    }\n    \n    console.log(`🏢 Creating ${buildingsToCreate} additional buildings...`);\n    \n    const buildings: CreatedBuilding[] = [...existingBuildings.map(b => ({\n      id: b.id,\n      name: b.name,\n      organizationId: b.organizationId\n    }))];\n    \n    for (let i = 1; i <= buildingsToCreate; i++) {\n      const buildingName = `${faker.location.streetAddress()} Building ${existingBuildings.length + i}`;\n      \n      const [building] = await db\n        .insert(schema.buildings)\n        .values({\n          organizationId,\n          name: buildingName,\n          address: generateQuebecAddress(),\n          city: QUEBEC_CITIES[Math.floor(Math.random() * QUEBEC_CITIES.length)],\n          province: 'QC',\n          postalCode: generateQuebecPostalCode(),\n          buildingType: Math.random() > 0.5 ? 'condo' : 'appartement',\n          yearBuilt: faker.number.int({ min: 1950, max: 2023 }),\n          totalUnits: faker.number.int({ min: MIN_RESIDENCES_PER_BUILDING, max: MAX_RESIDENCES_PER_BUILDING }),\n          totalFloors: faker.number.int({ min: 3, max: 25 }),\n          parkingSpaces: faker.number.int({ min: 10, max: 150 }),\n          storageSpaces: faker.number.int({ min: 5, max: 75 }),\n          amenities: JSON.stringify([\n            'Elevator', 'Parking', 'Storage', 'Gym', 'Pool', 'Concierge'\n          ].filter(() => Math.random() > 0.3)),\n          managementCompany: faker.company.name(),\n          bankAccountNumber: faker.finance.accountNumber(12),\n          isActive: true\n        })\n        .returning();\n      \n      buildings.push({\n        id: building.id,\n        name: building.name,\n        organizationId: building.organizationId\n      });\n      \n      console.log(`   ✅ Created building: ${building.name}`);\n    }\n    \n    console.log(`📊 Created ${buildingsToCreate} new buildings (total: ${buildings.length})`);\n    return {\n      buildings,\n      newBuildingsCreated: buildingsToCreate\n    };\n  } catch (error) {\n    console.error('❌ Failed to create buildings:', error);\n    throw error;\n  }\n}\n\n/**\n * Create residences for buildings (only for new buildings that don't have residences)\n */\nasync function seedResidences(buildings: CreatedBuilding[], newBuildingsOnly: boolean = false): Promise<CreatedResidence[]> {\n  try {\n    console.log('🏠 Creating residences...');\n    \n    const residences: CreatedResidence[] = [];\n    \n    for (const building of buildings) {\n      // Check if this building already has residences (if we only want new buildings)\n      if (newBuildingsOnly) {\n        const existingResidences = await db\n          .select({\n            id: schema.residences.id,\n            unitNumber: schema.residences.unitNumber,\n            buildingId: schema.residences.buildingId\n          })\n          .from(schema.residences)\n          .where(\n            and(\n              eq(schema.residences.buildingId, building.id),\n              eq(schema.residences.isActive, true)\n            )\n          );\n        \n        if (existingResidences.length > 0) {\n          console.log(`   Building ${building.name} already has residences, adding ${existingResidences.length} existing residences...`);\n          // Add existing residences to the array\n          for (const residence of existingResidences) {\n            residences.push({\n              id: residence.id,\n              unitNumber: residence.unitNumber,\n              buildingId: residence.buildingId,\n              buildingName: building.name\n            });\n          }\n          continue;\n        }\n      }\n      // Get the building's totalUnits to create exact number of residences\n      const buildingData = await db\n        .select({ totalUnits: schema.buildings.totalUnits })\n        .from(schema.buildings)\n        .where(eq(schema.buildings.id, building.id))\n        .limit(1);\n      \n      const residenceCount = buildingData[0]?.totalUnits || MIN_RESIDENCES_PER_BUILDING;\n      \n      console.log(`   Creating ${residenceCount} residences for ${building.name}`);\n      \n      for (let i = 1; i <= residenceCount; i++) {\n        const unitNumber = `${faker.number.int({ min: 100, max: 999 })}`;\n        \n        const [residence] = await db\n          .insert(schema.residences)\n          .values({\n            buildingId: building.id,\n            unitNumber,\n            floor: faker.number.int({ min: 1, max: 15 }),\n            squareFootage: faker.number.float({ min: 500, max: 2500, fractionDigits: 0 }).toString(),\n            bedrooms: faker.number.int({ min: 1, max: 4 }),\n            bathrooms: faker.number.float({ min: 1, max: 3.5, fractionDigits: 1 }).toString(),\n            balcony: Math.random() > 0.4,\n            parkingSpaceNumbers: Math.random() > 0.3 ? [\n              `P${faker.number.int({ min: 1, max: 200 })}`\n            ] : [],\n            storageSpaceNumbers: Math.random() > 0.5 ? [\n              `S${faker.number.int({ min: 1, max: 100 })}`\n            ] : [],\n            ownershipPercentage: faker.number.float({ min: 0.1, max: 5.0, fractionDigits: 2 }).toString(),\n            monthlyFees: faker.number.float({ min: 200, max: 800, fractionDigits: 2 }).toString(),\n            isActive: true\n          })\n          .returning();\n        \n        residences.push({\n          id: residence.id,\n          unitNumber: residence.unitNumber,\n          buildingId: residence.buildingId,\n          buildingName: building.name\n        });\n      }\n    }\n    \n    console.log(`📊 Created ${residences.length} residences across all buildings`);\n    return residences;\n  } catch (error) {\n    console.error('❌ Failed to create residences:', error);\n    throw error;\n  }\n}\n\n/**\n * Create common spaces for buildings\n */\nasync function seedCommonSpaces(buildings: CreatedBuilding[]): Promise<CreatedCommonSpace[]> {\n  try {\n    console.log('🏛️ Creating common spaces...');\n    \n    const commonSpaces: CreatedCommonSpace[] = [];\n    \n    for (const building of buildings) {\n      console.log(`   Creating ${COMMON_SPACES_PER_BUILDING} common spaces for ${building.name}`);\n      \n      // Shuffle and take first N common space types\n      const shuffledTypes = [...COMMON_SPACE_TYPES].sort(() => 0.5 - Math.random());\n      const selectedTypes = shuffledTypes.slice(0, COMMON_SPACES_PER_BUILDING);\n      \n      for (const spaceType of selectedTypes) {\n        const [commonSpace] = await db\n          .insert(schema.commonSpaces)\n          .values({\n            name: spaceType.name,\n            description: `${spaceType.name} facility available to residents`,\n            buildingId: building.id,\n            isReservable: spaceType.isBookable,\n            capacity: spaceType.isBookable ? faker.number.int({ min: 5, max: 50 }) : null,\n            openingHours: spaceType.isBookable ? JSON.stringify([\n              {\n                day: 'monday',\n                open: '08:00',\n                close: '22:00',\n                isOpen: true,\n                breaks: []\n              },\n              {\n                day: 'tuesday',\n                open: '08:00',\n                close: '22:00',\n                isOpen: true,\n                breaks: []\n              },\n              {\n                day: 'wednesday',\n                open: '08:00',\n                close: '22:00',\n                isOpen: true,\n                breaks: []\n              },\n              {\n                day: 'thursday',\n                open: '08:00',\n                close: '22:00',\n                isOpen: true,\n                breaks: []\n              },\n              {\n                day: 'friday',\n                open: '08:00',\n                close: '22:00',\n                isOpen: true,\n                breaks: []\n              },\n              {\n                day: 'saturday',\n                open: '09:00',\n                close: '21:00',\n                isOpen: true,\n                breaks: []\n              },\n              {\n                day: 'sunday',\n                open: '09:00',\n                close: '21:00',\n                isOpen: true,\n                breaks: []\n              }\n            ]) : null,\n            availableDays: spaceType.isBookable ? JSON.stringify([\n              'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'\n            ]) : null,\n            bookingRules: spaceType.isBookable ? 'Maximum 4 hours per booking. Must be booked at least 24 hours in advance.' : null\n          })\n          .returning();\n        \n        commonSpaces.push({\n          id: commonSpace.id,\n          name: commonSpace.name,\n          buildingId: commonSpace.buildingId,\n          isReservable: commonSpace.isReservable\n        });\n      }\n    }\n    \n    console.log(`📊 Created ${commonSpaces.length} common spaces`);\n    return commonSpaces;\n  } catch (error) {\n    console.error('❌ Failed to create common spaces:', error);\n    throw error;\n  }\n}\n\n/**\n * Create users with role-based logic and proper organization/building/residence relationships\n * Role-based assignment rules:\n * - Residents/Tenants: assign 1+ residences, then assign user to buildings of those residences\n * - Managers: assign 0+ residences, assign user to building's residences, can assign 0+ other buildings\n */\nasync function seedUsers(\n  organizationType: 'demo' | 'production',\n  organizationId: string,\n  buildings: CreatedBuilding[],\n  residences: CreatedResidence[]\n): Promise<CreatedUser[]> {\n  try {\n    console.log('👥 Creating users with role-based assignments...');\n    \n    const users: CreatedUser[] = [];\n    const hashedPassword = await bcrypt.hash('demo123456', 10);\n    \n    // Create managers (1-2 per building) with residence and building assignments\n    console.log('   Creating managers...');\n    for (const building of buildings) {\n      const managerCount = faker.number.int({ min: 1, max: 2 });\n      console.log(`   Creating ${managerCount} managers for ${building.name}`);\n      \n      for (let i = 0; i < managerCount; i++) {\n        const firstName = faker.person.firstName();\n        const lastName = faker.person.lastName();\n        const role = organizationType === 'demo' ? 'demo_manager' : 'manager';\n        \n        const [user] = await db\n          .insert(schema.users)\n          .values({\n            username: `${firstName.toLowerCase()}.${lastName.toLowerCase()}${faker.number.int({ min: 10, max: 99 })}`,\n            email: faker.internet.email({ firstName, lastName }).toLowerCase(),\n            password: hashedPassword,\n            firstName,\n            lastName,\n            phone: generateQuebecPhone(),\n            language: Math.random() > 0.3 ? 'fr' : 'en', // 70% French, 30% English for Quebec\n            role: role as any,\n            isActive: true\n          })\n          .returning();\n        \n        // Create user-organization relationship - critical for manager building access\n        await db\n          .insert(schema.userOrganizations)\n          .values({\n            userId: user.id,\n            organizationId: organizationId,\n            organizationRole: role as any,\n            isActive: true,\n            canAccessAllOrganizations: false\n          });\n        \n        // For managers: assign 0+ residences (40% chance of having residences)\n        const buildingResidences = residences.filter(r => r.buildingId === building.id);\n        const shouldHaveResidences = Math.random() < 0.4;\n        let assignedResidences: CreatedResidence[] = [];\n        \n        if (shouldHaveResidences && buildingResidences.length > 0) {\n          const residenceCount = faker.number.int({ min: 1, max: Math.min(3, buildingResidences.length) });\n          assignedResidences = faker.helpers.arrayElements(buildingResidences, residenceCount);\n          \n          for (const residence of assignedResidences) {\n            await db\n              .insert(schema.userResidences)\n              .values({\n                userId: user.id,\n                residenceId: residence.id,\n                relationshipType: 'owner', // Managers are typically owners\n                startDate: new Date(Date.now() - faker.number.int({ min: 30, max: 365 * 2 }) * 24 * 60 * 60 * 1000),\n                isActive: true\n              });\n          }\n        }\n        \n        // Managers can be assigned to additional buildings (30% chance)\n        const shouldHaveAdditionalBuildings = Math.random() < 0.3;\n        const otherBuildings = buildings.filter(b => b.id !== building.id);\n        \n        if (shouldHaveAdditionalBuildings && otherBuildings.length > 0) {\n          const additionalBuildingCount = faker.number.int({ min: 1, max: Math.min(2, otherBuildings.length) });\n          const additionalBuildings = faker.helpers.arrayElements(otherBuildings, additionalBuildingCount);\n          \n          console.log(`     Manager ${user.email} assigned to ${additionalBuildingCount + 1} buildings`);\n        }\n        \n        users.push({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          role: user.role,\n          buildingId: building.id,\n          residenceId: assignedResidences.length > 0 ? assignedResidences[0].id : undefined\n        });\n      }\n    }\n    \n    // Create residents and tenants with proper residence-first assignments\n    console.log('   Creating residents and tenants...');\n    \n    // Calculate how many residents/tenants we need (aim for ~80% residence occupancy)\n    const targetResidentCount = Math.floor(residences.length * 0.8);\n    let createdResidents = 0;\n    \n    for (let i = 0; i < targetResidentCount; i++) {\n      const firstName = faker.person.firstName();\n      const lastName = faker.person.lastName();\n      \n      // 60% residents, 40% tenants\n      const isResident = Math.random() < 0.6;\n      const baseRole = isResident ? 'resident' : 'tenant';\n      const role = organizationType === 'demo' ? `demo_${baseRole}` : baseRole;\n      \n      const [user] = await db\n        .insert(schema.users)\n        .values({\n          username: `${firstName.toLowerCase()}.${lastName.toLowerCase()}${faker.number.int({ min: 10, max: 99 })}`,\n          email: faker.internet.email({ firstName, lastName }).toLowerCase(),\n          password: hashedPassword,\n          firstName,\n          lastName,\n          phone: generateQuebecPhone(),\n          language: Math.random() > 0.3 ? 'fr' : 'en', // 70% French, 30% English for Quebec\n          role: role as any,\n          isActive: true\n        })\n        .returning();\n      \n      // Create user-organization relationship\n      await db\n        .insert(schema.userOrganizations)\n        .values({\n          userId: user.id,\n          organizationId: organizationId,\n          organizationRole: role as any,\n          isActive: true,\n          canAccessAllOrganizations: false\n        });\n      \n      // For residents/tenants: assign 1+ residences (primary residence + possible additional ones)\n      const primaryResidenceCount = faker.number.int({ min: 1, max: 2 });\n      const availableResidences = residences.filter(r => \n        !users.some(u => u.residenceId === r.id) // Avoid double-assignment for simplicity\n      );\n      \n      if (availableResidences.length === 0) break; // No more residences available\n      \n      const assignedResidences = faker.helpers.arrayElements(\n        availableResidences, \n        Math.min(primaryResidenceCount, availableResidences.length)\n      );\n      \n      let primaryBuildingId = '';\n      \n      for (let j = 0; j < assignedResidences.length; j++) {\n        const residence = assignedResidences[j];\n        const relationshipTypes = ['owner', 'tenant', 'occupant'];\n        const relationshipType = j === 0 \n          ? (isResident ? 'owner' : 'tenant') // Primary residence matches role\n          : faker.helpers.arrayElement(['tenant', 'occupant']); // Secondary residences\n        \n        await db\n          .insert(schema.userResidences)\n          .values({\n            userId: user.id,\n            residenceId: residence.id,\n            relationshipType: relationshipType,\n            startDate: new Date(Date.now() - faker.number.int({ min: 30, max: 365 * 3 }) * 24 * 60 * 60 * 1000),\n            isActive: true\n          });\n        \n        if (j === 0) {\n          primaryBuildingId = residence.buildingId;\n        }\n      }\n      \n      users.push({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        role: user.role,\n        buildingId: primaryBuildingId,\n        residenceId: assignedResidences[0].id\n      });\n      \n      createdResidents++;\n      \n      if (assignedResidences.length > 1) {\n        console.log(`     ${role} ${user.email} assigned to ${assignedResidences.length} residences`);\n      }\n    }\n    \n    console.log(`📊 Created ${users.length} users:`);\n    console.log(`   - ${users.filter(u => u.role.includes('manager')).length} managers`);\n    console.log(`   - ${users.filter(u => u.role.includes('resident')).length} residents`);\n    console.log(`   - ${users.filter(u => u.role.includes('tenant')).length} tenants`);\n    \n    return users;\n  } catch (error) {\n    console.error('❌ Failed to create users:', error);\n    throw error;\n  }\n}\n\n/**\n * Create bookings for reservable common spaces\n */\nasync function seedBookings(\n  commonSpaces: CreatedCommonSpace[],\n  users: CreatedUser[]\n): Promise<void> {\n  try {\n    console.log('📅 Creating bookings...');\n    \n    const reservableSpaces = commonSpaces.filter(space => space.isReservable);\n    let totalBookings = 0;\n    \n    for (const space of reservableSpaces) {\n      const spaceUsers = users.filter(user => user.buildingId === space.buildingId);\n      \n      if (spaceUsers.length === 0) continue;\n      \n      console.log(`   Creating ${BOOKINGS_PER_RESERVABLE_SPACE} bookings for ${space.name}`);\n      \n      for (let i = 0; i < BOOKINGS_PER_RESERVABLE_SPACE; i++) {\n        const user = spaceUsers[Math.floor(Math.random() * spaceUsers.length)];\n        const startDate = faker.date.between({\n          from: new Date(new Date().getFullYear(), 0, 1),\n          to: new Date(new Date().getFullYear(), 11, 31)\n        });\n        \n        const startTime = new Date(startDate);\n        startTime.setHours(faker.number.int({ min: 8, max: 20 }), 0, 0, 0);\n        \n        const endTime = new Date(startTime);\n        endTime.setHours(startTime.getHours() + faker.number.int({ min: 1, max: 4 }));\n        \n        await db\n          .insert(schema.bookings)\n          .values({\n            commonSpaceId: space.id,\n            userId: user.id,\n            startTime,\n            endTime,\n            status: Math.random() > 0.1 ? 'confirmed' : 'cancelled'\n          });\n        \n        totalBookings++;\n      }\n    }\n    \n    console.log(`📊 Created ${totalBookings} bookings across ${reservableSpaces.length} reservable spaces`);\n  } catch (error) {\n    console.error('❌ Failed to create bookings:', error);\n    throw error;\n  }\n}\n\n/**\n * Create maintenance demands (referred to as \"demands\" in schema)\n */\nasync function seedMaintenanceRequests(users: CreatedUser[]): Promise<void> {\n  try {\n    console.log('🔧 Creating maintenance demands (2-3 different categories per resident)...');\n    \n    const residents = users.filter(user => user.role.includes('resident') && user.residenceId);\n    let totalDemands = 0;\n    \n    for (const resident of residents) {\n      // Create 2-3 demands per resident with DIFFERENT categories\n      const demandsToCreate = faker.number.int({ min: 2, max: 3 });\n      \n      // Ensure different categories by shuffling and taking first N\n      const availableCategories = [...MAINTENANCE_CATEGORIES];\n      const selectedCategories = faker.helpers.arrayElements(availableCategories, demandsToCreate);\n      \n      for (let i = 0; i < demandsToCreate; i++) {\n        const category = selectedCategories[i];\n        const priority = faker.helpers.arrayElement(['low', 'medium', 'high', 'urgent']);\n        const demandType = faker.helpers.arrayElement(['maintenance', 'complaint', 'information']);\n        \n        // Create detailed description based on category\n        let description = '';\n        if (category === 'Plumbing') {\n          description = `${faker.helpers.arrayElement(['Leaky faucet', 'Clogged drain', 'Low water pressure', 'Running toilet'])} in ${faker.helpers.arrayElement(['kitchen', 'bathroom', 'laundry room'])}. ${faker.lorem.sentences(2)}`;\n        } else if (category === 'Electrical') {\n          description = `${faker.helpers.arrayElement(['Outlet not working', 'Light fixture issue', 'Circuit breaker trips', 'Switch malfunction'])} in ${faker.helpers.arrayElement(['bedroom', 'living room', 'kitchen', 'hallway'])}. ${faker.lorem.sentences(2)}`;\n        } else if (category === 'HVAC') {\n          description = `${faker.helpers.arrayElement(['Heating not working', 'Air conditioning issue', 'Ventilation problem', 'Thermostat malfunction'])}. Temperature control issues. ${faker.lorem.sentences(2)}`;\n        } else if (category === 'Structural') {\n          description = `${faker.helpers.arrayElement(['Crack in wall', 'Door not closing properly', 'Window seal issue', 'Floor creaking'])}. Structural concern that needs attention. ${faker.lorem.sentences(2)}`;\n        } else if (category === 'Appliances') {\n          description = `${faker.helpers.arrayElement(['Refrigerator', 'Dishwasher', 'Washer/Dryer', 'Stove/Oven'])} ${faker.helpers.arrayElement(['not working properly', 'making unusual noise', 'not heating/cooling', 'leaking'])}. ${faker.lorem.sentences(2)}`;\n        } else {\n          description = `General maintenance issue: ${faker.lorem.sentence()}. ${faker.lorem.sentences(2)}`;\n        }\n\n        // Insert the demand\n        const [demand] = await db\n          .insert(schema.demands)\n          .values({\n            submitterId: resident.id,\n            type: demandType as any,\n            description,\n            buildingId: resident.buildingId!,\n            residenceId: resident.residenceId,\n            status: faker.helpers.arrayElement(['submitted', 'under_review', 'in_progress', 'completed']) as any\n          })\n          .returning();\n        \n        // Add a comment to the demand\n        const managers = users.filter(user => user.role.includes('manager') && user.buildingId === resident.buildingId);\n        const randomManager = managers.length > 0 ? managers[Math.floor(Math.random() * managers.length)] : users.find(u => u.role.includes('manager'));\n        \n        if (randomManager) {\n          await db\n            .insert(schema.demandComments)\n            .values({\n              demandId: demand.id,\n              commenterId: randomManager.id,\n              commentText: `Thank you for reporting this ${demandType}. We have received your request and will address it accordingly. ${faker.lorem.sentence()}`,\n              commentType: 'response',\n              isInternal: false\n            });\n        }\n        \n        totalDemands++;\n      }\n    }\n    \n    console.log(`📊 Created ${totalDemands} maintenance demands for ${residents.length} residents`);\n    console.log(`   Average: ${Math.round(totalDemands / residents.length)} demands per resident (each with different categories)`);\n  } catch (error) {\n    console.error('❌ Failed to create maintenance demands:', error);\n    throw error;\n  }\n}\n\n/**\n * Create bills for buildings (previous year data)\n */\nasync function seedBills(buildings: CreatedBuilding[], users: CreatedUser[]): Promise<CreatedBill[]> {\n  try {\n    console.log('💰 Creating bills for previous year...');\n    \n    const currentYear = new Date().getFullYear();\n    const previousYear = currentYear - 1;\n    let totalBills = 0;\n    const createdBills: CreatedBill[] = [];\n    \n    // Get managers to assign as bill creators\n    const managers = users.filter(user => user.role.includes('manager'));\n    \n    for (const building of buildings) {\n      const buildingManagers = managers.filter(manager => manager.buildingId === building.id);\n      const billCreator = buildingManagers.length > 0 \n        ? buildingManagers[0] \n        : managers[0]; // Fallback to any manager\n      \n      if (!billCreator) {\n        console.warn(`   ⚠️ No manager found for building ${building.name}, skipping bills`);\n        continue;\n      }\n      \n      console.log(`   Creating bills for ${building.name} (${previousYear})`);\n      \n      // Create bills for each month of previous year - 1-2 bills per category per month\n      for (let month = 1; month <= 12; month++) {\n        // Create 1-2 bills per category for this month\n        for (const category of BILL_CATEGORIES) {\n          const billsToCreate = faker.number.int({ min: 1, max: 2 });\n          \n          for (let billIndex = 0; billIndex < billsToCreate; billIndex++) {\n            const amount = faker.number.float({ min: 100, max: 5000, fractionDigits: 2 });\n            const startDate = new Date(previousYear, month - 1, faker.number.int({ min: 1, max: 28 }));\n            const billSuffix = billsToCreate > 1 ? `-${billIndex + 1}` : '';\n            const billNumber = `${building.id.slice(0, 4).toUpperCase()}-${previousYear}-${month.toString().padStart(2, '0')}-${category.toUpperCase()}${billSuffix}`;\n            const title = `${category.charAt(0).toUpperCase() + category.slice(1)} ${billSuffix ? `(${billIndex + 1})` : ''} - ${faker.company.name()}`;\n            const vendor = faker.company.name();\n            const description = `Monthly ${category} service for ${faker.date.month()} ${previousYear}${billSuffix ? ` - Invoice ${billIndex + 1}` : ''}`;\n            \n            const [bill] = await db\n              .insert(schema.bills)\n              .values({\n                buildingId: building.id,\n                billNumber,\n                title,\n                description,\n                category,\n                vendor,\n                paymentType: Math.random() > 0.7 ? 'recurrent' : 'unique',\n                schedulePayment: Math.random() > 0.7 ? 'monthly' : null,\n                costs: [amount.toString()],\n                totalAmount: amount.toString(),\n                startDate,\n                status: ['paid', 'overdue', 'sent'][Math.floor(Math.random() * 3)] as any,\n                createdBy: billCreator.id,\n                autoGenerated: false\n              })\n              .returning();\n            \n            createdBills.push({\n              id: bill.id,\n              billNumber,\n              title,\n              category,\n              vendor,\n              totalAmount: amount.toString(),\n              buildingId: building.id,\n              description\n            });\n            \n            totalBills++;\n          }\n        }\n      }\n    }\n    \n    console.log(`📊 Created ${totalBills} bills across ${buildings.length} buildings for ${previousYear}`);\n    console.log(`   Average: ${Math.round(totalBills / buildings.length)} bills per building (1-2 per category per month)`);\n    return createdBills;\n  } catch (error) {\n    console.error('❌ Failed to create bills:', error);\n    throw error;\n  }\n}\n\n/**\n * Create demo disclosure notice for all documents\n */\nfunction createDemoDisclosure(): string {\n  return `*** DEMO NOTICE - FOR DEMONSTRATION PURPOSES ONLY ***\n\nThis document contains fictional data created for product demonstration.\nIn a real environment, this would contain actual uploaded content from property managers.\nAll information shown is generated automatically for testing and demo purposes.\n\nThis demo showcases the document management capabilities of Koveo Gestion.\n\n================================================================\n\n`;\n}\n\n/**\n * Ensure directory exists, create if not\n */\nfunction ensureDirectoryExists(dirPath: string): void {\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath, { recursive: true });\n  }\n}\n\n/**\n * Write file to disk and return file info\n */\nfunction writeDocumentFile(filePath: string, content: string): { fileSize: number } {\n  const fullPath = path.resolve(filePath);\n  const dir = path.dirname(fullPath);\n  ensureDirectoryExists(dir);\n  fs.writeFileSync(fullPath, content, 'utf8');\n  return { fileSize: content.length };\n}\n\n/**\n * Create documents for bills, residences, and buildings\n */\nasync function seedDocuments(\n  bills: CreatedBill[],\n  buildings: CreatedBuilding[],\n  residences: CreatedResidence[],\n  users: CreatedUser[]\n): Promise<void> {\n  try {\n    console.log('📄 Creating demo documents...');\n    \n    let totalDocuments = 0;\n    const demoDisclosure = createDemoDisclosure();\n    \n    // Create Bill Documents (attached to bills) - Create for ALL bills in organization\n    console.log('   Creating bill documents...');\n    \n    // Get ALL bills for this organization (not just newly created ones)\n    const allOrgBills = await db\n      .select({\n        id: schema.bills.id,\n        billNumber: schema.bills.billNumber,\n        title: schema.bills.title,\n        category: schema.bills.category,\n        vendor: schema.bills.vendor,\n        totalAmount: schema.bills.totalAmount,\n        description: schema.bills.description,\n        buildingId: schema.bills.buildingId\n      })\n      .from(schema.bills)\n      .innerJoin(schema.buildings, eq(schema.bills.buildingId, schema.buildings.id))\n      .where(eq(schema.buildings.organizationId, buildings[0].organizationId));\n\n    console.log(`   Found ${allOrgBills.length} total bills for organization, creating documents for bills without them...`);\n    \n    const billsWithDocs = allOrgBills.map(bill => ({\n      id: bill.id,\n      billNumber: bill.billNumber,\n      title: bill.title,\n      category: bill.category,\n      vendor: bill.vendor,\n      totalAmount: bill.totalAmount,\n      description: bill.description,\n      buildingId: bill.buildingId\n    }));\n    \n    for (const bill of billsWithDocs) {\n      // Check if this bill already has a document\n      const existingDoc = await db\n        .select({ id: schema.documents.id })\n        .from(schema.documents)\n        .where(and(\n          eq(schema.documents.attachedToId, bill.id),\n          eq(schema.documents.attachedToType, 'bill')\n        ))\n        .limit(1);\n      \n      if (existingDoc.length > 0) {\n        // Skip bills that already have documents\n        continue;\n      }\n      \n      // Find a manager for this building, with fallback to any manager\n      let billCreator = users.find(user => user.buildingId === bill.buildingId && user.role.includes('manager'));\n      if (!billCreator) {\n        // Fallback: use any available manager\n        billCreator = users.find(user => user.role.includes('manager'));\n      }\n      if (!billCreator) {\n        console.warn(`   ⚠️ No manager found for bill ${bill.billNumber}, skipping document creation`);\n        continue;\n      }\n      \n      // Create only 1 document per bill (either invoice OR receipt)\n      const isInvoice = Math.random() > 0.5;\n      const docType = isInvoice ? 'invoice' : 'receipt';\n      \n      let documentContent = `${demoDisclosure}${docType.toUpperCase()} DOCUMENT\n\nBill Number: ${bill.billNumber}\nTitle: ${bill.title}\nVendor: ${bill.vendor}\nCategory: ${bill.category.charAt(0).toUpperCase() + bill.category.slice(1)}\nTotal Amount: $${bill.totalAmount}\nDescription: ${bill.description}\n\n`;\n\n      if (isInvoice) {\n        documentContent += `This invoice document would normally be uploaded by the property manager\nas a PDF or image file, but for this demo we're showing it as text content.\n\nPayment Terms: Net 30 days\nInvoice Date: ${faker.date.recent().toLocaleDateString()}\nDue Date: ${faker.date.future().toLocaleDateString()}\n\nService Details:\n- ${faker.lorem.sentence()}\n- ${faker.lorem.sentence()}\n\nThank you for your business!\n${bill.vendor}`;\n      } else {\n        documentContent += `Payment Amount: $${bill.totalAmount}\nPayment Date: ${faker.date.recent().toLocaleDateString()}\nPayment Method: ${faker.helpers.arrayElement(['Electronic Transfer', 'Check', 'ACH Transfer'])}\nReference Number: PAY-${faker.string.alphanumeric(8).toUpperCase()}\n\nThis payment has been processed successfully.\nBuilding Management Office`;\n      }\n\n      const filePath = `bills/${docType}-${bill.billNumber.toLowerCase()}-${bill.id.slice(0, 8)}.txt`;\n      const { fileSize } = writeDocumentFile(filePath, documentContent);\n      \n      // Map bill category to appropriate document type\n      const documentTypeMapping: { [key: string]: string } = {\n        'utilities': 'utilities',\n        'maintenance': 'maintenance', \n        'insurance': 'insurance',\n        'cleaning': 'maintenance',\n        'security': 'other',\n        'landscaping': 'maintenance',\n        'professional_services': 'other',\n        'administration': 'other',\n        'supplies': 'other'\n      };\n      const billDocumentType = documentTypeMapping[bill.category] || 'other';\n\n      await db\n        .insert(schema.documents)\n        .values({\n          name: `${isInvoice ? 'Invoice' : 'Receipt'} - ${bill.billNumber}`,\n          description: `${isInvoice ? 'Invoice' : 'Payment receipt'} for ${bill.title}`,\n          documentType: billDocumentType,\n          filePath,\n          fileName: `${docType}-${bill.billNumber}.txt`,\n          fileSize,\n          mimeType: 'text/plain',\n          isVisibleToTenants: false, // Will be configured later based on tenant assignments\n          buildingId: bill.buildingId,\n          uploadedById: billCreator.id,\n          attachedToType: 'bill',\n          attachedToId: bill.id\n        });\n      \n      totalDocuments++;\n    }\n    \n    // Create Residence Documents - 1-2 documents per category for EACH residence\n    console.log('   Creating residence documents...');\n    const residenceDocumentTypes = [\n      { type: 'lease', name: 'Lease Agreement', description: 'Rental lease agreement' },\n      { type: 'inspection', name: 'Inspection Report', description: 'Unit inspection report' },\n      { type: 'maintenance', name: 'Maintenance Log', description: 'Maintenance history log' },\n      { type: 'financial', name: 'Financial Document', description: 'Tenant financial record or payment history' }\n    ];\n    \n    // Create 1-2 documents per category for EACH residence\n    for (const residence of residences) {\n      for (const docType of residenceDocumentTypes) {\n        const docsToCreate = faker.number.int({ min: 1, max: 2 });\n        \n        for (let docIndex = 0; docIndex < docsToCreate; docIndex++) {\n          const building = buildings.find(b => b.id === residence.buildingId);\n          const manager = users.find(user => user.buildingId === residence.buildingId && user.role.includes('manager'));\n          if (!building || !manager) continue;\n          \n          const docSuffix = docsToCreate > 1 ? `-${docIndex + 1}` : '';\n          let documentContent = `${demoDisclosure}${docType.name.toUpperCase()}\n\nUnit: ${residence.unitNumber}\nBuilding: ${building.name}\nAddress: ${faker.location.streetAddress()}\nDocument ${docIndex + 1} of ${docsToCreate}\n\n`;\n        \n          if (docType.type === 'lease') {\n            documentContent += `LEASE AGREEMENT\n\nTenant Information:\n- Unit Number: ${residence.unitNumber}\n- Lease Start Date: ${faker.date.past().toLocaleDateString()}\n- Lease End Date: ${faker.date.future().toLocaleDateString()}\n- Monthly Rent: $${faker.number.int({ min: 800, max: 2500 })}\n- Security Deposit: $${faker.number.int({ min: 800, max: 2500 })}\n\nTerms and Conditions:\n- ${faker.lorem.sentence()}\n- ${faker.lorem.sentence()}\n\nLandlord: ${building.name} Management\nTenant Signature: ____________________\nDate: ${faker.date.recent().toLocaleDateString()}`;\n          } else if (docType.type === 'inspection') {\n            documentContent += `INSPECTION REPORT\n\nInspection Date: ${faker.date.recent().toLocaleDateString()}\nInspector: ${faker.person.fullName()}\n\nInspection Results:\n+ Electrical systems - Good condition\n+ Plumbing - Good condition  \n+ Heating/Cooling - Good condition\n* Minor paint touch-up needed in bedroom\n+ Windows and doors - Good condition\n+ Smoke detectors - Working properly\n\nOverall Rating: ${faker.helpers.arrayElement(['Excellent', 'Good', 'Fair'])}\n\nNotes:\n${faker.lorem.paragraph()}\n\nInspector Signature: ____________________`;\n          } else if (docType.type === 'financial') {\n            const financialType = faker.helpers.arrayElement(['payment_history', 'deposit_record', 'tenant_financial']);\n            \n            if (financialType === 'payment_history') {\n              documentContent += `TENANT PAYMENT HISTORY\n\nUnit: ${residence.unitNumber}\nTenant: ${faker.person.fullName()}\nAccount Period: ${faker.date.past({ years: 1 }).toLocaleDateString()} to Present\n\nPayment Summary:\nMonthly Rent: $${faker.number.int({ min: 1200, max: 2500 })}\nSecurity Deposit: $${faker.number.int({ min: 1200, max: 2500 })}\nPayment Method: ${faker.helpers.arrayElement(['Electronic Transfer', 'Check', 'Online Payment'])}\n\nRecent Payments:\n- ${faker.date.recent().toLocaleDateString()}: Rent Payment - $${faker.number.int({ min: 1200, max: 2500 })} - On Time\n- ${faker.date.recent({ days: 30 }).toLocaleDateString()}: Rent Payment - $${faker.number.int({ min: 1200, max: 2500 })} - On Time\n- ${faker.date.recent({ days: 60 }).toLocaleDateString()}: Rent Payment - $${faker.number.int({ min: 1200, max: 2500 })} - On Time\n\nPayment Status: Current\nOutstanding Balance: $0.00\nCredit Score: ${faker.number.int({ min: 650, max: 850 })}`;\n            } else if (financialType === 'deposit_record') {\n              documentContent += `SECURITY DEPOSIT RECORD\n\nUnit: ${residence.unitNumber}\nTenant: ${faker.person.fullName()}\nDeposit Date: ${faker.date.past().toLocaleDateString()}\n\nDeposit Details:\nSecurity Deposit Amount: $${faker.number.int({ min: 1200, max: 2500 })}\nPet Deposit: $${faker.number.int({ min: 0, max: 500 })}\nKey Deposit: $${faker.number.int({ min: 50, max: 150 })}\nTotal Deposit: $${faker.number.int({ min: 1250, max: 3150 })}\n\nBank Information:\nHeld at: ${faker.company.name()} Bank\nAccount Number: DEP-${faker.string.alphanumeric(8).toUpperCase()}\nInterest Rate: ${faker.number.float({ min: 0.5, max: 2.5, fractionDigits: 2 })}%\n\nDeposit Status: Held in Trust Account\nExpected Return Date: End of Lease Term`;\n            } else {\n              documentContent += `TENANT FINANCIAL VERIFICATION\n\nUnit: ${residence.unitNumber}\nTenant: ${faker.person.fullName()}\nVerification Date: ${faker.date.recent().toLocaleDateString()}\n\nIncome Verification:\nMonthly Income: $${faker.number.int({ min: 4000, max: 8000 })}\nEmployment: ${faker.company.name()}\nPosition: ${faker.person.jobTitle()}\nEmployment Duration: ${faker.number.int({ min: 6, max: 60 })} months\n\nReferences:\nPrevious Landlord: ${faker.person.fullName()}\nContact: ${generateQuebecPhone()}\nReference Status: Positive\n\nCredit Information:\nCredit Score: ${faker.number.int({ min: 650, max: 850 })}\nDebt-to-Income Ratio: ${faker.number.int({ min: 15, max: 35 })}%\nRental History: Excellent`;\n            }\n          } else {\n            documentContent += `MAINTENANCE LOG\n\nMaintenance History for Unit ${residence.unitNumber}:\n\n${faker.date.past().toLocaleDateString()} - ${faker.helpers.arrayElement(['Plumbing repair', 'Electrical work', 'HVAC maintenance'])}\nStatus: Completed\nCost: $${faker.number.int({ min: 50, max: 500 })}\n\n${faker.date.recent().toLocaleDateString()} - ${faker.helpers.arrayElement(['Annual inspection', 'Filter replacement', 'Light fixture repair'])}\nStatus: In Progress\nEstimated Cost: $${faker.number.int({ min: 50, max: 500 })}\n\nNext Scheduled Maintenance: ${faker.date.future().toLocaleDateString()}`;\n          }\n          \n          const fileName = `${docType.type}-${residence.unitNumber.toLowerCase()}${docSuffix}.txt`;\n          const filePath = `residences/${residence.id}/${fileName}`;\n          const { fileSize } = writeDocumentFile(filePath, documentContent);\n          \n          const [createdResidenceDoc] = await db\n            .insert(schema.documents)\n            .values({\n              name: `${docType.name} - Unit ${residence.unitNumber}${docSuffix}`,\n              description: `${docType.description} for unit ${residence.unitNumber}`,\n              documentType: docType.type,\n              filePath,\n              fileName,\n              fileSize,\n              mimeType: 'text/plain',\n              isVisibleToTenants: false, // Will be configured later based on tenant assignments\n              residenceId: residence.id,\n              buildingId: residence.buildingId,\n              uploadedById: manager.id\n            })\n            .returning();\n\n          console.log(`     ✓ Created residence document: ${createdResidenceDoc.id} - ${createdResidenceDoc.name} (${createdResidenceDoc.filePath})`);\n          totalDocuments++;\n        }\n      }\n    }\n    \n    // Create Building Documents - 1-2 per category for EACH building  \n    console.log('   Creating building documents (1-2 per category for each building)...');\n    const buildingDocumentTypes = [\n      { type: 'insurance', name: 'Insurance Certificate', description: 'Building insurance certificate' },\n      { type: 'permits', name: 'Building Permit', description: 'Construction/renovation permit' },\n      { type: 'meeting_minutes', name: 'Board Meeting Minutes', description: 'Monthly board meeting minutes' },\n      { type: 'contracts', name: 'Service Contract', description: 'Maintenance service contract' },\n      { type: 'financial', name: 'Financial Document', description: 'Loan agreement, bank statement, or financial report' }\n    ];\n    \n    // Create 1-2 documents per category for EACH building\n    for (const building of buildings) {\n      const manager = users.find(user => user.buildingId === building.id && user.role.includes('manager'));\n      if (!manager) {\n        console.warn(`   ⚠️ No manager found for building ${building.name}, skipping building documents`);\n        continue;\n      }\n      \n      console.log(`     Creating documents for building: ${building.name}`);\n      \n      for (const docType of buildingDocumentTypes) {\n        const docsToCreate = faker.number.int({ min: 1, max: 2 });\n        \n        for (let docIndex = 0; docIndex < docsToCreate; docIndex++) {\n          const docSuffix = docsToCreate > 1 ? `-${docIndex + 1}` : '';\n        \n          let documentContent = `${demoDisclosure}${docType.name.toUpperCase()}${docSuffix ? ` (${docIndex + 1})` : ''}\n\nBuilding: ${building.name}\nOrganization: ${building.organizationId}\nDocument Date: ${faker.date.recent().toLocaleDateString()}\nDocument ${docIndex + 1} of ${docsToCreate}\n\n`;\n        \n        if (docType.type === 'insurance') {\n          documentContent += `INSURANCE CERTIFICATE\n\nPolicy Number: INS-${faker.string.alphanumeric(10).toUpperCase()}\nInsurance Company: ${faker.company.name()} Insurance\nCoverage Type: Commercial Property Insurance\nCoverage Amount: $${faker.number.int({ min: 1000000, max: 5000000 }).toLocaleString()}\nPolicy Period: ${faker.date.past().toLocaleDateString()} to ${faker.date.future().toLocaleDateString()}\n\nCoverage Details:\n- Property Damage: Covered\n- Liability: Covered  \n- Natural Disasters: Covered\n- Equipment Breakdown: Covered\n\nContact Information:\nAgent: ${faker.person.fullName()}\nPhone: ${generateQuebecPhone()}\nEmail: ${faker.internet.email()}`;\n        } else if (docType.type === 'permits') {\n          documentContent += `BUILDING PERMIT\n\nPermit Number: PER-${faker.string.alphanumeric(8).toUpperCase()}\nPermit Type: ${faker.helpers.arrayElement(['Renovation', 'Electrical Work', 'Plumbing', 'HVAC Installation'])}\nIssue Date: ${faker.date.past().toLocaleDateString()}\nExpiry Date: ${faker.date.future().toLocaleDateString()}\nContractor: ${faker.company.name()}\n\nWork Description:\n${faker.lorem.paragraph()}\n\nInspection Schedule:\n- Initial Inspection: ${faker.date.recent().toLocaleDateString()}\n- Progress Inspection: ${faker.date.soon().toLocaleDateString()}\n- Final Inspection: ${faker.date.future().toLocaleDateString()}\n\nApproved by: City Planning Department\nPermit Fee: $${faker.number.int({ min: 100, max: 1000 })}`;\n        } else if (docType.type === 'meeting_minutes') {\n          documentContent += `BOARD MEETING MINUTES\n\nMeeting Date: ${faker.date.recent().toLocaleDateString()}\nMeeting Time: ${faker.number.int({ min: 18, max: 20 })}:00\nLocation: ${building.name} Community Room\n\nAttendees:\n- ${faker.person.fullName()} (Board President)\n- ${faker.person.fullName()} (Treasurer)  \n- ${faker.person.fullName()} (Secretary)\n- ${faker.person.fullName()} (Property Manager)\n\nAgenda Items:\n1. Budget Review - ${faker.lorem.sentence()}\n2. Maintenance Updates - ${faker.lorem.sentence()}\n3. New Policies - ${faker.lorem.sentence()}\n\nAction Items:\n- ${faker.lorem.sentence()}\n- ${faker.lorem.sentence()}\n\nNext Meeting: ${faker.date.future().toLocaleDateString()}`;\n        } else if (docType.type === 'financial') {\n          const financialDocType = faker.helpers.arrayElement(['loan', 'bank_statement', 'financial_report']);\n          \n          if (financialDocType === 'loan') {\n            documentContent += `BUILDING LOAN AGREEMENT\n\nLoan ID: LOAN-${faker.string.alphanumeric(10).toUpperCase()}\nLender: ${faker.company.name()} Bank\nBorrower: ${building.name} Building Corporation\nLoan Amount: $${faker.number.int({ min: 500000, max: 2500000 }).toLocaleString()}\nInterest Rate: ${faker.number.float({ min: 3.5, max: 6.5, fractionDigits: 2 })}%\nLoan Term: ${faker.number.int({ min: 15, max: 30 })} years\nMonthly Payment: $${faker.number.int({ min: 3000, max: 8500 }).toLocaleString()}\n\nLoan Purpose: Building acquisition and capital improvements\nCollateral: Building property and improvements\nLoan Date: ${faker.date.past({ years: 2 }).toLocaleDateString()}\n\nFinancial Terms:\n- Fixed rate mortgage\n- No prepayment penalties\n- Annual financial reporting required\n- Minimum debt service coverage ratio: 1.2x\n\nLender Representative: ${faker.person.fullName()}\nBorrower Representative: ${faker.person.fullName()}`;\n          } else if (financialDocType === 'bank_statement') {\n            documentContent += `BANK STATEMENT\n\nAccount Holder: ${building.name} Building Corporation\nBank: ${faker.company.name()} Bank\nAccount Number: ****${faker.string.numeric(4)}\nStatement Period: ${faker.date.recent({ days: 30 }).toLocaleDateString()} to ${faker.date.recent().toLocaleDateString()}\n\nBeginning Balance: $${faker.number.int({ min: 25000, max: 150000 }).toLocaleString()}\nTotal Deposits: $${faker.number.int({ min: 15000, max: 45000 }).toLocaleString()}\nTotal Withdrawals: $${faker.number.int({ min: 12000, max: 35000 }).toLocaleString()}\nEnding Balance: $${faker.number.int({ min: 30000, max: 160000 }).toLocaleString()}\n\nRecent Transactions:\n- ${faker.date.recent().toLocaleDateString()}: Maintenance Reserve Transfer - $${faker.number.int({ min: 2000, max: 8000 }).toLocaleString()}\n- ${faker.date.recent().toLocaleDateString()}: Monthly Fees Collection - +$${faker.number.int({ min: 8000, max: 25000 }).toLocaleString()}\n- ${faker.date.recent().toLocaleDateString()}: Insurance Premium - $${faker.number.int({ min: 1500, max: 4500 }).toLocaleString()}\n\nContact: ${generateQuebecPhone()}`;\n          } else {\n            documentContent += `ANNUAL FINANCIAL REPORT\n\nBuilding: ${building.name}\nReport Period: ${faker.date.past({ years: 1 }).getFullYear()}\nPrepared by: ${faker.person.fullName()}, Property Manager\n\nFinancial Summary:\nTotal Revenue: $${faker.number.int({ min: 180000, max: 450000 }).toLocaleString()}\n- Monthly Fees: $${faker.number.int({ min: 150000, max: 380000 }).toLocaleString()}\n- Special Assessments: $${faker.number.int({ min: 10000, max: 50000 }).toLocaleString()}\n- Other Income: $${faker.number.int({ min: 5000, max: 20000 }).toLocaleString()}\n\nTotal Expenses: $${faker.number.int({ min: 120000, max: 300000 }).toLocaleString()}\n- Maintenance: $${faker.number.int({ min: 40000, max: 100000 }).toLocaleString()}\n- Insurance: $${faker.number.int({ min: 20000, max: 50000 }).toLocaleString()}\n- Utilities: $${faker.number.int({ min: 25000, max: 60000 }).toLocaleString()}\n- Professional Services: $${faker.number.int({ min: 15000, max: 35000 }).toLocaleString()}\n- Administrative: $${faker.number.int({ min: 10000, max: 25000 }).toLocaleString()}\n\nNet Income: $${faker.number.int({ min: 50000, max: 150000 }).toLocaleString()}\nReserve Fund Balance: $${faker.number.int({ min: 75000, max: 200000 }).toLocaleString()}`;\n          }\n        } else {\n          documentContent += `SERVICE CONTRACT\n\nContract Number: CON-${faker.string.alphanumeric(8).toUpperCase()}\nService Provider: ${faker.company.name()}\nService Type: ${faker.helpers.arrayElement(['Cleaning Services', 'Landscaping', 'Security', 'Maintenance'])}\nContract Period: ${faker.date.past().toLocaleDateString()} to ${faker.date.future().toLocaleDateString()}\nMonthly Cost: $${faker.number.int({ min: 500, max: 3000 })}\n\nService Details:\n${faker.lorem.paragraph()}\n\nContact Information:\nManager: ${faker.person.fullName()}\nPhone: ${generateQuebecPhone()}\nEmergency Contact: ${generateQuebecPhone()}\n\nTerms and Conditions:\n- ${faker.lorem.sentence()}\n- ${faker.lorem.sentence()}`;\n          }\n          \n          const fileName = `${docType.type}-${building.name.replace(/\\s+/g, '-').toLowerCase()}${docSuffix}.txt`;\n          const filePath = `buildings/${building.id}/${fileName}`;\n          const { fileSize } = writeDocumentFile(filePath, documentContent);\n          \n          const [createdBuildingDoc] = await db\n            .insert(schema.documents)\n            .values({\n              name: `${docType.name}${docSuffix} - ${building.name}`,\n              description: `${docType.description} for ${building.name}${docSuffix ? ` (Document ${docIndex + 1})` : ''}`,\n              documentType: docType.type,\n              filePath,\n              fileName,\n              fileSize,\n              mimeType: 'text/plain',\n              isVisibleToTenants: false, // Will be configured later based on tenant assignments\n              buildingId: building.id,\n              uploadedById: manager.id\n            })\n            .returning();\n\n          console.log(`     ✓ Created building document: ${createdBuildingDoc.id} - ${createdBuildingDoc.name} (${createdBuildingDoc.filePath})`);\n          totalDocuments++;\n        }\n      }\n    }\n    \n    console.log(`📊 Created ${totalDocuments} demo documents (files written to disk):`);\n    console.log(`   - Bill documents: ~${billsWithDocs.length} (invoice & receipt for ALL bills)`);\n    console.log(`   - Residence documents: ${residences.length * residenceDocumentTypes.length * 1}-${residences.length * residenceDocumentTypes.length * 2} (1-2 per category for EACH residence)`);\n    console.log(`   - Building documents: ${buildings.length * buildingDocumentTypes.length * 1}-${buildings.length * buildingDocumentTypes.length * 2} (1-2 per category for EACH building)`);\n    \n  } catch (error) {\n    console.error('❌ Failed to create documents:', error);\n    throw error;\n  }\n}\n\n/**\n * Configure document access for tenants - only for buildings/residences that actually have tenants\n */\nasync function configureTenantDocumentAccess(users: CreatedUser[]) {\n  try {\n    console.log('   Making select documents accessible to tenants...');\n    \n    // Find all tenants\n    const tenants = users.filter(user => user.role === 'demo_tenant');\n    console.log(`   Found ${tenants.length} tenant users to configure access for`);\n    \n    if (tenants.length === 0) {\n      console.log('   No tenants found - skipping tenant document access configuration');\n      return;\n    }\n    \n    // Get buildings and residences that have tenants\n    const tenantBuildingIds = new Set<string>();\n    const tenantResidenceIds = new Set<string>();\n    \n    for (const tenant of tenants) {\n      // Get tenant's residence assignments\n      const tenantResidences = await db\n        .select({\n          residenceId: schema.userResidences.residenceId\n        })\n        .from(schema.userResidences)\n        .where(eq(schema.userResidences.userId, tenant.id));\n      \n      for (const ur of tenantResidences) {\n        tenantResidenceIds.add(ur.residenceId);\n        \n        // Get the building ID for this residence\n        const residence = await db\n          .select({\n            buildingId: schema.residences.buildingId\n          })\n          .from(schema.residences)\n          .where(eq(schema.residences.id, ur.residenceId))\n          .limit(1);\n        \n        if (residence[0]) {\n          tenantBuildingIds.add(residence[0].buildingId);\n        }\n      }\n    }\n    \n    console.log(`   Buildings with tenants: ${tenantBuildingIds.size}`);\n    console.log(`   Residences with tenants: ${tenantResidenceIds.size}`);\n    \n    // Update documents to be visible to tenants in buildings/residences with tenants\n    let updatedCount = 0;\n    \n    // Building-level documents that tenants should see\n    const buildingDocTypes = ['meeting_minutes', 'permits'];\n    for (const buildingId of tenantBuildingIds) {\n      const result = await db\n        .update(schema.documents)\n        .set({ isVisibleToTenants: true })\n        .where(\n          and(\n            eq(schema.documents.buildingId, buildingId),\n            schema.documents.documentType ? sql`${schema.documents.documentType} = ANY(${buildingDocTypes})` : sql`1=0`\n          )\n        );\n      updatedCount += result.rowCount || 0;\n    }\n    \n    // Residence-level documents that tenants should see\n    const residenceDocTypes = ['lease', 'inspection'];\n    for (const residenceId of tenantResidenceIds) {\n      const result = await db\n        .update(schema.documents)\n        .set({ isVisibleToTenants: true })\n        .where(\n          and(\n            eq(schema.documents.residenceId, residenceId),\n            schema.documents.documentType ? sql`${schema.documents.documentType} = ANY(${residenceDocTypes})` : sql`1=0`\n          )\n        );\n      updatedCount += result.rowCount || 0;\n    }\n    \n    // Bill receipts (but not invoices) for buildings with tenants\n    for (const buildingId of tenantBuildingIds) {\n      const result = await db\n        .update(schema.documents)\n        .set({ isVisibleToTenants: true })\n        .where(\n          and(\n            eq(schema.documents.buildingId, buildingId),\n            eq(schema.documents.attachedToType, 'bill'),\n            schema.documents.name ? sql`${schema.documents.name} LIKE 'Receipt%'` : sql`1=0`\n          )\n        );\n      updatedCount += result.rowCount || 0;\n    }\n    \n    console.log(`   ✅ Updated ${updatedCount} documents to be visible to tenants`);\n    console.log(`   📄 Document types accessible to tenants: meeting minutes, permits, leases, inspections, receipts`);\n    \n  } catch (error) {\n    console.error('❌ Failed to configure tenant document access:', error);\n    throw error;\n  }\n}\n\n/**\n * Main execution function\n */\nasync function main() {\n  try {\n    console.log('🚀 Starting Koveo Gestion Demo Environment Creation');\n    console.log('='.repeat(60));\n    \n    // Parse CLI arguments\n    const args = parseArguments();\n    \n    // Initialize database connection\n    await initializeDatabase(args.database);\n    \n    console.log(`📋 Configuration:`);\n    console.log(`   Organization Type: ${args.type}`);\n    console.log(`   Organization Name: \"${args.name}\"`);\n    console.log(`   Target Database: ${args.database === 'prod' ? 'PRODUCTION (DATABASE_URL_KOVEO)' : 'DEVELOPMENT (DATABASE_URL)'}`);\n    console.log('');\n    \n    // Step 1: Upsert Organization\n    console.log('📁 Step 1: Upsert Organization');\n    const organization = await upsertOrganization(args.name, args.type);\n    console.log('');\n    \n    // Step 2: Create Buildings\n    console.log('🏢 Step 2: Create Buildings');\n    const buildingResult = await seedBuildings(organization.id);\n    const buildings = buildingResult.buildings;\n    const newBuildingsCreated = buildingResult.newBuildingsCreated;\n    console.log('');\n    \n    // Step 3: Create Residences (only for new buildings if organization already has 5 buildings)\n    console.log('🏠 Step 3: Create Residences');\n    const residences = await seedResidences(buildings, newBuildingsCreated === 0);\n    console.log('');\n    \n    // Only create additional data if we have new buildings or this is the first run\n    let users: CreatedUser[] = [];\n    let bills: any[] = [];\n    \n    if (newBuildingsCreated > 0 || buildings.length <= 5) {\n      // Step 4: Create Common Spaces\n      console.log('🏛️ Step 4: Create Common Spaces');\n      const commonSpaces = await seedCommonSpaces(buildings);\n      console.log('');\n      \n      // Step 5: Create Users\n      console.log('👥 Step 5: Create Users');\n      users = await seedUsers(args.type, organization.id, buildings, residences);\n      console.log('');\n      \n      // Step 6: Create Bookings\n      console.log('📅 Step 6: Create Bookings');\n      await seedBookings(commonSpaces, users);\n      console.log('');\n      \n      // Step 7: Create Maintenance Demands\n      console.log('🔧 Step 7: Create Maintenance Demands');\n      await seedMaintenanceRequests(users);\n      console.log('');\n      \n      // Step 8: Create Bills\n      console.log('💰 Step 8: Create Bills');\n      bills = await seedBills(buildings, users);\n      console.log('');\n      \n      // Step 9: Create Documents\n      console.log('📄 Step 9: Create Documents');\n      await seedDocuments(bills, buildings, residences, users);\n      console.log('');\n      \n      // Step 10: Make documents accessible to tenants in buildings/residences with tenants\n      console.log('📋 Step 10: Configure Tenant Document Access');\n      await configureTenantDocumentAccess(users);\n      console.log('');\n    } else {\n      console.log('🏢 Organization already has complete buildings and data. Skipping additional data creation.');\n      console.log('📄 Only updating documents for existing bills...');\n      \n      // Get existing bills for this organization\n      const existingBills = await db\n        .select({\n          id: schema.bills.id,\n          billNumber: schema.bills.billNumber,\n          title: schema.bills.title,\n          category: schema.bills.category,\n          vendor: schema.bills.vendor,\n          totalAmount: schema.bills.totalAmount,\n          description: schema.bills.description,\n          buildingId: schema.bills.buildingId\n        })\n        .from(schema.bills)\n        .innerJoin(schema.buildings, eq(schema.bills.buildingId, schema.buildings.id))\n        .where(eq(schema.buildings.organizationId, organization.id));\n      \n      // Get existing users for this organization (simplified approach)\n      const allUsers = await db\n        .select({\n          id: schema.users.id,\n          email: schema.users.email,\n          role: schema.users.role\n        })\n        .from(schema.users)\n        .where(eq(schema.users.isActive, true));\n      \n      const existingUsers = allUsers.filter(user => user.role.includes('manager'));\n      \n      console.log(`   Found ${existingUsers.length} managers to create bill documents...`);\n      \n      console.log(`   Found ${existingBills.length} existing bills to process for documents...`);\n      \n      await seedDocuments(existingBills, buildings, residences, existingUsers.map(u => ({\n        id: u.id,\n        email: u.email,\n        role: u.role,\n        buildingId: null // Not needed for document creation\n      })));\n      console.log('');\n    }\n    \n    // Summary\n    console.log('🎉 Demo environment created successfully!');\n    console.log('='.repeat(60));\n    console.log(`✅ Organization: ${organization.name} (${organization.type})`);\n    console.log(`✅ Buildings: ${buildings.length}`);\n    console.log(`✅ Residences: ${residences.length}`);\n    console.log(`✅ Common Spaces: Created for each building`);\n    console.log(`✅ Users: ${users.length}`);\n    console.log(`✅ Managers: ${users.filter(u => u.role.includes('manager')).length}`);\n    console.log(`✅ Residents: ${users.filter(u => u.role.includes('resident')).length}`);\n    console.log(`✅ Bills: ${bills.length} (with attached invoice & receipt documents)`);\n    console.log('✅ Documents: Comprehensive .txt documents with demo disclosures');\n    console.log('✅ Bookings and maintenance demands (2-3 different categories per resident) created successfully');\n    console.log('');\n    console.log(`🚀 Demo environment for \"${args.name}\" is ready for use!`);\n    console.log('📋 All documents include demo disclosure notices for demonstration purposes');\n    \n  } catch (error) {\n    console.error('❌ Demo environment creation failed:', error);\n    process.exit(1);\n  } finally {\n    // Close database connection\n    await closeConnection();\n  }\n}\n\n// Execute the script\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error);\n}\n\nexport default main;"],"version":3}