88c0c9e08ddb5006bb75a31c936ad5b7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const bcrypt = __importStar(require("bcryptjs"));
/**
 * Sophie Résidente - Residence Assignment Integration Test
 *
 * This test specifically addresses the reported issue where Sophie Résidente
 * (or similar demo resident users) cannot see their assigned residences.
 *
 * It provides comprehensive validation of:
 * - Database setup and data integrity
 * - API endpoint simulation for residence access
 * - Authentication flow validation
 * - Error handling and debugging information
 * - Real-world scenario testing
 */
(0, globals_1.describe)('Sophie Résidente - Residence Assignment Integration', () => {
    // Test setup mimicking the real Sophie Résidente scenario
    const sophieTestData = {
        organization: {
            id: 'sophie-test-org',
            name: 'Sophie Test Organization',
            type: 'management_company',
            address: '123 Sophie Test Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
            isActive: true
        },
        building: {
            id: 'sophie-test-building',
            name: 'Sophie Test Building',
            address: '123 Sophie Building Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
            buildingType: 'condo',
            totalUnits: 3,
            totalFloors: 1,
            isActive: true
        },
        residence: {
            id: 'sophie-test-residence',
            unitNumber: '101',
            floor: 1,
            isActive: true
        },
        user: {
            id: 'sophie-residente-test-user',
            username: 'sophie.residente.test',
            email: 'sophie.residente.test@koveo-gestion.com',
            password: 'SophiePass123!',
            firstName: 'Sophie',
            lastName: 'Résidente',
            role: 'demo_resident',
            language: 'fr',
            isActive: true
        }
    };
    let testUserIds = [];
    let testOrgIds = [];
    let testBuildingIds = [];
    let testResidenceIds = [];
    (0, globals_1.beforeAll)(async () => {
        console.log('🏠 Setting up Sophie Résidente test scenario...');
        // Cleanup any existing test data
        await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieTestData.user.id)).catch(() => { });
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email)).catch(() => { });
        await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.eq)(schema_1.residences.id, sophieTestData.residence.id)).catch(() => { });
        await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, sophieTestData.building.id)).catch(() => { });
        await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, sophieTestData.organization.id)).catch(() => { });
        // Create test organization
        await db_1.db.insert(schema_1.organizations).values({
            ...sophieTestData.organization,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        testOrgIds.push(sophieTestData.organization.id);
        // Create test building
        await db_1.db.insert(schema_1.buildings).values({
            ...sophieTestData.building,
            organizationId: sophieTestData.organization.id,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        testBuildingIds.push(sophieTestData.building.id);
        // Create test residence
        await db_1.db.insert(schema_1.residences).values({
            ...sophieTestData.residence,
            buildingId: sophieTestData.building.id,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        testResidenceIds.push(sophieTestData.residence.id);
        // Create Sophie user
        await db_1.db.insert(schema_1.users).values({
            ...sophieTestData.user,
            password: await bcrypt.hash(sophieTestData.user.password, 12),
            createdAt: new Date(),
            updatedAt: new Date()
        });
        testUserIds.push(sophieTestData.user.id);
        console.log('✅ Sophie Résidente test setup complete');
    });
    (0, globals_1.afterAll)(async () => {
        console.log('🧹 Cleaning up Sophie Résidente test data...');
        // Clean up in reverse order
        await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.inArray)(schema_1.userResidences.userId, testUserIds)).catch(() => { });
        await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.inArray)(schema_1.userOrganizations.userId, testUserIds)).catch(() => { });
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.inArray)(schema_1.users.id, testUserIds)).catch(() => { });
        await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.inArray)(schema_1.residences.id, testResidenceIds)).catch(() => { });
        await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.inArray)(schema_1.buildings.id, testBuildingIds)).catch(() => { });
        await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.inArray)(schema_1.organizations.id, testOrgIds)).catch(() => { });
        console.log('✅ Sophie cleanup complete');
    });
    (0, globals_1.describe)('Problem Reproduction - Sophie Cannot See Residence', () => {
        (0, globals_1.it)('should reproduce the issue: Sophie has no residence assigned initially', async () => {
            // Simulate the current problem state - Sophie exists but has no residences
            const sophieUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email));
            (0, globals_1.expect)(sophieUser).toHaveLength(1);
            (0, globals_1.expect)(sophieUser[0].firstName).toBe('Sophie');
            (0, globals_1.expect)(sophieUser[0].role).toBe('demo_resident');
            // Check residence assignments - should be empty (reproducing the problem)
            const residenceAssignments = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser[0].id));
            (0, globals_1.expect)(residenceAssignments).toHaveLength(0);
            console.log('🚫 Confirmed: Sophie has no residence assignments (reproducing the issue)');
        });
        (0, globals_1.it)('should demonstrate the problem with API endpoint simulation', async () => {
            // Simulate /api/user/residences endpoint logic
            const sophieUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email));
            const userResidencesList = await db_1.db
                .select({
                residenceId: schema_1.userResidences.residenceId,
            })
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser[0].id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            // This should return empty array - confirming the problem
            (0, globals_1.expect)(userResidencesList).toHaveLength(0);
            console.log('🚫 API simulation confirms: Sophie gets empty residence list');
        });
        (0, globals_1.it)('should demonstrate the 401 Unauthorized issue', async () => {
            // Check if Sophie's authentication data is properly set up
            const sophieUser = await db_1.db
                .select({
                id: schema_1.users.id,
                email: schema_1.users.email,
                password: schema_1.users.password,
                role: schema_1.users.role,
                isActive: schema_1.users.isActive
            })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email));
            (0, globals_1.expect)(sophieUser).toHaveLength(1);
            (0, globals_1.expect)(sophieUser[0].isActive).toBe(true);
            (0, globals_1.expect)(sophieUser[0].password).toBeDefined();
            // Verify password can be validated (this would pass in auth)
            const passwordValid = await bcrypt.compare('SophiePass123!', sophieUser[0].password);
            (0, globals_1.expect)(passwordValid).toBe(true);
            console.log('✅ Sophie authentication data is valid - 401 error likely comes from elsewhere');
        });
    });
    (0, globals_1.describe)('Solution Implementation - Assign Sophie to Residence', () => {
        (0, globals_1.it)('should assign Sophie to her residence', async () => {
            // Create the residence assignment that should exist
            const sophieUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email));
            const residenceAssignment = {
                userId: sophieUser[0].id,
                residenceId: sophieTestData.residence.id,
                relationshipType: 'tenant',
                startDate: '2024-01-01',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db_1.db.insert(schema_1.userResidences).values(residenceAssignment);
            // Verify the assignment was created
            const assignments = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser[0].id));
            (0, globals_1.expect)(assignments).toHaveLength(1);
            (0, globals_1.expect)(assignments[0].residenceId).toBe(sophieTestData.residence.id);
            (0, globals_1.expect)(assignments[0].isActive).toBe(true);
            console.log('✅ Sophie has been assigned to residence');
        });
        (0, globals_1.it)('should validate that Sophie can now access her residence via API simulation', async () => {
            const sophieUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email));
            // Simulate /api/user/residences endpoint after assignment
            const userResidencesList = await db_1.db
                .select({
                residenceId: schema_1.userResidences.residenceId,
            })
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser[0].id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            (0, globals_1.expect)(userResidencesList).toHaveLength(1);
            (0, globals_1.expect)(userResidencesList[0].residenceId).toBe(sophieTestData.residence.id);
            console.log('✅ API simulation now returns Sophie\'s residence');
        });
        (0, globals_1.it)('should validate building access through residence assignment', async () => {
            const sophieUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email));
            // Simulate the building access logic from residences API
            const accessibleBuildings = await db_1.db
                .select({
                buildingId: schema_1.buildings.id,
                buildingName: schema_1.buildings.name,
                residenceId: schema_1.residences.id,
                unitNumber: schema_1.residences.unitNumber
            })
                .from(schema_1.userResidences)
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser[0].id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
            (0, globals_1.expect)(accessibleBuildings).toHaveLength(1);
            (0, globals_1.expect)(accessibleBuildings[0].buildingId).toBe(sophieTestData.building.id);
            (0, globals_1.expect)(accessibleBuildings[0].unitNumber).toBe('101');
            console.log('✅ Sophie can access building through residence assignment');
        });
    });
    (0, globals_1.describe)('Validation Tests for Future Prevention', () => {
        (0, globals_1.it)('should validate that demo users have consistent assignment patterns', async () => {
            // Check if other demo users in the system have proper assignments
            const allDemoUsers = await db_1.db
                .select({
                id: schema_1.users.id,
                email: schema_1.users.email,
                role: schema_1.users.role
            })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.role, 'demo_resident'));
            for (const demoUser of allDemoUsers) {
                const assignments = await db_1.db
                    .select()
                    .from(schema_1.userResidences)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, demoUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
                console.log(`📊 Demo user ${demoUser.email} has ${assignments.length} residence assignments`);
                // Each demo user should have at least one assignment
                // (This test might initially fail, identifying other users with the same issue)
                if (assignments.length === 0) {
                    console.warn(`⚠️ WARNING: Demo user ${demoUser.email} has no residence assignments`);
                }
            }
            // For our test user, should have 1 assignment now
            const sophieUser = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieTestData.user.email));
            const sophieAssignments = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser[0].id));
            (0, globals_1.expect)(sophieAssignments).toHaveLength(1);
        });
        (0, globals_1.it)('should validate residence assignment creation workflow', async () => {
            // Create a systematic test for assigning demo users to residences
            const testDemoUser = {
                id: 'test-demo-assignment-user',
                username: 'test.demo.assignment',
                email: 'test.demo.assignment@koveo-gestion.com',
                password: await bcrypt.hash('TestPass123!', 12),
                firstName: 'Test',
                lastName: 'DemoAssignment',
                role: 'demo_resident',
                language: 'fr',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            // Create additional test residence
            const testResidence = {
                id: 'test-residence-assignment',
                buildingId: sophieTestData.building.id,
                unitNumber: '102',
                floor: 1,
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            // Insert test user and residence
            await db_1.db.insert(schema_1.users).values(testDemoUser);
            testUserIds.push(testDemoUser.id);
            await db_1.db.insert(schema_1.residences).values(testResidence);
            testResidenceIds.push(testResidence.id);
            // Create assignment
            await db_1.db.insert(schema_1.userResidences).values({
                userId: testDemoUser.id,
                residenceId: testResidence.id,
                relationshipType: 'tenant',
                startDate: '2024-01-01',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            });
            // Validate the assignment workflow
            const assignment = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testDemoUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, testResidence.id)));
            (0, globals_1.expect)(assignment).toHaveLength(1);
            (0, globals_1.expect)(assignment[0].isActive).toBe(true);
            console.log('✅ Residence assignment workflow validated');
        });
        (0, globals_1.it)('should provide debugging information for troubleshooting', async () => {
            // Comprehensive debugging info that would help identify the issue
            const debugInfo = {
                totalUsers: await db_1.db.select({ count: schema_1.users.id }).from(schema_1.users),
                totalDemoResidents: await db_1.db
                    .select({ count: schema_1.users.id })
                    .from(schema_1.users)
                    .where((0, drizzle_orm_1.eq)(schema_1.users.role, 'demo_resident')),
                totalResidences: await db_1.db.select({ count: schema_1.residences.id }).from(schema_1.residences),
                totalActiveResidences: await db_1.db
                    .select({ count: schema_1.residences.id })
                    .from(schema_1.residences)
                    .where((0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)),
                totalUserResidenceAssignments: await db_1.db.select({ count: schema_1.userResidences.id }).from(schema_1.userResidences),
                activeUserResidenceAssignments: await db_1.db
                    .select({ count: schema_1.userResidences.id })
                    .from(schema_1.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)),
                demoUsersWithAssignments: await db_1.db
                    .select({
                    userEmail: schema_1.users.email,
                    residenceId: schema_1.userResidences.residenceId,
                    unitNumber: schema_1.residences.unitNumber
                })
                    .from(schema_1.users)
                    .leftJoin(schema_1.userResidences, (0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userResidences.userId))
                    .leftJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                    .where((0, drizzle_orm_1.eq)(schema_1.users.role, 'demo_resident'))
            };
            console.log('🔍 Residence Assignment Debug Information:', {
                totalUsers: debugInfo.totalUsers.length,
                totalDemoResidents: debugInfo.totalDemoResidents.length,
                totalResidences: debugInfo.totalResidences.length,
                totalActiveResidences: debugInfo.totalActiveResidences.length,
                totalAssignments: debugInfo.totalUserResidenceAssignments.length,
                activeAssignments: debugInfo.activeUserResidenceAssignments.length,
                demoUsersWithAssignments: debugInfo.demoUsersWithAssignments.length
            });
            // Validate that our test setup is working
            (0, globals_1.expect)(debugInfo.totalUsers.length).toBeGreaterThan(0);
            (0, globals_1.expect)(debugInfo.totalResidences.length).toBeGreaterThan(0);
            (0, globals_1.expect)(debugInfo.activeUserResidenceAssignments.length).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('Error Handling and Edge Cases', () => {
        (0, globals_1.it)('should handle the case when user exists but no residences are available', async () => {
            // Create a user in a building with no residences
            const testEmptyBuilding = {
                id: 'test-empty-building',
                organizationId: sophieTestData.organization.id,
                name: 'Empty Test Building',
                address: '456 Empty Street',
                city: 'Montreal',
                province: 'QC',
                postalCode: 'H1B 1B1',
                buildingType: 'condo',
                totalUnits: 0,
                totalFloors: 1,
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db_1.db.insert(schema_1.buildings).values(testEmptyBuilding);
            testBuildingIds.push(testEmptyBuilding.id);
            // API should return empty result gracefully
            const emptyResult = await db_1.db
                .select()
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, testEmptyBuilding.id));
            (0, globals_1.expect)(emptyResult).toHaveLength(0);
            console.log('✅ Gracefully handles empty building scenario');
        });
        (0, globals_1.it)('should provide meaningful error messages for missing assignments', async () => {
            // Test that would help identify why Sophie cannot see her residence
            const orphanedUser = {
                id: 'orphaned-demo-user',
                username: 'orphaned.demo',
                email: 'orphaned.demo@koveo-gestion.com',
                password: await bcrypt.hash('TestPass123!', 12),
                firstName: 'Orphaned',
                lastName: 'Demo',
                role: 'demo_resident',
                language: 'fr',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db_1.db.insert(schema_1.users).values(orphanedUser);
            testUserIds.push(orphanedUser.id);
            // Simulate error checking logic
            const userExists = await db_1.db
                .select()
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.id, orphanedUser.id));
            const hasAssignments = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, orphanedUser.id));
            const availableResidences = await db_1.db
                .select()
                .from(schema_1.residences)
                .where((0, drizzle_orm_1.eq)(schema_1.residences.isActive, true));
            // Generate meaningful error context
            const errorContext = {
                userExists: userExists.length > 0,
                userIsActive: userExists[0]?.isActive ?? false,
                hasAssignments: hasAssignments.length > 0,
                availableResidencesInSystem: availableResidences.length,
                userRole: userExists[0]?.role
            };
            (0, globals_1.expect)(errorContext.userExists).toBe(true);
            (0, globals_1.expect)(errorContext.userIsActive).toBe(true);
            (0, globals_1.expect)(errorContext.hasAssignments).toBe(false); // This is the problem
            (0, globals_1.expect)(errorContext.availableResidencesInSystem).toBeGreaterThan(0);
            console.log('🚨 Error diagnosis for orphaned user:', errorContext);
            console.log('💡 Solution: User needs residence assignment in user_residences table');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,