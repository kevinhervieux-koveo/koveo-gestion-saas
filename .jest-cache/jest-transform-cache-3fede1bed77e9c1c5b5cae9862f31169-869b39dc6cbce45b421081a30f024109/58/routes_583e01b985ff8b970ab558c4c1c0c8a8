07e156dfd396de6c14abfa94dacbb266
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerRoutes = registerRoutes;
// Main routes file that loads route definitions  
const express_1 = __importDefault(require("express"));
const auth_1 = require("./auth");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const multer_1 = __importDefault(require("multer"));
const index_1 = require("./auth/index");
// Import API route registration functions
const organizations_1 = require("./api/organizations");
const users_1 = require("./api/users");
const buildings_1 = require("./api/buildings");
const documents_1 = require("./api/documents");
const bugs_1 = require("./api/bugs");
const bills_1 = require("./api/bills");
const residences_1 = require("./api/residences");
const demands_1 = require("./api/demands");
const feature_requests_1 = require("./api/feature-requests");
const contacts_1 = require("./api/contacts");
const common_spaces_1 = require("./api/common-spaces");
const permissions_1 = require("./api/permissions");
const demo_management_1 = require("./api/demo-management");
const trial_request_1 = require("./api/trial-request");
const invoices_1 = require("./api/invoices");
const ai_document_analysis_1 = require("./api/ai-document-analysis");
const documentation_1 = require("./api/documentation");
const pillars_suggestions_1 = require("./api/pillars-suggestions");
const quality_metrics_1 = require("./api/quality-metrics");
const feature_management_1 = require("./api/feature-management");
const law25_compliance_1 = __importDefault(require("./routes/law25-compliance"));
const db_1 = require("./db");
const schema = __importStar(require("@shared/schema"));
// Configure multer for file uploads
const storage = multer_1.default.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path_1.default.join(process.cwd(), 'uploads', 'demands');
        if (!fs_1.default.existsSync(uploadDir)) {
            fs_1.default.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const extension = path_1.default.extname(file.originalname);
        cb(null, `demand-${uniqueSuffix}${extension}`);
    }
});
const upload = (0, multer_1.default)({
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB limit
        files: 5 // Maximum 5 files
    },
    fileFilter: (req, file, cb) => {
        // Allow images, PDFs, and common document types
        const allowedTypes = [
            'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp',
            'application/pdf',
            'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'text/plain'
        ];
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        }
        else {
            cb(new Error(`File type ${file.mimetype} not allowed`));
        }
    }
});
async function registerRoutes(app) {
    console.log('🔄 Setting up session middleware...');
    // CRITICAL: Apply session middleware BEFORE authentication routes
    app.use(auth_1.sessionConfig);
    console.log('✅ Session middleware configured');
    console.log('🔄 Loading authentication routes...');
    // Setup authentication routes - session middleware must be applied first
    (0, auth_1.setupAuthRoutes)(app);
    console.log('✅ Authentication routes loaded on /api/auth/');
    // Register all API routes
    console.log('🔄 Loading API routes...');
    (0, organizations_1.registerOrganizationRoutes)(app);
    (0, users_1.registerUserRoutes)(app);
    (0, buildings_1.registerBuildingRoutes)(app);
    (0, documents_1.registerDocumentRoutes)(app);
    (0, bugs_1.registerBugRoutes)(app);
    (0, bills_1.registerBillRoutes)(app);
    (0, residences_1.registerResidenceRoutes)(app);
    (0, demands_1.registerDemandRoutes)(app);
    (0, feature_requests_1.registerFeatureRequestRoutes)(app);
    (0, contacts_1.registerContactRoutes)(app);
    (0, common_spaces_1.registerCommonSpacesRoutes)(app);
    (0, permissions_1.registerPermissionsRoutes)(app);
    (0, demo_management_1.registerDemoManagementRoutes)(app);
    (0, trial_request_1.registerTrialRequestRoutes)(app);
    (0, invoices_1.registerInvoiceRoutes)(app);
    (0, ai_document_analysis_1.registerAiAnalysisRoutes)(app);
    (0, documentation_1.registerDocumentationRoutes)(app);
    (0, pillars_suggestions_1.registerPillarsSuggestionsRoutes)(app);
    (0, quality_metrics_1.registerQualityMetricsRoutes)(app);
    (0, feature_management_1.registerFeatureManagementRoutes)(app);
    // Law 25 compliance routes
    app.use('/api/law25-compliance', index_1.requireAuth, law25_compliance_1.default);
    console.log('✅ All API routes registered');
    // Features API for roadmap
    app.get('/api/features', index_1.requireAuth, async (req, res) => {
        try {
            const { roadmap } = req.query;
            // Database and schema are now imported at the top of the file
            // Get all features from the database
            const features = await db_1.db.select().from(schema.features).orderBy(schema.features.createdAt);
            // Transform database columns to match expected format
            const transformedFeatures = features.map((feature) => ({
                ...feature,
                isPublicRoadmap: feature.is_public_roadmap,
                isStrategicPath: feature.is_strategic_path,
                businessObjective: feature.business_objective,
                targetUsers: feature.target_users,
                successMetrics: feature.success_metrics,
                technicalComplexity: feature.technical_complexity,
                userFlow: feature.user_flow,
                aiAnalysisResult: feature.ai_analysis_result,
                aiAnalyzedAt: feature.ai_analyzed_at,
                syncedAt: feature.synced_at,
                createdAt: feature.created_at,
                updatedAt: feature.updated_at,
                estimatedHours: feature.estimated_hours,
                actualHours: feature.actual_hours,
                startDate: feature.start_date,
                completedDate: feature.completed_date,
                requestedBy: feature.requested_by,
                assignedTo: feature.assigned_to,
            }));
            // If roadmap=true, filter to only roadmap-visible features
            if (roadmap === 'true') {
                const roadmapFeatures = transformedFeatures.filter((f) => f.isPublicRoadmap !== false);
                res.json(roadmapFeatures);
            }
            else {
                res.json(transformedFeatures);
            }
        }
        catch (error) {
            console.error('Error fetching features:', error);
            res.status(500).json({
                message: 'Failed to fetch features',
                error: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    });
    // Sync to production endpoint (should only work during deployment)
    app.post('/api/features/trigger-sync', index_1.requireAuth, async (req, res) => {
        try {
            // Only allow sync in development environment or during deployment
            if (process.env.NODE_ENV === 'production' && !process.env.DEPLOYMENT_CONTEXT) {
                return res.status(403).json({
                    message: 'Production database sync is only allowed during deployment',
                    code: 'SYNC_FORBIDDEN_IN_PRODUCTION'
                });
            }
            // Mock response for now - this would normally sync to production database
            res.json({
                success: true,
                message: process.env.NODE_ENV === 'development'
                    ? 'Development environment: Sync simulation completed'
                    : 'Features synchronized to production database',
                syncedAt: new Date().toISOString(),
                syncedCount: 0 // Would be actual count in real implementation
            });
        }
        catch (error) {
            console.error('Error during sync:', error);
            res.status(500).json({
                message: 'Failed to sync to production',
                error: process.env.NODE_ENV === 'development' ? error.message : undefined
            });
        }
    });
    // Basic API routes
    app.get('/api/health', (req, res) => {
        res.json({ status: 'ok', timestamp: new Date().toISOString() });
    });
    app.post('/api/test', (req, res) => {
        res.json({ message: 'API working', body: req.body });
    });
    // File upload endpoint for demands and other general uploads
    app.post('/api/upload', index_1.requireAuth, upload.array('file', 5), async (req, res) => {
        try {
            const files = req.files;
            if (!files || files.length === 0) {
                return res.status(400).json({ message: 'No files uploaded' });
            }
            // Generate file URLs/paths for the uploaded files
            const fileUrls = files.map(file => {
                return `/uploads/demands/${file.filename}`;
            });
            console.log(`✅ Successfully uploaded ${files.length} files for user ${req.user.id}:`, fileUrls);
            res.json({
                message: 'Files uploaded successfully',
                fileUrls: fileUrls,
                fileCount: files.length
            });
        }
        catch (error) {
            console.error('❌ File upload error:', error);
            res.status(500).json({
                message: 'Failed to upload files',
                error: error.message
            });
        }
    });
    // Serve uploaded files
    app.use('/uploads', express_1.default.static(path_1.default.join(process.cwd(), 'uploads')));
    // Simple production diagnostic endpoint
    app.get('/api/debug/simple', (req, res) => {
        console.log('🔍 Simple debug endpoint called');
        res.json({
            status: 'working',
            timestamp: new Date().toISOString(),
            environment: process.env.NODE_ENV || 'unknown',
            databaseUrl: process.env.DATABASE_URL ? 'present' : 'missing'
        });
    });
    // Complex storage test endpoint  
    app.get('/api/debug/storage', async (req, res) => {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] 🔍 Storage debug endpoint called`);
        try {
            console.log(`[${timestamp}] 📦 Testing storage import...`);
            const { storage } = await Promise.resolve().then(() => __importStar(require('./storage')));
            console.log(`[${timestamp}] ✅ Storage imported successfully`);
            console.log(`[${timestamp}] 🧪 Testing basic storage method...`);
            const testResult = await storage.getDocuments({ residenceId: 'e27ac924-8120-4904-a791-d1e9db544d58' });
            console.log(`[${timestamp}] ✅ Storage test successful`);
            res.json({
                success: true,
                timestamp,
                documentsCount: testResult.length,
                storageType: storage.constructor.name
            });
        }
        catch (error) {
            res.status(500).json({
                success: false,
                timestamp,
                error: error.message,
                stack: error.stack
            });
        }
    });
    // User info debug endpoint
    app.get('/api/debug/user-info', async (req, res) => {
        try {
            if (!req.session?.userId && !req.session?.user) {
                return res.status(401).json({
                    message: 'No session found',
                    session: req.session
                });
            }
            const user = req.user || req.session?.user;
            const userId = req.session?.userId;
            // Get user from database directly
            const { db } = await Promise.resolve().then(() => __importStar(require('./db')));
            const { users, userOrganizations, organizations } = await Promise.resolve().then(() => __importStar(require('../shared/schema')));
            const { eq } = await Promise.resolve().then(() => __importStar(require('drizzle-orm')));
            const userFromDb = await db
                .select()
                .from(users)
                .where(eq(users.id, userId));
            const userOrgs = await db
                .select({
                organizationId: userOrganizations.organizationId,
                organizationName: organizations.name,
                canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,
                isActive: userOrganizations.isActive,
            })
                .from(userOrganizations)
                .innerJoin(organizations, eq(userOrganizations.organizationId, organizations.id))
                .where(eq(userOrganizations.userId, userId));
            res.json({
                session: {
                    userId: req.session?.userId,
                    hasUser: !!user,
                    userRole: req.session?.userRole,
                },
                userFromMiddleware: user,
                userFromDatabase: userFromDb[0],
                userOrganizations: userOrgs,
                rawSession: req.session
            });
        }
        catch (error) {
            res.status(500).json({
                error: error.message,
                stack: error.stack
            });
        }
    });
    // Static file serving - MUST come after API routes to prevent conflicts
    const distPath = path_1.default.resolve(process.cwd(), 'dist', 'public');
    if (fs_1.default.existsSync(distPath)) {
        console.log('✅ Setting up static file serving from', distPath);
        // Serve static assets with appropriate cache headers
        app.use(express_1.default.static(distPath, {
            // Disable caching for development to ensure fresh files
            setHeaders: (res, path) => {
                if (process.env.NODE_ENV === 'development') {
                    // Development: disable all caching for immediate updates
                    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
                    res.setHeader('Pragma', 'no-cache');
                    res.setHeader('Expires', '0');
                }
                else {
                    // Production: cache assets but allow revalidation
                    if (path.endsWith('.html')) {
                        // HTML files should not be cached to ensure routing works
                        res.setHeader('Cache-Control', 'no-cache, must-revalidate');
                    }
                    else {
                        // Other assets can be cached with revalidation
                        res.setHeader('Cache-Control', 'public, max-age=300, must-revalidate');
                    }
                }
            }
        }));
        // SPA fallback - serve index.html for non-API routes
        app.get('*', (req, res) => {
            // Don't serve index.html for API routes
            if (req.path.startsWith('/api/')) {
                return res.status(404).json({ message: 'API endpoint not found', error: 'API endpoint not found' });
            }
            const indexPath = path_1.default.join(distPath, 'index.html');
            if (fs_1.default.existsSync(indexPath)) {
                // Ensure index.html is never cached
                res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
                res.setHeader('Pragma', 'no-cache');
                res.setHeader('Expires', '0');
                res.sendFile(indexPath);
            }
            else {
                res.status(404).send('Application not found - build missing');
            }
        });
    }
    else {
        console.log('⚠️ Static files not found, only API routes available');
        // Fallback for missing static files
        app.get('*', (req, res) => {
            if (req.path.startsWith('/api/')) {
                return res.status(404).json({ message: 'API endpoint not found', error: 'API endpoint not found' });
            }
            res.status(503).send('Application is starting up...');
        });
    }
    console.log('✅ All routes registered successfully');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,