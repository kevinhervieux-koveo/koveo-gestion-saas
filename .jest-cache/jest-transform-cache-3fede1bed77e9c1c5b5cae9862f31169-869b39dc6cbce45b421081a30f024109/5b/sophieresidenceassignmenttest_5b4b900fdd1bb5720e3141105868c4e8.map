{"file":"/home/runner/workspace/tests/integration/sophie-residence-assignment.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/sophie-residence-assignment.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport { db } from '../../server/db';\nimport { \n  users, \n  residences, \n  buildings, \n  organizations, \n  userResidences, \n  userOrganizations \n} from '../../shared/schema';\nimport { eq, and, inArray } from 'drizzle-orm';\nimport * as bcrypt from 'bcryptjs';\n\n/**\n * Sophie Résidente - Residence Assignment Integration Test\n * \n * This test specifically addresses the reported issue where Sophie Résidente \n * (or similar demo resident users) cannot see their assigned residences.\n * \n * It provides comprehensive validation of:\n * - Database setup and data integrity\n * - API endpoint simulation for residence access\n * - Authentication flow validation\n * - Error handling and debugging information\n * - Real-world scenario testing\n */\n\ndescribe('Sophie Résidente - Residence Assignment Integration', () => {\n  // Test setup mimicking the real Sophie Résidente scenario\n  const sophieTestData = {\n    organization: {\n      id: 'sophie-test-org',\n      name: 'Sophie Test Organization',\n      type: 'management_company' as const,\n      address: '123 Sophie Test Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n      isActive: true\n    },\n    building: {\n      id: 'sophie-test-building',\n      name: 'Sophie Test Building',\n      address: '123 Sophie Building Street',\n      city: 'Montreal',\n      province: 'QC',\n      postalCode: 'H1A 1A1',\n      buildingType: 'condo' as const,\n      totalUnits: 3,\n      totalFloors: 1,\n      isActive: true\n    },\n    residence: {\n      id: 'sophie-test-residence',\n      unitNumber: '101',\n      floor: 1,\n      isActive: true\n    },\n    user: {\n      id: 'sophie-residente-test-user',\n      username: 'sophie.residente.test',\n      email: 'sophie.residente.test@koveo-gestion.com',\n      password: 'SophiePass123!',\n      firstName: 'Sophie',\n      lastName: 'Résidente',\n      role: 'demo_resident' as const,\n      language: 'fr',\n      isActive: true\n    }\n  };\n\n  let testUserIds: string[] = [];\n  let testOrgIds: string[] = [];\n  let testBuildingIds: string[] = [];\n  let testResidenceIds: string[] = [];\n\n  beforeAll(async () => {\n    console.log('🏠 Setting up Sophie Résidente test scenario...');\n\n    // Cleanup any existing test data\n    await db.delete(userResidences).where(\n      eq(userResidences.userId, sophieTestData.user.id)\n    ).catch(() => {});\n\n    await db.delete(users).where(\n      eq(users.email, sophieTestData.user.email)\n    ).catch(() => {});\n\n    await db.delete(residences).where(\n      eq(residences.id, sophieTestData.residence.id)\n    ).catch(() => {});\n\n    await db.delete(buildings).where(\n      eq(buildings.id, sophieTestData.building.id)\n    ).catch(() => {});\n\n    await db.delete(organizations).where(\n      eq(organizations.id, sophieTestData.organization.id)\n    ).catch(() => {});\n\n    // Create test organization\n    await db.insert(organizations).values({\n      ...sophieTestData.organization,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    testOrgIds.push(sophieTestData.organization.id);\n\n    // Create test building\n    await db.insert(buildings).values({\n      ...sophieTestData.building,\n      organizationId: sophieTestData.organization.id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    testBuildingIds.push(sophieTestData.building.id);\n\n    // Create test residence\n    await db.insert(residences).values({\n      ...sophieTestData.residence,\n      buildingId: sophieTestData.building.id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    testResidenceIds.push(sophieTestData.residence.id);\n\n    // Create Sophie user\n    await db.insert(users).values({\n      ...sophieTestData.user,\n      password: await bcrypt.hash(sophieTestData.user.password, 12),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    testUserIds.push(sophieTestData.user.id);\n\n    console.log('✅ Sophie Résidente test setup complete');\n  });\n\n  afterAll(async () => {\n    console.log('🧹 Cleaning up Sophie Résidente test data...');\n\n    // Clean up in reverse order\n    await db.delete(userResidences).where(\n      inArray(userResidences.userId, testUserIds)\n    ).catch(() => {});\n\n    await db.delete(userOrganizations).where(\n      inArray(userOrganizations.userId, testUserIds)\n    ).catch(() => {});\n\n    await db.delete(users).where(\n      inArray(users.id, testUserIds)\n    ).catch(() => {});\n\n    await db.delete(residences).where(\n      inArray(residences.id, testResidenceIds)\n    ).catch(() => {});\n\n    await db.delete(buildings).where(\n      inArray(buildings.id, testBuildingIds)\n    ).catch(() => {});\n\n    await db.delete(organizations).where(\n      inArray(organizations.id, testOrgIds)\n    ).catch(() => {});\n\n    console.log('✅ Sophie cleanup complete');\n  });\n\n  describe('Problem Reproduction - Sophie Cannot See Residence', () => {\n    it('should reproduce the issue: Sophie has no residence assigned initially', async () => {\n      // Simulate the current problem state - Sophie exists but has no residences\n      const sophieUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, sophieTestData.user.email));\n\n      expect(sophieUser).toHaveLength(1);\n      expect(sophieUser[0].firstName).toBe('Sophie');\n      expect(sophieUser[0].role).toBe('demo_resident');\n\n      // Check residence assignments - should be empty (reproducing the problem)\n      const residenceAssignments = await db\n        .select()\n        .from(userResidences)\n        .where(eq(userResidences.userId, sophieUser[0].id));\n\n      expect(residenceAssignments).toHaveLength(0);\n      console.log('🚫 Confirmed: Sophie has no residence assignments (reproducing the issue)');\n    });\n\n    it('should demonstrate the problem with API endpoint simulation', async () => {\n      // Simulate /api/user/residences endpoint logic\n      const sophieUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, sophieTestData.user.email));\n\n      const userResidencesList = await db\n        .select({\n          residenceId: userResidences.residenceId,\n        })\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser[0].id),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      // This should return empty array - confirming the problem\n      expect(userResidencesList).toHaveLength(0);\n      console.log('🚫 API simulation confirms: Sophie gets empty residence list');\n    });\n\n    it('should demonstrate the 401 Unauthorized issue', async () => {\n      // Check if Sophie's authentication data is properly set up\n      const sophieUser = await db\n        .select({\n          id: users.id,\n          email: users.email,\n          password: users.password,\n          role: users.role,\n          isActive: users.isActive\n        })\n        .from(users)\n        .where(eq(users.email, sophieTestData.user.email));\n\n      expect(sophieUser).toHaveLength(1);\n      expect(sophieUser[0].isActive).toBe(true);\n      expect(sophieUser[0].password).toBeDefined();\n\n      // Verify password can be validated (this would pass in auth)\n      const passwordValid = await bcrypt.compare('SophiePass123!', sophieUser[0].password);\n      expect(passwordValid).toBe(true);\n\n      console.log('✅ Sophie authentication data is valid - 401 error likely comes from elsewhere');\n    });\n  });\n\n  describe('Solution Implementation - Assign Sophie to Residence', () => {\n    it('should assign Sophie to her residence', async () => {\n      // Create the residence assignment that should exist\n      const sophieUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, sophieTestData.user.email));\n\n      const residenceAssignment = {\n        userId: sophieUser[0].id,\n        residenceId: sophieTestData.residence.id,\n        relationshipType: 'tenant',\n        startDate: '2024-01-01',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(userResidences).values(residenceAssignment);\n\n      // Verify the assignment was created\n      const assignments = await db\n        .select()\n        .from(userResidences)\n        .where(eq(userResidences.userId, sophieUser[0].id));\n\n      expect(assignments).toHaveLength(1);\n      expect(assignments[0].residenceId).toBe(sophieTestData.residence.id);\n      expect(assignments[0].isActive).toBe(true);\n\n      console.log('✅ Sophie has been assigned to residence');\n    });\n\n    it('should validate that Sophie can now access her residence via API simulation', async () => {\n      const sophieUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, sophieTestData.user.email));\n\n      // Simulate /api/user/residences endpoint after assignment\n      const userResidencesList = await db\n        .select({\n          residenceId: userResidences.residenceId,\n        })\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser[0].id),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      expect(userResidencesList).toHaveLength(1);\n      expect(userResidencesList[0].residenceId).toBe(sophieTestData.residence.id);\n\n      console.log('✅ API simulation now returns Sophie\\'s residence');\n    });\n\n    it('should validate building access through residence assignment', async () => {\n      const sophieUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, sophieTestData.user.email));\n\n      // Simulate the building access logic from residences API\n      const accessibleBuildings = await db\n        .select({\n          buildingId: buildings.id,\n          buildingName: buildings.name,\n          residenceId: residences.id,\n          unitNumber: residences.unitNumber\n        })\n        .from(userResidences)\n        .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n        .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n        .where(\n          and(\n            eq(userResidences.userId, sophieUser[0].id),\n            eq(userResidences.isActive, true),\n            eq(buildings.isActive, true)\n          )\n        );\n\n      expect(accessibleBuildings).toHaveLength(1);\n      expect(accessibleBuildings[0].buildingId).toBe(sophieTestData.building.id);\n      expect(accessibleBuildings[0].unitNumber).toBe('101');\n\n      console.log('✅ Sophie can access building through residence assignment');\n    });\n  });\n\n  describe('Validation Tests for Future Prevention', () => {\n    it('should validate that demo users have consistent assignment patterns', async () => {\n      // Check if other demo users in the system have proper assignments\n      const allDemoUsers = await db\n        .select({\n          id: users.id,\n          email: users.email,\n          role: users.role\n        })\n        .from(users)\n        .where(eq(users.role, 'demo_resident'));\n\n      for (const demoUser of allDemoUsers) {\n        const assignments = await db\n          .select()\n          .from(userResidences)\n          .where(\n            and(\n              eq(userResidences.userId, demoUser.id),\n              eq(userResidences.isActive, true)\n            )\n          );\n\n        console.log(`📊 Demo user ${demoUser.email} has ${assignments.length} residence assignments`);\n        \n        // Each demo user should have at least one assignment\n        // (This test might initially fail, identifying other users with the same issue)\n        if (assignments.length === 0) {\n          console.warn(`⚠️ WARNING: Demo user ${demoUser.email} has no residence assignments`);\n        }\n      }\n\n      // For our test user, should have 1 assignment now\n      const sophieUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, sophieTestData.user.email));\n\n      const sophieAssignments = await db\n        .select()\n        .from(userResidences)\n        .where(eq(userResidences.userId, sophieUser[0].id));\n\n      expect(sophieAssignments).toHaveLength(1);\n    });\n\n    it('should validate residence assignment creation workflow', async () => {\n      // Create a systematic test for assigning demo users to residences\n      const testDemoUser = {\n        id: 'test-demo-assignment-user',\n        username: 'test.demo.assignment',\n        email: 'test.demo.assignment@koveo-gestion.com',\n        password: await bcrypt.hash('TestPass123!', 12),\n        firstName: 'Test',\n        lastName: 'DemoAssignment',\n        role: 'demo_resident' as const,\n        language: 'fr',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // Create additional test residence\n      const testResidence = {\n        id: 'test-residence-assignment',\n        buildingId: sophieTestData.building.id,\n        unitNumber: '102',\n        floor: 1,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      // Insert test user and residence\n      await db.insert(users).values(testDemoUser);\n      testUserIds.push(testDemoUser.id);\n\n      await db.insert(residences).values(testResidence);\n      testResidenceIds.push(testResidence.id);\n\n      // Create assignment\n      await db.insert(userResidences).values({\n        userId: testDemoUser.id,\n        residenceId: testResidence.id,\n        relationshipType: 'tenant',\n        startDate: '2024-01-01',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n\n      // Validate the assignment workflow\n      const assignment = await db\n        .select()\n        .from(userResidences)\n        .where(\n          and(\n            eq(userResidences.userId, testDemoUser.id),\n            eq(userResidences.residenceId, testResidence.id)\n          )\n        );\n\n      expect(assignment).toHaveLength(1);\n      expect(assignment[0].isActive).toBe(true);\n\n      console.log('✅ Residence assignment workflow validated');\n    });\n\n    it('should provide debugging information for troubleshooting', async () => {\n      // Comprehensive debugging info that would help identify the issue\n      const debugInfo = {\n        totalUsers: await db.select({ count: users.id }).from(users),\n        totalDemoResidents: await db\n          .select({ count: users.id })\n          .from(users)\n          .where(eq(users.role, 'demo_resident')),\n        totalResidences: await db.select({ count: residences.id }).from(residences),\n        totalActiveResidences: await db\n          .select({ count: residences.id })\n          .from(residences)\n          .where(eq(residences.isActive, true)),\n        totalUserResidenceAssignments: await db.select({ count: userResidences.id }).from(userResidences),\n        activeUserResidenceAssignments: await db\n          .select({ count: userResidences.id })\n          .from(userResidences)\n          .where(eq(userResidences.isActive, true)),\n        demoUsersWithAssignments: await db\n          .select({\n            userEmail: users.email,\n            residenceId: userResidences.residenceId,\n            unitNumber: residences.unitNumber\n          })\n          .from(users)\n          .leftJoin(userResidences, eq(users.id, userResidences.userId))\n          .leftJoin(residences, eq(userResidences.residenceId, residences.id))\n          .where(eq(users.role, 'demo_resident'))\n      };\n\n      console.log('🔍 Residence Assignment Debug Information:', {\n        totalUsers: debugInfo.totalUsers.length,\n        totalDemoResidents: debugInfo.totalDemoResidents.length,\n        totalResidences: debugInfo.totalResidences.length,\n        totalActiveResidences: debugInfo.totalActiveResidences.length,\n        totalAssignments: debugInfo.totalUserResidenceAssignments.length,\n        activeAssignments: debugInfo.activeUserResidenceAssignments.length,\n        demoUsersWithAssignments: debugInfo.demoUsersWithAssignments.length\n      });\n\n      // Validate that our test setup is working\n      expect(debugInfo.totalUsers.length).toBeGreaterThan(0);\n      expect(debugInfo.totalResidences.length).toBeGreaterThan(0);\n      expect(debugInfo.activeUserResidenceAssignments.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle the case when user exists but no residences are available', async () => {\n      // Create a user in a building with no residences\n      const testEmptyBuilding = {\n        id: 'test-empty-building',\n        organizationId: sophieTestData.organization.id,\n        name: 'Empty Test Building',\n        address: '456 Empty Street',\n        city: 'Montreal',\n        province: 'QC',\n        postalCode: 'H1B 1B1',\n        buildingType: 'condo' as const,\n        totalUnits: 0,\n        totalFloors: 1,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(buildings).values(testEmptyBuilding);\n      testBuildingIds.push(testEmptyBuilding.id);\n\n      // API should return empty result gracefully\n      const emptyResult = await db\n        .select()\n        .from(residences)\n        .where(eq(residences.buildingId, testEmptyBuilding.id));\n\n      expect(emptyResult).toHaveLength(0);\n      console.log('✅ Gracefully handles empty building scenario');\n    });\n\n    it('should provide meaningful error messages for missing assignments', async () => {\n      // Test that would help identify why Sophie cannot see her residence\n      const orphanedUser = {\n        id: 'orphaned-demo-user',\n        username: 'orphaned.demo',\n        email: 'orphaned.demo@koveo-gestion.com',\n        password: await bcrypt.hash('TestPass123!', 12),\n        firstName: 'Orphaned',\n        lastName: 'Demo',\n        role: 'demo_resident' as const,\n        language: 'fr',\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      await db.insert(users).values(orphanedUser);\n      testUserIds.push(orphanedUser.id);\n\n      // Simulate error checking logic\n      const userExists = await db\n        .select()\n        .from(users)\n        .where(eq(users.id, orphanedUser.id));\n\n      const hasAssignments = await db\n        .select()\n        .from(userResidences)\n        .where(eq(userResidences.userId, orphanedUser.id));\n\n      const availableResidences = await db\n        .select()\n        .from(residences)\n        .where(eq(residences.isActive, true));\n\n      // Generate meaningful error context\n      const errorContext = {\n        userExists: userExists.length > 0,\n        userIsActive: userExists[0]?.isActive ?? false,\n        hasAssignments: hasAssignments.length > 0,\n        availableResidencesInSystem: availableResidences.length,\n        userRole: userExists[0]?.role\n      };\n\n      expect(errorContext.userExists).toBe(true);\n      expect(errorContext.userIsActive).toBe(true);\n      expect(errorContext.hasAssignments).toBe(false); // This is the problem\n      expect(errorContext.availableResidencesInSystem).toBeGreaterThan(0);\n\n      console.log('🚨 Error diagnosis for orphaned user:', errorContext);\n      console.log('💡 Solution: User needs residence assignment in user_residences table');\n    });\n  });\n});"],"version":3}