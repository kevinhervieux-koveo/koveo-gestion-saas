{"version":3,"names":["exports","SendInvitationDialog","react_1","cov_100nd8042b","s","__importStar","require","react_query_1","queryClient_1","use_language_1","use_auth_1","react_hook_form_1","zod_1","zod_2","dialog_1","button_1","input_1","textarea_1","select_1","form_1","lucide_react_1","use_toast_1","invitationSchema","z","object","email","string","optional","firstName","max","regex","lastName","role","enum","organizationId","min","buildingId","residenceId","personalMessage","expiryDays","number","refine","data","f","includes","b","message","path","open","onOpenChange","onSuccess","t","useLanguage","user","currentUser","hasRole","useAuth","toast","useToast","selectedOrgType","setSelectedOrgType","useState","form","useForm","resolver","zodResolver","defaultValues","organizations","useQuery","queryKey","queryFn","response","apiRequest","json","enabled","buildings","error","buildingsError","isLoading","buildingsLoading","residences","getFilteredOrganizations","Array","isArray","validOrgs","filter","org","isValid","id","trim","name","canInviteToOrganization","orgId","targetOrg","find","currentUserOrg","toLowerCase","getFilteredBuildings","selectedOrgId","building","getFilteredResidences","selectedBuildingId","residence","orgBuildings","orgBuildingIds","map","invitationMutation","useMutation","mutationFn","expiresAt","Date","setDate","getDate","invitedByUserId","toISOString","_","variables","isDemoRole","title","description","reset","onError","variant","onSubmit","_data","mutate","canInviteRole","watch","availableRoles","useMemo","selectedOrg","isDemoOrg","type","roles","jsx_runtime_1","jsx","Dialog","children","jsxs","DialogContent","className","DialogHeader","DialogTitle","UserPlus","DialogDescription","Form","handleSubmit","FormField","control","render","field","FormItem","FormLabel","FormControl","onChange","e","target","value","setValue","disabled","canInvite","FormDescription","FormMessage","Select","onValueChange","SelectTrigger","SelectValue","placeholder","SelectContent","SelectItem","Shield","Fragment","Input","address","unitNumber","floor","parseInt","toString","Textarea","DialogFooter","Button","onClick","isPending"],"sources":["/home/runner/workspace/client/src/components/admin/send-invitation-dialog.tsx"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useLanguage } from '@/hooks/use-language';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { UserPlus, Shield } from 'lucide-react';\n\nimport { useToast } from '@/hooks/use-toast';\n\n// Form validation schema\nconst invitationSchema = z\n  .object({\n    email: z.string().email('invalidEmailFormat').optional(),\n    firstName: z.string().max(50, 'firstNameTooLong').regex(/^[a-zA-ZÀ-ÿ\\s'-]*$/, 'firstNameInvalidCharacters').optional(),\n    lastName: z.string().max(50, 'lastNameTooLong').regex(/^[a-zA-ZÀ-ÿ\\s'-]*$/, 'lastNameInvalidCharacters').optional(),\n    role: z.enum([\n      'admin',\n      'manager',\n      'tenant',\n      'resident',\n      'demo_manager',\n      'demo_tenant',\n      'demo_resident',\n    ]),\n    organizationId: z.string().min(1, 'organizationRequired'),\n    buildingId: z.string().optional(),\n    residenceId: z.string().optional(),\n    personalMessage: z.string().max(500, 'personalMessageTooLong').optional(),\n    expiryDays: z.number().min(1, 'expiryDaysInvalid').max(30, 'expiryDaysInvalid'),\n  })\n  .refine(\n    (data) => {\n\n      // For demo roles, first and last name are required instead of email\n      if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {\n        return !!data.firstName && !!data.lastName;\n\n      }\n      // For regular roles, email is required\n      return !!data.email;\n    },\n    {\n      message: 'Email address is required for regular invitations (example: user@domain.com). For demo users, provide first and last name instead.',\n      path: ['email'],\n    }\n  )\n  .refine(\n    (data) => {\n      // If role is tenant or resident and a specific building is selected, residence must be assigned\n      if (\n        ['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(data.role) &&\n        data.buildingId &&\n        data.buildingId !== 'none' &&\n        data.buildingId !== ''\n      ) {\n        return !!data.residenceId && data.residenceId !== '';\n      }\n      return true;\n    },\n    {\n      message: 'Please select a specific residence unit for tenants and residents when a building is selected',\n      path: ['residenceId'],\n    }\n  );\n\n/**\n * Form data type for single invitation.\n * Inferred from the invitation Zod schema.\n */\ntype InvitationFormData = z.infer<typeof invitationSchema>;\n\n/**\n * Props for the SendInvitationDialog component.\n * Controls dialog visibility and success handling.\n */\ninterface SendInvitationDialogProps {\n  open: boolean;\n  onOpenChange: (_open: boolean) => void;\n  onSuccess: () => void;\n}\n\n/**\n * Organization interface for organization selection.\n * Contains basic organization information.\n */\ninterface Organization {\n  id: string;\n  name: string;\n  type: string;\n}\n\n/**\n * Building interface from schema.\n */\ninterface BuildingType {\n  id: string;\n  organizationId: string;\n  name: string;\n  address: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  buildingType: 'condo' | 'rental';\n  yearBuilt: number | null;\n  totalUnits: number;\n  totalFloors: number | null;\n  parkingSpaces: number | null;\n  storageSpaces: number | null;\n  amenities: unknown;\n  managementCompany: string | null;\n  isActive: boolean;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\n/**\n * Residence interface for residence selection.\n */\ninterface Residence {\n  id: string;\n  buildingId: string;\n  unitNumber: string;\n  floor: number | null;\n  squareFootage: number | null;\n  bedrooms: number | null;\n  bathrooms: number | null;\n  residenceType: 'apartment' | 'condo' | 'house' | 'townhouse' | 'other';\n  isActive: boolean;\n  building: {\n    id: string;\n    name: string;\n    organizationId: string;\n    organization: {\n      id: string;\n      name: string;\n    };\n  };\n}\n\n/**\n * Send Invitation Dialog Component.\n *\n * Allows sending single invitations with comprehensive options\n * including role selection, organization/building assignment, and custom messages.\n * @param props - Component props.\n * @param props.open - Whether dialog is open.\n * @param props.onOpenChange - Handler for dialog open state changes.\n * @param props.onSuccess - Handler called when invitation is sent successfully.\n * @returns JSX element for the invitation dialog.\n */\nexport function SendInvitationDialog({ open, onOpenChange, onSuccess }: SendInvitationDialogProps) {\n  const { t } = useLanguage();\n  const { user: currentUser, hasRole } = useAuth();\n  const { toast } = useToast();\n\n  const [selectedOrgType, setSelectedOrgType] = useState<string>('');\n\n\n  // Single invitation form\n  const form = useForm<InvitationFormData>({\n    resolver: zodResolver(invitationSchema),\n    defaultValues: {\n      email: '',\n\n      firstName: '',\n      lastName: '',\n      role: 'tenant',\n      organizationId: '',\n      buildingId: '',\n      residenceId: '',\n      expiryDays: 7,\n      personalMessage: '',\n    },\n  });\n\n  // Fetch organizations (filtered by user access)\n  const { data: organizations } = useQuery<Organization[]>({\n    queryKey: ['/api/organizations'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/organizations');\n      return response.json();\n    },\n    enabled: open,\n  });\n\n  // Fetch buildings\n  const { data: buildings, error: buildingsError, isLoading: buildingsLoading } = useQuery<BuildingType[]>({\n    queryKey: ['/api/manager/buildings'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/manager/buildings');\n      const data = await response.json();\n      // The API returns { buildings: [...], meta: {...} } but we need just the buildings array\n      return data.buildings || data;\n    },\n    enabled: open,\n  });\n\n\n  // Fetch residences  \n  const { data: residences } = useQuery<Residence[]>({\n    queryKey: ['/api/residences'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/residences');\n      const data = await response.json();\n      // Handle both direct array and wrapped response formats\n      return data.residences || data;\n    },\n    enabled: open,\n  });\n\n  // Helper functions for filtering data based on selections\n  const getFilteredOrganizations = () => {\n    if (!organizations || !Array.isArray(organizations)) {\n      return [];\n    }\n\n    // Filter out any invalid organizations with detailed logging\n    const validOrgs = organizations.filter((org) => {\n      const isValid =\n        org &&\n        typeof org === 'object' &&\n        org.id &&\n        typeof org.id === 'string' &&\n        org.id.trim() !== '' &&\n        org.name &&\n        typeof org.name === 'string' &&\n        org.name.trim() !== '';\n\n      return isValid;\n    });\n\n    if (currentUser?.role === 'admin') {\n      // Admins can add users to any organization\n      return validOrgs;\n    } else if (currentUser?.role === 'manager') {\n      // Managers can only add users to their own organization\n      return validOrgs;\n    }\n\n    // Default: show all valid organizations for now\n    return validOrgs;\n  };\n\n  // Check if user can access a specific organization for invitations\n  const canInviteToOrganization = (orgId: string) => {\n    if (!orgId || !organizations) {\n      return false;\n    }\n\n    const targetOrg = organizations.find((org) => org.id === orgId);\n    const currentUserOrg = organizations[0]; // Use first organization for access control\n\n    // Organization filtering for user access control\n    if (targetOrg?.name?.toLowerCase() === 'demo') {\n      return currentUser?.role === 'admin';\n    }\n\n    // Koveo organization users can add to any organization (override all restrictions)\n    if (currentUserOrg?.name?.toLowerCase() === 'koveo') {\n      return true;\n    }\n\n    // Simplified access control for now\n\n    // Admins can add to organizations they have access to\n    if (currentUser?.role === 'admin') {\n      return true;\n    }\n\n    // Others can only add to their own organization - simplified for now\n    return true;\n  };\n\n  const getFilteredBuildings = (selectedOrgId: string) => {\n    if (!buildings || !selectedOrgId) {\n      return [];\n    }\n    return buildings.filter((building) => building.organizationId === selectedOrgId);\n  };\n\n  const getFilteredResidences = (selectedBuildingId: string, selectedOrgId: string) => {\n    if (!residences) {\n      return [];\n    }\n    \n    // If a specific building is selected, show only residences from that building\n    if (selectedBuildingId && selectedBuildingId !== 'none') {\n      return residences.filter((residence) => residence.buildingId === selectedBuildingId);\n    }\n    \n    // If no building selected but organization is selected, show all residences from that organization\n    if (selectedOrgId && (!selectedBuildingId || selectedBuildingId === 'none')) {\n      const orgBuildings = buildings?.filter(building => building.organizationId === selectedOrgId) || [];\n      const orgBuildingIds = orgBuildings.map(building => building.id);\n      return residences.filter((residence) => orgBuildingIds.includes(residence.buildingId));\n    }\n    \n    return [];\n  };\n\n  // Single invitation mutation\n  const invitationMutation = useMutation({\n    mutationFn: async (data: InvitationFormData) => {\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + data.expiryDays);\n\n      // For demo roles, create user directly instead of sending invitation\n      if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {\n        const response = await apiRequest('POST', '/api/users/demo', {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          role: data.role,\n          organizationId: data.organizationId,\n          residenceId: data.residenceId || null,\n        });\n        return response.json();\n      }\n\n      // Regular invitation flow\n      const response = await apiRequest('POST', '/api/invitations', {\n        organizationId: data.organizationId,\n        residenceId: data.residenceId || null,\n        email: data.email,\n        role: data.role,\n        invitedByUserId: currentUser?.id,\n        expiresAt: expiresAt.toISOString(),\n        personalMessage: data.personalMessage || null,\n      });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      const isDemoRole = ['demo_manager', 'demo_tenant', 'demo_resident'].includes(variables.role);\n      toast({\n        title: isDemoRole ? 'Demo User Created' : t('invitationSent'),\n        description: isDemoRole\n          ? 'Demo user has been created successfully'\n          : t('invitationSentSuccessfully'),\n      });\n      form.reset();\n      onSuccess();\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (_data: InvitationFormData) => {\n    invitationMutation.mutate(_data);\n\n  };\n\n  const canInviteRole = (role: string) => {\n    if (hasRole(['admin'])) {\n      // Only admin can invite an admin, admin can invite to any organization\n      return true;\n    }\n    if (hasRole(['manager'])) {\n      // Manager can invite regular and demo roles (but not admin)\n      if (\n        ['resident', 'tenant', 'manager', 'demo_manager', 'demo_tenant', 'demo_resident'].includes(\n          role\n        )\n      ) {\n        return true;\n      }\n    }\n    // Residents and tenants cannot invite anyone\n    return false;\n  };\n\n  // Get available roles based on organization type using useMemo for proper reactivity\n  const organizationId = form.watch('organizationId');\n  \n  const availableRoles = useMemo(() => {\n    // Return empty array if no organization is selected\n    if (!organizationId) {\n        return [];\n    }\n\n    const selectedOrg = organizations?.find((org) => org.id === organizationId);\n    const isDemoOrg = selectedOrg?.type === 'demo';\n\n\n    if (isDemoOrg) {\n      // For demo organizations, allow both demo roles and regular roles\n      const roles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'].filter(canInviteRole);\n      return roles;\n    }\n\n    const roles = ['admin', 'manager', 'tenant', 'resident'].filter(canInviteRole);\n    return roles;\n  }, [organizationId, organizations, hasRole]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className='max-w-2xl max-h-[90vh] overflow-y-auto'>\n        <DialogHeader>\n          <DialogTitle className='flex items-center gap-2'>\n            <UserPlus className='h-5 w-5' />\n            {t('inviteUser')}\n          </DialogTitle>\n          <DialogDescription>{t('inviteUserDescription')}</DialogDescription>\n        </DialogHeader>\n\n\n        <div className='space-y-4'>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n              <FormField\n                control={form.control}\n                name='organizationId'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('organization')} *</FormLabel>\n\n                    <FormControl>\n                      <select\n                        {...field}\n                        onChange={(e) => {\n                          field.onChange(e.target.value);\n                          const selectedOrg = organizations?.find(\n                            (org) => org.id === e.target.value\n                          );\n                          setSelectedOrgType(selectedOrg?.type || '');\n                          // Reset building and residence when organization changes\n                          form.setValue('buildingId', '');\n                          form.setValue('residenceId', '');\n                          // Reset role when switching between demo and regular orgs\n                          form.setValue(\n                            'role',\n                            selectedOrg?.type === 'demo' ? 'demo_tenant' : 'tenant'\n                          );\n                        }}\n                        disabled={currentUser?.role === 'manager'}\n                        className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                      >\n                        <option value=''>{t('selectOrganization')}</option>\n                        {getFilteredOrganizations().map((org) => {\n                          if (!org?.id || !org?.name) {\n                            return null;\n                          }\n\n                          const canInvite = canInviteToOrganization(org.id);\n\n                          return (\n                            <option key={org.id} value={org.id} disabled={!canInvite}>\n                              {org.name} {org.type === 'demo' ? '(Demo)' : ''}\n                            </option>\n                          );\n                        })}\n                      </select>\n                    </FormControl>\n                    <FormDescription>\n                      {currentUser?.role === 'manager'\n                        ? 'Managers can only invite to their organization'\n                        : 'Select target organization'}\n                    </FormDescription>\n\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='role'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('role')}</FormLabel>\n                    <Select \n                      key={`role-select-${organizationId}`}\n                      onValueChange={field.onChange} \n                      value={field.value}\n                      disabled={!organizationId}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('selectRole')} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {organizationId ? availableRoles.map((role) => (\n                          <SelectItem key={role} value={role}>\n                            <div className='flex items-center gap-2'>\n                              <Shield className='h-4 w-4' />\n                              {role === 'admin'\n                                ? t('admin')\n                                : role === 'manager'\n                                  ? t('manager')\n                                  : role === 'resident'\n                                    ? t('resident')\n                                    : role === 'tenant'\n                                      ? t('tenant')\n                                      : role === 'demo_manager'\n                                        ? 'Demo Manager'\n                                        : role === 'demo_tenant'\n                                          ? 'Demo Tenant'\n                                          : 'Demo Resident'}\n                            </div>\n                          </SelectItem>\n                        )) : (\n                          <SelectItem value=\"no-organization\" disabled>\n                            Please select an organization first\n                          </SelectItem>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Conditional fields based on role type */}\n              {['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) ? (\n                <>\n                  <FormField\n                    control={form.control}\n                    name='firstName'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder='Enter first name' {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name='lastName'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder='Enter last name' {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              ) : (\n                <FormField\n                  control={form.control}\n                  name='email'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('emailAddress')} *</FormLabel>\n                      <FormControl>\n                        <Input placeholder={t('enterEmailAddress')} type='email' {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {form.watch('organizationId') && (\n                <FormField\n                  control={form.control}\n                  name='buildingId'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {'Building'} ({t('optional')})\n                      </FormLabel>\n                      <FormControl>\n                        <select\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e.target.value);\n                            // Reset residence when building changes\n                            form.setValue('residenceId', '');\n                          }}\n                          className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                        >\n                          <option value=''>{'Select building'}</option>\n                          <option value='none'>{'No specific building'}</option>\n                          {getFilteredBuildings(form.watch('organizationId')).map((building) => (\n                            <option key={building.id} value={building.id}>\n                              {building.name} - {building.address}\n                            </option>\n                          ))}\n                        </select>\n                      </FormControl>\n\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(\n                form.watch('role')\n              ) &&\n                form.watch('buildingId') &&\n                form.watch('buildingId') !== 'none' && (\n                  <FormField\n                    control={form.control}\n                    name='residenceId'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{'Residence'} *</FormLabel>\n                        <FormControl>\n                          <select\n                            {...field}\n                            onChange={field.onChange}\n                            className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                          >\n                            <option value=''>{'Select residence'}</option>\n                            {getFilteredResidences(form.watch('buildingId'), form.watch('organizationId')).map((residence) => (\n                              <option key={residence.id} value={residence.id}>\n                                {'Unit'} {residence.unitNumber}\n                                {residence.floor && ` - ${'Floor'} ${residence.floor}`}\n                              </option>\n                            ))}\n                          </select>\n                        </FormControl>\n                        <FormDescription>\n                          {'Residence required for tenants and residents'}\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n              {/* Only show expiry for regular invitations, not demo users */}\n              {!['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) && (\n                <FormField\n                  control={form.control}\n                  name='expiryDays'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('expiresIn')}</FormLabel>\n                      <FormControl>\n                        <select\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          value={field.value.toString()}\n                          className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                        >\n                          <option value='1'>1 {t('day')}</option>\n                          <option value='3'>3 {t('days')}</option>\n                          <option value='7'>7 {t('days')}</option>\n                          <option value='14'>14 {t('days')}</option>\n                          <option value='30'>30 {t('days')}</option>\n                        </select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {/* Only show personal message for regular invitations, not demo users */}\n              {!['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) && (\n                <FormField\n                  control={form.control}\n                  name='personalMessage'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {t('personalMessage')} ({t('optional')})\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder={t('personalMessagePlaceholder')}\n                          className='min-h-[80px]'\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormDescription>{t('personalMessageDescription')}</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <DialogFooter>\n                <Button type='button' variant='outline' onClick={() => onOpenChange(false)}>\n                  {t('cancel')}\n                </Button>\n                <Button \n                  type='submit' \n                  disabled={invitationMutation.isPending}\n                >\n                  {invitationMutation.isPending\n                    ? selectedOrgType === 'Demo'\n                      ? 'Creating User...'\n                      : t('sending')\n                    : selectedOrgType === 'Demo'\n                      ? 'Create Demo User'\n                      : t('sendInvitation')}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </div>\n\n      </DialogContent>\n    </Dialog>\n  );\n}"],"mappingsoLAA,OAAA,CAAAC,oBAAA,GAAAA,oBAAA;;;;AApLA,MAAAC,OAAA;AAAA;AAAA,CAAAC,cAAA,GAAAC,CAAA,QAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,aAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAE,aAAA;AAAA;AAAA,CAAAL,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAG,cAAA;AAAA;AAAA,CAAAN,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAI,UAAA;AAAA;AAAA,CAAAP,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAK,iBAAA;AAAA;AAAA,CAAAR,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAM,KAAA;AAAA;AAAA,CAAAT,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAO,KAAA;AAAA;AAAA,CAAAV,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAQ,QAAA;AAAA;AAAA,CAAAX,cAAA,GAAAC,CAAA,QAAAE,OAAA;AAQA,MAAAS,QAAA;AAAA;AAAA,CAAAZ,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAU,OAAA;AAAA;AAAA,CAAAb,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAW,UAAA;AAAA;AAAA,CAAAd,cAAA,GAAAC,CAAA,QAAAE,OAAA;AACA,MAAAY,QAAA;AAAA;AAAA,CAAAf,cAAA,GAAAC,CAAA,QAAAE,OAAA;AAOA,MAAAa,MAAA;AAAA;AAAA,CAAAhB,cAAA,GAAAC,CAAA,QAAAE,OAAA;AASA,MAAAc,cAAA;AAAA;AAAA,CAAAjB,cAAA,GAAAC,CAAA,QAAAE,OAAA;AAEA,MAAAe,WAAA;AAAA;AAAA,CAAAlB,cAAA,GAAAC,CAAA,QAAAE,OAAA;AAEA;AACA,MAAMgB,gBAAgB;AAAA;AAAA,CAAAnB,cAAA,GAAAC,CAAA,QAAGS,KAAA,CAAAU,CAAC,CACvBC,MAAM,CAAC;EACNC,KAAK,EAAEZ,KAAA,CAAAU,CAAC,CAACG,MAAM,EAAE,CAACD,KAAK,CAAC,oBAAoB,CAAC,CAACE,QAAQ,EAAE;EACxDC,SAAS,EAAEf,KAAA,CAAAU,CAAC,CAACG,MAAM,EAAE,CAACG,GAAG,CAAC,EAAE,EAAE,kBAAkB,CAAC,CAACC,KAAK,CAAC,oBAAoB,EAAE,4BAA4B,CAAC,CAACH,QAAQ,EAAE;EACtHI,QAAQ,EAAElB,KAAA,CAAAU,CAAC,CAACG,MAAM,EAAE,CAACG,GAAG,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAACC,KAAK,CAAC,oBAAoB,EAAE,2BAA2B,CAAC,CAACH,QAAQ,EAAE;EACnHK,IAAI,EAAEnB,KAAA,CAAAU,CAAC,CAACU,IAAI,CAAC,CACX,OAAO,EACP,SAAS,EACT,QAAQ,EACR,UAAU,EACV,cAAc,EACd,aAAa,EACb,eAAe,CAChB,CAAC;EACFC,cAAc,EAAErB,KAAA,CAAAU,CAAC,CAACG,MAAM,EAAE,CAACS,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;EACzDC,UAAU,EAAEvB,KAAA,CAAAU,CAAC,CAACG,MAAM,EAAE,CAACC,QAAQ,EAAE;EACjCU,WAAW,EAAExB,KAAA,CAAAU,CAAC,CAACG,MAAM,EAAE,CAACC,QAAQ,EAAE;EAClCW,eAAe,EAAEzB,KAAA,CAAAU,CAAC,CAACG,MAAM,EAAE,CAACG,GAAG,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAACF,QAAQ,EAAE;EACzEY,UAAU,EAAE1B,KAAA,CAAAU,CAAC,CAACiB,MAAM,EAAE,CAACL,GAAG,CAAC,CAAC,EAAE,mBAAmB,CAAC,CAACN,GAAG,CAAC,EAAE,EAAE,mBAAmB;CAC/E,CAAC,CACDY,MAAM,CACJC,IAAI,IAAI;EAAA;EAAAvC,cAAA,GAAAwC,CAAA;EAAAxC,cAAA,GAAAC,CAAA;EAEP;EACA,IAAI,CAAC,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACwC,QAAQ,CAACF,IAAI,CAACV,IAAI,CAAC,EAAE;IAAA;IAAA7B,cAAA,GAAA0C,CAAA;IAAA1C,cAAA,GAAAC,CAAA;IACxE,OAAO,2BAAAD,cAAA,GAAA0C,CAAA,YAAC,CAACH,IAAI,CAACd,SAAS;IAAA;IAAA,CAAAzB,cAAA,GAAA0C,CAAA,WAAI,CAAC,CAACH,IAAI,CAACX,QAAQ;EAE5C,CAAC;EAAA;EAAA;IAAA5B,cAAA,GAAA0C,CAAA;EAAA;EACD;EAAA1C,cAAA,GAAAC,CAAA;EACA,OAAO,CAAC,CAACsC,IAAI,CAACjB,KAAK;AACrB,CAAC,EACD;EACEqB,OAAO,EAAE,oIAAoI;EAC7IC,IAAI,EAAE,CAAC,OAAO;CACf,CACF,CACAN,MAAM,CACJC,IAAI,IAAI;EAAA;EAAAvC,cAAA,GAAAwC,CAAA;EAAAxC,cAAA,GAAAC,CAAA;EACP;EACA;EACE;EAAA,CAAAD,cAAA,GAAA0C,CAAA,YAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,EAAE,eAAe,CAAC,CAACD,QAAQ,CAACF,IAAI,CAACV,IAAI,CAAC;EAAA;EAAA,CAAA7B,cAAA,GAAA0C,CAAA,WAC1EH,IAAI,CAACN,UAAU;EAAA;EAAA,CAAAjC,cAAA,GAAA0C,CAAA,WACfH,IAAI,CAACN,UAAU,KAAK,MAAM;EAAA;EAAA,CAAAjC,cAAA,GAAA0C,CAAA,WAC1BH,IAAI,CAACN,UAAU,KAAK,EAAE,GACtB;IAAA;IAAAjC,cAAA,GAAA0C,CAAA;IAAA1C,cAAA,GAAAC,CAAA;IACA,OAAO,2BAAAD,cAAA,GAAA0C,CAAA,YAAC,CAACH,IAAI,CAACL,WAAW;IAAA;IAAA,CAAAlC,cAAA,GAAA0C,CAAA,WAAIH,IAAI,CAACL,WAAW,KAAK,EAAE;EACtD,CAAC;EAAA;EAAA;IAAAlC,cAAA,GAAA0C,CAAA;EAAA;EAAA1C,cAAA,GAAAC,CAAA;EACD,OAAO,IAAI;AACb,CAAC,EACD;EACE0C,OAAO,EAAE,+FAA+F;EACxGC,IAAI,EAAE,CAAC,aAAa;CACrB,CACF;AA4EH;;;;;;;;;;;AAWA,SAAgB9C,oBAAoBA,CAAC;EAAE+C,IAAI;EAAEC,YAAY;EAAEC;AAAS,CAA6B;EAAA;EAAA/C,cAAA,GAAAwC,CAAA;EAC/F,MAAM;IAAEQ;EAAC,CAAE;EAAA;EAAA,CAAAhD,cAAA,GAAAC,CAAA,QAAG,IAAAK,cAAA,CAAA2C,WAAW,GAAE;EAC3B,MAAM;IAAEC,IAAI,EAAEC,WAAW;IAAEC;EAAO,CAAE;EAAA;EAAA,CAAApD,cAAA,GAAAC,CAAA,QAAG,IAAAM,UAAA,CAAA8C,OAAO,GAAE;EAChD,MAAM;IAAEC;EAAK,CAAE;EAAA;EAAA,CAAAtD,cAAA,GAAAC,CAAA,QAAG,IAAAiB,WAAA,CAAAqC,QAAQ,GAAE;EAE5B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC;EAAA;EAAA,CAAAzD,cAAA,GAAAC,CAAA,QAAG,IAAAF,OAAA,CAAA2D,QAAQ,EAAS,EAAE,CAAC;EAGlE;EACA,MAAMC,IAAI;EAAA;EAAA,CAAA3D,cAAA,GAAAC,CAAA,QAAG,IAAAO,iBAAA,CAAAoD,OAAO,EAAqB;IACvCC,QAAQ,EAAE,IAAApD,KAAA,CAAAqD,WAAW,EAAC3C,gBAAgB,CAAC;IACvC4C,aAAa,EAAE;MACbzC,KAAK,EAAE,EAAE;MAETG,SAAS,EAAE,EAAE;MACbG,QAAQ,EAAE,EAAE;MACZC,IAAI,EAAE,QAAQ;MACdE,cAAc,EAAE,EAAE;MAClBE,UAAU,EAAE,EAAE;MACdC,WAAW,EAAE,EAAE;MACfE,UAAU,EAAE,CAAC;MACbD,eAAe,EAAE;;GAEpB,CAAC;EAEF;EACA,MAAM;IAAEI,IAAI,EAAEyB;EAAa,CAAE;EAAA;EAAA,CAAAhE,cAAA,GAAAC,CAAA,QAAG,IAAAG,aAAA,CAAA6D,QAAQ,EAAiB;IACvDC,QAAQ,EAAE,CAAC,oBAAoB,CAAC;IAChCC,OAAO,EAAE,MAAAA,CAAA,KAAW;MAAA;MAAAnE,cAAA,GAAAwC,CAAA;MAClB,MAAM4B,QAAQ;MAAA;MAAA,CAAApE,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAAI,aAAA,CAAAgE,UAAU,EAAC,KAAK,EAAE,oBAAoB,CAAC;MAAC;MAAArE,cAAA,GAAAC,CAAA;MAC/D,OAAOmE,QAAQ,CAACE,IAAI,EAAE;IACxB,CAAC;IACDC,OAAO,EAAE1B;GACV,CAAC;EAEF;EACA,MAAM;IAAEN,IAAI,EAAEiC,SAAS;IAAEC,KAAK,EAAEC,cAAc;IAAEC,SAAS,EAAEC;EAAgB,CAAE;EAAA;EAAA,CAAA5E,cAAA,GAAAC,CAAA,QAAG,IAAAG,aAAA,CAAA6D,QAAQ,EAAiB;IACvGC,QAAQ,EAAE,CAAC,wBAAwB,CAAC;IACpCC,OAAO,EAAE,MAAAA,CAAA,KAAW;MAAA;MAAAnE,cAAA,GAAAwC,CAAA;MAClB,MAAM4B,QAAQ;MAAA;MAAA,CAAApE,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAAI,aAAA,CAAAgE,UAAU,EAAC,KAAK,EAAE,wBAAwB,CAAC;MAClE,MAAM9B,IAAI;MAAA;MAAA,CAAAvC,cAAA,GAAAC,CAAA,QAAG,MAAMmE,QAAQ,CAACE,IAAI,EAAE;MAClC;MAAA;MAAAtE,cAAA,GAAAC,CAAA;MACA,OAAO,2BAAAD,cAAA,GAAA0C,CAAA,WAAAH,IAAI,CAACiC,SAAS;MAAA;MAAA,CAAAxE,cAAA,GAAA0C,CAAA,WAAIH,IAAI;IAC/B,CAAC;IACDgC,OAAO,EAAE1B;GACV,CAAC;EAGF;EACA,MAAM;IAAEN,IAAI,EAAEsC;EAAU,CAAE;EAAA;EAAA,CAAA7E,cAAA,GAAAC,CAAA,QAAG,IAAAG,aAAA,CAAA6D,QAAQ,EAAc;IACjDC,QAAQ,EAAE,CAAC,iBAAiB,CAAC;IAC7BC,OAAO,EAAE,MAAAA,CAAA,KAAW;MAAA;MAAAnE,cAAA,GAAAwC,CAAA;MAClB,MAAM4B,QAAQ;MAAA;MAAA,CAAApE,cAAA,GAAAC,CAAA,QAAG,MAAM,IAAAI,aAAA,CAAAgE,UAAU,EAAC,KAAK,EAAE,iBAAiB,CAAC;MAC3D,MAAM9B,IAAI;MAAA;MAAA,CAAAvC,cAAA,GAAAC,CAAA,QAAG,MAAMmE,QAAQ,CAACE,IAAI,EAAE;MAClC;MAAA;MAAAtE,cAAA,GAAAC,CAAA;MACA,OAAO,2BAAAD,cAAA,GAAA0C,CAAA,WAAAH,IAAI,CAACsC,UAAU;MAAA;MAAA,CAAA7E,cAAA,GAAA0C,CAAA,WAAIH,IAAI;IAChC,CAAC;IACDgC,OAAO,EAAE1B;GACV,CAAC;EAEF;EAAA;EAAA7C,cAAA,GAAAC,CAAA;EACA,MAAM6E,wBAAwB,GAAGA,CAAA,KAAK;IAAA;IAAA9E,cAAA,GAAAwC,CAAA;IAAAxC,cAAA,GAAAC,CAAA;IACpC;IAAI;IAAA,CAAAD,cAAA,GAAA0C,CAAA,YAACsB,aAAa;IAAA;IAAA,CAAAhE,cAAA,GAAA0C,CAAA,WAAI,CAACqC,KAAK,CAACC,OAAO,CAAChB,aAAa,CAAC,GAAE;MAAA;MAAAhE,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACnD,OAAO,EAAE;IACX,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAED;IACA,MAAMuC,SAAS;IAAA;IAAA,CAAAjF,cAAA,GAAAC,CAAA,QAAG+D,aAAa,CAACkB,MAAM,CAAEC,GAAG,IAAI;MAAA;MAAAnF,cAAA,GAAAwC,CAAA;MAC7C,MAAM4C,OAAO;MAAA;MAAA,CAAApF,cAAA,GAAAC,CAAA;MACX;MAAA,CAAAD,cAAA,GAAA0C,CAAA,WAAAyC,GAAG;MAAA;MAAA,CAAAnF,cAAA,GAAA0C,CAAA,WACH,OAAOyC,GAAG,KAAK,QAAQ;MAAA;MAAA,CAAAnF,cAAA,GAAA0C,CAAA,WACvByC,GAAG,CAACE,EAAE;MAAA;MAAA,CAAArF,cAAA,GAAA0C,CAAA,WACN,OAAOyC,GAAG,CAACE,EAAE,KAAK,QAAQ;MAAA;MAAA,CAAArF,cAAA,GAAA0C,CAAA,WAC1ByC,GAAG,CAACE,EAAE,CAACC,IAAI,EAAE,KAAK,EAAE;MAAA;MAAA,CAAAtF,cAAA,GAAA0C,CAAA,WACpByC,GAAG,CAACI,IAAI;MAAA;MAAA,CAAAvF,cAAA,GAAA0C,CAAA,WACR,OAAOyC,GAAG,CAACI,IAAI,KAAK,QAAQ;MAAA;MAAA,CAAAvF,cAAA,GAAA0C,CAAA,WAC5ByC,GAAG,CAACI,IAAI,CAACD,IAAI,EAAE,KAAK,EAAE;MAAC;MAAAtF,cAAA,GAAAC,CAAA;MAEzB,OAAOmF,OAAO;IAChB,CAAC,CAAC;IAAC;IAAApF,cAAA,GAAAC,CAAA;IAEH,IAAIkD,WAAW,EAAEtB,IAAI,KAAK,OAAO,EAAE;MAAA;MAAA7B,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACjC;MACA,OAAOgF,SAAS;IAClB,CAAC,MAAM;MAAA;MAAAjF,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MAAA,IAAIkD,WAAW,EAAEtB,IAAI,KAAK,SAAS,EAAE;QAAA;QAAA7B,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAC,CAAA;QAC1C;QACA,OAAOgF,SAAS;MAClB,CAAC;MAAA;MAAA;QAAAjF,cAAA,GAAA0C,CAAA;MAAA;IAAD;IAEA;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IACA,OAAOgF,SAAS;EAClB,CAAC;EAED;EAAA;EAAAjF,cAAA,GAAAC,CAAA;EACA,MAAMuF,uBAAuB,GAAIC,KAAa,IAAI;IAAA;IAAAzF,cAAA,GAAAwC,CAAA;IAAAxC,cAAA,GAAAC,CAAA;IAChD;IAAI;IAAA,CAAAD,cAAA,GAAA0C,CAAA,YAAC+C,KAAK;IAAA;IAAA,CAAAzF,cAAA,GAAA0C,CAAA,WAAI,CAACsB,aAAa,GAAE;MAAA;MAAAhE,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MAC5B,OAAO,KAAK;IACd,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMgD,SAAS;IAAA;IAAA,CAAA1F,cAAA,GAAAC,CAAA,QAAG+D,aAAa,CAAC2B,IAAI,CAAER,GAAG,IAAK;MAAA;MAAAnF,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAC,CAAA;MAAA,OAAAkF,GAAG,CAACE,EAAE,KAAKI,KAAK;IAAL,CAAK,CAAC;IAC/D,MAAMG,cAAc;IAAA;IAAA,CAAA5F,cAAA,GAAAC,CAAA,QAAG+D,aAAa,CAAC,CAAC,CAAC,EAAC,CAAC;IAEzC;IAAA;IAAAhE,cAAA,GAAAC,CAAA;IACA,IAAIyF,SAAS,EAAEH,IAAI,EAAEM,WAAW,EAAE,KAAK,MAAM,EAAE;MAAA;MAAA7F,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MAC7C,OAAOkD,WAAW,EAAEtB,IAAI,KAAK,OAAO;IACtC,CAAC;IAAA;IAAA;MAAA7B,cAAA,GAAA0C,CAAA;IAAA;IAED;IAAA1C,cAAA,GAAAC,CAAA;IACA,IAAI2F,cAAc,EAAEL,IAAI,EAAEM,WAAW,EAAE,KAAK,OAAO,EAAE;MAAA;MAAA7F,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACnD,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAED;IAEA;IAAA1C,cAAA,GAAAC,CAAA;IACA,IAAIkD,WAAW,EAAEtB,IAAI,KAAK,OAAO,EAAE;MAAA;MAAA7B,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACjC,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAED;IAAA1C,cAAA,GAAAC,CAAA;IACA,OAAO,IAAI;EACb,CAAC;EAAC;EAAAD,cAAA,GAAAC,CAAA;EAEF,MAAM6F,oBAAoB,GAAIC,aAAqB,IAAI;IAAA;IAAA/F,cAAA,GAAAwC,CAAA;IAAAxC,cAAA,GAAAC,CAAA;IACrD;IAAI;IAAA,CAAAD,cAAA,GAAA0C,CAAA,YAAC8B,SAAS;IAAA;IAAA,CAAAxE,cAAA,GAAA0C,CAAA,WAAI,CAACqD,aAAa,GAAE;MAAA;MAAA/F,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MAChC,OAAO,EAAE;IACX,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IACD,OAAOuE,SAAS,CAACU,MAAM,CAAEc,QAAQ,IAAK;MAAA;MAAAhG,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAC,CAAA;MAAA,OAAA+F,QAAQ,CAACjE,cAAc,KAAKgE,aAAa;IAAb,CAAa,CAAC;EAClF,CAAC;EAAC;EAAA/F,cAAA,GAAAC,CAAA;EAEF,MAAMgG,qBAAqB,GAAGA,CAACC,kBAA0B,EAAEH,aAAqB,KAAI;IAAA;IAAA/F,cAAA,GAAAwC,CAAA;IAAAxC,cAAA,GAAAC,CAAA;IAClF,IAAI,CAAC4E,UAAU,EAAE;MAAA;MAAA7E,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACf,OAAO,EAAE;IACX,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAED;IAAA1C,cAAA,GAAAC,CAAA;IACA;IAAI;IAAA,CAAAD,cAAA,GAAA0C,CAAA,WAAAwD,kBAAkB;IAAA;IAAA,CAAAlG,cAAA,GAAA0C,CAAA,WAAIwD,kBAAkB,KAAK,MAAM,GAAE;MAAA;MAAAlG,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACvD,OAAO4E,UAAU,CAACK,MAAM,CAAEiB,SAAS,IAAK;QAAA;QAAAnG,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAC,CAAA;QAAA,OAAAkG,SAAS,CAAClE,UAAU,KAAKiE,kBAAkB;MAAlB,CAAkB,CAAC;IACtF,CAAC;IAAA;IAAA;MAAAlG,cAAA,GAAA0C,CAAA;IAAA;IAED;IAAA1C,cAAA,GAAAC,CAAA;IACA;IAAI;IAAA,CAAAD,cAAA,GAAA0C,CAAA,WAAAqD,aAAa;IAAK;IAAA,CAAA/F,cAAA,GAAA0C,CAAA,YAACwD,kBAAkB;IAAA;IAAA,CAAAlG,cAAA,GAAA0C,CAAA,WAAIwD,kBAAkB,KAAK,MAAM,EAAC,EAAE;MAAA;MAAAlG,cAAA,GAAA0C,CAAA;MAC3E,MAAM0D,YAAY;MAAA;MAAA,CAAApG,cAAA,GAAAC,CAAA;MAAG;MAAA,CAAAD,cAAA,GAAA0C,CAAA,WAAA8B,SAAS,EAAEU,MAAM,CAACc,QAAQ,IAAI;QAAA;QAAAhG,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAC,CAAA;QAAA,OAAA+F,QAAQ,CAACjE,cAAc,KAAKgE,aAAa;MAAb,CAAa,CAAC;MAAA;MAAA,CAAA/F,cAAA,GAAA0C,CAAA,WAAI,EAAE;MACnG,MAAM2D,cAAc;MAAA;MAAA,CAAArG,cAAA,GAAAC,CAAA,SAAGmG,YAAY,CAACE,GAAG,CAACN,QAAQ,IAAI;QAAA;QAAAhG,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAC,CAAA;QAAA,OAAA+F,QAAQ,CAACX,EAAE;MAAF,CAAE,CAAC;MAAC;MAAArF,cAAA,GAAAC,CAAA;MACjE,OAAO4E,UAAU,CAACK,MAAM,CAAEiB,SAAS,IAAK;QAAA;QAAAnG,cAAA,GAAAwC,CAAA;QAAAxC,cAAA,GAAAC,CAAA;QAAA,OAAAoG,cAAc,CAAC5D,QAAQ,CAAC0D,SAAS,CAAClE,UAAU,CAAC;MAAD,CAAC,CAAC;IACxF,CAAC;IAAA;IAAA;MAAAjC,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IAED,OAAO,EAAE;EACX,CAAC;EAED;EACA,MAAMsG,kBAAkB;EAAA;EAAA,CAAAvG,cAAA,GAAAC,CAAA,SAAG,IAAAG,aAAA,CAAAoG,WAAW,EAAC;IACrCC,UAAU,EAAE,MAAOlE,IAAwB,IAAI;MAAA;MAAAvC,cAAA,GAAAwC,CAAA;MAC7C,MAAMkE,SAAS;MAAA;MAAA,CAAA1G,cAAA,GAAAC,CAAA,SAAG,IAAI0G,IAAI,EAAE;MAAC;MAAA3G,cAAA,GAAAC,CAAA;MAC7ByG,SAAS,CAACE,OAAO,CAACF,SAAS,CAACG,OAAO,EAAE,GAAGtE,IAAI,CAACH,UAAU,CAAC;MAExD;MAAA;MAAApC,cAAA,GAAAC,CAAA;MACA,IAAI,CAAC,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACwC,QAAQ,CAACF,IAAI,CAACV,IAAI,CAAC,EAAE;QAAA;QAAA7B,cAAA,GAAA0C,CAAA;QACxE,MAAM0B,QAAQ;QAAA;QAAA,CAAApE,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAAI,aAAA,CAAAgE,UAAU,EAAC,MAAM,EAAE,iBAAiB,EAAE;UAC3D5C,SAAS,EAAEc,IAAI,CAACd,SAAS;UACzBG,QAAQ,EAAEW,IAAI,CAACX,QAAQ;UACvBC,IAAI,EAAEU,IAAI,CAACV,IAAI;UACfE,cAAc,EAAEQ,IAAI,CAACR,cAAc;UACnCG,WAAW;UAAE;UAAA,CAAAlC,cAAA,GAAA0C,CAAA,WAAAH,IAAI,CAACL,WAAW;UAAA;UAAA,CAAAlC,cAAA,GAAA0C,CAAA,WAAI,IAAI;SACtC,CAAC;QAAC;QAAA1C,cAAA,GAAAC,CAAA;QACH,OAAOmE,QAAQ,CAACE,IAAI,EAAE;MACxB,CAAC;MAAA;MAAA;QAAAtE,cAAA,GAAA0C,CAAA;MAAA;MAED;MACA,MAAM0B,QAAQ;MAAA;MAAA,CAAApE,cAAA,GAAAC,CAAA,SAAG,MAAM,IAAAI,aAAA,CAAAgE,UAAU,EAAC,MAAM,EAAE,kBAAkB,EAAE;QAC5DtC,cAAc,EAAEQ,IAAI,CAACR,cAAc;QACnCG,WAAW;QAAE;QAAA,CAAAlC,cAAA,GAAA0C,CAAA,WAAAH,IAAI,CAACL,WAAW;QAAA;QAAA,CAAAlC,cAAA,GAAA0C,CAAA,WAAI,IAAI;QACrCpB,KAAK,EAAEiB,IAAI,CAACjB,KAAK;QACjBO,IAAI,EAAEU,IAAI,CAACV,IAAI;QACfiF,eAAe,EAAE3D,WAAW,EAAEkC,EAAE;QAChCqB,SAAS,EAAEA,SAAS,CAACK,WAAW,EAAE;QAClC5E,eAAe;QAAE;QAAA,CAAAnC,cAAA,GAAA0C,CAAA,WAAAH,IAAI,CAACJ,eAAe;QAAA;QAAA,CAAAnC,cAAA,GAAA0C,CAAA,WAAI,IAAI;OAC9C,CAAC;MAAC;MAAA1C,cAAA,GAAAC,CAAA;MACH,OAAOmE,QAAQ,CAACE,IAAI,EAAE;IACxB,CAAC;IACDvB,SAAS,EAAEA,CAACiE,CAAC,EAAEC,SAAS,KAAI;MAAA;MAAAjH,cAAA,GAAAwC,CAAA;MAC1B,MAAM0E,UAAU;MAAA;MAAA,CAAAlH,cAAA,GAAAC,CAAA,SAAG,CAAC,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACwC,QAAQ,CAACwE,SAAS,CAACpF,IAAI,CAAC;MAAC;MAAA7B,cAAA,GAAAC,CAAA;MAC7FqD,KAAK,CAAC;QACJ6D,KAAK,EAAED,UAAU;QAAA;QAAA,CAAAlH,cAAA,GAAA0C,CAAA,WAAG,mBAAmB;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAAGM,CAAC,CAAC,gBAAgB,CAAC;QAC7DoE,WAAW,EAAEF,UAAU;QAAA;QAAA,CAAAlH,cAAA,GAAA0C,CAAA,WACnB,yCAAyC;QAAA;QAAA,CAAA1C,cAAA,GAAA0C,CAAA,WACzCM,CAAC,CAAC,4BAA4B,CAAC;OACpC,CAAC;MAAC;MAAAhD,cAAA,GAAAC,CAAA;MACH0D,IAAI,CAAC0D,KAAK,EAAE;MAAC;MAAArH,cAAA,GAAAC,CAAA;MACb8C,SAAS,EAAE;MAAC;MAAA/C,cAAA,GAAAC,CAAA;MACZ6C,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC;IACDwE,OAAO,EAAG7C,KAAY,IAAI;MAAA;MAAAzE,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAC,CAAA;MACxBqD,KAAK,CAAC;QACJ6D,KAAK,EAAE,OAAO;QACdC,WAAW,EAAE3C,KAAK,CAAC9B,OAAO;QAC1B4E,OAAO,EAAE;OACV,CAAC;IACJ;GACD,CAAC;EAAC;EAAAvH,cAAA,GAAAC,CAAA;EAEH,MAAMuH,QAAQ,GAAIC,KAAyB,IAAI;IAAA;IAAAzH,cAAA,GAAAwC,CAAA;IAAAxC,cAAA,GAAAC,CAAA;IAC7CsG,kBAAkB,CAACmB,MAAM,CAACD,KAAK,CAAC;EAElC,CAAC;EAAC;EAAAzH,cAAA,GAAAC,CAAA;EAEF,MAAM0H,aAAa,GAAI9F,IAAY,IAAI;IAAA;IAAA7B,cAAA,GAAAwC,CAAA;IAAAxC,cAAA,GAAAC,CAAA;IACrC,IAAImD,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE;MAAA;MAAApD,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACtB;MACA,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IACD,IAAImD,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE;MAAA;MAAApD,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACxB;MACA,IACE,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACwC,QAAQ,CACxFZ,IAAI,CACL,EACD;QAAA;QAAA7B,cAAA,GAAA0C,CAAA;QAAA1C,cAAA,GAAAC,CAAA;QACA,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAAD,cAAA,GAAA0C,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAA0C,CAAA;IAAA;IACD;IAAA1C,cAAA,GAAAC,CAAA;IACA,OAAO,KAAK;EACd,CAAC;EAED;EACA,MAAM8B,cAAc;EAAA;EAAA,CAAA/B,cAAA,GAAAC,CAAA,SAAG0D,IAAI,CAACiE,KAAK,CAAC,gBAAgB,CAAC;EAEnD,MAAMC,cAAc;EAAA;EAAA,CAAA7H,cAAA,GAAAC,CAAA,SAAG,IAAAF,OAAA,CAAA+H,OAAO,EAAC,MAAK;IAAA;IAAA9H,cAAA,GAAAwC,CAAA;IAAAxC,cAAA,GAAAC,CAAA;IAClC;IACA,IAAI,CAAC8B,cAAc,EAAE;MAAA;MAAA/B,cAAA,GAAA0C,CAAA;MAAA1C,cAAA,GAAAC,CAAA;MACjB,OAAO,EAAE;IACb,CAAC;IAAA;IAAA;MAAAD,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMqF,WAAW;IAAA;IAAA,CAAA/H,cAAA,GAAAC,CAAA,SAAG+D,aAAa,EAAE2B,IAAI,CAAER,GAAG,IAAK;MAAA;MAAAnF,cAAA,GAAAwC,CAAA;MAAAxC,cAAA,GAAAC,CAAA;MAAA,OAAAkF,GAAG,CAACE,EAAE,KAAKtD,cAAc;IAAd,CAAc,CAAC;IAC3E,MAAMiG,SAAS;IAAA;IAAA,CAAAhI,cAAA,GAAAC,CAAA,SAAG8H,WAAW,EAAEE,IAAI,KAAK,MAAM;IAAC;IAAAjI,cAAA,GAAAC,CAAA;IAG/C,IAAI+H,SAAS,EAAE;MAAA;MAAAhI,cAAA,GAAA0C,CAAA;MACb;MACA,MAAMwF,KAAK;MAAA;MAAA,CAAAlI,cAAA,GAAAC,CAAA,SAAG,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACiF,MAAM,CAACyC,aAAa,CAAC;MAAC;MAAA3H,cAAA,GAAAC,CAAA;MAC/H,OAAOiI,KAAK;IACd,CAAC;IAAA;IAAA;MAAAlI,cAAA,GAAA0C,CAAA;IAAA;IAED,MAAMwF,KAAK;IAAA;IAAA,CAAAlI,cAAA,GAAAC,CAAA,SAAG,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAACiF,MAAM,CAACyC,aAAa,CAAC;IAAC;IAAA3H,cAAA,GAAAC,CAAA;IAC/E,OAAOiI,KAAK;EACd,CAAC,EAAE,CAACnG,cAAc,EAAEiC,aAAa,EAAEZ,OAAO,CAAC,CAAC;EAAC;EAAApD,cAAA,GAAAC,CAAA;EAE7C,OACE,IAAAkI,aAAA,CAAAC,GAAA,EAACzH,QAAA,CAAA0H,MAAM;IAACxF,IAAI,EAAEA,IAAI;IAAEC,YAAY,EAAEA,YAAY;IAAAwF,QAAA,EAC5C,IAAAH,aAAA,CAAAI,IAAA,EAAC5H,QAAA,CAAA6H,aAAa;MAACC,SAAS,EAAC,wCAAwC;MAAAH,QAAA,GAC/D,IAAAH,aAAA,CAAAI,IAAA,EAAC5H,QAAA,CAAA+H,YAAY;QAAAJ,QAAA,GACX,IAAAH,aAAA,CAAAI,IAAA,EAAC5H,QAAA,CAAAgI,WAAW;UAACF,SAAS,EAAC,yBAAyB;UAAAH,QAAA,GAC9C,IAAAH,aAAA,CAAAC,GAAA,EAACnH,cAAA,CAAA2H,QAAQ;YAACH,SAAS,EAAC;UAAS,EAAG,EAC/BzF,CAAC,CAAC,YAAY,CAAC;QAAA,EACJ,EACd,IAAAmF,aAAA,CAAAC,GAAA,EAACzH,QAAA,CAAAkI,iBAAiB;UAAAP,QAAA,EAAEtF,CAAC,CAAC,uBAAuB;QAAC,EAAqB;MAAA,EACtD,EAGf,IAAAmF,aAAA,CAAAC,GAAA;QAAKK,SAAS,EAAC,WAAW;QAAAH,QAAA,EACxB,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA8H,IAAI;UAAA,GAAKnF,IAAI;UAAA2E,QAAA,EACZ,IAAAH,aAAA,CAAAI,IAAA;YAAMf,QAAQ,EAAE7D,IAAI,CAACoF,YAAY,CAACvB,QAAQ,CAAC;YAAEiB,SAAS,EAAC,WAAW;YAAAH,QAAA,GAChE,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;cACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;cACrB1D,IAAI,EAAC,gBAAgB;cACrB2D,MAAM,EAAEA,CAAC;gBAAEC;cAAK,CAAE,KAChB;gBAAA;gBAAAnJ,cAAA,GAAAwC,CAAA;gBAAAxC,cAAA,GAAAC,CAAA;gBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;kBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAqI,SAAS;oBAAAf,QAAA,GAAEtF,CAAC,CAAC,cAAc,CAAC;kBAAA,EAAe,EAE5C,IAAAmF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;oBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAI,IAAA;sBAAA,GACMY,KAAK;sBACTI,QAAQ,EAAGC,CAAC,IAAI;wBAAA;wBAAAxJ,cAAA,GAAAwC,CAAA;wBAAAxC,cAAA,GAAAC,CAAA;wBACdkJ,KAAK,CAACI,QAAQ,CAACC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;wBAC9B,MAAM3B,WAAW;wBAAA;wBAAA,CAAA/H,cAAA,GAAAC,CAAA,SAAG+D,aAAa,EAAE2B,IAAI,CACpCR,GAAG,IAAK;0BAAA;0BAAAnF,cAAA,GAAAwC,CAAA;0BAAAxC,cAAA,GAAAC,CAAA;0BAAA,OAAAkF,GAAG,CAACE,EAAE,KAAKmE,CAAC,CAACC,MAAM,CAACC,KAAK;wBAAL,CAAK,CACnC;wBAAC;wBAAA1J,cAAA,GAAAC,CAAA;wBACFwD,kBAAkB;wBAAC;wBAAA,CAAAzD,cAAA,GAAA0C,CAAA,WAAAqF,WAAW,EAAEE,IAAI;wBAAA;wBAAA,CAAAjI,cAAA,GAAA0C,CAAA,WAAI,EAAE,EAAC;wBAC3C;wBAAA;wBAAA1C,cAAA,GAAAC,CAAA;wBACA0D,IAAI,CAACgG,QAAQ,CAAC,YAAY,EAAE,EAAE,CAAC;wBAAC;wBAAA3J,cAAA,GAAAC,CAAA;wBAChC0D,IAAI,CAACgG,QAAQ,CAAC,aAAa,EAAE,EAAE,CAAC;wBAChC;wBAAA;wBAAA3J,cAAA,GAAAC,CAAA;wBACA0D,IAAI,CAACgG,QAAQ,CACX,MAAM,EACN5B,WAAW,EAAEE,IAAI,KAAK,MAAM;wBAAA;wBAAA,CAAAjI,cAAA,GAAA0C,CAAA,WAAG,aAAa;wBAAA;wBAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAAG,QAAQ,EACxD;sBACH,CAAC;sBACDkH,QAAQ,EAAEzG,WAAW,EAAEtB,IAAI,KAAK,SAAS;sBACzC4G,SAAS,EAAC,8VAA8V;sBAAAH,QAAA,GAExW,IAAAH,aAAA,CAAAC,GAAA;wBAAQsB,KAAK,EAAC,EAAE;wBAAApB,QAAA,EAAEtF,CAAC,CAAC,oBAAoB;sBAAC,EAAU,EAClD8B,wBAAwB,EAAE,CAACwB,GAAG,CAAEnB,GAAG,IAAI;wBAAA;wBAAAnF,cAAA,GAAAwC,CAAA;wBAAAxC,cAAA,GAAAC,CAAA;wBACtC;wBAAI;wBAAA,CAAAD,cAAA,GAAA0C,CAAA,YAACyC,GAAG,EAAEE,EAAE;wBAAA;wBAAA,CAAArF,cAAA,GAAA0C,CAAA,WAAI,CAACyC,GAAG,EAAEI,IAAI,GAAE;0BAAA;0BAAAvF,cAAA,GAAA0C,CAAA;0BAAA1C,cAAA,GAAAC,CAAA;0BAC1B,OAAO,IAAI;wBACb,CAAC;wBAAA;wBAAA;0BAAAD,cAAA,GAAA0C,CAAA;wBAAA;wBAED,MAAMmH,SAAS;wBAAA;wBAAA,CAAA7J,cAAA,GAAAC,CAAA,SAAGuF,uBAAuB,CAACL,GAAG,CAACE,EAAE,CAAC;wBAAC;wBAAArF,cAAA,GAAAC,CAAA;wBAElD,OACE,IAAAkI,aAAA,CAAAI,IAAA;0BAAqBmB,KAAK,EAAEvE,GAAG,CAACE,EAAE;0BAAEuE,QAAQ,EAAE,CAACC,SAAS;0BAAAvB,QAAA,GACrDnD,GAAG,CAACI,IAAI,OAAGJ,GAAG,CAAC8C,IAAI,KAAK,MAAM;0BAAA;0BAAA,CAAAjI,cAAA,GAAA0C,CAAA,WAAG,QAAQ;0BAAA;0BAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAAG,EAAE;wBAAA,GADpCyC,GAAG,CAACE,EAAE,CAEV;sBAEb,CAAC,CAAC;oBAAA;kBACK,EACG,EACd,IAAA8C,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA8I,eAAe;oBAAAxB,QAAA,EACbnF,WAAW,EAAEtB,IAAI,KAAK,SAAS;oBAAA;oBAAA,CAAA7B,cAAA,GAAA0C,CAAA,WAC5B,gDAAgD;oBAAA;oBAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAChD,4BAA4B;kBAAA,EAChB,EAElB,IAAAyF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;gBAAA,EACN;cADM;YAElB,EACD,EAEF,IAAA5B,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;cACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;cACrB1D,IAAI,EAAC,MAAM;cACX2D,MAAM,EAAEA,CAAC;gBAAEC;cAAK,CAAE,KAChB;gBAAA;gBAAAnJ,cAAA,GAAAwC,CAAA;gBAAAxC,cAAA,GAAAC,CAAA;gBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;kBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAqI,SAAS;oBAAAf,QAAA,EAAEtF,CAAC,CAAC,MAAM;kBAAC,EAAa,EAClC,IAAAmF,aAAA,CAAAI,IAAA,EAACxH,QAAA,CAAAiJ,MAAM;oBAELC,aAAa,EAAEd,KAAK,CAACI,QAAQ;oBAC7BG,KAAK,EAAEP,KAAK,CAACO,KAAK;oBAClBE,QAAQ,EAAE,CAAC7H,cAAc;oBAAAuG,QAAA,GAEzB,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;sBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAC,GAAA,EAACrH,QAAA,CAAAmJ,aAAa;wBAAA5B,QAAA,EACZ,IAAAH,aAAA,CAAAC,GAAA,EAACrH,QAAA,CAAAoJ,WAAW;0BAACC,WAAW,EAAEpH,CAAC,CAAC,YAAY;wBAAC;sBAAI;oBAC/B,EACJ,EACd,IAAAmF,aAAA,CAAAC,GAAA,EAACrH,QAAA,CAAAsJ,aAAa;sBAAA/B,QAAA,EACXvG,cAAc;sBAAA;sBAAA,CAAA/B,cAAA,GAAA0C,CAAA,WAAGmF,cAAc,CAACvB,GAAG,CAAEzE,IAAI,IACxC;wBAAA;wBAAA7B,cAAA,GAAAwC,CAAA;wBAAAxC,cAAA,GAAAC,CAAA;wBAAA,WAAAkI,aAAA,CAAAC,GAAA,EAACrH,QAAA,CAAAuJ,UAAU;0BAAYZ,KAAK,EAAE7H,IAAI;0BAAAyG,QAAA,EAChC,IAAAH,aAAA,CAAAI,IAAA;4BAAKE,SAAS,EAAC,yBAAyB;4BAAAH,QAAA,GACtC,IAAAH,aAAA,CAAAC,GAAA,EAACnH,cAAA,CAAAsJ,MAAM;8BAAC9B,SAAS,EAAC;4BAAS,EAAG,EAC7B5G,IAAI,KAAK,OAAO;4BAAA;4BAAA,CAAA7B,cAAA,GAAA0C,CAAA,WACbM,CAAC,CAAC,OAAO,CAAC;4BAAA;4BAAA,CAAAhD,cAAA,GAAA0C,CAAA,WACVb,IAAI,KAAK,SAAS;4BAAA;4BAAA,CAAA7B,cAAA,GAAA0C,CAAA,WAChBM,CAAC,CAAC,SAAS,CAAC;4BAAA;4BAAA,CAAAhD,cAAA,GAAA0C,CAAA,WACZb,IAAI,KAAK,UAAU;4BAAA;4BAAA,CAAA7B,cAAA,GAAA0C,CAAA,WACjBM,CAAC,CAAC,UAAU,CAAC;4BAAA;4BAAA,CAAAhD,cAAA,GAAA0C,CAAA,WACbb,IAAI,KAAK,QAAQ;4BAAA;4BAAA,CAAA7B,cAAA,GAAA0C,CAAA,WACfM,CAAC,CAAC,QAAQ,CAAC;4BAAA;4BAAA,CAAAhD,cAAA,GAAA0C,CAAA,WACXb,IAAI,KAAK,cAAc;4BAAA;4BAAA,CAAA7B,cAAA,GAAA0C,CAAA,WACrB,cAAc;4BAAA;4BAAA,CAAA1C,cAAA,GAAA0C,CAAA,WACdb,IAAI,KAAK,aAAa;4BAAA;4BAAA,CAAA7B,cAAA,GAAA0C,CAAA,WACpB,aAAa;4BAAA;4BAAA,CAAA1C,cAAA,GAAA0C,CAAA,WACb,eAAe;0BAAA;wBACzB,GAhBSb,IAAI,CAiBR;sBAjBQ,CAkBtB,CAAC;sBAAA;sBAAA,CAAA7B,cAAA,GAAA0C,CAAA,WACA,IAAAyF,aAAA,CAAAC,GAAA,EAACrH,QAAA,CAAAuJ,UAAU;wBAACZ,KAAK,EAAC,iBAAiB;wBAACE,QAAQ;wBAAAtB,QAAA;sBAAA,EAE/B;oBACd,EACa;kBAAA,GAnCX,eAAevG,cAAc,EAAE,CAoC7B,EACT,IAAAoG,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;gBAAA,EACN;cADM;YAElB,EACD,EAGD,CAAC,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACtH,QAAQ,CAACkB,IAAI,CAACiE,KAAK,CAAC,MAAM,CAAC,CAAC;YAAA;YAAA,CAAA5H,cAAA,GAAA0C,CAAA,WAC5E,IAAAyF,aAAA,CAAAI,IAAA,EAAAJ,aAAA,CAAAqC,QAAA;cAAAlC,QAAA,GACE,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;gBACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;gBACrB1D,IAAI,EAAC,WAAW;gBAChB2D,MAAM,EAAEA,CAAC;kBAAEC;gBAAK,CAAE,KAChB;kBAAA;kBAAAnJ,cAAA,GAAAwC,CAAA;kBAAAxC,cAAA,GAAAC,CAAA;kBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;oBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAqI,SAAS;sBAAAf,QAAA;oBAAA,EAAyB,EACnC,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;sBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAC,GAAA,EAACvH,OAAA,CAAA4J,KAAK;wBAACL,WAAW,EAAC,kBAAkB;wBAAA,GAAKjB;sBAAK;oBAAI,EACvC,EACd,IAAAhB,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;kBAAA,EACN;gBADM;cAElB,EACD,EAEF,IAAA5B,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;gBACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;gBACrB1D,IAAI,EAAC,UAAU;gBACf2D,MAAM,EAAEA,CAAC;kBAAEC;gBAAK,CAAE,KAChB;kBAAA;kBAAAnJ,cAAA,GAAAwC,CAAA;kBAAAxC,cAAA,GAAAC,CAAA;kBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;oBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAqI,SAAS;sBAAAf,QAAA;oBAAA,EAAwB,EAClC,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;sBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAC,GAAA,EAACvH,OAAA,CAAA4J,KAAK;wBAACL,WAAW,EAAC,iBAAiB;wBAAA,GAAKjB;sBAAK;oBAAI,EACtC,EACd,IAAAhB,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;kBAAA,EACN;gBADM;cAElB,EACD;YAAA,EACD;YAAA;YAAA,CAAA/J,cAAA,GAAA0C,CAAA,WAEH,IAAAyF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;cACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;cACrB1D,IAAI,EAAC,OAAO;cACZ2D,MAAM,EAAEA,CAAC;gBAAEC;cAAK,CAAE,KAChB;gBAAA;gBAAAnJ,cAAA,GAAAwC,CAAA;gBAAAxC,cAAA,GAAAC,CAAA;gBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;kBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAqI,SAAS;oBAAAf,QAAA,GAAEtF,CAAC,CAAC,cAAc,CAAC;kBAAA,EAAe,EAC5C,IAAAmF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;oBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAC,GAAA,EAACvH,OAAA,CAAA4J,KAAK;sBAACL,WAAW,EAAEpH,CAAC,CAAC,mBAAmB,CAAC;sBAAEiF,IAAI,EAAC,OAAO;sBAAA,GAAKkB;oBAAK;kBAAI,EAC1D,EACd,IAAAhB,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;gBAAA,EACN;cADM;YAElB,EACD,CACH;YAEA;YAAA,CAAA/J,cAAA,GAAA0C,CAAA,WAAAiB,IAAI,CAACiE,KAAK,CAAC,gBAAgB,CAAC;YAAA;YAAA,CAAA5H,cAAA,GAAA0C,CAAA,WAC3B,IAAAyF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;cACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;cACrB1D,IAAI,EAAC,YAAY;cACjB2D,MAAM,EAAEA,CAAC;gBAAEC;cAAK,CAAE,KAChB;gBAAA;gBAAAnJ,cAAA,GAAAwC,CAAA;gBAAAxC,cAAA,GAAAC,CAAA;gBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;kBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAqI,SAAS;oBAAAf,QAAA,GACP,UAAU,QAAItF,CAAC,CAAC,UAAU,CAAC;kBAAA,EAClB,EACZ,IAAAmF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;oBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAI,IAAA;sBAAA,GACMY,KAAK;sBACTI,QAAQ,EAAGC,CAAC,IAAI;wBAAA;wBAAAxJ,cAAA,GAAAwC,CAAA;wBAAAxC,cAAA,GAAAC,CAAA;wBACdkJ,KAAK,CAACI,QAAQ,CAACC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;wBAC9B;wBAAA;wBAAA1J,cAAA,GAAAC,CAAA;wBACA0D,IAAI,CAACgG,QAAQ,CAAC,aAAa,EAAE,EAAE,CAAC;sBAClC,CAAC;sBACDlB,SAAS,EAAC,8VAA8V;sBAAAH,QAAA,GAExW,IAAAH,aAAA,CAAAC,GAAA;wBAAQsB,KAAK,EAAC,EAAE;wBAAApB,QAAA,EAAE;sBAAiB,EAAU,EAC7C,IAAAH,aAAA,CAAAC,GAAA;wBAAQsB,KAAK,EAAC,MAAM;wBAAApB,QAAA,EAAE;sBAAsB,EAAU,EACrDxC,oBAAoB,CAACnC,IAAI,CAACiE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAACtB,GAAG,CAAEN,QAAQ,IAC/D;wBAAA;wBAAAhG,cAAA,GAAAwC,CAAA;wBAAAxC,cAAA,GAAAC,CAAA;wBAAA,WAAAkI,aAAA,CAAAI,IAAA;0BAA0BmB,KAAK,EAAE1D,QAAQ,CAACX,EAAE;0BAAAiD,QAAA,GACzCtC,QAAQ,CAACT,IAAI,SAAKS,QAAQ,CAAC0E,OAAO;wBAAA,GADxB1E,QAAQ,CAACX,EAAE,CAEf;sBAFe,CAGzB,CAAC;oBAAA;kBACK,EACG,EAEd,IAAA8C,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;gBAAA,EACN;cADM;YAElB,EACD,CACH;YAEA;YAAA,CAAA/J,cAAA,GAAA0C,CAAA,YAAC,QAAQ,EAAE,UAAU,EAAE,aAAa,EAAE,eAAe,CAAC,CAACD,QAAQ,CAC9DkB,IAAI,CAACiE,KAAK,CAAC,MAAM,CAAC,CACnB;YAAA;YAAA,CAAA5H,cAAA,GAAA0C,CAAA,WACCiB,IAAI,CAACiE,KAAK,CAAC,YAAY,CAAC;YAAA;YAAA,CAAA5H,cAAA,GAAA0C,CAAA,WACxBiB,IAAI,CAACiE,KAAK,CAAC,YAAY,CAAC,KAAK,MAAM;YAAA;YAAA,CAAA5H,cAAA,GAAA0C,CAAA,WACjC,IAAAyF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;cACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;cACrB1D,IAAI,EAAC,aAAa;cAClB2D,MAAM,EAAEA,CAAC;gBAAEC;cAAK,CAAE,KAChB;gBAAA;gBAAAnJ,cAAA,GAAAwC,CAAA;gBAAAxC,cAAA,GAAAC,CAAA;gBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;kBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAqI,SAAS;oBAAAf,QAAA,GAAE,WAAW;kBAAA,EAAe,EACtC,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;oBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAI,IAAA;sBAAA,GACMY,KAAK;sBACTI,QAAQ,EAAEJ,KAAK,CAACI,QAAQ;sBACxBd,SAAS,EAAC,8VAA8V;sBAAAH,QAAA,GAExW,IAAAH,aAAA,CAAAC,GAAA;wBAAQsB,KAAK,EAAC,EAAE;wBAAApB,QAAA,EAAE;sBAAkB,EAAU,EAC7CrC,qBAAqB,CAACtC,IAAI,CAACiE,KAAK,CAAC,YAAY,CAAC,EAAEjE,IAAI,CAACiE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAACtB,GAAG,CAAEH,SAAS,IAC3F;wBAAA;wBAAAnG,cAAA,GAAAwC,CAAA;wBAAAxC,cAAA,GAAAC,CAAA;wBAAA,WAAAkI,aAAA,CAAAI,IAAA;0BAA2BmB,KAAK,EAAEvD,SAAS,CAACd,EAAE;0BAAAiD,QAAA,GAC3C,MAAM,OAAGnC,SAAS,CAACwE,UAAU;0BAC7B;0BAAA,CAAA3K,cAAA,GAAA0C,CAAA,WAAAyD,SAAS,CAACyE,KAAK;0BAAA;0BAAA,CAAA5K,cAAA,GAAA0C,CAAA,WAAI,MAAM,OAAO,IAAIyD,SAAS,CAACyE,KAAK,EAAE;wBAAA,GAF3CzE,SAAS,CAACd,EAAE,CAGhB;sBAHgB,CAI1B,CAAC;oBAAA;kBACK,EACG,EACd,IAAA8C,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA8I,eAAe;oBAAAxB,QAAA,EACb;kBAA8C,EAC/B,EAClB,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;gBAAA,EACN;cADM;YAElB,EACD,CACH;YAGF;YAAA,CAAA/J,cAAA,GAAA0C,CAAA,YAAC,CAAC,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACD,QAAQ,CAACkB,IAAI,CAACiE,KAAK,CAAC,MAAM,CAAC,CAAC;YAAA;YAAA,CAAA5H,cAAA,GAAA0C,CAAA,WAC7E,IAAAyF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;cACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;cACrB1D,IAAI,EAAC,YAAY;cACjB2D,MAAM,EAAEA,CAAC;gBAAEC;cAAK,CAAE,KAChB;gBAAA;gBAAAnJ,cAAA,GAAAwC,CAAA;gBAAAxC,cAAA,GAAAC,CAAA;gBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;kBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAqI,SAAS;oBAAAf,QAAA,EAAEtF,CAAC,CAAC,WAAW;kBAAC,EAAa,EACvC,IAAAmF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;oBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAI,IAAA;sBAAA,GACMY,KAAK;sBACTI,QAAQ,EAAGC,CAAC,IAAK;wBAAA;wBAAAxJ,cAAA,GAAAwC,CAAA;wBAAAxC,cAAA,GAAAC,CAAA;wBAAA,OAAAkJ,KAAK,CAACI,QAAQ,CAACsB,QAAQ,CAACrB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC;sBAAD,CAAC;sBACzDA,KAAK,EAAEP,KAAK,CAACO,KAAK,CAACoB,QAAQ,EAAE;sBAC7BrC,SAAS,EAAC,8VAA8V;sBAAAH,QAAA,GAExW,IAAAH,aAAA,CAAAI,IAAA;wBAAQmB,KAAK,EAAC,GAAG;wBAAApB,QAAA,SAAItF,CAAC,CAAC,KAAK,CAAC;sBAAA,EAAU,EACvC,IAAAmF,aAAA,CAAAI,IAAA;wBAAQmB,KAAK,EAAC,GAAG;wBAAApB,QAAA,SAAItF,CAAC,CAAC,MAAM,CAAC;sBAAA,EAAU,EACxC,IAAAmF,aAAA,CAAAI,IAAA;wBAAQmB,KAAK,EAAC,GAAG;wBAAApB,QAAA,SAAItF,CAAC,CAAC,MAAM,CAAC;sBAAA,EAAU,EACxC,IAAAmF,aAAA,CAAAI,IAAA;wBAAQmB,KAAK,EAAC,IAAI;wBAAApB,QAAA,UAAKtF,CAAC,CAAC,MAAM,CAAC;sBAAA,EAAU,EAC1C,IAAAmF,aAAA,CAAAI,IAAA;wBAAQmB,KAAK,EAAC,IAAI;wBAAApB,QAAA,UAAKtF,CAAC,CAAC,MAAM,CAAC;sBAAA,EAAU;oBAAA;kBACnC,EACG,EACd,IAAAmF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;gBAAA,EACN;cADM;YAElB,EACD,CACH;YAGA;YAAA,CAAA/J,cAAA,GAAA0C,CAAA,YAAC,CAAC,cAAc,EAAE,aAAa,EAAE,eAAe,CAAC,CAACD,QAAQ,CAACkB,IAAI,CAACiE,KAAK,CAAC,MAAM,CAAC,CAAC;YAAA;YAAA,CAAA5H,cAAA,GAAA0C,CAAA,WAC7E,IAAAyF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAgI,SAAS;cACRC,OAAO,EAAEtF,IAAI,CAACsF,OAAO;cACrB1D,IAAI,EAAC,iBAAiB;cACtB2D,MAAM,EAAEA,CAAC;gBAAEC;cAAK,CAAE,KAChB;gBAAA;gBAAAnJ,cAAA,GAAAwC,CAAA;gBAAAxC,cAAA,GAAAC,CAAA;gBAAA,WAAAkI,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAoI,QAAQ;kBAAAd,QAAA,GACP,IAAAH,aAAA,CAAAI,IAAA,EAACvH,MAAA,CAAAqI,SAAS;oBAAAf,QAAA,GACPtF,CAAC,CAAC,iBAAiB,CAAC,QAAIA,CAAC,CAAC,UAAU,CAAC;kBAAA,EAC5B,EACZ,IAAAmF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAAsI,WAAW;oBAAAhB,QAAA,EACV,IAAAH,aAAA,CAAAC,GAAA,EAACtH,UAAA,CAAAiK,QAAQ;sBACPX,WAAW,EAAEpH,CAAC,CAAC,4BAA4B,CAAC;sBAC5CyF,SAAS,EAAC,cAAc;sBAAA,GACpBU;oBAAK;kBACT,EACU,EACd,IAAAhB,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA8I,eAAe;oBAAAxB,QAAA,EAAEtF,CAAC,CAAC,4BAA4B;kBAAC,EAAmB,EACpE,IAAAmF,aAAA,CAAAC,GAAA,EAACpH,MAAA,CAAA+I,WAAW,KAAG;gBAAA,EACN;cADM;YAElB,EACD,CACH,EAED,IAAA5B,aAAA,CAAAI,IAAA,EAAC5H,QAAA,CAAAqK,YAAY;cAAA1C,QAAA,GACX,IAAAH,aAAA,CAAAC,GAAA,EAACxH,QAAA,CAAAqK,MAAM;gBAAChD,IAAI,EAAC,QAAQ;gBAACV,OAAO,EAAC,SAAS;gBAAC2D,OAAO,EAAEA,CAAA,KAAM;kBAAA;kBAAAlL,cAAA,GAAAwC,CAAA;kBAAAxC,cAAA,GAAAC,CAAA;kBAAA,OAAA6C,YAAY,CAAC,KAAK,CAAC;gBAAD,CAAC;gBAAAwF,QAAA,EACvEtF,CAAC,CAAC,QAAQ;cAAC,EACL,EACT,IAAAmF,aAAA,CAAAC,GAAA,EAACxH,QAAA,CAAAqK,MAAM;gBACLhD,IAAI,EAAC,QAAQ;gBACb2B,QAAQ,EAAErD,kBAAkB,CAAC4E,SAAS;gBAAA7C,QAAA,EAErC/B,kBAAkB,CAAC4E,SAAS;gBAAA;gBAAA,CAAAnL,cAAA,GAAA0C,CAAA,WACzBc,eAAe,KAAK,MAAM;gBAAA;gBAAA,CAAAxD,cAAA,GAAA0C,CAAA,WACxB,kBAAkB;gBAAA;gBAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAClBM,CAAC,CAAC,SAAS,CAAC;gBAAA;gBAAA,CAAAhD,cAAA,GAAA0C,CAAA,WACdc,eAAe,KAAK,MAAM;gBAAA;gBAAA,CAAAxD,cAAA,GAAA0C,CAAA,WACxB,kBAAkB;gBAAA;gBAAA,CAAA1C,cAAA,GAAA0C,CAAA,WAClBM,CAAC,CAAC,gBAAgB,CAAC;cAAA,EAClB;YAAA,EACI;UAAA;QACV;MACF,EACH;IAAA;EAEQ,EACT;AAEb","ignoreList":[]}