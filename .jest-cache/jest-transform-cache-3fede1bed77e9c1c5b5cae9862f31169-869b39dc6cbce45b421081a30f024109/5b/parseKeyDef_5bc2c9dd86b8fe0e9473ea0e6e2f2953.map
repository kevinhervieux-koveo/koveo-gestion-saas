{"file":"/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/keyboard/parseKeyDef.js","mappings":"AAAA,YAAY,CAAC;AAEb,OAAO,CAAC,oCAAoC,CAAC,CAAC;AAC9C,IAAI,kBAAkB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAE1E;;;;;;;;;GASG,CAAC,SAAS,WAAW,CAAC,WAAW,EAAE,IAAI;IACtC,MAAM,IAAI,GAAG,EAAE,CAAC;IAChB,GAAG,CAAC;QACA,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,eAAe,EAAE,WAAW,GAAG,IAAI,EAAE,MAAM,EAAE,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAClJ,IAAI,iBAAiB,CAAC;QACtB,MAAM,MAAM,GAAG,CAAC,iBAAiB,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,EAAC,EAAE;YACxD,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;gBACf,IAAI,SAAS,CAAC;gBACd,OAAO,CAAC,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,KAAK,UAAU,CAAC,WAAW,EAAE,CAAC;YAC3I,CAAC;iBAAM,IAAI,IAAI,KAAK,GAAG,EAAE,CAAC;gBACtB,IAAI,QAAQ,CAAC;gBACb,OAAO,CAAC,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,UAAU,CAAC,WAAW,EAAE,CAAC;YACvI,CAAC;YACD,OAAO,GAAG,CAAC,GAAG,KAAK,UAAU,CAAC;QAClC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAClE,GAAG,EAAE,SAAS;YACd,IAAI,EAAE,SAAS;YACf,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,UAAU;SAC9C,CAAC;QACF,IAAI,CAAC,IAAI,CAAC;YACN,MAAM;YACN,eAAe;YACf,WAAW;YACX,MAAM;SACT,CAAC,CAAC;QACH,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC,QAAO,IAAI,EAAC;IACb,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC","names":[],"sources":["/home/runner/workspace/node_modules/@testing-library/user-event/dist/cjs/keyboard/parseKeyDef.js"],"sourcesContent":["'use strict';\n\nrequire('../utils/dataTransfer/Clipboard.js');\nvar readNextDescriptor = require('../utils/keyDef/readNextDescriptor.js');\n\n/**\n * Parse key definitions per `keyboardMap`\n *\n * Keys can be referenced by `{key}` or `{special}` as well as physical locations per `[code]`.\n * Everything else will be interpreted as a typed character - e.g. `a`.\n * Brackets `{` and `[` can be escaped by doubling - e.g. `foo[[bar` translates to `foo[bar`.\n * Keeping the key pressed can be written as `{key>}`.\n * When keeping the key pressed you can choose how long (how many keydown and keypress) the key is pressed `{key>3}`.\n * You can then release the key per `{key>3/}` or keep it pressed and continue with the next key.\n */ function parseKeyDef(keyboardMap, text) {\n    const defs = [];\n    do {\n        const { type, descriptor, consumedLength, releasePrevious, releaseSelf = true, repeat } = readNextDescriptor.readNextDescriptor(text, 'keyboard');\n        var _keyboardMap_find;\n        const keyDef = (_keyboardMap_find = keyboardMap.find((def)=>{\n            if (type === '[') {\n                var _def_code;\n                return ((_def_code = def.code) === null || _def_code === undefined ? undefined : _def_code.toLowerCase()) === descriptor.toLowerCase();\n            } else if (type === '{') {\n                var _def_key;\n                return ((_def_key = def.key) === null || _def_key === undefined ? undefined : _def_key.toLowerCase()) === descriptor.toLowerCase();\n            }\n            return def.key === descriptor;\n        })) !== null && _keyboardMap_find !== undefined ? _keyboardMap_find : {\n            key: 'Unknown',\n            code: 'Unknown',\n            [type === '[' ? 'code' : 'key']: descriptor\n        };\n        defs.push({\n            keyDef,\n            releasePrevious,\n            releaseSelf,\n            repeat\n        });\n        text = text.slice(consumedLength);\n    }while (text)\n    return defs;\n}\n\nexports.parseKeyDef = parseKeyDef;\n"],"version":3}