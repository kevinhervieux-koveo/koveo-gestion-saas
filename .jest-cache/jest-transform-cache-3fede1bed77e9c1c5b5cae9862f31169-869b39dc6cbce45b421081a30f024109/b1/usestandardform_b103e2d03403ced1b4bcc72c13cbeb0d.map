{"file":"/home/runner/workspace/client/src/hooks/use-standard-form.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/hooks/use-standard-form.tsx"],"sourcesContent":["import { useForm, UseFormReturn } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useCallback } from 'react';\nimport { z } from 'zod';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface StandardFormConfig<T extends z.ZodType<any, any, any>> {\n  schema: T;\n  defaultValues: Partial<z.infer<T>>;\n  apiEndpoint: string;\n  queryKey: string[];\n  mode?: 'create' | 'edit';\n  itemId?: string;\n  onSuccess?: () => void;\n  successMessages?: {\n    create?: string;\n    update?: string;\n  };\n}\n\ninterface StandardFormReturn<T> {\n  form: UseFormReturn<any>;\n  handleSubmit: (onValid: (data: any) => void) => (e?: React.BaseSyntheticEvent) => Promise<void>;\n  isSubmitting: boolean;\n  submitMutation: {\n    mutate: (data: any) => void;\n    isPending: boolean;\n  };\n}\n\n/**\n * Standard form hook that consolidates common form patterns across the app.\n * Combines useForm + zodResolver + useMutation with standardized error handling and toast notifications.\n * \n * @param config - Configuration object with schema, defaultValues, API endpoint, etc.\n * @returns Extended form object with standardized submission handling\n */\nexport function useStandardForm<T extends z.ZodType<any, any, any>>({\n  schema,\n  defaultValues,\n  apiEndpoint,\n  queryKey,\n  mode = 'create',\n  itemId,\n  onSuccess,\n  successMessages = {\n    create: 'Item created successfully',\n    update: 'Item updated successfully',\n  },\n}: StandardFormConfig<T>): StandardFormReturn<z.infer<T>> {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(schema) as any,\n    defaultValues: defaultValues as any,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<T>) => {\n      const response = await apiRequest('POST', apiEndpoint, data);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || `Failed to create item`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: successMessages.create,\n      });\n      queryClient.invalidateQueries({ queryKey });\n      onSuccess?.();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: z.infer<T>) => {\n      if (!itemId) throw new Error('Item ID is required for update');\n      const response = await apiRequest('PUT', `${apiEndpoint}/${itemId}`, data);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || `Failed to update item`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: successMessages.update,\n      });\n      queryClient.invalidateQueries({ queryKey });\n      onSuccess?.();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const submitMutation = mode === 'create' ? createMutation : updateMutation;\n  const isSubmitting = submitMutation.isPending;\n\n  const handleSubmit = useCallback(\n    (onValid: (data: z.infer<T>) => void) => {\n      return form.handleSubmit((data: z.infer<T>) => {\n        // Allow for custom data transformation before submission\n        onValid(data);\n      });\n    },\n    [form]\n  );\n\n  return {\n    form,\n    handleSubmit,\n    isSubmitting,\n    submitMutation,\n  };\n}"],"version":3}