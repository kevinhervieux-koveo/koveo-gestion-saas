3f3956a57b082127d2c40a106729b56a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const schema = __importStar(require("../../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const unified_database_mock_1 = require("../../mocks/unified-database-mock");
(0, globals_1.describe)('Invitation Table Integration Tests', () => {
    let adminUser;
    let managerUser;
    let organization1;
    let organization2;
    (0, globals_1.beforeEach)(async () => {
        // Reset mock data and clear all mocks
        unified_database_mock_1.testUtils.resetMocks();
        // Create test organizations
        const [org1] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.organizations).values({
            name: 'Test Organization 1',
            type: 'management_company',
            address: '123 Test St',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
        }).returning();
        const [org2] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.organizations).values({
            name: 'Test Organization 2',
            type: 'syndicate',
            address: '456 Test Ave',
            city: 'Quebec City',
            province: 'QC',
            postalCode: 'G1A 1A1',
        }).returning();
        organization1 = org1;
        organization2 = org2;
        // Create test users
        const hashedPassword = await bcryptjs_1.default.hash('password123', 10);
        const [admin] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.users).values({
            username: 'admin@test.com',
            email: 'admin@test.com',
            password: hashedPassword,
            firstName: 'Admin',
            lastName: 'User',
            role: 'admin',
        }).returning();
        const [manager] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.users).values({
            username: 'manager@test.com',
            email: 'manager@test.com',
            password: hashedPassword,
            firstName: 'Manager',
            lastName: 'User',
            role: 'manager',
        }).returning();
        adminUser = admin;
        managerUser = manager;
        // Assign manager to organization1
        await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.userOrganizations).values({
            userId: managerUser.id,
            organizationId: organization1.id,
            organizationRole: 'manager',
            isActive: true,
        });
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        await unified_database_mock_1.mockDb.delete(unified_database_mock_1.mockSchema.invitations);
        await unified_database_mock_1.mockDb.delete(unified_database_mock_1.mockSchema.userOrganizations);
        await unified_database_mock_1.mockDb.delete(unified_database_mock_1.mockSchema.users);
        await unified_database_mock_1.mockDb.delete(unified_database_mock_1.mockSchema.organizations);
    });
    (0, globals_1.describe)('Invitation Data Validation', () => {
        (0, globals_1.it)('should create invitations with required fields', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'test@example.com',
                token: 'test-token',
                tokenHash: 'test-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            (0, globals_1.expect)(invitation).toBeDefined();
            (0, globals_1.expect)(invitation.id).toBeDefined();
            (0, globals_1.expect)(invitation.email).toBe('test@example.com');
            (0, globals_1.expect)(invitation.role).toBe('tenant');
            (0, globals_1.expect)(invitation.status).toBe('pending');
            (0, globals_1.expect)(invitation.organizationId).toBe(organization1.id);
        });
        (0, globals_1.it)('should handle invitations with null building and residence references', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'test@example.com',
                token: 'test-token',
                tokenHash: 'test-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                buildingId: null,
                residenceId: null,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            (0, globals_1.expect)(invitation.buildingId).toBeNull();
            (0, globals_1.expect)(invitation.residenceId).toBeNull();
        });
        (0, globals_1.it)('should validate invitation roles', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const validRoles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];
            for (const role of validRoles) {
                const [invitation] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                    email: `test-${role}@example.com`,
                    token: `test-token-${role}`,
                    tokenHash: `test-hash-${role}`,
                    role: role,
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                }).returning();
                (0, globals_1.expect)(invitation.role).toBe(role);
            }
        });
        (0, globals_1.it)('should validate invitation status values', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const validStatuses = ['pending', 'accepted', 'expired', 'cancelled'];
            for (const status of validStatuses) {
                const [invitation] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                    email: `test-${status}@example.com`,
                    token: `test-token-${status}`,
                    tokenHash: `test-hash-${status}`,
                    role: 'tenant',
                    status: status,
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                }).returning();
                (0, globals_1.expect)(invitation.status).toBe(status);
            }
        });
    });
    (0, globals_1.describe)('Invitation Queries and Filtering', () => {
        (0, globals_1.beforeEach)(async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            // Create test invitations
            await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values([
                {
                    email: 'pending1@example.com',
                    token: 'token1',
                    tokenHash: 'hash1',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                },
                {
                    email: 'pending2@example.com',
                    token: 'token2',
                    tokenHash: 'hash2',
                    role: 'resident',
                    status: 'pending',
                    organizationId: organization2.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                },
                {
                    email: 'accepted@example.com',
                    token: 'token3',
                    tokenHash: 'hash3',
                    role: 'tenant',
                    status: 'accepted',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                },
            ]);
        });
        (0, globals_1.it)('should filter pending invitations correctly', async () => {
            const pendingInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(unified_database_mock_1.mockSchema.invitations)
                .where((0, drizzle_orm_1.eq)(unified_database_mock_1.mockSchema.invitations.status, 'pending'));
            (0, globals_1.expect)(pendingInvitations).toHaveLength(2);
            (0, globals_1.expect)(pendingInvitations.every(inv => inv.status === 'pending')).toBe(true);
        });
        (0, globals_1.it)('should join with organizations table for admin view', async () => {
            const invitationsWithOrgs = await unified_database_mock_1.mockDb
                .select({
                id: schema.invitations.id,
                email: schema.invitations.email,
                role: schema.invitations.role,
                status: schema.invitations.status,
                organizationName: schema.organizations.name,
            })
                .from(schema.invitations)
                .leftJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.invitations.organizationId, schema.organizations.id))
                .where((0, drizzle_orm_1.eq)(schema.invitations.status, 'pending'));
            (0, globals_1.expect)(invitationsWithOrgs).toHaveLength(2);
            const org1Invitation = invitationsWithOrgs.find(inv => inv.email === 'pending1@example.com');
            const org2Invitation = invitationsWithOrgs.find(inv => inv.email === 'pending2@example.com');
            (0, globals_1.expect)(org1Invitation?.organizationName).toBe('Test Organization 1');
            (0, globals_1.expect)(org2Invitation?.organizationName).toBe('Test Organization 2');
        });
        (0, globals_1.it)('should filter invitations by organization for manager view', async () => {
            const managerInvitations = await unified_database_mock_1.mockDb
                .select()
                .from(unified_database_mock_1.mockSchema.invitations)
                .where((0, drizzle_orm_1.eq)(unified_database_mock_1.mockSchema.invitations.organizationId, organization1.id));
            (0, globals_1.expect)(managerInvitations).toHaveLength(2); // 1 pending + 1 accepted from org1
            (0, globals_1.expect)(managerInvitations.every(inv => inv.organizationId === organization1.id)).toBe(true);
        });
    });
    (0, globals_1.describe)('Invitation Deletion', () => {
        let testInvitation;
        (0, globals_1.beforeEach)(async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'delete-test@example.com',
                token: 'delete-token',
                tokenHash: 'delete-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            testInvitation = invitation;
        });
        (0, globals_1.it)('should successfully delete invitation', async () => {
            // Verify invitation exists
            const beforeDelete = await unified_database_mock_1.mockDb
                .select()
                .from(unified_database_mock_1.mockSchema.invitations)
                .where((0, drizzle_orm_1.eq)(unified_database_mock_1.mockSchema.invitations.id, testInvitation.id));
            (0, globals_1.expect)(beforeDelete).toHaveLength(1);
            // Delete invitation
            await unified_database_mock_1.mockDb
                .delete(unified_database_mock_1.mockSchema.invitations)
                .where((0, drizzle_orm_1.eq)(unified_database_mock_1.mockSchema.invitations.id, testInvitation.id));
            // Verify invitation is deleted
            const afterDelete = await unified_database_mock_1.mockDb
                .select()
                .from(unified_database_mock_1.mockSchema.invitations)
                .where((0, drizzle_orm_1.eq)(unified_database_mock_1.mockSchema.invitations.id, testInvitation.id));
            (0, globals_1.expect)(afterDelete).toHaveLength(0);
        });
        (0, globals_1.it)('should handle deletion of non-existent invitation', async () => {
            // Try to delete non-existent invitation
            const result = await unified_database_mock_1.mockDb
                .delete(unified_database_mock_1.mockSchema.invitations)
                .where((0, drizzle_orm_1.eq)(unified_database_mock_1.mockSchema.invitations.id, 'non-existent-id'));
            // Should not throw error, just return 0 affected rows
            (0, globals_1.expect)(result).toBeDefined();
        });
    });
    (0, globals_1.describe)('Invitation Expiration', () => {
        (0, globals_1.it)('should handle expired invitations', async () => {
            const expiredDate = new Date();
            expiredDate.setDate(expiredDate.getDate() - 1); // Yesterday
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 7); // Next week
            await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values([
                {
                    email: 'expired@example.com',
                    token: 'expired-token',
                    tokenHash: 'expired-hash',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expiredDate,
                },
                {
                    email: 'valid@example.com',
                    token: 'valid-token',
                    tokenHash: 'valid-hash',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: futureDate,
                },
            ]);
            // Get all pending invitations
            const allPending = await unified_database_mock_1.mockDb
                .select()
                .from(unified_database_mock_1.mockSchema.invitations)
                .where((0, drizzle_orm_1.eq)(unified_database_mock_1.mockSchema.invitations.status, 'pending'));
            (0, globals_1.expect)(allPending).toHaveLength(2);
            // Check expiration dates
            const expiredInvitation = allPending.find(inv => inv.email === 'expired@example.com');
            const validInvitation = allPending.find(inv => inv.email === 'valid@example.com');
            (0, globals_1.expect)(expiredInvitation?.expiresAt).toBeInstanceOf(Date);
            (0, globals_1.expect)(validInvitation?.expiresAt).toBeInstanceOf(Date);
            (0, globals_1.expect)(expiredInvitation.expiresAt < new Date()).toBe(true);
            (0, globals_1.expect)(validInvitation.expiresAt > new Date()).toBe(true);
        });
    });
    (0, globals_1.describe)('Database Constraints', () => {
        (0, globals_1.it)('should enforce unique token constraint', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            // Create first invitation
            await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'first@example.com',
                token: 'unique-token',
                tokenHash: 'hash1',
                role: 'tenant',
                status: 'pending',
                organizationId: organization1.id,
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            });
            // Try to create second invitation with same token
            await (0, globals_1.expect)(async () => {
                await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                    email: 'second@example.com',
                    token: 'unique-token', // Same token
                    tokenHash: 'hash2',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: organization1.id,
                    invitedByUserId: adminUser.id,
                    expiresAt: expirationDate,
                });
            }).rejects.toThrow();
        });
        (0, globals_1.it)('should allow null values for optional fields', async () => {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 7);
            const [invitation] = await unified_database_mock_1.mockDb.insert(unified_database_mock_1.mockSchema.invitations).values({
                email: 'null-test@example.com',
                token: 'null-token',
                tokenHash: 'null-hash',
                role: 'tenant',
                status: 'pending',
                organizationId: null, // Allow null
                buildingId: null, // Allow null
                residenceId: null, // Allow null
                invitedByUserId: adminUser.id,
                expiresAt: expirationDate,
            }).returning();
            (0, globals_1.expect)(invitation.organizationId).toBeNull();
            (0, globals_1.expect)(invitation.buildingId).toBeNull();
            (0, globals_1.expect)(invitation.residenceId).toBeNull();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,