1c71eec53f08d7d606b5e5322080a9a7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerUserRoutes = registerUserRoutes;
const storage_1 = require("../storage");
const schema_1 = require("@shared/schema");
const zod_1 = require("zod");
const auth_1 = require("../auth");
const crypto_1 = require("crypto");
const bcrypt = __importStar(require("bcryptjs"));
// Database-based permissions - no config imports needed
const db_1 = require("../db");
const schema = __importStar(require("../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const input_sanitization_1 = require("../utils/input-sanitization");
const user_creation_logger_1 = require("../utils/user-creation-logger");
const query_cache_1 = require("../query-cache");
const email_service_1 = require("../services/email-service");
/**
 * Registers all user-related API endpoints.
 *
 * @param app - Express application instance.
 */
/**
 * RegisterUserRoutes function.
 * @param app
 * @returns Function result.
 */
function registerUserRoutes(app) {
    /**
     * GET /api/users - Retrieves users with their assignments based on current user's role and organizations.
     */
    app.get('/api/users', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Get users with their full assignment data
            const usersWithAssignments = await storage_1.storage.getUsersWithAssignments();
            // Filter users based on current user's role and permissions
            let filteredUsers;
            if (currentUser.role === 'admin') {
                // Admin can see all users
                filteredUsers = usersWithAssignments;
            }
            else if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(currentUser.role)) {
                // Demo users can only see other demo users
                filteredUsers = usersWithAssignments.filter(user => ['demo_manager', 'demo_tenant', 'demo_resident'].includes(user.role));
            }
            else {
                // Regular managers and other users can only see non-demo users from their organizations
                // Get the organization IDs that the current user has access to
                const userOrgIds = (await storage_1.storage.getUserOrganizations(currentUser.id)).map(org => org.organizationId);
                // Filter users to only include non-demo users from accessible organizations
                filteredUsers = usersWithAssignments.filter(user => {
                    // Exclude demo users from regular manager view
                    if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(user.role)) {
                        return false;
                    }
                    const hasAccess = user.organizations?.some(org => userOrgIds.includes(org.id)) || false;
                    return hasAccess;
                });
            }
            res.json(filteredUsers);
        }
        catch (error) {
            console.error('❌ Error fetching users:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch users',
            });
        }
    });
    /**
     * GET /api/users/:id - Retrieves a specific user by ID.
     */
    app.get('/api/users/:id', async (req, res) => {
        try {
            const { id } = req.params;
            if (!id) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'User ID is required',
                });
            }
            const user = await storage_1.storage.getUser(id);
            if (!user) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'User not found',
                });
            }
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error('❌ Error fetching user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user',
            });
        }
    });
    /**
     * GET /api/users/email/:email - Retrieves a user by email address.
     */
    app.get('/api/users/email/:email', async (req, res) => {
        try {
            const { email } = req.params;
            if (!email) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'Email is required',
                });
            }
            const user = await storage_1.storage.getUserByEmail(email);
            if (!user) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'User not found',
                });
            }
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error('❌ Error fetching user by email:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user',
            });
        }
    });
    /**
     * POST /api/users - Creates a new user.
     */
    app.post('/api/users', async (req, res) => {
        try {
            // Enhanced password validation using utility
            if (req.body.password) {
                const passwordValidation = (0, input_sanitization_1.validatePasswordStrength)(req.body.password);
                if (!passwordValidation.isValid) {
                    return res.status(400).json({
                        error: 'Validation error',
                        message: passwordValidation.message,
                        code: 'WEAK_PASSWORD',
                    });
                }
            }
            // Sanitize and normalize all input data
            const normalizedData = {
                ...req.body,
                email: (0, input_sanitization_1.normalizeEmail)(req.body.email || ''),
                firstName: (0, input_sanitization_1.sanitizeName)(req.body.firstName || ''),
                lastName: (0, input_sanitization_1.sanitizeName)(req.body.lastName || ''),
                phone: req.body.phone ? (0, input_sanitization_1.sanitizeString)(req.body.phone) : '',
                language: req.body.language || 'fr',
            };
            // Generate unique username if not provided
            if (!normalizedData.username && normalizedData.email) {
                const baseUsername = (0, input_sanitization_1.generateUsernameFromEmail)(normalizedData.email);
                let username = baseUsername;
                // Ensure username uniqueness
                let usernameCounter = 1;
                let existingUsername = await db_1.db
                    .select({ username: schema.users.username })
                    .from(schema.users)
                    .where((0, drizzle_orm_1.eq)(schema.users.username, username))
                    .limit(1);
                while (existingUsername.length > 0) {
                    username = `${baseUsername}${usernameCounter}`;
                    usernameCounter++;
                    existingUsername = await db_1.db
                        .select({ username: schema.users.username })
                        .from(schema.users)
                        .where((0, drizzle_orm_1.eq)(schema.users.username, username))
                        .limit(1);
                }
                normalizedData.username = username;
            }
            const validatedData = schema_1.insertUserSchema.parse(normalizedData);
            // Check if user with email already exists
            const existingUser = await storage_1.storage.getUserByEmail(validatedData.email);
            if (existingUser) {
                return res.status(409).json({
                    _error: 'Conflict',
                    message: 'User with this email already exists',
                });
            }
            const user = await storage_1.storage.createUser(validatedData);
            // Log successful user creation
            (0, user_creation_logger_1.logUserCreation)({
                userId: user.id,
                email: user.email,
                role: user.role,
                method: 'direct',
                success: true,
                timestamp: new Date(),
                ipAddress: req.ip,
                userAgent: req.get('User-Agent'),
            });
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.status(201).json(userWithoutPassword);
        }
        catch (error) {
            // Log failed user creation attempt
            (0, user_creation_logger_1.logUserCreation)({
                email: req.body.email || 'unknown',
                role: req.body.role || 'unknown',
                method: 'direct',
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                timestamp: new Date(),
                ipAddress: req.ip,
                userAgent: req.get('User-Agent'),
            });
            if (error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    error: 'Validation error',
                    message: 'Invalid user data',
                    details: error.issues,
                });
            }
            console.error('❌ Error creating user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create user',
            });
        }
    });
    /**
     * PUT /api/users/:id - Updates an existing user.
     */
    app.put('/api/users/:id', async (req, res) => {
        try {
            const { id } = req.params;
            if (!id) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'User ID is required',
                });
            }
            // Validate the update data (excluding password updates for security)
            const updateSchema = schema_1.insertUserSchema.partial().omit({ password: true });
            const validatedData = updateSchema.parse(req.body);
            const user = await storage_1.storage.updateUser(id, {
                ...validatedData,
                updatedAt: new Date(),
            });
            if (!user) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'User not found',
                });
            }
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                return res.status(400).json({
                    error: 'Validation error',
                    message: 'Invalid user data',
                    details: error.issues,
                });
            }
            console.error('❌ Error updating user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update user',
            });
        }
    });
    /**
     * DELETE /api/users/:id - Deactivates a user (soft delete).
     */
    app.delete('/api/users/:id', async (req, res) => {
        try {
            const { id } = req.params;
            if (!id) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'User ID is required',
                });
            }
            // Soft delete by setting isActive to false
            const user = await storage_1.storage.updateUser(id, {
                isActive: false,
                updatedAt: new Date(),
            });
            if (!user) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'User not found',
                });
            }
            res.json({
                message: 'User deactivated successfully',
                id: user.id,
            });
        }
        catch (error) {
            console.error('❌ Error deactivating user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to deactivate user',
            });
        }
    });
    /**
     * GET /api/user-organizations - Get current user's organizations.
     */
    app.get('/api/user-organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const organizations = await storage_1.storage.getUserOrganizations(currentUser.id);
            res.json(organizations);
        }
        catch (error) {
            console.error('❌ Error getting user organizations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user organizations',
            });
        }
    });
    /**
     * GET /api/user-residences - Get current user's residences.
     */
    app.get('/api/user-residences', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const residences = await storage_1.storage.getUserResidences(currentUser.id);
            res.json(residences);
        }
        catch (error) {
            console.error('❌ Error getting user residences:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user residences',
            });
        }
    });
    /**
     * GET /api/admin/all-user-organizations - Get user-organization relationships (admin: all, manager: filtered by their orgs).
     */
    app.get('/api/admin/all-user-organizations', auth_1.requireAuth, async (req, res) => {
        console.log('🔍 [API] all-user-organizations endpoint called by user:', req.user?.email);
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can access user assignments
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to view user assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            let userOrganizations;
            if (currentUser.role === 'admin') {
                // Admin sees all user-organization relationships
                userOrganizations = await db_1.db
                    .select({
                    userId: schema.userOrganizations.userId,
                    organizationId: schema.userOrganizations.organizationId,
                    organizationRole: schema.userOrganizations.organizationRole,
                    isActive: schema.userOrganizations.isActive,
                })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true));
            }
            else {
                // Manager sees only relationships for their organizations
                const managerOrgs = await db_1.db
                    .select({ organizationId: schema.userOrganizations.organizationId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                userOrganizations = await db_1.db
                    .select({
                    userId: schema.userOrganizations.userId,
                    organizationId: schema.userOrganizations.organizationId,
                    organizationRole: schema.userOrganizations.organizationRole,
                    isActive: schema.userOrganizations.isActive,
                })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true), (0, drizzle_orm_1.inArray)(schema.userOrganizations.organizationId, orgIds)));
            }
            res.json(userOrganizations);
        }
        catch (error) {
            console.error('❌ Error getting all user organizations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user organizations',
            });
        }
    });
    /**
     * GET /api/admin/all-user-residences - Get user-residence relationships (admin: all, manager: filtered by their orgs).
     */
    app.get('/api/admin/all-user-residences', auth_1.requireAuth, async (req, res) => {
        console.log('🔍 [API] all-user-residences endpoint called by user:', req.user?.email);
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can access user assignments
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to view user assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            let userResidences;
            if (currentUser.role === 'admin') {
                // Admin sees all user-residence relationships
                userResidences = await db_1.db
                    .select({
                    userId: schema.userResidences.userId,
                    residenceId: schema.userResidences.residenceId,
                    relationshipType: schema.userResidences.relationshipType,
                    startDate: schema.userResidences.startDate,
                    endDate: schema.userResidences.endDate,
                    isActive: schema.userResidences.isActive,
                })
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.isActive, true));
            }
            else {
                // Manager sees only relationships for residences in their organizations
                const managerOrgs = await db_1.db
                    .select({ organizationId: schema.userOrganizations.organizationId })
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                const orgIds = managerOrgs.map((org) => org.organizationId);
                if (orgIds.length === 0) {
                    return res.json([]);
                }
                // Get residences in manager's organizations
                const accessibleResidences = await db_1.db
                    .select({ residenceId: schema.residences.id })
                    .from(schema.residences)
                    .innerJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema.buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)));
                const residenceIds = accessibleResidences.map((res) => res.residenceId);
                if (residenceIds.length === 0) {
                    return res.json([]);
                }
                userResidences = await db_1.db
                    .select({
                    userId: schema.userResidences.userId,
                    residenceId: schema.userResidences.residenceId,
                    relationshipType: schema.userResidences.relationshipType,
                    startDate: schema.userResidences.startDate,
                    endDate: schema.userResidences.endDate,
                    isActive: schema.userResidences.isActive,
                })
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.isActive, true), (0, drizzle_orm_1.inArray)(schema.userResidences.residenceId, residenceIds)));
            }
            res.json(userResidences);
        }
        catch (error) {
            console.error('❌ Error getting all user residences:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user residences',
            });
        }
    });
    /**
     * GET /api/user/permissions - Retrieves the current user's permissions based on their role.
     * Protected endpoint that requires authentication.
     */
    app.get('/api/user/permissions', auth_1.requireAuth, async (req, res) => {
        try {
            // Get user role from session
            const userRole = req.user?.role;
            if (!userRole) {
                return res.status(400).json({
                    _error: 'Bad request',
                    message: 'User role not found in session',
                });
            }
            // Get permissions for the user's role from database
            const rolePermissions = await storage_1.storage.getRolePermissions();
            const userPermissions = rolePermissions
                .filter((rp) => rp.role === userRole)
                .map((rp) => rp.permission?.name)
                .filter(Boolean);
            // Create response with Zod validation
            const responseData = {
                role: userRole,
                permissions: userPermissions,
                permissionCount: userPermissions.length,
            };
            // Validate response with Zod schema
            const permissionsResponseSchema = zod_1.z.object({
                role: zod_1.z.enum(['admin', 'manager', 'tenant', 'resident']),
                permissions: zod_1.z.array(zod_1.z.string()),
                permissionCount: zod_1.z.number(),
            });
            const validatedResponse = permissionsResponseSchema.parse(responseData);
            res.json(validatedResponse);
        }
        catch (error) {
            if (error instanceof zod_1.z.ZodError) {
                return res.status(500).json({
                    error: 'Internal server error',
                    message: 'Failed to validate permissions response',
                    details: error.issues,
                });
            }
            console.error('❌ Error fetching user permissions:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user permissions',
            });
        }
    });
    /**
     * PUT /api/users/:id/organizations - Updates user's organization assignments.
     * Admin: can assign/remove any organization
     * Manager: cannot modify organization assignments.
     */
    app.put('/api/users/:id/organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { organizationIds } = req.body;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins can modify organization assignments
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Only administrators can modify organization assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            if (!userId || !Array.isArray(organizationIds)) {
                return res.status(400).json({
                    message: 'User ID and organization IDs array are required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Verify user exists
            const user = await storage_1.storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // Remove existing organization assignments
            await db_1.db.delete(schema.userOrganizations).where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, userId));
            // Add new organization assignments
            if (organizationIds.length > 0) {
                const newAssignments = organizationIds.map((orgId) => ({
                    userId,
                    organizationId: orgId,
                    organizationRole: user.role,
                    isActive: true,
                }));
                await db_1.db.insert(schema.userOrganizations).values(newAssignments);
            }
            res.json({
                message: 'Organization assignments updated successfully',
                userId,
                organizationIds,
            });
        }
        catch (error) {
            console.error('❌ Error updating organization assignments:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update organization assignments',
            });
        }
    });
    /**
     * GET /api/users/:id/residences - Get user's accessible residences.
     */
    app.get('/api/users/:id/residences', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Users can only access their own residences unless they're admin/manager
            if (currentUser.id !== userId && !['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            const residences = await storage_1.storage.getUserResidences(userId);
            res.json(residences);
        }
        catch (error) {
            console.error('❌ Error getting user residences:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user residences',
            });
        }
    });
    /**
     * GET /api/users/:id/buildings - Get user's accessible buildings based on their residences.
     */
    app.get('/api/users/:id/buildings', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Users can only access their own buildings unless they're admin/manager
            if (currentUser.id !== userId && !['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Get user's residences with building information
            const userResidences = await db_1.db
                .select({
                residenceId: schema.userResidences.residenceId,
                buildingId: schema.residences.buildingId,
            })
                .from(schema.userResidences)
                .innerJoin(schema.residences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userResidences.userId, userId), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)));
            if (!userResidences || userResidences.length === 0) {
                return res.json({ buildings: [] });
            }
            // Get unique building IDs from user's residences
            const buildingIds = [...new Set(userResidences.map(ur => ur.buildingId).filter(Boolean))];
            if (buildingIds.length === 0) {
                return res.json({ buildings: [] });
            }
            // Fetch building details with stats using the existing logic from /api/manager/buildings
            const buildingDetails = await db_1.db
                .select({
                id: schema.buildings.id,
                name: schema.buildings.name,
                address: schema.buildings.address,
                city: schema.buildings.city,
                province: schema.buildings.province,
                postalCode: schema.buildings.postalCode,
                buildingType: schema.buildings.buildingType,
                yearBuilt: schema.buildings.yearBuilt,
                totalFloors: schema.buildings.totalFloors,
                parkingSpaces: schema.buildings.parkingSpaces,
                storageSpaces: schema.buildings.storageSpaces,
                managementCompany: schema.buildings.managementCompany,
                amenities: schema.buildings.amenities,
                organizationId: schema.buildings.organizationId,
                organizationName: schema.organizations.name,
                organizationType: schema.organizations.type,
            })
                .from(schema.buildings)
                .leftJoin(schema.organizations, (0, drizzle_orm_1.eq)(schema.buildings.organizationId, schema.organizations.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema.buildings.id, buildingIds), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true)));
            // Calculate stats for each building
            const buildingsWithStats = await Promise.all(buildingDetails.map(async (building) => {
                const [totalUnits, occupiedUnits] = await Promise.all([
                    db_1.db
                        .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                        .from(schema.residences)
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.residences.buildingId, building.id), (0, drizzle_orm_1.eq)(schema.residences.isActive, true)))
                        .then(result => result[0]?.count || 0),
                    db_1.db
                        .select({ count: (0, drizzle_orm_1.sql) `count(distinct ${schema.residences.id})` })
                        .from(schema.residences)
                        .leftJoin(schema.userResidences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.residences.buildingId, building.id), (0, drizzle_orm_1.eq)(schema.residences.isActive, true), (0, drizzle_orm_1.eq)(schema.userResidences.isActive, true)))
                        .then(result => result[0]?.count || 0),
                ]);
                const vacantUnits = totalUnits - occupiedUnits;
                const occupancyRate = totalUnits > 0 ? (occupiedUnits / totalUnits) * 100 : 0;
                return {
                    ...building,
                    totalUnits,
                    occupiedUnits,
                    vacantUnits,
                    occupancyRate,
                };
            }));
            res.json({ buildings: buildingsWithStats });
        }
        catch (error) {
            console.error('❌ Error getting user buildings:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to get user buildings',
            });
        }
    });
    /**
     * PUT /api/users/:id/residences - Updates user's residence assignments.
     * Admin: can assign/remove any residence
     * Manager: can assign/remove residences within their organizations only.
     */
    app.put('/api/users/:id/residences', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: userId } = req.params;
            const { residenceAssignments } = req.body; // Array of { residenceId, relationshipType, startDate, endDate }
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can modify residence assignments
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions to modify residence assignments',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            if (!userId || !Array.isArray(residenceAssignments)) {
                return res.status(400).json({
                    message: 'User ID and residence assignments array are required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Verify user exists
            const user = await storage_1.storage.getUser(userId);
            if (!user) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // For managers, verify they can access all requested residences
            if (currentUser.role === 'manager') {
                for (const assignment of residenceAssignments) {
                    // Get the building for this residence
                    const residence = await db_1.db
                        .select({ buildingId: schema.residences.buildingId })
                        .from(schema.residences)
                        .where((0, drizzle_orm_1.eq)(schema.residences.id, assignment.residenceId))
                        .limit(1);
                    if (residence.length === 0) {
                        return res.status(404).json({
                            message: `Residence ${assignment.residenceId} not found`,
                            code: 'RESIDENCE_NOT_FOUND',
                        });
                    }
                    // Check if manager has access to this building
                    // Get buildings accessible to this manager through their organizations
                    const managerOrgs = await db_1.db
                        .select({ organizationId: schema.userOrganizations.organizationId })
                        .from(schema.userOrganizations)
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)));
                    const orgIds = managerOrgs.map((org) => org.organizationId);
                    const accessibleBuildings = orgIds.length > 0
                        ? await db_1.db
                            .select({ id: schema.buildings.id })
                            .from(schema.buildings)
                            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema.buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(schema.buildings.isActive, true)))
                        : [];
                    const hasAccess = accessibleBuildings.some((b) => b.id === residence[0].buildingId);
                    if (!hasAccess) {
                        return res.status(403).json({
                            message: `Insufficient permissions for residence ${assignment.residenceId}`,
                            code: 'INSUFFICIENT_PERMISSIONS',
                        });
                    }
                }
            }
            // Remove existing residence assignments
            await db_1.db.delete(schema.userResidences).where((0, drizzle_orm_1.eq)(schema.userResidences.userId, userId));
            // Add new residence assignments
            if (residenceAssignments.length > 0) {
                const newAssignments = residenceAssignments.map((assignment) => ({
                    userId,
                    residenceId: assignment.residenceId,
                    relationshipType: assignment.relationshipType || 'tenant',
                    startDate: assignment.startDate || new Date().toISOString().split('T')[0],
                    endDate: assignment.endDate || null,
                    isActive: true,
                }));
                await db_1.db.insert(schema.userResidences).values(newAssignments);
            }
            res.json({
                message: 'Residence assignments updated successfully',
                userId,
                assignmentCount: residenceAssignments.length,
            });
        }
        catch (error) {
            console.error('❌ Error updating residence assignments:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update residence assignments',
            });
        }
    });
    /**
     * GET /api/users/me/organizations - Get organizations accessible to current user.
     * Used by invite form to populate organization dropdown.
     */
    app.get('/api/users/me/organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            console.log(`📊 Fetching user-accessible organizations for ${currentUser.email} (${currentUser.role})`);
            // Get organizations based on user role - same logic as /api/organizations
            let organizationsQuery;
            if (currentUser.role === 'admin') {
                // Admin can see all organizations
                organizationsQuery = db_1.db
                    .select({
                    id: schema.organizations.id,
                    name: schema.organizations.name,
                    type: schema.organizations.type,
                    address: schema.organizations.address,
                    city: schema.organizations.city,
                    province: schema.organizations.province,
                    postalCode: schema.organizations.postalCode,
                    phone: schema.organizations.phone,
                    email: schema.organizations.email,
                    website: schema.organizations.website,
                    registrationNumber: schema.organizations.registrationNumber,
                    isActive: schema.organizations.isActive,
                    createdAt: schema.organizations.createdAt,
                })
                    .from(schema.organizations)
                    .where((0, drizzle_orm_1.eq)(schema.organizations.isActive, true))
                    .orderBy(schema.organizations.name);
            }
            else {
                // Other users see organizations they have access to through user_organizations
                organizationsQuery = db_1.db
                    .select({
                    id: schema.organizations.id,
                    name: schema.organizations.name,
                    type: schema.organizations.type,
                    address: schema.organizations.address,
                    city: schema.organizations.city,
                    province: schema.organizations.province,
                    postalCode: schema.organizations.postalCode,
                    phone: schema.organizations.phone,
                    email: schema.organizations.email,
                    website: schema.organizations.website,
                    registrationNumber: schema.organizations.registrationNumber,
                    isActive: schema.organizations.isActive,
                    createdAt: schema.organizations.createdAt,
                })
                    .from(schema.organizations)
                    .innerJoin(schema.userOrganizations, (0, drizzle_orm_1.eq)(schema.organizations.id, schema.userOrganizations.organizationId))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.organizations.isActive, true), (0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema.userOrganizations.isActive, true)))
                    .orderBy(schema.organizations.name);
            }
            const accessibleOrganizations = await organizationsQuery;
            console.log(`✅ Found ${accessibleOrganizations.length} organizations for user ${currentUser.id}`);
            // Return array directly (not wrapped in object) - same format as /api/organizations
            res.json(accessibleOrganizations);
        }
        catch (error) {
            console.error('❌ Error fetching user organizations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch user organizations',
            });
        }
    });
    /**
     * GET /api/users/me/data-export - Download user data for Law 25 compliance.
     */
    app.get('/api/users/me/data-export', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Get all user data for export
            const userData = await storage_1.storage.getUser(currentUser.id);
            if (!userData) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // Remove sensitive fields
            const { password, ...userDataExport } = userData;
            // Get related data
            const [organizations, residences, bills, documents, notifications, maintenanceRequests] = await Promise.all([
                db_1.db
                    .select()
                    .from(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.bills)
                    .innerJoin(schema.userResidences, (0, drizzle_orm_1.eq)(schema.bills.residenceId, schema.userResidences.residenceId))
                    .where((0, drizzle_orm_1.eq)(schema.userResidences.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.documents)
                    .where((0, drizzle_orm_1.eq)(schema.documents.uploadedById, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.notifications)
                    .where((0, drizzle_orm_1.eq)(schema.notifications.userId, currentUser.id)),
                db_1.db
                    .select()
                    .from(schema.maintenanceRequests)
                    .where((0, drizzle_orm_1.eq)(schema.maintenanceRequests.submittedBy, currentUser.id)),
            ]);
            const exportData = {
                personalInformation: userDataExport,
                organizations,
                residences,
                bills: bills.map((b) => b.bills),
                documents: documents,
                notifications,
                maintenanceRequests,
                exportDate: new Date().toISOString(),
                note: 'This export contains all personal data we have on file for you in compliance with Quebec Law 25.',
            };
            res.setHeader('Content-Type', 'application/json');
            res.setHeader('Content-Disposition', `attachment; filename="user-data-export-${currentUser.id}-${new Date().toISOString().split('T')[0]}.json"`);
            res.json(exportData);
        }
        catch (error) {
            console.error('❌ Error exporting user data:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to export user data',
            });
        }
    });
    /**
     * POST /api/users/me/delete-account - Complete account deletion for Law 25 compliance.
     */
    app.post('/api/users/me/delete-account', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const { confirmEmail, reason } = req.body;
            // Verify email confirmation
            if (confirmEmail !== currentUser.email) {
                return res.status(400).json({
                    message: 'Email confirmation does not match',
                    code: 'EMAIL_MISMATCH',
                });
            }
            // Delete all related data in the correct order to handle foreign key constraints
            await Promise.all([
                // Delete user relationships
                db_1.db
                    .delete(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, currentUser.id)),
                db_1.db.delete(schema.userResidences).where((0, drizzle_orm_1.eq)(schema.userResidences.userId, currentUser.id)),
                db_1.db
                    .delete(schema.documents)
                    .where((0, drizzle_orm_1.eq)(schema.documents.uploadedById, currentUser.id)),
                // Delete user-created content
                db_1.db.delete(schema.notifications).where((0, drizzle_orm_1.eq)(schema.notifications.userId, currentUser.id)),
                db_1.db
                    .delete(schema.maintenanceRequests)
                    .where((0, drizzle_orm_1.eq)(schema.maintenanceRequests.submittedBy, currentUser.id)),
                // Delete invitations
                db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.email, currentUser.email)),
            ]);
            // Finally, delete the user account
            await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, currentUser.id));
            // Log the deletion for audit purposes
            console.log(`User account deleted: ${currentUser.email} (${currentUser.id}). Reason: ${reason || 'Not provided'}`);
            // Clear session
            if (req.session) {
                req.session.destroy((err) => {
                    if (err) {
                        console.error('Failed to destroy session after account deletion:', err);
                    }
                });
            }
            res.json({
                message: 'Account successfully deleted. All personal data has been permanently removed from our systems.',
                deletionDate: new Date().toISOString(),
            });
        }
        catch (error) {
            console.error('❌ Error deleting account:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to delete account. Please contact support.',
            });
        }
    });
    /**
     * PUT /api/users/me - Update current user's profile.
     */
    app.put('/api/users/me', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate the update data (excluding password updates for security)
            const updateSchema = schema_1.insertUserSchema
                .partial()
                .omit({ password: true, id: true, role: true });
            const validatedData = updateSchema.parse(req.body);
            const user = await storage_1.storage.updateUser(currentUser.id, {
                ...validatedData,
                updatedAt: new Date(),
            });
            if (!user) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // Remove sensitive information before sending response
            const { password, ...userWithoutPassword } = user;
            res.json(userWithoutPassword);
        }
        catch (error) {
            console.error('❌ Error updating user profile:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update profile',
            });
        }
    });
    /**
     * POST /api/users/:id/delete-account - RESTRICTED Admin endpoint to delete any user account.
     * SAFETY: Requires email confirmation and deletion reason for audit trail.
     * WARNING: This is a permanent operation that should only be used in exceptional cases.
     */
    app.post('/api/users/:id/delete-account', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            const { id: targetUserId } = req.params;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins can delete other users' accounts
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Only administrators can delete user accounts',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Additional safety check: Log this critical operation
            console.warn(`⚠️  CRITICAL: Admin ${currentUser.email} attempting to delete user ${targetUserId}`);
            if (!targetUserId) {
                return res.status(400).json({
                    message: 'User ID is required',
                    code: 'INVALID_REQUEST',
                });
            }
            // Verify target user exists
            const targetUser = await storage_1.storage.getUser(targetUserId);
            if (!targetUser) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            const { confirmEmail, reason } = req.body;
            // Verify email confirmation
            if (confirmEmail !== targetUser.email) {
                return res.status(400).json({
                    message: 'Email confirmation does not match',
                    code: 'EMAIL_MISMATCH',
                });
            }
            // Delete all related data in the correct order to handle foreign key constraints
            const deletionPromises = [
                // Delete user relationships
                db_1.db
                    .delete(schema.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, targetUserId)),
                db_1.db.delete(schema.userResidences).where((0, drizzle_orm_1.eq)(schema.userResidences.userId, targetUserId)),
                db_1.db
                    .delete(schema.documents)
                    .where((0, drizzle_orm_1.eq)(schema.documents.uploadedById, targetUserId)),
                // Delete invitations
                db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.email, targetUser.email)),
            ];
            // Try to delete from optional tables that might not exist
            const optionalDeletions = [
                async () => {
                    try {
                        await db_1.db
                            .delete(schema.notifications)
                            .where((0, drizzle_orm_1.eq)(schema.notifications.userId, targetUserId));
                    }
                    catch (error) {
                        if (error.cause?.code === '42P01') {
                            console.log('Notifications table not found, skipping...');
                        }
                        else {
                            throw error;
                        }
                    }
                },
                async () => {
                    try {
                        await db_1.db
                            .delete(schema.maintenanceRequests)
                            .where((0, drizzle_orm_1.eq)(schema.maintenanceRequests.submittedBy, targetUserId));
                    }
                    catch (error) {
                        if (error.cause?.code === '42P01') {
                            console.log('Maintenance requests table not found, skipping...');
                        }
                        else {
                            throw error;
                        }
                    }
                },
            ];
            // Execute core deletions first
            await Promise.all(deletionPromises);
            // Execute optional deletions
            await Promise.all(optionalDeletions.map((fn) => fn()));
            // Finally, delete the user account
            await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, targetUserId));
            // Clear all caches to ensure the user list updates immediately
            query_cache_1.queryCache.invalidate('users', 'all_users');
            query_cache_1.queryCache.invalidate('users', `user:${targetUserId}`);
            query_cache_1.queryCache.invalidate('users', `user_email:${targetUser.email}`);
            // Log the deletion for audit purposes
            console.log(`User account deleted by admin ${currentUser.email} (${currentUser.id}): ${targetUser.email} (${targetUserId}). Reason: ${reason || 'Not provided'}`);
            res.json({
                message: 'User account and all associated data have been permanently deleted',
                deletedUserId: targetUserId,
                deletedUserEmail: targetUser.email,
            });
        }
        catch (error) {
            console.error('❌ Error deleting user account:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to delete user account',
            });
        }
    });
    /**
     * POST /api/users/me/change-password - Change current user's password.
     */
    app.post('/api/users/me/change-password', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const { currentPassword, newPassword } = req.body;
            if (!currentPassword || !newPassword) {
                return res.status(400).json({
                    message: 'Current password and new password are required',
                    code: 'INVALID_INPUT',
                });
            }
            // Verify current password
            const user = await storage_1.storage.getUser(currentUser.id);
            if (!user || !(await bcrypt.compare(currentPassword, user.password))) {
                return res.status(400).json({
                    message: 'Current password is incorrect',
                    code: 'INVALID_PASSWORD',
                });
            }
            // Hash new password
            const hashedPassword = await bcrypt.hash(newPassword, 12);
            // Update password
            await storage_1.storage.updateUser(currentUser.id, {
                password: hashedPassword,
                updatedAt: new Date(),
            });
            res.json({
                message: 'Password changed successfully',
            });
        }
        catch (error) {
            console.error('❌ Error changing password:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to change password',
            });
        }
    });
    /**
     * POST /api/users/demo - Creates a demo user directly without invitation
     */
    app.post('/api/users/demo', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can create demo users
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            const { firstName, lastName, role, organizationId, residenceId } = req.body;
            // Validate demo role
            if (!['demo_manager', 'demo_tenant', 'demo_resident'].includes(role)) {
                return res.status(400).json({
                    message: 'Invalid demo role',
                    code: 'INVALID_ROLE',
                });
            }
            // Validate required fields
            if (!firstName || !lastName || !organizationId) {
                return res.status(400).json({
                    message: 'First name, last name, and organization are required',
                    code: 'MISSING_REQUIRED_FIELDS',
                });
            }
            // Generate demo email
            const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@demo.com`;
            // Check if user already exists
            const existingUser = await storage_1.storage.getUserByEmail(email);
            if (existingUser) {
                return res.status(400).json({
                    message: 'Demo user with this name already exists',
                    code: 'USER_EXISTS',
                });
            }
            // Create demo user with secure random password
            const randomPassword = (0, crypto_1.randomBytes)(12).toString('base64');
            const hashedPassword = await bcrypt.hash(`Demo${randomPassword}!`, 12);
            const userData = {
                firstName: (0, input_sanitization_1.sanitizeName)(firstName),
                lastName: (0, input_sanitization_1.sanitizeName)(lastName),
                email: (0, input_sanitization_1.normalizeEmail)(email),
                username: (0, input_sanitization_1.generateUsernameFromEmail)(email),
                password: hashedPassword,
                language: 'fr', // Default to French for Quebec
                role: role,
                isActive: true,
            };
            const newUser = await storage_1.storage.createUser(userData);
            // Log the user creation
            (0, user_creation_logger_1.logUserCreation)({
                userId: newUser.id,
                email: newUser.email,
                method: 'direct',
                role,
                success: true,
                timestamp: new Date(),
            });
            // Clear cache
            query_cache_1.queryCache.invalidate('users', 'all_users');
            res.status(201).json({
                message: 'Demo user created successfully',
                user: {
                    id: newUser.id,
                    firstName: newUser.firstName,
                    lastName: newUser.lastName,
                    email: newUser.email,
                    role: newUser.role,
                },
            });
        }
        catch (error) {
            console.error('❌ Error creating demo user:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create demo user',
            });
        }
    });
    /**
     * POST /api/invitations - Creates a new invitation
     */
    app.post('/api/invitations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can send invitations
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            const { organizationId, residenceId, email, role, invitedByUserId, expiresAt, personalMessage, } = req.body;
            // Validate required fields first
            if (!organizationId || !email || !role || !expiresAt) {
                return res.status(400).json({
                    message: 'Organization, email, role, and expiry date are required',
                    code: 'MISSING_REQUIRED_FIELDS',
                });
            }
            // Then validate email format
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                return res.status(400).json({
                    message: 'Invalid email format',
                    code: 'INVALID_EMAIL',
                });
            }
            // Validate role permissions
            if (currentUser.role === 'manager') {
                // Check if manager is trying to invite admin
                if (role === 'admin') {
                    return res.status(403).json({
                        message: 'Managers can only invite resident, tenant, and manager roles',
                        code: 'ROLE_PERMISSION_DENIED',
                    });
                }
                // Get the demo organization to check if it's a demo org
                const targetOrg = await db_1.db
                    .select()
                    .from(schema.organizations)
                    .where((0, drizzle_orm_1.eq)(schema.organizations.id, organizationId))
                    .limit(1);
                if (targetOrg.length > 0 && targetOrg[0].type === 'Demo') {
                    // For demo organizations, allow normal roles (resident, tenant, manager)
                    if (!['resident', 'tenant', 'manager'].includes(role)) {
                        return res.status(403).json({
                            message: 'Invalid role for demo organization',
                            code: 'INVALID_DEMO_ROLE',
                        });
                    }
                }
                else {
                    // For regular organizations, managers can invite resident, tenant, manager
                    if (!['resident', 'tenant', 'manager'].includes(role)) {
                        return res.status(403).json({
                            message: 'Managers can only invite resident, tenant, and manager roles',
                            code: 'ROLE_PERMISSION_DENIED',
                        });
                    }
                }
            }
            // Check if user already exists
            const existingUser = await storage_1.storage.getUserByEmail(email);
            if (existingUser) {
                return res.status(400).json({
                    message: 'User with this email already exists',
                    code: 'USER_EXISTS',
                });
            }
            // Check for existing pending invitations for the same email and organization
            // If found, delete them to replace with new invitation
            const existingInvitations = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitations.email, email), (0, drizzle_orm_1.eq)(schema.invitations.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema.invitations.status, 'pending')));
            if (existingInvitations.length > 0) {
                console.log(`🔄 Replacing ${existingInvitations.length} existing invitation(s) for email: ${email}`);
                // Delete existing pending invitations for this email/organization
                await db_1.db
                    .delete(schema.invitations)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitations.email, email), (0, drizzle_orm_1.eq)(schema.invitations.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema.invitations.status, 'pending')));
            }
            // Generate secure invitation token
            const token = (0, crypto_1.randomBytes)(32).toString('hex');
            const tokenHash = (0, crypto_1.createHash)('sha256').update(token).digest('hex');
            // Create invitation record
            const invitationData = {
                organizationId,
                residenceId: residenceId || null,
                email,
                token,
                tokenHash,
                role: role,
                invitedByUserId: currentUser.id,
                expiresAt: new Date(expiresAt),
                personalMessage: personalMessage || null,
            };
            const [newInvitation] = await db_1.db
                .insert(schema.invitations)
                .values(invitationData)
                .returning();
            // Get organization details for email
            const [organization] = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, organizationId))
                .limit(1);
            // Send invitation email
            const recipientName = email.split('@')[0]; // Use email prefix as name
            const organizationName = organization?.name || 'Koveo Gestion';
            const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ''}`.trim();
            const emailSent = await email_service_1.emailService.sendInvitationEmail(email, recipientName, token, // Use the unhashed token for the email URL
            organizationName, inviterName, new Date(expiresAt), 'fr', // Default to French for Quebec
            personalMessage);
            // Log invitation creation
            console.log('✅ Invitation created:', {
                id: newInvitation.id,
                email,
                role,
                organizationId,
                invitedBy: currentUser.email,
                emailSent,
            });
            // For tests, we'll treat email failure as success since tests may not have email configured
            if (!emailSent && process.env.NODE_ENV !== 'test') {
                // If email failed but invitation was created, log the issue
                console.error('⚠️ Invitation created but email failed to send');
                return res.status(207).json({
                    message: 'Invitation created but email failed to send',
                    invitationId: newInvitation.id,
                    emailSent: false,
                });
            }
            res.status(201).json({
                message: 'Invitation sent successfully',
                invitationId: newInvitation.id,
                emailSent: true,
            });
        }
        catch (error) {
            console.error('❌ Error creating invitation:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create invitation',
            });
        }
    });
    /**
     * GET /api/invitations - Gets all invitations (admin/manager only)
     */
    app.get('/api/invitations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admins and managers can view invitations
            if (!['admin', 'manager'].includes(currentUser.role)) {
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            let invitations;
            if (currentUser.role === 'admin') {
                // Admin can see all invitations
                invitations = await db_1.db
                    .select()
                    .from(schema.invitations)
                    .orderBy(schema.invitations.createdAt);
            }
            else {
                // Managers can only see invitations they sent
                invitations = await db_1.db
                    .select()
                    .from(schema.invitations)
                    .where((0, drizzle_orm_1.eq)(schema.invitations.invitedByUserId, currentUser.id))
                    .orderBy(schema.invitations.createdAt);
            }
            res.json(invitations);
        }
        catch (error) {
            console.error('❌ Error fetching invitations:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch invitations',
            });
        }
    });
    /**
     * POST /api/invitations/validate - Validates an invitation token
     * Public endpoint for invitation validation during registration
     */
    app.post('/api/invitations/validate', async (req, res) => {
        try {
            const { token } = req.body;
            if (!token) {
                return res.status(400).json({
                    isValid: false,
                    message: 'Token is required',
                    code: 'TOKEN_REQUIRED',
                });
            }
            // Get invitation by token
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.token, token))
                .limit(1);
            if (!invitation) {
                return res.status(404).json({
                    isValid: false,
                    message: 'Invitation not found or invalid token',
                    code: 'INVITATION_NOT_FOUND',
                });
            }
            // Check if invitation is expired
            const now = new Date();
            const expiresAt = new Date(invitation.expiresAt);
            if (now > expiresAt) {
                return res.status(400).json({
                    isValid: false,
                    message: 'Invitation has expired',
                    code: 'INVITATION_EXPIRED',
                });
            }
            // Check if invitation is already used
            if (invitation.status === 'accepted') {
                return res.status(400).json({
                    isValid: false,
                    message: 'Invitation has already been used',
                    code: 'INVITATION_ALREADY_USED',
                });
            }
            // Get organization information
            const [organization] = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, invitation.organizationId))
                .limit(1);
            // Get inviter information
            const [inviter] = await db_1.db
                .select({
                id: schema.users.id,
                firstName: schema.users.firstName,
                lastName: schema.users.lastName,
                email: schema.users.email,
            })
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.id, invitation.invitedByUserId))
                .limit(1);
            // Return successful validation
            res.json({
                isValid: true,
                invitation: {
                    id: invitation.id,
                    email: invitation.email,
                    role: invitation.role,
                    expiresAt: invitation.expiresAt,
                    createdAt: invitation.createdAt,
                },
                organizationName: organization?.name || 'Unknown Organization',
                inviterName: inviter ? `${inviter.firstName} ${inviter.lastName}`.trim() : 'Unknown User',
            });
        }
        catch (error) {
            console.error('❌ Error validating invitation:', error);
            res.status(500).json({
                isValid: false,
                message: 'Internal server error during validation',
                code: 'VALIDATION_ERROR',
            });
        }
    });
    /**
     * POST /api/invitations/accept/:token - Accept an invitation and create user account
     * Public endpoint for completing registration via invitation
     */
    app.post('/api/invitations/accept/:token', async (req, res) => {
        try {
            const { token } = req.params;
            const { firstName, lastName, password, phone, language, dataCollectionConsent, marketingConsent, analyticsConsent, thirdPartyConsent, acknowledgedRights, } = req.body;
            if (!token) {
                return res.status(400).json({
                    message: 'Token is required',
                    code: 'TOKEN_REQUIRED',
                });
            }
            // Get invitation by token
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.token, token))
                .limit(1);
            if (!invitation) {
                return res.status(404).json({
                    message: 'Invitation not found or invalid token',
                    code: 'INVITATION_NOT_FOUND',
                });
            }
            // Check if invitation is expired
            const now = new Date();
            const expiresAt = new Date(invitation.expiresAt);
            if (now > expiresAt) {
                return res.status(400).json({
                    message: 'Invitation has expired',
                    code: 'INVITATION_EXPIRED',
                });
            }
            // Check if invitation is already used
            if (invitation.status === 'accepted') {
                return res.status(400).json({
                    message: 'Invitation has already been used',
                    code: 'INVITATION_ALREADY_USED',
                });
            }
            // Validate required fields
            if (!firstName || !lastName || !password) {
                return res.status(400).json({
                    message: 'First name, last name, and password are required',
                    code: 'MISSING_REQUIRED_FIELDS',
                });
            }
            // Validate required consents
            if (!dataCollectionConsent || !acknowledgedRights) {
                return res.status(400).json({
                    message: 'Required privacy consents must be given',
                    code: 'MISSING_REQUIRED_CONSENTS',
                });
            }
            // Hash password
            const hashedPassword = await bcrypt.hash(password, 12);
            // Create user account
            const userData = {
                firstName: (0, input_sanitization_1.sanitizeName)(firstName),
                lastName: (0, input_sanitization_1.sanitizeName)(lastName),
                email: (0, input_sanitization_1.normalizeEmail)(invitation.email),
                username: (0, input_sanitization_1.generateUsernameFromEmail)(invitation.email),
                password: hashedPassword,
                phone: phone ? (0, input_sanitization_1.sanitizeString)(phone) : '',
                language: language || 'fr',
                role: invitation.role,
                isActive: true,
                organizationId: invitation.organizationId,
            };
            const newUser = await storage_1.storage.createUser(userData);
            // Create organization assignment if organizationId is provided
            if (invitation.organizationId) {
                await db_1.db.insert(schema.userOrganizations).values({
                    userId: newUser.id,
                    organizationId: invitation.organizationId,
                    organizationRole: invitation.role,
                    isActive: true,
                });
                console.log('✅ User assigned to organization:', {
                    userId: newUser.id,
                    organizationId: invitation.organizationId,
                    role: invitation.role,
                });
            }
            // Create residence assignment if residenceId is provided
            if (invitation.residenceId) {
                await db_1.db.insert(schema.userResidences).values({
                    userId: newUser.id,
                    residenceId: invitation.residenceId,
                    relationshipType: invitation.role === 'tenant' ? 'tenant' : 'occupant',
                    startDate: new Date(),
                    isActive: true,
                });
                console.log('✅ User assigned to residence:', {
                    userId: newUser.id,
                    residenceId: invitation.residenceId,
                    relationshipType: invitation.role === 'tenant' ? 'tenant' : 'occupant',
                });
            }
            // Mark invitation as accepted
            await db_1.db
                .update(schema.invitations)
                .set({
                status: 'accepted',
                acceptedAt: new Date(),
                acceptedBy: newUser.id,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, invitation.id));
            // Log user creation
            (0, user_creation_logger_1.logUserCreation)({
                userId: newUser.id,
                email: newUser.email,
                method: 'invitation',
                role: invitation.role,
                success: true,
                timestamp: new Date(),
            });
            // Clear cache
            query_cache_1.queryCache.invalidate('users', 'all_users');
            query_cache_1.queryCache.invalidate('invitations');
            console.log('✅ User created via invitation acceptance:', {
                userId: newUser.id,
                email: newUser.email,
                role: newUser.role,
                organizationId: invitation.organizationId,
                residenceId: invitation.residenceId,
                assignedToOrganization: !!invitation.organizationId,
                assignedToResidence: !!invitation.residenceId,
            });
            res.status(201).json({
                message: 'Account created successfully',
                user: {
                    id: newUser.id,
                    firstName: newUser.firstName,
                    lastName: newUser.lastName,
                    email: newUser.email,
                    role: newUser.role,
                    language: newUser.language,
                },
            });
        }
        catch (error) {
            console.error('❌ Error accepting invitation:', error);
            res.status(500).json({
                message: 'Internal server error during account creation',
                code: 'INVITATION_ACCEPT_ERROR',
            });
        }
    });
    /**
     * POST /api/invitations/:id/resend - Resends an invitation
     */
    app.post('/api/invitations/:id/resend', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const { id } = req.params;
            // Get invitation
            const [invitation] = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, id))
                .limit(1);
            if (!invitation) {
                return res.status(404).json({
                    message: 'Invitation not found',
                    code: 'INVITATION_NOT_FOUND',
                });
            }
            // Check permissions
            if (currentUser.role !== 'admin' && invitation.invitedByUserId !== currentUser.id) {
                return res.status(403).json({
                    message: 'Can only resend your own invitations',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Update invitation with new expiry
            const newExpiresAt = new Date();
            newExpiresAt.setDate(newExpiresAt.getDate() + 7); // Extend by 7 days
            await db_1.db
                .update(schema.invitations)
                .set({
                expiresAt: newExpiresAt,
                status: 'pending',
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, id));
            // Get organization details for email
            const [organization] = await db_1.db
                .select()
                .from(schema.organizations)
                .where((0, drizzle_orm_1.eq)(schema.organizations.id, invitation.organizationId))
                .limit(1);
            // Send invitation email again
            const recipientName = invitation.email.split('@')[0]; // Use email prefix as name
            const organizationName = organization?.name || 'Koveo Gestion';
            const inviterName = `${currentUser.firstName || currentUser.email} ${currentUser.lastName || ''}`.trim();
            const emailSent = await email_service_1.emailService.sendInvitationEmail(invitation.email, recipientName, invitation.token, // Use the existing token
            organizationName, inviterName, newExpiresAt, 'fr', // Default to French for Quebec
            invitation.personalMessage);
            console.log('✅ Invitation resent:', {
                id,
                email: invitation.email,
                newExpiresAt,
                emailSent,
            });
            if (!emailSent) {
                console.error('⚠️ Invitation updated but email failed to resend');
                return res.status(207).json({
                    message: 'Invitation updated but email failed to resend',
                    emailSent: false,
                });
            }
            res.json({
                message: 'Invitation resent successfully',
                emailSent: true,
            });
        }
        catch (error) {
            console.error('❌ Error resending invitation:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to resend invitation',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,