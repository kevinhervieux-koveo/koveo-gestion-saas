bb7b208dc2f982eb4ff264fcc7430ba5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStandardForm = useStandardForm;
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const use_toast_1 = require("@/hooks/use-toast");
const queryClient_1 = require("@/lib/queryClient");
/**
 * Standard form hook that consolidates common form patterns across the app.
 * Combines useForm + zodResolver + useMutation with standardized error handling and toast notifications.
 *
 * @param config - Configuration object with schema, defaultValues, API endpoint, etc.
 * @returns Extended form object with standardized submission handling
 */
function useStandardForm({ schema, defaultValues, apiEndpoint, queryKey, mode = 'create', itemId, onSuccess, successMessages = {
    create: 'Item created successfully',
    update: 'Item updated successfully',
}, }) {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(schema),
        defaultValues: defaultValues,
    });
    const createMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const response = await (0, queryClient_1.apiRequest)('POST', apiEndpoint, data);
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || `Failed to create item`);
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: successMessages.create,
            });
            queryClient.invalidateQueries({ queryKey });
            onSuccess?.();
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    const updateMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            if (!itemId)
                throw new Error('Item ID is required for update');
            const response = await (0, queryClient_1.apiRequest)('PUT', `${apiEndpoint}/${itemId}`, data);
            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || `Failed to update item`);
            }
            return response.json();
        },
        onSuccess: () => {
            toast({
                title: 'Success',
                description: successMessages.update,
            });
            queryClient.invalidateQueries({ queryKey });
            onSuccess?.();
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    const submitMutation = mode === 'create' ? createMutation : updateMutation;
    const isSubmitting = submitMutation.isPending;
    const handleSubmit = (0, react_1.useCallback)((onValid) => {
        return form.handleSubmit((data) => {
            // Allow for custom data transformation before submission
            onValid(data);
        });
    }, [form]);
    return {
        form,
        handleSubmit,
        isSubmitting,
        submitMutation,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,