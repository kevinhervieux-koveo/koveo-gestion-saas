{"file":"/home/runner/workspace/tests/unit/hierarchical-navigation-components.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/hierarchical-navigation-components.test.tsx"],"sourcesContent":["/**\n * Hierarchical Navigation Components Integration Tests\n * Tests the withHierarchicalSelection HOC and integrated components\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, test, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport '@testing-library/jest-dom';\n\n// Mock wouter for routing\nconst mockSetLocation = jest.fn();\nconst mockLocation = '/residents/building';\nconst mockSearch = '';\n\njest.mock('wouter', () => ({\n  useLocation: () => [mockLocation, mockSetLocation],\n  useSearch: () => mockSearch,\n}));\n\n// Mock the SelectionGrid component\nconst MockSelectionGrid = ({ title, items, onSelectItem, isLoading }: any) => (\n  <div data-testid=\"selection-grid\">\n    <h3 data-testid=\"selection-title\">{title}</h3>\n    {isLoading && <div data-testid=\"loading-spinner\">Loading...</div>}\n    <div data-testid=\"items-grid\">\n      {items.map((item: any, index: number) => (\n        <button\n          key={item.id || index}\n          data-testid={`item-${item.id || index}`}\n          onClick={() => onSelectItem(item.id || `item-${index}`)}\n          className=\"selection-item\"\n        >\n          {item.name || item.title || `Item ${index + 1}`}\n        </button>\n      ))}\n    </div>\n  </div>\n);\n\n// Mock the SelectionGrid import\njest.mock('@/components/ui/selection-grid', () => ({\n  SelectionGrid: MockSelectionGrid,\n}));\n\n// Mock lucide-react icons\njest.mock('lucide-react', () => ({\n  ArrowLeft: () => <div data-testid=\"arrow-left-icon\">ArrowLeft</div>,\n  Building: () => <div data-testid=\"building-icon\">Building</div>,\n  MapPin: () => <div data-testid=\"map-pin-icon\">MapPin</div>,\n}));\n\n// Mock UI components\njest.mock('@/components/ui/button', () => ({\n  Button: ({ children, onClick, variant, size, className, 'data-testid': testId, ...props }: any) => (\n    <button\n      onClick={onClick}\n      data-testid={testId}\n      className={className}\n      data-variant={variant}\n      data-size={size}\n      {...props}\n    >\n      {children}\n    </button>\n  ),\n}));\n\njest.mock('@/components/layout/header', () => ({\n  Header: ({ title, subtitle }: any) => (\n    <header data-testid=\"header\">\n      <h1 data-testid=\"header-title\">{title}</h1>\n      <p data-testid=\"header-subtitle\">{subtitle}</p>\n    </header>\n  ),\n}));\n\n// Test component that simulates a hierarchical page\nconst TestComponent = ({ \n  buildingId, \n  showBackButton, \n  backButtonLabel, \n  onBack \n}: {\n  buildingId?: string;\n  showBackButton?: boolean;\n  backButtonLabel?: string;\n  onBack?: () => void;\n}) => (\n  <div data-testid=\"test-component\">\n    {showBackButton && onBack && (\n      <div data-testid=\"back-button-container\">\n        <button\n          data-testid=\"button-back\"\n          onClick={onBack}\n        >\n          {backButtonLabel}\n        </button>\n      </div>\n    )}\n    {buildingId ? (\n      <div data-testid=\"building-details\">\n        <h2>Building Details</h2>\n        <p data-testid=\"building-id\">{buildingId}</p>\n      </div>\n    ) : (\n      <div data-testid=\"selection-screen\">\n        <h2>Select Building</h2>\n        <p>Choose a building to view details</p>\n      </div>\n    )}\n  </div>\n);\n\n// Mock the withHierarchicalSelection HOC\nconst withHierarchicalSelection = (Component: React.ComponentType<any>, config: any) => {\n  return (props: any) => {\n    const [currentBuildingId, setCurrentBuildingId] = React.useState<string | null>(null);\n    const [showBuildings, setShowBuildings] = React.useState(false);\n    \n    // Mock data\n    const mockBuildings = [\n      { id: 'building-1', name: 'Building A' },\n      { id: 'building-2', name: 'Building B' },\n    ];\n\n    // Simulate URL parsing\n    React.useEffect(() => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const buildingFromUrl = urlParams.get('building');\n      if (buildingFromUrl) {\n        setCurrentBuildingId(buildingFromUrl);\n        setShowBuildings(false);\n      } else {\n        setShowBuildings(true);\n      }\n    }, []);\n\n    const handleBuildingSelect = (buildingId: string) => {\n      setCurrentBuildingId(buildingId);\n      setShowBuildings(false);\n      // Simulate URL update\n      window.history.pushState({}, '', `?building=${buildingId}`);\n    };\n\n    const handleBack = () => {\n      setCurrentBuildingId(null);\n      setShowBuildings(true);\n      window.history.pushState({}, '', '/residents/building');\n      mockSetLocation('/residents/building');\n    };\n\n    if (showBuildings) {\n      return (\n        <div data-testid=\"hierarchical-selection\">\n          <MockSelectionGrid\n            title=\"Select Building\"\n            items={mockBuildings}\n            onSelectItem={handleBuildingSelect}\n            isLoading={false}\n          />\n        </div>\n      );\n    }\n\n    // Determine if should show back button (mock logic)\n    const shouldShowBackButton = currentBuildingId && mockBuildings.length > 1;\n\n    return (\n      <Component\n        {...props}\n        buildingId={currentBuildingId}\n        showBackButton={shouldShowBackButton}\n        backButtonLabel=\"Building\"\n        onBack={handleBack}\n      />\n    );\n  };\n};\n\nconst WrappedTestComponent = withHierarchicalSelection(TestComponent, {\n  hierarchy: ['building'],\n});\n\ndescribe('Hierarchical Navigation Components', () => {\n  let queryClient: QueryClient;\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          retry: false,\n        },\n      },\n    });\n\n    // Reset mocks\n    jest.clearAllMocks();\n    mockSetLocation.mockClear();\n\n    // Mock window.history.pushState\n    Object.defineProperty(window, 'history', {\n      value: {\n        pushState: jest.fn(),\n      },\n      writable: true,\n    });\n\n    // Reset URL\n    Object.defineProperty(window, 'location', {\n      value: {\n        search: '',\n        pathname: '/residents/building',\n      },\n      writable: true,\n    });\n  });\n\n  afterEach(() => {\n    jest.resetAllMocks();\n  });\n\n  const renderWithProviders = (component: React.ReactElement) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        {component}\n      </QueryClientProvider>\n    );\n  };\n\n  describe('Building Selection Screen', () => {\n    test('should render building selection when no building is selected', () => {\n      renderWithProviders(<WrappedTestComponent />);\n\n      expect(screen.getByTestId('hierarchical-selection')).toBeInTheDocument();\n      expect(screen.getByTestId('selection-grid')).toBeInTheDocument();\n      expect(screen.getByTestId('selection-title')).toHaveTextContent('Select Building');\n      \n      // Should show building options\n      expect(screen.getByTestId('item-building-1')).toHaveTextContent('Building A');\n      expect(screen.getByTestId('item-building-2')).toHaveTextContent('Building B');\n    });\n\n    test('should handle building selection', async () => {\n      renderWithProviders(<WrappedTestComponent />);\n\n      const buildingAButton = screen.getByTestId('item-building-1');\n      fireEvent.click(buildingAButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('test-component')).toBeInTheDocument();\n        expect(screen.getByTestId('building-details')).toBeInTheDocument();\n        expect(screen.getByTestId('building-id')).toHaveTextContent('building-1');\n      });\n\n      // Should update URL\n      expect(window.history.pushState).toHaveBeenCalledWith({}, '', '?building=building-1');\n    });\n\n    test('should not show loading spinner when not loading', () => {\n      renderWithProviders(<WrappedTestComponent />);\n\n      expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Building Details Screen', () => {\n    test('should render building details when building is selected', () => {\n      // Mock URL with building parameter\n      Object.defineProperty(window, 'location', {\n        value: {\n          search: '?building=building-1',\n          pathname: '/residents/building',\n        },\n        writable: true,\n      });\n\n      renderWithProviders(<WrappedTestComponent />);\n\n      expect(screen.getByTestId('test-component')).toBeInTheDocument();\n      expect(screen.getByTestId('building-details')).toBeInTheDocument();\n      expect(screen.getByTestId('building-id')).toHaveTextContent('building-1');\n    });\n\n    test('should show back button when building is selected and multiple buildings exist', () => {\n      Object.defineProperty(window, 'location', {\n        value: {\n          search: '?building=building-1',\n          pathname: '/residents/building',\n        },\n        writable: true,\n      });\n\n      renderWithProviders(<WrappedTestComponent />);\n\n      expect(screen.getByTestId('back-button-container')).toBeInTheDocument();\n      expect(screen.getByTestId('button-back')).toHaveTextContent('Building');\n    });\n\n    test('should handle back button click', async () => {\n      Object.defineProperty(window, 'location', {\n        value: {\n          search: '?building=building-1',\n          pathname: '/residents/building',\n        },\n        writable: true,\n      });\n\n      renderWithProviders(<WrappedTestComponent />);\n\n      const backButton = screen.getByTestId('button-back');\n      fireEvent.click(backButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('hierarchical-selection')).toBeInTheDocument();\n        expect(screen.getByTestId('selection-grid')).toBeInTheDocument();\n      });\n\n      // Should update URL and router\n      expect(window.history.pushState).toHaveBeenCalledWith({}, '', '/residents/building');\n      expect(mockSetLocation).toHaveBeenCalledWith('/residents/building');\n    });\n  });\n\n  describe('Smart Back Button Logic', () => {\n    test('should not show back button when only one building exists', () => {\n      // Mock only one building\n      const SingleBuildingComponent = withHierarchicalSelection(TestComponent, {\n        hierarchy: ['building'],\n      });\n\n      // Override the component to simulate single building scenario\n      const SingleBuildingTestComponent = (props: any) => {\n        const [currentBuildingId, setCurrentBuildingId] = React.useState('building-1');\n        \n        // Mock single building scenario - should not show back button\n        const shouldShowBackButton = false; // Single building = no back button\n\n        return (\n          <TestComponent\n            {...props}\n            buildingId={currentBuildingId}\n            showBackButton={shouldShowBackButton}\n            backButtonLabel=\"Building\"\n            onBack={() => {}}\n          />\n        );\n      };\n\n      renderWithProviders(<SingleBuildingTestComponent />);\n\n      expect(screen.queryByTestId('back-button-container')).not.toBeInTheDocument();\n      expect(screen.queryByTestId('button-back')).not.toBeInTheDocument();\n    });\n\n    test('should show back button when multiple buildings exist', () => {\n      Object.defineProperty(window, 'location', {\n        value: {\n          search: '?building=building-1',\n          pathname: '/residents/building',\n        },\n        writable: true,\n      });\n\n      renderWithProviders(<WrappedTestComponent />);\n\n      // Should show back button because mock has 2 buildings\n      expect(screen.getByTestId('back-button-container')).toBeInTheDocument();\n      expect(screen.getByTestId('button-back')).toBeInTheDocument();\n    });\n  });\n\n  describe('URL Navigation', () => {\n    test('should parse building ID from URL parameters', () => {\n      Object.defineProperty(window, 'location', {\n        value: {\n          search: '?building=test-building-123',\n          pathname: '/residents/building',\n        },\n        writable: true,\n      });\n\n      renderWithProviders(<WrappedTestComponent />);\n\n      expect(screen.getByTestId('building-details')).toBeInTheDocument();\n      expect(screen.getByTestId('building-id')).toHaveTextContent('test-building-123');\n    });\n\n    test('should show selection screen when no URL parameters', () => {\n      Object.defineProperty(window, 'location', {\n        value: {\n          search: '',\n          pathname: '/residents/building',\n        },\n        writable: true,\n      });\n\n      renderWithProviders(<WrappedTestComponent />);\n\n      expect(screen.getByTestId('hierarchical-selection')).toBeInTheDocument();\n      expect(screen.getByTestId('selection-grid')).toBeInTheDocument();\n    });\n\n    test('should handle URL updates correctly', async () => {\n      renderWithProviders(<WrappedTestComponent />);\n\n      // Start with selection screen\n      expect(screen.getByTestId('hierarchical-selection')).toBeInTheDocument();\n\n      // Select a building\n      const buildingButton = screen.getByTestId('item-building-2');\n      fireEvent.click(buildingButton);\n\n      await waitFor(() => {\n        expect(window.history.pushState).toHaveBeenCalledWith({}, '', '?building=building-2');\n      });\n\n      // Go back\n      const backButton = screen.getByTestId('button-back');\n      fireEvent.click(backButton);\n\n      await waitFor(() => {\n        expect(window.history.pushState).toHaveBeenCalledWith({}, '', '/residents/building');\n      });\n    });\n  });\n});"],"version":3}