a47bf1f2808fdf49f5b64de73db25f04
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDemandRoutes = registerDemandRoutes;
const db_1 = require("../db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const index_1 = require("../auth/index");
const operations_1 = require("../../shared/schemas/operations");
const zod_1 = require("zod");
/**
 * Register demand routes for managing resident demands and complaints.
 *
 * @param app - Express application instance.
 */
/**
 * RegisterDemandRoutes function.
 * @param app
 * @returns Function result.
 */
function registerDemandRoutes(app) {
    // Get demands for a user (residents and managers)
    app.get('/api/demands', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const { buildingId, residenceId, type, status, search } = req.query;
            // Base query with joins
            let query = db_1.db
                .select({
                id: schema_1.demands.id,
                submitterId: schema_1.demands.submitterId,
                type: schema_1.demands.type,
                assignationResidenceId: schema_1.demands.assignationResidenceId,
                assignationBuildingId: schema_1.demands.assignationBuildingId,
                description: schema_1.demands.description,
                residenceId: schema_1.demands.residenceId,
                buildingId: schema_1.demands.buildingId,
                status: schema_1.demands.status,
                reviewedBy: schema_1.demands.reviewedBy,
                reviewedAt: schema_1.demands.reviewedAt,
                reviewNotes: schema_1.demands.reviewNotes,
                createdAt: schema_1.demands.createdAt,
                updatedAt: schema_1.demands.updatedAt,
                submitter: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
                residence: {
                    id: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    buildingId: schema_1.residences.buildingId,
                },
                building: {
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                },
            })
                .from(schema_1.demands)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demands.submitterId, schema_1.users.id))
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.demands.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.demands.buildingId, schema_1.buildings.id));
            // Apply filters - all users only see demands they created
            const conditions = [(0, drizzle_orm_1.eq)(schema_1.demands.submitterId, user.id)];
            // Add filter conditions
            if (buildingId) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.buildingId, buildingId));
            }
            if (residenceId) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.residenceId, residenceId));
            }
            if (type) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.type, type));
            }
            if (status) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.status, status));
            }
            // Apply conditions to query if any exist
            let finalQuery;
            if (conditions.length > 0) {
                finalQuery = query.where((0, drizzle_orm_1.and)(...conditions));
            }
            else {
                finalQuery = query;
            }
            const results = await finalQuery.orderBy((0, drizzle_orm_1.desc)(schema_1.demands.createdAt));
            // Filter by search term if provided
            let filteredResults = results;
            if (search) {
                const searchTerm = search.toLowerCase();
                filteredResults = results.filter((demand) => demand.description.toLowerCase().includes(searchTerm) ||
                    demand.submitter.firstName?.toLowerCase().includes(searchTerm) ||
                    demand.submitter.lastName?.toLowerCase().includes(searchTerm) ||
                    demand.residence.unitNumber.toLowerCase().includes(searchTerm) ||
                    demand.building.name.toLowerCase().includes(searchTerm));
            }
            res.json(filteredResults);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demands' });
        }
    });
    // Get a specific demand
    app.get('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const demand = await db_1.db
                .select({
                id: schema_1.demands.id,
                submitterId: schema_1.demands.submitterId,
                type: schema_1.demands.type,
                assignationResidenceId: schema_1.demands.assignationResidenceId,
                assignationBuildingId: schema_1.demands.assignationBuildingId,
                description: schema_1.demands.description,
                residenceId: schema_1.demands.residenceId,
                buildingId: schema_1.demands.buildingId,
                status: schema_1.demands.status,
                reviewedBy: schema_1.demands.reviewedBy,
                reviewedAt: schema_1.demands.reviewedAt,
                reviewNotes: schema_1.demands.reviewNotes,
                createdAt: schema_1.demands.createdAt,
                updatedAt: schema_1.demands.updatedAt,
                submitter: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
                residence: {
                    id: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    buildingId: schema_1.residences.buildingId,
                },
                building: {
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                },
            })
                .from(schema_1.demands)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demands.submitterId, schema_1.users.id))
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.demands.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.demands.buildingId, schema_1.buildings.id))
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, id))
                .limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demandData = demand[0];
            // Check access permissions - users can only view their own demands
            if (demandData.submitterId !== user.id) {
                return res.status(403).json({ message: 'Access denied' });
            }
            res.json(demandData);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demand' });
        }
    });
    // Create a new demand
    app.post('/api/demands', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const demandData = req.body;
            // Create a schema that allows optional UUIDs for frontend submission
            // We'll validate and ensure they're populated before database insertion
            const demandInputSchema = operations_1.insertDemandSchema.omit({ submitterId: true }).extend({
                buildingId: zod_1.z.string().optional(),
                residenceId: zod_1.z.string().optional()
            });
            // Validate input
            const validatedData = demandInputSchema.parse(demandData);
            console.log('✅ Demand validation passed:', validatedData);
            // Auto-populate residence and building from user's primary residence if not provided
            if (!validatedData.residenceId || !validatedData.buildingId) {
                const userResidenceData = await db_1.db
                    .select({
                    residenceId: schema_1.userResidences.residenceId,
                    buildingId: schema_1.residences.buildingId,
                })
                    .from(schema_1.userResidences)
                    .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                    .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, user.id))
                    .limit(1);
                if (userResidenceData.length === 0) {
                    return res
                        .status(400)
                        .json({ message: 'User must be assigned to a residence to create demands' });
                }
                validatedData.residenceId = validatedData.residenceId || userResidenceData[0].residenceId;
                validatedData.buildingId = validatedData.buildingId || userResidenceData[0].buildingId;
            }
            // Ensure required fields are present after auto-population
            if (!validatedData.buildingId || !validatedData.residenceId) {
                return res.status(400).json({
                    message: 'Building and residence are required to create a demand'
                });
            }
            console.log('✅ Final demand data before insertion:', {
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                type: validatedData.type,
                description: validatedData.description
            });
            const demandInsertData = {
                ...validatedData,
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                submitterId: user.id,
                status: validatedData.status || 'submitted',
            };
            const newDemand = await db_1.db.insert(schema_1.demands).values([demandInsertData]).returning();
            res.status(201).json(newDemand[0]);
        }
        catch (error) {
            if (error.name === 'ZodError') {
                return res.status(400).json({ message: 'Invalid demand data', errors: error.errors });
            }
            res.status(500).json({ message: 'Failed to create demand' });
        }
    });
    // Update a demand
    app.put('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const updates = req.body;
            // Get the current demand
            const currentDemand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demand = currentDemand[0];
            // Check permissions - users can only update their own demands
            if (demand.submitterId !== user.id) {
                return res.status(403).json({ message: 'Access denied' });
            }
            const updatedDemand = await db_1.db
                .update(schema_1.demands)
                .set({ ...updates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, id))
                .returning();
            res.json(updatedDemand[0]);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to update demand' });
        }
    });
    // Delete a demand
    app.delete('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            // Get the current demand
            const currentDemand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demand = currentDemand[0];
            // Check permissions - users can only delete their own demands
            if (demand.submitterId !== user.id) {
                return res.status(403).json({ message: 'Access denied' });
            }
            await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id));
            res.json({ message: 'Demand deleted successfully' });
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to delete demand' });
        }
    });
    // Get comments for a demand
    app.get('/api/demands/:id/comments', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            // First check if user has access to the demand
            const demand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            // Check access permissions (same logic as get demand)
            // ... (permission check logic similar to get demand endpoint)
            const comments = await db_1.db
                .select({
                id: schema_1.demandComments.id,
                demandId: schema_1.demandComments.demandId,
                commentText: schema_1.demandComments.commentText,
                commentType: schema_1.demandComments.commentType,
                isInternal: schema_1.demandComments.isInternal,
                commenterId: schema_1.demandComments.commenterId,
                createdAt: schema_1.demandComments.createdAt,
                author: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
            })
                .from(schema_1.demandComments)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demandComments.commenterId, schema_1.users.id))
                .where((0, drizzle_orm_1.eq)(schema_1.demandComments.demandId, id))
                .orderBy((0, drizzle_orm_1.asc)(schema_1.demandComments.createdAt));
            res.json(comments);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demand comments' });
        }
    });
    // Create a comment on a demand
    app.post('/api/demands/:id/comments', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const commentData = req.body;
            // Validate input
            const validatedData = operations_1.insertDemandCommentSchema.parse({
                ...commentData,
                demandId: id,
                commenterId: user.id,
            });
            // Check if user has access to the demand (similar logic as above)
            const demand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const newComment = await db_1.db.insert(schema_1.demandComments).values(validatedData).returning();
            res.status(201).json(newComment[0]);
        }
        catch (error) {
            if (error.name === 'ZodError') {
                return res.status(400).json({ message: 'Invalid comment data', errors: error.errors });
            }
            res.status(500).json({ message: 'Failed to create comment' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7WUFDekYsQ0FBQztZQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLENBQUMsQ0FBQztRQUNoRSxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvc2VydmVyL2FwaS9kZW1hbmRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3MgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vZGInO1xuaW1wb3J0IHtcbiAgZGVtYW5kcyxcbiAgZGVtYW5kQ29tbWVudHMsXG4gIHJlc2lkZW5jZXMsXG4gIGJ1aWxkaW5ncyxcbiAgdXNlcnMsXG4gIHVzZXJSZXNpZGVuY2VzLFxuICB1c2VyT3JnYW5pemF0aW9ucyxcbiAgb3JnYW5pemF0aW9ucyxcbn0gZnJvbSAnLi4vLi4vc2hhcmVkL3NjaGVtYSc7XG5pbXBvcnQgeyBlcSwgYW5kLCBvciwgaW5BcnJheSwgZGVzYywgYXNjIH0gZnJvbSAnZHJpenpsZS1vcm0nO1xuaW1wb3J0IHsgcmVxdWlyZUF1dGggfSBmcm9tICcuLi9hdXRoL2luZGV4JztcbmltcG9ydCB7IGluc2VydERlbWFuZFNjaGVtYSwgaW5zZXJ0RGVtYW5kQ29tbWVudFNjaGVtYSB9IGZyb20gJy4uLy4uL3NoYXJlZC9zY2hlbWFzL29wZXJhdGlvbnMnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8qKlxuICogUmVnaXN0ZXIgZGVtYW5kIHJvdXRlcyBmb3IgbWFuYWdpbmcgcmVzaWRlbnQgZGVtYW5kcyBhbmQgY29tcGxhaW50cy5cbiAqXG4gKiBAcGFyYW0gYXBwIC0gRXhwcmVzcyBhcHBsaWNhdGlvbiBpbnN0YW5jZS5cbiAqL1xuLyoqXG4gKiBSZWdpc3RlckRlbWFuZFJvdXRlcyBmdW5jdGlvbi5cbiAqIEBwYXJhbSBhcHBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uIHJlc3VsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVtYW5kUm91dGVzKGFwcDogRXhwcmVzcykge1xuICAvLyBHZXQgZGVtYW5kcyBmb3IgYSB1c2VyIChyZXNpZGVudHMgYW5kIG1hbmFnZXJzKVxuICBhcHAuZ2V0KCcvYXBpL2RlbWFuZHMnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXI7XG4gICAgICBjb25zdCB7IGJ1aWxkaW5nSWQsIHJlc2lkZW5jZUlkLCB0eXBlLCBzdGF0dXMsIHNlYXJjaCB9ID0gcmVxLnF1ZXJ5O1xuXG4gICAgICAvLyBCYXNlIHF1ZXJ5IHdpdGggam9pbnNcbiAgICAgIGxldCBxdWVyeSA9IGRiXG4gICAgICAgIC5zZWxlY3Qoe1xuICAgICAgICAgIGlkOiBkZW1hbmRzLmlkLFxuICAgICAgICAgIHN1Ym1pdHRlcklkOiBkZW1hbmRzLnN1Ym1pdHRlcklkLFxuICAgICAgICAgIHR5cGU6IGRlbWFuZHMudHlwZSxcbiAgICAgICAgICBhc3NpZ25hdGlvblJlc2lkZW5jZUlkOiBkZW1hbmRzLmFzc2lnbmF0aW9uUmVzaWRlbmNlSWQsXG4gICAgICAgICAgYXNzaWduYXRpb25CdWlsZGluZ0lkOiBkZW1hbmRzLmFzc2lnbmF0aW9uQnVpbGRpbmdJZCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZGVtYW5kcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICByZXNpZGVuY2VJZDogZGVtYW5kcy5yZXNpZGVuY2VJZCxcbiAgICAgICAgICBidWlsZGluZ0lkOiBkZW1hbmRzLmJ1aWxkaW5nSWQsXG4gICAgICAgICAgc3RhdHVzOiBkZW1hbmRzLnN0YXR1cyxcbiAgICAgICAgICByZXZpZXdlZEJ5OiBkZW1hbmRzLnJldmlld2VkQnksXG4gICAgICAgICAgcmV2aWV3ZWRBdDogZGVtYW5kcy5yZXZpZXdlZEF0LFxuICAgICAgICAgIHJldmlld05vdGVzOiBkZW1hbmRzLnJldmlld05vdGVzLFxuICAgICAgICAgIGNyZWF0ZWRBdDogZGVtYW5kcy5jcmVhdGVkQXQsXG4gICAgICAgICAgdXBkYXRlZEF0OiBkZW1hbmRzLnVwZGF0ZWRBdCxcbiAgICAgICAgICBzdWJtaXR0ZXI6IHtcbiAgICAgICAgICAgIGlkOiB1c2Vycy5pZCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogdXNlcnMuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHVzZXJzLmxhc3ROYW1lLFxuICAgICAgICAgICAgZW1haWw6IHVzZXJzLmVtYWlsLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzaWRlbmNlOiB7XG4gICAgICAgICAgICBpZDogcmVzaWRlbmNlcy5pZCxcbiAgICAgICAgICAgIHVuaXROdW1iZXI6IHJlc2lkZW5jZXMudW5pdE51bWJlcixcbiAgICAgICAgICAgIGJ1aWxkaW5nSWQ6IHJlc2lkZW5jZXMuYnVpbGRpbmdJZCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJ1aWxkaW5nOiB7XG4gICAgICAgICAgICBpZDogYnVpbGRpbmdzLmlkLFxuICAgICAgICAgICAgbmFtZTogYnVpbGRpbmdzLm5hbWUsXG4gICAgICAgICAgICBhZGRyZXNzOiBidWlsZGluZ3MuYWRkcmVzcyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICAuZnJvbShkZW1hbmRzKVxuICAgICAgICAuaW5uZXJKb2luKHVzZXJzLCBlcShkZW1hbmRzLnN1Ym1pdHRlcklkLCB1c2Vycy5pZCkpXG4gICAgICAgIC5pbm5lckpvaW4ocmVzaWRlbmNlcywgZXEoZGVtYW5kcy5yZXNpZGVuY2VJZCwgcmVzaWRlbmNlcy5pZCkpXG4gICAgICAgIC5pbm5lckpvaW4oYnVpbGRpbmdzLCBlcShkZW1hbmRzLmJ1aWxkaW5nSWQsIGJ1aWxkaW5ncy5pZCkpO1xuXG4gICAgICAvLyBBcHBseSBmaWx0ZXJzIC0gYWxsIHVzZXJzIG9ubHkgc2VlIGRlbWFuZHMgdGhleSBjcmVhdGVkXG4gICAgICBjb25zdCBjb25kaXRpb25zID0gW2VxKGRlbWFuZHMuc3VibWl0dGVySWQsIHVzZXIuaWQpXTtcblxuICAgICAgLy8gQWRkIGZpbHRlciBjb25kaXRpb25zXG4gICAgICBpZiAoYnVpbGRpbmdJZCkge1xuICAgICAgICBjb25kaXRpb25zLnB1c2goZXEoZGVtYW5kcy5idWlsZGluZ0lkLCBidWlsZGluZ0lkKSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzaWRlbmNlSWQpIHtcbiAgICAgICAgY29uZGl0aW9ucy5wdXNoKGVxKGRlbWFuZHMucmVzaWRlbmNlSWQsIHJlc2lkZW5jZUlkKSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBjb25kaXRpb25zLnB1c2goZXEoZGVtYW5kcy50eXBlLCB0eXBlKSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIGNvbmRpdGlvbnMucHVzaChlcShkZW1hbmRzLnN0YXR1cywgc3RhdHVzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGx5IGNvbmRpdGlvbnMgdG8gcXVlcnkgaWYgYW55IGV4aXN0XG4gICAgICBsZXQgZmluYWxRdWVyeTtcbiAgICAgIGlmIChjb25kaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZmluYWxRdWVyeSA9IHF1ZXJ5LndoZXJlKGFuZCguLi5jb25kaXRpb25zKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaW5hbFF1ZXJ5ID0gcXVlcnk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBmaW5hbFF1ZXJ5Lm9yZGVyQnkoZGVzYyhkZW1hbmRzLmNyZWF0ZWRBdCkpO1xuXG4gICAgICAvLyBGaWx0ZXIgYnkgc2VhcmNoIHRlcm0gaWYgcHJvdmlkZWRcbiAgICAgIGxldCBmaWx0ZXJlZFJlc3VsdHMgPSByZXN1bHRzO1xuICAgICAgaWYgKHNlYXJjaCkge1xuICAgICAgICBjb25zdCBzZWFyY2hUZXJtID0gc2VhcmNoLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGZpbHRlcmVkUmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKFxuICAgICAgICAgIChkZW1hbmQpID0+XG4gICAgICAgICAgICBkZW1hbmQuZGVzY3JpcHRpb24udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXJtKSB8fFxuICAgICAgICAgICAgZGVtYW5kLnN1Ym1pdHRlci5maXJzdE5hbWU/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVGVybSkgfHxcbiAgICAgICAgICAgIGRlbWFuZC5zdWJtaXR0ZXIubGFzdE5hbWU/LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVGVybSkgfHxcbiAgICAgICAgICAgIGRlbWFuZC5yZXNpZGVuY2UudW5pdE51bWJlci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRlcm0pIHx8XG4gICAgICAgICAgICBkZW1hbmQuYnVpbGRpbmcubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRlcm0pXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJlcy5qc29uKGZpbHRlcmVkUmVzdWx0cyk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIGRlbWFuZHMnIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gR2V0IGEgc3BlY2lmaWMgZGVtYW5kXG4gIGFwcC5nZXQoJy9hcGkvZGVtYW5kcy86aWQnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyO1xuXG4gICAgICBjb25zdCBkZW1hbmQgPSBhd2FpdCBkYlxuICAgICAgICAuc2VsZWN0KHtcbiAgICAgICAgICBpZDogZGVtYW5kcy5pZCxcbiAgICAgICAgICBzdWJtaXR0ZXJJZDogZGVtYW5kcy5zdWJtaXR0ZXJJZCxcbiAgICAgICAgICB0eXBlOiBkZW1hbmRzLnR5cGUsXG4gICAgICAgICAgYXNzaWduYXRpb25SZXNpZGVuY2VJZDogZGVtYW5kcy5hc3NpZ25hdGlvblJlc2lkZW5jZUlkLFxuICAgICAgICAgIGFzc2lnbmF0aW9uQnVpbGRpbmdJZDogZGVtYW5kcy5hc3NpZ25hdGlvbkJ1aWxkaW5nSWQsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGRlbWFuZHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgcmVzaWRlbmNlSWQ6IGRlbWFuZHMucmVzaWRlbmNlSWQsXG4gICAgICAgICAgYnVpbGRpbmdJZDogZGVtYW5kcy5idWlsZGluZ0lkLFxuICAgICAgICAgIHN0YXR1czogZGVtYW5kcy5zdGF0dXMsXG4gICAgICAgICAgcmV2aWV3ZWRCeTogZGVtYW5kcy5yZXZpZXdlZEJ5LFxuICAgICAgICAgIHJldmlld2VkQXQ6IGRlbWFuZHMucmV2aWV3ZWRBdCxcbiAgICAgICAgICByZXZpZXdOb3RlczogZGVtYW5kcy5yZXZpZXdOb3RlcyxcbiAgICAgICAgICBjcmVhdGVkQXQ6IGRlbWFuZHMuY3JlYXRlZEF0LFxuICAgICAgICAgIHVwZGF0ZWRBdDogZGVtYW5kcy51cGRhdGVkQXQsXG4gICAgICAgICAgc3VibWl0dGVyOiB7XG4gICAgICAgICAgICBpZDogdXNlcnMuaWQsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHVzZXJzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiB1c2Vycy5sYXN0TmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiB1c2Vycy5lbWFpbCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc2lkZW5jZToge1xuICAgICAgICAgICAgaWQ6IHJlc2lkZW5jZXMuaWQsXG4gICAgICAgICAgICB1bml0TnVtYmVyOiByZXNpZGVuY2VzLnVuaXROdW1iZXIsXG4gICAgICAgICAgICBidWlsZGluZ0lkOiByZXNpZGVuY2VzLmJ1aWxkaW5nSWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBidWlsZGluZzoge1xuICAgICAgICAgICAgaWQ6IGJ1aWxkaW5ncy5pZCxcbiAgICAgICAgICAgIG5hbWU6IGJ1aWxkaW5ncy5uYW1lLFxuICAgICAgICAgICAgYWRkcmVzczogYnVpbGRpbmdzLmFkZHJlc3MsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgLmZyb20oZGVtYW5kcylcbiAgICAgICAgLmlubmVySm9pbih1c2VycywgZXEoZGVtYW5kcy5zdWJtaXR0ZXJJZCwgdXNlcnMuaWQpKVxuICAgICAgICAuaW5uZXJKb2luKHJlc2lkZW5jZXMsIGVxKGRlbWFuZHMucmVzaWRlbmNlSWQsIHJlc2lkZW5jZXMuaWQpKVxuICAgICAgICAuaW5uZXJKb2luKGJ1aWxkaW5ncywgZXEoZGVtYW5kcy5idWlsZGluZ0lkLCBidWlsZGluZ3MuaWQpKVxuICAgICAgICAud2hlcmUoZXEoZGVtYW5kcy5pZCwgaWQpKVxuICAgICAgICAubGltaXQoMSk7XG5cbiAgICAgIGlmIChkZW1hbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdEZW1hbmQgbm90IGZvdW5kJyB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVtYW5kRGF0YSA9IGRlbWFuZFswXTtcblxuICAgICAgLy8gQ2hlY2sgYWNjZXNzIHBlcm1pc3Npb25zIC0gdXNlcnMgY2FuIG9ubHkgdmlldyB0aGVpciBvd24gZGVtYW5kc1xuICAgICAgaWYgKGRlbWFuZERhdGEuc3VibWl0dGVySWQgIT09IHVzZXIuaWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ0FjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICByZXMuanNvbihkZW1hbmREYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gZmV0Y2ggZGVtYW5kJyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIENyZWF0ZSBhIG5ldyBkZW1hbmRcbiAgYXBwLnBvc3QoJy9hcGkvZGVtYW5kcycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IGRlbWFuZERhdGEgPSByZXEuYm9keTtcbiAgICAgIFxuXG4gICAgICAvLyBDcmVhdGUgYSBzY2hlbWEgdGhhdCBhbGxvd3Mgb3B0aW9uYWwgVVVJRHMgZm9yIGZyb250ZW5kIHN1Ym1pc3Npb25cbiAgICAgIC8vIFdlJ2xsIHZhbGlkYXRlIGFuZCBlbnN1cmUgdGhleSdyZSBwb3B1bGF0ZWQgYmVmb3JlIGRhdGFiYXNlIGluc2VydGlvblxuICAgICAgY29uc3QgZGVtYW5kSW5wdXRTY2hlbWEgPSBpbnNlcnREZW1hbmRTY2hlbWEub21pdCh7IHN1Ym1pdHRlcklkOiB0cnVlIH0pLmV4dGVuZCh7XG4gICAgICAgIGJ1aWxkaW5nSWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgcmVzaWRlbmNlSWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIFZhbGlkYXRlIGlucHV0XG4gICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gZGVtYW5kSW5wdXRTY2hlbWEucGFyc2UoZGVtYW5kRGF0YSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgRGVtYW5kIHZhbGlkYXRpb24gcGFzc2VkOicsIHZhbGlkYXRlZERhdGEpO1xuXG4gICAgICAvLyBBdXRvLXBvcHVsYXRlIHJlc2lkZW5jZSBhbmQgYnVpbGRpbmcgZnJvbSB1c2VyJ3MgcHJpbWFyeSByZXNpZGVuY2UgaWYgbm90IHByb3ZpZGVkXG4gICAgICBpZiAoIXZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWQgfHwgIXZhbGlkYXRlZERhdGEuYnVpbGRpbmdJZCkge1xuICAgICAgICBjb25zdCB1c2VyUmVzaWRlbmNlRGF0YSA9IGF3YWl0IGRiXG4gICAgICAgICAgLnNlbGVjdCh7XG4gICAgICAgICAgICByZXNpZGVuY2VJZDogdXNlclJlc2lkZW5jZXMucmVzaWRlbmNlSWQsXG4gICAgICAgICAgICBidWlsZGluZ0lkOiByZXNpZGVuY2VzLmJ1aWxkaW5nSWQsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZnJvbSh1c2VyUmVzaWRlbmNlcylcbiAgICAgICAgICAuaW5uZXJKb2luKHJlc2lkZW5jZXMsIGVxKHVzZXJSZXNpZGVuY2VzLnJlc2lkZW5jZUlkLCByZXNpZGVuY2VzLmlkKSlcbiAgICAgICAgICAud2hlcmUoZXEodXNlclJlc2lkZW5jZXMudXNlcklkLCB1c2VyLmlkKSlcbiAgICAgICAgICAubGltaXQoMSk7XG5cbiAgICAgICAgaWYgKHVzZXJSZXNpZGVuY2VEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIC5zdGF0dXMoNDAwKVxuICAgICAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnVXNlciBtdXN0IGJlIGFzc2lnbmVkIHRvIGEgcmVzaWRlbmNlIHRvIGNyZWF0ZSBkZW1hbmRzJyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWQgPSB2YWxpZGF0ZWREYXRhLnJlc2lkZW5jZUlkIHx8IHVzZXJSZXNpZGVuY2VEYXRhWzBdLnJlc2lkZW5jZUlkO1xuICAgICAgICB2YWxpZGF0ZWREYXRhLmJ1aWxkaW5nSWQgPSB2YWxpZGF0ZWREYXRhLmJ1aWxkaW5nSWQgfHwgdXNlclJlc2lkZW5jZURhdGFbMF0uYnVpbGRpbmdJZDtcbiAgICAgIH1cblxuICAgICAgLy8gRW5zdXJlIHJlcXVpcmVkIGZpZWxkcyBhcmUgcHJlc2VudCBhZnRlciBhdXRvLXBvcHVsYXRpb25cbiAgICAgIGlmICghdmFsaWRhdGVkRGF0YS5idWlsZGluZ0lkIHx8ICF2YWxpZGF0ZWREYXRhLnJlc2lkZW5jZUlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IFxuICAgICAgICAgIG1lc3NhZ2U6ICdCdWlsZGluZyBhbmQgcmVzaWRlbmNlIGFyZSByZXF1aXJlZCB0byBjcmVhdGUgYSBkZW1hbmQnIFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ+KchSBGaW5hbCBkZW1hbmQgZGF0YSBiZWZvcmUgaW5zZXJ0aW9uOicsIHtcbiAgICAgICAgYnVpbGRpbmdJZDogdmFsaWRhdGVkRGF0YS5idWlsZGluZ0lkLFxuICAgICAgICByZXNpZGVuY2VJZDogdmFsaWRhdGVkRGF0YS5yZXNpZGVuY2VJZCxcbiAgICAgICAgdHlwZTogdmFsaWRhdGVkRGF0YS50eXBlLFxuICAgICAgICBkZXNjcmlwdGlvbjogdmFsaWRhdGVkRGF0YS5kZXNjcmlwdGlvblxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGRlbWFuZEluc2VydERhdGEgPSB7XG4gICAgICAgIC4uLnZhbGlkYXRlZERhdGEsXG4gICAgICAgIGJ1aWxkaW5nSWQ6IHZhbGlkYXRlZERhdGEuYnVpbGRpbmdJZCxcbiAgICAgICAgcmVzaWRlbmNlSWQ6IHZhbGlkYXRlZERhdGEucmVzaWRlbmNlSWQsXG4gICAgICAgIHN1Ym1pdHRlcklkOiB1c2VyLmlkLFxuICAgICAgICBzdGF0dXM6ICh2YWxpZGF0ZWREYXRhLnN0YXR1cyBhcyAnc3VibWl0dGVkJyB8ICd1bmRlcl9yZXZpZXcnIHwgJ2FwcHJvdmVkJyB8ICdyZWplY3RlZCcgfCAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnY2FuY2VsbGVkJykgfHwgJ3N1Ym1pdHRlZCcsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBuZXdEZW1hbmQgPSBhd2FpdCBkYi5pbnNlcnQoZGVtYW5kcykudmFsdWVzKFtkZW1hbmRJbnNlcnREYXRhXSkucmV0dXJuaW5nKCk7XG5cbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKG5ld0RlbWFuZFswXSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdab2RFcnJvcicpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgZGVtYW5kIGRhdGEnLCBlcnJvcnM6IGVycm9yLmVycm9ycyB9KTtcbiAgICAgIH1cbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byBjcmVhdGUgZGVtYW5kJyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFVwZGF0ZSBhIGRlbWFuZFxuICBhcHAucHV0KCcvYXBpL2RlbWFuZHMvOmlkJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IHVwZGF0ZXMgPSByZXEuYm9keTtcblxuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGRlbWFuZFxuICAgICAgY29uc3QgY3VycmVudERlbWFuZCA9IGF3YWl0IGRiLnNlbGVjdCgpLmZyb20oZGVtYW5kcykud2hlcmUoZXEoZGVtYW5kcy5pZCwgaWQpKS5saW1pdCgxKTtcblxuICAgICAgaWYgKGN1cnJlbnREZW1hbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdEZW1hbmQgbm90IGZvdW5kJyB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVtYW5kID0gY3VycmVudERlbWFuZFswXTtcblxuICAgICAgLy8gQ2hlY2sgcGVybWlzc2lvbnMgLSB1c2VycyBjYW4gb25seSB1cGRhdGUgdGhlaXIgb3duIGRlbWFuZHNcbiAgICAgIGlmIChkZW1hbmQuc3VibWl0dGVySWQgIT09IHVzZXIuaWQpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ0FjY2VzcyBkZW5pZWQnIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGRhdGVkRGVtYW5kID0gYXdhaXQgZGJcbiAgICAgICAgLnVwZGF0ZShkZW1hbmRzKVxuICAgICAgICAuc2V0KHsgLi4udXBkYXRlcywgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpIH0pXG4gICAgICAgIC53aGVyZShlcShkZW1hbmRzLmlkLCBpZCkpXG4gICAgICAgIC5yZXR1cm5pbmcoKTtcblxuICAgICAgcmVzLmpzb24odXBkYXRlZERlbWFuZFswXSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIHVwZGF0ZSBkZW1hbmQnIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gRGVsZXRlIGEgZGVtYW5kXG4gIGFwcC5kZWxldGUoJy9hcGkvZGVtYW5kcy86aWQnLCByZXF1aXJlQXV0aCwgYXN5bmMgKHJlcTogYW55LCByZXM6IGFueSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgICAgY29uc3QgdXNlciA9IHJlcS51c2VyO1xuXG4gICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgZGVtYW5kXG4gICAgICBjb25zdCBjdXJyZW50RGVtYW5kID0gYXdhaXQgZGIuc2VsZWN0KCkuZnJvbShkZW1hbmRzKS53aGVyZShlcShkZW1hbmRzLmlkLCBpZCkpLmxpbWl0KDEpO1xuXG4gICAgICBpZiAoY3VycmVudERlbWFuZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ0RlbWFuZCBub3QgZm91bmQnIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkZW1hbmQgPSBjdXJyZW50RGVtYW5kWzBdO1xuXG4gICAgICAvLyBDaGVjayBwZXJtaXNzaW9ucyAtIHVzZXJzIGNhbiBvbmx5IGRlbGV0ZSB0aGVpciBvd24gZGVtYW5kc1xuICAgICAgaWYgKGRlbWFuZC5zdWJtaXR0ZXJJZCAhPT0gdXNlci5pZCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnQWNjZXNzIGRlbmllZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IGRiLmRlbGV0ZShkZW1hbmRzKS53aGVyZShlcShkZW1hbmRzLmlkLCBpZCkpO1xuXG4gICAgICByZXMuanNvbih7IG1lc3NhZ2U6ICdEZW1hbmQgZGVsZXRlZCBzdWNjZXNzZnVsbHknIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0ZhaWxlZCB0byBkZWxldGUgZGVtYW5kJyB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdldCBjb21tZW50cyBmb3IgYSBkZW1hbmRcbiAgYXBwLmdldCgnL2FwaS9kZW1hbmRzLzppZC9jb21tZW50cycsIHJlcXVpcmVBdXRoLCBhc3luYyAocmVxOiBhbnksIHJlczogYW55KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgICBjb25zdCB1c2VyID0gcmVxLnVzZXI7XG5cbiAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIHVzZXIgaGFzIGFjY2VzcyB0byB0aGUgZGVtYW5kXG4gICAgICBjb25zdCBkZW1hbmQgPSBhd2FpdCBkYi5zZWxlY3QoKS5mcm9tKGRlbWFuZHMpLndoZXJlKGVxKGRlbWFuZHMuaWQsIGlkKSkubGltaXQoMSk7XG5cbiAgICAgIGlmIChkZW1hbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdEZW1hbmQgbm90IGZvdW5kJyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgYWNjZXNzIHBlcm1pc3Npb25zIChzYW1lIGxvZ2ljIGFzIGdldCBkZW1hbmQpXG4gICAgICAvLyAuLi4gKHBlcm1pc3Npb24gY2hlY2sgbG9naWMgc2ltaWxhciB0byBnZXQgZGVtYW5kIGVuZHBvaW50KVxuXG4gICAgICBjb25zdCBjb21tZW50cyA9IGF3YWl0IGRiXG4gICAgICAgIC5zZWxlY3Qoe1xuICAgICAgICAgIGlkOiBkZW1hbmRDb21tZW50cy5pZCxcbiAgICAgICAgICBkZW1hbmRJZDogZGVtYW5kQ29tbWVudHMuZGVtYW5kSWQsXG4gICAgICAgICAgY29tbWVudFRleHQ6IGRlbWFuZENvbW1lbnRzLmNvbW1lbnRUZXh0LFxuICAgICAgICAgIGNvbW1lbnRUeXBlOiBkZW1hbmRDb21tZW50cy5jb21tZW50VHlwZSxcbiAgICAgICAgICBpc0ludGVybmFsOiBkZW1hbmRDb21tZW50cy5pc0ludGVybmFsLFxuICAgICAgICAgIGNvbW1lbnRlcklkOiBkZW1hbmRDb21tZW50cy5jb21tZW50ZXJJZCxcbiAgICAgICAgICBjcmVhdGVkQXQ6IGRlbWFuZENvbW1lbnRzLmNyZWF0ZWRBdCxcbiAgICAgICAgICBhdXRob3I6IHtcbiAgICAgICAgICAgIGlkOiB1c2Vycy5pZCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogdXNlcnMuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHVzZXJzLmxhc3ROYW1lLFxuICAgICAgICAgICAgZW1haWw6IHVzZXJzLmVtYWlsLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICAgIC5mcm9tKGRlbWFuZENvbW1lbnRzKVxuICAgICAgICAuaW5uZXJKb2luKHVzZXJzLCBlcShkZW1hbmRDb21tZW50cy5jb21tZW50ZXJJZCwgdXNlcnMuaWQpKVxuICAgICAgICAud2hlcmUoZXEoZGVtYW5kQ29tbWVudHMuZGVtYW5kSWQsIGlkKSlcbiAgICAgICAgLm9yZGVyQnkoYXNjKGRlbWFuZENvbW1lbnRzLmNyZWF0ZWRBdCkpO1xuXG4gICAgICByZXMuanNvbihjb21tZW50cyk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRmFpbGVkIHRvIGZldGNoIGRlbWFuZCBjb21tZW50cycgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBDcmVhdGUgYSBjb21tZW50IG9uIGEgZGVtYW5kXG4gIGFwcC5wb3N0KCcvYXBpL2RlbWFuZHMvOmlkL2NvbW1lbnRzJywgcmVxdWlyZUF1dGgsIGFzeW5jIChyZXE6IGFueSwgcmVzOiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICAgIGNvbnN0IHVzZXIgPSByZXEudXNlcjtcbiAgICAgIGNvbnN0IGNvbW1lbnREYXRhID0gcmVxLmJvZHk7XG5cbiAgICAgIC8vIFZhbGlkYXRlIGlucHV0XG4gICAgICBjb25zdCB2YWxpZGF0ZWREYXRhID0gaW5zZXJ0RGVtYW5kQ29tbWVudFNjaGVtYS5wYXJzZSh7XG4gICAgICAgIC4uLmNvbW1lbnREYXRhLFxuICAgICAgICBkZW1hbmRJZDogaWQsXG4gICAgICAgIGNvbW1lbnRlcklkOiB1c2VyLmlkLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIENoZWNrIGlmIHVzZXIgaGFzIGFjY2VzcyB0byB0aGUgZGVtYW5kIChzaW1pbGFyIGxvZ2ljIGFzIGFib3ZlKVxuICAgICAgY29uc3QgZGVtYW5kID0gYXdhaXQgZGIuc2VsZWN0KCkuZnJvbShkZW1hbmRzKS53aGVyZShlcShkZW1hbmRzLmlkLCBpZCkpLmxpbWl0KDEpO1xuXG4gICAgICBpZiAoZGVtYW5kLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBtZXNzYWdlOiAnRGVtYW5kIG5vdCBmb3VuZCcgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5ld0NvbW1lbnQgPSBhd2FpdCBkYi5pbnNlcnQoZGVtYW5kQ29tbWVudHMpLnZhbHVlcyh2YWxpZGF0ZWREYXRhKS5yZXR1cm5pbmcoKTtcblxuICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24obmV3Q29tbWVudFswXSk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdab2RFcnJvcicpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgY29tbWVudCBkYXRhJywgZXJyb3JzOiBlcnJvci5lcnJvcnMgfSk7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdGYWlsZWQgdG8gY3JlYXRlIGNvbW1lbnQnIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iXSwidmVyc2lvbiI6M30=