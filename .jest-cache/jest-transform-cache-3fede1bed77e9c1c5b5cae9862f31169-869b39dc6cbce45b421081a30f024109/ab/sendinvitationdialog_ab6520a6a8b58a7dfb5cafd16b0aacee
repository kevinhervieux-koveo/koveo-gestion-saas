2259bd4a1e0de442e41c458254941fa7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendInvitationDialog = SendInvitationDialog;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_query_1 = require("@tanstack/react-query");
const queryClient_1 = require("@/lib/queryClient");
const use_language_1 = require("@/hooks/use-language");
const use_auth_1 = require("@/hooks/use-auth");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const dialog_1 = require("@/components/ui/dialog");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const textarea_1 = require("@/components/ui/textarea");
const select_1 = require("@/components/ui/select");
const form_1 = require("@/components/ui/form");
const lucide_react_1 = require("lucide-react");
const use_toast_1 = require("@/hooks/use-toast");
// Form validation schema
const invitationSchema = zod_2.z
    .object({
    email: zod_2.z.string().email('invalidEmailFormat').optional(),
    firstName: zod_2.z.string().max(50, 'firstNameTooLong').regex(/^[a-zA-ZÀ-ÿ\s'-]*$/, 'firstNameInvalidCharacters').optional(),
    lastName: zod_2.z.string().max(50, 'lastNameTooLong').regex(/^[a-zA-ZÀ-ÿ\s'-]*$/, 'lastNameInvalidCharacters').optional(),
    role: zod_2.z.enum([
        'admin',
        'manager',
        'tenant',
        'resident',
        'demo_manager',
        'demo_tenant',
        'demo_resident',
    ]),
    organizationId: zod_2.z.string().min(1, 'organizationRequired'),
    buildingId: zod_2.z.string().optional(),
    residenceId: zod_2.z.string().optional(),
    personalMessage: zod_2.z.string().max(500, 'personalMessageTooLong').optional(),
    expiryDays: zod_2.z.number().min(1, 'expiryDaysInvalid').max(30, 'expiryDaysInvalid'),
})
    .refine((data) => {
    // For demo roles, first and last name are required instead of email
    if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {
        return !!data.firstName && !!data.lastName;
    }
    // For regular roles, email is required
    return !!data.email;
}, {
    message: 'Email address is required for regular invitations (example: user@domain.com). For demo users, provide first and last name instead.',
    path: ['email'],
})
    .refine((data) => {
    // If role is tenant or resident and a specific building is selected, residence must be assigned
    if (['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(data.role) &&
        data.buildingId &&
        data.buildingId !== 'none' &&
        data.buildingId !== '') {
        return !!data.residenceId && data.residenceId !== '';
    }
    return true;
}, {
    message: 'Please select a specific residence unit for tenants and residents when a building is selected',
    path: ['residenceId'],
});
/**
 * Send Invitation Dialog Component.
 *
 * Allows sending single invitations with comprehensive options
 * including role selection, organization/building assignment, and custom messages.
 * @param props - Component props.
 * @param props.open - Whether dialog is open.
 * @param props.onOpenChange - Handler for dialog open state changes.
 * @param props.onSuccess - Handler called when invitation is sent successfully.
 * @returns JSX element for the invitation dialog.
 */
function SendInvitationDialog({ open, onOpenChange, onSuccess }) {
    const { t } = (0, use_language_1.useLanguage)();
    const { user: currentUser, hasRole } = (0, use_auth_1.useAuth)();
    const { toast } = (0, use_toast_1.useToast)();
    const [selectedOrgType, setSelectedOrgType] = (0, react_1.useState)('');
    // Single invitation form
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(invitationSchema),
        defaultValues: {
            email: '',
            firstName: '',
            lastName: '',
            role: 'tenant',
            organizationId: '',
            buildingId: '',
            residenceId: '',
            expiryDays: 7,
            personalMessage: '',
        },
    });
    // Fetch organizations (filtered by user access)
    const { data: organizations } = (0, react_query_1.useQuery)({
        queryKey: ['/api/organizations'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/organizations');
            return response.json();
        },
        enabled: open,
    });
    // Fetch buildings
    const { data: buildings, error: buildingsError, isLoading: buildingsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/manager/buildings'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/manager/buildings');
            const data = await response.json();
            // The API returns { buildings: [...], meta: {...} } but we need just the buildings array
            return data.buildings || data;
        },
        enabled: open,
    });
    // Fetch residences  
    const { data: residences } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/residences');
            const data = await response.json();
            // Handle both direct array and wrapped response formats
            return data.residences || data;
        },
        enabled: open,
    });
    // Helper functions for filtering data based on selections
    const getFilteredOrganizations = () => {
        if (!organizations || !Array.isArray(organizations)) {
            return [];
        }
        // Filter out any invalid organizations with detailed logging
        const validOrgs = organizations.filter((org) => {
            const isValid = org &&
                typeof org === 'object' &&
                org.id &&
                typeof org.id === 'string' &&
                org.id.trim() !== '' &&
                org.name &&
                typeof org.name === 'string' &&
                org.name.trim() !== '';
            return isValid;
        });
        if (currentUser?.role === 'admin') {
            // Admins can add users to any organization
            return validOrgs;
        }
        else if (currentUser?.role === 'manager') {
            // Managers can only add users to their own organization
            return validOrgs;
        }
        // Default: show all valid organizations for now
        return validOrgs;
    };
    // Check if user can access a specific organization for invitations
    const canInviteToOrganization = (orgId) => {
        if (!orgId || !organizations) {
            return false;
        }
        const targetOrg = organizations.find((org) => org.id === orgId);
        const currentUserOrg = organizations[0]; // Use first organization for access control
        // Organization filtering for user access control
        if (targetOrg?.name?.toLowerCase() === 'demo') {
            return currentUser?.role === 'admin';
        }
        // Koveo organization users can add to any organization (override all restrictions)
        if (currentUserOrg?.name?.toLowerCase() === 'koveo') {
            return true;
        }
        // Simplified access control for now
        // Admins can add to organizations they have access to
        if (currentUser?.role === 'admin') {
            return true;
        }
        // Others can only add to their own organization - simplified for now
        return true;
    };
    const getFilteredBuildings = (selectedOrgId) => {
        if (!buildings || !selectedOrgId) {
            return [];
        }
        return buildings.filter((building) => building.organizationId === selectedOrgId);
    };
    const getFilteredResidences = (selectedBuildingId, selectedOrgId) => {
        if (!residences) {
            return [];
        }
        // If a specific building is selected, show only residences from that building
        if (selectedBuildingId && selectedBuildingId !== 'none') {
            return residences.filter((residence) => residence.buildingId === selectedBuildingId);
        }
        // If no building selected but organization is selected, show all residences from that organization
        if (selectedOrgId && (!selectedBuildingId || selectedBuildingId === 'none')) {
            const orgBuildings = buildings?.filter(building => building.organizationId === selectedOrgId) || [];
            const orgBuildingIds = orgBuildings.map(building => building.id);
            return residences.filter((residence) => orgBuildingIds.includes(residence.buildingId));
        }
        return [];
    };
    // Single invitation mutation
    const invitationMutation = (0, react_query_1.useMutation)({
        mutationFn: async (data) => {
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + data.expiryDays);
            // For demo roles, create user directly instead of sending invitation
            if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {
                const response = await (0, queryClient_1.apiRequest)('POST', '/api/users/demo', {
                    firstName: data.firstName,
                    lastName: data.lastName,
                    role: data.role,
                    organizationId: data.organizationId,
                    residenceId: data.residenceId || null,
                });
                return response.json();
            }
            // Regular invitation flow
            const response = await (0, queryClient_1.apiRequest)('POST', '/api/invitations', {
                organizationId: data.organizationId,
                residenceId: data.residenceId || null,
                email: data.email,
                role: data.role,
                invitedByUserId: currentUser?.id,
                expiresAt: expiresAt.toISOString(),
                personalMessage: data.personalMessage || null,
            });
            return response.json();
        },
        onSuccess: (_, variables) => {
            const isDemoRole = ['demo_manager', 'demo_tenant', 'demo_resident'].includes(variables.role);
            toast({
                title: isDemoRole ? 'Demo User Created' : t('invitationSent'),
                description: isDemoRole
                    ? 'Demo user has been created successfully'
                    : t('invitationSentSuccessfully'),
            });
            form.reset();
            onSuccess();
            onOpenChange(false);
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message,
                variant: 'destructive',
            });
        },
    });
    const onSubmit = (_data) => {
        invitationMutation.mutate(_data);
    };
    const canInviteRole = (role) => {
        if (hasRole(['admin'])) {
            // Only admin can invite an admin, admin can invite to any organization
            return true;
        }
        if (hasRole(['manager'])) {
            // Manager can invite regular and demo roles (but not admin)
            if (['resident', 'tenant', 'manager', 'demo_manager', 'demo_tenant', 'demo_resident'].includes(role)) {
                return true;
            }
        }
        // Residents and tenants cannot invite anyone
        return false;
    };
    // Get available roles based on organization type using useMemo for proper reactivity
    const organizationId = form.watch('organizationId');
    const availableRoles = (0, react_1.useMemo)(() => {
        // Return empty array if no organization is selected
        if (!organizationId) {
            return [];
        }
        const selectedOrg = organizations?.find((org) => org.id === organizationId);
        const isDemoOrg = selectedOrg?.type === 'demo';
        if (isDemoOrg) {
            // For demo organizations, allow both demo roles and regular roles
            const roles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'].filter(canInviteRole);
            return roles;
        }
        const roles = ['admin', 'manager', 'tenant', 'resident'].filter(canInviteRole);
        return roles;
    }, [organizationId, organizations, hasRole]);
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: open, onOpenChange: onOpenChange, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.UserPlus, { className: 'h-5 w-5' }), t('inviteUser')] }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: t('inviteUserDescription') })] }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-4', children: (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'organizationId', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('organization'), " *"] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("select", { ...field, onChange: (e) => {
                                                        field.onChange(e.target.value);
                                                        const selectedOrg = organizations?.find((org) => org.id === e.target.value);
                                                        setSelectedOrgType(selectedOrg?.type || '');
                                                        // Reset building and residence when organization changes
                                                        form.setValue('buildingId', '');
                                                        form.setValue('residenceId', '');
                                                        // Reset role when switching between demo and regular orgs
                                                        form.setValue('role', selectedOrg?.type === 'demo' ? 'demo_tenant' : 'tenant');
                                                    }, disabled: currentUser?.role === 'manager', className: 'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', children: [(0, jsx_runtime_1.jsx)("option", { value: '', children: t('selectOrganization') }), getFilteredOrganizations().map((org) => {
                                                            if (!org?.id || !org?.name) {
                                                                return null;
                                                            }
                                                            const canInvite = canInviteToOrganization(org.id);
                                                            return ((0, jsx_runtime_1.jsxs)("option", { value: org.id, disabled: !canInvite, children: [org.name, " ", org.type === 'demo' ? '(Demo)' : ''] }, org.id));
                                                        })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: currentUser?.role === 'manager'
                                                    ? 'Managers can only invite to their organization'
                                                    : 'Select target organization' }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'role', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('role') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, disabled: !organizationId, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectRole') }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: organizationId ? availableRoles.map((role) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: role, children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-4 w-4' }), role === 'admin'
                                                                        ? t('admin')
                                                                        : role === 'manager'
                                                                            ? t('manager')
                                                                            : role === 'resident'
                                                                                ? t('resident')
                                                                                : role === 'tenant'
                                                                                    ? t('tenant')
                                                                                    : role === 'demo_manager'
                                                                                        ? 'Demo Manager'
                                                                                        : role === 'demo_tenant'
                                                                                            ? 'Demo Tenant'
                                                                                            : 'Demo Resident'] }) }, role))) : ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "no-organization", disabled: true, children: "Please select an organization first" })) })] }, `role-select-${organizationId}`), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), ['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'firstName', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "First Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Enter first name', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'lastName', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: "Last Name *" }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Enter last name', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] })) : ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'email', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('emailAddress'), " *"] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('enterEmailAddress'), type: 'email', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), form.watch('organizationId') && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'buildingId', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: ['Building', " (", t('optional'), ")"] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("select", { ...field, onChange: (e) => {
                                                        field.onChange(e.target.value);
                                                        // Reset residence when building changes
                                                        form.setValue('residenceId', '');
                                                    }, className: 'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', children: [(0, jsx_runtime_1.jsx)("option", { value: '', children: 'Select building' }), (0, jsx_runtime_1.jsx)("option", { value: 'none', children: 'No specific building' }), getFilteredBuildings(form.watch('organizationId')).map((building) => ((0, jsx_runtime_1.jsxs)("option", { value: building.id, children: [building.name, " - ", building.address] }, building.id)))] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), ['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) &&
                                    form.watch('buildingId') &&
                                    form.watch('buildingId') !== 'none' && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'residenceId', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: ['Residence', " *"] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("select", { ...field, onChange: field.onChange, className: 'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', children: [(0, jsx_runtime_1.jsx)("option", { value: '', children: 'Select residence' }), getFilteredResidences(form.watch('buildingId'), form.watch('organizationId')).map((residence) => ((0, jsx_runtime_1.jsxs)("option", { value: residence.id, children: ['Unit', " ", residence.unitNumber, residence.floor && ` - ${'Floor'} ${residence.floor}`] }, residence.id)))] }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: 'Residence required for tenants and residents' }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), !['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'expiryDays', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('expiresIn') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsxs)("select", { ...field, onChange: (e) => field.onChange(parseInt(e.target.value)), value: field.value.toString(), className: 'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50', children: [(0, jsx_runtime_1.jsxs)("option", { value: '1', children: ["1 ", t('day')] }), (0, jsx_runtime_1.jsxs)("option", { value: '3', children: ["3 ", t('days')] }), (0, jsx_runtime_1.jsxs)("option", { value: '7', children: ["7 ", t('days')] }), (0, jsx_runtime_1.jsxs)("option", { value: '14', children: ["14 ", t('days')] }), (0, jsx_runtime_1.jsxs)("option", { value: '30', children: ["30 ", t('days')] })] }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), !['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) && ((0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'personalMessage', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsxs)(form_1.FormLabel, { children: [t('personalMessage'), " (", t('optional'), ")"] }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(textarea_1.Textarea, { placeholder: t('personalMessagePlaceholder'), className: 'min-h-[80px]', ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormDescription, { children: t('personalMessageDescription') }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => onOpenChange(false), children: t('cancel') }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: invitationMutation.isPending, children: invitationMutation.isPending
                                                ? selectedOrgType === 'Demo'
                                                    ? 'Creating User...'
                                                    : t('sending')
                                                : selectedOrgType === 'Demo'
                                                    ? 'Create Demo User'
                                                    : t('sendInvitation') })] })] }) }) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,