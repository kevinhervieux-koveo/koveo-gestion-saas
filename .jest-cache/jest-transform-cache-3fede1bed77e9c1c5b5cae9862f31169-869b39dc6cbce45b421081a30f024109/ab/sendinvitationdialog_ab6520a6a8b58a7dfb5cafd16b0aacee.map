{"file":"/home/runner/workspace/client/src/components/admin/send-invitation-dialog.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/admin/send-invitation-dialog.tsx"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useLanguage } from '@/hooks/use-language';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { UserPlus, Shield } from 'lucide-react';\n\nimport { useToast } from '@/hooks/use-toast';\n\n// Form validation schema\nconst invitationSchema = z\n  .object({\n    email: z.string().email('invalidEmailFormat').optional(),\n    firstName: z.string().max(50, 'firstNameTooLong').regex(/^[a-zA-ZÀ-ÿ\\s'-]*$/, 'firstNameInvalidCharacters').optional(),\n    lastName: z.string().max(50, 'lastNameTooLong').regex(/^[a-zA-ZÀ-ÿ\\s'-]*$/, 'lastNameInvalidCharacters').optional(),\n    role: z.enum([\n      'admin',\n      'manager',\n      'tenant',\n      'resident',\n      'demo_manager',\n      'demo_tenant',\n      'demo_resident',\n    ]),\n    organizationId: z.string().min(1, 'organizationRequired'),\n    buildingId: z.string().optional(),\n    residenceId: z.string().optional(),\n    personalMessage: z.string().max(500, 'personalMessageTooLong').optional(),\n    expiryDays: z.number().min(1, 'expiryDaysInvalid').max(30, 'expiryDaysInvalid'),\n  })\n  .refine(\n    (data) => {\n\n      // For demo roles, first and last name are required instead of email\n      if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {\n        return !!data.firstName && !!data.lastName;\n\n      }\n      // For regular roles, email is required\n      return !!data.email;\n    },\n    {\n      message: 'Email address is required for regular invitations (example: user@domain.com). For demo users, provide first and last name instead.',\n      path: ['email'],\n    }\n  )\n  .refine(\n    (data) => {\n      // If role is tenant or resident and a specific building is selected, residence must be assigned\n      if (\n        ['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(data.role) &&\n        data.buildingId &&\n        data.buildingId !== 'none' &&\n        data.buildingId !== ''\n      ) {\n        return !!data.residenceId && data.residenceId !== '';\n      }\n      return true;\n    },\n    {\n      message: 'Please select a specific residence unit for tenants and residents when a building is selected',\n      path: ['residenceId'],\n    }\n  );\n\n/**\n * Form data type for single invitation.\n * Inferred from the invitation Zod schema.\n */\ntype InvitationFormData = z.infer<typeof invitationSchema>;\n\n/**\n * Props for the SendInvitationDialog component.\n * Controls dialog visibility and success handling.\n */\ninterface SendInvitationDialogProps {\n  open: boolean;\n  onOpenChange: (_open: boolean) => void;\n  onSuccess: () => void;\n}\n\n/**\n * Organization interface for organization selection.\n * Contains basic organization information.\n */\ninterface Organization {\n  id: string;\n  name: string;\n  type: string;\n}\n\n/**\n * Building interface from schema.\n */\ninterface BuildingType {\n  id: string;\n  organizationId: string;\n  name: string;\n  address: string;\n  city: string;\n  province: string;\n  postalCode: string;\n  buildingType: 'condo' | 'rental';\n  yearBuilt: number | null;\n  totalUnits: number;\n  totalFloors: number | null;\n  parkingSpaces: number | null;\n  storageSpaces: number | null;\n  amenities: unknown;\n  managementCompany: string | null;\n  isActive: boolean;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n}\n\n/**\n * Residence interface for residence selection.\n */\ninterface Residence {\n  id: string;\n  buildingId: string;\n  unitNumber: string;\n  floor: number | null;\n  squareFootage: number | null;\n  bedrooms: number | null;\n  bathrooms: number | null;\n  residenceType: 'apartment' | 'condo' | 'house' | 'townhouse' | 'other';\n  isActive: boolean;\n  building: {\n    id: string;\n    name: string;\n    organizationId: string;\n    organization: {\n      id: string;\n      name: string;\n    };\n  };\n}\n\n/**\n * Send Invitation Dialog Component.\n *\n * Allows sending single invitations with comprehensive options\n * including role selection, organization/building assignment, and custom messages.\n * @param props - Component props.\n * @param props.open - Whether dialog is open.\n * @param props.onOpenChange - Handler for dialog open state changes.\n * @param props.onSuccess - Handler called when invitation is sent successfully.\n * @returns JSX element for the invitation dialog.\n */\nexport function SendInvitationDialog({ open, onOpenChange, onSuccess }: SendInvitationDialogProps) {\n  const { t } = useLanguage();\n  const { user: currentUser, hasRole } = useAuth();\n  const { toast } = useToast();\n\n  const [selectedOrgType, setSelectedOrgType] = useState<string>('');\n\n\n  // Single invitation form\n  const form = useForm<InvitationFormData>({\n    resolver: zodResolver(invitationSchema),\n    defaultValues: {\n      email: '',\n\n      firstName: '',\n      lastName: '',\n      role: 'tenant',\n      organizationId: '',\n      buildingId: '',\n      residenceId: '',\n      expiryDays: 7,\n      personalMessage: '',\n    },\n  });\n\n  // Fetch organizations (filtered by user access)\n  const { data: organizations } = useQuery<Organization[]>({\n    queryKey: ['/api/organizations'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/organizations');\n      return response.json();\n    },\n    enabled: open,\n  });\n\n  // Fetch buildings\n  const { data: buildings, error: buildingsError, isLoading: buildingsLoading } = useQuery<BuildingType[]>({\n    queryKey: ['/api/manager/buildings'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/manager/buildings');\n      const data = await response.json();\n      // The API returns { buildings: [...], meta: {...} } but we need just the buildings array\n      return data.buildings || data;\n    },\n    enabled: open,\n  });\n\n\n  // Fetch residences  \n  const { data: residences } = useQuery<Residence[]>({\n    queryKey: ['/api/residences'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/residences');\n      const data = await response.json();\n      // Handle both direct array and wrapped response formats\n      return data.residences || data;\n    },\n    enabled: open,\n  });\n\n  // Helper functions for filtering data based on selections\n  const getFilteredOrganizations = () => {\n    if (!organizations || !Array.isArray(organizations)) {\n      return [];\n    }\n\n    // Filter out any invalid organizations with detailed logging\n    const validOrgs = organizations.filter((org) => {\n      const isValid =\n        org &&\n        typeof org === 'object' &&\n        org.id &&\n        typeof org.id === 'string' &&\n        org.id.trim() !== '' &&\n        org.name &&\n        typeof org.name === 'string' &&\n        org.name.trim() !== '';\n\n      return isValid;\n    });\n\n    if (currentUser?.role === 'admin') {\n      // Admins can add users to any organization\n      return validOrgs;\n    } else if (currentUser?.role === 'manager') {\n      // Managers can only add users to their own organization\n      return validOrgs;\n    }\n\n    // Default: show all valid organizations for now\n    return validOrgs;\n  };\n\n  // Check if user can access a specific organization for invitations\n  const canInviteToOrganization = (orgId: string) => {\n    if (!orgId || !organizations) {\n      return false;\n    }\n\n    const targetOrg = organizations.find((org) => org.id === orgId);\n    const currentUserOrg = organizations[0]; // Use first organization for access control\n\n    // Organization filtering for user access control\n    if (targetOrg?.name?.toLowerCase() === 'demo') {\n      return currentUser?.role === 'admin';\n    }\n\n    // Koveo organization users can add to any organization (override all restrictions)\n    if (currentUserOrg?.name?.toLowerCase() === 'koveo') {\n      return true;\n    }\n\n    // Simplified access control for now\n\n    // Admins can add to organizations they have access to\n    if (currentUser?.role === 'admin') {\n      return true;\n    }\n\n    // Others can only add to their own organization - simplified for now\n    return true;\n  };\n\n  const getFilteredBuildings = (selectedOrgId: string) => {\n    if (!buildings || !selectedOrgId) {\n      return [];\n    }\n    return buildings.filter((building) => building.organizationId === selectedOrgId);\n  };\n\n  const getFilteredResidences = (selectedBuildingId: string, selectedOrgId: string) => {\n    if (!residences) {\n      return [];\n    }\n    \n    // If a specific building is selected, show only residences from that building\n    if (selectedBuildingId && selectedBuildingId !== 'none') {\n      return residences.filter((residence) => residence.buildingId === selectedBuildingId);\n    }\n    \n    // If no building selected but organization is selected, show all residences from that organization\n    if (selectedOrgId && (!selectedBuildingId || selectedBuildingId === 'none')) {\n      const orgBuildings = buildings?.filter(building => building.organizationId === selectedOrgId) || [];\n      const orgBuildingIds = orgBuildings.map(building => building.id);\n      return residences.filter((residence) => orgBuildingIds.includes(residence.buildingId));\n    }\n    \n    return [];\n  };\n\n  // Single invitation mutation\n  const invitationMutation = useMutation({\n    mutationFn: async (data: InvitationFormData) => {\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + data.expiryDays);\n\n      // For demo roles, create user directly instead of sending invitation\n      if (['demo_manager', 'demo_tenant', 'demo_resident'].includes(data.role)) {\n        const response = await apiRequest('POST', '/api/users/demo', {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          role: data.role,\n          organizationId: data.organizationId,\n          residenceId: data.residenceId || null,\n        });\n        return response.json();\n      }\n\n      // Regular invitation flow\n      const response = await apiRequest('POST', '/api/invitations', {\n        organizationId: data.organizationId,\n        residenceId: data.residenceId || null,\n        email: data.email,\n        role: data.role,\n        invitedByUserId: currentUser?.id,\n        expiresAt: expiresAt.toISOString(),\n        personalMessage: data.personalMessage || null,\n      });\n      return response.json();\n    },\n    onSuccess: (_, variables) => {\n      const isDemoRole = ['demo_manager', 'demo_tenant', 'demo_resident'].includes(variables.role);\n      toast({\n        title: isDemoRole ? 'Demo User Created' : t('invitationSent'),\n        description: isDemoRole\n          ? 'Demo user has been created successfully'\n          : t('invitationSentSuccessfully'),\n      });\n      form.reset();\n      onSuccess();\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (_data: InvitationFormData) => {\n    invitationMutation.mutate(_data);\n\n  };\n\n  const canInviteRole = (role: string) => {\n    if (hasRole(['admin'])) {\n      // Only admin can invite an admin, admin can invite to any organization\n      return true;\n    }\n    if (hasRole(['manager'])) {\n      // Manager can invite regular and demo roles (but not admin)\n      if (\n        ['resident', 'tenant', 'manager', 'demo_manager', 'demo_tenant', 'demo_resident'].includes(\n          role\n        )\n      ) {\n        return true;\n      }\n    }\n    // Residents and tenants cannot invite anyone\n    return false;\n  };\n\n  // Get available roles based on organization type using useMemo for proper reactivity\n  const organizationId = form.watch('organizationId');\n  \n  const availableRoles = useMemo(() => {\n    // Return empty array if no organization is selected\n    if (!organizationId) {\n        return [];\n    }\n\n    const selectedOrg = organizations?.find((org) => org.id === organizationId);\n    const isDemoOrg = selectedOrg?.type === 'demo';\n\n\n    if (isDemoOrg) {\n      // For demo organizations, allow both demo roles and regular roles\n      const roles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'].filter(canInviteRole);\n      return roles;\n    }\n\n    const roles = ['admin', 'manager', 'tenant', 'resident'].filter(canInviteRole);\n    return roles;\n  }, [organizationId, organizations, hasRole]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className='max-w-2xl max-h-[90vh] overflow-y-auto'>\n        <DialogHeader>\n          <DialogTitle className='flex items-center gap-2'>\n            <UserPlus className='h-5 w-5' />\n            {t('inviteUser')}\n          </DialogTitle>\n          <DialogDescription>{t('inviteUserDescription')}</DialogDescription>\n        </DialogHeader>\n\n\n        <div className='space-y-4'>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n              <FormField\n                control={form.control}\n                name='organizationId'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('organization')} *</FormLabel>\n\n                    <FormControl>\n                      <select\n                        {...field}\n                        onChange={(e) => {\n                          field.onChange(e.target.value);\n                          const selectedOrg = organizations?.find(\n                            (org) => org.id === e.target.value\n                          );\n                          setSelectedOrgType(selectedOrg?.type || '');\n                          // Reset building and residence when organization changes\n                          form.setValue('buildingId', '');\n                          form.setValue('residenceId', '');\n                          // Reset role when switching between demo and regular orgs\n                          form.setValue(\n                            'role',\n                            selectedOrg?.type === 'demo' ? 'demo_tenant' : 'tenant'\n                          );\n                        }}\n                        disabled={currentUser?.role === 'manager'}\n                        className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                      >\n                        <option value=''>{t('selectOrganization')}</option>\n                        {getFilteredOrganizations().map((org) => {\n                          if (!org?.id || !org?.name) {\n                            return null;\n                          }\n\n                          const canInvite = canInviteToOrganization(org.id);\n\n                          return (\n                            <option key={org.id} value={org.id} disabled={!canInvite}>\n                              {org.name} {org.type === 'demo' ? '(Demo)' : ''}\n                            </option>\n                          );\n                        })}\n                      </select>\n                    </FormControl>\n                    <FormDescription>\n                      {currentUser?.role === 'manager'\n                        ? 'Managers can only invite to their organization'\n                        : 'Select target organization'}\n                    </FormDescription>\n\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='role'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>{t('role')}</FormLabel>\n                    <Select \n                      key={`role-select-${organizationId}`}\n                      onValueChange={field.onChange} \n                      value={field.value}\n                      disabled={!organizationId}\n                    >\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder={t('selectRole')} />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {organizationId ? availableRoles.map((role) => (\n                          <SelectItem key={role} value={role}>\n                            <div className='flex items-center gap-2'>\n                              <Shield className='h-4 w-4' />\n                              {role === 'admin'\n                                ? t('admin')\n                                : role === 'manager'\n                                  ? t('manager')\n                                  : role === 'resident'\n                                    ? t('resident')\n                                    : role === 'tenant'\n                                      ? t('tenant')\n                                      : role === 'demo_manager'\n                                        ? 'Demo Manager'\n                                        : role === 'demo_tenant'\n                                          ? 'Demo Tenant'\n                                          : 'Demo Resident'}\n                            </div>\n                          </SelectItem>\n                        )) : (\n                          <SelectItem value=\"no-organization\" disabled>\n                            Please select an organization first\n                          </SelectItem>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Conditional fields based on role type */}\n              {['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) ? (\n                <>\n                  <FormField\n                    control={form.control}\n                    name='firstName'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder='Enter first name' {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name='lastName'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder='Enter last name' {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </>\n              ) : (\n                <FormField\n                  control={form.control}\n                  name='email'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('emailAddress')} *</FormLabel>\n                      <FormControl>\n                        <Input placeholder={t('enterEmailAddress')} type='email' {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {form.watch('organizationId') && (\n                <FormField\n                  control={form.control}\n                  name='buildingId'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {'Building'} ({t('optional')})\n                      </FormLabel>\n                      <FormControl>\n                        <select\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e.target.value);\n                            // Reset residence when building changes\n                            form.setValue('residenceId', '');\n                          }}\n                          className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                        >\n                          <option value=''>{'Select building'}</option>\n                          <option value='none'>{'No specific building'}</option>\n                          {getFilteredBuildings(form.watch('organizationId')).map((building) => (\n                            <option key={building.id} value={building.id}>\n                              {building.name} - {building.address}\n                            </option>\n                          ))}\n                        </select>\n                      </FormControl>\n\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(\n                form.watch('role')\n              ) &&\n                form.watch('buildingId') &&\n                form.watch('buildingId') !== 'none' && (\n                  <FormField\n                    control={form.control}\n                    name='residenceId'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{'Residence'} *</FormLabel>\n                        <FormControl>\n                          <select\n                            {...field}\n                            onChange={field.onChange}\n                            className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                          >\n                            <option value=''>{'Select residence'}</option>\n                            {getFilteredResidences(form.watch('buildingId'), form.watch('organizationId')).map((residence) => (\n                              <option key={residence.id} value={residence.id}>\n                                {'Unit'} {residence.unitNumber}\n                                {residence.floor && ` - ${'Floor'} ${residence.floor}`}\n                              </option>\n                            ))}\n                          </select>\n                        </FormControl>\n                        <FormDescription>\n                          {'Residence required for tenants and residents'}\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n              {/* Only show expiry for regular invitations, not demo users */}\n              {!['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) && (\n                <FormField\n                  control={form.control}\n                  name='expiryDays'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t('expiresIn')}</FormLabel>\n                      <FormControl>\n                        <select\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          value={field.value.toString()}\n                          className='flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50'\n                        >\n                          <option value='1'>1 {t('day')}</option>\n                          <option value='3'>3 {t('days')}</option>\n                          <option value='7'>7 {t('days')}</option>\n                          <option value='14'>14 {t('days')}</option>\n                          <option value='30'>30 {t('days')}</option>\n                        </select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {/* Only show personal message for regular invitations, not demo users */}\n              {!['demo_manager', 'demo_tenant', 'demo_resident'].includes(form.watch('role')) && (\n                <FormField\n                  control={form.control}\n                  name='personalMessage'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {t('personalMessage')} ({t('optional')})\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder={t('personalMessagePlaceholder')}\n                          className='min-h-[80px]'\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormDescription>{t('personalMessageDescription')}</FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <DialogFooter>\n                <Button type='button' variant='outline' onClick={() => onOpenChange(false)}>\n                  {t('cancel')}\n                </Button>\n                <Button \n                  type='submit' \n                  disabled={invitationMutation.isPending}\n                >\n                  {invitationMutation.isPending\n                    ? selectedOrgType === 'Demo'\n                      ? 'Creating User...'\n                      : t('sending')\n                    : selectedOrgType === 'Demo'\n                      ? 'Create Demo User'\n                      : t('sendInvitation')}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </div>\n\n      </DialogContent>\n    </Dialog>\n  );\n}"],"version":3}