4ad8b23fea123fa5503a50c430e5babc
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerBugRoutes = registerBugRoutes;
const storage_1 = require("../storage");
const schema_1 = require("@shared/schema");
const zod_1 = require("zod");
const auth_1 = require("../auth");
const multer_1 = __importDefault(require("multer"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const uuid_1 = require("uuid");
// Configure multer for file uploads
const storage_config = multer_1.default.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path_1.default.join(process.cwd(), 'uploads', 'general');
        if (!fs_1.default.existsSync(uploadDir)) {
            fs_1.default.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueId = (0, uuid_1.v4)();
        const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');
        const fileName = `${uniqueId}-${originalName}`;
        cb(null, fileName);
    },
});
const upload = (0, multer_1.default)({ storage: storage_config });
/**
 * Registers all bug-related API endpoints.
 *
 * @param app - Express application instance.
 */
function registerBugRoutes(app) {
    /**
     * GET /api/bugs - Retrieves bugs based on current user's role and access.
     */
    app.get('/api/bugs', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            console.log(`üìã Fetching bugs for user ${currentUser.id} with role ${currentUser.role}`);
            const bugs = await storage_1.storage.getBugsForUser(currentUser.id, currentUser.role, currentUser.organizationId);
            console.log(`‚úÖ Found ${bugs.length} bugs for user ${currentUser.id}`);
            // Debug: Log file attachment info for each bug
            bugs.forEach(bug => {
                if (bug.file_path) {
                    console.log(`üîó Bug ${bug.id} has file: ${bug.file_name} at ${bug.file_path}`);
                }
            });
            res.json(bugs);
        }
        catch (error) {
            console.error('‚ùå Error fetching bugs:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch bugs',
            });
        }
    });
    /**
     * GET /api/bugs/:id - Retrieves a specific bug by ID.
     */
    app.get('/api/bugs/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: 'Bad request',
                    message: 'Bug ID is required',
                });
            }
            const bug = await storage_1.storage.getBug(id, currentUser.id, currentUser.role, currentUser.organizationId);
            if (!bug) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'Bug not found or access denied',
                });
            }
            res.json(bug);
        }
        catch (error) {
            console.error('‚ùå Error fetching bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to fetch bug',
            });
        }
    });
    /**
     * POST /api/bugs - Creates a new bug report with optional single file attachment.
     */
    app.post('/api/bugs', auth_1.requireAuth, upload.single('attachment'), async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate the request body
            const validation = schema_1.insertBugSchema.safeParse({
                ...req.body,
                createdBy: currentUser.id,
            });
            if (!validation.success) {
                return res.status(400).json({
                    error: 'Validation failed',
                    message: 'Invalid bug data',
                    details: validation.error.issues,
                });
            }
            let bugData = validation.data;
            // Handle single file attachment if present
            if (req.file) {
                // Fix filename encoding issues
                const originalname = Buffer.from(req.file.originalname, 'latin1').toString('utf8');
                console.log(`üìé Processing attachment for new bug:`, {
                    originalname: originalname,
                    filename: req.file.filename,
                    size: req.file.size,
                    mimetype: req.file.mimetype
                });
                bugData = {
                    ...bugData,
                    filePath: `general/${req.file.filename}`,
                    fileName: originalname,
                    fileSize: req.file.size,
                };
            }
            // Log the final bugData before saving
            console.log(`üêõ Creating bug with data:`, {
                title: bugData.title,
                hasFile: !!bugData.filePath,
                filePath: bugData.filePath,
                fileName: bugData.fileName,
                fileSize: bugData.fileSize
            });
            const bug = await storage_1.storage.createBug(bugData);
            console.log(`‚úÖ Created new bug ${bug.id} by user ${currentUser.id}`);
            res.status(201).json(bug);
        }
        catch (error) {
            console.error('‚ùå Error creating bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to create bug',
            });
        }
    });
    /**
     * PATCH /api/bugs/:id - Updates an existing bug.
     * Users can edit their own bugs, admins and managers can edit any bug.
     */
    app.patch('/api/bugs/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: 'Bad request',
                    message: 'Bug ID is required',
                });
            }
            // Validate the request body
            const updateSchema = zod_1.z.object({
                title: zod_1.z
                    .string()
                    .min(1, 'Title is required')
                    .max(200, 'Title must not exceed 200 characters')
                    .optional(),
                description: zod_1.z
                    .string()
                    .min(10, 'Description must be at least 10 characters')
                    .max(2000, 'Description must not exceed 2000 characters')
                    .optional(),
                category: zod_1.z
                    .enum([
                    'ui_ux',
                    'functionality',
                    'performance',
                    'data',
                    'security',
                    'integration',
                    'other',
                ])
                    .optional(),
                page: zod_1.z.string().min(1, 'Page is required').optional(),
                priority: zod_1.z.enum(['low', 'medium', 'high', 'critical']).optional(),
                reproductionSteps: zod_1.z.string().optional(),
                environment: zod_1.z.string().optional(),
                status: zod_1.z.enum(['new', 'acknowledged', 'in_progress', 'resolved', 'closed']).optional(),
                assignedTo: zod_1.z.string().uuid().nullable().optional(),
                notes: zod_1.z.string().optional(),
                resolvedBy: zod_1.z.string().uuid().nullable().optional(),
                resolvedAt: zod_1.z.date().nullable().optional(),
            });
            const validation = updateSchema.safeParse(req.body);
            if (!validation.success) {
                return res.status(400).json({
                    error: 'Validation failed',
                    message: 'Invalid update data',
                    details: validation.error.issues,
                });
            }
            const updates = validation.data;
            const bug = await storage_1.storage.updateBug(id, updates, currentUser.id, currentUser.role);
            if (!bug) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'Bug not found or access denied',
                });
            }
            console.log(`üìù Updated bug ${id} by user ${currentUser.id}`);
            res.json(bug);
        }
        catch (error) {
            console.error('‚ùå Error updating bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update bug',
            });
        }
    });
    /**
     * GET /api/bugs/:id/file - Serves the file attachment for a bug.
     */
    app.get('/api/bugs/:id/file', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const { download } = req.query;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Get the bug with file info
            const bug = await storage_1.storage.getBug(id, currentUser.id, currentUser.role, currentUser.organizationId);
            console.log('üêõ getBug result:', bug ? { id: bug.id, filePath: bug.filePath, fileName: bug.fileName } : 'undefined');
            if (!bug) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'Bug not found',
                });
            }
            // Check both camelCase and snake_case field names for compatibility
            const filePath = bug.filePath || bug.file_path;
            const fileName = bug.fileName || bug.file_name;
            if (!filePath) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'No file attached to this bug',
                });
            }
            // Handle different path formats (absolute vs relative)
            const fullPath = path_1.default.isAbsolute(filePath)
                ? filePath
                : path_1.default.join(process.cwd(), 'uploads', filePath);
            // Check if file exists
            if (!fs_1.default.existsSync(fullPath)) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'File not found on server',
                });
            }
            // Detect MIME type based on file extension
            const getContentType = (filename) => {
                const ext = filename.toLowerCase().split('.').pop();
                switch (ext) {
                    case 'pdf': return 'application/pdf';
                    case 'jpg':
                    case 'jpeg': return 'image/jpeg';
                    case 'png': return 'image/png';
                    case 'gif': return 'image/gif';
                    case 'doc': return 'application/msword';
                    case 'docx': return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                    case 'txt': return 'text/plain';
                    default: return 'application/octet-stream';
                }
            };
            // Set proper content type for viewing
            const contentType = getContentType(fileName || 'attachment');
            res.setHeader('Content-Type', contentType);
            // Properly encode filename for French characters and other special characters
            const encodedFilename = Buffer.from(fileName || 'attachment', 'utf8').toString('binary');
            // Set appropriate headers
            if (download === 'true') {
                res.setHeader('Content-Disposition', `attachment; filename="${encodedFilename}"; filename*=UTF-8''${encodeURIComponent(fileName || 'attachment')}`);
            }
            else {
                res.setHeader('Content-Disposition', `inline; filename="${encodedFilename}"; filename*=UTF-8''${encodeURIComponent(fileName || 'attachment')}`);
            }
            // Stream the file
            const fileStream = fs_1.default.createReadStream(fullPath);
            fileStream.pipe(res);
            fileStream.on('error', (error) => {
                console.error(`‚ùå Error streaming file for bug ${id}:`, error);
                if (!res.headersSent) {
                    res.status(500).json({ error: 'Failed to stream file' });
                }
            });
        }
        catch (error) {
            console.error('‚ùå Error serving bug file:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to serve file',
            });
        }
    });
    /**
     * DELETE /api/bugs/:id - Deletes a bug.
     * Only admins can delete bugs.
     */
    app.delete('/api/bugs/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (!id) {
                return res.status(400).json({
                    error: 'Bad request',
                    message: 'Bug ID is required',
                });
            }
            const deleted = await storage_1.storage.deleteBug(id, currentUser.id, currentUser.role);
            if (!deleted) {
                return res.status(404).json({
                    error: 'Not found',
                    message: 'Bug not found or access denied',
                });
            }
            console.log(`üóëÔ∏è Deleted bug ${id} by user ${currentUser.id}`);
            res.status(204).send();
        }
        catch (error) {
            console.error('‚ùå Error deleting bug:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to delete bug',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,