492761b62732f872be95c2d40e668a0e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Permissions;
const jsx_runtime_1 = require("react/jsx-runtime");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const table_1 = require("@/components/ui/table");
const tabs_1 = require("@/components/ui/tabs");
const select_1 = require("@/components/ui/select");
const input_1 = require("@/components/ui/input");
const react_query_1 = require("@tanstack/react-query");
const use_language_1 = require("@/hooks/use-language");
const lucide_react_1 = require("lucide-react");
const react_1 = require("react");
const queryClient_1 = require("@/lib/queryClient");
const use_toast_1 = require("@/hooks/use-toast");
// Permissions config reference for display purposes
const permissionsConfig = {
    admin: { length: 148 },
    manager: { length: 70 },
    tenant: { length: 9 },
    resident: { length: 9 },
};
/**
 * RBAC Permissions Management Page
 * Shows actual permissions being used in the platform and provides management capabilities.
 */
function Permissions() {
    const { t } = (0, use_language_1.useLanguage)();
    const { toast } = (0, use_toast_1.useToast)();
    const [activeTab, setActiveTab] = (0, react_1.useState)('users');
    const [searchQuery, setSearchQuery] = (0, react_1.useState)('');
    const [filterRole, setFilterRole] = (0, react_1.useState)('all');
    const [editingUser, setEditingUser] = (0, react_1.useState)(null);
    const [showNewPermissionForm, setShowNewPermissionForm] = (0, react_1.useState)(false);
    const [selectedCategory, setSelectedCategory] = (0, react_1.useState)('all');
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const itemsPerPage = 5;
    // Additional filters
    const [filterUserStatus, setFilterUserStatus] = (0, react_1.useState)('all'); // active, inactive, all
    const [filterPermissionStatus, setFilterPermissionStatus] = (0, react_1.useState)('all'); // granted, revoked, all
    const [permissionSearchQuery, setPermissionSearchQuery] = (0, react_1.useState)('');
    const [filterActionType, setFilterActionType] = (0, react_1.useState)('all'); // read, write, delete, all
    const [sortBy, setSortBy] = (0, react_1.useState)('name'); // name, resource, action, date
    // Fetch permissions matrix (includes all permission data grouped by resource)
    const { data: permissionsMatrix, isLoading: matrixLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/permissions-matrix'],
    });
    // Fetch user permissions
    const { data: userPermissions, isLoading: userPermissionsLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/user-permissions'],
    });
    // Fetch users
    const { data: users, isLoading: usersLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/users'],
    });
    const isLoading = matrixLoading || userPermissionsLoading || usersLoading;
    // Extract data from matrix
    const permissions = permissionsMatrix?.permissions || [];
    const rolePermissions = permissionsMatrix?.rolePermissions || [];
    const permissionsByResource = permissionsMatrix?.permissionsByResource || {};
    const roleMatrix = permissionsMatrix?.roleMatrix || {};
    // Group permissions by role for backward compatibility
    const permissionsByRole = rolePermissions.reduce((acc, rp) => {
        if (!acc[rp.role]) {
            acc[rp.role] = [];
        }
        acc[rp.role].push(rp);
        return acc;
    }, {});
    // Available roles (now from actual RBAC system)
    const roles = ['admin', 'manager', 'tenant', 'resident'];
    // Fetch permission categories for filtering
    const { data: permissionCategories } = (0, react_query_1.useQuery)({
        queryKey: ['/api/permission-categories'],
    });
    // Get unique categories from permissions
    const categories = permissionCategories?.map((cat) => cat.name) || [];
    // Filter users based on search, role, and status
    const filteredUsers = users?.filter((user) => {
        const matchesSearch = searchQuery === '' ||
            user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
            `${user.firstName} ${user.lastName}`.toLowerCase().includes(searchQuery.toLowerCase());
        const matchesRole = filterRole === 'all' || user.role === filterRole;
        const matchesStatus = filterUserStatus === 'all' ||
            (filterUserStatus === 'active' && user.isActive) ||
            (filterUserStatus === 'inactive' && !user.isActive);
        // Filter by permission status if specified
        if (filterPermissionStatus !== 'all') {
            const userSpecificPermissions = userPermissions?.filter((up) => up.userId === user.id) || [];
            const hasGrantedPermissions = userSpecificPermissions.some((up) => up.granted);
            const hasRevokedPermissions = userSpecificPermissions.some((up) => !up.granted);
            if (filterPermissionStatus === 'granted' && !hasGrantedPermissions) {
                return false;
            }
            if (filterPermissionStatus === 'revoked' && !hasRevokedPermissions) {
                return false;
            }
        }
        return matchesSearch && matchesRole && matchesStatus;
    }) || [];
    // Pagination calculations
    const totalUsers = filteredUsers.length;
    const totalPages = Math.ceil(totalUsers / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentUsers = filteredUsers.slice(startIndex, endIndex);
    // Reset page when filters change
    const handleSearchChange = (value) => {
        setSearchQuery(value);
        setCurrentPage(1);
    };
    const handleRoleChange = (value) => {
        setFilterRole(value);
        setCurrentPage(1);
    };
    // Set default category to first available category if none selected
    (0, react_1.useEffect)(() => {
        const availableCategories = Object.keys(permissionsByResource);
        if (!selectedCategory && availableCategories.length > 0) {
            setSelectedCategory(availableCategories[0]);
        }
    }, [permissionsByResource, selectedCategory]);
    // Filter permissions by category, search, and action type
    const filteredPermissions = permissions?.filter((permission) => {
        // Category filter
        if (selectedCategory !== 'all' && permission.resourceType !== selectedCategory) {
            return false;
        }
        // Search filter
        if (permissionSearchQuery) {
            const searchLower = permissionSearchQuery.toLowerCase();
            const matchesSearch = permission.name.toLowerCase().includes(searchLower) ||
                permission.displayName.toLowerCase().includes(searchLower) ||
                permission.description.toLowerCase().includes(searchLower) ||
                permission.resourceType.toLowerCase().includes(searchLower);
            if (!matchesSearch) {
                return false;
            }
        }
        // Action type filter
        if (filterActionType !== 'all') {
            const actionMatches = permission.action
                .toLowerCase()
                .includes(filterActionType.toLowerCase());
            if (!actionMatches) {
                return false;
            }
        }
        return true;
    }) || [];
    // Sort permissions
    const sortedPermissions = [...filteredPermissions].sort((a, b) => {
        switch (sortBy) {
            case 'name':
                return a.displayName.localeCompare(b.displayName);
            case 'resource':
                return a.resourceType.localeCompare(b.resourceType);
            case 'action':
                return a.action.localeCompare(b.action);
            case 'date':
                return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
            default:
                return 0;
        }
    });
    // Get unique action types for filter
    const actionTypes = [...new Set(permissions?.map((p) => p.action) || [])];
    // Reset filters functions
    const resetUserFilters = () => {
        setSearchQuery('');
        setFilterRole('all');
        setFilterUserStatus('all');
        setFilterPermissionStatus('all');
        setCurrentPage(1);
    };
    const resetPermissionFilters = () => {
        setPermissionSearchQuery('');
        setSelectedCategory('all');
        setFilterActionType('all');
        setSortBy('name');
    };
    // Mutations for managing permissions
    const grantUserPermissionMutation = (0, react_query_1.useMutation)({
        mutationFn: (data) => (0, queryClient_1.apiRequest)('POST', '/api/user-permissions', data),
        onSuccess: () => {
            queryClient_1.queryClient.invalidateQueries({ queryKey: ['/api/user-permissions'] });
            toast({
                title: 'Permission Granted',
                description: 'User permission has been successfully granted.',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.response?.data?.message || 'Failed to grant permission',
                variant: 'destructive',
            });
        },
    });
    const validatePermissionMutation = (0, react_query_1.useMutation)({
        mutationFn: (permission) => (0, queryClient_1.apiRequest)('POST', '/api/permissions/validate', { permission }),
        onSuccess: (data) => {
            toast({
                title: 'Permission Validation',
                description: `${data.message} for role: ${data.role}`,
                variant: data.hasPermission ? 'default' : 'destructive',
            });
        },
    });
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'RBAC Permissions', subtitle: 'Manage role-based access control and user permissions' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-4 gap-6', children: [(0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-md transition-shadow cursor-pointer', onClick: () => setActiveTab('permissions'), children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-600', children: "System Permissions" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-koveo-navy', children: permissions?.length || 0 }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 mt-1', children: "Active permissions" })] }), (0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-8 w-8 text-koveo-navy' })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-md transition-shadow cursor-pointer', onClick: () => setActiveTab('permissions'), children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-600', children: "Role Hierarchy" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-koveo-navy', children: roles.length }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 mt-1', children: "Admin \u2192 Manager \u2192 Resident \u2192 Tenant" })] }), (0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'h-8 w-8 text-koveo-navy' })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-md transition-shadow cursor-pointer', onClick: () => setActiveTab('permissions'), children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-600', children: "Permission Matrix" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-koveo-navy', children: "12" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 mt-1', children: "Permission categories" })] }), (0, jsx_runtime_1.jsx)(lucide_react_1.Settings, { className: 'h-8 w-8 text-koveo-navy' })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-md transition-shadow cursor-pointer', onClick: () => setActiveTab('users'), children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-sm font-medium text-gray-600', children: "User Overrides" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-koveo-navy', children: userPermissions?.length || 0 }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 mt-1', children: userPermissions?.length === 0 ? 'Role-based only' : 'Custom permissions' })] }), (0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-8 w-8 text-koveo-navy' })] }) }) })] }), (0, jsx_runtime_1.jsxs)(tabs_1.Tabs, { value: activeTab, onValueChange: setActiveTab, className: 'w-full', children: [(0, jsx_runtime_1.jsxs)(tabs_1.TabsList, { className: 'grid w-full grid-cols-2', children: [(0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'users', children: "User Permissions" }), (0, jsx_runtime_1.jsx)(tabs_1.TabsTrigger, { value: 'permissions', children: "All Permissions" })] }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'users', className: 'space-y-6', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-5 w-5' }), "User-Specific Permissions"] }) }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4 mb-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex-1', children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'absolute left-3 top-3 h-4 w-4 text-gray-400' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Search users by name or email...', value: searchQuery, onChange: (e) => handleSearchChange(e.target.value), className: 'pl-10', "data-testid": 'input-user-search' })] }) }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filterRole, onValueChange: handleRoleChange, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', "data-testid": 'select-role-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Filter by role' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Roles" }), roles.map((role) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: role, children: role.charAt(0).toUpperCase() + role.slice(1) }, role)))] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-4 items-center', children: [(0, jsx_runtime_1.jsxs)(select_1.Select, { value: filterUserStatus, onValueChange: setFilterUserStatus, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', "data-testid": 'select-user-status-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'User status' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Users" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'active', children: "Active Only" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'inactive', children: "Inactive Only" })] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filterPermissionStatus, onValueChange: setFilterPermissionStatus, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-48', "data-testid": 'select-permission-status-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Permission status' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Permission Types" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'granted', children: "Has Granted Permissions" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'revoked', children: "Has Revoked Permissions" })] })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: resetUserFilters, className: 'flex items-center gap-2', "data-testid": 'button-reset-user-filters', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: 'h-4 w-4' }), "Reset Filters"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 text-sm text-gray-600', children: [(0, jsx_runtime_1.jsxs)("span", { children: ["Showing ", filteredUsers.length, " of ", users?.length || 0, " users"] }), (searchQuery ||
                                                                        filterRole !== 'all' ||
                                                                        filterUserStatus !== 'all' ||
                                                                        filterPermissionStatus !== 'all') && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)("span", { children: "Filters active" })] }))] })] }), isLoading ? ((0, jsx_runtime_1.jsx)("div", { className: 'flex justify-center items-center py-8', children: (0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-koveo-navy' }) })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4', children: [currentUsers.map((user) => {
                                                                        const userSpecificPermissions = userPermissions?.filter((up) => up.userId === user.id) || [];
                                                                        const rolePermissionsCount = permissionsByRole[user.role]?.length || 0;
                                                                        const totalPermissions = rolePermissionsCount +
                                                                            userSpecificPermissions.filter((up) => up.granted).length;
                                                                        return ((0, jsx_runtime_1.jsxs)("div", { className: 'border rounded-lg p-6 hover:shadow-md transition-shadow', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between mb-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-3', children: [(0, jsx_runtime_1.jsx)("div", { className: 'w-10 h-10 bg-koveo-navy rounded-full flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("span", { className: 'text-white text-sm font-medium', children: [user.firstName?.charAt(0), user.lastName?.charAt(0)] }) }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("h4", { className: 'font-semibold text-gray-900', children: [user.firstName, " ", user.lastName] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: user.email })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'capitalize font-medium', children: user.role }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: user.isActive ? 'default' : 'secondary', children: user.isActive ? 'Active' : 'Inactive' })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-3 gap-4 mb-4 p-3 bg-gray-50 rounded-lg', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-koveo-navy', children: rolePermissionsCount }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-600', children: "Role Permissions" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-blue-600', children: userSpecificPermissions.length }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-600', children: "User Overrides" })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-2xl font-bold text-green-600', children: totalPermissions }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-600', children: "Total Permissions" })] })] }), userSpecificPermissions.length > 0 ? ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("h5", { className: 'font-medium text-gray-900 flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Settings, { className: 'h-4 w-4' }), "User-Specific Permissions (", userSpecificPermissions.length, ")"] }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-2', children: userSpecificPermissions.map((up) => ((0, jsx_runtime_1.jsxs)("div", { className: `text-sm px-3 py-2 rounded-lg border flex items-center justify-between ${up.granted
                                                                                                    ? 'bg-green-50 border-green-200 text-green-800'
                                                                                                    : 'bg-red-50 border-red-200 text-red-800'}`, children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex-1', children: [(0, jsx_runtime_1.jsx)("p", { className: 'font-medium', children: up.permission?.displayName || up.permissionId }), up.reason && ((0, jsx_runtime_1.jsx)("p", { className: 'text-xs opacity-75 mt-1', children: up.reason }))] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center gap-2', children: (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: up.granted ? 'default' : 'destructive', className: 'text-xs', children: up.granted ? 'Granted' : 'Revoked' }) })] }, up.id))) }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-gray-500 mt-2', children: ["Last modified:", ' ', new Date(userSpecificPermissions[0]?.grantedAt).toLocaleDateString()] })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-4 text-gray-500', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'w-8 h-8 mx-auto mb-2 text-gray-400' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm', children: "No user-specific permission overrides" }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-400', children: ["User inherits all permissions from ", user.role, " role"] })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2 mt-4 pt-4 border-t', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setEditingUser(editingUser === user.id ? null : user.id), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit, { className: 'h-4 w-4 mr-2' }), editingUser === user.id ? 'Cancel' : 'Manage Permissions'] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', onClick: () => {
                                                                                                // View detailed permissions for this user
                                                                                                toast({
                                                                                                    title: 'User Details',
                                                                                                    description: `${user.firstName} ${user.lastName} has ${totalPermissions} total permissions`,
                                                                                                });
                                                                                            }, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'h-4 w-4 mr-2' }), "View Details"] })] }), editingUser === user.id && ((0, jsx_runtime_1.jsxs)("div", { className: 'mt-4 p-4 bg-blue-50 rounded-lg border border-blue-200', children: [(0, jsx_runtime_1.jsx)("h6", { className: 'font-medium text-blue-900 mb-3', children: "Manage User Permissions" }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [(0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: (permissionId) => {
                                                                                                        grantUserPermissionMutation.mutate({
                                                                                                            userId: user.id,
                                                                                                            permissionId,
                                                                                                            reason: 'Admin granted via permissions page',
                                                                                                        });
                                                                                                    }, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Grant a new permission...' }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: permissions
                                                                                                                .filter((p) => !userSpecificPermissions.some((up) => up.permissionId === p.id))
                                                                                                                .map((permission) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: permission.id, children: [permission.displayName, " (", permission.resourceType, ")"] }, permission.id))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setEditingUser(null), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'ghost', size: 'sm', disabled: true, children: (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', children: "Future: Bulk Actions" }) })] })] })] }))] }, user.id));
                                                                    }), filteredUsers.length === 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-8 text-gray-500', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'w-12 h-12 mx-auto mb-4 text-gray-400' }), (0, jsx_runtime_1.jsx)("p", { children: "No users found matching your search criteria." })] }))] }), totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-center items-center gap-4 mt-6', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage((prev) => Math.max(prev - 1, 1)), disabled: currentPage === 1, children: "Previous" }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-600', children: "Page" }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'number', min: '1', max: totalPages, value: currentPage, onChange: (e) => {
                                                                                    const page = parseInt(e.target.value);
                                                                                    if (page >= 1 && page <= totalPages) {
                                                                                        setCurrentPage(page);
                                                                                    }
                                                                                }, onBlur: (e) => {
                                                                                    const page = parseInt(e.target.value);
                                                                                    if (isNaN(page) || page < 1) {
                                                                                        setCurrentPage(1);
                                                                                    }
                                                                                    else if (page > totalPages) {
                                                                                        setCurrentPage(totalPages);
                                                                                    }
                                                                                }, className: 'w-16 text-center' }), (0, jsx_runtime_1.jsxs)("span", { className: 'text-sm text-gray-600', children: ["of ", totalPages] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage((prev) => Math.min(prev + 1, totalPages)), disabled: currentPage === totalPages, children: "Next" }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-gray-600', children: ["Showing ", startIndex + 1, "-", Math.min(endIndex, totalUsers), " of", ' ', totalUsers, " users"] })] }))] }))] })] }) }), (0, jsx_runtime_1.jsx)(tabs_1.TabsContent, { value: 'permissions', className: 'space-y-6', children: (0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [(0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-5 w-5' }), "All Permissions"] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: "Complete system permissions table with detailed information about each permission." })] }), (0, jsx_runtime_1.jsxs)(card_1.CardContent, { children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-4 mb-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-4', children: [(0, jsx_runtime_1.jsx)("div", { className: 'flex-1', children: (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'absolute left-3 top-3 h-4 w-4 text-gray-400' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: 'Search permissions by name, description, or resource type...', value: permissionSearchQuery, onChange: (e) => setPermissionSearchQuery(e.target.value), className: 'pl-10', "data-testid": 'input-permission-search' })] }) }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedCategory, onValueChange: setSelectedCategory, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-48', "data-testid": 'select-category-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Filter by category' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Categories" }), Object.keys(permissionsByResource).map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category, children: category.charAt(0).toUpperCase() +
                                                                                            category.slice(1).replace(/[_-]/g, ' ') }, category)))] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-4 items-center', children: [(0, jsx_runtime_1.jsxs)(select_1.Select, { value: filterActionType, onValueChange: setFilterActionType, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', "data-testid": 'select-action-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Action type' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All Actions" }), actionTypes.map((action) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: action, children: action.toUpperCase() }, action)))] })] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: sortBy, onValueChange: setSortBy, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { className: 'w-40', "data-testid": 'select-sort-by', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Sort by' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'name', children: "Sort by Name" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'resource', children: "Sort by Resource" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'action', children: "Sort by Action" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'date', children: "Sort by Date" })] })] }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', onClick: resetPermissionFilters, className: 'flex items-center gap-2', "data-testid": 'button-reset-permission-filters', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.X, { className: 'h-4 w-4' }), "Reset Filters"] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 text-sm text-gray-600', children: [(0, jsx_runtime_1.jsxs)("span", { children: ["Showing ", sortedPermissions.length, " of ", permissions?.length || 0, " permissions"] }), (permissionSearchQuery ||
                                                                        selectedCategory !== 'all' ||
                                                                        filterActionType !== 'all' ||
                                                                        sortBy !== 'name') && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)("span", { children: "Filters active" })] }))] })] }), isLoading ? ((0, jsx_runtime_1.jsx)("div", { className: 'flex justify-center items-center py-8', children: (0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-koveo-navy' }) })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'overflow-x-auto', children: [(0, jsx_runtime_1.jsxs)(table_1.Table, { children: [(0, jsx_runtime_1.jsx)(table_1.TableHeader, { children: (0, jsx_runtime_1.jsxs)(table_1.TableRow, { className: 'bg-gray-50', children: [(0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'font-semibold text-gray-900', children: "Permission ID" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'font-semibold text-gray-900', children: "Display Name" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'font-semibold text-gray-900', children: "Resource Type" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'font-semibold text-gray-900', children: "Action" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'text-center font-semibold text-gray-900', children: "Status" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'font-semibold text-gray-900', children: "Description" }), (0, jsx_runtime_1.jsx)(table_1.TableHead, { className: 'text-center font-semibold text-gray-900', children: "Roles" })] }) }), (0, jsx_runtime_1.jsx)(table_1.TableBody, { children: sortedPermissions.map((permission) => {
                                                                            const rolesWithPermission = roles.filter((role) => roleMatrix[role]?.includes(permission.id));
                                                                            return ((0, jsx_runtime_1.jsxs)(table_1.TableRow, { className: 'hover:bg-gray-50', children: [(0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'font-mono text-xs text-gray-600', children: permission.id }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'font-medium text-gray-900', children: permission.displayName }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'capitalize', children: (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', children: permission.resourceType.replace('_', ' ') }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'text-blue-600 font-medium uppercase', children: permission.action }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'text-center', children: (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: permission.isActive ? 'default' : 'secondary', children: permission.isActive ? 'Active' : 'Inactive' }) }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'text-sm text-gray-600 max-w-md', children: permission.description }), (0, jsx_runtime_1.jsx)(table_1.TableCell, { className: 'text-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-wrap gap-1 justify-center', children: [rolesWithPermission.map((role) => ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', className: 'text-xs', children: role.charAt(0).toUpperCase() + role.slice(1) }, role))), rolesWithPermission.length === 0 && ((0, jsx_runtime_1.jsx)("span", { className: 'text-xs text-gray-400', children: "None" }))] }) })] }, permission.id));
                                                                        }) })] }), sortedPermissions.length === 0 && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center py-8 text-gray-500', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'w-12 h-12 mx-auto mb-4 text-gray-400' }), (0, jsx_runtime_1.jsx)("p", { children: "No permissions found matching your search criteria." })] }))] }))] })] }) })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,