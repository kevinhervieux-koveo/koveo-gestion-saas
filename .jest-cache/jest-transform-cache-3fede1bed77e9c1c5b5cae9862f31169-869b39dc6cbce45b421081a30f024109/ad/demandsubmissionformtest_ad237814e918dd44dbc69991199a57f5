2fa16c4c975f148ed97092689247f8eb
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock the hooks and utils
globals_1.jest.mock('@/hooks/use-language', () => ({
    useLanguage: () => ({
        t: (key) => key,
    }),
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({
        toast: globals_1.jest.fn(),
    }),
}));
globals_1.jest.mock('@/lib/toastUtils', () => ({
    toastUtils: {
        createSuccess: globals_1.jest.fn(),
        createError: globals_1.jest.fn(),
    },
}));
/**
 * @file Demand Submission Form Frontend Tests
 * @description Tests for the demand submission form component and validation
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
// Mock fetch with proper typing
const mockFetch = globals_1.jest.fn();
global.fetch = mockFetch;
// Helper to create proper Response mock
const createMockResponse = (data, ok = true, status = 200) => ({
    ok,
    status,
    json: () => Promise.resolve(data),
    headers: new Headers(),
    redirected: false,
    statusText: ok ? 'OK' : 'Error',
    type: 'basic',
    url: '',
    clone: globals_1.jest.fn(),
    body: null,
    bodyUsed: false,
    arrayBuffer: globals_1.jest.fn(),
    blob: globals_1.jest.fn(),
    formData: globals_1.jest.fn(),
    text: globals_1.jest.fn(),
});
// Mock queryClient
const createMockQueryClient = () => new react_query_1.QueryClient({
    defaultOptions: {
        queries: {
            retry: false,
        },
    },
});
// Mock component data
const mockBuildings = [
    { id: 'building-1', name: 'Test Building 1' },
    { id: 'building-2', name: 'Test Building 2' },
];
const mockUser = {
    id: 'user-1',
    role: 'resident',
    email: 'test@example.com',
    firstName: 'Test',
    lastName: 'User',
};
// We'll create a simplified test component that includes the form logic
const TestDemandForm = () => {
    const [isOpen, setIsOpen] = react_1.default.useState(true);
    const [isSubmitting, setIsSubmitting] = react_1.default.useState(false);
    const handleSubmit = async (data) => {
        // Client-side validation
        if (!data.type || data.type === '') {
            return; // Don't submit if no type selected
        }
        if (!data.description || typeof data.description !== 'string' || data.description.trim().length < 10) {
            return; // Don't submit if description is too short
        }
        setIsSubmitting(true);
        try {
            const response = await fetch('/api/demands', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ...data,
                    status: 'submitted',
                    buildingId: data.buildingId || undefined,
                    residenceId: data.residenceId || undefined,
                    assignationBuildingId: data.assignationBuildingId || undefined,
                    assignationResidenceId: data.assignationResidenceId || undefined,
                }),
            });
            if (!response || !response.ok) {
                throw new Error('Failed to create demand');
            }
            setIsOpen(false);
        }
        catch (error) {
            console.error('Submission error:', error);
        }
        finally {
            setIsSubmitting(false);
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", { "data-testid": "demand-form-container", children: [isOpen && ((0, jsx_runtime_1.jsxs)("form", { "data-testid": "demand-form", onSubmit: (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const data = {
                        type: formData.get('type'),
                        buildingId: formData.get('buildingId'),
                        description: formData.get('description'),
                    };
                    handleSubmit(data);
                }, children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "type", children: "Type" }), (0, jsx_runtime_1.jsxs)("select", { "data-testid": "input-type", name: "type", required: true, children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "Select Type" }), (0, jsx_runtime_1.jsx)("option", { value: "maintenance", children: "Maintenance" }), (0, jsx_runtime_1.jsx)("option", { value: "complaint", children: "Complaint" }), (0, jsx_runtime_1.jsx)("option", { value: "information", children: "Information" }), (0, jsx_runtime_1.jsx)("option", { value: "other", children: "Other" })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "buildingId", children: "Building" }), (0, jsx_runtime_1.jsxs)("select", { "data-testid": "input-building", name: "buildingId", children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "Select Building" }), mockBuildings.map((building) => ((0, jsx_runtime_1.jsx)("option", { value: building.id, children: building.name }, building.id)))] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { htmlFor: "description", children: "Description" }), (0, jsx_runtime_1.jsx)("textarea", { "data-testid": "input-description", name: "description", placeholder: "Describe your request in detail", required: true, minLength: 10, maxLength: 2000 })] }), (0, jsx_runtime_1.jsx)("button", { type: "submit", "data-testid": "button-submit-demand", disabled: isSubmitting, children: isSubmitting ? 'Creating...' : 'Create Demand' })] })), !isOpen && (0, jsx_runtime_1.jsx)("div", { "data-testid": "success-message", children: "Demand created successfully!" })] }));
};
const TestWrapper = ({ children }) => {
    const queryClient = createMockQueryClient();
    return (0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: children });
};
(0, globals_1.describe)('Demand Submission Form Tests', () => {
    // Mock console.error to avoid test output pollution
    const originalConsoleError = console.error;
    (0, globals_1.beforeEach)(() => {
        mockFetch.mockClear();
        // Suppress console.error during tests
        console.error = globals_1.jest.fn();
    });
    afterAll(() => {
        // Restore console.error after tests
        console.error = originalConsoleError;
    });
    (0, globals_1.describe)('Form Rendering', () => {
        (0, globals_1.it)('should render all required form fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            (0, globals_1.expect)(react_2.screen.getByTestId('demand-form')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('input-type')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('input-building')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('input-description')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('button-submit-demand')).toBeInTheDocument();
        });
        (0, globals_1.it)('should render all demand type options', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Maintenance');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Complaint');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Information');
            (0, globals_1.expect)(typeSelect).toHaveTextContent('Other');
        });
        (0, globals_1.it)('should render building options', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const buildingSelect = react_2.screen.getByTestId('input-building');
            (0, globals_1.expect)(buildingSelect).toHaveTextContent('Test Building 1');
            (0, globals_1.expect)(buildingSelect).toHaveTextContent('Test Building 2');
        });
    });
    (0, globals_1.describe)('Form Validation', () => {
        (0, globals_1.it)('should require type selection', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            const description = react_2.screen.getByTestId('input-description');
            await user_event_1.default.type(description, 'Test description that is long enough');
            await user_event_1.default.click(submitButton);
            // Form should not submit without type
            (0, globals_1.expect)(mockFetch).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should require description', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.click(submitButton);
            // Form should not submit without description
            (0, globals_1.expect)(mockFetch).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should validate minimum description length', async () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.type(description, 'Short'); // Less than 10 characters
            await user_event_1.default.click(submitButton);
            // Form should not submit with short description
            (0, globals_1.expect)(mockFetch).not.toHaveBeenCalled();
        });
        (0, globals_1.it)('should accept valid form data', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({ id: 'demand-1', status: 'submitted' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const buildingSelect = react_2.screen.getByTestId('input-building');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.selectOptions(buildingSelect, 'building-1');
            await user_event_1.default.type(description, 'This is a valid description that is long enough');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: 'maintenance',
                    buildingId: 'building-1',
                    description: 'This is a valid description that is long enough',
                    status: 'submitted',
                    residenceId: undefined,
                    assignationBuildingId: undefined,
                    assignationResidenceId: undefined,
                }),
            });
        });
    });
    (0, globals_1.describe)('Form Submission', () => {
        (0, globals_1.it)('should handle successful submission', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({ id: 'demand-1', status: 'submitted' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'complaint');
            await user_event_1.default.type(description, 'This is a valid complaint description');
            await user_event_1.default.click(submitButton);
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('success-message')).toBeInTheDocument();
            });
        });
        (0, globals_1.it)('should handle submission with optional building field', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({ id: 'demand-1', status: 'submitted' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'information');
            await user_event_1.default.type(description, 'Information request without specific building');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: 'information',
                    buildingId: undefined,
                    description: 'Information request without specific building',
                    status: 'submitted',
                    residenceId: undefined,
                    assignationBuildingId: undefined,
                    assignationResidenceId: undefined,
                }),
            });
        });
        (0, globals_1.it)('should show loading state during submission', async () => {
            mockFetch.mockImplementation(() => new Promise((resolve) => setTimeout(() => resolve({ ok: true, json: async () => ({}) }), 100)));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'other');
            await user_event_1.default.type(description, 'Test description for loading state');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(submitButton).toHaveTextContent('Creating...');
            (0, globals_1.expect)(submitButton).toBeDisabled();
            await (0, react_2.waitFor)(() => {
                (0, globals_1.expect)(react_2.screen.getByTestId('success-message')).toBeInTheDocument();
            });
        });
        (0, globals_1.it)('should handle submission errors gracefully', async () => {
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.type(description, 'Test description for error handling');
            await user_event_1.default.click(submitButton);
            await (0, react_2.waitFor)(() => {
                // Form should still be visible after error
                (0, globals_1.expect)(react_2.screen.getByTestId('demand-form')).toBeInTheDocument();
                (0, globals_1.expect)(submitButton).not.toBeDisabled();
            });
        });
        (0, globals_1.it)('should handle server validation errors', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 400,
                json: async () => ({ message: 'Invalid demand data' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.type(description, 'Test description for server error');
            await user_event_1.default.click(submitButton);
            await (0, react_2.waitFor)(() => {
                // Form should still be visible after server error
                (0, globals_1.expect)(react_2.screen.getByTestId('demand-form')).toBeInTheDocument();
                (0, globals_1.expect)(submitButton).not.toBeDisabled();
            });
        });
    });
    (0, globals_1.describe)('Special Characters and Internationalization', () => {
        (0, globals_1.it)('should handle French characters in description', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({ id: 'demand-1', status: 'submitted' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.type(description, 'Réparation nécessaire avec caractères spéciaux: éàùç!');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: 'maintenance',
                    buildingId: undefined,
                    description: 'Réparation nécessaire avec caractères spéciaux: éàùç!',
                    status: 'submitted',
                    residenceId: undefined,
                    assignationBuildingId: undefined,
                    assignationResidenceId: undefined,
                }),
            });
        });
        (0, globals_1.it)('should handle emojis and special symbols in description', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({ id: 'demand-1', status: 'submitted' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.type(description, 'Description with emoji 🏠 and symbols @#$%^&*()');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: 'maintenance',
                    buildingId: undefined,
                    description: 'Description with emoji 🏠 and symbols @#$%^&*()',
                    status: 'submitted',
                    residenceId: undefined,
                    assignationBuildingId: undefined,
                    assignationResidenceId: undefined,
                }),
            });
        });
    });
    (0, globals_1.describe)('Form Field Behavior', () => {
        (0, globals_1.it)('should properly handle empty string conversion to undefined', async () => {
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({ id: 'demand-1', status: 'submitted' }),
            });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
            const typeSelect = react_2.screen.getByTestId('input-type');
            const buildingSelect = react_2.screen.getByTestId('input-building');
            const description = react_2.screen.getByTestId('input-description');
            const submitButton = react_2.screen.getByTestId('button-submit-demand');
            await user_event_1.default.selectOptions(typeSelect, 'maintenance');
            await user_event_1.default.selectOptions(buildingSelect, ''); // Select empty option
            await user_event_1.default.type(description, 'Test description with empty building selection');
            await user_event_1.default.click(submitButton);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', globals_1.expect.objectContaining({
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                // buildingId: undefined gets omitted from JSON, so we check that it's not included or is null
                body: globals_1.expect.not.stringContaining('"buildingId":"'),
            }));
        });
        (0, globals_1.it)('should allow all demand types', async () => {
            mockFetch.mockResolvedValue({
                ok: true,
                json: async () => ({ id: 'demand-1', status: 'submitted' }),
            });
            const demandTypes = ['maintenance', 'complaint', 'information', 'other'];
            for (const type of demandTypes) {
                (0, react_2.render)((0, jsx_runtime_1.jsx)(TestWrapper, { children: (0, jsx_runtime_1.jsx)(TestDemandForm, {}) }));
                const typeSelect = react_2.screen.getByTestId('input-type');
                const description = react_2.screen.getByTestId('input-description');
                const submitButton = react_2.screen.getByTestId('button-submit-demand');
                await user_event_1.default.selectOptions(typeSelect, type);
                await user_event_1.default.type(description, `Test ${type} description with sufficient length`);
                await user_event_1.default.click(submitButton);
                (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('/api/demands', globals_1.expect.objectContaining({
                    body: globals_1.expect.stringContaining(`"type":"${type}"`),
                }));
                // Clean up for next iteration
                mockFetch.mockClear();
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,