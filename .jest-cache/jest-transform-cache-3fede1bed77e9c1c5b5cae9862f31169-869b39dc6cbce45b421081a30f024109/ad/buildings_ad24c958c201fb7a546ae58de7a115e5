02bcccb4de110f7ae5d07b888e4b872e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Buildings;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const no_data_card_1 = require("@/components/ui/no-data-card");
const input_1 = require("@/components/ui/input");
const select_1 = require("@/components/ui/select");
const dialog_1 = require("@/components/ui/dialog");
const form_1 = require("@/components/ui/form");
const use_toast_1 = require("@/hooks/use-toast");
const use_language_1 = require("@/hooks/use-language");
const react_hook_form_1 = require("react-hook-form");
const zod_1 = require("@hookform/resolvers/zod");
const zod_2 = require("zod");
const queryClient_1 = require("@/lib/queryClient");
const lucide_react_1 = require("lucide-react");
const header_1 = require("@/components/layout/header");
const wouter_1 = require("wouter");
/**
 *
 * @param root0
 * @param root0.building
 * @param root0.userRole
 * @param root0.onEdit
 * @param root0.onDelete
 */
function BuildingCard({ building, userRole, onEdit, onDelete, t }) {
    const isAdmin = userRole === 'admin';
    const canEdit = ['admin', 'manager'].includes(userRole || '');
    return ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: 'h-full', children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'h-5 w-5 text-blue-600' }), (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'text-lg line-clamp-2 break-words', children: building.name })] }), canEdit && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-1', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { size: 'sm', variant: 'ghost', onClick: () => onEdit(building), children: (0, jsx_runtime_1.jsx)(lucide_react_1.Edit, { className: 'h-3 w-3' }) }), isAdmin && ((0, jsx_runtime_1.jsx)(button_1.Button, { size: 'sm', variant: 'ghost', onClick: () => onDelete(building), className: 'text-red-600 hover:text-red-700', children: (0, jsx_runtime_1.jsx)(lucide_react_1.Trash2, { className: 'h-3 w-3' }) }))] }))] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center text-sm text-gray-600', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MapPin, { className: 'h-4 w-4 mr-2' }), (0, jsx_runtime_1.jsx)("span", { className: 'line-clamp-2 break-words flex-1', children: building.address })] }), (0, jsx_runtime_1.jsx)("div", { className: 'flex items-center text-sm text-gray-600', children: (0, jsx_runtime_1.jsxs)("span", { children: [building.city, ", ", building.province, " ", building.postalCode] }) }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between pt-2', children: [(0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', children: [building.totalUnits, " ", t('unitsCount')] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', children: building.buildingType })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'pt-2 flex gap-2', children: [(0, jsx_runtime_1.jsx)(wouter_1.Link, { href: `/manager/buildings/${building.id}/documents`, children: (0, jsx_runtime_1.jsx)(button_1.Button, { size: 'sm', variant: 'outline', className: 'flex-1', children: "Documents" }) }), (0, jsx_runtime_1.jsx)(wouter_1.Link, { href: `/manager/residences?buildingId=${building.id}`, children: (0, jsx_runtime_1.jsx)(button_1.Button, { size: 'sm', variant: 'outline', className: 'flex-1', children: "Residences" }) })] })] }) })] }));
}
/**
 *
 * @param root0
 * @param root0.isOpen
 * @param root0.onOpenChange
 * @param root0.form
 * @param root0.onSubmit
 * @param root0.organizations
 * @param root0.isSubmitting
 * @param root0.title
 * @param root0.submitLabel
 */
function BuildingForm({ isOpen, onOpenChange, form, onSubmit, organizations, isSubmitting, title, submitLabel, t, }) {
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: isOpen, onOpenChange: onOpenChange, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl', children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: title }), (0, jsx_runtime_1.jsx)(dialog_1.DialogDescription, { children: t('fillBuildingInfo') })] }), (0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(onSubmit), className: 'space-y-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'name', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: 'md:col-span-2', children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('buildingName') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('enterBuildingName'), ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'address', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { className: 'md:col-span-2', children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('buildingAddress') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('enterStreetAddress'), ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'city', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('buildingCity') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('enterCity'), ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'province', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('buildingProvince') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectProvince') }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'QC', children: "Quebec" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'ON', children: "Ontario" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'BC', children: "British Columbia" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'AB', children: "Alberta" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'MB', children: "Manitoba" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'SK', children: "Saskatchewan" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NS', children: "Nova Scotia" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NB', children: "New Brunswick" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'PE', children: "Prince Edward Island" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NL', children: "Newfoundland and Labrador" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NT', children: "Northwest Territories" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'NU', children: "Nunavut" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'YT', children: "Yukon" })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'postalCode', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('buildingPostalCode') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('enterPostalCode'), ...field }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'buildingType', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('buildingType') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectBuildingType') }) }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'condo', children: t('condoType') }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'appartement', children: t('appartementType') })] })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'totalUnits', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('totalUnits') }), (0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'number', placeholder: 'Enter total units', ...field, onChange: (e) => field.onChange(parseInt(e.target.value) || 0) }) }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) }), (0, jsx_runtime_1.jsx)(form_1.FormField, { control: form.control, name: 'organizationId', render: ({ field }) => ((0, jsx_runtime_1.jsxs)(form_1.FormItem, { children: [(0, jsx_runtime_1.jsx)(form_1.FormLabel, { children: t('organizationLabel') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { onValueChange: field.onChange, value: field.value, children: [(0, jsx_runtime_1.jsx)(form_1.FormControl, { children: (0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('selectOrganization') }) }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: organizations.map((org) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: org.id, children: org.name }, org.id))) })] }), (0, jsx_runtime_1.jsx)(form_1.FormMessage, {})] })) })] }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { type: 'button', variant: 'outline', onClick: () => onOpenChange(false), children: t('cancel') }), (0, jsx_runtime_1.jsx)(button_1.Button, { type: 'submit', disabled: isSubmitting, children: isSubmitting ? t('saving') : submitLabel })] })] }) })] }) }));
}
/**
 *
 */
function Buildings() {
    const { toast } = (0, use_toast_1.useToast)();
    const queryClient = (0, react_query_1.useQueryClient)();
    const { t } = (0, use_language_1.useLanguage)();
    // Create schema with translations
    const buildingFormSchema = zod_2.z.object({
        name: zod_2.z.string().min(1, t('buildingNameRequired')).max(255, t('nameTooLong')),
        address: zod_2.z.string().min(1, t('addressRequired')).max(500, t('addressTooLong')),
        city: zod_2.z.string().min(1, t('cityRequired')).max(100, t('cityTooLong')),
        province: zod_2.z.string().min(1, t('provinceRequired')).max(100, t('provinceTooLong')),
        postalCode: zod_2.z.string().min(1, t('postalCodeRequired')).max(20, t('postalCodeTooLong')),
        buildingType: zod_2.z.enum(['condo', 'appartement']),
        totalUnits: zod_2.z
            .number()
            .int()
            .min(1, t('mustHaveAtLeastOneUnit'))
            .max(300, t('maximumUnitsAllowed')),
        organizationId: zod_2.z.string().min(1, t('organizationRequired')),
    });
    // State variables
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [isAddDialogOpen, setIsAddDialogOpen] = (0, react_1.useState)(false);
    const [isEditDialogOpen, setIsEditDialogOpen] = (0, react_1.useState)(false);
    const [editingBuilding, setEditingBuilding] = (0, react_1.useState)(null);
    const [deletingBuilding, setDeletingBuilding] = (0, react_1.useState)(null);
    // Get current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Fetch organizations for form
    const { data: organizations = [] } = (0, react_query_1.useQuery)({
        queryKey: ['/api/organizations'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/organizations');
            return await response.json();
        },
    });
    // Fetch buildings using the working manager endpoint
    const { data: buildingsData, isLoading, error: _error, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/manager/buildings'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/manager/buildings');
            return await response.json();
        },
    });
    // Extract buildings array from the wrapped response
    const buildings = buildingsData?.buildings || [];
    // Filter buildings based on search
    const filteredBuildings = (0, react_1.useMemo)(() => {
        if (!Array.isArray(buildings)) {
            return [];
        }
        return buildings.filter((building) => building.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            building.address.toLowerCase().includes(searchTerm.toLowerCase()));
    }, [buildings, searchTerm]);
    // Form for creating buildings
    const form = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(buildingFormSchema),
        defaultValues: {
            name: '',
            address: '',
            city: '',
            province: 'QC',
            postalCode: '',
            buildingType: 'condo',
            totalUnits: 1,
            organizationId: '',
        },
    });
    // Form for editing buildings
    const editForm = (0, react_hook_form_1.useForm)({
        resolver: (0, zod_1.zodResolver)(buildingFormSchema),
    });
    // Mutations
    const createBuildingMutation = (0, react_query_1.useMutation)({
        mutationFn: (data) => (0, queryClient_1.apiRequest)('POST', '/api/admin/buildings', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/manager/buildings'] });
            setIsAddDialogOpen(false);
            form.reset();
            toast({
                title: 'Success',
                description: 'Building created successfully',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to create building',
                variant: 'destructive',
            });
        },
    });
    const updateBuildingMutation = (0, react_query_1.useMutation)({
        mutationFn: ({ id, data }) => (0, queryClient_1.apiRequest)('PUT', `/api/admin/buildings/${id}`, data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/manager/buildings'] });
            setIsEditDialogOpen(false);
            setEditingBuilding(null);
            editForm.reset();
            toast({
                title: 'Success',
                description: 'Building updated successfully',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to update building',
                variant: 'destructive',
            });
        },
    });
    const deleteBuildingMutation = (0, react_query_1.useMutation)({
        mutationFn: (buildingId) => (0, queryClient_1.apiRequest)('DELETE', `/api/admin/buildings/${buildingId}`),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/manager/buildings'] });
            queryClient.invalidateQueries({ queryKey: ['/api/buildings'] });
            setDeletingBuilding(null);
            toast({
                title: 'Success',
                description: 'Building deleted successfully',
            });
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message || 'Failed to delete building',
                variant: 'destructive',
            });
        },
    });
    // Event handlers
    const handleCreateBuilding = async (data) => {
        createBuildingMutation.mutate(data);
    };
    const handleEditBuilding = (building) => {
        setEditingBuilding(building);
        editForm.reset({
            name: building.name,
            address: building.address,
            city: building.city,
            province: building.province,
            postalCode: building.postalCode,
            buildingType: building.buildingType,
            totalUnits: building.totalUnits,
            organizationId: building.organizationId,
        });
        setIsEditDialogOpen(true);
    };
    const handleUpdateBuilding = async (data) => {
        if (editingBuilding) {
            updateBuildingMutation.mutate({ id: editingBuilding.id, data });
        }
    };
    const handleDeleteBuilding = (building) => {
        setDeletingBuilding(building);
    };
    const confirmDeleteBuilding = () => {
        if (deletingBuilding) {
            deleteBuildingMutation.mutate(deletingBuilding.id);
        }
    };
    if (isLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Buildings', subtitle: 'Loading buildings...' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'text-center py-8', children: "Loading buildings..." }) })] }));
    }
    if (_error) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Buildings', subtitle: 'Error loading buildings' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsx)("div", { className: 'max-w-4xl mx-auto', children: (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-16 h-16 mx-auto text-red-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-red-600 mb-2', children: "Error Loading Buildings" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 mb-4', children: "Failed to load buildings data. Please try again later." }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'destructive', children: "Error" })] }) }) }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('buildings'), subtitle: t('manageBuildings') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-6xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex flex-col sm:flex-row gap-4 items-center justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'relative w-full sm:w-96', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4' }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('searchBuildingsAddress'), value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: 'pl-10' })] }), user?.role === 'admin' && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => setIsAddDialogOpen(true), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4 mr-2' }), t('addBuilding')] }))] }), filteredBuildings.length > 0 ? ((0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6', children: filteredBuildings.map((building) => ((0, jsx_runtime_1.jsx)(BuildingCard, { building: building, userRole: user?.role, onEdit: handleEditBuilding, onDelete: handleDeleteBuilding, t: t }, building.id))) })) : ((0, jsx_runtime_1.jsx)(no_data_card_1.NoDataCard, { icon: lucide_react_1.Building, titleKey: "noBuildingsFound", descriptionKey: user?.role === 'admin' ? 'noBuildingsAdminMessage' : 'noBuildingsUserMessage', badgeKey: "noData", testId: "no-buildings-message" })), (0, jsx_runtime_1.jsx)(BuildingForm, { isOpen: isAddDialogOpen, onOpenChange: setIsAddDialogOpen, form: form, onSubmit: handleCreateBuilding, organizations: organizations, isSubmitting: createBuildingMutation.isPending, title: t('addBuilding'), submitLabel: t('createBuilding'), t: t }), (0, jsx_runtime_1.jsx)(BuildingForm, { isOpen: isEditDialogOpen, onOpenChange: setIsEditDialogOpen, form: editForm, onSubmit: handleUpdateBuilding, organizations: organizations, isSubmitting: updateBuildingMutation.isPending, title: t('editBuilding'), submitLabel: t('save'), t: t }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: !!deletingBuilding, onOpenChange: () => setDeletingBuilding(null), children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { children: [(0, jsx_runtime_1.jsxs)(dialog_1.DialogHeader, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Delete Building" }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogDescription, { children: ["Are you sure you want to delete \"", deletingBuilding?.name, "\"? This action cannot be undone."] })] }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogFooter, { children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => setDeletingBuilding(null), children: "Cancel" }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'destructive', onClick: confirmDeleteBuilding, disabled: deleteBuildingMutation.isPending, children: deleteBuildingMutation.isPending ? 'Deleting...' : 'Delete' })] })] }) })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,