c28e7e2115d4b064185108f78129e438
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;
var _helpers = require("../helpers");
var _queryHelpers = require("../query-helpers");
var _allUtils = require("./all-utils");
const getTestIdAttribute = () => (0, _allUtils.getConfig)().testIdAttribute;
const queryAllByTestId = (...args) => {
    (0, _helpers.checkContainerType)(args[0]);
    return (0, _allUtils.queryAllByAttribute)(getTestIdAttribute(), ...args);
};
const getMultipleError = (c, id) => `Found multiple elements by: [${getTestIdAttribute()}="${id}"]`;
const getMissingError = (c, id) => `Unable to find an element by: [${getTestIdAttribute()}="${id}"]`;
const queryAllByTestIdWithSuggestions = exports.queryAllByTestId = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');
const [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError);
exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL3Rlc3QtaWQuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUMxSixJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDaEQsSUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDO0FBQzVFLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO0lBQ25DLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzNFLENBQUMsQ0FBQztBQUNGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxnQ0FBZ0Msa0JBQWtCLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQztBQUNwRyxNQUFNLGVBQWUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLGtDQUFrQyxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDO0FBQ3JHLE1BQU0sK0JBQStCLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztBQUN4SyxNQUFNLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNySyxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNwQyxPQUFPLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztBQUMxQyxPQUFPLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNsQyxPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztBQUN4QyxPQUFPLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L3F1ZXJpZXMvdGVzdC1pZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucXVlcnlCeVRlc3RJZCA9IGV4cG9ydHMucXVlcnlBbGxCeVRlc3RJZCA9IGV4cG9ydHMuZ2V0QnlUZXN0SWQgPSBleHBvcnRzLmdldEFsbEJ5VGVzdElkID0gZXhwb3J0cy5maW5kQnlUZXN0SWQgPSBleHBvcnRzLmZpbmRBbGxCeVRlc3RJZCA9IHZvaWQgMDtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfYWxsVXRpbHMgPSByZXF1aXJlKFwiLi9hbGwtdXRpbHNcIik7XG5jb25zdCBnZXRUZXN0SWRBdHRyaWJ1dGUgPSAoKSA9PiAoMCwgX2FsbFV0aWxzLmdldENvbmZpZykoKS50ZXN0SWRBdHRyaWJ1dGU7XG5jb25zdCBxdWVyeUFsbEJ5VGVzdElkID0gKC4uLmFyZ3MpID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoYXJnc1swXSk7XG4gIHJldHVybiAoMCwgX2FsbFV0aWxzLnF1ZXJ5QWxsQnlBdHRyaWJ1dGUpKGdldFRlc3RJZEF0dHJpYnV0ZSgpLCAuLi5hcmdzKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIGlkKSA9PiBgRm91bmQgbXVsdGlwbGUgZWxlbWVudHMgYnk6IFske2dldFRlc3RJZEF0dHJpYnV0ZSgpfT1cIiR7aWR9XCJdYDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCBpZCkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgYnk6IFske2dldFRlc3RJZEF0dHJpYnV0ZSgpfT1cIiR7aWR9XCJdYDtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXN0SWRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUZXN0SWQgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5VGVzdElkLCBxdWVyeUFsbEJ5VGVzdElkLm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlUZXN0SWQsIGdldEFsbEJ5VGVzdElkLCBnZXRCeVRlc3RJZCwgZmluZEFsbEJ5VGVzdElkLCBmaW5kQnlUZXN0SWRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlUZXN0SWQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVRlc3RJZCA9IGZpbmRCeVRlc3RJZDtcbmV4cG9ydHMuZmluZEFsbEJ5VGVzdElkID0gZmluZEFsbEJ5VGVzdElkO1xuZXhwb3J0cy5nZXRCeVRlc3RJZCA9IGdldEJ5VGVzdElkO1xuZXhwb3J0cy5nZXRBbGxCeVRlc3RJZCA9IGdldEFsbEJ5VGVzdElkO1xuZXhwb3J0cy5xdWVyeUJ5VGVzdElkID0gcXVlcnlCeVRlc3RJZDsiXSwidmVyc2lvbiI6M30=