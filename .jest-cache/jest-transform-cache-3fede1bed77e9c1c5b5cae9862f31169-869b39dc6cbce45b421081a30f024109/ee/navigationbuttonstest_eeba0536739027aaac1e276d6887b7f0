9cc69ab6189a90dffa09110fea269c0b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('wouter', () => ({
    useLocation: () => [mockLocation(), mockSetLocation],
    Link: ({ children, href, onClick, ...props }) => ((0, jsx_runtime_1.jsx)("a", { href: href, onClick: onClick, ...props, children: children })),
}));
// Mock asset imports - use moduleNameMapper instead
// Mock authentication context
jest.mock('../../../client/src/hooks/use-auth', () => ({
    useAuth: () => ({
        user: { id: '1', email: 'test@test.com', role: 'admin' },
        isAuthenticated: true,
        login: jest.fn(),
        logout: jest.fn(),
    }),
}));
/**
 * Navigation Button Functionality Tests
 * Tests all navigation buttons throughout the application
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_query_1 = require("@tanstack/react-query");
require("@testing-library/jest-dom");
// Mock wouter navigation
const mockLocation = jest.fn();
const mockSetLocation = jest.fn();
// Import components to test
const home_1 = __importDefault(require("../../../client/src/pages/home"));
const pricing_1 = __importDefault(require("../../../client/src/pages/pricing"));
const features_1 = __importDefault(require("../../../client/src/pages/features"));
const story_1 = __importDefault(require("../../../client/src/pages/story"));
const security_1 = __importDefault(require("../../../client/src/pages/security"));
describe('Navigation Buttons Functionality', () => {
    let queryClient;
    beforeEach(() => {
        queryClient = new react_query_1.QueryClient({
            defaultOptions: {
                queries: { retry: false },
                mutations: { retry: false },
            },
        });
        jest.clearAllMocks();
        mockLocation.mockReturnValue('/');
    });
    const renderWithProvider = (component) => {
        return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: component }));
    };
    describe('Home Page Navigation Buttons', () => {
        it('should navigate to dashboard when "Go to Dashboard" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(home_1.default, {}));
            const dashboardButton = react_2.screen.getByTestId('button-go-to-dashboard');
            expect(dashboardButton).toBeInTheDocument();
            react_2.fireEvent.click(dashboardButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/dashboard');
            });
        });
        it('should start trial when "Start Trial" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(home_1.default, {}));
            const trialButton = react_2.screen.getByTestId('button-start-trial');
            expect(trialButton).toBeInTheDocument();
            react_2.fireEvent.click(trialButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/auth/register');
            });
        });
    });
    describe('Pricing Page Navigation Buttons', () => {
        it('should navigate to login when "Get Started" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(pricing_1.default, {}));
            const getStartedButton = react_2.screen.getByTestId('nav-get-started');
            expect(getStartedButton).toBeInTheDocument();
            react_2.fireEvent.click(getStartedButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/login');
            });
        });
    });
    describe('Features Page Navigation Buttons', () => {
        it('should navigate to trial when "Try Features" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(features_1.default, {}));
            const tryFeaturesButton = react_2.screen.getByTestId('button-try-features');
            expect(tryFeaturesButton).toBeInTheDocument();
            react_2.fireEvent.click(tryFeaturesButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/auth/register');
            });
        });
        it('should navigate to trial when "Start Now" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(features_1.default, {}));
            const startNowButton = react_2.screen.getByTestId('button-start-now');
            expect(startNowButton).toBeInTheDocument();
            react_2.fireEvent.click(startNowButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/auth/register');
            });
        });
    });
    describe('Story Page Navigation Buttons', () => {
        it('should navigate to registration when "Join Story" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(story_1.default, {}));
            const joinStoryButton = react_2.screen.getByTestId('button-join-story');
            expect(joinStoryButton).toBeInTheDocument();
            react_2.fireEvent.click(joinStoryButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/auth/register');
            });
        });
    });
    describe('Security Page Navigation Buttons', () => {
        it('should navigate to registration when "Secure Start" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(security_1.default, {}));
            const secureStartButton = react_2.screen.getByTestId('button-secure-start');
            expect(secureStartButton).toBeInTheDocument();
            react_2.fireEvent.click(secureStartButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/auth/register');
            });
        });
        it('should navigate to registration when "Secure Trial" button is clicked', async () => {
            renderWithProvider((0, jsx_runtime_1.jsx)(security_1.default, {}));
            const secureTrialButton = react_2.screen.getByTestId('button-secure-trial');
            expect(secureTrialButton).toBeInTheDocument();
            react_2.fireEvent.click(secureTrialButton);
            await (0, react_2.waitFor)(() => {
                expect(mockSetLocation).toHaveBeenCalledWith('/auth/register');
            });
        });
    });
    describe('Back Navigation Buttons', () => {
        it('should navigate back when back buttons are clicked', () => {
            // These would be tested in their respective component contexts
            const backButtonSelectors = [
                'button-back',
            ];
            backButtonSelectors.forEach(selector => {
                // Mock implementation - actual tests would render the specific components
                const mockBackClick = jest.fn();
                const backButton = document.createElement('button');
                backButton.setAttribute('data-testid', selector);
                backButton.onclick = mockBackClick;
                react_2.fireEvent.click(backButton);
                expect(mockBackClick).toHaveBeenCalled();
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,