14491d57a52f0c0e6d0420ed5e5f6268
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextMonth = getNextMonth;
/**
 * Returns the next month the user can navigate to, based on the given options.
 *
 * The next month is not always the next calendar month:
 *
 * - If it is after the `calendarEndMonth`, it returns `undefined`.
 * - If paged navigation is enabled, it skips forward by the number of displayed
 *   months.
 *
 * @param firstDisplayedMonth The first month currently displayed in the
 *   calendar.
 * @param calendarEndMonth The latest month the user can navigate to.
 * @param options Navigation options, including `numberOfMonths` and
 *   `pagedNavigation`.
 * @param dateLib The date library to use for date manipulation.
 * @returns The next month, or `undefined` if navigation is not possible.
 */
function getNextMonth(firstDisplayedMonth, calendarEndMonth, options, dateLib) {
    if (options.disableNavigation) {
        return undefined;
    }
    const { pagedNavigation, numberOfMonths = 1 } = options;
    const { startOfMonth, addMonths, differenceInCalendarMonths } = dateLib;
    const offset = pagedNavigation ? numberOfMonths : 1;
    const month = startOfMonth(firstDisplayedMonth);
    if (!calendarEndMonth) {
        return addMonths(month, offset);
    }
    const monthsDiff = differenceInCalendarMonths(calendarEndMonth, firstDisplayedMonth);
    if (monthsDiff < numberOfMonths) {
        return undefined;
    }
    return addMonths(month, offset);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE5leHRNb250aC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxPQUFPLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztBQUNwQzs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILFNBQVMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxPQUFPO0lBQ3pFLElBQUksT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDNUIsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUNELE1BQU0sRUFBRSxlQUFlLEVBQUUsY0FBYyxHQUFHLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUN4RCxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSwwQkFBMEIsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUN4RSxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3BCLE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsTUFBTSxVQUFVLEdBQUcsMEJBQTBCLENBQUMsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNyRixJQUFJLFVBQVUsR0FBRyxjQUFjLEVBQUUsQ0FBQztRQUM5QixPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3BDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvcmVhY3QtZGF5LXBpY2tlci9kaXN0L2Nqcy9oZWxwZXJzL2dldE5leHRNb250aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TmV4dE1vbnRoID0gZ2V0TmV4dE1vbnRoO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZXh0IG1vbnRoIHRoZSB1c2VyIGNhbiBuYXZpZ2F0ZSB0bywgYmFzZWQgb24gdGhlIGdpdmVuIG9wdGlvbnMuXG4gKlxuICogVGhlIG5leHQgbW9udGggaXMgbm90IGFsd2F5cyB0aGUgbmV4dCBjYWxlbmRhciBtb250aDpcbiAqXG4gKiAtIElmIGl0IGlzIGFmdGVyIHRoZSBgY2FsZW5kYXJFbmRNb250aGAsIGl0IHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKiAtIElmIHBhZ2VkIG5hdmlnYXRpb24gaXMgZW5hYmxlZCwgaXQgc2tpcHMgZm9yd2FyZCBieSB0aGUgbnVtYmVyIG9mIGRpc3BsYXllZFxuICogICBtb250aHMuXG4gKlxuICogQHBhcmFtIGZpcnN0RGlzcGxheWVkTW9udGggVGhlIGZpcnN0IG1vbnRoIGN1cnJlbnRseSBkaXNwbGF5ZWQgaW4gdGhlXG4gKiAgIGNhbGVuZGFyLlxuICogQHBhcmFtIGNhbGVuZGFyRW5kTW9udGggVGhlIGxhdGVzdCBtb250aCB0aGUgdXNlciBjYW4gbmF2aWdhdGUgdG8uXG4gKiBAcGFyYW0gb3B0aW9ucyBOYXZpZ2F0aW9uIG9wdGlvbnMsIGluY2x1ZGluZyBgbnVtYmVyT2ZNb250aHNgIGFuZFxuICogICBgcGFnZWROYXZpZ2F0aW9uYC5cbiAqIEBwYXJhbSBkYXRlTGliIFRoZSBkYXRlIGxpYnJhcnkgdG8gdXNlIGZvciBkYXRlIG1hbmlwdWxhdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBuZXh0IG1vbnRoLCBvciBgdW5kZWZpbmVkYCBpZiBuYXZpZ2F0aW9uIGlzIG5vdCBwb3NzaWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TmV4dE1vbnRoKGZpcnN0RGlzcGxheWVkTW9udGgsIGNhbGVuZGFyRW5kTW9udGgsIG9wdGlvbnMsIGRhdGVMaWIpIHtcbiAgICBpZiAob3B0aW9ucy5kaXNhYmxlTmF2aWdhdGlvbikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCB7IHBhZ2VkTmF2aWdhdGlvbiwgbnVtYmVyT2ZNb250aHMgPSAxIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHsgc3RhcnRPZk1vbnRoLCBhZGRNb250aHMsIGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzIH0gPSBkYXRlTGliO1xuICAgIGNvbnN0IG9mZnNldCA9IHBhZ2VkTmF2aWdhdGlvbiA/IG51bWJlck9mTW9udGhzIDogMTtcbiAgICBjb25zdCBtb250aCA9IHN0YXJ0T2ZNb250aChmaXJzdERpc3BsYXllZE1vbnRoKTtcbiAgICBpZiAoIWNhbGVuZGFyRW5kTW9udGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZE1vbnRocyhtb250aCwgb2Zmc2V0KTtcbiAgICB9XG4gICAgY29uc3QgbW9udGhzRGlmZiA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyTW9udGhzKGNhbGVuZGFyRW5kTW9udGgsIGZpcnN0RGlzcGxheWVkTW9udGgpO1xuICAgIGlmIChtb250aHNEaWZmIDwgbnVtYmVyT2ZNb250aHMpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGFkZE1vbnRocyhtb250aCwgb2Zmc2V0KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==