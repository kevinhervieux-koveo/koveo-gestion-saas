f031d61202b78a080cf7ad1a26df5a6a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
/**
 * Comprehensive Form Submission Test Suite
 *
 * This test suite validates that ALL forms in the Koveo Gestion application
 * submit correctly with proper data handling, error management, and API integration.
 *
 * Forms tested for actual submission behavior:
 * 1. Authentication Forms (login, password reset)
 * 2. User Management Forms (invitations, profile updates)
 * 3. Property Management Forms (buildings, residences)
 * 4. Financial Forms (bills, payments)
 * 5. Document Forms (upload, categorization) - ENHANCED SECURITY
 * 6. Maintenance Forms (demands, bug reports)
 *
 * NEW SECURITY FEATURES TESTED:
 * - Rate limiting (10 files per hour per user)
 * - Enhanced file validation (MIME type checking)
 * - Path traversal protection
 * - Audit logging for all document operations
 * - File size limits (25MB max)
 * - Admin-only audit log access
 */
/// <reference path="../types/jest-dom.d.ts" />
const globals_1 = require("@jest/globals");
globals_1.jest.mock('@/lib/queryClient', () => ({
    apiRequest: mockApiRequest,
}));
globals_1.jest.mock('@/hooks/use-auth', () => ({
    useAuth: () => mockAuth,
}));
globals_1.jest.mock('@/hooks/use-toast', () => ({
    useToast: () => ({ toast: mockToast }),
}));
// Mock useLocation hook
globals_1.jest.mock('wouter', () => ({
    useLocation: () => ['/', globals_1.jest.fn()],
    Link: ({ children, href }) => ((0, jsx_runtime_1.jsx)("a", { href: href, children: children })),
}));
// Mock language hook
globals_1.jest.mock('@/hooks/use-language', () => ({
    useLanguage: () => ({
        language: 'en',
        t: (key) => key,
        changeLanguage: globals_1.jest.fn(),
    }),
}));
const react_1 = require("@testing-library/react");
require("@testing-library/jest-dom");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const react_query_1 = require("@tanstack/react-query");
const react_2 = __importDefault(require("react"));
// Test utilities
const createTestQueryClient = () => {
    return new react_query_1.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
            },
            mutations: {
                retry: false,
            },
        },
    });
};
const TestWrapper = ({ children }) => {
    const queryClient = createTestQueryClient();
    return ((0, jsx_runtime_1.jsx)(react_query_1.QueryClientProvider, { client: queryClient, children: children }));
};
// Mock API request function
const mockApiRequest = globals_1.jest.fn();
// Mock authentication hook
const mockAuth = {
    user: {
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'test@example.com',
        role: 'admin',
        organizationId: '123e4567-e89b-12d3-a456-426614174001'
    },
    login: globals_1.jest.fn(),
    logout: globals_1.jest.fn(),
};
// Mock toast hook
const mockToast = globals_1.jest.fn();
(0, globals_1.describe)('Comprehensive Form Submission Tests', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
        mockApiRequest.mockResolvedValue({ success: true });
    });
    (0, globals_1.describe)('Authentication Form Submissions', () => {
        (0, globals_1.it)('should submit login form with correct credentials', async () => {
            // Mock login component
            const LoginForm = () => {
                const [email, setEmail] = react_2.default.useState('');
                const [password, setPassword] = react_2.default.useState('');
                const [isSubmitting, setIsSubmitting] = react_2.default.useState(false);
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    setIsSubmitting(true);
                    try {
                        await mockApiRequest('POST', '/api/auth/login', { email, password });
                        mockAuth.login({ email, password });
                    }
                    finally {
                        setIsSubmitting(false);
                    }
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "login-form", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "email-input", type: "email", value: email, onChange: (e) => setEmail(e.target.value), placeholder: "Email" }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "password-input", type: "password", value: password, onChange: (e) => setPassword(e.target.value), placeholder: "Password" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "login-submit", type: "submit", disabled: isSubmitting, children: isSubmitting ? 'Logging in...' : 'Login' })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(LoginForm, {}), { wrapper: TestWrapper });
            const emailInput = react_1.screen.getByTestId('email-input');
            const passwordInput = react_1.screen.getByTestId('password-input');
            const submitButton = react_1.screen.getByTestId('login-submit');
            await user_event_1.default.type(emailInput, 'test@example.com');
            await user_event_1.default.type(passwordInput, 'validPassword123');
            await user_event_1.default.click(submitButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', '/api/auth/login', {
                    email: 'test@example.com',
                    password: 'validPassword123'
                });
            });
            (0, globals_1.expect)(mockAuth.login).toHaveBeenCalledWith({
                email: 'test@example.com',
                password: 'validPassword123'
            });
        });
        (0, globals_1.it)('should handle login form validation errors', async () => {
            mockApiRequest.mockRejectedValue(new Error('Invalid credentials'));
            const LoginForm = () => {
                const [email, setEmail] = react_2.default.useState('');
                const [password, setPassword] = react_2.default.useState('');
                const [error, setError] = react_2.default.useState('');
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    try {
                        await mockApiRequest('POST', '/api/auth/login', { email, password });
                    }
                    catch (err) {
                        setError(err.message);
                    }
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "login-form", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "email-input", type: "email", value: email, onChange: (e) => setEmail(e.target.value) }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "password-input", type: "password", value: password, onChange: (e) => setPassword(e.target.value) }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "login-submit", type: "submit", children: "Login" }), error && (0, jsx_runtime_1.jsx)("div", { "data-testid": "error-message", children: error })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(LoginForm, {}), { wrapper: TestWrapper });
            const emailInput = react_1.screen.getByTestId('email-input');
            const passwordInput = react_1.screen.getByTestId('password-input');
            const submitButton = react_1.screen.getByTestId('login-submit');
            await user_event_1.default.type(emailInput, 'wrong@example.com');
            await user_event_1.default.type(passwordInput, 'wrongpassword');
            await user_event_1.default.click(submitButton);
            await (0, react_1.waitFor)(() => {
                const errorElement = react_1.screen.getByTestId('error-message');
                (0, globals_1.expect)(errorElement.textContent).toBe('Invalid credentials');
            });
        });
    });
    (0, globals_1.describe)('Property Management Form Submissions', () => {
        (0, globals_1.it)('should submit building creation form with valid data', async () => {
            const BuildingForm = () => {
                const [formData, setFormData] = react_2.default.useState({
                    name: '',
                    organizationId: '',
                    address: '',
                    city: '',
                    province: 'QC',
                    postalCode: '',
                    buildingType: 'condo',
                    totalUnits: 0
                });
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    await mockApiRequest('POST', '/api/buildings', formData);
                    mockToast({ title: 'Building created successfully' });
                };
                const handleChange = (field, value) => {
                    setFormData(prev => ({ ...prev, [field]: value }));
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "building-form", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "building-name", value: formData.name, onChange: (e) => handleChange('name', e.target.value), placeholder: "Building Name" }), (0, jsx_runtime_1.jsxs)("select", { "data-testid": "organization-select", value: formData.organizationId, onChange: (e) => handleChange('organizationId', e.target.value), children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "Select Organization" }), (0, jsx_runtime_1.jsx)("option", { value: "123e4567-e89b-12d3-a456-426614174001", children: "Test Org" })] }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "building-address", value: formData.address, onChange: (e) => handleChange('address', e.target.value), placeholder: "Address" }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "building-city", value: formData.city, onChange: (e) => handleChange('city', e.target.value), placeholder: "City" }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "building-postalcode", value: formData.postalCode, onChange: (e) => handleChange('postalCode', e.target.value), placeholder: "Postal Code" }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "building-units", type: "number", value: formData.totalUnits, onChange: (e) => handleChange('totalUnits', parseInt(e.target.value) || 0), placeholder: "Total Units" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "building-submit", type: "submit", children: "Create Building" })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(BuildingForm, {}), { wrapper: TestWrapper });
            // Fill out the form
            await user_event_1.default.type(react_1.screen.getByTestId('building-name'), 'Sunset Towers');
            await user_event_1.default.selectOptions(react_1.screen.getByTestId('organization-select'), '123e4567-e89b-12d3-a456-426614174001');
            await user_event_1.default.type(react_1.screen.getByTestId('building-address'), '456 Main Street');
            await user_event_1.default.type(react_1.screen.getByTestId('building-city'), 'Montreal');
            await user_event_1.default.type(react_1.screen.getByTestId('building-postalcode'), 'H3A 1B1');
            await user_event_1.default.clear(react_1.screen.getByTestId('building-units'));
            await user_event_1.default.type(react_1.screen.getByTestId('building-units'), '50');
            await user_event_1.default.click(react_1.screen.getByTestId('building-submit'));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', '/api/buildings', {
                    name: 'Sunset Towers',
                    organizationId: '123e4567-e89b-12d3-a456-426614174001',
                    address: '456 Main Street',
                    city: 'Montreal',
                    province: 'QC',
                    postalCode: 'H3A 1B1',
                    buildingType: 'condo',
                    totalUnits: 50
                });
            });
            (0, globals_1.expect)(mockToast).toHaveBeenCalledWith({ title: 'Building created successfully' });
        });
    });
    (0, globals_1.describe)('Financial Form Submissions', () => {
        (0, globals_1.it)('should submit bill creation form with proper amount validation', async () => {
            const BillForm = () => {
                const [formData, setFormData] = react_2.default.useState({
                    title: '',
                    category: 'utilities',
                    paymentType: 'unique',
                    totalAmount: '',
                    startDate: '',
                    status: 'draft'
                });
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    // Validate amount
                    const amount = parseFloat(formData.totalAmount);
                    if (isNaN(amount) || amount <= 0) {
                        mockToast({ title: 'Invalid amount', variant: 'destructive' });
                        return;
                    }
                    await mockApiRequest('POST', '/api/bills', formData);
                    mockToast({ title: 'Bill created successfully' });
                };
                const handleChange = (field, value) => {
                    setFormData(prev => ({ ...prev, [field]: value }));
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "bill-form", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "bill-title", value: formData.title, onChange: (e) => handleChange('title', e.target.value), placeholder: "Bill Title" }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "bill-amount", value: formData.totalAmount, onChange: (e) => handleChange('totalAmount', e.target.value), placeholder: "Amount" }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "bill-date", type: "date", value: formData.startDate, onChange: (e) => handleChange('startDate', e.target.value) }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "bill-submit", type: "submit", children: "Create Bill" })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(BillForm, {}), { wrapper: TestWrapper });
            // Test valid submission
            await user_event_1.default.type(react_1.screen.getByTestId('bill-title'), 'Monthly Electricity');
            await user_event_1.default.type(react_1.screen.getByTestId('bill-amount'), '150.75');
            await user_event_1.default.type(react_1.screen.getByTestId('bill-date'), '2025-01-01');
            await user_event_1.default.click(react_1.screen.getByTestId('bill-submit'));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', '/api/bills', {
                    title: 'Monthly Electricity',
                    category: 'utilities',
                    paymentType: 'unique',
                    totalAmount: '150.75',
                    startDate: '2025-01-01',
                    status: 'draft'
                });
            });
            (0, globals_1.expect)(mockToast).toHaveBeenCalledWith({ title: 'Bill created successfully' });
        });
        (0, globals_1.it)('should handle invalid bill amount submission', async () => {
            const BillForm = () => {
                const [formData, setFormData] = react_2.default.useState({
                    title: 'Test Bill',
                    totalAmount: ''
                });
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    const amount = parseFloat(formData.totalAmount);
                    if (isNaN(amount) || amount <= 0) {
                        mockToast({ title: 'Invalid amount', variant: 'destructive' });
                        return;
                    }
                    await mockApiRequest('POST', '/api/bills', formData);
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "bill-form", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "bill-amount", value: formData.totalAmount, onChange: (e) => setFormData(prev => ({ ...prev, totalAmount: e.target.value })), placeholder: "Amount" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "bill-submit", type: "submit", children: "Create Bill" })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(BillForm, {}), { wrapper: TestWrapper });
            // Test invalid amount
            await user_event_1.default.type(react_1.screen.getByTestId('bill-amount'), '-50');
            await user_event_1.default.click(react_1.screen.getByTestId('bill-submit'));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockToast).toHaveBeenCalledWith({
                    title: 'Invalid amount',
                    variant: 'destructive'
                });
            });
            (0, globals_1.expect)(mockApiRequest).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Maintenance Form Submissions', () => {
        (0, globals_1.it)('should submit demand creation form with UUID handling', async () => {
            const DemandForm = () => {
                const [formData, setFormData] = react_2.default.useState({
                    type: 'maintenance',
                    description: '',
                    buildingId: '',
                    residenceId: ''
                });
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    // Convert empty strings to undefined for optional UUID fields
                    const submissionData = {
                        ...formData,
                        buildingId: formData.buildingId || undefined,
                        residenceId: formData.residenceId || undefined
                    };
                    await mockApiRequest('POST', '/api/demands', submissionData);
                    mockToast({ title: 'Demand created successfully' });
                };
                const handleChange = (field, value) => {
                    setFormData(prev => ({ ...prev, [field]: value }));
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "demand-form", children: [(0, jsx_runtime_1.jsxs)("select", { "data-testid": "demand-type", value: formData.type, onChange: (e) => handleChange('type', e.target.value), children: [(0, jsx_runtime_1.jsx)("option", { value: "maintenance", children: "Maintenance" }), (0, jsx_runtime_1.jsx)("option", { value: "complaint", children: "Complaint" }), (0, jsx_runtime_1.jsx)("option", { value: "information", children: "Information" }), (0, jsx_runtime_1.jsx)("option", { value: "other", children: "Other" })] }), (0, jsx_runtime_1.jsx)("textarea", { "data-testid": "demand-description", value: formData.description, onChange: (e) => handleChange('description', e.target.value), placeholder: "Description" }), (0, jsx_runtime_1.jsxs)("select", { "data-testid": "demand-building", value: formData.buildingId, onChange: (e) => handleChange('buildingId', e.target.value), children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "Select Building (Optional)" }), (0, jsx_runtime_1.jsx)("option", { value: "123e4567-e89b-12d3-a456-426614174000", children: "Building A" })] }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "demand-submit", type: "submit", children: "Submit Demand" })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(DemandForm, {}), { wrapper: TestWrapper });
            // Fill out form with optional building ID
            await user_event_1.default.selectOptions(react_1.screen.getByTestId('demand-type'), 'maintenance');
            await user_event_1.default.type(react_1.screen.getByTestId('demand-description'), 'The heating system needs repair urgently.');
            await user_event_1.default.selectOptions(react_1.screen.getByTestId('demand-building'), '123e4567-e89b-12d3-a456-426614174000');
            await user_event_1.default.click(react_1.screen.getByTestId('demand-submit'));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', '/api/demands', {
                    type: 'maintenance',
                    description: 'The heating system needs repair urgently.',
                    buildingId: '123e4567-e89b-12d3-a456-426614174000',
                    residenceId: undefined
                });
            });
            (0, globals_1.expect)(mockToast).toHaveBeenCalledWith({ title: 'Demand created successfully' });
        });
        (0, globals_1.it)('should submit demand without optional UUID fields', async () => {
            const DemandForm = () => {
                const [formData, setFormData] = react_2.default.useState({
                    type: 'information',
                    description: 'General inquiry about building policies.'
                });
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    await mockApiRequest('POST', '/api/demands', formData);
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "demand-form", children: [(0, jsx_runtime_1.jsx)("textarea", { "data-testid": "demand-description", value: formData.description, readOnly: true }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "demand-submit", type: "submit", children: "Submit" })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(DemandForm, {}), { wrapper: TestWrapper });
            await user_event_1.default.click(react_1.screen.getByTestId('demand-submit'));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', '/api/demands', {
                    type: 'information',
                    description: 'General inquiry about building policies.'
                });
            });
        });
    });
    (0, globals_1.describe)('Document Management Form Submissions', () => {
        (0, globals_1.it)('should submit document upload form with file handling', async () => {
            const DocumentForm = () => {
                const [formData, setFormData] = react_2.default.useState({
                    name: '',
                    type: 'financial',
                    dateReference: '',
                    isVisibleToTenants: true
                });
                const [file, setFile] = react_2.default.useState(null);
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    if (!file) {
                        mockToast({ title: 'Please select a file', variant: 'destructive' });
                        return;
                    }
                    const formDataWithFile = new FormData();
                    Object.entries(formData).forEach(([key, value]) => {
                        formDataWithFile.append(key, value.toString());
                    });
                    formDataWithFile.append('file', file);
                    await mockApiRequest('POST', '/api/documents', formDataWithFile);
                    mockToast({ title: 'Document uploaded successfully' });
                };
                const handleFileChange = (e) => {
                    const selectedFile = e.target.files?.[0] || null;
                    setFile(selectedFile);
                };
                const handleChange = (field, value) => {
                    setFormData(prev => ({ ...prev, [field]: value }));
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "document-form", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "document-name", value: formData.name, onChange: (e) => handleChange('name', e.target.value), placeholder: "Document Name" }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "document-date", type: "date", value: formData.dateReference, onChange: (e) => handleChange('dateReference', e.target.value) }), (0, jsx_runtime_1.jsx)("input", { "data-testid": "document-file", type: "file", onChange: handleFileChange, accept: ".pdf,.doc,.docx,.jpg,.png" }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "document-submit", type: "submit", children: "Upload Document" })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(DocumentForm, {}), { wrapper: TestWrapper });
            const file = new File(['dummy content'], 'test-document.pdf', { type: 'application/pdf' });
            await user_event_1.default.type(react_1.screen.getByTestId('document-name'), 'Annual Financial Report');
            await user_event_1.default.type(react_1.screen.getByTestId('document-date'), '2024-12-31');
            await user_event_1.default.upload(react_1.screen.getByTestId('document-file'), file);
            await user_event_1.default.click(react_1.screen.getByTestId('document-submit'));
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(mockApiRequest).toHaveBeenCalledWith('POST', '/api/documents', globals_1.expect.any(FormData));
            });
            (0, globals_1.expect)(mockToast).toHaveBeenCalledWith({ title: 'Document uploaded successfully' });
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.it)('should handle network errors gracefully', async () => {
            mockApiRequest.mockRejectedValue(new Error('Network error'));
            const TestForm = () => {
                const [error, setError] = react_2.default.useState('');
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    try {
                        await mockApiRequest('POST', '/api/test', { data: 'test' });
                    }
                    catch (err) {
                        setError(err.message);
                    }
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "test-form", children: [(0, jsx_runtime_1.jsx)("button", { "data-testid": "submit-button", type: "submit", children: "Submit" }), error && (0, jsx_runtime_1.jsx)("div", { "data-testid": "error-display", children: error })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestForm, {}), { wrapper: TestWrapper });
            await user_event_1.default.click(react_1.screen.getByTestId('submit-button'));
            await (0, react_1.waitFor)(() => {
                const errorElement = react_1.screen.getByTestId('error-display');
                (0, globals_1.expect)(errorElement.textContent).toBe('Network error');
            });
        });
        (0, globals_1.it)('should prevent multiple submissions', async () => {
            let submitCount = 0;
            mockApiRequest.mockImplementation(() => {
                submitCount++;
                return new Promise(resolve => setTimeout(resolve, 100));
            });
            const TestForm = () => {
                const [isSubmitting, setIsSubmitting] = react_2.default.useState(false);
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    if (isSubmitting)
                        return;
                    setIsSubmitting(true);
                    try {
                        await mockApiRequest('POST', '/api/test', { data: 'test' });
                    }
                    finally {
                        setIsSubmitting(false);
                    }
                };
                return ((0, jsx_runtime_1.jsx)("form", { onSubmit: handleSubmit, "data-testid": "test-form", children: (0, jsx_runtime_1.jsx)("button", { "data-testid": "submit-button", type: "submit", disabled: isSubmitting, children: isSubmitting ? 'Submitting...' : 'Submit' }) }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestForm, {}), { wrapper: TestWrapper });
            const submitButton = react_1.screen.getByTestId('submit-button');
            // Click multiple times rapidly
            await user_event_1.default.click(submitButton);
            await user_event_1.default.click(submitButton);
            await user_event_1.default.click(submitButton);
            await (0, react_1.waitFor)(() => {
                (0, globals_1.expect)(submitCount).toBe(1);
            });
        });
        (0, globals_1.it)('should handle form reset after successful submission', async () => {
            const TestForm = () => {
                const [value, setValue] = react_2.default.useState('');
                const [submitted, setSubmitted] = react_2.default.useState(false);
                const handleSubmit = async (e) => {
                    e.preventDefault();
                    await mockApiRequest('POST', '/api/test', { value });
                    setValue(''); // Reset form
                    setSubmitted(true);
                };
                return ((0, jsx_runtime_1.jsxs)("form", { onSubmit: handleSubmit, "data-testid": "test-form", children: [(0, jsx_runtime_1.jsx)("input", { "data-testid": "test-input", value: value, onChange: (e) => setValue(e.target.value) }), (0, jsx_runtime_1.jsx)("button", { "data-testid": "submit-button", type: "submit", children: "Submit" }), submitted && (0, jsx_runtime_1.jsx)("div", { "data-testid": "success-message", children: "Form submitted!" })] }));
            };
            (0, react_1.render)((0, jsx_runtime_1.jsx)(TestForm, {}), { wrapper: TestWrapper });
            const input = react_1.screen.getByTestId('test-input');
            const submitButton = react_1.screen.getByTestId('submit-button');
            await user_event_1.default.type(input, 'test value');
            (0, globals_1.expect)(input.value).toBe('test value');
            await user_event_1.default.click(submitButton);
            await (0, react_1.waitFor)(() => {
                const successElement = react_1.screen.getByTestId('success-message');
                (0, globals_1.expect)(successElement).toBeTruthy();
                (0, globals_1.expect)(input.value).toBe(''); // Form should be reset
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,