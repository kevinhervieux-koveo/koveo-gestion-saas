da8331d6db2e8f793c5d9a0a7ae0d2d6
"use strict";
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.logDOM = void 0;
exports.prettyDOM = prettyDOM;
exports.prettyFormat = void 0;
var prettyFormat = _interopRequireWildcard(require("pretty-format"));
exports.prettyFormat = prettyFormat;
var _DOMElementFilter = _interopRequireDefault(require("./DOMElementFilter"));
var _getUserCodeFrame = require("./get-user-code-frame");
var _helpers = require("./helpers");
var _config = require("./config");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap)
    var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule)
    return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e)
    return f; if (o = t ? n : r) {
    if (o.has(e))
        return o.get(e);
    o.set(e, f);
} for (const t in e)
    "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
const shouldHighlight = () => {
    if (typeof process === 'undefined') {
        // Don't colorize in non-node environments (e.g. Browsers)
        return false;
    }
    let colors;
    // Try to safely parse env COLORS: We will default behavior if any step fails.
    try {
        const colorsJSON = process.env?.COLORS;
        if (colorsJSON) {
            colors = JSON.parse(colorsJSON);
        }
    }
    catch {
        // If this throws, process.env?.COLORS wasn't parsable. Since we only
        // care about `true` or `false`, we can safely ignore the error.
    }
    if (typeof colors === 'boolean') {
        // If `colors` is set explicitly (both `true` and `false`), use that value.
        return colors;
    }
    else {
        // If `colors` is not set, colorize if we're in node.
        return process.versions !== undefined && process.versions.node !== undefined;
    }
};
const { DOMCollection } = prettyFormat.plugins;
// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants
const ELEMENT_NODE = 1;
const COMMENT_NODE = 8;
// https://github.com/facebook/jest/blob/615084195ae1ae61ddd56162c62bbdda17587569/packages/pretty-format/src/plugins/DOMElement.ts#L50
function filterCommentsAndDefaultIgnoreTagsTags(value) {
    return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches((0, _config.getConfig)().defaultIgnore));
}
function prettyDOM(dom, maxLength, options = {}) {
    if (!dom) {
        dom = (0, _helpers.getDocument)().body;
    }
    if (typeof maxLength !== 'number') {
        maxLength = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.DEBUG_PRINT_LIMIT || 7000;
    }
    if (maxLength === 0) {
        return '';
    }
    if (dom.documentElement) {
        dom = dom.documentElement;
    }
    let domTypeName = typeof dom;
    if (domTypeName === 'object') {
        domTypeName = dom.constructor.name;
    }
    else {
        // To don't fall with `in` operator
        dom = {};
    }
    if (!('outerHTML' in dom)) {
        throw new TypeError(`Expected an element or document but got ${domTypeName}`);
    }
    const { filterNode = filterCommentsAndDefaultIgnoreTagsTags, ...prettyFormatOptions } = options;
    const debugContent = prettyFormat.format(dom, {
        plugins: [(0, _DOMElementFilter.default)(filterNode), DOMCollection],
        printFunctionName: false,
        highlight: shouldHighlight(),
        ...prettyFormatOptions
    });
    return maxLength !== undefined && dom.outerHTML.length > maxLength ? `${debugContent.slice(0, maxLength)}...` : debugContent;
}
const logDOM = (...args) => {
    const userCodeFrame = (0, _getUserCodeFrame.getUserCodeFrame)();
    if (userCodeFrame) {
        console.log(`${prettyDOM(...args)}\n\n${userCodeFrame}`);
    }
    else {
        console.log(prettyDOM(...args));
    }
};
exports.logDOM = logDOM;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9wcmV0dHktZG9tLmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLElBQUksc0JBQXNCLEdBQUcsT0FBTyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7QUFDckYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0lBQzNDLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQyxDQUFDO0FBQ0gsT0FBTyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN4QixPQUFPLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUM5QixPQUFPLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDO0FBQzlCLElBQUksWUFBWSxHQUFHLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBQ3BDLElBQUksaUJBQWlCLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztBQUM5RSxJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3pELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNwQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEMsU0FBUyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksVUFBVSxJQUFJLE9BQU8sT0FBTztJQUFFLElBQUksQ0FBQyxHQUFHLElBQUksT0FBTyxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVO0lBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksUUFBUSxJQUFJLE9BQU8sQ0FBQyxJQUFJLFVBQVUsSUFBSSxPQUFPLENBQUM7SUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFBRSxTQUFTLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0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LE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDNUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsYUFBYSxDQUFDO1FBQ3BFLGlCQUFpQixFQUFFLEtBQUs7UUFDeEIsU0FBUyxFQUFFLGVBQWUsRUFBRTtRQUM1QixHQUFHLG1CQUFtQjtLQUN2QixDQUFDLENBQUM7SUFDSCxPQUFPLFNBQVMsS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztBQUMvSCxDQUFDO0FBQ0QsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO0lBQ3pCLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztJQUNoRSxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNELENBQUM7U0FBTSxDQUFDO1FBQ04sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRixPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L2RvbS9kaXN0L3ByZXR0eS1kb20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMubG9nRE9NID0gdm9pZCAwO1xuZXhwb3J0cy5wcmV0dHlET00gPSBwcmV0dHlET007XG5leHBvcnRzLnByZXR0eUZvcm1hdCA9IHZvaWQgMDtcbnZhciBwcmV0dHlGb3JtYXQgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicHJldHR5LWZvcm1hdFwiKSk7XG5leHBvcnRzLnByZXR0eUZvcm1hdCA9IHByZXR0eUZvcm1hdDtcbnZhciBfRE9NRWxlbWVudEZpbHRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRE9NRWxlbWVudEZpbHRlclwiKSk7XG52YXIgX2dldFVzZXJDb2RlRnJhbWUgPSByZXF1aXJlKFwiLi9nZXQtdXNlci1jb2RlLWZyYW1lXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcbnZhciBfY29uZmlnID0gcmVxdWlyZShcIi4vY29uZmlnXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgdCkgeyBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBXZWFrTWFwKSB2YXIgciA9IG5ldyBXZWFrTWFwKCksIG4gPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gZnVuY3Rpb24gKGUsIHQpIHsgaWYgKCF0ICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgdmFyIG8sIGksIGYgPSB7IF9fcHJvdG9fXzogbnVsbCwgZGVmYXVsdDogZSB9OyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIGY7IGlmIChvID0gdCA/IG4gOiByKSB7IGlmIChvLmhhcyhlKSkgcmV0dXJuIG8uZ2V0KGUpOyBvLnNldChlLCBmKTsgfSBmb3IgKGNvbnN0IHQgaW4gZSkgXCJkZWZhdWx0XCIgIT09IHQgJiYge30uaGFzT3duUHJvcGVydHkuY2FsbChlLCB0KSAmJiAoKGkgPSAobyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB0KSkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IG8oZiwgdCwgaSkgOiBmW3RdID0gZVt0XSk7IHJldHVybiBmOyB9KShlLCB0KTsgfVxuY29uc3Qgc2hvdWxkSGlnaGxpZ2h0ID0gKCkgPT4ge1xuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRG9uJ3QgY29sb3JpemUgaW4gbm9uLW5vZGUgZW52aXJvbm1lbnRzIChlLmcuIEJyb3dzZXJzKVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsZXQgY29sb3JzO1xuICAvLyBUcnkgdG8gc2FmZWx5IHBhcnNlIGVudiBDT0xPUlM6IFdlIHdpbGwgZGVmYXVsdCBiZWhhdmlvciBpZiBhbnkgc3RlcCBmYWlscy5cbiAgdHJ5IHtcbiAgICBjb25zdCBjb2xvcnNKU09OID0gcHJvY2Vzcy5lbnY/LkNPTE9SUztcbiAgICBpZiAoY29sb3JzSlNPTikge1xuICAgICAgY29sb3JzID0gSlNPTi5wYXJzZShjb2xvcnNKU09OKTtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIC8vIElmIHRoaXMgdGhyb3dzLCBwcm9jZXNzLmVudj8uQ09MT1JTIHdhc24ndCBwYXJzYWJsZS4gU2luY2Ugd2Ugb25seVxuICAgIC8vIGNhcmUgYWJvdXQgYHRydWVgIG9yIGBmYWxzZWAsIHdlIGNhbiBzYWZlbHkgaWdub3JlIHRoZSBlcnJvci5cbiAgfVxuICBpZiAodHlwZW9mIGNvbG9ycyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgLy8gSWYgYGNvbG9yc2AgaXMgc2V0IGV4cGxpY2l0bHkgKGJvdGggYHRydWVgIGFuZCBgZmFsc2VgKSwgdXNlIHRoYXQgdmFsdWUuXG4gICAgcmV0dXJuIGNvbG9ycztcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBgY29sb3JzYCBpcyBub3Qgc2V0LCBjb2xvcml6ZSBpZiB3ZSdyZSBpbiBub2RlLlxuICAgIHJldHVybiBwcm9jZXNzLnZlcnNpb25zICE9PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSB1bmRlZmluZWQ7XG4gIH1cbn07XG5jb25zdCB7XG4gIERPTUNvbGxlY3Rpb25cbn0gPSBwcmV0dHlGb3JtYXQucGx1Z2lucztcblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvbm9kZVR5cGUjbm9kZV90eXBlX2NvbnN0YW50c1xuY29uc3QgRUxFTUVOVF9OT0RFID0gMTtcbmNvbnN0IENPTU1FTlRfTk9ERSA9IDg7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9qZXN0L2Jsb2IvNjE1MDg0MTk1YWUxYWU2MWRkZDU2MTYyYzYyYmJkZGExNzU4NzU2OS9wYWNrYWdlcy9wcmV0dHktZm9ybWF0L3NyYy9wbHVnaW5zL0RPTUVsZW1lbnQudHMjTDUwXG5mdW5jdGlvbiBmaWx0ZXJDb21tZW50c0FuZERlZmF1bHRJZ25vcmVUYWdzVGFncyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgIT09IENPTU1FTlRfTk9ERSAmJiAodmFsdWUubm9kZVR5cGUgIT09IEVMRU1FTlRfTk9ERSB8fCAhdmFsdWUubWF0Y2hlcygoMCwgX2NvbmZpZy5nZXRDb25maWcpKCkuZGVmYXVsdElnbm9yZSkpO1xufVxuZnVuY3Rpb24gcHJldHR5RE9NKGRvbSwgbWF4TGVuZ3RoLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKCFkb20pIHtcbiAgICBkb20gPSAoMCwgX2hlbHBlcnMuZ2V0RG9jdW1lbnQpKCkuYm9keTtcbiAgfVxuICBpZiAodHlwZW9mIG1heExlbmd0aCAhPT0gJ251bWJlcicpIHtcbiAgICBtYXhMZW5ndGggPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MuZW52ICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5ERUJVR19QUklOVF9MSU1JVCB8fCA3MDAwO1xuICB9XG4gIGlmIChtYXhMZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgaWYgKGRvbS5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICBkb20gPSBkb20uZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIGxldCBkb21UeXBlTmFtZSA9IHR5cGVvZiBkb207XG4gIGlmIChkb21UeXBlTmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICBkb21UeXBlTmFtZSA9IGRvbS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGRvbid0IGZhbGwgd2l0aCBgaW5gIG9wZXJhdG9yXG4gICAgZG9tID0ge307XG4gIH1cbiAgaWYgKCEoJ291dGVySFRNTCcgaW4gZG9tKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgYnV0IGdvdCAke2RvbVR5cGVOYW1lfWApO1xuICB9XG4gIGNvbnN0IHtcbiAgICBmaWx0ZXJOb2RlID0gZmlsdGVyQ29tbWVudHNBbmREZWZhdWx0SWdub3JlVGFnc1RhZ3MsXG4gICAgLi4ucHJldHR5Rm9ybWF0T3B0aW9uc1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgZGVidWdDb250ZW50ID0gcHJldHR5Rm9ybWF0LmZvcm1hdChkb20sIHtcbiAgICBwbHVnaW5zOiBbKDAsIF9ET01FbGVtZW50RmlsdGVyLmRlZmF1bHQpKGZpbHRlck5vZGUpLCBET01Db2xsZWN0aW9uXSxcbiAgICBwcmludEZ1bmN0aW9uTmFtZTogZmFsc2UsXG4gICAgaGlnaGxpZ2h0OiBzaG91bGRIaWdobGlnaHQoKSxcbiAgICAuLi5wcmV0dHlGb3JtYXRPcHRpb25zXG4gIH0pO1xuICByZXR1cm4gbWF4TGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgZG9tLm91dGVySFRNTC5sZW5ndGggPiBtYXhMZW5ndGggPyBgJHtkZWJ1Z0NvbnRlbnQuc2xpY2UoMCwgbWF4TGVuZ3RoKX0uLi5gIDogZGVidWdDb250ZW50O1xufVxuY29uc3QgbG9nRE9NID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgdXNlckNvZGVGcmFtZSA9ICgwLCBfZ2V0VXNlckNvZGVGcmFtZS5nZXRVc2VyQ29kZUZyYW1lKSgpO1xuICBpZiAodXNlckNvZGVGcmFtZSkge1xuICAgIGNvbnNvbGUubG9nKGAke3ByZXR0eURPTSguLi5hcmdzKX1cXG5cXG4ke3VzZXJDb2RlRnJhbWV9YCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2cocHJldHR5RE9NKC4uLmFyZ3MpKTtcbiAgfVxufTtcbmV4cG9ydHMubG9nRE9NID0gbG9nRE9NOyJdLCJ2ZXJzaW9uIjozfQ==