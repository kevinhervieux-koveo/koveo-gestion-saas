{"version":3,"names":["exports","RegistrationWizard","react_1","cov_rx0sot7go","s","__importStar","require","card_1","button_1","progress_1","badge_1","lucide_react_1","use_language_1","steps","initialSteps","initialData","b","onComplete","onCancel","title","className","f","t","_t","useLanguage","currentStepIndex","setCurrentStepIndex","useState","setSteps","wizardData","setWizardData","isSubmitting","setIsSubmitting","currentStep","isFirstStep","isLastStep","length","completedSteps","filter","step","isComplete","progress","updateStepValidation","stepId","isValid","prevSteps","map","id","updateStepCompletion","handleDataChange","useCallback","stepData","prevData","handleValidationChange","handleNext","prev","handleComplete","handlePrevious","completeData","error","jumpToStep","stepIndex","canJump","slice","every","jsx_runtime_1","jsx","children","jsxs","Card","CardHeader","CardTitle","Progress","value","Math","round","CardContent","_index","onClick","disabled","CheckCircle","description","Badge","variant","component","_data","onDataChange","onValidationChange","onNext","onPrevious","isActive","Button","ArrowLeft","Fragment","ArrowRight"],"sources":["/home/runner/workspace/client/src/components/auth/registration-wizard.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { CheckCircle, ArrowLeft, ArrowRight } from 'lucide-react';\nimport { useLanguage } from '@/hooks/use-language';\n\n/**\n * Represents a single step in the registration wizard process.\n * Contains metadata and validation state for each step.\n */\nexport interface WizardStep {\n  id: string;\n  title: string;\n  description: string;\n  component: React.ComponentType<WizardStepProps>;\n  isComplete: boolean;\n  isValid: boolean;\n  canSkip?: boolean;\n}\n\n/**\n * Props passed to each wizard step component.\n * Provides data handling and navigation callbacks.\n */\nexport interface WizardStepProps {\n  _data: Record<string, unknown>;\n  onDataChange: (_data: Record<string, unknown>) => void;\n  onValidationChange: (_isValid: boolean) => void;\n  onNext: () => void;\n  onPrevious: () => void;\n  isActive: boolean;\n}\n\n/**\n * Props for the main RegistrationWizard component.\n * Configures the wizard steps and completion handlers.\n */\ninterface RegistrationWizardProps {\n  steps: WizardStep[];\n  initialData?: Record<string, unknown>;\n  onComplete: (_data: Record<string, unknown>) => void;\n  onCancel: () => void;\n  title?: string;\n  className?: string;\n}\n\n/**\n * Multi-Step Registration Wizard Component.\n *\n * Provides a guided registration flow with step validation,\n * progress tracking, and Quebec compliance features.\n * @param root0 - Component props object.\n * @param root0.steps - Array of wizard steps to render.\n * @param root0.initialData - Initial data for the wizard.\n * @param root0.onComplete - Function called when wizard is completed.\n * @param root0.onCancel - Function called when wizard is cancelled.\n * @param root0.title - Optional title for the wizard.\n * @param root0.className - Optional CSS class name.\n * @returns JSX element for the registration wizard.\n */\nexport function RegistrationWizard({\n  steps: initialSteps,\n  initialData = {},\n  onComplete,\n  onCancel,\n  title = 'Inscription',\n  className = '',\n}: RegistrationWizardProps) {\n  const { t: _t } = useLanguage();\n  const [currentStepIndex, setCurrentStepIndex] = useState(0);\n  const [steps, setSteps] = useState<WizardStep[]>(initialSteps);\n  const [wizardData, setWizardData] = useState(initialData);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const currentStep = steps[currentStepIndex];\n  const isFirstStep = currentStepIndex === 0;\n  const isLastStep = currentStepIndex === steps.length - 1;\n  const completedSteps = steps.filter((step) => step.isComplete).length;\n  const progress = (completedSteps / steps.length) * 100;\n\n  // Update step validation status\n  const updateStepValidation = (stepId: string, isValid: boolean) => {\n    setSteps((prevSteps) =>\n      prevSteps.map((step) => (step.id === stepId ? { ...step, isValid } : step))\n    );\n  };\n\n  // Update step completion status\n  const updateStepCompletion = (stepId: string, isComplete: boolean) => {\n    setSteps((prevSteps) =>\n      prevSteps.map((step) => (step.id === stepId ? { ...step, isComplete } : step))\n    );\n  };\n\n  // Handle data changes from step components - memoized to prevent infinite loops\n  const handleDataChange = useCallback((stepData: Record<string, unknown>) => {\n    setWizardData((prevData: Record<string, unknown>) => ({\n      ...prevData,\n      [currentStep.id]: stepData,\n    }));\n  }, [currentStep.id]);\n\n  // Handle validation changes from step components - memoized to prevent infinite loops\n  const handleValidationChange = useCallback((isValid: boolean) => {\n    setSteps((prevSteps) =>\n      prevSteps.map((step) => (step.id === currentStep.id ? { ...step, isValid } : step))\n    );\n    // Auto-complete step if valid and has required data\n    if (isValid) {\n      setSteps((prevSteps) =>\n        prevSteps.map((step) => (step.id === currentStep.id ? { ...step, isComplete: true } : step))\n      );\n    }\n  }, [currentStep.id]);\n\n  // Navigate to next step\n  const handleNext = () => {\n    if (currentStep.isValid && !isLastStep) {\n      updateStepCompletion(currentStep.id, true);\n      setCurrentStepIndex((prev) => prev + 1);\n    } else if (isLastStep && currentStep.isValid) {\n      handleComplete();\n    }\n  };\n\n  // Navigate to previous step\n  const handlePrevious = () => {\n    if (!isFirstStep) {\n      setCurrentStepIndex((prev) => prev - 1);\n    }\n  };\n\n  // Complete the wizard\n  const handleComplete = async () => {\n    setIsSubmitting(true);\n    try {\n      // Combine all wizard data\n      const completeData = {\n        ...wizardData,\n        [currentStep.id]: wizardData[currentStep.id] || {},\n      };\n\n      await onComplete(completeData);\n\n      // Only mark final step as complete after successful submission\n      updateStepCompletion(currentStep.id, true);\n    } catch (error) {\n      // Wizard completion error\n      // Reset step completion on error to allow retry\n      updateStepCompletion(currentStep.id, false);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Jump to specific step (only if previous steps are complete)\n  const jumpToStep = (stepIndex: number) => {\n    // Can only go to completed steps or the next uncompleted step\n    const canJump =\n      stepIndex <= currentStepIndex || steps.slice(0, stepIndex).every((step) => step.isComplete);\n\n    if (canJump) {\n      setCurrentStepIndex(stepIndex);\n    }\n  };\n\n  return (\n    <div className={`max-w-4xl mx-auto p-6 ${className}`}>\n      <Card className='shadow-xl border-0'>\n        <CardHeader className='text-center pb-6'>\n          <CardTitle className='text-2xl font-bold text-gray-900'>{title}</CardTitle>\n          <div className='mt-4'>\n            <Progress value={progress} className='h-2' />\n            <p className='text-sm text-gray-600 mt-2'>\n              Étape {currentStepIndex + 1} sur {steps.length} • {Math.round(progress)}% terminé\n            </p>\n          </div>\n        </CardHeader>\n\n        <CardContent className='space-y-6'>\n          {/* Step Navigation */}\n          <div className='flex justify-center'>\n            <div className='flex items-center space-x-2 md:space-x-4 overflow-x-auto pb-2'>\n              {steps.map((step, _index) => (\n                <div key={step.id} className='flex items-center'>\n                  <button\n                    onClick={() => jumpToStep(_index)}\n                    disabled={\n                      _index > currentStepIndex &&\n                      !steps.slice(0, _index).every((s) => s.isComplete)\n                    }\n                    className={`\n                      flex items-center justify-center w-8 h-8 rounded-full border-2 transition-all\n                      ${\n                        _index === currentStepIndex\n                          ? 'border-primary bg-primary text-white'\n                          : step.isComplete\n                            ? 'border-green-500 bg-green-500 text-white cursor-pointer hover:bg-green-600'\n                            : 'border-gray-300 bg-white text-gray-400'\n                      }\n                      ${_index <= currentStepIndex || step.isComplete ? 'cursor-pointer' : 'cursor-not-allowed'}\n                    `}\n                    aria-label={`${step.title} - ${step.isComplete ? 'Terminé' : _index === currentStepIndex ? 'En cours' : 'En attente'}`}\n                  >\n                    {step.isComplete ? (\n                      <CheckCircle className='w-5 h-5' />\n                    ) : (\n                      <span className='text-sm font-medium'>{_index + 1}</span>\n                    )}\n                  </button>\n\n                  {_index < steps.length - 1 && (\n                    <div\n                      className={`w-8 md:w-16 h-0.5 ${\n                        steps[_index + 1].isComplete || _index < currentStepIndex\n                          ? 'bg-green-500'\n                          : 'bg-gray-300'\n                      }`}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Current Step Content */}\n          <div className='min-h-[400px]'>\n            <div className='text-center mb-6'>\n              <h3 className='text-xl font-semibold text-gray-900 mb-2'>{currentStep.title}</h3>\n              <p className='text-gray-600'>{currentStep.description}</p>\n              {currentStep.isValid && (\n                <Badge variant='secondary' className='mt-2 bg-green-100 text-green-800'>\n                  <CheckCircle className='w-4 h-4 mr-1' />\n                  Validé\n                </Badge>\n              )}\n            </div>\n\n            {/* Render current step component */}\n            <currentStep.component\n              _data={(wizardData[currentStep.id] as Record<string, unknown>) || {}}\n              onDataChange={handleDataChange}\n              onValidationChange={handleValidationChange}\n              onNext={handleNext}\n              onPrevious={handlePrevious}\n              isActive={true}\n            />\n          </div>\n\n          {/* Navigation Buttons */}\n          <div className='flex items-center justify-between pt-6 border-t border-gray-200'>\n            <div className='flex space-x-3'>\n              {!isFirstStep && (\n                <Button onClick={handlePrevious} variant='outline' className='flex items-center'>\n                  <ArrowLeft className='w-4 h-4 mr-2' />\n                  Précédent\n                </Button>\n              )}\n\n              <Button onClick={onCancel} variant='ghost' className='text-gray-600'>\n                Annuler\n              </Button>\n            </div>\n\n            <Button\n              onClick={handleNext}\n              disabled={!currentStep.isValid || isSubmitting}\n              className='flex items-center min-w-[120px]'\n            >\n              {isSubmitting ? (\n                <>\n                  <div className='animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2' />\n                  Traitement...\n                </>\n              ) : isLastStep ? (\n                'Terminer'\n              ) : (\n                <>\n                  Suivant\n                  <ArrowRight className='w-4 h-4 ml-2' />\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"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","ignoreList":[]}