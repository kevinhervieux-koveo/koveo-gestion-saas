{"version":3,"names":["cov_scwn2368c","actualCoverage","exports","default","LoginPage","react_1","s","require","react_hook_form_1","zod_1","zod_2","wouter_1","button_1","input_1","card_1","form_1","alert_1","lucide_react_1","use_toast_1","switch_1","use_language_1","use_auth_1","language_switcher_1","koveo_logo_jpg_1","__importDefault","loginSchema","z","object","email","string","min","toLowerCase","password","DEMO_CREDENTIALS","DEFAULT_DEMO_PASSWORD","TENANT_DEMO_PASSWORD","f","navigate","useLocation","toast","useToast","t","language","useLanguage","login","useAuth","loginError","setLoginError","useState","isLoggingIn","setIsLoggingIn","isDemoMode","setIsDemoMode","selectedRole","setSelectedRole","showPassword","setShowPassword","demoUsers","setDemoUsers","loadingDemoUsers","setLoadingDemoUsers","currentPage","setCurrentPage","useEffect","urlParams","URLSearchParams","window","location","search","get","b","fetch","then","res","json","data","success","title","description","variant","catch","error","finally","getDemoRoles","demo_manager","displayName","detailedDescription","users","map","user","name","firstName","lastName","building","demo_tenant","demo_resident","form","useForm","resolver","zodResolver","defaultValues","handleLogin","_data","response","_error","errorMessage","message","onSubmit","handleDemoLogin","demoUserEmail","userName","demoRoles","role","Object","values","find","u","handleRoleSelect","roleKey","handleBackToRoles","jsx_runtime_1","jsxs","className","children","jsx","Button","size","asChild","Link","href","Home","LanguageSwitcher","src","alt","Card","CardHeader","CardTitle","CardDescription","CardContent","Alert","AlertCircle","AlertDescription","Eye","Switch","checked","onCheckedChange","Loader2","Fragment","entries","onClick","Users","usersPerPage","totalPages","Math","ceil","length","startIndex","endIndex","currentUsers","slice","index","Building","max","disabled","Form","handleSubmit","FormField","control","render","field","FormItem","FormLabel","FormControl","Input","type","autoComplete","placeholder","FormMessage","EyeOff","Shield"],"sources":["/home/runner/workspace/client/src/pages/auth/login.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useLocation, Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { AlertCircle, Shield, Building, Users, Eye, EyeOff, Loader2, Home } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Switch } from '@/components/ui/switch';\nimport { useLanguage } from '@/hooks/use-language';\nimport { useAuth } from '@/hooks/use-auth';\nimport { LanguageSwitcher } from '@/components/ui/language-switcher';\nimport koveoLogo from '@/assets/koveo-logo.jpg';\n\n/**\n * Login form validation schema with Quebec-specific requirements.\n * Ensures proper email format and password complexity for security compliance.\n */\nconst loginSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'emailRequired')\n    .email('invalidEmailFormat')\n    .toLowerCase(),\n  password: z\n    .string()\n    .min(1, 'passwordRequired')\n    .min(8, 'passwordTooShort'),\n});\n\n/**\n *\n */\ntype LoginFormData = z.infer<typeof loginSchema>;\n\n/**\n * Login page component for Koveo Gestion property management system.\n * Implements secure authentication with Quebec Law 25 compliance messaging.\n *\n * Features:\n * - Form validation with Zod schema\n * - Error handling with user-friendly messages\n * - Bilingual support (French/English)\n * - Quebec-compliant security messaging\n * - Role-based redirection after login.\n */\n// Demo credentials for testing purposes only - not real production data\nconst DEMO_CREDENTIALS = {\n  DEFAULT_DEMO_PASSWORD: 'demo123456',\n  TENANT_DEMO_PASSWORD: 'demo123456',\n} as const;\n\n// Types for demo users from API\ninterface DemoUser {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\ninterface DemoUsersData {\n  demo_manager: DemoUser[];\n  demo_tenant: DemoUser[];\n  demo_resident: DemoUser[];\n}\n\n/**\n *\n */\nexport default function LoginPage() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { t, language } = useLanguage();\n  const { login } = useAuth();\n  const [loginError, setLoginError] = useState<string>('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [isDemoMode, setIsDemoMode] = useState(false);\n  const [selectedRole, setSelectedRole] = useState<string | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n  const [demoUsers, setDemoUsers] = useState<DemoUsersData | null>(null);\n  const [loadingDemoUsers, setLoadingDemoUsers] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  // Check for demo query parameter on component mount\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('demo') === 'true') {\n      setIsDemoMode(true);\n    }\n  }, []);\n\n  // Fetch demo users when demo mode is enabled\n  useEffect(() => {\n    if (isDemoMode && !demoUsers) {\n      setLoadingDemoUsers(true);\n      fetch('/api/demo/users')\n        .then(res => res.json())\n        .then(data => {\n          if (data.success) {\n            setDemoUsers(data.data);\n          } else {\n            // Failed to fetch demo users\n            toast({\n              title: language === 'fr' ? 'Erreur Demo' : 'Demo Error',\n              description: language === 'fr' \n                ? 'Impossible de charger les utilisateurs de démonstration' \n                : 'Failed to load demo users',\n              variant: 'destructive',\n            });\n          }\n        })\n        .catch(error => {\n          // Error fetching demo users\n          toast({\n            title: language === 'fr' ? 'Erreur Demo' : 'Demo Error',\n            description: language === 'fr' \n              ? 'Impossible de charger les utilisateurs de démonstration' \n              : 'Failed to load demo users',\n            variant: 'destructive',\n          });\n        })\n        .finally(() => {\n          setLoadingDemoUsers(false);\n        });\n    }\n  }, [isDemoMode, demoUsers, toast, language]);\n\n  // Create dynamic demo roles from fetched users\n  const getDemoRoles = () => {\n    if (!demoUsers) return {};\n\n    return {\n      demo_manager: {\n        displayName: language === 'fr' ? 'Gestionnaire' : 'Manager',\n        description:\n          language === 'fr' ? 'Gestion complète des immeubles' : 'Full building management',\n        detailedDescription:\n          language === 'fr'\n            ? 'Accès complet à toutes les fonctionnalités de gestion immobilière, incluant la gestion des locataires, maintenance, finances et rapports.'\n            : 'Complete access to all property management features, including tenant management, maintenance, finances, and reporting.',\n        users: demoUsers.demo_manager.map(user => ({\n          email: user.email,\n          name: `${user.firstName} ${user.lastName}`,\n          building: language === 'fr' ? 'Gestionnaire Démonstration' : 'Demo Manager',\n          password: DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD,\n        })),\n      },\n      demo_tenant: {\n        displayName: language === 'fr' ? 'Locataire' : 'Tenant',\n        description: language === 'fr' ? 'Accès locataire standard' : 'Standard tenant access',\n        detailedDescription:\n          language === 'fr'\n            ? 'Accès aux fonctionnalités essentielles pour les locataires: demandes de maintenance, documents, communications avec la gestion.'\n            : 'Access to essential tenant features: maintenance requests, documents, communication with management.',\n        users: demoUsers.demo_tenant.map(user => ({\n          email: user.email,\n          name: `${user.firstName} ${user.lastName}`,\n          building: language === 'fr' ? 'Locataire Démonstration' : 'Demo Tenant',\n          password: DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD,\n        })),\n      },\n      demo_resident: {\n        displayName: language === 'fr' ? 'Résident' : 'Resident',\n        description: language === 'fr' ? 'Accès résident propriétaire' : 'Resident owner access',\n        detailedDescription:\n          language === 'fr'\n            ? 'Accès étendu pour les résidents propriétaires: gestion de leur unité, participation aux décisions, accès aux documents financiers.'\n            : 'Extended access for resident owners: unit management, participation in decisions, access to financial documents.',\n        users: demoUsers.demo_resident.map(user => ({\n          email: user.email,\n          name: `${user.firstName} ${user.lastName}`,\n          building: language === 'fr' ? 'Résident Démonstration' : 'Demo Resident',\n          password: DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD,\n        })),\n      },\n    };\n  };\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const handleLogin = async (_data: LoginFormData) => {\n    try {\n      setIsLoggingIn(true);\n      setLoginError('');\n\n      const response = await login(_data.email, _data.password);\n\n      toast({\n        title: language === 'fr' ? 'Connexion réussie' : 'Login successful',\n        description:\n          language === 'fr'\n            ? 'Vous êtes maintenant connecté(e) à Koveo Gestion'\n            : 'You are now logged into Koveo Gestion',\n      });\n\n      // Note: Routing to /dashboard is handled by the auth hook\n    } catch (_error: unknown) {\n      /**\n       * Catch function.\n       * @param error - Error object.\n       */\n      /**\n       * Catch function.\n       * @param error - Error object.\n       */ /**\n       * Catch function.\n       * @param error - Error object.\n       */\n\n      /**\n       * Catch function.\n       * @param error - Error object.\n       */\n      const errorMessage = (_error as Error).message || 'Login failed';\n      setLoginError(errorMessage);\n\n      toast({\n        title: language === 'fr' ? 'Erreur de connexion' : 'Login error',\n        description:\n          language === 'fr'\n            ? 'Identifiants invalides ou compte inactif'\n            : 'Invalid credentials or inactive account',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoggingIn(false);\n    }\n  };\n\n  const onSubmit = (_data: LoginFormData) => {\n    handleLogin(_data);\n  };\n\n  const handleDemoLogin = async (demoUserEmail: string, userName: string) => {\n    try {\n      setIsLoggingIn(true);\n      setLoginError('');\n\n      // Find the password for the selected user\n      let password: string = DEMO_CREDENTIALS.DEFAULT_DEMO_PASSWORD; // default\n      const demoRoles = getDemoRoles();\n      for (const role of Object.values(demoRoles)) {\n        const user = role.users?.find((u) => u.email === demoUserEmail);\n        if (user) {\n          password = user.password;\n          break;\n        }\n      }\n\n      const response = await login(demoUserEmail, password);\n\n      toast({\n        title: language === 'fr' ? 'Demo Mode Activé' : 'Demo Mode Activated',\n        description:\n          language === 'fr' ? `Connecté(e) en tant que ${userName}` : `Logged in as ${userName}`,\n      });\n    } catch (_error: unknown) {\n      const errorMessage = (_error as Error).message || 'Demo login failed';\n      setLoginError(errorMessage);\n\n      toast({\n        title: language === 'fr' ? 'Erreur Demo' : 'Demo Error',\n        description:\n          language === 'fr' ? \"Impossible d'accéder à la démonstration\" : 'Unable to access demo',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoggingIn(false);\n    }\n  };\n\n  const handleRoleSelect = (roleKey: string) => {\n    setSelectedRole(roleKey);\n    setCurrentPage(0); // Reset pagination when switching roles\n  };\n\n  const handleBackToRoles = () => {\n    setSelectedRole(null);\n  };\n\n  return (\n    <div className='min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4'>\n      {/* Header with Language Switcher and Home Button */}\n      <div className='absolute top-4 left-4 right-4 flex justify-between items-center z-10'>\n        <Button\n          variant='ghost'\n          size='sm'\n          asChild\n          className='text-gray-600 hover:text-gray-800 hover:bg-white/80 backdrop-blur-sm'\n          data-testid='button-home'\n        >\n          <Link href='/'>\n            <Home className='w-4 h-4 mr-2' />\n            {language === 'fr' ? 'Accueil' : 'Home'}\n          </Link>\n        </Button>\n        <div className='bg-white/80 backdrop-blur-sm rounded-lg p-1'>\n          <LanguageSwitcher />\n        </div>\n      </div>\n      \n      <div className='w-full max-w-md space-y-6'>\n        {/* Header */}\n        <div className='text-center space-y-4'>\n          <div className='flex items-center justify-center mb-4'>\n            <img\n              src={koveoLogo}\n              alt='Koveo Gestion Logo'\n              className='h-16 w-auto rounded-lg shadow-sm'\n            />\n          </div>\n        </div>\n\n        {/* Login Form */}\n        <Card className='shadow-lg border-0'>\n          <CardHeader className='space-y-1'>\n            <CardTitle className='text-2xl text-center'>\n              {language === 'fr' ? 'Connexion' : 'Sign In'}\n            </CardTitle>\n            <CardDescription className='text-center'>\n              {language === 'fr'\n                ? 'Entrez vos identifiants pour accéder à votre compte'\n                : 'Enter your credentials to access your account'}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className='space-y-4'>\n            {loginError && (\n              <Alert variant='destructive'>\n                <AlertCircle className='h-4 w-4' />\n                <AlertDescription>{loginError}</AlertDescription>\n              </Alert>\n            )}\n\n            {/* Demo Mode Toggle */}\n            <div className='flex items-center justify-between p-3 border rounded-lg bg-blue-50 dark:bg-blue-900/20'>\n              <div className='flex items-center space-x-2'>\n                <Eye className='w-4 h-4 text-blue-600 dark:text-blue-400' />\n                <span className='text-sm font-medium text-blue-900 dark:text-blue-100'>\n                  {language === 'fr' ? 'Mode Démonstration' : 'Demo Mode'}\n                </span>\n              </div>\n              <Switch\n                checked={isDemoMode}\n                onCheckedChange={setIsDemoMode}\n                data-testid='toggle-demo-mode'\n              />\n            </div>\n\n            {isDemoMode ? (\n              <div className='space-y-3'>\n                {loadingDemoUsers ? (\n                  // Loading state\n                  <div className='flex items-center justify-center py-8'>\n                    <Loader2 className='w-6 h-6 animate-spin text-blue-600 dark:text-blue-400' />\n                    <span className='ml-2 text-sm text-gray-600 dark:text-gray-400'>\n                      {language === 'fr' ? 'Chargement des utilisateurs...' : 'Loading users...'}\n                    </span>\n                  </div>\n                ) : !selectedRole ? (\n                  // Role Selection View\n                  <>\n                    <div className='text-center text-sm text-gray-600 dark:text-gray-400'>\n                      {language === 'fr'\n                        ? 'Choisissez un rôle pour tester la plateforme :'\n                        : 'Choose a role to test the platform:'}\n                    </div>\n                    {Object.entries(getDemoRoles()).map(([roleKey, role]) => (\n                      <Card\n                        key={roleKey}\n                        className='cursor-pointer hover:shadow-md transition-shadow border border-blue-200 hover:border-blue-300'\n                        onClick={() => handleRoleSelect(roleKey)}\n                        data-testid={`demo-role-${roleKey}`}\n                      >\n                        <CardContent className='p-4'>\n                          <div className='flex items-center justify-between'>\n                            <div>\n                              <h3 className='font-medium text-sm'>{role.displayName}</h3>\n                              <p className='text-xs text-gray-500 dark:text-gray-400'>\n                                {role.description}\n                              </p>\n                            </div>\n                            <Users className='w-4 h-4 text-blue-600 dark:text-blue-400' />\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </>\n                ) : (\n                  // Role Detail View with Demo Users\n                  <>\n                    <div className='mb-4'>\n                      <Button\n                        variant='ghost'\n                        size='sm'\n                        onClick={handleBackToRoles}\n                        className='text-blue-600 hover:text-blue-700'\n                      >\n                        ← {language === 'fr' ? 'Retour' : 'Back'}\n                      </Button>\n                      <h3 className='font-medium text-lg text-center mt-2'>{getDemoRoles()[selectedRole]?.displayName}</h3>\n                    </div>\n\n                    <div className='bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg mb-4'>\n                      <p className='text-sm text-blue-800 dark:text-blue-200'>\n                        {getDemoRoles()[selectedRole]?.detailedDescription}\n                      </p>\n                    </div>\n\n                    <div className='text-center text-sm text-gray-600 dark:text-gray-400 mb-3'>\n                      {language === 'fr'\n                        ? 'Sélectionnez un utilisateur de démonstration :'\n                        : 'Select a demo user:'}\n                    </div>\n\n                    {(() => {\n                      const users = getDemoRoles()[selectedRole]?.users || [];\n                      const usersPerPage = 3;\n                      const totalPages = Math.ceil(users.length / usersPerPage);\n                      const startIndex = currentPage * usersPerPage;\n                      const endIndex = startIndex + usersPerPage;\n                      const currentUsers = users.slice(startIndex, endIndex);\n\n                      return (\n                        <>\n                          {currentUsers.map((user, index) => (\n                            <Card\n                              key={user.email}\n                              className='cursor-pointer hover:shadow-md transition-shadow border border-green-200 hover:border-green-300'\n                              onClick={() => handleDemoLogin(user.email, user.name)}\n                              data-testid={`demo-user-${selectedRole}-${startIndex + index}`}\n                            >\n                              <CardContent className='p-4'>\n                                <div className='flex items-center justify-between'>\n                                  <div>\n                                    <h4 className='font-medium text-sm'>{user.name}</h4>\n                                    <p className='text-xs text-gray-500 dark:text-gray-400'>\n                                      {user.building}\n                                    </p>\n                                    <p className='text-xs text-green-600 dark:text-green-400 mt-1'>\n                                      {user.email}\n                                    </p>\n                                  </div>\n                                  <Building className='w-4 h-4 text-green-600 dark:text-green-400' />\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))}\n                          \n                          {totalPages > 1 && (\n                            <div className='flex items-center justify-between pt-2'>\n                              <Button\n                                variant='outline'\n                                size='sm'\n                                onClick={() => setCurrentPage(Math.max(0, currentPage - 1))}\n                                disabled={currentPage === 0}\n                                className='text-xs'\n                              >\n                                ← {language === 'fr' ? 'Précédent' : 'Previous'}\n                              </Button>\n                              \n                              <span className='text-xs text-gray-500'>\n                                {language === 'fr' \n                                  ? `Page ${currentPage + 1} de ${totalPages}`\n                                  : `Page ${currentPage + 1} of ${totalPages}`\n                                }\n                              </span>\n                              \n                              <Button\n                                variant='outline'\n                                size='sm'\n                                onClick={() => setCurrentPage(Math.min(totalPages - 1, currentPage + 1))}\n                                disabled={currentPage === totalPages - 1}\n                                className='text-xs'\n                              >\n                                {language === 'fr' ? 'Suivant' : 'Next'} →\n                              </Button>\n                            </div>\n                          )}\n                        </>\n                      );\n                    })()}\n                  </>\n                )}\n\n                <div className='text-xs text-center text-amber-600 dark:text-amber-400 px-2'>\n                  <AlertCircle className='w-3 h-3 inline mr-1' />\n                  {language === 'fr'\n                    ? 'Mode lecture seule - aucune modification possible'\n                    : 'Read-only mode - no modifications allowed'}\n                </div>\n              </div>\n            ) : (\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n                  <FormField\n                    control={form.control}\n                    name='email'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {language === 'fr' ? 'Adresse courriel' : 'Email Address'}\n                        </FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type='email'\n                            autoComplete='username'\n                            placeholder={language === 'fr' ? 'votre@email.com' : 'your@email.com'}\n                            disabled={isLoggingIn}\n                            className='h-11'\n                            data-testid='input-email'\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name='password'\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{language === 'fr' ? 'Mot de passe' : 'Password'}</FormLabel>\n                        <FormControl>\n                          <div className='relative'>\n                            <Input\n                              {...field}\n                              type={showPassword ? 'text' : 'password'}\n                              placeholder={\n                                language === 'fr' ? 'Votre mot de passe' : 'Your password'\n                              }\n                              disabled={isLoggingIn}\n                              className='h-11 pr-10'\n                              data-testid='input-password'\n                              autoComplete='current-password'\n                            />\n                            <Button\n                              type='button'\n                              variant='ghost'\n                              size='sm'\n                              className='absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent'\n                              onClick={() => setShowPassword(!showPassword)}\n                              disabled={isLoggingIn}\n                              data-testid='button-toggle-password'\n                            >\n                              {showPassword ? (\n                                <EyeOff className='h-4 w-4 text-gray-400' />\n                              ) : (\n                                <Eye className='h-4 w-4 text-gray-400' />\n                              )}\n                              <span className='sr-only'>\n                                {showPassword\n                                  ? language === 'fr'\n                                    ? 'Masquer le mot de passe'\n                                    : 'Hide password'\n                                  : language === 'fr'\n                                    ? 'Afficher le mot de passe'\n                                    : 'Show password'}\n                              </span>\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type='submit' className='w-full h-11' disabled={isLoggingIn}>\n                    {isLoggingIn\n                      ? language === 'fr'\n                        ? 'Connexion...'\n                        : 'Signing in...'\n                      : language === 'fr'\n                        ? 'Se connecter'\n                        : 'Sign In'}\n                  </Button>\n\n                  <div className='text-center'>\n                    <Button variant='link' asChild className='text-sm'>\n                      <Link href='/forgot-password'>\n                        {language === 'fr' ? 'Mot de passe oublié ?' : 'Forgot your password?'}\n                      </Link>\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quebec Compliance Notice */}\n        <Card className='border-blue-200 bg-blue-50 dark:bg-blue-900/20 dark:border-blue-800'>\n          <CardContent className='pt-6'>\n            <div className='flex items-start space-x-3'>\n              <Shield className='w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5' />\n              <div className='text-sm text-blue-800 dark:text-blue-200'>\n                <p className='font-medium mb-1'>\n                  {language === 'fr' ? 'Confidentialité & Sécurité' : 'Privacy & Security'}\n                </p>\n                <p>\n                  {language === 'fr'\n                    ? 'Conforme à la Loi 25 du Québec. Vos données sont protégées selon les normes de sécurité les plus strictes.'\n                    : 'Quebec Law 25 compliant. Your data is protected according to the strictest security standards.'}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className='text-center text-sm text-gray-500 dark:text-gray-400'>\n          <p>\n            {language === 'fr'\n              ? '© 2025 Koveo Gestion. Tous droits réservés.'\n              : '© 2025 Koveo Gestion. All rights reserved.'}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"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","ignoreList":[]}