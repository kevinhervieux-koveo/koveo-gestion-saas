{"file":"/home/runner/workspace/client/src/lib/toastUtils.ts","mappings":";;;AAAA,iDAA0C;AAE1C;;GAEG;AACU,QAAA,UAAU,GAAG;IACxB,OAAO,EAAE,CAAC,KAAa,EAAE,WAAoB,EAAE,EAAE;QAC/C,IAAA,iBAAK,EAAC;YACJ,KAAK;YACL,WAAW;SACZ,CAAC,CAAC;IACL,CAAC;IAED,KAAK,EAAE,CAAC,KAAa,EAAE,WAAoB,EAAE,EAAE;QAC7C,IAAA,iBAAK,EAAC;YACJ,KAAK;YACL,WAAW;YACX,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC;IACL,CAAC;IAED,wBAAwB;IACxB,WAAW,EAAE,CAAC,MAAc,EAAE,EAAE;QAC9B,IAAA,iBAAK,EAAC;YACJ,KAAK,EAAE,OAAO;YACd,WAAW,EAAE,oBAAoB,MAAM,EAAE;YACzC,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC;IACL,CAAC;IAED,WAAW,EAAE,CAAC,MAAc,EAAE,EAAE;QAC9B,IAAA,iBAAK,EAAC;YACJ,KAAK,EAAE,OAAO;YACd,WAAW,EAAE,oBAAoB,MAAM,EAAE;YACzC,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC;IACL,CAAC;IAED,WAAW,EAAE,CAAC,MAAc,EAAE,EAAE;QAC9B,IAAA,iBAAK,EAAC;YACJ,KAAK,EAAE,OAAO;YACd,WAAW,EAAE,oBAAoB,MAAM,EAAE;YACzC,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC;IACL,CAAC;IAED,aAAa,EAAE,CAAC,MAAc,EAAE,EAAE;QAChC,IAAA,iBAAK,EAAC;YACJ,KAAK,EAAE,SAAS;YAChB,WAAW,EAAE,GAAG,MAAM,uBAAuB;SAC9C,CAAC,CAAC;IACL,CAAC;IAED,aAAa,EAAE,CAAC,MAAc,EAAE,EAAE;QAChC,IAAA,iBAAK,EAAC;YACJ,KAAK,EAAE,SAAS;YAChB,WAAW,EAAE,GAAG,MAAM,uBAAuB;SAC9C,CAAC,CAAC;IACL,CAAC;IAED,aAAa,EAAE,CAAC,MAAc,EAAE,EAAE;QAChC,IAAA,iBAAK,EAAC;YACJ,KAAK,EAAE,SAAS;YAChB,WAAW,EAAE,GAAG,MAAM,uBAAuB;SAC9C,CAAC,CAAC;IACL,CAAC;CACF,CAAC;AAEF;;;;GAIG;AACI,MAAM,cAAc,GAAG,CAAC,KAAU,EAAE,eAAe,GAAG,mBAAmB,EAAE,EAAE;IAClF,MAAM,OAAO,GAAG,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,eAAe,CAAC;IACpF,kBAAU,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AACrC,CAAC,CAAC;AAHW,QAAA,cAAc,kBAGzB","names":[],"sources":["/home/runner/workspace/client/src/lib/toastUtils.ts"],"sourcesContent":["import { toast } from '@/hooks/use-toast';\n\n/**\n * Common toast utilities for consistent error and success messaging.\n */\nexport const toastUtils = {\n  success: (title: string, description?: string) => {\n    toast({\n      title,\n      description,\n    });\n  },\n\n  error: (title: string, description?: string) => {\n    toast({\n      title,\n      description,\n      variant: 'destructive',\n    });\n  },\n\n  // Common error patterns\n  createError: (entity: string) => {\n    toast({\n      title: 'Error',\n      description: `Failed to create ${entity}`,\n      variant: 'destructive',\n    });\n  },\n\n  updateError: (entity: string) => {\n    toast({\n      title: 'Error',\n      description: `Failed to update ${entity}`,\n      variant: 'destructive',\n    });\n  },\n\n  deleteError: (entity: string) => {\n    toast({\n      title: 'Error',\n      description: `Failed to delete ${entity}`,\n      variant: 'destructive',\n    });\n  },\n\n  createSuccess: (entity: string) => {\n    toast({\n      title: 'Success',\n      description: `${entity} created successfully`,\n    });\n  },\n\n  updateSuccess: (entity: string) => {\n    toast({\n      title: 'Success',\n      description: `${entity} updated successfully`,\n    });\n  },\n\n  deleteSuccess: (entity: string) => {\n    toast({\n      title: 'Success',\n      description: `${entity} deleted successfully`,\n    });\n  },\n};\n\n/**\n * Handle API errors with automatic toast display.\n * @param error\n * @param fallbackMessage\n */\nexport const handleApiError = (error: any, fallbackMessage = 'An error occurred') => {\n  const message = error?.response?.data?.message || error?.message || fallbackMessage;\n  toastUtils.error('Error', message);\n};\n"],"version":3}