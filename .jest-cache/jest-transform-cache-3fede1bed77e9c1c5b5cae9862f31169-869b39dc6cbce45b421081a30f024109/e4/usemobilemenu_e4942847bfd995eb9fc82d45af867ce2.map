{"file":"/home/runner/workspace/client/src/hooks/use-mobile-menu.tsx","mappings":";;;AAiFA,gDA4CC;;AA7HD,iCAAuE;AAWvE,MAAM,iBAAiB,GAAG,IAAA,qBAAa,EAAoC,SAAS,CAAC,CAAC;AAEtF;;GAEG;AACH;;;GAGG;AACH;;;GAGG;AACH;;GAEG;AACH;;;GAGG;AACH;;;GAGG;AACH;;GAEG;AACI,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,iBAAiB,CAAC,CAAC,CAAC;;;OAG5C,CAAC;;;MAGD;IAEH,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC5E,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAbW,QAAA,aAAa,iBAaxB;AASF;;;;GAIG;AACH;;;;;GAKG;AACH;;;;;GAKG;AACH;;;GAGG;AACH,SAQA,kBAAkB,CAAC,EAAE,QAAQ,EAA2B;IACtD,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,IAAA,gBAAQ,EAAC,GAAG,EAAE;QAC5D,gEAAgE;QAChE,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YAClC,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YACvD,OAAO,KAAK,KAAK,MAAM,CAAC;QAC1B,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,GAAG,EAAE;QAC5B,mBAAmB,CAAC,CAAC,IAAI,EAAE,EAAE;YAC3B,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC;YACvB,gCAAgC;YAChC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;gBAClC,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7D,CAAC;YACD,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC3B,uCAAuC;QACvC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YAClC,YAAY,CAAC,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,KAAK,GAAG;QACZ,gBAAgB;QAChB,gBAAgB;QAChB,eAAe;KAChB,CAAC;IAEF,OAAO,uBAAC,iBAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,YAAG,QAAQ,GAA8B,CAAC;AAC3F,CAAC","names":[],"sources":["/home/runner/workspace/client/src/hooks/use-mobile-menu.tsx"],"sourcesContent":["import { createContext, useContext, useState, ReactNode } from 'react';\n\n/**\n * Mobile menu context type definition.\n */\ninterface MobileMenuContextType {\n  isMobileMenuOpen: boolean;\n  toggleMobileMenu: () => void;\n  closeMobileMenu: () => void;\n}\n\nconst MobileMenuContext = createContext<MobileMenuContextType | undefined>(undefined);\n\n/**\n * Hook to use mobile menu context.\n */\n/**\n * UseMobileMenu component.\n * @returns JSX element.\n */\n/**\n * UseMobileMenu custom hook.\n * @returns Hook return value.\n */\n/**\n * Use mobile menu function.\n */\n/**\n * UseMobileMenu component.\n * @returns JSX element.\n */\n/**\n * UseMobileMenu custom hook.\n * @returns Hook return value.\n */\n/**\n * Use mobile menu function.\n */\nexport const useMobileMenu = () => {\n  const context = useContext(MobileMenuContext); /**\n   * If function.\n   * @param context === undefined - context === undefined parameter.\n   */ /**\n   * If function.\n   * @param context === undefined - context === undefined parameter.\n   */\n\n  if (context === undefined) {\n    throw new Error('useMobileMenu must be used within a MobileMenuProvider');\n  }\n  return context;\n};\n\n/**\n * Mobile menu provider props.\n */\ninterface MobileMenuProviderProps {\n  children: ReactNode;\n}\n\n/**\n * Mobile menu provider component.\n * @param root0\n * @param root0.children\n */\n/**\n * MobileMenuProvider function.\n * @param root0\n * @param root0.children\n * @returns Function result.\n */\n/**\n * MobileMenuProvider component.\n * @param props - Component props.\n * @param props.children - React children elements.\n * @returns JSX element.\n */\n/**\n * Mobile menu provider function.\n * @param { children } - { children } parameter.\n */\nexport function /**\n * Mobile menu provider function.\n * @param { children } - { children } parameter.\n */ /**\n * Mobile menu provider function.\n * @param { children } - { children } parameter.\n */\n\nMobileMenuProvider({ children }: MobileMenuProviderProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(() => {\n    // Restore mobile menu state from localStorage on initialization\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('mobile-menu-open');\n      return saved === 'true';\n    }\n    return false;\n  });\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen((prev) => {\n      const newState = !prev;\n      // Persist state to localStorage\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('mobile-menu-open', String(newState));\n      }\n      return newState;\n    });\n  };\n\n  const closeMobileMenu = () => {\n    setIsMobileMenuOpen(false);\n    // Persist closed state to localStorage\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('mobile-menu-open', 'false');\n    }\n  };\n\n  const value = {\n    isMobileMenuOpen,\n    toggleMobileMenu,\n    closeMobileMenu,\n  };\n\n  return <MobileMenuContext.Provider value={value}>{children}</MobileMenuContext.Provider>;\n}\n"],"version":3}