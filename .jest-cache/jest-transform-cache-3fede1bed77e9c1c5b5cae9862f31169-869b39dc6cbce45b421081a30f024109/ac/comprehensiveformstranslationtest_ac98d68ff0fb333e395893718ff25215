73293fed2b96cb83666ebd870b0c82f6
"use strict";
/**
 * Comprehensive Forms Translation Test Suite
 * Validates that ALL forms and their validation messages are properly translated:
 * - Login forms
 * - Registration forms
 * - Invitation forms
 * - Settings forms
 * - All form validation messages
 * - All form field labels and placeholders
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const i18n_ts_1 = require("../../client/src/lib/i18n.ts");
(0, globals_1.describe)('Comprehensive Forms Translation Coverage', () => {
    const languages = ['en', 'fr'];
    (0, globals_1.describe)('Login Form Translation', () => {
        const loginFormKeys = [
            'email',
            'password',
            'login',
            'signIn',
            'forgotPassword',
            'demoMode',
            'selectRole'
        ];
        (0, globals_1.it)('should have all login form elements translated', () => {
            loginFormKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    (0, globals_1.expect)(t[key]).toBeDefined();
                    (0, globals_1.expect)(typeof t[key]).toBe('string');
                    (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                });
            });
        });
        (0, globals_1.it)('should have proper Quebec French login terminology', () => {
            const fr = i18n_ts_1.translations.fr;
            (0, globals_1.expect)(fr.email).toBe('Courriel');
            (0, globals_1.expect)(fr.password).toBe('Mot de passe');
            (0, globals_1.expect)(fr.login).toBe('Connexion');
        });
    });
    (0, globals_1.describe)('Registration and Invitation Form Translation', () => {
        const registrationKeys = [
            'firstName',
            'lastName',
            'email',
            'password',
            'confirmPassword',
            'organization',
            'building',
            'residence',
            'role',
            'personalMessage',
            'expiryDays'
        ];
        (0, globals_1.it)('should have all registration form fields translated', () => {
            registrationKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should have proper Quebec French registration terminology', () => {
            const fr = i18n_ts_1.translations.fr;
            if (fr.firstName)
                (0, globals_1.expect)(fr.firstName).toBe('Prénom');
            if (fr.lastName)
                (0, globals_1.expect)(fr.lastName).toBe('Nom de famille');
            if (fr.confirmPassword)
                (0, globals_1.expect)(fr.confirmPassword).toBe('Confirmer le mot de passe');
        });
    });
    (0, globals_1.describe)('Form Field Labels Translation', () => {
        const formLabelKeys = [
            'enterEmailAddress',
            'enterPassword',
            'enterFirstName',
            'enterLastName',
            'selectOrganization',
            'selectBuilding',
            'selectResidence',
            'selectRole',
            'optional',
            'required'
        ];
        (0, globals_1.it)('should have all form field labels and placeholders translated', () => {
            formLabelKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Form Button Translation', () => {
        const formButtonKeys = [
            'submit',
            'save',
            'cancel',
            'close',
            'send',
            'sendInvitation',
            'reset',
            'clear',
            'add',
            'remove',
            'edit',
            'delete',
            'update',
            'create'
        ];
        (0, globals_1.it)('should have all form buttons translated', () => {
            formButtonKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
        (0, globals_1.it)('should use proper Quebec French action verbs', () => {
            const fr = i18n_ts_1.translations.fr;
            if (fr.save)
                (0, globals_1.expect)(fr.save).toBe('Enregistrer');
            if (fr.cancel)
                (0, globals_1.expect)(fr.cancel).toBe('Annuler');
            if (fr.send)
                (0, globals_1.expect)(fr.send).toBe('Envoyer');
            if (fr.create)
                (0, globals_1.expect)(fr.create).toBe('Créer');
            if (fr.update)
                (0, globals_1.expect)(fr.update).toBe('Mettre à jour');
        });
    });
    (0, globals_1.describe)('Settings and Configuration Forms Translation', () => {
        const settingsKeys = [
            'userProfile',
            'accountSettings',
            'notifications',
            'language',
            'theme',
            'timezone',
            'preferences'
        ];
        (0, globals_1.it)('should have settings form elements translated', () => {
            settingsKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Demands and Management Forms Translation', () => {
        const demandsKeys = [
            'title',
            'description',
            'priority',
            'status',
            'category',
            'assignedTo',
            'dueDate',
            'notes',
            'attachments'
        ];
        (0, globals_1.it)('should have demands management form fields translated', () => {
            demandsKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Document Management Forms Translation', () => {
        const documentKeys = [
            'documentTitle',
            'documentType',
            'documentDescription',
            'uploadDocument',
            'selectFile',
            'fileSize',
            'allowedFormats'
        ];
        (0, globals_1.it)('should have document management form fields translated', () => {
            documentKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
    (0, globals_1.describe)('Search and Filter Forms Translation', () => {
        const filterKeys = [
            'search',
            'filter',
            'sortBy',
            'dateRange',
            'fromDate',
            'toDate',
            'clearFilters',
            'applyFilters'
        ];
        (0, globals_1.it)('should have search and filter form elements translated', () => {
            filterKeys.forEach(key => {
                languages.forEach(lang => {
                    const t = i18n_ts_1.translations[lang];
                    if (t[key]) {
                        (0, globals_1.expect)(typeof t[key]).toBe('string');
                        (0, globals_1.expect)(t[key].length).toBeGreaterThan(0);
                    }
                });
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,