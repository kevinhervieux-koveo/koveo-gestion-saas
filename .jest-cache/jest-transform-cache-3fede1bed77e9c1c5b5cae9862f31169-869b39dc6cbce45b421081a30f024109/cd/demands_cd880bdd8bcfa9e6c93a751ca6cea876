a67e3e1005c7bded71d8b35595fcca85
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerDemandRoutes = registerDemandRoutes;
const db_1 = require("../db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const index_1 = require("../auth/index");
const operations_1 = require("../../shared/schemas/operations");
/**
 * Register demand routes for managing resident demands and complaints.
 *
 * @param app - Express application instance.
 */
/**
 * RegisterDemandRoutes function.
 * @param app
 * @returns Function result.
 */
function registerDemandRoutes(app) {
    // Get demands for a user (residents and managers)
    app.get('/api/demands', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const { buildingId, residenceId, type, status, search } = req.query;
            // Base query with joins
            let query = db_1.db
                .select({
                id: schema_1.demands.id,
                submitterId: schema_1.demands.submitterId,
                type: schema_1.demands.type,
                assignationResidenceId: schema_1.demands.assignationResidenceId,
                assignationBuildingId: schema_1.demands.assignationBuildingId,
                description: schema_1.demands.description,
                filePath: schema_1.demands.filePath,
                fileName: schema_1.demands.fileName,
                fileSize: schema_1.demands.fileSize,
                residenceId: schema_1.demands.residenceId,
                buildingId: schema_1.demands.buildingId,
                status: schema_1.demands.status,
                reviewedBy: schema_1.demands.reviewedBy,
                reviewedAt: schema_1.demands.reviewedAt,
                reviewNotes: schema_1.demands.reviewNotes,
                createdAt: schema_1.demands.createdAt,
                updatedAt: schema_1.demands.updatedAt,
                submitter: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
                residence: {
                    id: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    buildingId: schema_1.residences.buildingId,
                },
                building: {
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                },
            })
                .from(schema_1.demands)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demands.submitterId, schema_1.users.id))
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.demands.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.demands.buildingId, schema_1.buildings.id));
            // Apply role-based access control
            const conditions = [];
            if (user.role === 'admin') {
                // Admins can see all demands - no additional conditions needed
            }
            else if (user.role === 'manager') {
                // Managers can see demands from their organization's buildings
                const userOrganizationData = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    // Get buildings belonging to the manager's organization
                    const organizationBuildings = await db_1.db
                        .select({ buildingId: schema_1.buildings.id })
                        .from(schema_1.buildings)
                        .where((0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, organizationId));
                    if (organizationBuildings.length > 0) {
                        const buildingIds = organizationBuildings.map(b => b.buildingId);
                        conditions.push((0, drizzle_orm_1.inArray)(schema_1.demands.buildingId, buildingIds));
                    }
                    else {
                        // Manager has no buildings - return empty results
                        conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.id, 'never-match'));
                    }
                }
                else {
                    // Manager not assigned to any organization - return empty results
                    conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.id, 'never-match'));
                }
            }
            else {
                // Residents and tenants can only see demands they created
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.submitterId, user.id));
            }
            // Add filter conditions
            if (buildingId) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.buildingId, buildingId));
            }
            if (residenceId) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.residenceId, residenceId));
            }
            if (type) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.type, type));
            }
            if (status) {
                conditions.push((0, drizzle_orm_1.eq)(schema_1.demands.status, status));
            }
            // Apply conditions to query if any exist
            let finalQuery;
            if (conditions.length > 0) {
                finalQuery = query.where((0, drizzle_orm_1.and)(...conditions));
            }
            else {
                finalQuery = query;
            }
            const results = await finalQuery.orderBy((0, drizzle_orm_1.desc)(schema_1.demands.createdAt));
            // Filter by search term if provided
            let filteredResults = results;
            if (search) {
                const searchTerm = search.toLowerCase();
                filteredResults = results.filter((demand) => demand.description.toLowerCase().includes(searchTerm) ||
                    demand.submitter.firstName?.toLowerCase().includes(searchTerm) ||
                    demand.submitter.lastName?.toLowerCase().includes(searchTerm) ||
                    demand.residence.unitNumber.toLowerCase().includes(searchTerm) ||
                    demand.building.name.toLowerCase().includes(searchTerm));
            }
            res.json(filteredResults);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demands' });
        }
    });
    // Get a specific demand
    app.get('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const demand = await db_1.db
                .select({
                id: schema_1.demands.id,
                submitterId: schema_1.demands.submitterId,
                type: schema_1.demands.type,
                assignationResidenceId: schema_1.demands.assignationResidenceId,
                assignationBuildingId: schema_1.demands.assignationBuildingId,
                description: schema_1.demands.description,
                filePath: schema_1.demands.filePath,
                fileName: schema_1.demands.fileName,
                fileSize: schema_1.demands.fileSize,
                residenceId: schema_1.demands.residenceId,
                buildingId: schema_1.demands.buildingId,
                status: schema_1.demands.status,
                reviewedBy: schema_1.demands.reviewedBy,
                reviewedAt: schema_1.demands.reviewedAt,
                reviewNotes: schema_1.demands.reviewNotes,
                createdAt: schema_1.demands.createdAt,
                updatedAt: schema_1.demands.updatedAt,
                submitter: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
                residence: {
                    id: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    buildingId: schema_1.residences.buildingId,
                },
                building: {
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    address: schema_1.buildings.address,
                },
            })
                .from(schema_1.demands)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demands.submitterId, schema_1.users.id))
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.demands.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.demands.buildingId, schema_1.buildings.id))
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, id))
                .limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demandData = demand[0];
            // Check access permissions based on user role
            let hasAccess = false;
            if (user.role === 'admin') {
                // Admins can view all demands
                hasAccess = true;
            }
            else if (user.role === 'manager') {
                // Managers can view demands from their organization's buildings
                const userOrganizationData = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    // Check if the demand's building belongs to the manager's organization
                    const buildingOrganization = await db_1.db
                        .select({ organizationId: schema_1.buildings.organizationId })
                        .from(schema_1.buildings)
                        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, demandData.buildingId))
                        .limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        hasAccess = true;
                    }
                }
            }
            else {
                // Residents and tenants can only view their own demands
                hasAccess = demandData.submitterId === user.id;
            }
            if (!hasAccess) {
                return res.status(403).json({ message: 'Access denied' });
            }
            res.json(demandData);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demand' });
        }
    });
    // Create a new demand
    app.post('/api/demands', index_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            const demandData = req.body;
            // Validate input using the corrected schema that already has optional fields
            const demandInputSchema = operations_1.insertDemandSchema.omit({ submitterId: true });
            // Validate input
            const validatedData = demandInputSchema.parse(demandData);
            console.log('✅ Demand validation passed:', validatedData);
            // Implement role-based residence assignment validation
            if (user.role === 'admin') {
                // Admin can assign to any building/residence - no validation needed
                if (!validatedData.buildingId) {
                    return res.status(400).json({ message: 'Building is required' });
                }
            }
            else if (user.role === 'manager') {
                // Manager can assign demands to all buildings assigned to them and their residences
                if (!validatedData.buildingId) {
                    return res.status(400).json({ message: 'Building is required' });
                }
                // Verify manager has access to the specified building
                const userOrganizationData = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id));
                if (userOrganizationData.length === 0) {
                    return res.status(403).json({ message: 'Manager not assigned to any organization' });
                }
                const organizationId = userOrganizationData[0].organizationId;
                const buildingAccess = await db_1.db
                    .select({ id: schema_1.buildings.id })
                    .from(schema_1.buildings)
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.id, validatedData.buildingId), (0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, organizationId)))
                    .limit(1);
                if (buildingAccess.length === 0) {
                    return res.status(403).json({ message: 'Access denied to specified building' });
                }
                // If residence is specified, verify it belongs to the building
                if (validatedData.residenceId) {
                    const residenceAccess = await db_1.db
                        .select({ id: schema_1.residences.id })
                        .from(schema_1.residences)
                        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.id, validatedData.residenceId), (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, validatedData.buildingId)))
                        .limit(1);
                    if (residenceAccess.length === 0) {
                        return res.status(403).json({ message: 'Residence does not belong to specified building' });
                    }
                }
            }
            else {
                // Resident and tenant can only assign residences assigned to them or their building
                const userResidenceData = await db_1.db
                    .select({
                    residenceId: schema_1.userResidences.residenceId,
                    buildingId: schema_1.residences.buildingId,
                })
                    .from(schema_1.userResidences)
                    .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                    .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, user.id));
                if (userResidenceData.length === 0) {
                    return res.status(400).json({ message: 'User must be assigned to a residence to create demands' });
                }
                // Auto-populate from user's primary residence if not provided
                if (!validatedData.residenceId || !validatedData.buildingId) {
                    validatedData.residenceId = validatedData.residenceId || userResidenceData[0].residenceId;
                    validatedData.buildingId = validatedData.buildingId || userResidenceData[0].buildingId;
                }
                // Validate that user has access to specified building/residence
                if (validatedData.buildingId) {
                    const hasAccessToBuilding = userResidenceData.some(ur => ur.buildingId === validatedData.buildingId);
                    if (!hasAccessToBuilding) {
                        return res.status(403).json({ message: 'Access denied to specified building' });
                    }
                }
                if (validatedData.residenceId) {
                    const hasAccessToResidence = userResidenceData.some(ur => ur.residenceId === validatedData.residenceId);
                    if (!hasAccessToResidence) {
                        return res.status(403).json({ message: 'Access denied to specified residence' });
                    }
                }
                // Ensure required fields are present after auto-population
                if (!validatedData.buildingId) {
                    return res.status(400).json({ message: 'Building is required' });
                }
            }
            console.log('✅ Final demand data before insertion:', {
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                type: validatedData.type,
                description: validatedData.description
            });
            const demandInsertData = {
                ...validatedData,
                buildingId: validatedData.buildingId,
                residenceId: validatedData.residenceId,
                submitterId: user.id,
                status: validatedData.status || 'submitted',
            };
            const newDemand = await db_1.db.insert(schema_1.demands).values([demandInsertData]).returning();
            res.status(201).json(newDemand[0]);
        }
        catch (error) {
            if (error.name === 'ZodError') {
                return res.status(400).json({ message: 'Invalid demand data', errors: error.errors });
            }
            res.status(500).json({ message: 'Failed to create demand' });
        }
    });
    // Update a demand
    app.put('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const updates = req.body;
            // Get the current demand
            const currentDemand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demand = currentDemand[0];
            // Check permissions based on user role and update type
            let canUpdate = false;
            let allowedFields = [];
            if (user.role === 'admin') {
                // Admins can update any demand and any field
                canUpdate = true;
                allowedFields = ['status', 'reviewNotes', 'reviewedBy', 'reviewedAt', 'description', 'type'];
            }
            else if (user.role === 'manager') {
                // Managers can update demands from their organization's buildings (status/review fields only)
                const userOrganizationData = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    // Check if the demand's building belongs to the manager's organization
                    const buildingOrganization = await db_1.db
                        .select({ organizationId: schema_1.buildings.organizationId })
                        .from(schema_1.buildings)
                        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, demand.buildingId))
                        .limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        canUpdate = true;
                        allowedFields = ['status', 'reviewNotes', 'reviewedBy', 'reviewedAt'];
                    }
                }
            }
            else if (demand.submitterId === user.id) {
                // Residents and tenants can only update their own demands (limited fields)
                canUpdate = true;
                allowedFields = ['description', 'type'];
            }
            if (!canUpdate) {
                return res.status(403).json({ message: 'Access denied' });
            }
            // Filter updates to only allowed fields
            const filteredUpdates = {};
            for (const [key, value] of Object.entries(updates)) {
                if (allowedFields.includes(key)) {
                    filteredUpdates[key] = value;
                }
            }
            // Add metadata for manager/admin updates
            if (user.role === 'admin' || user.role === 'manager') {
                if (updates.status && updates.status !== demand.status) {
                    filteredUpdates['reviewedBy'] = user.id;
                    filteredUpdates['reviewedAt'] = new Date();
                }
            }
            const updatedDemand = await db_1.db
                .update(schema_1.demands)
                .set({ ...filteredUpdates, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema_1.demands.id, id))
                .returning();
            res.json(updatedDemand[0]);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to update demand' });
        }
    });
    // Delete a demand
    app.delete('/api/demands/:id', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            // Get the current demand
            const currentDemand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (currentDemand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demand = currentDemand[0];
            // Check permissions based on user role
            let canDelete = false;
            if (user.role === 'admin') {
                // Admins can delete any demand
                canDelete = true;
            }
            else if (user.role === 'manager') {
                // Managers can delete demands from their organization's buildings
                const userOrganizationData = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    // Check if the demand's building belongs to the manager's organization
                    const buildingOrganization = await db_1.db
                        .select({ organizationId: schema_1.buildings.organizationId })
                        .from(schema_1.buildings)
                        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, demand.buildingId))
                        .limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        canDelete = true;
                    }
                }
            }
            else if (demand.submitterId === user.id) {
                // Users can delete their own demands
                canDelete = true;
            }
            if (!canDelete) {
                return res.status(403).json({ message: 'Access denied' });
            }
            // Delete associated comments first (cascade delete)
            await db_1.db.delete(schema_1.demandComments).where((0, drizzle_orm_1.eq)(schema_1.demandComments.demandId, id));
            // Then delete the demand
            await db_1.db.delete(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id));
            res.json({ message: 'Demand deleted successfully' });
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to delete demand' });
        }
    });
    // Get comments for a demand
    app.get('/api/demands/:id/comments', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            // First check if user has access to the demand
            const demand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demandData = demand[0];
            // Check access permissions based on user role
            let hasAccess = false;
            if (user.role === 'admin') {
                // Admins can view all demands
                hasAccess = true;
            }
            else if (user.role === 'manager') {
                // Managers can view demands from their organization's buildings
                const userOrganizationData = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    // Check if the demand's building belongs to the manager's organization
                    const buildingOrganization = await db_1.db
                        .select({ organizationId: schema_1.buildings.organizationId })
                        .from(schema_1.buildings)
                        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, demandData.buildingId))
                        .limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        hasAccess = true;
                    }
                }
            }
            else {
                // Residents and tenants can only view their own demands
                hasAccess = demandData.submitterId === user.id;
            }
            if (!hasAccess) {
                return res.status(403).json({ message: 'Access denied' });
            }
            const comments = await db_1.db
                .select({
                id: schema_1.demandComments.id,
                demandId: schema_1.demandComments.demandId,
                commentText: schema_1.demandComments.commentText,
                commentType: schema_1.demandComments.commentType,
                isInternal: schema_1.demandComments.isInternal,
                commenterId: schema_1.demandComments.commenterId,
                createdAt: schema_1.demandComments.createdAt,
                author: {
                    id: schema_1.users.id,
                    firstName: schema_1.users.firstName,
                    lastName: schema_1.users.lastName,
                    email: schema_1.users.email,
                },
            })
                .from(schema_1.demandComments)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.demandComments.commenterId, schema_1.users.id))
                .where((0, drizzle_orm_1.eq)(schema_1.demandComments.demandId, id))
                .orderBy((0, drizzle_orm_1.asc)(schema_1.demandComments.createdAt));
            res.json(comments);
        }
        catch (error) {
            res.status(500).json({ message: 'Failed to fetch demand comments' });
        }
    });
    // Create a comment on a demand
    app.post('/api/demands/:id/comments', index_1.requireAuth, async (req, res) => {
        try {
            const { id } = req.params;
            const user = req.user;
            const commentData = req.body;
            // Validate input
            const validatedData = operations_1.insertDemandCommentSchema.parse({
                ...commentData,
                demandId: id,
                commenterId: user.id,
            });
            // Check if user has access to the demand (same permission logic as GET comments)
            const demand = await db_1.db.select().from(schema_1.demands).where((0, drizzle_orm_1.eq)(schema_1.demands.id, id)).limit(1);
            if (demand.length === 0) {
                return res.status(404).json({ message: 'Demand not found' });
            }
            const demandData = demand[0];
            // Check access permissions based on user role
            let hasAccess = false;
            if (user.role === 'admin') {
                // Admins can view all demands
                hasAccess = true;
            }
            else if (user.role === 'manager') {
                // Managers can view demands from their organization's buildings
                const userOrganizationData = await db_1.db
                    .select({ organizationId: schema_1.userOrganizations.organizationId })
                    .from(schema_1.userOrganizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, user.id));
                if (userOrganizationData.length > 0) {
                    const organizationId = userOrganizationData[0].organizationId;
                    // Check if the demand's building belongs to the manager's organization
                    const buildingOrganization = await db_1.db
                        .select({ organizationId: schema_1.buildings.organizationId })
                        .from(schema_1.buildings)
                        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, demandData.buildingId))
                        .limit(1);
                    if (buildingOrganization.length > 0 && buildingOrganization[0].organizationId === organizationId) {
                        hasAccess = true;
                    }
                }
            }
            else {
                // Residents and tenants can only view their own demands
                hasAccess = demandData.submitterId === user.id;
            }
            if (!hasAccess) {
                return res.status(403).json({ message: 'Access denied' });
            }
            const newComment = await db_1.db.insert(schema_1.demandComments).values(validatedData).returning();
            res.status(201).json(newComment[0]);
        }
        catch (error) {
            if (error.name === 'ZodError') {
                return res.status(400).json({ message: 'Invalid comment data', errors: error.errors });
            }
            res.status(500).json({ message: 'Failed to create comment' });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,