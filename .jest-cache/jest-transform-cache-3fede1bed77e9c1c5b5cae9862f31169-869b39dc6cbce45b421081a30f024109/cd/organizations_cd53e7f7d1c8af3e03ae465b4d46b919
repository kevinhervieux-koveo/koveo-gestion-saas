74a93f0e0488fbc76a92c16c9ce0f0e9
"use strict";
/**
 * Organizations API endpoints for admin operations.
 * Provides CRUD operations for organization management.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerOrganizationRoutes = registerOrganizationRoutes;
const db_1 = require("../db");
const schema_1 = require("@shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const auth_1 = require("../auth");
/**
 *
 * @param app
 */
/**
 * RegisterOrganizationRoutes function.
 * @param app
 * @returns Function result.
 */
function registerOrganizationRoutes(app) {
    /**
     * GET /api/organizations - Retrieves organizations accessible to the current user
     * Returns array of organizations directly for frontend components.
     */
    app.get('/api/organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            console.log(`📊 Fetching organizations for user ${currentUser.id} with role ${currentUser.role}`);
            // Get organizations based on user role
            let organizationsQuery;
            if (currentUser.role === 'admin') {
                // Admin can see all organizations
                organizationsQuery = db_1.db
                    .select({
                    id: schema_1.organizations.id,
                    name: schema_1.organizations.name,
                    type: schema_1.organizations.type,
                    address: schema_1.organizations.address,
                    city: schema_1.organizations.city,
                    province: schema_1.organizations.province,
                    postalCode: schema_1.organizations.postalCode,
                    phone: schema_1.organizations.phone,
                    email: schema_1.organizations.email,
                    website: schema_1.organizations.website,
                    registrationNumber: schema_1.organizations.registrationNumber,
                    isActive: schema_1.organizations.isActive,
                    createdAt: schema_1.organizations.createdAt,
                })
                    .from(schema_1.organizations)
                    .where((0, drizzle_orm_1.eq)(schema_1.organizations.isActive, true))
                    .orderBy(schema_1.organizations.name);
            }
            else {
                // Other users see organizations they have access to through user_organizations
                organizationsQuery = db_1.db
                    .select({
                    id: schema_1.organizations.id,
                    name: schema_1.organizations.name,
                    type: schema_1.organizations.type,
                    address: schema_1.organizations.address,
                    city: schema_1.organizations.city,
                    province: schema_1.organizations.province,
                    postalCode: schema_1.organizations.postalCode,
                    phone: schema_1.organizations.phone,
                    email: schema_1.organizations.email,
                    website: schema_1.organizations.website,
                    registrationNumber: schema_1.organizations.registrationNumber,
                    isActive: schema_1.organizations.isActive,
                    createdAt: schema_1.organizations.createdAt,
                })
                    .from(schema_1.organizations)
                    .innerJoin(schema_1.userOrganizations, (0, drizzle_orm_1.eq)(schema_1.organizations.id, schema_1.userOrganizations.organizationId))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.organizations.isActive, true), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, currentUser.id), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true)))
                    .orderBy(schema_1.organizations.name);
            }
            const accessibleOrganizations = await organizationsQuery;
            console.log(`✅ Found ${accessibleOrganizations.length} organizations for user ${currentUser.id}`);
            // Return array directly (not wrapped in object)
            res.json(accessibleOrganizations);
        }
        catch (error) {
            console.error('❌ Error fetching organizations:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to fetch organizations',
            });
        }
    });
    /**
     * GET /api/admin/organizations - Retrieves all organizations for admin users
     * Only admin users can access all organizations.
     */
    app.get('/api/admin/organizations', auth_1.requireAuth, async (req, res) => {
        try {
            // Check if user is admin
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required',
                    code: 'ADMIN_REQUIRED',
                });
            }
            // Get all organizations for admin
            const allOrganizations = await db_1.db
                .select({
                id: schema_1.organizations.id,
                name: schema_1.organizations.name,
                type: schema_1.organizations.type,
                address: schema_1.organizations.address,
                city: schema_1.organizations.city,
                province: schema_1.organizations.province,
                postalCode: schema_1.organizations.postalCode,
                phone: schema_1.organizations.phone,
                email: schema_1.organizations.email,
                website: schema_1.organizations.website,
                registrationNumber: schema_1.organizations.registrationNumber,
                isActive: schema_1.organizations.isActive,
                createdAt: schema_1.organizations.createdAt,
            })
                .from(schema_1.organizations)
                .where((0, drizzle_orm_1.eq)(schema_1.organizations.isActive, true))
                .orderBy(schema_1.organizations.name);
            res.json({
                organizations: allOrganizations,
            });
        }
        catch (error) {
            console.error('❌ Error fetching organizations:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to fetch organizations',
            });
        }
    });
    /**
     * POST /api/organizations - Create a new organization
     * Allows authorized users to create organizations.
     */
    app.post('/api/organizations', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admin users can create organizations for now
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required to create organizations',
                    code: 'ADMIN_REQUIRED',
                });
            }
            const organizationData = req.body;
            // Insert new organization
            const [newOrganization] = await db_1.db
                .insert(schema_1.organizations)
                .values({
                name: organizationData.name,
                type: organizationData.type,
                address: organizationData.address,
                city: organizationData.city,
                province: organizationData.province || 'QC',
                postalCode: organizationData.postalCode,
                phone: organizationData.phone || null,
                email: organizationData.email || null,
                website: organizationData.website || null,
                registrationNumber: organizationData.registrationNumber || null,
            })
                .returning({
                id: schema_1.organizations.id,
                name: schema_1.organizations.name,
                type: schema_1.organizations.type,
                address: schema_1.organizations.address,
                city: schema_1.organizations.city,
                province: schema_1.organizations.province,
                postalCode: schema_1.organizations.postalCode,
                phone: schema_1.organizations.phone,
                email: schema_1.organizations.email,
                website: schema_1.organizations.website,
                registrationNumber: schema_1.organizations.registrationNumber,
                isActive: schema_1.organizations.isActive,
                createdAt: schema_1.organizations.createdAt,
            });
            // Organization storage hierarchy will be created automatically when documents are uploaded
            console.log('Organization created - storage hierarchy will be created on first document upload');
            res.status(201).json(newOrganization);
        }
        catch (error) {
            console.error('❌ Error creating organization:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to create organization',
            });
        }
    });
    /**
     * GET /api/organizations/:id - Get organization by ID
     */
    app.get('/api/organizations/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const organizationId = req.params.id;
            // Find the organization
            const [organization] = await db_1.db
                .select()
                .from(schema_1.organizations)
                .where((0, drizzle_orm_1.eq)(schema_1.organizations.id, organizationId));
            if (!organization) {
                return res.status(404).json({
                    message: 'Organization not found',
                    code: 'NOT_FOUND',
                });
            }
            res.json(organization);
        }
        catch (error) {
            console.error('❌ Error fetching organization:', error);
            res.status(500).json({
                message: 'Failed to fetch organization',
                code: 'SERVER_ERROR',
            });
        }
    });
    /**
     * PUT /api/organizations/:id - Update an existing organization
     * Allows authorized users to update organization details.
     */
    app.put('/api/organizations/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Only admin users can update organizations
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required to update organizations',
                    code: 'ADMIN_REQUIRED',
                });
            }
            const organizationId = req.params.id;
            const updateData = req.body;
            // Check if organization exists
            const existingOrg = await db_1.db
                .select()
                .from(schema_1.organizations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.organizations.id, organizationId), (0, drizzle_orm_1.eq)(schema_1.organizations.isActive, true)))
                .limit(1);
            if (existingOrg.length === 0) {
                return res.status(404).json({
                    message: 'Organization not found',
                    code: 'NOT_FOUND',
                });
            }
            // Update organization
            const [updatedOrganization] = await db_1.db
                .update(schema_1.organizations)
                .set({
                name: updateData.name,
                type: updateData.type,
                address: updateData.address,
                city: updateData.city,
                province: updateData.province || 'QC',
                postalCode: updateData.postalCode,
                phone: updateData.phone || null,
                email: updateData.email || null,
                website: updateData.website || null,
                registrationNumber: updateData.registrationNumber || null,
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(schema_1.organizations.id, organizationId))
                .returning({
                id: schema_1.organizations.id,
                name: schema_1.organizations.name,
                type: schema_1.organizations.type,
                address: schema_1.organizations.address,
                city: schema_1.organizations.city,
                province: schema_1.organizations.province,
                postalCode: schema_1.organizations.postalCode,
                phone: schema_1.organizations.phone,
                email: schema_1.organizations.email,
                website: schema_1.organizations.website,
                registrationNumber: schema_1.organizations.registrationNumber,
                isActive: schema_1.organizations.isActive,
                createdAt: schema_1.organizations.createdAt,
                updatedAt: schema_1.organizations.updatedAt,
            });
            res.json(updatedOrganization);
        }
        catch (error) {
            console.error('❌ Error updating organization:', error);
            res.status(500).json({
                error: 'Internal server error',
                message: 'Failed to update organization',
            });
        }
    });
    /**
     * GET /api/organizations/:id/deletion-impact - Get deletion impact analysis
     * Shows what will be deleted when removing an organization.
     */
    app.get('/api/organizations/:id/deletion-impact', auth_1.requireAuth, async (req, res) => {
        const organizationId = req.params.id;
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required',
                    code: 'ADMIN_REQUIRED',
                });
            }
            // Check if organization exists
            const organization = await db_1.db
                .select({ id: schema_1.organizations.id, name: schema_1.organizations.name })
                .from(schema_1.organizations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.organizations.id, organizationId), (0, drizzle_orm_1.eq)(schema_1.organizations.isActive, true)))
                .limit(1);
            if (organization.length === 0) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'Organization not found',
                });
            }
            // Count buildings in this organization
            const buildingsCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.count)() })
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
            // Count residences in buildings of this organization
            const residencesCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.count)() })
                .from(schema_1.residences)
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
            // Count invitations associated with this organization
            let totalInvitations = 0;
            try {
                const invitationsCount = await db_1.db
                    .select({ count: (0, drizzle_orm_1.count)() })
                    .from(schema_1.invitations)
                    .where((0, drizzle_orm_1.eq)(schema_1.invitations.organizationId, organizationId));
                totalInvitations = invitationsCount[0]?.count || 0;
            }
            catch (___invError) {
                totalInvitations = 0;
            }
            // Count users who will become orphaned (only belong to this organization)
            const potentialOrphansCount = await db_1.db
                .select({ count: (0, drizzle_orm_1.count)() })
                .from(schema_1.userOrganizations)
                .innerJoin(schema_1.users, (0, drizzle_orm_1.eq)(schema_1.userOrganizations.userId, schema_1.users.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userOrganizations.organizationId, organizationId), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true), (0, drizzle_orm_1.eq)(schema_1.users.isActive, true)));
            const impact = {
                organization: organization[0],
                buildings: buildingsCount[0]?.count || 0,
                residences: residencesCount[0]?.count || 0,
                invitations: totalInvitations,
                potentialOrphanedUsers: potentialOrphansCount[0]?.count || 0,
            };
            res.json(impact);
        }
        catch (error) {
            console.error('❌ Error analyzing deletion impact:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to analyze deletion impact',
            });
        }
    });
    /**
     * DELETE /api/organizations/:id - Cascade delete an organization
     * Deletes organization and all related entities (buildings, residences, documents). Users are preserved for data safety.
     */
    app.delete('/api/organizations/:id', auth_1.requireAuth, async (req, res) => {
        try {
            const currentUser = req.user || req.session?.user;
            if (!currentUser) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            if (currentUser.role !== 'admin') {
                return res.status(403).json({
                    message: 'Admin access required',
                    code: 'ADMIN_REQUIRED',
                });
            }
            const organizationId = req.params.id;
            // Check if organization exists
            const organization = await db_1.db
                .select({ id: schema_1.organizations.id, name: schema_1.organizations.name })
                .from(schema_1.organizations)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.organizations.id, organizationId), (0, drizzle_orm_1.eq)(schema_1.organizations.isActive, true)))
                .limit(1);
            if (organization.length === 0) {
                return res.status(404).json({
                    _error: 'Not found',
                    message: 'Organization not found',
                });
            }
            console.log(`🗑️ Deleting organization ${organizationId} with cascade delete...`);
            // Since Neon HTTP driver doesn't support transactions, we'll do cascading delete manually
            // in the correct order to maintain referential integrity
            // 1. Get all buildings in this organization (including already inactive ones)
            const orgBuildings = await db_1.db
                .select({ id: schema_1.buildings.id })
                .from(schema_1.buildings)
                .where((0, drizzle_orm_1.eq)(schema_1.buildings.organizationId, organizationId));
            if (orgBuildings.length > 0) {
                const orgBuildingIds = orgBuildings.map((b) => b.id);
                // 2. Soft delete residences first (children of buildings) - get ALL residences in these buildings
                const affectedResidences = await db_1.db
                    .update(schema_1.residences)
                    .set({ isActive: false, updatedAt: new Date() })
                    .where((0, drizzle_orm_1.inArray)(schema_1.residences.buildingId, orgBuildingIds))
                    .returning({ id: schema_1.residences.id, unitNumber: schema_1.residences.unitNumber });
                console.log(`🗑️ Soft deleted ${affectedResidences.length} residences in buildings: ${orgBuildingIds.join(', ')}`);
                // 3. Soft delete buildings
                const affectedBuildings = await db_1.db
                    .update(schema_1.buildings)
                    .set({ isActive: false, updatedAt: new Date() })
                    .where((0, drizzle_orm_1.inArray)(schema_1.buildings.id, orgBuildingIds))
                    .returning({ id: schema_1.buildings.id, name: schema_1.buildings.name });
                console.log(`🗑️ Soft deleted ${affectedBuildings.length} buildings: ${affectedBuildings.map((b) => b.name).join(', ')}`);
            }
            // 4. Delete user-organization relationships
            await db_1.db
                .delete(schema_1.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema_1.userOrganizations.organizationId, organizationId));
            // 5. DISABLED: User deletion is now prohibited for data safety
            // Users are never deleted during cascade operations to prevent permanent data loss
            // This protects against accidental deletion of user accounts and their historical data
            console.log('⚠️  User deletion disabled for data safety - users will be preserved');
            // Optional: Log users who would have been affected for admin review
            const affectedUsers = await db_1.db
                .select({
                id: schema_1.users.id,
                email: schema_1.users.email,
                firstName: schema_1.users.firstName,
                lastName: schema_1.users.lastName,
            })
                .from(schema_1.users)
                .leftJoin(schema_1.userOrganizations, (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userOrganizations.userId), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true)))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.isActive, true), (0, drizzle_orm_1.isNull)(schema_1.userOrganizations.userId)));
            if (affectedUsers.length > 0) {
                console.log(`⚠️  ${affectedUsers.length} users are now without organization assignments but have been preserved:`, affectedUsers.map(u => u.email));
                // DISABLED: Users are no longer deleted - they are preserved for data safety
            }
            // 6. Finally, soft delete the organization
            await db_1.db
                .update(schema_1.organizations)
                .set({ isActive: false, updatedAt: new Date() })
                .where((0, drizzle_orm_1.eq)(schema_1.organizations.id, organizationId));
            // Object storage cleanup will be handled automatically
            try {
                console.log('Organization deleted - storage cleanup will be handled automatically');
            }
            catch (storageError) {
                console.error('⚠️ Object storage cleanup failed, but organization deletion succeeded:', storageError);
            }
            res.json({
                message: 'Organization and related entities deleted successfully',
                deletedOrganization: organization[0].name,
            });
        }
        catch (error) {
            console.error('❌ Error deleting organization:', error);
            res.status(500).json({
                _error: 'Internal server error',
                message: 'Failed to delete organization and related entities',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,