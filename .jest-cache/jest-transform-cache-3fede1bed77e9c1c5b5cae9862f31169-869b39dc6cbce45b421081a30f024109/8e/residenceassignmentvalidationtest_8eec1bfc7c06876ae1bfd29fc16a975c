08f974b3356c2940dd62826f3729c424
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const db_1 = require("../../server/db");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const bcrypt = __importStar(require("bcryptjs"));
/**
 * Residence Assignment Validation Test Suite
 *
 * This comprehensive test validates that users can properly access their assigned residences.
 * Specifically addresses the issue where Sophie Résidente (or demo resident users)
 * cannot see their assigned residences.
 *
 * Test Coverage:
 * - User-residence relationship data integrity
 * - Residence access control logic for demo users
 * - API endpoints for fetching user residences
 * - Proper error messages when no residences found
 * - Authentication and authorization flows
 */
(0, globals_1.describe)('Residence Assignment Validation', () => {
    // Test data setup
    const testData = {
        // Test organization
        testOrg: {
            id: 'test-org-residence-assignment',
            name: 'Test Residence Organization',
            type: 'management_company',
            address: '123 Test Residence Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
            isActive: true
        },
        // Test building
        testBuilding: {
            id: 'test-building-residence-assignment',
            name: 'Test Residence Building',
            address: '123 Test Building Street',
            city: 'Montreal',
            province: 'QC',
            postalCode: 'H1A 1A1',
            buildingType: 'condo',
            totalUnits: 5,
            totalFloors: 2,
            isActive: true
        },
        // Test residences
        testResidences: [
            {
                id: 'test-residence-1',
                unitNumber: '101',
                floor: 1,
                isActive: true
            },
            {
                id: 'test-residence-2',
                unitNumber: '102',
                floor: 1,
                isActive: true
            },
            {
                id: 'test-residence-3',
                unitNumber: '201',
                floor: 2,
                isActive: true
            }
        ],
        // Test users - covering different roles including demo users
        testUsers: [
            {
                id: 'test-user-demo-resident',
                username: 'sophie.resident.test',
                email: 'sophie.resident.test@koveo-gestion.com',
                password: 'TestPass123!',
                firstName: 'Sophie',
                lastName: 'Résidente',
                role: 'demo_resident',
                language: 'fr',
                isActive: true
            },
            {
                id: 'test-user-regular-resident',
                username: 'regular.resident.test',
                email: 'regular.resident.test@koveo-gestion.com',
                password: 'TestPass123!',
                firstName: 'Regular',
                lastName: 'Resident',
                role: 'resident',
                language: 'fr',
                isActive: true
            },
            {
                id: 'test-user-demo-tenant',
                username: 'demo.tenant.test',
                email: 'demo.tenant.test@koveo-gestion.com',
                password: 'TestPass123!',
                firstName: 'Demo',
                lastName: 'Tenant',
                role: 'demo_tenant',
                language: 'fr',
                isActive: true
            },
            {
                id: 'test-user-manager',
                username: 'test.manager',
                email: 'test.manager@koveo-gestion.com',
                password: 'TestPass123!',
                firstName: 'Test',
                lastName: 'Manager',
                role: 'manager',
                language: 'fr',
                isActive: true
            }
        ]
    };
    let createdUserIds = [];
    let createdOrgIds = [];
    let createdBuildingIds = [];
    let createdResidenceIds = [];
    (0, globals_1.beforeAll)(async () => {
        console.log('🔧 Setting up residence assignment test data...');
        // Clean up any existing test data
        const testEmails = testData.testUsers.map(user => user.email);
        const testUserIds = testData.testUsers.map(user => user.id);
        const testResidenceIds = testData.testResidences.map(residence => residence.id);
        await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.inArray)(schema_1.userResidences.userId, testUserIds)).catch(() => { }); // Ignore if doesn't exist
        await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.inArray)(schema_1.userOrganizations.userId, testUserIds)).catch(() => { });
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.inArray)(schema_1.users.email, testEmails)).catch(() => { });
        await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.inArray)(schema_1.residences.id, testResidenceIds)).catch(() => { });
        await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.eq)(schema_1.buildings.id, testData.testBuilding.id)).catch(() => { });
        await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.eq)(schema_1.organizations.id, testData.testOrg.id)).catch(() => { });
        // Create test organization
        await db_1.db.insert(schema_1.organizations).values({
            ...testData.testOrg,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        createdOrgIds.push(testData.testOrg.id);
        // Create test building
        await db_1.db.insert(schema_1.buildings).values({
            ...testData.testBuilding,
            organizationId: testData.testOrg.id,
            createdAt: new Date(),
            updatedAt: new Date()
        });
        createdBuildingIds.push(testData.testBuilding.id);
        // Create test residences
        const residencesToCreate = testData.testResidences.map(residence => ({
            ...residence,
            buildingId: testData.testBuilding.id,
            createdAt: new Date(),
            updatedAt: new Date()
        }));
        await db_1.db.insert(schema_1.residences).values(residencesToCreate);
        createdResidenceIds = testData.testResidences.map(r => r.id);
        // Create test users with hashed passwords
        const usersToCreate = await Promise.all(testData.testUsers.map(async (user) => ({
            ...user,
            password: await bcrypt.hash(user.password, 12),
            createdAt: new Date(),
            updatedAt: new Date()
        })));
        await db_1.db.insert(schema_1.users).values(usersToCreate);
        createdUserIds = testData.testUsers.map(u => u.id);
        // Create user-organization relationships for regular users
        const userOrgRelationships = [
            {
                userId: testData.testUsers[1].id, // regular resident
                organizationId: testData.testOrg.id,
                organizationRole: 'resident',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            },
            {
                userId: testData.testUsers[3].id, // manager
                organizationId: testData.testOrg.id,
                organizationRole: 'manager',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            }
        ];
        await db_1.db.insert(schema_1.userOrganizations).values(userOrgRelationships);
        console.log('✅ Test data setup complete');
    });
    (0, globals_1.afterAll)(async () => {
        console.log('🧹 Cleaning up residence assignment test data...');
        // Clean up in reverse order due to foreign key constraints
        await db_1.db.delete(schema_1.userResidences).where((0, drizzle_orm_1.inArray)(schema_1.userResidences.userId, createdUserIds)).catch(() => { });
        await db_1.db.delete(schema_1.userOrganizations).where((0, drizzle_orm_1.inArray)(schema_1.userOrganizations.userId, createdUserIds)).catch(() => { });
        await db_1.db.delete(schema_1.users).where((0, drizzle_orm_1.inArray)(schema_1.users.id, createdUserIds)).catch(() => { });
        await db_1.db.delete(schema_1.residences).where((0, drizzle_orm_1.inArray)(schema_1.residences.id, createdResidenceIds)).catch(() => { });
        await db_1.db.delete(schema_1.buildings).where((0, drizzle_orm_1.inArray)(schema_1.buildings.id, createdBuildingIds)).catch(() => { });
        await db_1.db.delete(schema_1.organizations).where((0, drizzle_orm_1.inArray)(schema_1.organizations.id, createdOrgIds)).catch(() => { });
        console.log('✅ Test cleanup complete');
    });
    (0, globals_1.describe)('User-Residence Relationship Data Integrity', () => {
        (0, globals_1.it)('should create user-residence assignments correctly', async () => {
            // Assign Sophie Résidente to residence 101
            const sophieUser = testData.testUsers[0]; // demo_resident
            const residence101 = testData.testResidences[0];
            const userResidenceAssignment = {
                userId: sophieUser.id,
                residenceId: residence101.id,
                relationshipType: 'tenant',
                startDate: '2024-01-01',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db_1.db.insert(schema_1.userResidences).values(userResidenceAssignment);
            // Verify the assignment was created correctly
            const createdAssignment = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, residence101.id)));
            (0, globals_1.expect)(createdAssignment).toHaveLength(1);
            (0, globals_1.expect)(createdAssignment[0].relationshipType).toBe('tenant');
            (0, globals_1.expect)(createdAssignment[0].isActive).toBe(true);
        });
        (0, globals_1.it)('should handle multiple residence assignments for the same user', async () => {
            const regularResident = testData.testUsers[1]; // regular resident
            // Assign to multiple residences
            const assignments = [
                {
                    userId: regularResident.id,
                    residenceId: testData.testResidences[1].id, // residence 102
                    relationshipType: 'owner',
                    startDate: '2024-01-01',
                    isActive: true,
                    createdAt: new Date(),
                    updatedAt: new Date()
                },
                {
                    userId: regularResident.id,
                    residenceId: testData.testResidences[2].id, // residence 201
                    relationshipType: 'tenant',
                    startDate: '2024-06-01',
                    isActive: true,
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            ];
            await db_1.db.insert(schema_1.userResidences).values(assignments);
            // Verify multiple assignments
            const userAssignments = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, regularResident.id));
            (0, globals_1.expect)(userAssignments).toHaveLength(2);
            (0, globals_1.expect)(userAssignments.every(a => a.isActive)).toBe(true);
        });
        (0, globals_1.it)('should enforce referential integrity between users and residences', async () => {
            // Try to create assignment with non-existent user ID
            const invalidAssignment = {
                userId: 'non-existent-user-id',
                residenceId: testData.testResidences[0].id,
                relationshipType: 'tenant',
                startDate: '2024-01-01',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            // This should fail due to foreign key constraint
            await (0, globals_1.expect)(db_1.db.insert(schema_1.userResidences).values(invalidAssignment)).rejects.toThrow();
        });
    });
    (0, globals_1.describe)('Residence Access Control Logic for Demo Users', () => {
        (0, globals_1.beforeAll)(async () => {
            // Set up residence assignments for access control tests
            const assignments = [
                {
                    userId: testData.testUsers[0].id, // Sophie demo_resident
                    residenceId: testData.testResidences[0].id,
                    relationshipType: 'tenant',
                    startDate: '2024-01-01',
                    isActive: true,
                    createdAt: new Date(),
                    updatedAt: new Date()
                },
                {
                    userId: testData.testUsers[2].id, // demo_tenant
                    residenceId: testData.testResidences[1].id,
                    relationshipType: 'tenant',
                    startDate: '2024-01-01',
                    isActive: true,
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            ];
            await db_1.db.insert(schema_1.userResidences).values(assignments);
        });
        (0, globals_1.it)('should allow demo_resident users to access their assigned residences', async () => {
            const sophieUser = testData.testUsers[0]; // demo_resident
            // Query residences accessible to Sophie
            const accessibleResidences = await db_1.db
                .select({
                residence: schema_1.residences,
                building: schema_1.buildings,
                userResidence: schema_1.userResidences
            })
                .from(schema_1.userResidences)
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
            (0, globals_1.expect)(accessibleResidences).toHaveLength(1);
            (0, globals_1.expect)(accessibleResidences[0].residence.unitNumber).toBe('101');
            (0, globals_1.expect)(accessibleResidences[0].building.name).toBe('Test Residence Building');
        });
        (0, globals_1.it)('should properly handle demo users with no residence assignments', async () => {
            // Create a demo user with no assignments
            const unassignedDemoUser = {
                id: 'test-user-unassigned-demo',
                username: 'unassigned.demo.test',
                email: 'unassigned.demo.test@koveo-gestion.com',
                password: await bcrypt.hash('TestPass123!', 12),
                firstName: 'Unassigned',
                lastName: 'Demo',
                role: 'demo_resident',
                language: 'fr',
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db_1.db.insert(schema_1.users).values(unassignedDemoUser);
            createdUserIds.push(unassignedDemoUser.id);
            // Query residences for unassigned user
            const accessibleResidences = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, unassignedDemoUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            (0, globals_1.expect)(accessibleResidences).toHaveLength(0);
        });
        (0, globals_1.it)('should validate user access scope for building-level permissions', async () => {
            const sophieUser = testData.testUsers[0]; // demo_resident
            // Get buildings accessible through residence assignments
            const accessibleBuildings = await db_1.db
                .select({
                buildingId: schema_1.buildings.id,
                buildingName: schema_1.buildings.name
            })
                .from(schema_1.userResidences)
                .innerJoin(schema_1.residences, (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, schema_1.residences.id))
                .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
            (0, globals_1.expect)(accessibleBuildings).toHaveLength(1);
            (0, globals_1.expect)(accessibleBuildings[0].buildingId).toBe(testData.testBuilding.id);
        });
    });
    (0, globals_1.describe)('API Endpoint Simulation Tests', () => {
        (0, globals_1.it)('should simulate /api/user/residences endpoint logic', async () => {
            const sophieUser = testData.testUsers[0]; // demo_resident
            // Simulate the logic from server/api/residences.ts
            const userResidencesList = await db_1.db
                .select({
                residenceId: schema_1.userResidences.residenceId,
            })
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            (0, globals_1.expect)(userResidencesList).toHaveLength(1);
            (0, globals_1.expect)(userResidencesList[0].residenceId).toBe(testData.testResidences[0].id);
        });
        (0, globals_1.it)('should simulate /api/residences endpoint with building access filter', async () => {
            const sophieUser = testData.testUsers[0]; // demo_resident
            // Simulate the access control logic from residences API
            // First get user's accessible building IDs through residences
            const userResidenceRecords = await db_1.db
                .select({
                residenceId: schema_1.userResidences.residenceId,
            })
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            if (userResidenceRecords.length > 0) {
                const residenceIds = userResidenceRecords.map(ur => ur.residenceId);
                // Get buildings through residences  
                const residenceBuildings = await db_1.db
                    .select({
                    buildingId: schema_1.buildings.id,
                    residenceId: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber
                })
                    .from(schema_1.residences)
                    .innerJoin(schema_1.buildings, (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, schema_1.buildings.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.residences.id, residenceIds), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)));
                (0, globals_1.expect)(residenceBuildings).toHaveLength(1);
                (0, globals_1.expect)(residenceBuildings[0].buildingId).toBe(testData.testBuilding.id);
                (0, globals_1.expect)(residenceBuildings[0].unitNumber).toBe('101');
            }
        });
        (0, globals_1.it)('should validate residence access for specific residence endpoint', async () => {
            const sophieUser = testData.testUsers[0]; // demo_resident
            const residenceId = testData.testResidences[0].id;
            // Simulate /api/residences/:id access check
            const accessCheck = await db_1.db
                .select({
                hasAccess: schema_1.userResidences.isActive
            })
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, sophieUser.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, residenceId), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            (0, globals_1.expect)(accessCheck).toHaveLength(1);
            (0, globals_1.expect)(accessCheck[0].hasAccess).toBe(true);
        });
    });
    (0, globals_1.describe)('Error Handling and Edge Cases', () => {
        (0, globals_1.it)('should handle inactive user residence assignments', async () => {
            // Create an inactive assignment
            const inactiveAssignment = {
                userId: testData.testUsers[0].id, // Sophie
                residenceId: testData.testResidences[2].id, // residence 201
                relationshipType: 'former_tenant',
                startDate: '2023-01-01',
                endDate: '2023-12-31',
                isActive: false, // INACTIVE
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db_1.db.insert(schema_1.userResidences).values(inactiveAssignment);
            // Query should only return active assignments
            const activeAssignments = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testData.testUsers[0].id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            // Should only have the active assignment (residence 101), not the inactive one
            (0, globals_1.expect)(activeAssignments).toHaveLength(1);
            (0, globals_1.expect)(activeAssignments[0].residenceId).toBe(testData.testResidences[0].id);
        });
        (0, globals_1.it)('should handle users with expired residence assignments', async () => {
            // Create an assignment with end date in the past
            const expiredAssignment = {
                userId: testData.testUsers[2].id, // demo_tenant
                residenceId: testData.testResidences[2].id,
                relationshipType: 'tenant',
                startDate: '2023-01-01',
                endDate: '2023-06-30', // Expired
                isActive: true,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            await db_1.db.insert(schema_1.userResidences).values(expiredAssignment);
            // Application should implement logic to handle expired assignments
            // For now, we test that the data structure supports this
            const expiredAssignments = await db_1.db
                .select()
                .from(schema_1.userResidences)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testData.testUsers[2].id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
            (0, globals_1.expect)(expiredAssignments.length).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(expiredAssignments.some(a => a.endDate !== null)).toBe(true);
        });
        (0, globals_1.it)('should provide meaningful error context for debugging', async () => {
            const testUserId = testData.testUsers[0].id; // Sophie
            // Gather debugging information that would help diagnose the issue
            const debugInfo = {
                // User exists check
                userExists: await db_1.db
                    .select({ id: schema_1.users.id, email: schema_1.users.email, role: schema_1.users.role, isActive: schema_1.users.isActive })
                    .from(schema_1.users)
                    .where((0, drizzle_orm_1.eq)(schema_1.users.id, testUserId)),
                // User residence assignments
                userResidenceAssignments: await db_1.db
                    .select()
                    .from(schema_1.userResidences)
                    .where((0, drizzle_orm_1.eq)(schema_1.userResidences.userId, testUserId)),
                // Available residences in the system
                availableResidences: await db_1.db
                    .select({
                    id: schema_1.residences.id,
                    unitNumber: schema_1.residences.unitNumber,
                    buildingId: schema_1.residences.buildingId,
                    isActive: schema_1.residences.isActive
                })
                    .from(schema_1.residences)
                    .where((0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)),
                // Building information
                buildingInfo: await db_1.db
                    .select({
                    id: schema_1.buildings.id,
                    name: schema_1.buildings.name,
                    organizationId: schema_1.buildings.organizationId,
                    isActive: schema_1.buildings.isActive
                })
                    .from(schema_1.buildings)
                    .where((0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true))
            };
            // Validate that debugging info is comprehensive
            (0, globals_1.expect)(debugInfo.userExists).toHaveLength(1);
            (0, globals_1.expect)(debugInfo.userExists[0].email).toBe('sophie.resident.test@koveo-gestion.com');
            (0, globals_1.expect)(debugInfo.userResidenceAssignments.length).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(debugInfo.availableResidences.length).toBeGreaterThanOrEqual(3);
            (0, globals_1.expect)(debugInfo.buildingInfo).toHaveLength(1);
            // Log debug info for troubleshooting (would be helpful in real scenarios)
            console.log('🔍 Residence Assignment Debug Info:', {
                userId: testUserId,
                userExists: debugInfo.userExists.length > 0,
                assignmentCount: debugInfo.userResidenceAssignments.length,
                activeAssignments: debugInfo.userResidenceAssignments.filter(a => a.isActive).length,
                availableResidences: debugInfo.availableResidences.length,
                buildings: debugInfo.buildingInfo.length
            });
        });
    });
    (0, globals_1.describe)('Authentication Integration Tests', () => {
        (0, globals_1.it)('should validate that demo users have proper authentication credentials', async () => {
            const sophieUser = testData.testUsers[0]; // demo_resident
            // Verify user record exists with proper authentication data
            const userRecord = await db_1.db
                .select({
                id: schema_1.users.id,
                email: schema_1.users.email,
                password: schema_1.users.password,
                role: schema_1.users.role,
                isActive: schema_1.users.isActive
            })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieUser.email));
            (0, globals_1.expect)(userRecord).toHaveLength(1);
            (0, globals_1.expect)(userRecord[0].role).toBe('demo_resident');
            (0, globals_1.expect)(userRecord[0].isActive).toBe(true);
            (0, globals_1.expect)(userRecord[0].password).toBeDefined();
            (0, globals_1.expect)(userRecord[0].password.length).toBeGreaterThan(10); // Hashed password
        });
        (0, globals_1.it)('should verify password validation for demo users', async () => {
            const sophieUser = testData.testUsers[0]; // demo_resident
            const userRecord = await db_1.db
                .select({ password: schema_1.users.password })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.email, sophieUser.email));
            // Verify that the stored password can be validated
            const isValidPassword = await bcrypt.compare('TestPass123!', userRecord[0].password);
            (0, globals_1.expect)(isValidPassword).toBe(true);
            // Verify invalid password fails
            const isInvalidPassword = await bcrypt.compare('WrongPassword', userRecord[0].password);
            (0, globals_1.expect)(isInvalidPassword).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,