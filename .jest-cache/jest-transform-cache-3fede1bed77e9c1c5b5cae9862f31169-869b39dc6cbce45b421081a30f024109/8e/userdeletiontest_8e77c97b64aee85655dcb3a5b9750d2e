16672fc5ee746a5bb83d5fc5f089adea
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const routes_1 = require("../../../server/routes");
const db_1 = require("../../../server/db");
const schema = __importStar(require("../../../shared/schema"));
const drizzle_orm_1 = require("drizzle-orm");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
/**
 * User Deletion Test Suite
 *
 * Tests complete user deletion functionality including:
 * - Complete record removal (not marking inactive)
 * - Authentication requirements
 * - Admin vs self-deletion permissions
 * - Related data cleanup
 * - Error handling for non-existent users
 */
// Create test app
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('User Deletion', () => {
    let app;
    let testUser;
    let adminUser;
    let testOrganization;
    let authCookie;
    (0, globals_1.beforeEach)(async () => {
        app = createTestApp();
        // Clean up any existing test data
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'test-deletion@example.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'admin-test@example.com'));
        // Create test organization
        testOrganization = await db_1.db
            .insert(schema.organizations)
            .values({
            name: 'Test Deletion Org',
            type: 'syndicate',
            address: '456 Delete St',
            city: 'Quebec City',
            province: 'QC',
            postalCode: 'G1A 1A1',
        })
            .returning();
        // Create admin user for testing admin deletion
        adminUser = await db_1.db
            .insert(schema.users)
            .values({
            username: 'admintest',
            email: 'admin-test@example.com',
            firstName: 'Admin',
            lastName: 'Test',
            password: await bcryptjs_1.default.hash('AdminPass123!', 12),
            role: 'admin',
        })
            .returning();
        // Create test user to be deleted
        testUser = await db_1.db
            .insert(schema.users)
            .values({
            username: 'testdeletion',
            email: 'test-deletion@example.com',
            firstName: 'Delete',
            lastName: 'Me',
            password: await bcryptjs_1.default.hash('DeletePass123!', 12),
            role: 'manager',
        })
            .returning();
        // Create user-organization relationship
        await db_1.db.insert(schema.userOrganizations).values({
            userId: testUser[0].id,
            organizationId: testOrganization[0].id,
        });
        // Authenticate as admin for admin deletion tests
        const loginResponse = await (0, supertest_1.default)(app)
            .post('/api/auth/login')
            .send({
            email: 'admin-test@example.com',
            password: 'AdminPass123!',
        });
        authCookie = loginResponse.headers['set-cookie'][0];
    });
    (0, globals_1.afterEach)(async () => {
        // Clean up test data
        if (testUser?.[0]?.id) {
            await db_1.db.delete(schema.userOrganizations).where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, testUser[0].id));
        }
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'test-deletion@example.com'));
        await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.email, 'admin-test@example.com'));
        if (testOrganization?.[0]?.id) {
            await db_1.db.delete(schema.organizations).where((0, drizzle_orm_1.eq)(schema.organizations.id, testOrganization[0].id));
        }
    });
    (0, globals_1.describe)('Admin User Deletion', () => {
        (0, globals_1.it)('should completely remove user record from database', async () => {
            const response = await (0, supertest_1.default)(app)
                .post(`/api/users/${testUser[0].id}/delete-account`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'User account deleted successfully',
                success: true,
            });
            // Verify user is completely removed from database
            const deletedUser = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.id, testUser[0].id))
                .limit(1);
            (0, globals_1.expect)(deletedUser).toHaveLength(0);
        });
        (0, globals_1.it)('should remove user-organization relationships', async () => {
            await (0, supertest_1.default)(app)
                .post(`/api/users/${testUser[0].id}/delete-account`)
                .set('Cookie', authCookie)
                .expect(200);
            // Verify user-organization relationships are removed
            const userOrgs = await db_1.db
                .select()
                .from(schema.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, testUser[0].id));
            (0, globals_1.expect)(userOrgs).toHaveLength(0);
        });
        (0, globals_1.it)('should require authentication for admin deletion', async () => {
            const response = await (0, supertest_1.default)(app)
                .post(`/api/users/${testUser[0].id}/delete-account`)
                .expect(401);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Authentication required',
                code: 'AUTH_REQUIRED',
            });
        });
        (0, globals_1.it)('should return error for non-existent user deletion', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/users/non-existent-user-id/delete-account')
                .set('Cookie', authCookie)
                .expect(404);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'User not found',
                code: 'USER_NOT_FOUND',
            });
        });
        (0, globals_1.it)('should require valid user ID parameter', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/users//delete-account')
                .set('Cookie', authCookie)
                .expect(400);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'User ID is required',
                code: 'MISSING_USER_ID',
            });
        });
    });
    (0, globals_1.describe)('Self Deletion', () => {
        let userAuthCookie;
        (0, globals_1.beforeEach)(async () => {
            // Login as the test user for self-deletion tests
            const userLoginResponse = await (0, supertest_1.default)(app)
                .post('/api/auth/login')
                .send({
                email: 'test-deletion@example.com',
                password: 'DeletePass123!',
            });
            userAuthCookie = userLoginResponse.headers['set-cookie'][0];
        });
        (0, globals_1.it)('should allow user to delete their own account', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/users/me/delete-account')
                .set('Cookie', userAuthCookie)
                .expect(200);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Your account has been deleted successfully',
                success: true,
            });
            // Verify user is completely removed
            const deletedUser = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.id, testUser[0].id))
                .limit(1);
            (0, globals_1.expect)(deletedUser).toHaveLength(0);
        });
        (0, globals_1.it)('should require authentication for self deletion', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/users/me/delete-account')
                .expect(401);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Authentication required',
                code: 'AUTH_REQUIRED',
            });
        });
        (0, globals_1.it)('should clear session after self deletion', async () => {
            await (0, supertest_1.default)(app)
                .post('/api/users/me/delete-account')
                .set('Cookie', userAuthCookie)
                .expect(200);
            // Try to access protected endpoint with same cookie
            const protectedResponse = await (0, supertest_1.default)(app)
                .get('/api/users/me/organizations')
                .set('Cookie', userAuthCookie)
                .expect(401);
            (0, globals_1.expect)(protectedResponse.body).toMatchObject({
                message: 'Authentication required',
            });
        });
    });
    (0, globals_1.describe)('Data Integrity', () => {
        (0, globals_1.it)('should maintain referential integrity after user deletion', async () => {
            // Create some related data
            const invitation = await db_1.db
                .insert(schema.invitations)
                .values({
                email: 'related-invite@example.com',
                token: 'related-token',
                tokenHash: 'hash123',
                role: 'tenant',
                organizationId: testOrganization[0].id,
                invitedByUserId: testUser[0].id,
                expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                status: 'pending',
            })
                .returning();
            // Delete the user
            await (0, supertest_1.default)(app)
                .post(`/api/users/${testUser[0].id}/delete-account`)
                .set('Cookie', authCookie)
                .expect(200);
            // Verify related invitation still exists but references are handled properly
            const relatedInvitation = await db_1.db
                .select()
                .from(schema.invitations)
                .where((0, drizzle_orm_1.eq)(schema.invitations.id, invitation[0].id))
                .limit(1);
            (0, globals_1.expect)(relatedInvitation).toHaveLength(1);
            (0, globals_1.expect)(relatedInvitation[0].invitedByUserId).toBe(testUser[0].id);
            // Clean up
            await db_1.db.delete(schema.invitations).where((0, drizzle_orm_1.eq)(schema.invitations.id, invitation[0].id));
        });
    });
    (0, globals_1.describe)('Edge Cases', () => {
        (0, globals_1.it)('should handle deletion of user with no organization assignments', async () => {
            // Remove organization assignments
            await db_1.db
                .delete(schema.userOrganizations)
                .where((0, drizzle_orm_1.eq)(schema.userOrganizations.userId, testUser[0].id));
            const response = await (0, supertest_1.default)(app)
                .post(`/api/users/${testUser[0].id}/delete-account`)
                .set('Cookie', authCookie)
                .expect(200);
            (0, globals_1.expect)(response.body.success).toBe(true);
            // Verify user is deleted
            const deletedUser = await db_1.db
                .select()
                .from(schema.users)
                .where((0, drizzle_orm_1.eq)(schema.users.id, testUser[0].id))
                .limit(1);
            (0, globals_1.expect)(deletedUser).toHaveLength(0);
        });
        (0, globals_1.it)('should prevent deletion of the last admin user', async () => {
            // Make test user the only admin
            await db_1.db
                .update(schema.users)
                .set({ role: 'admin' })
                .where((0, drizzle_orm_1.eq)(schema.users.id, testUser[0].id));
            // Delete the current admin user
            await db_1.db.delete(schema.users).where((0, drizzle_orm_1.eq)(schema.users.id, adminUser[0].id));
            const response = await (0, supertest_1.default)(app)
                .post(`/api/users/${testUser[0].id}/delete-account`)
                .set('Cookie', authCookie)
                .expect(403);
            (0, globals_1.expect)(response.body).toMatchObject({
                message: 'Cannot delete the last admin user',
                code: 'CANNOT_DELETE_LAST_ADMIN',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,