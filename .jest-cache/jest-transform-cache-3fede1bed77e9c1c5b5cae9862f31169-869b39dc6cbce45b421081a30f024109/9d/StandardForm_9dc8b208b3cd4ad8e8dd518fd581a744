fe2c2d3c930a56ad37bd3367e6b6179b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StandardForm = StandardForm;
exports.useStandardForm = useStandardForm;
exports.FormValidationSummary = FormValidationSummary;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const form_1 = require("@/components/ui/form");
const card_1 = require("@/components/ui/card");
const alert_1 = require("@/components/ui/alert");
const lucide_react_1 = require("lucide-react");
const utils_1 = require("@/lib/utils");
const StandardFormField_1 = require("./StandardFormField");
/**
 * Standardized form wrapper that provides consistent styling, layout,
 * error handling, and accessibility features for all forms in the application.
 *
 * Features:
 * - Consistent form layout and styling
 * - Quebec compliance standards
 * - Built-in error and success messaging
 * - Responsive design
 * - Automatic test ID generation
 * - Loading states with proper UX
 * - Optional card wrapper for better visual hierarchy
 *
 * @param props - Configuration for the form wrapper
 */
function StandardForm({ form, onSubmit, title, description, children, isLoading = false, submitText = 'Submit', loadingText = 'Submitting...', className = '', formName = 'standard-form', showCard = true, errorMessage, successMessage, resetOnSuccess = false, maxWidth = 'md', }) {
    // Handle form submission with error boundary
    const handleSubmit = async (data) => {
        try {
            await onSubmit(data);
            if (resetOnSuccess) {
                form.reset();
            }
        }
        catch (error) {
            console.error('Form submission error:', error);
            // Error is handled by parent component through errorMessage prop
        }
    };
    // Get max-width classes based on prop
    const maxWidthClasses = {
        sm: 'max-w-sm',
        md: 'max-w-md',
        lg: 'max-w-lg',
        xl: 'max-w-xl',
        '2xl': 'max-w-2xl',
        full: 'max-w-full',
    };
    const FormContent = () => ((0, jsx_runtime_1.jsx)(form_1.Form, { ...form, children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: form.handleSubmit(handleSubmit), className: (0, utils_1.cn)('space-y-6', className), "data-testid": `${formName}-form`, noValidate // We handle validation with Zod
            : true, children: [errorMessage && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: "destructive", "data-testid": `${formName}-error-alert`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: "h-4 w-4" }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: errorMessage })] })), successMessage && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: "default", className: "border-green-500 text-green-700", "data-testid": `${formName}-success-alert`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.CheckCircle, { className: "h-4 w-4" }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: successMessage })] })), (0, jsx_runtime_1.jsx)("div", { className: "space-y-4", children: children }), (0, jsx_runtime_1.jsx)("div", { className: "flex justify-end pt-4", children: (0, jsx_runtime_1.jsx)(StandardFormField_1.StandardSubmitButton, { isLoading: isLoading, loadingText: loadingText, formName: formName, disabled: isLoading, children: submitText }) })] }) }));
    if (!showCard) {
        return ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)('w-full mx-auto', maxWidthClasses[maxWidth]), children: (0, jsx_runtime_1.jsx)(FormContent, {}) }));
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: (0, utils_1.cn)('w-full mx-auto', maxWidthClasses[maxWidth]), children: (0, jsx_runtime_1.jsxs)(card_1.Card, { "data-testid": `${formName}-card`, children: [(title || description) && ((0, jsx_runtime_1.jsxs)(card_1.CardHeader, { children: [title && ((0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: "text-xl font-semibold text-gray-900", children: title })), description && ((0, jsx_runtime_1.jsx)(card_1.CardDescription, { className: "text-gray-600", children: description }))] })), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)(FormContent, {}) })] }) }));
}
function useStandardForm(options = {}) {
    const [isLoading, setIsLoading] = react_1.default.useState(false);
    const [errorMessage, setErrorMessage] = react_1.default.useState('');
    const [successMessage, setSuccessMessage] = react_1.default.useState('');
    const { resetOnSuccess = false, showSuccessMessage = true, successMessageDuration = 3000, } = options;
    // Clear success message after duration
    react_1.default.useEffect(() => {
        if (successMessage && successMessageDuration > 0) {
            const timer = setTimeout(() => {
                setSuccessMessage('');
            }, successMessageDuration);
            return () => clearTimeout(timer);
        }
    }, [successMessage, successMessageDuration]);
    const handleSubmit = react_1.default.useCallback(async (submitFn, form, successMsg = 'Operation completed successfully') => {
        return async (data) => {
            setIsLoading(true);
            setErrorMessage('');
            setSuccessMessage('');
            try {
                await submitFn(data);
                if (showSuccessMessage) {
                    setSuccessMessage(successMsg);
                }
                if (resetOnSuccess) {
                    form.reset();
                }
            }
            catch (error) {
                console.error('Form submission error:', error);
                setErrorMessage(error.response?.data?.message ||
                    error.message ||
                    'An unexpected error occurred. Please try again.');
            }
            finally {
                setIsLoading(false);
            }
        };
    }, [resetOnSuccess, showSuccessMessage]);
    const clearMessages = react_1.default.useCallback(() => {
        setErrorMessage('');
        setSuccessMessage('');
    }, []);
    return {
        isLoading,
        errorMessage,
        successMessage,
        handleSubmit,
        clearMessages,
        setIsLoading,
        setErrorMessage,
        setSuccessMessage,
    };
}
function FormValidationSummary({ errors, formName = 'form', className = '', }) {
    const errorEntries = Object.entries(errors).filter(([, error]) => error?.message);
    if (errorEntries.length === 0) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: "destructive", className: className, "data-testid": `${formName}-validation-summary`, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertCircle, { className: "h-4 w-4" }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-1", children: [(0, jsx_runtime_1.jsx)("p", { className: "font-medium", children: "Please correct the following errors:" }), (0, jsx_runtime_1.jsx)("ul", { className: "list-disc list-inside space-y-1 text-sm", children: errorEntries.map(([field, error]) => ((0, jsx_runtime_1.jsxs)("li", { children: [(0, jsx_runtime_1.jsxs)("strong", { children: [field.charAt(0).toUpperCase() + field.slice(1), ":"] }), " ", error.message] }, field))) })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,