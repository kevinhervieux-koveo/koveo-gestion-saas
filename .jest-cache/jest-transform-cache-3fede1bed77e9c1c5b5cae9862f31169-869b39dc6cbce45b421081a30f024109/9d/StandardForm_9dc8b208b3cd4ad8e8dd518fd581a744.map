{"file":"/home/runner/workspace/client/src/components/forms/StandardForm.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/forms/StandardForm.tsx"],"sourcesContent":["import React from 'react';\nimport { UseFormReturn, FieldValues } from 'react-hook-form';\nimport { Form } from '@/components/ui/form';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { AlertCircle, CheckCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { StandardSubmitButton, FormSection } from './StandardFormField';\n\n/**\n * Props for the standardized form wrapper\n */\ninterface StandardFormProps<T extends FieldValues> {\n  form: UseFormReturn<T>;\n  onSubmit: (data: T) => void | Promise<void>;\n  title?: string;\n  description?: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n  submitText?: string;\n  loadingText?: string;\n  className?: string;\n  formName?: string;\n  showCard?: boolean;\n  errorMessage?: string;\n  successMessage?: string;\n  resetOnSuccess?: boolean;\n  maxWidth?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';\n}\n\n/**\n * Standardized form wrapper that provides consistent styling, layout,\n * error handling, and accessibility features for all forms in the application.\n * \n * Features:\n * - Consistent form layout and styling\n * - Quebec compliance standards\n * - Built-in error and success messaging\n * - Responsive design\n * - Automatic test ID generation\n * - Loading states with proper UX\n * - Optional card wrapper for better visual hierarchy\n * \n * @param props - Configuration for the form wrapper\n */\nexport function StandardForm<T extends FieldValues>({\n  form,\n  onSubmit,\n  title,\n  description,\n  children,\n  isLoading = false,\n  submitText = 'Submit',\n  loadingText = 'Submitting...',\n  className = '',\n  formName = 'standard-form',\n  showCard = true,\n  errorMessage,\n  successMessage,\n  resetOnSuccess = false,\n  maxWidth = 'md',\n}: StandardFormProps<T>) {\n  // Handle form submission with error boundary\n  const handleSubmit = async (data: T) => {\n    try {\n      await onSubmit(data);\n      if (resetOnSuccess) {\n        form.reset();\n      }\n    } catch (error) {\n      console.error('Form submission error:', error);\n      // Error is handled by parent component through errorMessage prop\n    }\n  };\n\n  // Get max-width classes based on prop\n  const maxWidthClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl',\n    '2xl': 'max-w-2xl',\n    full: 'max-w-full',\n  };\n\n  const FormContent = () => (\n    <Form {...form}>\n      <form\n        onSubmit={form.handleSubmit(handleSubmit)}\n        className={cn('space-y-6', className)}\n        data-testid={`${formName}-form`}\n        noValidate // We handle validation with Zod\n      >\n        {/* Error Alert */}\n        {errorMessage && (\n          <Alert variant=\"destructive\" data-testid={`${formName}-error-alert`}>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{errorMessage}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Success Alert */}\n        {successMessage && (\n          <Alert variant=\"default\" className=\"border-green-500 text-green-700\" data-testid={`${formName}-success-alert`}>\n            <CheckCircle className=\"h-4 w-4\" />\n            <AlertDescription>{successMessage}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Form Fields */}\n        <div className=\"space-y-4\">\n          {children}\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end pt-4\">\n          <StandardSubmitButton\n            isLoading={isLoading}\n            loadingText={loadingText}\n            formName={formName}\n            disabled={isLoading}\n          >\n            {submitText}\n          </StandardSubmitButton>\n        </div>\n      </form>\n    </Form>\n  );\n\n  if (!showCard) {\n    return (\n      <div className={cn('w-full mx-auto', maxWidthClasses[maxWidth])}>\n        <FormContent />\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('w-full mx-auto', maxWidthClasses[maxWidth])}>\n      <Card data-testid={`${formName}-card`}>\n        {(title || description) && (\n          <CardHeader>\n            {title && (\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">\n                {title}\n              </CardTitle>\n            )}\n            {description && (\n              <CardDescription className=\"text-gray-600\">\n                {description}\n              </CardDescription>\n            )}\n          </CardHeader>\n        )}\n        <CardContent>\n          <FormContent />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n/**\n * Hook for managing form state with standardized error handling\n */\ninterface UseStandardFormOptions {\n  resetOnSuccess?: boolean;\n  showSuccessMessage?: boolean;\n  successMessageDuration?: number;\n}\n\nexport function useStandardForm(options: UseStandardFormOptions = {}) {\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState<string>('');\n  const [successMessage, setSuccessMessage] = React.useState<string>('');\n\n  const {\n    resetOnSuccess = false,\n    showSuccessMessage = true,\n    successMessageDuration = 3000,\n  } = options;\n\n  // Clear success message after duration\n  React.useEffect(() => {\n    if (successMessage && successMessageDuration > 0) {\n      const timer = setTimeout(() => {\n        setSuccessMessage('');\n      }, successMessageDuration);\n      return () => clearTimeout(timer);\n    }\n  }, [successMessage, successMessageDuration]);\n\n  const handleSubmit = React.useCallback(\n    async <T extends FieldValues>(\n      submitFn: (data: T) => Promise<void>,\n      form: UseFormReturn<T>,\n      successMsg: string = 'Operation completed successfully'\n    ) => {\n      return async (data: T) => {\n        setIsLoading(true);\n        setErrorMessage('');\n        setSuccessMessage('');\n\n        try {\n          await submitFn(data);\n          \n          if (showSuccessMessage) {\n            setSuccessMessage(successMsg);\n          }\n          \n          if (resetOnSuccess) {\n            form.reset();\n          }\n        } catch (error: any) {\n          console.error('Form submission error:', error);\n          setErrorMessage(\n            error.response?.data?.message || \n            error.message || \n            'An unexpected error occurred. Please try again.'\n          );\n        } finally {\n          setIsLoading(false);\n        }\n      };\n    },\n    [resetOnSuccess, showSuccessMessage]\n  );\n\n  const clearMessages = React.useCallback(() => {\n    setErrorMessage('');\n    setSuccessMessage('');\n  }, []);\n\n  return {\n    isLoading,\n    errorMessage,\n    successMessage,\n    handleSubmit,\n    clearMessages,\n    setIsLoading,\n    setErrorMessage,\n    setSuccessMessage,\n  };\n}\n\n/**\n * Standardized form validation error display component\n */\ninterface FormValidationSummaryProps {\n  errors: Record<string, any>;\n  formName?: string;\n  className?: string;\n}\n\nexport function FormValidationSummary({\n  errors,\n  formName = 'form',\n  className = '',\n}: FormValidationSummaryProps) {\n  const errorEntries = Object.entries(errors).filter(([, error]) => error?.message);\n\n  if (errorEntries.length === 0) {\n    return null;\n  }\n\n  return (\n    <Alert variant=\"destructive\" className={className} data-testid={`${formName}-validation-summary`}>\n      <AlertCircle className=\"h-4 w-4\" />\n      <AlertDescription>\n        <div className=\"space-y-1\">\n          <p className=\"font-medium\">Please correct the following errors:</p>\n          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n            {errorEntries.map(([field, error]) => (\n              <li key={field}>\n                <strong>{field.charAt(0).toUpperCase() + field.slice(1)}:</strong> {error.message}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </AlertDescription>\n    </Alert>\n  );\n}"],"version":3}