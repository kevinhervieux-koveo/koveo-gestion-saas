25d34e645a63dab3f27319ce3a882819
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const zod_1 = require("zod");
// Test the invitation validation logic without database dependencies
(0, globals_1.describe)('Invitation Validation Logic', () => {
    const invitationSchema = zod_1.z.object({
        email: zod_1.z.string().email(),
        role: zod_1.z.enum(['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident']),
        status: zod_1.z.enum(['pending', 'accepted', 'expired', 'cancelled']),
        organizationId: zod_1.z.string().uuid().nullable(),
        buildingId: zod_1.z.string().uuid().nullable(),
        residenceId: zod_1.z.string().uuid().nullable(),
        expiresAt: zod_1.z.date(),
    });
    (0, globals_1.describe)('Email Validation', () => {
        (0, globals_1.it)('should accept valid email addresses', () => {
            const validEmails = [
                'test@example.com',
                'user.name@domain.co.uk',
                'admin+test@koveo.ca',
                'manager@organization.quebec',
            ];
            validEmails.forEach(email => {
                const result = invitationSchema.safeParse({
                    email,
                    role: 'tenant',
                    status: 'pending',
                    organizationId: null,
                    buildingId: null,
                    residenceId: null,
                    expiresAt: new Date(),
                });
                (0, globals_1.expect)(result.success).toBe(true);
            });
        });
        (0, globals_1.it)('should reject invalid email addresses', () => {
            const invalidEmails = [
                'notanemail',
                '@domain.com',
                'user@',
                'user..name@domain.com',
                '',
            ];
            invalidEmails.forEach(email => {
                const result = invitationSchema.safeParse({
                    email,
                    role: 'tenant',
                    status: 'pending',
                    organizationId: null,
                    buildingId: null,
                    residenceId: null,
                    expiresAt: new Date(),
                });
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Role Validation', () => {
        (0, globals_1.it)('should accept all valid role values', () => {
            const validRoles = ['admin', 'manager', 'tenant', 'resident', 'demo_manager', 'demo_tenant', 'demo_resident'];
            validRoles.forEach(role => {
                const result = invitationSchema.safeParse({
                    email: 'test@example.com',
                    role: role,
                    status: 'pending',
                    organizationId: null,
                    buildingId: null,
                    residenceId: null,
                    expiresAt: new Date(),
                });
                (0, globals_1.expect)(result.success).toBe(true);
            });
        });
        (0, globals_1.it)('should reject invalid role values', () => {
            const invalidRoles = ['superuser', 'guest', 'owner', '', 'ADMIN'];
            invalidRoles.forEach(role => {
                const result = invitationSchema.safeParse({
                    email: 'test@example.com',
                    role: role,
                    status: 'pending',
                    organizationId: null,
                    buildingId: null,
                    residenceId: null,
                    expiresAt: new Date(),
                });
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Status Validation', () => {
        (0, globals_1.it)('should accept all valid status values', () => {
            const validStatuses = ['pending', 'accepted', 'expired', 'cancelled'];
            validStatuses.forEach(status => {
                const result = invitationSchema.safeParse({
                    email: 'test@example.com',
                    role: 'tenant',
                    status: status,
                    organizationId: null,
                    buildingId: null,
                    residenceId: null,
                    expiresAt: new Date(),
                });
                (0, globals_1.expect)(result.success).toBe(true);
            });
        });
        (0, globals_1.it)('should reject invalid status values', () => {
            const invalidStatuses = ['active', 'inactive', 'processing', '', 'PENDING'];
            invalidStatuses.forEach(status => {
                const result = invitationSchema.safeParse({
                    email: 'test@example.com',
                    role: 'tenant',
                    status: status,
                    organizationId: null,
                    buildingId: null,
                    residenceId: null,
                    expiresAt: new Date(),
                });
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Optional Fields Validation', () => {
        (0, globals_1.it)('should allow null values for organizationId, buildingId, and residenceId', () => {
            const result = invitationSchema.safeParse({
                email: 'test@example.com',
                role: 'tenant',
                status: 'pending',
                organizationId: null,
                buildingId: null,
                residenceId: null,
                expiresAt: new Date(),
            });
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should accept valid UUIDs for optional fields', () => {
            const validUuid = '123e4567-e89b-12d3-a456-426614174000';
            const result = invitationSchema.safeParse({
                email: 'test@example.com',
                role: 'tenant',
                status: 'pending',
                organizationId: validUuid,
                buildingId: validUuid,
                residenceId: validUuid,
                expiresAt: new Date(),
            });
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should reject invalid UUIDs for optional fields', () => {
            const invalidIds = ['not-a-uuid', '123', '', 'invalid-format'];
            invalidIds.forEach(invalidId => {
                const result = invitationSchema.safeParse({
                    email: 'test@example.com',
                    role: 'tenant',
                    status: 'pending',
                    organizationId: invalidId,
                    buildingId: null,
                    residenceId: null,
                    expiresAt: new Date(),
                });
                (0, globals_1.expect)(result.success).toBe(false);
            });
        });
    });
    (0, globals_1.describe)('Date Validation', () => {
        (0, globals_1.it)('should accept valid future dates for expiresAt', () => {
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 7);
            const result = invitationSchema.safeParse({
                email: 'test@example.com',
                role: 'tenant',
                status: 'pending',
                organizationId: null,
                buildingId: null,
                residenceId: null,
                expiresAt: futureDate,
            });
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should accept valid past dates for expiresAt (for expired invitations)', () => {
            const pastDate = new Date();
            pastDate.setDate(pastDate.getDate() - 1);
            const result = invitationSchema.safeParse({
                email: 'test@example.com',
                role: 'tenant',
                status: 'expired',
                organizationId: null,
                buildingId: null,
                residenceId: null,
                expiresAt: pastDate,
            });
            (0, globals_1.expect)(result.success).toBe(true);
        });
    });
});
// Test role-based access logic
(0, globals_1.describe)('Invitation Role-Based Access Logic', () => {
    const hasAccessToInvitation = (userRole, userOrgIds, invitationOrgId) => {
        if (userRole === 'admin') {
            return true; // Admin can access all invitations
        }
        if (userRole === 'manager') {
            if (!invitationOrgId) {
                return false; // Manager cannot access invitations without organization
            }
            return userOrgIds.includes(invitationOrgId); // Manager can only access their organization's invitations
        }
        return false; // Other roles cannot access invitations
    };
    (0, globals_1.describe)('Admin Access', () => {
        (0, globals_1.it)('should allow admin to access any invitation', () => {
            const userRole = 'admin';
            const userOrgIds = ['org1'];
            (0, globals_1.expect)(hasAccessToInvitation(userRole, userOrgIds, 'org1')).toBe(true);
            (0, globals_1.expect)(hasAccessToInvitation(userRole, userOrgIds, 'org2')).toBe(true);
            (0, globals_1.expect)(hasAccessToInvitation(userRole, userOrgIds, null)).toBe(true);
        });
    });
    (0, globals_1.describe)('Manager Access', () => {
        (0, globals_1.it)('should allow manager to access invitations from their organizations', () => {
            const userRole = 'manager';
            const userOrgIds = ['org1', 'org2'];
            (0, globals_1.expect)(hasAccessToInvitation(userRole, userOrgIds, 'org1')).toBe(true);
            (0, globals_1.expect)(hasAccessToInvitation(userRole, userOrgIds, 'org2')).toBe(true);
        });
        (0, globals_1.it)('should deny manager access to invitations from other organizations', () => {
            const userRole = 'manager';
            const userOrgIds = ['org1'];
            (0, globals_1.expect)(hasAccessToInvitation(userRole, userOrgIds, 'org3')).toBe(false);
        });
        (0, globals_1.it)('should deny manager access to invitations without organization', () => {
            const userRole = 'manager';
            const userOrgIds = ['org1'];
            (0, globals_1.expect)(hasAccessToInvitation(userRole, userOrgIds, null)).toBe(false);
        });
    });
    (0, globals_1.describe)('Other Role Access', () => {
        (0, globals_1.it)('should deny access to tenants and residents', () => {
            const userOrgIds = ['org1'];
            (0, globals_1.expect)(hasAccessToInvitation('tenant', userOrgIds, 'org1')).toBe(false);
            (0, globals_1.expect)(hasAccessToInvitation('resident', userOrgIds, 'org1')).toBe(false);
        });
    });
});
// Test invitation expiration logic
(0, globals_1.describe)('Invitation Expiration Logic', () => {
    const isInvitationExpired = (expiresAt) => {
        return expiresAt < new Date();
    };
    (0, globals_1.it)('should correctly identify expired invitations', () => {
        const expiredDate = new Date();
        expiredDate.setDate(expiredDate.getDate() - 1); // Yesterday
        (0, globals_1.expect)(isInvitationExpired(expiredDate)).toBe(true);
    });
    (0, globals_1.it)('should correctly identify valid invitations', () => {
        const futureDate = new Date();
        futureDate.setDate(futureDate.getDate() + 7); // Next week
        (0, globals_1.expect)(isInvitationExpired(futureDate)).toBe(false);
    });
    (0, globals_1.it)('should handle edge case of expiration exactly now', () => {
        const now = new Date();
        // Invitation expires in 1 millisecond - should not be expired yet
        const almostExpired = new Date(now.getTime() + 1);
        (0, globals_1.expect)(isInvitationExpired(almostExpired)).toBe(false);
        // Invitation expired 1 millisecond ago - should be expired
        const justExpired = new Date(now.getTime() - 1);
        (0, globals_1.expect)(isInvitationExpired(justExpired)).toBe(true);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,