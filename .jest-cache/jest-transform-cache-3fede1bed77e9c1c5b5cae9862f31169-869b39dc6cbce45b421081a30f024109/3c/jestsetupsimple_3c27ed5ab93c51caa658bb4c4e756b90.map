{"file":"/home/runner/workspace/jest.setup.simple.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/jest.setup.simple.ts"],"sourcesContent":["// Simplified Jest setup file - minimal mocking to prevent hanging\nimport '@testing-library/jest-dom';\nimport React from 'react';\n\n// Fix Node.js environment issues for integration tests\nif (typeof globalThis.TextEncoder === 'undefined') {\n  const { TextEncoder, TextDecoder } = require('util');\n  globalThis.TextEncoder = TextEncoder;\n  globalThis.TextDecoder = TextDecoder;\n}\n\n// Set test environment variables\nprocess.env.TEST_TYPE = 'unit';\nprocess.env.USE_MOCK_DB = 'true';\nprocess.env.NODE_ENV = 'test';\n\n// Mock fetch for tests\nglobal.fetch = jest.fn().mockImplementation(() => \n  Promise.resolve({\n    ok: true,\n    status: 200,\n    json: async () => ({ success: true, data: [] }),\n    text: async () => '{\"success\": true, \"data\": []}'\n  })\n);\n\n// Mock basic browser APIs\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation((query) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Mock storage\nconst createMockStorage = () => ({\n  getItem: jest.fn(() => null),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn(() => null),\n});\n\nObject.defineProperty(window, 'sessionStorage', {\n  value: createMockStorage(),\n});\n\nObject.defineProperty(window, 'localStorage', {\n  value: createMockStorage(),\n});\n\n// Mock basic hooks with proper ES module export\njest.mock('@/hooks/use-language', () => {\n  const mockUseLanguage = () => ({\n    t: (key: string) => key,\n    language: 'en',\n    setLanguage: jest.fn(),\n    toggleLanguage: jest.fn(),\n  });\n  \n  return {\n    __esModule: true,\n    useLanguage: mockUseLanguage,\n    LanguageProvider: ({ children }: { children: React.ReactNode }) => children,\n    default: mockUseLanguage,\n  };\n});\n\njest.mock('@/hooks/use-toast', () => ({\n  __esModule: true,\n  useToast: () => ({\n    toast: jest.fn(),\n  }),\n}));\n\njest.mock('@/hooks/use-auth', () => ({\n  __esModule: true,\n  useAuth: () => ({\n    user: { id: '1', username: 'test', role: 'admin' },\n    isAuthenticated: true,\n    login: jest.fn(),\n    logout: jest.fn(),\n  }),\n}));\n\n// Mock useMobileMenu hook\njest.mock('@/hooks/use-mobile-menu', () => ({\n  __esModule: true,\n  useMobileMenu: () => ({\n    isMobileMenuOpen: false,\n    toggleMobileMenu: jest.fn(),\n  }),\n}));\n\n// Mock drizzle-zod to fix compatibility issues\njest.mock('drizzle-zod', () => ({\n  createInsertSchema: jest.fn().mockImplementation(() => ({\n    parse: jest.fn(),\n    safeParse: jest.fn().mockReturnValue({ success: true, data: {} }),\n    omit: jest.fn().mockReturnThis(),\n    extend: jest.fn().mockReturnThis(),\n  })),\n  createSelectSchema: jest.fn().mockImplementation(() => ({\n    parse: jest.fn(),\n    safeParse: jest.fn().mockReturnValue({ success: true, data: {} }),\n  })),\n}));\n\n// Mock database operations simply\njest.mock('drizzle-orm', () => ({\n  eq: jest.fn(),\n  and: jest.fn(),\n  or: jest.fn(),\n  sql: jest.fn(),\n  desc: jest.fn(),\n  asc: jest.fn(),\n}));\n\n// Mock database connection\nconst mockDb = {\n  query: jest.fn().mockResolvedValue([]),\n  insert: jest.fn(() => ({\n    values: jest.fn(() => ({\n      returning: jest.fn().mockResolvedValue([{ id: 'mock-id' }])\n    }))\n  })),\n  select: jest.fn(() => ({\n    from: jest.fn(() => Promise.resolve([]))\n  })),\n  update: jest.fn(() => ({\n    set: jest.fn(() => ({\n      where: jest.fn(() => Promise.resolve({ affectedRows: 1 }))\n    }))\n  })),\n  delete: jest.fn(() => ({\n    where: jest.fn(() => Promise.resolve({ affectedRows: 1 }))\n  })),\n};\n\njest.mock('./server/db', () => ({\n  db: mockDb,\n  default: mockDb\n}));\n\n// Mock bcrypt\njest.mock('bcryptjs', () => ({\n  hash: jest.fn().mockResolvedValue('mock-hashed-password'),\n  compare: jest.fn().mockResolvedValue(true),\n}));\n\n// Mock query client\njest.mock('@/lib/queryClient', () => ({\n  apiRequest: jest.fn().mockResolvedValue({ success: true, data: [] }),\n  queryClient: {\n    invalidateQueries: jest.fn(),\n  },\n}));\n\n// Note: Server API route mocks are handled via moduleNameMapper in Jest config"],"version":3}