{"file":"/home/runner/workspace/tests/unit/auto-forwarding-back-button-logic.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/auto-forwarding-back-button-logic.test.ts"],"sourcesContent":["/**\n * Auto-forwarding and Back Button Logic Tests\n * Tests the smart navigation logic for auto-forwarding and back button visibility\n */\n\nimport { describe, test, expect } from '@jest/globals';\n\n// Mock organization, building, and residence data types\ninterface Organization {\n  id: string;\n  name: string;\n}\n\ninterface Building {\n  id: string;\n  name: string;\n  organizationId?: string;\n}\n\ninterface Residence {\n  id: string;\n  unitNumber: string;\n  buildingId: string;\n}\n\ndescribe('Auto-forwarding Logic', () => {\n  describe('Single Option Auto-forwarding', () => {\n    test('should auto-forward when user has single organization', () => {\n      const organizations: Organization[] = [\n        { id: 'org-1', name: 'Organization A' }\n      ];\n      const currentLevel = 'organization';\n      const organizationId = null;\n      \n      const shouldAutoForward = \n        currentLevel === 'organization' && \n        organizations.length === 1 && \n        !organizationId;\n      \n      expect(shouldAutoForward).toBe(true);\n    });\n\n    test('should auto-forward when user has single building', () => {\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A' }\n      ];\n      const currentLevel = 'building';\n      const buildingId = null;\n      \n      const shouldAutoForward = \n        currentLevel === 'building' && \n        buildings.length === 1 && \n        !buildingId;\n      \n      expect(shouldAutoForward).toBe(true);\n    });\n\n    test('should auto-forward when user has single residence', () => {\n      const residences: Residence[] = [\n        { id: 'residence-1', unitNumber: '101', buildingId: 'building-1' }\n      ];\n      const currentLevel = 'residence';\n      const residenceId = null;\n      \n      const shouldAutoForward = \n        currentLevel === 'residence' && \n        residences.length === 1 && \n        !residenceId;\n      \n      expect(shouldAutoForward).toBe(true);\n    });\n  });\n\n  describe('Multiple Options - No Auto-forwarding', () => {\n    test('should NOT auto-forward when user has multiple organizations', () => {\n      const organizations: Organization[] = [\n        { id: 'org-1', name: 'Organization A' },\n        { id: 'org-2', name: 'Organization B' }\n      ];\n      const currentLevel = 'organization';\n      const organizationId = null;\n      \n      const shouldAutoForward = \n        currentLevel === 'organization' && \n        organizations.length === 1 && \n        !organizationId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n\n    test('should NOT auto-forward when user has multiple buildings', () => {\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A' },\n        { id: 'building-2', name: 'Building B' }\n      ];\n      const currentLevel = 'building';\n      const buildingId = null;\n      \n      const shouldAutoForward = \n        currentLevel === 'building' && \n        buildings.length === 1 && \n        !buildingId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n\n    test('should NOT auto-forward when user has multiple residences', () => {\n      const residences: Residence[] = [\n        { id: 'residence-1', unitNumber: '101', buildingId: 'building-1' },\n        { id: 'residence-2', unitNumber: '102', buildingId: 'building-1' }\n      ];\n      const currentLevel = 'residence';\n      const residenceId = null;\n      \n      const shouldAutoForward = \n        currentLevel === 'residence' && \n        residences.length === 1 && \n        !residenceId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n  });\n\n  describe('Already Selected - No Auto-forwarding', () => {\n    test('should NOT auto-forward when organization already selected', () => {\n      const organizations: Organization[] = [\n        { id: 'org-1', name: 'Organization A' }\n      ];\n      const currentLevel = 'organization';\n      const organizationId = 'org-1'; // Already selected\n      \n      const shouldAutoForward = \n        currentLevel === 'organization' && \n        organizations.length === 1 && \n        !organizationId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n\n    test('should NOT auto-forward when building already selected', () => {\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A' }\n      ];\n      const currentLevel = 'building';\n      const buildingId = 'building-1'; // Already selected\n      \n      const shouldAutoForward = \n        currentLevel === 'building' && \n        buildings.length === 1 && \n        !buildingId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n\n    test('should NOT auto-forward when residence already selected', () => {\n      const residences: Residence[] = [\n        { id: 'residence-1', unitNumber: '101', buildingId: 'building-1' }\n      ];\n      const currentLevel = 'residence';\n      const residenceId = 'residence-1'; // Already selected\n      \n      const shouldAutoForward = \n        currentLevel === 'residence' && \n        residences.length === 1 && \n        !residenceId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n  });\n\n  describe('Wrong Level - No Auto-forwarding', () => {\n    test('should NOT auto-forward when at different level than expected', () => {\n      const organizations: Organization[] = [\n        { id: 'org-1', name: 'Organization A' }\n      ];\n      const currentLevel = 'building'; // Different level\n      const organizationId = null;\n      \n      const shouldAutoForward = \n        currentLevel === 'organization' && \n        organizations.length === 1 && \n        !organizationId;\n      \n      expect(shouldAutoForward).toBe(false);\n    });\n  });\n});\n\ndescribe('Back Button Logic', () => {\n  describe('Single-level Hierarchy (Residents)', () => {\n    test('should show back button for single-level hierarchy with multiple options', () => {\n      const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };\n      const buildingId = 'building-1';\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A' },\n        { id: 'building-2', name: 'Building B' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        hierarchyConfig.hierarchyLength === 1 && \n        !!buildingId && \n        buildings.length > 1;\n      \n      expect(shouldShowBackButton).toBe(true);\n    });\n\n    test('should NOT show back button for single-level hierarchy with single option', () => {\n      const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };\n      const buildingId = 'building-1';\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        hierarchyConfig.hierarchyLength === 1 && \n        !!buildingId && \n        buildings.length > 1;\n      \n      expect(shouldShowBackButton).toBe(false);\n    });\n\n    test('should NOT show back button when no selection made', () => {\n      const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };\n      const buildingId = null;\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A' },\n        { id: 'building-2', name: 'Building B' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        hierarchyConfig.hierarchyLength === 1 && \n        !!buildingId && \n        buildings.length > 1;\n      \n      expect(shouldShowBackButton).toBe(false);\n    });\n\n    test('should NOT show back button for non-building single-level hierarchy', () => {\n      const hierarchyConfig = { hierarchy: ['residence'], hierarchyLength: 1 };\n      const buildingId = 'building-1';\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A' },\n        { id: 'building-2', name: 'Building B' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        hierarchyConfig.hierarchyLength === 1 && \n        !!buildingId && \n        buildings.length > 1;\n      \n      expect(shouldShowBackButton).toBe(false);\n    });\n  });\n\n  describe('Multi-level Hierarchy (Managers)', () => {\n    test('should show back button for multi-level with multiple buildings', () => {\n      const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };\n      const buildingId = 'building-1';\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A', organizationId: 'org-1' },\n        { id: 'building-2', name: 'Building B', organizationId: 'org-1' },\n        { id: 'building-3', name: 'Building C', organizationId: 'org-1' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        buildings.length > 1 && \n        !!buildingId;\n      \n      expect(shouldShowBackButton).toBe(true);\n    });\n\n    test('should show back button for multi-level with multiple organizations', () => {\n      const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };\n      const organizationId = 'org-1';\n      const organizations: Organization[] = [\n        { id: 'org-1', name: 'Organization A' },\n        { id: 'org-2', name: 'Organization B' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('organization') && \n        organizations.length > 1 && \n        !!organizationId;\n      \n      expect(shouldShowBackButton).toBe(true);\n    });\n\n    test('should NOT show back button for multi-level with single building', () => {\n      const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };\n      const buildingId = 'building-1';\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A', organizationId: 'org-1' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        buildings.length > 1 && \n        !!buildingId;\n      \n      expect(shouldShowBackButton).toBe(false);\n    });\n  });\n\n  describe('Complex Hierarchy Scenarios', () => {\n    test('should show back button at residence level when multiple buildings exist', () => {\n      const hierarchyConfig = { hierarchy: ['organization', 'building', 'residence'], hierarchyLength: 3 };\n      const buildingId = 'building-1';\n      const residenceId = 'residence-1';\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A', organizationId: 'org-1' },\n        { id: 'building-2', name: 'Building B', organizationId: 'org-1' }\n      ];\n      \n      const shouldShowBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        buildings.length > 1 && \n        !!buildingId;\n      \n      expect(shouldShowBackButton).toBe(true);\n    });\n\n    test('should prioritize organization back button when multiple orgs and buildings exist', () => {\n      const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };\n      const organizationId = 'org-1';\n      const buildingId = null; // At organization level\n      const organizations: Organization[] = [\n        { id: 'org-1', name: 'Organization A' },\n        { id: 'org-2', name: 'Organization B' }\n      ];\n      const buildings: Building[] = [\n        { id: 'building-1', name: 'Building A', organizationId: 'org-1' },\n        { id: 'building-2', name: 'Building B', organizationId: 'org-2' }\n      ];\n      \n      // Should prioritize organization back button\n      const shouldShowOrgBackButton = \n        hierarchyConfig.hierarchy.includes('organization') && \n        organizations.length > 1 && \n        !!organizationId;\n        \n      const shouldShowBuildingBackButton = \n        hierarchyConfig.hierarchy.includes('building') && \n        buildings.length > 1 && \n        !!buildingId;\n      \n      expect(shouldShowOrgBackButton).toBe(true);\n      expect(shouldShowBuildingBackButton).toBe(false); // No buildingId\n    });\n  });\n\n  describe('Smart Back Button Behavior', () => {\n    test('should determine correct back button label for building level', () => {\n      const currentLevel = 'complete'; // User is viewing details\n      const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };\n      const buildingId = 'building-1';\n      \n      const backButtonConfig = {\n        showBackButton: hierarchyConfig.hierarchyLength === 1 && !!buildingId,\n        backButtonLabel: 'Building'\n      };\n      \n      expect(backButtonConfig.showBackButton).toBe(true);\n      expect(backButtonConfig.backButtonLabel).toBe('Building');\n    });\n\n    test('should determine correct back button label for organization level', () => {\n      const hierarchyConfig = { hierarchy: ['organization', 'building'], hierarchyLength: 2 };\n      const organizationId = 'org-1';\n      \n      const backButtonConfig = {\n        showBackButton: !!organizationId,\n        backButtonLabel: 'Organization'\n      };\n      \n      expect(backButtonConfig.showBackButton).toBe(true);\n      expect(backButtonConfig.backButtonLabel).toBe('Organization');\n    });\n\n    test('should not show back button when no previous level exists', () => {\n      const hierarchyConfig = { hierarchy: ['building'], hierarchyLength: 1 };\n      const buildingId = null; // At selection level\n      \n      const backButtonConfig = {\n        showBackButton: hierarchyConfig.hierarchyLength === 1 && !!buildingId,\n        backButtonLabel: undefined\n      };\n      \n      expect(backButtonConfig.showBackButton).toBe(false);\n      expect(backButtonConfig.backButtonLabel).toBe(undefined);\n    });\n  });\n});"],"version":3}