{"file":"/home/runner/workspace/tests/unit/forms/demand-submission-form.test.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/forms/demand-submission-form.test.tsx"],"sourcesContent":["/**\n * @file Demand Submission Form Frontend Tests\n * @description Tests for the demand submission form component and validation\n */\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport '@testing-library/jest-dom';\n\n// Mock the hooks and utils\njest.mock('@/hooks/use-language', () => ({\n  useLanguage: () => ({\n    t: (key: string) => key,\n  }),\n}));\n\njest.mock('@/hooks/use-toast', () => ({\n  useToast: () => ({\n    toast: jest.fn(),\n  }),\n}));\n\njest.mock('@/lib/toastUtils', () => ({\n  toastUtils: {\n    createSuccess: jest.fn(),\n    createError: jest.fn(),\n  },\n}));\n\n// Mock fetch with proper typing\nconst mockFetch = jest.fn() as jest.MockedFunction<typeof fetch>;\nglobal.fetch = mockFetch;\n\n// Helper to create proper Response mock\nconst createMockResponse = (data: any, ok: boolean = true, status: number = 200): Response => ({\n  ok,\n  status,\n  json: () => Promise.resolve(data),\n  headers: new Headers(),\n  redirected: false,\n  statusText: ok ? 'OK' : 'Error',\n  type: 'basic' as ResponseType,\n  url: '',\n  clone: jest.fn() as any,\n  body: null,\n  bodyUsed: false,\n  arrayBuffer: jest.fn() as any,\n  blob: jest.fn() as any,\n  formData: jest.fn() as any,\n  text: jest.fn() as any,\n} as Response);\n\n// Mock queryClient\nconst createMockQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n\n// Mock component data\nconst mockBuildings = [\n  { id: 'building-1', name: 'Test Building 1' },\n  { id: 'building-2', name: 'Test Building 2' },\n];\n\nconst mockUser = {\n  id: 'user-1',\n  role: 'resident',\n  email: 'test@example.com',\n  firstName: 'Test',\n  lastName: 'User',\n};\n\n// We'll create a simplified test component that includes the form logic\nconst TestDemandForm = () => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const handleSubmit = async (data: any) => {\n    // Client-side validation\n    if (!data.type || data.type === '') {\n      return; // Don't submit if no type selected\n    }\n    \n    if (!data.description || typeof data.description !== 'string' || data.description.trim().length < 10) {\n      return; // Don't submit if description is too short\n    }\n    \n    setIsSubmitting(true);\n    try {\n      const response = await fetch('/api/demands', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...data,\n          status: 'submitted',\n          buildingId: data.buildingId || undefined,\n          residenceId: data.residenceId || undefined,\n          assignationBuildingId: data.assignationBuildingId || undefined,\n          assignationResidenceId: data.assignationResidenceId || undefined,\n        }),\n      });\n\n      if (!response || !response.ok) {\n        throw new Error('Failed to create demand');\n      }\n\n      setIsOpen(false);\n    } catch (error) {\n      console.error('Submission error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div data-testid=\"demand-form-container\">\n      {isOpen && (\n        <form\n          data-testid=\"demand-form\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target as HTMLFormElement);\n            const data = {\n              type: formData.get('type'),\n              buildingId: formData.get('buildingId'),\n              description: formData.get('description'),\n            };\n            handleSubmit(data);\n          }}\n        >\n          <div>\n            <label htmlFor=\"type\">Type</label>\n            <select data-testid=\"input-type\" name=\"type\" required>\n              <option value=\"\">Select Type</option>\n              <option value=\"maintenance\">Maintenance</option>\n              <option value=\"complaint\">Complaint</option>\n              <option value=\"information\">Information</option>\n              <option value=\"other\">Other</option>\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"buildingId\">Building</label>\n            <select data-testid=\"input-building\" name=\"buildingId\">\n              <option value=\"\">Select Building</option>\n              {mockBuildings.map((building) => (\n                <option key={building.id} value={building.id}>\n                  {building.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div>\n            <label htmlFor=\"description\">Description</label>\n            <textarea\n              data-testid=\"input-description\"\n              name=\"description\"\n              placeholder=\"Describe your request in detail\"\n              required\n              minLength={10}\n              maxLength={2000}\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            data-testid=\"button-submit-demand\"\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? 'Creating...' : 'Create Demand'}\n          </button>\n        </form>\n      )}\n      {!isOpen && <div data-testid=\"success-message\">Demand created successfully!</div>}\n    </div>\n  );\n};\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = createMockQueryClient();\n  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>;\n};\n\ndescribe('Demand Submission Form Tests', () => {\n  // Mock console.error to avoid test output pollution\n  const originalConsoleError = console.error;\n  \n  beforeEach(() => {\n    mockFetch.mockClear();\n    // Suppress console.error during tests\n    console.error = jest.fn();\n  });\n  \n  afterAll(() => {\n    // Restore console.error after tests\n    console.error = originalConsoleError;\n  });\n\n  describe('Form Rendering', () => {\n    it('should render all required form fields', () => {\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      expect(screen.getByTestId('demand-form')).toBeInTheDocument();\n      expect(screen.getByTestId('input-type')).toBeInTheDocument();\n      expect(screen.getByTestId('input-building')).toBeInTheDocument();\n      expect(screen.getByTestId('input-description')).toBeInTheDocument();\n      expect(screen.getByTestId('button-submit-demand')).toBeInTheDocument();\n    });\n\n    it('should render all demand type options', () => {\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      expect(typeSelect).toHaveTextContent('Maintenance');\n      expect(typeSelect).toHaveTextContent('Complaint');\n      expect(typeSelect).toHaveTextContent('Information');\n      expect(typeSelect).toHaveTextContent('Other');\n    });\n\n    it('should render building options', () => {\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const buildingSelect = screen.getByTestId('input-building');\n      expect(buildingSelect).toHaveTextContent('Test Building 1');\n      expect(buildingSelect).toHaveTextContent('Test Building 2');\n    });\n  });\n\n  describe('Form Validation', () => {\n    it('should require type selection', async () => {\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const submitButton = screen.getByTestId('button-submit-demand');\n      const description = screen.getByTestId('input-description');\n\n      await userEvent.type(description, 'Test description that is long enough');\n      await userEvent.click(submitButton);\n\n      // Form should not submit without type\n      expect(mockFetch).not.toHaveBeenCalled();\n    });\n\n    it('should require description', async () => {\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.click(submitButton);\n\n      // Form should not submit without description\n      expect(mockFetch).not.toHaveBeenCalled();\n    });\n\n    it('should validate minimum description length', async () => {\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.type(description, 'Short'); // Less than 10 characters\n      await userEvent.click(submitButton);\n\n      // Form should not submit with short description\n      expect(mockFetch).not.toHaveBeenCalled();\n    });\n\n    it('should accept valid form data', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'demand-1', status: 'submitted' }),\n      });\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const buildingSelect = screen.getByTestId('input-building');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.selectOptions(buildingSelect, 'building-1');\n      await userEvent.type(description, 'This is a valid description that is long enough');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          type: 'maintenance',\n          buildingId: 'building-1',\n          description: 'This is a valid description that is long enough',\n          status: 'submitted',\n          residenceId: undefined,\n          assignationBuildingId: undefined,\n          assignationResidenceId: undefined,\n        }),\n      });\n    });\n  });\n\n  describe('Form Submission', () => {\n    it('should handle successful submission', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'demand-1', status: 'submitted' }),\n      });\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'complaint');\n      await userEvent.type(description, 'This is a valid complaint description');\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('success-message')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle submission with optional building field', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'demand-1', status: 'submitted' }),\n      });\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'information');\n      await userEvent.type(description, 'Information request without specific building');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          type: 'information',\n          buildingId: undefined,\n          description: 'Information request without specific building',\n          status: 'submitted',\n          residenceId: undefined,\n          assignationBuildingId: undefined,\n          assignationResidenceId: undefined,\n        }),\n      });\n    });\n\n    it('should show loading state during submission', async () => {\n      mockFetch.mockImplementation(\n        () =>\n          new Promise((resolve) =>\n            setTimeout(() => resolve({ ok: true, json: async () => ({}) }), 100)\n          )\n      );\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'other');\n      await userEvent.type(description, 'Test description for loading state');\n      await userEvent.click(submitButton);\n\n      expect(submitButton).toHaveTextContent('Creating...');\n      expect(submitButton).toBeDisabled();\n\n      await waitFor(() => {\n        expect(screen.getByTestId('success-message')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle submission errors gracefully', async () => {\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.type(description, 'Test description for error handling');\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        // Form should still be visible after error\n        expect(screen.getByTestId('demand-form')).toBeInTheDocument();\n        expect(submitButton).not.toBeDisabled();\n      });\n    });\n\n    it('should handle server validation errors', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({ message: 'Invalid demand data' }),\n      });\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.type(description, 'Test description for server error');\n      await userEvent.click(submitButton);\n\n      await waitFor(() => {\n        // Form should still be visible after server error\n        expect(screen.getByTestId('demand-form')).toBeInTheDocument();\n        expect(submitButton).not.toBeDisabled();\n      });\n    });\n  });\n\n  describe('Special Characters and Internationalization', () => {\n    it('should handle French characters in description', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'demand-1', status: 'submitted' }),\n      });\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.type(description, 'Réparation nécessaire avec caractères spéciaux: éàùç!');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          type: 'maintenance',\n          buildingId: undefined,\n          description: 'Réparation nécessaire avec caractères spéciaux: éàùç!',\n          status: 'submitted',\n          residenceId: undefined,\n          assignationBuildingId: undefined,\n          assignationResidenceId: undefined,\n        }),\n      });\n    });\n\n    it('should handle emojis and special symbols in description', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'demand-1', status: 'submitted' }),\n      });\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.type(description, 'Description with emoji 🏠 and symbols @#$%^&*()');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/demands', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          type: 'maintenance',\n          buildingId: undefined,\n          description: 'Description with emoji 🏠 and symbols @#$%^&*()',\n          status: 'submitted',\n          residenceId: undefined,\n          assignationBuildingId: undefined,\n          assignationResidenceId: undefined,\n        }),\n      });\n    });\n  });\n\n  describe('Form Field Behavior', () => {\n    it('should properly handle empty string conversion to undefined', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'demand-1', status: 'submitted' }),\n      });\n\n      render(\n        <TestWrapper>\n          <TestDemandForm />\n        </TestWrapper>\n      );\n\n      const typeSelect = screen.getByTestId('input-type');\n      const buildingSelect = screen.getByTestId('input-building');\n      const description = screen.getByTestId('input-description');\n      const submitButton = screen.getByTestId('button-submit-demand');\n\n      await userEvent.selectOptions(typeSelect, 'maintenance');\n      await userEvent.selectOptions(buildingSelect, ''); // Select empty option\n      await userEvent.type(description, 'Test description with empty building selection');\n      await userEvent.click(submitButton);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/demands',\n        expect.objectContaining({\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          // buildingId: undefined gets omitted from JSON, so we check that it's not included or is null\n          body: expect.not.stringContaining('\"buildingId\":\"'),\n        })\n      );\n    });\n\n    it('should allow all demand types', async () => {\n      mockFetch.mockResolvedValue({\n        ok: true,\n        json: async () => ({ id: 'demand-1', status: 'submitted' }),\n      });\n\n      const demandTypes = ['maintenance', 'complaint', 'information', 'other'];\n\n      for (const type of demandTypes) {\n        render(\n          <TestWrapper>\n            <TestDemandForm />\n          </TestWrapper>\n        );\n\n        const typeSelect = screen.getByTestId('input-type');\n        const description = screen.getByTestId('input-description');\n        const submitButton = screen.getByTestId('button-submit-demand');\n\n        await userEvent.selectOptions(typeSelect, type);\n        await userEvent.type(description, `Test ${type} description with sufficient length`);\n        await userEvent.click(submitButton);\n\n        expect(mockFetch).toHaveBeenCalledWith(\n          '/api/demands',\n          expect.objectContaining({\n            body: expect.stringContaining(`\"type\":\"${type}\"`),\n          })\n        );\n\n        // Clean up for next iteration\n        mockFetch.mockClear();\n      }\n    });\n  });\n});"],"version":3}