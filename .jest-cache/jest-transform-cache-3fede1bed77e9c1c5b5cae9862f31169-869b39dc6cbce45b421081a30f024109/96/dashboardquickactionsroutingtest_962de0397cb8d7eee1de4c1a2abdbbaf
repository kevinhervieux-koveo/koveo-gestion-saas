f1d3682800923eda00c53a752fd1de2c
"use strict";
/**
 * Dashboard Quick Actions Routing Validation Test
 *
 * This test validates that all cards in the /dashboard/quick-actions page
 * have correct routing paths that match the routes defined in App.tsx.
 *
 * IDENTIFIED ROUTING ISSUES:
 * - Tenant/Resident Maintenance cards point to '/residents/maintenance' but route is '/residents/demands'
 * - Tenant/Resident Documents cards point to '/residents/documents' but no such generic route exists
 * - Some cards may point to non-existent routes causing 404 errors
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
(0, globals_1.describe)('Dashboard Quick Actions Routing Validation', () => {
    /**
     * This test documents the expected vs actual routing behavior
     * for dashboard cards based on code analysis of dashboard.tsx and App.tsx
     */
    (0, globals_1.describe)('Admin Card Routes', () => {
        (0, globals_1.it)('should validate admin card routes exist in App.tsx', () => {
            const adminRoutes = [
                { cardName: 'System Management', expectedPath: '/admin/organizations', exists: true },
                { cardName: 'Organization Overview', expectedPath: '/admin/organizations', exists: true },
                { cardName: 'User Management', expectedPath: '/admin/organizations', exists: true }
            ];
            adminRoutes.forEach(route => {
                (0, globals_1.expect)(route.exists).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Manager Card Routes', () => {
        (0, globals_1.it)('should validate manager card routes exist in App.tsx', () => {
            const managerRoutes = [
                { cardName: 'Buildings', expectedPath: '/manager/buildings', exists: true },
                { cardName: 'Financial Reports', expectedPath: '/manager/budget', exists: true },
                { cardName: 'Maintenance', expectedPath: '/manager/demands', exists: true }
            ];
            managerRoutes.forEach(route => {
                (0, globals_1.expect)(route.exists).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Tenant Card Routes - POTENTIAL ISSUES', () => {
        (0, globals_1.it)('should identify tenant card routing problems', () => {
            const tenantRoutes = [
                {
                    cardName: 'My Residence',
                    dashboardPath: '/residents/residence',
                    appRoute: '/residents/residence',
                    exists: true,
                    issue: false
                },
                {
                    cardName: 'Maintenance Requests',
                    dashboardPath: '/residents/maintenance',
                    appRoute: '/residents/demands',
                    exists: false,
                    issue: true,
                    solution: 'Change dashboard.tsx to use /residents/demands instead of /residents/maintenance'
                },
                {
                    cardName: 'Documents',
                    dashboardPath: '/residents/documents',
                    appRoute: 'No generic route - use /residents/residence/documents',
                    exists: false,
                    issue: true,
                    solution: 'Change dashboard.tsx to use /residents/residence/documents or similar'
                }
            ];
            const problemRoutes = tenantRoutes.filter(route => route.issue);
            (0, globals_1.expect)(problemRoutes).toHaveLength(2);
            // Log the issues for visibility
            console.warn('TENANT ROUTING ISSUES:');
            problemRoutes.forEach(route => {
                console.warn(`- ${route.cardName}: ${route.dashboardPath} -> ${route.solution}`);
            });
        });
    });
    (0, globals_1.describe)('Resident Card Routes - POTENTIAL ISSUES', () => {
        (0, globals_1.it)('should identify resident card routing problems', () => {
            const residentRoutes = [
                {
                    cardName: 'My Home',
                    dashboardPath: '/residents/dashboard',
                    appRoute: '/residents/dashboard',
                    exists: true,
                    issue: false
                },
                {
                    cardName: 'Maintenance Requests',
                    dashboardPath: '/residents/maintenance',
                    appRoute: '/residents/demands',
                    exists: false,
                    issue: true,
                    solution: 'Change dashboard.tsx to use /residents/demands instead of /residents/maintenance'
                },
                {
                    cardName: 'Documents',
                    dashboardPath: '/residents/documents',
                    appRoute: 'No generic route - use /residents/residence/documents or /residents/building/documents',
                    exists: false,
                    issue: true,
                    solution: 'Change dashboard.tsx to use specific document routes'
                }
            ];
            const problemRoutes = residentRoutes.filter(route => route.issue);
            (0, globals_1.expect)(problemRoutes).toHaveLength(2);
            // Log the issues for visibility
            console.warn('RESIDENT ROUTING ISSUES:');
            problemRoutes.forEach(route => {
                console.warn(`- ${route.cardName}: ${route.dashboardPath} -> ${route.solution}`);
            });
        });
    });
    (0, globals_1.describe)('Route Coverage Analysis', () => {
        (0, globals_1.it)('should analyze available resident routes vs dashboard card paths', () => {
            const availableResidentRoutes = [
                '/residents/residence',
                '/residents/residence/documents',
                '/residents/residences/:residenceId/documents',
                '/residents/building',
                '/residents/building/documents',
                '/residents/buildings/:buildingId/documents',
                '/residents/demands',
                '/residents/dashboard'
            ];
            const dashboardCardPaths = [
                '/residents/residence', // ✅ EXISTS
                '/residents/maintenance', // ❌ SHOULD BE /residents/demands
                '/residents/documents', // ❌ SHOULD BE SPECIFIC DOCUMENT ROUTE
                '/residents/dashboard' // ✅ EXISTS
            ];
            const missingRoutes = dashboardCardPaths.filter(cardPath => !availableResidentRoutes.includes(cardPath));
            (0, globals_1.expect)(missingRoutes).toEqual([
                '/residents/maintenance',
                '/residents/documents'
            ]);
        });
    });
    (0, globals_1.describe)('Routing Fix Recommendations', () => {
        (0, globals_1.it)('should provide specific fixes for broken routes', () => {
            const fixes = [
                {
                    file: 'client/src/pages/dashboard.tsx',
                    line: 'Around line 117 and 147',
                    currentCode: "path: '/residents/maintenance'",
                    fixedCode: "path: '/residents/demands'",
                    reason: 'Maintenance requests route is /residents/demands, not /residents/maintenance'
                },
                {
                    file: 'client/src/pages/dashboard.tsx',
                    line: 'Around line 125 and 155',
                    currentCode: "path: '/residents/documents'",
                    fixedCode: "path: '/documents' or '/residents/residence/documents'",
                    reason: 'Generic /residents/documents route does not exist. Use main documents or specific residence documents.'
                }
            ];
            (0, globals_1.expect)(fixes).toHaveLength(2);
            // Output fix recommendations
            console.log('\\n🔧 RECOMMENDED FIXES:');
            fixes.forEach(fix => {
                console.log(`File: ${fix.file}`);
                console.log(`Line: ${fix.line}`);
                console.log(`Change: ${fix.currentCode} → ${fix.fixedCode}`);
                console.log(`Reason: ${fix.reason}\\n`);
            });
        });
    });
    (0, globals_1.describe)('Working Routes Validation', () => {
        (0, globals_1.it)('should confirm which routes are correctly configured', () => {
            const workingRoutes = [
                // Admin routes (all point to same place - could be improved but functional)
                '/admin/organizations',
                // Manager routes  
                '/manager/buildings',
                '/manager/budget',
                '/manager/demands',
                // Resident routes that work
                '/residents/residence',
                '/residents/dashboard',
                '/residents/demands' // This is the correct maintenance route
            ];
            // All these routes should be properly configured
            workingRoutes.forEach(route => {
                (0, globals_1.expect)(route).toBeTruthy();
                (0, globals_1.expect)(route.startsWith('/')).toBe(true);
            });
            console.log('\\n✅ WORKING ROUTES:', workingRoutes.join('\\n   '));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0cy91bml0L2Rhc2hib2FyZC1xdWljay1hY3Rpb25zLXJvdXRpbmcudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7R0FVRzs7QUFFSCwyQ0FBcUQ7QUFFckQsSUFBQSxrQkFBUSxFQUFDLDRDQUE0QyxFQUFFLEdBQUcsRUFBRTtJQUMxRDs7O09BR0c7SUFFSCxJQUFBLGtCQUFRLEVBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLElBQUEsWUFBRSxFQUFDLG9EQUFvRCxFQUFFLEdBQUcsRUFBRTtZQUM1RCxNQUFNLFdBQVcsR0FBRztnQkFDbEIsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Z0JBQ3JGLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFLFlBQVksRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUN6RixFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTthQUNwRixDQUFDO1lBRUYsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDMUIsSUFBQSxnQkFBTSxFQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxJQUFBLFlBQUUsRUFBQyxzREFBc0QsRUFBRSxHQUFHLEVBQUU7WUFDOUQsTUFBTSxhQUFhLEdBQUc7Z0JBQ3BCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFDM0UsRUFBRSxR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QUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztZQUMxQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO1FBQ3pDLElBQUEsWUFBRSxFQUFDLHNEQUFzRCxFQUFFLEdBQUcsRUFBRTtZQUM5RCxNQUFNLGFBQWEsR0FBRztnQkFDcEIsNEVBQTRFO2dCQUM1RSxzQkFBc0I7Z0JBRXRCLG1CQUFtQjtnQkFDbkIsb0JBQW9CO2dCQUNwQixpQkFBaUI7Z0JBQ2pCLGtCQUFrQjtnQkFFbEIsNEJBQTRCO2dCQUM1QixzQkFBc0I7Z0JBQ3RCLHNCQUFzQjtnQkFDdEIsb0JBQW9CLENBQUMsd0NBQXdDO2FBQzlELENBQUM7WUFFRixpREFBaUQ7WUFDakQsYUFBYSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDNUIsSUFBQSxnQkFBTSxFQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUMzQixJQUFBLGdCQUFNLEVBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQztZQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3Rlc3RzL3VuaXQvZGFzaGJvYXJkLXF1aWNrLWFjdGlvbnMtcm91dGluZy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGFzaGJvYXJkIFF1aWNrIEFjdGlvbnMgUm91dGluZyBWYWxpZGF0aW9uIFRlc3RcbiAqIFxuICogVGhpcyB0ZXN0IHZhbGlkYXRlcyB0aGF0IGFsbCBjYXJkcyBpbiB0aGUgL2Rhc2hib2FyZC9xdWljay1hY3Rpb25zIHBhZ2VcbiAqIGhhdmUgY29ycmVjdCByb3V0aW5nIHBhdGhzIHRoYXQgbWF0Y2ggdGhlIHJvdXRlcyBkZWZpbmVkIGluIEFwcC50c3guXG4gKiBcbiAqIElERU5USUZJRUQgUk9VVElORyBJU1NVRVM6XG4gKiAtIFRlbmFudC9SZXNpZGVudCBNYWludGVuYW5jZSBjYXJkcyBwb2ludCB0byAnL3Jlc2lkZW50cy9tYWludGVuYW5jZScgYnV0IHJvdXRlIGlzICcvcmVzaWRlbnRzL2RlbWFuZHMnXG4gKiAtIFRlbmFudC9SZXNpZGVudCBEb2N1bWVudHMgY2FyZHMgcG9pbnQgdG8gJy9yZXNpZGVudHMvZG9jdW1lbnRzJyBidXQgbm8gc3VjaCBnZW5lcmljIHJvdXRlIGV4aXN0c1xuICogLSBTb21lIGNhcmRzIG1heSBwb2ludCB0byBub24tZXhpc3RlbnQgcm91dGVzIGNhdXNpbmcgNDA0IGVycm9yc1xuICovXG5cbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5cbmRlc2NyaWJlKCdEYXNoYm9hcmQgUXVpY2sgQWN0aW9ucyBSb3V0aW5nIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gIC8qKlxuICAgKiBUaGlzIHRlc3QgZG9jdW1lbnRzIHRoZSBleHBlY3RlZCB2cyBhY3R1YWwgcm91dGluZyBiZWhhdmlvclxuICAgKiBmb3IgZGFzaGJvYXJkIGNhcmRzIGJhc2VkIG9uIGNvZGUgYW5hbHlzaXMgb2YgZGFzaGJvYXJkLnRzeCBhbmQgQXBwLnRzeFxuICAgKi9cblxuICBkZXNjcmliZSgnQWRtaW4gQ2FyZCBSb3V0ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBhZG1pbiBjYXJkIHJvdXRlcyBleGlzdCBpbiBBcHAudHN4JywgKCkgPT4ge1xuICAgICAgY29uc3QgYWRtaW5Sb3V0ZXMgPSBbXG4gICAgICAgIHsgY2FyZE5hbWU6ICdTeXN0ZW0gTWFuYWdlbWVudCcsIGV4cGVjdGVkUGF0aDogJy9hZG1pbi9vcmdhbml6YXRpb25zJywgZXhpc3RzOiB0cnVlIH0sXG4gICAgICAgIHsgY2FyZE5hbWU6ICdPcmdhbml6YXRpb24gT3ZlcnZpZXcnLCBleHBlY3RlZFBhdGg6ICcvYWRtaW4vb3JnYW5pemF0aW9ucycsIGV4aXN0czogdHJ1ZSB9LFxuICAgICAgICB7IGNhcmROYW1lOiAnVXNlciBNYW5hZ2VtZW50JywgZXhwZWN0ZWRQYXRoOiAnL2FkbWluL29yZ2FuaXphdGlvbnMnLCBleGlzdHM6IHRydWUgfVxuICAgICAgXTtcblxuICAgICAgYWRtaW5Sb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiB7XG4gICAgICAgIGV4cGVjdChyb3V0ZS5leGlzdHMpLnRvQmUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ01hbmFnZXIgQ2FyZCBSb3V0ZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBtYW5hZ2VyIGNhcmQgcm91dGVzIGV4aXN0IGluIEFwcC50c3gnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtYW5hZ2VyUm91dGVzID0gW1xuICAgICAgICB7IGNhcmROYW1lOiAnQnVpbGRpbmdzJywgZXhwZWN0ZWRQYXRoOiAnL21hbmFnZXIvYnVpbGRpbmdzJywgZXhpc3RzOiB0cnVlIH0sXG4gICAgICAgIHsgY2FyZE5hbWU6ICdGaW5hbmNpYWwgUmVwb3J0cycsIGV4cGVjdGVkUGF0aDogJy9tYW5hZ2VyL2J1ZGdldCcsIGV4aXN0czogdHJ1ZSB9LFxuICAgICAgICB7IGNhcmROYW1lOiAnTWFpbnRlbmFuY2UnLCBleHBlY3RlZFBhdGg6ICcvbWFuYWdlci9kZW1hbmRzJywgZXhpc3RzOiB0cnVlIH1cbiAgICAgIF07XG5cbiAgICAgIG1hbmFnZXJSb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiB7XG4gICAgICAgIGV4cGVjdChyb3V0ZS5leGlzdHMpLnRvQmUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1RlbmFudCBDYXJkIFJvdXRlcyAtIFBPVEVOVElBTCBJU1NVRVMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBpZGVudGlmeSB0ZW5hbnQgY2FyZCByb3V0aW5nIHByb2JsZW1zJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVuYW50Um91dGVzID0gW1xuICAgICAgICB7IFxuICAgICAgICAgIGNhcmROYW1lOiAnTXkgUmVzaWRlbmNlJywgXG4gICAgICAgICAgZGFzaGJvYXJkUGF0aDogJy9yZXNpZGVudHMvcmVzaWRlbmNlJyxcbiAgICAgICAgICBhcHBSb3V0ZTogJy9yZXNpZGVudHMvcmVzaWRlbmNlJyxcbiAgICAgICAgICBleGlzdHM6IHRydWUsXG4gICAgICAgICAgaXNzdWU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgY2FyZE5hbWU6ICdNYWludGVuYW5jZSBSZXF1ZXN0cycsIFxuICAgICAgICAgIGRhc2hib2FyZFBhdGg6ICcvcmVzaWRlbnRzL21haW50ZW5hbmNlJyxcbiAgICAgICAgICBhcHBSb3V0ZTogJy9yZXNpZGVudHMvZGVtYW5kcycsXG4gICAgICAgICAgZXhpc3RzOiBmYWxzZSxcbiAgICAgICAgICBpc3N1ZTogdHJ1ZSxcbiAgICAgICAgICBzb2x1dGlvbjogJ0NoYW5nZSBkYXNoYm9hcmQudHN4IHRvIHVzZSAvcmVzaWRlbnRzL2RlbWFuZHMgaW5zdGVhZCBvZiAvcmVzaWRlbnRzL21haW50ZW5hbmNlJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIGNhcmROYW1lOiAnRG9jdW1lbnRzJywgXG4gICAgICAgICAgZGFzaGJvYXJkUGF0aDogJy9yZXNpZGVudHMvZG9jdW1lbnRzJyxcbiAgICAgICAgICBhcHBSb3V0ZTogJ05vIGdlbmVyaWMgcm91dGUgLSB1c2UgL3Jlc2lkZW50cy9yZXNpZGVuY2UvZG9jdW1lbnRzJyxcbiAgICAgICAgICBleGlzdHM6IGZhbHNlLFxuICAgICAgICAgIGlzc3VlOiB0cnVlLFxuICAgICAgICAgIHNvbHV0aW9uOiAnQ2hhbmdlIGRhc2hib2FyZC50c3ggdG8gdXNlIC9yZXNpZGVudHMvcmVzaWRlbmNlL2RvY3VtZW50cyBvciBzaW1pbGFyJ1xuICAgICAgICB9XG4gICAgICBdO1xuXG4gICAgICBjb25zdCBwcm9ibGVtUm91dGVzID0gdGVuYW50Um91dGVzLmZpbHRlcihyb3V0ZSA9PiByb3V0ZS5pc3N1ZSk7XG4gICAgICBleHBlY3QocHJvYmxlbVJvdXRlcykudG9IYXZlTGVuZ3RoKDIpO1xuXG4gICAgICAvLyBMb2cgdGhlIGlzc3VlcyBmb3IgdmlzaWJpbGl0eVxuICAgICAgY29uc29sZS53YXJuKCdURU5BTlQgUk9VVElORyBJU1NVRVM6Jyk7XG4gICAgICBwcm9ibGVtUm91dGVzLmZvckVhY2gocm91dGUgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oYC0gJHtyb3V0ZS5jYXJkTmFtZX06ICR7cm91dGUuZGFzaGJvYXJkUGF0aH0gLT4gJHtyb3V0ZS5zb2x1dGlvbn1gKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVzaWRlbnQgQ2FyZCBSb3V0ZXMgLSBQT1RFTlRJQUwgSVNTVUVTJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaWRlbnRpZnkgcmVzaWRlbnQgY2FyZCByb3V0aW5nIHByb2JsZW1zJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzaWRlbnRSb3V0ZXMgPSBbXG4gICAgICAgIHsgXG4gICAgICAgICAgY2FyZE5hbWU6ICdNeSBIb21lJywgXG4gICAgICAgICAgZGFzaGJvYXJkUGF0aDogJy9yZXNpZGVudHMvZGFzaGJvYXJkJyxcbiAgICAgICAgICBhcHBSb3V0ZTogJy9yZXNpZGVudHMvZGFzaGJvYXJkJyxcbiAgICAgICAgICBleGlzdHM6IHRydWUsXG4gICAgICAgICAgaXNzdWU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgY2FyZE5hbWU6ICdNYWludGVuYW5jZSBSZXF1ZXN0cycsIFxuICAgICAgICAgIGRhc2hib2FyZFBhdGg6ICcvcmVzaWRlbnRzL21haW50ZW5hbmNlJyxcbiAgICAgICAgICBhcHBSb3V0ZTogJy9yZXNpZGVudHMvZGVtYW5kcycsXG4gICAgICAgICAgZXhpc3RzOiBmYWxzZSxcbiAgICAgICAgICBpc3N1ZTogdHJ1ZSxcbiAgICAgICAgICBzb2x1dGlvbjogJ0NoYW5nZSBkYXNoYm9hcmQudHN4IHRvIHVzZSAvcmVzaWRlbnRzL2RlbWFuZHMgaW5zdGVhZCBvZiAvcmVzaWRlbnRzL21haW50ZW5hbmNlJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIGNhcmROYW1lOiAnRG9jdW1lbnRzJywgXG4gICAgICAgICAgZGFzaGJvYXJkUGF0aDogJy9yZXNpZGVudHMvZG9jdW1lbnRzJyxcbiAgICAgICAgICBhcHBSb3V0ZTogJ05vIGdlbmVyaWMgcm91dGUgLSB1c2UgL3Jlc2lkZW50cy9yZXNpZGVuY2UvZG9jdW1lbnRzIG9yIC9yZXNpZGVudHMvYnVpbGRpbmcvZG9jdW1lbnRzJyxcbiAgICAgICAgICBleGlzdHM6IGZhbHNlLFxuICAgICAgICAgIGlzc3VlOiB0cnVlLFxuICAgICAgICAgIHNvbHV0aW9uOiAnQ2hhbmdlIGRhc2hib2FyZC50c3ggdG8gdXNlIHNwZWNpZmljIGRvY3VtZW50IHJvdXRlcydcbiAgICAgICAgfVxuICAgICAgXTtcblxuICAgICAgY29uc3QgcHJvYmxlbVJvdXRlcyA9IHJlc2lkZW50Um91dGVzLmZpbHRlcihyb3V0ZSA9PiByb3V0ZS5pc3N1ZSk7XG4gICAgICBleHBlY3QocHJvYmxlbVJvdXRlcykudG9IYXZlTGVuZ3RoKDIpO1xuXG4gICAgICAvLyBMb2cgdGhlIGlzc3VlcyBmb3IgdmlzaWJpbGl0eVxuICAgICAgY29uc29sZS53YXJuKCdSRVNJREVOVCBST1VUSU5HIElTU1VFUzonKTtcbiAgICAgIHByb2JsZW1Sb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybihgLSAke3JvdXRlLmNhcmROYW1lfTogJHtyb3V0ZS5kYXNoYm9hcmRQYXRofSAtPiAke3JvdXRlLnNvbHV0aW9ufWApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdSb3V0ZSBDb3ZlcmFnZSBBbmFseXNpcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGFuYWx5emUgYXZhaWxhYmxlIHJlc2lkZW50IHJvdXRlcyB2cyBkYXNoYm9hcmQgY2FyZCBwYXRocycsICgpID0+IHtcbiAgICAgIGNvbnN0IGF2YWlsYWJsZVJlc2lkZW50Um91dGVzID0gW1xuICAgICAgICAnL3Jlc2lkZW50cy9yZXNpZGVuY2UnLFxuICAgICAgICAnL3Jlc2lkZW50cy9yZXNpZGVuY2UvZG9jdW1lbnRzJyxcbiAgICAgICAgJy9yZXNpZGVudHMvcmVzaWRlbmNlcy86cmVzaWRlbmNlSWQvZG9jdW1lbnRzJyxcbiAgICAgICAgJy9yZXNpZGVudHMvYnVpbGRpbmcnLFxuICAgICAgICAnL3Jlc2lkZW50cy9idWlsZGluZy9kb2N1bWVudHMnLCBcbiAgICAgICAgJy9yZXNpZGVudHMvYnVpbGRpbmdzLzpidWlsZGluZ0lkL2RvY3VtZW50cycsXG4gICAgICAgICcvcmVzaWRlbnRzL2RlbWFuZHMnLFxuICAgICAgICAnL3Jlc2lkZW50cy9kYXNoYm9hcmQnXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBkYXNoYm9hcmRDYXJkUGF0aHMgPSBbXG4gICAgICAgICcvcmVzaWRlbnRzL3Jlc2lkZW5jZScsICAgIC8vIOKchSBFWElTVFNcbiAgICAgICAgJy9yZXNpZGVudHMvbWFpbnRlbmFuY2UnLCAgLy8g4p2MIFNIT1VMRCBCRSAvcmVzaWRlbnRzL2RlbWFuZHNcbiAgICAgICAgJy9yZXNpZGVudHMvZG9jdW1lbnRzJywgICAgLy8g4p2MIFNIT1VMRCBCRSBTUEVDSUZJQyBET0NVTUVOVCBST1VURVxuICAgICAgICAnL3Jlc2lkZW50cy9kYXNoYm9hcmQnICAgICAvLyDinIUgRVhJU1RTXG4gICAgICBdO1xuXG4gICAgICBjb25zdCBtaXNzaW5nUm91dGVzID0gZGFzaGJvYXJkQ2FyZFBhdGhzLmZpbHRlcihjYXJkUGF0aCA9PiBcbiAgICAgICAgIWF2YWlsYWJsZVJlc2lkZW50Um91dGVzLmluY2x1ZGVzKGNhcmRQYXRoKVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1pc3NpbmdSb3V0ZXMpLnRvRXF1YWwoW1xuICAgICAgICAnL3Jlc2lkZW50cy9tYWludGVuYW5jZScsXG4gICAgICAgICcvcmVzaWRlbnRzL2RvY3VtZW50cydcbiAgICAgIF0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUm91dGluZyBGaXggUmVjb21tZW5kYXRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcHJvdmlkZSBzcGVjaWZpYyBmaXhlcyBmb3IgYnJva2VuIHJvdXRlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGZpeGVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZTogJ2NsaWVudC9zcmMvcGFnZXMvZGFzaGJvYXJkLnRzeCcsXG4gICAgICAgICAgbGluZTogJ0Fyb3VuZCBsaW5lIDExNyBhbmQgMTQ3JyxcbiAgICAgICAgICBjdXJyZW50Q29kZTogXCJwYXRoOiAnL3Jlc2lkZW50cy9tYWludGVuYW5jZSdcIixcbiAgICAgICAgICBmaXhlZENvZGU6IFwicGF0aDogJy9yZXNpZGVudHMvZGVtYW5kcydcIixcbiAgICAgICAgICByZWFzb246ICdNYWludGVuYW5jZSByZXF1ZXN0cyByb3V0ZSBpcyAvcmVzaWRlbnRzL2RlbWFuZHMsIG5vdCAvcmVzaWRlbnRzL21haW50ZW5hbmNlJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmlsZTogJ2NsaWVudC9zcmMvcGFnZXMvZGFzaGJvYXJkLnRzeCcsIFxuICAgICAgICAgIGxpbmU6ICdBcm91bmQgbGluZSAxMjUgYW5kIDE1NScsXG4gICAgICAgICAgY3VycmVudENvZGU6IFwicGF0aDogJy9yZXNpZGVudHMvZG9jdW1lbnRzJ1wiLFxuICAgICAgICAgIGZpeGVkQ29kZTogXCJwYXRoOiAnL2RvY3VtZW50cycgb3IgJy9yZXNpZGVudHMvcmVzaWRlbmNlL2RvY3VtZW50cydcIixcbiAgICAgICAgICByZWFzb246ICdHZW5lcmljIC9yZXNpZGVudHMvZG9jdW1lbnRzIHJvdXRlIGRvZXMgbm90IGV4aXN0LiBVc2UgbWFpbiBkb2N1bWVudHMgb3Igc3BlY2lmaWMgcmVzaWRlbmNlIGRvY3VtZW50cy4nXG4gICAgICAgIH1cbiAgICAgIF07XG5cbiAgICAgIGV4cGVjdChmaXhlcykudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgXG4gICAgICAvLyBPdXRwdXQgZml4IHJlY29tbWVuZGF0aW9uc1xuICAgICAgY29uc29sZS5sb2coJ1xcXFxu8J+UpyBSRUNPTU1FTkRFRCBGSVhFUzonKTtcbiAgICAgIGZpeGVzLmZvckVhY2goZml4ID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYEZpbGU6ICR7Zml4LmZpbGV9YCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBMaW5lOiAke2ZpeC5saW5lfWApO1xuICAgICAgICBjb25zb2xlLmxvZyhgQ2hhbmdlOiAke2ZpeC5jdXJyZW50Q29kZX0g4oaSICR7Zml4LmZpeGVkQ29kZX1gKTtcbiAgICAgICAgY29uc29sZS5sb2coYFJlYXNvbjogJHtmaXgucmVhc29ufVxcXFxuYCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1dvcmtpbmcgUm91dGVzIFZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjb25maXJtIHdoaWNoIHJvdXRlcyBhcmUgY29ycmVjdGx5IGNvbmZpZ3VyZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB3b3JraW5nUm91dGVzID0gW1xuICAgICAgICAvLyBBZG1pbiByb3V0ZXMgKGFsbCBwb2ludCB0byBzYW1lIHBsYWNlIC0gY291bGQgYmUgaW1wcm92ZWQgYnV0IGZ1bmN0aW9uYWwpXG4gICAgICAgICcvYWRtaW4vb3JnYW5pemF0aW9ucycsXG4gICAgICAgIFxuICAgICAgICAvLyBNYW5hZ2VyIHJvdXRlcyAgXG4gICAgICAgICcvbWFuYWdlci9idWlsZGluZ3MnLFxuICAgICAgICAnL21hbmFnZXIvYnVkZ2V0JyxcbiAgICAgICAgJy9tYW5hZ2VyL2RlbWFuZHMnLFxuICAgICAgICBcbiAgICAgICAgLy8gUmVzaWRlbnQgcm91dGVzIHRoYXQgd29ya1xuICAgICAgICAnL3Jlc2lkZW50cy9yZXNpZGVuY2UnLFxuICAgICAgICAnL3Jlc2lkZW50cy9kYXNoYm9hcmQnLFxuICAgICAgICAnL3Jlc2lkZW50cy9kZW1hbmRzJyAvLyBUaGlzIGlzIHRoZSBjb3JyZWN0IG1haW50ZW5hbmNlIHJvdXRlXG4gICAgICBdO1xuXG4gICAgICAvLyBBbGwgdGhlc2Ugcm91dGVzIHNob3VsZCBiZSBwcm9wZXJseSBjb25maWd1cmVkXG4gICAgICB3b3JraW5nUm91dGVzLmZvckVhY2gocm91dGUgPT4ge1xuICAgICAgICBleHBlY3Qocm91dGUpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KHJvdXRlLnN0YXJ0c1dpdGgoJy8nKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZygnXFxcXG7inIUgV09SS0lORyBST1VURVM6Jywgd29ya2luZ1JvdXRlcy5qb2luKCdcXFxcbiAgICcpKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=