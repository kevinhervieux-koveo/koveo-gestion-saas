c9b4cdc42cf064a8d60cd5d010f2811f
'use strict';
require('../utils/dataTransfer/Clipboard.js');
var wait = require('../utils/misc/wait.js');
var parseKeyDef = require('./parseKeyDef.js');
async function keyboard(text) {
    const actions = parseKeyDef.parseKeyDef(this.config.keyboardMap, text);
    for (let i = 0; i < actions.length; i++) {
        await wait.wait(this.config);
        await keyboardAction(this, actions[i]);
    }
}
async function keyboardAction(instance, { keyDef, releasePrevious, releaseSelf, repeat }) {
    const { system } = instance;
    // Release the key automatically if it was pressed before.
    if (system.keyboard.isKeyPressed(keyDef)) {
        await system.keyboard.keyup(instance, keyDef);
    }
    if (!releasePrevious) {
        for (let i = 1; i <= repeat; i++) {
            await system.keyboard.keydown(instance, keyDef);
            if (i < repeat) {
                await wait.wait(instance.config);
            }
        }
        // Release the key only on the last iteration on `state.repeatKey`.
        if (releaseSelf) {
            await system.keyboard.keyup(instance, keyDef);
        }
    }
}
async function releaseAllKeys(instance) {
    for (const k of instance.system.keyboard.getPressedKeys()) {
        await instance.system.keyboard.keyup(instance, k);
    }
}
exports.keyboard = keyboard;
exports.releaseAllKeys = releaseAllKeys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2tleWJvYXJkL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE9BQU8sQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0FBQzlDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzVDLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTlDLEtBQUssVUFBVSxRQUFRLENBQUMsSUFBSTtJQUN4QixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLENBQUM7UUFDcEMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QixNQUFNLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQztBQUNMLENBQUM7QUFDRCxLQUFLLFVBQVUsY0FBYyxDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRTtJQUNwRixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBQzVCLDBEQUEwRDtJQUMxRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDdkMsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUNELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUNuQixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDLENBQUM7WUFDN0IsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUM7Z0JBQ2IsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyQyxDQUFDO1FBQ0wsQ0FBQztRQUNELG1FQUFtRTtRQUNuRSxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQ2QsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEQsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDO0FBQ0QsS0FBSyxVQUFVLGNBQWMsQ0FBQyxRQUFRO0lBQ2xDLEtBQUssTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLEVBQUMsQ0FBQztRQUN2RCxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztBQUNMLENBQUM7QUFFRCxPQUFPLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM1QixPQUFPLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9AdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQvZGlzdC9janMva2V5Ym9hcmQvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgd2FpdCA9IHJlcXVpcmUoJy4uL3V0aWxzL21pc2Mvd2FpdC5qcycpO1xudmFyIHBhcnNlS2V5RGVmID0gcmVxdWlyZSgnLi9wYXJzZUtleURlZi5qcycpO1xuXG5hc3luYyBmdW5jdGlvbiBrZXlib2FyZCh0ZXh0KSB7XG4gICAgY29uc3QgYWN0aW9ucyA9IHBhcnNlS2V5RGVmLnBhcnNlS2V5RGVmKHRoaXMuY29uZmlnLmtleWJvYXJkTWFwLCB0ZXh0KTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgYWN0aW9ucy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGF3YWl0IHdhaXQud2FpdCh0aGlzLmNvbmZpZyk7XG4gICAgICAgIGF3YWl0IGtleWJvYXJkQWN0aW9uKHRoaXMsIGFjdGlvbnNbaV0pO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGtleWJvYXJkQWN0aW9uKGluc3RhbmNlLCB7IGtleURlZiwgcmVsZWFzZVByZXZpb3VzLCByZWxlYXNlU2VsZiwgcmVwZWF0IH0pIHtcbiAgICBjb25zdCB7IHN5c3RlbSB9ID0gaW5zdGFuY2U7XG4gICAgLy8gUmVsZWFzZSB0aGUga2V5IGF1dG9tYXRpY2FsbHkgaWYgaXQgd2FzIHByZXNzZWQgYmVmb3JlLlxuICAgIGlmIChzeXN0ZW0ua2V5Ym9hcmQuaXNLZXlQcmVzc2VkKGtleURlZikpIHtcbiAgICAgICAgYXdhaXQgc3lzdGVtLmtleWJvYXJkLmtleXVwKGluc3RhbmNlLCBrZXlEZWYpO1xuICAgIH1cbiAgICBpZiAoIXJlbGVhc2VQcmV2aW91cykge1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDw9IHJlcGVhdDsgaSsrKXtcbiAgICAgICAgICAgIGF3YWl0IHN5c3RlbS5rZXlib2FyZC5rZXlkb3duKGluc3RhbmNlLCBrZXlEZWYpO1xuICAgICAgICAgICAgaWYgKGkgPCByZXBlYXQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB3YWl0LndhaXQoaW5zdGFuY2UuY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZWxlYXNlIHRoZSBrZXkgb25seSBvbiB0aGUgbGFzdCBpdGVyYXRpb24gb24gYHN0YXRlLnJlcGVhdEtleWAuXG4gICAgICAgIGlmIChyZWxlYXNlU2VsZikge1xuICAgICAgICAgICAgYXdhaXQgc3lzdGVtLmtleWJvYXJkLmtleXVwKGluc3RhbmNlLCBrZXlEZWYpO1xuICAgICAgICB9XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcmVsZWFzZUFsbEtleXMoaW5zdGFuY2UpIHtcbiAgICBmb3IgKGNvbnN0IGsgb2YgaW5zdGFuY2Uuc3lzdGVtLmtleWJvYXJkLmdldFByZXNzZWRLZXlzKCkpe1xuICAgICAgICBhd2FpdCBpbnN0YW5jZS5zeXN0ZW0ua2V5Ym9hcmQua2V5dXAoaW5zdGFuY2UsIGspO1xuICAgIH1cbn1cblxuZXhwb3J0cy5rZXlib2FyZCA9IGtleWJvYXJkO1xuZXhwb3J0cy5yZWxlYXNlQWxsS2V5cyA9IHJlbGVhc2VBbGxLZXlzO1xuIl0sInZlcnNpb24iOjN9