{"file":"/home/runner/workspace/tests/integration/admin-pages-functionality.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/admin-pages-functionality.test.ts"],"sourcesContent":["/**\n * Integration Tests for Admin Pages Functionality\n * \n * Tests cover the fixes made to:\n * - /admin/roadmap page (feature-management.ts syntax errors)\n * - /admin/compliance page (law25-compliance.ts syntax errors)\n * - /admin/quality page (quality-metrics authentication issues)\n * - /admin/permissions page (overly restrictive authorization middleware)\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport session from 'express-session';\nimport { registerApiRoutes } from '../../server/routes';\nimport { MemStorage } from '../../server/storage';\nimport { createTestUser, createTestSession } from '../utils/test-utils';\n\n// Mock storage\nconst mockStorage = new MemStorage();\n\n// Create test Express app\nconst createTestApp = () => {\n  const app = express();\n  \n  // Setup middleware\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Session middleware for authentication\n  app.use(\n    session({\n      secret: 'test-secret',\n      resave: false,\n      saveUninitialized: false,\n      cookie: { secure: false, maxAge: 24 * 60 * 60 * 1000 },\n    })\n  );\n  \n  // Register API routes\n  registerApiRoutes(app);\n  \n  return app;\n};\n\ndescribe('Admin Pages Functionality', () => {\n  let app: express.Application;\n  let adminUser: any;\n  let regularUser: any;\n  let adminAgent: request.SuperAgentTest;\n  let userAgent: request.SuperAgentTest;\n\n  beforeEach(async () => {\n    app = createTestApp();\n    \n    // Create test users\n    adminUser = await createTestUser({\n      email: 'admin@test.com',\n      role: 'admin',\n      firstName: 'Admin',\n      lastName: 'User'\n    });\n    \n    regularUser = await createTestUser({\n      email: 'user@test.com',\n      role: 'resident',\n      firstName: 'Regular',\n      lastName: 'User'\n    });\n    \n    // Create authenticated agents\n    adminAgent = request.agent(app);\n    userAgent = request.agent(app);\n    \n    // Login as admin\n    await adminAgent\n      .post('/api/auth/login')\n      .send({\n        email: 'admin@test.com',\n        password: 'password123'\n      });\n      \n    // Login as regular user\n    await userAgent\n      .post('/api/auth/login')\n      .send({\n        email: 'user@test.com',\n        password: 'password123'\n      });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Admin Roadmap Page (/admin/roadmap)', () => {\n    it('should successfully load roadmap data for admin users', async () => {\n      const response = await adminAgent\n        .get('/api/feature-management/features')\n        .expect(200);\n        \n      expect(response.body).toBeDefined();\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should deny access to non-admin users', async () => {\n      await userAgent\n        .get('/api/feature-management/features')\n        .expect(403);\n    });\n\n    it('should handle feature creation without syntax errors', async () => {\n      const newFeature = {\n        title: 'Test Feature',\n        description: 'Test Description',\n        category: 'enhancement',\n        priority: 'medium',\n        estimatedEffort: 5,\n        targetQuarter: 'Q1 2025',\n        status: 'planned'\n      };\n\n      const response = await adminAgent\n        .post('/api/feature-management/features')\n        .send(newFeature)\n        .expect(201);\n        \n      expect(response.body.title).toBe(newFeature.title);\n      expect(response.body.status).toBe('planned');\n    });\n\n    it('should handle feature updates without errors', async () => {\n      // First create a feature\n      const createResponse = await adminAgent\n        .post('/api/feature-management/features')\n        .send({\n          title: 'Update Test',\n          description: 'Test Description',\n          category: 'enhancement',\n          priority: 'medium',\n          estimatedEffort: 3,\n          targetQuarter: 'Q2 2025',\n          status: 'planned'\n        });\n\n      const featureId = createResponse.body.id;\n      \n      // Then update it\n      const updateResponse = await adminAgent\n        .patch(`/api/feature-management/features/${featureId}`)\n        .send({\n          status: 'in_progress',\n          priority: 'high'\n        })\n        .expect(200);\n        \n      expect(updateResponse.body.status).toBe('in_progress');\n      expect(updateResponse.body.priority).toBe('high');\n    });\n  });\n\n  describe('Admin Compliance Page (/admin/compliance)', () => {\n    it('should successfully load compliance data for admin users', async () => {\n      const response = await adminAgent\n        .get('/api/law25-compliance')\n        .expect(200);\n        \n      expect(response.body).toBeDefined();\n      expect(response.body.overallStatus).toBeDefined();\n    });\n\n    it('should deny access to non-admin users', async () => {\n      await userAgent\n        .get('/api/law25-compliance')\n        .expect(403);\n    });\n\n    it('should return proper compliance status structure', async () => {\n      const response = await adminAgent\n        .get('/api/law25-compliance')\n        .expect(200);\n        \n      expect(response.body).toHaveProperty('overallStatus');\n      expect(response.body).toHaveProperty('categories');\n      expect(response.body).toHaveProperty('recommendations');\n      expect(typeof response.body.overallStatus).toBe('string');\n      expect(Array.isArray(response.body.categories)).toBe(true);\n    });\n\n    it('should handle compliance audit requests without syntax errors', async () => {\n      const response = await adminAgent\n        .post('/api/law25-compliance/audit')\n        .send({\n          auditType: 'full',\n          includeSensitiveData: true\n        })\n        .expect(200);\n        \n      expect(response.body.auditId).toBeDefined();\n      expect(response.body.status).toBe('initiated');\n    });\n  });\n\n  describe('Admin Quality Page (/admin/quality)', () => {\n    it('should successfully load quality metrics for authenticated admin users', async () => {\n      const response = await adminAgent\n        .get('/api/quality-metrics')\n        .expect(200);\n        \n      expect(response.body).toBeDefined();\n      expect(response.body.metrics).toBeDefined();\n    });\n\n    it('should deny access to unauthenticated users', async () => {\n      await request(app)\n        .get('/api/quality-metrics')\n        .expect(401);\n    });\n\n    it('should deny access to non-admin users', async () => {\n      await userAgent\n        .get('/api/quality-metrics')\n        .expect(403);\n    });\n\n    it('should return properly structured quality metrics', async () => {\n      const response = await adminAgent\n        .get('/api/quality-metrics')\n        .expect(200);\n        \n      expect(response.body.metrics).toBeDefined();\n      expect(response.body.metrics.overall).toBeDefined();\n      expect(response.body.metrics.categories).toBeDefined();\n      expect(Array.isArray(response.body.metrics.categories)).toBe(true);\n    });\n\n    it('should handle quality metric updates without authentication issues', async () => {\n      const updateData = {\n        category: 'performance',\n        metric: 'response_time',\n        value: 250,\n        threshold: 300\n      };\n\n      const response = await adminAgent\n        .post('/api/quality-metrics/update')\n        .send(updateData)\n        .expect(200);\n        \n      expect(response.body.success).toBe(true);\n    });\n  });\n\n  describe('Admin Permissions Page (/admin/permissions)', () => {\n    it('should successfully load permissions data for admin users', async () => {\n      const response = await adminAgent\n        .get('/api/permissions')\n        .expect(200);\n        \n      expect(response.body).toBeDefined();\n      expect(Array.isArray(response.body)).toBe(true);\n    });\n\n    it('should allow admin access without overly restrictive middleware', async () => {\n      // This test ensures the authorization middleware fix\n      const response = await adminAgent\n        .get('/api/permissions')\n        .expect(200);\n        \n      expect(response.status).toBe(200);\n      expect(response.body).toBeDefined();\n    });\n\n    it('should still deny access to non-admin users', async () => {\n      await userAgent\n        .get('/api/permissions')\n        .expect(403);\n    });\n\n    it('should handle permission updates for admin users', async () => {\n      const permissionUpdate = {\n        userId: regularUser.id,\n        permissions: ['read_documents', 'create_demands'],\n        role: 'resident'\n      };\n\n      const response = await adminAgent\n        .patch('/api/permissions/user')\n        .send(permissionUpdate)\n        .expect(200);\n        \n      expect(response.body.success).toBe(true);\n    });\n\n    it('should handle role-based permission queries', async () => {\n      const response = await adminAgent\n        .get('/api/permissions?role=manager')\n        .expect(200);\n        \n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n\n  describe('Cross-Page Error Handling', () => {\n    it('should handle malformed requests gracefully across all admin endpoints', async () => {\n      const endpoints = [\n        '/api/feature-management/features',\n        '/api/law25-compliance',\n        '/api/quality-metrics',\n        '/api/permissions'\n      ];\n\n      for (const endpoint of endpoints) {\n        const response = await adminAgent\n          .post(endpoint)\n          .send({ malformed: 'data', invalid: true })\n          .expect(400);\n          \n        expect(response.body.error).toBeDefined();\n      }\n    });\n\n    it('should return consistent error formats across admin pages', async () => {\n      const response = await userAgent\n        .get('/api/feature-management/features')\n        .expect(403);\n        \n      expect(response.body).toHaveProperty('error');\n      expect(response.body).toHaveProperty('message');\n      expect(response.body.error).toBe('Forbidden');\n    });\n  });\n\n  describe('Admin Page Authentication Flow', () => {\n    it('should require authentication for all admin endpoints', async () => {\n      const endpoints = [\n        '/api/feature-management/features',\n        '/api/law25-compliance',\n        '/api/quality-metrics',\n        '/api/permissions'\n      ];\n\n      for (const endpoint of endpoints) {\n        await request(app)\n          .get(endpoint)\n          .expect(401);\n      }\n    });\n\n    it('should maintain session across admin page requests', async () => {\n      // Make multiple requests to ensure session persistence\n      await adminAgent\n        .get('/api/feature-management/features')\n        .expect(200);\n        \n      await adminAgent\n        .get('/api/law25-compliance')\n        .expect(200);\n        \n      await adminAgent\n        .get('/api/quality-metrics')\n        .expect(200);\n        \n      await adminAgent\n        .get('/api/permissions')\n        .expect(200);\n    });\n  });\n});"],"version":3}