4aea812bd60dad015b0808f15165f14f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('../../client/src/hooks/use-auth', () => ({
    useAuth: () => ({
        user: {
            id: 'test-user-id',
            email: 'test@example.com',
            firstName: 'Test',
            lastName: 'User',
            username: 'testuser',
            phone: '555-1234',
            language: 'en',
            role: 'resident'
        },
        logout: globals_1.jest.fn()
    })
}));
globals_1.jest.mock('../../client/src/hooks/use-language', () => ({
    useLanguage: () => ({
        t: (key) => key // Simple translation mock
    })
}));
globals_1.jest.mock('../../client/src/hooks/use-toast', () => ({
    useToast: () => ({
        toast: globals_1.jest.fn()
    })
}));
globals_1.jest.mock('@tanstack/react-query', () => ({
    useMutation: () => ({
        mutate: globals_1.jest.fn(),
        isPending: false
    }),
    useQueryClient: () => ({
        invalidateQueries: globals_1.jest.fn()
    })
}));
// Mock react-hook-form
globals_1.jest.mock('react-hook-form', () => ({
    useForm: () => ({
        register: globals_1.jest.fn((name) => ({
            name,
            onChange: globals_1.jest.fn(),
            onBlur: globals_1.jest.fn(),
            ref: globals_1.jest.fn()
        })),
        handleSubmit: (fn) => (e) => {
            e.preventDefault();
            return fn({});
        },
        reset: globals_1.jest.fn(),
        control: {},
        formState: { errors: {} },
        watch: globals_1.jest.fn(() => ''),
        setValue: globals_1.jest.fn()
    })
}));
/**
 * Unit Tests for Settings Page Password Autocomplete Attributes
 *
 * Tests cover the fix for DOM warnings about missing autocomplete attributes
 * on password input fields in the settings page.
 */
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
require("@testing-library/jest-dom");
const settings_1 = __importDefault(require("../../client/src/pages/settings/settings"));
(0, globals_1.describe)('Settings Page Password Autocomplete', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Password Field Autocomplete Attributes', () => {
        (0, globals_1.it)('should have correct autocomplete attribute on current password field', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const currentPasswordInput = react_2.screen.getByTestId('input-current-password');
            (0, globals_1.expect)(currentPasswordInput).toHaveAttribute('autoComplete', 'current-password');
            (0, globals_1.expect)(currentPasswordInput).toHaveAttribute('type', 'password');
        });
        (0, globals_1.it)('should have correct autocomplete attribute on new password field', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const newPasswordInput = react_2.screen.getByTestId('input-new-password');
            (0, globals_1.expect)(newPasswordInput).toHaveAttribute('autoComplete', 'new-password');
            (0, globals_1.expect)(newPasswordInput).toHaveAttribute('type', 'password');
        });
        (0, globals_1.it)('should have correct autocomplete attribute on confirm password field', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const confirmPasswordInput = react_2.screen.getByTestId('input-confirm-password');
            (0, globals_1.expect)(confirmPasswordInput).toHaveAttribute('autoComplete', 'new-password');
            (0, globals_1.expect)(confirmPasswordInput).toHaveAttribute('type', 'password');
        });
    });
    (0, globals_1.describe)('Password Field Visibility Toggle', () => {
        (0, globals_1.it)('should have visibility toggle buttons for all password fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const currentPasswordToggle = react_2.screen.getByTestId('toggle-current-password');
            const newPasswordToggle = react_2.screen.getByTestId('toggle-new-password');
            const confirmPasswordToggle = react_2.screen.getByTestId('toggle-confirm-password');
            (0, globals_1.expect)(currentPasswordToggle).toBeInTheDocument();
            (0, globals_1.expect)(newPasswordToggle).toBeInTheDocument();
            (0, globals_1.expect)(confirmPasswordToggle).toBeInTheDocument();
        });
        (0, globals_1.it)('should toggle password visibility when toggle button is clicked', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const currentPasswordInput = react_2.screen.getByTestId('input-current-password');
            const toggleButton = react_2.screen.getByTestId('toggle-current-password');
            // Initially should be password type
            (0, globals_1.expect)(currentPasswordInput).toHaveAttribute('type', 'password');
            // Click toggle button
            react_2.fireEvent.click(toggleButton);
            // Should change to text type (this would need proper state management in the actual component)
            // Since we're mocking the form, we'll just verify the button is clickable
            (0, globals_1.expect)(toggleButton).toBeInTheDocument();
        });
    });
    (0, globals_1.describe)('Form Structure and Accessibility', () => {
        (0, globals_1.it)('should have proper form labels for all password fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            (0, globals_1.expect)(react_2.screen.getByText('currentPassword')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByText('newPassword')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByText('confirmNewPassword')).toBeInTheDocument();
        });
        (0, globals_1.it)('should have proper form structure with security section', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            (0, globals_1.expect)(react_2.screen.getByText('securitySettings')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('button-change-password')).toBeInTheDocument();
        });
        (0, globals_1.it)('should have proper test IDs for form submission', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const submitButton = react_2.screen.getByTestId('button-change-password');
            (0, globals_1.expect)(submitButton).toBeInTheDocument();
            (0, globals_1.expect)(submitButton).toHaveTextContent('changePassword');
        });
    });
    (0, globals_1.describe)('Input Field Properties', () => {
        (0, globals_1.it)('should have all required input properties for accessibility', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const passwordInputs = [
                react_2.screen.getByTestId('input-current-password'),
                react_2.screen.getByTestId('input-new-password'),
                react_2.screen.getByTestId('input-confirm-password')
            ];
            passwordInputs.forEach(input => {
                // Should have autocomplete attribute (the fix we implemented)
                (0, globals_1.expect)(input).toHaveAttribute('autoComplete');
                // Should have proper type
                (0, globals_1.expect)(input).toHaveAttribute('type', 'password');
                // Should be form inputs
                (0, globals_1.expect)(input.tagName).toBe('INPUT');
            });
        });
        (0, globals_1.it)('should not have any accessibility warnings in password fields', () => {
            // Mock console.warn to catch any DOM warnings
            const consoleSpy = globals_1.jest.spyOn(console, 'warn').mockImplementation(() => { });
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            // Check that no warnings were logged about missing autocomplete attributes
            const autocompleteWarnings = consoleSpy.mock.calls.filter(call => call[0]?.includes?.('autocomplete') ||
                call[0]?.includes?.('Input elements should have autocomplete attributes'));
            (0, globals_1.expect)(autocompleteWarnings).toHaveLength(0);
            consoleSpy.mockRestore();
        });
    });
    (0, globals_1.describe)('Security Best Practices', () => {
        (0, globals_1.it)('should use appropriate autocomplete values for password security', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const currentPasswordInput = react_2.screen.getByTestId('input-current-password');
            const newPasswordInput = react_2.screen.getByTestId('input-new-password');
            const confirmPasswordInput = react_2.screen.getByTestId('input-confirm-password');
            // Current password should use 'current-password' for password managers
            (0, globals_1.expect)(currentPasswordInput).toHaveAttribute('autoComplete', 'current-password');
            // New password fields should use 'new-password' for password generation
            (0, globals_1.expect)(newPasswordInput).toHaveAttribute('autoComplete', 'new-password');
            (0, globals_1.expect)(confirmPasswordInput).toHaveAttribute('autoComplete', 'new-password');
        });
        (0, globals_1.it)('should maintain proper form structure for password managers', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            // All password fields should be within a form
            const passwordInputs = [
                react_2.screen.getByTestId('input-current-password'),
                react_2.screen.getByTestId('input-new-password'),
                react_2.screen.getByTestId('input-confirm-password')
            ];
            passwordInputs.forEach(input => {
                const form = input.closest('form');
                (0, globals_1.expect)(form).toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('Profile Form Accessibility', () => {
        (0, globals_1.it)('should have proper autocomplete for non-password fields', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const emailInput = react_2.screen.getByTestId('input-email');
            (0, globals_1.expect)(emailInput).toHaveAttribute('type', 'email');
            const phoneInput = react_2.screen.getByTestId('input-phone');
            (0, globals_1.expect)(phoneInput).toHaveAttribute('type', 'tel');
        });
        (0, globals_1.it)('should have all required form fields with proper test IDs', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            const requiredInputs = [
                'input-first-name',
                'input-last-name',
                'input-email',
                'input-username',
                'input-phone'
            ];
            requiredInputs.forEach(testId => {
                (0, globals_1.expect)(react_2.screen.getByTestId(testId)).toBeInTheDocument();
            });
        });
    });
    (0, globals_1.describe)('Form Validation Integration', () => {
        (0, globals_1.it)('should integrate properly with form validation', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(settings_1.default, {}));
            // Verify form submission elements are present
            (0, globals_1.expect)(react_2.screen.getByTestId('button-save-profile')).toBeInTheDocument();
            (0, globals_1.expect)(react_2.screen.getByTestId('button-change-password')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,