5d4e87fc4993c89a88467ca5c90dcfdf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Bills;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const button_1 = require("@/components/ui/button");
const select_1 = require("@/components/ui/select");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const dialog_1 = require("@/components/ui/dialog");
const checkbox_1 = require("@/components/ui/checkbox");
const popover_1 = require("@/components/ui/popover");
const lucide_react_1 = require("lucide-react");
const BillEditForm_1 = require("@/components/BillEditForm");
const BuildingSelectionGrid_1 = require("@/components/BuildingSelectionGrid");
const BillCreateForm_1 = require("@/components/BillCreateForm");
const react_query_1 = require("@tanstack/react-query");
const queryClient_1 = require("@/lib/queryClient");
const utils_1 = require("@/lib/utils");
const BILL_CATEGORIES = [
    'insurance',
    'maintenance',
    'salary',
    'utilities',
    'cleaning',
    'security',
    'landscaping',
    'professional_services',
    'administration',
    'repairs',
    'supplies',
    'taxes',
    'other',
];
const CATEGORY_LABELS = {
    insurance: 'Insurance',
    maintenance: 'Maintenance',
    salary: 'Salary',
    utilities: 'Utilities',
    cleaning: 'Cleaning',
    security: 'Security',
    landscaping: 'Landscaping',
    professional_services: 'Professional Services',
    administration: 'Administration',
    repairs: 'Repairs',
    supplies: 'Supplies',
    taxes: 'Taxes',
    other: 'Other',
};
const MONTHS = [
    { value: '1', label: 'January' },
    { value: '2', label: 'February' },
    { value: '3', label: 'March' },
    { value: '4', label: 'April' },
    { value: '5', label: 'May' },
    { value: '6', label: 'June' },
    { value: '7', label: 'July' },
    { value: '8', label: 'August' },
    { value: '9', label: 'September' },
    { value: '10', label: 'October' },
    { value: '11', label: 'November' },
    { value: '12', label: 'December' },
];
/**
 *
 */
function Bills() {
    const [filters, setFilters] = (0, react_1.useState)({
        buildingId: '',
        category: '',
        year: new Date().getFullYear().toString(),
        months: [],
    });
    const [showCreateDialog, setShowCreateDialog] = (0, react_1.useState)(false);
    const [showAllYears, setShowAllYears] = (0, react_1.useState)(false);
    const queryClient = (0, react_query_1.useQueryClient)();
    // Fetch buildings for filter dropdown
    const { data: buildings = [], isLoading: buildingsLoading, error: buildingsError, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/buildings'],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', '/api/buildings');
            return await response.json();
        },
    });
    // Fetch bills based on filters
    const { data: bills = [], isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/bills', filters],
        queryFn: async () => {
            const params = new URLSearchParams(); /**
             * If function.
             * @param filters.buildingId - Filters.buildingId parameter.
             */ /**
            * If function.
            * @param filters.buildingId - Filters.buildingId parameter.
            */
            if (filters.buildingId) {
                params.set('buildingId', filters.buildingId);
            } /**
             * If function.
             * @param filters.category && filters.category !== 'all' - filters.category && filters.category !== 'all' parameter.
             */ /**
            * If function.
            * @param filters.category && filters.category !== 'all' - filters.category && filters.category !== 'all' parameter.
            */
            if (filters.category && filters.category !== 'all') {
                params.set('category', filters.category);
            } /**
             * If function.
             * @param filters.year - Filters.year parameter.
             */ /**
            * If function.
            * @param filters.year - Filters.year parameter.
            */
            if (filters.year) {
                params.set('year', filters.year);
            } /**
             * If function.
             * @param filters.months.length > 0 - filters.months.length > 0 parameter.
             */ /**
            * If function.
            * @param filters.months.length > 0 - filters.months.length > 0 parameter.
            */
            if (filters.months.length > 0) {
                params.set('months', filters.months.join(','));
            }
            const url = `/api/bills${params.toString() ? '?' + params.toString() : ''}`;
            const response = await fetch(url, { credentials: 'include' }); /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */ /**
            * If function.
            * @param !response.ok - !response.ok parameter.
            */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            if (!response.ok) {
                throw new Error(`Failed to fetch bills: ${response.statusText}`);
            }
            return response.json();
        },
    });
    // Group bills by category
    const billsByCategory = bills.reduce((acc, bill) => {
        const category = bill.category || 'other'; /**
         * If function.
         * @param !acc[category] - !acc[category] parameter.
         */ /**
        * If function.
        * @param !acc[category] - !acc[category] parameter.
        */
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(bill);
        return acc;
    }, {});
    const handleFilterChange = (key, value) => {
        setFilters((prev) => ({ ...prev, [key]: value }));
    };
    const handleMonthToggle = (monthValue) => {
        setFilters((prev) => ({
            ...prev,
            months: prev.months.includes(monthValue)
                ? prev.months.filter((m) => m !== monthValue)
                : [...prev.months, monthValue],
        }));
    };
    const handleAllMonthsToggle = () => {
        const allMonthValues = MONTHS.map((m) => m.value);
        setFilters((prev) => ({
            ...prev,
            months: prev.months.length === allMonthValues.length ? [] : allMonthValues,
        }));
    };
    const getMonthsDisplayText = () => {
        /**
         * If function.
         * @param filters.months.length === 0 - filters.months.length === 0 parameter.
         */ /**
        * If function.
        * @param filters.months.length === 0 - filters.months.length === 0 parameter.
        */
        if (filters.months.length === 0) {
            return 'All months';
        } /**
         * If function.
         * @param filters.months.length === MONTHS.length - filters.months.length === MONTHS.length parameter.
         */ /**
        * If function.
        * @param filters.months.length === MONTHS.length - filters.months.length === MONTHS.length parameter.
        */
        if (filters.months.length === MONTHS.length) {
            return 'All months';
        } /**
         * If function.
         * @param filters.months.length === 1 - filters.months.length === 1 parameter.
         */ /**
        * If function.
        * @param filters.months.length === 1 - filters.months.length === 1 parameter.
        */
        if (filters.months.length === 1) {
            const month = MONTHS.find((m) => m.value === filters.months[0]);
            return month?.label || 'All months';
        }
        return `${filters.months.length} months`;
    };
    // Get building construction year for minimum year calculation
    const selectedBuilding = Array.isArray(buildings)
        ? buildings.find((b) => b.id === filters.buildingId)
        : undefined;
    const buildingConstructionYear = selectedBuilding?.yearBuilt || new Date().getFullYear();
    const currentYear = new Date().getFullYear();
    // Generate year options based on show all years state
    const getYearOptions = () => {
        /**
         * If function.
         * @param showAllYears - ShowAllYears parameter.
         */ /**
        * If function.
        * @param showAllYears - ShowAllYears parameter.
        */
        if (showAllYears) {
            // Show all years from building construction year to 25 years forward
            const startYear = buildingConstructionYear;
            const endYear = currentYear + 25;
            const totalYears = endYear - startYear + 1;
            return Array.from({ length: totalYears }, (_, i) => startYear + i);
        }
        else {
            // Show current year Â±3 years
            const startYear = currentYear - 3;
            const endYear = currentYear + 3;
            const totalYears = endYear - startYear + 1;
            return Array.from({ length: totalYears }, (_, i) => startYear + i);
        }
    };
    // Show loading state while buildings are loading
    if (buildingsLoading) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Bills Management', subtitle: 'Manage building expenses and revenue tracking' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: "Loading buildings..." })] }) })] }));
    }
    // Show error state if buildings failed to load
    if (buildingsError) {
        return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Bills Management', subtitle: 'Manage building expenses and revenue tracking' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-red-500 mb-4', children: "Failed to load buildings" }), (0, jsx_runtime_1.jsx)("button", { onClick: () => window.location.reload(), className: 'px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700', children: "Retry" })] }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: 'Bills Management', subtitle: 'Manage building expenses and revenue tracking' }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Filter, { className: 'w-5 h-5' }), "Filters"] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-5 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'building-filter', className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-4 h-4' }), "Building"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.buildingId, onValueChange: (value) => handleFilterChange('buildingId', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: 'building-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'Select building' }) }), (0, jsx_runtime_1.jsx)(select_1.SelectContent, { children: Array.isArray(buildings) &&
                                                                    buildings.map((building) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: building.id, children: building.name }, building.id))) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'category-filter', className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Tag, { className: 'w-4 h-4' }), "Category"] }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.category, onValueChange: (value) => handleFilterChange('category', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: 'category-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: 'All categories' }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: "All categories" }), BILL_CATEGORIES.map((category) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: category, children: CATEGORY_LABELS[category] }, category)))] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { htmlFor: 'year-filter', className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-4 h-4' }), "Year"] }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-2', children: (0, jsx_runtime_1.jsxs)(select_1.Select, { value: filters.year, onValueChange: (value) => handleFilterChange('year', value), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { id: 'year-filter', children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, {}) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { className: 'max-h-[300px] overflow-y-auto', children: [getYearOptions().map((year) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: year.toString(), children: [year, year === currentYear && ((0, jsx_runtime_1.jsx)("span", { className: 'ml-2 text-xs text-blue-500', children: "(Current)" }))] }, year))), !showAllYears && ((0, jsx_runtime_1.jsx)("div", { className: 'border-t border-gray-200 mt-2 pt-2', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', className: 'w-full text-left justify-start text-xs', onClick: () => setShowAllYears(true), children: ["Show more years (", buildingConstructionYear, " - ", currentYear + 25, ")"] }) })), showAllYears && ((0, jsx_runtime_1.jsx)("div", { className: 'border-t border-gray-200 mt-2 pt-2', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'ghost', size: 'sm', className: 'w-full text-left justify-start text-xs', onClick: () => setShowAllYears(false), children: ["Show fewer years (", currentYear - 3, " - ", currentYear + 3, ")"] }) }))] })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(label_1.Label, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Calendar, { className: 'w-4 h-4' }), "Months"] }), (0, jsx_runtime_1.jsxs)(popover_1.Popover, { children: [(0, jsx_runtime_1.jsx)(popover_1.PopoverTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', className: (0, utils_1.cn)('w-full justify-between', filters.months.length === 0 && 'text-muted-foreground'), children: [getMonthsDisplayText(), (0, jsx_runtime_1.jsx)(lucide_react_1.ChevronDown, { className: 'ml-2 h-4 w-4 shrink-0 opacity-50' })] }) }), (0, jsx_runtime_1.jsxs)(popover_1.PopoverContent, { className: 'w-64 p-0', align: 'start', children: [(0, jsx_runtime_1.jsx)("div", { className: 'border-b p-3', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: 'all-months', checked: filters.months.length === MONTHS.length, onCheckedChange: handleAllMonthsToggle }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'all-months', className: 'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', children: "All Months" })] }) }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-2 gap-2 p-3', children: MONTHS.map((month) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center space-x-2', children: [(0, jsx_runtime_1.jsx)(checkbox_1.Checkbox, { id: `month-${month.value}`, checked: filters.months.includes(month.value), onCheckedChange: () => handleMonthToggle(month.value) }), (0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: `month-${month.value}`, className: 'text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', children: month.label })] }, month.value))) })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'invisible', children: "Actions" }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { open: showCreateDialog, onOpenChange: setShowCreateDialog, children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { className: 'w-full', disabled: !filters.buildingId, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4 mr-2' }), "Create Bill"] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-4xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Create New Bill" }) }), (0, jsx_runtime_1.jsx)(BillCreateForm_1.BillCreateForm, { buildingId: filters.buildingId, onClose: () => setShowCreateDialog(false), onSuccess: () => {
                                                                            setShowCreateDialog(false);
                                                                            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
                                                                        } })] })] })] })] }) })] }), !filters.buildingId ? ((0, jsx_runtime_1.jsx)(BuildingSelectionGrid_1.BuildingSelectionGrid, { buildings: Array.isArray(buildings) ? buildings : [], onBuildingSelect: (buildingId) => handleFilterChange('buildingId', buildingId) })) : isLoading ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)("div", { className: 'animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4' }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: "Loading bills..." })] }) })) : Object.keys(billsByCategory).length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-16 h-16 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: "No Bills Found" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500 mb-4', children: "No bills found for the selected filters. Create your first bill to get started." }), (0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: () => setShowCreateDialog(true), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: 'w-4 h-4 mr-2' }), "Create First Bill"] })] }) })) : ((0, jsx_runtime_1.jsx)("div", { className: 'space-y-6', children: BILL_CATEGORIES.filter((category) => (!filters.category || filters.category === category) &&
                                billsByCategory[category]?.length > 0).map((category) => ((0, jsx_runtime_1.jsx)(BillCategorySection, { category: category, bills: billsByCategory[category] || [], onBillUpdate: () => queryClient.invalidateQueries({ queryKey: ['/api/bills'] }) }, category))) }))] }) })] }));
}
// Component for displaying bills in a category
/**
 *
 * @param root0
 * @param root0.category
 * @param root0.bills
 * @param root0.onBillUpdate
 */
/**
 * BillCategorySection function.
 * @param root0
 * @param root0.category
 * @param root0.bills
 * @param root0.onBillUpdate
 * @returns Function result.
 */
function BillCategorySection({ category, bills, onBillUpdate, }) {
    return ((0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)(card_1.CardTitle, { className: 'flex items-center justify-between', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Tag, { className: 'w-5 h-5' }), CATEGORY_LABELS[category], (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'secondary', children: bills.length })] }) }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4', children: bills.map((bill) => ((0, jsx_runtime_1.jsx)(BillCard, { bill: bill, onUpdate: onBillUpdate }, bill.id))) }) })] }));
}
// Component for individual bill cards
/**
 *
 * @param root0
 * @param root0.bill
 * @param root0.onUpdate
 */
/**
 * BillCard function.
 * @param root0
 * @param root0.bill
 * @param root0.onUpdate
 * @returns Function result.
 */
function BillCard({ bill, onUpdate }) {
    const [showDetailDialog, setShowDetailDialog] = (0, react_1.useState)(false);
    const statusColors = {
        draft: 'bg-gray-100 text-gray-800',
        sent: 'bg-blue-100 text-blue-800',
        overdue: 'bg-red-100 text-red-800',
        paid: 'bg-green-100 text-green-800',
        cancelled: 'bg-gray-100 text-gray-800',
    };
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-md transition-shadow cursor-pointer', onClick: () => setShowDetailDialog(true), children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: 'p-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-3', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-start justify-between', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h4", { className: 'font-semibold text-sm', children: bill.title }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: ["#", bill.billNumber] })] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { className: statusColors[bill.status], children: bill.status })] }), bill.description && ((0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 line-clamp-2', children: bill.description })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between text-sm', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'font-medium', children: ["$", Number(bill.totalAmount).toLocaleString()] }), (0, jsx_runtime_1.jsx)("span", { className: 'text-gray-500', children: bill.paymentType })] }), bill.vendor && (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: ["Vendor: ", bill.vendor] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 pt-2', children: [bill.documentPath && ((0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-3 h-3 mr-1' }), "Document"] })), bill.isAiAnalyzed && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: "AI Analyzed" })), bill.notes?.includes('Auto-generated from:') && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: "Auto-Generated" }))] })] }) }) }), (0, jsx_runtime_1.jsx)(dialog_1.Dialog, { open: showDetailDialog, onOpenChange: setShowDetailDialog, children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsx)(dialog_1.DialogTitle, { children: "Bill Details" }) }), (0, jsx_runtime_1.jsx)(BillDetail, { bill: bill, onSuccess: () => {
                                setShowDetailDialog(false);
                                onUpdate();
                            }, onCancel: () => setShowDetailDialog(false) })] }) })] }));
}
// Bill detail and edit form
/**
 *
 * @param root0
 * @param root0.bill
 * @param root0.onSuccess
 * @param root0.onCancel
 */
/**
 * BillDetail function.
 * @param root0
 * @param root0.bill
 * @param root0.onSuccess
 * @param root0.onCancel
 * @returns Function result.
 */
function BillDetail({ bill, onSuccess, onCancel, }) {
    const [isEditing, setIsEditing] = (0, react_1.useState)(false);
    const [endDate, setEndDate] = (0, react_1.useState)(bill.endDate || '');
    const [uploadedFile, setUploadedFile] = (0, react_1.useState)(null);
    const [isAnalyzing, setIsAnalyzing] = (0, react_1.useState)(false);
    const queryClient = (0, react_query_1.useQueryClient)();
    const updateBillMutation = (0, react_query_1.useMutation)({
        mutationFn: async (updates) => {
            const response = await fetch(`/api/bills/${bill.id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include',
                body: JSON.stringify(updates),
            });
            if (!response.ok) {
                throw new Error('Failed to update bill');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            onSuccess();
        },
    });
    const handleSetEndDate = () => {
        /**
         * If function.
         * @param endDate - EndDate parameter.
         */ /**
        * If function.
        * @param endDate - EndDate parameter.
        */
        if (endDate) {
            updateBillMutation.mutate({ endDate });
        }
    };
    const uploadDocumentMutation = (0, react_query_1.useMutation)({
        mutationFn: async (file) => {
            const formData = new FormData();
            formData.append('document', file);
            const response = await fetch(`/api/bills/${bill.id}/upload-document`, {
                method: 'POST',
                credentials: 'include',
                body: formData,
            });
            if (!response.ok) {
                throw new Error('Failed to upload document');
            }
            return response.json();
        },
        onSuccess: (_data) => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            setUploadedFile(null);
            onSuccess();
        },
    });
    const applyAiAnalysisMutation = (0, react_query_1.useMutation)({
        mutationFn: async () => {
            const response = await fetch(`/api/bills/${bill.id}/apply-ai-analysis`, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            if (!response.ok) {
                throw new Error('Failed to apply AI analysis');
            }
            return response.json();
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/bills'] });
            onSuccess();
        },
    });
    const handleFileUpload = (event) => {
        const file = event.target.files?.[0]; /**
         * If function.
         * @param file - File parameter.
         */ /**
        * If function.
        * @param file - File parameter.
        */
        if (file) {
            setUploadedFile(file);
            setIsAnalyzing(true);
            uploadDocumentMutation.mutate(file);
        }
    };
    const handleApplyAiAnalysis = () => {
        applyAiAnalysisMutation.mutate();
    };
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Bill Number" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: bill.billNumber })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Status" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 capitalize', children: bill.status })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Category" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 capitalize', children: bill.category })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Payment Type" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600 capitalize', children: bill.paymentType })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Total Amount" }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600', children: ["$", Number(bill.totalAmount).toLocaleString()] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Start Date" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: bill.startDate })] })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Title" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: bill.title })] }), bill.description && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Description" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: bill.description })] })), bill.vendor && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Vendor" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: bill.vendor })] })), bill.notes && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Notes" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-600', children: bill.notes })] })), bill.paymentType === 'recurrent' && ((0, jsx_runtime_1.jsxs)("div", { className: 'border-t pt-4', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Recurrence End Date" }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 mt-2', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { type: 'date', value: endDate, onChange: (e) => setEndDate(e.target.value), className: 'w-48' }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: handleSetEndDate, disabled: updateBillMutation.isPending, size: 'sm', children: updateBillMutation.isPending ? 'Setting...' : 'Set End Date' })] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500 mt-1', children: "Setting an end date will stop auto-generation of future bills after this date." })] })), bill.costs && bill.costs.length > 1 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Payment Breakdown" }), (0, jsx_runtime_1.jsx)("div", { className: 'space-y-1 mt-1', children: bill.costs.map((cost, index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between text-sm', children: [(0, jsx_runtime_1.jsxs)("span", { children: ["Payment ", index + 1, ":"] }), (0, jsx_runtime_1.jsxs)("span", { children: ["$", Number(cost).toLocaleString()] })] }, index))) })] })), (0, jsx_runtime_1.jsxs)("div", { className: 'border-t pt-4', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Document Upload & AI Analysis" }), (0, jsx_runtime_1.jsxs)("div", { className: 'mt-2 space-y-3', children: [bill.documentPath && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2 p-3 bg-gray-50 rounded-lg', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-4 h-4 text-blue-600' }), (0, jsx_runtime_1.jsx)("span", { className: 'text-sm', children: bill.documentName }), bill.isAiAnalyzed && ((0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: 'outline', className: 'text-xs', children: "AI Analyzed" }))] })), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(input_1.Input, { type: 'file', accept: 'image/*,.pdf', onChange: handleFileUpload, disabled: uploadDocumentMutation.isPending, className: 'flex-1' }), uploadDocumentMutation.isPending && ((0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-500', children: "Uploading & analyzing..." }))] }), bill.isAiAnalyzed && bill.aiAnalysisData && ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'p-3 bg-blue-50 rounded-lg', children: [(0, jsx_runtime_1.jsx)("div", { className: 'text-sm font-medium text-blue-800', children: "AI Analysis Available" }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-xs text-blue-600 mt-1', children: ["Confidence: ", (bill.aiAnalysisData.confidence * 100).toFixed(1), "%"] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: handleApplyAiAnalysis, disabled: applyAiAnalysisMutation.isPending, variant: 'outline', size: 'sm', className: 'w-full', children: applyAiAnalysisMutation.isPending ? 'Applying...' : 'Apply AI Analysis to Form' })] }))] })] }), (0, jsx_runtime_1.jsx)("div", { className: 'border-t pt-4', children: (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center justify-between', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { className: 'text-sm font-medium', children: "Edit Bill Information" }), (0, jsx_runtime_1.jsx)(button_1.Button, { onClick: () => setIsEditing(!isEditing), variant: 'outline', size: 'sm', children: isEditing ? 'Cancel Edit' : 'Edit Bill' })] }) }), isEditing && ((0, jsx_runtime_1.jsx)(BillEditForm_1.BillEditForm, { bill: bill, onSuccess: () => {
                    setIsEditing(false);
                    onSuccess();
                }, onCancel: () => setIsEditing(false) })), (0, jsx_runtime_1.jsx)("div", { className: 'flex justify-end gap-2 pt-4 border-t', children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: onCancel, children: "Close" }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,