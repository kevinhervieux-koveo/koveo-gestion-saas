ed56c0eb4f71cad55fa395ef78221705
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Residences;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const header_1 = require("@/components/layout/header");
const card_1 = require("@/components/ui/card");
const button_1 = require("@/components/ui/button");
const badge_1 = require("@/components/ui/badge");
const input_1 = require("@/components/ui/input");
const select_1 = require("@/components/ui/select");
const skeleton_1 = require("@/components/ui/skeleton");
const dialog_1 = require("@/components/ui/dialog");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const residence_edit_form_1 = require("@/components/forms/residence-edit-form");
/**
 *
 */
function Residences() {
    const [, navigate] = (0, wouter_1.useLocation)();
    const { t } = (0, use_language_1.useLanguage)();
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [selectedBuilding, setSelectedBuilding] = (0, react_1.useState)('all');
    const [selectedFloor, setSelectedFloor] = (0, react_1.useState)('all');
    const [editingResidence, setEditingResidence] = (0, react_1.useState)(null);
    const [currentPage, setCurrentPage] = (0, react_1.useState)(1);
    const itemsPerPage = 10;
    // Check for URL parameters and set building filter
    (0, react_1.useEffect)(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const buildingIdFromUrl = urlParams.get('buildingId');
        if (buildingIdFromUrl && buildingIdFromUrl !== selectedBuilding) {
            setSelectedBuilding(buildingIdFromUrl);
        }
    }, [selectedBuilding]);
    // Fetch residences with search and filters
    const { data: residences, isLoading: residencesLoading, refetch, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences', searchTerm, selectedBuilding, selectedFloor],
        queryFn: async () => {
            const params = new URLSearchParams(); /**
             * If function.
             * @param searchTerm - SearchTerm parameter.
             */ /**
            * If function.
            * @param searchTerm - SearchTerm parameter.
            */
            if (searchTerm) {
                params.append('search', searchTerm);
            } /**
             * If function.
             * @param selectedBuilding && selectedBuilding !== 'all' - selectedBuilding && selectedBuilding !== 'all' parameter.
             */ /**
            * If function.
            * @param selectedBuilding && selectedBuilding !== 'all' - selectedBuilding && selectedBuilding !== 'all' parameter.
            */
            if (selectedBuilding && selectedBuilding !== 'all') {
                params.append('buildingId', selectedBuilding);
            } /**
             * If function.
             * @param selectedFloor && selectedFloor !== 'all' - selectedFloor && selectedFloor !== 'all' parameter.
             */ /**
            * If function.
            * @param selectedFloor && selectedFloor !== 'all' - selectedFloor && selectedFloor !== 'all' parameter.
            */
            if (selectedFloor && selectedFloor !== 'all') {
                params.append('floor', selectedFloor);
            }
            const response = await fetch(`/api/residences?${params}`); /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */ /**
            * If function.
            * @param !response.ok - !response.ok parameter.
            */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            /**
             * If function.
             * @param !response.ok - !response.ok parameter.
             */
            if (!response.ok) {
                throw new Error('Failed to fetch residences');
            }
            return response.json();
        },
    });
    // Fetch buildings for filter dropdown - use manager endpoint for proper permissions
    const { data: buildingsData } = (0, react_query_1.useQuery)({
        queryKey: ['/api/manager/buildings'],
        queryFn: async () => {
            const response = await fetch('/api/manager/buildings');
            if (!response.ok) {
                throw new Error('Failed to fetch buildings');
            }
            return response.json();
        },
    });
    // Extract buildings array from the response
    const buildings = buildingsData?.buildings || [];
    // Fetch all residences to get complete floor list for filter (without search/filter params)
    const { data: allResidences } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences/all'],
        queryFn: async () => {
            const response = await fetch('/api/residences');
            if (!response.ok) {
                throw new Error('Failed to fetch all residences');
            }
            return response.json();
        },
    });
    // Get unique floors from all residences for filter dropdown
    const availableFloors = allResidences
        ? [...new Set(allResidences.map((r) => r.floor).filter((floor) => floor != null))].sort((a, b) => a - b)
        : [];
    // Reset page when filters change
    const handleBuildingChange = (value) => {
        setSelectedBuilding(value);
        setCurrentPage(1);
    };
    const handleFloorChange = (value) => {
        setSelectedFloor(value);
        setCurrentPage(1);
    };
    const handleSearchChange = (value) => {
        setSearchTerm(value);
        setCurrentPage(1);
    };
    // Pagination calculations
    const totalItems = residences?.length || 0;
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const currentResidences = residences?.slice(startIndex, endIndex) || [];
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)(header_1.Header, { title: t('residencesManagement'), subtitle: t('manageResidences') }), (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 overflow-auto p-6', children: (0, jsx_runtime_1.jsxs)("div", { className: 'max-w-7xl mx-auto space-y-6', children: [(0, jsx_runtime_1.jsxs)(card_1.Card, { children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)(card_1.CardTitle, { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Search, { className: 'w-5 h-5' }), t('searchFilters')] }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-1 md:grid-cols-3 gap-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)("label", { className: 'text-sm font-medium', children: t('searchResidences') }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: t('searchUnitTenant'), value: searchTerm, onChange: (e) => handleSearchChange(e.target.value), className: 'w-full' })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)("label", { className: 'text-sm font-medium', children: t('buildingFilter') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedBuilding, onValueChange: handleBuildingChange, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('allBuildings') }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: t('allBuildings') }), buildings?.map((building) => ((0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: building.id, children: building.name }, building.id)))] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)("label", { className: 'text-sm font-medium', children: t('floorFilter') }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: selectedFloor, onValueChange: handleFloorChange, children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: t('allFloors') }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: 'all', children: t('allFloors') }), availableFloors.map((floor) => ((0, jsx_runtime_1.jsxs)(select_1.SelectItem, { value: floor.toString(), children: [t('floor'), " ", floor] }, floor)))] })] })] })] }) })] }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6', children: residencesLoading ? (
                            // Loading skeletons
                            Array.from({ length: 6 }).map((_, i) => ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-6', children: [(0, jsx_runtime_1.jsx)(skeleton_1.Skeleton, { className: 'h-6 w-24 mb-4' }), (0, jsx_runtime_1.jsx)(skeleton_1.Skeleton, { className: 'h-4 w-full mb-2' }), (0, jsx_runtime_1.jsx)(skeleton_1.Skeleton, { className: 'h-4 w-3/4 mb-4' }), (0, jsx_runtime_1.jsxs)("div", { className: 'grid grid-cols-2 gap-2', children: [(0, jsx_runtime_1.jsx)(skeleton_1.Skeleton, { className: 'h-8 w-full' }), (0, jsx_runtime_1.jsx)(skeleton_1.Skeleton, { className: 'h-8 w-full' })] })] }) }, i)))) : totalItems === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { className: 'col-span-full', children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-8 text-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-16 h-16 mx-auto text-gray-400 mb-4' }), (0, jsx_runtime_1.jsx)("h3", { className: 'text-lg font-semibold text-gray-600 mb-2', children: t('noResidencesFound') }), (0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500', children: t('adjustSearchCriteria') })] }) })) : (currentResidences.map((residence) => ((0, jsx_runtime_1.jsx)(card_1.Card, { className: 'hover:shadow-lg transition-shadow', children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-between items-start mb-4', children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("h3", { className: 'font-semibold text-lg flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Home, { className: 'w-4 h-4' }), t('unitNumber'), " ", residence.unitNumber] }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Building, { className: 'w-3 h-3' }), residence.building.name] }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.MapPin, { className: 'w-3 h-3' }), t('floor'), " ", residence.floor || 'N/A'] })] }), (0, jsx_runtime_1.jsx)(badge_1.Badge, { variant: residence.isActive ? 'default' : 'secondary', children: residence.isActive ? t('active') : t('inactive') })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2 mb-4', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-4 text-sm', children: [(0, jsx_runtime_1.jsxs)("span", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bed, { className: 'w-3 h-3' }), residence.bedrooms || 0, " ", t('bed')] }), (0, jsx_runtime_1.jsxs)("span", { className: 'flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Bath, { className: 'w-3 h-3' }), residence.bathrooms || 0, " ", t('bath')] })] }), residence.squareFootage && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600', children: [residence.squareFootage, " ", t('sqFt')] })), residence.parkingSpaceNumbers?.length > 0 && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Car, { className: 'w-3 h-3' }), t('parking'), ": ", residence.parkingSpaceNumbers.join(', ')] })), residence.storageSpaceNumbers?.length > 0 && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-sm text-gray-600 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Package, { className: 'w-3 h-3' }), t('storage'), ": ", residence.storageSpaceNumbers.join(', ')] })), residence.monthlyFees && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-sm font-medium text-green-600', children: ["$", residence.monthlyFees, "/", t('monthShort')] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'mb-4', children: [(0, jsx_runtime_1.jsxs)("h4", { className: 'text-sm font-medium mb-2 flex items-center gap-1', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Users, { className: 'w-3 h-3' }), t('residents'), " (", residence.tenants.length, ")"] }), residence.tenants.length === 0 ? ((0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-gray-500', children: t('noResidentsAssigned') })) : ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-1', children: [residence.tenants.slice(0, 2).map((tenant) => ((0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-600', children: [tenant.firstName, " ", tenant.lastName] }, tenant.id))), residence.tenants.length > 2 && ((0, jsx_runtime_1.jsxs)("p", { className: 'text-xs text-gray-500', children: ["+", residence.tenants.length - 2, " ", t('moreResidents')] }))] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex gap-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'flex-1', onClick: () => navigate(`/manager/residences/documents?residenceId=${residence.id}`), title: t('manageResidenceDocuments'), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: 'w-3 h-3 mr-1' }), t('residenceDocumentsButton')] }), (0, jsx_runtime_1.jsxs)(dialog_1.Dialog, { children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogTrigger, { asChild: true, children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', size: 'sm', className: 'flex-1', onClick: () => setEditingResidence(residence), children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Edit, { className: 'w-3 h-3 mr-1' }), "Edit"] }) }), (0, jsx_runtime_1.jsxs)(dialog_1.DialogContent, { className: 'max-w-2xl max-h-[90vh] overflow-y-auto', children: [(0, jsx_runtime_1.jsx)(dialog_1.DialogHeader, { children: (0, jsx_runtime_1.jsxs)(dialog_1.DialogTitle, { children: ["Edit Unit ", residence.unitNumber] }) }), editingResidence && ((0, jsx_runtime_1.jsx)(residence_edit_form_1.ResidenceEditForm, { residence: editingResidence, onSuccess: () => {
                                                                        refetch();
                                                                        setEditingResidence(null);
                                                                    } }))] })] })] })] }) }, residence.id)))) }), totalPages > 1 && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex justify-center items-center gap-4 mt-6', children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage((prev) => Math.max(prev - 1, 1)), disabled: currentPage === 1, children: "Previous" }), (0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center gap-2', children: [(0, jsx_runtime_1.jsx)("span", { className: 'text-sm text-gray-600', children: "Page" }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: 'number', min: '1', max: totalPages, value: currentPage, onChange: (e) => {
                                                const page = parseInt(e.target.value);
                                                if (page >= 1 && page <= totalPages) {
                                                    setCurrentPage(page);
                                                }
                                            }, onBlur: (e) => {
                                                const page = parseInt(e.target.value);
                                                if (isNaN(page) || page < 1) {
                                                    setCurrentPage(1);
                                                }
                                                else if (page > totalPages) {
                                                    setCurrentPage(totalPages);
                                                }
                                            }, className: 'w-16 text-center' }), (0, jsx_runtime_1.jsxs)("span", { className: 'text-sm text-gray-600', children: ["of ", totalPages] })] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', size: 'sm', onClick: () => setCurrentPage((prev) => Math.min(prev + 1, totalPages)), disabled: currentPage === totalPages, children: "Next" }), (0, jsx_runtime_1.jsxs)("div", { className: 'text-sm text-gray-600', children: ["Showing ", startIndex + 1, "-", Math.min(endIndex, totalItems), " of ", totalItems, " residences"] })] }))] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,