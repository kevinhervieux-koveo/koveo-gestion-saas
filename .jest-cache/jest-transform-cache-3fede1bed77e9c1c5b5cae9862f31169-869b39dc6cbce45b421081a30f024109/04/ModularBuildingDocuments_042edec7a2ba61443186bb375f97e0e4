5bb0dbabff58095eb36f3530927a444e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModularBuildingDocuments;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const lucide_react_1 = require("lucide-react");
const button_1 = require("@/components/ui/button");
const input_1 = require("@/components/ui/input");
const card_1 = require("@/components/ui/card");
const badge_1 = require("@/components/ui/badge");
const queryClient_1 = require("@/lib/queryClient");
const document_management_1 = require("@/components/document-management");
/**
 * ModularBuildingDocuments - Example integration of new modular document components
 * Demonstrates how to use the new reusable components instead of the monolithic DocumentManager
 */
function ModularBuildingDocuments() {
    const [, navigate] = (0, wouter_1.useLocation)();
    const params = (0, wouter_1.useParams)();
    const buildingId = params.buildingId;
    const queryClient = (0, react_query_1.useQueryClient)();
    // State for modals and interactions
    const [isViewModalOpen, setIsViewModalOpen] = (0, react_1.useState)(false);
    const [isEditModalOpen, setIsEditModalOpen] = (0, react_1.useState)(false);
    const [selectedDocumentId, setSelectedDocumentId] = (0, react_1.useState)(null);
    const [isCreating, setIsCreating] = (0, react_1.useState)(false);
    const [searchTerm, setSearchTerm] = (0, react_1.useState)('');
    const [viewMode, setViewMode] = (0, react_1.useState)('grid');
    // Fetch building info
    const { data: building } = (0, react_query_1.useQuery)({
        queryKey: ['/api/manager/buildings', buildingId],
        enabled: !!buildingId,
    });
    // Fetch documents for this building
    const { data: documentResponse, isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/documents', 'building', buildingId],
        queryFn: async () => {
            const response = await (0, queryClient_1.apiRequest)('GET', `/api/documents?buildingId=${buildingId}`);
            return response.json();
        },
        enabled: !!buildingId,
    });
    // Extract documents array from API response
    const documents = Array.isArray(documentResponse?.documents) ? documentResponse.documents : [];
    // Get current user for permissions
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Determine user permissions based on role
    const userPermissions = {
        canView: true,
        canDownload: true,
        canEdit: user?.role === 'manager' || user?.role === 'admin',
        canDelete: user?.role === 'manager' || user?.role === 'admin',
        canCreate: user?.role === 'manager' || user?.role === 'admin',
    };
    // Filter documents based on search
    const filteredDocuments = Array.isArray(documents) ? documents.filter(doc => doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        doc.description?.toLowerCase().includes(searchTerm.toLowerCase())) : [];
    // Handle document interactions
    const handleDocumentView = (documentId) => {
        setSelectedDocumentId(documentId);
        setIsViewModalOpen(true);
    };
    const handleDocumentEdit = (documentId) => {
        setSelectedDocumentId(documentId);
        setIsEditModalOpen(true);
        setIsViewModalOpen(false);
    };
    const handleCreateDocument = () => {
        setSelectedDocumentId(null);
        setIsCreating(true);
        setIsEditModalOpen(true);
    };
    const handleDocumentSuccess = (documentId, action) => {
        console.log(`Document ${action}:`, documentId);
        setIsEditModalOpen(false);
        setIsViewModalOpen(false);
        setIsCreating(false);
        setSelectedDocumentId(null);
        // Refresh the document list to show the new/updated document
        queryClient.invalidateQueries({
            queryKey: ['/api/documents', 'building', buildingId],
        });
        // Also invalidate general documents cache
        queryClient.invalidateQueries({
            queryKey: ['/api/documents'],
        });
    };
    const handleBack = () => {
        navigate('/manager/buildings');
    };
    if (!buildingId) {
        return ((0, jsx_runtime_1.jsx)("div", { className: "flex-1 flex items-center justify-center", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-gray-500 mb-4", children: "Building ID is required" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: handleBack, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), "Back to Buildings"] })] }) }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden p-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col space-y-4 mb-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: "outline", onClick: handleBack, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: "w-4 h-4 mr-2" }), "Back to Buildings"] }), userPermissions.canCreate && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCreateDocument, "data-testid": "button-create-document", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Add Document"] }))] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("h1", { className: "text-2xl font-bold", children: [building?.name || 'Building', " Documents"] }), (0, jsx_runtime_1.jsxs)("p", { className: "text-gray-600 dark:text-gray-400", children: ["Manage documents for ", building?.name || 'this building'] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 mb-6", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-1", children: (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Search documents...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), "data-testid": "input-search-documents" }) }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(button_1.Button, { variant: viewMode === 'grid' ? 'default' : 'outline', size: "sm", onClick: () => setViewMode('grid'), "data-testid": "button-grid-view", children: (0, jsx_runtime_1.jsx)(lucide_react_1.Grid, { className: "w-4 h-4" }) }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: viewMode === 'list' ? 'default' : 'outline', size: "sm", onClick: () => setViewMode('list'), "data-testid": "button-list-view", children: (0, jsx_runtime_1.jsx)(lucide_react_1.List, { className: "w-4 h-4" }) })] })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex-1 overflow-auto", children: isLoading ? ((0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [...Array(6)].map((_, i) => ((0, jsx_runtime_1.jsxs)(card_1.Card, { className: "animate-pulse", children: [(0, jsx_runtime_1.jsx)(card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)("div", { className: "h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4" }) }), (0, jsx_runtime_1.jsx)(card_1.CardContent, { children: (0, jsx_runtime_1.jsx)("div", { className: "h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2" }) })] }, i))) })) : filteredDocuments.length === 0 ? ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsx)(card_1.CardContent, { className: "flex flex-col items-center justify-center py-12", children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-medium mb-2", children: "No documents found" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-500 mb-4", children: searchTerm ? 'No documents match your search.' : 'No documents have been uploaded yet.' }), userPermissions.canCreate && !searchTerm && ((0, jsx_runtime_1.jsxs)(button_1.Button, { onClick: handleCreateDocument, children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plus, { className: "w-4 h-4 mr-2" }), "Add First Document"] }))] }) }) })) : ((0, jsx_runtime_1.jsx)("div", { className: viewMode === 'grid'
                        ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
                        : "space-y-4", children: filteredDocuments.map((document) => ((0, jsx_runtime_1.jsx)(document_management_1.DocumentCard, { title: document.name, documentId: document.id, onViewClick: handleDocumentView, documentType: document.documentType, description: document.description, createdAt: document.createdAt, fileSize: document.fileSize ? Number(document.fileSize) : undefined, mimeType: document.mimeType, uploadedBy: document.uploadedBy?.firstName && document.uploadedBy?.lastName
                            ? `${document.uploadedBy.firstName} ${document.uploadedBy.lastName}`
                            : document.uploadedBy?.email, isVisibleToTenants: document.isVisibleToTenants, compact: viewMode === 'list', showMetadata: true, "data-testid": `document-card-${document.id}` }, document.id))) })) }), filteredDocuments.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mt-6 pt-4 border-t", children: [(0, jsx_runtime_1.jsxs)("p", { className: "text-sm text-gray-500", children: ["Showing ", filteredDocuments.length, " of ", Array.isArray(documents) ? documents.length : 0, " documents"] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "outline", children: [Array.isArray(documents) ? documents.filter(d => d.isVisibleToTenants).length : 0, " visible to tenants"] }), (0, jsx_runtime_1.jsxs)(badge_1.Badge, { variant: "outline", children: [Array.isArray(documents) ? documents.filter(d => d.documentType === 'bylaw').length : 0, " bylaws"] })] })] })), (0, jsx_runtime_1.jsx)(document_management_1.DocumentViewModal, { documentId: selectedDocumentId || '', userPermissions: userPermissions, onEditClick: handleDocumentEdit, isOpen: isViewModalOpen, onOpenChange: setIsViewModalOpen }), (0, jsx_runtime_1.jsx)(document_management_1.DocumentEditModal, { documentId: isCreating ? undefined : selectedDocumentId || undefined, entityType: "building", entityId: buildingId, isOpen: isEditModalOpen, onOpenChange: setIsEditModalOpen, onSuccess: handleDocumentSuccess })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,