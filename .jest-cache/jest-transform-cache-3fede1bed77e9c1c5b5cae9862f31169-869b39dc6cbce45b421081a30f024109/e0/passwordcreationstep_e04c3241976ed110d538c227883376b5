5c7cd1706ea85e85a0c232054d5f458e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordCreationStep = PasswordCreationStep;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const card_1 = require("@/components/ui/card");
const input_1 = require("@/components/ui/input");
const label_1 = require("@/components/ui/label");
const button_1 = require("@/components/ui/button");
const alert_1 = require("@/components/ui/alert");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const password_strength_indicator_1 = require("../password-strength-indicator");
const password_validation_1 = require("@/utils/password-validation");
/**
 * Password Creation Step Component.
 *
 * Secure password creation with strength validation and confirmation.
 * Implements Quebec-compliant security standards for property management.
 * @param root0 - The wizard step props.
 * @param root0.data - Current step data.
 * @param root0.onDataChange - Callback when step data changes.
 * @param root0.onValidationChange - Callback when validation status changes.
 * @returns JSX element for the password creation step.
 */
/**
 * PasswordCreationStep function.
 * @param root0
 * @param root0.data
 * @param root0.onDataChange
 * @param root0.onValidationChange
 * @param root0._data
 * @returns Function result.
 */
function PasswordCreationStep({ _data, onDataChange, onValidationChange }) {
    const { t: _t } = (0, use_language_1.useLanguage)();
    const [formData, setFormData] = (0, react_1.useState)({
        password: '',
        confirmPassword: '',
        isValid: false,
        ..._data,
    });
    const [showPassword, setShowPassword] = (0, react_1.useState)(false);
    const [showConfirmPassword, setShowConfirmPassword] = (0, react_1.useState)(false);
    const [touched, setTouched] = (0, react_1.useState)({
        password: false,
        confirmPassword: false,
    });
    // Validate form whenever password fields change
    (0, react_1.useEffect)(() => {
        const passwordStrength = (0, password_validation_1.validatePasswordStrength)(formData.password);
        const passwordsMatch = formData.password === formData.confirmPassword;
        const hasPassword = formData.password.length > 0;
        const hasConfirmPassword = formData.confirmPassword.length > 0;
        const isValid = passwordStrength.isValid && passwordsMatch && hasPassword && hasConfirmPassword;
        // Only update if validation state actually changed
        if (formData.isValid !== isValid) {
            const updatedData = { ...formData, isValid };
            onDataChange(updatedData);
            onValidationChange(isValid);
        }
    }, [formData.password, formData.confirmPassword, formData.isValid]);
    const handlePasswordChange = (_value) => {
        setFormData((prev) => ({
            ...prev,
            password: _value,
            _error: undefined,
        }));
    };
    const handleConfirmPasswordChange = (_value) => {
        setFormData((prev) => ({
            ...prev,
            confirmPassword: _value,
            _error: undefined,
        }));
    };
    const handleBlur = (field) => {
        setTouched((prev) => ({ ...prev, [field]: true }));
    };
    const getPasswordMatchError = () => {
        if (!touched.confirmPassword || !formData.confirmPassword) {
            return null;
        }
        if (formData.password !== formData.confirmPassword) {
            return 'Les mots de passe ne correspondent pas';
        }
        return null;
    };
    const passwordStrength = (0, password_validation_1.validatePasswordStrength)(formData.password);
    const passwordMatchError = getPasswordMatchError();
    const hasPasswordError = touched.password && !passwordStrength.isValid && formData.password.length > 0;
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'space-y-6 max-w-2xl mx-auto', children: [(0, jsx_runtime_1.jsxs)(alert_1.Alert, { className: 'border-blue-200 bg-blue-50', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-4 w-4 text-blue-600' }), (0, jsx_runtime_1.jsxs)(alert_1.AlertDescription, { className: 'text-blue-800', children: [(0, jsx_runtime_1.jsx)("strong", { children: "S\u00E9curit\u00E9 renforc\u00E9e:" }), " Cr\u00E9ez un mot de passe s\u00E9curis\u00E9 pour prot\u00E9ger votre compte et respecter les standards de s\u00E9curit\u00E9 qu\u00E9b\u00E9cois."] })] }), (0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'pt-6 space-y-6', children: [(0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'password', className: 'text-sm font-medium text-gray-700', children: "Mot de passe *" }), (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lock, { className: 'absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4' }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'password', type: showPassword ? 'text' : 'password', value: formData.password, onChange: (e) => handlePasswordChange(e.target.value), onBlur: () => handleBlur('password'), placeholder: 'Entrez votre mot de passe', className: `pl-10 pr-10 ${hasPasswordError ? 'border-red-500 focus:border-red-500' : ''}`, "aria-describedby": 'password-requirements', "data-testid": 'input-password' }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowPassword(!showPassword), "data-testid": 'button-toggle-password', children: [showPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4 text-gray-400' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4 text-gray-400' })), (0, jsx_runtime_1.jsx)("span", { className: 'sr-only', children: showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe' })] })] }), (0, jsx_runtime_1.jsx)(password_strength_indicator_1.PasswordStrengthIndicator, { password: formData.password, showPassword: showPassword, onToggleVisibility: () => setShowPassword(!showPassword), className: 'mt-3' }), hasPasswordError && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: 'destructive', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: "Le mot de passe ne respecte pas les exigences de s\u00E9curit\u00E9." })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsx)(label_1.Label, { htmlFor: 'confirmPassword', className: 'text-sm font-medium text-gray-700', children: "Confirmer le mot de passe *" }), (0, jsx_runtime_1.jsxs)("div", { className: 'relative', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Lock, { className: 'absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4' }), (0, jsx_runtime_1.jsx)(input_1.Input, { id: 'confirmPassword', type: showConfirmPassword ? 'text' : 'password', value: formData.confirmPassword, onChange: (e) => handleConfirmPasswordChange(e.target.value), onBlur: () => handleBlur('confirmPassword'), placeholder: 'Confirmez votre mot de passe', className: `pl-10 pr-10 ${passwordMatchError ? 'border-red-500 focus:border-red-500' : ''}`, "data-testid": 'input-confirm-password' }), (0, jsx_runtime_1.jsxs)(button_1.Button, { type: 'button', variant: 'ghost', size: 'sm', className: 'absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent', onClick: () => setShowConfirmPassword(!showConfirmPassword), "data-testid": 'button-toggle-confirm-password', children: [showConfirmPassword ? ((0, jsx_runtime_1.jsx)(lucide_react_1.EyeOff, { className: 'h-4 w-4 text-gray-400' })) : ((0, jsx_runtime_1.jsx)(lucide_react_1.Eye, { className: 'h-4 w-4 text-gray-400' })), (0, jsx_runtime_1.jsx)("span", { className: 'sr-only', children: showConfirmPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe' })] })] }), formData.confirmPassword && formData.password === formData.confirmPassword && ((0, jsx_runtime_1.jsxs)("div", { className: 'flex items-center text-sm text-green-600', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Shield, { className: 'h-4 w-4 mr-1' }), "Les mots de passe correspondent"] })), passwordMatchError && ((0, jsx_runtime_1.jsxs)(alert_1.Alert, { variant: 'destructive', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.AlertTriangle, { className: 'h-4 w-4' }), (0, jsx_runtime_1.jsx)(alert_1.AlertDescription, { children: passwordMatchError })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-gray-50 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'text-sm font-medium text-gray-900 mb-2', children: "\uD83D\uDCA1 Conseils de s\u00E9curit\u00E9" }), (0, jsx_runtime_1.jsxs)("ul", { className: 'text-xs text-gray-600 space-y-1', children: [(0, jsx_runtime_1.jsx)("li", { children: "\u2022 Utilisez une combinaison unique de lettres, chiffres et symboles" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 \u00C9vitez les informations personnelles (nom, date de naissance)" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Ne r\u00E9utilisez pas un mot de passe d'un autre compte" }), (0, jsx_runtime_1.jsx)("li", { children: "\u2022 Consid\u00E9rez l'utilisation d'un gestionnaire de mots de passe" })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: 'bg-blue-50 border border-blue-200 p-4 rounded-lg', children: [(0, jsx_runtime_1.jsx)("h4", { className: 'text-sm font-medium text-blue-900 mb-2', children: "\uD83D\uDEE1\uFE0F Conformit\u00E9 Qu\u00E9b\u00E9coise - S\u00E9curit\u00E9 des donn\u00E9es" }), (0, jsx_runtime_1.jsx)("p", { className: 'text-xs text-blue-800', children: "Votre mot de passe est chiffr\u00E9 selon les standards de l'industrie et stock\u00E9 de mani\u00E8re s\u00E9curis\u00E9e conform\u00E9ment \u00E0 la Loi 25 du Qu\u00E9bec. Nous ne pouvons pas voir votre mot de passe une fois qu'il est enregistr\u00E9." })] })] }) })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,