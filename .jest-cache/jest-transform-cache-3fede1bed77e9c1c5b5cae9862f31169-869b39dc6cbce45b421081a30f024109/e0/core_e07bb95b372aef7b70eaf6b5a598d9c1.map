{"file":"/home/runner/workspace/shared/schemas/core.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/shared/schemas/core.ts"],"sourcesContent":["import { sql } from 'drizzle-orm';\nimport {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  uuid,\n  pgEnum,\n  boolean,\n  date,\n  integer,\n  json,\n} from 'drizzle-orm/pg-core';\nimport { createInsertSchema } from 'drizzle-zod';\nimport { z } from 'zod';\nimport { relations } from 'drizzle-orm';\n\n// Core enums\n/**\n * Enum defining user roles in the Quebec property management system.\n * Determines user permissions and access levels across the application.\n */\nexport const userRoleEnum = pgEnum('user_role', [\n  'admin',\n  'manager',\n  'tenant',\n  'resident',\n  'demo_manager',\n  'demo_tenant',\n  'demo_resident',\n]);\n\n/**\n * Enum defining invitation status values for user invitation system.\n * Tracks the lifecycle of user invitations from creation to completion.\n */\nexport const invitationStatusEnum = pgEnum('invitation_status', [\n  'pending',\n  'accepted',\n  'expired',\n  'cancelled',\n]);\n\n// Core tables\n/**\n * Users table for the Koveo Gestion property management system.\n * Stores user authentication and profile information for all system users.\n * Supports Quebec-specific language preferences and role-based access.\n */\nexport const users = pgTable('users', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  username: text('username').notNull().unique(), // Username field required by database\n  email: text('email').notNull().unique(),\n  password: text('password').notNull(),\n  firstName: text('first_name').notNull(),\n  lastName: text('last_name').notNull(),\n  phone: text('phone'),\n  profileImage: text('profile_image'),\n  language: text('language').notNull().default('fr'), // Default to French for Quebec\n  role: userRoleEnum('role').notNull().default('tenant'),\n  isActive: boolean('is_active').notNull().default(true),\n  lastLoginAt: timestamp('last_login_at'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Organizations table storing management companies, syndicates, and co-ownership entities.\n * Represents the legal entities responsible for property management in Quebec.\n */\nexport const organizations = pgTable('organizations', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  name: text('name').notNull(),\n  type: text('type').notNull(), // 'management_company', 'syndicate', 'cooperative', 'condo_association', 'demo'\n  address: text('address').notNull(),\n  city: text('city').notNull(),\n  province: text('province').notNull().default('QC'),\n  postalCode: text('postal_code').notNull(),\n  phone: text('phone'),\n  email: text('email'),\n  website: text('website'),\n  registrationNumber: text('registration_number'), // Quebec business registration\n  isActive: boolean('is_active').notNull().default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * User-Organization relationship table to manage users belonging to organizations.\n * Users can belong to multiple organizations with different roles.\n */\nexport const userOrganizations = pgTable('user_organizations', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: uuid('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  organizationId: uuid('organization_id')\n    .notNull()\n    .references(() => organizations.id, { onDelete: 'cascade' }),\n  organizationRole: userRoleEnum('organization_role').notNull().default('tenant'),\n  isActive: boolean('is_active').notNull().default(true),\n  canAccessAllOrganizations: boolean('can_access_all_organizations').notNull().default(false),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n/**\n * Invitations table for managing user invitations to organizations.\n * Supports role-based invitations with expiration and security features.\n */\nexport const invitations = pgTable('invitations', {\n  id: text('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  organizationId: text('organization_id'),\n  buildingId: text('building_id'),\n  residenceId: text('residence_id'),\n  email: text('email').notNull(),\n  token: text('token').notNull().unique(),\n  role: userRoleEnum('role').notNull(),\n  status: invitationStatusEnum('status').notNull().default('pending'),\n  invitedByUserId: text('invited_by_user_id').notNull(),\n  expiresAt: timestamp('expires_at').notNull(),\n  tokenHash: text('token_hash').notNull(),\n  usageCount: integer('usage_count').notNull().default(0),\n  maxUsageCount: integer('max_usage_count').notNull().default(1),\n  personalMessage: text('personal_message'),\n  invitationContext: json('invitation_context'),\n  securityLevel: text('security_level'),\n  requires2fa: boolean('requires_2fa').notNull().default(false),\n  acceptedAt: timestamp('accepted_at'),\n  acceptedBy: text('accepted_by_user_id'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n  lastAccessedAt: timestamp('last_accessed_at'),\n  ipAddress: text('ip_address'),\n  userAgent: text('user_agent'),\n});\n\n/**\n * Password reset tokens table for secure password reset functionality.\n * Stores temporary tokens that expire after a set time for security.\n */\nexport const passwordResetTokens = pgTable('password_reset_tokens', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: uuid('user_id')\n    .notNull()\n    .references(() => users.id, { onDelete: 'cascade' }),\n  token: text('token').notNull().unique(),\n  tokenHash: text('token_hash').notNull(), // Hashed version for security\n  expiresAt: timestamp('expires_at').notNull(),\n  usedAt: timestamp('used_at'),\n  isUsed: boolean('is_used').notNull().default(false),\n  ipAddress: text('ip_address'),\n  userAgent: text('user_agent'),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n/**\n * Invitation audit log table for tracking invitation operations and security events.\n * Provides comprehensive logging for invitation lifecycle and security monitoring.\n */\nexport const invitationAuditLog = pgTable('invitation_audit_log', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  invitationId: text('invitation_id').references(() => invitations.id, { onDelete: 'cascade' }),\n  action: text('action').notNull(),\n  performedBy: uuid('performed_by').references(() => users.id),\n  ipAddress: text('ip_address'),\n  userAgent: text('user_agent'),\n  details: json('details'),\n  previousStatus: invitationStatusEnum('previous_status'),\n  newStatus: invitationStatusEnum('new_status'),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\n// Permissions enums\nexport const resourceTypeEnum = pgEnum('resource_type', [\n  'user',\n  'users', // Added to handle existing production data\n  'organization',\n  'building',\n  'residence',\n  'bill',\n  'budget',\n  'maintenance_request',\n  'document',\n  'audit_log',\n  'system_settings',\n  'development_pillar',\n  'quality_metric',\n  'feature',\n  'actionable_item',\n  'improvement_suggestion',\n]);\n\nexport const actionEnum = pgEnum('action', [\n  'read',\n  'create',\n  'update',\n  'delete',\n  'manage',\n  'approve',\n  'assign',\n  'share',\n  'export',\n  'backup',\n  'restore',\n]);\n\n// Permissions tables\nexport const permissions = pgTable('permissions', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  name: text('name').notNull().unique(),\n  displayName: text('display_name').notNull(),\n  description: text('description'),\n  resourceType: resourceTypeEnum('resource_type').notNull(),\n  action: actionEnum('action').notNull(),\n  conditions: json('conditions'),\n  isActive: boolean('is_active').notNull().default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\nexport const rolePermissions = pgTable('role_permissions', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  role: userRoleEnum('role').notNull(),\n  permissionId: uuid('permission_id')\n    .notNull()\n    .references(() => permissions.id),\n  grantedBy: uuid('granted_by').references(() => users.id),\n  grantedAt: timestamp('granted_at').defaultNow(),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n\nexport const userPermissions = pgTable('user_permissions', {\n  id: uuid('id')\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: uuid('user_id')\n    .notNull()\n    .references(() => users.id),\n  permissionId: uuid('permission_id')\n    .notNull()\n    .references(() => permissions.id),\n  granted: boolean('granted').notNull().default(true),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Insert schemas - manual Zod schemas to avoid drizzle-zod compatibility issues\nexport const insertUserSchema = z.object({\n  username: z.string().min(1).max(50, 'Username must be between 1-50 characters'),\n  email: z.string().email('Must be a valid email address').toLowerCase(),\n  password: z\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .regex(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*(),.?\":{}|<>])/,\n      'Password must contain uppercase, lowercase, number, and special character'\n    ),\n  firstName: z.string().min(1).max(100, 'First name must be 1-100 characters').trim(),\n  lastName: z.string().min(1).max(100, 'Last name must be 1-100 characters').trim(),\n  phone: z\n    .string()\n    .optional()\n    .refine(\n      (phone) =>\n        !phone || /^(\\+1\\s?)?(\\([0-9]{3}\\)|[0-9]{3})[\\s.-]?[0-9]{3}[\\s.-]?[0-9]{4}$/.test(phone),\n      'Phone must be a valid North American format (e.g., 514-123-4567 or (514) 123-4567)'\n    ),\n  profileImage: z.string().optional(),\n  language: z.string().default('fr'),\n  role: z\n    .enum([\n      'admin',\n      'manager',\n      'tenant',\n      'resident',\n      'demo_manager',\n      'demo_tenant',\n      'demo_resident',\n    ])\n    .default('tenant'),\n});\n\nexport const insertOrganizationSchema = z.object({\n  name: z.string().min(1),\n  type: z.string(),\n  address: z.string(),\n  city: z.string(),\n  province: z.string().default('QC'),\n  postalCode: z.string(),\n  phone: z.string().optional(),\n  email: z.string().email().optional(),\n  website: z.string().url().optional(),\n  registrationNumber: z.string().optional(),\n});\n\nexport const insertUserOrganizationSchema = z.object({\n  userId: z.string().uuid(),\n  organizationId: z.string().uuid(),\n  organizationRole: z\n    .enum([\n      'admin',\n      'manager',\n      'tenant',\n      'resident',\n      'demo_manager',\n      'demo_tenant',\n      'demo_resident',\n    ])\n    .default('tenant'),\n  canAccessAllOrganizations: z.boolean().default(false),\n});\n\nexport const insertInvitationSchema = z.object({\n  organizationId: z.string().uuid().optional(),\n  residenceId: z.union([z.string().uuid(), z.null()]).optional(),\n  email: z.string().email(),\n  role: z.enum([\n    'admin',\n    'manager',\n    'tenant',\n    'resident',\n    'demo_manager',\n    'demo_tenant',\n    'demo_resident',\n  ]),\n  invitedByUserId: z.string().uuid(),\n  expiresAt: z.union([\n    z.date(),\n    z\n      .string()\n      .datetime()\n      .transform((str) => new Date(str)),\n  ]),\n});\n\nexport const insertPasswordResetTokenSchema = z.object({\n  userId: z.string().uuid(),\n  token: z.string(),\n  tokenHash: z.string(),\n  expiresAt: z.date(),\n  ipAddress: z.string().optional(),\n  userAgent: z.string().optional(),\n});\n\nexport const insertInvitationAuditLogSchema = z.object({\n  invitationId: z.string().uuid(),\n  action: z.string(),\n  performedBy: z.string().uuid(),\n  ipAddress: z.string().optional(),\n  userAgent: z.string().optional(),\n  details: z.record(z.string(), z.any()).optional(),\n  previousStatus: z.string().optional(),\n  newStatus: z.string().optional(),\n});\n\nexport const insertPermissionSchema = z.object({\n  name: z.string(),\n  displayName: z.string(),\n  description: z.string().optional(),\n  resourceType: z.string(),\n  action: z.string(),\n  conditions: z.record(z.string(), z.any()).optional(),\n  isActive: z.boolean().default(true),\n});\n\nexport const insertRolePermissionSchema = z.object({\n  role: z.enum([\n    'admin',\n    'manager',\n    'tenant',\n    'resident',\n    'demo_manager',\n    'demo_tenant',\n    'demo_resident',\n  ]),\n  permissionId: z.string().uuid(),\n});\n\nexport const insertUserPermissionSchema = z.object({\n  userId: z.string().uuid(),\n  permissionId: z.string().uuid(),\n  granted: z.boolean().default(true),\n});\n\n// Types\n/**\n *\n */\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n/**\n *\n */\nexport type User = typeof users.$inferSelect;\n\n// Extended user type with assignment data for user management\nexport type UserWithAssignments = User & {\n  organizations: Array<{\n    id: string;\n    name: string;\n    type: string;\n  }>;\n  buildings: Array<{\n    id: string;\n    name: string;\n  }>;\n  residences: Array<{\n    id: string;\n    unitNumber: string;\n    buildingId: string;\n    buildingName: string;\n  }>;\n};\n\n/**\n *\n */\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\n/**\n *\n */\nexport type Organization = typeof organizations.$inferSelect;\n\n/**\n *\n */\nexport type InsertUserOrganization = z.infer<typeof insertUserOrganizationSchema>;\n/**\n *\n */\nexport type UserOrganization = typeof userOrganizations.$inferSelect;\n\n/**\n *\n */\nexport type InsertInvitation = z.infer<typeof insertInvitationSchema>;\n/**\n *\n */\nexport type Invitation = typeof invitations.$inferSelect;\n\n/**\n *\n */\nexport type InsertPasswordResetToken = z.infer<typeof insertPasswordResetTokenSchema>;\n/**\n *\n */\nexport type PasswordResetToken = typeof passwordResetTokens.$inferSelect;\n\n/**\n *\n */\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\n/**\n *\n */\nexport type Permission = typeof permissions.$inferSelect;\n\n/**\n *\n */\nexport type InsertRolePermission = z.infer<typeof insertRolePermissionSchema>;\n/**\n *\n */\nexport type RolePermission = typeof rolePermissions.$inferSelect;\n\n/**\n *\n */\nexport type InsertUserPermission = z.infer<typeof insertUserPermissionSchema>;\n/**\n *\n */\nexport type UserPermission = typeof userPermissions.$inferSelect;\n\n/**\n *\n */\nexport type InsertInvitationAuditLog = z.infer<typeof insertInvitationAuditLogSchema>;\n/**\n *\n */\nexport type InvitationAuditLog = typeof invitationAuditLog.$inferSelect;\n\n// Relations - Temporarily commented out due to drizzle-orm version compatibility\n// TODO: Fix relations import compatibility with current drizzle-orm version\n/*\nexport const usersRelations = relations(users, ({ many }) => ({\n  userOrganizations: many(userOrganizations),\n  sentInvitations: many(invitations, { relationName: 'invitedByUserId' }),\n  acceptedInvitations: many(invitations, { relationName: 'acceptedBy' }),\n  passwordResetTokens: many(passwordResetTokens),\n}));\n*/\n\n/*\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  userOrganizations: many(userOrganizations),\n  invitations: many(invitations),\n}));\n*/\n\n/*\nexport const userOrganizationsRelations = relations(userOrganizations, ({ one }) => ({\n  user: one(users, {\n    fields: [userOrganizations.userId],\n    references: [users.id],\n  }),\n  organization: one(organizations, {\n    fields: [userOrganizations.organizationId],\n    references: [organizations.id],\n  }),\n}));\n*/\n\n/*\nexport const invitationsRelations = relations(invitations, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [invitations.organizationId],\n    references: [organizations.id],\n  }),\n  invitedByUserId: one(users, {\n    fields: [invitations.invitedByUserId],\n    references: [users.id],\n    relationName: 'invitedByUserId',\n  }),\n  acceptedBy: one(users, {\n    fields: [invitations.acceptedBy],\n    references: [users.id],\n    relationName: 'acceptedBy',\n  }),\n}));\n*/\n\n/*\nexport const passwordResetTokensRelations = relations(passwordResetTokens, ({ one }) => ({\n  user: one(users, {\n    fields: [passwordResetTokens.userId],\n    references: [users.id],\n  }),\n}));\n*/\n"],"version":3}