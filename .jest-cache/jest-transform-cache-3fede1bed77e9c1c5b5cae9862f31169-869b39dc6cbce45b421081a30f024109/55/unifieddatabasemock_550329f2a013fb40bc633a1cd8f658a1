3f7bf68c6033ff7e8bec9d439cff0a4d
"use strict";
/**
 * Unified Database Mock for Jest Tests
 * This provides a consistent mock interface that works across all test types
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testUtils = exports.mockSchema = exports.mockDb = exports.clearMockData = exports.generateMockId = void 0;
const globals_1 = require("@jest/globals");
// Global state management for test isolation
let mockIdCounter = 1;
const mockDataStore = new Map();
const generateMockId = () => {
    return `mock-${mockIdCounter++}-${Date.now().toString(36)}`;
};
exports.generateMockId = generateMockId;
const clearMockData = () => {
    mockDataStore.clear();
    mockIdCounter = 1;
};
exports.clearMockData = clearMockData;
// Create a chainable query builder that handles all Drizzle operations
const createQueryBuilder = (defaultResult = []) => {
    const builder = {};
    // All chainable methods return the builder itself
    const chainableMethods = [
        'from', 'where', 'leftJoin', 'innerJoin', 'rightJoin',
        'select', 'set', 'values', 'returning', 'orderBy', 'limit',
        'offset', 'groupBy', 'having', 'onConflictDoUpdate', 'onConflictDoNothing'
    ];
    chainableMethods.forEach(method => {
        builder[method] = globals_1.jest.fn().mockImplementation((...args) => {
            // Special handling for values method to return proper data
            if (method === 'values') {
                const data = args[0];
                builder._insertData = data;
            }
            return builder;
        });
    });
    // Make the builder thenable (promise-like)
    builder.then = globals_1.jest.fn().mockImplementation((resolve) => {
        let result = defaultResult;
        // If this is an insert operation with data, return mock records
        if (builder._insertData) {
            const data = builder._insertData;
            const now = new Date();
            if (Array.isArray(data)) {
                result = data.map(item => ({
                    id: (0, exports.generateMockId)(),
                    ...item,
                    createdAt: now,
                    updatedAt: now
                }));
            }
            else {
                result = [{
                        id: (0, exports.generateMockId)(),
                        ...data,
                        createdAt: now,
                        updatedAt: now
                    }];
            }
        }
        return Promise.resolve(result).then(resolve);
    });
    builder.catch = globals_1.jest.fn().mockImplementation((reject) => {
        return Promise.resolve(defaultResult).catch(reject);
    });
    builder.finally = globals_1.jest.fn().mockImplementation((finallyFn) => {
        return Promise.resolve(defaultResult).finally(finallyFn);
    });
    return builder;
};
// Main mock database object
exports.mockDb = {
    // Core database operations
    query: globals_1.jest.fn().mockImplementation(async (sql) => {
        if (sql.includes('SELECT version()')) {
            return [{ version: 'PostgreSQL 15.0 (Mock)' }];
        }
        return [];
    }),
    // Insert operations
    insert: globals_1.jest.fn().mockImplementation((table) => {
        return createQueryBuilder([{ id: (0, exports.generateMockId)() }]);
    }),
    // Select operations
    select: globals_1.jest.fn().mockImplementation((fields) => {
        return createQueryBuilder([]);
    }),
    // Update operations
    update: globals_1.jest.fn().mockImplementation((table) => {
        return createQueryBuilder({ affectedRows: 1 });
    }),
    // Delete operations
    delete: globals_1.jest.fn().mockImplementation((table) => {
        return createQueryBuilder({ affectedRows: 1 });
    }),
    // Transaction support
    transaction: globals_1.jest.fn().mockImplementation(async (callback) => {
        return await callback(exports.mockDb);
    }),
    // Batch operations
    batch: globals_1.jest.fn().mockImplementation(async (queries) => {
        return queries.map(() => ({ affectedRows: 1 }));
    }),
    // With clause support
    $with: globals_1.jest.fn().mockImplementation(() => createQueryBuilder([])),
    // Raw SQL support
    execute: globals_1.jest.fn().mockImplementation(async () => ({ rows: [] })),
    // Connection management (for integration tests)
    end: globals_1.jest.fn(),
    connect: globals_1.jest.fn()
};
// Mock schema tables for type safety
const createMockTable = (tableName) => ({
    _: {
        name: tableName,
        schema: undefined,
        columns: {},
        baseName: tableName
    },
    // Common column mocks
    id: { name: 'id' },
    email: { name: 'email' },
    name: { name: 'name' },
    role: { name: 'role' },
    userId: { name: 'userId' },
    organizationId: { name: 'organizationId' },
    buildingId: { name: 'buildingId' },
    residenceId: { name: 'residenceId' },
    status: { name: 'status' },
    createdAt: { name: 'createdAt' },
    updatedAt: { name: 'updatedAt' }
});
// Export mock schema for tests to import
exports.mockSchema = {
    // Core tables
    users: createMockTable('users'),
    organizations: createMockTable('organizations'),
    userOrganizations: createMockTable('userOrganizations'),
    invitations: createMockTable('invitations'),
    passwordResetTokens: createMockTable('passwordResetTokens'),
    // Property tables  
    buildings: createMockTable('buildings'),
    residences: createMockTable('residences'),
    userResidences: createMockTable('userResidences'),
    // Document tables
    documents: createMockTable('documents'),
    // Financial tables
    bills: createMockTable('bills'),
    budgets: createMockTable('budgets'),
    monthlyBudgets: createMockTable('monthlyBudgets'),
    // Operations tables
    maintenanceRequests: createMockTable('maintenanceRequests'),
    commonSpaces: createMockTable('commonSpaces'),
    // System tables
    permissions: createMockTable('permissions'),
    userPermissions: createMockTable('userPermissions'),
    rolePermissions: createMockTable('rolePermissions'),
    demands: createMockTable('demands')
};
// Export test utilities
exports.testUtils = {
    clearMockData: exports.clearMockData,
    generateMockId: exports.generateMockId,
    getMockData: () => mockDataStore,
    resetMocks: () => {
        (0, exports.clearMockData)();
        globals_1.jest.clearAllMocks();
    }
};
// Default export for convenience
exports.default = exports.mockDb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,