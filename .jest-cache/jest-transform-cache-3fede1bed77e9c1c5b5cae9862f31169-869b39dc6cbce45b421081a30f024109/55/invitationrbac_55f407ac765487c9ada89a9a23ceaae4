ccf5b70dc8de81b4096c98c219f51d29
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvitationPermissionValidator = exports.InvitationSecurityMonitor = exports.SecurityAlertLevel = void 0;
exports.rateLimitInvitations = rateLimitInvitations;
exports.requireInvitationPermission = requireInvitationPermission;
exports.createEnhancedInvitationAuditLog = createEnhancedInvitationAuditLog;
exports.withPermissionInheritance = withPermissionInheritance;
const drizzle_orm_1 = require("drizzle-orm");
const serverless_1 = require("@neondatabase/serverless");
const schema = __importStar(require("@shared/schema"));
const config_1 = require("../../config");
// Database-based permission checking - no config permissions needed
// Note: createInvitationAuditLog will be defined locally or imported when needed
const ws_1 = __importDefault(require("ws"));
serverless_1.neonConfig.webSocketConstructor = ws_1.default;
if (!process.env.DATABASE_URL) {
    throw new Error('DATABASE_URL must be set. Did you forget to provision a database?');
}
// Use shared database connection to avoid multiple pools
const db_1 = require("../db");
/**
 * Security alert levels for invitation system monitoring.
 */
var SecurityAlertLevel;
(function (SecurityAlertLevel) {
    SecurityAlertLevel["LOW"] = "low";
    SecurityAlertLevel["MEDIUM"] = "medium";
    SecurityAlertLevel["HIGH"] = "high";
    SecurityAlertLevel["CRITICAL"] = "critical";
})(SecurityAlertLevel || (exports.SecurityAlertLevel = SecurityAlertLevel = {}));
/**
 * Rate limiting configuration for invitation operations.
 */
const RATE_LIMITS = {
    CREATE_INVITATION: { count: 10, window: 3600000 }, // 10 per hour
    BULK_INVITATION: { count: 3, window: 3600000 }, // 3 per hour
    VALIDATION_ATTEMPTS: { count: 20, window: 300000 }, // 20 per 5 minutes
    ACCEPT_ATTEMPTS: { count: 5, window: 3600000 }, // 5 per hour
};
/**
 * In-memory rate limiting store (in production, use Redis).
 */
const rateLimitStore = new Map();
/**
 * Enhanced security monitoring for invitation operations.
 * Tracks suspicious activities and generates alerts.
 */
class InvitationSecurityMonitor {
    static alertCallbacks = [];
    /**
     * Register callback for security alerts.
     * @param callback
     */
    static onAlert(callback) {
        this.alertCallbacks.push(callback);
    }
    /**
     * Trigger a security alert.
     * @param alert
     */
    static async triggerAlert(alert) {
        console.log('🚨 Security Alert:', {
            description: alert.description,
            userId: alert.userId,
            ipAddress: alert.ipAddress,
            metadata: alert.metadata,
        });
        // Execute alert callbacks
        this.alertCallbacks.forEach((callback) => {
            try {
                callback(alert);
            }
            catch (error) {
                console.error('❌ Error in security alert callback:', error);
            }
        });
        // Log security alert to database
        try {
            await db_1.db.insert(schema.invitationAuditLog).values({
                invitationId: alert.metadata?.invitationId || null,
                action: 'security_alert',
                performedBy: alert.userId || null,
                ipAddress: alert.ipAddress,
                userAgent: alert.metadata?.userAgent,
                details: {
                    alertLevel: alert.level,
                    alertType: alert.type,
                    description: alert.description,
                    metadata: alert.metadata,
                },
                previousStatus: null,
                newStatus: null,
            });
        }
        catch (error) {
            console.error('❌ Error logging security alert to database:', error);
        }
    }
    /**
     * Monitor invitation access patterns for suspicious activity.
     * @param userId
     * @param action
     * @param ipAddress
     * @param userAgent
     * @param metadata
     */
    static async monitorInvitationAccess(userId, action, ipAddress, userAgent, metadata) {
        const key = `${userId}:${action}`;
        const now = Date.now();
        const windowStart = now - 5 * 60 * 1000; // 5 minutes
        // Count recent actions
        const recentActions = await db_1.db
            .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
            .from(schema.invitationAuditLog)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitationAuditLog.performedBy, userId), (0, drizzle_orm_1.eq)(schema.invitationAuditLog.action, action), (0, drizzle_orm_1.gte)(schema.invitationAuditLog.createdAt, new Date(windowStart))));
        const actionCount = recentActions[0]?.count || 0;
        // Check for suspicious patterns
        if (actionCount > 10) {
            await this.triggerAlert({
                level: SecurityAlertLevel.HIGH,
                type: 'excessive_invitation_actions',
                description: `User ${userId} performed ${actionCount} ${action} actions in 5 minutes`,
                userId,
                ipAddress,
                metadata: { action, count: actionCount, userAgent, ...metadata },
            });
        }
        // Check for failed invitation validations
        if (action === 'validation_failed' && actionCount > 5) {
            await this.triggerAlert({
                level: SecurityAlertLevel.MEDIUM,
                type: 'multiple_validation_failures',
                description: `User ${userId} had ${actionCount} failed token validations`,
                userId,
                ipAddress,
                metadata: { action, count: actionCount, userAgent, ...metadata },
            });
        }
        // Monitor IP-based patterns
        if (ipAddress) {
            const ipActions = await db_1.db
                .select({ count: (0, drizzle_orm_1.sql) `count(*)` })
                .from(schema.invitationAuditLog)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.invitationAuditLog.ipAddress, ipAddress), (0, drizzle_orm_1.eq)(schema.invitationAuditLog.action, action), (0, drizzle_orm_1.gte)(schema.invitationAuditLog.createdAt, new Date(windowStart))));
            const ipActionCount = ipActions[0]?.count || 0;
            if (ipActionCount > 20) {
                await this.triggerAlert({
                    level: SecurityAlertLevel.CRITICAL,
                    type: 'ip_based_attack',
                    description: `IP ${ipAddress} performed ${ipActionCount} ${action} actions in 5 minutes`,
                    ipAddress,
                    metadata: { action, count: ipActionCount, userAgent, ...metadata },
                });
            }
        }
    }
}
exports.InvitationSecurityMonitor = InvitationSecurityMonitor;
/**
 * Rate limiting middleware for invitation operations.
 * @param maxRequests
 * @param windowMs
 */
/**
 * RateLimitInvitations function.
 * @param maxRequests
 * @param windowMs
 * @returns Function result.
 */
function rateLimitInvitations(maxRequests, windowMs = 3600000) {
    return (req, res, next) => {
        const key = `${req.user?.id || req.ip}:${req.method}:${req.path}`;
        const now = Date.now();
        const current = rateLimitStore.get(key);
        if (!current || now > current.resetTime) {
            rateLimitStore.set(key, { count: 1, resetTime: now + windowMs });
            return next();
        }
        if (current.count >= maxRequests) {
            // Log rate limit exceeded
            InvitationSecurityMonitor.monitorInvitationAccess(req.user?.id || 'anonymous', 'rate_limit_exceeded', req.ip, req.get('User-Agent'), { path: req.path, method: req.method });
            return res.status(429).json({
                message: 'Rate limit exceeded',
                code: 'RATE_LIMIT_EXCEEDED',
                retryAfter: Math.ceil((current.resetTime - now) / 1000),
            });
        }
        current.count++;
        next();
    };
}
/**
 * Database-level permission validation for invitation operations.
 */
class InvitationPermissionValidator {
    /**
     * Validate if user can invite based on role hierarchy and organization context.
     * @param inviterId
     * @param inviterRole
     * @param targetRole
     * @param organizationId
     * @param buildingId
     */
    static async validateInvitePermission(inviterId, inviterRole, targetRole, organizationId, buildingId) {
        // Admin can invite anyone
        if (inviterRole === 'admin') {
            return { valid: true };
        }
        // Check role hierarchy
        if (!(0, config_1.hasRoleOrHigher)(inviterRole, 'manager')) {
            return { valid: false, reason: 'Insufficient role privileges to invite users' };
        }
        // Manager restrictions: can invite resident, manager, tenant within their organization
        if (inviterRole === 'manager') {
            // Managers can invite resident, manager, tenant (but not admin)
            if (!['resident', 'manager', 'tenant'].includes(targetRole)) {
                return {
                    valid: false,
                    reason: 'Managers can only invite resident, manager, and tenant roles',
                };
            }
            // Organization validation - managers can only invite within their organization
            if (organizationId) {
                // Check if the inviter belongs to the specified organization
                const inviterOrganization = await db_1.db
                    .select()
                    .from(schema.users)
                    .leftJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.buildings.organizationId, organizationId))
                    .leftJoin(schema.residences, (0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id))
                    .leftJoin(schema.userResidences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.users.id, inviterId), (0, drizzle_orm_1.eq)(schema.userResidences.userId, inviterId)))
                    .limit(1);
                if (inviterOrganization.length === 0) {
                    return {
                        valid: false,
                        reason: 'Managers can only invite users to their own organization',
                    };
                }
            }
            else {
                return { valid: false, reason: 'Organization ID is required for manager invitations' };
            }
        }
        return { valid: true };
    }
    /**
     * Validate if user can manage specific invitation.
     * @param userId
     * @param userRole
     * @param invitationId
     */
    static async validateInvitationManagement(userId, userRole, invitationId) {
        // Admin can manage any invitation
        if (userRole === 'admin') {
            return { valid: true };
        }
        // Get invitation details
        const [invitation] = await db_1.db
            .select()
            .from(schema.invitations)
            .where((0, drizzle_orm_1.eq)(schema.invitations.id, invitationId))
            .limit(1);
        if (!invitation) {
            return { valid: false, reason: 'Invitation not found' };
        }
        // Users can only manage their own invitations
        if (invitation.invitedBy !== userId) {
            return { valid: false, reason: 'Can only manage own invitations' };
        }
        return { valid: true };
    }
    /**
     * Validate bulk invitation operation.
     * @param inviterId
     * @param inviterRole
     * @param invitations
     */
    static async validateBulkInvitation(inviterId, inviterRole, invitations) {
        const invalidInvitations = [];
        for (let i = 0; i < invitations.length; i++) {
            const invitation = invitations[i];
            const validation = await this.validateInvitePermission(inviterId, inviterRole, invitation.role, invitation.organizationId, invitation.buildingId);
            if (!validation.valid) {
                invalidInvitations.push(i);
            }
        }
        if (invalidInvitations.length > 0) {
            return {
                valid: false,
                reason: `${invalidInvitations.length} invitations violate permission rules`,
                invalidInvitations,
            };
        }
        return { valid: true };
    }
}
exports.InvitationPermissionValidator = InvitationPermissionValidator;
/**
 * Enhanced RBAC middleware specifically for invitation operations.
 * Combines role-based permissions with context-aware validation.
 * @param action
 * @param _options
 * @param _options.validateContext
 * @param _options.requireOwnership
 * @param _options.allowSelfAccess
 * @param _options.auditAction
 */
/**
 * RequireInvitationPermission function.
 * @param action
 * @param _options
 * @param _options.validateContext
 * @param _options.requireOwnership
 * @param _options.allowSelfAccess
 * @param _options.auditAction
 * @param __options
 * @param __options.validateContext
 * @param __options.requireOwnership
 * @param __options.allowSelfAccess
 * @param __options.auditAction
 * @returns Function result.
 */
function requireInvitationPermission(action, __options = {}) {
    return async (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({
                message: 'Authentication required',
                code: 'AUTH_REQUIRED',
            });
        }
        try {
            // Check basic permission based on role hierarchy
            const hasPermission = (0, config_1.hasRoleOrHigher)(req.user.role, 'manager');
            if (!hasPermission) {
                await InvitationSecurityMonitor.triggerAlert({
                    level: SecurityAlertLevel.MEDIUM,
                    type: 'permission_denied',
                    description: `User ${req.user.id} (${req.user.role}) attempted unauthorized action: ${action}`,
                    userId: req.user.id,
                    ipAddress: req.ip,
                    metadata: { action, path: req.path, method: req.method },
                });
                return res.status(403).json({
                    message: 'Insufficient permissions',
                    code: 'PERMISSION_DENIED',
                    required: action,
                    userRole: req.user.role,
                });
            }
            // Context-aware validation for specific operations
            if (_options.validateContext && req.body) {
                if (action === 'create:invitation') {
                    const { role, organizationId, buildingId } = req.body;
                    const validation = await InvitationPermissionValidator.validateInvitePermission(req.user.id, req.user.role, role, organizationId, buildingId);
                    if (!validation.valid) {
                        await InvitationSecurityMonitor.triggerAlert({
                            level: SecurityAlertLevel.HIGH,
                            type: 'context_permission_violation',
                            description: `User ${req.user.id} violated context permission: ${validation.reason}`,
                            userId: req.user.id,
                            ipAddress: req.ip,
                            metadata: { action, reason: validation.reason, targetRole: role },
                        });
                        return res.status(403).json({
                            message: validation.reason || 'Context permission denied',
                            code: 'CONTEXT_PERMISSION_DENIED',
                        });
                    }
                }
                if (action === 'bulk:invitation') {
                    const { invitations } = req.body;
                    const validation = await InvitationPermissionValidator.validateBulkInvitation(req.user.id, req.user.role, invitations);
                    if (!validation.valid) {
                        return res.status(403).json({
                            message: validation.reason || 'Bulk invitation permission denied',
                            code: 'BULK_PERMISSION_DENIED',
                            invalidInvitations: validation.invalidInvitations,
                        });
                    }
                }
            }
            // Ownership validation for management operations
            if (_options.requireOwnership && req.params.id) {
                const validation = await InvitationPermissionValidator.validateInvitationManagement(req.user.id, req.user.role, req.params.id);
                if (!validation.valid) {
                    return res.status(403).json({
                        message: validation.reason || 'Not authorized to manage this invitation',
                        code: 'OWNERSHIP_REQUIRED',
                    });
                }
            }
            // Monitor invitation access
            await InvitationSecurityMonitor.monitorInvitationAccess(req.user.id, _options.auditAction || action, req.ip, req.get('User-Agent'), { path: req.path, method: req.method });
            next();
        }
        catch (error) {
            console.error('❌ Permission validation failed:', error);
            return res.status(500).json({
                message: 'Permission validation failed',
                code: 'RBAC_ERROR',
            });
        }
    };
}
/**
 * Enhanced audit logging for invitation operations.
 * @param invitationId
 * @param action
 * @param performedBy
 * @param req
 * @param previousStatus
 * @param newStatus
 * @param details
 */
/**
 * CreateEnhancedInvitationAuditLog function.
 * @param invitationId
 * @param action
 * @param performedBy
 * @param req
 * @param previousStatus
 * @param newStatus
 * @param details
 * @returns Function result.
 */
async function createEnhancedInvitationAuditLog(invitationId, action, performedBy, req, previousStatus, newStatus, details) {
    try {
        // Get additional context
        const ipAddress = req.ip || req.connection.remoteAddress || 'unknown';
        const userAgent = req.get('User-Agent') || 'unknown';
        const referrer = req.get('Referer');
        const forwardedFor = req.get('X-Forwarded-For');
        // Enhanced details with security context
        const enhancedDetails = {
            ...details,
            security: {
                ipAddress,
                userAgent,
                referrer,
                forwardedFor,
                timestamp: new Date().toISOString(),
                sessionId: req.sessionID,
            },
        };
        // Create audit log entry
        await db_1.db.insert(schema.invitationAuditLog).values([
            {
                invitationId,
                action,
                performedBy,
                ipAddress,
                userAgent,
                details: enhancedDetails,
                previousStatus: previousStatus,
                newStatus: newStatus,
            },
        ]);
        // Log to console for immediate visibility
        console.log('📝 Enhanced invitation audit log created:', {
            invitationId,
            performedBy,
            ipAddress,
            action,
            previousStatus,
            newStatus,
        });
    }
    catch (error) {
        console.error('❌ Error creating enhanced invitation audit log:', error);
    }
}
/**
 * Delegation and inheritance middleware for invitation permissions.
 * Allows temporary permission elevation based on organizational hierarchy.
 * @param baseAction
 */
/**
 * WithPermissionInheritance function.
 * @param baseAction
 * @returns Function result.
 */
function withPermissionInheritance(baseAction) {
    return async (req, res, next) => {
        if (!req.user) {
            return res.status(401).json({
                message: 'Authentication required',
                code: 'AUTH_REQUIRED',
            });
        }
        try {
            // Check if user has direct permission based on role hierarchy
            const hasDirectPermission = (0, config_1.hasRoleOrHigher)(req.user.role, 'manager');
            if (hasDirectPermission) {
                return next();
            }
            // Check for delegated permissions based on organizational context
            if (req.body?.organizationId || req.params.organizationId) {
                const orgId = req.body?.organizationId || req.params.organizationId;
                // Check if user has elevated permissions in this organization
                const userOrgRole = await db_1.db
                    .select()
                    .from(schema.users)
                    .leftJoin(schema.buildings, (0, drizzle_orm_1.eq)(schema.buildings.organizationId, orgId))
                    .leftJoin(schema.residences, (0, drizzle_orm_1.eq)(schema.residences.buildingId, schema.buildings.id))
                    .leftJoin(schema.userResidences, (0, drizzle_orm_1.eq)(schema.userResidences.residenceId, schema.residences.id))
                    .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema.users.id, req.user.id), (0, drizzle_orm_1.eq)(schema.userResidences.relationshipType, 'owner')))
                    .limit(1);
                // Owners in an organization get elevated permissions for tenant management
                if (userOrgRole.length > 0 && baseAction === 'create:invitation') {
                    const validation = await InvitationPermissionValidator.validateInvitePermission(req.user.id, 'manager', // Temporarily elevate to manager permissions
                    req.body?.role, orgId, req.body?.buildingId);
                    if (validation.valid) {
                        // Log permission inheritance
                        await createEnhancedInvitationAuditLog(req.body?.invitationId || 'unknown', 'permission_inherited', req.user.id, req, undefined, undefined, { baseAction, inheritedLevel: 'manager', reason: 'organizational_owner' });
                        return next();
                    }
                }
            }
            return res.status(403).json({
                message: 'Insufficient permissions',
                code: 'PERMISSION_DENIED',
                required: baseAction,
                userRole: req.user.role,
            });
        }
        catch (error) {
            console.error('❌ Permission inheritance check failed:', error);
            return res.status(500).json({
                message: 'Permission validation failed',
                code: 'INHERITANCE_ERROR',
            });
        }
    };
}
// Initialize security monitoring
InvitationSecurityMonitor.onAlert((alert) => {
    // In production, you might want to:
    // - Send alerts to security team
    // - Log to external monitoring service
    // - Trigger automated responses
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,