{"file":"/home/runner/workspace/server/services/bill-generation-service.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/services/bill-generation-service.ts"],"sourcesContent":["import { db } from '../db';\nimport { bills } from '../../shared/schemas/financial';\nimport { users } from '../../shared/schema';\nimport { eq, and, gte, isNull, or } from 'drizzle-orm';\nimport { v4 as uuidv4 } from 'uuid';\nimport type { Bill } from '../../shared/schema';\n\n/**\n * Advanced Bill Generation Service.\n *\n * Handles the sophisticated bill management system including:\n * - Creating future bill instances (not just money flow entries)\n * - Multiple payment plans (60% now, 40% later, etc.)\n * - Recurrence patterns with auto-generated bill chains\n * - 3-year projection of future bills\n * - Parent-child bill relationships.\n */\nexport class BillGenerationService {\n  /**\n   * Get bills by reference (auto-generated bills linked to a parent).\n   * @param parentBillId\n   */\n  private async getBillsByReference(parentBillId: string): Promise<Bill[]> {\n    try {\n      const existingBills = await db.select().from(bills).where(eq(bills.reference, parentBillId));\n\n      return existingBills as Bill[];\n    } catch (error: any) {\n      console.error('❌ Error getting bills by reference:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Set end date for a recurrent bill (stops future auto-generation).\n   * @param billId\n   * @param endDate\n   */\n  async setRecurrenceEndDate(billId: string, endDate: Date): Promise<void> {\n    try {\n      await db\n        .update(bills)\n        .set({\n          endDate: endDate.toISOString().split('T')[0],\n          updatedAt: new Date(),\n        })\n        .where(eq(bills.id, billId));\n    } catch (error: any) {\n      console.error('❌ Error setting recurrence end date:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate future bill instances for a recurrent bill up to 3 years.\n   * Creates actual bill records that users can interact with individually.\n   * @param parentBill\n   */\n  async generateFutureBillInstances(parentBill: Bill): Promise<{\n    billsCreated: number;\n    generatedUntil: string;\n  }> {\n    if (parentBill.paymentType !== 'recurrent') {\n      throw new Error('Only recurrent bills can generate future instances');\n    }\n\n\n    // Calculate projection period - respect endDate if set\n    const startDate = new Date(parentBill.startDate);\n    startDate.setFullYear(startDate.getFullYear() + 1); // Start from next year\n\n    let endDate: Date;\n    if (parentBill.endDate) {\n      endDate = new Date(parentBill.endDate);\n    } else {\n      endDate = new Date();\n      endDate.setFullYear(endDate.getFullYear() + 3); // 3 years from now\n    }\n\n    // Check if there are already auto-generated bills to avoid duplicates\n    const existingBills = await this.getBillsByReference(parentBill.id);\n    if (existingBills.length > 0) {\n      console.log(\n        `⚠️ Found ${existingBills.length} existing auto-generated bills, skipping generation`\n      );\n      return {\n        billsCreated: 0,\n        generatedUntil: endDate.toISOString().split('T')[0],\n      };\n    }\n\n    const generatedBills: unknown[] = [];\n    const currentDate = new Date(startDate);\n    let billsCreated = 0;\n\n    // Calculate occurrences based on schedule (auto-detect from parent bill)\n    const scheduleType = this.detectScheduleType(parentBill);\n    const occurrences = this.calculateOccurrences(currentDate, endDate, scheduleType);\n\n    for (const occurrenceDate of occurrences) {\n      // Handle multiple payment plans\n      const paymentParts = this.calculatePaymentParts(parentBill, occurrenceDate);\n\n      for (let partIndex = 0; partIndex < paymentParts.length; partIndex++) {\n        const paymentPart = paymentParts[partIndex];\n\n        const generatedBill = {\n          id: uuidv4(),\n          buildingId: parentBill.buildingId,\n          billNumber: this.generateBillNumber(parentBill, occurrenceDate, partIndex),\n          title: this.generateBillTitle(parentBill, occurrenceDate, partIndex, paymentParts.length),\n          description: `Auto-generated from: ${parentBill.title}`,\n          category: parentBill.category,\n          vendor: parentBill.vendor || 'Auto-Generated',\n          paymentType: 'unique' as const, // Generated bills are unique payments\n          schedulePayment: 'unique' as const,\n          costs: [paymentPart.amount.toString()],\n          totalAmount: paymentPart.amount.toString(),\n          startDate: paymentPart.dueDate.toISOString().split('T')[0],\n          endDate: null,\n          status: 'draft' as const,\n          documentPath: null,\n          documentName: null,\n          isAiAnalyzed: false,\n          aiAnalysisData: null,\n          notes: `Auto-generated from: ${parentBill.title} (Bill #${parentBill.billNumber}). Generated as part ${partIndex + 1}/${paymentParts.length} for ${occurrenceDate.toLocaleDateString()}.`,\n          autoGenerated: true,\n          reference: parentBill.id,\n          createdBy: parentBill.createdBy,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n\n        generatedBills.push(generatedBill);\n        billsCreated++;\n\n        // Batch insert every 100 bills for performance\n        if (generatedBills.length >= 100) {\n          await this.insertBillsBatch(generatedBills);\n          generatedBills.length = 0;\n        }\n      }\n    }\n\n    // Insert remaining bills\n    if (generatedBills.length > 0) {\n      await this.insertBillsBatch(generatedBills);\n    }\n\n\n    return {\n      billsCreated,\n      generatedUntil: endDate.toISOString().split('T')[0],\n    };\n  }\n\n  /**\n   * Handle multiple payment logic for bills.\n   * Examples:\n   * - 60% now, 40% in 2 months\n   * - 12 monthly payments of equal amounts\n   * - Quarterly payments with varying amounts.\n   * @param parentBill\n   * @param occurrenceDate\n   */\n  private calculatePaymentParts(\n    parentBill: Bill,\n    occurrenceDate: Date\n  ): Array<{\n    amount: number;\n    dueDate: Date;\n    partNumber: number;\n  }> {\n    const costs = parentBill.costs.map((cost) => parseFloat(cost));\n    const paymentParts: Array<{ amount: number; dueDate: Date; partNumber: number }> = [];\n\n    if (costs.length === 1) {\n      // Single payment\n      paymentParts.push({\n        amount: costs[0],\n        dueDate: new Date(occurrenceDate),\n        partNumber: 1,\n      });\n    } else {\n      // Multiple payments - create payment schedule\n      costs.forEach((amount, _index) => {\n        const dueDate = new Date(occurrenceDate);\n\n        // For multiple costs, spread payments over time\n        // First payment on occurrence date, subsequent payments monthly\n        dueDate.setMonth(dueDate.getMonth() + _index);\n\n        paymentParts.push({\n          amount,\n          dueDate,\n          partNumber: _index + 1,\n        });\n      });\n    }\n\n    return paymentParts;\n  }\n\n  /**\n   * Detect schedule type from parent bill characteristics.\n   * @param parentBill\n   */\n  private detectScheduleType(parentBill: Bill): string {\n    const costs = parentBill.costs || [];\n\n    // Auto-detect based on cost array length and bill patterns\n    if (costs.length === 12) {\n      return 'monthly'; // 12 payments = monthly\n    } else if (costs.length === 4) {\n      return 'quarterly'; // 4 payments = quarterly\n    } else if (costs.length === 2) {\n      return 'yearly'; // 2 payments = bi-annual, treat as yearly with split\n    } else if (costs.length === 1) {\n      // Single payment - determine frequency from title/description\n      const title = parentBill.title.toLowerCase();\n      if (title.includes('annual') || title.includes('yearly')) {\n        return 'yearly';\n      } else if (title.includes('quarterly')) {\n        return 'quarterly';\n      } else if (title.includes('monthly')) {\n        return 'monthly';\n      } else {\n        return 'yearly'; // Default to yearly\n      }\n    }\n\n    return 'yearly'; // Default fallback\n  }\n\n  /**\n   * Calculate all occurrence dates based on schedule type.\n   * @param startDate\n   * @param endDate\n   * @param scheduleType\n   */\n  private calculateOccurrences(startDate: Date, endDate: Date, scheduleType: string): Date[] {\n    const occurrences: Date[] = [];\n    const currentDate = new Date(startDate);\n\n    // Standard schedule types\n    while (currentDate <= endDate) {\n      occurrences.push(new Date(currentDate));\n\n      switch (scheduleType) {\n        case 'weekly':\n          currentDate.setDate(currentDate.getDate() + 7);\n          break;\n        case 'monthly':\n          currentDate.setMonth(currentDate.getMonth() + 1);\n          break;\n        case 'quarterly':\n          currentDate.setMonth(currentDate.getMonth() + 3);\n          break;\n        case 'yearly':\n          currentDate.setFullYear(currentDate.getFullYear() + 1);\n          break;\n        default:\n          throw new Error(`Unknown schedule type: ${scheduleType}`);\n      }\n\n      // Safety check to prevent infinite loops\n      if (occurrences.length > 10000) {\n        break;\n      }\n    }\n\n    return occurrences;\n  }\n\n  /**\n   * Handle custom recurring dates (yearly repetition).\n   * @param startDate\n   * @param endDate\n   * @param customDates\n   */\n  private calculateCustomOccurrences(\n    startDate: Date,\n    endDate: Date,\n    customDates: string[]\n  ): Date[] {\n    const occurrences: Date[] = [];\n    const startYear = startDate.getFullYear();\n    const endYear = endDate.getFullYear();\n\n    for (let year = startYear; year <= endYear; year++) {\n      for (const dateStr of customDates) {\n        const customDate = new Date(dateStr);\n        customDate.setFullYear(year);\n\n        if (customDate >= startDate && customDate <= endDate) {\n          occurrences.push(new Date(customDate));\n        }\n      }\n    }\n\n    return occurrences.sort((a, b) => a.getTime() - b.getTime());\n  }\n\n  /**\n   * Generate unique bill number for auto-generated bills.\n   * @param parentBill\n   * @param occurrenceDate\n   * @param partIndex\n   */\n  private generateBillNumber(parentBill: Bill, occurrenceDate: Date, partIndex: number): string {\n    const dateStr = occurrenceDate.toISOString().slice(0, 7); // YYYY-MM\n    const partSuffix = partIndex > 0 ? `-P${partIndex + 1}` : '';\n    return `${parentBill.billNumber}-${dateStr}${partSuffix}`;\n  }\n\n  /**\n   * Generate descriptive title for auto-generated bills.\n   * @param parentBill\n   * @param occurrenceDate\n   * @param partIndex\n   * @param totalParts\n   */\n  private generateBillTitle(\n    parentBill: Bill,\n    occurrenceDate: Date,\n    partIndex: number,\n    totalParts: number\n  ): string {\n    const monthYear = occurrenceDate.toLocaleDateString('en-US', {\n      month: 'long',\n      year: 'numeric',\n    });\n\n    if (totalParts > 1) {\n      return `${parentBill.title} ${monthYear} (Auto-Generated)`;\n    } else {\n      return `${parentBill.title} ${monthYear} (Auto-Generated)`;\n    }\n  }\n\n  /**\n   * Clean up existing auto-generated bills for a parent bill.\n   * @param parentBillId\n   */\n  private async cleanupExistingGeneratedBills(parentBillId: string): Promise<void> {\n    try {\n      const result = await db\n        .delete(bills)\n        .where(\n          and(\n            eq(bills.reference, parentBillId),\n            eq(bills.autoGenerated, true),\n            or(eq(bills.status, 'draft'), eq(bills.status, 'sent'))\n          )\n        );\n      console.log(`🗑️ Cleaned up auto-generated bills for parent bill ${parentBillId}`);\n    } catch (error: any) {\n      console.error('❌ Error cleaning up generated bills:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Batch insert bills for performance.\n   * @param billBatch\n   */\n  private async insertBillsBatch(billBatch: any[]): Promise<void> {\n    try {\n      await db.insert(bills).values(billBatch);\n      console.log(`✅ Batch inserted ${billBatch.length} bills`);\n    } catch (error: any) {\n      console.error('❌ Error inserting bill batch:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update all future auto-generated bills when the parent bill is modified.\n   * @param parentBillId\n   * @param updates\n   */\n  async updateGeneratedBillsFromParent(\n    parentBillId: string,\n    updates: Partial<Bill>\n  ): Promise<{\n    billsUpdated: number;\n  }> {\n\n    // Find all auto-generated bills for this parent\n    const generatedBills = await db\n      .select()\n      .from(bills)\n      .where(and(eq(bills.reference, parentBillId), eq(bills.autoGenerated, true)));\n\n    let billsUpdated = 0;\n\n    for (const generatedBill of generatedBills) {\n      const updatedFields: Partial<Bill> = {};\n\n      // Update fields that should propagate to generated bills\n      if (updates.title) {\n        // Preserve the date and part information in the title\n        const titleParts = generatedBill.title.split(' - ');\n        if (titleParts.length >= 2) {\n          updatedFields.title = `${updates.title} - ${titleParts.slice(1).join(' - ')}`;\n        }\n      }\n\n      if (updates.category) {\n        updatedFields.category = updates.category;\n      }\n      if (updates.vendor) {\n        updatedFields.vendor = updates.vendor;\n      }\n      if (updates.notes) {\n        updatedFields.notes = `Auto-generated bill - ${updates.notes}`;\n      }\n\n      if (Object.keys(updatedFields).length > 0) {\n        updatedFields.updatedAt = new Date();\n\n        await db.update(bills).set(updatedFields).where(eq(bills.id, generatedBill.id));\n\n        billsUpdated++;\n      }\n    }\n\n\n    return { billsUpdated };\n  }\n\n  /**\n   * Delete future auto-generated bills with cascade options.\n   * @param parentBillId\n   * @param deleteAllFuture\n   */\n  async deleteGeneratedBills(\n    parentBillId: string,\n    deleteAllFuture: boolean = false\n  ): Promise<{\n    billsDeleted: number;\n  }> {\n    console.log(\n      `🗑️ Deleting generated bills for parent ${parentBillId}, deleteAllFuture: ${deleteAllFuture}`\n    );\n\n    let whereCondition;\n\n    if (deleteAllFuture) {\n      // Delete all future auto-generated bills\n      whereCondition = and(\n        eq(bills.reference, parentBillId),\n        eq(bills.autoGenerated, true),\n        gte(bills.startDate, new Date().toISOString().split('T')[0])\n      );\n    } else {\n      // Delete only unpaid bills (draft/sent status)\n      whereCondition = and(\n        eq(bills.reference, parentBillId),\n        eq(bills.autoGenerated, true),\n        or(eq(bills.status, 'draft'), eq(bills.status, 'sent'))\n      );\n    }\n\n    const result = await db.delete(bills).where(whereCondition);\n\n    const billsDeleted = result.rowCount || 0;\n\n    return { billsDeleted };\n  }\n\n  /**\n   * Get statistics about generated bills for a parent bill.\n   * @param parentBillId\n   */\n  async getGeneratedBillsStats(parentBillId: string): Promise<{\n    totalGenerated: number;\n    paidBills: number;\n    pendingBills: number;\n    futureBills: number;\n    totalAmount: number;\n    paidAmount: number;\n  }> {\n    const generatedBills = await db\n      .select()\n      .from(bills)\n      .where(and(eq(bills.reference, parentBillId), eq(bills.autoGenerated, true)));\n\n    const today = new Date().toISOString().split('T')[0];\n\n    const stats = {\n      totalGenerated: generatedBills.length,\n      paidBills: 0,\n      pendingBills: 0,\n      futureBills: 0,\n      totalAmount: 0,\n      paidAmount: 0,\n    };\n\n    for (const bill of generatedBills) {\n      const billAmount = parseFloat(bill.totalAmount);\n      stats.totalAmount += billAmount;\n\n      if (bill.status === 'paid') {\n        stats.paidBills++;\n        stats.paidAmount += billAmount;\n      } else if (bill.startDate > today) {\n        stats.futureBills++;\n      } else {\n        stats.pendingBills++;\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * Mark a bill as paid and update related tracking.\n   * @param billId\n   * @param paymentDate\n   */\n  async markBillAsPaid(billId: string, paymentDate?: Date): Promise<void> {\n    const paymentReceivedDate = paymentDate || new Date();\n\n    await db\n      .update(bills)\n      .set({\n        status: 'paid',\n        notes: `Payment confirmed on ${paymentReceivedDate.toLocaleDateString()}`,\n        updatedAt: new Date(),\n      })\n      .where(eq(bills.id, billId));\n\n  }\n\n  /**\n   * Get a system user for automated operations.\n   */\n  private async getSystemUser(): Promise<{ id: string }> {\n    const systemUsers = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.role, 'admin'))\n      .limit(1);\n\n    if (systemUsers.length === 0) {\n      throw new Error('No active users found for system operations');\n    }\n\n    return systemUsers[0];\n  }\n}\n\n// Export singleton instance\nexport const billGenerationService = new BillGenerationService();\n"],"version":3}