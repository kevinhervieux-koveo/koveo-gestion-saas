daa9dd73b3cf0603748ae7cb50fcbc7e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.billGenerationService = exports.BillGenerationService = void 0;
const db_1 = require("../db");
const financial_1 = require("../../shared/schemas/financial");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const uuid_1 = require("uuid");
/**
 * Advanced Bill Generation Service.
 *
 * Handles the sophisticated bill management system including:
 * - Creating future bill instances (not just money flow entries)
 * - Multiple payment plans (60% now, 40% later, etc.)
 * - Recurrence patterns with auto-generated bill chains
 * - 3-year projection of future bills
 * - Parent-child bill relationships.
 */
class BillGenerationService {
    /**
     * Get bills by reference (auto-generated bills linked to a parent).
     * @param parentBillId
     */
    async getBillsByReference(parentBillId) {
        try {
            const existingBills = await db_1.db.select().from(financial_1.bills).where((0, drizzle_orm_1.eq)(financial_1.bills.reference, parentBillId));
            return existingBills;
        }
        catch (error) {
            console.error('❌ Error getting bills by reference:', error);
            return [];
        }
    }
    /**
     * Set end date for a recurrent bill (stops future auto-generation).
     * @param billId
     * @param endDate
     */
    async setRecurrenceEndDate(billId, endDate) {
        try {
            await db_1.db
                .update(financial_1.bills)
                .set({
                endDate: endDate.toISOString().split('T')[0],
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(financial_1.bills.id, billId));
        }
        catch (error) {
            console.error('❌ Error setting recurrence end date:', error);
            throw error;
        }
    }
    /**
     * Generate future bill instances for a recurrent bill up to 3 years.
     * Creates actual bill records that users can interact with individually.
     * @param parentBill
     */
    async generateFutureBillInstances(parentBill) {
        if (parentBill.paymentType !== 'recurrent') {
            throw new Error('Only recurrent bills can generate future instances');
        }
        // Calculate projection period - respect endDate if set
        const startDate = new Date(parentBill.startDate);
        startDate.setFullYear(startDate.getFullYear() + 1); // Start from next year
        let endDate;
        if (parentBill.endDate) {
            endDate = new Date(parentBill.endDate);
        }
        else {
            endDate = new Date();
            endDate.setFullYear(endDate.getFullYear() + 3); // 3 years from now
        }
        // Check if there are already auto-generated bills to avoid duplicates
        const existingBills = await this.getBillsByReference(parentBill.id);
        if (existingBills.length > 0) {
            console.log(`⚠️ Found ${existingBills.length} existing auto-generated bills, skipping generation`);
            return {
                billsCreated: 0,
                generatedUntil: endDate.toISOString().split('T')[0],
            };
        }
        const generatedBills = [];
        const currentDate = new Date(startDate);
        let billsCreated = 0;
        // Calculate occurrences based on schedule (auto-detect from parent bill)
        const scheduleType = this.detectScheduleType(parentBill);
        const occurrences = this.calculateOccurrences(currentDate, endDate, scheduleType);
        for (const occurrenceDate of occurrences) {
            // Handle multiple payment plans
            const paymentParts = this.calculatePaymentParts(parentBill, occurrenceDate);
            for (let partIndex = 0; partIndex < paymentParts.length; partIndex++) {
                const paymentPart = paymentParts[partIndex];
                const generatedBill = {
                    id: (0, uuid_1.v4)(),
                    buildingId: parentBill.buildingId,
                    billNumber: this.generateBillNumber(parentBill, occurrenceDate, partIndex),
                    title: this.generateBillTitle(parentBill, occurrenceDate, partIndex, paymentParts.length),
                    description: `Auto-generated from: ${parentBill.title}`,
                    category: parentBill.category,
                    vendor: parentBill.vendor || 'Auto-Generated',
                    paymentType: 'unique', // Generated bills are unique payments
                    schedulePayment: 'unique',
                    costs: [paymentPart.amount.toString()],
                    totalAmount: paymentPart.amount.toString(),
                    startDate: paymentPart.dueDate.toISOString().split('T')[0],
                    endDate: null,
                    status: 'draft',
                    documentPath: null,
                    documentName: null,
                    isAiAnalyzed: false,
                    aiAnalysisData: null,
                    notes: `Auto-generated from: ${parentBill.title} (Bill #${parentBill.billNumber}). Generated as part ${partIndex + 1}/${paymentParts.length} for ${occurrenceDate.toLocaleDateString()}.`,
                    autoGenerated: true,
                    reference: parentBill.id,
                    createdBy: parentBill.createdBy,
                    createdAt: new Date(),
                    updatedAt: new Date(),
                };
                generatedBills.push(generatedBill);
                billsCreated++;
                // Batch insert every 100 bills for performance
                if (generatedBills.length >= 100) {
                    await this.insertBillsBatch(generatedBills);
                    generatedBills.length = 0;
                }
            }
        }
        // Insert remaining bills
        if (generatedBills.length > 0) {
            await this.insertBillsBatch(generatedBills);
        }
        return {
            billsCreated,
            generatedUntil: endDate.toISOString().split('T')[0],
        };
    }
    /**
     * Handle multiple payment logic for bills.
     * Examples:
     * - 60% now, 40% in 2 months
     * - 12 monthly payments of equal amounts
     * - Quarterly payments with varying amounts.
     * @param parentBill
     * @param occurrenceDate
     */
    calculatePaymentParts(parentBill, occurrenceDate) {
        const costs = parentBill.costs.map((cost) => parseFloat(cost));
        const paymentParts = [];
        if (costs.length === 1) {
            // Single payment
            paymentParts.push({
                amount: costs[0],
                dueDate: new Date(occurrenceDate),
                partNumber: 1,
            });
        }
        else {
            // Multiple payments - create payment schedule
            costs.forEach((amount, _index) => {
                const dueDate = new Date(occurrenceDate);
                // For multiple costs, spread payments over time
                // First payment on occurrence date, subsequent payments monthly
                dueDate.setMonth(dueDate.getMonth() + _index);
                paymentParts.push({
                    amount,
                    dueDate,
                    partNumber: _index + 1,
                });
            });
        }
        return paymentParts;
    }
    /**
     * Detect schedule type from parent bill characteristics.
     * @param parentBill
     */
    detectScheduleType(parentBill) {
        const costs = parentBill.costs || [];
        // Auto-detect based on cost array length and bill patterns
        if (costs.length === 12) {
            return 'monthly'; // 12 payments = monthly
        }
        else if (costs.length === 4) {
            return 'quarterly'; // 4 payments = quarterly
        }
        else if (costs.length === 2) {
            return 'yearly'; // 2 payments = bi-annual, treat as yearly with split
        }
        else if (costs.length === 1) {
            // Single payment - determine frequency from title/description
            const title = parentBill.title.toLowerCase();
            if (title.includes('annual') || title.includes('yearly')) {
                return 'yearly';
            }
            else if (title.includes('quarterly')) {
                return 'quarterly';
            }
            else if (title.includes('monthly')) {
                return 'monthly';
            }
            else {
                return 'yearly'; // Default to yearly
            }
        }
        return 'yearly'; // Default fallback
    }
    /**
     * Calculate all occurrence dates based on schedule type.
     * @param startDate
     * @param endDate
     * @param scheduleType
     */
    calculateOccurrences(startDate, endDate, scheduleType) {
        const occurrences = [];
        const currentDate = new Date(startDate);
        // Standard schedule types
        while (currentDate <= endDate) {
            occurrences.push(new Date(currentDate));
            switch (scheduleType) {
                case 'weekly':
                    currentDate.setDate(currentDate.getDate() + 7);
                    break;
                case 'monthly':
                    currentDate.setMonth(currentDate.getMonth() + 1);
                    break;
                case 'quarterly':
                    currentDate.setMonth(currentDate.getMonth() + 3);
                    break;
                case 'yearly':
                    currentDate.setFullYear(currentDate.getFullYear() + 1);
                    break;
                default:
                    throw new Error(`Unknown schedule type: ${scheduleType}`);
            }
            // Safety check to prevent infinite loops
            if (occurrences.length > 10000) {
                break;
            }
        }
        return occurrences;
    }
    /**
     * Handle custom recurring dates (yearly repetition).
     * @param startDate
     * @param endDate
     * @param customDates
     */
    calculateCustomOccurrences(startDate, endDate, customDates) {
        const occurrences = [];
        const startYear = startDate.getFullYear();
        const endYear = endDate.getFullYear();
        for (let year = startYear; year <= endYear; year++) {
            for (const dateStr of customDates) {
                const customDate = new Date(dateStr);
                customDate.setFullYear(year);
                if (customDate >= startDate && customDate <= endDate) {
                    occurrences.push(new Date(customDate));
                }
            }
        }
        return occurrences.sort((a, b) => a.getTime() - b.getTime());
    }
    /**
     * Generate unique bill number for auto-generated bills.
     * @param parentBill
     * @param occurrenceDate
     * @param partIndex
     */
    generateBillNumber(parentBill, occurrenceDate, partIndex) {
        const dateStr = occurrenceDate.toISOString().slice(0, 7); // YYYY-MM
        const partSuffix = partIndex > 0 ? `-P${partIndex + 1}` : '';
        return `${parentBill.billNumber}-${dateStr}${partSuffix}`;
    }
    /**
     * Generate descriptive title for auto-generated bills.
     * @param parentBill
     * @param occurrenceDate
     * @param partIndex
     * @param totalParts
     */
    generateBillTitle(parentBill, occurrenceDate, partIndex, totalParts) {
        const monthYear = occurrenceDate.toLocaleDateString('en-US', {
            month: 'long',
            year: 'numeric',
        });
        if (totalParts > 1) {
            return `${parentBill.title} ${monthYear} (Auto-Generated)`;
        }
        else {
            return `${parentBill.title} ${monthYear} (Auto-Generated)`;
        }
    }
    /**
     * Clean up existing auto-generated bills for a parent bill.
     * @param parentBillId
     */
    async cleanupExistingGeneratedBills(parentBillId) {
        try {
            const result = await db_1.db
                .delete(financial_1.bills)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(financial_1.bills.reference, parentBillId), (0, drizzle_orm_1.eq)(financial_1.bills.autoGenerated, true), (0, drizzle_orm_1.or)((0, drizzle_orm_1.eq)(financial_1.bills.status, 'draft'), (0, drizzle_orm_1.eq)(financial_1.bills.status, 'sent'))));
            console.log(`🗑️ Cleaned up auto-generated bills for parent bill ${parentBillId}`);
        }
        catch (error) {
            console.error('❌ Error cleaning up generated bills:', error);
            throw error;
        }
    }
    /**
     * Batch insert bills for performance.
     * @param billBatch
     */
    async insertBillsBatch(billBatch) {
        try {
            await db_1.db.insert(financial_1.bills).values(billBatch);
            console.log(`✅ Batch inserted ${billBatch.length} bills`);
        }
        catch (error) {
            console.error('❌ Error inserting bill batch:', error);
            throw error;
        }
    }
    /**
     * Update all future auto-generated bills when the parent bill is modified.
     * @param parentBillId
     * @param updates
     */
    async updateGeneratedBillsFromParent(parentBillId, updates) {
        // Find all auto-generated bills for this parent
        const generatedBills = await db_1.db
            .select()
            .from(financial_1.bills)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(financial_1.bills.reference, parentBillId), (0, drizzle_orm_1.eq)(financial_1.bills.autoGenerated, true)));
        let billsUpdated = 0;
        for (const generatedBill of generatedBills) {
            const updatedFields = {};
            // Update fields that should propagate to generated bills
            if (updates.title) {
                // Preserve the date and part information in the title
                const titleParts = generatedBill.title.split(' - ');
                if (titleParts.length >= 2) {
                    updatedFields.title = `${updates.title} - ${titleParts.slice(1).join(' - ')}`;
                }
            }
            if (updates.category) {
                updatedFields.category = updates.category;
            }
            if (updates.vendor) {
                updatedFields.vendor = updates.vendor;
            }
            if (updates.notes) {
                updatedFields.notes = `Auto-generated bill - ${updates.notes}`;
            }
            if (Object.keys(updatedFields).length > 0) {
                updatedFields.updatedAt = new Date();
                await db_1.db.update(financial_1.bills).set(updatedFields).where((0, drizzle_orm_1.eq)(financial_1.bills.id, generatedBill.id));
                billsUpdated++;
            }
        }
        return { billsUpdated };
    }
    /**
     * Delete future auto-generated bills with cascade options.
     * @param parentBillId
     * @param deleteAllFuture
     */
    async deleteGeneratedBills(parentBillId, deleteAllFuture = false) {
        console.log(`🗑️ Deleting generated bills for parent ${parentBillId}, deleteAllFuture: ${deleteAllFuture}`);
        let whereCondition;
        if (deleteAllFuture) {
            // Delete all future auto-generated bills
            whereCondition = (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(financial_1.bills.reference, parentBillId), (0, drizzle_orm_1.eq)(financial_1.bills.autoGenerated, true), (0, drizzle_orm_1.gte)(financial_1.bills.startDate, new Date().toISOString().split('T')[0]));
        }
        else {
            // Delete only unpaid bills (draft/sent status)
            whereCondition = (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(financial_1.bills.reference, parentBillId), (0, drizzle_orm_1.eq)(financial_1.bills.autoGenerated, true), (0, drizzle_orm_1.or)((0, drizzle_orm_1.eq)(financial_1.bills.status, 'draft'), (0, drizzle_orm_1.eq)(financial_1.bills.status, 'sent')));
        }
        const result = await db_1.db.delete(financial_1.bills).where(whereCondition);
        const billsDeleted = result.rowCount || 0;
        return { billsDeleted };
    }
    /**
     * Get statistics about generated bills for a parent bill.
     * @param parentBillId
     */
    async getGeneratedBillsStats(parentBillId) {
        const generatedBills = await db_1.db
            .select()
            .from(financial_1.bills)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(financial_1.bills.reference, parentBillId), (0, drizzle_orm_1.eq)(financial_1.bills.autoGenerated, true)));
        const today = new Date().toISOString().split('T')[0];
        const stats = {
            totalGenerated: generatedBills.length,
            paidBills: 0,
            pendingBills: 0,
            futureBills: 0,
            totalAmount: 0,
            paidAmount: 0,
        };
        for (const bill of generatedBills) {
            const billAmount = parseFloat(bill.totalAmount);
            stats.totalAmount += billAmount;
            if (bill.status === 'paid') {
                stats.paidBills++;
                stats.paidAmount += billAmount;
            }
            else if (bill.startDate > today) {
                stats.futureBills++;
            }
            else {
                stats.pendingBills++;
            }
        }
        return stats;
    }
    /**
     * Mark a bill as paid and update related tracking.
     * @param billId
     * @param paymentDate
     */
    async markBillAsPaid(billId, paymentDate) {
        const paymentReceivedDate = paymentDate || new Date();
        await db_1.db
            .update(financial_1.bills)
            .set({
            status: 'paid',
            notes: `Payment confirmed on ${paymentReceivedDate.toLocaleDateString()}`,
            updatedAt: new Date(),
        })
            .where((0, drizzle_orm_1.eq)(financial_1.bills.id, billId));
    }
    /**
     * Get a system user for automated operations.
     */
    async getSystemUser() {
        const systemUsers = await db_1.db
            .select({ id: schema_1.users.id })
            .from(schema_1.users)
            .where((0, drizzle_orm_1.eq)(schema_1.users.role, 'admin'))
            .limit(1);
        if (systemUsers.length === 0) {
            throw new Error('No active users found for system operations');
        }
        return systemUsers[0];
    }
}
exports.BillGenerationService = BillGenerationService;
// Export singleton instance
exports.billGenerationService = new BillGenerationService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,