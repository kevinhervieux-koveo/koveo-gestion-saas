3794b68999b5c060cbeef508a14f84ee
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QualityMetrics = QualityMetrics;
const jsx_runtime_1 = require("react/jsx-runtime");
const card_1 = require("@/components/ui/card");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
const react_query_1 = require("@tanstack/react-query");
const skeleton_1 = require("@/components/ui/skeleton");
/**
 * Quality metrics component that displays comprehensive development quality indicators
 * including code coverage, complexity, performance metrics, and compliance scores.
 * @returns JSX element displaying the quality metrics dashboard.
 */
/**
 * QualityMetrics function.
 * @returns Function result.
 */
function QualityMetrics() {
    const { t } = (0, use_language_1.useLanguage)();
    const { data: metricsData, isLoading } = (0, react_query_1.useQuery)({
        queryKey: ['/api/quality-metrics'],
        staleTime: 5 * 60 * 1000, // 5 minutes
        refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes
    });
    const getColorByValue = (label, _value) => {
        if (label === t('codeCoverage')) {
            const coverage = parseInt(_value);
            if (coverage >= 80) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (coverage >= 60) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        if (label === t('translationCoverage')) {
            const coverage = parseInt(_value);
            if (coverage >= 95) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (coverage >= 80) {
                return { bg: 'bg-blue-50', text: 'text-blue-600' };
            }
            if (coverage >= 60) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        if (label === t('codeQuality')) {
            if (['A+', 'A'].includes(_value)) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (['B+', 'B'].includes(_value)) {
                return { bg: 'bg-blue-50', text: 'text-blue-600' };
            }
            return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
        }
        if (label === t('securityIssues')) {
            const issues = parseInt(_value);
            if (issues === 0) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (issues <= 5) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        // Performance metrics color coding with null safety
        if (label === t('responseTime')) {
            const timeMs = parseInt((_value || '0ms').replace('ms', ''));
            if (timeMs <= 100) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (timeMs <= 200) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        if (label === t('memoryUsage')) {
            const memoryMB = parseInt((_value || '0MB').replace('MB', ''));
            if (memoryMB <= 50) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (memoryMB <= 100) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        if (label === t('bundleSize')) {
            const sizeMB = parseFloat((_value || '0MB').replace('MB', ''));
            if (sizeMB <= 2) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (sizeMB <= 5) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        if (label === t('dbQueryTime')) {
            const queryMs = parseInt((_value || '0ms').replace('ms', ''));
            if (queryMs <= 50) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (queryMs <= 100) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        if (label === t('pageLoadTime')) {
            const loadMs = parseInt((_value || '0ms').replace('ms', ''));
            if (loadMs <= 1000) {
                return { bg: 'bg-green-50', text: 'text-green-600' };
            }
            if (loadMs <= 2000) {
                return { bg: 'bg-yellow-50', text: 'text-yellow-600' };
            }
            return { bg: 'bg-red-50', text: 'text-red-600' };
        }
        return { bg: 'bg-orange-50', text: 'text-orange-600' };
    };
    const metrics = metricsData
        ? [
            {
                _value: metricsData.coverage,
                label: t('codeCoverage'),
                ...getColorByValue(t('codeCoverage'), metricsData.coverage),
            },
            {
                _value: metricsData.codeQuality,
                label: t('codeQuality'),
                ...getColorByValue(t('codeQuality'), metricsData.codeQuality),
            },
            {
                _value: metricsData.securityIssues,
                label: t('securityIssues'),
                ...getColorByValue(t('securityIssues'), metricsData.securityIssues),
            },
            {
                _value: metricsData.buildTime,
                label: t('buildTime'),
                ...getColorByValue(t('buildTime'), metricsData.buildTime),
            },
            {
                _value: metricsData.translationCoverage,
                label: t('translationCoverage'),
                ...getColorByValue(t('translationCoverage'), metricsData.translationCoverage),
            },
            // Performance metrics with null safety
            {
                _value: metricsData.responseTime || 'N/A',
                label: t('responseTime'),
                ...getColorByValue(t('responseTime'), metricsData.responseTime || '0ms'),
            },
            {
                _value: metricsData.memoryUsage || 'N/A',
                label: t('memoryUsage'),
                ...getColorByValue(t('memoryUsage'), metricsData.memoryUsage || '0MB'),
            },
            {
                _value: metricsData.bundleSize || 'N/A',
                label: t('bundleSize'),
                ...getColorByValue(t('bundleSize'), metricsData.bundleSize || '0MB'),
            },
            {
                _value: metricsData.dbQueryTime || 'N/A',
                label: t('dbQueryTime'),
                ...getColorByValue(t('dbQueryTime'), metricsData.dbQueryTime || '0ms'),
            },
            {
                _value: metricsData.pageLoadTime || 'N/A',
                label: t('pageLoadTime'),
                ...getColorByValue(t('pageLoadTime'), metricsData.pageLoadTime || '0ms'),
            },
        ]
        : [];
    return ((0, jsx_runtime_1.jsx)(card_1.Card, { children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: 'p-6', children: [(0, jsx_runtime_1.jsxs)("h3", { className: 'text-lg font-semibold text-gray-900 mb-4 flex items-center', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.TrendingUp, { className: 'text-koveo-navy mr-3', size: 20 }), t('qualityMetrics')] }), (0, jsx_runtime_1.jsx)("div", { className: 'grid grid-cols-2 lg:grid-cols-5 xl:grid-cols-10 gap-4', children: isLoading
                        ? // Loading skeleton
                            Array.from({ length: 10 }).map((_, _index) => ((0, jsx_runtime_1.jsxs)("div", { className: 'text-center p-4 bg-gray-50 rounded-lg', children: [(0, jsx_runtime_1.jsx)(skeleton_1.Skeleton, { className: 'h-8 w-16 mx-auto mb-2' }), (0, jsx_runtime_1.jsx)(skeleton_1.Skeleton, { className: 'h-4 w-20 mx-auto' })] }, `skeleton-${_index}`)))
                        : metrics.map((metric) => ((0, jsx_runtime_1.jsxs)("div", { className: `text-center p-4 ${metric.bg} rounded-lg`, children: [(0, jsx_runtime_1.jsx)("div", { className: `text-2xl font-bold ${metric.text}`, children: metric._value }), (0, jsx_runtime_1.jsx)("div", { className: 'text-sm text-gray-600', children: metric.label })] }, metric.label))) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,