{"file":"/home/runner/workspace/client/src/components/forms/organization-form.tsx","mappings":"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","names":[],"sources":["/home/runner/workspace/client/src/components/forms/organization-form.tsx"],"sourcesContent":["import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLanguage } from '@/hooks/use-language';\n\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { type InsertOrganization } from '@shared/schema';\n\n/**\n * Props for the OrganizationForm component.\n */\ninterface OrganizationFormProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n// Define the form schema with Quebec-specific validation\nconst organizationFormSchema = z.object({\n  name: z\n    .string()\n    .min(1, 'Organization name is required (example: Maple Property Management)')\n    .max(200, 'Organization name must be less than 200 characters'),\n  type: z.string().min(1, 'Please select an organization type from the dropdown'),\n  address: z\n    .string()\n    .min(1, 'Street address is required (example: 123 Rue Saint-Denis)')\n    .max(300, 'Address must be less than 300 characters'),\n  city: z.string().min(1, 'City name is required (example: Montréal)').max(100, 'City name must be less than 100 characters').regex(/^[a-zA-ZÀ-ÿ\\s'-]+$/, 'City name can only contain letters, spaces, apostrophes and hyphens'),\n  province: z.string().min(1, 'Province is required').default('QC'),\n  postalCode: z\n    .string()\n    .min(1, 'Postal code is required')\n    .regex(\n      /^[A-Z]\\d[A-Z]\\s?\\d[A-Z]\\d$|^[A-Z]\\d[A-Z]\\d[A-Z]\\d$/,\n      'Postal code must follow Canadian format (example: H1A 1B1)'\n    ),\n  phone: z.string().optional().refine((val) => {\n    if (!val) return true;\n    return /^(\\+1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/.test(val);\n  }, 'Phone number must be a valid North American format (example: (514) 123-4567)'),\n  email: z.string().email('Please enter a valid email address (example: contact@organization.com)').optional().or(z.literal('')),\n  website: z.string().url('Website must be a valid URL (example: https://www.organization.com)').optional().or(z.literal('')),\n  registrationNumber: z.string().max(50, 'Registration number must be less than 50 characters').optional(),\n});\n\n/**\n *\n */\ntype OrganizationFormData = z.infer<typeof organizationFormSchema>;\n\n/**\n * Form for creating new organizations in the Quebec property management system.\n * Includes all required fields with Quebec-specific defaults and validation.\n * @param root0 - Component props.\n * @param root0.open - Dialog open state.\n * @param root0.onOpenChange - Callback to handle dialog open state changes.\n * @returns Organization form dialog component.\n */\n/**\n * OrganizationForm function.\n * @param root0\n * @param root0.open\n * @param root0.onOpenChange\n * @returns Function result.\n */\nexport function OrganizationForm({ open, onOpenChange }: OrganizationFormProps) {\n  const { t: _t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(organizationFormSchema),\n    defaultValues: {\n      name: '',\n      type: '',\n      address: '',\n      city: '',\n      province: 'QC', // Default to Quebec\n      postalCode: '',\n      phone: '',\n      email: '',\n      website: '',\n      registrationNumber: '',\n    },\n  });\n\n  const createOrganizationMutation = useMutation({\n    mutationFn: async (_data: InsertOrganization) => {\n      const response = await apiRequest('POST', '/api/organizations', _data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Organization created successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/organizations'] });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (_error: unknown) => {\n      toast({\n        title: 'Error',\n        description: (_error as Error)?.message || 'Failed to create organization',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (_data: OrganizationFormData) => {\n    // Convert empty strings to undefined for optional fields\n    const cleanData: InsertOrganization = {\n      ..._data,\n      phone: _data.phone || undefined,\n      email: _data.email || undefined,\n      website: _data.website || undefined,\n      registrationNumber: _data.registrationNumber || undefined,\n    };\n\n    createOrganizationMutation.mutate(cleanData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className='sm:max-w-[600px] max-h-[90vh] overflow-y-auto'>\n        <DialogHeader>\n          <DialogTitle>Create New Organization</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n              <FormField\n                control={form.control}\n                name='name'\n                render={({ field }) => (\n                  <FormItem className='md:col-span-2'>\n                    <FormLabel>Organization Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder='Enter organization name' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='type'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Type *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder='Select organization type' />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value='management_company'>Management Company</SelectItem>\n                        <SelectItem value='syndicate'>Syndicate</SelectItem>\n                        <SelectItem value='cooperative'>Cooperative</SelectItem>\n                        <SelectItem value='condo_association'>Condo Association</SelectItem>\n                        <SelectItem value='Demo'>Demo</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='registrationNumber'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quebec Registration Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder='Business registration number' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='address'\n                render={({ field }) => (\n                  <FormItem className='md:col-span-2'>\n                    <FormLabel>Address *</FormLabel>\n                    <FormControl>\n                      <Input placeholder='Street address' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='city'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>City *</FormLabel>\n                    <FormControl>\n                      <Input placeholder='City' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='province'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Province</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value='QC'>Quebec (QC)</SelectItem>\n                        <SelectItem value='ON'>Ontario (ON)</SelectItem>\n                        <SelectItem value='BC'>British Columbia (BC)</SelectItem>\n                        <SelectItem value='AB'>Alberta (AB)</SelectItem>\n                        <SelectItem value='SK'>Saskatchewan (SK)</SelectItem>\n                        <SelectItem value='MB'>Manitoba (MB)</SelectItem>\n                        <SelectItem value='NB'>New Brunswick (NB)</SelectItem>\n                        <SelectItem value='NS'>Nova Scotia (NS)</SelectItem>\n                        <SelectItem value='PE'>Prince Edward Island (PE)</SelectItem>\n                        <SelectItem value='NL'>Newfoundland and Labrador (NL)</SelectItem>\n                        <SelectItem value='NT'>Northwest Territories (NT)</SelectItem>\n                        <SelectItem value='NU'>Nunavut (NU)</SelectItem>\n                        <SelectItem value='YT'>Yukon (YT)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='postalCode'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Postal Code *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder='A1A 1A1'\n                        {...field}\n                        onChange={(e) => {\n                          // Auto-format postal code to uppercase\n                          const value = e.target.value.toUpperCase();\n                          field.onChange(value);\n                        }}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='phone'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone</FormLabel>\n                    <FormControl>\n                      <Input placeholder='(514) 123-4567' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='email'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input placeholder='contact@organization.com' type='email' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='website'\n                render={({ field }) => (\n                  <FormItem className='md:col-span-2'>\n                    <FormLabel>Website</FormLabel>\n                    <FormControl>\n                      <Input placeholder='https://www.organization.com' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className='flex justify-end space-x-2 pt-4'>\n              <Button\n                type='button'\n                variant='outline'\n                onClick={() => onOpenChange(false)}\n                disabled={createOrganizationMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button type='submit' disabled={createOrganizationMutation.isPending}>\n                {createOrganizationMutation.isPending ? 'Creating...' : 'Create Organization'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"version":3}