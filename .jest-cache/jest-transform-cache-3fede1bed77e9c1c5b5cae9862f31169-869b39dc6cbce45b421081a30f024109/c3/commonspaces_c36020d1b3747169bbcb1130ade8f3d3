8875606224b59a31a6483f4f14629321
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommonSpacesRoutes = registerCommonSpacesRoutes;
const drizzle_orm_1 = require("drizzle-orm");
const db_1 = require("../db");
const auth_1 = require("../auth");
const zod_1 = require("zod");
const schema = __importStar(require("@shared/schema"));
const { commonSpaces, bookings, userBookingRestrictions, userTimeLimits, buildings, users, userResidences, userOrganizations, } = schema;
// Validation schemas
const commonSpaceFilterSchema = zod_1.z.object({
    building_id: zod_1.z.string().uuid().optional(),
});
const bookingFilterSchema = zod_1.z.object({
    start_date: zod_1.z.string().datetime().optional(),
    end_date: zod_1.z.string().datetime().optional(),
});
// Calendar-specific schemas
const calendarQuerySchema = zod_1.z.object({
    start_date: zod_1.z.string().datetime(),
    end_date: zod_1.z.string().datetime(),
    view: zod_1.z.enum(['month', 'week', 'day']).optional().default('month'),
});
const buildingCalendarSchema = zod_1.z.object({
    buildingId: zod_1.z.string().uuid(),
});
const createBookingSchema = zod_1.z.object({
    start_time: zod_1.z.string().datetime(),
    end_time: zod_1.z.string().datetime(),
});
const createRestrictionSchema = zod_1.z.object({
    common_space_id: zod_1.z.string().uuid(),
    is_blocked: zod_1.z.boolean(),
    reason: zod_1.z.string().optional(),
});
const createCommonSpaceSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Name is required').max(100, 'Name too long'),
    description: zod_1.z.string().optional(),
    building_id: zod_1.z.string().uuid('Building ID must be a valid UUID'),
    is_reservable: zod_1.z.boolean().default(true),
    capacity: zod_1.z.number().int().min(1).max(200).optional(),
    opening_hours: zod_1.z
        .object({
        start: zod_1.z.string().regex(/^\d{2}:\d{2}$/, 'Invalid time format'),
        end: zod_1.z.string().regex(/^\d{2}:\d{2}$/, 'Invalid time format'),
    })
        .optional(),
});
const setTimeLimitSchema = zod_1.z.object({
    user_id: zod_1.z.string().uuid(),
    common_space_id: zod_1.z.string().uuid().optional(), // null means applies to all spaces
    limit_type: zod_1.z.enum(['monthly', 'yearly']),
    limit_hours: zod_1.z.number().int().min(1).max(8760), // Max 1 year worth of hours
});
const spaceIdSchema = zod_1.z.object({
    spaceId: zod_1.z.string().uuid(),
});
const bookingIdSchema = zod_1.z.object({
    bookingId: zod_1.z.string().uuid(),
});
const userIdSchema = zod_1.z.object({
    userId: zod_1.z.string().uuid(),
});
/**
 * Helper function to get accessible building IDs for a user based on their role.
 * @param user
 */
async function getAccessibleBuildingIds(user) {
    // Admin users have access to all buildings
    if (user.role === 'admin') {
        const allBuildings = await db_1.db
            .select({ buildingId: buildings.id })
            .from(buildings)
            .where((0, drizzle_orm_1.eq)(buildings.isActive, true));
        return allBuildings.map((b) => b.buildingId);
    }
    // Check if user belongs to Koveo organization (special global access)
    const userOrgs = await db_1.db
        .select({
        organizationId: schema.organizations.id,
        organizationName: schema.organizations.name,
        canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,
    })
        .from(schema.organizations)
        .innerJoin(userOrganizations, (0, drizzle_orm_1.eq)(userOrganizations.organizationId, schema.organizations.id))
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userOrganizations.userId, user.id), (0, drizzle_orm_1.eq)(userOrganizations.isActive, true)));
    const hasGlobalAccess = userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);
    if (hasGlobalAccess) {
        const allBuildings = await db_1.db
            .select({ buildingId: buildings.id })
            .from(buildings)
            .where((0, drizzle_orm_1.eq)(buildings.isActive, true));
        return allBuildings.map((b) => b.buildingId);
    }
    // Regular users and managers: Get buildings from their organizations
    if (user.role === 'manager') {
        if (userOrgs.length > 0) {
            const orgIds = userOrgs.map((uo) => uo.organizationId);
            const orgBuildings = await db_1.db
                .select({ buildingId: buildings.id })
                .from(buildings)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(buildings.organizationId, orgIds), (0, drizzle_orm_1.eq)(buildings.isActive, true)));
            return orgBuildings.map((b) => b.buildingId);
        }
    }
    // All users can also access buildings where they have residences
    const userBuildingIds = await db_1.db
        .select({ buildingId: schema.residences.buildingId })
        .from(userResidences)
        .innerJoin(schema.residences, (0, drizzle_orm_1.eq)(userResidences.residenceId, schema.residences.id))
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userResidences.userId, user.id), (0, drizzle_orm_1.eq)(userResidences.isActive, true)));
    return userBuildingIds.map((b) => b.buildingId);
}
/**
 * Helper function to calculate user's total booking hours for a time period.
 * @param userId
 * @param commonSpaceId
 * @param limitType
 */
async function getUserBookingHours(userId, commonSpaceId, limitType) {
    const now = new Date();
    let startDate;
    if (limitType === 'monthly') {
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    }
    else {
        startDate = new Date(now.getFullYear(), 0, 1);
    }
    const conditions = [
        (0, drizzle_orm_1.eq)(bookings.userId, userId),
        (0, drizzle_orm_1.eq)(bookings.status, 'confirmed'),
        (0, drizzle_orm_1.gte)(bookings.startTime, startDate),
    ];
    if (commonSpaceId) {
        conditions.push((0, drizzle_orm_1.eq)(bookings.commonSpaceId, commonSpaceId));
    }
    const userBookings = await db_1.db
        .select({
        totalHours: (0, drizzle_orm_1.sql) `EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`,
    })
        .from(bookings)
        .where((0, drizzle_orm_1.and)(...conditions));
    return userBookings[0]?.totalHours || 0;
}
/**
 * Helper function to check if user has exceeded their booking time limit.
 * @param userId
 * @param commonSpaceId
 * @param newBookingHours
 */
async function checkUserTimeLimit(userId, commonSpaceId, newBookingHours) {
    // Get user's time limits for this space (specific or global)
    const timeLimits = await db_1.db
        .select()
        .from(userTimeLimits)
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userTimeLimits.userId, userId), (0, drizzle_orm_1.or)((0, drizzle_orm_1.eq)(userTimeLimits.commonSpaceId, commonSpaceId), (0, drizzle_orm_1.sql) `${userTimeLimits.commonSpaceId} IS NULL`)))
        .orderBy(userTimeLimits.commonSpaceId); // Specific limits come first (nulls last)
    if (timeLimits.length === 0) {
        return { withinLimit: true }; // No limits set
    }
    // Use the most specific limit (space-specific over global)
    const activeLimit = timeLimits[0];
    const currentHours = await getUserBookingHours(userId, activeLimit.commonSpaceId, activeLimit.limitType);
    const totalAfterBooking = currentHours + newBookingHours;
    const remainingHours = Math.max(0, activeLimit.limitHours - currentHours);
    if (totalAfterBooking > activeLimit.limitHours) {
        const limitPeriod = activeLimit.limitType === 'monthly' ? 'ce mois' : 'cette année';
        return {
            withinLimit: false,
            message: `Limite de temps dépassée. Vous avez utilisé ${Math.round(currentHours)}h sur ${activeLimit.limitHours}h autorisées pour ${limitPeriod}. Il vous reste ${Math.round(remainingHours)}h disponibles.`,
            remainingHours,
        };
    }
    return { withinLimit: true, remainingHours };
}
/**
 * Helper function to check if a time slot overlaps with existing bookings.
 * @param commonSpaceId
 * @param startTime
 * @param endTime
 * @param excludeBookingId
 */
async function hasOverlappingBookings(commonSpaceId, startTime, endTime, excludeBookingId) {
    const conditions = [
        (0, drizzle_orm_1.eq)(bookings.commonSpaceId, commonSpaceId),
        (0, drizzle_orm_1.eq)(bookings.status, 'confirmed'),
        (0, drizzle_orm_1.or)(
        // New booking starts during existing booking
        (0, drizzle_orm_1.and)((0, drizzle_orm_1.gte)(bookings.startTime, startTime), (0, drizzle_orm_1.lte)(bookings.startTime, endTime)), 
        // New booking ends during existing booking
        (0, drizzle_orm_1.and)((0, drizzle_orm_1.gte)(bookings.endTime, startTime), (0, drizzle_orm_1.lte)(bookings.endTime, endTime)), 
        // New booking completely contains existing booking
        (0, drizzle_orm_1.and)((0, drizzle_orm_1.lte)(bookings.startTime, startTime), (0, drizzle_orm_1.gte)(bookings.endTime, endTime)), 
        // Existing booking completely contains new booking
        (0, drizzle_orm_1.and)((0, drizzle_orm_1.gte)(bookings.startTime, startTime), (0, drizzle_orm_1.lte)(bookings.endTime, endTime))),
    ];
    if (excludeBookingId) {
        conditions.push((0, drizzle_orm_1.sql) `${bookings.id} != ${excludeBookingId}`);
    }
    const overlapping = await db_1.db
        .select({ id: bookings.id })
        .from(bookings)
        .where((0, drizzle_orm_1.and)(...conditions))
        .limit(1);
    return overlapping.length > 0;
}
/**
 * Helper function to check if user is blocked from booking a space.
 * @param userId
 * @param commonSpaceId
 */
async function isUserBlocked(userId, commonSpaceId) {
    const restriction = await db_1.db
        .select({ isBlocked: userBookingRestrictions.isBlocked })
        .from(userBookingRestrictions)
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userBookingRestrictions.userId, userId), (0, drizzle_orm_1.eq)(userBookingRestrictions.commonSpaceId, commonSpaceId)))
        .limit(1);
    return restriction.length > 0 && restriction[0].isBlocked;
}
/**
 * Helper function to check if booking time is within opening hours.
 * @param startTime
 * @param endTime
 * @param openingHours
 */
function isWithinOpeningHours(startTime, endTime, openingHours) {
    if (!openingHours || openingHours.length === 0) {
        return true; // No restrictions if no opening hours defined
    }
    const startDay = startTime.toLocaleDateString('en-US', { weekday: 'long' });
    const endDay = endTime.toLocaleDateString('en-US', { weekday: 'long' });
    // For simplicity, require booking to be within same day
    if (startDay !== endDay) {
        return false;
    }
    const dayHours = openingHours.find((oh) => oh.day === startDay);
    if (!dayHours) {
        return false; // No hours defined for this day
    }
    const startTimeStr = startTime.toTimeString().slice(0, 5); // HH:MM format
    const endTimeStr = endTime.toTimeString().slice(0, 5);
    return startTimeStr >= dayHours.open && endTimeStr <= dayHours.close;
}
/**
 * Registers all common spaces API endpoints.
 * @param app
 */
function registerCommonSpacesRoutes(app) {
    /**
     * GET /api/common-spaces - Retrieve common spaces for accessible buildings.
     */
    app.get('/api/common-spaces', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate query parameters
            const queryValidation = commonSpaceFilterSchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: 'Invalid query parameters',
                    errors: queryValidation.error.issues,
                });
            }
            const { building_id } = queryValidation.data;
            // Get accessible building IDs
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (accessibleBuildingIds.length === 0) {
                return res.json([]);
            }
            // Build conditions
            const conditions = [(0, drizzle_orm_1.eq)(buildings.isActive, true)];
            if (building_id) {
                if (!accessibleBuildingIds.includes(building_id)) {
                    return res.status(403).json({
                        message: 'Access denied to this building',
                        code: 'INSUFFICIENT_PERMISSIONS',
                    });
                }
                conditions.push((0, drizzle_orm_1.eq)(commonSpaces.buildingId, building_id));
            }
            else {
                conditions.push((0, drizzle_orm_1.inArray)(commonSpaces.buildingId, accessibleBuildingIds));
            }
            const spaces = await db_1.db
                .select({
                id: commonSpaces.id,
                name: commonSpaces.name,
                description: commonSpaces.description,
                buildingId: commonSpaces.buildingId,
                buildingName: buildings.name,
                isReservable: commonSpaces.isReservable,
                capacity: commonSpaces.capacity,
                contactPersonId: commonSpaces.contactPersonId,
                contactPersonName: (0, drizzle_orm_1.sql) `CONCAT(${users.firstName}, ' ', ${users.lastName})`,
                openingHours: commonSpaces.openingHours,
                bookingRules: commonSpaces.bookingRules,
                createdAt: commonSpaces.createdAt,
                updatedAt: commonSpaces.updatedAt,
            })
                .from(commonSpaces)
                .innerJoin(buildings, (0, drizzle_orm_1.eq)(commonSpaces.buildingId, buildings.id))
                .leftJoin(users, (0, drizzle_orm_1.eq)(commonSpaces.contactPersonId, users.id))
                .where((0, drizzle_orm_1.and)(...conditions))
                .orderBy(buildings.name, commonSpaces.name);
            res.json(spaces);
        }
        catch (error) {
            res.status(500).json({
                message: 'Failed to fetch common spaces',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/common-spaces/:spaceId/bookings - Get bookings for a specific space.
     */
    app.get('/api/common-spaces/:spaceId/bookings', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate parameters
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid space ID',
                    errors: paramValidation.error.issues,
                });
            }
            const queryValidation = bookingFilterSchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: 'Invalid query parameters',
                    errors: queryValidation.error.issues,
                });
            }
            const { spaceId } = paramValidation.data;
            const { start_date, end_date } = queryValidation.data;
            // Check if user has access to this space
            const space = await db_1.db
                .select({
                id: commonSpaces.id,
                buildingId: commonSpaces.buildingId,
            })
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.id, spaceId))
                .limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: 'Common space not found',
                    code: 'NOT_FOUND',
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                return res.status(403).json({
                    message: 'Access denied to this common space',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Build query conditions
            const conditions = [(0, drizzle_orm_1.eq)(bookings.commonSpaceId, spaceId)];
            if (start_date) {
                conditions.push((0, drizzle_orm_1.gte)(bookings.startTime, new Date(start_date)));
            }
            if (end_date) {
                conditions.push((0, drizzle_orm_1.lte)(bookings.endTime, new Date(end_date)));
            }
            const spaceBookings = await db_1.db
                .select({
                id: bookings.id,
                commonSpaceId: bookings.commonSpaceId,
                userId: bookings.userId,
                userName: (0, drizzle_orm_1.sql) `CONCAT(${users.firstName}, ' ', ${users.lastName})`,
                userEmail: users.email,
                startTime: bookings.startTime,
                endTime: bookings.endTime,
                status: bookings.status,
                createdAt: bookings.createdAt,
                updatedAt: bookings.updatedAt,
            })
                .from(bookings)
                .innerJoin(users, (0, drizzle_orm_1.eq)(bookings.userId, users.id))
                .where((0, drizzle_orm_1.and)(...conditions))
                .orderBy(bookings.startTime);
            res.json(spaceBookings);
        }
        catch (error) {
            console.error('❌ Error fetching bookings:', error);
            res.status(500).json({
                message: 'Failed to fetch bookings',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * POST /api/common-spaces/:spaceId/bookings - Create a new booking.
     */
    app.post('/api/common-spaces/:spaceId/bookings', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate parameters and body
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid space ID',
                    errors: paramValidation.error.issues,
                });
            }
            const bodyValidation = createBookingSchema.safeParse(req.body);
            if (!bodyValidation.success) {
                return res.status(400).json({
                    message: 'Invalid booking data',
                    errors: bodyValidation.error.issues,
                });
            }
            const { spaceId } = paramValidation.data;
            const { start_time, end_time } = bodyValidation.data;
            const startTime = new Date(start_time);
            const endTime = new Date(end_time);
            // Validate time range
            if (startTime >= endTime) {
                return res.status(400).json({
                    message: 'Start time must be before end time',
                    code: 'INVALID_TIME_RANGE',
                });
            }
            // Allow bookings for today and future dates (with 5-minute buffer for current time)
            const now = new Date();
            const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
            if (startTime < fiveMinutesAgo) {
                return res.status(400).json({
                    message: 'Cannot book in the past',
                    code: 'INVALID_TIME_RANGE',
                });
            }
            // Get common space details
            const space = await db_1.db
                .select({
                id: commonSpaces.id,
                name: commonSpaces.name,
                buildingId: commonSpaces.buildingId,
                isReservable: commonSpaces.isReservable,
                openingHours: commonSpaces.openingHours,
            })
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.id, spaceId))
                .limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: 'Common space not found',
                    code: 'NOT_FOUND',
                });
            }
            const commonSpace = space[0];
            // Check if space is reservable
            if (!commonSpace.isReservable) {
                return res.status(400).json({
                    message: 'This common space is not reservable',
                    code: 'NOT_RESERVABLE',
                });
            }
            // Check user access to building
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(commonSpace.buildingId)) {
                return res.status(403).json({
                    message: 'Access denied to this common space',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Check if user is blocked
            const blocked = await isUserBlocked(user.id, spaceId);
            if (blocked) {
                return res.status(403).json({
                    message: 'You are blocked from booking this space',
                    code: 'USER_BLOCKED',
                });
            }
            // Check opening hours
            if (commonSpace.openingHours &&
                !isWithinOpeningHours(startTime, endTime, commonSpace.openingHours)) {
                return res.status(400).json({
                    message: 'Booking time is outside opening hours',
                    code: 'OUTSIDE_OPENING_HOURS',
                });
            }
            // Check for overlapping bookings
            const hasOverlap = await hasOverlappingBookings(spaceId, startTime, endTime);
            if (hasOverlap) {
                return res.status(409).json({
                    message: 'Time slot is already booked',
                    code: 'TIME_CONFLICT',
                });
            }
            // Check user's time limits
            const bookingDurationHours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);
            const timeLimitCheck = await checkUserTimeLimit(user.id, spaceId, bookingDurationHours);
            if (!timeLimitCheck.withinLimit) {
                return res.status(403).json({
                    message: timeLimitCheck.message,
                    code: 'TIME_LIMIT_EXCEEDED',
                    remainingHours: timeLimitCheck.remainingHours,
                });
            }
            // Create booking
            const newBooking = await db_1.db
                .insert(bookings)
                .values({
                commonSpaceId: spaceId,
                userId: user.id,
                startTime,
                endTime,
                status: 'confirmed',
            })
                .returning();
            res.status(201).json({
                message: 'Booking created successfully',
                booking: newBooking[0],
            });
        }
        catch (error) {
            console.error('❌ Error creating booking:', error);
            res.status(500).json({
                message: 'Failed to create booking',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/common-spaces/calendar/:spaceId - Get calendar data for a specific space.
     */
    app.get('/api/common-spaces/calendar/:spaceId', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate parameters
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid space ID',
                    errors: paramValidation.error.issues,
                });
            }
            const queryValidation = calendarQuerySchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: 'Invalid query parameters',
                    errors: queryValidation.error.issues,
                });
            }
            const { spaceId } = paramValidation.data;
            const { start_date, end_date, view } = queryValidation.data;
            // Get space details and check access
            const space = await db_1.db
                .select({
                id: commonSpaces.id,
                name: commonSpaces.name,
                buildingId: commonSpaces.buildingId,
                isReservable: commonSpaces.isReservable,
                openingHours: commonSpaces.openingHours,
                capacity: commonSpaces.capacity,
            })
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.id, spaceId))
                .limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: 'Common space not found',
                    code: 'NOT_FOUND',
                });
            }
            const commonSpace = space[0];
            // Check user access to building
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(commonSpace.buildingId)) {
                return res.status(403).json({
                    message: 'Access denied to this common space',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Get bookings for the specified date range
            const conditions = [
                (0, drizzle_orm_1.eq)(bookings.commonSpaceId, spaceId),
                (0, drizzle_orm_1.eq)(bookings.status, 'confirmed'),
                (0, drizzle_orm_1.gte)(bookings.startTime, new Date(start_date)),
                (0, drizzle_orm_1.lte)(bookings.endTime, new Date(end_date)),
            ];
            const spaceBookings = await db_1.db
                .select({
                id: bookings.id,
                startTime: bookings.startTime,
                endTime: bookings.endTime,
                status: bookings.status,
                userId: bookings.userId,
                userName: (0, drizzle_orm_1.sql) `CONCAT(${users.firstName}, ' ', ${users.lastName})`,
                userEmail: users.email,
                userRole: users.role,
            })
                .from(bookings)
                .innerJoin(users, (0, drizzle_orm_1.eq)(bookings.userId, users.id))
                .where((0, drizzle_orm_1.and)(...conditions))
                .orderBy(bookings.startTime);
            // Determine permissions
            const canViewDetails = ['admin', 'manager'].includes(user.role);
            // Transform bookings to calendar events
            const events = spaceBookings.map((booking) => ({
                id: booking.id,
                startTime: booking.startTime.toISOString(),
                endTime: booking.endTime.toISOString(),
                status: booking.status,
                userId: booking.userId,
                userName: canViewDetails || booking.userId === user.id ? booking.userName : 'Déjà Réservé',
                userEmail: canViewDetails || booking.userId === user.id ? booking.userEmail : null,
                isOwnBooking: booking.userId === user.id,
                spaceId: spaceId,
                spaceName: commonSpace.name,
                userRole: booking.userRole,
            }));
            // Calculate summary statistics
            const totalBookings = events.length;
            const totalHours = events.reduce((sum, event) => {
                const duration = (new Date(event.endTime).getTime() - new Date(event.startTime).getTime()) /
                    (1000 * 60 * 60);
                return sum + duration;
            }, 0);
            const uniqueUsers = new Set(events.map((e) => e.userId)).size;
            // Build calendar response
            const calendarData = {
                space: {
                    id: commonSpace.id,
                    name: commonSpace.name,
                    isReservable: commonSpace.isReservable,
                    openingHours: commonSpace.openingHours,
                },
                calendar: {
                    view,
                    startDate: start_date,
                    endDate: end_date,
                    events,
                },
                permissions: {
                    canViewDetails,
                    canCreateBookings: commonSpace.isReservable && !(await isUserBlocked(user.id, spaceId)),
                },
                summary: {
                    totalBookings,
                    totalHours: Math.round(totalHours * 10) / 10,
                    uniqueUsers,
                },
            };
            res.json(calendarData);
        }
        catch (error) {
            console.error('❌ Error fetching calendar data:', error);
            res.status(500).json({
                message: 'Failed to fetch calendar data',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/common-spaces/my-bookings - Get current user's bookings.
     */
    app.get('/api/common-spaces/my-bookings', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user;
            // Get all user's confirmed bookings with space and building info
            const userBookings = await db_1.db
                .select({
                id: bookings.id,
                commonSpaceId: bookings.commonSpaceId,
                startTime: bookings.startTime,
                endTime: bookings.endTime,
                status: bookings.status,
                createdAt: bookings.createdAt,
                commonSpaceName: commonSpaces.name,
                buildingName: buildings.name,
                buildingAddress: buildings.address,
            })
                .from(bookings)
                .innerJoin(commonSpaces, (0, drizzle_orm_1.eq)(bookings.commonSpaceId, commonSpaces.id))
                .innerJoin(buildings, (0, drizzle_orm_1.eq)(commonSpaces.buildingId, buildings.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(bookings.userId, user.id), (0, drizzle_orm_1.eq)(bookings.status, 'confirmed')))
                .orderBy((0, drizzle_orm_1.desc)(bookings.startTime));
            res.json(userBookings);
        }
        catch (error) {
            console.error('❌ Error fetching user bookings:', error);
            res.status(500).json({
                message: 'Failed to fetch user bookings',
                details: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * DELETE /api/common-spaces/bookings/:bookingId - Cancel a booking.
     */
    app.delete('/api/common-spaces/bookings/:bookingId', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate parameters
            const paramValidation = bookingIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid booking ID',
                    errors: paramValidation.error.issues,
                });
            }
            const { bookingId } = paramValidation.data;
            // Get booking details
            const booking = await db_1.db
                .select({
                id: bookings.id,
                userId: bookings.userId,
                commonSpaceId: bookings.commonSpaceId,
                buildingId: commonSpaces.buildingId,
                status: bookings.status,
            })
                .from(bookings)
                .innerJoin(commonSpaces, (0, drizzle_orm_1.eq)(bookings.commonSpaceId, commonSpaces.id))
                .where((0, drizzle_orm_1.eq)(bookings.id, bookingId))
                .limit(1);
            if (booking.length === 0) {
                return res.status(404).json({
                    message: 'Booking not found',
                    code: 'NOT_FOUND',
                });
            }
            const bookingDetails = booking[0];
            // Check permissions: users can cancel their own bookings, managers can cancel any in their buildings
            let canCancel = false;
            if (bookingDetails.userId === user.id) {
                canCancel = true; // Users can always cancel their own bookings
            }
            else if (['admin', 'manager'].includes(user.role)) {
                // Managers can cancel bookings in buildings they have access to
                const accessibleBuildingIds = await getAccessibleBuildingIds(user);
                canCancel = accessibleBuildingIds.includes(bookingDetails.buildingId);
            }
            if (!canCancel) {
                return res.status(403).json({
                    message: 'Can only cancel your own bookings',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Update booking status to cancelled
            await db_1.db
                .update(bookings)
                .set({
                status: 'cancelled',
                updatedAt: new Date(),
            })
                .where((0, drizzle_orm_1.eq)(bookings.id, bookingId));
            res.json({
                message: 'Booking cancelled successfully',
            });
        }
        catch (error) {
            console.error('❌ Error cancelling booking:', error);
            res.status(500).json({
                message: 'Failed to cancel booking',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/common-spaces/:spaceId/stats - Get usage statistics (Manager/Admin only).
     */
    app.get('/api/common-spaces/:spaceId/stats', auth_1.requireAuth, (0, auth_1.requireRole)(['admin', 'manager']), async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate parameters
            const paramValidation = spaceIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid space ID',
                    errors: paramValidation.error.issues,
                });
            }
            const { spaceId } = paramValidation.data;
            // Check access to space
            const space = await db_1.db
                .select({
                id: commonSpaces.id,
                buildingId: commonSpaces.buildingId,
                name: commonSpaces.name,
            })
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.id, spaceId))
                .limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: 'Common space not found',
                    code: 'NOT_FOUND',
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                return res.status(403).json({
                    message: 'Access denied to this common space',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Calculate stats for last year
            const oneYearAgo = new Date();
            oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
            const stats = await db_1.db
                .select({
                userId: bookings.userId,
                userName: (0, drizzle_orm_1.sql) `CONCAT(${users.firstName}, ' ', ${users.lastName})`,
                userEmail: users.email,
                totalHours: (0, drizzle_orm_1.sql) `EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`,
                totalBookings: (0, drizzle_orm_1.sql) `COUNT(${bookings.id})`,
            })
                .from(bookings)
                .innerJoin(users, (0, drizzle_orm_1.eq)(bookings.userId, users.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(bookings.commonSpaceId, spaceId), (0, drizzle_orm_1.eq)(bookings.status, 'confirmed'), (0, drizzle_orm_1.gte)(bookings.startTime, oneYearAgo)))
                .groupBy(bookings.userId, users.firstName, users.lastName, users.email)
                .orderBy((0, drizzle_orm_1.desc)((0, drizzle_orm_1.sql) `EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`));
            const totalStats = await db_1.db
                .select({
                totalBookings: (0, drizzle_orm_1.sql) `COUNT(${bookings.id})`,
                totalHours: (0, drizzle_orm_1.sql) `EXTRACT(EPOCH FROM SUM(${bookings.endTime} - ${bookings.startTime})) / 3600`,
                uniqueUsers: (0, drizzle_orm_1.sql) `COUNT(DISTINCT ${bookings.userId})`,
            })
                .from(bookings)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(bookings.commonSpaceId, spaceId), (0, drizzle_orm_1.eq)(bookings.status, 'confirmed'), (0, drizzle_orm_1.gte)(bookings.startTime, oneYearAgo)));
            res.json({
                spaceName: space[0].name,
                period: 'Last 12 months',
                summary: totalStats[0],
                userStats: stats,
            });
        }
        catch (error) {
            console.error('❌ Error fetching space statistics:', error);
            res.status(500).json({
                message: 'Failed to fetch space statistics',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * POST /api/common-spaces/users/:userId/restrictions - Block/unblock user (Manager/Admin only).
     */
    app.post('/api/common-spaces/users/:userId/restrictions', auth_1.requireAuth, (0, auth_1.requireRole)(['admin', 'manager']), async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate parameters and body
            const paramValidation = userIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid user ID',
                    errors: paramValidation.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            const bodyValidation = createRestrictionSchema.safeParse(req.body);
            if (!bodyValidation.success) {
                return res.status(400).json({
                    message: 'Invalid restriction data',
                    errors: bodyValidation.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            const { userId } = paramValidation.data;
            const { common_space_id, is_blocked, reason } = bodyValidation.data;
            // Check if target user exists
            const targetUser = await db_1.db
                .select({ id: users.id })
                .from(users)
                .where((0, drizzle_orm_1.eq)(users.id, userId))
                .limit(1);
            if (targetUser.length === 0) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'NOT_FOUND',
                });
            }
            // Check if common space exists and user has access
            const space = await db_1.db
                .select({
                id: commonSpaces.id,
                buildingId: commonSpaces.buildingId,
            })
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.id, common_space_id))
                .limit(1);
            if (space.length === 0) {
                return res.status(404).json({
                    message: 'Common space not found',
                    code: 'NOT_FOUND',
                });
            }
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                return res.status(403).json({
                    message: 'Access denied to this common space',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Check if restriction already exists
            const existingRestriction = await db_1.db
                .select({ id: userBookingRestrictions.id })
                .from(userBookingRestrictions)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userBookingRestrictions.userId, userId), (0, drizzle_orm_1.eq)(userBookingRestrictions.commonSpaceId, common_space_id)))
                .limit(1);
            if (existingRestriction.length > 0) {
                // Update existing restriction
                await db_1.db
                    .update(userBookingRestrictions)
                    .set({
                    isBlocked: is_blocked,
                    reason,
                    updatedAt: new Date(),
                })
                    .where((0, drizzle_orm_1.eq)(userBookingRestrictions.id, existingRestriction[0].id));
            }
            else {
                // Create new restriction
                await db_1.db.insert(userBookingRestrictions).values({
                    userId,
                    commonSpaceId: common_space_id,
                    isBlocked: is_blocked,
                    reason,
                });
            }
            res.json({
                message: `User ${is_blocked ? 'blocked from' : 'unblocked from'} booking this space`,
            });
        }
        catch (error) {
            console.error('❌ Error managing user restriction:', error);
            res.status(500).json({
                message: 'Failed to manage user restriction',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * POST /api/common-spaces - Create a new common space (Manager/Admin only).
     */
    app.post('/api/common-spaces', auth_1.requireAuth, (0, auth_1.requireRole)(['admin', 'manager']), async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate request body
            const validationResult = createCommonSpaceSchema.safeParse(req.body);
            if (!validationResult.success) {
                return res.status(400).json({
                    message: 'Invalid request data',
                    errors: validationResult.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            const { name, description, building_id, is_reservable, capacity, opening_hours } = validationResult.data;
            // Check if user has access to this building
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(building_id)) {
                return res.status(403).json({
                    message: 'Access denied. You can only create spaces in buildings you manage.',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Verify building exists and is active
            const building = await db_1.db
                .select({ id: buildings.id, name: buildings.name })
                .from(buildings)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(buildings.id, building_id), (0, drizzle_orm_1.eq)(buildings.isActive, true)))
                .limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    message: 'Building not found or inactive',
                    code: 'BUILDING_NOT_FOUND',
                });
            }
            // Check if a space with the same name already exists in this building
            const existingSpace = await db_1.db
                .select({ id: commonSpaces.id })
                .from(commonSpaces)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(commonSpaces.name, name), (0, drizzle_orm_1.eq)(commonSpaces.buildingId, building_id)))
                .limit(1);
            if (existingSpace.length > 0) {
                return res.status(409).json({
                    message: 'A common space with this name already exists in this building',
                    code: 'DUPLICATE_NAME',
                });
            }
            // Create the new common space
            const newSpace = await db_1.db
                .insert(commonSpaces)
                .values({
                name,
                description: description || null,
                buildingId: building_id,
                isReservable: is_reservable,
                capacity: capacity || null,
                openingHours: opening_hours ? `${opening_hours.start}-${opening_hours.end}` : null,
            })
                .returning();
            console.log(`✅ Created new common space: ${name} in building ${building[0].name}`);
            res.status(201).json({
                message: 'Common space created successfully',
                space: {
                    id: newSpace[0].id,
                    name: newSpace[0].name,
                    description: newSpace[0].description,
                    buildingId: newSpace[0].buildingId,
                    buildingName: building[0].name,
                    isReservable: newSpace[0].isReservable,
                    capacity: newSpace[0].capacity,
                    openingHours: newSpace[0].openingHours,
                    createdAt: newSpace[0].createdAt,
                },
            });
        }
        catch (error) {
            console.error('❌ Error creating common space:', error);
            res.status(500).json({
                message: 'Failed to create common space',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * POST /api/common-spaces/users/:userId/time-limits - Set user time limits (Manager/Admin only).
     */
    app.post('/api/common-spaces/users/:userId/time-limits', auth_1.requireAuth, (0, auth_1.requireRole)(['admin', 'manager']), async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            // Validate parameters
            const paramValidation = userIdSchema.safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid user ID',
                    errors: paramValidation.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            // Validate request body
            const validationResult = setTimeLimitSchema.safeParse(req.body);
            if (!validationResult.success) {
                return res.status(400).json({
                    message: 'Invalid time limit data',
                    errors: validationResult.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            const { userId } = paramValidation.data;
            const { user_id, common_space_id, limit_type, limit_hours } = validationResult.data;
            // Verify user exists
            const targetUser = await db_1.db
                .select({ id: users.id, firstName: users.firstName, lastName: users.lastName })
                .from(users)
                .where((0, drizzle_orm_1.eq)(users.id, userId))
                .limit(1);
            if (targetUser.length === 0) {
                return res.status(404).json({
                    message: 'User not found',
                    code: 'USER_NOT_FOUND',
                });
            }
            // If common_space_id is provided, verify space exists and user has access
            if (common_space_id) {
                const space = await db_1.db
                    .select({
                    id: commonSpaces.id,
                    name: commonSpaces.name,
                    buildingId: commonSpaces.buildingId,
                })
                    .from(commonSpaces)
                    .where((0, drizzle_orm_1.eq)(commonSpaces.id, common_space_id))
                    .limit(1);
                if (space.length === 0) {
                    return res.status(404).json({
                        message: 'Common space not found',
                        code: 'SPACE_NOT_FOUND',
                    });
                }
                const accessibleBuildingIds = await getAccessibleBuildingIds(user);
                if (!accessibleBuildingIds.includes(space[0].buildingId)) {
                    return res.status(403).json({
                        message: 'Access denied to this common space',
                        code: 'INSUFFICIENT_PERMISSIONS',
                    });
                }
            }
            // Check if a time limit already exists
            const existingLimit = await db_1.db
                .select({ id: userTimeLimits.id })
                .from(userTimeLimits)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(userTimeLimits.userId, userId), common_space_id
                ? (0, drizzle_orm_1.eq)(userTimeLimits.commonSpaceId, common_space_id)
                : (0, drizzle_orm_1.sql) `${userTimeLimits.commonSpaceId} IS NULL`, (0, drizzle_orm_1.eq)(userTimeLimits.limitType, limit_type)))
                .limit(1);
            if (existingLimit.length > 0) {
                // Update existing limit
                await db_1.db
                    .update(userTimeLimits)
                    .set({
                    limitHours: limit_hours,
                    updatedAt: new Date(),
                })
                    .where((0, drizzle_orm_1.eq)(userTimeLimits.id, existingLimit[0].id));
            }
            else {
                // Create new limit
                await db_1.db.insert(userTimeLimits).values({
                    userId,
                    commonSpaceId: common_space_id || null,
                    limitType: limit_type,
                    limitHours: limit_hours,
                });
            }
            console.log(`✅ Set time limit for user ${targetUser[0].firstName} ${targetUser[0].lastName}: ${limit_hours}h per ${limit_type}`);
            res.json({
                message: 'Time limit set successfully',
                user: {
                    id: targetUser[0].id,
                    name: `${targetUser[0].firstName} ${targetUser[0].lastName}`,
                    limitType: limit_type,
                    limitHours: limit_hours,
                    spaceId: common_space_id,
                },
            });
        }
        catch (error) {
            console.error('❌ Error setting time limit:', error);
            res.status(500).json({
                message: 'Failed to set time limit',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/common-spaces/users/:userId/time-limits - Get user time limits.
     */
    app.get('/api/common-spaces/users/:userId/time-limits', auth_1.requireAuth, (0, auth_1.requireRole)(['admin', 'manager']), async (req, res) => {
        try {
            const user = req.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const { userId } = req.params;
            // Get user's time limits
            const limits = await db_1.db
                .select({
                id: userTimeLimits.id,
                userId: userTimeLimits.userId,
                commonSpaceId: userTimeLimits.commonSpaceId,
                spaceName: commonSpaces.name,
                limitType: userTimeLimits.limitType,
                limitHours: userTimeLimits.limitHours,
                createdAt: userTimeLimits.createdAt,
                updatedAt: userTimeLimits.updatedAt,
            })
                .from(userTimeLimits)
                .leftJoin(commonSpaces, (0, drizzle_orm_1.eq)(userTimeLimits.commonSpaceId, commonSpaces.id))
                .where((0, drizzle_orm_1.eq)(userTimeLimits.userId, userId))
                .orderBy(userTimeLimits.limitType, userTimeLimits.commonSpaceId);
            // Calculate current usage for each limit
            const limitsWithUsage = await Promise.all(limits.map(async (limit) => {
                const currentHours = await getUserBookingHours(userId, limit.commonSpaceId, limit.limitType);
                return {
                    ...limit,
                    currentHours: Math.round(currentHours * 100) / 100,
                    remainingHours: Math.max(0, limit.limitHours - currentHours),
                };
            }));
            res.json({
                limits: limitsWithUsage,
            });
        }
        catch (error) {
            console.error('❌ Error fetching time limits:', error);
            res.status(500).json({
                message: 'Failed to fetch time limits',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/common-spaces/user-calendar - Get user's personal calendar
     * Shows all user's bookings across all spaces they have access to.
     */
    app.get('/api/common-spaces/user-calendar', auth_1.requireAuth, async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const queryValidation = calendarQuerySchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: 'Invalid calendar query parameters',
                    errors: queryValidation.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            const { start_date, end_date, view } = queryValidation.data;
            // Get user's bookings within date range
            const userBookings = await db_1.db
                .select({
                id: bookings.id,
                startTime: bookings.startTime,
                endTime: bookings.endTime,
                status: bookings.status,
                spaceName: commonSpaces.name,
                spaceId: commonSpaces.id,
                buildingName: buildings.name,
                buildingId: buildings.id,
            })
                .from(bookings)
                .innerJoin(commonSpaces, (0, drizzle_orm_1.eq)(bookings.commonSpaceId, commonSpaces.id))
                .innerJoin(buildings, (0, drizzle_orm_1.eq)(commonSpaces.buildingId, buildings.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(bookings.userId, user.id), (0, drizzle_orm_1.eq)(bookings.status, 'confirmed'), (0, drizzle_orm_1.gte)(bookings.startTime, new Date(start_date)), (0, drizzle_orm_1.lte)(bookings.endTime, new Date(end_date))))
                .orderBy(bookings.startTime);
            res.json({
                user: {
                    id: user.id,
                    name: `${user.firstName} ${user.lastName}`,
                    role: user.role,
                },
                calendar: {
                    view,
                    startDate: start_date,
                    endDate: end_date,
                    bookings: userBookings,
                },
                summary: {
                    totalBookings: userBookings.length,
                    totalHours: userBookings.reduce((total, booking) => {
                        const duration = (new Date(booking.endTime).getTime() - new Date(booking.startTime).getTime()) /
                            (1000 * 60 * 60);
                        return total + duration;
                    }, 0),
                },
            });
        }
        catch (error) {
            console.error('❌ Error fetching user calendar:', error);
            res.status(500).json({
                message: 'Failed to fetch user calendar',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
    /**
     * GET /api/common-spaces/calendar/building/:buildingId - Get building-wide calendar (Manager/Admin only)
     * Shows all bookings across all spaces in a building with full details.
     */
    app.get('/api/common-spaces/calendar/building/:buildingId', auth_1.requireAuth, (0, auth_1.requireRole)(['admin', 'manager']), async (req, res) => {
        try {
            const user = req.user || req.session?.user;
            if (!user) {
                return res.status(401).json({
                    message: 'Authentication required',
                    code: 'AUTH_REQUIRED',
                });
            }
            const paramValidation = zod_1.z.object({ buildingId: zod_1.z.string().uuid() }).safeParse(req.params);
            if (!paramValidation.success) {
                return res.status(400).json({
                    message: 'Invalid building ID',
                    errors: paramValidation.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            const queryValidation = calendarQuerySchema.safeParse(req.query);
            if (!queryValidation.success) {
                return res.status(400).json({
                    message: 'Invalid calendar query parameters',
                    errors: queryValidation.error.issues.map((issue) => ({
                        field: issue.path.join('.'),
                        message: issue.message,
                    })),
                });
            }
            const { buildingId } = paramValidation.data;
            const { start_date, end_date, view } = queryValidation.data;
            // Check building access
            const accessibleBuildingIds = await getAccessibleBuildingIds(user);
            if (!accessibleBuildingIds.includes(buildingId)) {
                return res.status(403).json({
                    message: 'Access denied to this building',
                    code: 'INSUFFICIENT_PERMISSIONS',
                });
            }
            // Get building details
            const building = await db_1.db
                .select({
                id: buildings.id,
                name: buildings.name,
                address: buildings.address,
            })
                .from(buildings)
                .where((0, drizzle_orm_1.eq)(buildings.id, buildingId))
                .limit(1);
            if (building.length === 0) {
                return res.status(404).json({
                    message: 'Building not found',
                    code: 'NOT_FOUND',
                });
            }
            // Get all bookings for spaces in this building within date range
            const buildingBookings = await db_1.db
                .select({
                id: bookings.id,
                startTime: bookings.startTime,
                endTime: bookings.endTime,
                status: bookings.status,
                spaceName: commonSpaces.name,
                spaceId: commonSpaces.id,
                userId: bookings.userId,
                userName: (0, drizzle_orm_1.sql) `CONCAT(${users.firstName}, ' ', ${users.lastName})`,
                userEmail: users.email,
                userRole: users.role,
            })
                .from(bookings)
                .innerJoin(commonSpaces, (0, drizzle_orm_1.eq)(bookings.commonSpaceId, commonSpaces.id))
                .innerJoin(users, (0, drizzle_orm_1.eq)(bookings.userId, users.id))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(commonSpaces.buildingId, buildingId), (0, drizzle_orm_1.eq)(bookings.status, 'confirmed'), (0, drizzle_orm_1.gte)(bookings.startTime, new Date(start_date)), (0, drizzle_orm_1.lte)(bookings.endTime, new Date(end_date))))
                .orderBy(bookings.startTime);
            // Get all common spaces in this building
            const buildingSpaces = await db_1.db
                .select({
                id: commonSpaces.id,
                name: commonSpaces.name,
                isReservable: commonSpaces.isReservable,
                capacity: commonSpaces.capacity,
            })
                .from(commonSpaces)
                .where((0, drizzle_orm_1.eq)(commonSpaces.buildingId, buildingId))
                .orderBy(commonSpaces.name);
            // Generate usage statistics
            const spaceUsage = buildingSpaces.map((space) => {
                const spaceBookings = buildingBookings.filter((booking) => booking.spaceId === space.id);
                const totalHours = spaceBookings.reduce((total, booking) => {
                    const duration = (new Date(booking.endTime).getTime() - new Date(booking.startTime).getTime()) /
                        (1000 * 60 * 60);
                    return total + duration;
                }, 0);
                return {
                    ...space,
                    bookingCount: spaceBookings.length,
                    totalHours: Math.round(totalHours * 10) / 10,
                    uniqueUsers: [...new Set(spaceBookings.map((b) => b.userId))].length,
                };
            });
            res.json({
                building: building[0],
                calendar: {
                    view,
                    startDate: start_date,
                    endDate: end_date,
                    events: buildingBookings,
                },
                spaces: spaceUsage,
                summary: {
                    totalBookings: buildingBookings.length,
                    totalSpaces: buildingSpaces.length,
                    activeSpaces: buildingSpaces.filter((s) => s.isReservable).length,
                    uniqueUsers: [...new Set(buildingBookings.map((b) => b.userId))].length,
                },
            });
        }
        catch (error) {
            console.error('❌ Error fetching building calendar:', error);
            res.status(500).json({
                message: 'Failed to fetch building calendar',
                error: error instanceof Error ? error.message : 'Unknown error',
            });
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,