{"file":"/home/runner/workspace/tests/integration/demo-organization-real.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/demo-organization-real.test.ts"],"sourcesContent":["/**\n * Demo Organization Integration Tests with Real Data\n * Tests API endpoints using actual demo organization data from the database\n */\n\nimport { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport request from 'supertest';\nimport express from 'express';\nimport { registerRoutes } from '../../server/routes';\n\n// Create a simple test server\nconst createTestApp = () => {\n  const app = express();\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n  \n  // Register all routes\n  registerRoutes(app);\n  \n  return app;\n};\n\ndescribe('Demo Organization Integration Tests with Real Data', () => {\n  let app: express.Application;\n\n  beforeAll(async () => {\n    app = createTestApp();\n  });\n\n  describe('Organization API Endpoints', () => {\n    it('should fetch organizations successfully', async () => {\n      const response = await request(app)\n        .get('/api/organizations')\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      // Should return some data or handle authentication properly\n      expect([200, 401, 403].includes(response.status)).toBe(true);\n    });\n\n    it('should handle demo organization queries', async () => {\n      // Use dynamic lookup instead of hardcoded ID to avoid conflicts\n      const response = await request(app)\n        .get('/api/demo/users')\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      // Should return demo users or handle properly (doesn't modify data)\n      expect([200, 401, 403, 404].includes(response.status)).toBe(true);\n    });\n  });\n\n  describe('Buildings API Endpoints', () => {\n    it('should fetch buildings successfully', async () => {\n      const response = await request(app)\n        .get('/api/buildings')\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      expect([200, 401, 403].includes(response.status)).toBe(true);\n    });\n\n    it('should handle specific building queries', async () => {\n      const buildingId = 'd084392f-facb-40a6-8685-3b40dcdd4b68'; // Koveo Tower\n      const response = await request(app)\n        .get(`/api/buildings/${buildingId}`)\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      expect([200, 401, 403, 404].includes(response.status)).toBe(true);\n    });\n  });\n\n  describe('Users API Endpoints', () => {\n    it('should handle user authentication endpoints', async () => {\n      const response = await request(app)\n        .get('/api/users/me')\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      // Should either return user data or require authentication\n      expect([200, 401, 403].includes(response.status)).toBe(true);\n    });\n  });\n\n  describe('Health Check Endpoints', () => {\n    it('should respond to health check', async () => {\n      const response = await request(app)\n        .get('/api/health')\n        .expect((res) => {\n          expect(res.status).toBeLessThanOrEqual(200);\n        });\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('status');\n    });\n\n    it('should respond to status check', async () => {\n      const response = await request(app)\n        .get('/api/health')\n        .expect((res) => {\n          expect(res.status).toBeLessThanOrEqual(200);\n        });\n      \n      expect([200, 503].includes(response.status)).toBe(true);\n    });\n  });\n\n  describe('Demo Data Validation', () => {\n    it('should validate demo users exist', async () => {\n      // Test that demo users can be queried\n      const demoUserEmail = 'emma.cote@demo.com';\n      \n      // Try to get user info - should handle appropriately\n      const response = await request(app)\n        .get('/api/users')\n        .query({ email: demoUserEmail })\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      expect([200, 401, 403, 404].includes(response.status)).toBe(true);\n    });\n\n    it('should validate demo organization structure', async () => {\n      // Verify that demo organization endpoints are accessible\n      const response = await request(app)\n        .get('/api/organizations')\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      expect([200, 401, 403].includes(response.status)).toBe(true);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid routes gracefully', async () => {\n      const response = await request(app)\n        .get('/api/nonexistent')\n        .expect((res) => {\n          expect(res.status).toBeGreaterThanOrEqual(404);\n        });\n      \n      expect(response.status).toBe(404);\n    });\n\n    it('should handle malformed requests', async () => {\n      const response = await request(app)\n        .post('/api/organizations')\n        .send({ invalid: 'data' })\n        .expect((res) => {\n          expect(res.status).toBeLessThan(500);\n        });\n      \n      // Should reject with 400/401/403 but not crash\n      expect([400, 401, 403, 422].includes(response.status)).toBe(true);\n    });\n  });\n});"],"version":3}